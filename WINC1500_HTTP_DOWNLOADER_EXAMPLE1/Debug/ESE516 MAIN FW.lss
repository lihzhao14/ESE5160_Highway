
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00028ba0  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000300  20000000  0003aba0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005994  20000300  0003aea0  00030300  2**4
                  ALLOC
  3 .stack        00002004  20005c94  00040834  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
  6 .debug_info   0013a5d5  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00011710  00000000  00000000  0016a956  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00017321  00000000  00000000  0017c066  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003e60  00000000  00000000  00193387  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003a78  00000000  00000000  001971e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00042745  00000000  00000000  0019ac5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000615e3  00000000  00000000  001dd3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c41c2  00000000  00000000  0023e987  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000eac0  00000000  00000000  00302b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	98 7c 00 20 7d b4 02 00 75 b5 02 00 75 b5 02 00     .|. }...u...u...
	...
   1202c:	ad a5 01 00 00 00 00 00 00 00 00 00 d1 a6 01 00     ................
   1203c:	19 a7 01 00 75 b5 02 00 75 b5 02 00 75 b5 02 00     ....u...u...u...
   1204c:	cd 75 02 00 f9 6a 02 00 75 b5 02 00 09 2e 01 00     .u...j..u.......
   1205c:	75 b5 02 00 4d 2f 01 00 71 7c 02 00 89 7c 02 00     u...M/..q|...|..
   1206c:	a1 7c 02 00 b9 7c 02 00 d1 7c 02 00 e9 7c 02 00     .|...|...|...|..
   1207c:	c5 b3 02 00 d9 b3 02 00 ed b3 02 00 99 82 01 00     ................
   1208c:	ad 82 01 00 c1 82 01 00 00 00 00 00 00 00 00 00     ................
   1209c:	91 2c 01 00 75 b5 02 00 cd 2d 01 00 75 b5 02 00     .,..u....-..u...
   120ac:	75 b5 02 00 00 00 00 00                             u.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003aba0 	.word	0x0003aba0

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003aba0 	.word	0x0003aba0
   1210c:	0003aba0 	.word	0x0003aba0
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223c      	movs	r2, #60	; 0x3c
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	2000476c 	.word	0x2000476c
   12224:	00014999 	.word	0x00014999

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223c      	movs	r2, #60	; 0x3c
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	2000476c 	.word	0x2000476c
   1227c:	00014999 	.word	0x00014999

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000031c 	.word	0x2000031c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b08      	ldr	r3, [pc, #32]	; (122dc <gfx_mono_framebuffer_put_byte+0x40>)
   122bc:	681a      	ldr	r2, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	019b      	lsls	r3, r3, #6
   122c4:	0019      	movs	r1, r3
   122c6:	1dbb      	adds	r3, r7, #6
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	18cb      	adds	r3, r1, r3
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	1d7a      	adds	r2, r7, #5
   122d0:	7812      	ldrb	r2, [r2, #0]
   122d2:	701a      	strb	r2, [r3, #0]
}
   122d4:	46c0      	nop			; (mov r8, r8)
   122d6:	46bd      	mov	sp, r7
   122d8:	b003      	add	sp, #12
   122da:	bd90      	pop	{r4, r7, pc}
   122dc:	2000031c 	.word	0x2000031c

000122e0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	0002      	movs	r2, r0
   122e8:	1dfb      	adds	r3, r7, #7
   122ea:	701a      	strb	r2, [r3, #0]
   122ec:	1dbb      	adds	r3, r7, #6
   122ee:	1c0a      	adds	r2, r1, #0
   122f0:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122f2:	4b07      	ldr	r3, [pc, #28]	; (12310 <gfx_mono_framebuffer_get_byte+0x30>)
   122f4:	681a      	ldr	r2, [r3, #0]
   122f6:	1dfb      	adds	r3, r7, #7
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	019b      	lsls	r3, r3, #6
   122fc:	0019      	movs	r1, r3
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	18cb      	adds	r3, r1, r3
   12304:	18d3      	adds	r3, r2, r3
   12306:	781b      	ldrb	r3, [r3, #0]
}
   12308:	0018      	movs	r0, r3
   1230a:	46bd      	mov	sp, r7
   1230c:	b002      	add	sp, #8
   1230e:	bd80      	pop	{r7, pc}
   12310:	2000031c 	.word	0x2000031c

00012314 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12314:	b5b0      	push	{r4, r5, r7, lr}
   12316:	b084      	sub	sp, #16
   12318:	af00      	add	r7, sp, #0
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0010      	movs	r0, r2
   12320:	0019      	movs	r1, r3
   12322:	1dfb      	adds	r3, r7, #7
   12324:	1c2a      	adds	r2, r5, #0
   12326:	701a      	strb	r2, [r3, #0]
   12328:	1dbb      	adds	r3, r7, #6
   1232a:	1c22      	adds	r2, r4, #0
   1232c:	701a      	strb	r2, [r3, #0]
   1232e:	1d7b      	adds	r3, r7, #5
   12330:	1c02      	adds	r2, r0, #0
   12332:	701a      	strb	r2, [r3, #0]
   12334:	1d3b      	adds	r3, r7, #4
   12336:	1c0a      	adds	r2, r1, #0
   12338:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1233a:	1dfb      	adds	r3, r7, #7
   1233c:	781a      	ldrb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	18d3      	adds	r3, r2, r3
   12344:	2b40      	cmp	r3, #64	; 0x40
   12346:	dd05      	ble.n	12354 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	1dfa      	adds	r2, r7, #7
   1234c:	7812      	ldrb	r2, [r2, #0]
   1234e:	2140      	movs	r1, #64	; 0x40
   12350:	1a8a      	subs	r2, r1, r2
   12352:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12354:	230f      	movs	r3, #15
   12356:	18fb      	adds	r3, r7, r3
   12358:	1dba      	adds	r2, r7, #6
   1235a:	7812      	ldrb	r2, [r2, #0]
   1235c:	08d2      	lsrs	r2, r2, #3
   1235e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12360:	1dbb      	adds	r3, r7, #6
   12362:	781a      	ldrb	r2, [r3, #0]
   12364:	230f      	movs	r3, #15
   12366:	18fb      	adds	r3, r7, r3
   12368:	781b      	ldrb	r3, [r3, #0]
   1236a:	00db      	lsls	r3, r3, #3
   1236c:	1ad3      	subs	r3, r2, r3
   1236e:	2201      	movs	r2, #1
   12370:	409a      	lsls	r2, r3
   12372:	230e      	movs	r3, #14
   12374:	18fb      	adds	r3, r7, r3
   12376:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   12378:	1d7b      	adds	r3, r7, #5
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <gfx_mono_generic_draw_horizontal_line+0x6e>
   12380:	e0a4      	b.n	124cc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	2b01      	cmp	r3, #1
   12388:	d02f      	beq.n	123ea <gfx_mono_generic_draw_horizontal_line+0xd6>
   1238a:	2b02      	cmp	r3, #2
   1238c:	d100      	bne.n	12390 <gfx_mono_generic_draw_horizontal_line+0x7c>
   1238e:	e095      	b.n	124bc <gfx_mono_generic_draw_horizontal_line+0x1a8>
   12390:	2b00      	cmp	r3, #0
   12392:	d061      	beq.n	12458 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   12394:	e09b      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12396:	1dfa      	adds	r2, r7, #7
   12398:	1d7b      	adds	r3, r7, #5
   1239a:	7812      	ldrb	r2, [r2, #0]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	18d3      	adds	r3, r2, r3
   123a0:	b2da      	uxtb	r2, r3
   123a2:	230d      	movs	r3, #13
   123a4:	18fc      	adds	r4, r7, r3
   123a6:	230f      	movs	r3, #15
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	0011      	movs	r1, r2
   123ae:	0018      	movs	r0, r3
   123b0:	4b48      	ldr	r3, [pc, #288]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   123b2:	4798      	blx	r3
   123b4:	0003      	movs	r3, r0
   123b6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   123b8:	230d      	movs	r3, #13
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	220d      	movs	r2, #13
   123be:	18b9      	adds	r1, r7, r2
   123c0:	220e      	movs	r2, #14
   123c2:	18ba      	adds	r2, r7, r2
   123c4:	7809      	ldrb	r1, [r1, #0]
   123c6:	7812      	ldrb	r2, [r2, #0]
   123c8:	430a      	orrs	r2, r1
   123ca:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   123cc:	1dfa      	adds	r2, r7, #7
   123ce:	1d7b      	adds	r3, r7, #5
   123d0:	7812      	ldrb	r2, [r2, #0]
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	18d3      	adds	r3, r2, r3
   123d6:	b2d9      	uxtb	r1, r3
   123d8:	230d      	movs	r3, #13
   123da:	18fb      	adds	r3, r7, r3
   123dc:	781a      	ldrb	r2, [r3, #0]
   123de:	230f      	movs	r3, #15
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	2300      	movs	r3, #0
   123e6:	4c3c      	ldr	r4, [pc, #240]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   123e8:	47a0      	blx	r4
		while (length-- > 0) {
   123ea:	1d7b      	adds	r3, r7, #5
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	1d7a      	adds	r2, r7, #5
   123f0:	1e59      	subs	r1, r3, #1
   123f2:	7011      	strb	r1, [r2, #0]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d1ce      	bne.n	12396 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   123f8:	e069      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   123fa:	1dfa      	adds	r2, r7, #7
   123fc:	1d7b      	adds	r3, r7, #5
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	18d3      	adds	r3, r2, r3
   12404:	b2da      	uxtb	r2, r3
   12406:	230d      	movs	r3, #13
   12408:	18fc      	adds	r4, r7, r3
   1240a:	230f      	movs	r3, #15
   1240c:	18fb      	adds	r3, r7, r3
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	0011      	movs	r1, r2
   12412:	0018      	movs	r0, r3
   12414:	4b2f      	ldr	r3, [pc, #188]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1241c:	230e      	movs	r3, #14
   1241e:	18fb      	adds	r3, r7, r3
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	b25b      	sxtb	r3, r3
   12424:	43db      	mvns	r3, r3
   12426:	b25b      	sxtb	r3, r3
   12428:	220d      	movs	r2, #13
   1242a:	18ba      	adds	r2, r7, r2
   1242c:	7812      	ldrb	r2, [r2, #0]
   1242e:	b252      	sxtb	r2, r2
   12430:	4013      	ands	r3, r2
   12432:	b25a      	sxtb	r2, r3
   12434:	230d      	movs	r3, #13
   12436:	18fb      	adds	r3, r7, r3
   12438:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1243a:	1dfa      	adds	r2, r7, #7
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	18d3      	adds	r3, r2, r3
   12444:	b2d9      	uxtb	r1, r3
   12446:	230d      	movs	r3, #13
   12448:	18fb      	adds	r3, r7, r3
   1244a:	781a      	ldrb	r2, [r3, #0]
   1244c:	230f      	movs	r3, #15
   1244e:	18fb      	adds	r3, r7, r3
   12450:	7818      	ldrb	r0, [r3, #0]
   12452:	2300      	movs	r3, #0
   12454:	4c20      	ldr	r4, [pc, #128]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12456:	47a0      	blx	r4
		while (length-- > 0) {
   12458:	1d7b      	adds	r3, r7, #5
   1245a:	781b      	ldrb	r3, [r3, #0]
   1245c:	1d7a      	adds	r2, r7, #5
   1245e:	1e59      	subs	r1, r3, #1
   12460:	7011      	strb	r1, [r2, #0]
   12462:	2b00      	cmp	r3, #0
   12464:	d1c9      	bne.n	123fa <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12466:	e032      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12468:	1dfa      	adds	r2, r7, #7
   1246a:	1d7b      	adds	r3, r7, #5
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	18d3      	adds	r3, r2, r3
   12472:	b2da      	uxtb	r2, r3
   12474:	230d      	movs	r3, #13
   12476:	18fc      	adds	r4, r7, r3
   12478:	230f      	movs	r3, #15
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	0011      	movs	r1, r2
   12480:	0018      	movs	r0, r3
   12482:	4b14      	ldr	r3, [pc, #80]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12484:	4798      	blx	r3
   12486:	0003      	movs	r3, r0
   12488:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   1248a:	230d      	movs	r3, #13
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	220d      	movs	r2, #13
   12490:	18b9      	adds	r1, r7, r2
   12492:	220e      	movs	r2, #14
   12494:	18ba      	adds	r2, r7, r2
   12496:	7809      	ldrb	r1, [r1, #0]
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	404a      	eors	r2, r1
   1249c:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1249e:	1dfa      	adds	r2, r7, #7
   124a0:	1d7b      	adds	r3, r7, #5
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	18d3      	adds	r3, r2, r3
   124a8:	b2d9      	uxtb	r1, r3
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230f      	movs	r3, #15
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	7818      	ldrb	r0, [r3, #0]
   124b6:	2300      	movs	r3, #0
   124b8:	4c07      	ldr	r4, [pc, #28]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   124ba:	47a0      	blx	r4
		while (length-- > 0) {
   124bc:	1d7b      	adds	r3, r7, #5
   124be:	781b      	ldrb	r3, [r3, #0]
   124c0:	1d7a      	adds	r2, r7, #5
   124c2:	1e59      	subs	r1, r3, #1
   124c4:	7011      	strb	r1, [r2, #0]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d1ce      	bne.n	12468 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   124ca:	e000      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   124cc:	46c0      	nop			; (mov r8, r8)
	}
}
   124ce:	46bd      	mov	sp, r7
   124d0:	b004      	add	sp, #16
   124d2:	bdb0      	pop	{r4, r5, r7, pc}
   124d4:	00012a8d 	.word	0x00012a8d
   124d8:	000129ed 	.word	0x000129ed

000124dc <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   124dc:	b5b0      	push	{r4, r5, r7, lr}
   124de:	b082      	sub	sp, #8
   124e0:	af00      	add	r7, sp, #0
   124e2:	0005      	movs	r5, r0
   124e4:	000c      	movs	r4, r1
   124e6:	0010      	movs	r0, r2
   124e8:	0019      	movs	r1, r3
   124ea:	1dfb      	adds	r3, r7, #7
   124ec:	1c2a      	adds	r2, r5, #0
   124ee:	701a      	strb	r2, [r3, #0]
   124f0:	1dbb      	adds	r3, r7, #6
   124f2:	1c22      	adds	r2, r4, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	1d7b      	adds	r3, r7, #5
   124f8:	1c02      	adds	r2, r0, #0
   124fa:	701a      	strb	r2, [r3, #0]
   124fc:	1d3b      	adds	r3, r7, #4
   124fe:	1c0a      	adds	r2, r1, #0
   12500:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   12502:	1d3b      	adds	r3, r7, #4
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d018      	beq.n	1253c <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   1250a:	e00f      	b.n	1252c <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   1250c:	1dba      	adds	r2, r7, #6
   1250e:	1d3b      	adds	r3, r7, #4
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	18d3      	adds	r3, r2, r3
   12516:	b2d9      	uxtb	r1, r3
   12518:	2318      	movs	r3, #24
   1251a:	18fb      	adds	r3, r7, r3
   1251c:	781c      	ldrb	r4, [r3, #0]
   1251e:	1d7b      	adds	r3, r7, #5
   12520:	781a      	ldrb	r2, [r3, #0]
   12522:	1dfb      	adds	r3, r7, #7
   12524:	7818      	ldrb	r0, [r3, #0]
   12526:	0023      	movs	r3, r4
   12528:	4c06      	ldr	r4, [pc, #24]	; (12544 <gfx_mono_generic_draw_filled_rect+0x68>)
   1252a:	47a0      	blx	r4
	while (height-- > 0) {
   1252c:	1d3b      	adds	r3, r7, #4
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	1d3a      	adds	r2, r7, #4
   12532:	1e59      	subs	r1, r3, #1
   12534:	7011      	strb	r1, [r2, #0]
   12536:	2b00      	cmp	r3, #0
   12538:	d1e8      	bne.n	1250c <gfx_mono_generic_draw_filled_rect+0x30>
   1253a:	e000      	b.n	1253e <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   1253c:	46c0      	nop			; (mov r8, r8)
	}
}
   1253e:	46bd      	mov	sp, r7
   12540:	b002      	add	sp, #8
   12542:	bdb0      	pop	{r4, r5, r7, pc}
   12544:	00012315 	.word	0x00012315

00012548 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12548:	b590      	push	{r4, r7, lr}
   1254a:	b087      	sub	sp, #28
   1254c:	af00      	add	r7, sp, #0
   1254e:	0004      	movs	r4, r0
   12550:	0008      	movs	r0, r1
   12552:	0011      	movs	r1, r2
   12554:	603b      	str	r3, [r7, #0]
   12556:	1dfb      	adds	r3, r7, #7
   12558:	1c22      	adds	r2, r4, #0
   1255a:	701a      	strb	r2, [r3, #0]
   1255c:	1dbb      	adds	r3, r7, #6
   1255e:	1c02      	adds	r2, r0, #0
   12560:	701a      	strb	r2, [r3, #0]
   12562:	1d7b      	adds	r3, r7, #5
   12564:	1c0a      	adds	r2, r1, #0
   12566:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12568:	2310      	movs	r3, #16
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	1dba      	adds	r2, r7, #6
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12572:	230f      	movs	r3, #15
   12574:	18fb      	adds	r3, r7, r3
   12576:	1d7a      	adds	r2, r7, #5
   12578:	7812      	ldrb	r2, [r2, #0]
   1257a:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	7a1a      	ldrb	r2, [r3, #8]
   12580:	2313      	movs	r3, #19
   12582:	18fb      	adds	r3, r7, r3
   12584:	08d2      	lsrs	r2, r2, #3
   12586:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12588:	683b      	ldr	r3, [r7, #0]
   1258a:	7a1b      	ldrb	r3, [r3, #8]
   1258c:	2207      	movs	r2, #7
   1258e:	4013      	ands	r3, r2
   12590:	b2db      	uxtb	r3, r3
   12592:	2b00      	cmp	r3, #0
   12594:	d006      	beq.n	125a4 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12596:	2313      	movs	r3, #19
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781a      	ldrb	r2, [r3, #0]
   1259c:	2313      	movs	r3, #19
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	3201      	adds	r2, #1
   125a2:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   125a4:	2313      	movs	r3, #19
   125a6:	18fb      	adds	r3, r7, r3
   125a8:	781b      	ldrb	r3, [r3, #0]
   125aa:	b29b      	uxth	r3, r3
   125ac:	683a      	ldr	r2, [r7, #0]
   125ae:	7a52      	ldrb	r2, [r2, #9]
   125b0:	b292      	uxth	r2, r2
   125b2:	4353      	muls	r3, r2
   125b4:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   125b6:	1dfb      	adds	r3, r7, #7
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	6839      	ldr	r1, [r7, #0]
   125bc:	7a89      	ldrb	r1, [r1, #10]
   125be:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   125c0:	b299      	uxth	r1, r3
   125c2:	230c      	movs	r3, #12
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	434a      	muls	r2, r1
   125c8:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	230c      	movs	r3, #12
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	881b      	ldrh	r3, [r3, #0]
   125d4:	18d3      	adds	r3, r2, r3
   125d6:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   125d8:	2312      	movs	r3, #18
   125da:	18fb      	adds	r3, r7, r3
   125dc:	683a      	ldr	r2, [r7, #0]
   125de:	7a52      	ldrb	r2, [r2, #9]
   125e0:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   125e2:	230e      	movs	r3, #14
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	2200      	movs	r2, #0
   125e8:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   125ea:	230b      	movs	r3, #11
   125ec:	18fb      	adds	r3, r7, r3
   125ee:	683a      	ldr	r2, [r7, #0]
   125f0:	7a12      	ldrb	r2, [r2, #8]
   125f2:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   125f4:	2311      	movs	r3, #17
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	2200      	movs	r2, #0
   125fa:	701a      	strb	r2, [r3, #0]
   125fc:	e034      	b.n	12668 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   125fe:	2311      	movs	r3, #17
   12600:	18fb      	adds	r3, r7, r3
   12602:	781b      	ldrb	r3, [r3, #0]
   12604:	2207      	movs	r2, #7
   12606:	4013      	ands	r3, r2
   12608:	b2db      	uxtb	r3, r3
   1260a:	2b00      	cmp	r3, #0
   1260c:	d107      	bne.n	1261e <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   1260e:	230e      	movs	r3, #14
   12610:	18fb      	adds	r3, r7, r3
   12612:	697a      	ldr	r2, [r7, #20]
   12614:	7812      	ldrb	r2, [r2, #0]
   12616:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12618:	697b      	ldr	r3, [r7, #20]
   1261a:	3301      	adds	r3, #1
   1261c:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   1261e:	230e      	movs	r3, #14
   12620:	18fb      	adds	r3, r7, r3
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	b25b      	sxtb	r3, r3
   12626:	2b00      	cmp	r3, #0
   12628:	da09      	bge.n	1263e <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   1262a:	230f      	movs	r3, #15
   1262c:	18fb      	adds	r3, r7, r3
   1262e:	7819      	ldrb	r1, [r3, #0]
   12630:	2310      	movs	r3, #16
   12632:	18fb      	adds	r3, r7, r3
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2201      	movs	r2, #1
   12638:	0018      	movs	r0, r3
   1263a:	4b1d      	ldr	r3, [pc, #116]	; (126b0 <gfx_mono_draw_char_progmem+0x168>)
   1263c:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   1263e:	2310      	movs	r3, #16
   12640:	18fb      	adds	r3, r7, r3
   12642:	2210      	movs	r2, #16
   12644:	18ba      	adds	r2, r7, r2
   12646:	7812      	ldrb	r2, [r2, #0]
   12648:	3201      	adds	r2, #1
   1264a:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   1264c:	230e      	movs	r3, #14
   1264e:	18fa      	adds	r2, r7, r3
   12650:	230e      	movs	r3, #14
   12652:	18fb      	adds	r3, r7, r3
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	18db      	adds	r3, r3, r3
   12658:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   1265a:	2311      	movs	r3, #17
   1265c:	18fb      	adds	r3, r7, r3
   1265e:	781a      	ldrb	r2, [r3, #0]
   12660:	2311      	movs	r3, #17
   12662:	18fb      	adds	r3, r7, r3
   12664:	3201      	adds	r2, #1
   12666:	701a      	strb	r2, [r3, #0]
   12668:	2311      	movs	r3, #17
   1266a:	18fa      	adds	r2, r7, r3
   1266c:	230b      	movs	r3, #11
   1266e:	18fb      	adds	r3, r7, r3
   12670:	7812      	ldrb	r2, [r2, #0]
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	429a      	cmp	r2, r3
   12676:	d3c2      	bcc.n	125fe <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12678:	230f      	movs	r3, #15
   1267a:	18fb      	adds	r3, r7, r3
   1267c:	220f      	movs	r2, #15
   1267e:	18ba      	adds	r2, r7, r2
   12680:	7812      	ldrb	r2, [r2, #0]
   12682:	3201      	adds	r2, #1
   12684:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12686:	2310      	movs	r3, #16
   12688:	18fb      	adds	r3, r7, r3
   1268a:	1dba      	adds	r2, r7, #6
   1268c:	7812      	ldrb	r2, [r2, #0]
   1268e:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12690:	2312      	movs	r3, #18
   12692:	18fb      	adds	r3, r7, r3
   12694:	781a      	ldrb	r2, [r3, #0]
   12696:	2312      	movs	r3, #18
   12698:	18fb      	adds	r3, r7, r3
   1269a:	3a01      	subs	r2, #1
   1269c:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   1269e:	2312      	movs	r3, #18
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	781b      	ldrb	r3, [r3, #0]
   126a4:	2b00      	cmp	r3, #0
   126a6:	d19c      	bne.n	125e2 <gfx_mono_draw_char_progmem+0x9a>
}
   126a8:	46c0      	nop			; (mov r8, r8)
   126aa:	46bd      	mov	sp, r7
   126ac:	b007      	add	sp, #28
   126ae:	bd90      	pop	{r4, r7, pc}
   126b0:	000128f9 	.word	0x000128f9

000126b4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   126b4:	b590      	push	{r4, r7, lr}
   126b6:	b085      	sub	sp, #20
   126b8:	af02      	add	r7, sp, #8
   126ba:	0004      	movs	r4, r0
   126bc:	0008      	movs	r0, r1
   126be:	0011      	movs	r1, r2
   126c0:	603b      	str	r3, [r7, #0]
   126c2:	1dfb      	adds	r3, r7, #7
   126c4:	1c22      	adds	r2, r4, #0
   126c6:	701a      	strb	r2, [r3, #0]
   126c8:	1dbb      	adds	r3, r7, #6
   126ca:	1c02      	adds	r2, r0, #0
   126cc:	701a      	strb	r2, [r3, #0]
   126ce:	1d7b      	adds	r3, r7, #5
   126d0:	1c0a      	adds	r2, r1, #0
   126d2:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   126d4:	683b      	ldr	r3, [r7, #0]
   126d6:	7a1a      	ldrb	r2, [r3, #8]
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	7a5c      	ldrb	r4, [r3, #9]
   126dc:	1d7b      	adds	r3, r7, #5
   126de:	7819      	ldrb	r1, [r3, #0]
   126e0:	1dbb      	adds	r3, r7, #6
   126e2:	7818      	ldrb	r0, [r3, #0]
   126e4:	2300      	movs	r3, #0
   126e6:	9300      	str	r3, [sp, #0]
   126e8:	0023      	movs	r3, r4
   126ea:	4c0b      	ldr	r4, [pc, #44]	; (12718 <gfx_mono_draw_char+0x64>)
   126ec:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   126ee:	683b      	ldr	r3, [r7, #0]
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	2b00      	cmp	r3, #0
   126f4:	d000      	beq.n	126f8 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   126f6:	e00a      	b.n	1270e <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   126f8:	683c      	ldr	r4, [r7, #0]
   126fa:	1d7b      	adds	r3, r7, #5
   126fc:	781a      	ldrb	r2, [r3, #0]
   126fe:	1dbb      	adds	r3, r7, #6
   12700:	7819      	ldrb	r1, [r3, #0]
   12702:	1dfb      	adds	r3, r7, #7
   12704:	7818      	ldrb	r0, [r3, #0]
   12706:	0023      	movs	r3, r4
   12708:	4c04      	ldr	r4, [pc, #16]	; (1271c <gfx_mono_draw_char+0x68>)
   1270a:	47a0      	blx	r4
		break;
   1270c:	46c0      	nop			; (mov r8, r8)
	}
}
   1270e:	46c0      	nop			; (mov r8, r8)
   12710:	46bd      	mov	sp, r7
   12712:	b003      	add	sp, #12
   12714:	bd90      	pop	{r4, r7, pc}
   12716:	46c0      	nop			; (mov r8, r8)
   12718:	000124dd 	.word	0x000124dd
   1271c:	00012549 	.word	0x00012549

00012720 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12720:	b590      	push	{r4, r7, lr}
   12722:	b087      	sub	sp, #28
   12724:	af00      	add	r7, sp, #0
   12726:	60f8      	str	r0, [r7, #12]
   12728:	0008      	movs	r0, r1
   1272a:	0011      	movs	r1, r2
   1272c:	607b      	str	r3, [r7, #4]
   1272e:	230b      	movs	r3, #11
   12730:	18fb      	adds	r3, r7, r3
   12732:	1c02      	adds	r2, r0, #0
   12734:	701a      	strb	r2, [r3, #0]
   12736:	230a      	movs	r3, #10
   12738:	18fb      	adds	r3, r7, r3
   1273a:	1c0a      	adds	r2, r1, #0
   1273c:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   1273e:	2317      	movs	r3, #23
   12740:	18fb      	adds	r3, r7, r3
   12742:	220b      	movs	r2, #11
   12744:	18ba      	adds	r2, r7, r2
   12746:	7812      	ldrb	r2, [r2, #0]
   12748:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   1274a:	68fb      	ldr	r3, [r7, #12]
   1274c:	781b      	ldrb	r3, [r3, #0]
   1274e:	2b0a      	cmp	r3, #10
   12750:	d111      	bne.n	12776 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12752:	230b      	movs	r3, #11
   12754:	18fb      	adds	r3, r7, r3
   12756:	2217      	movs	r2, #23
   12758:	18ba      	adds	r2, r7, r2
   1275a:	7812      	ldrb	r2, [r2, #0]
   1275c:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	7a5a      	ldrb	r2, [r3, #9]
   12762:	230a      	movs	r3, #10
   12764:	18fb      	adds	r3, r7, r3
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	18d3      	adds	r3, r2, r3
   1276a:	b2da      	uxtb	r2, r3
   1276c:	230a      	movs	r3, #10
   1276e:	18fb      	adds	r3, r7, r3
   12770:	3201      	adds	r2, #1
   12772:	701a      	strb	r2, [r3, #0]
   12774:	e018      	b.n	127a8 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12776:	68fb      	ldr	r3, [r7, #12]
   12778:	781b      	ldrb	r3, [r3, #0]
   1277a:	2b0d      	cmp	r3, #13
   1277c:	d014      	beq.n	127a8 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   1277e:	68fb      	ldr	r3, [r7, #12]
   12780:	7818      	ldrb	r0, [r3, #0]
   12782:	687c      	ldr	r4, [r7, #4]
   12784:	230a      	movs	r3, #10
   12786:	18fb      	adds	r3, r7, r3
   12788:	781a      	ldrb	r2, [r3, #0]
   1278a:	230b      	movs	r3, #11
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	7819      	ldrb	r1, [r3, #0]
   12790:	0023      	movs	r3, r4
   12792:	4c0b      	ldr	r4, [pc, #44]	; (127c0 <gfx_mono_draw_string+0xa0>)
   12794:	47a0      	blx	r4
			x += font->width;
   12796:	687b      	ldr	r3, [r7, #4]
   12798:	7a19      	ldrb	r1, [r3, #8]
   1279a:	230b      	movs	r3, #11
   1279c:	18fb      	adds	r3, r7, r3
   1279e:	220b      	movs	r2, #11
   127a0:	18ba      	adds	r2, r7, r2
   127a2:	7812      	ldrb	r2, [r2, #0]
   127a4:	188a      	adds	r2, r1, r2
   127a6:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   127a8:	68fb      	ldr	r3, [r7, #12]
   127aa:	3301      	adds	r3, #1
   127ac:	60fb      	str	r3, [r7, #12]
   127ae:	68fb      	ldr	r3, [r7, #12]
   127b0:	781b      	ldrb	r3, [r3, #0]
   127b2:	2b00      	cmp	r3, #0
   127b4:	d1c9      	bne.n	1274a <gfx_mono_draw_string+0x2a>
}
   127b6:	46c0      	nop			; (mov r8, r8)
   127b8:	46bd      	mov	sp, r7
   127ba:	b007      	add	sp, #28
   127bc:	bd90      	pop	{r4, r7, pc}
   127be:	46c0      	nop			; (mov r8, r8)
   127c0:	000126b5 	.word	0x000126b5

000127c4 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   127c4:	b580      	push	{r7, lr}
   127c6:	b082      	sub	sp, #8
   127c8:	af00      	add	r7, sp, #0
   127ca:	0002      	movs	r2, r0
   127cc:	1dfb      	adds	r3, r7, #7
   127ce:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   127d0:	1dfb      	adds	r3, r7, #7
   127d2:	1dfa      	adds	r2, r7, #7
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	210f      	movs	r1, #15
   127d8:	400a      	ands	r2, r1
   127da:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   127dc:	1dfb      	adds	r3, r7, #7
   127de:	781b      	ldrb	r3, [r3, #0]
   127e0:	2250      	movs	r2, #80	; 0x50
   127e2:	4252      	negs	r2, r2
   127e4:	4313      	orrs	r3, r2
   127e6:	b2db      	uxtb	r3, r3
   127e8:	0018      	movs	r0, r3
   127ea:	4b03      	ldr	r3, [pc, #12]	; (127f8 <ssd1306_set_page_address+0x34>)
   127ec:	4798      	blx	r3
}
   127ee:	46c0      	nop			; (mov r8, r8)
   127f0:	46bd      	mov	sp, r7
   127f2:	b002      	add	sp, #8
   127f4:	bd80      	pop	{r7, pc}
   127f6:	46c0      	nop			; (mov r8, r8)
   127f8:	000121d1 	.word	0x000121d1

000127fc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   127fc:	b580      	push	{r7, lr}
   127fe:	b082      	sub	sp, #8
   12800:	af00      	add	r7, sp, #0
   12802:	0002      	movs	r2, r0
   12804:	1dfb      	adds	r3, r7, #7
   12806:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12808:	1dfb      	adds	r3, r7, #7
   1280a:	1dfa      	adds	r2, r7, #7
   1280c:	7812      	ldrb	r2, [r2, #0]
   1280e:	217f      	movs	r1, #127	; 0x7f
   12810:	400a      	ands	r2, r1
   12812:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12814:	1dfb      	adds	r3, r7, #7
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	091b      	lsrs	r3, r3, #4
   1281a:	b2db      	uxtb	r3, r3
   1281c:	2210      	movs	r2, #16
   1281e:	4313      	orrs	r3, r2
   12820:	b2db      	uxtb	r3, r3
   12822:	3302      	adds	r3, #2
   12824:	b2db      	uxtb	r3, r3
   12826:	0018      	movs	r0, r3
   12828:	4b06      	ldr	r3, [pc, #24]	; (12844 <ssd1306_set_column_address+0x48>)
   1282a:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   1282c:	1dfb      	adds	r3, r7, #7
   1282e:	781b      	ldrb	r3, [r3, #0]
   12830:	220f      	movs	r2, #15
   12832:	4013      	ands	r3, r2
   12834:	b2db      	uxtb	r3, r3
   12836:	0018      	movs	r0, r3
   12838:	4b02      	ldr	r3, [pc, #8]	; (12844 <ssd1306_set_column_address+0x48>)
   1283a:	4798      	blx	r3
}
   1283c:	46c0      	nop			; (mov r8, r8)
   1283e:	46bd      	mov	sp, r7
   12840:	b002      	add	sp, #8
   12842:	bd80      	pop	{r7, pc}
   12844:	000121d1 	.word	0x000121d1

00012848 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12848:	b580      	push	{r7, lr}
   1284a:	b082      	sub	sp, #8
   1284c:	af00      	add	r7, sp, #0
   1284e:	0002      	movs	r2, r0
   12850:	1dfb      	adds	r3, r7, #7
   12852:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12854:	1dfb      	adds	r3, r7, #7
   12856:	1dfa      	adds	r2, r7, #7
   12858:	7812      	ldrb	r2, [r2, #0]
   1285a:	213f      	movs	r1, #63	; 0x3f
   1285c:	400a      	ands	r2, r1
   1285e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12860:	1dfb      	adds	r3, r7, #7
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	2240      	movs	r2, #64	; 0x40
   12866:	4313      	orrs	r3, r2
   12868:	b2db      	uxtb	r3, r3
   1286a:	0018      	movs	r0, r3
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <ssd1306_set_display_start_line_address+0x30>)
   1286e:	4798      	blx	r3
}
   12870:	46c0      	nop			; (mov r8, r8)
   12872:	46bd      	mov	sp, r7
   12874:	b002      	add	sp, #8
   12876:	bd80      	pop	{r7, pc}
   12878:	000121d1 	.word	0x000121d1

0001287c <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   1287c:	b590      	push	{r4, r7, lr}
   1287e:	b083      	sub	sp, #12
   12880:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12882:	4b18      	ldr	r3, [pc, #96]	; (128e4 <gfx_mono_ssd1306_init+0x68>)
   12884:	0018      	movs	r0, r3
   12886:	4b18      	ldr	r3, [pc, #96]	; (128e8 <gfx_mono_ssd1306_init+0x6c>)
   12888:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   1288a:	4b18      	ldr	r3, [pc, #96]	; (128ec <gfx_mono_ssd1306_init+0x70>)
   1288c:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   1288e:	2000      	movs	r0, #0
   12890:	4b17      	ldr	r3, [pc, #92]	; (128f0 <gfx_mono_ssd1306_init+0x74>)
   12892:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12894:	1dfb      	adds	r3, r7, #7
   12896:	2200      	movs	r2, #0
   12898:	701a      	strb	r2, [r3, #0]
   1289a:	e01a      	b.n	128d2 <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   1289c:	1dbb      	adds	r3, r7, #6
   1289e:	2200      	movs	r2, #0
   128a0:	701a      	strb	r2, [r3, #0]
   128a2:	e00c      	b.n	128be <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   128a4:	1dbb      	adds	r3, r7, #6
   128a6:	7819      	ldrb	r1, [r3, #0]
   128a8:	1dfb      	adds	r3, r7, #7
   128aa:	7818      	ldrb	r0, [r3, #0]
   128ac:	2301      	movs	r3, #1
   128ae:	2200      	movs	r2, #0
   128b0:	4c10      	ldr	r4, [pc, #64]	; (128f4 <gfx_mono_ssd1306_init+0x78>)
   128b2:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   128b4:	1dbb      	adds	r3, r7, #6
   128b6:	781a      	ldrb	r2, [r3, #0]
   128b8:	1dbb      	adds	r3, r7, #6
   128ba:	3201      	adds	r2, #1
   128bc:	701a      	strb	r2, [r3, #0]
   128be:	1dbb      	adds	r3, r7, #6
   128c0:	781b      	ldrb	r3, [r3, #0]
   128c2:	b25b      	sxtb	r3, r3
   128c4:	2b00      	cmp	r3, #0
   128c6:	daed      	bge.n	128a4 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   128c8:	1dfb      	adds	r3, r7, #7
   128ca:	781a      	ldrb	r2, [r3, #0]
   128cc:	1dfb      	adds	r3, r7, #7
   128ce:	3201      	adds	r2, #1
   128d0:	701a      	strb	r2, [r3, #0]
   128d2:	1dfb      	adds	r3, r7, #7
   128d4:	781b      	ldrb	r3, [r3, #0]
   128d6:	2b05      	cmp	r3, #5
   128d8:	d9e0      	bls.n	1289c <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   128da:	46c0      	nop			; (mov r8, r8)
   128dc:	46bd      	mov	sp, r7
   128de:	b003      	add	sp, #12
   128e0:	bd90      	pop	{r4, r7, pc}
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	20000320 	.word	0x20000320
   128e8:	00012281 	.word	0x00012281
   128ec:	00012129 	.word	0x00012129
   128f0:	00012849 	.word	0x00012849
   128f4:	000129ed 	.word	0x000129ed

000128f8 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   128f8:	b590      	push	{r4, r7, lr}
   128fa:	b085      	sub	sp, #20
   128fc:	af00      	add	r7, sp, #0
   128fe:	0004      	movs	r4, r0
   12900:	0008      	movs	r0, r1
   12902:	0011      	movs	r1, r2
   12904:	1dfb      	adds	r3, r7, #7
   12906:	1c22      	adds	r2, r4, #0
   12908:	701a      	strb	r2, [r3, #0]
   1290a:	1dbb      	adds	r3, r7, #6
   1290c:	1c02      	adds	r2, r0, #0
   1290e:	701a      	strb	r2, [r3, #0]
   12910:	1d7b      	adds	r3, r7, #5
   12912:	1c0a      	adds	r2, r1, #0
   12914:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	2b3f      	cmp	r3, #63	; 0x3f
   1291c:	d85d      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
   1291e:	1dbb      	adds	r3, r7, #6
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b2f      	cmp	r3, #47	; 0x2f
   12924:	d859      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12926:	230e      	movs	r3, #14
   12928:	18fb      	adds	r3, r7, r3
   1292a:	1dba      	adds	r2, r7, #6
   1292c:	7812      	ldrb	r2, [r2, #0]
   1292e:	08d2      	lsrs	r2, r2, #3
   12930:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12932:	1dbb      	adds	r3, r7, #6
   12934:	781a      	ldrb	r2, [r3, #0]
   12936:	230e      	movs	r3, #14
   12938:	18fb      	adds	r3, r7, r3
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	00db      	lsls	r3, r3, #3
   1293e:	1ad3      	subs	r3, r2, r3
   12940:	2201      	movs	r2, #1
   12942:	409a      	lsls	r2, r3
   12944:	230d      	movs	r3, #13
   12946:	18fb      	adds	r3, r7, r3
   12948:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   1294a:	230f      	movs	r3, #15
   1294c:	18fc      	adds	r4, r7, r3
   1294e:	1dfb      	adds	r3, r7, #7
   12950:	781a      	ldrb	r2, [r3, #0]
   12952:	230e      	movs	r3, #14
   12954:	18fb      	adds	r3, r7, r3
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	0011      	movs	r1, r2
   1295a:	0018      	movs	r0, r3
   1295c:	4b21      	ldr	r3, [pc, #132]	; (129e4 <gfx_mono_ssd1306_draw_pixel+0xec>)
   1295e:	4798      	blx	r3
   12960:	0003      	movs	r3, r0
   12962:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12964:	1d7b      	adds	r3, r7, #5
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	2b01      	cmp	r3, #1
   1296a:	d004      	beq.n	12976 <gfx_mono_ssd1306_draw_pixel+0x7e>
   1296c:	2b02      	cmp	r3, #2
   1296e:	d01d      	beq.n	129ac <gfx_mono_ssd1306_draw_pixel+0xb4>
   12970:	2b00      	cmp	r3, #0
   12972:	d00b      	beq.n	1298c <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12974:	e025      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12976:	230f      	movs	r3, #15
   12978:	18fb      	adds	r3, r7, r3
   1297a:	220f      	movs	r2, #15
   1297c:	18b9      	adds	r1, r7, r2
   1297e:	220d      	movs	r2, #13
   12980:	18ba      	adds	r2, r7, r2
   12982:	7809      	ldrb	r1, [r1, #0]
   12984:	7812      	ldrb	r2, [r2, #0]
   12986:	430a      	orrs	r2, r1
   12988:	701a      	strb	r2, [r3, #0]
		break;
   1298a:	e01a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   1298c:	230d      	movs	r3, #13
   1298e:	18fb      	adds	r3, r7, r3
   12990:	781b      	ldrb	r3, [r3, #0]
   12992:	b25b      	sxtb	r3, r3
   12994:	43db      	mvns	r3, r3
   12996:	b25b      	sxtb	r3, r3
   12998:	220f      	movs	r2, #15
   1299a:	18ba      	adds	r2, r7, r2
   1299c:	7812      	ldrb	r2, [r2, #0]
   1299e:	b252      	sxtb	r2, r2
   129a0:	4013      	ands	r3, r2
   129a2:	b25a      	sxtb	r2, r3
   129a4:	230f      	movs	r3, #15
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	701a      	strb	r2, [r3, #0]
		break;
   129aa:	e00a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	220f      	movs	r2, #15
   129b2:	18b9      	adds	r1, r7, r2
   129b4:	220d      	movs	r2, #13
   129b6:	18ba      	adds	r2, r7, r2
   129b8:	7809      	ldrb	r1, [r1, #0]
   129ba:	7812      	ldrb	r2, [r2, #0]
   129bc:	404a      	eors	r2, r1
   129be:	701a      	strb	r2, [r3, #0]
		break;
   129c0:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   129c2:	230f      	movs	r3, #15
   129c4:	18fb      	adds	r3, r7, r3
   129c6:	781a      	ldrb	r2, [r3, #0]
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	7819      	ldrb	r1, [r3, #0]
   129cc:	230e      	movs	r3, #14
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	7818      	ldrb	r0, [r3, #0]
   129d2:	2300      	movs	r3, #0
   129d4:	4c04      	ldr	r4, [pc, #16]	; (129e8 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   129d6:	47a0      	blx	r4
   129d8:	e000      	b.n	129dc <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   129da:	46c0      	nop			; (mov r8, r8)
}
   129dc:	46bd      	mov	sp, r7
   129de:	b005      	add	sp, #20
   129e0:	bd90      	pop	{r4, r7, pc}
   129e2:	46c0      	nop			; (mov r8, r8)
   129e4:	00012a8d 	.word	0x00012a8d
   129e8:	000129ed 	.word	0x000129ed

000129ec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   129ec:	b5b0      	push	{r4, r5, r7, lr}
   129ee:	b082      	sub	sp, #8
   129f0:	af00      	add	r7, sp, #0
   129f2:	0005      	movs	r5, r0
   129f4:	000c      	movs	r4, r1
   129f6:	0010      	movs	r0, r2
   129f8:	0019      	movs	r1, r3
   129fa:	1dfb      	adds	r3, r7, #7
   129fc:	1c2a      	adds	r2, r5, #0
   129fe:	701a      	strb	r2, [r3, #0]
   12a00:	1dbb      	adds	r3, r7, #6
   12a02:	1c22      	adds	r2, r4, #0
   12a04:	701a      	strb	r2, [r3, #0]
   12a06:	1d7b      	adds	r3, r7, #5
   12a08:	1c02      	adds	r2, r0, #0
   12a0a:	701a      	strb	r2, [r3, #0]
   12a0c:	1d3b      	adds	r3, r7, #4
   12a0e:	1c0a      	adds	r2, r1, #0
   12a10:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12a12:	1d3b      	adds	r3, r7, #4
   12a14:	781b      	ldrb	r3, [r3, #0]
   12a16:	2201      	movs	r2, #1
   12a18:	4053      	eors	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d00d      	beq.n	12a3c <gfx_mono_ssd1306_put_byte+0x50>
   12a20:	1dbb      	adds	r3, r7, #6
   12a22:	781a      	ldrb	r2, [r3, #0]
   12a24:	1dfb      	adds	r3, r7, #7
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	0011      	movs	r1, r2
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b12      	ldr	r3, [pc, #72]	; (12a78 <gfx_mono_ssd1306_put_byte+0x8c>)
   12a2e:	4798      	blx	r3
   12a30:	0003      	movs	r3, r0
   12a32:	001a      	movs	r2, r3
   12a34:	1d7b      	adds	r3, r7, #5
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	4293      	cmp	r3, r2
   12a3a:	d018      	beq.n	12a6e <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12a3c:	1d7b      	adds	r3, r7, #5
   12a3e:	781a      	ldrb	r2, [r3, #0]
   12a40:	1dbb      	adds	r3, r7, #6
   12a42:	7819      	ldrb	r1, [r3, #0]
   12a44:	1dfb      	adds	r3, r7, #7
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	0018      	movs	r0, r3
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <gfx_mono_ssd1306_put_byte+0x90>)
   12a4c:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12a4e:	1dfb      	adds	r3, r7, #7
   12a50:	781b      	ldrb	r3, [r3, #0]
   12a52:	0018      	movs	r0, r3
   12a54:	4b0a      	ldr	r3, [pc, #40]	; (12a80 <gfx_mono_ssd1306_put_byte+0x94>)
   12a56:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12a58:	1dbb      	adds	r3, r7, #6
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	0018      	movs	r0, r3
   12a5e:	4b09      	ldr	r3, [pc, #36]	; (12a84 <gfx_mono_ssd1306_put_byte+0x98>)
   12a60:	4798      	blx	r3

	ssd1306_write_data(data);
   12a62:	1d7b      	adds	r3, r7, #5
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	0018      	movs	r0, r3
   12a68:	4b07      	ldr	r3, [pc, #28]	; (12a88 <gfx_mono_ssd1306_put_byte+0x9c>)
   12a6a:	4798      	blx	r3
   12a6c:	e000      	b.n	12a70 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12a6e:	46c0      	nop			; (mov r8, r8)
}
   12a70:	46bd      	mov	sp, r7
   12a72:	b002      	add	sp, #8
   12a74:	bdb0      	pop	{r4, r5, r7, pc}
   12a76:	46c0      	nop			; (mov r8, r8)
   12a78:	000122e1 	.word	0x000122e1
   12a7c:	0001229d 	.word	0x0001229d
   12a80:	000127c5 	.word	0x000127c5
   12a84:	000127fd 	.word	0x000127fd
   12a88:	00012229 	.word	0x00012229

00012a8c <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b082      	sub	sp, #8
   12a90:	af00      	add	r7, sp, #0
   12a92:	0002      	movs	r2, r0
   12a94:	1dfb      	adds	r3, r7, #7
   12a96:	701a      	strb	r2, [r3, #0]
   12a98:	1dbb      	adds	r3, r7, #6
   12a9a:	1c0a      	adds	r2, r1, #0
   12a9c:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12a9e:	1dbb      	adds	r3, r7, #6
   12aa0:	781a      	ldrb	r2, [r3, #0]
   12aa2:	1dfb      	adds	r3, r7, #7
   12aa4:	781b      	ldrb	r3, [r3, #0]
   12aa6:	0011      	movs	r1, r2
   12aa8:	0018      	movs	r0, r3
   12aaa:	4b03      	ldr	r3, [pc, #12]	; (12ab8 <gfx_mono_ssd1306_get_byte+0x2c>)
   12aac:	4798      	blx	r3
   12aae:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12ab0:	0018      	movs	r0, r3
   12ab2:	46bd      	mov	sp, r7
   12ab4:	b002      	add	sp, #8
   12ab6:	bd80      	pop	{r7, pc}
   12ab8:	000122e1 	.word	0x000122e1

00012abc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12abc:	b580      	push	{r7, lr}
   12abe:	b084      	sub	sp, #16
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	681b      	ldr	r3, [r3, #0]
   12ac8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12aca:	68fb      	ldr	r3, [r7, #12]
   12acc:	7e5b      	ldrb	r3, [r3, #25]
   12ace:	b2db      	uxtb	r3, r3
   12ad0:	b25b      	sxtb	r3, r3
   12ad2:	2b00      	cmp	r3, #0
   12ad4:	da01      	bge.n	12ada <adc_is_syncing+0x1e>
		return true;
   12ad6:	2301      	movs	r3, #1
   12ad8:	e000      	b.n	12adc <adc_is_syncing+0x20>
	}

	return false;
   12ada:	2300      	movs	r3, #0
}
   12adc:	0018      	movs	r0, r3
   12ade:	46bd      	mov	sp, r7
   12ae0:	b004      	add	sp, #16
   12ae2:	bd80      	pop	{r7, pc}

00012ae4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12ae4:	b580      	push	{r7, lr}
   12ae6:	b084      	sub	sp, #16
   12ae8:	af00      	add	r7, sp, #0
   12aea:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12af2:	46c0      	nop			; (mov r8, r8)
   12af4:	687b      	ldr	r3, [r7, #4]
   12af6:	0018      	movs	r0, r3
   12af8:	4b0b      	ldr	r3, [pc, #44]	; (12b28 <adc_start_conversion+0x44>)
   12afa:	4798      	blx	r3
   12afc:	1e03      	subs	r3, r0, #0
   12afe:	d1f9      	bne.n	12af4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7b1b      	ldrb	r3, [r3, #12]
   12b04:	b2db      	uxtb	r3, r3
   12b06:	2202      	movs	r2, #2
   12b08:	4313      	orrs	r3, r2
   12b0a:	b2da      	uxtb	r2, r3
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12b10:	46c0      	nop			; (mov r8, r8)
   12b12:	687b      	ldr	r3, [r7, #4]
   12b14:	0018      	movs	r0, r3
   12b16:	4b04      	ldr	r3, [pc, #16]	; (12b28 <adc_start_conversion+0x44>)
   12b18:	4798      	blx	r3
   12b1a:	1e03      	subs	r3, r0, #0
   12b1c:	d1f9      	bne.n	12b12 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	46bd      	mov	sp, r7
   12b22:	b004      	add	sp, #16
   12b24:	bd80      	pop	{r7, pc}
   12b26:	46c0      	nop			; (mov r8, r8)
   12b28:	00012abd 	.word	0x00012abd

00012b2c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b084      	sub	sp, #16
   12b30:	af00      	add	r7, sp, #0
   12b32:	6078      	str	r0, [r7, #4]
   12b34:	000a      	movs	r2, r1
   12b36:	1cfb      	adds	r3, r7, #3
   12b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	681b      	ldr	r3, [r3, #0]
   12b3e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12b40:	68fb      	ldr	r3, [r7, #12]
   12b42:	1cfa      	adds	r2, r7, #3
   12b44:	7812      	ldrb	r2, [r2, #0]
   12b46:	759a      	strb	r2, [r3, #22]
}
   12b48:	46c0      	nop			; (mov r8, r8)
   12b4a:	46bd      	mov	sp, r7
   12b4c:	b004      	add	sp, #16
   12b4e:	bd80      	pop	{r7, pc}

00012b50 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12b50:	b580      	push	{r7, lr}
   12b52:	b084      	sub	sp, #16
   12b54:	af00      	add	r7, sp, #0
   12b56:	0002      	movs	r2, r0
   12b58:	1dfb      	adds	r3, r7, #7
   12b5a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12b5c:	1dfb      	adds	r3, r7, #7
   12b5e:	781a      	ldrb	r2, [r3, #0]
   12b60:	4b47      	ldr	r3, [pc, #284]	; (12c80 <_adc_interrupt_handler+0x130>)
   12b62:	0092      	lsls	r2, r2, #2
   12b64:	58d3      	ldr	r3, [r2, r3]
   12b66:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12b68:	68fb      	ldr	r3, [r7, #12]
   12b6a:	681b      	ldr	r3, [r3, #0]
   12b6c:	7e1b      	ldrb	r3, [r3, #24]
   12b6e:	b2da      	uxtb	r2, r3
   12b70:	68fb      	ldr	r3, [r7, #12]
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	7ddb      	ldrb	r3, [r3, #23]
   12b76:	b2db      	uxtb	r3, r3
   12b78:	4013      	ands	r3, r2
   12b7a:	b2db      	uxtb	r3, r3
   12b7c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12b7e:	68bb      	ldr	r3, [r7, #8]
   12b80:	2201      	movs	r2, #1
   12b82:	4013      	ands	r3, r2
   12b84:	d045      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12b86:	68fb      	ldr	r3, [r7, #12]
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	2201      	movs	r2, #1
   12b8c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12b8e:	46c0      	nop			; (mov r8, r8)
   12b90:	68fb      	ldr	r3, [r7, #12]
   12b92:	0018      	movs	r0, r3
   12b94:	4b3b      	ldr	r3, [pc, #236]	; (12c84 <_adc_interrupt_handler+0x134>)
   12b96:	4798      	blx	r3
   12b98:	1e03      	subs	r3, r0, #0
   12b9a:	d1f9      	bne.n	12b90 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12b9c:	68fb      	ldr	r3, [r7, #12]
   12b9e:	695b      	ldr	r3, [r3, #20]
   12ba0:	1c99      	adds	r1, r3, #2
   12ba2:	68fa      	ldr	r2, [r7, #12]
   12ba4:	6151      	str	r1, [r2, #20]
   12ba6:	68fa      	ldr	r2, [r7, #12]
   12ba8:	6812      	ldr	r2, [r2, #0]
   12baa:	8b52      	ldrh	r2, [r2, #26]
   12bac:	b292      	uxth	r2, r2
   12bae:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12bb0:	68fb      	ldr	r3, [r7, #12]
   12bb2:	8b1b      	ldrh	r3, [r3, #24]
   12bb4:	b29b      	uxth	r3, r3
   12bb6:	3b01      	subs	r3, #1
   12bb8:	b29b      	uxth	r3, r3
   12bba:	68fa      	ldr	r2, [r7, #12]
   12bbc:	1c19      	adds	r1, r3, #0
   12bbe:	8311      	strh	r1, [r2, #24]
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d008      	beq.n	12bd6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12bc4:	68fb      	ldr	r3, [r7, #12]
   12bc6:	7f5b      	ldrb	r3, [r3, #29]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d022      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12bcc:	68fb      	ldr	r3, [r7, #12]
   12bce:	0018      	movs	r0, r3
   12bd0:	4b2d      	ldr	r3, [pc, #180]	; (12c88 <_adc_interrupt_handler+0x138>)
   12bd2:	4798      	blx	r3
   12bd4:	e01d      	b.n	12c12 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12bd6:	68fb      	ldr	r3, [r7, #12]
   12bd8:	2101      	movs	r1, #1
   12bda:	0018      	movs	r0, r3
   12bdc:	4b2b      	ldr	r3, [pc, #172]	; (12c8c <_adc_interrupt_handler+0x13c>)
   12bde:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	7f1b      	ldrb	r3, [r3, #28]
   12be4:	b2db      	uxtb	r3, r3
   12be6:	2b05      	cmp	r3, #5
   12be8:	d113      	bne.n	12c12 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12bea:	68fb      	ldr	r3, [r7, #12]
   12bec:	2200      	movs	r2, #0
   12bee:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12bf0:	68fb      	ldr	r3, [r7, #12]
   12bf2:	7edb      	ldrb	r3, [r3, #27]
   12bf4:	001a      	movs	r2, r3
   12bf6:	2301      	movs	r3, #1
   12bf8:	4013      	ands	r3, r2
   12bfa:	d00a      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12bfc:	68fb      	ldr	r3, [r7, #12]
   12bfe:	7e9b      	ldrb	r3, [r3, #26]
   12c00:	001a      	movs	r2, r3
   12c02:	2301      	movs	r3, #1
   12c04:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12c06:	d004      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	689b      	ldr	r3, [r3, #8]
   12c0c:	68fa      	ldr	r2, [r7, #12]
   12c0e:	0010      	movs	r0, r2
   12c10:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12c12:	68bb      	ldr	r3, [r7, #8]
   12c14:	2204      	movs	r2, #4
   12c16:	4013      	ands	r3, r2
   12c18:	d014      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12c1a:	68fb      	ldr	r3, [r7, #12]
   12c1c:	681b      	ldr	r3, [r3, #0]
   12c1e:	2204      	movs	r2, #4
   12c20:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c22:	68fb      	ldr	r3, [r7, #12]
   12c24:	7edb      	ldrb	r3, [r3, #27]
   12c26:	001a      	movs	r2, r3
   12c28:	2302      	movs	r3, #2
   12c2a:	4013      	ands	r3, r2
   12c2c:	d00a      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12c2e:	68fb      	ldr	r3, [r7, #12]
   12c30:	7e9b      	ldrb	r3, [r3, #26]
   12c32:	001a      	movs	r2, r3
   12c34:	2302      	movs	r3, #2
   12c36:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c38:	d004      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12c3a:	68fb      	ldr	r3, [r7, #12]
   12c3c:	68db      	ldr	r3, [r3, #12]
   12c3e:	68fa      	ldr	r2, [r7, #12]
   12c40:	0010      	movs	r0, r2
   12c42:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12c44:	68bb      	ldr	r3, [r7, #8]
   12c46:	2202      	movs	r2, #2
   12c48:	4013      	ands	r3, r2
   12c4a:	d014      	beq.n	12c76 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	681b      	ldr	r3, [r3, #0]
   12c50:	2202      	movs	r2, #2
   12c52:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	7edb      	ldrb	r3, [r3, #27]
   12c58:	001a      	movs	r2, r3
   12c5a:	2304      	movs	r3, #4
   12c5c:	4013      	ands	r3, r2
   12c5e:	d00a      	beq.n	12c76 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12c60:	68fb      	ldr	r3, [r7, #12]
   12c62:	7e9b      	ldrb	r3, [r3, #26]
   12c64:	001a      	movs	r2, r3
   12c66:	2304      	movs	r3, #4
   12c68:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c6a:	d004      	beq.n	12c76 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12c6c:	68fb      	ldr	r3, [r7, #12]
   12c6e:	691b      	ldr	r3, [r3, #16]
   12c70:	68fa      	ldr	r2, [r7, #12]
   12c72:	0010      	movs	r0, r2
   12c74:	4798      	blx	r3
		}
	}
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	b004      	add	sp, #16
   12c7c:	bd80      	pop	{r7, pc}
   12c7e:	46c0      	nop			; (mov r8, r8)
   12c80:	20004780 	.word	0x20004780
   12c84:	00012abd 	.word	0x00012abd
   12c88:	00012ae5 	.word	0x00012ae5
   12c8c:	00012b2d 	.word	0x00012b2d

00012c90 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12c90:	b580      	push	{r7, lr}
   12c92:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12c94:	2000      	movs	r0, #0
   12c96:	4b02      	ldr	r3, [pc, #8]	; (12ca0 <ADC_Handler+0x10>)
   12c98:	4798      	blx	r3
}
   12c9a:	46c0      	nop			; (mov r8, r8)
   12c9c:	46bd      	mov	sp, r7
   12c9e:	bd80      	pop	{r7, pc}
   12ca0:	00012b51 	.word	0x00012b51

00012ca4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12ca4:	b580      	push	{r7, lr}
   12ca6:	b082      	sub	sp, #8
   12ca8:	af00      	add	r7, sp, #0
   12caa:	0002      	movs	r2, r0
   12cac:	1dfb      	adds	r3, r7, #7
   12cae:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12cb0:	4a07      	ldr	r2, [pc, #28]	; (12cd0 <system_interrupt_disable+0x2c>)
   12cb2:	1dfb      	adds	r3, r7, #7
   12cb4:	781b      	ldrb	r3, [r3, #0]
   12cb6:	0019      	movs	r1, r3
   12cb8:	231f      	movs	r3, #31
   12cba:	400b      	ands	r3, r1
   12cbc:	2101      	movs	r1, #1
   12cbe:	4099      	lsls	r1, r3
   12cc0:	000b      	movs	r3, r1
   12cc2:	0019      	movs	r1, r3
   12cc4:	2380      	movs	r3, #128	; 0x80
   12cc6:	50d1      	str	r1, [r2, r3]
}
   12cc8:	46c0      	nop			; (mov r8, r8)
   12cca:	46bd      	mov	sp, r7
   12ccc:	b002      	add	sp, #8
   12cce:	bd80      	pop	{r7, pc}
   12cd0:	e000e100 	.word	0xe000e100

00012cd4 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12cd4:	b580      	push	{r7, lr}
   12cd6:	b084      	sub	sp, #16
   12cd8:	af00      	add	r7, sp, #0
   12cda:	0002      	movs	r2, r0
   12cdc:	1dfb      	adds	r3, r7, #7
   12cde:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12ce0:	1dfb      	adds	r3, r7, #7
   12ce2:	781a      	ldrb	r2, [r3, #0]
   12ce4:	4b37      	ldr	r3, [pc, #220]	; (12dc4 <_dac_interrupt_handler+0xf0>)
   12ce6:	0092      	lsls	r2, r2, #2
   12ce8:	58d3      	ldr	r3, [r2, r3]
   12cea:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12cec:	68fb      	ldr	r3, [r7, #12]
   12cee:	681b      	ldr	r3, [r3, #0]
   12cf0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12cf2:	68bb      	ldr	r3, [r7, #8]
   12cf4:	799b      	ldrb	r3, [r3, #6]
   12cf6:	b2db      	uxtb	r3, r3
   12cf8:	001a      	movs	r2, r3
   12cfa:	2301      	movs	r3, #1
   12cfc:	4013      	ands	r3, r2
   12cfe:	d00e      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12d00:	68bb      	ldr	r3, [r7, #8]
   12d02:	2201      	movs	r2, #1
   12d04:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12d06:	68fb      	ldr	r3, [r7, #12]
   12d08:	3314      	adds	r3, #20
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d007      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12d0e:	68fb      	ldr	r3, [r7, #12]
   12d10:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12d12:	2b00      	cmp	r3, #0
   12d14:	d003      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12d16:	68fb      	ldr	r3, [r7, #12]
   12d18:	699b      	ldr	r3, [r3, #24]
   12d1a:	2000      	movs	r0, #0
   12d1c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12d1e:	68bb      	ldr	r3, [r7, #8]
   12d20:	799b      	ldrb	r3, [r3, #6]
   12d22:	b2db      	uxtb	r3, r3
   12d24:	001a      	movs	r2, r3
   12d26:	2302      	movs	r3, #2
   12d28:	4013      	ands	r3, r2
   12d2a:	d047      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d2c:	68bb      	ldr	r3, [r7, #8]
   12d2e:	2202      	movs	r2, #2
   12d30:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12d32:	68fb      	ldr	r3, [r7, #12]
   12d34:	899b      	ldrh	r3, [r3, #12]
   12d36:	b29b      	uxth	r3, r3
   12d38:	2b00      	cmp	r3, #0
   12d3a:	d033      	beq.n	12da4 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12d3c:	68fb      	ldr	r3, [r7, #12]
   12d3e:	689a      	ldr	r2, [r3, #8]
   12d40:	68fb      	ldr	r3, [r7, #12]
   12d42:	89db      	ldrh	r3, [r3, #14]
   12d44:	b29b      	uxth	r3, r3
   12d46:	1c59      	adds	r1, r3, #1
   12d48:	b288      	uxth	r0, r1
   12d4a:	68f9      	ldr	r1, [r7, #12]
   12d4c:	81c8      	strh	r0, [r1, #14]
   12d4e:	005b      	lsls	r3, r3, #1
   12d50:	18d3      	adds	r3, r2, r3
   12d52:	881b      	ldrh	r3, [r3, #0]
   12d54:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12d56:	68bb      	ldr	r3, [r7, #8]
   12d58:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12d5a:	68fb      	ldr	r3, [r7, #12]
   12d5c:	899b      	ldrh	r3, [r3, #12]
   12d5e:	b29b      	uxth	r3, r3
   12d60:	3b01      	subs	r3, #1
   12d62:	b29a      	uxth	r2, r3
   12d64:	68fb      	ldr	r3, [r7, #12]
   12d66:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12d68:	68fb      	ldr	r3, [r7, #12]
   12d6a:	899b      	ldrh	r3, [r3, #12]
   12d6c:	b29b      	uxth	r3, r3
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d118      	bne.n	12da4 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12d72:	68fb      	ldr	r3, [r7, #12]
   12d74:	2220      	movs	r2, #32
   12d76:	2100      	movs	r1, #0
   12d78:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12d7a:	68bb      	ldr	r3, [r7, #8]
   12d7c:	2202      	movs	r2, #2
   12d7e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d80:	68bb      	ldr	r3, [r7, #8]
   12d82:	2202      	movs	r2, #2
   12d84:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12d86:	2019      	movs	r0, #25
   12d88:	4b0f      	ldr	r3, [pc, #60]	; (12dc8 <_dac_interrupt_handler+0xf4>)
   12d8a:	4798      	blx	r3

				if ((module->callback) &&
   12d8c:	68fb      	ldr	r3, [r7, #12]
   12d8e:	3314      	adds	r3, #20
   12d90:	2b00      	cmp	r3, #0
   12d92:	d007      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12d94:	68fb      	ldr	r3, [r7, #12]
   12d96:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12d98:	2b00      	cmp	r3, #0
   12d9a:	d003      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12d9c:	68fb      	ldr	r3, [r7, #12]
   12d9e:	69db      	ldr	r3, [r3, #28]
   12da0:	2000      	movs	r0, #0
   12da2:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12da4:	68fb      	ldr	r3, [r7, #12]
   12da6:	3314      	adds	r3, #20
   12da8:	2b00      	cmp	r3, #0
   12daa:	d007      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12dac:	68fb      	ldr	r3, [r7, #12]
   12dae:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12db0:	2b00      	cmp	r3, #0
   12db2:	d003      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12db4:	68fb      	ldr	r3, [r7, #12]
   12db6:	695b      	ldr	r3, [r3, #20]
   12db8:	2000      	movs	r0, #0
   12dba:	4798      	blx	r3
		}
	}
}
   12dbc:	46c0      	nop			; (mov r8, r8)
   12dbe:	46bd      	mov	sp, r7
   12dc0:	b004      	add	sp, #16
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	20004784 	.word	0x20004784
   12dc8:	00012ca5 	.word	0x00012ca5

00012dcc <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12dcc:	b580      	push	{r7, lr}
   12dce:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12dd0:	2000      	movs	r0, #0
   12dd2:	4b02      	ldr	r3, [pc, #8]	; (12ddc <DAC_Handler+0x10>)
   12dd4:	4798      	blx	r3
}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	46bd      	mov	sp, r7
   12dda:	bd80      	pop	{r7, pc}
   12ddc:	00012cd5 	.word	0x00012cd5

00012de0 <system_interrupt_enter_critical_section>:
{
   12de0:	b580      	push	{r7, lr}
   12de2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12de4:	4b02      	ldr	r3, [pc, #8]	; (12df0 <system_interrupt_enter_critical_section+0x10>)
   12de6:	4798      	blx	r3
}
   12de8:	46c0      	nop			; (mov r8, r8)
   12dea:	46bd      	mov	sp, r7
   12dec:	bd80      	pop	{r7, pc}
   12dee:	46c0      	nop			; (mov r8, r8)
   12df0:	00026759 	.word	0x00026759

00012df4 <system_interrupt_leave_critical_section>:
{
   12df4:	b580      	push	{r7, lr}
   12df6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12df8:	4b02      	ldr	r3, [pc, #8]	; (12e04 <system_interrupt_leave_critical_section+0x10>)
   12dfa:	4798      	blx	r3
}
   12dfc:	46c0      	nop			; (mov r8, r8)
   12dfe:	46bd      	mov	sp, r7
   12e00:	bd80      	pop	{r7, pc}
   12e02:	46c0      	nop			; (mov r8, r8)
   12e04:	000267ad 	.word	0x000267ad

00012e08 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12e08:	b580      	push	{r7, lr}
   12e0a:	b086      	sub	sp, #24
   12e0c:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12e0e:	4b49      	ldr	r3, [pc, #292]	; (12f34 <DMAC_Handler+0x12c>)
   12e10:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12e12:	4b49      	ldr	r3, [pc, #292]	; (12f38 <DMAC_Handler+0x130>)
   12e14:	8c1b      	ldrh	r3, [r3, #32]
   12e16:	b29b      	uxth	r3, r3
   12e18:	b2da      	uxtb	r2, r3
   12e1a:	2317      	movs	r3, #23
   12e1c:	18fb      	adds	r3, r7, r3
   12e1e:	210f      	movs	r1, #15
   12e20:	400a      	ands	r2, r1
   12e22:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12e24:	2317      	movs	r3, #23
   12e26:	18fb      	adds	r3, r7, r3
   12e28:	781a      	ldrb	r2, [r3, #0]
   12e2a:	4b44      	ldr	r3, [pc, #272]	; (12f3c <DMAC_Handler+0x134>)
   12e2c:	0092      	lsls	r2, r2, #2
   12e2e:	58d3      	ldr	r3, [r2, r3]
   12e30:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12e32:	4a41      	ldr	r2, [pc, #260]	; (12f38 <DMAC_Handler+0x130>)
   12e34:	693b      	ldr	r3, [r7, #16]
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	210f      	movs	r1, #15
   12e3a:	400b      	ands	r3, r1
   12e3c:	b2d9      	uxtb	r1, r3
   12e3e:	233f      	movs	r3, #63	; 0x3f
   12e40:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12e42:	493d      	ldr	r1, [pc, #244]	; (12f38 <DMAC_Handler+0x130>)
   12e44:	230f      	movs	r3, #15
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	224e      	movs	r2, #78	; 0x4e
   12e4a:	5c8a      	ldrb	r2, [r1, r2]
   12e4c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12e4e:	693b      	ldr	r3, [r7, #16]
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	4a3b      	ldr	r2, [pc, #236]	; (12f40 <DMAC_Handler+0x138>)
   12e54:	011b      	lsls	r3, r3, #4
   12e56:	18d3      	adds	r3, r2, r3
   12e58:	3302      	adds	r3, #2
   12e5a:	881b      	ldrh	r3, [r3, #0]
   12e5c:	b29b      	uxth	r3, r3
   12e5e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12e60:	693b      	ldr	r3, [r7, #16]
   12e62:	781b      	ldrb	r3, [r3, #0]
   12e64:	4a37      	ldr	r2, [pc, #220]	; (12f44 <DMAC_Handler+0x13c>)
   12e66:	011b      	lsls	r3, r3, #4
   12e68:	18d3      	adds	r3, r2, r3
   12e6a:	3302      	adds	r3, #2
   12e6c:	881b      	ldrh	r3, [r3, #0]
   12e6e:	b29b      	uxth	r3, r3
   12e70:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12e72:	68ba      	ldr	r2, [r7, #8]
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	1ad2      	subs	r2, r2, r3
   12e78:	693b      	ldr	r3, [r7, #16]
   12e7a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12e7c:	230f      	movs	r3, #15
   12e7e:	18fb      	adds	r3, r7, r3
   12e80:	781b      	ldrb	r3, [r3, #0]
   12e82:	2201      	movs	r2, #1
   12e84:	4013      	ands	r3, r2
   12e86:	d016      	beq.n	12eb6 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12e88:	4a2b      	ldr	r2, [pc, #172]	; (12f38 <DMAC_Handler+0x130>)
   12e8a:	234e      	movs	r3, #78	; 0x4e
   12e8c:	2101      	movs	r1, #1
   12e8e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12e90:	693b      	ldr	r3, [r7, #16]
   12e92:	2210      	movs	r2, #16
   12e94:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12e96:	693b      	ldr	r3, [r7, #16]
   12e98:	7c1b      	ldrb	r3, [r3, #16]
   12e9a:	001a      	movs	r2, r3
   12e9c:	2301      	movs	r3, #1
   12e9e:	4013      	ands	r3, r2
   12ea0:	d042      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12ea2:	693b      	ldr	r3, [r7, #16]
   12ea4:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d03e      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12eaa:	693b      	ldr	r3, [r7, #16]
   12eac:	685b      	ldr	r3, [r3, #4]
   12eae:	693a      	ldr	r2, [r7, #16]
   12eb0:	0010      	movs	r0, r2
   12eb2:	4798      	blx	r3
   12eb4:	e038      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12eb6:	230f      	movs	r3, #15
   12eb8:	18fb      	adds	r3, r7, r3
   12eba:	781b      	ldrb	r3, [r3, #0]
   12ebc:	2202      	movs	r2, #2
   12ebe:	4013      	ands	r3, r2
   12ec0:	d016      	beq.n	12ef0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12ec2:	4a1d      	ldr	r2, [pc, #116]	; (12f38 <DMAC_Handler+0x130>)
   12ec4:	234e      	movs	r3, #78	; 0x4e
   12ec6:	2102      	movs	r1, #2
   12ec8:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12eca:	693b      	ldr	r3, [r7, #16]
   12ecc:	2200      	movs	r2, #0
   12ece:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ed0:	693b      	ldr	r3, [r7, #16]
   12ed2:	7c1b      	ldrb	r3, [r3, #16]
   12ed4:	001a      	movs	r2, r3
   12ed6:	2302      	movs	r3, #2
   12ed8:	4013      	ands	r3, r2
   12eda:	d025      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12edc:	693b      	ldr	r3, [r7, #16]
   12ede:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d021      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12ee4:	693b      	ldr	r3, [r7, #16]
   12ee6:	689b      	ldr	r3, [r3, #8]
   12ee8:	693a      	ldr	r2, [r7, #16]
   12eea:	0010      	movs	r0, r2
   12eec:	4798      	blx	r3
   12eee:	e01b      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2204      	movs	r2, #4
   12ef8:	4013      	ands	r3, r2
   12efa:	d015      	beq.n	12f28 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12efc:	4a0e      	ldr	r2, [pc, #56]	; (12f38 <DMAC_Handler+0x130>)
   12efe:	234e      	movs	r3, #78	; 0x4e
   12f00:	2104      	movs	r1, #4
   12f02:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12f04:	693b      	ldr	r3, [r7, #16]
   12f06:	2206      	movs	r2, #6
   12f08:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f0a:	693b      	ldr	r3, [r7, #16]
   12f0c:	7c1b      	ldrb	r3, [r3, #16]
   12f0e:	001a      	movs	r2, r3
   12f10:	2304      	movs	r3, #4
   12f12:	4013      	ands	r3, r2
   12f14:	d008      	beq.n	12f28 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12f16:	693b      	ldr	r3, [r7, #16]
   12f18:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d004      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12f1e:	693b      	ldr	r3, [r7, #16]
   12f20:	68db      	ldr	r3, [r3, #12]
   12f22:	693a      	ldr	r2, [r7, #16]
   12f24:	0010      	movs	r0, r2
   12f26:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12f28:	4b07      	ldr	r3, [pc, #28]	; (12f48 <DMAC_Handler+0x140>)
   12f2a:	4798      	blx	r3
}
   12f2c:	46c0      	nop			; (mov r8, r8)
   12f2e:	46bd      	mov	sp, r7
   12f30:	b006      	add	sp, #24
   12f32:	bd80      	pop	{r7, pc}
   12f34:	00012de1 	.word	0x00012de1
   12f38:	41004800 	.word	0x41004800
   12f3c:	200004f0 	.word	0x200004f0
   12f40:	20004790 	.word	0x20004790
   12f44:	200004a0 	.word	0x200004a0
   12f48:	00012df5 	.word	0x00012df5

00012f4c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12f4c:	b580      	push	{r7, lr}
   12f4e:	b082      	sub	sp, #8
   12f50:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12f52:	4b15      	ldr	r3, [pc, #84]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f54:	691b      	ldr	r3, [r3, #16]
   12f56:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12f58:	4b14      	ldr	r3, [pc, #80]	; (12fac <EVSYS_Handler+0x60>)
   12f5a:	699b      	ldr	r3, [r3, #24]
   12f5c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12f5e:	4b12      	ldr	r3, [pc, #72]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f60:	689a      	ldr	r2, [r3, #8]
   12f62:	683b      	ldr	r3, [r7, #0]
   12f64:	431a      	orrs	r2, r3
   12f66:	4b10      	ldr	r3, [pc, #64]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f68:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12f6a:	4b10      	ldr	r3, [pc, #64]	; (12fac <EVSYS_Handler+0x60>)
   12f6c:	4a10      	ldr	r2, [pc, #64]	; (12fb0 <EVSYS_Handler+0x64>)
   12f6e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12f70:	e008      	b.n	12f84 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12f72:	687b      	ldr	r3, [r7, #4]
   12f74:	685a      	ldr	r2, [r3, #4]
   12f76:	687b      	ldr	r3, [r7, #4]
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	0018      	movs	r0, r3
   12f7c:	4790      	blx	r2
		current_hook = current_hook->next;
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	689b      	ldr	r3, [r3, #8]
   12f82:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d1f3      	bne.n	12f72 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12f8a:	4b07      	ldr	r3, [pc, #28]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f8c:	68db      	ldr	r3, [r3, #12]
   12f8e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12f90:	4b05      	ldr	r3, [pc, #20]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f92:	689b      	ldr	r3, [r3, #8]
   12f94:	683a      	ldr	r2, [r7, #0]
   12f96:	43d2      	mvns	r2, r2
   12f98:	401a      	ands	r2, r3
   12f9a:	4b03      	ldr	r3, [pc, #12]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f9c:	609a      	str	r2, [r3, #8]
}
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	46bd      	mov	sp, r7
   12fa2:	b002      	add	sp, #8
   12fa4:	bd80      	pop	{r7, pc}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	2000000c 	.word	0x2000000c
   12fac:	42000400 	.word	0x42000400
   12fb0:	0f0fffff 	.word	0x0f0fffff

00012fb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12fb4:	b580      	push	{r7, lr}
   12fb6:	b082      	sub	sp, #8
   12fb8:	af00      	add	r7, sp, #0
   12fba:	0002      	movs	r2, r0
   12fbc:	6039      	str	r1, [r7, #0]
   12fbe:	1dfb      	adds	r3, r7, #7
   12fc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12fc2:	1dfb      	adds	r3, r7, #7
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	2b01      	cmp	r3, #1
   12fc8:	d00a      	beq.n	12fe0 <system_apb_clock_set_mask+0x2c>
   12fca:	2b02      	cmp	r3, #2
   12fcc:	d00f      	beq.n	12fee <system_apb_clock_set_mask+0x3a>
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d114      	bne.n	12ffc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12fd2:	4b0e      	ldr	r3, [pc, #56]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd4:	4a0d      	ldr	r2, [pc, #52]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd6:	6991      	ldr	r1, [r2, #24]
   12fd8:	683a      	ldr	r2, [r7, #0]
   12fda:	430a      	orrs	r2, r1
   12fdc:	619a      	str	r2, [r3, #24]
			break;
   12fde:	e00f      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12fe0:	4b0a      	ldr	r3, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe2:	4a0a      	ldr	r2, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe4:	69d1      	ldr	r1, [r2, #28]
   12fe6:	683a      	ldr	r2, [r7, #0]
   12fe8:	430a      	orrs	r2, r1
   12fea:	61da      	str	r2, [r3, #28]
			break;
   12fec:	e008      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12fee:	4b07      	ldr	r3, [pc, #28]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff0:	4a06      	ldr	r2, [pc, #24]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff2:	6a11      	ldr	r1, [r2, #32]
   12ff4:	683a      	ldr	r2, [r7, #0]
   12ff6:	430a      	orrs	r2, r1
   12ff8:	621a      	str	r2, [r3, #32]
			break;
   12ffa:	e001      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12ffc:	2317      	movs	r3, #23
   12ffe:	e000      	b.n	13002 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13000:	2300      	movs	r3, #0
}
   13002:	0018      	movs	r0, r3
   13004:	46bd      	mov	sp, r7
   13006:	b002      	add	sp, #8
   13008:	bd80      	pop	{r7, pc}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	40000400 	.word	0x40000400

00013010 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13010:	b580      	push	{r7, lr}
   13012:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   13014:	2102      	movs	r1, #2
   13016:	2002      	movs	r0, #2
   13018:	4b07      	ldr	r3, [pc, #28]	; (13038 <_system_events_init+0x28>)
   1301a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1301c:	4b07      	ldr	r3, [pc, #28]	; (1303c <_system_events_init+0x2c>)
   1301e:	2201      	movs	r2, #1
   13020:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   13022:	46c0      	nop			; (mov r8, r8)
   13024:	4b05      	ldr	r3, [pc, #20]	; (1303c <_system_events_init+0x2c>)
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	b2db      	uxtb	r3, r3
   1302a:	001a      	movs	r2, r3
   1302c:	2301      	movs	r3, #1
   1302e:	4013      	ands	r3, r2
   13030:	d1f8      	bne.n	13024 <_system_events_init+0x14>
	}
}
   13032:	46c0      	nop			; (mov r8, r8)
   13034:	46bd      	mov	sp, r7
   13036:	bd80      	pop	{r7, pc}
   13038:	00012fb5 	.word	0x00012fb5
   1303c:	42000400 	.word	0x42000400

00013040 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   13040:	b580      	push	{r7, lr}
   13042:	b084      	sub	sp, #16
   13044:	af00      	add	r7, sp, #0
   13046:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	681b      	ldr	r3, [r3, #0]
   1304c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1304e:	68fb      	ldr	r3, [r7, #12]
   13050:	69db      	ldr	r3, [r3, #28]
   13052:	2207      	movs	r2, #7
   13054:	4013      	ands	r3, r2
   13056:	1e5a      	subs	r2, r3, #1
   13058:	4193      	sbcs	r3, r2
   1305a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   1305c:	0018      	movs	r0, r3
   1305e:	46bd      	mov	sp, r7
   13060:	b004      	add	sp, #16
   13062:	bd80      	pop	{r7, pc}

00013064 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13064:	b580      	push	{r7, lr}
   13066:	b082      	sub	sp, #8
   13068:	af00      	add	r7, sp, #0
   1306a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	687b      	ldr	r3, [r7, #4]
   13070:	0018      	movs	r0, r3
   13072:	4b04      	ldr	r3, [pc, #16]	; (13084 <_i2c_master_wait_for_sync+0x20>)
   13074:	4798      	blx	r3
   13076:	1e03      	subs	r3, r0, #0
   13078:	d1f9      	bne.n	1306e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1307a:	46c0      	nop			; (mov r8, r8)
   1307c:	46bd      	mov	sp, r7
   1307e:	b002      	add	sp, #8
   13080:	bd80      	pop	{r7, pc}
   13082:	46c0      	nop			; (mov r8, r8)
   13084:	00013041 	.word	0x00013041

00013088 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13088:	b580      	push	{r7, lr}
   1308a:	b084      	sub	sp, #16
   1308c:	af00      	add	r7, sp, #0
   1308e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13090:	687b      	ldr	r3, [r7, #4]
   13092:	681b      	ldr	r3, [r3, #0]
   13094:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13096:	68fb      	ldr	r3, [r7, #12]
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	011b      	lsls	r3, r3, #4
   1309c:	0fdb      	lsrs	r3, r3, #31
   1309e:	b2db      	uxtb	r3, r3
   130a0:	001a      	movs	r2, r3
   130a2:	230b      	movs	r3, #11
   130a4:	18fb      	adds	r3, r7, r3
   130a6:	1e51      	subs	r1, r2, #1
   130a8:	418a      	sbcs	r2, r1
   130aa:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   130ac:	2308      	movs	r3, #8
   130ae:	18fb      	adds	r3, r7, r3
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	8b52      	ldrh	r2, [r2, #26]
   130b4:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	8b9b      	ldrh	r3, [r3, #28]
   130ba:	b29a      	uxth	r2, r3
   130bc:	2308      	movs	r3, #8
   130be:	18fb      	adds	r3, r7, r3
   130c0:	2108      	movs	r1, #8
   130c2:	1879      	adds	r1, r7, r1
   130c4:	8809      	ldrh	r1, [r1, #0]
   130c6:	1a8a      	subs	r2, r1, r2
   130c8:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	8b9b      	ldrh	r3, [r3, #28]
   130ce:	b29b      	uxth	r3, r3
   130d0:	3b01      	subs	r3, #1
   130d2:	b29a      	uxth	r2, r3
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   130d8:	230b      	movs	r3, #11
   130da:	18fb      	adds	r3, r7, r3
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2b00      	cmp	r3, #0
   130e0:	d010      	beq.n	13104 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   130e2:	687b      	ldr	r3, [r7, #4]
   130e4:	7adb      	ldrb	r3, [r3, #11]
   130e6:	2b00      	cmp	r3, #0
   130e8:	d01c      	beq.n	13124 <_i2c_master_read+0x9c>
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	8b9b      	ldrh	r3, [r3, #28]
   130ee:	b29b      	uxth	r3, r3
   130f0:	2b01      	cmp	r3, #1
   130f2:	d117      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	685b      	ldr	r3, [r3, #4]
   130f8:	2280      	movs	r2, #128	; 0x80
   130fa:	02d2      	lsls	r2, r2, #11
   130fc:	431a      	orrs	r2, r3
   130fe:	68fb      	ldr	r3, [r7, #12]
   13100:	605a      	str	r2, [r3, #4]
   13102:	e00f      	b.n	13124 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	7adb      	ldrb	r3, [r3, #11]
   13108:	2b00      	cmp	r3, #0
   1310a:	d00b      	beq.n	13124 <_i2c_master_read+0x9c>
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	8b9b      	ldrh	r3, [r3, #28]
   13110:	b29b      	uxth	r3, r3
   13112:	2b00      	cmp	r3, #0
   13114:	d106      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13116:	68fb      	ldr	r3, [r7, #12]
   13118:	685b      	ldr	r3, [r3, #4]
   1311a:	2280      	movs	r2, #128	; 0x80
   1311c:	02d2      	lsls	r2, r2, #11
   1311e:	431a      	orrs	r2, r3
   13120:	68fb      	ldr	r3, [r7, #12]
   13122:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	8b9b      	ldrh	r3, [r3, #28]
   13128:	b29b      	uxth	r3, r3
   1312a:	2b00      	cmp	r3, #0
   1312c:	d10e      	bne.n	1314c <_i2c_master_read+0xc4>
		if (module->send_stop) {
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	7a9b      	ldrb	r3, [r3, #10]
   13132:	2b00      	cmp	r3, #0
   13134:	d00a      	beq.n	1314c <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13136:	687b      	ldr	r3, [r7, #4]
   13138:	0018      	movs	r0, r3
   1313a:	4b0e      	ldr	r3, [pc, #56]	; (13174 <_i2c_master_read+0xec>)
   1313c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1313e:	68fb      	ldr	r3, [r7, #12]
   13140:	685b      	ldr	r3, [r3, #4]
   13142:	22c0      	movs	r2, #192	; 0xc0
   13144:	0292      	lsls	r2, r2, #10
   13146:	431a      	orrs	r2, r3
   13148:	68fb      	ldr	r3, [r7, #12]
   1314a:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	0018      	movs	r0, r3
   13150:	4b08      	ldr	r3, [pc, #32]	; (13174 <_i2c_master_read+0xec>)
   13152:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13154:	687b      	ldr	r3, [r7, #4]
   13156:	6a1a      	ldr	r2, [r3, #32]
   13158:	2308      	movs	r3, #8
   1315a:	18fb      	adds	r3, r7, r3
   1315c:	881b      	ldrh	r3, [r3, #0]
   1315e:	18d3      	adds	r3, r2, r3
   13160:	68fa      	ldr	r2, [r7, #12]
   13162:	2128      	movs	r1, #40	; 0x28
   13164:	5c52      	ldrb	r2, [r2, r1]
   13166:	b2d2      	uxtb	r2, r2
   13168:	701a      	strb	r2, [r3, #0]
}
   1316a:	46c0      	nop			; (mov r8, r8)
   1316c:	46bd      	mov	sp, r7
   1316e:	b004      	add	sp, #16
   13170:	bd80      	pop	{r7, pc}
   13172:	46c0      	nop			; (mov r8, r8)
   13174:	00013065 	.word	0x00013065

00013178 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13178:	b580      	push	{r7, lr}
   1317a:	b084      	sub	sp, #16
   1317c:	af00      	add	r7, sp, #0
   1317e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13180:	687b      	ldr	r3, [r7, #4]
   13182:	681b      	ldr	r3, [r3, #0]
   13184:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	8b5b      	ldrh	r3, [r3, #26]
   1318a:	b29b      	uxth	r3, r3
   1318c:	001a      	movs	r2, r3
   1318e:	2304      	movs	r3, #4
   13190:	4013      	ands	r3, r2
   13192:	d004      	beq.n	1319e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13194:	687b      	ldr	r3, [r7, #4]
   13196:	2225      	movs	r2, #37	; 0x25
   13198:	211e      	movs	r1, #30
   1319a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1319c:	e024      	b.n	131e8 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1319e:	230a      	movs	r3, #10
   131a0:	18fb      	adds	r3, r7, r3
   131a2:	687a      	ldr	r2, [r7, #4]
   131a4:	8b52      	ldrh	r2, [r2, #26]
   131a6:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	8b9b      	ldrh	r3, [r3, #28]
   131ac:	b29a      	uxth	r2, r3
   131ae:	230a      	movs	r3, #10
   131b0:	18fb      	adds	r3, r7, r3
   131b2:	210a      	movs	r1, #10
   131b4:	1879      	adds	r1, r7, r1
   131b6:	8809      	ldrh	r1, [r1, #0]
   131b8:	1a8a      	subs	r2, r1, r2
   131ba:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   131bc:	687b      	ldr	r3, [r7, #4]
   131be:	8b9b      	ldrh	r3, [r3, #28]
   131c0:	b29b      	uxth	r3, r3
   131c2:	3b01      	subs	r3, #1
   131c4:	b29a      	uxth	r2, r3
   131c6:	687b      	ldr	r3, [r7, #4]
   131c8:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	0018      	movs	r0, r3
   131ce:	4b08      	ldr	r3, [pc, #32]	; (131f0 <_i2c_master_write+0x78>)
   131d0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   131d2:	687b      	ldr	r3, [r7, #4]
   131d4:	6a1a      	ldr	r2, [r3, #32]
   131d6:	230a      	movs	r3, #10
   131d8:	18fb      	adds	r3, r7, r3
   131da:	881b      	ldrh	r3, [r3, #0]
   131dc:	18d3      	adds	r3, r2, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	b2d9      	uxtb	r1, r3
   131e2:	68fb      	ldr	r3, [r7, #12]
   131e4:	2228      	movs	r2, #40	; 0x28
   131e6:	5499      	strb	r1, [r3, r2]
}
   131e8:	46bd      	mov	sp, r7
   131ea:	b004      	add	sp, #16
   131ec:	bd80      	pop	{r7, pc}
   131ee:	46c0      	nop			; (mov r8, r8)
   131f0:	00013065 	.word	0x00013065

000131f4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   131f4:	b580      	push	{r7, lr}
   131f6:	b084      	sub	sp, #16
   131f8:	af00      	add	r7, sp, #0
   131fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	681b      	ldr	r3, [r3, #0]
   13200:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   13202:	68fb      	ldr	r3, [r7, #12]
   13204:	7e1b      	ldrb	r3, [r3, #24]
   13206:	b2db      	uxtb	r3, r3
   13208:	001a      	movs	r2, r3
   1320a:	2301      	movs	r3, #1
   1320c:	4013      	ands	r3, r2
   1320e:	d02b      	beq.n	13268 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13210:	68fb      	ldr	r3, [r7, #12]
   13212:	2201      	movs	r2, #1
   13214:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13216:	68fb      	ldr	r3, [r7, #12]
   13218:	8b5b      	ldrh	r3, [r3, #26]
   1321a:	b29b      	uxth	r3, r3
   1321c:	001a      	movs	r2, r3
   1321e:	2302      	movs	r3, #2
   13220:	4013      	ands	r3, r2
   13222:	d004      	beq.n	1322e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	2225      	movs	r2, #37	; 0x25
   13228:	2141      	movs	r1, #65	; 0x41
   1322a:	5499      	strb	r1, [r3, r2]
   1322c:	e01c      	b.n	13268 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	8b5b      	ldrh	r3, [r3, #26]
   13232:	b29b      	uxth	r3, r3
   13234:	001a      	movs	r2, r3
   13236:	2304      	movs	r3, #4
   13238:	4013      	ands	r3, r2
   1323a:	d015      	beq.n	13268 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   1323c:	687b      	ldr	r3, [r7, #4]
   1323e:	2225      	movs	r2, #37	; 0x25
   13240:	2118      	movs	r1, #24
   13242:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	2200      	movs	r2, #0
   13248:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   1324a:	687b      	ldr	r3, [r7, #4]
   1324c:	7a9b      	ldrb	r3, [r3, #10]
   1324e:	2b00      	cmp	r3, #0
   13250:	d00a      	beq.n	13268 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	0018      	movs	r0, r3
   13256:	4b13      	ldr	r3, [pc, #76]	; (132a4 <_i2c_master_async_address_response+0xb0>)
   13258:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1325a:	68fb      	ldr	r3, [r7, #12]
   1325c:	685b      	ldr	r3, [r3, #4]
   1325e:	22c0      	movs	r2, #192	; 0xc0
   13260:	0292      	lsls	r2, r2, #10
   13262:	431a      	orrs	r2, r3
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13268:	687b      	ldr	r3, [r7, #4]
   1326a:	8b9b      	ldrh	r3, [r3, #28]
   1326c:	b29a      	uxth	r2, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13272:	687b      	ldr	r3, [r7, #4]
   13274:	2225      	movs	r2, #37	; 0x25
   13276:	5c9b      	ldrb	r3, [r3, r2]
   13278:	b2db      	uxtb	r3, r3
   1327a:	2b05      	cmp	r3, #5
   1327c:	d10e      	bne.n	1329c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1327e:	687b      	ldr	r3, [r7, #4]
   13280:	2224      	movs	r2, #36	; 0x24
   13282:	5c9b      	ldrb	r3, [r3, r2]
   13284:	b2db      	uxtb	r3, r3
   13286:	2b00      	cmp	r3, #0
   13288:	d104      	bne.n	13294 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1328a:	687b      	ldr	r3, [r7, #4]
   1328c:	0018      	movs	r0, r3
   1328e:	4b06      	ldr	r3, [pc, #24]	; (132a8 <_i2c_master_async_address_response+0xb4>)
   13290:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13292:	e003      	b.n	1329c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13294:	687b      	ldr	r3, [r7, #4]
   13296:	0018      	movs	r0, r3
   13298:	4b04      	ldr	r3, [pc, #16]	; (132ac <_i2c_master_async_address_response+0xb8>)
   1329a:	4798      	blx	r3
}
   1329c:	46c0      	nop			; (mov r8, r8)
   1329e:	46bd      	mov	sp, r7
   132a0:	b004      	add	sp, #16
   132a2:	bd80      	pop	{r7, pc}
   132a4:	00013065 	.word	0x00013065
   132a8:	00013179 	.word	0x00013179
   132ac:	00013089 	.word	0x00013089

000132b0 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   132b0:	b580      	push	{r7, lr}
   132b2:	b084      	sub	sp, #16
   132b4:	af00      	add	r7, sp, #0
   132b6:	60f8      	str	r0, [r7, #12]
   132b8:	60b9      	str	r1, [r7, #8]
   132ba:	1dfb      	adds	r3, r7, #7
   132bc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   132be:	1dfb      	adds	r3, r7, #7
   132c0:	781b      	ldrb	r3, [r3, #0]
   132c2:	68fa      	ldr	r2, [r7, #12]
   132c4:	3302      	adds	r3, #2
   132c6:	009b      	lsls	r3, r3, #2
   132c8:	18d3      	adds	r3, r2, r3
   132ca:	3304      	adds	r3, #4
   132cc:	68ba      	ldr	r2, [r7, #8]
   132ce:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   132d0:	68fb      	ldr	r3, [r7, #12]
   132d2:	7e1b      	ldrb	r3, [r3, #24]
   132d4:	b2db      	uxtb	r3, r3
   132d6:	b25a      	sxtb	r2, r3
   132d8:	1dfb      	adds	r3, r7, #7
   132da:	781b      	ldrb	r3, [r3, #0]
   132dc:	2101      	movs	r1, #1
   132de:	4099      	lsls	r1, r3
   132e0:	000b      	movs	r3, r1
   132e2:	b25b      	sxtb	r3, r3
   132e4:	4313      	orrs	r3, r2
   132e6:	b25b      	sxtb	r3, r3
   132e8:	b2da      	uxtb	r2, r3
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	761a      	strb	r2, [r3, #24]
}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	46bd      	mov	sp, r7
   132f2:	b004      	add	sp, #16
   132f4:	bd80      	pop	{r7, pc}
	...

000132f8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f8:	b590      	push	{r4, r7, lr}
   132fa:	b087      	sub	sp, #28
   132fc:	af00      	add	r7, sp, #0
   132fe:	6078      	str	r0, [r7, #4]
   13300:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	681b      	ldr	r3, [r3, #0]
   13306:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13308:	683b      	ldr	r3, [r7, #0]
   1330a:	685a      	ldr	r2, [r3, #4]
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13310:	683b      	ldr	r3, [r7, #0]
   13312:	885a      	ldrh	r2, [r3, #2]
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2224      	movs	r2, #36	; 0x24
   1331c:	2101      	movs	r1, #1
   1331e:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13320:	687b      	ldr	r3, [r7, #4]
   13322:	2225      	movs	r2, #37	; 0x25
   13324:	2105      	movs	r1, #5
   13326:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13328:	693b      	ldr	r3, [r7, #16]
   1332a:	681b      	ldr	r3, [r3, #0]
   1332c:	011b      	lsls	r3, r3, #4
   1332e:	0fdb      	lsrs	r3, r3, #31
   13330:	b2db      	uxtb	r3, r3
   13332:	001a      	movs	r2, r3
   13334:	230f      	movs	r3, #15
   13336:	18fb      	adds	r3, r7, r3
   13338:	1e51      	subs	r1, r2, #1
   1333a:	418a      	sbcs	r2, r1
   1333c:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1333e:	683b      	ldr	r3, [r7, #0]
   13340:	7a5b      	ldrb	r3, [r3, #9]
   13342:	2b00      	cmp	r3, #0
   13344:	d006      	beq.n	13354 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13346:	683b      	ldr	r3, [r7, #0]
   13348:	7a9a      	ldrb	r2, [r3, #10]
   1334a:	687b      	ldr	r3, [r7, #4]
   1334c:	0011      	movs	r1, r2
   1334e:	0018      	movs	r0, r3
   13350:	4b3b      	ldr	r3, [pc, #236]	; (13440 <_i2c_master_read_packet+0x148>)
   13352:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13354:	230f      	movs	r3, #15
   13356:	18fb      	adds	r3, r7, r3
   13358:	781b      	ldrb	r3, [r3, #0]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d00b      	beq.n	13376 <_i2c_master_read_packet+0x7e>
   1335e:	683b      	ldr	r3, [r7, #0]
   13360:	885b      	ldrh	r3, [r3, #2]
   13362:	2b01      	cmp	r3, #1
   13364:	d107      	bne.n	13376 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13366:	693b      	ldr	r3, [r7, #16]
   13368:	685b      	ldr	r3, [r3, #4]
   1336a:	2280      	movs	r2, #128	; 0x80
   1336c:	02d2      	lsls	r2, r2, #11
   1336e:	431a      	orrs	r2, r3
   13370:	693b      	ldr	r3, [r7, #16]
   13372:	605a      	str	r2, [r3, #4]
   13374:	e005      	b.n	13382 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13376:	693b      	ldr	r3, [r7, #16]
   13378:	685b      	ldr	r3, [r3, #4]
   1337a:	4a32      	ldr	r2, [pc, #200]	; (13444 <_i2c_master_read_packet+0x14c>)
   1337c:	401a      	ands	r2, r3
   1337e:	693b      	ldr	r3, [r7, #16]
   13380:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13382:	683b      	ldr	r3, [r7, #0]
   13384:	7a1b      	ldrb	r3, [r3, #8]
   13386:	2b00      	cmp	r3, #0
   13388:	d045      	beq.n	13416 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1338a:	683b      	ldr	r3, [r7, #0]
   1338c:	881b      	ldrh	r3, [r3, #0]
   1338e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	7a5b      	ldrb	r3, [r3, #9]
   13394:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13396:	4313      	orrs	r3, r2
   13398:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1339a:	2380      	movs	r3, #128	; 0x80
   1339c:	021b      	lsls	r3, r3, #8
   1339e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   133a0:	693b      	ldr	r3, [r7, #16]
   133a2:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   133a4:	2317      	movs	r3, #23
   133a6:	18fc      	adds	r4, r7, r3
   133a8:	687b      	ldr	r3, [r7, #4]
   133aa:	0018      	movs	r0, r3
   133ac:	4b26      	ldr	r3, [pc, #152]	; (13448 <_i2c_master_read_packet+0x150>)
   133ae:	4798      	blx	r3
   133b0:	0003      	movs	r3, r0
   133b2:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   133b4:	693b      	ldr	r3, [r7, #16]
   133b6:	685b      	ldr	r3, [r3, #4]
   133b8:	4a22      	ldr	r2, [pc, #136]	; (13444 <_i2c_master_read_packet+0x14c>)
   133ba:	401a      	ands	r2, r3
   133bc:	693b      	ldr	r3, [r7, #16]
   133be:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   133c0:	2317      	movs	r3, #23
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b00      	cmp	r3, #0
   133c8:	d107      	bne.n	133da <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   133ca:	2317      	movs	r3, #23
   133cc:	18fc      	adds	r4, r7, r3
   133ce:	687b      	ldr	r3, [r7, #4]
   133d0:	0018      	movs	r0, r3
   133d2:	4b1e      	ldr	r3, [pc, #120]	; (1344c <_i2c_master_read_packet+0x154>)
   133d4:	4798      	blx	r3
   133d6:	0003      	movs	r3, r0
   133d8:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   133da:	2317      	movs	r3, #23
   133dc:	18fb      	adds	r3, r7, r3
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	2b00      	cmp	r3, #0
   133e2:	d114      	bne.n	1340e <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   133e4:	693b      	ldr	r3, [r7, #16]
   133e6:	2203      	movs	r2, #3
   133e8:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   133ea:	683b      	ldr	r3, [r7, #0]
   133ec:	881b      	ldrh	r3, [r3, #0]
   133ee:	0a1b      	lsrs	r3, r3, #8
   133f0:	b29b      	uxth	r3, r3
   133f2:	2278      	movs	r2, #120	; 0x78
   133f4:	4313      	orrs	r3, r2
   133f6:	b29b      	uxth	r3, r3
   133f8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133fa:	683b      	ldr	r3, [r7, #0]
   133fc:	7a5b      	ldrb	r3, [r3, #9]
   133fe:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13400:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13402:	2201      	movs	r2, #1
   13404:	4313      	orrs	r3, r2
   13406:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13408:	693b      	ldr	r3, [r7, #16]
   1340a:	625a      	str	r2, [r3, #36]	; 0x24
   1340c:	e012      	b.n	13434 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   1340e:	2317      	movs	r3, #23
   13410:	18fb      	adds	r3, r7, r3
   13412:	781b      	ldrb	r3, [r3, #0]
   13414:	e00f      	b.n	13436 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13416:	693b      	ldr	r3, [r7, #16]
   13418:	2203      	movs	r2, #3
   1341a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1341c:	683b      	ldr	r3, [r7, #0]
   1341e:	881b      	ldrh	r3, [r3, #0]
   13420:	005b      	lsls	r3, r3, #1
   13422:	2201      	movs	r2, #1
   13424:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13426:	683b      	ldr	r3, [r7, #0]
   13428:	7a5b      	ldrb	r3, [r3, #9]
   1342a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1342c:	4313      	orrs	r3, r2
   1342e:	001a      	movs	r2, r3
   13430:	693b      	ldr	r3, [r7, #16]
   13432:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13434:	2300      	movs	r3, #0
}
   13436:	0018      	movs	r0, r3
   13438:	46bd      	mov	sp, r7
   1343a:	b007      	add	sp, #28
   1343c:	bd90      	pop	{r4, r7, pc}
   1343e:	46c0      	nop			; (mov r8, r8)
   13440:	00018245 	.word	0x00018245
   13444:	fffbffff 	.word	0xfffbffff
   13448:	000181e7 	.word	0x000181e7
   1344c:	00018189 	.word	0x00018189

00013450 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13450:	b580      	push	{r7, lr}
   13452:	b082      	sub	sp, #8
   13454:	af00      	add	r7, sp, #0
   13456:	6078      	str	r0, [r7, #4]
   13458:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	8b9b      	ldrh	r3, [r3, #28]
   1345e:	b29b      	uxth	r3, r3
   13460:	2b00      	cmp	r3, #0
   13462:	d001      	beq.n	13468 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13464:	2305      	movs	r3, #5
   13466:	e00c      	b.n	13482 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13468:	687b      	ldr	r3, [r7, #4]
   1346a:	2201      	movs	r2, #1
   1346c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	2201      	movs	r2, #1
   13472:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13474:	683a      	ldr	r2, [r7, #0]
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	0011      	movs	r1, r2
   1347a:	0018      	movs	r0, r3
   1347c:	4b03      	ldr	r3, [pc, #12]	; (1348c <i2c_master_read_packet_job+0x3c>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
}
   13482:	0018      	movs	r0, r3
   13484:	46bd      	mov	sp, r7
   13486:	b002      	add	sp, #8
   13488:	bd80      	pop	{r7, pc}
   1348a:	46c0      	nop			; (mov r8, r8)
   1348c:	000132f9 	.word	0x000132f9

00013490 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13490:	b580      	push	{r7, lr}
   13492:	b084      	sub	sp, #16
   13494:	af00      	add	r7, sp, #0
   13496:	6078      	str	r0, [r7, #4]
   13498:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   134a0:	683b      	ldr	r3, [r7, #0]
   134a2:	7a5b      	ldrb	r3, [r3, #9]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d006      	beq.n	134b6 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   134a8:	683b      	ldr	r3, [r7, #0]
   134aa:	7a9a      	ldrb	r2, [r3, #10]
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	0011      	movs	r1, r2
   134b0:	0018      	movs	r0, r3
   134b2:	4b1e      	ldr	r3, [pc, #120]	; (1352c <_i2c_master_write_packet+0x9c>)
   134b4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   134b6:	68fb      	ldr	r3, [r7, #12]
   134b8:	685b      	ldr	r3, [r3, #4]
   134ba:	4a1d      	ldr	r2, [pc, #116]	; (13530 <_i2c_master_write_packet+0xa0>)
   134bc:	401a      	ands	r2, r3
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   134c2:	683b      	ldr	r3, [r7, #0]
   134c4:	685a      	ldr	r2, [r3, #4]
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	885a      	ldrh	r2, [r3, #2]
   134ce:	687b      	ldr	r3, [r7, #4]
   134d0:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	2224      	movs	r2, #36	; 0x24
   134d6:	2100      	movs	r1, #0
   134d8:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	2225      	movs	r2, #37	; 0x25
   134de:	2105      	movs	r1, #5
   134e0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   134e2:	68fb      	ldr	r3, [r7, #12]
   134e4:	2203      	movs	r2, #3
   134e6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   134e8:	683b      	ldr	r3, [r7, #0]
   134ea:	7a1b      	ldrb	r3, [r3, #8]
   134ec:	2b00      	cmp	r3, #0
   134ee:	d00d      	beq.n	1350c <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134f0:	683b      	ldr	r3, [r7, #0]
   134f2:	881b      	ldrh	r3, [r3, #0]
   134f4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   134f6:	683b      	ldr	r3, [r7, #0]
   134f8:	7a5b      	ldrb	r3, [r3, #9]
   134fa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134fc:	4313      	orrs	r3, r2
   134fe:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13500:	2380      	movs	r3, #128	; 0x80
   13502:	021b      	lsls	r3, r3, #8
   13504:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13506:	68fb      	ldr	r3, [r7, #12]
   13508:	625a      	str	r2, [r3, #36]	; 0x24
   1350a:	e009      	b.n	13520 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1350c:	683b      	ldr	r3, [r7, #0]
   1350e:	881b      	ldrh	r3, [r3, #0]
   13510:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13512:	683b      	ldr	r3, [r7, #0]
   13514:	7a5b      	ldrb	r3, [r3, #9]
   13516:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13518:	4313      	orrs	r3, r2
   1351a:	001a      	movs	r2, r3
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13520:	2300      	movs	r3, #0
}
   13522:	0018      	movs	r0, r3
   13524:	46bd      	mov	sp, r7
   13526:	b004      	add	sp, #16
   13528:	bd80      	pop	{r7, pc}
   1352a:	46c0      	nop			; (mov r8, r8)
   1352c:	00018245 	.word	0x00018245
   13530:	fffbffff 	.word	0xfffbffff

00013534 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13534:	b580      	push	{r7, lr}
   13536:	b082      	sub	sp, #8
   13538:	af00      	add	r7, sp, #0
   1353a:	6078      	str	r0, [r7, #4]
   1353c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   1353e:	687b      	ldr	r3, [r7, #4]
   13540:	8b9b      	ldrh	r3, [r3, #28]
   13542:	b29b      	uxth	r3, r3
   13544:	2b00      	cmp	r3, #0
   13546:	d001      	beq.n	1354c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13548:	2305      	movs	r3, #5
   1354a:	e00c      	b.n	13566 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	2201      	movs	r2, #1
   13550:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13552:	687b      	ldr	r3, [r7, #4]
   13554:	2201      	movs	r2, #1
   13556:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13558:	683a      	ldr	r2, [r7, #0]
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	0011      	movs	r1, r2
   1355e:	0018      	movs	r0, r3
   13560:	4b03      	ldr	r3, [pc, #12]	; (13570 <i2c_master_write_packet_job+0x3c>)
   13562:	4798      	blx	r3
   13564:	0003      	movs	r3, r0
}
   13566:	0018      	movs	r0, r3
   13568:	46bd      	mov	sp, r7
   1356a:	b002      	add	sp, #8
   1356c:	bd80      	pop	{r7, pc}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	00013491 	.word	0x00013491

00013574 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13574:	b580      	push	{r7, lr}
   13576:	b086      	sub	sp, #24
   13578:	af00      	add	r7, sp, #0
   1357a:	0002      	movs	r2, r0
   1357c:	1dfb      	adds	r3, r7, #7
   1357e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13580:	1dfb      	adds	r3, r7, #7
   13582:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13584:	4b93      	ldr	r3, [pc, #588]	; (137d4 <_i2c_master_interrupt_handler+0x260>)
   13586:	0092      	lsls	r2, r2, #2
   13588:	58d3      	ldr	r3, [r2, r3]
   1358a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1358c:	697b      	ldr	r3, [r7, #20]
   1358e:	681b      	ldr	r3, [r3, #0]
   13590:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	681b      	ldr	r3, [r3, #0]
   13596:	011b      	lsls	r3, r3, #4
   13598:	0fdb      	lsrs	r3, r3, #31
   1359a:	b2db      	uxtb	r3, r3
   1359c:	001a      	movs	r2, r3
   1359e:	230f      	movs	r3, #15
   135a0:	18fb      	adds	r3, r7, r3
   135a2:	1e51      	subs	r1, r2, #1
   135a4:	418a      	sbcs	r2, r1
   135a6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   135a8:	230e      	movs	r3, #14
   135aa:	18fb      	adds	r3, r7, r3
   135ac:	697a      	ldr	r2, [r7, #20]
   135ae:	7e52      	ldrb	r2, [r2, #25]
   135b0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	7e1b      	ldrb	r3, [r3, #24]
   135b6:	b2da      	uxtb	r2, r3
   135b8:	230e      	movs	r3, #14
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	210e      	movs	r1, #14
   135be:	1879      	adds	r1, r7, r1
   135c0:	7809      	ldrb	r1, [r1, #0]
   135c2:	400a      	ands	r2, r1
   135c4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	8b5b      	ldrh	r3, [r3, #26]
   135ca:	b29b      	uxth	r3, r3
   135cc:	2b00      	cmp	r3, #0
   135ce:	d109      	bne.n	135e4 <_i2c_master_interrupt_handler+0x70>
   135d0:	697b      	ldr	r3, [r7, #20]
   135d2:	8b9b      	ldrh	r3, [r3, #28]
   135d4:	b29b      	uxth	r3, r3
   135d6:	2b00      	cmp	r3, #0
   135d8:	d004      	beq.n	135e4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   135da:	697b      	ldr	r3, [r7, #20]
   135dc:	0018      	movs	r0, r3
   135de:	4b7e      	ldr	r3, [pc, #504]	; (137d8 <_i2c_master_interrupt_handler+0x264>)
   135e0:	4798      	blx	r3
   135e2:	e070      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   135e4:	697b      	ldr	r3, [r7, #20]
   135e6:	8b5b      	ldrh	r3, [r3, #26]
   135e8:	b29b      	uxth	r3, r3
   135ea:	2b00      	cmp	r3, #0
   135ec:	d039      	beq.n	13662 <_i2c_master_interrupt_handler+0xee>
   135ee:	697b      	ldr	r3, [r7, #20]
   135f0:	8b9b      	ldrh	r3, [r3, #28]
   135f2:	b29b      	uxth	r3, r3
   135f4:	2b00      	cmp	r3, #0
   135f6:	d134      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   135f8:	697b      	ldr	r3, [r7, #20]
   135fa:	2225      	movs	r2, #37	; 0x25
   135fc:	5c9b      	ldrb	r3, [r3, r2]
   135fe:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13600:	2b05      	cmp	r3, #5
   13602:	d12e      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13604:	697b      	ldr	r3, [r7, #20]
   13606:	2224      	movs	r2, #36	; 0x24
   13608:	5c9b      	ldrb	r3, [r3, r2]
   1360a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1360c:	2b00      	cmp	r3, #0
   1360e:	d128      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13610:	693b      	ldr	r3, [r7, #16]
   13612:	2203      	movs	r2, #3
   13614:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13616:	697b      	ldr	r3, [r7, #20]
   13618:	2200      	movs	r2, #0
   1361a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   1361c:	697b      	ldr	r3, [r7, #20]
   1361e:	2225      	movs	r2, #37	; 0x25
   13620:	2100      	movs	r1, #0
   13622:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	7a9b      	ldrb	r3, [r3, #10]
   13628:	2b00      	cmp	r3, #0
   1362a:	d00b      	beq.n	13644 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1362c:	697b      	ldr	r3, [r7, #20]
   1362e:	0018      	movs	r0, r3
   13630:	4b6a      	ldr	r3, [pc, #424]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   13632:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	685b      	ldr	r3, [r3, #4]
   13638:	22c0      	movs	r2, #192	; 0xc0
   1363a:	0292      	lsls	r2, r2, #10
   1363c:	431a      	orrs	r2, r3
   1363e:	693b      	ldr	r3, [r7, #16]
   13640:	605a      	str	r2, [r3, #4]
   13642:	e002      	b.n	1364a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13644:	693b      	ldr	r3, [r7, #16]
   13646:	2201      	movs	r2, #1
   13648:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1364a:	230e      	movs	r3, #14
   1364c:	18fb      	adds	r3, r7, r3
   1364e:	781b      	ldrb	r3, [r3, #0]
   13650:	2201      	movs	r2, #1
   13652:	4013      	ands	r3, r2
   13654:	d037      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13656:	697b      	ldr	r3, [r7, #20]
   13658:	68db      	ldr	r3, [r3, #12]
   1365a:	697a      	ldr	r2, [r7, #20]
   1365c:	0010      	movs	r0, r2
   1365e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13660:	e031      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13662:	697b      	ldr	r3, [r7, #20]
   13664:	8b5b      	ldrh	r3, [r3, #26]
   13666:	b29b      	uxth	r3, r3
   13668:	2b00      	cmp	r3, #0
   1366a:	d02c      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
   1366c:	697b      	ldr	r3, [r7, #20]
   1366e:	8b9b      	ldrh	r3, [r3, #28]
   13670:	b29b      	uxth	r3, r3
   13672:	2b00      	cmp	r3, #0
   13674:	d027      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	8b5b      	ldrh	r3, [r3, #26]
   1367a:	b29b      	uxth	r3, r3
   1367c:	001a      	movs	r2, r3
   1367e:	2320      	movs	r3, #32
   13680:	4013      	ands	r3, r2
   13682:	d111      	bne.n	136a8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13684:	230f      	movs	r3, #15
   13686:	18fb      	adds	r3, r7, r3
   13688:	781b      	ldrb	r3, [r3, #0]
   1368a:	2201      	movs	r2, #1
   1368c:	4053      	eors	r3, r2
   1368e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13690:	2b00      	cmp	r3, #0
   13692:	d104      	bne.n	1369e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13694:	697b      	ldr	r3, [r7, #20]
   13696:	8b9b      	ldrh	r3, [r3, #28]
   13698:	b29b      	uxth	r3, r3
   1369a:	2b01      	cmp	r3, #1
   1369c:	d004      	beq.n	136a8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1369e:	697b      	ldr	r3, [r7, #20]
   136a0:	2225      	movs	r2, #37	; 0x25
   136a2:	2141      	movs	r1, #65	; 0x41
   136a4:	5499      	strb	r1, [r3, r2]
   136a6:	e00e      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   136a8:	697b      	ldr	r3, [r7, #20]
   136aa:	2224      	movs	r2, #36	; 0x24
   136ac:	5c9b      	ldrb	r3, [r3, r2]
   136ae:	b2db      	uxtb	r3, r3
   136b0:	2b00      	cmp	r3, #0
   136b2:	d104      	bne.n	136be <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   136b4:	697b      	ldr	r3, [r7, #20]
   136b6:	0018      	movs	r0, r3
   136b8:	4b49      	ldr	r3, [pc, #292]	; (137e0 <_i2c_master_interrupt_handler+0x26c>)
   136ba:	4798      	blx	r3
   136bc:	e003      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   136be:	697b      	ldr	r3, [r7, #20]
   136c0:	0018      	movs	r0, r3
   136c2:	4b48      	ldr	r3, [pc, #288]	; (137e4 <_i2c_master_interrupt_handler+0x270>)
   136c4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136c6:	697b      	ldr	r3, [r7, #20]
   136c8:	8b5b      	ldrh	r3, [r3, #26]
   136ca:	b29b      	uxth	r3, r3
   136cc:	2b00      	cmp	r3, #0
   136ce:	d047      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
   136d0:	697b      	ldr	r3, [r7, #20]
   136d2:	8b9b      	ldrh	r3, [r3, #28]
   136d4:	b29b      	uxth	r3, r3
   136d6:	2b00      	cmp	r3, #0
   136d8:	d142      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   136da:	697b      	ldr	r3, [r7, #20]
   136dc:	2225      	movs	r2, #37	; 0x25
   136de:	5c9b      	ldrb	r3, [r3, r2]
   136e0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136e2:	2b05      	cmp	r3, #5
   136e4:	d13c      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   136e6:	697b      	ldr	r3, [r7, #20]
   136e8:	2224      	movs	r2, #36	; 0x24
   136ea:	5c9b      	ldrb	r3, [r3, r2]
   136ec:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   136ee:	2b01      	cmp	r3, #1
   136f0:	d136      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   136f2:	693b      	ldr	r3, [r7, #16]
   136f4:	7e1b      	ldrb	r3, [r3, #24]
   136f6:	b2db      	uxtb	r3, r3
   136f8:	001a      	movs	r2, r3
   136fa:	2302      	movs	r3, #2
   136fc:	4013      	ands	r3, r2
   136fe:	d002      	beq.n	13706 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	2202      	movs	r2, #2
   13704:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13706:	693b      	ldr	r3, [r7, #16]
   13708:	2203      	movs	r2, #3
   1370a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   1370c:	697b      	ldr	r3, [r7, #20]
   1370e:	2200      	movs	r2, #0
   13710:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13712:	697b      	ldr	r3, [r7, #20]
   13714:	2225      	movs	r2, #37	; 0x25
   13716:	2100      	movs	r1, #0
   13718:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   1371a:	230e      	movs	r3, #14
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2202      	movs	r2, #2
   13722:	4013      	ands	r3, r2
   13724:	d00b      	beq.n	1373e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13726:	697b      	ldr	r3, [r7, #20]
   13728:	2224      	movs	r2, #36	; 0x24
   1372a:	5c9b      	ldrb	r3, [r3, r2]
   1372c:	b2db      	uxtb	r3, r3
   1372e:	2b01      	cmp	r3, #1
   13730:	d105      	bne.n	1373e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13732:	697b      	ldr	r3, [r7, #20]
   13734:	691b      	ldr	r3, [r3, #16]
   13736:	697a      	ldr	r2, [r7, #20]
   13738:	0010      	movs	r0, r2
   1373a:	4798      	blx	r3
   1373c:	e010      	b.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   1373e:	230e      	movs	r3, #14
   13740:	18fb      	adds	r3, r7, r3
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	2201      	movs	r2, #1
   13746:	4013      	ands	r3, r2
   13748:	d00a      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1374a:	697b      	ldr	r3, [r7, #20]
   1374c:	2224      	movs	r2, #36	; 0x24
   1374e:	5c9b      	ldrb	r3, [r3, r2]
   13750:	b2db      	uxtb	r3, r3
   13752:	2b00      	cmp	r3, #0
   13754:	d104      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13756:	697b      	ldr	r3, [r7, #20]
   13758:	68db      	ldr	r3, [r3, #12]
   1375a:	697a      	ldr	r2, [r7, #20]
   1375c:	0010      	movs	r0, r2
   1375e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13760:	697b      	ldr	r3, [r7, #20]
   13762:	2225      	movs	r2, #37	; 0x25
   13764:	5c9b      	ldrb	r3, [r3, r2]
   13766:	b2db      	uxtb	r3, r3
   13768:	2b05      	cmp	r3, #5
   1376a:	d02e      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
   1376c:	697b      	ldr	r3, [r7, #20]
   1376e:	2225      	movs	r2, #37	; 0x25
   13770:	5c9b      	ldrb	r3, [r3, r2]
   13772:	b2db      	uxtb	r3, r3
   13774:	2b00      	cmp	r3, #0
   13776:	d028      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13778:	693b      	ldr	r3, [r7, #16]
   1377a:	2203      	movs	r2, #3
   1377c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1377e:	697b      	ldr	r3, [r7, #20]
   13780:	2200      	movs	r2, #0
   13782:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13784:	697b      	ldr	r3, [r7, #20]
   13786:	2200      	movs	r2, #0
   13788:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1378a:	697b      	ldr	r3, [r7, #20]
   1378c:	2225      	movs	r2, #37	; 0x25
   1378e:	5c9b      	ldrb	r3, [r3, r2]
   13790:	b2db      	uxtb	r3, r3
   13792:	2b41      	cmp	r3, #65	; 0x41
   13794:	d00e      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13796:	697b      	ldr	r3, [r7, #20]
   13798:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1379a:	2b00      	cmp	r3, #0
   1379c:	d00a      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1379e:	697b      	ldr	r3, [r7, #20]
   137a0:	0018      	movs	r0, r3
   137a2:	4b0e      	ldr	r3, [pc, #56]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   137a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   137a6:	693b      	ldr	r3, [r7, #16]
   137a8:	685b      	ldr	r3, [r3, #4]
   137aa:	22e0      	movs	r2, #224	; 0xe0
   137ac:	02d2      	lsls	r2, r2, #11
   137ae:	431a      	orrs	r2, r3
   137b0:	693b      	ldr	r3, [r7, #16]
   137b2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   137b4:	230e      	movs	r3, #14
   137b6:	18fb      	adds	r3, r7, r3
   137b8:	781b      	ldrb	r3, [r3, #0]
   137ba:	2204      	movs	r2, #4
   137bc:	4013      	ands	r3, r2
   137be:	d004      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   137c0:	697b      	ldr	r3, [r7, #20]
   137c2:	695b      	ldr	r3, [r3, #20]
   137c4:	697a      	ldr	r2, [r7, #20]
   137c6:	0010      	movs	r0, r2
   137c8:	4798      	blx	r3
		}
	}
}
   137ca:	46c0      	nop			; (mov r8, r8)
   137cc:	46bd      	mov	sp, r7
   137ce:	b006      	add	sp, #24
   137d0:	bd80      	pop	{r7, pc}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	20005c08 	.word	0x20005c08
   137d8:	000131f5 	.word	0x000131f5
   137dc:	00013065 	.word	0x00013065
   137e0:	00013179 	.word	0x00013179
   137e4:	00013089 	.word	0x00013089

000137e8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   137e8:	b580      	push	{r7, lr}
   137ea:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   137ec:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   137f0:	4b02      	ldr	r3, [pc, #8]	; (137fc <NVIC_SystemReset+0x14>)
   137f2:	4a03      	ldr	r2, [pc, #12]	; (13800 <NVIC_SystemReset+0x18>)
   137f4:	60da      	str	r2, [r3, #12]
   137f6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   137fa:	e7fe      	b.n	137fa <NVIC_SystemReset+0x12>
   137fc:	e000ed00 	.word	0xe000ed00
   13800:	05fa0004 	.word	0x05fa0004

00013804 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13804:	b580      	push	{r7, lr}
   13806:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13808:	4b02      	ldr	r3, [pc, #8]	; (13814 <system_reset+0x10>)
   1380a:	4798      	blx	r3
}
   1380c:	46c0      	nop			; (mov r8, r8)
   1380e:	46bd      	mov	sp, r7
   13810:	bd80      	pop	{r7, pc}
   13812:	46c0      	nop			; (mov r8, r8)
   13814:	000137e9 	.word	0x000137e9

00013818 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b086      	sub	sp, #24
   1381c:	af00      	add	r7, sp, #0
   1381e:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13820:	4ba0      	ldr	r3, [pc, #640]	; (13aa4 <vCommandConsoleTask+0x28c>)
   13822:	0018      	movs	r0, r3
   13824:	4ba0      	ldr	r3, [pc, #640]	; (13aa8 <vCommandConsoleTask+0x290>)
   13826:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   13828:	4ba0      	ldr	r3, [pc, #640]	; (13aac <vCommandConsoleTask+0x294>)
   1382a:	0018      	movs	r0, r3
   1382c:	4b9e      	ldr	r3, [pc, #632]	; (13aa8 <vCommandConsoleTask+0x290>)
   1382e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13830:	4b9f      	ldr	r3, [pc, #636]	; (13ab0 <vCommandConsoleTask+0x298>)
   13832:	0018      	movs	r0, r3
   13834:	4b9c      	ldr	r3, [pc, #624]	; (13aa8 <vCommandConsoleTask+0x290>)
   13836:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13838:	4b9e      	ldr	r3, [pc, #632]	; (13ab4 <vCommandConsoleTask+0x29c>)
   1383a:	0018      	movs	r0, r3
   1383c:	4b9a      	ldr	r3, [pc, #616]	; (13aa8 <vCommandConsoleTask+0x290>)
   1383e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   13840:	4b9d      	ldr	r3, [pc, #628]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   13842:	0018      	movs	r0, r3
   13844:	4b98      	ldr	r3, [pc, #608]	; (13aa8 <vCommandConsoleTask+0x290>)
   13846:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
   13848:	4b9c      	ldr	r3, [pc, #624]	; (13abc <vCommandConsoleTask+0x2a4>)
   1384a:	0018      	movs	r0, r3
   1384c:	4b96      	ldr	r3, [pc, #600]	; (13aa8 <vCommandConsoleTask+0x290>)
   1384e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   13850:	4b9b      	ldr	r3, [pc, #620]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13852:	0018      	movs	r0, r3
   13854:	4b94      	ldr	r3, [pc, #592]	; (13aa8 <vCommandConsoleTask+0x290>)
   13856:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
   13858:	4b9a      	ldr	r3, [pc, #616]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   1385a:	0018      	movs	r0, r3
   1385c:	4b92      	ldr	r3, [pc, #584]	; (13aa8 <vCommandConsoleTask+0x290>)
   1385e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendTestData);
   13860:	4b99      	ldr	r3, [pc, #612]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   13862:	0018      	movs	r0, r3
   13864:	4b90      	ldr	r3, [pc, #576]	; (13aa8 <vCommandConsoleTask+0x290>)
   13866:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13868:	4b98      	ldr	r3, [pc, #608]	; (13acc <vCommandConsoleTask+0x2b4>)
   1386a:	0018      	movs	r0, r3
   1386c:	4b8e      	ldr	r3, [pc, #568]	; (13aa8 <vCommandConsoleTask+0x290>)
   1386e:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13870:	2317      	movs	r3, #23
   13872:	18fb      	adds	r3, r7, r3
   13874:	2200      	movs	r2, #0
   13876:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13878:	4b95      	ldr	r3, [pc, #596]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   1387a:	0018      	movs	r0, r3
   1387c:	4b95      	ldr	r3, [pc, #596]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   1387e:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13880:	2203      	movs	r2, #3
   13882:	2100      	movs	r1, #0
   13884:	2001      	movs	r0, #1
   13886:	4b94      	ldr	r3, [pc, #592]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13888:	4798      	blx	r3
   1388a:	0002      	movs	r2, r0
   1388c:	4b93      	ldr	r3, [pc, #588]	; (13adc <vCommandConsoleTask+0x2c4>)
   1388e:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13890:	4b92      	ldr	r3, [pc, #584]	; (13adc <vCommandConsoleTask+0x2c4>)
   13892:	681b      	ldr	r3, [r3, #0]
   13894:	2b00      	cmp	r3, #0
   13896:	d107      	bne.n	138a8 <vCommandConsoleTask+0x90>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13898:	4b91      	ldr	r3, [pc, #580]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   1389a:	0019      	movs	r1, r3
   1389c:	2003      	movs	r0, #3
   1389e:	4b91      	ldr	r3, [pc, #580]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138a0:	4798      	blx	r3
        vTaskSuspend(NULL);
   138a2:	2000      	movs	r0, #0
   138a4:	4b90      	ldr	r3, [pc, #576]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   138a6:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   138a8:	230c      	movs	r3, #12
   138aa:	18fb      	adds	r3, r7, r3
   138ac:	0018      	movs	r0, r3
   138ae:	4b8f      	ldr	r3, [pc, #572]	; (13aec <vCommandConsoleTask+0x2d4>)
   138b0:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   138b2:	230c      	movs	r3, #12
   138b4:	18fb      	adds	r3, r7, r3
   138b6:	781b      	ldrb	r3, [r3, #0]
   138b8:	2b0a      	cmp	r3, #10
   138ba:	d004      	beq.n	138c6 <vCommandConsoleTask+0xae>
   138bc:	230c      	movs	r3, #12
   138be:	18fb      	adds	r3, r7, r3
   138c0:	781b      	ldrb	r3, [r3, #0]
   138c2:	2b0d      	cmp	r3, #13
   138c4:	d137      	bne.n	13936 <vCommandConsoleTask+0x11e>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   138c6:	4b8a      	ldr	r3, [pc, #552]	; (13af0 <vCommandConsoleTask+0x2d8>)
   138c8:	0018      	movs	r0, r3
   138ca:	4b82      	ldr	r3, [pc, #520]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   138cc:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   138ce:	4b89      	ldr	r3, [pc, #548]	; (13af4 <vCommandConsoleTask+0x2dc>)
   138d0:	2200      	movs	r2, #0
   138d2:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   138d4:	4b88      	ldr	r3, [pc, #544]	; (13af8 <vCommandConsoleTask+0x2e0>)
   138d6:	2200      	movs	r2, #0
   138d8:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   138da:	4988      	ldr	r1, [pc, #544]	; (13afc <vCommandConsoleTask+0x2e4>)
   138dc:	4b88      	ldr	r3, [pc, #544]	; (13b00 <vCommandConsoleTask+0x2e8>)
   138de:	2231      	movs	r2, #49	; 0x31
   138e0:	0018      	movs	r0, r3
   138e2:	4b88      	ldr	r3, [pc, #544]	; (13b04 <vCommandConsoleTask+0x2ec>)
   138e4:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   138e6:	4b86      	ldr	r3, [pc, #536]	; (13b00 <vCommandConsoleTask+0x2e8>)
   138e8:	2231      	movs	r2, #49	; 0x31
   138ea:	2100      	movs	r1, #0
   138ec:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   138ee:	4986      	ldr	r1, [pc, #536]	; (13b08 <vCommandConsoleTask+0x2f0>)
   138f0:	4b82      	ldr	r3, [pc, #520]	; (13afc <vCommandConsoleTask+0x2e4>)
   138f2:	2264      	movs	r2, #100	; 0x64
   138f4:	0018      	movs	r0, r3
   138f6:	4b85      	ldr	r3, [pc, #532]	; (13b0c <vCommandConsoleTask+0x2f4>)
   138f8:	4798      	blx	r3
   138fa:	0003      	movs	r3, r0
   138fc:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   138fe:	4b82      	ldr	r3, [pc, #520]	; (13b08 <vCommandConsoleTask+0x2f0>)
   13900:	2263      	movs	r2, #99	; 0x63
   13902:	2100      	movs	r1, #0
   13904:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   13906:	4b80      	ldr	r3, [pc, #512]	; (13b08 <vCommandConsoleTask+0x2f0>)
   13908:	0018      	movs	r0, r3
   1390a:	4b72      	ldr	r3, [pc, #456]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   1390c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   1390e:	693b      	ldr	r3, [r7, #16]
   13910:	2b00      	cmp	r3, #0
   13912:	d1ec      	bne.n	138ee <vCommandConsoleTask+0xd6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   13914:	2317      	movs	r3, #23
   13916:	18fb      	adds	r3, r7, r3
   13918:	2200      	movs	r2, #0
   1391a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   1391c:	4b77      	ldr	r3, [pc, #476]	; (13afc <vCommandConsoleTask+0x2e4>)
   1391e:	2232      	movs	r2, #50	; 0x32
   13920:	2100      	movs	r1, #0
   13922:	0018      	movs	r0, r3
   13924:	4b7a      	ldr	r3, [pc, #488]	; (13b10 <vCommandConsoleTask+0x2f8>)
   13926:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13928:	4b77      	ldr	r3, [pc, #476]	; (13b08 <vCommandConsoleTask+0x2f0>)
   1392a:	2264      	movs	r2, #100	; 0x64
   1392c:	2100      	movs	r1, #0
   1392e:	0018      	movs	r0, r3
   13930:	4b77      	ldr	r3, [pc, #476]	; (13b10 <vCommandConsoleTask+0x2f8>)
   13932:	4798      	blx	r3
   13934:	e0b5      	b.n	13aa2 <vCommandConsoleTask+0x28a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   13936:	4b6f      	ldr	r3, [pc, #444]	; (13af4 <vCommandConsoleTask+0x2dc>)
   13938:	781b      	ldrb	r3, [r3, #0]
   1393a:	2b00      	cmp	r3, #0
   1393c:	d059      	beq.n	139f2 <vCommandConsoleTask+0x1da>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   1393e:	4b6e      	ldr	r3, [pc, #440]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13940:	781b      	ldrb	r3, [r3, #0]
   13942:	2b03      	cmp	r3, #3
   13944:	d80c      	bhi.n	13960 <vCommandConsoleTask+0x148>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   13946:	4b6c      	ldr	r3, [pc, #432]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13948:	781b      	ldrb	r3, [r3, #0]
   1394a:	1c5a      	adds	r2, r3, #1
   1394c:	b2d1      	uxtb	r1, r2
   1394e:	4a6a      	ldr	r2, [pc, #424]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13950:	7011      	strb	r1, [r2, #0]
   13952:	001a      	movs	r2, r3
   13954:	230c      	movs	r3, #12
   13956:	18fb      	adds	r3, r7, r3
   13958:	7819      	ldrb	r1, [r3, #0]
   1395a:	4b6e      	ldr	r3, [pc, #440]	; (13b14 <vCommandConsoleTask+0x2fc>)
   1395c:	5499      	strb	r1, [r3, r2]
   1395e:	e005      	b.n	1396c <vCommandConsoleTask+0x154>
                } else {
                    isEscapeCode = false;
   13960:	4b64      	ldr	r3, [pc, #400]	; (13af4 <vCommandConsoleTask+0x2dc>)
   13962:	2200      	movs	r2, #0
   13964:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13966:	4b64      	ldr	r3, [pc, #400]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13968:	2200      	movs	r2, #0
   1396a:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   1396c:	4b62      	ldr	r3, [pc, #392]	; (13af8 <vCommandConsoleTask+0x2e0>)
   1396e:	781b      	ldrb	r3, [r3, #0]
   13970:	2b01      	cmp	r3, #1
   13972:	d999      	bls.n	138a8 <vCommandConsoleTask+0x90>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   13974:	4a68      	ldr	r2, [pc, #416]	; (13b18 <vCommandConsoleTask+0x300>)
   13976:	4b67      	ldr	r3, [pc, #412]	; (13b14 <vCommandConsoleTask+0x2fc>)
   13978:	0011      	movs	r1, r2
   1397a:	0018      	movs	r0, r3
   1397c:	4b67      	ldr	r3, [pc, #412]	; (13b1c <vCommandConsoleTask+0x304>)
   1397e:	4798      	blx	r3
   13980:	1e03      	subs	r3, r0, #0
   13982:	d02f      	beq.n	139e4 <vCommandConsoleTask+0x1cc>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   13984:	4966      	ldr	r1, [pc, #408]	; (13b20 <vCommandConsoleTask+0x308>)
   13986:	4b5d      	ldr	r3, [pc, #372]	; (13afc <vCommandConsoleTask+0x2e4>)
   13988:	221b      	movs	r2, #27
   1398a:	0018      	movs	r0, r3
   1398c:	4b65      	ldr	r3, [pc, #404]	; (13b24 <vCommandConsoleTask+0x30c>)
   1398e:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   13990:	4b5a      	ldr	r3, [pc, #360]	; (13afc <vCommandConsoleTask+0x2e4>)
   13992:	0018      	movs	r0, r3
   13994:	4b4f      	ldr	r3, [pc, #316]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13996:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   13998:	2317      	movs	r3, #23
   1399a:	18fb      	adds	r3, r7, r3
   1399c:	2200      	movs	r2, #0
   1399e:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   139a0:	4b56      	ldr	r3, [pc, #344]	; (13afc <vCommandConsoleTask+0x2e4>)
   139a2:	2232      	movs	r2, #50	; 0x32
   139a4:	2100      	movs	r1, #0
   139a6:	0018      	movs	r0, r3
   139a8:	4b59      	ldr	r3, [pc, #356]	; (13b10 <vCommandConsoleTask+0x2f8>)
   139aa:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   139ac:	4954      	ldr	r1, [pc, #336]	; (13b00 <vCommandConsoleTask+0x2e8>)
   139ae:	4b53      	ldr	r3, [pc, #332]	; (13afc <vCommandConsoleTask+0x2e4>)
   139b0:	2231      	movs	r2, #49	; 0x31
   139b2:	0018      	movs	r0, r3
   139b4:	4b53      	ldr	r3, [pc, #332]	; (13b04 <vCommandConsoleTask+0x2ec>)
   139b6:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   139b8:	4b50      	ldr	r3, [pc, #320]	; (13afc <vCommandConsoleTask+0x2e4>)
   139ba:	0018      	movs	r0, r3
   139bc:	4b5a      	ldr	r3, [pc, #360]	; (13b28 <vCommandConsoleTask+0x310>)
   139be:	4798      	blx	r3
   139c0:	0003      	movs	r3, r0
   139c2:	2b30      	cmp	r3, #48	; 0x30
   139c4:	d806      	bhi.n	139d4 <vCommandConsoleTask+0x1bc>
   139c6:	4b4e      	ldr	r3, [pc, #312]	; (13b00 <vCommandConsoleTask+0x2e8>)
   139c8:	0018      	movs	r0, r3
   139ca:	4b57      	ldr	r3, [pc, #348]	; (13b28 <vCommandConsoleTask+0x310>)
   139cc:	4798      	blx	r3
   139ce:	0003      	movs	r3, r0
   139d0:	b2da      	uxtb	r2, r3
   139d2:	e000      	b.n	139d6 <vCommandConsoleTask+0x1be>
   139d4:	2231      	movs	r2, #49	; 0x31
   139d6:	2317      	movs	r3, #23
   139d8:	18fb      	adds	r3, r7, r3
   139da:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   139dc:	4b47      	ldr	r3, [pc, #284]	; (13afc <vCommandConsoleTask+0x2e4>)
   139de:	0018      	movs	r0, r3
   139e0:	4b3c      	ldr	r3, [pc, #240]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   139e2:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   139e4:	4b43      	ldr	r3, [pc, #268]	; (13af4 <vCommandConsoleTask+0x2dc>)
   139e6:	2200      	movs	r2, #0
   139e8:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   139ea:	4b43      	ldr	r3, [pc, #268]	; (13af8 <vCommandConsoleTask+0x2e0>)
   139ec:	2200      	movs	r2, #0
   139ee:	701a      	strb	r2, [r3, #0]
   139f0:	e75a      	b.n	138a8 <vCommandConsoleTask+0x90>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   139f2:	230c      	movs	r3, #12
   139f4:	18fb      	adds	r3, r7, r3
   139f6:	781b      	ldrb	r3, [r3, #0]
   139f8:	2b0d      	cmp	r3, #13
   139fa:	d100      	bne.n	139fe <vCommandConsoleTask+0x1e6>
   139fc:	e754      	b.n	138a8 <vCommandConsoleTask+0x90>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   139fe:	230c      	movs	r3, #12
   13a00:	18fb      	adds	r3, r7, r3
   13a02:	781b      	ldrb	r3, [r3, #0]
   13a04:	2b08      	cmp	r3, #8
   13a06:	d004      	beq.n	13a12 <vCommandConsoleTask+0x1fa>
   13a08:	230c      	movs	r3, #12
   13a0a:	18fb      	adds	r3, r7, r3
   13a0c:	781b      	ldrb	r3, [r3, #0]
   13a0e:	2b7f      	cmp	r3, #127	; 0x7f
   13a10:	d11c      	bne.n	13a4c <vCommandConsoleTask+0x234>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13a12:	2308      	movs	r3, #8
   13a14:	18fb      	adds	r3, r7, r3
   13a16:	4a45      	ldr	r2, [pc, #276]	; (13b2c <vCommandConsoleTask+0x314>)
   13a18:	6812      	ldr	r2, [r2, #0]
   13a1a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13a1c:	2308      	movs	r3, #8
   13a1e:	18fb      	adds	r3, r7, r3
   13a20:	0018      	movs	r0, r3
   13a22:	4b2c      	ldr	r3, [pc, #176]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13a24:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13a26:	2317      	movs	r3, #23
   13a28:	18fb      	adds	r3, r7, r3
   13a2a:	781b      	ldrb	r3, [r3, #0]
   13a2c:	2b00      	cmp	r3, #0
   13a2e:	d037      	beq.n	13aa0 <vCommandConsoleTask+0x288>
                    cInputIndex--;
   13a30:	2317      	movs	r3, #23
   13a32:	18fb      	adds	r3, r7, r3
   13a34:	781a      	ldrb	r2, [r3, #0]
   13a36:	2317      	movs	r3, #23
   13a38:	18fb      	adds	r3, r7, r3
   13a3a:	3a01      	subs	r2, #1
   13a3c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13a3e:	2317      	movs	r3, #23
   13a40:	18fb      	adds	r3, r7, r3
   13a42:	781b      	ldrb	r3, [r3, #0]
   13a44:	4a2d      	ldr	r2, [pc, #180]	; (13afc <vCommandConsoleTask+0x2e4>)
   13a46:	2100      	movs	r1, #0
   13a48:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a4a:	e029      	b.n	13aa0 <vCommandConsoleTask+0x288>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13a4c:	230c      	movs	r3, #12
   13a4e:	18fb      	adds	r3, r7, r3
   13a50:	781b      	ldrb	r3, [r3, #0]
   13a52:	2b1b      	cmp	r3, #27
   13a54:	d106      	bne.n	13a64 <vCommandConsoleTask+0x24c>
                isEscapeCode = true;  // Next characters will be code arguments
   13a56:	4b27      	ldr	r3, [pc, #156]	; (13af4 <vCommandConsoleTask+0x2dc>)
   13a58:	2201      	movs	r2, #1
   13a5a:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   13a5c:	4b26      	ldr	r3, [pc, #152]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13a5e:	2200      	movs	r2, #0
   13a60:	701a      	strb	r2, [r3, #0]
   13a62:	e721      	b.n	138a8 <vCommandConsoleTask+0x90>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13a64:	2317      	movs	r3, #23
   13a66:	18fb      	adds	r3, r7, r3
   13a68:	781b      	ldrb	r3, [r3, #0]
   13a6a:	2b31      	cmp	r3, #49	; 0x31
   13a6c:	d80e      	bhi.n	13a8c <vCommandConsoleTask+0x274>
                    pcInputString[cInputIndex] = cRxedChar[0];
   13a6e:	2317      	movs	r3, #23
   13a70:	18fb      	adds	r3, r7, r3
   13a72:	781b      	ldrb	r3, [r3, #0]
   13a74:	220c      	movs	r2, #12
   13a76:	18ba      	adds	r2, r7, r2
   13a78:	7811      	ldrb	r1, [r2, #0]
   13a7a:	4a20      	ldr	r2, [pc, #128]	; (13afc <vCommandConsoleTask+0x2e4>)
   13a7c:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13a7e:	2317      	movs	r3, #23
   13a80:	18fb      	adds	r3, r7, r3
   13a82:	781a      	ldrb	r2, [r3, #0]
   13a84:	2317      	movs	r3, #23
   13a86:	18fb      	adds	r3, r7, r3
   13a88:	3201      	adds	r2, #1
   13a8a:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13a8c:	230c      	movs	r3, #12
   13a8e:	18fb      	adds	r3, r7, r3
   13a90:	2200      	movs	r2, #0
   13a92:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13a94:	230c      	movs	r3, #12
   13a96:	18fb      	adds	r3, r7, r3
   13a98:	0018      	movs	r0, r3
   13a9a:	4b0e      	ldr	r3, [pc, #56]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13a9c:	4798      	blx	r3
   13a9e:	e703      	b.n	138a8 <vCommandConsoleTask+0x90>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13aa0:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13aa2:	e701      	b.n	138a8 <vCommandConsoleTask+0x90>
   13aa4:	00036998 	.word	0x00036998
   13aa8:	0001838d 	.word	0x0001838d
   13aac:	00036988 	.word	0x00036988
   13ab0:	00036a18 	.word	0x00036a18
   13ab4:	000369a8 	.word	0x000369a8
   13ab8:	000369b8 	.word	0x000369b8
   13abc:	000369c8 	.word	0x000369c8
   13ac0:	000369d8 	.word	0x000369d8
   13ac4:	000369e8 	.word	0x000369e8
   13ac8:	00036a08 	.word	0x00036a08
   13acc:	000369f8 	.word	0x000369f8
   13ad0:	000365d4 	.word	0x000365d4
   13ad4:	0001e2b5 	.word	0x0001e2b5
   13ad8:	0001a955 	.word	0x0001a955
   13adc:	200047e0 	.word	0x200047e0
   13ae0:	00036810 	.word	0x00036810
   13ae4:	0001e3a1 	.word	0x0001e3a1
   13ae8:	0001c741 	.word	0x0001c741
   13aec:	00013b31 	.word	0x00013b31
   13af0:	00036830 	.word	0x00036830
   13af4:	20000514 	.word	0x20000514
   13af8:	20000515 	.word	0x20000515
   13afc:	2000054c 	.word	0x2000054c
   13b00:	20000518 	.word	0x20000518
   13b04:	0003534b 	.word	0x0003534b
   13b08:	20000580 	.word	0x20000580
   13b0c:	000183fd 	.word	0x000183fd
   13b10:	00034f63 	.word	0x00034f63
   13b14:	200005e4 	.word	0x200005e4
   13b18:	00036834 	.word	0x00036834
   13b1c:	00035265 	.word	0x00035265
   13b20:	00036838 	.word	0x00036838
   13b24:	00035221 	.word	0x00035221
   13b28:	0003531b 	.word	0x0003531b
   13b2c:	00036840 	.word	0x00036840

00013b30 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13b30:	b580      	push	{r7, lr}
   13b32:	b084      	sub	sp, #16
   13b34:	af00      	add	r7, sp, #0
   13b36:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b38:	687b      	ldr	r3, [r7, #4]
   13b3a:	0018      	movs	r0, r3
   13b3c:	4b0c      	ldr	r3, [pc, #48]	; (13b70 <FreeRTOS_read+0x40>)
   13b3e:	4798      	blx	r3
   13b40:	0003      	movs	r3, r0
   13b42:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13b44:	e00d      	b.n	13b62 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13b46:	4b0b      	ldr	r3, [pc, #44]	; (13b74 <FreeRTOS_read+0x44>)
   13b48:	681a      	ldr	r2, [r3, #0]
   13b4a:	2301      	movs	r3, #1
   13b4c:	425b      	negs	r3, r3
   13b4e:	0019      	movs	r1, r3
   13b50:	0010      	movs	r0, r2
   13b52:	4b09      	ldr	r3, [pc, #36]	; (13b78 <FreeRTOS_read+0x48>)
   13b54:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b56:	687b      	ldr	r3, [r7, #4]
   13b58:	0018      	movs	r0, r3
   13b5a:	4b05      	ldr	r3, [pc, #20]	; (13b70 <FreeRTOS_read+0x40>)
   13b5c:	4798      	blx	r3
   13b5e:	0003      	movs	r3, r0
   13b60:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13b62:	68fb      	ldr	r3, [r7, #12]
   13b64:	3301      	adds	r3, #1
   13b66:	d0ee      	beq.n	13b46 <FreeRTOS_read+0x16>
    }
}
   13b68:	46c0      	nop			; (mov r8, r8)
   13b6a:	46bd      	mov	sp, r7
   13b6c:	b004      	add	sp, #16
   13b6e:	bd80      	pop	{r7, pc}
   13b70:	0001e351 	.word	0x0001e351
   13b74:	200047e0 	.word	0x200047e0
   13b78:	0001b90d 	.word	0x0001b90d

00013b7c <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13b7c:	b580      	push	{r7, lr}
   13b7e:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13b80:	4b0a      	ldr	r3, [pc, #40]	; (13bac <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b82:	2200      	movs	r2, #0
   13b84:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13b86:	4b0a      	ldr	r3, [pc, #40]	; (13bb0 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13b88:	681b      	ldr	r3, [r3, #0]
   13b8a:	4a08      	ldr	r2, [pc, #32]	; (13bac <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b8c:	0011      	movs	r1, r2
   13b8e:	0018      	movs	r0, r3
   13b90:	4b08      	ldr	r3, [pc, #32]	; (13bb4 <CliCharReadySemaphoreGiveFromISR+0x38>)
   13b92:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13b94:	4b05      	ldr	r3, [pc, #20]	; (13bac <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b96:	681b      	ldr	r3, [r3, #0]
   13b98:	2b00      	cmp	r3, #0
   13b9a:	d003      	beq.n	13ba4 <CliCharReadySemaphoreGiveFromISR+0x28>
   13b9c:	4b06      	ldr	r3, [pc, #24]	; (13bb8 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13b9e:	2280      	movs	r2, #128	; 0x80
   13ba0:	0552      	lsls	r2, r2, #21
   13ba2:	601a      	str	r2, [r3, #0]
}
   13ba4:	46c0      	nop			; (mov r8, r8)
   13ba6:	46bd      	mov	sp, r7
   13ba8:	bd80      	pop	{r7, pc}
   13baa:	46c0      	nop			; (mov r8, r8)
   13bac:	200005e8 	.word	0x200005e8
   13bb0:	200047e0 	.word	0x200047e0
   13bb4:	0001b285 	.word	0x0001b285
   13bb8:	e000ed04 	.word	0xe000ed04

00013bbc <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13bbc:	b5b0      	push	{r4, r5, r7, lr}
   13bbe:	b088      	sub	sp, #32
   13bc0:	af02      	add	r7, sp, #8
   13bc2:	60f8      	str	r0, [r7, #12]
   13bc4:	60b9      	str	r1, [r7, #8]
   13bc6:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   13bc8:	4b2e      	ldr	r3, [pc, #184]	; (13c84 <CLI_GetImuData+0xc8>)
   13bca:	4798      	blx	r3
   13bcc:	0003      	movs	r3, r0
   13bce:	617b      	str	r3, [r7, #20]

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   13bd0:	2313      	movs	r3, #19
   13bd2:	18fa      	adds	r2, r7, r3
   13bd4:	697b      	ldr	r3, [r7, #20]
   13bd6:	0011      	movs	r1, r2
   13bd8:	0018      	movs	r0, r3
   13bda:	4b2b      	ldr	r3, [pc, #172]	; (13c88 <CLI_GetImuData+0xcc>)
   13bdc:	4798      	blx	r3

    if (reg) {
   13bde:	2313      	movs	r3, #19
   13be0:	18fb      	adds	r3, r7, r3
   13be2:	781b      	ldrb	r3, [r3, #0]
   13be4:	2b00      	cmp	r3, #0
   13be6:	d041      	beq.n	13c6c <CLI_GetImuData+0xb0>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   13be8:	4b28      	ldr	r3, [pc, #160]	; (13c8c <CLI_GetImuData+0xd0>)
   13bea:	2206      	movs	r2, #6
   13bec:	2100      	movs	r1, #0
   13bee:	0018      	movs	r0, r3
   13bf0:	4b27      	ldr	r3, [pc, #156]	; (13c90 <CLI_GetImuData+0xd4>)
   13bf2:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13bf4:	4a25      	ldr	r2, [pc, #148]	; (13c8c <CLI_GetImuData+0xd0>)
   13bf6:	697b      	ldr	r3, [r7, #20]
   13bf8:	0011      	movs	r1, r2
   13bfa:	0018      	movs	r0, r3
   13bfc:	4b25      	ldr	r3, [pc, #148]	; (13c94 <CLI_GetImuData+0xd8>)
   13bfe:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   13c00:	4b22      	ldr	r3, [pc, #136]	; (13c8c <CLI_GetImuData+0xd0>)
   13c02:	2200      	movs	r2, #0
   13c04:	5e9b      	ldrsh	r3, [r3, r2]
   13c06:	0018      	movs	r0, r3
   13c08:	4b23      	ldr	r3, [pc, #140]	; (13c98 <CLI_GetImuData+0xdc>)
   13c0a:	4798      	blx	r3
   13c0c:	1c02      	adds	r2, r0, #0
   13c0e:	4b23      	ldr	r3, [pc, #140]	; (13c9c <CLI_GetImuData+0xe0>)
   13c10:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   13c12:	4b1e      	ldr	r3, [pc, #120]	; (13c8c <CLI_GetImuData+0xd0>)
   13c14:	2202      	movs	r2, #2
   13c16:	5e9b      	ldrsh	r3, [r3, r2]
   13c18:	0018      	movs	r0, r3
   13c1a:	4b1f      	ldr	r3, [pc, #124]	; (13c98 <CLI_GetImuData+0xdc>)
   13c1c:	4798      	blx	r3
   13c1e:	1c02      	adds	r2, r0, #0
   13c20:	4b1e      	ldr	r3, [pc, #120]	; (13c9c <CLI_GetImuData+0xe0>)
   13c22:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13c24:	4b19      	ldr	r3, [pc, #100]	; (13c8c <CLI_GetImuData+0xd0>)
   13c26:	2204      	movs	r2, #4
   13c28:	5e9b      	ldrsh	r3, [r3, r2]
   13c2a:	0018      	movs	r0, r3
   13c2c:	4b1a      	ldr	r3, [pc, #104]	; (13c98 <CLI_GetImuData+0xdc>)
   13c2e:	4798      	blx	r3
   13c30:	1c02      	adds	r2, r0, #0
   13c32:	4b1a      	ldr	r3, [pc, #104]	; (13c9c <CLI_GetImuData+0xe0>)
   13c34:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   13c36:	4b19      	ldr	r3, [pc, #100]	; (13c9c <CLI_GetImuData+0xe0>)
   13c38:	681a      	ldr	r2, [r3, #0]
   13c3a:	4b19      	ldr	r3, [pc, #100]	; (13ca0 <CLI_GetImuData+0xe4>)
   13c3c:	1c10      	adds	r0, r2, #0
   13c3e:	4798      	blx	r3
   13c40:	0005      	movs	r5, r0
   13c42:	4b16      	ldr	r3, [pc, #88]	; (13c9c <CLI_GetImuData+0xe0>)
   13c44:	685a      	ldr	r2, [r3, #4]
   13c46:	4b16      	ldr	r3, [pc, #88]	; (13ca0 <CLI_GetImuData+0xe4>)
   13c48:	1c10      	adds	r0, r2, #0
   13c4a:	4798      	blx	r3
   13c4c:	0004      	movs	r4, r0
   13c4e:	4b13      	ldr	r3, [pc, #76]	; (13c9c <CLI_GetImuData+0xe0>)
   13c50:	689a      	ldr	r2, [r3, #8]
   13c52:	4b13      	ldr	r3, [pc, #76]	; (13ca0 <CLI_GetImuData+0xe4>)
   13c54:	1c10      	adds	r0, r2, #0
   13c56:	4798      	blx	r3
   13c58:	0003      	movs	r3, r0
   13c5a:	4a12      	ldr	r2, [pc, #72]	; (13ca4 <CLI_GetImuData+0xe8>)
   13c5c:	68b9      	ldr	r1, [r7, #8]
   13c5e:	68f8      	ldr	r0, [r7, #12]
   13c60:	9301      	str	r3, [sp, #4]
   13c62:	9400      	str	r4, [sp, #0]
   13c64:	002b      	movs	r3, r5
   13c66:	4c10      	ldr	r4, [pc, #64]	; (13ca8 <CLI_GetImuData+0xec>)
   13c68:	47a0      	blx	r4
   13c6a:	e005      	b.n	13c78 <CLI_GetImuData+0xbc>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! \r\n");
   13c6c:	4a0f      	ldr	r2, [pc, #60]	; (13cac <CLI_GetImuData+0xf0>)
   13c6e:	68b9      	ldr	r1, [r7, #8]
   13c70:	68fb      	ldr	r3, [r7, #12]
   13c72:	0018      	movs	r0, r3
   13c74:	4b0c      	ldr	r3, [pc, #48]	; (13ca8 <CLI_GetImuData+0xec>)
   13c76:	4798      	blx	r3
    }
    return pdFALSE;
   13c78:	2300      	movs	r3, #0
}
   13c7a:	0018      	movs	r0, r3
   13c7c:	46bd      	mov	sp, r7
   13c7e:	b006      	add	sp, #24
   13c80:	bdb0      	pop	{r4, r5, r7, pc}
   13c82:	46c0      	nop			; (mov r8, r8)
   13c84:	000158d5 	.word	0x000158d5
   13c88:	00015381 	.word	0x00015381
   13c8c:	200005ec 	.word	0x200005ec
   13c90:	00034f63 	.word	0x00034f63
   13c94:	000153bd 	.word	0x000153bd
   13c98:	00014c11 	.word	0x00014c11
   13c9c:	200005f4 	.word	0x200005f4
   13ca0:	00033509 	.word	0x00033509
   13ca4:	00036844 	.word	0x00036844
   13ca8:	000351bd 	.word	0x000351bd
   13cac:	00036868 	.word	0x00036868

00013cb0 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13cb0:	b590      	push	{r4, r7, lr}
   13cb2:	b087      	sub	sp, #28
   13cb4:	af00      	add	r7, sp, #0
   13cb6:	60f8      	str	r0, [r7, #12]
   13cb8:	60b9      	str	r1, [r7, #8]
   13cba:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13cbc:	2317      	movs	r3, #23
   13cbe:	18fb      	adds	r3, r7, r3
   13cc0:	221b      	movs	r2, #27
   13cc2:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13cc4:	2317      	movs	r3, #23
   13cc6:	18fb      	adds	r3, r7, r3
   13cc8:	781b      	ldrb	r3, [r3, #0]
   13cca:	4a08      	ldr	r2, [pc, #32]	; (13cec <xCliClearTerminalScreen+0x3c>)
   13ccc:	4808      	ldr	r0, [pc, #32]	; (13cf0 <xCliClearTerminalScreen+0x40>)
   13cce:	210f      	movs	r1, #15
   13cd0:	4c08      	ldr	r4, [pc, #32]	; (13cf4 <xCliClearTerminalScreen+0x44>)
   13cd2:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13cd4:	4a06      	ldr	r2, [pc, #24]	; (13cf0 <xCliClearTerminalScreen+0x40>)
   13cd6:	68b9      	ldr	r1, [r7, #8]
   13cd8:	68fb      	ldr	r3, [r7, #12]
   13cda:	0018      	movs	r0, r3
   13cdc:	4b05      	ldr	r3, [pc, #20]	; (13cf4 <xCliClearTerminalScreen+0x44>)
   13cde:	4798      	blx	r3
    return pdFALSE;
   13ce0:	2300      	movs	r3, #0
}
   13ce2:	0018      	movs	r0, r3
   13ce4:	46bd      	mov	sp, r7
   13ce6:	b007      	add	sp, #28
   13ce8:	bd90      	pop	{r4, r7, pc}
   13cea:	46c0      	nop			; (mov r8, r8)
   13cec:	0003687c 	.word	0x0003687c
   13cf0:	20000504 	.word	0x20000504
   13cf4:	000351bd 	.word	0x000351bd

00013cf8 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13cf8:	b580      	push	{r7, lr}
   13cfa:	b084      	sub	sp, #16
   13cfc:	af00      	add	r7, sp, #0
   13cfe:	60f8      	str	r0, [r7, #12]
   13d00:	60b9      	str	r1, [r7, #8]
   13d02:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13d04:	2002      	movs	r0, #2
   13d06:	4b03      	ldr	r3, [pc, #12]	; (13d14 <CLI_OTAU+0x1c>)
   13d08:	4798      	blx	r3

    return pdFALSE;
   13d0a:	2300      	movs	r3, #0
}
   13d0c:	0018      	movs	r0, r3
   13d0e:	46bd      	mov	sp, r7
   13d10:	b004      	add	sp, #16
   13d12:	bd80      	pop	{r7, pc}
   13d14:	00017971 	.word	0x00017971

00013d18 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d18:	b580      	push	{r7, lr}
   13d1a:	b084      	sub	sp, #16
   13d1c:	af00      	add	r7, sp, #0
   13d1e:	60f8      	str	r0, [r7, #12]
   13d20:	60b9      	str	r1, [r7, #8]
   13d22:	607a      	str	r2, [r7, #4]
    system_reset();
   13d24:	4b03      	ldr	r3, [pc, #12]	; (13d34 <CLI_ResetDevice+0x1c>)
   13d26:	4798      	blx	r3
    return pdFALSE;
   13d28:	2300      	movs	r3, #0
}
   13d2a:	0018      	movs	r0, r3
   13d2c:	46bd      	mov	sp, r7
   13d2e:	b004      	add	sp, #16
   13d30:	bd80      	pop	{r7, pc}
   13d32:	46c0      	nop			; (mov r8, r8)
   13d34:	00013805 	.word	0x00013805

00013d38 <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d38:	b580      	push	{r7, lr}
   13d3a:	b084      	sub	sp, #16
   13d3c:	af00      	add	r7, sp, #0
   13d3e:	60f8      	str	r0, [r7, #12]
   13d40:	60b9      	str	r1, [r7, #8]
   13d42:	607a      	str	r2, [r7, #4]
    snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Students to fill out!");
   13d44:	4a05      	ldr	r2, [pc, #20]	; (13d5c <CLI_NeotrellisSetLed+0x24>)
   13d46:	68b9      	ldr	r1, [r7, #8]
   13d48:	68fb      	ldr	r3, [r7, #12]
   13d4a:	0018      	movs	r0, r3
   13d4c:	4b04      	ldr	r3, [pc, #16]	; (13d60 <CLI_NeotrellisSetLed+0x28>)
   13d4e:	4798      	blx	r3
    // Check code SeesawSetLed and SeesawSetLed
    // How do you get parameters? Checl link in comments!
    // Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
    // return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
    // This function expects 4 arguments inside pcCommandString: key, R, G, B.
    return pdFALSE;
   13d50:	2300      	movs	r3, #0
}
   13d52:	0018      	movs	r0, r3
   13d54:	46bd      	mov	sp, r7
   13d56:	b004      	add	sp, #16
   13d58:	bd80      	pop	{r7, pc}
   13d5a:	46c0      	nop			; (mov r8, r8)
   13d5c:	00036884 	.word	0x00036884
   13d60:	000351bd 	.word	0x000351bd

00013d64 <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d64:	b590      	push	{r4, r7, lr}
   13d66:	b099      	sub	sp, #100	; 0x64
   13d68:	af00      	add	r7, sp, #0
   13d6a:	60f8      	str	r0, [r7, #12]
   13d6c:	60b9      	str	r1, [r7, #8]
   13d6e:	607a      	str	r2, [r7, #4]
    // snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
    // Print to pcWriteBuffer in order.
    // If the string is too long to print, print what you can.
    // The function you write will be useful in the future.
    uint8_t buffer[64];
    uint8_t count = SeesawGetKeypadCount();
   13d70:	235f      	movs	r3, #95	; 0x5f
   13d72:	18fc      	adds	r4, r7, r3
   13d74:	4b36      	ldr	r3, [pc, #216]	; (13e50 <CLI_NeotrellProcessButtonBuffer+0xec>)
   13d76:	4798      	blx	r3
   13d78:	0003      	movs	r3, r0
   13d7a:	7023      	strb	r3, [r4, #0]
    if (count >= 1) {
   13d7c:	235f      	movs	r3, #95	; 0x5f
   13d7e:	18fb      	adds	r3, r7, r3
   13d80:	781b      	ldrb	r3, [r3, #0]
   13d82:	2b00      	cmp	r3, #0
   13d84:	d05d      	beq.n	13e42 <CLI_NeotrellProcessButtonBuffer+0xde>
        int32_t res = SeesawReadKeypad(buffer, 1);
   13d86:	2310      	movs	r3, #16
   13d88:	18fb      	adds	r3, r7, r3
   13d8a:	2101      	movs	r1, #1
   13d8c:	0018      	movs	r0, r3
   13d8e:	4b31      	ldr	r3, [pc, #196]	; (13e54 <CLI_NeotrellProcessButtonBuffer+0xf0>)
   13d90:	4798      	blx	r3
   13d92:	0003      	movs	r3, r0
   13d94:	65bb      	str	r3, [r7, #88]	; 0x58
        if (res == 0) {
   13d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13d98:	2b00      	cmp	r3, #0
   13d9a:	d150      	bne.n	13e3e <CLI_NeotrellProcessButtonBuffer+0xda>
            uint8_t pos, press;
            press = buffer[0] & 0x3;
   13d9c:	2310      	movs	r3, #16
   13d9e:	18fb      	adds	r3, r7, r3
   13da0:	781a      	ldrb	r2, [r3, #0]
   13da2:	2357      	movs	r3, #87	; 0x57
   13da4:	18fb      	adds	r3, r7, r3
   13da6:	2103      	movs	r1, #3
   13da8:	400a      	ands	r2, r1
   13daa:	701a      	strb	r2, [r3, #0]
            pos = buffer[0] >> 2;
   13dac:	2310      	movs	r3, #16
   13dae:	18fb      	adds	r3, r7, r3
   13db0:	781a      	ldrb	r2, [r3, #0]
   13db2:	2356      	movs	r3, #86	; 0x56
   13db4:	18fb      	adds	r3, r7, r3
   13db6:	0892      	lsrs	r2, r2, #2
   13db8:	701a      	strb	r2, [r3, #0]
            int num = NEO_TRELLIS_SEESAW_KEY(pos);
   13dba:	2356      	movs	r3, #86	; 0x56
   13dbc:	18fb      	adds	r3, r7, r3
   13dbe:	781b      	ldrb	r3, [r3, #0]
   13dc0:	08db      	lsrs	r3, r3, #3
   13dc2:	b2db      	uxtb	r3, r3
   13dc4:	009a      	lsls	r2, r3, #2
   13dc6:	2356      	movs	r3, #86	; 0x56
   13dc8:	18fb      	adds	r3, r7, r3
   13dca:	781b      	ldrb	r3, [r3, #0]
   13dcc:	2107      	movs	r1, #7
   13dce:	400b      	ands	r3, r1
   13dd0:	18d3      	adds	r3, r2, r3
   13dd2:	653b      	str	r3, [r7, #80]	; 0x50
            if (press == 0x2) {
   13dd4:	2357      	movs	r3, #87	; 0x57
   13dd6:	18fb      	adds	r3, r7, r3
   13dd8:	781b      	ldrb	r3, [r3, #0]
   13dda:	2b02      	cmp	r3, #2
   13ddc:	d115      	bne.n	13e0a <CLI_NeotrellProcessButtonBuffer+0xa6>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   13dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13de0:	2b00      	cmp	r3, #0
   13de2:	da00      	bge.n	13de6 <CLI_NeotrellProcessButtonBuffer+0x82>
   13de4:	3307      	adds	r3, #7
   13de6:	10db      	asrs	r3, r3, #3
   13de8:	009a      	lsls	r2, r3, #2
   13dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13dec:	491a      	ldr	r1, [pc, #104]	; (13e58 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13dee:	400b      	ands	r3, r1
   13df0:	d504      	bpl.n	13dfc <CLI_NeotrellProcessButtonBuffer+0x98>
   13df2:	3b01      	subs	r3, #1
   13df4:	2108      	movs	r1, #8
   13df6:	4249      	negs	r1, r1
   13df8:	430b      	orrs	r3, r1
   13dfa:	3301      	adds	r3, #1
   13dfc:	18d3      	adds	r3, r2, r3
   13dfe:	4a17      	ldr	r2, [pc, #92]	; (13e5c <CLI_NeotrellProcessButtonBuffer+0xf8>)
   13e00:	68b9      	ldr	r1, [r7, #8]
   13e02:	68f8      	ldr	r0, [r7, #12]
   13e04:	4c16      	ldr	r4, [pc, #88]	; (13e60 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13e06:	47a0      	blx	r4
   13e08:	e019      	b.n	13e3e <CLI_NeotrellProcessButtonBuffer+0xda>
            } else if (press == 0x3) {
   13e0a:	2357      	movs	r3, #87	; 0x57
   13e0c:	18fb      	adds	r3, r7, r3
   13e0e:	781b      	ldrb	r3, [r3, #0]
   13e10:	2b03      	cmp	r3, #3
   13e12:	d114      	bne.n	13e3e <CLI_NeotrellProcessButtonBuffer+0xda>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   13e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e16:	2b00      	cmp	r3, #0
   13e18:	da00      	bge.n	13e1c <CLI_NeotrellProcessButtonBuffer+0xb8>
   13e1a:	3307      	adds	r3, #7
   13e1c:	10db      	asrs	r3, r3, #3
   13e1e:	009a      	lsls	r2, r3, #2
   13e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e22:	490d      	ldr	r1, [pc, #52]	; (13e58 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13e24:	400b      	ands	r3, r1
   13e26:	d504      	bpl.n	13e32 <CLI_NeotrellProcessButtonBuffer+0xce>
   13e28:	3b01      	subs	r3, #1
   13e2a:	2108      	movs	r1, #8
   13e2c:	4249      	negs	r1, r1
   13e2e:	430b      	orrs	r3, r1
   13e30:	3301      	adds	r3, #1
   13e32:	18d3      	adds	r3, r2, r3
   13e34:	4a0b      	ldr	r2, [pc, #44]	; (13e64 <CLI_NeotrellProcessButtonBuffer+0x100>)
   13e36:	68b9      	ldr	r1, [r7, #8]
   13e38:	68f8      	ldr	r0, [r7, #12]
   13e3a:	4c09      	ldr	r4, [pc, #36]	; (13e60 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13e3c:	47a0      	blx	r4
            }
        }
        return pdTRUE;
   13e3e:	2301      	movs	r3, #1
   13e40:	e002      	b.n	13e48 <CLI_NeotrellProcessButtonBuffer+0xe4>
    } else {
        pcWriteBuffer = 0;
   13e42:	2300      	movs	r3, #0
   13e44:	60fb      	str	r3, [r7, #12]
        return pdFALSE;
   13e46:	2300      	movs	r3, #0
    }
}
   13e48:	0018      	movs	r0, r3
   13e4a:	46bd      	mov	sp, r7
   13e4c:	b019      	add	sp, #100	; 0x64
   13e4e:	bd90      	pop	{r4, r7, pc}
   13e50:	00015ad5 	.word	0x00015ad5
   13e54:	00015b3d 	.word	0x00015b3d
   13e58:	80000007 	.word	0x80000007
   13e5c:	0003689c 	.word	0x0003689c
   13e60:	000351bd 	.word	0x000351bd
   13e64:	000368b8 	.word	0x000368b8

00013e68 <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13e68:	b590      	push	{r4, r7, lr}
   13e6a:	b087      	sub	sp, #28
   13e6c:	af00      	add	r7, sp, #0
   13e6e:	60f8      	str	r0, [r7, #12]
   13e70:	60b9      	str	r1, [r7, #8]
   13e72:	607a      	str	r2, [r7, #4]
    uint16_t distance = 0;
   13e74:	2312      	movs	r3, #18
   13e76:	18fb      	adds	r3, r7, r3
   13e78:	2200      	movs	r2, #0
   13e7a:	801a      	strh	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
   13e7c:	2312      	movs	r3, #18
   13e7e:	18fb      	adds	r3, r7, r3
   13e80:	2164      	movs	r1, #100	; 0x64
   13e82:	0018      	movs	r0, r3
   13e84:	4b19      	ldr	r3, [pc, #100]	; (13eec <CLI_DistanceSensorGetDistance+0x84>)
   13e86:	4798      	blx	r3
   13e88:	0003      	movs	r3, r0
   13e8a:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   13e8c:	697b      	ldr	r3, [r7, #20]
   13e8e:	2b00      	cmp	r3, #0
   13e90:	d006      	beq.n	13ea0 <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   13e92:	697b      	ldr	r3, [r7, #20]
   13e94:	4a16      	ldr	r2, [pc, #88]	; (13ef0 <CLI_DistanceSensorGetDistance+0x88>)
   13e96:	68b9      	ldr	r1, [r7, #8]
   13e98:	68f8      	ldr	r0, [r7, #12]
   13e9a:	4c16      	ldr	r4, [pc, #88]	; (13ef4 <CLI_DistanceSensorGetDistance+0x8c>)
   13e9c:	47a0      	blx	r4
   13e9e:	e007      	b.n	13eb0 <CLI_DistanceSensorGetDistance+0x48>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
   13ea0:	2312      	movs	r3, #18
   13ea2:	18fb      	adds	r3, r7, r3
   13ea4:	881b      	ldrh	r3, [r3, #0]
   13ea6:	4a14      	ldr	r2, [pc, #80]	; (13ef8 <CLI_DistanceSensorGetDistance+0x90>)
   13ea8:	68b9      	ldr	r1, [r7, #8]
   13eaa:	68f8      	ldr	r0, [r7, #12]
   13eac:	4c11      	ldr	r4, [pc, #68]	; (13ef4 <CLI_DistanceSensorGetDistance+0x8c>)
   13eae:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
   13eb0:	2312      	movs	r3, #18
   13eb2:	18fb      	adds	r3, r7, r3
   13eb4:	0018      	movs	r0, r3
   13eb6:	4b11      	ldr	r3, [pc, #68]	; (13efc <CLI_DistanceSensorGetDistance+0x94>)
   13eb8:	4798      	blx	r3
   13eba:	0003      	movs	r3, r0
   13ebc:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   13ebe:	697b      	ldr	r3, [r7, #20]
   13ec0:	2b01      	cmp	r3, #1
   13ec2:	d10e      	bne.n	13ee2 <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   13ec4:	68fb      	ldr	r3, [r7, #12]
   13ec6:	0018      	movs	r0, r3
   13ec8:	4b0d      	ldr	r3, [pc, #52]	; (13f00 <CLI_DistanceSensorGetDistance+0x98>)
   13eca:	4798      	blx	r3
   13ecc:	0003      	movs	r3, r0
   13ece:	001a      	movs	r2, r3
   13ed0:	68fb      	ldr	r3, [r7, #12]
   13ed2:	189a      	adds	r2, r3, r2
   13ed4:	4b0b      	ldr	r3, [pc, #44]	; (13f04 <CLI_DistanceSensorGetDistance+0x9c>)
   13ed6:	0010      	movs	r0, r2
   13ed8:	0019      	movs	r1, r3
   13eda:	231a      	movs	r3, #26
   13edc:	001a      	movs	r2, r3
   13ede:	4b0a      	ldr	r3, [pc, #40]	; (13f08 <CLI_DistanceSensorGetDistance+0xa0>)
   13ee0:	4798      	blx	r3
    }
    return pdFALSE;
   13ee2:	2300      	movs	r3, #0
}
   13ee4:	0018      	movs	r0, r3
   13ee6:	46bd      	mov	sp, r7
   13ee8:	b007      	add	sp, #28
   13eea:	bd90      	pop	{r4, r7, pc}
   13eec:	00014265 	.word	0x00014265
   13ef0:	000368d0 	.word	0x000368d0
   13ef4:	000351bd 	.word	0x000351bd
   13ef8:	000368e4 	.word	0x000368e4
   13efc:	000179a5 	.word	0x000179a5
   13f00:	0003531b 	.word	0x0003531b
   13f04:	000368f8 	.word	0x000368f8
   13f08:	00034f2d 	.word	0x00034f2d

00013f0c <CLI_SendDummyGameData>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_SendDummyGameData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13f0c:	b580      	push	{r7, lr}
   13f0e:	b08a      	sub	sp, #40	; 0x28
   13f10:	af00      	add	r7, sp, #0
   13f12:	60f8      	str	r0, [r7, #12]
   13f14:	60b9      	str	r1, [r7, #8]
   13f16:	607a      	str	r2, [r7, #4]
    struct GameDataPacket gamevar;

    gamevar.game[0] = 0;
   13f18:	2310      	movs	r3, #16
   13f1a:	18fb      	adds	r3, r7, r3
   13f1c:	2200      	movs	r2, #0
   13f1e:	701a      	strb	r2, [r3, #0]
    gamevar.game[1] = 1;
   13f20:	2310      	movs	r3, #16
   13f22:	18fb      	adds	r3, r7, r3
   13f24:	2201      	movs	r2, #1
   13f26:	705a      	strb	r2, [r3, #1]
    gamevar.game[2] = 2;
   13f28:	2310      	movs	r3, #16
   13f2a:	18fb      	adds	r3, r7, r3
   13f2c:	2202      	movs	r2, #2
   13f2e:	709a      	strb	r2, [r3, #2]
    gamevar.game[3] = 3;
   13f30:	2310      	movs	r3, #16
   13f32:	18fb      	adds	r3, r7, r3
   13f34:	2203      	movs	r2, #3
   13f36:	70da      	strb	r2, [r3, #3]
    gamevar.game[4] = 4;
   13f38:	2310      	movs	r3, #16
   13f3a:	18fb      	adds	r3, r7, r3
   13f3c:	2204      	movs	r2, #4
   13f3e:	711a      	strb	r2, [r3, #4]
    gamevar.game[5] = 5;
   13f40:	2310      	movs	r3, #16
   13f42:	18fb      	adds	r3, r7, r3
   13f44:	2205      	movs	r2, #5
   13f46:	715a      	strb	r2, [r3, #5]
    gamevar.game[6] = 6;
   13f48:	2310      	movs	r3, #16
   13f4a:	18fb      	adds	r3, r7, r3
   13f4c:	2206      	movs	r2, #6
   13f4e:	719a      	strb	r2, [r3, #6]
    gamevar.game[7] = 7;
   13f50:	2310      	movs	r3, #16
   13f52:	18fb      	adds	r3, r7, r3
   13f54:	2207      	movs	r2, #7
   13f56:	71da      	strb	r2, [r3, #7]
    gamevar.game[8] = 8;
   13f58:	2310      	movs	r3, #16
   13f5a:	18fb      	adds	r3, r7, r3
   13f5c:	2208      	movs	r2, #8
   13f5e:	721a      	strb	r2, [r3, #8]
    gamevar.game[9] = 9;
   13f60:	2310      	movs	r3, #16
   13f62:	18fb      	adds	r3, r7, r3
   13f64:	2209      	movs	r2, #9
   13f66:	725a      	strb	r2, [r3, #9]
    gamevar.game[10] = 0xFF;
   13f68:	2310      	movs	r3, #16
   13f6a:	18fb      	adds	r3, r7, r3
   13f6c:	22ff      	movs	r2, #255	; 0xff
   13f6e:	729a      	strb	r2, [r3, #10]

    int error = WifiAddGameDataToQueue(&gamevar);
   13f70:	2310      	movs	r3, #16
   13f72:	18fb      	adds	r3, r7, r3
   13f74:	0018      	movs	r0, r3
   13f76:	4b09      	ldr	r3, [pc, #36]	; (13f9c <CLI_SendDummyGameData+0x90>)
   13f78:	4798      	blx	r3
   13f7a:	0003      	movs	r3, r0
   13f7c:	627b      	str	r3, [r7, #36]	; 0x24
    if (error == pdTRUE) {
   13f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13f80:	2b01      	cmp	r3, #1
   13f82:	d105      	bne.n	13f90 <CLI_SendDummyGameData+0x84>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   13f84:	4a06      	ldr	r2, [pc, #24]	; (13fa0 <CLI_SendDummyGameData+0x94>)
   13f86:	68b9      	ldr	r1, [r7, #8]
   13f88:	68fb      	ldr	r3, [r7, #12]
   13f8a:	0018      	movs	r0, r3
   13f8c:	4b05      	ldr	r3, [pc, #20]	; (13fa4 <CLI_SendDummyGameData+0x98>)
   13f8e:	4798      	blx	r3
    }
    return pdFALSE;
   13f90:	2300      	movs	r3, #0
}
   13f92:	0018      	movs	r0, r3
   13f94:	46bd      	mov	sp, r7
   13f96:	b00a      	add	sp, #40	; 0x28
   13f98:	bd80      	pop	{r7, pc}
   13f9a:	46c0      	nop			; (mov r8, r8)
   13f9c:	000179d1 	.word	0x000179d1
   13fa0:	00036914 	.word	0x00036914
   13fa4:	000351bd 	.word	0x000351bd

00013fa8 <CLI_SendTestData>:

BaseType_t CLI_SendTestData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13fa8:	b580      	push	{r7, lr}
   13faa:	b086      	sub	sp, #24
   13fac:	af00      	add	r7, sp, #0
   13fae:	60f8      	str	r0, [r7, #12]
   13fb0:	60b9      	str	r1, [r7, #8]
   13fb2:	607a      	str	r2, [r7, #4]
	struct TestPacket testvar;

	testvar.test = 6;
   13fb4:	2310      	movs	r3, #16
   13fb6:	18fb      	adds	r3, r7, r3
   13fb8:	2206      	movs	r2, #6
   13fba:	701a      	strb	r2, [r3, #0]

	int error = WifiAddTestDataToQueue(&testvar);
   13fbc:	2310      	movs	r3, #16
   13fbe:	18fb      	adds	r3, r7, r3
   13fc0:	0018      	movs	r0, r3
   13fc2:	4b09      	ldr	r3, [pc, #36]	; (13fe8 <CLI_SendTestData+0x40>)
   13fc4:	4798      	blx	r3
   13fc6:	0003      	movs	r3, r0
   13fc8:	617b      	str	r3, [r7, #20]
	if (error == pdTRUE) {
   13fca:	697b      	ldr	r3, [r7, #20]
   13fcc:	2b01      	cmp	r3, #1
   13fce:	d105      	bne.n	13fdc <CLI_SendTestData+0x34>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Test Data MQTT Post\r\n");
   13fd0:	4a06      	ldr	r2, [pc, #24]	; (13fec <CLI_SendTestData+0x44>)
   13fd2:	68b9      	ldr	r1, [r7, #8]
   13fd4:	68fb      	ldr	r3, [r7, #12]
   13fd6:	0018      	movs	r0, r3
   13fd8:	4b05      	ldr	r3, [pc, #20]	; (13ff0 <CLI_SendTestData+0x48>)
   13fda:	4798      	blx	r3
	}
	return pdFALSE;
   13fdc:	2300      	movs	r3, #0
}
   13fde:	0018      	movs	r0, r3
   13fe0:	46bd      	mov	sp, r7
   13fe2:	b006      	add	sp, #24
   13fe4:	bd80      	pop	{r7, pc}
   13fe6:	46c0      	nop			; (mov r8, r8)
   13fe8:	000179fd 	.word	0x000179fd
   13fec:	00036930 	.word	0x00036930
   13ff0:	000351bd 	.word	0x000351bd

00013ff4 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13ff4:	b590      	push	{r4, r7, lr}
   13ff6:	b08f      	sub	sp, #60	; 0x3c
   13ff8:	af00      	add	r7, sp, #0
   13ffa:	60f8      	str	r0, [r7, #12]
   13ffc:	60b9      	str	r1, [r7, #8]
   13ffe:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   14000:	2318      	movs	r3, #24
   14002:	18fb      	adds	r3, r7, r3
   14004:	2200      	movs	r2, #0
   14006:	701a      	strb	r2, [r3, #0]
   14008:	2318      	movs	r3, #24
   1400a:	18fb      	adds	r3, r7, r3
   1400c:	2200      	movs	r2, #0
   1400e:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   14010:	2318      	movs	r3, #24
   14012:	18fb      	adds	r3, r7, r3
   14014:	2200      	movs	r2, #0
   14016:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   14018:	2318      	movs	r3, #24
   1401a:	18fb      	adds	r3, r7, r3
   1401c:	2200      	movs	r2, #0
   1401e:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   14020:	231c      	movs	r3, #28
   14022:	18fb      	adds	r3, r7, r3
   14024:	2200      	movs	r2, #0
   14026:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   14028:	231c      	movs	r3, #28
   1402a:	18fb      	adds	r3, r7, r3
   1402c:	2214      	movs	r2, #20
   1402e:	18ba      	adds	r2, r7, r2
   14030:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   14032:	231c      	movs	r3, #28
   14034:	18fb      	adds	r3, r7, r3
   14036:	2201      	movs	r2, #1
   14038:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   1403a:	231c      	movs	r3, #28
   1403c:	18fb      	adds	r3, r7, r3
   1403e:	2218      	movs	r2, #24
   14040:	18ba      	adds	r2, r7, r2
   14042:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   14044:	231c      	movs	r3, #28
   14046:	18fb      	adds	r3, r7, r3
   14048:	2201      	movs	r2, #1
   1404a:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   1404c:	4b2c      	ldr	r3, [pc, #176]	; (14100 <CLI_i2cScan+0x10c>)
   1404e:	0018      	movs	r0, r3
   14050:	4b2c      	ldr	r3, [pc, #176]	; (14104 <CLI_i2cScan+0x110>)
   14052:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   14054:	2300      	movs	r3, #0
   14056:	637b      	str	r3, [r7, #52]	; 0x34
   14058:	e046      	b.n	140e8 <CLI_i2cScan+0xf4>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   1405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1405c:	4a2a      	ldr	r2, [pc, #168]	; (14108 <CLI_i2cScan+0x114>)
   1405e:	482b      	ldr	r0, [pc, #172]	; (1410c <CLI_i2cScan+0x118>)
   14060:	210f      	movs	r1, #15
   14062:	4c2b      	ldr	r4, [pc, #172]	; (14110 <CLI_i2cScan+0x11c>)
   14064:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   14066:	4b29      	ldr	r3, [pc, #164]	; (1410c <CLI_i2cScan+0x118>)
   14068:	0018      	movs	r0, r3
   1406a:	4b26      	ldr	r3, [pc, #152]	; (14104 <CLI_i2cScan+0x110>)
   1406c:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   1406e:	2300      	movs	r3, #0
   14070:	633b      	str	r3, [r7, #48]	; 0x30
   14072:	e02f      	b.n	140d4 <CLI_i2cScan+0xe0>
                {

                    i2cOled.address = (i + j) << 1;
   14074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14076:	b2da      	uxtb	r2, r3
   14078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1407a:	b2db      	uxtb	r3, r3
   1407c:	18d3      	adds	r3, r2, r3
   1407e:	b2db      	uxtb	r3, r3
   14080:	18db      	adds	r3, r3, r3
   14082:	b2da      	uxtb	r2, r3
   14084:	231c      	movs	r3, #28
   14086:	18fb      	adds	r3, r7, r3
   14088:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cWriteDataWait(&i2cOled, 100);
   1408a:	231c      	movs	r3, #28
   1408c:	18fb      	adds	r3, r7, r3
   1408e:	2164      	movs	r1, #100	; 0x64
   14090:	0018      	movs	r0, r3
   14092:	4b20      	ldr	r3, [pc, #128]	; (14114 <CLI_i2cScan+0x120>)
   14094:	4798      	blx	r3
   14096:	0003      	movs	r3, r0
   14098:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   1409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1409c:	2b00      	cmp	r3, #0
   1409e:	d10c      	bne.n	140ba <CLI_i2cScan+0xc6>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cOled.address);
   140a0:	231c      	movs	r3, #28
   140a2:	18fb      	adds	r3, r7, r3
   140a4:	781b      	ldrb	r3, [r3, #0]
   140a6:	4a18      	ldr	r2, [pc, #96]	; (14108 <CLI_i2cScan+0x114>)
   140a8:	4818      	ldr	r0, [pc, #96]	; (1410c <CLI_i2cScan+0x118>)
   140aa:	210f      	movs	r1, #15
   140ac:	4c18      	ldr	r4, [pc, #96]	; (14110 <CLI_i2cScan+0x11c>)
   140ae:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   140b0:	4b16      	ldr	r3, [pc, #88]	; (1410c <CLI_i2cScan+0x118>)
   140b2:	0018      	movs	r0, r3
   140b4:	4b13      	ldr	r3, [pc, #76]	; (14104 <CLI_i2cScan+0x110>)
   140b6:	4798      	blx	r3
   140b8:	e009      	b.n	140ce <CLI_i2cScan+0xda>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   140ba:	4b14      	ldr	r3, [pc, #80]	; (1410c <CLI_i2cScan+0x118>)
   140bc:	4a16      	ldr	r2, [pc, #88]	; (14118 <CLI_i2cScan+0x124>)
   140be:	8811      	ldrh	r1, [r2, #0]
   140c0:	8019      	strh	r1, [r3, #0]
   140c2:	7892      	ldrb	r2, [r2, #2]
   140c4:	709a      	strb	r2, [r3, #2]
						SerialConsoleWriteString(bufCli);
   140c6:	4b11      	ldr	r3, [pc, #68]	; (1410c <CLI_i2cScan+0x118>)
   140c8:	0018      	movs	r0, r3
   140ca:	4b0e      	ldr	r3, [pc, #56]	; (14104 <CLI_i2cScan+0x110>)
   140cc:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   140ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   140d0:	3301      	adds	r3, #1
   140d2:	633b      	str	r3, [r7, #48]	; 0x30
   140d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   140d6:	2b0f      	cmp	r3, #15
   140d8:	ddcc      	ble.n	14074 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   140da:	4b10      	ldr	r3, [pc, #64]	; (1411c <CLI_i2cScan+0x128>)
   140dc:	0018      	movs	r0, r3
   140de:	4b09      	ldr	r3, [pc, #36]	; (14104 <CLI_i2cScan+0x110>)
   140e0:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   140e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   140e4:	3310      	adds	r3, #16
   140e6:	637b      	str	r3, [r7, #52]	; 0x34
   140e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   140ea:	2b7f      	cmp	r3, #127	; 0x7f
   140ec:	ddb5      	ble.n	1405a <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   140ee:	4b0b      	ldr	r3, [pc, #44]	; (1411c <CLI_i2cScan+0x128>)
   140f0:	0018      	movs	r0, r3
   140f2:	4b04      	ldr	r3, [pc, #16]	; (14104 <CLI_i2cScan+0x110>)
   140f4:	4798      	blx	r3
			return pdFALSE;
   140f6:	2300      	movs	r3, #0

}
   140f8:	0018      	movs	r0, r3
   140fa:	46bd      	mov	sp, r7
   140fc:	b00f      	add	sp, #60	; 0x3c
   140fe:	bd90      	pop	{r4, r7, pc}
   14100:	00036948 	.word	0x00036948
   14104:	0001e2b5 	.word	0x0001e2b5
   14108:	0003697c 	.word	0x0003697c
   1410c:	20000504 	.word	0x20000504
   14110:	000351bd 	.word	0x000351bd
   14114:	00014999 	.word	0x00014999
   14118:	00036984 	.word	0x00036984
   1411c:	00036830 	.word	0x00036830

00014120 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   14120:	b580      	push	{r7, lr}
   14122:	b088      	sub	sp, #32
   14124:	af00      	add	r7, sp, #0
   14126:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   14128:	4b33      	ldr	r3, [pc, #204]	; (141f8 <vControlHandlerTask+0xd8>)
   1412a:	0018      	movs	r0, r3
   1412c:	4b33      	ldr	r3, [pc, #204]	; (141fc <vControlHandlerTask+0xdc>)
   1412e:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   14130:	2200      	movs	r2, #0
   14132:	2114      	movs	r1, #20
   14134:	2002      	movs	r0, #2
   14136:	4b32      	ldr	r3, [pc, #200]	; (14200 <vControlHandlerTask+0xe0>)
   14138:	4798      	blx	r3
   1413a:	0002      	movs	r2, r0
   1413c:	4b31      	ldr	r3, [pc, #196]	; (14204 <vControlHandlerTask+0xe4>)
   1413e:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   14140:	2200      	movs	r2, #0
   14142:	2103      	movs	r1, #3
   14144:	2002      	movs	r0, #2
   14146:	4b2e      	ldr	r3, [pc, #184]	; (14200 <vControlHandlerTask+0xe0>)
   14148:	4798      	blx	r3
   1414a:	0002      	movs	r2, r0
   1414c:	4b2e      	ldr	r3, [pc, #184]	; (14208 <vControlHandlerTask+0xe8>)
   1414e:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   14150:	4b2c      	ldr	r3, [pc, #176]	; (14204 <vControlHandlerTask+0xe4>)
   14152:	681b      	ldr	r3, [r3, #0]
   14154:	2b00      	cmp	r3, #0
   14156:	d003      	beq.n	14160 <vControlHandlerTask+0x40>
   14158:	4b2b      	ldr	r3, [pc, #172]	; (14208 <vControlHandlerTask+0xe8>)
   1415a:	681b      	ldr	r3, [r3, #0]
   1415c:	2b00      	cmp	r3, #0
   1415e:	d103      	bne.n	14168 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   14160:	4b2a      	ldr	r3, [pc, #168]	; (1420c <vControlHandlerTask+0xec>)
   14162:	0018      	movs	r0, r3
   14164:	4b25      	ldr	r3, [pc, #148]	; (141fc <vControlHandlerTask+0xdc>)
   14166:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   14168:	4b29      	ldr	r3, [pc, #164]	; (14210 <vControlHandlerTask+0xf0>)
   1416a:	2200      	movs	r2, #0
   1416c:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   1416e:	4b28      	ldr	r3, [pc, #160]	; (14210 <vControlHandlerTask+0xf0>)
   14170:	781b      	ldrb	r3, [r3, #0]
   14172:	2b01      	cmp	r3, #1
   14174:	d01d      	beq.n	141b2 <vControlHandlerTask+0x92>
   14176:	2b02      	cmp	r3, #2
   14178:	d035      	beq.n	141e6 <vControlHandlerTask+0xc6>
   1417a:	2b00      	cmp	r3, #0
   1417c:	d12f      	bne.n	141de <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   1417e:	4b21      	ldr	r3, [pc, #132]	; (14204 <vControlHandlerTask+0xe4>)
   14180:	681b      	ldr	r3, [r3, #0]
   14182:	220c      	movs	r2, #12
   14184:	18b9      	adds	r1, r7, r2
   14186:	2200      	movs	r2, #0
   14188:	0018      	movs	r0, r3
   1418a:	4b22      	ldr	r3, [pc, #136]	; (14214 <vControlHandlerTask+0xf4>)
   1418c:	4798      	blx	r3
   1418e:	0003      	movs	r3, r0
   14190:	2b01      	cmp	r3, #1
   14192:	d12a      	bne.n	141ea <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   14194:	4b20      	ldr	r3, [pc, #128]	; (14218 <vControlHandlerTask+0xf8>)
   14196:	0019      	movs	r1, r3
   14198:	2001      	movs	r0, #1
   1419a:	4b20      	ldr	r3, [pc, #128]	; (1421c <vControlHandlerTask+0xfc>)
   1419c:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   1419e:	230c      	movs	r3, #12
   141a0:	18fb      	adds	r3, r7, r3
   141a2:	0018      	movs	r0, r3
   141a4:	4b1e      	ldr	r3, [pc, #120]	; (14220 <vControlHandlerTask+0x100>)
   141a6:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   141a8:	4b19      	ldr	r3, [pc, #100]	; (14210 <vControlHandlerTask+0xf0>)
   141aa:	2201      	movs	r2, #1
   141ac:	701a      	strb	r2, [r3, #0]
                }

                break;
   141ae:	46c0      	nop			; (mov r8, r8)
   141b0:	e01b      	b.n	141ea <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   141b2:	4b1c      	ldr	r3, [pc, #112]	; (14224 <vControlHandlerTask+0x104>)
   141b4:	4798      	blx	r3
   141b6:	1e03      	subs	r3, r0, #0
   141b8:	d019      	beq.n	141ee <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   141ba:	4b1b      	ldr	r3, [pc, #108]	; (14228 <vControlHandlerTask+0x108>)
   141bc:	4798      	blx	r3
   141be:	0003      	movs	r3, r0
   141c0:	0018      	movs	r0, r3
   141c2:	4b1a      	ldr	r3, [pc, #104]	; (1422c <vControlHandlerTask+0x10c>)
   141c4:	4798      	blx	r3
   141c6:	0003      	movs	r3, r0
   141c8:	2b01      	cmp	r3, #1
   141ca:	d004      	beq.n	141d6 <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   141cc:	4b18      	ldr	r3, [pc, #96]	; (14230 <vControlHandlerTask+0x110>)
   141ce:	0019      	movs	r1, r3
   141d0:	2001      	movs	r0, #1
   141d2:	4b12      	ldr	r3, [pc, #72]	; (1421c <vControlHandlerTask+0xfc>)
   141d4:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   141d6:	4b0e      	ldr	r3, [pc, #56]	; (14210 <vControlHandlerTask+0xf0>)
   141d8:	2200      	movs	r2, #0
   141da:	701a      	strb	r2, [r3, #0]
                }

                break;
   141dc:	e007      	b.n	141ee <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   141de:	4b0c      	ldr	r3, [pc, #48]	; (14210 <vControlHandlerTask+0xf0>)
   141e0:	2200      	movs	r2, #0
   141e2:	701a      	strb	r2, [r3, #0]
                break;
   141e4:	e004      	b.n	141f0 <vControlHandlerTask+0xd0>
                break;
   141e6:	46c0      	nop			; (mov r8, r8)
   141e8:	e002      	b.n	141f0 <vControlHandlerTask+0xd0>
                break;
   141ea:	46c0      	nop			; (mov r8, r8)
   141ec:	e000      	b.n	141f0 <vControlHandlerTask+0xd0>
                break;
   141ee:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   141f0:	2028      	movs	r0, #40	; 0x28
   141f2:	4b10      	ldr	r3, [pc, #64]	; (14234 <vControlHandlerTask+0x114>)
   141f4:	4798      	blx	r3
        switch (controlState) {
   141f6:	e7ba      	b.n	1416e <vControlHandlerTask+0x4e>
   141f8:	00036a28 	.word	0x00036a28
   141fc:	0001e2b5 	.word	0x0001e2b5
   14200:	0001a955 	.word	0x0001a955
   14204:	20000600 	.word	0x20000600
   14208:	20000604 	.word	0x20000604
   1420c:	00036a48 	.word	0x00036a48
   14210:	200047e4 	.word	0x200047e4
   14214:	0001b4b5 	.word	0x0001b4b5
   14218:	00036a74 	.word	0x00036a74
   1421c:	0001e3a1 	.word	0x0001e3a1
   14220:	00015f31 	.word	0x00015f31
   14224:	00015f6d 	.word	0x00015f6d
   14228:	00015f81 	.word	0x00015f81
   1422c:	000179d1 	.word	0x000179d1
   14230:	00036a9c 	.word	0x00036a9c
   14234:	0001c661 	.word	0x0001c661

00014238 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   14238:	b590      	push	{r4, r7, lr}
   1423a:	b085      	sub	sp, #20
   1423c:	af00      	add	r7, sp, #0
   1423e:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   14240:	4b06      	ldr	r3, [pc, #24]	; (1425c <ControlAddGameData+0x24>)
   14242:	6818      	ldr	r0, [r3, #0]
   14244:	6879      	ldr	r1, [r7, #4]
   14246:	2300      	movs	r3, #0
   14248:	220a      	movs	r2, #10
   1424a:	4c05      	ldr	r4, [pc, #20]	; (14260 <ControlAddGameData+0x28>)
   1424c:	47a0      	blx	r4
   1424e:	0003      	movs	r3, r0
   14250:	60fb      	str	r3, [r7, #12]
    return error;
   14252:	68fb      	ldr	r3, [r7, #12]
}
   14254:	0018      	movs	r0, r3
   14256:	46bd      	mov	sp, r7
   14258:	b005      	add	sp, #20
   1425a:	bd90      	pop	{r4, r7, pc}
   1425c:	20000600 	.word	0x20000600
   14260:	0001abfd 	.word	0x0001abfd

00014264 <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(uint16_t *distance, const TickType_t xMaxBlockTime)
{
   14264:	b580      	push	{r7, lr}
   14266:	b084      	sub	sp, #16
   14268:	af00      	add	r7, sp, #0
   1426a:	6078      	str	r0, [r7, #4]
   1426c:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   1426e:	2300      	movs	r3, #0
   14270:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   14272:	2396      	movs	r3, #150	; 0x96
   14274:	005b      	lsls	r3, r3, #1
   14276:	0018      	movs	r0, r3
   14278:	4b25      	ldr	r3, [pc, #148]	; (14310 <DistanceSensorGetDistance+0xac>)
   1427a:	4798      	blx	r3
   1427c:	0003      	movs	r3, r0
   1427e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   14280:	68fb      	ldr	r3, [r7, #12]
   14282:	2b00      	cmp	r3, #0
   14284:	d139      	bne.n	142fa <DistanceSensorGetDistance+0x96>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   14286:	4b23      	ldr	r3, [pc, #140]	; (14314 <DistanceSensorGetDistance+0xb0>)
   14288:	2255      	movs	r2, #85	; 0x55
   1428a:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   1428c:	4921      	ldr	r1, [pc, #132]	; (14314 <DistanceSensorGetDistance+0xb0>)
   1428e:	4b22      	ldr	r3, [pc, #136]	; (14318 <DistanceSensorGetDistance+0xb4>)
   14290:	2201      	movs	r2, #1
   14292:	0018      	movs	r0, r3
   14294:	4b21      	ldr	r3, [pc, #132]	; (1431c <DistanceSensorGetDistance+0xb8>)
   14296:	4798      	blx	r3
   14298:	1e03      	subs	r3, r0, #0
   1429a:	d130      	bne.n	142fe <DistanceSensorGetDistance+0x9a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   1429c:	4b20      	ldr	r3, [pc, #128]	; (14320 <DistanceSensorGetDistance+0xbc>)
   1429e:	681b      	ldr	r3, [r3, #0]
   142a0:	683a      	ldr	r2, [r7, #0]
   142a2:	0011      	movs	r1, r2
   142a4:	0018      	movs	r0, r3
   142a6:	4b1f      	ldr	r3, [pc, #124]	; (14324 <DistanceSensorGetDistance+0xc0>)
   142a8:	4798      	blx	r3
   142aa:	0003      	movs	r3, r0
   142ac:	2b01      	cmp	r3, #1
   142ae:	d003      	beq.n	142b8 <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   142b0:	2303      	movs	r3, #3
   142b2:	425b      	negs	r3, r3
   142b4:	60fb      	str	r3, [r7, #12]
        goto exitf;
   142b6:	e023      	b.n	14300 <DistanceSensorGetDistance+0x9c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
   142b8:	491b      	ldr	r1, [pc, #108]	; (14328 <DistanceSensorGetDistance+0xc4>)
   142ba:	4b17      	ldr	r3, [pc, #92]	; (14318 <DistanceSensorGetDistance+0xb4>)
   142bc:	2202      	movs	r2, #2
   142be:	0018      	movs	r0, r3
   142c0:	4b1a      	ldr	r3, [pc, #104]	; (1432c <DistanceSensorGetDistance+0xc8>)
   142c2:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   142c4:	4b16      	ldr	r3, [pc, #88]	; (14320 <DistanceSensorGetDistance+0xbc>)
   142c6:	681b      	ldr	r3, [r3, #0]
   142c8:	683a      	ldr	r2, [r7, #0]
   142ca:	0011      	movs	r1, r2
   142cc:	0018      	movs	r0, r3
   142ce:	4b15      	ldr	r3, [pc, #84]	; (14324 <DistanceSensorGetDistance+0xc0>)
   142d0:	4798      	blx	r3
   142d2:	0003      	movs	r3, r0
   142d4:	2b01      	cmp	r3, #1
   142d6:	d10c      	bne.n	142f2 <DistanceSensorGetDistance+0x8e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   142d8:	4b13      	ldr	r3, [pc, #76]	; (14328 <DistanceSensorGetDistance+0xc4>)
   142da:	781b      	ldrb	r3, [r3, #0]
   142dc:	b29b      	uxth	r3, r3
   142de:	021b      	lsls	r3, r3, #8
   142e0:	b29a      	uxth	r2, r3
   142e2:	4b11      	ldr	r3, [pc, #68]	; (14328 <DistanceSensorGetDistance+0xc4>)
   142e4:	785b      	ldrb	r3, [r3, #1]
   142e6:	b29b      	uxth	r3, r3
   142e8:	18d3      	adds	r3, r2, r3
   142ea:	b29a      	uxth	r2, r3
   142ec:	687b      	ldr	r3, [r7, #4]
   142ee:	801a      	strh	r2, [r3, #0]
   142f0:	e006      	b.n	14300 <DistanceSensorGetDistance+0x9c>
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   142f2:	2303      	movs	r3, #3
   142f4:	425b      	negs	r3, r3
   142f6:	60fb      	str	r3, [r7, #12]
        goto exitf;
   142f8:	e002      	b.n	14300 <DistanceSensorGetDistance+0x9c>
    if (ERROR_NONE != error) goto exitf;
   142fa:	46c0      	nop			; (mov r8, r8)
   142fc:	e000      	b.n	14300 <DistanceSensorGetDistance+0x9c>
        goto exitf;
   142fe:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   14300:	4b0b      	ldr	r3, [pc, #44]	; (14330 <DistanceSensorGetDistance+0xcc>)
   14302:	4798      	blx	r3

    return error;
   14304:	68fb      	ldr	r3, [r7, #12]
}
   14306:	0018      	movs	r0, r3
   14308:	46bd      	mov	sp, r7
   1430a:	b004      	add	sp, #16
   1430c:	bd80      	pop	{r7, pc}
   1430e:	46c0      	nop			; (mov r8, r8)
   14310:	0001436d 	.word	0x0001436d
   14314:	200047ea 	.word	0x200047ea
   14318:	200047f4 	.word	0x200047f4
   1431c:	0002948d 	.word	0x0002948d
   14320:	200047ec 	.word	0x200047ec
   14324:	0001b90d 	.word	0x0001b90d
   14328:	200047e8 	.word	0x200047e8
   1432c:	000294d5 	.word	0x000294d5
   14330:	00014335 	.word	0x00014335

00014334 <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   14334:	b590      	push	{r4, r7, lr}
   14336:	b083      	sub	sp, #12
   14338:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   1433a:	2300      	movs	r3, #0
   1433c:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   1433e:	4b09      	ldr	r3, [pc, #36]	; (14364 <DistanceSensorFreeMutex+0x30>)
   14340:	6818      	ldr	r0, [r3, #0]
   14342:	2300      	movs	r3, #0
   14344:	2200      	movs	r2, #0
   14346:	2100      	movs	r1, #0
   14348:	4c07      	ldr	r4, [pc, #28]	; (14368 <DistanceSensorFreeMutex+0x34>)
   1434a:	47a0      	blx	r4
   1434c:	0003      	movs	r3, r0
   1434e:	2b01      	cmp	r3, #1
   14350:	d002      	beq.n	14358 <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14352:	2314      	movs	r3, #20
   14354:	425b      	negs	r3, r3
   14356:	607b      	str	r3, [r7, #4]
    }
    return error;
   14358:	687b      	ldr	r3, [r7, #4]
}
   1435a:	0018      	movs	r0, r3
   1435c:	46bd      	mov	sp, r7
   1435e:	b003      	add	sp, #12
   14360:	bd90      	pop	{r4, r7, pc}
   14362:	46c0      	nop			; (mov r8, r8)
   14364:	200047f0 	.word	0x200047f0
   14368:	0001abfd 	.word	0x0001abfd

0001436c <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   1436c:	b580      	push	{r7, lr}
   1436e:	b084      	sub	sp, #16
   14370:	af00      	add	r7, sp, #0
   14372:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14374:	2300      	movs	r3, #0
   14376:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   14378:	4b08      	ldr	r3, [pc, #32]	; (1439c <DistanceSensorGetMutex+0x30>)
   1437a:	681b      	ldr	r3, [r3, #0]
   1437c:	687a      	ldr	r2, [r7, #4]
   1437e:	0011      	movs	r1, r2
   14380:	0018      	movs	r0, r3
   14382:	4b07      	ldr	r3, [pc, #28]	; (143a0 <DistanceSensorGetMutex+0x34>)
   14384:	4798      	blx	r3
   14386:	0003      	movs	r3, r0
   14388:	2b01      	cmp	r3, #1
   1438a:	d002      	beq.n	14392 <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   1438c:	231d      	movs	r3, #29
   1438e:	425b      	negs	r3, r3
   14390:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14392:	68fb      	ldr	r3, [r7, #12]
   14394:	0018      	movs	r0, r3
   14396:	46bd      	mov	sp, r7
   14398:	b004      	add	sp, #16
   1439a:	bd80      	pop	{r7, pc}
   1439c:	200047f0 	.word	0x200047f0
   143a0:	0001b90d 	.word	0x0001b90d

000143a4 <system_interrupt_enable>:
{
   143a4:	b580      	push	{r7, lr}
   143a6:	b082      	sub	sp, #8
   143a8:	af00      	add	r7, sp, #0
   143aa:	0002      	movs	r2, r0
   143ac:	1dfb      	adds	r3, r7, #7
   143ae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   143b0:	4b06      	ldr	r3, [pc, #24]	; (143cc <system_interrupt_enable+0x28>)
   143b2:	1dfa      	adds	r2, r7, #7
   143b4:	7812      	ldrb	r2, [r2, #0]
   143b6:	0011      	movs	r1, r2
   143b8:	221f      	movs	r2, #31
   143ba:	400a      	ands	r2, r1
   143bc:	2101      	movs	r1, #1
   143be:	4091      	lsls	r1, r2
   143c0:	000a      	movs	r2, r1
   143c2:	601a      	str	r2, [r3, #0]
}
   143c4:	46c0      	nop			; (mov r8, r8)
   143c6:	46bd      	mov	sp, r7
   143c8:	b002      	add	sp, #8
   143ca:	bd80      	pop	{r7, pc}
   143cc:	e000e100 	.word	0xe000e100

000143d0 <i2c_master_is_syncing>:
{
   143d0:	b580      	push	{r7, lr}
   143d2:	b084      	sub	sp, #16
   143d4:	af00      	add	r7, sp, #0
   143d6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   143d8:	687b      	ldr	r3, [r7, #4]
   143da:	681b      	ldr	r3, [r3, #0]
   143dc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   143de:	68fb      	ldr	r3, [r7, #12]
   143e0:	69db      	ldr	r3, [r3, #28]
   143e2:	2207      	movs	r2, #7
   143e4:	4013      	ands	r3, r2
   143e6:	1e5a      	subs	r2, r3, #1
   143e8:	4193      	sbcs	r3, r2
   143ea:	b2db      	uxtb	r3, r3
}
   143ec:	0018      	movs	r0, r3
   143ee:	46bd      	mov	sp, r7
   143f0:	b004      	add	sp, #16
   143f2:	bd80      	pop	{r7, pc}

000143f4 <_i2c_master_wait_for_sync>:
{
   143f4:	b580      	push	{r7, lr}
   143f6:	b082      	sub	sp, #8
   143f8:	af00      	add	r7, sp, #0
   143fa:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   143fc:	46c0      	nop			; (mov r8, r8)
   143fe:	687b      	ldr	r3, [r7, #4]
   14400:	0018      	movs	r0, r3
   14402:	4b04      	ldr	r3, [pc, #16]	; (14414 <_i2c_master_wait_for_sync+0x20>)
   14404:	4798      	blx	r3
   14406:	1e03      	subs	r3, r0, #0
   14408:	d1f9      	bne.n	143fe <_i2c_master_wait_for_sync+0xa>
}
   1440a:	46c0      	nop			; (mov r8, r8)
   1440c:	46bd      	mov	sp, r7
   1440e:	b002      	add	sp, #8
   14410:	bd80      	pop	{r7, pc}
   14412:	46c0      	nop			; (mov r8, r8)
   14414:	000143d1 	.word	0x000143d1

00014418 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   14418:	b580      	push	{r7, lr}
   1441a:	b082      	sub	sp, #8
   1441c:	af00      	add	r7, sp, #0
   1441e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   14420:	687b      	ldr	r3, [r7, #4]
   14422:	2264      	movs	r2, #100	; 0x64
   14424:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   14426:	687b      	ldr	r3, [r7, #4]
   14428:	4a1b      	ldr	r2, [pc, #108]	; (14498 <i2c_master_get_config_defaults+0x80>)
   1442a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   1442c:	687b      	ldr	r3, [r7, #4]
   1442e:	2200      	movs	r2, #0
   14430:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   14432:	687b      	ldr	r3, [r7, #4]
   14434:	2200      	movs	r2, #0
   14436:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   14438:	687b      	ldr	r3, [r7, #4]
   1443a:	2200      	movs	r2, #0
   1443c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   1443e:	687b      	ldr	r3, [r7, #4]
   14440:	2280      	movs	r2, #128	; 0x80
   14442:	0392      	lsls	r2, r2, #14
   14444:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   14446:	687b      	ldr	r3, [r7, #4]
   14448:	2201      	movs	r2, #1
   1444a:	4252      	negs	r2, r2
   1444c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   1444e:	687b      	ldr	r3, [r7, #4]
   14450:	2201      	movs	r2, #1
   14452:	4252      	negs	r2, r2
   14454:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   14456:	687b      	ldr	r3, [r7, #4]
   14458:	2200      	movs	r2, #0
   1445a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1445c:	687b      	ldr	r3, [r7, #4]
   1445e:	2200      	movs	r2, #0
   14460:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   14462:	687b      	ldr	r3, [r7, #4]
   14464:	2224      	movs	r2, #36	; 0x24
   14466:	2100      	movs	r1, #0
   14468:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   1446a:	687b      	ldr	r3, [r7, #4]
   1446c:	2200      	movs	r2, #0
   1446e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   14470:	687b      	ldr	r3, [r7, #4]
   14472:	222c      	movs	r2, #44	; 0x2c
   14474:	2100      	movs	r1, #0
   14476:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   14478:	687b      	ldr	r3, [r7, #4]
   1447a:	222d      	movs	r2, #45	; 0x2d
   1447c:	2100      	movs	r1, #0
   1447e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   14480:	687b      	ldr	r3, [r7, #4]
   14482:	222e      	movs	r2, #46	; 0x2e
   14484:	2100      	movs	r1, #0
   14486:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   14488:	687b      	ldr	r3, [r7, #4]
   1448a:	22d7      	movs	r2, #215	; 0xd7
   1448c:	861a      	strh	r2, [r3, #48]	; 0x30
}
   1448e:	46c0      	nop			; (mov r8, r8)
   14490:	46bd      	mov	sp, r7
   14492:	b002      	add	sp, #8
   14494:	bd80      	pop	{r7, pc}
   14496:	46c0      	nop			; (mov r8, r8)
   14498:	00000d48 	.word	0x00000d48

0001449c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   1449c:	b580      	push	{r7, lr}
   1449e:	b084      	sub	sp, #16
   144a0:	af00      	add	r7, sp, #0
   144a2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   144a4:	687b      	ldr	r3, [r7, #4]
   144a6:	681b      	ldr	r3, [r3, #0]
   144a8:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   144aa:	2300      	movs	r3, #0
   144ac:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   144ae:	687b      	ldr	r3, [r7, #4]
   144b0:	0018      	movs	r0, r3
   144b2:	4b14      	ldr	r3, [pc, #80]	; (14504 <i2c_master_enable+0x68>)
   144b4:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   144b6:	68bb      	ldr	r3, [r7, #8]
   144b8:	681b      	ldr	r3, [r3, #0]
   144ba:	2202      	movs	r2, #2
   144bc:	431a      	orrs	r2, r3
   144be:	68bb      	ldr	r3, [r7, #8]
   144c0:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   144c2:	687b      	ldr	r3, [r7, #4]
   144c4:	681b      	ldr	r3, [r3, #0]
   144c6:	0018      	movs	r0, r3
   144c8:	4b0f      	ldr	r3, [pc, #60]	; (14508 <i2c_master_enable+0x6c>)
   144ca:	4798      	blx	r3
   144cc:	0003      	movs	r3, r0
   144ce:	0018      	movs	r0, r3
   144d0:	4b0e      	ldr	r3, [pc, #56]	; (1450c <i2c_master_enable+0x70>)
   144d2:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   144d4:	e00c      	b.n	144f0 <i2c_master_enable+0x54>
		timeout_counter++;
   144d6:	68fb      	ldr	r3, [r7, #12]
   144d8:	3301      	adds	r3, #1
   144da:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   144dc:	687b      	ldr	r3, [r7, #4]
   144de:	88db      	ldrh	r3, [r3, #6]
   144e0:	001a      	movs	r2, r3
   144e2:	68fb      	ldr	r3, [r7, #12]
   144e4:	429a      	cmp	r2, r3
   144e6:	d803      	bhi.n	144f0 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   144e8:	68bb      	ldr	r3, [r7, #8]
   144ea:	2210      	movs	r2, #16
   144ec:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   144ee:	e006      	b.n	144fe <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   144f0:	68bb      	ldr	r3, [r7, #8]
   144f2:	8b5b      	ldrh	r3, [r3, #26]
   144f4:	b29b      	uxth	r3, r3
   144f6:	001a      	movs	r2, r3
   144f8:	2310      	movs	r3, #16
   144fa:	4013      	ands	r3, r2
   144fc:	d0eb      	beq.n	144d6 <i2c_master_enable+0x3a>
		}
	}
}
   144fe:	46bd      	mov	sp, r7
   14500:	b004      	add	sp, #16
   14502:	bd80      	pop	{r7, pc}
   14504:	000143f5 	.word	0x000143f5
   14508:	00027c2d 	.word	0x00027c2d
   1450c:	000143a5 	.word	0x000143a5

00014510 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14510:	b580      	push	{r7, lr}
   14512:	b082      	sub	sp, #8
   14514:	af00      	add	r7, sp, #0
   14516:	6078      	str	r0, [r7, #4]
   14518:	000a      	movs	r2, r1
   1451a:	1cfb      	adds	r3, r7, #3
   1451c:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   1451e:	687b      	ldr	r3, [r7, #4]
   14520:	7e5b      	ldrb	r3, [r3, #25]
   14522:	b2db      	uxtb	r3, r3
   14524:	b25a      	sxtb	r2, r3
   14526:	1cfb      	adds	r3, r7, #3
   14528:	781b      	ldrb	r3, [r3, #0]
   1452a:	2101      	movs	r1, #1
   1452c:	4099      	lsls	r1, r3
   1452e:	000b      	movs	r3, r1
   14530:	b25b      	sxtb	r3, r3
   14532:	4313      	orrs	r3, r2
   14534:	b25b      	sxtb	r3, r3
   14536:	b2da      	uxtb	r2, r3
   14538:	687b      	ldr	r3, [r7, #4]
   1453a:	765a      	strb	r2, [r3, #25]
}
   1453c:	46c0      	nop			; (mov r8, r8)
   1453e:	46bd      	mov	sp, r7
   14540:	b002      	add	sp, #8
   14542:	bd80      	pop	{r7, pc}

00014544 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   14544:	b590      	push	{r4, r7, lr}
   14546:	b091      	sub	sp, #68	; 0x44
   14548:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   1454a:	2300      	movs	r3, #0
   1454c:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   1454e:	233a      	movs	r3, #58	; 0x3a
   14550:	18fb      	adds	r3, r7, r3
   14552:	2200      	movs	r2, #0
   14554:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   14556:	1d3b      	adds	r3, r7, #4
   14558:	0018      	movs	r0, r3
   1455a:	4b21      	ldr	r3, [pc, #132]	; (145e0 <I2cDriverConfigureSensorBus+0x9c>)
   1455c:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   1455e:	1d3b      	adds	r3, r7, #4
   14560:	4a20      	ldr	r2, [pc, #128]	; (145e4 <I2cDriverConfigureSensorBus+0xa0>)
   14562:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   14564:	1d3b      	adds	r3, r7, #4
   14566:	4a20      	ldr	r2, [pc, #128]	; (145e8 <I2cDriverConfigureSensorBus+0xa4>)
   14568:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   1456a:	1d3b      	adds	r3, r7, #4
   1456c:	22fa      	movs	r2, #250	; 0xfa
   1456e:	0092      	lsls	r2, r2, #2
   14570:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14572:	233b      	movs	r3, #59	; 0x3b
   14574:	18fb      	adds	r3, r7, r3
   14576:	2203      	movs	r2, #3
   14578:	701a      	strb	r2, [r3, #0]
   1457a:	e01e      	b.n	145ba <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   1457c:	233a      	movs	r3, #58	; 0x3a
   1457e:	18fc      	adds	r4, r7, r3
   14580:	1d3a      	adds	r2, r7, #4
   14582:	491a      	ldr	r1, [pc, #104]	; (145ec <I2cDriverConfigureSensorBus+0xa8>)
   14584:	4b1a      	ldr	r3, [pc, #104]	; (145f0 <I2cDriverConfigureSensorBus+0xac>)
   14586:	0018      	movs	r0, r3
   14588:	4b1a      	ldr	r3, [pc, #104]	; (145f4 <I2cDriverConfigureSensorBus+0xb0>)
   1458a:	4798      	blx	r3
   1458c:	0003      	movs	r3, r0
   1458e:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   14590:	233a      	movs	r3, #58	; 0x3a
   14592:	18fb      	adds	r3, r7, r3
   14594:	781b      	ldrb	r3, [r3, #0]
   14596:	2b00      	cmp	r3, #0
   14598:	d104      	bne.n	145a4 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   1459a:	233a      	movs	r3, #58	; 0x3a
   1459c:	18fb      	adds	r3, r7, r3
   1459e:	781b      	ldrb	r3, [r3, #0]
   145a0:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   145a2:	e00f      	b.n	145c4 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   145a4:	4b12      	ldr	r3, [pc, #72]	; (145f0 <I2cDriverConfigureSensorBus+0xac>)
   145a6:	0018      	movs	r0, r3
   145a8:	4b13      	ldr	r3, [pc, #76]	; (145f8 <I2cDriverConfigureSensorBus+0xb4>)
   145aa:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   145ac:	233b      	movs	r3, #59	; 0x3b
   145ae:	18fb      	adds	r3, r7, r3
   145b0:	781a      	ldrb	r2, [r3, #0]
   145b2:	233b      	movs	r3, #59	; 0x3b
   145b4:	18fb      	adds	r3, r7, r3
   145b6:	3a01      	subs	r2, #1
   145b8:	701a      	strb	r2, [r3, #0]
   145ba:	233b      	movs	r3, #59	; 0x3b
   145bc:	18fb      	adds	r3, r7, r3
   145be:	781b      	ldrb	r3, [r3, #0]
   145c0:	2b00      	cmp	r3, #0
   145c2:	d1db      	bne.n	1457c <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   145c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   145c6:	2b00      	cmp	r3, #0
   145c8:	d104      	bne.n	145d4 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   145ca:	4b09      	ldr	r3, [pc, #36]	; (145f0 <I2cDriverConfigureSensorBus+0xac>)
   145cc:	0018      	movs	r0, r3
   145ce:	4b0b      	ldr	r3, [pc, #44]	; (145fc <I2cDriverConfigureSensorBus+0xb8>)
   145d0:	4798      	blx	r3
   145d2:	e000      	b.n	145d6 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   145d4:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   145d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   145d8:	0018      	movs	r0, r3
   145da:	46bd      	mov	sp, r7
   145dc:	b011      	add	sp, #68	; 0x44
   145de:	bd90      	pop	{r4, r7, pc}
   145e0:	00014419 	.word	0x00014419
   145e4:	00080002 	.word	0x00080002
   145e8:	00090002 	.word	0x00090002
   145ec:	42000800 	.word	0x42000800
   145f0:	2000482c 	.word	0x2000482c
   145f4:	00017fed 	.word	0x00017fed
   145f8:	00018121 	.word	0x00018121
   145fc:	0001449d 	.word	0x0001449d

00014600 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14600:	b580      	push	{r7, lr}
   14602:	b084      	sub	sp, #16
   14604:	af00      	add	r7, sp, #0
   14606:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14608:	4b0e      	ldr	r3, [pc, #56]	; (14644 <I2cSensorsTxComplete+0x44>)
   1460a:	2200      	movs	r2, #0
   1460c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   1460e:	4b0d      	ldr	r3, [pc, #52]	; (14644 <I2cSensorsTxComplete+0x44>)
   14610:	2201      	movs	r2, #1
   14612:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14614:	2300      	movs	r3, #0
   14616:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14618:	4b0b      	ldr	r3, [pc, #44]	; (14648 <I2cSensorsTxComplete+0x48>)
   1461a:	681b      	ldr	r3, [r3, #0]
   1461c:	220c      	movs	r2, #12
   1461e:	18ba      	adds	r2, r7, r2
   14620:	0011      	movs	r1, r2
   14622:	0018      	movs	r0, r3
   14624:	4b09      	ldr	r3, [pc, #36]	; (1464c <I2cSensorsTxComplete+0x4c>)
   14626:	4798      	blx	r3
    sensorTransmitError = false;
   14628:	4b09      	ldr	r3, [pc, #36]	; (14650 <I2cSensorsTxComplete+0x50>)
   1462a:	2200      	movs	r2, #0
   1462c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1462e:	68fb      	ldr	r3, [r7, #12]
   14630:	2b00      	cmp	r3, #0
   14632:	d003      	beq.n	1463c <I2cSensorsTxComplete+0x3c>
   14634:	4b07      	ldr	r3, [pc, #28]	; (14654 <I2cSensorsTxComplete+0x54>)
   14636:	2280      	movs	r2, #128	; 0x80
   14638:	0552      	lsls	r2, r2, #21
   1463a:	601a      	str	r2, [r3, #0]
}
   1463c:	46c0      	nop			; (mov r8, r8)
   1463e:	46bd      	mov	sp, r7
   14640:	b004      	add	sp, #16
   14642:	bd80      	pop	{r7, pc}
   14644:	2000060c 	.word	0x2000060c
   14648:	20004854 	.word	0x20004854
   1464c:	0001b285 	.word	0x0001b285
   14650:	20000608 	.word	0x20000608
   14654:	e000ed04 	.word	0xe000ed04

00014658 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   14658:	b580      	push	{r7, lr}
   1465a:	b084      	sub	sp, #16
   1465c:	af00      	add	r7, sp, #0
   1465e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14660:	4b0e      	ldr	r3, [pc, #56]	; (1469c <I2cSensorsRxComplete+0x44>)
   14662:	2200      	movs	r2, #0
   14664:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14666:	4b0d      	ldr	r3, [pc, #52]	; (1469c <I2cSensorsRxComplete+0x44>)
   14668:	2201      	movs	r2, #1
   1466a:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1466c:	2300      	movs	r3, #0
   1466e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14670:	4b0b      	ldr	r3, [pc, #44]	; (146a0 <I2cSensorsRxComplete+0x48>)
   14672:	681b      	ldr	r3, [r3, #0]
   14674:	220c      	movs	r2, #12
   14676:	18ba      	adds	r2, r7, r2
   14678:	0011      	movs	r1, r2
   1467a:	0018      	movs	r0, r3
   1467c:	4b09      	ldr	r3, [pc, #36]	; (146a4 <I2cSensorsRxComplete+0x4c>)
   1467e:	4798      	blx	r3
    sensorTransmitError = false;
   14680:	4b09      	ldr	r3, [pc, #36]	; (146a8 <I2cSensorsRxComplete+0x50>)
   14682:	2200      	movs	r2, #0
   14684:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14686:	68fb      	ldr	r3, [r7, #12]
   14688:	2b00      	cmp	r3, #0
   1468a:	d003      	beq.n	14694 <I2cSensorsRxComplete+0x3c>
   1468c:	4b07      	ldr	r3, [pc, #28]	; (146ac <I2cSensorsRxComplete+0x54>)
   1468e:	2280      	movs	r2, #128	; 0x80
   14690:	0552      	lsls	r2, r2, #21
   14692:	601a      	str	r2, [r3, #0]
}
   14694:	46c0      	nop			; (mov r8, r8)
   14696:	46bd      	mov	sp, r7
   14698:	b004      	add	sp, #16
   1469a:	bd80      	pop	{r7, pc}
   1469c:	2000060c 	.word	0x2000060c
   146a0:	20004854 	.word	0x20004854
   146a4:	0001b285 	.word	0x0001b285
   146a8:	20000608 	.word	0x20000608
   146ac:	e000ed04 	.word	0xe000ed04

000146b0 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   146b0:	b580      	push	{r7, lr}
   146b2:	b084      	sub	sp, #16
   146b4:	af00      	add	r7, sp, #0
   146b6:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   146b8:	4b0e      	ldr	r3, [pc, #56]	; (146f4 <I2cSensorsError+0x44>)
   146ba:	2200      	movs	r2, #0
   146bc:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   146be:	4b0d      	ldr	r3, [pc, #52]	; (146f4 <I2cSensorsError+0x44>)
   146c0:	2201      	movs	r2, #1
   146c2:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   146c4:	2300      	movs	r3, #0
   146c6:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   146c8:	4b0b      	ldr	r3, [pc, #44]	; (146f8 <I2cSensorsError+0x48>)
   146ca:	681b      	ldr	r3, [r3, #0]
   146cc:	220c      	movs	r2, #12
   146ce:	18ba      	adds	r2, r7, r2
   146d0:	0011      	movs	r1, r2
   146d2:	0018      	movs	r0, r3
   146d4:	4b09      	ldr	r3, [pc, #36]	; (146fc <I2cSensorsError+0x4c>)
   146d6:	4798      	blx	r3
    sensorTransmitError = true;
   146d8:	4b09      	ldr	r3, [pc, #36]	; (14700 <I2cSensorsError+0x50>)
   146da:	2201      	movs	r2, #1
   146dc:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   146de:	68fb      	ldr	r3, [r7, #12]
   146e0:	2b00      	cmp	r3, #0
   146e2:	d003      	beq.n	146ec <I2cSensorsError+0x3c>
   146e4:	4b07      	ldr	r3, [pc, #28]	; (14704 <I2cSensorsError+0x54>)
   146e6:	2280      	movs	r2, #128	; 0x80
   146e8:	0552      	lsls	r2, r2, #21
   146ea:	601a      	str	r2, [r3, #0]
}
   146ec:	46c0      	nop			; (mov r8, r8)
   146ee:	46bd      	mov	sp, r7
   146f0:	b004      	add	sp, #16
   146f2:	bd80      	pop	{r7, pc}
   146f4:	2000060c 	.word	0x2000060c
   146f8:	20004854 	.word	0x20004854
   146fc:	0001b285 	.word	0x0001b285
   14700:	20000608 	.word	0x20000608
   14704:	e000ed04 	.word	0xe000ed04

00014708 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   14708:	b580      	push	{r7, lr}
   1470a:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   1470c:	4911      	ldr	r1, [pc, #68]	; (14754 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   1470e:	4b12      	ldr	r3, [pc, #72]	; (14758 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14710:	2200      	movs	r2, #0
   14712:	0018      	movs	r0, r3
   14714:	4b11      	ldr	r3, [pc, #68]	; (1475c <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14716:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14718:	4b0f      	ldr	r3, [pc, #60]	; (14758 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1471a:	2100      	movs	r1, #0
   1471c:	0018      	movs	r0, r3
   1471e:	4b10      	ldr	r3, [pc, #64]	; (14760 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14720:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14722:	4910      	ldr	r1, [pc, #64]	; (14764 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   14724:	4b0c      	ldr	r3, [pc, #48]	; (14758 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14726:	2201      	movs	r2, #1
   14728:	0018      	movs	r0, r3
   1472a:	4b0c      	ldr	r3, [pc, #48]	; (1475c <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1472c:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   1472e:	4b0a      	ldr	r3, [pc, #40]	; (14758 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14730:	2101      	movs	r1, #1
   14732:	0018      	movs	r0, r3
   14734:	4b0a      	ldr	r3, [pc, #40]	; (14760 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14736:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   14738:	490b      	ldr	r1, [pc, #44]	; (14768 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   1473a:	4b07      	ldr	r3, [pc, #28]	; (14758 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1473c:	2202      	movs	r2, #2
   1473e:	0018      	movs	r0, r3
   14740:	4b06      	ldr	r3, [pc, #24]	; (1475c <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14742:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   14744:	4b04      	ldr	r3, [pc, #16]	; (14758 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14746:	2102      	movs	r1, #2
   14748:	0018      	movs	r0, r3
   1474a:	4b05      	ldr	r3, [pc, #20]	; (14760 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   1474c:	4798      	blx	r3
}
   1474e:	46c0      	nop			; (mov r8, r8)
   14750:	46bd      	mov	sp, r7
   14752:	bd80      	pop	{r7, pc}
   14754:	00014601 	.word	0x00014601
   14758:	2000482c 	.word	0x2000482c
   1475c:	000132b1 	.word	0x000132b1
   14760:	00014511 	.word	0x00014511
   14764:	00014659 	.word	0x00014659
   14768:	000146b1 	.word	0x000146b1

0001476c <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   1476c:	b580      	push	{r7, lr}
   1476e:	b082      	sub	sp, #8
   14770:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14772:	2300      	movs	r3, #0
   14774:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   14776:	4b14      	ldr	r3, [pc, #80]	; (147c8 <I2cInitializeDriver+0x5c>)
   14778:	4798      	blx	r3
   1477a:	0003      	movs	r3, r0
   1477c:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   1477e:	687b      	ldr	r3, [r7, #4]
   14780:	2b00      	cmp	r3, #0
   14782:	d11a      	bne.n	147ba <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   14784:	4b11      	ldr	r3, [pc, #68]	; (147cc <I2cInitializeDriver+0x60>)
   14786:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   14788:	2001      	movs	r0, #1
   1478a:	4b11      	ldr	r3, [pc, #68]	; (147d0 <I2cInitializeDriver+0x64>)
   1478c:	4798      	blx	r3
   1478e:	0002      	movs	r2, r0
   14790:	4b10      	ldr	r3, [pc, #64]	; (147d4 <I2cInitializeDriver+0x68>)
   14792:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   14794:	2203      	movs	r2, #3
   14796:	2100      	movs	r1, #0
   14798:	2001      	movs	r0, #1
   1479a:	4b0f      	ldr	r3, [pc, #60]	; (147d8 <I2cInitializeDriver+0x6c>)
   1479c:	4798      	blx	r3
   1479e:	0002      	movs	r2, r0
   147a0:	4b0e      	ldr	r3, [pc, #56]	; (147dc <I2cInitializeDriver+0x70>)
   147a2:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   147a4:	4b0b      	ldr	r3, [pc, #44]	; (147d4 <I2cInitializeDriver+0x68>)
   147a6:	681b      	ldr	r3, [r3, #0]
   147a8:	2b00      	cmp	r3, #0
   147aa:	d003      	beq.n	147b4 <I2cInitializeDriver+0x48>
   147ac:	4b0b      	ldr	r3, [pc, #44]	; (147dc <I2cInitializeDriver+0x70>)
   147ae:	681b      	ldr	r3, [r3, #0]
   147b0:	2b00      	cmp	r3, #0
   147b2:	d103      	bne.n	147bc <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   147b4:	2306      	movs	r3, #6
   147b6:	607b      	str	r3, [r7, #4]
        goto exit;
   147b8:	e000      	b.n	147bc <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   147ba:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   147bc:	687b      	ldr	r3, [r7, #4]
}
   147be:	0018      	movs	r0, r3
   147c0:	46bd      	mov	sp, r7
   147c2:	b002      	add	sp, #8
   147c4:	bd80      	pop	{r7, pc}
   147c6:	46c0      	nop			; (mov r8, r8)
   147c8:	00014545 	.word	0x00014545
   147cc:	00014709 	.word	0x00014709
   147d0:	0001abbd 	.word	0x0001abbd
   147d4:	20004828 	.word	0x20004828
   147d8:	0001a955 	.word	0x0001a955
   147dc:	20004854 	.word	0x20004854

000147e0 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   147e0:	b590      	push	{r4, r7, lr}
   147e2:	b085      	sub	sp, #20
   147e4:	af00      	add	r7, sp, #0
   147e6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   147e8:	2300      	movs	r3, #0
   147ea:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   147ec:	687b      	ldr	r3, [r7, #4]
   147ee:	2b00      	cmp	r3, #0
   147f0:	d003      	beq.n	147fa <I2cWriteData+0x1a>
   147f2:	687b      	ldr	r3, [r7, #4]
   147f4:	685b      	ldr	r3, [r3, #4]
   147f6:	2b00      	cmp	r3, #0
   147f8:	d103      	bne.n	14802 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   147fa:	2308      	movs	r3, #8
   147fc:	425b      	negs	r3, r3
   147fe:	60fb      	str	r3, [r7, #12]
        goto exit;
   14800:	e01f      	b.n	14842 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   14802:	687b      	ldr	r3, [r7, #4]
   14804:	781b      	ldrb	r3, [r3, #0]
   14806:	b29a      	uxth	r2, r3
   14808:	4b10      	ldr	r3, [pc, #64]	; (1484c <I2cWriteData+0x6c>)
   1480a:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   1480c:	687b      	ldr	r3, [r7, #4]
   1480e:	685a      	ldr	r2, [r3, #4]
   14810:	4b0e      	ldr	r3, [pc, #56]	; (1484c <I2cWriteData+0x6c>)
   14812:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   14814:	687b      	ldr	r3, [r7, #4]
   14816:	89da      	ldrh	r2, [r3, #14]
   14818:	4b0c      	ldr	r3, [pc, #48]	; (1484c <I2cWriteData+0x6c>)
   1481a:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   1481c:	230b      	movs	r3, #11
   1481e:	18fc      	adds	r4, r7, r3
   14820:	4a0a      	ldr	r2, [pc, #40]	; (1484c <I2cWriteData+0x6c>)
   14822:	4b0b      	ldr	r3, [pc, #44]	; (14850 <I2cWriteData+0x70>)
   14824:	0011      	movs	r1, r2
   14826:	0018      	movs	r0, r3
   14828:	4b0a      	ldr	r3, [pc, #40]	; (14854 <I2cWriteData+0x74>)
   1482a:	4798      	blx	r3
   1482c:	0003      	movs	r3, r0
   1482e:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14830:	230b      	movs	r3, #11
   14832:	18fb      	adds	r3, r7, r3
   14834:	781b      	ldrb	r3, [r3, #0]
   14836:	2b00      	cmp	r3, #0
   14838:	d003      	beq.n	14842 <I2cWriteData+0x62>
        error = ERROR_IO;
   1483a:	2306      	movs	r3, #6
   1483c:	425b      	negs	r3, r3
   1483e:	60fb      	str	r3, [r7, #12]
        goto exit;
   14840:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14842:	68fb      	ldr	r3, [r7, #12]
}
   14844:	0018      	movs	r0, r3
   14846:	46bd      	mov	sp, r7
   14848:	b005      	add	sp, #20
   1484a:	bd90      	pop	{r4, r7, pc}
   1484c:	20004858 	.word	0x20004858
   14850:	2000482c 	.word	0x2000482c
   14854:	00013535 	.word	0x00013535

00014858 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   14858:	b590      	push	{r4, r7, lr}
   1485a:	b085      	sub	sp, #20
   1485c:	af00      	add	r7, sp, #0
   1485e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14860:	2300      	movs	r3, #0
   14862:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14864:	687b      	ldr	r3, [r7, #4]
   14866:	2b00      	cmp	r3, #0
   14868:	d003      	beq.n	14872 <I2cReadData+0x1a>
   1486a:	687b      	ldr	r3, [r7, #4]
   1486c:	685b      	ldr	r3, [r3, #4]
   1486e:	2b00      	cmp	r3, #0
   14870:	d103      	bne.n	1487a <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   14872:	2308      	movs	r3, #8
   14874:	425b      	negs	r3, r3
   14876:	60fb      	str	r3, [r7, #12]
        goto exit;
   14878:	e01f      	b.n	148ba <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   1487a:	687b      	ldr	r3, [r7, #4]
   1487c:	781b      	ldrb	r3, [r3, #0]
   1487e:	b29a      	uxth	r2, r3
   14880:	4b10      	ldr	r3, [pc, #64]	; (148c4 <I2cReadData+0x6c>)
   14882:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   14884:	687b      	ldr	r3, [r7, #4]
   14886:	689a      	ldr	r2, [r3, #8]
   14888:	4b0e      	ldr	r3, [pc, #56]	; (148c4 <I2cReadData+0x6c>)
   1488a:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   1488c:	687b      	ldr	r3, [r7, #4]
   1488e:	899a      	ldrh	r2, [r3, #12]
   14890:	4b0c      	ldr	r3, [pc, #48]	; (148c4 <I2cReadData+0x6c>)
   14892:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14894:	230b      	movs	r3, #11
   14896:	18fc      	adds	r4, r7, r3
   14898:	4a0a      	ldr	r2, [pc, #40]	; (148c4 <I2cReadData+0x6c>)
   1489a:	4b0b      	ldr	r3, [pc, #44]	; (148c8 <I2cReadData+0x70>)
   1489c:	0011      	movs	r1, r2
   1489e:	0018      	movs	r0, r3
   148a0:	4b0a      	ldr	r3, [pc, #40]	; (148cc <I2cReadData+0x74>)
   148a2:	4798      	blx	r3
   148a4:	0003      	movs	r3, r0
   148a6:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   148a8:	230b      	movs	r3, #11
   148aa:	18fb      	adds	r3, r7, r3
   148ac:	781b      	ldrb	r3, [r3, #0]
   148ae:	2b00      	cmp	r3, #0
   148b0:	d003      	beq.n	148ba <I2cReadData+0x62>
        error = ERROR_IO;
   148b2:	2306      	movs	r3, #6
   148b4:	425b      	negs	r3, r3
   148b6:	60fb      	str	r3, [r7, #12]
        goto exit;
   148b8:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   148ba:	68fb      	ldr	r3, [r7, #12]
}
   148bc:	0018      	movs	r0, r3
   148be:	46bd      	mov	sp, r7
   148c0:	b005      	add	sp, #20
   148c2:	bd90      	pop	{r4, r7, pc}
   148c4:	20004858 	.word	0x20004858
   148c8:	2000482c 	.word	0x2000482c
   148cc:	00013451 	.word	0x00013451

000148d0 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   148d0:	b590      	push	{r4, r7, lr}
   148d2:	b083      	sub	sp, #12
   148d4:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   148d6:	2300      	movs	r3, #0
   148d8:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   148da:	4b09      	ldr	r3, [pc, #36]	; (14900 <I2cFreeMutex+0x30>)
   148dc:	6818      	ldr	r0, [r3, #0]
   148de:	2300      	movs	r3, #0
   148e0:	2200      	movs	r2, #0
   148e2:	2100      	movs	r1, #0
   148e4:	4c07      	ldr	r4, [pc, #28]	; (14904 <I2cFreeMutex+0x34>)
   148e6:	47a0      	blx	r4
   148e8:	0003      	movs	r3, r0
   148ea:	2b01      	cmp	r3, #1
   148ec:	d002      	beq.n	148f4 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   148ee:	2314      	movs	r3, #20
   148f0:	425b      	negs	r3, r3
   148f2:	607b      	str	r3, [r7, #4]
    }
    return error;
   148f4:	687b      	ldr	r3, [r7, #4]
}
   148f6:	0018      	movs	r0, r3
   148f8:	46bd      	mov	sp, r7
   148fa:	b003      	add	sp, #12
   148fc:	bd90      	pop	{r4, r7, pc}
   148fe:	46c0      	nop			; (mov r8, r8)
   14900:	20004828 	.word	0x20004828
   14904:	0001abfd 	.word	0x0001abfd

00014908 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   14908:	b580      	push	{r7, lr}
   1490a:	b084      	sub	sp, #16
   1490c:	af00      	add	r7, sp, #0
   1490e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14910:	2300      	movs	r3, #0
   14912:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   14914:	4b08      	ldr	r3, [pc, #32]	; (14938 <I2cGetMutex+0x30>)
   14916:	681b      	ldr	r3, [r3, #0]
   14918:	687a      	ldr	r2, [r7, #4]
   1491a:	0011      	movs	r1, r2
   1491c:	0018      	movs	r0, r3
   1491e:	4b07      	ldr	r3, [pc, #28]	; (1493c <I2cGetMutex+0x34>)
   14920:	4798      	blx	r3
   14922:	0003      	movs	r3, r0
   14924:	2b01      	cmp	r3, #1
   14926:	d002      	beq.n	1492e <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14928:	231d      	movs	r3, #29
   1492a:	425b      	negs	r3, r3
   1492c:	60fb      	str	r3, [r7, #12]
    }
    return error;
   1492e:	68fb      	ldr	r3, [r7, #12]
}
   14930:	0018      	movs	r0, r3
   14932:	46bd      	mov	sp, r7
   14934:	b004      	add	sp, #16
   14936:	bd80      	pop	{r7, pc}
   14938:	20004828 	.word	0x20004828
   1493c:	0001b90d 	.word	0x0001b90d

00014940 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   14940:	b580      	push	{r7, lr}
   14942:	b084      	sub	sp, #16
   14944:	af00      	add	r7, sp, #0
   14946:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14948:	2300      	movs	r3, #0
   1494a:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   1494c:	4b04      	ldr	r3, [pc, #16]	; (14960 <I2cGetSemaphoreHandle+0x20>)
   1494e:	681a      	ldr	r2, [r3, #0]
   14950:	687b      	ldr	r3, [r7, #4]
   14952:	601a      	str	r2, [r3, #0]
    return error;
   14954:	68fb      	ldr	r3, [r7, #12]
}
   14956:	0018      	movs	r0, r3
   14958:	46bd      	mov	sp, r7
   1495a:	b004      	add	sp, #16
   1495c:	bd80      	pop	{r7, pc}
   1495e:	46c0      	nop			; (mov r8, r8)
   14960:	20004854 	.word	0x20004854

00014964 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   14964:	b580      	push	{r7, lr}
   14966:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   14968:	4b02      	ldr	r3, [pc, #8]	; (14974 <I2cGetTaskErrorStatus+0x10>)
   1496a:	781b      	ldrb	r3, [r3, #0]
}
   1496c:	0018      	movs	r0, r3
   1496e:	46bd      	mov	sp, r7
   14970:	bd80      	pop	{r7, pc}
   14972:	46c0      	nop			; (mov r8, r8)
   14974:	20000608 	.word	0x20000608

00014978 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   14978:	b580      	push	{r7, lr}
   1497a:	b082      	sub	sp, #8
   1497c:	af00      	add	r7, sp, #0
   1497e:	0002      	movs	r2, r0
   14980:	1dfb      	adds	r3, r7, #7
   14982:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   14984:	4b03      	ldr	r3, [pc, #12]	; (14994 <I2cSetTaskErrorStatus+0x1c>)
   14986:	1dfa      	adds	r2, r7, #7
   14988:	7812      	ldrb	r2, [r2, #0]
   1498a:	701a      	strb	r2, [r3, #0]
}
   1498c:	46c0      	nop			; (mov r8, r8)
   1498e:	46bd      	mov	sp, r7
   14990:	b002      	add	sp, #8
   14992:	bd80      	pop	{r7, pc}
   14994:	20000608 	.word	0x20000608

00014998 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   14998:	b580      	push	{r7, lr}
   1499a:	b084      	sub	sp, #16
   1499c:	af00      	add	r7, sp, #0
   1499e:	6078      	str	r0, [r7, #4]
   149a0:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   149a2:	2300      	movs	r3, #0
   149a4:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   149a6:	2300      	movs	r3, #0
   149a8:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   149aa:	2396      	movs	r3, #150	; 0x96
   149ac:	005b      	lsls	r3, r3, #1
   149ae:	0018      	movs	r0, r3
   149b0:	4b28      	ldr	r3, [pc, #160]	; (14a54 <I2cWriteDataWait+0xbc>)
   149b2:	4798      	blx	r3
   149b4:	0003      	movs	r3, r0
   149b6:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   149b8:	68fb      	ldr	r3, [r7, #12]
   149ba:	2b00      	cmp	r3, #0
   149bc:	d138      	bne.n	14a30 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   149be:	2308      	movs	r3, #8
   149c0:	18fb      	adds	r3, r7, r3
   149c2:	0018      	movs	r0, r3
   149c4:	4b24      	ldr	r3, [pc, #144]	; (14a58 <I2cWriteDataWait+0xc0>)
   149c6:	4798      	blx	r3
   149c8:	0003      	movs	r3, r0
   149ca:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   149cc:	68fb      	ldr	r3, [r7, #12]
   149ce:	2b00      	cmp	r3, #0
   149d0:	d130      	bne.n	14a34 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   149d2:	687b      	ldr	r3, [r7, #4]
   149d4:	0018      	movs	r0, r3
   149d6:	4b21      	ldr	r3, [pc, #132]	; (14a5c <I2cWriteDataWait+0xc4>)
   149d8:	4798      	blx	r3
   149da:	0003      	movs	r3, r0
   149dc:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   149de:	68fb      	ldr	r3, [r7, #12]
   149e0:	2b00      	cmp	r3, #0
   149e2:	d12a      	bne.n	14a3a <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   149e4:	68bb      	ldr	r3, [r7, #8]
   149e6:	683a      	ldr	r2, [r7, #0]
   149e8:	0011      	movs	r1, r2
   149ea:	0018      	movs	r0, r3
   149ec:	4b1c      	ldr	r3, [pc, #112]	; (14a60 <I2cWriteDataWait+0xc8>)
   149ee:	4798      	blx	r3
   149f0:	0003      	movs	r3, r0
   149f2:	2b01      	cmp	r3, #1
   149f4:	d111      	bne.n	14a1a <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   149f6:	4b1b      	ldr	r3, [pc, #108]	; (14a64 <I2cWriteDataWait+0xcc>)
   149f8:	4798      	blx	r3
   149fa:	1e03      	subs	r3, r0, #0
   149fc:	d011      	beq.n	14a22 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   149fe:	2000      	movs	r0, #0
   14a00:	4b19      	ldr	r3, [pc, #100]	; (14a68 <I2cWriteDataWait+0xd0>)
   14a02:	4798      	blx	r3
            if (error != ERROR_NONE) {
   14a04:	68fb      	ldr	r3, [r7, #12]
   14a06:	2b00      	cmp	r3, #0
   14a08:	d003      	beq.n	14a12 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   14a0a:	2321      	movs	r3, #33	; 0x21
   14a0c:	425b      	negs	r3, r3
   14a0e:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   14a10:	e014      	b.n	14a3c <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   14a12:	2303      	movs	r3, #3
   14a14:	425b      	negs	r3, r3
   14a16:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   14a18:	e010      	b.n	14a3c <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14a1a:	2303      	movs	r3, #3
   14a1c:	425b      	negs	r3, r3
   14a1e:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   14a20:	e00c      	b.n	14a3c <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   14a22:	4b12      	ldr	r3, [pc, #72]	; (14a6c <I2cWriteDataWait+0xd4>)
   14a24:	4798      	blx	r3
   14a26:	0002      	movs	r2, r0
   14a28:	68fb      	ldr	r3, [r7, #12]
   14a2a:	4313      	orrs	r3, r2
   14a2c:	60fb      	str	r3, [r7, #12]
   14a2e:	e002      	b.n	14a36 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14a30:	46c0      	nop			; (mov r8, r8)
   14a32:	e000      	b.n	14a36 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14a34:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14a36:	68fb      	ldr	r3, [r7, #12]
   14a38:	e007      	b.n	14a4a <I2cWriteDataWait+0xb2>
        goto exitError0;
   14a3a:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   14a3c:	4b0b      	ldr	r3, [pc, #44]	; (14a6c <I2cWriteDataWait+0xd4>)
   14a3e:	4798      	blx	r3
   14a40:	0002      	movs	r2, r0
   14a42:	68fb      	ldr	r3, [r7, #12]
   14a44:	4313      	orrs	r3, r2
   14a46:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   14a48:	68fb      	ldr	r3, [r7, #12]
}
   14a4a:	0018      	movs	r0, r3
   14a4c:	46bd      	mov	sp, r7
   14a4e:	b004      	add	sp, #16
   14a50:	bd80      	pop	{r7, pc}
   14a52:	46c0      	nop			; (mov r8, r8)
   14a54:	00014909 	.word	0x00014909
   14a58:	00014941 	.word	0x00014941
   14a5c:	000147e1 	.word	0x000147e1
   14a60:	0001b90d 	.word	0x0001b90d
   14a64:	00014965 	.word	0x00014965
   14a68:	00014979 	.word	0x00014979
   14a6c:	000148d1 	.word	0x000148d1

00014a70 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   14a70:	b580      	push	{r7, lr}
   14a72:	b086      	sub	sp, #24
   14a74:	af00      	add	r7, sp, #0
   14a76:	60f8      	str	r0, [r7, #12]
   14a78:	60b9      	str	r1, [r7, #8]
   14a7a:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   14a7c:	2300      	movs	r3, #0
   14a7e:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   14a80:	2300      	movs	r3, #0
   14a82:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14a84:	2396      	movs	r3, #150	; 0x96
   14a86:	005b      	lsls	r3, r3, #1
   14a88:	0018      	movs	r0, r3
   14a8a:	4b35      	ldr	r3, [pc, #212]	; (14b60 <I2cReadDataWait+0xf0>)
   14a8c:	4798      	blx	r3
   14a8e:	0003      	movs	r3, r0
   14a90:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14a92:	697b      	ldr	r3, [r7, #20]
   14a94:	2b00      	cmp	r3, #0
   14a96:	d155      	bne.n	14b44 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14a98:	2310      	movs	r3, #16
   14a9a:	18fb      	adds	r3, r7, r3
   14a9c:	0018      	movs	r0, r3
   14a9e:	4b31      	ldr	r3, [pc, #196]	; (14b64 <I2cReadDataWait+0xf4>)
   14aa0:	4798      	blx	r3
   14aa2:	0003      	movs	r3, r0
   14aa4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14aa6:	697b      	ldr	r3, [r7, #20]
   14aa8:	2b00      	cmp	r3, #0
   14aaa:	d14d      	bne.n	14b48 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14aac:	68fb      	ldr	r3, [r7, #12]
   14aae:	0018      	movs	r0, r3
   14ab0:	4b2d      	ldr	r3, [pc, #180]	; (14b68 <I2cReadDataWait+0xf8>)
   14ab2:	4798      	blx	r3
   14ab4:	0003      	movs	r3, r0
   14ab6:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14ab8:	697b      	ldr	r3, [r7, #20]
   14aba:	2b00      	cmp	r3, #0
   14abc:	d147      	bne.n	14b4e <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14abe:	693b      	ldr	r3, [r7, #16]
   14ac0:	687a      	ldr	r2, [r7, #4]
   14ac2:	0011      	movs	r1, r2
   14ac4:	0018      	movs	r0, r3
   14ac6:	4b29      	ldr	r3, [pc, #164]	; (14b6c <I2cReadDataWait+0xfc>)
   14ac8:	4798      	blx	r3
   14aca:	0003      	movs	r3, r0
   14acc:	2b01      	cmp	r3, #1
   14ace:	d118      	bne.n	14b02 <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14ad0:	4b27      	ldr	r3, [pc, #156]	; (14b70 <I2cReadDataWait+0x100>)
   14ad2:	4798      	blx	r3
   14ad4:	1e03      	subs	r3, r0, #0
   14ad6:	d006      	beq.n	14ae6 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14ad8:	2000      	movs	r0, #0
   14ada:	4b26      	ldr	r3, [pc, #152]	; (14b74 <I2cReadDataWait+0x104>)
   14adc:	4798      	blx	r3
            error = ERROR_ABORTED;
   14ade:	2303      	movs	r3, #3
   14ae0:	425b      	negs	r3, r3
   14ae2:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14ae4:	e034      	b.n	14b50 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   14ae6:	68bb      	ldr	r3, [r7, #8]
   14ae8:	0018      	movs	r0, r3
   14aea:	4b23      	ldr	r3, [pc, #140]	; (14b78 <I2cReadDataWait+0x108>)
   14aec:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   14aee:	68fb      	ldr	r3, [r7, #12]
   14af0:	0018      	movs	r0, r3
   14af2:	4b22      	ldr	r3, [pc, #136]	; (14b7c <I2cReadDataWait+0x10c>)
   14af4:	4798      	blx	r3
   14af6:	0003      	movs	r3, r0
   14af8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14afa:	697b      	ldr	r3, [r7, #20]
   14afc:	2b00      	cmp	r3, #0
   14afe:	d004      	beq.n	14b0a <I2cReadDataWait+0x9a>
        goto exitError0;
   14b00:	e026      	b.n	14b50 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   14b02:	2303      	movs	r3, #3
   14b04:	425b      	negs	r3, r3
   14b06:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14b08:	e022      	b.n	14b50 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14b0a:	693b      	ldr	r3, [r7, #16]
   14b0c:	687a      	ldr	r2, [r7, #4]
   14b0e:	0011      	movs	r1, r2
   14b10:	0018      	movs	r0, r3
   14b12:	4b16      	ldr	r3, [pc, #88]	; (14b6c <I2cReadDataWait+0xfc>)
   14b14:	4798      	blx	r3
   14b16:	0003      	movs	r3, r0
   14b18:	2b01      	cmp	r3, #1
   14b1a:	d10a      	bne.n	14b32 <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14b1c:	4b14      	ldr	r3, [pc, #80]	; (14b70 <I2cReadDataWait+0x100>)
   14b1e:	4798      	blx	r3
   14b20:	1e03      	subs	r3, r0, #0
   14b22:	d00a      	beq.n	14b3a <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   14b24:	2000      	movs	r0, #0
   14b26:	4b13      	ldr	r3, [pc, #76]	; (14b74 <I2cReadDataWait+0x104>)
   14b28:	4798      	blx	r3
            error = ERROR_ABORTED;
   14b2a:	2303      	movs	r3, #3
   14b2c:	425b      	negs	r3, r3
   14b2e:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14b30:	e00e      	b.n	14b50 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14b32:	2303      	movs	r3, #3
   14b34:	425b      	negs	r3, r3
   14b36:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14b38:	e00a      	b.n	14b50 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   14b3a:	4b11      	ldr	r3, [pc, #68]	; (14b80 <I2cReadDataWait+0x110>)
   14b3c:	4798      	blx	r3
   14b3e:	0003      	movs	r3, r0
   14b40:	617b      	str	r3, [r7, #20]
   14b42:	e002      	b.n	14b4a <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14b44:	46c0      	nop			; (mov r8, r8)
   14b46:	e000      	b.n	14b4a <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14b48:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14b4a:	697b      	ldr	r3, [r7, #20]
   14b4c:	e003      	b.n	14b56 <I2cReadDataWait+0xe6>
        goto exitError0;
   14b4e:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   14b50:	4b0b      	ldr	r3, [pc, #44]	; (14b80 <I2cReadDataWait+0x110>)
   14b52:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14b54:	697b      	ldr	r3, [r7, #20]
}
   14b56:	0018      	movs	r0, r3
   14b58:	46bd      	mov	sp, r7
   14b5a:	b006      	add	sp, #24
   14b5c:	bd80      	pop	{r7, pc}
   14b5e:	46c0      	nop			; (mov r8, r8)
   14b60:	00014909 	.word	0x00014909
   14b64:	00014941 	.word	0x00014941
   14b68:	000147e1 	.word	0x000147e1
   14b6c:	0001b90d 	.word	0x0001b90d
   14b70:	00014965 	.word	0x00014965
   14b74:	00014979 	.word	0x00014979
   14b78:	0001c661 	.word	0x0001c661
   14b7c:	00014859 	.word	0x00014859
   14b80:	000148d1 	.word	0x000148d1

00014b84 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   14b84:	b5b0      	push	{r4, r5, r7, lr}
   14b86:	b086      	sub	sp, #24
   14b88:	af00      	add	r7, sp, #0
   14b8a:	60f8      	str	r0, [r7, #12]
   14b8c:	0008      	movs	r0, r1
   14b8e:	607a      	str	r2, [r7, #4]
   14b90:	0019      	movs	r1, r3
   14b92:	230b      	movs	r3, #11
   14b94:	18fb      	adds	r3, r7, r3
   14b96:	1c02      	adds	r2, r0, #0
   14b98:	701a      	strb	r2, [r3, #0]
   14b9a:	2308      	movs	r3, #8
   14b9c:	18fb      	adds	r3, r7, r3
   14b9e:	1c0a      	adds	r2, r1, #0
   14ba0:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   14ba2:	68fb      	ldr	r3, [r7, #12]
   14ba4:	685c      	ldr	r4, [r3, #4]
   14ba6:	68fb      	ldr	r3, [r7, #12]
   14ba8:	6898      	ldr	r0, [r3, #8]
   14baa:	2308      	movs	r3, #8
   14bac:	18fb      	adds	r3, r7, r3
   14bae:	881d      	ldrh	r5, [r3, #0]
   14bb0:	687a      	ldr	r2, [r7, #4]
   14bb2:	230b      	movs	r3, #11
   14bb4:	18fb      	adds	r3, r7, r3
   14bb6:	7819      	ldrb	r1, [r3, #0]
   14bb8:	002b      	movs	r3, r5
   14bba:	47a0      	blx	r4
   14bbc:	0003      	movs	r3, r0
   14bbe:	617b      	str	r3, [r7, #20]

  return ret;
   14bc0:	697b      	ldr	r3, [r7, #20]
}
   14bc2:	0018      	movs	r0, r3
   14bc4:	46bd      	mov	sp, r7
   14bc6:	b006      	add	sp, #24
   14bc8:	bdb0      	pop	{r4, r5, r7, pc}

00014bca <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   14bca:	b5b0      	push	{r4, r5, r7, lr}
   14bcc:	b086      	sub	sp, #24
   14bce:	af00      	add	r7, sp, #0
   14bd0:	60f8      	str	r0, [r7, #12]
   14bd2:	0008      	movs	r0, r1
   14bd4:	607a      	str	r2, [r7, #4]
   14bd6:	0019      	movs	r1, r3
   14bd8:	230b      	movs	r3, #11
   14bda:	18fb      	adds	r3, r7, r3
   14bdc:	1c02      	adds	r2, r0, #0
   14bde:	701a      	strb	r2, [r3, #0]
   14be0:	2308      	movs	r3, #8
   14be2:	18fb      	adds	r3, r7, r3
   14be4:	1c0a      	adds	r2, r1, #0
   14be6:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   14be8:	68fb      	ldr	r3, [r7, #12]
   14bea:	681c      	ldr	r4, [r3, #0]
   14bec:	68fb      	ldr	r3, [r7, #12]
   14bee:	6898      	ldr	r0, [r3, #8]
   14bf0:	2308      	movs	r3, #8
   14bf2:	18fb      	adds	r3, r7, r3
   14bf4:	881d      	ldrh	r5, [r3, #0]
   14bf6:	687a      	ldr	r2, [r7, #4]
   14bf8:	230b      	movs	r3, #11
   14bfa:	18fb      	adds	r3, r7, r3
   14bfc:	7819      	ldrb	r1, [r3, #0]
   14bfe:	002b      	movs	r3, r5
   14c00:	47a0      	blx	r4
   14c02:	0003      	movs	r3, r0
   14c04:	617b      	str	r3, [r7, #20]

  return ret;
   14c06:	697b      	ldr	r3, [r7, #20]
}
   14c08:	0018      	movs	r0, r3
   14c0a:	46bd      	mov	sp, r7
   14c0c:	b006      	add	sp, #24
   14c0e:	bdb0      	pop	{r4, r5, r7, pc}

00014c10 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   14c10:	b580      	push	{r7, lr}
   14c12:	b082      	sub	sp, #8
   14c14:	af00      	add	r7, sp, #0
   14c16:	0002      	movs	r2, r0
   14c18:	1dbb      	adds	r3, r7, #6
   14c1a:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   14c1c:	1dbb      	adds	r3, r7, #6
   14c1e:	2200      	movs	r2, #0
   14c20:	5e9a      	ldrsh	r2, [r3, r2]
   14c22:	4b06      	ldr	r3, [pc, #24]	; (14c3c <lsm6dso_from_fs2_to_mg+0x2c>)
   14c24:	0010      	movs	r0, r2
   14c26:	4798      	blx	r3
   14c28:	1c02      	adds	r2, r0, #0
   14c2a:	4b05      	ldr	r3, [pc, #20]	; (14c40 <lsm6dso_from_fs2_to_mg+0x30>)
   14c2c:	4905      	ldr	r1, [pc, #20]	; (14c44 <lsm6dso_from_fs2_to_mg+0x34>)
   14c2e:	1c10      	adds	r0, r2, #0
   14c30:	4798      	blx	r3
   14c32:	1c03      	adds	r3, r0, #0
}
   14c34:	1c18      	adds	r0, r3, #0
   14c36:	46bd      	mov	sp, r7
   14c38:	b002      	add	sp, #8
   14c3a:	bd80      	pop	{r7, pc}
   14c3c:	00033549 	.word	0x00033549
   14c40:	000332c9 	.word	0x000332c9
   14c44:	3d79db23 	.word	0x3d79db23

00014c48 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   14c48:	b590      	push	{r4, r7, lr}
   14c4a:	b085      	sub	sp, #20
   14c4c:	af00      	add	r7, sp, #0
   14c4e:	6078      	str	r0, [r7, #4]
   14c50:	000a      	movs	r2, r1
   14c52:	1cfb      	adds	r3, r7, #3
   14c54:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14c56:	2308      	movs	r3, #8
   14c58:	18fa      	adds	r2, r7, r3
   14c5a:	6878      	ldr	r0, [r7, #4]
   14c5c:	2301      	movs	r3, #1
   14c5e:	2110      	movs	r1, #16
   14c60:	4c12      	ldr	r4, [pc, #72]	; (14cac <lsm6dso_xl_full_scale_set+0x64>)
   14c62:	47a0      	blx	r4
   14c64:	0003      	movs	r3, r0
   14c66:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14c68:	68fb      	ldr	r3, [r7, #12]
   14c6a:	2b00      	cmp	r3, #0
   14c6c:	d119      	bne.n	14ca2 <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   14c6e:	1cfb      	adds	r3, r7, #3
   14c70:	781b      	ldrb	r3, [r3, #0]
   14c72:	2203      	movs	r2, #3
   14c74:	4013      	ands	r3, r2
   14c76:	b2da      	uxtb	r2, r3
   14c78:	2308      	movs	r3, #8
   14c7a:	18fb      	adds	r3, r7, r3
   14c7c:	2103      	movs	r1, #3
   14c7e:	400a      	ands	r2, r1
   14c80:	0090      	lsls	r0, r2, #2
   14c82:	781a      	ldrb	r2, [r3, #0]
   14c84:	210c      	movs	r1, #12
   14c86:	438a      	bics	r2, r1
   14c88:	1c11      	adds	r1, r2, #0
   14c8a:	1c02      	adds	r2, r0, #0
   14c8c:	430a      	orrs	r2, r1
   14c8e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14c90:	2308      	movs	r3, #8
   14c92:	18fa      	adds	r2, r7, r3
   14c94:	6878      	ldr	r0, [r7, #4]
   14c96:	2301      	movs	r3, #1
   14c98:	2110      	movs	r1, #16
   14c9a:	4c05      	ldr	r4, [pc, #20]	; (14cb0 <lsm6dso_xl_full_scale_set+0x68>)
   14c9c:	47a0      	blx	r4
   14c9e:	0003      	movs	r3, r0
   14ca0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14ca2:	68fb      	ldr	r3, [r7, #12]
}
   14ca4:	0018      	movs	r0, r3
   14ca6:	46bd      	mov	sp, r7
   14ca8:	b005      	add	sp, #20
   14caa:	bd90      	pop	{r4, r7, pc}
   14cac:	00014b85 	.word	0x00014b85
   14cb0:	00014bcb 	.word	0x00014bcb

00014cb4 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   14cb4:	b590      	push	{r4, r7, lr}
   14cb6:	b087      	sub	sp, #28
   14cb8:	af00      	add	r7, sp, #0
   14cba:	6078      	str	r0, [r7, #4]
   14cbc:	000a      	movs	r2, r1
   14cbe:	1cfb      	adds	r3, r7, #3
   14cc0:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   14cc2:	2317      	movs	r3, #23
   14cc4:	18fb      	adds	r3, r7, r3
   14cc6:	1cfa      	adds	r2, r7, #3
   14cc8:	7812      	ldrb	r2, [r2, #0]
   14cca:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   14ccc:	230c      	movs	r3, #12
   14cce:	18fa      	adds	r2, r7, r3
   14cd0:	687b      	ldr	r3, [r7, #4]
   14cd2:	0011      	movs	r1, r2
   14cd4:	0018      	movs	r0, r3
   14cd6:	4ba4      	ldr	r3, [pc, #656]	; (14f68 <lsm6dso_xl_data_rate_set+0x2b4>)
   14cd8:	4798      	blx	r3
   14cda:	0003      	movs	r3, r0
   14cdc:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   14cde:	693b      	ldr	r3, [r7, #16]
   14ce0:	2b00      	cmp	r3, #0
   14ce2:	d000      	beq.n	14ce6 <lsm6dso_xl_data_rate_set+0x32>
   14ce4:	e113      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14ce6:	230c      	movs	r3, #12
   14ce8:	18fb      	adds	r3, r7, r3
   14cea:	781b      	ldrb	r3, [r3, #0]
   14cec:	07db      	lsls	r3, r3, #31
   14cee:	0fdb      	lsrs	r3, r3, #31
   14cf0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14cf2:	230c      	movs	r3, #12
   14cf4:	18fb      	adds	r3, r7, r3
   14cf6:	781b      	ldrb	r3, [r3, #0]
   14cf8:	079b      	lsls	r3, r3, #30
   14cfa:	0fdb      	lsrs	r3, r3, #31
   14cfc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14cfe:	4313      	orrs	r3, r2
   14d00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14d02:	230c      	movs	r3, #12
   14d04:	18fb      	adds	r3, r7, r3
   14d06:	781b      	ldrb	r3, [r3, #0]
   14d08:	075b      	lsls	r3, r3, #29
   14d0a:	0fdb      	lsrs	r3, r3, #31
   14d0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14d0e:	4313      	orrs	r3, r2
   14d10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14d12:	230c      	movs	r3, #12
   14d14:	18fb      	adds	r3, r7, r3
   14d16:	781b      	ldrb	r3, [r3, #0]
   14d18:	071b      	lsls	r3, r3, #28
   14d1a:	0fdb      	lsrs	r3, r3, #31
   14d1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14d1e:	4313      	orrs	r3, r2
   14d20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14d22:	230c      	movs	r3, #12
   14d24:	18fb      	adds	r3, r7, r3
   14d26:	781b      	ldrb	r3, [r3, #0]
   14d28:	06db      	lsls	r3, r3, #27
   14d2a:	0fdb      	lsrs	r3, r3, #31
   14d2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14d2e:	4313      	orrs	r3, r2
   14d30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14d32:	230c      	movs	r3, #12
   14d34:	18fb      	adds	r3, r7, r3
   14d36:	781b      	ldrb	r3, [r3, #0]
   14d38:	069b      	lsls	r3, r3, #26
   14d3a:	0fdb      	lsrs	r3, r3, #31
   14d3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14d3e:	4313      	orrs	r3, r2
   14d40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14d42:	230c      	movs	r3, #12
   14d44:	18fb      	adds	r3, r7, r3
   14d46:	781b      	ldrb	r3, [r3, #0]
   14d48:	065b      	lsls	r3, r3, #25
   14d4a:	0fdb      	lsrs	r3, r3, #31
   14d4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14d4e:	4313      	orrs	r3, r2
   14d50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14d52:	230c      	movs	r3, #12
   14d54:	18fb      	adds	r3, r7, r3
   14d56:	781b      	ldrb	r3, [r3, #0]
   14d58:	061b      	lsls	r3, r3, #24
   14d5a:	0fdb      	lsrs	r3, r3, #31
   14d5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14d5e:	4313      	orrs	r3, r2
   14d60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14d62:	230c      	movs	r3, #12
   14d64:	18fb      	adds	r3, r7, r3
   14d66:	785b      	ldrb	r3, [r3, #1]
   14d68:	07db      	lsls	r3, r3, #31
   14d6a:	0fdb      	lsrs	r3, r3, #31
   14d6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14d6e:	4313      	orrs	r3, r2
   14d70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14d72:	230c      	movs	r3, #12
   14d74:	18fb      	adds	r3, r7, r3
   14d76:	785b      	ldrb	r3, [r3, #1]
   14d78:	079b      	lsls	r3, r3, #30
   14d7a:	0fdb      	lsrs	r3, r3, #31
   14d7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14d7e:	4313      	orrs	r3, r2
   14d80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14d82:	230c      	movs	r3, #12
   14d84:	18fb      	adds	r3, r7, r3
   14d86:	785b      	ldrb	r3, [r3, #1]
   14d88:	075b      	lsls	r3, r3, #29
   14d8a:	0fdb      	lsrs	r3, r3, #31
   14d8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14d8e:	4313      	orrs	r3, r2
   14d90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14d92:	230c      	movs	r3, #12
   14d94:	18fb      	adds	r3, r7, r3
   14d96:	785b      	ldrb	r3, [r3, #1]
   14d98:	071b      	lsls	r3, r3, #28
   14d9a:	0fdb      	lsrs	r3, r3, #31
   14d9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14d9e:	4313      	orrs	r3, r2
   14da0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14da2:	230c      	movs	r3, #12
   14da4:	18fb      	adds	r3, r7, r3
   14da6:	785b      	ldrb	r3, [r3, #1]
   14da8:	06db      	lsls	r3, r3, #27
   14daa:	0fdb      	lsrs	r3, r3, #31
   14dac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14dae:	4313      	orrs	r3, r2
   14db0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14db2:	230c      	movs	r3, #12
   14db4:	18fb      	adds	r3, r7, r3
   14db6:	785b      	ldrb	r3, [r3, #1]
   14db8:	069b      	lsls	r3, r3, #26
   14dba:	0fdb      	lsrs	r3, r3, #31
   14dbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14dbe:	4313      	orrs	r3, r2
   14dc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14dc2:	230c      	movs	r3, #12
   14dc4:	18fb      	adds	r3, r7, r3
   14dc6:	785b      	ldrb	r3, [r3, #1]
   14dc8:	065b      	lsls	r3, r3, #25
   14dca:	0fdb      	lsrs	r3, r3, #31
   14dcc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14dce:	4313      	orrs	r3, r2
   14dd0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   14dd2:	230c      	movs	r3, #12
   14dd4:	18fb      	adds	r3, r7, r3
   14dd6:	785b      	ldrb	r3, [r3, #1]
   14dd8:	061b      	lsls	r3, r3, #24
   14dda:	0fdb      	lsrs	r3, r3, #31
   14ddc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14dde:	4313      	orrs	r3, r2
   14de0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14de2:	2b01      	cmp	r3, #1
   14de4:	d000      	beq.n	14de8 <lsm6dso_xl_data_rate_set+0x134>
   14de6:	e092      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   14de8:	230b      	movs	r3, #11
   14dea:	18fa      	adds	r2, r7, r3
   14dec:	687b      	ldr	r3, [r7, #4]
   14dee:	0011      	movs	r1, r2
   14df0:	0018      	movs	r0, r3
   14df2:	4b5e      	ldr	r3, [pc, #376]	; (14f6c <lsm6dso_xl_data_rate_set+0x2b8>)
   14df4:	4798      	blx	r3
   14df6:	0003      	movs	r3, r0
   14df8:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   14dfa:	693b      	ldr	r3, [r7, #16]
   14dfc:	2b00      	cmp	r3, #0
   14dfe:	d000      	beq.n	14e02 <lsm6dso_xl_data_rate_set+0x14e>
   14e00:	e085      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   14e02:	230b      	movs	r3, #11
   14e04:	18fb      	adds	r3, r7, r3
   14e06:	781b      	ldrb	r3, [r3, #0]
   14e08:	2b01      	cmp	r3, #1
   14e0a:	d017      	beq.n	14e3c <lsm6dso_xl_data_rate_set+0x188>
   14e0c:	dc02      	bgt.n	14e14 <lsm6dso_xl_data_rate_set+0x160>
   14e0e:	2b00      	cmp	r3, #0
   14e10:	d005      	beq.n	14e1e <lsm6dso_xl_data_rate_set+0x16a>
   14e12:	e076      	b.n	14f02 <lsm6dso_xl_data_rate_set+0x24e>
   14e14:	2b02      	cmp	r3, #2
   14e16:	d029      	beq.n	14e6c <lsm6dso_xl_data_rate_set+0x1b8>
   14e18:	2b03      	cmp	r3, #3
   14e1a:	d048      	beq.n	14eae <lsm6dso_xl_data_rate_set+0x1fa>
   14e1c:	e071      	b.n	14f02 <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   14e1e:	1cfb      	adds	r3, r7, #3
   14e20:	781b      	ldrb	r3, [r3, #0]
   14e22:	2b00      	cmp	r3, #0
   14e24:	d104      	bne.n	14e30 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   14e26:	2317      	movs	r3, #23
   14e28:	18fb      	adds	r3, r7, r3
   14e2a:	2201      	movs	r2, #1
   14e2c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14e2e:	e06e      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14e30:	2317      	movs	r3, #23
   14e32:	18fb      	adds	r3, r7, r3
   14e34:	1cfa      	adds	r2, r7, #3
   14e36:	7812      	ldrb	r2, [r2, #0]
   14e38:	701a      	strb	r2, [r3, #0]
            break;
   14e3a:	e068      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14e3c:	1cfb      	adds	r3, r7, #3
   14e3e:	781b      	ldrb	r3, [r3, #0]
   14e40:	2b00      	cmp	r3, #0
   14e42:	d104      	bne.n	14e4e <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14e44:	2317      	movs	r3, #23
   14e46:	18fb      	adds	r3, r7, r3
   14e48:	2202      	movs	r2, #2
   14e4a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14e4c:	e05f      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14e4e:	1cfb      	adds	r3, r7, #3
   14e50:	781b      	ldrb	r3, [r3, #0]
   14e52:	2b01      	cmp	r3, #1
   14e54:	d104      	bne.n	14e60 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14e56:	2317      	movs	r3, #23
   14e58:	18fb      	adds	r3, r7, r3
   14e5a:	2202      	movs	r2, #2
   14e5c:	701a      	strb	r2, [r3, #0]
            break;
   14e5e:	e056      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14e60:	2317      	movs	r3, #23
   14e62:	18fb      	adds	r3, r7, r3
   14e64:	1cfa      	adds	r2, r7, #3
   14e66:	7812      	ldrb	r2, [r2, #0]
   14e68:	701a      	strb	r2, [r3, #0]
            break;
   14e6a:	e050      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14e6c:	1cfb      	adds	r3, r7, #3
   14e6e:	781b      	ldrb	r3, [r3, #0]
   14e70:	2b00      	cmp	r3, #0
   14e72:	d104      	bne.n	14e7e <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14e74:	2317      	movs	r3, #23
   14e76:	18fb      	adds	r3, r7, r3
   14e78:	2203      	movs	r2, #3
   14e7a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14e7c:	e047      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14e7e:	1cfb      	adds	r3, r7, #3
   14e80:	781b      	ldrb	r3, [r3, #0]
   14e82:	2b01      	cmp	r3, #1
   14e84:	d104      	bne.n	14e90 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14e86:	2317      	movs	r3, #23
   14e88:	18fb      	adds	r3, r7, r3
   14e8a:	2203      	movs	r2, #3
   14e8c:	701a      	strb	r2, [r3, #0]
            break;
   14e8e:	e03e      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   14e90:	1cfb      	adds	r3, r7, #3
   14e92:	781b      	ldrb	r3, [r3, #0]
   14e94:	2b02      	cmp	r3, #2
   14e96:	d104      	bne.n	14ea2 <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14e98:	2317      	movs	r3, #23
   14e9a:	18fb      	adds	r3, r7, r3
   14e9c:	2203      	movs	r2, #3
   14e9e:	701a      	strb	r2, [r3, #0]
            break;
   14ea0:	e035      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14ea2:	2317      	movs	r3, #23
   14ea4:	18fb      	adds	r3, r7, r3
   14ea6:	1cfa      	adds	r2, r7, #3
   14ea8:	7812      	ldrb	r2, [r2, #0]
   14eaa:	701a      	strb	r2, [r3, #0]
            break;
   14eac:	e02f      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14eae:	1cfb      	adds	r3, r7, #3
   14eb0:	781b      	ldrb	r3, [r3, #0]
   14eb2:	2b00      	cmp	r3, #0
   14eb4:	d104      	bne.n	14ec0 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14eb6:	2317      	movs	r3, #23
   14eb8:	18fb      	adds	r3, r7, r3
   14eba:	2204      	movs	r2, #4
   14ebc:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14ebe:	e026      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14ec0:	1cfb      	adds	r3, r7, #3
   14ec2:	781b      	ldrb	r3, [r3, #0]
   14ec4:	2b01      	cmp	r3, #1
   14ec6:	d104      	bne.n	14ed2 <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14ec8:	2317      	movs	r3, #23
   14eca:	18fb      	adds	r3, r7, r3
   14ecc:	2204      	movs	r2, #4
   14ece:	701a      	strb	r2, [r3, #0]
            break;
   14ed0:	e01d      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   14ed2:	1cfb      	adds	r3, r7, #3
   14ed4:	781b      	ldrb	r3, [r3, #0]
   14ed6:	2b02      	cmp	r3, #2
   14ed8:	d104      	bne.n	14ee4 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14eda:	2317      	movs	r3, #23
   14edc:	18fb      	adds	r3, r7, r3
   14ede:	2204      	movs	r2, #4
   14ee0:	701a      	strb	r2, [r3, #0]
            break;
   14ee2:	e014      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   14ee4:	1cfb      	adds	r3, r7, #3
   14ee6:	781b      	ldrb	r3, [r3, #0]
   14ee8:	2b03      	cmp	r3, #3
   14eea:	d104      	bne.n	14ef6 <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14eec:	2317      	movs	r3, #23
   14eee:	18fb      	adds	r3, r7, r3
   14ef0:	2204      	movs	r2, #4
   14ef2:	701a      	strb	r2, [r3, #0]
            break;
   14ef4:	e00b      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14ef6:	2317      	movs	r3, #23
   14ef8:	18fb      	adds	r3, r7, r3
   14efa:	1cfa      	adds	r2, r7, #3
   14efc:	7812      	ldrb	r2, [r2, #0]
   14efe:	701a      	strb	r2, [r3, #0]
            break;
   14f00:	e005      	b.n	14f0e <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   14f02:	2317      	movs	r3, #23
   14f04:	18fb      	adds	r3, r7, r3
   14f06:	1cfa      	adds	r2, r7, #3
   14f08:	7812      	ldrb	r2, [r2, #0]
   14f0a:	701a      	strb	r2, [r3, #0]
            break;
   14f0c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   14f0e:	693b      	ldr	r3, [r7, #16]
   14f10:	2b00      	cmp	r3, #0
   14f12:	d108      	bne.n	14f26 <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14f14:	2308      	movs	r3, #8
   14f16:	18fa      	adds	r2, r7, r3
   14f18:	6878      	ldr	r0, [r7, #4]
   14f1a:	2301      	movs	r3, #1
   14f1c:	2110      	movs	r1, #16
   14f1e:	4c14      	ldr	r4, [pc, #80]	; (14f70 <lsm6dso_xl_data_rate_set+0x2bc>)
   14f20:	47a0      	blx	r4
   14f22:	0003      	movs	r3, r0
   14f24:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   14f26:	693b      	ldr	r3, [r7, #16]
   14f28:	2b00      	cmp	r3, #0
   14f2a:	d118      	bne.n	14f5e <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   14f2c:	2317      	movs	r3, #23
   14f2e:	18fb      	adds	r3, r7, r3
   14f30:	781b      	ldrb	r3, [r3, #0]
   14f32:	220f      	movs	r2, #15
   14f34:	4013      	ands	r3, r2
   14f36:	b2da      	uxtb	r2, r3
   14f38:	2308      	movs	r3, #8
   14f3a:	18fb      	adds	r3, r7, r3
   14f3c:	0110      	lsls	r0, r2, #4
   14f3e:	781a      	ldrb	r2, [r3, #0]
   14f40:	210f      	movs	r1, #15
   14f42:	400a      	ands	r2, r1
   14f44:	1c11      	adds	r1, r2, #0
   14f46:	1c02      	adds	r2, r0, #0
   14f48:	430a      	orrs	r2, r1
   14f4a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14f4c:	2308      	movs	r3, #8
   14f4e:	18fa      	adds	r2, r7, r3
   14f50:	6878      	ldr	r0, [r7, #4]
   14f52:	2301      	movs	r3, #1
   14f54:	2110      	movs	r1, #16
   14f56:	4c07      	ldr	r4, [pc, #28]	; (14f74 <lsm6dso_xl_data_rate_set+0x2c0>)
   14f58:	47a0      	blx	r4
   14f5a:	0003      	movs	r3, r0
   14f5c:	613b      	str	r3, [r7, #16]
  }

  return ret;
   14f5e:	693b      	ldr	r3, [r7, #16]
}
   14f60:	0018      	movs	r0, r3
   14f62:	46bd      	mov	sp, r7
   14f64:	b007      	add	sp, #28
   14f66:	bd90      	pop	{r4, r7, pc}
   14f68:	00015791 	.word	0x00015791
   14f6c:	000157e5 	.word	0x000157e5
   14f70:	00014b85 	.word	0x00014b85
   14f74:	00014bcb 	.word	0x00014bcb

00014f78 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   14f78:	b590      	push	{r4, r7, lr}
   14f7a:	b085      	sub	sp, #20
   14f7c:	af00      	add	r7, sp, #0
   14f7e:	6078      	str	r0, [r7, #4]
   14f80:	000a      	movs	r2, r1
   14f82:	1cfb      	adds	r3, r7, #3
   14f84:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14f86:	2308      	movs	r3, #8
   14f88:	18fa      	adds	r2, r7, r3
   14f8a:	6878      	ldr	r0, [r7, #4]
   14f8c:	2301      	movs	r3, #1
   14f8e:	2111      	movs	r1, #17
   14f90:	4c12      	ldr	r4, [pc, #72]	; (14fdc <lsm6dso_gy_full_scale_set+0x64>)
   14f92:	47a0      	blx	r4
   14f94:	0003      	movs	r3, r0
   14f96:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14f98:	68fb      	ldr	r3, [r7, #12]
   14f9a:	2b00      	cmp	r3, #0
   14f9c:	d119      	bne.n	14fd2 <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   14f9e:	1cfb      	adds	r3, r7, #3
   14fa0:	781b      	ldrb	r3, [r3, #0]
   14fa2:	2207      	movs	r2, #7
   14fa4:	4013      	ands	r3, r2
   14fa6:	b2da      	uxtb	r2, r3
   14fa8:	2308      	movs	r3, #8
   14faa:	18fb      	adds	r3, r7, r3
   14fac:	2107      	movs	r1, #7
   14fae:	400a      	ands	r2, r1
   14fb0:	1890      	adds	r0, r2, r2
   14fb2:	781a      	ldrb	r2, [r3, #0]
   14fb4:	210e      	movs	r1, #14
   14fb6:	438a      	bics	r2, r1
   14fb8:	1c11      	adds	r1, r2, #0
   14fba:	1c02      	adds	r2, r0, #0
   14fbc:	430a      	orrs	r2, r1
   14fbe:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14fc0:	2308      	movs	r3, #8
   14fc2:	18fa      	adds	r2, r7, r3
   14fc4:	6878      	ldr	r0, [r7, #4]
   14fc6:	2301      	movs	r3, #1
   14fc8:	2111      	movs	r1, #17
   14fca:	4c05      	ldr	r4, [pc, #20]	; (14fe0 <lsm6dso_gy_full_scale_set+0x68>)
   14fcc:	47a0      	blx	r4
   14fce:	0003      	movs	r3, r0
   14fd0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14fd2:	68fb      	ldr	r3, [r7, #12]
}
   14fd4:	0018      	movs	r0, r3
   14fd6:	46bd      	mov	sp, r7
   14fd8:	b005      	add	sp, #20
   14fda:	bd90      	pop	{r4, r7, pc}
   14fdc:	00014b85 	.word	0x00014b85
   14fe0:	00014bcb 	.word	0x00014bcb

00014fe4 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   14fe4:	b590      	push	{r4, r7, lr}
   14fe6:	b087      	sub	sp, #28
   14fe8:	af00      	add	r7, sp, #0
   14fea:	6078      	str	r0, [r7, #4]
   14fec:	000a      	movs	r2, r1
   14fee:	1cfb      	adds	r3, r7, #3
   14ff0:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   14ff2:	2317      	movs	r3, #23
   14ff4:	18fb      	adds	r3, r7, r3
   14ff6:	1cfa      	adds	r2, r7, #3
   14ff8:	7812      	ldrb	r2, [r2, #0]
   14ffa:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   14ffc:	230c      	movs	r3, #12
   14ffe:	18fa      	adds	r2, r7, r3
   15000:	687b      	ldr	r3, [r7, #4]
   15002:	0011      	movs	r1, r2
   15004:	0018      	movs	r0, r3
   15006:	4ba4      	ldr	r3, [pc, #656]	; (15298 <lsm6dso_gy_data_rate_set+0x2b4>)
   15008:	4798      	blx	r3
   1500a:	0003      	movs	r3, r0
   1500c:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   1500e:	693b      	ldr	r3, [r7, #16]
   15010:	2b00      	cmp	r3, #0
   15012:	d000      	beq.n	15016 <lsm6dso_gy_data_rate_set+0x32>
   15014:	e113      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15016:	230c      	movs	r3, #12
   15018:	18fb      	adds	r3, r7, r3
   1501a:	781b      	ldrb	r3, [r3, #0]
   1501c:	07db      	lsls	r3, r3, #31
   1501e:	0fdb      	lsrs	r3, r3, #31
   15020:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15022:	230c      	movs	r3, #12
   15024:	18fb      	adds	r3, r7, r3
   15026:	781b      	ldrb	r3, [r3, #0]
   15028:	079b      	lsls	r3, r3, #30
   1502a:	0fdb      	lsrs	r3, r3, #31
   1502c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1502e:	4313      	orrs	r3, r2
   15030:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15032:	230c      	movs	r3, #12
   15034:	18fb      	adds	r3, r7, r3
   15036:	781b      	ldrb	r3, [r3, #0]
   15038:	075b      	lsls	r3, r3, #29
   1503a:	0fdb      	lsrs	r3, r3, #31
   1503c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1503e:	4313      	orrs	r3, r2
   15040:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15042:	230c      	movs	r3, #12
   15044:	18fb      	adds	r3, r7, r3
   15046:	781b      	ldrb	r3, [r3, #0]
   15048:	071b      	lsls	r3, r3, #28
   1504a:	0fdb      	lsrs	r3, r3, #31
   1504c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1504e:	4313      	orrs	r3, r2
   15050:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15052:	230c      	movs	r3, #12
   15054:	18fb      	adds	r3, r7, r3
   15056:	781b      	ldrb	r3, [r3, #0]
   15058:	06db      	lsls	r3, r3, #27
   1505a:	0fdb      	lsrs	r3, r3, #31
   1505c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1505e:	4313      	orrs	r3, r2
   15060:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15062:	230c      	movs	r3, #12
   15064:	18fb      	adds	r3, r7, r3
   15066:	781b      	ldrb	r3, [r3, #0]
   15068:	069b      	lsls	r3, r3, #26
   1506a:	0fdb      	lsrs	r3, r3, #31
   1506c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1506e:	4313      	orrs	r3, r2
   15070:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15072:	230c      	movs	r3, #12
   15074:	18fb      	adds	r3, r7, r3
   15076:	781b      	ldrb	r3, [r3, #0]
   15078:	065b      	lsls	r3, r3, #25
   1507a:	0fdb      	lsrs	r3, r3, #31
   1507c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1507e:	4313      	orrs	r3, r2
   15080:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15082:	230c      	movs	r3, #12
   15084:	18fb      	adds	r3, r7, r3
   15086:	781b      	ldrb	r3, [r3, #0]
   15088:	061b      	lsls	r3, r3, #24
   1508a:	0fdb      	lsrs	r3, r3, #31
   1508c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1508e:	4313      	orrs	r3, r2
   15090:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15092:	230c      	movs	r3, #12
   15094:	18fb      	adds	r3, r7, r3
   15096:	785b      	ldrb	r3, [r3, #1]
   15098:	07db      	lsls	r3, r3, #31
   1509a:	0fdb      	lsrs	r3, r3, #31
   1509c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1509e:	4313      	orrs	r3, r2
   150a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   150a2:	230c      	movs	r3, #12
   150a4:	18fb      	adds	r3, r7, r3
   150a6:	785b      	ldrb	r3, [r3, #1]
   150a8:	079b      	lsls	r3, r3, #30
   150aa:	0fdb      	lsrs	r3, r3, #31
   150ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   150ae:	4313      	orrs	r3, r2
   150b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   150b2:	230c      	movs	r3, #12
   150b4:	18fb      	adds	r3, r7, r3
   150b6:	785b      	ldrb	r3, [r3, #1]
   150b8:	075b      	lsls	r3, r3, #29
   150ba:	0fdb      	lsrs	r3, r3, #31
   150bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   150be:	4313      	orrs	r3, r2
   150c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   150c2:	230c      	movs	r3, #12
   150c4:	18fb      	adds	r3, r7, r3
   150c6:	785b      	ldrb	r3, [r3, #1]
   150c8:	071b      	lsls	r3, r3, #28
   150ca:	0fdb      	lsrs	r3, r3, #31
   150cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   150ce:	4313      	orrs	r3, r2
   150d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   150d2:	230c      	movs	r3, #12
   150d4:	18fb      	adds	r3, r7, r3
   150d6:	785b      	ldrb	r3, [r3, #1]
   150d8:	06db      	lsls	r3, r3, #27
   150da:	0fdb      	lsrs	r3, r3, #31
   150dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   150de:	4313      	orrs	r3, r2
   150e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   150e2:	230c      	movs	r3, #12
   150e4:	18fb      	adds	r3, r7, r3
   150e6:	785b      	ldrb	r3, [r3, #1]
   150e8:	069b      	lsls	r3, r3, #26
   150ea:	0fdb      	lsrs	r3, r3, #31
   150ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   150ee:	4313      	orrs	r3, r2
   150f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   150f2:	230c      	movs	r3, #12
   150f4:	18fb      	adds	r3, r7, r3
   150f6:	785b      	ldrb	r3, [r3, #1]
   150f8:	065b      	lsls	r3, r3, #25
   150fa:	0fdb      	lsrs	r3, r3, #31
   150fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   150fe:	4313      	orrs	r3, r2
   15100:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   15102:	230c      	movs	r3, #12
   15104:	18fb      	adds	r3, r7, r3
   15106:	785b      	ldrb	r3, [r3, #1]
   15108:	061b      	lsls	r3, r3, #24
   1510a:	0fdb      	lsrs	r3, r3, #31
   1510c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1510e:	4313      	orrs	r3, r2
   15110:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15112:	2b01      	cmp	r3, #1
   15114:	d000      	beq.n	15118 <lsm6dso_gy_data_rate_set+0x134>
   15116:	e092      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   15118:	230b      	movs	r3, #11
   1511a:	18fa      	adds	r2, r7, r3
   1511c:	687b      	ldr	r3, [r7, #4]
   1511e:	0011      	movs	r1, r2
   15120:	0018      	movs	r0, r3
   15122:	4b5e      	ldr	r3, [pc, #376]	; (1529c <lsm6dso_gy_data_rate_set+0x2b8>)
   15124:	4798      	blx	r3
   15126:	0003      	movs	r3, r0
   15128:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   1512a:	693b      	ldr	r3, [r7, #16]
   1512c:	2b00      	cmp	r3, #0
   1512e:	d000      	beq.n	15132 <lsm6dso_gy_data_rate_set+0x14e>
   15130:	e085      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   15132:	230b      	movs	r3, #11
   15134:	18fb      	adds	r3, r7, r3
   15136:	781b      	ldrb	r3, [r3, #0]
   15138:	2b01      	cmp	r3, #1
   1513a:	d017      	beq.n	1516c <lsm6dso_gy_data_rate_set+0x188>
   1513c:	dc02      	bgt.n	15144 <lsm6dso_gy_data_rate_set+0x160>
   1513e:	2b00      	cmp	r3, #0
   15140:	d005      	beq.n	1514e <lsm6dso_gy_data_rate_set+0x16a>
   15142:	e076      	b.n	15232 <lsm6dso_gy_data_rate_set+0x24e>
   15144:	2b02      	cmp	r3, #2
   15146:	d029      	beq.n	1519c <lsm6dso_gy_data_rate_set+0x1b8>
   15148:	2b03      	cmp	r3, #3
   1514a:	d048      	beq.n	151de <lsm6dso_gy_data_rate_set+0x1fa>
   1514c:	e071      	b.n	15232 <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   1514e:	1cfb      	adds	r3, r7, #3
   15150:	781b      	ldrb	r3, [r3, #0]
   15152:	2b00      	cmp	r3, #0
   15154:	d104      	bne.n	15160 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   15156:	2317      	movs	r3, #23
   15158:	18fb      	adds	r3, r7, r3
   1515a:	2201      	movs	r2, #1
   1515c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1515e:	e06e      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15160:	2317      	movs	r3, #23
   15162:	18fb      	adds	r3, r7, r3
   15164:	1cfa      	adds	r2, r7, #3
   15166:	7812      	ldrb	r2, [r2, #0]
   15168:	701a      	strb	r2, [r3, #0]
            break;
   1516a:	e068      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   1516c:	1cfb      	adds	r3, r7, #3
   1516e:	781b      	ldrb	r3, [r3, #0]
   15170:	2b00      	cmp	r3, #0
   15172:	d104      	bne.n	1517e <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   15174:	2317      	movs	r3, #23
   15176:	18fb      	adds	r3, r7, r3
   15178:	2202      	movs	r2, #2
   1517a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1517c:	e05f      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1517e:	1cfb      	adds	r3, r7, #3
   15180:	781b      	ldrb	r3, [r3, #0]
   15182:	2b01      	cmp	r3, #1
   15184:	d104      	bne.n	15190 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   15186:	2317      	movs	r3, #23
   15188:	18fb      	adds	r3, r7, r3
   1518a:	2202      	movs	r2, #2
   1518c:	701a      	strb	r2, [r3, #0]
            break;
   1518e:	e056      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15190:	2317      	movs	r3, #23
   15192:	18fb      	adds	r3, r7, r3
   15194:	1cfa      	adds	r2, r7, #3
   15196:	7812      	ldrb	r2, [r2, #0]
   15198:	701a      	strb	r2, [r3, #0]
            break;
   1519a:	e050      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   1519c:	1cfb      	adds	r3, r7, #3
   1519e:	781b      	ldrb	r3, [r3, #0]
   151a0:	2b00      	cmp	r3, #0
   151a2:	d104      	bne.n	151ae <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   151a4:	2317      	movs	r3, #23
   151a6:	18fb      	adds	r3, r7, r3
   151a8:	2203      	movs	r2, #3
   151aa:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   151ac:	e047      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   151ae:	1cfb      	adds	r3, r7, #3
   151b0:	781b      	ldrb	r3, [r3, #0]
   151b2:	2b01      	cmp	r3, #1
   151b4:	d104      	bne.n	151c0 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   151b6:	2317      	movs	r3, #23
   151b8:	18fb      	adds	r3, r7, r3
   151ba:	2203      	movs	r2, #3
   151bc:	701a      	strb	r2, [r3, #0]
            break;
   151be:	e03e      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   151c0:	1cfb      	adds	r3, r7, #3
   151c2:	781b      	ldrb	r3, [r3, #0]
   151c4:	2b02      	cmp	r3, #2
   151c6:	d104      	bne.n	151d2 <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   151c8:	2317      	movs	r3, #23
   151ca:	18fb      	adds	r3, r7, r3
   151cc:	2203      	movs	r2, #3
   151ce:	701a      	strb	r2, [r3, #0]
            break;
   151d0:	e035      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   151d2:	2317      	movs	r3, #23
   151d4:	18fb      	adds	r3, r7, r3
   151d6:	1cfa      	adds	r2, r7, #3
   151d8:	7812      	ldrb	r2, [r2, #0]
   151da:	701a      	strb	r2, [r3, #0]
            break;
   151dc:	e02f      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   151de:	1cfb      	adds	r3, r7, #3
   151e0:	781b      	ldrb	r3, [r3, #0]
   151e2:	2b00      	cmp	r3, #0
   151e4:	d104      	bne.n	151f0 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   151e6:	2317      	movs	r3, #23
   151e8:	18fb      	adds	r3, r7, r3
   151ea:	2204      	movs	r2, #4
   151ec:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   151ee:	e026      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   151f0:	1cfb      	adds	r3, r7, #3
   151f2:	781b      	ldrb	r3, [r3, #0]
   151f4:	2b01      	cmp	r3, #1
   151f6:	d104      	bne.n	15202 <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   151f8:	2317      	movs	r3, #23
   151fa:	18fb      	adds	r3, r7, r3
   151fc:	2204      	movs	r2, #4
   151fe:	701a      	strb	r2, [r3, #0]
            break;
   15200:	e01d      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   15202:	1cfb      	adds	r3, r7, #3
   15204:	781b      	ldrb	r3, [r3, #0]
   15206:	2b02      	cmp	r3, #2
   15208:	d104      	bne.n	15214 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1520a:	2317      	movs	r3, #23
   1520c:	18fb      	adds	r3, r7, r3
   1520e:	2204      	movs	r2, #4
   15210:	701a      	strb	r2, [r3, #0]
            break;
   15212:	e014      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   15214:	1cfb      	adds	r3, r7, #3
   15216:	781b      	ldrb	r3, [r3, #0]
   15218:	2b03      	cmp	r3, #3
   1521a:	d104      	bne.n	15226 <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1521c:	2317      	movs	r3, #23
   1521e:	18fb      	adds	r3, r7, r3
   15220:	2204      	movs	r2, #4
   15222:	701a      	strb	r2, [r3, #0]
            break;
   15224:	e00b      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15226:	2317      	movs	r3, #23
   15228:	18fb      	adds	r3, r7, r3
   1522a:	1cfa      	adds	r2, r7, #3
   1522c:	7812      	ldrb	r2, [r2, #0]
   1522e:	701a      	strb	r2, [r3, #0]
            break;
   15230:	e005      	b.n	1523e <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   15232:	2317      	movs	r3, #23
   15234:	18fb      	adds	r3, r7, r3
   15236:	1cfa      	adds	r2, r7, #3
   15238:	7812      	ldrb	r2, [r2, #0]
   1523a:	701a      	strb	r2, [r3, #0]
            break;
   1523c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   1523e:	693b      	ldr	r3, [r7, #16]
   15240:	2b00      	cmp	r3, #0
   15242:	d108      	bne.n	15256 <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15244:	2308      	movs	r3, #8
   15246:	18fa      	adds	r2, r7, r3
   15248:	6878      	ldr	r0, [r7, #4]
   1524a:	2301      	movs	r3, #1
   1524c:	2111      	movs	r1, #17
   1524e:	4c14      	ldr	r4, [pc, #80]	; (152a0 <lsm6dso_gy_data_rate_set+0x2bc>)
   15250:	47a0      	blx	r4
   15252:	0003      	movs	r3, r0
   15254:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   15256:	693b      	ldr	r3, [r7, #16]
   15258:	2b00      	cmp	r3, #0
   1525a:	d118      	bne.n	1528e <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   1525c:	2317      	movs	r3, #23
   1525e:	18fb      	adds	r3, r7, r3
   15260:	781b      	ldrb	r3, [r3, #0]
   15262:	220f      	movs	r2, #15
   15264:	4013      	ands	r3, r2
   15266:	b2da      	uxtb	r2, r3
   15268:	2308      	movs	r3, #8
   1526a:	18fb      	adds	r3, r7, r3
   1526c:	0110      	lsls	r0, r2, #4
   1526e:	781a      	ldrb	r2, [r3, #0]
   15270:	210f      	movs	r1, #15
   15272:	400a      	ands	r2, r1
   15274:	1c11      	adds	r1, r2, #0
   15276:	1c02      	adds	r2, r0, #0
   15278:	430a      	orrs	r2, r1
   1527a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1527c:	2308      	movs	r3, #8
   1527e:	18fa      	adds	r2, r7, r3
   15280:	6878      	ldr	r0, [r7, #4]
   15282:	2301      	movs	r3, #1
   15284:	2111      	movs	r1, #17
   15286:	4c07      	ldr	r4, [pc, #28]	; (152a4 <lsm6dso_gy_data_rate_set+0x2c0>)
   15288:	47a0      	blx	r4
   1528a:	0003      	movs	r3, r0
   1528c:	613b      	str	r3, [r7, #16]
  }

  return ret;
   1528e:	693b      	ldr	r3, [r7, #16]
}
   15290:	0018      	movs	r0, r3
   15292:	46bd      	mov	sp, r7
   15294:	b007      	add	sp, #28
   15296:	bd90      	pop	{r4, r7, pc}
   15298:	00015791 	.word	0x00015791
   1529c:	000157e5 	.word	0x000157e5
   152a0:	00014b85 	.word	0x00014b85
   152a4:	00014bcb 	.word	0x00014bcb

000152a8 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   152a8:	b590      	push	{r4, r7, lr}
   152aa:	b085      	sub	sp, #20
   152ac:	af00      	add	r7, sp, #0
   152ae:	6078      	str	r0, [r7, #4]
   152b0:	000a      	movs	r2, r1
   152b2:	1cfb      	adds	r3, r7, #3
   152b4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   152b6:	2308      	movs	r3, #8
   152b8:	18fa      	adds	r2, r7, r3
   152ba:	6878      	ldr	r0, [r7, #4]
   152bc:	2301      	movs	r3, #1
   152be:	2112      	movs	r1, #18
   152c0:	4c12      	ldr	r4, [pc, #72]	; (1530c <lsm6dso_block_data_update_set+0x64>)
   152c2:	47a0      	blx	r4
   152c4:	0003      	movs	r3, r0
   152c6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   152c8:	68fb      	ldr	r3, [r7, #12]
   152ca:	2b00      	cmp	r3, #0
   152cc:	d119      	bne.n	15302 <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   152ce:	1cfb      	adds	r3, r7, #3
   152d0:	781b      	ldrb	r3, [r3, #0]
   152d2:	2201      	movs	r2, #1
   152d4:	4013      	ands	r3, r2
   152d6:	b2da      	uxtb	r2, r3
   152d8:	2308      	movs	r3, #8
   152da:	18fb      	adds	r3, r7, r3
   152dc:	2101      	movs	r1, #1
   152de:	400a      	ands	r2, r1
   152e0:	0190      	lsls	r0, r2, #6
   152e2:	781a      	ldrb	r2, [r3, #0]
   152e4:	2140      	movs	r1, #64	; 0x40
   152e6:	438a      	bics	r2, r1
   152e8:	1c11      	adds	r1, r2, #0
   152ea:	1c02      	adds	r2, r0, #0
   152ec:	430a      	orrs	r2, r1
   152ee:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   152f0:	2308      	movs	r3, #8
   152f2:	18fa      	adds	r2, r7, r3
   152f4:	6878      	ldr	r0, [r7, #4]
   152f6:	2301      	movs	r3, #1
   152f8:	2112      	movs	r1, #18
   152fa:	4c05      	ldr	r4, [pc, #20]	; (15310 <lsm6dso_block_data_update_set+0x68>)
   152fc:	47a0      	blx	r4
   152fe:	0003      	movs	r3, r0
   15300:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15302:	68fb      	ldr	r3, [r7, #12]
}
   15304:	0018      	movs	r0, r3
   15306:	46bd      	mov	sp, r7
   15308:	b005      	add	sp, #20
   1530a:	bd90      	pop	{r4, r7, pc}
   1530c:	00014b85 	.word	0x00014b85
   15310:	00014bcb 	.word	0x00014bcb

00015314 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   15314:	b590      	push	{r4, r7, lr}
   15316:	b085      	sub	sp, #20
   15318:	af00      	add	r7, sp, #0
   1531a:	6078      	str	r0, [r7, #4]
   1531c:	000a      	movs	r2, r1
   1531e:	1cfb      	adds	r3, r7, #3
   15320:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15322:	2308      	movs	r3, #8
   15324:	18fa      	adds	r2, r7, r3
   15326:	6878      	ldr	r0, [r7, #4]
   15328:	2301      	movs	r3, #1
   1532a:	2115      	movs	r1, #21
   1532c:	4c12      	ldr	r4, [pc, #72]	; (15378 <lsm6dso_xl_offset_weight_set+0x64>)
   1532e:	47a0      	blx	r4
   15330:	0003      	movs	r3, r0
   15332:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15334:	68fb      	ldr	r3, [r7, #12]
   15336:	2b00      	cmp	r3, #0
   15338:	d119      	bne.n	1536e <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   1533a:	1cfb      	adds	r3, r7, #3
   1533c:	781b      	ldrb	r3, [r3, #0]
   1533e:	2201      	movs	r2, #1
   15340:	4013      	ands	r3, r2
   15342:	b2da      	uxtb	r2, r3
   15344:	2308      	movs	r3, #8
   15346:	18fb      	adds	r3, r7, r3
   15348:	2101      	movs	r1, #1
   1534a:	400a      	ands	r2, r1
   1534c:	00d0      	lsls	r0, r2, #3
   1534e:	781a      	ldrb	r2, [r3, #0]
   15350:	2108      	movs	r1, #8
   15352:	438a      	bics	r2, r1
   15354:	1c11      	adds	r1, r2, #0
   15356:	1c02      	adds	r2, r0, #0
   15358:	430a      	orrs	r2, r1
   1535a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   1535c:	2308      	movs	r3, #8
   1535e:	18fa      	adds	r2, r7, r3
   15360:	6878      	ldr	r0, [r7, #4]
   15362:	2301      	movs	r3, #1
   15364:	2115      	movs	r1, #21
   15366:	4c05      	ldr	r4, [pc, #20]	; (1537c <lsm6dso_xl_offset_weight_set+0x68>)
   15368:	47a0      	blx	r4
   1536a:	0003      	movs	r3, r0
   1536c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1536e:	68fb      	ldr	r3, [r7, #12]
}
   15370:	0018      	movs	r0, r3
   15372:	46bd      	mov	sp, r7
   15374:	b005      	add	sp, #20
   15376:	bd90      	pop	{r4, r7, pc}
   15378:	00014b85 	.word	0x00014b85
   1537c:	00014bcb 	.word	0x00014bcb

00015380 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   15380:	b590      	push	{r4, r7, lr}
   15382:	b085      	sub	sp, #20
   15384:	af00      	add	r7, sp, #0
   15386:	6078      	str	r0, [r7, #4]
   15388:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   1538a:	2308      	movs	r3, #8
   1538c:	18fa      	adds	r2, r7, r3
   1538e:	6878      	ldr	r0, [r7, #4]
   15390:	2301      	movs	r3, #1
   15392:	211e      	movs	r1, #30
   15394:	4c08      	ldr	r4, [pc, #32]	; (153b8 <lsm6dso_xl_flag_data_ready_get+0x38>)
   15396:	47a0      	blx	r4
   15398:	0003      	movs	r3, r0
   1539a:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   1539c:	2308      	movs	r3, #8
   1539e:	18fb      	adds	r3, r7, r3
   153a0:	781b      	ldrb	r3, [r3, #0]
   153a2:	07db      	lsls	r3, r3, #31
   153a4:	0fdb      	lsrs	r3, r3, #31
   153a6:	b2db      	uxtb	r3, r3
   153a8:	001a      	movs	r2, r3
   153aa:	683b      	ldr	r3, [r7, #0]
   153ac:	701a      	strb	r2, [r3, #0]

  return ret;
   153ae:	68fb      	ldr	r3, [r7, #12]
}
   153b0:	0018      	movs	r0, r3
   153b2:	46bd      	mov	sp, r7
   153b4:	b005      	add	sp, #20
   153b6:	bd90      	pop	{r4, r7, pc}
   153b8:	00014b85 	.word	0x00014b85

000153bc <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   153bc:	b590      	push	{r4, r7, lr}
   153be:	b087      	sub	sp, #28
   153c0:	af00      	add	r7, sp, #0
   153c2:	6078      	str	r0, [r7, #4]
   153c4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   153c6:	230c      	movs	r3, #12
   153c8:	18fa      	adds	r2, r7, r3
   153ca:	6878      	ldr	r0, [r7, #4]
   153cc:	2306      	movs	r3, #6
   153ce:	2128      	movs	r1, #40	; 0x28
   153d0:	4c26      	ldr	r4, [pc, #152]	; (1546c <lsm6dso_acceleration_raw_get+0xb0>)
   153d2:	47a0      	blx	r4
   153d4:	0003      	movs	r3, r0
   153d6:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   153d8:	230c      	movs	r3, #12
   153da:	18fb      	adds	r3, r7, r3
   153dc:	785b      	ldrb	r3, [r3, #1]
   153de:	b21a      	sxth	r2, r3
   153e0:	683b      	ldr	r3, [r7, #0]
   153e2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   153e4:	683b      	ldr	r3, [r7, #0]
   153e6:	2200      	movs	r2, #0
   153e8:	5e9b      	ldrsh	r3, [r3, r2]
   153ea:	b29b      	uxth	r3, r3
   153ec:	021b      	lsls	r3, r3, #8
   153ee:	b29a      	uxth	r2, r3
   153f0:	230c      	movs	r3, #12
   153f2:	18fb      	adds	r3, r7, r3
   153f4:	781b      	ldrb	r3, [r3, #0]
   153f6:	b29b      	uxth	r3, r3
   153f8:	18d3      	adds	r3, r2, r3
   153fa:	b29b      	uxth	r3, r3
   153fc:	b21a      	sxth	r2, r3
   153fe:	683b      	ldr	r3, [r7, #0]
   15400:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   15402:	683b      	ldr	r3, [r7, #0]
   15404:	3302      	adds	r3, #2
   15406:	220c      	movs	r2, #12
   15408:	18ba      	adds	r2, r7, r2
   1540a:	78d2      	ldrb	r2, [r2, #3]
   1540c:	b212      	sxth	r2, r2
   1540e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   15410:	683b      	ldr	r3, [r7, #0]
   15412:	3302      	adds	r3, #2
   15414:	683a      	ldr	r2, [r7, #0]
   15416:	3202      	adds	r2, #2
   15418:	2100      	movs	r1, #0
   1541a:	5e52      	ldrsh	r2, [r2, r1]
   1541c:	b292      	uxth	r2, r2
   1541e:	0212      	lsls	r2, r2, #8
   15420:	b291      	uxth	r1, r2
   15422:	220c      	movs	r2, #12
   15424:	18ba      	adds	r2, r7, r2
   15426:	7892      	ldrb	r2, [r2, #2]
   15428:	b292      	uxth	r2, r2
   1542a:	188a      	adds	r2, r1, r2
   1542c:	b292      	uxth	r2, r2
   1542e:	b212      	sxth	r2, r2
   15430:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   15432:	683b      	ldr	r3, [r7, #0]
   15434:	3304      	adds	r3, #4
   15436:	220c      	movs	r2, #12
   15438:	18ba      	adds	r2, r7, r2
   1543a:	7952      	ldrb	r2, [r2, #5]
   1543c:	b212      	sxth	r2, r2
   1543e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   15440:	683b      	ldr	r3, [r7, #0]
   15442:	3304      	adds	r3, #4
   15444:	683a      	ldr	r2, [r7, #0]
   15446:	3204      	adds	r2, #4
   15448:	2100      	movs	r1, #0
   1544a:	5e52      	ldrsh	r2, [r2, r1]
   1544c:	b292      	uxth	r2, r2
   1544e:	0212      	lsls	r2, r2, #8
   15450:	b291      	uxth	r1, r2
   15452:	220c      	movs	r2, #12
   15454:	18ba      	adds	r2, r7, r2
   15456:	7912      	ldrb	r2, [r2, #4]
   15458:	b292      	uxth	r2, r2
   1545a:	188a      	adds	r2, r1, r2
   1545c:	b292      	uxth	r2, r2
   1545e:	b212      	sxth	r2, r2
   15460:	801a      	strh	r2, [r3, #0]

  return ret;
   15462:	697b      	ldr	r3, [r7, #20]
}
   15464:	0018      	movs	r0, r3
   15466:	46bd      	mov	sp, r7
   15468:	b007      	add	sp, #28
   1546a:	bd90      	pop	{r4, r7, pc}
   1546c:	00014b85 	.word	0x00014b85

00015470 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   15470:	b590      	push	{r4, r7, lr}
   15472:	b085      	sub	sp, #20
   15474:	af00      	add	r7, sp, #0
   15476:	6078      	str	r0, [r7, #4]
   15478:	000a      	movs	r2, r1
   1547a:	1cfb      	adds	r3, r7, #3
   1547c:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   1547e:	2308      	movs	r3, #8
   15480:	18fa      	adds	r2, r7, r3
   15482:	6878      	ldr	r0, [r7, #4]
   15484:	2301      	movs	r3, #1
   15486:	2101      	movs	r1, #1
   15488:	4c11      	ldr	r4, [pc, #68]	; (154d0 <lsm6dso_mem_bank_set+0x60>)
   1548a:	47a0      	blx	r4
   1548c:	0003      	movs	r3, r0
   1548e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15490:	68fb      	ldr	r3, [r7, #12]
   15492:	2b00      	cmp	r3, #0
   15494:	d117      	bne.n	154c6 <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   15496:	1cfb      	adds	r3, r7, #3
   15498:	781b      	ldrb	r3, [r3, #0]
   1549a:	2203      	movs	r2, #3
   1549c:	4013      	ands	r3, r2
   1549e:	b2da      	uxtb	r2, r3
   154a0:	2308      	movs	r3, #8
   154a2:	18fb      	adds	r3, r7, r3
   154a4:	0190      	lsls	r0, r2, #6
   154a6:	781a      	ldrb	r2, [r3, #0]
   154a8:	213f      	movs	r1, #63	; 0x3f
   154aa:	400a      	ands	r2, r1
   154ac:	1c11      	adds	r1, r2, #0
   154ae:	1c02      	adds	r2, r0, #0
   154b0:	430a      	orrs	r2, r1
   154b2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   154b4:	2308      	movs	r3, #8
   154b6:	18fa      	adds	r2, r7, r3
   154b8:	6878      	ldr	r0, [r7, #4]
   154ba:	2301      	movs	r3, #1
   154bc:	2101      	movs	r1, #1
   154be:	4c05      	ldr	r4, [pc, #20]	; (154d4 <lsm6dso_mem_bank_set+0x64>)
   154c0:	47a0      	blx	r4
   154c2:	0003      	movs	r3, r0
   154c4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   154c6:	68fb      	ldr	r3, [r7, #12]
}
   154c8:	0018      	movs	r0, r3
   154ca:	46bd      	mov	sp, r7
   154cc:	b005      	add	sp, #20
   154ce:	bd90      	pop	{r4, r7, pc}
   154d0:	00014b85 	.word	0x00014b85
   154d4:	00014bcb 	.word	0x00014bcb

000154d8 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   154d8:	b590      	push	{r4, r7, lr}
   154da:	b085      	sub	sp, #20
   154dc:	af00      	add	r7, sp, #0
   154de:	6078      	str	r0, [r7, #4]
   154e0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   154e2:	683a      	ldr	r2, [r7, #0]
   154e4:	6878      	ldr	r0, [r7, #4]
   154e6:	2301      	movs	r3, #1
   154e8:	210f      	movs	r1, #15
   154ea:	4c04      	ldr	r4, [pc, #16]	; (154fc <lsm6dso_device_id_get+0x24>)
   154ec:	47a0      	blx	r4
   154ee:	0003      	movs	r3, r0
   154f0:	60fb      	str	r3, [r7, #12]

  return ret;
   154f2:	68fb      	ldr	r3, [r7, #12]
}
   154f4:	0018      	movs	r0, r3
   154f6:	46bd      	mov	sp, r7
   154f8:	b005      	add	sp, #20
   154fa:	bd90      	pop	{r4, r7, pc}
   154fc:	00014b85 	.word	0x00014b85

00015500 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15500:	b590      	push	{r4, r7, lr}
   15502:	b085      	sub	sp, #20
   15504:	af00      	add	r7, sp, #0
   15506:	6078      	str	r0, [r7, #4]
   15508:	000a      	movs	r2, r1
   1550a:	1cfb      	adds	r3, r7, #3
   1550c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1550e:	2308      	movs	r3, #8
   15510:	18fa      	adds	r2, r7, r3
   15512:	6878      	ldr	r0, [r7, #4]
   15514:	2301      	movs	r3, #1
   15516:	2112      	movs	r1, #18
   15518:	4c12      	ldr	r4, [pc, #72]	; (15564 <lsm6dso_reset_set+0x64>)
   1551a:	47a0      	blx	r4
   1551c:	0003      	movs	r3, r0
   1551e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15520:	68fb      	ldr	r3, [r7, #12]
   15522:	2b00      	cmp	r3, #0
   15524:	d119      	bne.n	1555a <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   15526:	1cfb      	adds	r3, r7, #3
   15528:	781b      	ldrb	r3, [r3, #0]
   1552a:	2201      	movs	r2, #1
   1552c:	4013      	ands	r3, r2
   1552e:	b2da      	uxtb	r2, r3
   15530:	2308      	movs	r3, #8
   15532:	18fb      	adds	r3, r7, r3
   15534:	2101      	movs	r1, #1
   15536:	400a      	ands	r2, r1
   15538:	0010      	movs	r0, r2
   1553a:	781a      	ldrb	r2, [r3, #0]
   1553c:	2101      	movs	r1, #1
   1553e:	438a      	bics	r2, r1
   15540:	1c11      	adds	r1, r2, #0
   15542:	1c02      	adds	r2, r0, #0
   15544:	430a      	orrs	r2, r1
   15546:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15548:	2308      	movs	r3, #8
   1554a:	18fa      	adds	r2, r7, r3
   1554c:	6878      	ldr	r0, [r7, #4]
   1554e:	2301      	movs	r3, #1
   15550:	2112      	movs	r1, #18
   15552:	4c05      	ldr	r4, [pc, #20]	; (15568 <lsm6dso_reset_set+0x68>)
   15554:	47a0      	blx	r4
   15556:	0003      	movs	r3, r0
   15558:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1555a:	68fb      	ldr	r3, [r7, #12]
}
   1555c:	0018      	movs	r0, r3
   1555e:	46bd      	mov	sp, r7
   15560:	b005      	add	sp, #20
   15562:	bd90      	pop	{r4, r7, pc}
   15564:	00014b85 	.word	0x00014b85
   15568:	00014bcb 	.word	0x00014bcb

0001556c <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   1556c:	b590      	push	{r4, r7, lr}
   1556e:	b085      	sub	sp, #20
   15570:	af00      	add	r7, sp, #0
   15572:	6078      	str	r0, [r7, #4]
   15574:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15576:	2308      	movs	r3, #8
   15578:	18fa      	adds	r2, r7, r3
   1557a:	6878      	ldr	r0, [r7, #4]
   1557c:	2301      	movs	r3, #1
   1557e:	2112      	movs	r1, #18
   15580:	4c08      	ldr	r4, [pc, #32]	; (155a4 <lsm6dso_reset_get+0x38>)
   15582:	47a0      	blx	r4
   15584:	0003      	movs	r3, r0
   15586:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   15588:	2308      	movs	r3, #8
   1558a:	18fb      	adds	r3, r7, r3
   1558c:	781b      	ldrb	r3, [r3, #0]
   1558e:	07db      	lsls	r3, r3, #31
   15590:	0fdb      	lsrs	r3, r3, #31
   15592:	b2db      	uxtb	r3, r3
   15594:	001a      	movs	r2, r3
   15596:	683b      	ldr	r3, [r7, #0]
   15598:	701a      	strb	r2, [r3, #0]

  return ret;
   1559a:	68fb      	ldr	r3, [r7, #12]
}
   1559c:	0018      	movs	r0, r3
   1559e:	46bd      	mov	sp, r7
   155a0:	b005      	add	sp, #20
   155a2:	bd90      	pop	{r4, r7, pc}
   155a4:	00014b85 	.word	0x00014b85

000155a8 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   155a8:	b590      	push	{r4, r7, lr}
   155aa:	b085      	sub	sp, #20
   155ac:	af00      	add	r7, sp, #0
   155ae:	6078      	str	r0, [r7, #4]
   155b0:	000a      	movs	r2, r1
   155b2:	1cfb      	adds	r3, r7, #3
   155b4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   155b6:	2308      	movs	r3, #8
   155b8:	18fa      	adds	r2, r7, r3
   155ba:	6878      	ldr	r0, [r7, #4]
   155bc:	2301      	movs	r3, #1
   155be:	2110      	movs	r1, #16
   155c0:	4c12      	ldr	r4, [pc, #72]	; (1560c <lsm6dso_xl_filter_lp2_set+0x64>)
   155c2:	47a0      	blx	r4
   155c4:	0003      	movs	r3, r0
   155c6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   155c8:	68fb      	ldr	r3, [r7, #12]
   155ca:	2b00      	cmp	r3, #0
   155cc:	d119      	bne.n	15602 <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   155ce:	1cfb      	adds	r3, r7, #3
   155d0:	781b      	ldrb	r3, [r3, #0]
   155d2:	2201      	movs	r2, #1
   155d4:	4013      	ands	r3, r2
   155d6:	b2da      	uxtb	r2, r3
   155d8:	2308      	movs	r3, #8
   155da:	18fb      	adds	r3, r7, r3
   155dc:	2101      	movs	r1, #1
   155de:	400a      	ands	r2, r1
   155e0:	1890      	adds	r0, r2, r2
   155e2:	781a      	ldrb	r2, [r3, #0]
   155e4:	2102      	movs	r1, #2
   155e6:	438a      	bics	r2, r1
   155e8:	1c11      	adds	r1, r2, #0
   155ea:	1c02      	adds	r2, r0, #0
   155ec:	430a      	orrs	r2, r1
   155ee:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   155f0:	2308      	movs	r3, #8
   155f2:	18fa      	adds	r2, r7, r3
   155f4:	6878      	ldr	r0, [r7, #4]
   155f6:	2301      	movs	r3, #1
   155f8:	2110      	movs	r1, #16
   155fa:	4c05      	ldr	r4, [pc, #20]	; (15610 <lsm6dso_xl_filter_lp2_set+0x68>)
   155fc:	47a0      	blx	r4
   155fe:	0003      	movs	r3, r0
   15600:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15602:	68fb      	ldr	r3, [r7, #12]
}
   15604:	0018      	movs	r0, r3
   15606:	46bd      	mov	sp, r7
   15608:	b005      	add	sp, #20
   1560a:	bd90      	pop	{r4, r7, pc}
   1560c:	00014b85 	.word	0x00014b85
   15610:	00014bcb 	.word	0x00014bcb

00015614 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   15614:	b590      	push	{r4, r7, lr}
   15616:	b085      	sub	sp, #20
   15618:	af00      	add	r7, sp, #0
   1561a:	6078      	str	r0, [r7, #4]
   1561c:	000a      	movs	r2, r1
   1561e:	1cfb      	adds	r3, r7, #3
   15620:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   15622:	2308      	movs	r3, #8
   15624:	18fa      	adds	r2, r7, r3
   15626:	6878      	ldr	r0, [r7, #4]
   15628:	2301      	movs	r3, #1
   1562a:	2117      	movs	r1, #23
   1562c:	4c25      	ldr	r4, [pc, #148]	; (156c4 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   1562e:	47a0      	blx	r4
   15630:	0003      	movs	r3, r0
   15632:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15634:	68fb      	ldr	r3, [r7, #12]
   15636:	2b00      	cmp	r3, #0
   15638:	d13f      	bne.n	156ba <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   1563a:	1cfb      	adds	r3, r7, #3
   1563c:	781b      	ldrb	r3, [r3, #0]
   1563e:	091b      	lsrs	r3, r3, #4
   15640:	b2db      	uxtb	r3, r3
   15642:	1c1a      	adds	r2, r3, #0
   15644:	2301      	movs	r3, #1
   15646:	4013      	ands	r3, r2
   15648:	b2da      	uxtb	r2, r3
   1564a:	2308      	movs	r3, #8
   1564c:	18fb      	adds	r3, r7, r3
   1564e:	2101      	movs	r1, #1
   15650:	400a      	ands	r2, r1
   15652:	0090      	lsls	r0, r2, #2
   15654:	781a      	ldrb	r2, [r3, #0]
   15656:	2104      	movs	r1, #4
   15658:	438a      	bics	r2, r1
   1565a:	1c11      	adds	r1, r2, #0
   1565c:	1c02      	adds	r2, r0, #0
   1565e:	430a      	orrs	r2, r1
   15660:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   15662:	1cfb      	adds	r3, r7, #3
   15664:	781b      	ldrb	r3, [r3, #0]
   15666:	095b      	lsrs	r3, r3, #5
   15668:	b2db      	uxtb	r3, r3
   1566a:	1c1a      	adds	r2, r3, #0
   1566c:	2301      	movs	r3, #1
   1566e:	4013      	ands	r3, r2
   15670:	b2da      	uxtb	r2, r3
   15672:	2308      	movs	r3, #8
   15674:	18fb      	adds	r3, r7, r3
   15676:	2101      	movs	r1, #1
   15678:	400a      	ands	r2, r1
   1567a:	0110      	lsls	r0, r2, #4
   1567c:	781a      	ldrb	r2, [r3, #0]
   1567e:	2110      	movs	r1, #16
   15680:	438a      	bics	r2, r1
   15682:	1c11      	adds	r1, r2, #0
   15684:	1c02      	adds	r2, r0, #0
   15686:	430a      	orrs	r2, r1
   15688:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   1568a:	1cfb      	adds	r3, r7, #3
   1568c:	781b      	ldrb	r3, [r3, #0]
   1568e:	2207      	movs	r2, #7
   15690:	4013      	ands	r3, r2
   15692:	b2da      	uxtb	r2, r3
   15694:	2308      	movs	r3, #8
   15696:	18fb      	adds	r3, r7, r3
   15698:	0150      	lsls	r0, r2, #5
   1569a:	781a      	ldrb	r2, [r3, #0]
   1569c:	211f      	movs	r1, #31
   1569e:	400a      	ands	r2, r1
   156a0:	1c11      	adds	r1, r2, #0
   156a2:	1c02      	adds	r2, r0, #0
   156a4:	430a      	orrs	r2, r1
   156a6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   156a8:	2308      	movs	r3, #8
   156aa:	18fa      	adds	r2, r7, r3
   156ac:	6878      	ldr	r0, [r7, #4]
   156ae:	2301      	movs	r3, #1
   156b0:	2117      	movs	r1, #23
   156b2:	4c05      	ldr	r4, [pc, #20]	; (156c8 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   156b4:	47a0      	blx	r4
   156b6:	0003      	movs	r3, r0
   156b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   156ba:	68fb      	ldr	r3, [r7, #12]
}
   156bc:	0018      	movs	r0, r3
   156be:	46bd      	mov	sp, r7
   156c0:	b005      	add	sp, #20
   156c2:	bd90      	pop	{r4, r7, pc}
   156c4:	00014b85 	.word	0x00014b85
   156c8:	00014bcb 	.word	0x00014bcb

000156cc <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   156cc:	b590      	push	{r4, r7, lr}
   156ce:	b087      	sub	sp, #28
   156d0:	af00      	add	r7, sp, #0
   156d2:	6078      	str	r0, [r7, #4]
   156d4:	000a      	movs	r2, r1
   156d6:	1cfb      	adds	r3, r7, #3
   156d8:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   156da:	230c      	movs	r3, #12
   156dc:	18fa      	adds	r2, r7, r3
   156de:	6878      	ldr	r0, [r7, #4]
   156e0:	2301      	movs	r3, #1
   156e2:	2118      	movs	r1, #24
   156e4:	4c28      	ldr	r4, [pc, #160]	; (15788 <lsm6dso_i3c_disable_set+0xbc>)
   156e6:	47a0      	blx	r4
   156e8:	0003      	movs	r3, r0
   156ea:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   156ec:	697b      	ldr	r3, [r7, #20]
   156ee:	2b00      	cmp	r3, #0
   156f0:	d11c      	bne.n	1572c <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   156f2:	1cfb      	adds	r3, r7, #3
   156f4:	781b      	ldrb	r3, [r3, #0]
   156f6:	09db      	lsrs	r3, r3, #7
   156f8:	b2db      	uxtb	r3, r3
   156fa:	1c1a      	adds	r2, r3, #0
   156fc:	2301      	movs	r3, #1
   156fe:	4013      	ands	r3, r2
   15700:	b2da      	uxtb	r2, r3
   15702:	230c      	movs	r3, #12
   15704:	18fb      	adds	r3, r7, r3
   15706:	2101      	movs	r1, #1
   15708:	400a      	ands	r2, r1
   1570a:	1890      	adds	r0, r2, r2
   1570c:	781a      	ldrb	r2, [r3, #0]
   1570e:	2102      	movs	r1, #2
   15710:	438a      	bics	r2, r1
   15712:	1c11      	adds	r1, r2, #0
   15714:	1c02      	adds	r2, r0, #0
   15716:	430a      	orrs	r2, r1
   15718:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   1571a:	230c      	movs	r3, #12
   1571c:	18fa      	adds	r2, r7, r3
   1571e:	6878      	ldr	r0, [r7, #4]
   15720:	2301      	movs	r3, #1
   15722:	2118      	movs	r1, #24
   15724:	4c19      	ldr	r4, [pc, #100]	; (1578c <lsm6dso_i3c_disable_set+0xc0>)
   15726:	47a0      	blx	r4
   15728:	0003      	movs	r3, r0
   1572a:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   1572c:	697b      	ldr	r3, [r7, #20]
   1572e:	2b00      	cmp	r3, #0
   15730:	d108      	bne.n	15744 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   15732:	2310      	movs	r3, #16
   15734:	18fa      	adds	r2, r7, r3
   15736:	6878      	ldr	r0, [r7, #4]
   15738:	2301      	movs	r3, #1
   1573a:	2162      	movs	r1, #98	; 0x62
   1573c:	4c12      	ldr	r4, [pc, #72]	; (15788 <lsm6dso_i3c_disable_set+0xbc>)
   1573e:	47a0      	blx	r4
   15740:	0003      	movs	r3, r0
   15742:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   15744:	697b      	ldr	r3, [r7, #20]
   15746:	2b00      	cmp	r3, #0
   15748:	d119      	bne.n	1577e <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   1574a:	1cfb      	adds	r3, r7, #3
   1574c:	781b      	ldrb	r3, [r3, #0]
   1574e:	2203      	movs	r2, #3
   15750:	4013      	ands	r3, r2
   15752:	b2da      	uxtb	r2, r3
   15754:	2310      	movs	r3, #16
   15756:	18fb      	adds	r3, r7, r3
   15758:	2103      	movs	r1, #3
   1575a:	400a      	ands	r2, r1
   1575c:	00d0      	lsls	r0, r2, #3
   1575e:	781a      	ldrb	r2, [r3, #0]
   15760:	2118      	movs	r1, #24
   15762:	438a      	bics	r2, r1
   15764:	1c11      	adds	r1, r2, #0
   15766:	1c02      	adds	r2, r0, #0
   15768:	430a      	orrs	r2, r1
   1576a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   1576c:	2310      	movs	r3, #16
   1576e:	18fa      	adds	r2, r7, r3
   15770:	6878      	ldr	r0, [r7, #4]
   15772:	2301      	movs	r3, #1
   15774:	2162      	movs	r1, #98	; 0x62
   15776:	4c05      	ldr	r4, [pc, #20]	; (1578c <lsm6dso_i3c_disable_set+0xc0>)
   15778:	47a0      	blx	r4
   1577a:	0003      	movs	r3, r0
   1577c:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   1577e:	697b      	ldr	r3, [r7, #20]
}
   15780:	0018      	movs	r0, r3
   15782:	46bd      	mov	sp, r7
   15784:	b007      	add	sp, #28
   15786:	bd90      	pop	{r4, r7, pc}
   15788:	00014b85 	.word	0x00014b85
   1578c:	00014bcb 	.word	0x00014bcb

00015790 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   15790:	b590      	push	{r4, r7, lr}
   15792:	b085      	sub	sp, #20
   15794:	af00      	add	r7, sp, #0
   15796:	6078      	str	r0, [r7, #4]
   15798:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   1579a:	687b      	ldr	r3, [r7, #4]
   1579c:	2102      	movs	r1, #2
   1579e:	0018      	movs	r0, r3
   157a0:	4b0e      	ldr	r3, [pc, #56]	; (157dc <lsm6dso_fsm_enable_get+0x4c>)
   157a2:	4798      	blx	r3
   157a4:	0003      	movs	r3, r0
   157a6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   157a8:	68fb      	ldr	r3, [r7, #12]
   157aa:	2b00      	cmp	r3, #0
   157ac:	d107      	bne.n	157be <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   157ae:	683a      	ldr	r2, [r7, #0]
   157b0:	6878      	ldr	r0, [r7, #4]
   157b2:	2302      	movs	r3, #2
   157b4:	2146      	movs	r1, #70	; 0x46
   157b6:	4c0a      	ldr	r4, [pc, #40]	; (157e0 <lsm6dso_fsm_enable_get+0x50>)
   157b8:	47a0      	blx	r4
   157ba:	0003      	movs	r3, r0
   157bc:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   157be:	68fb      	ldr	r3, [r7, #12]
   157c0:	2b00      	cmp	r3, #0
   157c2:	d106      	bne.n	157d2 <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   157c4:	687b      	ldr	r3, [r7, #4]
   157c6:	2100      	movs	r1, #0
   157c8:	0018      	movs	r0, r3
   157ca:	4b04      	ldr	r3, [pc, #16]	; (157dc <lsm6dso_fsm_enable_get+0x4c>)
   157cc:	4798      	blx	r3
   157ce:	0003      	movs	r3, r0
   157d0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   157d2:	68fb      	ldr	r3, [r7, #12]
}
   157d4:	0018      	movs	r0, r3
   157d6:	46bd      	mov	sp, r7
   157d8:	b005      	add	sp, #20
   157da:	bd90      	pop	{r4, r7, pc}
   157dc:	00015471 	.word	0x00015471
   157e0:	00014b85 	.word	0x00014b85

000157e4 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   157e4:	b590      	push	{r4, r7, lr}
   157e6:	b085      	sub	sp, #20
   157e8:	af00      	add	r7, sp, #0
   157ea:	6078      	str	r0, [r7, #4]
   157ec:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   157ee:	687b      	ldr	r3, [r7, #4]
   157f0:	2102      	movs	r1, #2
   157f2:	0018      	movs	r0, r3
   157f4:	4b21      	ldr	r3, [pc, #132]	; (1587c <lsm6dso_fsm_data_rate_get+0x98>)
   157f6:	4798      	blx	r3
   157f8:	0003      	movs	r3, r0
   157fa:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   157fc:	68fb      	ldr	r3, [r7, #12]
   157fe:	2b00      	cmp	r3, #0
   15800:	d108      	bne.n	15814 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   15802:	2308      	movs	r3, #8
   15804:	18fa      	adds	r2, r7, r3
   15806:	6878      	ldr	r0, [r7, #4]
   15808:	2301      	movs	r3, #1
   1580a:	215f      	movs	r1, #95	; 0x5f
   1580c:	4c1c      	ldr	r4, [pc, #112]	; (15880 <lsm6dso_fsm_data_rate_get+0x9c>)
   1580e:	47a0      	blx	r4
   15810:	0003      	movs	r3, r0
   15812:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   15814:	68fb      	ldr	r3, [r7, #12]
   15816:	2b00      	cmp	r3, #0
   15818:	d12b      	bne.n	15872 <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   1581a:	2308      	movs	r3, #8
   1581c:	18fb      	adds	r3, r7, r3
   1581e:	781b      	ldrb	r3, [r3, #0]
   15820:	06db      	lsls	r3, r3, #27
   15822:	0f9b      	lsrs	r3, r3, #30
   15824:	b2db      	uxtb	r3, r3
   15826:	2b01      	cmp	r3, #1
   15828:	d00c      	beq.n	15844 <lsm6dso_fsm_data_rate_get+0x60>
   1582a:	dc02      	bgt.n	15832 <lsm6dso_fsm_data_rate_get+0x4e>
   1582c:	2b00      	cmp	r3, #0
   1582e:	d005      	beq.n	1583c <lsm6dso_fsm_data_rate_get+0x58>
   15830:	e014      	b.n	1585c <lsm6dso_fsm_data_rate_get+0x78>
   15832:	2b02      	cmp	r3, #2
   15834:	d00a      	beq.n	1584c <lsm6dso_fsm_data_rate_get+0x68>
   15836:	2b03      	cmp	r3, #3
   15838:	d00c      	beq.n	15854 <lsm6dso_fsm_data_rate_get+0x70>
   1583a:	e00f      	b.n	1585c <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   1583c:	683b      	ldr	r3, [r7, #0]
   1583e:	2200      	movs	r2, #0
   15840:	701a      	strb	r2, [r3, #0]
        break;
   15842:	e00f      	b.n	15864 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   15844:	683b      	ldr	r3, [r7, #0]
   15846:	2201      	movs	r2, #1
   15848:	701a      	strb	r2, [r3, #0]
        break;
   1584a:	e00b      	b.n	15864 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   1584c:	683b      	ldr	r3, [r7, #0]
   1584e:	2202      	movs	r2, #2
   15850:	701a      	strb	r2, [r3, #0]
        break;
   15852:	e007      	b.n	15864 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   15854:	683b      	ldr	r3, [r7, #0]
   15856:	2203      	movs	r2, #3
   15858:	701a      	strb	r2, [r3, #0]
        break;
   1585a:	e003      	b.n	15864 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   1585c:	683b      	ldr	r3, [r7, #0]
   1585e:	2200      	movs	r2, #0
   15860:	701a      	strb	r2, [r3, #0]
        break;
   15862:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15864:	687b      	ldr	r3, [r7, #4]
   15866:	2100      	movs	r1, #0
   15868:	0018      	movs	r0, r3
   1586a:	4b04      	ldr	r3, [pc, #16]	; (1587c <lsm6dso_fsm_data_rate_get+0x98>)
   1586c:	4798      	blx	r3
   1586e:	0003      	movs	r3, r0
   15870:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15872:	68fb      	ldr	r3, [r7, #12]
}
   15874:	0018      	movs	r0, r3
   15876:	46bd      	mov	sp, r7
   15878:	b005      	add	sp, #20
   1587a:	bd90      	pop	{r4, r7, pc}
   1587c:	00015471 	.word	0x00015471
   15880:	00014b85 	.word	0x00014b85

00015884 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   15884:	b580      	push	{r7, lr}
   15886:	b084      	sub	sp, #16
   15888:	af00      	add	r7, sp, #0
   1588a:	60f8      	str	r0, [r7, #12]
   1588c:	0008      	movs	r0, r1
   1588e:	607a      	str	r2, [r7, #4]
   15890:	0019      	movs	r1, r3
   15892:	230b      	movs	r3, #11
   15894:	18fb      	adds	r3, r7, r3
   15896:	1c02      	adds	r2, r0, #0
   15898:	701a      	strb	r2, [r3, #0]
   1589a:	2308      	movs	r3, #8
   1589c:	18fb      	adds	r3, r7, r3
   1589e:	1c0a      	adds	r2, r1, #0
   158a0:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
return 0;
   158a2:	2300      	movs	r3, #0

}
   158a4:	0018      	movs	r0, r3
   158a6:	46bd      	mov	sp, r7
   158a8:	b004      	add	sp, #16
   158aa:	bd80      	pop	{r7, pc}

000158ac <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   158ac:	b580      	push	{r7, lr}
   158ae:	b084      	sub	sp, #16
   158b0:	af00      	add	r7, sp, #0
   158b2:	60f8      	str	r0, [r7, #12]
   158b4:	0008      	movs	r0, r1
   158b6:	607a      	str	r2, [r7, #4]
   158b8:	0019      	movs	r1, r3
   158ba:	230b      	movs	r3, #11
   158bc:	18fb      	adds	r3, r7, r3
   158be:	1c02      	adds	r2, r0, #0
   158c0:	701a      	strb	r2, [r3, #0]
   158c2:	2308      	movs	r3, #8
   158c4:	18fb      	adds	r3, r7, r3
   158c6:	1c0a      	adds	r2, r1, #0
   158c8:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
return 0;
   158ca:	2300      	movs	r3, #0


}
   158cc:	0018      	movs	r0, r3
   158ce:	46bd      	mov	sp, r7
   158d0:	b004      	add	sp, #16
   158d2:	bd80      	pop	{r7, pc}

000158d4 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   158d4:	b580      	push	{r7, lr}
   158d6:	af00      	add	r7, sp, #0
return &dev_ctx;
   158d8:	4b01      	ldr	r3, [pc, #4]	; (158e0 <GetImuStruct+0xc>)
}
   158da:	0018      	movs	r0, r3
   158dc:	46bd      	mov	sp, r7
   158de:	bd80      	pop	{r7, pc}
   158e0:	20000020 	.word	0x20000020

000158e4 <InitImu>:



int32_t InitImu(void)
{
   158e4:	b580      	push	{r7, lr}
   158e6:	b082      	sub	sp, #8
   158e8:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   158ea:	2300      	movs	r3, #0
   158ec:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   158ee:	4b23      	ldr	r3, [pc, #140]	; (1597c <InitImu+0x98>)
   158f0:	2101      	movs	r1, #1
   158f2:	0018      	movs	r0, r3
   158f4:	4b22      	ldr	r3, [pc, #136]	; (15980 <InitImu+0x9c>)
   158f6:	4798      	blx	r3
   158f8:	0003      	movs	r3, r0
   158fa:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   158fc:	1cfa      	adds	r2, r7, #3
   158fe:	4b1f      	ldr	r3, [pc, #124]	; (1597c <InitImu+0x98>)
   15900:	0011      	movs	r1, r2
   15902:	0018      	movs	r0, r3
   15904:	4b1f      	ldr	r3, [pc, #124]	; (15984 <InitImu+0xa0>)
   15906:	4798      	blx	r3
   15908:	0002      	movs	r2, r0
   1590a:	687b      	ldr	r3, [r7, #4]
   1590c:	4313      	orrs	r3, r2
   1590e:	607b      	str	r3, [r7, #4]
  } while (rst);
   15910:	1cfb      	adds	r3, r7, #3
   15912:	781b      	ldrb	r3, [r3, #0]
   15914:	2b00      	cmp	r3, #0
   15916:	d1f1      	bne.n	158fc <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   15918:	4b18      	ldr	r3, [pc, #96]	; (1597c <InitImu+0x98>)
   1591a:	2180      	movs	r1, #128	; 0x80
   1591c:	0018      	movs	r0, r3
   1591e:	4b1a      	ldr	r3, [pc, #104]	; (15988 <InitImu+0xa4>)
   15920:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   15922:	4b16      	ldr	r3, [pc, #88]	; (1597c <InitImu+0x98>)
   15924:	2101      	movs	r1, #1
   15926:	0018      	movs	r0, r3
   15928:	4b18      	ldr	r3, [pc, #96]	; (1598c <InitImu+0xa8>)
   1592a:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   1592c:	4b13      	ldr	r3, [pc, #76]	; (1597c <InitImu+0x98>)
   1592e:	2100      	movs	r1, #0
   15930:	0018      	movs	r0, r3
   15932:	4b17      	ldr	r3, [pc, #92]	; (15990 <InitImu+0xac>)
   15934:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   15936:	4b11      	ldr	r3, [pc, #68]	; (1597c <InitImu+0x98>)
   15938:	2101      	movs	r1, #1
   1593a:	0018      	movs	r0, r3
   1593c:	4b15      	ldr	r3, [pc, #84]	; (15994 <InitImu+0xb0>)
   1593e:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   15940:	4b0e      	ldr	r3, [pc, #56]	; (1597c <InitImu+0x98>)
   15942:	2101      	movs	r1, #1
   15944:	0018      	movs	r0, r3
   15946:	4b14      	ldr	r3, [pc, #80]	; (15998 <InitImu+0xb4>)
   15948:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   1594a:	4b0c      	ldr	r3, [pc, #48]	; (1597c <InitImu+0x98>)
   1594c:	2100      	movs	r1, #0
   1594e:	0018      	movs	r0, r3
   15950:	4b12      	ldr	r3, [pc, #72]	; (1599c <InitImu+0xb8>)
   15952:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   15954:	4b09      	ldr	r3, [pc, #36]	; (1597c <InitImu+0x98>)
   15956:	2106      	movs	r1, #6
   15958:	0018      	movs	r0, r3
   1595a:	4b11      	ldr	r3, [pc, #68]	; (159a0 <InitImu+0xbc>)
   1595c:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   1595e:	4b07      	ldr	r3, [pc, #28]	; (1597c <InitImu+0x98>)
   15960:	2104      	movs	r1, #4
   15962:	0018      	movs	r0, r3
   15964:	4b0f      	ldr	r3, [pc, #60]	; (159a4 <InitImu+0xc0>)
   15966:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   15968:	4b04      	ldr	r3, [pc, #16]	; (1597c <InitImu+0x98>)
   1596a:	2101      	movs	r1, #1
   1596c:	0018      	movs	r0, r3
   1596e:	4b0e      	ldr	r3, [pc, #56]	; (159a8 <InitImu+0xc4>)
   15970:	4798      	blx	r3

  return error;
   15972:	687b      	ldr	r3, [r7, #4]
}
   15974:	0018      	movs	r0, r3
   15976:	46bd      	mov	sp, r7
   15978:	b002      	add	sp, #8
   1597a:	bd80      	pop	{r7, pc}
   1597c:	20000020 	.word	0x20000020
   15980:	00015501 	.word	0x00015501
   15984:	0001556d 	.word	0x0001556d
   15988:	000156cd 	.word	0x000156cd
   1598c:	000152a9 	.word	0x000152a9
   15990:	00015315 	.word	0x00015315
   15994:	00014cb5 	.word	0x00014cb5
   15998:	00014fe5 	.word	0x00014fe5
   1599c:	00014c49 	.word	0x00014c49
   159a0:	00014f79 	.word	0x00014f79
   159a4:	00015615 	.word	0x00015615
   159a8:	000155a9 	.word	0x000155a9

000159ac <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(void)
{
   159ac:	b580      	push	{r7, lr}
   159ae:	b082      	sub	sp, #8
   159b0:	af00      	add	r7, sp, #0
    uint8_t readData[2];
    seesawData.address = NEO_TRELLIS_ADDR;
   159b2:	4b38      	ldr	r3, [pc, #224]	; (15a94 <InitializeSeesaw+0xe8>)
   159b4:	222e      	movs	r2, #46	; 0x2e
   159b6:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   159b8:	4b36      	ldr	r3, [pc, #216]	; (15a94 <InitializeSeesaw+0xe8>)
   159ba:	4a37      	ldr	r2, [pc, #220]	; (15a98 <InitializeSeesaw+0xec>)
   159bc:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   159be:	4b35      	ldr	r3, [pc, #212]	; (15a94 <InitializeSeesaw+0xe8>)
   159c0:	2202      	movs	r2, #2
   159c2:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   159c4:	4b33      	ldr	r3, [pc, #204]	; (15a94 <InitializeSeesaw+0xe8>)
   159c6:	003a      	movs	r2, r7
   159c8:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   159ca:	4b32      	ldr	r3, [pc, #200]	; (15a94 <InitializeSeesaw+0xe8>)
   159cc:	2201      	movs	r2, #1
   159ce:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   159d0:	4b30      	ldr	r3, [pc, #192]	; (15a94 <InitializeSeesaw+0xe8>)
   159d2:	2264      	movs	r2, #100	; 0x64
   159d4:	2100      	movs	r1, #0
   159d6:	0018      	movs	r0, r3
   159d8:	4b30      	ldr	r3, [pc, #192]	; (15a9c <InitializeSeesaw+0xf0>)
   159da:	4798      	blx	r3
   159dc:	0003      	movs	r3, r0
   159de:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   159e0:	687b      	ldr	r3, [r7, #4]
   159e2:	2b00      	cmp	r3, #0
   159e4:	d004      	beq.n	159f0 <InitializeSeesaw+0x44>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   159e6:	4b2e      	ldr	r3, [pc, #184]	; (15aa0 <InitializeSeesaw+0xf4>)
   159e8:	0018      	movs	r0, r3
   159ea:	4b2e      	ldr	r3, [pc, #184]	; (15aa4 <InitializeSeesaw+0xf8>)
   159ec:	4798      	blx	r3
   159ee:	e00c      	b.n	15a0a <InitializeSeesaw+0x5e>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   159f0:	003b      	movs	r3, r7
   159f2:	781b      	ldrb	r3, [r3, #0]
   159f4:	2b55      	cmp	r3, #85	; 0x55
   159f6:	d004      	beq.n	15a02 <InitializeSeesaw+0x56>
            SerialConsoleWriteString("Error/r/n");
   159f8:	4b2b      	ldr	r3, [pc, #172]	; (15aa8 <InitializeSeesaw+0xfc>)
   159fa:	0018      	movs	r0, r3
   159fc:	4b29      	ldr	r3, [pc, #164]	; (15aa4 <InitializeSeesaw+0xf8>)
   159fe:	4798      	blx	r3
   15a00:	e003      	b.n	15a0a <InitializeSeesaw+0x5e>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   15a02:	4b2a      	ldr	r3, [pc, #168]	; (15aac <InitializeSeesaw+0x100>)
   15a04:	0018      	movs	r0, r3
   15a06:	4b27      	ldr	r3, [pc, #156]	; (15aa4 <InitializeSeesaw+0xf8>)
   15a08:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   15a0a:	4b22      	ldr	r3, [pc, #136]	; (15a94 <InitializeSeesaw+0xe8>)
   15a0c:	4a28      	ldr	r2, [pc, #160]	; (15ab0 <InitializeSeesaw+0x104>)
   15a0e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   15a10:	4b20      	ldr	r3, [pc, #128]	; (15a94 <InitializeSeesaw+0xe8>)
   15a12:	2203      	movs	r2, #3
   15a14:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15a16:	4b1f      	ldr	r3, [pc, #124]	; (15a94 <InitializeSeesaw+0xe8>)
   15a18:	2164      	movs	r1, #100	; 0x64
   15a1a:	0018      	movs	r0, r3
   15a1c:	4b25      	ldr	r3, [pc, #148]	; (15ab4 <InitializeSeesaw+0x108>)
   15a1e:	4798      	blx	r3
   15a20:	0003      	movs	r3, r0
   15a22:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   15a24:	687b      	ldr	r3, [r7, #4]
   15a26:	2b00      	cmp	r3, #0
   15a28:	d003      	beq.n	15a32 <InitializeSeesaw+0x86>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   15a2a:	4b23      	ldr	r3, [pc, #140]	; (15ab8 <InitializeSeesaw+0x10c>)
   15a2c:	0018      	movs	r0, r3
   15a2e:	4b1d      	ldr	r3, [pc, #116]	; (15aa4 <InitializeSeesaw+0xf8>)
   15a30:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   15a32:	4b18      	ldr	r3, [pc, #96]	; (15a94 <InitializeSeesaw+0xe8>)
   15a34:	4a21      	ldr	r2, [pc, #132]	; (15abc <InitializeSeesaw+0x110>)
   15a36:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   15a38:	4b16      	ldr	r3, [pc, #88]	; (15a94 <InitializeSeesaw+0xe8>)
   15a3a:	2203      	movs	r2, #3
   15a3c:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15a3e:	4b15      	ldr	r3, [pc, #84]	; (15a94 <InitializeSeesaw+0xe8>)
   15a40:	2164      	movs	r1, #100	; 0x64
   15a42:	0018      	movs	r0, r3
   15a44:	4b1b      	ldr	r3, [pc, #108]	; (15ab4 <InitializeSeesaw+0x108>)
   15a46:	4798      	blx	r3
   15a48:	0003      	movs	r3, r0
   15a4a:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   15a4c:	687b      	ldr	r3, [r7, #4]
   15a4e:	2b00      	cmp	r3, #0
   15a50:	d003      	beq.n	15a5a <InitializeSeesaw+0xae>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   15a52:	4b1b      	ldr	r3, [pc, #108]	; (15ac0 <InitializeSeesaw+0x114>)
   15a54:	0018      	movs	r0, r3
   15a56:	4b13      	ldr	r3, [pc, #76]	; (15aa4 <InitializeSeesaw+0xf8>)
   15a58:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   15a5a:	4b0e      	ldr	r3, [pc, #56]	; (15a94 <InitializeSeesaw+0xe8>)
   15a5c:	4a19      	ldr	r2, [pc, #100]	; (15ac4 <InitializeSeesaw+0x118>)
   15a5e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   15a60:	4b0c      	ldr	r3, [pc, #48]	; (15a94 <InitializeSeesaw+0xe8>)
   15a62:	2204      	movs	r2, #4
   15a64:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15a66:	4b0b      	ldr	r3, [pc, #44]	; (15a94 <InitializeSeesaw+0xe8>)
   15a68:	2164      	movs	r1, #100	; 0x64
   15a6a:	0018      	movs	r0, r3
   15a6c:	4b11      	ldr	r3, [pc, #68]	; (15ab4 <InitializeSeesaw+0x108>)
   15a6e:	4798      	blx	r3
   15a70:	0003      	movs	r3, r0
   15a72:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   15a74:	687b      	ldr	r3, [r7, #4]
   15a76:	2b00      	cmp	r3, #0
   15a78:	d003      	beq.n	15a82 <InitializeSeesaw+0xd6>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   15a7a:	4b13      	ldr	r3, [pc, #76]	; (15ac8 <InitializeSeesaw+0x11c>)
   15a7c:	0018      	movs	r0, r3
   15a7e:	4b09      	ldr	r3, [pc, #36]	; (15aa4 <InitializeSeesaw+0xf8>)
   15a80:	4798      	blx	r3
    }

    SeesawTurnOnLedTest();
   15a82:	4b12      	ldr	r3, [pc, #72]	; (15acc <InitializeSeesaw+0x120>)
   15a84:	4798      	blx	r3

    SeesawInitializeKeypad();
   15a86:	4b12      	ldr	r3, [pc, #72]	; (15ad0 <InitializeSeesaw+0x124>)
   15a88:	4798      	blx	r3
    return error;
   15a8a:	687b      	ldr	r3, [r7, #4]
}
   15a8c:	0018      	movs	r0, r3
   15a8e:	46bd      	mov	sp, r7
   15a90:	b002      	add	sp, #8
   15a92:	bd80      	pop	{r7, pc}
   15a94:	20004864 	.word	0x20004864
   15a98:	00036acc 	.word	0x00036acc
   15a9c:	00014a71 	.word	0x00014a71
   15aa0:	00036ae4 	.word	0x00036ae4
   15aa4:	0001e2b5 	.word	0x0001e2b5
   15aa8:	00036b04 	.word	0x00036b04
   15aac:	00036b10 	.word	0x00036b10
   15ab0:	00036ad0 	.word	0x00036ad0
   15ab4:	00014999 	.word	0x00014999
   15ab8:	00036b24 	.word	0x00036b24
   15abc:	00036ad4 	.word	0x00036ad4
   15ac0:	00036b44 	.word	0x00036b44
   15ac4:	00036ad8 	.word	0x00036ad8
   15ac8:	00036b70 	.word	0x00036b70
   15acc:	00015e81 	.word	0x00015e81
   15ad0:	00015d91 	.word	0x00015d91

00015ad4 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   15ad4:	b580      	push	{r7, lr}
   15ad6:	b082      	sub	sp, #8
   15ad8:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   15ada:	1cfb      	adds	r3, r7, #3
   15adc:	2200      	movs	r2, #0
   15ade:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   15ae0:	4b11      	ldr	r3, [pc, #68]	; (15b28 <SeesawGetKeypadCount+0x54>)
   15ae2:	222e      	movs	r2, #46	; 0x2e
   15ae4:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   15ae6:	4b10      	ldr	r3, [pc, #64]	; (15b28 <SeesawGetKeypadCount+0x54>)
   15ae8:	4a10      	ldr	r2, [pc, #64]	; (15b2c <SeesawGetKeypadCount+0x58>)
   15aea:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   15aec:	4b0e      	ldr	r3, [pc, #56]	; (15b28 <SeesawGetKeypadCount+0x54>)
   15aee:	2202      	movs	r2, #2
   15af0:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   15af2:	4b0d      	ldr	r3, [pc, #52]	; (15b28 <SeesawGetKeypadCount+0x54>)
   15af4:	1cfa      	adds	r2, r7, #3
   15af6:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15af8:	4b0b      	ldr	r3, [pc, #44]	; (15b28 <SeesawGetKeypadCount+0x54>)
   15afa:	2201      	movs	r2, #1
   15afc:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15afe:	4b0a      	ldr	r3, [pc, #40]	; (15b28 <SeesawGetKeypadCount+0x54>)
   15b00:	2264      	movs	r2, #100	; 0x64
   15b02:	2100      	movs	r1, #0
   15b04:	0018      	movs	r0, r3
   15b06:	4b0a      	ldr	r3, [pc, #40]	; (15b30 <SeesawGetKeypadCount+0x5c>)
   15b08:	4798      	blx	r3
   15b0a:	0003      	movs	r3, r0
   15b0c:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   15b0e:	687b      	ldr	r3, [r7, #4]
   15b10:	2b00      	cmp	r3, #0
   15b12:	d003      	beq.n	15b1c <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15b14:	4b07      	ldr	r3, [pc, #28]	; (15b34 <SeesawGetKeypadCount+0x60>)
   15b16:	0018      	movs	r0, r3
   15b18:	4b07      	ldr	r3, [pc, #28]	; (15b38 <SeesawGetKeypadCount+0x64>)
   15b1a:	4798      	blx	r3
    }
    return count;
   15b1c:	1cfb      	adds	r3, r7, #3
   15b1e:	781b      	ldrb	r3, [r3, #0]
}
   15b20:	0018      	movs	r0, r3
   15b22:	46bd      	mov	sp, r7
   15b24:	b002      	add	sp, #8
   15b26:	bd80      	pop	{r7, pc}
   15b28:	20004864 	.word	0x20004864
   15b2c:	00036ae0 	.word	0x00036ae0
   15b30:	00014a71 	.word	0x00014a71
   15b34:	00036ba4 	.word	0x00036ba4
   15b38:	0001e2b5 	.word	0x0001e2b5

00015b3c <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   15b3c:	b580      	push	{r7, lr}
   15b3e:	b084      	sub	sp, #16
   15b40:	af00      	add	r7, sp, #0
   15b42:	6078      	str	r0, [r7, #4]
   15b44:	000a      	movs	r2, r1
   15b46:	1cfb      	adds	r3, r7, #3
   15b48:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   15b4a:	1cfb      	adds	r3, r7, #3
   15b4c:	781b      	ldrb	r3, [r3, #0]
   15b4e:	2b00      	cmp	r3, #0
   15b50:	d101      	bne.n	15b56 <SeesawReadKeypad+0x1a>
   15b52:	2300      	movs	r3, #0
   15b54:	e026      	b.n	15ba4 <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   15b56:	2308      	movs	r3, #8
   15b58:	18fb      	adds	r3, r7, r3
   15b5a:	4a14      	ldr	r2, [pc, #80]	; (15bac <SeesawReadKeypad+0x70>)
   15b5c:	8812      	ldrh	r2, [r2, #0]
   15b5e:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   15b60:	4b13      	ldr	r3, [pc, #76]	; (15bb0 <SeesawReadKeypad+0x74>)
   15b62:	222e      	movs	r2, #46	; 0x2e
   15b64:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   15b66:	4b12      	ldr	r3, [pc, #72]	; (15bb0 <SeesawReadKeypad+0x74>)
   15b68:	2208      	movs	r2, #8
   15b6a:	18ba      	adds	r2, r7, r2
   15b6c:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   15b6e:	4b10      	ldr	r3, [pc, #64]	; (15bb0 <SeesawReadKeypad+0x74>)
   15b70:	2202      	movs	r2, #2
   15b72:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   15b74:	4b0e      	ldr	r3, [pc, #56]	; (15bb0 <SeesawReadKeypad+0x74>)
   15b76:	687a      	ldr	r2, [r7, #4]
   15b78:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   15b7a:	1cfb      	adds	r3, r7, #3
   15b7c:	781b      	ldrb	r3, [r3, #0]
   15b7e:	b29a      	uxth	r2, r3
   15b80:	4b0b      	ldr	r3, [pc, #44]	; (15bb0 <SeesawReadKeypad+0x74>)
   15b82:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15b84:	4b0a      	ldr	r3, [pc, #40]	; (15bb0 <SeesawReadKeypad+0x74>)
   15b86:	2264      	movs	r2, #100	; 0x64
   15b88:	2100      	movs	r1, #0
   15b8a:	0018      	movs	r0, r3
   15b8c:	4b09      	ldr	r3, [pc, #36]	; (15bb4 <SeesawReadKeypad+0x78>)
   15b8e:	4798      	blx	r3
   15b90:	0003      	movs	r3, r0
   15b92:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   15b94:	68fb      	ldr	r3, [r7, #12]
   15b96:	2b00      	cmp	r3, #0
   15b98:	d003      	beq.n	15ba2 <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15b9a:	4b07      	ldr	r3, [pc, #28]	; (15bb8 <SeesawReadKeypad+0x7c>)
   15b9c:	0018      	movs	r0, r3
   15b9e:	4b07      	ldr	r3, [pc, #28]	; (15bbc <SeesawReadKeypad+0x80>)
   15ba0:	4798      	blx	r3
    }
    return error;
   15ba2:	68fb      	ldr	r3, [r7, #12]
}
   15ba4:	0018      	movs	r0, r3
   15ba6:	46bd      	mov	sp, r7
   15ba8:	b004      	add	sp, #16
   15baa:	bd80      	pop	{r7, pc}
   15bac:	00036bc8 	.word	0x00036bc8
   15bb0:	20004864 	.word	0x20004864
   15bb4:	00014a71 	.word	0x00014a71
   15bb8:	00036ba4 	.word	0x00036ba4
   15bbc:	0001e2b5 	.word	0x0001e2b5

00015bc0 <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
{
   15bc0:	b590      	push	{r4, r7, lr}
   15bc2:	b087      	sub	sp, #28
   15bc4:	af00      	add	r7, sp, #0
   15bc6:	0004      	movs	r4, r0
   15bc8:	0008      	movs	r0, r1
   15bca:	0011      	movs	r1, r2
   15bcc:	1dfb      	adds	r3, r7, #7
   15bce:	1c22      	adds	r2, r4, #0
   15bd0:	701a      	strb	r2, [r3, #0]
   15bd2:	1dbb      	adds	r3, r7, #6
   15bd4:	1c02      	adds	r2, r0, #0
   15bd6:	701a      	strb	r2, [r3, #0]
   15bd8:	1d7b      	adds	r3, r7, #5
   15bda:	1c0a      	adds	r2, r1, #0
   15bdc:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   15bde:	2310      	movs	r3, #16
   15be0:	18fb      	adds	r3, r7, r3
   15be2:	1d7a      	adds	r2, r7, #5
   15be4:	7812      	ldrb	r2, [r2, #0]
   15be6:	2101      	movs	r1, #1
   15be8:	0010      	movs	r0, r2
   15bea:	4008      	ands	r0, r1
   15bec:	781a      	ldrb	r2, [r3, #0]
   15bee:	2101      	movs	r1, #1
   15bf0:	438a      	bics	r2, r1
   15bf2:	1c11      	adds	r1, r2, #0
   15bf4:	1c02      	adds	r2, r0, #0
   15bf6:	430a      	orrs	r2, r1
   15bf8:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   15bfa:	1dbb      	adds	r3, r7, #6
   15bfc:	781b      	ldrb	r3, [r3, #0]
   15bfe:	2201      	movs	r2, #1
   15c00:	409a      	lsls	r2, r3
   15c02:	0013      	movs	r3, r2
   15c04:	b2db      	uxtb	r3, r3
   15c06:	1c1a      	adds	r2, r3, #0
   15c08:	230f      	movs	r3, #15
   15c0a:	4013      	ands	r3, r2
   15c0c:	b2da      	uxtb	r2, r3
   15c0e:	2310      	movs	r3, #16
   15c10:	18fb      	adds	r3, r7, r3
   15c12:	210f      	movs	r1, #15
   15c14:	400a      	ands	r2, r1
   15c16:	1890      	adds	r0, r2, r2
   15c18:	781a      	ldrb	r2, [r3, #0]
   15c1a:	211e      	movs	r1, #30
   15c1c:	438a      	bics	r2, r1
   15c1e:	1c11      	adds	r1, r2, #0
   15c20:	1c02      	adds	r2, r0, #0
   15c22:	430a      	orrs	r2, r1
   15c24:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   15c26:	230c      	movs	r3, #12
   15c28:	18fb      	adds	r3, r7, r3
   15c2a:	2210      	movs	r2, #16
   15c2c:	701a      	strb	r2, [r3, #0]
   15c2e:	230c      	movs	r3, #12
   15c30:	18fb      	adds	r3, r7, r3
   15c32:	2201      	movs	r2, #1
   15c34:	705a      	strb	r2, [r3, #1]
   15c36:	230c      	movs	r3, #12
   15c38:	18fb      	adds	r3, r7, r3
   15c3a:	1dfa      	adds	r2, r7, #7
   15c3c:	7812      	ldrb	r2, [r2, #0]
   15c3e:	709a      	strb	r2, [r3, #2]
   15c40:	2310      	movs	r3, #16
   15c42:	18fb      	adds	r3, r7, r3
   15c44:	781a      	ldrb	r2, [r3, #0]
   15c46:	230c      	movs	r3, #12
   15c48:	18fb      	adds	r3, r7, r3
   15c4a:	70da      	strb	r2, [r3, #3]

    seesawData.address = NEO_TRELLIS_ADDR;
   15c4c:	4b0c      	ldr	r3, [pc, #48]	; (15c80 <SeesawActivateKey+0xc0>)
   15c4e:	222e      	movs	r2, #46	; 0x2e
   15c50:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   15c52:	4b0b      	ldr	r3, [pc, #44]	; (15c80 <SeesawActivateKey+0xc0>)
   15c54:	220c      	movs	r2, #12
   15c56:	18ba      	adds	r2, r7, r2
   15c58:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   15c5a:	4b09      	ldr	r3, [pc, #36]	; (15c80 <SeesawActivateKey+0xc0>)
   15c5c:	2204      	movs	r2, #4
   15c5e:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   15c60:	4b07      	ldr	r3, [pc, #28]	; (15c80 <SeesawActivateKey+0xc0>)
   15c62:	2200      	movs	r2, #0
   15c64:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   15c66:	4b06      	ldr	r3, [pc, #24]	; (15c80 <SeesawActivateKey+0xc0>)
   15c68:	2164      	movs	r1, #100	; 0x64
   15c6a:	0018      	movs	r0, r3
   15c6c:	4b05      	ldr	r3, [pc, #20]	; (15c84 <SeesawActivateKey+0xc4>)
   15c6e:	4798      	blx	r3
   15c70:	0003      	movs	r3, r0
   15c72:	617b      	str	r3, [r7, #20]
    return error;
   15c74:	697b      	ldr	r3, [r7, #20]
}
   15c76:	0018      	movs	r0, r3
   15c78:	46bd      	mov	sp, r7
   15c7a:	b007      	add	sp, #28
   15c7c:	bd90      	pop	{r4, r7, pc}
   15c7e:	46c0      	nop			; (mov r8, r8)
   15c80:	20004864 	.word	0x20004864
   15c84:	00014999 	.word	0x00014999

00015c88 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   15c88:	b5b0      	push	{r4, r5, r7, lr}
   15c8a:	b086      	sub	sp, #24
   15c8c:	af00      	add	r7, sp, #0
   15c8e:	0005      	movs	r5, r0
   15c90:	000c      	movs	r4, r1
   15c92:	0010      	movs	r0, r2
   15c94:	0019      	movs	r1, r3
   15c96:	1dfb      	adds	r3, r7, #7
   15c98:	1c2a      	adds	r2, r5, #0
   15c9a:	701a      	strb	r2, [r3, #0]
   15c9c:	1dbb      	adds	r3, r7, #6
   15c9e:	1c22      	adds	r2, r4, #0
   15ca0:	701a      	strb	r2, [r3, #0]
   15ca2:	1d7b      	adds	r3, r7, #5
   15ca4:	1c02      	adds	r2, r0, #0
   15ca6:	701a      	strb	r2, [r3, #0]
   15ca8:	1d3b      	adds	r3, r7, #4
   15caa:	1c0a      	adds	r2, r1, #0
   15cac:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   15cae:	2308      	movs	r3, #8
   15cb0:	18fb      	adds	r3, r7, r3
   15cb2:	220e      	movs	r2, #14
   15cb4:	701a      	strb	r2, [r3, #0]
   15cb6:	2308      	movs	r3, #8
   15cb8:	18fb      	adds	r3, r7, r3
   15cba:	2204      	movs	r2, #4
   15cbc:	705a      	strb	r2, [r3, #1]
   15cbe:	2308      	movs	r3, #8
   15cc0:	18fb      	adds	r3, r7, r3
   15cc2:	2200      	movs	r2, #0
   15cc4:	709a      	strb	r2, [r3, #2]
   15cc6:	2308      	movs	r3, #8
   15cc8:	18fb      	adds	r3, r7, r3
   15cca:	2200      	movs	r2, #0
   15ccc:	70da      	strb	r2, [r3, #3]
   15cce:	2308      	movs	r3, #8
   15cd0:	18fb      	adds	r3, r7, r3
   15cd2:	1d7a      	adds	r2, r7, #5
   15cd4:	7812      	ldrb	r2, [r2, #0]
   15cd6:	711a      	strb	r2, [r3, #4]
   15cd8:	2308      	movs	r3, #8
   15cda:	18fb      	adds	r3, r7, r3
   15cdc:	1dba      	adds	r2, r7, #6
   15cde:	7812      	ldrb	r2, [r2, #0]
   15ce0:	715a      	strb	r2, [r3, #5]
   15ce2:	2308      	movs	r3, #8
   15ce4:	18fb      	adds	r3, r7, r3
   15ce6:	1d3a      	adds	r2, r7, #4
   15ce8:	7812      	ldrb	r2, [r2, #0]
   15cea:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   15cec:	1dfb      	adds	r3, r7, #7
   15cee:	781b      	ldrb	r3, [r3, #0]
   15cf0:	b29b      	uxth	r3, r3
   15cf2:	2216      	movs	r2, #22
   15cf4:	18ba      	adds	r2, r7, r2
   15cf6:	1c19      	adds	r1, r3, #0
   15cf8:	1c0b      	adds	r3, r1, #0
   15cfa:	18db      	adds	r3, r3, r3
   15cfc:	185b      	adds	r3, r3, r1
   15cfe:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   15d00:	2316      	movs	r3, #22
   15d02:	18fb      	adds	r3, r7, r3
   15d04:	881b      	ldrh	r3, [r3, #0]
   15d06:	0a1b      	lsrs	r3, r3, #8
   15d08:	b29b      	uxth	r3, r3
   15d0a:	b2da      	uxtb	r2, r3
   15d0c:	2308      	movs	r3, #8
   15d0e:	18fb      	adds	r3, r7, r3
   15d10:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   15d12:	2316      	movs	r3, #22
   15d14:	18fb      	adds	r3, r7, r3
   15d16:	881b      	ldrh	r3, [r3, #0]
   15d18:	b2da      	uxtb	r2, r3
   15d1a:	2308      	movs	r3, #8
   15d1c:	18fb      	adds	r3, r7, r3
   15d1e:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   15d20:	4b09      	ldr	r3, [pc, #36]	; (15d48 <SeesawSetLed+0xc0>)
   15d22:	2208      	movs	r2, #8
   15d24:	18ba      	adds	r2, r7, r2
   15d26:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   15d28:	4b07      	ldr	r3, [pc, #28]	; (15d48 <SeesawSetLed+0xc0>)
   15d2a:	2207      	movs	r2, #7
   15d2c:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   15d2e:	4b06      	ldr	r3, [pc, #24]	; (15d48 <SeesawSetLed+0xc0>)
   15d30:	2164      	movs	r1, #100	; 0x64
   15d32:	0018      	movs	r0, r3
   15d34:	4b05      	ldr	r3, [pc, #20]	; (15d4c <SeesawSetLed+0xc4>)
   15d36:	4798      	blx	r3
   15d38:	0003      	movs	r3, r0
   15d3a:	613b      	str	r3, [r7, #16]
    return error;
   15d3c:	693b      	ldr	r3, [r7, #16]
}
   15d3e:	0018      	movs	r0, r3
   15d40:	46bd      	mov	sp, r7
   15d42:	b006      	add	sp, #24
   15d44:	bdb0      	pop	{r4, r5, r7, pc}
   15d46:	46c0      	nop			; (mov r8, r8)
   15d48:	20004864 	.word	0x20004864
   15d4c:	00014999 	.word	0x00014999

00015d50 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   15d50:	b580      	push	{r7, lr}
   15d52:	b082      	sub	sp, #8
   15d54:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   15d56:	003b      	movs	r3, r7
   15d58:	4a0a      	ldr	r2, [pc, #40]	; (15d84 <SeesawOrderLedUpdate+0x34>)
   15d5a:	8812      	ldrh	r2, [r2, #0]
   15d5c:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   15d5e:	4b0a      	ldr	r3, [pc, #40]	; (15d88 <SeesawOrderLedUpdate+0x38>)
   15d60:	003a      	movs	r2, r7
   15d62:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   15d64:	4b08      	ldr	r3, [pc, #32]	; (15d88 <SeesawOrderLedUpdate+0x38>)
   15d66:	2202      	movs	r2, #2
   15d68:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   15d6a:	4b07      	ldr	r3, [pc, #28]	; (15d88 <SeesawOrderLedUpdate+0x38>)
   15d6c:	2164      	movs	r1, #100	; 0x64
   15d6e:	0018      	movs	r0, r3
   15d70:	4b06      	ldr	r3, [pc, #24]	; (15d8c <SeesawOrderLedUpdate+0x3c>)
   15d72:	4798      	blx	r3
   15d74:	0003      	movs	r3, r0
   15d76:	607b      	str	r3, [r7, #4]
    return error;
   15d78:	687b      	ldr	r3, [r7, #4]
}
   15d7a:	0018      	movs	r0, r3
   15d7c:	46bd      	mov	sp, r7
   15d7e:	b002      	add	sp, #8
   15d80:	bd80      	pop	{r7, pc}
   15d82:	46c0      	nop			; (mov r8, r8)
   15d84:	00036bcc 	.word	0x00036bcc
   15d88:	20004864 	.word	0x20004864
   15d8c:	00014999 	.word	0x00014999

00015d90 <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   15d90:	b580      	push	{r7, lr}
   15d92:	b082      	sub	sp, #8
   15d94:	af00      	add	r7, sp, #0
    seesawData.address = NEO_TRELLIS_ADDR;
   15d96:	4b33      	ldr	r3, [pc, #204]	; (15e64 <SeesawInitializeKeypad+0xd4>)
   15d98:	222e      	movs	r2, #46	; 0x2e
   15d9a:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   15d9c:	4b31      	ldr	r3, [pc, #196]	; (15e64 <SeesawInitializeKeypad+0xd4>)
   15d9e:	4a32      	ldr	r2, [pc, #200]	; (15e68 <SeesawInitializeKeypad+0xd8>)
   15da0:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   15da2:	4b30      	ldr	r3, [pc, #192]	; (15e64 <SeesawInitializeKeypad+0xd4>)
   15da4:	2203      	movs	r2, #3
   15da6:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   15da8:	4b2e      	ldr	r3, [pc, #184]	; (15e64 <SeesawInitializeKeypad+0xd4>)
   15daa:	2200      	movs	r2, #0
   15dac:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   15dae:	4b2d      	ldr	r3, [pc, #180]	; (15e64 <SeesawInitializeKeypad+0xd4>)
   15db0:	2164      	movs	r1, #100	; 0x64
   15db2:	0018      	movs	r0, r3
   15db4:	4b2d      	ldr	r3, [pc, #180]	; (15e6c <SeesawInitializeKeypad+0xdc>)
   15db6:	4798      	blx	r3
   15db8:	0003      	movs	r3, r0
   15dba:	603b      	str	r3, [r7, #0]
    if (ERROR_NONE != error) {
   15dbc:	683b      	ldr	r3, [r7, #0]
   15dbe:	2b00      	cmp	r3, #0
   15dc0:	d003      	beq.n	15dca <SeesawInitializeKeypad+0x3a>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   15dc2:	4b2b      	ldr	r3, [pc, #172]	; (15e70 <SeesawInitializeKeypad+0xe0>)
   15dc4:	0018      	movs	r0, r3
   15dc6:	4b2b      	ldr	r3, [pc, #172]	; (15e74 <SeesawInitializeKeypad+0xe4>)
   15dc8:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   15dca:	2300      	movs	r3, #0
   15dcc:	607b      	str	r3, [r7, #4]
   15dce:	e041      	b.n	15e54 <SeesawInitializeKeypad+0xc4>
        error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   15dd0:	687b      	ldr	r3, [r7, #4]
   15dd2:	2b00      	cmp	r3, #0
   15dd4:	da00      	bge.n	15dd8 <SeesawInitializeKeypad+0x48>
   15dd6:	3303      	adds	r3, #3
   15dd8:	109b      	asrs	r3, r3, #2
   15dda:	b2db      	uxtb	r3, r3
   15ddc:	00db      	lsls	r3, r3, #3
   15dde:	b2da      	uxtb	r2, r3
   15de0:	687b      	ldr	r3, [r7, #4]
   15de2:	4925      	ldr	r1, [pc, #148]	; (15e78 <SeesawInitializeKeypad+0xe8>)
   15de4:	400b      	ands	r3, r1
   15de6:	d504      	bpl.n	15df2 <SeesawInitializeKeypad+0x62>
   15de8:	3b01      	subs	r3, #1
   15dea:	2104      	movs	r1, #4
   15dec:	4249      	negs	r1, r1
   15dee:	430b      	orrs	r3, r1
   15df0:	3301      	adds	r3, #1
   15df2:	b2db      	uxtb	r3, r3
   15df4:	18d3      	adds	r3, r2, r3
   15df6:	b2db      	uxtb	r3, r3
   15df8:	2201      	movs	r2, #1
   15dfa:	2103      	movs	r1, #3
   15dfc:	0018      	movs	r0, r3
   15dfe:	4b1f      	ldr	r3, [pc, #124]	; (15e7c <SeesawInitializeKeypad+0xec>)
   15e00:	4798      	blx	r3
   15e02:	0003      	movs	r3, r0
   15e04:	603b      	str	r3, [r7, #0]
        error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   15e06:	687b      	ldr	r3, [r7, #4]
   15e08:	2b00      	cmp	r3, #0
   15e0a:	da00      	bge.n	15e0e <SeesawInitializeKeypad+0x7e>
   15e0c:	3303      	adds	r3, #3
   15e0e:	109b      	asrs	r3, r3, #2
   15e10:	b2db      	uxtb	r3, r3
   15e12:	00db      	lsls	r3, r3, #3
   15e14:	b2da      	uxtb	r2, r3
   15e16:	687b      	ldr	r3, [r7, #4]
   15e18:	4917      	ldr	r1, [pc, #92]	; (15e78 <SeesawInitializeKeypad+0xe8>)
   15e1a:	400b      	ands	r3, r1
   15e1c:	d504      	bpl.n	15e28 <SeesawInitializeKeypad+0x98>
   15e1e:	3b01      	subs	r3, #1
   15e20:	2104      	movs	r1, #4
   15e22:	4249      	negs	r1, r1
   15e24:	430b      	orrs	r3, r1
   15e26:	3301      	adds	r3, #1
   15e28:	b2db      	uxtb	r3, r3
   15e2a:	18d3      	adds	r3, r2, r3
   15e2c:	b2db      	uxtb	r3, r3
   15e2e:	2201      	movs	r2, #1
   15e30:	2102      	movs	r1, #2
   15e32:	0018      	movs	r0, r3
   15e34:	4b11      	ldr	r3, [pc, #68]	; (15e7c <SeesawInitializeKeypad+0xec>)
   15e36:	4798      	blx	r3
   15e38:	0002      	movs	r2, r0
   15e3a:	683b      	ldr	r3, [r7, #0]
   15e3c:	4313      	orrs	r3, r2
   15e3e:	603b      	str	r3, [r7, #0]
        if (ERROR_NONE != error) {
   15e40:	683b      	ldr	r3, [r7, #0]
   15e42:	2b00      	cmp	r3, #0
   15e44:	d003      	beq.n	15e4e <SeesawInitializeKeypad+0xbe>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   15e46:	4b0a      	ldr	r3, [pc, #40]	; (15e70 <SeesawInitializeKeypad+0xe0>)
   15e48:	0018      	movs	r0, r3
   15e4a:	4b0a      	ldr	r3, [pc, #40]	; (15e74 <SeesawInitializeKeypad+0xe4>)
   15e4c:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   15e4e:	687b      	ldr	r3, [r7, #4]
   15e50:	3301      	adds	r3, #1
   15e52:	607b      	str	r3, [r7, #4]
   15e54:	687b      	ldr	r3, [r7, #4]
   15e56:	2b0f      	cmp	r3, #15
   15e58:	ddba      	ble.n	15dd0 <SeesawInitializeKeypad+0x40>
        }
    }
}
   15e5a:	46c0      	nop			; (mov r8, r8)
   15e5c:	46bd      	mov	sp, r7
   15e5e:	b002      	add	sp, #8
   15e60:	bd80      	pop	{r7, pc}
   15e62:	46c0      	nop			; (mov r8, r8)
   15e64:	20004864 	.word	0x20004864
   15e68:	00036adc 	.word	0x00036adc
   15e6c:	00014999 	.word	0x00014999
   15e70:	00036bd0 	.word	0x00036bd0
   15e74:	0001e2b5 	.word	0x0001e2b5
   15e78:	80000003 	.word	0x80000003
   15e7c:	00015bc1 	.word	0x00015bc1

00015e80 <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(void)
{
   15e80:	b5b0      	push	{r4, r5, r7, lr}
   15e82:	af00      	add	r7, sp, #0
    SeesawSetLed(15, 255, 255, 255);
   15e84:	23ff      	movs	r3, #255	; 0xff
   15e86:	22ff      	movs	r2, #255	; 0xff
   15e88:	21ff      	movs	r1, #255	; 0xff
   15e8a:	200f      	movs	r0, #15
   15e8c:	4c09      	ldr	r4, [pc, #36]	; (15eb4 <SeesawTurnOnLedTest+0x34>)
   15e8e:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   15e90:	4b09      	ldr	r3, [pc, #36]	; (15eb8 <SeesawTurnOnLedTest+0x38>)
   15e92:	4798      	blx	r3
    vTaskDelay(400);
   15e94:	23c8      	movs	r3, #200	; 0xc8
   15e96:	005b      	lsls	r3, r3, #1
   15e98:	0018      	movs	r0, r3
   15e9a:	4b08      	ldr	r3, [pc, #32]	; (15ebc <SeesawTurnOnLedTest+0x3c>)
   15e9c:	4798      	blx	r3

    SeesawSetLed(15, 0, 0, 0);
   15e9e:	2300      	movs	r3, #0
   15ea0:	2200      	movs	r2, #0
   15ea2:	2100      	movs	r1, #0
   15ea4:	200f      	movs	r0, #15
   15ea6:	4c03      	ldr	r4, [pc, #12]	; (15eb4 <SeesawTurnOnLedTest+0x34>)
   15ea8:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   15eaa:	4b03      	ldr	r3, [pc, #12]	; (15eb8 <SeesawTurnOnLedTest+0x38>)
   15eac:	4798      	blx	r3
   15eae:	46c0      	nop			; (mov r8, r8)
   15eb0:	46bd      	mov	sp, r7
   15eb2:	bdb0      	pop	{r4, r5, r7, pc}
   15eb4:	00015c89 	.word	0x00015c89
   15eb8:	00015d51 	.word	0x00015d51
   15ebc:	0001c661 	.word	0x0001c661

00015ec0 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   15ec0:	b590      	push	{r4, r7, lr}
   15ec2:	b085      	sub	sp, #20
   15ec4:	af00      	add	r7, sp, #0
   15ec6:	6078      	str	r0, [r7, #4]
    // Do initialization code here
	SerialConsoleWriteString("UI Task Started!");
   15ec8:	4b10      	ldr	r3, [pc, #64]	; (15f0c <vUiHandlerTask+0x4c>)
   15eca:	0018      	movs	r0, r3
   15ecc:	4b10      	ldr	r3, [pc, #64]	; (15f10 <vUiHandlerTask+0x50>)
   15ece:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   15ed0:	4b10      	ldr	r3, [pc, #64]	; (15f14 <vUiHandlerTask+0x54>)
   15ed2:	2201      	movs	r2, #1
   15ed4:	701a      	strb	r2, [r3, #0]


	
    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   15ed6:	4b10      	ldr	r3, [pc, #64]	; (15f18 <vUiHandlerTask+0x58>)
   15ed8:	4798      	blx	r3
    gfx_mono_draw_string("ESE516", 0, 8, &sysfont);
   15eda:	4b10      	ldr	r3, [pc, #64]	; (15f1c <vUiHandlerTask+0x5c>)
   15edc:	4810      	ldr	r0, [pc, #64]	; (15f20 <vUiHandlerTask+0x60>)
   15ede:	2208      	movs	r2, #8
   15ee0:	2100      	movs	r1, #0
   15ee2:	4c10      	ldr	r4, [pc, #64]	; (15f24 <vUiHandlerTask+0x64>)
   15ee4:	47a0      	blx	r4
    gfx_mono_draw_string("HIGHWAY", 0, 18, &sysfont);
   15ee6:	4b0d      	ldr	r3, [pc, #52]	; (15f1c <vUiHandlerTask+0x5c>)
   15ee8:	480f      	ldr	r0, [pc, #60]	; (15f28 <vUiHandlerTask+0x68>)
   15eea:	2212      	movs	r2, #18
   15eec:	2100      	movs	r1, #0
   15eee:	4c0d      	ldr	r4, [pc, #52]	; (15f24 <vUiHandlerTask+0x64>)
   15ef0:	47a0      	blx	r4
	uint8_t count = 0;
   15ef2:	230f      	movs	r3, #15
   15ef4:	18fb      	adds	r3, r7, r3
   15ef6:	2200      	movs	r2, #0
   15ef8:	701a      	strb	r2, [r3, #0]
	bool servo_flag = false;
   15efa:	230e      	movs	r3, #14
   15efc:	18fb      	adds	r3, r7, r3
   15efe:	2200      	movs	r2, #0
   15f00:	701a      	strb	r2, [r3, #0]
                //uiState = UI_STATE_HANDLE_BUTTONS;
                //break;
        //}
		
        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   15f02:	2032      	movs	r0, #50	; 0x32
   15f04:	4b09      	ldr	r3, [pc, #36]	; (15f2c <vUiHandlerTask+0x6c>)
   15f06:	4798      	blx	r3
   15f08:	e7fb      	b.n	15f02 <vUiHandlerTask+0x42>
   15f0a:	46c0      	nop			; (mov r8, r8)
   15f0c:	00036bf4 	.word	0x00036bf4
   15f10:	0001e2b5 	.word	0x0001e2b5
   15f14:	200048ac 	.word	0x200048ac
   15f18:	0001287d 	.word	0x0001287d
   15f1c:	20000000 	.word	0x20000000
   15f20:	00036c08 	.word	0x00036c08
   15f24:	00012721 	.word	0x00012721
   15f28:	00036c10 	.word	0x00036c10
   15f2c:	0001c661 	.word	0x0001c661

00015f30 <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   15f30:	b580      	push	{r7, lr}
   15f32:	b082      	sub	sp, #8
   15f34:	af00      	add	r7, sp, #0
   15f36:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   15f38:	4a08      	ldr	r2, [pc, #32]	; (15f5c <UiOrderShowMoves+0x2c>)
   15f3a:	687b      	ldr	r3, [r7, #4]
   15f3c:	0010      	movs	r0, r2
   15f3e:	0019      	movs	r1, r3
   15f40:	2314      	movs	r3, #20
   15f42:	001a      	movs	r2, r3
   15f44:	4b06      	ldr	r3, [pc, #24]	; (15f60 <UiOrderShowMoves+0x30>)
   15f46:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   15f48:	4b06      	ldr	r3, [pc, #24]	; (15f64 <UiOrderShowMoves+0x34>)
   15f4a:	2202      	movs	r2, #2
   15f4c:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   15f4e:	4b06      	ldr	r3, [pc, #24]	; (15f68 <UiOrderShowMoves+0x38>)
   15f50:	2200      	movs	r2, #0
   15f52:	701a      	strb	r2, [r3, #0]
}
   15f54:	46c0      	nop			; (mov r8, r8)
   15f56:	46bd      	mov	sp, r7
   15f58:	b002      	add	sp, #8
   15f5a:	bd80      	pop	{r7, pc}
   15f5c:	20004888 	.word	0x20004888
   15f60:	00034f2d 	.word	0x00034f2d
   15f64:	200048ac 	.word	0x200048ac
   15f68:	20000621 	.word	0x20000621

00015f6c <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   15f6c:	b580      	push	{r7, lr}
   15f6e:	af00      	add	r7, sp, #0
    return playIsDone;
   15f70:	4b02      	ldr	r3, [pc, #8]	; (15f7c <UiPlayIsDone+0x10>)
   15f72:	781b      	ldrb	r3, [r3, #0]
}
   15f74:	0018      	movs	r0, r3
   15f76:	46bd      	mov	sp, r7
   15f78:	bd80      	pop	{r7, pc}
   15f7a:	46c0      	nop			; (mov r8, r8)
   15f7c:	20000621 	.word	0x20000621

00015f80 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   15f80:	b580      	push	{r7, lr}
   15f82:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   15f84:	4b01      	ldr	r3, [pc, #4]	; (15f8c <UiGetGamePacketOut+0xc>)
}
   15f86:	0018      	movs	r0, r3
   15f88:	46bd      	mov	sp, r7
   15f8a:	bd80      	pop	{r7, pc}
   15f8c:	20004874 	.word	0x20004874

00015f90 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   15f90:	b590      	push	{r4, r7, lr}
   15f92:	b083      	sub	sp, #12
   15f94:	af00      	add	r7, sp, #0
   15f96:	0004      	movs	r4, r0
   15f98:	0008      	movs	r0, r1
   15f9a:	0011      	movs	r1, r2
   15f9c:	1dfb      	adds	r3, r7, #7
   15f9e:	1c22      	adds	r2, r4, #0
   15fa0:	701a      	strb	r2, [r3, #0]
   15fa2:	1dbb      	adds	r3, r7, #6
   15fa4:	1c02      	adds	r2, r0, #0
   15fa6:	701a      	strb	r2, [r3, #0]
   15fa8:	1d7b      	adds	r3, r7, #5
   15faa:	1c0a      	adds	r2, r1, #0
   15fac:	701a      	strb	r2, [r3, #0]
    red = r;
   15fae:	4b08      	ldr	r3, [pc, #32]	; (15fd0 <UIChangeColors+0x40>)
   15fb0:	1dfa      	adds	r2, r7, #7
   15fb2:	7812      	ldrb	r2, [r2, #0]
   15fb4:	701a      	strb	r2, [r3, #0]
    green = g;
   15fb6:	4b07      	ldr	r3, [pc, #28]	; (15fd4 <UIChangeColors+0x44>)
   15fb8:	1dba      	adds	r2, r7, #6
   15fba:	7812      	ldrb	r2, [r2, #0]
   15fbc:	701a      	strb	r2, [r3, #0]
    blue = b;
   15fbe:	4b06      	ldr	r3, [pc, #24]	; (15fd8 <UIChangeColors+0x48>)
   15fc0:	1d7a      	adds	r2, r7, #5
   15fc2:	7812      	ldrb	r2, [r2, #0]
   15fc4:	701a      	strb	r2, [r3, #0]
}
   15fc6:	46c0      	nop			; (mov r8, r8)
   15fc8:	46bd      	mov	sp, r7
   15fca:	b003      	add	sp, #12
   15fcc:	bd90      	pop	{r4, r7, pc}
   15fce:	46c0      	nop			; (mov r8, r8)
   15fd0:	20000620 	.word	0x20000620
   15fd4:	2000002c 	.word	0x2000002c
   15fd8:	2000002d 	.word	0x2000002d

00015fdc <NVIC_SystemReset>:
{
   15fdc:	b580      	push	{r7, lr}
   15fde:	af00      	add	r7, sp, #0
   15fe0:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   15fe4:	4b02      	ldr	r3, [pc, #8]	; (15ff0 <NVIC_SystemReset+0x14>)
   15fe6:	4a03      	ldr	r2, [pc, #12]	; (15ff4 <NVIC_SystemReset+0x18>)
   15fe8:	60da      	str	r2, [r3, #12]
   15fea:	f3bf 8f4f 	dsb	sy
  while(1);                                                    /* wait until reset */
   15fee:	e7fe      	b.n	15fee <NVIC_SystemReset+0x12>
   15ff0:	e000ed00 	.word	0xe000ed00
   15ff4:	05fa0004 	.word	0x05fa0004

00015ff8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   15ff8:	b580      	push	{r7, lr}
   15ffa:	b084      	sub	sp, #16
   15ffc:	af00      	add	r7, sp, #0
   15ffe:	0002      	movs	r2, r0
   16000:	1dfb      	adds	r3, r7, #7
   16002:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16004:	230f      	movs	r3, #15
   16006:	18fb      	adds	r3, r7, r3
   16008:	1dfa      	adds	r2, r7, #7
   1600a:	7812      	ldrb	r2, [r2, #0]
   1600c:	09d2      	lsrs	r2, r2, #7
   1600e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16010:	230e      	movs	r3, #14
   16012:	18fb      	adds	r3, r7, r3
   16014:	1dfa      	adds	r2, r7, #7
   16016:	7812      	ldrb	r2, [r2, #0]
   16018:	0952      	lsrs	r2, r2, #5
   1601a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1601c:	4b0d      	ldr	r3, [pc, #52]	; (16054 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1601e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16020:	230f      	movs	r3, #15
   16022:	18fb      	adds	r3, r7, r3
   16024:	781b      	ldrb	r3, [r3, #0]
   16026:	2b00      	cmp	r3, #0
   16028:	d10f      	bne.n	1604a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1602a:	230f      	movs	r3, #15
   1602c:	18fb      	adds	r3, r7, r3
   1602e:	781b      	ldrb	r3, [r3, #0]
   16030:	009b      	lsls	r3, r3, #2
   16032:	2210      	movs	r2, #16
   16034:	4694      	mov	ip, r2
   16036:	44bc      	add	ip, r7
   16038:	4463      	add	r3, ip
   1603a:	3b08      	subs	r3, #8
   1603c:	681a      	ldr	r2, [r3, #0]
   1603e:	230e      	movs	r3, #14
   16040:	18fb      	adds	r3, r7, r3
   16042:	781b      	ldrb	r3, [r3, #0]
   16044:	01db      	lsls	r3, r3, #7
   16046:	18d3      	adds	r3, r2, r3
   16048:	e000      	b.n	1604c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   1604a:	2300      	movs	r3, #0
	}
}
   1604c:	0018      	movs	r0, r3
   1604e:	46bd      	mov	sp, r7
   16050:	b004      	add	sp, #16
   16052:	bd80      	pop	{r7, pc}
   16054:	41004400 	.word	0x41004400

00016058 <system_reset>:
{
   16058:	b580      	push	{r7, lr}
   1605a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   1605c:	4b02      	ldr	r3, [pc, #8]	; (16068 <system_reset+0x10>)
   1605e:	4798      	blx	r3
}
   16060:	46c0      	nop			; (mov r8, r8)
   16062:	46bd      	mov	sp, r7
   16064:	bd80      	pop	{r7, pc}
   16066:	46c0      	nop			; (mov r8, r8)
   16068:	00015fdd 	.word	0x00015fdd

0001606c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1606c:	b580      	push	{r7, lr}
   1606e:	b082      	sub	sp, #8
   16070:	af00      	add	r7, sp, #0
   16072:	0002      	movs	r2, r0
   16074:	1dfb      	adds	r3, r7, #7
   16076:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16078:	1dfb      	adds	r3, r7, #7
   1607a:	781b      	ldrb	r3, [r3, #0]
   1607c:	0018      	movs	r0, r3
   1607e:	4b03      	ldr	r3, [pc, #12]	; (1608c <port_get_group_from_gpio_pin+0x20>)
   16080:	4798      	blx	r3
   16082:	0003      	movs	r3, r0
}
   16084:	0018      	movs	r0, r3
   16086:	46bd      	mov	sp, r7
   16088:	b002      	add	sp, #8
   1608a:	bd80      	pop	{r7, pc}
   1608c:	00015ff9 	.word	0x00015ff9

00016090 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   16090:	b580      	push	{r7, lr}
   16092:	b084      	sub	sp, #16
   16094:	af00      	add	r7, sp, #0
   16096:	0002      	movs	r2, r0
   16098:	1dfb      	adds	r3, r7, #7
   1609a:	701a      	strb	r2, [r3, #0]
   1609c:	1dbb      	adds	r3, r7, #6
   1609e:	1c0a      	adds	r2, r1, #0
   160a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   160a2:	1dfb      	adds	r3, r7, #7
   160a4:	781b      	ldrb	r3, [r3, #0]
   160a6:	0018      	movs	r0, r3
   160a8:	4b0d      	ldr	r3, [pc, #52]	; (160e0 <port_pin_set_output_level+0x50>)
   160aa:	4798      	blx	r3
   160ac:	0003      	movs	r3, r0
   160ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   160b0:	1dfb      	adds	r3, r7, #7
   160b2:	781b      	ldrb	r3, [r3, #0]
   160b4:	221f      	movs	r2, #31
   160b6:	4013      	ands	r3, r2
   160b8:	2201      	movs	r2, #1
   160ba:	409a      	lsls	r2, r3
   160bc:	0013      	movs	r3, r2
   160be:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   160c0:	1dbb      	adds	r3, r7, #6
   160c2:	781b      	ldrb	r3, [r3, #0]
   160c4:	2b00      	cmp	r3, #0
   160c6:	d003      	beq.n	160d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   160c8:	68fb      	ldr	r3, [r7, #12]
   160ca:	68ba      	ldr	r2, [r7, #8]
   160cc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   160ce:	e002      	b.n	160d6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   160d0:	68fb      	ldr	r3, [r7, #12]
   160d2:	68ba      	ldr	r2, [r7, #8]
   160d4:	615a      	str	r2, [r3, #20]
}
   160d6:	46c0      	nop			; (mov r8, r8)
   160d8:	46bd      	mov	sp, r7
   160da:	b004      	add	sp, #16
   160dc:	bd80      	pop	{r7, pc}
   160de:	46c0      	nop			; (mov r8, r8)
   160e0:	0001606d 	.word	0x0001606d

000160e4 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   160e4:	b580      	push	{r7, lr}
   160e6:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   160e8:	4b02      	ldr	r3, [pc, #8]	; (160f4 <init_state+0x10>)
   160ea:	2200      	movs	r2, #0
   160ec:	701a      	strb	r2, [r3, #0]
}
   160ee:	46c0      	nop			; (mov r8, r8)
   160f0:	46bd      	mov	sp, r7
   160f2:	bd80      	pop	{r7, pc}
   160f4:	20000639 	.word	0x20000639

000160f8 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   160f8:	b580      	push	{r7, lr}
   160fa:	b082      	sub	sp, #8
   160fc:	af00      	add	r7, sp, #0
   160fe:	0002      	movs	r2, r0
   16100:	1dfb      	adds	r3, r7, #7
   16102:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   16104:	1dfb      	adds	r3, r7, #7
   16106:	781b      	ldrb	r3, [r3, #0]
   16108:	b25b      	sxtb	r3, r3
   1610a:	43db      	mvns	r3, r3
   1610c:	b25b      	sxtb	r3, r3
   1610e:	4a06      	ldr	r2, [pc, #24]	; (16128 <clear_state+0x30>)
   16110:	7812      	ldrb	r2, [r2, #0]
   16112:	b252      	sxtb	r2, r2
   16114:	4013      	ands	r3, r2
   16116:	b25b      	sxtb	r3, r3
   16118:	b2da      	uxtb	r2, r3
   1611a:	4b03      	ldr	r3, [pc, #12]	; (16128 <clear_state+0x30>)
   1611c:	701a      	strb	r2, [r3, #0]
}
   1611e:	46c0      	nop			; (mov r8, r8)
   16120:	46bd      	mov	sp, r7
   16122:	b002      	add	sp, #8
   16124:	bd80      	pop	{r7, pc}
   16126:	46c0      	nop			; (mov r8, r8)
   16128:	20000639 	.word	0x20000639

0001612c <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   1612c:	b580      	push	{r7, lr}
   1612e:	b082      	sub	sp, #8
   16130:	af00      	add	r7, sp, #0
   16132:	0002      	movs	r2, r0
   16134:	1dfb      	adds	r3, r7, #7
   16136:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   16138:	4b05      	ldr	r3, [pc, #20]	; (16150 <add_state+0x24>)
   1613a:	781a      	ldrb	r2, [r3, #0]
   1613c:	1dfb      	adds	r3, r7, #7
   1613e:	781b      	ldrb	r3, [r3, #0]
   16140:	4313      	orrs	r3, r2
   16142:	b2da      	uxtb	r2, r3
   16144:	4b02      	ldr	r3, [pc, #8]	; (16150 <add_state+0x24>)
   16146:	701a      	strb	r2, [r3, #0]
}
   16148:	46c0      	nop			; (mov r8, r8)
   1614a:	46bd      	mov	sp, r7
   1614c:	b002      	add	sp, #8
   1614e:	bd80      	pop	{r7, pc}
   16150:	20000639 	.word	0x20000639

00016154 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   16154:	b580      	push	{r7, lr}
   16156:	b082      	sub	sp, #8
   16158:	af00      	add	r7, sp, #0
   1615a:	0002      	movs	r2, r0
   1615c:	1dfb      	adds	r3, r7, #7
   1615e:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   16160:	4b06      	ldr	r3, [pc, #24]	; (1617c <is_state_set+0x28>)
   16162:	781b      	ldrb	r3, [r3, #0]
   16164:	1dfa      	adds	r2, r7, #7
   16166:	7812      	ldrb	r2, [r2, #0]
   16168:	4013      	ands	r3, r2
   1616a:	b2db      	uxtb	r3, r3
   1616c:	1e5a      	subs	r2, r3, #1
   1616e:	4193      	sbcs	r3, r2
   16170:	b2db      	uxtb	r3, r3
}
   16172:	0018      	movs	r0, r3
   16174:	46bd      	mov	sp, r7
   16176:	b002      	add	sp, #8
   16178:	bd80      	pop	{r7, pc}
   1617a:	46c0      	nop			; (mov r8, r8)
   1617c:	20000639 	.word	0x20000639

00016180 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   16180:	b590      	push	{r4, r7, lr}
   16182:	b085      	sub	sp, #20
   16184:	af00      	add	r7, sp, #0
   16186:	6078      	str	r0, [r7, #4]
   16188:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   1618a:	687b      	ldr	r3, [r7, #4]
   1618c:	2b00      	cmp	r3, #0
   1618e:	d002      	beq.n	16196 <is_exist_file+0x16>
   16190:	683b      	ldr	r3, [r7, #0]
   16192:	2b00      	cmp	r3, #0
   16194:	d101      	bne.n	1619a <is_exist_file+0x1a>
        return false;
   16196:	2300      	movs	r3, #0
   16198:	e013      	b.n	161c2 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   1619a:	230f      	movs	r3, #15
   1619c:	18fc      	adds	r4, r7, r3
   1619e:	6839      	ldr	r1, [r7, #0]
   161a0:	4b0a      	ldr	r3, [pc, #40]	; (161cc <is_exist_file+0x4c>)
   161a2:	2200      	movs	r2, #0
   161a4:	0018      	movs	r0, r3
   161a6:	4b0a      	ldr	r3, [pc, #40]	; (161d0 <is_exist_file+0x50>)
   161a8:	4798      	blx	r3
   161aa:	0003      	movs	r3, r0
   161ac:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   161ae:	4b07      	ldr	r3, [pc, #28]	; (161cc <is_exist_file+0x4c>)
   161b0:	0018      	movs	r0, r3
   161b2:	4b08      	ldr	r3, [pc, #32]	; (161d4 <is_exist_file+0x54>)
   161b4:	4798      	blx	r3
    return (ret == FR_OK);
   161b6:	230f      	movs	r3, #15
   161b8:	18fb      	adds	r3, r7, r3
   161ba:	781b      	ldrb	r3, [r3, #0]
   161bc:	425a      	negs	r2, r3
   161be:	4153      	adcs	r3, r2
   161c0:	b2db      	uxtb	r3, r3
}
   161c2:	0018      	movs	r0, r3
   161c4:	46bd      	mov	sp, r7
   161c6:	b005      	add	sp, #20
   161c8:	bd90      	pop	{r4, r7, pc}
   161ca:	46c0      	nop			; (mov r8, r8)
   161cc:	2000086c 	.word	0x2000086c
   161d0:	0002deb1 	.word	0x0002deb1
   161d4:	0002e8b1 	.word	0x0002e8b1

000161d8 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   161d8:	b580      	push	{r7, lr}
   161da:	b09e      	sub	sp, #120	; 0x78
   161dc:	af00      	add	r7, sp, #0
   161de:	60f8      	str	r0, [r7, #12]
   161e0:	60b9      	str	r1, [r7, #8]
   161e2:	1dfb      	adds	r3, r7, #7
   161e4:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   161e6:	2376      	movs	r3, #118	; 0x76
   161e8:	18fb      	adds	r3, r7, r3
   161ea:	2201      	movs	r2, #1
   161ec:	801a      	strh	r2, [r3, #0]
   161ee:	2374      	movs	r3, #116	; 0x74
   161f0:	18fb      	adds	r3, r7, r3
   161f2:	2200      	movs	r2, #0
   161f4:	801a      	strh	r2, [r3, #0]
   161f6:	236e      	movs	r3, #110	; 0x6e
   161f8:	18fb      	adds	r3, r7, r3
   161fa:	2200      	movs	r2, #0
   161fc:	801a      	strh	r2, [r3, #0]
   161fe:	2372      	movs	r3, #114	; 0x72
   16200:	18fb      	adds	r3, r7, r3
   16202:	2200      	movs	r2, #0
   16204:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   16206:	2324      	movs	r3, #36	; 0x24
   16208:	18fb      	adds	r3, r7, r3
   1620a:	0018      	movs	r0, r3
   1620c:	2341      	movs	r3, #65	; 0x41
   1620e:	001a      	movs	r2, r3
   16210:	2100      	movs	r1, #0
   16212:	4b92      	ldr	r3, [pc, #584]	; (1645c <rename_to_unique+0x284>)
   16214:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   16216:	2318      	movs	r3, #24
   16218:	18fb      	adds	r3, r7, r3
   1621a:	0018      	movs	r0, r3
   1621c:	2309      	movs	r3, #9
   1621e:	001a      	movs	r2, r3
   16220:	2100      	movs	r1, #0
   16222:	4b8e      	ldr	r3, [pc, #568]	; (1645c <rename_to_unique+0x284>)
   16224:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   16226:	2314      	movs	r3, #20
   16228:	18fb      	adds	r3, r7, r3
   1622a:	2200      	movs	r2, #0
   1622c:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   1622e:	2300      	movs	r3, #0
   16230:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   16232:	2371      	movs	r3, #113	; 0x71
   16234:	18fb      	adds	r3, r7, r3
   16236:	2200      	movs	r2, #0
   16238:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   1623a:	68bb      	ldr	r3, [r7, #8]
   1623c:	2b00      	cmp	r3, #0
   1623e:	d101      	bne.n	16244 <rename_to_unique+0x6c>
        return false;
   16240:	2300      	movs	r3, #0
   16242:	e106      	b.n	16452 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   16244:	68ba      	ldr	r2, [r7, #8]
   16246:	68fb      	ldr	r3, [r7, #12]
   16248:	0011      	movs	r1, r2
   1624a:	0018      	movs	r0, r3
   1624c:	4b84      	ldr	r3, [pc, #528]	; (16460 <rename_to_unique+0x288>)
   1624e:	4798      	blx	r3
   16250:	0003      	movs	r3, r0
   16252:	001a      	movs	r2, r3
   16254:	2301      	movs	r3, #1
   16256:	4053      	eors	r3, r2
   16258:	b2db      	uxtb	r3, r3
   1625a:	2b00      	cmp	r3, #0
   1625c:	d001      	beq.n	16262 <rename_to_unique+0x8a>
        return true;
   1625e:	2301      	movs	r3, #1
   16260:	e0f7      	b.n	16452 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   16262:	68bb      	ldr	r3, [r7, #8]
   16264:	0018      	movs	r0, r3
   16266:	4b7f      	ldr	r3, [pc, #508]	; (16464 <rename_to_unique+0x28c>)
   16268:	4798      	blx	r3
   1626a:	0003      	movs	r3, r0
   1626c:	2b40      	cmp	r3, #64	; 0x40
   1626e:	d901      	bls.n	16274 <rename_to_unique+0x9c>
        return false;
   16270:	2300      	movs	r3, #0
   16272:	e0ee      	b.n	16452 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   16274:	68bb      	ldr	r3, [r7, #8]
   16276:	212e      	movs	r1, #46	; 0x2e
   16278:	0018      	movs	r0, r3
   1627a:	4b7b      	ldr	r3, [pc, #492]	; (16468 <rename_to_unique+0x290>)
   1627c:	4798      	blx	r3
   1627e:	0003      	movs	r3, r0
   16280:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   16282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16284:	2b00      	cmp	r3, #0
   16286:	d052      	beq.n	1632e <rename_to_unique+0x156>
        ext_len = strlen(p);
   16288:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1628a:	0018      	movs	r0, r3
   1628c:	4b75      	ldr	r3, [pc, #468]	; (16464 <rename_to_unique+0x28c>)
   1628e:	4798      	blx	r3
   16290:	0002      	movs	r2, r0
   16292:	236e      	movs	r3, #110	; 0x6e
   16294:	18fb      	adds	r3, r7, r3
   16296:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   16298:	236e      	movs	r3, #110	; 0x6e
   1629a:	18fb      	adds	r3, r7, r3
   1629c:	881b      	ldrh	r3, [r3, #0]
   1629e:	2b07      	cmp	r3, #7
   162a0:	d837      	bhi.n	16312 <rename_to_unique+0x13a>
            valid_ext = true;
   162a2:	2371      	movs	r3, #113	; 0x71
   162a4:	18fb      	adds	r3, r7, r3
   162a6:	2201      	movs	r2, #1
   162a8:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   162aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
   162ac:	2318      	movs	r3, #24
   162ae:	18fb      	adds	r3, r7, r3
   162b0:	0011      	movs	r1, r2
   162b2:	0018      	movs	r0, r3
   162b4:	4b6d      	ldr	r3, [pc, #436]	; (1646c <rename_to_unique+0x294>)
   162b6:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   162b8:	68bb      	ldr	r3, [r7, #8]
   162ba:	0018      	movs	r0, r3
   162bc:	4b69      	ldr	r3, [pc, #420]	; (16464 <rename_to_unique+0x28c>)
   162be:	4798      	blx	r3
   162c0:	0002      	movs	r2, r0
   162c2:	236e      	movs	r3, #110	; 0x6e
   162c4:	18fb      	adds	r3, r7, r3
   162c6:	881b      	ldrh	r3, [r3, #0]
   162c8:	1ad3      	subs	r3, r2, r3
   162ca:	2b3c      	cmp	r3, #60	; 0x3c
   162cc:	d911      	bls.n	162f2 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   162ce:	2374      	movs	r3, #116	; 0x74
   162d0:	18fb      	adds	r3, r7, r3
   162d2:	226e      	movs	r2, #110	; 0x6e
   162d4:	18ba      	adds	r2, r7, r2
   162d6:	8812      	ldrh	r2, [r2, #0]
   162d8:	213c      	movs	r1, #60	; 0x3c
   162da:	1a8a      	subs	r2, r1, r2
   162dc:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   162de:	2374      	movs	r3, #116	; 0x74
   162e0:	18fb      	adds	r3, r7, r3
   162e2:	881a      	ldrh	r2, [r3, #0]
   162e4:	68b9      	ldr	r1, [r7, #8]
   162e6:	2324      	movs	r3, #36	; 0x24
   162e8:	18fb      	adds	r3, r7, r3
   162ea:	0018      	movs	r0, r3
   162ec:	4b60      	ldr	r3, [pc, #384]	; (16470 <rename_to_unique+0x298>)
   162ee:	4798      	blx	r3
   162f0:	e02a      	b.n	16348 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   162f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
   162f4:	68bb      	ldr	r3, [r7, #8]
   162f6:	1ad2      	subs	r2, r2, r3
   162f8:	2374      	movs	r3, #116	; 0x74
   162fa:	18fb      	adds	r3, r7, r3
   162fc:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   162fe:	2374      	movs	r3, #116	; 0x74
   16300:	18fb      	adds	r3, r7, r3
   16302:	881a      	ldrh	r2, [r3, #0]
   16304:	68b9      	ldr	r1, [r7, #8]
   16306:	2324      	movs	r3, #36	; 0x24
   16308:	18fb      	adds	r3, r7, r3
   1630a:	0018      	movs	r0, r3
   1630c:	4b58      	ldr	r3, [pc, #352]	; (16470 <rename_to_unique+0x298>)
   1630e:	4798      	blx	r3
   16310:	e01a      	b.n	16348 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16312:	2374      	movs	r3, #116	; 0x74
   16314:	18fb      	adds	r3, r7, r3
   16316:	223c      	movs	r2, #60	; 0x3c
   16318:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   1631a:	2374      	movs	r3, #116	; 0x74
   1631c:	18fb      	adds	r3, r7, r3
   1631e:	881a      	ldrh	r2, [r3, #0]
   16320:	68b9      	ldr	r1, [r7, #8]
   16322:	2324      	movs	r3, #36	; 0x24
   16324:	18fb      	adds	r3, r7, r3
   16326:	0018      	movs	r0, r3
   16328:	4b51      	ldr	r3, [pc, #324]	; (16470 <rename_to_unique+0x298>)
   1632a:	4798      	blx	r3
   1632c:	e00c      	b.n	16348 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1632e:	2374      	movs	r3, #116	; 0x74
   16330:	18fb      	adds	r3, r7, r3
   16332:	223c      	movs	r2, #60	; 0x3c
   16334:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   16336:	2374      	movs	r3, #116	; 0x74
   16338:	18fb      	adds	r3, r7, r3
   1633a:	881a      	ldrh	r2, [r3, #0]
   1633c:	68b9      	ldr	r1, [r7, #8]
   1633e:	2324      	movs	r3, #36	; 0x24
   16340:	18fb      	adds	r3, r7, r3
   16342:	0018      	movs	r0, r3
   16344:	4b4a      	ldr	r3, [pc, #296]	; (16470 <rename_to_unique+0x298>)
   16346:	4798      	blx	r3
    }

    name[name_len++] = '-';
   16348:	2374      	movs	r3, #116	; 0x74
   1634a:	18fb      	adds	r3, r7, r3
   1634c:	881b      	ldrh	r3, [r3, #0]
   1634e:	2274      	movs	r2, #116	; 0x74
   16350:	18ba      	adds	r2, r7, r2
   16352:	1c59      	adds	r1, r3, #1
   16354:	8011      	strh	r1, [r2, #0]
   16356:	001a      	movs	r2, r3
   16358:	2324      	movs	r3, #36	; 0x24
   1635a:	18fb      	adds	r3, r7, r3
   1635c:	212d      	movs	r1, #45	; 0x2d
   1635e:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16360:	2376      	movs	r3, #118	; 0x76
   16362:	18fb      	adds	r3, r7, r3
   16364:	2200      	movs	r2, #0
   16366:	801a      	strh	r2, [r3, #0]
   16368:	2372      	movs	r3, #114	; 0x72
   1636a:	18fb      	adds	r3, r7, r3
   1636c:	2201      	movs	r2, #1
   1636e:	801a      	strh	r2, [r3, #0]
   16370:	e010      	b.n	16394 <rename_to_unique+0x1bc>
        count *= 10;
   16372:	2372      	movs	r3, #114	; 0x72
   16374:	18fa      	adds	r2, r7, r3
   16376:	2372      	movs	r3, #114	; 0x72
   16378:	18fb      	adds	r3, r7, r3
   1637a:	881b      	ldrh	r3, [r3, #0]
   1637c:	1c19      	adds	r1, r3, #0
   1637e:	0089      	lsls	r1, r1, #2
   16380:	18cb      	adds	r3, r1, r3
   16382:	18db      	adds	r3, r3, r3
   16384:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16386:	2376      	movs	r3, #118	; 0x76
   16388:	18fb      	adds	r3, r7, r3
   1638a:	881a      	ldrh	r2, [r3, #0]
   1638c:	2376      	movs	r3, #118	; 0x76
   1638e:	18fb      	adds	r3, r7, r3
   16390:	3201      	adds	r2, #1
   16392:	801a      	strh	r2, [r3, #0]
   16394:	2376      	movs	r3, #118	; 0x76
   16396:	18fb      	adds	r3, r7, r3
   16398:	881b      	ldrh	r3, [r3, #0]
   1639a:	2b02      	cmp	r3, #2
   1639c:	d9e9      	bls.n	16372 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   1639e:	2376      	movs	r3, #118	; 0x76
   163a0:	18fb      	adds	r3, r7, r3
   163a2:	2201      	movs	r2, #1
   163a4:	801a      	strh	r2, [r3, #0]
   163a6:	e04b      	b.n	16440 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   163a8:	2376      	movs	r3, #118	; 0x76
   163aa:	18fb      	adds	r3, r7, r3
   163ac:	881a      	ldrh	r2, [r3, #0]
   163ae:	4931      	ldr	r1, [pc, #196]	; (16474 <rename_to_unique+0x29c>)
   163b0:	2314      	movs	r3, #20
   163b2:	18fb      	adds	r3, r7, r3
   163b4:	0018      	movs	r0, r3
   163b6:	4b30      	ldr	r3, [pc, #192]	; (16478 <rename_to_unique+0x2a0>)
   163b8:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   163ba:	2374      	movs	r3, #116	; 0x74
   163bc:	18fb      	adds	r3, r7, r3
   163be:	881b      	ldrh	r3, [r3, #0]
   163c0:	2224      	movs	r2, #36	; 0x24
   163c2:	18ba      	adds	r2, r7, r2
   163c4:	18d3      	adds	r3, r2, r3
   163c6:	2214      	movs	r2, #20
   163c8:	18b9      	adds	r1, r7, r2
   163ca:	2203      	movs	r2, #3
   163cc:	0018      	movs	r0, r3
   163ce:	4b28      	ldr	r3, [pc, #160]	; (16470 <rename_to_unique+0x298>)
   163d0:	4798      	blx	r3
        if (valid_ext) {
   163d2:	2371      	movs	r3, #113	; 0x71
   163d4:	18fb      	adds	r3, r7, r3
   163d6:	781b      	ldrb	r3, [r3, #0]
   163d8:	2b00      	cmp	r3, #0
   163da:	d00c      	beq.n	163f6 <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   163dc:	2374      	movs	r3, #116	; 0x74
   163de:	18fb      	adds	r3, r7, r3
   163e0:	881b      	ldrh	r3, [r3, #0]
   163e2:	3303      	adds	r3, #3
   163e4:	2224      	movs	r2, #36	; 0x24
   163e6:	18ba      	adds	r2, r7, r2
   163e8:	18d3      	adds	r3, r2, r3
   163ea:	2218      	movs	r2, #24
   163ec:	18ba      	adds	r2, r7, r2
   163ee:	0011      	movs	r1, r2
   163f0:	0018      	movs	r0, r3
   163f2:	4b1e      	ldr	r3, [pc, #120]	; (1646c <rename_to_unique+0x294>)
   163f4:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   163f6:	2324      	movs	r3, #36	; 0x24
   163f8:	18fa      	adds	r2, r7, r3
   163fa:	68fb      	ldr	r3, [r7, #12]
   163fc:	0011      	movs	r1, r2
   163fe:	0018      	movs	r0, r3
   16400:	4b17      	ldr	r3, [pc, #92]	; (16460 <rename_to_unique+0x288>)
   16402:	4798      	blx	r3
   16404:	0003      	movs	r3, r0
   16406:	001a      	movs	r2, r3
   16408:	2301      	movs	r3, #1
   1640a:	4053      	eors	r3, r2
   1640c:	b2db      	uxtb	r3, r3
   1640e:	2b00      	cmp	r3, #0
   16410:	d00f      	beq.n	16432 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   16412:	1dfb      	adds	r3, r7, #7
   16414:	781a      	ldrb	r2, [r3, #0]
   16416:	68bb      	ldr	r3, [r7, #8]
   16418:	2100      	movs	r1, #0
   1641a:	0018      	movs	r0, r3
   1641c:	4b0f      	ldr	r3, [pc, #60]	; (1645c <rename_to_unique+0x284>)
   1641e:	4798      	blx	r3
            strcpy(file_path_name, name);
   16420:	2324      	movs	r3, #36	; 0x24
   16422:	18fa      	adds	r2, r7, r3
   16424:	68bb      	ldr	r3, [r7, #8]
   16426:	0011      	movs	r1, r2
   16428:	0018      	movs	r0, r3
   1642a:	4b10      	ldr	r3, [pc, #64]	; (1646c <rename_to_unique+0x294>)
   1642c:	4798      	blx	r3
            return true;
   1642e:	2301      	movs	r3, #1
   16430:	e00f      	b.n	16452 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   16432:	2376      	movs	r3, #118	; 0x76
   16434:	18fb      	adds	r3, r7, r3
   16436:	881a      	ldrh	r2, [r3, #0]
   16438:	2376      	movs	r3, #118	; 0x76
   1643a:	18fb      	adds	r3, r7, r3
   1643c:	3201      	adds	r2, #1
   1643e:	801a      	strh	r2, [r3, #0]
   16440:	2376      	movs	r3, #118	; 0x76
   16442:	18fa      	adds	r2, r7, r3
   16444:	2372      	movs	r3, #114	; 0x72
   16446:	18fb      	adds	r3, r7, r3
   16448:	8812      	ldrh	r2, [r2, #0]
   1644a:	881b      	ldrh	r3, [r3, #0]
   1644c:	429a      	cmp	r2, r3
   1644e:	d3ab      	bcc.n	163a8 <rename_to_unique+0x1d0>
        }
    }
    return false;
   16450:	2300      	movs	r3, #0
}
   16452:	0018      	movs	r0, r3
   16454:	46bd      	mov	sp, r7
   16456:	b01e      	add	sp, #120	; 0x78
   16458:	bd80      	pop	{r7, pc}
   1645a:	46c0      	nop			; (mov r8, r8)
   1645c:	00034f63 	.word	0x00034f63
   16460:	00016181 	.word	0x00016181
   16464:	0003531b 	.word	0x0003531b
   16468:	00035375 	.word	0x00035375
   1646c:	000352cf 	.word	0x000352cf
   16470:	0003534b 	.word	0x0003534b
   16474:	00036c2c 	.word	0x00036c2c
   16478:	00035221 	.word	0x00035221

0001647c <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   1647c:	b590      	push	{r4, r7, lr}
   1647e:	b083      	sub	sp, #12
   16480:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   16482:	2001      	movs	r0, #1
   16484:	4b22      	ldr	r3, [pc, #136]	; (16510 <start_download+0x94>)
   16486:	4798      	blx	r3
   16488:	0003      	movs	r3, r0
   1648a:	001a      	movs	r2, r3
   1648c:	2301      	movs	r3, #1
   1648e:	4053      	eors	r3, r2
   16490:	b2db      	uxtb	r3, r3
   16492:	2b00      	cmp	r3, #0
   16494:	d005      	beq.n	164a2 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   16496:	4b1f      	ldr	r3, [pc, #124]	; (16514 <start_download+0x98>)
   16498:	0019      	movs	r1, r3
   1649a:	2001      	movs	r0, #1
   1649c:	4b1e      	ldr	r3, [pc, #120]	; (16518 <start_download+0x9c>)
   1649e:	4798      	blx	r3
        return;
   164a0:	e032      	b.n	16508 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   164a2:	2002      	movs	r0, #2
   164a4:	4b1a      	ldr	r3, [pc, #104]	; (16510 <start_download+0x94>)
   164a6:	4798      	blx	r3
   164a8:	0003      	movs	r3, r0
   164aa:	001a      	movs	r2, r3
   164ac:	2301      	movs	r3, #1
   164ae:	4053      	eors	r3, r2
   164b0:	b2db      	uxtb	r3, r3
   164b2:	2b00      	cmp	r3, #0
   164b4:	d005      	beq.n	164c2 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   164b6:	4b19      	ldr	r3, [pc, #100]	; (1651c <start_download+0xa0>)
   164b8:	0019      	movs	r1, r3
   164ba:	2001      	movs	r0, #1
   164bc:	4b16      	ldr	r3, [pc, #88]	; (16518 <start_download+0x9c>)
   164be:	4798      	blx	r3
        return;
   164c0:	e022      	b.n	16508 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   164c2:	2004      	movs	r0, #4
   164c4:	4b12      	ldr	r3, [pc, #72]	; (16510 <start_download+0x94>)
   164c6:	4798      	blx	r3
   164c8:	1e03      	subs	r3, r0, #0
   164ca:	d005      	beq.n	164d8 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   164cc:	4b14      	ldr	r3, [pc, #80]	; (16520 <start_download+0xa4>)
   164ce:	0019      	movs	r1, r3
   164d0:	2001      	movs	r0, #1
   164d2:	4b11      	ldr	r3, [pc, #68]	; (16518 <start_download+0x9c>)
   164d4:	4798      	blx	r3
        return;
   164d6:	e017      	b.n	16508 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   164d8:	2008      	movs	r0, #8
   164da:	4b0d      	ldr	r3, [pc, #52]	; (16510 <start_download+0x94>)
   164dc:	4798      	blx	r3
   164de:	1e03      	subs	r3, r0, #0
   164e0:	d005      	beq.n	164ee <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   164e2:	4b10      	ldr	r3, [pc, #64]	; (16524 <start_download+0xa8>)
   164e4:	0019      	movs	r1, r3
   164e6:	2001      	movs	r0, #1
   164e8:	4b0b      	ldr	r3, [pc, #44]	; (16518 <start_download+0x9c>)
   164ea:	4798      	blx	r3
        return;
   164ec:	e00c      	b.n	16508 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   164ee:	4b0e      	ldr	r3, [pc, #56]	; (16528 <start_download+0xac>)
   164f0:	0019      	movs	r1, r3
   164f2:	2001      	movs	r0, #1
   164f4:	4b08      	ldr	r3, [pc, #32]	; (16518 <start_download+0x9c>)
   164f6:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   164f8:	490c      	ldr	r1, [pc, #48]	; (1652c <start_download+0xb0>)
   164fa:	480d      	ldr	r0, [pc, #52]	; (16530 <start_download+0xb4>)
   164fc:	2300      	movs	r3, #0
   164fe:	9300      	str	r3, [sp, #0]
   16500:	2300      	movs	r3, #0
   16502:	2201      	movs	r2, #1
   16504:	4c0b      	ldr	r4, [pc, #44]	; (16534 <start_download+0xb8>)
   16506:	47a0      	blx	r4
}
   16508:	46bd      	mov	sp, r7
   1650a:	b001      	add	sp, #4
   1650c:	bd90      	pop	{r4, r7, pc}
   1650e:	46c0      	nop			; (mov r8, r8)
   16510:	00016155 	.word	0x00016155
   16514:	00036c34 	.word	0x00036c34
   16518:	0001e3a1 	.word	0x0001e3a1
   1651c:	00036c60 	.word	0x00036c60
   16520:	00036c8c 	.word	0x00036c8c
   16524:	00036cb8 	.word	0x00036cb8
   16528:	00036ce4 	.word	0x00036ce4
   1652c:	00036d10 	.word	0x00036d10
   16530:	20004908 	.word	0x20004908
   16534:	00031505 	.word	0x00031505

00016538 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   16538:	b5b0      	push	{r4, r5, r7, lr}
   1653a:	b086      	sub	sp, #24
   1653c:	af00      	add	r7, sp, #0
   1653e:	6078      	str	r0, [r7, #4]
   16540:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   16542:	687b      	ldr	r3, [r7, #4]
   16544:	2b00      	cmp	r3, #0
   16546:	d002      	beq.n	1654e <store_file_packet+0x16>
   16548:	683b      	ldr	r3, [r7, #0]
   1654a:	2b00      	cmp	r3, #0
   1654c:	d105      	bne.n	1655a <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   1654e:	4b58      	ldr	r3, [pc, #352]	; (166b0 <store_file_packet+0x178>)
   16550:	0019      	movs	r1, r3
   16552:	2001      	movs	r0, #1
   16554:	4b57      	ldr	r3, [pc, #348]	; (166b4 <store_file_packet+0x17c>)
   16556:	4798      	blx	r3
        return;
   16558:	e0a6      	b.n	166a8 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   1655a:	2008      	movs	r0, #8
   1655c:	4b56      	ldr	r3, [pc, #344]	; (166b8 <store_file_packet+0x180>)
   1655e:	4798      	blx	r3
   16560:	0003      	movs	r3, r0
   16562:	001a      	movs	r2, r3
   16564:	2301      	movs	r3, #1
   16566:	4053      	eors	r3, r2
   16568:	b2db      	uxtb	r3, r3
   1656a:	2b00      	cmp	r3, #0
   1656c:	d055      	beq.n	1661a <store_file_packet+0xe2>
        char *cp = NULL;
   1656e:	2300      	movs	r3, #0
   16570:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16572:	4b52      	ldr	r3, [pc, #328]	; (166bc <store_file_packet+0x184>)
   16574:	2230      	movs	r2, #48	; 0x30
   16576:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   16578:	4b50      	ldr	r3, [pc, #320]	; (166bc <store_file_packet+0x184>)
   1657a:	223a      	movs	r2, #58	; 0x3a
   1657c:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   1657e:	4b50      	ldr	r3, [pc, #320]	; (166c0 <store_file_packet+0x188>)
   16580:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16582:	e002      	b.n	1658a <store_file_packet+0x52>
            cp--;
   16584:	697b      	ldr	r3, [r7, #20]
   16586:	3b01      	subs	r3, #1
   16588:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   1658a:	697b      	ldr	r3, [r7, #20]
   1658c:	781b      	ldrb	r3, [r3, #0]
   1658e:	2b2f      	cmp	r3, #47	; 0x2f
   16590:	d1f8      	bne.n	16584 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   16592:	697b      	ldr	r3, [r7, #20]
   16594:	0018      	movs	r0, r3
   16596:	4b4b      	ldr	r3, [pc, #300]	; (166c4 <store_file_packet+0x18c>)
   16598:	4798      	blx	r3
   1659a:	0003      	movs	r3, r0
   1659c:	2b01      	cmp	r3, #1
   1659e:	d924      	bls.n	165ea <store_file_packet+0xb2>
            cp++;
   165a0:	697b      	ldr	r3, [r7, #20]
   165a2:	3301      	adds	r3, #1
   165a4:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   165a6:	697a      	ldr	r2, [r7, #20]
   165a8:	4b47      	ldr	r3, [pc, #284]	; (166c8 <store_file_packet+0x190>)
   165aa:	0011      	movs	r1, r2
   165ac:	0018      	movs	r0, r3
   165ae:	4b47      	ldr	r3, [pc, #284]	; (166cc <store_file_packet+0x194>)
   165b0:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   165b2:	4942      	ldr	r1, [pc, #264]	; (166bc <store_file_packet+0x184>)
   165b4:	4b46      	ldr	r3, [pc, #280]	; (166d0 <store_file_packet+0x198>)
   165b6:	2240      	movs	r2, #64	; 0x40
   165b8:	0018      	movs	r0, r3
   165ba:	4b46      	ldr	r3, [pc, #280]	; (166d4 <store_file_packet+0x19c>)
   165bc:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   165be:	4a3f      	ldr	r2, [pc, #252]	; (166bc <store_file_packet+0x184>)
   165c0:	4b45      	ldr	r3, [pc, #276]	; (166d8 <store_file_packet+0x1a0>)
   165c2:	0019      	movs	r1, r3
   165c4:	2001      	movs	r0, #1
   165c6:	4b3b      	ldr	r3, [pc, #236]	; (166b4 <store_file_packet+0x17c>)
   165c8:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   165ca:	2313      	movs	r3, #19
   165cc:	18fc      	adds	r4, r7, r3
   165ce:	493b      	ldr	r1, [pc, #236]	; (166bc <store_file_packet+0x184>)
   165d0:	4b3f      	ldr	r3, [pc, #252]	; (166d0 <store_file_packet+0x198>)
   165d2:	220a      	movs	r2, #10
   165d4:	0018      	movs	r0, r3
   165d6:	4b41      	ldr	r3, [pc, #260]	; (166dc <store_file_packet+0x1a4>)
   165d8:	4798      	blx	r3
   165da:	0003      	movs	r3, r0
   165dc:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   165de:	2313      	movs	r3, #19
   165e0:	18fb      	adds	r3, r7, r3
   165e2:	781b      	ldrb	r3, [r3, #0]
   165e4:	2b00      	cmp	r3, #0
   165e6:	d012      	beq.n	1660e <store_file_packet+0xd6>
   165e8:	e008      	b.n	165fc <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   165ea:	4b3d      	ldr	r3, [pc, #244]	; (166e0 <store_file_packet+0x1a8>)
   165ec:	0019      	movs	r1, r3
   165ee:	2001      	movs	r0, #1
   165f0:	4b30      	ldr	r3, [pc, #192]	; (166b4 <store_file_packet+0x17c>)
   165f2:	4798      	blx	r3
            add_state(CANCELED);
   165f4:	2020      	movs	r0, #32
   165f6:	4b3b      	ldr	r3, [pc, #236]	; (166e4 <store_file_packet+0x1ac>)
   165f8:	4798      	blx	r3
            return;
   165fa:	e055      	b.n	166a8 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   165fc:	2313      	movs	r3, #19
   165fe:	18fb      	adds	r3, r7, r3
   16600:	781a      	ldrb	r2, [r3, #0]
   16602:	4b39      	ldr	r3, [pc, #228]	; (166e8 <store_file_packet+0x1b0>)
   16604:	0019      	movs	r1, r3
   16606:	2001      	movs	r0, #1
   16608:	4b2a      	ldr	r3, [pc, #168]	; (166b4 <store_file_packet+0x17c>)
   1660a:	4798      	blx	r3
            return;
   1660c:	e04c      	b.n	166a8 <store_file_packet+0x170>
        }

        received_file_size = 0;
   1660e:	4b37      	ldr	r3, [pc, #220]	; (166ec <store_file_packet+0x1b4>)
   16610:	2200      	movs	r2, #0
   16612:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   16614:	2008      	movs	r0, #8
   16616:	4b33      	ldr	r3, [pc, #204]	; (166e4 <store_file_packet+0x1ac>)
   16618:	4798      	blx	r3
    }

    if (data != NULL) {
   1661a:	687b      	ldr	r3, [r7, #4]
   1661c:	2b00      	cmp	r3, #0
   1661e:	d043      	beq.n	166a8 <store_file_packet+0x170>
        UINT wsize = 0;
   16620:	2300      	movs	r3, #0
   16622:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   16624:	2313      	movs	r3, #19
   16626:	18fc      	adds	r4, r7, r3
   16628:	230c      	movs	r3, #12
   1662a:	18fb      	adds	r3, r7, r3
   1662c:	683a      	ldr	r2, [r7, #0]
   1662e:	6879      	ldr	r1, [r7, #4]
   16630:	4827      	ldr	r0, [pc, #156]	; (166d0 <store_file_packet+0x198>)
   16632:	4d2f      	ldr	r5, [pc, #188]	; (166f0 <store_file_packet+0x1b8>)
   16634:	47a8      	blx	r5
   16636:	0003      	movs	r3, r0
   16638:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   1663a:	2313      	movs	r3, #19
   1663c:	18fb      	adds	r3, r7, r3
   1663e:	781b      	ldrb	r3, [r3, #0]
   16640:	2b00      	cmp	r3, #0
   16642:	d00c      	beq.n	1665e <store_file_packet+0x126>
            f_close(&file_object);
   16644:	4b22      	ldr	r3, [pc, #136]	; (166d0 <store_file_packet+0x198>)
   16646:	0018      	movs	r0, r3
   16648:	4b2a      	ldr	r3, [pc, #168]	; (166f4 <store_file_packet+0x1bc>)
   1664a:	4798      	blx	r3
            add_state(CANCELED);
   1664c:	2020      	movs	r0, #32
   1664e:	4b25      	ldr	r3, [pc, #148]	; (166e4 <store_file_packet+0x1ac>)
   16650:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   16652:	4b29      	ldr	r3, [pc, #164]	; (166f8 <store_file_packet+0x1c0>)
   16654:	0019      	movs	r1, r3
   16656:	2001      	movs	r0, #1
   16658:	4b16      	ldr	r3, [pc, #88]	; (166b4 <store_file_packet+0x17c>)
   1665a:	4798      	blx	r3
            return;
   1665c:	e024      	b.n	166a8 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   1665e:	4b23      	ldr	r3, [pc, #140]	; (166ec <store_file_packet+0x1b4>)
   16660:	681a      	ldr	r2, [r3, #0]
   16662:	68fb      	ldr	r3, [r7, #12]
   16664:	18d2      	adds	r2, r2, r3
   16666:	4b21      	ldr	r3, [pc, #132]	; (166ec <store_file_packet+0x1b4>)
   16668:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   1666a:	4b20      	ldr	r3, [pc, #128]	; (166ec <store_file_packet+0x1b4>)
   1666c:	681a      	ldr	r2, [r3, #0]
   1666e:	4b23      	ldr	r3, [pc, #140]	; (166fc <store_file_packet+0x1c4>)
   16670:	681b      	ldr	r3, [r3, #0]
   16672:	4923      	ldr	r1, [pc, #140]	; (16700 <store_file_packet+0x1c8>)
   16674:	2001      	movs	r0, #1
   16676:	4c0f      	ldr	r4, [pc, #60]	; (166b4 <store_file_packet+0x17c>)
   16678:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   1667a:	4b1c      	ldr	r3, [pc, #112]	; (166ec <store_file_packet+0x1b4>)
   1667c:	681a      	ldr	r2, [r3, #0]
   1667e:	4b1f      	ldr	r3, [pc, #124]	; (166fc <store_file_packet+0x1c4>)
   16680:	681b      	ldr	r3, [r3, #0]
   16682:	429a      	cmp	r2, r3
   16684:	d310      	bcc.n	166a8 <store_file_packet+0x170>
            f_close(&file_object);
   16686:	4b12      	ldr	r3, [pc, #72]	; (166d0 <store_file_packet+0x198>)
   16688:	0018      	movs	r0, r3
   1668a:	4b1a      	ldr	r3, [pc, #104]	; (166f4 <store_file_packet+0x1bc>)
   1668c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   1668e:	4b1d      	ldr	r3, [pc, #116]	; (16704 <store_file_packet+0x1cc>)
   16690:	0019      	movs	r1, r3
   16692:	2001      	movs	r0, #1
   16694:	4b07      	ldr	r3, [pc, #28]	; (166b4 <store_file_packet+0x17c>)
   16696:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   16698:	2100      	movs	r1, #0
   1669a:	2017      	movs	r0, #23
   1669c:	4b1a      	ldr	r3, [pc, #104]	; (16708 <store_file_packet+0x1d0>)
   1669e:	4798      	blx	r3
            add_state(COMPLETED);
   166a0:	2010      	movs	r0, #16
   166a2:	4b10      	ldr	r3, [pc, #64]	; (166e4 <store_file_packet+0x1ac>)
   166a4:	4798      	blx	r3
            return;
   166a6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   166a8:	46bd      	mov	sp, r7
   166aa:	b006      	add	sp, #24
   166ac:	bdb0      	pop	{r4, r5, r7, pc}
   166ae:	46c0      	nop			; (mov r8, r8)
   166b0:	00036d30 	.word	0x00036d30
   166b4:	0001e3a1 	.word	0x0001e3a1
   166b8:	00016155 	.word	0x00016155
   166bc:	200000b4 	.word	0x200000b4
   166c0:	00036d2f 	.word	0x00036d2f
   166c4:	0003531b 	.word	0x0003531b
   166c8:	200000b6 	.word	0x200000b6
   166cc:	000352cf 	.word	0x000352cf
   166d0:	2000086c 	.word	0x2000086c
   166d4:	000161d9 	.word	0x000161d9
   166d8:	00036d94 	.word	0x00036d94
   166dc:	0002deb1 	.word	0x0002deb1
   166e0:	00036d54 	.word	0x00036d54
   166e4:	0001612d 	.word	0x0001612d
   166e8:	00036dbc 	.word	0x00036dbc
   166ec:	20000894 	.word	0x20000894
   166f0:	0002e3e1 	.word	0x0002e3e1
   166f4:	0002e8b1 	.word	0x0002e8b1
   166f8:	00036df0 	.word	0x00036df0
   166fc:	20000890 	.word	0x20000890
   16700:	00036e2c 	.word	0x00036e2c
   16704:	00036e60 	.word	0x00036e60
   16708:	00016091 	.word	0x00016091

0001670c <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   1670c:	b590      	push	{r4, r7, lr}
   1670e:	b085      	sub	sp, #20
   16710:	af00      	add	r7, sp, #0
   16712:	60f8      	str	r0, [r7, #12]
   16714:	60b9      	str	r1, [r7, #8]
   16716:	607a      	str	r2, [r7, #4]
    switch (type) {
   16718:	68bb      	ldr	r3, [r7, #8]
   1671a:	2b04      	cmp	r3, #4
   1671c:	d900      	bls.n	16720 <http_client_callback+0x14>
   1671e:	e077      	b.n	16810 <http_client_callback+0x104>
   16720:	68bb      	ldr	r3, [r7, #8]
   16722:	009a      	lsls	r2, r3, #2
   16724:	4b3c      	ldr	r3, [pc, #240]	; (16818 <http_client_callback+0x10c>)
   16726:	18d3      	adds	r3, r2, r3
   16728:	681b      	ldr	r3, [r3, #0]
   1672a:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   1672c:	4b3b      	ldr	r3, [pc, #236]	; (1681c <http_client_callback+0x110>)
   1672e:	0019      	movs	r1, r3
   16730:	2001      	movs	r0, #1
   16732:	4b3b      	ldr	r3, [pc, #236]	; (16820 <http_client_callback+0x114>)
   16734:	4798      	blx	r3
            break;
   16736:	e06b      	b.n	16810 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   16738:	4b3a      	ldr	r3, [pc, #232]	; (16824 <http_client_callback+0x118>)
   1673a:	0019      	movs	r1, r3
   1673c:	2001      	movs	r0, #1
   1673e:	4b38      	ldr	r3, [pc, #224]	; (16820 <http_client_callback+0x114>)
   16740:	4798      	blx	r3
            add_state(GET_REQUESTED);
   16742:	2004      	movs	r0, #4
   16744:	4b38      	ldr	r3, [pc, #224]	; (16828 <http_client_callback+0x11c>)
   16746:	4798      	blx	r3
            break;
   16748:	e062      	b.n	16810 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   1674a:	687b      	ldr	r3, [r7, #4]
   1674c:	881b      	ldrh	r3, [r3, #0]
   1674e:	001a      	movs	r2, r3
   16750:	687b      	ldr	r3, [r7, #4]
   16752:	685b      	ldr	r3, [r3, #4]
   16754:	4935      	ldr	r1, [pc, #212]	; (1682c <http_client_callback+0x120>)
   16756:	2001      	movs	r0, #1
   16758:	4c31      	ldr	r4, [pc, #196]	; (16820 <http_client_callback+0x114>)
   1675a:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   1675c:	687b      	ldr	r3, [r7, #4]
   1675e:	881b      	ldrh	r3, [r3, #0]
   16760:	2bc8      	cmp	r3, #200	; 0xc8
   16762:	d10d      	bne.n	16780 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   16764:	687b      	ldr	r3, [r7, #4]
   16766:	685a      	ldr	r2, [r3, #4]
   16768:	4b31      	ldr	r3, [pc, #196]	; (16830 <http_client_callback+0x124>)
   1676a:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   1676c:	4b31      	ldr	r3, [pc, #196]	; (16834 <http_client_callback+0x128>)
   1676e:	2200      	movs	r2, #0
   16770:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   16772:	687b      	ldr	r3, [r7, #4]
   16774:	685a      	ldr	r2, [r3, #4]
   16776:	2380      	movs	r3, #128	; 0x80
   16778:	009b      	lsls	r3, r3, #2
   1677a:	429a      	cmp	r2, r3
   1677c:	d843      	bhi.n	16806 <http_client_callback+0xfa>
   1677e:	e003      	b.n	16788 <http_client_callback+0x7c>
                add_state(CANCELED);
   16780:	2020      	movs	r0, #32
   16782:	4b29      	ldr	r3, [pc, #164]	; (16828 <http_client_callback+0x11c>)
   16784:	4798      	blx	r3
                return;
   16786:	e043      	b.n	16810 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   16788:	687b      	ldr	r3, [r7, #4]
   1678a:	689a      	ldr	r2, [r3, #8]
   1678c:	687b      	ldr	r3, [r7, #4]
   1678e:	685b      	ldr	r3, [r3, #4]
   16790:	0019      	movs	r1, r3
   16792:	0010      	movs	r0, r2
   16794:	4b28      	ldr	r3, [pc, #160]	; (16838 <http_client_callback+0x12c>)
   16796:	4798      	blx	r3
                add_state(COMPLETED);
   16798:	2010      	movs	r0, #16
   1679a:	4b23      	ldr	r3, [pc, #140]	; (16828 <http_client_callback+0x11c>)
   1679c:	4798      	blx	r3
            }
            break;
   1679e:	e032      	b.n	16806 <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   167a0:	687b      	ldr	r3, [r7, #4]
   167a2:	685a      	ldr	r2, [r3, #4]
   167a4:	687b      	ldr	r3, [r7, #4]
   167a6:	681b      	ldr	r3, [r3, #0]
   167a8:	0019      	movs	r1, r3
   167aa:	0010      	movs	r0, r2
   167ac:	4b22      	ldr	r3, [pc, #136]	; (16838 <http_client_callback+0x12c>)
   167ae:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   167b0:	687b      	ldr	r3, [r7, #4]
   167b2:	7a1b      	ldrb	r3, [r3, #8]
   167b4:	2b00      	cmp	r3, #0
   167b6:	d028      	beq.n	1680a <http_client_callback+0xfe>
                add_state(COMPLETED);
   167b8:	2010      	movs	r0, #16
   167ba:	4b1b      	ldr	r3, [pc, #108]	; (16828 <http_client_callback+0x11c>)
   167bc:	4798      	blx	r3
            }

            break;
   167be:	e024      	b.n	1680a <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   167c0:	687b      	ldr	r3, [r7, #4]
   167c2:	681a      	ldr	r2, [r3, #0]
   167c4:	4b1d      	ldr	r3, [pc, #116]	; (1683c <http_client_callback+0x130>)
   167c6:	0019      	movs	r1, r3
   167c8:	2001      	movs	r0, #1
   167ca:	4b15      	ldr	r3, [pc, #84]	; (16820 <http_client_callback+0x114>)
   167cc:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   167ce:	687b      	ldr	r3, [r7, #4]
   167d0:	681b      	ldr	r3, [r3, #0]
   167d2:	330b      	adds	r3, #11
   167d4:	d11b      	bne.n	1680e <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   167d6:	2008      	movs	r0, #8
   167d8:	4b19      	ldr	r3, [pc, #100]	; (16840 <http_client_callback+0x134>)
   167da:	4798      	blx	r3
   167dc:	1e03      	subs	r3, r0, #0
   167de:	d006      	beq.n	167ee <http_client_callback+0xe2>
                    f_close(&file_object);
   167e0:	4b18      	ldr	r3, [pc, #96]	; (16844 <http_client_callback+0x138>)
   167e2:	0018      	movs	r0, r3
   167e4:	4b18      	ldr	r3, [pc, #96]	; (16848 <http_client_callback+0x13c>)
   167e6:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   167e8:	2008      	movs	r0, #8
   167ea:	4b18      	ldr	r3, [pc, #96]	; (1684c <http_client_callback+0x140>)
   167ec:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   167ee:	2004      	movs	r0, #4
   167f0:	4b13      	ldr	r3, [pc, #76]	; (16840 <http_client_callback+0x134>)
   167f2:	4798      	blx	r3
   167f4:	1e03      	subs	r3, r0, #0
   167f6:	d002      	beq.n	167fe <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   167f8:	2004      	movs	r0, #4
   167fa:	4b14      	ldr	r3, [pc, #80]	; (1684c <http_client_callback+0x140>)
   167fc:	4798      	blx	r3
                }

                start_download();
   167fe:	4b14      	ldr	r3, [pc, #80]	; (16850 <http_client_callback+0x144>)
   16800:	4798      	blx	r3
            }

            break;
   16802:	46c0      	nop			; (mov r8, r8)
   16804:	e003      	b.n	1680e <http_client_callback+0x102>
            break;
   16806:	46c0      	nop			; (mov r8, r8)
   16808:	e002      	b.n	16810 <http_client_callback+0x104>
            break;
   1680a:	46c0      	nop			; (mov r8, r8)
   1680c:	e000      	b.n	16810 <http_client_callback+0x104>
            break;
   1680e:	46c0      	nop			; (mov r8, r8)
    }
}
   16810:	46bd      	mov	sp, r7
   16812:	b005      	add	sp, #20
   16814:	bd90      	pop	{r4, r7, pc}
   16816:	46c0      	nop			; (mov r8, r8)
   16818:	0003759c 	.word	0x0003759c
   1681c:	00036e94 	.word	0x00036e94
   16820:	0001e3a1 	.word	0x0001e3a1
   16824:	00036ecc 	.word	0x00036ecc
   16828:	0001612d 	.word	0x0001612d
   1682c:	00036ef8 	.word	0x00036ef8
   16830:	20000890 	.word	0x20000890
   16834:	20000894 	.word	0x20000894
   16838:	00016539 	.word	0x00016539
   1683c:	00036f34 	.word	0x00036f34
   16840:	00016155 	.word	0x00016155
   16844:	2000086c 	.word	0x2000086c
   16848:	0002e8b1 	.word	0x0002e8b1
   1684c:	000160f9 	.word	0x000160f9
   16850:	0001647d 	.word	0x0001647d

00016854 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   16854:	b580      	push	{r7, lr}
   16856:	b082      	sub	sp, #8
   16858:	af00      	add	r7, sp, #0
   1685a:	603a      	str	r2, [r7, #0]
   1685c:	1dfb      	adds	r3, r7, #7
   1685e:	1c02      	adds	r2, r0, #0
   16860:	701a      	strb	r2, [r3, #0]
   16862:	1dbb      	adds	r3, r7, #6
   16864:	1c0a      	adds	r2, r1, #0
   16866:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   16868:	683a      	ldr	r2, [r7, #0]
   1686a:	1dbb      	adds	r3, r7, #6
   1686c:	7819      	ldrb	r1, [r3, #0]
   1686e:	1dfb      	adds	r3, r7, #7
   16870:	781b      	ldrb	r3, [r3, #0]
   16872:	b25b      	sxtb	r3, r3
   16874:	0018      	movs	r0, r3
   16876:	4b03      	ldr	r3, [pc, #12]	; (16884 <socket_cb+0x30>)
   16878:	4798      	blx	r3
}
   1687a:	46c0      	nop			; (mov r8, r8)
   1687c:	46bd      	mov	sp, r7
   1687e:	b002      	add	sp, #8
   16880:	bd80      	pop	{r7, pc}
   16882:	46c0      	nop			; (mov r8, r8)
   16884:	00031215 	.word	0x00031215

00016888 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   16888:	b5b0      	push	{r4, r5, r7, lr}
   1688a:	b086      	sub	sp, #24
   1688c:	af04      	add	r7, sp, #16
   1688e:	6078      	str	r0, [r7, #4]
   16890:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   16892:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   16894:	22ff      	movs	r2, #255	; 0xff
   16896:	4013      	ands	r3, r2
   16898:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   1689a:	683b      	ldr	r3, [r7, #0]
   1689c:	0a1b      	lsrs	r3, r3, #8
   1689e:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   168a0:	23ff      	movs	r3, #255	; 0xff
   168a2:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   168a4:	683a      	ldr	r2, [r7, #0]
   168a6:	0c12      	lsrs	r2, r2, #16
   168a8:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   168aa:	22ff      	movs	r2, #255	; 0xff
   168ac:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   168ae:	6839      	ldr	r1, [r7, #0]
   168b0:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   168b2:	000d      	movs	r5, r1
   168b4:	6878      	ldr	r0, [r7, #4]
   168b6:	4909      	ldr	r1, [pc, #36]	; (168dc <resolve_cb+0x54>)
   168b8:	9502      	str	r5, [sp, #8]
   168ba:	9201      	str	r2, [sp, #4]
   168bc:	9300      	str	r3, [sp, #0]
   168be:	0023      	movs	r3, r4
   168c0:	0002      	movs	r2, r0
   168c2:	2001      	movs	r0, #1
   168c4:	4c06      	ldr	r4, [pc, #24]	; (168e0 <resolve_cb+0x58>)
   168c6:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   168c8:	683a      	ldr	r2, [r7, #0]
   168ca:	687b      	ldr	r3, [r7, #4]
   168cc:	0011      	movs	r1, r2
   168ce:	0018      	movs	r0, r3
   168d0:	4b04      	ldr	r3, [pc, #16]	; (168e4 <resolve_cb+0x5c>)
   168d2:	4798      	blx	r3
}
   168d4:	46c0      	nop			; (mov r8, r8)
   168d6:	46bd      	mov	sp, r7
   168d8:	b002      	add	sp, #8
   168da:	bdb0      	pop	{r4, r5, r7, pc}
   168dc:	00036f64 	.word	0x00036f64
   168e0:	0001e3a1 	.word	0x0001e3a1
   168e4:	00031379 	.word	0x00031379

000168e8 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   168e8:	b590      	push	{r4, r7, lr}
   168ea:	b087      	sub	sp, #28
   168ec:	af02      	add	r7, sp, #8
   168ee:	0002      	movs	r2, r0
   168f0:	6039      	str	r1, [r7, #0]
   168f2:	1dfb      	adds	r3, r7, #7
   168f4:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   168f6:	1dfb      	adds	r3, r7, #7
   168f8:	781b      	ldrb	r3, [r3, #0]
   168fa:	2b2c      	cmp	r3, #44	; 0x2c
   168fc:	d002      	beq.n	16904 <wifi_cb+0x1c>
   168fe:	2b32      	cmp	r3, #50	; 0x32
   16900:	d03d      	beq.n	1697e <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   16902:	e06f      	b.n	169e4 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   16904:	683b      	ldr	r3, [r7, #0]
   16906:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16908:	68fb      	ldr	r3, [r7, #12]
   1690a:	781b      	ldrb	r3, [r3, #0]
   1690c:	2b01      	cmp	r3, #1
   1690e:	d107      	bne.n	16920 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16910:	4b36      	ldr	r3, [pc, #216]	; (169ec <wifi_cb+0x104>)
   16912:	0019      	movs	r1, r3
   16914:	2001      	movs	r0, #1
   16916:	4b36      	ldr	r3, [pc, #216]	; (169f0 <wifi_cb+0x108>)
   16918:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   1691a:	4b36      	ldr	r3, [pc, #216]	; (169f4 <wifi_cb+0x10c>)
   1691c:	4798      	blx	r3
            break;
   1691e:	e05e      	b.n	169de <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   16920:	68fb      	ldr	r3, [r7, #12]
   16922:	781b      	ldrb	r3, [r3, #0]
   16924:	2b00      	cmp	r3, #0
   16926:	d15a      	bne.n	169de <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   16928:	4b33      	ldr	r3, [pc, #204]	; (169f8 <wifi_cb+0x110>)
   1692a:	0019      	movs	r1, r3
   1692c:	2001      	movs	r0, #1
   1692e:	4b30      	ldr	r3, [pc, #192]	; (169f0 <wifi_cb+0x108>)
   16930:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   16932:	2002      	movs	r0, #2
   16934:	4b31      	ldr	r3, [pc, #196]	; (169fc <wifi_cb+0x114>)
   16936:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   16938:	2008      	movs	r0, #8
   1693a:	4b31      	ldr	r3, [pc, #196]	; (16a00 <wifi_cb+0x118>)
   1693c:	4798      	blx	r3
   1693e:	1e03      	subs	r3, r0, #0
   16940:	d006      	beq.n	16950 <wifi_cb+0x68>
                    f_close(&file_object);
   16942:	4b30      	ldr	r3, [pc, #192]	; (16a04 <wifi_cb+0x11c>)
   16944:	0018      	movs	r0, r3
   16946:	4b30      	ldr	r3, [pc, #192]	; (16a08 <wifi_cb+0x120>)
   16948:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1694a:	2008      	movs	r0, #8
   1694c:	4b2b      	ldr	r3, [pc, #172]	; (169fc <wifi_cb+0x114>)
   1694e:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   16950:	2004      	movs	r0, #4
   16952:	4b2b      	ldr	r3, [pc, #172]	; (16a00 <wifi_cb+0x118>)
   16954:	4798      	blx	r3
   16956:	1e03      	subs	r3, r0, #0
   16958:	d002      	beq.n	16960 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   1695a:	2004      	movs	r0, #4
   1695c:	4b27      	ldr	r3, [pc, #156]	; (169fc <wifi_cb+0x114>)
   1695e:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   16960:	4b2a      	ldr	r3, [pc, #168]	; (16a0c <wifi_cb+0x124>)
   16962:	2101      	movs	r1, #1
   16964:	0018      	movs	r0, r3
   16966:	4b2a      	ldr	r3, [pc, #168]	; (16a10 <wifi_cb+0x128>)
   16968:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   1696a:	4a2a      	ldr	r2, [pc, #168]	; (16a14 <wifi_cb+0x12c>)
   1696c:	482a      	ldr	r0, [pc, #168]	; (16a18 <wifi_cb+0x130>)
   1696e:	23ff      	movs	r3, #255	; 0xff
   16970:	9300      	str	r3, [sp, #0]
   16972:	0013      	movs	r3, r2
   16974:	2201      	movs	r2, #1
   16976:	210a      	movs	r1, #10
   16978:	4c28      	ldr	r4, [pc, #160]	; (16a1c <wifi_cb+0x134>)
   1697a:	47a0      	blx	r4
            break;
   1697c:	e02f      	b.n	169de <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   1697e:	683b      	ldr	r3, [r7, #0]
   16980:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16982:	68bb      	ldr	r3, [r7, #8]
   16984:	781b      	ldrb	r3, [r3, #0]
   16986:	0018      	movs	r0, r3
   16988:	68bb      	ldr	r3, [r7, #8]
   1698a:	3301      	adds	r3, #1
   1698c:	781b      	ldrb	r3, [r3, #0]
   1698e:	001c      	movs	r4, r3
   16990:	68bb      	ldr	r3, [r7, #8]
   16992:	3302      	adds	r3, #2
   16994:	781b      	ldrb	r3, [r3, #0]
   16996:	001a      	movs	r2, r3
   16998:	68bb      	ldr	r3, [r7, #8]
   1699a:	3303      	adds	r3, #3
   1699c:	781b      	ldrb	r3, [r3, #0]
   1699e:	4920      	ldr	r1, [pc, #128]	; (16a20 <wifi_cb+0x138>)
   169a0:	9301      	str	r3, [sp, #4]
   169a2:	9200      	str	r2, [sp, #0]
   169a4:	0023      	movs	r3, r4
   169a6:	0002      	movs	r2, r0
   169a8:	2001      	movs	r0, #1
   169aa:	4c11      	ldr	r4, [pc, #68]	; (169f0 <wifi_cb+0x108>)
   169ac:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   169ae:	2002      	movs	r0, #2
   169b0:	4b1c      	ldr	r3, [pc, #112]	; (16a24 <wifi_cb+0x13c>)
   169b2:	4798      	blx	r3
            if (do_download_flag == 1) {
   169b4:	4b1c      	ldr	r3, [pc, #112]	; (16a28 <wifi_cb+0x140>)
   169b6:	781b      	ldrb	r3, [r3, #0]
   169b8:	2b01      	cmp	r3, #1
   169ba:	d102      	bne.n	169c2 <wifi_cb+0xda>
                start_download();
   169bc:	4b1b      	ldr	r3, [pc, #108]	; (16a2c <wifi_cb+0x144>)
   169be:	4798      	blx	r3
        } break;
   169c0:	e00f      	b.n	169e2 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   169c2:	4a1b      	ldr	r2, [pc, #108]	; (16a30 <wifi_cb+0x148>)
   169c4:	4b11      	ldr	r3, [pc, #68]	; (16a0c <wifi_cb+0x124>)
   169c6:	0011      	movs	r1, r2
   169c8:	0018      	movs	r0, r3
   169ca:	4b1a      	ldr	r3, [pc, #104]	; (16a34 <wifi_cb+0x14c>)
   169cc:	4798      	blx	r3
   169ce:	1e03      	subs	r3, r0, #0
   169d0:	d007      	beq.n	169e2 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   169d2:	4b19      	ldr	r3, [pc, #100]	; (16a38 <wifi_cb+0x150>)
   169d4:	0019      	movs	r1, r3
   169d6:	2001      	movs	r0, #1
   169d8:	4b05      	ldr	r3, [pc, #20]	; (169f0 <wifi_cb+0x108>)
   169da:	4798      	blx	r3
        } break;
   169dc:	e001      	b.n	169e2 <wifi_cb+0xfa>
            break;
   169de:	46c0      	nop			; (mov r8, r8)
   169e0:	e000      	b.n	169e4 <wifi_cb+0xfc>
        } break;
   169e2:	46c0      	nop			; (mov r8, r8)
    }
}
   169e4:	46c0      	nop			; (mov r8, r8)
   169e6:	46bd      	mov	sp, r7
   169e8:	b005      	add	sp, #20
   169ea:	bd90      	pop	{r4, r7, pc}
   169ec:	00036f94 	.word	0x00036f94
   169f0:	0001e3a1 	.word	0x0001e3a1
   169f4:	000229e5 	.word	0x000229e5
   169f8:	00036fb4 	.word	0x00036fb4
   169fc:	000160f9 	.word	0x000160f9
   16a00:	00016155 	.word	0x00016155
   16a04:	2000086c 	.word	0x2000086c
   16a08:	0002e8b1 	.word	0x0002e8b1
   16a0c:	20000898 	.word	0x20000898
   16a10:	0002fec1 	.word	0x0002fec1
   16a14:	00036fd8 	.word	0x00036fd8
   16a18:	00036fe4 	.word	0x00036fe4
   16a1c:	00022511 	.word	0x00022511
   16a20:	00036ff0 	.word	0x00036ff0
   16a24:	0001612d 	.word	0x0001612d
   16a28:	20000638 	.word	0x20000638
   16a2c:	0001647d 	.word	0x0001647d
   16a30:	00036c18 	.word	0x00036c18
   16a34:	0002fd8d 	.word	0x0002fd8d
   16a38:	00037018 	.word	0x00037018

00016a3c <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   16a3c:	b590      	push	{r4, r7, lr}
   16a3e:	b083      	sub	sp, #12
   16a40:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   16a42:	4b29      	ldr	r3, [pc, #164]	; (16ae8 <init_storage+0xac>)
   16a44:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   16a46:	4b29      	ldr	r3, [pc, #164]	; (16aec <init_storage+0xb0>)
   16a48:	0019      	movs	r1, r3
   16a4a:	2001      	movs	r0, #1
   16a4c:	4b28      	ldr	r3, [pc, #160]	; (16af0 <init_storage+0xb4>)
   16a4e:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   16a50:	1dfc      	adds	r4, r7, #7
   16a52:	2000      	movs	r0, #0
   16a54:	4b27      	ldr	r3, [pc, #156]	; (16af4 <init_storage+0xb8>)
   16a56:	4798      	blx	r3
   16a58:	0003      	movs	r3, r0
   16a5a:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   16a5c:	1dfb      	adds	r3, r7, #7
   16a5e:	781b      	ldrb	r3, [r3, #0]
   16a60:	2b01      	cmp	r3, #1
   16a62:	d110      	bne.n	16a86 <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   16a64:	4b24      	ldr	r3, [pc, #144]	; (16af8 <init_storage+0xbc>)
   16a66:	0019      	movs	r1, r3
   16a68:	2001      	movs	r0, #1
   16a6a:	4b21      	ldr	r3, [pc, #132]	; (16af0 <init_storage+0xb4>)
   16a6c:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   16a6e:	4b23      	ldr	r3, [pc, #140]	; (16afc <init_storage+0xc0>)
   16a70:	0019      	movs	r1, r3
   16a72:	2001      	movs	r0, #1
   16a74:	4b1e      	ldr	r3, [pc, #120]	; (16af0 <init_storage+0xb4>)
   16a76:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   16a78:	46c0      	nop			; (mov r8, r8)
   16a7a:	2000      	movs	r0, #0
   16a7c:	4b20      	ldr	r3, [pc, #128]	; (16b00 <init_storage+0xc4>)
   16a7e:	4798      	blx	r3
   16a80:	0003      	movs	r3, r0
   16a82:	2b02      	cmp	r3, #2
   16a84:	d1f9      	bne.n	16a7a <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   16a86:	1dfb      	adds	r3, r7, #7
   16a88:	781b      	ldrb	r3, [r3, #0]
   16a8a:	2b00      	cmp	r3, #0
   16a8c:	d1e0      	bne.n	16a50 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   16a8e:	4b1d      	ldr	r3, [pc, #116]	; (16b04 <init_storage+0xc8>)
   16a90:	0019      	movs	r1, r3
   16a92:	2001      	movs	r0, #1
   16a94:	4b16      	ldr	r3, [pc, #88]	; (16af0 <init_storage+0xb4>)
   16a96:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   16a98:	238c      	movs	r3, #140	; 0x8c
   16a9a:	009a      	lsls	r2, r3, #2
   16a9c:	4b1a      	ldr	r3, [pc, #104]	; (16b08 <init_storage+0xcc>)
   16a9e:	2100      	movs	r1, #0
   16aa0:	0018      	movs	r0, r3
   16aa2:	4b1a      	ldr	r3, [pc, #104]	; (16b0c <init_storage+0xd0>)
   16aa4:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   16aa6:	1dbc      	adds	r4, r7, #6
   16aa8:	4b17      	ldr	r3, [pc, #92]	; (16b08 <init_storage+0xcc>)
   16aaa:	0019      	movs	r1, r3
   16aac:	2000      	movs	r0, #0
   16aae:	4b18      	ldr	r3, [pc, #96]	; (16b10 <init_storage+0xd4>)
   16ab0:	4798      	blx	r3
   16ab2:	0003      	movs	r3, r0
   16ab4:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   16ab6:	1dbb      	adds	r3, r7, #6
   16ab8:	781b      	ldrb	r3, [r3, #0]
   16aba:	2b0b      	cmp	r3, #11
   16abc:	d107      	bne.n	16ace <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   16abe:	1dbb      	adds	r3, r7, #6
   16ac0:	781a      	ldrb	r2, [r3, #0]
   16ac2:	4b14      	ldr	r3, [pc, #80]	; (16b14 <init_storage+0xd8>)
   16ac4:	0019      	movs	r1, r3
   16ac6:	2001      	movs	r0, #1
   16ac8:	4b09      	ldr	r3, [pc, #36]	; (16af0 <init_storage+0xb4>)
   16aca:	4798      	blx	r3
            return;
   16acc:	e008      	b.n	16ae0 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   16ace:	4b12      	ldr	r3, [pc, #72]	; (16b18 <init_storage+0xdc>)
   16ad0:	0019      	movs	r1, r3
   16ad2:	2001      	movs	r0, #1
   16ad4:	4b06      	ldr	r3, [pc, #24]	; (16af0 <init_storage+0xb4>)
   16ad6:	4798      	blx	r3
        add_state(STORAGE_READY);
   16ad8:	2001      	movs	r0, #1
   16ada:	4b10      	ldr	r3, [pc, #64]	; (16b1c <init_storage+0xe0>)
   16adc:	4798      	blx	r3
        return;
   16ade:	46c0      	nop			; (mov r8, r8)
    }
}
   16ae0:	46bd      	mov	sp, r7
   16ae2:	b003      	add	sp, #12
   16ae4:	bd90      	pop	{r4, r7, pc}
   16ae6:	46c0      	nop			; (mov r8, r8)
   16ae8:	0001f1b9 	.word	0x0001f1b9
   16aec:	0003703c 	.word	0x0003703c
   16af0:	0001e3a1 	.word	0x0001e3a1
   16af4:	0001f695 	.word	0x0001f695
   16af8:	00037074 	.word	0x00037074
   16afc:	0003709c 	.word	0x0003709c
   16b00:	0001f209 	.word	0x0001f209
   16b04:	000370d0 	.word	0x000370d0
   16b08:	2000063c 	.word	0x2000063c
   16b0c:	00034f63 	.word	0x00034f63
   16b10:	0002de59 	.word	0x0002de59
   16b14:	000370f4 	.word	0x000370f4
   16b18:	00037124 	.word	0x00037124
   16b1c:	0001612d 	.word	0x0001612d

00016b20 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   16b20:	b580      	push	{r7, lr}
   16b22:	b082      	sub	sp, #8
   16b24:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   16b26:	1d3b      	adds	r3, r7, #4
   16b28:	0018      	movs	r0, r3
   16b2a:	4b08      	ldr	r3, [pc, #32]	; (16b4c <configure_timer+0x2c>)
   16b2c:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   16b2e:	1d3a      	adds	r2, r7, #4
   16b30:	4b07      	ldr	r3, [pc, #28]	; (16b50 <configure_timer+0x30>)
   16b32:	0011      	movs	r1, r2
   16b34:	0018      	movs	r0, r3
   16b36:	4b07      	ldr	r3, [pc, #28]	; (16b54 <configure_timer+0x34>)
   16b38:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   16b3a:	4b05      	ldr	r3, [pc, #20]	; (16b50 <configure_timer+0x30>)
   16b3c:	0018      	movs	r0, r3
   16b3e:	4b06      	ldr	r3, [pc, #24]	; (16b58 <configure_timer+0x38>)
   16b40:	4798      	blx	r3
}
   16b42:	46c0      	nop			; (mov r8, r8)
   16b44:	46bd      	mov	sp, r7
   16b46:	b002      	add	sp, #8
   16b48:	bd80      	pop	{r7, pc}
   16b4a:	46c0      	nop			; (mov r8, r8)
   16b4c:	000329a9 	.word	0x000329a9
   16b50:	200048b0 	.word	0x200048b0
   16b54:	000329cd 	.word	0x000329cd
   16b58:	00032ab9 	.word	0x00032ab9

00016b5c <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   16b5c:	b580      	push	{r7, lr}
   16b5e:	b088      	sub	sp, #32
   16b60:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   16b62:	003b      	movs	r3, r7
   16b64:	0018      	movs	r0, r3
   16b66:	4b12      	ldr	r3, [pc, #72]	; (16bb0 <configure_http_client+0x54>)
   16b68:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   16b6a:	003b      	movs	r3, r7
   16b6c:	2280      	movs	r2, #128	; 0x80
   16b6e:	0092      	lsls	r2, r2, #2
   16b70:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   16b72:	003b      	movs	r3, r7
   16b74:	4a0f      	ldr	r2, [pc, #60]	; (16bb4 <configure_http_client+0x58>)
   16b76:	605a      	str	r2, [r3, #4]
    //httpc_conf.port = 443;
    //httpc_conf.tls = 1;

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   16b78:	003a      	movs	r2, r7
   16b7a:	4b0f      	ldr	r3, [pc, #60]	; (16bb8 <configure_http_client+0x5c>)
   16b7c:	0011      	movs	r1, r2
   16b7e:	0018      	movs	r0, r3
   16b80:	4b0e      	ldr	r3, [pc, #56]	; (16bbc <configure_http_client+0x60>)
   16b82:	4798      	blx	r3
   16b84:	0003      	movs	r3, r0
   16b86:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   16b88:	69fb      	ldr	r3, [r7, #28]
   16b8a:	2b00      	cmp	r3, #0
   16b8c:	da06      	bge.n	16b9c <configure_http_client+0x40>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   16b8e:	69fa      	ldr	r2, [r7, #28]
   16b90:	4b0b      	ldr	r3, [pc, #44]	; (16bc0 <configure_http_client+0x64>)
   16b92:	0019      	movs	r1, r3
   16b94:	2001      	movs	r0, #1
   16b96:	4b0b      	ldr	r3, [pc, #44]	; (16bc4 <configure_http_client+0x68>)
   16b98:	4798      	blx	r3
        while (1) {
   16b9a:	e7fe      	b.n	16b9a <configure_http_client+0x3e>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   16b9c:	4a0a      	ldr	r2, [pc, #40]	; (16bc8 <configure_http_client+0x6c>)
   16b9e:	4b06      	ldr	r3, [pc, #24]	; (16bb8 <configure_http_client+0x5c>)
   16ba0:	0011      	movs	r1, r2
   16ba2:	0018      	movs	r0, r3
   16ba4:	4b09      	ldr	r3, [pc, #36]	; (16bcc <configure_http_client+0x70>)
   16ba6:	4798      	blx	r3
}
   16ba8:	46c0      	nop			; (mov r8, r8)
   16baa:	46bd      	mov	sp, r7
   16bac:	b008      	add	sp, #32
   16bae:	bd80      	pop	{r7, pc}
   16bb0:	0003103d 	.word	0x0003103d
   16bb4:	200048b0 	.word	0x200048b0
   16bb8:	20004908 	.word	0x20004908
   16bbc:	00031089 	.word	0x00031089
   16bc0:	00037148 	.word	0x00037148
   16bc4:	0001e3a1 	.word	0x0001e3a1
   16bc8:	0001670d 	.word	0x0001670d
   16bcc:	00031175 	.word	0x00031175

00016bd0 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   16bd0:	b580      	push	{r7, lr}
   16bd2:	b082      	sub	sp, #8
   16bd4:	af00      	add	r7, sp, #0
   16bd6:	603a      	str	r2, [r7, #0]
   16bd8:	1dfb      	adds	r3, r7, #7
   16bda:	1c02      	adds	r2, r0, #0
   16bdc:	701a      	strb	r2, [r3, #0]
   16bde:	1dbb      	adds	r3, r7, #6
   16be0:	1c0a      	adds	r2, r1, #0
   16be2:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   16be4:	683a      	ldr	r2, [r7, #0]
   16be6:	1dbb      	adds	r3, r7, #6
   16be8:	7819      	ldrb	r1, [r3, #0]
   16bea:	1dfb      	adds	r3, r7, #7
   16bec:	781b      	ldrb	r3, [r3, #0]
   16bee:	b25b      	sxtb	r3, r3
   16bf0:	0018      	movs	r0, r3
   16bf2:	4b03      	ldr	r3, [pc, #12]	; (16c00 <socket_event_handler+0x30>)
   16bf4:	4798      	blx	r3
}
   16bf6:	46c0      	nop			; (mov r8, r8)
   16bf8:	46bd      	mov	sp, r7
   16bfa:	b002      	add	sp, #8
   16bfc:	bd80      	pop	{r7, pc}
   16bfe:	46c0      	nop			; (mov r8, r8)
   16c00:	0002fd35 	.word	0x0002fd35

00016c04 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   16c04:	b580      	push	{r7, lr}
   16c06:	b082      	sub	sp, #8
   16c08:	af00      	add	r7, sp, #0
   16c0a:	6078      	str	r0, [r7, #4]
   16c0c:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   16c0e:	683a      	ldr	r2, [r7, #0]
   16c10:	687b      	ldr	r3, [r7, #4]
   16c12:	0011      	movs	r1, r2
   16c14:	0018      	movs	r0, r3
   16c16:	4b03      	ldr	r3, [pc, #12]	; (16c24 <socket_resolve_handler+0x20>)
   16c18:	4798      	blx	r3
}
   16c1a:	46c0      	nop			; (mov r8, r8)
   16c1c:	46bd      	mov	sp, r7
   16c1e:	b002      	add	sp, #8
   16c20:	bd80      	pop	{r7, pc}
   16c22:	46c0      	nop			; (mov r8, r8)
   16c24:	0002fd69 	.word	0x0002fd69

00016c28 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   16c28:	b590      	push	{r4, r7, lr}
   16c2a:	b089      	sub	sp, #36	; 0x24
   16c2c:	af02      	add	r7, sp, #8
   16c2e:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   16c30:	2310      	movs	r3, #16
   16c32:	18fb      	adds	r3, r7, r3
   16c34:	2200      	movs	r2, #0
   16c36:	701a      	strb	r2, [r3, #0]
   16c38:	2310      	movs	r3, #16
   16c3a:	18fb      	adds	r3, r7, r3
   16c3c:	2200      	movs	r2, #0
   16c3e:	705a      	strb	r2, [r3, #1]
   16c40:	2310      	movs	r3, #16
   16c42:	18fb      	adds	r3, r7, r3
   16c44:	2200      	movs	r2, #0
   16c46:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16c48:	687b      	ldr	r3, [r7, #4]
   16c4a:	685b      	ldr	r3, [r3, #4]
   16c4c:	685a      	ldr	r2, [r3, #4]
   16c4e:	687b      	ldr	r3, [r7, #4]
   16c50:	685b      	ldr	r3, [r3, #4]
   16c52:	689b      	ldr	r3, [r3, #8]
   16c54:	492a      	ldr	r1, [pc, #168]	; (16d00 <SubscribeHandlerLedTopic+0xd8>)
   16c56:	2001      	movs	r0, #1
   16c58:	4c2a      	ldr	r4, [pc, #168]	; (16d04 <SubscribeHandlerLedTopic+0xdc>)
   16c5a:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   16c5c:	687b      	ldr	r3, [r7, #4]
   16c5e:	681b      	ldr	r3, [r3, #0]
   16c60:	689b      	ldr	r3, [r3, #8]
   16c62:	4929      	ldr	r1, [pc, #164]	; (16d08 <SubscribeHandlerLedTopic+0xe0>)
   16c64:	2204      	movs	r2, #4
   16c66:	0018      	movs	r0, r3
   16c68:	4b28      	ldr	r3, [pc, #160]	; (16d0c <SubscribeHandlerLedTopic+0xe4>)
   16c6a:	4798      	blx	r3
   16c6c:	1e03      	subs	r3, r0, #0
   16c6e:	d143      	bne.n	16cf8 <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   16c70:	687b      	ldr	r3, [r7, #4]
   16c72:	681b      	ldr	r3, [r3, #0]
   16c74:	689b      	ldr	r3, [r3, #8]
   16c76:	3304      	adds	r3, #4
   16c78:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   16c7a:	2300      	movs	r3, #0
   16c7c:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   16c7e:	e015      	b.n	16cac <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   16c80:	697c      	ldr	r4, [r7, #20]
   16c82:	1c63      	adds	r3, r4, #1
   16c84:	617b      	str	r3, [r7, #20]
   16c86:	68fb      	ldr	r3, [r7, #12]
   16c88:	220c      	movs	r2, #12
   16c8a:	18b9      	adds	r1, r7, r2
   16c8c:	220a      	movs	r2, #10
   16c8e:	0018      	movs	r0, r3
   16c90:	4b1f      	ldr	r3, [pc, #124]	; (16d10 <SubscribeHandlerLedTopic+0xe8>)
   16c92:	4798      	blx	r3
   16c94:	0003      	movs	r3, r0
   16c96:	b2da      	uxtb	r2, r3
   16c98:	2310      	movs	r3, #16
   16c9a:	18fb      	adds	r3, r7, r3
   16c9c:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   16c9e:	68fb      	ldr	r3, [r7, #12]
   16ca0:	781b      	ldrb	r3, [r3, #0]
   16ca2:	2b2c      	cmp	r3, #44	; 0x2c
   16ca4:	d10a      	bne.n	16cbc <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   16ca6:	68fb      	ldr	r3, [r7, #12]
   16ca8:	3301      	adds	r3, #1
   16caa:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   16cac:	697b      	ldr	r3, [r7, #20]
   16cae:	2b02      	cmp	r3, #2
   16cb0:	dc05      	bgt.n	16cbe <SubscribeHandlerLedTopic+0x96>
   16cb2:	68fb      	ldr	r3, [r7, #12]
   16cb4:	781b      	ldrb	r3, [r3, #0]
   16cb6:	2b00      	cmp	r3, #0
   16cb8:	d1e2      	bne.n	16c80 <SubscribeHandlerLedTopic+0x58>
   16cba:	e000      	b.n	16cbe <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   16cbc:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   16cbe:	2310      	movs	r3, #16
   16cc0:	18fb      	adds	r3, r7, r3
   16cc2:	781b      	ldrb	r3, [r3, #0]
   16cc4:	001a      	movs	r2, r3
   16cc6:	2310      	movs	r3, #16
   16cc8:	18fb      	adds	r3, r7, r3
   16cca:	785b      	ldrb	r3, [r3, #1]
   16ccc:	0018      	movs	r0, r3
   16cce:	2310      	movs	r3, #16
   16cd0:	18fb      	adds	r3, r7, r3
   16cd2:	789b      	ldrb	r3, [r3, #2]
   16cd4:	490f      	ldr	r1, [pc, #60]	; (16d14 <SubscribeHandlerLedTopic+0xec>)
   16cd6:	9300      	str	r3, [sp, #0]
   16cd8:	0003      	movs	r3, r0
   16cda:	2001      	movs	r0, #1
   16cdc:	4c09      	ldr	r4, [pc, #36]	; (16d04 <SubscribeHandlerLedTopic+0xdc>)
   16cde:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   16ce0:	2310      	movs	r3, #16
   16ce2:	18fb      	adds	r3, r7, r3
   16ce4:	7818      	ldrb	r0, [r3, #0]
   16ce6:	2310      	movs	r3, #16
   16ce8:	18fb      	adds	r3, r7, r3
   16cea:	7859      	ldrb	r1, [r3, #1]
   16cec:	2310      	movs	r3, #16
   16cee:	18fb      	adds	r3, r7, r3
   16cf0:	789b      	ldrb	r3, [r3, #2]
   16cf2:	001a      	movs	r2, r3
   16cf4:	4b08      	ldr	r3, [pc, #32]	; (16d18 <SubscribeHandlerLedTopic+0xf0>)
   16cf6:	4798      	blx	r3
    }
}
   16cf8:	46c0      	nop			; (mov r8, r8)
   16cfa:	46bd      	mov	sp, r7
   16cfc:	b007      	add	sp, #28
   16cfe:	bd90      	pop	{r4, r7, pc}
   16d00:	00037190 	.word	0x00037190
   16d04:	0001e3a1 	.word	0x0001e3a1
   16d08:	00037198 	.word	0x00037198
   16d0c:	00035329 	.word	0x00035329
   16d10:	000354d5 	.word	0x000354d5
   16d14:	000371a0 	.word	0x000371a0
   16d18:	00015f91 	.word	0x00015f91

00016d1c <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   16d1c:	b590      	push	{r4, r7, lr}
   16d1e:	b08b      	sub	sp, #44	; 0x2c
   16d20:	af00      	add	r7, sp, #0
   16d22:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   16d24:	230c      	movs	r3, #12
   16d26:	18fb      	adds	r3, r7, r3
   16d28:	2214      	movs	r2, #20
   16d2a:	21ff      	movs	r1, #255	; 0xff
   16d2c:	0018      	movs	r0, r3
   16d2e:	4b48      	ldr	r3, [pc, #288]	; (16e50 <SubscribeHandlerGameTopic+0x134>)
   16d30:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   16d32:	687b      	ldr	r3, [r7, #4]
   16d34:	681b      	ldr	r3, [r3, #0]
   16d36:	689b      	ldr	r3, [r3, #8]
   16d38:	4946      	ldr	r1, [pc, #280]	; (16e54 <SubscribeHandlerGameTopic+0x138>)
   16d3a:	2209      	movs	r2, #9
   16d3c:	0018      	movs	r0, r3
   16d3e:	4b46      	ldr	r3, [pc, #280]	; (16e58 <SubscribeHandlerGameTopic+0x13c>)
   16d40:	4798      	blx	r3
   16d42:	1e03      	subs	r3, r0, #0
   16d44:	d166      	bne.n	16e14 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   16d46:	4b45      	ldr	r3, [pc, #276]	; (16e5c <SubscribeHandlerGameTopic+0x140>)
   16d48:	0019      	movs	r1, r3
   16d4a:	2001      	movs	r0, #1
   16d4c:	4b44      	ldr	r3, [pc, #272]	; (16e60 <SubscribeHandlerGameTopic+0x144>)
   16d4e:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16d50:	687b      	ldr	r3, [r7, #4]
   16d52:	685b      	ldr	r3, [r3, #4]
   16d54:	685a      	ldr	r2, [r3, #4]
   16d56:	687b      	ldr	r3, [r7, #4]
   16d58:	685b      	ldr	r3, [r3, #4]
   16d5a:	689b      	ldr	r3, [r3, #8]
   16d5c:	4941      	ldr	r1, [pc, #260]	; (16e64 <SubscribeHandlerGameTopic+0x148>)
   16d5e:	2001      	movs	r0, #1
   16d60:	4c3f      	ldr	r4, [pc, #252]	; (16e60 <SubscribeHandlerGameTopic+0x144>)
   16d62:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16d64:	687b      	ldr	r3, [r7, #4]
   16d66:	681b      	ldr	r3, [r3, #0]
   16d68:	68da      	ldr	r2, [r3, #12]
   16d6a:	687b      	ldr	r3, [r7, #4]
   16d6c:	681b      	ldr	r3, [r3, #0]
   16d6e:	689b      	ldr	r3, [r3, #8]
   16d70:	493d      	ldr	r1, [pc, #244]	; (16e68 <SubscribeHandlerGameTopic+0x14c>)
   16d72:	2001      	movs	r0, #1
   16d74:	4c3a      	ldr	r4, [pc, #232]	; (16e60 <SubscribeHandlerGameTopic+0x144>)
   16d76:	47a0      	blx	r4

        int nb = 0;
   16d78:	2300      	movs	r3, #0
   16d7a:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   16d7c:	687b      	ldr	r3, [r7, #4]
   16d7e:	681b      	ldr	r3, [r3, #0]
   16d80:	689b      	ldr	r3, [r3, #8]
   16d82:	3309      	adds	r3, #9
   16d84:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   16d86:	e015      	b.n	16db4 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   16d88:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   16d8a:	1c63      	adds	r3, r4, #1
   16d8c:	627b      	str	r3, [r7, #36]	; 0x24
   16d8e:	68bb      	ldr	r3, [r7, #8]
   16d90:	2208      	movs	r2, #8
   16d92:	18b9      	adds	r1, r7, r2
   16d94:	220a      	movs	r2, #10
   16d96:	0018      	movs	r0, r3
   16d98:	4b34      	ldr	r3, [pc, #208]	; (16e6c <SubscribeHandlerGameTopic+0x150>)
   16d9a:	4798      	blx	r3
   16d9c:	0003      	movs	r3, r0
   16d9e:	b2da      	uxtb	r2, r3
   16da0:	230c      	movs	r3, #12
   16da2:	18fb      	adds	r3, r7, r3
   16da4:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   16da6:	68bb      	ldr	r3, [r7, #8]
   16da8:	781b      	ldrb	r3, [r3, #0]
   16daa:	2b2c      	cmp	r3, #44	; 0x2c
   16dac:	d10a      	bne.n	16dc4 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   16dae:	68bb      	ldr	r3, [r7, #8]
   16db0:	3301      	adds	r3, #1
   16db2:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   16db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16db6:	2b13      	cmp	r3, #19
   16db8:	dc05      	bgt.n	16dc6 <SubscribeHandlerGameTopic+0xaa>
   16dba:	68bb      	ldr	r3, [r7, #8]
   16dbc:	781b      	ldrb	r3, [r3, #0]
   16dbe:	2b00      	cmp	r3, #0
   16dc0:	d1e2      	bne.n	16d88 <SubscribeHandlerGameTopic+0x6c>
   16dc2:	e000      	b.n	16dc6 <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   16dc4:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   16dc6:	4b2a      	ldr	r3, [pc, #168]	; (16e70 <SubscribeHandlerGameTopic+0x154>)
   16dc8:	0019      	movs	r1, r3
   16dca:	2001      	movs	r0, #1
   16dcc:	4b24      	ldr	r3, [pc, #144]	; (16e60 <SubscribeHandlerGameTopic+0x144>)
   16dce:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   16dd0:	2300      	movs	r3, #0
   16dd2:	623b      	str	r3, [r7, #32]
   16dd4:	e00d      	b.n	16df2 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   16dd6:	230c      	movs	r3, #12
   16dd8:	18fa      	adds	r2, r7, r3
   16dda:	6a3b      	ldr	r3, [r7, #32]
   16ddc:	18d3      	adds	r3, r2, r3
   16dde:	781b      	ldrb	r3, [r3, #0]
   16de0:	001a      	movs	r2, r3
   16de2:	4b24      	ldr	r3, [pc, #144]	; (16e74 <SubscribeHandlerGameTopic+0x158>)
   16de4:	0019      	movs	r1, r3
   16de6:	2001      	movs	r0, #1
   16de8:	4b1d      	ldr	r3, [pc, #116]	; (16e60 <SubscribeHandlerGameTopic+0x144>)
   16dea:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   16dec:	6a3b      	ldr	r3, [r7, #32]
   16dee:	3301      	adds	r3, #1
   16df0:	623b      	str	r3, [r7, #32]
   16df2:	6a3b      	ldr	r3, [r7, #32]
   16df4:	2b13      	cmp	r3, #19
   16df6:	ddee      	ble.n	16dd6 <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   16df8:	230c      	movs	r3, #12
   16dfa:	18fb      	adds	r3, r7, r3
   16dfc:	0018      	movs	r0, r3
   16dfe:	4b1e      	ldr	r3, [pc, #120]	; (16e78 <SubscribeHandlerGameTopic+0x15c>)
   16e00:	4798      	blx	r3
   16e02:	0003      	movs	r3, r0
   16e04:	2b01      	cmp	r3, #1
   16e06:	d11e      	bne.n	16e46 <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   16e08:	4b1c      	ldr	r3, [pc, #112]	; (16e7c <SubscribeHandlerGameTopic+0x160>)
   16e0a:	0019      	movs	r1, r3
   16e0c:	2001      	movs	r0, #1
   16e0e:	4b14      	ldr	r3, [pc, #80]	; (16e60 <SubscribeHandlerGameTopic+0x144>)
   16e10:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   16e12:	e018      	b.n	16e46 <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   16e14:	4b1a      	ldr	r3, [pc, #104]	; (16e80 <SubscribeHandlerGameTopic+0x164>)
   16e16:	0019      	movs	r1, r3
   16e18:	2001      	movs	r0, #1
   16e1a:	4b11      	ldr	r3, [pc, #68]	; (16e60 <SubscribeHandlerGameTopic+0x144>)
   16e1c:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16e1e:	687b      	ldr	r3, [r7, #4]
   16e20:	685b      	ldr	r3, [r3, #4]
   16e22:	685a      	ldr	r2, [r3, #4]
   16e24:	687b      	ldr	r3, [r7, #4]
   16e26:	685b      	ldr	r3, [r3, #4]
   16e28:	689b      	ldr	r3, [r3, #8]
   16e2a:	490e      	ldr	r1, [pc, #56]	; (16e64 <SubscribeHandlerGameTopic+0x148>)
   16e2c:	2001      	movs	r0, #1
   16e2e:	4c0c      	ldr	r4, [pc, #48]	; (16e60 <SubscribeHandlerGameTopic+0x144>)
   16e30:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16e32:	687b      	ldr	r3, [r7, #4]
   16e34:	681b      	ldr	r3, [r3, #0]
   16e36:	68da      	ldr	r2, [r3, #12]
   16e38:	687b      	ldr	r3, [r7, #4]
   16e3a:	681b      	ldr	r3, [r3, #0]
   16e3c:	689b      	ldr	r3, [r3, #8]
   16e3e:	490a      	ldr	r1, [pc, #40]	; (16e68 <SubscribeHandlerGameTopic+0x14c>)
   16e40:	2001      	movs	r0, #1
   16e42:	4c07      	ldr	r4, [pc, #28]	; (16e60 <SubscribeHandlerGameTopic+0x144>)
   16e44:	47a0      	blx	r4
}
   16e46:	46c0      	nop			; (mov r8, r8)
   16e48:	46bd      	mov	sp, r7
   16e4a:	b00b      	add	sp, #44	; 0x2c
   16e4c:	bd90      	pop	{r4, r7, pc}
   16e4e:	46c0      	nop			; (mov r8, r8)
   16e50:	00034f63 	.word	0x00034f63
   16e54:	000371b4 	.word	0x000371b4
   16e58:	00035329 	.word	0x00035329
   16e5c:	000371c0 	.word	0x000371c0
   16e60:	0001e3a1 	.word	0x0001e3a1
   16e64:	00037190 	.word	0x00037190
   16e68:	000371dc 	.word	0x000371dc
   16e6c:	000354d5 	.word	0x000354d5
   16e70:	000371e4 	.word	0x000371e4
   16e74:	000371f8 	.word	0x000371f8
   16e78:	00014239 	.word	0x00014239
   16e7c:	000371fc 	.word	0x000371fc
   16e80:	00037218 	.word	0x00037218

00016e84 <SubscribeHandler>:
{
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
}

void SubscribeHandler(MessageData *msgData)
{
   16e84:	b590      	push	{r4, r7, lr}
   16e86:	b083      	sub	sp, #12
   16e88:	af00      	add	r7, sp, #0
   16e8a:	6078      	str	r0, [r7, #4]
    /* You received publish message which you had subscribed. */
    /* Print Topic and message */
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16e8c:	687b      	ldr	r3, [r7, #4]
   16e8e:	685b      	ldr	r3, [r3, #4]
   16e90:	685a      	ldr	r2, [r3, #4]
   16e92:	687b      	ldr	r3, [r7, #4]
   16e94:	685b      	ldr	r3, [r3, #4]
   16e96:	689b      	ldr	r3, [r3, #8]
   16e98:	4921      	ldr	r1, [pc, #132]	; (16f20 <SubscribeHandler+0x9c>)
   16e9a:	2001      	movs	r0, #1
   16e9c:	4c21      	ldr	r4, [pc, #132]	; (16f24 <SubscribeHandler+0xa0>)
   16e9e:	47a0      	blx	r4
    LogMessage(LOG_DEBUG_LVL, " >> ");
   16ea0:	4b21      	ldr	r3, [pc, #132]	; (16f28 <SubscribeHandler+0xa4>)
   16ea2:	0019      	movs	r1, r3
   16ea4:	2001      	movs	r0, #1
   16ea6:	4b1f      	ldr	r3, [pc, #124]	; (16f24 <SubscribeHandler+0xa0>)
   16ea8:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16eaa:	687b      	ldr	r3, [r7, #4]
   16eac:	681b      	ldr	r3, [r3, #0]
   16eae:	68da      	ldr	r2, [r3, #12]
   16eb0:	687b      	ldr	r3, [r7, #4]
   16eb2:	681b      	ldr	r3, [r3, #0]
   16eb4:	689b      	ldr	r3, [r3, #8]
   16eb6:	491d      	ldr	r1, [pc, #116]	; (16f2c <SubscribeHandler+0xa8>)
   16eb8:	2001      	movs	r0, #1
   16eba:	4c1a      	ldr	r4, [pc, #104]	; (16f24 <SubscribeHandler+0xa0>)
   16ebc:	47a0      	blx	r4

    // Handle LedData message
    if (strncmp((char *)msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0) {
   16ebe:	687b      	ldr	r3, [r7, #4]
   16ec0:	685b      	ldr	r3, [r3, #4]
   16ec2:	6898      	ldr	r0, [r3, #8]
   16ec4:	687b      	ldr	r3, [r7, #4]
   16ec6:	681b      	ldr	r3, [r3, #0]
   16ec8:	68da      	ldr	r2, [r3, #12]
   16eca:	4b19      	ldr	r3, [pc, #100]	; (16f30 <SubscribeHandler+0xac>)
   16ecc:	0019      	movs	r1, r3
   16ece:	4b19      	ldr	r3, [pc, #100]	; (16f34 <SubscribeHandler+0xb0>)
   16ed0:	4798      	blx	r3
   16ed2:	1e03      	subs	r3, r0, #0
   16ed4:	d120      	bne.n	16f18 <SubscribeHandler+0x94>
        if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
   16ed6:	687b      	ldr	r3, [r7, #4]
   16ed8:	681b      	ldr	r3, [r3, #0]
   16eda:	6898      	ldr	r0, [r3, #8]
   16edc:	687b      	ldr	r3, [r7, #4]
   16ede:	681b      	ldr	r3, [r3, #0]
   16ee0:	68da      	ldr	r2, [r3, #12]
   16ee2:	4b15      	ldr	r3, [pc, #84]	; (16f38 <SubscribeHandler+0xb4>)
   16ee4:	0019      	movs	r1, r3
   16ee6:	4b13      	ldr	r3, [pc, #76]	; (16f34 <SubscribeHandler+0xb0>)
   16ee8:	4798      	blx	r3
   16eea:	1e03      	subs	r3, r0, #0
   16eec:	d104      	bne.n	16ef8 <SubscribeHandler+0x74>
            port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   16eee:	2101      	movs	r1, #1
   16ef0:	2017      	movs	r0, #23
   16ef2:	4b12      	ldr	r3, [pc, #72]	; (16f3c <SubscribeHandler+0xb8>)
   16ef4:	4798      	blx	r3
        } else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
            port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
        }
    }
}
   16ef6:	e00f      	b.n	16f18 <SubscribeHandler+0x94>
        } else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
   16ef8:	687b      	ldr	r3, [r7, #4]
   16efa:	681b      	ldr	r3, [r3, #0]
   16efc:	6898      	ldr	r0, [r3, #8]
   16efe:	687b      	ldr	r3, [r7, #4]
   16f00:	681b      	ldr	r3, [r3, #0]
   16f02:	68da      	ldr	r2, [r3, #12]
   16f04:	4b0e      	ldr	r3, [pc, #56]	; (16f40 <SubscribeHandler+0xbc>)
   16f06:	0019      	movs	r1, r3
   16f08:	4b0a      	ldr	r3, [pc, #40]	; (16f34 <SubscribeHandler+0xb0>)
   16f0a:	4798      	blx	r3
   16f0c:	1e03      	subs	r3, r0, #0
   16f0e:	d103      	bne.n	16f18 <SubscribeHandler+0x94>
            port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
   16f10:	2100      	movs	r1, #0
   16f12:	2017      	movs	r0, #23
   16f14:	4b09      	ldr	r3, [pc, #36]	; (16f3c <SubscribeHandler+0xb8>)
   16f16:	4798      	blx	r3
}
   16f18:	46c0      	nop			; (mov r8, r8)
   16f1a:	46bd      	mov	sp, r7
   16f1c:	b003      	add	sp, #12
   16f1e:	bd90      	pop	{r4, r7, pc}
   16f20:	00037190 	.word	0x00037190
   16f24:	0001e3a1 	.word	0x0001e3a1
   16f28:	00037248 	.word	0x00037248
   16f2c:	000371dc 	.word	0x000371dc
   16f30:	00037250 	.word	0x00037250
   16f34:	00035329 	.word	0x00035329
   16f38:	00037264 	.word	0x00037264
   16f3c:	00016091 	.word	0x00016091
   16f40:	0003726c 	.word	0x0003726c

00016f44 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   16f44:	b590      	push	{r4, r7, lr}
   16f46:	b08b      	sub	sp, #44	; 0x2c
   16f48:	af06      	add	r7, sp, #24
   16f4a:	60f8      	str	r0, [r7, #12]
   16f4c:	60b9      	str	r1, [r7, #8]
   16f4e:	607a      	str	r2, [r7, #4]
    switch (type) {
   16f50:	68bb      	ldr	r3, [r7, #8]
   16f52:	2b01      	cmp	r3, #1
   16f54:	d03b      	beq.n	16fce <mqtt_callback+0x8a>
   16f56:	2b05      	cmp	r3, #5
   16f58:	d05e      	beq.n	17018 <mqtt_callback+0xd4>
   16f5a:	2b00      	cmp	r3, #0
   16f5c:	d000      	beq.n	16f60 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   16f5e:	e061      	b.n	17024 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   16f60:	687b      	ldr	r3, [r7, #4]
   16f62:	681b      	ldr	r3, [r3, #0]
   16f64:	2b00      	cmp	r3, #0
   16f66:	db25      	blt.n	16fb4 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   16f68:	4b30      	ldr	r3, [pc, #192]	; (1702c <mqtt_callback+0xe8>)
   16f6a:	0019      	movs	r1, r3
   16f6c:	2001      	movs	r0, #1
   16f6e:	4b30      	ldr	r3, [pc, #192]	; (17030 <mqtt_callback+0xec>)
   16f70:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   16f72:	4930      	ldr	r1, [pc, #192]	; (17034 <mqtt_callback+0xf0>)
   16f74:	4a30      	ldr	r2, [pc, #192]	; (17038 <mqtt_callback+0xf4>)
   16f76:	68f8      	ldr	r0, [r7, #12]
   16f78:	2300      	movs	r3, #0
   16f7a:	9305      	str	r3, [sp, #20]
   16f7c:	2300      	movs	r3, #0
   16f7e:	9304      	str	r3, [sp, #16]
   16f80:	2300      	movs	r3, #0
   16f82:	9303      	str	r3, [sp, #12]
   16f84:	2300      	movs	r3, #0
   16f86:	9302      	str	r3, [sp, #8]
   16f88:	2300      	movs	r3, #0
   16f8a:	9301      	str	r3, [sp, #4]
   16f8c:	4b2a      	ldr	r3, [pc, #168]	; (17038 <mqtt_callback+0xf4>)
   16f8e:	9300      	str	r3, [sp, #0]
   16f90:	000b      	movs	r3, r1
   16f92:	2101      	movs	r1, #1
   16f94:	4c29      	ldr	r4, [pc, #164]	; (1703c <mqtt_callback+0xf8>)
   16f96:	47a0      	blx	r4
   16f98:	1e03      	subs	r3, r0, #0
   16f9a:	d005      	beq.n	16fa8 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   16f9c:	4b28      	ldr	r3, [pc, #160]	; (17040 <mqtt_callback+0xfc>)
   16f9e:	0019      	movs	r1, r3
   16fa0:	2001      	movs	r0, #1
   16fa2:	4b23      	ldr	r3, [pc, #140]	; (17030 <mqtt_callback+0xec>)
   16fa4:	4798      	blx	r3
        } break;
   16fa6:	e03d      	b.n	17024 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   16fa8:	4b26      	ldr	r3, [pc, #152]	; (17044 <mqtt_callback+0x100>)
   16faa:	0019      	movs	r1, r3
   16fac:	2001      	movs	r0, #1
   16fae:	4b20      	ldr	r3, [pc, #128]	; (17030 <mqtt_callback+0xec>)
   16fb0:	4798      	blx	r3
        } break;
   16fb2:	e037      	b.n	17024 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   16fb4:	4a24      	ldr	r2, [pc, #144]	; (17048 <mqtt_callback+0x104>)
   16fb6:	4b25      	ldr	r3, [pc, #148]	; (1704c <mqtt_callback+0x108>)
   16fb8:	0019      	movs	r1, r3
   16fba:	2001      	movs	r0, #1
   16fbc:	4b1c      	ldr	r3, [pc, #112]	; (17030 <mqtt_callback+0xec>)
   16fbe:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   16fc0:	4a21      	ldr	r2, [pc, #132]	; (17048 <mqtt_callback+0x104>)
   16fc2:	68fb      	ldr	r3, [r7, #12]
   16fc4:	0011      	movs	r1, r2
   16fc6:	0018      	movs	r0, r3
   16fc8:	4b21      	ldr	r3, [pc, #132]	; (17050 <mqtt_callback+0x10c>)
   16fca:	4798      	blx	r3
        } break;
   16fcc:	e02a      	b.n	17024 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   16fce:	687b      	ldr	r3, [r7, #4]
   16fd0:	781b      	ldrb	r3, [r3, #0]
   16fd2:	2b00      	cmp	r3, #0
   16fd4:	d117      	bne.n	17006 <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   16fd6:	4b1f      	ldr	r3, [pc, #124]	; (17054 <mqtt_callback+0x110>)
   16fd8:	491f      	ldr	r1, [pc, #124]	; (17058 <mqtt_callback+0x114>)
   16fda:	68f8      	ldr	r0, [r7, #12]
   16fdc:	2202      	movs	r2, #2
   16fde:	4c1f      	ldr	r4, [pc, #124]	; (1705c <mqtt_callback+0x118>)
   16fe0:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   16fe2:	4b1f      	ldr	r3, [pc, #124]	; (17060 <mqtt_callback+0x11c>)
   16fe4:	491f      	ldr	r1, [pc, #124]	; (17064 <mqtt_callback+0x120>)
   16fe6:	68f8      	ldr	r0, [r7, #12]
   16fe8:	2202      	movs	r2, #2
   16fea:	4c1c      	ldr	r4, [pc, #112]	; (1705c <mqtt_callback+0x118>)
   16fec:	47a0      	blx	r4
				mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandler);
   16fee:	4b1e      	ldr	r3, [pc, #120]	; (17068 <mqtt_callback+0x124>)
   16ff0:	491c      	ldr	r1, [pc, #112]	; (17064 <mqtt_callback+0x120>)
   16ff2:	68f8      	ldr	r0, [r7, #12]
   16ff4:	2202      	movs	r2, #2
   16ff6:	4c19      	ldr	r4, [pc, #100]	; (1705c <mqtt_callback+0x118>)
   16ff8:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   16ffa:	4b1c      	ldr	r3, [pc, #112]	; (1706c <mqtt_callback+0x128>)
   16ffc:	0019      	movs	r1, r3
   16ffe:	2001      	movs	r0, #1
   17000:	4b0b      	ldr	r3, [pc, #44]	; (17030 <mqtt_callback+0xec>)
   17002:	4798      	blx	r3
            break;
   17004:	e00e      	b.n	17024 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   17006:	687b      	ldr	r3, [r7, #4]
   17008:	781b      	ldrb	r3, [r3, #0]
   1700a:	001a      	movs	r2, r3
   1700c:	4b18      	ldr	r3, [pc, #96]	; (17070 <mqtt_callback+0x12c>)
   1700e:	0019      	movs	r1, r3
   17010:	2001      	movs	r0, #1
   17012:	4b07      	ldr	r3, [pc, #28]	; (17030 <mqtt_callback+0xec>)
   17014:	4798      	blx	r3
            break;
   17016:	e005      	b.n	17024 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   17018:	4b16      	ldr	r3, [pc, #88]	; (17074 <mqtt_callback+0x130>)
   1701a:	0019      	movs	r1, r3
   1701c:	2001      	movs	r0, #1
   1701e:	4b04      	ldr	r3, [pc, #16]	; (17030 <mqtt_callback+0xec>)
   17020:	4798      	blx	r3
            break;
   17022:	46c0      	nop			; (mov r8, r8)
}
   17024:	46c0      	nop			; (mov r8, r8)
   17026:	46bd      	mov	sp, r7
   17028:	b005      	add	sp, #20
   1702a:	bd90      	pop	{r4, r7, pc}
   1702c:	00037274 	.word	0x00037274
   17030:	0001e3a1 	.word	0x0001e3a1
   17034:	00037290 	.word	0x00037290
   17038:	000372a0 	.word	0x000372a0
   1703c:	0002fdd5 	.word	0x0002fdd5
   17040:	000372ac 	.word	0x000372ac
   17044:	000372d4 	.word	0x000372d4
   17048:	00036c18 	.word	0x00036c18
   1704c:	000372f0 	.word	0x000372f0
   17050:	0002fd8d 	.word	0x0002fd8d
   17054:	00016d1d 	.word	0x00016d1d
   17058:	00037328 	.word	0x00037328
   1705c:	0002ff75 	.word	0x0002ff75
   17060:	00016c29 	.word	0x00016c29
   17064:	00037250 	.word	0x00037250
   17068:	00016e85 	.word	0x00016e85
   1706c:	0003733c 	.word	0x0003733c
   17070:	00037350 	.word	0x00037350
   17074:	00037384 	.word	0x00037384

00017078 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   17078:	b580      	push	{r7, lr}
   1707a:	b088      	sub	sp, #32
   1707c:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   1707e:	1d3b      	adds	r3, r7, #4
   17080:	0018      	movs	r0, r3
   17082:	4b1f      	ldr	r3, [pc, #124]	; (17100 <configure_mqtt+0x88>)
   17084:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   17086:	1d3b      	adds	r3, r7, #4
   17088:	4a1e      	ldr	r2, [pc, #120]	; (17104 <configure_mqtt+0x8c>)
   1708a:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1708c:	1d3b      	adds	r3, r7, #4
   1708e:	2280      	movs	r2, #128	; 0x80
   17090:	0092      	lsls	r2, r2, #2
   17092:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   17094:	1d3b      	adds	r3, r7, #4
   17096:	4a1c      	ldr	r2, [pc, #112]	; (17108 <configure_mqtt+0x90>)
   17098:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1709a:	1d3b      	adds	r3, r7, #4
   1709c:	2280      	movs	r2, #128	; 0x80
   1709e:	0092      	lsls	r2, r2, #2
   170a0:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   170a2:	1d3b      	adds	r3, r7, #4
   170a4:	4a19      	ldr	r2, [pc, #100]	; (1710c <configure_mqtt+0x94>)
   170a6:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   170a8:	1d3b      	adds	r3, r7, #4
   170aa:	4a19      	ldr	r2, [pc, #100]	; (17110 <configure_mqtt+0x98>)
   170ac:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   170ae:	1d3a      	adds	r2, r7, #4
   170b0:	4b18      	ldr	r3, [pc, #96]	; (17114 <configure_mqtt+0x9c>)
   170b2:	0011      	movs	r1, r2
   170b4:	0018      	movs	r0, r3
   170b6:	4b18      	ldr	r3, [pc, #96]	; (17118 <configure_mqtt+0xa0>)
   170b8:	4798      	blx	r3
   170ba:	0003      	movs	r3, r0
   170bc:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   170be:	69fb      	ldr	r3, [r7, #28]
   170c0:	2b00      	cmp	r3, #0
   170c2:	da06      	bge.n	170d2 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   170c4:	69fa      	ldr	r2, [r7, #28]
   170c6:	4b15      	ldr	r3, [pc, #84]	; (1711c <configure_mqtt+0xa4>)
   170c8:	0019      	movs	r1, r3
   170ca:	2001      	movs	r0, #1
   170cc:	4b14      	ldr	r3, [pc, #80]	; (17120 <configure_mqtt+0xa8>)
   170ce:	4798      	blx	r3
        while (1) {
   170d0:	e7fe      	b.n	170d0 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   170d2:	4a14      	ldr	r2, [pc, #80]	; (17124 <configure_mqtt+0xac>)
   170d4:	4b0f      	ldr	r3, [pc, #60]	; (17114 <configure_mqtt+0x9c>)
   170d6:	0011      	movs	r1, r2
   170d8:	0018      	movs	r0, r3
   170da:	4b13      	ldr	r3, [pc, #76]	; (17128 <configure_mqtt+0xb0>)
   170dc:	4798      	blx	r3
   170de:	0003      	movs	r3, r0
   170e0:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   170e2:	69fb      	ldr	r3, [r7, #28]
   170e4:	2b00      	cmp	r3, #0
   170e6:	da06      	bge.n	170f6 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   170e8:	69fa      	ldr	r2, [r7, #28]
   170ea:	4b10      	ldr	r3, [pc, #64]	; (1712c <configure_mqtt+0xb4>)
   170ec:	0019      	movs	r1, r3
   170ee:	2001      	movs	r0, #1
   170f0:	4b0b      	ldr	r3, [pc, #44]	; (17120 <configure_mqtt+0xa8>)
   170f2:	4798      	blx	r3
        while (1) {
   170f4:	e7fe      	b.n	170f4 <configure_mqtt+0x7c>
        }
    }
}
   170f6:	46c0      	nop			; (mov r8, r8)
   170f8:	46bd      	mov	sp, r7
   170fa:	b008      	add	sp, #32
   170fc:	bd80      	pop	{r7, pc}
   170fe:	46c0      	nop			; (mov r8, r8)
   17100:	0002fccd 	.word	0x0002fccd
   17104:	200008d0 	.word	0x200008d0
   17108:	20000ad0 	.word	0x20000ad0
   1710c:	0000075b 	.word	0x0000075b
   17110:	00001770 	.word	0x00001770
   17114:	20000898 	.word	0x20000898
   17118:	0002fc1d 	.word	0x0002fc1d
   1711c:	00037398 	.word	0x00037398
   17120:	0001e3a1 	.word	0x0001e3a1
   17124:	00016f45 	.word	0x00016f45
   17128:	0002fd0d 	.word	0x0002fd0d
   1712c:	000373cc 	.word	0x000373cc

00017130 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   17130:	b580      	push	{r7, lr}
   17132:	b084      	sub	sp, #16
   17134:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   17136:	1d3b      	adds	r3, r7, #4
   17138:	0018      	movs	r0, r3
   1713a:	4b0b      	ldr	r3, [pc, #44]	; (17168 <configure_extint_channel+0x38>)
   1713c:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   1713e:	1d3b      	adds	r3, r7, #4
   17140:	2237      	movs	r2, #55	; 0x37
   17142:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   17144:	1d3b      	adds	r3, r7, #4
   17146:	2200      	movs	r2, #0
   17148:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1714a:	1d3b      	adds	r3, r7, #4
   1714c:	2201      	movs	r2, #1
   1714e:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   17150:	1d3b      	adds	r3, r7, #4
   17152:	2202      	movs	r2, #2
   17154:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   17156:	1d3b      	adds	r3, r7, #4
   17158:	0019      	movs	r1, r3
   1715a:	2007      	movs	r0, #7
   1715c:	4b03      	ldr	r3, [pc, #12]	; (1716c <configure_extint_channel+0x3c>)
   1715e:	4798      	blx	r3
}
   17160:	46c0      	nop			; (mov r8, r8)
   17162:	46bd      	mov	sp, r7
   17164:	b004      	add	sp, #16
   17166:	bd80      	pop	{r7, pc}
   17168:	00026e05 	.word	0x00026e05
   1716c:	00026e39 	.word	0x00026e39

00017170 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   17170:	b580      	push	{r7, lr}
   17172:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17174:	4b06      	ldr	r3, [pc, #24]	; (17190 <configure_extint_callbacks+0x20>)
   17176:	2200      	movs	r2, #0
   17178:	2107      	movs	r1, #7
   1717a:	0018      	movs	r0, r3
   1717c:	4b05      	ldr	r3, [pc, #20]	; (17194 <configure_extint_callbacks+0x24>)
   1717e:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17180:	2100      	movs	r1, #0
   17182:	2007      	movs	r0, #7
   17184:	4b04      	ldr	r3, [pc, #16]	; (17198 <configure_extint_callbacks+0x28>)
   17186:	4798      	blx	r3
}
   17188:	46c0      	nop			; (mov r8, r8)
   1718a:	46bd      	mov	sp, r7
   1718c:	bd80      	pop	{r7, pc}
   1718e:	46c0      	nop			; (mov r8, r8)
   17190:	0001719d 	.word	0x0001719d
   17194:	00026a05 	.word	0x00026a05
   17198:	00026a69 	.word	0x00026a69

0001719c <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   1719c:	b5b0      	push	{r4, r5, r7, lr}
   1719e:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   171a0:	4b0c      	ldr	r3, [pc, #48]	; (171d4 <extint_detection_callback+0x38>)
   171a2:	681b      	ldr	r3, [r3, #0]
   171a4:	1c5a      	adds	r2, r3, #1
   171a6:	4b0b      	ldr	r3, [pc, #44]	; (171d4 <extint_detection_callback+0x38>)
   171a8:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   171aa:	4b0a      	ldr	r3, [pc, #40]	; (171d4 <extint_detection_callback+0x38>)
   171ac:	681b      	ldr	r3, [r3, #0]
   171ae:	2b28      	cmp	r3, #40	; 0x28
   171b0:	d902      	bls.n	171b8 <extint_detection_callback+0x1c>
   171b2:	4b08      	ldr	r3, [pc, #32]	; (171d4 <extint_detection_callback+0x38>)
   171b4:	2201      	movs	r2, #1
   171b6:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   171b8:	4b06      	ldr	r3, [pc, #24]	; (171d4 <extint_detection_callback+0x38>)
   171ba:	681b      	ldr	r3, [r3, #0]
   171bc:	4a06      	ldr	r2, [pc, #24]	; (171d8 <extint_detection_callback+0x3c>)
   171be:	4807      	ldr	r0, [pc, #28]	; (171dc <extint_detection_callback+0x40>)
   171c0:	213f      	movs	r1, #63	; 0x3f
   171c2:	4c07      	ldr	r4, [pc, #28]	; (171e0 <extint_detection_callback+0x44>)
   171c4:	47a0      	blx	r4
    isPressed = true;
   171c6:	4b07      	ldr	r3, [pc, #28]	; (171e4 <extint_detection_callback+0x48>)
   171c8:	2201      	movs	r2, #1
   171ca:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   171cc:	46c0      	nop			; (mov r8, r8)
   171ce:	46bd      	mov	sp, r7
   171d0:	bdb0      	pop	{r4, r5, r7, pc}
   171d2:	46c0      	nop			; (mov r8, r8)
   171d4:	200000b0 	.word	0x200000b0
   171d8:	00037400 	.word	0x00037400
   171dc:	20000070 	.word	0x20000070
   171e0:	000351bd 	.word	0x000351bd
   171e4:	20000cd0 	.word	0x20000cd0

000171e8 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   171e8:	b580      	push	{r7, lr}
   171ea:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   171ec:	4a15      	ldr	r2, [pc, #84]	; (17244 <HTTP_DownloadFileInit+0x5c>)
   171ee:	4b16      	ldr	r3, [pc, #88]	; (17248 <HTTP_DownloadFileInit+0x60>)
   171f0:	0011      	movs	r1, r2
   171f2:	0018      	movs	r0, r3
   171f4:	4b15      	ldr	r3, [pc, #84]	; (1724c <HTTP_DownloadFileInit+0x64>)
   171f6:	4798      	blx	r3
   171f8:	1e03      	subs	r3, r0, #0
   171fa:	d008      	beq.n	1720e <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   171fc:	4b14      	ldr	r3, [pc, #80]	; (17250 <HTTP_DownloadFileInit+0x68>)
   171fe:	0019      	movs	r1, r3
   17200:	2001      	movs	r0, #1
   17202:	4b14      	ldr	r3, [pc, #80]	; (17254 <HTTP_DownloadFileInit+0x6c>)
   17204:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   17206:	e002      	b.n	1720e <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   17208:	2000      	movs	r0, #0
   1720a:	4b13      	ldr	r3, [pc, #76]	; (17258 <HTTP_DownloadFileInit+0x70>)
   1720c:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   1720e:	4b0e      	ldr	r3, [pc, #56]	; (17248 <HTTP_DownloadFileInit+0x60>)
   17210:	2234      	movs	r2, #52	; 0x34
   17212:	5c9b      	ldrb	r3, [r3, r2]
   17214:	2b00      	cmp	r3, #0
   17216:	d1f7      	bne.n	17208 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   17218:	4b10      	ldr	r3, [pc, #64]	; (1725c <HTTP_DownloadFileInit+0x74>)
   1721a:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   1721c:	4b10      	ldr	r3, [pc, #64]	; (17260 <HTTP_DownloadFileInit+0x78>)
   1721e:	2201      	movs	r2, #1
   17220:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   17222:	4a10      	ldr	r2, [pc, #64]	; (17264 <HTTP_DownloadFileInit+0x7c>)
   17224:	4b10      	ldr	r3, [pc, #64]	; (17268 <HTTP_DownloadFileInit+0x80>)
   17226:	0011      	movs	r1, r2
   17228:	0018      	movs	r0, r3
   1722a:	4b10      	ldr	r3, [pc, #64]	; (1726c <HTTP_DownloadFileInit+0x84>)
   1722c:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   1722e:	4b10      	ldr	r3, [pc, #64]	; (17270 <HTTP_DownloadFileInit+0x88>)
   17230:	4798      	blx	r3

    start_download();
   17232:	4b10      	ldr	r3, [pc, #64]	; (17274 <HTTP_DownloadFileInit+0x8c>)
   17234:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   17236:	4b10      	ldr	r3, [pc, #64]	; (17278 <HTTP_DownloadFileInit+0x90>)
   17238:	2203      	movs	r2, #3
   1723a:	701a      	strb	r2, [r3, #0]
}
   1723c:	46c0      	nop			; (mov r8, r8)
   1723e:	46bd      	mov	sp, r7
   17240:	bd80      	pop	{r7, pc}
   17242:	46c0      	nop			; (mov r8, r8)
   17244:	00036c18 	.word	0x00036c18
   17248:	20000898 	.word	0x20000898
   1724c:	0002fec1 	.word	0x0002fec1
   17250:	00037018 	.word	0x00037018
   17254:	0001e3a1 	.word	0x0001e3a1
   17258:	000224f5 	.word	0x000224f5
   1725c:	00025ab1 	.word	0x00025ab1
   17260:	20000638 	.word	0x20000638
   17264:	00016889 	.word	0x00016889
   17268:	00016855 	.word	0x00016855
   1726c:	00025af9 	.word	0x00025af9
   17270:	00025a61 	.word	0x00025a61
   17274:	0001647d 	.word	0x0001647d
   17278:	20000622 	.word	0x20000622

0001727c <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   1727c:	b590      	push	{r4, r7, lr}
   1727e:	b085      	sub	sp, #20
   17280:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17282:	e009      	b.n	17298 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17284:	2000      	movs	r0, #0
   17286:	4b30      	ldr	r3, [pc, #192]	; (17348 <HTTP_DownloadFileTransaction+0xcc>)
   17288:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   1728a:	4b30      	ldr	r3, [pc, #192]	; (1734c <HTTP_DownloadFileTransaction+0xd0>)
   1728c:	0018      	movs	r0, r3
   1728e:	4b30      	ldr	r3, [pc, #192]	; (17350 <HTTP_DownloadFileTransaction+0xd4>)
   17290:	4798      	blx	r3
        vTaskDelay(5);
   17292:	2005      	movs	r0, #5
   17294:	4b2f      	ldr	r3, [pc, #188]	; (17354 <HTTP_DownloadFileTransaction+0xd8>)
   17296:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17298:	2010      	movs	r0, #16
   1729a:	4b2f      	ldr	r3, [pc, #188]	; (17358 <HTTP_DownloadFileTransaction+0xdc>)
   1729c:	4798      	blx	r3
   1729e:	0003      	movs	r3, r0
   172a0:	001a      	movs	r2, r3
   172a2:	2301      	movs	r3, #1
   172a4:	4053      	eors	r3, r2
   172a6:	b2db      	uxtb	r3, r3
   172a8:	2b00      	cmp	r3, #0
   172aa:	d009      	beq.n	172c0 <HTTP_DownloadFileTransaction+0x44>
   172ac:	2020      	movs	r0, #32
   172ae:	4b2a      	ldr	r3, [pc, #168]	; (17358 <HTTP_DownloadFileTransaction+0xdc>)
   172b0:	4798      	blx	r3
   172b2:	0003      	movs	r3, r0
   172b4:	001a      	movs	r2, r3
   172b6:	2301      	movs	r3, #1
   172b8:	4053      	eors	r3, r2
   172ba:	b2db      	uxtb	r3, r3
   172bc:	2b00      	cmp	r3, #0
   172be:	d1e1      	bne.n	17284 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   172c0:	4b26      	ldr	r3, [pc, #152]	; (1735c <HTTP_DownloadFileTransaction+0xe0>)
   172c2:	4798      	blx	r3
    vTaskDelay(1000);
   172c4:	23fa      	movs	r3, #250	; 0xfa
   172c6:	009b      	lsls	r3, r3, #2
   172c8:	0018      	movs	r0, r3
   172ca:	4b22      	ldr	r3, [pc, #136]	; (17354 <HTTP_DownloadFileTransaction+0xd8>)
   172cc:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   172ce:	4b24      	ldr	r3, [pc, #144]	; (17360 <HTTP_DownloadFileTransaction+0xe4>)
   172d0:	2200      	movs	r2, #0
   172d2:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   172d4:	003b      	movs	r3, r7
   172d6:	4a23      	ldr	r2, [pc, #140]	; (17364 <HTTP_DownloadFileTransaction+0xe8>)
   172d8:	ca13      	ldmia	r2!, {r0, r1, r4}
   172da:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   172dc:	003b      	movs	r3, r7
   172de:	2230      	movs	r2, #48	; 0x30
   172e0:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   172e2:	230f      	movs	r3, #15
   172e4:	18fc      	adds	r4, r7, r3
   172e6:	0039      	movs	r1, r7
   172e8:	4b1f      	ldr	r3, [pc, #124]	; (17368 <HTTP_DownloadFileTransaction+0xec>)
   172ea:	220a      	movs	r2, #10
   172ec:	0018      	movs	r0, r3
   172ee:	4b1f      	ldr	r3, [pc, #124]	; (1736c <HTTP_DownloadFileTransaction+0xf0>)
   172f0:	4798      	blx	r3
   172f2:	0003      	movs	r3, r0
   172f4:	7023      	strb	r3, [r4, #0]
    res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   172f6:	230f      	movs	r3, #15
   172f8:	18fc      	adds	r4, r7, r3
   172fa:	0039      	movs	r1, r7
   172fc:	4b1a      	ldr	r3, [pc, #104]	; (17368 <HTTP_DownloadFileTransaction+0xec>)
   172fe:	220a      	movs	r2, #10
   17300:	0018      	movs	r0, r3
   17302:	4b1a      	ldr	r3, [pc, #104]	; (1736c <HTTP_DownloadFileTransaction+0xf0>)
   17304:	4798      	blx	r3
   17306:	0003      	movs	r3, r0
   17308:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   1730a:	230f      	movs	r3, #15
   1730c:	18fb      	adds	r3, r7, r3
   1730e:	781b      	ldrb	r3, [r3, #0]
   17310:	2b00      	cmp	r3, #0
   17312:	d008      	beq.n	17326 <HTTP_DownloadFileTransaction+0xaa>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   17314:	230f      	movs	r3, #15
   17316:	18fb      	adds	r3, r7, r3
   17318:	781a      	ldrb	r2, [r3, #0]
   1731a:	4b15      	ldr	r3, [pc, #84]	; (17370 <HTTP_DownloadFileTransaction+0xf4>)
   1731c:	0019      	movs	r1, r3
   1731e:	2000      	movs	r0, #0
   17320:	4b14      	ldr	r3, [pc, #80]	; (17374 <HTTP_DownloadFileTransaction+0xf8>)
   17322:	4798      	blx	r3
   17324:	e003      	b.n	1732e <HTTP_DownloadFileTransaction+0xb2>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   17326:	4b14      	ldr	r3, [pc, #80]	; (17378 <HTTP_DownloadFileTransaction+0xfc>)
   17328:	0018      	movs	r0, r3
   1732a:	4b14      	ldr	r3, [pc, #80]	; (1737c <HTTP_DownloadFileTransaction+0x100>)
   1732c:	4798      	blx	r3
    }
    delay_ms(100);
   1732e:	2064      	movs	r0, #100	; 0x64
   17330:	4b13      	ldr	r3, [pc, #76]	; (17380 <HTTP_DownloadFileTransaction+0x104>)
   17332:	4798      	blx	r3
    system_reset();
   17334:	4b13      	ldr	r3, [pc, #76]	; (17384 <HTTP_DownloadFileTransaction+0x108>)
   17336:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   17338:	4b13      	ldr	r3, [pc, #76]	; (17388 <HTTP_DownloadFileTransaction+0x10c>)
   1733a:	2200      	movs	r2, #0
   1733c:	701a      	strb	r2, [r3, #0]
}
   1733e:	46c0      	nop			; (mov r8, r8)
   17340:	46bd      	mov	sp, r7
   17342:	b005      	add	sp, #20
   17344:	bd90      	pop	{r4, r7, pc}
   17346:	46c0      	nop			; (mov r8, r8)
   17348:	000224f5 	.word	0x000224f5
   1734c:	200048b0 	.word	0x200048b0
   17350:	00032be9 	.word	0x00032be9
   17354:	0001c661 	.word	0x0001c661
   17358:	00016155 	.word	0x00016155
   1735c:	00025ab1 	.word	0x00025ab1
   17360:	20000638 	.word	0x20000638
   17364:	00037438 	.word	0x00037438
   17368:	2000086c 	.word	0x2000086c
   1736c:	0002deb1 	.word	0x0002deb1
   17370:	00037414 	.word	0x00037414
   17374:	0001e3a1 	.word	0x0001e3a1
   17378:	00037424 	.word	0x00037424
   1737c:	0001e2b5 	.word	0x0001e2b5
   17380:	0002066d 	.word	0x0002066d
   17384:	00016059 	.word	0x00016059
   17388:	20000622 	.word	0x20000622

0001738c <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   1738c:	b580      	push	{r7, lr}
   1738e:	af00      	add	r7, sp, #0
    socketDeinit();
   17390:	4b18      	ldr	r3, [pc, #96]	; (173f4 <MQTT_InitRoutine+0x68>)
   17392:	4798      	blx	r3
    configure_mqtt();
   17394:	4b18      	ldr	r3, [pc, #96]	; (173f8 <MQTT_InitRoutine+0x6c>)
   17396:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17398:	4a18      	ldr	r2, [pc, #96]	; (173fc <MQTT_InitRoutine+0x70>)
   1739a:	4b19      	ldr	r3, [pc, #100]	; (17400 <MQTT_InitRoutine+0x74>)
   1739c:	0011      	movs	r1, r2
   1739e:	0018      	movs	r0, r3
   173a0:	4b18      	ldr	r3, [pc, #96]	; (17404 <MQTT_InitRoutine+0x78>)
   173a2:	4798      	blx	r3
    socketInit();
   173a4:	4b18      	ldr	r3, [pc, #96]	; (17408 <MQTT_InitRoutine+0x7c>)
   173a6:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   173a8:	4b18      	ldr	r3, [pc, #96]	; (1740c <MQTT_InitRoutine+0x80>)
   173aa:	2234      	movs	r2, #52	; 0x34
   173ac:	5c9b      	ldrb	r3, [r3, r2]
   173ae:	2201      	movs	r2, #1
   173b0:	4053      	eors	r3, r2
   173b2:	b2db      	uxtb	r3, r3
   173b4:	2b00      	cmp	r3, #0
   173b6:	d00c      	beq.n	173d2 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   173b8:	4a15      	ldr	r2, [pc, #84]	; (17410 <MQTT_InitRoutine+0x84>)
   173ba:	4b14      	ldr	r3, [pc, #80]	; (1740c <MQTT_InitRoutine+0x80>)
   173bc:	0011      	movs	r1, r2
   173be:	0018      	movs	r0, r3
   173c0:	4b14      	ldr	r3, [pc, #80]	; (17414 <MQTT_InitRoutine+0x88>)
   173c2:	4798      	blx	r3
   173c4:	1e03      	subs	r3, r0, #0
   173c6:	d004      	beq.n	173d2 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   173c8:	4b13      	ldr	r3, [pc, #76]	; (17418 <MQTT_InitRoutine+0x8c>)
   173ca:	0019      	movs	r1, r3
   173cc:	2001      	movs	r0, #1
   173ce:	4b13      	ldr	r3, [pc, #76]	; (1741c <MQTT_InitRoutine+0x90>)
   173d0:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   173d2:	4b0e      	ldr	r3, [pc, #56]	; (1740c <MQTT_InitRoutine+0x80>)
   173d4:	2234      	movs	r2, #52	; 0x34
   173d6:	5c9b      	ldrb	r3, [r3, r2]
   173d8:	2b00      	cmp	r3, #0
   173da:	d004      	beq.n	173e6 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   173dc:	4b10      	ldr	r3, [pc, #64]	; (17420 <MQTT_InitRoutine+0x94>)
   173de:	0019      	movs	r1, r3
   173e0:	2001      	movs	r0, #1
   173e2:	4b0e      	ldr	r3, [pc, #56]	; (1741c <MQTT_InitRoutine+0x90>)
   173e4:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   173e6:	4b0f      	ldr	r3, [pc, #60]	; (17424 <MQTT_InitRoutine+0x98>)
   173e8:	2201      	movs	r2, #1
   173ea:	701a      	strb	r2, [r3, #0]
}
   173ec:	46c0      	nop			; (mov r8, r8)
   173ee:	46bd      	mov	sp, r7
   173f0:	bd80      	pop	{r7, pc}
   173f2:	46c0      	nop			; (mov r8, r8)
   173f4:	00025ab1 	.word	0x00025ab1
   173f8:	00017079 	.word	0x00017079
   173fc:	00016c05 	.word	0x00016c05
   17400:	00016bd1 	.word	0x00016bd1
   17404:	00025af9 	.word	0x00025af9
   17408:	00025a61 	.word	0x00025a61
   1740c:	20000898 	.word	0x20000898
   17410:	00036c18 	.word	0x00036c18
   17414:	0002fd8d 	.word	0x0002fd8d
   17418:	00037018 	.word	0x00037018
   1741c:	0001e3a1 	.word	0x0001e3a1
   17420:	00037444 	.word	0x00037444
   17424:	20000622 	.word	0x20000622

00017428 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   17428:	b580      	push	{r7, lr}
   1742a:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   1742c:	2000      	movs	r0, #0
   1742e:	4b0c      	ldr	r3, [pc, #48]	; (17460 <MQTT_HandleTransactions+0x38>)
   17430:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   17432:	4b0c      	ldr	r3, [pc, #48]	; (17464 <MQTT_HandleTransactions+0x3c>)
   17434:	0018      	movs	r0, r3
   17436:	4b0c      	ldr	r3, [pc, #48]	; (17468 <MQTT_HandleTransactions+0x40>)
   17438:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   1743a:	4b0c      	ldr	r3, [pc, #48]	; (1746c <MQTT_HandleTransactions+0x44>)
   1743c:	4798      	blx	r3
    MQTT_HandleImuMessages();
   1743e:	4b0c      	ldr	r3, [pc, #48]	; (17470 <MQTT_HandleTransactions+0x48>)
   17440:	4798      	blx	r3
	MQTT_HandleTestMessages();
   17442:	4b0c      	ldr	r3, [pc, #48]	; (17474 <MQTT_HandleTransactions+0x4c>)
   17444:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   17446:	4b0c      	ldr	r3, [pc, #48]	; (17478 <MQTT_HandleTransactions+0x50>)
   17448:	2234      	movs	r2, #52	; 0x34
   1744a:	5c9b      	ldrb	r3, [r3, r2]
   1744c:	2b00      	cmp	r3, #0
   1744e:	d004      	beq.n	1745a <MQTT_HandleTransactions+0x32>
   17450:	4b09      	ldr	r3, [pc, #36]	; (17478 <MQTT_HandleTransactions+0x50>)
   17452:	2164      	movs	r1, #100	; 0x64
   17454:	0018      	movs	r0, r3
   17456:	4b09      	ldr	r3, [pc, #36]	; (1747c <MQTT_HandleTransactions+0x54>)
   17458:	4798      	blx	r3
}
   1745a:	46c0      	nop			; (mov r8, r8)
   1745c:	46bd      	mov	sp, r7
   1745e:	bd80      	pop	{r7, pc}
   17460:	000224f5 	.word	0x000224f5
   17464:	200048b0 	.word	0x200048b0
   17468:	00032be9 	.word	0x00032be9
   1746c:	00017581 	.word	0x00017581
   17470:	00017481 	.word	0x00017481
   17474:	0001750d 	.word	0x0001750d
   17478:	20000898 	.word	0x20000898
   1747c:	0002ffbd 	.word	0x0002ffbd

00017480 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   17480:	b590      	push	{r4, r7, lr}
   17482:	b085      	sub	sp, #20
   17484:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   17486:	4b18      	ldr	r3, [pc, #96]	; (174e8 <MQTT_HandleImuMessages+0x68>)
   17488:	681b      	ldr	r3, [r3, #0]
   1748a:	0039      	movs	r1, r7
   1748c:	2200      	movs	r2, #0
   1748e:	0018      	movs	r0, r3
   17490:	4b16      	ldr	r3, [pc, #88]	; (174ec <MQTT_HandleImuMessages+0x6c>)
   17492:	4798      	blx	r3
   17494:	0003      	movs	r3, r0
   17496:	2b01      	cmp	r3, #1
   17498:	d121      	bne.n	174de <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   1749a:	003b      	movs	r3, r7
   1749c:	2200      	movs	r2, #0
   1749e:	5e9b      	ldrsh	r3, [r3, r2]
   174a0:	001c      	movs	r4, r3
   174a2:	003b      	movs	r3, r7
   174a4:	2202      	movs	r2, #2
   174a6:	5e9b      	ldrsh	r3, [r3, r2]
   174a8:	0019      	movs	r1, r3
   174aa:	003b      	movs	r3, r7
   174ac:	2204      	movs	r2, #4
   174ae:	5e9b      	ldrsh	r3, [r3, r2]
   174b0:	4a0f      	ldr	r2, [pc, #60]	; (174f0 <MQTT_HandleImuMessages+0x70>)
   174b2:	4810      	ldr	r0, [pc, #64]	; (174f4 <MQTT_HandleImuMessages+0x74>)
   174b4:	9301      	str	r3, [sp, #4]
   174b6:	9100      	str	r1, [sp, #0]
   174b8:	0023      	movs	r3, r4
   174ba:	213f      	movs	r1, #63	; 0x3f
   174bc:	4c0e      	ldr	r4, [pc, #56]	; (174f8 <MQTT_HandleImuMessages+0x78>)
   174be:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   174c0:	4b0c      	ldr	r3, [pc, #48]	; (174f4 <MQTT_HandleImuMessages+0x74>)
   174c2:	0018      	movs	r0, r3
   174c4:	4b0d      	ldr	r3, [pc, #52]	; (174fc <MQTT_HandleImuMessages+0x7c>)
   174c6:	4798      	blx	r3
   174c8:	0004      	movs	r4, r0
   174ca:	4a0a      	ldr	r2, [pc, #40]	; (174f4 <MQTT_HandleImuMessages+0x74>)
   174cc:	490c      	ldr	r1, [pc, #48]	; (17500 <MQTT_HandleImuMessages+0x80>)
   174ce:	480d      	ldr	r0, [pc, #52]	; (17504 <MQTT_HandleImuMessages+0x84>)
   174d0:	2300      	movs	r3, #0
   174d2:	9301      	str	r3, [sp, #4]
   174d4:	2301      	movs	r3, #1
   174d6:	9300      	str	r3, [sp, #0]
   174d8:	0023      	movs	r3, r4
   174da:	4c0b      	ldr	r4, [pc, #44]	; (17508 <MQTT_HandleImuMessages+0x88>)
   174dc:	47a0      	blx	r4
    }
}
   174de:	46c0      	nop			; (mov r8, r8)
   174e0:	46bd      	mov	sp, r7
   174e2:	b003      	add	sp, #12
   174e4:	bd90      	pop	{r4, r7, pc}
   174e6:	46c0      	nop			; (mov r8, r8)
   174e8:	2000062c 	.word	0x2000062c
   174ec:	0001b4b5 	.word	0x0001b4b5
   174f0:	00037460 	.word	0x00037460
   174f4:	20000030 	.word	0x20000030
   174f8:	000351bd 	.word	0x000351bd
   174fc:	0003531b 	.word	0x0003531b
   17500:	00037484 	.word	0x00037484
   17504:	20000898 	.word	0x20000898
   17508:	0002ff09 	.word	0x0002ff09

0001750c <MQTT_HandleTestMessages>:

static void MQTT_HandleTestMessages(void)
{
   1750c:	b590      	push	{r4, r7, lr}
   1750e:	b085      	sub	sp, #20
   17510:	af02      	add	r7, sp, #8
	struct TestPacket TestDataVar;
	if (pdPASS == xQueueReceive(xQueueTestBuffer, &TestDataVar, 0)) {
   17512:	4b12      	ldr	r3, [pc, #72]	; (1755c <MQTT_HandleTestMessages+0x50>)
   17514:	681b      	ldr	r3, [r3, #0]
   17516:	1d39      	adds	r1, r7, #4
   17518:	2200      	movs	r2, #0
   1751a:	0018      	movs	r0, r3
   1751c:	4b10      	ldr	r3, [pc, #64]	; (17560 <MQTT_HandleTestMessages+0x54>)
   1751e:	4798      	blx	r3
   17520:	0003      	movs	r3, r0
   17522:	2b01      	cmp	r3, #1
   17524:	d115      	bne.n	17552 <MQTT_HandleTestMessages+0x46>
		snprintf(mqtt_msg, 63, "{\"test\":%d }", TestDataVar.test);
   17526:	1d3b      	adds	r3, r7, #4
   17528:	781b      	ldrb	r3, [r3, #0]
   1752a:	4a0e      	ldr	r2, [pc, #56]	; (17564 <MQTT_HandleTestMessages+0x58>)
   1752c:	480e      	ldr	r0, [pc, #56]	; (17568 <MQTT_HandleTestMessages+0x5c>)
   1752e:	213f      	movs	r1, #63	; 0x3f
   17530:	4c0e      	ldr	r4, [pc, #56]	; (1756c <MQTT_HandleTestMessages+0x60>)
   17532:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, TEST_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17534:	4b0c      	ldr	r3, [pc, #48]	; (17568 <MQTT_HandleTestMessages+0x5c>)
   17536:	0018      	movs	r0, r3
   17538:	4b0d      	ldr	r3, [pc, #52]	; (17570 <MQTT_HandleTestMessages+0x64>)
   1753a:	4798      	blx	r3
   1753c:	0004      	movs	r4, r0
   1753e:	4a0a      	ldr	r2, [pc, #40]	; (17568 <MQTT_HandleTestMessages+0x5c>)
   17540:	490c      	ldr	r1, [pc, #48]	; (17574 <MQTT_HandleTestMessages+0x68>)
   17542:	480d      	ldr	r0, [pc, #52]	; (17578 <MQTT_HandleTestMessages+0x6c>)
   17544:	2300      	movs	r3, #0
   17546:	9301      	str	r3, [sp, #4]
   17548:	2301      	movs	r3, #1
   1754a:	9300      	str	r3, [sp, #0]
   1754c:	0023      	movs	r3, r4
   1754e:	4c0b      	ldr	r4, [pc, #44]	; (1757c <MQTT_HandleTestMessages+0x70>)
   17550:	47a0      	blx	r4
	}
}
   17552:	46c0      	nop			; (mov r8, r8)
   17554:	46bd      	mov	sp, r7
   17556:	b003      	add	sp, #12
   17558:	bd90      	pop	{r4, r7, pc}
   1755a:	46c0      	nop			; (mov r8, r8)
   1755c:	20000634 	.word	0x20000634
   17560:	0001b4b5 	.word	0x0001b4b5
   17564:	00037498 	.word	0x00037498
   17568:	20000030 	.word	0x20000030
   1756c:	000351bd 	.word	0x000351bd
   17570:	0003531b 	.word	0x0003531b
   17574:	000374a8 	.word	0x000374a8
   17578:	20000898 	.word	0x20000898
   1757c:	0002ff09 	.word	0x0002ff09

00017580 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   17580:	b590      	push	{r4, r7, lr}
   17582:	b08b      	sub	sp, #44	; 0x2c
   17584:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   17586:	4b39      	ldr	r3, [pc, #228]	; (1766c <MQTT_HandleGameMessages+0xec>)
   17588:	681b      	ldr	r3, [r3, #0]
   1758a:	2208      	movs	r2, #8
   1758c:	18b9      	adds	r1, r7, r2
   1758e:	2200      	movs	r2, #0
   17590:	0018      	movs	r0, r3
   17592:	4b37      	ldr	r3, [pc, #220]	; (17670 <MQTT_HandleGameMessages+0xf0>)
   17594:	4798      	blx	r3
   17596:	0003      	movs	r3, r0
   17598:	2b01      	cmp	r3, #1
   1759a:	d163      	bne.n	17664 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   1759c:	4b35      	ldr	r3, [pc, #212]	; (17674 <MQTT_HandleGameMessages+0xf4>)
   1759e:	4a36      	ldr	r2, [pc, #216]	; (17678 <MQTT_HandleGameMessages+0xf8>)
   175a0:	ca03      	ldmia	r2!, {r0, r1}
   175a2:	c303      	stmia	r3!, {r0, r1}
   175a4:	8812      	ldrh	r2, [r2, #0]
   175a6:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   175a8:	2300      	movs	r3, #0
   175aa:	61fb      	str	r3, [r7, #28]
   175ac:	e02d      	b.n	1760a <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   175ae:	2308      	movs	r3, #8
   175b0:	18fa      	adds	r2, r7, r3
   175b2:	69fb      	ldr	r3, [r7, #28]
   175b4:	18d3      	adds	r3, r2, r3
   175b6:	781b      	ldrb	r3, [r3, #0]
   175b8:	2bff      	cmp	r3, #255	; 0xff
   175ba:	d02a      	beq.n	17612 <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   175bc:	2308      	movs	r3, #8
   175be:	18fa      	adds	r2, r7, r3
   175c0:	69fb      	ldr	r3, [r7, #28]
   175c2:	18d3      	adds	r3, r2, r3
   175c4:	781b      	ldrb	r3, [r3, #0]
   175c6:	4a2d      	ldr	r2, [pc, #180]	; (1767c <MQTT_HandleGameMessages+0xfc>)
   175c8:	0038      	movs	r0, r7
   175ca:	2103      	movs	r1, #3
   175cc:	4c2c      	ldr	r4, [pc, #176]	; (17680 <MQTT_HandleGameMessages+0x100>)
   175ce:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   175d0:	003a      	movs	r2, r7
   175d2:	4b28      	ldr	r3, [pc, #160]	; (17674 <MQTT_HandleGameMessages+0xf4>)
   175d4:	0011      	movs	r1, r2
   175d6:	0018      	movs	r0, r3
   175d8:	4b2a      	ldr	r3, [pc, #168]	; (17684 <MQTT_HandleGameMessages+0x104>)
   175da:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   175dc:	69fb      	ldr	r3, [r7, #28]
   175de:	3301      	adds	r3, #1
   175e0:	2208      	movs	r2, #8
   175e2:	18ba      	adds	r2, r7, r2
   175e4:	5cd3      	ldrb	r3, [r2, r3]
   175e6:	2bff      	cmp	r3, #255	; 0xff
   175e8:	d00c      	beq.n	17604 <MQTT_HandleGameMessages+0x84>
   175ea:	69fb      	ldr	r3, [r7, #28]
   175ec:	3301      	adds	r3, #1
   175ee:	2b13      	cmp	r3, #19
   175f0:	dc08      	bgt.n	17604 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   175f2:	003b      	movs	r3, r7
   175f4:	222c      	movs	r2, #44	; 0x2c
   175f6:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   175f8:	003a      	movs	r2, r7
   175fa:	4b1e      	ldr	r3, [pc, #120]	; (17674 <MQTT_HandleGameMessages+0xf4>)
   175fc:	0011      	movs	r1, r2
   175fe:	0018      	movs	r0, r3
   17600:	4b20      	ldr	r3, [pc, #128]	; (17684 <MQTT_HandleGameMessages+0x104>)
   17602:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17604:	69fb      	ldr	r3, [r7, #28]
   17606:	3301      	adds	r3, #1
   17608:	61fb      	str	r3, [r7, #28]
   1760a:	69fb      	ldr	r3, [r7, #28]
   1760c:	2b13      	cmp	r3, #19
   1760e:	ddce      	ble.n	175ae <MQTT_HandleGameMessages+0x2e>
   17610:	e000      	b.n	17614 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   17612:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   17614:	4b17      	ldr	r3, [pc, #92]	; (17674 <MQTT_HandleGameMessages+0xf4>)
   17616:	0018      	movs	r0, r3
   17618:	4b1b      	ldr	r3, [pc, #108]	; (17688 <MQTT_HandleGameMessages+0x108>)
   1761a:	4798      	blx	r3
   1761c:	0003      	movs	r3, r0
   1761e:	001a      	movs	r2, r3
   17620:	4b14      	ldr	r3, [pc, #80]	; (17674 <MQTT_HandleGameMessages+0xf4>)
   17622:	18d2      	adds	r2, r2, r3
   17624:	4b19      	ldr	r3, [pc, #100]	; (1768c <MQTT_HandleGameMessages+0x10c>)
   17626:	0010      	movs	r0, r2
   17628:	0019      	movs	r1, r3
   1762a:	2303      	movs	r3, #3
   1762c:	001a      	movs	r2, r3
   1762e:	4b18      	ldr	r3, [pc, #96]	; (17690 <MQTT_HandleGameMessages+0x110>)
   17630:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   17632:	4b10      	ldr	r3, [pc, #64]	; (17674 <MQTT_HandleGameMessages+0xf4>)
   17634:	0019      	movs	r1, r3
   17636:	2001      	movs	r0, #1
   17638:	4b16      	ldr	r3, [pc, #88]	; (17694 <MQTT_HandleGameMessages+0x114>)
   1763a:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   1763c:	4b16      	ldr	r3, [pc, #88]	; (17698 <MQTT_HandleGameMessages+0x118>)
   1763e:	0019      	movs	r1, r3
   17640:	2001      	movs	r0, #1
   17642:	4b14      	ldr	r3, [pc, #80]	; (17694 <MQTT_HandleGameMessages+0x114>)
   17644:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17646:	4b0b      	ldr	r3, [pc, #44]	; (17674 <MQTT_HandleGameMessages+0xf4>)
   17648:	0018      	movs	r0, r3
   1764a:	4b0f      	ldr	r3, [pc, #60]	; (17688 <MQTT_HandleGameMessages+0x108>)
   1764c:	4798      	blx	r3
   1764e:	0004      	movs	r4, r0
   17650:	4a08      	ldr	r2, [pc, #32]	; (17674 <MQTT_HandleGameMessages+0xf4>)
   17652:	4912      	ldr	r1, [pc, #72]	; (1769c <MQTT_HandleGameMessages+0x11c>)
   17654:	4812      	ldr	r0, [pc, #72]	; (176a0 <MQTT_HandleGameMessages+0x120>)
   17656:	2300      	movs	r3, #0
   17658:	9301      	str	r3, [sp, #4]
   1765a:	2301      	movs	r3, #1
   1765c:	9300      	str	r3, [sp, #0]
   1765e:	0023      	movs	r3, r4
   17660:	4c10      	ldr	r4, [pc, #64]	; (176a4 <MQTT_HandleGameMessages+0x124>)
   17662:	47a0      	blx	r4
    }
}
   17664:	46c0      	nop			; (mov r8, r8)
   17666:	46bd      	mov	sp, r7
   17668:	b009      	add	sp, #36	; 0x24
   1766a:	bd90      	pop	{r4, r7, pc}
   1766c:	20000628 	.word	0x20000628
   17670:	0001b4b5 	.word	0x0001b4b5
   17674:	20000030 	.word	0x20000030
   17678:	000371b4 	.word	0x000371b4
   1767c:	000374bc 	.word	0x000374bc
   17680:	000351bd 	.word	0x000351bd
   17684:	000352a1 	.word	0x000352a1
   17688:	0003531b 	.word	0x0003531b
   1768c:	000374c0 	.word	0x000374c0
   17690:	00034f2d 	.word	0x00034f2d
   17694:	0001e3a1 	.word	0x0001e3a1
   17698:	000374c4 	.word	0x000374c4
   1769c:	000374c8 	.word	0x000374c8
   176a0:	20000898 	.word	0x20000898
   176a4:	0002ff09 	.word	0x0002ff09

000176a8 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   176a8:	b590      	push	{r4, r7, lr}
   176aa:	b08d      	sub	sp, #52	; 0x34
   176ac:	af02      	add	r7, sp, #8
   176ae:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   176b0:	2064      	movs	r0, #100	; 0x64
   176b2:	4b7f      	ldr	r3, [pc, #508]	; (178b0 <vWifiTask+0x208>)
   176b4:	4798      	blx	r3
    init_state();
   176b6:	4b7f      	ldr	r3, [pc, #508]	; (178b4 <vWifiTask+0x20c>)
   176b8:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   176ba:	2200      	movs	r2, #0
   176bc:	2104      	movs	r1, #4
   176be:	2005      	movs	r0, #5
   176c0:	4b7d      	ldr	r3, [pc, #500]	; (178b8 <vWifiTask+0x210>)
   176c2:	4798      	blx	r3
   176c4:	0002      	movs	r2, r0
   176c6:	4b7d      	ldr	r3, [pc, #500]	; (178bc <vWifiTask+0x214>)
   176c8:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   176ca:	2200      	movs	r2, #0
   176cc:	2106      	movs	r1, #6
   176ce:	2005      	movs	r0, #5
   176d0:	4b79      	ldr	r3, [pc, #484]	; (178b8 <vWifiTask+0x210>)
   176d2:	4798      	blx	r3
   176d4:	0002      	movs	r2, r0
   176d6:	4b7a      	ldr	r3, [pc, #488]	; (178c0 <vWifiTask+0x218>)
   176d8:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   176da:	2200      	movs	r2, #0
   176dc:	2114      	movs	r1, #20
   176de:	2002      	movs	r0, #2
   176e0:	4b75      	ldr	r3, [pc, #468]	; (178b8 <vWifiTask+0x210>)
   176e2:	4798      	blx	r3
   176e4:	0002      	movs	r2, r0
   176e6:	4b77      	ldr	r3, [pc, #476]	; (178c4 <vWifiTask+0x21c>)
   176e8:	601a      	str	r2, [r3, #0]
	xQueueTestBuffer = xQueueCreate(5, sizeof(struct TestPacket));
   176ea:	2200      	movs	r2, #0
   176ec:	2101      	movs	r1, #1
   176ee:	2005      	movs	r0, #5
   176f0:	4b71      	ldr	r3, [pc, #452]	; (178b8 <vWifiTask+0x210>)
   176f2:	4798      	blx	r3
   176f4:	0002      	movs	r2, r0
   176f6:	4b74      	ldr	r3, [pc, #464]	; (178c8 <vWifiTask+0x220>)
   176f8:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   176fa:	2200      	movs	r2, #0
   176fc:	2102      	movs	r1, #2
   176fe:	2005      	movs	r0, #5
   17700:	4b6d      	ldr	r3, [pc, #436]	; (178b8 <vWifiTask+0x210>)
   17702:	4798      	blx	r3
   17704:	0002      	movs	r2, r0
   17706:	4b71      	ldr	r3, [pc, #452]	; (178cc <vWifiTask+0x224>)
   17708:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL || xQueueTestBuffer == NULL) {
   1770a:	4b6c      	ldr	r3, [pc, #432]	; (178bc <vWifiTask+0x214>)
   1770c:	681b      	ldr	r3, [r3, #0]
   1770e:	2b00      	cmp	r3, #0
   17710:	d00f      	beq.n	17732 <vWifiTask+0x8a>
   17712:	4b6b      	ldr	r3, [pc, #428]	; (178c0 <vWifiTask+0x218>)
   17714:	681b      	ldr	r3, [r3, #0]
   17716:	2b00      	cmp	r3, #0
   17718:	d00b      	beq.n	17732 <vWifiTask+0x8a>
   1771a:	4b6a      	ldr	r3, [pc, #424]	; (178c4 <vWifiTask+0x21c>)
   1771c:	681b      	ldr	r3, [r3, #0]
   1771e:	2b00      	cmp	r3, #0
   17720:	d007      	beq.n	17732 <vWifiTask+0x8a>
   17722:	4b6a      	ldr	r3, [pc, #424]	; (178cc <vWifiTask+0x224>)
   17724:	681b      	ldr	r3, [r3, #0]
   17726:	2b00      	cmp	r3, #0
   17728:	d003      	beq.n	17732 <vWifiTask+0x8a>
   1772a:	4b67      	ldr	r3, [pc, #412]	; (178c8 <vWifiTask+0x220>)
   1772c:	681b      	ldr	r3, [r3, #0]
   1772e:	2b00      	cmp	r3, #0
   17730:	d103      	bne.n	1773a <vWifiTask+0x92>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   17732:	4b67      	ldr	r3, [pc, #412]	; (178d0 <vWifiTask+0x228>)
   17734:	0018      	movs	r0, r3
   17736:	4b67      	ldr	r3, [pc, #412]	; (178d4 <vWifiTask+0x22c>)
   17738:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   1773a:	4b67      	ldr	r3, [pc, #412]	; (178d8 <vWifiTask+0x230>)
   1773c:	0018      	movs	r0, r3
   1773e:	4b65      	ldr	r3, [pc, #404]	; (178d4 <vWifiTask+0x22c>)
   17740:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   17742:	4b66      	ldr	r3, [pc, #408]	; (178dc <vWifiTask+0x234>)
   17744:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   17746:	4b66      	ldr	r3, [pc, #408]	; (178e0 <vWifiTask+0x238>)
   17748:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   1774a:	4b66      	ldr	r3, [pc, #408]	; (178e4 <vWifiTask+0x23c>)
   1774c:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   1774e:	4b66      	ldr	r3, [pc, #408]	; (178e8 <vWifiTask+0x240>)
   17750:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   17752:	4b66      	ldr	r3, [pc, #408]	; (178ec <vWifiTask+0x244>)
   17754:	4798      	blx	r3
    configure_extint_callbacks();
   17756:	4b66      	ldr	r3, [pc, #408]	; (178f0 <vWifiTask+0x248>)
   17758:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1775a:	230c      	movs	r3, #12
   1775c:	18fb      	adds	r3, r7, r3
   1775e:	2218      	movs	r2, #24
   17760:	2100      	movs	r1, #0
   17762:	0018      	movs	r0, r3
   17764:	4b63      	ldr	r3, [pc, #396]	; (178f4 <vWifiTask+0x24c>)
   17766:	4798      	blx	r3

    nm_bsp_init();
   17768:	4b63      	ldr	r3, [pc, #396]	; (178f8 <vWifiTask+0x250>)
   1776a:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   1776c:	230c      	movs	r3, #12
   1776e:	18fb      	adds	r3, r7, r3
   17770:	4a62      	ldr	r2, [pc, #392]	; (178fc <vWifiTask+0x254>)
   17772:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   17774:	2327      	movs	r3, #39	; 0x27
   17776:	18fc      	adds	r4, r7, r3
   17778:	230c      	movs	r3, #12
   1777a:	18fb      	adds	r3, r7, r3
   1777c:	0018      	movs	r0, r3
   1777e:	4b60      	ldr	r3, [pc, #384]	; (17900 <vWifiTask+0x258>)
   17780:	4798      	blx	r3
   17782:	0003      	movs	r3, r0
   17784:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   17786:	2327      	movs	r3, #39	; 0x27
   17788:	18fb      	adds	r3, r7, r3
   1778a:	781b      	ldrb	r3, [r3, #0]
   1778c:	b25b      	sxtb	r3, r3
   1778e:	2b00      	cmp	r3, #0
   17790:	d009      	beq.n	177a6 <vWifiTask+0xfe>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   17792:	2327      	movs	r3, #39	; 0x27
   17794:	18fb      	adds	r3, r7, r3
   17796:	2200      	movs	r2, #0
   17798:	569a      	ldrsb	r2, [r3, r2]
   1779a:	4b5a      	ldr	r3, [pc, #360]	; (17904 <vWifiTask+0x25c>)
   1779c:	0019      	movs	r1, r3
   1779e:	2001      	movs	r0, #1
   177a0:	4b59      	ldr	r3, [pc, #356]	; (17908 <vWifiTask+0x260>)
   177a2:	4798      	blx	r3
        while (1) {
   177a4:	e7fe      	b.n	177a4 <vWifiTask+0xfc>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   177a6:	4a59      	ldr	r2, [pc, #356]	; (1790c <vWifiTask+0x264>)
   177a8:	4b59      	ldr	r3, [pc, #356]	; (17910 <vWifiTask+0x268>)
   177aa:	0019      	movs	r1, r3
   177ac:	2001      	movs	r0, #1
   177ae:	4b56      	ldr	r3, [pc, #344]	; (17908 <vWifiTask+0x260>)
   177b0:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   177b2:	4b58      	ldr	r3, [pc, #352]	; (17914 <vWifiTask+0x26c>)
   177b4:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   177b6:	4a58      	ldr	r2, [pc, #352]	; (17918 <vWifiTask+0x270>)
   177b8:	4b58      	ldr	r3, [pc, #352]	; (1791c <vWifiTask+0x274>)
   177ba:	0011      	movs	r1, r2
   177bc:	0018      	movs	r0, r3
   177be:	4b58      	ldr	r3, [pc, #352]	; (17920 <vWifiTask+0x278>)
   177c0:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   177c2:	4a58      	ldr	r2, [pc, #352]	; (17924 <vWifiTask+0x27c>)
   177c4:	4851      	ldr	r0, [pc, #324]	; (1790c <vWifiTask+0x264>)
   177c6:	23ff      	movs	r3, #255	; 0xff
   177c8:	9300      	str	r3, [sp, #0]
   177ca:	0013      	movs	r3, r2
   177cc:	2201      	movs	r2, #1
   177ce:	210a      	movs	r1, #10
   177d0:	4c55      	ldr	r4, [pc, #340]	; (17928 <vWifiTask+0x280>)
   177d2:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   177d4:	e006      	b.n	177e4 <vWifiTask+0x13c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   177d6:	2000      	movs	r0, #0
   177d8:	4b54      	ldr	r3, [pc, #336]	; (1792c <vWifiTask+0x284>)
   177da:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   177dc:	4b54      	ldr	r3, [pc, #336]	; (17930 <vWifiTask+0x288>)
   177de:	0018      	movs	r0, r3
   177e0:	4b54      	ldr	r3, [pc, #336]	; (17934 <vWifiTask+0x28c>)
   177e2:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   177e4:	2002      	movs	r0, #2
   177e6:	4b54      	ldr	r3, [pc, #336]	; (17938 <vWifiTask+0x290>)
   177e8:	4798      	blx	r3
   177ea:	0003      	movs	r3, r0
   177ec:	001a      	movs	r2, r3
   177ee:	2301      	movs	r3, #1
   177f0:	4053      	eors	r3, r2
   177f2:	b2db      	uxtb	r3, r3
   177f4:	2b00      	cmp	r3, #0
   177f6:	d1ee      	bne.n	177d6 <vWifiTask+0x12e>
    }

    vTaskDelay(1000);
   177f8:	23fa      	movs	r3, #250	; 0xfa
   177fa:	009b      	lsls	r3, r3, #2
   177fc:	0018      	movs	r0, r3
   177fe:	4b2c      	ldr	r3, [pc, #176]	; (178b0 <vWifiTask+0x208>)
   17800:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   17802:	4b4e      	ldr	r3, [pc, #312]	; (1793c <vWifiTask+0x294>)
   17804:	2201      	movs	r2, #1
   17806:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   17808:	4b4c      	ldr	r3, [pc, #304]	; (1793c <vWifiTask+0x294>)
   1780a:	781b      	ldrb	r3, [r3, #0]
   1780c:	b25b      	sxtb	r3, r3
   1780e:	2b01      	cmp	r3, #1
   17810:	d00b      	beq.n	1782a <vWifiTask+0x182>
   17812:	dc02      	bgt.n	1781a <vWifiTask+0x172>
   17814:	2b00      	cmp	r3, #0
   17816:	d005      	beq.n	17824 <vWifiTask+0x17c>
   17818:	e010      	b.n	1783c <vWifiTask+0x194>
   1781a:	2b02      	cmp	r3, #2
   1781c:	d008      	beq.n	17830 <vWifiTask+0x188>
   1781e:	2b03      	cmp	r3, #3
   17820:	d009      	beq.n	17836 <vWifiTask+0x18e>
   17822:	e00b      	b.n	1783c <vWifiTask+0x194>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   17824:	4b46      	ldr	r3, [pc, #280]	; (17940 <vWifiTask+0x298>)
   17826:	4798      	blx	r3

                break;
   17828:	e00c      	b.n	17844 <vWifiTask+0x19c>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   1782a:	4b46      	ldr	r3, [pc, #280]	; (17944 <vWifiTask+0x29c>)
   1782c:	4798      	blx	r3
                break;
   1782e:	e009      	b.n	17844 <vWifiTask+0x19c>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   17830:	4b45      	ldr	r3, [pc, #276]	; (17948 <vWifiTask+0x2a0>)
   17832:	4798      	blx	r3
                break;
   17834:	e006      	b.n	17844 <vWifiTask+0x19c>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   17836:	4b45      	ldr	r3, [pc, #276]	; (1794c <vWifiTask+0x2a4>)
   17838:	4798      	blx	r3
                break;
   1783a:	e003      	b.n	17844 <vWifiTask+0x19c>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   1783c:	4b3f      	ldr	r3, [pc, #252]	; (1793c <vWifiTask+0x294>)
   1783e:	2200      	movs	r2, #0
   17840:	701a      	strb	r2, [r3, #0]
                break;
   17842:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   17844:	230b      	movs	r3, #11
   17846:	18fb      	adds	r3, r7, r3
   17848:	2200      	movs	r2, #0
   1784a:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   1784c:	4b1b      	ldr	r3, [pc, #108]	; (178bc <vWifiTask+0x214>)
   1784e:	681b      	ldr	r3, [r3, #0]
   17850:	220b      	movs	r2, #11
   17852:	18b9      	adds	r1, r7, r2
   17854:	2200      	movs	r2, #0
   17856:	0018      	movs	r0, r3
   17858:	4b3d      	ldr	r3, [pc, #244]	; (17950 <vWifiTask+0x2a8>)
   1785a:	4798      	blx	r3
   1785c:	0003      	movs	r3, r0
   1785e:	2b01      	cmp	r3, #1
   17860:	d105      	bne.n	1786e <vWifiTask+0x1c6>
            wifiStateMachine = DataToReceive;  // Update new state
   17862:	230b      	movs	r3, #11
   17864:	18fb      	adds	r3, r7, r3
   17866:	781b      	ldrb	r3, [r3, #0]
   17868:	b25a      	sxtb	r2, r3
   1786a:	4b34      	ldr	r3, [pc, #208]	; (1793c <vWifiTask+0x294>)
   1786c:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publis something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   1786e:	4b39      	ldr	r3, [pc, #228]	; (17954 <vWifiTask+0x2ac>)
   17870:	781b      	ldrb	r3, [r3, #0]
   17872:	b2db      	uxtb	r3, r3
   17874:	2b00      	cmp	r3, #0
   17876:	d017      	beq.n	178a8 <vWifiTask+0x200>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   17878:	4b37      	ldr	r3, [pc, #220]	; (17958 <vWifiTask+0x2b0>)
   1787a:	0018      	movs	r0, r3
   1787c:	4b37      	ldr	r3, [pc, #220]	; (1795c <vWifiTask+0x2b4>)
   1787e:	4798      	blx	r3
   17880:	0004      	movs	r4, r0
   17882:	4a35      	ldr	r2, [pc, #212]	; (17958 <vWifiTask+0x2b0>)
   17884:	4936      	ldr	r1, [pc, #216]	; (17960 <vWifiTask+0x2b8>)
   17886:	4837      	ldr	r0, [pc, #220]	; (17964 <vWifiTask+0x2bc>)
   17888:	2300      	movs	r3, #0
   1788a:	9301      	str	r3, [sp, #4]
   1788c:	2301      	movs	r3, #1
   1788e:	9300      	str	r3, [sp, #0]
   17890:	0023      	movs	r3, r4
   17892:	4c35      	ldr	r4, [pc, #212]	; (17968 <vWifiTask+0x2c0>)
   17894:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   17896:	4a30      	ldr	r2, [pc, #192]	; (17958 <vWifiTask+0x2b0>)
   17898:	4b34      	ldr	r3, [pc, #208]	; (1796c <vWifiTask+0x2c4>)
   1789a:	0019      	movs	r1, r3
   1789c:	2001      	movs	r0, #1
   1789e:	4b1a      	ldr	r3, [pc, #104]	; (17908 <vWifiTask+0x260>)
   178a0:	4798      	blx	r3
            isPressed = false;
   178a2:	4b2c      	ldr	r3, [pc, #176]	; (17954 <vWifiTask+0x2ac>)
   178a4:	2200      	movs	r2, #0
   178a6:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   178a8:	2064      	movs	r0, #100	; 0x64
   178aa:	4b01      	ldr	r3, [pc, #4]	; (178b0 <vWifiTask+0x208>)
   178ac:	4798      	blx	r3
    while (1) {
   178ae:	e7ab      	b.n	17808 <vWifiTask+0x160>
   178b0:	0001c661 	.word	0x0001c661
   178b4:	000160e5 	.word	0x000160e5
   178b8:	0001a955 	.word	0x0001a955
   178bc:	20000624 	.word	0x20000624
   178c0:	2000062c 	.word	0x2000062c
   178c4:	20000628 	.word	0x20000628
   178c8:	20000634 	.word	0x20000634
   178cc:	20000630 	.word	0x20000630
   178d0:	000374dc 	.word	0x000374dc
   178d4:	0001e2b5 	.word	0x0001e2b5
   178d8:	00037504 	.word	0x00037504
   178dc:	00016b21 	.word	0x00016b21
   178e0:	00016b5d 	.word	0x00016b5d
   178e4:	00017079 	.word	0x00017079
   178e8:	00016a3d 	.word	0x00016a3d
   178ec:	00017131 	.word	0x00017131
   178f0:	00017171 	.word	0x00017171
   178f4:	00034f63 	.word	0x00034f63
   178f8:	00020829 	.word	0x00020829
   178fc:	000168e9 	.word	0x000168e9
   17900:	00022301 	.word	0x00022301
   17904:	00037520 	.word	0x00037520
   17908:	0001e3a1 	.word	0x0001e3a1
   1790c:	00036fe4 	.word	0x00036fe4
   17910:	0003754c 	.word	0x0003754c
   17914:	00025a61 	.word	0x00025a61
   17918:	00016c05 	.word	0x00016c05
   1791c:	00016bd1 	.word	0x00016bd1
   17920:	00025af9 	.word	0x00025af9
   17924:	00036fd8 	.word	0x00036fd8
   17928:	00022511 	.word	0x00022511
   1792c:	000224f5 	.word	0x000224f5
   17930:	200048b0 	.word	0x200048b0
   17934:	00032be9 	.word	0x00032be9
   17938:	00016155 	.word	0x00016155
   1793c:	20000622 	.word	0x20000622
   17940:	0001738d 	.word	0x0001738d
   17944:	00017429 	.word	0x00017429
   17948:	000171e9 	.word	0x000171e9
   1794c:	0001727d 	.word	0x0001727d
   17950:	0001b4b5 	.word	0x0001b4b5
   17954:	20000cd0 	.word	0x20000cd0
   17958:	20000070 	.word	0x20000070
   1795c:	0003531b 	.word	0x0003531b
   17960:	00037570 	.word	0x00037570
   17964:	20000898 	.word	0x20000898
   17968:	0002ff09 	.word	0x0002ff09
   1796c:	0003758c 	.word	0x0003758c

00017970 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   17970:	b590      	push	{r4, r7, lr}
   17972:	b083      	sub	sp, #12
   17974:	af00      	add	r7, sp, #0
   17976:	0002      	movs	r2, r0
   17978:	1dfb      	adds	r3, r7, #7
   1797a:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   1797c:	1dfb      	adds	r3, r7, #7
   1797e:	781b      	ldrb	r3, [r3, #0]
   17980:	2b03      	cmp	r3, #3
   17982:	d806      	bhi.n	17992 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   17984:	4b05      	ldr	r3, [pc, #20]	; (1799c <WifiHandlerSetState+0x2c>)
   17986:	6818      	ldr	r0, [r3, #0]
   17988:	1df9      	adds	r1, r7, #7
   1798a:	2300      	movs	r3, #0
   1798c:	220a      	movs	r2, #10
   1798e:	4c04      	ldr	r4, [pc, #16]	; (179a0 <WifiHandlerSetState+0x30>)
   17990:	47a0      	blx	r4
    }
}
   17992:	46c0      	nop			; (mov r8, r8)
   17994:	46bd      	mov	sp, r7
   17996:	b003      	add	sp, #12
   17998:	bd90      	pop	{r4, r7, pc}
   1799a:	46c0      	nop			; (mov r8, r8)
   1799c:	20000624 	.word	0x20000624
   179a0:	0001abfd 	.word	0x0001abfd

000179a4 <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   179a4:	b590      	push	{r4, r7, lr}
   179a6:	b085      	sub	sp, #20
   179a8:	af00      	add	r7, sp, #0
   179aa:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
   179ac:	4b06      	ldr	r3, [pc, #24]	; (179c8 <WifiAddDistanceDataToQueue+0x24>)
   179ae:	6818      	ldr	r0, [r3, #0]
   179b0:	6879      	ldr	r1, [r7, #4]
   179b2:	2300      	movs	r3, #0
   179b4:	220a      	movs	r2, #10
   179b6:	4c05      	ldr	r4, [pc, #20]	; (179cc <WifiAddDistanceDataToQueue+0x28>)
   179b8:	47a0      	blx	r4
   179ba:	0003      	movs	r3, r0
   179bc:	60fb      	str	r3, [r7, #12]
    return error;
   179be:	68fb      	ldr	r3, [r7, #12]
}
   179c0:	0018      	movs	r0, r3
   179c2:	46bd      	mov	sp, r7
   179c4:	b005      	add	sp, #20
   179c6:	bd90      	pop	{r4, r7, pc}
   179c8:	20000630 	.word	0x20000630
   179cc:	0001abfd 	.word	0x0001abfd

000179d0 <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   179d0:	b590      	push	{r4, r7, lr}
   179d2:	b085      	sub	sp, #20
   179d4:	af00      	add	r7, sp, #0
   179d6:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   179d8:	4b06      	ldr	r3, [pc, #24]	; (179f4 <WifiAddGameDataToQueue+0x24>)
   179da:	6818      	ldr	r0, [r3, #0]
   179dc:	6879      	ldr	r1, [r7, #4]
   179de:	2300      	movs	r3, #0
   179e0:	220a      	movs	r2, #10
   179e2:	4c05      	ldr	r4, [pc, #20]	; (179f8 <WifiAddGameDataToQueue+0x28>)
   179e4:	47a0      	blx	r4
   179e6:	0003      	movs	r3, r0
   179e8:	60fb      	str	r3, [r7, #12]
    return error;
   179ea:	68fb      	ldr	r3, [r7, #12]
}
   179ec:	0018      	movs	r0, r3
   179ee:	46bd      	mov	sp, r7
   179f0:	b005      	add	sp, #20
   179f2:	bd90      	pop	{r4, r7, pc}
   179f4:	20000628 	.word	0x20000628
   179f8:	0001abfd 	.word	0x0001abfd

000179fc <WifiAddTestDataToQueue>:

int WifiAddTestDataToQueue(struct TestPacket *test)
{
   179fc:	b590      	push	{r4, r7, lr}
   179fe:	b085      	sub	sp, #20
   17a00:	af00      	add	r7, sp, #0
   17a02:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueTestBuffer, test, (TickType_t)10);
   17a04:	4b06      	ldr	r3, [pc, #24]	; (17a20 <WifiAddTestDataToQueue+0x24>)
   17a06:	6818      	ldr	r0, [r3, #0]
   17a08:	6879      	ldr	r1, [r7, #4]
   17a0a:	2300      	movs	r3, #0
   17a0c:	220a      	movs	r2, #10
   17a0e:	4c05      	ldr	r4, [pc, #20]	; (17a24 <WifiAddTestDataToQueue+0x28>)
   17a10:	47a0      	blx	r4
   17a12:	0003      	movs	r3, r0
   17a14:	60fb      	str	r3, [r7, #12]
	return error;
   17a16:	68fb      	ldr	r3, [r7, #12]
   17a18:	0018      	movs	r0, r3
   17a1a:	46bd      	mov	sp, r7
   17a1c:	b005      	add	sp, #20
   17a1e:	bd90      	pop	{r4, r7, pc}
   17a20:	20000634 	.word	0x20000634
   17a24:	0001abfd 	.word	0x0001abfd

00017a28 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   17a28:	b580      	push	{r7, lr}
   17a2a:	b082      	sub	sp, #8
   17a2c:	af00      	add	r7, sp, #0
   17a2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   17a30:	687b      	ldr	r3, [r7, #4]
   17a32:	2200      	movs	r2, #0
   17a34:	701a      	strb	r2, [r3, #0]
}
   17a36:	46c0      	nop			; (mov r8, r8)
   17a38:	46bd      	mov	sp, r7
   17a3a:	b002      	add	sp, #8
   17a3c:	bd80      	pop	{r7, pc}
	...

00017a40 <system_apb_clock_set_mask>:
{
   17a40:	b580      	push	{r7, lr}
   17a42:	b082      	sub	sp, #8
   17a44:	af00      	add	r7, sp, #0
   17a46:	0002      	movs	r2, r0
   17a48:	6039      	str	r1, [r7, #0]
   17a4a:	1dfb      	adds	r3, r7, #7
   17a4c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   17a4e:	1dfb      	adds	r3, r7, #7
   17a50:	781b      	ldrb	r3, [r3, #0]
   17a52:	2b01      	cmp	r3, #1
   17a54:	d00a      	beq.n	17a6c <system_apb_clock_set_mask+0x2c>
   17a56:	2b02      	cmp	r3, #2
   17a58:	d00f      	beq.n	17a7a <system_apb_clock_set_mask+0x3a>
   17a5a:	2b00      	cmp	r3, #0
   17a5c:	d114      	bne.n	17a88 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   17a5e:	4b0e      	ldr	r3, [pc, #56]	; (17a98 <system_apb_clock_set_mask+0x58>)
   17a60:	4a0d      	ldr	r2, [pc, #52]	; (17a98 <system_apb_clock_set_mask+0x58>)
   17a62:	6991      	ldr	r1, [r2, #24]
   17a64:	683a      	ldr	r2, [r7, #0]
   17a66:	430a      	orrs	r2, r1
   17a68:	619a      	str	r2, [r3, #24]
			break;
   17a6a:	e00f      	b.n	17a8c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   17a6c:	4b0a      	ldr	r3, [pc, #40]	; (17a98 <system_apb_clock_set_mask+0x58>)
   17a6e:	4a0a      	ldr	r2, [pc, #40]	; (17a98 <system_apb_clock_set_mask+0x58>)
   17a70:	69d1      	ldr	r1, [r2, #28]
   17a72:	683a      	ldr	r2, [r7, #0]
   17a74:	430a      	orrs	r2, r1
   17a76:	61da      	str	r2, [r3, #28]
			break;
   17a78:	e008      	b.n	17a8c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   17a7a:	4b07      	ldr	r3, [pc, #28]	; (17a98 <system_apb_clock_set_mask+0x58>)
   17a7c:	4a06      	ldr	r2, [pc, #24]	; (17a98 <system_apb_clock_set_mask+0x58>)
   17a7e:	6a11      	ldr	r1, [r2, #32]
   17a80:	683a      	ldr	r2, [r7, #0]
   17a82:	430a      	orrs	r2, r1
   17a84:	621a      	str	r2, [r3, #32]
			break;
   17a86:	e001      	b.n	17a8c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   17a88:	2317      	movs	r3, #23
   17a8a:	e000      	b.n	17a8e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   17a8c:	2300      	movs	r3, #0
}
   17a8e:	0018      	movs	r0, r3
   17a90:	46bd      	mov	sp, r7
   17a92:	b002      	add	sp, #8
   17a94:	bd80      	pop	{r7, pc}
   17a96:	46c0      	nop			; (mov r8, r8)
   17a98:	40000400 	.word	0x40000400

00017a9c <system_pinmux_get_config_defaults>:
{
   17a9c:	b580      	push	{r7, lr}
   17a9e:	b082      	sub	sp, #8
   17aa0:	af00      	add	r7, sp, #0
   17aa2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17aa4:	687b      	ldr	r3, [r7, #4]
   17aa6:	2280      	movs	r2, #128	; 0x80
   17aa8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   17aaa:	687b      	ldr	r3, [r7, #4]
   17aac:	2200      	movs	r2, #0
   17aae:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   17ab0:	687b      	ldr	r3, [r7, #4]
   17ab2:	2201      	movs	r2, #1
   17ab4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   17ab6:	687b      	ldr	r3, [r7, #4]
   17ab8:	2200      	movs	r2, #0
   17aba:	70da      	strb	r2, [r3, #3]
}
   17abc:	46c0      	nop			; (mov r8, r8)
   17abe:	46bd      	mov	sp, r7
   17ac0:	b002      	add	sp, #8
   17ac2:	bd80      	pop	{r7, pc}

00017ac4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   17ac4:	b580      	push	{r7, lr}
   17ac6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   17ac8:	4b05      	ldr	r3, [pc, #20]	; (17ae0 <system_is_debugger_present+0x1c>)
   17aca:	789b      	ldrb	r3, [r3, #2]
   17acc:	b2db      	uxtb	r3, r3
   17ace:	001a      	movs	r2, r3
   17ad0:	2302      	movs	r3, #2
   17ad2:	4013      	ands	r3, r2
   17ad4:	1e5a      	subs	r2, r3, #1
   17ad6:	4193      	sbcs	r3, r2
   17ad8:	b2db      	uxtb	r3, r3
}
   17ada:	0018      	movs	r0, r3
   17adc:	46bd      	mov	sp, r7
   17ade:	bd80      	pop	{r7, pc}
   17ae0:	41002000 	.word	0x41002000

00017ae4 <system_interrupt_enter_critical_section>:
{
   17ae4:	b580      	push	{r7, lr}
   17ae6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   17ae8:	4b02      	ldr	r3, [pc, #8]	; (17af4 <system_interrupt_enter_critical_section+0x10>)
   17aea:	4798      	blx	r3
}
   17aec:	46c0      	nop			; (mov r8, r8)
   17aee:	46bd      	mov	sp, r7
   17af0:	bd80      	pop	{r7, pc}
   17af2:	46c0      	nop			; (mov r8, r8)
   17af4:	00026759 	.word	0x00026759

00017af8 <system_interrupt_leave_critical_section>:
{
   17af8:	b580      	push	{r7, lr}
   17afa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   17afc:	4b02      	ldr	r3, [pc, #8]	; (17b08 <system_interrupt_leave_critical_section+0x10>)
   17afe:	4798      	blx	r3
}
   17b00:	46c0      	nop			; (mov r8, r8)
   17b02:	46bd      	mov	sp, r7
   17b04:	bd80      	pop	{r7, pc}
   17b06:	46c0      	nop			; (mov r8, r8)
   17b08:	000267ad 	.word	0x000267ad

00017b0c <system_interrupt_disable>:
{
   17b0c:	b580      	push	{r7, lr}
   17b0e:	b082      	sub	sp, #8
   17b10:	af00      	add	r7, sp, #0
   17b12:	0002      	movs	r2, r0
   17b14:	1dfb      	adds	r3, r7, #7
   17b16:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   17b18:	4a07      	ldr	r2, [pc, #28]	; (17b38 <system_interrupt_disable+0x2c>)
   17b1a:	1dfb      	adds	r3, r7, #7
   17b1c:	781b      	ldrb	r3, [r3, #0]
   17b1e:	0019      	movs	r1, r3
   17b20:	231f      	movs	r3, #31
   17b22:	400b      	ands	r3, r1
   17b24:	2101      	movs	r1, #1
   17b26:	4099      	lsls	r1, r3
   17b28:	000b      	movs	r3, r1
   17b2a:	0019      	movs	r1, r3
   17b2c:	2380      	movs	r3, #128	; 0x80
   17b2e:	50d1      	str	r1, [r2, r3]
}
   17b30:	46c0      	nop			; (mov r8, r8)
   17b32:	46bd      	mov	sp, r7
   17b34:	b002      	add	sp, #8
   17b36:	bd80      	pop	{r7, pc}
   17b38:	e000e100 	.word	0xe000e100

00017b3c <i2c_master_is_syncing>:
{
   17b3c:	b580      	push	{r7, lr}
   17b3e:	b084      	sub	sp, #16
   17b40:	af00      	add	r7, sp, #0
   17b42:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   17b44:	687b      	ldr	r3, [r7, #4]
   17b46:	681b      	ldr	r3, [r3, #0]
   17b48:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   17b4a:	68fb      	ldr	r3, [r7, #12]
   17b4c:	69db      	ldr	r3, [r3, #28]
   17b4e:	2207      	movs	r2, #7
   17b50:	4013      	ands	r3, r2
   17b52:	1e5a      	subs	r2, r3, #1
   17b54:	4193      	sbcs	r3, r2
   17b56:	b2db      	uxtb	r3, r3
}
   17b58:	0018      	movs	r0, r3
   17b5a:	46bd      	mov	sp, r7
   17b5c:	b004      	add	sp, #16
   17b5e:	bd80      	pop	{r7, pc}

00017b60 <_i2c_master_wait_for_sync>:
{
   17b60:	b580      	push	{r7, lr}
   17b62:	b082      	sub	sp, #8
   17b64:	af00      	add	r7, sp, #0
   17b66:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   17b68:	46c0      	nop			; (mov r8, r8)
   17b6a:	687b      	ldr	r3, [r7, #4]
   17b6c:	0018      	movs	r0, r3
   17b6e:	4b04      	ldr	r3, [pc, #16]	; (17b80 <_i2c_master_wait_for_sync+0x20>)
   17b70:	4798      	blx	r3
   17b72:	1e03      	subs	r3, r0, #0
   17b74:	d1f9      	bne.n	17b6a <_i2c_master_wait_for_sync+0xa>
}
   17b76:	46c0      	nop			; (mov r8, r8)
   17b78:	46bd      	mov	sp, r7
   17b7a:	b002      	add	sp, #8
   17b7c:	bd80      	pop	{r7, pc}
   17b7e:	46c0      	nop			; (mov r8, r8)
   17b80:	00017b3d 	.word	0x00017b3d

00017b84 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   17b84:	b580      	push	{r7, lr}
   17b86:	b084      	sub	sp, #16
   17b88:	af00      	add	r7, sp, #0
   17b8a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17b8c:	687b      	ldr	r3, [r7, #4]
   17b8e:	681b      	ldr	r3, [r3, #0]
   17b90:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   17b92:	687b      	ldr	r3, [r7, #4]
   17b94:	681b      	ldr	r3, [r3, #0]
   17b96:	0018      	movs	r0, r3
   17b98:	4b0d      	ldr	r3, [pc, #52]	; (17bd0 <i2c_master_disable+0x4c>)
   17b9a:	4798      	blx	r3
   17b9c:	0003      	movs	r3, r0
   17b9e:	0018      	movs	r0, r3
   17ba0:	4b0c      	ldr	r3, [pc, #48]	; (17bd4 <i2c_master_disable+0x50>)
   17ba2:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   17ba4:	687b      	ldr	r3, [r7, #4]
   17ba6:	0018      	movs	r0, r3
   17ba8:	4b0b      	ldr	r3, [pc, #44]	; (17bd8 <i2c_master_disable+0x54>)
   17baa:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   17bac:	68fb      	ldr	r3, [r7, #12]
   17bae:	2283      	movs	r2, #131	; 0x83
   17bb0:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   17bb2:	68fb      	ldr	r3, [r7, #12]
   17bb4:	2283      	movs	r2, #131	; 0x83
   17bb6:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   17bb8:	68fb      	ldr	r3, [r7, #12]
   17bba:	681b      	ldr	r3, [r3, #0]
   17bbc:	2202      	movs	r2, #2
   17bbe:	4393      	bics	r3, r2
   17bc0:	001a      	movs	r2, r3
   17bc2:	68fb      	ldr	r3, [r7, #12]
   17bc4:	601a      	str	r2, [r3, #0]

}
   17bc6:	46c0      	nop			; (mov r8, r8)
   17bc8:	46bd      	mov	sp, r7
   17bca:	b004      	add	sp, #16
   17bcc:	bd80      	pop	{r7, pc}
   17bce:	46c0      	nop			; (mov r8, r8)
   17bd0:	00027c2d 	.word	0x00027c2d
   17bd4:	00017b0d 	.word	0x00017b0d
   17bd8:	00017b61 	.word	0x00017b61

00017bdc <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   17bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   17bde:	b097      	sub	sp, #92	; 0x5c
   17be0:	af00      	add	r7, sp, #0
   17be2:	6178      	str	r0, [r7, #20]
   17be4:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   17be6:	2300      	movs	r3, #0
   17be8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   17bea:	2300      	movs	r3, #0
   17bec:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   17bee:	2300      	movs	r3, #0
   17bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   17bf2:	233b      	movs	r3, #59	; 0x3b
   17bf4:	2210      	movs	r2, #16
   17bf6:	4694      	mov	ip, r2
   17bf8:	44bc      	add	ip, r7
   17bfa:	4463      	add	r3, ip
   17bfc:	2200      	movs	r2, #0
   17bfe:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17c00:	697b      	ldr	r3, [r7, #20]
   17c02:	681b      	ldr	r3, [r3, #0]
   17c04:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   17c06:	697b      	ldr	r3, [r7, #20]
   17c08:	681b      	ldr	r3, [r3, #0]
   17c0a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   17c0c:	2323      	movs	r3, #35	; 0x23
   17c0e:	2210      	movs	r2, #16
   17c10:	18ba      	adds	r2, r7, r2
   17c12:	18d4      	adds	r4, r2, r3
   17c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17c16:	0018      	movs	r0, r3
   17c18:	4bc0      	ldr	r3, [pc, #768]	; (17f1c <_i2c_master_set_config+0x340>)
   17c1a:	4798      	blx	r3
   17c1c:	0003      	movs	r3, r0
   17c1e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   17c20:	230c      	movs	r3, #12
   17c22:	2210      	movs	r2, #16
   17c24:	4694      	mov	ip, r2
   17c26:	44bc      	add	ip, r7
   17c28:	4463      	add	r3, ip
   17c2a:	0018      	movs	r0, r3
   17c2c:	4bbc      	ldr	r3, [pc, #752]	; (17f20 <_i2c_master_set_config+0x344>)
   17c2e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   17c30:	693b      	ldr	r3, [r7, #16]
   17c32:	69db      	ldr	r3, [r3, #28]
   17c34:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   17c36:	693b      	ldr	r3, [r7, #16]
   17c38:	6a1b      	ldr	r3, [r3, #32]
   17c3a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   17c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17c3e:	2b00      	cmp	r3, #0
   17c40:	d106      	bne.n	17c50 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   17c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17c44:	2100      	movs	r1, #0
   17c46:	0018      	movs	r0, r3
   17c48:	4bb6      	ldr	r3, [pc, #728]	; (17f24 <_i2c_master_set_config+0x348>)
   17c4a:	4798      	blx	r3
   17c4c:	0003      	movs	r3, r0
   17c4e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   17c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17c52:	b2da      	uxtb	r2, r3
   17c54:	230c      	movs	r3, #12
   17c56:	2110      	movs	r1, #16
   17c58:	468c      	mov	ip, r1
   17c5a:	44bc      	add	ip, r7
   17c5c:	4463      	add	r3, ip
   17c5e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17c60:	230c      	movs	r3, #12
   17c62:	2210      	movs	r2, #16
   17c64:	4694      	mov	ip, r2
   17c66:	44bc      	add	ip, r7
   17c68:	4463      	add	r3, ip
   17c6a:	2202      	movs	r2, #2
   17c6c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   17c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17c70:	0c1b      	lsrs	r3, r3, #16
   17c72:	b2db      	uxtb	r3, r3
   17c74:	220c      	movs	r2, #12
   17c76:	2110      	movs	r1, #16
   17c78:	468c      	mov	ip, r1
   17c7a:	44bc      	add	ip, r7
   17c7c:	4462      	add	r2, ip
   17c7e:	0011      	movs	r1, r2
   17c80:	0018      	movs	r0, r3
   17c82:	4ba9      	ldr	r3, [pc, #676]	; (17f28 <_i2c_master_set_config+0x34c>)
   17c84:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   17c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17c88:	2b00      	cmp	r3, #0
   17c8a:	d106      	bne.n	17c9a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   17c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17c8e:	2101      	movs	r1, #1
   17c90:	0018      	movs	r0, r3
   17c92:	4ba4      	ldr	r3, [pc, #656]	; (17f24 <_i2c_master_set_config+0x348>)
   17c94:	4798      	blx	r3
   17c96:	0003      	movs	r3, r0
   17c98:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   17c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17c9c:	b2da      	uxtb	r2, r3
   17c9e:	230c      	movs	r3, #12
   17ca0:	2110      	movs	r1, #16
   17ca2:	468c      	mov	ip, r1
   17ca4:	44bc      	add	ip, r7
   17ca6:	4463      	add	r3, ip
   17ca8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17caa:	230c      	movs	r3, #12
   17cac:	2210      	movs	r2, #16
   17cae:	4694      	mov	ip, r2
   17cb0:	44bc      	add	ip, r7
   17cb2:	4463      	add	r3, ip
   17cb4:	2202      	movs	r2, #2
   17cb6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   17cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17cba:	0c1b      	lsrs	r3, r3, #16
   17cbc:	b2db      	uxtb	r3, r3
   17cbe:	220c      	movs	r2, #12
   17cc0:	2110      	movs	r1, #16
   17cc2:	468c      	mov	ip, r1
   17cc4:	44bc      	add	ip, r7
   17cc6:	4462      	add	r2, ip
   17cc8:	0011      	movs	r1, r2
   17cca:	0018      	movs	r0, r3
   17ccc:	4b96      	ldr	r3, [pc, #600]	; (17f28 <_i2c_master_set_config+0x34c>)
   17cce:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   17cd0:	693b      	ldr	r3, [r7, #16]
   17cd2:	8a9a      	ldrh	r2, [r3, #20]
   17cd4:	697b      	ldr	r3, [r7, #20]
   17cd6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   17cd8:	693b      	ldr	r3, [r7, #16]
   17cda:	8ada      	ldrh	r2, [r3, #22]
   17cdc:	697b      	ldr	r3, [r7, #20]
   17cde:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   17ce0:	693b      	ldr	r3, [r7, #16]
   17ce2:	7e1b      	ldrb	r3, [r3, #24]
   17ce4:	2b00      	cmp	r3, #0
   17ce6:	d103      	bne.n	17cf0 <_i2c_master_set_config+0x114>
   17ce8:	4b90      	ldr	r3, [pc, #576]	; (17f2c <_i2c_master_set_config+0x350>)
   17cea:	4798      	blx	r3
   17cec:	1e03      	subs	r3, r0, #0
   17cee:	d002      	beq.n	17cf6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   17cf0:	2380      	movs	r3, #128	; 0x80
   17cf2:	657b      	str	r3, [r7, #84]	; 0x54
   17cf4:	e001      	b.n	17cfa <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   17cf6:	2300      	movs	r3, #0
   17cf8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   17cfa:	693b      	ldr	r3, [r7, #16]
   17cfc:	691b      	ldr	r3, [r3, #16]
   17cfe:	2b00      	cmp	r3, #0
   17d00:	d004      	beq.n	17d0c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   17d02:	693b      	ldr	r3, [r7, #16]
   17d04:	691b      	ldr	r3, [r3, #16]
   17d06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17d08:	4313      	orrs	r3, r2
   17d0a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   17d0c:	693b      	ldr	r3, [r7, #16]
   17d0e:	689b      	ldr	r3, [r3, #8]
   17d10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17d12:	4313      	orrs	r3, r2
   17d14:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   17d16:	693b      	ldr	r3, [r7, #16]
   17d18:	2224      	movs	r2, #36	; 0x24
   17d1a:	5c9b      	ldrb	r3, [r3, r2]
   17d1c:	2b00      	cmp	r3, #0
   17d1e:	d004      	beq.n	17d2a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   17d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17d22:	2280      	movs	r2, #128	; 0x80
   17d24:	05d2      	lsls	r2, r2, #23
   17d26:	4313      	orrs	r3, r2
   17d28:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   17d2a:	693b      	ldr	r3, [r7, #16]
   17d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17d2e:	2b00      	cmp	r3, #0
   17d30:	d004      	beq.n	17d3c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   17d32:	693b      	ldr	r3, [r7, #16]
   17d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17d36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17d38:	4313      	orrs	r3, r2
   17d3a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   17d3c:	693b      	ldr	r3, [r7, #16]
   17d3e:	222c      	movs	r2, #44	; 0x2c
   17d40:	5c9b      	ldrb	r3, [r3, r2]
   17d42:	2b00      	cmp	r3, #0
   17d44:	d105      	bne.n	17d52 <_i2c_master_set_config+0x176>
   17d46:	693b      	ldr	r3, [r7, #16]
   17d48:	689a      	ldr	r2, [r3, #8]
   17d4a:	2380      	movs	r3, #128	; 0x80
   17d4c:	049b      	lsls	r3, r3, #18
   17d4e:	429a      	cmp	r2, r3
   17d50:	d104      	bne.n	17d5c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   17d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17d54:	2280      	movs	r2, #128	; 0x80
   17d56:	0512      	lsls	r2, r2, #20
   17d58:	4313      	orrs	r3, r2
   17d5a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   17d5c:	693b      	ldr	r3, [r7, #16]
   17d5e:	222d      	movs	r2, #45	; 0x2d
   17d60:	5c9b      	ldrb	r3, [r3, r2]
   17d62:	2b00      	cmp	r3, #0
   17d64:	d004      	beq.n	17d70 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   17d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17d68:	2280      	movs	r2, #128	; 0x80
   17d6a:	0412      	lsls	r2, r2, #16
   17d6c:	4313      	orrs	r3, r2
   17d6e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   17d70:	693b      	ldr	r3, [r7, #16]
   17d72:	222e      	movs	r2, #46	; 0x2e
   17d74:	5c9b      	ldrb	r3, [r3, r2]
   17d76:	2b00      	cmp	r3, #0
   17d78:	d004      	beq.n	17d84 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   17d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17d7c:	2280      	movs	r2, #128	; 0x80
   17d7e:	03d2      	lsls	r2, r2, #15
   17d80:	4313      	orrs	r3, r2
   17d82:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   17d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17d86:	681a      	ldr	r2, [r3, #0]
   17d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17d8a:	431a      	orrs	r2, r3
   17d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17d8e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   17d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17d92:	2280      	movs	r2, #128	; 0x80
   17d94:	0052      	lsls	r2, r2, #1
   17d96:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   17d98:	2323      	movs	r3, #35	; 0x23
   17d9a:	2210      	movs	r2, #16
   17d9c:	4694      	mov	ip, r2
   17d9e:	44bc      	add	ip, r7
   17da0:	4463      	add	r3, ip
   17da2:	781b      	ldrb	r3, [r3, #0]
   17da4:	3314      	adds	r3, #20
   17da6:	b2db      	uxtb	r3, r3
   17da8:	0018      	movs	r0, r3
   17daa:	4b61      	ldr	r3, [pc, #388]	; (17f30 <_i2c_master_set_config+0x354>)
   17dac:	4798      	blx	r3
   17dae:	0003      	movs	r3, r0
   17db0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   17db2:	693b      	ldr	r3, [r7, #16]
   17db4:	681b      	ldr	r3, [r3, #0]
   17db6:	22fa      	movs	r2, #250	; 0xfa
   17db8:	0092      	lsls	r2, r2, #2
   17dba:	4353      	muls	r3, r2
   17dbc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   17dbe:	693b      	ldr	r3, [r7, #16]
   17dc0:	685b      	ldr	r3, [r3, #4]
   17dc2:	22fa      	movs	r2, #250	; 0xfa
   17dc4:	0092      	lsls	r2, r2, #2
   17dc6:	4353      	muls	r3, r2
   17dc8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   17dca:	693b      	ldr	r3, [r7, #16]
   17dcc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   17dce:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   17dd0:	4b58      	ldr	r3, [pc, #352]	; (17f34 <_i2c_master_set_config+0x358>)
   17dd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17dd4:	4798      	blx	r3
   17dd6:	0005      	movs	r5, r0
   17dd8:	000e      	movs	r6, r1
   17dda:	4b56      	ldr	r3, [pc, #344]	; (17f34 <_i2c_master_set_config+0x358>)
   17ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   17dde:	4798      	blx	r3
   17de0:	60b8      	str	r0, [r7, #8]
   17de2:	60f9      	str	r1, [r7, #12]
   17de4:	4b53      	ldr	r3, [pc, #332]	; (17f34 <_i2c_master_set_config+0x358>)
   17de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17de8:	4798      	blx	r3
   17dea:	4c53      	ldr	r4, [pc, #332]	; (17f38 <_i2c_master_set_config+0x35c>)
   17dec:	4a53      	ldr	r2, [pc, #332]	; (17f3c <_i2c_master_set_config+0x360>)
   17dee:	4b54      	ldr	r3, [pc, #336]	; (17f40 <_i2c_master_set_config+0x364>)
   17df0:	47a0      	blx	r4
   17df2:	0003      	movs	r3, r0
   17df4:	000c      	movs	r4, r1
   17df6:	603b      	str	r3, [r7, #0]
   17df8:	607c      	str	r4, [r7, #4]
   17dfa:	4b4e      	ldr	r3, [pc, #312]	; (17f34 <_i2c_master_set_config+0x358>)
   17dfc:	6a38      	ldr	r0, [r7, #32]
   17dfe:	4798      	blx	r3
   17e00:	0002      	movs	r2, r0
   17e02:	000b      	movs	r3, r1
   17e04:	4c4c      	ldr	r4, [pc, #304]	; (17f38 <_i2c_master_set_config+0x35c>)
   17e06:	6838      	ldr	r0, [r7, #0]
   17e08:	6879      	ldr	r1, [r7, #4]
   17e0a:	47a0      	blx	r4
   17e0c:	0003      	movs	r3, r0
   17e0e:	000c      	movs	r4, r1
   17e10:	0018      	movs	r0, r3
   17e12:	0021      	movs	r1, r4
   17e14:	4c4b      	ldr	r4, [pc, #300]	; (17f44 <_i2c_master_set_config+0x368>)
   17e16:	2200      	movs	r2, #0
   17e18:	4b4b      	ldr	r3, [pc, #300]	; (17f48 <_i2c_master_set_config+0x36c>)
   17e1a:	47a0      	blx	r4
   17e1c:	0003      	movs	r3, r0
   17e1e:	000c      	movs	r4, r1
   17e20:	001a      	movs	r2, r3
   17e22:	0023      	movs	r3, r4
   17e24:	4c44      	ldr	r4, [pc, #272]	; (17f38 <_i2c_master_set_config+0x35c>)
   17e26:	68b8      	ldr	r0, [r7, #8]
   17e28:	68f9      	ldr	r1, [r7, #12]
   17e2a:	47a0      	blx	r4
   17e2c:	0003      	movs	r3, r0
   17e2e:	000c      	movs	r4, r1
   17e30:	001a      	movs	r2, r3
   17e32:	0023      	movs	r3, r4
   17e34:	4c45      	ldr	r4, [pc, #276]	; (17f4c <_i2c_master_set_config+0x370>)
   17e36:	0028      	movs	r0, r5
   17e38:	0031      	movs	r1, r6
   17e3a:	47a0      	blx	r4
   17e3c:	0003      	movs	r3, r0
   17e3e:	000c      	movs	r4, r1
   17e40:	001d      	movs	r5, r3
   17e42:	0026      	movs	r6, r4
   17e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e46:	005a      	lsls	r2, r3, #1
   17e48:	4b3a      	ldr	r3, [pc, #232]	; (17f34 <_i2c_master_set_config+0x358>)
   17e4a:	0010      	movs	r0, r2
   17e4c:	4798      	blx	r3
   17e4e:	0002      	movs	r2, r0
   17e50:	000b      	movs	r3, r1
   17e52:	4c3c      	ldr	r4, [pc, #240]	; (17f44 <_i2c_master_set_config+0x368>)
   17e54:	0028      	movs	r0, r5
   17e56:	0031      	movs	r1, r6
   17e58:	47a0      	blx	r4
   17e5a:	0003      	movs	r3, r0
   17e5c:	000c      	movs	r4, r1
   17e5e:	0018      	movs	r0, r3
   17e60:	0021      	movs	r1, r4
   17e62:	4c3a      	ldr	r4, [pc, #232]	; (17f4c <_i2c_master_set_config+0x370>)
   17e64:	2200      	movs	r2, #0
   17e66:	4b3a      	ldr	r3, [pc, #232]	; (17f50 <_i2c_master_set_config+0x374>)
   17e68:	47a0      	blx	r4
   17e6a:	0003      	movs	r3, r0
   17e6c:	000c      	movs	r4, r1
   17e6e:	001d      	movs	r5, r3
   17e70:	0026      	movs	r6, r4
   17e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e74:	005a      	lsls	r2, r3, #1
   17e76:	4b2f      	ldr	r3, [pc, #188]	; (17f34 <_i2c_master_set_config+0x358>)
   17e78:	0010      	movs	r0, r2
   17e7a:	4798      	blx	r3
   17e7c:	0002      	movs	r2, r0
   17e7e:	000b      	movs	r3, r1
   17e80:	4c34      	ldr	r4, [pc, #208]	; (17f54 <_i2c_master_set_config+0x378>)
   17e82:	0028      	movs	r0, r5
   17e84:	0031      	movs	r1, r6
   17e86:	47a0      	blx	r4
   17e88:	0003      	movs	r3, r0
   17e8a:	000c      	movs	r4, r1
   17e8c:	0019      	movs	r1, r3
   17e8e:	0022      	movs	r2, r4
   17e90:	4b31      	ldr	r3, [pc, #196]	; (17f58 <_i2c_master_set_config+0x37c>)
   17e92:	0008      	movs	r0, r1
   17e94:	0011      	movs	r1, r2
   17e96:	4798      	blx	r3
   17e98:	0003      	movs	r3, r0
   17e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   17e9c:	693b      	ldr	r3, [r7, #16]
   17e9e:	689a      	ldr	r2, [r3, #8]
   17ea0:	2380      	movs	r3, #128	; 0x80
   17ea2:	049b      	lsls	r3, r3, #18
   17ea4:	429a      	cmp	r2, r3
   17ea6:	d16a      	bne.n	17f7e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   17ea8:	4b22      	ldr	r3, [pc, #136]	; (17f34 <_i2c_master_set_config+0x358>)
   17eaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17eac:	4798      	blx	r3
   17eae:	4c25      	ldr	r4, [pc, #148]	; (17f44 <_i2c_master_set_config+0x368>)
   17eb0:	0002      	movs	r2, r0
   17eb2:	000b      	movs	r3, r1
   17eb4:	47a0      	blx	r4
   17eb6:	0003      	movs	r3, r0
   17eb8:	000c      	movs	r4, r1
   17eba:	001d      	movs	r5, r3
   17ebc:	0026      	movs	r6, r4
   17ebe:	4b1d      	ldr	r3, [pc, #116]	; (17f34 <_i2c_master_set_config+0x358>)
   17ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   17ec2:	4798      	blx	r3
   17ec4:	4c1c      	ldr	r4, [pc, #112]	; (17f38 <_i2c_master_set_config+0x35c>)
   17ec6:	2200      	movs	r2, #0
   17ec8:	4b24      	ldr	r3, [pc, #144]	; (17f5c <_i2c_master_set_config+0x380>)
   17eca:	47a0      	blx	r4
   17ecc:	0003      	movs	r3, r0
   17ece:	000c      	movs	r4, r1
   17ed0:	001a      	movs	r2, r3
   17ed2:	0023      	movs	r3, r4
   17ed4:	4c1f      	ldr	r4, [pc, #124]	; (17f54 <_i2c_master_set_config+0x378>)
   17ed6:	0028      	movs	r0, r5
   17ed8:	0031      	movs	r1, r6
   17eda:	47a0      	blx	r4
   17edc:	0003      	movs	r3, r0
   17ede:	000c      	movs	r4, r1
   17ee0:	0018      	movs	r0, r3
   17ee2:	0021      	movs	r1, r4
   17ee4:	4c19      	ldr	r4, [pc, #100]	; (17f4c <_i2c_master_set_config+0x370>)
   17ee6:	2200      	movs	r2, #0
   17ee8:	4b19      	ldr	r3, [pc, #100]	; (17f50 <_i2c_master_set_config+0x374>)
   17eea:	47a0      	blx	r4
   17eec:	0003      	movs	r3, r0
   17eee:	000c      	movs	r4, r1
   17ef0:	0019      	movs	r1, r3
   17ef2:	0022      	movs	r2, r4
   17ef4:	4b18      	ldr	r3, [pc, #96]	; (17f58 <_i2c_master_set_config+0x37c>)
   17ef6:	0008      	movs	r0, r1
   17ef8:	0011      	movs	r1, r2
   17efa:	4798      	blx	r3
   17efc:	0003      	movs	r3, r0
   17efe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   17f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17f02:	2b00      	cmp	r3, #0
   17f04:	d02e      	beq.n	17f64 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   17f06:	4b16      	ldr	r3, [pc, #88]	; (17f60 <_i2c_master_set_config+0x384>)
   17f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17f0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17f0c:	4798      	blx	r3
   17f0e:	0003      	movs	r3, r0
   17f10:	1e9a      	subs	r2, r3, #2
   17f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17f14:	1ad3      	subs	r3, r2, r3
   17f16:	653b      	str	r3, [r7, #80]	; 0x50
   17f18:	e031      	b.n	17f7e <_i2c_master_set_config+0x3a2>
   17f1a:	46c0      	nop			; (mov r8, r8)
   17f1c:	00027b5d 	.word	0x00027b5d
   17f20:	00017a9d 	.word	0x00017a9d
   17f24:	000279a1 	.word	0x000279a1
   17f28:	0002a74d 	.word	0x0002a74d
   17f2c:	00017ac5 	.word	0x00017ac5
   17f30:	0002a511 	.word	0x0002a511
   17f34:	00034e05 	.word	0x00034e05
   17f38:	00034271 	.word	0x00034271
   17f3c:	e826d695 	.word	0xe826d695
   17f40:	3e112e0b 	.word	0x3e112e0b
   17f44:	000335e9 	.word	0x000335e9
   17f48:	40240000 	.word	0x40240000
   17f4c:	00034771 	.word	0x00034771
   17f50:	3ff00000 	.word	0x3ff00000
   17f54:	00033c09 	.word	0x00033c09
   17f58:	00034d9d 	.word	0x00034d9d
   17f5c:	40080000 	.word	0x40080000
   17f60:	00032f89 	.word	0x00032f89
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   17f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17f66:	005a      	lsls	r2, r3, #1
   17f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17f6a:	18d3      	adds	r3, r2, r3
   17f6c:	1e5a      	subs	r2, r3, #1
   17f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17f70:	0059      	lsls	r1, r3, #1
   17f72:	4b1d      	ldr	r3, [pc, #116]	; (17fe8 <_i2c_master_set_config+0x40c>)
   17f74:	0010      	movs	r0, r2
   17f76:	4798      	blx	r3
   17f78:	0003      	movs	r3, r0
   17f7a:	3b01      	subs	r3, #1
   17f7c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   17f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17f80:	2bff      	cmp	r3, #255	; 0xff
   17f82:	dc08      	bgt.n	17f96 <_i2c_master_set_config+0x3ba>
   17f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17f86:	2b00      	cmp	r3, #0
   17f88:	db05      	blt.n	17f96 <_i2c_master_set_config+0x3ba>
   17f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17f8c:	2bff      	cmp	r3, #255	; 0xff
   17f8e:	dc02      	bgt.n	17f96 <_i2c_master_set_config+0x3ba>
   17f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17f92:	2b00      	cmp	r3, #0
   17f94:	da06      	bge.n	17fa4 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17f96:	233b      	movs	r3, #59	; 0x3b
   17f98:	2210      	movs	r2, #16
   17f9a:	4694      	mov	ip, r2
   17f9c:	44bc      	add	ip, r7
   17f9e:	4463      	add	r3, ip
   17fa0:	2240      	movs	r2, #64	; 0x40
   17fa2:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   17fa4:	233b      	movs	r3, #59	; 0x3b
   17fa6:	2210      	movs	r2, #16
   17fa8:	4694      	mov	ip, r2
   17faa:	44bc      	add	ip, r7
   17fac:	4463      	add	r3, ip
   17fae:	781b      	ldrb	r3, [r3, #0]
   17fb0:	2b40      	cmp	r3, #64	; 0x40
   17fb2:	d00e      	beq.n	17fd2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17fb6:	22ff      	movs	r2, #255	; 0xff
   17fb8:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   17fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17fbc:	041b      	lsls	r3, r3, #16
   17fbe:	0019      	movs	r1, r3
   17fc0:	23ff      	movs	r3, #255	; 0xff
   17fc2:	041b      	lsls	r3, r3, #16
   17fc4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17fc6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   17fc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   17fca:	0612      	lsls	r2, r2, #24
   17fcc:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17fd0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   17fd2:	233b      	movs	r3, #59	; 0x3b
   17fd4:	2210      	movs	r2, #16
   17fd6:	4694      	mov	ip, r2
   17fd8:	44bc      	add	ip, r7
   17fda:	4463      	add	r3, ip
   17fdc:	781b      	ldrb	r3, [r3, #0]
}
   17fde:	0018      	movs	r0, r3
   17fe0:	46bd      	mov	sp, r7
   17fe2:	b017      	add	sp, #92	; 0x5c
   17fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17fe6:	46c0      	nop			; (mov r8, r8)
   17fe8:	00032f89 	.word	0x00032f89

00017fec <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   17fec:	b590      	push	{r4, r7, lr}
   17fee:	b08b      	sub	sp, #44	; 0x2c
   17ff0:	af00      	add	r7, sp, #0
   17ff2:	60f8      	str	r0, [r7, #12]
   17ff4:	60b9      	str	r1, [r7, #8]
   17ff6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   17ff8:	68fb      	ldr	r3, [r7, #12]
   17ffa:	68ba      	ldr	r2, [r7, #8]
   17ffc:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17ffe:	68fb      	ldr	r3, [r7, #12]
   18000:	681b      	ldr	r3, [r3, #0]
   18002:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   18004:	68fb      	ldr	r3, [r7, #12]
   18006:	681b      	ldr	r3, [r3, #0]
   18008:	0018      	movs	r0, r3
   1800a:	4b3b      	ldr	r3, [pc, #236]	; (180f8 <i2c_master_init+0x10c>)
   1800c:	4798      	blx	r3
   1800e:	0003      	movs	r3, r0
   18010:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   18012:	6a3b      	ldr	r3, [r7, #32]
   18014:	3302      	adds	r3, #2
   18016:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   18018:	6a3b      	ldr	r3, [r7, #32]
   1801a:	3314      	adds	r3, #20
   1801c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1801e:	2201      	movs	r2, #1
   18020:	69fb      	ldr	r3, [r7, #28]
   18022:	409a      	lsls	r2, r3
   18024:	0013      	movs	r3, r2
   18026:	0019      	movs	r1, r3
   18028:	2002      	movs	r0, #2
   1802a:	4b34      	ldr	r3, [pc, #208]	; (180fc <i2c_master_init+0x110>)
   1802c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1802e:	2314      	movs	r3, #20
   18030:	18fb      	adds	r3, r7, r3
   18032:	0018      	movs	r0, r3
   18034:	4b32      	ldr	r3, [pc, #200]	; (18100 <i2c_master_init+0x114>)
   18036:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   18038:	687b      	ldr	r3, [r7, #4]
   1803a:	7b1a      	ldrb	r2, [r3, #12]
   1803c:	2314      	movs	r3, #20
   1803e:	18fb      	adds	r3, r7, r3
   18040:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   18042:	69bb      	ldr	r3, [r7, #24]
   18044:	b2db      	uxtb	r3, r3
   18046:	2214      	movs	r2, #20
   18048:	18ba      	adds	r2, r7, r2
   1804a:	0011      	movs	r1, r2
   1804c:	0018      	movs	r0, r3
   1804e:	4b2d      	ldr	r3, [pc, #180]	; (18104 <i2c_master_init+0x118>)
   18050:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   18052:	69bb      	ldr	r3, [r7, #24]
   18054:	b2db      	uxtb	r3, r3
   18056:	0018      	movs	r0, r3
   18058:	4b2b      	ldr	r3, [pc, #172]	; (18108 <i2c_master_init+0x11c>)
   1805a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1805c:	687b      	ldr	r3, [r7, #4]
   1805e:	7b1b      	ldrb	r3, [r3, #12]
   18060:	2100      	movs	r1, #0
   18062:	0018      	movs	r0, r3
   18064:	4b29      	ldr	r3, [pc, #164]	; (1810c <i2c_master_init+0x120>)
   18066:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   18068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1806a:	681b      	ldr	r3, [r3, #0]
   1806c:	2202      	movs	r2, #2
   1806e:	4013      	ands	r3, r2
   18070:	d001      	beq.n	18076 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   18072:	231c      	movs	r3, #28
   18074:	e03b      	b.n	180ee <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   18076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18078:	681b      	ldr	r3, [r3, #0]
   1807a:	2201      	movs	r2, #1
   1807c:	4013      	ands	r3, r2
   1807e:	d001      	beq.n	18084 <i2c_master_init+0x98>
		return STATUS_BUSY;
   18080:	2305      	movs	r3, #5
   18082:	e034      	b.n	180ee <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   18084:	68fb      	ldr	r3, [r7, #12]
   18086:	681b      	ldr	r3, [r3, #0]
   18088:	2217      	movs	r2, #23
   1808a:	18bc      	adds	r4, r7, r2
   1808c:	0018      	movs	r0, r3
   1808e:	4b1a      	ldr	r3, [pc, #104]	; (180f8 <i2c_master_init+0x10c>)
   18090:	4798      	blx	r3
   18092:	0003      	movs	r3, r0
   18094:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   18096:	4a1e      	ldr	r2, [pc, #120]	; (18110 <i2c_master_init+0x124>)
   18098:	2317      	movs	r3, #23
   1809a:	18fb      	adds	r3, r7, r3
   1809c:	781b      	ldrb	r3, [r3, #0]
   1809e:	0011      	movs	r1, r2
   180a0:	0018      	movs	r0, r3
   180a2:	4b1c      	ldr	r3, [pc, #112]	; (18114 <i2c_master_init+0x128>)
   180a4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   180a6:	2317      	movs	r3, #23
   180a8:	18fb      	adds	r3, r7, r3
   180aa:	781a      	ldrb	r2, [r3, #0]
   180ac:	4b1a      	ldr	r3, [pc, #104]	; (18118 <i2c_master_init+0x12c>)
   180ae:	0092      	lsls	r2, r2, #2
   180b0:	68f9      	ldr	r1, [r7, #12]
   180b2:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   180b4:	68fb      	ldr	r3, [r7, #12]
   180b6:	2200      	movs	r2, #0
   180b8:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   180ba:	68fb      	ldr	r3, [r7, #12]
   180bc:	2200      	movs	r2, #0
   180be:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   180c0:	68fb      	ldr	r3, [r7, #12]
   180c2:	2200      	movs	r2, #0
   180c4:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   180c6:	68fb      	ldr	r3, [r7, #12]
   180c8:	2200      	movs	r2, #0
   180ca:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   180cc:	68fb      	ldr	r3, [r7, #12]
   180ce:	2225      	movs	r2, #37	; 0x25
   180d0:	2100      	movs	r1, #0
   180d2:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   180d4:	68fb      	ldr	r3, [r7, #12]
   180d6:	2200      	movs	r2, #0
   180d8:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   180da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   180dc:	2214      	movs	r2, #20
   180de:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   180e0:	687a      	ldr	r2, [r7, #4]
   180e2:	68fb      	ldr	r3, [r7, #12]
   180e4:	0011      	movs	r1, r2
   180e6:	0018      	movs	r0, r3
   180e8:	4b0c      	ldr	r3, [pc, #48]	; (1811c <i2c_master_init+0x130>)
   180ea:	4798      	blx	r3
   180ec:	0003      	movs	r3, r0
}
   180ee:	0018      	movs	r0, r3
   180f0:	46bd      	mov	sp, r7
   180f2:	b00b      	add	sp, #44	; 0x2c
   180f4:	bd90      	pop	{r4, r7, pc}
   180f6:	46c0      	nop			; (mov r8, r8)
   180f8:	00027b5d 	.word	0x00027b5d
   180fc:	00017a41 	.word	0x00017a41
   18100:	00017a29 	.word	0x00017a29
   18104:	0002a3ed 	.word	0x0002a3ed
   18108:	0002a431 	.word	0x0002a431
   1810c:	00027915 	.word	0x00027915
   18110:	00013575 	.word	0x00013575
   18114:	00027bc1 	.word	0x00027bc1
   18118:	20005c08 	.word	0x20005c08
   1811c:	00017bdd 	.word	0x00017bdd

00018120 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   18120:	b580      	push	{r7, lr}
   18122:	b084      	sub	sp, #16
   18124:	af00      	add	r7, sp, #0
   18126:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18128:	687b      	ldr	r3, [r7, #4]
   1812a:	681b      	ldr	r3, [r3, #0]
   1812c:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1812e:	687b      	ldr	r3, [r7, #4]
   18130:	0018      	movs	r0, r3
   18132:	4b0f      	ldr	r3, [pc, #60]	; (18170 <i2c_master_reset+0x50>)
   18134:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   18136:	687b      	ldr	r3, [r7, #4]
   18138:	0018      	movs	r0, r3
   1813a:	4b0e      	ldr	r3, [pc, #56]	; (18174 <i2c_master_reset+0x54>)
   1813c:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   1813e:	4b0e      	ldr	r3, [pc, #56]	; (18178 <i2c_master_reset+0x58>)
   18140:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   18142:	687b      	ldr	r3, [r7, #4]
   18144:	681b      	ldr	r3, [r3, #0]
   18146:	0018      	movs	r0, r3
   18148:	4b0c      	ldr	r3, [pc, #48]	; (1817c <i2c_master_reset+0x5c>)
   1814a:	4798      	blx	r3
   1814c:	0003      	movs	r3, r0
   1814e:	0018      	movs	r0, r3
   18150:	4b0b      	ldr	r3, [pc, #44]	; (18180 <i2c_master_reset+0x60>)
   18152:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   18154:	4b0b      	ldr	r3, [pc, #44]	; (18184 <i2c_master_reset+0x64>)
   18156:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   18158:	687b      	ldr	r3, [r7, #4]
   1815a:	0018      	movs	r0, r3
   1815c:	4b04      	ldr	r3, [pc, #16]	; (18170 <i2c_master_reset+0x50>)
   1815e:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   18160:	68fb      	ldr	r3, [r7, #12]
   18162:	2201      	movs	r2, #1
   18164:	601a      	str	r2, [r3, #0]
}
   18166:	46c0      	nop			; (mov r8, r8)
   18168:	46bd      	mov	sp, r7
   1816a:	b004      	add	sp, #16
   1816c:	bd80      	pop	{r7, pc}
   1816e:	46c0      	nop			; (mov r8, r8)
   18170:	00017b61 	.word	0x00017b61
   18174:	00017b85 	.word	0x00017b85
   18178:	00017ae5 	.word	0x00017ae5
   1817c:	00027c2d 	.word	0x00027c2d
   18180:	0002a569 	.word	0x0002a569
   18184:	00017af9 	.word	0x00017af9

00018188 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   18188:	b580      	push	{r7, lr}
   1818a:	b084      	sub	sp, #16
   1818c:	af00      	add	r7, sp, #0
   1818e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18190:	687b      	ldr	r3, [r7, #4]
   18192:	681b      	ldr	r3, [r3, #0]
   18194:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   18196:	68fb      	ldr	r3, [r7, #12]
   18198:	7e1b      	ldrb	r3, [r3, #24]
   1819a:	b2db      	uxtb	r3, r3
   1819c:	001a      	movs	r2, r3
   1819e:	2302      	movs	r3, #2
   181a0:	4013      	ands	r3, r2
   181a2:	d00b      	beq.n	181bc <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   181a4:	68fb      	ldr	r3, [r7, #12]
   181a6:	2202      	movs	r2, #2
   181a8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   181aa:	68fb      	ldr	r3, [r7, #12]
   181ac:	8b5b      	ldrh	r3, [r3, #26]
   181ae:	b29b      	uxth	r3, r3
   181b0:	001a      	movs	r2, r3
   181b2:	2302      	movs	r3, #2
   181b4:	4013      	ands	r3, r2
   181b6:	d011      	beq.n	181dc <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   181b8:	2341      	movs	r3, #65	; 0x41
   181ba:	e010      	b.n	181de <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   181bc:	68fb      	ldr	r3, [r7, #12]
   181be:	8b5b      	ldrh	r3, [r3, #26]
   181c0:	b29b      	uxth	r3, r3
   181c2:	001a      	movs	r2, r3
   181c4:	2304      	movs	r3, #4
   181c6:	4013      	ands	r3, r2
   181c8:	d008      	beq.n	181dc <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   181ca:	68fb      	ldr	r3, [r7, #12]
   181cc:	685b      	ldr	r3, [r3, #4]
   181ce:	22c0      	movs	r2, #192	; 0xc0
   181d0:	0292      	lsls	r2, r2, #10
   181d2:	431a      	orrs	r2, r3
   181d4:	68fb      	ldr	r3, [r7, #12]
   181d6:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   181d8:	2318      	movs	r3, #24
   181da:	e000      	b.n	181de <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   181dc:	2300      	movs	r3, #0
}
   181de:	0018      	movs	r0, r3
   181e0:	46bd      	mov	sp, r7
   181e2:	b004      	add	sp, #16
   181e4:	bd80      	pop	{r7, pc}

000181e6 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   181e6:	b580      	push	{r7, lr}
   181e8:	b084      	sub	sp, #16
   181ea:	af00      	add	r7, sp, #0
   181ec:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   181ee:	687b      	ldr	r3, [r7, #4]
   181f0:	681b      	ldr	r3, [r3, #0]
   181f2:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   181f4:	230e      	movs	r3, #14
   181f6:	18fb      	adds	r3, r7, r3
   181f8:	2200      	movs	r2, #0
   181fa:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   181fc:	e00f      	b.n	1821e <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   181fe:	230e      	movs	r3, #14
   18200:	18fb      	adds	r3, r7, r3
   18202:	220e      	movs	r2, #14
   18204:	18ba      	adds	r2, r7, r2
   18206:	8812      	ldrh	r2, [r2, #0]
   18208:	3201      	adds	r2, #1
   1820a:	801a      	strh	r2, [r3, #0]
   1820c:	687b      	ldr	r3, [r7, #4]
   1820e:	891b      	ldrh	r3, [r3, #8]
   18210:	220e      	movs	r2, #14
   18212:	18ba      	adds	r2, r7, r2
   18214:	8812      	ldrh	r2, [r2, #0]
   18216:	429a      	cmp	r2, r3
   18218:	d301      	bcc.n	1821e <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   1821a:	2312      	movs	r3, #18
   1821c:	e00e      	b.n	1823c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1821e:	68bb      	ldr	r3, [r7, #8]
   18220:	7e1b      	ldrb	r3, [r3, #24]
   18222:	b2db      	uxtb	r3, r3
   18224:	001a      	movs	r2, r3
   18226:	2301      	movs	r3, #1
   18228:	4013      	ands	r3, r2
   1822a:	d106      	bne.n	1823a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   1822c:	68bb      	ldr	r3, [r7, #8]
   1822e:	7e1b      	ldrb	r3, [r3, #24]
   18230:	b2db      	uxtb	r3, r3
   18232:	001a      	movs	r2, r3
   18234:	2302      	movs	r3, #2
   18236:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18238:	d0e1      	beq.n	181fe <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   1823a:	2300      	movs	r3, #0
}
   1823c:	0018      	movs	r0, r3
   1823e:	46bd      	mov	sp, r7
   18240:	b004      	add	sp, #16
   18242:	bd80      	pop	{r7, pc}

00018244 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   18244:	b590      	push	{r4, r7, lr}
   18246:	b085      	sub	sp, #20
   18248:	af00      	add	r7, sp, #0
   1824a:	6078      	str	r0, [r7, #4]
   1824c:	000a      	movs	r2, r1
   1824e:	1cfb      	adds	r3, r7, #3
   18250:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18252:	687b      	ldr	r3, [r7, #4]
   18254:	681b      	ldr	r3, [r3, #0]
   18256:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   18258:	68fb      	ldr	r3, [r7, #12]
   1825a:	685b      	ldr	r3, [r3, #4]
   1825c:	2280      	movs	r2, #128	; 0x80
   1825e:	02d2      	lsls	r2, r2, #11
   18260:	431a      	orrs	r2, r3
   18262:	68fb      	ldr	r3, [r7, #12]
   18264:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   18266:	1cfb      	adds	r3, r7, #3
   18268:	781a      	ldrb	r2, [r3, #0]
   1826a:	68fb      	ldr	r3, [r7, #12]
   1826c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1826e:	230b      	movs	r3, #11
   18270:	18fc      	adds	r4, r7, r3
   18272:	687b      	ldr	r3, [r7, #4]
   18274:	0018      	movs	r0, r3
   18276:	4b07      	ldr	r3, [pc, #28]	; (18294 <_i2c_master_send_hs_master_code+0x50>)
   18278:	4798      	blx	r3
   1827a:	0003      	movs	r3, r0
   1827c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   1827e:	68fb      	ldr	r3, [r7, #12]
   18280:	2201      	movs	r2, #1
   18282:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   18284:	230b      	movs	r3, #11
   18286:	18fb      	adds	r3, r7, r3
   18288:	781b      	ldrb	r3, [r3, #0]
}
   1828a:	0018      	movs	r0, r3
   1828c:	46bd      	mov	sp, r7
   1828e:	b005      	add	sp, #20
   18290:	bd90      	pop	{r4, r7, pc}
   18292:	46c0      	nop			; (mov r8, r8)
   18294:	000181e7 	.word	0x000181e7

00018298 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   18298:	b580      	push	{r7, lr}
   1829a:	af00      	add	r7, sp, #0
   1829c:	2000      	movs	r0, #0
   1829e:	4b02      	ldr	r3, [pc, #8]	; (182a8 <TC3_Handler+0x10>)
   182a0:	4798      	blx	r3
   182a2:	46c0      	nop			; (mov r8, r8)
   182a4:	46bd      	mov	sp, r7
   182a6:	bd80      	pop	{r7, pc}
   182a8:	000182d5 	.word	0x000182d5

000182ac <TC4_Handler>:
   182ac:	b580      	push	{r7, lr}
   182ae:	af00      	add	r7, sp, #0
   182b0:	2001      	movs	r0, #1
   182b2:	4b02      	ldr	r3, [pc, #8]	; (182bc <TC4_Handler+0x10>)
   182b4:	4798      	blx	r3
   182b6:	46c0      	nop			; (mov r8, r8)
   182b8:	46bd      	mov	sp, r7
   182ba:	bd80      	pop	{r7, pc}
   182bc:	000182d5 	.word	0x000182d5

000182c0 <TC5_Handler>:
   182c0:	b580      	push	{r7, lr}
   182c2:	af00      	add	r7, sp, #0
   182c4:	2002      	movs	r0, #2
   182c6:	4b02      	ldr	r3, [pc, #8]	; (182d0 <TC5_Handler+0x10>)
   182c8:	4798      	blx	r3
   182ca:	46c0      	nop			; (mov r8, r8)
   182cc:	46bd      	mov	sp, r7
   182ce:	bd80      	pop	{r7, pc}
   182d0:	000182d5 	.word	0x000182d5

000182d4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   182d4:	b580      	push	{r7, lr}
   182d6:	b084      	sub	sp, #16
   182d8:	af00      	add	r7, sp, #0
   182da:	0002      	movs	r2, r0
   182dc:	1dfb      	adds	r3, r7, #7
   182de:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   182e0:	1dfb      	adds	r3, r7, #7
   182e2:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   182e4:	4b28      	ldr	r3, [pc, #160]	; (18388 <_tc_interrupt_handler+0xb4>)
   182e6:	0092      	lsls	r2, r2, #2
   182e8:	58d3      	ldr	r3, [r2, r3]
   182ea:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   182ec:	68fb      	ldr	r3, [r7, #12]
   182ee:	681b      	ldr	r3, [r3, #0]
   182f0:	7b9b      	ldrb	r3, [r3, #14]
   182f2:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   182f4:	68fa      	ldr	r2, [r7, #12]
   182f6:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   182f8:	4013      	ands	r3, r2
   182fa:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   182fc:	68fb      	ldr	r3, [r7, #12]
   182fe:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18300:	230b      	movs	r3, #11
   18302:	18fb      	adds	r3, r7, r3
   18304:	400a      	ands	r2, r1
   18306:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   18308:	230b      	movs	r3, #11
   1830a:	18fb      	adds	r3, r7, r3
   1830c:	781b      	ldrb	r3, [r3, #0]
   1830e:	2201      	movs	r2, #1
   18310:	4013      	ands	r3, r2
   18312:	d008      	beq.n	18326 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   18314:	68fb      	ldr	r3, [r7, #12]
   18316:	689b      	ldr	r3, [r3, #8]
   18318:	68fa      	ldr	r2, [r7, #12]
   1831a:	0010      	movs	r0, r2
   1831c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   1831e:	68fb      	ldr	r3, [r7, #12]
   18320:	681b      	ldr	r3, [r3, #0]
   18322:	2201      	movs	r2, #1
   18324:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   18326:	230b      	movs	r3, #11
   18328:	18fb      	adds	r3, r7, r3
   1832a:	781b      	ldrb	r3, [r3, #0]
   1832c:	2202      	movs	r2, #2
   1832e:	4013      	ands	r3, r2
   18330:	d008      	beq.n	18344 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   18332:	68fb      	ldr	r3, [r7, #12]
   18334:	68db      	ldr	r3, [r3, #12]
   18336:	68fa      	ldr	r2, [r7, #12]
   18338:	0010      	movs	r0, r2
   1833a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   1833c:	68fb      	ldr	r3, [r7, #12]
   1833e:	681b      	ldr	r3, [r3, #0]
   18340:	2202      	movs	r2, #2
   18342:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   18344:	230b      	movs	r3, #11
   18346:	18fb      	adds	r3, r7, r3
   18348:	781b      	ldrb	r3, [r3, #0]
   1834a:	2210      	movs	r2, #16
   1834c:	4013      	ands	r3, r2
   1834e:	d008      	beq.n	18362 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   18350:	68fb      	ldr	r3, [r7, #12]
   18352:	691b      	ldr	r3, [r3, #16]
   18354:	68fa      	ldr	r2, [r7, #12]
   18356:	0010      	movs	r0, r2
   18358:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   1835a:	68fb      	ldr	r3, [r7, #12]
   1835c:	681b      	ldr	r3, [r3, #0]
   1835e:	2210      	movs	r2, #16
   18360:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   18362:	230b      	movs	r3, #11
   18364:	18fb      	adds	r3, r7, r3
   18366:	781b      	ldrb	r3, [r3, #0]
   18368:	2220      	movs	r2, #32
   1836a:	4013      	ands	r3, r2
   1836c:	d008      	beq.n	18380 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   1836e:	68fb      	ldr	r3, [r7, #12]
   18370:	695b      	ldr	r3, [r3, #20]
   18372:	68fa      	ldr	r2, [r7, #12]
   18374:	0010      	movs	r0, r2
   18376:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   18378:	68fb      	ldr	r3, [r7, #12]
   1837a:	681b      	ldr	r3, [r3, #0]
   1837c:	2220      	movs	r2, #32
   1837e:	739a      	strb	r2, [r3, #14]
	}
}
   18380:	46c0      	nop			; (mov r8, r8)
   18382:	46bd      	mov	sp, r7
   18384:	b004      	add	sp, #16
   18386:	bd80      	pop	{r7, pc}
   18388:	200049f0 	.word	0x200049f0

0001838c <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   1838c:	b580      	push	{r7, lr}
   1838e:	b084      	sub	sp, #16
   18390:	af00      	add	r7, sp, #0
   18392:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   18394:	2300      	movs	r3, #0
   18396:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   18398:	687b      	ldr	r3, [r7, #4]
   1839a:	2b00      	cmp	r3, #0
   1839c:	d101      	bne.n	183a2 <FreeRTOS_CLIRegisterCommand+0x16>
   1839e:	b672      	cpsid	i
   183a0:	e7fe      	b.n	183a0 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   183a2:	2008      	movs	r0, #8
   183a4:	4b11      	ldr	r3, [pc, #68]	; (183ec <FreeRTOS_CLIRegisterCommand+0x60>)
   183a6:	4798      	blx	r3
   183a8:	0003      	movs	r3, r0
   183aa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   183ac:	68bb      	ldr	r3, [r7, #8]
   183ae:	2b00      	cmp	r3, #0
   183b0:	d101      	bne.n	183b6 <FreeRTOS_CLIRegisterCommand+0x2a>
   183b2:	b672      	cpsid	i
   183b4:	e7fe      	b.n	183b4 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   183b6:	68bb      	ldr	r3, [r7, #8]
   183b8:	2b00      	cmp	r3, #0
   183ba:	d012      	beq.n	183e2 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   183bc:	4b0c      	ldr	r3, [pc, #48]	; (183f0 <FreeRTOS_CLIRegisterCommand+0x64>)
   183be:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   183c0:	68bb      	ldr	r3, [r7, #8]
   183c2:	687a      	ldr	r2, [r7, #4]
   183c4:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   183c6:	68bb      	ldr	r3, [r7, #8]
   183c8:	2200      	movs	r2, #0
   183ca:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   183cc:	4b09      	ldr	r3, [pc, #36]	; (183f4 <FreeRTOS_CLIRegisterCommand+0x68>)
   183ce:	681b      	ldr	r3, [r3, #0]
   183d0:	68ba      	ldr	r2, [r7, #8]
   183d2:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   183d4:	4b07      	ldr	r3, [pc, #28]	; (183f4 <FreeRTOS_CLIRegisterCommand+0x68>)
   183d6:	68ba      	ldr	r2, [r7, #8]
   183d8:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   183da:	4b07      	ldr	r3, [pc, #28]	; (183f8 <FreeRTOS_CLIRegisterCommand+0x6c>)
   183dc:	4798      	blx	r3

		xReturn = pdPASS;
   183de:	2301      	movs	r3, #1
   183e0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   183e2:	68fb      	ldr	r3, [r7, #12]
}
   183e4:	0018      	movs	r0, r3
   183e6:	46bd      	mov	sp, r7
   183e8:	b004      	add	sp, #16
   183ea:	bd80      	pop	{r7, pc}
   183ec:	0001a7a1 	.word	0x0001a7a1
   183f0:	0001a669 	.word	0x0001a669
   183f4:	20000100 	.word	0x20000100
   183f8:	0001a68d 	.word	0x0001a68d

000183fc <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   183fc:	b580      	push	{r7, lr}
   183fe:	b088      	sub	sp, #32
   18400:	af00      	add	r7, sp, #0
   18402:	60f8      	str	r0, [r7, #12]
   18404:	60b9      	str	r1, [r7, #8]
   18406:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   18408:	2301      	movs	r3, #1
   1840a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   1840c:	4b3d      	ldr	r3, [pc, #244]	; (18504 <FreeRTOS_CLIProcessCommand+0x108>)
   1840e:	681b      	ldr	r3, [r3, #0]
   18410:	2b00      	cmp	r3, #0
   18412:	d144      	bne.n	1849e <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18414:	4b3b      	ldr	r3, [pc, #236]	; (18504 <FreeRTOS_CLIProcessCommand+0x108>)
   18416:	4a3c      	ldr	r2, [pc, #240]	; (18508 <FreeRTOS_CLIProcessCommand+0x10c>)
   18418:	601a      	str	r2, [r3, #0]
   1841a:	e03a      	b.n	18492 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   1841c:	4b39      	ldr	r3, [pc, #228]	; (18504 <FreeRTOS_CLIProcessCommand+0x108>)
   1841e:	681b      	ldr	r3, [r3, #0]
   18420:	681b      	ldr	r3, [r3, #0]
   18422:	681b      	ldr	r3, [r3, #0]
   18424:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   18426:	69bb      	ldr	r3, [r7, #24]
   18428:	0018      	movs	r0, r3
   1842a:	4b38      	ldr	r3, [pc, #224]	; (1850c <FreeRTOS_CLIProcessCommand+0x110>)
   1842c:	4798      	blx	r3
   1842e:	0003      	movs	r3, r0
   18430:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   18432:	68fa      	ldr	r2, [r7, #12]
   18434:	697b      	ldr	r3, [r7, #20]
   18436:	18d3      	adds	r3, r2, r3
   18438:	781b      	ldrb	r3, [r3, #0]
   1843a:	2b20      	cmp	r3, #32
   1843c:	d005      	beq.n	1844a <FreeRTOS_CLIProcessCommand+0x4e>
   1843e:	68fa      	ldr	r2, [r7, #12]
   18440:	697b      	ldr	r3, [r7, #20]
   18442:	18d3      	adds	r3, r2, r3
   18444:	781b      	ldrb	r3, [r3, #0]
   18446:	2b00      	cmp	r3, #0
   18448:	d11e      	bne.n	18488 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   1844a:	697a      	ldr	r2, [r7, #20]
   1844c:	69b9      	ldr	r1, [r7, #24]
   1844e:	68fb      	ldr	r3, [r7, #12]
   18450:	0018      	movs	r0, r3
   18452:	4b2f      	ldr	r3, [pc, #188]	; (18510 <FreeRTOS_CLIProcessCommand+0x114>)
   18454:	4798      	blx	r3
   18456:	1e03      	subs	r3, r0, #0
   18458:	d116      	bne.n	18488 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   1845a:	4b2a      	ldr	r3, [pc, #168]	; (18504 <FreeRTOS_CLIProcessCommand+0x108>)
   1845c:	681b      	ldr	r3, [r3, #0]
   1845e:	681b      	ldr	r3, [r3, #0]
   18460:	7b1b      	ldrb	r3, [r3, #12]
   18462:	b25b      	sxtb	r3, r3
   18464:	2b00      	cmp	r3, #0
   18466:	db19      	blt.n	1849c <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   18468:	68fb      	ldr	r3, [r7, #12]
   1846a:	0018      	movs	r0, r3
   1846c:	4b29      	ldr	r3, [pc, #164]	; (18514 <FreeRTOS_CLIProcessCommand+0x118>)
   1846e:	4798      	blx	r3
   18470:	0003      	movs	r3, r0
   18472:	001a      	movs	r2, r3
   18474:	4b23      	ldr	r3, [pc, #140]	; (18504 <FreeRTOS_CLIProcessCommand+0x108>)
   18476:	681b      	ldr	r3, [r3, #0]
   18478:	681b      	ldr	r3, [r3, #0]
   1847a:	7b1b      	ldrb	r3, [r3, #12]
   1847c:	b25b      	sxtb	r3, r3
   1847e:	429a      	cmp	r2, r3
   18480:	d00c      	beq.n	1849c <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   18482:	2300      	movs	r3, #0
   18484:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   18486:	e009      	b.n	1849c <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18488:	4b1e      	ldr	r3, [pc, #120]	; (18504 <FreeRTOS_CLIProcessCommand+0x108>)
   1848a:	681b      	ldr	r3, [r3, #0]
   1848c:	685a      	ldr	r2, [r3, #4]
   1848e:	4b1d      	ldr	r3, [pc, #116]	; (18504 <FreeRTOS_CLIProcessCommand+0x108>)
   18490:	601a      	str	r2, [r3, #0]
   18492:	4b1c      	ldr	r3, [pc, #112]	; (18504 <FreeRTOS_CLIProcessCommand+0x108>)
   18494:	681b      	ldr	r3, [r3, #0]
   18496:	2b00      	cmp	r3, #0
   18498:	d1c0      	bne.n	1841c <FreeRTOS_CLIProcessCommand+0x20>
   1849a:	e000      	b.n	1849e <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   1849c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1849e:	4b19      	ldr	r3, [pc, #100]	; (18504 <FreeRTOS_CLIProcessCommand+0x108>)
   184a0:	681b      	ldr	r3, [r3, #0]
   184a2:	2b00      	cmp	r3, #0
   184a4:	d00c      	beq.n	184c0 <FreeRTOS_CLIProcessCommand+0xc4>
   184a6:	69fb      	ldr	r3, [r7, #28]
   184a8:	2b00      	cmp	r3, #0
   184aa:	d109      	bne.n	184c0 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   184ac:	687a      	ldr	r2, [r7, #4]
   184ae:	491a      	ldr	r1, [pc, #104]	; (18518 <FreeRTOS_CLIProcessCommand+0x11c>)
   184b0:	68bb      	ldr	r3, [r7, #8]
   184b2:	0018      	movs	r0, r3
   184b4:	4b19      	ldr	r3, [pc, #100]	; (1851c <FreeRTOS_CLIProcessCommand+0x120>)
   184b6:	4798      	blx	r3
		pxCommand = NULL;
   184b8:	4b12      	ldr	r3, [pc, #72]	; (18504 <FreeRTOS_CLIProcessCommand+0x108>)
   184ba:	2200      	movs	r2, #0
   184bc:	601a      	str	r2, [r3, #0]
   184be:	e01c      	b.n	184fa <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   184c0:	4b10      	ldr	r3, [pc, #64]	; (18504 <FreeRTOS_CLIProcessCommand+0x108>)
   184c2:	681b      	ldr	r3, [r3, #0]
   184c4:	2b00      	cmp	r3, #0
   184c6:	d010      	beq.n	184ea <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   184c8:	4b0e      	ldr	r3, [pc, #56]	; (18504 <FreeRTOS_CLIProcessCommand+0x108>)
   184ca:	681b      	ldr	r3, [r3, #0]
   184cc:	681b      	ldr	r3, [r3, #0]
   184ce:	689b      	ldr	r3, [r3, #8]
   184d0:	68fa      	ldr	r2, [r7, #12]
   184d2:	6879      	ldr	r1, [r7, #4]
   184d4:	68b8      	ldr	r0, [r7, #8]
   184d6:	4798      	blx	r3
   184d8:	0003      	movs	r3, r0
   184da:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   184dc:	69fb      	ldr	r3, [r7, #28]
   184de:	2b00      	cmp	r3, #0
   184e0:	d10b      	bne.n	184fa <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   184e2:	4b08      	ldr	r3, [pc, #32]	; (18504 <FreeRTOS_CLIProcessCommand+0x108>)
   184e4:	2200      	movs	r2, #0
   184e6:	601a      	str	r2, [r3, #0]
   184e8:	e007      	b.n	184fa <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   184ea:	687a      	ldr	r2, [r7, #4]
   184ec:	490c      	ldr	r1, [pc, #48]	; (18520 <FreeRTOS_CLIProcessCommand+0x124>)
   184ee:	68bb      	ldr	r3, [r7, #8]
   184f0:	0018      	movs	r0, r3
   184f2:	4b0a      	ldr	r3, [pc, #40]	; (1851c <FreeRTOS_CLIProcessCommand+0x120>)
   184f4:	4798      	blx	r3
		xReturn = pdFALSE;
   184f6:	2300      	movs	r3, #0
   184f8:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   184fa:	69fb      	ldr	r3, [r7, #28]
}
   184fc:	0018      	movs	r0, r3
   184fe:	46bd      	mov	sp, r7
   18500:	b008      	add	sp, #32
   18502:	bd80      	pop	{r7, pc}
   18504:	20000cd4 	.word	0x20000cd4
   18508:	200000f8 	.word	0x200000f8
   1850c:	0003531b 	.word	0x0003531b
   18510:	00035329 	.word	0x00035329
   18514:	00018585 	.word	0x00018585
   18518:	000375e8 	.word	0x000375e8
   1851c:	0003534b 	.word	0x0003534b
   18520:	00037640 	.word	0x00037640

00018524 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   18524:	b580      	push	{r7, lr}
   18526:	b086      	sub	sp, #24
   18528:	af00      	add	r7, sp, #0
   1852a:	60f8      	str	r0, [r7, #12]
   1852c:	60b9      	str	r1, [r7, #8]
   1852e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   18530:	4b11      	ldr	r3, [pc, #68]	; (18578 <prvHelpCommand+0x54>)
   18532:	681b      	ldr	r3, [r3, #0]
   18534:	2b00      	cmp	r3, #0
   18536:	d102      	bne.n	1853e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   18538:	4b0f      	ldr	r3, [pc, #60]	; (18578 <prvHelpCommand+0x54>)
   1853a:	4a10      	ldr	r2, [pc, #64]	; (1857c <prvHelpCommand+0x58>)
   1853c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   1853e:	4b0e      	ldr	r3, [pc, #56]	; (18578 <prvHelpCommand+0x54>)
   18540:	681b      	ldr	r3, [r3, #0]
   18542:	681b      	ldr	r3, [r3, #0]
   18544:	6859      	ldr	r1, [r3, #4]
   18546:	68ba      	ldr	r2, [r7, #8]
   18548:	68fb      	ldr	r3, [r7, #12]
   1854a:	0018      	movs	r0, r3
   1854c:	4b0c      	ldr	r3, [pc, #48]	; (18580 <prvHelpCommand+0x5c>)
   1854e:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   18550:	4b09      	ldr	r3, [pc, #36]	; (18578 <prvHelpCommand+0x54>)
   18552:	681b      	ldr	r3, [r3, #0]
   18554:	685a      	ldr	r2, [r3, #4]
   18556:	4b08      	ldr	r3, [pc, #32]	; (18578 <prvHelpCommand+0x54>)
   18558:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   1855a:	4b07      	ldr	r3, [pc, #28]	; (18578 <prvHelpCommand+0x54>)
   1855c:	681b      	ldr	r3, [r3, #0]
   1855e:	2b00      	cmp	r3, #0
   18560:	d102      	bne.n	18568 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   18562:	2300      	movs	r3, #0
   18564:	617b      	str	r3, [r7, #20]
   18566:	e001      	b.n	1856c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   18568:	2301      	movs	r3, #1
   1856a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   1856c:	697b      	ldr	r3, [r7, #20]
}
   1856e:	0018      	movs	r0, r3
   18570:	46bd      	mov	sp, r7
   18572:	b006      	add	sp, #24
   18574:	bd80      	pop	{r7, pc}
   18576:	46c0      	nop			; (mov r8, r8)
   18578:	20000cd8 	.word	0x20000cd8
   1857c:	200000f8 	.word	0x200000f8
   18580:	0003534b 	.word	0x0003534b

00018584 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   18584:	b580      	push	{r7, lr}
   18586:	b084      	sub	sp, #16
   18588:	af00      	add	r7, sp, #0
   1858a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   1858c:	230f      	movs	r3, #15
   1858e:	18fb      	adds	r3, r7, r3
   18590:	2200      	movs	r2, #0
   18592:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   18594:	2300      	movs	r3, #0
   18596:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   18598:	e018      	b.n	185cc <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   1859a:	687b      	ldr	r3, [r7, #4]
   1859c:	781b      	ldrb	r3, [r3, #0]
   1859e:	2b20      	cmp	r3, #32
   185a0:	d10f      	bne.n	185c2 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   185a2:	68bb      	ldr	r3, [r7, #8]
   185a4:	2b01      	cmp	r3, #1
   185a6:	d00e      	beq.n	185c6 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   185a8:	230f      	movs	r3, #15
   185aa:	18fb      	adds	r3, r7, r3
   185ac:	781b      	ldrb	r3, [r3, #0]
   185ae:	b25b      	sxtb	r3, r3
   185b0:	b2db      	uxtb	r3, r3
   185b2:	3301      	adds	r3, #1
   185b4:	b2da      	uxtb	r2, r3
   185b6:	230f      	movs	r3, #15
   185b8:	18fb      	adds	r3, r7, r3
   185ba:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   185bc:	2301      	movs	r3, #1
   185be:	60bb      	str	r3, [r7, #8]
   185c0:	e001      	b.n	185c6 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   185c2:	2300      	movs	r3, #0
   185c4:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   185c6:	687b      	ldr	r3, [r7, #4]
   185c8:	3301      	adds	r3, #1
   185ca:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   185cc:	687b      	ldr	r3, [r7, #4]
   185ce:	781b      	ldrb	r3, [r3, #0]
   185d0:	2b00      	cmp	r3, #0
   185d2:	d1e2      	bne.n	1859a <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   185d4:	68bb      	ldr	r3, [r7, #8]
   185d6:	2b01      	cmp	r3, #1
   185d8:	d109      	bne.n	185ee <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   185da:	230f      	movs	r3, #15
   185dc:	18fb      	adds	r3, r7, r3
   185de:	781b      	ldrb	r3, [r3, #0]
   185e0:	b25b      	sxtb	r3, r3
   185e2:	b2db      	uxtb	r3, r3
   185e4:	3b01      	subs	r3, #1
   185e6:	b2da      	uxtb	r2, r3
   185e8:	230f      	movs	r3, #15
   185ea:	18fb      	adds	r3, r7, r3
   185ec:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   185ee:	230f      	movs	r3, #15
   185f0:	18fb      	adds	r3, r7, r3
   185f2:	781b      	ldrb	r3, [r3, #0]
   185f4:	b25b      	sxtb	r3, r3
}
   185f6:	0018      	movs	r0, r3
   185f8:	46bd      	mov	sp, r7
   185fa:	b004      	add	sp, #16
   185fc:	bd80      	pop	{r7, pc}
	...

00018600 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   18600:	b580      	push	{r7, lr}
   18602:	b082      	sub	sp, #8
   18604:	af00      	add	r7, sp, #0
   18606:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   18608:	687b      	ldr	r3, [r7, #4]
   1860a:	0018      	movs	r0, r3
   1860c:	4b03      	ldr	r3, [pc, #12]	; (1861c <prvTraceGetQueueNumber+0x1c>)
   1860e:	4798      	blx	r3
   18610:	0003      	movs	r3, r0
}
   18612:	0018      	movs	r0, r3
   18614:	46bd      	mov	sp, r7
   18616:	b002      	add	sp, #8
   18618:	bd80      	pop	{r7, pc}
   1861a:	46c0      	nop			; (mov r8, r8)
   1861c:	0001bdc5 	.word	0x0001bdc5

00018620 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   18620:	b580      	push	{r7, lr}
   18622:	b082      	sub	sp, #8
   18624:	af00      	add	r7, sp, #0
   18626:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   18628:	687b      	ldr	r3, [r7, #4]
   1862a:	0018      	movs	r0, r3
   1862c:	4b03      	ldr	r3, [pc, #12]	; (1863c <prvTraceGetQueueType+0x1c>)
   1862e:	4798      	blx	r3
   18630:	0003      	movs	r3, r0
}
   18632:	0018      	movs	r0, r3
   18634:	46bd      	mov	sp, r7
   18636:	b002      	add	sp, #8
   18638:	bd80      	pop	{r7, pc}
   1863a:	46c0      	nop			; (mov r8, r8)
   1863c:	0001bdf1 	.word	0x0001bdf1

00018640 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   18640:	b580      	push	{r7, lr}
   18642:	b082      	sub	sp, #8
   18644:	af00      	add	r7, sp, #0
   18646:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   18648:	687b      	ldr	r3, [r7, #4]
   1864a:	0018      	movs	r0, r3
   1864c:	4b03      	ldr	r3, [pc, #12]	; (1865c <prvTraceGetTaskNumberLow16+0x1c>)
   1864e:	4798      	blx	r3
   18650:	0003      	movs	r3, r0
   18652:	b29b      	uxth	r3, r3
}
   18654:	0018      	movs	r0, r3
   18656:	46bd      	mov	sp, r7
   18658:	b002      	add	sp, #8
   1865a:	bd80      	pop	{r7, pc}
   1865c:	0001d121 	.word	0x0001d121

00018660 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   18660:	b580      	push	{r7, lr}
   18662:	b082      	sub	sp, #8
   18664:	af00      	add	r7, sp, #0
   18666:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   18668:	687b      	ldr	r3, [r7, #4]
   1866a:	0018      	movs	r0, r3
   1866c:	4b04      	ldr	r3, [pc, #16]	; (18680 <prvTraceGetTaskNumberHigh16+0x20>)
   1866e:	4798      	blx	r3
   18670:	0003      	movs	r3, r0
   18672:	0c1b      	lsrs	r3, r3, #16
   18674:	b29b      	uxth	r3, r3
}
   18676:	0018      	movs	r0, r3
   18678:	46bd      	mov	sp, r7
   1867a:	b002      	add	sp, #8
   1867c:	bd80      	pop	{r7, pc}
   1867e:	46c0      	nop			; (mov r8, r8)
   18680:	0001d121 	.word	0x0001d121

00018684 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   18684:	b580      	push	{r7, lr}
   18686:	b082      	sub	sp, #8
   18688:	af00      	add	r7, sp, #0
   1868a:	6078      	str	r0, [r7, #4]
   1868c:	000a      	movs	r2, r1
   1868e:	1cbb      	adds	r3, r7, #2
   18690:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   18692:	687b      	ldr	r3, [r7, #4]
   18694:	0018      	movs	r0, r3
   18696:	4b08      	ldr	r3, [pc, #32]	; (186b8 <prvTraceSetTaskNumberLow16+0x34>)
   18698:	4798      	blx	r3
   1869a:	0003      	movs	r3, r0
   1869c:	0c1b      	lsrs	r3, r3, #16
   1869e:	041a      	lsls	r2, r3, #16
   186a0:	1cbb      	adds	r3, r7, #2
   186a2:	881b      	ldrh	r3, [r3, #0]
   186a4:	431a      	orrs	r2, r3
   186a6:	687b      	ldr	r3, [r7, #4]
   186a8:	0011      	movs	r1, r2
   186aa:	0018      	movs	r0, r3
   186ac:	4b03      	ldr	r3, [pc, #12]	; (186bc <prvTraceSetTaskNumberLow16+0x38>)
   186ae:	4798      	blx	r3
}
   186b0:	46c0      	nop			; (mov r8, r8)
   186b2:	46bd      	mov	sp, r7
   186b4:	b002      	add	sp, #8
   186b6:	bd80      	pop	{r7, pc}
   186b8:	0001d121 	.word	0x0001d121
   186bc:	0001d149 	.word	0x0001d149

000186c0 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   186c0:	b580      	push	{r7, lr}
   186c2:	b082      	sub	sp, #8
   186c4:	af00      	add	r7, sp, #0
   186c6:	6078      	str	r0, [r7, #4]
   186c8:	000a      	movs	r2, r1
   186ca:	1cbb      	adds	r3, r7, #2
   186cc:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   186ce:	687b      	ldr	r3, [r7, #4]
   186d0:	0018      	movs	r0, r3
   186d2:	4b09      	ldr	r3, [pc, #36]	; (186f8 <prvTraceSetTaskNumberHigh16+0x38>)
   186d4:	4798      	blx	r3
   186d6:	0003      	movs	r3, r0
   186d8:	041b      	lsls	r3, r3, #16
   186da:	0c1a      	lsrs	r2, r3, #16
   186dc:	1cbb      	adds	r3, r7, #2
   186de:	881b      	ldrh	r3, [r3, #0]
   186e0:	041b      	lsls	r3, r3, #16
   186e2:	431a      	orrs	r2, r3
   186e4:	687b      	ldr	r3, [r7, #4]
   186e6:	0011      	movs	r1, r2
   186e8:	0018      	movs	r0, r3
   186ea:	4b04      	ldr	r3, [pc, #16]	; (186fc <prvTraceSetTaskNumberHigh16+0x3c>)
   186ec:	4798      	blx	r3
}
   186ee:	46c0      	nop			; (mov r8, r8)
   186f0:	46bd      	mov	sp, r7
   186f2:	b002      	add	sp, #8
   186f4:	bd80      	pop	{r7, pc}
   186f6:	46c0      	nop			; (mov r8, r8)
   186f8:	0001d121 	.word	0x0001d121
   186fc:	0001d149 	.word	0x0001d149

00018700 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   18700:	b580      	push	{r7, lr}
   18702:	b082      	sub	sp, #8
   18704:	af00      	add	r7, sp, #0
   18706:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   18708:	687b      	ldr	r3, [r7, #4]
   1870a:	0018      	movs	r0, r3
   1870c:	4b03      	ldr	r3, [pc, #12]	; (1871c <prvTraceGetQueueNumberLow16+0x1c>)
   1870e:	4798      	blx	r3
   18710:	0003      	movs	r3, r0
   18712:	b29b      	uxth	r3, r3
}
   18714:	0018      	movs	r0, r3
   18716:	46bd      	mov	sp, r7
   18718:	b002      	add	sp, #8
   1871a:	bd80      	pop	{r7, pc}
   1871c:	00018601 	.word	0x00018601

00018720 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   18720:	b580      	push	{r7, lr}
   18722:	b082      	sub	sp, #8
   18724:	af00      	add	r7, sp, #0
   18726:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   18728:	687b      	ldr	r3, [r7, #4]
   1872a:	0018      	movs	r0, r3
   1872c:	4b04      	ldr	r3, [pc, #16]	; (18740 <prvTraceGetQueueNumberHigh16+0x20>)
   1872e:	4798      	blx	r3
   18730:	0003      	movs	r3, r0
   18732:	0c1b      	lsrs	r3, r3, #16
   18734:	b29b      	uxth	r3, r3
}
   18736:	0018      	movs	r0, r3
   18738:	46bd      	mov	sp, r7
   1873a:	b002      	add	sp, #8
   1873c:	bd80      	pop	{r7, pc}
   1873e:	46c0      	nop			; (mov r8, r8)
   18740:	00018601 	.word	0x00018601

00018744 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   18744:	b580      	push	{r7, lr}
   18746:	b082      	sub	sp, #8
   18748:	af00      	add	r7, sp, #0
   1874a:	6078      	str	r0, [r7, #4]
   1874c:	000a      	movs	r2, r1
   1874e:	1cbb      	adds	r3, r7, #2
   18750:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   18752:	687b      	ldr	r3, [r7, #4]
   18754:	0018      	movs	r0, r3
   18756:	4b08      	ldr	r3, [pc, #32]	; (18778 <prvTraceSetQueueNumberLow16+0x34>)
   18758:	4798      	blx	r3
   1875a:	0003      	movs	r3, r0
   1875c:	0c1b      	lsrs	r3, r3, #16
   1875e:	041a      	lsls	r2, r3, #16
   18760:	1cbb      	adds	r3, r7, #2
   18762:	881b      	ldrh	r3, [r3, #0]
   18764:	431a      	orrs	r2, r3
   18766:	687b      	ldr	r3, [r7, #4]
   18768:	0011      	movs	r1, r2
   1876a:	0018      	movs	r0, r3
   1876c:	4b03      	ldr	r3, [pc, #12]	; (1877c <prvTraceSetQueueNumberLow16+0x38>)
   1876e:	4798      	blx	r3
}
   18770:	46c0      	nop			; (mov r8, r8)
   18772:	46bd      	mov	sp, r7
   18774:	b002      	add	sp, #8
   18776:	bd80      	pop	{r7, pc}
   18778:	00018601 	.word	0x00018601
   1877c:	0001bdd9 	.word	0x0001bdd9

00018780 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   18780:	b580      	push	{r7, lr}
   18782:	b082      	sub	sp, #8
   18784:	af00      	add	r7, sp, #0
   18786:	6078      	str	r0, [r7, #4]
   18788:	000a      	movs	r2, r1
   1878a:	1cbb      	adds	r3, r7, #2
   1878c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   1878e:	687b      	ldr	r3, [r7, #4]
   18790:	0018      	movs	r0, r3
   18792:	4b09      	ldr	r3, [pc, #36]	; (187b8 <prvTraceSetQueueNumberHigh16+0x38>)
   18794:	4798      	blx	r3
   18796:	0003      	movs	r3, r0
   18798:	041b      	lsls	r3, r3, #16
   1879a:	0c1a      	lsrs	r2, r3, #16
   1879c:	1cbb      	adds	r3, r7, #2
   1879e:	881b      	ldrh	r3, [r3, #0]
   187a0:	041b      	lsls	r3, r3, #16
   187a2:	431a      	orrs	r2, r3
   187a4:	687b      	ldr	r3, [r7, #4]
   187a6:	0011      	movs	r1, r2
   187a8:	0018      	movs	r0, r3
   187aa:	4b04      	ldr	r3, [pc, #16]	; (187bc <prvTraceSetQueueNumberHigh16+0x3c>)
   187ac:	4798      	blx	r3
}
   187ae:	46c0      	nop			; (mov r8, r8)
   187b0:	46bd      	mov	sp, r7
   187b2:	b002      	add	sp, #8
   187b4:	bd80      	pop	{r7, pc}
   187b6:	46c0      	nop			; (mov r8, r8)
   187b8:	00018601 	.word	0x00018601
   187bc:	0001bdd9 	.word	0x0001bdd9

000187c0 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   187c0:	b580      	push	{r7, lr}
   187c2:	b084      	sub	sp, #16
   187c4:	af00      	add	r7, sp, #0
   187c6:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   187c8:	2300      	movs	r3, #0
   187ca:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   187cc:	2300      	movs	r3, #0
   187ce:	60bb      	str	r3, [r7, #8]
   187d0:	e018      	b.n	18804 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   187d2:	4b14      	ldr	r3, [pc, #80]	; (18824 <prvAddTaskToStackMonitor+0x64>)
   187d4:	68ba      	ldr	r2, [r7, #8]
   187d6:	00d2      	lsls	r2, r2, #3
   187d8:	58d3      	ldr	r3, [r2, r3]
   187da:	2b00      	cmp	r3, #0
   187dc:	d10f      	bne.n	187fe <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   187de:	4b11      	ldr	r3, [pc, #68]	; (18824 <prvAddTaskToStackMonitor+0x64>)
   187e0:	68ba      	ldr	r2, [r7, #8]
   187e2:	00d2      	lsls	r2, r2, #3
   187e4:	6879      	ldr	r1, [r7, #4]
   187e6:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   187e8:	4a0e      	ldr	r2, [pc, #56]	; (18824 <prvAddTaskToStackMonitor+0x64>)
   187ea:	68bb      	ldr	r3, [r7, #8]
   187ec:	00db      	lsls	r3, r3, #3
   187ee:	18d3      	adds	r3, r2, r3
   187f0:	3304      	adds	r3, #4
   187f2:	2201      	movs	r2, #1
   187f4:	4252      	negs	r2, r2
   187f6:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   187f8:	2301      	movs	r3, #1
   187fa:	60fb      	str	r3, [r7, #12]
			break;
   187fc:	e005      	b.n	1880a <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   187fe:	68bb      	ldr	r3, [r7, #8]
   18800:	3301      	adds	r3, #1
   18802:	60bb      	str	r3, [r7, #8]
   18804:	68bb      	ldr	r3, [r7, #8]
   18806:	2b09      	cmp	r3, #9
   18808:	dde3      	ble.n	187d2 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   1880a:	68fb      	ldr	r3, [r7, #12]
   1880c:	2b00      	cmp	r3, #0
   1880e:	d104      	bne.n	1881a <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   18810:	4b05      	ldr	r3, [pc, #20]	; (18828 <prvAddTaskToStackMonitor+0x68>)
   18812:	681b      	ldr	r3, [r3, #0]
   18814:	1c5a      	adds	r2, r3, #1
   18816:	4b04      	ldr	r3, [pc, #16]	; (18828 <prvAddTaskToStackMonitor+0x68>)
   18818:	601a      	str	r2, [r3, #0]
	}
}
   1881a:	46c0      	nop			; (mov r8, r8)
   1881c:	46bd      	mov	sp, r7
   1881e:	b004      	add	sp, #16
   18820:	bd80      	pop	{r7, pc}
   18822:	46c0      	nop			; (mov r8, r8)
   18824:	20000ce0 	.word	0x20000ce0
   18828:	20000d30 	.word	0x20000d30

0001882c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   1882c:	b590      	push	{r4, r7, lr}
   1882e:	b085      	sub	sp, #20
   18830:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   18832:	2300      	movs	r3, #0
   18834:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   18836:	4b2b      	ldr	r3, [pc, #172]	; (188e4 <prvReportStackUsage+0xb8>)
   18838:	681b      	ldr	r3, [r3, #0]
   1883a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   1883c:	4b29      	ldr	r3, [pc, #164]	; (188e4 <prvReportStackUsage+0xb8>)
   1883e:	681a      	ldr	r2, [r3, #0]
   18840:	4b29      	ldr	r3, [pc, #164]	; (188e8 <prvReportStackUsage+0xbc>)
   18842:	00d2      	lsls	r2, r2, #3
   18844:	58d3      	ldr	r3, [r2, r3]
   18846:	2b00      	cmp	r3, #0
   18848:	d035      	beq.n	188b6 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   1884a:	4b26      	ldr	r3, [pc, #152]	; (188e4 <prvReportStackUsage+0xb8>)
   1884c:	681a      	ldr	r2, [r3, #0]
   1884e:	4b26      	ldr	r3, [pc, #152]	; (188e8 <prvReportStackUsage+0xbc>)
   18850:	00d2      	lsls	r2, r2, #3
   18852:	58d3      	ldr	r3, [r2, r3]
   18854:	0018      	movs	r0, r3
   18856:	4b25      	ldr	r3, [pc, #148]	; (188ec <prvReportStackUsage+0xc0>)
   18858:	4798      	blx	r3
   1885a:	0003      	movs	r3, r0
   1885c:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   1885e:	4b21      	ldr	r3, [pc, #132]	; (188e4 <prvReportStackUsage+0xb8>)
   18860:	681b      	ldr	r3, [r3, #0]
   18862:	4a21      	ldr	r2, [pc, #132]	; (188e8 <prvReportStackUsage+0xbc>)
   18864:	00db      	lsls	r3, r3, #3
   18866:	18d3      	adds	r3, r2, r3
   18868:	3304      	adds	r3, #4
   1886a:	681a      	ldr	r2, [r3, #0]
   1886c:	687b      	ldr	r3, [r7, #4]
   1886e:	429a      	cmp	r2, r3
   18870:	d907      	bls.n	18882 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   18872:	4b1c      	ldr	r3, [pc, #112]	; (188e4 <prvReportStackUsage+0xb8>)
   18874:	681b      	ldr	r3, [r3, #0]
   18876:	4a1c      	ldr	r2, [pc, #112]	; (188e8 <prvReportStackUsage+0xbc>)
   18878:	00db      	lsls	r3, r3, #3
   1887a:	18d3      	adds	r3, r2, r3
   1887c:	3304      	adds	r3, #4
   1887e:	687a      	ldr	r2, [r7, #4]
   18880:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   18882:	4b18      	ldr	r3, [pc, #96]	; (188e4 <prvReportStackUsage+0xb8>)
   18884:	681a      	ldr	r2, [r3, #0]
   18886:	4b18      	ldr	r3, [pc, #96]	; (188e8 <prvReportStackUsage+0xbc>)
   18888:	00d2      	lsls	r2, r2, #3
   1888a:	58d3      	ldr	r3, [r2, r3]
   1888c:	0018      	movs	r0, r3
   1888e:	4b18      	ldr	r3, [pc, #96]	; (188f0 <prvReportStackUsage+0xc4>)
   18890:	4798      	blx	r3
   18892:	0003      	movs	r3, r0
   18894:	b2db      	uxtb	r3, r3
   18896:	0019      	movs	r1, r3
   18898:	4b12      	ldr	r3, [pc, #72]	; (188e4 <prvReportStackUsage+0xb8>)
   1889a:	681b      	ldr	r3, [r3, #0]
   1889c:	4a12      	ldr	r2, [pc, #72]	; (188e8 <prvReportStackUsage+0xbc>)
   1889e:	00db      	lsls	r3, r3, #3
   188a0:	18d3      	adds	r3, r2, r3
   188a2:	3304      	adds	r3, #4
   188a4:	681b      	ldr	r3, [r3, #0]
   188a6:	000a      	movs	r2, r1
   188a8:	2103      	movs	r1, #3
   188aa:	20ea      	movs	r0, #234	; 0xea
   188ac:	4c11      	ldr	r4, [pc, #68]	; (188f4 <prvReportStackUsage+0xc8>)
   188ae:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   188b0:	68fb      	ldr	r3, [r7, #12]
   188b2:	3301      	adds	r3, #1
   188b4:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   188b6:	4b0b      	ldr	r3, [pc, #44]	; (188e4 <prvReportStackUsage+0xb8>)
   188b8:	681b      	ldr	r3, [r3, #0]
   188ba:	1c5a      	adds	r2, r3, #1
   188bc:	4b0e      	ldr	r3, [pc, #56]	; (188f8 <prvReportStackUsage+0xcc>)
   188be:	210a      	movs	r1, #10
   188c0:	0010      	movs	r0, r2
   188c2:	4798      	blx	r3
   188c4:	000b      	movs	r3, r1
   188c6:	001a      	movs	r2, r3
   188c8:	4b06      	ldr	r3, [pc, #24]	; (188e4 <prvReportStackUsage+0xb8>)
   188ca:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   188cc:	68fb      	ldr	r3, [r7, #12]
   188ce:	2b00      	cmp	r3, #0
   188d0:	dc04      	bgt.n	188dc <prvReportStackUsage+0xb0>
   188d2:	4b04      	ldr	r3, [pc, #16]	; (188e4 <prvReportStackUsage+0xb8>)
   188d4:	681a      	ldr	r2, [r3, #0]
   188d6:	68bb      	ldr	r3, [r7, #8]
   188d8:	429a      	cmp	r2, r3
   188da:	d1af      	bne.n	1883c <prvReportStackUsage+0x10>
}
   188dc:	46c0      	nop			; (mov r8, r8)
   188de:	46bd      	mov	sp, r7
   188e0:	b005      	add	sp, #20
   188e2:	bd90      	pop	{r4, r7, pc}
   188e4:	20000d34 	.word	0x20000d34
   188e8:	20000ce0 	.word	0x20000ce0
   188ec:	0001d2c1 	.word	0x0001d2c1
   188f0:	00018641 	.word	0x00018641
   188f4:	00019189 	.word	0x00019189
   188f8:	00033269 	.word	0x00033269

000188fc <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   188fc:	b580      	push	{r7, lr}
   188fe:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   18900:	4b02      	ldr	r3, [pc, #8]	; (1890c <prvTraceGetCurrentTaskHandle+0x10>)
   18902:	4798      	blx	r3
   18904:	0003      	movs	r3, r0
}
   18906:	0018      	movs	r0, r3
   18908:	46bd      	mov	sp, r7
   1890a:	bd80      	pop	{r7, pc}
   1890c:	0001d36d 	.word	0x0001d36d

00018910 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   18910:	b590      	push	{r4, r7, lr}
   18912:	b085      	sub	sp, #20
   18914:	af02      	add	r7, sp, #8
   18916:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   18918:	4b14      	ldr	r3, [pc, #80]	; (1896c <vTraceEnable+0x5c>)
   1891a:	4798      	blx	r3

	if (startOption == TRC_START)
   1891c:	687b      	ldr	r3, [r7, #4]
   1891e:	2b01      	cmp	r3, #1
   18920:	d102      	bne.n	18928 <vTraceEnable+0x18>
	{
		vTraceStart();
   18922:	4b13      	ldr	r3, [pc, #76]	; (18970 <vTraceEnable+0x60>)
   18924:	4798      	blx	r3
   18926:	e00e      	b.n	18946 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   18928:	687b      	ldr	r3, [r7, #4]
   1892a:	2b02      	cmp	r3, #2
   1892c:	d104      	bne.n	18938 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1892e:	4b11      	ldr	r3, [pc, #68]	; (18974 <vTraceEnable+0x64>)
   18930:	0018      	movs	r0, r3
   18932:	4b11      	ldr	r3, [pc, #68]	; (18978 <vTraceEnable+0x68>)
   18934:	4798      	blx	r3
   18936:	e006      	b.n	18946 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   18938:	687b      	ldr	r3, [r7, #4]
   1893a:	2b00      	cmp	r3, #0
   1893c:	d003      	beq.n	18946 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1893e:	4b0f      	ldr	r3, [pc, #60]	; (1897c <vTraceEnable+0x6c>)
   18940:	0018      	movs	r0, r3
   18942:	4b0d      	ldr	r3, [pc, #52]	; (18978 <vTraceEnable+0x68>)
   18944:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   18946:	4b0e      	ldr	r3, [pc, #56]	; (18980 <vTraceEnable+0x70>)
   18948:	681b      	ldr	r3, [r3, #0]
   1894a:	2b00      	cmp	r3, #0
   1894c:	d10a      	bne.n	18964 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   1894e:	2396      	movs	r3, #150	; 0x96
   18950:	005a      	lsls	r2, r3, #1
   18952:	490c      	ldr	r1, [pc, #48]	; (18984 <vTraceEnable+0x74>)
   18954:	480c      	ldr	r0, [pc, #48]	; (18988 <vTraceEnable+0x78>)
   18956:	4b0a      	ldr	r3, [pc, #40]	; (18980 <vTraceEnable+0x70>)
   18958:	9301      	str	r3, [sp, #4]
   1895a:	2304      	movs	r3, #4
   1895c:	9300      	str	r3, [sp, #0]
   1895e:	2300      	movs	r3, #0
   18960:	4c0a      	ldr	r4, [pc, #40]	; (1898c <vTraceEnable+0x7c>)
   18962:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   18964:	46c0      	nop			; (mov r8, r8)
   18966:	46bd      	mov	sp, r7
   18968:	b003      	add	sp, #12
   1896a:	bd90      	pop	{r4, r7, pc}
   1896c:	00019855 	.word	0x00019855
   18970:	00018dad 	.word	0x00018dad
   18974:	000376a0 	.word	0x000376a0
   18978:	00019efd 	.word	0x00019efd
   1897c:	000376e0 	.word	0x000376e0
   18980:	20000cdc 	.word	0x20000cdc
   18984:	00037714 	.word	0x00037714
   18988:	00018991 	.word	0x00018991
   1898c:	0001c2c5 	.word	0x0001c2c5

00018990 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   18990:	b580      	push	{r7, lr}
   18992:	b082      	sub	sp, #8
   18994:	af00      	add	r7, sp, #0
   18996:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   18998:	4b04      	ldr	r3, [pc, #16]	; (189ac <TzCtrl+0x1c>)
   1899a:	4798      	blx	r3
   1899c:	1e03      	subs	r3, r0, #0
   1899e:	d001      	beq.n	189a4 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   189a0:	4b03      	ldr	r3, [pc, #12]	; (189b0 <TzCtrl+0x20>)
   189a2:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   189a4:	2004      	movs	r0, #4
   189a6:	4b03      	ldr	r3, [pc, #12]	; (189b4 <TzCtrl+0x24>)
   189a8:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   189aa:	e7f5      	b.n	18998 <TzCtrl+0x8>
   189ac:	00018df1 	.word	0x00018df1
   189b0:	0001882d 	.word	0x0001882d
   189b4:	0001c661 	.word	0x0001c661

000189b8 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   189b8:	b580      	push	{r7, lr}
   189ba:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   189bc:	4b60      	ldr	r3, [pc, #384]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   189be:	681b      	ldr	r3, [r3, #0]
   189c0:	2209      	movs	r2, #9
   189c2:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   189c4:	4b5e      	ldr	r3, [pc, #376]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   189c6:	681b      	ldr	r3, [r3, #0]
   189c8:	2264      	movs	r2, #100	; 0x64
   189ca:	210a      	movs	r1, #10
   189cc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   189ce:	4b5c      	ldr	r3, [pc, #368]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   189d0:	681b      	ldr	r3, [r3, #0]
   189d2:	2265      	movs	r2, #101	; 0x65
   189d4:	210a      	movs	r1, #10
   189d6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   189d8:	4b59      	ldr	r3, [pc, #356]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   189da:	681b      	ldr	r3, [r3, #0]
   189dc:	2266      	movs	r2, #102	; 0x66
   189de:	210a      	movs	r1, #10
   189e0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   189e2:	4b57      	ldr	r3, [pc, #348]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   189e4:	681b      	ldr	r3, [r3, #0]
   189e6:	2267      	movs	r2, #103	; 0x67
   189e8:	210f      	movs	r1, #15
   189ea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   189ec:	4b54      	ldr	r3, [pc, #336]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   189ee:	681b      	ldr	r3, [r3, #0]
   189f0:	2268      	movs	r2, #104	; 0x68
   189f2:	2105      	movs	r1, #5
   189f4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   189f6:	4b52      	ldr	r3, [pc, #328]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   189f8:	681b      	ldr	r3, [r3, #0]
   189fa:	2269      	movs	r2, #105	; 0x69
   189fc:	2105      	movs	r1, #5
   189fe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   18a00:	4b4f      	ldr	r3, [pc, #316]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a02:	681b      	ldr	r3, [r3, #0]
   18a04:	226a      	movs	r2, #106	; 0x6a
   18a06:	2105      	movs	r1, #5
   18a08:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   18a0a:	4b4d      	ldr	r3, [pc, #308]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a0c:	681b      	ldr	r3, [r3, #0]
   18a0e:	226b      	movs	r2, #107	; 0x6b
   18a10:	2105      	movs	r1, #5
   18a12:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   18a14:	4b4a      	ldr	r3, [pc, #296]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a16:	681b      	ldr	r3, [r3, #0]
   18a18:	226c      	movs	r2, #108	; 0x6c
   18a1a:	2105      	movs	r1, #5
   18a1c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   18a1e:	4b48      	ldr	r3, [pc, #288]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a20:	681b      	ldr	r3, [r3, #0]
   18a22:	2270      	movs	r2, #112	; 0x70
   18a24:	210f      	movs	r1, #15
   18a26:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   18a28:	4b45      	ldr	r3, [pc, #276]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a2a:	681b      	ldr	r3, [r3, #0]
   18a2c:	2271      	movs	r2, #113	; 0x71
   18a2e:	210f      	movs	r1, #15
   18a30:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   18a32:	4b43      	ldr	r3, [pc, #268]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a34:	681b      	ldr	r3, [r3, #0]
   18a36:	2272      	movs	r2, #114	; 0x72
   18a38:	210f      	movs	r1, #15
   18a3a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   18a3c:	4b40      	ldr	r3, [pc, #256]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a3e:	681b      	ldr	r3, [r3, #0]
   18a40:	2273      	movs	r2, #115	; 0x73
   18a42:	210f      	movs	r1, #15
   18a44:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   18a46:	4b3e      	ldr	r3, [pc, #248]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a48:	681b      	ldr	r3, [r3, #0]
   18a4a:	2274      	movs	r2, #116	; 0x74
   18a4c:	210f      	movs	r1, #15
   18a4e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   18a50:	4b3b      	ldr	r3, [pc, #236]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a52:	681b      	ldr	r3, [r3, #0]
   18a54:	2275      	movs	r2, #117	; 0x75
   18a56:	210f      	movs	r1, #15
   18a58:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   18a5a:	4b39      	ldr	r3, [pc, #228]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a5c:	681b      	ldr	r3, [r3, #0]
   18a5e:	2276      	movs	r2, #118	; 0x76
   18a60:	210f      	movs	r1, #15
   18a62:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   18a64:	4b36      	ldr	r3, [pc, #216]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a66:	681b      	ldr	r3, [r3, #0]
   18a68:	2277      	movs	r2, #119	; 0x77
   18a6a:	210f      	movs	r1, #15
   18a6c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   18a6e:	4b34      	ldr	r3, [pc, #208]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a70:	681b      	ldr	r3, [r3, #0]
   18a72:	2278      	movs	r2, #120	; 0x78
   18a74:	210f      	movs	r1, #15
   18a76:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   18a78:	4b31      	ldr	r3, [pc, #196]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a7a:	681b      	ldr	r3, [r3, #0]
   18a7c:	227c      	movs	r2, #124	; 0x7c
   18a7e:	2110      	movs	r1, #16
   18a80:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   18a82:	4b2f      	ldr	r3, [pc, #188]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a84:	681b      	ldr	r3, [r3, #0]
   18a86:	227d      	movs	r2, #125	; 0x7d
   18a88:	2110      	movs	r1, #16
   18a8a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   18a8c:	4b2c      	ldr	r3, [pc, #176]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a8e:	681b      	ldr	r3, [r3, #0]
   18a90:	227e      	movs	r2, #126	; 0x7e
   18a92:	2110      	movs	r1, #16
   18a94:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   18a96:	4b2a      	ldr	r3, [pc, #168]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18a98:	681b      	ldr	r3, [r3, #0]
   18a9a:	227f      	movs	r2, #127	; 0x7f
   18a9c:	2113      	movs	r1, #19
   18a9e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   18aa0:	4b27      	ldr	r3, [pc, #156]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18aa2:	681b      	ldr	r3, [r3, #0]
   18aa4:	2280      	movs	r2, #128	; 0x80
   18aa6:	2111      	movs	r1, #17
   18aa8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   18aaa:	4b25      	ldr	r3, [pc, #148]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18aac:	681b      	ldr	r3, [r3, #0]
   18aae:	2281      	movs	r2, #129	; 0x81
   18ab0:	2110      	movs	r1, #16
   18ab2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   18ab4:	4b22      	ldr	r3, [pc, #136]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18ab6:	681b      	ldr	r3, [r3, #0]
   18ab8:	2282      	movs	r2, #130	; 0x82
   18aba:	2113      	movs	r1, #19
   18abc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   18abe:	4b20      	ldr	r3, [pc, #128]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18ac0:	681b      	ldr	r3, [r3, #0]
   18ac2:	2283      	movs	r2, #131	; 0x83
   18ac4:	2113      	movs	r1, #19
   18ac6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   18ac8:	4b1d      	ldr	r3, [pc, #116]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18aca:	681b      	ldr	r3, [r3, #0]
   18acc:	2284      	movs	r2, #132	; 0x84
   18ace:	2113      	movs	r1, #19
   18ad0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   18ad2:	4b1b      	ldr	r3, [pc, #108]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18ad4:	681b      	ldr	r3, [r3, #0]
   18ad6:	2288      	movs	r2, #136	; 0x88
   18ad8:	2100      	movs	r1, #0
   18ada:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   18adc:	4b18      	ldr	r3, [pc, #96]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18ade:	681b      	ldr	r3, [r3, #0]
   18ae0:	228a      	movs	r2, #138	; 0x8a
   18ae2:	21a0      	movs	r1, #160	; 0xa0
   18ae4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   18ae6:	4b16      	ldr	r3, [pc, #88]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18ae8:	681b      	ldr	r3, [r3, #0]
   18aea:	228c      	movs	r2, #140	; 0x8c
   18aec:	21a0      	movs	r1, #160	; 0xa0
   18aee:	0049      	lsls	r1, r1, #1
   18af0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   18af2:	4b13      	ldr	r3, [pc, #76]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18af4:	681b      	ldr	r3, [r3, #0]
   18af6:	228e      	movs	r2, #142	; 0x8e
   18af8:	21f0      	movs	r1, #240	; 0xf0
   18afa:	0049      	lsls	r1, r1, #1
   18afc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   18afe:	4b10      	ldr	r3, [pc, #64]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18b00:	681b      	ldr	r3, [r3, #0]
   18b02:	2290      	movs	r2, #144	; 0x90
   18b04:	490f      	ldr	r1, [pc, #60]	; (18b44 <vTraceInitObjectPropertyTable+0x18c>)
   18b06:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   18b08:	4b0d      	ldr	r3, [pc, #52]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18b0a:	681b      	ldr	r3, [r3, #0]
   18b0c:	2292      	movs	r2, #146	; 0x92
   18b0e:	490e      	ldr	r1, [pc, #56]	; (18b48 <vTraceInitObjectPropertyTable+0x190>)
   18b10:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   18b12:	4b0b      	ldr	r3, [pc, #44]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18b14:	681b      	ldr	r3, [r3, #0]
   18b16:	2294      	movs	r2, #148	; 0x94
   18b18:	490c      	ldr	r1, [pc, #48]	; (18b4c <vTraceInitObjectPropertyTable+0x194>)
   18b1a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   18b1c:	4b08      	ldr	r3, [pc, #32]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18b1e:	681b      	ldr	r3, [r3, #0]
   18b20:	2296      	movs	r2, #150	; 0x96
   18b22:	490b      	ldr	r1, [pc, #44]	; (18b50 <vTraceInitObjectPropertyTable+0x198>)
   18b24:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   18b26:	4b06      	ldr	r3, [pc, #24]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18b28:	681b      	ldr	r3, [r3, #0]
   18b2a:	2298      	movs	r2, #152	; 0x98
   18b2c:	218c      	movs	r1, #140	; 0x8c
   18b2e:	00c9      	lsls	r1, r1, #3
   18b30:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   18b32:	4b03      	ldr	r3, [pc, #12]	; (18b40 <vTraceInitObjectPropertyTable+0x188>)
   18b34:	681b      	ldr	r3, [r3, #0]
   18b36:	4a07      	ldr	r2, [pc, #28]	; (18b54 <vTraceInitObjectPropertyTable+0x19c>)
   18b38:	661a      	str	r2, [r3, #96]	; 0x60
}
   18b3a:	46c0      	nop			; (mov r8, r8)
   18b3c:	46bd      	mov	sp, r7
   18b3e:	bd80      	pop	{r7, pc}
   18b40:	20000df4 	.word	0x20000df4
   18b44:	000002fd 	.word	0x000002fd
   18b48:	00000352 	.word	0x00000352
   18b4c:	000003a2 	.word	0x000003a2
   18b50:	00000401 	.word	0x00000401
   18b54:	000004bf 	.word	0x000004bf

00018b58 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   18b58:	b580      	push	{r7, lr}
   18b5a:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   18b5c:	4b2e      	ldr	r3, [pc, #184]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18b5e:	2200      	movs	r2, #0
   18b60:	825a      	strh	r2, [r3, #18]
   18b62:	4b2d      	ldr	r3, [pc, #180]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18b64:	8a5a      	ldrh	r2, [r3, #18]
   18b66:	4b2c      	ldr	r3, [pc, #176]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18b68:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   18b6a:	4b2b      	ldr	r3, [pc, #172]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18b6c:	220a      	movs	r2, #10
   18b6e:	829a      	strh	r2, [r3, #20]
   18b70:	4b29      	ldr	r3, [pc, #164]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18b72:	8a9a      	ldrh	r2, [r3, #20]
   18b74:	4b28      	ldr	r3, [pc, #160]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18b76:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   18b78:	4b27      	ldr	r3, [pc, #156]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18b7a:	2214      	movs	r2, #20
   18b7c:	82da      	strh	r2, [r3, #22]
   18b7e:	4b26      	ldr	r3, [pc, #152]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18b80:	8ada      	ldrh	r2, [r3, #22]
   18b82:	4b25      	ldr	r3, [pc, #148]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18b84:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   18b86:	4b24      	ldr	r3, [pc, #144]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18b88:	221e      	movs	r2, #30
   18b8a:	831a      	strh	r2, [r3, #24]
   18b8c:	4b22      	ldr	r3, [pc, #136]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18b8e:	8b1a      	ldrh	r2, [r3, #24]
   18b90:	4b21      	ldr	r3, [pc, #132]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18b92:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   18b94:	4b20      	ldr	r3, [pc, #128]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18b96:	222d      	movs	r2, #45	; 0x2d
   18b98:	835a      	strh	r2, [r3, #26]
   18b9a:	4b1f      	ldr	r3, [pc, #124]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18b9c:	8b5a      	ldrh	r2, [r3, #26]
   18b9e:	4b1e      	ldr	r3, [pc, #120]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18ba0:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   18ba2:	4b1d      	ldr	r3, [pc, #116]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18ba4:	2232      	movs	r2, #50	; 0x32
   18ba6:	839a      	strh	r2, [r3, #28]
   18ba8:	4b1b      	ldr	r3, [pc, #108]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18baa:	8b9a      	ldrh	r2, [r3, #28]
   18bac:	4b1a      	ldr	r3, [pc, #104]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18bae:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   18bb0:	4b19      	ldr	r3, [pc, #100]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18bb2:	2237      	movs	r2, #55	; 0x37
   18bb4:	83da      	strh	r2, [r3, #30]
   18bb6:	4b18      	ldr	r3, [pc, #96]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18bb8:	8bda      	ldrh	r2, [r3, #30]
   18bba:	4b17      	ldr	r3, [pc, #92]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18bbc:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   18bbe:	4b16      	ldr	r3, [pc, #88]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18bc0:	223c      	movs	r2, #60	; 0x3c
   18bc2:	841a      	strh	r2, [r3, #32]
   18bc4:	4b14      	ldr	r3, [pc, #80]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18bc6:	8c1a      	ldrh	r2, [r3, #32]
   18bc8:	4b13      	ldr	r3, [pc, #76]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18bca:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   18bcc:	4b12      	ldr	r3, [pc, #72]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18bce:	2241      	movs	r2, #65	; 0x41
   18bd0:	845a      	strh	r2, [r3, #34]	; 0x22
   18bd2:	4b11      	ldr	r3, [pc, #68]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18bd4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   18bd6:	4b10      	ldr	r3, [pc, #64]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18bd8:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   18bda:	4b0f      	ldr	r3, [pc, #60]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18bdc:	2209      	movs	r2, #9
   18bde:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   18be0:	4b0d      	ldr	r3, [pc, #52]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18be2:	2213      	movs	r2, #19
   18be4:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   18be6:	4b0c      	ldr	r3, [pc, #48]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18be8:	221d      	movs	r2, #29
   18bea:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   18bec:	4b0a      	ldr	r3, [pc, #40]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18bee:	222c      	movs	r2, #44	; 0x2c
   18bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   18bf2:	4b09      	ldr	r3, [pc, #36]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18bf4:	2231      	movs	r2, #49	; 0x31
   18bf6:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   18bf8:	4b07      	ldr	r3, [pc, #28]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18bfa:	2236      	movs	r2, #54	; 0x36
   18bfc:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   18bfe:	4b06      	ldr	r3, [pc, #24]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18c00:	223b      	movs	r2, #59	; 0x3b
   18c02:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   18c04:	4b04      	ldr	r3, [pc, #16]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18c06:	2240      	movs	r2, #64	; 0x40
   18c08:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   18c0a:	4b03      	ldr	r3, [pc, #12]	; (18c18 <vTraceInitObjectHandleStack+0xc0>)
   18c0c:	2245      	movs	r2, #69	; 0x45
   18c0e:	869a      	strh	r2, [r3, #52]	; 0x34
}
   18c10:	46c0      	nop			; (mov r8, r8)
   18c12:	46bd      	mov	sp, r7
   18c14:	bd80      	pop	{r7, pc}
   18c16:	46c0      	nop			; (mov r8, r8)
   18c18:	20000d64 	.word	0x20000d64

00018c1c <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   18c1c:	b580      	push	{r7, lr}
   18c1e:	b082      	sub	sp, #8
   18c20:	af00      	add	r7, sp, #0
   18c22:	0002      	movs	r2, r0
   18c24:	1dfb      	adds	r3, r7, #7
   18c26:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   18c28:	1dfb      	adds	r3, r7, #7
   18c2a:	781b      	ldrb	r3, [r3, #0]
   18c2c:	2b08      	cmp	r3, #8
   18c2e:	d816      	bhi.n	18c5e <pszTraceGetErrorNotEnoughHandles+0x42>
   18c30:	009a      	lsls	r2, r3, #2
   18c32:	4b0d      	ldr	r3, [pc, #52]	; (18c68 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   18c34:	18d3      	adds	r3, r2, r3
   18c36:	681b      	ldr	r3, [r3, #0]
   18c38:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   18c3a:	4b0c      	ldr	r3, [pc, #48]	; (18c6c <pszTraceGetErrorNotEnoughHandles+0x50>)
   18c3c:	e010      	b.n	18c60 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   18c3e:	4b0c      	ldr	r3, [pc, #48]	; (18c70 <pszTraceGetErrorNotEnoughHandles+0x54>)
   18c40:	e00e      	b.n	18c60 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   18c42:	4b0c      	ldr	r3, [pc, #48]	; (18c74 <pszTraceGetErrorNotEnoughHandles+0x58>)
   18c44:	e00c      	b.n	18c60 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   18c46:	4b0c      	ldr	r3, [pc, #48]	; (18c78 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   18c48:	e00a      	b.n	18c60 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   18c4a:	4b0c      	ldr	r3, [pc, #48]	; (18c7c <pszTraceGetErrorNotEnoughHandles+0x60>)
   18c4c:	e008      	b.n	18c60 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   18c4e:	4b0c      	ldr	r3, [pc, #48]	; (18c80 <pszTraceGetErrorNotEnoughHandles+0x64>)
   18c50:	e006      	b.n	18c60 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   18c52:	4b0c      	ldr	r3, [pc, #48]	; (18c84 <pszTraceGetErrorNotEnoughHandles+0x68>)
   18c54:	e004      	b.n	18c60 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   18c56:	4b0c      	ldr	r3, [pc, #48]	; (18c88 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   18c58:	e002      	b.n	18c60 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   18c5a:	4b0c      	ldr	r3, [pc, #48]	; (18c8c <pszTraceGetErrorNotEnoughHandles+0x70>)
   18c5c:	e000      	b.n	18c60 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   18c5e:	4b0c      	ldr	r3, [pc, #48]	; (18c90 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   18c60:	0018      	movs	r0, r3
   18c62:	46bd      	mov	sp, r7
   18c64:	b002      	add	sp, #8
   18c66:	bd80      	pop	{r7, pc}
   18c68:	00037a1c 	.word	0x00037a1c
   18c6c:	0003771c 	.word	0x0003771c
   18c70:	00037764 	.word	0x00037764
   18c74:	000377ac 	.word	0x000377ac
   18c78:	00037800 	.word	0x00037800
   18c7c:	0003784c 	.word	0x0003784c
   18c80:	00037898 	.word	0x00037898
   18c84:	000378e4 	.word	0x000378e4
   18c88:	00037938 	.word	0x00037938
   18c8c:	00037990 	.word	0x00037990
   18c90:	000379ec 	.word	0x000379ec

00018c94 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   18c94:	b590      	push	{r4, r7, lr}
   18c96:	b087      	sub	sp, #28
   18c98:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   18c9a:	2317      	movs	r3, #23
   18c9c:	18fb      	adds	r3, r7, r3
   18c9e:	2200      	movs	r2, #0
   18ca0:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   18ca2:	4b36      	ldr	r3, [pc, #216]	; (18d7c <uiTraceStart+0xe8>)
   18ca4:	681b      	ldr	r3, [r3, #0]
   18ca6:	2b00      	cmp	r3, #0
   18ca8:	d10b      	bne.n	18cc2 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   18caa:	4b34      	ldr	r3, [pc, #208]	; (18d7c <uiTraceStart+0xe8>)
   18cac:	681b      	ldr	r3, [r3, #0]
   18cae:	2b00      	cmp	r3, #0
   18cb0:	d105      	bne.n	18cbe <uiTraceStart+0x2a>
   18cb2:	4b33      	ldr	r3, [pc, #204]	; (18d80 <uiTraceStart+0xec>)
   18cb4:	0018      	movs	r0, r3
   18cb6:	4b33      	ldr	r3, [pc, #204]	; (18d84 <uiTraceStart+0xf0>)
   18cb8:	4798      	blx	r3
   18cba:	2300      	movs	r3, #0
   18cbc:	e059      	b.n	18d72 <uiTraceStart+0xde>
		return 0;
   18cbe:	2300      	movs	r3, #0
   18cc0:	e057      	b.n	18d72 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   18cc2:	4b2e      	ldr	r3, [pc, #184]	; (18d7c <uiTraceStart+0xe8>)
   18cc4:	681b      	ldr	r3, [r3, #0]
   18cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18cc8:	2b01      	cmp	r3, #1
   18cca:	d101      	bne.n	18cd0 <uiTraceStart+0x3c>
		return 1; /* Already running */
   18ccc:	2301      	movs	r3, #1
   18cce:	e050      	b.n	18d72 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   18cd0:	4b2d      	ldr	r3, [pc, #180]	; (18d88 <uiTraceStart+0xf4>)
   18cd2:	681b      	ldr	r3, [r3, #0]
   18cd4:	2b00      	cmp	r3, #0
   18cd6:	d149      	bne.n	18d6c <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18cd8:	f3ef 8310 	mrs	r3, PRIMASK
   18cdc:	60bb      	str	r3, [r7, #8]
  return(result);
   18cde:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   18ce0:	613b      	str	r3, [r7, #16]
   18ce2:	2301      	movs	r3, #1
   18ce4:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18ce6:	68fb      	ldr	r3, [r7, #12]
   18ce8:	f383 8810 	msr	PRIMASK, r3
   18cec:	4b27      	ldr	r3, [pc, #156]	; (18d8c <uiTraceStart+0xf8>)
   18cee:	681b      	ldr	r3, [r3, #0]
   18cf0:	1c5a      	adds	r2, r3, #1
   18cf2:	4b26      	ldr	r3, [pc, #152]	; (18d8c <uiTraceStart+0xf8>)
   18cf4:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   18cf6:	4b21      	ldr	r3, [pc, #132]	; (18d7c <uiTraceStart+0xe8>)
   18cf8:	681b      	ldr	r3, [r3, #0]
   18cfa:	2201      	movs	r2, #1
   18cfc:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   18cfe:	4b24      	ldr	r3, [pc, #144]	; (18d90 <uiTraceStart+0xfc>)
   18d00:	4798      	blx	r3
   18d02:	0003      	movs	r3, r0
   18d04:	0018      	movs	r0, r3
   18d06:	4b23      	ldr	r3, [pc, #140]	; (18d94 <uiTraceStart+0x100>)
   18d08:	4798      	blx	r3
   18d0a:	0003      	movs	r3, r0
   18d0c:	001a      	movs	r2, r3
   18d0e:	2317      	movs	r3, #23
   18d10:	18fb      	adds	r3, r7, r3
   18d12:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   18d14:	2317      	movs	r3, #23
   18d16:	18fb      	adds	r3, r7, r3
   18d18:	781b      	ldrb	r3, [r3, #0]
   18d1a:	2b00      	cmp	r3, #0
   18d1c:	d116      	bne.n	18d4c <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   18d1e:	2317      	movs	r3, #23
   18d20:	18fc      	adds	r4, r7, r3
   18d22:	2003      	movs	r0, #3
   18d24:	4b1c      	ldr	r3, [pc, #112]	; (18d98 <uiTraceStart+0x104>)
   18d26:	4798      	blx	r3
   18d28:	0003      	movs	r3, r0
   18d2a:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   18d2c:	4a1b      	ldr	r2, [pc, #108]	; (18d9c <uiTraceStart+0x108>)
   18d2e:	2317      	movs	r3, #23
   18d30:	18fb      	adds	r3, r7, r3
   18d32:	781b      	ldrb	r3, [r3, #0]
   18d34:	0019      	movs	r1, r3
   18d36:	2003      	movs	r0, #3
   18d38:	4b19      	ldr	r3, [pc, #100]	; (18da0 <uiTraceStart+0x10c>)
   18d3a:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   18d3c:	2317      	movs	r3, #23
   18d3e:	18fb      	adds	r3, r7, r3
   18d40:	781b      	ldrb	r3, [r3, #0]
   18d42:	2200      	movs	r2, #0
   18d44:	0019      	movs	r1, r3
   18d46:	2003      	movs	r0, #3
   18d48:	4b16      	ldr	r3, [pc, #88]	; (18da4 <uiTraceStart+0x110>)
   18d4a:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   18d4c:	2317      	movs	r3, #23
   18d4e:	18fb      	adds	r3, r7, r3
   18d50:	781b      	ldrb	r3, [r3, #0]
   18d52:	0018      	movs	r0, r3
   18d54:	4b14      	ldr	r3, [pc, #80]	; (18da8 <uiTraceStart+0x114>)
   18d56:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   18d58:	4b0c      	ldr	r3, [pc, #48]	; (18d8c <uiTraceStart+0xf8>)
   18d5a:	681b      	ldr	r3, [r3, #0]
   18d5c:	1e5a      	subs	r2, r3, #1
   18d5e:	4b0b      	ldr	r3, [pc, #44]	; (18d8c <uiTraceStart+0xf8>)
   18d60:	601a      	str	r2, [r3, #0]
   18d62:	693b      	ldr	r3, [r7, #16]
   18d64:	607b      	str	r3, [r7, #4]
   18d66:	687b      	ldr	r3, [r7, #4]
   18d68:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   18d6c:	4b03      	ldr	r3, [pc, #12]	; (18d7c <uiTraceStart+0xe8>)
   18d6e:	681b      	ldr	r3, [r3, #0]
   18d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   18d72:	0018      	movs	r0, r3
   18d74:	46bd      	mov	sp, r7
   18d76:	b007      	add	sp, #28
   18d78:	bd90      	pop	{r4, r7, pc}
   18d7a:	46c0      	nop			; (mov r8, r8)
   18d7c:	20000df4 	.word	0x20000df4
   18d80:	00037a40 	.word	0x00037a40
   18d84:	00019efd 	.word	0x00019efd
   18d88:	20000d54 	.word	0x20000d54
   18d8c:	20000d4c 	.word	0x20000d4c
   18d90:	000188fd 	.word	0x000188fd
   18d94:	00018641 	.word	0x00018641
   18d98:	00019be1 	.word	0x00019be1
   18d9c:	00037a84 	.word	0x00037a84
   18da0:	00019e11 	.word	0x00019e11
   18da4:	00019575 	.word	0x00019575
   18da8:	0001945d 	.word	0x0001945d

00018dac <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   18dac:	b580      	push	{r7, lr}
   18dae:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   18db0:	4b02      	ldr	r3, [pc, #8]	; (18dbc <vTraceStart+0x10>)
   18db2:	4798      	blx	r3
}
   18db4:	46c0      	nop			; (mov r8, r8)
   18db6:	46bd      	mov	sp, r7
   18db8:	bd80      	pop	{r7, pc}
   18dba:	46c0      	nop			; (mov r8, r8)
   18dbc:	00018c95 	.word	0x00018c95

00018dc0 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   18dc0:	b580      	push	{r7, lr}
   18dc2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18dc4:	4b08      	ldr	r3, [pc, #32]	; (18de8 <vTraceStop+0x28>)
   18dc6:	681b      	ldr	r3, [r3, #0]
   18dc8:	2b00      	cmp	r3, #0
   18dca:	d003      	beq.n	18dd4 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   18dcc:	4b06      	ldr	r3, [pc, #24]	; (18de8 <vTraceStop+0x28>)
   18dce:	681b      	ldr	r3, [r3, #0]
   18dd0:	2200      	movs	r2, #0
   18dd2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   18dd4:	4b05      	ldr	r3, [pc, #20]	; (18dec <vTraceStop+0x2c>)
   18dd6:	681b      	ldr	r3, [r3, #0]
   18dd8:	2b00      	cmp	r3, #0
   18dda:	d002      	beq.n	18de2 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   18ddc:	4b03      	ldr	r3, [pc, #12]	; (18dec <vTraceStop+0x2c>)
   18dde:	681b      	ldr	r3, [r3, #0]
   18de0:	4798      	blx	r3
	}
}
   18de2:	46c0      	nop			; (mov r8, r8)
   18de4:	46bd      	mov	sp, r7
   18de6:	bd80      	pop	{r7, pc}
   18de8:	20000df4 	.word	0x20000df4
   18dec:	20000d5c 	.word	0x20000d5c

00018df0 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   18df0:	b580      	push	{r7, lr}
   18df2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18df4:	4b05      	ldr	r3, [pc, #20]	; (18e0c <xTraceIsRecordingEnabled+0x1c>)
   18df6:	681b      	ldr	r3, [r3, #0]
   18df8:	2b00      	cmp	r3, #0
   18dfa:	d003      	beq.n	18e04 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   18dfc:	4b03      	ldr	r3, [pc, #12]	; (18e0c <xTraceIsRecordingEnabled+0x1c>)
   18dfe:	681b      	ldr	r3, [r3, #0]
   18e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18e02:	e000      	b.n	18e06 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   18e04:	2300      	movs	r3, #0
	}
}
   18e06:	0018      	movs	r0, r3
   18e08:	46bd      	mov	sp, r7
   18e0a:	bd80      	pop	{r7, pc}
   18e0c:	20000df4 	.word	0x20000df4

00018e10 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   18e10:	b590      	push	{r4, r7, lr}
   18e12:	b089      	sub	sp, #36	; 0x24
   18e14:	af00      	add	r7, sp, #0
   18e16:	0002      	movs	r2, r0
   18e18:	1dfb      	adds	r3, r7, #7
   18e1a:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   18e1c:	1dfb      	adds	r3, r7, #7
   18e1e:	781b      	ldrb	r3, [r3, #0]
   18e20:	2b00      	cmp	r3, #0
   18e22:	d057      	beq.n	18ed4 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   18e24:	4b2e      	ldr	r3, [pc, #184]	; (18ee0 <prvTraceStoreTaskReady+0xd0>)
   18e26:	681b      	ldr	r3, [r3, #0]
   18e28:	2b00      	cmp	r3, #0
   18e2a:	d055      	beq.n	18ed8 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   18e2c:	1dfb      	adds	r3, r7, #7
   18e2e:	781b      	ldrb	r3, [r3, #0]
   18e30:	2b0f      	cmp	r3, #15
   18e32:	d904      	bls.n	18e3e <prvTraceStoreTaskReady+0x2e>
   18e34:	4b2b      	ldr	r3, [pc, #172]	; (18ee4 <prvTraceStoreTaskReady+0xd4>)
   18e36:	0018      	movs	r0, r3
   18e38:	4b2b      	ldr	r3, [pc, #172]	; (18ee8 <prvTraceStoreTaskReady+0xd8>)
   18e3a:	4798      	blx	r3
   18e3c:	e04d      	b.n	18eda <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   18e3e:	4b2b      	ldr	r3, [pc, #172]	; (18eec <prvTraceStoreTaskReady+0xdc>)
   18e40:	681b      	ldr	r3, [r3, #0]
   18e42:	2b00      	cmp	r3, #0
   18e44:	d004      	beq.n	18e50 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   18e46:	4b2a      	ldr	r3, [pc, #168]	; (18ef0 <prvTraceStoreTaskReady+0xe0>)
   18e48:	0018      	movs	r0, r3
   18e4a:	4b27      	ldr	r3, [pc, #156]	; (18ee8 <prvTraceStoreTaskReady+0xd8>)
   18e4c:	4798      	blx	r3
		return;
   18e4e:	e044      	b.n	18eda <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18e50:	f3ef 8310 	mrs	r3, PRIMASK
   18e54:	60fb      	str	r3, [r7, #12]
  return(result);
   18e56:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   18e58:	61fb      	str	r3, [r7, #28]
   18e5a:	2301      	movs	r3, #1
   18e5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18e5e:	693b      	ldr	r3, [r7, #16]
   18e60:	f383 8810 	msr	PRIMASK, r3
   18e64:	4b21      	ldr	r3, [pc, #132]	; (18eec <prvTraceStoreTaskReady+0xdc>)
   18e66:	681b      	ldr	r3, [r3, #0]
   18e68:	1c5a      	adds	r2, r3, #1
   18e6a:	4b20      	ldr	r3, [pc, #128]	; (18eec <prvTraceStoreTaskReady+0xdc>)
   18e6c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   18e6e:	4b21      	ldr	r3, [pc, #132]	; (18ef4 <prvTraceStoreTaskReady+0xe4>)
   18e70:	681b      	ldr	r3, [r3, #0]
   18e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18e74:	2b00      	cmp	r3, #0
   18e76:	d022      	beq.n	18ebe <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18e78:	231a      	movs	r3, #26
   18e7a:	18fc      	adds	r4, r7, r3
   18e7c:	4b1e      	ldr	r3, [pc, #120]	; (18ef8 <prvTraceStoreTaskReady+0xe8>)
   18e7e:	0018      	movs	r0, r3
   18e80:	4b1e      	ldr	r3, [pc, #120]	; (18efc <prvTraceStoreTaskReady+0xec>)
   18e82:	4798      	blx	r3
   18e84:	0003      	movs	r3, r0
   18e86:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   18e88:	2319      	movs	r3, #25
   18e8a:	18fb      	adds	r3, r7, r3
   18e8c:	1dfa      	adds	r2, r7, #7
   18e8e:	7812      	ldrb	r2, [r2, #0]
   18e90:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   18e92:	4b1b      	ldr	r3, [pc, #108]	; (18f00 <prvTraceStoreTaskReady+0xf0>)
   18e94:	4798      	blx	r3
   18e96:	0003      	movs	r3, r0
   18e98:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   18e9a:	697b      	ldr	r3, [r7, #20]
   18e9c:	2b00      	cmp	r3, #0
   18e9e:	d00e      	beq.n	18ebe <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   18ea0:	697b      	ldr	r3, [r7, #20]
   18ea2:	2202      	movs	r2, #2
   18ea4:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   18ea6:	697b      	ldr	r3, [r7, #20]
   18ea8:	221a      	movs	r2, #26
   18eaa:	18ba      	adds	r2, r7, r2
   18eac:	8812      	ldrh	r2, [r2, #0]
   18eae:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   18eb0:	697b      	ldr	r3, [r7, #20]
   18eb2:	2219      	movs	r2, #25
   18eb4:	18ba      	adds	r2, r7, r2
   18eb6:	7812      	ldrb	r2, [r2, #0]
   18eb8:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   18eba:	4b12      	ldr	r3, [pc, #72]	; (18f04 <prvTraceStoreTaskReady+0xf4>)
   18ebc:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18ebe:	4b0b      	ldr	r3, [pc, #44]	; (18eec <prvTraceStoreTaskReady+0xdc>)
   18ec0:	681b      	ldr	r3, [r3, #0]
   18ec2:	1e5a      	subs	r2, r3, #1
   18ec4:	4b09      	ldr	r3, [pc, #36]	; (18eec <prvTraceStoreTaskReady+0xdc>)
   18ec6:	601a      	str	r2, [r3, #0]
   18ec8:	69fb      	ldr	r3, [r7, #28]
   18eca:	60bb      	str	r3, [r7, #8]
   18ecc:	68bb      	ldr	r3, [r7, #8]
   18ece:	f383 8810 	msr	PRIMASK, r3
   18ed2:	e002      	b.n	18eda <prvTraceStoreTaskReady+0xca>
		return;
   18ed4:	46c0      	nop			; (mov r8, r8)
   18ed6:	e000      	b.n	18eda <prvTraceStoreTaskReady+0xca>
		return;
   18ed8:	46c0      	nop			; (mov r8, r8)
}
   18eda:	46bd      	mov	sp, r7
   18edc:	b009      	add	sp, #36	; 0x24
   18ede:	bd90      	pop	{r4, r7, pc}
   18ee0:	2000010c 	.word	0x2000010c
   18ee4:	00037dec 	.word	0x00037dec
   18ee8:	00019efd 	.word	0x00019efd
   18eec:	20000d4c 	.word	0x20000d4c
   18ef0:	00037e2c 	.word	0x00037e2c
   18ef4:	20000df4 	.word	0x20000df4
   18ef8:	0000ffff 	.word	0x0000ffff
   18efc:	0001a111 	.word	0x0001a111
   18f00:	00019ab5 	.word	0x00019ab5
   18f04:	0001a0b9 	.word	0x0001a0b9

00018f08 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   18f08:	b580      	push	{r7, lr}
   18f0a:	b08e      	sub	sp, #56	; 0x38
   18f0c:	af00      	add	r7, sp, #0
   18f0e:	60f8      	str	r0, [r7, #12]
   18f10:	60b9      	str	r1, [r7, #8]
   18f12:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   18f14:	4b48      	ldr	r3, [pc, #288]	; (19038 <vTraceStoreMemMangEvent+0x130>)
   18f16:	681b      	ldr	r3, [r3, #0]
   18f18:	2b00      	cmp	r3, #0
   18f1a:	d100      	bne.n	18f1e <vTraceStoreMemMangEvent+0x16>
   18f1c:	e088      	b.n	19030 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   18f1e:	687b      	ldr	r3, [r7, #4]
   18f20:	2b00      	cmp	r3, #0
   18f22:	da03      	bge.n	18f2c <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   18f24:	687b      	ldr	r3, [r7, #4]
   18f26:	425b      	negs	r3, r3
   18f28:	637b      	str	r3, [r7, #52]	; 0x34
   18f2a:	e001      	b.n	18f30 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   18f2c:	687b      	ldr	r3, [r7, #4]
   18f2e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18f30:	f3ef 8310 	mrs	r3, PRIMASK
   18f34:	61bb      	str	r3, [r7, #24]
  return(result);
   18f36:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   18f38:	633b      	str	r3, [r7, #48]	; 0x30
   18f3a:	2301      	movs	r3, #1
   18f3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18f3e:	69fb      	ldr	r3, [r7, #28]
   18f40:	f383 8810 	msr	PRIMASK, r3
   18f44:	4b3d      	ldr	r3, [pc, #244]	; (1903c <vTraceStoreMemMangEvent+0x134>)
   18f46:	681b      	ldr	r3, [r3, #0]
   18f48:	1c5a      	adds	r2, r3, #1
   18f4a:	4b3c      	ldr	r3, [pc, #240]	; (1903c <vTraceStoreMemMangEvent+0x134>)
   18f4c:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   18f4e:	68bb      	ldr	r3, [r7, #8]
   18f50:	2b00      	cmp	r3, #0
   18f52:	d005      	beq.n	18f60 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   18f54:	4b3a      	ldr	r3, [pc, #232]	; (19040 <vTraceStoreMemMangEvent+0x138>)
   18f56:	681a      	ldr	r2, [r3, #0]
   18f58:	687b      	ldr	r3, [r7, #4]
   18f5a:	18d2      	adds	r2, r2, r3
   18f5c:	4b38      	ldr	r3, [pc, #224]	; (19040 <vTraceStoreMemMangEvent+0x138>)
   18f5e:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   18f60:	4b35      	ldr	r3, [pc, #212]	; (19038 <vTraceStoreMemMangEvent+0x130>)
   18f62:	681b      	ldr	r3, [r3, #0]
   18f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18f66:	2b00      	cmp	r3, #0
   18f68:	d057      	beq.n	1901a <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   18f6a:	20ff      	movs	r0, #255	; 0xff
   18f6c:	4b35      	ldr	r3, [pc, #212]	; (19044 <vTraceStoreMemMangEvent+0x13c>)
   18f6e:	4798      	blx	r3
   18f70:	0003      	movs	r3, r0
   18f72:	001a      	movs	r2, r3
   18f74:	232f      	movs	r3, #47	; 0x2f
   18f76:	18fb      	adds	r3, r7, r3
   18f78:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   18f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18f7c:	4a32      	ldr	r2, [pc, #200]	; (19048 <vTraceStoreMemMangEvent+0x140>)
   18f7e:	0019      	movs	r1, r3
   18f80:	0010      	movs	r0, r2
   18f82:	4b32      	ldr	r3, [pc, #200]	; (1904c <vTraceStoreMemMangEvent+0x144>)
   18f84:	4798      	blx	r3
   18f86:	0002      	movs	r2, r0
   18f88:	232c      	movs	r3, #44	; 0x2c
   18f8a:	18fb      	adds	r3, r7, r3
   18f8c:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   18f8e:	4b30      	ldr	r3, [pc, #192]	; (19050 <vTraceStoreMemMangEvent+0x148>)
   18f90:	4798      	blx	r3
   18f92:	0003      	movs	r3, r0
   18f94:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   18f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18f98:	2b00      	cmp	r3, #0
   18f9a:	d03e      	beq.n	1901a <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   18f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18f9e:	222f      	movs	r2, #47	; 0x2f
   18fa0:	18ba      	adds	r2, r7, r2
   18fa2:	7812      	ldrb	r2, [r2, #0]
   18fa4:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   18fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18fa8:	2200      	movs	r2, #0
   18faa:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   18fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18fae:	222c      	movs	r2, #44	; 0x2c
   18fb0:	18ba      	adds	r2, r7, r2
   18fb2:	8812      	ldrh	r2, [r2, #0]
   18fb4:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18fb6:	4b27      	ldr	r3, [pc, #156]	; (19054 <vTraceStoreMemMangEvent+0x14c>)
   18fb8:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   18fba:	68bb      	ldr	r3, [r7, #8]
   18fbc:	4a22      	ldr	r2, [pc, #136]	; (19048 <vTraceStoreMemMangEvent+0x140>)
   18fbe:	0019      	movs	r1, r3
   18fc0:	0010      	movs	r0, r2
   18fc2:	4b22      	ldr	r3, [pc, #136]	; (1904c <vTraceStoreMemMangEvent+0x144>)
   18fc4:	4798      	blx	r3
   18fc6:	0002      	movs	r2, r0
   18fc8:	2326      	movs	r3, #38	; 0x26
   18fca:	18fb      	adds	r3, r7, r3
   18fcc:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   18fce:	2325      	movs	r3, #37	; 0x25
   18fd0:	18fb      	adds	r3, r7, r3
   18fd2:	2200      	movs	r2, #0
   18fd4:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   18fd6:	4b1e      	ldr	r3, [pc, #120]	; (19050 <vTraceStoreMemMangEvent+0x148>)
   18fd8:	4798      	blx	r3
   18fda:	0003      	movs	r3, r0
   18fdc:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   18fde:	6a3b      	ldr	r3, [r7, #32]
   18fe0:	2b00      	cmp	r3, #0
   18fe2:	d01a      	beq.n	1901a <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   18fe4:	6a3b      	ldr	r3, [r7, #32]
   18fe6:	2226      	movs	r2, #38	; 0x26
   18fe8:	18ba      	adds	r2, r7, r2
   18fea:	8812      	ldrh	r2, [r2, #0]
   18fec:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   18fee:	6a3b      	ldr	r3, [r7, #32]
   18ff0:	2225      	movs	r2, #37	; 0x25
   18ff2:	18ba      	adds	r2, r7, r2
   18ff4:	7812      	ldrb	r2, [r2, #0]
   18ff6:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   18ff8:	68fb      	ldr	r3, [r7, #12]
   18ffa:	b2db      	uxtb	r3, r3
   18ffc:	3301      	adds	r3, #1
   18ffe:	b2da      	uxtb	r2, r3
   19000:	6a3b      	ldr	r3, [r7, #32]
   19002:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   19004:	68fb      	ldr	r3, [r7, #12]
   19006:	b2da      	uxtb	r2, r3
   19008:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1900a:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   1900c:	4b11      	ldr	r3, [pc, #68]	; (19054 <vTraceStoreMemMangEvent+0x14c>)
   1900e:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   19010:	4b09      	ldr	r3, [pc, #36]	; (19038 <vTraceStoreMemMangEvent+0x130>)
   19012:	681b      	ldr	r3, [r3, #0]
   19014:	4a0a      	ldr	r2, [pc, #40]	; (19040 <vTraceStoreMemMangEvent+0x138>)
   19016:	6812      	ldr	r2, [r2, #0]
   19018:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   1901a:	4b08      	ldr	r3, [pc, #32]	; (1903c <vTraceStoreMemMangEvent+0x134>)
   1901c:	681b      	ldr	r3, [r3, #0]
   1901e:	1e5a      	subs	r2, r3, #1
   19020:	4b06      	ldr	r3, [pc, #24]	; (1903c <vTraceStoreMemMangEvent+0x134>)
   19022:	601a      	str	r2, [r3, #0]
   19024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19026:	617b      	str	r3, [r7, #20]
   19028:	697b      	ldr	r3, [r7, #20]
   1902a:	f383 8810 	msr	PRIMASK, r3
   1902e:	e000      	b.n	19032 <vTraceStoreMemMangEvent+0x12a>
		return;
   19030:	46c0      	nop			; (mov r8, r8)
}
   19032:	46bd      	mov	sp, r7
   19034:	b00e      	add	sp, #56	; 0x38
   19036:	bd80      	pop	{r7, pc}
   19038:	20000df4 	.word	0x20000df4
   1903c:	20000d4c 	.word	0x20000d4c
   19040:	20000d60 	.word	0x20000d60
   19044:	0001a111 	.word	0x0001a111
   19048:	0000ffff 	.word	0x0000ffff
   1904c:	000192d5 	.word	0x000192d5
   19050:	00019ab5 	.word	0x00019ab5
   19054:	0001a0b9 	.word	0x0001a0b9

00019058 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   19058:	b590      	push	{r4, r7, lr}
   1905a:	b08b      	sub	sp, #44	; 0x2c
   1905c:	af00      	add	r7, sp, #0
   1905e:	60f8      	str	r0, [r7, #12]
   19060:	607a      	str	r2, [r7, #4]
   19062:	230b      	movs	r3, #11
   19064:	18fb      	adds	r3, r7, r3
   19066:	1c0a      	adds	r2, r1, #0
   19068:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1906a:	68fb      	ldr	r3, [r7, #12]
   1906c:	2bfe      	cmp	r3, #254	; 0xfe
   1906e:	d904      	bls.n	1907a <prvTraceStoreKernelCall+0x22>
   19070:	4b39      	ldr	r3, [pc, #228]	; (19158 <prvTraceStoreKernelCall+0x100>)
   19072:	0018      	movs	r0, r3
   19074:	4b39      	ldr	r3, [pc, #228]	; (1915c <prvTraceStoreKernelCall+0x104>)
   19076:	4798      	blx	r3
   19078:	e06b      	b.n	19152 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1907a:	230b      	movs	r3, #11
   1907c:	18fb      	adds	r3, r7, r3
   1907e:	781b      	ldrb	r3, [r3, #0]
   19080:	2b08      	cmp	r3, #8
   19082:	d904      	bls.n	1908e <prvTraceStoreKernelCall+0x36>
   19084:	4b36      	ldr	r3, [pc, #216]	; (19160 <prvTraceStoreKernelCall+0x108>)
   19086:	0018      	movs	r0, r3
   19088:	4b34      	ldr	r3, [pc, #208]	; (1915c <prvTraceStoreKernelCall+0x104>)
   1908a:	4798      	blx	r3
   1908c:	e061      	b.n	19152 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1908e:	4b35      	ldr	r3, [pc, #212]	; (19164 <prvTraceStoreKernelCall+0x10c>)
   19090:	681a      	ldr	r2, [r3, #0]
   19092:	230b      	movs	r3, #11
   19094:	18fb      	adds	r3, r7, r3
   19096:	781b      	ldrb	r3, [r3, #0]
   19098:	2164      	movs	r1, #100	; 0x64
   1909a:	18d3      	adds	r3, r2, r3
   1909c:	185b      	adds	r3, r3, r1
   1909e:	781b      	ldrb	r3, [r3, #0]
   190a0:	001a      	movs	r2, r3
   190a2:	687b      	ldr	r3, [r7, #4]
   190a4:	429a      	cmp	r2, r3
   190a6:	d204      	bcs.n	190b2 <prvTraceStoreKernelCall+0x5a>
   190a8:	4b2f      	ldr	r3, [pc, #188]	; (19168 <prvTraceStoreKernelCall+0x110>)
   190aa:	0018      	movs	r0, r3
   190ac:	4b2b      	ldr	r3, [pc, #172]	; (1915c <prvTraceStoreKernelCall+0x104>)
   190ae:	4798      	blx	r3
   190b0:	e04f      	b.n	19152 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   190b2:	4b2e      	ldr	r3, [pc, #184]	; (1916c <prvTraceStoreKernelCall+0x114>)
   190b4:	681b      	ldr	r3, [r3, #0]
   190b6:	2b00      	cmp	r3, #0
   190b8:	d004      	beq.n	190c4 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   190ba:	4b2d      	ldr	r3, [pc, #180]	; (19170 <prvTraceStoreKernelCall+0x118>)
   190bc:	0018      	movs	r0, r3
   190be:	4b27      	ldr	r3, [pc, #156]	; (1915c <prvTraceStoreKernelCall+0x104>)
   190c0:	4798      	blx	r3
		return;
   190c2:	e046      	b.n	19152 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   190c4:	4b2b      	ldr	r3, [pc, #172]	; (19174 <prvTraceStoreKernelCall+0x11c>)
   190c6:	781b      	ldrb	r3, [r3, #0]
   190c8:	2b00      	cmp	r3, #0
   190ca:	d041      	beq.n	19150 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   190cc:	f3ef 8310 	mrs	r3, PRIMASK
   190d0:	617b      	str	r3, [r7, #20]
  return(result);
   190d2:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   190d4:	627b      	str	r3, [r7, #36]	; 0x24
   190d6:	2301      	movs	r3, #1
   190d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   190da:	69bb      	ldr	r3, [r7, #24]
   190dc:	f383 8810 	msr	PRIMASK, r3
   190e0:	4b22      	ldr	r3, [pc, #136]	; (1916c <prvTraceStoreKernelCall+0x114>)
   190e2:	681b      	ldr	r3, [r3, #0]
   190e4:	1c5a      	adds	r2, r3, #1
   190e6:	4b21      	ldr	r3, [pc, #132]	; (1916c <prvTraceStoreKernelCall+0x114>)
   190e8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   190ea:	4b1e      	ldr	r3, [pc, #120]	; (19164 <prvTraceStoreKernelCall+0x10c>)
   190ec:	681b      	ldr	r3, [r3, #0]
   190ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   190f0:	2b00      	cmp	r3, #0
   190f2:	d022      	beq.n	1913a <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   190f4:	2322      	movs	r3, #34	; 0x22
   190f6:	18fc      	adds	r4, r7, r3
   190f8:	4b1f      	ldr	r3, [pc, #124]	; (19178 <prvTraceStoreKernelCall+0x120>)
   190fa:	0018      	movs	r0, r3
   190fc:	4b1f      	ldr	r3, [pc, #124]	; (1917c <prvTraceStoreKernelCall+0x124>)
   190fe:	4798      	blx	r3
   19100:	0003      	movs	r3, r0
   19102:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19104:	2321      	movs	r3, #33	; 0x21
   19106:	18fb      	adds	r3, r7, r3
   19108:	687a      	ldr	r2, [r7, #4]
   1910a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   1910c:	4b1c      	ldr	r3, [pc, #112]	; (19180 <prvTraceStoreKernelCall+0x128>)
   1910e:	4798      	blx	r3
   19110:	0003      	movs	r3, r0
   19112:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19114:	69fb      	ldr	r3, [r7, #28]
   19116:	2b00      	cmp	r3, #0
   19118:	d00f      	beq.n	1913a <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   1911a:	69fb      	ldr	r3, [r7, #28]
   1911c:	2222      	movs	r2, #34	; 0x22
   1911e:	18ba      	adds	r2, r7, r2
   19120:	8812      	ldrh	r2, [r2, #0]
   19122:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   19124:	68fb      	ldr	r3, [r7, #12]
   19126:	b2da      	uxtb	r2, r3
   19128:	69fb      	ldr	r3, [r7, #28]
   1912a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1912c:	69fb      	ldr	r3, [r7, #28]
   1912e:	2221      	movs	r2, #33	; 0x21
   19130:	18ba      	adds	r2, r7, r2
   19132:	7812      	ldrb	r2, [r2, #0]
   19134:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   19136:	4b13      	ldr	r3, [pc, #76]	; (19184 <prvTraceStoreKernelCall+0x12c>)
   19138:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1913a:	4b0c      	ldr	r3, [pc, #48]	; (1916c <prvTraceStoreKernelCall+0x114>)
   1913c:	681b      	ldr	r3, [r3, #0]
   1913e:	1e5a      	subs	r2, r3, #1
   19140:	4b0a      	ldr	r3, [pc, #40]	; (1916c <prvTraceStoreKernelCall+0x114>)
   19142:	601a      	str	r2, [r3, #0]
   19144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19146:	613b      	str	r3, [r7, #16]
   19148:	693b      	ldr	r3, [r7, #16]
   1914a:	f383 8810 	msr	PRIMASK, r3
   1914e:	e000      	b.n	19152 <prvTraceStoreKernelCall+0xfa>
		return;
   19150:	46c0      	nop			; (mov r8, r8)
}
   19152:	46bd      	mov	sp, r7
   19154:	b00b      	add	sp, #44	; 0x2c
   19156:	bd90      	pop	{r4, r7, pc}
   19158:	00037e9c 	.word	0x00037e9c
   1915c:	00019efd 	.word	0x00019efd
   19160:	00037ed4 	.word	0x00037ed4
   19164:	20000df4 	.word	0x20000df4
   19168:	00037f1c 	.word	0x00037f1c
   1916c:	20000d4c 	.word	0x20000d4c
   19170:	00037f64 	.word	0x00037f64
   19174:	20000d58 	.word	0x20000d58
   19178:	0000ffff 	.word	0x0000ffff
   1917c:	0001a111 	.word	0x0001a111
   19180:	00019ab5 	.word	0x00019ab5
   19184:	0001a0b9 	.word	0x0001a0b9

00019188 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   19188:	b580      	push	{r7, lr}
   1918a:	b08a      	sub	sp, #40	; 0x28
   1918c:	af00      	add	r7, sp, #0
   1918e:	60f8      	str	r0, [r7, #12]
   19190:	607a      	str	r2, [r7, #4]
   19192:	603b      	str	r3, [r7, #0]
   19194:	230b      	movs	r3, #11
   19196:	18fb      	adds	r3, r7, r3
   19198:	1c0a      	adds	r2, r1, #0
   1919a:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   1919c:	68fb      	ldr	r3, [r7, #12]
   1919e:	2bfe      	cmp	r3, #254	; 0xfe
   191a0:	d904      	bls.n	191ac <prvTraceStoreKernelCallWithParam+0x24>
   191a2:	4b40      	ldr	r3, [pc, #256]	; (192a4 <prvTraceStoreKernelCallWithParam+0x11c>)
   191a4:	0018      	movs	r0, r3
   191a6:	4b40      	ldr	r3, [pc, #256]	; (192a8 <prvTraceStoreKernelCallWithParam+0x120>)
   191a8:	4798      	blx	r3
   191aa:	e077      	b.n	1929c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   191ac:	230b      	movs	r3, #11
   191ae:	18fb      	adds	r3, r7, r3
   191b0:	781b      	ldrb	r3, [r3, #0]
   191b2:	2b08      	cmp	r3, #8
   191b4:	d904      	bls.n	191c0 <prvTraceStoreKernelCallWithParam+0x38>
   191b6:	4b3d      	ldr	r3, [pc, #244]	; (192ac <prvTraceStoreKernelCallWithParam+0x124>)
   191b8:	0018      	movs	r0, r3
   191ba:	4b3b      	ldr	r3, [pc, #236]	; (192a8 <prvTraceStoreKernelCallWithParam+0x120>)
   191bc:	4798      	blx	r3
   191be:	e06d      	b.n	1929c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   191c0:	4b3b      	ldr	r3, [pc, #236]	; (192b0 <prvTraceStoreKernelCallWithParam+0x128>)
   191c2:	681a      	ldr	r2, [r3, #0]
   191c4:	230b      	movs	r3, #11
   191c6:	18fb      	adds	r3, r7, r3
   191c8:	781b      	ldrb	r3, [r3, #0]
   191ca:	2164      	movs	r1, #100	; 0x64
   191cc:	18d3      	adds	r3, r2, r3
   191ce:	185b      	adds	r3, r3, r1
   191d0:	781b      	ldrb	r3, [r3, #0]
   191d2:	001a      	movs	r2, r3
   191d4:	687b      	ldr	r3, [r7, #4]
   191d6:	429a      	cmp	r2, r3
   191d8:	d204      	bcs.n	191e4 <prvTraceStoreKernelCallWithParam+0x5c>
   191da:	4b36      	ldr	r3, [pc, #216]	; (192b4 <prvTraceStoreKernelCallWithParam+0x12c>)
   191dc:	0018      	movs	r0, r3
   191de:	4b32      	ldr	r3, [pc, #200]	; (192a8 <prvTraceStoreKernelCallWithParam+0x120>)
   191e0:	4798      	blx	r3
   191e2:	e05b      	b.n	1929c <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   191e4:	4b34      	ldr	r3, [pc, #208]	; (192b8 <prvTraceStoreKernelCallWithParam+0x130>)
   191e6:	681b      	ldr	r3, [r3, #0]
   191e8:	2b00      	cmp	r3, #0
   191ea:	d004      	beq.n	191f6 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   191ec:	4b33      	ldr	r3, [pc, #204]	; (192bc <prvTraceStoreKernelCallWithParam+0x134>)
   191ee:	0018      	movs	r0, r3
   191f0:	4b2d      	ldr	r3, [pc, #180]	; (192a8 <prvTraceStoreKernelCallWithParam+0x120>)
   191f2:	4798      	blx	r3
		return;
   191f4:	e052      	b.n	1929c <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   191f6:	f3ef 8310 	mrs	r3, PRIMASK
   191fa:	617b      	str	r3, [r7, #20]
  return(result);
   191fc:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   191fe:	627b      	str	r3, [r7, #36]	; 0x24
   19200:	2301      	movs	r3, #1
   19202:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19204:	69bb      	ldr	r3, [r7, #24]
   19206:	f383 8810 	msr	PRIMASK, r3
   1920a:	4b2b      	ldr	r3, [pc, #172]	; (192b8 <prvTraceStoreKernelCallWithParam+0x130>)
   1920c:	681b      	ldr	r3, [r3, #0]
   1920e:	1c5a      	adds	r2, r3, #1
   19210:	4b29      	ldr	r3, [pc, #164]	; (192b8 <prvTraceStoreKernelCallWithParam+0x130>)
   19212:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   19214:	4b26      	ldr	r3, [pc, #152]	; (192b0 <prvTraceStoreKernelCallWithParam+0x128>)
   19216:	681b      	ldr	r3, [r3, #0]
   19218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1921a:	2b00      	cmp	r3, #0
   1921c:	d034      	beq.n	19288 <prvTraceStoreKernelCallWithParam+0x100>
   1921e:	4b28      	ldr	r3, [pc, #160]	; (192c0 <prvTraceStoreKernelCallWithParam+0x138>)
   19220:	781b      	ldrb	r3, [r3, #0]
   19222:	2b00      	cmp	r3, #0
   19224:	d030      	beq.n	19288 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   19226:	20ff      	movs	r0, #255	; 0xff
   19228:	4b26      	ldr	r3, [pc, #152]	; (192c4 <prvTraceStoreKernelCallWithParam+0x13c>)
   1922a:	4798      	blx	r3
   1922c:	0003      	movs	r3, r0
   1922e:	001a      	movs	r2, r3
   19230:	2323      	movs	r3, #35	; 0x23
   19232:	18fb      	adds	r3, r7, r3
   19234:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   19236:	683b      	ldr	r3, [r7, #0]
   19238:	0019      	movs	r1, r3
   1923a:	20ff      	movs	r0, #255	; 0xff
   1923c:	4b22      	ldr	r3, [pc, #136]	; (192c8 <prvTraceStoreKernelCallWithParam+0x140>)
   1923e:	4798      	blx	r3
   19240:	0002      	movs	r2, r0
   19242:	2322      	movs	r3, #34	; 0x22
   19244:	18fb      	adds	r3, r7, r3
   19246:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19248:	2321      	movs	r3, #33	; 0x21
   1924a:	18fb      	adds	r3, r7, r3
   1924c:	687a      	ldr	r2, [r7, #4]
   1924e:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   19250:	4b1e      	ldr	r3, [pc, #120]	; (192cc <prvTraceStoreKernelCallWithParam+0x144>)
   19252:	4798      	blx	r3
   19254:	0003      	movs	r3, r0
   19256:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19258:	69fb      	ldr	r3, [r7, #28]
   1925a:	2b00      	cmp	r3, #0
   1925c:	d014      	beq.n	19288 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   1925e:	69fb      	ldr	r3, [r7, #28]
   19260:	2223      	movs	r2, #35	; 0x23
   19262:	18ba      	adds	r2, r7, r2
   19264:	7812      	ldrb	r2, [r2, #0]
   19266:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   19268:	68fb      	ldr	r3, [r7, #12]
   1926a:	b2da      	uxtb	r2, r3
   1926c:	69fb      	ldr	r3, [r7, #28]
   1926e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   19270:	69fb      	ldr	r3, [r7, #28]
   19272:	2221      	movs	r2, #33	; 0x21
   19274:	18ba      	adds	r2, r7, r2
   19276:	7812      	ldrb	r2, [r2, #0]
   19278:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1927a:	69fb      	ldr	r3, [r7, #28]
   1927c:	2222      	movs	r2, #34	; 0x22
   1927e:	18ba      	adds	r2, r7, r2
   19280:	7812      	ldrb	r2, [r2, #0]
   19282:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   19284:	4b12      	ldr	r3, [pc, #72]	; (192d0 <prvTraceStoreKernelCallWithParam+0x148>)
   19286:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19288:	4b0b      	ldr	r3, [pc, #44]	; (192b8 <prvTraceStoreKernelCallWithParam+0x130>)
   1928a:	681b      	ldr	r3, [r3, #0]
   1928c:	1e5a      	subs	r2, r3, #1
   1928e:	4b0a      	ldr	r3, [pc, #40]	; (192b8 <prvTraceStoreKernelCallWithParam+0x130>)
   19290:	601a      	str	r2, [r3, #0]
   19292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19294:	613b      	str	r3, [r7, #16]
   19296:	693b      	ldr	r3, [r7, #16]
   19298:	f383 8810 	msr	PRIMASK, r3
}
   1929c:	46bd      	mov	sp, r7
   1929e:	b00a      	add	sp, #40	; 0x28
   192a0:	bd80      	pop	{r7, pc}
   192a2:	46c0      	nop			; (mov r8, r8)
   192a4:	00037f9c 	.word	0x00037f9c
   192a8:	00019efd 	.word	0x00019efd
   192ac:	00037fdc 	.word	0x00037fdc
   192b0:	20000df4 	.word	0x20000df4
   192b4:	0003802c 	.word	0x0003802c
   192b8:	20000d4c 	.word	0x20000d4c
   192bc:	0003807c 	.word	0x0003807c
   192c0:	20000d58 	.word	0x20000d58
   192c4:	0001a111 	.word	0x0001a111
   192c8:	000192d5 	.word	0x000192d5
   192cc:	00019ab5 	.word	0x00019ab5
   192d0:	0001a0b9 	.word	0x0001a0b9

000192d4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   192d4:	b580      	push	{r7, lr}
   192d6:	b084      	sub	sp, #16
   192d8:	af00      	add	r7, sp, #0
   192da:	6078      	str	r0, [r7, #4]
   192dc:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   192de:	687b      	ldr	r3, [r7, #4]
   192e0:	2bff      	cmp	r3, #255	; 0xff
   192e2:	d009      	beq.n	192f8 <prvTraceGetParam+0x24>
   192e4:	687b      	ldr	r3, [r7, #4]
   192e6:	4a19      	ldr	r2, [pc, #100]	; (1934c <prvTraceGetParam+0x78>)
   192e8:	4293      	cmp	r3, r2
   192ea:	d005      	beq.n	192f8 <prvTraceGetParam+0x24>
   192ec:	4b18      	ldr	r3, [pc, #96]	; (19350 <prvTraceGetParam+0x7c>)
   192ee:	0018      	movs	r0, r3
   192f0:	4b18      	ldr	r3, [pc, #96]	; (19354 <prvTraceGetParam+0x80>)
   192f2:	4798      	blx	r3
   192f4:	683b      	ldr	r3, [r7, #0]
   192f6:	e024      	b.n	19342 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   192f8:	683a      	ldr	r2, [r7, #0]
   192fa:	687b      	ldr	r3, [r7, #4]
   192fc:	429a      	cmp	r2, r3
   192fe:	d801      	bhi.n	19304 <prvTraceGetParam+0x30>
	{
		return param;
   19300:	683b      	ldr	r3, [r7, #0]
   19302:	e01e      	b.n	19342 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   19304:	4b14      	ldr	r3, [pc, #80]	; (19358 <prvTraceGetParam+0x84>)
   19306:	4798      	blx	r3
   19308:	0003      	movs	r3, r0
   1930a:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   1930c:	68fb      	ldr	r3, [r7, #12]
   1930e:	2b00      	cmp	r3, #0
   19310:	d014      	beq.n	1933c <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   19312:	68fb      	ldr	r3, [r7, #12]
   19314:	2201      	movs	r2, #1
   19316:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   19318:	687b      	ldr	r3, [r7, #4]
   1931a:	43db      	mvns	r3, r3
   1931c:	683a      	ldr	r2, [r7, #0]
   1931e:	4013      	ands	r3, r2
   19320:	0a1b      	lsrs	r3, r3, #8
   19322:	b2da      	uxtb	r2, r3
   19324:	68fb      	ldr	r3, [r7, #12]
   19326:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   19328:	687b      	ldr	r3, [r7, #4]
   1932a:	43db      	mvns	r3, r3
   1932c:	683a      	ldr	r2, [r7, #0]
   1932e:	4013      	ands	r3, r2
   19330:	0c1b      	lsrs	r3, r3, #16
   19332:	b29a      	uxth	r2, r3
   19334:	68fb      	ldr	r3, [r7, #12]
   19336:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19338:	4b08      	ldr	r3, [pc, #32]	; (1935c <prvTraceGetParam+0x88>)
   1933a:	4798      	blx	r3
		}

		return param & param_max;
   1933c:	683b      	ldr	r3, [r7, #0]
   1933e:	687a      	ldr	r2, [r7, #4]
   19340:	4013      	ands	r3, r2
	}
}
   19342:	0018      	movs	r0, r3
   19344:	46bd      	mov	sp, r7
   19346:	b004      	add	sp, #16
   19348:	bd80      	pop	{r7, pc}
   1934a:	46c0      	nop			; (mov r8, r8)
   1934c:	0000ffff 	.word	0x0000ffff
   19350:	000380b4 	.word	0x000380b4
   19354:	00019efd 	.word	0x00019efd
   19358:	00019ab5 	.word	0x00019ab5
   1935c:	0001a0b9 	.word	0x0001a0b9

00019360 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   19360:	b580      	push	{r7, lr}
   19362:	b08a      	sub	sp, #40	; 0x28
   19364:	af00      	add	r7, sp, #0
   19366:	6078      	str	r0, [r7, #4]
   19368:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1936a:	2326      	movs	r3, #38	; 0x26
   1936c:	18fb      	adds	r3, r7, r3
   1936e:	2200      	movs	r2, #0
   19370:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   19372:	687b      	ldr	r3, [r7, #4]
   19374:	2bfe      	cmp	r3, #254	; 0xfe
   19376:	d904      	bls.n	19382 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   19378:	4b2d      	ldr	r3, [pc, #180]	; (19430 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1937a:	0018      	movs	r0, r3
   1937c:	4b2d      	ldr	r3, [pc, #180]	; (19434 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1937e:	4798      	blx	r3
   19380:	e053      	b.n	1942a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   19382:	4b2d      	ldr	r3, [pc, #180]	; (19438 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19384:	681b      	ldr	r3, [r3, #0]
   19386:	2b00      	cmp	r3, #0
   19388:	d004      	beq.n	19394 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1938a:	4b2c      	ldr	r3, [pc, #176]	; (1943c <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   1938c:	0018      	movs	r0, r3
   1938e:	4b29      	ldr	r3, [pc, #164]	; (19434 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   19390:	4798      	blx	r3
		return;
   19392:	e04a      	b.n	1942a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19394:	f3ef 8310 	mrs	r3, PRIMASK
   19398:	613b      	str	r3, [r7, #16]
  return(result);
   1939a:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   1939c:	623b      	str	r3, [r7, #32]
   1939e:	2301      	movs	r3, #1
   193a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   193a2:	697b      	ldr	r3, [r7, #20]
   193a4:	f383 8810 	msr	PRIMASK, r3
   193a8:	4b23      	ldr	r3, [pc, #140]	; (19438 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   193aa:	681b      	ldr	r3, [r3, #0]
   193ac:	1c5a      	adds	r2, r3, #1
   193ae:	4b22      	ldr	r3, [pc, #136]	; (19438 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   193b0:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   193b2:	4b23      	ldr	r3, [pc, #140]	; (19440 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   193b4:	681b      	ldr	r3, [r3, #0]
   193b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   193b8:	2b00      	cmp	r3, #0
   193ba:	d02c      	beq.n	19416 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   193bc:	4b21      	ldr	r3, [pc, #132]	; (19444 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   193be:	781b      	ldrb	r3, [r3, #0]
   193c0:	2b00      	cmp	r3, #0
   193c2:	d028      	beq.n	19416 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   193c4:	20ff      	movs	r0, #255	; 0xff
   193c6:	4b20      	ldr	r3, [pc, #128]	; (19448 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   193c8:	4798      	blx	r3
   193ca:	0003      	movs	r3, r0
   193cc:	001a      	movs	r2, r3
   193ce:	231f      	movs	r3, #31
   193d0:	18fb      	adds	r3, r7, r3
   193d2:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   193d4:	683b      	ldr	r3, [r7, #0]
   193d6:	4a1d      	ldr	r2, [pc, #116]	; (1944c <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   193d8:	0019      	movs	r1, r3
   193da:	0010      	movs	r0, r2
   193dc:	4b1c      	ldr	r3, [pc, #112]	; (19450 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   193de:	4798      	blx	r3
   193e0:	0002      	movs	r2, r0
   193e2:	2326      	movs	r3, #38	; 0x26
   193e4:	18fb      	adds	r3, r7, r3
   193e6:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   193e8:	4b1a      	ldr	r3, [pc, #104]	; (19454 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   193ea:	4798      	blx	r3
   193ec:	0003      	movs	r3, r0
   193ee:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   193f0:	69bb      	ldr	r3, [r7, #24]
   193f2:	2b00      	cmp	r3, #0
   193f4:	d00f      	beq.n	19416 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   193f6:	69bb      	ldr	r3, [r7, #24]
   193f8:	221f      	movs	r2, #31
   193fa:	18ba      	adds	r2, r7, r2
   193fc:	7812      	ldrb	r2, [r2, #0]
   193fe:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   19400:	687b      	ldr	r3, [r7, #4]
   19402:	b2da      	uxtb	r2, r3
   19404:	69bb      	ldr	r3, [r7, #24]
   19406:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   19408:	69bb      	ldr	r3, [r7, #24]
   1940a:	2226      	movs	r2, #38	; 0x26
   1940c:	18ba      	adds	r2, r7, r2
   1940e:	8812      	ldrh	r2, [r2, #0]
   19410:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19412:	4b11      	ldr	r3, [pc, #68]	; (19458 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   19414:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19416:	4b08      	ldr	r3, [pc, #32]	; (19438 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19418:	681b      	ldr	r3, [r3, #0]
   1941a:	1e5a      	subs	r2, r3, #1
   1941c:	4b06      	ldr	r3, [pc, #24]	; (19438 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1941e:	601a      	str	r2, [r3, #0]
   19420:	6a3b      	ldr	r3, [r7, #32]
   19422:	60fb      	str	r3, [r7, #12]
   19424:	68fb      	ldr	r3, [r7, #12]
   19426:	f383 8810 	msr	PRIMASK, r3
}
   1942a:	46bd      	mov	sp, r7
   1942c:	b00a      	add	sp, #40	; 0x28
   1942e:	bd80      	pop	{r7, pc}
   19430:	000380f0 	.word	0x000380f0
   19434:	00019efd 	.word	0x00019efd
   19438:	20000d4c 	.word	0x20000d4c
   1943c:	00038148 	.word	0x00038148
   19440:	20000df4 	.word	0x20000df4
   19444:	20000d58 	.word	0x20000d58
   19448:	0001a111 	.word	0x0001a111
   1944c:	0000ffff 	.word	0x0000ffff
   19450:	000192d5 	.word	0x000192d5
   19454:	00019ab5 	.word	0x00019ab5
   19458:	0001a0b9 	.word	0x0001a0b9

0001945c <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   1945c:	b590      	push	{r4, r7, lr}
   1945e:	b089      	sub	sp, #36	; 0x24
   19460:	af00      	add	r7, sp, #0
   19462:	0002      	movs	r2, r0
   19464:	1dfb      	adds	r3, r7, #7
   19466:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   19468:	1dfb      	adds	r3, r7, #7
   1946a:	781b      	ldrb	r3, [r3, #0]
   1946c:	2b0f      	cmp	r3, #15
   1946e:	d904      	bls.n	1947a <prvTraceStoreTaskswitch+0x1e>
   19470:	4b34      	ldr	r3, [pc, #208]	; (19544 <prvTraceStoreTaskswitch+0xe8>)
   19472:	0018      	movs	r0, r3
   19474:	4b34      	ldr	r3, [pc, #208]	; (19548 <prvTraceStoreTaskswitch+0xec>)
   19476:	4798      	blx	r3
   19478:	e061      	b.n	1953e <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1947a:	f3ef 8310 	mrs	r3, PRIMASK
   1947e:	60fb      	str	r3, [r7, #12]
  return(result);
   19480:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   19482:	61fb      	str	r3, [r7, #28]
   19484:	2301      	movs	r3, #1
   19486:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19488:	693b      	ldr	r3, [r7, #16]
   1948a:	f383 8810 	msr	PRIMASK, r3
   1948e:	4b2f      	ldr	r3, [pc, #188]	; (1954c <prvTraceStoreTaskswitch+0xf0>)
   19490:	681b      	ldr	r3, [r3, #0]
   19492:	1c5a      	adds	r2, r3, #1
   19494:	4b2d      	ldr	r3, [pc, #180]	; (1954c <prvTraceStoreTaskswitch+0xf0>)
   19496:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   19498:	4b2d      	ldr	r3, [pc, #180]	; (19550 <prvTraceStoreTaskswitch+0xf4>)
   1949a:	781b      	ldrb	r3, [r3, #0]
   1949c:	1dfa      	adds	r2, r7, #7
   1949e:	7812      	ldrb	r2, [r2, #0]
   194a0:	429a      	cmp	r2, r3
   194a2:	d042      	beq.n	1952a <prvTraceStoreTaskswitch+0xce>
   194a4:	4b2b      	ldr	r3, [pc, #172]	; (19554 <prvTraceStoreTaskswitch+0xf8>)
   194a6:	681b      	ldr	r3, [r3, #0]
   194a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   194aa:	2b00      	cmp	r3, #0
   194ac:	d03d      	beq.n	1952a <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   194ae:	4b2a      	ldr	r3, [pc, #168]	; (19558 <prvTraceStoreTaskswitch+0xfc>)
   194b0:	2200      	movs	r2, #0
   194b2:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   194b4:	231a      	movs	r3, #26
   194b6:	18fc      	adds	r4, r7, r3
   194b8:	4b28      	ldr	r3, [pc, #160]	; (1955c <prvTraceStoreTaskswitch+0x100>)
   194ba:	0018      	movs	r0, r3
   194bc:	4b28      	ldr	r3, [pc, #160]	; (19560 <prvTraceStoreTaskswitch+0x104>)
   194be:	4798      	blx	r3
   194c0:	0003      	movs	r3, r0
   194c2:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   194c4:	4b22      	ldr	r3, [pc, #136]	; (19550 <prvTraceStoreTaskswitch+0xf4>)
   194c6:	1dfa      	adds	r2, r7, #7
   194c8:	7812      	ldrb	r2, [r2, #0]
   194ca:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   194cc:	2319      	movs	r3, #25
   194ce:	18fb      	adds	r3, r7, r3
   194d0:	4a1f      	ldr	r2, [pc, #124]	; (19550 <prvTraceStoreTaskswitch+0xf4>)
   194d2:	7812      	ldrb	r2, [r2, #0]
   194d4:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   194d6:	4b23      	ldr	r3, [pc, #140]	; (19564 <prvTraceStoreTaskswitch+0x108>)
   194d8:	4798      	blx	r3
   194da:	0003      	movs	r3, r0
   194dc:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   194de:	697b      	ldr	r3, [r7, #20]
   194e0:	2b00      	cmp	r3, #0
   194e2:	d022      	beq.n	1952a <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   194e4:	4b1a      	ldr	r3, [pc, #104]	; (19550 <prvTraceStoreTaskswitch+0xf4>)
   194e6:	781b      	ldrb	r3, [r3, #0]
   194e8:	0019      	movs	r1, r3
   194ea:	2003      	movs	r0, #3
   194ec:	4b1e      	ldr	r3, [pc, #120]	; (19568 <prvTraceStoreTaskswitch+0x10c>)
   194ee:	4798      	blx	r3
   194f0:	0003      	movs	r3, r0
   194f2:	2b01      	cmp	r3, #1
   194f4:	d103      	bne.n	194fe <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   194f6:	697b      	ldr	r3, [r7, #20]
   194f8:	2207      	movs	r2, #7
   194fa:	701a      	strb	r2, [r3, #0]
   194fc:	e002      	b.n	19504 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   194fe:	697b      	ldr	r3, [r7, #20]
   19500:	2206      	movs	r2, #6
   19502:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   19504:	697b      	ldr	r3, [r7, #20]
   19506:	221a      	movs	r2, #26
   19508:	18ba      	adds	r2, r7, r2
   1950a:	8812      	ldrh	r2, [r2, #0]
   1950c:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   1950e:	697b      	ldr	r3, [r7, #20]
   19510:	2219      	movs	r2, #25
   19512:	18ba      	adds	r2, r7, r2
   19514:	7812      	ldrb	r2, [r2, #0]
   19516:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   19518:	4b0d      	ldr	r3, [pc, #52]	; (19550 <prvTraceStoreTaskswitch+0xf4>)
   1951a:	781b      	ldrb	r3, [r3, #0]
   1951c:	2201      	movs	r2, #1
   1951e:	0019      	movs	r1, r3
   19520:	2003      	movs	r0, #3
   19522:	4b12      	ldr	r3, [pc, #72]	; (1956c <prvTraceStoreTaskswitch+0x110>)
   19524:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   19526:	4b12      	ldr	r3, [pc, #72]	; (19570 <prvTraceStoreTaskswitch+0x114>)
   19528:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   1952a:	4b08      	ldr	r3, [pc, #32]	; (1954c <prvTraceStoreTaskswitch+0xf0>)
   1952c:	681b      	ldr	r3, [r3, #0]
   1952e:	1e5a      	subs	r2, r3, #1
   19530:	4b06      	ldr	r3, [pc, #24]	; (1954c <prvTraceStoreTaskswitch+0xf0>)
   19532:	601a      	str	r2, [r3, #0]
   19534:	69fb      	ldr	r3, [r7, #28]
   19536:	60bb      	str	r3, [r7, #8]
   19538:	68bb      	ldr	r3, [r7, #8]
   1953a:	f383 8810 	msr	PRIMASK, r3
}
   1953e:	46bd      	mov	sp, r7
   19540:	b009      	add	sp, #36	; 0x24
   19542:	bd90      	pop	{r4, r7, pc}
   19544:	00038180 	.word	0x00038180
   19548:	00019efd 	.word	0x00019efd
   1954c:	20000d4c 	.word	0x20000d4c
   19550:	20000d58 	.word	0x20000d58
   19554:	20000df4 	.word	0x20000df4
   19558:	20000d38 	.word	0x20000d38
   1955c:	0000ffff 	.word	0x0000ffff
   19560:	0001a111 	.word	0x0001a111
   19564:	00019ab5 	.word	0x00019ab5
   19568:	00019759 	.word	0x00019759
   1956c:	000196b5 	.word	0x000196b5
   19570:	0001a0b9 	.word	0x0001a0b9

00019574 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19574:	b590      	push	{r4, r7, lr}
   19576:	b083      	sub	sp, #12
   19578:	af00      	add	r7, sp, #0
   1957a:	0004      	movs	r4, r0
   1957c:	0008      	movs	r0, r1
   1957e:	0011      	movs	r1, r2
   19580:	1dfb      	adds	r3, r7, #7
   19582:	1c22      	adds	r2, r4, #0
   19584:	701a      	strb	r2, [r3, #0]
   19586:	1dbb      	adds	r3, r7, #6
   19588:	1c02      	adds	r2, r0, #0
   1958a:	701a      	strb	r2, [r3, #0]
   1958c:	1d7b      	adds	r3, r7, #5
   1958e:	1c0a      	adds	r2, r1, #0
   19590:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19592:	1dfb      	adds	r3, r7, #7
   19594:	781b      	ldrb	r3, [r3, #0]
   19596:	2b08      	cmp	r3, #8
   19598:	d904      	bls.n	195a4 <prvTraceSetPriorityProperty+0x30>
   1959a:	4b1a      	ldr	r3, [pc, #104]	; (19604 <prvTraceSetPriorityProperty+0x90>)
   1959c:	0018      	movs	r0, r3
   1959e:	4b1a      	ldr	r3, [pc, #104]	; (19608 <prvTraceSetPriorityProperty+0x94>)
   195a0:	4798      	blx	r3
   195a2:	e02c      	b.n	195fe <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   195a4:	4b19      	ldr	r3, [pc, #100]	; (1960c <prvTraceSetPriorityProperty+0x98>)
   195a6:	681a      	ldr	r2, [r3, #0]
   195a8:	1dfb      	adds	r3, r7, #7
   195aa:	781b      	ldrb	r3, [r3, #0]
   195ac:	2164      	movs	r1, #100	; 0x64
   195ae:	18d3      	adds	r3, r2, r3
   195b0:	185b      	adds	r3, r3, r1
   195b2:	781b      	ldrb	r3, [r3, #0]
   195b4:	1dba      	adds	r2, r7, #6
   195b6:	7812      	ldrb	r2, [r2, #0]
   195b8:	429a      	cmp	r2, r3
   195ba:	d904      	bls.n	195c6 <prvTraceSetPriorityProperty+0x52>
   195bc:	4b14      	ldr	r3, [pc, #80]	; (19610 <prvTraceSetPriorityProperty+0x9c>)
   195be:	0018      	movs	r0, r3
   195c0:	4b11      	ldr	r3, [pc, #68]	; (19608 <prvTraceSetPriorityProperty+0x94>)
   195c2:	4798      	blx	r3
   195c4:	e01b      	b.n	195fe <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   195c6:	4b11      	ldr	r3, [pc, #68]	; (1960c <prvTraceSetPriorityProperty+0x98>)
   195c8:	681c      	ldr	r4, [r3, #0]
   195ca:	1dfb      	adds	r3, r7, #7
   195cc:	781a      	ldrb	r2, [r3, #0]
   195ce:	1dbb      	adds	r3, r7, #6
   195d0:	781b      	ldrb	r3, [r3, #0]
   195d2:	0011      	movs	r1, r2
   195d4:	0018      	movs	r0, r3
   195d6:	4b0f      	ldr	r3, [pc, #60]	; (19614 <prvTraceSetPriorityProperty+0xa0>)
   195d8:	4798      	blx	r3
   195da:	0003      	movs	r3, r0
   195dc:	0018      	movs	r0, r3
   195de:	4b0b      	ldr	r3, [pc, #44]	; (1960c <prvTraceSetPriorityProperty+0x98>)
   195e0:	681a      	ldr	r2, [r3, #0]
   195e2:	1dfb      	adds	r3, r7, #7
   195e4:	781b      	ldrb	r3, [r3, #0]
   195e6:	2170      	movs	r1, #112	; 0x70
   195e8:	18d3      	adds	r3, r2, r3
   195ea:	185b      	adds	r3, r3, r1
   195ec:	781b      	ldrb	r3, [r3, #0]
   195ee:	18c3      	adds	r3, r0, r3
   195f0:	3301      	adds	r3, #1
   195f2:	229c      	movs	r2, #156	; 0x9c
   195f4:	18e3      	adds	r3, r4, r3
   195f6:	189b      	adds	r3, r3, r2
   195f8:	1d7a      	adds	r2, r7, #5
   195fa:	7812      	ldrb	r2, [r2, #0]
   195fc:	701a      	strb	r2, [r3, #0]
}
   195fe:	46bd      	mov	sp, r7
   19600:	b003      	add	sp, #12
   19602:	bd90      	pop	{r4, r7, pc}
   19604:	00038314 	.word	0x00038314
   19608:	00019efd 	.word	0x00019efd
   1960c:	20000df4 	.word	0x20000df4
   19610:	00038360 	.word	0x00038360
   19614:	00019b09 	.word	0x00019b09

00019618 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   19618:	b590      	push	{r4, r7, lr}
   1961a:	b083      	sub	sp, #12
   1961c:	af00      	add	r7, sp, #0
   1961e:	0002      	movs	r2, r0
   19620:	1dfb      	adds	r3, r7, #7
   19622:	701a      	strb	r2, [r3, #0]
   19624:	1dbb      	adds	r3, r7, #6
   19626:	1c0a      	adds	r2, r1, #0
   19628:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1962a:	1dfb      	adds	r3, r7, #7
   1962c:	781b      	ldrb	r3, [r3, #0]
   1962e:	2b08      	cmp	r3, #8
   19630:	d905      	bls.n	1963e <prvTraceGetPriorityProperty+0x26>
   19632:	4b1b      	ldr	r3, [pc, #108]	; (196a0 <prvTraceGetPriorityProperty+0x88>)
   19634:	0018      	movs	r0, r3
   19636:	4b1b      	ldr	r3, [pc, #108]	; (196a4 <prvTraceGetPriorityProperty+0x8c>)
   19638:	4798      	blx	r3
   1963a:	2300      	movs	r3, #0
   1963c:	e02b      	b.n	19696 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1963e:	4b1a      	ldr	r3, [pc, #104]	; (196a8 <prvTraceGetPriorityProperty+0x90>)
   19640:	681a      	ldr	r2, [r3, #0]
   19642:	1dfb      	adds	r3, r7, #7
   19644:	781b      	ldrb	r3, [r3, #0]
   19646:	2164      	movs	r1, #100	; 0x64
   19648:	18d3      	adds	r3, r2, r3
   1964a:	185b      	adds	r3, r3, r1
   1964c:	781b      	ldrb	r3, [r3, #0]
   1964e:	1dba      	adds	r2, r7, #6
   19650:	7812      	ldrb	r2, [r2, #0]
   19652:	429a      	cmp	r2, r3
   19654:	d905      	bls.n	19662 <prvTraceGetPriorityProperty+0x4a>
   19656:	4b15      	ldr	r3, [pc, #84]	; (196ac <prvTraceGetPriorityProperty+0x94>)
   19658:	0018      	movs	r0, r3
   1965a:	4b12      	ldr	r3, [pc, #72]	; (196a4 <prvTraceGetPriorityProperty+0x8c>)
   1965c:	4798      	blx	r3
   1965e:	2300      	movs	r3, #0
   19660:	e019      	b.n	19696 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   19662:	4b11      	ldr	r3, [pc, #68]	; (196a8 <prvTraceGetPriorityProperty+0x90>)
   19664:	681c      	ldr	r4, [r3, #0]
   19666:	1dfb      	adds	r3, r7, #7
   19668:	781a      	ldrb	r2, [r3, #0]
   1966a:	1dbb      	adds	r3, r7, #6
   1966c:	781b      	ldrb	r3, [r3, #0]
   1966e:	0011      	movs	r1, r2
   19670:	0018      	movs	r0, r3
   19672:	4b0f      	ldr	r3, [pc, #60]	; (196b0 <prvTraceGetPriorityProperty+0x98>)
   19674:	4798      	blx	r3
   19676:	0003      	movs	r3, r0
   19678:	0018      	movs	r0, r3
   1967a:	4b0b      	ldr	r3, [pc, #44]	; (196a8 <prvTraceGetPriorityProperty+0x90>)
   1967c:	681a      	ldr	r2, [r3, #0]
   1967e:	1dfb      	adds	r3, r7, #7
   19680:	781b      	ldrb	r3, [r3, #0]
   19682:	2170      	movs	r1, #112	; 0x70
   19684:	18d3      	adds	r3, r2, r3
   19686:	185b      	adds	r3, r3, r1
   19688:	781b      	ldrb	r3, [r3, #0]
   1968a:	18c3      	adds	r3, r0, r3
   1968c:	3301      	adds	r3, #1
   1968e:	229c      	movs	r2, #156	; 0x9c
   19690:	18e3      	adds	r3, r4, r3
   19692:	189b      	adds	r3, r3, r2
   19694:	781b      	ldrb	r3, [r3, #0]
}
   19696:	0018      	movs	r0, r3
   19698:	46bd      	mov	sp, r7
   1969a:	b003      	add	sp, #12
   1969c:	bd90      	pop	{r4, r7, pc}
   1969e:	46c0      	nop			; (mov r8, r8)
   196a0:	000383a0 	.word	0x000383a0
   196a4:	00019efd 	.word	0x00019efd
   196a8:	20000df4 	.word	0x20000df4
   196ac:	000383ec 	.word	0x000383ec
   196b0:	00019b09 	.word	0x00019b09

000196b4 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   196b4:	b590      	push	{r4, r7, lr}
   196b6:	b083      	sub	sp, #12
   196b8:	af00      	add	r7, sp, #0
   196ba:	0004      	movs	r4, r0
   196bc:	0008      	movs	r0, r1
   196be:	0011      	movs	r1, r2
   196c0:	1dfb      	adds	r3, r7, #7
   196c2:	1c22      	adds	r2, r4, #0
   196c4:	701a      	strb	r2, [r3, #0]
   196c6:	1dbb      	adds	r3, r7, #6
   196c8:	1c02      	adds	r2, r0, #0
   196ca:	701a      	strb	r2, [r3, #0]
   196cc:	1d7b      	adds	r3, r7, #5
   196ce:	1c0a      	adds	r2, r1, #0
   196d0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   196d2:	1dfb      	adds	r3, r7, #7
   196d4:	781b      	ldrb	r3, [r3, #0]
   196d6:	2b08      	cmp	r3, #8
   196d8:	d904      	bls.n	196e4 <prvTraceSetObjectState+0x30>
   196da:	4b1a      	ldr	r3, [pc, #104]	; (19744 <prvTraceSetObjectState+0x90>)
   196dc:	0018      	movs	r0, r3
   196de:	4b1a      	ldr	r3, [pc, #104]	; (19748 <prvTraceSetObjectState+0x94>)
   196e0:	4798      	blx	r3
   196e2:	e02b      	b.n	1973c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   196e4:	4b19      	ldr	r3, [pc, #100]	; (1974c <prvTraceSetObjectState+0x98>)
   196e6:	681a      	ldr	r2, [r3, #0]
   196e8:	1dfb      	adds	r3, r7, #7
   196ea:	781b      	ldrb	r3, [r3, #0]
   196ec:	2164      	movs	r1, #100	; 0x64
   196ee:	18d3      	adds	r3, r2, r3
   196f0:	185b      	adds	r3, r3, r1
   196f2:	781b      	ldrb	r3, [r3, #0]
   196f4:	1dba      	adds	r2, r7, #6
   196f6:	7812      	ldrb	r2, [r2, #0]
   196f8:	429a      	cmp	r2, r3
   196fa:	d904      	bls.n	19706 <prvTraceSetObjectState+0x52>
   196fc:	4b14      	ldr	r3, [pc, #80]	; (19750 <prvTraceSetObjectState+0x9c>)
   196fe:	0018      	movs	r0, r3
   19700:	4b11      	ldr	r3, [pc, #68]	; (19748 <prvTraceSetObjectState+0x94>)
   19702:	4798      	blx	r3
   19704:	e01a      	b.n	1973c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   19706:	4b11      	ldr	r3, [pc, #68]	; (1974c <prvTraceSetObjectState+0x98>)
   19708:	681c      	ldr	r4, [r3, #0]
   1970a:	1dfb      	adds	r3, r7, #7
   1970c:	781a      	ldrb	r2, [r3, #0]
   1970e:	1dbb      	adds	r3, r7, #6
   19710:	781b      	ldrb	r3, [r3, #0]
   19712:	0011      	movs	r1, r2
   19714:	0018      	movs	r0, r3
   19716:	4b0f      	ldr	r3, [pc, #60]	; (19754 <prvTraceSetObjectState+0xa0>)
   19718:	4798      	blx	r3
   1971a:	0003      	movs	r3, r0
   1971c:	0018      	movs	r0, r3
   1971e:	4b0b      	ldr	r3, [pc, #44]	; (1974c <prvTraceSetObjectState+0x98>)
   19720:	681a      	ldr	r2, [r3, #0]
   19722:	1dfb      	adds	r3, r7, #7
   19724:	781b      	ldrb	r3, [r3, #0]
   19726:	2170      	movs	r1, #112	; 0x70
   19728:	18d3      	adds	r3, r2, r3
   1972a:	185b      	adds	r3, r3, r1
   1972c:	781b      	ldrb	r3, [r3, #0]
   1972e:	18c3      	adds	r3, r0, r3
   19730:	229c      	movs	r2, #156	; 0x9c
   19732:	18e3      	adds	r3, r4, r3
   19734:	189b      	adds	r3, r3, r2
   19736:	1d7a      	adds	r2, r7, #5
   19738:	7812      	ldrb	r2, [r2, #0]
   1973a:	701a      	strb	r2, [r3, #0]
}
   1973c:	46bd      	mov	sp, r7
   1973e:	b003      	add	sp, #12
   19740:	bd90      	pop	{r4, r7, pc}
   19742:	46c0      	nop			; (mov r8, r8)
   19744:	0003842c 	.word	0x0003842c
   19748:	00019efd 	.word	0x00019efd
   1974c:	20000df4 	.word	0x20000df4
   19750:	00038470 	.word	0x00038470
   19754:	00019b09 	.word	0x00019b09

00019758 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   19758:	b590      	push	{r4, r7, lr}
   1975a:	b083      	sub	sp, #12
   1975c:	af00      	add	r7, sp, #0
   1975e:	0002      	movs	r2, r0
   19760:	1dfb      	adds	r3, r7, #7
   19762:	701a      	strb	r2, [r3, #0]
   19764:	1dbb      	adds	r3, r7, #6
   19766:	1c0a      	adds	r2, r1, #0
   19768:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1976a:	1dfb      	adds	r3, r7, #7
   1976c:	781b      	ldrb	r3, [r3, #0]
   1976e:	2b08      	cmp	r3, #8
   19770:	d905      	bls.n	1977e <prvTraceGetObjectState+0x26>
   19772:	4b1a      	ldr	r3, [pc, #104]	; (197dc <prvTraceGetObjectState+0x84>)
   19774:	0018      	movs	r0, r3
   19776:	4b1a      	ldr	r3, [pc, #104]	; (197e0 <prvTraceGetObjectState+0x88>)
   19778:	4798      	blx	r3
   1977a:	2300      	movs	r3, #0
   1977c:	e02a      	b.n	197d4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1977e:	4b19      	ldr	r3, [pc, #100]	; (197e4 <prvTraceGetObjectState+0x8c>)
   19780:	681a      	ldr	r2, [r3, #0]
   19782:	1dfb      	adds	r3, r7, #7
   19784:	781b      	ldrb	r3, [r3, #0]
   19786:	2164      	movs	r1, #100	; 0x64
   19788:	18d3      	adds	r3, r2, r3
   1978a:	185b      	adds	r3, r3, r1
   1978c:	781b      	ldrb	r3, [r3, #0]
   1978e:	1dba      	adds	r2, r7, #6
   19790:	7812      	ldrb	r2, [r2, #0]
   19792:	429a      	cmp	r2, r3
   19794:	d905      	bls.n	197a2 <prvTraceGetObjectState+0x4a>
   19796:	4b14      	ldr	r3, [pc, #80]	; (197e8 <prvTraceGetObjectState+0x90>)
   19798:	0018      	movs	r0, r3
   1979a:	4b11      	ldr	r3, [pc, #68]	; (197e0 <prvTraceGetObjectState+0x88>)
   1979c:	4798      	blx	r3
   1979e:	2300      	movs	r3, #0
   197a0:	e018      	b.n	197d4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   197a2:	4b10      	ldr	r3, [pc, #64]	; (197e4 <prvTraceGetObjectState+0x8c>)
   197a4:	681c      	ldr	r4, [r3, #0]
   197a6:	1dfb      	adds	r3, r7, #7
   197a8:	781a      	ldrb	r2, [r3, #0]
   197aa:	1dbb      	adds	r3, r7, #6
   197ac:	781b      	ldrb	r3, [r3, #0]
   197ae:	0011      	movs	r1, r2
   197b0:	0018      	movs	r0, r3
   197b2:	4b0e      	ldr	r3, [pc, #56]	; (197ec <prvTraceGetObjectState+0x94>)
   197b4:	4798      	blx	r3
   197b6:	0003      	movs	r3, r0
   197b8:	0018      	movs	r0, r3
   197ba:	4b0a      	ldr	r3, [pc, #40]	; (197e4 <prvTraceGetObjectState+0x8c>)
   197bc:	681a      	ldr	r2, [r3, #0]
   197be:	1dfb      	adds	r3, r7, #7
   197c0:	781b      	ldrb	r3, [r3, #0]
   197c2:	2170      	movs	r1, #112	; 0x70
   197c4:	18d3      	adds	r3, r2, r3
   197c6:	185b      	adds	r3, r3, r1
   197c8:	781b      	ldrb	r3, [r3, #0]
   197ca:	18c3      	adds	r3, r0, r3
   197cc:	229c      	movs	r2, #156	; 0x9c
   197ce:	18e3      	adds	r3, r4, r3
   197d0:	189b      	adds	r3, r3, r2
   197d2:	781b      	ldrb	r3, [r3, #0]
}
   197d4:	0018      	movs	r0, r3
   197d6:	46bd      	mov	sp, r7
   197d8:	b003      	add	sp, #12
   197da:	bd90      	pop	{r4, r7, pc}
   197dc:	000384ac 	.word	0x000384ac
   197e0:	00019efd 	.word	0x00019efd
   197e4:	20000df4 	.word	0x20000df4
   197e8:	000384f0 	.word	0x000384f0
   197ec:	00019b09 	.word	0x00019b09

000197f0 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   197f0:	b590      	push	{r4, r7, lr}
   197f2:	b083      	sub	sp, #12
   197f4:	af00      	add	r7, sp, #0
   197f6:	0002      	movs	r2, r0
   197f8:	1dfb      	adds	r3, r7, #7
   197fa:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   197fc:	4b11      	ldr	r3, [pc, #68]	; (19844 <prvTraceSetTaskInstanceFinished+0x54>)
   197fe:	681b      	ldr	r3, [r3, #0]
   19800:	2267      	movs	r2, #103	; 0x67
   19802:	5c9b      	ldrb	r3, [r3, r2]
   19804:	1dfa      	adds	r2, r7, #7
   19806:	7812      	ldrb	r2, [r2, #0]
   19808:	429a      	cmp	r2, r3
   1980a:	d904      	bls.n	19816 <prvTraceSetTaskInstanceFinished+0x26>
   1980c:	4b0e      	ldr	r3, [pc, #56]	; (19848 <prvTraceSetTaskInstanceFinished+0x58>)
   1980e:	0018      	movs	r0, r3
   19810:	4b0e      	ldr	r3, [pc, #56]	; (1984c <prvTraceSetTaskInstanceFinished+0x5c>)
   19812:	4798      	blx	r3
   19814:	e013      	b.n	1983e <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   19816:	4b0b      	ldr	r3, [pc, #44]	; (19844 <prvTraceSetTaskInstanceFinished+0x54>)
   19818:	681c      	ldr	r4, [r3, #0]
   1981a:	1dfb      	adds	r3, r7, #7
   1981c:	781b      	ldrb	r3, [r3, #0]
   1981e:	2103      	movs	r1, #3
   19820:	0018      	movs	r0, r3
   19822:	4b0b      	ldr	r3, [pc, #44]	; (19850 <prvTraceSetTaskInstanceFinished+0x60>)
   19824:	4798      	blx	r3
   19826:	0003      	movs	r3, r0
   19828:	0019      	movs	r1, r3
   1982a:	4b06      	ldr	r3, [pc, #24]	; (19844 <prvTraceSetTaskInstanceFinished+0x54>)
   1982c:	681b      	ldr	r3, [r3, #0]
   1982e:	2273      	movs	r2, #115	; 0x73
   19830:	5c9b      	ldrb	r3, [r3, r2]
   19832:	18cb      	adds	r3, r1, r3
   19834:	229c      	movs	r2, #156	; 0x9c
   19836:	18e3      	adds	r3, r4, r3
   19838:	189b      	adds	r3, r3, r2
   1983a:	2200      	movs	r2, #0
   1983c:	701a      	strb	r2, [r3, #0]
#endif
}
   1983e:	46bd      	mov	sp, r7
   19840:	b003      	add	sp, #12
   19842:	bd90      	pop	{r4, r7, pc}
   19844:	20000df4 	.word	0x20000df4
   19848:	0003852c 	.word	0x0003852c
   1984c:	00019efd 	.word	0x00019efd
   19850:	00019b09 	.word	0x00019b09

00019854 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   19854:	b580      	push	{r7, lr}
   19856:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   19858:	4b75      	ldr	r3, [pc, #468]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   1985a:	681b      	ldr	r3, [r3, #0]
   1985c:	2b00      	cmp	r3, #0
   1985e:	d103      	bne.n	19868 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   19860:	4b73      	ldr	r3, [pc, #460]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19862:	4a74      	ldr	r2, [pc, #464]	; (19a34 <prvTraceInitTraceData+0x1e0>)
   19864:	601a      	str	r2, [r3, #0]
   19866:	e006      	b.n	19876 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   19868:	4b71      	ldr	r3, [pc, #452]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   1986a:	681b      	ldr	r3, [r3, #0]
   1986c:	781b      	ldrb	r3, [r3, #0]
   1986e:	b2db      	uxtb	r3, r3
   19870:	2b01      	cmp	r3, #1
   19872:	d100      	bne.n	19876 <prvTraceInitTraceData+0x22>
   19874:	e0d8      	b.n	19a28 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   19876:	4b70      	ldr	r3, [pc, #448]	; (19a38 <prvTraceInitTraceData+0x1e4>)
   19878:	681a      	ldr	r2, [r3, #0]
   1987a:	4b70      	ldr	r3, [pc, #448]	; (19a3c <prvTraceInitTraceData+0x1e8>)
   1987c:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1987e:	4b6c      	ldr	r3, [pc, #432]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19880:	6818      	ldr	r0, [r3, #0]
   19882:	23bd      	movs	r3, #189	; 0xbd
   19884:	011b      	lsls	r3, r3, #4
   19886:	001a      	movs	r2, r3
   19888:	2100      	movs	r1, #0
   1988a:	4b6d      	ldr	r3, [pc, #436]	; (19a40 <prvTraceInitTraceData+0x1ec>)
   1988c:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1988e:	4b68      	ldr	r3, [pc, #416]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19890:	681b      	ldr	r3, [r3, #0]
   19892:	4a6c      	ldr	r2, [pc, #432]	; (19a44 <prvTraceInitTraceData+0x1f0>)
   19894:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   19896:	4b66      	ldr	r3, [pc, #408]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19898:	681b      	ldr	r3, [r3, #0]
   1989a:	2205      	movs	r2, #5
   1989c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1989e:	4b64      	ldr	r3, [pc, #400]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   198a0:	681b      	ldr	r3, [r3, #0]
   198a2:	2200      	movs	r2, #0
   198a4:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   198a6:	4b62      	ldr	r3, [pc, #392]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   198a8:	681b      	ldr	r3, [r3, #0]
   198aa:	22bd      	movs	r2, #189	; 0xbd
   198ac:	0112      	lsls	r2, r2, #4
   198ae:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   198b0:	4b5f      	ldr	r3, [pc, #380]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   198b2:	681b      	ldr	r3, [r3, #0]
   198b4:	2296      	movs	r2, #150	; 0x96
   198b6:	0052      	lsls	r2, r2, #1
   198b8:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   198ba:	4b5d      	ldr	r3, [pc, #372]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   198bc:	681b      	ldr	r3, [r3, #0]
   198be:	4a62      	ldr	r2, [pc, #392]	; (19a48 <prvTraceInitTraceData+0x1f4>)
   198c0:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   198c2:	4b5b      	ldr	r3, [pc, #364]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   198c4:	681b      	ldr	r3, [r3, #0]
   198c6:	2200      	movs	r2, #0
   198c8:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   198ca:	4b59      	ldr	r3, [pc, #356]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   198cc:	681b      	ldr	r3, [r3, #0]
   198ce:	2200      	movs	r2, #0
   198d0:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   198d2:	4b5e      	ldr	r3, [pc, #376]	; (19a4c <prvTraceInitTraceData+0x1f8>)
   198d4:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   198d6:	4b56      	ldr	r3, [pc, #344]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   198d8:	681b      	ldr	r3, [r3, #0]
   198da:	4a5d      	ldr	r2, [pc, #372]	; (19a50 <prvTraceInitTraceData+0x1fc>)
   198dc:	495d      	ldr	r1, [pc, #372]	; (19a54 <prvTraceInitTraceData+0x200>)
   198de:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   198e0:	4b53      	ldr	r3, [pc, #332]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   198e2:	681a      	ldr	r2, [r3, #0]
   198e4:	23ac      	movs	r3, #172	; 0xac
   198e6:	00db      	lsls	r3, r3, #3
   198e8:	21c8      	movs	r1, #200	; 0xc8
   198ea:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   198ec:	4b50      	ldr	r3, [pc, #320]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   198ee:	681b      	ldr	r3, [r3, #0]
   198f0:	4a59      	ldr	r2, [pc, #356]	; (19a58 <prvTraceInitTraceData+0x204>)
   198f2:	2101      	movs	r1, #1
   198f4:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   198f6:	4b4e      	ldr	r3, [pc, #312]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   198f8:	681a      	ldr	r2, [r3, #0]
   198fa:	23d7      	movs	r3, #215	; 0xd7
   198fc:	00db      	lsls	r3, r3, #3
   198fe:	4957      	ldr	r1, [pc, #348]	; (19a5c <prvTraceInitTraceData+0x208>)
   19900:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   19902:	4b4b      	ldr	r3, [pc, #300]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19904:	681b      	ldr	r3, [r3, #0]
   19906:	4a56      	ldr	r2, [pc, #344]	; (19a60 <prvTraceInitTraceData+0x20c>)
   19908:	4694      	mov	ip, r2
   1990a:	4463      	add	r3, ip
   1990c:	4955      	ldr	r1, [pc, #340]	; (19a64 <prvTraceInitTraceData+0x210>)
   1990e:	2250      	movs	r2, #80	; 0x50
   19910:	0018      	movs	r0, r3
   19912:	4b55      	ldr	r3, [pc, #340]	; (19a68 <prvTraceInitTraceData+0x214>)
   19914:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   19916:	4b46      	ldr	r3, [pc, #280]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19918:	681b      	ldr	r3, [r3, #0]
   1991a:	4a54      	ldr	r2, [pc, #336]	; (19a6c <prvTraceInitTraceData+0x218>)
   1991c:	4954      	ldr	r1, [pc, #336]	; (19a70 <prvTraceInitTraceData+0x21c>)
   1991e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   19920:	4b43      	ldr	r3, [pc, #268]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19922:	681b      	ldr	r3, [r3, #0]
   19924:	4a53      	ldr	r2, [pc, #332]	; (19a74 <prvTraceInitTraceData+0x220>)
   19926:	210a      	movs	r1, #10
   19928:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   1992a:	4b41      	ldr	r3, [pc, #260]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   1992c:	681b      	ldr	r3, [r3, #0]
   1992e:	4a52      	ldr	r2, [pc, #328]	; (19a78 <prvTraceInitTraceData+0x224>)
   19930:	210b      	movs	r1, #11
   19932:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   19934:	4b3e      	ldr	r3, [pc, #248]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19936:	681b      	ldr	r3, [r3, #0]
   19938:	4a50      	ldr	r2, [pc, #320]	; (19a7c <prvTraceInitTraceData+0x228>)
   1993a:	210c      	movs	r1, #12
   1993c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1993e:	4b3c      	ldr	r3, [pc, #240]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19940:	681b      	ldr	r3, [r3, #0]
   19942:	4a4f      	ldr	r2, [pc, #316]	; (19a80 <prvTraceInitTraceData+0x22c>)
   19944:	210d      	movs	r1, #13
   19946:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   19948:	4b39      	ldr	r3, [pc, #228]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   1994a:	681b      	ldr	r3, [r3, #0]
   1994c:	4a4d      	ldr	r2, [pc, #308]	; (19a84 <prvTraceInitTraceData+0x230>)
   1994e:	2171      	movs	r1, #113	; 0x71
   19950:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   19952:	4b37      	ldr	r3, [pc, #220]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19954:	681b      	ldr	r3, [r3, #0]
   19956:	4a4c      	ldr	r2, [pc, #304]	; (19a88 <prvTraceInitTraceData+0x234>)
   19958:	2172      	movs	r1, #114	; 0x72
   1995a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   1995c:	4b34      	ldr	r3, [pc, #208]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   1995e:	681b      	ldr	r3, [r3, #0]
   19960:	4a4a      	ldr	r2, [pc, #296]	; (19a8c <prvTraceInitTraceData+0x238>)
   19962:	2173      	movs	r1, #115	; 0x73
   19964:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   19966:	4b32      	ldr	r3, [pc, #200]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19968:	681b      	ldr	r3, [r3, #0]
   1996a:	4a49      	ldr	r2, [pc, #292]	; (19a90 <prvTraceInitTraceData+0x23c>)
   1996c:	2174      	movs	r1, #116	; 0x74
   1996e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   19970:	4b2f      	ldr	r3, [pc, #188]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19972:	681b      	ldr	r3, [r3, #0]
   19974:	4a47      	ldr	r2, [pc, #284]	; (19a94 <prvTraceInitTraceData+0x240>)
   19976:	21f1      	movs	r1, #241	; 0xf1
   19978:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1997a:	4b2d      	ldr	r3, [pc, #180]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   1997c:	681b      	ldr	r3, [r3, #0]
   1997e:	4a46      	ldr	r2, [pc, #280]	; (19a98 <prvTraceInitTraceData+0x244>)
   19980:	21f2      	movs	r1, #242	; 0xf2
   19982:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   19984:	4b2a      	ldr	r3, [pc, #168]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19986:	681b      	ldr	r3, [r3, #0]
   19988:	4a44      	ldr	r2, [pc, #272]	; (19a9c <prvTraceInitTraceData+0x248>)
   1998a:	21f3      	movs	r1, #243	; 0xf3
   1998c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1998e:	4b28      	ldr	r3, [pc, #160]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19990:	681b      	ldr	r3, [r3, #0]
   19992:	4a43      	ldr	r2, [pc, #268]	; (19aa0 <prvTraceInitTraceData+0x24c>)
   19994:	21f4      	movs	r1, #244	; 0xf4
   19996:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   19998:	4b42      	ldr	r3, [pc, #264]	; (19aa4 <prvTraceInitTraceData+0x250>)
   1999a:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1999c:	4b24      	ldr	r3, [pc, #144]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   1999e:	681b      	ldr	r3, [r3, #0]
   199a0:	22f4      	movs	r2, #244	; 0xf4
   199a2:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   199a4:	4b22      	ldr	r3, [pc, #136]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   199a6:	681b      	ldr	r3, [r3, #0]
   199a8:	22f3      	movs	r2, #243	; 0xf3
   199aa:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   199ac:	4b20      	ldr	r3, [pc, #128]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   199ae:	681b      	ldr	r3, [r3, #0]
   199b0:	22f2      	movs	r2, #242	; 0xf2
   199b2:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   199b4:	4b1e      	ldr	r3, [pc, #120]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   199b6:	681b      	ldr	r3, [r3, #0]
   199b8:	22f1      	movs	r2, #241	; 0xf1
   199ba:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   199bc:	4b1c      	ldr	r3, [pc, #112]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   199be:	681b      	ldr	r3, [r3, #0]
   199c0:	2274      	movs	r2, #116	; 0x74
   199c2:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   199c4:	4b1a      	ldr	r3, [pc, #104]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   199c6:	681b      	ldr	r3, [r3, #0]
   199c8:	2273      	movs	r2, #115	; 0x73
   199ca:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   199cc:	4b18      	ldr	r3, [pc, #96]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   199ce:	681b      	ldr	r3, [r3, #0]
   199d0:	2272      	movs	r2, #114	; 0x72
   199d2:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   199d4:	4b16      	ldr	r3, [pc, #88]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   199d6:	681b      	ldr	r3, [r3, #0]
   199d8:	2271      	movs	r2, #113	; 0x71
   199da:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   199dc:	4b14      	ldr	r3, [pc, #80]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   199de:	681b      	ldr	r3, [r3, #0]
   199e0:	2204      	movs	r2, #4
   199e2:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   199e4:	4b12      	ldr	r3, [pc, #72]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   199e6:	681b      	ldr	r3, [r3, #0]
   199e8:	2203      	movs	r2, #3
   199ea:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   199ec:	4b10      	ldr	r3, [pc, #64]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   199ee:	681b      	ldr	r3, [r3, #0]
   199f0:	2202      	movs	r2, #2
   199f2:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   199f4:	4b0e      	ldr	r3, [pc, #56]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   199f6:	681b      	ldr	r3, [r3, #0]
   199f8:	2201      	movs	r2, #1
   199fa:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   199fc:	4b2a      	ldr	r3, [pc, #168]	; (19aa8 <prvTraceInitTraceData+0x254>)
   199fe:	681b      	ldr	r3, [r3, #0]
   19a00:	2b00      	cmp	r3, #0
   19a02:	d012      	beq.n	19a2a <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   19a04:	4b0a      	ldr	r3, [pc, #40]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19a06:	681b      	ldr	r3, [r3, #0]
   19a08:	4a15      	ldr	r2, [pc, #84]	; (19a60 <prvTraceInitTraceData+0x20c>)
   19a0a:	1898      	adds	r0, r3, r2
   19a0c:	4b26      	ldr	r3, [pc, #152]	; (19aa8 <prvTraceInitTraceData+0x254>)
   19a0e:	681b      	ldr	r3, [r3, #0]
   19a10:	2250      	movs	r2, #80	; 0x50
   19a12:	0019      	movs	r1, r3
   19a14:	4b14      	ldr	r3, [pc, #80]	; (19a68 <prvTraceInitTraceData+0x214>)
   19a16:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   19a18:	4b05      	ldr	r3, [pc, #20]	; (19a30 <prvTraceInitTraceData+0x1dc>)
   19a1a:	681b      	ldr	r3, [r3, #0]
   19a1c:	4a23      	ldr	r2, [pc, #140]	; (19aac <prvTraceInitTraceData+0x258>)
   19a1e:	2101      	movs	r1, #1
   19a20:	5099      	str	r1, [r3, r2]
		vTraceStop();
   19a22:	4b23      	ldr	r3, [pc, #140]	; (19ab0 <prvTraceInitTraceData+0x25c>)
   19a24:	4798      	blx	r3
   19a26:	e000      	b.n	19a2a <prvTraceInitTraceData+0x1d6>
			return;
   19a28:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   19a2a:	46bd      	mov	sp, r7
   19a2c:	bd80      	pop	{r7, pc}
   19a2e:	46c0      	nop			; (mov r8, r8)
   19a30:	20000df4 	.word	0x20000df4
   19a34:	200049fc 	.word	0x200049fc
   19a38:	e000e018 	.word	0xe000e018
   19a3c:	200055cc 	.word	0x200055cc
   19a40:	00034f63 	.word	0x00034f63
   19a44:	00001aa1 	.word	0x00001aa1
   19a48:	f0f0f0f0 	.word	0xf0f0f0f0
   19a4c:	000189b9 	.word	0x000189b9
   19a50:	0000055c 	.word	0x0000055c
   19a54:	f1f1f1f1 	.word	0xf1f1f1f1
   19a58:	00000564 	.word	0x00000564
   19a5c:	f2f2f2f2 	.word	0xf2f2f2f2
   19a60:	000006bc 	.word	0x000006bc
   19a64:	00038574 	.word	0x00038574
   19a68:	00019dc9 	.word	0x00019dc9
   19a6c:	0000070c 	.word	0x0000070c
   19a70:	f3f3f3f3 	.word	0xf3f3f3f3
   19a74:	00000bc4 	.word	0x00000bc4
   19a78:	00000bc5 	.word	0x00000bc5
   19a7c:	00000bc6 	.word	0x00000bc6
   19a80:	00000bc7 	.word	0x00000bc7
   19a84:	00000bc8 	.word	0x00000bc8
   19a88:	00000bc9 	.word	0x00000bc9
   19a8c:	00000bca 	.word	0x00000bca
   19a90:	00000bcb 	.word	0x00000bcb
   19a94:	00000bcc 	.word	0x00000bcc
   19a98:	00000bcd 	.word	0x00000bcd
   19a9c:	00000bce 	.word	0x00000bce
   19aa0:	00000bcf 	.word	0x00000bcf
   19aa4:	00018b59 	.word	0x00018b59
   19aa8:	20000d54 	.word	0x20000d54
   19aac:	000006b4 	.word	0x000006b4
   19ab0:	00018dc1 	.word	0x00018dc1

00019ab4 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   19ab4:	b580      	push	{r7, lr}
   19ab6:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   19ab8:	4b10      	ldr	r3, [pc, #64]	; (19afc <prvTraceNextFreeEventBufferSlot+0x48>)
   19aba:	681b      	ldr	r3, [r3, #0]
   19abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19abe:	2b00      	cmp	r3, #0
   19ac0:	d101      	bne.n	19ac6 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   19ac2:	2300      	movs	r3, #0
   19ac4:	e017      	b.n	19af6 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   19ac6:	4b0d      	ldr	r3, [pc, #52]	; (19afc <prvTraceNextFreeEventBufferSlot+0x48>)
   19ac8:	681b      	ldr	r3, [r3, #0]
   19aca:	69da      	ldr	r2, [r3, #28]
   19acc:	232c      	movs	r3, #44	; 0x2c
   19ace:	33ff      	adds	r3, #255	; 0xff
   19ad0:	429a      	cmp	r2, r3
   19ad2:	d905      	bls.n	19ae0 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   19ad4:	4b0a      	ldr	r3, [pc, #40]	; (19b00 <prvTraceNextFreeEventBufferSlot+0x4c>)
   19ad6:	0018      	movs	r0, r3
   19ad8:	4b0a      	ldr	r3, [pc, #40]	; (19b04 <prvTraceNextFreeEventBufferSlot+0x50>)
   19ada:	4798      	blx	r3
		return NULL;
   19adc:	2300      	movs	r3, #0
   19ade:	e00a      	b.n	19af6 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   19ae0:	4b06      	ldr	r3, [pc, #24]	; (19afc <prvTraceNextFreeEventBufferSlot+0x48>)
   19ae2:	681a      	ldr	r2, [r3, #0]
   19ae4:	4b05      	ldr	r3, [pc, #20]	; (19afc <prvTraceNextFreeEventBufferSlot+0x48>)
   19ae6:	681b      	ldr	r3, [r3, #0]
   19ae8:	69db      	ldr	r3, [r3, #28]
   19aea:	009b      	lsls	r3, r3, #2
   19aec:	21e2      	movs	r1, #226	; 0xe2
   19aee:	00c9      	lsls	r1, r1, #3
   19af0:	468c      	mov	ip, r1
   19af2:	4463      	add	r3, ip
   19af4:	18d3      	adds	r3, r2, r3
}
   19af6:	0018      	movs	r0, r3
   19af8:	46bd      	mov	sp, r7
   19afa:	bd80      	pop	{r7, pc}
   19afc:	20000df4 	.word	0x20000df4
   19b00:	00038588 	.word	0x00038588
   19b04:	00019efd 	.word	0x00019efd

00019b08 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   19b08:	b580      	push	{r7, lr}
   19b0a:	b082      	sub	sp, #8
   19b0c:	af00      	add	r7, sp, #0
   19b0e:	0002      	movs	r2, r0
   19b10:	1dfb      	adds	r3, r7, #7
   19b12:	701a      	strb	r2, [r3, #0]
   19b14:	1dbb      	adds	r3, r7, #6
   19b16:	1c0a      	adds	r2, r1, #0
   19b18:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   19b1a:	1dbb      	adds	r3, r7, #6
   19b1c:	781b      	ldrb	r3, [r3, #0]
   19b1e:	2b08      	cmp	r3, #8
   19b20:	d905      	bls.n	19b2e <uiIndexOfObject+0x26>
   19b22:	4b2a      	ldr	r3, [pc, #168]	; (19bcc <uiIndexOfObject+0xc4>)
   19b24:	0018      	movs	r0, r3
   19b26:	4b2a      	ldr	r3, [pc, #168]	; (19bd0 <uiIndexOfObject+0xc8>)
   19b28:	4798      	blx	r3
   19b2a:	2300      	movs	r3, #0
   19b2c:	e049      	b.n	19bc2 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   19b2e:	1dfb      	adds	r3, r7, #7
   19b30:	781b      	ldrb	r3, [r3, #0]
   19b32:	2b00      	cmp	r3, #0
   19b34:	d00b      	beq.n	19b4e <uiIndexOfObject+0x46>
   19b36:	4b27      	ldr	r3, [pc, #156]	; (19bd4 <uiIndexOfObject+0xcc>)
   19b38:	681a      	ldr	r2, [r3, #0]
   19b3a:	1dbb      	adds	r3, r7, #6
   19b3c:	781b      	ldrb	r3, [r3, #0]
   19b3e:	2164      	movs	r1, #100	; 0x64
   19b40:	18d3      	adds	r3, r2, r3
   19b42:	185b      	adds	r3, r3, r1
   19b44:	781b      	ldrb	r3, [r3, #0]
   19b46:	1dfa      	adds	r2, r7, #7
   19b48:	7812      	ldrb	r2, [r2, #0]
   19b4a:	429a      	cmp	r2, r3
   19b4c:	d905      	bls.n	19b5a <uiIndexOfObject+0x52>
   19b4e:	4b22      	ldr	r3, [pc, #136]	; (19bd8 <uiIndexOfObject+0xd0>)
   19b50:	0018      	movs	r0, r3
   19b52:	4b1f      	ldr	r3, [pc, #124]	; (19bd0 <uiIndexOfObject+0xc8>)
   19b54:	4798      	blx	r3
   19b56:	2300      	movs	r3, #0
   19b58:	e033      	b.n	19bc2 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   19b5a:	1dbb      	adds	r3, r7, #6
   19b5c:	781b      	ldrb	r3, [r3, #0]
   19b5e:	2b08      	cmp	r3, #8
   19b60:	d82a      	bhi.n	19bb8 <uiIndexOfObject+0xb0>
   19b62:	1dfb      	adds	r3, r7, #7
   19b64:	781b      	ldrb	r3, [r3, #0]
   19b66:	2b00      	cmp	r3, #0
   19b68:	d026      	beq.n	19bb8 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   19b6a:	4b1a      	ldr	r3, [pc, #104]	; (19bd4 <uiIndexOfObject+0xcc>)
   19b6c:	681a      	ldr	r2, [r3, #0]
   19b6e:	1dbb      	adds	r3, r7, #6
   19b70:	781b      	ldrb	r3, [r3, #0]
   19b72:	2164      	movs	r1, #100	; 0x64
   19b74:	18d3      	adds	r3, r2, r3
   19b76:	185b      	adds	r3, r3, r1
   19b78:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   19b7a:	1dfa      	adds	r2, r7, #7
   19b7c:	7812      	ldrb	r2, [r2, #0]
   19b7e:	429a      	cmp	r2, r3
   19b80:	d81a      	bhi.n	19bb8 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19b82:	4b14      	ldr	r3, [pc, #80]	; (19bd4 <uiIndexOfObject+0xcc>)
   19b84:	681a      	ldr	r2, [r3, #0]
   19b86:	1dbb      	adds	r3, r7, #6
   19b88:	781b      	ldrb	r3, [r3, #0]
   19b8a:	3340      	adds	r3, #64	; 0x40
   19b8c:	005b      	lsls	r3, r3, #1
   19b8e:	18d3      	adds	r3, r2, r3
   19b90:	3308      	adds	r3, #8
   19b92:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19b94:	4b0f      	ldr	r3, [pc, #60]	; (19bd4 <uiIndexOfObject+0xcc>)
   19b96:	6819      	ldr	r1, [r3, #0]
   19b98:	1dbb      	adds	r3, r7, #6
   19b9a:	781b      	ldrb	r3, [r3, #0]
   19b9c:	207c      	movs	r0, #124	; 0x7c
   19b9e:	18cb      	adds	r3, r1, r3
   19ba0:	181b      	adds	r3, r3, r0
   19ba2:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19ba4:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19ba6:	1df9      	adds	r1, r7, #7
   19ba8:	7809      	ldrb	r1, [r1, #0]
   19baa:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19bac:	b289      	uxth	r1, r1
   19bae:	434b      	muls	r3, r1
   19bb0:	b29b      	uxth	r3, r3
   19bb2:	18d3      	adds	r3, r2, r3
   19bb4:	b29b      	uxth	r3, r3
   19bb6:	e004      	b.n	19bc2 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   19bb8:	4b08      	ldr	r3, [pc, #32]	; (19bdc <uiIndexOfObject+0xd4>)
   19bba:	0018      	movs	r0, r3
   19bbc:	4b04      	ldr	r3, [pc, #16]	; (19bd0 <uiIndexOfObject+0xc8>)
   19bbe:	4798      	blx	r3
	return 0;
   19bc0:	2300      	movs	r3, #0
}
   19bc2:	0018      	movs	r0, r3
   19bc4:	46bd      	mov	sp, r7
   19bc6:	b002      	add	sp, #8
   19bc8:	bd80      	pop	{r7, pc}
   19bca:	46c0      	nop			; (mov r8, r8)
   19bcc:	000385b0 	.word	0x000385b0
   19bd0:	00019efd 	.word	0x00019efd
   19bd4:	20000df4 	.word	0x20000df4
   19bd8:	000385f0 	.word	0x000385f0
   19bdc:	00038630 	.word	0x00038630

00019be0 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   19be0:	b580      	push	{r7, lr}
   19be2:	b088      	sub	sp, #32
   19be4:	af00      	add	r7, sp, #0
   19be6:	0002      	movs	r2, r0
   19be8:	1dfb      	adds	r3, r7, #7
   19bea:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   19bec:	4b5a      	ldr	r3, [pc, #360]	; (19d58 <prvTraceGetObjectHandle+0x178>)
   19bee:	681b      	ldr	r3, [r3, #0]
   19bf0:	2b00      	cmp	r3, #0
   19bf2:	d105      	bne.n	19c00 <prvTraceGetObjectHandle+0x20>
   19bf4:	4b59      	ldr	r3, [pc, #356]	; (19d5c <prvTraceGetObjectHandle+0x17c>)
   19bf6:	0018      	movs	r0, r3
   19bf8:	4b59      	ldr	r3, [pc, #356]	; (19d60 <prvTraceGetObjectHandle+0x180>)
   19bfa:	4798      	blx	r3
   19bfc:	2300      	movs	r3, #0
   19bfe:	e0a7      	b.n	19d50 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   19c00:	1dfb      	adds	r3, r7, #7
   19c02:	781b      	ldrb	r3, [r3, #0]
   19c04:	2b08      	cmp	r3, #8
   19c06:	d905      	bls.n	19c14 <prvTraceGetObjectHandle+0x34>
   19c08:	4b56      	ldr	r3, [pc, #344]	; (19d64 <prvTraceGetObjectHandle+0x184>)
   19c0a:	0018      	movs	r0, r3
   19c0c:	4b54      	ldr	r3, [pc, #336]	; (19d60 <prvTraceGetObjectHandle+0x180>)
   19c0e:	4798      	blx	r3
   19c10:	2300      	movs	r3, #0
   19c12:	e09d      	b.n	19d50 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19c14:	f3ef 8310 	mrs	r3, PRIMASK
   19c18:	60fb      	str	r3, [r7, #12]
  return(result);
   19c1a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   19c1c:	61bb      	str	r3, [r7, #24]
   19c1e:	2301      	movs	r3, #1
   19c20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19c22:	693b      	ldr	r3, [r7, #16]
   19c24:	f383 8810 	msr	PRIMASK, r3
   19c28:	4b4f      	ldr	r3, [pc, #316]	; (19d68 <prvTraceGetObjectHandle+0x188>)
   19c2a:	681b      	ldr	r3, [r3, #0]
   19c2c:	1c5a      	adds	r2, r3, #1
   19c2e:	4b4e      	ldr	r3, [pc, #312]	; (19d68 <prvTraceGetObjectHandle+0x188>)
   19c30:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   19c32:	1dfb      	adds	r3, r7, #7
   19c34:	781a      	ldrb	r2, [r3, #0]
   19c36:	4b4d      	ldr	r3, [pc, #308]	; (19d6c <prvTraceGetObjectHandle+0x18c>)
   19c38:	0052      	lsls	r2, r2, #1
   19c3a:	5ad3      	ldrh	r3, [r2, r3]
   19c3c:	001a      	movs	r2, r3
   19c3e:	4b4c      	ldr	r3, [pc, #304]	; (19d70 <prvTraceGetObjectHandle+0x190>)
   19c40:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   19c42:	4b4b      	ldr	r3, [pc, #300]	; (19d70 <prvTraceGetObjectHandle+0x190>)
   19c44:	681b      	ldr	r3, [r3, #0]
   19c46:	4a49      	ldr	r2, [pc, #292]	; (19d6c <prvTraceGetObjectHandle+0x18c>)
   19c48:	2148      	movs	r1, #72	; 0x48
   19c4a:	18d3      	adds	r3, r2, r3
   19c4c:	185b      	adds	r3, r3, r1
   19c4e:	781b      	ldrb	r3, [r3, #0]
   19c50:	2b00      	cmp	r3, #0
   19c52:	d117      	bne.n	19c84 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   19c54:	4b46      	ldr	r3, [pc, #280]	; (19d70 <prvTraceGetObjectHandle+0x190>)
   19c56:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   19c58:	4b45      	ldr	r3, [pc, #276]	; (19d70 <prvTraceGetObjectHandle+0x190>)
   19c5a:	681b      	ldr	r3, [r3, #0]
   19c5c:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   19c5e:	1dfb      	adds	r3, r7, #7
   19c60:	781b      	ldrb	r3, [r3, #0]
   19c62:	4842      	ldr	r0, [pc, #264]	; (19d6c <prvTraceGetObjectHandle+0x18c>)
   19c64:	3308      	adds	r3, #8
   19c66:	005b      	lsls	r3, r3, #1
   19c68:	18c3      	adds	r3, r0, r3
   19c6a:	3302      	adds	r3, #2
   19c6c:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   19c6e:	b2db      	uxtb	r3, r3
   19c70:	1acb      	subs	r3, r1, r3
   19c72:	b2db      	uxtb	r3, r3
   19c74:	3301      	adds	r3, #1
   19c76:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   19c78:	4b3c      	ldr	r3, [pc, #240]	; (19d6c <prvTraceGetObjectHandle+0x18c>)
   19c7a:	2148      	movs	r1, #72	; 0x48
   19c7c:	189b      	adds	r3, r3, r2
   19c7e:	185b      	adds	r3, r3, r1
   19c80:	1c02      	adds	r2, r0, #0
   19c82:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   19c84:	4b3a      	ldr	r3, [pc, #232]	; (19d70 <prvTraceGetObjectHandle+0x190>)
   19c86:	681a      	ldr	r2, [r3, #0]
   19c88:	231f      	movs	r3, #31
   19c8a:	18fb      	adds	r3, r7, r3
   19c8c:	4937      	ldr	r1, [pc, #220]	; (19d6c <prvTraceGetObjectHandle+0x18c>)
   19c8e:	2048      	movs	r0, #72	; 0x48
   19c90:	188a      	adds	r2, r1, r2
   19c92:	1812      	adds	r2, r2, r0
   19c94:	7812      	ldrb	r2, [r2, #0]
   19c96:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19c98:	1dfb      	adds	r3, r7, #7
   19c9a:	781a      	ldrb	r2, [r3, #0]
   19c9c:	4b33      	ldr	r3, [pc, #204]	; (19d6c <prvTraceGetObjectHandle+0x18c>)
   19c9e:	0052      	lsls	r2, r2, #1
   19ca0:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   19ca2:	1dfb      	adds	r3, r7, #7
   19ca4:	781b      	ldrb	r3, [r3, #0]
   19ca6:	4931      	ldr	r1, [pc, #196]	; (19d6c <prvTraceGetObjectHandle+0x18c>)
   19ca8:	3310      	adds	r3, #16
   19caa:	005b      	lsls	r3, r3, #1
   19cac:	18cb      	adds	r3, r1, r3
   19cae:	3304      	adds	r3, #4
   19cb0:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19cb2:	429a      	cmp	r2, r3
   19cb4:	d90d      	bls.n	19cd2 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19cb6:	1dfb      	adds	r3, r7, #7
   19cb8:	781b      	ldrb	r3, [r3, #0]
   19cba:	0018      	movs	r0, r3
   19cbc:	4b2d      	ldr	r3, [pc, #180]	; (19d74 <prvTraceGetObjectHandle+0x194>)
   19cbe:	4798      	blx	r3
   19cc0:	0003      	movs	r3, r0
   19cc2:	0018      	movs	r0, r3
   19cc4:	4b26      	ldr	r3, [pc, #152]	; (19d60 <prvTraceGetObjectHandle+0x180>)
   19cc6:	4798      	blx	r3
		handle = 0;
   19cc8:	231f      	movs	r3, #31
   19cca:	18fb      	adds	r3, r7, r3
   19ccc:	2200      	movs	r2, #0
   19cce:	701a      	strb	r2, [r3, #0]
   19cd0:	e031      	b.n	19d36 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   19cd2:	1dfb      	adds	r3, r7, #7
   19cd4:	781b      	ldrb	r3, [r3, #0]
   19cd6:	4a25      	ldr	r2, [pc, #148]	; (19d6c <prvTraceGetObjectHandle+0x18c>)
   19cd8:	0059      	lsls	r1, r3, #1
   19cda:	5a8a      	ldrh	r2, [r1, r2]
   19cdc:	3201      	adds	r2, #1
   19cde:	b291      	uxth	r1, r2
   19ce0:	4a22      	ldr	r2, [pc, #136]	; (19d6c <prvTraceGetObjectHandle+0x18c>)
   19ce2:	005b      	lsls	r3, r3, #1
   19ce4:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   19ce6:	1dfb      	adds	r3, r7, #7
   19ce8:	781a      	ldrb	r2, [r3, #0]
   19cea:	4b20      	ldr	r3, [pc, #128]	; (19d6c <prvTraceGetObjectHandle+0x18c>)
   19cec:	0052      	lsls	r2, r2, #1
   19cee:	5ad3      	ldrh	r3, [r2, r3]
   19cf0:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   19cf2:	1dfb      	adds	r3, r7, #7
   19cf4:	781b      	ldrb	r3, [r3, #0]
   19cf6:	4a1d      	ldr	r2, [pc, #116]	; (19d6c <prvTraceGetObjectHandle+0x18c>)
   19cf8:	3308      	adds	r3, #8
   19cfa:	005b      	lsls	r3, r3, #1
   19cfc:	18d3      	adds	r3, r2, r3
   19cfe:	3302      	adds	r3, #2
   19d00:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   19d02:	1acb      	subs	r3, r1, r3
   19d04:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   19d06:	1dfb      	adds	r3, r7, #7
   19d08:	781b      	ldrb	r3, [r3, #0]
   19d0a:	4a18      	ldr	r2, [pc, #96]	; (19d6c <prvTraceGetObjectHandle+0x18c>)
   19d0c:	3318      	adds	r3, #24
   19d0e:	005b      	lsls	r3, r3, #1
   19d10:	18d3      	adds	r3, r2, r3
   19d12:	3306      	adds	r3, #6
   19d14:	881b      	ldrh	r3, [r3, #0]
   19d16:	001a      	movs	r2, r3
		if (hndCount >
   19d18:	697b      	ldr	r3, [r7, #20]
   19d1a:	429a      	cmp	r2, r3
   19d1c:	da0b      	bge.n	19d36 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19d1e:	1dfb      	adds	r3, r7, #7
   19d20:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   19d22:	697a      	ldr	r2, [r7, #20]
   19d24:	b2d2      	uxtb	r2, r2
   19d26:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19d28:	4a10      	ldr	r2, [pc, #64]	; (19d6c <prvTraceGetObjectHandle+0x18c>)
   19d2a:	3318      	adds	r3, #24
   19d2c:	005b      	lsls	r3, r3, #1
   19d2e:	18d3      	adds	r3, r2, r3
   19d30:	3306      	adds	r3, #6
   19d32:	1c0a      	adds	r2, r1, #0
   19d34:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   19d36:	4b0c      	ldr	r3, [pc, #48]	; (19d68 <prvTraceGetObjectHandle+0x188>)
   19d38:	681b      	ldr	r3, [r3, #0]
   19d3a:	1e5a      	subs	r2, r3, #1
   19d3c:	4b0a      	ldr	r3, [pc, #40]	; (19d68 <prvTraceGetObjectHandle+0x188>)
   19d3e:	601a      	str	r2, [r3, #0]
   19d40:	69bb      	ldr	r3, [r7, #24]
   19d42:	60bb      	str	r3, [r7, #8]
   19d44:	68bb      	ldr	r3, [r7, #8]
   19d46:	f383 8810 	msr	PRIMASK, r3

	return handle;
   19d4a:	231f      	movs	r3, #31
   19d4c:	18fb      	adds	r3, r7, r3
   19d4e:	781b      	ldrb	r3, [r3, #0]
}
   19d50:	0018      	movs	r0, r3
   19d52:	46bd      	mov	sp, r7
   19d54:	b008      	add	sp, #32
   19d56:	bd80      	pop	{r7, pc}
   19d58:	20000df4 	.word	0x20000df4
   19d5c:	00037a90 	.word	0x00037a90
   19d60:	00019efd 	.word	0x00019efd
   19d64:	00038670 	.word	0x00038670
   19d68:	20000d4c 	.word	0x20000d4c
   19d6c:	20000d64 	.word	0x20000d64
   19d70:	20000df8 	.word	0x20000df8
   19d74:	00018c1d 	.word	0x00018c1d

00019d78 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   19d78:	b590      	push	{r4, r7, lr}
   19d7a:	b085      	sub	sp, #20
   19d7c:	af00      	add	r7, sp, #0
   19d7e:	0002      	movs	r2, r0
   19d80:	1dfb      	adds	r3, r7, #7
   19d82:	701a      	strb	r2, [r3, #0]
   19d84:	1dbb      	adds	r3, r7, #6
   19d86:	1c0a      	adds	r2, r1, #0
   19d88:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   19d8a:	230e      	movs	r3, #14
   19d8c:	18fc      	adds	r4, r7, r3
   19d8e:	1dfb      	adds	r3, r7, #7
   19d90:	781a      	ldrb	r2, [r3, #0]
   19d92:	1dbb      	adds	r3, r7, #6
   19d94:	781b      	ldrb	r3, [r3, #0]
   19d96:	0011      	movs	r1, r2
   19d98:	0018      	movs	r0, r3
   19d9a:	4b09      	ldr	r3, [pc, #36]	; (19dc0 <prvMarkObjectAsUsed+0x48>)
   19d9c:	4798      	blx	r3
   19d9e:	0003      	movs	r3, r0
   19da0:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   19da2:	4b08      	ldr	r3, [pc, #32]	; (19dc4 <prvMarkObjectAsUsed+0x4c>)
   19da4:	681a      	ldr	r2, [r3, #0]
   19da6:	230e      	movs	r3, #14
   19da8:	18fb      	adds	r3, r7, r3
   19daa:	881b      	ldrh	r3, [r3, #0]
   19dac:	219c      	movs	r1, #156	; 0x9c
   19dae:	18d3      	adds	r3, r2, r3
   19db0:	185b      	adds	r3, r3, r1
   19db2:	2201      	movs	r2, #1
   19db4:	701a      	strb	r2, [r3, #0]
}
   19db6:	46c0      	nop			; (mov r8, r8)
   19db8:	46bd      	mov	sp, r7
   19dba:	b005      	add	sp, #20
   19dbc:	bd90      	pop	{r4, r7, pc}
   19dbe:	46c0      	nop			; (mov r8, r8)
   19dc0:	00019b09 	.word	0x00019b09
   19dc4:	20000df4 	.word	0x20000df4

00019dc8 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   19dc8:	b580      	push	{r7, lr}
   19dca:	b086      	sub	sp, #24
   19dcc:	af00      	add	r7, sp, #0
   19dce:	60f8      	str	r0, [r7, #12]
   19dd0:	60b9      	str	r1, [r7, #8]
   19dd2:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   19dd4:	2300      	movs	r3, #0
   19dd6:	617b      	str	r3, [r7, #20]
   19dd8:	e010      	b.n	19dfc <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   19dda:	68fa      	ldr	r2, [r7, #12]
   19ddc:	697b      	ldr	r3, [r7, #20]
   19dde:	18d3      	adds	r3, r2, r3
   19de0:	68b9      	ldr	r1, [r7, #8]
   19de2:	697a      	ldr	r2, [r7, #20]
   19de4:	188a      	adds	r2, r1, r2
   19de6:	7812      	ldrb	r2, [r2, #0]
   19de8:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   19dea:	68ba      	ldr	r2, [r7, #8]
   19dec:	697b      	ldr	r3, [r7, #20]
   19dee:	18d3      	adds	r3, r2, r3
   19df0:	781b      	ldrb	r3, [r3, #0]
   19df2:	2b00      	cmp	r3, #0
   19df4:	d007      	beq.n	19e06 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   19df6:	697b      	ldr	r3, [r7, #20]
   19df8:	3301      	adds	r3, #1
   19dfa:	617b      	str	r3, [r7, #20]
   19dfc:	697a      	ldr	r2, [r7, #20]
   19dfe:	687b      	ldr	r3, [r7, #4]
   19e00:	429a      	cmp	r2, r3
   19e02:	d3ea      	bcc.n	19dda <prvStrncpy+0x12>
			break;
	}
}
   19e04:	e000      	b.n	19e08 <prvStrncpy+0x40>
			break;
   19e06:	46c0      	nop			; (mov r8, r8)
}
   19e08:	46c0      	nop			; (mov r8, r8)
   19e0a:	46bd      	mov	sp, r7
   19e0c:	b006      	add	sp, #24
   19e0e:	bd80      	pop	{r7, pc}

00019e10 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   19e10:	b580      	push	{r7, lr}
   19e12:	b082      	sub	sp, #8
   19e14:	af00      	add	r7, sp, #0
   19e16:	603a      	str	r2, [r7, #0]
   19e18:	1dfb      	adds	r3, r7, #7
   19e1a:	1c02      	adds	r2, r0, #0
   19e1c:	701a      	strb	r2, [r3, #0]
   19e1e:	1dbb      	adds	r3, r7, #6
   19e20:	1c0a      	adds	r2, r1, #0
   19e22:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   19e24:	683b      	ldr	r3, [r7, #0]
   19e26:	2b00      	cmp	r3, #0
   19e28:	d104      	bne.n	19e34 <prvTraceSetObjectName+0x24>
   19e2a:	4b2a      	ldr	r3, [pc, #168]	; (19ed4 <prvTraceSetObjectName+0xc4>)
   19e2c:	0018      	movs	r0, r3
   19e2e:	4b2a      	ldr	r3, [pc, #168]	; (19ed8 <prvTraceSetObjectName+0xc8>)
   19e30:	4798      	blx	r3
   19e32:	e04b      	b.n	19ecc <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   19e34:	1dfb      	adds	r3, r7, #7
   19e36:	781b      	ldrb	r3, [r3, #0]
   19e38:	2b08      	cmp	r3, #8
   19e3a:	d904      	bls.n	19e46 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   19e3c:	4b27      	ldr	r3, [pc, #156]	; (19edc <prvTraceSetObjectName+0xcc>)
   19e3e:	0018      	movs	r0, r3
   19e40:	4b25      	ldr	r3, [pc, #148]	; (19ed8 <prvTraceSetObjectName+0xc8>)
   19e42:	4798      	blx	r3
		return;
   19e44:	e042      	b.n	19ecc <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   19e46:	1dbb      	adds	r3, r7, #6
   19e48:	781b      	ldrb	r3, [r3, #0]
   19e4a:	2b00      	cmp	r3, #0
   19e4c:	d104      	bne.n	19e58 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   19e4e:	4b24      	ldr	r3, [pc, #144]	; (19ee0 <prvTraceSetObjectName+0xd0>)
   19e50:	0018      	movs	r0, r3
   19e52:	4b21      	ldr	r3, [pc, #132]	; (19ed8 <prvTraceSetObjectName+0xc8>)
   19e54:	4798      	blx	r3
		return;
   19e56:	e039      	b.n	19ecc <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   19e58:	4b22      	ldr	r3, [pc, #136]	; (19ee4 <prvTraceSetObjectName+0xd4>)
   19e5a:	681a      	ldr	r2, [r3, #0]
   19e5c:	1dfb      	adds	r3, r7, #7
   19e5e:	781b      	ldrb	r3, [r3, #0]
   19e60:	2164      	movs	r1, #100	; 0x64
   19e62:	18d3      	adds	r3, r2, r3
   19e64:	185b      	adds	r3, r3, r1
   19e66:	781b      	ldrb	r3, [r3, #0]
   19e68:	1dba      	adds	r2, r7, #6
   19e6a:	7812      	ldrb	r2, [r2, #0]
   19e6c:	429a      	cmp	r2, r3
   19e6e:	d909      	bls.n	19e84 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19e70:	1dfb      	adds	r3, r7, #7
   19e72:	781b      	ldrb	r3, [r3, #0]
   19e74:	0018      	movs	r0, r3
   19e76:	4b1c      	ldr	r3, [pc, #112]	; (19ee8 <prvTraceSetObjectName+0xd8>)
   19e78:	4798      	blx	r3
   19e7a:	0003      	movs	r3, r0
   19e7c:	0018      	movs	r0, r3
   19e7e:	4b16      	ldr	r3, [pc, #88]	; (19ed8 <prvTraceSetObjectName+0xc8>)
   19e80:	4798      	blx	r3
   19e82:	e023      	b.n	19ecc <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   19e84:	1dfb      	adds	r3, r7, #7
   19e86:	781a      	ldrb	r2, [r3, #0]
   19e88:	1dbb      	adds	r3, r7, #6
   19e8a:	781b      	ldrb	r3, [r3, #0]
   19e8c:	0011      	movs	r1, r2
   19e8e:	0018      	movs	r0, r3
   19e90:	4b16      	ldr	r3, [pc, #88]	; (19eec <prvTraceSetObjectName+0xdc>)
   19e92:	4798      	blx	r3
   19e94:	0003      	movs	r3, r0
   19e96:	001a      	movs	r2, r3
   19e98:	4b15      	ldr	r3, [pc, #84]	; (19ef0 <prvTraceSetObjectName+0xe0>)
   19e9a:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   19e9c:	4b15      	ldr	r3, [pc, #84]	; (19ef4 <prvTraceSetObjectName+0xe4>)
   19e9e:	681b      	ldr	r3, [r3, #0]
   19ea0:	2b00      	cmp	r3, #0
   19ea2:	d113      	bne.n	19ecc <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19ea4:	4b0f      	ldr	r3, [pc, #60]	; (19ee4 <prvTraceSetObjectName+0xd4>)
   19ea6:	681a      	ldr	r2, [r3, #0]
   19ea8:	4b11      	ldr	r3, [pc, #68]	; (19ef0 <prvTraceSetObjectName+0xe0>)
   19eaa:	881b      	ldrh	r3, [r3, #0]
   19eac:	3398      	adds	r3, #152	; 0x98
   19eae:	18d3      	adds	r3, r2, r3
   19eb0:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   19eb2:	4b0c      	ldr	r3, [pc, #48]	; (19ee4 <prvTraceSetObjectName+0xd4>)
   19eb4:	681a      	ldr	r2, [r3, #0]
   19eb6:	1dfb      	adds	r3, r7, #7
   19eb8:	781b      	ldrb	r3, [r3, #0]
   19eba:	2170      	movs	r1, #112	; 0x70
   19ebc:	18d3      	adds	r3, r2, r3
   19ebe:	185b      	adds	r3, r3, r1
   19ec0:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19ec2:	001a      	movs	r2, r3
   19ec4:	683b      	ldr	r3, [r7, #0]
   19ec6:	0019      	movs	r1, r3
   19ec8:	4b0b      	ldr	r3, [pc, #44]	; (19ef8 <prvTraceSetObjectName+0xe8>)
   19eca:	4798      	blx	r3
		}
	}
}
   19ecc:	46bd      	mov	sp, r7
   19ece:	b002      	add	sp, #8
   19ed0:	bd80      	pop	{r7, pc}
   19ed2:	46c0      	nop			; (mov r8, r8)
   19ed4:	00038774 	.word	0x00038774
   19ed8:	00019efd 	.word	0x00019efd
   19edc:	000387a8 	.word	0x000387a8
   19ee0:	000387d8 	.word	0x000387d8
   19ee4:	20000df4 	.word	0x20000df4
   19ee8:	00018c1d 	.word	0x00018c1d
   19eec:	00019b09 	.word	0x00019b09
   19ef0:	20000dfc 	.word	0x20000dfc
   19ef4:	20000d54 	.word	0x20000d54
   19ef8:	00019dc9 	.word	0x00019dc9

00019efc <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   19efc:	b580      	push	{r7, lr}
   19efe:	b082      	sub	sp, #8
   19f00:	af00      	add	r7, sp, #0
   19f02:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   19f04:	4b11      	ldr	r3, [pc, #68]	; (19f4c <prvTraceError+0x50>)
   19f06:	681b      	ldr	r3, [r3, #0]
   19f08:	2b00      	cmp	r3, #0
   19f0a:	d001      	beq.n	19f10 <prvTraceError+0x14>
	{
		vTraceStop();
   19f0c:	4b10      	ldr	r3, [pc, #64]	; (19f50 <prvTraceError+0x54>)
   19f0e:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   19f10:	4b10      	ldr	r3, [pc, #64]	; (19f54 <prvTraceError+0x58>)
   19f12:	681b      	ldr	r3, [r3, #0]
   19f14:	2b00      	cmp	r3, #0
   19f16:	d115      	bne.n	19f44 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   19f18:	4b0e      	ldr	r3, [pc, #56]	; (19f54 <prvTraceError+0x58>)
   19f1a:	687a      	ldr	r2, [r7, #4]
   19f1c:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   19f1e:	4b0b      	ldr	r3, [pc, #44]	; (19f4c <prvTraceError+0x50>)
   19f20:	681b      	ldr	r3, [r3, #0]
   19f22:	2b00      	cmp	r3, #0
   19f24:	d00e      	beq.n	19f44 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   19f26:	4b09      	ldr	r3, [pc, #36]	; (19f4c <prvTraceError+0x50>)
   19f28:	681b      	ldr	r3, [r3, #0]
   19f2a:	4a0b      	ldr	r2, [pc, #44]	; (19f58 <prvTraceError+0x5c>)
   19f2c:	1898      	adds	r0, r3, r2
   19f2e:	4b09      	ldr	r3, [pc, #36]	; (19f54 <prvTraceError+0x58>)
   19f30:	681b      	ldr	r3, [r3, #0]
   19f32:	2250      	movs	r2, #80	; 0x50
   19f34:	0019      	movs	r1, r3
   19f36:	4b09      	ldr	r3, [pc, #36]	; (19f5c <prvTraceError+0x60>)
   19f38:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   19f3a:	4b04      	ldr	r3, [pc, #16]	; (19f4c <prvTraceError+0x50>)
   19f3c:	681b      	ldr	r3, [r3, #0]
   19f3e:	4a08      	ldr	r2, [pc, #32]	; (19f60 <prvTraceError+0x64>)
   19f40:	2101      	movs	r1, #1
   19f42:	5099      	str	r1, [r3, r2]
		}
	}
}
   19f44:	46c0      	nop			; (mov r8, r8)
   19f46:	46bd      	mov	sp, r7
   19f48:	b002      	add	sp, #8
   19f4a:	bd80      	pop	{r7, pc}
   19f4c:	20000df4 	.word	0x20000df4
   19f50:	00018dc1 	.word	0x00018dc1
   19f54:	20000d54 	.word	0x20000d54
   19f58:	000006bc 	.word	0x000006bc
   19f5c:	00019dc9 	.word	0x00019dc9
   19f60:	000006b4 	.word	0x000006b4

00019f64 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   19f64:	b580      	push	{r7, lr}
   19f66:	b086      	sub	sp, #24
   19f68:	af00      	add	r7, sp, #0
   19f6a:	0002      	movs	r2, r0
   19f6c:	1dfb      	adds	r3, r7, #7
   19f6e:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   19f70:	2300      	movs	r3, #0
   19f72:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   19f74:	2300      	movs	r3, #0
   19f76:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   19f78:	1dfb      	adds	r3, r7, #7
   19f7a:	781b      	ldrb	r3, [r3, #0]
   19f7c:	2b00      	cmp	r3, #0
   19f7e:	d000      	beq.n	19f82 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   19f80:	e089      	b.n	1a096 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   19f82:	4b49      	ldr	r3, [pc, #292]	; (1a0a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   19f84:	0018      	movs	r0, r3
   19f86:	4b49      	ldr	r3, [pc, #292]	; (1a0ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   19f88:	4798      	blx	r3
   19f8a:	e08a      	b.n	1a0a2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   19f8c:	4b48      	ldr	r3, [pc, #288]	; (1a0b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19f8e:	681b      	ldr	r3, [r3, #0]
   19f90:	69da      	ldr	r2, [r3, #28]
   19f92:	697b      	ldr	r3, [r7, #20]
   19f94:	18d3      	adds	r3, r2, r3
   19f96:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   19f98:	4b45      	ldr	r3, [pc, #276]	; (1a0b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19f9a:	6819      	ldr	r1, [r3, #0]
   19f9c:	693b      	ldr	r3, [r7, #16]
   19f9e:	009a      	lsls	r2, r3, #2
   19fa0:	23e2      	movs	r3, #226	; 0xe2
   19fa2:	00db      	lsls	r3, r3, #3
   19fa4:	188a      	adds	r2, r1, r2
   19fa6:	18d3      	adds	r3, r2, r3
   19fa8:	781b      	ldrb	r3, [r3, #0]
   19faa:	2b98      	cmp	r3, #152	; 0x98
   19fac:	d934      	bls.n	1a018 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   19fae:	4b40      	ldr	r3, [pc, #256]	; (1a0b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19fb0:	6819      	ldr	r1, [r3, #0]
   19fb2:	693b      	ldr	r3, [r7, #16]
   19fb4:	009a      	lsls	r2, r3, #2
   19fb6:	23e2      	movs	r3, #226	; 0xe2
   19fb8:	00db      	lsls	r3, r3, #3
   19fba:	188a      	adds	r2, r1, r2
   19fbc:	18d3      	adds	r3, r2, r3
   19fbe:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   19fc0:	2ba7      	cmp	r3, #167	; 0xa7
   19fc2:	d829      	bhi.n	1a018 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   19fc4:	4b3a      	ldr	r3, [pc, #232]	; (1a0b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19fc6:	6819      	ldr	r1, [r3, #0]
   19fc8:	693b      	ldr	r3, [r7, #16]
   19fca:	009a      	lsls	r2, r3, #2
   19fcc:	23e2      	movs	r3, #226	; 0xe2
   19fce:	00db      	lsls	r3, r3, #3
   19fd0:	188a      	adds	r2, r1, r2
   19fd2:	18d3      	adds	r3, r2, r3
   19fd4:	781a      	ldrb	r2, [r3, #0]
   19fd6:	230f      	movs	r3, #15
   19fd8:	18fb      	adds	r3, r7, r3
   19fda:	3268      	adds	r2, #104	; 0x68
   19fdc:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   19fde:	230f      	movs	r3, #15
   19fe0:	18fb      	adds	r3, r7, r3
   19fe2:	781a      	ldrb	r2, [r3, #0]
   19fe4:	693b      	ldr	r3, [r7, #16]
   19fe6:	18d2      	adds	r2, r2, r3
   19fe8:	4b31      	ldr	r3, [pc, #196]	; (1a0b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19fea:	681b      	ldr	r3, [r3, #0]
   19fec:	699b      	ldr	r3, [r3, #24]
   19fee:	429a      	cmp	r2, r3
   19ff0:	d24d      	bcs.n	1a08e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   19ff2:	4b2f      	ldr	r3, [pc, #188]	; (1a0b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19ff4:	681a      	ldr	r2, [r3, #0]
   19ff6:	693b      	ldr	r3, [r7, #16]
   19ff8:	009b      	lsls	r3, r3, #2
   19ffa:	21e2      	movs	r1, #226	; 0xe2
   19ffc:	00c9      	lsls	r1, r1, #3
   19ffe:	468c      	mov	ip, r1
   1a000:	4463      	add	r3, ip
   1a002:	18d0      	adds	r0, r2, r3
   1a004:	230f      	movs	r3, #15
   1a006:	18fb      	adds	r3, r7, r3
   1a008:	781b      	ldrb	r3, [r3, #0]
   1a00a:	3301      	adds	r3, #1
   1a00c:	009b      	lsls	r3, r3, #2
   1a00e:	001a      	movs	r2, r3
   1a010:	2100      	movs	r1, #0
   1a012:	4b28      	ldr	r3, [pc, #160]	; (1a0b4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a014:	4798      	blx	r3
		{
   1a016:	e03a      	b.n	1a08e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1a018:	4b25      	ldr	r3, [pc, #148]	; (1a0b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a01a:	6819      	ldr	r1, [r3, #0]
   1a01c:	693b      	ldr	r3, [r7, #16]
   1a01e:	009a      	lsls	r2, r3, #2
   1a020:	23e2      	movs	r3, #226	; 0xe2
   1a022:	00db      	lsls	r3, r3, #3
   1a024:	188a      	adds	r2, r1, r2
   1a026:	18d3      	adds	r3, r2, r3
   1a028:	781b      	ldrb	r3, [r3, #0]
   1a02a:	2b01      	cmp	r3, #1
   1a02c:	d130      	bne.n	1a090 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1a02e:	693b      	ldr	r3, [r7, #16]
   1a030:	1c5a      	adds	r2, r3, #1
   1a032:	4b1f      	ldr	r3, [pc, #124]	; (1a0b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a034:	681b      	ldr	r3, [r3, #0]
   1a036:	699b      	ldr	r3, [r3, #24]
   1a038:	429a      	cmp	r2, r3
   1a03a:	d20e      	bcs.n	1a05a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1a03c:	4b1c      	ldr	r3, [pc, #112]	; (1a0b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a03e:	681a      	ldr	r2, [r3, #0]
   1a040:	693b      	ldr	r3, [r7, #16]
   1a042:	009b      	lsls	r3, r3, #2
   1a044:	21e2      	movs	r1, #226	; 0xe2
   1a046:	00c9      	lsls	r1, r1, #3
   1a048:	468c      	mov	ip, r1
   1a04a:	4463      	add	r3, ip
   1a04c:	18d3      	adds	r3, r2, r3
   1a04e:	2208      	movs	r2, #8
   1a050:	2100      	movs	r1, #0
   1a052:	0018      	movs	r0, r3
   1a054:	4b17      	ldr	r3, [pc, #92]	; (1a0b4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a056:	4798      	blx	r3
   1a058:	e01a      	b.n	1a090 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1a05a:	4b15      	ldr	r3, [pc, #84]	; (1a0b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a05c:	681b      	ldr	r3, [r3, #0]
   1a05e:	22e2      	movs	r2, #226	; 0xe2
   1a060:	00d2      	lsls	r2, r2, #3
   1a062:	4694      	mov	ip, r2
   1a064:	4463      	add	r3, ip
   1a066:	2204      	movs	r2, #4
   1a068:	2100      	movs	r1, #0
   1a06a:	0018      	movs	r0, r3
   1a06c:	4b11      	ldr	r3, [pc, #68]	; (1a0b4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a06e:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1a070:	4b0f      	ldr	r3, [pc, #60]	; (1a0b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a072:	681a      	ldr	r2, [r3, #0]
   1a074:	693b      	ldr	r3, [r7, #16]
   1a076:	009b      	lsls	r3, r3, #2
   1a078:	21e2      	movs	r1, #226	; 0xe2
   1a07a:	00c9      	lsls	r1, r1, #3
   1a07c:	468c      	mov	ip, r1
   1a07e:	4463      	add	r3, ip
   1a080:	18d3      	adds	r3, r2, r3
   1a082:	2204      	movs	r2, #4
   1a084:	2100      	movs	r1, #0
   1a086:	0018      	movs	r0, r3
   1a088:	4b0a      	ldr	r3, [pc, #40]	; (1a0b4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a08a:	4798      	blx	r3
   1a08c:	e000      	b.n	1a090 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1a08e:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1a090:	697b      	ldr	r3, [r7, #20]
   1a092:	3301      	adds	r3, #1
   1a094:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1a096:	1dfb      	adds	r3, r7, #7
   1a098:	781a      	ldrb	r2, [r3, #0]
   1a09a:	697b      	ldr	r3, [r7, #20]
   1a09c:	429a      	cmp	r2, r3
   1a09e:	d900      	bls.n	1a0a2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1a0a0:	e774      	b.n	19f8c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1a0a2:	46bd      	mov	sp, r7
   1a0a4:	b006      	add	sp, #24
   1a0a6:	bd80      	pop	{r7, pc}
   1a0a8:	00038838 	.word	0x00038838
   1a0ac:	00019efd 	.word	0x00019efd
   1a0b0:	20000df4 	.word	0x20000df4
   1a0b4:	00034f63 	.word	0x00034f63

0001a0b8 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1a0b8:	b580      	push	{r7, lr}
   1a0ba:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1a0bc:	4b12      	ldr	r3, [pc, #72]	; (1a108 <prvTraceUpdateCounters+0x50>)
   1a0be:	681b      	ldr	r3, [r3, #0]
   1a0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a0c2:	2b00      	cmp	r3, #0
   1a0c4:	d01c      	beq.n	1a100 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1a0c6:	4b10      	ldr	r3, [pc, #64]	; (1a108 <prvTraceUpdateCounters+0x50>)
   1a0c8:	681b      	ldr	r3, [r3, #0]
   1a0ca:	695a      	ldr	r2, [r3, #20]
   1a0cc:	3201      	adds	r2, #1
   1a0ce:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1a0d0:	4b0d      	ldr	r3, [pc, #52]	; (1a108 <prvTraceUpdateCounters+0x50>)
   1a0d2:	681b      	ldr	r3, [r3, #0]
   1a0d4:	69da      	ldr	r2, [r3, #28]
   1a0d6:	3201      	adds	r2, #1
   1a0d8:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a0da:	4b0b      	ldr	r3, [pc, #44]	; (1a108 <prvTraceUpdateCounters+0x50>)
   1a0dc:	681b      	ldr	r3, [r3, #0]
   1a0de:	69da      	ldr	r2, [r3, #28]
   1a0e0:	232c      	movs	r3, #44	; 0x2c
   1a0e2:	33ff      	adds	r3, #255	; 0xff
   1a0e4:	429a      	cmp	r2, r3
   1a0e6:	d907      	bls.n	1a0f8 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1a0e8:	4b07      	ldr	r3, [pc, #28]	; (1a108 <prvTraceUpdateCounters+0x50>)
   1a0ea:	681b      	ldr	r3, [r3, #0]
   1a0ec:	2201      	movs	r2, #1
   1a0ee:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1a0f0:	4b05      	ldr	r3, [pc, #20]	; (1a108 <prvTraceUpdateCounters+0x50>)
   1a0f2:	681b      	ldr	r3, [r3, #0]
   1a0f4:	2200      	movs	r2, #0
   1a0f6:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1a0f8:	2001      	movs	r0, #1
   1a0fa:	4b04      	ldr	r3, [pc, #16]	; (1a10c <prvTraceUpdateCounters+0x54>)
   1a0fc:	4798      	blx	r3
   1a0fe:	e000      	b.n	1a102 <prvTraceUpdateCounters+0x4a>
		return;
   1a100:	46c0      	nop			; (mov r8, r8)
#endif
}
   1a102:	46bd      	mov	sp, r7
   1a104:	bd80      	pop	{r7, pc}
   1a106:	46c0      	nop			; (mov r8, r8)
   1a108:	20000df4 	.word	0x20000df4
   1a10c:	00019f65 	.word	0x00019f65

0001a110 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1a110:	b5b0      	push	{r4, r5, r7, lr}
   1a112:	b086      	sub	sp, #24
   1a114:	af00      	add	r7, sp, #0
   1a116:	0002      	movs	r2, r0
   1a118:	1dbb      	adds	r3, r7, #6
   1a11a:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1a11c:	2300      	movs	r3, #0
   1a11e:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1a120:	2300      	movs	r3, #0
   1a122:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1a124:	2300      	movs	r3, #0
   1a126:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1a128:	1dbb      	adds	r3, r7, #6
   1a12a:	881b      	ldrh	r3, [r3, #0]
   1a12c:	2bff      	cmp	r3, #255	; 0xff
   1a12e:	d00a      	beq.n	1a146 <prvTraceGetDTS+0x36>
   1a130:	1dbb      	adds	r3, r7, #6
   1a132:	881b      	ldrh	r3, [r3, #0]
   1a134:	4a60      	ldr	r2, [pc, #384]	; (1a2b8 <prvTraceGetDTS+0x1a8>)
   1a136:	4293      	cmp	r3, r2
   1a138:	d005      	beq.n	1a146 <prvTraceGetDTS+0x36>
   1a13a:	4b60      	ldr	r3, [pc, #384]	; (1a2bc <prvTraceGetDTS+0x1ac>)
   1a13c:	0018      	movs	r0, r3
   1a13e:	4b60      	ldr	r3, [pc, #384]	; (1a2c0 <prvTraceGetDTS+0x1b0>)
   1a140:	4798      	blx	r3
   1a142:	2300      	movs	r3, #0
   1a144:	e0b3      	b.n	1a2ae <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1a146:	4b5f      	ldr	r3, [pc, #380]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a148:	681b      	ldr	r3, [r3, #0]
   1a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a14c:	2b00      	cmp	r3, #0
   1a14e:	d118      	bne.n	1a182 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1a150:	4b5d      	ldr	r3, [pc, #372]	; (1a2c8 <prvTraceGetDTS+0x1b8>)
   1a152:	681b      	ldr	r3, [r3, #0]
   1a154:	2b00      	cmp	r3, #0
   1a156:	d006      	beq.n	1a166 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1a158:	4b5a      	ldr	r3, [pc, #360]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a15a:	681b      	ldr	r3, [r3, #0]
   1a15c:	4a5a      	ldr	r2, [pc, #360]	; (1a2c8 <prvTraceGetDTS+0x1b8>)
   1a15e:	6812      	ldr	r2, [r2, #0]
   1a160:	0892      	lsrs	r2, r2, #2
   1a162:	625a      	str	r2, [r3, #36]	; 0x24
   1a164:	e00d      	b.n	1a182 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1a166:	4b59      	ldr	r3, [pc, #356]	; (1a2cc <prvTraceGetDTS+0x1bc>)
   1a168:	681a      	ldr	r2, [r3, #0]
   1a16a:	4b59      	ldr	r3, [pc, #356]	; (1a2d0 <prvTraceGetDTS+0x1c0>)
   1a16c:	681b      	ldr	r3, [r3, #0]
   1a16e:	429a      	cmp	r2, r3
   1a170:	d007      	beq.n	1a182 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1a172:	4b54      	ldr	r3, [pc, #336]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a174:	681c      	ldr	r4, [r3, #0]
   1a176:	2000      	movs	r0, #0
   1a178:	4b56      	ldr	r3, [pc, #344]	; (1a2d4 <prvTraceGetDTS+0x1c4>)
   1a17a:	4798      	blx	r3
   1a17c:	0003      	movs	r3, r0
   1a17e:	089b      	lsrs	r3, r3, #2
   1a180:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1a182:	230c      	movs	r3, #12
   1a184:	18fb      	adds	r3, r7, r3
   1a186:	0018      	movs	r0, r3
   1a188:	4b53      	ldr	r3, [pc, #332]	; (1a2d8 <prvTraceGetDTS+0x1c8>)
   1a18a:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1a18c:	68fa      	ldr	r2, [r7, #12]
   1a18e:	4b53      	ldr	r3, [pc, #332]	; (1a2dc <prvTraceGetDTS+0x1cc>)
   1a190:	681b      	ldr	r3, [r3, #0]
   1a192:	1ad3      	subs	r3, r2, r3
   1a194:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1a196:	68fa      	ldr	r2, [r7, #12]
   1a198:	4b50      	ldr	r3, [pc, #320]	; (1a2dc <prvTraceGetDTS+0x1cc>)
   1a19a:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1a19c:	4b49      	ldr	r3, [pc, #292]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a19e:	681b      	ldr	r3, [r3, #0]
   1a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a1a2:	2b00      	cmp	r3, #0
   1a1a4:	d044      	beq.n	1a230 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1a1a6:	4b47      	ldr	r3, [pc, #284]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a1a8:	681b      	ldr	r3, [r3, #0]
   1a1aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a1ac:	693b      	ldr	r3, [r7, #16]
   1a1ae:	429a      	cmp	r2, r3
   1a1b0:	d21e      	bcs.n	1a1f0 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1a1b2:	4b44      	ldr	r3, [pc, #272]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a1b4:	681c      	ldr	r4, [r3, #0]
   1a1b6:	4b43      	ldr	r3, [pc, #268]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a1b8:	681b      	ldr	r3, [r3, #0]
   1a1ba:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1a1bc:	4b41      	ldr	r3, [pc, #260]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a1be:	681b      	ldr	r3, [r3, #0]
   1a1c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a1c2:	4b47      	ldr	r3, [pc, #284]	; (1a2e0 <prvTraceGetDTS+0x1d0>)
   1a1c4:	0011      	movs	r1, r2
   1a1c6:	6938      	ldr	r0, [r7, #16]
   1a1c8:	4798      	blx	r3
   1a1ca:	0003      	movs	r3, r0
   1a1cc:	18eb      	adds	r3, r5, r3
   1a1ce:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1a1d0:	4b3c      	ldr	r3, [pc, #240]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a1d2:	681c      	ldr	r4, [r3, #0]
   1a1d4:	4b3b      	ldr	r3, [pc, #236]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a1d6:	681b      	ldr	r3, [r3, #0]
   1a1d8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1a1da:	4b3a      	ldr	r3, [pc, #232]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a1dc:	681b      	ldr	r3, [r3, #0]
   1a1de:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a1e0:	693a      	ldr	r2, [r7, #16]
   1a1e2:	4b40      	ldr	r3, [pc, #256]	; (1a2e4 <prvTraceGetDTS+0x1d4>)
   1a1e4:	0010      	movs	r0, r2
   1a1e6:	4798      	blx	r3
   1a1e8:	000b      	movs	r3, r1
   1a1ea:	18eb      	adds	r3, r5, r3
   1a1ec:	62a3      	str	r3, [r4, #40]	; 0x28
   1a1ee:	e007      	b.n	1a200 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1a1f0:	4b34      	ldr	r3, [pc, #208]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a1f2:	681b      	ldr	r3, [r3, #0]
   1a1f4:	4a33      	ldr	r2, [pc, #204]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a1f6:	6812      	ldr	r2, [r2, #0]
   1a1f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a1fa:	693a      	ldr	r2, [r7, #16]
   1a1fc:	188a      	adds	r2, r1, r2
   1a1fe:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1a200:	4b30      	ldr	r3, [pc, #192]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a202:	681b      	ldr	r3, [r3, #0]
   1a204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a206:	4b2f      	ldr	r3, [pc, #188]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a208:	681b      	ldr	r3, [r3, #0]
   1a20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a20c:	429a      	cmp	r2, r3
   1a20e:	d313      	bcc.n	1a238 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1a210:	4b2c      	ldr	r3, [pc, #176]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a212:	681b      	ldr	r3, [r3, #0]
   1a214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a216:	3201      	adds	r2, #1
   1a218:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1a21a:	4b2a      	ldr	r3, [pc, #168]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a21c:	681b      	ldr	r3, [r3, #0]
   1a21e:	4a29      	ldr	r2, [pc, #164]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a220:	6812      	ldr	r2, [r2, #0]
   1a222:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a224:	4a27      	ldr	r2, [pc, #156]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a226:	6812      	ldr	r2, [r2, #0]
   1a228:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1a22a:	1a8a      	subs	r2, r1, r2
   1a22c:	629a      	str	r2, [r3, #40]	; 0x28
   1a22e:	e003      	b.n	1a238 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1a230:	4b24      	ldr	r3, [pc, #144]	; (1a2c4 <prvTraceGetDTS+0x1b4>)
   1a232:	681b      	ldr	r3, [r3, #0]
   1a234:	68fa      	ldr	r2, [r7, #12]
   1a236:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1a238:	1dbb      	adds	r3, r7, #6
   1a23a:	881a      	ldrh	r2, [r3, #0]
   1a23c:	693b      	ldr	r3, [r7, #16]
   1a23e:	429a      	cmp	r2, r3
   1a240:	d22f      	bcs.n	1a2a2 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1a242:	4b29      	ldr	r3, [pc, #164]	; (1a2e8 <prvTraceGetDTS+0x1d8>)
   1a244:	4798      	blx	r3
   1a246:	0003      	movs	r3, r0
   1a248:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1a24a:	697b      	ldr	r3, [r7, #20]
   1a24c:	2b00      	cmp	r3, #0
   1a24e:	d028      	beq.n	1a2a2 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1a250:	1dbb      	adds	r3, r7, #6
   1a252:	881b      	ldrh	r3, [r3, #0]
   1a254:	4a18      	ldr	r2, [pc, #96]	; (1a2b8 <prvTraceGetDTS+0x1a8>)
   1a256:	4293      	cmp	r3, r2
   1a258:	d10b      	bne.n	1a272 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1a25a:	697b      	ldr	r3, [r7, #20]
   1a25c:	22a9      	movs	r2, #169	; 0xa9
   1a25e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1a260:	693b      	ldr	r3, [r7, #16]
   1a262:	0c1b      	lsrs	r3, r3, #16
   1a264:	b29a      	uxth	r2, r3
   1a266:	697b      	ldr	r3, [r7, #20]
   1a268:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1a26a:	697b      	ldr	r3, [r7, #20]
   1a26c:	2200      	movs	r2, #0
   1a26e:	705a      	strb	r2, [r3, #1]
   1a270:	e015      	b.n	1a29e <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1a272:	1dbb      	adds	r3, r7, #6
   1a274:	881b      	ldrh	r3, [r3, #0]
   1a276:	2bff      	cmp	r3, #255	; 0xff
   1a278:	d10d      	bne.n	1a296 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1a27a:	697b      	ldr	r3, [r7, #20]
   1a27c:	22a8      	movs	r2, #168	; 0xa8
   1a27e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1a280:	693b      	ldr	r3, [r7, #16]
   1a282:	0a1b      	lsrs	r3, r3, #8
   1a284:	b29a      	uxth	r2, r3
   1a286:	697b      	ldr	r3, [r7, #20]
   1a288:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1a28a:	693b      	ldr	r3, [r7, #16]
   1a28c:	0e1b      	lsrs	r3, r3, #24
   1a28e:	b2da      	uxtb	r2, r3
   1a290:	697b      	ldr	r3, [r7, #20]
   1a292:	705a      	strb	r2, [r3, #1]
   1a294:	e003      	b.n	1a29e <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1a296:	4b15      	ldr	r3, [pc, #84]	; (1a2ec <prvTraceGetDTS+0x1dc>)
   1a298:	0018      	movs	r0, r3
   1a29a:	4b09      	ldr	r3, [pc, #36]	; (1a2c0 <prvTraceGetDTS+0x1b0>)
   1a29c:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1a29e:	4b14      	ldr	r3, [pc, #80]	; (1a2f0 <prvTraceGetDTS+0x1e0>)
   1a2a0:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1a2a2:	693b      	ldr	r3, [r7, #16]
   1a2a4:	b29b      	uxth	r3, r3
   1a2a6:	1dba      	adds	r2, r7, #6
   1a2a8:	8812      	ldrh	r2, [r2, #0]
   1a2aa:	4013      	ands	r3, r2
   1a2ac:	b29b      	uxth	r3, r3
}
   1a2ae:	0018      	movs	r0, r3
   1a2b0:	46bd      	mov	sp, r7
   1a2b2:	b006      	add	sp, #24
   1a2b4:	bdb0      	pop	{r4, r5, r7, pc}
   1a2b6:	46c0      	nop			; (mov r8, r8)
   1a2b8:	0000ffff 	.word	0x0000ffff
   1a2bc:	00038890 	.word	0x00038890
   1a2c0:	00019efd 	.word	0x00019efd
   1a2c4:	20000df4 	.word	0x20000df4
   1a2c8:	20000d50 	.word	0x20000d50
   1a2cc:	e000e018 	.word	0xe000e018
   1a2d0:	200055cc 	.word	0x200055cc
   1a2d4:	0002a315 	.word	0x0002a315
   1a2d8:	0001a2f5 	.word	0x0001a2f5
   1a2dc:	20000e00 	.word	0x20000e00
   1a2e0:	00032f89 	.word	0x00032f89
   1a2e4:	00033095 	.word	0x00033095
   1a2e8:	00019ab5 	.word	0x00019ab5
   1a2ec:	000388d0 	.word	0x000388d0
   1a2f0:	0001a0b9 	.word	0x0001a0b9

0001a2f4 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1a2f4:	b580      	push	{r7, lr}
   1a2f6:	b084      	sub	sp, #16
   1a2f8:	af00      	add	r7, sp, #0
   1a2fa:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1a2fc:	2300      	movs	r3, #0
   1a2fe:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1a300:	2300      	movs	r3, #0
   1a302:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1a304:	4b2d      	ldr	r3, [pc, #180]	; (1a3bc <prvTracePortGetTimeStamp+0xc8>)
   1a306:	681b      	ldr	r3, [r3, #0]
   1a308:	2b01      	cmp	r3, #1
   1a30a:	d107      	bne.n	1a31c <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1a30c:	687b      	ldr	r3, [r7, #4]
   1a30e:	2b00      	cmp	r3, #0
   1a310:	d04f      	beq.n	1a3b2 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1a312:	4b2b      	ldr	r3, [pc, #172]	; (1a3c0 <prvTracePortGetTimeStamp+0xcc>)
   1a314:	681a      	ldr	r2, [r3, #0]
   1a316:	687b      	ldr	r3, [r7, #4]
   1a318:	601a      	str	r2, [r3, #0]
		return;
   1a31a:	e04a      	b.n	1a3b2 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1a31c:	4b29      	ldr	r3, [pc, #164]	; (1a3c4 <prvTracePortGetTimeStamp+0xd0>)
   1a31e:	681a      	ldr	r2, [r3, #0]
   1a320:	4b29      	ldr	r3, [pc, #164]	; (1a3c8 <prvTracePortGetTimeStamp+0xd4>)
   1a322:	681b      	ldr	r3, [r3, #0]
   1a324:	1ad3      	subs	r3, r2, r3
   1a326:	3301      	adds	r3, #1
   1a328:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1a32a:	4b28      	ldr	r3, [pc, #160]	; (1a3cc <prvTracePortGetTimeStamp+0xd8>)
   1a32c:	681a      	ldr	r2, [r3, #0]
   1a32e:	4b28      	ldr	r3, [pc, #160]	; (1a3d0 <prvTracePortGetTimeStamp+0xdc>)
   1a330:	681b      	ldr	r3, [r3, #0]
   1a332:	1ad3      	subs	r3, r2, r3
   1a334:	3b01      	subs	r3, #1
   1a336:	2b00      	cmp	r3, #0
   1a338:	db03      	blt.n	1a342 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1a33a:	4b24      	ldr	r3, [pc, #144]	; (1a3cc <prvTracePortGetTimeStamp+0xd8>)
   1a33c:	681b      	ldr	r3, [r3, #0]
   1a33e:	60fb      	str	r3, [r7, #12]
   1a340:	e002      	b.n	1a348 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1a342:	4b23      	ldr	r3, [pc, #140]	; (1a3d0 <prvTracePortGetTimeStamp+0xdc>)
   1a344:	681b      	ldr	r3, [r3, #0]
   1a346:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1a348:	4b20      	ldr	r3, [pc, #128]	; (1a3cc <prvTracePortGetTimeStamp+0xd8>)
   1a34a:	681b      	ldr	r3, [r3, #0]
   1a34c:	68fa      	ldr	r2, [r7, #12]
   1a34e:	429a      	cmp	r2, r3
   1a350:	d107      	bne.n	1a362 <prvTracePortGetTimeStamp+0x6e>
   1a352:	4b20      	ldr	r3, [pc, #128]	; (1a3d4 <prvTracePortGetTimeStamp+0xe0>)
   1a354:	681b      	ldr	r3, [r3, #0]
   1a356:	68ba      	ldr	r2, [r7, #8]
   1a358:	429a      	cmp	r2, r3
   1a35a:	d202      	bcs.n	1a362 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1a35c:	68fb      	ldr	r3, [r7, #12]
   1a35e:	3301      	adds	r3, #1
   1a360:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1a362:	687b      	ldr	r3, [r7, #4]
   1a364:	2b00      	cmp	r3, #0
   1a366:	d016      	beq.n	1a396 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1a368:	4b16      	ldr	r3, [pc, #88]	; (1a3c4 <prvTracePortGetTimeStamp+0xd0>)
   1a36a:	681b      	ldr	r3, [r3, #0]
   1a36c:	3301      	adds	r3, #1
   1a36e:	089b      	lsrs	r3, r3, #2
   1a370:	68fa      	ldr	r2, [r7, #12]
   1a372:	435a      	muls	r2, r3
   1a374:	4b12      	ldr	r3, [pc, #72]	; (1a3c0 <prvTracePortGetTimeStamp+0xcc>)
   1a376:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1a378:	4b12      	ldr	r3, [pc, #72]	; (1a3c4 <prvTracePortGetTimeStamp+0xd0>)
   1a37a:	681b      	ldr	r3, [r3, #0]
   1a37c:	3301      	adds	r3, #1
   1a37e:	2203      	movs	r2, #3
   1a380:	4013      	ands	r3, r2
   1a382:	68fa      	ldr	r2, [r7, #12]
   1a384:	435a      	muls	r2, r3
   1a386:	68bb      	ldr	r3, [r7, #8]
   1a388:	18d3      	adds	r3, r2, r3
   1a38a:	089a      	lsrs	r2, r3, #2
   1a38c:	4b0c      	ldr	r3, [pc, #48]	; (1a3c0 <prvTracePortGetTimeStamp+0xcc>)
   1a38e:	681b      	ldr	r3, [r3, #0]
   1a390:	18d2      	adds	r2, r2, r3
   1a392:	4b0b      	ldr	r3, [pc, #44]	; (1a3c0 <prvTracePortGetTimeStamp+0xcc>)
   1a394:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1a396:	4b0d      	ldr	r3, [pc, #52]	; (1a3cc <prvTracePortGetTimeStamp+0xd8>)
   1a398:	68fa      	ldr	r2, [r7, #12]
   1a39a:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1a39c:	687b      	ldr	r3, [r7, #4]
   1a39e:	2b00      	cmp	r3, #0
   1a3a0:	d003      	beq.n	1a3aa <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1a3a2:	4b07      	ldr	r3, [pc, #28]	; (1a3c0 <prvTracePortGetTimeStamp+0xcc>)
   1a3a4:	681a      	ldr	r2, [r3, #0]
   1a3a6:	687b      	ldr	r3, [r7, #4]
   1a3a8:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1a3aa:	4b0a      	ldr	r3, [pc, #40]	; (1a3d4 <prvTracePortGetTimeStamp+0xe0>)
   1a3ac:	68ba      	ldr	r2, [r7, #8]
   1a3ae:	601a      	str	r2, [r3, #0]
   1a3b0:	e000      	b.n	1a3b4 <prvTracePortGetTimeStamp+0xc0>
		return;
   1a3b2:	46c0      	nop			; (mov r8, r8)
}
   1a3b4:	46bd      	mov	sp, r7
   1a3b6:	b004      	add	sp, #16
   1a3b8:	bd80      	pop	{r7, pc}
   1a3ba:	46c0      	nop			; (mov r8, r8)
   1a3bc:	20000d40 	.word	0x20000d40
   1a3c0:	20000d44 	.word	0x20000d44
   1a3c4:	e000e014 	.word	0xe000e014
   1a3c8:	e000e018 	.word	0xe000e018
   1a3cc:	20000e04 	.word	0x20000e04
   1a3d0:	20000d3c 	.word	0x20000d3c
   1a3d4:	20000e08 	.word	0x20000e08

0001a3d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1a3d8:	b580      	push	{r7, lr}
   1a3da:	b082      	sub	sp, #8
   1a3dc:	af00      	add	r7, sp, #0
   1a3de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a3e0:	687b      	ldr	r3, [r7, #4]
   1a3e2:	3308      	adds	r3, #8
   1a3e4:	001a      	movs	r2, r3
   1a3e6:	687b      	ldr	r3, [r7, #4]
   1a3e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1a3ea:	687b      	ldr	r3, [r7, #4]
   1a3ec:	2201      	movs	r2, #1
   1a3ee:	4252      	negs	r2, r2
   1a3f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a3f2:	687b      	ldr	r3, [r7, #4]
   1a3f4:	3308      	adds	r3, #8
   1a3f6:	001a      	movs	r2, r3
   1a3f8:	687b      	ldr	r3, [r7, #4]
   1a3fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a3fc:	687b      	ldr	r3, [r7, #4]
   1a3fe:	3308      	adds	r3, #8
   1a400:	001a      	movs	r2, r3
   1a402:	687b      	ldr	r3, [r7, #4]
   1a404:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1a406:	687b      	ldr	r3, [r7, #4]
   1a408:	2200      	movs	r2, #0
   1a40a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1a40c:	46c0      	nop			; (mov r8, r8)
   1a40e:	46bd      	mov	sp, r7
   1a410:	b002      	add	sp, #8
   1a412:	bd80      	pop	{r7, pc}

0001a414 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1a414:	b580      	push	{r7, lr}
   1a416:	b082      	sub	sp, #8
   1a418:	af00      	add	r7, sp, #0
   1a41a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1a41c:	687b      	ldr	r3, [r7, #4]
   1a41e:	2200      	movs	r2, #0
   1a420:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1a422:	46c0      	nop			; (mov r8, r8)
   1a424:	46bd      	mov	sp, r7
   1a426:	b002      	add	sp, #8
   1a428:	bd80      	pop	{r7, pc}

0001a42a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1a42a:	b580      	push	{r7, lr}
   1a42c:	b084      	sub	sp, #16
   1a42e:	af00      	add	r7, sp, #0
   1a430:	6078      	str	r0, [r7, #4]
   1a432:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1a434:	687b      	ldr	r3, [r7, #4]
   1a436:	685b      	ldr	r3, [r3, #4]
   1a438:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1a43a:	683b      	ldr	r3, [r7, #0]
   1a43c:	68fa      	ldr	r2, [r7, #12]
   1a43e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1a440:	68fb      	ldr	r3, [r7, #12]
   1a442:	689a      	ldr	r2, [r3, #8]
   1a444:	683b      	ldr	r3, [r7, #0]
   1a446:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1a448:	68fb      	ldr	r3, [r7, #12]
   1a44a:	689b      	ldr	r3, [r3, #8]
   1a44c:	683a      	ldr	r2, [r7, #0]
   1a44e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1a450:	68fb      	ldr	r3, [r7, #12]
   1a452:	683a      	ldr	r2, [r7, #0]
   1a454:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1a456:	683b      	ldr	r3, [r7, #0]
   1a458:	687a      	ldr	r2, [r7, #4]
   1a45a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1a45c:	687b      	ldr	r3, [r7, #4]
   1a45e:	681b      	ldr	r3, [r3, #0]
   1a460:	1c5a      	adds	r2, r3, #1
   1a462:	687b      	ldr	r3, [r7, #4]
   1a464:	601a      	str	r2, [r3, #0]
}
   1a466:	46c0      	nop			; (mov r8, r8)
   1a468:	46bd      	mov	sp, r7
   1a46a:	b004      	add	sp, #16
   1a46c:	bd80      	pop	{r7, pc}

0001a46e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1a46e:	b580      	push	{r7, lr}
   1a470:	b084      	sub	sp, #16
   1a472:	af00      	add	r7, sp, #0
   1a474:	6078      	str	r0, [r7, #4]
   1a476:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1a478:	683b      	ldr	r3, [r7, #0]
   1a47a:	681b      	ldr	r3, [r3, #0]
   1a47c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1a47e:	68bb      	ldr	r3, [r7, #8]
   1a480:	3301      	adds	r3, #1
   1a482:	d103      	bne.n	1a48c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1a484:	687b      	ldr	r3, [r7, #4]
   1a486:	691b      	ldr	r3, [r3, #16]
   1a488:	60fb      	str	r3, [r7, #12]
   1a48a:	e00c      	b.n	1a4a6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a48c:	687b      	ldr	r3, [r7, #4]
   1a48e:	3308      	adds	r3, #8
   1a490:	60fb      	str	r3, [r7, #12]
   1a492:	e002      	b.n	1a49a <vListInsert+0x2c>
   1a494:	68fb      	ldr	r3, [r7, #12]
   1a496:	685b      	ldr	r3, [r3, #4]
   1a498:	60fb      	str	r3, [r7, #12]
   1a49a:	68fb      	ldr	r3, [r7, #12]
   1a49c:	685b      	ldr	r3, [r3, #4]
   1a49e:	681a      	ldr	r2, [r3, #0]
   1a4a0:	68bb      	ldr	r3, [r7, #8]
   1a4a2:	429a      	cmp	r2, r3
   1a4a4:	d9f6      	bls.n	1a494 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1a4a6:	68fb      	ldr	r3, [r7, #12]
   1a4a8:	685a      	ldr	r2, [r3, #4]
   1a4aa:	683b      	ldr	r3, [r7, #0]
   1a4ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1a4ae:	683b      	ldr	r3, [r7, #0]
   1a4b0:	685b      	ldr	r3, [r3, #4]
   1a4b2:	683a      	ldr	r2, [r7, #0]
   1a4b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1a4b6:	683b      	ldr	r3, [r7, #0]
   1a4b8:	68fa      	ldr	r2, [r7, #12]
   1a4ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1a4bc:	68fb      	ldr	r3, [r7, #12]
   1a4be:	683a      	ldr	r2, [r7, #0]
   1a4c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1a4c2:	683b      	ldr	r3, [r7, #0]
   1a4c4:	687a      	ldr	r2, [r7, #4]
   1a4c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1a4c8:	687b      	ldr	r3, [r7, #4]
   1a4ca:	681b      	ldr	r3, [r3, #0]
   1a4cc:	1c5a      	adds	r2, r3, #1
   1a4ce:	687b      	ldr	r3, [r7, #4]
   1a4d0:	601a      	str	r2, [r3, #0]
}
   1a4d2:	46c0      	nop			; (mov r8, r8)
   1a4d4:	46bd      	mov	sp, r7
   1a4d6:	b004      	add	sp, #16
   1a4d8:	bd80      	pop	{r7, pc}

0001a4da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1a4da:	b580      	push	{r7, lr}
   1a4dc:	b084      	sub	sp, #16
   1a4de:	af00      	add	r7, sp, #0
   1a4e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1a4e2:	687b      	ldr	r3, [r7, #4]
   1a4e4:	691b      	ldr	r3, [r3, #16]
   1a4e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1a4e8:	687b      	ldr	r3, [r7, #4]
   1a4ea:	685b      	ldr	r3, [r3, #4]
   1a4ec:	687a      	ldr	r2, [r7, #4]
   1a4ee:	6892      	ldr	r2, [r2, #8]
   1a4f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1a4f2:	687b      	ldr	r3, [r7, #4]
   1a4f4:	689b      	ldr	r3, [r3, #8]
   1a4f6:	687a      	ldr	r2, [r7, #4]
   1a4f8:	6852      	ldr	r2, [r2, #4]
   1a4fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1a4fc:	68fb      	ldr	r3, [r7, #12]
   1a4fe:	685a      	ldr	r2, [r3, #4]
   1a500:	687b      	ldr	r3, [r7, #4]
   1a502:	429a      	cmp	r2, r3
   1a504:	d103      	bne.n	1a50e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1a506:	687b      	ldr	r3, [r7, #4]
   1a508:	689a      	ldr	r2, [r3, #8]
   1a50a:	68fb      	ldr	r3, [r7, #12]
   1a50c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1a50e:	687b      	ldr	r3, [r7, #4]
   1a510:	2200      	movs	r2, #0
   1a512:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1a514:	68fb      	ldr	r3, [r7, #12]
   1a516:	681b      	ldr	r3, [r3, #0]
   1a518:	1e5a      	subs	r2, r3, #1
   1a51a:	68fb      	ldr	r3, [r7, #12]
   1a51c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1a51e:	68fb      	ldr	r3, [r7, #12]
   1a520:	681b      	ldr	r3, [r3, #0]
}
   1a522:	0018      	movs	r0, r3
   1a524:	46bd      	mov	sp, r7
   1a526:	b004      	add	sp, #16
   1a528:	bd80      	pop	{r7, pc}
	...

0001a52c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1a52c:	b580      	push	{r7, lr}
   1a52e:	b084      	sub	sp, #16
   1a530:	af00      	add	r7, sp, #0
   1a532:	60f8      	str	r0, [r7, #12]
   1a534:	60b9      	str	r1, [r7, #8]
   1a536:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1a538:	68fb      	ldr	r3, [r7, #12]
   1a53a:	3b04      	subs	r3, #4
   1a53c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1a53e:	68fb      	ldr	r3, [r7, #12]
   1a540:	2280      	movs	r2, #128	; 0x80
   1a542:	0452      	lsls	r2, r2, #17
   1a544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1a546:	68fb      	ldr	r3, [r7, #12]
   1a548:	3b04      	subs	r3, #4
   1a54a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1a54c:	68ba      	ldr	r2, [r7, #8]
   1a54e:	68fb      	ldr	r3, [r7, #12]
   1a550:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1a552:	68fb      	ldr	r3, [r7, #12]
   1a554:	3b04      	subs	r3, #4
   1a556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1a558:	4a08      	ldr	r2, [pc, #32]	; (1a57c <pxPortInitialiseStack+0x50>)
   1a55a:	68fb      	ldr	r3, [r7, #12]
   1a55c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1a55e:	68fb      	ldr	r3, [r7, #12]
   1a560:	3b14      	subs	r3, #20
   1a562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1a564:	687a      	ldr	r2, [r7, #4]
   1a566:	68fb      	ldr	r3, [r7, #12]
   1a568:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1a56a:	68fb      	ldr	r3, [r7, #12]
   1a56c:	3b20      	subs	r3, #32
   1a56e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1a570:	68fb      	ldr	r3, [r7, #12]
}
   1a572:	0018      	movs	r0, r3
   1a574:	46bd      	mov	sp, r7
   1a576:	b004      	add	sp, #16
   1a578:	bd80      	pop	{r7, pc}
   1a57a:	46c0      	nop			; (mov r8, r8)
   1a57c:	0001a581 	.word	0x0001a581

0001a580 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1a580:	b580      	push	{r7, lr}
   1a582:	b082      	sub	sp, #8
   1a584:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1a586:	2300      	movs	r3, #0
   1a588:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1a58a:	4b07      	ldr	r3, [pc, #28]	; (1a5a8 <prvTaskExitError+0x28>)
   1a58c:	681b      	ldr	r3, [r3, #0]
   1a58e:	3301      	adds	r3, #1
   1a590:	d001      	beq.n	1a596 <prvTaskExitError+0x16>
   1a592:	b672      	cpsid	i
   1a594:	e7fe      	b.n	1a594 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1a596:	b672      	cpsid	i
	while( ulDummy == 0 )
   1a598:	46c0      	nop			; (mov r8, r8)
   1a59a:	687b      	ldr	r3, [r7, #4]
   1a59c:	2b00      	cmp	r3, #0
   1a59e:	d0fc      	beq.n	1a59a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1a5a0:	46c0      	nop			; (mov r8, r8)
   1a5a2:	46bd      	mov	sp, r7
   1a5a4:	b002      	add	sp, #8
   1a5a6:	bd80      	pop	{r7, pc}
   1a5a8:	20000114 	.word	0x20000114

0001a5ac <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1a5ac:	b580      	push	{r7, lr}
   1a5ae:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1a5b0:	46c0      	nop			; (mov r8, r8)
   1a5b2:	46bd      	mov	sp, r7
   1a5b4:	bd80      	pop	{r7, pc}
	...

0001a5c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1a5c0:	4a0b      	ldr	r2, [pc, #44]	; (1a5f0 <pxCurrentTCBConst2>)
   1a5c2:	6813      	ldr	r3, [r2, #0]
   1a5c4:	6818      	ldr	r0, [r3, #0]
   1a5c6:	3020      	adds	r0, #32
   1a5c8:	f380 8809 	msr	PSP, r0
   1a5cc:	2002      	movs	r0, #2
   1a5ce:	f380 8814 	msr	CONTROL, r0
   1a5d2:	f3bf 8f6f 	isb	sy
   1a5d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1a5d8:	46ae      	mov	lr, r5
   1a5da:	bc08      	pop	{r3}
   1a5dc:	bc04      	pop	{r2}
   1a5de:	b662      	cpsie	i
   1a5e0:	4718      	bx	r3
   1a5e2:	46c0      	nop			; (mov r8, r8)
   1a5e4:	46c0      	nop			; (mov r8, r8)
   1a5e6:	46c0      	nop			; (mov r8, r8)
   1a5e8:	46c0      	nop			; (mov r8, r8)
   1a5ea:	46c0      	nop			; (mov r8, r8)
   1a5ec:	46c0      	nop			; (mov r8, r8)
   1a5ee:	46c0      	nop			; (mov r8, r8)

0001a5f0 <pxCurrentTCBConst2>:
   1a5f0:	200040dc 	.word	0x200040dc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1a5f4:	46c0      	nop			; (mov r8, r8)
   1a5f6:	46c0      	nop			; (mov r8, r8)

0001a5f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1a5f8:	b580      	push	{r7, lr}
   1a5fa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1a5fc:	4b0e      	ldr	r3, [pc, #56]	; (1a638 <xPortStartScheduler+0x40>)
   1a5fe:	4a0e      	ldr	r2, [pc, #56]	; (1a638 <xPortStartScheduler+0x40>)
   1a600:	6812      	ldr	r2, [r2, #0]
   1a602:	21ff      	movs	r1, #255	; 0xff
   1a604:	0409      	lsls	r1, r1, #16
   1a606:	430a      	orrs	r2, r1
   1a608:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1a60a:	4b0b      	ldr	r3, [pc, #44]	; (1a638 <xPortStartScheduler+0x40>)
   1a60c:	4a0a      	ldr	r2, [pc, #40]	; (1a638 <xPortStartScheduler+0x40>)
   1a60e:	6812      	ldr	r2, [r2, #0]
   1a610:	21ff      	movs	r1, #255	; 0xff
   1a612:	0609      	lsls	r1, r1, #24
   1a614:	430a      	orrs	r2, r1
   1a616:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1a618:	4b08      	ldr	r3, [pc, #32]	; (1a63c <xPortStartScheduler+0x44>)
   1a61a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1a61c:	4b08      	ldr	r3, [pc, #32]	; (1a640 <xPortStartScheduler+0x48>)
   1a61e:	2200      	movs	r2, #0
   1a620:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1a622:	4b08      	ldr	r3, [pc, #32]	; (1a644 <xPortStartScheduler+0x4c>)
   1a624:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1a626:	4b08      	ldr	r3, [pc, #32]	; (1a648 <xPortStartScheduler+0x50>)
   1a628:	4798      	blx	r3
	prvTaskExitError();
   1a62a:	4b08      	ldr	r3, [pc, #32]	; (1a64c <xPortStartScheduler+0x54>)
   1a62c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1a62e:	2300      	movs	r3, #0
}
   1a630:	0018      	movs	r0, r3
   1a632:	46bd      	mov	sp, r7
   1a634:	bd80      	pop	{r7, pc}
   1a636:	46c0      	nop			; (mov r8, r8)
   1a638:	e000ed20 	.word	0xe000ed20
   1a63c:	0001a759 	.word	0x0001a759
   1a640:	20000114 	.word	0x20000114
   1a644:	0001a5c1 	.word	0x0001a5c1
   1a648:	0001ccb5 	.word	0x0001ccb5
   1a64c:	0001a581 	.word	0x0001a581

0001a650 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1a650:	b580      	push	{r7, lr}
   1a652:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1a654:	4b03      	ldr	r3, [pc, #12]	; (1a664 <vPortYield+0x14>)
   1a656:	2280      	movs	r2, #128	; 0x80
   1a658:	0552      	lsls	r2, r2, #21
   1a65a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1a65c:	46c0      	nop			; (mov r8, r8)
   1a65e:	46bd      	mov	sp, r7
   1a660:	bd80      	pop	{r7, pc}
   1a662:	46c0      	nop			; (mov r8, r8)
   1a664:	e000ed04 	.word	0xe000ed04

0001a668 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1a668:	b580      	push	{r7, lr}
   1a66a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1a66c:	b672      	cpsid	i
    uxCriticalNesting++;
   1a66e:	4b06      	ldr	r3, [pc, #24]	; (1a688 <vPortEnterCritical+0x20>)
   1a670:	681b      	ldr	r3, [r3, #0]
   1a672:	1c5a      	adds	r2, r3, #1
   1a674:	4b04      	ldr	r3, [pc, #16]	; (1a688 <vPortEnterCritical+0x20>)
   1a676:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1a678:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1a67c:	f3bf 8f6f 	isb	sy
}
   1a680:	46c0      	nop			; (mov r8, r8)
   1a682:	46bd      	mov	sp, r7
   1a684:	bd80      	pop	{r7, pc}
   1a686:	46c0      	nop			; (mov r8, r8)
   1a688:	20000114 	.word	0x20000114

0001a68c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1a68c:	b580      	push	{r7, lr}
   1a68e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1a690:	4b09      	ldr	r3, [pc, #36]	; (1a6b8 <vPortExitCritical+0x2c>)
   1a692:	681b      	ldr	r3, [r3, #0]
   1a694:	2b00      	cmp	r3, #0
   1a696:	d101      	bne.n	1a69c <vPortExitCritical+0x10>
   1a698:	b672      	cpsid	i
   1a69a:	e7fe      	b.n	1a69a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1a69c:	4b06      	ldr	r3, [pc, #24]	; (1a6b8 <vPortExitCritical+0x2c>)
   1a69e:	681b      	ldr	r3, [r3, #0]
   1a6a0:	1e5a      	subs	r2, r3, #1
   1a6a2:	4b05      	ldr	r3, [pc, #20]	; (1a6b8 <vPortExitCritical+0x2c>)
   1a6a4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1a6a6:	4b04      	ldr	r3, [pc, #16]	; (1a6b8 <vPortExitCritical+0x2c>)
   1a6a8:	681b      	ldr	r3, [r3, #0]
   1a6aa:	2b00      	cmp	r3, #0
   1a6ac:	d100      	bne.n	1a6b0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1a6ae:	b662      	cpsie	i
    }
}
   1a6b0:	46c0      	nop			; (mov r8, r8)
   1a6b2:	46bd      	mov	sp, r7
   1a6b4:	bd80      	pop	{r7, pc}
   1a6b6:	46c0      	nop			; (mov r8, r8)
   1a6b8:	20000114 	.word	0x20000114

0001a6bc <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1a6bc:	f3ef 8010 	mrs	r0, PRIMASK
   1a6c0:	b672      	cpsid	i
   1a6c2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1a6c4:	46c0      	nop			; (mov r8, r8)
   1a6c6:	0018      	movs	r0, r3

0001a6c8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1a6c8:	f380 8810 	msr	PRIMASK, r0
   1a6cc:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1a6ce:	46c0      	nop			; (mov r8, r8)

0001a6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1a6d0:	f3ef 8009 	mrs	r0, PSP
   1a6d4:	4b0e      	ldr	r3, [pc, #56]	; (1a710 <pxCurrentTCBConst>)
   1a6d6:	681a      	ldr	r2, [r3, #0]
   1a6d8:	3820      	subs	r0, #32
   1a6da:	6010      	str	r0, [r2, #0]
   1a6dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1a6de:	4644      	mov	r4, r8
   1a6e0:	464d      	mov	r5, r9
   1a6e2:	4656      	mov	r6, sl
   1a6e4:	465f      	mov	r7, fp
   1a6e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1a6e8:	b508      	push	{r3, lr}
   1a6ea:	b672      	cpsid	i
   1a6ec:	f002 fae2 	bl	1ccb4 <vTaskSwitchContext>
   1a6f0:	b662      	cpsie	i
   1a6f2:	bc0c      	pop	{r2, r3}
   1a6f4:	6811      	ldr	r1, [r2, #0]
   1a6f6:	6808      	ldr	r0, [r1, #0]
   1a6f8:	3010      	adds	r0, #16
   1a6fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1a6fc:	46a0      	mov	r8, r4
   1a6fe:	46a9      	mov	r9, r5
   1a700:	46b2      	mov	sl, r6
   1a702:	46bb      	mov	fp, r7
   1a704:	f380 8809 	msr	PSP, r0
   1a708:	3820      	subs	r0, #32
   1a70a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1a70c:	4718      	bx	r3
   1a70e:	46c0      	nop			; (mov r8, r8)

0001a710 <pxCurrentTCBConst>:
   1a710:	200040dc 	.word	0x200040dc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1a714:	46c0      	nop			; (mov r8, r8)
   1a716:	46c0      	nop			; (mov r8, r8)

0001a718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1a718:	b580      	push	{r7, lr}
   1a71a:	b082      	sub	sp, #8
   1a71c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1a71e:	4b0a      	ldr	r3, [pc, #40]	; (1a748 <SysTick_Handler+0x30>)
   1a720:	4798      	blx	r3
   1a722:	0003      	movs	r3, r0
   1a724:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1a726:	4b09      	ldr	r3, [pc, #36]	; (1a74c <SysTick_Handler+0x34>)
   1a728:	4798      	blx	r3
   1a72a:	1e03      	subs	r3, r0, #0
   1a72c:	d003      	beq.n	1a736 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1a72e:	4b08      	ldr	r3, [pc, #32]	; (1a750 <SysTick_Handler+0x38>)
   1a730:	2280      	movs	r2, #128	; 0x80
   1a732:	0552      	lsls	r2, r2, #21
   1a734:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1a736:	687b      	ldr	r3, [r7, #4]
   1a738:	0018      	movs	r0, r3
   1a73a:	4b06      	ldr	r3, [pc, #24]	; (1a754 <SysTick_Handler+0x3c>)
   1a73c:	4798      	blx	r3
}
   1a73e:	46c0      	nop			; (mov r8, r8)
   1a740:	46bd      	mov	sp, r7
   1a742:	b002      	add	sp, #8
   1a744:	bd80      	pop	{r7, pc}
   1a746:	46c0      	nop			; (mov r8, r8)
   1a748:	0001a6bd 	.word	0x0001a6bd
   1a74c:	0001cac5 	.word	0x0001cac5
   1a750:	e000ed04 	.word	0xe000ed04
   1a754:	0001a6c9 	.word	0x0001a6c9

0001a758 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1a758:	b5b0      	push	{r4, r5, r7, lr}
   1a75a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1a75c:	4b0b      	ldr	r3, [pc, #44]	; (1a78c <prvSetupTimerInterrupt+0x34>)
   1a75e:	2200      	movs	r2, #0
   1a760:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1a762:	4b0b      	ldr	r3, [pc, #44]	; (1a790 <prvSetupTimerInterrupt+0x38>)
   1a764:	2200      	movs	r2, #0
   1a766:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1a768:	4c0a      	ldr	r4, [pc, #40]	; (1a794 <prvSetupTimerInterrupt+0x3c>)
   1a76a:	2000      	movs	r0, #0
   1a76c:	4b0a      	ldr	r3, [pc, #40]	; (1a798 <prvSetupTimerInterrupt+0x40>)
   1a76e:	4798      	blx	r3
   1a770:	4b0a      	ldr	r3, [pc, #40]	; (1a79c <prvSetupTimerInterrupt+0x44>)
   1a772:	22fa      	movs	r2, #250	; 0xfa
   1a774:	0091      	lsls	r1, r2, #2
   1a776:	4798      	blx	r3
   1a778:	0003      	movs	r3, r0
   1a77a:	3b01      	subs	r3, #1
   1a77c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1a77e:	4b03      	ldr	r3, [pc, #12]	; (1a78c <prvSetupTimerInterrupt+0x34>)
   1a780:	2207      	movs	r2, #7
   1a782:	601a      	str	r2, [r3, #0]
}
   1a784:	46c0      	nop			; (mov r8, r8)
   1a786:	46bd      	mov	sp, r7
   1a788:	bdb0      	pop	{r4, r5, r7, pc}
   1a78a:	46c0      	nop			; (mov r8, r8)
   1a78c:	e000e010 	.word	0xe000e010
   1a790:	e000e018 	.word	0xe000e018
   1a794:	e000e014 	.word	0xe000e014
   1a798:	0002a315 	.word	0x0002a315
   1a79c:	00032f89 	.word	0x00032f89

0001a7a0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1a7a0:	b580      	push	{r7, lr}
   1a7a2:	b084      	sub	sp, #16
   1a7a4:	af00      	add	r7, sp, #0
   1a7a6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1a7a8:	2300      	movs	r3, #0
   1a7aa:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1a7ac:	687b      	ldr	r3, [r7, #4]
   1a7ae:	2207      	movs	r2, #7
   1a7b0:	4013      	ands	r3, r2
   1a7b2:	d004      	beq.n	1a7be <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1a7b4:	687b      	ldr	r3, [r7, #4]
   1a7b6:	2207      	movs	r2, #7
   1a7b8:	4393      	bics	r3, r2
   1a7ba:	3308      	adds	r3, #8
   1a7bc:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1a7be:	4b21      	ldr	r3, [pc, #132]	; (1a844 <pvPortMalloc+0xa4>)
   1a7c0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1a7c2:	4b21      	ldr	r3, [pc, #132]	; (1a848 <pvPortMalloc+0xa8>)
   1a7c4:	681b      	ldr	r3, [r3, #0]
   1a7c6:	2b00      	cmp	r3, #0
   1a7c8:	d105      	bne.n	1a7d6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1a7ca:	4b20      	ldr	r3, [pc, #128]	; (1a84c <pvPortMalloc+0xac>)
   1a7cc:	2207      	movs	r2, #7
   1a7ce:	4393      	bics	r3, r2
   1a7d0:	001a      	movs	r2, r3
   1a7d2:	4b1d      	ldr	r3, [pc, #116]	; (1a848 <pvPortMalloc+0xa8>)
   1a7d4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a7d6:	4b1e      	ldr	r3, [pc, #120]	; (1a850 <pvPortMalloc+0xb0>)
   1a7d8:	681a      	ldr	r2, [r3, #0]
   1a7da:	687b      	ldr	r3, [r7, #4]
   1a7dc:	18d3      	adds	r3, r2, r3
   1a7de:	4a1d      	ldr	r2, [pc, #116]	; (1a854 <pvPortMalloc+0xb4>)
   1a7e0:	4293      	cmp	r3, r2
   1a7e2:	d813      	bhi.n	1a80c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1a7e4:	4b1a      	ldr	r3, [pc, #104]	; (1a850 <pvPortMalloc+0xb0>)
   1a7e6:	681a      	ldr	r2, [r3, #0]
   1a7e8:	687b      	ldr	r3, [r7, #4]
   1a7ea:	18d2      	adds	r2, r2, r3
   1a7ec:	4b18      	ldr	r3, [pc, #96]	; (1a850 <pvPortMalloc+0xb0>)
   1a7ee:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a7f0:	429a      	cmp	r2, r3
   1a7f2:	d90b      	bls.n	1a80c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1a7f4:	4b14      	ldr	r3, [pc, #80]	; (1a848 <pvPortMalloc+0xa8>)
   1a7f6:	681a      	ldr	r2, [r3, #0]
   1a7f8:	4b15      	ldr	r3, [pc, #84]	; (1a850 <pvPortMalloc+0xb0>)
   1a7fa:	681b      	ldr	r3, [r3, #0]
   1a7fc:	18d3      	adds	r3, r2, r3
   1a7fe:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1a800:	4b13      	ldr	r3, [pc, #76]	; (1a850 <pvPortMalloc+0xb0>)
   1a802:	681a      	ldr	r2, [r3, #0]
   1a804:	687b      	ldr	r3, [r7, #4]
   1a806:	18d2      	adds	r2, r2, r3
   1a808:	4b11      	ldr	r3, [pc, #68]	; (1a850 <pvPortMalloc+0xb0>)
   1a80a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1a80c:	68fb      	ldr	r3, [r7, #12]
   1a80e:	2b00      	cmp	r3, #0
   1a810:	d006      	beq.n	1a820 <pvPortMalloc+0x80>
   1a812:	68fb      	ldr	r3, [r7, #12]
   1a814:	687a      	ldr	r2, [r7, #4]
   1a816:	0019      	movs	r1, r3
   1a818:	2094      	movs	r0, #148	; 0x94
   1a81a:	4b0f      	ldr	r3, [pc, #60]	; (1a858 <pvPortMalloc+0xb8>)
   1a81c:	4798      	blx	r3
   1a81e:	e005      	b.n	1a82c <pvPortMalloc+0x8c>
   1a820:	68fb      	ldr	r3, [r7, #12]
   1a822:	687a      	ldr	r2, [r7, #4]
   1a824:	0019      	movs	r1, r3
   1a826:	20e8      	movs	r0, #232	; 0xe8
   1a828:	4b0b      	ldr	r3, [pc, #44]	; (1a858 <pvPortMalloc+0xb8>)
   1a82a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1a82c:	4b0b      	ldr	r3, [pc, #44]	; (1a85c <pvPortMalloc+0xbc>)
   1a82e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1a830:	68fb      	ldr	r3, [r7, #12]
   1a832:	2b00      	cmp	r3, #0
   1a834:	d101      	bne.n	1a83a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1a836:	4b0a      	ldr	r3, [pc, #40]	; (1a860 <pvPortMalloc+0xc0>)
   1a838:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1a83a:	68fb      	ldr	r3, [r7, #12]
}
   1a83c:	0018      	movs	r0, r3
   1a83e:	46bd      	mov	sp, r7
   1a840:	b004      	add	sp, #16
   1a842:	bd80      	pop	{r7, pc}
   1a844:	0001c921 	.word	0x0001c921
   1a848:	200040d8 	.word	0x200040d8
   1a84c:	20000e14 	.word	0x20000e14
   1a850:	200040d4 	.word	0x200040d4
   1a854:	000032bf 	.word	0x000032bf
   1a858:	00018f09 	.word	0x00018f09
   1a85c:	0001c939 	.word	0x0001c939
   1a860:	00032f59 	.word	0x00032f59

0001a864 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1a864:	b580      	push	{r7, lr}
   1a866:	b082      	sub	sp, #8
   1a868:	af00      	add	r7, sp, #0
   1a86a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1a86c:	687b      	ldr	r3, [r7, #4]
   1a86e:	2b00      	cmp	r3, #0
   1a870:	d001      	beq.n	1a876 <vPortFree+0x12>
   1a872:	b672      	cpsid	i
   1a874:	e7fe      	b.n	1a874 <vPortFree+0x10>
}
   1a876:	46c0      	nop			; (mov r8, r8)
   1a878:	46bd      	mov	sp, r7
   1a87a:	b002      	add	sp, #8
   1a87c:	bd80      	pop	{r7, pc}
	...

0001a880 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1a880:	b580      	push	{r7, lr}
   1a882:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1a884:	4b03      	ldr	r3, [pc, #12]	; (1a894 <xPortGetFreeHeapSize+0x14>)
   1a886:	681b      	ldr	r3, [r3, #0]
   1a888:	22cb      	movs	r2, #203	; 0xcb
   1a88a:	0192      	lsls	r2, r2, #6
   1a88c:	1ad3      	subs	r3, r2, r3
}
   1a88e:	0018      	movs	r0, r3
   1a890:	46bd      	mov	sp, r7
   1a892:	bd80      	pop	{r7, pc}
   1a894:	200040d4 	.word	0x200040d4

0001a898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1a898:	b580      	push	{r7, lr}
   1a89a:	b084      	sub	sp, #16
   1a89c:	af00      	add	r7, sp, #0
   1a89e:	6078      	str	r0, [r7, #4]
   1a8a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a8a2:	687b      	ldr	r3, [r7, #4]
   1a8a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1a8a6:	68fb      	ldr	r3, [r7, #12]
   1a8a8:	2b00      	cmp	r3, #0
   1a8aa:	d101      	bne.n	1a8b0 <xQueueGenericReset+0x18>
   1a8ac:	b672      	cpsid	i
   1a8ae:	e7fe      	b.n	1a8ae <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1a8b0:	4b23      	ldr	r3, [pc, #140]	; (1a940 <xQueueGenericReset+0xa8>)
   1a8b2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1a8b4:	68fb      	ldr	r3, [r7, #12]
   1a8b6:	681a      	ldr	r2, [r3, #0]
   1a8b8:	68fb      	ldr	r3, [r7, #12]
   1a8ba:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1a8bc:	68fb      	ldr	r3, [r7, #12]
   1a8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a8c0:	434b      	muls	r3, r1
   1a8c2:	18d2      	adds	r2, r2, r3
   1a8c4:	68fb      	ldr	r3, [r7, #12]
   1a8c6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1a8c8:	68fb      	ldr	r3, [r7, #12]
   1a8ca:	2200      	movs	r2, #0
   1a8cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1a8ce:	68fb      	ldr	r3, [r7, #12]
   1a8d0:	681a      	ldr	r2, [r3, #0]
   1a8d2:	68fb      	ldr	r3, [r7, #12]
   1a8d4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1a8d6:	68fb      	ldr	r3, [r7, #12]
   1a8d8:	681a      	ldr	r2, [r3, #0]
   1a8da:	68fb      	ldr	r3, [r7, #12]
   1a8dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a8de:	1e59      	subs	r1, r3, #1
   1a8e0:	68fb      	ldr	r3, [r7, #12]
   1a8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a8e4:	434b      	muls	r3, r1
   1a8e6:	18d2      	adds	r2, r2, r3
   1a8e8:	68fb      	ldr	r3, [r7, #12]
   1a8ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1a8ec:	68fb      	ldr	r3, [r7, #12]
   1a8ee:	2244      	movs	r2, #68	; 0x44
   1a8f0:	21ff      	movs	r1, #255	; 0xff
   1a8f2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1a8f4:	68fb      	ldr	r3, [r7, #12]
   1a8f6:	2245      	movs	r2, #69	; 0x45
   1a8f8:	21ff      	movs	r1, #255	; 0xff
   1a8fa:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1a8fc:	683b      	ldr	r3, [r7, #0]
   1a8fe:	2b00      	cmp	r3, #0
   1a900:	d10d      	bne.n	1a91e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a902:	68fb      	ldr	r3, [r7, #12]
   1a904:	691b      	ldr	r3, [r3, #16]
   1a906:	2b00      	cmp	r3, #0
   1a908:	d013      	beq.n	1a932 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a90a:	68fb      	ldr	r3, [r7, #12]
   1a90c:	3310      	adds	r3, #16
   1a90e:	0018      	movs	r0, r3
   1a910:	4b0c      	ldr	r3, [pc, #48]	; (1a944 <xQueueGenericReset+0xac>)
   1a912:	4798      	blx	r3
   1a914:	1e03      	subs	r3, r0, #0
   1a916:	d00c      	beq.n	1a932 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1a918:	4b0b      	ldr	r3, [pc, #44]	; (1a948 <xQueueGenericReset+0xb0>)
   1a91a:	4798      	blx	r3
   1a91c:	e009      	b.n	1a932 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1a91e:	68fb      	ldr	r3, [r7, #12]
   1a920:	3310      	adds	r3, #16
   1a922:	0018      	movs	r0, r3
   1a924:	4b09      	ldr	r3, [pc, #36]	; (1a94c <xQueueGenericReset+0xb4>)
   1a926:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1a928:	68fb      	ldr	r3, [r7, #12]
   1a92a:	3324      	adds	r3, #36	; 0x24
   1a92c:	0018      	movs	r0, r3
   1a92e:	4b07      	ldr	r3, [pc, #28]	; (1a94c <xQueueGenericReset+0xb4>)
   1a930:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1a932:	4b07      	ldr	r3, [pc, #28]	; (1a950 <xQueueGenericReset+0xb8>)
   1a934:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1a936:	2301      	movs	r3, #1
}
   1a938:	0018      	movs	r0, r3
   1a93a:	46bd      	mov	sp, r7
   1a93c:	b004      	add	sp, #16
   1a93e:	bd80      	pop	{r7, pc}
   1a940:	0001a669 	.word	0x0001a669
   1a944:	0001cef9 	.word	0x0001cef9
   1a948:	0001a651 	.word	0x0001a651
   1a94c:	0001a3d9 	.word	0x0001a3d9
   1a950:	0001a68d 	.word	0x0001a68d

0001a954 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1a954:	b590      	push	{r4, r7, lr}
   1a956:	b08b      	sub	sp, #44	; 0x2c
   1a958:	af02      	add	r7, sp, #8
   1a95a:	60f8      	str	r0, [r7, #12]
   1a95c:	60b9      	str	r1, [r7, #8]
   1a95e:	1dfb      	adds	r3, r7, #7
   1a960:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1a962:	68fb      	ldr	r3, [r7, #12]
   1a964:	2b00      	cmp	r3, #0
   1a966:	d101      	bne.n	1a96c <xQueueGenericCreate+0x18>
   1a968:	b672      	cpsid	i
   1a96a:	e7fe      	b.n	1a96a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1a96c:	68bb      	ldr	r3, [r7, #8]
   1a96e:	2b00      	cmp	r3, #0
   1a970:	d102      	bne.n	1a978 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1a972:	2300      	movs	r3, #0
   1a974:	61fb      	str	r3, [r7, #28]
   1a976:	e003      	b.n	1a980 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a978:	68fb      	ldr	r3, [r7, #12]
   1a97a:	68ba      	ldr	r2, [r7, #8]
   1a97c:	4353      	muls	r3, r2
   1a97e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1a980:	69fb      	ldr	r3, [r7, #28]
   1a982:	3354      	adds	r3, #84	; 0x54
   1a984:	0018      	movs	r0, r3
   1a986:	4b19      	ldr	r3, [pc, #100]	; (1a9ec <xQueueGenericCreate+0x98>)
   1a988:	4798      	blx	r3
   1a98a:	0003      	movs	r3, r0
   1a98c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1a98e:	69bb      	ldr	r3, [r7, #24]
   1a990:	2b00      	cmp	r3, #0
   1a992:	d00d      	beq.n	1a9b0 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1a994:	69bb      	ldr	r3, [r7, #24]
   1a996:	3354      	adds	r3, #84	; 0x54
   1a998:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1a99a:	1dfb      	adds	r3, r7, #7
   1a99c:	781c      	ldrb	r4, [r3, #0]
   1a99e:	697a      	ldr	r2, [r7, #20]
   1a9a0:	68b9      	ldr	r1, [r7, #8]
   1a9a2:	68f8      	ldr	r0, [r7, #12]
   1a9a4:	69bb      	ldr	r3, [r7, #24]
   1a9a6:	9300      	str	r3, [sp, #0]
   1a9a8:	0023      	movs	r3, r4
   1a9aa:	4c11      	ldr	r4, [pc, #68]	; (1a9f0 <xQueueGenericCreate+0x9c>)
   1a9ac:	47a0      	blx	r4
   1a9ae:	e017      	b.n	1a9e0 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1a9b0:	4b10      	ldr	r3, [pc, #64]	; (1a9f4 <xQueueGenericCreate+0xa0>)
   1a9b2:	4798      	blx	r3
   1a9b4:	0003      	movs	r3, r0
   1a9b6:	0018      	movs	r0, r3
   1a9b8:	4b0f      	ldr	r3, [pc, #60]	; (1a9f8 <xQueueGenericCreate+0xa4>)
   1a9ba:	4798      	blx	r3
   1a9bc:	0003      	movs	r3, r0
   1a9be:	001a      	movs	r2, r3
   1a9c0:	4b0e      	ldr	r3, [pc, #56]	; (1a9fc <xQueueGenericCreate+0xa8>)
   1a9c2:	881b      	ldrh	r3, [r3, #0]
   1a9c4:	4013      	ands	r3, r2
   1a9c6:	b29b      	uxth	r3, r3
   1a9c8:	2b00      	cmp	r3, #0
   1a9ca:	d009      	beq.n	1a9e0 <xQueueGenericCreate+0x8c>
   1a9cc:	1dfb      	adds	r3, r7, #7
   1a9ce:	781b      	ldrb	r3, [r3, #0]
   1a9d0:	4a0b      	ldr	r2, [pc, #44]	; (1aa00 <xQueueGenericCreate+0xac>)
   1a9d2:	5cd3      	ldrb	r3, [r2, r3]
   1a9d4:	3340      	adds	r3, #64	; 0x40
   1a9d6:	b2db      	uxtb	r3, r3
   1a9d8:	2100      	movs	r1, #0
   1a9da:	0018      	movs	r0, r3
   1a9dc:	4b09      	ldr	r3, [pc, #36]	; (1aa04 <xQueueGenericCreate+0xb0>)
   1a9de:	4798      	blx	r3
		}

		return pxNewQueue;
   1a9e0:	69bb      	ldr	r3, [r7, #24]
	}
   1a9e2:	0018      	movs	r0, r3
   1a9e4:	46bd      	mov	sp, r7
   1a9e6:	b009      	add	sp, #36	; 0x24
   1a9e8:	bd90      	pop	{r4, r7, pc}
   1a9ea:	46c0      	nop			; (mov r8, r8)
   1a9ec:	0001a7a1 	.word	0x0001a7a1
   1a9f0:	0001aa09 	.word	0x0001aa09
   1a9f4:	000188fd 	.word	0x000188fd
   1a9f8:	00018661 	.word	0x00018661
   1a9fc:	20000110 	.word	0x20000110
   1aa00:	20000104 	.word	0x20000104
   1aa04:	00019361 	.word	0x00019361

0001aa08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1aa08:	b5b0      	push	{r4, r5, r7, lr}
   1aa0a:	b084      	sub	sp, #16
   1aa0c:	af00      	add	r7, sp, #0
   1aa0e:	60f8      	str	r0, [r7, #12]
   1aa10:	60b9      	str	r1, [r7, #8]
   1aa12:	607a      	str	r2, [r7, #4]
   1aa14:	001a      	movs	r2, r3
   1aa16:	1cfb      	adds	r3, r7, #3
   1aa18:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1aa1a:	68bb      	ldr	r3, [r7, #8]
   1aa1c:	2b00      	cmp	r3, #0
   1aa1e:	d103      	bne.n	1aa28 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1aa20:	6a3b      	ldr	r3, [r7, #32]
   1aa22:	6a3a      	ldr	r2, [r7, #32]
   1aa24:	601a      	str	r2, [r3, #0]
   1aa26:	e002      	b.n	1aa2e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1aa28:	6a3b      	ldr	r3, [r7, #32]
   1aa2a:	687a      	ldr	r2, [r7, #4]
   1aa2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1aa2e:	6a3b      	ldr	r3, [r7, #32]
   1aa30:	68fa      	ldr	r2, [r7, #12]
   1aa32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1aa34:	6a3b      	ldr	r3, [r7, #32]
   1aa36:	68ba      	ldr	r2, [r7, #8]
   1aa38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1aa3a:	6a3b      	ldr	r3, [r7, #32]
   1aa3c:	2101      	movs	r1, #1
   1aa3e:	0018      	movs	r0, r3
   1aa40:	4b41      	ldr	r3, [pc, #260]	; (1ab48 <prvInitialiseNewQueue+0x140>)
   1aa42:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1aa44:	6a3b      	ldr	r3, [r7, #32]
   1aa46:	1cfa      	adds	r2, r7, #3
   1aa48:	2150      	movs	r1, #80	; 0x50
   1aa4a:	7812      	ldrb	r2, [r2, #0]
   1aa4c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1aa4e:	6a3b      	ldr	r3, [r7, #32]
   1aa50:	2200      	movs	r2, #0
   1aa52:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1aa54:	6a3b      	ldr	r3, [r7, #32]
   1aa56:	0018      	movs	r0, r3
   1aa58:	4b3c      	ldr	r3, [pc, #240]	; (1ab4c <prvInitialiseNewQueue+0x144>)
   1aa5a:	4798      	blx	r3
   1aa5c:	0003      	movs	r3, r0
   1aa5e:	001a      	movs	r2, r3
   1aa60:	4b3b      	ldr	r3, [pc, #236]	; (1ab50 <prvInitialiseNewQueue+0x148>)
   1aa62:	5c9b      	ldrb	r3, [r3, r2]
   1aa64:	0018      	movs	r0, r3
   1aa66:	4b3b      	ldr	r3, [pc, #236]	; (1ab54 <prvInitialiseNewQueue+0x14c>)
   1aa68:	4798      	blx	r3
   1aa6a:	0003      	movs	r3, r0
   1aa6c:	b29a      	uxth	r2, r3
   1aa6e:	6a3b      	ldr	r3, [r7, #32]
   1aa70:	0011      	movs	r1, r2
   1aa72:	0018      	movs	r0, r3
   1aa74:	4b38      	ldr	r3, [pc, #224]	; (1ab58 <prvInitialiseNewQueue+0x150>)
   1aa76:	4798      	blx	r3
   1aa78:	4b38      	ldr	r3, [pc, #224]	; (1ab5c <prvInitialiseNewQueue+0x154>)
   1aa7a:	881a      	ldrh	r2, [r3, #0]
   1aa7c:	6a3b      	ldr	r3, [r7, #32]
   1aa7e:	0011      	movs	r1, r2
   1aa80:	0018      	movs	r0, r3
   1aa82:	4b37      	ldr	r3, [pc, #220]	; (1ab60 <prvInitialiseNewQueue+0x158>)
   1aa84:	4798      	blx	r3
   1aa86:	6a3b      	ldr	r3, [r7, #32]
   1aa88:	0018      	movs	r0, r3
   1aa8a:	4b30      	ldr	r3, [pc, #192]	; (1ab4c <prvInitialiseNewQueue+0x144>)
   1aa8c:	4798      	blx	r3
   1aa8e:	0003      	movs	r3, r0
   1aa90:	001a      	movs	r2, r3
   1aa92:	4b2f      	ldr	r3, [pc, #188]	; (1ab50 <prvInitialiseNewQueue+0x148>)
   1aa94:	5c9c      	ldrb	r4, [r3, r2]
   1aa96:	6a3b      	ldr	r3, [r7, #32]
   1aa98:	0018      	movs	r0, r3
   1aa9a:	4b32      	ldr	r3, [pc, #200]	; (1ab64 <prvInitialiseNewQueue+0x15c>)
   1aa9c:	4798      	blx	r3
   1aa9e:	0003      	movs	r3, r0
   1aaa0:	b2db      	uxtb	r3, r3
   1aaa2:	0019      	movs	r1, r3
   1aaa4:	0020      	movs	r0, r4
   1aaa6:	4b30      	ldr	r3, [pc, #192]	; (1ab68 <prvInitialiseNewQueue+0x160>)
   1aaa8:	4798      	blx	r3
   1aaaa:	4b30      	ldr	r3, [pc, #192]	; (1ab6c <prvInitialiseNewQueue+0x164>)
   1aaac:	4798      	blx	r3
   1aaae:	0003      	movs	r3, r0
   1aab0:	0018      	movs	r0, r3
   1aab2:	4b2f      	ldr	r3, [pc, #188]	; (1ab70 <prvInitialiseNewQueue+0x168>)
   1aab4:	4798      	blx	r3
   1aab6:	0003      	movs	r3, r0
   1aab8:	001a      	movs	r2, r3
   1aaba:	4b2e      	ldr	r3, [pc, #184]	; (1ab74 <prvInitialiseNewQueue+0x16c>)
   1aabc:	881b      	ldrh	r3, [r3, #0]
   1aabe:	4013      	ands	r3, r2
   1aac0:	b29b      	uxth	r3, r3
   1aac2:	2b00      	cmp	r3, #0
   1aac4:	d029      	beq.n	1ab1a <prvInitialiseNewQueue+0x112>
   1aac6:	6a3b      	ldr	r3, [r7, #32]
   1aac8:	0018      	movs	r0, r3
   1aaca:	4b2b      	ldr	r3, [pc, #172]	; (1ab78 <prvInitialiseNewQueue+0x170>)
   1aacc:	4798      	blx	r3
   1aace:	0003      	movs	r3, r0
   1aad0:	001a      	movs	r2, r3
   1aad2:	4b28      	ldr	r3, [pc, #160]	; (1ab74 <prvInitialiseNewQueue+0x16c>)
   1aad4:	881b      	ldrh	r3, [r3, #0]
   1aad6:	4013      	ands	r3, r2
   1aad8:	b29b      	uxth	r3, r3
   1aada:	2b00      	cmp	r3, #0
   1aadc:	d01d      	beq.n	1ab1a <prvInitialiseNewQueue+0x112>
   1aade:	6a3b      	ldr	r3, [r7, #32]
   1aae0:	0018      	movs	r0, r3
   1aae2:	4b1a      	ldr	r3, [pc, #104]	; (1ab4c <prvInitialiseNewQueue+0x144>)
   1aae4:	4798      	blx	r3
   1aae6:	0003      	movs	r3, r0
   1aae8:	001a      	movs	r2, r3
   1aaea:	4b19      	ldr	r3, [pc, #100]	; (1ab50 <prvInitialiseNewQueue+0x148>)
   1aaec:	5c9b      	ldrb	r3, [r3, r2]
   1aaee:	3318      	adds	r3, #24
   1aaf0:	b2db      	uxtb	r3, r3
   1aaf2:	001d      	movs	r5, r3
   1aaf4:	6a3b      	ldr	r3, [r7, #32]
   1aaf6:	0018      	movs	r0, r3
   1aaf8:	4b14      	ldr	r3, [pc, #80]	; (1ab4c <prvInitialiseNewQueue+0x144>)
   1aafa:	4798      	blx	r3
   1aafc:	0003      	movs	r3, r0
   1aafe:	001a      	movs	r2, r3
   1ab00:	4b13      	ldr	r3, [pc, #76]	; (1ab50 <prvInitialiseNewQueue+0x148>)
   1ab02:	5c9c      	ldrb	r4, [r3, r2]
   1ab04:	6a3b      	ldr	r3, [r7, #32]
   1ab06:	0018      	movs	r0, r3
   1ab08:	4b16      	ldr	r3, [pc, #88]	; (1ab64 <prvInitialiseNewQueue+0x15c>)
   1ab0a:	4798      	blx	r3
   1ab0c:	0003      	movs	r3, r0
   1ab0e:	b2db      	uxtb	r3, r3
   1ab10:	001a      	movs	r2, r3
   1ab12:	0021      	movs	r1, r4
   1ab14:	0028      	movs	r0, r5
   1ab16:	4b19      	ldr	r3, [pc, #100]	; (1ab7c <prvInitialiseNewQueue+0x174>)
   1ab18:	4798      	blx	r3
   1ab1a:	6a3b      	ldr	r3, [r7, #32]
   1ab1c:	0018      	movs	r0, r3
   1ab1e:	4b0b      	ldr	r3, [pc, #44]	; (1ab4c <prvInitialiseNewQueue+0x144>)
   1ab20:	4798      	blx	r3
   1ab22:	0003      	movs	r3, r0
   1ab24:	001a      	movs	r2, r3
   1ab26:	4b0a      	ldr	r3, [pc, #40]	; (1ab50 <prvInitialiseNewQueue+0x148>)
   1ab28:	5c9c      	ldrb	r4, [r3, r2]
   1ab2a:	6a3b      	ldr	r3, [r7, #32]
   1ab2c:	0018      	movs	r0, r3
   1ab2e:	4b0d      	ldr	r3, [pc, #52]	; (1ab64 <prvInitialiseNewQueue+0x15c>)
   1ab30:	4798      	blx	r3
   1ab32:	0003      	movs	r3, r0
   1ab34:	b2db      	uxtb	r3, r3
   1ab36:	2200      	movs	r2, #0
   1ab38:	0019      	movs	r1, r3
   1ab3a:	0020      	movs	r0, r4
   1ab3c:	4b10      	ldr	r3, [pc, #64]	; (1ab80 <prvInitialiseNewQueue+0x178>)
   1ab3e:	4798      	blx	r3
}
   1ab40:	46c0      	nop			; (mov r8, r8)
   1ab42:	46bd      	mov	sp, r7
   1ab44:	b004      	add	sp, #16
   1ab46:	bdb0      	pop	{r4, r5, r7, pc}
   1ab48:	0001a899 	.word	0x0001a899
   1ab4c:	00018621 	.word	0x00018621
   1ab50:	20000104 	.word	0x20000104
   1ab54:	00019be1 	.word	0x00019be1
   1ab58:	00018745 	.word	0x00018745
   1ab5c:	20000112 	.word	0x20000112
   1ab60:	00018781 	.word	0x00018781
   1ab64:	00018701 	.word	0x00018701
   1ab68:	00019d79 	.word	0x00019d79
   1ab6c:	000188fd 	.word	0x000188fd
   1ab70:	00018661 	.word	0x00018661
   1ab74:	20000110 	.word	0x20000110
   1ab78:	00018721 	.word	0x00018721
   1ab7c:	00019059 	.word	0x00019059
   1ab80:	000196b5 	.word	0x000196b5

0001ab84 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1ab84:	b590      	push	{r4, r7, lr}
   1ab86:	b083      	sub	sp, #12
   1ab88:	af00      	add	r7, sp, #0
   1ab8a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1ab8c:	687b      	ldr	r3, [r7, #4]
   1ab8e:	2b00      	cmp	r3, #0
   1ab90:	d00e      	beq.n	1abb0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1ab92:	687b      	ldr	r3, [r7, #4]
   1ab94:	2200      	movs	r2, #0
   1ab96:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1ab98:	687b      	ldr	r3, [r7, #4]
   1ab9a:	2200      	movs	r2, #0
   1ab9c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1ab9e:	687b      	ldr	r3, [r7, #4]
   1aba0:	2200      	movs	r2, #0
   1aba2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1aba4:	6878      	ldr	r0, [r7, #4]
   1aba6:	2300      	movs	r3, #0
   1aba8:	2200      	movs	r2, #0
   1abaa:	2100      	movs	r1, #0
   1abac:	4c02      	ldr	r4, [pc, #8]	; (1abb8 <prvInitialiseMutex+0x34>)
   1abae:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1abb0:	46c0      	nop			; (mov r8, r8)
   1abb2:	46bd      	mov	sp, r7
   1abb4:	b003      	add	sp, #12
   1abb6:	bd90      	pop	{r4, r7, pc}
   1abb8:	0001abfd 	.word	0x0001abfd

0001abbc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1abbc:	b580      	push	{r7, lr}
   1abbe:	b086      	sub	sp, #24
   1abc0:	af00      	add	r7, sp, #0
   1abc2:	0002      	movs	r2, r0
   1abc4:	1dfb      	adds	r3, r7, #7
   1abc6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1abc8:	2301      	movs	r3, #1
   1abca:	617b      	str	r3, [r7, #20]
   1abcc:	2300      	movs	r3, #0
   1abce:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1abd0:	1dfb      	adds	r3, r7, #7
   1abd2:	781a      	ldrb	r2, [r3, #0]
   1abd4:	6939      	ldr	r1, [r7, #16]
   1abd6:	697b      	ldr	r3, [r7, #20]
   1abd8:	0018      	movs	r0, r3
   1abda:	4b06      	ldr	r3, [pc, #24]	; (1abf4 <xQueueCreateMutex+0x38>)
   1abdc:	4798      	blx	r3
   1abde:	0003      	movs	r3, r0
   1abe0:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1abe2:	68fb      	ldr	r3, [r7, #12]
   1abe4:	0018      	movs	r0, r3
   1abe6:	4b04      	ldr	r3, [pc, #16]	; (1abf8 <xQueueCreateMutex+0x3c>)
   1abe8:	4798      	blx	r3

		return pxNewQueue;
   1abea:	68fb      	ldr	r3, [r7, #12]
	}
   1abec:	0018      	movs	r0, r3
   1abee:	46bd      	mov	sp, r7
   1abf0:	b006      	add	sp, #24
   1abf2:	bd80      	pop	{r7, pc}
   1abf4:	0001a955 	.word	0x0001a955
   1abf8:	0001ab85 	.word	0x0001ab85

0001abfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1abfc:	b5b0      	push	{r4, r5, r7, lr}
   1abfe:	b08a      	sub	sp, #40	; 0x28
   1ac00:	af00      	add	r7, sp, #0
   1ac02:	60f8      	str	r0, [r7, #12]
   1ac04:	60b9      	str	r1, [r7, #8]
   1ac06:	607a      	str	r2, [r7, #4]
   1ac08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1ac0a:	2300      	movs	r3, #0
   1ac0c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ac0e:	68fb      	ldr	r3, [r7, #12]
   1ac10:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1ac12:	6a3b      	ldr	r3, [r7, #32]
   1ac14:	2b00      	cmp	r3, #0
   1ac16:	d101      	bne.n	1ac1c <xQueueGenericSend+0x20>
   1ac18:	b672      	cpsid	i
   1ac1a:	e7fe      	b.n	1ac1a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ac1c:	68bb      	ldr	r3, [r7, #8]
   1ac1e:	2b00      	cmp	r3, #0
   1ac20:	d103      	bne.n	1ac2a <xQueueGenericSend+0x2e>
   1ac22:	6a3b      	ldr	r3, [r7, #32]
   1ac24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ac26:	2b00      	cmp	r3, #0
   1ac28:	d101      	bne.n	1ac2e <xQueueGenericSend+0x32>
   1ac2a:	2301      	movs	r3, #1
   1ac2c:	e000      	b.n	1ac30 <xQueueGenericSend+0x34>
   1ac2e:	2300      	movs	r3, #0
   1ac30:	2b00      	cmp	r3, #0
   1ac32:	d101      	bne.n	1ac38 <xQueueGenericSend+0x3c>
   1ac34:	b672      	cpsid	i
   1ac36:	e7fe      	b.n	1ac36 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1ac38:	683b      	ldr	r3, [r7, #0]
   1ac3a:	2b02      	cmp	r3, #2
   1ac3c:	d103      	bne.n	1ac46 <xQueueGenericSend+0x4a>
   1ac3e:	6a3b      	ldr	r3, [r7, #32]
   1ac40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ac42:	2b01      	cmp	r3, #1
   1ac44:	d101      	bne.n	1ac4a <xQueueGenericSend+0x4e>
   1ac46:	2301      	movs	r3, #1
   1ac48:	e000      	b.n	1ac4c <xQueueGenericSend+0x50>
   1ac4a:	2300      	movs	r3, #0
   1ac4c:	2b00      	cmp	r3, #0
   1ac4e:	d101      	bne.n	1ac54 <xQueueGenericSend+0x58>
   1ac50:	b672      	cpsid	i
   1ac52:	e7fe      	b.n	1ac52 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ac54:	4bbc      	ldr	r3, [pc, #752]	; (1af48 <xQueueGenericSend+0x34c>)
   1ac56:	4798      	blx	r3
   1ac58:	1e03      	subs	r3, r0, #0
   1ac5a:	d102      	bne.n	1ac62 <xQueueGenericSend+0x66>
   1ac5c:	687b      	ldr	r3, [r7, #4]
   1ac5e:	2b00      	cmp	r3, #0
   1ac60:	d101      	bne.n	1ac66 <xQueueGenericSend+0x6a>
   1ac62:	2301      	movs	r3, #1
   1ac64:	e000      	b.n	1ac68 <xQueueGenericSend+0x6c>
   1ac66:	2300      	movs	r3, #0
   1ac68:	2b00      	cmp	r3, #0
   1ac6a:	d101      	bne.n	1ac70 <xQueueGenericSend+0x74>
   1ac6c:	b672      	cpsid	i
   1ac6e:	e7fe      	b.n	1ac6e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1ac70:	4bb6      	ldr	r3, [pc, #728]	; (1af4c <xQueueGenericSend+0x350>)
   1ac72:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1ac74:	6a3b      	ldr	r3, [r7, #32]
   1ac76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ac78:	6a3b      	ldr	r3, [r7, #32]
   1ac7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ac7c:	429a      	cmp	r2, r3
   1ac7e:	d303      	bcc.n	1ac88 <xQueueGenericSend+0x8c>
   1ac80:	683b      	ldr	r3, [r7, #0]
   1ac82:	2b02      	cmp	r3, #2
   1ac84:	d000      	beq.n	1ac88 <xQueueGenericSend+0x8c>
   1ac86:	e08e      	b.n	1ada6 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1ac88:	4bb1      	ldr	r3, [pc, #708]	; (1af50 <xQueueGenericSend+0x354>)
   1ac8a:	4798      	blx	r3
   1ac8c:	0003      	movs	r3, r0
   1ac8e:	0018      	movs	r0, r3
   1ac90:	4bb0      	ldr	r3, [pc, #704]	; (1af54 <xQueueGenericSend+0x358>)
   1ac92:	4798      	blx	r3
   1ac94:	0003      	movs	r3, r0
   1ac96:	001a      	movs	r2, r3
   1ac98:	4baf      	ldr	r3, [pc, #700]	; (1af58 <xQueueGenericSend+0x35c>)
   1ac9a:	881b      	ldrh	r3, [r3, #0]
   1ac9c:	4013      	ands	r3, r2
   1ac9e:	b29b      	uxth	r3, r3
   1aca0:	2b00      	cmp	r3, #0
   1aca2:	d02e      	beq.n	1ad02 <xQueueGenericSend+0x106>
   1aca4:	6a3b      	ldr	r3, [r7, #32]
   1aca6:	0018      	movs	r0, r3
   1aca8:	4bac      	ldr	r3, [pc, #688]	; (1af5c <xQueueGenericSend+0x360>)
   1acaa:	4798      	blx	r3
   1acac:	0003      	movs	r3, r0
   1acae:	001a      	movs	r2, r3
   1acb0:	4ba9      	ldr	r3, [pc, #676]	; (1af58 <xQueueGenericSend+0x35c>)
   1acb2:	881b      	ldrh	r3, [r3, #0]
   1acb4:	4013      	ands	r3, r2
   1acb6:	b29b      	uxth	r3, r3
   1acb8:	2b00      	cmp	r3, #0
   1acba:	d022      	beq.n	1ad02 <xQueueGenericSend+0x106>
   1acbc:	683b      	ldr	r3, [r7, #0]
   1acbe:	2b00      	cmp	r3, #0
   1acc0:	d10b      	bne.n	1acda <xQueueGenericSend+0xde>
   1acc2:	6a3b      	ldr	r3, [r7, #32]
   1acc4:	0018      	movs	r0, r3
   1acc6:	4ba6      	ldr	r3, [pc, #664]	; (1af60 <xQueueGenericSend+0x364>)
   1acc8:	4798      	blx	r3
   1acca:	0003      	movs	r3, r0
   1accc:	001a      	movs	r2, r3
   1acce:	4ba5      	ldr	r3, [pc, #660]	; (1af64 <xQueueGenericSend+0x368>)
   1acd0:	5c9b      	ldrb	r3, [r3, r2]
   1acd2:	3320      	adds	r3, #32
   1acd4:	b2db      	uxtb	r3, r3
   1acd6:	001d      	movs	r5, r3
   1acd8:	e000      	b.n	1acdc <xQueueGenericSend+0xe0>
   1acda:	2525      	movs	r5, #37	; 0x25
   1acdc:	6a3b      	ldr	r3, [r7, #32]
   1acde:	0018      	movs	r0, r3
   1ace0:	4b9f      	ldr	r3, [pc, #636]	; (1af60 <xQueueGenericSend+0x364>)
   1ace2:	4798      	blx	r3
   1ace4:	0003      	movs	r3, r0
   1ace6:	001a      	movs	r2, r3
   1ace8:	4b9e      	ldr	r3, [pc, #632]	; (1af64 <xQueueGenericSend+0x368>)
   1acea:	5c9c      	ldrb	r4, [r3, r2]
   1acec:	6a3b      	ldr	r3, [r7, #32]
   1acee:	0018      	movs	r0, r3
   1acf0:	4b9d      	ldr	r3, [pc, #628]	; (1af68 <xQueueGenericSend+0x36c>)
   1acf2:	4798      	blx	r3
   1acf4:	0003      	movs	r3, r0
   1acf6:	b2db      	uxtb	r3, r3
   1acf8:	001a      	movs	r2, r3
   1acfa:	0021      	movs	r1, r4
   1acfc:	0028      	movs	r0, r5
   1acfe:	4b9b      	ldr	r3, [pc, #620]	; (1af6c <xQueueGenericSend+0x370>)
   1ad00:	4798      	blx	r3
   1ad02:	6a3b      	ldr	r3, [r7, #32]
   1ad04:	0018      	movs	r0, r3
   1ad06:	4b96      	ldr	r3, [pc, #600]	; (1af60 <xQueueGenericSend+0x364>)
   1ad08:	4798      	blx	r3
   1ad0a:	0003      	movs	r3, r0
   1ad0c:	001a      	movs	r2, r3
   1ad0e:	4b95      	ldr	r3, [pc, #596]	; (1af64 <xQueueGenericSend+0x368>)
   1ad10:	5c9c      	ldrb	r4, [r3, r2]
   1ad12:	6a3b      	ldr	r3, [r7, #32]
   1ad14:	0018      	movs	r0, r3
   1ad16:	4b94      	ldr	r3, [pc, #592]	; (1af68 <xQueueGenericSend+0x36c>)
   1ad18:	4798      	blx	r3
   1ad1a:	0003      	movs	r3, r0
   1ad1c:	b2dd      	uxtb	r5, r3
   1ad1e:	6a3b      	ldr	r3, [r7, #32]
   1ad20:	0018      	movs	r0, r3
   1ad22:	4b8f      	ldr	r3, [pc, #572]	; (1af60 <xQueueGenericSend+0x364>)
   1ad24:	4798      	blx	r3
   1ad26:	0003      	movs	r3, r0
   1ad28:	001a      	movs	r2, r3
   1ad2a:	4b8e      	ldr	r3, [pc, #568]	; (1af64 <xQueueGenericSend+0x368>)
   1ad2c:	5c9b      	ldrb	r3, [r3, r2]
   1ad2e:	2b02      	cmp	r3, #2
   1ad30:	d005      	beq.n	1ad3e <xQueueGenericSend+0x142>
   1ad32:	6a3b      	ldr	r3, [r7, #32]
   1ad34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ad36:	b2db      	uxtb	r3, r3
   1ad38:	3301      	adds	r3, #1
   1ad3a:	b2db      	uxtb	r3, r3
   1ad3c:	e000      	b.n	1ad40 <xQueueGenericSend+0x144>
   1ad3e:	2300      	movs	r3, #0
   1ad40:	001a      	movs	r2, r3
   1ad42:	0029      	movs	r1, r5
   1ad44:	0020      	movs	r0, r4
   1ad46:	4b8a      	ldr	r3, [pc, #552]	; (1af70 <xQueueGenericSend+0x374>)
   1ad48:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1ad4a:	683a      	ldr	r2, [r7, #0]
   1ad4c:	68b9      	ldr	r1, [r7, #8]
   1ad4e:	6a3b      	ldr	r3, [r7, #32]
   1ad50:	0018      	movs	r0, r3
   1ad52:	4b88      	ldr	r3, [pc, #544]	; (1af74 <xQueueGenericSend+0x378>)
   1ad54:	4798      	blx	r3
   1ad56:	0003      	movs	r3, r0
   1ad58:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1ad5a:	6a3b      	ldr	r3, [r7, #32]
   1ad5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ad5e:	2b00      	cmp	r3, #0
   1ad60:	d00a      	beq.n	1ad78 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1ad62:	683a      	ldr	r2, [r7, #0]
   1ad64:	6a3b      	ldr	r3, [r7, #32]
   1ad66:	0011      	movs	r1, r2
   1ad68:	0018      	movs	r0, r3
   1ad6a:	4b83      	ldr	r3, [pc, #524]	; (1af78 <xQueueGenericSend+0x37c>)
   1ad6c:	4798      	blx	r3
   1ad6e:	1e03      	subs	r3, r0, #0
   1ad70:	d015      	beq.n	1ad9e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1ad72:	4b82      	ldr	r3, [pc, #520]	; (1af7c <xQueueGenericSend+0x380>)
   1ad74:	4798      	blx	r3
   1ad76:	e012      	b.n	1ad9e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ad78:	6a3b      	ldr	r3, [r7, #32]
   1ad7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ad7c:	2b00      	cmp	r3, #0
   1ad7e:	d009      	beq.n	1ad94 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ad80:	6a3b      	ldr	r3, [r7, #32]
   1ad82:	3324      	adds	r3, #36	; 0x24
   1ad84:	0018      	movs	r0, r3
   1ad86:	4b7e      	ldr	r3, [pc, #504]	; (1af80 <xQueueGenericSend+0x384>)
   1ad88:	4798      	blx	r3
   1ad8a:	1e03      	subs	r3, r0, #0
   1ad8c:	d007      	beq.n	1ad9e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1ad8e:	4b7b      	ldr	r3, [pc, #492]	; (1af7c <xQueueGenericSend+0x380>)
   1ad90:	4798      	blx	r3
   1ad92:	e004      	b.n	1ad9e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1ad94:	69fb      	ldr	r3, [r7, #28]
   1ad96:	2b00      	cmp	r3, #0
   1ad98:	d001      	beq.n	1ad9e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1ad9a:	4b78      	ldr	r3, [pc, #480]	; (1af7c <xQueueGenericSend+0x380>)
   1ad9c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1ad9e:	4b79      	ldr	r3, [pc, #484]	; (1af84 <xQueueGenericSend+0x388>)
   1ada0:	4798      	blx	r3
				return pdPASS;
   1ada2:	2301      	movs	r3, #1
   1ada4:	e142      	b.n	1b02c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1ada6:	687b      	ldr	r3, [r7, #4]
   1ada8:	2b00      	cmp	r3, #0
   1adaa:	d140      	bne.n	1ae2e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1adac:	4b75      	ldr	r3, [pc, #468]	; (1af84 <xQueueGenericSend+0x388>)
   1adae:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1adb0:	4b67      	ldr	r3, [pc, #412]	; (1af50 <xQueueGenericSend+0x354>)
   1adb2:	4798      	blx	r3
   1adb4:	0003      	movs	r3, r0
   1adb6:	0018      	movs	r0, r3
   1adb8:	4b66      	ldr	r3, [pc, #408]	; (1af54 <xQueueGenericSend+0x358>)
   1adba:	4798      	blx	r3
   1adbc:	0003      	movs	r3, r0
   1adbe:	001a      	movs	r2, r3
   1adc0:	4b65      	ldr	r3, [pc, #404]	; (1af58 <xQueueGenericSend+0x35c>)
   1adc2:	881b      	ldrh	r3, [r3, #0]
   1adc4:	4013      	ands	r3, r2
   1adc6:	b29b      	uxth	r3, r3
   1adc8:	2b00      	cmp	r3, #0
   1adca:	d02e      	beq.n	1ae2a <xQueueGenericSend+0x22e>
   1adcc:	6a3b      	ldr	r3, [r7, #32]
   1adce:	0018      	movs	r0, r3
   1add0:	4b62      	ldr	r3, [pc, #392]	; (1af5c <xQueueGenericSend+0x360>)
   1add2:	4798      	blx	r3
   1add4:	0003      	movs	r3, r0
   1add6:	001a      	movs	r2, r3
   1add8:	4b5f      	ldr	r3, [pc, #380]	; (1af58 <xQueueGenericSend+0x35c>)
   1adda:	881b      	ldrh	r3, [r3, #0]
   1addc:	4013      	ands	r3, r2
   1adde:	b29b      	uxth	r3, r3
   1ade0:	2b00      	cmp	r3, #0
   1ade2:	d022      	beq.n	1ae2a <xQueueGenericSend+0x22e>
   1ade4:	683b      	ldr	r3, [r7, #0]
   1ade6:	2b00      	cmp	r3, #0
   1ade8:	d10b      	bne.n	1ae02 <xQueueGenericSend+0x206>
   1adea:	6a3b      	ldr	r3, [r7, #32]
   1adec:	0018      	movs	r0, r3
   1adee:	4b5c      	ldr	r3, [pc, #368]	; (1af60 <xQueueGenericSend+0x364>)
   1adf0:	4798      	blx	r3
   1adf2:	0003      	movs	r3, r0
   1adf4:	001a      	movs	r2, r3
   1adf6:	4b5b      	ldr	r3, [pc, #364]	; (1af64 <xQueueGenericSend+0x368>)
   1adf8:	5c9b      	ldrb	r3, [r3, r2]
   1adfa:	3348      	adds	r3, #72	; 0x48
   1adfc:	b2db      	uxtb	r3, r3
   1adfe:	001d      	movs	r5, r3
   1ae00:	e000      	b.n	1ae04 <xQueueGenericSend+0x208>
   1ae02:	254d      	movs	r5, #77	; 0x4d
   1ae04:	6a3b      	ldr	r3, [r7, #32]
   1ae06:	0018      	movs	r0, r3
   1ae08:	4b55      	ldr	r3, [pc, #340]	; (1af60 <xQueueGenericSend+0x364>)
   1ae0a:	4798      	blx	r3
   1ae0c:	0003      	movs	r3, r0
   1ae0e:	001a      	movs	r2, r3
   1ae10:	4b54      	ldr	r3, [pc, #336]	; (1af64 <xQueueGenericSend+0x368>)
   1ae12:	5c9c      	ldrb	r4, [r3, r2]
   1ae14:	6a3b      	ldr	r3, [r7, #32]
   1ae16:	0018      	movs	r0, r3
   1ae18:	4b53      	ldr	r3, [pc, #332]	; (1af68 <xQueueGenericSend+0x36c>)
   1ae1a:	4798      	blx	r3
   1ae1c:	0003      	movs	r3, r0
   1ae1e:	b2db      	uxtb	r3, r3
   1ae20:	001a      	movs	r2, r3
   1ae22:	0021      	movs	r1, r4
   1ae24:	0028      	movs	r0, r5
   1ae26:	4b51      	ldr	r3, [pc, #324]	; (1af6c <xQueueGenericSend+0x370>)
   1ae28:	4798      	blx	r3
					return errQUEUE_FULL;
   1ae2a:	2300      	movs	r3, #0
   1ae2c:	e0fe      	b.n	1b02c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae30:	2b00      	cmp	r3, #0
   1ae32:	d106      	bne.n	1ae42 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1ae34:	2314      	movs	r3, #20
   1ae36:	18fb      	adds	r3, r7, r3
   1ae38:	0018      	movs	r0, r3
   1ae3a:	4b53      	ldr	r3, [pc, #332]	; (1af88 <xQueueGenericSend+0x38c>)
   1ae3c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1ae3e:	2301      	movs	r3, #1
   1ae40:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1ae42:	4b50      	ldr	r3, [pc, #320]	; (1af84 <xQueueGenericSend+0x388>)
   1ae44:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1ae46:	4b51      	ldr	r3, [pc, #324]	; (1af8c <xQueueGenericSend+0x390>)
   1ae48:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1ae4a:	4b40      	ldr	r3, [pc, #256]	; (1af4c <xQueueGenericSend+0x350>)
   1ae4c:	4798      	blx	r3
   1ae4e:	6a3b      	ldr	r3, [r7, #32]
   1ae50:	2244      	movs	r2, #68	; 0x44
   1ae52:	5c9b      	ldrb	r3, [r3, r2]
   1ae54:	b25b      	sxtb	r3, r3
   1ae56:	3301      	adds	r3, #1
   1ae58:	d103      	bne.n	1ae62 <xQueueGenericSend+0x266>
   1ae5a:	6a3b      	ldr	r3, [r7, #32]
   1ae5c:	2244      	movs	r2, #68	; 0x44
   1ae5e:	2100      	movs	r1, #0
   1ae60:	5499      	strb	r1, [r3, r2]
   1ae62:	6a3b      	ldr	r3, [r7, #32]
   1ae64:	2245      	movs	r2, #69	; 0x45
   1ae66:	5c9b      	ldrb	r3, [r3, r2]
   1ae68:	b25b      	sxtb	r3, r3
   1ae6a:	3301      	adds	r3, #1
   1ae6c:	d103      	bne.n	1ae76 <xQueueGenericSend+0x27a>
   1ae6e:	6a3b      	ldr	r3, [r7, #32]
   1ae70:	2245      	movs	r2, #69	; 0x45
   1ae72:	2100      	movs	r1, #0
   1ae74:	5499      	strb	r1, [r3, r2]
   1ae76:	4b43      	ldr	r3, [pc, #268]	; (1af84 <xQueueGenericSend+0x388>)
   1ae78:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1ae7a:	1d3a      	adds	r2, r7, #4
   1ae7c:	2314      	movs	r3, #20
   1ae7e:	18fb      	adds	r3, r7, r3
   1ae80:	0011      	movs	r1, r2
   1ae82:	0018      	movs	r0, r3
   1ae84:	4b42      	ldr	r3, [pc, #264]	; (1af90 <xQueueGenericSend+0x394>)
   1ae86:	4798      	blx	r3
   1ae88:	1e03      	subs	r3, r0, #0
   1ae8a:	d000      	beq.n	1ae8e <xQueueGenericSend+0x292>
   1ae8c:	e08a      	b.n	1afa4 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1ae8e:	6a3b      	ldr	r3, [r7, #32]
   1ae90:	0018      	movs	r0, r3
   1ae92:	4b40      	ldr	r3, [pc, #256]	; (1af94 <xQueueGenericSend+0x398>)
   1ae94:	4798      	blx	r3
   1ae96:	1e03      	subs	r3, r0, #0
   1ae98:	d04f      	beq.n	1af3a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1ae9a:	4b2d      	ldr	r3, [pc, #180]	; (1af50 <xQueueGenericSend+0x354>)
   1ae9c:	4798      	blx	r3
   1ae9e:	0003      	movs	r3, r0
   1aea0:	0018      	movs	r0, r3
   1aea2:	4b2c      	ldr	r3, [pc, #176]	; (1af54 <xQueueGenericSend+0x358>)
   1aea4:	4798      	blx	r3
   1aea6:	0003      	movs	r3, r0
   1aea8:	001a      	movs	r2, r3
   1aeaa:	4b2b      	ldr	r3, [pc, #172]	; (1af58 <xQueueGenericSend+0x35c>)
   1aeac:	881b      	ldrh	r3, [r3, #0]
   1aeae:	4013      	ands	r3, r2
   1aeb0:	b29b      	uxth	r3, r3
   1aeb2:	2b00      	cmp	r3, #0
   1aeb4:	d02e      	beq.n	1af14 <xQueueGenericSend+0x318>
   1aeb6:	6a3b      	ldr	r3, [r7, #32]
   1aeb8:	0018      	movs	r0, r3
   1aeba:	4b28      	ldr	r3, [pc, #160]	; (1af5c <xQueueGenericSend+0x360>)
   1aebc:	4798      	blx	r3
   1aebe:	0003      	movs	r3, r0
   1aec0:	001a      	movs	r2, r3
   1aec2:	4b25      	ldr	r3, [pc, #148]	; (1af58 <xQueueGenericSend+0x35c>)
   1aec4:	881b      	ldrh	r3, [r3, #0]
   1aec6:	4013      	ands	r3, r2
   1aec8:	b29b      	uxth	r3, r3
   1aeca:	2b00      	cmp	r3, #0
   1aecc:	d022      	beq.n	1af14 <xQueueGenericSend+0x318>
   1aece:	683b      	ldr	r3, [r7, #0]
   1aed0:	2b00      	cmp	r3, #0
   1aed2:	d10b      	bne.n	1aeec <xQueueGenericSend+0x2f0>
   1aed4:	6a3b      	ldr	r3, [r7, #32]
   1aed6:	0018      	movs	r0, r3
   1aed8:	4b21      	ldr	r3, [pc, #132]	; (1af60 <xQueueGenericSend+0x364>)
   1aeda:	4798      	blx	r3
   1aedc:	0003      	movs	r3, r0
   1aede:	001a      	movs	r2, r3
   1aee0:	4b20      	ldr	r3, [pc, #128]	; (1af64 <xQueueGenericSend+0x368>)
   1aee2:	5c9b      	ldrb	r3, [r3, r2]
   1aee4:	3370      	adds	r3, #112	; 0x70
   1aee6:	b2db      	uxtb	r3, r3
   1aee8:	001d      	movs	r5, r3
   1aeea:	e000      	b.n	1aeee <xQueueGenericSend+0x2f2>
   1aeec:	2575      	movs	r5, #117	; 0x75
   1aeee:	6a3b      	ldr	r3, [r7, #32]
   1aef0:	0018      	movs	r0, r3
   1aef2:	4b1b      	ldr	r3, [pc, #108]	; (1af60 <xQueueGenericSend+0x364>)
   1aef4:	4798      	blx	r3
   1aef6:	0003      	movs	r3, r0
   1aef8:	001a      	movs	r2, r3
   1aefa:	4b1a      	ldr	r3, [pc, #104]	; (1af64 <xQueueGenericSend+0x368>)
   1aefc:	5c9c      	ldrb	r4, [r3, r2]
   1aefe:	6a3b      	ldr	r3, [r7, #32]
   1af00:	0018      	movs	r0, r3
   1af02:	4b19      	ldr	r3, [pc, #100]	; (1af68 <xQueueGenericSend+0x36c>)
   1af04:	4798      	blx	r3
   1af06:	0003      	movs	r3, r0
   1af08:	b2db      	uxtb	r3, r3
   1af0a:	001a      	movs	r2, r3
   1af0c:	0021      	movs	r1, r4
   1af0e:	0028      	movs	r0, r5
   1af10:	4b16      	ldr	r3, [pc, #88]	; (1af6c <xQueueGenericSend+0x370>)
   1af12:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1af14:	6a3b      	ldr	r3, [r7, #32]
   1af16:	3310      	adds	r3, #16
   1af18:	687a      	ldr	r2, [r7, #4]
   1af1a:	0011      	movs	r1, r2
   1af1c:	0018      	movs	r0, r3
   1af1e:	4b1e      	ldr	r3, [pc, #120]	; (1af98 <xQueueGenericSend+0x39c>)
   1af20:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1af22:	6a3b      	ldr	r3, [r7, #32]
   1af24:	0018      	movs	r0, r3
   1af26:	4b1d      	ldr	r3, [pc, #116]	; (1af9c <xQueueGenericSend+0x3a0>)
   1af28:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1af2a:	4b1d      	ldr	r3, [pc, #116]	; (1afa0 <xQueueGenericSend+0x3a4>)
   1af2c:	4798      	blx	r3
   1af2e:	1e03      	subs	r3, r0, #0
   1af30:	d000      	beq.n	1af34 <xQueueGenericSend+0x338>
   1af32:	e69d      	b.n	1ac70 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1af34:	4b11      	ldr	r3, [pc, #68]	; (1af7c <xQueueGenericSend+0x380>)
   1af36:	4798      	blx	r3
   1af38:	e69a      	b.n	1ac70 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1af3a:	6a3b      	ldr	r3, [r7, #32]
   1af3c:	0018      	movs	r0, r3
   1af3e:	4b17      	ldr	r3, [pc, #92]	; (1af9c <xQueueGenericSend+0x3a0>)
   1af40:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1af42:	4b17      	ldr	r3, [pc, #92]	; (1afa0 <xQueueGenericSend+0x3a4>)
   1af44:	4798      	blx	r3
   1af46:	e693      	b.n	1ac70 <xQueueGenericSend+0x74>
   1af48:	0001d389 	.word	0x0001d389
   1af4c:	0001a669 	.word	0x0001a669
   1af50:	000188fd 	.word	0x000188fd
   1af54:	00018661 	.word	0x00018661
   1af58:	20000110 	.word	0x20000110
   1af5c:	00018721 	.word	0x00018721
   1af60:	00018621 	.word	0x00018621
   1af64:	20000104 	.word	0x20000104
   1af68:	00018701 	.word	0x00018701
   1af6c:	00019059 	.word	0x00019059
   1af70:	000196b5 	.word	0x000196b5
   1af74:	0001be35 	.word	0x0001be35
   1af78:	0001c139 	.word	0x0001c139
   1af7c:	0001a651 	.word	0x0001a651
   1af80:	0001cef9 	.word	0x0001cef9
   1af84:	0001a68d 	.word	0x0001a68d
   1af88:	0001d039 	.word	0x0001d039
   1af8c:	0001c921 	.word	0x0001c921
   1af90:	0001d061 	.word	0x0001d061
   1af94:	0001c089 	.word	0x0001c089
   1af98:	0001cdd5 	.word	0x0001cdd5
   1af9c:	0001bf65 	.word	0x0001bf65
   1afa0:	0001c939 	.word	0x0001c939
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1afa4:	6a3b      	ldr	r3, [r7, #32]
   1afa6:	0018      	movs	r0, r3
   1afa8:	4b22      	ldr	r3, [pc, #136]	; (1b034 <xQueueGenericSend+0x438>)
   1afaa:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1afac:	4b22      	ldr	r3, [pc, #136]	; (1b038 <xQueueGenericSend+0x43c>)
   1afae:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1afb0:	4b22      	ldr	r3, [pc, #136]	; (1b03c <xQueueGenericSend+0x440>)
   1afb2:	4798      	blx	r3
   1afb4:	0003      	movs	r3, r0
   1afb6:	0018      	movs	r0, r3
   1afb8:	4b21      	ldr	r3, [pc, #132]	; (1b040 <xQueueGenericSend+0x444>)
   1afba:	4798      	blx	r3
   1afbc:	0003      	movs	r3, r0
   1afbe:	001a      	movs	r2, r3
   1afc0:	4b20      	ldr	r3, [pc, #128]	; (1b044 <xQueueGenericSend+0x448>)
   1afc2:	881b      	ldrh	r3, [r3, #0]
   1afc4:	4013      	ands	r3, r2
   1afc6:	b29b      	uxth	r3, r3
   1afc8:	2b00      	cmp	r3, #0
   1afca:	d02e      	beq.n	1b02a <xQueueGenericSend+0x42e>
   1afcc:	6a3b      	ldr	r3, [r7, #32]
   1afce:	0018      	movs	r0, r3
   1afd0:	4b1d      	ldr	r3, [pc, #116]	; (1b048 <xQueueGenericSend+0x44c>)
   1afd2:	4798      	blx	r3
   1afd4:	0003      	movs	r3, r0
   1afd6:	001a      	movs	r2, r3
   1afd8:	4b1a      	ldr	r3, [pc, #104]	; (1b044 <xQueueGenericSend+0x448>)
   1afda:	881b      	ldrh	r3, [r3, #0]
   1afdc:	4013      	ands	r3, r2
   1afde:	b29b      	uxth	r3, r3
   1afe0:	2b00      	cmp	r3, #0
   1afe2:	d022      	beq.n	1b02a <xQueueGenericSend+0x42e>
   1afe4:	683b      	ldr	r3, [r7, #0]
   1afe6:	2b00      	cmp	r3, #0
   1afe8:	d10b      	bne.n	1b002 <xQueueGenericSend+0x406>
   1afea:	6a3b      	ldr	r3, [r7, #32]
   1afec:	0018      	movs	r0, r3
   1afee:	4b17      	ldr	r3, [pc, #92]	; (1b04c <xQueueGenericSend+0x450>)
   1aff0:	4798      	blx	r3
   1aff2:	0003      	movs	r3, r0
   1aff4:	001a      	movs	r2, r3
   1aff6:	4b16      	ldr	r3, [pc, #88]	; (1b050 <xQueueGenericSend+0x454>)
   1aff8:	5c9b      	ldrb	r3, [r3, r2]
   1affa:	3348      	adds	r3, #72	; 0x48
   1affc:	b2db      	uxtb	r3, r3
   1affe:	001d      	movs	r5, r3
   1b000:	e000      	b.n	1b004 <xQueueGenericSend+0x408>
   1b002:	254d      	movs	r5, #77	; 0x4d
   1b004:	6a3b      	ldr	r3, [r7, #32]
   1b006:	0018      	movs	r0, r3
   1b008:	4b10      	ldr	r3, [pc, #64]	; (1b04c <xQueueGenericSend+0x450>)
   1b00a:	4798      	blx	r3
   1b00c:	0003      	movs	r3, r0
   1b00e:	001a      	movs	r2, r3
   1b010:	4b0f      	ldr	r3, [pc, #60]	; (1b050 <xQueueGenericSend+0x454>)
   1b012:	5c9c      	ldrb	r4, [r3, r2]
   1b014:	6a3b      	ldr	r3, [r7, #32]
   1b016:	0018      	movs	r0, r3
   1b018:	4b0e      	ldr	r3, [pc, #56]	; (1b054 <xQueueGenericSend+0x458>)
   1b01a:	4798      	blx	r3
   1b01c:	0003      	movs	r3, r0
   1b01e:	b2db      	uxtb	r3, r3
   1b020:	001a      	movs	r2, r3
   1b022:	0021      	movs	r1, r4
   1b024:	0028      	movs	r0, r5
   1b026:	4b0c      	ldr	r3, [pc, #48]	; (1b058 <xQueueGenericSend+0x45c>)
   1b028:	4798      	blx	r3
			return errQUEUE_FULL;
   1b02a:	2300      	movs	r3, #0
		}
	}
}
   1b02c:	0018      	movs	r0, r3
   1b02e:	46bd      	mov	sp, r7
   1b030:	b00a      	add	sp, #40	; 0x28
   1b032:	bdb0      	pop	{r4, r5, r7, pc}
   1b034:	0001bf65 	.word	0x0001bf65
   1b038:	0001c939 	.word	0x0001c939
   1b03c:	000188fd 	.word	0x000188fd
   1b040:	00018661 	.word	0x00018661
   1b044:	20000110 	.word	0x20000110
   1b048:	00018721 	.word	0x00018721
   1b04c:	00018621 	.word	0x00018621
   1b050:	20000104 	.word	0x20000104
   1b054:	00018701 	.word	0x00018701
   1b058:	00019059 	.word	0x00019059

0001b05c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1b05c:	b5b0      	push	{r4, r5, r7, lr}
   1b05e:	b088      	sub	sp, #32
   1b060:	af00      	add	r7, sp, #0
   1b062:	60f8      	str	r0, [r7, #12]
   1b064:	60b9      	str	r1, [r7, #8]
   1b066:	607a      	str	r2, [r7, #4]
   1b068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b06a:	68fb      	ldr	r3, [r7, #12]
   1b06c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1b06e:	69bb      	ldr	r3, [r7, #24]
   1b070:	2b00      	cmp	r3, #0
   1b072:	d101      	bne.n	1b078 <xQueueGenericSendFromISR+0x1c>
   1b074:	b672      	cpsid	i
   1b076:	e7fe      	b.n	1b076 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b078:	68bb      	ldr	r3, [r7, #8]
   1b07a:	2b00      	cmp	r3, #0
   1b07c:	d103      	bne.n	1b086 <xQueueGenericSendFromISR+0x2a>
   1b07e:	69bb      	ldr	r3, [r7, #24]
   1b080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b082:	2b00      	cmp	r3, #0
   1b084:	d101      	bne.n	1b08a <xQueueGenericSendFromISR+0x2e>
   1b086:	2301      	movs	r3, #1
   1b088:	e000      	b.n	1b08c <xQueueGenericSendFromISR+0x30>
   1b08a:	2300      	movs	r3, #0
   1b08c:	2b00      	cmp	r3, #0
   1b08e:	d101      	bne.n	1b094 <xQueueGenericSendFromISR+0x38>
   1b090:	b672      	cpsid	i
   1b092:	e7fe      	b.n	1b092 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b094:	683b      	ldr	r3, [r7, #0]
   1b096:	2b02      	cmp	r3, #2
   1b098:	d103      	bne.n	1b0a2 <xQueueGenericSendFromISR+0x46>
   1b09a:	69bb      	ldr	r3, [r7, #24]
   1b09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b09e:	2b01      	cmp	r3, #1
   1b0a0:	d101      	bne.n	1b0a6 <xQueueGenericSendFromISR+0x4a>
   1b0a2:	2301      	movs	r3, #1
   1b0a4:	e000      	b.n	1b0a8 <xQueueGenericSendFromISR+0x4c>
   1b0a6:	2300      	movs	r3, #0
   1b0a8:	2b00      	cmp	r3, #0
   1b0aa:	d101      	bne.n	1b0b0 <xQueueGenericSendFromISR+0x54>
   1b0ac:	b672      	cpsid	i
   1b0ae:	e7fe      	b.n	1b0ae <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b0b0:	4b68      	ldr	r3, [pc, #416]	; (1b254 <xQueueGenericSendFromISR+0x1f8>)
   1b0b2:	4798      	blx	r3
   1b0b4:	0003      	movs	r3, r0
   1b0b6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b0b8:	69bb      	ldr	r3, [r7, #24]
   1b0ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b0bc:	69bb      	ldr	r3, [r7, #24]
   1b0be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b0c0:	429a      	cmp	r2, r3
   1b0c2:	d303      	bcc.n	1b0cc <xQueueGenericSendFromISR+0x70>
   1b0c4:	683b      	ldr	r3, [r7, #0]
   1b0c6:	2b02      	cmp	r3, #2
   1b0c8:	d000      	beq.n	1b0cc <xQueueGenericSendFromISR+0x70>
   1b0ca:	e088      	b.n	1b1de <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b0cc:	2313      	movs	r3, #19
   1b0ce:	18fb      	adds	r3, r7, r3
   1b0d0:	69ba      	ldr	r2, [r7, #24]
   1b0d2:	2145      	movs	r1, #69	; 0x45
   1b0d4:	5c52      	ldrb	r2, [r2, r1]
   1b0d6:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b0d8:	69bb      	ldr	r3, [r7, #24]
   1b0da:	0018      	movs	r0, r3
   1b0dc:	4b5e      	ldr	r3, [pc, #376]	; (1b258 <xQueueGenericSendFromISR+0x1fc>)
   1b0de:	4798      	blx	r3
   1b0e0:	0003      	movs	r3, r0
   1b0e2:	001a      	movs	r2, r3
   1b0e4:	4b5d      	ldr	r3, [pc, #372]	; (1b25c <xQueueGenericSendFromISR+0x200>)
   1b0e6:	881b      	ldrh	r3, [r3, #0]
   1b0e8:	4013      	ands	r3, r2
   1b0ea:	b29b      	uxth	r3, r3
   1b0ec:	2b00      	cmp	r3, #0
   1b0ee:	d022      	beq.n	1b136 <xQueueGenericSendFromISR+0xda>
   1b0f0:	683b      	ldr	r3, [r7, #0]
   1b0f2:	2b00      	cmp	r3, #0
   1b0f4:	d10b      	bne.n	1b10e <xQueueGenericSendFromISR+0xb2>
   1b0f6:	69bb      	ldr	r3, [r7, #24]
   1b0f8:	0018      	movs	r0, r3
   1b0fa:	4b59      	ldr	r3, [pc, #356]	; (1b260 <xQueueGenericSendFromISR+0x204>)
   1b0fc:	4798      	blx	r3
   1b0fe:	0003      	movs	r3, r0
   1b100:	001a      	movs	r2, r3
   1b102:	4b58      	ldr	r3, [pc, #352]	; (1b264 <xQueueGenericSendFromISR+0x208>)
   1b104:	5c9b      	ldrb	r3, [r3, r2]
   1b106:	3330      	adds	r3, #48	; 0x30
   1b108:	b2db      	uxtb	r3, r3
   1b10a:	001d      	movs	r5, r3
   1b10c:	e000      	b.n	1b110 <xQueueGenericSendFromISR+0xb4>
   1b10e:	2535      	movs	r5, #53	; 0x35
   1b110:	69bb      	ldr	r3, [r7, #24]
   1b112:	0018      	movs	r0, r3
   1b114:	4b52      	ldr	r3, [pc, #328]	; (1b260 <xQueueGenericSendFromISR+0x204>)
   1b116:	4798      	blx	r3
   1b118:	0003      	movs	r3, r0
   1b11a:	001a      	movs	r2, r3
   1b11c:	4b51      	ldr	r3, [pc, #324]	; (1b264 <xQueueGenericSendFromISR+0x208>)
   1b11e:	5c9c      	ldrb	r4, [r3, r2]
   1b120:	69bb      	ldr	r3, [r7, #24]
   1b122:	0018      	movs	r0, r3
   1b124:	4b50      	ldr	r3, [pc, #320]	; (1b268 <xQueueGenericSendFromISR+0x20c>)
   1b126:	4798      	blx	r3
   1b128:	0003      	movs	r3, r0
   1b12a:	b2db      	uxtb	r3, r3
   1b12c:	001a      	movs	r2, r3
   1b12e:	0021      	movs	r1, r4
   1b130:	0028      	movs	r0, r5
   1b132:	4b4e      	ldr	r3, [pc, #312]	; (1b26c <xQueueGenericSendFromISR+0x210>)
   1b134:	4798      	blx	r3
   1b136:	69bb      	ldr	r3, [r7, #24]
   1b138:	0018      	movs	r0, r3
   1b13a:	4b49      	ldr	r3, [pc, #292]	; (1b260 <xQueueGenericSendFromISR+0x204>)
   1b13c:	4798      	blx	r3
   1b13e:	0003      	movs	r3, r0
   1b140:	001a      	movs	r2, r3
   1b142:	4b48      	ldr	r3, [pc, #288]	; (1b264 <xQueueGenericSendFromISR+0x208>)
   1b144:	5c9c      	ldrb	r4, [r3, r2]
   1b146:	69bb      	ldr	r3, [r7, #24]
   1b148:	0018      	movs	r0, r3
   1b14a:	4b47      	ldr	r3, [pc, #284]	; (1b268 <xQueueGenericSendFromISR+0x20c>)
   1b14c:	4798      	blx	r3
   1b14e:	0003      	movs	r3, r0
   1b150:	b2d9      	uxtb	r1, r3
   1b152:	69bb      	ldr	r3, [r7, #24]
   1b154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b156:	b2db      	uxtb	r3, r3
   1b158:	3301      	adds	r3, #1
   1b15a:	b2db      	uxtb	r3, r3
   1b15c:	001a      	movs	r2, r3
   1b15e:	0020      	movs	r0, r4
   1b160:	4b43      	ldr	r3, [pc, #268]	; (1b270 <xQueueGenericSendFromISR+0x214>)
   1b162:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b164:	683a      	ldr	r2, [r7, #0]
   1b166:	68b9      	ldr	r1, [r7, #8]
   1b168:	69bb      	ldr	r3, [r7, #24]
   1b16a:	0018      	movs	r0, r3
   1b16c:	4b41      	ldr	r3, [pc, #260]	; (1b274 <xQueueGenericSendFromISR+0x218>)
   1b16e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b170:	2313      	movs	r3, #19
   1b172:	18fb      	adds	r3, r7, r3
   1b174:	781b      	ldrb	r3, [r3, #0]
   1b176:	b25b      	sxtb	r3, r3
   1b178:	3301      	adds	r3, #1
   1b17a:	d124      	bne.n	1b1c6 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b17c:	69bb      	ldr	r3, [r7, #24]
   1b17e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b180:	2b00      	cmp	r3, #0
   1b182:	d00e      	beq.n	1b1a2 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b184:	683a      	ldr	r2, [r7, #0]
   1b186:	69bb      	ldr	r3, [r7, #24]
   1b188:	0011      	movs	r1, r2
   1b18a:	0018      	movs	r0, r3
   1b18c:	4b3a      	ldr	r3, [pc, #232]	; (1b278 <xQueueGenericSendFromISR+0x21c>)
   1b18e:	4798      	blx	r3
   1b190:	1e03      	subs	r3, r0, #0
   1b192:	d021      	beq.n	1b1d8 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b194:	687b      	ldr	r3, [r7, #4]
   1b196:	2b00      	cmp	r3, #0
   1b198:	d01e      	beq.n	1b1d8 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b19a:	687b      	ldr	r3, [r7, #4]
   1b19c:	2201      	movs	r2, #1
   1b19e:	601a      	str	r2, [r3, #0]
   1b1a0:	e01a      	b.n	1b1d8 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b1a2:	69bb      	ldr	r3, [r7, #24]
   1b1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b1a6:	2b00      	cmp	r3, #0
   1b1a8:	d016      	beq.n	1b1d8 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b1aa:	69bb      	ldr	r3, [r7, #24]
   1b1ac:	3324      	adds	r3, #36	; 0x24
   1b1ae:	0018      	movs	r0, r3
   1b1b0:	4b32      	ldr	r3, [pc, #200]	; (1b27c <xQueueGenericSendFromISR+0x220>)
   1b1b2:	4798      	blx	r3
   1b1b4:	1e03      	subs	r3, r0, #0
   1b1b6:	d00f      	beq.n	1b1d8 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b1b8:	687b      	ldr	r3, [r7, #4]
   1b1ba:	2b00      	cmp	r3, #0
   1b1bc:	d00c      	beq.n	1b1d8 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b1be:	687b      	ldr	r3, [r7, #4]
   1b1c0:	2201      	movs	r2, #1
   1b1c2:	601a      	str	r2, [r3, #0]
   1b1c4:	e008      	b.n	1b1d8 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b1c6:	2313      	movs	r3, #19
   1b1c8:	18fb      	adds	r3, r7, r3
   1b1ca:	781b      	ldrb	r3, [r3, #0]
   1b1cc:	3301      	adds	r3, #1
   1b1ce:	b2db      	uxtb	r3, r3
   1b1d0:	b259      	sxtb	r1, r3
   1b1d2:	69bb      	ldr	r3, [r7, #24]
   1b1d4:	2245      	movs	r2, #69	; 0x45
   1b1d6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b1d8:	2301      	movs	r3, #1
   1b1da:	61fb      	str	r3, [r7, #28]
		{
   1b1dc:	e030      	b.n	1b240 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b1de:	69bb      	ldr	r3, [r7, #24]
   1b1e0:	0018      	movs	r0, r3
   1b1e2:	4b1d      	ldr	r3, [pc, #116]	; (1b258 <xQueueGenericSendFromISR+0x1fc>)
   1b1e4:	4798      	blx	r3
   1b1e6:	0003      	movs	r3, r0
   1b1e8:	001a      	movs	r2, r3
   1b1ea:	4b1c      	ldr	r3, [pc, #112]	; (1b25c <xQueueGenericSendFromISR+0x200>)
   1b1ec:	881b      	ldrh	r3, [r3, #0]
   1b1ee:	4013      	ands	r3, r2
   1b1f0:	b29b      	uxth	r3, r3
   1b1f2:	2b00      	cmp	r3, #0
   1b1f4:	d022      	beq.n	1b23c <xQueueGenericSendFromISR+0x1e0>
   1b1f6:	683b      	ldr	r3, [r7, #0]
   1b1f8:	2b00      	cmp	r3, #0
   1b1fa:	d10b      	bne.n	1b214 <xQueueGenericSendFromISR+0x1b8>
   1b1fc:	69bb      	ldr	r3, [r7, #24]
   1b1fe:	0018      	movs	r0, r3
   1b200:	4b17      	ldr	r3, [pc, #92]	; (1b260 <xQueueGenericSendFromISR+0x204>)
   1b202:	4798      	blx	r3
   1b204:	0003      	movs	r3, r0
   1b206:	001a      	movs	r2, r3
   1b208:	4b16      	ldr	r3, [pc, #88]	; (1b264 <xQueueGenericSendFromISR+0x208>)
   1b20a:	5c9b      	ldrb	r3, [r3, r2]
   1b20c:	3358      	adds	r3, #88	; 0x58
   1b20e:	b2db      	uxtb	r3, r3
   1b210:	001d      	movs	r5, r3
   1b212:	e000      	b.n	1b216 <xQueueGenericSendFromISR+0x1ba>
   1b214:	255d      	movs	r5, #93	; 0x5d
   1b216:	69bb      	ldr	r3, [r7, #24]
   1b218:	0018      	movs	r0, r3
   1b21a:	4b11      	ldr	r3, [pc, #68]	; (1b260 <xQueueGenericSendFromISR+0x204>)
   1b21c:	4798      	blx	r3
   1b21e:	0003      	movs	r3, r0
   1b220:	001a      	movs	r2, r3
   1b222:	4b10      	ldr	r3, [pc, #64]	; (1b264 <xQueueGenericSendFromISR+0x208>)
   1b224:	5c9c      	ldrb	r4, [r3, r2]
   1b226:	69bb      	ldr	r3, [r7, #24]
   1b228:	0018      	movs	r0, r3
   1b22a:	4b0f      	ldr	r3, [pc, #60]	; (1b268 <xQueueGenericSendFromISR+0x20c>)
   1b22c:	4798      	blx	r3
   1b22e:	0003      	movs	r3, r0
   1b230:	b2db      	uxtb	r3, r3
   1b232:	001a      	movs	r2, r3
   1b234:	0021      	movs	r1, r4
   1b236:	0028      	movs	r0, r5
   1b238:	4b0c      	ldr	r3, [pc, #48]	; (1b26c <xQueueGenericSendFromISR+0x210>)
   1b23a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1b23c:	2300      	movs	r3, #0
   1b23e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1b240:	697b      	ldr	r3, [r7, #20]
   1b242:	0018      	movs	r0, r3
   1b244:	4b0e      	ldr	r3, [pc, #56]	; (1b280 <xQueueGenericSendFromISR+0x224>)
   1b246:	4798      	blx	r3

	return xReturn;
   1b248:	69fb      	ldr	r3, [r7, #28]
}
   1b24a:	0018      	movs	r0, r3
   1b24c:	46bd      	mov	sp, r7
   1b24e:	b008      	add	sp, #32
   1b250:	bdb0      	pop	{r4, r5, r7, pc}
   1b252:	46c0      	nop			; (mov r8, r8)
   1b254:	0001a6bd 	.word	0x0001a6bd
   1b258:	00018721 	.word	0x00018721
   1b25c:	20000110 	.word	0x20000110
   1b260:	00018621 	.word	0x00018621
   1b264:	20000104 	.word	0x20000104
   1b268:	00018701 	.word	0x00018701
   1b26c:	00019059 	.word	0x00019059
   1b270:	000196b5 	.word	0x000196b5
   1b274:	0001be35 	.word	0x0001be35
   1b278:	0001c139 	.word	0x0001c139
   1b27c:	0001cef9 	.word	0x0001cef9
   1b280:	0001a6c9 	.word	0x0001a6c9

0001b284 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1b284:	b580      	push	{r7, lr}
   1b286:	b082      	sub	sp, #8
   1b288:	af00      	add	r7, sp, #0
   1b28a:	6078      	str	r0, [r7, #4]
   1b28c:	6039      	str	r1, [r7, #0]
   1b28e:	6839      	ldr	r1, [r7, #0]
   1b290:	687b      	ldr	r3, [r7, #4]
   1b292:	2200      	movs	r2, #0
   1b294:	0018      	movs	r0, r3
   1b296:	4b03      	ldr	r3, [pc, #12]	; (1b2a4 <xQueueGiveFromISR+0x20>)
   1b298:	4798      	blx	r3
   1b29a:	0003      	movs	r3, r0
   1b29c:	0018      	movs	r0, r3
   1b29e:	46bd      	mov	sp, r7
   1b2a0:	b002      	add	sp, #8
   1b2a2:	bd80      	pop	{r7, pc}
   1b2a4:	0001b2a9 	.word	0x0001b2a9

0001b2a8 <MyWrapper>:
{
   1b2a8:	b5b0      	push	{r4, r5, r7, lr}
   1b2aa:	b08a      	sub	sp, #40	; 0x28
   1b2ac:	af00      	add	r7, sp, #0
   1b2ae:	60f8      	str	r0, [r7, #12]
   1b2b0:	60b9      	str	r1, [r7, #8]
   1b2b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b2b4:	68fb      	ldr	r3, [r7, #12]
   1b2b6:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1b2b8:	6a3b      	ldr	r3, [r7, #32]
   1b2ba:	2b00      	cmp	r3, #0
   1b2bc:	d101      	bne.n	1b2c2 <MyWrapper+0x1a>
   1b2be:	b672      	cpsid	i
   1b2c0:	e7fe      	b.n	1b2c0 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b2c2:	6a3b      	ldr	r3, [r7, #32]
   1b2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b2c6:	2b00      	cmp	r3, #0
   1b2c8:	d001      	beq.n	1b2ce <MyWrapper+0x26>
   1b2ca:	b672      	cpsid	i
   1b2cc:	e7fe      	b.n	1b2cc <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1b2ce:	6a3b      	ldr	r3, [r7, #32]
   1b2d0:	681b      	ldr	r3, [r3, #0]
   1b2d2:	2b00      	cmp	r3, #0
   1b2d4:	d103      	bne.n	1b2de <MyWrapper+0x36>
   1b2d6:	6a3b      	ldr	r3, [r7, #32]
   1b2d8:	685b      	ldr	r3, [r3, #4]
   1b2da:	2b00      	cmp	r3, #0
   1b2dc:	d101      	bne.n	1b2e2 <MyWrapper+0x3a>
   1b2de:	2301      	movs	r3, #1
   1b2e0:	e000      	b.n	1b2e4 <MyWrapper+0x3c>
   1b2e2:	2300      	movs	r3, #0
   1b2e4:	2b00      	cmp	r3, #0
   1b2e6:	d101      	bne.n	1b2ec <MyWrapper+0x44>
   1b2e8:	b672      	cpsid	i
   1b2ea:	e7fe      	b.n	1b2ea <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b2ec:	4b66      	ldr	r3, [pc, #408]	; (1b488 <MyWrapper+0x1e0>)
   1b2ee:	4798      	blx	r3
   1b2f0:	0003      	movs	r3, r0
   1b2f2:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b2f4:	6a3b      	ldr	r3, [r7, #32]
   1b2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b2f8:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1b2fa:	6a3b      	ldr	r3, [r7, #32]
   1b2fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1b2fe:	69bb      	ldr	r3, [r7, #24]
   1b300:	429a      	cmp	r2, r3
   1b302:	d800      	bhi.n	1b306 <MyWrapper+0x5e>
   1b304:	e085      	b.n	1b412 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b306:	2317      	movs	r3, #23
   1b308:	18fb      	adds	r3, r7, r3
   1b30a:	6a3a      	ldr	r2, [r7, #32]
   1b30c:	2145      	movs	r1, #69	; 0x45
   1b30e:	5c52      	ldrb	r2, [r2, r1]
   1b310:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b312:	6a3b      	ldr	r3, [r7, #32]
   1b314:	0018      	movs	r0, r3
   1b316:	4b5d      	ldr	r3, [pc, #372]	; (1b48c <MyWrapper+0x1e4>)
   1b318:	4798      	blx	r3
   1b31a:	0003      	movs	r3, r0
   1b31c:	001a      	movs	r2, r3
   1b31e:	4b5c      	ldr	r3, [pc, #368]	; (1b490 <MyWrapper+0x1e8>)
   1b320:	881b      	ldrh	r3, [r3, #0]
   1b322:	4013      	ands	r3, r2
   1b324:	b29b      	uxth	r3, r3
   1b326:	2b00      	cmp	r3, #0
   1b328:	d022      	beq.n	1b370 <MyWrapper+0xc8>
   1b32a:	687b      	ldr	r3, [r7, #4]
   1b32c:	2b00      	cmp	r3, #0
   1b32e:	d10b      	bne.n	1b348 <MyWrapper+0xa0>
   1b330:	6a3b      	ldr	r3, [r7, #32]
   1b332:	0018      	movs	r0, r3
   1b334:	4b57      	ldr	r3, [pc, #348]	; (1b494 <MyWrapper+0x1ec>)
   1b336:	4798      	blx	r3
   1b338:	0003      	movs	r3, r0
   1b33a:	001a      	movs	r2, r3
   1b33c:	4b56      	ldr	r3, [pc, #344]	; (1b498 <MyWrapper+0x1f0>)
   1b33e:	5c9b      	ldrb	r3, [r3, r2]
   1b340:	3330      	adds	r3, #48	; 0x30
   1b342:	b2db      	uxtb	r3, r3
   1b344:	001d      	movs	r5, r3
   1b346:	e000      	b.n	1b34a <MyWrapper+0xa2>
   1b348:	2535      	movs	r5, #53	; 0x35
   1b34a:	6a3b      	ldr	r3, [r7, #32]
   1b34c:	0018      	movs	r0, r3
   1b34e:	4b51      	ldr	r3, [pc, #324]	; (1b494 <MyWrapper+0x1ec>)
   1b350:	4798      	blx	r3
   1b352:	0003      	movs	r3, r0
   1b354:	001a      	movs	r2, r3
   1b356:	4b50      	ldr	r3, [pc, #320]	; (1b498 <MyWrapper+0x1f0>)
   1b358:	5c9c      	ldrb	r4, [r3, r2]
   1b35a:	6a3b      	ldr	r3, [r7, #32]
   1b35c:	0018      	movs	r0, r3
   1b35e:	4b4f      	ldr	r3, [pc, #316]	; (1b49c <MyWrapper+0x1f4>)
   1b360:	4798      	blx	r3
   1b362:	0003      	movs	r3, r0
   1b364:	b2db      	uxtb	r3, r3
   1b366:	001a      	movs	r2, r3
   1b368:	0021      	movs	r1, r4
   1b36a:	0028      	movs	r0, r5
   1b36c:	4b4c      	ldr	r3, [pc, #304]	; (1b4a0 <MyWrapper+0x1f8>)
   1b36e:	4798      	blx	r3
   1b370:	6a3b      	ldr	r3, [r7, #32]
   1b372:	0018      	movs	r0, r3
   1b374:	4b47      	ldr	r3, [pc, #284]	; (1b494 <MyWrapper+0x1ec>)
   1b376:	4798      	blx	r3
   1b378:	0003      	movs	r3, r0
   1b37a:	001a      	movs	r2, r3
   1b37c:	4b46      	ldr	r3, [pc, #280]	; (1b498 <MyWrapper+0x1f0>)
   1b37e:	5c9c      	ldrb	r4, [r3, r2]
   1b380:	6a3b      	ldr	r3, [r7, #32]
   1b382:	0018      	movs	r0, r3
   1b384:	4b45      	ldr	r3, [pc, #276]	; (1b49c <MyWrapper+0x1f4>)
   1b386:	4798      	blx	r3
   1b388:	0003      	movs	r3, r0
   1b38a:	b2d9      	uxtb	r1, r3
   1b38c:	6a3b      	ldr	r3, [r7, #32]
   1b38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b390:	b2db      	uxtb	r3, r3
   1b392:	3301      	adds	r3, #1
   1b394:	b2db      	uxtb	r3, r3
   1b396:	001a      	movs	r2, r3
   1b398:	0020      	movs	r0, r4
   1b39a:	4b42      	ldr	r3, [pc, #264]	; (1b4a4 <MyWrapper+0x1fc>)
   1b39c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b39e:	69bb      	ldr	r3, [r7, #24]
   1b3a0:	1c5a      	adds	r2, r3, #1
   1b3a2:	6a3b      	ldr	r3, [r7, #32]
   1b3a4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b3a6:	2317      	movs	r3, #23
   1b3a8:	18fb      	adds	r3, r7, r3
   1b3aa:	781b      	ldrb	r3, [r3, #0]
   1b3ac:	b25b      	sxtb	r3, r3
   1b3ae:	3301      	adds	r3, #1
   1b3b0:	d123      	bne.n	1b3fa <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b3b2:	6a3b      	ldr	r3, [r7, #32]
   1b3b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b3b6:	2b00      	cmp	r3, #0
   1b3b8:	d00d      	beq.n	1b3d6 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b3ba:	6a3b      	ldr	r3, [r7, #32]
   1b3bc:	2100      	movs	r1, #0
   1b3be:	0018      	movs	r0, r3
   1b3c0:	4b39      	ldr	r3, [pc, #228]	; (1b4a8 <MyWrapper+0x200>)
   1b3c2:	4798      	blx	r3
   1b3c4:	1e03      	subs	r3, r0, #0
   1b3c6:	d021      	beq.n	1b40c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b3c8:	68bb      	ldr	r3, [r7, #8]
   1b3ca:	2b00      	cmp	r3, #0
   1b3cc:	d01e      	beq.n	1b40c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b3ce:	68bb      	ldr	r3, [r7, #8]
   1b3d0:	2201      	movs	r2, #1
   1b3d2:	601a      	str	r2, [r3, #0]
   1b3d4:	e01a      	b.n	1b40c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b3d6:	6a3b      	ldr	r3, [r7, #32]
   1b3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b3da:	2b00      	cmp	r3, #0
   1b3dc:	d016      	beq.n	1b40c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b3de:	6a3b      	ldr	r3, [r7, #32]
   1b3e0:	3324      	adds	r3, #36	; 0x24
   1b3e2:	0018      	movs	r0, r3
   1b3e4:	4b31      	ldr	r3, [pc, #196]	; (1b4ac <MyWrapper+0x204>)
   1b3e6:	4798      	blx	r3
   1b3e8:	1e03      	subs	r3, r0, #0
   1b3ea:	d00f      	beq.n	1b40c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b3ec:	68bb      	ldr	r3, [r7, #8]
   1b3ee:	2b00      	cmp	r3, #0
   1b3f0:	d00c      	beq.n	1b40c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b3f2:	68bb      	ldr	r3, [r7, #8]
   1b3f4:	2201      	movs	r2, #1
   1b3f6:	601a      	str	r2, [r3, #0]
   1b3f8:	e008      	b.n	1b40c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b3fa:	2317      	movs	r3, #23
   1b3fc:	18fb      	adds	r3, r7, r3
   1b3fe:	781b      	ldrb	r3, [r3, #0]
   1b400:	3301      	adds	r3, #1
   1b402:	b2db      	uxtb	r3, r3
   1b404:	b259      	sxtb	r1, r3
   1b406:	6a3b      	ldr	r3, [r7, #32]
   1b408:	2245      	movs	r2, #69	; 0x45
   1b40a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b40c:	2301      	movs	r3, #1
   1b40e:	627b      	str	r3, [r7, #36]	; 0x24
   1b410:	e030      	b.n	1b474 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b412:	6a3b      	ldr	r3, [r7, #32]
   1b414:	0018      	movs	r0, r3
   1b416:	4b1d      	ldr	r3, [pc, #116]	; (1b48c <MyWrapper+0x1e4>)
   1b418:	4798      	blx	r3
   1b41a:	0003      	movs	r3, r0
   1b41c:	001a      	movs	r2, r3
   1b41e:	4b1c      	ldr	r3, [pc, #112]	; (1b490 <MyWrapper+0x1e8>)
   1b420:	881b      	ldrh	r3, [r3, #0]
   1b422:	4013      	ands	r3, r2
   1b424:	b29b      	uxth	r3, r3
   1b426:	2b00      	cmp	r3, #0
   1b428:	d022      	beq.n	1b470 <MyWrapper+0x1c8>
   1b42a:	687b      	ldr	r3, [r7, #4]
   1b42c:	2b00      	cmp	r3, #0
   1b42e:	d10b      	bne.n	1b448 <MyWrapper+0x1a0>
   1b430:	6a3b      	ldr	r3, [r7, #32]
   1b432:	0018      	movs	r0, r3
   1b434:	4b17      	ldr	r3, [pc, #92]	; (1b494 <MyWrapper+0x1ec>)
   1b436:	4798      	blx	r3
   1b438:	0003      	movs	r3, r0
   1b43a:	001a      	movs	r2, r3
   1b43c:	4b16      	ldr	r3, [pc, #88]	; (1b498 <MyWrapper+0x1f0>)
   1b43e:	5c9b      	ldrb	r3, [r3, r2]
   1b440:	3358      	adds	r3, #88	; 0x58
   1b442:	b2db      	uxtb	r3, r3
   1b444:	001d      	movs	r5, r3
   1b446:	e000      	b.n	1b44a <MyWrapper+0x1a2>
   1b448:	255d      	movs	r5, #93	; 0x5d
   1b44a:	6a3b      	ldr	r3, [r7, #32]
   1b44c:	0018      	movs	r0, r3
   1b44e:	4b11      	ldr	r3, [pc, #68]	; (1b494 <MyWrapper+0x1ec>)
   1b450:	4798      	blx	r3
   1b452:	0003      	movs	r3, r0
   1b454:	001a      	movs	r2, r3
   1b456:	4b10      	ldr	r3, [pc, #64]	; (1b498 <MyWrapper+0x1f0>)
   1b458:	5c9c      	ldrb	r4, [r3, r2]
   1b45a:	6a3b      	ldr	r3, [r7, #32]
   1b45c:	0018      	movs	r0, r3
   1b45e:	4b0f      	ldr	r3, [pc, #60]	; (1b49c <MyWrapper+0x1f4>)
   1b460:	4798      	blx	r3
   1b462:	0003      	movs	r3, r0
   1b464:	b2db      	uxtb	r3, r3
   1b466:	001a      	movs	r2, r3
   1b468:	0021      	movs	r1, r4
   1b46a:	0028      	movs	r0, r5
   1b46c:	4b0c      	ldr	r3, [pc, #48]	; (1b4a0 <MyWrapper+0x1f8>)
   1b46e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1b470:	2300      	movs	r3, #0
   1b472:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1b474:	69fb      	ldr	r3, [r7, #28]
   1b476:	0018      	movs	r0, r3
   1b478:	4b0d      	ldr	r3, [pc, #52]	; (1b4b0 <MyWrapper+0x208>)
   1b47a:	4798      	blx	r3

	return xReturn;
   1b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b47e:	0018      	movs	r0, r3
   1b480:	46bd      	mov	sp, r7
   1b482:	b00a      	add	sp, #40	; 0x28
   1b484:	bdb0      	pop	{r4, r5, r7, pc}
   1b486:	46c0      	nop			; (mov r8, r8)
   1b488:	0001a6bd 	.word	0x0001a6bd
   1b48c:	00018721 	.word	0x00018721
   1b490:	20000110 	.word	0x20000110
   1b494:	00018621 	.word	0x00018621
   1b498:	20000104 	.word	0x20000104
   1b49c:	00018701 	.word	0x00018701
   1b4a0:	00019059 	.word	0x00019059
   1b4a4:	000196b5 	.word	0x000196b5
   1b4a8:	0001c139 	.word	0x0001c139
   1b4ac:	0001cef9 	.word	0x0001cef9
   1b4b0:	0001a6c9 	.word	0x0001a6c9

0001b4b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1b4b4:	b5b0      	push	{r4, r5, r7, lr}
   1b4b6:	b08a      	sub	sp, #40	; 0x28
   1b4b8:	af00      	add	r7, sp, #0
   1b4ba:	60f8      	str	r0, [r7, #12]
   1b4bc:	60b9      	str	r1, [r7, #8]
   1b4be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1b4c0:	2300      	movs	r3, #0
   1b4c2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b4c4:	68fb      	ldr	r3, [r7, #12]
   1b4c6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b4c8:	6a3b      	ldr	r3, [r7, #32]
   1b4ca:	2b00      	cmp	r3, #0
   1b4cc:	d101      	bne.n	1b4d2 <xQueueReceive+0x1e>
   1b4ce:	b672      	cpsid	i
   1b4d0:	e7fe      	b.n	1b4d0 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b4d2:	68bb      	ldr	r3, [r7, #8]
   1b4d4:	2b00      	cmp	r3, #0
   1b4d6:	d103      	bne.n	1b4e0 <xQueueReceive+0x2c>
   1b4d8:	6a3b      	ldr	r3, [r7, #32]
   1b4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b4dc:	2b00      	cmp	r3, #0
   1b4de:	d101      	bne.n	1b4e4 <xQueueReceive+0x30>
   1b4e0:	2301      	movs	r3, #1
   1b4e2:	e000      	b.n	1b4e6 <xQueueReceive+0x32>
   1b4e4:	2300      	movs	r3, #0
   1b4e6:	2b00      	cmp	r3, #0
   1b4e8:	d101      	bne.n	1b4ee <xQueueReceive+0x3a>
   1b4ea:	b672      	cpsid	i
   1b4ec:	e7fe      	b.n	1b4ec <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b4ee:	4bbf      	ldr	r3, [pc, #764]	; (1b7ec <xQueueReceive+0x338>)
   1b4f0:	4798      	blx	r3
   1b4f2:	1e03      	subs	r3, r0, #0
   1b4f4:	d102      	bne.n	1b4fc <xQueueReceive+0x48>
   1b4f6:	687b      	ldr	r3, [r7, #4]
   1b4f8:	2b00      	cmp	r3, #0
   1b4fa:	d101      	bne.n	1b500 <xQueueReceive+0x4c>
   1b4fc:	2301      	movs	r3, #1
   1b4fe:	e000      	b.n	1b502 <xQueueReceive+0x4e>
   1b500:	2300      	movs	r3, #0
   1b502:	2b00      	cmp	r3, #0
   1b504:	d101      	bne.n	1b50a <xQueueReceive+0x56>
   1b506:	b672      	cpsid	i
   1b508:	e7fe      	b.n	1b508 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b50a:	4bb9      	ldr	r3, [pc, #740]	; (1b7f0 <xQueueReceive+0x33c>)
   1b50c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b50e:	6a3b      	ldr	r3, [r7, #32]
   1b510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b512:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b514:	69fb      	ldr	r3, [r7, #28]
   1b516:	2b00      	cmp	r3, #0
   1b518:	d100      	bne.n	1b51c <xQueueReceive+0x68>
   1b51a:	e07d      	b.n	1b618 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1b51c:	68ba      	ldr	r2, [r7, #8]
   1b51e:	6a3b      	ldr	r3, [r7, #32]
   1b520:	0011      	movs	r1, r2
   1b522:	0018      	movs	r0, r3
   1b524:	4bb3      	ldr	r3, [pc, #716]	; (1b7f4 <xQueueReceive+0x340>)
   1b526:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1b528:	4bb3      	ldr	r3, [pc, #716]	; (1b7f8 <xQueueReceive+0x344>)
   1b52a:	4798      	blx	r3
   1b52c:	0003      	movs	r3, r0
   1b52e:	0018      	movs	r0, r3
   1b530:	4bb2      	ldr	r3, [pc, #712]	; (1b7fc <xQueueReceive+0x348>)
   1b532:	4798      	blx	r3
   1b534:	0003      	movs	r3, r0
   1b536:	001a      	movs	r2, r3
   1b538:	4bb1      	ldr	r3, [pc, #708]	; (1b800 <xQueueReceive+0x34c>)
   1b53a:	881b      	ldrh	r3, [r3, #0]
   1b53c:	4013      	ands	r3, r2
   1b53e:	b29b      	uxth	r3, r3
   1b540:	2b00      	cmp	r3, #0
   1b542:	d029      	beq.n	1b598 <xQueueReceive+0xe4>
   1b544:	6a3b      	ldr	r3, [r7, #32]
   1b546:	0018      	movs	r0, r3
   1b548:	4bae      	ldr	r3, [pc, #696]	; (1b804 <xQueueReceive+0x350>)
   1b54a:	4798      	blx	r3
   1b54c:	0003      	movs	r3, r0
   1b54e:	001a      	movs	r2, r3
   1b550:	4bab      	ldr	r3, [pc, #684]	; (1b800 <xQueueReceive+0x34c>)
   1b552:	881b      	ldrh	r3, [r3, #0]
   1b554:	4013      	ands	r3, r2
   1b556:	b29b      	uxth	r3, r3
   1b558:	2b00      	cmp	r3, #0
   1b55a:	d01d      	beq.n	1b598 <xQueueReceive+0xe4>
   1b55c:	6a3b      	ldr	r3, [r7, #32]
   1b55e:	0018      	movs	r0, r3
   1b560:	4ba9      	ldr	r3, [pc, #676]	; (1b808 <xQueueReceive+0x354>)
   1b562:	4798      	blx	r3
   1b564:	0003      	movs	r3, r0
   1b566:	001a      	movs	r2, r3
   1b568:	4ba8      	ldr	r3, [pc, #672]	; (1b80c <xQueueReceive+0x358>)
   1b56a:	5c9b      	ldrb	r3, [r3, r2]
   1b56c:	3328      	adds	r3, #40	; 0x28
   1b56e:	b2db      	uxtb	r3, r3
   1b570:	001d      	movs	r5, r3
   1b572:	6a3b      	ldr	r3, [r7, #32]
   1b574:	0018      	movs	r0, r3
   1b576:	4ba4      	ldr	r3, [pc, #656]	; (1b808 <xQueueReceive+0x354>)
   1b578:	4798      	blx	r3
   1b57a:	0003      	movs	r3, r0
   1b57c:	001a      	movs	r2, r3
   1b57e:	4ba3      	ldr	r3, [pc, #652]	; (1b80c <xQueueReceive+0x358>)
   1b580:	5c9c      	ldrb	r4, [r3, r2]
   1b582:	6a3b      	ldr	r3, [r7, #32]
   1b584:	0018      	movs	r0, r3
   1b586:	4ba2      	ldr	r3, [pc, #648]	; (1b810 <xQueueReceive+0x35c>)
   1b588:	4798      	blx	r3
   1b58a:	0003      	movs	r3, r0
   1b58c:	b2db      	uxtb	r3, r3
   1b58e:	001a      	movs	r2, r3
   1b590:	0021      	movs	r1, r4
   1b592:	0028      	movs	r0, r5
   1b594:	4b9f      	ldr	r3, [pc, #636]	; (1b814 <xQueueReceive+0x360>)
   1b596:	4798      	blx	r3
   1b598:	6a3b      	ldr	r3, [r7, #32]
   1b59a:	0018      	movs	r0, r3
   1b59c:	4b9a      	ldr	r3, [pc, #616]	; (1b808 <xQueueReceive+0x354>)
   1b59e:	4798      	blx	r3
   1b5a0:	0003      	movs	r3, r0
   1b5a2:	001a      	movs	r2, r3
   1b5a4:	4b99      	ldr	r3, [pc, #612]	; (1b80c <xQueueReceive+0x358>)
   1b5a6:	5c9c      	ldrb	r4, [r3, r2]
   1b5a8:	6a3b      	ldr	r3, [r7, #32]
   1b5aa:	0018      	movs	r0, r3
   1b5ac:	4b98      	ldr	r3, [pc, #608]	; (1b810 <xQueueReceive+0x35c>)
   1b5ae:	4798      	blx	r3
   1b5b0:	0003      	movs	r3, r0
   1b5b2:	b2dd      	uxtb	r5, r3
   1b5b4:	6a3b      	ldr	r3, [r7, #32]
   1b5b6:	0018      	movs	r0, r3
   1b5b8:	4b93      	ldr	r3, [pc, #588]	; (1b808 <xQueueReceive+0x354>)
   1b5ba:	4798      	blx	r3
   1b5bc:	0003      	movs	r3, r0
   1b5be:	001a      	movs	r2, r3
   1b5c0:	4b92      	ldr	r3, [pc, #584]	; (1b80c <xQueueReceive+0x358>)
   1b5c2:	5c9b      	ldrb	r3, [r3, r2]
   1b5c4:	2b02      	cmp	r3, #2
   1b5c6:	d108      	bne.n	1b5da <xQueueReceive+0x126>
   1b5c8:	4b8b      	ldr	r3, [pc, #556]	; (1b7f8 <xQueueReceive+0x344>)
   1b5ca:	4798      	blx	r3
   1b5cc:	0003      	movs	r3, r0
   1b5ce:	0018      	movs	r0, r3
   1b5d0:	4b91      	ldr	r3, [pc, #580]	; (1b818 <xQueueReceive+0x364>)
   1b5d2:	4798      	blx	r3
   1b5d4:	0003      	movs	r3, r0
   1b5d6:	b2db      	uxtb	r3, r3
   1b5d8:	e004      	b.n	1b5e4 <xQueueReceive+0x130>
   1b5da:	6a3b      	ldr	r3, [r7, #32]
   1b5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b5de:	b2db      	uxtb	r3, r3
   1b5e0:	3b01      	subs	r3, #1
   1b5e2:	b2db      	uxtb	r3, r3
   1b5e4:	001a      	movs	r2, r3
   1b5e6:	0029      	movs	r1, r5
   1b5e8:	0020      	movs	r0, r4
   1b5ea:	4b8c      	ldr	r3, [pc, #560]	; (1b81c <xQueueReceive+0x368>)
   1b5ec:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1b5ee:	69fb      	ldr	r3, [r7, #28]
   1b5f0:	1e5a      	subs	r2, r3, #1
   1b5f2:	6a3b      	ldr	r3, [r7, #32]
   1b5f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b5f6:	6a3b      	ldr	r3, [r7, #32]
   1b5f8:	691b      	ldr	r3, [r3, #16]
   1b5fa:	2b00      	cmp	r3, #0
   1b5fc:	d008      	beq.n	1b610 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b5fe:	6a3b      	ldr	r3, [r7, #32]
   1b600:	3310      	adds	r3, #16
   1b602:	0018      	movs	r0, r3
   1b604:	4b86      	ldr	r3, [pc, #536]	; (1b820 <xQueueReceive+0x36c>)
   1b606:	4798      	blx	r3
   1b608:	1e03      	subs	r3, r0, #0
   1b60a:	d001      	beq.n	1b610 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b60c:	4b85      	ldr	r3, [pc, #532]	; (1b824 <xQueueReceive+0x370>)
   1b60e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b610:	4b85      	ldr	r3, [pc, #532]	; (1b828 <xQueueReceive+0x374>)
   1b612:	4798      	blx	r3
				return pdPASS;
   1b614:	2301      	movs	r3, #1
   1b616:	e15f      	b.n	1b8d8 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b618:	687b      	ldr	r3, [r7, #4]
   1b61a:	2b00      	cmp	r3, #0
   1b61c:	d13b      	bne.n	1b696 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b61e:	4b82      	ldr	r3, [pc, #520]	; (1b828 <xQueueReceive+0x374>)
   1b620:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b622:	4b75      	ldr	r3, [pc, #468]	; (1b7f8 <xQueueReceive+0x344>)
   1b624:	4798      	blx	r3
   1b626:	0003      	movs	r3, r0
   1b628:	0018      	movs	r0, r3
   1b62a:	4b74      	ldr	r3, [pc, #464]	; (1b7fc <xQueueReceive+0x348>)
   1b62c:	4798      	blx	r3
   1b62e:	0003      	movs	r3, r0
   1b630:	001a      	movs	r2, r3
   1b632:	4b73      	ldr	r3, [pc, #460]	; (1b800 <xQueueReceive+0x34c>)
   1b634:	881b      	ldrh	r3, [r3, #0]
   1b636:	4013      	ands	r3, r2
   1b638:	b29b      	uxth	r3, r3
   1b63a:	2b00      	cmp	r3, #0
   1b63c:	d029      	beq.n	1b692 <xQueueReceive+0x1de>
   1b63e:	6a3b      	ldr	r3, [r7, #32]
   1b640:	0018      	movs	r0, r3
   1b642:	4b70      	ldr	r3, [pc, #448]	; (1b804 <xQueueReceive+0x350>)
   1b644:	4798      	blx	r3
   1b646:	0003      	movs	r3, r0
   1b648:	001a      	movs	r2, r3
   1b64a:	4b6d      	ldr	r3, [pc, #436]	; (1b800 <xQueueReceive+0x34c>)
   1b64c:	881b      	ldrh	r3, [r3, #0]
   1b64e:	4013      	ands	r3, r2
   1b650:	b29b      	uxth	r3, r3
   1b652:	2b00      	cmp	r3, #0
   1b654:	d01d      	beq.n	1b692 <xQueueReceive+0x1de>
   1b656:	6a3b      	ldr	r3, [r7, #32]
   1b658:	0018      	movs	r0, r3
   1b65a:	4b6b      	ldr	r3, [pc, #428]	; (1b808 <xQueueReceive+0x354>)
   1b65c:	4798      	blx	r3
   1b65e:	0003      	movs	r3, r0
   1b660:	001a      	movs	r2, r3
   1b662:	4b6a      	ldr	r3, [pc, #424]	; (1b80c <xQueueReceive+0x358>)
   1b664:	5c9b      	ldrb	r3, [r3, r2]
   1b666:	3350      	adds	r3, #80	; 0x50
   1b668:	b2db      	uxtb	r3, r3
   1b66a:	001d      	movs	r5, r3
   1b66c:	6a3b      	ldr	r3, [r7, #32]
   1b66e:	0018      	movs	r0, r3
   1b670:	4b65      	ldr	r3, [pc, #404]	; (1b808 <xQueueReceive+0x354>)
   1b672:	4798      	blx	r3
   1b674:	0003      	movs	r3, r0
   1b676:	001a      	movs	r2, r3
   1b678:	4b64      	ldr	r3, [pc, #400]	; (1b80c <xQueueReceive+0x358>)
   1b67a:	5c9c      	ldrb	r4, [r3, r2]
   1b67c:	6a3b      	ldr	r3, [r7, #32]
   1b67e:	0018      	movs	r0, r3
   1b680:	4b63      	ldr	r3, [pc, #396]	; (1b810 <xQueueReceive+0x35c>)
   1b682:	4798      	blx	r3
   1b684:	0003      	movs	r3, r0
   1b686:	b2db      	uxtb	r3, r3
   1b688:	001a      	movs	r2, r3
   1b68a:	0021      	movs	r1, r4
   1b68c:	0028      	movs	r0, r5
   1b68e:	4b61      	ldr	r3, [pc, #388]	; (1b814 <xQueueReceive+0x360>)
   1b690:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1b692:	2300      	movs	r3, #0
   1b694:	e120      	b.n	1b8d8 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b698:	2b00      	cmp	r3, #0
   1b69a:	d106      	bne.n	1b6aa <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b69c:	2314      	movs	r3, #20
   1b69e:	18fb      	adds	r3, r7, r3
   1b6a0:	0018      	movs	r0, r3
   1b6a2:	4b62      	ldr	r3, [pc, #392]	; (1b82c <xQueueReceive+0x378>)
   1b6a4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b6a6:	2301      	movs	r3, #1
   1b6a8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b6aa:	4b5f      	ldr	r3, [pc, #380]	; (1b828 <xQueueReceive+0x374>)
   1b6ac:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b6ae:	4b60      	ldr	r3, [pc, #384]	; (1b830 <xQueueReceive+0x37c>)
   1b6b0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b6b2:	4b4f      	ldr	r3, [pc, #316]	; (1b7f0 <xQueueReceive+0x33c>)
   1b6b4:	4798      	blx	r3
   1b6b6:	6a3b      	ldr	r3, [r7, #32]
   1b6b8:	2244      	movs	r2, #68	; 0x44
   1b6ba:	5c9b      	ldrb	r3, [r3, r2]
   1b6bc:	b25b      	sxtb	r3, r3
   1b6be:	3301      	adds	r3, #1
   1b6c0:	d103      	bne.n	1b6ca <xQueueReceive+0x216>
   1b6c2:	6a3b      	ldr	r3, [r7, #32]
   1b6c4:	2244      	movs	r2, #68	; 0x44
   1b6c6:	2100      	movs	r1, #0
   1b6c8:	5499      	strb	r1, [r3, r2]
   1b6ca:	6a3b      	ldr	r3, [r7, #32]
   1b6cc:	2245      	movs	r2, #69	; 0x45
   1b6ce:	5c9b      	ldrb	r3, [r3, r2]
   1b6d0:	b25b      	sxtb	r3, r3
   1b6d2:	3301      	adds	r3, #1
   1b6d4:	d103      	bne.n	1b6de <xQueueReceive+0x22a>
   1b6d6:	6a3b      	ldr	r3, [r7, #32]
   1b6d8:	2245      	movs	r2, #69	; 0x45
   1b6da:	2100      	movs	r1, #0
   1b6dc:	5499      	strb	r1, [r3, r2]
   1b6de:	4b52      	ldr	r3, [pc, #328]	; (1b828 <xQueueReceive+0x374>)
   1b6e0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b6e2:	1d3a      	adds	r2, r7, #4
   1b6e4:	2314      	movs	r3, #20
   1b6e6:	18fb      	adds	r3, r7, r3
   1b6e8:	0011      	movs	r1, r2
   1b6ea:	0018      	movs	r0, r3
   1b6ec:	4b51      	ldr	r3, [pc, #324]	; (1b834 <xQueueReceive+0x380>)
   1b6ee:	4798      	blx	r3
   1b6f0:	1e03      	subs	r3, r0, #0
   1b6f2:	d000      	beq.n	1b6f6 <xQueueReceive+0x242>
   1b6f4:	e0aa      	b.n	1b84c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b6f6:	6a3b      	ldr	r3, [r7, #32]
   1b6f8:	0018      	movs	r0, r3
   1b6fa:	4b4f      	ldr	r3, [pc, #316]	; (1b838 <xQueueReceive+0x384>)
   1b6fc:	4798      	blx	r3
   1b6fe:	1e03      	subs	r3, r0, #0
   1b700:	d06d      	beq.n	1b7de <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b702:	4b3d      	ldr	r3, [pc, #244]	; (1b7f8 <xQueueReceive+0x344>)
   1b704:	4798      	blx	r3
   1b706:	0003      	movs	r3, r0
   1b708:	0018      	movs	r0, r3
   1b70a:	4b3c      	ldr	r3, [pc, #240]	; (1b7fc <xQueueReceive+0x348>)
   1b70c:	4798      	blx	r3
   1b70e:	0003      	movs	r3, r0
   1b710:	001a      	movs	r2, r3
   1b712:	4b3b      	ldr	r3, [pc, #236]	; (1b800 <xQueueReceive+0x34c>)
   1b714:	881b      	ldrh	r3, [r3, #0]
   1b716:	4013      	ands	r3, r2
   1b718:	b29b      	uxth	r3, r3
   1b71a:	2b00      	cmp	r3, #0
   1b71c:	d029      	beq.n	1b772 <xQueueReceive+0x2be>
   1b71e:	6a3b      	ldr	r3, [r7, #32]
   1b720:	0018      	movs	r0, r3
   1b722:	4b38      	ldr	r3, [pc, #224]	; (1b804 <xQueueReceive+0x350>)
   1b724:	4798      	blx	r3
   1b726:	0003      	movs	r3, r0
   1b728:	001a      	movs	r2, r3
   1b72a:	4b35      	ldr	r3, [pc, #212]	; (1b800 <xQueueReceive+0x34c>)
   1b72c:	881b      	ldrh	r3, [r3, #0]
   1b72e:	4013      	ands	r3, r2
   1b730:	b29b      	uxth	r3, r3
   1b732:	2b00      	cmp	r3, #0
   1b734:	d01d      	beq.n	1b772 <xQueueReceive+0x2be>
   1b736:	6a3b      	ldr	r3, [r7, #32]
   1b738:	0018      	movs	r0, r3
   1b73a:	4b33      	ldr	r3, [pc, #204]	; (1b808 <xQueueReceive+0x354>)
   1b73c:	4798      	blx	r3
   1b73e:	0003      	movs	r3, r0
   1b740:	001a      	movs	r2, r3
   1b742:	4b32      	ldr	r3, [pc, #200]	; (1b80c <xQueueReceive+0x358>)
   1b744:	5c9b      	ldrb	r3, [r3, r2]
   1b746:	3368      	adds	r3, #104	; 0x68
   1b748:	b2db      	uxtb	r3, r3
   1b74a:	001d      	movs	r5, r3
   1b74c:	6a3b      	ldr	r3, [r7, #32]
   1b74e:	0018      	movs	r0, r3
   1b750:	4b2d      	ldr	r3, [pc, #180]	; (1b808 <xQueueReceive+0x354>)
   1b752:	4798      	blx	r3
   1b754:	0003      	movs	r3, r0
   1b756:	001a      	movs	r2, r3
   1b758:	4b2c      	ldr	r3, [pc, #176]	; (1b80c <xQueueReceive+0x358>)
   1b75a:	5c9c      	ldrb	r4, [r3, r2]
   1b75c:	6a3b      	ldr	r3, [r7, #32]
   1b75e:	0018      	movs	r0, r3
   1b760:	4b2b      	ldr	r3, [pc, #172]	; (1b810 <xQueueReceive+0x35c>)
   1b762:	4798      	blx	r3
   1b764:	0003      	movs	r3, r0
   1b766:	b2db      	uxtb	r3, r3
   1b768:	001a      	movs	r2, r3
   1b76a:	0021      	movs	r1, r4
   1b76c:	0028      	movs	r0, r5
   1b76e:	4b29      	ldr	r3, [pc, #164]	; (1b814 <xQueueReceive+0x360>)
   1b770:	4798      	blx	r3
   1b772:	6a3b      	ldr	r3, [r7, #32]
   1b774:	0018      	movs	r0, r3
   1b776:	4b24      	ldr	r3, [pc, #144]	; (1b808 <xQueueReceive+0x354>)
   1b778:	4798      	blx	r3
   1b77a:	0003      	movs	r3, r0
   1b77c:	001a      	movs	r2, r3
   1b77e:	4b23      	ldr	r3, [pc, #140]	; (1b80c <xQueueReceive+0x358>)
   1b780:	5c9b      	ldrb	r3, [r3, r2]
   1b782:	2b02      	cmp	r3, #2
   1b784:	d018      	beq.n	1b7b8 <xQueueReceive+0x304>
   1b786:	4b1c      	ldr	r3, [pc, #112]	; (1b7f8 <xQueueReceive+0x344>)
   1b788:	4798      	blx	r3
   1b78a:	0003      	movs	r3, r0
   1b78c:	0018      	movs	r0, r3
   1b78e:	4b1b      	ldr	r3, [pc, #108]	; (1b7fc <xQueueReceive+0x348>)
   1b790:	4798      	blx	r3
   1b792:	0003      	movs	r3, r0
   1b794:	001a      	movs	r2, r3
   1b796:	4b1a      	ldr	r3, [pc, #104]	; (1b800 <xQueueReceive+0x34c>)
   1b798:	881b      	ldrh	r3, [r3, #0]
   1b79a:	4013      	ands	r3, r2
   1b79c:	b29b      	uxth	r3, r3
   1b79e:	2b00      	cmp	r3, #0
   1b7a0:	d00a      	beq.n	1b7b8 <xQueueReceive+0x304>
   1b7a2:	4b15      	ldr	r3, [pc, #84]	; (1b7f8 <xQueueReceive+0x344>)
   1b7a4:	4798      	blx	r3
   1b7a6:	0003      	movs	r3, r0
   1b7a8:	0018      	movs	r0, r3
   1b7aa:	4b1b      	ldr	r3, [pc, #108]	; (1b818 <xQueueReceive+0x364>)
   1b7ac:	4798      	blx	r3
   1b7ae:	0003      	movs	r3, r0
   1b7b0:	b2db      	uxtb	r3, r3
   1b7b2:	0018      	movs	r0, r3
   1b7b4:	4b21      	ldr	r3, [pc, #132]	; (1b83c <xQueueReceive+0x388>)
   1b7b6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b7b8:	6a3b      	ldr	r3, [r7, #32]
   1b7ba:	3324      	adds	r3, #36	; 0x24
   1b7bc:	687a      	ldr	r2, [r7, #4]
   1b7be:	0011      	movs	r1, r2
   1b7c0:	0018      	movs	r0, r3
   1b7c2:	4b1f      	ldr	r3, [pc, #124]	; (1b840 <xQueueReceive+0x38c>)
   1b7c4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b7c6:	6a3b      	ldr	r3, [r7, #32]
   1b7c8:	0018      	movs	r0, r3
   1b7ca:	4b1e      	ldr	r3, [pc, #120]	; (1b844 <xQueueReceive+0x390>)
   1b7cc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b7ce:	4b1e      	ldr	r3, [pc, #120]	; (1b848 <xQueueReceive+0x394>)
   1b7d0:	4798      	blx	r3
   1b7d2:	1e03      	subs	r3, r0, #0
   1b7d4:	d000      	beq.n	1b7d8 <xQueueReceive+0x324>
   1b7d6:	e698      	b.n	1b50a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1b7d8:	4b12      	ldr	r3, [pc, #72]	; (1b824 <xQueueReceive+0x370>)
   1b7da:	4798      	blx	r3
   1b7dc:	e695      	b.n	1b50a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1b7de:	6a3b      	ldr	r3, [r7, #32]
   1b7e0:	0018      	movs	r0, r3
   1b7e2:	4b18      	ldr	r3, [pc, #96]	; (1b844 <xQueueReceive+0x390>)
   1b7e4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b7e6:	4b18      	ldr	r3, [pc, #96]	; (1b848 <xQueueReceive+0x394>)
   1b7e8:	4798      	blx	r3
   1b7ea:	e68e      	b.n	1b50a <xQueueReceive+0x56>
   1b7ec:	0001d389 	.word	0x0001d389
   1b7f0:	0001a669 	.word	0x0001a669
   1b7f4:	0001bf15 	.word	0x0001bf15
   1b7f8:	000188fd 	.word	0x000188fd
   1b7fc:	00018661 	.word	0x00018661
   1b800:	20000110 	.word	0x20000110
   1b804:	00018721 	.word	0x00018721
   1b808:	00018621 	.word	0x00018621
   1b80c:	20000104 	.word	0x20000104
   1b810:	00018701 	.word	0x00018701
   1b814:	00019059 	.word	0x00019059
   1b818:	00018641 	.word	0x00018641
   1b81c:	000196b5 	.word	0x000196b5
   1b820:	0001cef9 	.word	0x0001cef9
   1b824:	0001a651 	.word	0x0001a651
   1b828:	0001a68d 	.word	0x0001a68d
   1b82c:	0001d039 	.word	0x0001d039
   1b830:	0001c921 	.word	0x0001c921
   1b834:	0001d061 	.word	0x0001d061
   1b838:	0001c055 	.word	0x0001c055
   1b83c:	000197f1 	.word	0x000197f1
   1b840:	0001cdd5 	.word	0x0001cdd5
   1b844:	0001bf65 	.word	0x0001bf65
   1b848:	0001c939 	.word	0x0001c939
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1b84c:	6a3b      	ldr	r3, [r7, #32]
   1b84e:	0018      	movs	r0, r3
   1b850:	4b23      	ldr	r3, [pc, #140]	; (1b8e0 <xQueueReceive+0x42c>)
   1b852:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b854:	4b23      	ldr	r3, [pc, #140]	; (1b8e4 <xQueueReceive+0x430>)
   1b856:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b858:	6a3b      	ldr	r3, [r7, #32]
   1b85a:	0018      	movs	r0, r3
   1b85c:	4b22      	ldr	r3, [pc, #136]	; (1b8e8 <xQueueReceive+0x434>)
   1b85e:	4798      	blx	r3
   1b860:	1e03      	subs	r3, r0, #0
   1b862:	d100      	bne.n	1b866 <xQueueReceive+0x3b2>
   1b864:	e651      	b.n	1b50a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b866:	4b21      	ldr	r3, [pc, #132]	; (1b8ec <xQueueReceive+0x438>)
   1b868:	4798      	blx	r3
   1b86a:	0003      	movs	r3, r0
   1b86c:	0018      	movs	r0, r3
   1b86e:	4b20      	ldr	r3, [pc, #128]	; (1b8f0 <xQueueReceive+0x43c>)
   1b870:	4798      	blx	r3
   1b872:	0003      	movs	r3, r0
   1b874:	001a      	movs	r2, r3
   1b876:	4b1f      	ldr	r3, [pc, #124]	; (1b8f4 <xQueueReceive+0x440>)
   1b878:	881b      	ldrh	r3, [r3, #0]
   1b87a:	4013      	ands	r3, r2
   1b87c:	b29b      	uxth	r3, r3
   1b87e:	2b00      	cmp	r3, #0
   1b880:	d029      	beq.n	1b8d6 <xQueueReceive+0x422>
   1b882:	6a3b      	ldr	r3, [r7, #32]
   1b884:	0018      	movs	r0, r3
   1b886:	4b1c      	ldr	r3, [pc, #112]	; (1b8f8 <xQueueReceive+0x444>)
   1b888:	4798      	blx	r3
   1b88a:	0003      	movs	r3, r0
   1b88c:	001a      	movs	r2, r3
   1b88e:	4b19      	ldr	r3, [pc, #100]	; (1b8f4 <xQueueReceive+0x440>)
   1b890:	881b      	ldrh	r3, [r3, #0]
   1b892:	4013      	ands	r3, r2
   1b894:	b29b      	uxth	r3, r3
   1b896:	2b00      	cmp	r3, #0
   1b898:	d01d      	beq.n	1b8d6 <xQueueReceive+0x422>
   1b89a:	6a3b      	ldr	r3, [r7, #32]
   1b89c:	0018      	movs	r0, r3
   1b89e:	4b17      	ldr	r3, [pc, #92]	; (1b8fc <xQueueReceive+0x448>)
   1b8a0:	4798      	blx	r3
   1b8a2:	0003      	movs	r3, r0
   1b8a4:	001a      	movs	r2, r3
   1b8a6:	4b16      	ldr	r3, [pc, #88]	; (1b900 <xQueueReceive+0x44c>)
   1b8a8:	5c9b      	ldrb	r3, [r3, r2]
   1b8aa:	3350      	adds	r3, #80	; 0x50
   1b8ac:	b2db      	uxtb	r3, r3
   1b8ae:	001d      	movs	r5, r3
   1b8b0:	6a3b      	ldr	r3, [r7, #32]
   1b8b2:	0018      	movs	r0, r3
   1b8b4:	4b11      	ldr	r3, [pc, #68]	; (1b8fc <xQueueReceive+0x448>)
   1b8b6:	4798      	blx	r3
   1b8b8:	0003      	movs	r3, r0
   1b8ba:	001a      	movs	r2, r3
   1b8bc:	4b10      	ldr	r3, [pc, #64]	; (1b900 <xQueueReceive+0x44c>)
   1b8be:	5c9c      	ldrb	r4, [r3, r2]
   1b8c0:	6a3b      	ldr	r3, [r7, #32]
   1b8c2:	0018      	movs	r0, r3
   1b8c4:	4b0f      	ldr	r3, [pc, #60]	; (1b904 <xQueueReceive+0x450>)
   1b8c6:	4798      	blx	r3
   1b8c8:	0003      	movs	r3, r0
   1b8ca:	b2db      	uxtb	r3, r3
   1b8cc:	001a      	movs	r2, r3
   1b8ce:	0021      	movs	r1, r4
   1b8d0:	0028      	movs	r0, r5
   1b8d2:	4b0d      	ldr	r3, [pc, #52]	; (1b908 <xQueueReceive+0x454>)
   1b8d4:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b8d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b8d8:	0018      	movs	r0, r3
   1b8da:	46bd      	mov	sp, r7
   1b8dc:	b00a      	add	sp, #40	; 0x28
   1b8de:	bdb0      	pop	{r4, r5, r7, pc}
   1b8e0:	0001bf65 	.word	0x0001bf65
   1b8e4:	0001c939 	.word	0x0001c939
   1b8e8:	0001c055 	.word	0x0001c055
   1b8ec:	000188fd 	.word	0x000188fd
   1b8f0:	00018661 	.word	0x00018661
   1b8f4:	20000110 	.word	0x20000110
   1b8f8:	00018721 	.word	0x00018721
   1b8fc:	00018621 	.word	0x00018621
   1b900:	20000104 	.word	0x20000104
   1b904:	00018701 	.word	0x00018701
   1b908:	00019059 	.word	0x00019059

0001b90c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1b90c:	b5b0      	push	{r4, r5, r7, lr}
   1b90e:	b08a      	sub	sp, #40	; 0x28
   1b910:	af00      	add	r7, sp, #0
   1b912:	6078      	str	r0, [r7, #4]
   1b914:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1b916:	2300      	movs	r3, #0
   1b918:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b91a:	687b      	ldr	r3, [r7, #4]
   1b91c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1b91e:	2300      	movs	r3, #0
   1b920:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b922:	69fb      	ldr	r3, [r7, #28]
   1b924:	2b00      	cmp	r3, #0
   1b926:	d101      	bne.n	1b92c <xQueueSemaphoreTake+0x20>
   1b928:	b672      	cpsid	i
   1b92a:	e7fe      	b.n	1b92a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b92c:	69fb      	ldr	r3, [r7, #28]
   1b92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b930:	2b00      	cmp	r3, #0
   1b932:	d001      	beq.n	1b938 <xQueueSemaphoreTake+0x2c>
   1b934:	b672      	cpsid	i
   1b936:	e7fe      	b.n	1b936 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b938:	4bcb      	ldr	r3, [pc, #812]	; (1bc68 <xQueueSemaphoreTake+0x35c>)
   1b93a:	4798      	blx	r3
   1b93c:	1e03      	subs	r3, r0, #0
   1b93e:	d102      	bne.n	1b946 <xQueueSemaphoreTake+0x3a>
   1b940:	683b      	ldr	r3, [r7, #0]
   1b942:	2b00      	cmp	r3, #0
   1b944:	d101      	bne.n	1b94a <xQueueSemaphoreTake+0x3e>
   1b946:	2301      	movs	r3, #1
   1b948:	e000      	b.n	1b94c <xQueueSemaphoreTake+0x40>
   1b94a:	2300      	movs	r3, #0
   1b94c:	2b00      	cmp	r3, #0
   1b94e:	d101      	bne.n	1b954 <xQueueSemaphoreTake+0x48>
   1b950:	b672      	cpsid	i
   1b952:	e7fe      	b.n	1b952 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b954:	4bc5      	ldr	r3, [pc, #788]	; (1bc6c <xQueueSemaphoreTake+0x360>)
   1b956:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1b958:	69fb      	ldr	r3, [r7, #28]
   1b95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b95c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1b95e:	69bb      	ldr	r3, [r7, #24]
   1b960:	2b00      	cmp	r3, #0
   1b962:	d100      	bne.n	1b966 <xQueueSemaphoreTake+0x5a>
   1b964:	e080      	b.n	1ba68 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1b966:	4bc2      	ldr	r3, [pc, #776]	; (1bc70 <xQueueSemaphoreTake+0x364>)
   1b968:	4798      	blx	r3
   1b96a:	0003      	movs	r3, r0
   1b96c:	0018      	movs	r0, r3
   1b96e:	4bc1      	ldr	r3, [pc, #772]	; (1bc74 <xQueueSemaphoreTake+0x368>)
   1b970:	4798      	blx	r3
   1b972:	0003      	movs	r3, r0
   1b974:	001a      	movs	r2, r3
   1b976:	4bc0      	ldr	r3, [pc, #768]	; (1bc78 <xQueueSemaphoreTake+0x36c>)
   1b978:	881b      	ldrh	r3, [r3, #0]
   1b97a:	4013      	ands	r3, r2
   1b97c:	b29b      	uxth	r3, r3
   1b97e:	2b00      	cmp	r3, #0
   1b980:	d029      	beq.n	1b9d6 <xQueueSemaphoreTake+0xca>
   1b982:	69fb      	ldr	r3, [r7, #28]
   1b984:	0018      	movs	r0, r3
   1b986:	4bbd      	ldr	r3, [pc, #756]	; (1bc7c <xQueueSemaphoreTake+0x370>)
   1b988:	4798      	blx	r3
   1b98a:	0003      	movs	r3, r0
   1b98c:	001a      	movs	r2, r3
   1b98e:	4bba      	ldr	r3, [pc, #744]	; (1bc78 <xQueueSemaphoreTake+0x36c>)
   1b990:	881b      	ldrh	r3, [r3, #0]
   1b992:	4013      	ands	r3, r2
   1b994:	b29b      	uxth	r3, r3
   1b996:	2b00      	cmp	r3, #0
   1b998:	d01d      	beq.n	1b9d6 <xQueueSemaphoreTake+0xca>
   1b99a:	69fb      	ldr	r3, [r7, #28]
   1b99c:	0018      	movs	r0, r3
   1b99e:	4bb8      	ldr	r3, [pc, #736]	; (1bc80 <xQueueSemaphoreTake+0x374>)
   1b9a0:	4798      	blx	r3
   1b9a2:	0003      	movs	r3, r0
   1b9a4:	001a      	movs	r2, r3
   1b9a6:	4bb7      	ldr	r3, [pc, #732]	; (1bc84 <xQueueSemaphoreTake+0x378>)
   1b9a8:	5c9b      	ldrb	r3, [r3, r2]
   1b9aa:	3328      	adds	r3, #40	; 0x28
   1b9ac:	b2db      	uxtb	r3, r3
   1b9ae:	001d      	movs	r5, r3
   1b9b0:	69fb      	ldr	r3, [r7, #28]
   1b9b2:	0018      	movs	r0, r3
   1b9b4:	4bb2      	ldr	r3, [pc, #712]	; (1bc80 <xQueueSemaphoreTake+0x374>)
   1b9b6:	4798      	blx	r3
   1b9b8:	0003      	movs	r3, r0
   1b9ba:	001a      	movs	r2, r3
   1b9bc:	4bb1      	ldr	r3, [pc, #708]	; (1bc84 <xQueueSemaphoreTake+0x378>)
   1b9be:	5c9c      	ldrb	r4, [r3, r2]
   1b9c0:	69fb      	ldr	r3, [r7, #28]
   1b9c2:	0018      	movs	r0, r3
   1b9c4:	4bb0      	ldr	r3, [pc, #704]	; (1bc88 <xQueueSemaphoreTake+0x37c>)
   1b9c6:	4798      	blx	r3
   1b9c8:	0003      	movs	r3, r0
   1b9ca:	b2db      	uxtb	r3, r3
   1b9cc:	001a      	movs	r2, r3
   1b9ce:	0021      	movs	r1, r4
   1b9d0:	0028      	movs	r0, r5
   1b9d2:	4bae      	ldr	r3, [pc, #696]	; (1bc8c <xQueueSemaphoreTake+0x380>)
   1b9d4:	4798      	blx	r3
   1b9d6:	69fb      	ldr	r3, [r7, #28]
   1b9d8:	0018      	movs	r0, r3
   1b9da:	4ba9      	ldr	r3, [pc, #676]	; (1bc80 <xQueueSemaphoreTake+0x374>)
   1b9dc:	4798      	blx	r3
   1b9de:	0003      	movs	r3, r0
   1b9e0:	001a      	movs	r2, r3
   1b9e2:	4ba8      	ldr	r3, [pc, #672]	; (1bc84 <xQueueSemaphoreTake+0x378>)
   1b9e4:	5c9c      	ldrb	r4, [r3, r2]
   1b9e6:	69fb      	ldr	r3, [r7, #28]
   1b9e8:	0018      	movs	r0, r3
   1b9ea:	4ba7      	ldr	r3, [pc, #668]	; (1bc88 <xQueueSemaphoreTake+0x37c>)
   1b9ec:	4798      	blx	r3
   1b9ee:	0003      	movs	r3, r0
   1b9f0:	b2dd      	uxtb	r5, r3
   1b9f2:	69fb      	ldr	r3, [r7, #28]
   1b9f4:	0018      	movs	r0, r3
   1b9f6:	4ba2      	ldr	r3, [pc, #648]	; (1bc80 <xQueueSemaphoreTake+0x374>)
   1b9f8:	4798      	blx	r3
   1b9fa:	0003      	movs	r3, r0
   1b9fc:	001a      	movs	r2, r3
   1b9fe:	4ba1      	ldr	r3, [pc, #644]	; (1bc84 <xQueueSemaphoreTake+0x378>)
   1ba00:	5c9b      	ldrb	r3, [r3, r2]
   1ba02:	2b02      	cmp	r3, #2
   1ba04:	d108      	bne.n	1ba18 <xQueueSemaphoreTake+0x10c>
   1ba06:	4b9a      	ldr	r3, [pc, #616]	; (1bc70 <xQueueSemaphoreTake+0x364>)
   1ba08:	4798      	blx	r3
   1ba0a:	0003      	movs	r3, r0
   1ba0c:	0018      	movs	r0, r3
   1ba0e:	4ba0      	ldr	r3, [pc, #640]	; (1bc90 <xQueueSemaphoreTake+0x384>)
   1ba10:	4798      	blx	r3
   1ba12:	0003      	movs	r3, r0
   1ba14:	b2db      	uxtb	r3, r3
   1ba16:	e004      	b.n	1ba22 <xQueueSemaphoreTake+0x116>
   1ba18:	69fb      	ldr	r3, [r7, #28]
   1ba1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ba1c:	b2db      	uxtb	r3, r3
   1ba1e:	3b01      	subs	r3, #1
   1ba20:	b2db      	uxtb	r3, r3
   1ba22:	001a      	movs	r2, r3
   1ba24:	0029      	movs	r1, r5
   1ba26:	0020      	movs	r0, r4
   1ba28:	4b9a      	ldr	r3, [pc, #616]	; (1bc94 <xQueueSemaphoreTake+0x388>)
   1ba2a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1ba2c:	69bb      	ldr	r3, [r7, #24]
   1ba2e:	1e5a      	subs	r2, r3, #1
   1ba30:	69fb      	ldr	r3, [r7, #28]
   1ba32:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1ba34:	69fb      	ldr	r3, [r7, #28]
   1ba36:	681b      	ldr	r3, [r3, #0]
   1ba38:	2b00      	cmp	r3, #0
   1ba3a:	d104      	bne.n	1ba46 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1ba3c:	4b96      	ldr	r3, [pc, #600]	; (1bc98 <xQueueSemaphoreTake+0x38c>)
   1ba3e:	4798      	blx	r3
   1ba40:	0002      	movs	r2, r0
   1ba42:	69fb      	ldr	r3, [r7, #28]
   1ba44:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ba46:	69fb      	ldr	r3, [r7, #28]
   1ba48:	691b      	ldr	r3, [r3, #16]
   1ba4a:	2b00      	cmp	r3, #0
   1ba4c:	d008      	beq.n	1ba60 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ba4e:	69fb      	ldr	r3, [r7, #28]
   1ba50:	3310      	adds	r3, #16
   1ba52:	0018      	movs	r0, r3
   1ba54:	4b91      	ldr	r3, [pc, #580]	; (1bc9c <xQueueSemaphoreTake+0x390>)
   1ba56:	4798      	blx	r3
   1ba58:	1e03      	subs	r3, r0, #0
   1ba5a:	d001      	beq.n	1ba60 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1ba5c:	4b90      	ldr	r3, [pc, #576]	; (1bca0 <xQueueSemaphoreTake+0x394>)
   1ba5e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1ba60:	4b90      	ldr	r3, [pc, #576]	; (1bca4 <xQueueSemaphoreTake+0x398>)
   1ba62:	4798      	blx	r3
				return pdPASS;
   1ba64:	2301      	movs	r3, #1
   1ba66:	e18b      	b.n	1bd80 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1ba68:	683b      	ldr	r3, [r7, #0]
   1ba6a:	2b00      	cmp	r3, #0
   1ba6c:	d140      	bne.n	1baf0 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1ba6e:	6a3b      	ldr	r3, [r7, #32]
   1ba70:	2b00      	cmp	r3, #0
   1ba72:	d001      	beq.n	1ba78 <xQueueSemaphoreTake+0x16c>
   1ba74:	b672      	cpsid	i
   1ba76:	e7fe      	b.n	1ba76 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1ba78:	4b8a      	ldr	r3, [pc, #552]	; (1bca4 <xQueueSemaphoreTake+0x398>)
   1ba7a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1ba7c:	4b7c      	ldr	r3, [pc, #496]	; (1bc70 <xQueueSemaphoreTake+0x364>)
   1ba7e:	4798      	blx	r3
   1ba80:	0003      	movs	r3, r0
   1ba82:	0018      	movs	r0, r3
   1ba84:	4b7b      	ldr	r3, [pc, #492]	; (1bc74 <xQueueSemaphoreTake+0x368>)
   1ba86:	4798      	blx	r3
   1ba88:	0003      	movs	r3, r0
   1ba8a:	001a      	movs	r2, r3
   1ba8c:	4b7a      	ldr	r3, [pc, #488]	; (1bc78 <xQueueSemaphoreTake+0x36c>)
   1ba8e:	881b      	ldrh	r3, [r3, #0]
   1ba90:	4013      	ands	r3, r2
   1ba92:	b29b      	uxth	r3, r3
   1ba94:	2b00      	cmp	r3, #0
   1ba96:	d029      	beq.n	1baec <xQueueSemaphoreTake+0x1e0>
   1ba98:	69fb      	ldr	r3, [r7, #28]
   1ba9a:	0018      	movs	r0, r3
   1ba9c:	4b77      	ldr	r3, [pc, #476]	; (1bc7c <xQueueSemaphoreTake+0x370>)
   1ba9e:	4798      	blx	r3
   1baa0:	0003      	movs	r3, r0
   1baa2:	001a      	movs	r2, r3
   1baa4:	4b74      	ldr	r3, [pc, #464]	; (1bc78 <xQueueSemaphoreTake+0x36c>)
   1baa6:	881b      	ldrh	r3, [r3, #0]
   1baa8:	4013      	ands	r3, r2
   1baaa:	b29b      	uxth	r3, r3
   1baac:	2b00      	cmp	r3, #0
   1baae:	d01d      	beq.n	1baec <xQueueSemaphoreTake+0x1e0>
   1bab0:	69fb      	ldr	r3, [r7, #28]
   1bab2:	0018      	movs	r0, r3
   1bab4:	4b72      	ldr	r3, [pc, #456]	; (1bc80 <xQueueSemaphoreTake+0x374>)
   1bab6:	4798      	blx	r3
   1bab8:	0003      	movs	r3, r0
   1baba:	001a      	movs	r2, r3
   1babc:	4b71      	ldr	r3, [pc, #452]	; (1bc84 <xQueueSemaphoreTake+0x378>)
   1babe:	5c9b      	ldrb	r3, [r3, r2]
   1bac0:	3350      	adds	r3, #80	; 0x50
   1bac2:	b2db      	uxtb	r3, r3
   1bac4:	001d      	movs	r5, r3
   1bac6:	69fb      	ldr	r3, [r7, #28]
   1bac8:	0018      	movs	r0, r3
   1baca:	4b6d      	ldr	r3, [pc, #436]	; (1bc80 <xQueueSemaphoreTake+0x374>)
   1bacc:	4798      	blx	r3
   1bace:	0003      	movs	r3, r0
   1bad0:	001a      	movs	r2, r3
   1bad2:	4b6c      	ldr	r3, [pc, #432]	; (1bc84 <xQueueSemaphoreTake+0x378>)
   1bad4:	5c9c      	ldrb	r4, [r3, r2]
   1bad6:	69fb      	ldr	r3, [r7, #28]
   1bad8:	0018      	movs	r0, r3
   1bada:	4b6b      	ldr	r3, [pc, #428]	; (1bc88 <xQueueSemaphoreTake+0x37c>)
   1badc:	4798      	blx	r3
   1bade:	0003      	movs	r3, r0
   1bae0:	b2db      	uxtb	r3, r3
   1bae2:	001a      	movs	r2, r3
   1bae4:	0021      	movs	r1, r4
   1bae6:	0028      	movs	r0, r5
   1bae8:	4b68      	ldr	r3, [pc, #416]	; (1bc8c <xQueueSemaphoreTake+0x380>)
   1baea:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1baec:	2300      	movs	r3, #0
   1baee:	e147      	b.n	1bd80 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1baf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1baf2:	2b00      	cmp	r3, #0
   1baf4:	d106      	bne.n	1bb04 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1baf6:	230c      	movs	r3, #12
   1baf8:	18fb      	adds	r3, r7, r3
   1bafa:	0018      	movs	r0, r3
   1bafc:	4b6a      	ldr	r3, [pc, #424]	; (1bca8 <xQueueSemaphoreTake+0x39c>)
   1bafe:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1bb00:	2301      	movs	r3, #1
   1bb02:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1bb04:	4b67      	ldr	r3, [pc, #412]	; (1bca4 <xQueueSemaphoreTake+0x398>)
   1bb06:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1bb08:	4b68      	ldr	r3, [pc, #416]	; (1bcac <xQueueSemaphoreTake+0x3a0>)
   1bb0a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1bb0c:	4b57      	ldr	r3, [pc, #348]	; (1bc6c <xQueueSemaphoreTake+0x360>)
   1bb0e:	4798      	blx	r3
   1bb10:	69fb      	ldr	r3, [r7, #28]
   1bb12:	2244      	movs	r2, #68	; 0x44
   1bb14:	5c9b      	ldrb	r3, [r3, r2]
   1bb16:	b25b      	sxtb	r3, r3
   1bb18:	3301      	adds	r3, #1
   1bb1a:	d103      	bne.n	1bb24 <xQueueSemaphoreTake+0x218>
   1bb1c:	69fb      	ldr	r3, [r7, #28]
   1bb1e:	2244      	movs	r2, #68	; 0x44
   1bb20:	2100      	movs	r1, #0
   1bb22:	5499      	strb	r1, [r3, r2]
   1bb24:	69fb      	ldr	r3, [r7, #28]
   1bb26:	2245      	movs	r2, #69	; 0x45
   1bb28:	5c9b      	ldrb	r3, [r3, r2]
   1bb2a:	b25b      	sxtb	r3, r3
   1bb2c:	3301      	adds	r3, #1
   1bb2e:	d103      	bne.n	1bb38 <xQueueSemaphoreTake+0x22c>
   1bb30:	69fb      	ldr	r3, [r7, #28]
   1bb32:	2245      	movs	r2, #69	; 0x45
   1bb34:	2100      	movs	r1, #0
   1bb36:	5499      	strb	r1, [r3, r2]
   1bb38:	4b5a      	ldr	r3, [pc, #360]	; (1bca4 <xQueueSemaphoreTake+0x398>)
   1bb3a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1bb3c:	003a      	movs	r2, r7
   1bb3e:	230c      	movs	r3, #12
   1bb40:	18fb      	adds	r3, r7, r3
   1bb42:	0011      	movs	r1, r2
   1bb44:	0018      	movs	r0, r3
   1bb46:	4b5a      	ldr	r3, [pc, #360]	; (1bcb0 <xQueueSemaphoreTake+0x3a4>)
   1bb48:	4798      	blx	r3
   1bb4a:	1e03      	subs	r3, r0, #0
   1bb4c:	d000      	beq.n	1bb50 <xQueueSemaphoreTake+0x244>
   1bb4e:	e0bd      	b.n	1bccc <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1bb50:	69fb      	ldr	r3, [r7, #28]
   1bb52:	0018      	movs	r0, r3
   1bb54:	4b57      	ldr	r3, [pc, #348]	; (1bcb4 <xQueueSemaphoreTake+0x3a8>)
   1bb56:	4798      	blx	r3
   1bb58:	1e03      	subs	r3, r0, #0
   1bb5a:	d100      	bne.n	1bb5e <xQueueSemaphoreTake+0x252>
   1bb5c:	e07c      	b.n	1bc58 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1bb5e:	4b44      	ldr	r3, [pc, #272]	; (1bc70 <xQueueSemaphoreTake+0x364>)
   1bb60:	4798      	blx	r3
   1bb62:	0003      	movs	r3, r0
   1bb64:	0018      	movs	r0, r3
   1bb66:	4b43      	ldr	r3, [pc, #268]	; (1bc74 <xQueueSemaphoreTake+0x368>)
   1bb68:	4798      	blx	r3
   1bb6a:	0003      	movs	r3, r0
   1bb6c:	001a      	movs	r2, r3
   1bb6e:	4b42      	ldr	r3, [pc, #264]	; (1bc78 <xQueueSemaphoreTake+0x36c>)
   1bb70:	881b      	ldrh	r3, [r3, #0]
   1bb72:	4013      	ands	r3, r2
   1bb74:	b29b      	uxth	r3, r3
   1bb76:	2b00      	cmp	r3, #0
   1bb78:	d029      	beq.n	1bbce <xQueueSemaphoreTake+0x2c2>
   1bb7a:	69fb      	ldr	r3, [r7, #28]
   1bb7c:	0018      	movs	r0, r3
   1bb7e:	4b3f      	ldr	r3, [pc, #252]	; (1bc7c <xQueueSemaphoreTake+0x370>)
   1bb80:	4798      	blx	r3
   1bb82:	0003      	movs	r3, r0
   1bb84:	001a      	movs	r2, r3
   1bb86:	4b3c      	ldr	r3, [pc, #240]	; (1bc78 <xQueueSemaphoreTake+0x36c>)
   1bb88:	881b      	ldrh	r3, [r3, #0]
   1bb8a:	4013      	ands	r3, r2
   1bb8c:	b29b      	uxth	r3, r3
   1bb8e:	2b00      	cmp	r3, #0
   1bb90:	d01d      	beq.n	1bbce <xQueueSemaphoreTake+0x2c2>
   1bb92:	69fb      	ldr	r3, [r7, #28]
   1bb94:	0018      	movs	r0, r3
   1bb96:	4b3a      	ldr	r3, [pc, #232]	; (1bc80 <xQueueSemaphoreTake+0x374>)
   1bb98:	4798      	blx	r3
   1bb9a:	0003      	movs	r3, r0
   1bb9c:	001a      	movs	r2, r3
   1bb9e:	4b39      	ldr	r3, [pc, #228]	; (1bc84 <xQueueSemaphoreTake+0x378>)
   1bba0:	5c9b      	ldrb	r3, [r3, r2]
   1bba2:	3368      	adds	r3, #104	; 0x68
   1bba4:	b2db      	uxtb	r3, r3
   1bba6:	001d      	movs	r5, r3
   1bba8:	69fb      	ldr	r3, [r7, #28]
   1bbaa:	0018      	movs	r0, r3
   1bbac:	4b34      	ldr	r3, [pc, #208]	; (1bc80 <xQueueSemaphoreTake+0x374>)
   1bbae:	4798      	blx	r3
   1bbb0:	0003      	movs	r3, r0
   1bbb2:	001a      	movs	r2, r3
   1bbb4:	4b33      	ldr	r3, [pc, #204]	; (1bc84 <xQueueSemaphoreTake+0x378>)
   1bbb6:	5c9c      	ldrb	r4, [r3, r2]
   1bbb8:	69fb      	ldr	r3, [r7, #28]
   1bbba:	0018      	movs	r0, r3
   1bbbc:	4b32      	ldr	r3, [pc, #200]	; (1bc88 <xQueueSemaphoreTake+0x37c>)
   1bbbe:	4798      	blx	r3
   1bbc0:	0003      	movs	r3, r0
   1bbc2:	b2db      	uxtb	r3, r3
   1bbc4:	001a      	movs	r2, r3
   1bbc6:	0021      	movs	r1, r4
   1bbc8:	0028      	movs	r0, r5
   1bbca:	4b30      	ldr	r3, [pc, #192]	; (1bc8c <xQueueSemaphoreTake+0x380>)
   1bbcc:	4798      	blx	r3
   1bbce:	69fb      	ldr	r3, [r7, #28]
   1bbd0:	0018      	movs	r0, r3
   1bbd2:	4b2b      	ldr	r3, [pc, #172]	; (1bc80 <xQueueSemaphoreTake+0x374>)
   1bbd4:	4798      	blx	r3
   1bbd6:	0003      	movs	r3, r0
   1bbd8:	001a      	movs	r2, r3
   1bbda:	4b2a      	ldr	r3, [pc, #168]	; (1bc84 <xQueueSemaphoreTake+0x378>)
   1bbdc:	5c9b      	ldrb	r3, [r3, r2]
   1bbde:	2b02      	cmp	r3, #2
   1bbe0:	d018      	beq.n	1bc14 <xQueueSemaphoreTake+0x308>
   1bbe2:	4b23      	ldr	r3, [pc, #140]	; (1bc70 <xQueueSemaphoreTake+0x364>)
   1bbe4:	4798      	blx	r3
   1bbe6:	0003      	movs	r3, r0
   1bbe8:	0018      	movs	r0, r3
   1bbea:	4b22      	ldr	r3, [pc, #136]	; (1bc74 <xQueueSemaphoreTake+0x368>)
   1bbec:	4798      	blx	r3
   1bbee:	0003      	movs	r3, r0
   1bbf0:	001a      	movs	r2, r3
   1bbf2:	4b21      	ldr	r3, [pc, #132]	; (1bc78 <xQueueSemaphoreTake+0x36c>)
   1bbf4:	881b      	ldrh	r3, [r3, #0]
   1bbf6:	4013      	ands	r3, r2
   1bbf8:	b29b      	uxth	r3, r3
   1bbfa:	2b00      	cmp	r3, #0
   1bbfc:	d00a      	beq.n	1bc14 <xQueueSemaphoreTake+0x308>
   1bbfe:	4b1c      	ldr	r3, [pc, #112]	; (1bc70 <xQueueSemaphoreTake+0x364>)
   1bc00:	4798      	blx	r3
   1bc02:	0003      	movs	r3, r0
   1bc04:	0018      	movs	r0, r3
   1bc06:	4b22      	ldr	r3, [pc, #136]	; (1bc90 <xQueueSemaphoreTake+0x384>)
   1bc08:	4798      	blx	r3
   1bc0a:	0003      	movs	r3, r0
   1bc0c:	b2db      	uxtb	r3, r3
   1bc0e:	0018      	movs	r0, r3
   1bc10:	4b29      	ldr	r3, [pc, #164]	; (1bcb8 <xQueueSemaphoreTake+0x3ac>)
   1bc12:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1bc14:	69fb      	ldr	r3, [r7, #28]
   1bc16:	681b      	ldr	r3, [r3, #0]
   1bc18:	2b00      	cmp	r3, #0
   1bc1a:	d10a      	bne.n	1bc32 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1bc1c:	4b13      	ldr	r3, [pc, #76]	; (1bc6c <xQueueSemaphoreTake+0x360>)
   1bc1e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1bc20:	69fb      	ldr	r3, [r7, #28]
   1bc22:	685b      	ldr	r3, [r3, #4]
   1bc24:	0018      	movs	r0, r3
   1bc26:	4b25      	ldr	r3, [pc, #148]	; (1bcbc <xQueueSemaphoreTake+0x3b0>)
   1bc28:	4798      	blx	r3
   1bc2a:	0003      	movs	r3, r0
   1bc2c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1bc2e:	4b1d      	ldr	r3, [pc, #116]	; (1bca4 <xQueueSemaphoreTake+0x398>)
   1bc30:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1bc32:	69fb      	ldr	r3, [r7, #28]
   1bc34:	3324      	adds	r3, #36	; 0x24
   1bc36:	683a      	ldr	r2, [r7, #0]
   1bc38:	0011      	movs	r1, r2
   1bc3a:	0018      	movs	r0, r3
   1bc3c:	4b20      	ldr	r3, [pc, #128]	; (1bcc0 <xQueueSemaphoreTake+0x3b4>)
   1bc3e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1bc40:	69fb      	ldr	r3, [r7, #28]
   1bc42:	0018      	movs	r0, r3
   1bc44:	4b1f      	ldr	r3, [pc, #124]	; (1bcc4 <xQueueSemaphoreTake+0x3b8>)
   1bc46:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1bc48:	4b1f      	ldr	r3, [pc, #124]	; (1bcc8 <xQueueSemaphoreTake+0x3bc>)
   1bc4a:	4798      	blx	r3
   1bc4c:	1e03      	subs	r3, r0, #0
   1bc4e:	d000      	beq.n	1bc52 <xQueueSemaphoreTake+0x346>
   1bc50:	e680      	b.n	1b954 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1bc52:	4b13      	ldr	r3, [pc, #76]	; (1bca0 <xQueueSemaphoreTake+0x394>)
   1bc54:	4798      	blx	r3
   1bc56:	e67d      	b.n	1b954 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1bc58:	69fb      	ldr	r3, [r7, #28]
   1bc5a:	0018      	movs	r0, r3
   1bc5c:	4b19      	ldr	r3, [pc, #100]	; (1bcc4 <xQueueSemaphoreTake+0x3b8>)
   1bc5e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1bc60:	4b19      	ldr	r3, [pc, #100]	; (1bcc8 <xQueueSemaphoreTake+0x3bc>)
   1bc62:	4798      	blx	r3
   1bc64:	e676      	b.n	1b954 <xQueueSemaphoreTake+0x48>
   1bc66:	46c0      	nop			; (mov r8, r8)
   1bc68:	0001d389 	.word	0x0001d389
   1bc6c:	0001a669 	.word	0x0001a669
   1bc70:	000188fd 	.word	0x000188fd
   1bc74:	00018661 	.word	0x00018661
   1bc78:	20000110 	.word	0x20000110
   1bc7c:	00018721 	.word	0x00018721
   1bc80:	00018621 	.word	0x00018621
   1bc84:	20000104 	.word	0x20000104
   1bc88:	00018701 	.word	0x00018701
   1bc8c:	00019059 	.word	0x00019059
   1bc90:	00018641 	.word	0x00018641
   1bc94:	000196b5 	.word	0x000196b5
   1bc98:	0001d855 	.word	0x0001d855
   1bc9c:	0001cef9 	.word	0x0001cef9
   1bca0:	0001a651 	.word	0x0001a651
   1bca4:	0001a68d 	.word	0x0001a68d
   1bca8:	0001d039 	.word	0x0001d039
   1bcac:	0001c921 	.word	0x0001c921
   1bcb0:	0001d061 	.word	0x0001d061
   1bcb4:	0001c055 	.word	0x0001c055
   1bcb8:	000197f1 	.word	0x000197f1
   1bcbc:	0001d3c1 	.word	0x0001d3c1
   1bcc0:	0001cdd5 	.word	0x0001cdd5
   1bcc4:	0001bf65 	.word	0x0001bf65
   1bcc8:	0001c939 	.word	0x0001c939
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1bccc:	69fb      	ldr	r3, [r7, #28]
   1bcce:	0018      	movs	r0, r3
   1bcd0:	4b2d      	ldr	r3, [pc, #180]	; (1bd88 <xQueueSemaphoreTake+0x47c>)
   1bcd2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1bcd4:	4b2d      	ldr	r3, [pc, #180]	; (1bd8c <xQueueSemaphoreTake+0x480>)
   1bcd6:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1bcd8:	69fb      	ldr	r3, [r7, #28]
   1bcda:	0018      	movs	r0, r3
   1bcdc:	4b2c      	ldr	r3, [pc, #176]	; (1bd90 <xQueueSemaphoreTake+0x484>)
   1bcde:	4798      	blx	r3
   1bce0:	1e03      	subs	r3, r0, #0
   1bce2:	d100      	bne.n	1bce6 <xQueueSemaphoreTake+0x3da>
   1bce4:	e636      	b.n	1b954 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1bce6:	6a3b      	ldr	r3, [r7, #32]
   1bce8:	2b00      	cmp	r3, #0
   1bcea:	d010      	beq.n	1bd0e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1bcec:	4b29      	ldr	r3, [pc, #164]	; (1bd94 <xQueueSemaphoreTake+0x488>)
   1bcee:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1bcf0:	69fb      	ldr	r3, [r7, #28]
   1bcf2:	0018      	movs	r0, r3
   1bcf4:	4b28      	ldr	r3, [pc, #160]	; (1bd98 <xQueueSemaphoreTake+0x48c>)
   1bcf6:	4798      	blx	r3
   1bcf8:	0003      	movs	r3, r0
   1bcfa:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1bcfc:	69fb      	ldr	r3, [r7, #28]
   1bcfe:	685b      	ldr	r3, [r3, #4]
   1bd00:	697a      	ldr	r2, [r7, #20]
   1bd02:	0011      	movs	r1, r2
   1bd04:	0018      	movs	r0, r3
   1bd06:	4b25      	ldr	r3, [pc, #148]	; (1bd9c <xQueueSemaphoreTake+0x490>)
   1bd08:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1bd0a:	4b25      	ldr	r3, [pc, #148]	; (1bda0 <xQueueSemaphoreTake+0x494>)
   1bd0c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bd0e:	4b25      	ldr	r3, [pc, #148]	; (1bda4 <xQueueSemaphoreTake+0x498>)
   1bd10:	4798      	blx	r3
   1bd12:	0003      	movs	r3, r0
   1bd14:	0018      	movs	r0, r3
   1bd16:	4b24      	ldr	r3, [pc, #144]	; (1bda8 <xQueueSemaphoreTake+0x49c>)
   1bd18:	4798      	blx	r3
   1bd1a:	0003      	movs	r3, r0
   1bd1c:	001a      	movs	r2, r3
   1bd1e:	4b23      	ldr	r3, [pc, #140]	; (1bdac <xQueueSemaphoreTake+0x4a0>)
   1bd20:	881b      	ldrh	r3, [r3, #0]
   1bd22:	4013      	ands	r3, r2
   1bd24:	b29b      	uxth	r3, r3
   1bd26:	2b00      	cmp	r3, #0
   1bd28:	d029      	beq.n	1bd7e <xQueueSemaphoreTake+0x472>
   1bd2a:	69fb      	ldr	r3, [r7, #28]
   1bd2c:	0018      	movs	r0, r3
   1bd2e:	4b20      	ldr	r3, [pc, #128]	; (1bdb0 <xQueueSemaphoreTake+0x4a4>)
   1bd30:	4798      	blx	r3
   1bd32:	0003      	movs	r3, r0
   1bd34:	001a      	movs	r2, r3
   1bd36:	4b1d      	ldr	r3, [pc, #116]	; (1bdac <xQueueSemaphoreTake+0x4a0>)
   1bd38:	881b      	ldrh	r3, [r3, #0]
   1bd3a:	4013      	ands	r3, r2
   1bd3c:	b29b      	uxth	r3, r3
   1bd3e:	2b00      	cmp	r3, #0
   1bd40:	d01d      	beq.n	1bd7e <xQueueSemaphoreTake+0x472>
   1bd42:	69fb      	ldr	r3, [r7, #28]
   1bd44:	0018      	movs	r0, r3
   1bd46:	4b1b      	ldr	r3, [pc, #108]	; (1bdb4 <xQueueSemaphoreTake+0x4a8>)
   1bd48:	4798      	blx	r3
   1bd4a:	0003      	movs	r3, r0
   1bd4c:	001a      	movs	r2, r3
   1bd4e:	4b1a      	ldr	r3, [pc, #104]	; (1bdb8 <xQueueSemaphoreTake+0x4ac>)
   1bd50:	5c9b      	ldrb	r3, [r3, r2]
   1bd52:	3350      	adds	r3, #80	; 0x50
   1bd54:	b2db      	uxtb	r3, r3
   1bd56:	001d      	movs	r5, r3
   1bd58:	69fb      	ldr	r3, [r7, #28]
   1bd5a:	0018      	movs	r0, r3
   1bd5c:	4b15      	ldr	r3, [pc, #84]	; (1bdb4 <xQueueSemaphoreTake+0x4a8>)
   1bd5e:	4798      	blx	r3
   1bd60:	0003      	movs	r3, r0
   1bd62:	001a      	movs	r2, r3
   1bd64:	4b14      	ldr	r3, [pc, #80]	; (1bdb8 <xQueueSemaphoreTake+0x4ac>)
   1bd66:	5c9c      	ldrb	r4, [r3, r2]
   1bd68:	69fb      	ldr	r3, [r7, #28]
   1bd6a:	0018      	movs	r0, r3
   1bd6c:	4b13      	ldr	r3, [pc, #76]	; (1bdbc <xQueueSemaphoreTake+0x4b0>)
   1bd6e:	4798      	blx	r3
   1bd70:	0003      	movs	r3, r0
   1bd72:	b2db      	uxtb	r3, r3
   1bd74:	001a      	movs	r2, r3
   1bd76:	0021      	movs	r1, r4
   1bd78:	0028      	movs	r0, r5
   1bd7a:	4b11      	ldr	r3, [pc, #68]	; (1bdc0 <xQueueSemaphoreTake+0x4b4>)
   1bd7c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1bd7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1bd80:	0018      	movs	r0, r3
   1bd82:	46bd      	mov	sp, r7
   1bd84:	b00a      	add	sp, #40	; 0x28
   1bd86:	bdb0      	pop	{r4, r5, r7, pc}
   1bd88:	0001bf65 	.word	0x0001bf65
   1bd8c:	0001c939 	.word	0x0001c939
   1bd90:	0001c055 	.word	0x0001c055
   1bd94:	0001a669 	.word	0x0001a669
   1bd98:	0001be07 	.word	0x0001be07
   1bd9c:	0001d6b9 	.word	0x0001d6b9
   1bda0:	0001a68d 	.word	0x0001a68d
   1bda4:	000188fd 	.word	0x000188fd
   1bda8:	00018661 	.word	0x00018661
   1bdac:	20000110 	.word	0x20000110
   1bdb0:	00018721 	.word	0x00018721
   1bdb4:	00018621 	.word	0x00018621
   1bdb8:	20000104 	.word	0x20000104
   1bdbc:	00018701 	.word	0x00018701
   1bdc0:	00019059 	.word	0x00019059

0001bdc4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1bdc4:	b580      	push	{r7, lr}
   1bdc6:	b082      	sub	sp, #8
   1bdc8:	af00      	add	r7, sp, #0
   1bdca:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1bdcc:	687b      	ldr	r3, [r7, #4]
   1bdce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1bdd0:	0018      	movs	r0, r3
   1bdd2:	46bd      	mov	sp, r7
   1bdd4:	b002      	add	sp, #8
   1bdd6:	bd80      	pop	{r7, pc}

0001bdd8 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1bdd8:	b580      	push	{r7, lr}
   1bdda:	b082      	sub	sp, #8
   1bddc:	af00      	add	r7, sp, #0
   1bdde:	6078      	str	r0, [r7, #4]
   1bde0:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1bde2:	687b      	ldr	r3, [r7, #4]
   1bde4:	683a      	ldr	r2, [r7, #0]
   1bde6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1bde8:	46c0      	nop			; (mov r8, r8)
   1bdea:	46bd      	mov	sp, r7
   1bdec:	b002      	add	sp, #8
   1bdee:	bd80      	pop	{r7, pc}

0001bdf0 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1bdf0:	b580      	push	{r7, lr}
   1bdf2:	b082      	sub	sp, #8
   1bdf4:	af00      	add	r7, sp, #0
   1bdf6:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1bdf8:	687b      	ldr	r3, [r7, #4]
   1bdfa:	2250      	movs	r2, #80	; 0x50
   1bdfc:	5c9b      	ldrb	r3, [r3, r2]
	}
   1bdfe:	0018      	movs	r0, r3
   1be00:	46bd      	mov	sp, r7
   1be02:	b002      	add	sp, #8
   1be04:	bd80      	pop	{r7, pc}

0001be06 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1be06:	b580      	push	{r7, lr}
   1be08:	b084      	sub	sp, #16
   1be0a:	af00      	add	r7, sp, #0
   1be0c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1be0e:	687b      	ldr	r3, [r7, #4]
   1be10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1be12:	2b00      	cmp	r3, #0
   1be14:	d006      	beq.n	1be24 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1be16:	687b      	ldr	r3, [r7, #4]
   1be18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1be1a:	681b      	ldr	r3, [r3, #0]
   1be1c:	2205      	movs	r2, #5
   1be1e:	1ad3      	subs	r3, r2, r3
   1be20:	60fb      	str	r3, [r7, #12]
   1be22:	e001      	b.n	1be28 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1be24:	2300      	movs	r3, #0
   1be26:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1be28:	68fb      	ldr	r3, [r7, #12]
	}
   1be2a:	0018      	movs	r0, r3
   1be2c:	46bd      	mov	sp, r7
   1be2e:	b004      	add	sp, #16
   1be30:	bd80      	pop	{r7, pc}
	...

0001be34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1be34:	b580      	push	{r7, lr}
   1be36:	b086      	sub	sp, #24
   1be38:	af00      	add	r7, sp, #0
   1be3a:	60f8      	str	r0, [r7, #12]
   1be3c:	60b9      	str	r1, [r7, #8]
   1be3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1be40:	2300      	movs	r3, #0
   1be42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1be44:	68fb      	ldr	r3, [r7, #12]
   1be46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1be48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1be4a:	68fb      	ldr	r3, [r7, #12]
   1be4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1be4e:	2b00      	cmp	r3, #0
   1be50:	d10e      	bne.n	1be70 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1be52:	68fb      	ldr	r3, [r7, #12]
   1be54:	681b      	ldr	r3, [r3, #0]
   1be56:	2b00      	cmp	r3, #0
   1be58:	d14e      	bne.n	1bef8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1be5a:	68fb      	ldr	r3, [r7, #12]
   1be5c:	685b      	ldr	r3, [r3, #4]
   1be5e:	0018      	movs	r0, r3
   1be60:	4b2a      	ldr	r3, [pc, #168]	; (1bf0c <prvCopyDataToQueue+0xd8>)
   1be62:	4798      	blx	r3
   1be64:	0003      	movs	r3, r0
   1be66:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1be68:	68fb      	ldr	r3, [r7, #12]
   1be6a:	2200      	movs	r2, #0
   1be6c:	605a      	str	r2, [r3, #4]
   1be6e:	e043      	b.n	1bef8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1be70:	687b      	ldr	r3, [r7, #4]
   1be72:	2b00      	cmp	r3, #0
   1be74:	d119      	bne.n	1beaa <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1be76:	68fb      	ldr	r3, [r7, #12]
   1be78:	6898      	ldr	r0, [r3, #8]
   1be7a:	68fb      	ldr	r3, [r7, #12]
   1be7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1be7e:	68bb      	ldr	r3, [r7, #8]
   1be80:	0019      	movs	r1, r3
   1be82:	4b23      	ldr	r3, [pc, #140]	; (1bf10 <prvCopyDataToQueue+0xdc>)
   1be84:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1be86:	68fb      	ldr	r3, [r7, #12]
   1be88:	689a      	ldr	r2, [r3, #8]
   1be8a:	68fb      	ldr	r3, [r7, #12]
   1be8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1be8e:	18d2      	adds	r2, r2, r3
   1be90:	68fb      	ldr	r3, [r7, #12]
   1be92:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1be94:	68fb      	ldr	r3, [r7, #12]
   1be96:	689a      	ldr	r2, [r3, #8]
   1be98:	68fb      	ldr	r3, [r7, #12]
   1be9a:	685b      	ldr	r3, [r3, #4]
   1be9c:	429a      	cmp	r2, r3
   1be9e:	d32b      	bcc.n	1bef8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1bea0:	68fb      	ldr	r3, [r7, #12]
   1bea2:	681a      	ldr	r2, [r3, #0]
   1bea4:	68fb      	ldr	r3, [r7, #12]
   1bea6:	609a      	str	r2, [r3, #8]
   1bea8:	e026      	b.n	1bef8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1beaa:	68fb      	ldr	r3, [r7, #12]
   1beac:	68d8      	ldr	r0, [r3, #12]
   1beae:	68fb      	ldr	r3, [r7, #12]
   1beb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1beb2:	68bb      	ldr	r3, [r7, #8]
   1beb4:	0019      	movs	r1, r3
   1beb6:	4b16      	ldr	r3, [pc, #88]	; (1bf10 <prvCopyDataToQueue+0xdc>)
   1beb8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1beba:	68fb      	ldr	r3, [r7, #12]
   1bebc:	68da      	ldr	r2, [r3, #12]
   1bebe:	68fb      	ldr	r3, [r7, #12]
   1bec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bec2:	425b      	negs	r3, r3
   1bec4:	18d2      	adds	r2, r2, r3
   1bec6:	68fb      	ldr	r3, [r7, #12]
   1bec8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1beca:	68fb      	ldr	r3, [r7, #12]
   1becc:	68da      	ldr	r2, [r3, #12]
   1bece:	68fb      	ldr	r3, [r7, #12]
   1bed0:	681b      	ldr	r3, [r3, #0]
   1bed2:	429a      	cmp	r2, r3
   1bed4:	d207      	bcs.n	1bee6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1bed6:	68fb      	ldr	r3, [r7, #12]
   1bed8:	685a      	ldr	r2, [r3, #4]
   1beda:	68fb      	ldr	r3, [r7, #12]
   1bedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bede:	425b      	negs	r3, r3
   1bee0:	18d2      	adds	r2, r2, r3
   1bee2:	68fb      	ldr	r3, [r7, #12]
   1bee4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1bee6:	687b      	ldr	r3, [r7, #4]
   1bee8:	2b02      	cmp	r3, #2
   1beea:	d105      	bne.n	1bef8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1beec:	693b      	ldr	r3, [r7, #16]
   1beee:	2b00      	cmp	r3, #0
   1bef0:	d002      	beq.n	1bef8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1bef2:	693b      	ldr	r3, [r7, #16]
   1bef4:	3b01      	subs	r3, #1
   1bef6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1bef8:	693b      	ldr	r3, [r7, #16]
   1befa:	1c5a      	adds	r2, r3, #1
   1befc:	68fb      	ldr	r3, [r7, #12]
   1befe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1bf00:	697b      	ldr	r3, [r7, #20]
}
   1bf02:	0018      	movs	r0, r3
   1bf04:	46bd      	mov	sp, r7
   1bf06:	b006      	add	sp, #24
   1bf08:	bd80      	pop	{r7, pc}
   1bf0a:	46c0      	nop			; (mov r8, r8)
   1bf0c:	0001d551 	.word	0x0001d551
   1bf10:	00034f2d 	.word	0x00034f2d

0001bf14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1bf14:	b580      	push	{r7, lr}
   1bf16:	b082      	sub	sp, #8
   1bf18:	af00      	add	r7, sp, #0
   1bf1a:	6078      	str	r0, [r7, #4]
   1bf1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1bf1e:	687b      	ldr	r3, [r7, #4]
   1bf20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bf22:	2b00      	cmp	r3, #0
   1bf24:	d018      	beq.n	1bf58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1bf26:	687b      	ldr	r3, [r7, #4]
   1bf28:	68da      	ldr	r2, [r3, #12]
   1bf2a:	687b      	ldr	r3, [r7, #4]
   1bf2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bf2e:	18d2      	adds	r2, r2, r3
   1bf30:	687b      	ldr	r3, [r7, #4]
   1bf32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1bf34:	687b      	ldr	r3, [r7, #4]
   1bf36:	68da      	ldr	r2, [r3, #12]
   1bf38:	687b      	ldr	r3, [r7, #4]
   1bf3a:	685b      	ldr	r3, [r3, #4]
   1bf3c:	429a      	cmp	r2, r3
   1bf3e:	d303      	bcc.n	1bf48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1bf40:	687b      	ldr	r3, [r7, #4]
   1bf42:	681a      	ldr	r2, [r3, #0]
   1bf44:	687b      	ldr	r3, [r7, #4]
   1bf46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1bf48:	687b      	ldr	r3, [r7, #4]
   1bf4a:	68d9      	ldr	r1, [r3, #12]
   1bf4c:	687b      	ldr	r3, [r7, #4]
   1bf4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1bf50:	683b      	ldr	r3, [r7, #0]
   1bf52:	0018      	movs	r0, r3
   1bf54:	4b02      	ldr	r3, [pc, #8]	; (1bf60 <prvCopyDataFromQueue+0x4c>)
   1bf56:	4798      	blx	r3
	}
}
   1bf58:	46c0      	nop			; (mov r8, r8)
   1bf5a:	46bd      	mov	sp, r7
   1bf5c:	b002      	add	sp, #8
   1bf5e:	bd80      	pop	{r7, pc}
   1bf60:	00034f2d 	.word	0x00034f2d

0001bf64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1bf64:	b580      	push	{r7, lr}
   1bf66:	b084      	sub	sp, #16
   1bf68:	af00      	add	r7, sp, #0
   1bf6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1bf6c:	4b34      	ldr	r3, [pc, #208]	; (1c040 <prvUnlockQueue+0xdc>)
   1bf6e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1bf70:	230f      	movs	r3, #15
   1bf72:	18fb      	adds	r3, r7, r3
   1bf74:	687a      	ldr	r2, [r7, #4]
   1bf76:	2145      	movs	r1, #69	; 0x45
   1bf78:	5c52      	ldrb	r2, [r2, r1]
   1bf7a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1bf7c:	e022      	b.n	1bfc4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1bf7e:	687b      	ldr	r3, [r7, #4]
   1bf80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bf82:	2b00      	cmp	r3, #0
   1bf84:	d009      	beq.n	1bf9a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1bf86:	687b      	ldr	r3, [r7, #4]
   1bf88:	2100      	movs	r1, #0
   1bf8a:	0018      	movs	r0, r3
   1bf8c:	4b2d      	ldr	r3, [pc, #180]	; (1c044 <prvUnlockQueue+0xe0>)
   1bf8e:	4798      	blx	r3
   1bf90:	1e03      	subs	r3, r0, #0
   1bf92:	d00f      	beq.n	1bfb4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1bf94:	4b2c      	ldr	r3, [pc, #176]	; (1c048 <prvUnlockQueue+0xe4>)
   1bf96:	4798      	blx	r3
   1bf98:	e00c      	b.n	1bfb4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1bf9a:	687b      	ldr	r3, [r7, #4]
   1bf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bf9e:	2b00      	cmp	r3, #0
   1bfa0:	d017      	beq.n	1bfd2 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1bfa2:	687b      	ldr	r3, [r7, #4]
   1bfa4:	3324      	adds	r3, #36	; 0x24
   1bfa6:	0018      	movs	r0, r3
   1bfa8:	4b28      	ldr	r3, [pc, #160]	; (1c04c <prvUnlockQueue+0xe8>)
   1bfaa:	4798      	blx	r3
   1bfac:	1e03      	subs	r3, r0, #0
   1bfae:	d001      	beq.n	1bfb4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1bfb0:	4b25      	ldr	r3, [pc, #148]	; (1c048 <prvUnlockQueue+0xe4>)
   1bfb2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1bfb4:	230f      	movs	r3, #15
   1bfb6:	18fb      	adds	r3, r7, r3
   1bfb8:	781b      	ldrb	r3, [r3, #0]
   1bfba:	3b01      	subs	r3, #1
   1bfbc:	b2da      	uxtb	r2, r3
   1bfbe:	230f      	movs	r3, #15
   1bfc0:	18fb      	adds	r3, r7, r3
   1bfc2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1bfc4:	230f      	movs	r3, #15
   1bfc6:	18fb      	adds	r3, r7, r3
   1bfc8:	781b      	ldrb	r3, [r3, #0]
   1bfca:	b25b      	sxtb	r3, r3
   1bfcc:	2b00      	cmp	r3, #0
   1bfce:	dcd6      	bgt.n	1bf7e <prvUnlockQueue+0x1a>
   1bfd0:	e000      	b.n	1bfd4 <prvUnlockQueue+0x70>
						break;
   1bfd2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1bfd4:	687b      	ldr	r3, [r7, #4]
   1bfd6:	2245      	movs	r2, #69	; 0x45
   1bfd8:	21ff      	movs	r1, #255	; 0xff
   1bfda:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1bfdc:	4b1c      	ldr	r3, [pc, #112]	; (1c050 <prvUnlockQueue+0xec>)
   1bfde:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1bfe0:	4b17      	ldr	r3, [pc, #92]	; (1c040 <prvUnlockQueue+0xdc>)
   1bfe2:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1bfe4:	230e      	movs	r3, #14
   1bfe6:	18fb      	adds	r3, r7, r3
   1bfe8:	687a      	ldr	r2, [r7, #4]
   1bfea:	2144      	movs	r1, #68	; 0x44
   1bfec:	5c52      	ldrb	r2, [r2, r1]
   1bfee:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1bff0:	e014      	b.n	1c01c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bff2:	687b      	ldr	r3, [r7, #4]
   1bff4:	691b      	ldr	r3, [r3, #16]
   1bff6:	2b00      	cmp	r3, #0
   1bff8:	d017      	beq.n	1c02a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bffa:	687b      	ldr	r3, [r7, #4]
   1bffc:	3310      	adds	r3, #16
   1bffe:	0018      	movs	r0, r3
   1c000:	4b12      	ldr	r3, [pc, #72]	; (1c04c <prvUnlockQueue+0xe8>)
   1c002:	4798      	blx	r3
   1c004:	1e03      	subs	r3, r0, #0
   1c006:	d001      	beq.n	1c00c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1c008:	4b0f      	ldr	r3, [pc, #60]	; (1c048 <prvUnlockQueue+0xe4>)
   1c00a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1c00c:	230e      	movs	r3, #14
   1c00e:	18fb      	adds	r3, r7, r3
   1c010:	781b      	ldrb	r3, [r3, #0]
   1c012:	3b01      	subs	r3, #1
   1c014:	b2da      	uxtb	r2, r3
   1c016:	230e      	movs	r3, #14
   1c018:	18fb      	adds	r3, r7, r3
   1c01a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c01c:	230e      	movs	r3, #14
   1c01e:	18fb      	adds	r3, r7, r3
   1c020:	781b      	ldrb	r3, [r3, #0]
   1c022:	b25b      	sxtb	r3, r3
   1c024:	2b00      	cmp	r3, #0
   1c026:	dce4      	bgt.n	1bff2 <prvUnlockQueue+0x8e>
   1c028:	e000      	b.n	1c02c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1c02a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1c02c:	687b      	ldr	r3, [r7, #4]
   1c02e:	2244      	movs	r2, #68	; 0x44
   1c030:	21ff      	movs	r1, #255	; 0xff
   1c032:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c034:	4b06      	ldr	r3, [pc, #24]	; (1c050 <prvUnlockQueue+0xec>)
   1c036:	4798      	blx	r3
}
   1c038:	46c0      	nop			; (mov r8, r8)
   1c03a:	46bd      	mov	sp, r7
   1c03c:	b004      	add	sp, #16
   1c03e:	bd80      	pop	{r7, pc}
   1c040:	0001a669 	.word	0x0001a669
   1c044:	0001c139 	.word	0x0001c139
   1c048:	0001d10d 	.word	0x0001d10d
   1c04c:	0001cef9 	.word	0x0001cef9
   1c050:	0001a68d 	.word	0x0001a68d

0001c054 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1c054:	b580      	push	{r7, lr}
   1c056:	b084      	sub	sp, #16
   1c058:	af00      	add	r7, sp, #0
   1c05a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c05c:	4b08      	ldr	r3, [pc, #32]	; (1c080 <prvIsQueueEmpty+0x2c>)
   1c05e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1c060:	687b      	ldr	r3, [r7, #4]
   1c062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c064:	2b00      	cmp	r3, #0
   1c066:	d102      	bne.n	1c06e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1c068:	2301      	movs	r3, #1
   1c06a:	60fb      	str	r3, [r7, #12]
   1c06c:	e001      	b.n	1c072 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1c06e:	2300      	movs	r3, #0
   1c070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c072:	4b04      	ldr	r3, [pc, #16]	; (1c084 <prvIsQueueEmpty+0x30>)
   1c074:	4798      	blx	r3

	return xReturn;
   1c076:	68fb      	ldr	r3, [r7, #12]
}
   1c078:	0018      	movs	r0, r3
   1c07a:	46bd      	mov	sp, r7
   1c07c:	b004      	add	sp, #16
   1c07e:	bd80      	pop	{r7, pc}
   1c080:	0001a669 	.word	0x0001a669
   1c084:	0001a68d 	.word	0x0001a68d

0001c088 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1c088:	b580      	push	{r7, lr}
   1c08a:	b084      	sub	sp, #16
   1c08c:	af00      	add	r7, sp, #0
   1c08e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c090:	4b09      	ldr	r3, [pc, #36]	; (1c0b8 <prvIsQueueFull+0x30>)
   1c092:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1c094:	687b      	ldr	r3, [r7, #4]
   1c096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c098:	687b      	ldr	r3, [r7, #4]
   1c09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c09c:	429a      	cmp	r2, r3
   1c09e:	d102      	bne.n	1c0a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1c0a0:	2301      	movs	r3, #1
   1c0a2:	60fb      	str	r3, [r7, #12]
   1c0a4:	e001      	b.n	1c0aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1c0a6:	2300      	movs	r3, #0
   1c0a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c0aa:	4b04      	ldr	r3, [pc, #16]	; (1c0bc <prvIsQueueFull+0x34>)
   1c0ac:	4798      	blx	r3

	return xReturn;
   1c0ae:	68fb      	ldr	r3, [r7, #12]
}
   1c0b0:	0018      	movs	r0, r3
   1c0b2:	46bd      	mov	sp, r7
   1c0b4:	b004      	add	sp, #16
   1c0b6:	bd80      	pop	{r7, pc}
   1c0b8:	0001a669 	.word	0x0001a669
   1c0bc:	0001a68d 	.word	0x0001a68d

0001c0c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c0c0:	b580      	push	{r7, lr}
   1c0c2:	b086      	sub	sp, #24
   1c0c4:	af00      	add	r7, sp, #0
   1c0c6:	60f8      	str	r0, [r7, #12]
   1c0c8:	60b9      	str	r1, [r7, #8]
   1c0ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c0cc:	68fb      	ldr	r3, [r7, #12]
   1c0ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1c0d0:	4b15      	ldr	r3, [pc, #84]	; (1c128 <vQueueWaitForMessageRestricted+0x68>)
   1c0d2:	4798      	blx	r3
   1c0d4:	697b      	ldr	r3, [r7, #20]
   1c0d6:	2244      	movs	r2, #68	; 0x44
   1c0d8:	5c9b      	ldrb	r3, [r3, r2]
   1c0da:	b25b      	sxtb	r3, r3
   1c0dc:	3301      	adds	r3, #1
   1c0de:	d103      	bne.n	1c0e8 <vQueueWaitForMessageRestricted+0x28>
   1c0e0:	697b      	ldr	r3, [r7, #20]
   1c0e2:	2244      	movs	r2, #68	; 0x44
   1c0e4:	2100      	movs	r1, #0
   1c0e6:	5499      	strb	r1, [r3, r2]
   1c0e8:	697b      	ldr	r3, [r7, #20]
   1c0ea:	2245      	movs	r2, #69	; 0x45
   1c0ec:	5c9b      	ldrb	r3, [r3, r2]
   1c0ee:	b25b      	sxtb	r3, r3
   1c0f0:	3301      	adds	r3, #1
   1c0f2:	d103      	bne.n	1c0fc <vQueueWaitForMessageRestricted+0x3c>
   1c0f4:	697b      	ldr	r3, [r7, #20]
   1c0f6:	2245      	movs	r2, #69	; 0x45
   1c0f8:	2100      	movs	r1, #0
   1c0fa:	5499      	strb	r1, [r3, r2]
   1c0fc:	4b0b      	ldr	r3, [pc, #44]	; (1c12c <vQueueWaitForMessageRestricted+0x6c>)
   1c0fe:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1c100:	697b      	ldr	r3, [r7, #20]
   1c102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c104:	2b00      	cmp	r3, #0
   1c106:	d106      	bne.n	1c116 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1c108:	697b      	ldr	r3, [r7, #20]
   1c10a:	3324      	adds	r3, #36	; 0x24
   1c10c:	687a      	ldr	r2, [r7, #4]
   1c10e:	68b9      	ldr	r1, [r7, #8]
   1c110:	0018      	movs	r0, r3
   1c112:	4b07      	ldr	r3, [pc, #28]	; (1c130 <vQueueWaitForMessageRestricted+0x70>)
   1c114:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1c116:	697b      	ldr	r3, [r7, #20]
   1c118:	0018      	movs	r0, r3
   1c11a:	4b06      	ldr	r3, [pc, #24]	; (1c134 <vQueueWaitForMessageRestricted+0x74>)
   1c11c:	4798      	blx	r3
	}
   1c11e:	46c0      	nop			; (mov r8, r8)
   1c120:	46bd      	mov	sp, r7
   1c122:	b006      	add	sp, #24
   1c124:	bd80      	pop	{r7, pc}
   1c126:	46c0      	nop			; (mov r8, r8)
   1c128:	0001a669 	.word	0x0001a669
   1c12c:	0001a68d 	.word	0x0001a68d
   1c130:	0001ce19 	.word	0x0001ce19
   1c134:	0001bf65 	.word	0x0001bf65

0001c138 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1c138:	b5b0      	push	{r4, r5, r7, lr}
   1c13a:	b086      	sub	sp, #24
   1c13c:	af00      	add	r7, sp, #0
   1c13e:	6078      	str	r0, [r7, #4]
   1c140:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1c142:	687b      	ldr	r3, [r7, #4]
   1c144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c146:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1c148:	2300      	movs	r3, #0
   1c14a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1c14c:	693b      	ldr	r3, [r7, #16]
   1c14e:	2b00      	cmp	r3, #0
   1c150:	d101      	bne.n	1c156 <prvNotifyQueueSetContainer+0x1e>
   1c152:	b672      	cpsid	i
   1c154:	e7fe      	b.n	1c154 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1c156:	693b      	ldr	r3, [r7, #16]
   1c158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c15a:	693b      	ldr	r3, [r7, #16]
   1c15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c15e:	429a      	cmp	r2, r3
   1c160:	d301      	bcc.n	1c166 <prvNotifyQueueSetContainer+0x2e>
   1c162:	b672      	cpsid	i
   1c164:	e7fe      	b.n	1c164 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1c166:	693b      	ldr	r3, [r7, #16]
   1c168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c16a:	693b      	ldr	r3, [r7, #16]
   1c16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c16e:	429a      	cmp	r2, r3
   1c170:	d300      	bcc.n	1c174 <prvNotifyQueueSetContainer+0x3c>
   1c172:	e08b      	b.n	1c28c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1c174:	230f      	movs	r3, #15
   1c176:	18fb      	adds	r3, r7, r3
   1c178:	693a      	ldr	r2, [r7, #16]
   1c17a:	2145      	movs	r1, #69	; 0x45
   1c17c:	5c52      	ldrb	r2, [r2, r1]
   1c17e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1c180:	4b45      	ldr	r3, [pc, #276]	; (1c298 <prvNotifyQueueSetContainer+0x160>)
   1c182:	4798      	blx	r3
   1c184:	0003      	movs	r3, r0
   1c186:	0018      	movs	r0, r3
   1c188:	4b44      	ldr	r3, [pc, #272]	; (1c29c <prvNotifyQueueSetContainer+0x164>)
   1c18a:	4798      	blx	r3
   1c18c:	0003      	movs	r3, r0
   1c18e:	001a      	movs	r2, r3
   1c190:	4b43      	ldr	r3, [pc, #268]	; (1c2a0 <prvNotifyQueueSetContainer+0x168>)
   1c192:	881b      	ldrh	r3, [r3, #0]
   1c194:	4013      	ands	r3, r2
   1c196:	b29b      	uxth	r3, r3
   1c198:	2b00      	cmp	r3, #0
   1c19a:	d02e      	beq.n	1c1fa <prvNotifyQueueSetContainer+0xc2>
   1c19c:	693b      	ldr	r3, [r7, #16]
   1c19e:	0018      	movs	r0, r3
   1c1a0:	4b40      	ldr	r3, [pc, #256]	; (1c2a4 <prvNotifyQueueSetContainer+0x16c>)
   1c1a2:	4798      	blx	r3
   1c1a4:	0003      	movs	r3, r0
   1c1a6:	001a      	movs	r2, r3
   1c1a8:	4b3d      	ldr	r3, [pc, #244]	; (1c2a0 <prvNotifyQueueSetContainer+0x168>)
   1c1aa:	881b      	ldrh	r3, [r3, #0]
   1c1ac:	4013      	ands	r3, r2
   1c1ae:	b29b      	uxth	r3, r3
   1c1b0:	2b00      	cmp	r3, #0
   1c1b2:	d022      	beq.n	1c1fa <prvNotifyQueueSetContainer+0xc2>
   1c1b4:	683b      	ldr	r3, [r7, #0]
   1c1b6:	2b00      	cmp	r3, #0
   1c1b8:	d10b      	bne.n	1c1d2 <prvNotifyQueueSetContainer+0x9a>
   1c1ba:	693b      	ldr	r3, [r7, #16]
   1c1bc:	0018      	movs	r0, r3
   1c1be:	4b3a      	ldr	r3, [pc, #232]	; (1c2a8 <prvNotifyQueueSetContainer+0x170>)
   1c1c0:	4798      	blx	r3
   1c1c2:	0003      	movs	r3, r0
   1c1c4:	001a      	movs	r2, r3
   1c1c6:	4b39      	ldr	r3, [pc, #228]	; (1c2ac <prvNotifyQueueSetContainer+0x174>)
   1c1c8:	5c9b      	ldrb	r3, [r3, r2]
   1c1ca:	3320      	adds	r3, #32
   1c1cc:	b2db      	uxtb	r3, r3
   1c1ce:	001d      	movs	r5, r3
   1c1d0:	e000      	b.n	1c1d4 <prvNotifyQueueSetContainer+0x9c>
   1c1d2:	2525      	movs	r5, #37	; 0x25
   1c1d4:	693b      	ldr	r3, [r7, #16]
   1c1d6:	0018      	movs	r0, r3
   1c1d8:	4b33      	ldr	r3, [pc, #204]	; (1c2a8 <prvNotifyQueueSetContainer+0x170>)
   1c1da:	4798      	blx	r3
   1c1dc:	0003      	movs	r3, r0
   1c1de:	001a      	movs	r2, r3
   1c1e0:	4b32      	ldr	r3, [pc, #200]	; (1c2ac <prvNotifyQueueSetContainer+0x174>)
   1c1e2:	5c9c      	ldrb	r4, [r3, r2]
   1c1e4:	693b      	ldr	r3, [r7, #16]
   1c1e6:	0018      	movs	r0, r3
   1c1e8:	4b31      	ldr	r3, [pc, #196]	; (1c2b0 <prvNotifyQueueSetContainer+0x178>)
   1c1ea:	4798      	blx	r3
   1c1ec:	0003      	movs	r3, r0
   1c1ee:	b2db      	uxtb	r3, r3
   1c1f0:	001a      	movs	r2, r3
   1c1f2:	0021      	movs	r1, r4
   1c1f4:	0028      	movs	r0, r5
   1c1f6:	4b2f      	ldr	r3, [pc, #188]	; (1c2b4 <prvNotifyQueueSetContainer+0x17c>)
   1c1f8:	4798      	blx	r3
   1c1fa:	693b      	ldr	r3, [r7, #16]
   1c1fc:	0018      	movs	r0, r3
   1c1fe:	4b2a      	ldr	r3, [pc, #168]	; (1c2a8 <prvNotifyQueueSetContainer+0x170>)
   1c200:	4798      	blx	r3
   1c202:	0003      	movs	r3, r0
   1c204:	001a      	movs	r2, r3
   1c206:	4b29      	ldr	r3, [pc, #164]	; (1c2ac <prvNotifyQueueSetContainer+0x174>)
   1c208:	5c9c      	ldrb	r4, [r3, r2]
   1c20a:	693b      	ldr	r3, [r7, #16]
   1c20c:	0018      	movs	r0, r3
   1c20e:	4b28      	ldr	r3, [pc, #160]	; (1c2b0 <prvNotifyQueueSetContainer+0x178>)
   1c210:	4798      	blx	r3
   1c212:	0003      	movs	r3, r0
   1c214:	b2dd      	uxtb	r5, r3
   1c216:	693b      	ldr	r3, [r7, #16]
   1c218:	0018      	movs	r0, r3
   1c21a:	4b23      	ldr	r3, [pc, #140]	; (1c2a8 <prvNotifyQueueSetContainer+0x170>)
   1c21c:	4798      	blx	r3
   1c21e:	0003      	movs	r3, r0
   1c220:	001a      	movs	r2, r3
   1c222:	4b22      	ldr	r3, [pc, #136]	; (1c2ac <prvNotifyQueueSetContainer+0x174>)
   1c224:	5c9b      	ldrb	r3, [r3, r2]
   1c226:	2b02      	cmp	r3, #2
   1c228:	d005      	beq.n	1c236 <prvNotifyQueueSetContainer+0xfe>
   1c22a:	693b      	ldr	r3, [r7, #16]
   1c22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c22e:	b2db      	uxtb	r3, r3
   1c230:	3301      	adds	r3, #1
   1c232:	b2db      	uxtb	r3, r3
   1c234:	e000      	b.n	1c238 <prvNotifyQueueSetContainer+0x100>
   1c236:	2300      	movs	r3, #0
   1c238:	001a      	movs	r2, r3
   1c23a:	0029      	movs	r1, r5
   1c23c:	0020      	movs	r0, r4
   1c23e:	4b1e      	ldr	r3, [pc, #120]	; (1c2b8 <prvNotifyQueueSetContainer+0x180>)
   1c240:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1c242:	683a      	ldr	r2, [r7, #0]
   1c244:	1d39      	adds	r1, r7, #4
   1c246:	693b      	ldr	r3, [r7, #16]
   1c248:	0018      	movs	r0, r3
   1c24a:	4b1c      	ldr	r3, [pc, #112]	; (1c2bc <prvNotifyQueueSetContainer+0x184>)
   1c24c:	4798      	blx	r3
   1c24e:	0003      	movs	r3, r0
   1c250:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1c252:	230f      	movs	r3, #15
   1c254:	18fb      	adds	r3, r7, r3
   1c256:	781b      	ldrb	r3, [r3, #0]
   1c258:	b25b      	sxtb	r3, r3
   1c25a:	3301      	adds	r3, #1
   1c25c:	d10d      	bne.n	1c27a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1c25e:	693b      	ldr	r3, [r7, #16]
   1c260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c262:	2b00      	cmp	r3, #0
   1c264:	d012      	beq.n	1c28c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1c266:	693b      	ldr	r3, [r7, #16]
   1c268:	3324      	adds	r3, #36	; 0x24
   1c26a:	0018      	movs	r0, r3
   1c26c:	4b14      	ldr	r3, [pc, #80]	; (1c2c0 <prvNotifyQueueSetContainer+0x188>)
   1c26e:	4798      	blx	r3
   1c270:	1e03      	subs	r3, r0, #0
   1c272:	d00b      	beq.n	1c28c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1c274:	2301      	movs	r3, #1
   1c276:	617b      	str	r3, [r7, #20]
   1c278:	e008      	b.n	1c28c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1c27a:	230f      	movs	r3, #15
   1c27c:	18fb      	adds	r3, r7, r3
   1c27e:	781b      	ldrb	r3, [r3, #0]
   1c280:	3301      	adds	r3, #1
   1c282:	b2db      	uxtb	r3, r3
   1c284:	b259      	sxtb	r1, r3
   1c286:	693b      	ldr	r3, [r7, #16]
   1c288:	2245      	movs	r2, #69	; 0x45
   1c28a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c28c:	697b      	ldr	r3, [r7, #20]
	}
   1c28e:	0018      	movs	r0, r3
   1c290:	46bd      	mov	sp, r7
   1c292:	b006      	add	sp, #24
   1c294:	bdb0      	pop	{r4, r5, r7, pc}
   1c296:	46c0      	nop			; (mov r8, r8)
   1c298:	000188fd 	.word	0x000188fd
   1c29c:	00018661 	.word	0x00018661
   1c2a0:	20000110 	.word	0x20000110
   1c2a4:	00018721 	.word	0x00018721
   1c2a8:	00018621 	.word	0x00018621
   1c2ac:	20000104 	.word	0x20000104
   1c2b0:	00018701 	.word	0x00018701
   1c2b4:	00019059 	.word	0x00019059
   1c2b8:	000196b5 	.word	0x000196b5
   1c2bc:	0001be35 	.word	0x0001be35
   1c2c0:	0001cef9 	.word	0x0001cef9

0001c2c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1c2c4:	b590      	push	{r4, r7, lr}
   1c2c6:	b08d      	sub	sp, #52	; 0x34
   1c2c8:	af04      	add	r7, sp, #16
   1c2ca:	60f8      	str	r0, [r7, #12]
   1c2cc:	60b9      	str	r1, [r7, #8]
   1c2ce:	603b      	str	r3, [r7, #0]
   1c2d0:	1dbb      	adds	r3, r7, #6
   1c2d2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c2d4:	1dbb      	adds	r3, r7, #6
   1c2d6:	881b      	ldrh	r3, [r3, #0]
   1c2d8:	009b      	lsls	r3, r3, #2
   1c2da:	0018      	movs	r0, r3
   1c2dc:	4b1d      	ldr	r3, [pc, #116]	; (1c354 <xTaskCreate+0x90>)
   1c2de:	4798      	blx	r3
   1c2e0:	0003      	movs	r3, r0
   1c2e2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1c2e4:	697b      	ldr	r3, [r7, #20]
   1c2e6:	2b00      	cmp	r3, #0
   1c2e8:	d010      	beq.n	1c30c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1c2ea:	2054      	movs	r0, #84	; 0x54
   1c2ec:	4b19      	ldr	r3, [pc, #100]	; (1c354 <xTaskCreate+0x90>)
   1c2ee:	4798      	blx	r3
   1c2f0:	0003      	movs	r3, r0
   1c2f2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1c2f4:	69fb      	ldr	r3, [r7, #28]
   1c2f6:	2b00      	cmp	r3, #0
   1c2f8:	d003      	beq.n	1c302 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1c2fa:	69fb      	ldr	r3, [r7, #28]
   1c2fc:	697a      	ldr	r2, [r7, #20]
   1c2fe:	631a      	str	r2, [r3, #48]	; 0x30
   1c300:	e006      	b.n	1c310 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1c302:	697b      	ldr	r3, [r7, #20]
   1c304:	0018      	movs	r0, r3
   1c306:	4b14      	ldr	r3, [pc, #80]	; (1c358 <xTaskCreate+0x94>)
   1c308:	4798      	blx	r3
   1c30a:	e001      	b.n	1c310 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1c30c:	2300      	movs	r3, #0
   1c30e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1c310:	69fb      	ldr	r3, [r7, #28]
   1c312:	2b00      	cmp	r3, #0
   1c314:	d016      	beq.n	1c344 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1c316:	1dbb      	adds	r3, r7, #6
   1c318:	881a      	ldrh	r2, [r3, #0]
   1c31a:	683c      	ldr	r4, [r7, #0]
   1c31c:	68b9      	ldr	r1, [r7, #8]
   1c31e:	68f8      	ldr	r0, [r7, #12]
   1c320:	2300      	movs	r3, #0
   1c322:	9303      	str	r3, [sp, #12]
   1c324:	69fb      	ldr	r3, [r7, #28]
   1c326:	9302      	str	r3, [sp, #8]
   1c328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c32a:	9301      	str	r3, [sp, #4]
   1c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c32e:	9300      	str	r3, [sp, #0]
   1c330:	0023      	movs	r3, r4
   1c332:	4c0a      	ldr	r4, [pc, #40]	; (1c35c <xTaskCreate+0x98>)
   1c334:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1c336:	69fb      	ldr	r3, [r7, #28]
   1c338:	0018      	movs	r0, r3
   1c33a:	4b09      	ldr	r3, [pc, #36]	; (1c360 <xTaskCreate+0x9c>)
   1c33c:	4798      	blx	r3
			xReturn = pdPASS;
   1c33e:	2301      	movs	r3, #1
   1c340:	61bb      	str	r3, [r7, #24]
   1c342:	e002      	b.n	1c34a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1c344:	2301      	movs	r3, #1
   1c346:	425b      	negs	r3, r3
   1c348:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1c34a:	69bb      	ldr	r3, [r7, #24]
	}
   1c34c:	0018      	movs	r0, r3
   1c34e:	46bd      	mov	sp, r7
   1c350:	b009      	add	sp, #36	; 0x24
   1c352:	bd90      	pop	{r4, r7, pc}
   1c354:	0001a7a1 	.word	0x0001a7a1
   1c358:	0001a865 	.word	0x0001a865
   1c35c:	0001c365 	.word	0x0001c365
   1c360:	0001c475 	.word	0x0001c475

0001c364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1c364:	b580      	push	{r7, lr}
   1c366:	b086      	sub	sp, #24
   1c368:	af00      	add	r7, sp, #0
   1c36a:	60f8      	str	r0, [r7, #12]
   1c36c:	60b9      	str	r1, [r7, #8]
   1c36e:	607a      	str	r2, [r7, #4]
   1c370:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1c372:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c374:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c376:	687b      	ldr	r3, [r7, #4]
   1c378:	009b      	lsls	r3, r3, #2
   1c37a:	001a      	movs	r2, r3
   1c37c:	21a5      	movs	r1, #165	; 0xa5
   1c37e:	4b39      	ldr	r3, [pc, #228]	; (1c464 <prvInitialiseNewTask+0x100>)
   1c380:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c386:	687b      	ldr	r3, [r7, #4]
   1c388:	4937      	ldr	r1, [pc, #220]	; (1c468 <prvInitialiseNewTask+0x104>)
   1c38a:	468c      	mov	ip, r1
   1c38c:	4463      	add	r3, ip
   1c38e:	009b      	lsls	r3, r3, #2
   1c390:	18d3      	adds	r3, r2, r3
   1c392:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1c394:	693b      	ldr	r3, [r7, #16]
   1c396:	2207      	movs	r2, #7
   1c398:	4393      	bics	r3, r2
   1c39a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1c39c:	693b      	ldr	r3, [r7, #16]
   1c39e:	2207      	movs	r2, #7
   1c3a0:	4013      	ands	r3, r2
   1c3a2:	d001      	beq.n	1c3a8 <prvInitialiseNewTask+0x44>
   1c3a4:	b672      	cpsid	i
   1c3a6:	e7fe      	b.n	1c3a6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c3a8:	2300      	movs	r3, #0
   1c3aa:	617b      	str	r3, [r7, #20]
   1c3ac:	e013      	b.n	1c3d6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1c3ae:	68ba      	ldr	r2, [r7, #8]
   1c3b0:	697b      	ldr	r3, [r7, #20]
   1c3b2:	18d3      	adds	r3, r2, r3
   1c3b4:	7818      	ldrb	r0, [r3, #0]
   1c3b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c3b8:	2134      	movs	r1, #52	; 0x34
   1c3ba:	697b      	ldr	r3, [r7, #20]
   1c3bc:	18d3      	adds	r3, r2, r3
   1c3be:	185b      	adds	r3, r3, r1
   1c3c0:	1c02      	adds	r2, r0, #0
   1c3c2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1c3c4:	68ba      	ldr	r2, [r7, #8]
   1c3c6:	697b      	ldr	r3, [r7, #20]
   1c3c8:	18d3      	adds	r3, r2, r3
   1c3ca:	781b      	ldrb	r3, [r3, #0]
   1c3cc:	2b00      	cmp	r3, #0
   1c3ce:	d006      	beq.n	1c3de <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c3d0:	697b      	ldr	r3, [r7, #20]
   1c3d2:	3301      	adds	r3, #1
   1c3d4:	617b      	str	r3, [r7, #20]
   1c3d6:	697b      	ldr	r3, [r7, #20]
   1c3d8:	2b07      	cmp	r3, #7
   1c3da:	d9e8      	bls.n	1c3ae <prvInitialiseNewTask+0x4a>
   1c3dc:	e000      	b.n	1c3e0 <prvInitialiseNewTask+0x7c>
		{
			break;
   1c3de:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1c3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c3e2:	223b      	movs	r2, #59	; 0x3b
   1c3e4:	2100      	movs	r1, #0
   1c3e6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1c3e8:	6a3b      	ldr	r3, [r7, #32]
   1c3ea:	2b04      	cmp	r3, #4
   1c3ec:	d901      	bls.n	1c3f2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1c3ee:	2304      	movs	r3, #4
   1c3f0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1c3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c3f4:	6a3a      	ldr	r2, [r7, #32]
   1c3f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1c3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c3fa:	6a3a      	ldr	r2, [r7, #32]
   1c3fc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1c3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c400:	2200      	movs	r2, #0
   1c402:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1c404:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c406:	3304      	adds	r3, #4
   1c408:	0018      	movs	r0, r3
   1c40a:	4b18      	ldr	r3, [pc, #96]	; (1c46c <prvInitialiseNewTask+0x108>)
   1c40c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1c40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c410:	3318      	adds	r3, #24
   1c412:	0018      	movs	r0, r3
   1c414:	4b15      	ldr	r3, [pc, #84]	; (1c46c <prvInitialiseNewTask+0x108>)
   1c416:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1c418:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c41a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c41c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c41e:	6a3b      	ldr	r3, [r7, #32]
   1c420:	2205      	movs	r2, #5
   1c422:	1ad2      	subs	r2, r2, r3
   1c424:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c426:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1c428:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c42a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c42c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1c42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c430:	2200      	movs	r2, #0
   1c432:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c434:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c436:	2250      	movs	r2, #80	; 0x50
   1c438:	2100      	movs	r1, #0
   1c43a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1c43c:	683a      	ldr	r2, [r7, #0]
   1c43e:	68f9      	ldr	r1, [r7, #12]
   1c440:	693b      	ldr	r3, [r7, #16]
   1c442:	0018      	movs	r0, r3
   1c444:	4b0a      	ldr	r3, [pc, #40]	; (1c470 <prvInitialiseNewTask+0x10c>)
   1c446:	4798      	blx	r3
   1c448:	0002      	movs	r2, r0
   1c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c44c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1c44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c450:	2b00      	cmp	r3, #0
   1c452:	d002      	beq.n	1c45a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c456:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c458:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c45a:	46c0      	nop			; (mov r8, r8)
   1c45c:	46bd      	mov	sp, r7
   1c45e:	b006      	add	sp, #24
   1c460:	bd80      	pop	{r7, pc}
   1c462:	46c0      	nop			; (mov r8, r8)
   1c464:	00034f63 	.word	0x00034f63
   1c468:	3fffffff 	.word	0x3fffffff
   1c46c:	0001a415 	.word	0x0001a415
   1c470:	0001a52d 	.word	0x0001a52d

0001c474 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1c474:	b580      	push	{r7, lr}
   1c476:	b082      	sub	sp, #8
   1c478:	af00      	add	r7, sp, #0
   1c47a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1c47c:	4b60      	ldr	r3, [pc, #384]	; (1c600 <prvAddNewTaskToReadyList+0x18c>)
   1c47e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1c480:	4b60      	ldr	r3, [pc, #384]	; (1c604 <prvAddNewTaskToReadyList+0x190>)
   1c482:	681b      	ldr	r3, [r3, #0]
   1c484:	1c5a      	adds	r2, r3, #1
   1c486:	4b5f      	ldr	r3, [pc, #380]	; (1c604 <prvAddNewTaskToReadyList+0x190>)
   1c488:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1c48a:	4b5f      	ldr	r3, [pc, #380]	; (1c608 <prvAddNewTaskToReadyList+0x194>)
   1c48c:	681b      	ldr	r3, [r3, #0]
   1c48e:	2b00      	cmp	r3, #0
   1c490:	d109      	bne.n	1c4a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1c492:	4b5d      	ldr	r3, [pc, #372]	; (1c608 <prvAddNewTaskToReadyList+0x194>)
   1c494:	687a      	ldr	r2, [r7, #4]
   1c496:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1c498:	4b5a      	ldr	r3, [pc, #360]	; (1c604 <prvAddNewTaskToReadyList+0x190>)
   1c49a:	681b      	ldr	r3, [r3, #0]
   1c49c:	2b01      	cmp	r3, #1
   1c49e:	d110      	bne.n	1c4c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1c4a0:	4b5a      	ldr	r3, [pc, #360]	; (1c60c <prvAddNewTaskToReadyList+0x198>)
   1c4a2:	4798      	blx	r3
   1c4a4:	e00d      	b.n	1c4c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1c4a6:	4b5a      	ldr	r3, [pc, #360]	; (1c610 <prvAddNewTaskToReadyList+0x19c>)
   1c4a8:	681b      	ldr	r3, [r3, #0]
   1c4aa:	2b00      	cmp	r3, #0
   1c4ac:	d109      	bne.n	1c4c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1c4ae:	4b56      	ldr	r3, [pc, #344]	; (1c608 <prvAddNewTaskToReadyList+0x194>)
   1c4b0:	681b      	ldr	r3, [r3, #0]
   1c4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c4b4:	687b      	ldr	r3, [r7, #4]
   1c4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c4b8:	429a      	cmp	r2, r3
   1c4ba:	d802      	bhi.n	1c4c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1c4bc:	4b52      	ldr	r3, [pc, #328]	; (1c608 <prvAddNewTaskToReadyList+0x194>)
   1c4be:	687a      	ldr	r2, [r7, #4]
   1c4c0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1c4c2:	4b54      	ldr	r3, [pc, #336]	; (1c614 <prvAddNewTaskToReadyList+0x1a0>)
   1c4c4:	681b      	ldr	r3, [r3, #0]
   1c4c6:	1c5a      	adds	r2, r3, #1
   1c4c8:	4b52      	ldr	r3, [pc, #328]	; (1c614 <prvAddNewTaskToReadyList+0x1a0>)
   1c4ca:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1c4cc:	4b51      	ldr	r3, [pc, #324]	; (1c614 <prvAddNewTaskToReadyList+0x1a0>)
   1c4ce:	681a      	ldr	r2, [r3, #0]
   1c4d0:	687b      	ldr	r3, [r7, #4]
   1c4d2:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1c4d4:	687b      	ldr	r3, [r7, #4]
   1c4d6:	2b00      	cmp	r3, #0
   1c4d8:	d052      	beq.n	1c580 <prvAddNewTaskToReadyList+0x10c>
   1c4da:	2003      	movs	r0, #3
   1c4dc:	4b4e      	ldr	r3, [pc, #312]	; (1c618 <prvAddNewTaskToReadyList+0x1a4>)
   1c4de:	4798      	blx	r3
   1c4e0:	0003      	movs	r3, r0
   1c4e2:	b29a      	uxth	r2, r3
   1c4e4:	687b      	ldr	r3, [r7, #4]
   1c4e6:	0011      	movs	r1, r2
   1c4e8:	0018      	movs	r0, r3
   1c4ea:	4b4c      	ldr	r3, [pc, #304]	; (1c61c <prvAddNewTaskToReadyList+0x1a8>)
   1c4ec:	4798      	blx	r3
   1c4ee:	4b4c      	ldr	r3, [pc, #304]	; (1c620 <prvAddNewTaskToReadyList+0x1ac>)
   1c4f0:	881a      	ldrh	r2, [r3, #0]
   1c4f2:	687b      	ldr	r3, [r7, #4]
   1c4f4:	0011      	movs	r1, r2
   1c4f6:	0018      	movs	r0, r3
   1c4f8:	4b4a      	ldr	r3, [pc, #296]	; (1c624 <prvAddNewTaskToReadyList+0x1b0>)
   1c4fa:	4798      	blx	r3
   1c4fc:	687b      	ldr	r3, [r7, #4]
   1c4fe:	0018      	movs	r0, r3
   1c500:	4b49      	ldr	r3, [pc, #292]	; (1c628 <prvAddNewTaskToReadyList+0x1b4>)
   1c502:	4798      	blx	r3
   1c504:	0003      	movs	r3, r0
   1c506:	b2d9      	uxtb	r1, r3
   1c508:	687b      	ldr	r3, [r7, #4]
   1c50a:	3334      	adds	r3, #52	; 0x34
   1c50c:	001a      	movs	r2, r3
   1c50e:	2003      	movs	r0, #3
   1c510:	4b46      	ldr	r3, [pc, #280]	; (1c62c <prvAddNewTaskToReadyList+0x1b8>)
   1c512:	4798      	blx	r3
   1c514:	687b      	ldr	r3, [r7, #4]
   1c516:	0018      	movs	r0, r3
   1c518:	4b43      	ldr	r3, [pc, #268]	; (1c628 <prvAddNewTaskToReadyList+0x1b4>)
   1c51a:	4798      	blx	r3
   1c51c:	0003      	movs	r3, r0
   1c51e:	b2d9      	uxtb	r1, r3
   1c520:	687b      	ldr	r3, [r7, #4]
   1c522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c524:	b2db      	uxtb	r3, r3
   1c526:	001a      	movs	r2, r3
   1c528:	2003      	movs	r0, #3
   1c52a:	4b41      	ldr	r3, [pc, #260]	; (1c630 <prvAddNewTaskToReadyList+0x1bc>)
   1c52c:	4798      	blx	r3
   1c52e:	4b41      	ldr	r3, [pc, #260]	; (1c634 <prvAddNewTaskToReadyList+0x1c0>)
   1c530:	4798      	blx	r3
   1c532:	0003      	movs	r3, r0
   1c534:	0018      	movs	r0, r3
   1c536:	4b40      	ldr	r3, [pc, #256]	; (1c638 <prvAddNewTaskToReadyList+0x1c4>)
   1c538:	4798      	blx	r3
   1c53a:	0003      	movs	r3, r0
   1c53c:	001a      	movs	r2, r3
   1c53e:	4b3f      	ldr	r3, [pc, #252]	; (1c63c <prvAddNewTaskToReadyList+0x1c8>)
   1c540:	881b      	ldrh	r3, [r3, #0]
   1c542:	4013      	ands	r3, r2
   1c544:	b29b      	uxth	r3, r3
   1c546:	2b00      	cmp	r3, #0
   1c548:	d016      	beq.n	1c578 <prvAddNewTaskToReadyList+0x104>
   1c54a:	687b      	ldr	r3, [r7, #4]
   1c54c:	0018      	movs	r0, r3
   1c54e:	4b3a      	ldr	r3, [pc, #232]	; (1c638 <prvAddNewTaskToReadyList+0x1c4>)
   1c550:	4798      	blx	r3
   1c552:	0003      	movs	r3, r0
   1c554:	001a      	movs	r2, r3
   1c556:	4b39      	ldr	r3, [pc, #228]	; (1c63c <prvAddNewTaskToReadyList+0x1c8>)
   1c558:	881b      	ldrh	r3, [r3, #0]
   1c55a:	4013      	ands	r3, r2
   1c55c:	b29b      	uxth	r3, r3
   1c55e:	2b00      	cmp	r3, #0
   1c560:	d00a      	beq.n	1c578 <prvAddNewTaskToReadyList+0x104>
   1c562:	687b      	ldr	r3, [r7, #4]
   1c564:	0018      	movs	r0, r3
   1c566:	4b30      	ldr	r3, [pc, #192]	; (1c628 <prvAddNewTaskToReadyList+0x1b4>)
   1c568:	4798      	blx	r3
   1c56a:	0003      	movs	r3, r0
   1c56c:	b2db      	uxtb	r3, r3
   1c56e:	001a      	movs	r2, r3
   1c570:	2103      	movs	r1, #3
   1c572:	201b      	movs	r0, #27
   1c574:	4b32      	ldr	r3, [pc, #200]	; (1c640 <prvAddNewTaskToReadyList+0x1cc>)
   1c576:	4798      	blx	r3
   1c578:	687b      	ldr	r3, [r7, #4]
   1c57a:	0018      	movs	r0, r3
   1c57c:	4b31      	ldr	r3, [pc, #196]	; (1c644 <prvAddNewTaskToReadyList+0x1d0>)
   1c57e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1c580:	687b      	ldr	r3, [r7, #4]
   1c582:	0018      	movs	r0, r3
   1c584:	4b2c      	ldr	r3, [pc, #176]	; (1c638 <prvAddNewTaskToReadyList+0x1c4>)
   1c586:	4798      	blx	r3
   1c588:	0003      	movs	r3, r0
   1c58a:	001a      	movs	r2, r3
   1c58c:	4b2b      	ldr	r3, [pc, #172]	; (1c63c <prvAddNewTaskToReadyList+0x1c8>)
   1c58e:	881b      	ldrh	r3, [r3, #0]
   1c590:	4013      	ands	r3, r2
   1c592:	b29b      	uxth	r3, r3
   1c594:	2b00      	cmp	r3, #0
   1c596:	d008      	beq.n	1c5aa <prvAddNewTaskToReadyList+0x136>
   1c598:	687b      	ldr	r3, [r7, #4]
   1c59a:	0018      	movs	r0, r3
   1c59c:	4b22      	ldr	r3, [pc, #136]	; (1c628 <prvAddNewTaskToReadyList+0x1b4>)
   1c59e:	4798      	blx	r3
   1c5a0:	0003      	movs	r3, r0
   1c5a2:	b2db      	uxtb	r3, r3
   1c5a4:	0018      	movs	r0, r3
   1c5a6:	4b28      	ldr	r3, [pc, #160]	; (1c648 <prvAddNewTaskToReadyList+0x1d4>)
   1c5a8:	4798      	blx	r3
   1c5aa:	687b      	ldr	r3, [r7, #4]
   1c5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c5ae:	4b27      	ldr	r3, [pc, #156]	; (1c64c <prvAddNewTaskToReadyList+0x1d8>)
   1c5b0:	681b      	ldr	r3, [r3, #0]
   1c5b2:	429a      	cmp	r2, r3
   1c5b4:	d903      	bls.n	1c5be <prvAddNewTaskToReadyList+0x14a>
   1c5b6:	687b      	ldr	r3, [r7, #4]
   1c5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c5ba:	4b24      	ldr	r3, [pc, #144]	; (1c64c <prvAddNewTaskToReadyList+0x1d8>)
   1c5bc:	601a      	str	r2, [r3, #0]
   1c5be:	687b      	ldr	r3, [r7, #4]
   1c5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c5c2:	0013      	movs	r3, r2
   1c5c4:	009b      	lsls	r3, r3, #2
   1c5c6:	189b      	adds	r3, r3, r2
   1c5c8:	009b      	lsls	r3, r3, #2
   1c5ca:	4a21      	ldr	r2, [pc, #132]	; (1c650 <prvAddNewTaskToReadyList+0x1dc>)
   1c5cc:	189a      	adds	r2, r3, r2
   1c5ce:	687b      	ldr	r3, [r7, #4]
   1c5d0:	3304      	adds	r3, #4
   1c5d2:	0019      	movs	r1, r3
   1c5d4:	0010      	movs	r0, r2
   1c5d6:	4b1f      	ldr	r3, [pc, #124]	; (1c654 <prvAddNewTaskToReadyList+0x1e0>)
   1c5d8:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1c5da:	4b1f      	ldr	r3, [pc, #124]	; (1c658 <prvAddNewTaskToReadyList+0x1e4>)
   1c5dc:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1c5de:	4b0c      	ldr	r3, [pc, #48]	; (1c610 <prvAddNewTaskToReadyList+0x19c>)
   1c5e0:	681b      	ldr	r3, [r3, #0]
   1c5e2:	2b00      	cmp	r3, #0
   1c5e4:	d008      	beq.n	1c5f8 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1c5e6:	4b08      	ldr	r3, [pc, #32]	; (1c608 <prvAddNewTaskToReadyList+0x194>)
   1c5e8:	681b      	ldr	r3, [r3, #0]
   1c5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c5ec:	687b      	ldr	r3, [r7, #4]
   1c5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c5f0:	429a      	cmp	r2, r3
   1c5f2:	d201      	bcs.n	1c5f8 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1c5f4:	4b19      	ldr	r3, [pc, #100]	; (1c65c <prvAddNewTaskToReadyList+0x1e8>)
   1c5f6:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c5f8:	46c0      	nop			; (mov r8, r8)
   1c5fa:	46bd      	mov	sp, r7
   1c5fc:	b002      	add	sp, #8
   1c5fe:	bd80      	pop	{r7, pc}
   1c600:	0001a669 	.word	0x0001a669
   1c604:	200041b4 	.word	0x200041b4
   1c608:	200040dc 	.word	0x200040dc
   1c60c:	0001d195 	.word	0x0001d195
   1c610:	200041c0 	.word	0x200041c0
   1c614:	200041d0 	.word	0x200041d0
   1c618:	00019be1 	.word	0x00019be1
   1c61c:	00018685 	.word	0x00018685
   1c620:	20000112 	.word	0x20000112
   1c624:	000186c1 	.word	0x000186c1
   1c628:	00018641 	.word	0x00018641
   1c62c:	00019e11 	.word	0x00019e11
   1c630:	00019575 	.word	0x00019575
   1c634:	000188fd 	.word	0x000188fd
   1c638:	00018661 	.word	0x00018661
   1c63c:	20000110 	.word	0x20000110
   1c640:	00019059 	.word	0x00019059
   1c644:	000187c1 	.word	0x000187c1
   1c648:	00018e11 	.word	0x00018e11
   1c64c:	200041bc 	.word	0x200041bc
   1c650:	200040e0 	.word	0x200040e0
   1c654:	0001a42b 	.word	0x0001a42b
   1c658:	0001a68d 	.word	0x0001a68d
   1c65c:	0001a651 	.word	0x0001a651

0001c660 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1c660:	b580      	push	{r7, lr}
   1c662:	b084      	sub	sp, #16
   1c664:	af00      	add	r7, sp, #0
   1c666:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1c668:	2300      	movs	r3, #0
   1c66a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1c66c:	687b      	ldr	r3, [r7, #4]
   1c66e:	2b00      	cmp	r3, #0
   1c670:	d045      	beq.n	1c6fe <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1c672:	4b27      	ldr	r3, [pc, #156]	; (1c710 <vTaskDelay+0xb0>)
   1c674:	681b      	ldr	r3, [r3, #0]
   1c676:	2b00      	cmp	r3, #0
   1c678:	d001      	beq.n	1c67e <vTaskDelay+0x1e>
   1c67a:	b672      	cpsid	i
   1c67c:	e7fe      	b.n	1c67c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1c67e:	4b25      	ldr	r3, [pc, #148]	; (1c714 <vTaskDelay+0xb4>)
   1c680:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1c682:	4b25      	ldr	r3, [pc, #148]	; (1c718 <vTaskDelay+0xb8>)
   1c684:	681b      	ldr	r3, [r3, #0]
   1c686:	0018      	movs	r0, r3
   1c688:	4b24      	ldr	r3, [pc, #144]	; (1c71c <vTaskDelay+0xbc>)
   1c68a:	4798      	blx	r3
   1c68c:	0003      	movs	r3, r0
   1c68e:	001a      	movs	r2, r3
   1c690:	4b23      	ldr	r3, [pc, #140]	; (1c720 <vTaskDelay+0xc0>)
   1c692:	881b      	ldrh	r3, [r3, #0]
   1c694:	4013      	ands	r3, r2
   1c696:	b29b      	uxth	r3, r3
   1c698:	2b00      	cmp	r3, #0
   1c69a:	d00e      	beq.n	1c6ba <vTaskDelay+0x5a>
   1c69c:	687b      	ldr	r3, [r7, #4]
   1c69e:	0019      	movs	r1, r3
   1c6a0:	2089      	movs	r0, #137	; 0x89
   1c6a2:	4b20      	ldr	r3, [pc, #128]	; (1c724 <vTaskDelay+0xc4>)
   1c6a4:	4798      	blx	r3
   1c6a6:	4b1c      	ldr	r3, [pc, #112]	; (1c718 <vTaskDelay+0xb8>)
   1c6a8:	681b      	ldr	r3, [r3, #0]
   1c6aa:	0018      	movs	r0, r3
   1c6ac:	4b1e      	ldr	r3, [pc, #120]	; (1c728 <vTaskDelay+0xc8>)
   1c6ae:	4798      	blx	r3
   1c6b0:	0003      	movs	r3, r0
   1c6b2:	b2db      	uxtb	r3, r3
   1c6b4:	0018      	movs	r0, r3
   1c6b6:	4b1d      	ldr	r3, [pc, #116]	; (1c72c <vTaskDelay+0xcc>)
   1c6b8:	4798      	blx	r3
   1c6ba:	4b1d      	ldr	r3, [pc, #116]	; (1c730 <vTaskDelay+0xd0>)
   1c6bc:	4798      	blx	r3
   1c6be:	0003      	movs	r3, r0
   1c6c0:	0018      	movs	r0, r3
   1c6c2:	4b16      	ldr	r3, [pc, #88]	; (1c71c <vTaskDelay+0xbc>)
   1c6c4:	4798      	blx	r3
   1c6c6:	0003      	movs	r3, r0
   1c6c8:	001a      	movs	r2, r3
   1c6ca:	4b15      	ldr	r3, [pc, #84]	; (1c720 <vTaskDelay+0xc0>)
   1c6cc:	881b      	ldrh	r3, [r3, #0]
   1c6ce:	4013      	ands	r3, r2
   1c6d0:	b29b      	uxth	r3, r3
   1c6d2:	2b00      	cmp	r3, #0
   1c6d4:	d00a      	beq.n	1c6ec <vTaskDelay+0x8c>
   1c6d6:	4b16      	ldr	r3, [pc, #88]	; (1c730 <vTaskDelay+0xd0>)
   1c6d8:	4798      	blx	r3
   1c6da:	0003      	movs	r3, r0
   1c6dc:	0018      	movs	r0, r3
   1c6de:	4b12      	ldr	r3, [pc, #72]	; (1c728 <vTaskDelay+0xc8>)
   1c6e0:	4798      	blx	r3
   1c6e2:	0003      	movs	r3, r0
   1c6e4:	b2db      	uxtb	r3, r3
   1c6e6:	0018      	movs	r0, r3
   1c6e8:	4b10      	ldr	r3, [pc, #64]	; (1c72c <vTaskDelay+0xcc>)
   1c6ea:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1c6ec:	687b      	ldr	r3, [r7, #4]
   1c6ee:	2100      	movs	r1, #0
   1c6f0:	0018      	movs	r0, r3
   1c6f2:	4b10      	ldr	r3, [pc, #64]	; (1c734 <vTaskDelay+0xd4>)
   1c6f4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1c6f6:	4b10      	ldr	r3, [pc, #64]	; (1c738 <vTaskDelay+0xd8>)
   1c6f8:	4798      	blx	r3
   1c6fa:	0003      	movs	r3, r0
   1c6fc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1c6fe:	68fb      	ldr	r3, [r7, #12]
   1c700:	2b00      	cmp	r3, #0
   1c702:	d101      	bne.n	1c708 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1c704:	4b0d      	ldr	r3, [pc, #52]	; (1c73c <vTaskDelay+0xdc>)
   1c706:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c708:	46c0      	nop			; (mov r8, r8)
   1c70a:	46bd      	mov	sp, r7
   1c70c:	b004      	add	sp, #16
   1c70e:	bd80      	pop	{r7, pc}
   1c710:	200041dc 	.word	0x200041dc
   1c714:	0001c921 	.word	0x0001c921
   1c718:	200040dc 	.word	0x200040dc
   1c71c:	00018661 	.word	0x00018661
   1c720:	20000110 	.word	0x20000110
   1c724:	00019361 	.word	0x00019361
   1c728:	00018641 	.word	0x00018641
   1c72c:	000197f1 	.word	0x000197f1
   1c730:	000188fd 	.word	0x000188fd
   1c734:	0001d879 	.word	0x0001d879
   1c738:	0001c939 	.word	0x0001c939
   1c73c:	0001a651 	.word	0x0001a651

0001c740 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1c740:	b580      	push	{r7, lr}
   1c742:	b084      	sub	sp, #16
   1c744:	af00      	add	r7, sp, #0
   1c746:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1c748:	4b42      	ldr	r3, [pc, #264]	; (1c854 <vTaskSuspend+0x114>)
   1c74a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1c74c:	687b      	ldr	r3, [r7, #4]
   1c74e:	2b00      	cmp	r3, #0
   1c750:	d102      	bne.n	1c758 <vTaskSuspend+0x18>
   1c752:	4b41      	ldr	r3, [pc, #260]	; (1c858 <vTaskSuspend+0x118>)
   1c754:	681b      	ldr	r3, [r3, #0]
   1c756:	e000      	b.n	1c75a <vTaskSuspend+0x1a>
   1c758:	687b      	ldr	r3, [r7, #4]
   1c75a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1c75c:	4b3f      	ldr	r3, [pc, #252]	; (1c85c <vTaskSuspend+0x11c>)
   1c75e:	4798      	blx	r3
   1c760:	0003      	movs	r3, r0
   1c762:	0018      	movs	r0, r3
   1c764:	4b3e      	ldr	r3, [pc, #248]	; (1c860 <vTaskSuspend+0x120>)
   1c766:	4798      	blx	r3
   1c768:	0003      	movs	r3, r0
   1c76a:	001a      	movs	r2, r3
   1c76c:	4b3d      	ldr	r3, [pc, #244]	; (1c864 <vTaskSuspend+0x124>)
   1c76e:	881b      	ldrh	r3, [r3, #0]
   1c770:	4013      	ands	r3, r2
   1c772:	b29b      	uxth	r3, r3
   1c774:	2b00      	cmp	r3, #0
   1c776:	d016      	beq.n	1c7a6 <vTaskSuspend+0x66>
   1c778:	68fb      	ldr	r3, [r7, #12]
   1c77a:	0018      	movs	r0, r3
   1c77c:	4b38      	ldr	r3, [pc, #224]	; (1c860 <vTaskSuspend+0x120>)
   1c77e:	4798      	blx	r3
   1c780:	0003      	movs	r3, r0
   1c782:	001a      	movs	r2, r3
   1c784:	4b37      	ldr	r3, [pc, #220]	; (1c864 <vTaskSuspend+0x124>)
   1c786:	881b      	ldrh	r3, [r3, #0]
   1c788:	4013      	ands	r3, r2
   1c78a:	b29b      	uxth	r3, r3
   1c78c:	2b00      	cmp	r3, #0
   1c78e:	d00a      	beq.n	1c7a6 <vTaskSuspend+0x66>
   1c790:	68fb      	ldr	r3, [r7, #12]
   1c792:	0018      	movs	r0, r3
   1c794:	4b34      	ldr	r3, [pc, #208]	; (1c868 <vTaskSuspend+0x128>)
   1c796:	4798      	blx	r3
   1c798:	0003      	movs	r3, r0
   1c79a:	b2db      	uxtb	r3, r3
   1c79c:	001a      	movs	r2, r3
   1c79e:	2103      	movs	r1, #3
   1c7a0:	208a      	movs	r0, #138	; 0x8a
   1c7a2:	4b32      	ldr	r3, [pc, #200]	; (1c86c <vTaskSuspend+0x12c>)
   1c7a4:	4798      	blx	r3
   1c7a6:	68fb      	ldr	r3, [r7, #12]
   1c7a8:	0018      	movs	r0, r3
   1c7aa:	4b2f      	ldr	r3, [pc, #188]	; (1c868 <vTaskSuspend+0x128>)
   1c7ac:	4798      	blx	r3
   1c7ae:	0003      	movs	r3, r0
   1c7b0:	b2db      	uxtb	r3, r3
   1c7b2:	0018      	movs	r0, r3
   1c7b4:	4b2e      	ldr	r3, [pc, #184]	; (1c870 <vTaskSuspend+0x130>)
   1c7b6:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c7b8:	68fb      	ldr	r3, [r7, #12]
   1c7ba:	3304      	adds	r3, #4
   1c7bc:	0018      	movs	r0, r3
   1c7be:	4b2d      	ldr	r3, [pc, #180]	; (1c874 <vTaskSuspend+0x134>)
   1c7c0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c7c2:	68fb      	ldr	r3, [r7, #12]
   1c7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c7c6:	2b00      	cmp	r3, #0
   1c7c8:	d004      	beq.n	1c7d4 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c7ca:	68fb      	ldr	r3, [r7, #12]
   1c7cc:	3318      	adds	r3, #24
   1c7ce:	0018      	movs	r0, r3
   1c7d0:	4b28      	ldr	r3, [pc, #160]	; (1c874 <vTaskSuspend+0x134>)
   1c7d2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1c7d4:	68fb      	ldr	r3, [r7, #12]
   1c7d6:	1d1a      	adds	r2, r3, #4
   1c7d8:	4b27      	ldr	r3, [pc, #156]	; (1c878 <vTaskSuspend+0x138>)
   1c7da:	0011      	movs	r1, r2
   1c7dc:	0018      	movs	r0, r3
   1c7de:	4b27      	ldr	r3, [pc, #156]	; (1c87c <vTaskSuspend+0x13c>)
   1c7e0:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1c7e2:	68fb      	ldr	r3, [r7, #12]
   1c7e4:	2250      	movs	r2, #80	; 0x50
   1c7e6:	5c9b      	ldrb	r3, [r3, r2]
   1c7e8:	b2db      	uxtb	r3, r3
   1c7ea:	2b01      	cmp	r3, #1
   1c7ec:	d103      	bne.n	1c7f6 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c7ee:	68fb      	ldr	r3, [r7, #12]
   1c7f0:	2250      	movs	r2, #80	; 0x50
   1c7f2:	2100      	movs	r1, #0
   1c7f4:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1c7f6:	4b22      	ldr	r3, [pc, #136]	; (1c880 <vTaskSuspend+0x140>)
   1c7f8:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1c7fa:	4b22      	ldr	r3, [pc, #136]	; (1c884 <vTaskSuspend+0x144>)
   1c7fc:	681b      	ldr	r3, [r3, #0]
   1c7fe:	2b00      	cmp	r3, #0
   1c800:	d005      	beq.n	1c80e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1c802:	4b14      	ldr	r3, [pc, #80]	; (1c854 <vTaskSuspend+0x114>)
   1c804:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1c806:	4b20      	ldr	r3, [pc, #128]	; (1c888 <vTaskSuspend+0x148>)
   1c808:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1c80a:	4b1d      	ldr	r3, [pc, #116]	; (1c880 <vTaskSuspend+0x140>)
   1c80c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1c80e:	4b12      	ldr	r3, [pc, #72]	; (1c858 <vTaskSuspend+0x118>)
   1c810:	681b      	ldr	r3, [r3, #0]
   1c812:	68fa      	ldr	r2, [r7, #12]
   1c814:	429a      	cmp	r2, r3
   1c816:	d118      	bne.n	1c84a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1c818:	4b1a      	ldr	r3, [pc, #104]	; (1c884 <vTaskSuspend+0x144>)
   1c81a:	681b      	ldr	r3, [r3, #0]
   1c81c:	2b00      	cmp	r3, #0
   1c81e:	d008      	beq.n	1c832 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1c820:	4b1a      	ldr	r3, [pc, #104]	; (1c88c <vTaskSuspend+0x14c>)
   1c822:	681b      	ldr	r3, [r3, #0]
   1c824:	2b00      	cmp	r3, #0
   1c826:	d001      	beq.n	1c82c <vTaskSuspend+0xec>
   1c828:	b672      	cpsid	i
   1c82a:	e7fe      	b.n	1c82a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1c82c:	4b18      	ldr	r3, [pc, #96]	; (1c890 <vTaskSuspend+0x150>)
   1c82e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c830:	e00b      	b.n	1c84a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1c832:	4b11      	ldr	r3, [pc, #68]	; (1c878 <vTaskSuspend+0x138>)
   1c834:	681a      	ldr	r2, [r3, #0]
   1c836:	4b17      	ldr	r3, [pc, #92]	; (1c894 <vTaskSuspend+0x154>)
   1c838:	681b      	ldr	r3, [r3, #0]
   1c83a:	429a      	cmp	r2, r3
   1c83c:	d103      	bne.n	1c846 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1c83e:	4b06      	ldr	r3, [pc, #24]	; (1c858 <vTaskSuspend+0x118>)
   1c840:	2200      	movs	r2, #0
   1c842:	601a      	str	r2, [r3, #0]
	}
   1c844:	e001      	b.n	1c84a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1c846:	4b14      	ldr	r3, [pc, #80]	; (1c898 <vTaskSuspend+0x158>)
   1c848:	4798      	blx	r3
	}
   1c84a:	46c0      	nop			; (mov r8, r8)
   1c84c:	46bd      	mov	sp, r7
   1c84e:	b004      	add	sp, #16
   1c850:	bd80      	pop	{r7, pc}
   1c852:	46c0      	nop			; (mov r8, r8)
   1c854:	0001a669 	.word	0x0001a669
   1c858:	200040dc 	.word	0x200040dc
   1c85c:	000188fd 	.word	0x000188fd
   1c860:	00018661 	.word	0x00018661
   1c864:	20000110 	.word	0x20000110
   1c868:	00018641 	.word	0x00018641
   1c86c:	00019059 	.word	0x00019059
   1c870:	000197f1 	.word	0x000197f1
   1c874:	0001a4db 	.word	0x0001a4db
   1c878:	200041a0 	.word	0x200041a0
   1c87c:	0001a42b 	.word	0x0001a42b
   1c880:	0001a68d 	.word	0x0001a68d
   1c884:	200041c0 	.word	0x200041c0
   1c888:	0001d325 	.word	0x0001d325
   1c88c:	200041dc 	.word	0x200041dc
   1c890:	0001a651 	.word	0x0001a651
   1c894:	200041b4 	.word	0x200041b4
   1c898:	0001ccb5 	.word	0x0001ccb5

0001c89c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1c89c:	b590      	push	{r4, r7, lr}
   1c89e:	b085      	sub	sp, #20
   1c8a0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1c8a2:	4916      	ldr	r1, [pc, #88]	; (1c8fc <vTaskStartScheduler+0x60>)
   1c8a4:	4816      	ldr	r0, [pc, #88]	; (1c900 <vTaskStartScheduler+0x64>)
   1c8a6:	4b17      	ldr	r3, [pc, #92]	; (1c904 <vTaskStartScheduler+0x68>)
   1c8a8:	9301      	str	r3, [sp, #4]
   1c8aa:	2300      	movs	r3, #0
   1c8ac:	9300      	str	r3, [sp, #0]
   1c8ae:	2300      	movs	r3, #0
   1c8b0:	2296      	movs	r2, #150	; 0x96
   1c8b2:	4c15      	ldr	r4, [pc, #84]	; (1c908 <vTaskStartScheduler+0x6c>)
   1c8b4:	47a0      	blx	r4
   1c8b6:	0003      	movs	r3, r0
   1c8b8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1c8ba:	687b      	ldr	r3, [r7, #4]
   1c8bc:	2b01      	cmp	r3, #1
   1c8be:	d103      	bne.n	1c8c8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1c8c0:	4b12      	ldr	r3, [pc, #72]	; (1c90c <vTaskStartScheduler+0x70>)
   1c8c2:	4798      	blx	r3
   1c8c4:	0003      	movs	r3, r0
   1c8c6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1c8c8:	687b      	ldr	r3, [r7, #4]
   1c8ca:	2b01      	cmp	r3, #1
   1c8cc:	d10d      	bne.n	1c8ea <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1c8ce:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1c8d0:	4b0f      	ldr	r3, [pc, #60]	; (1c910 <vTaskStartScheduler+0x74>)
   1c8d2:	2201      	movs	r2, #1
   1c8d4:	4252      	negs	r2, r2
   1c8d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1c8d8:	4b0e      	ldr	r3, [pc, #56]	; (1c914 <vTaskStartScheduler+0x78>)
   1c8da:	2201      	movs	r2, #1
   1c8dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1c8de:	4b0e      	ldr	r3, [pc, #56]	; (1c918 <vTaskStartScheduler+0x7c>)
   1c8e0:	2200      	movs	r2, #0
   1c8e2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1c8e4:	4b0d      	ldr	r3, [pc, #52]	; (1c91c <vTaskStartScheduler+0x80>)
   1c8e6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1c8e8:	e004      	b.n	1c8f4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1c8ea:	687b      	ldr	r3, [r7, #4]
   1c8ec:	3301      	adds	r3, #1
   1c8ee:	d101      	bne.n	1c8f4 <vTaskStartScheduler+0x58>
   1c8f0:	b672      	cpsid	i
   1c8f2:	e7fe      	b.n	1c8f2 <vTaskStartScheduler+0x56>
}
   1c8f4:	46c0      	nop			; (mov r8, r8)
   1c8f6:	46bd      	mov	sp, r7
   1c8f8:	b003      	add	sp, #12
   1c8fa:	bd90      	pop	{r4, r7, pc}
   1c8fc:	00038abc 	.word	0x00038abc
   1c900:	0001d16d 	.word	0x0001d16d
   1c904:	200041d8 	.word	0x200041d8
   1c908:	0001c2c5 	.word	0x0001c2c5
   1c90c:	0001d92d 	.word	0x0001d92d
   1c910:	200041d4 	.word	0x200041d4
   1c914:	200041c0 	.word	0x200041c0
   1c918:	200041b8 	.word	0x200041b8
   1c91c:	0001a5f9 	.word	0x0001a5f9

0001c920 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1c920:	b580      	push	{r7, lr}
   1c922:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1c924:	4b03      	ldr	r3, [pc, #12]	; (1c934 <vTaskSuspendAll+0x14>)
   1c926:	681b      	ldr	r3, [r3, #0]
   1c928:	1c5a      	adds	r2, r3, #1
   1c92a:	4b02      	ldr	r3, [pc, #8]	; (1c934 <vTaskSuspendAll+0x14>)
   1c92c:	601a      	str	r2, [r3, #0]
}
   1c92e:	46c0      	nop			; (mov r8, r8)
   1c930:	46bd      	mov	sp, r7
   1c932:	bd80      	pop	{r7, pc}
   1c934:	200041dc 	.word	0x200041dc

0001c938 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1c938:	b580      	push	{r7, lr}
   1c93a:	b084      	sub	sp, #16
   1c93c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1c93e:	2300      	movs	r3, #0
   1c940:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1c942:	2300      	movs	r3, #0
   1c944:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1c946:	4b45      	ldr	r3, [pc, #276]	; (1ca5c <xTaskResumeAll+0x124>)
   1c948:	681b      	ldr	r3, [r3, #0]
   1c94a:	2b00      	cmp	r3, #0
   1c94c:	d101      	bne.n	1c952 <xTaskResumeAll+0x1a>
   1c94e:	b672      	cpsid	i
   1c950:	e7fe      	b.n	1c950 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1c952:	4b43      	ldr	r3, [pc, #268]	; (1ca60 <xTaskResumeAll+0x128>)
   1c954:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1c956:	4b41      	ldr	r3, [pc, #260]	; (1ca5c <xTaskResumeAll+0x124>)
   1c958:	681b      	ldr	r3, [r3, #0]
   1c95a:	1e5a      	subs	r2, r3, #1
   1c95c:	4b3f      	ldr	r3, [pc, #252]	; (1ca5c <xTaskResumeAll+0x124>)
   1c95e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c960:	4b3e      	ldr	r3, [pc, #248]	; (1ca5c <xTaskResumeAll+0x124>)
   1c962:	681b      	ldr	r3, [r3, #0]
   1c964:	2b00      	cmp	r3, #0
   1c966:	d000      	beq.n	1c96a <xTaskResumeAll+0x32>
   1c968:	e071      	b.n	1ca4e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1c96a:	4b3e      	ldr	r3, [pc, #248]	; (1ca64 <xTaskResumeAll+0x12c>)
   1c96c:	681b      	ldr	r3, [r3, #0]
   1c96e:	2b00      	cmp	r3, #0
   1c970:	d100      	bne.n	1c974 <xTaskResumeAll+0x3c>
   1c972:	e06c      	b.n	1ca4e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c974:	e044      	b.n	1ca00 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1c976:	4b3c      	ldr	r3, [pc, #240]	; (1ca68 <xTaskResumeAll+0x130>)
   1c978:	68db      	ldr	r3, [r3, #12]
   1c97a:	68db      	ldr	r3, [r3, #12]
   1c97c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c97e:	68fb      	ldr	r3, [r7, #12]
   1c980:	3318      	adds	r3, #24
   1c982:	0018      	movs	r0, r3
   1c984:	4b39      	ldr	r3, [pc, #228]	; (1ca6c <xTaskResumeAll+0x134>)
   1c986:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c988:	68fb      	ldr	r3, [r7, #12]
   1c98a:	3304      	adds	r3, #4
   1c98c:	0018      	movs	r0, r3
   1c98e:	4b37      	ldr	r3, [pc, #220]	; (1ca6c <xTaskResumeAll+0x134>)
   1c990:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1c992:	68fb      	ldr	r3, [r7, #12]
   1c994:	0018      	movs	r0, r3
   1c996:	4b36      	ldr	r3, [pc, #216]	; (1ca70 <xTaskResumeAll+0x138>)
   1c998:	4798      	blx	r3
   1c99a:	0003      	movs	r3, r0
   1c99c:	001a      	movs	r2, r3
   1c99e:	4b35      	ldr	r3, [pc, #212]	; (1ca74 <xTaskResumeAll+0x13c>)
   1c9a0:	881b      	ldrh	r3, [r3, #0]
   1c9a2:	4013      	ands	r3, r2
   1c9a4:	b29b      	uxth	r3, r3
   1c9a6:	2b00      	cmp	r3, #0
   1c9a8:	d008      	beq.n	1c9bc <xTaskResumeAll+0x84>
   1c9aa:	68fb      	ldr	r3, [r7, #12]
   1c9ac:	0018      	movs	r0, r3
   1c9ae:	4b32      	ldr	r3, [pc, #200]	; (1ca78 <xTaskResumeAll+0x140>)
   1c9b0:	4798      	blx	r3
   1c9b2:	0003      	movs	r3, r0
   1c9b4:	b2db      	uxtb	r3, r3
   1c9b6:	0018      	movs	r0, r3
   1c9b8:	4b30      	ldr	r3, [pc, #192]	; (1ca7c <xTaskResumeAll+0x144>)
   1c9ba:	4798      	blx	r3
   1c9bc:	68fb      	ldr	r3, [r7, #12]
   1c9be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c9c0:	4b2f      	ldr	r3, [pc, #188]	; (1ca80 <xTaskResumeAll+0x148>)
   1c9c2:	681b      	ldr	r3, [r3, #0]
   1c9c4:	429a      	cmp	r2, r3
   1c9c6:	d903      	bls.n	1c9d0 <xTaskResumeAll+0x98>
   1c9c8:	68fb      	ldr	r3, [r7, #12]
   1c9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c9cc:	4b2c      	ldr	r3, [pc, #176]	; (1ca80 <xTaskResumeAll+0x148>)
   1c9ce:	601a      	str	r2, [r3, #0]
   1c9d0:	68fb      	ldr	r3, [r7, #12]
   1c9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c9d4:	0013      	movs	r3, r2
   1c9d6:	009b      	lsls	r3, r3, #2
   1c9d8:	189b      	adds	r3, r3, r2
   1c9da:	009b      	lsls	r3, r3, #2
   1c9dc:	4a29      	ldr	r2, [pc, #164]	; (1ca84 <xTaskResumeAll+0x14c>)
   1c9de:	189a      	adds	r2, r3, r2
   1c9e0:	68fb      	ldr	r3, [r7, #12]
   1c9e2:	3304      	adds	r3, #4
   1c9e4:	0019      	movs	r1, r3
   1c9e6:	0010      	movs	r0, r2
   1c9e8:	4b27      	ldr	r3, [pc, #156]	; (1ca88 <xTaskResumeAll+0x150>)
   1c9ea:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c9ec:	68fb      	ldr	r3, [r7, #12]
   1c9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c9f0:	4b26      	ldr	r3, [pc, #152]	; (1ca8c <xTaskResumeAll+0x154>)
   1c9f2:	681b      	ldr	r3, [r3, #0]
   1c9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c9f6:	429a      	cmp	r2, r3
   1c9f8:	d302      	bcc.n	1ca00 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1c9fa:	4b25      	ldr	r3, [pc, #148]	; (1ca90 <xTaskResumeAll+0x158>)
   1c9fc:	2201      	movs	r2, #1
   1c9fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1ca00:	4b19      	ldr	r3, [pc, #100]	; (1ca68 <xTaskResumeAll+0x130>)
   1ca02:	681b      	ldr	r3, [r3, #0]
   1ca04:	2b00      	cmp	r3, #0
   1ca06:	d1b6      	bne.n	1c976 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1ca08:	68fb      	ldr	r3, [r7, #12]
   1ca0a:	2b00      	cmp	r3, #0
   1ca0c:	d001      	beq.n	1ca12 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1ca0e:	4b21      	ldr	r3, [pc, #132]	; (1ca94 <xTaskResumeAll+0x15c>)
   1ca10:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1ca12:	4b21      	ldr	r3, [pc, #132]	; (1ca98 <xTaskResumeAll+0x160>)
   1ca14:	681b      	ldr	r3, [r3, #0]
   1ca16:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1ca18:	687b      	ldr	r3, [r7, #4]
   1ca1a:	2b00      	cmp	r3, #0
   1ca1c:	d00f      	beq.n	1ca3e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1ca1e:	4b1f      	ldr	r3, [pc, #124]	; (1ca9c <xTaskResumeAll+0x164>)
   1ca20:	4798      	blx	r3
   1ca22:	1e03      	subs	r3, r0, #0
   1ca24:	d002      	beq.n	1ca2c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1ca26:	4b1a      	ldr	r3, [pc, #104]	; (1ca90 <xTaskResumeAll+0x158>)
   1ca28:	2201      	movs	r2, #1
   1ca2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1ca2c:	687b      	ldr	r3, [r7, #4]
   1ca2e:	3b01      	subs	r3, #1
   1ca30:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1ca32:	687b      	ldr	r3, [r7, #4]
   1ca34:	2b00      	cmp	r3, #0
   1ca36:	d1f2      	bne.n	1ca1e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1ca38:	4b17      	ldr	r3, [pc, #92]	; (1ca98 <xTaskResumeAll+0x160>)
   1ca3a:	2200      	movs	r2, #0
   1ca3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1ca3e:	4b14      	ldr	r3, [pc, #80]	; (1ca90 <xTaskResumeAll+0x158>)
   1ca40:	681b      	ldr	r3, [r3, #0]
   1ca42:	2b00      	cmp	r3, #0
   1ca44:	d003      	beq.n	1ca4e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1ca46:	2301      	movs	r3, #1
   1ca48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1ca4a:	4b15      	ldr	r3, [pc, #84]	; (1caa0 <xTaskResumeAll+0x168>)
   1ca4c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1ca4e:	4b15      	ldr	r3, [pc, #84]	; (1caa4 <xTaskResumeAll+0x16c>)
   1ca50:	4798      	blx	r3

	return xAlreadyYielded;
   1ca52:	68bb      	ldr	r3, [r7, #8]
}
   1ca54:	0018      	movs	r0, r3
   1ca56:	46bd      	mov	sp, r7
   1ca58:	b004      	add	sp, #16
   1ca5a:	bd80      	pop	{r7, pc}
   1ca5c:	200041dc 	.word	0x200041dc
   1ca60:	0001a669 	.word	0x0001a669
   1ca64:	200041b4 	.word	0x200041b4
   1ca68:	20004174 	.word	0x20004174
   1ca6c:	0001a4db 	.word	0x0001a4db
   1ca70:	00018661 	.word	0x00018661
   1ca74:	20000110 	.word	0x20000110
   1ca78:	00018641 	.word	0x00018641
   1ca7c:	00018e11 	.word	0x00018e11
   1ca80:	200041bc 	.word	0x200041bc
   1ca84:	200040e0 	.word	0x200040e0
   1ca88:	0001a42b 	.word	0x0001a42b
   1ca8c:	200040dc 	.word	0x200040dc
   1ca90:	200041c8 	.word	0x200041c8
   1ca94:	0001d325 	.word	0x0001d325
   1ca98:	200041c4 	.word	0x200041c4
   1ca9c:	0001cac5 	.word	0x0001cac5
   1caa0:	0001a651 	.word	0x0001a651
   1caa4:	0001a68d 	.word	0x0001a68d

0001caa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1caa8:	b580      	push	{r7, lr}
   1caaa:	b082      	sub	sp, #8
   1caac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1caae:	4b04      	ldr	r3, [pc, #16]	; (1cac0 <xTaskGetTickCount+0x18>)
   1cab0:	681b      	ldr	r3, [r3, #0]
   1cab2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1cab4:	687b      	ldr	r3, [r7, #4]
}
   1cab6:	0018      	movs	r0, r3
   1cab8:	46bd      	mov	sp, r7
   1caba:	b002      	add	sp, #8
   1cabc:	bd80      	pop	{r7, pc}
   1cabe:	46c0      	nop			; (mov r8, r8)
   1cac0:	200041b8 	.word	0x200041b8

0001cac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1cac4:	b580      	push	{r7, lr}
   1cac6:	b086      	sub	sp, #24
   1cac8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1caca:	2300      	movs	r3, #0
   1cacc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1cace:	4b64      	ldr	r3, [pc, #400]	; (1cc60 <xTaskIncrementTick+0x19c>)
   1cad0:	681b      	ldr	r3, [r3, #0]
   1cad2:	2b01      	cmp	r3, #1
   1cad4:	d003      	beq.n	1cade <xTaskIncrementTick+0x1a>
   1cad6:	4b63      	ldr	r3, [pc, #396]	; (1cc64 <xTaskIncrementTick+0x1a0>)
   1cad8:	681b      	ldr	r3, [r3, #0]
   1cada:	2b00      	cmp	r3, #0
   1cadc:	d107      	bne.n	1caee <xTaskIncrementTick+0x2a>
   1cade:	4b62      	ldr	r3, [pc, #392]	; (1cc68 <xTaskIncrementTick+0x1a4>)
   1cae0:	681b      	ldr	r3, [r3, #0]
   1cae2:	1c5a      	adds	r2, r3, #1
   1cae4:	4b60      	ldr	r3, [pc, #384]	; (1cc68 <xTaskIncrementTick+0x1a4>)
   1cae6:	601a      	str	r2, [r3, #0]
   1cae8:	2000      	movs	r0, #0
   1caea:	4b60      	ldr	r3, [pc, #384]	; (1cc6c <xTaskIncrementTick+0x1a8>)
   1caec:	4798      	blx	r3
   1caee:	4b5c      	ldr	r3, [pc, #368]	; (1cc60 <xTaskIncrementTick+0x19c>)
   1caf0:	681b      	ldr	r3, [r3, #0]
   1caf2:	2b00      	cmp	r3, #0
   1caf4:	d106      	bne.n	1cb04 <xTaskIncrementTick+0x40>
   1caf6:	4b5e      	ldr	r3, [pc, #376]	; (1cc70 <xTaskIncrementTick+0x1ac>)
   1caf8:	681b      	ldr	r3, [r3, #0]
   1cafa:	3301      	adds	r3, #1
   1cafc:	0019      	movs	r1, r3
   1cafe:	2003      	movs	r0, #3
   1cb00:	4b5c      	ldr	r3, [pc, #368]	; (1cc74 <xTaskIncrementTick+0x1b0>)
   1cb02:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cb04:	4b56      	ldr	r3, [pc, #344]	; (1cc60 <xTaskIncrementTick+0x19c>)
   1cb06:	681b      	ldr	r3, [r3, #0]
   1cb08:	2b00      	cmp	r3, #0
   1cb0a:	d000      	beq.n	1cb0e <xTaskIncrementTick+0x4a>
   1cb0c:	e098      	b.n	1cc40 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1cb0e:	4b58      	ldr	r3, [pc, #352]	; (1cc70 <xTaskIncrementTick+0x1ac>)
   1cb10:	681b      	ldr	r3, [r3, #0]
   1cb12:	3301      	adds	r3, #1
   1cb14:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1cb16:	4b56      	ldr	r3, [pc, #344]	; (1cc70 <xTaskIncrementTick+0x1ac>)
   1cb18:	693a      	ldr	r2, [r7, #16]
   1cb1a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1cb1c:	693b      	ldr	r3, [r7, #16]
   1cb1e:	2b00      	cmp	r3, #0
   1cb20:	d117      	bne.n	1cb52 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1cb22:	4b55      	ldr	r3, [pc, #340]	; (1cc78 <xTaskIncrementTick+0x1b4>)
   1cb24:	681b      	ldr	r3, [r3, #0]
   1cb26:	681b      	ldr	r3, [r3, #0]
   1cb28:	2b00      	cmp	r3, #0
   1cb2a:	d001      	beq.n	1cb30 <xTaskIncrementTick+0x6c>
   1cb2c:	b672      	cpsid	i
   1cb2e:	e7fe      	b.n	1cb2e <xTaskIncrementTick+0x6a>
   1cb30:	4b51      	ldr	r3, [pc, #324]	; (1cc78 <xTaskIncrementTick+0x1b4>)
   1cb32:	681b      	ldr	r3, [r3, #0]
   1cb34:	60fb      	str	r3, [r7, #12]
   1cb36:	4b51      	ldr	r3, [pc, #324]	; (1cc7c <xTaskIncrementTick+0x1b8>)
   1cb38:	681a      	ldr	r2, [r3, #0]
   1cb3a:	4b4f      	ldr	r3, [pc, #316]	; (1cc78 <xTaskIncrementTick+0x1b4>)
   1cb3c:	601a      	str	r2, [r3, #0]
   1cb3e:	4b4f      	ldr	r3, [pc, #316]	; (1cc7c <xTaskIncrementTick+0x1b8>)
   1cb40:	68fa      	ldr	r2, [r7, #12]
   1cb42:	601a      	str	r2, [r3, #0]
   1cb44:	4b4e      	ldr	r3, [pc, #312]	; (1cc80 <xTaskIncrementTick+0x1bc>)
   1cb46:	681b      	ldr	r3, [r3, #0]
   1cb48:	1c5a      	adds	r2, r3, #1
   1cb4a:	4b4d      	ldr	r3, [pc, #308]	; (1cc80 <xTaskIncrementTick+0x1bc>)
   1cb4c:	601a      	str	r2, [r3, #0]
   1cb4e:	4b4d      	ldr	r3, [pc, #308]	; (1cc84 <xTaskIncrementTick+0x1c0>)
   1cb50:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1cb52:	4b4d      	ldr	r3, [pc, #308]	; (1cc88 <xTaskIncrementTick+0x1c4>)
   1cb54:	681b      	ldr	r3, [r3, #0]
   1cb56:	693a      	ldr	r2, [r7, #16]
   1cb58:	429a      	cmp	r2, r3
   1cb5a:	d363      	bcc.n	1cc24 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cb5c:	4b46      	ldr	r3, [pc, #280]	; (1cc78 <xTaskIncrementTick+0x1b4>)
   1cb5e:	681b      	ldr	r3, [r3, #0]
   1cb60:	681b      	ldr	r3, [r3, #0]
   1cb62:	2b00      	cmp	r3, #0
   1cb64:	d101      	bne.n	1cb6a <xTaskIncrementTick+0xa6>
   1cb66:	2301      	movs	r3, #1
   1cb68:	e000      	b.n	1cb6c <xTaskIncrementTick+0xa8>
   1cb6a:	2300      	movs	r3, #0
   1cb6c:	2b00      	cmp	r3, #0
   1cb6e:	d004      	beq.n	1cb7a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cb70:	4b45      	ldr	r3, [pc, #276]	; (1cc88 <xTaskIncrementTick+0x1c4>)
   1cb72:	2201      	movs	r2, #1
   1cb74:	4252      	negs	r2, r2
   1cb76:	601a      	str	r2, [r3, #0]
					break;
   1cb78:	e054      	b.n	1cc24 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1cb7a:	4b3f      	ldr	r3, [pc, #252]	; (1cc78 <xTaskIncrementTick+0x1b4>)
   1cb7c:	681b      	ldr	r3, [r3, #0]
   1cb7e:	68db      	ldr	r3, [r3, #12]
   1cb80:	68db      	ldr	r3, [r3, #12]
   1cb82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1cb84:	68bb      	ldr	r3, [r7, #8]
   1cb86:	685b      	ldr	r3, [r3, #4]
   1cb88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1cb8a:	693a      	ldr	r2, [r7, #16]
   1cb8c:	687b      	ldr	r3, [r7, #4]
   1cb8e:	429a      	cmp	r2, r3
   1cb90:	d203      	bcs.n	1cb9a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1cb92:	4b3d      	ldr	r3, [pc, #244]	; (1cc88 <xTaskIncrementTick+0x1c4>)
   1cb94:	687a      	ldr	r2, [r7, #4]
   1cb96:	601a      	str	r2, [r3, #0]
						break;
   1cb98:	e044      	b.n	1cc24 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cb9a:	68bb      	ldr	r3, [r7, #8]
   1cb9c:	3304      	adds	r3, #4
   1cb9e:	0018      	movs	r0, r3
   1cba0:	4b3a      	ldr	r3, [pc, #232]	; (1cc8c <xTaskIncrementTick+0x1c8>)
   1cba2:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1cba4:	68bb      	ldr	r3, [r7, #8]
   1cba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cba8:	2b00      	cmp	r3, #0
   1cbaa:	d004      	beq.n	1cbb6 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1cbac:	68bb      	ldr	r3, [r7, #8]
   1cbae:	3318      	adds	r3, #24
   1cbb0:	0018      	movs	r0, r3
   1cbb2:	4b36      	ldr	r3, [pc, #216]	; (1cc8c <xTaskIncrementTick+0x1c8>)
   1cbb4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1cbb6:	68bb      	ldr	r3, [r7, #8]
   1cbb8:	0018      	movs	r0, r3
   1cbba:	4b35      	ldr	r3, [pc, #212]	; (1cc90 <xTaskIncrementTick+0x1cc>)
   1cbbc:	4798      	blx	r3
   1cbbe:	0003      	movs	r3, r0
   1cbc0:	001a      	movs	r2, r3
   1cbc2:	4b34      	ldr	r3, [pc, #208]	; (1cc94 <xTaskIncrementTick+0x1d0>)
   1cbc4:	881b      	ldrh	r3, [r3, #0]
   1cbc6:	4013      	ands	r3, r2
   1cbc8:	b29b      	uxth	r3, r3
   1cbca:	2b00      	cmp	r3, #0
   1cbcc:	d008      	beq.n	1cbe0 <xTaskIncrementTick+0x11c>
   1cbce:	68bb      	ldr	r3, [r7, #8]
   1cbd0:	0018      	movs	r0, r3
   1cbd2:	4b31      	ldr	r3, [pc, #196]	; (1cc98 <xTaskIncrementTick+0x1d4>)
   1cbd4:	4798      	blx	r3
   1cbd6:	0003      	movs	r3, r0
   1cbd8:	b2db      	uxtb	r3, r3
   1cbda:	0018      	movs	r0, r3
   1cbdc:	4b2f      	ldr	r3, [pc, #188]	; (1cc9c <xTaskIncrementTick+0x1d8>)
   1cbde:	4798      	blx	r3
   1cbe0:	68bb      	ldr	r3, [r7, #8]
   1cbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbe4:	4b2e      	ldr	r3, [pc, #184]	; (1cca0 <xTaskIncrementTick+0x1dc>)
   1cbe6:	681b      	ldr	r3, [r3, #0]
   1cbe8:	429a      	cmp	r2, r3
   1cbea:	d903      	bls.n	1cbf4 <xTaskIncrementTick+0x130>
   1cbec:	68bb      	ldr	r3, [r7, #8]
   1cbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbf0:	4b2b      	ldr	r3, [pc, #172]	; (1cca0 <xTaskIncrementTick+0x1dc>)
   1cbf2:	601a      	str	r2, [r3, #0]
   1cbf4:	68bb      	ldr	r3, [r7, #8]
   1cbf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbf8:	0013      	movs	r3, r2
   1cbfa:	009b      	lsls	r3, r3, #2
   1cbfc:	189b      	adds	r3, r3, r2
   1cbfe:	009b      	lsls	r3, r3, #2
   1cc00:	4a28      	ldr	r2, [pc, #160]	; (1cca4 <xTaskIncrementTick+0x1e0>)
   1cc02:	189a      	adds	r2, r3, r2
   1cc04:	68bb      	ldr	r3, [r7, #8]
   1cc06:	3304      	adds	r3, #4
   1cc08:	0019      	movs	r1, r3
   1cc0a:	0010      	movs	r0, r2
   1cc0c:	4b26      	ldr	r3, [pc, #152]	; (1cca8 <xTaskIncrementTick+0x1e4>)
   1cc0e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1cc10:	68bb      	ldr	r3, [r7, #8]
   1cc12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc14:	4b25      	ldr	r3, [pc, #148]	; (1ccac <xTaskIncrementTick+0x1e8>)
   1cc16:	681b      	ldr	r3, [r3, #0]
   1cc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc1a:	429a      	cmp	r2, r3
   1cc1c:	d39e      	bcc.n	1cb5c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1cc1e:	2301      	movs	r3, #1
   1cc20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cc22:	e79b      	b.n	1cb5c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1cc24:	4b21      	ldr	r3, [pc, #132]	; (1ccac <xTaskIncrementTick+0x1e8>)
   1cc26:	681b      	ldr	r3, [r3, #0]
   1cc28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc2a:	491e      	ldr	r1, [pc, #120]	; (1cca4 <xTaskIncrementTick+0x1e0>)
   1cc2c:	0013      	movs	r3, r2
   1cc2e:	009b      	lsls	r3, r3, #2
   1cc30:	189b      	adds	r3, r3, r2
   1cc32:	009b      	lsls	r3, r3, #2
   1cc34:	585b      	ldr	r3, [r3, r1]
   1cc36:	2b01      	cmp	r3, #1
   1cc38:	d907      	bls.n	1cc4a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1cc3a:	2301      	movs	r3, #1
   1cc3c:	617b      	str	r3, [r7, #20]
   1cc3e:	e004      	b.n	1cc4a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1cc40:	4b08      	ldr	r3, [pc, #32]	; (1cc64 <xTaskIncrementTick+0x1a0>)
   1cc42:	681b      	ldr	r3, [r3, #0]
   1cc44:	1c5a      	adds	r2, r3, #1
   1cc46:	4b07      	ldr	r3, [pc, #28]	; (1cc64 <xTaskIncrementTick+0x1a0>)
   1cc48:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1cc4a:	4b19      	ldr	r3, [pc, #100]	; (1ccb0 <xTaskIncrementTick+0x1ec>)
   1cc4c:	681b      	ldr	r3, [r3, #0]
   1cc4e:	2b00      	cmp	r3, #0
   1cc50:	d001      	beq.n	1cc56 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1cc52:	2301      	movs	r3, #1
   1cc54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1cc56:	697b      	ldr	r3, [r7, #20]
}
   1cc58:	0018      	movs	r0, r3
   1cc5a:	46bd      	mov	sp, r7
   1cc5c:	b006      	add	sp, #24
   1cc5e:	bd80      	pop	{r7, pc}
   1cc60:	200041dc 	.word	0x200041dc
   1cc64:	200041c4 	.word	0x200041c4
   1cc68:	20000d3c 	.word	0x20000d3c
   1cc6c:	0001a2f5 	.word	0x0001a2f5
   1cc70:	200041b8 	.word	0x200041b8
   1cc74:	00019361 	.word	0x00019361
   1cc78:	2000416c 	.word	0x2000416c
   1cc7c:	20004170 	.word	0x20004170
   1cc80:	200041cc 	.word	0x200041cc
   1cc84:	0001d325 	.word	0x0001d325
   1cc88:	200041d4 	.word	0x200041d4
   1cc8c:	0001a4db 	.word	0x0001a4db
   1cc90:	00018661 	.word	0x00018661
   1cc94:	20000110 	.word	0x20000110
   1cc98:	00018641 	.word	0x00018641
   1cc9c:	00018e11 	.word	0x00018e11
   1cca0:	200041bc 	.word	0x200041bc
   1cca4:	200040e0 	.word	0x200040e0
   1cca8:	0001a42b 	.word	0x0001a42b
   1ccac:	200040dc 	.word	0x200040dc
   1ccb0:	200041c8 	.word	0x200041c8

0001ccb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1ccb4:	b580      	push	{r7, lr}
   1ccb6:	b082      	sub	sp, #8
   1ccb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1ccba:	4b3a      	ldr	r3, [pc, #232]	; (1cda4 <vTaskSwitchContext+0xf0>)
   1ccbc:	681b      	ldr	r3, [r3, #0]
   1ccbe:	2b00      	cmp	r3, #0
   1ccc0:	d003      	beq.n	1ccca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1ccc2:	4b39      	ldr	r3, [pc, #228]	; (1cda8 <vTaskSwitchContext+0xf4>)
   1ccc4:	2201      	movs	r2, #1
   1ccc6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1ccc8:	e067      	b.n	1cd9a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1ccca:	4b37      	ldr	r3, [pc, #220]	; (1cda8 <vTaskSwitchContext+0xf4>)
   1cccc:	2200      	movs	r2, #0
   1ccce:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1ccd0:	4b36      	ldr	r3, [pc, #216]	; (1cdac <vTaskSwitchContext+0xf8>)
   1ccd2:	681b      	ldr	r3, [r3, #0]
   1ccd4:	681a      	ldr	r2, [r3, #0]
   1ccd6:	4b35      	ldr	r3, [pc, #212]	; (1cdac <vTaskSwitchContext+0xf8>)
   1ccd8:	681b      	ldr	r3, [r3, #0]
   1ccda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ccdc:	429a      	cmp	r2, r3
   1ccde:	d808      	bhi.n	1ccf2 <vTaskSwitchContext+0x3e>
   1cce0:	4b32      	ldr	r3, [pc, #200]	; (1cdac <vTaskSwitchContext+0xf8>)
   1cce2:	681a      	ldr	r2, [r3, #0]
   1cce4:	4b31      	ldr	r3, [pc, #196]	; (1cdac <vTaskSwitchContext+0xf8>)
   1cce6:	681b      	ldr	r3, [r3, #0]
   1cce8:	3334      	adds	r3, #52	; 0x34
   1ccea:	0019      	movs	r1, r3
   1ccec:	0010      	movs	r0, r2
   1ccee:	4b30      	ldr	r3, [pc, #192]	; (1cdb0 <vTaskSwitchContext+0xfc>)
   1ccf0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1ccf2:	4b30      	ldr	r3, [pc, #192]	; (1cdb4 <vTaskSwitchContext+0x100>)
   1ccf4:	681b      	ldr	r3, [r3, #0]
   1ccf6:	607b      	str	r3, [r7, #4]
   1ccf8:	e007      	b.n	1cd0a <vTaskSwitchContext+0x56>
   1ccfa:	687b      	ldr	r3, [r7, #4]
   1ccfc:	2b00      	cmp	r3, #0
   1ccfe:	d101      	bne.n	1cd04 <vTaskSwitchContext+0x50>
   1cd00:	b672      	cpsid	i
   1cd02:	e7fe      	b.n	1cd02 <vTaskSwitchContext+0x4e>
   1cd04:	687b      	ldr	r3, [r7, #4]
   1cd06:	3b01      	subs	r3, #1
   1cd08:	607b      	str	r3, [r7, #4]
   1cd0a:	492b      	ldr	r1, [pc, #172]	; (1cdb8 <vTaskSwitchContext+0x104>)
   1cd0c:	687a      	ldr	r2, [r7, #4]
   1cd0e:	0013      	movs	r3, r2
   1cd10:	009b      	lsls	r3, r3, #2
   1cd12:	189b      	adds	r3, r3, r2
   1cd14:	009b      	lsls	r3, r3, #2
   1cd16:	585b      	ldr	r3, [r3, r1]
   1cd18:	2b00      	cmp	r3, #0
   1cd1a:	d0ee      	beq.n	1ccfa <vTaskSwitchContext+0x46>
   1cd1c:	687a      	ldr	r2, [r7, #4]
   1cd1e:	0013      	movs	r3, r2
   1cd20:	009b      	lsls	r3, r3, #2
   1cd22:	189b      	adds	r3, r3, r2
   1cd24:	009b      	lsls	r3, r3, #2
   1cd26:	4a24      	ldr	r2, [pc, #144]	; (1cdb8 <vTaskSwitchContext+0x104>)
   1cd28:	189b      	adds	r3, r3, r2
   1cd2a:	603b      	str	r3, [r7, #0]
   1cd2c:	683b      	ldr	r3, [r7, #0]
   1cd2e:	685b      	ldr	r3, [r3, #4]
   1cd30:	685a      	ldr	r2, [r3, #4]
   1cd32:	683b      	ldr	r3, [r7, #0]
   1cd34:	605a      	str	r2, [r3, #4]
   1cd36:	683b      	ldr	r3, [r7, #0]
   1cd38:	685a      	ldr	r2, [r3, #4]
   1cd3a:	683b      	ldr	r3, [r7, #0]
   1cd3c:	3308      	adds	r3, #8
   1cd3e:	429a      	cmp	r2, r3
   1cd40:	d104      	bne.n	1cd4c <vTaskSwitchContext+0x98>
   1cd42:	683b      	ldr	r3, [r7, #0]
   1cd44:	685b      	ldr	r3, [r3, #4]
   1cd46:	685a      	ldr	r2, [r3, #4]
   1cd48:	683b      	ldr	r3, [r7, #0]
   1cd4a:	605a      	str	r2, [r3, #4]
   1cd4c:	683b      	ldr	r3, [r7, #0]
   1cd4e:	685b      	ldr	r3, [r3, #4]
   1cd50:	68da      	ldr	r2, [r3, #12]
   1cd52:	4b16      	ldr	r3, [pc, #88]	; (1cdac <vTaskSwitchContext+0xf8>)
   1cd54:	601a      	str	r2, [r3, #0]
   1cd56:	4b17      	ldr	r3, [pc, #92]	; (1cdb4 <vTaskSwitchContext+0x100>)
   1cd58:	687a      	ldr	r2, [r7, #4]
   1cd5a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1cd5c:	4b17      	ldr	r3, [pc, #92]	; (1cdbc <vTaskSwitchContext+0x108>)
   1cd5e:	2201      	movs	r2, #1
   1cd60:	601a      	str	r2, [r3, #0]
   1cd62:	4b17      	ldr	r3, [pc, #92]	; (1cdc0 <vTaskSwitchContext+0x10c>)
   1cd64:	4798      	blx	r3
   1cd66:	0003      	movs	r3, r0
   1cd68:	0018      	movs	r0, r3
   1cd6a:	4b16      	ldr	r3, [pc, #88]	; (1cdc4 <vTaskSwitchContext+0x110>)
   1cd6c:	4798      	blx	r3
   1cd6e:	0003      	movs	r3, r0
   1cd70:	001a      	movs	r2, r3
   1cd72:	4b15      	ldr	r3, [pc, #84]	; (1cdc8 <vTaskSwitchContext+0x114>)
   1cd74:	881b      	ldrh	r3, [r3, #0]
   1cd76:	4013      	ands	r3, r2
   1cd78:	b29b      	uxth	r3, r3
   1cd7a:	2b00      	cmp	r3, #0
   1cd7c:	d00a      	beq.n	1cd94 <vTaskSwitchContext+0xe0>
   1cd7e:	4b10      	ldr	r3, [pc, #64]	; (1cdc0 <vTaskSwitchContext+0x10c>)
   1cd80:	4798      	blx	r3
   1cd82:	0003      	movs	r3, r0
   1cd84:	0018      	movs	r0, r3
   1cd86:	4b11      	ldr	r3, [pc, #68]	; (1cdcc <vTaskSwitchContext+0x118>)
   1cd88:	4798      	blx	r3
   1cd8a:	0003      	movs	r3, r0
   1cd8c:	b2db      	uxtb	r3, r3
   1cd8e:	0018      	movs	r0, r3
   1cd90:	4b0f      	ldr	r3, [pc, #60]	; (1cdd0 <vTaskSwitchContext+0x11c>)
   1cd92:	4798      	blx	r3
   1cd94:	4b09      	ldr	r3, [pc, #36]	; (1cdbc <vTaskSwitchContext+0x108>)
   1cd96:	2202      	movs	r2, #2
   1cd98:	601a      	str	r2, [r3, #0]
}
   1cd9a:	46c0      	nop			; (mov r8, r8)
   1cd9c:	46bd      	mov	sp, r7
   1cd9e:	b002      	add	sp, #8
   1cda0:	bd80      	pop	{r7, pc}
   1cda2:	46c0      	nop			; (mov r8, r8)
   1cda4:	200041dc 	.word	0x200041dc
   1cda8:	200041c8 	.word	0x200041c8
   1cdac:	200040dc 	.word	0x200040dc
   1cdb0:	00032f71 	.word	0x00032f71
   1cdb4:	200041bc 	.word	0x200041bc
   1cdb8:	200040e0 	.word	0x200040e0
   1cdbc:	20000d48 	.word	0x20000d48
   1cdc0:	000188fd 	.word	0x000188fd
   1cdc4:	00018661 	.word	0x00018661
   1cdc8:	20000110 	.word	0x20000110
   1cdcc:	00018641 	.word	0x00018641
   1cdd0:	0001945d 	.word	0x0001945d

0001cdd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1cdd4:	b580      	push	{r7, lr}
   1cdd6:	b082      	sub	sp, #8
   1cdd8:	af00      	add	r7, sp, #0
   1cdda:	6078      	str	r0, [r7, #4]
   1cddc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1cdde:	687b      	ldr	r3, [r7, #4]
   1cde0:	2b00      	cmp	r3, #0
   1cde2:	d101      	bne.n	1cde8 <vTaskPlaceOnEventList+0x14>
   1cde4:	b672      	cpsid	i
   1cde6:	e7fe      	b.n	1cde6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1cde8:	4b08      	ldr	r3, [pc, #32]	; (1ce0c <vTaskPlaceOnEventList+0x38>)
   1cdea:	681b      	ldr	r3, [r3, #0]
   1cdec:	3318      	adds	r3, #24
   1cdee:	001a      	movs	r2, r3
   1cdf0:	687b      	ldr	r3, [r7, #4]
   1cdf2:	0011      	movs	r1, r2
   1cdf4:	0018      	movs	r0, r3
   1cdf6:	4b06      	ldr	r3, [pc, #24]	; (1ce10 <vTaskPlaceOnEventList+0x3c>)
   1cdf8:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1cdfa:	683b      	ldr	r3, [r7, #0]
   1cdfc:	2101      	movs	r1, #1
   1cdfe:	0018      	movs	r0, r3
   1ce00:	4b04      	ldr	r3, [pc, #16]	; (1ce14 <vTaskPlaceOnEventList+0x40>)
   1ce02:	4798      	blx	r3
}
   1ce04:	46c0      	nop			; (mov r8, r8)
   1ce06:	46bd      	mov	sp, r7
   1ce08:	b002      	add	sp, #8
   1ce0a:	bd80      	pop	{r7, pc}
   1ce0c:	200040dc 	.word	0x200040dc
   1ce10:	0001a46f 	.word	0x0001a46f
   1ce14:	0001d879 	.word	0x0001d879

0001ce18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1ce18:	b580      	push	{r7, lr}
   1ce1a:	b084      	sub	sp, #16
   1ce1c:	af00      	add	r7, sp, #0
   1ce1e:	60f8      	str	r0, [r7, #12]
   1ce20:	60b9      	str	r1, [r7, #8]
   1ce22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1ce24:	68fb      	ldr	r3, [r7, #12]
   1ce26:	2b00      	cmp	r3, #0
   1ce28:	d101      	bne.n	1ce2e <vTaskPlaceOnEventListRestricted+0x16>
   1ce2a:	b672      	cpsid	i
   1ce2c:	e7fe      	b.n	1ce2c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1ce2e:	4b28      	ldr	r3, [pc, #160]	; (1ced0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1ce30:	681b      	ldr	r3, [r3, #0]
   1ce32:	3318      	adds	r3, #24
   1ce34:	001a      	movs	r2, r3
   1ce36:	68fb      	ldr	r3, [r7, #12]
   1ce38:	0011      	movs	r1, r2
   1ce3a:	0018      	movs	r0, r3
   1ce3c:	4b25      	ldr	r3, [pc, #148]	; (1ced4 <vTaskPlaceOnEventListRestricted+0xbc>)
   1ce3e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1ce40:	687b      	ldr	r3, [r7, #4]
   1ce42:	2b00      	cmp	r3, #0
   1ce44:	d002      	beq.n	1ce4c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1ce46:	2301      	movs	r3, #1
   1ce48:	425b      	negs	r3, r3
   1ce4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1ce4c:	4b20      	ldr	r3, [pc, #128]	; (1ced0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1ce4e:	681b      	ldr	r3, [r3, #0]
   1ce50:	0018      	movs	r0, r3
   1ce52:	4b21      	ldr	r3, [pc, #132]	; (1ced8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1ce54:	4798      	blx	r3
   1ce56:	0003      	movs	r3, r0
   1ce58:	001a      	movs	r2, r3
   1ce5a:	4b20      	ldr	r3, [pc, #128]	; (1cedc <vTaskPlaceOnEventListRestricted+0xc4>)
   1ce5c:	881b      	ldrh	r3, [r3, #0]
   1ce5e:	4013      	ands	r3, r2
   1ce60:	b29b      	uxth	r3, r3
   1ce62:	2b00      	cmp	r3, #0
   1ce64:	d011      	beq.n	1ce8a <vTaskPlaceOnEventListRestricted+0x72>
   1ce66:	4b1e      	ldr	r3, [pc, #120]	; (1cee0 <vTaskPlaceOnEventListRestricted+0xc8>)
   1ce68:	681a      	ldr	r2, [r3, #0]
   1ce6a:	68bb      	ldr	r3, [r7, #8]
   1ce6c:	18d3      	adds	r3, r2, r3
   1ce6e:	0019      	movs	r1, r3
   1ce70:	2088      	movs	r0, #136	; 0x88
   1ce72:	4b1c      	ldr	r3, [pc, #112]	; (1cee4 <vTaskPlaceOnEventListRestricted+0xcc>)
   1ce74:	4798      	blx	r3
   1ce76:	4b16      	ldr	r3, [pc, #88]	; (1ced0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1ce78:	681b      	ldr	r3, [r3, #0]
   1ce7a:	0018      	movs	r0, r3
   1ce7c:	4b1a      	ldr	r3, [pc, #104]	; (1cee8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1ce7e:	4798      	blx	r3
   1ce80:	0003      	movs	r3, r0
   1ce82:	b2db      	uxtb	r3, r3
   1ce84:	0018      	movs	r0, r3
   1ce86:	4b19      	ldr	r3, [pc, #100]	; (1ceec <vTaskPlaceOnEventListRestricted+0xd4>)
   1ce88:	4798      	blx	r3
   1ce8a:	4b19      	ldr	r3, [pc, #100]	; (1cef0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1ce8c:	4798      	blx	r3
   1ce8e:	0003      	movs	r3, r0
   1ce90:	0018      	movs	r0, r3
   1ce92:	4b11      	ldr	r3, [pc, #68]	; (1ced8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1ce94:	4798      	blx	r3
   1ce96:	0003      	movs	r3, r0
   1ce98:	001a      	movs	r2, r3
   1ce9a:	4b10      	ldr	r3, [pc, #64]	; (1cedc <vTaskPlaceOnEventListRestricted+0xc4>)
   1ce9c:	881b      	ldrh	r3, [r3, #0]
   1ce9e:	4013      	ands	r3, r2
   1cea0:	b29b      	uxth	r3, r3
   1cea2:	2b00      	cmp	r3, #0
   1cea4:	d00a      	beq.n	1cebc <vTaskPlaceOnEventListRestricted+0xa4>
   1cea6:	4b12      	ldr	r3, [pc, #72]	; (1cef0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1cea8:	4798      	blx	r3
   1ceaa:	0003      	movs	r3, r0
   1ceac:	0018      	movs	r0, r3
   1ceae:	4b0e      	ldr	r3, [pc, #56]	; (1cee8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1ceb0:	4798      	blx	r3
   1ceb2:	0003      	movs	r3, r0
   1ceb4:	b2db      	uxtb	r3, r3
   1ceb6:	0018      	movs	r0, r3
   1ceb8:	4b0c      	ldr	r3, [pc, #48]	; (1ceec <vTaskPlaceOnEventListRestricted+0xd4>)
   1ceba:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1cebc:	687a      	ldr	r2, [r7, #4]
   1cebe:	68bb      	ldr	r3, [r7, #8]
   1cec0:	0011      	movs	r1, r2
   1cec2:	0018      	movs	r0, r3
   1cec4:	4b0b      	ldr	r3, [pc, #44]	; (1cef4 <vTaskPlaceOnEventListRestricted+0xdc>)
   1cec6:	4798      	blx	r3
	}
   1cec8:	46c0      	nop			; (mov r8, r8)
   1ceca:	46bd      	mov	sp, r7
   1cecc:	b004      	add	sp, #16
   1cece:	bd80      	pop	{r7, pc}
   1ced0:	200040dc 	.word	0x200040dc
   1ced4:	0001a42b 	.word	0x0001a42b
   1ced8:	00018661 	.word	0x00018661
   1cedc:	20000110 	.word	0x20000110
   1cee0:	200041b8 	.word	0x200041b8
   1cee4:	00019361 	.word	0x00019361
   1cee8:	00018641 	.word	0x00018641
   1ceec:	000197f1 	.word	0x000197f1
   1cef0:	000188fd 	.word	0x000188fd
   1cef4:	0001d879 	.word	0x0001d879

0001cef8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1cef8:	b580      	push	{r7, lr}
   1cefa:	b084      	sub	sp, #16
   1cefc:	af00      	add	r7, sp, #0
   1cefe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1cf00:	687b      	ldr	r3, [r7, #4]
   1cf02:	68db      	ldr	r3, [r3, #12]
   1cf04:	68db      	ldr	r3, [r3, #12]
   1cf06:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1cf08:	68bb      	ldr	r3, [r7, #8]
   1cf0a:	2b00      	cmp	r3, #0
   1cf0c:	d101      	bne.n	1cf12 <xTaskRemoveFromEventList+0x1a>
   1cf0e:	b672      	cpsid	i
   1cf10:	e7fe      	b.n	1cf10 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1cf12:	68bb      	ldr	r3, [r7, #8]
   1cf14:	3318      	adds	r3, #24
   1cf16:	0018      	movs	r0, r3
   1cf18:	4b2a      	ldr	r3, [pc, #168]	; (1cfc4 <xTaskRemoveFromEventList+0xcc>)
   1cf1a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cf1c:	4b2a      	ldr	r3, [pc, #168]	; (1cfc8 <xTaskRemoveFromEventList+0xd0>)
   1cf1e:	681b      	ldr	r3, [r3, #0]
   1cf20:	2b00      	cmp	r3, #0
   1cf22:	d132      	bne.n	1cf8a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1cf24:	68bb      	ldr	r3, [r7, #8]
   1cf26:	3304      	adds	r3, #4
   1cf28:	0018      	movs	r0, r3
   1cf2a:	4b26      	ldr	r3, [pc, #152]	; (1cfc4 <xTaskRemoveFromEventList+0xcc>)
   1cf2c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1cf2e:	68bb      	ldr	r3, [r7, #8]
   1cf30:	0018      	movs	r0, r3
   1cf32:	4b26      	ldr	r3, [pc, #152]	; (1cfcc <xTaskRemoveFromEventList+0xd4>)
   1cf34:	4798      	blx	r3
   1cf36:	0003      	movs	r3, r0
   1cf38:	001a      	movs	r2, r3
   1cf3a:	4b25      	ldr	r3, [pc, #148]	; (1cfd0 <xTaskRemoveFromEventList+0xd8>)
   1cf3c:	881b      	ldrh	r3, [r3, #0]
   1cf3e:	4013      	ands	r3, r2
   1cf40:	b29b      	uxth	r3, r3
   1cf42:	2b00      	cmp	r3, #0
   1cf44:	d008      	beq.n	1cf58 <xTaskRemoveFromEventList+0x60>
   1cf46:	68bb      	ldr	r3, [r7, #8]
   1cf48:	0018      	movs	r0, r3
   1cf4a:	4b22      	ldr	r3, [pc, #136]	; (1cfd4 <xTaskRemoveFromEventList+0xdc>)
   1cf4c:	4798      	blx	r3
   1cf4e:	0003      	movs	r3, r0
   1cf50:	b2db      	uxtb	r3, r3
   1cf52:	0018      	movs	r0, r3
   1cf54:	4b20      	ldr	r3, [pc, #128]	; (1cfd8 <xTaskRemoveFromEventList+0xe0>)
   1cf56:	4798      	blx	r3
   1cf58:	68bb      	ldr	r3, [r7, #8]
   1cf5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf5c:	4b1f      	ldr	r3, [pc, #124]	; (1cfdc <xTaskRemoveFromEventList+0xe4>)
   1cf5e:	681b      	ldr	r3, [r3, #0]
   1cf60:	429a      	cmp	r2, r3
   1cf62:	d903      	bls.n	1cf6c <xTaskRemoveFromEventList+0x74>
   1cf64:	68bb      	ldr	r3, [r7, #8]
   1cf66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf68:	4b1c      	ldr	r3, [pc, #112]	; (1cfdc <xTaskRemoveFromEventList+0xe4>)
   1cf6a:	601a      	str	r2, [r3, #0]
   1cf6c:	68bb      	ldr	r3, [r7, #8]
   1cf6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf70:	0013      	movs	r3, r2
   1cf72:	009b      	lsls	r3, r3, #2
   1cf74:	189b      	adds	r3, r3, r2
   1cf76:	009b      	lsls	r3, r3, #2
   1cf78:	4a19      	ldr	r2, [pc, #100]	; (1cfe0 <xTaskRemoveFromEventList+0xe8>)
   1cf7a:	189a      	adds	r2, r3, r2
   1cf7c:	68bb      	ldr	r3, [r7, #8]
   1cf7e:	3304      	adds	r3, #4
   1cf80:	0019      	movs	r1, r3
   1cf82:	0010      	movs	r0, r2
   1cf84:	4b17      	ldr	r3, [pc, #92]	; (1cfe4 <xTaskRemoveFromEventList+0xec>)
   1cf86:	4798      	blx	r3
   1cf88:	e007      	b.n	1cf9a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1cf8a:	68bb      	ldr	r3, [r7, #8]
   1cf8c:	3318      	adds	r3, #24
   1cf8e:	001a      	movs	r2, r3
   1cf90:	4b15      	ldr	r3, [pc, #84]	; (1cfe8 <xTaskRemoveFromEventList+0xf0>)
   1cf92:	0011      	movs	r1, r2
   1cf94:	0018      	movs	r0, r3
   1cf96:	4b13      	ldr	r3, [pc, #76]	; (1cfe4 <xTaskRemoveFromEventList+0xec>)
   1cf98:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1cf9a:	68bb      	ldr	r3, [r7, #8]
   1cf9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf9e:	4b13      	ldr	r3, [pc, #76]	; (1cfec <xTaskRemoveFromEventList+0xf4>)
   1cfa0:	681b      	ldr	r3, [r3, #0]
   1cfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cfa4:	429a      	cmp	r2, r3
   1cfa6:	d905      	bls.n	1cfb4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1cfa8:	2301      	movs	r3, #1
   1cfaa:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1cfac:	4b10      	ldr	r3, [pc, #64]	; (1cff0 <xTaskRemoveFromEventList+0xf8>)
   1cfae:	2201      	movs	r2, #1
   1cfb0:	601a      	str	r2, [r3, #0]
   1cfb2:	e001      	b.n	1cfb8 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1cfb4:	2300      	movs	r3, #0
   1cfb6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1cfb8:	68fb      	ldr	r3, [r7, #12]
}
   1cfba:	0018      	movs	r0, r3
   1cfbc:	46bd      	mov	sp, r7
   1cfbe:	b004      	add	sp, #16
   1cfc0:	bd80      	pop	{r7, pc}
   1cfc2:	46c0      	nop			; (mov r8, r8)
   1cfc4:	0001a4db 	.word	0x0001a4db
   1cfc8:	200041dc 	.word	0x200041dc
   1cfcc:	00018661 	.word	0x00018661
   1cfd0:	20000110 	.word	0x20000110
   1cfd4:	00018641 	.word	0x00018641
   1cfd8:	00018e11 	.word	0x00018e11
   1cfdc:	200041bc 	.word	0x200041bc
   1cfe0:	200040e0 	.word	0x200040e0
   1cfe4:	0001a42b 	.word	0x0001a42b
   1cfe8:	20004174 	.word	0x20004174
   1cfec:	200040dc 	.word	0x200040dc
   1cff0:	200041c8 	.word	0x200041c8

0001cff4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1cff4:	b580      	push	{r7, lr}
   1cff6:	b082      	sub	sp, #8
   1cff8:	af00      	add	r7, sp, #0
   1cffa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1cffc:	687b      	ldr	r3, [r7, #4]
   1cffe:	2b00      	cmp	r3, #0
   1d000:	d101      	bne.n	1d006 <vTaskSetTimeOutState+0x12>
   1d002:	b672      	cpsid	i
   1d004:	e7fe      	b.n	1d004 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1d006:	4b08      	ldr	r3, [pc, #32]	; (1d028 <vTaskSetTimeOutState+0x34>)
   1d008:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d00a:	4b08      	ldr	r3, [pc, #32]	; (1d02c <vTaskSetTimeOutState+0x38>)
   1d00c:	681a      	ldr	r2, [r3, #0]
   1d00e:	687b      	ldr	r3, [r7, #4]
   1d010:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1d012:	4b07      	ldr	r3, [pc, #28]	; (1d030 <vTaskSetTimeOutState+0x3c>)
   1d014:	681a      	ldr	r2, [r3, #0]
   1d016:	687b      	ldr	r3, [r7, #4]
   1d018:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1d01a:	4b06      	ldr	r3, [pc, #24]	; (1d034 <vTaskSetTimeOutState+0x40>)
   1d01c:	4798      	blx	r3
}
   1d01e:	46c0      	nop			; (mov r8, r8)
   1d020:	46bd      	mov	sp, r7
   1d022:	b002      	add	sp, #8
   1d024:	bd80      	pop	{r7, pc}
   1d026:	46c0      	nop			; (mov r8, r8)
   1d028:	0001a669 	.word	0x0001a669
   1d02c:	200041cc 	.word	0x200041cc
   1d030:	200041b8 	.word	0x200041b8
   1d034:	0001a68d 	.word	0x0001a68d

0001d038 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d038:	b580      	push	{r7, lr}
   1d03a:	b082      	sub	sp, #8
   1d03c:	af00      	add	r7, sp, #0
   1d03e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d040:	4b05      	ldr	r3, [pc, #20]	; (1d058 <vTaskInternalSetTimeOutState+0x20>)
   1d042:	681a      	ldr	r2, [r3, #0]
   1d044:	687b      	ldr	r3, [r7, #4]
   1d046:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1d048:	4b04      	ldr	r3, [pc, #16]	; (1d05c <vTaskInternalSetTimeOutState+0x24>)
   1d04a:	681a      	ldr	r2, [r3, #0]
   1d04c:	687b      	ldr	r3, [r7, #4]
   1d04e:	605a      	str	r2, [r3, #4]
}
   1d050:	46c0      	nop			; (mov r8, r8)
   1d052:	46bd      	mov	sp, r7
   1d054:	b002      	add	sp, #8
   1d056:	bd80      	pop	{r7, pc}
   1d058:	200041cc 	.word	0x200041cc
   1d05c:	200041b8 	.word	0x200041b8

0001d060 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1d060:	b580      	push	{r7, lr}
   1d062:	b086      	sub	sp, #24
   1d064:	af00      	add	r7, sp, #0
   1d066:	6078      	str	r0, [r7, #4]
   1d068:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1d06a:	687b      	ldr	r3, [r7, #4]
   1d06c:	2b00      	cmp	r3, #0
   1d06e:	d101      	bne.n	1d074 <xTaskCheckForTimeOut+0x14>
   1d070:	b672      	cpsid	i
   1d072:	e7fe      	b.n	1d072 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1d074:	683b      	ldr	r3, [r7, #0]
   1d076:	2b00      	cmp	r3, #0
   1d078:	d101      	bne.n	1d07e <xTaskCheckForTimeOut+0x1e>
   1d07a:	b672      	cpsid	i
   1d07c:	e7fe      	b.n	1d07c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1d07e:	4b1e      	ldr	r3, [pc, #120]	; (1d0f8 <xTaskCheckForTimeOut+0x98>)
   1d080:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1d082:	4b1e      	ldr	r3, [pc, #120]	; (1d0fc <xTaskCheckForTimeOut+0x9c>)
   1d084:	681b      	ldr	r3, [r3, #0]
   1d086:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1d088:	687b      	ldr	r3, [r7, #4]
   1d08a:	685b      	ldr	r3, [r3, #4]
   1d08c:	693a      	ldr	r2, [r7, #16]
   1d08e:	1ad3      	subs	r3, r2, r3
   1d090:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1d092:	683b      	ldr	r3, [r7, #0]
   1d094:	681b      	ldr	r3, [r3, #0]
   1d096:	3301      	adds	r3, #1
   1d098:	d102      	bne.n	1d0a0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1d09a:	2300      	movs	r3, #0
   1d09c:	617b      	str	r3, [r7, #20]
   1d09e:	e024      	b.n	1d0ea <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1d0a0:	687b      	ldr	r3, [r7, #4]
   1d0a2:	681a      	ldr	r2, [r3, #0]
   1d0a4:	4b16      	ldr	r3, [pc, #88]	; (1d100 <xTaskCheckForTimeOut+0xa0>)
   1d0a6:	681b      	ldr	r3, [r3, #0]
   1d0a8:	429a      	cmp	r2, r3
   1d0aa:	d007      	beq.n	1d0bc <xTaskCheckForTimeOut+0x5c>
   1d0ac:	687b      	ldr	r3, [r7, #4]
   1d0ae:	685a      	ldr	r2, [r3, #4]
   1d0b0:	693b      	ldr	r3, [r7, #16]
   1d0b2:	429a      	cmp	r2, r3
   1d0b4:	d802      	bhi.n	1d0bc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1d0b6:	2301      	movs	r3, #1
   1d0b8:	617b      	str	r3, [r7, #20]
   1d0ba:	e016      	b.n	1d0ea <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1d0bc:	683b      	ldr	r3, [r7, #0]
   1d0be:	681a      	ldr	r2, [r3, #0]
   1d0c0:	68fb      	ldr	r3, [r7, #12]
   1d0c2:	429a      	cmp	r2, r3
   1d0c4:	d90c      	bls.n	1d0e0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1d0c6:	683b      	ldr	r3, [r7, #0]
   1d0c8:	681a      	ldr	r2, [r3, #0]
   1d0ca:	68fb      	ldr	r3, [r7, #12]
   1d0cc:	1ad2      	subs	r2, r2, r3
   1d0ce:	683b      	ldr	r3, [r7, #0]
   1d0d0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1d0d2:	687b      	ldr	r3, [r7, #4]
   1d0d4:	0018      	movs	r0, r3
   1d0d6:	4b0b      	ldr	r3, [pc, #44]	; (1d104 <xTaskCheckForTimeOut+0xa4>)
   1d0d8:	4798      	blx	r3
			xReturn = pdFALSE;
   1d0da:	2300      	movs	r3, #0
   1d0dc:	617b      	str	r3, [r7, #20]
   1d0de:	e004      	b.n	1d0ea <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1d0e0:	683b      	ldr	r3, [r7, #0]
   1d0e2:	2200      	movs	r2, #0
   1d0e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1d0e6:	2301      	movs	r3, #1
   1d0e8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1d0ea:	4b07      	ldr	r3, [pc, #28]	; (1d108 <xTaskCheckForTimeOut+0xa8>)
   1d0ec:	4798      	blx	r3

	return xReturn;
   1d0ee:	697b      	ldr	r3, [r7, #20]
}
   1d0f0:	0018      	movs	r0, r3
   1d0f2:	46bd      	mov	sp, r7
   1d0f4:	b006      	add	sp, #24
   1d0f6:	bd80      	pop	{r7, pc}
   1d0f8:	0001a669 	.word	0x0001a669
   1d0fc:	200041b8 	.word	0x200041b8
   1d100:	200041cc 	.word	0x200041cc
   1d104:	0001d039 	.word	0x0001d039
   1d108:	0001a68d 	.word	0x0001a68d

0001d10c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1d10c:	b580      	push	{r7, lr}
   1d10e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1d110:	4b02      	ldr	r3, [pc, #8]	; (1d11c <vTaskMissedYield+0x10>)
   1d112:	2201      	movs	r2, #1
   1d114:	601a      	str	r2, [r3, #0]
}
   1d116:	46c0      	nop			; (mov r8, r8)
   1d118:	46bd      	mov	sp, r7
   1d11a:	bd80      	pop	{r7, pc}
   1d11c:	200041c8 	.word	0x200041c8

0001d120 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1d120:	b580      	push	{r7, lr}
   1d122:	b084      	sub	sp, #16
   1d124:	af00      	add	r7, sp, #0
   1d126:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d128:	687b      	ldr	r3, [r7, #4]
   1d12a:	2b00      	cmp	r3, #0
   1d12c:	d005      	beq.n	1d13a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d12e:	687b      	ldr	r3, [r7, #4]
   1d130:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1d132:	68bb      	ldr	r3, [r7, #8]
   1d134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d136:	60fb      	str	r3, [r7, #12]
   1d138:	e001      	b.n	1d13e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1d13a:	2300      	movs	r3, #0
   1d13c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1d13e:	68fb      	ldr	r3, [r7, #12]
	}
   1d140:	0018      	movs	r0, r3
   1d142:	46bd      	mov	sp, r7
   1d144:	b004      	add	sp, #16
   1d146:	bd80      	pop	{r7, pc}

0001d148 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1d148:	b580      	push	{r7, lr}
   1d14a:	b084      	sub	sp, #16
   1d14c:	af00      	add	r7, sp, #0
   1d14e:	6078      	str	r0, [r7, #4]
   1d150:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d152:	687b      	ldr	r3, [r7, #4]
   1d154:	2b00      	cmp	r3, #0
   1d156:	d004      	beq.n	1d162 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d158:	687b      	ldr	r3, [r7, #4]
   1d15a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1d15c:	68fb      	ldr	r3, [r7, #12]
   1d15e:	683a      	ldr	r2, [r7, #0]
   1d160:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1d162:	46c0      	nop			; (mov r8, r8)
   1d164:	46bd      	mov	sp, r7
   1d166:	b004      	add	sp, #16
   1d168:	bd80      	pop	{r7, pc}
	...

0001d16c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1d16c:	b580      	push	{r7, lr}
   1d16e:	b082      	sub	sp, #8
   1d170:	af00      	add	r7, sp, #0
   1d172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1d174:	4b04      	ldr	r3, [pc, #16]	; (1d188 <prvIdleTask+0x1c>)
   1d176:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1d178:	4b04      	ldr	r3, [pc, #16]	; (1d18c <prvIdleTask+0x20>)
   1d17a:	681b      	ldr	r3, [r3, #0]
   1d17c:	2b01      	cmp	r3, #1
   1d17e:	d9f9      	bls.n	1d174 <prvIdleTask+0x8>
			{
				taskYIELD();
   1d180:	4b03      	ldr	r3, [pc, #12]	; (1d190 <prvIdleTask+0x24>)
   1d182:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1d184:	e7f6      	b.n	1d174 <prvIdleTask+0x8>
   1d186:	46c0      	nop			; (mov r8, r8)
   1d188:	0001d221 	.word	0x0001d221
   1d18c:	200040e0 	.word	0x200040e0
   1d190:	0001a651 	.word	0x0001a651

0001d194 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1d194:	b580      	push	{r7, lr}
   1d196:	b082      	sub	sp, #8
   1d198:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d19a:	2300      	movs	r3, #0
   1d19c:	607b      	str	r3, [r7, #4]
   1d19e:	e00c      	b.n	1d1ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1d1a0:	687a      	ldr	r2, [r7, #4]
   1d1a2:	0013      	movs	r3, r2
   1d1a4:	009b      	lsls	r3, r3, #2
   1d1a6:	189b      	adds	r3, r3, r2
   1d1a8:	009b      	lsls	r3, r3, #2
   1d1aa:	4a14      	ldr	r2, [pc, #80]	; (1d1fc <prvInitialiseTaskLists+0x68>)
   1d1ac:	189b      	adds	r3, r3, r2
   1d1ae:	0018      	movs	r0, r3
   1d1b0:	4b13      	ldr	r3, [pc, #76]	; (1d200 <prvInitialiseTaskLists+0x6c>)
   1d1b2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d1b4:	687b      	ldr	r3, [r7, #4]
   1d1b6:	3301      	adds	r3, #1
   1d1b8:	607b      	str	r3, [r7, #4]
   1d1ba:	687b      	ldr	r3, [r7, #4]
   1d1bc:	2b04      	cmp	r3, #4
   1d1be:	d9ef      	bls.n	1d1a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1d1c0:	4b10      	ldr	r3, [pc, #64]	; (1d204 <prvInitialiseTaskLists+0x70>)
   1d1c2:	0018      	movs	r0, r3
   1d1c4:	4b0e      	ldr	r3, [pc, #56]	; (1d200 <prvInitialiseTaskLists+0x6c>)
   1d1c6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1d1c8:	4b0f      	ldr	r3, [pc, #60]	; (1d208 <prvInitialiseTaskLists+0x74>)
   1d1ca:	0018      	movs	r0, r3
   1d1cc:	4b0c      	ldr	r3, [pc, #48]	; (1d200 <prvInitialiseTaskLists+0x6c>)
   1d1ce:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1d1d0:	4b0e      	ldr	r3, [pc, #56]	; (1d20c <prvInitialiseTaskLists+0x78>)
   1d1d2:	0018      	movs	r0, r3
   1d1d4:	4b0a      	ldr	r3, [pc, #40]	; (1d200 <prvInitialiseTaskLists+0x6c>)
   1d1d6:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1d1d8:	4b0d      	ldr	r3, [pc, #52]	; (1d210 <prvInitialiseTaskLists+0x7c>)
   1d1da:	0018      	movs	r0, r3
   1d1dc:	4b08      	ldr	r3, [pc, #32]	; (1d200 <prvInitialiseTaskLists+0x6c>)
   1d1de:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1d1e0:	4b0c      	ldr	r3, [pc, #48]	; (1d214 <prvInitialiseTaskLists+0x80>)
   1d1e2:	0018      	movs	r0, r3
   1d1e4:	4b06      	ldr	r3, [pc, #24]	; (1d200 <prvInitialiseTaskLists+0x6c>)
   1d1e6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1d1e8:	4b0b      	ldr	r3, [pc, #44]	; (1d218 <prvInitialiseTaskLists+0x84>)
   1d1ea:	4a06      	ldr	r2, [pc, #24]	; (1d204 <prvInitialiseTaskLists+0x70>)
   1d1ec:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1d1ee:	4b0b      	ldr	r3, [pc, #44]	; (1d21c <prvInitialiseTaskLists+0x88>)
   1d1f0:	4a05      	ldr	r2, [pc, #20]	; (1d208 <prvInitialiseTaskLists+0x74>)
   1d1f2:	601a      	str	r2, [r3, #0]
}
   1d1f4:	46c0      	nop			; (mov r8, r8)
   1d1f6:	46bd      	mov	sp, r7
   1d1f8:	b002      	add	sp, #8
   1d1fa:	bd80      	pop	{r7, pc}
   1d1fc:	200040e0 	.word	0x200040e0
   1d200:	0001a3d9 	.word	0x0001a3d9
   1d204:	20004144 	.word	0x20004144
   1d208:	20004158 	.word	0x20004158
   1d20c:	20004174 	.word	0x20004174
   1d210:	20004188 	.word	0x20004188
   1d214:	200041a0 	.word	0x200041a0
   1d218:	2000416c 	.word	0x2000416c
   1d21c:	20004170 	.word	0x20004170

0001d220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1d220:	b580      	push	{r7, lr}
   1d222:	b082      	sub	sp, #8
   1d224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d226:	e01a      	b.n	1d25e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1d228:	4b11      	ldr	r3, [pc, #68]	; (1d270 <prvCheckTasksWaitingTermination+0x50>)
   1d22a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1d22c:	4b11      	ldr	r3, [pc, #68]	; (1d274 <prvCheckTasksWaitingTermination+0x54>)
   1d22e:	68db      	ldr	r3, [r3, #12]
   1d230:	68db      	ldr	r3, [r3, #12]
   1d232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d234:	687b      	ldr	r3, [r7, #4]
   1d236:	3304      	adds	r3, #4
   1d238:	0018      	movs	r0, r3
   1d23a:	4b0f      	ldr	r3, [pc, #60]	; (1d278 <prvCheckTasksWaitingTermination+0x58>)
   1d23c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1d23e:	4b0f      	ldr	r3, [pc, #60]	; (1d27c <prvCheckTasksWaitingTermination+0x5c>)
   1d240:	681b      	ldr	r3, [r3, #0]
   1d242:	1e5a      	subs	r2, r3, #1
   1d244:	4b0d      	ldr	r3, [pc, #52]	; (1d27c <prvCheckTasksWaitingTermination+0x5c>)
   1d246:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1d248:	4b0d      	ldr	r3, [pc, #52]	; (1d280 <prvCheckTasksWaitingTermination+0x60>)
   1d24a:	681b      	ldr	r3, [r3, #0]
   1d24c:	1e5a      	subs	r2, r3, #1
   1d24e:	4b0c      	ldr	r3, [pc, #48]	; (1d280 <prvCheckTasksWaitingTermination+0x60>)
   1d250:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1d252:	4b0c      	ldr	r3, [pc, #48]	; (1d284 <prvCheckTasksWaitingTermination+0x64>)
   1d254:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1d256:	687b      	ldr	r3, [r7, #4]
   1d258:	0018      	movs	r0, r3
   1d25a:	4b0b      	ldr	r3, [pc, #44]	; (1d288 <prvCheckTasksWaitingTermination+0x68>)
   1d25c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d25e:	4b08      	ldr	r3, [pc, #32]	; (1d280 <prvCheckTasksWaitingTermination+0x60>)
   1d260:	681b      	ldr	r3, [r3, #0]
   1d262:	2b00      	cmp	r3, #0
   1d264:	d1e0      	bne.n	1d228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1d266:	46c0      	nop			; (mov r8, r8)
   1d268:	46bd      	mov	sp, r7
   1d26a:	b002      	add	sp, #8
   1d26c:	bd80      	pop	{r7, pc}
   1d26e:	46c0      	nop			; (mov r8, r8)
   1d270:	0001a669 	.word	0x0001a669
   1d274:	20004188 	.word	0x20004188
   1d278:	0001a4db 	.word	0x0001a4db
   1d27c:	200041b4 	.word	0x200041b4
   1d280:	2000419c 	.word	0x2000419c
   1d284:	0001a68d 	.word	0x0001a68d
   1d288:	0001d2fd 	.word	0x0001d2fd

0001d28c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1d28c:	b580      	push	{r7, lr}
   1d28e:	b084      	sub	sp, #16
   1d290:	af00      	add	r7, sp, #0
   1d292:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1d294:	2300      	movs	r3, #0
   1d296:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d298:	e005      	b.n	1d2a6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1d29a:	687b      	ldr	r3, [r7, #4]
   1d29c:	3301      	adds	r3, #1
   1d29e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1d2a0:	68fb      	ldr	r3, [r7, #12]
   1d2a2:	3301      	adds	r3, #1
   1d2a4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d2a6:	687b      	ldr	r3, [r7, #4]
   1d2a8:	781b      	ldrb	r3, [r3, #0]
   1d2aa:	2ba5      	cmp	r3, #165	; 0xa5
   1d2ac:	d0f5      	beq.n	1d29a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1d2ae:	68fb      	ldr	r3, [r7, #12]
   1d2b0:	089b      	lsrs	r3, r3, #2
   1d2b2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1d2b4:	68fb      	ldr	r3, [r7, #12]
   1d2b6:	b29b      	uxth	r3, r3
	}
   1d2b8:	0018      	movs	r0, r3
   1d2ba:	46bd      	mov	sp, r7
   1d2bc:	b004      	add	sp, #16
   1d2be:	bd80      	pop	{r7, pc}

0001d2c0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1d2c0:	b580      	push	{r7, lr}
   1d2c2:	b086      	sub	sp, #24
   1d2c4:	af00      	add	r7, sp, #0
   1d2c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1d2c8:	687b      	ldr	r3, [r7, #4]
   1d2ca:	2b00      	cmp	r3, #0
   1d2cc:	d102      	bne.n	1d2d4 <uxTaskGetStackHighWaterMark+0x14>
   1d2ce:	4b09      	ldr	r3, [pc, #36]	; (1d2f4 <uxTaskGetStackHighWaterMark+0x34>)
   1d2d0:	681b      	ldr	r3, [r3, #0]
   1d2d2:	e000      	b.n	1d2d6 <uxTaskGetStackHighWaterMark+0x16>
   1d2d4:	687b      	ldr	r3, [r7, #4]
   1d2d6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1d2d8:	697b      	ldr	r3, [r7, #20]
   1d2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d2dc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1d2de:	693b      	ldr	r3, [r7, #16]
   1d2e0:	0018      	movs	r0, r3
   1d2e2:	4b05      	ldr	r3, [pc, #20]	; (1d2f8 <uxTaskGetStackHighWaterMark+0x38>)
   1d2e4:	4798      	blx	r3
   1d2e6:	0003      	movs	r3, r0
   1d2e8:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1d2ea:	68fb      	ldr	r3, [r7, #12]
	}
   1d2ec:	0018      	movs	r0, r3
   1d2ee:	46bd      	mov	sp, r7
   1d2f0:	b006      	add	sp, #24
   1d2f2:	bd80      	pop	{r7, pc}
   1d2f4:	200040dc 	.word	0x200040dc
   1d2f8:	0001d28d 	.word	0x0001d28d

0001d2fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1d2fc:	b580      	push	{r7, lr}
   1d2fe:	b082      	sub	sp, #8
   1d300:	af00      	add	r7, sp, #0
   1d302:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1d304:	687b      	ldr	r3, [r7, #4]
   1d306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d308:	0018      	movs	r0, r3
   1d30a:	4b05      	ldr	r3, [pc, #20]	; (1d320 <prvDeleteTCB+0x24>)
   1d30c:	4798      	blx	r3
			vPortFree( pxTCB );
   1d30e:	687b      	ldr	r3, [r7, #4]
   1d310:	0018      	movs	r0, r3
   1d312:	4b03      	ldr	r3, [pc, #12]	; (1d320 <prvDeleteTCB+0x24>)
   1d314:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1d316:	46c0      	nop			; (mov r8, r8)
   1d318:	46bd      	mov	sp, r7
   1d31a:	b002      	add	sp, #8
   1d31c:	bd80      	pop	{r7, pc}
   1d31e:	46c0      	nop			; (mov r8, r8)
   1d320:	0001a865 	.word	0x0001a865

0001d324 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1d324:	b580      	push	{r7, lr}
   1d326:	b082      	sub	sp, #8
   1d328:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d32a:	4b0e      	ldr	r3, [pc, #56]	; (1d364 <prvResetNextTaskUnblockTime+0x40>)
   1d32c:	681b      	ldr	r3, [r3, #0]
   1d32e:	681b      	ldr	r3, [r3, #0]
   1d330:	2b00      	cmp	r3, #0
   1d332:	d101      	bne.n	1d338 <prvResetNextTaskUnblockTime+0x14>
   1d334:	2301      	movs	r3, #1
   1d336:	e000      	b.n	1d33a <prvResetNextTaskUnblockTime+0x16>
   1d338:	2300      	movs	r3, #0
   1d33a:	2b00      	cmp	r3, #0
   1d33c:	d004      	beq.n	1d348 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1d33e:	4b0a      	ldr	r3, [pc, #40]	; (1d368 <prvResetNextTaskUnblockTime+0x44>)
   1d340:	2201      	movs	r2, #1
   1d342:	4252      	negs	r2, r2
   1d344:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1d346:	e008      	b.n	1d35a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d348:	4b06      	ldr	r3, [pc, #24]	; (1d364 <prvResetNextTaskUnblockTime+0x40>)
   1d34a:	681b      	ldr	r3, [r3, #0]
   1d34c:	68db      	ldr	r3, [r3, #12]
   1d34e:	68db      	ldr	r3, [r3, #12]
   1d350:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1d352:	687b      	ldr	r3, [r7, #4]
   1d354:	685a      	ldr	r2, [r3, #4]
   1d356:	4b04      	ldr	r3, [pc, #16]	; (1d368 <prvResetNextTaskUnblockTime+0x44>)
   1d358:	601a      	str	r2, [r3, #0]
}
   1d35a:	46c0      	nop			; (mov r8, r8)
   1d35c:	46bd      	mov	sp, r7
   1d35e:	b002      	add	sp, #8
   1d360:	bd80      	pop	{r7, pc}
   1d362:	46c0      	nop			; (mov r8, r8)
   1d364:	2000416c 	.word	0x2000416c
   1d368:	200041d4 	.word	0x200041d4

0001d36c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1d36c:	b580      	push	{r7, lr}
   1d36e:	b082      	sub	sp, #8
   1d370:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1d372:	4b04      	ldr	r3, [pc, #16]	; (1d384 <xTaskGetCurrentTaskHandle+0x18>)
   1d374:	681b      	ldr	r3, [r3, #0]
   1d376:	607b      	str	r3, [r7, #4]

		return xReturn;
   1d378:	687b      	ldr	r3, [r7, #4]
	}
   1d37a:	0018      	movs	r0, r3
   1d37c:	46bd      	mov	sp, r7
   1d37e:	b002      	add	sp, #8
   1d380:	bd80      	pop	{r7, pc}
   1d382:	46c0      	nop			; (mov r8, r8)
   1d384:	200040dc 	.word	0x200040dc

0001d388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1d388:	b580      	push	{r7, lr}
   1d38a:	b082      	sub	sp, #8
   1d38c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1d38e:	4b0a      	ldr	r3, [pc, #40]	; (1d3b8 <xTaskGetSchedulerState+0x30>)
   1d390:	681b      	ldr	r3, [r3, #0]
   1d392:	2b00      	cmp	r3, #0
   1d394:	d102      	bne.n	1d39c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1d396:	2301      	movs	r3, #1
   1d398:	607b      	str	r3, [r7, #4]
   1d39a:	e008      	b.n	1d3ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d39c:	4b07      	ldr	r3, [pc, #28]	; (1d3bc <xTaskGetSchedulerState+0x34>)
   1d39e:	681b      	ldr	r3, [r3, #0]
   1d3a0:	2b00      	cmp	r3, #0
   1d3a2:	d102      	bne.n	1d3aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1d3a4:	2302      	movs	r3, #2
   1d3a6:	607b      	str	r3, [r7, #4]
   1d3a8:	e001      	b.n	1d3ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1d3aa:	2300      	movs	r3, #0
   1d3ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1d3ae:	687b      	ldr	r3, [r7, #4]
	}
   1d3b0:	0018      	movs	r0, r3
   1d3b2:	46bd      	mov	sp, r7
   1d3b4:	b002      	add	sp, #8
   1d3b6:	bd80      	pop	{r7, pc}
   1d3b8:	200041c0 	.word	0x200041c0
   1d3bc:	200041dc 	.word	0x200041dc

0001d3c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1d3c0:	b590      	push	{r4, r7, lr}
   1d3c2:	b085      	sub	sp, #20
   1d3c4:	af00      	add	r7, sp, #0
   1d3c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1d3c8:	687b      	ldr	r3, [r7, #4]
   1d3ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1d3cc:	2300      	movs	r3, #0
   1d3ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1d3d0:	687b      	ldr	r3, [r7, #4]
   1d3d2:	2b00      	cmp	r3, #0
   1d3d4:	d100      	bne.n	1d3d8 <xTaskPriorityInherit+0x18>
   1d3d6:	e09d      	b.n	1d514 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1d3d8:	68bb      	ldr	r3, [r7, #8]
   1d3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3dc:	4b50      	ldr	r3, [pc, #320]	; (1d520 <xTaskPriorityInherit+0x160>)
   1d3de:	681b      	ldr	r3, [r3, #0]
   1d3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d3e2:	429a      	cmp	r2, r3
   1d3e4:	d300      	bcc.n	1d3e8 <xTaskPriorityInherit+0x28>
   1d3e6:	e08c      	b.n	1d502 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d3e8:	68bb      	ldr	r3, [r7, #8]
   1d3ea:	699b      	ldr	r3, [r3, #24]
   1d3ec:	2b00      	cmp	r3, #0
   1d3ee:	db06      	blt.n	1d3fe <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d3f0:	4b4b      	ldr	r3, [pc, #300]	; (1d520 <xTaskPriorityInherit+0x160>)
   1d3f2:	681b      	ldr	r3, [r3, #0]
   1d3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d3f6:	2205      	movs	r2, #5
   1d3f8:	1ad2      	subs	r2, r2, r3
   1d3fa:	68bb      	ldr	r3, [r7, #8]
   1d3fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1d3fe:	68bb      	ldr	r3, [r7, #8]
   1d400:	6959      	ldr	r1, [r3, #20]
   1d402:	68bb      	ldr	r3, [r7, #8]
   1d404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d406:	0013      	movs	r3, r2
   1d408:	009b      	lsls	r3, r3, #2
   1d40a:	189b      	adds	r3, r3, r2
   1d40c:	009b      	lsls	r3, r3, #2
   1d40e:	4a45      	ldr	r2, [pc, #276]	; (1d524 <xTaskPriorityInherit+0x164>)
   1d410:	189b      	adds	r3, r3, r2
   1d412:	4299      	cmp	r1, r3
   1d414:	d101      	bne.n	1d41a <xTaskPriorityInherit+0x5a>
   1d416:	2301      	movs	r3, #1
   1d418:	e000      	b.n	1d41c <xTaskPriorityInherit+0x5c>
   1d41a:	2300      	movs	r3, #0
   1d41c:	2b00      	cmp	r3, #0
   1d41e:	d037      	beq.n	1d490 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d420:	68bb      	ldr	r3, [r7, #8]
   1d422:	3304      	adds	r3, #4
   1d424:	0018      	movs	r0, r3
   1d426:	4b40      	ldr	r3, [pc, #256]	; (1d528 <xTaskPriorityInherit+0x168>)
   1d428:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1d42a:	4b3d      	ldr	r3, [pc, #244]	; (1d520 <xTaskPriorityInherit+0x160>)
   1d42c:	681b      	ldr	r3, [r3, #0]
   1d42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d430:	68bb      	ldr	r3, [r7, #8]
   1d432:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1d434:	68bb      	ldr	r3, [r7, #8]
   1d436:	0018      	movs	r0, r3
   1d438:	4b3c      	ldr	r3, [pc, #240]	; (1d52c <xTaskPriorityInherit+0x16c>)
   1d43a:	4798      	blx	r3
   1d43c:	0003      	movs	r3, r0
   1d43e:	001a      	movs	r2, r3
   1d440:	4b3b      	ldr	r3, [pc, #236]	; (1d530 <xTaskPriorityInherit+0x170>)
   1d442:	881b      	ldrh	r3, [r3, #0]
   1d444:	4013      	ands	r3, r2
   1d446:	b29b      	uxth	r3, r3
   1d448:	2b00      	cmp	r3, #0
   1d44a:	d008      	beq.n	1d45e <xTaskPriorityInherit+0x9e>
   1d44c:	68bb      	ldr	r3, [r7, #8]
   1d44e:	0018      	movs	r0, r3
   1d450:	4b38      	ldr	r3, [pc, #224]	; (1d534 <xTaskPriorityInherit+0x174>)
   1d452:	4798      	blx	r3
   1d454:	0003      	movs	r3, r0
   1d456:	b2db      	uxtb	r3, r3
   1d458:	0018      	movs	r0, r3
   1d45a:	4b37      	ldr	r3, [pc, #220]	; (1d538 <xTaskPriorityInherit+0x178>)
   1d45c:	4798      	blx	r3
   1d45e:	68bb      	ldr	r3, [r7, #8]
   1d460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d462:	4b36      	ldr	r3, [pc, #216]	; (1d53c <xTaskPriorityInherit+0x17c>)
   1d464:	681b      	ldr	r3, [r3, #0]
   1d466:	429a      	cmp	r2, r3
   1d468:	d903      	bls.n	1d472 <xTaskPriorityInherit+0xb2>
   1d46a:	68bb      	ldr	r3, [r7, #8]
   1d46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d46e:	4b33      	ldr	r3, [pc, #204]	; (1d53c <xTaskPriorityInherit+0x17c>)
   1d470:	601a      	str	r2, [r3, #0]
   1d472:	68bb      	ldr	r3, [r7, #8]
   1d474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d476:	0013      	movs	r3, r2
   1d478:	009b      	lsls	r3, r3, #2
   1d47a:	189b      	adds	r3, r3, r2
   1d47c:	009b      	lsls	r3, r3, #2
   1d47e:	4a29      	ldr	r2, [pc, #164]	; (1d524 <xTaskPriorityInherit+0x164>)
   1d480:	189a      	adds	r2, r3, r2
   1d482:	68bb      	ldr	r3, [r7, #8]
   1d484:	3304      	adds	r3, #4
   1d486:	0019      	movs	r1, r3
   1d488:	0010      	movs	r0, r2
   1d48a:	4b2d      	ldr	r3, [pc, #180]	; (1d540 <xTaskPriorityInherit+0x180>)
   1d48c:	4798      	blx	r3
   1d48e:	e004      	b.n	1d49a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1d490:	4b23      	ldr	r3, [pc, #140]	; (1d520 <xTaskPriorityInherit+0x160>)
   1d492:	681b      	ldr	r3, [r3, #0]
   1d494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d496:	68bb      	ldr	r3, [r7, #8]
   1d498:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1d49a:	68bb      	ldr	r3, [r7, #8]
   1d49c:	0018      	movs	r0, r3
   1d49e:	4b23      	ldr	r3, [pc, #140]	; (1d52c <xTaskPriorityInherit+0x16c>)
   1d4a0:	4798      	blx	r3
   1d4a2:	0003      	movs	r3, r0
   1d4a4:	001a      	movs	r2, r3
   1d4a6:	4b22      	ldr	r3, [pc, #136]	; (1d530 <xTaskPriorityInherit+0x170>)
   1d4a8:	881b      	ldrh	r3, [r3, #0]
   1d4aa:	4013      	ands	r3, r2
   1d4ac:	b29b      	uxth	r3, r3
   1d4ae:	2b00      	cmp	r3, #0
   1d4b0:	d024      	beq.n	1d4fc <xTaskPriorityInherit+0x13c>
   1d4b2:	68bb      	ldr	r3, [r7, #8]
   1d4b4:	0018      	movs	r0, r3
   1d4b6:	4b1f      	ldr	r3, [pc, #124]	; (1d534 <xTaskPriorityInherit+0x174>)
   1d4b8:	4798      	blx	r3
   1d4ba:	0003      	movs	r3, r0
   1d4bc:	b2db      	uxtb	r3, r3
   1d4be:	001c      	movs	r4, r3
   1d4c0:	68bb      	ldr	r3, [r7, #8]
   1d4c2:	0018      	movs	r0, r3
   1d4c4:	4b1b      	ldr	r3, [pc, #108]	; (1d534 <xTaskPriorityInherit+0x174>)
   1d4c6:	4798      	blx	r3
   1d4c8:	0003      	movs	r3, r0
   1d4ca:	b2db      	uxtb	r3, r3
   1d4cc:	0019      	movs	r1, r3
   1d4ce:	2003      	movs	r0, #3
   1d4d0:	4b1c      	ldr	r3, [pc, #112]	; (1d544 <xTaskPriorityInherit+0x184>)
   1d4d2:	4798      	blx	r3
   1d4d4:	0003      	movs	r3, r0
   1d4d6:	0022      	movs	r2, r4
   1d4d8:	2103      	movs	r1, #3
   1d4da:	208e      	movs	r0, #142	; 0x8e
   1d4dc:	4c1a      	ldr	r4, [pc, #104]	; (1d548 <xTaskPriorityInherit+0x188>)
   1d4de:	47a0      	blx	r4
   1d4e0:	68bb      	ldr	r3, [r7, #8]
   1d4e2:	0018      	movs	r0, r3
   1d4e4:	4b13      	ldr	r3, [pc, #76]	; (1d534 <xTaskPriorityInherit+0x174>)
   1d4e6:	4798      	blx	r3
   1d4e8:	0003      	movs	r3, r0
   1d4ea:	b2d9      	uxtb	r1, r3
   1d4ec:	4b0c      	ldr	r3, [pc, #48]	; (1d520 <xTaskPriorityInherit+0x160>)
   1d4ee:	681b      	ldr	r3, [r3, #0]
   1d4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d4f2:	b2db      	uxtb	r3, r3
   1d4f4:	001a      	movs	r2, r3
   1d4f6:	2003      	movs	r0, #3
   1d4f8:	4b14      	ldr	r3, [pc, #80]	; (1d54c <xTaskPriorityInherit+0x18c>)
   1d4fa:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1d4fc:	2301      	movs	r3, #1
   1d4fe:	60fb      	str	r3, [r7, #12]
   1d500:	e008      	b.n	1d514 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1d502:	68bb      	ldr	r3, [r7, #8]
   1d504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d506:	4b06      	ldr	r3, [pc, #24]	; (1d520 <xTaskPriorityInherit+0x160>)
   1d508:	681b      	ldr	r3, [r3, #0]
   1d50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d50c:	429a      	cmp	r2, r3
   1d50e:	d201      	bcs.n	1d514 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1d510:	2301      	movs	r3, #1
   1d512:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1d514:	68fb      	ldr	r3, [r7, #12]
	}
   1d516:	0018      	movs	r0, r3
   1d518:	46bd      	mov	sp, r7
   1d51a:	b005      	add	sp, #20
   1d51c:	bd90      	pop	{r4, r7, pc}
   1d51e:	46c0      	nop			; (mov r8, r8)
   1d520:	200040dc 	.word	0x200040dc
   1d524:	200040e0 	.word	0x200040e0
   1d528:	0001a4db 	.word	0x0001a4db
   1d52c:	00018661 	.word	0x00018661
   1d530:	20000110 	.word	0x20000110
   1d534:	00018641 	.word	0x00018641
   1d538:	00018e11 	.word	0x00018e11
   1d53c:	200041bc 	.word	0x200041bc
   1d540:	0001a42b 	.word	0x0001a42b
   1d544:	00019619 	.word	0x00019619
   1d548:	00019189 	.word	0x00019189
   1d54c:	00019575 	.word	0x00019575

0001d550 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1d550:	b590      	push	{r4, r7, lr}
   1d552:	b085      	sub	sp, #20
   1d554:	af00      	add	r7, sp, #0
   1d556:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1d558:	687b      	ldr	r3, [r7, #4]
   1d55a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1d55c:	2300      	movs	r3, #0
   1d55e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1d560:	687b      	ldr	r3, [r7, #4]
   1d562:	2b00      	cmp	r3, #0
   1d564:	d100      	bne.n	1d568 <xTaskPriorityDisinherit+0x18>
   1d566:	e089      	b.n	1d67c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1d568:	4b47      	ldr	r3, [pc, #284]	; (1d688 <xTaskPriorityDisinherit+0x138>)
   1d56a:	681b      	ldr	r3, [r3, #0]
   1d56c:	68ba      	ldr	r2, [r7, #8]
   1d56e:	429a      	cmp	r2, r3
   1d570:	d001      	beq.n	1d576 <xTaskPriorityDisinherit+0x26>
   1d572:	b672      	cpsid	i
   1d574:	e7fe      	b.n	1d574 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1d576:	68bb      	ldr	r3, [r7, #8]
   1d578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d57a:	2b00      	cmp	r3, #0
   1d57c:	d101      	bne.n	1d582 <xTaskPriorityDisinherit+0x32>
   1d57e:	b672      	cpsid	i
   1d580:	e7fe      	b.n	1d580 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1d582:	68bb      	ldr	r3, [r7, #8]
   1d584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d586:	1e5a      	subs	r2, r3, #1
   1d588:	68bb      	ldr	r3, [r7, #8]
   1d58a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1d58c:	68bb      	ldr	r3, [r7, #8]
   1d58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d590:	68bb      	ldr	r3, [r7, #8]
   1d592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d594:	429a      	cmp	r2, r3
   1d596:	d071      	beq.n	1d67c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1d598:	68bb      	ldr	r3, [r7, #8]
   1d59a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d59c:	2b00      	cmp	r3, #0
   1d59e:	d16d      	bne.n	1d67c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d5a0:	68bb      	ldr	r3, [r7, #8]
   1d5a2:	3304      	adds	r3, #4
   1d5a4:	0018      	movs	r0, r3
   1d5a6:	4b39      	ldr	r3, [pc, #228]	; (1d68c <xTaskPriorityDisinherit+0x13c>)
   1d5a8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1d5aa:	68bb      	ldr	r3, [r7, #8]
   1d5ac:	0018      	movs	r0, r3
   1d5ae:	4b38      	ldr	r3, [pc, #224]	; (1d690 <xTaskPriorityDisinherit+0x140>)
   1d5b0:	4798      	blx	r3
   1d5b2:	0003      	movs	r3, r0
   1d5b4:	001a      	movs	r2, r3
   1d5b6:	4b37      	ldr	r3, [pc, #220]	; (1d694 <xTaskPriorityDisinherit+0x144>)
   1d5b8:	881b      	ldrh	r3, [r3, #0]
   1d5ba:	4013      	ands	r3, r2
   1d5bc:	b29b      	uxth	r3, r3
   1d5be:	2b00      	cmp	r3, #0
   1d5c0:	d023      	beq.n	1d60a <xTaskPriorityDisinherit+0xba>
   1d5c2:	68bb      	ldr	r3, [r7, #8]
   1d5c4:	0018      	movs	r0, r3
   1d5c6:	4b34      	ldr	r3, [pc, #208]	; (1d698 <xTaskPriorityDisinherit+0x148>)
   1d5c8:	4798      	blx	r3
   1d5ca:	0003      	movs	r3, r0
   1d5cc:	b2db      	uxtb	r3, r3
   1d5ce:	001c      	movs	r4, r3
   1d5d0:	68bb      	ldr	r3, [r7, #8]
   1d5d2:	0018      	movs	r0, r3
   1d5d4:	4b30      	ldr	r3, [pc, #192]	; (1d698 <xTaskPriorityDisinherit+0x148>)
   1d5d6:	4798      	blx	r3
   1d5d8:	0003      	movs	r3, r0
   1d5da:	b2db      	uxtb	r3, r3
   1d5dc:	0019      	movs	r1, r3
   1d5de:	2003      	movs	r0, #3
   1d5e0:	4b2e      	ldr	r3, [pc, #184]	; (1d69c <xTaskPriorityDisinherit+0x14c>)
   1d5e2:	4798      	blx	r3
   1d5e4:	0003      	movs	r3, r0
   1d5e6:	0022      	movs	r2, r4
   1d5e8:	2103      	movs	r1, #3
   1d5ea:	208f      	movs	r0, #143	; 0x8f
   1d5ec:	4c2c      	ldr	r4, [pc, #176]	; (1d6a0 <xTaskPriorityDisinherit+0x150>)
   1d5ee:	47a0      	blx	r4
   1d5f0:	68bb      	ldr	r3, [r7, #8]
   1d5f2:	0018      	movs	r0, r3
   1d5f4:	4b28      	ldr	r3, [pc, #160]	; (1d698 <xTaskPriorityDisinherit+0x148>)
   1d5f6:	4798      	blx	r3
   1d5f8:	0003      	movs	r3, r0
   1d5fa:	b2d9      	uxtb	r1, r3
   1d5fc:	68bb      	ldr	r3, [r7, #8]
   1d5fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d600:	b2db      	uxtb	r3, r3
   1d602:	001a      	movs	r2, r3
   1d604:	2003      	movs	r0, #3
   1d606:	4b27      	ldr	r3, [pc, #156]	; (1d6a4 <xTaskPriorityDisinherit+0x154>)
   1d608:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1d60a:	68bb      	ldr	r3, [r7, #8]
   1d60c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d60e:	68bb      	ldr	r3, [r7, #8]
   1d610:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d612:	68bb      	ldr	r3, [r7, #8]
   1d614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d616:	2205      	movs	r2, #5
   1d618:	1ad2      	subs	r2, r2, r3
   1d61a:	68bb      	ldr	r3, [r7, #8]
   1d61c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1d61e:	68bb      	ldr	r3, [r7, #8]
   1d620:	0018      	movs	r0, r3
   1d622:	4b1b      	ldr	r3, [pc, #108]	; (1d690 <xTaskPriorityDisinherit+0x140>)
   1d624:	4798      	blx	r3
   1d626:	0003      	movs	r3, r0
   1d628:	001a      	movs	r2, r3
   1d62a:	4b1a      	ldr	r3, [pc, #104]	; (1d694 <xTaskPriorityDisinherit+0x144>)
   1d62c:	881b      	ldrh	r3, [r3, #0]
   1d62e:	4013      	ands	r3, r2
   1d630:	b29b      	uxth	r3, r3
   1d632:	2b00      	cmp	r3, #0
   1d634:	d008      	beq.n	1d648 <xTaskPriorityDisinherit+0xf8>
   1d636:	68bb      	ldr	r3, [r7, #8]
   1d638:	0018      	movs	r0, r3
   1d63a:	4b17      	ldr	r3, [pc, #92]	; (1d698 <xTaskPriorityDisinherit+0x148>)
   1d63c:	4798      	blx	r3
   1d63e:	0003      	movs	r3, r0
   1d640:	b2db      	uxtb	r3, r3
   1d642:	0018      	movs	r0, r3
   1d644:	4b18      	ldr	r3, [pc, #96]	; (1d6a8 <xTaskPriorityDisinherit+0x158>)
   1d646:	4798      	blx	r3
   1d648:	68bb      	ldr	r3, [r7, #8]
   1d64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d64c:	4b17      	ldr	r3, [pc, #92]	; (1d6ac <xTaskPriorityDisinherit+0x15c>)
   1d64e:	681b      	ldr	r3, [r3, #0]
   1d650:	429a      	cmp	r2, r3
   1d652:	d903      	bls.n	1d65c <xTaskPriorityDisinherit+0x10c>
   1d654:	68bb      	ldr	r3, [r7, #8]
   1d656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d658:	4b14      	ldr	r3, [pc, #80]	; (1d6ac <xTaskPriorityDisinherit+0x15c>)
   1d65a:	601a      	str	r2, [r3, #0]
   1d65c:	68bb      	ldr	r3, [r7, #8]
   1d65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d660:	0013      	movs	r3, r2
   1d662:	009b      	lsls	r3, r3, #2
   1d664:	189b      	adds	r3, r3, r2
   1d666:	009b      	lsls	r3, r3, #2
   1d668:	4a11      	ldr	r2, [pc, #68]	; (1d6b0 <xTaskPriorityDisinherit+0x160>)
   1d66a:	189a      	adds	r2, r3, r2
   1d66c:	68bb      	ldr	r3, [r7, #8]
   1d66e:	3304      	adds	r3, #4
   1d670:	0019      	movs	r1, r3
   1d672:	0010      	movs	r0, r2
   1d674:	4b0f      	ldr	r3, [pc, #60]	; (1d6b4 <xTaskPriorityDisinherit+0x164>)
   1d676:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1d678:	2301      	movs	r3, #1
   1d67a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1d67c:	68fb      	ldr	r3, [r7, #12]
	}
   1d67e:	0018      	movs	r0, r3
   1d680:	46bd      	mov	sp, r7
   1d682:	b005      	add	sp, #20
   1d684:	bd90      	pop	{r4, r7, pc}
   1d686:	46c0      	nop			; (mov r8, r8)
   1d688:	200040dc 	.word	0x200040dc
   1d68c:	0001a4db 	.word	0x0001a4db
   1d690:	00018661 	.word	0x00018661
   1d694:	20000110 	.word	0x20000110
   1d698:	00018641 	.word	0x00018641
   1d69c:	00019619 	.word	0x00019619
   1d6a0:	00019189 	.word	0x00019189
   1d6a4:	00019575 	.word	0x00019575
   1d6a8:	00018e11 	.word	0x00018e11
   1d6ac:	200041bc 	.word	0x200041bc
   1d6b0:	200040e0 	.word	0x200040e0
   1d6b4:	0001a42b 	.word	0x0001a42b

0001d6b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1d6b8:	b590      	push	{r4, r7, lr}
   1d6ba:	b087      	sub	sp, #28
   1d6bc:	af00      	add	r7, sp, #0
   1d6be:	6078      	str	r0, [r7, #4]
   1d6c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1d6c2:	687b      	ldr	r3, [r7, #4]
   1d6c4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1d6c6:	2301      	movs	r3, #1
   1d6c8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1d6ca:	687b      	ldr	r3, [r7, #4]
   1d6cc:	2b00      	cmp	r3, #0
   1d6ce:	d100      	bne.n	1d6d2 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1d6d0:	e0a4      	b.n	1d81c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1d6d2:	693b      	ldr	r3, [r7, #16]
   1d6d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d6d6:	2b00      	cmp	r3, #0
   1d6d8:	d101      	bne.n	1d6de <vTaskPriorityDisinheritAfterTimeout+0x26>
   1d6da:	b672      	cpsid	i
   1d6dc:	e7fe      	b.n	1d6dc <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1d6de:	693b      	ldr	r3, [r7, #16]
   1d6e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d6e2:	683b      	ldr	r3, [r7, #0]
   1d6e4:	429a      	cmp	r2, r3
   1d6e6:	d202      	bcs.n	1d6ee <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1d6e8:	683b      	ldr	r3, [r7, #0]
   1d6ea:	617b      	str	r3, [r7, #20]
   1d6ec:	e002      	b.n	1d6f4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1d6ee:	693b      	ldr	r3, [r7, #16]
   1d6f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d6f2:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1d6f4:	693b      	ldr	r3, [r7, #16]
   1d6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d6f8:	697b      	ldr	r3, [r7, #20]
   1d6fa:	429a      	cmp	r2, r3
   1d6fc:	d100      	bne.n	1d700 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1d6fe:	e08d      	b.n	1d81c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1d700:	693b      	ldr	r3, [r7, #16]
   1d702:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d704:	68fb      	ldr	r3, [r7, #12]
   1d706:	429a      	cmp	r2, r3
   1d708:	d000      	beq.n	1d70c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1d70a:	e087      	b.n	1d81c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1d70c:	4b45      	ldr	r3, [pc, #276]	; (1d824 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1d70e:	681b      	ldr	r3, [r3, #0]
   1d710:	693a      	ldr	r2, [r7, #16]
   1d712:	429a      	cmp	r2, r3
   1d714:	d101      	bne.n	1d71a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1d716:	b672      	cpsid	i
   1d718:	e7fe      	b.n	1d718 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1d71a:	693b      	ldr	r3, [r7, #16]
   1d71c:	0018      	movs	r0, r3
   1d71e:	4b42      	ldr	r3, [pc, #264]	; (1d828 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d720:	4798      	blx	r3
   1d722:	0003      	movs	r3, r0
   1d724:	001a      	movs	r2, r3
   1d726:	4b41      	ldr	r3, [pc, #260]	; (1d82c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d728:	881b      	ldrh	r3, [r3, #0]
   1d72a:	4013      	ands	r3, r2
   1d72c:	b29b      	uxth	r3, r3
   1d72e:	2b00      	cmp	r3, #0
   1d730:	d023      	beq.n	1d77a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1d732:	693b      	ldr	r3, [r7, #16]
   1d734:	0018      	movs	r0, r3
   1d736:	4b3e      	ldr	r3, [pc, #248]	; (1d830 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d738:	4798      	blx	r3
   1d73a:	0003      	movs	r3, r0
   1d73c:	b2db      	uxtb	r3, r3
   1d73e:	001c      	movs	r4, r3
   1d740:	693b      	ldr	r3, [r7, #16]
   1d742:	0018      	movs	r0, r3
   1d744:	4b3a      	ldr	r3, [pc, #232]	; (1d830 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d746:	4798      	blx	r3
   1d748:	0003      	movs	r3, r0
   1d74a:	b2db      	uxtb	r3, r3
   1d74c:	0019      	movs	r1, r3
   1d74e:	2003      	movs	r0, #3
   1d750:	4b38      	ldr	r3, [pc, #224]	; (1d834 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1d752:	4798      	blx	r3
   1d754:	0003      	movs	r3, r0
   1d756:	0022      	movs	r2, r4
   1d758:	2103      	movs	r1, #3
   1d75a:	208f      	movs	r0, #143	; 0x8f
   1d75c:	4c36      	ldr	r4, [pc, #216]	; (1d838 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1d75e:	47a0      	blx	r4
   1d760:	693b      	ldr	r3, [r7, #16]
   1d762:	0018      	movs	r0, r3
   1d764:	4b32      	ldr	r3, [pc, #200]	; (1d830 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d766:	4798      	blx	r3
   1d768:	0003      	movs	r3, r0
   1d76a:	b2d9      	uxtb	r1, r3
   1d76c:	693b      	ldr	r3, [r7, #16]
   1d76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d770:	b2db      	uxtb	r3, r3
   1d772:	001a      	movs	r2, r3
   1d774:	2003      	movs	r0, #3
   1d776:	4b31      	ldr	r3, [pc, #196]	; (1d83c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1d778:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1d77a:	693b      	ldr	r3, [r7, #16]
   1d77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d77e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1d780:	693b      	ldr	r3, [r7, #16]
   1d782:	697a      	ldr	r2, [r7, #20]
   1d784:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d786:	693b      	ldr	r3, [r7, #16]
   1d788:	699b      	ldr	r3, [r3, #24]
   1d78a:	2b00      	cmp	r3, #0
   1d78c:	db04      	blt.n	1d798 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d78e:	697b      	ldr	r3, [r7, #20]
   1d790:	2205      	movs	r2, #5
   1d792:	1ad2      	subs	r2, r2, r3
   1d794:	693b      	ldr	r3, [r7, #16]
   1d796:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1d798:	693b      	ldr	r3, [r7, #16]
   1d79a:	6959      	ldr	r1, [r3, #20]
   1d79c:	68ba      	ldr	r2, [r7, #8]
   1d79e:	0013      	movs	r3, r2
   1d7a0:	009b      	lsls	r3, r3, #2
   1d7a2:	189b      	adds	r3, r3, r2
   1d7a4:	009b      	lsls	r3, r3, #2
   1d7a6:	4a26      	ldr	r2, [pc, #152]	; (1d840 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d7a8:	189b      	adds	r3, r3, r2
   1d7aa:	4299      	cmp	r1, r3
   1d7ac:	d101      	bne.n	1d7b2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1d7ae:	2301      	movs	r3, #1
   1d7b0:	e000      	b.n	1d7b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1d7b2:	2300      	movs	r3, #0
   1d7b4:	2b00      	cmp	r3, #0
   1d7b6:	d031      	beq.n	1d81c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d7b8:	693b      	ldr	r3, [r7, #16]
   1d7ba:	3304      	adds	r3, #4
   1d7bc:	0018      	movs	r0, r3
   1d7be:	4b21      	ldr	r3, [pc, #132]	; (1d844 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1d7c0:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1d7c2:	693b      	ldr	r3, [r7, #16]
   1d7c4:	0018      	movs	r0, r3
   1d7c6:	4b18      	ldr	r3, [pc, #96]	; (1d828 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d7c8:	4798      	blx	r3
   1d7ca:	0003      	movs	r3, r0
   1d7cc:	001a      	movs	r2, r3
   1d7ce:	4b17      	ldr	r3, [pc, #92]	; (1d82c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d7d0:	881b      	ldrh	r3, [r3, #0]
   1d7d2:	4013      	ands	r3, r2
   1d7d4:	b29b      	uxth	r3, r3
   1d7d6:	2b00      	cmp	r3, #0
   1d7d8:	d008      	beq.n	1d7ec <vTaskPriorityDisinheritAfterTimeout+0x134>
   1d7da:	693b      	ldr	r3, [r7, #16]
   1d7dc:	0018      	movs	r0, r3
   1d7de:	4b14      	ldr	r3, [pc, #80]	; (1d830 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d7e0:	4798      	blx	r3
   1d7e2:	0003      	movs	r3, r0
   1d7e4:	b2db      	uxtb	r3, r3
   1d7e6:	0018      	movs	r0, r3
   1d7e8:	4b17      	ldr	r3, [pc, #92]	; (1d848 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1d7ea:	4798      	blx	r3
   1d7ec:	693b      	ldr	r3, [r7, #16]
   1d7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d7f0:	4b16      	ldr	r3, [pc, #88]	; (1d84c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d7f2:	681b      	ldr	r3, [r3, #0]
   1d7f4:	429a      	cmp	r2, r3
   1d7f6:	d903      	bls.n	1d800 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1d7f8:	693b      	ldr	r3, [r7, #16]
   1d7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d7fc:	4b13      	ldr	r3, [pc, #76]	; (1d84c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d7fe:	601a      	str	r2, [r3, #0]
   1d800:	693b      	ldr	r3, [r7, #16]
   1d802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d804:	0013      	movs	r3, r2
   1d806:	009b      	lsls	r3, r3, #2
   1d808:	189b      	adds	r3, r3, r2
   1d80a:	009b      	lsls	r3, r3, #2
   1d80c:	4a0c      	ldr	r2, [pc, #48]	; (1d840 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d80e:	189a      	adds	r2, r3, r2
   1d810:	693b      	ldr	r3, [r7, #16]
   1d812:	3304      	adds	r3, #4
   1d814:	0019      	movs	r1, r3
   1d816:	0010      	movs	r0, r2
   1d818:	4b0d      	ldr	r3, [pc, #52]	; (1d850 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1d81a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d81c:	46c0      	nop			; (mov r8, r8)
   1d81e:	46bd      	mov	sp, r7
   1d820:	b007      	add	sp, #28
   1d822:	bd90      	pop	{r4, r7, pc}
   1d824:	200040dc 	.word	0x200040dc
   1d828:	00018661 	.word	0x00018661
   1d82c:	20000110 	.word	0x20000110
   1d830:	00018641 	.word	0x00018641
   1d834:	00019619 	.word	0x00019619
   1d838:	00019189 	.word	0x00019189
   1d83c:	00019575 	.word	0x00019575
   1d840:	200040e0 	.word	0x200040e0
   1d844:	0001a4db 	.word	0x0001a4db
   1d848:	00018e11 	.word	0x00018e11
   1d84c:	200041bc 	.word	0x200041bc
   1d850:	0001a42b 	.word	0x0001a42b

0001d854 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1d854:	b580      	push	{r7, lr}
   1d856:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1d858:	4b06      	ldr	r3, [pc, #24]	; (1d874 <pvTaskIncrementMutexHeldCount+0x20>)
   1d85a:	681b      	ldr	r3, [r3, #0]
   1d85c:	2b00      	cmp	r3, #0
   1d85e:	d004      	beq.n	1d86a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1d860:	4b04      	ldr	r3, [pc, #16]	; (1d874 <pvTaskIncrementMutexHeldCount+0x20>)
   1d862:	681b      	ldr	r3, [r3, #0]
   1d864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d866:	3201      	adds	r2, #1
   1d868:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1d86a:	4b02      	ldr	r3, [pc, #8]	; (1d874 <pvTaskIncrementMutexHeldCount+0x20>)
   1d86c:	681b      	ldr	r3, [r3, #0]
	}
   1d86e:	0018      	movs	r0, r3
   1d870:	46bd      	mov	sp, r7
   1d872:	bd80      	pop	{r7, pc}
   1d874:	200040dc 	.word	0x200040dc

0001d878 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1d878:	b580      	push	{r7, lr}
   1d87a:	b084      	sub	sp, #16
   1d87c:	af00      	add	r7, sp, #0
   1d87e:	6078      	str	r0, [r7, #4]
   1d880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1d882:	4b21      	ldr	r3, [pc, #132]	; (1d908 <prvAddCurrentTaskToDelayedList+0x90>)
   1d884:	681b      	ldr	r3, [r3, #0]
   1d886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d888:	4b20      	ldr	r3, [pc, #128]	; (1d90c <prvAddCurrentTaskToDelayedList+0x94>)
   1d88a:	681b      	ldr	r3, [r3, #0]
   1d88c:	3304      	adds	r3, #4
   1d88e:	0018      	movs	r0, r3
   1d890:	4b1f      	ldr	r3, [pc, #124]	; (1d910 <prvAddCurrentTaskToDelayedList+0x98>)
   1d892:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1d894:	687b      	ldr	r3, [r7, #4]
   1d896:	3301      	adds	r3, #1
   1d898:	d10b      	bne.n	1d8b2 <prvAddCurrentTaskToDelayedList+0x3a>
   1d89a:	683b      	ldr	r3, [r7, #0]
   1d89c:	2b00      	cmp	r3, #0
   1d89e:	d008      	beq.n	1d8b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d8a0:	4b1a      	ldr	r3, [pc, #104]	; (1d90c <prvAddCurrentTaskToDelayedList+0x94>)
   1d8a2:	681b      	ldr	r3, [r3, #0]
   1d8a4:	1d1a      	adds	r2, r3, #4
   1d8a6:	4b1b      	ldr	r3, [pc, #108]	; (1d914 <prvAddCurrentTaskToDelayedList+0x9c>)
   1d8a8:	0011      	movs	r1, r2
   1d8aa:	0018      	movs	r0, r3
   1d8ac:	4b1a      	ldr	r3, [pc, #104]	; (1d918 <prvAddCurrentTaskToDelayedList+0xa0>)
   1d8ae:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1d8b0:	e026      	b.n	1d900 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1d8b2:	68fa      	ldr	r2, [r7, #12]
   1d8b4:	687b      	ldr	r3, [r7, #4]
   1d8b6:	18d3      	adds	r3, r2, r3
   1d8b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1d8ba:	4b14      	ldr	r3, [pc, #80]	; (1d90c <prvAddCurrentTaskToDelayedList+0x94>)
   1d8bc:	681b      	ldr	r3, [r3, #0]
   1d8be:	68ba      	ldr	r2, [r7, #8]
   1d8c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1d8c2:	68ba      	ldr	r2, [r7, #8]
   1d8c4:	68fb      	ldr	r3, [r7, #12]
   1d8c6:	429a      	cmp	r2, r3
   1d8c8:	d209      	bcs.n	1d8de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d8ca:	4b14      	ldr	r3, [pc, #80]	; (1d91c <prvAddCurrentTaskToDelayedList+0xa4>)
   1d8cc:	681a      	ldr	r2, [r3, #0]
   1d8ce:	4b0f      	ldr	r3, [pc, #60]	; (1d90c <prvAddCurrentTaskToDelayedList+0x94>)
   1d8d0:	681b      	ldr	r3, [r3, #0]
   1d8d2:	3304      	adds	r3, #4
   1d8d4:	0019      	movs	r1, r3
   1d8d6:	0010      	movs	r0, r2
   1d8d8:	4b11      	ldr	r3, [pc, #68]	; (1d920 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d8da:	4798      	blx	r3
}
   1d8dc:	e010      	b.n	1d900 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d8de:	4b11      	ldr	r3, [pc, #68]	; (1d924 <prvAddCurrentTaskToDelayedList+0xac>)
   1d8e0:	681a      	ldr	r2, [r3, #0]
   1d8e2:	4b0a      	ldr	r3, [pc, #40]	; (1d90c <prvAddCurrentTaskToDelayedList+0x94>)
   1d8e4:	681b      	ldr	r3, [r3, #0]
   1d8e6:	3304      	adds	r3, #4
   1d8e8:	0019      	movs	r1, r3
   1d8ea:	0010      	movs	r0, r2
   1d8ec:	4b0c      	ldr	r3, [pc, #48]	; (1d920 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d8ee:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1d8f0:	4b0d      	ldr	r3, [pc, #52]	; (1d928 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d8f2:	681b      	ldr	r3, [r3, #0]
   1d8f4:	68ba      	ldr	r2, [r7, #8]
   1d8f6:	429a      	cmp	r2, r3
   1d8f8:	d202      	bcs.n	1d900 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1d8fa:	4b0b      	ldr	r3, [pc, #44]	; (1d928 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d8fc:	68ba      	ldr	r2, [r7, #8]
   1d8fe:	601a      	str	r2, [r3, #0]
}
   1d900:	46c0      	nop			; (mov r8, r8)
   1d902:	46bd      	mov	sp, r7
   1d904:	b004      	add	sp, #16
   1d906:	bd80      	pop	{r7, pc}
   1d908:	200041b8 	.word	0x200041b8
   1d90c:	200040dc 	.word	0x200040dc
   1d910:	0001a4db 	.word	0x0001a4db
   1d914:	200041a0 	.word	0x200041a0
   1d918:	0001a42b 	.word	0x0001a42b
   1d91c:	20004170 	.word	0x20004170
   1d920:	0001a46f 	.word	0x0001a46f
   1d924:	2000416c 	.word	0x2000416c
   1d928:	200041d4 	.word	0x200041d4

0001d92c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1d92c:	b590      	push	{r4, r7, lr}
   1d92e:	b085      	sub	sp, #20
   1d930:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1d932:	2300      	movs	r3, #0
   1d934:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1d936:	4b0e      	ldr	r3, [pc, #56]	; (1d970 <xTimerCreateTimerTask+0x44>)
   1d938:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1d93a:	4b0e      	ldr	r3, [pc, #56]	; (1d974 <xTimerCreateTimerTask+0x48>)
   1d93c:	681b      	ldr	r3, [r3, #0]
   1d93e:	2b00      	cmp	r3, #0
   1d940:	d00b      	beq.n	1d95a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1d942:	490d      	ldr	r1, [pc, #52]	; (1d978 <xTimerCreateTimerTask+0x4c>)
   1d944:	480d      	ldr	r0, [pc, #52]	; (1d97c <xTimerCreateTimerTask+0x50>)
   1d946:	4b0e      	ldr	r3, [pc, #56]	; (1d980 <xTimerCreateTimerTask+0x54>)
   1d948:	9301      	str	r3, [sp, #4]
   1d94a:	2302      	movs	r3, #2
   1d94c:	9300      	str	r3, [sp, #0]
   1d94e:	2300      	movs	r3, #0
   1d950:	2280      	movs	r2, #128	; 0x80
   1d952:	4c0c      	ldr	r4, [pc, #48]	; (1d984 <xTimerCreateTimerTask+0x58>)
   1d954:	47a0      	blx	r4
   1d956:	0003      	movs	r3, r0
   1d958:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1d95a:	687b      	ldr	r3, [r7, #4]
   1d95c:	2b00      	cmp	r3, #0
   1d95e:	d101      	bne.n	1d964 <xTimerCreateTimerTask+0x38>
   1d960:	b672      	cpsid	i
   1d962:	e7fe      	b.n	1d962 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1d964:	687b      	ldr	r3, [r7, #4]
}
   1d966:	0018      	movs	r0, r3
   1d968:	46bd      	mov	sp, r7
   1d96a:	b003      	add	sp, #12
   1d96c:	bd90      	pop	{r4, r7, pc}
   1d96e:	46c0      	nop			; (mov r8, r8)
   1d970:	0001de75 	.word	0x0001de75
   1d974:	20004210 	.word	0x20004210
   1d978:	00038ac4 	.word	0x00038ac4
   1d97c:	0001daad 	.word	0x0001daad
   1d980:	20004214 	.word	0x20004214
   1d984:	0001c2c5 	.word	0x0001c2c5

0001d988 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1d988:	b590      	push	{r4, r7, lr}
   1d98a:	b089      	sub	sp, #36	; 0x24
   1d98c:	af00      	add	r7, sp, #0
   1d98e:	60f8      	str	r0, [r7, #12]
   1d990:	60b9      	str	r1, [r7, #8]
   1d992:	607a      	str	r2, [r7, #4]
   1d994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1d996:	2300      	movs	r3, #0
   1d998:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1d99a:	68fb      	ldr	r3, [r7, #12]
   1d99c:	2b00      	cmp	r3, #0
   1d99e:	d101      	bne.n	1d9a4 <xTimerGenericCommand+0x1c>
   1d9a0:	b672      	cpsid	i
   1d9a2:	e7fe      	b.n	1d9a2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1d9a4:	4b1e      	ldr	r3, [pc, #120]	; (1da20 <xTimerGenericCommand+0x98>)
   1d9a6:	681b      	ldr	r3, [r3, #0]
   1d9a8:	2b00      	cmp	r3, #0
   1d9aa:	d033      	beq.n	1da14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1d9ac:	2310      	movs	r3, #16
   1d9ae:	18fb      	adds	r3, r7, r3
   1d9b0:	68ba      	ldr	r2, [r7, #8]
   1d9b2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1d9b4:	2310      	movs	r3, #16
   1d9b6:	18fb      	adds	r3, r7, r3
   1d9b8:	687a      	ldr	r2, [r7, #4]
   1d9ba:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1d9bc:	2310      	movs	r3, #16
   1d9be:	18fb      	adds	r3, r7, r3
   1d9c0:	68fa      	ldr	r2, [r7, #12]
   1d9c2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1d9c4:	68bb      	ldr	r3, [r7, #8]
   1d9c6:	2b05      	cmp	r3, #5
   1d9c8:	dc1a      	bgt.n	1da00 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1d9ca:	4b16      	ldr	r3, [pc, #88]	; (1da24 <xTimerGenericCommand+0x9c>)
   1d9cc:	4798      	blx	r3
   1d9ce:	0003      	movs	r3, r0
   1d9d0:	2b02      	cmp	r3, #2
   1d9d2:	d10a      	bne.n	1d9ea <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1d9d4:	4b12      	ldr	r3, [pc, #72]	; (1da20 <xTimerGenericCommand+0x98>)
   1d9d6:	6818      	ldr	r0, [r3, #0]
   1d9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d9da:	2310      	movs	r3, #16
   1d9dc:	18f9      	adds	r1, r7, r3
   1d9de:	2300      	movs	r3, #0
   1d9e0:	4c11      	ldr	r4, [pc, #68]	; (1da28 <xTimerGenericCommand+0xa0>)
   1d9e2:	47a0      	blx	r4
   1d9e4:	0003      	movs	r3, r0
   1d9e6:	61fb      	str	r3, [r7, #28]
   1d9e8:	e014      	b.n	1da14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1d9ea:	4b0d      	ldr	r3, [pc, #52]	; (1da20 <xTimerGenericCommand+0x98>)
   1d9ec:	6818      	ldr	r0, [r3, #0]
   1d9ee:	2310      	movs	r3, #16
   1d9f0:	18f9      	adds	r1, r7, r3
   1d9f2:	2300      	movs	r3, #0
   1d9f4:	2200      	movs	r2, #0
   1d9f6:	4c0c      	ldr	r4, [pc, #48]	; (1da28 <xTimerGenericCommand+0xa0>)
   1d9f8:	47a0      	blx	r4
   1d9fa:	0003      	movs	r3, r0
   1d9fc:	61fb      	str	r3, [r7, #28]
   1d9fe:	e009      	b.n	1da14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1da00:	4b07      	ldr	r3, [pc, #28]	; (1da20 <xTimerGenericCommand+0x98>)
   1da02:	6818      	ldr	r0, [r3, #0]
   1da04:	683a      	ldr	r2, [r7, #0]
   1da06:	2310      	movs	r3, #16
   1da08:	18f9      	adds	r1, r7, r3
   1da0a:	2300      	movs	r3, #0
   1da0c:	4c07      	ldr	r4, [pc, #28]	; (1da2c <xTimerGenericCommand+0xa4>)
   1da0e:	47a0      	blx	r4
   1da10:	0003      	movs	r3, r0
   1da12:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1da14:	69fb      	ldr	r3, [r7, #28]
}
   1da16:	0018      	movs	r0, r3
   1da18:	46bd      	mov	sp, r7
   1da1a:	b009      	add	sp, #36	; 0x24
   1da1c:	bd90      	pop	{r4, r7, pc}
   1da1e:	46c0      	nop			; (mov r8, r8)
   1da20:	20004210 	.word	0x20004210
   1da24:	0001d389 	.word	0x0001d389
   1da28:	0001abfd 	.word	0x0001abfd
   1da2c:	0001b05d 	.word	0x0001b05d

0001da30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1da30:	b590      	push	{r4, r7, lr}
   1da32:	b087      	sub	sp, #28
   1da34:	af02      	add	r7, sp, #8
   1da36:	6078      	str	r0, [r7, #4]
   1da38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1da3a:	4b18      	ldr	r3, [pc, #96]	; (1da9c <prvProcessExpiredTimer+0x6c>)
   1da3c:	681b      	ldr	r3, [r3, #0]
   1da3e:	68db      	ldr	r3, [r3, #12]
   1da40:	68db      	ldr	r3, [r3, #12]
   1da42:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1da44:	68fb      	ldr	r3, [r7, #12]
   1da46:	3304      	adds	r3, #4
   1da48:	0018      	movs	r0, r3
   1da4a:	4b15      	ldr	r3, [pc, #84]	; (1daa0 <prvProcessExpiredTimer+0x70>)
   1da4c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1da4e:	68fb      	ldr	r3, [r7, #12]
   1da50:	69db      	ldr	r3, [r3, #28]
   1da52:	2b01      	cmp	r3, #1
   1da54:	d119      	bne.n	1da8a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1da56:	68fb      	ldr	r3, [r7, #12]
   1da58:	699a      	ldr	r2, [r3, #24]
   1da5a:	687b      	ldr	r3, [r7, #4]
   1da5c:	18d1      	adds	r1, r2, r3
   1da5e:	687b      	ldr	r3, [r7, #4]
   1da60:	683a      	ldr	r2, [r7, #0]
   1da62:	68f8      	ldr	r0, [r7, #12]
   1da64:	4c0f      	ldr	r4, [pc, #60]	; (1daa4 <prvProcessExpiredTimer+0x74>)
   1da66:	47a0      	blx	r4
   1da68:	1e03      	subs	r3, r0, #0
   1da6a:	d00e      	beq.n	1da8a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1da6c:	687a      	ldr	r2, [r7, #4]
   1da6e:	68f8      	ldr	r0, [r7, #12]
   1da70:	2300      	movs	r3, #0
   1da72:	9300      	str	r3, [sp, #0]
   1da74:	2300      	movs	r3, #0
   1da76:	2100      	movs	r1, #0
   1da78:	4c0b      	ldr	r4, [pc, #44]	; (1daa8 <prvProcessExpiredTimer+0x78>)
   1da7a:	47a0      	blx	r4
   1da7c:	0003      	movs	r3, r0
   1da7e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1da80:	68bb      	ldr	r3, [r7, #8]
   1da82:	2b00      	cmp	r3, #0
   1da84:	d101      	bne.n	1da8a <prvProcessExpiredTimer+0x5a>
   1da86:	b672      	cpsid	i
   1da88:	e7fe      	b.n	1da88 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1da8a:	68fb      	ldr	r3, [r7, #12]
   1da8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1da8e:	68fa      	ldr	r2, [r7, #12]
   1da90:	0010      	movs	r0, r2
   1da92:	4798      	blx	r3
}
   1da94:	46c0      	nop			; (mov r8, r8)
   1da96:	46bd      	mov	sp, r7
   1da98:	b005      	add	sp, #20
   1da9a:	bd90      	pop	{r4, r7, pc}
   1da9c:	20004208 	.word	0x20004208
   1daa0:	0001a4db 	.word	0x0001a4db
   1daa4:	0001dc15 	.word	0x0001dc15
   1daa8:	0001d989 	.word	0x0001d989

0001daac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1daac:	b580      	push	{r7, lr}
   1daae:	b084      	sub	sp, #16
   1dab0:	af00      	add	r7, sp, #0
   1dab2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1dab4:	4b08      	ldr	r3, [pc, #32]	; (1dad8 <prvTimerTask+0x2c>)
   1dab6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1dab8:	2308      	movs	r3, #8
   1daba:	18fb      	adds	r3, r7, r3
   1dabc:	0018      	movs	r0, r3
   1dabe:	4b07      	ldr	r3, [pc, #28]	; (1dadc <prvTimerTask+0x30>)
   1dac0:	4798      	blx	r3
   1dac2:	0003      	movs	r3, r0
   1dac4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1dac6:	68ba      	ldr	r2, [r7, #8]
   1dac8:	68fb      	ldr	r3, [r7, #12]
   1daca:	0011      	movs	r1, r2
   1dacc:	0018      	movs	r0, r3
   1dace:	4b04      	ldr	r3, [pc, #16]	; (1dae0 <prvTimerTask+0x34>)
   1dad0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1dad2:	4b04      	ldr	r3, [pc, #16]	; (1dae4 <prvTimerTask+0x38>)
   1dad4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1dad6:	e7ef      	b.n	1dab8 <prvTimerTask+0xc>
   1dad8:	00032ce1 	.word	0x00032ce1
   1dadc:	0001db8d 	.word	0x0001db8d
   1dae0:	0001dae9 	.word	0x0001dae9
   1dae4:	0001dc9d 	.word	0x0001dc9d

0001dae8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1dae8:	b580      	push	{r7, lr}
   1daea:	b084      	sub	sp, #16
   1daec:	af00      	add	r7, sp, #0
   1daee:	6078      	str	r0, [r7, #4]
   1daf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1daf2:	4b1e      	ldr	r3, [pc, #120]	; (1db6c <prvProcessTimerOrBlockTask+0x84>)
   1daf4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1daf6:	2308      	movs	r3, #8
   1daf8:	18fb      	adds	r3, r7, r3
   1dafa:	0018      	movs	r0, r3
   1dafc:	4b1c      	ldr	r3, [pc, #112]	; (1db70 <prvProcessTimerOrBlockTask+0x88>)
   1dafe:	4798      	blx	r3
   1db00:	0003      	movs	r3, r0
   1db02:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1db04:	68bb      	ldr	r3, [r7, #8]
   1db06:	2b00      	cmp	r3, #0
   1db08:	d129      	bne.n	1db5e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1db0a:	683b      	ldr	r3, [r7, #0]
   1db0c:	2b00      	cmp	r3, #0
   1db0e:	d10c      	bne.n	1db2a <prvProcessTimerOrBlockTask+0x42>
   1db10:	687a      	ldr	r2, [r7, #4]
   1db12:	68fb      	ldr	r3, [r7, #12]
   1db14:	429a      	cmp	r2, r3
   1db16:	d808      	bhi.n	1db2a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1db18:	4b16      	ldr	r3, [pc, #88]	; (1db74 <prvProcessTimerOrBlockTask+0x8c>)
   1db1a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1db1c:	68fa      	ldr	r2, [r7, #12]
   1db1e:	687b      	ldr	r3, [r7, #4]
   1db20:	0011      	movs	r1, r2
   1db22:	0018      	movs	r0, r3
   1db24:	4b14      	ldr	r3, [pc, #80]	; (1db78 <prvProcessTimerOrBlockTask+0x90>)
   1db26:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1db28:	e01b      	b.n	1db62 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1db2a:	683b      	ldr	r3, [r7, #0]
   1db2c:	2b00      	cmp	r3, #0
   1db2e:	d006      	beq.n	1db3e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1db30:	4b12      	ldr	r3, [pc, #72]	; (1db7c <prvProcessTimerOrBlockTask+0x94>)
   1db32:	681b      	ldr	r3, [r3, #0]
   1db34:	681b      	ldr	r3, [r3, #0]
   1db36:	425a      	negs	r2, r3
   1db38:	4153      	adcs	r3, r2
   1db3a:	b2db      	uxtb	r3, r3
   1db3c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1db3e:	4b10      	ldr	r3, [pc, #64]	; (1db80 <prvProcessTimerOrBlockTask+0x98>)
   1db40:	6818      	ldr	r0, [r3, #0]
   1db42:	687a      	ldr	r2, [r7, #4]
   1db44:	68fb      	ldr	r3, [r7, #12]
   1db46:	1ad3      	subs	r3, r2, r3
   1db48:	683a      	ldr	r2, [r7, #0]
   1db4a:	0019      	movs	r1, r3
   1db4c:	4b0d      	ldr	r3, [pc, #52]	; (1db84 <prvProcessTimerOrBlockTask+0x9c>)
   1db4e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1db50:	4b08      	ldr	r3, [pc, #32]	; (1db74 <prvProcessTimerOrBlockTask+0x8c>)
   1db52:	4798      	blx	r3
   1db54:	1e03      	subs	r3, r0, #0
   1db56:	d104      	bne.n	1db62 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1db58:	4b0b      	ldr	r3, [pc, #44]	; (1db88 <prvProcessTimerOrBlockTask+0xa0>)
   1db5a:	4798      	blx	r3
}
   1db5c:	e001      	b.n	1db62 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1db5e:	4b05      	ldr	r3, [pc, #20]	; (1db74 <prvProcessTimerOrBlockTask+0x8c>)
   1db60:	4798      	blx	r3
}
   1db62:	46c0      	nop			; (mov r8, r8)
   1db64:	46bd      	mov	sp, r7
   1db66:	b004      	add	sp, #16
   1db68:	bd80      	pop	{r7, pc}
   1db6a:	46c0      	nop			; (mov r8, r8)
   1db6c:	0001c921 	.word	0x0001c921
   1db70:	0001dbcd 	.word	0x0001dbcd
   1db74:	0001c939 	.word	0x0001c939
   1db78:	0001da31 	.word	0x0001da31
   1db7c:	2000420c 	.word	0x2000420c
   1db80:	20004210 	.word	0x20004210
   1db84:	0001c0c1 	.word	0x0001c0c1
   1db88:	0001a651 	.word	0x0001a651

0001db8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1db8c:	b580      	push	{r7, lr}
   1db8e:	b084      	sub	sp, #16
   1db90:	af00      	add	r7, sp, #0
   1db92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1db94:	4b0c      	ldr	r3, [pc, #48]	; (1dbc8 <prvGetNextExpireTime+0x3c>)
   1db96:	681b      	ldr	r3, [r3, #0]
   1db98:	681b      	ldr	r3, [r3, #0]
   1db9a:	425a      	negs	r2, r3
   1db9c:	4153      	adcs	r3, r2
   1db9e:	b2db      	uxtb	r3, r3
   1dba0:	001a      	movs	r2, r3
   1dba2:	687b      	ldr	r3, [r7, #4]
   1dba4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1dba6:	687b      	ldr	r3, [r7, #4]
   1dba8:	681b      	ldr	r3, [r3, #0]
   1dbaa:	2b00      	cmp	r3, #0
   1dbac:	d105      	bne.n	1dbba <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1dbae:	4b06      	ldr	r3, [pc, #24]	; (1dbc8 <prvGetNextExpireTime+0x3c>)
   1dbb0:	681b      	ldr	r3, [r3, #0]
   1dbb2:	68db      	ldr	r3, [r3, #12]
   1dbb4:	681b      	ldr	r3, [r3, #0]
   1dbb6:	60fb      	str	r3, [r7, #12]
   1dbb8:	e001      	b.n	1dbbe <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1dbba:	2300      	movs	r3, #0
   1dbbc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1dbbe:	68fb      	ldr	r3, [r7, #12]
}
   1dbc0:	0018      	movs	r0, r3
   1dbc2:	46bd      	mov	sp, r7
   1dbc4:	b004      	add	sp, #16
   1dbc6:	bd80      	pop	{r7, pc}
   1dbc8:	20004208 	.word	0x20004208

0001dbcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1dbcc:	b580      	push	{r7, lr}
   1dbce:	b084      	sub	sp, #16
   1dbd0:	af00      	add	r7, sp, #0
   1dbd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1dbd4:	4b0c      	ldr	r3, [pc, #48]	; (1dc08 <prvSampleTimeNow+0x3c>)
   1dbd6:	4798      	blx	r3
   1dbd8:	0003      	movs	r3, r0
   1dbda:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1dbdc:	4b0b      	ldr	r3, [pc, #44]	; (1dc0c <prvSampleTimeNow+0x40>)
   1dbde:	681b      	ldr	r3, [r3, #0]
   1dbe0:	68fa      	ldr	r2, [r7, #12]
   1dbe2:	429a      	cmp	r2, r3
   1dbe4:	d205      	bcs.n	1dbf2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1dbe6:	4b0a      	ldr	r3, [pc, #40]	; (1dc10 <prvSampleTimeNow+0x44>)
   1dbe8:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1dbea:	687b      	ldr	r3, [r7, #4]
   1dbec:	2201      	movs	r2, #1
   1dbee:	601a      	str	r2, [r3, #0]
   1dbf0:	e002      	b.n	1dbf8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1dbf2:	687b      	ldr	r3, [r7, #4]
   1dbf4:	2200      	movs	r2, #0
   1dbf6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1dbf8:	4b04      	ldr	r3, [pc, #16]	; (1dc0c <prvSampleTimeNow+0x40>)
   1dbfa:	68fa      	ldr	r2, [r7, #12]
   1dbfc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1dbfe:	68fb      	ldr	r3, [r7, #12]
}
   1dc00:	0018      	movs	r0, r3
   1dc02:	46bd      	mov	sp, r7
   1dc04:	b004      	add	sp, #16
   1dc06:	bd80      	pop	{r7, pc}
   1dc08:	0001caa9 	.word	0x0001caa9
   1dc0c:	20004218 	.word	0x20004218
   1dc10:	0001ddb5 	.word	0x0001ddb5

0001dc14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1dc14:	b580      	push	{r7, lr}
   1dc16:	b086      	sub	sp, #24
   1dc18:	af00      	add	r7, sp, #0
   1dc1a:	60f8      	str	r0, [r7, #12]
   1dc1c:	60b9      	str	r1, [r7, #8]
   1dc1e:	607a      	str	r2, [r7, #4]
   1dc20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1dc22:	2300      	movs	r3, #0
   1dc24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1dc26:	68fb      	ldr	r3, [r7, #12]
   1dc28:	68ba      	ldr	r2, [r7, #8]
   1dc2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1dc2c:	68fb      	ldr	r3, [r7, #12]
   1dc2e:	68fa      	ldr	r2, [r7, #12]
   1dc30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1dc32:	68ba      	ldr	r2, [r7, #8]
   1dc34:	687b      	ldr	r3, [r7, #4]
   1dc36:	429a      	cmp	r2, r3
   1dc38:	d812      	bhi.n	1dc60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dc3a:	687a      	ldr	r2, [r7, #4]
   1dc3c:	683b      	ldr	r3, [r7, #0]
   1dc3e:	1ad2      	subs	r2, r2, r3
   1dc40:	68fb      	ldr	r3, [r7, #12]
   1dc42:	699b      	ldr	r3, [r3, #24]
   1dc44:	429a      	cmp	r2, r3
   1dc46:	d302      	bcc.n	1dc4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1dc48:	2301      	movs	r3, #1
   1dc4a:	617b      	str	r3, [r7, #20]
   1dc4c:	e01b      	b.n	1dc86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1dc4e:	4b10      	ldr	r3, [pc, #64]	; (1dc90 <prvInsertTimerInActiveList+0x7c>)
   1dc50:	681a      	ldr	r2, [r3, #0]
   1dc52:	68fb      	ldr	r3, [r7, #12]
   1dc54:	3304      	adds	r3, #4
   1dc56:	0019      	movs	r1, r3
   1dc58:	0010      	movs	r0, r2
   1dc5a:	4b0e      	ldr	r3, [pc, #56]	; (1dc94 <prvInsertTimerInActiveList+0x80>)
   1dc5c:	4798      	blx	r3
   1dc5e:	e012      	b.n	1dc86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1dc60:	687a      	ldr	r2, [r7, #4]
   1dc62:	683b      	ldr	r3, [r7, #0]
   1dc64:	429a      	cmp	r2, r3
   1dc66:	d206      	bcs.n	1dc76 <prvInsertTimerInActiveList+0x62>
   1dc68:	68ba      	ldr	r2, [r7, #8]
   1dc6a:	683b      	ldr	r3, [r7, #0]
   1dc6c:	429a      	cmp	r2, r3
   1dc6e:	d302      	bcc.n	1dc76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1dc70:	2301      	movs	r3, #1
   1dc72:	617b      	str	r3, [r7, #20]
   1dc74:	e007      	b.n	1dc86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1dc76:	4b08      	ldr	r3, [pc, #32]	; (1dc98 <prvInsertTimerInActiveList+0x84>)
   1dc78:	681a      	ldr	r2, [r3, #0]
   1dc7a:	68fb      	ldr	r3, [r7, #12]
   1dc7c:	3304      	adds	r3, #4
   1dc7e:	0019      	movs	r1, r3
   1dc80:	0010      	movs	r0, r2
   1dc82:	4b04      	ldr	r3, [pc, #16]	; (1dc94 <prvInsertTimerInActiveList+0x80>)
   1dc84:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1dc86:	697b      	ldr	r3, [r7, #20]
}
   1dc88:	0018      	movs	r0, r3
   1dc8a:	46bd      	mov	sp, r7
   1dc8c:	b006      	add	sp, #24
   1dc8e:	bd80      	pop	{r7, pc}
   1dc90:	2000420c 	.word	0x2000420c
   1dc94:	0001a46f 	.word	0x0001a46f
   1dc98:	20004208 	.word	0x20004208

0001dc9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1dc9c:	b590      	push	{r4, r7, lr}
   1dc9e:	b08b      	sub	sp, #44	; 0x2c
   1dca0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1dca2:	e068      	b.n	1dd76 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1dca4:	2308      	movs	r3, #8
   1dca6:	18fb      	adds	r3, r7, r3
   1dca8:	681b      	ldr	r3, [r3, #0]
   1dcaa:	2b00      	cmp	r3, #0
   1dcac:	db63      	blt.n	1dd76 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1dcae:	2308      	movs	r3, #8
   1dcb0:	18fb      	adds	r3, r7, r3
   1dcb2:	689b      	ldr	r3, [r3, #8]
   1dcb4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1dcb6:	69fb      	ldr	r3, [r7, #28]
   1dcb8:	695b      	ldr	r3, [r3, #20]
   1dcba:	2b00      	cmp	r3, #0
   1dcbc:	d004      	beq.n	1dcc8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1dcbe:	69fb      	ldr	r3, [r7, #28]
   1dcc0:	3304      	adds	r3, #4
   1dcc2:	0018      	movs	r0, r3
   1dcc4:	4b33      	ldr	r3, [pc, #204]	; (1dd94 <prvProcessReceivedCommands+0xf8>)
   1dcc6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1dcc8:	1d3b      	adds	r3, r7, #4
   1dcca:	0018      	movs	r0, r3
   1dccc:	4b32      	ldr	r3, [pc, #200]	; (1dd98 <prvProcessReceivedCommands+0xfc>)
   1dcce:	4798      	blx	r3
   1dcd0:	0003      	movs	r3, r0
   1dcd2:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1dcd4:	2308      	movs	r3, #8
   1dcd6:	18fb      	adds	r3, r7, r3
   1dcd8:	681b      	ldr	r3, [r3, #0]
   1dcda:	2b09      	cmp	r3, #9
   1dcdc:	d84a      	bhi.n	1dd74 <prvProcessReceivedCommands+0xd8>
   1dcde:	009a      	lsls	r2, r3, #2
   1dce0:	4b2e      	ldr	r3, [pc, #184]	; (1dd9c <prvProcessReceivedCommands+0x100>)
   1dce2:	18d3      	adds	r3, r2, r3
   1dce4:	681b      	ldr	r3, [r3, #0]
   1dce6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1dce8:	2308      	movs	r3, #8
   1dcea:	18fb      	adds	r3, r7, r3
   1dcec:	685a      	ldr	r2, [r3, #4]
   1dcee:	69fb      	ldr	r3, [r7, #28]
   1dcf0:	699b      	ldr	r3, [r3, #24]
   1dcf2:	18d1      	adds	r1, r2, r3
   1dcf4:	2308      	movs	r3, #8
   1dcf6:	18fb      	adds	r3, r7, r3
   1dcf8:	685b      	ldr	r3, [r3, #4]
   1dcfa:	69ba      	ldr	r2, [r7, #24]
   1dcfc:	69f8      	ldr	r0, [r7, #28]
   1dcfe:	4c28      	ldr	r4, [pc, #160]	; (1dda0 <prvProcessReceivedCommands+0x104>)
   1dd00:	47a0      	blx	r4
   1dd02:	1e03      	subs	r3, r0, #0
   1dd04:	d037      	beq.n	1dd76 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1dd06:	69fb      	ldr	r3, [r7, #28]
   1dd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dd0a:	69fa      	ldr	r2, [r7, #28]
   1dd0c:	0010      	movs	r0, r2
   1dd0e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1dd10:	69fb      	ldr	r3, [r7, #28]
   1dd12:	69db      	ldr	r3, [r3, #28]
   1dd14:	2b01      	cmp	r3, #1
   1dd16:	d12e      	bne.n	1dd76 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1dd18:	2308      	movs	r3, #8
   1dd1a:	18fb      	adds	r3, r7, r3
   1dd1c:	685a      	ldr	r2, [r3, #4]
   1dd1e:	69fb      	ldr	r3, [r7, #28]
   1dd20:	699b      	ldr	r3, [r3, #24]
   1dd22:	18d2      	adds	r2, r2, r3
   1dd24:	69f8      	ldr	r0, [r7, #28]
   1dd26:	2300      	movs	r3, #0
   1dd28:	9300      	str	r3, [sp, #0]
   1dd2a:	2300      	movs	r3, #0
   1dd2c:	2100      	movs	r1, #0
   1dd2e:	4c1d      	ldr	r4, [pc, #116]	; (1dda4 <prvProcessReceivedCommands+0x108>)
   1dd30:	47a0      	blx	r4
   1dd32:	0003      	movs	r3, r0
   1dd34:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1dd36:	697b      	ldr	r3, [r7, #20]
   1dd38:	2b00      	cmp	r3, #0
   1dd3a:	d11c      	bne.n	1dd76 <prvProcessReceivedCommands+0xda>
   1dd3c:	b672      	cpsid	i
   1dd3e:	e7fe      	b.n	1dd3e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1dd40:	2308      	movs	r3, #8
   1dd42:	18fb      	adds	r3, r7, r3
   1dd44:	685a      	ldr	r2, [r3, #4]
   1dd46:	69fb      	ldr	r3, [r7, #28]
   1dd48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1dd4a:	69fb      	ldr	r3, [r7, #28]
   1dd4c:	699b      	ldr	r3, [r3, #24]
   1dd4e:	2b00      	cmp	r3, #0
   1dd50:	d101      	bne.n	1dd56 <prvProcessReceivedCommands+0xba>
   1dd52:	b672      	cpsid	i
   1dd54:	e7fe      	b.n	1dd54 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1dd56:	69fb      	ldr	r3, [r7, #28]
   1dd58:	699a      	ldr	r2, [r3, #24]
   1dd5a:	69bb      	ldr	r3, [r7, #24]
   1dd5c:	18d1      	adds	r1, r2, r3
   1dd5e:	69bb      	ldr	r3, [r7, #24]
   1dd60:	69ba      	ldr	r2, [r7, #24]
   1dd62:	69f8      	ldr	r0, [r7, #28]
   1dd64:	4c0e      	ldr	r4, [pc, #56]	; (1dda0 <prvProcessReceivedCommands+0x104>)
   1dd66:	47a0      	blx	r4
					break;
   1dd68:	e005      	b.n	1dd76 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1dd6a:	69fb      	ldr	r3, [r7, #28]
   1dd6c:	0018      	movs	r0, r3
   1dd6e:	4b0e      	ldr	r3, [pc, #56]	; (1dda8 <prvProcessReceivedCommands+0x10c>)
   1dd70:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1dd72:	e000      	b.n	1dd76 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1dd74:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1dd76:	4b0d      	ldr	r3, [pc, #52]	; (1ddac <prvProcessReceivedCommands+0x110>)
   1dd78:	681b      	ldr	r3, [r3, #0]
   1dd7a:	2208      	movs	r2, #8
   1dd7c:	18b9      	adds	r1, r7, r2
   1dd7e:	2200      	movs	r2, #0
   1dd80:	0018      	movs	r0, r3
   1dd82:	4b0b      	ldr	r3, [pc, #44]	; (1ddb0 <prvProcessReceivedCommands+0x114>)
   1dd84:	4798      	blx	r3
   1dd86:	1e03      	subs	r3, r0, #0
   1dd88:	d18c      	bne.n	1dca4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1dd8a:	46c0      	nop			; (mov r8, r8)
   1dd8c:	46bd      	mov	sp, r7
   1dd8e:	b009      	add	sp, #36	; 0x24
   1dd90:	bd90      	pop	{r4, r7, pc}
   1dd92:	46c0      	nop			; (mov r8, r8)
   1dd94:	0001a4db 	.word	0x0001a4db
   1dd98:	0001dbcd 	.word	0x0001dbcd
   1dd9c:	00038acc 	.word	0x00038acc
   1dda0:	0001dc15 	.word	0x0001dc15
   1dda4:	0001d989 	.word	0x0001d989
   1dda8:	0001a865 	.word	0x0001a865
   1ddac:	20004210 	.word	0x20004210
   1ddb0:	0001b4b5 	.word	0x0001b4b5

0001ddb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1ddb4:	b590      	push	{r4, r7, lr}
   1ddb6:	b089      	sub	sp, #36	; 0x24
   1ddb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1ddba:	e03e      	b.n	1de3a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1ddbc:	4b28      	ldr	r3, [pc, #160]	; (1de60 <prvSwitchTimerLists+0xac>)
   1ddbe:	681b      	ldr	r3, [r3, #0]
   1ddc0:	68db      	ldr	r3, [r3, #12]
   1ddc2:	681b      	ldr	r3, [r3, #0]
   1ddc4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1ddc6:	4b26      	ldr	r3, [pc, #152]	; (1de60 <prvSwitchTimerLists+0xac>)
   1ddc8:	681b      	ldr	r3, [r3, #0]
   1ddca:	68db      	ldr	r3, [r3, #12]
   1ddcc:	68db      	ldr	r3, [r3, #12]
   1ddce:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1ddd0:	693b      	ldr	r3, [r7, #16]
   1ddd2:	3304      	adds	r3, #4
   1ddd4:	0018      	movs	r0, r3
   1ddd6:	4b23      	ldr	r3, [pc, #140]	; (1de64 <prvSwitchTimerLists+0xb0>)
   1ddd8:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1ddda:	693b      	ldr	r3, [r7, #16]
   1dddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ddde:	693a      	ldr	r2, [r7, #16]
   1dde0:	0010      	movs	r0, r2
   1dde2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1dde4:	693b      	ldr	r3, [r7, #16]
   1dde6:	69db      	ldr	r3, [r3, #28]
   1dde8:	2b01      	cmp	r3, #1
   1ddea:	d126      	bne.n	1de3a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1ddec:	693b      	ldr	r3, [r7, #16]
   1ddee:	699a      	ldr	r2, [r3, #24]
   1ddf0:	697b      	ldr	r3, [r7, #20]
   1ddf2:	18d3      	adds	r3, r2, r3
   1ddf4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1ddf6:	68fa      	ldr	r2, [r7, #12]
   1ddf8:	697b      	ldr	r3, [r7, #20]
   1ddfa:	429a      	cmp	r2, r3
   1ddfc:	d90e      	bls.n	1de1c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1ddfe:	693b      	ldr	r3, [r7, #16]
   1de00:	68fa      	ldr	r2, [r7, #12]
   1de02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1de04:	693b      	ldr	r3, [r7, #16]
   1de06:	693a      	ldr	r2, [r7, #16]
   1de08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1de0a:	4b15      	ldr	r3, [pc, #84]	; (1de60 <prvSwitchTimerLists+0xac>)
   1de0c:	681a      	ldr	r2, [r3, #0]
   1de0e:	693b      	ldr	r3, [r7, #16]
   1de10:	3304      	adds	r3, #4
   1de12:	0019      	movs	r1, r3
   1de14:	0010      	movs	r0, r2
   1de16:	4b14      	ldr	r3, [pc, #80]	; (1de68 <prvSwitchTimerLists+0xb4>)
   1de18:	4798      	blx	r3
   1de1a:	e00e      	b.n	1de3a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1de1c:	697a      	ldr	r2, [r7, #20]
   1de1e:	6938      	ldr	r0, [r7, #16]
   1de20:	2300      	movs	r3, #0
   1de22:	9300      	str	r3, [sp, #0]
   1de24:	2300      	movs	r3, #0
   1de26:	2100      	movs	r1, #0
   1de28:	4c10      	ldr	r4, [pc, #64]	; (1de6c <prvSwitchTimerLists+0xb8>)
   1de2a:	47a0      	blx	r4
   1de2c:	0003      	movs	r3, r0
   1de2e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1de30:	68bb      	ldr	r3, [r7, #8]
   1de32:	2b00      	cmp	r3, #0
   1de34:	d101      	bne.n	1de3a <prvSwitchTimerLists+0x86>
   1de36:	b672      	cpsid	i
   1de38:	e7fe      	b.n	1de38 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1de3a:	4b09      	ldr	r3, [pc, #36]	; (1de60 <prvSwitchTimerLists+0xac>)
   1de3c:	681b      	ldr	r3, [r3, #0]
   1de3e:	681b      	ldr	r3, [r3, #0]
   1de40:	2b00      	cmp	r3, #0
   1de42:	d1bb      	bne.n	1ddbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1de44:	4b06      	ldr	r3, [pc, #24]	; (1de60 <prvSwitchTimerLists+0xac>)
   1de46:	681b      	ldr	r3, [r3, #0]
   1de48:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1de4a:	4b09      	ldr	r3, [pc, #36]	; (1de70 <prvSwitchTimerLists+0xbc>)
   1de4c:	681a      	ldr	r2, [r3, #0]
   1de4e:	4b04      	ldr	r3, [pc, #16]	; (1de60 <prvSwitchTimerLists+0xac>)
   1de50:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1de52:	4b07      	ldr	r3, [pc, #28]	; (1de70 <prvSwitchTimerLists+0xbc>)
   1de54:	687a      	ldr	r2, [r7, #4]
   1de56:	601a      	str	r2, [r3, #0]
}
   1de58:	46c0      	nop			; (mov r8, r8)
   1de5a:	46bd      	mov	sp, r7
   1de5c:	b007      	add	sp, #28
   1de5e:	bd90      	pop	{r4, r7, pc}
   1de60:	20004208 	.word	0x20004208
   1de64:	0001a4db 	.word	0x0001a4db
   1de68:	0001a46f 	.word	0x0001a46f
   1de6c:	0001d989 	.word	0x0001d989
   1de70:	2000420c 	.word	0x2000420c

0001de74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1de74:	b580      	push	{r7, lr}
   1de76:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1de78:	4b10      	ldr	r3, [pc, #64]	; (1debc <prvCheckForValidListAndQueue+0x48>)
   1de7a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1de7c:	4b10      	ldr	r3, [pc, #64]	; (1dec0 <prvCheckForValidListAndQueue+0x4c>)
   1de7e:	681b      	ldr	r3, [r3, #0]
   1de80:	2b00      	cmp	r3, #0
   1de82:	d115      	bne.n	1deb0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1de84:	4b0f      	ldr	r3, [pc, #60]	; (1dec4 <prvCheckForValidListAndQueue+0x50>)
   1de86:	0018      	movs	r0, r3
   1de88:	4b0f      	ldr	r3, [pc, #60]	; (1dec8 <prvCheckForValidListAndQueue+0x54>)
   1de8a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1de8c:	4b0f      	ldr	r3, [pc, #60]	; (1decc <prvCheckForValidListAndQueue+0x58>)
   1de8e:	0018      	movs	r0, r3
   1de90:	4b0d      	ldr	r3, [pc, #52]	; (1dec8 <prvCheckForValidListAndQueue+0x54>)
   1de92:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1de94:	4b0e      	ldr	r3, [pc, #56]	; (1ded0 <prvCheckForValidListAndQueue+0x5c>)
   1de96:	4a0b      	ldr	r2, [pc, #44]	; (1dec4 <prvCheckForValidListAndQueue+0x50>)
   1de98:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1de9a:	4b0e      	ldr	r3, [pc, #56]	; (1ded4 <prvCheckForValidListAndQueue+0x60>)
   1de9c:	4a0b      	ldr	r2, [pc, #44]	; (1decc <prvCheckForValidListAndQueue+0x58>)
   1de9e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1dea0:	2200      	movs	r2, #0
   1dea2:	210c      	movs	r1, #12
   1dea4:	2005      	movs	r0, #5
   1dea6:	4b0c      	ldr	r3, [pc, #48]	; (1ded8 <prvCheckForValidListAndQueue+0x64>)
   1dea8:	4798      	blx	r3
   1deaa:	0002      	movs	r2, r0
   1deac:	4b04      	ldr	r3, [pc, #16]	; (1dec0 <prvCheckForValidListAndQueue+0x4c>)
   1deae:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1deb0:	4b0a      	ldr	r3, [pc, #40]	; (1dedc <prvCheckForValidListAndQueue+0x68>)
   1deb2:	4798      	blx	r3
}
   1deb4:	46c0      	nop			; (mov r8, r8)
   1deb6:	46bd      	mov	sp, r7
   1deb8:	bd80      	pop	{r7, pc}
   1deba:	46c0      	nop			; (mov r8, r8)
   1debc:	0001a669 	.word	0x0001a669
   1dec0:	20004210 	.word	0x20004210
   1dec4:	200041e0 	.word	0x200041e0
   1dec8:	0001a3d9 	.word	0x0001a3d9
   1decc:	200041f4 	.word	0x200041f4
   1ded0:	20004208 	.word	0x20004208
   1ded4:	2000420c 	.word	0x2000420c
   1ded8:	0001a955 	.word	0x0001a955
   1dedc:	0001a68d 	.word	0x0001a68d

0001dee0 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1dee0:	b580      	push	{r7, lr}
   1dee2:	b082      	sub	sp, #8
   1dee4:	af00      	add	r7, sp, #0
   1dee6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1dee8:	687b      	ldr	r3, [r7, #4]
   1deea:	7c1b      	ldrb	r3, [r3, #16]
   1deec:	2b00      	cmp	r3, #0
   1deee:	d00b      	beq.n	1df08 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1def0:	687b      	ldr	r3, [r7, #4]
   1def2:	689b      	ldr	r3, [r3, #8]
   1def4:	1c5a      	adds	r2, r3, #1
   1def6:	687b      	ldr	r3, [r7, #4]
   1def8:	68d9      	ldr	r1, [r3, #12]
   1defa:	4b10      	ldr	r3, [pc, #64]	; (1df3c <advance_pointer+0x5c>)
   1defc:	0010      	movs	r0, r2
   1defe:	4798      	blx	r3
   1df00:	000b      	movs	r3, r1
   1df02:	001a      	movs	r2, r3
   1df04:	687b      	ldr	r3, [r7, #4]
   1df06:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1df08:	687b      	ldr	r3, [r7, #4]
   1df0a:	685b      	ldr	r3, [r3, #4]
   1df0c:	1c5a      	adds	r2, r3, #1
   1df0e:	687b      	ldr	r3, [r7, #4]
   1df10:	68d9      	ldr	r1, [r3, #12]
   1df12:	4b0a      	ldr	r3, [pc, #40]	; (1df3c <advance_pointer+0x5c>)
   1df14:	0010      	movs	r0, r2
   1df16:	4798      	blx	r3
   1df18:	000b      	movs	r3, r1
   1df1a:	001a      	movs	r2, r3
   1df1c:	687b      	ldr	r3, [r7, #4]
   1df1e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1df20:	687b      	ldr	r3, [r7, #4]
   1df22:	685a      	ldr	r2, [r3, #4]
   1df24:	687b      	ldr	r3, [r7, #4]
   1df26:	689b      	ldr	r3, [r3, #8]
   1df28:	1ad3      	subs	r3, r2, r3
   1df2a:	425a      	negs	r2, r3
   1df2c:	4153      	adcs	r3, r2
   1df2e:	b2da      	uxtb	r2, r3
   1df30:	687b      	ldr	r3, [r7, #4]
   1df32:	741a      	strb	r2, [r3, #16]
 }
   1df34:	46c0      	nop			; (mov r8, r8)
   1df36:	46bd      	mov	sp, r7
   1df38:	b002      	add	sp, #8
   1df3a:	bd80      	pop	{r7, pc}
   1df3c:	00033095 	.word	0x00033095

0001df40 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1df40:	b580      	push	{r7, lr}
   1df42:	b082      	sub	sp, #8
   1df44:	af00      	add	r7, sp, #0
   1df46:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1df48:	687b      	ldr	r3, [r7, #4]
   1df4a:	2200      	movs	r2, #0
   1df4c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1df4e:	687b      	ldr	r3, [r7, #4]
   1df50:	689b      	ldr	r3, [r3, #8]
   1df52:	1c5a      	adds	r2, r3, #1
   1df54:	687b      	ldr	r3, [r7, #4]
   1df56:	68d9      	ldr	r1, [r3, #12]
   1df58:	4b05      	ldr	r3, [pc, #20]	; (1df70 <retreat_pointer+0x30>)
   1df5a:	0010      	movs	r0, r2
   1df5c:	4798      	blx	r3
   1df5e:	000b      	movs	r3, r1
   1df60:	001a      	movs	r2, r3
   1df62:	687b      	ldr	r3, [r7, #4]
   1df64:	609a      	str	r2, [r3, #8]
 }
   1df66:	46c0      	nop			; (mov r8, r8)
   1df68:	46bd      	mov	sp, r7
   1df6a:	b002      	add	sp, #8
   1df6c:	bd80      	pop	{r7, pc}
   1df6e:	46c0      	nop			; (mov r8, r8)
   1df70:	00033095 	.word	0x00033095

0001df74 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1df74:	b580      	push	{r7, lr}
   1df76:	b084      	sub	sp, #16
   1df78:	af00      	add	r7, sp, #0
   1df7a:	6078      	str	r0, [r7, #4]
   1df7c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1df7e:	2014      	movs	r0, #20
   1df80:	4b09      	ldr	r3, [pc, #36]	; (1dfa8 <circular_buf_init+0x34>)
   1df82:	4798      	blx	r3
   1df84:	0003      	movs	r3, r0
   1df86:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1df88:	68fb      	ldr	r3, [r7, #12]
   1df8a:	687a      	ldr	r2, [r7, #4]
   1df8c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1df8e:	68fb      	ldr	r3, [r7, #12]
   1df90:	683a      	ldr	r2, [r7, #0]
   1df92:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1df94:	68fb      	ldr	r3, [r7, #12]
   1df96:	0018      	movs	r0, r3
   1df98:	4b04      	ldr	r3, [pc, #16]	; (1dfac <circular_buf_init+0x38>)
   1df9a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1df9c:	68fb      	ldr	r3, [r7, #12]
 }
   1df9e:	0018      	movs	r0, r3
   1dfa0:	46bd      	mov	sp, r7
   1dfa2:	b004      	add	sp, #16
   1dfa4:	bd80      	pop	{r7, pc}
   1dfa6:	46c0      	nop			; (mov r8, r8)
   1dfa8:	00034f05 	.word	0x00034f05
   1dfac:	0001dfb1 	.word	0x0001dfb1

0001dfb0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1dfb0:	b580      	push	{r7, lr}
   1dfb2:	b082      	sub	sp, #8
   1dfb4:	af00      	add	r7, sp, #0
   1dfb6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1dfb8:	687b      	ldr	r3, [r7, #4]
   1dfba:	2200      	movs	r2, #0
   1dfbc:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1dfbe:	687b      	ldr	r3, [r7, #4]
   1dfc0:	2200      	movs	r2, #0
   1dfc2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1dfc4:	687b      	ldr	r3, [r7, #4]
   1dfc6:	2200      	movs	r2, #0
   1dfc8:	741a      	strb	r2, [r3, #16]
 }
   1dfca:	46c0      	nop			; (mov r8, r8)
   1dfcc:	46bd      	mov	sp, r7
   1dfce:	b002      	add	sp, #8
   1dfd0:	bd80      	pop	{r7, pc}
	...

0001dfd4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1dfd4:	b580      	push	{r7, lr}
   1dfd6:	b082      	sub	sp, #8
   1dfd8:	af00      	add	r7, sp, #0
   1dfda:	6078      	str	r0, [r7, #4]
   1dfdc:	000a      	movs	r2, r1
   1dfde:	1cfb      	adds	r3, r7, #3
   1dfe0:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1dfe2:	687b      	ldr	r3, [r7, #4]
   1dfe4:	681a      	ldr	r2, [r3, #0]
   1dfe6:	687b      	ldr	r3, [r7, #4]
   1dfe8:	685b      	ldr	r3, [r3, #4]
   1dfea:	18d3      	adds	r3, r2, r3
   1dfec:	1cfa      	adds	r2, r7, #3
   1dfee:	7812      	ldrb	r2, [r2, #0]
   1dff0:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1dff2:	687b      	ldr	r3, [r7, #4]
   1dff4:	0018      	movs	r0, r3
   1dff6:	4b03      	ldr	r3, [pc, #12]	; (1e004 <circular_buf_put+0x30>)
   1dff8:	4798      	blx	r3
 }
   1dffa:	46c0      	nop			; (mov r8, r8)
   1dffc:	46bd      	mov	sp, r7
   1dffe:	b002      	add	sp, #8
   1e000:	bd80      	pop	{r7, pc}
   1e002:	46c0      	nop			; (mov r8, r8)
   1e004:	0001dee1 	.word	0x0001dee1

0001e008 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1e008:	b580      	push	{r7, lr}
   1e00a:	b084      	sub	sp, #16
   1e00c:	af00      	add	r7, sp, #0
   1e00e:	6078      	str	r0, [r7, #4]
   1e010:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1e012:	2301      	movs	r3, #1
   1e014:	425b      	negs	r3, r3
   1e016:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1e018:	687b      	ldr	r3, [r7, #4]
   1e01a:	0018      	movs	r0, r3
   1e01c:	4b0d      	ldr	r3, [pc, #52]	; (1e054 <circular_buf_get+0x4c>)
   1e01e:	4798      	blx	r3
   1e020:	0003      	movs	r3, r0
   1e022:	001a      	movs	r2, r3
   1e024:	2301      	movs	r3, #1
   1e026:	4053      	eors	r3, r2
   1e028:	b2db      	uxtb	r3, r3
   1e02a:	2b00      	cmp	r3, #0
   1e02c:	d00d      	beq.n	1e04a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1e02e:	687b      	ldr	r3, [r7, #4]
   1e030:	681a      	ldr	r2, [r3, #0]
   1e032:	687b      	ldr	r3, [r7, #4]
   1e034:	689b      	ldr	r3, [r3, #8]
   1e036:	18d3      	adds	r3, r2, r3
   1e038:	781a      	ldrb	r2, [r3, #0]
   1e03a:	683b      	ldr	r3, [r7, #0]
   1e03c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1e03e:	687b      	ldr	r3, [r7, #4]
   1e040:	0018      	movs	r0, r3
   1e042:	4b05      	ldr	r3, [pc, #20]	; (1e058 <circular_buf_get+0x50>)
   1e044:	4798      	blx	r3

		 r = 0;
   1e046:	2300      	movs	r3, #0
   1e048:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1e04a:	68fb      	ldr	r3, [r7, #12]
 }
   1e04c:	0018      	movs	r0, r3
   1e04e:	46bd      	mov	sp, r7
   1e050:	b004      	add	sp, #16
   1e052:	bd80      	pop	{r7, pc}
   1e054:	0001e05d 	.word	0x0001e05d
   1e058:	0001df41 	.word	0x0001df41

0001e05c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1e05c:	b580      	push	{r7, lr}
   1e05e:	b082      	sub	sp, #8
   1e060:	af00      	add	r7, sp, #0
   1e062:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1e064:	687b      	ldr	r3, [r7, #4]
   1e066:	7c1b      	ldrb	r3, [r3, #16]
   1e068:	2201      	movs	r2, #1
   1e06a:	4053      	eors	r3, r2
   1e06c:	b2db      	uxtb	r3, r3
   1e06e:	2b00      	cmp	r3, #0
   1e070:	d007      	beq.n	1e082 <circular_buf_empty+0x26>
   1e072:	687b      	ldr	r3, [r7, #4]
   1e074:	685a      	ldr	r2, [r3, #4]
   1e076:	687b      	ldr	r3, [r7, #4]
   1e078:	689b      	ldr	r3, [r3, #8]
   1e07a:	429a      	cmp	r2, r3
   1e07c:	d101      	bne.n	1e082 <circular_buf_empty+0x26>
   1e07e:	2301      	movs	r3, #1
   1e080:	e000      	b.n	1e084 <circular_buf_empty+0x28>
   1e082:	2300      	movs	r3, #0
   1e084:	1c1a      	adds	r2, r3, #0
   1e086:	2301      	movs	r3, #1
   1e088:	4013      	ands	r3, r2
   1e08a:	b2db      	uxtb	r3, r3
 }
   1e08c:	0018      	movs	r0, r3
   1e08e:	46bd      	mov	sp, r7
   1e090:	b002      	add	sp, #8
   1e092:	bd80      	pop	{r7, pc}

0001e094 <system_interrupt_enable>:
{
   1e094:	b580      	push	{r7, lr}
   1e096:	b082      	sub	sp, #8
   1e098:	af00      	add	r7, sp, #0
   1e09a:	0002      	movs	r2, r0
   1e09c:	1dfb      	adds	r3, r7, #7
   1e09e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e0a0:	4b06      	ldr	r3, [pc, #24]	; (1e0bc <system_interrupt_enable+0x28>)
   1e0a2:	1dfa      	adds	r2, r7, #7
   1e0a4:	7812      	ldrb	r2, [r2, #0]
   1e0a6:	0011      	movs	r1, r2
   1e0a8:	221f      	movs	r2, #31
   1e0aa:	400a      	ands	r2, r1
   1e0ac:	2101      	movs	r1, #1
   1e0ae:	4091      	lsls	r1, r2
   1e0b0:	000a      	movs	r2, r1
   1e0b2:	601a      	str	r2, [r3, #0]
}
   1e0b4:	46c0      	nop			; (mov r8, r8)
   1e0b6:	46bd      	mov	sp, r7
   1e0b8:	b002      	add	sp, #8
   1e0ba:	bd80      	pop	{r7, pc}
   1e0bc:	e000e100 	.word	0xe000e100

0001e0c0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1e0c0:	b580      	push	{r7, lr}
   1e0c2:	b084      	sub	sp, #16
   1e0c4:	af00      	add	r7, sp, #0
   1e0c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1e0c8:	687b      	ldr	r3, [r7, #4]
   1e0ca:	681b      	ldr	r3, [r3, #0]
   1e0cc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1e0ce:	68fb      	ldr	r3, [r7, #12]
   1e0d0:	69db      	ldr	r3, [r3, #28]
   1e0d2:	1e5a      	subs	r2, r3, #1
   1e0d4:	4193      	sbcs	r3, r2
   1e0d6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1e0d8:	0018      	movs	r0, r3
   1e0da:	46bd      	mov	sp, r7
   1e0dc:	b004      	add	sp, #16
   1e0de:	bd80      	pop	{r7, pc}

0001e0e0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1e0e0:	b580      	push	{r7, lr}
   1e0e2:	b082      	sub	sp, #8
   1e0e4:	af00      	add	r7, sp, #0
   1e0e6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1e0e8:	46c0      	nop			; (mov r8, r8)
   1e0ea:	687b      	ldr	r3, [r7, #4]
   1e0ec:	0018      	movs	r0, r3
   1e0ee:	4b04      	ldr	r3, [pc, #16]	; (1e100 <_usart_wait_for_sync+0x20>)
   1e0f0:	4798      	blx	r3
   1e0f2:	1e03      	subs	r3, r0, #0
   1e0f4:	d1f9      	bne.n	1e0ea <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1e0f6:	46c0      	nop			; (mov r8, r8)
   1e0f8:	46bd      	mov	sp, r7
   1e0fa:	b002      	add	sp, #8
   1e0fc:	bd80      	pop	{r7, pc}
   1e0fe:	46c0      	nop			; (mov r8, r8)
   1e100:	0001e0c1 	.word	0x0001e0c1

0001e104 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1e104:	b580      	push	{r7, lr}
   1e106:	b082      	sub	sp, #8
   1e108:	af00      	add	r7, sp, #0
   1e10a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1e10c:	687b      	ldr	r3, [r7, #4]
   1e10e:	2280      	movs	r2, #128	; 0x80
   1e110:	05d2      	lsls	r2, r2, #23
   1e112:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1e114:	687b      	ldr	r3, [r7, #4]
   1e116:	2200      	movs	r2, #0
   1e118:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1e11a:	687b      	ldr	r3, [r7, #4]
   1e11c:	22ff      	movs	r2, #255	; 0xff
   1e11e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1e120:	687b      	ldr	r3, [r7, #4]
   1e122:	2200      	movs	r2, #0
   1e124:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1e126:	687b      	ldr	r3, [r7, #4]
   1e128:	2200      	movs	r2, #0
   1e12a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1e12c:	687b      	ldr	r3, [r7, #4]
   1e12e:	2296      	movs	r2, #150	; 0x96
   1e130:	0192      	lsls	r2, r2, #6
   1e132:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1e134:	687b      	ldr	r3, [r7, #4]
   1e136:	2224      	movs	r2, #36	; 0x24
   1e138:	2101      	movs	r1, #1
   1e13a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1e13c:	687b      	ldr	r3, [r7, #4]
   1e13e:	2225      	movs	r2, #37	; 0x25
   1e140:	2101      	movs	r1, #1
   1e142:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1e144:	687b      	ldr	r3, [r7, #4]
   1e146:	2226      	movs	r2, #38	; 0x26
   1e148:	2100      	movs	r1, #0
   1e14a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1e14c:	687b      	ldr	r3, [r7, #4]
   1e14e:	2227      	movs	r2, #39	; 0x27
   1e150:	2100      	movs	r1, #0
   1e152:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1e154:	687b      	ldr	r3, [r7, #4]
   1e156:	2200      	movs	r2, #0
   1e158:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1e15a:	687b      	ldr	r3, [r7, #4]
   1e15c:	2288      	movs	r2, #136	; 0x88
   1e15e:	0352      	lsls	r2, r2, #13
   1e160:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1e162:	687b      	ldr	r3, [r7, #4]
   1e164:	222c      	movs	r2, #44	; 0x2c
   1e166:	2100      	movs	r1, #0
   1e168:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1e16a:	687b      	ldr	r3, [r7, #4]
   1e16c:	222d      	movs	r2, #45	; 0x2d
   1e16e:	2100      	movs	r1, #0
   1e170:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1e172:	687b      	ldr	r3, [r7, #4]
   1e174:	2200      	movs	r2, #0
   1e176:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1e178:	687b      	ldr	r3, [r7, #4]
   1e17a:	2200      	movs	r2, #0
   1e17c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1e17e:	687b      	ldr	r3, [r7, #4]
   1e180:	2200      	movs	r2, #0
   1e182:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1e184:	687b      	ldr	r3, [r7, #4]
   1e186:	2200      	movs	r2, #0
   1e188:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1e18a:	687b      	ldr	r3, [r7, #4]
   1e18c:	2200      	movs	r2, #0
   1e18e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1e190:	687b      	ldr	r3, [r7, #4]
   1e192:	2200      	movs	r2, #0
   1e194:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1e196:	687b      	ldr	r3, [r7, #4]
   1e198:	2200      	movs	r2, #0
   1e19a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1e19c:	687b      	ldr	r3, [r7, #4]
   1e19e:	2200      	movs	r2, #0
   1e1a0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1e1a2:	687b      	ldr	r3, [r7, #4]
   1e1a4:	2200      	movs	r2, #0
   1e1a6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1e1a8:	687b      	ldr	r3, [r7, #4]
   1e1aa:	2200      	movs	r2, #0
   1e1ac:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1e1ae:	687b      	ldr	r3, [r7, #4]
   1e1b0:	2213      	movs	r2, #19
   1e1b2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1e1b4:	687b      	ldr	r3, [r7, #4]
   1e1b6:	2200      	movs	r2, #0
   1e1b8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1e1ba:	46c0      	nop			; (mov r8, r8)
   1e1bc:	46bd      	mov	sp, r7
   1e1be:	b002      	add	sp, #8
   1e1c0:	bd80      	pop	{r7, pc}
	...

0001e1c4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1e1c4:	b580      	push	{r7, lr}
   1e1c6:	b084      	sub	sp, #16
   1e1c8:	af00      	add	r7, sp, #0
   1e1ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e1cc:	687b      	ldr	r3, [r7, #4]
   1e1ce:	681b      	ldr	r3, [r3, #0]
   1e1d0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e1d2:	687b      	ldr	r3, [r7, #4]
   1e1d4:	681b      	ldr	r3, [r3, #0]
   1e1d6:	0018      	movs	r0, r3
   1e1d8:	4b09      	ldr	r3, [pc, #36]	; (1e200 <usart_enable+0x3c>)
   1e1da:	4798      	blx	r3
   1e1dc:	0003      	movs	r3, r0
   1e1de:	0018      	movs	r0, r3
   1e1e0:	4b08      	ldr	r3, [pc, #32]	; (1e204 <usart_enable+0x40>)
   1e1e2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1e1e4:	687b      	ldr	r3, [r7, #4]
   1e1e6:	0018      	movs	r0, r3
   1e1e8:	4b07      	ldr	r3, [pc, #28]	; (1e208 <usart_enable+0x44>)
   1e1ea:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1e1ec:	68fb      	ldr	r3, [r7, #12]
   1e1ee:	681b      	ldr	r3, [r3, #0]
   1e1f0:	2202      	movs	r2, #2
   1e1f2:	431a      	orrs	r2, r3
   1e1f4:	68fb      	ldr	r3, [r7, #12]
   1e1f6:	601a      	str	r2, [r3, #0]
}
   1e1f8:	46c0      	nop			; (mov r8, r8)
   1e1fa:	46bd      	mov	sp, r7
   1e1fc:	b004      	add	sp, #16
   1e1fe:	bd80      	pop	{r7, pc}
   1e200:	00027c2d 	.word	0x00027c2d
   1e204:	0001e095 	.word	0x0001e095
   1e208:	0001e0e1 	.word	0x0001e0e1

0001e20c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1e20c:	b580      	push	{r7, lr}
   1e20e:	b082      	sub	sp, #8
   1e210:	af00      	add	r7, sp, #0
   1e212:	6078      	str	r0, [r7, #4]
   1e214:	000a      	movs	r2, r1
   1e216:	1cfb      	adds	r3, r7, #3
   1e218:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1e21a:	687b      	ldr	r3, [r7, #4]
   1e21c:	2231      	movs	r2, #49	; 0x31
   1e21e:	5c9b      	ldrb	r3, [r3, r2]
   1e220:	b25a      	sxtb	r2, r3
   1e222:	1cfb      	adds	r3, r7, #3
   1e224:	781b      	ldrb	r3, [r3, #0]
   1e226:	2101      	movs	r1, #1
   1e228:	4099      	lsls	r1, r3
   1e22a:	000b      	movs	r3, r1
   1e22c:	b25b      	sxtb	r3, r3
   1e22e:	4313      	orrs	r3, r2
   1e230:	b25b      	sxtb	r3, r3
   1e232:	b2d9      	uxtb	r1, r3
   1e234:	687b      	ldr	r3, [r7, #4]
   1e236:	2231      	movs	r2, #49	; 0x31
   1e238:	5499      	strb	r1, [r3, r2]

}
   1e23a:	46c0      	nop			; (mov r8, r8)
   1e23c:	46bd      	mov	sp, r7
   1e23e:	b002      	add	sp, #8
   1e240:	bd80      	pop	{r7, pc}
	...

0001e244 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1e244:	b580      	push	{r7, lr}
   1e246:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1e248:	2380      	movs	r3, #128	; 0x80
   1e24a:	009a      	lsls	r2, r3, #2
   1e24c:	4b0f      	ldr	r3, [pc, #60]	; (1e28c <InitializeSerialConsole+0x48>)
   1e24e:	0011      	movs	r1, r2
   1e250:	0018      	movs	r0, r3
   1e252:	4b0f      	ldr	r3, [pc, #60]	; (1e290 <InitializeSerialConsole+0x4c>)
   1e254:	4798      	blx	r3
   1e256:	0002      	movs	r2, r0
   1e258:	4b0e      	ldr	r3, [pc, #56]	; (1e294 <InitializeSerialConsole+0x50>)
   1e25a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1e25c:	2380      	movs	r3, #128	; 0x80
   1e25e:	009a      	lsls	r2, r3, #2
   1e260:	4b0d      	ldr	r3, [pc, #52]	; (1e298 <InitializeSerialConsole+0x54>)
   1e262:	0011      	movs	r1, r2
   1e264:	0018      	movs	r0, r3
   1e266:	4b0a      	ldr	r3, [pc, #40]	; (1e290 <InitializeSerialConsole+0x4c>)
   1e268:	4798      	blx	r3
   1e26a:	0002      	movs	r2, r0
   1e26c:	4b0b      	ldr	r3, [pc, #44]	; (1e29c <InitializeSerialConsole+0x58>)
   1e26e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1e270:	4b0b      	ldr	r3, [pc, #44]	; (1e2a0 <InitializeSerialConsole+0x5c>)
   1e272:	4798      	blx	r3
    configure_usart_callbacks();
   1e274:	4b0b      	ldr	r3, [pc, #44]	; (1e2a4 <InitializeSerialConsole+0x60>)
   1e276:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1e278:	490b      	ldr	r1, [pc, #44]	; (1e2a8 <InitializeSerialConsole+0x64>)
   1e27a:	4b0c      	ldr	r3, [pc, #48]	; (1e2ac <InitializeSerialConsole+0x68>)
   1e27c:	2201      	movs	r2, #1
   1e27e:	0018      	movs	r0, r3
   1e280:	4b0b      	ldr	r3, [pc, #44]	; (1e2b0 <InitializeSerialConsole+0x6c>)
   1e282:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1e284:	46c0      	nop			; (mov r8, r8)
   1e286:	46bd      	mov	sp, r7
   1e288:	bd80      	pop	{r7, pc}
   1e28a:	46c0      	nop			; (mov r8, r8)
   1e28c:	2000588c 	.word	0x2000588c
   1e290:	0001df75 	.word	0x0001df75
   1e294:	20005684 	.word	0x20005684
   1e298:	2000568c 	.word	0x2000568c
   1e29c:	20005a90 	.word	0x20005a90
   1e2a0:	0001e419 	.word	0x0001e419
   1e2a4:	0001e491 	.word	0x0001e491
   1e2a8:	20005688 	.word	0x20005688
   1e2ac:	20005650 	.word	0x20005650
   1e2b0:	000294d5 	.word	0x000294d5

0001e2b4 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1e2b4:	b580      	push	{r7, lr}
   1e2b6:	b084      	sub	sp, #16
   1e2b8:	af00      	add	r7, sp, #0
   1e2ba:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e2bc:	4b1a      	ldr	r3, [pc, #104]	; (1e328 <SerialConsoleWriteString+0x74>)
   1e2be:	4798      	blx	r3
    if (string != NULL) {
   1e2c0:	687b      	ldr	r3, [r7, #4]
   1e2c2:	2b00      	cmp	r3, #0
   1e2c4:	d02a      	beq.n	1e31c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e2c6:	2300      	movs	r3, #0
   1e2c8:	60fb      	str	r3, [r7, #12]
   1e2ca:	e00b      	b.n	1e2e4 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1e2cc:	4b17      	ldr	r3, [pc, #92]	; (1e32c <SerialConsoleWriteString+0x78>)
   1e2ce:	6818      	ldr	r0, [r3, #0]
   1e2d0:	687a      	ldr	r2, [r7, #4]
   1e2d2:	68fb      	ldr	r3, [r7, #12]
   1e2d4:	18d3      	adds	r3, r2, r3
   1e2d6:	781b      	ldrb	r3, [r3, #0]
   1e2d8:	0019      	movs	r1, r3
   1e2da:	4b15      	ldr	r3, [pc, #84]	; (1e330 <SerialConsoleWriteString+0x7c>)
   1e2dc:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e2de:	68fb      	ldr	r3, [r7, #12]
   1e2e0:	3301      	adds	r3, #1
   1e2e2:	60fb      	str	r3, [r7, #12]
   1e2e4:	687b      	ldr	r3, [r7, #4]
   1e2e6:	0018      	movs	r0, r3
   1e2e8:	4b12      	ldr	r3, [pc, #72]	; (1e334 <SerialConsoleWriteString+0x80>)
   1e2ea:	4798      	blx	r3
   1e2ec:	0002      	movs	r2, r0
   1e2ee:	68fb      	ldr	r3, [r7, #12]
   1e2f0:	429a      	cmp	r2, r3
   1e2f2:	d8eb      	bhi.n	1e2cc <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1e2f4:	4b10      	ldr	r3, [pc, #64]	; (1e338 <SerialConsoleWriteString+0x84>)
   1e2f6:	2101      	movs	r1, #1
   1e2f8:	0018      	movs	r0, r3
   1e2fa:	4b10      	ldr	r3, [pc, #64]	; (1e33c <SerialConsoleWriteString+0x88>)
   1e2fc:	4798      	blx	r3
   1e2fe:	1e03      	subs	r3, r0, #0
   1e300:	d10c      	bne.n	1e31c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1e302:	4b0a      	ldr	r3, [pc, #40]	; (1e32c <SerialConsoleWriteString+0x78>)
   1e304:	681b      	ldr	r3, [r3, #0]
   1e306:	4a0e      	ldr	r2, [pc, #56]	; (1e340 <SerialConsoleWriteString+0x8c>)
   1e308:	0011      	movs	r1, r2
   1e30a:	0018      	movs	r0, r3
   1e30c:	4b0d      	ldr	r3, [pc, #52]	; (1e344 <SerialConsoleWriteString+0x90>)
   1e30e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e310:	490b      	ldr	r1, [pc, #44]	; (1e340 <SerialConsoleWriteString+0x8c>)
   1e312:	4b09      	ldr	r3, [pc, #36]	; (1e338 <SerialConsoleWriteString+0x84>)
   1e314:	2201      	movs	r2, #1
   1e316:	0018      	movs	r0, r3
   1e318:	4b0b      	ldr	r3, [pc, #44]	; (1e348 <SerialConsoleWriteString+0x94>)
   1e31a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1e31c:	4b0b      	ldr	r3, [pc, #44]	; (1e34c <SerialConsoleWriteString+0x98>)
   1e31e:	4798      	blx	r3
}
   1e320:	46c0      	nop			; (mov r8, r8)
   1e322:	46bd      	mov	sp, r7
   1e324:	b004      	add	sp, #16
   1e326:	bd80      	pop	{r7, pc}
   1e328:	0001c921 	.word	0x0001c921
   1e32c:	20005a90 	.word	0x20005a90
   1e330:	0001dfd5 	.word	0x0001dfd5
   1e334:	0003531b 	.word	0x0003531b
   1e338:	20005650 	.word	0x20005650
   1e33c:	0002951d 	.word	0x0002951d
   1e340:	20005a8c 	.word	0x20005a8c
   1e344:	0001e009 	.word	0x0001e009
   1e348:	0002948d 	.word	0x0002948d
   1e34c:	0001c939 	.word	0x0001c939

0001e350 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1e350:	b580      	push	{r7, lr}
   1e352:	b084      	sub	sp, #16
   1e354:	af00      	add	r7, sp, #0
   1e356:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e358:	4b08      	ldr	r3, [pc, #32]	; (1e37c <SerialConsoleReadCharacter+0x2c>)
   1e35a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1e35c:	4b08      	ldr	r3, [pc, #32]	; (1e380 <SerialConsoleReadCharacter+0x30>)
   1e35e:	681b      	ldr	r3, [r3, #0]
   1e360:	687a      	ldr	r2, [r7, #4]
   1e362:	0011      	movs	r1, r2
   1e364:	0018      	movs	r0, r3
   1e366:	4b07      	ldr	r3, [pc, #28]	; (1e384 <SerialConsoleReadCharacter+0x34>)
   1e368:	4798      	blx	r3
   1e36a:	0003      	movs	r3, r0
   1e36c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1e36e:	4b06      	ldr	r3, [pc, #24]	; (1e388 <SerialConsoleReadCharacter+0x38>)
   1e370:	4798      	blx	r3
    return a;
   1e372:	68fb      	ldr	r3, [r7, #12]
}
   1e374:	0018      	movs	r0, r3
   1e376:	46bd      	mov	sp, r7
   1e378:	b004      	add	sp, #16
   1e37a:	bd80      	pop	{r7, pc}
   1e37c:	0001c921 	.word	0x0001c921
   1e380:	20005684 	.word	0x20005684
   1e384:	0001e009 	.word	0x0001e009
   1e388:	0001c939 	.word	0x0001c939

0001e38c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1e38c:	b580      	push	{r7, lr}
   1e38e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1e390:	4b02      	ldr	r3, [pc, #8]	; (1e39c <getLogLevel+0x10>)
   1e392:	781b      	ldrb	r3, [r3, #0]
}
   1e394:	0018      	movs	r0, r3
   1e396:	46bd      	mov	sp, r7
   1e398:	bd80      	pop	{r7, pc}
   1e39a:	46c0      	nop			; (mov r8, r8)
   1e39c:	2000421c 	.word	0x2000421c

0001e3a0 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1e3a0:	b40e      	push	{r1, r2, r3}
   1e3a2:	b590      	push	{r4, r7, lr}
   1e3a4:	b084      	sub	sp, #16
   1e3a6:	af00      	add	r7, sp, #0
   1e3a8:	0002      	movs	r2, r0
   1e3aa:	1dfb      	adds	r3, r7, #7
   1e3ac:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1e3ae:	4b0e      	ldr	r3, [pc, #56]	; (1e3e8 <LogMessage+0x48>)
   1e3b0:	4798      	blx	r3
   1e3b2:	0003      	movs	r3, r0
   1e3b4:	001a      	movs	r2, r3
   1e3b6:	1dfb      	adds	r3, r7, #7
   1e3b8:	781b      	ldrb	r3, [r3, #0]
   1e3ba:	4293      	cmp	r3, r2
   1e3bc:	d30c      	bcc.n	1e3d8 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1e3be:	2320      	movs	r3, #32
   1e3c0:	18fb      	adds	r3, r7, r3
   1e3c2:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1e3c4:	68fb      	ldr	r3, [r7, #12]
   1e3c6:	69fa      	ldr	r2, [r7, #28]
   1e3c8:	4808      	ldr	r0, [pc, #32]	; (1e3ec <LogMessage+0x4c>)
   1e3ca:	217f      	movs	r1, #127	; 0x7f
   1e3cc:	4c08      	ldr	r4, [pc, #32]	; (1e3f0 <LogMessage+0x50>)
   1e3ce:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1e3d0:	4b06      	ldr	r3, [pc, #24]	; (1e3ec <LogMessage+0x4c>)
   1e3d2:	0018      	movs	r0, r3
   1e3d4:	4b07      	ldr	r3, [pc, #28]	; (1e3f4 <LogMessage+0x54>)
   1e3d6:	4798      	blx	r3
        va_end(ap);
    }
};
   1e3d8:	46c0      	nop			; (mov r8, r8)
   1e3da:	46bd      	mov	sp, r7
   1e3dc:	b004      	add	sp, #16
   1e3de:	bc90      	pop	{r4, r7}
   1e3e0:	bc08      	pop	{r3}
   1e3e2:	b003      	add	sp, #12
   1e3e4:	4718      	bx	r3
   1e3e6:	46c0      	nop			; (mov r8, r8)
   1e3e8:	0001e38d 	.word	0x0001e38d
   1e3ec:	200055d0 	.word	0x200055d0
   1e3f0:	00035555 	.word	0x00035555
   1e3f4:	0001e2b5 	.word	0x0001e2b5

0001e3f8 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1e3f8:	b40f      	push	{r0, r1, r2, r3}
   1e3fa:	b580      	push	{r7, lr}
   1e3fc:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1e3fe:	68bb      	ldr	r3, [r7, #8]
   1e400:	0019      	movs	r1, r3
   1e402:	2001      	movs	r0, #1
   1e404:	4b03      	ldr	r3, [pc, #12]	; (1e414 <LogMessageDebug+0x1c>)
   1e406:	4798      	blx	r3
};
   1e408:	46c0      	nop			; (mov r8, r8)
   1e40a:	46bd      	mov	sp, r7
   1e40c:	bc80      	pop	{r7}
   1e40e:	bc08      	pop	{r3}
   1e410:	b004      	add	sp, #16
   1e412:	4718      	bx	r3
   1e414:	0001e3a1 	.word	0x0001e3a1

0001e418 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1e418:	b580      	push	{r7, lr}
   1e41a:	b090      	sub	sp, #64	; 0x40
   1e41c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1e41e:	003b      	movs	r3, r7
   1e420:	0018      	movs	r0, r3
   1e422:	4b14      	ldr	r3, [pc, #80]	; (1e474 <configure_usart+0x5c>)
   1e424:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1e426:	003b      	movs	r3, r7
   1e428:	22e1      	movs	r2, #225	; 0xe1
   1e42a:	0252      	lsls	r2, r2, #9
   1e42c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1e42e:	003b      	movs	r3, r7
   1e430:	22c4      	movs	r2, #196	; 0xc4
   1e432:	0392      	lsls	r2, r2, #14
   1e434:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1e436:	003b      	movs	r3, r7
   1e438:	2201      	movs	r2, #1
   1e43a:	4252      	negs	r2, r2
   1e43c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1e43e:	003b      	movs	r3, r7
   1e440:	2201      	movs	r2, #1
   1e442:	4252      	negs	r2, r2
   1e444:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1e446:	003b      	movs	r3, r7
   1e448:	4a0b      	ldr	r2, [pc, #44]	; (1e478 <configure_usart+0x60>)
   1e44a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1e44c:	003b      	movs	r3, r7
   1e44e:	4a0b      	ldr	r2, [pc, #44]	; (1e47c <configure_usart+0x64>)
   1e450:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1e452:	46c0      	nop			; (mov r8, r8)
   1e454:	003a      	movs	r2, r7
   1e456:	490a      	ldr	r1, [pc, #40]	; (1e480 <configure_usart+0x68>)
   1e458:	4b0a      	ldr	r3, [pc, #40]	; (1e484 <configure_usart+0x6c>)
   1e45a:	0018      	movs	r0, r3
   1e45c:	4b0a      	ldr	r3, [pc, #40]	; (1e488 <configure_usart+0x70>)
   1e45e:	4798      	blx	r3
   1e460:	1e03      	subs	r3, r0, #0
   1e462:	d1f7      	bne.n	1e454 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1e464:	4b07      	ldr	r3, [pc, #28]	; (1e484 <configure_usart+0x6c>)
   1e466:	0018      	movs	r0, r3
   1e468:	4b08      	ldr	r3, [pc, #32]	; (1e48c <configure_usart+0x74>)
   1e46a:	4798      	blx	r3
}
   1e46c:	46c0      	nop			; (mov r8, r8)
   1e46e:	46bd      	mov	sp, r7
   1e470:	b010      	add	sp, #64	; 0x40
   1e472:	bd80      	pop	{r7, pc}
   1e474:	0001e105 	.word	0x0001e105
   1e478:	002a0003 	.word	0x002a0003
   1e47c:	002b0003 	.word	0x002b0003
   1e480:	42001800 	.word	0x42001800
   1e484:	20005650 	.word	0x20005650
   1e488:	00029091 	.word	0x00029091
   1e48c:	0001e1c5 	.word	0x0001e1c5

0001e490 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1e490:	b580      	push	{r7, lr}
   1e492:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1e494:	490c      	ldr	r1, [pc, #48]	; (1e4c8 <configure_usart_callbacks+0x38>)
   1e496:	4b0d      	ldr	r3, [pc, #52]	; (1e4cc <configure_usart_callbacks+0x3c>)
   1e498:	2200      	movs	r2, #0
   1e49a:	0018      	movs	r0, r3
   1e49c:	4b0c      	ldr	r3, [pc, #48]	; (1e4d0 <configure_usart_callbacks+0x40>)
   1e49e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1e4a0:	490c      	ldr	r1, [pc, #48]	; (1e4d4 <configure_usart_callbacks+0x44>)
   1e4a2:	4b0a      	ldr	r3, [pc, #40]	; (1e4cc <configure_usart_callbacks+0x3c>)
   1e4a4:	2201      	movs	r2, #1
   1e4a6:	0018      	movs	r0, r3
   1e4a8:	4b09      	ldr	r3, [pc, #36]	; (1e4d0 <configure_usart_callbacks+0x40>)
   1e4aa:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1e4ac:	4b07      	ldr	r3, [pc, #28]	; (1e4cc <configure_usart_callbacks+0x3c>)
   1e4ae:	2100      	movs	r1, #0
   1e4b0:	0018      	movs	r0, r3
   1e4b2:	4b09      	ldr	r3, [pc, #36]	; (1e4d8 <configure_usart_callbacks+0x48>)
   1e4b4:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1e4b6:	4b05      	ldr	r3, [pc, #20]	; (1e4cc <configure_usart_callbacks+0x3c>)
   1e4b8:	2101      	movs	r1, #1
   1e4ba:	0018      	movs	r0, r3
   1e4bc:	4b06      	ldr	r3, [pc, #24]	; (1e4d8 <configure_usart_callbacks+0x48>)
   1e4be:	4798      	blx	r3
}
   1e4c0:	46c0      	nop			; (mov r8, r8)
   1e4c2:	46bd      	mov	sp, r7
   1e4c4:	bd80      	pop	{r7, pc}
   1e4c6:	46c0      	nop			; (mov r8, r8)
   1e4c8:	0001e525 	.word	0x0001e525
   1e4cc:	20005650 	.word	0x20005650
   1e4d0:	00029445 	.word	0x00029445
   1e4d4:	0001e4dd 	.word	0x0001e4dd
   1e4d8:	0001e20d 	.word	0x0001e20d

0001e4dc <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1e4dc:	b580      	push	{r7, lr}
   1e4de:	b082      	sub	sp, #8
   1e4e0:	af00      	add	r7, sp, #0
   1e4e2:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1e4e4:	4b09      	ldr	r3, [pc, #36]	; (1e50c <usart_read_callback+0x30>)
   1e4e6:	681a      	ldr	r2, [r3, #0]
   1e4e8:	4b09      	ldr	r3, [pc, #36]	; (1e510 <usart_read_callback+0x34>)
   1e4ea:	781b      	ldrb	r3, [r3, #0]
   1e4ec:	0019      	movs	r1, r3
   1e4ee:	0010      	movs	r0, r2
   1e4f0:	4b08      	ldr	r3, [pc, #32]	; (1e514 <usart_read_callback+0x38>)
   1e4f2:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1e4f4:	4906      	ldr	r1, [pc, #24]	; (1e510 <usart_read_callback+0x34>)
   1e4f6:	4b08      	ldr	r3, [pc, #32]	; (1e518 <usart_read_callback+0x3c>)
   1e4f8:	2201      	movs	r2, #1
   1e4fa:	0018      	movs	r0, r3
   1e4fc:	4b07      	ldr	r3, [pc, #28]	; (1e51c <usart_read_callback+0x40>)
   1e4fe:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1e500:	4b07      	ldr	r3, [pc, #28]	; (1e520 <usart_read_callback+0x44>)
   1e502:	4798      	blx	r3
}
   1e504:	46c0      	nop			; (mov r8, r8)
   1e506:	46bd      	mov	sp, r7
   1e508:	b002      	add	sp, #8
   1e50a:	bd80      	pop	{r7, pc}
   1e50c:	20005684 	.word	0x20005684
   1e510:	20005688 	.word	0x20005688
   1e514:	0001dfd5 	.word	0x0001dfd5
   1e518:	20005650 	.word	0x20005650
   1e51c:	000294d5 	.word	0x000294d5
   1e520:	00013b7d 	.word	0x00013b7d

0001e524 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1e524:	b580      	push	{r7, lr}
   1e526:	b082      	sub	sp, #8
   1e528:	af00      	add	r7, sp, #0
   1e52a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1e52c:	4b09      	ldr	r3, [pc, #36]	; (1e554 <usart_write_callback+0x30>)
   1e52e:	681b      	ldr	r3, [r3, #0]
   1e530:	4a09      	ldr	r2, [pc, #36]	; (1e558 <usart_write_callback+0x34>)
   1e532:	0011      	movs	r1, r2
   1e534:	0018      	movs	r0, r3
   1e536:	4b09      	ldr	r3, [pc, #36]	; (1e55c <usart_write_callback+0x38>)
   1e538:	4798      	blx	r3
   1e53a:	0003      	movs	r3, r0
   1e53c:	3301      	adds	r3, #1
   1e53e:	d005      	beq.n	1e54c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e540:	4905      	ldr	r1, [pc, #20]	; (1e558 <usart_write_callback+0x34>)
   1e542:	4b07      	ldr	r3, [pc, #28]	; (1e560 <usart_write_callback+0x3c>)
   1e544:	2201      	movs	r2, #1
   1e546:	0018      	movs	r0, r3
   1e548:	4b06      	ldr	r3, [pc, #24]	; (1e564 <usart_write_callback+0x40>)
   1e54a:	4798      	blx	r3
    }
}
   1e54c:	46c0      	nop			; (mov r8, r8)
   1e54e:	46bd      	mov	sp, r7
   1e550:	b002      	add	sp, #8
   1e552:	bd80      	pop	{r7, pc}
   1e554:	20005a90 	.word	0x20005a90
   1e558:	20005a8c 	.word	0x20005a8c
   1e55c:	0001e009 	.word	0x0001e009
   1e560:	20005650 	.word	0x20005650
   1e564:	0002948d 	.word	0x0002948d

0001e568 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1e568:	b590      	push	{r4, r7, lr}
   1e56a:	b087      	sub	sp, #28
   1e56c:	af00      	add	r7, sp, #0
   1e56e:	60f8      	str	r0, [r7, #12]
   1e570:	000c      	movs	r4, r1
   1e572:	0010      	movs	r0, r2
   1e574:	0019      	movs	r1, r3
   1e576:	230a      	movs	r3, #10
   1e578:	18fb      	adds	r3, r7, r3
   1e57a:	1c22      	adds	r2, r4, #0
   1e57c:	801a      	strh	r2, [r3, #0]
   1e57e:	2308      	movs	r3, #8
   1e580:	18fb      	adds	r3, r7, r3
   1e582:	1c02      	adds	r2, r0, #0
   1e584:	801a      	strh	r2, [r3, #0]
   1e586:	1dfb      	adds	r3, r7, #7
   1e588:	1c0a      	adds	r2, r1, #0
   1e58a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1e58c:	230a      	movs	r3, #10
   1e58e:	18fb      	adds	r3, r7, r3
   1e590:	881a      	ldrh	r2, [r3, #0]
   1e592:	2308      	movs	r3, #8
   1e594:	18fb      	adds	r3, r7, r3
   1e596:	881b      	ldrh	r3, [r3, #0]
   1e598:	1ad3      	subs	r3, r2, r3
   1e59a:	3307      	adds	r3, #7
   1e59c:	2b00      	cmp	r3, #0
   1e59e:	da00      	bge.n	1e5a2 <SDMMC_UNSTUFF_BITS+0x3a>
   1e5a0:	3307      	adds	r3, #7
   1e5a2:	10db      	asrs	r3, r3, #3
   1e5a4:	3b01      	subs	r3, #1
   1e5a6:	68fa      	ldr	r2, [r7, #12]
   1e5a8:	18d3      	adds	r3, r2, r3
   1e5aa:	781b      	ldrb	r3, [r3, #0]
   1e5ac:	0019      	movs	r1, r3
   1e5ae:	2308      	movs	r3, #8
   1e5b0:	18fb      	adds	r3, r7, r3
   1e5b2:	881b      	ldrh	r3, [r3, #0]
   1e5b4:	2207      	movs	r2, #7
   1e5b6:	4013      	ands	r3, r2
   1e5b8:	4119      	asrs	r1, r3
   1e5ba:	000b      	movs	r3, r1
   1e5bc:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1e5be:	2308      	movs	r3, #8
   1e5c0:	18fb      	adds	r3, r7, r3
   1e5c2:	881b      	ldrh	r3, [r3, #0]
   1e5c4:	2207      	movs	r2, #7
   1e5c6:	401a      	ands	r2, r3
   1e5c8:	1dfb      	adds	r3, r7, #7
   1e5ca:	781b      	ldrb	r3, [r3, #0]
   1e5cc:	18d3      	adds	r3, r2, r3
   1e5ce:	2b08      	cmp	r3, #8
   1e5d0:	dd1c      	ble.n	1e60c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1e5d2:	230a      	movs	r3, #10
   1e5d4:	18fb      	adds	r3, r7, r3
   1e5d6:	881a      	ldrh	r2, [r3, #0]
   1e5d8:	2308      	movs	r3, #8
   1e5da:	18fb      	adds	r3, r7, r3
   1e5dc:	881b      	ldrh	r3, [r3, #0]
   1e5de:	1ad3      	subs	r3, r2, r3
   1e5e0:	3307      	adds	r3, #7
   1e5e2:	2b00      	cmp	r3, #0
   1e5e4:	da00      	bge.n	1e5e8 <SDMMC_UNSTUFF_BITS+0x80>
   1e5e6:	3307      	adds	r3, #7
   1e5e8:	10db      	asrs	r3, r3, #3
   1e5ea:	3b02      	subs	r3, #2
   1e5ec:	68fa      	ldr	r2, [r7, #12]
   1e5ee:	18d3      	adds	r3, r2, r3
   1e5f0:	781b      	ldrb	r3, [r3, #0]
   1e5f2:	0019      	movs	r1, r3
   1e5f4:	2308      	movs	r3, #8
   1e5f6:	18fb      	adds	r3, r7, r3
   1e5f8:	881b      	ldrh	r3, [r3, #0]
   1e5fa:	2207      	movs	r2, #7
   1e5fc:	4013      	ands	r3, r2
   1e5fe:	2208      	movs	r2, #8
   1e600:	1ad3      	subs	r3, r2, r3
   1e602:	4099      	lsls	r1, r3
   1e604:	000b      	movs	r3, r1
   1e606:	697a      	ldr	r2, [r7, #20]
   1e608:	4313      	orrs	r3, r2
   1e60a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1e60c:	2308      	movs	r3, #8
   1e60e:	18fb      	adds	r3, r7, r3
   1e610:	881b      	ldrh	r3, [r3, #0]
   1e612:	2207      	movs	r2, #7
   1e614:	401a      	ands	r2, r3
   1e616:	1dfb      	adds	r3, r7, #7
   1e618:	781b      	ldrb	r3, [r3, #0]
   1e61a:	18d3      	adds	r3, r2, r3
   1e61c:	2b10      	cmp	r3, #16
   1e61e:	dd1c      	ble.n	1e65a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1e620:	230a      	movs	r3, #10
   1e622:	18fb      	adds	r3, r7, r3
   1e624:	881a      	ldrh	r2, [r3, #0]
   1e626:	2308      	movs	r3, #8
   1e628:	18fb      	adds	r3, r7, r3
   1e62a:	881b      	ldrh	r3, [r3, #0]
   1e62c:	1ad3      	subs	r3, r2, r3
   1e62e:	3307      	adds	r3, #7
   1e630:	2b00      	cmp	r3, #0
   1e632:	da00      	bge.n	1e636 <SDMMC_UNSTUFF_BITS+0xce>
   1e634:	3307      	adds	r3, #7
   1e636:	10db      	asrs	r3, r3, #3
   1e638:	3b03      	subs	r3, #3
   1e63a:	68fa      	ldr	r2, [r7, #12]
   1e63c:	18d3      	adds	r3, r2, r3
   1e63e:	781b      	ldrb	r3, [r3, #0]
   1e640:	0019      	movs	r1, r3
   1e642:	2308      	movs	r3, #8
   1e644:	18fb      	adds	r3, r7, r3
   1e646:	881b      	ldrh	r3, [r3, #0]
   1e648:	2207      	movs	r2, #7
   1e64a:	4013      	ands	r3, r2
   1e64c:	2210      	movs	r2, #16
   1e64e:	1ad3      	subs	r3, r2, r3
   1e650:	4099      	lsls	r1, r3
   1e652:	000b      	movs	r3, r1
   1e654:	697a      	ldr	r2, [r7, #20]
   1e656:	4313      	orrs	r3, r2
   1e658:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1e65a:	2308      	movs	r3, #8
   1e65c:	18fb      	adds	r3, r7, r3
   1e65e:	881b      	ldrh	r3, [r3, #0]
   1e660:	2207      	movs	r2, #7
   1e662:	401a      	ands	r2, r3
   1e664:	1dfb      	adds	r3, r7, #7
   1e666:	781b      	ldrb	r3, [r3, #0]
   1e668:	18d3      	adds	r3, r2, r3
   1e66a:	2b10      	cmp	r3, #16
   1e66c:	dd1c      	ble.n	1e6a8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1e66e:	230a      	movs	r3, #10
   1e670:	18fb      	adds	r3, r7, r3
   1e672:	881a      	ldrh	r2, [r3, #0]
   1e674:	2308      	movs	r3, #8
   1e676:	18fb      	adds	r3, r7, r3
   1e678:	881b      	ldrh	r3, [r3, #0]
   1e67a:	1ad3      	subs	r3, r2, r3
   1e67c:	3307      	adds	r3, #7
   1e67e:	2b00      	cmp	r3, #0
   1e680:	da00      	bge.n	1e684 <SDMMC_UNSTUFF_BITS+0x11c>
   1e682:	3307      	adds	r3, #7
   1e684:	10db      	asrs	r3, r3, #3
   1e686:	3b03      	subs	r3, #3
   1e688:	68fa      	ldr	r2, [r7, #12]
   1e68a:	18d3      	adds	r3, r2, r3
   1e68c:	781b      	ldrb	r3, [r3, #0]
   1e68e:	0019      	movs	r1, r3
   1e690:	2308      	movs	r3, #8
   1e692:	18fb      	adds	r3, r7, r3
   1e694:	881b      	ldrh	r3, [r3, #0]
   1e696:	2207      	movs	r2, #7
   1e698:	4013      	ands	r3, r2
   1e69a:	2210      	movs	r2, #16
   1e69c:	1ad3      	subs	r3, r2, r3
   1e69e:	4099      	lsls	r1, r3
   1e6a0:	000b      	movs	r3, r1
   1e6a2:	697a      	ldr	r2, [r7, #20]
   1e6a4:	4313      	orrs	r3, r2
   1e6a6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1e6a8:	1dfb      	adds	r3, r7, #7
   1e6aa:	781b      	ldrb	r3, [r3, #0]
   1e6ac:	2201      	movs	r2, #1
   1e6ae:	409a      	lsls	r2, r3
   1e6b0:	0013      	movs	r3, r2
   1e6b2:	1e5a      	subs	r2, r3, #1
   1e6b4:	697b      	ldr	r3, [r7, #20]
   1e6b6:	4013      	ands	r3, r2
   1e6b8:	617b      	str	r3, [r7, #20]
	return value;
   1e6ba:	697b      	ldr	r3, [r7, #20]
}
   1e6bc:	0018      	movs	r0, r3
   1e6be:	46bd      	mov	sp, r7
   1e6c0:	b007      	add	sp, #28
   1e6c2:	bd90      	pop	{r4, r7, pc}

0001e6c4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1e6c4:	b580      	push	{r7, lr}
   1e6c6:	b082      	sub	sp, #8
   1e6c8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e6ca:	4b23      	ldr	r3, [pc, #140]	; (1e758 <mmc_spi_op_cond+0x94>)
   1e6cc:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1e6ce:	4b23      	ldr	r3, [pc, #140]	; (1e75c <mmc_spi_op_cond+0x98>)
   1e6d0:	2100      	movs	r1, #0
   1e6d2:	0018      	movs	r0, r3
   1e6d4:	4b22      	ldr	r3, [pc, #136]	; (1e760 <mmc_spi_op_cond+0x9c>)
   1e6d6:	4798      	blx	r3
   1e6d8:	0003      	movs	r3, r0
   1e6da:	001a      	movs	r2, r3
   1e6dc:	2301      	movs	r3, #1
   1e6de:	4053      	eors	r3, r2
   1e6e0:	b2db      	uxtb	r3, r3
   1e6e2:	2b00      	cmp	r3, #0
   1e6e4:	d001      	beq.n	1e6ea <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1e6e6:	2300      	movs	r3, #0
   1e6e8:	e031      	b.n	1e74e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1e6ea:	4b1e      	ldr	r3, [pc, #120]	; (1e764 <mmc_spi_op_cond+0xa0>)
   1e6ec:	4798      	blx	r3
   1e6ee:	0003      	movs	r3, r0
   1e6f0:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1e6f2:	683b      	ldr	r3, [r7, #0]
   1e6f4:	2201      	movs	r2, #1
   1e6f6:	4013      	ands	r3, r2
   1e6f8:	d006      	beq.n	1e708 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1e6fa:	687b      	ldr	r3, [r7, #4]
   1e6fc:	1e5a      	subs	r2, r3, #1
   1e6fe:	607a      	str	r2, [r7, #4]
   1e700:	2b00      	cmp	r3, #0
   1e702:	d1e4      	bne.n	1e6ce <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1e704:	2300      	movs	r3, #0
   1e706:	e022      	b.n	1e74e <mmc_spi_op_cond+0x8a>
			break;
   1e708:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e70a:	4b17      	ldr	r3, [pc, #92]	; (1e768 <mmc_spi_op_cond+0xa4>)
   1e70c:	2100      	movs	r1, #0
   1e70e:	0018      	movs	r0, r3
   1e710:	4b13      	ldr	r3, [pc, #76]	; (1e760 <mmc_spi_op_cond+0x9c>)
   1e712:	4798      	blx	r3
   1e714:	0003      	movs	r3, r0
   1e716:	001a      	movs	r2, r3
   1e718:	2301      	movs	r3, #1
   1e71a:	4053      	eors	r3, r2
   1e71c:	b2db      	uxtb	r3, r3
   1e71e:	2b00      	cmp	r3, #0
   1e720:	d001      	beq.n	1e726 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e722:	2300      	movs	r3, #0
   1e724:	e013      	b.n	1e74e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1e726:	4b0f      	ldr	r3, [pc, #60]	; (1e764 <mmc_spi_op_cond+0xa0>)
   1e728:	4798      	blx	r3
   1e72a:	0002      	movs	r2, r0
   1e72c:	23c0      	movs	r3, #192	; 0xc0
   1e72e:	05db      	lsls	r3, r3, #23
   1e730:	401a      	ands	r2, r3
   1e732:	2380      	movs	r3, #128	; 0x80
   1e734:	05db      	lsls	r3, r3, #23
   1e736:	429a      	cmp	r2, r3
   1e738:	d108      	bne.n	1e74c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e73a:	4b0c      	ldr	r3, [pc, #48]	; (1e76c <mmc_spi_op_cond+0xa8>)
   1e73c:	681a      	ldr	r2, [r3, #0]
   1e73e:	4b0b      	ldr	r3, [pc, #44]	; (1e76c <mmc_spi_op_cond+0xa8>)
   1e740:	681b      	ldr	r3, [r3, #0]
   1e742:	7adb      	ldrb	r3, [r3, #11]
   1e744:	2108      	movs	r1, #8
   1e746:	430b      	orrs	r3, r1
   1e748:	b2db      	uxtb	r3, r3
   1e74a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e74c:	2301      	movs	r3, #1
}
   1e74e:	0018      	movs	r0, r3
   1e750:	46bd      	mov	sp, r7
   1e752:	b002      	add	sp, #8
   1e754:	bd80      	pop	{r7, pc}
   1e756:	46c0      	nop			; (mov r8, r8)
   1e758:	00001bee 	.word	0x00001bee
   1e75c:	00001101 	.word	0x00001101
   1e760:	00020141 	.word	0x00020141
   1e764:	00020381 	.word	0x00020381
   1e768:	0000053a 	.word	0x0000053a
   1e76c:	20004244 	.word	0x20004244

0001e770 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1e770:	b580      	push	{r7, lr}
   1e772:	b086      	sub	sp, #24
   1e774:	af00      	add	r7, sp, #0
   1e776:	0002      	movs	r2, r0
   1e778:	1dfb      	adds	r3, r7, #7
   1e77a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e77c:	4b2e      	ldr	r3, [pc, #184]	; (1e838 <sd_spi_op_cond+0xc8>)
   1e77e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1e780:	4b2e      	ldr	r3, [pc, #184]	; (1e83c <sd_spi_op_cond+0xcc>)
   1e782:	2100      	movs	r1, #0
   1e784:	0018      	movs	r0, r3
   1e786:	4b2e      	ldr	r3, [pc, #184]	; (1e840 <sd_spi_op_cond+0xd0>)
   1e788:	4798      	blx	r3
   1e78a:	0003      	movs	r3, r0
   1e78c:	001a      	movs	r2, r3
   1e78e:	2301      	movs	r3, #1
   1e790:	4053      	eors	r3, r2
   1e792:	b2db      	uxtb	r3, r3
   1e794:	2b00      	cmp	r3, #0
   1e796:	d001      	beq.n	1e79c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1e798:	2300      	movs	r3, #0
   1e79a:	e048      	b.n	1e82e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1e79c:	2300      	movs	r3, #0
   1e79e:	617b      	str	r3, [r7, #20]
		if (v2) {
   1e7a0:	1dfb      	adds	r3, r7, #7
   1e7a2:	781b      	ldrb	r3, [r3, #0]
   1e7a4:	2b00      	cmp	r3, #0
   1e7a6:	d004      	beq.n	1e7b2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1e7a8:	697b      	ldr	r3, [r7, #20]
   1e7aa:	2280      	movs	r2, #128	; 0x80
   1e7ac:	05d2      	lsls	r2, r2, #23
   1e7ae:	4313      	orrs	r3, r2
   1e7b0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1e7b2:	697b      	ldr	r3, [r7, #20]
   1e7b4:	4a23      	ldr	r2, [pc, #140]	; (1e844 <sd_spi_op_cond+0xd4>)
   1e7b6:	0019      	movs	r1, r3
   1e7b8:	0010      	movs	r0, r2
   1e7ba:	4b21      	ldr	r3, [pc, #132]	; (1e840 <sd_spi_op_cond+0xd0>)
   1e7bc:	4798      	blx	r3
   1e7be:	0003      	movs	r3, r0
   1e7c0:	001a      	movs	r2, r3
   1e7c2:	2301      	movs	r3, #1
   1e7c4:	4053      	eors	r3, r2
   1e7c6:	b2db      	uxtb	r3, r3
   1e7c8:	2b00      	cmp	r3, #0
   1e7ca:	d001      	beq.n	1e7d0 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1e7cc:	2300      	movs	r3, #0
   1e7ce:	e02e      	b.n	1e82e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1e7d0:	4b1d      	ldr	r3, [pc, #116]	; (1e848 <sd_spi_op_cond+0xd8>)
   1e7d2:	4798      	blx	r3
   1e7d4:	0003      	movs	r3, r0
   1e7d6:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1e7d8:	68fb      	ldr	r3, [r7, #12]
   1e7da:	2201      	movs	r2, #1
   1e7dc:	4013      	ands	r3, r2
   1e7de:	d006      	beq.n	1e7ee <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1e7e0:	693b      	ldr	r3, [r7, #16]
   1e7e2:	1e5a      	subs	r2, r3, #1
   1e7e4:	613a      	str	r2, [r7, #16]
   1e7e6:	2b00      	cmp	r3, #0
   1e7e8:	d1ca      	bne.n	1e780 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1e7ea:	2300      	movs	r3, #0
   1e7ec:	e01f      	b.n	1e82e <sd_spi_op_cond+0xbe>
			break;
   1e7ee:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e7f0:	4b16      	ldr	r3, [pc, #88]	; (1e84c <sd_spi_op_cond+0xdc>)
   1e7f2:	2100      	movs	r1, #0
   1e7f4:	0018      	movs	r0, r3
   1e7f6:	4b12      	ldr	r3, [pc, #72]	; (1e840 <sd_spi_op_cond+0xd0>)
   1e7f8:	4798      	blx	r3
   1e7fa:	0003      	movs	r3, r0
   1e7fc:	001a      	movs	r2, r3
   1e7fe:	2301      	movs	r3, #1
   1e800:	4053      	eors	r3, r2
   1e802:	b2db      	uxtb	r3, r3
   1e804:	2b00      	cmp	r3, #0
   1e806:	d001      	beq.n	1e80c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e808:	2300      	movs	r3, #0
   1e80a:	e010      	b.n	1e82e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1e80c:	4b0e      	ldr	r3, [pc, #56]	; (1e848 <sd_spi_op_cond+0xd8>)
   1e80e:	4798      	blx	r3
   1e810:	0002      	movs	r2, r0
   1e812:	2380      	movs	r3, #128	; 0x80
   1e814:	05db      	lsls	r3, r3, #23
   1e816:	4013      	ands	r3, r2
   1e818:	d008      	beq.n	1e82c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e81a:	4b0d      	ldr	r3, [pc, #52]	; (1e850 <sd_spi_op_cond+0xe0>)
   1e81c:	681a      	ldr	r2, [r3, #0]
   1e81e:	4b0c      	ldr	r3, [pc, #48]	; (1e850 <sd_spi_op_cond+0xe0>)
   1e820:	681b      	ldr	r3, [r3, #0]
   1e822:	7adb      	ldrb	r3, [r3, #11]
   1e824:	2108      	movs	r1, #8
   1e826:	430b      	orrs	r3, r1
   1e828:	b2db      	uxtb	r3, r3
   1e82a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e82c:	2301      	movs	r3, #1
}
   1e82e:	0018      	movs	r0, r3
   1e830:	46bd      	mov	sp, r7
   1e832:	b006      	add	sp, #24
   1e834:	bd80      	pop	{r7, pc}
   1e836:	46c0      	nop			; (mov r8, r8)
   1e838:	00001bee 	.word	0x00001bee
   1e83c:	00001137 	.word	0x00001137
   1e840:	00020141 	.word	0x00020141
   1e844:	00001129 	.word	0x00001129
   1e848:	00020381 	.word	0x00020381
   1e84c:	0000053a 	.word	0x0000053a
   1e850:	20004244 	.word	0x20004244

0001e854 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1e854:	b580      	push	{r7, lr}
   1e856:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1e858:	2301      	movs	r3, #1
}
   1e85a:	0018      	movs	r0, r3
   1e85c:	46bd      	mov	sp, r7
   1e85e:	bd80      	pop	{r7, pc}

0001e860 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1e860:	b580      	push	{r7, lr}
   1e862:	b084      	sub	sp, #16
   1e864:	af00      	add	r7, sp, #0
   1e866:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1e868:	687b      	ldr	r3, [r7, #4]
   1e86a:	2200      	movs	r2, #0
   1e86c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1e86e:	23d5      	movs	r3, #213	; 0xd5
   1e870:	005b      	lsls	r3, r3, #1
   1e872:	4a14      	ldr	r2, [pc, #80]	; (1e8c4 <sd_cmd8+0x64>)
   1e874:	0019      	movs	r1, r3
   1e876:	0010      	movs	r0, r2
   1e878:	4b13      	ldr	r3, [pc, #76]	; (1e8c8 <sd_cmd8+0x68>)
   1e87a:	4798      	blx	r3
   1e87c:	0003      	movs	r3, r0
   1e87e:	001a      	movs	r2, r3
   1e880:	2301      	movs	r3, #1
   1e882:	4053      	eors	r3, r2
   1e884:	b2db      	uxtb	r3, r3
   1e886:	2b00      	cmp	r3, #0
   1e888:	d001      	beq.n	1e88e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1e88a:	2301      	movs	r3, #1
   1e88c:	e015      	b.n	1e8ba <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1e88e:	4b0f      	ldr	r3, [pc, #60]	; (1e8cc <sd_cmd8+0x6c>)
   1e890:	4798      	blx	r3
   1e892:	0003      	movs	r3, r0
   1e894:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1e896:	68fb      	ldr	r3, [r7, #12]
   1e898:	3301      	adds	r3, #1
   1e89a:	d101      	bne.n	1e8a0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1e89c:	2301      	movs	r3, #1
   1e89e:	e00c      	b.n	1e8ba <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1e8a0:	68fb      	ldr	r3, [r7, #12]
   1e8a2:	051b      	lsls	r3, r3, #20
   1e8a4:	0d1a      	lsrs	r2, r3, #20
   1e8a6:	23d5      	movs	r3, #213	; 0xd5
   1e8a8:	005b      	lsls	r3, r3, #1
   1e8aa:	429a      	cmp	r2, r3
   1e8ac:	d001      	beq.n	1e8b2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1e8ae:	2300      	movs	r3, #0
   1e8b0:	e003      	b.n	1e8ba <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1e8b2:	687b      	ldr	r3, [r7, #4]
   1e8b4:	2201      	movs	r2, #1
   1e8b6:	701a      	strb	r2, [r3, #0]
	return true;
   1e8b8:	2301      	movs	r3, #1
}
   1e8ba:	0018      	movs	r0, r3
   1e8bc:	46bd      	mov	sp, r7
   1e8be:	b004      	add	sp, #16
   1e8c0:	bd80      	pop	{r7, pc}
   1e8c2:	46c0      	nop			; (mov r8, r8)
   1e8c4:	00005508 	.word	0x00005508
   1e8c8:	00020141 	.word	0x00020141
   1e8cc:	00020381 	.word	0x00020381

0001e8d0 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1e8d0:	b590      	push	{r4, r7, lr}
   1e8d2:	b089      	sub	sp, #36	; 0x24
   1e8d4:	af02      	add	r7, sp, #8
   1e8d6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1e8d8:	2380      	movs	r3, #128	; 0x80
   1e8da:	009a      	lsls	r2, r3, #2
   1e8dc:	4841      	ldr	r0, [pc, #260]	; (1e9e4 <mmc_cmd8+0x114>)
   1e8de:	2300      	movs	r3, #0
   1e8e0:	9300      	str	r3, [sp, #0]
   1e8e2:	2301      	movs	r3, #1
   1e8e4:	2100      	movs	r1, #0
   1e8e6:	4c40      	ldr	r4, [pc, #256]	; (1e9e8 <mmc_cmd8+0x118>)
   1e8e8:	47a0      	blx	r4
   1e8ea:	0003      	movs	r3, r0
   1e8ec:	001a      	movs	r2, r3
   1e8ee:	2301      	movs	r3, #1
   1e8f0:	4053      	eors	r3, r2
   1e8f2:	b2db      	uxtb	r3, r3
   1e8f4:	2b00      	cmp	r3, #0
   1e8f6:	d001      	beq.n	1e8fc <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1e8f8:	2300      	movs	r3, #0
   1e8fa:	e06e      	b.n	1e9da <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e8fc:	2316      	movs	r3, #22
   1e8fe:	18fb      	adds	r3, r7, r3
   1e900:	2200      	movs	r2, #0
   1e902:	801a      	strh	r2, [r3, #0]
   1e904:	e014      	b.n	1e930 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1e906:	2310      	movs	r3, #16
   1e908:	18fb      	adds	r3, r7, r3
   1e90a:	0018      	movs	r0, r3
   1e90c:	4b37      	ldr	r3, [pc, #220]	; (1e9ec <mmc_cmd8+0x11c>)
   1e90e:	4798      	blx	r3
   1e910:	0003      	movs	r3, r0
   1e912:	001a      	movs	r2, r3
   1e914:	2301      	movs	r3, #1
   1e916:	4053      	eors	r3, r2
   1e918:	b2db      	uxtb	r3, r3
   1e91a:	2b00      	cmp	r3, #0
   1e91c:	d001      	beq.n	1e922 <mmc_cmd8+0x52>
			return false;
   1e91e:	2300      	movs	r3, #0
   1e920:	e05b      	b.n	1e9da <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e922:	2316      	movs	r3, #22
   1e924:	18fb      	adds	r3, r7, r3
   1e926:	881a      	ldrh	r2, [r3, #0]
   1e928:	2316      	movs	r3, #22
   1e92a:	18fb      	adds	r3, r7, r3
   1e92c:	3201      	adds	r2, #1
   1e92e:	801a      	strh	r2, [r3, #0]
   1e930:	2316      	movs	r3, #22
   1e932:	18fb      	adds	r3, r7, r3
   1e934:	881b      	ldrh	r3, [r3, #0]
   1e936:	2b31      	cmp	r3, #49	; 0x31
   1e938:	d9e5      	bls.n	1e906 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1e93a:	693b      	ldr	r3, [r7, #16]
   1e93c:	b2db      	uxtb	r3, r3
   1e93e:	2202      	movs	r2, #2
   1e940:	4013      	ands	r3, r2
   1e942:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1e944:	687b      	ldr	r3, [r7, #4]
   1e946:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1e948:	4b29      	ldr	r3, [pc, #164]	; (1e9f0 <mmc_cmd8+0x120>)
   1e94a:	681b      	ldr	r3, [r3, #0]
   1e94c:	330e      	adds	r3, #14
   1e94e:	0018      	movs	r0, r3
   1e950:	230c      	movs	r3, #12
   1e952:	223e      	movs	r2, #62	; 0x3e
   1e954:	2180      	movs	r1, #128	; 0x80
   1e956:	4c27      	ldr	r4, [pc, #156]	; (1e9f4 <mmc_cmd8+0x124>)
   1e958:	47a0      	blx	r4
   1e95a:	0002      	movs	r2, r0
   1e95c:	4b26      	ldr	r3, [pc, #152]	; (1e9f8 <mmc_cmd8+0x128>)
   1e95e:	429a      	cmp	r2, r3
   1e960:	d135      	bne.n	1e9ce <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e962:	e014      	b.n	1e98e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1e964:	230c      	movs	r3, #12
   1e966:	18fb      	adds	r3, r7, r3
   1e968:	0018      	movs	r0, r3
   1e96a:	4b20      	ldr	r3, [pc, #128]	; (1e9ec <mmc_cmd8+0x11c>)
   1e96c:	4798      	blx	r3
   1e96e:	0003      	movs	r3, r0
   1e970:	001a      	movs	r2, r3
   1e972:	2301      	movs	r3, #1
   1e974:	4053      	eors	r3, r2
   1e976:	b2db      	uxtb	r3, r3
   1e978:	2b00      	cmp	r3, #0
   1e97a:	d001      	beq.n	1e980 <mmc_cmd8+0xb0>
				return false;
   1e97c:	2300      	movs	r3, #0
   1e97e:	e02c      	b.n	1e9da <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e980:	2316      	movs	r3, #22
   1e982:	18fb      	adds	r3, r7, r3
   1e984:	881a      	ldrh	r2, [r3, #0]
   1e986:	2316      	movs	r3, #22
   1e988:	18fb      	adds	r3, r7, r3
   1e98a:	3201      	adds	r2, #1
   1e98c:	801a      	strh	r2, [r3, #0]
   1e98e:	2316      	movs	r3, #22
   1e990:	18fb      	adds	r3, r7, r3
   1e992:	881b      	ldrh	r3, [r3, #0]
   1e994:	2b35      	cmp	r3, #53	; 0x35
   1e996:	d9e5      	bls.n	1e964 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1e998:	4b15      	ldr	r3, [pc, #84]	; (1e9f0 <mmc_cmd8+0x120>)
   1e99a:	681b      	ldr	r3, [r3, #0]
   1e99c:	68fa      	ldr	r2, [r7, #12]
   1e99e:	0852      	lsrs	r2, r2, #1
   1e9a0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e9a2:	e014      	b.n	1e9ce <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1e9a4:	230c      	movs	r3, #12
   1e9a6:	18fb      	adds	r3, r7, r3
   1e9a8:	0018      	movs	r0, r3
   1e9aa:	4b10      	ldr	r3, [pc, #64]	; (1e9ec <mmc_cmd8+0x11c>)
   1e9ac:	4798      	blx	r3
   1e9ae:	0003      	movs	r3, r0
   1e9b0:	001a      	movs	r2, r3
   1e9b2:	2301      	movs	r3, #1
   1e9b4:	4053      	eors	r3, r2
   1e9b6:	b2db      	uxtb	r3, r3
   1e9b8:	2b00      	cmp	r3, #0
   1e9ba:	d001      	beq.n	1e9c0 <mmc_cmd8+0xf0>
			return false;
   1e9bc:	2300      	movs	r3, #0
   1e9be:	e00c      	b.n	1e9da <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e9c0:	2316      	movs	r3, #22
   1e9c2:	18fb      	adds	r3, r7, r3
   1e9c4:	881a      	ldrh	r2, [r3, #0]
   1e9c6:	2316      	movs	r3, #22
   1e9c8:	18fb      	adds	r3, r7, r3
   1e9ca:	3201      	adds	r2, #1
   1e9cc:	801a      	strh	r2, [r3, #0]
   1e9ce:	2316      	movs	r3, #22
   1e9d0:	18fb      	adds	r3, r7, r3
   1e9d2:	881b      	ldrh	r3, [r3, #0]
   1e9d4:	2b7f      	cmp	r3, #127	; 0x7f
   1e9d6:	d9e5      	bls.n	1e9a4 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1e9d8:	2301      	movs	r3, #1
}
   1e9da:	0018      	movs	r0, r3
   1e9dc:	46bd      	mov	sp, r7
   1e9de:	b007      	add	sp, #28
   1e9e0:	bd90      	pop	{r4, r7, pc}
   1e9e2:	46c0      	nop			; (mov r8, r8)
   1e9e4:	00081108 	.word	0x00081108
   1e9e8:	00020169 	.word	0x00020169
   1e9ec:	00020395 	.word	0x00020395
   1e9f0:	20004244 	.word	0x20004244
   1e9f4:	0001e569 	.word	0x0001e569
   1e9f8:	00000fff 	.word	0x00000fff

0001e9fc <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1e9fc:	b590      	push	{r4, r7, lr}
   1e9fe:	b083      	sub	sp, #12
   1ea00:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1ea02:	4b15      	ldr	r3, [pc, #84]	; (1ea58 <sd_mmc_cmd9_spi+0x5c>)
   1ea04:	681b      	ldr	r3, [r3, #0]
   1ea06:	891b      	ldrh	r3, [r3, #8]
   1ea08:	0419      	lsls	r1, r3, #16
   1ea0a:	4814      	ldr	r0, [pc, #80]	; (1ea5c <sd_mmc_cmd9_spi+0x60>)
   1ea0c:	2301      	movs	r3, #1
   1ea0e:	9300      	str	r3, [sp, #0]
   1ea10:	2301      	movs	r3, #1
   1ea12:	2210      	movs	r2, #16
   1ea14:	4c12      	ldr	r4, [pc, #72]	; (1ea60 <sd_mmc_cmd9_spi+0x64>)
   1ea16:	47a0      	blx	r4
   1ea18:	0003      	movs	r3, r0
   1ea1a:	001a      	movs	r2, r3
   1ea1c:	2301      	movs	r3, #1
   1ea1e:	4053      	eors	r3, r2
   1ea20:	b2db      	uxtb	r3, r3
   1ea22:	2b00      	cmp	r3, #0
   1ea24:	d001      	beq.n	1ea2a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1ea26:	2300      	movs	r3, #0
   1ea28:	e012      	b.n	1ea50 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1ea2a:	4b0b      	ldr	r3, [pc, #44]	; (1ea58 <sd_mmc_cmd9_spi+0x5c>)
   1ea2c:	681b      	ldr	r3, [r3, #0]
   1ea2e:	330e      	adds	r3, #14
   1ea30:	2101      	movs	r1, #1
   1ea32:	0018      	movs	r0, r3
   1ea34:	4b0b      	ldr	r3, [pc, #44]	; (1ea64 <sd_mmc_cmd9_spi+0x68>)
   1ea36:	4798      	blx	r3
   1ea38:	0003      	movs	r3, r0
   1ea3a:	001a      	movs	r2, r3
   1ea3c:	2301      	movs	r3, #1
   1ea3e:	4053      	eors	r3, r2
   1ea40:	b2db      	uxtb	r3, r3
   1ea42:	2b00      	cmp	r3, #0
   1ea44:	d001      	beq.n	1ea4a <sd_mmc_cmd9_spi+0x4e>
		return false;
   1ea46:	2300      	movs	r3, #0
   1ea48:	e002      	b.n	1ea50 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1ea4a:	4b07      	ldr	r3, [pc, #28]	; (1ea68 <sd_mmc_cmd9_spi+0x6c>)
   1ea4c:	4798      	blx	r3
   1ea4e:	0003      	movs	r3, r0
}
   1ea50:	0018      	movs	r0, r3
   1ea52:	46bd      	mov	sp, r7
   1ea54:	b001      	add	sp, #4
   1ea56:	bd90      	pop	{r4, r7, pc}
   1ea58:	20004244 	.word	0x20004244
   1ea5c:	00081109 	.word	0x00081109
   1ea60:	00020169 	.word	0x00020169
   1ea64:	00020439 	.word	0x00020439
   1ea68:	000204dd 	.word	0x000204dd

0001ea6c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1ea6c:	b5b0      	push	{r4, r5, r7, lr}
   1ea6e:	b084      	sub	sp, #16
   1ea70:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1ea72:	4b45      	ldr	r3, [pc, #276]	; (1eb88 <mmc_decode_csd+0x11c>)
   1ea74:	681b      	ldr	r3, [r3, #0]
   1ea76:	330e      	adds	r3, #14
   1ea78:	0018      	movs	r0, r3
   1ea7a:	2304      	movs	r3, #4
   1ea7c:	227a      	movs	r2, #122	; 0x7a
   1ea7e:	2180      	movs	r1, #128	; 0x80
   1ea80:	4c42      	ldr	r4, [pc, #264]	; (1eb8c <mmc_decode_csd+0x120>)
   1ea82:	47a0      	blx	r4
   1ea84:	0003      	movs	r3, r0
   1ea86:	2b02      	cmp	r3, #2
   1ea88:	d011      	beq.n	1eaae <mmc_decode_csd+0x42>
   1ea8a:	d802      	bhi.n	1ea92 <mmc_decode_csd+0x26>
   1ea8c:	2b01      	cmp	r3, #1
   1ea8e:	d009      	beq.n	1eaa4 <mmc_decode_csd+0x38>
   1ea90:	e003      	b.n	1ea9a <mmc_decode_csd+0x2e>
   1ea92:	2b03      	cmp	r3, #3
   1ea94:	d010      	beq.n	1eab8 <mmc_decode_csd+0x4c>
   1ea96:	2b04      	cmp	r3, #4
   1ea98:	d013      	beq.n	1eac2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1ea9a:	4b3b      	ldr	r3, [pc, #236]	; (1eb88 <mmc_decode_csd+0x11c>)
   1ea9c:	681b      	ldr	r3, [r3, #0]
   1ea9e:	2212      	movs	r2, #18
   1eaa0:	731a      	strb	r2, [r3, #12]
		break;
   1eaa2:	e013      	b.n	1eacc <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1eaa4:	4b38      	ldr	r3, [pc, #224]	; (1eb88 <mmc_decode_csd+0x11c>)
   1eaa6:	681b      	ldr	r3, [r3, #0]
   1eaa8:	2214      	movs	r2, #20
   1eaaa:	731a      	strb	r2, [r3, #12]
		break;
   1eaac:	e00e      	b.n	1eacc <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1eaae:	4b36      	ldr	r3, [pc, #216]	; (1eb88 <mmc_decode_csd+0x11c>)
   1eab0:	681b      	ldr	r3, [r3, #0]
   1eab2:	2222      	movs	r2, #34	; 0x22
   1eab4:	731a      	strb	r2, [r3, #12]
		break;
   1eab6:	e009      	b.n	1eacc <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1eab8:	4b33      	ldr	r3, [pc, #204]	; (1eb88 <mmc_decode_csd+0x11c>)
   1eaba:	681b      	ldr	r3, [r3, #0]
   1eabc:	2230      	movs	r2, #48	; 0x30
   1eabe:	731a      	strb	r2, [r3, #12]
		break;
   1eac0:	e004      	b.n	1eacc <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1eac2:	4b31      	ldr	r3, [pc, #196]	; (1eb88 <mmc_decode_csd+0x11c>)
   1eac4:	681b      	ldr	r3, [r3, #0]
   1eac6:	2240      	movs	r2, #64	; 0x40
   1eac8:	731a      	strb	r2, [r3, #12]
		break;
   1eaca:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1eacc:	4b2e      	ldr	r3, [pc, #184]	; (1eb88 <mmc_decode_csd+0x11c>)
   1eace:	681b      	ldr	r3, [r3, #0]
   1ead0:	330e      	adds	r3, #14
   1ead2:	0018      	movs	r0, r3
   1ead4:	2308      	movs	r3, #8
   1ead6:	2260      	movs	r2, #96	; 0x60
   1ead8:	2180      	movs	r1, #128	; 0x80
   1eada:	4c2c      	ldr	r4, [pc, #176]	; (1eb8c <mmc_decode_csd+0x120>)
   1eadc:	47a0      	blx	r4
   1eade:	0003      	movs	r3, r0
   1eae0:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1eae2:	68fb      	ldr	r3, [r7, #12]
   1eae4:	2207      	movs	r2, #7
   1eae6:	401a      	ands	r2, r3
   1eae8:	4b29      	ldr	r3, [pc, #164]	; (1eb90 <mmc_decode_csd+0x124>)
   1eaea:	0092      	lsls	r2, r2, #2
   1eaec:	58d3      	ldr	r3, [r2, r3]
   1eaee:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1eaf0:	68fb      	ldr	r3, [r7, #12]
   1eaf2:	08db      	lsrs	r3, r3, #3
   1eaf4:	220f      	movs	r2, #15
   1eaf6:	401a      	ands	r2, r3
   1eaf8:	4b26      	ldr	r3, [pc, #152]	; (1eb94 <mmc_decode_csd+0x128>)
   1eafa:	0092      	lsls	r2, r2, #2
   1eafc:	58d3      	ldr	r3, [r2, r3]
   1eafe:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1eb00:	4b21      	ldr	r3, [pc, #132]	; (1eb88 <mmc_decode_csd+0x11c>)
   1eb02:	681b      	ldr	r3, [r3, #0]
   1eb04:	68ba      	ldr	r2, [r7, #8]
   1eb06:	6879      	ldr	r1, [r7, #4]
   1eb08:	434a      	muls	r2, r1
   1eb0a:	21fa      	movs	r1, #250	; 0xfa
   1eb0c:	0089      	lsls	r1, r1, #2
   1eb0e:	434a      	muls	r2, r1
   1eb10:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1eb12:	4b1d      	ldr	r3, [pc, #116]	; (1eb88 <mmc_decode_csd+0x11c>)
   1eb14:	681b      	ldr	r3, [r3, #0]
   1eb16:	330e      	adds	r3, #14
   1eb18:	0018      	movs	r0, r3
   1eb1a:	230c      	movs	r3, #12
   1eb1c:	223e      	movs	r2, #62	; 0x3e
   1eb1e:	2180      	movs	r1, #128	; 0x80
   1eb20:	4c1a      	ldr	r4, [pc, #104]	; (1eb8c <mmc_decode_csd+0x120>)
   1eb22:	47a0      	blx	r4
   1eb24:	0002      	movs	r2, r0
   1eb26:	4b1c      	ldr	r3, [pc, #112]	; (1eb98 <mmc_decode_csd+0x12c>)
   1eb28:	429a      	cmp	r2, r3
   1eb2a:	d028      	beq.n	1eb7e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1eb2c:	4b16      	ldr	r3, [pc, #88]	; (1eb88 <mmc_decode_csd+0x11c>)
   1eb2e:	681b      	ldr	r3, [r3, #0]
   1eb30:	330e      	adds	r3, #14
   1eb32:	0018      	movs	r0, r3
   1eb34:	230c      	movs	r3, #12
   1eb36:	223e      	movs	r2, #62	; 0x3e
   1eb38:	2180      	movs	r1, #128	; 0x80
   1eb3a:	4c14      	ldr	r4, [pc, #80]	; (1eb8c <mmc_decode_csd+0x120>)
   1eb3c:	47a0      	blx	r4
   1eb3e:	0003      	movs	r3, r0
   1eb40:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1eb42:	4b11      	ldr	r3, [pc, #68]	; (1eb88 <mmc_decode_csd+0x11c>)
   1eb44:	681b      	ldr	r3, [r3, #0]
   1eb46:	330e      	adds	r3, #14
   1eb48:	0018      	movs	r0, r3
   1eb4a:	2303      	movs	r3, #3
   1eb4c:	222f      	movs	r2, #47	; 0x2f
   1eb4e:	2180      	movs	r1, #128	; 0x80
   1eb50:	4d0e      	ldr	r5, [pc, #56]	; (1eb8c <mmc_decode_csd+0x120>)
   1eb52:	47a8      	blx	r5
   1eb54:	0003      	movs	r3, r0
   1eb56:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1eb58:	409c      	lsls	r4, r3
   1eb5a:	0023      	movs	r3, r4
   1eb5c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1eb5e:	4b0a      	ldr	r3, [pc, #40]	; (1eb88 <mmc_decode_csd+0x11c>)
   1eb60:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1eb62:	4b09      	ldr	r3, [pc, #36]	; (1eb88 <mmc_decode_csd+0x11c>)
   1eb64:	681b      	ldr	r3, [r3, #0]
   1eb66:	330e      	adds	r3, #14
   1eb68:	0018      	movs	r0, r3
   1eb6a:	2304      	movs	r3, #4
   1eb6c:	2250      	movs	r2, #80	; 0x50
   1eb6e:	2180      	movs	r1, #128	; 0x80
   1eb70:	4d06      	ldr	r5, [pc, #24]	; (1eb8c <mmc_decode_csd+0x120>)
   1eb72:	47a8      	blx	r5
   1eb74:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1eb76:	683b      	ldr	r3, [r7, #0]
   1eb78:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1eb7a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1eb7c:	6063      	str	r3, [r4, #4]
	}
}
   1eb7e:	46c0      	nop			; (mov r8, r8)
   1eb80:	46bd      	mov	sp, r7
   1eb82:	b004      	add	sp, #16
   1eb84:	bdb0      	pop	{r4, r5, r7, pc}
   1eb86:	46c0      	nop			; (mov r8, r8)
   1eb88:	20004244 	.word	0x20004244
   1eb8c:	0001e569 	.word	0x0001e569
   1eb90:	00038af4 	.word	0x00038af4
   1eb94:	00038b50 	.word	0x00038b50
   1eb98:	00000fff 	.word	0x00000fff

0001eb9c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1eb9c:	b5b0      	push	{r4, r5, r7, lr}
   1eb9e:	b084      	sub	sp, #16
   1eba0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1eba2:	4b35      	ldr	r3, [pc, #212]	; (1ec78 <sd_decode_csd+0xdc>)
   1eba4:	681b      	ldr	r3, [r3, #0]
   1eba6:	330e      	adds	r3, #14
   1eba8:	0018      	movs	r0, r3
   1ebaa:	2308      	movs	r3, #8
   1ebac:	2260      	movs	r2, #96	; 0x60
   1ebae:	2180      	movs	r1, #128	; 0x80
   1ebb0:	4c32      	ldr	r4, [pc, #200]	; (1ec7c <sd_decode_csd+0xe0>)
   1ebb2:	47a0      	blx	r4
   1ebb4:	0003      	movs	r3, r0
   1ebb6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1ebb8:	68fb      	ldr	r3, [r7, #12]
   1ebba:	2207      	movs	r2, #7
   1ebbc:	401a      	ands	r2, r3
   1ebbe:	4b30      	ldr	r3, [pc, #192]	; (1ec80 <sd_decode_csd+0xe4>)
   1ebc0:	0092      	lsls	r2, r2, #2
   1ebc2:	58d3      	ldr	r3, [r2, r3]
   1ebc4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1ebc6:	68fb      	ldr	r3, [r7, #12]
   1ebc8:	08db      	lsrs	r3, r3, #3
   1ebca:	220f      	movs	r2, #15
   1ebcc:	401a      	ands	r2, r3
   1ebce:	4b2d      	ldr	r3, [pc, #180]	; (1ec84 <sd_decode_csd+0xe8>)
   1ebd0:	0092      	lsls	r2, r2, #2
   1ebd2:	58d3      	ldr	r3, [r2, r3]
   1ebd4:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1ebd6:	4b28      	ldr	r3, [pc, #160]	; (1ec78 <sd_decode_csd+0xdc>)
   1ebd8:	681b      	ldr	r3, [r3, #0]
   1ebda:	68ba      	ldr	r2, [r7, #8]
   1ebdc:	6879      	ldr	r1, [r7, #4]
   1ebde:	434a      	muls	r2, r1
   1ebe0:	21fa      	movs	r1, #250	; 0xfa
   1ebe2:	0089      	lsls	r1, r1, #2
   1ebe4:	434a      	muls	r2, r1
   1ebe6:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1ebe8:	4b23      	ldr	r3, [pc, #140]	; (1ec78 <sd_decode_csd+0xdc>)
   1ebea:	681b      	ldr	r3, [r3, #0]
   1ebec:	330e      	adds	r3, #14
   1ebee:	0018      	movs	r0, r3
   1ebf0:	2302      	movs	r3, #2
   1ebf2:	227e      	movs	r2, #126	; 0x7e
   1ebf4:	2180      	movs	r1, #128	; 0x80
   1ebf6:	4c21      	ldr	r4, [pc, #132]	; (1ec7c <sd_decode_csd+0xe0>)
   1ebf8:	47a0      	blx	r4
   1ebfa:	1e03      	subs	r3, r0, #0
   1ebfc:	d00f      	beq.n	1ec1e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1ebfe:	4b1e      	ldr	r3, [pc, #120]	; (1ec78 <sd_decode_csd+0xdc>)
   1ec00:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1ec02:	4b1d      	ldr	r3, [pc, #116]	; (1ec78 <sd_decode_csd+0xdc>)
   1ec04:	681b      	ldr	r3, [r3, #0]
   1ec06:	330e      	adds	r3, #14
   1ec08:	0018      	movs	r0, r3
   1ec0a:	2316      	movs	r3, #22
   1ec0c:	2230      	movs	r2, #48	; 0x30
   1ec0e:	2180      	movs	r1, #128	; 0x80
   1ec10:	4d1a      	ldr	r5, [pc, #104]	; (1ec7c <sd_decode_csd+0xe0>)
   1ec12:	47a8      	blx	r5
   1ec14:	0003      	movs	r3, r0
				* 512;
   1ec16:	3301      	adds	r3, #1
   1ec18:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1ec1a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1ec1c:	e028      	b.n	1ec70 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1ec1e:	4b16      	ldr	r3, [pc, #88]	; (1ec78 <sd_decode_csd+0xdc>)
   1ec20:	681b      	ldr	r3, [r3, #0]
   1ec22:	330e      	adds	r3, #14
   1ec24:	0018      	movs	r0, r3
   1ec26:	230c      	movs	r3, #12
   1ec28:	223e      	movs	r2, #62	; 0x3e
   1ec2a:	2180      	movs	r1, #128	; 0x80
   1ec2c:	4c13      	ldr	r4, [pc, #76]	; (1ec7c <sd_decode_csd+0xe0>)
   1ec2e:	47a0      	blx	r4
   1ec30:	0003      	movs	r3, r0
   1ec32:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1ec34:	4b10      	ldr	r3, [pc, #64]	; (1ec78 <sd_decode_csd+0xdc>)
   1ec36:	681b      	ldr	r3, [r3, #0]
   1ec38:	330e      	adds	r3, #14
   1ec3a:	0018      	movs	r0, r3
   1ec3c:	2303      	movs	r3, #3
   1ec3e:	222f      	movs	r2, #47	; 0x2f
   1ec40:	2180      	movs	r1, #128	; 0x80
   1ec42:	4d0e      	ldr	r5, [pc, #56]	; (1ec7c <sd_decode_csd+0xe0>)
   1ec44:	47a8      	blx	r5
   1ec46:	0003      	movs	r3, r0
   1ec48:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1ec4a:	409c      	lsls	r4, r3
   1ec4c:	0023      	movs	r3, r4
   1ec4e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1ec50:	4b09      	ldr	r3, [pc, #36]	; (1ec78 <sd_decode_csd+0xdc>)
   1ec52:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1ec54:	4b08      	ldr	r3, [pc, #32]	; (1ec78 <sd_decode_csd+0xdc>)
   1ec56:	681b      	ldr	r3, [r3, #0]
   1ec58:	330e      	adds	r3, #14
   1ec5a:	0018      	movs	r0, r3
   1ec5c:	2304      	movs	r3, #4
   1ec5e:	2250      	movs	r2, #80	; 0x50
   1ec60:	2180      	movs	r1, #128	; 0x80
   1ec62:	4d06      	ldr	r5, [pc, #24]	; (1ec7c <sd_decode_csd+0xe0>)
   1ec64:	47a8      	blx	r5
   1ec66:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1ec68:	683b      	ldr	r3, [r7, #0]
   1ec6a:	4093      	lsls	r3, r2
				/ 1024;
   1ec6c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1ec6e:	6063      	str	r3, [r4, #4]
}
   1ec70:	46c0      	nop			; (mov r8, r8)
   1ec72:	46bd      	mov	sp, r7
   1ec74:	b004      	add	sp, #16
   1ec76:	bdb0      	pop	{r4, r5, r7, pc}
   1ec78:	20004244 	.word	0x20004244
   1ec7c:	0001e569 	.word	0x0001e569
   1ec80:	00038af4 	.word	0x00038af4
   1ec84:	00038b10 	.word	0x00038b10

0001ec88 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1ec88:	b580      	push	{r7, lr}
   1ec8a:	b082      	sub	sp, #8
   1ec8c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1ec8e:	4b11      	ldr	r3, [pc, #68]	; (1ecd4 <sd_mmc_cmd13+0x4c>)
   1ec90:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1ec92:	4b11      	ldr	r3, [pc, #68]	; (1ecd8 <sd_mmc_cmd13+0x50>)
   1ec94:	2100      	movs	r1, #0
   1ec96:	0018      	movs	r0, r3
   1ec98:	4b10      	ldr	r3, [pc, #64]	; (1ecdc <sd_mmc_cmd13+0x54>)
   1ec9a:	4798      	blx	r3
   1ec9c:	0003      	movs	r3, r0
   1ec9e:	001a      	movs	r2, r3
   1eca0:	2301      	movs	r3, #1
   1eca2:	4053      	eors	r3, r2
   1eca4:	b2db      	uxtb	r3, r3
   1eca6:	2b00      	cmp	r3, #0
   1eca8:	d001      	beq.n	1ecae <sd_mmc_cmd13+0x26>
				return false;
   1ecaa:	2300      	movs	r3, #0
   1ecac:	e00e      	b.n	1eccc <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1ecae:	4b0c      	ldr	r3, [pc, #48]	; (1ece0 <sd_mmc_cmd13+0x58>)
   1ecb0:	4798      	blx	r3
   1ecb2:	0002      	movs	r2, r0
   1ecb4:	23ff      	movs	r3, #255	; 0xff
   1ecb6:	4013      	ands	r3, r2
   1ecb8:	d006      	beq.n	1ecc8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1ecba:	687b      	ldr	r3, [r7, #4]
   1ecbc:	1e5a      	subs	r2, r3, #1
   1ecbe:	607a      	str	r2, [r7, #4]
   1ecc0:	2b00      	cmp	r3, #0
   1ecc2:	d1e6      	bne.n	1ec92 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1ecc4:	2300      	movs	r3, #0
   1ecc6:	e001      	b.n	1eccc <sd_mmc_cmd13+0x44>
				break;
   1ecc8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1ecca:	2301      	movs	r3, #1
}
   1eccc:	0018      	movs	r0, r3
   1ecce:	46bd      	mov	sp, r7
   1ecd0:	b002      	add	sp, #8
   1ecd2:	bd80      	pop	{r7, pc}
   1ecd4:	00030d40 	.word	0x00030d40
   1ecd8:	00001b0d 	.word	0x00001b0d
   1ecdc:	00020141 	.word	0x00020141
   1ece0:	00020381 	.word	0x00020381

0001ece4 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1ece4:	b590      	push	{r4, r7, lr}
   1ece6:	b085      	sub	sp, #20
   1ece8:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1ecea:	4b38      	ldr	r3, [pc, #224]	; (1edcc <sd_acmd51+0xe8>)
   1ecec:	681b      	ldr	r3, [r3, #0]
   1ecee:	891b      	ldrh	r3, [r3, #8]
   1ecf0:	041b      	lsls	r3, r3, #16
   1ecf2:	4a37      	ldr	r2, [pc, #220]	; (1edd0 <sd_acmd51+0xec>)
   1ecf4:	0019      	movs	r1, r3
   1ecf6:	0010      	movs	r0, r2
   1ecf8:	4b36      	ldr	r3, [pc, #216]	; (1edd4 <sd_acmd51+0xf0>)
   1ecfa:	4798      	blx	r3
   1ecfc:	0003      	movs	r3, r0
   1ecfe:	001a      	movs	r2, r3
   1ed00:	2301      	movs	r3, #1
   1ed02:	4053      	eors	r3, r2
   1ed04:	b2db      	uxtb	r3, r3
   1ed06:	2b00      	cmp	r3, #0
   1ed08:	d001      	beq.n	1ed0e <sd_acmd51+0x2a>
		return false;
   1ed0a:	2300      	movs	r3, #0
   1ed0c:	e059      	b.n	1edc2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1ed0e:	4832      	ldr	r0, [pc, #200]	; (1edd8 <sd_acmd51+0xf4>)
   1ed10:	2301      	movs	r3, #1
   1ed12:	9300      	str	r3, [sp, #0]
   1ed14:	2301      	movs	r3, #1
   1ed16:	2208      	movs	r2, #8
   1ed18:	2100      	movs	r1, #0
   1ed1a:	4c30      	ldr	r4, [pc, #192]	; (1eddc <sd_acmd51+0xf8>)
   1ed1c:	47a0      	blx	r4
   1ed1e:	0003      	movs	r3, r0
   1ed20:	001a      	movs	r2, r3
   1ed22:	2301      	movs	r3, #1
   1ed24:	4053      	eors	r3, r2
   1ed26:	b2db      	uxtb	r3, r3
   1ed28:	2b00      	cmp	r3, #0
   1ed2a:	d001      	beq.n	1ed30 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1ed2c:	2300      	movs	r3, #0
   1ed2e:	e048      	b.n	1edc2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1ed30:	003b      	movs	r3, r7
   1ed32:	2101      	movs	r1, #1
   1ed34:	0018      	movs	r0, r3
   1ed36:	4b2a      	ldr	r3, [pc, #168]	; (1ede0 <sd_acmd51+0xfc>)
   1ed38:	4798      	blx	r3
   1ed3a:	0003      	movs	r3, r0
   1ed3c:	001a      	movs	r2, r3
   1ed3e:	2301      	movs	r3, #1
   1ed40:	4053      	eors	r3, r2
   1ed42:	b2db      	uxtb	r3, r3
   1ed44:	2b00      	cmp	r3, #0
   1ed46:	d001      	beq.n	1ed4c <sd_acmd51+0x68>
		return false;
   1ed48:	2300      	movs	r3, #0
   1ed4a:	e03a      	b.n	1edc2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1ed4c:	4b25      	ldr	r3, [pc, #148]	; (1ede4 <sd_acmd51+0x100>)
   1ed4e:	4798      	blx	r3
   1ed50:	0003      	movs	r3, r0
   1ed52:	001a      	movs	r2, r3
   1ed54:	2301      	movs	r3, #1
   1ed56:	4053      	eors	r3, r2
   1ed58:	b2db      	uxtb	r3, r3
   1ed5a:	2b00      	cmp	r3, #0
   1ed5c:	d001      	beq.n	1ed62 <sd_acmd51+0x7e>
		return false;
   1ed5e:	2300      	movs	r3, #0
   1ed60:	e02f      	b.n	1edc2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1ed62:	0038      	movs	r0, r7
   1ed64:	2304      	movs	r3, #4
   1ed66:	2238      	movs	r2, #56	; 0x38
   1ed68:	2140      	movs	r1, #64	; 0x40
   1ed6a:	4c1f      	ldr	r4, [pc, #124]	; (1ede8 <sd_acmd51+0x104>)
   1ed6c:	47a0      	blx	r4
   1ed6e:	0003      	movs	r3, r0
   1ed70:	2b01      	cmp	r3, #1
   1ed72:	d008      	beq.n	1ed86 <sd_acmd51+0xa2>
   1ed74:	d302      	bcc.n	1ed7c <sd_acmd51+0x98>
   1ed76:	2b02      	cmp	r3, #2
   1ed78:	d00a      	beq.n	1ed90 <sd_acmd51+0xac>
   1ed7a:	e01c      	b.n	1edb6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1ed7c:	4b13      	ldr	r3, [pc, #76]	; (1edcc <sd_acmd51+0xe8>)
   1ed7e:	681b      	ldr	r3, [r3, #0]
   1ed80:	2210      	movs	r2, #16
   1ed82:	731a      	strb	r2, [r3, #12]
		break;
   1ed84:	e01c      	b.n	1edc0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1ed86:	4b11      	ldr	r3, [pc, #68]	; (1edcc <sd_acmd51+0xe8>)
   1ed88:	681b      	ldr	r3, [r3, #0]
   1ed8a:	221a      	movs	r2, #26
   1ed8c:	731a      	strb	r2, [r3, #12]
		break;
   1ed8e:	e017      	b.n	1edc0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1ed90:	0038      	movs	r0, r7
   1ed92:	2301      	movs	r3, #1
   1ed94:	222f      	movs	r2, #47	; 0x2f
   1ed96:	2140      	movs	r1, #64	; 0x40
   1ed98:	4c13      	ldr	r4, [pc, #76]	; (1ede8 <sd_acmd51+0x104>)
   1ed9a:	47a0      	blx	r4
   1ed9c:	0003      	movs	r3, r0
   1ed9e:	2b01      	cmp	r3, #1
   1eda0:	d104      	bne.n	1edac <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1eda2:	4b0a      	ldr	r3, [pc, #40]	; (1edcc <sd_acmd51+0xe8>)
   1eda4:	681b      	ldr	r3, [r3, #0]
   1eda6:	2230      	movs	r2, #48	; 0x30
   1eda8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1edaa:	e009      	b.n	1edc0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1edac:	4b07      	ldr	r3, [pc, #28]	; (1edcc <sd_acmd51+0xe8>)
   1edae:	681b      	ldr	r3, [r3, #0]
   1edb0:	2220      	movs	r2, #32
   1edb2:	731a      	strb	r2, [r3, #12]
		break;
   1edb4:	e004      	b.n	1edc0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1edb6:	4b05      	ldr	r3, [pc, #20]	; (1edcc <sd_acmd51+0xe8>)
   1edb8:	681b      	ldr	r3, [r3, #0]
   1edba:	2210      	movs	r2, #16
   1edbc:	731a      	strb	r2, [r3, #12]
		break;
   1edbe:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1edc0:	2301      	movs	r3, #1
}
   1edc2:	0018      	movs	r0, r3
   1edc4:	46bd      	mov	sp, r7
   1edc6:	b003      	add	sp, #12
   1edc8:	bd90      	pop	{r4, r7, pc}
   1edca:	46c0      	nop			; (mov r8, r8)
   1edcc:	20004244 	.word	0x20004244
   1edd0:	00001137 	.word	0x00001137
   1edd4:	00020141 	.word	0x00020141
   1edd8:	00081133 	.word	0x00081133
   1eddc:	00020169 	.word	0x00020169
   1ede0:	00020439 	.word	0x00020439
   1ede4:	000204dd 	.word	0x000204dd
   1ede8:	0001e569 	.word	0x0001e569

0001edec <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1edec:	b580      	push	{r7, lr}
   1edee:	b082      	sub	sp, #8
   1edf0:	af00      	add	r7, sp, #0
   1edf2:	0002      	movs	r2, r0
   1edf4:	1dfb      	adds	r3, r7, #7
   1edf6:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1edf8:	1dfb      	adds	r3, r7, #7
   1edfa:	781b      	ldrb	r3, [r3, #0]
   1edfc:	2b00      	cmp	r3, #0
   1edfe:	d001      	beq.n	1ee04 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1ee00:	2304      	movs	r3, #4
   1ee02:	e047      	b.n	1ee94 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1ee04:	1dfb      	adds	r3, r7, #7
   1ee06:	781b      	ldrb	r3, [r3, #0]
   1ee08:	4a24      	ldr	r2, [pc, #144]	; (1ee9c <sd_mmc_select_slot+0xb0>)
   1ee0a:	015b      	lsls	r3, r3, #5
   1ee0c:	18d3      	adds	r3, r2, r3
   1ee0e:	330a      	adds	r3, #10
   1ee10:	781b      	ldrb	r3, [r3, #0]
   1ee12:	2b04      	cmp	r3, #4
   1ee14:	d008      	beq.n	1ee28 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1ee16:	1dfb      	adds	r3, r7, #7
   1ee18:	781b      	ldrb	r3, [r3, #0]
   1ee1a:	4a20      	ldr	r2, [pc, #128]	; (1ee9c <sd_mmc_select_slot+0xb0>)
   1ee1c:	015b      	lsls	r3, r3, #5
   1ee1e:	18d3      	adds	r3, r2, r3
   1ee20:	330a      	adds	r3, #10
   1ee22:	781b      	ldrb	r3, [r3, #0]
   1ee24:	2b03      	cmp	r3, #3
   1ee26:	d11d      	bne.n	1ee64 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1ee28:	1dfb      	adds	r3, r7, #7
   1ee2a:	781b      	ldrb	r3, [r3, #0]
   1ee2c:	4a1b      	ldr	r2, [pc, #108]	; (1ee9c <sd_mmc_select_slot+0xb0>)
   1ee2e:	015b      	lsls	r3, r3, #5
   1ee30:	18d3      	adds	r3, r2, r3
   1ee32:	330a      	adds	r3, #10
   1ee34:	2202      	movs	r2, #2
   1ee36:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1ee38:	1dfb      	adds	r3, r7, #7
   1ee3a:	781a      	ldrb	r2, [r3, #0]
   1ee3c:	4b17      	ldr	r3, [pc, #92]	; (1ee9c <sd_mmc_select_slot+0xb0>)
   1ee3e:	0152      	lsls	r2, r2, #5
   1ee40:	4917      	ldr	r1, [pc, #92]	; (1eea0 <sd_mmc_select_slot+0xb4>)
   1ee42:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1ee44:	1dfb      	adds	r3, r7, #7
   1ee46:	781b      	ldrb	r3, [r3, #0]
   1ee48:	4a14      	ldr	r2, [pc, #80]	; (1ee9c <sd_mmc_select_slot+0xb0>)
   1ee4a:	015b      	lsls	r3, r3, #5
   1ee4c:	18d3      	adds	r3, r2, r3
   1ee4e:	330d      	adds	r3, #13
   1ee50:	2201      	movs	r2, #1
   1ee52:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1ee54:	1dfb      	adds	r3, r7, #7
   1ee56:	781b      	ldrb	r3, [r3, #0]
   1ee58:	4a10      	ldr	r2, [pc, #64]	; (1ee9c <sd_mmc_select_slot+0xb0>)
   1ee5a:	015b      	lsls	r3, r3, #5
   1ee5c:	18d3      	adds	r3, r2, r3
   1ee5e:	331e      	adds	r3, #30
   1ee60:	2200      	movs	r2, #0
   1ee62:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1ee64:	4b0f      	ldr	r3, [pc, #60]	; (1eea4 <sd_mmc_select_slot+0xb8>)
   1ee66:	1dfa      	adds	r2, r7, #7
   1ee68:	7812      	ldrb	r2, [r2, #0]
   1ee6a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1ee6c:	1dfb      	adds	r3, r7, #7
   1ee6e:	781b      	ldrb	r3, [r3, #0]
   1ee70:	015a      	lsls	r2, r3, #5
   1ee72:	4b0a      	ldr	r3, [pc, #40]	; (1ee9c <sd_mmc_select_slot+0xb0>)
   1ee74:	18d2      	adds	r2, r2, r3
   1ee76:	4b0c      	ldr	r3, [pc, #48]	; (1eea8 <sd_mmc_select_slot+0xbc>)
   1ee78:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1ee7a:	4b0c      	ldr	r3, [pc, #48]	; (1eeac <sd_mmc_select_slot+0xc0>)
   1ee7c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1ee7e:	1dfb      	adds	r3, r7, #7
   1ee80:	781b      	ldrb	r3, [r3, #0]
   1ee82:	4a06      	ldr	r2, [pc, #24]	; (1ee9c <sd_mmc_select_slot+0xb0>)
   1ee84:	015b      	lsls	r3, r3, #5
   1ee86:	18d3      	adds	r3, r2, r3
   1ee88:	330a      	adds	r3, #10
   1ee8a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1ee8c:	3b02      	subs	r3, #2
   1ee8e:	425a      	negs	r2, r3
   1ee90:	4153      	adcs	r3, r2
   1ee92:	b2db      	uxtb	r3, r3
}
   1ee94:	0018      	movs	r0, r3
   1ee96:	46bd      	mov	sp, r7
   1ee98:	b002      	add	sp, #8
   1ee9a:	bd80      	pop	{r7, pc}
   1ee9c:	20004220 	.word	0x20004220
   1eea0:	00061a80 	.word	0x00061a80
   1eea4:	20004240 	.word	0x20004240
   1eea8:	20004244 	.word	0x20004244
   1eeac:	0001eeb1 	.word	0x0001eeb1

0001eeb0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1eeb0:	b5b0      	push	{r4, r5, r7, lr}
   1eeb2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1eeb4:	4b09      	ldr	r3, [pc, #36]	; (1eedc <sd_mmc_configure_slot+0x2c>)
   1eeb6:	7818      	ldrb	r0, [r3, #0]
   1eeb8:	4b09      	ldr	r3, [pc, #36]	; (1eee0 <sd_mmc_configure_slot+0x30>)
   1eeba:	681b      	ldr	r3, [r3, #0]
   1eebc:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1eebe:	4b08      	ldr	r3, [pc, #32]	; (1eee0 <sd_mmc_configure_slot+0x30>)
   1eec0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1eec2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1eec4:	4b06      	ldr	r3, [pc, #24]	; (1eee0 <sd_mmc_configure_slot+0x30>)
   1eec6:	681b      	ldr	r3, [r3, #0]
   1eec8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1eeca:	1e5c      	subs	r4, r3, #1
   1eecc:	41a3      	sbcs	r3, r4
   1eece:	b2db      	uxtb	r3, r3
   1eed0:	4c04      	ldr	r4, [pc, #16]	; (1eee4 <sd_mmc_configure_slot+0x34>)
   1eed2:	47a0      	blx	r4
}
   1eed4:	46c0      	nop			; (mov r8, r8)
   1eed6:	46bd      	mov	sp, r7
   1eed8:	bdb0      	pop	{r4, r5, r7, pc}
   1eeda:	46c0      	nop			; (mov r8, r8)
   1eedc:	20004240 	.word	0x20004240
   1eee0:	20004244 	.word	0x20004244
   1eee4:	00020029 	.word	0x00020029

0001eee8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1eee8:	b580      	push	{r7, lr}
   1eeea:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1eeec:	4b05      	ldr	r3, [pc, #20]	; (1ef04 <sd_mmc_deselect_slot+0x1c>)
   1eeee:	781b      	ldrb	r3, [r3, #0]
   1eef0:	2b00      	cmp	r3, #0
   1eef2:	d104      	bne.n	1eefe <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1eef4:	4b03      	ldr	r3, [pc, #12]	; (1ef04 <sd_mmc_deselect_slot+0x1c>)
   1eef6:	781b      	ldrb	r3, [r3, #0]
   1eef8:	0018      	movs	r0, r3
   1eefa:	4b03      	ldr	r3, [pc, #12]	; (1ef08 <sd_mmc_deselect_slot+0x20>)
   1eefc:	4798      	blx	r3
	}
}
   1eefe:	46c0      	nop			; (mov r8, r8)
   1ef00:	46bd      	mov	sp, r7
   1ef02:	bd80      	pop	{r7, pc}
   1ef04:	20004240 	.word	0x20004240
   1ef08:	000200b1 	.word	0x000200b1

0001ef0c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1ef0c:	b580      	push	{r7, lr}
   1ef0e:	b082      	sub	sp, #8
   1ef10:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1ef12:	1dfb      	adds	r3, r7, #7
   1ef14:	2200      	movs	r2, #0
   1ef16:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1ef18:	4b59      	ldr	r3, [pc, #356]	; (1f080 <sd_mmc_spi_card_init+0x174>)
   1ef1a:	681b      	ldr	r3, [r3, #0]
   1ef1c:	2201      	movs	r2, #1
   1ef1e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1ef20:	4b57      	ldr	r3, [pc, #348]	; (1f080 <sd_mmc_spi_card_init+0x174>)
   1ef22:	681b      	ldr	r3, [r3, #0]
   1ef24:	2200      	movs	r2, #0
   1ef26:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1ef28:	4b55      	ldr	r3, [pc, #340]	; (1f080 <sd_mmc_spi_card_init+0x174>)
   1ef2a:	681b      	ldr	r3, [r3, #0]
   1ef2c:	2200      	movs	r2, #0
   1ef2e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1ef30:	4b54      	ldr	r3, [pc, #336]	; (1f084 <sd_mmc_spi_card_init+0x178>)
   1ef32:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1ef34:	2388      	movs	r3, #136	; 0x88
   1ef36:	015b      	lsls	r3, r3, #5
   1ef38:	2100      	movs	r1, #0
   1ef3a:	0018      	movs	r0, r3
   1ef3c:	4b52      	ldr	r3, [pc, #328]	; (1f088 <sd_mmc_spi_card_init+0x17c>)
   1ef3e:	4798      	blx	r3
   1ef40:	0003      	movs	r3, r0
   1ef42:	001a      	movs	r2, r3
   1ef44:	2301      	movs	r3, #1
   1ef46:	4053      	eors	r3, r2
   1ef48:	b2db      	uxtb	r3, r3
   1ef4a:	2b00      	cmp	r3, #0
   1ef4c:	d001      	beq.n	1ef52 <sd_mmc_spi_card_init+0x46>
		return false;
   1ef4e:	2300      	movs	r3, #0
   1ef50:	e092      	b.n	1f078 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1ef52:	1dfb      	adds	r3, r7, #7
   1ef54:	0018      	movs	r0, r3
   1ef56:	4b4d      	ldr	r3, [pc, #308]	; (1f08c <sd_mmc_spi_card_init+0x180>)
   1ef58:	4798      	blx	r3
   1ef5a:	0003      	movs	r3, r0
   1ef5c:	001a      	movs	r2, r3
   1ef5e:	2301      	movs	r3, #1
   1ef60:	4053      	eors	r3, r2
   1ef62:	b2db      	uxtb	r3, r3
   1ef64:	2b00      	cmp	r3, #0
   1ef66:	d001      	beq.n	1ef6c <sd_mmc_spi_card_init+0x60>
		return false;
   1ef68:	2300      	movs	r3, #0
   1ef6a:	e085      	b.n	1f078 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1ef6c:	4b48      	ldr	r3, [pc, #288]	; (1f090 <sd_mmc_spi_card_init+0x184>)
   1ef6e:	4798      	blx	r3
   1ef70:	0003      	movs	r3, r0
   1ef72:	001a      	movs	r2, r3
   1ef74:	2301      	movs	r3, #1
   1ef76:	4053      	eors	r3, r2
   1ef78:	b2db      	uxtb	r3, r3
   1ef7a:	2b00      	cmp	r3, #0
   1ef7c:	d001      	beq.n	1ef82 <sd_mmc_spi_card_init+0x76>
		return false;
   1ef7e:	2300      	movs	r3, #0
   1ef80:	e07a      	b.n	1f078 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1ef82:	4b3f      	ldr	r3, [pc, #252]	; (1f080 <sd_mmc_spi_card_init+0x174>)
   1ef84:	681b      	ldr	r3, [r3, #0]
   1ef86:	7adb      	ldrb	r3, [r3, #11]
   1ef88:	001a      	movs	r2, r3
   1ef8a:	2301      	movs	r3, #1
   1ef8c:	4013      	ands	r3, r2
   1ef8e:	d021      	beq.n	1efd4 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1ef90:	1dfb      	adds	r3, r7, #7
   1ef92:	781b      	ldrb	r3, [r3, #0]
   1ef94:	0018      	movs	r0, r3
   1ef96:	4b3f      	ldr	r3, [pc, #252]	; (1f094 <sd_mmc_spi_card_init+0x188>)
   1ef98:	4798      	blx	r3
   1ef9a:	0003      	movs	r3, r0
   1ef9c:	001a      	movs	r2, r3
   1ef9e:	2301      	movs	r3, #1
   1efa0:	4053      	eors	r3, r2
   1efa2:	b2db      	uxtb	r3, r3
   1efa4:	2b00      	cmp	r3, #0
   1efa6:	d007      	beq.n	1efb8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1efa8:	4b35      	ldr	r3, [pc, #212]	; (1f080 <sd_mmc_spi_card_init+0x174>)
   1efaa:	681b      	ldr	r3, [r3, #0]
   1efac:	2202      	movs	r2, #2
   1efae:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1efb0:	4b39      	ldr	r3, [pc, #228]	; (1f098 <sd_mmc_spi_card_init+0x18c>)
   1efb2:	4798      	blx	r3
   1efb4:	0003      	movs	r3, r0
   1efb6:	e05f      	b.n	1f078 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1efb8:	4b38      	ldr	r3, [pc, #224]	; (1f09c <sd_mmc_spi_card_init+0x190>)
   1efba:	2100      	movs	r1, #0
   1efbc:	0018      	movs	r0, r3
   1efbe:	4b32      	ldr	r3, [pc, #200]	; (1f088 <sd_mmc_spi_card_init+0x17c>)
   1efc0:	4798      	blx	r3
   1efc2:	0003      	movs	r3, r0
   1efc4:	001a      	movs	r2, r3
   1efc6:	2301      	movs	r3, #1
   1efc8:	4053      	eors	r3, r2
   1efca:	b2db      	uxtb	r3, r3
   1efcc:	2b00      	cmp	r3, #0
   1efce:	d001      	beq.n	1efd4 <sd_mmc_spi_card_init+0xc8>
			return false;
   1efd0:	2300      	movs	r3, #0
   1efd2:	e051      	b.n	1f078 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1efd4:	4b2a      	ldr	r3, [pc, #168]	; (1f080 <sd_mmc_spi_card_init+0x174>)
   1efd6:	681b      	ldr	r3, [r3, #0]
   1efd8:	7adb      	ldrb	r3, [r3, #11]
   1efda:	001a      	movs	r2, r3
   1efdc:	2301      	movs	r3, #1
   1efde:	4013      	ands	r3, r2
   1efe0:	d017      	beq.n	1f012 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1efe2:	4b2f      	ldr	r3, [pc, #188]	; (1f0a0 <sd_mmc_spi_card_init+0x194>)
   1efe4:	4798      	blx	r3
   1efe6:	0003      	movs	r3, r0
   1efe8:	001a      	movs	r2, r3
   1efea:	2301      	movs	r3, #1
   1efec:	4053      	eors	r3, r2
   1efee:	b2db      	uxtb	r3, r3
   1eff0:	2b00      	cmp	r3, #0
   1eff2:	d001      	beq.n	1eff8 <sd_mmc_spi_card_init+0xec>
			return false;
   1eff4:	2300      	movs	r3, #0
   1eff6:	e03f      	b.n	1f078 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1eff8:	4b2a      	ldr	r3, [pc, #168]	; (1f0a4 <sd_mmc_spi_card_init+0x198>)
   1effa:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1effc:	4b2a      	ldr	r3, [pc, #168]	; (1f0a8 <sd_mmc_spi_card_init+0x19c>)
   1effe:	4798      	blx	r3
   1f000:	0003      	movs	r3, r0
   1f002:	001a      	movs	r2, r3
   1f004:	2301      	movs	r3, #1
   1f006:	4053      	eors	r3, r2
   1f008:	b2db      	uxtb	r3, r3
   1f00a:	2b00      	cmp	r3, #0
   1f00c:	d001      	beq.n	1f012 <sd_mmc_spi_card_init+0x106>
			return false;
   1f00e:	2300      	movs	r3, #0
   1f010:	e032      	b.n	1f078 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f012:	4b1b      	ldr	r3, [pc, #108]	; (1f080 <sd_mmc_spi_card_init+0x174>)
   1f014:	681b      	ldr	r3, [r3, #0]
   1f016:	7adb      	ldrb	r3, [r3, #11]
   1f018:	001a      	movs	r2, r3
   1f01a:	2301      	movs	r3, #1
   1f01c:	4013      	ands	r3, r2
   1f01e:	d016      	beq.n	1f04e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1f020:	4b17      	ldr	r3, [pc, #92]	; (1f080 <sd_mmc_spi_card_init+0x174>)
   1f022:	681b      	ldr	r3, [r3, #0]
   1f024:	7adb      	ldrb	r3, [r3, #11]
   1f026:	001a      	movs	r2, r3
   1f028:	2308      	movs	r3, #8
   1f02a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f02c:	d10f      	bne.n	1f04e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f02e:	2380      	movs	r3, #128	; 0x80
   1f030:	009b      	lsls	r3, r3, #2
   1f032:	4a1e      	ldr	r2, [pc, #120]	; (1f0ac <sd_mmc_spi_card_init+0x1a0>)
   1f034:	0019      	movs	r1, r3
   1f036:	0010      	movs	r0, r2
   1f038:	4b13      	ldr	r3, [pc, #76]	; (1f088 <sd_mmc_spi_card_init+0x17c>)
   1f03a:	4798      	blx	r3
   1f03c:	0003      	movs	r3, r0
   1f03e:	001a      	movs	r2, r3
   1f040:	2301      	movs	r3, #1
   1f042:	4053      	eors	r3, r2
   1f044:	b2db      	uxtb	r3, r3
   1f046:	2b00      	cmp	r3, #0
   1f048:	d001      	beq.n	1f04e <sd_mmc_spi_card_init+0x142>
			return false;
   1f04a:	2300      	movs	r3, #0
   1f04c:	e014      	b.n	1f078 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f04e:	4b0c      	ldr	r3, [pc, #48]	; (1f080 <sd_mmc_spi_card_init+0x174>)
   1f050:	681b      	ldr	r3, [r3, #0]
   1f052:	7adb      	ldrb	r3, [r3, #11]
   1f054:	001a      	movs	r2, r3
   1f056:	2301      	movs	r3, #1
   1f058:	4013      	ands	r3, r2
   1f05a:	d00a      	beq.n	1f072 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1f05c:	4b14      	ldr	r3, [pc, #80]	; (1f0b0 <sd_mmc_spi_card_init+0x1a4>)
   1f05e:	4798      	blx	r3
   1f060:	0003      	movs	r3, r0
   1f062:	001a      	movs	r2, r3
   1f064:	2301      	movs	r3, #1
   1f066:	4053      	eors	r3, r2
   1f068:	b2db      	uxtb	r3, r3
   1f06a:	2b00      	cmp	r3, #0
   1f06c:	d001      	beq.n	1f072 <sd_mmc_spi_card_init+0x166>
			return false;
   1f06e:	2300      	movs	r3, #0
   1f070:	e002      	b.n	1f078 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f072:	4b10      	ldr	r3, [pc, #64]	; (1f0b4 <sd_mmc_spi_card_init+0x1a8>)
   1f074:	4798      	blx	r3
	return true;
   1f076:	2301      	movs	r3, #1
}
   1f078:	0018      	movs	r0, r3
   1f07a:	46bd      	mov	sp, r7
   1f07c:	b002      	add	sp, #8
   1f07e:	bd80      	pop	{r7, pc}
   1f080:	20004244 	.word	0x20004244
   1f084:	000200f5 	.word	0x000200f5
   1f088:	00020141 	.word	0x00020141
   1f08c:	0001e861 	.word	0x0001e861
   1f090:	0001e855 	.word	0x0001e855
   1f094:	0001e771 	.word	0x0001e771
   1f098:	0001f0b9 	.word	0x0001f0b9
   1f09c:	0000113b 	.word	0x0000113b
   1f0a0:	0001e9fd 	.word	0x0001e9fd
   1f0a4:	0001eb9d 	.word	0x0001eb9d
   1f0a8:	0001ece5 	.word	0x0001ece5
   1f0ac:	00001110 	.word	0x00001110
   1f0b0:	0001ec89 	.word	0x0001ec89
   1f0b4:	0001eeb1 	.word	0x0001eeb1

0001f0b8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1f0b8:	b580      	push	{r7, lr}
   1f0ba:	b082      	sub	sp, #8
   1f0bc:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f0be:	2388      	movs	r3, #136	; 0x88
   1f0c0:	015b      	lsls	r3, r3, #5
   1f0c2:	2100      	movs	r1, #0
   1f0c4:	0018      	movs	r0, r3
   1f0c6:	4b32      	ldr	r3, [pc, #200]	; (1f190 <sd_mmc_spi_install_mmc+0xd8>)
   1f0c8:	4798      	blx	r3
   1f0ca:	0003      	movs	r3, r0
   1f0cc:	001a      	movs	r2, r3
   1f0ce:	2301      	movs	r3, #1
   1f0d0:	4053      	eors	r3, r2
   1f0d2:	b2db      	uxtb	r3, r3
   1f0d4:	2b00      	cmp	r3, #0
   1f0d6:	d001      	beq.n	1f0dc <sd_mmc_spi_install_mmc+0x24>
		return false;
   1f0d8:	2300      	movs	r3, #0
   1f0da:	e055      	b.n	1f188 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1f0dc:	4b2d      	ldr	r3, [pc, #180]	; (1f194 <sd_mmc_spi_install_mmc+0xdc>)
   1f0de:	4798      	blx	r3
   1f0e0:	0003      	movs	r3, r0
   1f0e2:	001a      	movs	r2, r3
   1f0e4:	2301      	movs	r3, #1
   1f0e6:	4053      	eors	r3, r2
   1f0e8:	b2db      	uxtb	r3, r3
   1f0ea:	2b00      	cmp	r3, #0
   1f0ec:	d001      	beq.n	1f0f2 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1f0ee:	2300      	movs	r3, #0
   1f0f0:	e04a      	b.n	1f188 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f0f2:	4b29      	ldr	r3, [pc, #164]	; (1f198 <sd_mmc_spi_install_mmc+0xe0>)
   1f0f4:	2100      	movs	r1, #0
   1f0f6:	0018      	movs	r0, r3
   1f0f8:	4b25      	ldr	r3, [pc, #148]	; (1f190 <sd_mmc_spi_install_mmc+0xd8>)
   1f0fa:	4798      	blx	r3
   1f0fc:	0003      	movs	r3, r0
   1f0fe:	001a      	movs	r2, r3
   1f100:	2301      	movs	r3, #1
   1f102:	4053      	eors	r3, r2
   1f104:	b2db      	uxtb	r3, r3
   1f106:	2b00      	cmp	r3, #0
   1f108:	d001      	beq.n	1f10e <sd_mmc_spi_install_mmc+0x56>
		return false;
   1f10a:	2300      	movs	r3, #0
   1f10c:	e03c      	b.n	1f188 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1f10e:	4b23      	ldr	r3, [pc, #140]	; (1f19c <sd_mmc_spi_install_mmc+0xe4>)
   1f110:	4798      	blx	r3
   1f112:	0003      	movs	r3, r0
   1f114:	001a      	movs	r2, r3
   1f116:	2301      	movs	r3, #1
   1f118:	4053      	eors	r3, r2
   1f11a:	b2db      	uxtb	r3, r3
   1f11c:	2b00      	cmp	r3, #0
   1f11e:	d001      	beq.n	1f124 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1f120:	2300      	movs	r3, #0
   1f122:	e031      	b.n	1f188 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1f124:	4b1e      	ldr	r3, [pc, #120]	; (1f1a0 <sd_mmc_spi_install_mmc+0xe8>)
   1f126:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1f128:	4b1e      	ldr	r3, [pc, #120]	; (1f1a4 <sd_mmc_spi_install_mmc+0xec>)
   1f12a:	681b      	ldr	r3, [r3, #0]
   1f12c:	7b1b      	ldrb	r3, [r3, #12]
   1f12e:	2b3f      	cmp	r3, #63	; 0x3f
   1f130:	d90c      	bls.n	1f14c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1f132:	1dfb      	adds	r3, r7, #7
   1f134:	0018      	movs	r0, r3
   1f136:	4b1c      	ldr	r3, [pc, #112]	; (1f1a8 <sd_mmc_spi_install_mmc+0xf0>)
   1f138:	4798      	blx	r3
   1f13a:	0003      	movs	r3, r0
   1f13c:	001a      	movs	r2, r3
   1f13e:	2301      	movs	r3, #1
   1f140:	4053      	eors	r3, r2
   1f142:	b2db      	uxtb	r3, r3
   1f144:	2b00      	cmp	r3, #0
   1f146:	d001      	beq.n	1f14c <sd_mmc_spi_install_mmc+0x94>
			return false;
   1f148:	2300      	movs	r3, #0
   1f14a:	e01d      	b.n	1f188 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f14c:	2380      	movs	r3, #128	; 0x80
   1f14e:	009b      	lsls	r3, r3, #2
   1f150:	4a16      	ldr	r2, [pc, #88]	; (1f1ac <sd_mmc_spi_install_mmc+0xf4>)
   1f152:	0019      	movs	r1, r3
   1f154:	0010      	movs	r0, r2
   1f156:	4b0e      	ldr	r3, [pc, #56]	; (1f190 <sd_mmc_spi_install_mmc+0xd8>)
   1f158:	4798      	blx	r3
   1f15a:	0003      	movs	r3, r0
   1f15c:	001a      	movs	r2, r3
   1f15e:	2301      	movs	r3, #1
   1f160:	4053      	eors	r3, r2
   1f162:	b2db      	uxtb	r3, r3
   1f164:	2b00      	cmp	r3, #0
   1f166:	d001      	beq.n	1f16c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1f168:	2300      	movs	r3, #0
   1f16a:	e00d      	b.n	1f188 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1f16c:	4b10      	ldr	r3, [pc, #64]	; (1f1b0 <sd_mmc_spi_install_mmc+0xf8>)
   1f16e:	4798      	blx	r3
   1f170:	0003      	movs	r3, r0
   1f172:	001a      	movs	r2, r3
   1f174:	2301      	movs	r3, #1
   1f176:	4053      	eors	r3, r2
   1f178:	b2db      	uxtb	r3, r3
   1f17a:	2b00      	cmp	r3, #0
   1f17c:	d001      	beq.n	1f182 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1f17e:	2300      	movs	r3, #0
   1f180:	e002      	b.n	1f188 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f182:	4b0c      	ldr	r3, [pc, #48]	; (1f1b4 <sd_mmc_spi_install_mmc+0xfc>)
   1f184:	4798      	blx	r3
	return true;
   1f186:	2301      	movs	r3, #1
}
   1f188:	0018      	movs	r0, r3
   1f18a:	46bd      	mov	sp, r7
   1f18c:	b002      	add	sp, #8
   1f18e:	bd80      	pop	{r7, pc}
   1f190:	00020141 	.word	0x00020141
   1f194:	0001e6c5 	.word	0x0001e6c5
   1f198:	0000113b 	.word	0x0000113b
   1f19c:	0001e9fd 	.word	0x0001e9fd
   1f1a0:	0001ea6d 	.word	0x0001ea6d
   1f1a4:	20004244 	.word	0x20004244
   1f1a8:	0001e8d1 	.word	0x0001e8d1
   1f1ac:	00001110 	.word	0x00001110
   1f1b0:	0001ec89 	.word	0x0001ec89
   1f1b4:	0001eeb1 	.word	0x0001eeb1

0001f1b8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1f1b8:	b580      	push	{r7, lr}
   1f1ba:	b082      	sub	sp, #8
   1f1bc:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f1be:	1dfb      	adds	r3, r7, #7
   1f1c0:	2200      	movs	r2, #0
   1f1c2:	701a      	strb	r2, [r3, #0]
   1f1c4:	e00c      	b.n	1f1e0 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1f1c6:	1dfb      	adds	r3, r7, #7
   1f1c8:	781b      	ldrb	r3, [r3, #0]
   1f1ca:	4a0c      	ldr	r2, [pc, #48]	; (1f1fc <sd_mmc_init+0x44>)
   1f1cc:	015b      	lsls	r3, r3, #5
   1f1ce:	18d3      	adds	r3, r2, r3
   1f1d0:	330a      	adds	r3, #10
   1f1d2:	2204      	movs	r2, #4
   1f1d4:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f1d6:	1dfb      	adds	r3, r7, #7
   1f1d8:	781a      	ldrb	r2, [r3, #0]
   1f1da:	1dfb      	adds	r3, r7, #7
   1f1dc:	3201      	adds	r2, #1
   1f1de:	701a      	strb	r2, [r3, #0]
   1f1e0:	1dfb      	adds	r3, r7, #7
   1f1e2:	781b      	ldrb	r3, [r3, #0]
   1f1e4:	2b00      	cmp	r3, #0
   1f1e6:	d0ee      	beq.n	1f1c6 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1f1e8:	4b05      	ldr	r3, [pc, #20]	; (1f200 <sd_mmc_init+0x48>)
   1f1ea:	22ff      	movs	r2, #255	; 0xff
   1f1ec:	701a      	strb	r2, [r3, #0]
	driver_init();
   1f1ee:	4b05      	ldr	r3, [pc, #20]	; (1f204 <sd_mmc_init+0x4c>)
   1f1f0:	4798      	blx	r3
}
   1f1f2:	46c0      	nop			; (mov r8, r8)
   1f1f4:	46bd      	mov	sp, r7
   1f1f6:	b002      	add	sp, #8
   1f1f8:	bd80      	pop	{r7, pc}
   1f1fa:	46c0      	nop			; (mov r8, r8)
   1f1fc:	20004220 	.word	0x20004220
   1f200:	20004240 	.word	0x20004240
   1f204:	0001ff61 	.word	0x0001ff61

0001f208 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1f208:	b590      	push	{r4, r7, lr}
   1f20a:	b085      	sub	sp, #20
   1f20c:	af00      	add	r7, sp, #0
   1f20e:	0002      	movs	r2, r0
   1f210:	1dfb      	adds	r3, r7, #7
   1f212:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f214:	230f      	movs	r3, #15
   1f216:	18fc      	adds	r4, r7, r3
   1f218:	1dfb      	adds	r3, r7, #7
   1f21a:	781b      	ldrb	r3, [r3, #0]
   1f21c:	0018      	movs	r0, r3
   1f21e:	4b13      	ldr	r3, [pc, #76]	; (1f26c <sd_mmc_check+0x64>)
   1f220:	4798      	blx	r3
   1f222:	0003      	movs	r3, r0
   1f224:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1f226:	230f      	movs	r3, #15
   1f228:	18fb      	adds	r3, r7, r3
   1f22a:	781b      	ldrb	r3, [r3, #0]
   1f22c:	2b01      	cmp	r3, #1
   1f22e:	d005      	beq.n	1f23c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1f230:	4b0f      	ldr	r3, [pc, #60]	; (1f270 <sd_mmc_check+0x68>)
   1f232:	4798      	blx	r3
		return sd_mmc_err;
   1f234:	230f      	movs	r3, #15
   1f236:	18fb      	adds	r3, r7, r3
   1f238:	781b      	ldrb	r3, [r3, #0]
   1f23a:	e012      	b.n	1f262 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1f23c:	4b0d      	ldr	r3, [pc, #52]	; (1f274 <sd_mmc_check+0x6c>)
   1f23e:	4798      	blx	r3
   1f240:	1e03      	subs	r3, r0, #0
   1f242:	d007      	beq.n	1f254 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1f244:	4b0c      	ldr	r3, [pc, #48]	; (1f278 <sd_mmc_check+0x70>)
   1f246:	681b      	ldr	r3, [r3, #0]
   1f248:	2200      	movs	r2, #0
   1f24a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1f24c:	4b08      	ldr	r3, [pc, #32]	; (1f270 <sd_mmc_check+0x68>)
   1f24e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1f250:	2301      	movs	r3, #1
   1f252:	e006      	b.n	1f262 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1f254:	4b08      	ldr	r3, [pc, #32]	; (1f278 <sd_mmc_check+0x70>)
   1f256:	681b      	ldr	r3, [r3, #0]
   1f258:	2203      	movs	r2, #3
   1f25a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1f25c:	4b04      	ldr	r3, [pc, #16]	; (1f270 <sd_mmc_check+0x68>)
   1f25e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1f260:	2303      	movs	r3, #3
}
   1f262:	0018      	movs	r0, r3
   1f264:	46bd      	mov	sp, r7
   1f266:	b005      	add	sp, #20
   1f268:	bd90      	pop	{r4, r7, pc}
   1f26a:	46c0      	nop			; (mov r8, r8)
   1f26c:	0001eded 	.word	0x0001eded
   1f270:	0001eee9 	.word	0x0001eee9
   1f274:	0001ef0d 	.word	0x0001ef0d
   1f278:	20004244 	.word	0x20004244

0001f27c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1f27c:	b580      	push	{r7, lr}
   1f27e:	b082      	sub	sp, #8
   1f280:	af00      	add	r7, sp, #0
   1f282:	0002      	movs	r2, r0
   1f284:	1dfb      	adds	r3, r7, #7
   1f286:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f288:	1dfb      	adds	r3, r7, #7
   1f28a:	781b      	ldrb	r3, [r3, #0]
   1f28c:	0018      	movs	r0, r3
   1f28e:	4b07      	ldr	r3, [pc, #28]	; (1f2ac <sd_mmc_get_type+0x30>)
   1f290:	4798      	blx	r3
   1f292:	1e03      	subs	r3, r0, #0
   1f294:	d001      	beq.n	1f29a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1f296:	2300      	movs	r3, #0
   1f298:	e004      	b.n	1f2a4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1f29a:	4b05      	ldr	r3, [pc, #20]	; (1f2b0 <sd_mmc_get_type+0x34>)
   1f29c:	4798      	blx	r3
	return sd_mmc_card->type;
   1f29e:	4b05      	ldr	r3, [pc, #20]	; (1f2b4 <sd_mmc_get_type+0x38>)
   1f2a0:	681b      	ldr	r3, [r3, #0]
   1f2a2:	7adb      	ldrb	r3, [r3, #11]
}
   1f2a4:	0018      	movs	r0, r3
   1f2a6:	46bd      	mov	sp, r7
   1f2a8:	b002      	add	sp, #8
   1f2aa:	bd80      	pop	{r7, pc}
   1f2ac:	0001eded 	.word	0x0001eded
   1f2b0:	0001eee9 	.word	0x0001eee9
   1f2b4:	20004244 	.word	0x20004244

0001f2b8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1f2b8:	b580      	push	{r7, lr}
   1f2ba:	b082      	sub	sp, #8
   1f2bc:	af00      	add	r7, sp, #0
   1f2be:	0002      	movs	r2, r0
   1f2c0:	1dfb      	adds	r3, r7, #7
   1f2c2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f2c4:	1dfb      	adds	r3, r7, #7
   1f2c6:	781b      	ldrb	r3, [r3, #0]
   1f2c8:	0018      	movs	r0, r3
   1f2ca:	4b07      	ldr	r3, [pc, #28]	; (1f2e8 <sd_mmc_get_capacity+0x30>)
   1f2cc:	4798      	blx	r3
   1f2ce:	1e03      	subs	r3, r0, #0
   1f2d0:	d001      	beq.n	1f2d6 <sd_mmc_get_capacity+0x1e>
		return 0;
   1f2d2:	2300      	movs	r3, #0
   1f2d4:	e004      	b.n	1f2e0 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1f2d6:	4b05      	ldr	r3, [pc, #20]	; (1f2ec <sd_mmc_get_capacity+0x34>)
   1f2d8:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1f2da:	4b05      	ldr	r3, [pc, #20]	; (1f2f0 <sd_mmc_get_capacity+0x38>)
   1f2dc:	681b      	ldr	r3, [r3, #0]
   1f2de:	685b      	ldr	r3, [r3, #4]
}
   1f2e0:	0018      	movs	r0, r3
   1f2e2:	46bd      	mov	sp, r7
   1f2e4:	b002      	add	sp, #8
   1f2e6:	bd80      	pop	{r7, pc}
   1f2e8:	0001eded 	.word	0x0001eded
   1f2ec:	0001eee9 	.word	0x0001eee9
   1f2f0:	20004244 	.word	0x20004244

0001f2f4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1f2f4:	b580      	push	{r7, lr}
   1f2f6:	b082      	sub	sp, #8
   1f2f8:	af00      	add	r7, sp, #0
   1f2fa:	0002      	movs	r2, r0
   1f2fc:	1dfb      	adds	r3, r7, #7
   1f2fe:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1f300:	2300      	movs	r3, #0
}
   1f302:	0018      	movs	r0, r3
   1f304:	46bd      	mov	sp, r7
   1f306:	b002      	add	sp, #8
   1f308:	bd80      	pop	{r7, pc}
	...

0001f30c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f30c:	b590      	push	{r4, r7, lr}
   1f30e:	b089      	sub	sp, #36	; 0x24
   1f310:	af02      	add	r7, sp, #8
   1f312:	6039      	str	r1, [r7, #0]
   1f314:	0011      	movs	r1, r2
   1f316:	1dfb      	adds	r3, r7, #7
   1f318:	1c02      	adds	r2, r0, #0
   1f31a:	701a      	strb	r2, [r3, #0]
   1f31c:	1d3b      	adds	r3, r7, #4
   1f31e:	1c0a      	adds	r2, r1, #0
   1f320:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f322:	230f      	movs	r3, #15
   1f324:	18fc      	adds	r4, r7, r3
   1f326:	1dfb      	adds	r3, r7, #7
   1f328:	781b      	ldrb	r3, [r3, #0]
   1f32a:	0018      	movs	r0, r3
   1f32c:	4b29      	ldr	r3, [pc, #164]	; (1f3d4 <sd_mmc_init_read_blocks+0xc8>)
   1f32e:	4798      	blx	r3
   1f330:	0003      	movs	r3, r0
   1f332:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f334:	230f      	movs	r3, #15
   1f336:	18fb      	adds	r3, r7, r3
   1f338:	781b      	ldrb	r3, [r3, #0]
   1f33a:	2b00      	cmp	r3, #0
   1f33c:	d003      	beq.n	1f346 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1f33e:	230f      	movs	r3, #15
   1f340:	18fb      	adds	r3, r7, r3
   1f342:	781b      	ldrb	r3, [r3, #0]
   1f344:	e041      	b.n	1f3ca <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1f346:	4b24      	ldr	r3, [pc, #144]	; (1f3d8 <sd_mmc_init_read_blocks+0xcc>)
   1f348:	4798      	blx	r3
   1f34a:	0003      	movs	r3, r0
   1f34c:	001a      	movs	r2, r3
   1f34e:	2301      	movs	r3, #1
   1f350:	4053      	eors	r3, r2
   1f352:	b2db      	uxtb	r3, r3
   1f354:	2b00      	cmp	r3, #0
   1f356:	d003      	beq.n	1f360 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1f358:	4b20      	ldr	r3, [pc, #128]	; (1f3dc <sd_mmc_init_read_blocks+0xd0>)
   1f35a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f35c:	2305      	movs	r3, #5
   1f35e:	e034      	b.n	1f3ca <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1f360:	1d3b      	adds	r3, r7, #4
   1f362:	881b      	ldrh	r3, [r3, #0]
   1f364:	2b01      	cmp	r3, #1
   1f366:	d902      	bls.n	1f36e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1f368:	4b1d      	ldr	r3, [pc, #116]	; (1f3e0 <sd_mmc_init_read_blocks+0xd4>)
   1f36a:	617b      	str	r3, [r7, #20]
   1f36c:	e001      	b.n	1f372 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1f36e:	4b1d      	ldr	r3, [pc, #116]	; (1f3e4 <sd_mmc_init_read_blocks+0xd8>)
   1f370:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f372:	4b1d      	ldr	r3, [pc, #116]	; (1f3e8 <sd_mmc_init_read_blocks+0xdc>)
   1f374:	681b      	ldr	r3, [r3, #0]
   1f376:	7adb      	ldrb	r3, [r3, #11]
   1f378:	001a      	movs	r2, r3
   1f37a:	2308      	movs	r3, #8
   1f37c:	4013      	ands	r3, r2
   1f37e:	d002      	beq.n	1f386 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1f380:	683b      	ldr	r3, [r7, #0]
   1f382:	613b      	str	r3, [r7, #16]
   1f384:	e002      	b.n	1f38c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f386:	683b      	ldr	r3, [r7, #0]
   1f388:	025b      	lsls	r3, r3, #9
   1f38a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f38c:	1d3b      	adds	r3, r7, #4
   1f38e:	881c      	ldrh	r4, [r3, #0]
   1f390:	2380      	movs	r3, #128	; 0x80
   1f392:	009a      	lsls	r2, r3, #2
   1f394:	6939      	ldr	r1, [r7, #16]
   1f396:	6978      	ldr	r0, [r7, #20]
   1f398:	2301      	movs	r3, #1
   1f39a:	9300      	str	r3, [sp, #0]
   1f39c:	0023      	movs	r3, r4
   1f39e:	4c13      	ldr	r4, [pc, #76]	; (1f3ec <sd_mmc_init_read_blocks+0xe0>)
   1f3a0:	47a0      	blx	r4
   1f3a2:	0003      	movs	r3, r0
   1f3a4:	001a      	movs	r2, r3
   1f3a6:	2301      	movs	r3, #1
   1f3a8:	4053      	eors	r3, r2
   1f3aa:	b2db      	uxtb	r3, r3
   1f3ac:	2b00      	cmp	r3, #0
   1f3ae:	d003      	beq.n	1f3b8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1f3b0:	4b0a      	ldr	r3, [pc, #40]	; (1f3dc <sd_mmc_init_read_blocks+0xd0>)
   1f3b2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f3b4:	2305      	movs	r3, #5
   1f3b6:	e008      	b.n	1f3ca <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1f3b8:	4b0d      	ldr	r3, [pc, #52]	; (1f3f0 <sd_mmc_init_read_blocks+0xe4>)
   1f3ba:	1d3a      	adds	r2, r7, #4
   1f3bc:	8812      	ldrh	r2, [r2, #0]
   1f3be:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1f3c0:	4b0c      	ldr	r3, [pc, #48]	; (1f3f4 <sd_mmc_init_read_blocks+0xe8>)
   1f3c2:	1d3a      	adds	r2, r7, #4
   1f3c4:	8812      	ldrh	r2, [r2, #0]
   1f3c6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f3c8:	2300      	movs	r3, #0
}
   1f3ca:	0018      	movs	r0, r3
   1f3cc:	46bd      	mov	sp, r7
   1f3ce:	b007      	add	sp, #28
   1f3d0:	bd90      	pop	{r4, r7, pc}
   1f3d2:	46c0      	nop			; (mov r8, r8)
   1f3d4:	0001eded 	.word	0x0001eded
   1f3d8:	0001ec89 	.word	0x0001ec89
   1f3dc:	0001eee9 	.word	0x0001eee9
   1f3e0:	00101112 	.word	0x00101112
   1f3e4:	00081111 	.word	0x00081111
   1f3e8:	20004244 	.word	0x20004244
   1f3ec:	00020169 	.word	0x00020169
   1f3f0:	2000424a 	.word	0x2000424a
   1f3f4:	20004248 	.word	0x20004248

0001f3f8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1f3f8:	b580      	push	{r7, lr}
   1f3fa:	b082      	sub	sp, #8
   1f3fc:	af00      	add	r7, sp, #0
   1f3fe:	6078      	str	r0, [r7, #4]
   1f400:	000a      	movs	r2, r1
   1f402:	1cbb      	adds	r3, r7, #2
   1f404:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1f406:	1cbb      	adds	r3, r7, #2
   1f408:	881a      	ldrh	r2, [r3, #0]
   1f40a:	687b      	ldr	r3, [r7, #4]
   1f40c:	0011      	movs	r1, r2
   1f40e:	0018      	movs	r0, r3
   1f410:	4b0d      	ldr	r3, [pc, #52]	; (1f448 <sd_mmc_start_read_blocks+0x50>)
   1f412:	4798      	blx	r3
   1f414:	0003      	movs	r3, r0
   1f416:	001a      	movs	r2, r3
   1f418:	2301      	movs	r3, #1
   1f41a:	4053      	eors	r3, r2
   1f41c:	b2db      	uxtb	r3, r3
   1f41e:	2b00      	cmp	r3, #0
   1f420:	d004      	beq.n	1f42c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1f422:	4b0a      	ldr	r3, [pc, #40]	; (1f44c <sd_mmc_start_read_blocks+0x54>)
   1f424:	2200      	movs	r2, #0
   1f426:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1f428:	2305      	movs	r3, #5
   1f42a:	e008      	b.n	1f43e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1f42c:	4b07      	ldr	r3, [pc, #28]	; (1f44c <sd_mmc_start_read_blocks+0x54>)
   1f42e:	881a      	ldrh	r2, [r3, #0]
   1f430:	1cbb      	adds	r3, r7, #2
   1f432:	881b      	ldrh	r3, [r3, #0]
   1f434:	1ad3      	subs	r3, r2, r3
   1f436:	b29a      	uxth	r2, r3
   1f438:	4b04      	ldr	r3, [pc, #16]	; (1f44c <sd_mmc_start_read_blocks+0x54>)
   1f43a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f43c:	2300      	movs	r3, #0
}
   1f43e:	0018      	movs	r0, r3
   1f440:	46bd      	mov	sp, r7
   1f442:	b002      	add	sp, #8
   1f444:	bd80      	pop	{r7, pc}
   1f446:	46c0      	nop			; (mov r8, r8)
   1f448:	00020439 	.word	0x00020439
   1f44c:	2000424a 	.word	0x2000424a

0001f450 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1f450:	b580      	push	{r7, lr}
   1f452:	b082      	sub	sp, #8
   1f454:	af00      	add	r7, sp, #0
   1f456:	0002      	movs	r2, r0
   1f458:	1dfb      	adds	r3, r7, #7
   1f45a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1f45c:	4b1c      	ldr	r3, [pc, #112]	; (1f4d0 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1f45e:	4798      	blx	r3
   1f460:	0003      	movs	r3, r0
   1f462:	001a      	movs	r2, r3
   1f464:	2301      	movs	r3, #1
   1f466:	4053      	eors	r3, r2
   1f468:	b2db      	uxtb	r3, r3
   1f46a:	2b00      	cmp	r3, #0
   1f46c:	d001      	beq.n	1f472 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1f46e:	2305      	movs	r3, #5
   1f470:	e029      	b.n	1f4c6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1f472:	1dfb      	adds	r3, r7, #7
   1f474:	781b      	ldrb	r3, [r3, #0]
   1f476:	2b00      	cmp	r3, #0
   1f478:	d003      	beq.n	1f482 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1f47a:	4b16      	ldr	r3, [pc, #88]	; (1f4d4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1f47c:	2200      	movs	r2, #0
   1f47e:	801a      	strh	r2, [r3, #0]
   1f480:	e005      	b.n	1f48e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1f482:	4b14      	ldr	r3, [pc, #80]	; (1f4d4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1f484:	881b      	ldrh	r3, [r3, #0]
   1f486:	2b00      	cmp	r3, #0
   1f488:	d001      	beq.n	1f48e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1f48a:	2300      	movs	r3, #0
   1f48c:	e01b      	b.n	1f4c6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1f48e:	4b12      	ldr	r3, [pc, #72]	; (1f4d8 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1f490:	881b      	ldrh	r3, [r3, #0]
   1f492:	2b01      	cmp	r3, #1
   1f494:	d103      	bne.n	1f49e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1f496:	4b11      	ldr	r3, [pc, #68]	; (1f4dc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1f498:	4798      	blx	r3
		return SD_MMC_OK;
   1f49a:	2300      	movs	r3, #0
   1f49c:	e013      	b.n	1f4c6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1f49e:	4b10      	ldr	r3, [pc, #64]	; (1f4e0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1f4a0:	2100      	movs	r1, #0
   1f4a2:	0018      	movs	r0, r3
   1f4a4:	4b0f      	ldr	r3, [pc, #60]	; (1f4e4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1f4a6:	4798      	blx	r3
   1f4a8:	0003      	movs	r3, r0
   1f4aa:	001a      	movs	r2, r3
   1f4ac:	2301      	movs	r3, #1
   1f4ae:	4053      	eors	r3, r2
   1f4b0:	b2db      	uxtb	r3, r3
   1f4b2:	2b00      	cmp	r3, #0
   1f4b4:	d004      	beq.n	1f4c0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1f4b6:	4b0a      	ldr	r3, [pc, #40]	; (1f4e0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1f4b8:	2100      	movs	r1, #0
   1f4ba:	0018      	movs	r0, r3
   1f4bc:	4b09      	ldr	r3, [pc, #36]	; (1f4e4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1f4be:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1f4c0:	4b06      	ldr	r3, [pc, #24]	; (1f4dc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1f4c2:	4798      	blx	r3
	return SD_MMC_OK;
   1f4c4:	2300      	movs	r3, #0
}
   1f4c6:	0018      	movs	r0, r3
   1f4c8:	46bd      	mov	sp, r7
   1f4ca:	b002      	add	sp, #8
   1f4cc:	bd80      	pop	{r7, pc}
   1f4ce:	46c0      	nop			; (mov r8, r8)
   1f4d0:	000204dd 	.word	0x000204dd
   1f4d4:	2000424a 	.word	0x2000424a
   1f4d8:	20004248 	.word	0x20004248
   1f4dc:	0001eee9 	.word	0x0001eee9
   1f4e0:	0000310c 	.word	0x0000310c
   1f4e4:	00020141 	.word	0x00020141

0001f4e8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f4e8:	b590      	push	{r4, r7, lr}
   1f4ea:	b089      	sub	sp, #36	; 0x24
   1f4ec:	af02      	add	r7, sp, #8
   1f4ee:	6039      	str	r1, [r7, #0]
   1f4f0:	0011      	movs	r1, r2
   1f4f2:	1dfb      	adds	r3, r7, #7
   1f4f4:	1c02      	adds	r2, r0, #0
   1f4f6:	701a      	strb	r2, [r3, #0]
   1f4f8:	1d3b      	adds	r3, r7, #4
   1f4fa:	1c0a      	adds	r2, r1, #0
   1f4fc:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f4fe:	230f      	movs	r3, #15
   1f500:	18fc      	adds	r4, r7, r3
   1f502:	1dfb      	adds	r3, r7, #7
   1f504:	781b      	ldrb	r3, [r3, #0]
   1f506:	0018      	movs	r0, r3
   1f508:	4b28      	ldr	r3, [pc, #160]	; (1f5ac <sd_mmc_init_write_blocks+0xc4>)
   1f50a:	4798      	blx	r3
   1f50c:	0003      	movs	r3, r0
   1f50e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f510:	230f      	movs	r3, #15
   1f512:	18fb      	adds	r3, r7, r3
   1f514:	781b      	ldrb	r3, [r3, #0]
   1f516:	2b00      	cmp	r3, #0
   1f518:	d003      	beq.n	1f522 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1f51a:	230f      	movs	r3, #15
   1f51c:	18fb      	adds	r3, r7, r3
   1f51e:	781b      	ldrb	r3, [r3, #0]
   1f520:	e03f      	b.n	1f5a2 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1f522:	1dfb      	adds	r3, r7, #7
   1f524:	781b      	ldrb	r3, [r3, #0]
   1f526:	0018      	movs	r0, r3
   1f528:	4b21      	ldr	r3, [pc, #132]	; (1f5b0 <sd_mmc_init_write_blocks+0xc8>)
   1f52a:	4798      	blx	r3
   1f52c:	1e03      	subs	r3, r0, #0
   1f52e:	d003      	beq.n	1f538 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1f530:	4b20      	ldr	r3, [pc, #128]	; (1f5b4 <sd_mmc_init_write_blocks+0xcc>)
   1f532:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1f534:	2307      	movs	r3, #7
   1f536:	e034      	b.n	1f5a2 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1f538:	1d3b      	adds	r3, r7, #4
   1f53a:	881b      	ldrh	r3, [r3, #0]
   1f53c:	2b01      	cmp	r3, #1
   1f53e:	d902      	bls.n	1f546 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1f540:	4b1d      	ldr	r3, [pc, #116]	; (1f5b8 <sd_mmc_init_write_blocks+0xd0>)
   1f542:	617b      	str	r3, [r7, #20]
   1f544:	e001      	b.n	1f54a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1f546:	4b1d      	ldr	r3, [pc, #116]	; (1f5bc <sd_mmc_init_write_blocks+0xd4>)
   1f548:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f54a:	4b1d      	ldr	r3, [pc, #116]	; (1f5c0 <sd_mmc_init_write_blocks+0xd8>)
   1f54c:	681b      	ldr	r3, [r3, #0]
   1f54e:	7adb      	ldrb	r3, [r3, #11]
   1f550:	001a      	movs	r2, r3
   1f552:	2308      	movs	r3, #8
   1f554:	4013      	ands	r3, r2
   1f556:	d002      	beq.n	1f55e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1f558:	683b      	ldr	r3, [r7, #0]
   1f55a:	613b      	str	r3, [r7, #16]
   1f55c:	e002      	b.n	1f564 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f55e:	683b      	ldr	r3, [r7, #0]
   1f560:	025b      	lsls	r3, r3, #9
   1f562:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f564:	1d3b      	adds	r3, r7, #4
   1f566:	881c      	ldrh	r4, [r3, #0]
   1f568:	2380      	movs	r3, #128	; 0x80
   1f56a:	009a      	lsls	r2, r3, #2
   1f56c:	6939      	ldr	r1, [r7, #16]
   1f56e:	6978      	ldr	r0, [r7, #20]
   1f570:	2301      	movs	r3, #1
   1f572:	9300      	str	r3, [sp, #0]
   1f574:	0023      	movs	r3, r4
   1f576:	4c13      	ldr	r4, [pc, #76]	; (1f5c4 <sd_mmc_init_write_blocks+0xdc>)
   1f578:	47a0      	blx	r4
   1f57a:	0003      	movs	r3, r0
   1f57c:	001a      	movs	r2, r3
   1f57e:	2301      	movs	r3, #1
   1f580:	4053      	eors	r3, r2
   1f582:	b2db      	uxtb	r3, r3
   1f584:	2b00      	cmp	r3, #0
   1f586:	d003      	beq.n	1f590 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1f588:	4b0a      	ldr	r3, [pc, #40]	; (1f5b4 <sd_mmc_init_write_blocks+0xcc>)
   1f58a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f58c:	2305      	movs	r3, #5
   1f58e:	e008      	b.n	1f5a2 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1f590:	4b0d      	ldr	r3, [pc, #52]	; (1f5c8 <sd_mmc_init_write_blocks+0xe0>)
   1f592:	1d3a      	adds	r2, r7, #4
   1f594:	8812      	ldrh	r2, [r2, #0]
   1f596:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1f598:	4b0c      	ldr	r3, [pc, #48]	; (1f5cc <sd_mmc_init_write_blocks+0xe4>)
   1f59a:	1d3a      	adds	r2, r7, #4
   1f59c:	8812      	ldrh	r2, [r2, #0]
   1f59e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f5a0:	2300      	movs	r3, #0
}
   1f5a2:	0018      	movs	r0, r3
   1f5a4:	46bd      	mov	sp, r7
   1f5a6:	b007      	add	sp, #28
   1f5a8:	bd90      	pop	{r4, r7, pc}
   1f5aa:	46c0      	nop			; (mov r8, r8)
   1f5ac:	0001eded 	.word	0x0001eded
   1f5b0:	0001f2f5 	.word	0x0001f2f5
   1f5b4:	0001eee9 	.word	0x0001eee9
   1f5b8:	00109119 	.word	0x00109119
   1f5bc:	00089118 	.word	0x00089118
   1f5c0:	20004244 	.word	0x20004244
   1f5c4:	00020169 	.word	0x00020169
   1f5c8:	2000424a 	.word	0x2000424a
   1f5cc:	20004248 	.word	0x20004248

0001f5d0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f5d0:	b580      	push	{r7, lr}
   1f5d2:	b082      	sub	sp, #8
   1f5d4:	af00      	add	r7, sp, #0
   1f5d6:	6078      	str	r0, [r7, #4]
   1f5d8:	000a      	movs	r2, r1
   1f5da:	1cbb      	adds	r3, r7, #2
   1f5dc:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1f5de:	1cbb      	adds	r3, r7, #2
   1f5e0:	881a      	ldrh	r2, [r3, #0]
   1f5e2:	687b      	ldr	r3, [r7, #4]
   1f5e4:	0011      	movs	r1, r2
   1f5e6:	0018      	movs	r0, r3
   1f5e8:	4b0d      	ldr	r3, [pc, #52]	; (1f620 <sd_mmc_start_write_blocks+0x50>)
   1f5ea:	4798      	blx	r3
   1f5ec:	0003      	movs	r3, r0
   1f5ee:	001a      	movs	r2, r3
   1f5f0:	2301      	movs	r3, #1
   1f5f2:	4053      	eors	r3, r2
   1f5f4:	b2db      	uxtb	r3, r3
   1f5f6:	2b00      	cmp	r3, #0
   1f5f8:	d004      	beq.n	1f604 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1f5fa:	4b0a      	ldr	r3, [pc, #40]	; (1f624 <sd_mmc_start_write_blocks+0x54>)
   1f5fc:	2200      	movs	r2, #0
   1f5fe:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1f600:	2305      	movs	r3, #5
   1f602:	e008      	b.n	1f616 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1f604:	4b07      	ldr	r3, [pc, #28]	; (1f624 <sd_mmc_start_write_blocks+0x54>)
   1f606:	881a      	ldrh	r2, [r3, #0]
   1f608:	1cbb      	adds	r3, r7, #2
   1f60a:	881b      	ldrh	r3, [r3, #0]
   1f60c:	1ad3      	subs	r3, r2, r3
   1f60e:	b29a      	uxth	r2, r3
   1f610:	4b04      	ldr	r3, [pc, #16]	; (1f624 <sd_mmc_start_write_blocks+0x54>)
   1f612:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f614:	2300      	movs	r3, #0
}
   1f616:	0018      	movs	r0, r3
   1f618:	46bd      	mov	sp, r7
   1f61a:	b002      	add	sp, #8
   1f61c:	bd80      	pop	{r7, pc}
   1f61e:	46c0      	nop			; (mov r8, r8)
   1f620:	000204e9 	.word	0x000204e9
   1f624:	2000424a 	.word	0x2000424a

0001f628 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1f628:	b580      	push	{r7, lr}
   1f62a:	b082      	sub	sp, #8
   1f62c:	af00      	add	r7, sp, #0
   1f62e:	0002      	movs	r2, r0
   1f630:	1dfb      	adds	r3, r7, #7
   1f632:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1f634:	4b13      	ldr	r3, [pc, #76]	; (1f684 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1f636:	4798      	blx	r3
   1f638:	0003      	movs	r3, r0
   1f63a:	001a      	movs	r2, r3
   1f63c:	2301      	movs	r3, #1
   1f63e:	4053      	eors	r3, r2
   1f640:	b2db      	uxtb	r3, r3
   1f642:	2b00      	cmp	r3, #0
   1f644:	d001      	beq.n	1f64a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1f646:	2305      	movs	r3, #5
   1f648:	e018      	b.n	1f67c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1f64a:	1dfb      	adds	r3, r7, #7
   1f64c:	781b      	ldrb	r3, [r3, #0]
   1f64e:	2b00      	cmp	r3, #0
   1f650:	d003      	beq.n	1f65a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1f652:	4b0d      	ldr	r3, [pc, #52]	; (1f688 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1f654:	2200      	movs	r2, #0
   1f656:	801a      	strh	r2, [r3, #0]
   1f658:	e005      	b.n	1f666 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1f65a:	4b0b      	ldr	r3, [pc, #44]	; (1f688 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1f65c:	881b      	ldrh	r3, [r3, #0]
   1f65e:	2b00      	cmp	r3, #0
   1f660:	d001      	beq.n	1f666 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1f662:	2300      	movs	r3, #0
   1f664:	e00a      	b.n	1f67c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1f666:	4b09      	ldr	r3, [pc, #36]	; (1f68c <sd_mmc_wait_end_of_write_blocks+0x64>)
   1f668:	881b      	ldrh	r3, [r3, #0]
   1f66a:	2b01      	cmp	r3, #1
   1f66c:	d103      	bne.n	1f676 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1f66e:	4b08      	ldr	r3, [pc, #32]	; (1f690 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1f670:	4798      	blx	r3
		return SD_MMC_OK;
   1f672:	2300      	movs	r3, #0
   1f674:	e002      	b.n	1f67c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1f676:	4b06      	ldr	r3, [pc, #24]	; (1f690 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1f678:	4798      	blx	r3
	return SD_MMC_OK;
   1f67a:	2300      	movs	r3, #0
}
   1f67c:	0018      	movs	r0, r3
   1f67e:	46bd      	mov	sp, r7
   1f680:	b002      	add	sp, #8
   1f682:	bd80      	pop	{r7, pc}
   1f684:	000205a9 	.word	0x000205a9
   1f688:	2000424a 	.word	0x2000424a
   1f68c:	20004248 	.word	0x20004248
   1f690:	0001eee9 	.word	0x0001eee9

0001f694 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1f694:	b580      	push	{r7, lr}
   1f696:	b082      	sub	sp, #8
   1f698:	af00      	add	r7, sp, #0
   1f69a:	0002      	movs	r2, r0
   1f69c:	1dfb      	adds	r3, r7, #7
   1f69e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1f6a0:	1dfb      	adds	r3, r7, #7
   1f6a2:	781b      	ldrb	r3, [r3, #0]
   1f6a4:	0018      	movs	r0, r3
   1f6a6:	4b16      	ldr	r3, [pc, #88]	; (1f700 <sd_mmc_test_unit_ready+0x6c>)
   1f6a8:	4798      	blx	r3
   1f6aa:	0003      	movs	r3, r0
   1f6ac:	2b01      	cmp	r3, #1
   1f6ae:	d019      	beq.n	1f6e4 <sd_mmc_test_unit_ready+0x50>
   1f6b0:	2b02      	cmp	r3, #2
   1f6b2:	d019      	beq.n	1f6e8 <sd_mmc_test_unit_ready+0x54>
   1f6b4:	2b00      	cmp	r3, #0
   1f6b6:	d11e      	bne.n	1f6f6 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1f6b8:	1dfb      	adds	r3, r7, #7
   1f6ba:	781b      	ldrb	r3, [r3, #0]
   1f6bc:	4a11      	ldr	r2, [pc, #68]	; (1f704 <sd_mmc_test_unit_ready+0x70>)
   1f6be:	5cd3      	ldrb	r3, [r2, r3]
   1f6c0:	2b00      	cmp	r3, #0
   1f6c2:	d001      	beq.n	1f6c8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1f6c4:	2302      	movs	r3, #2
   1f6c6:	e017      	b.n	1f6f8 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1f6c8:	1dfb      	adds	r3, r7, #7
   1f6ca:	781b      	ldrb	r3, [r3, #0]
   1f6cc:	0018      	movs	r0, r3
   1f6ce:	4b0e      	ldr	r3, [pc, #56]	; (1f708 <sd_mmc_test_unit_ready+0x74>)
   1f6d0:	4798      	blx	r3
   1f6d2:	0003      	movs	r3, r0
   1f6d4:	001a      	movs	r2, r3
   1f6d6:	2303      	movs	r3, #3
   1f6d8:	4013      	ands	r3, r2
   1f6da:	d001      	beq.n	1f6e0 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1f6dc:	2300      	movs	r3, #0
   1f6de:	e00b      	b.n	1f6f8 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1f6e0:	2302      	movs	r3, #2
   1f6e2:	e009      	b.n	1f6f8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1f6e4:	2303      	movs	r3, #3
   1f6e6:	e007      	b.n	1f6f8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1f6e8:	1dfb      	adds	r3, r7, #7
   1f6ea:	781b      	ldrb	r3, [r3, #0]
   1f6ec:	4a05      	ldr	r2, [pc, #20]	; (1f704 <sd_mmc_test_unit_ready+0x70>)
   1f6ee:	2100      	movs	r1, #0
   1f6f0:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1f6f2:	2302      	movs	r3, #2
   1f6f4:	e000      	b.n	1f6f8 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1f6f6:	2301      	movs	r3, #1
	}
}
   1f6f8:	0018      	movs	r0, r3
   1f6fa:	46bd      	mov	sp, r7
   1f6fc:	b002      	add	sp, #8
   1f6fe:	bd80      	pop	{r7, pc}
   1f700:	0001f209 	.word	0x0001f209
   1f704:	2000424c 	.word	0x2000424c
   1f708:	0001f27d 	.word	0x0001f27d

0001f70c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1f70c:	b580      	push	{r7, lr}
   1f70e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1f710:	2000      	movs	r0, #0
   1f712:	4b03      	ldr	r3, [pc, #12]	; (1f720 <sd_mmc_test_unit_ready_0+0x14>)
   1f714:	4798      	blx	r3
   1f716:	0003      	movs	r3, r0
}
   1f718:	0018      	movs	r0, r3
   1f71a:	46bd      	mov	sp, r7
   1f71c:	bd80      	pop	{r7, pc}
   1f71e:	46c0      	nop			; (mov r8, r8)
   1f720:	0001f695 	.word	0x0001f695

0001f724 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1f724:	b580      	push	{r7, lr}
   1f726:	b082      	sub	sp, #8
   1f728:	af00      	add	r7, sp, #0
   1f72a:	0002      	movs	r2, r0
   1f72c:	6039      	str	r1, [r7, #0]
   1f72e:	1dfb      	adds	r3, r7, #7
   1f730:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1f732:	1dfb      	adds	r3, r7, #7
   1f734:	781b      	ldrb	r3, [r3, #0]
   1f736:	0018      	movs	r0, r3
   1f738:	4b08      	ldr	r3, [pc, #32]	; (1f75c <sd_mmc_read_capacity+0x38>)
   1f73a:	4798      	blx	r3
   1f73c:	0003      	movs	r3, r0
   1f73e:	005b      	lsls	r3, r3, #1
   1f740:	1e5a      	subs	r2, r3, #1
   1f742:	683b      	ldr	r3, [r7, #0]
   1f744:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1f746:	1dfb      	adds	r3, r7, #7
   1f748:	781b      	ldrb	r3, [r3, #0]
   1f74a:	0018      	movs	r0, r3
   1f74c:	4b04      	ldr	r3, [pc, #16]	; (1f760 <sd_mmc_read_capacity+0x3c>)
   1f74e:	4798      	blx	r3
   1f750:	0003      	movs	r3, r0
}
   1f752:	0018      	movs	r0, r3
   1f754:	46bd      	mov	sp, r7
   1f756:	b002      	add	sp, #8
   1f758:	bd80      	pop	{r7, pc}
   1f75a:	46c0      	nop			; (mov r8, r8)
   1f75c:	0001f2b9 	.word	0x0001f2b9
   1f760:	0001f695 	.word	0x0001f695

0001f764 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1f764:	b580      	push	{r7, lr}
   1f766:	b082      	sub	sp, #8
   1f768:	af00      	add	r7, sp, #0
   1f76a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1f76c:	687b      	ldr	r3, [r7, #4]
   1f76e:	0019      	movs	r1, r3
   1f770:	2000      	movs	r0, #0
   1f772:	4b03      	ldr	r3, [pc, #12]	; (1f780 <sd_mmc_read_capacity_0+0x1c>)
   1f774:	4798      	blx	r3
   1f776:	0003      	movs	r3, r0
}
   1f778:	0018      	movs	r0, r3
   1f77a:	46bd      	mov	sp, r7
   1f77c:	b002      	add	sp, #8
   1f77e:	bd80      	pop	{r7, pc}
   1f780:	0001f725 	.word	0x0001f725

0001f784 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1f784:	b580      	push	{r7, lr}
   1f786:	b082      	sub	sp, #8
   1f788:	af00      	add	r7, sp, #0
   1f78a:	0002      	movs	r2, r0
   1f78c:	1dfb      	adds	r3, r7, #7
   1f78e:	701a      	strb	r2, [r3, #0]
   1f790:	1dbb      	adds	r3, r7, #6
   1f792:	1c0a      	adds	r2, r1, #0
   1f794:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1f796:	1dfb      	adds	r3, r7, #7
   1f798:	781b      	ldrb	r3, [r3, #0]
   1f79a:	4a04      	ldr	r2, [pc, #16]	; (1f7ac <sd_mmc_unload+0x28>)
   1f79c:	1db9      	adds	r1, r7, #6
   1f79e:	7809      	ldrb	r1, [r1, #0]
   1f7a0:	54d1      	strb	r1, [r2, r3]
	return true;
   1f7a2:	2301      	movs	r3, #1
}
   1f7a4:	0018      	movs	r0, r3
   1f7a6:	46bd      	mov	sp, r7
   1f7a8:	b002      	add	sp, #8
   1f7aa:	bd80      	pop	{r7, pc}
   1f7ac:	2000424c 	.word	0x2000424c

0001f7b0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1f7b0:	b580      	push	{r7, lr}
   1f7b2:	b082      	sub	sp, #8
   1f7b4:	af00      	add	r7, sp, #0
   1f7b6:	0002      	movs	r2, r0
   1f7b8:	1dfb      	adds	r3, r7, #7
   1f7ba:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1f7bc:	1dfb      	adds	r3, r7, #7
   1f7be:	781b      	ldrb	r3, [r3, #0]
   1f7c0:	0019      	movs	r1, r3
   1f7c2:	2000      	movs	r0, #0
   1f7c4:	4b03      	ldr	r3, [pc, #12]	; (1f7d4 <sd_mmc_unload_0+0x24>)
   1f7c6:	4798      	blx	r3
   1f7c8:	0003      	movs	r3, r0
}
   1f7ca:	0018      	movs	r0, r3
   1f7cc:	46bd      	mov	sp, r7
   1f7ce:	b002      	add	sp, #8
   1f7d0:	bd80      	pop	{r7, pc}
   1f7d2:	46c0      	nop			; (mov r8, r8)
   1f7d4:	0001f785 	.word	0x0001f785

0001f7d8 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1f7d8:	b580      	push	{r7, lr}
   1f7da:	b082      	sub	sp, #8
   1f7dc:	af00      	add	r7, sp, #0
   1f7de:	0002      	movs	r2, r0
   1f7e0:	1dfb      	adds	r3, r7, #7
   1f7e2:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1f7e4:	1dfb      	adds	r3, r7, #7
   1f7e6:	781b      	ldrb	r3, [r3, #0]
   1f7e8:	0018      	movs	r0, r3
   1f7ea:	4b03      	ldr	r3, [pc, #12]	; (1f7f8 <sd_mmc_wr_protect+0x20>)
   1f7ec:	4798      	blx	r3
   1f7ee:	0003      	movs	r3, r0
}
   1f7f0:	0018      	movs	r0, r3
   1f7f2:	46bd      	mov	sp, r7
   1f7f4:	b002      	add	sp, #8
   1f7f6:	bd80      	pop	{r7, pc}
   1f7f8:	0001f2f5 	.word	0x0001f2f5

0001f7fc <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1f7fc:	b580      	push	{r7, lr}
   1f7fe:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1f800:	2000      	movs	r0, #0
   1f802:	4b03      	ldr	r3, [pc, #12]	; (1f810 <sd_mmc_wr_protect_0+0x14>)
   1f804:	4798      	blx	r3
   1f806:	0003      	movs	r3, r0
}
   1f808:	0018      	movs	r0, r3
   1f80a:	46bd      	mov	sp, r7
   1f80c:	bd80      	pop	{r7, pc}
   1f80e:	46c0      	nop			; (mov r8, r8)
   1f810:	0001f7d9 	.word	0x0001f7d9

0001f814 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1f814:	b580      	push	{r7, lr}
   1f816:	b082      	sub	sp, #8
   1f818:	af00      	add	r7, sp, #0
   1f81a:	0002      	movs	r2, r0
   1f81c:	1dfb      	adds	r3, r7, #7
   1f81e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1f820:	2301      	movs	r3, #1
}
   1f822:	0018      	movs	r0, r3
   1f824:	46bd      	mov	sp, r7
   1f826:	b002      	add	sp, #8
   1f828:	bd80      	pop	{r7, pc}
	...

0001f82c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1f82c:	b580      	push	{r7, lr}
   1f82e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1f830:	2000      	movs	r0, #0
   1f832:	4b03      	ldr	r3, [pc, #12]	; (1f840 <sd_mmc_removal_0+0x14>)
   1f834:	4798      	blx	r3
   1f836:	0003      	movs	r3, r0
}
   1f838:	0018      	movs	r0, r3
   1f83a:	46bd      	mov	sp, r7
   1f83c:	bd80      	pop	{r7, pc}
   1f83e:	46c0      	nop			; (mov r8, r8)
   1f840:	0001f815 	.word	0x0001f815

0001f844 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1f844:	b580      	push	{r7, lr}
   1f846:	b084      	sub	sp, #16
   1f848:	af00      	add	r7, sp, #0
   1f84a:	60b9      	str	r1, [r7, #8]
   1f84c:	607a      	str	r2, [r7, #4]
   1f84e:	230f      	movs	r3, #15
   1f850:	18fb      	adds	r3, r7, r3
   1f852:	1c02      	adds	r2, r0, #0
   1f854:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1f856:	68b9      	ldr	r1, [r7, #8]
   1f858:	230f      	movs	r3, #15
   1f85a:	18fb      	adds	r3, r7, r3
   1f85c:	781b      	ldrb	r3, [r3, #0]
   1f85e:	2201      	movs	r2, #1
   1f860:	0018      	movs	r0, r3
   1f862:	4b10      	ldr	r3, [pc, #64]	; (1f8a4 <sd_mmc_mem_2_ram+0x60>)
   1f864:	4798      	blx	r3
   1f866:	1e03      	subs	r3, r0, #0
   1f868:	d005      	beq.n	1f876 <sd_mmc_mem_2_ram+0x32>
   1f86a:	2b02      	cmp	r3, #2
   1f86c:	d101      	bne.n	1f872 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f86e:	2302      	movs	r3, #2
   1f870:	e013      	b.n	1f89a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1f872:	2301      	movs	r3, #1
   1f874:	e011      	b.n	1f89a <sd_mmc_mem_2_ram+0x56>
		break;
   1f876:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1f878:	687b      	ldr	r3, [r7, #4]
   1f87a:	2101      	movs	r1, #1
   1f87c:	0018      	movs	r0, r3
   1f87e:	4b0a      	ldr	r3, [pc, #40]	; (1f8a8 <sd_mmc_mem_2_ram+0x64>)
   1f880:	4798      	blx	r3
   1f882:	1e03      	subs	r3, r0, #0
   1f884:	d001      	beq.n	1f88a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1f886:	2301      	movs	r3, #1
   1f888:	e007      	b.n	1f89a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1f88a:	2000      	movs	r0, #0
   1f88c:	4b07      	ldr	r3, [pc, #28]	; (1f8ac <sd_mmc_mem_2_ram+0x68>)
   1f88e:	4798      	blx	r3
   1f890:	1e03      	subs	r3, r0, #0
   1f892:	d001      	beq.n	1f898 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1f894:	2301      	movs	r3, #1
   1f896:	e000      	b.n	1f89a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1f898:	2300      	movs	r3, #0
}
   1f89a:	0018      	movs	r0, r3
   1f89c:	46bd      	mov	sp, r7
   1f89e:	b004      	add	sp, #16
   1f8a0:	bd80      	pop	{r7, pc}
   1f8a2:	46c0      	nop			; (mov r8, r8)
   1f8a4:	0001f30d 	.word	0x0001f30d
   1f8a8:	0001f3f9 	.word	0x0001f3f9
   1f8ac:	0001f451 	.word	0x0001f451

0001f8b0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1f8b0:	b580      	push	{r7, lr}
   1f8b2:	b082      	sub	sp, #8
   1f8b4:	af00      	add	r7, sp, #0
   1f8b6:	6078      	str	r0, [r7, #4]
   1f8b8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1f8ba:	683a      	ldr	r2, [r7, #0]
   1f8bc:	687b      	ldr	r3, [r7, #4]
   1f8be:	0019      	movs	r1, r3
   1f8c0:	2000      	movs	r0, #0
   1f8c2:	4b03      	ldr	r3, [pc, #12]	; (1f8d0 <sd_mmc_mem_2_ram_0+0x20>)
   1f8c4:	4798      	blx	r3
   1f8c6:	0003      	movs	r3, r0
}
   1f8c8:	0018      	movs	r0, r3
   1f8ca:	46bd      	mov	sp, r7
   1f8cc:	b002      	add	sp, #8
   1f8ce:	bd80      	pop	{r7, pc}
   1f8d0:	0001f845 	.word	0x0001f845

0001f8d4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1f8d4:	b580      	push	{r7, lr}
   1f8d6:	b084      	sub	sp, #16
   1f8d8:	af00      	add	r7, sp, #0
   1f8da:	60b9      	str	r1, [r7, #8]
   1f8dc:	607a      	str	r2, [r7, #4]
   1f8de:	230f      	movs	r3, #15
   1f8e0:	18fb      	adds	r3, r7, r3
   1f8e2:	1c02      	adds	r2, r0, #0
   1f8e4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1f8e6:	68b9      	ldr	r1, [r7, #8]
   1f8e8:	230f      	movs	r3, #15
   1f8ea:	18fb      	adds	r3, r7, r3
   1f8ec:	781b      	ldrb	r3, [r3, #0]
   1f8ee:	2201      	movs	r2, #1
   1f8f0:	0018      	movs	r0, r3
   1f8f2:	4b10      	ldr	r3, [pc, #64]	; (1f934 <sd_mmc_ram_2_mem+0x60>)
   1f8f4:	4798      	blx	r3
   1f8f6:	1e03      	subs	r3, r0, #0
   1f8f8:	d005      	beq.n	1f906 <sd_mmc_ram_2_mem+0x32>
   1f8fa:	2b02      	cmp	r3, #2
   1f8fc:	d101      	bne.n	1f902 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f8fe:	2302      	movs	r3, #2
   1f900:	e013      	b.n	1f92a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1f902:	2301      	movs	r3, #1
   1f904:	e011      	b.n	1f92a <sd_mmc_ram_2_mem+0x56>
		break;
   1f906:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1f908:	687b      	ldr	r3, [r7, #4]
   1f90a:	2101      	movs	r1, #1
   1f90c:	0018      	movs	r0, r3
   1f90e:	4b0a      	ldr	r3, [pc, #40]	; (1f938 <sd_mmc_ram_2_mem+0x64>)
   1f910:	4798      	blx	r3
   1f912:	1e03      	subs	r3, r0, #0
   1f914:	d001      	beq.n	1f91a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1f916:	2301      	movs	r3, #1
   1f918:	e007      	b.n	1f92a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1f91a:	2000      	movs	r0, #0
   1f91c:	4b07      	ldr	r3, [pc, #28]	; (1f93c <sd_mmc_ram_2_mem+0x68>)
   1f91e:	4798      	blx	r3
   1f920:	1e03      	subs	r3, r0, #0
   1f922:	d001      	beq.n	1f928 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1f924:	2301      	movs	r3, #1
   1f926:	e000      	b.n	1f92a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1f928:	2300      	movs	r3, #0
}
   1f92a:	0018      	movs	r0, r3
   1f92c:	46bd      	mov	sp, r7
   1f92e:	b004      	add	sp, #16
   1f930:	bd80      	pop	{r7, pc}
   1f932:	46c0      	nop			; (mov r8, r8)
   1f934:	0001f4e9 	.word	0x0001f4e9
   1f938:	0001f5d1 	.word	0x0001f5d1
   1f93c:	0001f629 	.word	0x0001f629

0001f940 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1f940:	b580      	push	{r7, lr}
   1f942:	b082      	sub	sp, #8
   1f944:	af00      	add	r7, sp, #0
   1f946:	6078      	str	r0, [r7, #4]
   1f948:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1f94a:	683a      	ldr	r2, [r7, #0]
   1f94c:	687b      	ldr	r3, [r7, #4]
   1f94e:	0019      	movs	r1, r3
   1f950:	2000      	movs	r0, #0
   1f952:	4b03      	ldr	r3, [pc, #12]	; (1f960 <sd_mmc_ram_2_mem_0+0x20>)
   1f954:	4798      	blx	r3
   1f956:	0003      	movs	r3, r0
}
   1f958:	0018      	movs	r0, r3
   1f95a:	46bd      	mov	sp, r7
   1f95c:	b002      	add	sp, #8
   1f95e:	bd80      	pop	{r7, pc}
   1f960:	0001f8d5 	.word	0x0001f8d5

0001f964 <system_pinmux_get_group_from_gpio_pin>:
{
   1f964:	b580      	push	{r7, lr}
   1f966:	b084      	sub	sp, #16
   1f968:	af00      	add	r7, sp, #0
   1f96a:	0002      	movs	r2, r0
   1f96c:	1dfb      	adds	r3, r7, #7
   1f96e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f970:	230f      	movs	r3, #15
   1f972:	18fb      	adds	r3, r7, r3
   1f974:	1dfa      	adds	r2, r7, #7
   1f976:	7812      	ldrb	r2, [r2, #0]
   1f978:	09d2      	lsrs	r2, r2, #7
   1f97a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f97c:	230e      	movs	r3, #14
   1f97e:	18fb      	adds	r3, r7, r3
   1f980:	1dfa      	adds	r2, r7, #7
   1f982:	7812      	ldrb	r2, [r2, #0]
   1f984:	0952      	lsrs	r2, r2, #5
   1f986:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f988:	4b0d      	ldr	r3, [pc, #52]	; (1f9c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f98a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f98c:	230f      	movs	r3, #15
   1f98e:	18fb      	adds	r3, r7, r3
   1f990:	781b      	ldrb	r3, [r3, #0]
   1f992:	2b00      	cmp	r3, #0
   1f994:	d10f      	bne.n	1f9b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f996:	230f      	movs	r3, #15
   1f998:	18fb      	adds	r3, r7, r3
   1f99a:	781b      	ldrb	r3, [r3, #0]
   1f99c:	009b      	lsls	r3, r3, #2
   1f99e:	2210      	movs	r2, #16
   1f9a0:	4694      	mov	ip, r2
   1f9a2:	44bc      	add	ip, r7
   1f9a4:	4463      	add	r3, ip
   1f9a6:	3b08      	subs	r3, #8
   1f9a8:	681a      	ldr	r2, [r3, #0]
   1f9aa:	230e      	movs	r3, #14
   1f9ac:	18fb      	adds	r3, r7, r3
   1f9ae:	781b      	ldrb	r3, [r3, #0]
   1f9b0:	01db      	lsls	r3, r3, #7
   1f9b2:	18d3      	adds	r3, r2, r3
   1f9b4:	e000      	b.n	1f9b8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f9b6:	2300      	movs	r3, #0
}
   1f9b8:	0018      	movs	r0, r3
   1f9ba:	46bd      	mov	sp, r7
   1f9bc:	b004      	add	sp, #16
   1f9be:	bd80      	pop	{r7, pc}
   1f9c0:	41004400 	.word	0x41004400

0001f9c4 <system_interrupt_enable>:
{
   1f9c4:	b580      	push	{r7, lr}
   1f9c6:	b082      	sub	sp, #8
   1f9c8:	af00      	add	r7, sp, #0
   1f9ca:	0002      	movs	r2, r0
   1f9cc:	1dfb      	adds	r3, r7, #7
   1f9ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f9d0:	4b06      	ldr	r3, [pc, #24]	; (1f9ec <system_interrupt_enable+0x28>)
   1f9d2:	1dfa      	adds	r2, r7, #7
   1f9d4:	7812      	ldrb	r2, [r2, #0]
   1f9d6:	0011      	movs	r1, r2
   1f9d8:	221f      	movs	r2, #31
   1f9da:	400a      	ands	r2, r1
   1f9dc:	2101      	movs	r1, #1
   1f9de:	4091      	lsls	r1, r2
   1f9e0:	000a      	movs	r2, r1
   1f9e2:	601a      	str	r2, [r3, #0]
}
   1f9e4:	46c0      	nop			; (mov r8, r8)
   1f9e6:	46bd      	mov	sp, r7
   1f9e8:	b002      	add	sp, #8
   1f9ea:	bd80      	pop	{r7, pc}
   1f9ec:	e000e100 	.word	0xe000e100

0001f9f0 <port_get_group_from_gpio_pin>:
{
   1f9f0:	b580      	push	{r7, lr}
   1f9f2:	b082      	sub	sp, #8
   1f9f4:	af00      	add	r7, sp, #0
   1f9f6:	0002      	movs	r2, r0
   1f9f8:	1dfb      	adds	r3, r7, #7
   1f9fa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f9fc:	1dfb      	adds	r3, r7, #7
   1f9fe:	781b      	ldrb	r3, [r3, #0]
   1fa00:	0018      	movs	r0, r3
   1fa02:	4b03      	ldr	r3, [pc, #12]	; (1fa10 <port_get_group_from_gpio_pin+0x20>)
   1fa04:	4798      	blx	r3
   1fa06:	0003      	movs	r3, r0
}
   1fa08:	0018      	movs	r0, r3
   1fa0a:	46bd      	mov	sp, r7
   1fa0c:	b002      	add	sp, #8
   1fa0e:	bd80      	pop	{r7, pc}
   1fa10:	0001f965 	.word	0x0001f965

0001fa14 <port_get_config_defaults>:
{
   1fa14:	b580      	push	{r7, lr}
   1fa16:	b082      	sub	sp, #8
   1fa18:	af00      	add	r7, sp, #0
   1fa1a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1fa1c:	687b      	ldr	r3, [r7, #4]
   1fa1e:	2200      	movs	r2, #0
   1fa20:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1fa22:	687b      	ldr	r3, [r7, #4]
   1fa24:	2201      	movs	r2, #1
   1fa26:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1fa28:	687b      	ldr	r3, [r7, #4]
   1fa2a:	2200      	movs	r2, #0
   1fa2c:	709a      	strb	r2, [r3, #2]
}
   1fa2e:	46c0      	nop			; (mov r8, r8)
   1fa30:	46bd      	mov	sp, r7
   1fa32:	b002      	add	sp, #8
   1fa34:	bd80      	pop	{r7, pc}
	...

0001fa38 <port_pin_set_output_level>:
{
   1fa38:	b580      	push	{r7, lr}
   1fa3a:	b084      	sub	sp, #16
   1fa3c:	af00      	add	r7, sp, #0
   1fa3e:	0002      	movs	r2, r0
   1fa40:	1dfb      	adds	r3, r7, #7
   1fa42:	701a      	strb	r2, [r3, #0]
   1fa44:	1dbb      	adds	r3, r7, #6
   1fa46:	1c0a      	adds	r2, r1, #0
   1fa48:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1fa4a:	1dfb      	adds	r3, r7, #7
   1fa4c:	781b      	ldrb	r3, [r3, #0]
   1fa4e:	0018      	movs	r0, r3
   1fa50:	4b0d      	ldr	r3, [pc, #52]	; (1fa88 <port_pin_set_output_level+0x50>)
   1fa52:	4798      	blx	r3
   1fa54:	0003      	movs	r3, r0
   1fa56:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1fa58:	1dfb      	adds	r3, r7, #7
   1fa5a:	781b      	ldrb	r3, [r3, #0]
   1fa5c:	221f      	movs	r2, #31
   1fa5e:	4013      	ands	r3, r2
   1fa60:	2201      	movs	r2, #1
   1fa62:	409a      	lsls	r2, r3
   1fa64:	0013      	movs	r3, r2
   1fa66:	60bb      	str	r3, [r7, #8]
	if (level) {
   1fa68:	1dbb      	adds	r3, r7, #6
   1fa6a:	781b      	ldrb	r3, [r3, #0]
   1fa6c:	2b00      	cmp	r3, #0
   1fa6e:	d003      	beq.n	1fa78 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1fa70:	68fb      	ldr	r3, [r7, #12]
   1fa72:	68ba      	ldr	r2, [r7, #8]
   1fa74:	619a      	str	r2, [r3, #24]
}
   1fa76:	e002      	b.n	1fa7e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1fa78:	68fb      	ldr	r3, [r7, #12]
   1fa7a:	68ba      	ldr	r2, [r7, #8]
   1fa7c:	615a      	str	r2, [r3, #20]
}
   1fa7e:	46c0      	nop			; (mov r8, r8)
   1fa80:	46bd      	mov	sp, r7
   1fa82:	b004      	add	sp, #16
   1fa84:	bd80      	pop	{r7, pc}
   1fa86:	46c0      	nop			; (mov r8, r8)
   1fa88:	0001f9f1 	.word	0x0001f9f1

0001fa8c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1fa8c:	b580      	push	{r7, lr}
   1fa8e:	b084      	sub	sp, #16
   1fa90:	af00      	add	r7, sp, #0
   1fa92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fa94:	687b      	ldr	r3, [r7, #4]
   1fa96:	681b      	ldr	r3, [r3, #0]
   1fa98:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1fa9a:	68fb      	ldr	r3, [r7, #12]
   1fa9c:	69db      	ldr	r3, [r3, #28]
   1fa9e:	1e5a      	subs	r2, r3, #1
   1faa0:	4193      	sbcs	r3, r2
   1faa2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1faa4:	0018      	movs	r0, r3
   1faa6:	46bd      	mov	sp, r7
   1faa8:	b004      	add	sp, #16
   1faaa:	bd80      	pop	{r7, pc}

0001faac <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1faac:	b580      	push	{r7, lr}
   1faae:	b082      	sub	sp, #8
   1fab0:	af00      	add	r7, sp, #0
   1fab2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1fab4:	687b      	ldr	r3, [r7, #4]
   1fab6:	2201      	movs	r2, #1
   1fab8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1faba:	687b      	ldr	r3, [r7, #4]
   1fabc:	2200      	movs	r2, #0
   1fabe:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1fac0:	687b      	ldr	r3, [r7, #4]
   1fac2:	2200      	movs	r2, #0
   1fac4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1fac6:	687b      	ldr	r3, [r7, #4]
   1fac8:	22c0      	movs	r2, #192	; 0xc0
   1faca:	0392      	lsls	r2, r2, #14
   1facc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1face:	687b      	ldr	r3, [r7, #4]
   1fad0:	2200      	movs	r2, #0
   1fad2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1fad4:	687b      	ldr	r3, [r7, #4]
   1fad6:	2200      	movs	r2, #0
   1fad8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1fada:	687b      	ldr	r3, [r7, #4]
   1fadc:	2201      	movs	r2, #1
   1fade:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1fae0:	687b      	ldr	r3, [r7, #4]
   1fae2:	2201      	movs	r2, #1
   1fae4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1fae6:	687b      	ldr	r3, [r7, #4]
   1fae8:	2200      	movs	r2, #0
   1faea:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1faec:	687b      	ldr	r3, [r7, #4]
   1faee:	2224      	movs	r2, #36	; 0x24
   1faf0:	2100      	movs	r1, #0
   1faf2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1faf4:	687b      	ldr	r3, [r7, #4]
   1faf6:	3318      	adds	r3, #24
   1faf8:	220c      	movs	r2, #12
   1fafa:	2100      	movs	r1, #0
   1fafc:	0018      	movs	r0, r3
   1fafe:	4b0a      	ldr	r3, [pc, #40]	; (1fb28 <spi_get_config_defaults+0x7c>)
   1fb00:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1fb02:	687b      	ldr	r3, [r7, #4]
   1fb04:	4a09      	ldr	r2, [pc, #36]	; (1fb2c <spi_get_config_defaults+0x80>)
   1fb06:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1fb08:	687b      	ldr	r3, [r7, #4]
   1fb0a:	2200      	movs	r2, #0
   1fb0c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1fb0e:	687b      	ldr	r3, [r7, #4]
   1fb10:	2200      	movs	r2, #0
   1fb12:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1fb14:	687b      	ldr	r3, [r7, #4]
   1fb16:	2200      	movs	r2, #0
   1fb18:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1fb1a:	687b      	ldr	r3, [r7, #4]
   1fb1c:	2200      	movs	r2, #0
   1fb1e:	635a      	str	r2, [r3, #52]	; 0x34

};
   1fb20:	46c0      	nop			; (mov r8, r8)
   1fb22:	46bd      	mov	sp, r7
   1fb24:	b002      	add	sp, #8
   1fb26:	bd80      	pop	{r7, pc}
   1fb28:	00034f63 	.word	0x00034f63
   1fb2c:	000186a0 	.word	0x000186a0

0001fb30 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1fb30:	b580      	push	{r7, lr}
   1fb32:	b082      	sub	sp, #8
   1fb34:	af00      	add	r7, sp, #0
   1fb36:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1fb38:	687b      	ldr	r3, [r7, #4]
   1fb3a:	220a      	movs	r2, #10
   1fb3c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1fb3e:	687b      	ldr	r3, [r7, #4]
   1fb40:	2200      	movs	r2, #0
   1fb42:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1fb44:	687b      	ldr	r3, [r7, #4]
   1fb46:	2200      	movs	r2, #0
   1fb48:	709a      	strb	r2, [r3, #2]
}
   1fb4a:	46c0      	nop			; (mov r8, r8)
   1fb4c:	46bd      	mov	sp, r7
   1fb4e:	b002      	add	sp, #8
   1fb50:	bd80      	pop	{r7, pc}
	...

0001fb54 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1fb54:	b580      	push	{r7, lr}
   1fb56:	b084      	sub	sp, #16
   1fb58:	af00      	add	r7, sp, #0
   1fb5a:	6078      	str	r0, [r7, #4]
   1fb5c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1fb5e:	683b      	ldr	r3, [r7, #0]
   1fb60:	781a      	ldrb	r2, [r3, #0]
   1fb62:	687b      	ldr	r3, [r7, #4]
   1fb64:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1fb66:	683b      	ldr	r3, [r7, #0]
   1fb68:	785a      	ldrb	r2, [r3, #1]
   1fb6a:	687b      	ldr	r3, [r7, #4]
   1fb6c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1fb6e:	683b      	ldr	r3, [r7, #0]
   1fb70:	789a      	ldrb	r2, [r3, #2]
   1fb72:	687b      	ldr	r3, [r7, #4]
   1fb74:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1fb76:	230c      	movs	r3, #12
   1fb78:	18fb      	adds	r3, r7, r3
   1fb7a:	0018      	movs	r0, r3
   1fb7c:	4b0b      	ldr	r3, [pc, #44]	; (1fbac <spi_attach_slave+0x58>)
   1fb7e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1fb80:	230c      	movs	r3, #12
   1fb82:	18fb      	adds	r3, r7, r3
   1fb84:	2201      	movs	r2, #1
   1fb86:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1fb88:	687b      	ldr	r3, [r7, #4]
   1fb8a:	781b      	ldrb	r3, [r3, #0]
   1fb8c:	220c      	movs	r2, #12
   1fb8e:	18ba      	adds	r2, r7, r2
   1fb90:	0011      	movs	r1, r2
   1fb92:	0018      	movs	r0, r3
   1fb94:	4b06      	ldr	r3, [pc, #24]	; (1fbb0 <spi_attach_slave+0x5c>)
   1fb96:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1fb98:	687b      	ldr	r3, [r7, #4]
   1fb9a:	781b      	ldrb	r3, [r3, #0]
   1fb9c:	2101      	movs	r1, #1
   1fb9e:	0018      	movs	r0, r3
   1fba0:	4b04      	ldr	r3, [pc, #16]	; (1fbb4 <spi_attach_slave+0x60>)
   1fba2:	4798      	blx	r3
}
   1fba4:	46c0      	nop			; (mov r8, r8)
   1fba6:	46bd      	mov	sp, r7
   1fba8:	b004      	add	sp, #16
   1fbaa:	bd80      	pop	{r7, pc}
   1fbac:	0001fa15 	.word	0x0001fa15
   1fbb0:	00026f5d 	.word	0x00026f5d
   1fbb4:	0001fa39 	.word	0x0001fa39

0001fbb8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1fbb8:	b580      	push	{r7, lr}
   1fbba:	b084      	sub	sp, #16
   1fbbc:	af00      	add	r7, sp, #0
   1fbbe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fbc0:	687b      	ldr	r3, [r7, #4]
   1fbc2:	681b      	ldr	r3, [r3, #0]
   1fbc4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1fbc6:	687b      	ldr	r3, [r7, #4]
   1fbc8:	681b      	ldr	r3, [r3, #0]
   1fbca:	0018      	movs	r0, r3
   1fbcc:	4b0b      	ldr	r3, [pc, #44]	; (1fbfc <spi_enable+0x44>)
   1fbce:	4798      	blx	r3
   1fbd0:	0003      	movs	r3, r0
   1fbd2:	0018      	movs	r0, r3
   1fbd4:	4b0a      	ldr	r3, [pc, #40]	; (1fc00 <spi_enable+0x48>)
   1fbd6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1fbd8:	46c0      	nop			; (mov r8, r8)
   1fbda:	687b      	ldr	r3, [r7, #4]
   1fbdc:	0018      	movs	r0, r3
   1fbde:	4b09      	ldr	r3, [pc, #36]	; (1fc04 <spi_enable+0x4c>)
   1fbe0:	4798      	blx	r3
   1fbe2:	1e03      	subs	r3, r0, #0
   1fbe4:	d1f9      	bne.n	1fbda <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1fbe6:	68fb      	ldr	r3, [r7, #12]
   1fbe8:	681b      	ldr	r3, [r3, #0]
   1fbea:	2202      	movs	r2, #2
   1fbec:	431a      	orrs	r2, r3
   1fbee:	68fb      	ldr	r3, [r7, #12]
   1fbf0:	601a      	str	r2, [r3, #0]
}
   1fbf2:	46c0      	nop			; (mov r8, r8)
   1fbf4:	46bd      	mov	sp, r7
   1fbf6:	b004      	add	sp, #16
   1fbf8:	bd80      	pop	{r7, pc}
   1fbfa:	46c0      	nop			; (mov r8, r8)
   1fbfc:	00027c2d 	.word	0x00027c2d
   1fc00:	0001f9c5 	.word	0x0001f9c5
   1fc04:	0001fa8d 	.word	0x0001fa8d

0001fc08 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1fc08:	b580      	push	{r7, lr}
   1fc0a:	b084      	sub	sp, #16
   1fc0c:	af00      	add	r7, sp, #0
   1fc0e:	6078      	str	r0, [r7, #4]
   1fc10:	000a      	movs	r2, r1
   1fc12:	1cfb      	adds	r3, r7, #3
   1fc14:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1fc16:	230f      	movs	r3, #15
   1fc18:	18fb      	adds	r3, r7, r3
   1fc1a:	2200      	movs	r2, #0
   1fc1c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1fc1e:	e038      	b.n	1fc92 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1fc20:	687b      	ldr	r3, [r7, #4]
   1fc22:	1c5a      	adds	r2, r3, #1
   1fc24:	607a      	str	r2, [r7, #4]
   1fc26:	220e      	movs	r2, #14
   1fc28:	18ba      	adds	r2, r7, r2
   1fc2a:	781b      	ldrb	r3, [r3, #0]
   1fc2c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1fc2e:	230d      	movs	r3, #13
   1fc30:	18fb      	adds	r3, r7, r3
   1fc32:	2200      	movs	r2, #0
   1fc34:	701a      	strb	r2, [r3, #0]
   1fc36:	e027      	b.n	1fc88 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1fc38:	230f      	movs	r3, #15
   1fc3a:	18fa      	adds	r2, r7, r3
   1fc3c:	230f      	movs	r3, #15
   1fc3e:	18fb      	adds	r3, r7, r3
   1fc40:	781b      	ldrb	r3, [r3, #0]
   1fc42:	18db      	adds	r3, r3, r3
   1fc44:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1fc46:	230e      	movs	r3, #14
   1fc48:	18fa      	adds	r2, r7, r3
   1fc4a:	230f      	movs	r3, #15
   1fc4c:	18fb      	adds	r3, r7, r3
   1fc4e:	7812      	ldrb	r2, [r2, #0]
   1fc50:	781b      	ldrb	r3, [r3, #0]
   1fc52:	4053      	eors	r3, r2
   1fc54:	b2db      	uxtb	r3, r3
   1fc56:	b25b      	sxtb	r3, r3
   1fc58:	2b00      	cmp	r3, #0
   1fc5a:	da07      	bge.n	1fc6c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1fc5c:	230f      	movs	r3, #15
   1fc5e:	18fb      	adds	r3, r7, r3
   1fc60:	220f      	movs	r2, #15
   1fc62:	18ba      	adds	r2, r7, r2
   1fc64:	7812      	ldrb	r2, [r2, #0]
   1fc66:	2109      	movs	r1, #9
   1fc68:	404a      	eors	r2, r1
   1fc6a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1fc6c:	230e      	movs	r3, #14
   1fc6e:	18fa      	adds	r2, r7, r3
   1fc70:	230e      	movs	r3, #14
   1fc72:	18fb      	adds	r3, r7, r3
   1fc74:	781b      	ldrb	r3, [r3, #0]
   1fc76:	18db      	adds	r3, r3, r3
   1fc78:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1fc7a:	230d      	movs	r3, #13
   1fc7c:	18fb      	adds	r3, r7, r3
   1fc7e:	781a      	ldrb	r2, [r3, #0]
   1fc80:	230d      	movs	r3, #13
   1fc82:	18fb      	adds	r3, r7, r3
   1fc84:	3201      	adds	r2, #1
   1fc86:	701a      	strb	r2, [r3, #0]
   1fc88:	230d      	movs	r3, #13
   1fc8a:	18fb      	adds	r3, r7, r3
   1fc8c:	781b      	ldrb	r3, [r3, #0]
   1fc8e:	2b07      	cmp	r3, #7
   1fc90:	d9d2      	bls.n	1fc38 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1fc92:	1cfb      	adds	r3, r7, #3
   1fc94:	781b      	ldrb	r3, [r3, #0]
   1fc96:	1cfa      	adds	r2, r7, #3
   1fc98:	1e59      	subs	r1, r3, #1
   1fc9a:	7011      	strb	r1, [r2, #0]
   1fc9c:	2b00      	cmp	r3, #0
   1fc9e:	d1bf      	bne.n	1fc20 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1fca0:	230f      	movs	r3, #15
   1fca2:	18fb      	adds	r3, r7, r3
   1fca4:	781b      	ldrb	r3, [r3, #0]
   1fca6:	005b      	lsls	r3, r3, #1
   1fca8:	b25b      	sxtb	r3, r3
   1fcaa:	2201      	movs	r2, #1
   1fcac:	4313      	orrs	r3, r2
   1fcae:	b25a      	sxtb	r2, r3
   1fcb0:	230f      	movs	r3, #15
   1fcb2:	18fb      	adds	r3, r7, r3
   1fcb4:	701a      	strb	r2, [r3, #0]
	return crc;
   1fcb6:	230f      	movs	r3, #15
   1fcb8:	18fb      	adds	r3, r7, r3
   1fcba:	781b      	ldrb	r3, [r3, #0]
}
   1fcbc:	0018      	movs	r0, r3
   1fcbe:	46bd      	mov	sp, r7
   1fcc0:	b004      	add	sp, #16
   1fcc2:	bd80      	pop	{r7, pc}

0001fcc4 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1fcc4:	b590      	push	{r4, r7, lr}
   1fcc6:	b083      	sub	sp, #12
   1fcc8:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1fcca:	1c7b      	adds	r3, r7, #1
   1fccc:	22ff      	movs	r2, #255	; 0xff
   1fcce:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1fcd0:	1cbb      	adds	r3, r7, #2
   1fcd2:	22ff      	movs	r2, #255	; 0xff
   1fcd4:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1fcd6:	1cbb      	adds	r3, r7, #2
   1fcd8:	881b      	ldrh	r3, [r3, #0]
   1fcda:	1c79      	adds	r1, r7, #1
   1fcdc:	4811      	ldr	r0, [pc, #68]	; (1fd24 <sd_mmc_spi_wait_busy+0x60>)
   1fcde:	2201      	movs	r2, #1
   1fce0:	4c11      	ldr	r4, [pc, #68]	; (1fd28 <sd_mmc_spi_wait_busy+0x64>)
   1fce2:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1fce4:	4b11      	ldr	r3, [pc, #68]	; (1fd2c <sd_mmc_spi_wait_busy+0x68>)
   1fce6:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1fce8:	1cbb      	adds	r3, r7, #2
   1fcea:	881b      	ldrh	r3, [r3, #0]
   1fcec:	1c79      	adds	r1, r7, #1
   1fcee:	480d      	ldr	r0, [pc, #52]	; (1fd24 <sd_mmc_spi_wait_busy+0x60>)
   1fcf0:	2201      	movs	r2, #1
   1fcf2:	4c0d      	ldr	r4, [pc, #52]	; (1fd28 <sd_mmc_spi_wait_busy+0x64>)
   1fcf4:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1fcf6:	1cbb      	adds	r3, r7, #2
   1fcf8:	881b      	ldrh	r3, [r3, #0]
   1fcfa:	1c79      	adds	r1, r7, #1
   1fcfc:	4809      	ldr	r0, [pc, #36]	; (1fd24 <sd_mmc_spi_wait_busy+0x60>)
   1fcfe:	2201      	movs	r2, #1
   1fd00:	4c09      	ldr	r4, [pc, #36]	; (1fd28 <sd_mmc_spi_wait_busy+0x64>)
   1fd02:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1fd04:	687b      	ldr	r3, [r7, #4]
   1fd06:	1e5a      	subs	r2, r3, #1
   1fd08:	607a      	str	r2, [r7, #4]
   1fd0a:	2b00      	cmp	r3, #0
   1fd0c:	d101      	bne.n	1fd12 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1fd0e:	2300      	movs	r3, #0
   1fd10:	e004      	b.n	1fd1c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1fd12:	1c7b      	adds	r3, r7, #1
   1fd14:	781b      	ldrb	r3, [r3, #0]
   1fd16:	2bff      	cmp	r3, #255	; 0xff
   1fd18:	d1ed      	bne.n	1fcf6 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1fd1a:	2301      	movs	r3, #1
}
   1fd1c:	0018      	movs	r0, r3
   1fd1e:	46bd      	mov	sp, r7
   1fd20:	b003      	add	sp, #12
   1fd22:	bd90      	pop	{r4, r7, pc}
   1fd24:	20004250 	.word	0x20004250
   1fd28:	0002856d 	.word	0x0002856d
   1fd2c:	00030d40 	.word	0x00030d40

0001fd30 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1fd30:	b590      	push	{r4, r7, lr}
   1fd32:	b083      	sub	sp, #12
   1fd34:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1fd36:	1cbb      	adds	r3, r7, #2
   1fd38:	22ff      	movs	r2, #255	; 0xff
   1fd3a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1fd3c:	1c7b      	adds	r3, r7, #1
   1fd3e:	2200      	movs	r2, #0
   1fd40:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1fd42:	4b18      	ldr	r3, [pc, #96]	; (1fda4 <sd_mmc_spi_start_read_block+0x74>)
   1fd44:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1fd46:	687b      	ldr	r3, [r7, #4]
   1fd48:	1e5a      	subs	r2, r3, #1
   1fd4a:	607a      	str	r2, [r7, #4]
   1fd4c:	2b00      	cmp	r3, #0
   1fd4e:	d104      	bne.n	1fd5a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1fd50:	4b15      	ldr	r3, [pc, #84]	; (1fda8 <sd_mmc_spi_start_read_block+0x78>)
   1fd52:	2204      	movs	r2, #4
   1fd54:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1fd56:	2300      	movs	r3, #0
   1fd58:	e020      	b.n	1fd9c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1fd5a:	1cbb      	adds	r3, r7, #2
   1fd5c:	881b      	ldrh	r3, [r3, #0]
   1fd5e:	1c79      	adds	r1, r7, #1
   1fd60:	4812      	ldr	r0, [pc, #72]	; (1fdac <sd_mmc_spi_start_read_block+0x7c>)
   1fd62:	2201      	movs	r2, #1
   1fd64:	4c12      	ldr	r4, [pc, #72]	; (1fdb0 <sd_mmc_spi_start_read_block+0x80>)
   1fd66:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1fd68:	1c7b      	adds	r3, r7, #1
   1fd6a:	781b      	ldrb	r3, [r3, #0]
   1fd6c:	001a      	movs	r2, r3
   1fd6e:	23f0      	movs	r3, #240	; 0xf0
   1fd70:	4013      	ands	r3, r2
   1fd72:	d10e      	bne.n	1fd92 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1fd74:	1c7b      	adds	r3, r7, #1
   1fd76:	781b      	ldrb	r3, [r3, #0]
   1fd78:	001a      	movs	r2, r3
   1fd7a:	2307      	movs	r3, #7
   1fd7c:	4013      	ands	r3, r2
   1fd7e:	d003      	beq.n	1fd88 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1fd80:	4b09      	ldr	r3, [pc, #36]	; (1fda8 <sd_mmc_spi_start_read_block+0x78>)
   1fd82:	2207      	movs	r2, #7
   1fd84:	701a      	strb	r2, [r3, #0]
   1fd86:	e002      	b.n	1fd8e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1fd88:	4b07      	ldr	r3, [pc, #28]	; (1fda8 <sd_mmc_spi_start_read_block+0x78>)
   1fd8a:	220b      	movs	r2, #11
   1fd8c:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1fd8e:	2300      	movs	r3, #0
   1fd90:	e004      	b.n	1fd9c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1fd92:	1c7b      	adds	r3, r7, #1
   1fd94:	781b      	ldrb	r3, [r3, #0]
   1fd96:	2bfe      	cmp	r3, #254	; 0xfe
   1fd98:	d1d5      	bne.n	1fd46 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1fd9a:	2301      	movs	r3, #1
}
   1fd9c:	0018      	movs	r0, r3
   1fd9e:	46bd      	mov	sp, r7
   1fda0:	b003      	add	sp, #12
   1fda2:	bd90      	pop	{r4, r7, pc}
   1fda4:	0007a120 	.word	0x0007a120
   1fda8:	20004293 	.word	0x20004293
   1fdac:	20004250 	.word	0x20004250
   1fdb0:	0002856d 	.word	0x0002856d

0001fdb4 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1fdb4:	b590      	push	{r4, r7, lr}
   1fdb6:	b083      	sub	sp, #12
   1fdb8:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1fdba:	1dbb      	adds	r3, r7, #6
   1fdbc:	22ff      	movs	r2, #255	; 0xff
   1fdbe:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1fdc0:	1dbb      	adds	r3, r7, #6
   1fdc2:	881b      	ldrh	r3, [r3, #0]
   1fdc4:	1d39      	adds	r1, r7, #4
   1fdc6:	4804      	ldr	r0, [pc, #16]	; (1fdd8 <sd_mmc_spi_stop_read_block+0x24>)
   1fdc8:	2202      	movs	r2, #2
   1fdca:	4c04      	ldr	r4, [pc, #16]	; (1fddc <sd_mmc_spi_stop_read_block+0x28>)
   1fdcc:	47a0      	blx	r4
			dummy);
}
   1fdce:	46c0      	nop			; (mov r8, r8)
   1fdd0:	46bd      	mov	sp, r7
   1fdd2:	b003      	add	sp, #12
   1fdd4:	bd90      	pop	{r4, r7, pc}
   1fdd6:	46c0      	nop			; (mov r8, r8)
   1fdd8:	20004250 	.word	0x20004250
   1fddc:	0002856d 	.word	0x0002856d

0001fde0 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1fde0:	b580      	push	{r7, lr}
   1fde2:	b082      	sub	sp, #8
   1fde4:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1fde6:	1dfb      	adds	r3, r7, #7
   1fde8:	22ff      	movs	r2, #255	; 0xff
   1fdea:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1fdec:	1df9      	adds	r1, r7, #7
   1fdee:	4b0d      	ldr	r3, [pc, #52]	; (1fe24 <sd_mmc_spi_start_write_block+0x44>)
   1fdf0:	2201      	movs	r2, #1
   1fdf2:	0018      	movs	r0, r3
   1fdf4:	4b0c      	ldr	r3, [pc, #48]	; (1fe28 <sd_mmc_spi_start_write_block+0x48>)
   1fdf6:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1fdf8:	4b0c      	ldr	r3, [pc, #48]	; (1fe2c <sd_mmc_spi_start_write_block+0x4c>)
   1fdfa:	881b      	ldrh	r3, [r3, #0]
   1fdfc:	2b01      	cmp	r3, #1
   1fdfe:	d103      	bne.n	1fe08 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1fe00:	1dbb      	adds	r3, r7, #6
   1fe02:	22fe      	movs	r2, #254	; 0xfe
   1fe04:	701a      	strb	r2, [r3, #0]
   1fe06:	e002      	b.n	1fe0e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1fe08:	1dbb      	adds	r3, r7, #6
   1fe0a:	22fc      	movs	r2, #252	; 0xfc
   1fe0c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1fe0e:	1db9      	adds	r1, r7, #6
   1fe10:	4b04      	ldr	r3, [pc, #16]	; (1fe24 <sd_mmc_spi_start_write_block+0x44>)
   1fe12:	2201      	movs	r2, #1
   1fe14:	0018      	movs	r0, r3
   1fe16:	4b04      	ldr	r3, [pc, #16]	; (1fe28 <sd_mmc_spi_start_write_block+0x48>)
   1fe18:	4798      	blx	r3
}
   1fe1a:	46c0      	nop			; (mov r8, r8)
   1fe1c:	46bd      	mov	sp, r7
   1fe1e:	b002      	add	sp, #8
   1fe20:	bd80      	pop	{r7, pc}
   1fe22:	46c0      	nop			; (mov r8, r8)
   1fe24:	20004250 	.word	0x20004250
   1fe28:	00028791 	.word	0x00028791
   1fe2c:	2000429e 	.word	0x2000429e

0001fe30 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1fe30:	b590      	push	{r4, r7, lr}
   1fe32:	b083      	sub	sp, #12
   1fe34:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1fe36:	1dbb      	adds	r3, r7, #6
   1fe38:	22ff      	movs	r2, #255	; 0xff
   1fe3a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1fe3c:	1cbb      	adds	r3, r7, #2
   1fe3e:	2201      	movs	r2, #1
   1fe40:	4252      	negs	r2, r2
   1fe42:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1fe44:	1cb9      	adds	r1, r7, #2
   1fe46:	4b1b      	ldr	r3, [pc, #108]	; (1feb4 <sd_mmc_spi_stop_write_block+0x84>)
   1fe48:	2202      	movs	r2, #2
   1fe4a:	0018      	movs	r0, r3
   1fe4c:	4b1a      	ldr	r3, [pc, #104]	; (1feb8 <sd_mmc_spi_stop_write_block+0x88>)
   1fe4e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1fe50:	1dbb      	adds	r3, r7, #6
   1fe52:	881b      	ldrh	r3, [r3, #0]
   1fe54:	1d79      	adds	r1, r7, #5
   1fe56:	4817      	ldr	r0, [pc, #92]	; (1feb4 <sd_mmc_spi_stop_write_block+0x84>)
   1fe58:	2201      	movs	r2, #1
   1fe5a:	4c18      	ldr	r4, [pc, #96]	; (1febc <sd_mmc_spi_stop_write_block+0x8c>)
   1fe5c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1fe5e:	1d7b      	adds	r3, r7, #5
   1fe60:	781b      	ldrb	r3, [r3, #0]
   1fe62:	001a      	movs	r2, r3
   1fe64:	2310      	movs	r3, #16
   1fe66:	4013      	ands	r3, r2
   1fe68:	d105      	bne.n	1fe76 <sd_mmc_spi_stop_write_block+0x46>
   1fe6a:	1d7b      	adds	r3, r7, #5
   1fe6c:	781b      	ldrb	r3, [r3, #0]
   1fe6e:	001a      	movs	r2, r3
   1fe70:	2301      	movs	r3, #1
   1fe72:	4013      	ands	r3, r2
   1fe74:	d104      	bne.n	1fe80 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1fe76:	4b12      	ldr	r3, [pc, #72]	; (1fec0 <sd_mmc_spi_stop_write_block+0x90>)
   1fe78:	2201      	movs	r2, #1
   1fe7a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1fe7c:	2300      	movs	r3, #0
   1fe7e:	e014      	b.n	1feaa <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1fe80:	1d7b      	adds	r3, r7, #5
   1fe82:	781b      	ldrb	r3, [r3, #0]
   1fe84:	001a      	movs	r2, r3
   1fe86:	231e      	movs	r3, #30
   1fe88:	4013      	ands	r3, r2
   1fe8a:	2b04      	cmp	r3, #4
   1fe8c:	d00b      	beq.n	1fea6 <sd_mmc_spi_stop_write_block+0x76>
   1fe8e:	2b0a      	cmp	r3, #10
   1fe90:	d104      	bne.n	1fe9c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1fe92:	4b0b      	ldr	r3, [pc, #44]	; (1fec0 <sd_mmc_spi_stop_write_block+0x90>)
   1fe94:	2208      	movs	r2, #8
   1fe96:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1fe98:	2300      	movs	r3, #0
   1fe9a:	e006      	b.n	1feaa <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1fe9c:	4b08      	ldr	r3, [pc, #32]	; (1fec0 <sd_mmc_spi_stop_write_block+0x90>)
   1fe9e:	220a      	movs	r2, #10
   1fea0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1fea2:	2300      	movs	r3, #0
   1fea4:	e001      	b.n	1feaa <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1fea6:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1fea8:	2301      	movs	r3, #1
}
   1feaa:	0018      	movs	r0, r3
   1feac:	46bd      	mov	sp, r7
   1feae:	b003      	add	sp, #12
   1feb0:	bd90      	pop	{r4, r7, pc}
   1feb2:	46c0      	nop			; (mov r8, r8)
   1feb4:	20004250 	.word	0x20004250
   1feb8:	00028791 	.word	0x00028791
   1febc:	0002856d 	.word	0x0002856d
   1fec0:	20004293 	.word	0x20004293

0001fec4 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1fec4:	b590      	push	{r4, r7, lr}
   1fec6:	b083      	sub	sp, #12
   1fec8:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1feca:	4b1d      	ldr	r3, [pc, #116]	; (1ff40 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1fecc:	881b      	ldrh	r3, [r3, #0]
   1fece:	2b01      	cmp	r3, #1
   1fed0:	d101      	bne.n	1fed6 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1fed2:	2301      	movs	r3, #1
   1fed4:	e030      	b.n	1ff38 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1fed6:	4b1a      	ldr	r3, [pc, #104]	; (1ff40 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1fed8:	881b      	ldrh	r3, [r3, #0]
   1feda:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1fedc:	4b19      	ldr	r3, [pc, #100]	; (1ff44 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1fede:	681a      	ldr	r2, [r3, #0]
   1fee0:	4b19      	ldr	r3, [pc, #100]	; (1ff48 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1fee2:	881b      	ldrh	r3, [r3, #0]
   1fee4:	0019      	movs	r1, r3
   1fee6:	4b19      	ldr	r3, [pc, #100]	; (1ff4c <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1fee8:	0010      	movs	r0, r2
   1feea:	4798      	blx	r3
   1feec:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1feee:	429c      	cmp	r4, r3
   1fef0:	d901      	bls.n	1fef6 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1fef2:	2301      	movs	r3, #1
   1fef4:	e020      	b.n	1ff38 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1fef6:	1dfb      	adds	r3, r7, #7
   1fef8:	22ff      	movs	r2, #255	; 0xff
   1fefa:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1fefc:	1df9      	adds	r1, r7, #7
   1fefe:	4b14      	ldr	r3, [pc, #80]	; (1ff50 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1ff00:	2201      	movs	r2, #1
   1ff02:	0018      	movs	r0, r3
   1ff04:	4b13      	ldr	r3, [pc, #76]	; (1ff54 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1ff06:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1ff08:	1dfb      	adds	r3, r7, #7
   1ff0a:	22fd      	movs	r2, #253	; 0xfd
   1ff0c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1ff0e:	1df9      	adds	r1, r7, #7
   1ff10:	4b0f      	ldr	r3, [pc, #60]	; (1ff50 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1ff12:	2201      	movs	r2, #1
   1ff14:	0018      	movs	r0, r3
   1ff16:	4b0f      	ldr	r3, [pc, #60]	; (1ff54 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1ff18:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1ff1a:	4b0f      	ldr	r3, [pc, #60]	; (1ff58 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1ff1c:	4798      	blx	r3
   1ff1e:	0003      	movs	r3, r0
   1ff20:	001a      	movs	r2, r3
   1ff22:	2301      	movs	r3, #1
   1ff24:	4053      	eors	r3, r2
   1ff26:	b2db      	uxtb	r3, r3
   1ff28:	2b00      	cmp	r3, #0
   1ff2a:	d004      	beq.n	1ff36 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1ff2c:	4b0b      	ldr	r3, [pc, #44]	; (1ff5c <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1ff2e:	2205      	movs	r2, #5
   1ff30:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1ff32:	2300      	movs	r3, #0
   1ff34:	e000      	b.n	1ff38 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1ff36:	2301      	movs	r3, #1
}
   1ff38:	0018      	movs	r0, r3
   1ff3a:	46bd      	mov	sp, r7
   1ff3c:	b003      	add	sp, #12
   1ff3e:	bd90      	pop	{r4, r7, pc}
   1ff40:	2000429e 	.word	0x2000429e
   1ff44:	20004298 	.word	0x20004298
   1ff48:	2000429c 	.word	0x2000429c
   1ff4c:	00032f89 	.word	0x00032f89
   1ff50:	20004250 	.word	0x20004250
   1ff54:	00028791 	.word	0x00028791
   1ff58:	0001fcc5 	.word	0x0001fcc5
   1ff5c:	20004293 	.word	0x20004293

0001ff60 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1ff60:	b580      	push	{r7, lr}
   1ff62:	b090      	sub	sp, #64	; 0x40
   1ff64:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ff66:	4b1f      	ldr	r3, [pc, #124]	; (1ffe4 <sd_mmc_spi_init+0x84>)
   1ff68:	2200      	movs	r2, #0
   1ff6a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1ff6c:	233c      	movs	r3, #60	; 0x3c
   1ff6e:	18fb      	adds	r3, r7, r3
   1ff70:	0018      	movs	r0, r3
   1ff72:	4b1d      	ldr	r3, [pc, #116]	; (1ffe8 <sd_mmc_spi_init+0x88>)
   1ff74:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1ff76:	1d3b      	adds	r3, r7, #4
   1ff78:	0018      	movs	r0, r3
   1ff7a:	4b1c      	ldr	r3, [pc, #112]	; (1ffec <sd_mmc_spi_init+0x8c>)
   1ff7c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1ff7e:	1d3b      	adds	r3, r7, #4
   1ff80:	2280      	movs	r2, #128	; 0x80
   1ff82:	0252      	lsls	r2, r2, #9
   1ff84:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1ff86:	1d3b      	adds	r3, r7, #4
   1ff88:	4a19      	ldr	r2, [pc, #100]	; (1fff0 <sd_mmc_spi_init+0x90>)
   1ff8a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1ff8c:	1d3b      	adds	r3, r7, #4
   1ff8e:	4a19      	ldr	r2, [pc, #100]	; (1fff4 <sd_mmc_spi_init+0x94>)
   1ff90:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1ff92:	1d3b      	adds	r3, r7, #4
   1ff94:	4a18      	ldr	r2, [pc, #96]	; (1fff8 <sd_mmc_spi_init+0x98>)
   1ff96:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1ff98:	1d3b      	adds	r3, r7, #4
   1ff9a:	4a18      	ldr	r2, [pc, #96]	; (1fffc <sd_mmc_spi_init+0x9c>)
   1ff9c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1ff9e:	1d3b      	adds	r3, r7, #4
   1ffa0:	2224      	movs	r2, #36	; 0x24
   1ffa2:	2100      	movs	r1, #0
   1ffa4:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1ffa6:	1d3b      	adds	r3, r7, #4
   1ffa8:	4a15      	ldr	r2, [pc, #84]	; (20000 <sd_mmc_spi_init+0xa0>)
   1ffaa:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1ffac:	1d3a      	adds	r2, r7, #4
   1ffae:	4915      	ldr	r1, [pc, #84]	; (20004 <sd_mmc_spi_init+0xa4>)
   1ffb0:	4b15      	ldr	r3, [pc, #84]	; (20008 <sd_mmc_spi_init+0xa8>)
   1ffb2:	0018      	movs	r0, r3
   1ffb4:	4b15      	ldr	r3, [pc, #84]	; (2000c <sd_mmc_spi_init+0xac>)
   1ffb6:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1ffb8:	4b13      	ldr	r3, [pc, #76]	; (20008 <sd_mmc_spi_init+0xa8>)
   1ffba:	0018      	movs	r0, r3
   1ffbc:	4b14      	ldr	r3, [pc, #80]	; (20010 <sd_mmc_spi_init+0xb0>)
   1ffbe:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1ffc0:	4b14      	ldr	r3, [pc, #80]	; (20014 <sd_mmc_spi_init+0xb4>)
   1ffc2:	0018      	movs	r0, r3
   1ffc4:	4b14      	ldr	r3, [pc, #80]	; (20018 <sd_mmc_spi_init+0xb8>)
   1ffc6:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1ffc8:	4b14      	ldr	r3, [pc, #80]	; (2001c <sd_mmc_spi_init+0xbc>)
   1ffca:	781a      	ldrb	r2, [r3, #0]
   1ffcc:	4b11      	ldr	r3, [pc, #68]	; (20014 <sd_mmc_spi_init+0xb4>)
   1ffce:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1ffd0:	4a10      	ldr	r2, [pc, #64]	; (20014 <sd_mmc_spi_init+0xb4>)
   1ffd2:	4b13      	ldr	r3, [pc, #76]	; (20020 <sd_mmc_spi_init+0xc0>)
   1ffd4:	0011      	movs	r1, r2
   1ffd6:	0018      	movs	r0, r3
   1ffd8:	4b12      	ldr	r3, [pc, #72]	; (20024 <sd_mmc_spi_init+0xc4>)
   1ffda:	4798      	blx	r3
}
   1ffdc:	46c0      	nop			; (mov r8, r8)
   1ffde:	46bd      	mov	sp, r7
   1ffe0:	b010      	add	sp, #64	; 0x40
   1ffe2:	bd80      	pop	{r7, pc}
   1ffe4:	20004293 	.word	0x20004293
   1ffe8:	0001fa15 	.word	0x0001fa15
   1ffec:	0001faad 	.word	0x0001faad
   1fff0:	00100002 	.word	0x00100002
   1fff4:	00110002 	.word	0x00110002
   1fff8:	00120002 	.word	0x00120002
   1fffc:	00130002 	.word	0x00130002
   20000:	00061a80 	.word	0x00061a80
   20004:	42000c00 	.word	0x42000c00
   20008:	20004250 	.word	0x20004250
   2000c:	000283dd 	.word	0x000283dd
   20010:	0001fbb9 	.word	0x0001fbb9
   20014:	20004290 	.word	0x20004290
   20018:	0001fb31 	.word	0x0001fb31
   2001c:	20000118 	.word	0x20000118
   20020:	2000428c 	.word	0x2000428c
   20024:	0001fb55 	.word	0x0001fb55

00020028 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   20028:	b590      	push	{r4, r7, lr}
   2002a:	b083      	sub	sp, #12
   2002c:	af00      	add	r7, sp, #0
   2002e:	0004      	movs	r4, r0
   20030:	6039      	str	r1, [r7, #0]
   20032:	0010      	movs	r0, r2
   20034:	0019      	movs	r1, r3
   20036:	1dfb      	adds	r3, r7, #7
   20038:	1c22      	adds	r2, r4, #0
   2003a:	701a      	strb	r2, [r3, #0]
   2003c:	1dbb      	adds	r3, r7, #6
   2003e:	1c02      	adds	r2, r0, #0
   20040:	701a      	strb	r2, [r3, #0]
   20042:	1d7b      	adds	r3, r7, #5
   20044:	1c0a      	adds	r2, r1, #0
   20046:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20048:	4b13      	ldr	r3, [pc, #76]	; (20098 <sd_mmc_spi_select_device+0x70>)
   2004a:	2200      	movs	r2, #0
   2004c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   2004e:	683b      	ldr	r3, [r7, #0]
   20050:	4a12      	ldr	r2, [pc, #72]	; (2009c <sd_mmc_spi_select_device+0x74>)
   20052:	4293      	cmp	r3, r2
   20054:	d907      	bls.n	20066 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   20056:	4b11      	ldr	r3, [pc, #68]	; (2009c <sd_mmc_spi_select_device+0x74>)
   20058:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   2005a:	e004      	b.n	20066 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   2005c:	683b      	ldr	r3, [r7, #0]
   2005e:	08db      	lsrs	r3, r3, #3
   20060:	683a      	ldr	r2, [r7, #0]
   20062:	1ad3      	subs	r3, r2, r3
   20064:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   20066:	683a      	ldr	r2, [r7, #0]
   20068:	4b0d      	ldr	r3, [pc, #52]	; (200a0 <sd_mmc_spi_select_device+0x78>)
   2006a:	0011      	movs	r1, r2
   2006c:	0018      	movs	r0, r3
   2006e:	4b0d      	ldr	r3, [pc, #52]	; (200a4 <sd_mmc_spi_select_device+0x7c>)
   20070:	4798      	blx	r3
   20072:	0003      	movs	r3, r0
   20074:	2b17      	cmp	r3, #23
   20076:	d0f1      	beq.n	2005c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   20078:	1dfb      	adds	r3, r7, #7
   2007a:	781a      	ldrb	r2, [r3, #0]
   2007c:	0013      	movs	r3, r2
   2007e:	005b      	lsls	r3, r3, #1
   20080:	189b      	adds	r3, r3, r2
   20082:	4a09      	ldr	r2, [pc, #36]	; (200a8 <sd_mmc_spi_select_device+0x80>)
   20084:	1899      	adds	r1, r3, r2
   20086:	4b06      	ldr	r3, [pc, #24]	; (200a0 <sd_mmc_spi_select_device+0x78>)
   20088:	2201      	movs	r2, #1
   2008a:	0018      	movs	r0, r3
   2008c:	4b07      	ldr	r3, [pc, #28]	; (200ac <sd_mmc_spi_select_device+0x84>)
   2008e:	4798      	blx	r3
}
   20090:	46c0      	nop			; (mov r8, r8)
   20092:	46bd      	mov	sp, r7
   20094:	b003      	add	sp, #12
   20096:	bd90      	pop	{r4, r7, pc}
   20098:	20004293 	.word	0x20004293
   2009c:	00989680 	.word	0x00989680
   200a0:	20004250 	.word	0x20004250
   200a4:	00028105 	.word	0x00028105
   200a8:	2000428c 	.word	0x2000428c
   200ac:	000286a1 	.word	0x000286a1

000200b0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   200b0:	b580      	push	{r7, lr}
   200b2:	b082      	sub	sp, #8
   200b4:	af00      	add	r7, sp, #0
   200b6:	0002      	movs	r2, r0
   200b8:	1dfb      	adds	r3, r7, #7
   200ba:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   200bc:	4b09      	ldr	r3, [pc, #36]	; (200e4 <sd_mmc_spi_deselect_device+0x34>)
   200be:	2200      	movs	r2, #0
   200c0:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   200c2:	1dfb      	adds	r3, r7, #7
   200c4:	781a      	ldrb	r2, [r3, #0]
   200c6:	0013      	movs	r3, r2
   200c8:	005b      	lsls	r3, r3, #1
   200ca:	189b      	adds	r3, r3, r2
   200cc:	4a06      	ldr	r2, [pc, #24]	; (200e8 <sd_mmc_spi_deselect_device+0x38>)
   200ce:	1899      	adds	r1, r3, r2
   200d0:	4b06      	ldr	r3, [pc, #24]	; (200ec <sd_mmc_spi_deselect_device+0x3c>)
   200d2:	2200      	movs	r2, #0
   200d4:	0018      	movs	r0, r3
   200d6:	4b06      	ldr	r3, [pc, #24]	; (200f0 <sd_mmc_spi_deselect_device+0x40>)
   200d8:	4798      	blx	r3
}
   200da:	46c0      	nop			; (mov r8, r8)
   200dc:	46bd      	mov	sp, r7
   200de:	b002      	add	sp, #8
   200e0:	bd80      	pop	{r7, pc}
   200e2:	46c0      	nop			; (mov r8, r8)
   200e4:	20004293 	.word	0x20004293
   200e8:	2000428c 	.word	0x2000428c
   200ec:	20004250 	.word	0x20004250
   200f0:	000286a1 	.word	0x000286a1

000200f4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   200f4:	b580      	push	{r7, lr}
   200f6:	b082      	sub	sp, #8
   200f8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   200fa:	1dbb      	adds	r3, r7, #6
   200fc:	22ff      	movs	r2, #255	; 0xff
   200fe:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20100:	4b0c      	ldr	r3, [pc, #48]	; (20134 <sd_mmc_spi_send_clock+0x40>)
   20102:	2200      	movs	r2, #0
   20104:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   20106:	1dfb      	adds	r3, r7, #7
   20108:	2200      	movs	r2, #0
   2010a:	701a      	strb	r2, [r3, #0]
   2010c:	e00a      	b.n	20124 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   2010e:	1db9      	adds	r1, r7, #6
   20110:	4b09      	ldr	r3, [pc, #36]	; (20138 <sd_mmc_spi_send_clock+0x44>)
   20112:	2201      	movs	r2, #1
   20114:	0018      	movs	r0, r3
   20116:	4b09      	ldr	r3, [pc, #36]	; (2013c <sd_mmc_spi_send_clock+0x48>)
   20118:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   2011a:	1dfb      	adds	r3, r7, #7
   2011c:	781a      	ldrb	r2, [r3, #0]
   2011e:	1dfb      	adds	r3, r7, #7
   20120:	3201      	adds	r2, #1
   20122:	701a      	strb	r2, [r3, #0]
   20124:	1dfb      	adds	r3, r7, #7
   20126:	781b      	ldrb	r3, [r3, #0]
   20128:	2b09      	cmp	r3, #9
   2012a:	d9f0      	bls.n	2010e <sd_mmc_spi_send_clock+0x1a>
	}
}
   2012c:	46c0      	nop			; (mov r8, r8)
   2012e:	46bd      	mov	sp, r7
   20130:	b002      	add	sp, #8
   20132:	bd80      	pop	{r7, pc}
   20134:	20004293 	.word	0x20004293
   20138:	20004250 	.word	0x20004250
   2013c:	00028791 	.word	0x00028791

00020140 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   20140:	b590      	push	{r4, r7, lr}
   20142:	b085      	sub	sp, #20
   20144:	af02      	add	r7, sp, #8
   20146:	6078      	str	r0, [r7, #4]
   20148:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   2014a:	6839      	ldr	r1, [r7, #0]
   2014c:	6878      	ldr	r0, [r7, #4]
   2014e:	2300      	movs	r3, #0
   20150:	9300      	str	r3, [sp, #0]
   20152:	2300      	movs	r3, #0
   20154:	2200      	movs	r2, #0
   20156:	4c03      	ldr	r4, [pc, #12]	; (20164 <sd_mmc_spi_send_cmd+0x24>)
   20158:	47a0      	blx	r4
   2015a:	0003      	movs	r3, r0
}
   2015c:	0018      	movs	r0, r3
   2015e:	46bd      	mov	sp, r7
   20160:	b003      	add	sp, #12
   20162:	bd90      	pop	{r4, r7, pc}
   20164:	00020169 	.word	0x00020169

00020168 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   20168:	b590      	push	{r4, r7, lr}
   2016a:	b089      	sub	sp, #36	; 0x24
   2016c:	af00      	add	r7, sp, #0
   2016e:	60f8      	str	r0, [r7, #12]
   20170:	60b9      	str	r1, [r7, #8]
   20172:	0019      	movs	r1, r3
   20174:	1dbb      	adds	r3, r7, #6
   20176:	801a      	strh	r2, [r3, #0]
   20178:	1d3b      	adds	r3, r7, #4
   2017a:	1c0a      	adds	r2, r1, #0
   2017c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   2017e:	231b      	movs	r3, #27
   20180:	18fb      	adds	r3, r7, r3
   20182:	22ff      	movs	r2, #255	; 0xff
   20184:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   20186:	231c      	movs	r3, #28
   20188:	18fb      	adds	r3, r7, r3
   2018a:	22ff      	movs	r2, #255	; 0xff
   2018c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2018e:	4b72      	ldr	r3, [pc, #456]	; (20358 <sd_mmc_spi_adtc_start+0x1f0>)
   20190:	2200      	movs	r2, #0
   20192:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   20194:	68fb      	ldr	r3, [r7, #12]
   20196:	b2db      	uxtb	r3, r3
   20198:	223f      	movs	r2, #63	; 0x3f
   2019a:	4013      	ands	r3, r2
   2019c:	b2db      	uxtb	r3, r3
   2019e:	2240      	movs	r2, #64	; 0x40
   201a0:	4313      	orrs	r3, r2
   201a2:	b2da      	uxtb	r2, r3
   201a4:	2314      	movs	r3, #20
   201a6:	18fb      	adds	r3, r7, r3
   201a8:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   201aa:	68bb      	ldr	r3, [r7, #8]
   201ac:	0e1b      	lsrs	r3, r3, #24
   201ae:	b2da      	uxtb	r2, r3
   201b0:	2314      	movs	r3, #20
   201b2:	18fb      	adds	r3, r7, r3
   201b4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   201b6:	68bb      	ldr	r3, [r7, #8]
   201b8:	0c1b      	lsrs	r3, r3, #16
   201ba:	b2da      	uxtb	r2, r3
   201bc:	2314      	movs	r3, #20
   201be:	18fb      	adds	r3, r7, r3
   201c0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   201c2:	68bb      	ldr	r3, [r7, #8]
   201c4:	0a1b      	lsrs	r3, r3, #8
   201c6:	b2da      	uxtb	r2, r3
   201c8:	2314      	movs	r3, #20
   201ca:	18fb      	adds	r3, r7, r3
   201cc:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   201ce:	68bb      	ldr	r3, [r7, #8]
   201d0:	b2da      	uxtb	r2, r3
   201d2:	2314      	movs	r3, #20
   201d4:	18fb      	adds	r3, r7, r3
   201d6:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   201d8:	2314      	movs	r3, #20
   201da:	18fb      	adds	r3, r7, r3
   201dc:	2105      	movs	r1, #5
   201de:	0018      	movs	r0, r3
   201e0:	4b5e      	ldr	r3, [pc, #376]	; (2035c <sd_mmc_spi_adtc_start+0x1f4>)
   201e2:	4798      	blx	r3
   201e4:	0003      	movs	r3, r0
   201e6:	001a      	movs	r2, r3
   201e8:	2314      	movs	r3, #20
   201ea:	18fb      	adds	r3, r7, r3
   201ec:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   201ee:	231b      	movs	r3, #27
   201f0:	18f9      	adds	r1, r7, r3
   201f2:	4b5b      	ldr	r3, [pc, #364]	; (20360 <sd_mmc_spi_adtc_start+0x1f8>)
   201f4:	2201      	movs	r2, #1
   201f6:	0018      	movs	r0, r3
   201f8:	4b5a      	ldr	r3, [pc, #360]	; (20364 <sd_mmc_spi_adtc_start+0x1fc>)
   201fa:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   201fc:	2314      	movs	r3, #20
   201fe:	18f9      	adds	r1, r7, r3
   20200:	4b57      	ldr	r3, [pc, #348]	; (20360 <sd_mmc_spi_adtc_start+0x1f8>)
   20202:	2206      	movs	r2, #6
   20204:	0018      	movs	r0, r3
   20206:	4b57      	ldr	r3, [pc, #348]	; (20364 <sd_mmc_spi_adtc_start+0x1fc>)
   20208:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   2020a:	2313      	movs	r3, #19
   2020c:	18fb      	adds	r3, r7, r3
   2020e:	22ff      	movs	r2, #255	; 0xff
   20210:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   20212:	231c      	movs	r3, #28
   20214:	18fb      	adds	r3, r7, r3
   20216:	881b      	ldrh	r3, [r3, #0]
   20218:	2213      	movs	r2, #19
   2021a:	18b9      	adds	r1, r7, r2
   2021c:	4850      	ldr	r0, [pc, #320]	; (20360 <sd_mmc_spi_adtc_start+0x1f8>)
   2021e:	2201      	movs	r2, #1
   20220:	4c51      	ldr	r4, [pc, #324]	; (20368 <sd_mmc_spi_adtc_start+0x200>)
   20222:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   20224:	231f      	movs	r3, #31
   20226:	18fb      	adds	r3, r7, r3
   20228:	2207      	movs	r2, #7
   2022a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   2022c:	231c      	movs	r3, #28
   2022e:	18fb      	adds	r3, r7, r3
   20230:	881b      	ldrh	r3, [r3, #0]
   20232:	2213      	movs	r2, #19
   20234:	18b9      	adds	r1, r7, r2
   20236:	484a      	ldr	r0, [pc, #296]	; (20360 <sd_mmc_spi_adtc_start+0x1f8>)
   20238:	2201      	movs	r2, #1
   2023a:	4c4b      	ldr	r4, [pc, #300]	; (20368 <sd_mmc_spi_adtc_start+0x200>)
   2023c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   2023e:	2313      	movs	r3, #19
   20240:	18fb      	adds	r3, r7, r3
   20242:	781b      	ldrb	r3, [r3, #0]
   20244:	b25b      	sxtb	r3, r3
   20246:	2b00      	cmp	r3, #0
   20248:	da10      	bge.n	2026c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   2024a:	231f      	movs	r3, #31
   2024c:	18fb      	adds	r3, r7, r3
   2024e:	221f      	movs	r2, #31
   20250:	18ba      	adds	r2, r7, r2
   20252:	7812      	ldrb	r2, [r2, #0]
   20254:	3a01      	subs	r2, #1
   20256:	701a      	strb	r2, [r3, #0]
   20258:	231f      	movs	r3, #31
   2025a:	18fb      	adds	r3, r7, r3
   2025c:	781b      	ldrb	r3, [r3, #0]
   2025e:	2b00      	cmp	r3, #0
   20260:	d1e4      	bne.n	2022c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   20262:	4b3d      	ldr	r3, [pc, #244]	; (20358 <sd_mmc_spi_adtc_start+0x1f0>)
   20264:	2202      	movs	r2, #2
   20266:	701a      	strb	r2, [r3, #0]
			return false;
   20268:	2300      	movs	r3, #0
   2026a:	e070      	b.n	2034e <sd_mmc_spi_adtc_start+0x1e6>
			break;
   2026c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   2026e:	2313      	movs	r3, #19
   20270:	18fb      	adds	r3, r7, r3
   20272:	781b      	ldrb	r3, [r3, #0]
   20274:	001a      	movs	r2, r3
   20276:	4b3d      	ldr	r3, [pc, #244]	; (2036c <sd_mmc_spi_adtc_start+0x204>)
   20278:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   2027a:	2313      	movs	r3, #19
   2027c:	18fb      	adds	r3, r7, r3
   2027e:	781b      	ldrb	r3, [r3, #0]
   20280:	001a      	movs	r2, r3
   20282:	2308      	movs	r3, #8
   20284:	4013      	ands	r3, r2
   20286:	d004      	beq.n	20292 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   20288:	4b33      	ldr	r3, [pc, #204]	; (20358 <sd_mmc_spi_adtc_start+0x1f0>)
   2028a:	2206      	movs	r2, #6
   2028c:	701a      	strb	r2, [r3, #0]
		return false;
   2028e:	2300      	movs	r3, #0
   20290:	e05d      	b.n	2034e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   20292:	2313      	movs	r3, #19
   20294:	18fb      	adds	r3, r7, r3
   20296:	781b      	ldrb	r3, [r3, #0]
   20298:	001a      	movs	r2, r3
   2029a:	2304      	movs	r3, #4
   2029c:	4013      	ands	r3, r2
   2029e:	d004      	beq.n	202aa <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   202a0:	4b2d      	ldr	r3, [pc, #180]	; (20358 <sd_mmc_spi_adtc_start+0x1f0>)
   202a2:	2209      	movs	r2, #9
   202a4:	701a      	strb	r2, [r3, #0]
		return false;
   202a6:	2300      	movs	r3, #0
   202a8:	e051      	b.n	2034e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   202aa:	2313      	movs	r3, #19
   202ac:	18fb      	adds	r3, r7, r3
   202ae:	781b      	ldrb	r3, [r3, #0]
   202b0:	001a      	movs	r2, r3
   202b2:	2301      	movs	r3, #1
   202b4:	439a      	bics	r2, r3
   202b6:	1e13      	subs	r3, r2, #0
   202b8:	d004      	beq.n	202c4 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   202ba:	4b27      	ldr	r3, [pc, #156]	; (20358 <sd_mmc_spi_adtc_start+0x1f0>)
   202bc:	2201      	movs	r2, #1
   202be:	701a      	strb	r2, [r3, #0]
		return false;
   202c0:	2300      	movs	r3, #0
   202c2:	e044      	b.n	2034e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   202c4:	68fa      	ldr	r2, [r7, #12]
   202c6:	2380      	movs	r3, #128	; 0x80
   202c8:	019b      	lsls	r3, r3, #6
   202ca:	4013      	ands	r3, r2
   202cc:	d00d      	beq.n	202ea <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   202ce:	4b28      	ldr	r3, [pc, #160]	; (20370 <sd_mmc_spi_adtc_start+0x208>)
   202d0:	4798      	blx	r3
   202d2:	0003      	movs	r3, r0
   202d4:	001a      	movs	r2, r3
   202d6:	2301      	movs	r3, #1
   202d8:	4053      	eors	r3, r2
   202da:	b2db      	uxtb	r3, r3
   202dc:	2b00      	cmp	r3, #0
   202de:	d004      	beq.n	202ea <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   202e0:	4b1d      	ldr	r3, [pc, #116]	; (20358 <sd_mmc_spi_adtc_start+0x1f0>)
   202e2:	2203      	movs	r2, #3
   202e4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   202e6:	2300      	movs	r3, #0
   202e8:	e031      	b.n	2034e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   202ea:	68fa      	ldr	r2, [r7, #12]
   202ec:	2380      	movs	r3, #128	; 0x80
   202ee:	009b      	lsls	r3, r3, #2
   202f0:	4013      	ands	r3, r2
   202f2:	d00e      	beq.n	20312 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   202f4:	4b1d      	ldr	r3, [pc, #116]	; (2036c <sd_mmc_spi_adtc_start+0x204>)
   202f6:	2200      	movs	r2, #0
   202f8:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   202fa:	231c      	movs	r3, #28
   202fc:	18fb      	adds	r3, r7, r3
   202fe:	881b      	ldrh	r3, [r3, #0]
   20300:	491a      	ldr	r1, [pc, #104]	; (2036c <sd_mmc_spi_adtc_start+0x204>)
   20302:	4817      	ldr	r0, [pc, #92]	; (20360 <sd_mmc_spi_adtc_start+0x1f8>)
   20304:	2201      	movs	r2, #1
   20306:	4c18      	ldr	r4, [pc, #96]	; (20368 <sd_mmc_spi_adtc_start+0x200>)
   20308:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   2030a:	4b18      	ldr	r3, [pc, #96]	; (2036c <sd_mmc_spi_adtc_start+0x204>)
   2030c:	681a      	ldr	r2, [r3, #0]
   2030e:	4b17      	ldr	r3, [pc, #92]	; (2036c <sd_mmc_spi_adtc_start+0x204>)
   20310:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   20312:	68fa      	ldr	r2, [r7, #12]
   20314:	2380      	movs	r3, #128	; 0x80
   20316:	00db      	lsls	r3, r3, #3
   20318:	4013      	ands	r3, r2
   2031a:	d00c      	beq.n	20336 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   2031c:	231c      	movs	r3, #28
   2031e:	18fb      	adds	r3, r7, r3
   20320:	881b      	ldrh	r3, [r3, #0]
   20322:	4912      	ldr	r1, [pc, #72]	; (2036c <sd_mmc_spi_adtc_start+0x204>)
   20324:	480e      	ldr	r0, [pc, #56]	; (20360 <sd_mmc_spi_adtc_start+0x1f8>)
   20326:	2204      	movs	r2, #4
   20328:	4c0f      	ldr	r4, [pc, #60]	; (20368 <sd_mmc_spi_adtc_start+0x200>)
   2032a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   2032c:	4b0f      	ldr	r3, [pc, #60]	; (2036c <sd_mmc_spi_adtc_start+0x204>)
   2032e:	681b      	ldr	r3, [r3, #0]
   20330:	ba1a      	rev	r2, r3
   20332:	4b0e      	ldr	r3, [pc, #56]	; (2036c <sd_mmc_spi_adtc_start+0x204>)
   20334:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   20336:	4b0f      	ldr	r3, [pc, #60]	; (20374 <sd_mmc_spi_adtc_start+0x20c>)
   20338:	1dba      	adds	r2, r7, #6
   2033a:	8812      	ldrh	r2, [r2, #0]
   2033c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   2033e:	4b0e      	ldr	r3, [pc, #56]	; (20378 <sd_mmc_spi_adtc_start+0x210>)
   20340:	1d3a      	adds	r2, r7, #4
   20342:	8812      	ldrh	r2, [r2, #0]
   20344:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   20346:	4b0d      	ldr	r3, [pc, #52]	; (2037c <sd_mmc_spi_adtc_start+0x214>)
   20348:	2200      	movs	r2, #0
   2034a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   2034c:	2301      	movs	r3, #1
}
   2034e:	0018      	movs	r0, r3
   20350:	46bd      	mov	sp, r7
   20352:	b009      	add	sp, #36	; 0x24
   20354:	bd90      	pop	{r4, r7, pc}
   20356:	46c0      	nop			; (mov r8, r8)
   20358:	20004293 	.word	0x20004293
   2035c:	0001fc09 	.word	0x0001fc09
   20360:	20004250 	.word	0x20004250
   20364:	00028791 	.word	0x00028791
   20368:	0002856d 	.word	0x0002856d
   2036c:	20004294 	.word	0x20004294
   20370:	0001fcc5 	.word	0x0001fcc5
   20374:	2000429c 	.word	0x2000429c
   20378:	2000429e 	.word	0x2000429e
   2037c:	20004298 	.word	0x20004298

00020380 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   20380:	b580      	push	{r7, lr}
   20382:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   20384:	4b02      	ldr	r3, [pc, #8]	; (20390 <sd_mmc_spi_get_response+0x10>)
   20386:	681b      	ldr	r3, [r3, #0]
}
   20388:	0018      	movs	r0, r3
   2038a:	46bd      	mov	sp, r7
   2038c:	bd80      	pop	{r7, pc}
   2038e:	46c0      	nop			; (mov r8, r8)
   20390:	20004294 	.word	0x20004294

00020394 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   20394:	b590      	push	{r4, r7, lr}
   20396:	b085      	sub	sp, #20
   20398:	af00      	add	r7, sp, #0
   2039a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   2039c:	230e      	movs	r3, #14
   2039e:	18fb      	adds	r3, r7, r3
   203a0:	22ff      	movs	r2, #255	; 0xff
   203a2:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   203a4:	4b1c      	ldr	r3, [pc, #112]	; (20418 <sd_mmc_spi_read_word+0x84>)
   203a6:	2200      	movs	r2, #0
   203a8:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   203aa:	4b1c      	ldr	r3, [pc, #112]	; (2041c <sd_mmc_spi_read_word+0x88>)
   203ac:	681a      	ldr	r2, [r3, #0]
   203ae:	4b1c      	ldr	r3, [pc, #112]	; (20420 <sd_mmc_spi_read_word+0x8c>)
   203b0:	881b      	ldrh	r3, [r3, #0]
   203b2:	0019      	movs	r1, r3
   203b4:	4b1b      	ldr	r3, [pc, #108]	; (20424 <sd_mmc_spi_read_word+0x90>)
   203b6:	0010      	movs	r0, r2
   203b8:	4798      	blx	r3
   203ba:	1e0b      	subs	r3, r1, #0
   203bc:	d10a      	bne.n	203d4 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   203be:	4b1a      	ldr	r3, [pc, #104]	; (20428 <sd_mmc_spi_read_word+0x94>)
   203c0:	4798      	blx	r3
   203c2:	0003      	movs	r3, r0
   203c4:	001a      	movs	r2, r3
   203c6:	2301      	movs	r3, #1
   203c8:	4053      	eors	r3, r2
   203ca:	b2db      	uxtb	r3, r3
   203cc:	2b00      	cmp	r3, #0
   203ce:	d001      	beq.n	203d4 <sd_mmc_spi_read_word+0x40>
			return false;
   203d0:	2300      	movs	r3, #0
   203d2:	e01d      	b.n	20410 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   203d4:	230e      	movs	r3, #14
   203d6:	18fb      	adds	r3, r7, r3
   203d8:	881b      	ldrh	r3, [r3, #0]
   203da:	1d39      	adds	r1, r7, #4
   203dc:	4813      	ldr	r0, [pc, #76]	; (2042c <sd_mmc_spi_read_word+0x98>)
   203de:	2204      	movs	r2, #4
   203e0:	4c13      	ldr	r4, [pc, #76]	; (20430 <sd_mmc_spi_read_word+0x9c>)
   203e2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   203e4:	687b      	ldr	r3, [r7, #4]
   203e6:	687a      	ldr	r2, [r7, #4]
   203e8:	6812      	ldr	r2, [r2, #0]
   203ea:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   203ec:	4b0b      	ldr	r3, [pc, #44]	; (2041c <sd_mmc_spi_read_word+0x88>)
   203ee:	681b      	ldr	r3, [r3, #0]
   203f0:	1d1a      	adds	r2, r3, #4
   203f2:	4b0a      	ldr	r3, [pc, #40]	; (2041c <sd_mmc_spi_read_word+0x88>)
   203f4:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   203f6:	4b09      	ldr	r3, [pc, #36]	; (2041c <sd_mmc_spi_read_word+0x88>)
   203f8:	681a      	ldr	r2, [r3, #0]
   203fa:	4b09      	ldr	r3, [pc, #36]	; (20420 <sd_mmc_spi_read_word+0x8c>)
   203fc:	881b      	ldrh	r3, [r3, #0]
   203fe:	0019      	movs	r1, r3
   20400:	4b08      	ldr	r3, [pc, #32]	; (20424 <sd_mmc_spi_read_word+0x90>)
   20402:	0010      	movs	r0, r2
   20404:	4798      	blx	r3
   20406:	1e0b      	subs	r3, r1, #0
   20408:	d101      	bne.n	2040e <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   2040a:	4b0a      	ldr	r3, [pc, #40]	; (20434 <sd_mmc_spi_read_word+0xa0>)
   2040c:	4798      	blx	r3
	}
	return true;
   2040e:	2301      	movs	r3, #1
}
   20410:	0018      	movs	r0, r3
   20412:	46bd      	mov	sp, r7
   20414:	b005      	add	sp, #20
   20416:	bd90      	pop	{r4, r7, pc}
   20418:	20004293 	.word	0x20004293
   2041c:	20004298 	.word	0x20004298
   20420:	2000429c 	.word	0x2000429c
   20424:	00033095 	.word	0x00033095
   20428:	0001fd31 	.word	0x0001fd31
   2042c:	20004250 	.word	0x20004250
   20430:	0002856d 	.word	0x0002856d
   20434:	0001fdb5 	.word	0x0001fdb5

00020438 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   20438:	b590      	push	{r4, r7, lr}
   2043a:	b085      	sub	sp, #20
   2043c:	af00      	add	r7, sp, #0
   2043e:	6078      	str	r0, [r7, #4]
   20440:	000a      	movs	r2, r1
   20442:	1cbb      	adds	r3, r7, #2
   20444:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   20446:	230a      	movs	r3, #10
   20448:	18fb      	adds	r3, r7, r3
   2044a:	22ff      	movs	r2, #255	; 0xff
   2044c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2044e:	4b1c      	ldr	r3, [pc, #112]	; (204c0 <sd_mmc_spi_start_read_blocks+0x88>)
   20450:	2200      	movs	r2, #0
   20452:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20454:	2300      	movs	r3, #0
   20456:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20458:	e025      	b.n	204a6 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   2045a:	4b1a      	ldr	r3, [pc, #104]	; (204c4 <sd_mmc_spi_start_read_blocks+0x8c>)
   2045c:	4798      	blx	r3
   2045e:	0003      	movs	r3, r0
   20460:	001a      	movs	r2, r3
   20462:	2301      	movs	r3, #1
   20464:	4053      	eors	r3, r2
   20466:	b2db      	uxtb	r3, r3
   20468:	2b00      	cmp	r3, #0
   2046a:	d001      	beq.n	20470 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   2046c:	2300      	movs	r3, #0
   2046e:	e022      	b.n	204b6 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   20470:	687a      	ldr	r2, [r7, #4]
   20472:	68fb      	ldr	r3, [r7, #12]
   20474:	18d1      	adds	r1, r2, r3
   20476:	4b14      	ldr	r3, [pc, #80]	; (204c8 <sd_mmc_spi_start_read_blocks+0x90>)
   20478:	881a      	ldrh	r2, [r3, #0]
   2047a:	230a      	movs	r3, #10
   2047c:	18fb      	adds	r3, r7, r3
   2047e:	881b      	ldrh	r3, [r3, #0]
   20480:	4812      	ldr	r0, [pc, #72]	; (204cc <sd_mmc_spi_start_read_blocks+0x94>)
   20482:	4c13      	ldr	r4, [pc, #76]	; (204d0 <sd_mmc_spi_start_read_blocks+0x98>)
   20484:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   20486:	4b10      	ldr	r3, [pc, #64]	; (204c8 <sd_mmc_spi_start_read_blocks+0x90>)
   20488:	881b      	ldrh	r3, [r3, #0]
   2048a:	001a      	movs	r2, r3
   2048c:	68fb      	ldr	r3, [r7, #12]
   2048e:	189b      	adds	r3, r3, r2
   20490:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20492:	4b0d      	ldr	r3, [pc, #52]	; (204c8 <sd_mmc_spi_start_read_blocks+0x90>)
   20494:	881b      	ldrh	r3, [r3, #0]
   20496:	001a      	movs	r2, r3
   20498:	4b0e      	ldr	r3, [pc, #56]	; (204d4 <sd_mmc_spi_start_read_blocks+0x9c>)
   2049a:	681b      	ldr	r3, [r3, #0]
   2049c:	18d2      	adds	r2, r2, r3
   2049e:	4b0d      	ldr	r3, [pc, #52]	; (204d4 <sd_mmc_spi_start_read_blocks+0x9c>)
   204a0:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   204a2:	4b0d      	ldr	r3, [pc, #52]	; (204d8 <sd_mmc_spi_start_read_blocks+0xa0>)
   204a4:	4798      	blx	r3
	while (nb_block--) {
   204a6:	1cbb      	adds	r3, r7, #2
   204a8:	881b      	ldrh	r3, [r3, #0]
   204aa:	1cba      	adds	r2, r7, #2
   204ac:	1e59      	subs	r1, r3, #1
   204ae:	8011      	strh	r1, [r2, #0]
   204b0:	2b00      	cmp	r3, #0
   204b2:	d1d2      	bne.n	2045a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   204b4:	2301      	movs	r3, #1
}
   204b6:	0018      	movs	r0, r3
   204b8:	46bd      	mov	sp, r7
   204ba:	b005      	add	sp, #20
   204bc:	bd90      	pop	{r4, r7, pc}
   204be:	46c0      	nop			; (mov r8, r8)
   204c0:	20004293 	.word	0x20004293
   204c4:	0001fd31 	.word	0x0001fd31
   204c8:	2000429c 	.word	0x2000429c
   204cc:	20004250 	.word	0x20004250
   204d0:	0002856d 	.word	0x0002856d
   204d4:	20004298 	.word	0x20004298
   204d8:	0001fdb5 	.word	0x0001fdb5

000204dc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   204dc:	b580      	push	{r7, lr}
   204de:	af00      	add	r7, sp, #0
	return true;
   204e0:	2301      	movs	r3, #1
}
   204e2:	0018      	movs	r0, r3
   204e4:	46bd      	mov	sp, r7
   204e6:	bd80      	pop	{r7, pc}

000204e8 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   204e8:	b580      	push	{r7, lr}
   204ea:	b084      	sub	sp, #16
   204ec:	af00      	add	r7, sp, #0
   204ee:	6078      	str	r0, [r7, #4]
   204f0:	000a      	movs	r2, r1
   204f2:	1cbb      	adds	r3, r7, #2
   204f4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   204f6:	4b24      	ldr	r3, [pc, #144]	; (20588 <sd_mmc_spi_start_write_blocks+0xa0>)
   204f8:	2200      	movs	r2, #0
   204fa:	701a      	strb	r2, [r3, #0]
	pos = 0;
   204fc:	2300      	movs	r3, #0
   204fe:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20500:	e035      	b.n	2056e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   20502:	4b22      	ldr	r3, [pc, #136]	; (2058c <sd_mmc_spi_start_write_blocks+0xa4>)
   20504:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   20506:	687a      	ldr	r2, [r7, #4]
   20508:	68fb      	ldr	r3, [r7, #12]
   2050a:	18d1      	adds	r1, r2, r3
   2050c:	4b20      	ldr	r3, [pc, #128]	; (20590 <sd_mmc_spi_start_write_blocks+0xa8>)
   2050e:	881a      	ldrh	r2, [r3, #0]
   20510:	4b20      	ldr	r3, [pc, #128]	; (20594 <sd_mmc_spi_start_write_blocks+0xac>)
   20512:	0018      	movs	r0, r3
   20514:	4b20      	ldr	r3, [pc, #128]	; (20598 <sd_mmc_spi_start_write_blocks+0xb0>)
   20516:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   20518:	4b1d      	ldr	r3, [pc, #116]	; (20590 <sd_mmc_spi_start_write_blocks+0xa8>)
   2051a:	881b      	ldrh	r3, [r3, #0]
   2051c:	001a      	movs	r2, r3
   2051e:	68fb      	ldr	r3, [r7, #12]
   20520:	189b      	adds	r3, r3, r2
   20522:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20524:	4b1a      	ldr	r3, [pc, #104]	; (20590 <sd_mmc_spi_start_write_blocks+0xa8>)
   20526:	881b      	ldrh	r3, [r3, #0]
   20528:	001a      	movs	r2, r3
   2052a:	4b1c      	ldr	r3, [pc, #112]	; (2059c <sd_mmc_spi_start_write_blocks+0xb4>)
   2052c:	681b      	ldr	r3, [r3, #0]
   2052e:	18d2      	adds	r2, r2, r3
   20530:	4b1a      	ldr	r3, [pc, #104]	; (2059c <sd_mmc_spi_start_write_blocks+0xb4>)
   20532:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   20534:	4b1a      	ldr	r3, [pc, #104]	; (205a0 <sd_mmc_spi_start_write_blocks+0xb8>)
   20536:	4798      	blx	r3
   20538:	0003      	movs	r3, r0
   2053a:	001a      	movs	r2, r3
   2053c:	2301      	movs	r3, #1
   2053e:	4053      	eors	r3, r2
   20540:	b2db      	uxtb	r3, r3
   20542:	2b00      	cmp	r3, #0
   20544:	d001      	beq.n	2054a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   20546:	2300      	movs	r3, #0
   20548:	e019      	b.n	2057e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   2054a:	1cbb      	adds	r3, r7, #2
   2054c:	881b      	ldrh	r3, [r3, #0]
   2054e:	2b00      	cmp	r3, #0
   20550:	d00d      	beq.n	2056e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   20552:	4b14      	ldr	r3, [pc, #80]	; (205a4 <sd_mmc_spi_start_write_blocks+0xbc>)
   20554:	4798      	blx	r3
   20556:	0003      	movs	r3, r0
   20558:	001a      	movs	r2, r3
   2055a:	2301      	movs	r3, #1
   2055c:	4053      	eors	r3, r2
   2055e:	b2db      	uxtb	r3, r3
   20560:	2b00      	cmp	r3, #0
   20562:	d004      	beq.n	2056e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20564:	4b08      	ldr	r3, [pc, #32]	; (20588 <sd_mmc_spi_start_write_blocks+0xa0>)
   20566:	2205      	movs	r2, #5
   20568:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   2056a:	2300      	movs	r3, #0
   2056c:	e007      	b.n	2057e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   2056e:	1cbb      	adds	r3, r7, #2
   20570:	881b      	ldrh	r3, [r3, #0]
   20572:	1cba      	adds	r2, r7, #2
   20574:	1e59      	subs	r1, r3, #1
   20576:	8011      	strh	r1, [r2, #0]
   20578:	2b00      	cmp	r3, #0
   2057a:	d1c2      	bne.n	20502 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   2057c:	2301      	movs	r3, #1
}
   2057e:	0018      	movs	r0, r3
   20580:	46bd      	mov	sp, r7
   20582:	b004      	add	sp, #16
   20584:	bd80      	pop	{r7, pc}
   20586:	46c0      	nop			; (mov r8, r8)
   20588:	20004293 	.word	0x20004293
   2058c:	0001fde1 	.word	0x0001fde1
   20590:	2000429c 	.word	0x2000429c
   20594:	20004250 	.word	0x20004250
   20598:	00028791 	.word	0x00028791
   2059c:	20004298 	.word	0x20004298
   205a0:	0001fe31 	.word	0x0001fe31
   205a4:	0001fcc5 	.word	0x0001fcc5

000205a8 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   205a8:	b580      	push	{r7, lr}
   205aa:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   205ac:	4b09      	ldr	r3, [pc, #36]	; (205d4 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   205ae:	4798      	blx	r3
   205b0:	0003      	movs	r3, r0
   205b2:	001a      	movs	r2, r3
   205b4:	2301      	movs	r3, #1
   205b6:	4053      	eors	r3, r2
   205b8:	b2db      	uxtb	r3, r3
   205ba:	2b00      	cmp	r3, #0
   205bc:	d004      	beq.n	205c8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   205be:	4b06      	ldr	r3, [pc, #24]	; (205d8 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   205c0:	2205      	movs	r2, #5
   205c2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   205c4:	2300      	movs	r3, #0
   205c6:	e002      	b.n	205ce <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   205c8:	4b04      	ldr	r3, [pc, #16]	; (205dc <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   205ca:	4798      	blx	r3
   205cc:	0003      	movs	r3, r0
}
   205ce:	0018      	movs	r0, r3
   205d0:	46bd      	mov	sp, r7
   205d2:	bd80      	pop	{r7, pc}
   205d4:	0001fcc5 	.word	0x0001fcc5
   205d8:	20004293 	.word	0x20004293
   205dc:	0001fec5 	.word	0x0001fec5

000205e0 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   205e0:	b580      	push	{r7, lr}
   205e2:	b082      	sub	sp, #8
   205e4:	af00      	add	r7, sp, #0
   205e6:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   205e8:	687b      	ldr	r3, [r7, #4]
   205ea:	2b00      	cmp	r3, #0
   205ec:	d00c      	beq.n	20608 <delay_cycles+0x28>
		SysTick->LOAD = n;
   205ee:	4b08      	ldr	r3, [pc, #32]	; (20610 <delay_cycles+0x30>)
   205f0:	687a      	ldr	r2, [r7, #4]
   205f2:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   205f4:	4b06      	ldr	r3, [pc, #24]	; (20610 <delay_cycles+0x30>)
   205f6:	2200      	movs	r2, #0
   205f8:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   205fa:	46c0      	nop			; (mov r8, r8)
   205fc:	4b04      	ldr	r3, [pc, #16]	; (20610 <delay_cycles+0x30>)
   205fe:	681a      	ldr	r2, [r3, #0]
   20600:	2380      	movs	r3, #128	; 0x80
   20602:	025b      	lsls	r3, r3, #9
   20604:	4013      	ands	r3, r2
   20606:	d0f9      	beq.n	205fc <delay_cycles+0x1c>
		};
	}
}
   20608:	46c0      	nop			; (mov r8, r8)
   2060a:	46bd      	mov	sp, r7
   2060c:	b002      	add	sp, #8
   2060e:	bd80      	pop	{r7, pc}
   20610:	e000e010 	.word	0xe000e010

00020614 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   20614:	b580      	push	{r7, lr}
   20616:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   20618:	2000      	movs	r0, #0
   2061a:	4b0f      	ldr	r3, [pc, #60]	; (20658 <delay_init+0x44>)
   2061c:	4798      	blx	r3
   2061e:	0002      	movs	r2, r0
   20620:	4b0e      	ldr	r3, [pc, #56]	; (2065c <delay_init+0x48>)
   20622:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   20624:	4b0d      	ldr	r3, [pc, #52]	; (2065c <delay_init+0x48>)
   20626:	6818      	ldr	r0, [r3, #0]
   20628:	4b0d      	ldr	r3, [pc, #52]	; (20660 <delay_init+0x4c>)
   2062a:	22fa      	movs	r2, #250	; 0xfa
   2062c:	0091      	lsls	r1, r2, #2
   2062e:	4798      	blx	r3
   20630:	0003      	movs	r3, r0
   20632:	001a      	movs	r2, r3
   20634:	4b09      	ldr	r3, [pc, #36]	; (2065c <delay_init+0x48>)
   20636:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   20638:	4b08      	ldr	r3, [pc, #32]	; (2065c <delay_init+0x48>)
   2063a:	6818      	ldr	r0, [r3, #0]
   2063c:	4b08      	ldr	r3, [pc, #32]	; (20660 <delay_init+0x4c>)
   2063e:	22fa      	movs	r2, #250	; 0xfa
   20640:	0091      	lsls	r1, r2, #2
   20642:	4798      	blx	r3
   20644:	0003      	movs	r3, r0
   20646:	001a      	movs	r2, r3
   20648:	4b06      	ldr	r3, [pc, #24]	; (20664 <delay_init+0x50>)
   2064a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   2064c:	4b06      	ldr	r3, [pc, #24]	; (20668 <delay_init+0x54>)
   2064e:	2205      	movs	r2, #5
   20650:	601a      	str	r2, [r3, #0]
}
   20652:	46c0      	nop			; (mov r8, r8)
   20654:	46bd      	mov	sp, r7
   20656:	bd80      	pop	{r7, pc}
   20658:	0002a315 	.word	0x0002a315
   2065c:	2000011c 	.word	0x2000011c
   20660:	00032f89 	.word	0x00032f89
   20664:	20000120 	.word	0x20000120
   20668:	e000e010 	.word	0xe000e010

0002066c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   2066c:	b580      	push	{r7, lr}
   2066e:	b082      	sub	sp, #8
   20670:	af00      	add	r7, sp, #0
   20672:	6078      	str	r0, [r7, #4]
	while (n--) {
   20674:	e004      	b.n	20680 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   20676:	4b07      	ldr	r3, [pc, #28]	; (20694 <delay_cycles_ms+0x28>)
   20678:	681b      	ldr	r3, [r3, #0]
   2067a:	0018      	movs	r0, r3
   2067c:	4b06      	ldr	r3, [pc, #24]	; (20698 <delay_cycles_ms+0x2c>)
   2067e:	4798      	blx	r3
	while (n--) {
   20680:	687b      	ldr	r3, [r7, #4]
   20682:	1e5a      	subs	r2, r3, #1
   20684:	607a      	str	r2, [r7, #4]
   20686:	2b00      	cmp	r3, #0
   20688:	d1f5      	bne.n	20676 <delay_cycles_ms+0xa>
	}
}
   2068a:	46c0      	nop			; (mov r8, r8)
   2068c:	46bd      	mov	sp, r7
   2068e:	b002      	add	sp, #8
   20690:	bd80      	pop	{r7, pc}
   20692:	46c0      	nop			; (mov r8, r8)
   20694:	2000011c 	.word	0x2000011c
   20698:	000205e1 	.word	0x000205e1

0002069c <system_pinmux_get_group_from_gpio_pin>:
{
   2069c:	b580      	push	{r7, lr}
   2069e:	b084      	sub	sp, #16
   206a0:	af00      	add	r7, sp, #0
   206a2:	0002      	movs	r2, r0
   206a4:	1dfb      	adds	r3, r7, #7
   206a6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   206a8:	230f      	movs	r3, #15
   206aa:	18fb      	adds	r3, r7, r3
   206ac:	1dfa      	adds	r2, r7, #7
   206ae:	7812      	ldrb	r2, [r2, #0]
   206b0:	09d2      	lsrs	r2, r2, #7
   206b2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   206b4:	230e      	movs	r3, #14
   206b6:	18fb      	adds	r3, r7, r3
   206b8:	1dfa      	adds	r2, r7, #7
   206ba:	7812      	ldrb	r2, [r2, #0]
   206bc:	0952      	lsrs	r2, r2, #5
   206be:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   206c0:	4b0d      	ldr	r3, [pc, #52]	; (206f8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   206c2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   206c4:	230f      	movs	r3, #15
   206c6:	18fb      	adds	r3, r7, r3
   206c8:	781b      	ldrb	r3, [r3, #0]
   206ca:	2b00      	cmp	r3, #0
   206cc:	d10f      	bne.n	206ee <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   206ce:	230f      	movs	r3, #15
   206d0:	18fb      	adds	r3, r7, r3
   206d2:	781b      	ldrb	r3, [r3, #0]
   206d4:	009b      	lsls	r3, r3, #2
   206d6:	2210      	movs	r2, #16
   206d8:	4694      	mov	ip, r2
   206da:	44bc      	add	ip, r7
   206dc:	4463      	add	r3, ip
   206de:	3b08      	subs	r3, #8
   206e0:	681a      	ldr	r2, [r3, #0]
   206e2:	230e      	movs	r3, #14
   206e4:	18fb      	adds	r3, r7, r3
   206e6:	781b      	ldrb	r3, [r3, #0]
   206e8:	01db      	lsls	r3, r3, #7
   206ea:	18d3      	adds	r3, r2, r3
   206ec:	e000      	b.n	206f0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   206ee:	2300      	movs	r3, #0
}
   206f0:	0018      	movs	r0, r3
   206f2:	46bd      	mov	sp, r7
   206f4:	b004      	add	sp, #16
   206f6:	bd80      	pop	{r7, pc}
   206f8:	41004400 	.word	0x41004400

000206fc <system_interrupt_enable_global>:
{
   206fc:	b580      	push	{r7, lr}
   206fe:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   20700:	4b04      	ldr	r3, [pc, #16]	; (20714 <system_interrupt_enable_global+0x18>)
   20702:	2201      	movs	r2, #1
   20704:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   20706:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   2070a:	b662      	cpsie	i
}
   2070c:	46c0      	nop			; (mov r8, r8)
   2070e:	46bd      	mov	sp, r7
   20710:	bd80      	pop	{r7, pc}
   20712:	46c0      	nop			; (mov r8, r8)
   20714:	20000126 	.word	0x20000126

00020718 <port_get_group_from_gpio_pin>:
{
   20718:	b580      	push	{r7, lr}
   2071a:	b082      	sub	sp, #8
   2071c:	af00      	add	r7, sp, #0
   2071e:	0002      	movs	r2, r0
   20720:	1dfb      	adds	r3, r7, #7
   20722:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20724:	1dfb      	adds	r3, r7, #7
   20726:	781b      	ldrb	r3, [r3, #0]
   20728:	0018      	movs	r0, r3
   2072a:	4b03      	ldr	r3, [pc, #12]	; (20738 <port_get_group_from_gpio_pin+0x20>)
   2072c:	4798      	blx	r3
   2072e:	0003      	movs	r3, r0
}
   20730:	0018      	movs	r0, r3
   20732:	46bd      	mov	sp, r7
   20734:	b002      	add	sp, #8
   20736:	bd80      	pop	{r7, pc}
   20738:	0002069d 	.word	0x0002069d

0002073c <port_get_config_defaults>:
{
   2073c:	b580      	push	{r7, lr}
   2073e:	b082      	sub	sp, #8
   20740:	af00      	add	r7, sp, #0
   20742:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20744:	687b      	ldr	r3, [r7, #4]
   20746:	2200      	movs	r2, #0
   20748:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2074a:	687b      	ldr	r3, [r7, #4]
   2074c:	2201      	movs	r2, #1
   2074e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20750:	687b      	ldr	r3, [r7, #4]
   20752:	2200      	movs	r2, #0
   20754:	709a      	strb	r2, [r3, #2]
}
   20756:	46c0      	nop			; (mov r8, r8)
   20758:	46bd      	mov	sp, r7
   2075a:	b002      	add	sp, #8
   2075c:	bd80      	pop	{r7, pc}
	...

00020760 <port_pin_set_output_level>:
{
   20760:	b580      	push	{r7, lr}
   20762:	b084      	sub	sp, #16
   20764:	af00      	add	r7, sp, #0
   20766:	0002      	movs	r2, r0
   20768:	1dfb      	adds	r3, r7, #7
   2076a:	701a      	strb	r2, [r3, #0]
   2076c:	1dbb      	adds	r3, r7, #6
   2076e:	1c0a      	adds	r2, r1, #0
   20770:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   20772:	1dfb      	adds	r3, r7, #7
   20774:	781b      	ldrb	r3, [r3, #0]
   20776:	0018      	movs	r0, r3
   20778:	4b0d      	ldr	r3, [pc, #52]	; (207b0 <port_pin_set_output_level+0x50>)
   2077a:	4798      	blx	r3
   2077c:	0003      	movs	r3, r0
   2077e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20780:	1dfb      	adds	r3, r7, #7
   20782:	781b      	ldrb	r3, [r3, #0]
   20784:	221f      	movs	r2, #31
   20786:	4013      	ands	r3, r2
   20788:	2201      	movs	r2, #1
   2078a:	409a      	lsls	r2, r3
   2078c:	0013      	movs	r3, r2
   2078e:	60bb      	str	r3, [r7, #8]
	if (level) {
   20790:	1dbb      	adds	r3, r7, #6
   20792:	781b      	ldrb	r3, [r3, #0]
   20794:	2b00      	cmp	r3, #0
   20796:	d003      	beq.n	207a0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20798:	68fb      	ldr	r3, [r7, #12]
   2079a:	68ba      	ldr	r2, [r7, #8]
   2079c:	619a      	str	r2, [r3, #24]
}
   2079e:	e002      	b.n	207a6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   207a0:	68fb      	ldr	r3, [r7, #12]
   207a2:	68ba      	ldr	r2, [r7, #8]
   207a4:	615a      	str	r2, [r3, #20]
}
   207a6:	46c0      	nop			; (mov r8, r8)
   207a8:	46bd      	mov	sp, r7
   207aa:	b004      	add	sp, #16
   207ac:	bd80      	pop	{r7, pc}
   207ae:	46c0      	nop			; (mov r8, r8)
   207b0:	00020719 	.word	0x00020719

000207b4 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   207b4:	b580      	push	{r7, lr}
   207b6:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   207b8:	4b04      	ldr	r3, [pc, #16]	; (207cc <chip_isr+0x18>)
   207ba:	681b      	ldr	r3, [r3, #0]
   207bc:	2b00      	cmp	r3, #0
   207be:	d002      	beq.n	207c6 <chip_isr+0x12>
		gpfIsr();
   207c0:	4b02      	ldr	r3, [pc, #8]	; (207cc <chip_isr+0x18>)
   207c2:	681b      	ldr	r3, [r3, #0]
   207c4:	4798      	blx	r3
	}
}
   207c6:	46c0      	nop			; (mov r8, r8)
   207c8:	46bd      	mov	sp, r7
   207ca:	bd80      	pop	{r7, pc}
   207cc:	200042a0 	.word	0x200042a0

000207d0 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   207d0:	b580      	push	{r7, lr}
   207d2:	b082      	sub	sp, #8
   207d4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   207d6:	1d3b      	adds	r3, r7, #4
   207d8:	0018      	movs	r0, r3
   207da:	4b10      	ldr	r3, [pc, #64]	; (2081c <init_chip_pins+0x4c>)
   207dc:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   207de:	1d3b      	adds	r3, r7, #4
   207e0:	2201      	movs	r2, #1
   207e2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   207e4:	1d3b      	adds	r3, r7, #4
   207e6:	0019      	movs	r1, r3
   207e8:	201b      	movs	r0, #27
   207ea:	4b0d      	ldr	r3, [pc, #52]	; (20820 <init_chip_pins+0x50>)
   207ec:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   207ee:	1d3b      	adds	r3, r7, #4
   207f0:	0019      	movs	r1, r3
   207f2:	201c      	movs	r0, #28
   207f4:	4b0a      	ldr	r3, [pc, #40]	; (20820 <init_chip_pins+0x50>)
   207f6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   207f8:	1d3b      	adds	r3, r7, #4
   207fa:	0019      	movs	r1, r3
   207fc:	2028      	movs	r0, #40	; 0x28
   207fe:	4b08      	ldr	r3, [pc, #32]	; (20820 <init_chip_pins+0x50>)
   20800:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20802:	2100      	movs	r1, #0
   20804:	201c      	movs	r0, #28
   20806:	4b07      	ldr	r3, [pc, #28]	; (20824 <init_chip_pins+0x54>)
   20808:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   2080a:	2100      	movs	r1, #0
   2080c:	201b      	movs	r0, #27
   2080e:	4b05      	ldr	r3, [pc, #20]	; (20824 <init_chip_pins+0x54>)
   20810:	4798      	blx	r3
}
   20812:	46c0      	nop			; (mov r8, r8)
   20814:	46bd      	mov	sp, r7
   20816:	b002      	add	sp, #8
   20818:	bd80      	pop	{r7, pc}
   2081a:	46c0      	nop			; (mov r8, r8)
   2081c:	0002073d 	.word	0x0002073d
   20820:	00026f5d 	.word	0x00026f5d
   20824:	00020761 	.word	0x00020761

00020828 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   20828:	b580      	push	{r7, lr}
   2082a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   2082c:	4b0b      	ldr	r3, [pc, #44]	; (2085c <nm_bsp_init+0x34>)
   2082e:	2200      	movs	r2, #0
   20830:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   20832:	4b0b      	ldr	r3, [pc, #44]	; (20860 <nm_bsp_init+0x38>)
   20834:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   20836:	4b0b      	ldr	r3, [pc, #44]	; (20864 <nm_bsp_init+0x3c>)
   20838:	681b      	ldr	r3, [r3, #0]
   2083a:	2201      	movs	r2, #1
   2083c:	4013      	ands	r3, r2
   2083e:	d004      	beq.n	2084a <nm_bsp_init+0x22>
   20840:	4b08      	ldr	r3, [pc, #32]	; (20864 <nm_bsp_init+0x3c>)
   20842:	681b      	ldr	r3, [r3, #0]
   20844:	2202      	movs	r2, #2
   20846:	4013      	ands	r3, r2
   20848:	d101      	bne.n	2084e <nm_bsp_init+0x26>
	    delay_init();
   2084a:	4b07      	ldr	r3, [pc, #28]	; (20868 <nm_bsp_init+0x40>)
   2084c:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   2084e:	4b07      	ldr	r3, [pc, #28]	; (2086c <nm_bsp_init+0x44>)
   20850:	4798      	blx	r3

	return M2M_SUCCESS;
   20852:	2300      	movs	r3, #0
}
   20854:	0018      	movs	r0, r3
   20856:	46bd      	mov	sp, r7
   20858:	bd80      	pop	{r7, pc}
   2085a:	46c0      	nop			; (mov r8, r8)
   2085c:	200042a0 	.word	0x200042a0
   20860:	000207d1 	.word	0x000207d1
   20864:	e000e010 	.word	0xe000e010
   20868:	00020615 	.word	0x00020615
   2086c:	000206fd 	.word	0x000206fd

00020870 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   20870:	b580      	push	{r7, lr}
   20872:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20874:	2100      	movs	r1, #0
   20876:	201c      	movs	r0, #28
   20878:	4b0b      	ldr	r3, [pc, #44]	; (208a8 <nm_bsp_reset+0x38>)
   2087a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   2087c:	2100      	movs	r1, #0
   2087e:	201b      	movs	r0, #27
   20880:	4b09      	ldr	r3, [pc, #36]	; (208a8 <nm_bsp_reset+0x38>)
   20882:	4798      	blx	r3
	nm_bsp_sleep(1);
   20884:	2001      	movs	r0, #1
   20886:	4b09      	ldr	r3, [pc, #36]	; (208ac <nm_bsp_reset+0x3c>)
   20888:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   2088a:	2101      	movs	r1, #1
   2088c:	201c      	movs	r0, #28
   2088e:	4b06      	ldr	r3, [pc, #24]	; (208a8 <nm_bsp_reset+0x38>)
   20890:	4798      	blx	r3
	nm_bsp_sleep(10);
   20892:	200a      	movs	r0, #10
   20894:	4b05      	ldr	r3, [pc, #20]	; (208ac <nm_bsp_reset+0x3c>)
   20896:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   20898:	2101      	movs	r1, #1
   2089a:	201b      	movs	r0, #27
   2089c:	4b02      	ldr	r3, [pc, #8]	; (208a8 <nm_bsp_reset+0x38>)
   2089e:	4798      	blx	r3
}
   208a0:	46c0      	nop			; (mov r8, r8)
   208a2:	46bd      	mov	sp, r7
   208a4:	bd80      	pop	{r7, pc}
   208a6:	46c0      	nop			; (mov r8, r8)
   208a8:	00020761 	.word	0x00020761
   208ac:	000208b1 	.word	0x000208b1

000208b0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   208b0:	b580      	push	{r7, lr}
   208b2:	b082      	sub	sp, #8
   208b4:	af00      	add	r7, sp, #0
   208b6:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   208b8:	687b      	ldr	r3, [r7, #4]
   208ba:	0018      	movs	r0, r3
   208bc:	4b02      	ldr	r3, [pc, #8]	; (208c8 <nm_bsp_sleep+0x18>)
   208be:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   208c0:	46c0      	nop			; (mov r8, r8)
   208c2:	46bd      	mov	sp, r7
   208c4:	b002      	add	sp, #8
   208c6:	bd80      	pop	{r7, pc}
   208c8:	0001c661 	.word	0x0001c661

000208cc <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   208cc:	b580      	push	{r7, lr}
   208ce:	b086      	sub	sp, #24
   208d0:	af00      	add	r7, sp, #0
   208d2:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   208d4:	4b15      	ldr	r3, [pc, #84]	; (2092c <nm_bsp_register_isr+0x60>)
   208d6:	687a      	ldr	r2, [r7, #4]
   208d8:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   208da:	230c      	movs	r3, #12
   208dc:	18fb      	adds	r3, r7, r3
   208de:	0018      	movs	r0, r3
   208e0:	4b13      	ldr	r3, [pc, #76]	; (20930 <nm_bsp_register_isr+0x64>)
   208e2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   208e4:	230c      	movs	r3, #12
   208e6:	18fb      	adds	r3, r7, r3
   208e8:	2229      	movs	r2, #41	; 0x29
   208ea:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   208ec:	230c      	movs	r3, #12
   208ee:	18fb      	adds	r3, r7, r3
   208f0:	2200      	movs	r2, #0
   208f2:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   208f4:	230c      	movs	r3, #12
   208f6:	18fb      	adds	r3, r7, r3
   208f8:	2201      	movs	r2, #1
   208fa:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   208fc:	230c      	movs	r3, #12
   208fe:	18fb      	adds	r3, r7, r3
   20900:	2202      	movs	r2, #2
   20902:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   20904:	230c      	movs	r3, #12
   20906:	18fb      	adds	r3, r7, r3
   20908:	0019      	movs	r1, r3
   2090a:	2009      	movs	r0, #9
   2090c:	4b09      	ldr	r3, [pc, #36]	; (20934 <nm_bsp_register_isr+0x68>)
   2090e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   20910:	4b09      	ldr	r3, [pc, #36]	; (20938 <nm_bsp_register_isr+0x6c>)
   20912:	2200      	movs	r2, #0
   20914:	2109      	movs	r1, #9
   20916:	0018      	movs	r0, r3
   20918:	4b08      	ldr	r3, [pc, #32]	; (2093c <nm_bsp_register_isr+0x70>)
   2091a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   2091c:	2100      	movs	r1, #0
   2091e:	2009      	movs	r0, #9
   20920:	4b07      	ldr	r3, [pc, #28]	; (20940 <nm_bsp_register_isr+0x74>)
   20922:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   20924:	46c0      	nop			; (mov r8, r8)
   20926:	46bd      	mov	sp, r7
   20928:	b006      	add	sp, #24
   2092a:	bd80      	pop	{r7, pc}
   2092c:	200042a0 	.word	0x200042a0
   20930:	00026e05 	.word	0x00026e05
   20934:	00026e39 	.word	0x00026e39
   20938:	000207b5 	.word	0x000207b5
   2093c:	00026a05 	.word	0x00026a05
   20940:	00026a69 	.word	0x00026a69

00020944 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   20944:	b580      	push	{r7, lr}
   20946:	b082      	sub	sp, #8
   20948:	af00      	add	r7, sp, #0
   2094a:	0002      	movs	r2, r0
   2094c:	1dfb      	adds	r3, r7, #7
   2094e:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   20950:	1dfb      	adds	r3, r7, #7
   20952:	781b      	ldrb	r3, [r3, #0]
   20954:	2b00      	cmp	r3, #0
   20956:	d004      	beq.n	20962 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20958:	2100      	movs	r1, #0
   2095a:	2009      	movs	r0, #9
   2095c:	4b05      	ldr	r3, [pc, #20]	; (20974 <nm_bsp_interrupt_ctrl+0x30>)
   2095e:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   20960:	e003      	b.n	2096a <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   20962:	2100      	movs	r1, #0
   20964:	2009      	movs	r0, #9
   20966:	4b04      	ldr	r3, [pc, #16]	; (20978 <nm_bsp_interrupt_ctrl+0x34>)
   20968:	4798      	blx	r3
}
   2096a:	46c0      	nop			; (mov r8, r8)
   2096c:	46bd      	mov	sp, r7
   2096e:	b002      	add	sp, #8
   20970:	bd80      	pop	{r7, pc}
   20972:	46c0      	nop			; (mov r8, r8)
   20974:	00026a69 	.word	0x00026a69
   20978:	00026ab1 	.word	0x00026ab1

0002097c <system_pinmux_get_group_from_gpio_pin>:
{
   2097c:	b580      	push	{r7, lr}
   2097e:	b084      	sub	sp, #16
   20980:	af00      	add	r7, sp, #0
   20982:	0002      	movs	r2, r0
   20984:	1dfb      	adds	r3, r7, #7
   20986:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20988:	230f      	movs	r3, #15
   2098a:	18fb      	adds	r3, r7, r3
   2098c:	1dfa      	adds	r2, r7, #7
   2098e:	7812      	ldrb	r2, [r2, #0]
   20990:	09d2      	lsrs	r2, r2, #7
   20992:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20994:	230e      	movs	r3, #14
   20996:	18fb      	adds	r3, r7, r3
   20998:	1dfa      	adds	r2, r7, #7
   2099a:	7812      	ldrb	r2, [r2, #0]
   2099c:	0952      	lsrs	r2, r2, #5
   2099e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   209a0:	4b0d      	ldr	r3, [pc, #52]	; (209d8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   209a2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   209a4:	230f      	movs	r3, #15
   209a6:	18fb      	adds	r3, r7, r3
   209a8:	781b      	ldrb	r3, [r3, #0]
   209aa:	2b00      	cmp	r3, #0
   209ac:	d10f      	bne.n	209ce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   209ae:	230f      	movs	r3, #15
   209b0:	18fb      	adds	r3, r7, r3
   209b2:	781b      	ldrb	r3, [r3, #0]
   209b4:	009b      	lsls	r3, r3, #2
   209b6:	2210      	movs	r2, #16
   209b8:	4694      	mov	ip, r2
   209ba:	44bc      	add	ip, r7
   209bc:	4463      	add	r3, ip
   209be:	3b08      	subs	r3, #8
   209c0:	681a      	ldr	r2, [r3, #0]
   209c2:	230e      	movs	r3, #14
   209c4:	18fb      	adds	r3, r7, r3
   209c6:	781b      	ldrb	r3, [r3, #0]
   209c8:	01db      	lsls	r3, r3, #7
   209ca:	18d3      	adds	r3, r2, r3
   209cc:	e000      	b.n	209d0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   209ce:	2300      	movs	r3, #0
}
   209d0:	0018      	movs	r0, r3
   209d2:	46bd      	mov	sp, r7
   209d4:	b004      	add	sp, #16
   209d6:	bd80      	pop	{r7, pc}
   209d8:	41004400 	.word	0x41004400

000209dc <system_interrupt_enable>:
{
   209dc:	b580      	push	{r7, lr}
   209de:	b082      	sub	sp, #8
   209e0:	af00      	add	r7, sp, #0
   209e2:	0002      	movs	r2, r0
   209e4:	1dfb      	adds	r3, r7, #7
   209e6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   209e8:	4b06      	ldr	r3, [pc, #24]	; (20a04 <system_interrupt_enable+0x28>)
   209ea:	1dfa      	adds	r2, r7, #7
   209ec:	7812      	ldrb	r2, [r2, #0]
   209ee:	0011      	movs	r1, r2
   209f0:	221f      	movs	r2, #31
   209f2:	400a      	ands	r2, r1
   209f4:	2101      	movs	r1, #1
   209f6:	4091      	lsls	r1, r2
   209f8:	000a      	movs	r2, r1
   209fa:	601a      	str	r2, [r3, #0]
}
   209fc:	46c0      	nop			; (mov r8, r8)
   209fe:	46bd      	mov	sp, r7
   20a00:	b002      	add	sp, #8
   20a02:	bd80      	pop	{r7, pc}
   20a04:	e000e100 	.word	0xe000e100

00020a08 <system_interrupt_disable>:
{
   20a08:	b580      	push	{r7, lr}
   20a0a:	b082      	sub	sp, #8
   20a0c:	af00      	add	r7, sp, #0
   20a0e:	0002      	movs	r2, r0
   20a10:	1dfb      	adds	r3, r7, #7
   20a12:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20a14:	4a07      	ldr	r2, [pc, #28]	; (20a34 <system_interrupt_disable+0x2c>)
   20a16:	1dfb      	adds	r3, r7, #7
   20a18:	781b      	ldrb	r3, [r3, #0]
   20a1a:	0019      	movs	r1, r3
   20a1c:	231f      	movs	r3, #31
   20a1e:	400b      	ands	r3, r1
   20a20:	2101      	movs	r1, #1
   20a22:	4099      	lsls	r1, r3
   20a24:	000b      	movs	r3, r1
   20a26:	0019      	movs	r1, r3
   20a28:	2380      	movs	r3, #128	; 0x80
   20a2a:	50d1      	str	r1, [r2, r3]
}
   20a2c:	46c0      	nop			; (mov r8, r8)
   20a2e:	46bd      	mov	sp, r7
   20a30:	b002      	add	sp, #8
   20a32:	bd80      	pop	{r7, pc}
   20a34:	e000e100 	.word	0xe000e100

00020a38 <port_get_group_from_gpio_pin>:
{
   20a38:	b580      	push	{r7, lr}
   20a3a:	b082      	sub	sp, #8
   20a3c:	af00      	add	r7, sp, #0
   20a3e:	0002      	movs	r2, r0
   20a40:	1dfb      	adds	r3, r7, #7
   20a42:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20a44:	1dfb      	adds	r3, r7, #7
   20a46:	781b      	ldrb	r3, [r3, #0]
   20a48:	0018      	movs	r0, r3
   20a4a:	4b03      	ldr	r3, [pc, #12]	; (20a58 <port_get_group_from_gpio_pin+0x20>)
   20a4c:	4798      	blx	r3
   20a4e:	0003      	movs	r3, r0
}
   20a50:	0018      	movs	r0, r3
   20a52:	46bd      	mov	sp, r7
   20a54:	b002      	add	sp, #8
   20a56:	bd80      	pop	{r7, pc}
   20a58:	0002097d 	.word	0x0002097d

00020a5c <port_get_config_defaults>:
{
   20a5c:	b580      	push	{r7, lr}
   20a5e:	b082      	sub	sp, #8
   20a60:	af00      	add	r7, sp, #0
   20a62:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20a64:	687b      	ldr	r3, [r7, #4]
   20a66:	2200      	movs	r2, #0
   20a68:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20a6a:	687b      	ldr	r3, [r7, #4]
   20a6c:	2201      	movs	r2, #1
   20a6e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20a70:	687b      	ldr	r3, [r7, #4]
   20a72:	2200      	movs	r2, #0
   20a74:	709a      	strb	r2, [r3, #2]
}
   20a76:	46c0      	nop			; (mov r8, r8)
   20a78:	46bd      	mov	sp, r7
   20a7a:	b002      	add	sp, #8
   20a7c:	bd80      	pop	{r7, pc}
	...

00020a80 <port_pin_set_output_level>:
{
   20a80:	b580      	push	{r7, lr}
   20a82:	b084      	sub	sp, #16
   20a84:	af00      	add	r7, sp, #0
   20a86:	0002      	movs	r2, r0
   20a88:	1dfb      	adds	r3, r7, #7
   20a8a:	701a      	strb	r2, [r3, #0]
   20a8c:	1dbb      	adds	r3, r7, #6
   20a8e:	1c0a      	adds	r2, r1, #0
   20a90:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   20a92:	1dfb      	adds	r3, r7, #7
   20a94:	781b      	ldrb	r3, [r3, #0]
   20a96:	0018      	movs	r0, r3
   20a98:	4b0d      	ldr	r3, [pc, #52]	; (20ad0 <port_pin_set_output_level+0x50>)
   20a9a:	4798      	blx	r3
   20a9c:	0003      	movs	r3, r0
   20a9e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20aa0:	1dfb      	adds	r3, r7, #7
   20aa2:	781b      	ldrb	r3, [r3, #0]
   20aa4:	221f      	movs	r2, #31
   20aa6:	4013      	ands	r3, r2
   20aa8:	2201      	movs	r2, #1
   20aaa:	409a      	lsls	r2, r3
   20aac:	0013      	movs	r3, r2
   20aae:	60bb      	str	r3, [r7, #8]
	if (level) {
   20ab0:	1dbb      	adds	r3, r7, #6
   20ab2:	781b      	ldrb	r3, [r3, #0]
   20ab4:	2b00      	cmp	r3, #0
   20ab6:	d003      	beq.n	20ac0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20ab8:	68fb      	ldr	r3, [r7, #12]
   20aba:	68ba      	ldr	r2, [r7, #8]
   20abc:	619a      	str	r2, [r3, #24]
}
   20abe:	e002      	b.n	20ac6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   20ac0:	68fb      	ldr	r3, [r7, #12]
   20ac2:	68ba      	ldr	r2, [r7, #8]
   20ac4:	615a      	str	r2, [r3, #20]
}
   20ac6:	46c0      	nop			; (mov r8, r8)
   20ac8:	46bd      	mov	sp, r7
   20aca:	b004      	add	sp, #16
   20acc:	bd80      	pop	{r7, pc}
   20ace:	46c0      	nop			; (mov r8, r8)
   20ad0:	00020a39 	.word	0x00020a39

00020ad4 <spi_is_syncing>:
{
   20ad4:	b580      	push	{r7, lr}
   20ad6:	b084      	sub	sp, #16
   20ad8:	af00      	add	r7, sp, #0
   20ada:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   20adc:	687b      	ldr	r3, [r7, #4]
   20ade:	681b      	ldr	r3, [r3, #0]
   20ae0:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   20ae2:	68fb      	ldr	r3, [r7, #12]
   20ae4:	69db      	ldr	r3, [r3, #28]
   20ae6:	1e5a      	subs	r2, r3, #1
   20ae8:	4193      	sbcs	r3, r2
   20aea:	b2db      	uxtb	r3, r3
}
   20aec:	0018      	movs	r0, r3
   20aee:	46bd      	mov	sp, r7
   20af0:	b004      	add	sp, #16
   20af2:	bd80      	pop	{r7, pc}

00020af4 <spi_get_config_defaults>:
{
   20af4:	b580      	push	{r7, lr}
   20af6:	b082      	sub	sp, #8
   20af8:	af00      	add	r7, sp, #0
   20afa:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   20afc:	687b      	ldr	r3, [r7, #4]
   20afe:	2201      	movs	r2, #1
   20b00:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   20b02:	687b      	ldr	r3, [r7, #4]
   20b04:	2200      	movs	r2, #0
   20b06:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   20b08:	687b      	ldr	r3, [r7, #4]
   20b0a:	2200      	movs	r2, #0
   20b0c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   20b0e:	687b      	ldr	r3, [r7, #4]
   20b10:	22c0      	movs	r2, #192	; 0xc0
   20b12:	0392      	lsls	r2, r2, #14
   20b14:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   20b16:	687b      	ldr	r3, [r7, #4]
   20b18:	2200      	movs	r2, #0
   20b1a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   20b1c:	687b      	ldr	r3, [r7, #4]
   20b1e:	2200      	movs	r2, #0
   20b20:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   20b22:	687b      	ldr	r3, [r7, #4]
   20b24:	2201      	movs	r2, #1
   20b26:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   20b28:	687b      	ldr	r3, [r7, #4]
   20b2a:	2201      	movs	r2, #1
   20b2c:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   20b2e:	687b      	ldr	r3, [r7, #4]
   20b30:	2200      	movs	r2, #0
   20b32:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   20b34:	687b      	ldr	r3, [r7, #4]
   20b36:	2224      	movs	r2, #36	; 0x24
   20b38:	2100      	movs	r1, #0
   20b3a:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   20b3c:	687b      	ldr	r3, [r7, #4]
   20b3e:	3318      	adds	r3, #24
   20b40:	220c      	movs	r2, #12
   20b42:	2100      	movs	r1, #0
   20b44:	0018      	movs	r0, r3
   20b46:	4b0a      	ldr	r3, [pc, #40]	; (20b70 <spi_get_config_defaults+0x7c>)
   20b48:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   20b4a:	687b      	ldr	r3, [r7, #4]
   20b4c:	4a09      	ldr	r2, [pc, #36]	; (20b74 <spi_get_config_defaults+0x80>)
   20b4e:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   20b50:	687b      	ldr	r3, [r7, #4]
   20b52:	2200      	movs	r2, #0
   20b54:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   20b56:	687b      	ldr	r3, [r7, #4]
   20b58:	2200      	movs	r2, #0
   20b5a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   20b5c:	687b      	ldr	r3, [r7, #4]
   20b5e:	2200      	movs	r2, #0
   20b60:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   20b62:	687b      	ldr	r3, [r7, #4]
   20b64:	2200      	movs	r2, #0
   20b66:	635a      	str	r2, [r3, #52]	; 0x34
};
   20b68:	46c0      	nop			; (mov r8, r8)
   20b6a:	46bd      	mov	sp, r7
   20b6c:	b002      	add	sp, #8
   20b6e:	bd80      	pop	{r7, pc}
   20b70:	00034f63 	.word	0x00034f63
   20b74:	000186a0 	.word	0x000186a0

00020b78 <spi_slave_inst_get_config_defaults>:
{
   20b78:	b580      	push	{r7, lr}
   20b7a:	b082      	sub	sp, #8
   20b7c:	af00      	add	r7, sp, #0
   20b7e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   20b80:	687b      	ldr	r3, [r7, #4]
   20b82:	220a      	movs	r2, #10
   20b84:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   20b86:	687b      	ldr	r3, [r7, #4]
   20b88:	2200      	movs	r2, #0
   20b8a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   20b8c:	687b      	ldr	r3, [r7, #4]
   20b8e:	2200      	movs	r2, #0
   20b90:	709a      	strb	r2, [r3, #2]
}
   20b92:	46c0      	nop			; (mov r8, r8)
   20b94:	46bd      	mov	sp, r7
   20b96:	b002      	add	sp, #8
   20b98:	bd80      	pop	{r7, pc}
	...

00020b9c <spi_attach_slave>:
{
   20b9c:	b580      	push	{r7, lr}
   20b9e:	b084      	sub	sp, #16
   20ba0:	af00      	add	r7, sp, #0
   20ba2:	6078      	str	r0, [r7, #4]
   20ba4:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   20ba6:	683b      	ldr	r3, [r7, #0]
   20ba8:	781a      	ldrb	r2, [r3, #0]
   20baa:	687b      	ldr	r3, [r7, #4]
   20bac:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   20bae:	683b      	ldr	r3, [r7, #0]
   20bb0:	785a      	ldrb	r2, [r3, #1]
   20bb2:	687b      	ldr	r3, [r7, #4]
   20bb4:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   20bb6:	683b      	ldr	r3, [r7, #0]
   20bb8:	789a      	ldrb	r2, [r3, #2]
   20bba:	687b      	ldr	r3, [r7, #4]
   20bbc:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   20bbe:	230c      	movs	r3, #12
   20bc0:	18fb      	adds	r3, r7, r3
   20bc2:	0018      	movs	r0, r3
   20bc4:	4b0b      	ldr	r3, [pc, #44]	; (20bf4 <spi_attach_slave+0x58>)
   20bc6:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   20bc8:	230c      	movs	r3, #12
   20bca:	18fb      	adds	r3, r7, r3
   20bcc:	2201      	movs	r2, #1
   20bce:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   20bd0:	687b      	ldr	r3, [r7, #4]
   20bd2:	781b      	ldrb	r3, [r3, #0]
   20bd4:	220c      	movs	r2, #12
   20bd6:	18ba      	adds	r2, r7, r2
   20bd8:	0011      	movs	r1, r2
   20bda:	0018      	movs	r0, r3
   20bdc:	4b06      	ldr	r3, [pc, #24]	; (20bf8 <spi_attach_slave+0x5c>)
   20bde:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   20be0:	687b      	ldr	r3, [r7, #4]
   20be2:	781b      	ldrb	r3, [r3, #0]
   20be4:	2101      	movs	r1, #1
   20be6:	0018      	movs	r0, r3
   20be8:	4b04      	ldr	r3, [pc, #16]	; (20bfc <spi_attach_slave+0x60>)
   20bea:	4798      	blx	r3
}
   20bec:	46c0      	nop			; (mov r8, r8)
   20bee:	46bd      	mov	sp, r7
   20bf0:	b004      	add	sp, #16
   20bf2:	bd80      	pop	{r7, pc}
   20bf4:	00020a5d 	.word	0x00020a5d
   20bf8:	00026f5d 	.word	0x00026f5d
   20bfc:	00020a81 	.word	0x00020a81

00020c00 <spi_enable>:
{
   20c00:	b580      	push	{r7, lr}
   20c02:	b084      	sub	sp, #16
   20c04:	af00      	add	r7, sp, #0
   20c06:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   20c08:	687b      	ldr	r3, [r7, #4]
   20c0a:	681b      	ldr	r3, [r3, #0]
   20c0c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   20c0e:	687b      	ldr	r3, [r7, #4]
   20c10:	681b      	ldr	r3, [r3, #0]
   20c12:	0018      	movs	r0, r3
   20c14:	4b0b      	ldr	r3, [pc, #44]	; (20c44 <spi_enable+0x44>)
   20c16:	4798      	blx	r3
   20c18:	0003      	movs	r3, r0
   20c1a:	0018      	movs	r0, r3
   20c1c:	4b0a      	ldr	r3, [pc, #40]	; (20c48 <spi_enable+0x48>)
   20c1e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   20c20:	46c0      	nop			; (mov r8, r8)
   20c22:	687b      	ldr	r3, [r7, #4]
   20c24:	0018      	movs	r0, r3
   20c26:	4b09      	ldr	r3, [pc, #36]	; (20c4c <spi_enable+0x4c>)
   20c28:	4798      	blx	r3
   20c2a:	1e03      	subs	r3, r0, #0
   20c2c:	d1f9      	bne.n	20c22 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   20c2e:	68fb      	ldr	r3, [r7, #12]
   20c30:	681b      	ldr	r3, [r3, #0]
   20c32:	2202      	movs	r2, #2
   20c34:	431a      	orrs	r2, r3
   20c36:	68fb      	ldr	r3, [r7, #12]
   20c38:	601a      	str	r2, [r3, #0]
}
   20c3a:	46c0      	nop			; (mov r8, r8)
   20c3c:	46bd      	mov	sp, r7
   20c3e:	b004      	add	sp, #16
   20c40:	bd80      	pop	{r7, pc}
   20c42:	46c0      	nop			; (mov r8, r8)
   20c44:	00027c2d 	.word	0x00027c2d
   20c48:	000209dd 	.word	0x000209dd
   20c4c:	00020ad5 	.word	0x00020ad5

00020c50 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   20c50:	b580      	push	{r7, lr}
   20c52:	b084      	sub	sp, #16
   20c54:	af00      	add	r7, sp, #0
   20c56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20c58:	687b      	ldr	r3, [r7, #4]
   20c5a:	681b      	ldr	r3, [r3, #0]
   20c5c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   20c5e:	687b      	ldr	r3, [r7, #4]
   20c60:	681b      	ldr	r3, [r3, #0]
   20c62:	0018      	movs	r0, r3
   20c64:	4b0e      	ldr	r3, [pc, #56]	; (20ca0 <spi_disable+0x50>)
   20c66:	4798      	blx	r3
   20c68:	0003      	movs	r3, r0
   20c6a:	0018      	movs	r0, r3
   20c6c:	4b0d      	ldr	r3, [pc, #52]	; (20ca4 <spi_disable+0x54>)
   20c6e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   20c70:	46c0      	nop			; (mov r8, r8)
   20c72:	687b      	ldr	r3, [r7, #4]
   20c74:	0018      	movs	r0, r3
   20c76:	4b0c      	ldr	r3, [pc, #48]	; (20ca8 <spi_disable+0x58>)
   20c78:	4798      	blx	r3
   20c7a:	1e03      	subs	r3, r0, #0
   20c7c:	d1f9      	bne.n	20c72 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   20c7e:	68fb      	ldr	r3, [r7, #12]
   20c80:	228f      	movs	r2, #143	; 0x8f
   20c82:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   20c84:	68fb      	ldr	r3, [r7, #12]
   20c86:	228f      	movs	r2, #143	; 0x8f
   20c88:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   20c8a:	68fb      	ldr	r3, [r7, #12]
   20c8c:	681b      	ldr	r3, [r3, #0]
   20c8e:	2202      	movs	r2, #2
   20c90:	4393      	bics	r3, r2
   20c92:	001a      	movs	r2, r3
   20c94:	68fb      	ldr	r3, [r7, #12]
   20c96:	601a      	str	r2, [r3, #0]
}
   20c98:	46c0      	nop			; (mov r8, r8)
   20c9a:	46bd      	mov	sp, r7
   20c9c:	b004      	add	sp, #16
   20c9e:	bd80      	pop	{r7, pc}
   20ca0:	00027c2d 	.word	0x00027c2d
   20ca4:	00020a09 	.word	0x00020a09
   20ca8:	00020ad5 	.word	0x00020ad5

00020cac <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   20cac:	b580      	push	{r7, lr}
   20cae:	b084      	sub	sp, #16
   20cb0:	af00      	add	r7, sp, #0
   20cb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20cb4:	687b      	ldr	r3, [r7, #4]
   20cb6:	681b      	ldr	r3, [r3, #0]
   20cb8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   20cba:	68fb      	ldr	r3, [r7, #12]
   20cbc:	7e1b      	ldrb	r3, [r3, #24]
   20cbe:	b2db      	uxtb	r3, r3
   20cc0:	001a      	movs	r2, r3
   20cc2:	2302      	movs	r3, #2
   20cc4:	4013      	ands	r3, r2
   20cc6:	1e5a      	subs	r2, r3, #1
   20cc8:	4193      	sbcs	r3, r2
   20cca:	b2db      	uxtb	r3, r3
}
   20ccc:	0018      	movs	r0, r3
   20cce:	46bd      	mov	sp, r7
   20cd0:	b004      	add	sp, #16
   20cd2:	bd80      	pop	{r7, pc}

00020cd4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   20cd4:	b580      	push	{r7, lr}
   20cd6:	b084      	sub	sp, #16
   20cd8:	af00      	add	r7, sp, #0
   20cda:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20cdc:	687b      	ldr	r3, [r7, #4]
   20cde:	681b      	ldr	r3, [r3, #0]
   20ce0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   20ce2:	68fb      	ldr	r3, [r7, #12]
   20ce4:	7e1b      	ldrb	r3, [r3, #24]
   20ce6:	b2db      	uxtb	r3, r3
   20ce8:	001a      	movs	r2, r3
   20cea:	2301      	movs	r3, #1
   20cec:	4013      	ands	r3, r2
   20cee:	1e5a      	subs	r2, r3, #1
   20cf0:	4193      	sbcs	r3, r2
   20cf2:	b2db      	uxtb	r3, r3
}
   20cf4:	0018      	movs	r0, r3
   20cf6:	46bd      	mov	sp, r7
   20cf8:	b004      	add	sp, #16
   20cfa:	bd80      	pop	{r7, pc}

00020cfc <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   20cfc:	b580      	push	{r7, lr}
   20cfe:	b084      	sub	sp, #16
   20d00:	af00      	add	r7, sp, #0
   20d02:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20d04:	687b      	ldr	r3, [r7, #4]
   20d06:	681b      	ldr	r3, [r3, #0]
   20d08:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   20d0a:	68fb      	ldr	r3, [r7, #12]
   20d0c:	7e1b      	ldrb	r3, [r3, #24]
   20d0e:	b2db      	uxtb	r3, r3
   20d10:	001a      	movs	r2, r3
   20d12:	2304      	movs	r3, #4
   20d14:	4013      	ands	r3, r2
   20d16:	1e5a      	subs	r2, r3, #1
   20d18:	4193      	sbcs	r3, r2
   20d1a:	b2db      	uxtb	r3, r3
}
   20d1c:	0018      	movs	r0, r3
   20d1e:	46bd      	mov	sp, r7
   20d20:	b004      	add	sp, #16
   20d22:	bd80      	pop	{r7, pc}

00020d24 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   20d24:	b580      	push	{r7, lr}
   20d26:	b084      	sub	sp, #16
   20d28:	af00      	add	r7, sp, #0
   20d2a:	6078      	str	r0, [r7, #4]
   20d2c:	000a      	movs	r2, r1
   20d2e:	1cbb      	adds	r3, r7, #2
   20d30:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20d32:	687b      	ldr	r3, [r7, #4]
   20d34:	681b      	ldr	r3, [r3, #0]
   20d36:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   20d38:	687b      	ldr	r3, [r7, #4]
   20d3a:	0018      	movs	r0, r3
   20d3c:	4b0a      	ldr	r3, [pc, #40]	; (20d68 <spi_write+0x44>)
   20d3e:	4798      	blx	r3
   20d40:	0003      	movs	r3, r0
   20d42:	001a      	movs	r2, r3
   20d44:	2301      	movs	r3, #1
   20d46:	4053      	eors	r3, r2
   20d48:	b2db      	uxtb	r3, r3
   20d4a:	2b00      	cmp	r3, #0
   20d4c:	d001      	beq.n	20d52 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   20d4e:	2305      	movs	r3, #5
   20d50:	e006      	b.n	20d60 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   20d52:	1cbb      	adds	r3, r7, #2
   20d54:	881b      	ldrh	r3, [r3, #0]
   20d56:	05db      	lsls	r3, r3, #23
   20d58:	0dda      	lsrs	r2, r3, #23
   20d5a:	68fb      	ldr	r3, [r7, #12]
   20d5c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   20d5e:	2300      	movs	r3, #0
}
   20d60:	0018      	movs	r0, r3
   20d62:	46bd      	mov	sp, r7
   20d64:	b004      	add	sp, #16
   20d66:	bd80      	pop	{r7, pc}
   20d68:	00020cd5 	.word	0x00020cd5

00020d6c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   20d6c:	b580      	push	{r7, lr}
   20d6e:	b084      	sub	sp, #16
   20d70:	af00      	add	r7, sp, #0
   20d72:	6078      	str	r0, [r7, #4]
   20d74:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20d76:	687b      	ldr	r3, [r7, #4]
   20d78:	681b      	ldr	r3, [r3, #0]
   20d7a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   20d7c:	687b      	ldr	r3, [r7, #4]
   20d7e:	0018      	movs	r0, r3
   20d80:	4b1b      	ldr	r3, [pc, #108]	; (20df0 <spi_read+0x84>)
   20d82:	4798      	blx	r3
   20d84:	0003      	movs	r3, r0
   20d86:	001a      	movs	r2, r3
   20d88:	2301      	movs	r3, #1
   20d8a:	4053      	eors	r3, r2
   20d8c:	b2db      	uxtb	r3, r3
   20d8e:	2b00      	cmp	r3, #0
   20d90:	d001      	beq.n	20d96 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   20d92:	2310      	movs	r3, #16
   20d94:	e027      	b.n	20de6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   20d96:	230f      	movs	r3, #15
   20d98:	18fb      	adds	r3, r7, r3
   20d9a:	2200      	movs	r2, #0
   20d9c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   20d9e:	68bb      	ldr	r3, [r7, #8]
   20da0:	8b5b      	ldrh	r3, [r3, #26]
   20da2:	b29b      	uxth	r3, r3
   20da4:	001a      	movs	r2, r3
   20da6:	2304      	movs	r3, #4
   20da8:	4013      	ands	r3, r2
   20daa:	d006      	beq.n	20dba <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   20dac:	230f      	movs	r3, #15
   20dae:	18fb      	adds	r3, r7, r3
   20db0:	221e      	movs	r2, #30
   20db2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   20db4:	68bb      	ldr	r3, [r7, #8]
   20db6:	2204      	movs	r2, #4
   20db8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   20dba:	687b      	ldr	r3, [r7, #4]
   20dbc:	799b      	ldrb	r3, [r3, #6]
   20dbe:	2b01      	cmp	r3, #1
   20dc0:	d108      	bne.n	20dd4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   20dc2:	68bb      	ldr	r3, [r7, #8]
   20dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20dc6:	b29b      	uxth	r3, r3
   20dc8:	05db      	lsls	r3, r3, #23
   20dca:	0ddb      	lsrs	r3, r3, #23
   20dcc:	b29a      	uxth	r2, r3
   20dce:	683b      	ldr	r3, [r7, #0]
   20dd0:	801a      	strh	r2, [r3, #0]
   20dd2:	e005      	b.n	20de0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   20dd4:	68bb      	ldr	r3, [r7, #8]
   20dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20dd8:	b2db      	uxtb	r3, r3
   20dda:	b29a      	uxth	r2, r3
   20ddc:	683b      	ldr	r3, [r7, #0]
   20dde:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   20de0:	230f      	movs	r3, #15
   20de2:	18fb      	adds	r3, r7, r3
   20de4:	781b      	ldrb	r3, [r3, #0]
}
   20de6:	0018      	movs	r0, r3
   20de8:	46bd      	mov	sp, r7
   20dea:	b004      	add	sp, #16
   20dec:	bd80      	pop	{r7, pc}
   20dee:	46c0      	nop			; (mov r8, r8)
   20df0:	00020cfd 	.word	0x00020cfd

00020df4 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   20df4:	b580      	push	{r7, lr}
   20df6:	b086      	sub	sp, #24
   20df8:	af00      	add	r7, sp, #0
   20dfa:	60f8      	str	r0, [r7, #12]
   20dfc:	60b9      	str	r1, [r7, #8]
   20dfe:	1dbb      	adds	r3, r7, #6
   20e00:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   20e02:	2313      	movs	r3, #19
   20e04:	18fb      	adds	r3, r7, r3
   20e06:	22ff      	movs	r2, #255	; 0xff
   20e08:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   20e0a:	2317      	movs	r3, #23
   20e0c:	18fb      	adds	r3, r7, r3
   20e0e:	2200      	movs	r2, #0
   20e10:	701a      	strb	r2, [r3, #0]
   20e12:	2316      	movs	r3, #22
   20e14:	18fb      	adds	r3, r7, r3
   20e16:	2200      	movs	r2, #0
   20e18:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   20e1a:	2314      	movs	r3, #20
   20e1c:	18fb      	adds	r3, r7, r3
   20e1e:	2200      	movs	r2, #0
   20e20:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   20e22:	2310      	movs	r3, #16
   20e24:	18fb      	adds	r3, r7, r3
   20e26:	2200      	movs	r2, #0
   20e28:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   20e2a:	68bb      	ldr	r3, [r7, #8]
   20e2c:	2b00      	cmp	r3, #0
   20e2e:	d102      	bne.n	20e36 <spi_rw+0x42>
   20e30:	68fb      	ldr	r3, [r7, #12]
   20e32:	2b00      	cmp	r3, #0
   20e34:	d003      	beq.n	20e3e <spi_rw+0x4a>
   20e36:	1dbb      	adds	r3, r7, #6
   20e38:	881b      	ldrh	r3, [r3, #0]
   20e3a:	2b00      	cmp	r3, #0
   20e3c:	d102      	bne.n	20e44 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   20e3e:	230f      	movs	r3, #15
   20e40:	425b      	negs	r3, r3
   20e42:	e07e      	b.n	20f42 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   20e44:	68fb      	ldr	r3, [r7, #12]
   20e46:	2b00      	cmp	r3, #0
   20e48:	d106      	bne.n	20e58 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   20e4a:	2313      	movs	r3, #19
   20e4c:	18fb      	adds	r3, r7, r3
   20e4e:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   20e50:	2317      	movs	r3, #23
   20e52:	18fb      	adds	r3, r7, r3
   20e54:	2201      	movs	r2, #1
   20e56:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   20e58:	68bb      	ldr	r3, [r7, #8]
   20e5a:	2b00      	cmp	r3, #0
   20e5c:	d106      	bne.n	20e6c <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   20e5e:	2313      	movs	r3, #19
   20e60:	18fb      	adds	r3, r7, r3
   20e62:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   20e64:	2316      	movs	r3, #22
   20e66:	18fb      	adds	r3, r7, r3
   20e68:	2201      	movs	r2, #1
   20e6a:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   20e6c:	4937      	ldr	r1, [pc, #220]	; (20f4c <spi_rw+0x158>)
   20e6e:	4b38      	ldr	r3, [pc, #224]	; (20f50 <spi_rw+0x15c>)
   20e70:	2201      	movs	r2, #1
   20e72:	0018      	movs	r0, r3
   20e74:	4b37      	ldr	r3, [pc, #220]	; (20f54 <spi_rw+0x160>)
   20e76:	4798      	blx	r3

	while (u16Sz) {
   20e78:	e04c      	b.n	20f14 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   20e7a:	68fb      	ldr	r3, [r7, #12]
   20e7c:	781a      	ldrb	r2, [r3, #0]
   20e7e:	2314      	movs	r3, #20
   20e80:	18fb      	adds	r3, r7, r3
   20e82:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   20e84:	46c0      	nop			; (mov r8, r8)
   20e86:	4b32      	ldr	r3, [pc, #200]	; (20f50 <spi_rw+0x15c>)
   20e88:	0018      	movs	r0, r3
   20e8a:	4b33      	ldr	r3, [pc, #204]	; (20f58 <spi_rw+0x164>)
   20e8c:	4798      	blx	r3
   20e8e:	0003      	movs	r3, r0
   20e90:	001a      	movs	r2, r3
   20e92:	2301      	movs	r3, #1
   20e94:	4053      	eors	r3, r2
   20e96:	b2db      	uxtb	r3, r3
   20e98:	2b00      	cmp	r3, #0
   20e9a:	d1f4      	bne.n	20e86 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   20e9c:	46c0      	nop			; (mov r8, r8)
   20e9e:	2314      	movs	r3, #20
   20ea0:	18fb      	adds	r3, r7, r3
   20ea2:	881a      	ldrh	r2, [r3, #0]
   20ea4:	4b2a      	ldr	r3, [pc, #168]	; (20f50 <spi_rw+0x15c>)
   20ea6:	0011      	movs	r1, r2
   20ea8:	0018      	movs	r0, r3
   20eaa:	4b2c      	ldr	r3, [pc, #176]	; (20f5c <spi_rw+0x168>)
   20eac:	4798      	blx	r3
   20eae:	1e03      	subs	r3, r0, #0
   20eb0:	d1f5      	bne.n	20e9e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   20eb2:	46c0      	nop			; (mov r8, r8)
   20eb4:	4b26      	ldr	r3, [pc, #152]	; (20f50 <spi_rw+0x15c>)
   20eb6:	0018      	movs	r0, r3
   20eb8:	4b29      	ldr	r3, [pc, #164]	; (20f60 <spi_rw+0x16c>)
   20eba:	4798      	blx	r3
   20ebc:	0003      	movs	r3, r0
   20ebe:	001a      	movs	r2, r3
   20ec0:	2301      	movs	r3, #1
   20ec2:	4053      	eors	r3, r2
   20ec4:	b2db      	uxtb	r3, r3
   20ec6:	2b00      	cmp	r3, #0
   20ec8:	d1f4      	bne.n	20eb4 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   20eca:	46c0      	nop			; (mov r8, r8)
   20ecc:	2310      	movs	r3, #16
   20ece:	18fa      	adds	r2, r7, r3
   20ed0:	4b1f      	ldr	r3, [pc, #124]	; (20f50 <spi_rw+0x15c>)
   20ed2:	0011      	movs	r1, r2
   20ed4:	0018      	movs	r0, r3
   20ed6:	4b23      	ldr	r3, [pc, #140]	; (20f64 <spi_rw+0x170>)
   20ed8:	4798      	blx	r3
   20eda:	1e03      	subs	r3, r0, #0
   20edc:	d1f6      	bne.n	20ecc <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   20ede:	2310      	movs	r3, #16
   20ee0:	18fb      	adds	r3, r7, r3
   20ee2:	881b      	ldrh	r3, [r3, #0]
   20ee4:	b2da      	uxtb	r2, r3
   20ee6:	68bb      	ldr	r3, [r7, #8]
   20ee8:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   20eea:	1dbb      	adds	r3, r7, #6
   20eec:	881a      	ldrh	r2, [r3, #0]
   20eee:	1dbb      	adds	r3, r7, #6
   20ef0:	3a01      	subs	r2, #1
   20ef2:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   20ef4:	2316      	movs	r3, #22
   20ef6:	18fb      	adds	r3, r7, r3
   20ef8:	781b      	ldrb	r3, [r3, #0]
   20efa:	2b00      	cmp	r3, #0
   20efc:	d102      	bne.n	20f04 <spi_rw+0x110>
			pu8Miso++;
   20efe:	68bb      	ldr	r3, [r7, #8]
   20f00:	3301      	adds	r3, #1
   20f02:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   20f04:	2317      	movs	r3, #23
   20f06:	18fb      	adds	r3, r7, r3
   20f08:	781b      	ldrb	r3, [r3, #0]
   20f0a:	2b00      	cmp	r3, #0
   20f0c:	d102      	bne.n	20f14 <spi_rw+0x120>
			pu8Mosi++;
   20f0e:	68fb      	ldr	r3, [r7, #12]
   20f10:	3301      	adds	r3, #1
   20f12:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   20f14:	1dbb      	adds	r3, r7, #6
   20f16:	881b      	ldrh	r3, [r3, #0]
   20f18:	2b00      	cmp	r3, #0
   20f1a:	d1ae      	bne.n	20e7a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   20f1c:	46c0      	nop			; (mov r8, r8)
   20f1e:	4b0c      	ldr	r3, [pc, #48]	; (20f50 <spi_rw+0x15c>)
   20f20:	0018      	movs	r0, r3
   20f22:	4b11      	ldr	r3, [pc, #68]	; (20f68 <spi_rw+0x174>)
   20f24:	4798      	blx	r3
   20f26:	0003      	movs	r3, r0
   20f28:	001a      	movs	r2, r3
   20f2a:	2301      	movs	r3, #1
   20f2c:	4053      	eors	r3, r2
   20f2e:	b2db      	uxtb	r3, r3
   20f30:	2b00      	cmp	r3, #0
   20f32:	d1f4      	bne.n	20f1e <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   20f34:	4905      	ldr	r1, [pc, #20]	; (20f4c <spi_rw+0x158>)
   20f36:	4b06      	ldr	r3, [pc, #24]	; (20f50 <spi_rw+0x15c>)
   20f38:	2200      	movs	r2, #0
   20f3a:	0018      	movs	r0, r3
   20f3c:	4b05      	ldr	r3, [pc, #20]	; (20f54 <spi_rw+0x160>)
   20f3e:	4798      	blx	r3

	return M2M_SUCCESS;
   20f40:	2300      	movs	r3, #0
}
   20f42:	0018      	movs	r0, r3
   20f44:	46bd      	mov	sp, r7
   20f46:	b006      	add	sp, #24
   20f48:	bd80      	pop	{r7, pc}
   20f4a:	46c0      	nop			; (mov r8, r8)
   20f4c:	20005a94 	.word	0x20005a94
   20f50:	20005a98 	.word	0x20005a98
   20f54:	000286a1 	.word	0x000286a1
   20f58:	00020cd5 	.word	0x00020cd5
   20f5c:	00020d25 	.word	0x00020d25
   20f60:	00020cfd 	.word	0x00020cfd
   20f64:	00020d6d 	.word	0x00020d6d
   20f68:	00020cad 	.word	0x00020cad

00020f6c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   20f6c:	b580      	push	{r7, lr}
   20f6e:	b092      	sub	sp, #72	; 0x48
   20f70:	af00      	add	r7, sp, #0
   20f72:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   20f74:	2347      	movs	r3, #71	; 0x47
   20f76:	18fb      	adds	r3, r7, r3
   20f78:	2200      	movs	r2, #0
   20f7a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   20f7c:	2308      	movs	r3, #8
   20f7e:	18fb      	adds	r3, r7, r3
   20f80:	0018      	movs	r0, r3
   20f82:	4b26      	ldr	r3, [pc, #152]	; (2101c <nm_bus_init+0xb0>)
   20f84:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   20f86:	2308      	movs	r3, #8
   20f88:	18fb      	adds	r3, r7, r3
   20f8a:	220e      	movs	r2, #14
   20f8c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   20f8e:	2308      	movs	r3, #8
   20f90:	18fa      	adds	r2, r7, r3
   20f92:	4b23      	ldr	r3, [pc, #140]	; (21020 <nm_bus_init+0xb4>)
   20f94:	0011      	movs	r1, r2
   20f96:	0018      	movs	r0, r3
   20f98:	4b22      	ldr	r3, [pc, #136]	; (21024 <nm_bus_init+0xb8>)
   20f9a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   20f9c:	230c      	movs	r3, #12
   20f9e:	18fb      	adds	r3, r7, r3
   20fa0:	0018      	movs	r0, r3
   20fa2:	4b21      	ldr	r3, [pc, #132]	; (21028 <nm_bus_init+0xbc>)
   20fa4:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   20fa6:	230c      	movs	r3, #12
   20fa8:	18fb      	adds	r3, r7, r3
   20faa:	22c0      	movs	r2, #192	; 0xc0
   20fac:	0392      	lsls	r2, r2, #14
   20fae:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   20fb0:	230c      	movs	r3, #12
   20fb2:	18fb      	adds	r3, r7, r3
   20fb4:	4a1d      	ldr	r2, [pc, #116]	; (2102c <nm_bus_init+0xc0>)
   20fb6:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   20fb8:	230c      	movs	r3, #12
   20fba:	18fb      	adds	r3, r7, r3
   20fbc:	4a1c      	ldr	r2, [pc, #112]	; (21030 <nm_bus_init+0xc4>)
   20fbe:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   20fc0:	230c      	movs	r3, #12
   20fc2:	18fb      	adds	r3, r7, r3
   20fc4:	2201      	movs	r2, #1
   20fc6:	4252      	negs	r2, r2
   20fc8:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   20fca:	230c      	movs	r3, #12
   20fcc:	18fb      	adds	r3, r7, r3
   20fce:	4a19      	ldr	r2, [pc, #100]	; (21034 <nm_bus_init+0xc8>)
   20fd0:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   20fd2:	230c      	movs	r3, #12
   20fd4:	18fb      	adds	r3, r7, r3
   20fd6:	2200      	movs	r2, #0
   20fd8:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   20fda:	230c      	movs	r3, #12
   20fdc:	18fb      	adds	r3, r7, r3
   20fde:	4a16      	ldr	r2, [pc, #88]	; (21038 <nm_bus_init+0xcc>)
   20fe0:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   20fe2:	230c      	movs	r3, #12
   20fe4:	18fa      	adds	r2, r7, r3
   20fe6:	4915      	ldr	r1, [pc, #84]	; (2103c <nm_bus_init+0xd0>)
   20fe8:	4b15      	ldr	r3, [pc, #84]	; (21040 <nm_bus_init+0xd4>)
   20fea:	0018      	movs	r0, r3
   20fec:	4b15      	ldr	r3, [pc, #84]	; (21044 <nm_bus_init+0xd8>)
   20fee:	4798      	blx	r3
   20ff0:	1e03      	subs	r3, r0, #0
   20ff2:	d002      	beq.n	20ffa <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   20ff4:	2306      	movs	r3, #6
   20ff6:	425b      	negs	r3, r3
   20ff8:	e00c      	b.n	21014 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   20ffa:	4b11      	ldr	r3, [pc, #68]	; (21040 <nm_bus_init+0xd4>)
   20ffc:	0018      	movs	r0, r3
   20ffe:	4b12      	ldr	r3, [pc, #72]	; (21048 <nm_bus_init+0xdc>)
   21000:	4798      	blx	r3

	nm_bsp_reset();
   21002:	4b12      	ldr	r3, [pc, #72]	; (2104c <nm_bus_init+0xe0>)
   21004:	4798      	blx	r3
	nm_bsp_sleep(1);
   21006:	2001      	movs	r0, #1
   21008:	4b11      	ldr	r3, [pc, #68]	; (21050 <nm_bus_init+0xe4>)
   2100a:	4798      	blx	r3
#endif
	return result;
   2100c:	2347      	movs	r3, #71	; 0x47
   2100e:	18fb      	adds	r3, r7, r3
   21010:	781b      	ldrb	r3, [r3, #0]
   21012:	b25b      	sxtb	r3, r3
}
   21014:	0018      	movs	r0, r3
   21016:	46bd      	mov	sp, r7
   21018:	b012      	add	sp, #72	; 0x48
   2101a:	bd80      	pop	{r7, pc}
   2101c:	00020b79 	.word	0x00020b79
   21020:	20005a94 	.word	0x20005a94
   21024:	00020b9d 	.word	0x00020b9d
   21028:	00020af5 	.word	0x00020af5
   2102c:	000c0002 	.word	0x000c0002
   21030:	000d0002 	.word	0x000d0002
   21034:	000f0002 	.word	0x000f0002
   21038:	00124f80 	.word	0x00124f80
   2103c:	42001000 	.word	0x42001000
   21040:	20005a98 	.word	0x20005a98
   21044:	000283dd 	.word	0x000283dd
   21048:	00020c01 	.word	0x00020c01
   2104c:	00020871 	.word	0x00020871
   21050:	000208b1 	.word	0x000208b1

00021054 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   21054:	b590      	push	{r4, r7, lr}
   21056:	b085      	sub	sp, #20
   21058:	af00      	add	r7, sp, #0
   2105a:	0002      	movs	r2, r0
   2105c:	6039      	str	r1, [r7, #0]
   2105e:	1dfb      	adds	r3, r7, #7
   21060:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   21062:	230f      	movs	r3, #15
   21064:	18fb      	adds	r3, r7, r3
   21066:	2200      	movs	r2, #0
   21068:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   2106a:	1dfb      	adds	r3, r7, #7
   2106c:	781b      	ldrb	r3, [r3, #0]
   2106e:	2b03      	cmp	r3, #3
   21070:	d10f      	bne.n	21092 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   21072:	683b      	ldr	r3, [r7, #0]
   21074:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   21076:	68bb      	ldr	r3, [r7, #8]
   21078:	6818      	ldr	r0, [r3, #0]
   2107a:	68bb      	ldr	r3, [r7, #8]
   2107c:	6859      	ldr	r1, [r3, #4]
   2107e:	68bb      	ldr	r3, [r7, #8]
   21080:	891b      	ldrh	r3, [r3, #8]
   21082:	220f      	movs	r2, #15
   21084:	18bc      	adds	r4, r7, r2
   21086:	001a      	movs	r2, r3
   21088:	4b10      	ldr	r3, [pc, #64]	; (210cc <nm_bus_ioctl+0x78>)
   2108a:	4798      	blx	r3
   2108c:	0003      	movs	r3, r0
   2108e:	7023      	strb	r3, [r4, #0]
		}
		break;
   21090:	e013      	b.n	210ba <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   21092:	230f      	movs	r3, #15
   21094:	18fb      	adds	r3, r7, r3
   21096:	22ff      	movs	r2, #255	; 0xff
   21098:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   2109a:	2383      	movs	r3, #131	; 0x83
   2109c:	005a      	lsls	r2, r3, #1
   2109e:	490c      	ldr	r1, [pc, #48]	; (210d0 <nm_bus_ioctl+0x7c>)
   210a0:	4b0c      	ldr	r3, [pc, #48]	; (210d4 <nm_bus_ioctl+0x80>)
   210a2:	0018      	movs	r0, r3
   210a4:	4b0c      	ldr	r3, [pc, #48]	; (210d8 <nm_bus_ioctl+0x84>)
   210a6:	4798      	blx	r3
   210a8:	4b0c      	ldr	r3, [pc, #48]	; (210dc <nm_bus_ioctl+0x88>)
   210aa:	0018      	movs	r0, r3
   210ac:	4b0a      	ldr	r3, [pc, #40]	; (210d8 <nm_bus_ioctl+0x84>)
   210ae:	4798      	blx	r3
   210b0:	4b0b      	ldr	r3, [pc, #44]	; (210e0 <nm_bus_ioctl+0x8c>)
   210b2:	0018      	movs	r0, r3
   210b4:	4b08      	ldr	r3, [pc, #32]	; (210d8 <nm_bus_ioctl+0x84>)
   210b6:	4798      	blx	r3
			break;
   210b8:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   210ba:	230f      	movs	r3, #15
   210bc:	18fb      	adds	r3, r7, r3
   210be:	781b      	ldrb	r3, [r3, #0]
   210c0:	b25b      	sxtb	r3, r3
}
   210c2:	0018      	movs	r0, r3
   210c4:	46bd      	mov	sp, r7
   210c6:	b005      	add	sp, #20
   210c8:	bd90      	pop	{r4, r7, pc}
   210ca:	46c0      	nop			; (mov r8, r8)
   210cc:	00020df5 	.word	0x00020df5
   210d0:	00038bbc 	.word	0x00038bbc
   210d4:	00038b90 	.word	0x00038b90
   210d8:	0001e3f9 	.word	0x0001e3f9
   210dc:	00038ba4 	.word	0x00038ba4
   210e0:	00038bb8 	.word	0x00038bb8

000210e4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   210e4:	b580      	push	{r7, lr}
   210e6:	b082      	sub	sp, #8
   210e8:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   210ea:	1dfb      	adds	r3, r7, #7
   210ec:	2200      	movs	r2, #0
   210ee:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   210f0:	1d3b      	adds	r3, r7, #4
   210f2:	0018      	movs	r0, r3
   210f4:	4b13      	ldr	r3, [pc, #76]	; (21144 <nm_bus_deinit+0x60>)
   210f6:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   210f8:	1d3b      	adds	r3, r7, #4
   210fa:	2200      	movs	r2, #0
   210fc:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   210fe:	1d3b      	adds	r3, r7, #4
   21100:	2200      	movs	r2, #0
   21102:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   21104:	4b10      	ldr	r3, [pc, #64]	; (21148 <nm_bus_deinit+0x64>)
   21106:	0018      	movs	r0, r3
   21108:	4b10      	ldr	r3, [pc, #64]	; (2114c <nm_bus_deinit+0x68>)
   2110a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   2110c:	1d3b      	adds	r3, r7, #4
   2110e:	0019      	movs	r1, r3
   21110:	200c      	movs	r0, #12
   21112:	4b0f      	ldr	r3, [pc, #60]	; (21150 <nm_bus_deinit+0x6c>)
   21114:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   21116:	1d3b      	adds	r3, r7, #4
   21118:	0019      	movs	r1, r3
   2111a:	200f      	movs	r0, #15
   2111c:	4b0c      	ldr	r3, [pc, #48]	; (21150 <nm_bus_deinit+0x6c>)
   2111e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   21120:	1d3b      	adds	r3, r7, #4
   21122:	0019      	movs	r1, r3
   21124:	200d      	movs	r0, #13
   21126:	4b0a      	ldr	r3, [pc, #40]	; (21150 <nm_bus_deinit+0x6c>)
   21128:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   2112a:	1d3b      	adds	r3, r7, #4
   2112c:	0019      	movs	r1, r3
   2112e:	200e      	movs	r0, #14
   21130:	4b07      	ldr	r3, [pc, #28]	; (21150 <nm_bus_deinit+0x6c>)
   21132:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   21134:	1dfb      	adds	r3, r7, #7
   21136:	781b      	ldrb	r3, [r3, #0]
   21138:	b25b      	sxtb	r3, r3
}
   2113a:	0018      	movs	r0, r3
   2113c:	46bd      	mov	sp, r7
   2113e:	b002      	add	sp, #8
   21140:	bd80      	pop	{r7, pc}
   21142:	46c0      	nop			; (mov r8, r8)
   21144:	00020a5d 	.word	0x00020a5d
   21148:	20005a98 	.word	0x20005a98
   2114c:	00020c51 	.word	0x00020c51
   21150:	00026f5d 	.word	0x00026f5d

00021154 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   21154:	b580      	push	{r7, lr}
   21156:	b084      	sub	sp, #16
   21158:	af00      	add	r7, sp, #0
   2115a:	60f8      	str	r0, [r7, #12]
   2115c:	60b9      	str	r1, [r7, #8]
   2115e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   21160:	687b      	ldr	r3, [r7, #4]
   21162:	2b00      	cmp	r3, #0
   21164:	d010      	beq.n	21188 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   21166:	68bb      	ldr	r3, [r7, #8]
   21168:	781a      	ldrb	r2, [r3, #0]
   2116a:	68fb      	ldr	r3, [r7, #12]
   2116c:	701a      	strb	r2, [r3, #0]
		pDst++;
   2116e:	68fb      	ldr	r3, [r7, #12]
   21170:	3301      	adds	r3, #1
   21172:	60fb      	str	r3, [r7, #12]
		pSrc++;
   21174:	68bb      	ldr	r3, [r7, #8]
   21176:	3301      	adds	r3, #1
   21178:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   2117a:	687b      	ldr	r3, [r7, #4]
   2117c:	3b01      	subs	r3, #1
   2117e:	607b      	str	r3, [r7, #4]
   21180:	687b      	ldr	r3, [r7, #4]
   21182:	2b00      	cmp	r3, #0
   21184:	d1ef      	bne.n	21166 <m2m_memcpy+0x12>
   21186:	e000      	b.n	2118a <m2m_memcpy+0x36>
	if(sz == 0) return;
   21188:	46c0      	nop			; (mov r8, r8)
}
   2118a:	46bd      	mov	sp, r7
   2118c:	b004      	add	sp, #16
   2118e:	bd80      	pop	{r7, pc}

00021190 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   21190:	b580      	push	{r7, lr}
   21192:	b084      	sub	sp, #16
   21194:	af00      	add	r7, sp, #0
   21196:	60f8      	str	r0, [r7, #12]
   21198:	607a      	str	r2, [r7, #4]
   2119a:	230b      	movs	r3, #11
   2119c:	18fb      	adds	r3, r7, r3
   2119e:	1c0a      	adds	r2, r1, #0
   211a0:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   211a2:	687b      	ldr	r3, [r7, #4]
   211a4:	2b00      	cmp	r3, #0
   211a6:	d00e      	beq.n	211c6 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   211a8:	68fb      	ldr	r3, [r7, #12]
   211aa:	220b      	movs	r2, #11
   211ac:	18ba      	adds	r2, r7, r2
   211ae:	7812      	ldrb	r2, [r2, #0]
   211b0:	701a      	strb	r2, [r3, #0]
		pBuf++;
   211b2:	68fb      	ldr	r3, [r7, #12]
   211b4:	3301      	adds	r3, #1
   211b6:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   211b8:	687b      	ldr	r3, [r7, #4]
   211ba:	3b01      	subs	r3, #1
   211bc:	607b      	str	r3, [r7, #4]
   211be:	687b      	ldr	r3, [r7, #4]
   211c0:	2b00      	cmp	r3, #0
   211c2:	d1f1      	bne.n	211a8 <m2m_memset+0x18>
   211c4:	e000      	b.n	211c8 <m2m_memset+0x38>
	if(sz == 0) return;
   211c6:	46c0      	nop			; (mov r8, r8)
}
   211c8:	46bd      	mov	sp, r7
   211ca:	b004      	add	sp, #16
   211cc:	bd80      	pop	{r7, pc}

000211ce <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   211ce:	b580      	push	{r7, lr}
   211d0:	b084      	sub	sp, #16
   211d2:	af00      	add	r7, sp, #0
   211d4:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   211d6:	230e      	movs	r3, #14
   211d8:	18fb      	adds	r3, r7, r3
   211da:	2200      	movs	r2, #0
   211dc:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   211de:	e009      	b.n	211f4 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   211e0:	230e      	movs	r3, #14
   211e2:	18fb      	adds	r3, r7, r3
   211e4:	881a      	ldrh	r2, [r3, #0]
   211e6:	230e      	movs	r3, #14
   211e8:	18fb      	adds	r3, r7, r3
   211ea:	3201      	adds	r2, #1
   211ec:	801a      	strh	r2, [r3, #0]
		pcStr++;
   211ee:	687b      	ldr	r3, [r7, #4]
   211f0:	3301      	adds	r3, #1
   211f2:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   211f4:	687b      	ldr	r3, [r7, #4]
   211f6:	781b      	ldrb	r3, [r3, #0]
   211f8:	2b00      	cmp	r3, #0
   211fa:	d1f1      	bne.n	211e0 <m2m_strlen+0x12>
	}
	return u16StrLen;
   211fc:	230e      	movs	r3, #14
   211fe:	18fb      	adds	r3, r7, r3
   21200:	881b      	ldrh	r3, [r3, #0]
}
   21202:	0018      	movs	r0, r3
   21204:	46bd      	mov	sp, r7
   21206:	b004      	add	sp, #16
   21208:	bd80      	pop	{r7, pc}
	...

0002120c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   2120c:	b580      	push	{r7, lr}
   2120e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   21210:	4b04      	ldr	r3, [pc, #16]	; (21224 <isr+0x18>)
   21212:	78db      	ldrb	r3, [r3, #3]
   21214:	b2db      	uxtb	r3, r3
   21216:	3301      	adds	r3, #1
   21218:	b2da      	uxtb	r2, r3
   2121a:	4b02      	ldr	r3, [pc, #8]	; (21224 <isr+0x18>)
   2121c:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   2121e:	46c0      	nop			; (mov r8, r8)
   21220:	46bd      	mov	sp, r7
   21222:	bd80      	pop	{r7, pc}
   21224:	20005ad4 	.word	0x20005ad4

00021228 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   21228:	b590      	push	{r4, r7, lr}
   2122a:	b083      	sub	sp, #12
   2122c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2122e:	1dfb      	adds	r3, r7, #7
   21230:	2200      	movs	r2, #0
   21232:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   21234:	4b14      	ldr	r3, [pc, #80]	; (21288 <hif_set_rx_done+0x60>)
   21236:	2200      	movs	r2, #0
   21238:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   2123a:	2001      	movs	r0, #1
   2123c:	4b13      	ldr	r3, [pc, #76]	; (2128c <hif_set_rx_done+0x64>)
   2123e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   21240:	1dfc      	adds	r4, r7, #7
   21242:	003b      	movs	r3, r7
   21244:	4a12      	ldr	r2, [pc, #72]	; (21290 <hif_set_rx_done+0x68>)
   21246:	0019      	movs	r1, r3
   21248:	0010      	movs	r0, r2
   2124a:	4b12      	ldr	r3, [pc, #72]	; (21294 <hif_set_rx_done+0x6c>)
   2124c:	4798      	blx	r3
   2124e:	0003      	movs	r3, r0
   21250:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21252:	1dfb      	adds	r3, r7, #7
   21254:	781b      	ldrb	r3, [r3, #0]
   21256:	b25b      	sxtb	r3, r3
   21258:	2b00      	cmp	r3, #0
   2125a:	d10d      	bne.n	21278 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   2125c:	683b      	ldr	r3, [r7, #0]
   2125e:	2202      	movs	r2, #2
   21260:	4313      	orrs	r3, r2
   21262:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   21264:	683b      	ldr	r3, [r7, #0]
   21266:	1dfc      	adds	r4, r7, #7
   21268:	4a09      	ldr	r2, [pc, #36]	; (21290 <hif_set_rx_done+0x68>)
   2126a:	0019      	movs	r1, r3
   2126c:	0010      	movs	r0, r2
   2126e:	4b0a      	ldr	r3, [pc, #40]	; (21298 <hif_set_rx_done+0x70>)
   21270:	4798      	blx	r3
   21272:	0003      	movs	r3, r0
   21274:	7023      	strb	r3, [r4, #0]
   21276:	e000      	b.n	2127a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   21278:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   2127a:	1dfb      	adds	r3, r7, #7
   2127c:	781b      	ldrb	r3, [r3, #0]
   2127e:	b25b      	sxtb	r3, r3

}
   21280:	0018      	movs	r0, r3
   21282:	46bd      	mov	sp, r7
   21284:	b003      	add	sp, #12
   21286:	bd90      	pop	{r4, r7, pc}
   21288:	20005ad4 	.word	0x20005ad4
   2128c:	00020945 	.word	0x00020945
   21290:	00001070 	.word	0x00001070
   21294:	00023221 	.word	0x00023221
   21298:	00023245 	.word	0x00023245

0002129c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   2129c:	b580      	push	{r7, lr}
   2129e:	b082      	sub	sp, #8
   212a0:	af00      	add	r7, sp, #0
   212a2:	603a      	str	r2, [r7, #0]
   212a4:	1dfb      	adds	r3, r7, #7
   212a6:	1c02      	adds	r2, r0, #0
   212a8:	701a      	strb	r2, [r3, #0]
   212aa:	1d3b      	adds	r3, r7, #4
   212ac:	1c0a      	adds	r2, r1, #0
   212ae:	801a      	strh	r2, [r3, #0]


}
   212b0:	46c0      	nop			; (mov r8, r8)
   212b2:	46bd      	mov	sp, r7
   212b4:	b002      	add	sp, #8
   212b6:	bd80      	pop	{r7, pc}

000212b8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   212b8:	b590      	push	{r4, r7, lr}
   212ba:	b083      	sub	sp, #12
   212bc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   212be:	1dfb      	adds	r3, r7, #7
   212c0:	2200      	movs	r2, #0
   212c2:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   212c4:	4b16      	ldr	r3, [pc, #88]	; (21320 <hif_chip_wake+0x68>)
   212c6:	789b      	ldrb	r3, [r3, #2]
   212c8:	b2db      	uxtb	r3, r3
   212ca:	2b00      	cmp	r3, #0
   212cc:	d003      	beq.n	212d6 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   212ce:	1dfb      	adds	r3, r7, #7
   212d0:	781b      	ldrb	r3, [r3, #0]
   212d2:	b25b      	sxtb	r3, r3
   212d4:	e01f      	b.n	21316 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   212d6:	4b12      	ldr	r3, [pc, #72]	; (21320 <hif_chip_wake+0x68>)
   212d8:	785b      	ldrb	r3, [r3, #1]
   212da:	b2db      	uxtb	r3, r3
   212dc:	2b00      	cmp	r3, #0
   212de:	d10e      	bne.n	212fe <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   212e0:	4b0f      	ldr	r3, [pc, #60]	; (21320 <hif_chip_wake+0x68>)
   212e2:	781b      	ldrb	r3, [r3, #0]
   212e4:	b2db      	uxtb	r3, r3
   212e6:	2b00      	cmp	r3, #0
   212e8:	d009      	beq.n	212fe <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   212ea:	1dfc      	adds	r4, r7, #7
   212ec:	4b0d      	ldr	r3, [pc, #52]	; (21324 <hif_chip_wake+0x6c>)
   212ee:	4798      	blx	r3
   212f0:	0003      	movs	r3, r0
   212f2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   212f4:	1dfb      	adds	r3, r7, #7
   212f6:	781b      	ldrb	r3, [r3, #0]
   212f8:	b25b      	sxtb	r3, r3
   212fa:	2b00      	cmp	r3, #0
   212fc:	d107      	bne.n	2130e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   212fe:	4b08      	ldr	r3, [pc, #32]	; (21320 <hif_chip_wake+0x68>)
   21300:	785b      	ldrb	r3, [r3, #1]
   21302:	b2db      	uxtb	r3, r3
   21304:	3301      	adds	r3, #1
   21306:	b2da      	uxtb	r2, r3
   21308:	4b05      	ldr	r3, [pc, #20]	; (21320 <hif_chip_wake+0x68>)
   2130a:	705a      	strb	r2, [r3, #1]
   2130c:	e000      	b.n	21310 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   2130e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   21310:	1dfb      	adds	r3, r7, #7
   21312:	781b      	ldrb	r3, [r3, #0]
   21314:	b25b      	sxtb	r3, r3
}
   21316:	0018      	movs	r0, r3
   21318:	46bd      	mov	sp, r7
   2131a:	b003      	add	sp, #12
   2131c:	bd90      	pop	{r4, r7, pc}
   2131e:	46c0      	nop			; (mov r8, r8)
   21320:	20005ad4 	.word	0x20005ad4
   21324:	00022cf1 	.word	0x00022cf1

00021328 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   21328:	b580      	push	{r7, lr}
   2132a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   2132c:	4b07      	ldr	r3, [pc, #28]	; (2134c <hif_chip_sleep_sc+0x24>)
   2132e:	785b      	ldrb	r3, [r3, #1]
   21330:	b2db      	uxtb	r3, r3
   21332:	2b00      	cmp	r3, #0
   21334:	d006      	beq.n	21344 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   21336:	4b05      	ldr	r3, [pc, #20]	; (2134c <hif_chip_sleep_sc+0x24>)
   21338:	785b      	ldrb	r3, [r3, #1]
   2133a:	b2db      	uxtb	r3, r3
   2133c:	3b01      	subs	r3, #1
   2133e:	b2da      	uxtb	r2, r3
   21340:	4b02      	ldr	r3, [pc, #8]	; (2134c <hif_chip_sleep_sc+0x24>)
   21342:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   21344:	2300      	movs	r3, #0
}
   21346:	0018      	movs	r0, r3
   21348:	46bd      	mov	sp, r7
   2134a:	bd80      	pop	{r7, pc}
   2134c:	20005ad4 	.word	0x20005ad4

00021350 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   21350:	b590      	push	{r4, r7, lr}
   21352:	b083      	sub	sp, #12
   21354:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21356:	1dfb      	adds	r3, r7, #7
   21358:	2200      	movs	r2, #0
   2135a:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   2135c:	4b10      	ldr	r3, [pc, #64]	; (213a0 <hif_chip_sleep+0x50>)
   2135e:	785b      	ldrb	r3, [r3, #1]
   21360:	b2db      	uxtb	r3, r3
   21362:	2b00      	cmp	r3, #0
   21364:	d006      	beq.n	21374 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   21366:	4b0e      	ldr	r3, [pc, #56]	; (213a0 <hif_chip_sleep+0x50>)
   21368:	785b      	ldrb	r3, [r3, #1]
   2136a:	b2db      	uxtb	r3, r3
   2136c:	3b01      	subs	r3, #1
   2136e:	b2da      	uxtb	r2, r3
   21370:	4b0b      	ldr	r3, [pc, #44]	; (213a0 <hif_chip_sleep+0x50>)
   21372:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   21374:	4b0a      	ldr	r3, [pc, #40]	; (213a0 <hif_chip_sleep+0x50>)
   21376:	785b      	ldrb	r3, [r3, #1]
   21378:	b2db      	uxtb	r3, r3
   2137a:	2b00      	cmp	r3, #0
   2137c:	d109      	bne.n	21392 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   2137e:	4b08      	ldr	r3, [pc, #32]	; (213a0 <hif_chip_sleep+0x50>)
   21380:	781b      	ldrb	r3, [r3, #0]
   21382:	b2db      	uxtb	r3, r3
   21384:	2b00      	cmp	r3, #0
   21386:	d004      	beq.n	21392 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   21388:	1dfc      	adds	r4, r7, #7
   2138a:	4b06      	ldr	r3, [pc, #24]	; (213a4 <hif_chip_sleep+0x54>)
   2138c:	4798      	blx	r3
   2138e:	0003      	movs	r3, r0
   21390:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   21392:	1dfb      	adds	r3, r7, #7
   21394:	781b      	ldrb	r3, [r3, #0]
   21396:	b25b      	sxtb	r3, r3
}
   21398:	0018      	movs	r0, r3
   2139a:	46bd      	mov	sp, r7
   2139c:	b003      	add	sp, #12
   2139e:	bd90      	pop	{r4, r7, pc}
   213a0:	20005ad4 	.word	0x20005ad4
   213a4:	00022c19 	.word	0x00022c19

000213a8 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   213a8:	b580      	push	{r7, lr}
   213aa:	b082      	sub	sp, #8
   213ac:	af00      	add	r7, sp, #0
   213ae:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   213b0:	4b09      	ldr	r3, [pc, #36]	; (213d8 <hif_init+0x30>)
   213b2:	222c      	movs	r2, #44	; 0x2c
   213b4:	2100      	movs	r1, #0
   213b6:	0018      	movs	r0, r3
   213b8:	4b08      	ldr	r3, [pc, #32]	; (213dc <hif_init+0x34>)
   213ba:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   213bc:	4b08      	ldr	r3, [pc, #32]	; (213e0 <hif_init+0x38>)
   213be:	0018      	movs	r0, r3
   213c0:	4b08      	ldr	r3, [pc, #32]	; (213e4 <hif_init+0x3c>)
   213c2:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   213c4:	4b08      	ldr	r3, [pc, #32]	; (213e8 <hif_init+0x40>)
   213c6:	0019      	movs	r1, r3
   213c8:	2003      	movs	r0, #3
   213ca:	4b08      	ldr	r3, [pc, #32]	; (213ec <hif_init+0x44>)
   213cc:	4798      	blx	r3
	return M2M_SUCCESS;
   213ce:	2300      	movs	r3, #0
}
   213d0:	0018      	movs	r0, r3
   213d2:	46bd      	mov	sp, r7
   213d4:	b002      	add	sp, #8
   213d6:	bd80      	pop	{r7, pc}
   213d8:	20005ad4 	.word	0x20005ad4
   213dc:	00021191 	.word	0x00021191
   213e0:	0002120d 	.word	0x0002120d
   213e4:	000208cd 	.word	0x000208cd
   213e8:	0002129d 	.word	0x0002129d
   213ec:	00021e8d 	.word	0x00021e8d

000213f0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   213f0:	b590      	push	{r4, r7, lr}
   213f2:	b089      	sub	sp, #36	; 0x24
   213f4:	af00      	add	r7, sp, #0
   213f6:	0004      	movs	r4, r0
   213f8:	0008      	movs	r0, r1
   213fa:	603a      	str	r2, [r7, #0]
   213fc:	0019      	movs	r1, r3
   213fe:	1dfb      	adds	r3, r7, #7
   21400:	1c22      	adds	r2, r4, #0
   21402:	701a      	strb	r2, [r3, #0]
   21404:	1dbb      	adds	r3, r7, #6
   21406:	1c02      	adds	r2, r0, #0
   21408:	701a      	strb	r2, [r3, #0]
   2140a:	1d3b      	adds	r3, r7, #4
   2140c:	1c0a      	adds	r2, r1, #0
   2140e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   21410:	231f      	movs	r3, #31
   21412:	18fb      	adds	r3, r7, r3
   21414:	22ff      	movs	r2, #255	; 0xff
   21416:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   21418:	1dbb      	adds	r3, r7, #6
   2141a:	781b      	ldrb	r3, [r3, #0]
   2141c:	227f      	movs	r2, #127	; 0x7f
   2141e:	4013      	ands	r3, r2
   21420:	b2da      	uxtb	r2, r3
   21422:	2318      	movs	r3, #24
   21424:	18fb      	adds	r3, r7, r3
   21426:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   21428:	2318      	movs	r3, #24
   2142a:	18fb      	adds	r3, r7, r3
   2142c:	1dfa      	adds	r2, r7, #7
   2142e:	7812      	ldrb	r2, [r2, #0]
   21430:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   21432:	2318      	movs	r3, #24
   21434:	18fb      	adds	r3, r7, r3
   21436:	2208      	movs	r2, #8
   21438:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   2143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2143c:	2b00      	cmp	r3, #0
   2143e:	d011      	beq.n	21464 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   21440:	2318      	movs	r3, #24
   21442:	18fb      	adds	r3, r7, r3
   21444:	885b      	ldrh	r3, [r3, #2]
   21446:	b29a      	uxth	r2, r3
   21448:	2338      	movs	r3, #56	; 0x38
   2144a:	18f9      	adds	r1, r7, r3
   2144c:	2334      	movs	r3, #52	; 0x34
   2144e:	18fb      	adds	r3, r7, r3
   21450:	8809      	ldrh	r1, [r1, #0]
   21452:	881b      	ldrh	r3, [r3, #0]
   21454:	18cb      	adds	r3, r1, r3
   21456:	b29b      	uxth	r3, r3
   21458:	18d3      	adds	r3, r2, r3
   2145a:	b29a      	uxth	r2, r3
   2145c:	2318      	movs	r3, #24
   2145e:	18fb      	adds	r3, r7, r3
   21460:	805a      	strh	r2, [r3, #2]
   21462:	e00a      	b.n	2147a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   21464:	2318      	movs	r3, #24
   21466:	18fb      	adds	r3, r7, r3
   21468:	885b      	ldrh	r3, [r3, #2]
   2146a:	b29a      	uxth	r2, r3
   2146c:	1d3b      	adds	r3, r7, #4
   2146e:	881b      	ldrh	r3, [r3, #0]
   21470:	18d3      	adds	r3, r2, r3
   21472:	b29a      	uxth	r2, r3
   21474:	2318      	movs	r3, #24
   21476:	18fb      	adds	r3, r7, r3
   21478:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   2147a:	231f      	movs	r3, #31
   2147c:	18fc      	adds	r4, r7, r3
   2147e:	4bb2      	ldr	r3, [pc, #712]	; (21748 <hif_send+0x358>)
   21480:	4798      	blx	r3
   21482:	0003      	movs	r3, r0
   21484:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   21486:	231f      	movs	r3, #31
   21488:	18fb      	adds	r3, r7, r3
   2148a:	781b      	ldrb	r3, [r3, #0]
   2148c:	b25b      	sxtb	r3, r3
   2148e:	2b00      	cmp	r3, #0
   21490:	d000      	beq.n	21494 <hif_send+0xa4>
   21492:	e129      	b.n	216e8 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   21494:	2300      	movs	r3, #0
   21496:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   21498:	230e      	movs	r3, #14
   2149a:	18fb      	adds	r3, r7, r3
   2149c:	2200      	movs	r2, #0
   2149e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   214a0:	2300      	movs	r3, #0
   214a2:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   214a4:	1dfb      	adds	r3, r7, #7
   214a6:	781a      	ldrb	r2, [r3, #0]
   214a8:	697b      	ldr	r3, [r7, #20]
   214aa:	4313      	orrs	r3, r2
   214ac:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   214ae:	1dbb      	adds	r3, r7, #6
   214b0:	781b      	ldrb	r3, [r3, #0]
   214b2:	021a      	lsls	r2, r3, #8
   214b4:	697b      	ldr	r3, [r7, #20]
   214b6:	4313      	orrs	r3, r2
   214b8:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   214ba:	2318      	movs	r3, #24
   214bc:	18fb      	adds	r3, r7, r3
   214be:	885b      	ldrh	r3, [r3, #2]
   214c0:	b29b      	uxth	r3, r3
   214c2:	041a      	lsls	r2, r3, #16
   214c4:	697b      	ldr	r3, [r7, #20]
   214c6:	4313      	orrs	r3, r2
   214c8:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   214ca:	697b      	ldr	r3, [r7, #20]
   214cc:	221f      	movs	r2, #31
   214ce:	18bc      	adds	r4, r7, r2
   214d0:	4a9e      	ldr	r2, [pc, #632]	; (2174c <hif_send+0x35c>)
   214d2:	0019      	movs	r1, r3
   214d4:	0010      	movs	r0, r2
   214d6:	4b9e      	ldr	r3, [pc, #632]	; (21750 <hif_send+0x360>)
   214d8:	4798      	blx	r3
   214da:	0003      	movs	r3, r0
   214dc:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   214de:	231f      	movs	r3, #31
   214e0:	18fb      	adds	r3, r7, r3
   214e2:	781b      	ldrb	r3, [r3, #0]
   214e4:	b25b      	sxtb	r3, r3
   214e6:	2b00      	cmp	r3, #0
   214e8:	d000      	beq.n	214ec <hif_send+0xfc>
   214ea:	e119      	b.n	21720 <hif_send+0x330>

		reg = 0UL;
   214ec:	2300      	movs	r3, #0
   214ee:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   214f0:	697b      	ldr	r3, [r7, #20]
   214f2:	2202      	movs	r2, #2
   214f4:	4313      	orrs	r3, r2
   214f6:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   214f8:	697b      	ldr	r3, [r7, #20]
   214fa:	221f      	movs	r2, #31
   214fc:	18bc      	adds	r4, r7, r2
   214fe:	4a95      	ldr	r2, [pc, #596]	; (21754 <hif_send+0x364>)
   21500:	0019      	movs	r1, r3
   21502:	0010      	movs	r0, r2
   21504:	4b92      	ldr	r3, [pc, #584]	; (21750 <hif_send+0x360>)
   21506:	4798      	blx	r3
   21508:	0003      	movs	r3, r0
   2150a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2150c:	231f      	movs	r3, #31
   2150e:	18fb      	adds	r3, r7, r3
   21510:	781b      	ldrb	r3, [r3, #0]
   21512:	b25b      	sxtb	r3, r3
   21514:	2b00      	cmp	r3, #0
   21516:	d000      	beq.n	2151a <hif_send+0x12a>
   21518:	e104      	b.n	21724 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   2151a:	2300      	movs	r3, #0
   2151c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   2151e:	230e      	movs	r3, #14
   21520:	18fb      	adds	r3, r7, r3
   21522:	2200      	movs	r2, #0
   21524:	801a      	strh	r2, [r3, #0]
   21526:	e050      	b.n	215ca <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   21528:	231f      	movs	r3, #31
   2152a:	18fc      	adds	r4, r7, r3
   2152c:	2314      	movs	r3, #20
   2152e:	18fb      	adds	r3, r7, r3
   21530:	4a88      	ldr	r2, [pc, #544]	; (21754 <hif_send+0x364>)
   21532:	0019      	movs	r1, r3
   21534:	0010      	movs	r0, r2
   21536:	4b88      	ldr	r3, [pc, #544]	; (21758 <hif_send+0x368>)
   21538:	4798      	blx	r3
   2153a:	0003      	movs	r3, r0
   2153c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   2153e:	231f      	movs	r3, #31
   21540:	18fb      	adds	r3, r7, r3
   21542:	781b      	ldrb	r3, [r3, #0]
   21544:	b25b      	sxtb	r3, r3
   21546:	2b00      	cmp	r3, #0
   21548:	d147      	bne.n	215da <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   2154a:	230e      	movs	r3, #14
   2154c:	18fb      	adds	r3, r7, r3
   2154e:	881b      	ldrh	r3, [r3, #0]
   21550:	b29a      	uxth	r2, r3
   21552:	23f4      	movs	r3, #244	; 0xf4
   21554:	33ff      	adds	r3, #255	; 0xff
   21556:	429a      	cmp	r2, r3
   21558:	d916      	bls.n	21588 <hif_send+0x198>
				if(cnt < 501) {
   2155a:	230e      	movs	r3, #14
   2155c:	18fb      	adds	r3, r7, r3
   2155e:	881b      	ldrh	r3, [r3, #0]
   21560:	b29a      	uxth	r2, r3
   21562:	23fa      	movs	r3, #250	; 0xfa
   21564:	005b      	lsls	r3, r3, #1
   21566:	429a      	cmp	r2, r3
   21568:	d80b      	bhi.n	21582 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   2156a:	4b7c      	ldr	r3, [pc, #496]	; (2175c <hif_send+0x36c>)
   2156c:	0018      	movs	r0, r3
   2156e:	4b7c      	ldr	r3, [pc, #496]	; (21760 <hif_send+0x370>)
   21570:	4798      	blx	r3
   21572:	4b7c      	ldr	r3, [pc, #496]	; (21764 <hif_send+0x374>)
   21574:	0018      	movs	r0, r3
   21576:	4b7a      	ldr	r3, [pc, #488]	; (21760 <hif_send+0x370>)
   21578:	4798      	blx	r3
   2157a:	4b7b      	ldr	r3, [pc, #492]	; (21768 <hif_send+0x378>)
   2157c:	0018      	movs	r0, r3
   2157e:	4b78      	ldr	r3, [pc, #480]	; (21760 <hif_send+0x370>)
   21580:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   21582:	2001      	movs	r0, #1
   21584:	4b79      	ldr	r3, [pc, #484]	; (2176c <hif_send+0x37c>)
   21586:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   21588:	697b      	ldr	r3, [r7, #20]
   2158a:	2202      	movs	r2, #2
   2158c:	4013      	ands	r3, r2
   2158e:	d113      	bne.n	215b8 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   21590:	231f      	movs	r3, #31
   21592:	18fc      	adds	r4, r7, r3
   21594:	2310      	movs	r3, #16
   21596:	18fb      	adds	r3, r7, r3
   21598:	4a75      	ldr	r2, [pc, #468]	; (21770 <hif_send+0x380>)
   2159a:	0019      	movs	r1, r3
   2159c:	0010      	movs	r0, r2
   2159e:	4b6e      	ldr	r3, [pc, #440]	; (21758 <hif_send+0x368>)
   215a0:	4798      	blx	r3
   215a2:	0003      	movs	r3, r0
   215a4:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   215a6:	231f      	movs	r3, #31
   215a8:	18fb      	adds	r3, r7, r3
   215aa:	781b      	ldrb	r3, [r3, #0]
   215ac:	b25b      	sxtb	r3, r3
   215ae:	2b00      	cmp	r3, #0
   215b0:	d015      	beq.n	215de <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   215b2:	2300      	movs	r3, #0
   215b4:	613b      	str	r3, [r7, #16]
					goto ERR1;
   215b6:	e0bc      	b.n	21732 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   215b8:	230e      	movs	r3, #14
   215ba:	18fb      	adds	r3, r7, r3
   215bc:	881b      	ldrh	r3, [r3, #0]
   215be:	b29b      	uxth	r3, r3
   215c0:	3301      	adds	r3, #1
   215c2:	b29a      	uxth	r2, r3
   215c4:	230e      	movs	r3, #14
   215c6:	18fb      	adds	r3, r7, r3
   215c8:	801a      	strh	r2, [r3, #0]
   215ca:	230e      	movs	r3, #14
   215cc:	18fb      	adds	r3, r7, r3
   215ce:	881b      	ldrh	r3, [r3, #0]
   215d0:	b29b      	uxth	r3, r3
   215d2:	4a68      	ldr	r2, [pc, #416]	; (21774 <hif_send+0x384>)
   215d4:	4293      	cmp	r3, r2
   215d6:	d9a7      	bls.n	21528 <hif_send+0x138>
   215d8:	e002      	b.n	215e0 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   215da:	46c0      	nop			; (mov r8, r8)
   215dc:	e000      	b.n	215e0 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   215de:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   215e0:	693b      	ldr	r3, [r7, #16]
   215e2:	2b00      	cmp	r3, #0
   215e4:	d100      	bne.n	215e8 <hif_send+0x1f8>
   215e6:	e074      	b.n	216d2 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   215e8:	693b      	ldr	r3, [r7, #16]
   215ea:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   215ec:	2318      	movs	r3, #24
   215ee:	18fb      	adds	r3, r7, r3
   215f0:	885b      	ldrh	r3, [r3, #2]
   215f2:	b29a      	uxth	r2, r3
   215f4:	2318      	movs	r3, #24
   215f6:	18fb      	adds	r3, r7, r3
   215f8:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   215fa:	68bb      	ldr	r3, [r7, #8]
   215fc:	221f      	movs	r2, #31
   215fe:	18bc      	adds	r4, r7, r2
   21600:	2218      	movs	r2, #24
   21602:	18b9      	adds	r1, r7, r2
   21604:	2208      	movs	r2, #8
   21606:	0018      	movs	r0, r3
   21608:	4b5b      	ldr	r3, [pc, #364]	; (21778 <hif_send+0x388>)
   2160a:	4798      	blx	r3
   2160c:	0003      	movs	r3, r0
   2160e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21610:	231f      	movs	r3, #31
   21612:	18fb      	adds	r3, r7, r3
   21614:	781b      	ldrb	r3, [r3, #0]
   21616:	b25b      	sxtb	r3, r3
   21618:	2b00      	cmp	r3, #0
   2161a:	d000      	beq.n	2161e <hif_send+0x22e>
   2161c:	e084      	b.n	21728 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   2161e:	68bb      	ldr	r3, [r7, #8]
   21620:	3308      	adds	r3, #8
   21622:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   21624:	683b      	ldr	r3, [r7, #0]
   21626:	2b00      	cmp	r3, #0
   21628:	d016      	beq.n	21658 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   2162a:	68b8      	ldr	r0, [r7, #8]
   2162c:	1d3b      	adds	r3, r7, #4
   2162e:	881a      	ldrh	r2, [r3, #0]
   21630:	231f      	movs	r3, #31
   21632:	18fc      	adds	r4, r7, r3
   21634:	683b      	ldr	r3, [r7, #0]
   21636:	0019      	movs	r1, r3
   21638:	4b4f      	ldr	r3, [pc, #316]	; (21778 <hif_send+0x388>)
   2163a:	4798      	blx	r3
   2163c:	0003      	movs	r3, r0
   2163e:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21640:	231f      	movs	r3, #31
   21642:	18fb      	adds	r3, r7, r3
   21644:	781b      	ldrb	r3, [r3, #0]
   21646:	b25b      	sxtb	r3, r3
   21648:	2b00      	cmp	r3, #0
   2164a:	d000      	beq.n	2164e <hif_send+0x25e>
   2164c:	e06e      	b.n	2172c <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   2164e:	1d3b      	adds	r3, r7, #4
   21650:	881a      	ldrh	r2, [r3, #0]
   21652:	68bb      	ldr	r3, [r7, #8]
   21654:	18d3      	adds	r3, r2, r3
   21656:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   21658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2165a:	2b00      	cmp	r3, #0
   2165c:	d021      	beq.n	216a2 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   2165e:	2338      	movs	r3, #56	; 0x38
   21660:	18fb      	adds	r3, r7, r3
   21662:	881a      	ldrh	r2, [r3, #0]
   21664:	1d3b      	adds	r3, r7, #4
   21666:	881b      	ldrh	r3, [r3, #0]
   21668:	1ad3      	subs	r3, r2, r3
   2166a:	001a      	movs	r2, r3
   2166c:	68bb      	ldr	r3, [r7, #8]
   2166e:	18d3      	adds	r3, r2, r3
   21670:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   21672:	68b8      	ldr	r0, [r7, #8]
   21674:	2334      	movs	r3, #52	; 0x34
   21676:	18fb      	adds	r3, r7, r3
   21678:	881a      	ldrh	r2, [r3, #0]
   2167a:	231f      	movs	r3, #31
   2167c:	18fc      	adds	r4, r7, r3
   2167e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21680:	0019      	movs	r1, r3
   21682:	4b3d      	ldr	r3, [pc, #244]	; (21778 <hif_send+0x388>)
   21684:	4798      	blx	r3
   21686:	0003      	movs	r3, r0
   21688:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   2168a:	231f      	movs	r3, #31
   2168c:	18fb      	adds	r3, r7, r3
   2168e:	781b      	ldrb	r3, [r3, #0]
   21690:	b25b      	sxtb	r3, r3
   21692:	2b00      	cmp	r3, #0
   21694:	d14c      	bne.n	21730 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   21696:	2334      	movs	r3, #52	; 0x34
   21698:	18fb      	adds	r3, r7, r3
   2169a:	881a      	ldrh	r2, [r3, #0]
   2169c:	68bb      	ldr	r3, [r7, #8]
   2169e:	18d3      	adds	r3, r2, r3
   216a0:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   216a2:	693b      	ldr	r3, [r7, #16]
   216a4:	009b      	lsls	r3, r3, #2
   216a6:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   216a8:	697b      	ldr	r3, [r7, #20]
   216aa:	2202      	movs	r2, #2
   216ac:	4313      	orrs	r3, r2
   216ae:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   216b0:	697b      	ldr	r3, [r7, #20]
   216b2:	221f      	movs	r2, #31
   216b4:	18bc      	adds	r4, r7, r2
   216b6:	4a31      	ldr	r2, [pc, #196]	; (2177c <hif_send+0x38c>)
   216b8:	0019      	movs	r1, r3
   216ba:	0010      	movs	r0, r2
   216bc:	4b24      	ldr	r3, [pc, #144]	; (21750 <hif_send+0x360>)
   216be:	4798      	blx	r3
   216c0:	0003      	movs	r3, r0
   216c2:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   216c4:	231f      	movs	r3, #31
   216c6:	18fb      	adds	r3, r7, r3
   216c8:	781b      	ldrb	r3, [r3, #0]
   216ca:	b25b      	sxtb	r3, r3
   216cc:	2b00      	cmp	r3, #0
   216ce:	d01c      	beq.n	2170a <hif_send+0x31a>
   216d0:	e02f      	b.n	21732 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   216d2:	231f      	movs	r3, #31
   216d4:	18fc      	adds	r4, r7, r3
   216d6:	4b2a      	ldr	r3, [pc, #168]	; (21780 <hif_send+0x390>)
   216d8:	4798      	blx	r3
   216da:	0003      	movs	r3, r0
   216dc:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   216de:	231f      	movs	r3, #31
   216e0:	18fb      	adds	r3, r7, r3
   216e2:	22fd      	movs	r2, #253	; 0xfd
   216e4:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   216e6:	e026      	b.n	21736 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   216e8:	2398      	movs	r3, #152	; 0x98
   216ea:	33ff      	adds	r3, #255	; 0xff
   216ec:	001a      	movs	r2, r3
   216ee:	4925      	ldr	r1, [pc, #148]	; (21784 <hif_send+0x394>)
   216f0:	4b25      	ldr	r3, [pc, #148]	; (21788 <hif_send+0x398>)
   216f2:	0018      	movs	r0, r3
   216f4:	4b1a      	ldr	r3, [pc, #104]	; (21760 <hif_send+0x370>)
   216f6:	4798      	blx	r3
   216f8:	4b24      	ldr	r3, [pc, #144]	; (2178c <hif_send+0x39c>)
   216fa:	0018      	movs	r0, r3
   216fc:	4b18      	ldr	r3, [pc, #96]	; (21760 <hif_send+0x370>)
   216fe:	4798      	blx	r3
   21700:	4b19      	ldr	r3, [pc, #100]	; (21768 <hif_send+0x378>)
   21702:	0018      	movs	r0, r3
   21704:	4b16      	ldr	r3, [pc, #88]	; (21760 <hif_send+0x370>)
   21706:	4798      	blx	r3
		goto ERR2;
   21708:	e015      	b.n	21736 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   2170a:	231f      	movs	r3, #31
   2170c:	18fc      	adds	r4, r7, r3
   2170e:	4b1c      	ldr	r3, [pc, #112]	; (21780 <hif_send+0x390>)
   21710:	4798      	blx	r3
   21712:	0003      	movs	r3, r0
   21714:	7023      	strb	r3, [r4, #0]
	return ret;
   21716:	231f      	movs	r3, #31
   21718:	18fb      	adds	r3, r7, r3
   2171a:	781b      	ldrb	r3, [r3, #0]
   2171c:	b25b      	sxtb	r3, r3
   2171e:	e00e      	b.n	2173e <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   21720:	46c0      	nop			; (mov r8, r8)
   21722:	e006      	b.n	21732 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   21724:	46c0      	nop			; (mov r8, r8)
   21726:	e004      	b.n	21732 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   21728:	46c0      	nop			; (mov r8, r8)
   2172a:	e002      	b.n	21732 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   2172c:	46c0      	nop			; (mov r8, r8)
   2172e:	e000      	b.n	21732 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21730:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   21732:	4b17      	ldr	r3, [pc, #92]	; (21790 <hif_send+0x3a0>)
   21734:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   21736:	231f      	movs	r3, #31
   21738:	18fb      	adds	r3, r7, r3
   2173a:	781b      	ldrb	r3, [r3, #0]
   2173c:	b25b      	sxtb	r3, r3
}
   2173e:	0018      	movs	r0, r3
   21740:	46bd      	mov	sp, r7
   21742:	b009      	add	sp, #36	; 0x24
   21744:	bd90      	pop	{r4, r7, pc}
   21746:	46c0      	nop			; (mov r8, r8)
   21748:	000212b9 	.word	0x000212b9
   2174c:	0000108c 	.word	0x0000108c
   21750:	00023245 	.word	0x00023245
   21754:	00001078 	.word	0x00001078
   21758:	00023221 	.word	0x00023221
   2175c:	00038bcc 	.word	0x00038bcc
   21760:	0001e3f9 	.word	0x0001e3f9
   21764:	00038bd8 	.word	0x00038bd8
   21768:	00038bec 	.word	0x00038bec
   2176c:	000208b1 	.word	0x000208b1
   21770:	00150400 	.word	0x00150400
   21774:	000003e7 	.word	0x000003e7
   21778:	0002338d 	.word	0x0002338d
   2177c:	0000106c 	.word	0x0000106c
   21780:	00021351 	.word	0x00021351
   21784:	00038ef4 	.word	0x00038ef4
   21788:	00038bf0 	.word	0x00038bf0
   2178c:	00038c04 	.word	0x00038c04
   21790:	00021329 	.word	0x00021329

00021794 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   21794:	b590      	push	{r4, r7, lr}
   21796:	b087      	sub	sp, #28
   21798:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   2179a:	230f      	movs	r3, #15
   2179c:	18fb      	adds	r3, r7, r3
   2179e:	2200      	movs	r2, #0
   217a0:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   217a2:	230f      	movs	r3, #15
   217a4:	18fc      	adds	r4, r7, r3
   217a6:	2308      	movs	r3, #8
   217a8:	18fb      	adds	r3, r7, r3
   217aa:	4adc      	ldr	r2, [pc, #880]	; (21b1c <hif_isr+0x388>)
   217ac:	0019      	movs	r1, r3
   217ae:	0010      	movs	r0, r2
   217b0:	4bdb      	ldr	r3, [pc, #876]	; (21b20 <hif_isr+0x38c>)
   217b2:	4798      	blx	r3
   217b4:	0003      	movs	r3, r0
   217b6:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   217b8:	230f      	movs	r3, #15
   217ba:	18fb      	adds	r3, r7, r3
   217bc:	781b      	ldrb	r3, [r3, #0]
   217be:	b25b      	sxtb	r3, r3
   217c0:	2b00      	cmp	r3, #0
   217c2:	d000      	beq.n	217c6 <hif_isr+0x32>
   217c4:	e21e      	b.n	21c04 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   217c6:	68bb      	ldr	r3, [r7, #8]
   217c8:	2201      	movs	r2, #1
   217ca:	4013      	ands	r3, r2
   217cc:	d100      	bne.n	217d0 <hif_isr+0x3c>
   217ce:	e204      	b.n	21bda <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   217d0:	2000      	movs	r0, #0
   217d2:	4bd4      	ldr	r3, [pc, #848]	; (21b24 <hif_isr+0x390>)
   217d4:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   217d6:	68bb      	ldr	r3, [r7, #8]
   217d8:	2201      	movs	r2, #1
   217da:	4393      	bics	r3, r2
   217dc:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   217de:	68bb      	ldr	r3, [r7, #8]
   217e0:	220f      	movs	r2, #15
   217e2:	18bc      	adds	r4, r7, r2
   217e4:	4acd      	ldr	r2, [pc, #820]	; (21b1c <hif_isr+0x388>)
   217e6:	0019      	movs	r1, r3
   217e8:	0010      	movs	r0, r2
   217ea:	4bcf      	ldr	r3, [pc, #828]	; (21b28 <hif_isr+0x394>)
   217ec:	4798      	blx	r3
   217ee:	0003      	movs	r3, r0
   217f0:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   217f2:	230f      	movs	r3, #15
   217f4:	18fb      	adds	r3, r7, r3
   217f6:	781b      	ldrb	r3, [r3, #0]
   217f8:	b25b      	sxtb	r3, r3
   217fa:	2b00      	cmp	r3, #0
   217fc:	d000      	beq.n	21800 <hif_isr+0x6c>
   217fe:	e210      	b.n	21c22 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   21800:	4bca      	ldr	r3, [pc, #808]	; (21b2c <hif_isr+0x398>)
   21802:	2201      	movs	r2, #1
   21804:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   21806:	68bb      	ldr	r3, [r7, #8]
   21808:	089b      	lsrs	r3, r3, #2
   2180a:	b29a      	uxth	r2, r3
   2180c:	230c      	movs	r3, #12
   2180e:	18fb      	adds	r3, r7, r3
   21810:	0512      	lsls	r2, r2, #20
   21812:	0d12      	lsrs	r2, r2, #20
   21814:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   21816:	230c      	movs	r3, #12
   21818:	18fb      	adds	r3, r7, r3
   2181a:	881b      	ldrh	r3, [r3, #0]
   2181c:	2b00      	cmp	r3, #0
   2181e:	d100      	bne.n	21822 <hif_isr+0x8e>
   21820:	e1c8      	b.n	21bb4 <hif_isr+0x420>
				uint32 address = 0;
   21822:	2300      	movs	r3, #0
   21824:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   21826:	230f      	movs	r3, #15
   21828:	18fc      	adds	r4, r7, r3
   2182a:	003b      	movs	r3, r7
   2182c:	4ac0      	ldr	r2, [pc, #768]	; (21b30 <hif_isr+0x39c>)
   2182e:	0019      	movs	r1, r3
   21830:	0010      	movs	r0, r2
   21832:	4bbb      	ldr	r3, [pc, #748]	; (21b20 <hif_isr+0x38c>)
   21834:	4798      	blx	r3
   21836:	0003      	movs	r3, r0
   21838:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   2183a:	230f      	movs	r3, #15
   2183c:	18fb      	adds	r3, r7, r3
   2183e:	781b      	ldrb	r3, [r3, #0]
   21840:	b25b      	sxtb	r3, r3
   21842:	2b00      	cmp	r3, #0
   21844:	d012      	beq.n	2186c <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   21846:	23e4      	movs	r3, #228	; 0xe4
   21848:	005a      	lsls	r2, r3, #1
   2184a:	49ba      	ldr	r1, [pc, #744]	; (21b34 <hif_isr+0x3a0>)
   2184c:	4bba      	ldr	r3, [pc, #744]	; (21b38 <hif_isr+0x3a4>)
   2184e:	0018      	movs	r0, r3
   21850:	4bba      	ldr	r3, [pc, #744]	; (21b3c <hif_isr+0x3a8>)
   21852:	4798      	blx	r3
   21854:	4bba      	ldr	r3, [pc, #744]	; (21b40 <hif_isr+0x3ac>)
   21856:	0018      	movs	r0, r3
   21858:	4bb8      	ldr	r3, [pc, #736]	; (21b3c <hif_isr+0x3a8>)
   2185a:	4798      	blx	r3
   2185c:	4bb9      	ldr	r3, [pc, #740]	; (21b44 <hif_isr+0x3b0>)
   2185e:	0018      	movs	r0, r3
   21860:	4bb6      	ldr	r3, [pc, #728]	; (21b3c <hif_isr+0x3a8>)
   21862:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21864:	2001      	movs	r0, #1
   21866:	4baf      	ldr	r3, [pc, #700]	; (21b24 <hif_isr+0x390>)
   21868:	4798      	blx	r3
					goto ERR1;
   2186a:	e1db      	b.n	21c24 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   2186c:	683a      	ldr	r2, [r7, #0]
   2186e:	4baf      	ldr	r3, [pc, #700]	; (21b2c <hif_isr+0x398>)
   21870:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   21872:	230c      	movs	r3, #12
   21874:	18fb      	adds	r3, r7, r3
   21876:	881a      	ldrh	r2, [r3, #0]
   21878:	4bac      	ldr	r3, [pc, #688]	; (21b2c <hif_isr+0x398>)
   2187a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   2187c:	683b      	ldr	r3, [r7, #0]
   2187e:	220f      	movs	r2, #15
   21880:	18bc      	adds	r4, r7, r2
   21882:	1d39      	adds	r1, r7, #4
   21884:	2204      	movs	r2, #4
   21886:	0018      	movs	r0, r3
   21888:	4baf      	ldr	r3, [pc, #700]	; (21b48 <hif_isr+0x3b4>)
   2188a:	4798      	blx	r3
   2188c:	0003      	movs	r3, r0
   2188e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   21890:	1d3b      	adds	r3, r7, #4
   21892:	885b      	ldrh	r3, [r3, #2]
   21894:	b29a      	uxth	r2, r3
   21896:	1d3b      	adds	r3, r7, #4
   21898:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   2189a:	230f      	movs	r3, #15
   2189c:	18fb      	adds	r3, r7, r3
   2189e:	781b      	ldrb	r3, [r3, #0]
   218a0:	b25b      	sxtb	r3, r3
   218a2:	2b00      	cmp	r3, #0
   218a4:	d012      	beq.n	218cc <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   218a6:	23e9      	movs	r3, #233	; 0xe9
   218a8:	005a      	lsls	r2, r3, #1
   218aa:	49a2      	ldr	r1, [pc, #648]	; (21b34 <hif_isr+0x3a0>)
   218ac:	4ba2      	ldr	r3, [pc, #648]	; (21b38 <hif_isr+0x3a4>)
   218ae:	0018      	movs	r0, r3
   218b0:	4ba2      	ldr	r3, [pc, #648]	; (21b3c <hif_isr+0x3a8>)
   218b2:	4798      	blx	r3
   218b4:	4ba5      	ldr	r3, [pc, #660]	; (21b4c <hif_isr+0x3b8>)
   218b6:	0018      	movs	r0, r3
   218b8:	4ba0      	ldr	r3, [pc, #640]	; (21b3c <hif_isr+0x3a8>)
   218ba:	4798      	blx	r3
   218bc:	4ba1      	ldr	r3, [pc, #644]	; (21b44 <hif_isr+0x3b0>)
   218be:	0018      	movs	r0, r3
   218c0:	4b9e      	ldr	r3, [pc, #632]	; (21b3c <hif_isr+0x3a8>)
   218c2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   218c4:	2001      	movs	r0, #1
   218c6:	4b97      	ldr	r3, [pc, #604]	; (21b24 <hif_isr+0x390>)
   218c8:	4798      	blx	r3
					goto ERR1;
   218ca:	e1ab      	b.n	21c24 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   218cc:	1d3b      	adds	r3, r7, #4
   218ce:	885b      	ldrh	r3, [r3, #2]
   218d0:	b29b      	uxth	r3, r3
   218d2:	220c      	movs	r2, #12
   218d4:	18ba      	adds	r2, r7, r2
   218d6:	8812      	ldrh	r2, [r2, #0]
   218d8:	429a      	cmp	r2, r3
   218da:	d02f      	beq.n	2193c <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   218dc:	230c      	movs	r3, #12
   218de:	18fb      	adds	r3, r7, r3
   218e0:	881b      	ldrh	r3, [r3, #0]
   218e2:	1d3a      	adds	r2, r7, #4
   218e4:	8852      	ldrh	r2, [r2, #2]
   218e6:	b292      	uxth	r2, r2
   218e8:	1a9b      	subs	r3, r3, r2
   218ea:	2b04      	cmp	r3, #4
   218ec:	dd26      	ble.n	2193c <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   218ee:	23dc      	movs	r3, #220	; 0xdc
   218f0:	33ff      	adds	r3, #255	; 0xff
   218f2:	001a      	movs	r2, r3
   218f4:	498f      	ldr	r1, [pc, #572]	; (21b34 <hif_isr+0x3a0>)
   218f6:	4b90      	ldr	r3, [pc, #576]	; (21b38 <hif_isr+0x3a4>)
   218f8:	0018      	movs	r0, r3
   218fa:	4b90      	ldr	r3, [pc, #576]	; (21b3c <hif_isr+0x3a8>)
   218fc:	4798      	blx	r3
   218fe:	230c      	movs	r3, #12
   21900:	18fb      	adds	r3, r7, r3
   21902:	8819      	ldrh	r1, [r3, #0]
   21904:	1d3b      	adds	r3, r7, #4
   21906:	885b      	ldrh	r3, [r3, #2]
   21908:	b29b      	uxth	r3, r3
   2190a:	001a      	movs	r2, r3
   2190c:	1d3b      	adds	r3, r7, #4
   2190e:	781b      	ldrb	r3, [r3, #0]
   21910:	b2db      	uxtb	r3, r3
   21912:	001c      	movs	r4, r3
   21914:	1d3b      	adds	r3, r7, #4
   21916:	785b      	ldrb	r3, [r3, #1]
   21918:	b2db      	uxtb	r3, r3
   2191a:	488d      	ldr	r0, [pc, #564]	; (21b50 <hif_isr+0x3bc>)
   2191c:	9300      	str	r3, [sp, #0]
   2191e:	0023      	movs	r3, r4
   21920:	4c86      	ldr	r4, [pc, #536]	; (21b3c <hif_isr+0x3a8>)
   21922:	47a0      	blx	r4
   21924:	4b87      	ldr	r3, [pc, #540]	; (21b44 <hif_isr+0x3b0>)
   21926:	0018      	movs	r0, r3
   21928:	4b84      	ldr	r3, [pc, #528]	; (21b3c <hif_isr+0x3a8>)
   2192a:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   2192c:	2001      	movs	r0, #1
   2192e:	4b7d      	ldr	r3, [pc, #500]	; (21b24 <hif_isr+0x390>)
   21930:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   21932:	230f      	movs	r3, #15
   21934:	18fb      	adds	r3, r7, r3
   21936:	22fa      	movs	r2, #250	; 0xfa
   21938:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   2193a:	e173      	b.n	21c24 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   2193c:	1d3b      	adds	r3, r7, #4
   2193e:	781b      	ldrb	r3, [r3, #0]
   21940:	b2db      	uxtb	r3, r3
   21942:	2b01      	cmp	r3, #1
   21944:	d122      	bne.n	2198c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   21946:	4b79      	ldr	r3, [pc, #484]	; (21b2c <hif_isr+0x398>)
   21948:	691b      	ldr	r3, [r3, #16]
   2194a:	2b00      	cmp	r3, #0
   2194c:	d00d      	beq.n	2196a <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2194e:	4b77      	ldr	r3, [pc, #476]	; (21b2c <hif_isr+0x398>)
   21950:	691b      	ldr	r3, [r3, #16]
   21952:	1d3a      	adds	r2, r7, #4
   21954:	7852      	ldrb	r2, [r2, #1]
   21956:	b2d0      	uxtb	r0, r2
   21958:	1d3a      	adds	r2, r7, #4
   2195a:	8852      	ldrh	r2, [r2, #2]
   2195c:	b292      	uxth	r2, r2
   2195e:	3a08      	subs	r2, #8
   21960:	b291      	uxth	r1, r2
   21962:	683a      	ldr	r2, [r7, #0]
   21964:	3208      	adds	r2, #8
   21966:	4798      	blx	r3
   21968:	e102      	b.n	21b70 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   2196a:	23e8      	movs	r3, #232	; 0xe8
   2196c:	33ff      	adds	r3, #255	; 0xff
   2196e:	001a      	movs	r2, r3
   21970:	4970      	ldr	r1, [pc, #448]	; (21b34 <hif_isr+0x3a0>)
   21972:	4b71      	ldr	r3, [pc, #452]	; (21b38 <hif_isr+0x3a4>)
   21974:	0018      	movs	r0, r3
   21976:	4b71      	ldr	r3, [pc, #452]	; (21b3c <hif_isr+0x3a8>)
   21978:	4798      	blx	r3
   2197a:	4b76      	ldr	r3, [pc, #472]	; (21b54 <hif_isr+0x3c0>)
   2197c:	0018      	movs	r0, r3
   2197e:	4b6f      	ldr	r3, [pc, #444]	; (21b3c <hif_isr+0x3a8>)
   21980:	4798      	blx	r3
   21982:	4b70      	ldr	r3, [pc, #448]	; (21b44 <hif_isr+0x3b0>)
   21984:	0018      	movs	r0, r3
   21986:	4b6d      	ldr	r3, [pc, #436]	; (21b3c <hif_isr+0x3a8>)
   21988:	4798      	blx	r3
   2198a:	e0f1      	b.n	21b70 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   2198c:	1d3b      	adds	r3, r7, #4
   2198e:	781b      	ldrb	r3, [r3, #0]
   21990:	b2db      	uxtb	r3, r3
   21992:	2b02      	cmp	r3, #2
   21994:	d122      	bne.n	219dc <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   21996:	4b65      	ldr	r3, [pc, #404]	; (21b2c <hif_isr+0x398>)
   21998:	695b      	ldr	r3, [r3, #20]
   2199a:	2b00      	cmp	r3, #0
   2199c:	d00d      	beq.n	219ba <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2199e:	4b63      	ldr	r3, [pc, #396]	; (21b2c <hif_isr+0x398>)
   219a0:	695b      	ldr	r3, [r3, #20]
   219a2:	1d3a      	adds	r2, r7, #4
   219a4:	7852      	ldrb	r2, [r2, #1]
   219a6:	b2d0      	uxtb	r0, r2
   219a8:	1d3a      	adds	r2, r7, #4
   219aa:	8852      	ldrh	r2, [r2, #2]
   219ac:	b292      	uxth	r2, r2
   219ae:	3a08      	subs	r2, #8
   219b0:	b291      	uxth	r1, r2
   219b2:	683a      	ldr	r2, [r7, #0]
   219b4:	3208      	adds	r2, #8
   219b6:	4798      	blx	r3
   219b8:	e0da      	b.n	21b70 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   219ba:	23f0      	movs	r3, #240	; 0xf0
   219bc:	33ff      	adds	r3, #255	; 0xff
   219be:	001a      	movs	r2, r3
   219c0:	495c      	ldr	r1, [pc, #368]	; (21b34 <hif_isr+0x3a0>)
   219c2:	4b5d      	ldr	r3, [pc, #372]	; (21b38 <hif_isr+0x3a4>)
   219c4:	0018      	movs	r0, r3
   219c6:	4b5d      	ldr	r3, [pc, #372]	; (21b3c <hif_isr+0x3a8>)
   219c8:	4798      	blx	r3
   219ca:	4b63      	ldr	r3, [pc, #396]	; (21b58 <hif_isr+0x3c4>)
   219cc:	0018      	movs	r0, r3
   219ce:	4b5b      	ldr	r3, [pc, #364]	; (21b3c <hif_isr+0x3a8>)
   219d0:	4798      	blx	r3
   219d2:	4b5c      	ldr	r3, [pc, #368]	; (21b44 <hif_isr+0x3b0>)
   219d4:	0018      	movs	r0, r3
   219d6:	4b59      	ldr	r3, [pc, #356]	; (21b3c <hif_isr+0x3a8>)
   219d8:	4798      	blx	r3
   219da:	e0c9      	b.n	21b70 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   219dc:	1d3b      	adds	r3, r7, #4
   219de:	781b      	ldrb	r3, [r3, #0]
   219e0:	b2db      	uxtb	r3, r3
   219e2:	2b04      	cmp	r3, #4
   219e4:	d122      	bne.n	21a2c <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   219e6:	4b51      	ldr	r3, [pc, #324]	; (21b2c <hif_isr+0x398>)
   219e8:	699b      	ldr	r3, [r3, #24]
   219ea:	2b00      	cmp	r3, #0
   219ec:	d00d      	beq.n	21a0a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   219ee:	4b4f      	ldr	r3, [pc, #316]	; (21b2c <hif_isr+0x398>)
   219f0:	699b      	ldr	r3, [r3, #24]
   219f2:	1d3a      	adds	r2, r7, #4
   219f4:	7852      	ldrb	r2, [r2, #1]
   219f6:	b2d0      	uxtb	r0, r2
   219f8:	1d3a      	adds	r2, r7, #4
   219fa:	8852      	ldrh	r2, [r2, #2]
   219fc:	b292      	uxth	r2, r2
   219fe:	3a08      	subs	r2, #8
   21a00:	b291      	uxth	r1, r2
   21a02:	683a      	ldr	r2, [r7, #0]
   21a04:	3208      	adds	r2, #8
   21a06:	4798      	blx	r3
   21a08:	e0b2      	b.n	21b70 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   21a0a:	23f8      	movs	r3, #248	; 0xf8
   21a0c:	33ff      	adds	r3, #255	; 0xff
   21a0e:	001a      	movs	r2, r3
   21a10:	4948      	ldr	r1, [pc, #288]	; (21b34 <hif_isr+0x3a0>)
   21a12:	4b49      	ldr	r3, [pc, #292]	; (21b38 <hif_isr+0x3a4>)
   21a14:	0018      	movs	r0, r3
   21a16:	4b49      	ldr	r3, [pc, #292]	; (21b3c <hif_isr+0x3a8>)
   21a18:	4798      	blx	r3
   21a1a:	4b50      	ldr	r3, [pc, #320]	; (21b5c <hif_isr+0x3c8>)
   21a1c:	0018      	movs	r0, r3
   21a1e:	4b47      	ldr	r3, [pc, #284]	; (21b3c <hif_isr+0x3a8>)
   21a20:	4798      	blx	r3
   21a22:	4b48      	ldr	r3, [pc, #288]	; (21b44 <hif_isr+0x3b0>)
   21a24:	0018      	movs	r0, r3
   21a26:	4b45      	ldr	r3, [pc, #276]	; (21b3c <hif_isr+0x3a8>)
   21a28:	4798      	blx	r3
   21a2a:	e0a1      	b.n	21b70 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   21a2c:	1d3b      	adds	r3, r7, #4
   21a2e:	781b      	ldrb	r3, [r3, #0]
   21a30:	b2db      	uxtb	r3, r3
   21a32:	2b06      	cmp	r3, #6
   21a34:	d121      	bne.n	21a7a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   21a36:	4b3d      	ldr	r3, [pc, #244]	; (21b2c <hif_isr+0x398>)
   21a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21a3a:	2b00      	cmp	r3, #0
   21a3c:	d00d      	beq.n	21a5a <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21a3e:	4b3b      	ldr	r3, [pc, #236]	; (21b2c <hif_isr+0x398>)
   21a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21a42:	1d3a      	adds	r2, r7, #4
   21a44:	7852      	ldrb	r2, [r2, #1]
   21a46:	b2d0      	uxtb	r0, r2
   21a48:	1d3a      	adds	r2, r7, #4
   21a4a:	8852      	ldrh	r2, [r2, #2]
   21a4c:	b292      	uxth	r2, r2
   21a4e:	3a08      	subs	r2, #8
   21a50:	b291      	uxth	r1, r2
   21a52:	683a      	ldr	r2, [r7, #0]
   21a54:	3208      	adds	r2, #8
   21a56:	4798      	blx	r3
   21a58:	e08a      	b.n	21b70 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   21a5a:	2380      	movs	r3, #128	; 0x80
   21a5c:	009a      	lsls	r2, r3, #2
   21a5e:	4935      	ldr	r1, [pc, #212]	; (21b34 <hif_isr+0x3a0>)
   21a60:	4b35      	ldr	r3, [pc, #212]	; (21b38 <hif_isr+0x3a4>)
   21a62:	0018      	movs	r0, r3
   21a64:	4b35      	ldr	r3, [pc, #212]	; (21b3c <hif_isr+0x3a8>)
   21a66:	4798      	blx	r3
   21a68:	4b3d      	ldr	r3, [pc, #244]	; (21b60 <hif_isr+0x3cc>)
   21a6a:	0018      	movs	r0, r3
   21a6c:	4b33      	ldr	r3, [pc, #204]	; (21b3c <hif_isr+0x3a8>)
   21a6e:	4798      	blx	r3
   21a70:	4b34      	ldr	r3, [pc, #208]	; (21b44 <hif_isr+0x3b0>)
   21a72:	0018      	movs	r0, r3
   21a74:	4b31      	ldr	r3, [pc, #196]	; (21b3c <hif_isr+0x3a8>)
   21a76:	4798      	blx	r3
   21a78:	e07a      	b.n	21b70 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   21a7a:	1d3b      	adds	r3, r7, #4
   21a7c:	781b      	ldrb	r3, [r3, #0]
   21a7e:	b2db      	uxtb	r3, r3
   21a80:	2b07      	cmp	r3, #7
   21a82:	d120      	bne.n	21ac6 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   21a84:	4b29      	ldr	r3, [pc, #164]	; (21b2c <hif_isr+0x398>)
   21a86:	69db      	ldr	r3, [r3, #28]
   21a88:	2b00      	cmp	r3, #0
   21a8a:	d00d      	beq.n	21aa8 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21a8c:	4b27      	ldr	r3, [pc, #156]	; (21b2c <hif_isr+0x398>)
   21a8e:	69db      	ldr	r3, [r3, #28]
   21a90:	1d3a      	adds	r2, r7, #4
   21a92:	7852      	ldrb	r2, [r2, #1]
   21a94:	b2d0      	uxtb	r0, r2
   21a96:	1d3a      	adds	r2, r7, #4
   21a98:	8852      	ldrh	r2, [r2, #2]
   21a9a:	b292      	uxth	r2, r2
   21a9c:	3a08      	subs	r2, #8
   21a9e:	b291      	uxth	r1, r2
   21aa0:	683a      	ldr	r2, [r7, #0]
   21aa2:	3208      	adds	r2, #8
   21aa4:	4798      	blx	r3
   21aa6:	e063      	b.n	21b70 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   21aa8:	4a2e      	ldr	r2, [pc, #184]	; (21b64 <hif_isr+0x3d0>)
   21aaa:	4922      	ldr	r1, [pc, #136]	; (21b34 <hif_isr+0x3a0>)
   21aac:	4b22      	ldr	r3, [pc, #136]	; (21b38 <hif_isr+0x3a4>)
   21aae:	0018      	movs	r0, r3
   21ab0:	4b22      	ldr	r3, [pc, #136]	; (21b3c <hif_isr+0x3a8>)
   21ab2:	4798      	blx	r3
   21ab4:	4b2c      	ldr	r3, [pc, #176]	; (21b68 <hif_isr+0x3d4>)
   21ab6:	0018      	movs	r0, r3
   21ab8:	4b20      	ldr	r3, [pc, #128]	; (21b3c <hif_isr+0x3a8>)
   21aba:	4798      	blx	r3
   21abc:	4b21      	ldr	r3, [pc, #132]	; (21b44 <hif_isr+0x3b0>)
   21abe:	0018      	movs	r0, r3
   21ac0:	4b1e      	ldr	r3, [pc, #120]	; (21b3c <hif_isr+0x3a8>)
   21ac2:	4798      	blx	r3
   21ac4:	e054      	b.n	21b70 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   21ac6:	1d3b      	adds	r3, r7, #4
   21ac8:	781b      	ldrb	r3, [r3, #0]
   21aca:	b2db      	uxtb	r3, r3
   21acc:	2b05      	cmp	r3, #5
   21ace:	d111      	bne.n	21af4 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   21ad0:	4b16      	ldr	r3, [pc, #88]	; (21b2c <hif_isr+0x398>)
   21ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21ad4:	2b00      	cmp	r3, #0
   21ad6:	d04b      	beq.n	21b70 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21ad8:	4b14      	ldr	r3, [pc, #80]	; (21b2c <hif_isr+0x398>)
   21ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21adc:	1d3a      	adds	r2, r7, #4
   21ade:	7852      	ldrb	r2, [r2, #1]
   21ae0:	b2d0      	uxtb	r0, r2
   21ae2:	1d3a      	adds	r2, r7, #4
   21ae4:	8852      	ldrh	r2, [r2, #2]
   21ae6:	b292      	uxth	r2, r2
   21ae8:	3a08      	subs	r2, #8
   21aea:	b291      	uxth	r1, r2
   21aec:	683a      	ldr	r2, [r7, #0]
   21aee:	3208      	adds	r2, #8
   21af0:	4798      	blx	r3
   21af2:	e03d      	b.n	21b70 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   21af4:	2384      	movs	r3, #132	; 0x84
   21af6:	009a      	lsls	r2, r3, #2
   21af8:	490e      	ldr	r1, [pc, #56]	; (21b34 <hif_isr+0x3a0>)
   21afa:	4b0f      	ldr	r3, [pc, #60]	; (21b38 <hif_isr+0x3a4>)
   21afc:	0018      	movs	r0, r3
   21afe:	4b0f      	ldr	r3, [pc, #60]	; (21b3c <hif_isr+0x3a8>)
   21b00:	4798      	blx	r3
   21b02:	4b1a      	ldr	r3, [pc, #104]	; (21b6c <hif_isr+0x3d8>)
   21b04:	0018      	movs	r0, r3
   21b06:	4b0d      	ldr	r3, [pc, #52]	; (21b3c <hif_isr+0x3a8>)
   21b08:	4798      	blx	r3
   21b0a:	4b0e      	ldr	r3, [pc, #56]	; (21b44 <hif_isr+0x3b0>)
   21b0c:	0018      	movs	r0, r3
   21b0e:	4b0b      	ldr	r3, [pc, #44]	; (21b3c <hif_isr+0x3a8>)
   21b10:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   21b12:	230f      	movs	r3, #15
   21b14:	18fb      	adds	r3, r7, r3
   21b16:	22fa      	movs	r2, #250	; 0xfa
   21b18:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21b1a:	e083      	b.n	21c24 <hif_isr+0x490>
   21b1c:	00001070 	.word	0x00001070
   21b20:	00023221 	.word	0x00023221
   21b24:	00020945 	.word	0x00020945
   21b28:	00023245 	.word	0x00023245
   21b2c:	20005ad4 	.word	0x20005ad4
   21b30:	00001084 	.word	0x00001084
   21b34:	00038f00 	.word	0x00038f00
   21b38:	00038bf0 	.word	0x00038bf0
   21b3c:	0001e3f9 	.word	0x0001e3f9
   21b40:	00038c24 	.word	0x00038c24
   21b44:	00038bec 	.word	0x00038bec
   21b48:	00023295 	.word	0x00023295
   21b4c:	00038c4c 	.word	0x00038c4c
   21b50:	00038c64 	.word	0x00038c64
   21b54:	00038ca4 	.word	0x00038ca4
   21b58:	00038cc8 	.word	0x00038cc8
   21b5c:	00038cec 	.word	0x00038cec
   21b60:	00038d0c 	.word	0x00038d0c
   21b64:	00000207 	.word	0x00000207
   21b68:	00038d30 	.word	0x00038d30
   21b6c:	00038d54 	.word	0x00038d54
				}
				if(gstrHifCxt.u8HifRXDone)
   21b70:	4b30      	ldr	r3, [pc, #192]	; (21c34 <hif_isr+0x4a0>)
   21b72:	789b      	ldrb	r3, [r3, #2]
   21b74:	b2db      	uxtb	r3, r3
   21b76:	2b00      	cmp	r3, #0
   21b78:	d054      	beq.n	21c24 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   21b7a:	4a2f      	ldr	r2, [pc, #188]	; (21c38 <hif_isr+0x4a4>)
   21b7c:	492f      	ldr	r1, [pc, #188]	; (21c3c <hif_isr+0x4a8>)
   21b7e:	4b30      	ldr	r3, [pc, #192]	; (21c40 <hif_isr+0x4ac>)
   21b80:	0018      	movs	r0, r3
   21b82:	4b30      	ldr	r3, [pc, #192]	; (21c44 <hif_isr+0x4b0>)
   21b84:	4798      	blx	r3
   21b86:	1d3b      	adds	r3, r7, #4
   21b88:	781b      	ldrb	r3, [r3, #0]
   21b8a:	b2db      	uxtb	r3, r3
   21b8c:	0019      	movs	r1, r3
   21b8e:	1d3b      	adds	r3, r7, #4
   21b90:	785b      	ldrb	r3, [r3, #1]
   21b92:	b2db      	uxtb	r3, r3
   21b94:	001a      	movs	r2, r3
   21b96:	4b2c      	ldr	r3, [pc, #176]	; (21c48 <hif_isr+0x4b4>)
   21b98:	0018      	movs	r0, r3
   21b9a:	4b2a      	ldr	r3, [pc, #168]	; (21c44 <hif_isr+0x4b0>)
   21b9c:	4798      	blx	r3
   21b9e:	4b2b      	ldr	r3, [pc, #172]	; (21c4c <hif_isr+0x4b8>)
   21ba0:	0018      	movs	r0, r3
   21ba2:	4b28      	ldr	r3, [pc, #160]	; (21c44 <hif_isr+0x4b0>)
   21ba4:	4798      	blx	r3
					ret = hif_set_rx_done();
   21ba6:	230f      	movs	r3, #15
   21ba8:	18fc      	adds	r4, r7, r3
   21baa:	4b29      	ldr	r3, [pc, #164]	; (21c50 <hif_isr+0x4bc>)
   21bac:	4798      	blx	r3
   21bae:	0003      	movs	r3, r0
   21bb0:	7023      	strb	r3, [r4, #0]
   21bb2:	e037      	b.n	21c24 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   21bb4:	4a27      	ldr	r2, [pc, #156]	; (21c54 <hif_isr+0x4c0>)
   21bb6:	4921      	ldr	r1, [pc, #132]	; (21c3c <hif_isr+0x4a8>)
   21bb8:	4b21      	ldr	r3, [pc, #132]	; (21c40 <hif_isr+0x4ac>)
   21bba:	0018      	movs	r0, r3
   21bbc:	4b21      	ldr	r3, [pc, #132]	; (21c44 <hif_isr+0x4b0>)
   21bbe:	4798      	blx	r3
   21bc0:	4b25      	ldr	r3, [pc, #148]	; (21c58 <hif_isr+0x4c4>)
   21bc2:	0018      	movs	r0, r3
   21bc4:	4b1f      	ldr	r3, [pc, #124]	; (21c44 <hif_isr+0x4b0>)
   21bc6:	4798      	blx	r3
   21bc8:	4b20      	ldr	r3, [pc, #128]	; (21c4c <hif_isr+0x4b8>)
   21bca:	0018      	movs	r0, r3
   21bcc:	4b1d      	ldr	r3, [pc, #116]	; (21c44 <hif_isr+0x4b0>)
   21bce:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   21bd0:	230f      	movs	r3, #15
   21bd2:	18fb      	adds	r3, r7, r3
   21bd4:	22fe      	movs	r2, #254	; 0xfe
   21bd6:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   21bd8:	e024      	b.n	21c24 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   21bda:	4a20      	ldr	r2, [pc, #128]	; (21c5c <hif_isr+0x4c8>)
   21bdc:	4917      	ldr	r1, [pc, #92]	; (21c3c <hif_isr+0x4a8>)
   21bde:	4b18      	ldr	r3, [pc, #96]	; (21c40 <hif_isr+0x4ac>)
   21be0:	0018      	movs	r0, r3
   21be2:	4b18      	ldr	r3, [pc, #96]	; (21c44 <hif_isr+0x4b0>)
   21be4:	4798      	blx	r3
   21be6:	68ba      	ldr	r2, [r7, #8]
   21be8:	4b1d      	ldr	r3, [pc, #116]	; (21c60 <hif_isr+0x4cc>)
   21bea:	0011      	movs	r1, r2
   21bec:	0018      	movs	r0, r3
   21bee:	4b15      	ldr	r3, [pc, #84]	; (21c44 <hif_isr+0x4b0>)
   21bf0:	4798      	blx	r3
   21bf2:	4b16      	ldr	r3, [pc, #88]	; (21c4c <hif_isr+0x4b8>)
   21bf4:	0018      	movs	r0, r3
   21bf6:	4b13      	ldr	r3, [pc, #76]	; (21c44 <hif_isr+0x4b0>)
   21bf8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21bfa:	230f      	movs	r3, #15
   21bfc:	18fb      	adds	r3, r7, r3
   21bfe:	22f4      	movs	r2, #244	; 0xf4
   21c00:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21c02:	e00f      	b.n	21c24 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   21c04:	4a17      	ldr	r2, [pc, #92]	; (21c64 <hif_isr+0x4d0>)
   21c06:	490d      	ldr	r1, [pc, #52]	; (21c3c <hif_isr+0x4a8>)
   21c08:	4b0d      	ldr	r3, [pc, #52]	; (21c40 <hif_isr+0x4ac>)
   21c0a:	0018      	movs	r0, r3
   21c0c:	4b0d      	ldr	r3, [pc, #52]	; (21c44 <hif_isr+0x4b0>)
   21c0e:	4798      	blx	r3
   21c10:	4b15      	ldr	r3, [pc, #84]	; (21c68 <hif_isr+0x4d4>)
   21c12:	0018      	movs	r0, r3
   21c14:	4b0b      	ldr	r3, [pc, #44]	; (21c44 <hif_isr+0x4b0>)
   21c16:	4798      	blx	r3
   21c18:	4b0c      	ldr	r3, [pc, #48]	; (21c4c <hif_isr+0x4b8>)
   21c1a:	0018      	movs	r0, r3
   21c1c:	4b09      	ldr	r3, [pc, #36]	; (21c44 <hif_isr+0x4b0>)
   21c1e:	4798      	blx	r3
		goto ERR1;
   21c20:	e000      	b.n	21c24 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   21c22:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21c24:	230f      	movs	r3, #15
   21c26:	18fb      	adds	r3, r7, r3
   21c28:	781b      	ldrb	r3, [r3, #0]
   21c2a:	b25b      	sxtb	r3, r3
}
   21c2c:	0018      	movs	r0, r3
   21c2e:	46bd      	mov	sp, r7
   21c30:	b005      	add	sp, #20
   21c32:	bd90      	pop	{r4, r7, pc}
   21c34:	20005ad4 	.word	0x20005ad4
   21c38:	00000216 	.word	0x00000216
   21c3c:	00038f00 	.word	0x00038f00
   21c40:	00038bf0 	.word	0x00038bf0
   21c44:	0001e3f9 	.word	0x0001e3f9
   21c48:	00038d6c 	.word	0x00038d6c
   21c4c:	00038bec 	.word	0x00038bec
   21c50:	00021229 	.word	0x00021229
   21c54:	0000021d 	.word	0x0000021d
   21c58:	00038d98 	.word	0x00038d98
   21c5c:	00000225 	.word	0x00000225
   21c60:	00038dac 	.word	0x00038dac
   21c64:	0000022e 	.word	0x0000022e
   21c68:	00038dc8 	.word	0x00038dc8

00021c6c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   21c6c:	b590      	push	{r4, r7, lr}
   21c6e:	b083      	sub	sp, #12
   21c70:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   21c72:	1dfb      	adds	r3, r7, #7
   21c74:	2200      	movs	r2, #0
   21c76:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   21c78:	4b1c      	ldr	r3, [pc, #112]	; (21cec <hif_handle_isr+0x80>)
   21c7a:	2200      	movs	r2, #0
   21c7c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   21c7e:	e024      	b.n	21cca <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   21c80:	4b1a      	ldr	r3, [pc, #104]	; (21cec <hif_handle_isr+0x80>)
   21c82:	78db      	ldrb	r3, [r3, #3]
   21c84:	b2db      	uxtb	r3, r3
   21c86:	3b01      	subs	r3, #1
   21c88:	b2da      	uxtb	r2, r3
   21c8a:	4b18      	ldr	r3, [pc, #96]	; (21cec <hif_handle_isr+0x80>)
   21c8c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   21c8e:	1dfc      	adds	r4, r7, #7
   21c90:	4b17      	ldr	r3, [pc, #92]	; (21cf0 <hif_handle_isr+0x84>)
   21c92:	4798      	blx	r3
   21c94:	0003      	movs	r3, r0
   21c96:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21c98:	1dfb      	adds	r3, r7, #7
   21c9a:	781b      	ldrb	r3, [r3, #0]
   21c9c:	b25b      	sxtb	r3, r3
   21c9e:	2b00      	cmp	r3, #0
   21ca0:	d100      	bne.n	21ca4 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   21ca2:	e012      	b.n	21cca <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   21ca4:	4a13      	ldr	r2, [pc, #76]	; (21cf4 <hif_handle_isr+0x88>)
   21ca6:	4914      	ldr	r1, [pc, #80]	; (21cf8 <hif_handle_isr+0x8c>)
   21ca8:	4b14      	ldr	r3, [pc, #80]	; (21cfc <hif_handle_isr+0x90>)
   21caa:	0018      	movs	r0, r3
   21cac:	4b14      	ldr	r3, [pc, #80]	; (21d00 <hif_handle_isr+0x94>)
   21cae:	4798      	blx	r3
   21cb0:	1dfb      	adds	r3, r7, #7
   21cb2:	2200      	movs	r2, #0
   21cb4:	569a      	ldrsb	r2, [r3, r2]
   21cb6:	4b13      	ldr	r3, [pc, #76]	; (21d04 <hif_handle_isr+0x98>)
   21cb8:	0011      	movs	r1, r2
   21cba:	0018      	movs	r0, r3
   21cbc:	4b10      	ldr	r3, [pc, #64]	; (21d00 <hif_handle_isr+0x94>)
   21cbe:	4798      	blx	r3
   21cc0:	4b11      	ldr	r3, [pc, #68]	; (21d08 <hif_handle_isr+0x9c>)
   21cc2:	0018      	movs	r0, r3
   21cc4:	4b0e      	ldr	r3, [pc, #56]	; (21d00 <hif_handle_isr+0x94>)
   21cc6:	4798      	blx	r3
			ret = hif_isr();
   21cc8:	e7e1      	b.n	21c8e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   21cca:	4b08      	ldr	r3, [pc, #32]	; (21cec <hif_handle_isr+0x80>)
   21ccc:	78db      	ldrb	r3, [r3, #3]
   21cce:	b2db      	uxtb	r3, r3
   21cd0:	2b00      	cmp	r3, #0
   21cd2:	d004      	beq.n	21cde <hif_handle_isr+0x72>
   21cd4:	4b05      	ldr	r3, [pc, #20]	; (21cec <hif_handle_isr+0x80>)
   21cd6:	791b      	ldrb	r3, [r3, #4]
   21cd8:	b2db      	uxtb	r3, r3
   21cda:	2b00      	cmp	r3, #0
   21cdc:	d0d0      	beq.n	21c80 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   21cde:	1dfb      	adds	r3, r7, #7
   21ce0:	781b      	ldrb	r3, [r3, #0]
   21ce2:	b25b      	sxtb	r3, r3
}
   21ce4:	0018      	movs	r0, r3
   21ce6:	46bd      	mov	sp, r7
   21ce8:	b003      	add	sp, #12
   21cea:	bd90      	pop	{r4, r7, pc}
   21cec:	20005ad4 	.word	0x20005ad4
   21cf0:	00021795 	.word	0x00021795
   21cf4:	00000257 	.word	0x00000257
   21cf8:	00038f08 	.word	0x00038f08
   21cfc:	00038bf0 	.word	0x00038bf0
   21d00:	0001e3f9 	.word	0x0001e3f9
   21d04:	00038dec 	.word	0x00038dec
   21d08:	00038bec 	.word	0x00038bec

00021d0c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   21d0c:	b590      	push	{r4, r7, lr}
   21d0e:	b087      	sub	sp, #28
   21d10:	af00      	add	r7, sp, #0
   21d12:	60f8      	str	r0, [r7, #12]
   21d14:	60b9      	str	r1, [r7, #8]
   21d16:	0019      	movs	r1, r3
   21d18:	1dbb      	adds	r3, r7, #6
   21d1a:	801a      	strh	r2, [r3, #0]
   21d1c:	1d7b      	adds	r3, r7, #5
   21d1e:	1c0a      	adds	r2, r1, #0
   21d20:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21d22:	2317      	movs	r3, #23
   21d24:	18fb      	adds	r3, r7, r3
   21d26:	2200      	movs	r2, #0
   21d28:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   21d2a:	68fb      	ldr	r3, [r7, #12]
   21d2c:	2b00      	cmp	r3, #0
   21d2e:	d006      	beq.n	21d3e <hif_receive+0x32>
   21d30:	68bb      	ldr	r3, [r7, #8]
   21d32:	2b00      	cmp	r3, #0
   21d34:	d003      	beq.n	21d3e <hif_receive+0x32>
   21d36:	1dbb      	adds	r3, r7, #6
   21d38:	881b      	ldrh	r3, [r3, #0]
   21d3a:	2b00      	cmp	r3, #0
   21d3c:	d11e      	bne.n	21d7c <hif_receive+0x70>
	{
		if(isDone)
   21d3e:	1d7b      	adds	r3, r7, #5
   21d40:	781b      	ldrb	r3, [r3, #0]
   21d42:	2b00      	cmp	r3, #0
   21d44:	d006      	beq.n	21d54 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   21d46:	2317      	movs	r3, #23
   21d48:	18fc      	adds	r4, r7, r3
   21d4a:	4b45      	ldr	r3, [pc, #276]	; (21e60 <hif_receive+0x154>)
   21d4c:	4798      	blx	r3
   21d4e:	0003      	movs	r3, r0
   21d50:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   21d52:	e07c      	b.n	21e4e <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   21d54:	2317      	movs	r3, #23
   21d56:	18fb      	adds	r3, r7, r3
   21d58:	22f4      	movs	r2, #244	; 0xf4
   21d5a:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   21d5c:	239e      	movs	r3, #158	; 0x9e
   21d5e:	009a      	lsls	r2, r3, #2
   21d60:	4940      	ldr	r1, [pc, #256]	; (21e64 <hif_receive+0x158>)
   21d62:	4b41      	ldr	r3, [pc, #260]	; (21e68 <hif_receive+0x15c>)
   21d64:	0018      	movs	r0, r3
   21d66:	4b41      	ldr	r3, [pc, #260]	; (21e6c <hif_receive+0x160>)
   21d68:	4798      	blx	r3
   21d6a:	4b41      	ldr	r3, [pc, #260]	; (21e70 <hif_receive+0x164>)
   21d6c:	0018      	movs	r0, r3
   21d6e:	4b3f      	ldr	r3, [pc, #252]	; (21e6c <hif_receive+0x160>)
   21d70:	4798      	blx	r3
   21d72:	4b40      	ldr	r3, [pc, #256]	; (21e74 <hif_receive+0x168>)
   21d74:	0018      	movs	r0, r3
   21d76:	4b3d      	ldr	r3, [pc, #244]	; (21e6c <hif_receive+0x160>)
   21d78:	4798      	blx	r3
		goto ERR1;
   21d7a:	e068      	b.n	21e4e <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   21d7c:	1dbb      	adds	r3, r7, #6
   21d7e:	881a      	ldrh	r2, [r3, #0]
   21d80:	4b3d      	ldr	r3, [pc, #244]	; (21e78 <hif_receive+0x16c>)
   21d82:	68db      	ldr	r3, [r3, #12]
   21d84:	429a      	cmp	r2, r3
   21d86:	d917      	bls.n	21db8 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   21d88:	2317      	movs	r3, #23
   21d8a:	18fb      	adds	r3, r7, r3
   21d8c:	22f4      	movs	r2, #244	; 0xf4
   21d8e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   21d90:	23a0      	movs	r3, #160	; 0xa0
   21d92:	009a      	lsls	r2, r3, #2
   21d94:	4933      	ldr	r1, [pc, #204]	; (21e64 <hif_receive+0x158>)
   21d96:	4b34      	ldr	r3, [pc, #208]	; (21e68 <hif_receive+0x15c>)
   21d98:	0018      	movs	r0, r3
   21d9a:	4b34      	ldr	r3, [pc, #208]	; (21e6c <hif_receive+0x160>)
   21d9c:	4798      	blx	r3
   21d9e:	1dbb      	adds	r3, r7, #6
   21da0:	8819      	ldrh	r1, [r3, #0]
   21da2:	4b35      	ldr	r3, [pc, #212]	; (21e78 <hif_receive+0x16c>)
   21da4:	68da      	ldr	r2, [r3, #12]
   21da6:	4b35      	ldr	r3, [pc, #212]	; (21e7c <hif_receive+0x170>)
   21da8:	0018      	movs	r0, r3
   21daa:	4b30      	ldr	r3, [pc, #192]	; (21e6c <hif_receive+0x160>)
   21dac:	4798      	blx	r3
   21dae:	4b31      	ldr	r3, [pc, #196]	; (21e74 <hif_receive+0x168>)
   21db0:	0018      	movs	r0, r3
   21db2:	4b2e      	ldr	r3, [pc, #184]	; (21e6c <hif_receive+0x160>)
   21db4:	4798      	blx	r3
		goto ERR1;
   21db6:	e04a      	b.n	21e4e <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   21db8:	4b2f      	ldr	r3, [pc, #188]	; (21e78 <hif_receive+0x16c>)
   21dba:	689a      	ldr	r2, [r3, #8]
   21dbc:	68fb      	ldr	r3, [r7, #12]
   21dbe:	429a      	cmp	r2, r3
   21dc0:	d80a      	bhi.n	21dd8 <hif_receive+0xcc>
   21dc2:	1dbb      	adds	r3, r7, #6
   21dc4:	881a      	ldrh	r2, [r3, #0]
   21dc6:	68fb      	ldr	r3, [r7, #12]
   21dc8:	18d2      	adds	r2, r2, r3
   21dca:	4b2b      	ldr	r3, [pc, #172]	; (21e78 <hif_receive+0x16c>)
   21dcc:	6899      	ldr	r1, [r3, #8]
   21dce:	4b2a      	ldr	r3, [pc, #168]	; (21e78 <hif_receive+0x16c>)
   21dd0:	68db      	ldr	r3, [r3, #12]
   21dd2:	18cb      	adds	r3, r1, r3
   21dd4:	429a      	cmp	r2, r3
   21dd6:	d912      	bls.n	21dfe <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   21dd8:	2317      	movs	r3, #23
   21dda:	18fb      	adds	r3, r7, r3
   21ddc:	22f4      	movs	r2, #244	; 0xf4
   21dde:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   21de0:	4a27      	ldr	r2, [pc, #156]	; (21e80 <hif_receive+0x174>)
   21de2:	4920      	ldr	r1, [pc, #128]	; (21e64 <hif_receive+0x158>)
   21de4:	4b20      	ldr	r3, [pc, #128]	; (21e68 <hif_receive+0x15c>)
   21de6:	0018      	movs	r0, r3
   21de8:	4b20      	ldr	r3, [pc, #128]	; (21e6c <hif_receive+0x160>)
   21dea:	4798      	blx	r3
   21dec:	4b25      	ldr	r3, [pc, #148]	; (21e84 <hif_receive+0x178>)
   21dee:	0018      	movs	r0, r3
   21df0:	4b1e      	ldr	r3, [pc, #120]	; (21e6c <hif_receive+0x160>)
   21df2:	4798      	blx	r3
   21df4:	4b1f      	ldr	r3, [pc, #124]	; (21e74 <hif_receive+0x168>)
   21df6:	0018      	movs	r0, r3
   21df8:	4b1c      	ldr	r3, [pc, #112]	; (21e6c <hif_receive+0x160>)
   21dfa:	4798      	blx	r3
		goto ERR1;
   21dfc:	e027      	b.n	21e4e <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   21dfe:	1dbb      	adds	r3, r7, #6
   21e00:	881a      	ldrh	r2, [r3, #0]
   21e02:	2317      	movs	r3, #23
   21e04:	18fc      	adds	r4, r7, r3
   21e06:	68b9      	ldr	r1, [r7, #8]
   21e08:	68fb      	ldr	r3, [r7, #12]
   21e0a:	0018      	movs	r0, r3
   21e0c:	4b1e      	ldr	r3, [pc, #120]	; (21e88 <hif_receive+0x17c>)
   21e0e:	4798      	blx	r3
   21e10:	0003      	movs	r3, r0
   21e12:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21e14:	2317      	movs	r3, #23
   21e16:	18fb      	adds	r3, r7, r3
   21e18:	781b      	ldrb	r3, [r3, #0]
   21e1a:	b25b      	sxtb	r3, r3
   21e1c:	2b00      	cmp	r3, #0
   21e1e:	d115      	bne.n	21e4c <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   21e20:	4b15      	ldr	r3, [pc, #84]	; (21e78 <hif_receive+0x16c>)
   21e22:	689a      	ldr	r2, [r3, #8]
   21e24:	4b14      	ldr	r3, [pc, #80]	; (21e78 <hif_receive+0x16c>)
   21e26:	68db      	ldr	r3, [r3, #12]
   21e28:	18d2      	adds	r2, r2, r3
   21e2a:	1dbb      	adds	r3, r7, #6
   21e2c:	8819      	ldrh	r1, [r3, #0]
   21e2e:	68fb      	ldr	r3, [r7, #12]
   21e30:	18cb      	adds	r3, r1, r3
   21e32:	429a      	cmp	r2, r3
   21e34:	d003      	beq.n	21e3e <hif_receive+0x132>
   21e36:	1d7b      	adds	r3, r7, #5
   21e38:	781b      	ldrb	r3, [r3, #0]
   21e3a:	2b00      	cmp	r3, #0
   21e3c:	d007      	beq.n	21e4e <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   21e3e:	2317      	movs	r3, #23
   21e40:	18fc      	adds	r4, r7, r3
   21e42:	4b07      	ldr	r3, [pc, #28]	; (21e60 <hif_receive+0x154>)
   21e44:	4798      	blx	r3
   21e46:	0003      	movs	r3, r0
   21e48:	7023      	strb	r3, [r4, #0]
   21e4a:	e000      	b.n	21e4e <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   21e4c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21e4e:	2317      	movs	r3, #23
   21e50:	18fb      	adds	r3, r7, r3
   21e52:	781b      	ldrb	r3, [r3, #0]
   21e54:	b25b      	sxtb	r3, r3
}
   21e56:	0018      	movs	r0, r3
   21e58:	46bd      	mov	sp, r7
   21e5a:	b007      	add	sp, #28
   21e5c:	bd90      	pop	{r4, r7, pc}
   21e5e:	46c0      	nop			; (mov r8, r8)
   21e60:	00021229 	.word	0x00021229
   21e64:	00038f18 	.word	0x00038f18
   21e68:	00038bf0 	.word	0x00038bf0
   21e6c:	0001e3f9 	.word	0x0001e3f9
   21e70:	00038e1c 	.word	0x00038e1c
   21e74:	00038bec 	.word	0x00038bec
   21e78:	20005ad4 	.word	0x20005ad4
   21e7c:	00038e3c 	.word	0x00038e3c
   21e80:	00000286 	.word	0x00000286
   21e84:	00038e84 	.word	0x00038e84
   21e88:	00023295 	.word	0x00023295

00021e8c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   21e8c:	b580      	push	{r7, lr}
   21e8e:	b084      	sub	sp, #16
   21e90:	af00      	add	r7, sp, #0
   21e92:	0002      	movs	r2, r0
   21e94:	6039      	str	r1, [r7, #0]
   21e96:	1dfb      	adds	r3, r7, #7
   21e98:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21e9a:	230f      	movs	r3, #15
   21e9c:	18fb      	adds	r3, r7, r3
   21e9e:	2200      	movs	r2, #0
   21ea0:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   21ea2:	1dfb      	adds	r3, r7, #7
   21ea4:	781b      	ldrb	r3, [r3, #0]
   21ea6:	2b07      	cmp	r3, #7
   21ea8:	d820      	bhi.n	21eec <hif_register_cb+0x60>
   21eaa:	009a      	lsls	r2, r3, #2
   21eac:	4b1e      	ldr	r3, [pc, #120]	; (21f28 <hif_register_cb+0x9c>)
   21eae:	18d3      	adds	r3, r2, r3
   21eb0:	681b      	ldr	r3, [r3, #0]
   21eb2:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   21eb4:	4b1d      	ldr	r3, [pc, #116]	; (21f2c <hif_register_cb+0xa0>)
   21eb6:	683a      	ldr	r2, [r7, #0]
   21eb8:	615a      	str	r2, [r3, #20]
			break;
   21eba:	e02d      	b.n	21f18 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   21ebc:	4b1b      	ldr	r3, [pc, #108]	; (21f2c <hif_register_cb+0xa0>)
   21ebe:	683a      	ldr	r2, [r7, #0]
   21ec0:	611a      	str	r2, [r3, #16]
			break;
   21ec2:	e029      	b.n	21f18 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   21ec4:	4b19      	ldr	r3, [pc, #100]	; (21f2c <hif_register_cb+0xa0>)
   21ec6:	683a      	ldr	r2, [r7, #0]
   21ec8:	619a      	str	r2, [r3, #24]
			break;
   21eca:	e025      	b.n	21f18 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   21ecc:	4b17      	ldr	r3, [pc, #92]	; (21f2c <hif_register_cb+0xa0>)
   21ece:	683a      	ldr	r2, [r7, #0]
   21ed0:	621a      	str	r2, [r3, #32]
			break;
   21ed2:	e021      	b.n	21f18 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   21ed4:	4b15      	ldr	r3, [pc, #84]	; (21f2c <hif_register_cb+0xa0>)
   21ed6:	683a      	ldr	r2, [r7, #0]
   21ed8:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   21eda:	e01d      	b.n	21f18 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   21edc:	4b13      	ldr	r3, [pc, #76]	; (21f2c <hif_register_cb+0xa0>)
   21ede:	683a      	ldr	r2, [r7, #0]
   21ee0:	61da      	str	r2, [r3, #28]
			break;
   21ee2:	e019      	b.n	21f18 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   21ee4:	4b11      	ldr	r3, [pc, #68]	; (21f2c <hif_register_cb+0xa0>)
   21ee6:	683a      	ldr	r2, [r7, #0]
   21ee8:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   21eea:	e015      	b.n	21f18 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   21eec:	4a10      	ldr	r2, [pc, #64]	; (21f30 <hif_register_cb+0xa4>)
   21eee:	4911      	ldr	r1, [pc, #68]	; (21f34 <hif_register_cb+0xa8>)
   21ef0:	4b11      	ldr	r3, [pc, #68]	; (21f38 <hif_register_cb+0xac>)
   21ef2:	0018      	movs	r0, r3
   21ef4:	4b11      	ldr	r3, [pc, #68]	; (21f3c <hif_register_cb+0xb0>)
   21ef6:	4798      	blx	r3
   21ef8:	1dfb      	adds	r3, r7, #7
   21efa:	781a      	ldrb	r2, [r3, #0]
   21efc:	4b10      	ldr	r3, [pc, #64]	; (21f40 <hif_register_cb+0xb4>)
   21efe:	0011      	movs	r1, r2
   21f00:	0018      	movs	r0, r3
   21f02:	4b0e      	ldr	r3, [pc, #56]	; (21f3c <hif_register_cb+0xb0>)
   21f04:	4798      	blx	r3
   21f06:	4b0f      	ldr	r3, [pc, #60]	; (21f44 <hif_register_cb+0xb8>)
   21f08:	0018      	movs	r0, r3
   21f0a:	4b0c      	ldr	r3, [pc, #48]	; (21f3c <hif_register_cb+0xb0>)
   21f0c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21f0e:	230f      	movs	r3, #15
   21f10:	18fb      	adds	r3, r7, r3
   21f12:	22f4      	movs	r2, #244	; 0xf4
   21f14:	701a      	strb	r2, [r3, #0]
			break;
   21f16:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   21f18:	230f      	movs	r3, #15
   21f1a:	18fb      	adds	r3, r7, r3
   21f1c:	781b      	ldrb	r3, [r3, #0]
   21f1e:	b25b      	sxtb	r3, r3
}
   21f20:	0018      	movs	r0, r3
   21f22:	46bd      	mov	sp, r7
   21f24:	b004      	add	sp, #16
   21f26:	bd80      	pop	{r7, pc}
   21f28:	00038ed4 	.word	0x00038ed4
   21f2c:	20005ad4 	.word	0x20005ad4
   21f30:	000002be 	.word	0x000002be
   21f34:	00038f24 	.word	0x00038f24
   21f38:	00038bf0 	.word	0x00038bf0
   21f3c:	0001e3f9 	.word	0x0001e3f9
   21f40:	00038ec8 	.word	0x00038ec8
   21f44:	00038bec 	.word	0x00038bec

00021f48 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   21f48:	b590      	push	{r4, r7, lr}
   21f4a:	b0af      	sub	sp, #188	; 0xbc
   21f4c:	af02      	add	r7, sp, #8
   21f4e:	603a      	str	r2, [r7, #0]
   21f50:	1dfb      	adds	r3, r7, #7
   21f52:	1c02      	adds	r2, r0, #0
   21f54:	701a      	strb	r2, [r3, #0]
   21f56:	1d3b      	adds	r3, r7, #4
   21f58:	1c0a      	adds	r2, r1, #0
   21f5a:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   21f5c:	1dfb      	adds	r3, r7, #7
   21f5e:	781b      	ldrb	r3, [r3, #0]
   21f60:	2b2c      	cmp	r3, #44	; 0x2c
   21f62:	d116      	bne.n	21f92 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   21f64:	23a4      	movs	r3, #164	; 0xa4
   21f66:	18f9      	adds	r1, r7, r3
   21f68:	6838      	ldr	r0, [r7, #0]
   21f6a:	2300      	movs	r3, #0
   21f6c:	2204      	movs	r2, #4
   21f6e:	4cca      	ldr	r4, [pc, #808]	; (22298 <m2m_wifi_cb+0x350>)
   21f70:	47a0      	blx	r4
   21f72:	1e03      	subs	r3, r0, #0
   21f74:	d000      	beq.n	21f78 <m2m_wifi_cb+0x30>
   21f76:	e1b4      	b.n	222e2 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   21f78:	4bc8      	ldr	r3, [pc, #800]	; (2229c <m2m_wifi_cb+0x354>)
   21f7a:	681b      	ldr	r3, [r3, #0]
   21f7c:	2b00      	cmp	r3, #0
   21f7e:	d100      	bne.n	21f82 <m2m_wifi_cb+0x3a>
   21f80:	e1af      	b.n	222e2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   21f82:	4bc6      	ldr	r3, [pc, #792]	; (2229c <m2m_wifi_cb+0x354>)
   21f84:	681b      	ldr	r3, [r3, #0]
   21f86:	22a4      	movs	r2, #164	; 0xa4
   21f88:	18ba      	adds	r2, r7, r2
   21f8a:	0011      	movs	r1, r2
   21f8c:	202c      	movs	r0, #44	; 0x2c
   21f8e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   21f90:	e1a7      	b.n	222e2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   21f92:	1dfb      	adds	r3, r7, #7
   21f94:	781b      	ldrb	r3, [r3, #0]
   21f96:	2b1b      	cmp	r3, #27
   21f98:	d116      	bne.n	21fc8 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   21f9a:	239c      	movs	r3, #156	; 0x9c
   21f9c:	18f9      	adds	r1, r7, r3
   21f9e:	6838      	ldr	r0, [r7, #0]
   21fa0:	2300      	movs	r3, #0
   21fa2:	2208      	movs	r2, #8
   21fa4:	4cbc      	ldr	r4, [pc, #752]	; (22298 <m2m_wifi_cb+0x350>)
   21fa6:	47a0      	blx	r4
   21fa8:	1e03      	subs	r3, r0, #0
   21faa:	d000      	beq.n	21fae <m2m_wifi_cb+0x66>
   21fac:	e199      	b.n	222e2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21fae:	4bbb      	ldr	r3, [pc, #748]	; (2229c <m2m_wifi_cb+0x354>)
   21fb0:	681b      	ldr	r3, [r3, #0]
   21fb2:	2b00      	cmp	r3, #0
   21fb4:	d100      	bne.n	21fb8 <m2m_wifi_cb+0x70>
   21fb6:	e194      	b.n	222e2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   21fb8:	4bb8      	ldr	r3, [pc, #736]	; (2229c <m2m_wifi_cb+0x354>)
   21fba:	681b      	ldr	r3, [r3, #0]
   21fbc:	229c      	movs	r2, #156	; 0x9c
   21fbe:	18ba      	adds	r2, r7, r2
   21fc0:	0011      	movs	r1, r2
   21fc2:	201b      	movs	r0, #27
   21fc4:	4798      	blx	r3
}
   21fc6:	e18c      	b.n	222e2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   21fc8:	1dfb      	adds	r3, r7, #7
   21fca:	781b      	ldrb	r3, [r3, #0]
   21fcc:	2b06      	cmp	r3, #6
   21fce:	d116      	bne.n	21ffe <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   21fd0:	230c      	movs	r3, #12
   21fd2:	18f9      	adds	r1, r7, r3
   21fd4:	6838      	ldr	r0, [r7, #0]
   21fd6:	2301      	movs	r3, #1
   21fd8:	2230      	movs	r2, #48	; 0x30
   21fda:	4caf      	ldr	r4, [pc, #700]	; (22298 <m2m_wifi_cb+0x350>)
   21fdc:	47a0      	blx	r4
   21fde:	1e03      	subs	r3, r0, #0
   21fe0:	d000      	beq.n	21fe4 <m2m_wifi_cb+0x9c>
   21fe2:	e17e      	b.n	222e2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21fe4:	4bad      	ldr	r3, [pc, #692]	; (2229c <m2m_wifi_cb+0x354>)
   21fe6:	681b      	ldr	r3, [r3, #0]
   21fe8:	2b00      	cmp	r3, #0
   21fea:	d100      	bne.n	21fee <m2m_wifi_cb+0xa6>
   21fec:	e179      	b.n	222e2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   21fee:	4bab      	ldr	r3, [pc, #684]	; (2229c <m2m_wifi_cb+0x354>)
   21ff0:	681b      	ldr	r3, [r3, #0]
   21ff2:	220c      	movs	r2, #12
   21ff4:	18ba      	adds	r2, r7, r2
   21ff6:	0011      	movs	r1, r2
   21ff8:	2006      	movs	r0, #6
   21ffa:	4798      	blx	r3
}
   21ffc:	e171      	b.n	222e2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   21ffe:	1dfb      	adds	r3, r7, #7
   22000:	781b      	ldrb	r3, [r3, #0]
   22002:	2b0e      	cmp	r3, #14
   22004:	d100      	bne.n	22008 <m2m_wifi_cb+0xc0>
   22006:	e16c      	b.n	222e2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   22008:	1dfb      	adds	r3, r7, #7
   2200a:	781b      	ldrb	r3, [r3, #0]
   2200c:	2b32      	cmp	r3, #50	; 0x32
   2200e:	d116      	bne.n	2203e <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   22010:	2384      	movs	r3, #132	; 0x84
   22012:	18f9      	adds	r1, r7, r3
   22014:	6838      	ldr	r0, [r7, #0]
   22016:	2300      	movs	r3, #0
   22018:	2218      	movs	r2, #24
   2201a:	4c9f      	ldr	r4, [pc, #636]	; (22298 <m2m_wifi_cb+0x350>)
   2201c:	47a0      	blx	r4
   2201e:	1e03      	subs	r3, r0, #0
   22020:	d000      	beq.n	22024 <m2m_wifi_cb+0xdc>
   22022:	e15e      	b.n	222e2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22024:	4b9d      	ldr	r3, [pc, #628]	; (2229c <m2m_wifi_cb+0x354>)
   22026:	681b      	ldr	r3, [r3, #0]
   22028:	2b00      	cmp	r3, #0
   2202a:	d100      	bne.n	2202e <m2m_wifi_cb+0xe6>
   2202c:	e159      	b.n	222e2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   2202e:	4b9b      	ldr	r3, [pc, #620]	; (2229c <m2m_wifi_cb+0x354>)
   22030:	681b      	ldr	r3, [r3, #0]
   22032:	2284      	movs	r2, #132	; 0x84
   22034:	18ba      	adds	r2, r7, r2
   22036:	0011      	movs	r1, r2
   22038:	2032      	movs	r0, #50	; 0x32
   2203a:	4798      	blx	r3
}
   2203c:	e151      	b.n	222e2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   2203e:	1dfb      	adds	r3, r7, #7
   22040:	781b      	ldrb	r3, [r3, #0]
   22042:	2b2f      	cmp	r3, #47	; 0x2f
   22044:	d11d      	bne.n	22082 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   22046:	230c      	movs	r3, #12
   22048:	18fb      	adds	r3, r7, r3
   2204a:	2264      	movs	r2, #100	; 0x64
   2204c:	2100      	movs	r1, #0
   2204e:	0018      	movs	r0, r3
   22050:	4b93      	ldr	r3, [pc, #588]	; (222a0 <m2m_wifi_cb+0x358>)
   22052:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   22054:	230c      	movs	r3, #12
   22056:	18f9      	adds	r1, r7, r3
   22058:	6838      	ldr	r0, [r7, #0]
   2205a:	2300      	movs	r3, #0
   2205c:	2264      	movs	r2, #100	; 0x64
   2205e:	4c8e      	ldr	r4, [pc, #568]	; (22298 <m2m_wifi_cb+0x350>)
   22060:	47a0      	blx	r4
   22062:	1e03      	subs	r3, r0, #0
   22064:	d000      	beq.n	22068 <m2m_wifi_cb+0x120>
   22066:	e13c      	b.n	222e2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22068:	4b8c      	ldr	r3, [pc, #560]	; (2229c <m2m_wifi_cb+0x354>)
   2206a:	681b      	ldr	r3, [r3, #0]
   2206c:	2b00      	cmp	r3, #0
   2206e:	d100      	bne.n	22072 <m2m_wifi_cb+0x12a>
   22070:	e137      	b.n	222e2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   22072:	4b8a      	ldr	r3, [pc, #552]	; (2229c <m2m_wifi_cb+0x354>)
   22074:	681b      	ldr	r3, [r3, #0]
   22076:	220c      	movs	r2, #12
   22078:	18ba      	adds	r2, r7, r2
   2207a:	0011      	movs	r1, r2
   2207c:	202f      	movs	r0, #47	; 0x2f
   2207e:	4798      	blx	r3
}
   22080:	e12f      	b.n	222e2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   22082:	1dfb      	adds	r3, r7, #7
   22084:	781b      	ldrb	r3, [r3, #0]
   22086:	2b34      	cmp	r3, #52	; 0x34
   22088:	d137      	bne.n	220fa <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   2208a:	2380      	movs	r3, #128	; 0x80
   2208c:	18f9      	adds	r1, r7, r3
   2208e:	6838      	ldr	r0, [r7, #0]
   22090:	2300      	movs	r3, #0
   22092:	2204      	movs	r2, #4
   22094:	4c80      	ldr	r4, [pc, #512]	; (22298 <m2m_wifi_cb+0x350>)
   22096:	47a0      	blx	r4
   22098:	1e03      	subs	r3, r0, #0
   2209a:	d000      	beq.n	2209e <m2m_wifi_cb+0x156>
   2209c:	e121      	b.n	222e2 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   2209e:	4b81      	ldr	r3, [pc, #516]	; (222a4 <m2m_wifi_cb+0x35c>)
   220a0:	0018      	movs	r0, r3
   220a2:	4b81      	ldr	r3, [pc, #516]	; (222a8 <m2m_wifi_cb+0x360>)
   220a4:	4798      	blx	r3
   220a6:	2380      	movs	r3, #128	; 0x80
   220a8:	18fb      	adds	r3, r7, r3
   220aa:	681b      	ldr	r3, [r3, #0]
   220ac:	0e1b      	lsrs	r3, r3, #24
   220ae:	b2db      	uxtb	r3, r3
   220b0:	0019      	movs	r1, r3
   220b2:	2380      	movs	r3, #128	; 0x80
   220b4:	18fb      	adds	r3, r7, r3
   220b6:	681b      	ldr	r3, [r3, #0]
   220b8:	0c1b      	lsrs	r3, r3, #16
   220ba:	b2db      	uxtb	r3, r3
   220bc:	001a      	movs	r2, r3
   220be:	2380      	movs	r3, #128	; 0x80
   220c0:	18fb      	adds	r3, r7, r3
   220c2:	681b      	ldr	r3, [r3, #0]
   220c4:	0a1b      	lsrs	r3, r3, #8
   220c6:	b2db      	uxtb	r3, r3
   220c8:	001c      	movs	r4, r3
   220ca:	2380      	movs	r3, #128	; 0x80
   220cc:	18fb      	adds	r3, r7, r3
   220ce:	681b      	ldr	r3, [r3, #0]
   220d0:	b2db      	uxtb	r3, r3
   220d2:	4876      	ldr	r0, [pc, #472]	; (222ac <m2m_wifi_cb+0x364>)
   220d4:	9300      	str	r3, [sp, #0]
   220d6:	0023      	movs	r3, r4
   220d8:	4c73      	ldr	r4, [pc, #460]	; (222a8 <m2m_wifi_cb+0x360>)
   220da:	47a0      	blx	r4
   220dc:	4b74      	ldr	r3, [pc, #464]	; (222b0 <m2m_wifi_cb+0x368>)
   220de:	0018      	movs	r0, r3
   220e0:	4b71      	ldr	r3, [pc, #452]	; (222a8 <m2m_wifi_cb+0x360>)
   220e2:	4798      	blx	r3
			if (gpfAppWifiCb)
   220e4:	4b6d      	ldr	r3, [pc, #436]	; (2229c <m2m_wifi_cb+0x354>)
   220e6:	681b      	ldr	r3, [r3, #0]
   220e8:	2b00      	cmp	r3, #0
   220ea:	d100      	bne.n	220ee <m2m_wifi_cb+0x1a6>
   220ec:	e0f9      	b.n	222e2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   220ee:	4b6b      	ldr	r3, [pc, #428]	; (2229c <m2m_wifi_cb+0x354>)
   220f0:	681b      	ldr	r3, [r3, #0]
   220f2:	2100      	movs	r1, #0
   220f4:	2034      	movs	r0, #52	; 0x34
   220f6:	4798      	blx	r3
}
   220f8:	e0f3      	b.n	222e2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   220fa:	1dfb      	adds	r3, r7, #7
   220fc:	781b      	ldrb	r3, [r3, #0]
   220fe:	2b11      	cmp	r3, #17
   22100:	d11e      	bne.n	22140 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   22102:	4b6c      	ldr	r3, [pc, #432]	; (222b4 <m2m_wifi_cb+0x36c>)
   22104:	2200      	movs	r2, #0
   22106:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   22108:	237c      	movs	r3, #124	; 0x7c
   2210a:	18f9      	adds	r1, r7, r3
   2210c:	6838      	ldr	r0, [r7, #0]
   2210e:	2300      	movs	r3, #0
   22110:	2204      	movs	r2, #4
   22112:	4c61      	ldr	r4, [pc, #388]	; (22298 <m2m_wifi_cb+0x350>)
   22114:	47a0      	blx	r4
   22116:	1e03      	subs	r3, r0, #0
   22118:	d000      	beq.n	2211c <m2m_wifi_cb+0x1d4>
   2211a:	e0e2      	b.n	222e2 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   2211c:	237c      	movs	r3, #124	; 0x7c
   2211e:	18fb      	adds	r3, r7, r3
   22120:	781a      	ldrb	r2, [r3, #0]
   22122:	4b65      	ldr	r3, [pc, #404]	; (222b8 <m2m_wifi_cb+0x370>)
   22124:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   22126:	4b5d      	ldr	r3, [pc, #372]	; (2229c <m2m_wifi_cb+0x354>)
   22128:	681b      	ldr	r3, [r3, #0]
   2212a:	2b00      	cmp	r3, #0
   2212c:	d100      	bne.n	22130 <m2m_wifi_cb+0x1e8>
   2212e:	e0d8      	b.n	222e2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   22130:	4b5a      	ldr	r3, [pc, #360]	; (2229c <m2m_wifi_cb+0x354>)
   22132:	681b      	ldr	r3, [r3, #0]
   22134:	227c      	movs	r2, #124	; 0x7c
   22136:	18ba      	adds	r2, r7, r2
   22138:	0011      	movs	r1, r2
   2213a:	2011      	movs	r0, #17
   2213c:	4798      	blx	r3
}
   2213e:	e0d0      	b.n	222e2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   22140:	1dfb      	adds	r3, r7, #7
   22142:	781b      	ldrb	r3, [r3, #0]
   22144:	2b13      	cmp	r3, #19
   22146:	d116      	bne.n	22176 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   22148:	230c      	movs	r3, #12
   2214a:	18f9      	adds	r1, r7, r3
   2214c:	6838      	ldr	r0, [r7, #0]
   2214e:	2300      	movs	r3, #0
   22150:	222c      	movs	r2, #44	; 0x2c
   22152:	4c51      	ldr	r4, [pc, #324]	; (22298 <m2m_wifi_cb+0x350>)
   22154:	47a0      	blx	r4
   22156:	1e03      	subs	r3, r0, #0
   22158:	d000      	beq.n	2215c <m2m_wifi_cb+0x214>
   2215a:	e0c2      	b.n	222e2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2215c:	4b4f      	ldr	r3, [pc, #316]	; (2229c <m2m_wifi_cb+0x354>)
   2215e:	681b      	ldr	r3, [r3, #0]
   22160:	2b00      	cmp	r3, #0
   22162:	d100      	bne.n	22166 <m2m_wifi_cb+0x21e>
   22164:	e0bd      	b.n	222e2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   22166:	4b4d      	ldr	r3, [pc, #308]	; (2229c <m2m_wifi_cb+0x354>)
   22168:	681b      	ldr	r3, [r3, #0]
   2216a:	220c      	movs	r2, #12
   2216c:	18ba      	adds	r2, r7, r2
   2216e:	0011      	movs	r1, r2
   22170:	2013      	movs	r0, #19
   22172:	4798      	blx	r3
}
   22174:	e0b5      	b.n	222e2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   22176:	1dfb      	adds	r3, r7, #7
   22178:	781b      	ldrb	r3, [r3, #0]
   2217a:	2b04      	cmp	r3, #4
   2217c:	d116      	bne.n	221ac <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   2217e:	23a8      	movs	r3, #168	; 0xa8
   22180:	18f9      	adds	r1, r7, r3
   22182:	6838      	ldr	r0, [r7, #0]
   22184:	2300      	movs	r3, #0
   22186:	2204      	movs	r2, #4
   22188:	4c43      	ldr	r4, [pc, #268]	; (22298 <m2m_wifi_cb+0x350>)
   2218a:	47a0      	blx	r4
   2218c:	1e03      	subs	r3, r0, #0
   2218e:	d000      	beq.n	22192 <m2m_wifi_cb+0x24a>
   22190:	e0a7      	b.n	222e2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22192:	4b42      	ldr	r3, [pc, #264]	; (2229c <m2m_wifi_cb+0x354>)
   22194:	681b      	ldr	r3, [r3, #0]
   22196:	2b00      	cmp	r3, #0
   22198:	d100      	bne.n	2219c <m2m_wifi_cb+0x254>
   2219a:	e0a2      	b.n	222e2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   2219c:	4b3f      	ldr	r3, [pc, #252]	; (2229c <m2m_wifi_cb+0x354>)
   2219e:	681b      	ldr	r3, [r3, #0]
   221a0:	22a8      	movs	r2, #168	; 0xa8
   221a2:	18ba      	adds	r2, r7, r2
   221a4:	0011      	movs	r1, r2
   221a6:	2004      	movs	r0, #4
   221a8:	4798      	blx	r3
}
   221aa:	e09a      	b.n	222e2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   221ac:	1dfb      	adds	r3, r7, #7
   221ae:	781b      	ldrb	r3, [r3, #0]
   221b0:	2b65      	cmp	r3, #101	; 0x65
   221b2:	d116      	bne.n	221e2 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   221b4:	23a8      	movs	r3, #168	; 0xa8
   221b6:	18f9      	adds	r1, r7, r3
   221b8:	6838      	ldr	r0, [r7, #0]
   221ba:	2300      	movs	r3, #0
   221bc:	2204      	movs	r2, #4
   221be:	4c36      	ldr	r4, [pc, #216]	; (22298 <m2m_wifi_cb+0x350>)
   221c0:	47a0      	blx	r4
   221c2:	1e03      	subs	r3, r0, #0
   221c4:	d000      	beq.n	221c8 <m2m_wifi_cb+0x280>
   221c6:	e08c      	b.n	222e2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   221c8:	4b34      	ldr	r3, [pc, #208]	; (2229c <m2m_wifi_cb+0x354>)
   221ca:	681b      	ldr	r3, [r3, #0]
   221cc:	2b00      	cmp	r3, #0
   221ce:	d100      	bne.n	221d2 <m2m_wifi_cb+0x28a>
   221d0:	e087      	b.n	222e2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   221d2:	4b32      	ldr	r3, [pc, #200]	; (2229c <m2m_wifi_cb+0x354>)
   221d4:	681b      	ldr	r3, [r3, #0]
   221d6:	22a8      	movs	r2, #168	; 0xa8
   221d8:	18ba      	adds	r2, r7, r2
   221da:	0011      	movs	r1, r2
   221dc:	2065      	movs	r0, #101	; 0x65
   221de:	4798      	blx	r3
}
   221e0:	e07f      	b.n	222e2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   221e2:	1dfb      	adds	r3, r7, #7
   221e4:	781b      	ldrb	r3, [r3, #0]
   221e6:	2b09      	cmp	r3, #9
   221e8:	d116      	bne.n	22218 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   221ea:	230c      	movs	r3, #12
   221ec:	18f9      	adds	r1, r7, r3
   221ee:	6838      	ldr	r0, [r7, #0]
   221f0:	2301      	movs	r3, #1
   221f2:	2264      	movs	r2, #100	; 0x64
   221f4:	4c28      	ldr	r4, [pc, #160]	; (22298 <m2m_wifi_cb+0x350>)
   221f6:	47a0      	blx	r4
   221f8:	1e03      	subs	r3, r0, #0
   221fa:	d000      	beq.n	221fe <m2m_wifi_cb+0x2b6>
   221fc:	e071      	b.n	222e2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   221fe:	4b27      	ldr	r3, [pc, #156]	; (2229c <m2m_wifi_cb+0x354>)
   22200:	681b      	ldr	r3, [r3, #0]
   22202:	2b00      	cmp	r3, #0
   22204:	d100      	bne.n	22208 <m2m_wifi_cb+0x2c0>
   22206:	e06c      	b.n	222e2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   22208:	4b24      	ldr	r3, [pc, #144]	; (2229c <m2m_wifi_cb+0x354>)
   2220a:	681b      	ldr	r3, [r3, #0]
   2220c:	220c      	movs	r2, #12
   2220e:	18ba      	adds	r2, r7, r2
   22210:	0011      	movs	r1, r2
   22212:	2009      	movs	r0, #9
   22214:	4798      	blx	r3
}
   22216:	e064      	b.n	222e2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   22218:	1dfb      	adds	r3, r7, #7
   2221a:	781b      	ldrb	r3, [r3, #0]
   2221c:	2b2a      	cmp	r3, #42	; 0x2a
   2221e:	d114      	bne.n	2224a <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   22220:	2378      	movs	r3, #120	; 0x78
   22222:	18f9      	adds	r1, r7, r3
   22224:	6838      	ldr	r0, [r7, #0]
   22226:	2301      	movs	r3, #1
   22228:	2204      	movs	r2, #4
   2222a:	4c1b      	ldr	r4, [pc, #108]	; (22298 <m2m_wifi_cb+0x350>)
   2222c:	47a0      	blx	r4
   2222e:	1e03      	subs	r3, r0, #0
   22230:	d157      	bne.n	222e2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22232:	4b1a      	ldr	r3, [pc, #104]	; (2229c <m2m_wifi_cb+0x354>)
   22234:	681b      	ldr	r3, [r3, #0]
   22236:	2b00      	cmp	r3, #0
   22238:	d053      	beq.n	222e2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   2223a:	4b18      	ldr	r3, [pc, #96]	; (2229c <m2m_wifi_cb+0x354>)
   2223c:	681b      	ldr	r3, [r3, #0]
   2223e:	2278      	movs	r2, #120	; 0x78
   22240:	18ba      	adds	r2, r7, r2
   22242:	0011      	movs	r1, r2
   22244:	202a      	movs	r0, #42	; 0x2a
   22246:	4798      	blx	r3
}
   22248:	e04b      	b.n	222e2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   2224a:	1dfb      	adds	r3, r7, #7
   2224c:	781b      	ldrb	r3, [r3, #0]
   2224e:	2b20      	cmp	r3, #32
   22250:	d134      	bne.n	222bc <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   22252:	2370      	movs	r3, #112	; 0x70
   22254:	18f9      	adds	r1, r7, r3
   22256:	6838      	ldr	r0, [r7, #0]
   22258:	2300      	movs	r3, #0
   2225a:	2208      	movs	r2, #8
   2225c:	4c0e      	ldr	r4, [pc, #56]	; (22298 <m2m_wifi_cb+0x350>)
   2225e:	47a0      	blx	r4
   22260:	1e03      	subs	r3, r0, #0
   22262:	d13e      	bne.n	222e2 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   22264:	683b      	ldr	r3, [r7, #0]
   22266:	3308      	adds	r3, #8
   22268:	0018      	movs	r0, r3
   2226a:	2370      	movs	r3, #112	; 0x70
   2226c:	18fb      	adds	r3, r7, r3
   2226e:	6819      	ldr	r1, [r3, #0]
   22270:	2370      	movs	r3, #112	; 0x70
   22272:	18fb      	adds	r3, r7, r3
   22274:	889a      	ldrh	r2, [r3, #4]
   22276:	2301      	movs	r3, #1
   22278:	4c07      	ldr	r4, [pc, #28]	; (22298 <m2m_wifi_cb+0x350>)
   2227a:	47a0      	blx	r4
   2227c:	1e03      	subs	r3, r0, #0
   2227e:	d130      	bne.n	222e2 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   22280:	4b06      	ldr	r3, [pc, #24]	; (2229c <m2m_wifi_cb+0x354>)
   22282:	681b      	ldr	r3, [r3, #0]
   22284:	2b00      	cmp	r3, #0
   22286:	d02c      	beq.n	222e2 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   22288:	4b04      	ldr	r3, [pc, #16]	; (2229c <m2m_wifi_cb+0x354>)
   2228a:	681b      	ldr	r3, [r3, #0]
   2228c:	2270      	movs	r2, #112	; 0x70
   2228e:	18ba      	adds	r2, r7, r2
   22290:	0011      	movs	r1, r2
   22292:	2020      	movs	r0, #32
   22294:	4798      	blx	r3
}
   22296:	e024      	b.n	222e2 <m2m_wifi_cb+0x39a>
   22298:	00021d0d 	.word	0x00021d0d
   2229c:	200042a8 	.word	0x200042a8
   222a0:	00021191 	.word	0x00021191
   222a4:	00038f34 	.word	0x00038f34
   222a8:	0001e3f9 	.word	0x0001e3f9
   222ac:	00038f40 	.word	0x00038f40
   222b0:	00038f60 	.word	0x00038f60
   222b4:	200042a5 	.word	0x200042a5
   222b8:	200042a4 	.word	0x200042a4
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   222bc:	2324      	movs	r3, #36	; 0x24
   222be:	33ff      	adds	r3, #255	; 0xff
   222c0:	001a      	movs	r2, r3
   222c2:	490a      	ldr	r1, [pc, #40]	; (222ec <m2m_wifi_cb+0x3a4>)
   222c4:	4b0a      	ldr	r3, [pc, #40]	; (222f0 <m2m_wifi_cb+0x3a8>)
   222c6:	0018      	movs	r0, r3
   222c8:	4b0a      	ldr	r3, [pc, #40]	; (222f4 <m2m_wifi_cb+0x3ac>)
   222ca:	4798      	blx	r3
   222cc:	1dfb      	adds	r3, r7, #7
   222ce:	781a      	ldrb	r2, [r3, #0]
   222d0:	4b09      	ldr	r3, [pc, #36]	; (222f8 <m2m_wifi_cb+0x3b0>)
   222d2:	0011      	movs	r1, r2
   222d4:	0018      	movs	r0, r3
   222d6:	4b07      	ldr	r3, [pc, #28]	; (222f4 <m2m_wifi_cb+0x3ac>)
   222d8:	4798      	blx	r3
   222da:	4b08      	ldr	r3, [pc, #32]	; (222fc <m2m_wifi_cb+0x3b4>)
   222dc:	0018      	movs	r0, r3
   222de:	4b05      	ldr	r3, [pc, #20]	; (222f4 <m2m_wifi_cb+0x3ac>)
   222e0:	4798      	blx	r3
}
   222e2:	46c0      	nop			; (mov r8, r8)
   222e4:	46bd      	mov	sp, r7
   222e6:	b02d      	add	sp, #180	; 0xb4
   222e8:	bd90      	pop	{r4, r7, pc}
   222ea:	46c0      	nop			; (mov r8, r8)
   222ec:	00039300 	.word	0x00039300
   222f0:	00038f64 	.word	0x00038f64
   222f4:	0001e3f9 	.word	0x0001e3f9
   222f8:	00038f78 	.word	0x00038f78
   222fc:	00038f60 	.word	0x00038f60

00022300 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   22300:	b590      	push	{r4, r7, lr}
   22302:	b091      	sub	sp, #68	; 0x44
   22304:	af02      	add	r7, sp, #8
   22306:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   22308:	2337      	movs	r3, #55	; 0x37
   2230a:	18fb      	adds	r3, r7, r3
   2230c:	2200      	movs	r2, #0
   2230e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   22310:	230b      	movs	r3, #11
   22312:	18fb      	adds	r3, r7, r3
   22314:	2201      	movs	r2, #1
   22316:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   22318:	687b      	ldr	r3, [r7, #4]
   2231a:	2b00      	cmp	r3, #0
   2231c:	d104      	bne.n	22328 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   2231e:	2337      	movs	r3, #55	; 0x37
   22320:	18fb      	adds	r3, r7, r3
   22322:	22f4      	movs	r2, #244	; 0xf4
   22324:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   22326:	e0b3      	b.n	22490 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   22328:	687b      	ldr	r3, [r7, #4]
   2232a:	681a      	ldr	r2, [r3, #0]
   2232c:	4b5c      	ldr	r3, [pc, #368]	; (224a0 <m2m_wifi_init+0x1a0>)
   2232e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   22330:	4b5c      	ldr	r3, [pc, #368]	; (224a4 <m2m_wifi_init+0x1a4>)
   22332:	2200      	movs	r2, #0
   22334:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   22336:	2337      	movs	r3, #55	; 0x37
   22338:	18fc      	adds	r4, r7, r3
   2233a:	230b      	movs	r3, #11
   2233c:	18fb      	adds	r3, r7, r3
   2233e:	0018      	movs	r0, r3
   22340:	4b59      	ldr	r3, [pc, #356]	; (224a8 <m2m_wifi_init+0x1a8>)
   22342:	4798      	blx	r3
   22344:	0003      	movs	r3, r0
   22346:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22348:	2337      	movs	r3, #55	; 0x37
   2234a:	18fb      	adds	r3, r7, r3
   2234c:	781b      	ldrb	r3, [r3, #0]
   2234e:	b25b      	sxtb	r3, r3
   22350:	2b00      	cmp	r3, #0
   22352:	d000      	beq.n	22356 <m2m_wifi_init+0x56>
   22354:	e099      	b.n	2248a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   22356:	2337      	movs	r3, #55	; 0x37
   22358:	18fc      	adds	r4, r7, r3
   2235a:	2000      	movs	r0, #0
   2235c:	4b53      	ldr	r3, [pc, #332]	; (224ac <m2m_wifi_init+0x1ac>)
   2235e:	4798      	blx	r3
   22360:	0003      	movs	r3, r0
   22362:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22364:	2337      	movs	r3, #55	; 0x37
   22366:	18fb      	adds	r3, r7, r3
   22368:	781b      	ldrb	r3, [r3, #0]
   2236a:	b25b      	sxtb	r3, r3
   2236c:	2b00      	cmp	r3, #0
   2236e:	d000      	beq.n	22372 <m2m_wifi_init+0x72>
   22370:	e086      	b.n	22480 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   22372:	4b4f      	ldr	r3, [pc, #316]	; (224b0 <m2m_wifi_init+0x1b0>)
   22374:	0019      	movs	r1, r3
   22376:	2001      	movs	r0, #1
   22378:	4b4e      	ldr	r3, [pc, #312]	; (224b4 <m2m_wifi_init+0x1b4>)
   2237a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   2237c:	2337      	movs	r3, #55	; 0x37
   2237e:	18fc      	adds	r4, r7, r3
   22380:	230c      	movs	r3, #12
   22382:	18fb      	adds	r3, r7, r3
   22384:	0018      	movs	r0, r3
   22386:	4b4c      	ldr	r3, [pc, #304]	; (224b8 <m2m_wifi_init+0x1b8>)
   22388:	4798      	blx	r3
   2238a:	0003      	movs	r3, r0
   2238c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   2238e:	4b4b      	ldr	r3, [pc, #300]	; (224bc <m2m_wifi_init+0x1bc>)
   22390:	0018      	movs	r0, r3
   22392:	4b4b      	ldr	r3, [pc, #300]	; (224c0 <m2m_wifi_init+0x1c0>)
   22394:	4798      	blx	r3
   22396:	230c      	movs	r3, #12
   22398:	18fb      	adds	r3, r7, r3
   2239a:	791b      	ldrb	r3, [r3, #4]
   2239c:	0019      	movs	r1, r3
   2239e:	230c      	movs	r3, #12
   223a0:	18fb      	adds	r3, r7, r3
   223a2:	795b      	ldrb	r3, [r3, #5]
   223a4:	001a      	movs	r2, r3
   223a6:	230c      	movs	r3, #12
   223a8:	18fb      	adds	r3, r7, r3
   223aa:	799b      	ldrb	r3, [r3, #6]
   223ac:	001c      	movs	r4, r3
   223ae:	230c      	movs	r3, #12
   223b0:	18fb      	adds	r3, r7, r3
   223b2:	8c1b      	ldrh	r3, [r3, #32]
   223b4:	4843      	ldr	r0, [pc, #268]	; (224c4 <m2m_wifi_init+0x1c4>)
   223b6:	9300      	str	r3, [sp, #0]
   223b8:	0023      	movs	r3, r4
   223ba:	4c41      	ldr	r4, [pc, #260]	; (224c0 <m2m_wifi_init+0x1c0>)
   223bc:	47a0      	blx	r4
   223be:	4b42      	ldr	r3, [pc, #264]	; (224c8 <m2m_wifi_init+0x1c8>)
   223c0:	0018      	movs	r0, r3
   223c2:	4b3f      	ldr	r3, [pc, #252]	; (224c0 <m2m_wifi_init+0x1c0>)
   223c4:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   223c6:	4b3d      	ldr	r3, [pc, #244]	; (224bc <m2m_wifi_init+0x1bc>)
   223c8:	0018      	movs	r0, r3
   223ca:	4b3d      	ldr	r3, [pc, #244]	; (224c0 <m2m_wifi_init+0x1c0>)
   223cc:	4798      	blx	r3
   223ce:	230c      	movs	r3, #12
   223d0:	18fb      	adds	r3, r7, r3
   223d2:	3316      	adds	r3, #22
   223d4:	001a      	movs	r2, r3
   223d6:	230c      	movs	r3, #12
   223d8:	18fb      	adds	r3, r7, r3
   223da:	330a      	adds	r3, #10
   223dc:	0019      	movs	r1, r3
   223de:	4b3b      	ldr	r3, [pc, #236]	; (224cc <m2m_wifi_init+0x1cc>)
   223e0:	0018      	movs	r0, r3
   223e2:	4b37      	ldr	r3, [pc, #220]	; (224c0 <m2m_wifi_init+0x1c0>)
   223e4:	4798      	blx	r3
   223e6:	4b38      	ldr	r3, [pc, #224]	; (224c8 <m2m_wifi_init+0x1c8>)
   223e8:	0018      	movs	r0, r3
   223ea:	4b35      	ldr	r3, [pc, #212]	; (224c0 <m2m_wifi_init+0x1c0>)
   223ec:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   223ee:	4b33      	ldr	r3, [pc, #204]	; (224bc <m2m_wifi_init+0x1bc>)
   223f0:	0018      	movs	r0, r3
   223f2:	4b33      	ldr	r3, [pc, #204]	; (224c0 <m2m_wifi_init+0x1c0>)
   223f4:	4798      	blx	r3
   223f6:	230c      	movs	r3, #12
   223f8:	18fb      	adds	r3, r7, r3
   223fa:	79db      	ldrb	r3, [r3, #7]
   223fc:	0019      	movs	r1, r3
   223fe:	230c      	movs	r3, #12
   22400:	18fb      	adds	r3, r7, r3
   22402:	7a1b      	ldrb	r3, [r3, #8]
   22404:	001a      	movs	r2, r3
   22406:	230c      	movs	r3, #12
   22408:	18fb      	adds	r3, r7, r3
   2240a:	7a5b      	ldrb	r3, [r3, #9]
   2240c:	4830      	ldr	r0, [pc, #192]	; (224d0 <m2m_wifi_init+0x1d0>)
   2240e:	4c2c      	ldr	r4, [pc, #176]	; (224c0 <m2m_wifi_init+0x1c0>)
   22410:	47a0      	blx	r4
   22412:	4b2d      	ldr	r3, [pc, #180]	; (224c8 <m2m_wifi_init+0x1c8>)
   22414:	0018      	movs	r0, r3
   22416:	4b2a      	ldr	r3, [pc, #168]	; (224c0 <m2m_wifi_init+0x1c0>)
   22418:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   2241a:	4b28      	ldr	r3, [pc, #160]	; (224bc <m2m_wifi_init+0x1bc>)
   2241c:	0018      	movs	r0, r3
   2241e:	4b28      	ldr	r3, [pc, #160]	; (224c0 <m2m_wifi_init+0x1c0>)
   22420:	4798      	blx	r3
   22422:	482c      	ldr	r0, [pc, #176]	; (224d4 <m2m_wifi_init+0x1d4>)
   22424:	2304      	movs	r3, #4
   22426:	2205      	movs	r2, #5
   22428:	2113      	movs	r1, #19
   2242a:	4c25      	ldr	r4, [pc, #148]	; (224c0 <m2m_wifi_init+0x1c0>)
   2242c:	47a0      	blx	r4
   2242e:	4b26      	ldr	r3, [pc, #152]	; (224c8 <m2m_wifi_init+0x1c8>)
   22430:	0018      	movs	r0, r3
   22432:	4b23      	ldr	r3, [pc, #140]	; (224c0 <m2m_wifi_init+0x1c0>)
   22434:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   22436:	4b21      	ldr	r3, [pc, #132]	; (224bc <m2m_wifi_init+0x1bc>)
   22438:	0018      	movs	r0, r3
   2243a:	4b21      	ldr	r3, [pc, #132]	; (224c0 <m2m_wifi_init+0x1c0>)
   2243c:	4798      	blx	r3
   2243e:	4a26      	ldr	r2, [pc, #152]	; (224d8 <m2m_wifi_init+0x1d8>)
   22440:	4926      	ldr	r1, [pc, #152]	; (224dc <m2m_wifi_init+0x1dc>)
   22442:	4b27      	ldr	r3, [pc, #156]	; (224e0 <m2m_wifi_init+0x1e0>)
   22444:	0018      	movs	r0, r3
   22446:	4b1e      	ldr	r3, [pc, #120]	; (224c0 <m2m_wifi_init+0x1c0>)
   22448:	4798      	blx	r3
   2244a:	4b1f      	ldr	r3, [pc, #124]	; (224c8 <m2m_wifi_init+0x1c8>)
   2244c:	0018      	movs	r0, r3
   2244e:	4b1c      	ldr	r3, [pc, #112]	; (224c0 <m2m_wifi_init+0x1c0>)
   22450:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   22452:	2337      	movs	r3, #55	; 0x37
   22454:	18fb      	adds	r3, r7, r3
   22456:	781b      	ldrb	r3, [r3, #0]
   22458:	b25b      	sxtb	r3, r3
   2245a:	330d      	adds	r3, #13
   2245c:	d117      	bne.n	2248e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   2245e:	23e8      	movs	r3, #232	; 0xe8
   22460:	33ff      	adds	r3, #255	; 0xff
   22462:	001a      	movs	r2, r3
   22464:	491f      	ldr	r1, [pc, #124]	; (224e4 <m2m_wifi_init+0x1e4>)
   22466:	4b20      	ldr	r3, [pc, #128]	; (224e8 <m2m_wifi_init+0x1e8>)
   22468:	0018      	movs	r0, r3
   2246a:	4b15      	ldr	r3, [pc, #84]	; (224c0 <m2m_wifi_init+0x1c0>)
   2246c:	4798      	blx	r3
   2246e:	4b1f      	ldr	r3, [pc, #124]	; (224ec <m2m_wifi_init+0x1ec>)
   22470:	0018      	movs	r0, r3
   22472:	4b13      	ldr	r3, [pc, #76]	; (224c0 <m2m_wifi_init+0x1c0>)
   22474:	4798      	blx	r3
   22476:	4b14      	ldr	r3, [pc, #80]	; (224c8 <m2m_wifi_init+0x1c8>)
   22478:	0018      	movs	r0, r3
   2247a:	4b11      	ldr	r3, [pc, #68]	; (224c0 <m2m_wifi_init+0x1c0>)
   2247c:	4798      	blx	r3
	}

	goto _EXIT0;
   2247e:	e006      	b.n	2248e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22480:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   22482:	2000      	movs	r0, #0
   22484:	4b1a      	ldr	r3, [pc, #104]	; (224f0 <m2m_wifi_init+0x1f0>)
   22486:	4798      	blx	r3
   22488:	e002      	b.n	22490 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   2248a:	46c0      	nop			; (mov r8, r8)
   2248c:	e000      	b.n	22490 <m2m_wifi_init+0x190>
	goto _EXIT0;
   2248e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   22490:	2337      	movs	r3, #55	; 0x37
   22492:	18fb      	adds	r3, r7, r3
   22494:	781b      	ldrb	r3, [r3, #0]
   22496:	b25b      	sxtb	r3, r3
}
   22498:	0018      	movs	r0, r3
   2249a:	46bd      	mov	sp, r7
   2249c:	b00f      	add	sp, #60	; 0x3c
   2249e:	bd90      	pop	{r4, r7, pc}
   224a0:	200042a8 	.word	0x200042a8
   224a4:	200042a5 	.word	0x200042a5
   224a8:	00023625 	.word	0x00023625
   224ac:	000213a9 	.word	0x000213a9
   224b0:	00021f49 	.word	0x00021f49
   224b4:	00021e8d 	.word	0x00021e8d
   224b8:	00023459 	.word	0x00023459
   224bc:	00038f34 	.word	0x00038f34
   224c0:	0001e3f9 	.word	0x0001e3f9
   224c4:	000390d8 	.word	0x000390d8
   224c8:	00038f60 	.word	0x00038f60
   224cc:	00039100 	.word	0x00039100
   224d0:	0003911c 	.word	0x0003911c
   224d4:	00039140 	.word	0x00039140
   224d8:	00039158 	.word	0x00039158
   224dc:	00039164 	.word	0x00039164
   224e0:	00039170 	.word	0x00039170
   224e4:	0003930c 	.word	0x0003930c
   224e8:	00038f64 	.word	0x00038f64
   224ec:	00039188 	.word	0x00039188
   224f0:	000237b5 	.word	0x000237b5

000224f4 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   224f4:	b580      	push	{r7, lr}
   224f6:	b082      	sub	sp, #8
   224f8:	af00      	add	r7, sp, #0
   224fa:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   224fc:	4b03      	ldr	r3, [pc, #12]	; (2250c <m2m_wifi_handle_events+0x18>)
   224fe:	4798      	blx	r3
   22500:	0003      	movs	r3, r0
}
   22502:	0018      	movs	r0, r3
   22504:	46bd      	mov	sp, r7
   22506:	b002      	add	sp, #8
   22508:	bd80      	pop	{r7, pc}
   2250a:	46c0      	nop			; (mov r8, r8)
   2250c:	00021c6d 	.word	0x00021c6d

00022510 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   22510:	b590      	push	{r4, r7, lr}
   22512:	b087      	sub	sp, #28
   22514:	af02      	add	r7, sp, #8
   22516:	60f8      	str	r0, [r7, #12]
   22518:	0008      	movs	r0, r1
   2251a:	0011      	movs	r1, r2
   2251c:	607b      	str	r3, [r7, #4]
   2251e:	230b      	movs	r3, #11
   22520:	18fb      	adds	r3, r7, r3
   22522:	1c02      	adds	r2, r0, #0
   22524:	701a      	strb	r2, [r3, #0]
   22526:	230a      	movs	r3, #10
   22528:	18fb      	adds	r3, r7, r3
   2252a:	1c0a      	adds	r2, r1, #0
   2252c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   2252e:	687c      	ldr	r4, [r7, #4]
   22530:	230a      	movs	r3, #10
   22532:	18fb      	adds	r3, r7, r3
   22534:	781a      	ldrb	r2, [r3, #0]
   22536:	230b      	movs	r3, #11
   22538:	18fb      	adds	r3, r7, r3
   2253a:	7819      	ldrb	r1, [r3, #0]
   2253c:	68f8      	ldr	r0, [r7, #12]
   2253e:	2300      	movs	r3, #0
   22540:	9301      	str	r3, [sp, #4]
   22542:	2320      	movs	r3, #32
   22544:	18fb      	adds	r3, r7, r3
   22546:	881b      	ldrh	r3, [r3, #0]
   22548:	9300      	str	r3, [sp, #0]
   2254a:	0023      	movs	r3, r4
   2254c:	4c03      	ldr	r4, [pc, #12]	; (2255c <m2m_wifi_connect+0x4c>)
   2254e:	47a0      	blx	r4
   22550:	0003      	movs	r3, r0
}
   22552:	0018      	movs	r0, r3
   22554:	46bd      	mov	sp, r7
   22556:	b005      	add	sp, #20
   22558:	bd90      	pop	{r4, r7, pc}
   2255a:	46c0      	nop			; (mov r8, r8)
   2255c:	00022561 	.word	0x00022561

00022560 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   22560:	b5b0      	push	{r4, r5, r7, lr}
   22562:	b0aa      	sub	sp, #168	; 0xa8
   22564:	af04      	add	r7, sp, #16
   22566:	60f8      	str	r0, [r7, #12]
   22568:	0008      	movs	r0, r1
   2256a:	0011      	movs	r1, r2
   2256c:	607b      	str	r3, [r7, #4]
   2256e:	230b      	movs	r3, #11
   22570:	18fb      	adds	r3, r7, r3
   22572:	1c02      	adds	r2, r0, #0
   22574:	701a      	strb	r2, [r3, #0]
   22576:	230a      	movs	r3, #10
   22578:	18fb      	adds	r3, r7, r3
   2257a:	1c0a      	adds	r2, r1, #0
   2257c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   2257e:	2397      	movs	r3, #151	; 0x97
   22580:	18fb      	adds	r3, r7, r3
   22582:	2200      	movs	r2, #0
   22584:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   22586:	230a      	movs	r3, #10
   22588:	18fb      	adds	r3, r7, r3
   2258a:	781b      	ldrb	r3, [r3, #0]
   2258c:	2b01      	cmp	r3, #1
   2258e:	d100      	bne.n	22592 <m2m_wifi_connect_sc+0x32>
   22590:	e085      	b.n	2269e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   22592:	687b      	ldr	r3, [r7, #4]
   22594:	2b00      	cmp	r3, #0
   22596:	d112      	bne.n	225be <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   22598:	4ad8      	ldr	r2, [pc, #864]	; (228fc <m2m_wifi_connect_sc+0x39c>)
   2259a:	49d9      	ldr	r1, [pc, #868]	; (22900 <m2m_wifi_connect_sc+0x3a0>)
   2259c:	4bd9      	ldr	r3, [pc, #868]	; (22904 <m2m_wifi_connect_sc+0x3a4>)
   2259e:	0018      	movs	r0, r3
   225a0:	4bd9      	ldr	r3, [pc, #868]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   225a2:	4798      	blx	r3
   225a4:	4bd9      	ldr	r3, [pc, #868]	; (2290c <m2m_wifi_connect_sc+0x3ac>)
   225a6:	0018      	movs	r0, r3
   225a8:	4bd7      	ldr	r3, [pc, #860]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   225aa:	4798      	blx	r3
   225ac:	4bd8      	ldr	r3, [pc, #864]	; (22910 <m2m_wifi_connect_sc+0x3b0>)
   225ae:	0018      	movs	r0, r3
   225b0:	4bd5      	ldr	r3, [pc, #852]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   225b2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   225b4:	2397      	movs	r3, #151	; 0x97
   225b6:	18fb      	adds	r3, r7, r3
   225b8:	22f4      	movs	r2, #244	; 0xf4
   225ba:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   225bc:	e1f9      	b.n	229b2 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   225be:	230a      	movs	r3, #10
   225c0:	18fb      	adds	r3, r7, r3
   225c2:	781b      	ldrb	r3, [r3, #0]
   225c4:	2b02      	cmp	r3, #2
   225c6:	d16a      	bne.n	2269e <m2m_wifi_connect_sc+0x13e>
   225c8:	687b      	ldr	r3, [r7, #4]
   225ca:	0018      	movs	r0, r3
   225cc:	4bd1      	ldr	r3, [pc, #836]	; (22914 <m2m_wifi_connect_sc+0x3b4>)
   225ce:	4798      	blx	r3
   225d0:	0003      	movs	r3, r0
   225d2:	2b40      	cmp	r3, #64	; 0x40
   225d4:	d163      	bne.n	2269e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   225d6:	2396      	movs	r3, #150	; 0x96
   225d8:	18fb      	adds	r3, r7, r3
   225da:	2200      	movs	r2, #0
   225dc:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   225de:	687b      	ldr	r3, [r7, #4]
   225e0:	2290      	movs	r2, #144	; 0x90
   225e2:	18ba      	adds	r2, r7, r2
   225e4:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   225e6:	e055      	b.n	22694 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   225e8:	2396      	movs	r3, #150	; 0x96
   225ea:	18fb      	adds	r3, r7, r3
   225ec:	781b      	ldrb	r3, [r3, #0]
   225ee:	2290      	movs	r2, #144	; 0x90
   225f0:	18ba      	adds	r2, r7, r2
   225f2:	6812      	ldr	r2, [r2, #0]
   225f4:	18d3      	adds	r3, r2, r3
   225f6:	781b      	ldrb	r3, [r3, #0]
   225f8:	2b2f      	cmp	r3, #47	; 0x2f
   225fa:	d931      	bls.n	22660 <m2m_wifi_connect_sc+0x100>
   225fc:	2396      	movs	r3, #150	; 0x96
   225fe:	18fb      	adds	r3, r7, r3
   22600:	781b      	ldrb	r3, [r3, #0]
   22602:	2290      	movs	r2, #144	; 0x90
   22604:	18ba      	adds	r2, r7, r2
   22606:	6812      	ldr	r2, [r2, #0]
   22608:	18d3      	adds	r3, r2, r3
   2260a:	781b      	ldrb	r3, [r3, #0]
   2260c:	2b39      	cmp	r3, #57	; 0x39
   2260e:	d909      	bls.n	22624 <m2m_wifi_connect_sc+0xc4>
   22610:	2396      	movs	r3, #150	; 0x96
   22612:	18fb      	adds	r3, r7, r3
   22614:	781b      	ldrb	r3, [r3, #0]
   22616:	2290      	movs	r2, #144	; 0x90
   22618:	18ba      	adds	r2, r7, r2
   2261a:	6812      	ldr	r2, [r2, #0]
   2261c:	18d3      	adds	r3, r2, r3
   2261e:	781b      	ldrb	r3, [r3, #0]
   22620:	2b40      	cmp	r3, #64	; 0x40
   22622:	d91d      	bls.n	22660 <m2m_wifi_connect_sc+0x100>
   22624:	2396      	movs	r3, #150	; 0x96
   22626:	18fb      	adds	r3, r7, r3
   22628:	781b      	ldrb	r3, [r3, #0]
   2262a:	2290      	movs	r2, #144	; 0x90
   2262c:	18ba      	adds	r2, r7, r2
   2262e:	6812      	ldr	r2, [r2, #0]
   22630:	18d3      	adds	r3, r2, r3
   22632:	781b      	ldrb	r3, [r3, #0]
   22634:	2b46      	cmp	r3, #70	; 0x46
   22636:	d909      	bls.n	2264c <m2m_wifi_connect_sc+0xec>
   22638:	2396      	movs	r3, #150	; 0x96
   2263a:	18fb      	adds	r3, r7, r3
   2263c:	781b      	ldrb	r3, [r3, #0]
   2263e:	2290      	movs	r2, #144	; 0x90
   22640:	18ba      	adds	r2, r7, r2
   22642:	6812      	ldr	r2, [r2, #0]
   22644:	18d3      	adds	r3, r2, r3
   22646:	781b      	ldrb	r3, [r3, #0]
   22648:	2b60      	cmp	r3, #96	; 0x60
   2264a:	d909      	bls.n	22660 <m2m_wifi_connect_sc+0x100>
   2264c:	2396      	movs	r3, #150	; 0x96
   2264e:	18fb      	adds	r3, r7, r3
   22650:	781b      	ldrb	r3, [r3, #0]
   22652:	2290      	movs	r2, #144	; 0x90
   22654:	18ba      	adds	r2, r7, r2
   22656:	6812      	ldr	r2, [r2, #0]
   22658:	18d3      	adds	r3, r2, r3
   2265a:	781b      	ldrb	r3, [r3, #0]
   2265c:	2b66      	cmp	r3, #102	; 0x66
   2265e:	d912      	bls.n	22686 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   22660:	4aad      	ldr	r2, [pc, #692]	; (22918 <m2m_wifi_connect_sc+0x3b8>)
   22662:	49a7      	ldr	r1, [pc, #668]	; (22900 <m2m_wifi_connect_sc+0x3a0>)
   22664:	4ba7      	ldr	r3, [pc, #668]	; (22904 <m2m_wifi_connect_sc+0x3a4>)
   22666:	0018      	movs	r0, r3
   22668:	4ba7      	ldr	r3, [pc, #668]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   2266a:	4798      	blx	r3
   2266c:	4bab      	ldr	r3, [pc, #684]	; (2291c <m2m_wifi_connect_sc+0x3bc>)
   2266e:	0018      	movs	r0, r3
   22670:	4ba5      	ldr	r3, [pc, #660]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   22672:	4798      	blx	r3
   22674:	4ba6      	ldr	r3, [pc, #664]	; (22910 <m2m_wifi_connect_sc+0x3b0>)
   22676:	0018      	movs	r0, r3
   22678:	4ba3      	ldr	r3, [pc, #652]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   2267a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   2267c:	2397      	movs	r3, #151	; 0x97
   2267e:	18fb      	adds	r3, r7, r3
   22680:	22f4      	movs	r2, #244	; 0xf4
   22682:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   22684:	e195      	b.n	229b2 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   22686:	2396      	movs	r3, #150	; 0x96
   22688:	18fb      	adds	r3, r7, r3
   2268a:	781a      	ldrb	r2, [r3, #0]
   2268c:	2396      	movs	r3, #150	; 0x96
   2268e:	18fb      	adds	r3, r7, r3
   22690:	3201      	adds	r2, #1
   22692:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22694:	2396      	movs	r3, #150	; 0x96
   22696:	18fb      	adds	r3, r7, r3
   22698:	781b      	ldrb	r3, [r3, #0]
   2269a:	2b3f      	cmp	r3, #63	; 0x3f
   2269c:	d9a4      	bls.n	225e8 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   2269e:	230b      	movs	r3, #11
   226a0:	18fb      	adds	r3, r7, r3
   226a2:	781b      	ldrb	r3, [r3, #0]
   226a4:	2b00      	cmp	r3, #0
   226a6:	d004      	beq.n	226b2 <m2m_wifi_connect_sc+0x152>
   226a8:	230b      	movs	r3, #11
   226aa:	18fb      	adds	r3, r7, r3
   226ac:	781b      	ldrb	r3, [r3, #0]
   226ae:	2b20      	cmp	r3, #32
   226b0:	d913      	bls.n	226da <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   226b2:	238c      	movs	r3, #140	; 0x8c
   226b4:	009a      	lsls	r2, r3, #2
   226b6:	4992      	ldr	r1, [pc, #584]	; (22900 <m2m_wifi_connect_sc+0x3a0>)
   226b8:	4b92      	ldr	r3, [pc, #584]	; (22904 <m2m_wifi_connect_sc+0x3a4>)
   226ba:	0018      	movs	r0, r3
   226bc:	4b92      	ldr	r3, [pc, #584]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   226be:	4798      	blx	r3
   226c0:	4b97      	ldr	r3, [pc, #604]	; (22920 <m2m_wifi_connect_sc+0x3c0>)
   226c2:	0018      	movs	r0, r3
   226c4:	4b90      	ldr	r3, [pc, #576]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   226c6:	4798      	blx	r3
   226c8:	4b91      	ldr	r3, [pc, #580]	; (22910 <m2m_wifi_connect_sc+0x3b0>)
   226ca:	0018      	movs	r0, r3
   226cc:	4b8e      	ldr	r3, [pc, #568]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   226ce:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   226d0:	2397      	movs	r3, #151	; 0x97
   226d2:	18fb      	adds	r3, r7, r3
   226d4:	22f4      	movs	r2, #244	; 0xf4
   226d6:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   226d8:	e16b      	b.n	229b2 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   226da:	23a8      	movs	r3, #168	; 0xa8
   226dc:	18fb      	adds	r3, r7, r3
   226de:	881b      	ldrh	r3, [r3, #0]
   226e0:	2b00      	cmp	r3, #0
   226e2:	d004      	beq.n	226ee <m2m_wifi_connect_sc+0x18e>
   226e4:	23a8      	movs	r3, #168	; 0xa8
   226e6:	18fb      	adds	r3, r7, r3
   226e8:	881b      	ldrh	r3, [r3, #0]
   226ea:	2b0e      	cmp	r3, #14
   226ec:	d917      	bls.n	2271e <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   226ee:	23a8      	movs	r3, #168	; 0xa8
   226f0:	18fb      	adds	r3, r7, r3
   226f2:	881b      	ldrh	r3, [r3, #0]
   226f4:	2bff      	cmp	r3, #255	; 0xff
   226f6:	d012      	beq.n	2271e <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   226f8:	4a8a      	ldr	r2, [pc, #552]	; (22924 <m2m_wifi_connect_sc+0x3c4>)
   226fa:	4981      	ldr	r1, [pc, #516]	; (22900 <m2m_wifi_connect_sc+0x3a0>)
   226fc:	4b81      	ldr	r3, [pc, #516]	; (22904 <m2m_wifi_connect_sc+0x3a4>)
   226fe:	0018      	movs	r0, r3
   22700:	4b81      	ldr	r3, [pc, #516]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   22702:	4798      	blx	r3
   22704:	4b88      	ldr	r3, [pc, #544]	; (22928 <m2m_wifi_connect_sc+0x3c8>)
   22706:	0018      	movs	r0, r3
   22708:	4b7f      	ldr	r3, [pc, #508]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   2270a:	4798      	blx	r3
   2270c:	4b80      	ldr	r3, [pc, #512]	; (22910 <m2m_wifi_connect_sc+0x3b0>)
   2270e:	0018      	movs	r0, r3
   22710:	4b7d      	ldr	r3, [pc, #500]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   22712:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22714:	2397      	movs	r3, #151	; 0x97
   22716:	18fb      	adds	r3, r7, r3
   22718:	22f4      	movs	r2, #244	; 0xf4
   2271a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2271c:	e149      	b.n	229b2 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   2271e:	230b      	movs	r3, #11
   22720:	18fb      	adds	r3, r7, r3
   22722:	781a      	ldrb	r2, [r3, #0]
   22724:	68f9      	ldr	r1, [r7, #12]
   22726:	2314      	movs	r3, #20
   22728:	18fb      	adds	r3, r7, r3
   2272a:	3346      	adds	r3, #70	; 0x46
   2272c:	0018      	movs	r0, r3
   2272e:	4b7f      	ldr	r3, [pc, #508]	; (2292c <m2m_wifi_connect_sc+0x3cc>)
   22730:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   22732:	230b      	movs	r3, #11
   22734:	18fb      	adds	r3, r7, r3
   22736:	781b      	ldrb	r3, [r3, #0]
   22738:	2214      	movs	r2, #20
   2273a:	18ba      	adds	r2, r7, r2
   2273c:	2146      	movs	r1, #70	; 0x46
   2273e:	18d3      	adds	r3, r2, r3
   22740:	185b      	adds	r3, r3, r1
   22742:	2200      	movs	r2, #0
   22744:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   22746:	2314      	movs	r3, #20
   22748:	18fb      	adds	r3, r7, r3
   2274a:	22a8      	movs	r2, #168	; 0xa8
   2274c:	18ba      	adds	r2, r7, r2
   2274e:	2144      	movs	r1, #68	; 0x44
   22750:	8812      	ldrh	r2, [r2, #0]
   22752:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   22754:	23ac      	movs	r3, #172	; 0xac
   22756:	18fb      	adds	r3, r7, r3
   22758:	781b      	ldrb	r3, [r3, #0]
   2275a:	1e5a      	subs	r2, r3, #1
   2275c:	4193      	sbcs	r3, r2
   2275e:	b2db      	uxtb	r3, r3
   22760:	0019      	movs	r1, r3
   22762:	2314      	movs	r3, #20
   22764:	18fb      	adds	r3, r7, r3
   22766:	2267      	movs	r2, #103	; 0x67
   22768:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   2276a:	2314      	movs	r3, #20
   2276c:	18fb      	adds	r3, r7, r3
   2276e:	228c      	movs	r2, #140	; 0x8c
   22770:	18ba      	adds	r2, r7, r2
   22772:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   22774:	238c      	movs	r3, #140	; 0x8c
   22776:	18fb      	adds	r3, r7, r3
   22778:	681b      	ldr	r3, [r3, #0]
   2277a:	220a      	movs	r2, #10
   2277c:	18ba      	adds	r2, r7, r2
   2277e:	2141      	movs	r1, #65	; 0x41
   22780:	7812      	ldrb	r2, [r2, #0]
   22782:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   22784:	230a      	movs	r3, #10
   22786:	18fb      	adds	r3, r7, r3
   22788:	781b      	ldrb	r3, [r3, #0]
   2278a:	2b03      	cmp	r3, #3
   2278c:	d000      	beq.n	22790 <m2m_wifi_connect_sc+0x230>
   2278e:	e07d      	b.n	2288c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   22790:	687b      	ldr	r3, [r7, #4]
   22792:	2288      	movs	r2, #136	; 0x88
   22794:	18ba      	adds	r2, r7, r2
   22796:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   22798:	238c      	movs	r3, #140	; 0x8c
   2279a:	18fb      	adds	r3, r7, r3
   2279c:	681b      	ldr	r3, [r3, #0]
   2279e:	2284      	movs	r2, #132	; 0x84
   227a0:	18ba      	adds	r2, r7, r2
   227a2:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   227a4:	2388      	movs	r3, #136	; 0x88
   227a6:	18fb      	adds	r3, r7, r3
   227a8:	681b      	ldr	r3, [r3, #0]
   227aa:	781b      	ldrb	r3, [r3, #0]
   227ac:	3b01      	subs	r3, #1
   227ae:	b2da      	uxtb	r2, r3
   227b0:	2384      	movs	r3, #132	; 0x84
   227b2:	18fb      	adds	r3, r7, r3
   227b4:	681b      	ldr	r3, [r3, #0]
   227b6:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   227b8:	2384      	movs	r3, #132	; 0x84
   227ba:	18fb      	adds	r3, r7, r3
   227bc:	681b      	ldr	r3, [r3, #0]
   227be:	781b      	ldrb	r3, [r3, #0]
   227c0:	2b03      	cmp	r3, #3
   227c2:	d919      	bls.n	227f8 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   227c4:	2394      	movs	r3, #148	; 0x94
   227c6:	009a      	lsls	r2, r3, #2
   227c8:	494d      	ldr	r1, [pc, #308]	; (22900 <m2m_wifi_connect_sc+0x3a0>)
   227ca:	4b4e      	ldr	r3, [pc, #312]	; (22904 <m2m_wifi_connect_sc+0x3a4>)
   227cc:	0018      	movs	r0, r3
   227ce:	4b4e      	ldr	r3, [pc, #312]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   227d0:	4798      	blx	r3
   227d2:	2384      	movs	r3, #132	; 0x84
   227d4:	18fb      	adds	r3, r7, r3
   227d6:	681b      	ldr	r3, [r3, #0]
   227d8:	781b      	ldrb	r3, [r3, #0]
   227da:	001a      	movs	r2, r3
   227dc:	4b54      	ldr	r3, [pc, #336]	; (22930 <m2m_wifi_connect_sc+0x3d0>)
   227de:	0011      	movs	r1, r2
   227e0:	0018      	movs	r0, r3
   227e2:	4b49      	ldr	r3, [pc, #292]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   227e4:	4798      	blx	r3
   227e6:	4b4a      	ldr	r3, [pc, #296]	; (22910 <m2m_wifi_connect_sc+0x3b0>)
   227e8:	0018      	movs	r0, r3
   227ea:	4b47      	ldr	r3, [pc, #284]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   227ec:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   227ee:	2397      	movs	r3, #151	; 0x97
   227f0:	18fb      	adds	r3, r7, r3
   227f2:	22f4      	movs	r2, #244	; 0xf4
   227f4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   227f6:	e0dc      	b.n	229b2 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   227f8:	2388      	movs	r3, #136	; 0x88
   227fa:	18fb      	adds	r3, r7, r3
   227fc:	681b      	ldr	r3, [r3, #0]
   227fe:	785b      	ldrb	r3, [r3, #1]
   22800:	3b01      	subs	r3, #1
   22802:	b2da      	uxtb	r2, r3
   22804:	2384      	movs	r3, #132	; 0x84
   22806:	18fb      	adds	r3, r7, r3
   22808:	681b      	ldr	r3, [r3, #0]
   2280a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   2280c:	2384      	movs	r3, #132	; 0x84
   2280e:	18fb      	adds	r3, r7, r3
   22810:	681b      	ldr	r3, [r3, #0]
   22812:	785b      	ldrb	r3, [r3, #1]
   22814:	2b0a      	cmp	r3, #10
   22816:	d01e      	beq.n	22856 <m2m_wifi_connect_sc+0x2f6>
   22818:	2384      	movs	r3, #132	; 0x84
   2281a:	18fb      	adds	r3, r7, r3
   2281c:	681b      	ldr	r3, [r3, #0]
   2281e:	785b      	ldrb	r3, [r3, #1]
   22820:	2b1a      	cmp	r3, #26
   22822:	d018      	beq.n	22856 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   22824:	4a43      	ldr	r2, [pc, #268]	; (22934 <m2m_wifi_connect_sc+0x3d4>)
   22826:	4936      	ldr	r1, [pc, #216]	; (22900 <m2m_wifi_connect_sc+0x3a0>)
   22828:	4b36      	ldr	r3, [pc, #216]	; (22904 <m2m_wifi_connect_sc+0x3a4>)
   2282a:	0018      	movs	r0, r3
   2282c:	4b36      	ldr	r3, [pc, #216]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   2282e:	4798      	blx	r3
   22830:	2384      	movs	r3, #132	; 0x84
   22832:	18fb      	adds	r3, r7, r3
   22834:	681b      	ldr	r3, [r3, #0]
   22836:	785b      	ldrb	r3, [r3, #1]
   22838:	001a      	movs	r2, r3
   2283a:	4b3f      	ldr	r3, [pc, #252]	; (22938 <m2m_wifi_connect_sc+0x3d8>)
   2283c:	0011      	movs	r1, r2
   2283e:	0018      	movs	r0, r3
   22840:	4b31      	ldr	r3, [pc, #196]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   22842:	4798      	blx	r3
   22844:	4b32      	ldr	r3, [pc, #200]	; (22910 <m2m_wifi_connect_sc+0x3b0>)
   22846:	0018      	movs	r0, r3
   22848:	4b2f      	ldr	r3, [pc, #188]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   2284a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2284c:	2397      	movs	r3, #151	; 0x97
   2284e:	18fb      	adds	r3, r7, r3
   22850:	22f4      	movs	r2, #244	; 0xf4
   22852:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22854:	e0ad      	b.n	229b2 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   22856:	2384      	movs	r3, #132	; 0x84
   22858:	18fb      	adds	r3, r7, r3
   2285a:	681b      	ldr	r3, [r3, #0]
   2285c:	1c98      	adds	r0, r3, #2
   2285e:	2388      	movs	r3, #136	; 0x88
   22860:	18fb      	adds	r3, r7, r3
   22862:	681b      	ldr	r3, [r3, #0]
   22864:	1c99      	adds	r1, r3, #2
   22866:	2388      	movs	r3, #136	; 0x88
   22868:	18fb      	adds	r3, r7, r3
   2286a:	681b      	ldr	r3, [r3, #0]
   2286c:	785b      	ldrb	r3, [r3, #1]
   2286e:	001a      	movs	r2, r3
   22870:	4b2e      	ldr	r3, [pc, #184]	; (2292c <m2m_wifi_connect_sc+0x3cc>)
   22872:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   22874:	2388      	movs	r3, #136	; 0x88
   22876:	18fb      	adds	r3, r7, r3
   22878:	681b      	ldr	r3, [r3, #0]
   2287a:	785b      	ldrb	r3, [r3, #1]
   2287c:	001a      	movs	r2, r3
   2287e:	2384      	movs	r3, #132	; 0x84
   22880:	18fb      	adds	r3, r7, r3
   22882:	681b      	ldr	r3, [r3, #0]
   22884:	189b      	adds	r3, r3, r2
   22886:	2200      	movs	r2, #0
   22888:	709a      	strb	r2, [r3, #2]
   2288a:	e081      	b.n	22990 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   2288c:	230a      	movs	r3, #10
   2288e:	18fb      	adds	r3, r7, r3
   22890:	781b      	ldrb	r3, [r3, #0]
   22892:	2b02      	cmp	r3, #2
   22894:	d156      	bne.n	22944 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   22896:	2382      	movs	r3, #130	; 0x82
   22898:	18fc      	adds	r4, r7, r3
   2289a:	687b      	ldr	r3, [r7, #4]
   2289c:	0018      	movs	r0, r3
   2289e:	4b1d      	ldr	r3, [pc, #116]	; (22914 <m2m_wifi_connect_sc+0x3b4>)
   228a0:	4798      	blx	r3
   228a2:	0003      	movs	r3, r0
   228a4:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   228a6:	2382      	movs	r3, #130	; 0x82
   228a8:	18fb      	adds	r3, r7, r3
   228aa:	881b      	ldrh	r3, [r3, #0]
   228ac:	2b00      	cmp	r3, #0
   228ae:	d004      	beq.n	228ba <m2m_wifi_connect_sc+0x35a>
   228b0:	2382      	movs	r3, #130	; 0x82
   228b2:	18fb      	adds	r3, r7, r3
   228b4:	881b      	ldrh	r3, [r3, #0]
   228b6:	2b40      	cmp	r3, #64	; 0x40
   228b8:	d912      	bls.n	228e0 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   228ba:	4a20      	ldr	r2, [pc, #128]	; (2293c <m2m_wifi_connect_sc+0x3dc>)
   228bc:	4910      	ldr	r1, [pc, #64]	; (22900 <m2m_wifi_connect_sc+0x3a0>)
   228be:	4b11      	ldr	r3, [pc, #68]	; (22904 <m2m_wifi_connect_sc+0x3a4>)
   228c0:	0018      	movs	r0, r3
   228c2:	4b11      	ldr	r3, [pc, #68]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   228c4:	4798      	blx	r3
   228c6:	4b1e      	ldr	r3, [pc, #120]	; (22940 <m2m_wifi_connect_sc+0x3e0>)
   228c8:	0018      	movs	r0, r3
   228ca:	4b0f      	ldr	r3, [pc, #60]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   228cc:	4798      	blx	r3
   228ce:	4b10      	ldr	r3, [pc, #64]	; (22910 <m2m_wifi_connect_sc+0x3b0>)
   228d0:	0018      	movs	r0, r3
   228d2:	4b0d      	ldr	r3, [pc, #52]	; (22908 <m2m_wifi_connect_sc+0x3a8>)
   228d4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   228d6:	2397      	movs	r3, #151	; 0x97
   228d8:	18fb      	adds	r3, r7, r3
   228da:	22f4      	movs	r2, #244	; 0xf4
   228dc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   228de:	e068      	b.n	229b2 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   228e0:	238c      	movs	r3, #140	; 0x8c
   228e2:	18fb      	adds	r3, r7, r3
   228e4:	6818      	ldr	r0, [r3, #0]
   228e6:	2382      	movs	r3, #130	; 0x82
   228e8:	18fb      	adds	r3, r7, r3
   228ea:	881b      	ldrh	r3, [r3, #0]
   228ec:	3301      	adds	r3, #1
   228ee:	001a      	movs	r2, r3
   228f0:	687b      	ldr	r3, [r7, #4]
   228f2:	0019      	movs	r1, r3
   228f4:	4b0d      	ldr	r3, [pc, #52]	; (2292c <m2m_wifi_connect_sc+0x3cc>)
   228f6:	4798      	blx	r3
   228f8:	e04a      	b.n	22990 <m2m_wifi_connect_sc+0x430>
   228fa:	46c0      	nop			; (mov r8, r8)
   228fc:	0000021a 	.word	0x0000021a
   22900:	0003931c 	.word	0x0003931c
   22904:	00038f64 	.word	0x00038f64
   22908:	0001e3f9 	.word	0x0001e3f9
   2290c:	000391a4 	.word	0x000391a4
   22910:	00038f60 	.word	0x00038f60
   22914:	000211cf 	.word	0x000211cf
   22918:	00000226 	.word	0x00000226
   2291c:	000391b8 	.word	0x000391b8
   22920:	000391c8 	.word	0x000391c8
   22924:	00000239 	.word	0x00000239
   22928:	000391dc 	.word	0x000391dc
   2292c:	00021155 	.word	0x00021155
   22930:	000391e8 	.word	0x000391e8
   22934:	00000257 	.word	0x00000257
   22938:	00039204 	.word	0x00039204
   2293c:	00000266 	.word	0x00000266
   22940:	00039220 	.word	0x00039220
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   22944:	230a      	movs	r3, #10
   22946:	18fb      	adds	r3, r7, r3
   22948:	781b      	ldrb	r3, [r3, #0]
   2294a:	2b04      	cmp	r3, #4
   2294c:	d108      	bne.n	22960 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   2294e:	238c      	movs	r3, #140	; 0x8c
   22950:	18fb      	adds	r3, r7, r3
   22952:	681b      	ldr	r3, [r3, #0]
   22954:	6879      	ldr	r1, [r7, #4]
   22956:	223e      	movs	r2, #62	; 0x3e
   22958:	0018      	movs	r0, r3
   2295a:	4b1a      	ldr	r3, [pc, #104]	; (229c4 <m2m_wifi_connect_sc+0x464>)
   2295c:	4798      	blx	r3
   2295e:	e017      	b.n	22990 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   22960:	230a      	movs	r3, #10
   22962:	18fb      	adds	r3, r7, r3
   22964:	781b      	ldrb	r3, [r3, #0]
   22966:	2b01      	cmp	r3, #1
   22968:	d012      	beq.n	22990 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   2296a:	4a17      	ldr	r2, [pc, #92]	; (229c8 <m2m_wifi_connect_sc+0x468>)
   2296c:	4917      	ldr	r1, [pc, #92]	; (229cc <m2m_wifi_connect_sc+0x46c>)
   2296e:	4b18      	ldr	r3, [pc, #96]	; (229d0 <m2m_wifi_connect_sc+0x470>)
   22970:	0018      	movs	r0, r3
   22972:	4b18      	ldr	r3, [pc, #96]	; (229d4 <m2m_wifi_connect_sc+0x474>)
   22974:	4798      	blx	r3
   22976:	4b18      	ldr	r3, [pc, #96]	; (229d8 <m2m_wifi_connect_sc+0x478>)
   22978:	0018      	movs	r0, r3
   2297a:	4b16      	ldr	r3, [pc, #88]	; (229d4 <m2m_wifi_connect_sc+0x474>)
   2297c:	4798      	blx	r3
   2297e:	4b17      	ldr	r3, [pc, #92]	; (229dc <m2m_wifi_connect_sc+0x47c>)
   22980:	0018      	movs	r0, r3
   22982:	4b14      	ldr	r3, [pc, #80]	; (229d4 <m2m_wifi_connect_sc+0x474>)
   22984:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22986:	2397      	movs	r3, #151	; 0x97
   22988:	18fb      	adds	r3, r7, r3
   2298a:	22f4      	movs	r2, #244	; 0xf4
   2298c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   2298e:	e010      	b.n	229b2 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   22990:	2397      	movs	r3, #151	; 0x97
   22992:	18fc      	adds	r4, r7, r3
   22994:	2314      	movs	r3, #20
   22996:	18fa      	adds	r2, r7, r3
   22998:	2300      	movs	r3, #0
   2299a:	9302      	str	r3, [sp, #8]
   2299c:	2300      	movs	r3, #0
   2299e:	9301      	str	r3, [sp, #4]
   229a0:	2300      	movs	r3, #0
   229a2:	9300      	str	r3, [sp, #0]
   229a4:	236c      	movs	r3, #108	; 0x6c
   229a6:	2128      	movs	r1, #40	; 0x28
   229a8:	2001      	movs	r0, #1
   229aa:	4d0d      	ldr	r5, [pc, #52]	; (229e0 <m2m_wifi_connect_sc+0x480>)
   229ac:	47a8      	blx	r5
   229ae:	0003      	movs	r3, r0
   229b0:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   229b2:	2397      	movs	r3, #151	; 0x97
   229b4:	18fb      	adds	r3, r7, r3
   229b6:	781b      	ldrb	r3, [r3, #0]
   229b8:	b25b      	sxtb	r3, r3
}
   229ba:	0018      	movs	r0, r3
   229bc:	46bd      	mov	sp, r7
   229be:	b026      	add	sp, #152	; 0x98
   229c0:	bdb0      	pop	{r4, r5, r7, pc}
   229c2:	46c0      	nop			; (mov r8, r8)
   229c4:	00021155 	.word	0x00021155
   229c8:	00000276 	.word	0x00000276
   229cc:	0003931c 	.word	0x0003931c
   229d0:	00038f64 	.word	0x00038f64
   229d4:	0001e3f9 	.word	0x0001e3f9
   229d8:	0003923c 	.word	0x0003923c
   229dc:	00038f60 	.word	0x00038f60
   229e0:	000213f1 	.word	0x000213f1

000229e4 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   229e4:	b580      	push	{r7, lr}
   229e6:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   229e8:	2300      	movs	r3, #0
}
   229ea:	0018      	movs	r0, r3
   229ec:	46bd      	mov	sp, r7
   229ee:	bd80      	pop	{r7, pc}

000229f0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   229f0:	b590      	push	{r4, r7, lr}
   229f2:	b087      	sub	sp, #28
   229f4:	af00      	add	r7, sp, #0
   229f6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   229f8:	2317      	movs	r3, #23
   229fa:	18fb      	adds	r3, r7, r3
   229fc:	2200      	movs	r2, #0
   229fe:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   22a00:	687b      	ldr	r3, [r7, #4]
   22a02:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   22a04:	693b      	ldr	r3, [r7, #16]
   22a06:	2280      	movs	r2, #128	; 0x80
   22a08:	0052      	lsls	r2, r2, #1
   22a0a:	4313      	orrs	r3, r2
   22a0c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   22a0e:	693a      	ldr	r2, [r7, #16]
   22a10:	23a5      	movs	r3, #165	; 0xa5
   22a12:	015b      	lsls	r3, r3, #5
   22a14:	0011      	movs	r1, r2
   22a16:	0018      	movs	r0, r3
   22a18:	4b12      	ldr	r3, [pc, #72]	; (22a64 <chip_apply_conf+0x74>)
   22a1a:	4798      	blx	r3
		if(val32 != 0) {		
   22a1c:	693b      	ldr	r3, [r7, #16]
   22a1e:	2b00      	cmp	r3, #0
   22a20:	d018      	beq.n	22a54 <chip_apply_conf+0x64>
			uint32 reg = 0;
   22a22:	2300      	movs	r3, #0
   22a24:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   22a26:	2317      	movs	r3, #23
   22a28:	18fc      	adds	r4, r7, r3
   22a2a:	230c      	movs	r3, #12
   22a2c:	18fa      	adds	r2, r7, r3
   22a2e:	23a5      	movs	r3, #165	; 0xa5
   22a30:	015b      	lsls	r3, r3, #5
   22a32:	0011      	movs	r1, r2
   22a34:	0018      	movs	r0, r3
   22a36:	4b0c      	ldr	r3, [pc, #48]	; (22a68 <chip_apply_conf+0x78>)
   22a38:	4798      	blx	r3
   22a3a:	0003      	movs	r3, r0
   22a3c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   22a3e:	2317      	movs	r3, #23
   22a40:	18fb      	adds	r3, r7, r3
   22a42:	781b      	ldrb	r3, [r3, #0]
   22a44:	b25b      	sxtb	r3, r3
   22a46:	2b00      	cmp	r3, #0
   22a48:	d1e1      	bne.n	22a0e <chip_apply_conf+0x1e>
				if(reg == val32)
   22a4a:	68fa      	ldr	r2, [r7, #12]
   22a4c:	693b      	ldr	r3, [r7, #16]
   22a4e:	429a      	cmp	r2, r3
   22a50:	d002      	beq.n	22a58 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   22a52:	e7dc      	b.n	22a0e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   22a54:	46c0      	nop			; (mov r8, r8)
   22a56:	e000      	b.n	22a5a <chip_apply_conf+0x6a>
					break;
   22a58:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   22a5a:	2300      	movs	r3, #0
}
   22a5c:	0018      	movs	r0, r3
   22a5e:	46bd      	mov	sp, r7
   22a60:	b007      	add	sp, #28
   22a62:	bd90      	pop	{r4, r7, pc}
   22a64:	00023245 	.word	0x00023245
   22a68:	00023221 	.word	0x00023221

00022a6c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   22a6c:	b590      	push	{r4, r7, lr}
   22a6e:	b083      	sub	sp, #12
   22a70:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   22a72:	2300      	movs	r3, #0
   22a74:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   22a76:	1dfb      	adds	r3, r7, #7
   22a78:	2200      	movs	r2, #0
   22a7a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   22a7c:	1dfc      	adds	r4, r7, #7
   22a7e:	003b      	movs	r3, r7
   22a80:	4a24      	ldr	r2, [pc, #144]	; (22b14 <enable_interrupts+0xa8>)
   22a82:	0019      	movs	r1, r3
   22a84:	0010      	movs	r0, r2
   22a86:	4b24      	ldr	r3, [pc, #144]	; (22b18 <enable_interrupts+0xac>)
   22a88:	4798      	blx	r3
   22a8a:	0003      	movs	r3, r0
   22a8c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   22a8e:	1dfb      	adds	r3, r7, #7
   22a90:	781b      	ldrb	r3, [r3, #0]
   22a92:	b25b      	sxtb	r3, r3
   22a94:	2b00      	cmp	r3, #0
   22a96:	d131      	bne.n	22afc <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   22a98:	683b      	ldr	r3, [r7, #0]
   22a9a:	2280      	movs	r2, #128	; 0x80
   22a9c:	0052      	lsls	r2, r2, #1
   22a9e:	4313      	orrs	r3, r2
   22aa0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   22aa2:	683b      	ldr	r3, [r7, #0]
   22aa4:	1dfc      	adds	r4, r7, #7
   22aa6:	4a1b      	ldr	r2, [pc, #108]	; (22b14 <enable_interrupts+0xa8>)
   22aa8:	0019      	movs	r1, r3
   22aaa:	0010      	movs	r0, r2
   22aac:	4b1b      	ldr	r3, [pc, #108]	; (22b1c <enable_interrupts+0xb0>)
   22aae:	4798      	blx	r3
   22ab0:	0003      	movs	r3, r0
   22ab2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   22ab4:	1dfb      	adds	r3, r7, #7
   22ab6:	781b      	ldrb	r3, [r3, #0]
   22ab8:	b25b      	sxtb	r3, r3
   22aba:	2b00      	cmp	r3, #0
   22abc:	d120      	bne.n	22b00 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   22abe:	1dfc      	adds	r4, r7, #7
   22ac0:	003a      	movs	r2, r7
   22ac2:	23d0      	movs	r3, #208	; 0xd0
   22ac4:	015b      	lsls	r3, r3, #5
   22ac6:	0011      	movs	r1, r2
   22ac8:	0018      	movs	r0, r3
   22aca:	4b13      	ldr	r3, [pc, #76]	; (22b18 <enable_interrupts+0xac>)
   22acc:	4798      	blx	r3
   22ace:	0003      	movs	r3, r0
   22ad0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   22ad2:	1dfb      	adds	r3, r7, #7
   22ad4:	781b      	ldrb	r3, [r3, #0]
   22ad6:	b25b      	sxtb	r3, r3
   22ad8:	2b00      	cmp	r3, #0
   22ada:	d113      	bne.n	22b04 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   22adc:	683b      	ldr	r3, [r7, #0]
   22ade:	2280      	movs	r2, #128	; 0x80
   22ae0:	0252      	lsls	r2, r2, #9
   22ae2:	4313      	orrs	r3, r2
   22ae4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   22ae6:	683a      	ldr	r2, [r7, #0]
   22ae8:	1dfc      	adds	r4, r7, #7
   22aea:	23d0      	movs	r3, #208	; 0xd0
   22aec:	015b      	lsls	r3, r3, #5
   22aee:	0011      	movs	r1, r2
   22af0:	0018      	movs	r0, r3
   22af2:	4b0a      	ldr	r3, [pc, #40]	; (22b1c <enable_interrupts+0xb0>)
   22af4:	4798      	blx	r3
   22af6:	0003      	movs	r3, r0
   22af8:	7023      	strb	r3, [r4, #0]
   22afa:	e004      	b.n	22b06 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22afc:	46c0      	nop			; (mov r8, r8)
   22afe:	e002      	b.n	22b06 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22b00:	46c0      	nop			; (mov r8, r8)
   22b02:	e000      	b.n	22b06 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22b04:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   22b06:	1dfb      	adds	r3, r7, #7
   22b08:	781b      	ldrb	r3, [r3, #0]
   22b0a:	b25b      	sxtb	r3, r3
}
   22b0c:	0018      	movs	r0, r3
   22b0e:	46bd      	mov	sp, r7
   22b10:	b003      	add	sp, #12
   22b12:	bd90      	pop	{r4, r7, pc}
   22b14:	00001408 	.word	0x00001408
   22b18:	00023221 	.word	0x00023221
   22b1c:	00023245 	.word	0x00023245

00022b20 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   22b20:	b580      	push	{r7, lr}
   22b22:	b082      	sub	sp, #8
   22b24:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   22b26:	4b32      	ldr	r3, [pc, #200]	; (22bf0 <nmi_get_chipid+0xd0>)
   22b28:	681b      	ldr	r3, [r3, #0]
   22b2a:	2b00      	cmp	r3, #0
   22b2c:	d159      	bne.n	22be2 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   22b2e:	4a30      	ldr	r2, [pc, #192]	; (22bf0 <nmi_get_chipid+0xd0>)
   22b30:	2380      	movs	r3, #128	; 0x80
   22b32:	015b      	lsls	r3, r3, #5
   22b34:	0011      	movs	r1, r2
   22b36:	0018      	movs	r0, r3
   22b38:	4b2e      	ldr	r3, [pc, #184]	; (22bf4 <nmi_get_chipid+0xd4>)
   22b3a:	4798      	blx	r3
   22b3c:	1e03      	subs	r3, r0, #0
   22b3e:	d004      	beq.n	22b4a <nmi_get_chipid+0x2a>
			chipid = 0;
   22b40:	4b2b      	ldr	r3, [pc, #172]	; (22bf0 <nmi_get_chipid+0xd0>)
   22b42:	2200      	movs	r2, #0
   22b44:	601a      	str	r2, [r3, #0]
			return 0;
   22b46:	2300      	movs	r3, #0
   22b48:	e04d      	b.n	22be6 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   22b4a:	1d3b      	adds	r3, r7, #4
   22b4c:	4a2a      	ldr	r2, [pc, #168]	; (22bf8 <nmi_get_chipid+0xd8>)
   22b4e:	0019      	movs	r1, r3
   22b50:	0010      	movs	r0, r2
   22b52:	4b28      	ldr	r3, [pc, #160]	; (22bf4 <nmi_get_chipid+0xd4>)
   22b54:	4798      	blx	r3
   22b56:	1e03      	subs	r3, r0, #0
   22b58:	d004      	beq.n	22b64 <nmi_get_chipid+0x44>
			chipid = 0;
   22b5a:	4b25      	ldr	r3, [pc, #148]	; (22bf0 <nmi_get_chipid+0xd0>)
   22b5c:	2200      	movs	r2, #0
   22b5e:	601a      	str	r2, [r3, #0]
			return 0;
   22b60:	2300      	movs	r3, #0
   22b62:	e040      	b.n	22be6 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   22b64:	4b22      	ldr	r3, [pc, #136]	; (22bf0 <nmi_get_chipid+0xd0>)
   22b66:	681b      	ldr	r3, [r3, #0]
   22b68:	4a24      	ldr	r2, [pc, #144]	; (22bfc <nmi_get_chipid+0xdc>)
   22b6a:	4293      	cmp	r3, r2
   22b6c:	d106      	bne.n	22b7c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   22b6e:	687b      	ldr	r3, [r7, #4]
   22b70:	2b01      	cmp	r3, #1
   22b72:	d029      	beq.n	22bc8 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   22b74:	4b1e      	ldr	r3, [pc, #120]	; (22bf0 <nmi_get_chipid+0xd0>)
   22b76:	4a22      	ldr	r2, [pc, #136]	; (22c00 <nmi_get_chipid+0xe0>)
   22b78:	601a      	str	r2, [r3, #0]
   22b7a:	e025      	b.n	22bc8 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   22b7c:	4b1c      	ldr	r3, [pc, #112]	; (22bf0 <nmi_get_chipid+0xd0>)
   22b7e:	681b      	ldr	r3, [r3, #0]
   22b80:	4a20      	ldr	r2, [pc, #128]	; (22c04 <nmi_get_chipid+0xe4>)
   22b82:	4293      	cmp	r3, r2
   22b84:	d10d      	bne.n	22ba2 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   22b86:	687b      	ldr	r3, [r7, #4]
   22b88:	2b03      	cmp	r3, #3
   22b8a:	d01d      	beq.n	22bc8 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   22b8c:	687b      	ldr	r3, [r7, #4]
   22b8e:	2b04      	cmp	r3, #4
   22b90:	d103      	bne.n	22b9a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   22b92:	4b17      	ldr	r3, [pc, #92]	; (22bf0 <nmi_get_chipid+0xd0>)
   22b94:	4a1c      	ldr	r2, [pc, #112]	; (22c08 <nmi_get_chipid+0xe8>)
   22b96:	601a      	str	r2, [r3, #0]
   22b98:	e016      	b.n	22bc8 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   22b9a:	4b15      	ldr	r3, [pc, #84]	; (22bf0 <nmi_get_chipid+0xd0>)
   22b9c:	4a1b      	ldr	r2, [pc, #108]	; (22c0c <nmi_get_chipid+0xec>)
   22b9e:	601a      	str	r2, [r3, #0]
   22ba0:	e012      	b.n	22bc8 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   22ba2:	4b13      	ldr	r3, [pc, #76]	; (22bf0 <nmi_get_chipid+0xd0>)
   22ba4:	681b      	ldr	r3, [r3, #0]
   22ba6:	4a1a      	ldr	r2, [pc, #104]	; (22c10 <nmi_get_chipid+0xf0>)
   22ba8:	4293      	cmp	r3, r2
   22baa:	d10d      	bne.n	22bc8 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   22bac:	4a10      	ldr	r2, [pc, #64]	; (22bf0 <nmi_get_chipid+0xd0>)
   22bae:	23ec      	movs	r3, #236	; 0xec
   22bb0:	039b      	lsls	r3, r3, #14
   22bb2:	0011      	movs	r1, r2
   22bb4:	0018      	movs	r0, r3
   22bb6:	4b0f      	ldr	r3, [pc, #60]	; (22bf4 <nmi_get_chipid+0xd4>)
   22bb8:	4798      	blx	r3
   22bba:	1e03      	subs	r3, r0, #0
   22bbc:	d004      	beq.n	22bc8 <nmi_get_chipid+0xa8>
			chipid = 0;
   22bbe:	4b0c      	ldr	r3, [pc, #48]	; (22bf0 <nmi_get_chipid+0xd0>)
   22bc0:	2200      	movs	r2, #0
   22bc2:	601a      	str	r2, [r3, #0]
			return 0;
   22bc4:	2300      	movs	r3, #0
   22bc6:	e00e      	b.n	22be6 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   22bc8:	4b09      	ldr	r3, [pc, #36]	; (22bf0 <nmi_get_chipid+0xd0>)
   22bca:	681b      	ldr	r3, [r3, #0]
   22bcc:	4a11      	ldr	r2, [pc, #68]	; (22c14 <nmi_get_chipid+0xf4>)
   22bce:	401a      	ands	r2, r3
   22bd0:	4b07      	ldr	r3, [pc, #28]	; (22bf0 <nmi_get_chipid+0xd0>)
   22bd2:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   22bd4:	4b06      	ldr	r3, [pc, #24]	; (22bf0 <nmi_get_chipid+0xd0>)
   22bd6:	681b      	ldr	r3, [r3, #0]
   22bd8:	22a0      	movs	r2, #160	; 0xa0
   22bda:	02d2      	lsls	r2, r2, #11
   22bdc:	431a      	orrs	r2, r3
   22bde:	4b04      	ldr	r3, [pc, #16]	; (22bf0 <nmi_get_chipid+0xd0>)
   22be0:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   22be2:	4b03      	ldr	r3, [pc, #12]	; (22bf0 <nmi_get_chipid+0xd0>)
   22be4:	681b      	ldr	r3, [r3, #0]
}
   22be6:	0018      	movs	r0, r3
   22be8:	46bd      	mov	sp, r7
   22bea:	b002      	add	sp, #8
   22bec:	bd80      	pop	{r7, pc}
   22bee:	46c0      	nop			; (mov r8, r8)
   22bf0:	200042ac 	.word	0x200042ac
   22bf4:	00023221 	.word	0x00023221
   22bf8:	000013f4 	.word	0x000013f4
   22bfc:	001002a0 	.word	0x001002a0
   22c00:	001002a1 	.word	0x001002a1
   22c04:	001002b0 	.word	0x001002b0
   22c08:	001002b1 	.word	0x001002b1
   22c0c:	001002b2 	.word	0x001002b2
   22c10:	001000f0 	.word	0x001000f0
   22c14:	fff0ffff 	.word	0xfff0ffff

00022c18 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   22c18:	b590      	push	{r4, r7, lr}
   22c1a:	b083      	sub	sp, #12
   22c1c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   22c1e:	1dfb      	adds	r3, r7, #7
   22c20:	2200      	movs	r2, #0
   22c22:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22c24:	1dfc      	adds	r4, r7, #7
   22c26:	003b      	movs	r3, r7
   22c28:	0019      	movs	r1, r3
   22c2a:	2010      	movs	r0, #16
   22c2c:	4b2e      	ldr	r3, [pc, #184]	; (22ce8 <chip_sleep+0xd0>)
   22c2e:	4798      	blx	r3
   22c30:	0003      	movs	r3, r0
   22c32:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   22c34:	1dfb      	adds	r3, r7, #7
   22c36:	781b      	ldrb	r3, [r3, #0]
   22c38:	b25b      	sxtb	r3, r3
   22c3a:	2b00      	cmp	r3, #0
   22c3c:	d145      	bne.n	22cca <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   22c3e:	683b      	ldr	r3, [r7, #0]
   22c40:	2201      	movs	r2, #1
   22c42:	4013      	ands	r3, r2
   22c44:	d000      	beq.n	22c48 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22c46:	e7ed      	b.n	22c24 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   22c48:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   22c4a:	1dfc      	adds	r4, r7, #7
   22c4c:	003b      	movs	r3, r7
   22c4e:	0019      	movs	r1, r3
   22c50:	2001      	movs	r0, #1
   22c52:	4b25      	ldr	r3, [pc, #148]	; (22ce8 <chip_sleep+0xd0>)
   22c54:	4798      	blx	r3
   22c56:	0003      	movs	r3, r0
   22c58:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22c5a:	1dfb      	adds	r3, r7, #7
   22c5c:	781b      	ldrb	r3, [r3, #0]
   22c5e:	b25b      	sxtb	r3, r3
   22c60:	2b00      	cmp	r3, #0
   22c62:	d134      	bne.n	22cce <chip_sleep+0xb6>
	if(reg & NBIT1)
   22c64:	683b      	ldr	r3, [r7, #0]
   22c66:	2202      	movs	r2, #2
   22c68:	4013      	ands	r3, r2
   22c6a:	d010      	beq.n	22c8e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   22c6c:	683b      	ldr	r3, [r7, #0]
   22c6e:	2202      	movs	r2, #2
   22c70:	4393      	bics	r3, r2
   22c72:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   22c74:	683b      	ldr	r3, [r7, #0]
   22c76:	1dfc      	adds	r4, r7, #7
   22c78:	0019      	movs	r1, r3
   22c7a:	2001      	movs	r0, #1
   22c7c:	4b1b      	ldr	r3, [pc, #108]	; (22cec <chip_sleep+0xd4>)
   22c7e:	4798      	blx	r3
   22c80:	0003      	movs	r3, r0
   22c82:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   22c84:	1dfb      	adds	r3, r7, #7
   22c86:	781b      	ldrb	r3, [r3, #0]
   22c88:	b25b      	sxtb	r3, r3
   22c8a:	2b00      	cmp	r3, #0
   22c8c:	d121      	bne.n	22cd2 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   22c8e:	1dfc      	adds	r4, r7, #7
   22c90:	003b      	movs	r3, r7
   22c92:	0019      	movs	r1, r3
   22c94:	200b      	movs	r0, #11
   22c96:	4b14      	ldr	r3, [pc, #80]	; (22ce8 <chip_sleep+0xd0>)
   22c98:	4798      	blx	r3
   22c9a:	0003      	movs	r3, r0
   22c9c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22c9e:	1dfb      	adds	r3, r7, #7
   22ca0:	781b      	ldrb	r3, [r3, #0]
   22ca2:	b25b      	sxtb	r3, r3
   22ca4:	2b00      	cmp	r3, #0
   22ca6:	d116      	bne.n	22cd6 <chip_sleep+0xbe>
	if(reg & NBIT0)
   22ca8:	683b      	ldr	r3, [r7, #0]
   22caa:	2201      	movs	r2, #1
   22cac:	4013      	ands	r3, r2
   22cae:	d013      	beq.n	22cd8 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   22cb0:	683b      	ldr	r3, [r7, #0]
   22cb2:	2201      	movs	r2, #1
   22cb4:	4393      	bics	r3, r2
   22cb6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   22cb8:	683b      	ldr	r3, [r7, #0]
   22cba:	1dfc      	adds	r4, r7, #7
   22cbc:	0019      	movs	r1, r3
   22cbe:	200b      	movs	r0, #11
   22cc0:	4b0a      	ldr	r3, [pc, #40]	; (22cec <chip_sleep+0xd4>)
   22cc2:	4798      	blx	r3
   22cc4:	0003      	movs	r3, r0
   22cc6:	7023      	strb	r3, [r4, #0]
   22cc8:	e006      	b.n	22cd8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   22cca:	46c0      	nop			; (mov r8, r8)
   22ccc:	e004      	b.n	22cd8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   22cce:	46c0      	nop			; (mov r8, r8)
   22cd0:	e002      	b.n	22cd8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   22cd2:	46c0      	nop			; (mov r8, r8)
   22cd4:	e000      	b.n	22cd8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   22cd6:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   22cd8:	1dfb      	adds	r3, r7, #7
   22cda:	781b      	ldrb	r3, [r3, #0]
   22cdc:	b25b      	sxtb	r3, r3
}
   22cde:	0018      	movs	r0, r3
   22ce0:	46bd      	mov	sp, r7
   22ce2:	b003      	add	sp, #12
   22ce4:	bd90      	pop	{r4, r7, pc}
   22ce6:	46c0      	nop			; (mov r8, r8)
   22ce8:	00023221 	.word	0x00023221
   22cec:	00023245 	.word	0x00023245

00022cf0 <chip_wake>:
sint8 chip_wake(void)
{
   22cf0:	b590      	push	{r4, r7, lr}
   22cf2:	b085      	sub	sp, #20
   22cf4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22cf6:	230f      	movs	r3, #15
   22cf8:	18fb      	adds	r3, r7, r3
   22cfa:	2200      	movs	r2, #0
   22cfc:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   22cfe:	2300      	movs	r3, #0
   22d00:	607b      	str	r3, [r7, #4]
   22d02:	2300      	movs	r3, #0
   22d04:	603b      	str	r3, [r7, #0]
   22d06:	2300      	movs	r3, #0
   22d08:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   22d0a:	230f      	movs	r3, #15
   22d0c:	18fc      	adds	r4, r7, r3
   22d0e:	1d3b      	adds	r3, r7, #4
   22d10:	0019      	movs	r1, r3
   22d12:	200b      	movs	r0, #11
   22d14:	4b4e      	ldr	r3, [pc, #312]	; (22e50 <chip_wake+0x160>)
   22d16:	4798      	blx	r3
   22d18:	0003      	movs	r3, r0
   22d1a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22d1c:	230f      	movs	r3, #15
   22d1e:	18fb      	adds	r3, r7, r3
   22d20:	781b      	ldrb	r3, [r3, #0]
   22d22:	b25b      	sxtb	r3, r3
   22d24:	2b00      	cmp	r3, #0
   22d26:	d000      	beq.n	22d2a <chip_wake+0x3a>
   22d28:	e082      	b.n	22e30 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   22d2a:	687b      	ldr	r3, [r7, #4]
   22d2c:	2201      	movs	r2, #1
   22d2e:	4013      	ands	r3, r2
   22d30:	d111      	bne.n	22d56 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   22d32:	687b      	ldr	r3, [r7, #4]
   22d34:	2201      	movs	r2, #1
   22d36:	4313      	orrs	r3, r2
   22d38:	220f      	movs	r2, #15
   22d3a:	18bc      	adds	r4, r7, r2
   22d3c:	0019      	movs	r1, r3
   22d3e:	200b      	movs	r0, #11
   22d40:	4b44      	ldr	r3, [pc, #272]	; (22e54 <chip_wake+0x164>)
   22d42:	4798      	blx	r3
   22d44:	0003      	movs	r3, r0
   22d46:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22d48:	230f      	movs	r3, #15
   22d4a:	18fb      	adds	r3, r7, r3
   22d4c:	781b      	ldrb	r3, [r3, #0]
   22d4e:	b25b      	sxtb	r3, r3
   22d50:	2b00      	cmp	r3, #0
   22d52:	d000      	beq.n	22d56 <chip_wake+0x66>
   22d54:	e06e      	b.n	22e34 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   22d56:	230f      	movs	r3, #15
   22d58:	18fc      	adds	r4, r7, r3
   22d5a:	1d3b      	adds	r3, r7, #4
   22d5c:	0019      	movs	r1, r3
   22d5e:	2001      	movs	r0, #1
   22d60:	4b3b      	ldr	r3, [pc, #236]	; (22e50 <chip_wake+0x160>)
   22d62:	4798      	blx	r3
   22d64:	0003      	movs	r3, r0
   22d66:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22d68:	230f      	movs	r3, #15
   22d6a:	18fb      	adds	r3, r7, r3
   22d6c:	781b      	ldrb	r3, [r3, #0]
   22d6e:	b25b      	sxtb	r3, r3
   22d70:	2b00      	cmp	r3, #0
   22d72:	d161      	bne.n	22e38 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   22d74:	687b      	ldr	r3, [r7, #4]
   22d76:	2202      	movs	r2, #2
   22d78:	4013      	ands	r3, r2
   22d7a:	d110      	bne.n	22d9e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   22d7c:	687b      	ldr	r3, [r7, #4]
   22d7e:	2202      	movs	r2, #2
   22d80:	4313      	orrs	r3, r2
   22d82:	220f      	movs	r2, #15
   22d84:	18bc      	adds	r4, r7, r2
   22d86:	0019      	movs	r1, r3
   22d88:	2001      	movs	r0, #1
   22d8a:	4b32      	ldr	r3, [pc, #200]	; (22e54 <chip_wake+0x164>)
   22d8c:	4798      	blx	r3
   22d8e:	0003      	movs	r3, r0
   22d90:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22d92:	230f      	movs	r3, #15
   22d94:	18fb      	adds	r3, r7, r3
   22d96:	781b      	ldrb	r3, [r3, #0]
   22d98:	b25b      	sxtb	r3, r3
   22d9a:	2b00      	cmp	r3, #0
   22d9c:	d14e      	bne.n	22e3c <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   22d9e:	230f      	movs	r3, #15
   22da0:	18fc      	adds	r4, r7, r3
   22da2:	003b      	movs	r3, r7
   22da4:	0019      	movs	r1, r3
   22da6:	200f      	movs	r0, #15
   22da8:	4b29      	ldr	r3, [pc, #164]	; (22e50 <chip_wake+0x160>)
   22daa:	4798      	blx	r3
   22dac:	0003      	movs	r3, r0
   22dae:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   22db0:	230f      	movs	r3, #15
   22db2:	18fb      	adds	r3, r7, r3
   22db4:	781b      	ldrb	r3, [r3, #0]
   22db6:	b25b      	sxtb	r3, r3
   22db8:	2b00      	cmp	r3, #0
   22dba:	d014      	beq.n	22de6 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   22dbc:	23a8      	movs	r3, #168	; 0xa8
   22dbe:	005a      	lsls	r2, r3, #1
   22dc0:	4925      	ldr	r1, [pc, #148]	; (22e58 <chip_wake+0x168>)
   22dc2:	4b26      	ldr	r3, [pc, #152]	; (22e5c <chip_wake+0x16c>)
   22dc4:	0018      	movs	r0, r3
   22dc6:	4b26      	ldr	r3, [pc, #152]	; (22e60 <chip_wake+0x170>)
   22dc8:	4798      	blx	r3
   22dca:	230f      	movs	r3, #15
   22dcc:	18fb      	adds	r3, r7, r3
   22dce:	2100      	movs	r1, #0
   22dd0:	5659      	ldrsb	r1, [r3, r1]
   22dd2:	683a      	ldr	r2, [r7, #0]
   22dd4:	4b23      	ldr	r3, [pc, #140]	; (22e64 <chip_wake+0x174>)
   22dd6:	0018      	movs	r0, r3
   22dd8:	4b21      	ldr	r3, [pc, #132]	; (22e60 <chip_wake+0x170>)
   22dda:	4798      	blx	r3
   22ddc:	4b22      	ldr	r3, [pc, #136]	; (22e68 <chip_wake+0x178>)
   22dde:	0018      	movs	r0, r3
   22de0:	4b1f      	ldr	r3, [pc, #124]	; (22e60 <chip_wake+0x170>)
   22de2:	4798      	blx	r3
			goto _WAKE_EXIT;
   22de4:	e02b      	b.n	22e3e <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   22de6:	683b      	ldr	r3, [r7, #0]
   22de8:	2204      	movs	r2, #4
   22dea:	4013      	ands	r3, r2
   22dec:	d11c      	bne.n	22e28 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   22dee:	2002      	movs	r0, #2
   22df0:	4b1e      	ldr	r3, [pc, #120]	; (22e6c <chip_wake+0x17c>)
   22df2:	4798      	blx	r3
		trials++;
   22df4:	68bb      	ldr	r3, [r7, #8]
   22df6:	3301      	adds	r3, #1
   22df8:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   22dfa:	68bb      	ldr	r3, [r7, #8]
   22dfc:	2b04      	cmp	r3, #4
   22dfe:	d9ce      	bls.n	22d9e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   22e00:	23ad      	movs	r3, #173	; 0xad
   22e02:	005a      	lsls	r2, r3, #1
   22e04:	4914      	ldr	r1, [pc, #80]	; (22e58 <chip_wake+0x168>)
   22e06:	4b15      	ldr	r3, [pc, #84]	; (22e5c <chip_wake+0x16c>)
   22e08:	0018      	movs	r0, r3
   22e0a:	4b15      	ldr	r3, [pc, #84]	; (22e60 <chip_wake+0x170>)
   22e0c:	4798      	blx	r3
   22e0e:	4b18      	ldr	r3, [pc, #96]	; (22e70 <chip_wake+0x180>)
   22e10:	0018      	movs	r0, r3
   22e12:	4b13      	ldr	r3, [pc, #76]	; (22e60 <chip_wake+0x170>)
   22e14:	4798      	blx	r3
   22e16:	4b14      	ldr	r3, [pc, #80]	; (22e68 <chip_wake+0x178>)
   22e18:	0018      	movs	r0, r3
   22e1a:	4b11      	ldr	r3, [pc, #68]	; (22e60 <chip_wake+0x170>)
   22e1c:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   22e1e:	230f      	movs	r3, #15
   22e20:	18fb      	adds	r3, r7, r3
   22e22:	22fc      	movs	r2, #252	; 0xfc
   22e24:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   22e26:	e00a      	b.n	22e3e <chip_wake+0x14e>
			break;
   22e28:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   22e2a:	4b12      	ldr	r3, [pc, #72]	; (22e74 <chip_wake+0x184>)
   22e2c:	4798      	blx	r3
   22e2e:	e006      	b.n	22e3e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22e30:	46c0      	nop			; (mov r8, r8)
   22e32:	e004      	b.n	22e3e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22e34:	46c0      	nop			; (mov r8, r8)
   22e36:	e002      	b.n	22e3e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22e38:	46c0      	nop			; (mov r8, r8)
   22e3a:	e000      	b.n	22e3e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22e3c:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   22e3e:	230f      	movs	r3, #15
   22e40:	18fb      	adds	r3, r7, r3
   22e42:	781b      	ldrb	r3, [r3, #0]
   22e44:	b25b      	sxtb	r3, r3
}
   22e46:	0018      	movs	r0, r3
   22e48:	46bd      	mov	sp, r7
   22e4a:	b005      	add	sp, #20
   22e4c:	bd90      	pop	{r4, r7, pc}
   22e4e:	46c0      	nop			; (mov r8, r8)
   22e50:	00023221 	.word	0x00023221
   22e54:	00023245 	.word	0x00023245
   22e58:	000393bc 	.word	0x000393bc
   22e5c:	00039330 	.word	0x00039330
   22e60:	0001e3f9 	.word	0x0001e3f9
   22e64:	00039344 	.word	0x00039344
   22e68:	0003935c 	.word	0x0003935c
   22e6c:	000208b1 	.word	0x000208b1
   22e70:	00039360 	.word	0x00039360
   22e74:	000231e1 	.word	0x000231e1

00022e78 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   22e78:	b580      	push	{r7, lr}
   22e7a:	b088      	sub	sp, #32
   22e7c:	af00      	add	r7, sp, #0
   22e7e:	0002      	movs	r2, r0
   22e80:	1dfb      	adds	r3, r7, #7
   22e82:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22e84:	2313      	movs	r3, #19
   22e86:	18fb      	adds	r3, r7, r3
   22e88:	2200      	movs	r2, #0
   22e8a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22e8c:	2300      	movs	r3, #0
   22e8e:	61fb      	str	r3, [r7, #28]
   22e90:	2300      	movs	r3, #0
   22e92:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   22e94:	2300      	movs	r3, #0
   22e96:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   22e98:	4b4a      	ldr	r3, [pc, #296]	; (22fc4 <wait_for_bootrom+0x14c>)
   22e9a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   22e9c:	2300      	movs	r3, #0
   22e9e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22ea0:	4b49      	ldr	r3, [pc, #292]	; (22fc8 <wait_for_bootrom+0x150>)
   22ea2:	0018      	movs	r0, r3
   22ea4:	4b49      	ldr	r3, [pc, #292]	; (22fcc <wait_for_bootrom+0x154>)
   22ea6:	4798      	blx	r3
   22ea8:	0003      	movs	r3, r0
   22eaa:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   22eac:	69fb      	ldr	r3, [r7, #28]
   22eae:	2b00      	cmp	r3, #0
   22eb0:	db03      	blt.n	22eba <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   22eb2:	2001      	movs	r0, #1
   22eb4:	4b46      	ldr	r3, [pc, #280]	; (22fd0 <wait_for_bootrom+0x158>)
   22eb6:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22eb8:	e7f2      	b.n	22ea0 <wait_for_bootrom+0x28>
			break;
   22eba:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   22ebc:	4b45      	ldr	r3, [pc, #276]	; (22fd4 <wait_for_bootrom+0x15c>)
   22ebe:	0018      	movs	r0, r3
   22ec0:	4b42      	ldr	r3, [pc, #264]	; (22fcc <wait_for_bootrom+0x154>)
   22ec2:	4798      	blx	r3
   22ec4:	0003      	movs	r3, r0
   22ec6:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   22ec8:	69fb      	ldr	r3, [r7, #28]
   22eca:	2201      	movs	r2, #1
   22ecc:	4013      	ands	r3, r2
   22ece:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   22ed0:	69fb      	ldr	r3, [r7, #28]
   22ed2:	2b00      	cmp	r3, #0
   22ed4:	d112      	bne.n	22efc <wait_for_bootrom+0x84>
	{
		reg = 0;
   22ed6:	2300      	movs	r3, #0
   22ed8:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   22eda:	e00b      	b.n	22ef4 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   22edc:	2001      	movs	r0, #1
   22ede:	4b3c      	ldr	r3, [pc, #240]	; (22fd0 <wait_for_bootrom+0x158>)
   22ee0:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   22ee2:	4b3d      	ldr	r3, [pc, #244]	; (22fd8 <wait_for_bootrom+0x160>)
   22ee4:	0018      	movs	r0, r3
   22ee6:	4b39      	ldr	r3, [pc, #228]	; (22fcc <wait_for_bootrom+0x154>)
   22ee8:	4798      	blx	r3
   22eea:	0003      	movs	r3, r0
   22eec:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   22eee:	69bb      	ldr	r3, [r7, #24]
   22ef0:	3301      	adds	r3, #1
   22ef2:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   22ef4:	69fb      	ldr	r3, [r7, #28]
   22ef6:	4a39      	ldr	r2, [pc, #228]	; (22fdc <wait_for_bootrom+0x164>)
   22ef8:	4293      	cmp	r3, r2
   22efa:	d1ef      	bne.n	22edc <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   22efc:	1dfb      	adds	r3, r7, #7
   22efe:	781b      	ldrb	r3, [r3, #0]
   22f00:	2b02      	cmp	r3, #2
   22f02:	d10d      	bne.n	22f20 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22f04:	4a36      	ldr	r2, [pc, #216]	; (22fe0 <wait_for_bootrom+0x168>)
   22f06:	4b37      	ldr	r3, [pc, #220]	; (22fe4 <wait_for_bootrom+0x16c>)
   22f08:	0011      	movs	r1, r2
   22f0a:	0018      	movs	r0, r3
   22f0c:	4b36      	ldr	r3, [pc, #216]	; (22fe8 <wait_for_bootrom+0x170>)
   22f0e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   22f10:	2380      	movs	r3, #128	; 0x80
   22f12:	035b      	lsls	r3, r3, #13
   22f14:	4a35      	ldr	r2, [pc, #212]	; (22fec <wait_for_bootrom+0x174>)
   22f16:	0019      	movs	r1, r3
   22f18:	0010      	movs	r0, r2
   22f1a:	4b33      	ldr	r3, [pc, #204]	; (22fe8 <wait_for_bootrom+0x170>)
   22f1c:	4798      	blx	r3
   22f1e:	e022      	b.n	22f66 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   22f20:	1dfb      	adds	r3, r7, #7
   22f22:	781b      	ldrb	r3, [r3, #0]
   22f24:	2b03      	cmp	r3, #3
   22f26:	d10b      	bne.n	22f40 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22f28:	4a2d      	ldr	r2, [pc, #180]	; (22fe0 <wait_for_bootrom+0x168>)
   22f2a:	4b2e      	ldr	r3, [pc, #184]	; (22fe4 <wait_for_bootrom+0x16c>)
   22f2c:	0011      	movs	r1, r2
   22f2e:	0018      	movs	r0, r3
   22f30:	4b2d      	ldr	r3, [pc, #180]	; (22fe8 <wait_for_bootrom+0x170>)
   22f32:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   22f34:	4b2d      	ldr	r3, [pc, #180]	; (22fec <wait_for_bootrom+0x174>)
   22f36:	2100      	movs	r1, #0
   22f38:	0018      	movs	r0, r3
   22f3a:	4b2b      	ldr	r3, [pc, #172]	; (22fe8 <wait_for_bootrom+0x170>)
   22f3c:	4798      	blx	r3
   22f3e:	e012      	b.n	22f66 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   22f40:	1dfb      	adds	r3, r7, #7
   22f42:	781b      	ldrb	r3, [r3, #0]
   22f44:	2b04      	cmp	r3, #4
   22f46:	d108      	bne.n	22f5a <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   22f48:	2380      	movs	r3, #128	; 0x80
   22f4a:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   22f4c:	68fb      	ldr	r3, [r7, #12]
   22f4e:	4a27      	ldr	r2, [pc, #156]	; (22fec <wait_for_bootrom+0x174>)
   22f50:	0019      	movs	r1, r3
   22f52:	0010      	movs	r0, r2
   22f54:	4b24      	ldr	r3, [pc, #144]	; (22fe8 <wait_for_bootrom+0x170>)
   22f56:	4798      	blx	r3
   22f58:	e005      	b.n	22f66 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   22f5a:	68fb      	ldr	r3, [r7, #12]
   22f5c:	4a23      	ldr	r2, [pc, #140]	; (22fec <wait_for_bootrom+0x174>)
   22f5e:	0019      	movs	r1, r3
   22f60:	0010      	movs	r0, r2
   22f62:	4b21      	ldr	r3, [pc, #132]	; (22fe8 <wait_for_bootrom+0x170>)
   22f64:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   22f66:	4b22      	ldr	r3, [pc, #136]	; (22ff0 <wait_for_bootrom+0x178>)
   22f68:	4798      	blx	r3
   22f6a:	0003      	movs	r3, r0
   22f6c:	051b      	lsls	r3, r3, #20
   22f6e:	0d1b      	lsrs	r3, r3, #20
   22f70:	4a20      	ldr	r2, [pc, #128]	; (22ff4 <wait_for_bootrom+0x17c>)
   22f72:	4293      	cmp	r3, r2
   22f74:	d906      	bls.n	22f84 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   22f76:	697b      	ldr	r3, [r7, #20]
   22f78:	2202      	movs	r2, #2
   22f7a:	4313      	orrs	r3, r2
   22f7c:	0018      	movs	r0, r3
   22f7e:	4b1e      	ldr	r3, [pc, #120]	; (22ff8 <wait_for_bootrom+0x180>)
   22f80:	4798      	blx	r3
   22f82:	e003      	b.n	22f8c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   22f84:	697b      	ldr	r3, [r7, #20]
   22f86:	0018      	movs	r0, r3
   22f88:	4b1b      	ldr	r3, [pc, #108]	; (22ff8 <wait_for_bootrom+0x180>)
   22f8a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   22f8c:	4b1b      	ldr	r3, [pc, #108]	; (22ffc <wait_for_bootrom+0x184>)
   22f8e:	0018      	movs	r0, r3
   22f90:	4b1b      	ldr	r3, [pc, #108]	; (23000 <wait_for_bootrom+0x188>)
   22f92:	4798      	blx	r3
   22f94:	68fa      	ldr	r2, [r7, #12]
   22f96:	4b1b      	ldr	r3, [pc, #108]	; (23004 <wait_for_bootrom+0x18c>)
   22f98:	0011      	movs	r1, r2
   22f9a:	0018      	movs	r0, r3
   22f9c:	4b18      	ldr	r3, [pc, #96]	; (23000 <wait_for_bootrom+0x188>)
   22f9e:	4798      	blx	r3
   22fa0:	4b19      	ldr	r3, [pc, #100]	; (23008 <wait_for_bootrom+0x190>)
   22fa2:	0018      	movs	r0, r3
   22fa4:	4b16      	ldr	r3, [pc, #88]	; (23000 <wait_for_bootrom+0x188>)
   22fa6:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   22fa8:	4a18      	ldr	r2, [pc, #96]	; (2300c <wait_for_bootrom+0x194>)
   22faa:	4b0b      	ldr	r3, [pc, #44]	; (22fd8 <wait_for_bootrom+0x160>)
   22fac:	0011      	movs	r1, r2
   22fae:	0018      	movs	r0, r3
   22fb0:	4b0d      	ldr	r3, [pc, #52]	; (22fe8 <wait_for_bootrom+0x170>)
   22fb2:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   22fb4:	2313      	movs	r3, #19
   22fb6:	18fb      	adds	r3, r7, r3
   22fb8:	781b      	ldrb	r3, [r3, #0]
   22fba:	b25b      	sxtb	r3, r3
}
   22fbc:	0018      	movs	r0, r3
   22fbe:	46bd      	mov	sp, r7
   22fc0:	b008      	add	sp, #32
   22fc2:	bd80      	pop	{r7, pc}
   22fc4:	13301354 	.word	0x13301354
   22fc8:	00001014 	.word	0x00001014
   22fcc:	00023201 	.word	0x00023201
   22fd0:	000208b1 	.word	0x000208b1
   22fd4:	000207bc 	.word	0x000207bc
   22fd8:	000c000c 	.word	0x000c000c
   22fdc:	10add09e 	.word	0x10add09e
   22fe0:	3c1cd57d 	.word	0x3c1cd57d
   22fe4:	000207ac 	.word	0x000207ac
   22fe8:	00023245 	.word	0x00023245
   22fec:	0000108c 	.word	0x0000108c
   22ff0:	00022b21 	.word	0x00022b21
   22ff4:	0000039f 	.word	0x0000039f
   22ff8:	000229f1 	.word	0x000229f1
   22ffc:	0003937c 	.word	0x0003937c
   23000:	0001e3f9 	.word	0x0001e3f9
   23004:	00039388 	.word	0x00039388
   23008:	0003935c 	.word	0x0003935c
   2300c:	ef522f61 	.word	0xef522f61

00023010 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   23010:	b580      	push	{r7, lr}
   23012:	b088      	sub	sp, #32
   23014:	af00      	add	r7, sp, #0
   23016:	0002      	movs	r2, r0
   23018:	1dfb      	adds	r3, r7, #7
   2301a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2301c:	231f      	movs	r3, #31
   2301e:	18fb      	adds	r3, r7, r3
   23020:	2200      	movs	r2, #0
   23022:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   23024:	2300      	movs	r3, #0
   23026:	61bb      	str	r3, [r7, #24]
   23028:	2300      	movs	r3, #0
   2302a:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   2302c:	2301      	movs	r3, #1
   2302e:	425b      	negs	r3, r3
   23030:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   23032:	4b1d      	ldr	r3, [pc, #116]	; (230a8 <wait_for_firmware_start+0x98>)
   23034:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   23036:	4b1d      	ldr	r3, [pc, #116]	; (230ac <wait_for_firmware_start+0x9c>)
   23038:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   2303a:	1dfb      	adds	r3, r7, #7
   2303c:	781b      	ldrb	r3, [r3, #0]
   2303e:	2b02      	cmp	r3, #2
   23040:	d003      	beq.n	2304a <wait_for_firmware_start+0x3a>
   23042:	1dfb      	adds	r3, r7, #7
   23044:	781b      	ldrb	r3, [r3, #0]
   23046:	2b03      	cmp	r3, #3
   23048:	d119      	bne.n	2307e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   2304a:	4b19      	ldr	r3, [pc, #100]	; (230b0 <wait_for_firmware_start+0xa0>)
   2304c:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   2304e:	4b19      	ldr	r3, [pc, #100]	; (230b4 <wait_for_firmware_start+0xa4>)
   23050:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   23052:	e014      	b.n	2307e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   23054:	2002      	movs	r0, #2
   23056:	4b18      	ldr	r3, [pc, #96]	; (230b8 <wait_for_firmware_start+0xa8>)
   23058:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   2305a:	68fb      	ldr	r3, [r7, #12]
   2305c:	0018      	movs	r0, r3
   2305e:	4b17      	ldr	r3, [pc, #92]	; (230bc <wait_for_firmware_start+0xac>)
   23060:	4798      	blx	r3
   23062:	0003      	movs	r3, r0
   23064:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   23066:	697b      	ldr	r3, [r7, #20]
   23068:	3301      	adds	r3, #1
   2306a:	617b      	str	r3, [r7, #20]
   2306c:	697a      	ldr	r2, [r7, #20]
   2306e:	693b      	ldr	r3, [r7, #16]
   23070:	429a      	cmp	r2, r3
   23072:	d304      	bcc.n	2307e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   23074:	231f      	movs	r3, #31
   23076:	18fb      	adds	r3, r7, r3
   23078:	22fb      	movs	r2, #251	; 0xfb
   2307a:	701a      	strb	r2, [r3, #0]
			goto ERR;
   2307c:	e00c      	b.n	23098 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   2307e:	68ba      	ldr	r2, [r7, #8]
   23080:	69bb      	ldr	r3, [r7, #24]
   23082:	429a      	cmp	r2, r3
   23084:	d1e6      	bne.n	23054 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   23086:	68bb      	ldr	r3, [r7, #8]
   23088:	4a08      	ldr	r2, [pc, #32]	; (230ac <wait_for_firmware_start+0x9c>)
   2308a:	4293      	cmp	r3, r2
   2308c:	d104      	bne.n	23098 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   2308e:	4b06      	ldr	r3, [pc, #24]	; (230a8 <wait_for_firmware_start+0x98>)
   23090:	2100      	movs	r1, #0
   23092:	0018      	movs	r0, r3
   23094:	4b0a      	ldr	r3, [pc, #40]	; (230c0 <wait_for_firmware_start+0xb0>)
   23096:	4798      	blx	r3
	}
ERR:
	return ret;
   23098:	231f      	movs	r3, #31
   2309a:	18fb      	adds	r3, r7, r3
   2309c:	781b      	ldrb	r3, [r3, #0]
   2309e:	b25b      	sxtb	r3, r3
}
   230a0:	0018      	movs	r0, r3
   230a2:	46bd      	mov	sp, r7
   230a4:	b008      	add	sp, #32
   230a6:	bd80      	pop	{r7, pc}
   230a8:	0000108c 	.word	0x0000108c
   230ac:	02532636 	.word	0x02532636
   230b0:	000207ac 	.word	0x000207ac
   230b4:	d75dc1c3 	.word	0xd75dc1c3
   230b8:	000208b1 	.word	0x000208b1
   230bc:	00023201 	.word	0x00023201
   230c0:	00023245 	.word	0x00023245

000230c4 <chip_deinit>:

sint8 chip_deinit(void)
{
   230c4:	b590      	push	{r4, r7, lr}
   230c6:	b083      	sub	sp, #12
   230c8:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   230ca:	2300      	movs	r3, #0
   230cc:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   230ce:	1dfc      	adds	r4, r7, #7
   230d0:	003a      	movs	r2, r7
   230d2:	23a0      	movs	r3, #160	; 0xa0
   230d4:	015b      	lsls	r3, r3, #5
   230d6:	0011      	movs	r1, r2
   230d8:	0018      	movs	r0, r3
   230da:	4b20      	ldr	r3, [pc, #128]	; (2315c <chip_deinit+0x98>)
   230dc:	4798      	blx	r3
   230de:	0003      	movs	r3, r0
   230e0:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   230e2:	1dfb      	adds	r3, r7, #7
   230e4:	781b      	ldrb	r3, [r3, #0]
   230e6:	b25b      	sxtb	r3, r3
   230e8:	2b00      	cmp	r3, #0
   230ea:	d00e      	beq.n	2310a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   230ec:	4a1c      	ldr	r2, [pc, #112]	; (23160 <chip_deinit+0x9c>)
   230ee:	491d      	ldr	r1, [pc, #116]	; (23164 <chip_deinit+0xa0>)
   230f0:	4b1d      	ldr	r3, [pc, #116]	; (23168 <chip_deinit+0xa4>)
   230f2:	0018      	movs	r0, r3
   230f4:	4b1d      	ldr	r3, [pc, #116]	; (2316c <chip_deinit+0xa8>)
   230f6:	4798      	blx	r3
   230f8:	4b1d      	ldr	r3, [pc, #116]	; (23170 <chip_deinit+0xac>)
   230fa:	0018      	movs	r0, r3
   230fc:	4b1b      	ldr	r3, [pc, #108]	; (2316c <chip_deinit+0xa8>)
   230fe:	4798      	blx	r3
   23100:	4b1c      	ldr	r3, [pc, #112]	; (23174 <chip_deinit+0xb0>)
   23102:	0018      	movs	r0, r3
   23104:	4b19      	ldr	r3, [pc, #100]	; (2316c <chip_deinit+0xa8>)
   23106:	4798      	blx	r3
		goto ERR1;
   23108:	e021      	b.n	2314e <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   2310a:	683b      	ldr	r3, [r7, #0]
   2310c:	4a1a      	ldr	r2, [pc, #104]	; (23178 <chip_deinit+0xb4>)
   2310e:	4013      	ands	r3, r2
   23110:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   23112:	683a      	ldr	r2, [r7, #0]
   23114:	1dfc      	adds	r4, r7, #7
   23116:	23a0      	movs	r3, #160	; 0xa0
   23118:	015b      	lsls	r3, r3, #5
   2311a:	0011      	movs	r1, r2
   2311c:	0018      	movs	r0, r3
   2311e:	4b17      	ldr	r3, [pc, #92]	; (2317c <chip_deinit+0xb8>)
   23120:	4798      	blx	r3
   23122:	0003      	movs	r3, r0
   23124:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   23126:	1dfb      	adds	r3, r7, #7
   23128:	781b      	ldrb	r3, [r3, #0]
   2312a:	b25b      	sxtb	r3, r3
   2312c:	2b00      	cmp	r3, #0
   2312e:	d00e      	beq.n	2314e <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   23130:	4a13      	ldr	r2, [pc, #76]	; (23180 <chip_deinit+0xbc>)
   23132:	490c      	ldr	r1, [pc, #48]	; (23164 <chip_deinit+0xa0>)
   23134:	4b0c      	ldr	r3, [pc, #48]	; (23168 <chip_deinit+0xa4>)
   23136:	0018      	movs	r0, r3
   23138:	4b0c      	ldr	r3, [pc, #48]	; (2316c <chip_deinit+0xa8>)
   2313a:	4798      	blx	r3
   2313c:	4b0c      	ldr	r3, [pc, #48]	; (23170 <chip_deinit+0xac>)
   2313e:	0018      	movs	r0, r3
   23140:	4b0a      	ldr	r3, [pc, #40]	; (2316c <chip_deinit+0xa8>)
   23142:	4798      	blx	r3
   23144:	4b0b      	ldr	r3, [pc, #44]	; (23174 <chip_deinit+0xb0>)
   23146:	0018      	movs	r0, r3
   23148:	4b08      	ldr	r3, [pc, #32]	; (2316c <chip_deinit+0xa8>)
   2314a:	4798      	blx	r3
		goto ERR1;
   2314c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2314e:	1dfb      	adds	r3, r7, #7
   23150:	781b      	ldrb	r3, [r3, #0]
   23152:	b25b      	sxtb	r3, r3
}
   23154:	0018      	movs	r0, r3
   23156:	46bd      	mov	sp, r7
   23158:	b003      	add	sp, #12
   2315a:	bd90      	pop	{r4, r7, pc}
   2315c:	00023221 	.word	0x00023221
   23160:	00000201 	.word	0x00000201
   23164:	000393c8 	.word	0x000393c8
   23168:	00039330 	.word	0x00039330
   2316c:	0001e3f9 	.word	0x0001e3f9
   23170:	000393a0 	.word	0x000393a0
   23174:	0003935c 	.word	0x0003935c
   23178:	fffffbff 	.word	0xfffffbff
   2317c:	00023245 	.word	0x00023245
   23180:	00000207 	.word	0x00000207

00023184 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   23184:	b590      	push	{r4, r7, lr}
   23186:	b085      	sub	sp, #20
   23188:	af00      	add	r7, sp, #0
   2318a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2318c:	230f      	movs	r3, #15
   2318e:	18fb      	adds	r3, r7, r3
   23190:	2200      	movs	r2, #0
   23192:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   23194:	230f      	movs	r3, #15
   23196:	18fc      	adds	r4, r7, r3
   23198:	687b      	ldr	r3, [r7, #4]
   2319a:	0018      	movs	r0, r3
   2319c:	4b05      	ldr	r3, [pc, #20]	; (231b4 <nm_bus_iface_init+0x30>)
   2319e:	4798      	blx	r3
   231a0:	0003      	movs	r3, r0
   231a2:	7023      	strb	r3, [r4, #0]
	return ret;
   231a4:	230f      	movs	r3, #15
   231a6:	18fb      	adds	r3, r7, r3
   231a8:	781b      	ldrb	r3, [r3, #0]
   231aa:	b25b      	sxtb	r3, r3
}
   231ac:	0018      	movs	r0, r3
   231ae:	46bd      	mov	sp, r7
   231b0:	b005      	add	sp, #20
   231b2:	bd90      	pop	{r4, r7, pc}
   231b4:	00020f6d 	.word	0x00020f6d

000231b8 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   231b8:	b590      	push	{r4, r7, lr}
   231ba:	b083      	sub	sp, #12
   231bc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   231be:	1dfb      	adds	r3, r7, #7
   231c0:	2200      	movs	r2, #0
   231c2:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   231c4:	1dfc      	adds	r4, r7, #7
   231c6:	4b05      	ldr	r3, [pc, #20]	; (231dc <nm_bus_iface_deinit+0x24>)
   231c8:	4798      	blx	r3
   231ca:	0003      	movs	r3, r0
   231cc:	7023      	strb	r3, [r4, #0]

	return ret;
   231ce:	1dfb      	adds	r3, r7, #7
   231d0:	781b      	ldrb	r3, [r3, #0]
   231d2:	b25b      	sxtb	r3, r3
}
   231d4:	0018      	movs	r0, r3
   231d6:	46bd      	mov	sp, r7
   231d8:	b003      	add	sp, #12
   231da:	bd90      	pop	{r4, r7, pc}
   231dc:	000210e5 	.word	0x000210e5

000231e0 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   231e0:	b580      	push	{r7, lr}
   231e2:	b082      	sub	sp, #8
   231e4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   231e6:	1dfb      	adds	r3, r7, #7
   231e8:	2200      	movs	r2, #0
   231ea:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   231ec:	4b03      	ldr	r3, [pc, #12]	; (231fc <nm_bus_reset+0x1c>)
   231ee:	4798      	blx	r3
   231f0:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   231f2:	0018      	movs	r0, r3
   231f4:	46bd      	mov	sp, r7
   231f6:	b002      	add	sp, #8
   231f8:	bd80      	pop	{r7, pc}
   231fa:	46c0      	nop			; (mov r8, r8)
   231fc:	0002500d 	.word	0x0002500d

00023200 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   23200:	b580      	push	{r7, lr}
   23202:	b082      	sub	sp, #8
   23204:	af00      	add	r7, sp, #0
   23206:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   23208:	687b      	ldr	r3, [r7, #4]
   2320a:	0018      	movs	r0, r3
   2320c:	4b03      	ldr	r3, [pc, #12]	; (2321c <nm_read_reg+0x1c>)
   2320e:	4798      	blx	r3
   23210:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   23212:	0018      	movs	r0, r3
   23214:	46bd      	mov	sp, r7
   23216:	b002      	add	sp, #8
   23218:	bd80      	pop	{r7, pc}
   2321a:	46c0      	nop			; (mov r8, r8)
   2321c:	000251a1 	.word	0x000251a1

00023220 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   23220:	b580      	push	{r7, lr}
   23222:	b082      	sub	sp, #8
   23224:	af00      	add	r7, sp, #0
   23226:	6078      	str	r0, [r7, #4]
   23228:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   2322a:	683a      	ldr	r2, [r7, #0]
   2322c:	687b      	ldr	r3, [r7, #4]
   2322e:	0011      	movs	r1, r2
   23230:	0018      	movs	r0, r3
   23232:	4b03      	ldr	r3, [pc, #12]	; (23240 <nm_read_reg_with_ret+0x20>)
   23234:	4798      	blx	r3
   23236:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   23238:	0018      	movs	r0, r3
   2323a:	46bd      	mov	sp, r7
   2323c:	b002      	add	sp, #8
   2323e:	bd80      	pop	{r7, pc}
   23240:	000251c5 	.word	0x000251c5

00023244 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   23244:	b580      	push	{r7, lr}
   23246:	b082      	sub	sp, #8
   23248:	af00      	add	r7, sp, #0
   2324a:	6078      	str	r0, [r7, #4]
   2324c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   2324e:	683a      	ldr	r2, [r7, #0]
   23250:	687b      	ldr	r3, [r7, #4]
   23252:	0011      	movs	r1, r2
   23254:	0018      	movs	r0, r3
   23256:	4b03      	ldr	r3, [pc, #12]	; (23264 <nm_write_reg+0x20>)
   23258:	4798      	blx	r3
   2325a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   2325c:	0018      	movs	r0, r3
   2325e:	46bd      	mov	sp, r7
   23260:	b002      	add	sp, #8
   23262:	bd80      	pop	{r7, pc}
   23264:	00025215 	.word	0x00025215

00023268 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23268:	b580      	push	{r7, lr}
   2326a:	b084      	sub	sp, #16
   2326c:	af00      	add	r7, sp, #0
   2326e:	60f8      	str	r0, [r7, #12]
   23270:	60b9      	str	r1, [r7, #8]
   23272:	1dbb      	adds	r3, r7, #6
   23274:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   23276:	1dbb      	adds	r3, r7, #6
   23278:	881a      	ldrh	r2, [r3, #0]
   2327a:	68b9      	ldr	r1, [r7, #8]
   2327c:	68fb      	ldr	r3, [r7, #12]
   2327e:	0018      	movs	r0, r3
   23280:	4b03      	ldr	r3, [pc, #12]	; (23290 <p_nm_read_block+0x28>)
   23282:	4798      	blx	r3
   23284:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   23286:	0018      	movs	r0, r3
   23288:	46bd      	mov	sp, r7
   2328a:	b004      	add	sp, #16
   2328c:	bd80      	pop	{r7, pc}
   2328e:	46c0      	nop			; (mov r8, r8)
   23290:	00025265 	.word	0x00025265

00023294 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23294:	b580      	push	{r7, lr}
   23296:	b086      	sub	sp, #24
   23298:	af00      	add	r7, sp, #0
   2329a:	60f8      	str	r0, [r7, #12]
   2329c:	60b9      	str	r1, [r7, #8]
   2329e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   232a0:	4b2d      	ldr	r3, [pc, #180]	; (23358 <nm_read_block+0xc4>)
   232a2:	881a      	ldrh	r2, [r3, #0]
   232a4:	2310      	movs	r3, #16
   232a6:	18fb      	adds	r3, r7, r3
   232a8:	3a08      	subs	r2, #8
   232aa:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   232ac:	2300      	movs	r3, #0
   232ae:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   232b0:	2313      	movs	r3, #19
   232b2:	18fb      	adds	r3, r7, r3
   232b4:	2200      	movs	r2, #0
   232b6:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   232b8:	2310      	movs	r3, #16
   232ba:	18fb      	adds	r3, r7, r3
   232bc:	881a      	ldrh	r2, [r3, #0]
   232be:	687b      	ldr	r3, [r7, #4]
   232c0:	429a      	cmp	r2, r3
   232c2:	d313      	bcc.n	232ec <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   232c4:	68ba      	ldr	r2, [r7, #8]
   232c6:	697b      	ldr	r3, [r7, #20]
   232c8:	18d1      	adds	r1, r2, r3
   232ca:	687b      	ldr	r3, [r7, #4]
   232cc:	b29a      	uxth	r2, r3
   232ce:	68fb      	ldr	r3, [r7, #12]
   232d0:	0018      	movs	r0, r3
   232d2:	4b22      	ldr	r3, [pc, #136]	; (2335c <nm_read_block+0xc8>)
   232d4:	4798      	blx	r3
   232d6:	0003      	movs	r3, r0
   232d8:	b2da      	uxtb	r2, r3
   232da:	2313      	movs	r3, #19
   232dc:	18fb      	adds	r3, r7, r3
   232de:	781b      	ldrb	r3, [r3, #0]
   232e0:	18d3      	adds	r3, r2, r3
   232e2:	b2da      	uxtb	r2, r3
   232e4:	2313      	movs	r3, #19
   232e6:	18fb      	adds	r3, r7, r3
   232e8:	701a      	strb	r2, [r3, #0]
			break;
   232ea:	e02d      	b.n	23348 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   232ec:	68ba      	ldr	r2, [r7, #8]
   232ee:	697b      	ldr	r3, [r7, #20]
   232f0:	18d1      	adds	r1, r2, r3
   232f2:	2310      	movs	r3, #16
   232f4:	18fb      	adds	r3, r7, r3
   232f6:	881a      	ldrh	r2, [r3, #0]
   232f8:	68fb      	ldr	r3, [r7, #12]
   232fa:	0018      	movs	r0, r3
   232fc:	4b17      	ldr	r3, [pc, #92]	; (2335c <nm_read_block+0xc8>)
   232fe:	4798      	blx	r3
   23300:	0003      	movs	r3, r0
   23302:	b2da      	uxtb	r2, r3
   23304:	2313      	movs	r3, #19
   23306:	18fb      	adds	r3, r7, r3
   23308:	781b      	ldrb	r3, [r3, #0]
   2330a:	18d3      	adds	r3, r2, r3
   2330c:	b2da      	uxtb	r2, r3
   2330e:	2313      	movs	r3, #19
   23310:	18fb      	adds	r3, r7, r3
   23312:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23314:	2313      	movs	r3, #19
   23316:	18fb      	adds	r3, r7, r3
   23318:	781b      	ldrb	r3, [r3, #0]
   2331a:	b25b      	sxtb	r3, r3
   2331c:	2b00      	cmp	r3, #0
   2331e:	d112      	bne.n	23346 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23320:	2310      	movs	r3, #16
   23322:	18fb      	adds	r3, r7, r3
   23324:	881b      	ldrh	r3, [r3, #0]
   23326:	687a      	ldr	r2, [r7, #4]
   23328:	1ad3      	subs	r3, r2, r3
   2332a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   2332c:	2310      	movs	r3, #16
   2332e:	18fb      	adds	r3, r7, r3
   23330:	881b      	ldrh	r3, [r3, #0]
   23332:	697a      	ldr	r2, [r7, #20]
   23334:	18d3      	adds	r3, r2, r3
   23336:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23338:	2310      	movs	r3, #16
   2333a:	18fb      	adds	r3, r7, r3
   2333c:	881b      	ldrh	r3, [r3, #0]
   2333e:	68fa      	ldr	r2, [r7, #12]
   23340:	18d3      	adds	r3, r2, r3
   23342:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23344:	e7b8      	b.n	232b8 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23346:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23348:	2313      	movs	r3, #19
   2334a:	18fb      	adds	r3, r7, r3
   2334c:	781b      	ldrb	r3, [r3, #0]
   2334e:	b25b      	sxtb	r3, r3
}
   23350:	0018      	movs	r0, r3
   23352:	46bd      	mov	sp, r7
   23354:	b006      	add	sp, #24
   23356:	bd80      	pop	{r7, pc}
   23358:	20000124 	.word	0x20000124
   2335c:	00023269 	.word	0x00023269

00023360 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23360:	b580      	push	{r7, lr}
   23362:	b084      	sub	sp, #16
   23364:	af00      	add	r7, sp, #0
   23366:	60f8      	str	r0, [r7, #12]
   23368:	60b9      	str	r1, [r7, #8]
   2336a:	1dbb      	adds	r3, r7, #6
   2336c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   2336e:	1dbb      	adds	r3, r7, #6
   23370:	881a      	ldrh	r2, [r3, #0]
   23372:	68b9      	ldr	r1, [r7, #8]
   23374:	68fb      	ldr	r3, [r7, #12]
   23376:	0018      	movs	r0, r3
   23378:	4b03      	ldr	r3, [pc, #12]	; (23388 <p_nm_write_block+0x28>)
   2337a:	4798      	blx	r3
   2337c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   2337e:	0018      	movs	r0, r3
   23380:	46bd      	mov	sp, r7
   23382:	b004      	add	sp, #16
   23384:	bd80      	pop	{r7, pc}
   23386:	46c0      	nop			; (mov r8, r8)
   23388:	000252bd 	.word	0x000252bd

0002338c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   2338c:	b580      	push	{r7, lr}
   2338e:	b086      	sub	sp, #24
   23390:	af00      	add	r7, sp, #0
   23392:	60f8      	str	r0, [r7, #12]
   23394:	60b9      	str	r1, [r7, #8]
   23396:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23398:	4b2d      	ldr	r3, [pc, #180]	; (23450 <nm_write_block+0xc4>)
   2339a:	881a      	ldrh	r2, [r3, #0]
   2339c:	2310      	movs	r3, #16
   2339e:	18fb      	adds	r3, r7, r3
   233a0:	3a08      	subs	r2, #8
   233a2:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   233a4:	2300      	movs	r3, #0
   233a6:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   233a8:	2313      	movs	r3, #19
   233aa:	18fb      	adds	r3, r7, r3
   233ac:	2200      	movs	r2, #0
   233ae:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   233b0:	2310      	movs	r3, #16
   233b2:	18fb      	adds	r3, r7, r3
   233b4:	881a      	ldrh	r2, [r3, #0]
   233b6:	687b      	ldr	r3, [r7, #4]
   233b8:	429a      	cmp	r2, r3
   233ba:	d313      	bcc.n	233e4 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   233bc:	68ba      	ldr	r2, [r7, #8]
   233be:	697b      	ldr	r3, [r7, #20]
   233c0:	18d1      	adds	r1, r2, r3
   233c2:	687b      	ldr	r3, [r7, #4]
   233c4:	b29a      	uxth	r2, r3
   233c6:	68fb      	ldr	r3, [r7, #12]
   233c8:	0018      	movs	r0, r3
   233ca:	4b22      	ldr	r3, [pc, #136]	; (23454 <nm_write_block+0xc8>)
   233cc:	4798      	blx	r3
   233ce:	0003      	movs	r3, r0
   233d0:	b2da      	uxtb	r2, r3
   233d2:	2313      	movs	r3, #19
   233d4:	18fb      	adds	r3, r7, r3
   233d6:	781b      	ldrb	r3, [r3, #0]
   233d8:	18d3      	adds	r3, r2, r3
   233da:	b2da      	uxtb	r2, r3
   233dc:	2313      	movs	r3, #19
   233de:	18fb      	adds	r3, r7, r3
   233e0:	701a      	strb	r2, [r3, #0]
			break;
   233e2:	e02d      	b.n	23440 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   233e4:	68ba      	ldr	r2, [r7, #8]
   233e6:	697b      	ldr	r3, [r7, #20]
   233e8:	18d1      	adds	r1, r2, r3
   233ea:	2310      	movs	r3, #16
   233ec:	18fb      	adds	r3, r7, r3
   233ee:	881a      	ldrh	r2, [r3, #0]
   233f0:	68fb      	ldr	r3, [r7, #12]
   233f2:	0018      	movs	r0, r3
   233f4:	4b17      	ldr	r3, [pc, #92]	; (23454 <nm_write_block+0xc8>)
   233f6:	4798      	blx	r3
   233f8:	0003      	movs	r3, r0
   233fa:	b2da      	uxtb	r2, r3
   233fc:	2313      	movs	r3, #19
   233fe:	18fb      	adds	r3, r7, r3
   23400:	781b      	ldrb	r3, [r3, #0]
   23402:	18d3      	adds	r3, r2, r3
   23404:	b2da      	uxtb	r2, r3
   23406:	2313      	movs	r3, #19
   23408:	18fb      	adds	r3, r7, r3
   2340a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   2340c:	2313      	movs	r3, #19
   2340e:	18fb      	adds	r3, r7, r3
   23410:	781b      	ldrb	r3, [r3, #0]
   23412:	b25b      	sxtb	r3, r3
   23414:	2b00      	cmp	r3, #0
   23416:	d112      	bne.n	2343e <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23418:	2310      	movs	r3, #16
   2341a:	18fb      	adds	r3, r7, r3
   2341c:	881b      	ldrh	r3, [r3, #0]
   2341e:	687a      	ldr	r2, [r7, #4]
   23420:	1ad3      	subs	r3, r2, r3
   23422:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23424:	2310      	movs	r3, #16
   23426:	18fb      	adds	r3, r7, r3
   23428:	881b      	ldrh	r3, [r3, #0]
   2342a:	697a      	ldr	r2, [r7, #20]
   2342c:	18d3      	adds	r3, r2, r3
   2342e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23430:	2310      	movs	r3, #16
   23432:	18fb      	adds	r3, r7, r3
   23434:	881b      	ldrh	r3, [r3, #0]
   23436:	68fa      	ldr	r2, [r7, #12]
   23438:	18d3      	adds	r3, r2, r3
   2343a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   2343c:	e7b8      	b.n	233b0 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   2343e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23440:	2313      	movs	r3, #19
   23442:	18fb      	adds	r3, r7, r3
   23444:	781b      	ldrb	r3, [r3, #0]
   23446:	b25b      	sxtb	r3, r3
}
   23448:	0018      	movs	r0, r3
   2344a:	46bd      	mov	sp, r7
   2344c:	b006      	add	sp, #24
   2344e:	bd80      	pop	{r7, pc}
   23450:	20000124 	.word	0x20000124
   23454:	00023361 	.word	0x00023361

00023458 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   23458:	b590      	push	{r4, r7, lr}
   2345a:	b089      	sub	sp, #36	; 0x24
   2345c:	af00      	add	r7, sp, #0
   2345e:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   23460:	2300      	movs	r3, #0
   23462:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   23464:	231f      	movs	r3, #31
   23466:	18fb      	adds	r3, r7, r3
   23468:	2200      	movs	r2, #0
   2346a:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   2346c:	230c      	movs	r3, #12
   2346e:	18fb      	adds	r3, r7, r3
   23470:	0018      	movs	r0, r3
   23472:	2308      	movs	r3, #8
   23474:	001a      	movs	r2, r3
   23476:	2100      	movs	r1, #0
   23478:	4b64      	ldr	r3, [pc, #400]	; (2360c <nm_get_firmware_full_info+0x1b4>)
   2347a:	4798      	blx	r3
	if (pstrRev != NULL)
   2347c:	687b      	ldr	r3, [r7, #4]
   2347e:	2b00      	cmp	r3, #0
   23480:	d100      	bne.n	23484 <nm_get_firmware_full_info+0x2c>
   23482:	e0ba      	b.n	235fa <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   23484:	687b      	ldr	r3, [r7, #4]
   23486:	2228      	movs	r2, #40	; 0x28
   23488:	2100      	movs	r1, #0
   2348a:	0018      	movs	r0, r3
   2348c:	4b60      	ldr	r3, [pc, #384]	; (23610 <nm_get_firmware_full_info+0x1b8>)
   2348e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   23490:	231f      	movs	r3, #31
   23492:	18fc      	adds	r4, r7, r3
   23494:	2314      	movs	r3, #20
   23496:	18fb      	adds	r3, r7, r3
   23498:	4a5e      	ldr	r2, [pc, #376]	; (23614 <nm_get_firmware_full_info+0x1bc>)
   2349a:	0019      	movs	r1, r3
   2349c:	0010      	movs	r0, r2
   2349e:	4b5e      	ldr	r3, [pc, #376]	; (23618 <nm_get_firmware_full_info+0x1c0>)
   234a0:	4798      	blx	r3
   234a2:	0003      	movs	r3, r0
   234a4:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   234a6:	231f      	movs	r3, #31
   234a8:	18fb      	adds	r3, r7, r3
   234aa:	781b      	ldrb	r3, [r3, #0]
   234ac:	b25b      	sxtb	r3, r3
   234ae:	2b00      	cmp	r3, #0
   234b0:	d000      	beq.n	234b4 <nm_get_firmware_full_info+0x5c>
   234b2:	e0a2      	b.n	235fa <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   234b4:	697b      	ldr	r3, [r7, #20]
   234b6:	2b00      	cmp	r3, #0
   234b8:	d100      	bne.n	234bc <nm_get_firmware_full_info+0x64>
   234ba:	e09a      	b.n	235f2 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   234bc:	697b      	ldr	r3, [r7, #20]
   234be:	22c0      	movs	r2, #192	; 0xc0
   234c0:	0292      	lsls	r2, r2, #10
   234c2:	4313      	orrs	r3, r2
   234c4:	221f      	movs	r2, #31
   234c6:	18bc      	adds	r4, r7, r2
   234c8:	220c      	movs	r2, #12
   234ca:	18b9      	adds	r1, r7, r2
   234cc:	2208      	movs	r2, #8
   234ce:	0018      	movs	r0, r3
   234d0:	4b52      	ldr	r3, [pc, #328]	; (2361c <nm_get_firmware_full_info+0x1c4>)
   234d2:	4798      	blx	r3
   234d4:	0003      	movs	r3, r0
   234d6:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   234d8:	231f      	movs	r3, #31
   234da:	18fb      	adds	r3, r7, r3
   234dc:	781b      	ldrb	r3, [r3, #0]
   234de:	b25b      	sxtb	r3, r3
   234e0:	2b00      	cmp	r3, #0
   234e2:	d000      	beq.n	234e6 <nm_get_firmware_full_info+0x8e>
   234e4:	e089      	b.n	235fa <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   234e6:	230c      	movs	r3, #12
   234e8:	18fb      	adds	r3, r7, r3
   234ea:	685b      	ldr	r3, [r3, #4]
   234ec:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   234ee:	697b      	ldr	r3, [r7, #20]
   234f0:	041b      	lsls	r3, r3, #16
   234f2:	0c1b      	lsrs	r3, r3, #16
   234f4:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   234f6:	697b      	ldr	r3, [r7, #20]
   234f8:	2b00      	cmp	r3, #0
   234fa:	d100      	bne.n	234fe <nm_get_firmware_full_info+0xa6>
   234fc:	e074      	b.n	235e8 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   234fe:	697b      	ldr	r3, [r7, #20]
   23500:	22c0      	movs	r2, #192	; 0xc0
   23502:	0292      	lsls	r2, r2, #10
   23504:	4313      	orrs	r3, r2
   23506:	221f      	movs	r2, #31
   23508:	18bc      	adds	r4, r7, r2
   2350a:	6879      	ldr	r1, [r7, #4]
   2350c:	2228      	movs	r2, #40	; 0x28
   2350e:	0018      	movs	r0, r3
   23510:	4b42      	ldr	r3, [pc, #264]	; (2361c <nm_get_firmware_full_info+0x1c4>)
   23512:	4798      	blx	r3
   23514:	0003      	movs	r3, r0
   23516:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   23518:	231f      	movs	r3, #31
   2351a:	18fb      	adds	r3, r7, r3
   2351c:	781b      	ldrb	r3, [r3, #0]
   2351e:	b25b      	sxtb	r3, r3
   23520:	2b00      	cmp	r3, #0
   23522:	d16a      	bne.n	235fa <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   23524:	687b      	ldr	r3, [r7, #4]
   23526:	791b      	ldrb	r3, [r3, #4]
   23528:	021b      	lsls	r3, r3, #8
   2352a:	b21a      	sxth	r2, r3
   2352c:	687b      	ldr	r3, [r7, #4]
   2352e:	795b      	ldrb	r3, [r3, #5]
   23530:	011b      	lsls	r3, r3, #4
   23532:	b21b      	sxth	r3, r3
   23534:	21ff      	movs	r1, #255	; 0xff
   23536:	400b      	ands	r3, r1
   23538:	b21b      	sxth	r3, r3
   2353a:	4313      	orrs	r3, r2
   2353c:	b21a      	sxth	r2, r3
   2353e:	687b      	ldr	r3, [r7, #4]
   23540:	799b      	ldrb	r3, [r3, #6]
   23542:	b21b      	sxth	r3, r3
   23544:	210f      	movs	r1, #15
   23546:	400b      	ands	r3, r1
   23548:	b21b      	sxth	r3, r3
   2354a:	4313      	orrs	r3, r2
   2354c:	b21a      	sxth	r2, r3
   2354e:	231c      	movs	r3, #28
   23550:	18fb      	adds	r3, r7, r3
   23552:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   23554:	231a      	movs	r3, #26
   23556:	18fb      	adds	r3, r7, r3
   23558:	4a31      	ldr	r2, [pc, #196]	; (23620 <nm_get_firmware_full_info+0x1c8>)
   2355a:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   2355c:	687b      	ldr	r3, [r7, #4]
   2355e:	79db      	ldrb	r3, [r3, #7]
   23560:	021b      	lsls	r3, r3, #8
   23562:	b21a      	sxth	r2, r3
   23564:	687b      	ldr	r3, [r7, #4]
   23566:	7a1b      	ldrb	r3, [r3, #8]
   23568:	011b      	lsls	r3, r3, #4
   2356a:	b21b      	sxth	r3, r3
   2356c:	21ff      	movs	r1, #255	; 0xff
   2356e:	400b      	ands	r3, r1
   23570:	b21b      	sxth	r3, r3
   23572:	4313      	orrs	r3, r2
   23574:	b21a      	sxth	r2, r3
   23576:	687b      	ldr	r3, [r7, #4]
   23578:	7a5b      	ldrb	r3, [r3, #9]
   2357a:	b21b      	sxth	r3, r3
   2357c:	210f      	movs	r1, #15
   2357e:	400b      	ands	r3, r1
   23580:	b21b      	sxth	r3, r3
   23582:	4313      	orrs	r3, r2
   23584:	b21a      	sxth	r2, r3
   23586:	2318      	movs	r3, #24
   23588:	18fb      	adds	r3, r7, r3
   2358a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   2358c:	231c      	movs	r3, #28
   2358e:	18fb      	adds	r3, r7, r3
   23590:	881b      	ldrh	r3, [r3, #0]
   23592:	2b00      	cmp	r3, #0
   23594:	d009      	beq.n	235aa <nm_get_firmware_full_info+0x152>
   23596:	2318      	movs	r3, #24
   23598:	18fb      	adds	r3, r7, r3
   2359a:	881b      	ldrh	r3, [r3, #0]
   2359c:	2b00      	cmp	r3, #0
   2359e:	d004      	beq.n	235aa <nm_get_firmware_full_info+0x152>
   235a0:	2318      	movs	r3, #24
   235a2:	18fb      	adds	r3, r7, r3
   235a4:	881b      	ldrh	r3, [r3, #0]
   235a6:	2b00      	cmp	r3, #0
   235a8:	d104      	bne.n	235b4 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   235aa:	231f      	movs	r3, #31
   235ac:	18fb      	adds	r3, r7, r3
   235ae:	22f4      	movs	r2, #244	; 0xf4
   235b0:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   235b2:	e022      	b.n	235fa <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   235b4:	231a      	movs	r3, #26
   235b6:	18fa      	adds	r2, r7, r3
   235b8:	2318      	movs	r3, #24
   235ba:	18fb      	adds	r3, r7, r3
   235bc:	8812      	ldrh	r2, [r2, #0]
   235be:	881b      	ldrh	r3, [r3, #0]
   235c0:	429a      	cmp	r2, r3
   235c2:	d204      	bcs.n	235ce <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   235c4:	231f      	movs	r3, #31
   235c6:	18fb      	adds	r3, r7, r3
   235c8:	22f3      	movs	r2, #243	; 0xf3
   235ca:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   235cc:	e015      	b.n	235fa <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   235ce:	231a      	movs	r3, #26
   235d0:	18fa      	adds	r2, r7, r3
   235d2:	231c      	movs	r3, #28
   235d4:	18fb      	adds	r3, r7, r3
   235d6:	8812      	ldrh	r2, [r2, #0]
   235d8:	881b      	ldrh	r3, [r3, #0]
   235da:	429a      	cmp	r2, r3
   235dc:	d90d      	bls.n	235fa <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   235de:	231f      	movs	r3, #31
   235e0:	18fb      	adds	r3, r7, r3
   235e2:	22f3      	movs	r2, #243	; 0xf3
   235e4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   235e6:	e008      	b.n	235fa <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   235e8:	231f      	movs	r3, #31
   235ea:	18fb      	adds	r3, r7, r3
   235ec:	22f4      	movs	r2, #244	; 0xf4
   235ee:	701a      	strb	r2, [r3, #0]
   235f0:	e003      	b.n	235fa <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   235f2:	231f      	movs	r3, #31
   235f4:	18fb      	adds	r3, r7, r3
   235f6:	22f4      	movs	r2, #244	; 0xf4
   235f8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   235fa:	231f      	movs	r3, #31
   235fc:	18fb      	adds	r3, r7, r3
   235fe:	781b      	ldrb	r3, [r3, #0]
   23600:	b25b      	sxtb	r3, r3
}
   23602:	0018      	movs	r0, r3
   23604:	46bd      	mov	sp, r7
   23606:	b009      	add	sp, #36	; 0x24
   23608:	bd90      	pop	{r4, r7, pc}
   2360a:	46c0      	nop			; (mov r8, r8)
   2360c:	00034f63 	.word	0x00034f63
   23610:	00021191 	.word	0x00021191
   23614:	000c0008 	.word	0x000c0008
   23618:	00023221 	.word	0x00023221
   2361c:	00023295 	.word	0x00023295
   23620:	00001354 	.word	0x00001354

00023624 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   23624:	b590      	push	{r4, r7, lr}
   23626:	b085      	sub	sp, #20
   23628:	af00      	add	r7, sp, #0
   2362a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2362c:	230f      	movs	r3, #15
   2362e:	18fb      	adds	r3, r7, r3
   23630:	2200      	movs	r2, #0
   23632:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   23634:	687b      	ldr	r3, [r7, #4]
   23636:	2b00      	cmp	r3, #0
   23638:	d013      	beq.n	23662 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   2363a:	230e      	movs	r3, #14
   2363c:	18fb      	adds	r3, r7, r3
   2363e:	687a      	ldr	r2, [r7, #4]
   23640:	7812      	ldrb	r2, [r2, #0]
   23642:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   23644:	230e      	movs	r3, #14
   23646:	18fb      	adds	r3, r7, r3
   23648:	781b      	ldrb	r3, [r3, #0]
   2364a:	2b00      	cmp	r3, #0
   2364c:	d004      	beq.n	23658 <nm_drv_init+0x34>
   2364e:	230e      	movs	r3, #14
   23650:	18fb      	adds	r3, r7, r3
   23652:	781b      	ldrb	r3, [r3, #0]
   23654:	2b04      	cmp	r3, #4
   23656:	d908      	bls.n	2366a <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   23658:	230e      	movs	r3, #14
   2365a:	18fb      	adds	r3, r7, r3
   2365c:	2201      	movs	r2, #1
   2365e:	701a      	strb	r2, [r3, #0]
   23660:	e003      	b.n	2366a <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   23662:	230e      	movs	r3, #14
   23664:	18fb      	adds	r3, r7, r3
   23666:	2201      	movs	r2, #1
   23668:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   2366a:	230f      	movs	r3, #15
   2366c:	18fc      	adds	r4, r7, r3
   2366e:	2000      	movs	r0, #0
   23670:	4b41      	ldr	r3, [pc, #260]	; (23778 <nm_drv_init+0x154>)
   23672:	4798      	blx	r3
   23674:	0003      	movs	r3, r0
   23676:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23678:	230f      	movs	r3, #15
   2367a:	18fb      	adds	r3, r7, r3
   2367c:	781b      	ldrb	r3, [r3, #0]
   2367e:	b25b      	sxtb	r3, r3
   23680:	2b00      	cmp	r3, #0
   23682:	d00f      	beq.n	236a4 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   23684:	2390      	movs	r3, #144	; 0x90
   23686:	005a      	lsls	r2, r3, #1
   23688:	493c      	ldr	r1, [pc, #240]	; (2377c <nm_drv_init+0x158>)
   2368a:	4b3d      	ldr	r3, [pc, #244]	; (23780 <nm_drv_init+0x15c>)
   2368c:	0018      	movs	r0, r3
   2368e:	4b3d      	ldr	r3, [pc, #244]	; (23784 <nm_drv_init+0x160>)
   23690:	4798      	blx	r3
   23692:	4b3d      	ldr	r3, [pc, #244]	; (23788 <nm_drv_init+0x164>)
   23694:	0018      	movs	r0, r3
   23696:	4b3b      	ldr	r3, [pc, #236]	; (23784 <nm_drv_init+0x160>)
   23698:	4798      	blx	r3
   2369a:	4b3c      	ldr	r3, [pc, #240]	; (2378c <nm_drv_init+0x168>)
   2369c:	0018      	movs	r0, r3
   2369e:	4b39      	ldr	r3, [pc, #228]	; (23784 <nm_drv_init+0x160>)
   236a0:	4798      	blx	r3
		goto ERR1;
   236a2:	e061      	b.n	23768 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   236a4:	4b3a      	ldr	r3, [pc, #232]	; (23790 <nm_drv_init+0x16c>)
   236a6:	0018      	movs	r0, r3
   236a8:	4b36      	ldr	r3, [pc, #216]	; (23784 <nm_drv_init+0x160>)
   236aa:	4798      	blx	r3
   236ac:	4b39      	ldr	r3, [pc, #228]	; (23794 <nm_drv_init+0x170>)
   236ae:	4798      	blx	r3
   236b0:	0002      	movs	r2, r0
   236b2:	4b39      	ldr	r3, [pc, #228]	; (23798 <nm_drv_init+0x174>)
   236b4:	0011      	movs	r1, r2
   236b6:	0018      	movs	r0, r3
   236b8:	4b32      	ldr	r3, [pc, #200]	; (23784 <nm_drv_init+0x160>)
   236ba:	4798      	blx	r3
   236bc:	4b33      	ldr	r3, [pc, #204]	; (2378c <nm_drv_init+0x168>)
   236be:	0018      	movs	r0, r3
   236c0:	4b30      	ldr	r3, [pc, #192]	; (23784 <nm_drv_init+0x160>)
   236c2:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   236c4:	4b35      	ldr	r3, [pc, #212]	; (2379c <nm_drv_init+0x178>)
   236c6:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   236c8:	230f      	movs	r3, #15
   236ca:	18fc      	adds	r4, r7, r3
   236cc:	230e      	movs	r3, #14
   236ce:	18fb      	adds	r3, r7, r3
   236d0:	781b      	ldrb	r3, [r3, #0]
   236d2:	0018      	movs	r0, r3
   236d4:	4b32      	ldr	r3, [pc, #200]	; (237a0 <nm_drv_init+0x17c>)
   236d6:	4798      	blx	r3
   236d8:	0003      	movs	r3, r0
   236da:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   236dc:	230f      	movs	r3, #15
   236de:	18fb      	adds	r3, r7, r3
   236e0:	781b      	ldrb	r3, [r3, #0]
   236e2:	b25b      	sxtb	r3, r3
   236e4:	2b00      	cmp	r3, #0
   236e6:	d13a      	bne.n	2375e <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   236e8:	230f      	movs	r3, #15
   236ea:	18fc      	adds	r4, r7, r3
   236ec:	230e      	movs	r3, #14
   236ee:	18fb      	adds	r3, r7, r3
   236f0:	781b      	ldrb	r3, [r3, #0]
   236f2:	0018      	movs	r0, r3
   236f4:	4b2b      	ldr	r3, [pc, #172]	; (237a4 <nm_drv_init+0x180>)
   236f6:	4798      	blx	r3
   236f8:	0003      	movs	r3, r0
   236fa:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   236fc:	230f      	movs	r3, #15
   236fe:	18fb      	adds	r3, r7, r3
   23700:	781b      	ldrb	r3, [r3, #0]
   23702:	b25b      	sxtb	r3, r3
   23704:	2b00      	cmp	r3, #0
   23706:	d12c      	bne.n	23762 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   23708:	230e      	movs	r3, #14
   2370a:	18fb      	adds	r3, r7, r3
   2370c:	781b      	ldrb	r3, [r3, #0]
   2370e:	2b02      	cmp	r3, #2
   23710:	d02a      	beq.n	23768 <nm_drv_init+0x144>
   23712:	230e      	movs	r3, #14
   23714:	18fb      	adds	r3, r7, r3
   23716:	781b      	ldrb	r3, [r3, #0]
   23718:	2b03      	cmp	r3, #3
   2371a:	d025      	beq.n	23768 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   2371c:	230f      	movs	r3, #15
   2371e:	18fc      	adds	r4, r7, r3
   23720:	4b21      	ldr	r3, [pc, #132]	; (237a8 <nm_drv_init+0x184>)
   23722:	4798      	blx	r3
   23724:	0003      	movs	r3, r0
   23726:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23728:	230f      	movs	r3, #15
   2372a:	18fb      	adds	r3, r7, r3
   2372c:	781b      	ldrb	r3, [r3, #0]
   2372e:	b25b      	sxtb	r3, r3
   23730:	2b00      	cmp	r3, #0
   23732:	d00f      	beq.n	23754 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   23734:	23a7      	movs	r3, #167	; 0xa7
   23736:	005a      	lsls	r2, r3, #1
   23738:	4910      	ldr	r1, [pc, #64]	; (2377c <nm_drv_init+0x158>)
   2373a:	4b11      	ldr	r3, [pc, #68]	; (23780 <nm_drv_init+0x15c>)
   2373c:	0018      	movs	r0, r3
   2373e:	4b11      	ldr	r3, [pc, #68]	; (23784 <nm_drv_init+0x160>)
   23740:	4798      	blx	r3
   23742:	4b1a      	ldr	r3, [pc, #104]	; (237ac <nm_drv_init+0x188>)
   23744:	0018      	movs	r0, r3
   23746:	4b0f      	ldr	r3, [pc, #60]	; (23784 <nm_drv_init+0x160>)
   23748:	4798      	blx	r3
   2374a:	4b10      	ldr	r3, [pc, #64]	; (2378c <nm_drv_init+0x168>)
   2374c:	0018      	movs	r0, r3
   2374e:	4b0d      	ldr	r3, [pc, #52]	; (23784 <nm_drv_init+0x160>)
   23750:	4798      	blx	r3
		goto ERR2;
   23752:	e007      	b.n	23764 <nm_drv_init+0x140>
	}
	return ret;
   23754:	230f      	movs	r3, #15
   23756:	18fb      	adds	r3, r7, r3
   23758:	781b      	ldrb	r3, [r3, #0]
   2375a:	b25b      	sxtb	r3, r3
   2375c:	e008      	b.n	23770 <nm_drv_init+0x14c>
		goto ERR2;
   2375e:	46c0      	nop			; (mov r8, r8)
   23760:	e000      	b.n	23764 <nm_drv_init+0x140>
		goto ERR2;
   23762:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   23764:	4b12      	ldr	r3, [pc, #72]	; (237b0 <nm_drv_init+0x18c>)
   23766:	4798      	blx	r3
ERR1:
	return ret;
   23768:	230f      	movs	r3, #15
   2376a:	18fb      	adds	r3, r7, r3
   2376c:	781b      	ldrb	r3, [r3, #0]
   2376e:	b25b      	sxtb	r3, r3
}
   23770:	0018      	movs	r0, r3
   23772:	46bd      	mov	sp, r7
   23774:	b005      	add	sp, #20
   23776:	bd90      	pop	{r4, r7, pc}
   23778:	00023185 	.word	0x00023185
   2377c:	000394a4 	.word	0x000394a4
   23780:	000393d4 	.word	0x000393d4
   23784:	0001e3f9 	.word	0x0001e3f9
   23788:	000393e8 	.word	0x000393e8
   2378c:	00039404 	.word	0x00039404
   23790:	00039408 	.word	0x00039408
   23794:	00022b21 	.word	0x00022b21
   23798:	00039414 	.word	0x00039414
   2379c:	0002503d 	.word	0x0002503d
   237a0:	00022e79 	.word	0x00022e79
   237a4:	00023011 	.word	0x00023011
   237a8:	00022a6d 	.word	0x00022a6d
   237ac:	00039424 	.word	0x00039424
   237b0:	000231b9 	.word	0x000231b9

000237b4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   237b4:	b590      	push	{r4, r7, lr}
   237b6:	b085      	sub	sp, #20
   237b8:	af00      	add	r7, sp, #0
   237ba:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   237bc:	230f      	movs	r3, #15
   237be:	18fc      	adds	r4, r7, r3
   237c0:	4b2e      	ldr	r3, [pc, #184]	; (2387c <nm_drv_deinit+0xc8>)
   237c2:	4798      	blx	r3
   237c4:	0003      	movs	r3, r0
   237c6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   237c8:	230f      	movs	r3, #15
   237ca:	18fb      	adds	r3, r7, r3
   237cc:	781b      	ldrb	r3, [r3, #0]
   237ce:	b25b      	sxtb	r3, r3
   237d0:	2b00      	cmp	r3, #0
   237d2:	d010      	beq.n	237f6 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   237d4:	2366      	movs	r3, #102	; 0x66
   237d6:	33ff      	adds	r3, #255	; 0xff
   237d8:	001a      	movs	r2, r3
   237da:	4929      	ldr	r1, [pc, #164]	; (23880 <nm_drv_deinit+0xcc>)
   237dc:	4b29      	ldr	r3, [pc, #164]	; (23884 <nm_drv_deinit+0xd0>)
   237de:	0018      	movs	r0, r3
   237e0:	4b29      	ldr	r3, [pc, #164]	; (23888 <nm_drv_deinit+0xd4>)
   237e2:	4798      	blx	r3
   237e4:	4b29      	ldr	r3, [pc, #164]	; (2388c <nm_drv_deinit+0xd8>)
   237e6:	0018      	movs	r0, r3
   237e8:	4b27      	ldr	r3, [pc, #156]	; (23888 <nm_drv_deinit+0xd4>)
   237ea:	4798      	blx	r3
   237ec:	4b28      	ldr	r3, [pc, #160]	; (23890 <nm_drv_deinit+0xdc>)
   237ee:	0018      	movs	r0, r3
   237f0:	4b25      	ldr	r3, [pc, #148]	; (23888 <nm_drv_deinit+0xd4>)
   237f2:	4798      	blx	r3
		goto ERR1;
   237f4:	e03a      	b.n	2386c <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   237f6:	230f      	movs	r3, #15
   237f8:	18fc      	adds	r4, r7, r3
   237fa:	2000      	movs	r0, #0
   237fc:	4b25      	ldr	r3, [pc, #148]	; (23894 <nm_drv_deinit+0xe0>)
   237fe:	4798      	blx	r3
   23800:	0003      	movs	r3, r0
   23802:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23804:	230f      	movs	r3, #15
   23806:	18fb      	adds	r3, r7, r3
   23808:	781b      	ldrb	r3, [r3, #0]
   2380a:	b25b      	sxtb	r3, r3
   2380c:	2b00      	cmp	r3, #0
   2380e:	d00f      	beq.n	23830 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   23810:	23b6      	movs	r3, #182	; 0xb6
   23812:	005a      	lsls	r2, r3, #1
   23814:	491a      	ldr	r1, [pc, #104]	; (23880 <nm_drv_deinit+0xcc>)
   23816:	4b1b      	ldr	r3, [pc, #108]	; (23884 <nm_drv_deinit+0xd0>)
   23818:	0018      	movs	r0, r3
   2381a:	4b1b      	ldr	r3, [pc, #108]	; (23888 <nm_drv_deinit+0xd4>)
   2381c:	4798      	blx	r3
   2381e:	4b1e      	ldr	r3, [pc, #120]	; (23898 <nm_drv_deinit+0xe4>)
   23820:	0018      	movs	r0, r3
   23822:	4b19      	ldr	r3, [pc, #100]	; (23888 <nm_drv_deinit+0xd4>)
   23824:	4798      	blx	r3
   23826:	4b1a      	ldr	r3, [pc, #104]	; (23890 <nm_drv_deinit+0xdc>)
   23828:	0018      	movs	r0, r3
   2382a:	4b17      	ldr	r3, [pc, #92]	; (23888 <nm_drv_deinit+0xd4>)
   2382c:	4798      	blx	r3
		goto ERR1;
   2382e:	e01d      	b.n	2386c <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   23830:	230f      	movs	r3, #15
   23832:	18fc      	adds	r4, r7, r3
   23834:	4b19      	ldr	r3, [pc, #100]	; (2389c <nm_drv_deinit+0xe8>)
   23836:	4798      	blx	r3
   23838:	0003      	movs	r3, r0
   2383a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2383c:	230f      	movs	r3, #15
   2383e:	18fb      	adds	r3, r7, r3
   23840:	781b      	ldrb	r3, [r3, #0]
   23842:	b25b      	sxtb	r3, r3
   23844:	2b00      	cmp	r3, #0
   23846:	d00f      	beq.n	23868 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   23848:	23b9      	movs	r3, #185	; 0xb9
   2384a:	005a      	lsls	r2, r3, #1
   2384c:	490c      	ldr	r1, [pc, #48]	; (23880 <nm_drv_deinit+0xcc>)
   2384e:	4b0d      	ldr	r3, [pc, #52]	; (23884 <nm_drv_deinit+0xd0>)
   23850:	0018      	movs	r0, r3
   23852:	4b0d      	ldr	r3, [pc, #52]	; (23888 <nm_drv_deinit+0xd4>)
   23854:	4798      	blx	r3
   23856:	4b12      	ldr	r3, [pc, #72]	; (238a0 <nm_drv_deinit+0xec>)
   23858:	0018      	movs	r0, r3
   2385a:	4b0b      	ldr	r3, [pc, #44]	; (23888 <nm_drv_deinit+0xd4>)
   2385c:	4798      	blx	r3
   2385e:	4b0c      	ldr	r3, [pc, #48]	; (23890 <nm_drv_deinit+0xdc>)
   23860:	0018      	movs	r0, r3
   23862:	4b09      	ldr	r3, [pc, #36]	; (23888 <nm_drv_deinit+0xd4>)
   23864:	4798      	blx	r3
		goto ERR1;
   23866:	e001      	b.n	2386c <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   23868:	4b0e      	ldr	r3, [pc, #56]	; (238a4 <nm_drv_deinit+0xf0>)
   2386a:	4798      	blx	r3
#endif

ERR1:
	return ret;
   2386c:	230f      	movs	r3, #15
   2386e:	18fb      	adds	r3, r7, r3
   23870:	781b      	ldrb	r3, [r3, #0]
   23872:	b25b      	sxtb	r3, r3
}
   23874:	0018      	movs	r0, r3
   23876:	46bd      	mov	sp, r7
   23878:	b005      	add	sp, #20
   2387a:	bd90      	pop	{r4, r7, pc}
   2387c:	000230c5 	.word	0x000230c5
   23880:	000394b0 	.word	0x000394b0
   23884:	000393d4 	.word	0x000393d4
   23888:	0001e3f9 	.word	0x0001e3f9
   2388c:	00039444 	.word	0x00039444
   23890:	00039404 	.word	0x00039404
   23894:	000264e5 	.word	0x000264e5
   23898:	00039464 	.word	0x00039464
   2389c:	000231b9 	.word	0x000231b9
   238a0:	00039488 	.word	0x00039488
   238a4:	00025189 	.word	0x00025189

000238a8 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   238a8:	b580      	push	{r7, lr}
   238aa:	b086      	sub	sp, #24
   238ac:	af00      	add	r7, sp, #0
   238ae:	6078      	str	r0, [r7, #4]
   238b0:	000a      	movs	r2, r1
   238b2:	1cbb      	adds	r3, r7, #2
   238b4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   238b6:	230c      	movs	r3, #12
   238b8:	18fb      	adds	r3, r7, r3
   238ba:	2200      	movs	r2, #0
   238bc:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   238be:	230c      	movs	r3, #12
   238c0:	18fb      	adds	r3, r7, r3
   238c2:	687a      	ldr	r2, [r7, #4]
   238c4:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   238c6:	230c      	movs	r3, #12
   238c8:	18fb      	adds	r3, r7, r3
   238ca:	1cba      	adds	r2, r7, #2
   238cc:	8812      	ldrh	r2, [r2, #0]
   238ce:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   238d0:	230c      	movs	r3, #12
   238d2:	18fb      	adds	r3, r7, r3
   238d4:	0019      	movs	r1, r3
   238d6:	2003      	movs	r0, #3
   238d8:	4b03      	ldr	r3, [pc, #12]	; (238e8 <nmi_spi_read+0x40>)
   238da:	4798      	blx	r3
   238dc:	0003      	movs	r3, r0
}
   238de:	0018      	movs	r0, r3
   238e0:	46bd      	mov	sp, r7
   238e2:	b006      	add	sp, #24
   238e4:	bd80      	pop	{r7, pc}
   238e6:	46c0      	nop			; (mov r8, r8)
   238e8:	00021055 	.word	0x00021055

000238ec <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   238ec:	b580      	push	{r7, lr}
   238ee:	b086      	sub	sp, #24
   238f0:	af00      	add	r7, sp, #0
   238f2:	6078      	str	r0, [r7, #4]
   238f4:	000a      	movs	r2, r1
   238f6:	1cbb      	adds	r3, r7, #2
   238f8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   238fa:	230c      	movs	r3, #12
   238fc:	18fb      	adds	r3, r7, r3
   238fe:	687a      	ldr	r2, [r7, #4]
   23900:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   23902:	230c      	movs	r3, #12
   23904:	18fb      	adds	r3, r7, r3
   23906:	2200      	movs	r2, #0
   23908:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2390a:	230c      	movs	r3, #12
   2390c:	18fb      	adds	r3, r7, r3
   2390e:	1cba      	adds	r2, r7, #2
   23910:	8812      	ldrh	r2, [r2, #0]
   23912:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23914:	230c      	movs	r3, #12
   23916:	18fb      	adds	r3, r7, r3
   23918:	0019      	movs	r1, r3
   2391a:	2003      	movs	r0, #3
   2391c:	4b03      	ldr	r3, [pc, #12]	; (2392c <nmi_spi_write+0x40>)
   2391e:	4798      	blx	r3
   23920:	0003      	movs	r3, r0
}
   23922:	0018      	movs	r0, r3
   23924:	46bd      	mov	sp, r7
   23926:	b006      	add	sp, #24
   23928:	bd80      	pop	{r7, pc}
   2392a:	46c0      	nop			; (mov r8, r8)
   2392c:	00021055 	.word	0x00021055

00023930 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   23930:	b580      	push	{r7, lr}
   23932:	b088      	sub	sp, #32
   23934:	af00      	add	r7, sp, #0
   23936:	60f8      	str	r0, [r7, #12]
   23938:	60b9      	str	r1, [r7, #8]
   2393a:	1dbb      	adds	r3, r7, #6
   2393c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   2393e:	2314      	movs	r3, #20
   23940:	18fb      	adds	r3, r7, r3
   23942:	68fa      	ldr	r2, [r7, #12]
   23944:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   23946:	2314      	movs	r3, #20
   23948:	18fb      	adds	r3, r7, r3
   2394a:	68ba      	ldr	r2, [r7, #8]
   2394c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2394e:	2314      	movs	r3, #20
   23950:	18fb      	adds	r3, r7, r3
   23952:	1dba      	adds	r2, r7, #6
   23954:	8812      	ldrh	r2, [r2, #0]
   23956:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   23958:	2314      	movs	r3, #20
   2395a:	18fb      	adds	r3, r7, r3
   2395c:	0019      	movs	r1, r3
   2395e:	2003      	movs	r0, #3
   23960:	4b03      	ldr	r3, [pc, #12]	; (23970 <nmi_spi_rw+0x40>)
   23962:	4798      	blx	r3
   23964:	0003      	movs	r3, r0
}
   23966:	0018      	movs	r0, r3
   23968:	46bd      	mov	sp, r7
   2396a:	b008      	add	sp, #32
   2396c:	bd80      	pop	{r7, pc}
   2396e:	46c0      	nop			; (mov r8, r8)
   23970:	00021055 	.word	0x00021055

00023974 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   23974:	b580      	push	{r7, lr}
   23976:	b082      	sub	sp, #8
   23978:	af00      	add	r7, sp, #0
   2397a:	0002      	movs	r2, r0
   2397c:	1dfb      	adds	r3, r7, #7
   2397e:	701a      	strb	r2, [r3, #0]
   23980:	1dbb      	adds	r3, r7, #6
   23982:	1c0a      	adds	r2, r1, #0
   23984:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   23986:	1dfb      	adds	r3, r7, #7
   23988:	781b      	ldrb	r3, [r3, #0]
   2398a:	005a      	lsls	r2, r3, #1
   2398c:	1dbb      	adds	r3, r7, #6
   2398e:	781b      	ldrb	r3, [r3, #0]
   23990:	4053      	eors	r3, r2
   23992:	4a03      	ldr	r2, [pc, #12]	; (239a0 <crc7_byte+0x2c>)
   23994:	5cd3      	ldrb	r3, [r2, r3]
}
   23996:	0018      	movs	r0, r3
   23998:	46bd      	mov	sp, r7
   2399a:	b002      	add	sp, #8
   2399c:	bd80      	pop	{r7, pc}
   2399e:	46c0      	nop			; (mov r8, r8)
   239a0:	000394c0 	.word	0x000394c0

000239a4 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   239a4:	b590      	push	{r4, r7, lr}
   239a6:	b085      	sub	sp, #20
   239a8:	af00      	add	r7, sp, #0
   239aa:	60b9      	str	r1, [r7, #8]
   239ac:	607a      	str	r2, [r7, #4]
   239ae:	230f      	movs	r3, #15
   239b0:	18fb      	adds	r3, r7, r3
   239b2:	1c02      	adds	r2, r0, #0
   239b4:	701a      	strb	r2, [r3, #0]
	while (len--)
   239b6:	e00e      	b.n	239d6 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   239b8:	68bb      	ldr	r3, [r7, #8]
   239ba:	1c5a      	adds	r2, r3, #1
   239bc:	60ba      	str	r2, [r7, #8]
   239be:	781a      	ldrb	r2, [r3, #0]
   239c0:	230f      	movs	r3, #15
   239c2:	18fc      	adds	r4, r7, r3
   239c4:	230f      	movs	r3, #15
   239c6:	18fb      	adds	r3, r7, r3
   239c8:	781b      	ldrb	r3, [r3, #0]
   239ca:	0011      	movs	r1, r2
   239cc:	0018      	movs	r0, r3
   239ce:	4b08      	ldr	r3, [pc, #32]	; (239f0 <crc7+0x4c>)
   239d0:	4798      	blx	r3
   239d2:	0003      	movs	r3, r0
   239d4:	7023      	strb	r3, [r4, #0]
	while (len--)
   239d6:	687b      	ldr	r3, [r7, #4]
   239d8:	1e5a      	subs	r2, r3, #1
   239da:	607a      	str	r2, [r7, #4]
   239dc:	2b00      	cmp	r3, #0
   239de:	d1eb      	bne.n	239b8 <crc7+0x14>
	return crc;
   239e0:	230f      	movs	r3, #15
   239e2:	18fb      	adds	r3, r7, r3
   239e4:	781b      	ldrb	r3, [r3, #0]
}
   239e6:	0018      	movs	r0, r3
   239e8:	46bd      	mov	sp, r7
   239ea:	b005      	add	sp, #20
   239ec:	bd90      	pop	{r4, r7, pc}
   239ee:	46c0      	nop			; (mov r8, r8)
   239f0:	00023975 	.word	0x00023975

000239f4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   239f4:	b590      	push	{r4, r7, lr}
   239f6:	b089      	sub	sp, #36	; 0x24
   239f8:	af00      	add	r7, sp, #0
   239fa:	60b9      	str	r1, [r7, #8]
   239fc:	607a      	str	r2, [r7, #4]
   239fe:	603b      	str	r3, [r7, #0]
   23a00:	230f      	movs	r3, #15
   23a02:	18fb      	adds	r3, r7, r3
   23a04:	1c02      	adds	r2, r0, #0
   23a06:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   23a08:	231f      	movs	r3, #31
   23a0a:	18fb      	adds	r3, r7, r3
   23a0c:	2205      	movs	r2, #5
   23a0e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23a10:	231e      	movs	r3, #30
   23a12:	18fb      	adds	r3, r7, r3
   23a14:	2201      	movs	r2, #1
   23a16:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   23a18:	2314      	movs	r3, #20
   23a1a:	18fb      	adds	r3, r7, r3
   23a1c:	220f      	movs	r2, #15
   23a1e:	18ba      	adds	r2, r7, r2
   23a20:	7812      	ldrb	r2, [r2, #0]
   23a22:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23a24:	230f      	movs	r3, #15
   23a26:	18fb      	adds	r3, r7, r3
   23a28:	781b      	ldrb	r3, [r3, #0]
   23a2a:	3bc1      	subs	r3, #193	; 0xc1
   23a2c:	2b0e      	cmp	r3, #14
   23a2e:	d900      	bls.n	23a32 <spi_cmd+0x3e>
   23a30:	e11b      	b.n	23c6a <spi_cmd+0x276>
   23a32:	009a      	lsls	r2, r3, #2
   23a34:	4bb6      	ldr	r3, [pc, #728]	; (23d10 <spi_cmd+0x31c>)
   23a36:	18d3      	adds	r3, r2, r3
   23a38:	681b      	ldr	r3, [r3, #0]
   23a3a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   23a3c:	68bb      	ldr	r3, [r7, #8]
   23a3e:	0c1b      	lsrs	r3, r3, #16
   23a40:	b2da      	uxtb	r2, r3
   23a42:	2314      	movs	r3, #20
   23a44:	18fb      	adds	r3, r7, r3
   23a46:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23a48:	68bb      	ldr	r3, [r7, #8]
   23a4a:	0a1b      	lsrs	r3, r3, #8
   23a4c:	b2da      	uxtb	r2, r3
   23a4e:	2314      	movs	r3, #20
   23a50:	18fb      	adds	r3, r7, r3
   23a52:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23a54:	68bb      	ldr	r3, [r7, #8]
   23a56:	b2da      	uxtb	r2, r3
   23a58:	2314      	movs	r3, #20
   23a5a:	18fb      	adds	r3, r7, r3
   23a5c:	70da      	strb	r2, [r3, #3]
		len = 5;
   23a5e:	231f      	movs	r3, #31
   23a60:	18fb      	adds	r3, r7, r3
   23a62:	2205      	movs	r2, #5
   23a64:	701a      	strb	r2, [r3, #0]
		break;
   23a66:	e105      	b.n	23c74 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   23a68:	68bb      	ldr	r3, [r7, #8]
   23a6a:	0a1b      	lsrs	r3, r3, #8
   23a6c:	b2da      	uxtb	r2, r3
   23a6e:	2314      	movs	r3, #20
   23a70:	18fb      	adds	r3, r7, r3
   23a72:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   23a74:	2330      	movs	r3, #48	; 0x30
   23a76:	18fb      	adds	r3, r7, r3
   23a78:	781b      	ldrb	r3, [r3, #0]
   23a7a:	2b00      	cmp	r3, #0
   23a7c:	d009      	beq.n	23a92 <spi_cmd+0x9e>
   23a7e:	2314      	movs	r3, #20
   23a80:	18fb      	adds	r3, r7, r3
   23a82:	785b      	ldrb	r3, [r3, #1]
   23a84:	2280      	movs	r2, #128	; 0x80
   23a86:	4252      	negs	r2, r2
   23a88:	4313      	orrs	r3, r2
   23a8a:	b2da      	uxtb	r2, r3
   23a8c:	2314      	movs	r3, #20
   23a8e:	18fb      	adds	r3, r7, r3
   23a90:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   23a92:	68bb      	ldr	r3, [r7, #8]
   23a94:	b2da      	uxtb	r2, r3
   23a96:	2314      	movs	r3, #20
   23a98:	18fb      	adds	r3, r7, r3
   23a9a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   23a9c:	2314      	movs	r3, #20
   23a9e:	18fb      	adds	r3, r7, r3
   23aa0:	2200      	movs	r2, #0
   23aa2:	70da      	strb	r2, [r3, #3]
		len = 5;
   23aa4:	231f      	movs	r3, #31
   23aa6:	18fb      	adds	r3, r7, r3
   23aa8:	2205      	movs	r2, #5
   23aaa:	701a      	strb	r2, [r3, #0]
		break;
   23aac:	e0e2      	b.n	23c74 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   23aae:	2314      	movs	r3, #20
   23ab0:	18fb      	adds	r3, r7, r3
   23ab2:	2200      	movs	r2, #0
   23ab4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   23ab6:	2314      	movs	r3, #20
   23ab8:	18fb      	adds	r3, r7, r3
   23aba:	2200      	movs	r2, #0
   23abc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   23abe:	2314      	movs	r3, #20
   23ac0:	18fb      	adds	r3, r7, r3
   23ac2:	2200      	movs	r2, #0
   23ac4:	70da      	strb	r2, [r3, #3]
		len = 5;
   23ac6:	231f      	movs	r3, #31
   23ac8:	18fb      	adds	r3, r7, r3
   23aca:	2205      	movs	r2, #5
   23acc:	701a      	strb	r2, [r3, #0]
		break;
   23ace:	e0d1      	b.n	23c74 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   23ad0:	2314      	movs	r3, #20
   23ad2:	18fb      	adds	r3, r7, r3
   23ad4:	2200      	movs	r2, #0
   23ad6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   23ad8:	2314      	movs	r3, #20
   23ada:	18fb      	adds	r3, r7, r3
   23adc:	2200      	movs	r2, #0
   23ade:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   23ae0:	2314      	movs	r3, #20
   23ae2:	18fb      	adds	r3, r7, r3
   23ae4:	2200      	movs	r2, #0
   23ae6:	70da      	strb	r2, [r3, #3]
		len = 5;
   23ae8:	231f      	movs	r3, #31
   23aea:	18fb      	adds	r3, r7, r3
   23aec:	2205      	movs	r2, #5
   23aee:	701a      	strb	r2, [r3, #0]
		break;
   23af0:	e0c0      	b.n	23c74 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   23af2:	2314      	movs	r3, #20
   23af4:	18fb      	adds	r3, r7, r3
   23af6:	22ff      	movs	r2, #255	; 0xff
   23af8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   23afa:	2314      	movs	r3, #20
   23afc:	18fb      	adds	r3, r7, r3
   23afe:	22ff      	movs	r2, #255	; 0xff
   23b00:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   23b02:	2314      	movs	r3, #20
   23b04:	18fb      	adds	r3, r7, r3
   23b06:	22ff      	movs	r2, #255	; 0xff
   23b08:	70da      	strb	r2, [r3, #3]
		len = 5;
   23b0a:	231f      	movs	r3, #31
   23b0c:	18fb      	adds	r3, r7, r3
   23b0e:	2205      	movs	r2, #5
   23b10:	701a      	strb	r2, [r3, #0]
		break;
   23b12:	e0af      	b.n	23c74 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   23b14:	68bb      	ldr	r3, [r7, #8]
   23b16:	0c1b      	lsrs	r3, r3, #16
   23b18:	b2da      	uxtb	r2, r3
   23b1a:	2314      	movs	r3, #20
   23b1c:	18fb      	adds	r3, r7, r3
   23b1e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23b20:	68bb      	ldr	r3, [r7, #8]
   23b22:	0a1b      	lsrs	r3, r3, #8
   23b24:	b2da      	uxtb	r2, r3
   23b26:	2314      	movs	r3, #20
   23b28:	18fb      	adds	r3, r7, r3
   23b2a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23b2c:	68bb      	ldr	r3, [r7, #8]
   23b2e:	b2da      	uxtb	r2, r3
   23b30:	2314      	movs	r3, #20
   23b32:	18fb      	adds	r3, r7, r3
   23b34:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   23b36:	683b      	ldr	r3, [r7, #0]
   23b38:	0a1b      	lsrs	r3, r3, #8
   23b3a:	b2da      	uxtb	r2, r3
   23b3c:	2314      	movs	r3, #20
   23b3e:	18fb      	adds	r3, r7, r3
   23b40:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   23b42:	683b      	ldr	r3, [r7, #0]
   23b44:	b2da      	uxtb	r2, r3
   23b46:	2314      	movs	r3, #20
   23b48:	18fb      	adds	r3, r7, r3
   23b4a:	715a      	strb	r2, [r3, #5]
		len = 7;
   23b4c:	231f      	movs	r3, #31
   23b4e:	18fb      	adds	r3, r7, r3
   23b50:	2207      	movs	r2, #7
   23b52:	701a      	strb	r2, [r3, #0]
		break;
   23b54:	e08e      	b.n	23c74 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   23b56:	68bb      	ldr	r3, [r7, #8]
   23b58:	0c1b      	lsrs	r3, r3, #16
   23b5a:	b2da      	uxtb	r2, r3
   23b5c:	2314      	movs	r3, #20
   23b5e:	18fb      	adds	r3, r7, r3
   23b60:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23b62:	68bb      	ldr	r3, [r7, #8]
   23b64:	0a1b      	lsrs	r3, r3, #8
   23b66:	b2da      	uxtb	r2, r3
   23b68:	2314      	movs	r3, #20
   23b6a:	18fb      	adds	r3, r7, r3
   23b6c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23b6e:	68bb      	ldr	r3, [r7, #8]
   23b70:	b2da      	uxtb	r2, r3
   23b72:	2314      	movs	r3, #20
   23b74:	18fb      	adds	r3, r7, r3
   23b76:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   23b78:	683b      	ldr	r3, [r7, #0]
   23b7a:	0c1b      	lsrs	r3, r3, #16
   23b7c:	b2da      	uxtb	r2, r3
   23b7e:	2314      	movs	r3, #20
   23b80:	18fb      	adds	r3, r7, r3
   23b82:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   23b84:	683b      	ldr	r3, [r7, #0]
   23b86:	0a1b      	lsrs	r3, r3, #8
   23b88:	b2da      	uxtb	r2, r3
   23b8a:	2314      	movs	r3, #20
   23b8c:	18fb      	adds	r3, r7, r3
   23b8e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   23b90:	683b      	ldr	r3, [r7, #0]
   23b92:	b2da      	uxtb	r2, r3
   23b94:	2314      	movs	r3, #20
   23b96:	18fb      	adds	r3, r7, r3
   23b98:	719a      	strb	r2, [r3, #6]
		len = 8;
   23b9a:	231f      	movs	r3, #31
   23b9c:	18fb      	adds	r3, r7, r3
   23b9e:	2208      	movs	r2, #8
   23ba0:	701a      	strb	r2, [r3, #0]
		break;
   23ba2:	e067      	b.n	23c74 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   23ba4:	68bb      	ldr	r3, [r7, #8]
   23ba6:	0a1b      	lsrs	r3, r3, #8
   23ba8:	b2da      	uxtb	r2, r3
   23baa:	2314      	movs	r3, #20
   23bac:	18fb      	adds	r3, r7, r3
   23bae:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   23bb0:	2330      	movs	r3, #48	; 0x30
   23bb2:	18fb      	adds	r3, r7, r3
   23bb4:	781b      	ldrb	r3, [r3, #0]
   23bb6:	2b00      	cmp	r3, #0
   23bb8:	d009      	beq.n	23bce <spi_cmd+0x1da>
   23bba:	2314      	movs	r3, #20
   23bbc:	18fb      	adds	r3, r7, r3
   23bbe:	785b      	ldrb	r3, [r3, #1]
   23bc0:	2280      	movs	r2, #128	; 0x80
   23bc2:	4252      	negs	r2, r2
   23bc4:	4313      	orrs	r3, r2
   23bc6:	b2da      	uxtb	r2, r3
   23bc8:	2314      	movs	r3, #20
   23bca:	18fb      	adds	r3, r7, r3
   23bcc:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   23bce:	68bb      	ldr	r3, [r7, #8]
   23bd0:	b2da      	uxtb	r2, r3
   23bd2:	2314      	movs	r3, #20
   23bd4:	18fb      	adds	r3, r7, r3
   23bd6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   23bd8:	687b      	ldr	r3, [r7, #4]
   23bda:	0e1b      	lsrs	r3, r3, #24
   23bdc:	b2da      	uxtb	r2, r3
   23bde:	2314      	movs	r3, #20
   23be0:	18fb      	adds	r3, r7, r3
   23be2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   23be4:	687b      	ldr	r3, [r7, #4]
   23be6:	0c1b      	lsrs	r3, r3, #16
   23be8:	b2da      	uxtb	r2, r3
   23bea:	2314      	movs	r3, #20
   23bec:	18fb      	adds	r3, r7, r3
   23bee:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   23bf0:	687b      	ldr	r3, [r7, #4]
   23bf2:	0a1b      	lsrs	r3, r3, #8
   23bf4:	b2da      	uxtb	r2, r3
   23bf6:	2314      	movs	r3, #20
   23bf8:	18fb      	adds	r3, r7, r3
   23bfa:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   23bfc:	687b      	ldr	r3, [r7, #4]
   23bfe:	b2da      	uxtb	r2, r3
   23c00:	2314      	movs	r3, #20
   23c02:	18fb      	adds	r3, r7, r3
   23c04:	719a      	strb	r2, [r3, #6]
		len = 8;
   23c06:	231f      	movs	r3, #31
   23c08:	18fb      	adds	r3, r7, r3
   23c0a:	2208      	movs	r2, #8
   23c0c:	701a      	strb	r2, [r3, #0]
		break;
   23c0e:	e031      	b.n	23c74 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   23c10:	68bb      	ldr	r3, [r7, #8]
   23c12:	0c1b      	lsrs	r3, r3, #16
   23c14:	b2da      	uxtb	r2, r3
   23c16:	2314      	movs	r3, #20
   23c18:	18fb      	adds	r3, r7, r3
   23c1a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23c1c:	68bb      	ldr	r3, [r7, #8]
   23c1e:	0a1b      	lsrs	r3, r3, #8
   23c20:	b2da      	uxtb	r2, r3
   23c22:	2314      	movs	r3, #20
   23c24:	18fb      	adds	r3, r7, r3
   23c26:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   23c28:	68bb      	ldr	r3, [r7, #8]
   23c2a:	b2da      	uxtb	r2, r3
   23c2c:	2314      	movs	r3, #20
   23c2e:	18fb      	adds	r3, r7, r3
   23c30:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   23c32:	687b      	ldr	r3, [r7, #4]
   23c34:	0e1b      	lsrs	r3, r3, #24
   23c36:	b2da      	uxtb	r2, r3
   23c38:	2314      	movs	r3, #20
   23c3a:	18fb      	adds	r3, r7, r3
   23c3c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   23c3e:	687b      	ldr	r3, [r7, #4]
   23c40:	0c1b      	lsrs	r3, r3, #16
   23c42:	b2da      	uxtb	r2, r3
   23c44:	2314      	movs	r3, #20
   23c46:	18fb      	adds	r3, r7, r3
   23c48:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   23c4a:	687b      	ldr	r3, [r7, #4]
   23c4c:	0a1b      	lsrs	r3, r3, #8
   23c4e:	b2da      	uxtb	r2, r3
   23c50:	2314      	movs	r3, #20
   23c52:	18fb      	adds	r3, r7, r3
   23c54:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   23c56:	687b      	ldr	r3, [r7, #4]
   23c58:	b2da      	uxtb	r2, r3
   23c5a:	2314      	movs	r3, #20
   23c5c:	18fb      	adds	r3, r7, r3
   23c5e:	71da      	strb	r2, [r3, #7]
		len = 9;
   23c60:	231f      	movs	r3, #31
   23c62:	18fb      	adds	r3, r7, r3
   23c64:	2209      	movs	r2, #9
   23c66:	701a      	strb	r2, [r3, #0]
		break;
   23c68:	e004      	b.n	23c74 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   23c6a:	231e      	movs	r3, #30
   23c6c:	18fb      	adds	r3, r7, r3
   23c6e:	2200      	movs	r2, #0
   23c70:	701a      	strb	r2, [r3, #0]
		break;
   23c72:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   23c74:	231e      	movs	r3, #30
   23c76:	18fb      	adds	r3, r7, r3
   23c78:	781b      	ldrb	r3, [r3, #0]
   23c7a:	b25b      	sxtb	r3, r3
   23c7c:	2b00      	cmp	r3, #0
   23c7e:	d03f      	beq.n	23d00 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   23c80:	4b24      	ldr	r3, [pc, #144]	; (23d14 <spi_cmd+0x320>)
   23c82:	781b      	ldrb	r3, [r3, #0]
   23c84:	2b00      	cmp	r3, #0
   23c86:	d115      	bne.n	23cb4 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   23c88:	231f      	movs	r3, #31
   23c8a:	18fb      	adds	r3, r7, r3
   23c8c:	781b      	ldrb	r3, [r3, #0]
   23c8e:	1e5c      	subs	r4, r3, #1
   23c90:	231f      	movs	r3, #31
   23c92:	18fb      	adds	r3, r7, r3
   23c94:	781b      	ldrb	r3, [r3, #0]
   23c96:	3b01      	subs	r3, #1
   23c98:	001a      	movs	r2, r3
   23c9a:	2314      	movs	r3, #20
   23c9c:	18fb      	adds	r3, r7, r3
   23c9e:	0019      	movs	r1, r3
   23ca0:	207f      	movs	r0, #127	; 0x7f
   23ca2:	4b1d      	ldr	r3, [pc, #116]	; (23d18 <spi_cmd+0x324>)
   23ca4:	4798      	blx	r3
   23ca6:	0003      	movs	r3, r0
   23ca8:	18db      	adds	r3, r3, r3
   23caa:	b2da      	uxtb	r2, r3
   23cac:	2314      	movs	r3, #20
   23cae:	18fb      	adds	r3, r7, r3
   23cb0:	551a      	strb	r2, [r3, r4]
   23cb2:	e006      	b.n	23cc2 <spi_cmd+0x2ce>
		else
			len-=1;
   23cb4:	231f      	movs	r3, #31
   23cb6:	18fb      	adds	r3, r7, r3
   23cb8:	221f      	movs	r2, #31
   23cba:	18ba      	adds	r2, r7, r2
   23cbc:	7812      	ldrb	r2, [r2, #0]
   23cbe:	3a01      	subs	r2, #1
   23cc0:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   23cc2:	231f      	movs	r3, #31
   23cc4:	18fb      	adds	r3, r7, r3
   23cc6:	781b      	ldrb	r3, [r3, #0]
   23cc8:	b29a      	uxth	r2, r3
   23cca:	2314      	movs	r3, #20
   23ccc:	18fb      	adds	r3, r7, r3
   23cce:	0011      	movs	r1, r2
   23cd0:	0018      	movs	r0, r3
   23cd2:	4b12      	ldr	r3, [pc, #72]	; (23d1c <spi_cmd+0x328>)
   23cd4:	4798      	blx	r3
   23cd6:	1e03      	subs	r3, r0, #0
   23cd8:	d012      	beq.n	23d00 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23cda:	2390      	movs	r3, #144	; 0x90
   23cdc:	005a      	lsls	r2, r3, #1
   23cde:	4910      	ldr	r1, [pc, #64]	; (23d20 <spi_cmd+0x32c>)
   23ce0:	4b10      	ldr	r3, [pc, #64]	; (23d24 <spi_cmd+0x330>)
   23ce2:	0018      	movs	r0, r3
   23ce4:	4b10      	ldr	r3, [pc, #64]	; (23d28 <spi_cmd+0x334>)
   23ce6:	4798      	blx	r3
   23ce8:	4b10      	ldr	r3, [pc, #64]	; (23d2c <spi_cmd+0x338>)
   23cea:	0018      	movs	r0, r3
   23cec:	4b0e      	ldr	r3, [pc, #56]	; (23d28 <spi_cmd+0x334>)
   23cee:	4798      	blx	r3
   23cf0:	4b0f      	ldr	r3, [pc, #60]	; (23d30 <spi_cmd+0x33c>)
   23cf2:	0018      	movs	r0, r3
   23cf4:	4b0c      	ldr	r3, [pc, #48]	; (23d28 <spi_cmd+0x334>)
   23cf6:	4798      	blx	r3
			result = N_FAIL;
   23cf8:	231e      	movs	r3, #30
   23cfa:	18fb      	adds	r3, r7, r3
   23cfc:	2200      	movs	r2, #0
   23cfe:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   23d00:	231e      	movs	r3, #30
   23d02:	18fb      	adds	r3, r7, r3
   23d04:	781b      	ldrb	r3, [r3, #0]
   23d06:	b25b      	sxtb	r3, r3
}
   23d08:	0018      	movs	r0, r3
   23d0a:	46bd      	mov	sp, r7
   23d0c:	b009      	add	sp, #36	; 0x24
   23d0e:	bd90      	pop	{r4, r7, pc}
   23d10:	00039b38 	.word	0x00039b38
   23d14:	200042b0 	.word	0x200042b0
   23d18:	000239a5 	.word	0x000239a5
   23d1c:	000238ed 	.word	0x000238ed
   23d20:	00039bb0 	.word	0x00039bb0
   23d24:	000395c0 	.word	0x000395c0
   23d28:	0001e3f9 	.word	0x0001e3f9
   23d2c:	000395d4 	.word	0x000395d4
   23d30:	00039600 	.word	0x00039600

00023d34 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   23d34:	b590      	push	{r4, r7, lr}
   23d36:	b085      	sub	sp, #20
   23d38:	af00      	add	r7, sp, #0
   23d3a:	0002      	movs	r2, r0
   23d3c:	1dfb      	adds	r3, r7, #7
   23d3e:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   23d40:	230e      	movs	r3, #14
   23d42:	18fb      	adds	r3, r7, r3
   23d44:	2201      	movs	r2, #1
   23d46:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   23d48:	4b32      	ldr	r3, [pc, #200]	; (23e14 <spi_data_rsp+0xe0>)
   23d4a:	781b      	ldrb	r3, [r3, #0]
   23d4c:	2b00      	cmp	r3, #0
   23d4e:	d104      	bne.n	23d5a <spi_data_rsp+0x26>
		len = 2;
   23d50:	230f      	movs	r3, #15
   23d52:	18fb      	adds	r3, r7, r3
   23d54:	2202      	movs	r2, #2
   23d56:	701a      	strb	r2, [r3, #0]
   23d58:	e003      	b.n	23d62 <spi_data_rsp+0x2e>
	else
		len = 3;
   23d5a:	230f      	movs	r3, #15
   23d5c:	18fb      	adds	r3, r7, r3
   23d5e:	2203      	movs	r2, #3
   23d60:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   23d62:	230f      	movs	r3, #15
   23d64:	18fb      	adds	r3, r7, r3
   23d66:	781b      	ldrb	r3, [r3, #0]
   23d68:	b29a      	uxth	r2, r3
   23d6a:	2308      	movs	r3, #8
   23d6c:	18fb      	adds	r3, r7, r3
   23d6e:	0011      	movs	r1, r2
   23d70:	0018      	movs	r0, r3
   23d72:	4b29      	ldr	r3, [pc, #164]	; (23e18 <spi_data_rsp+0xe4>)
   23d74:	4798      	blx	r3
   23d76:	1e03      	subs	r3, r0, #0
   23d78:	d013      	beq.n	23da2 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   23d7a:	239a      	movs	r3, #154	; 0x9a
   23d7c:	005a      	lsls	r2, r3, #1
   23d7e:	4927      	ldr	r1, [pc, #156]	; (23e1c <spi_data_rsp+0xe8>)
   23d80:	4b27      	ldr	r3, [pc, #156]	; (23e20 <spi_data_rsp+0xec>)
   23d82:	0018      	movs	r0, r3
   23d84:	4b27      	ldr	r3, [pc, #156]	; (23e24 <spi_data_rsp+0xf0>)
   23d86:	4798      	blx	r3
   23d88:	4b27      	ldr	r3, [pc, #156]	; (23e28 <spi_data_rsp+0xf4>)
   23d8a:	0018      	movs	r0, r3
   23d8c:	4b25      	ldr	r3, [pc, #148]	; (23e24 <spi_data_rsp+0xf0>)
   23d8e:	4798      	blx	r3
   23d90:	4b26      	ldr	r3, [pc, #152]	; (23e2c <spi_data_rsp+0xf8>)
   23d92:	0018      	movs	r0, r3
   23d94:	4b23      	ldr	r3, [pc, #140]	; (23e24 <spi_data_rsp+0xf0>)
   23d96:	4798      	blx	r3
		result = N_FAIL;
   23d98:	230e      	movs	r3, #14
   23d9a:	18fb      	adds	r3, r7, r3
   23d9c:	2200      	movs	r2, #0
   23d9e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23da0:	e030      	b.n	23e04 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   23da2:	230f      	movs	r3, #15
   23da4:	18fb      	adds	r3, r7, r3
   23da6:	781b      	ldrb	r3, [r3, #0]
   23da8:	3b01      	subs	r3, #1
   23daa:	2208      	movs	r2, #8
   23dac:	18ba      	adds	r2, r7, r2
   23dae:	5cd3      	ldrb	r3, [r2, r3]
   23db0:	2b00      	cmp	r3, #0
   23db2:	d108      	bne.n	23dc6 <spi_data_rsp+0x92>
   23db4:	230f      	movs	r3, #15
   23db6:	18fb      	adds	r3, r7, r3
   23db8:	781b      	ldrb	r3, [r3, #0]
   23dba:	3b02      	subs	r3, #2
   23dbc:	2208      	movs	r2, #8
   23dbe:	18ba      	adds	r2, r7, r2
   23dc0:	5cd3      	ldrb	r3, [r2, r3]
   23dc2:	2bc3      	cmp	r3, #195	; 0xc3
   23dc4:	d01e      	beq.n	23e04 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   23dc6:	233c      	movs	r3, #60	; 0x3c
   23dc8:	33ff      	adds	r3, #255	; 0xff
   23dca:	001a      	movs	r2, r3
   23dcc:	4913      	ldr	r1, [pc, #76]	; (23e1c <spi_data_rsp+0xe8>)
   23dce:	4b14      	ldr	r3, [pc, #80]	; (23e20 <spi_data_rsp+0xec>)
   23dd0:	0018      	movs	r0, r3
   23dd2:	4b14      	ldr	r3, [pc, #80]	; (23e24 <spi_data_rsp+0xf0>)
   23dd4:	4798      	blx	r3
   23dd6:	2308      	movs	r3, #8
   23dd8:	18fb      	adds	r3, r7, r3
   23dda:	781b      	ldrb	r3, [r3, #0]
   23ddc:	0019      	movs	r1, r3
   23dde:	2308      	movs	r3, #8
   23de0:	18fb      	adds	r3, r7, r3
   23de2:	785b      	ldrb	r3, [r3, #1]
   23de4:	001a      	movs	r2, r3
   23de6:	2308      	movs	r3, #8
   23de8:	18fb      	adds	r3, r7, r3
   23dea:	789b      	ldrb	r3, [r3, #2]
   23dec:	4810      	ldr	r0, [pc, #64]	; (23e30 <spi_data_rsp+0xfc>)
   23dee:	4c0d      	ldr	r4, [pc, #52]	; (23e24 <spi_data_rsp+0xf0>)
   23df0:	47a0      	blx	r4
   23df2:	4b0e      	ldr	r3, [pc, #56]	; (23e2c <spi_data_rsp+0xf8>)
   23df4:	0018      	movs	r0, r3
   23df6:	4b0b      	ldr	r3, [pc, #44]	; (23e24 <spi_data_rsp+0xf0>)
   23df8:	4798      	blx	r3
		result = N_FAIL;
   23dfa:	230e      	movs	r3, #14
   23dfc:	18fb      	adds	r3, r7, r3
   23dfe:	2200      	movs	r2, #0
   23e00:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23e02:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   23e04:	230e      	movs	r3, #14
   23e06:	18fb      	adds	r3, r7, r3
   23e08:	781b      	ldrb	r3, [r3, #0]
   23e0a:	b25b      	sxtb	r3, r3
}
   23e0c:	0018      	movs	r0, r3
   23e0e:	46bd      	mov	sp, r7
   23e10:	b005      	add	sp, #20
   23e12:	bd90      	pop	{r4, r7, pc}
   23e14:	200042b0 	.word	0x200042b0
   23e18:	000238a9 	.word	0x000238a9
   23e1c:	00039bb8 	.word	0x00039bb8
   23e20:	000395c0 	.word	0x000395c0
   23e24:	0001e3f9 	.word	0x0001e3f9
   23e28:	00039604 	.word	0x00039604
   23e2c:	00039600 	.word	0x00039600
   23e30:	00039624 	.word	0x00039624

00023e34 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   23e34:	b580      	push	{r7, lr}
   23e36:	b084      	sub	sp, #16
   23e38:	af00      	add	r7, sp, #0
   23e3a:	0002      	movs	r2, r0
   23e3c:	1dfb      	adds	r3, r7, #7
   23e3e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   23e40:	230f      	movs	r3, #15
   23e42:	18fb      	adds	r3, r7, r3
   23e44:	2201      	movs	r2, #1
   23e46:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23e48:	1dfb      	adds	r3, r7, #7
   23e4a:	781b      	ldrb	r3, [r3, #0]
   23e4c:	2bcf      	cmp	r3, #207	; 0xcf
   23e4e:	d007      	beq.n	23e60 <spi_cmd_rsp+0x2c>
   23e50:	1dfb      	adds	r3, r7, #7
   23e52:	781b      	ldrb	r3, [r3, #0]
   23e54:	2bc5      	cmp	r3, #197	; 0xc5
   23e56:	d003      	beq.n	23e60 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   23e58:	1dfb      	adds	r3, r7, #7
   23e5a:	781b      	ldrb	r3, [r3, #0]
   23e5c:	2bc6      	cmp	r3, #198	; 0xc6
   23e5e:	d10c      	bne.n	23e7a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23e60:	230d      	movs	r3, #13
   23e62:	18fb      	adds	r3, r7, r3
   23e64:	2101      	movs	r1, #1
   23e66:	0018      	movs	r0, r3
   23e68:	4b3b      	ldr	r3, [pc, #236]	; (23f58 <spi_cmd_rsp+0x124>)
   23e6a:	4798      	blx	r3
   23e6c:	1e03      	subs	r3, r0, #0
   23e6e:	d004      	beq.n	23e7a <spi_cmd_rsp+0x46>
			result = N_FAIL;
   23e70:	230f      	movs	r3, #15
   23e72:	18fb      	adds	r3, r7, r3
   23e74:	2200      	movs	r2, #0
   23e76:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23e78:	e065      	b.n	23f46 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   23e7a:	230e      	movs	r3, #14
   23e7c:	18fb      	adds	r3, r7, r3
   23e7e:	220a      	movs	r2, #10
   23e80:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23e82:	230d      	movs	r3, #13
   23e84:	18fb      	adds	r3, r7, r3
   23e86:	2101      	movs	r1, #1
   23e88:	0018      	movs	r0, r3
   23e8a:	4b33      	ldr	r3, [pc, #204]	; (23f58 <spi_cmd_rsp+0x124>)
   23e8c:	4798      	blx	r3
   23e8e:	1e03      	subs	r3, r0, #0
   23e90:	d014      	beq.n	23ebc <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23e92:	235c      	movs	r3, #92	; 0x5c
   23e94:	33ff      	adds	r3, #255	; 0xff
   23e96:	001a      	movs	r2, r3
   23e98:	4930      	ldr	r1, [pc, #192]	; (23f5c <spi_cmd_rsp+0x128>)
   23e9a:	4b31      	ldr	r3, [pc, #196]	; (23f60 <spi_cmd_rsp+0x12c>)
   23e9c:	0018      	movs	r0, r3
   23e9e:	4b31      	ldr	r3, [pc, #196]	; (23f64 <spi_cmd_rsp+0x130>)
   23ea0:	4798      	blx	r3
   23ea2:	4b31      	ldr	r3, [pc, #196]	; (23f68 <spi_cmd_rsp+0x134>)
   23ea4:	0018      	movs	r0, r3
   23ea6:	4b2f      	ldr	r3, [pc, #188]	; (23f64 <spi_cmd_rsp+0x130>)
   23ea8:	4798      	blx	r3
   23eaa:	4b30      	ldr	r3, [pc, #192]	; (23f6c <spi_cmd_rsp+0x138>)
   23eac:	0018      	movs	r0, r3
   23eae:	4b2d      	ldr	r3, [pc, #180]	; (23f64 <spi_cmd_rsp+0x130>)
   23eb0:	4798      	blx	r3
			result = N_FAIL;
   23eb2:	230f      	movs	r3, #15
   23eb4:	18fb      	adds	r3, r7, r3
   23eb6:	2200      	movs	r2, #0
   23eb8:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23eba:	e044      	b.n	23f46 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   23ebc:	230d      	movs	r3, #13
   23ebe:	18fb      	adds	r3, r7, r3
   23ec0:	781b      	ldrb	r3, [r3, #0]
   23ec2:	1dfa      	adds	r2, r7, #7
   23ec4:	7812      	ldrb	r2, [r2, #0]
   23ec6:	429a      	cmp	r2, r3
   23ec8:	d00b      	beq.n	23ee2 <spi_cmd_rsp+0xae>
   23eca:	230e      	movs	r3, #14
   23ecc:	18fb      	adds	r3, r7, r3
   23ece:	781b      	ldrb	r3, [r3, #0]
   23ed0:	b25b      	sxtb	r3, r3
   23ed2:	b2da      	uxtb	r2, r3
   23ed4:	3a01      	subs	r2, #1
   23ed6:	b2d1      	uxtb	r1, r2
   23ed8:	220e      	movs	r2, #14
   23eda:	18ba      	adds	r2, r7, r2
   23edc:	7011      	strb	r1, [r2, #0]
   23ede:	2b00      	cmp	r3, #0
   23ee0:	dccf      	bgt.n	23e82 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   23ee2:	230e      	movs	r3, #14
   23ee4:	18fb      	adds	r3, r7, r3
   23ee6:	220a      	movs	r2, #10
   23ee8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23eea:	230d      	movs	r3, #13
   23eec:	18fb      	adds	r3, r7, r3
   23eee:	2101      	movs	r1, #1
   23ef0:	0018      	movs	r0, r3
   23ef2:	4b19      	ldr	r3, [pc, #100]	; (23f58 <spi_cmd_rsp+0x124>)
   23ef4:	4798      	blx	r3
   23ef6:	1e03      	subs	r3, r0, #0
   23ef8:	d014      	beq.n	23f24 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23efa:	236a      	movs	r3, #106	; 0x6a
   23efc:	33ff      	adds	r3, #255	; 0xff
   23efe:	001a      	movs	r2, r3
   23f00:	4916      	ldr	r1, [pc, #88]	; (23f5c <spi_cmd_rsp+0x128>)
   23f02:	4b17      	ldr	r3, [pc, #92]	; (23f60 <spi_cmd_rsp+0x12c>)
   23f04:	0018      	movs	r0, r3
   23f06:	4b17      	ldr	r3, [pc, #92]	; (23f64 <spi_cmd_rsp+0x130>)
   23f08:	4798      	blx	r3
   23f0a:	4b17      	ldr	r3, [pc, #92]	; (23f68 <spi_cmd_rsp+0x134>)
   23f0c:	0018      	movs	r0, r3
   23f0e:	4b15      	ldr	r3, [pc, #84]	; (23f64 <spi_cmd_rsp+0x130>)
   23f10:	4798      	blx	r3
   23f12:	4b16      	ldr	r3, [pc, #88]	; (23f6c <spi_cmd_rsp+0x138>)
   23f14:	0018      	movs	r0, r3
   23f16:	4b13      	ldr	r3, [pc, #76]	; (23f64 <spi_cmd_rsp+0x130>)
   23f18:	4798      	blx	r3
			result = N_FAIL;
   23f1a:	230f      	movs	r3, #15
   23f1c:	18fb      	adds	r3, r7, r3
   23f1e:	2200      	movs	r2, #0
   23f20:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23f22:	e010      	b.n	23f46 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   23f24:	230d      	movs	r3, #13
   23f26:	18fb      	adds	r3, r7, r3
   23f28:	781b      	ldrb	r3, [r3, #0]
   23f2a:	2b00      	cmp	r3, #0
   23f2c:	d00b      	beq.n	23f46 <spi_cmd_rsp+0x112>
   23f2e:	230e      	movs	r3, #14
   23f30:	18fb      	adds	r3, r7, r3
   23f32:	781b      	ldrb	r3, [r3, #0]
   23f34:	b25b      	sxtb	r3, r3
   23f36:	b2da      	uxtb	r2, r3
   23f38:	3a01      	subs	r2, #1
   23f3a:	b2d1      	uxtb	r1, r2
   23f3c:	220e      	movs	r2, #14
   23f3e:	18ba      	adds	r2, r7, r2
   23f40:	7011      	strb	r1, [r2, #0]
   23f42:	2b00      	cmp	r3, #0
   23f44:	dcd1      	bgt.n	23eea <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   23f46:	230f      	movs	r3, #15
   23f48:	18fb      	adds	r3, r7, r3
   23f4a:	781b      	ldrb	r3, [r3, #0]
   23f4c:	b25b      	sxtb	r3, r3
}
   23f4e:	0018      	movs	r0, r3
   23f50:	46bd      	mov	sp, r7
   23f52:	b004      	add	sp, #16
   23f54:	bd80      	pop	{r7, pc}
   23f56:	46c0      	nop			; (mov r8, r8)
   23f58:	000238a9 	.word	0x000238a9
   23f5c:	00039bc8 	.word	0x00039bc8
   23f60:	000395c0 	.word	0x000395c0
   23f64:	0001e3f9 	.word	0x0001e3f9
   23f68:	00039654 	.word	0x00039654
   23f6c:	00039600 	.word	0x00039600

00023f70 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   23f70:	b590      	push	{r4, r7, lr}
   23f72:	b09f      	sub	sp, #124	; 0x7c
   23f74:	af00      	add	r7, sp, #0
   23f76:	60b9      	str	r1, [r7, #8]
   23f78:	607a      	str	r2, [r7, #4]
   23f7a:	603b      	str	r3, [r7, #0]
   23f7c:	230f      	movs	r3, #15
   23f7e:	18fb      	adds	r3, r7, r3
   23f80:	1c02      	adds	r2, r0, #0
   23f82:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   23f84:	2300      	movs	r3, #0
   23f86:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   23f88:	2301      	movs	r3, #1
   23f8a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   23f8c:	2338      	movs	r3, #56	; 0x38
   23f8e:	18fb      	adds	r3, r7, r3
   23f90:	220f      	movs	r2, #15
   23f92:	18ba      	adds	r2, r7, r2
   23f94:	7812      	ldrb	r2, [r2, #0]
   23f96:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23f98:	230f      	movs	r3, #15
   23f9a:	18fb      	adds	r3, r7, r3
   23f9c:	781b      	ldrb	r3, [r3, #0]
   23f9e:	3bc1      	subs	r3, #193	; 0xc1
   23fa0:	2b0e      	cmp	r3, #14
   23fa2:	d900      	bls.n	23fa6 <spi_cmd_complete+0x36>
   23fa4:	e103      	b.n	241ae <spi_cmd_complete+0x23e>
   23fa6:	009a      	lsls	r2, r3, #2
   23fa8:	4bd1      	ldr	r3, [pc, #836]	; (242f0 <spi_cmd_complete+0x380>)
   23faa:	18d3      	adds	r3, r2, r3
   23fac:	681b      	ldr	r3, [r3, #0]
   23fae:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   23fb0:	68bb      	ldr	r3, [r7, #8]
   23fb2:	0c1b      	lsrs	r3, r3, #16
   23fb4:	b2da      	uxtb	r2, r3
   23fb6:	2338      	movs	r3, #56	; 0x38
   23fb8:	18fb      	adds	r3, r7, r3
   23fba:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23fbc:	68bb      	ldr	r3, [r7, #8]
   23fbe:	0a1b      	lsrs	r3, r3, #8
   23fc0:	b2da      	uxtb	r2, r3
   23fc2:	2338      	movs	r3, #56	; 0x38
   23fc4:	18fb      	adds	r3, r7, r3
   23fc6:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23fc8:	68bb      	ldr	r3, [r7, #8]
   23fca:	b2da      	uxtb	r2, r3
   23fcc:	2338      	movs	r3, #56	; 0x38
   23fce:	18fb      	adds	r3, r7, r3
   23fd0:	70da      	strb	r2, [r3, #3]
		len = 5;
   23fd2:	2305      	movs	r3, #5
   23fd4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   23fd6:	e0ed      	b.n	241b4 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   23fd8:	68bb      	ldr	r3, [r7, #8]
   23fda:	0a1b      	lsrs	r3, r3, #8
   23fdc:	b2da      	uxtb	r2, r3
   23fde:	2338      	movs	r3, #56	; 0x38
   23fe0:	18fb      	adds	r3, r7, r3
   23fe2:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23fe4:	2388      	movs	r3, #136	; 0x88
   23fe6:	18fb      	adds	r3, r7, r3
   23fe8:	781b      	ldrb	r3, [r3, #0]
   23fea:	2b01      	cmp	r3, #1
   23fec:	d109      	bne.n	24002 <spi_cmd_complete+0x92>
   23fee:	2338      	movs	r3, #56	; 0x38
   23ff0:	18fb      	adds	r3, r7, r3
   23ff2:	785b      	ldrb	r3, [r3, #1]
   23ff4:	2280      	movs	r2, #128	; 0x80
   23ff6:	4252      	negs	r2, r2
   23ff8:	4313      	orrs	r3, r2
   23ffa:	b2da      	uxtb	r2, r3
   23ffc:	2338      	movs	r3, #56	; 0x38
   23ffe:	18fb      	adds	r3, r7, r3
   24000:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   24002:	68bb      	ldr	r3, [r7, #8]
   24004:	b2da      	uxtb	r2, r3
   24006:	2338      	movs	r3, #56	; 0x38
   24008:	18fb      	adds	r3, r7, r3
   2400a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2400c:	2338      	movs	r3, #56	; 0x38
   2400e:	18fb      	adds	r3, r7, r3
   24010:	2200      	movs	r2, #0
   24012:	70da      	strb	r2, [r3, #3]
		len = 5;
   24014:	2305      	movs	r3, #5
   24016:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24018:	e0cc      	b.n	241b4 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   2401a:	2338      	movs	r3, #56	; 0x38
   2401c:	18fb      	adds	r3, r7, r3
   2401e:	2200      	movs	r2, #0
   24020:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   24022:	2338      	movs	r3, #56	; 0x38
   24024:	18fb      	adds	r3, r7, r3
   24026:	2200      	movs	r2, #0
   24028:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2402a:	2338      	movs	r3, #56	; 0x38
   2402c:	18fb      	adds	r3, r7, r3
   2402e:	2200      	movs	r2, #0
   24030:	70da      	strb	r2, [r3, #3]
		len = 5;
   24032:	2305      	movs	r3, #5
   24034:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24036:	e0bd      	b.n	241b4 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   24038:	2338      	movs	r3, #56	; 0x38
   2403a:	18fb      	adds	r3, r7, r3
   2403c:	2200      	movs	r2, #0
   2403e:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   24040:	2338      	movs	r3, #56	; 0x38
   24042:	18fb      	adds	r3, r7, r3
   24044:	2200      	movs	r2, #0
   24046:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   24048:	2338      	movs	r3, #56	; 0x38
   2404a:	18fb      	adds	r3, r7, r3
   2404c:	2200      	movs	r2, #0
   2404e:	70da      	strb	r2, [r3, #3]
		len = 5;
   24050:	2305      	movs	r3, #5
   24052:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24054:	e0ae      	b.n	241b4 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   24056:	2338      	movs	r3, #56	; 0x38
   24058:	18fb      	adds	r3, r7, r3
   2405a:	22ff      	movs	r2, #255	; 0xff
   2405c:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   2405e:	2338      	movs	r3, #56	; 0x38
   24060:	18fb      	adds	r3, r7, r3
   24062:	22ff      	movs	r2, #255	; 0xff
   24064:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   24066:	2338      	movs	r3, #56	; 0x38
   24068:	18fb      	adds	r3, r7, r3
   2406a:	22ff      	movs	r2, #255	; 0xff
   2406c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2406e:	2305      	movs	r3, #5
   24070:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24072:	e09f      	b.n	241b4 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   24074:	68bb      	ldr	r3, [r7, #8]
   24076:	0c1b      	lsrs	r3, r3, #16
   24078:	b2da      	uxtb	r2, r3
   2407a:	2338      	movs	r3, #56	; 0x38
   2407c:	18fb      	adds	r3, r7, r3
   2407e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24080:	68bb      	ldr	r3, [r7, #8]
   24082:	0a1b      	lsrs	r3, r3, #8
   24084:	b2da      	uxtb	r2, r3
   24086:	2338      	movs	r3, #56	; 0x38
   24088:	18fb      	adds	r3, r7, r3
   2408a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2408c:	68bb      	ldr	r3, [r7, #8]
   2408e:	b2da      	uxtb	r2, r3
   24090:	2338      	movs	r3, #56	; 0x38
   24092:	18fb      	adds	r3, r7, r3
   24094:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   24096:	683b      	ldr	r3, [r7, #0]
   24098:	0a1b      	lsrs	r3, r3, #8
   2409a:	b2da      	uxtb	r2, r3
   2409c:	2338      	movs	r3, #56	; 0x38
   2409e:	18fb      	adds	r3, r7, r3
   240a0:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   240a2:	683b      	ldr	r3, [r7, #0]
   240a4:	b2da      	uxtb	r2, r3
   240a6:	2338      	movs	r3, #56	; 0x38
   240a8:	18fb      	adds	r3, r7, r3
   240aa:	715a      	strb	r2, [r3, #5]
		len = 7;
   240ac:	2307      	movs	r3, #7
   240ae:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   240b0:	e080      	b.n	241b4 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   240b2:	68bb      	ldr	r3, [r7, #8]
   240b4:	0c1b      	lsrs	r3, r3, #16
   240b6:	b2da      	uxtb	r2, r3
   240b8:	2338      	movs	r3, #56	; 0x38
   240ba:	18fb      	adds	r3, r7, r3
   240bc:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   240be:	68bb      	ldr	r3, [r7, #8]
   240c0:	0a1b      	lsrs	r3, r3, #8
   240c2:	b2da      	uxtb	r2, r3
   240c4:	2338      	movs	r3, #56	; 0x38
   240c6:	18fb      	adds	r3, r7, r3
   240c8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   240ca:	68bb      	ldr	r3, [r7, #8]
   240cc:	b2da      	uxtb	r2, r3
   240ce:	2338      	movs	r3, #56	; 0x38
   240d0:	18fb      	adds	r3, r7, r3
   240d2:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   240d4:	683b      	ldr	r3, [r7, #0]
   240d6:	0c1b      	lsrs	r3, r3, #16
   240d8:	b2da      	uxtb	r2, r3
   240da:	2338      	movs	r3, #56	; 0x38
   240dc:	18fb      	adds	r3, r7, r3
   240de:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   240e0:	683b      	ldr	r3, [r7, #0]
   240e2:	0a1b      	lsrs	r3, r3, #8
   240e4:	b2da      	uxtb	r2, r3
   240e6:	2338      	movs	r3, #56	; 0x38
   240e8:	18fb      	adds	r3, r7, r3
   240ea:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   240ec:	683b      	ldr	r3, [r7, #0]
   240ee:	b2da      	uxtb	r2, r3
   240f0:	2338      	movs	r3, #56	; 0x38
   240f2:	18fb      	adds	r3, r7, r3
   240f4:	719a      	strb	r2, [r3, #6]
		len = 8;
   240f6:	2308      	movs	r3, #8
   240f8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   240fa:	e05b      	b.n	241b4 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   240fc:	68bb      	ldr	r3, [r7, #8]
   240fe:	0a1b      	lsrs	r3, r3, #8
   24100:	b2da      	uxtb	r2, r3
   24102:	2338      	movs	r3, #56	; 0x38
   24104:	18fb      	adds	r3, r7, r3
   24106:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   24108:	2388      	movs	r3, #136	; 0x88
   2410a:	18fb      	adds	r3, r7, r3
   2410c:	781b      	ldrb	r3, [r3, #0]
   2410e:	2b01      	cmp	r3, #1
   24110:	d109      	bne.n	24126 <spi_cmd_complete+0x1b6>
   24112:	2338      	movs	r3, #56	; 0x38
   24114:	18fb      	adds	r3, r7, r3
   24116:	785b      	ldrb	r3, [r3, #1]
   24118:	2280      	movs	r2, #128	; 0x80
   2411a:	4252      	negs	r2, r2
   2411c:	4313      	orrs	r3, r2
   2411e:	b2da      	uxtb	r2, r3
   24120:	2338      	movs	r3, #56	; 0x38
   24122:	18fb      	adds	r3, r7, r3
   24124:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   24126:	68bb      	ldr	r3, [r7, #8]
   24128:	b2da      	uxtb	r2, r3
   2412a:	2338      	movs	r3, #56	; 0x38
   2412c:	18fb      	adds	r3, r7, r3
   2412e:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   24130:	687b      	ldr	r3, [r7, #4]
   24132:	78da      	ldrb	r2, [r3, #3]
   24134:	2338      	movs	r3, #56	; 0x38
   24136:	18fb      	adds	r3, r7, r3
   24138:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   2413a:	687b      	ldr	r3, [r7, #4]
   2413c:	789a      	ldrb	r2, [r3, #2]
   2413e:	2338      	movs	r3, #56	; 0x38
   24140:	18fb      	adds	r3, r7, r3
   24142:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   24144:	687b      	ldr	r3, [r7, #4]
   24146:	785a      	ldrb	r2, [r3, #1]
   24148:	2338      	movs	r3, #56	; 0x38
   2414a:	18fb      	adds	r3, r7, r3
   2414c:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   2414e:	687b      	ldr	r3, [r7, #4]
   24150:	781a      	ldrb	r2, [r3, #0]
   24152:	2338      	movs	r3, #56	; 0x38
   24154:	18fb      	adds	r3, r7, r3
   24156:	719a      	strb	r2, [r3, #6]
		len = 8;
   24158:	2308      	movs	r3, #8
   2415a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2415c:	e02a      	b.n	241b4 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   2415e:	68bb      	ldr	r3, [r7, #8]
   24160:	0c1b      	lsrs	r3, r3, #16
   24162:	b2da      	uxtb	r2, r3
   24164:	2338      	movs	r3, #56	; 0x38
   24166:	18fb      	adds	r3, r7, r3
   24168:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2416a:	68bb      	ldr	r3, [r7, #8]
   2416c:	0a1b      	lsrs	r3, r3, #8
   2416e:	b2da      	uxtb	r2, r3
   24170:	2338      	movs	r3, #56	; 0x38
   24172:	18fb      	adds	r3, r7, r3
   24174:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   24176:	68bb      	ldr	r3, [r7, #8]
   24178:	b2da      	uxtb	r2, r3
   2417a:	2338      	movs	r3, #56	; 0x38
   2417c:	18fb      	adds	r3, r7, r3
   2417e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   24180:	687b      	ldr	r3, [r7, #4]
   24182:	78da      	ldrb	r2, [r3, #3]
   24184:	2338      	movs	r3, #56	; 0x38
   24186:	18fb      	adds	r3, r7, r3
   24188:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2418a:	687b      	ldr	r3, [r7, #4]
   2418c:	789a      	ldrb	r2, [r3, #2]
   2418e:	2338      	movs	r3, #56	; 0x38
   24190:	18fb      	adds	r3, r7, r3
   24192:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   24194:	687b      	ldr	r3, [r7, #4]
   24196:	785a      	ldrb	r2, [r3, #1]
   24198:	2338      	movs	r3, #56	; 0x38
   2419a:	18fb      	adds	r3, r7, r3
   2419c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   2419e:	687b      	ldr	r3, [r7, #4]
   241a0:	781a      	ldrb	r2, [r3, #0]
   241a2:	2338      	movs	r3, #56	; 0x38
   241a4:	18fb      	adds	r3, r7, r3
   241a6:	71da      	strb	r2, [r3, #7]
		len = 9;
   241a8:	2309      	movs	r3, #9
   241aa:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   241ac:	e002      	b.n	241b4 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   241ae:	2300      	movs	r3, #0
   241b0:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   241b2:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   241b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   241b6:	2b01      	cmp	r3, #1
   241b8:	d001      	beq.n	241be <spi_cmd_complete+0x24e>
		return result;
   241ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   241bc:	e33a      	b.n	24834 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   241be:	4b4d      	ldr	r3, [pc, #308]	; (242f4 <spi_cmd_complete+0x384>)
   241c0:	781b      	ldrb	r3, [r3, #0]
   241c2:	2b00      	cmp	r3, #0
   241c4:	d111      	bne.n	241ea <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   241c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   241c8:	1e5c      	subs	r4, r3, #1
   241ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   241cc:	3b01      	subs	r3, #1
   241ce:	001a      	movs	r2, r3
   241d0:	2338      	movs	r3, #56	; 0x38
   241d2:	18fb      	adds	r3, r7, r3
   241d4:	0019      	movs	r1, r3
   241d6:	207f      	movs	r0, #127	; 0x7f
   241d8:	4b47      	ldr	r3, [pc, #284]	; (242f8 <spi_cmd_complete+0x388>)
   241da:	4798      	blx	r3
   241dc:	0003      	movs	r3, r0
   241de:	18db      	adds	r3, r3, r3
   241e0:	b2da      	uxtb	r2, r3
   241e2:	2338      	movs	r3, #56	; 0x38
   241e4:	18fb      	adds	r3, r7, r3
   241e6:	551a      	strb	r2, [r3, r4]
   241e8:	e002      	b.n	241f0 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   241ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   241ec:	3b01      	subs	r3, #1
   241ee:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   241f0:	230f      	movs	r3, #15
   241f2:	18fb      	adds	r3, r7, r3
   241f4:	781b      	ldrb	r3, [r3, #0]
   241f6:	2bcf      	cmp	r3, #207	; 0xcf
   241f8:	d009      	beq.n	2420e <spi_cmd_complete+0x29e>
   241fa:	230f      	movs	r3, #15
   241fc:	18fb      	adds	r3, r7, r3
   241fe:	781b      	ldrb	r3, [r3, #0]
   24200:	2bc5      	cmp	r3, #197	; 0xc5
   24202:	d004      	beq.n	2420e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   24204:	230f      	movs	r3, #15
   24206:	18fb      	adds	r3, r7, r3
   24208:	781b      	ldrb	r3, [r3, #0]
   2420a:	2bc6      	cmp	r3, #198	; 0xc6
   2420c:	d103      	bne.n	24216 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2420e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24210:	3306      	adds	r3, #6
   24212:	673b      	str	r3, [r7, #112]	; 0x70
   24214:	e018      	b.n	24248 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24216:	230f      	movs	r3, #15
   24218:	18fb      	adds	r3, r7, r3
   2421a:	781b      	ldrb	r3, [r3, #0]
   2421c:	2bc4      	cmp	r3, #196	; 0xc4
   2421e:	d004      	beq.n	2422a <spi_cmd_complete+0x2ba>
   24220:	230f      	movs	r3, #15
   24222:	18fb      	adds	r3, r7, r3
   24224:	781b      	ldrb	r3, [r3, #0]
   24226:	2bca      	cmp	r3, #202	; 0xca
   24228:	d10b      	bne.n	24242 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   2422a:	4b32      	ldr	r3, [pc, #200]	; (242f4 <spi_cmd_complete+0x384>)
   2422c:	781b      	ldrb	r3, [r3, #0]
   2422e:	2b00      	cmp	r3, #0
   24230:	d103      	bne.n	2423a <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   24232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24234:	330c      	adds	r3, #12
   24236:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   24238:	e006      	b.n	24248 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   2423a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2423c:	330a      	adds	r3, #10
   2423e:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   24240:	e002      	b.n	24248 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   24242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24244:	3305      	adds	r3, #5
   24246:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   24248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2424a:	2b20      	cmp	r3, #32
   2424c:	d914      	bls.n	24278 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   2424e:	23f7      	movs	r3, #247	; 0xf7
   24250:	005a      	lsls	r2, r3, #1
   24252:	492a      	ldr	r1, [pc, #168]	; (242fc <spi_cmd_complete+0x38c>)
   24254:	4b2a      	ldr	r3, [pc, #168]	; (24300 <spi_cmd_complete+0x390>)
   24256:	0018      	movs	r0, r3
   24258:	4b2a      	ldr	r3, [pc, #168]	; (24304 <spi_cmd_complete+0x394>)
   2425a:	4798      	blx	r3
   2425c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2425e:	4b2a      	ldr	r3, [pc, #168]	; (24308 <spi_cmd_complete+0x398>)
   24260:	2220      	movs	r2, #32
   24262:	0018      	movs	r0, r3
   24264:	4b27      	ldr	r3, [pc, #156]	; (24304 <spi_cmd_complete+0x394>)
   24266:	4798      	blx	r3
   24268:	4b28      	ldr	r3, [pc, #160]	; (2430c <spi_cmd_complete+0x39c>)
   2426a:	0018      	movs	r0, r3
   2426c:	4b25      	ldr	r3, [pc, #148]	; (24304 <spi_cmd_complete+0x394>)
   2426e:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   24270:	2300      	movs	r3, #0
   24272:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24276:	e2dd      	b.n	24834 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   24278:	2377      	movs	r3, #119	; 0x77
   2427a:	18fb      	adds	r3, r7, r3
   2427c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2427e:	701a      	strb	r2, [r3, #0]
   24280:	e00d      	b.n	2429e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   24282:	2377      	movs	r3, #119	; 0x77
   24284:	18fb      	adds	r3, r7, r3
   24286:	781b      	ldrb	r3, [r3, #0]
   24288:	2238      	movs	r2, #56	; 0x38
   2428a:	18ba      	adds	r2, r7, r2
   2428c:	2100      	movs	r1, #0
   2428e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   24290:	2377      	movs	r3, #119	; 0x77
   24292:	18fb      	adds	r3, r7, r3
   24294:	781a      	ldrb	r2, [r3, #0]
   24296:	2377      	movs	r3, #119	; 0x77
   24298:	18fb      	adds	r3, r7, r3
   2429a:	3201      	adds	r2, #1
   2429c:	701a      	strb	r2, [r3, #0]
   2429e:	2377      	movs	r3, #119	; 0x77
   242a0:	18fb      	adds	r3, r7, r3
   242a2:	781a      	ldrb	r2, [r3, #0]
   242a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   242a6:	429a      	cmp	r2, r3
   242a8:	d3eb      	bcc.n	24282 <spi_cmd_complete+0x312>
	}
	rix = len;
   242aa:	2376      	movs	r3, #118	; 0x76
   242ac:	18fb      	adds	r3, r7, r3
   242ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   242b0:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   242b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   242b4:	b29a      	uxth	r2, r3
   242b6:	2318      	movs	r3, #24
   242b8:	18f9      	adds	r1, r7, r3
   242ba:	2338      	movs	r3, #56	; 0x38
   242bc:	18fb      	adds	r3, r7, r3
   242be:	0018      	movs	r0, r3
   242c0:	4b13      	ldr	r3, [pc, #76]	; (24310 <spi_cmd_complete+0x3a0>)
   242c2:	4798      	blx	r3
   242c4:	1e03      	subs	r3, r0, #0
   242c6:	d027      	beq.n	24318 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   242c8:	23fa      	movs	r3, #250	; 0xfa
   242ca:	33ff      	adds	r3, #255	; 0xff
   242cc:	001a      	movs	r2, r3
   242ce:	490b      	ldr	r1, [pc, #44]	; (242fc <spi_cmd_complete+0x38c>)
   242d0:	4b0b      	ldr	r3, [pc, #44]	; (24300 <spi_cmd_complete+0x390>)
   242d2:	0018      	movs	r0, r3
   242d4:	4b0b      	ldr	r3, [pc, #44]	; (24304 <spi_cmd_complete+0x394>)
   242d6:	4798      	blx	r3
   242d8:	4b0e      	ldr	r3, [pc, #56]	; (24314 <spi_cmd_complete+0x3a4>)
   242da:	0018      	movs	r0, r3
   242dc:	4b09      	ldr	r3, [pc, #36]	; (24304 <spi_cmd_complete+0x394>)
   242de:	4798      	blx	r3
   242e0:	4b0a      	ldr	r3, [pc, #40]	; (2430c <spi_cmd_complete+0x39c>)
   242e2:	0018      	movs	r0, r3
   242e4:	4b07      	ldr	r3, [pc, #28]	; (24304 <spi_cmd_complete+0x394>)
   242e6:	4798      	blx	r3
		result = N_FAIL;
   242e8:	2300      	movs	r3, #0
   242ea:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   242ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   242ee:	e2a1      	b.n	24834 <spi_cmd_complete+0x8c4>
   242f0:	00039b74 	.word	0x00039b74
   242f4:	200042b0 	.word	0x200042b0
   242f8:	000239a5 	.word	0x000239a5
   242fc:	00039bd4 	.word	0x00039bd4
   24300:	000395c0 	.word	0x000395c0
   24304:	0001e3f9 	.word	0x0001e3f9
   24308:	00039688 	.word	0x00039688
   2430c:	00039600 	.word	0x00039600
   24310:	00023931 	.word	0x00023931
   24314:	000395d4 	.word	0x000395d4
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   24318:	230f      	movs	r3, #15
   2431a:	18fb      	adds	r3, r7, r3
   2431c:	781b      	ldrb	r3, [r3, #0]
   2431e:	2bcf      	cmp	r3, #207	; 0xcf
   24320:	d009      	beq.n	24336 <spi_cmd_complete+0x3c6>
   24322:	230f      	movs	r3, #15
   24324:	18fb      	adds	r3, r7, r3
   24326:	781b      	ldrb	r3, [r3, #0]
   24328:	2bc5      	cmp	r3, #197	; 0xc5
   2432a:	d004      	beq.n	24336 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   2432c:	230f      	movs	r3, #15
   2432e:	18fb      	adds	r3, r7, r3
   24330:	781b      	ldrb	r3, [r3, #0]
   24332:	2bc6      	cmp	r3, #198	; 0xc6
   24334:	d106      	bne.n	24344 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   24336:	2376      	movs	r3, #118	; 0x76
   24338:	18fb      	adds	r3, r7, r3
   2433a:	781a      	ldrb	r2, [r3, #0]
   2433c:	2376      	movs	r3, #118	; 0x76
   2433e:	18fb      	adds	r3, r7, r3
   24340:	3201      	adds	r2, #1
   24342:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   24344:	2376      	movs	r3, #118	; 0x76
   24346:	18fb      	adds	r3, r7, r3
   24348:	781b      	ldrb	r3, [r3, #0]
   2434a:	2276      	movs	r2, #118	; 0x76
   2434c:	18ba      	adds	r2, r7, r2
   2434e:	1c59      	adds	r1, r3, #1
   24350:	7011      	strb	r1, [r2, #0]
   24352:	001a      	movs	r2, r3
   24354:	2318      	movs	r3, #24
   24356:	18fb      	adds	r3, r7, r3
   24358:	5c9a      	ldrb	r2, [r3, r2]
   2435a:	2317      	movs	r3, #23
   2435c:	18fb      	adds	r3, r7, r3
   2435e:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   24360:	2317      	movs	r3, #23
   24362:	18fb      	adds	r3, r7, r3
   24364:	781b      	ldrb	r3, [r3, #0]
   24366:	220f      	movs	r2, #15
   24368:	18ba      	adds	r2, r7, r2
   2436a:	7812      	ldrb	r2, [r2, #0]
   2436c:	429a      	cmp	r2, r3
   2436e:	d018      	beq.n	243a2 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   24370:	4add      	ldr	r2, [pc, #884]	; (246e8 <spi_cmd_complete+0x778>)
   24372:	49de      	ldr	r1, [pc, #888]	; (246ec <spi_cmd_complete+0x77c>)
   24374:	4bde      	ldr	r3, [pc, #888]	; (246f0 <spi_cmd_complete+0x780>)
   24376:	0018      	movs	r0, r3
   24378:	4bde      	ldr	r3, [pc, #888]	; (246f4 <spi_cmd_complete+0x784>)
   2437a:	4798      	blx	r3
   2437c:	230f      	movs	r3, #15
   2437e:	18fb      	adds	r3, r7, r3
   24380:	7819      	ldrb	r1, [r3, #0]
   24382:	2317      	movs	r3, #23
   24384:	18fb      	adds	r3, r7, r3
   24386:	781b      	ldrb	r3, [r3, #0]
   24388:	001a      	movs	r2, r3
   2438a:	4bdb      	ldr	r3, [pc, #876]	; (246f8 <spi_cmd_complete+0x788>)
   2438c:	0018      	movs	r0, r3
   2438e:	4bd9      	ldr	r3, [pc, #868]	; (246f4 <spi_cmd_complete+0x784>)
   24390:	4798      	blx	r3
   24392:	4bda      	ldr	r3, [pc, #872]	; (246fc <spi_cmd_complete+0x78c>)
   24394:	0018      	movs	r0, r3
   24396:	4bd7      	ldr	r3, [pc, #860]	; (246f4 <spi_cmd_complete+0x784>)
   24398:	4798      	blx	r3
		result = N_FAIL;
   2439a:	2300      	movs	r3, #0
   2439c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2439e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   243a0:	e248      	b.n	24834 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   243a2:	2376      	movs	r3, #118	; 0x76
   243a4:	18fb      	adds	r3, r7, r3
   243a6:	781b      	ldrb	r3, [r3, #0]
   243a8:	2276      	movs	r2, #118	; 0x76
   243aa:	18ba      	adds	r2, r7, r2
   243ac:	1c59      	adds	r1, r3, #1
   243ae:	7011      	strb	r1, [r2, #0]
   243b0:	001a      	movs	r2, r3
   243b2:	2318      	movs	r3, #24
   243b4:	18fb      	adds	r3, r7, r3
   243b6:	5c9a      	ldrb	r2, [r3, r2]
   243b8:	2317      	movs	r3, #23
   243ba:	18fb      	adds	r3, r7, r3
   243bc:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   243be:	2317      	movs	r3, #23
   243c0:	18fb      	adds	r3, r7, r3
   243c2:	781b      	ldrb	r3, [r3, #0]
   243c4:	2b00      	cmp	r3, #0
   243c6:	d016      	beq.n	243f6 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   243c8:	4acd      	ldr	r2, [pc, #820]	; (24700 <spi_cmd_complete+0x790>)
   243ca:	49c8      	ldr	r1, [pc, #800]	; (246ec <spi_cmd_complete+0x77c>)
   243cc:	4bc8      	ldr	r3, [pc, #800]	; (246f0 <spi_cmd_complete+0x780>)
   243ce:	0018      	movs	r0, r3
   243d0:	4bc8      	ldr	r3, [pc, #800]	; (246f4 <spi_cmd_complete+0x784>)
   243d2:	4798      	blx	r3
   243d4:	2317      	movs	r3, #23
   243d6:	18fb      	adds	r3, r7, r3
   243d8:	781b      	ldrb	r3, [r3, #0]
   243da:	001a      	movs	r2, r3
   243dc:	4bc9      	ldr	r3, [pc, #804]	; (24704 <spi_cmd_complete+0x794>)
   243de:	0011      	movs	r1, r2
   243e0:	0018      	movs	r0, r3
   243e2:	4bc4      	ldr	r3, [pc, #784]	; (246f4 <spi_cmd_complete+0x784>)
   243e4:	4798      	blx	r3
   243e6:	4bc5      	ldr	r3, [pc, #788]	; (246fc <spi_cmd_complete+0x78c>)
   243e8:	0018      	movs	r0, r3
   243ea:	4bc2      	ldr	r3, [pc, #776]	; (246f4 <spi_cmd_complete+0x784>)
   243ec:	4798      	blx	r3
		result = N_FAIL;
   243ee:	2300      	movs	r3, #0
   243f0:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   243f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   243f4:	e21e      	b.n	24834 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   243f6:	230f      	movs	r3, #15
   243f8:	18fb      	adds	r3, r7, r3
   243fa:	781b      	ldrb	r3, [r3, #0]
   243fc:	2bc4      	cmp	r3, #196	; 0xc4
   243fe:	d00f      	beq.n	24420 <spi_cmd_complete+0x4b0>
   24400:	230f      	movs	r3, #15
   24402:	18fb      	adds	r3, r7, r3
   24404:	781b      	ldrb	r3, [r3, #0]
   24406:	2bca      	cmp	r3, #202	; 0xca
   24408:	d00a      	beq.n	24420 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   2440a:	230f      	movs	r3, #15
   2440c:	18fb      	adds	r3, r7, r3
   2440e:	781b      	ldrb	r3, [r3, #0]
   24410:	2bc2      	cmp	r3, #194	; 0xc2
   24412:	d005      	beq.n	24420 <spi_cmd_complete+0x4b0>
   24414:	230f      	movs	r3, #15
   24416:	18fb      	adds	r3, r7, r3
   24418:	781b      	ldrb	r3, [r3, #0]
   2441a:	2bc8      	cmp	r3, #200	; 0xc8
   2441c:	d000      	beq.n	24420 <spi_cmd_complete+0x4b0>
   2441e:	e208      	b.n	24832 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   24420:	230a      	movs	r3, #10
   24422:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   24424:	2376      	movs	r3, #118	; 0x76
   24426:	18fb      	adds	r3, r7, r3
   24428:	781a      	ldrb	r2, [r3, #0]
   2442a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2442c:	429a      	cmp	r2, r3
   2442e:	d218      	bcs.n	24462 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   24430:	2376      	movs	r3, #118	; 0x76
   24432:	18fb      	adds	r3, r7, r3
   24434:	781b      	ldrb	r3, [r3, #0]
   24436:	2276      	movs	r2, #118	; 0x76
   24438:	18ba      	adds	r2, r7, r2
   2443a:	1c59      	adds	r1, r3, #1
   2443c:	7011      	strb	r1, [r2, #0]
   2443e:	001a      	movs	r2, r3
   24440:	2318      	movs	r3, #24
   24442:	18fb      	adds	r3, r7, r3
   24444:	5c9a      	ldrb	r2, [r3, r2]
   24446:	2317      	movs	r3, #23
   24448:	18fb      	adds	r3, r7, r3
   2444a:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   2444c:	2317      	movs	r3, #23
   2444e:	18fb      	adds	r3, r7, r3
   24450:	781b      	ldrb	r3, [r3, #0]
   24452:	091b      	lsrs	r3, r3, #4
   24454:	b2db      	uxtb	r3, r3
   24456:	001a      	movs	r2, r3
   24458:	230f      	movs	r3, #15
   2445a:	4013      	ands	r3, r2
   2445c:	2b0f      	cmp	r3, #15
   2445e:	d103      	bne.n	24468 <spi_cmd_complete+0x4f8>
					break;
   24460:	e007      	b.n	24472 <spi_cmd_complete+0x502>
					retry = 0;
   24462:	2300      	movs	r3, #0
   24464:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   24466:	e004      	b.n	24472 <spi_cmd_complete+0x502>
			} while (retry--);
   24468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2446a:	1e5a      	subs	r2, r3, #1
   2446c:	667a      	str	r2, [r7, #100]	; 0x64
   2446e:	2b00      	cmp	r3, #0
   24470:	d1d8      	bne.n	24424 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   24472:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24474:	2b00      	cmp	r3, #0
   24476:	dc18      	bgt.n	244aa <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   24478:	2395      	movs	r3, #149	; 0x95
   2447a:	009a      	lsls	r2, r3, #2
   2447c:	499b      	ldr	r1, [pc, #620]	; (246ec <spi_cmd_complete+0x77c>)
   2447e:	4b9c      	ldr	r3, [pc, #624]	; (246f0 <spi_cmd_complete+0x780>)
   24480:	0018      	movs	r0, r3
   24482:	4b9c      	ldr	r3, [pc, #624]	; (246f4 <spi_cmd_complete+0x784>)
   24484:	4798      	blx	r3
   24486:	2317      	movs	r3, #23
   24488:	18fb      	adds	r3, r7, r3
   2448a:	781b      	ldrb	r3, [r3, #0]
   2448c:	001a      	movs	r2, r3
   2448e:	4b9e      	ldr	r3, [pc, #632]	; (24708 <spi_cmd_complete+0x798>)
   24490:	0011      	movs	r1, r2
   24492:	0018      	movs	r0, r3
   24494:	4b97      	ldr	r3, [pc, #604]	; (246f4 <spi_cmd_complete+0x784>)
   24496:	4798      	blx	r3
   24498:	4b98      	ldr	r3, [pc, #608]	; (246fc <spi_cmd_complete+0x78c>)
   2449a:	0018      	movs	r0, r3
   2449c:	4b95      	ldr	r3, [pc, #596]	; (246f4 <spi_cmd_complete+0x784>)
   2449e:	4798      	blx	r3
				result = N_RESET;
   244a0:	2301      	movs	r3, #1
   244a2:	425b      	negs	r3, r3
   244a4:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   244a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   244a8:	e1c4      	b.n	24834 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   244aa:	230f      	movs	r3, #15
   244ac:	18fb      	adds	r3, r7, r3
   244ae:	781b      	ldrb	r3, [r3, #0]
   244b0:	2bc4      	cmp	r3, #196	; 0xc4
   244b2:	d005      	beq.n	244c0 <spi_cmd_complete+0x550>
   244b4:	230f      	movs	r3, #15
   244b6:	18fb      	adds	r3, r7, r3
   244b8:	781b      	ldrb	r3, [r3, #0]
   244ba:	2bca      	cmp	r3, #202	; 0xca
   244bc:	d000      	beq.n	244c0 <spi_cmd_complete+0x550>
   244be:	e08e      	b.n	245de <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   244c0:	2376      	movs	r3, #118	; 0x76
   244c2:	18fb      	adds	r3, r7, r3
   244c4:	781b      	ldrb	r3, [r3, #0]
   244c6:	3303      	adds	r3, #3
   244c8:	001a      	movs	r2, r3
   244ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   244cc:	429a      	cmp	r2, r3
   244ce:	d23c      	bcs.n	2454a <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   244d0:	2376      	movs	r3, #118	; 0x76
   244d2:	18fb      	adds	r3, r7, r3
   244d4:	781b      	ldrb	r3, [r3, #0]
   244d6:	2276      	movs	r2, #118	; 0x76
   244d8:	18ba      	adds	r2, r7, r2
   244da:	1c59      	adds	r1, r3, #1
   244dc:	7011      	strb	r1, [r2, #0]
   244de:	001a      	movs	r2, r3
   244e0:	2318      	movs	r3, #24
   244e2:	18fb      	adds	r3, r7, r3
   244e4:	5c9a      	ldrb	r2, [r3, r2]
   244e6:	687b      	ldr	r3, [r7, #4]
   244e8:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   244ea:	687b      	ldr	r3, [r7, #4]
   244ec:	1c5a      	adds	r2, r3, #1
   244ee:	2376      	movs	r3, #118	; 0x76
   244f0:	18fb      	adds	r3, r7, r3
   244f2:	781b      	ldrb	r3, [r3, #0]
   244f4:	2176      	movs	r1, #118	; 0x76
   244f6:	1879      	adds	r1, r7, r1
   244f8:	1c58      	adds	r0, r3, #1
   244fa:	7008      	strb	r0, [r1, #0]
   244fc:	0019      	movs	r1, r3
   244fe:	2318      	movs	r3, #24
   24500:	18fb      	adds	r3, r7, r3
   24502:	5c5b      	ldrb	r3, [r3, r1]
   24504:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   24506:	687b      	ldr	r3, [r7, #4]
   24508:	1c9a      	adds	r2, r3, #2
   2450a:	2376      	movs	r3, #118	; 0x76
   2450c:	18fb      	adds	r3, r7, r3
   2450e:	781b      	ldrb	r3, [r3, #0]
   24510:	2176      	movs	r1, #118	; 0x76
   24512:	1879      	adds	r1, r7, r1
   24514:	1c58      	adds	r0, r3, #1
   24516:	7008      	strb	r0, [r1, #0]
   24518:	0019      	movs	r1, r3
   2451a:	2318      	movs	r3, #24
   2451c:	18fb      	adds	r3, r7, r3
   2451e:	5c5b      	ldrb	r3, [r3, r1]
   24520:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   24522:	687b      	ldr	r3, [r7, #4]
   24524:	1cda      	adds	r2, r3, #3
   24526:	2376      	movs	r3, #118	; 0x76
   24528:	18fb      	adds	r3, r7, r3
   2452a:	781b      	ldrb	r3, [r3, #0]
   2452c:	2176      	movs	r1, #118	; 0x76
   2452e:	1879      	adds	r1, r7, r1
   24530:	1c58      	adds	r0, r3, #1
   24532:	7008      	strb	r0, [r1, #0]
   24534:	0019      	movs	r1, r3
   24536:	2318      	movs	r3, #24
   24538:	18fb      	adds	r3, r7, r3
   2453a:	5c5b      	ldrb	r3, [r3, r1]
   2453c:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   2453e:	4b73      	ldr	r3, [pc, #460]	; (2470c <spi_cmd_complete+0x79c>)
   24540:	781b      	ldrb	r3, [r3, #0]
   24542:	2b00      	cmp	r3, #0
   24544:	d000      	beq.n	24548 <spi_cmd_complete+0x5d8>
   24546:	e174      	b.n	24832 <spi_cmd_complete+0x8c2>
   24548:	e011      	b.n	2456e <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   2454a:	4a71      	ldr	r2, [pc, #452]	; (24710 <spi_cmd_complete+0x7a0>)
   2454c:	4967      	ldr	r1, [pc, #412]	; (246ec <spi_cmd_complete+0x77c>)
   2454e:	4b68      	ldr	r3, [pc, #416]	; (246f0 <spi_cmd_complete+0x780>)
   24550:	0018      	movs	r0, r3
   24552:	4b68      	ldr	r3, [pc, #416]	; (246f4 <spi_cmd_complete+0x784>)
   24554:	4798      	blx	r3
   24556:	4b6f      	ldr	r3, [pc, #444]	; (24714 <spi_cmd_complete+0x7a4>)
   24558:	0018      	movs	r0, r3
   2455a:	4b66      	ldr	r3, [pc, #408]	; (246f4 <spi_cmd_complete+0x784>)
   2455c:	4798      	blx	r3
   2455e:	4b67      	ldr	r3, [pc, #412]	; (246fc <spi_cmd_complete+0x78c>)
   24560:	0018      	movs	r0, r3
   24562:	4b64      	ldr	r3, [pc, #400]	; (246f4 <spi_cmd_complete+0x784>)
   24564:	4798      	blx	r3
					result = N_FAIL;
   24566:	2300      	movs	r3, #0
   24568:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   2456a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2456c:	e162      	b.n	24834 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   2456e:	2376      	movs	r3, #118	; 0x76
   24570:	18fb      	adds	r3, r7, r3
   24572:	781b      	ldrb	r3, [r3, #0]
   24574:	3301      	adds	r3, #1
   24576:	001a      	movs	r2, r3
   24578:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2457a:	429a      	cmp	r2, r3
   2457c:	d21c      	bcs.n	245b8 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   2457e:	2376      	movs	r3, #118	; 0x76
   24580:	18fb      	adds	r3, r7, r3
   24582:	781b      	ldrb	r3, [r3, #0]
   24584:	2276      	movs	r2, #118	; 0x76
   24586:	18ba      	adds	r2, r7, r2
   24588:	1c59      	adds	r1, r3, #1
   2458a:	7011      	strb	r1, [r2, #0]
   2458c:	001a      	movs	r2, r3
   2458e:	2318      	movs	r3, #24
   24590:	18fb      	adds	r3, r7, r3
   24592:	5c9a      	ldrb	r2, [r3, r2]
   24594:	2314      	movs	r3, #20
   24596:	18fb      	adds	r3, r7, r3
   24598:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   2459a:	2376      	movs	r3, #118	; 0x76
   2459c:	18fb      	adds	r3, r7, r3
   2459e:	781b      	ldrb	r3, [r3, #0]
   245a0:	2276      	movs	r2, #118	; 0x76
   245a2:	18ba      	adds	r2, r7, r2
   245a4:	1c59      	adds	r1, r3, #1
   245a6:	7011      	strb	r1, [r2, #0]
   245a8:	001a      	movs	r2, r3
   245aa:	2318      	movs	r3, #24
   245ac:	18fb      	adds	r3, r7, r3
   245ae:	5c9a      	ldrb	r2, [r3, r2]
   245b0:	2314      	movs	r3, #20
   245b2:	18fb      	adds	r3, r7, r3
   245b4:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   245b6:	e13c      	b.n	24832 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   245b8:	239c      	movs	r3, #156	; 0x9c
   245ba:	009a      	lsls	r2, r3, #2
   245bc:	494b      	ldr	r1, [pc, #300]	; (246ec <spi_cmd_complete+0x77c>)
   245be:	4b4c      	ldr	r3, [pc, #304]	; (246f0 <spi_cmd_complete+0x780>)
   245c0:	0018      	movs	r0, r3
   245c2:	4b4c      	ldr	r3, [pc, #304]	; (246f4 <spi_cmd_complete+0x784>)
   245c4:	4798      	blx	r3
   245c6:	4b54      	ldr	r3, [pc, #336]	; (24718 <spi_cmd_complete+0x7a8>)
   245c8:	0018      	movs	r0, r3
   245ca:	4b4a      	ldr	r3, [pc, #296]	; (246f4 <spi_cmd_complete+0x784>)
   245cc:	4798      	blx	r3
   245ce:	4b4b      	ldr	r3, [pc, #300]	; (246fc <spi_cmd_complete+0x78c>)
   245d0:	0018      	movs	r0, r3
   245d2:	4b48      	ldr	r3, [pc, #288]	; (246f4 <spi_cmd_complete+0x784>)
   245d4:	4798      	blx	r3
						result = N_FAIL;
   245d6:	2300      	movs	r3, #0
   245d8:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   245da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   245dc:	e12a      	b.n	24834 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   245de:	230f      	movs	r3, #15
   245e0:	18fb      	adds	r3, r7, r3
   245e2:	781b      	ldrb	r3, [r3, #0]
   245e4:	2bc2      	cmp	r3, #194	; 0xc2
   245e6:	d005      	beq.n	245f4 <spi_cmd_complete+0x684>
   245e8:	230f      	movs	r3, #15
   245ea:	18fb      	adds	r3, r7, r3
   245ec:	781b      	ldrb	r3, [r3, #0]
   245ee:	2bc8      	cmp	r3, #200	; 0xc8
   245f0:	d000      	beq.n	245f4 <spi_cmd_complete+0x684>
   245f2:	e11e      	b.n	24832 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   245f4:	2300      	movs	r3, #0
   245f6:	663b      	str	r3, [r7, #96]	; 0x60
   245f8:	e011      	b.n	2461e <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   245fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   245fc:	1c5a      	adds	r2, r3, #1
   245fe:	663a      	str	r2, [r7, #96]	; 0x60
   24600:	001a      	movs	r2, r3
   24602:	687b      	ldr	r3, [r7, #4]
   24604:	189a      	adds	r2, r3, r2
   24606:	2376      	movs	r3, #118	; 0x76
   24608:	18fb      	adds	r3, r7, r3
   2460a:	781b      	ldrb	r3, [r3, #0]
   2460c:	2176      	movs	r1, #118	; 0x76
   2460e:	1879      	adds	r1, r7, r1
   24610:	1c58      	adds	r0, r3, #1
   24612:	7008      	strb	r0, [r1, #0]
   24614:	0019      	movs	r1, r3
   24616:	2318      	movs	r3, #24
   24618:	18fb      	adds	r3, r7, r3
   2461a:	5c5b      	ldrb	r3, [r3, r1]
   2461c:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   2461e:	2376      	movs	r3, #118	; 0x76
   24620:	18fb      	adds	r3, r7, r3
   24622:	781a      	ldrb	r2, [r3, #0]
   24624:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24626:	429a      	cmp	r2, r3
   24628:	d203      	bcs.n	24632 <spi_cmd_complete+0x6c2>
   2462a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2462c:	683b      	ldr	r3, [r7, #0]
   2462e:	429a      	cmp	r2, r3
   24630:	d3e3      	bcc.n	245fa <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   24632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24634:	683a      	ldr	r2, [r7, #0]
   24636:	1ad3      	subs	r3, r2, r3
   24638:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   2463a:	683b      	ldr	r3, [r7, #0]
   2463c:	2b00      	cmp	r3, #0
   2463e:	d100      	bne.n	24642 <spi_cmd_complete+0x6d2>
   24640:	e0f1      	b.n	24826 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   24642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24644:	2280      	movs	r2, #128	; 0x80
   24646:	0192      	lsls	r2, r2, #6
   24648:	1ad3      	subs	r3, r2, r3
   2464a:	001a      	movs	r2, r3
   2464c:	683b      	ldr	r3, [r7, #0]
   2464e:	429a      	cmp	r2, r3
   24650:	d302      	bcc.n	24658 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   24652:	683b      	ldr	r3, [r7, #0]
   24654:	65fb      	str	r3, [r7, #92]	; 0x5c
   24656:	e004      	b.n	24662 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   24658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2465a:	2280      	movs	r2, #128	; 0x80
   2465c:	0192      	lsls	r2, r2, #6
   2465e:	1ad3      	subs	r3, r2, r3
   24660:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24664:	687a      	ldr	r2, [r7, #4]
   24666:	18d3      	adds	r3, r2, r3
   24668:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   2466a:	b292      	uxth	r2, r2
   2466c:	0011      	movs	r1, r2
   2466e:	0018      	movs	r0, r3
   24670:	4b2a      	ldr	r3, [pc, #168]	; (2471c <spi_cmd_complete+0x7ac>)
   24672:	4798      	blx	r3
   24674:	1e03      	subs	r3, r0, #0
   24676:	d010      	beq.n	2469a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24678:	4a29      	ldr	r2, [pc, #164]	; (24720 <spi_cmd_complete+0x7b0>)
   2467a:	491c      	ldr	r1, [pc, #112]	; (246ec <spi_cmd_complete+0x77c>)
   2467c:	4b1c      	ldr	r3, [pc, #112]	; (246f0 <spi_cmd_complete+0x780>)
   2467e:	0018      	movs	r0, r3
   24680:	4b1c      	ldr	r3, [pc, #112]	; (246f4 <spi_cmd_complete+0x784>)
   24682:	4798      	blx	r3
   24684:	4b27      	ldr	r3, [pc, #156]	; (24724 <spi_cmd_complete+0x7b4>)
   24686:	0018      	movs	r0, r3
   24688:	4b1a      	ldr	r3, [pc, #104]	; (246f4 <spi_cmd_complete+0x784>)
   2468a:	4798      	blx	r3
   2468c:	4b1b      	ldr	r3, [pc, #108]	; (246fc <spi_cmd_complete+0x78c>)
   2468e:	0018      	movs	r0, r3
   24690:	4b18      	ldr	r3, [pc, #96]	; (246f4 <spi_cmd_complete+0x784>)
   24692:	4798      	blx	r3
						result = N_FAIL;
   24694:	2300      	movs	r3, #0
   24696:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   24698:	e0cb      	b.n	24832 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   2469a:	4b1c      	ldr	r3, [pc, #112]	; (2470c <spi_cmd_complete+0x79c>)
   2469c:	781b      	ldrb	r3, [r3, #0]
   2469e:	2b00      	cmp	r3, #0
   246a0:	d119      	bne.n	246d6 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   246a2:	2314      	movs	r3, #20
   246a4:	18fb      	adds	r3, r7, r3
   246a6:	2102      	movs	r1, #2
   246a8:	0018      	movs	r0, r3
   246aa:	4b1c      	ldr	r3, [pc, #112]	; (2471c <spi_cmd_complete+0x7ac>)
   246ac:	4798      	blx	r3
   246ae:	1e03      	subs	r3, r0, #0
   246b0:	d011      	beq.n	246d6 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   246b2:	23a6      	movs	r3, #166	; 0xa6
   246b4:	009a      	lsls	r2, r3, #2
   246b6:	490d      	ldr	r1, [pc, #52]	; (246ec <spi_cmd_complete+0x77c>)
   246b8:	4b0d      	ldr	r3, [pc, #52]	; (246f0 <spi_cmd_complete+0x780>)
   246ba:	0018      	movs	r0, r3
   246bc:	4b0d      	ldr	r3, [pc, #52]	; (246f4 <spi_cmd_complete+0x784>)
   246be:	4798      	blx	r3
   246c0:	4b19      	ldr	r3, [pc, #100]	; (24728 <spi_cmd_complete+0x7b8>)
   246c2:	0018      	movs	r0, r3
   246c4:	4b0b      	ldr	r3, [pc, #44]	; (246f4 <spi_cmd_complete+0x784>)
   246c6:	4798      	blx	r3
   246c8:	4b0c      	ldr	r3, [pc, #48]	; (246fc <spi_cmd_complete+0x78c>)
   246ca:	0018      	movs	r0, r3
   246cc:	4b09      	ldr	r3, [pc, #36]	; (246f4 <spi_cmd_complete+0x784>)
   246ce:	4798      	blx	r3
							result = N_FAIL;
   246d0:	2300      	movs	r3, #0
   246d2:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   246d4:	e0ad      	b.n	24832 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   246d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   246d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   246da:	18d3      	adds	r3, r2, r3
   246dc:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   246de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   246e0:	683a      	ldr	r2, [r7, #0]
   246e2:	1ad3      	subs	r3, r2, r3
   246e4:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   246e6:	e09e      	b.n	24826 <spi_cmd_complete+0x8b6>
   246e8:	0000022f 	.word	0x0000022f
   246ec:	00039bd4 	.word	0x00039bd4
   246f0:	000395c0 	.word	0x000395c0
   246f4:	0001e3f9 	.word	0x0001e3f9
   246f8:	000396b8 	.word	0x000396b8
   246fc:	00039600 	.word	0x00039600
   24700:	00000239 	.word	0x00000239
   24704:	000396f4 	.word	0x000396f4
   24708:	00039728 	.word	0x00039728
   2470c:	200042b0 	.word	0x200042b0
   24710:	00000263 	.word	0x00000263
   24714:	00039758 	.word	0x00039758
   24718:	00039788 	.word	0x00039788
   2471c:	000238a9 	.word	0x000238a9
   24720:	0000028e 	.word	0x0000028e
   24724:	000397b8 	.word	0x000397b8
   24728:	000397ec 	.word	0x000397ec
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   2472c:	683a      	ldr	r2, [r7, #0]
   2472e:	2380      	movs	r3, #128	; 0x80
   24730:	019b      	lsls	r3, r3, #6
   24732:	429a      	cmp	r2, r3
   24734:	d802      	bhi.n	2473c <spi_cmd_complete+0x7cc>
						nbytes = sz;
   24736:	683b      	ldr	r3, [r7, #0]
   24738:	65bb      	str	r3, [r7, #88]	; 0x58
   2473a:	e002      	b.n	24742 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   2473c:	2380      	movs	r3, #128	; 0x80
   2473e:	019b      	lsls	r3, r3, #6
   24740:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   24742:	230a      	movs	r3, #10
   24744:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   24746:	2317      	movs	r3, #23
   24748:	18fb      	adds	r3, r7, r3
   2474a:	2101      	movs	r1, #1
   2474c:	0018      	movs	r0, r3
   2474e:	4b3b      	ldr	r3, [pc, #236]	; (2483c <spi_cmd_complete+0x8cc>)
   24750:	4798      	blx	r3
   24752:	1e03      	subs	r3, r0, #0
   24754:	d011      	beq.n	2477a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   24756:	23ae      	movs	r3, #174	; 0xae
   24758:	009a      	lsls	r2, r3, #2
   2475a:	4939      	ldr	r1, [pc, #228]	; (24840 <spi_cmd_complete+0x8d0>)
   2475c:	4b39      	ldr	r3, [pc, #228]	; (24844 <spi_cmd_complete+0x8d4>)
   2475e:	0018      	movs	r0, r3
   24760:	4b39      	ldr	r3, [pc, #228]	; (24848 <spi_cmd_complete+0x8d8>)
   24762:	4798      	blx	r3
   24764:	4b39      	ldr	r3, [pc, #228]	; (2484c <spi_cmd_complete+0x8dc>)
   24766:	0018      	movs	r0, r3
   24768:	4b37      	ldr	r3, [pc, #220]	; (24848 <spi_cmd_complete+0x8d8>)
   2476a:	4798      	blx	r3
   2476c:	4b38      	ldr	r3, [pc, #224]	; (24850 <spi_cmd_complete+0x8e0>)
   2476e:	0018      	movs	r0, r3
   24770:	4b35      	ldr	r3, [pc, #212]	; (24848 <spi_cmd_complete+0x8d8>)
   24772:	4798      	blx	r3
							result = N_FAIL;
   24774:	2300      	movs	r3, #0
   24776:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24778:	e010      	b.n	2479c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   2477a:	2317      	movs	r3, #23
   2477c:	18fb      	adds	r3, r7, r3
   2477e:	781b      	ldrb	r3, [r3, #0]
   24780:	091b      	lsrs	r3, r3, #4
   24782:	b2db      	uxtb	r3, r3
   24784:	001a      	movs	r2, r3
   24786:	230f      	movs	r3, #15
   24788:	4013      	ands	r3, r2
   2478a:	2b0f      	cmp	r3, #15
   2478c:	d005      	beq.n	2479a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   2478e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24790:	1e5a      	subs	r2, r3, #1
   24792:	667a      	str	r2, [r7, #100]	; 0x64
   24794:	2b00      	cmp	r3, #0
   24796:	d1d6      	bne.n	24746 <spi_cmd_complete+0x7d6>
   24798:	e000      	b.n	2479c <spi_cmd_complete+0x82c>
							break;
   2479a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   2479c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2479e:	2b00      	cmp	r3, #0
   247a0:	d046      	beq.n	24830 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   247a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   247a4:	687a      	ldr	r2, [r7, #4]
   247a6:	18d3      	adds	r3, r2, r3
   247a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
   247aa:	b292      	uxth	r2, r2
   247ac:	0011      	movs	r1, r2
   247ae:	0018      	movs	r0, r3
   247b0:	4b22      	ldr	r3, [pc, #136]	; (2483c <spi_cmd_complete+0x8cc>)
   247b2:	4798      	blx	r3
   247b4:	1e03      	subs	r3, r0, #0
   247b6:	d011      	beq.n	247dc <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   247b8:	23b2      	movs	r3, #178	; 0xb2
   247ba:	009a      	lsls	r2, r3, #2
   247bc:	4920      	ldr	r1, [pc, #128]	; (24840 <spi_cmd_complete+0x8d0>)
   247be:	4b21      	ldr	r3, [pc, #132]	; (24844 <spi_cmd_complete+0x8d4>)
   247c0:	0018      	movs	r0, r3
   247c2:	4b21      	ldr	r3, [pc, #132]	; (24848 <spi_cmd_complete+0x8d8>)
   247c4:	4798      	blx	r3
   247c6:	4b23      	ldr	r3, [pc, #140]	; (24854 <spi_cmd_complete+0x8e4>)
   247c8:	0018      	movs	r0, r3
   247ca:	4b1f      	ldr	r3, [pc, #124]	; (24848 <spi_cmd_complete+0x8d8>)
   247cc:	4798      	blx	r3
   247ce:	4b20      	ldr	r3, [pc, #128]	; (24850 <spi_cmd_complete+0x8e0>)
   247d0:	0018      	movs	r0, r3
   247d2:	4b1d      	ldr	r3, [pc, #116]	; (24848 <spi_cmd_complete+0x8d8>)
   247d4:	4798      	blx	r3
						result = N_FAIL;
   247d6:	2300      	movs	r3, #0
   247d8:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   247da:	e02a      	b.n	24832 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   247dc:	4b1e      	ldr	r3, [pc, #120]	; (24858 <spi_cmd_complete+0x8e8>)
   247de:	781b      	ldrb	r3, [r3, #0]
   247e0:	2b00      	cmp	r3, #0
   247e2:	d118      	bne.n	24816 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   247e4:	2314      	movs	r3, #20
   247e6:	18fb      	adds	r3, r7, r3
   247e8:	2102      	movs	r1, #2
   247ea:	0018      	movs	r0, r3
   247ec:	4b13      	ldr	r3, [pc, #76]	; (2483c <spi_cmd_complete+0x8cc>)
   247ee:	4798      	blx	r3
   247f0:	1e03      	subs	r3, r0, #0
   247f2:	d010      	beq.n	24816 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   247f4:	4a19      	ldr	r2, [pc, #100]	; (2485c <spi_cmd_complete+0x8ec>)
   247f6:	4912      	ldr	r1, [pc, #72]	; (24840 <spi_cmd_complete+0x8d0>)
   247f8:	4b12      	ldr	r3, [pc, #72]	; (24844 <spi_cmd_complete+0x8d4>)
   247fa:	0018      	movs	r0, r3
   247fc:	4b12      	ldr	r3, [pc, #72]	; (24848 <spi_cmd_complete+0x8d8>)
   247fe:	4798      	blx	r3
   24800:	4b17      	ldr	r3, [pc, #92]	; (24860 <spi_cmd_complete+0x8f0>)
   24802:	0018      	movs	r0, r3
   24804:	4b10      	ldr	r3, [pc, #64]	; (24848 <spi_cmd_complete+0x8d8>)
   24806:	4798      	blx	r3
   24808:	4b11      	ldr	r3, [pc, #68]	; (24850 <spi_cmd_complete+0x8e0>)
   2480a:	0018      	movs	r0, r3
   2480c:	4b0e      	ldr	r3, [pc, #56]	; (24848 <spi_cmd_complete+0x8d8>)
   2480e:	4798      	blx	r3
							result = N_FAIL;
   24810:	2300      	movs	r3, #0
   24812:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24814:	e00d      	b.n	24832 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   24816:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2481a:	18d3      	adds	r3, r2, r3
   2481c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   2481e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24820:	683a      	ldr	r2, [r7, #0]
   24822:	1ad3      	subs	r3, r2, r3
   24824:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   24826:	683b      	ldr	r3, [r7, #0]
   24828:	2b00      	cmp	r3, #0
   2482a:	d000      	beq.n	2482e <spi_cmd_complete+0x8be>
   2482c:	e77e      	b.n	2472c <spi_cmd_complete+0x7bc>
   2482e:	e000      	b.n	24832 <spi_cmd_complete+0x8c2>
						break;
   24830:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   24832:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   24834:	0018      	movs	r0, r3
   24836:	46bd      	mov	sp, r7
   24838:	b01f      	add	sp, #124	; 0x7c
   2483a:	bd90      	pop	{r4, r7, pc}
   2483c:	000238a9 	.word	0x000238a9
   24840:	00039bd4 	.word	0x00039bd4
   24844:	000395c0 	.word	0x000395c0
   24848:	0001e3f9 	.word	0x0001e3f9
   2484c:	00039824 	.word	0x00039824
   24850:	00039600 	.word	0x00039600
   24854:	000397b8 	.word	0x000397b8
   24858:	200042b0 	.word	0x200042b0
   2485c:	000002d2 	.word	0x000002d2
   24860:	000397ec 	.word	0x000397ec

00024864 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   24864:	b580      	push	{r7, lr}
   24866:	b086      	sub	sp, #24
   24868:	af00      	add	r7, sp, #0
   2486a:	6078      	str	r0, [r7, #4]
   2486c:	000a      	movs	r2, r1
   2486e:	1cbb      	adds	r3, r7, #2
   24870:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   24872:	2313      	movs	r3, #19
   24874:	18fb      	adds	r3, r7, r3
   24876:	2201      	movs	r2, #1
   24878:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   2487a:	230c      	movs	r3, #12
   2487c:	18fb      	adds	r3, r7, r3
   2487e:	2200      	movs	r2, #0
   24880:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   24882:	2316      	movs	r3, #22
   24884:	18fb      	adds	r3, r7, r3
   24886:	2200      	movs	r2, #0
   24888:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   2488a:	1cbb      	adds	r3, r7, #2
   2488c:	881a      	ldrh	r2, [r3, #0]
   2488e:	2380      	movs	r3, #128	; 0x80
   24890:	019b      	lsls	r3, r3, #6
   24892:	429a      	cmp	r2, r3
   24894:	d805      	bhi.n	248a2 <spi_data_write+0x3e>
			nbytes = sz;
   24896:	2314      	movs	r3, #20
   24898:	18fb      	adds	r3, r7, r3
   2489a:	1cba      	adds	r2, r7, #2
   2489c:	8812      	ldrh	r2, [r2, #0]
   2489e:	801a      	strh	r2, [r3, #0]
   248a0:	e004      	b.n	248ac <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   248a2:	2314      	movs	r3, #20
   248a4:	18fb      	adds	r3, r7, r3
   248a6:	2280      	movs	r2, #128	; 0x80
   248a8:	0192      	lsls	r2, r2, #6
   248aa:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   248ac:	2311      	movs	r3, #17
   248ae:	18fb      	adds	r3, r7, r3
   248b0:	22f0      	movs	r2, #240	; 0xf0
   248b2:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   248b4:	2316      	movs	r3, #22
   248b6:	18fb      	adds	r3, r7, r3
   248b8:	2200      	movs	r2, #0
   248ba:	5e9b      	ldrsh	r3, [r3, r2]
   248bc:	2b00      	cmp	r3, #0
   248be:	d10f      	bne.n	248e0 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   248c0:	1cbb      	adds	r3, r7, #2
   248c2:	881a      	ldrh	r2, [r3, #0]
   248c4:	2380      	movs	r3, #128	; 0x80
   248c6:	019b      	lsls	r3, r3, #6
   248c8:	429a      	cmp	r2, r3
   248ca:	d804      	bhi.n	248d6 <spi_data_write+0x72>
				order = 0x3;
   248cc:	2312      	movs	r3, #18
   248ce:	18fb      	adds	r3, r7, r3
   248d0:	2203      	movs	r2, #3
   248d2:	701a      	strb	r2, [r3, #0]
   248d4:	e013      	b.n	248fe <spi_data_write+0x9a>
			else
				order = 0x1;
   248d6:	2312      	movs	r3, #18
   248d8:	18fb      	adds	r3, r7, r3
   248da:	2201      	movs	r2, #1
   248dc:	701a      	strb	r2, [r3, #0]
   248de:	e00e      	b.n	248fe <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   248e0:	1cbb      	adds	r3, r7, #2
   248e2:	881a      	ldrh	r2, [r3, #0]
   248e4:	2380      	movs	r3, #128	; 0x80
   248e6:	019b      	lsls	r3, r3, #6
   248e8:	429a      	cmp	r2, r3
   248ea:	d804      	bhi.n	248f6 <spi_data_write+0x92>
				order = 0x3;
   248ec:	2312      	movs	r3, #18
   248ee:	18fb      	adds	r3, r7, r3
   248f0:	2203      	movs	r2, #3
   248f2:	701a      	strb	r2, [r3, #0]
   248f4:	e003      	b.n	248fe <spi_data_write+0x9a>
			else
				order = 0x2;
   248f6:	2312      	movs	r3, #18
   248f8:	18fb      	adds	r3, r7, r3
   248fa:	2202      	movs	r2, #2
   248fc:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   248fe:	2311      	movs	r3, #17
   24900:	18fb      	adds	r3, r7, r3
   24902:	781a      	ldrb	r2, [r3, #0]
   24904:	2312      	movs	r3, #18
   24906:	18fb      	adds	r3, r7, r3
   24908:	781b      	ldrb	r3, [r3, #0]
   2490a:	4313      	orrs	r3, r2
   2490c:	b2da      	uxtb	r2, r3
   2490e:	2311      	movs	r3, #17
   24910:	18fb      	adds	r3, r7, r3
   24912:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   24914:	2311      	movs	r3, #17
   24916:	18fb      	adds	r3, r7, r3
   24918:	2101      	movs	r1, #1
   2491a:	0018      	movs	r0, r3
   2491c:	4b3c      	ldr	r3, [pc, #240]	; (24a10 <spi_data_write+0x1ac>)
   2491e:	4798      	blx	r3
   24920:	1e03      	subs	r3, r0, #0
   24922:	d012      	beq.n	2494a <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   24924:	4a3b      	ldr	r2, [pc, #236]	; (24a14 <spi_data_write+0x1b0>)
   24926:	493c      	ldr	r1, [pc, #240]	; (24a18 <spi_data_write+0x1b4>)
   24928:	4b3c      	ldr	r3, [pc, #240]	; (24a1c <spi_data_write+0x1b8>)
   2492a:	0018      	movs	r0, r3
   2492c:	4b3c      	ldr	r3, [pc, #240]	; (24a20 <spi_data_write+0x1bc>)
   2492e:	4798      	blx	r3
   24930:	4b3c      	ldr	r3, [pc, #240]	; (24a24 <spi_data_write+0x1c0>)
   24932:	0018      	movs	r0, r3
   24934:	4b3a      	ldr	r3, [pc, #232]	; (24a20 <spi_data_write+0x1bc>)
   24936:	4798      	blx	r3
   24938:	4b3b      	ldr	r3, [pc, #236]	; (24a28 <spi_data_write+0x1c4>)
   2493a:	0018      	movs	r0, r3
   2493c:	4b38      	ldr	r3, [pc, #224]	; (24a20 <spi_data_write+0x1bc>)
   2493e:	4798      	blx	r3
			result = N_FAIL;
   24940:	2313      	movs	r3, #19
   24942:	18fb      	adds	r3, r7, r3
   24944:	2200      	movs	r2, #0
   24946:	701a      	strb	r2, [r3, #0]
			break;
   24948:	e059      	b.n	249fe <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   2494a:	2316      	movs	r3, #22
   2494c:	18fb      	adds	r3, r7, r3
   2494e:	2200      	movs	r2, #0
   24950:	5e9b      	ldrsh	r3, [r3, r2]
   24952:	687a      	ldr	r2, [r7, #4]
   24954:	18d2      	adds	r2, r2, r3
   24956:	2314      	movs	r3, #20
   24958:	18fb      	adds	r3, r7, r3
   2495a:	881b      	ldrh	r3, [r3, #0]
   2495c:	0019      	movs	r1, r3
   2495e:	0010      	movs	r0, r2
   24960:	4b2b      	ldr	r3, [pc, #172]	; (24a10 <spi_data_write+0x1ac>)
   24962:	4798      	blx	r3
   24964:	1e03      	subs	r3, r0, #0
   24966:	d012      	beq.n	2498e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   24968:	4a30      	ldr	r2, [pc, #192]	; (24a2c <spi_data_write+0x1c8>)
   2496a:	492b      	ldr	r1, [pc, #172]	; (24a18 <spi_data_write+0x1b4>)
   2496c:	4b2b      	ldr	r3, [pc, #172]	; (24a1c <spi_data_write+0x1b8>)
   2496e:	0018      	movs	r0, r3
   24970:	4b2b      	ldr	r3, [pc, #172]	; (24a20 <spi_data_write+0x1bc>)
   24972:	4798      	blx	r3
   24974:	4b2e      	ldr	r3, [pc, #184]	; (24a30 <spi_data_write+0x1cc>)
   24976:	0018      	movs	r0, r3
   24978:	4b29      	ldr	r3, [pc, #164]	; (24a20 <spi_data_write+0x1bc>)
   2497a:	4798      	blx	r3
   2497c:	4b2a      	ldr	r3, [pc, #168]	; (24a28 <spi_data_write+0x1c4>)
   2497e:	0018      	movs	r0, r3
   24980:	4b27      	ldr	r3, [pc, #156]	; (24a20 <spi_data_write+0x1bc>)
   24982:	4798      	blx	r3
			result = N_FAIL;
   24984:	2313      	movs	r3, #19
   24986:	18fb      	adds	r3, r7, r3
   24988:	2200      	movs	r2, #0
   2498a:	701a      	strb	r2, [r3, #0]
			break;
   2498c:	e037      	b.n	249fe <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   2498e:	4b29      	ldr	r3, [pc, #164]	; (24a34 <spi_data_write+0x1d0>)
   24990:	781b      	ldrb	r3, [r3, #0]
   24992:	2b00      	cmp	r3, #0
   24994:	d11b      	bne.n	249ce <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   24996:	230c      	movs	r3, #12
   24998:	18fb      	adds	r3, r7, r3
   2499a:	2102      	movs	r1, #2
   2499c:	0018      	movs	r0, r3
   2499e:	4b1c      	ldr	r3, [pc, #112]	; (24a10 <spi_data_write+0x1ac>)
   249a0:	4798      	blx	r3
   249a2:	1e03      	subs	r3, r0, #0
   249a4:	d013      	beq.n	249ce <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   249a6:	23d7      	movs	r3, #215	; 0xd7
   249a8:	009a      	lsls	r2, r3, #2
   249aa:	491b      	ldr	r1, [pc, #108]	; (24a18 <spi_data_write+0x1b4>)
   249ac:	4b1b      	ldr	r3, [pc, #108]	; (24a1c <spi_data_write+0x1b8>)
   249ae:	0018      	movs	r0, r3
   249b0:	4b1b      	ldr	r3, [pc, #108]	; (24a20 <spi_data_write+0x1bc>)
   249b2:	4798      	blx	r3
   249b4:	4b20      	ldr	r3, [pc, #128]	; (24a38 <spi_data_write+0x1d4>)
   249b6:	0018      	movs	r0, r3
   249b8:	4b19      	ldr	r3, [pc, #100]	; (24a20 <spi_data_write+0x1bc>)
   249ba:	4798      	blx	r3
   249bc:	4b1a      	ldr	r3, [pc, #104]	; (24a28 <spi_data_write+0x1c4>)
   249be:	0018      	movs	r0, r3
   249c0:	4b17      	ldr	r3, [pc, #92]	; (24a20 <spi_data_write+0x1bc>)
   249c2:	4798      	blx	r3
				result = N_FAIL;
   249c4:	2313      	movs	r3, #19
   249c6:	18fb      	adds	r3, r7, r3
   249c8:	2200      	movs	r2, #0
   249ca:	701a      	strb	r2, [r3, #0]
				break;
   249cc:	e017      	b.n	249fe <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   249ce:	2316      	movs	r3, #22
   249d0:	18fb      	adds	r3, r7, r3
   249d2:	881a      	ldrh	r2, [r3, #0]
   249d4:	2314      	movs	r3, #20
   249d6:	18fb      	adds	r3, r7, r3
   249d8:	881b      	ldrh	r3, [r3, #0]
   249da:	18d3      	adds	r3, r2, r3
   249dc:	b29a      	uxth	r2, r3
   249de:	2316      	movs	r3, #22
   249e0:	18fb      	adds	r3, r7, r3
   249e2:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   249e4:	1cbb      	adds	r3, r7, #2
   249e6:	1cb9      	adds	r1, r7, #2
   249e8:	2214      	movs	r2, #20
   249ea:	18ba      	adds	r2, r7, r2
   249ec:	8809      	ldrh	r1, [r1, #0]
   249ee:	8812      	ldrh	r2, [r2, #0]
   249f0:	1a8a      	subs	r2, r1, r2
   249f2:	801a      	strh	r2, [r3, #0]
	} while (sz);
   249f4:	1cbb      	adds	r3, r7, #2
   249f6:	881b      	ldrh	r3, [r3, #0]
   249f8:	2b00      	cmp	r3, #0
   249fa:	d000      	beq.n	249fe <spi_data_write+0x19a>
   249fc:	e745      	b.n	2488a <spi_data_write+0x26>


	return result;
   249fe:	2313      	movs	r3, #19
   24a00:	18fb      	adds	r3, r7, r3
   24a02:	781b      	ldrb	r3, [r3, #0]
   24a04:	b25b      	sxtb	r3, r3
}
   24a06:	0018      	movs	r0, r3
   24a08:	46bd      	mov	sp, r7
   24a0a:	b006      	add	sp, #24
   24a0c:	bd80      	pop	{r7, pc}
   24a0e:	46c0      	nop			; (mov r8, r8)
   24a10:	000238ed 	.word	0x000238ed
   24a14:	00000349 	.word	0x00000349
   24a18:	00039be8 	.word	0x00039be8
   24a1c:	000395c0 	.word	0x000395c0
   24a20:	0001e3f9 	.word	0x0001e3f9
   24a24:	00039888 	.word	0x00039888
   24a28:	00039600 	.word	0x00039600
   24a2c:	00000352 	.word	0x00000352
   24a30:	000398c0 	.word	0x000398c0
   24a34:	200042b0 	.word	0x200042b0
   24a38:	000398f4 	.word	0x000398f4

00024a3c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   24a3c:	b590      	push	{r4, r7, lr}
   24a3e:	b087      	sub	sp, #28
   24a40:	af02      	add	r7, sp, #8
   24a42:	6078      	str	r0, [r7, #4]
   24a44:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   24a46:	230f      	movs	r3, #15
   24a48:	18fb      	adds	r3, r7, r3
   24a4a:	220a      	movs	r2, #10
   24a4c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24a4e:	230c      	movs	r3, #12
   24a50:	18fb      	adds	r3, r7, r3
   24a52:	2201      	movs	r2, #1
   24a54:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   24a56:	230e      	movs	r3, #14
   24a58:	18fb      	adds	r3, r7, r3
   24a5a:	22c9      	movs	r2, #201	; 0xc9
   24a5c:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   24a5e:	230d      	movs	r3, #13
   24a60:	18fb      	adds	r3, r7, r3
   24a62:	2200      	movs	r2, #0
   24a64:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   24a66:	687b      	ldr	r3, [r7, #4]
   24a68:	2b30      	cmp	r3, #48	; 0x30
   24a6a:	d808      	bhi.n	24a7e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   24a6c:	230e      	movs	r3, #14
   24a6e:	18fb      	adds	r3, r7, r3
   24a70:	22c3      	movs	r2, #195	; 0xc3
   24a72:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   24a74:	230d      	movs	r3, #13
   24a76:	18fb      	adds	r3, r7, r3
   24a78:	2201      	movs	r2, #1
   24a7a:	701a      	strb	r2, [r3, #0]
   24a7c:	e007      	b.n	24a8e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   24a7e:	230e      	movs	r3, #14
   24a80:	18fb      	adds	r3, r7, r3
   24a82:	22c9      	movs	r2, #201	; 0xc9
   24a84:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   24a86:	230d      	movs	r3, #13
   24a88:	18fb      	adds	r3, r7, r3
   24a8a:	2200      	movs	r2, #0
   24a8c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   24a8e:	003a      	movs	r2, r7
   24a90:	6879      	ldr	r1, [r7, #4]
   24a92:	230e      	movs	r3, #14
   24a94:	18fb      	adds	r3, r7, r3
   24a96:	7818      	ldrb	r0, [r3, #0]
   24a98:	230d      	movs	r3, #13
   24a9a:	18fb      	adds	r3, r7, r3
   24a9c:	781b      	ldrb	r3, [r3, #0]
   24a9e:	9300      	str	r3, [sp, #0]
   24aa0:	2304      	movs	r3, #4
   24aa2:	4c2e      	ldr	r4, [pc, #184]	; (24b5c <spi_write_reg+0x120>)
   24aa4:	47a0      	blx	r4
   24aa6:	0002      	movs	r2, r0
   24aa8:	230c      	movs	r3, #12
   24aaa:	18fb      	adds	r3, r7, r3
   24aac:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24aae:	230c      	movs	r3, #12
   24ab0:	18fb      	adds	r3, r7, r3
   24ab2:	781b      	ldrb	r3, [r3, #0]
   24ab4:	b25b      	sxtb	r3, r3
   24ab6:	2b01      	cmp	r3, #1
   24ab8:	d010      	beq.n	24adc <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   24aba:	4a29      	ldr	r2, [pc, #164]	; (24b60 <spi_write_reg+0x124>)
   24abc:	4929      	ldr	r1, [pc, #164]	; (24b64 <spi_write_reg+0x128>)
   24abe:	4b2a      	ldr	r3, [pc, #168]	; (24b68 <spi_write_reg+0x12c>)
   24ac0:	0018      	movs	r0, r3
   24ac2:	4b2a      	ldr	r3, [pc, #168]	; (24b6c <spi_write_reg+0x130>)
   24ac4:	4798      	blx	r3
   24ac6:	687a      	ldr	r2, [r7, #4]
   24ac8:	4b29      	ldr	r3, [pc, #164]	; (24b70 <spi_write_reg+0x134>)
   24aca:	0011      	movs	r1, r2
   24acc:	0018      	movs	r0, r3
   24ace:	4b27      	ldr	r3, [pc, #156]	; (24b6c <spi_write_reg+0x130>)
   24ad0:	4798      	blx	r3
   24ad2:	4b28      	ldr	r3, [pc, #160]	; (24b74 <spi_write_reg+0x138>)
   24ad4:	0018      	movs	r0, r3
   24ad6:	4b25      	ldr	r3, [pc, #148]	; (24b6c <spi_write_reg+0x130>)
   24ad8:	4798      	blx	r3
		goto _FAIL_;
   24ada:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   24adc:	230c      	movs	r3, #12
   24ade:	18fb      	adds	r3, r7, r3
   24ae0:	781b      	ldrb	r3, [r3, #0]
   24ae2:	b25b      	sxtb	r3, r3
   24ae4:	2b01      	cmp	r3, #1
   24ae6:	d030      	beq.n	24b4a <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   24ae8:	2001      	movs	r0, #1
   24aea:	4b23      	ldr	r3, [pc, #140]	; (24b78 <spi_write_reg+0x13c>)
   24aec:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24aee:	2300      	movs	r3, #0
   24af0:	9300      	str	r3, [sp, #0]
   24af2:	2300      	movs	r3, #0
   24af4:	2200      	movs	r2, #0
   24af6:	2100      	movs	r1, #0
   24af8:	20cf      	movs	r0, #207	; 0xcf
   24afa:	4c20      	ldr	r4, [pc, #128]	; (24b7c <spi_write_reg+0x140>)
   24afc:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24afe:	20cf      	movs	r0, #207	; 0xcf
   24b00:	4b1f      	ldr	r3, [pc, #124]	; (24b80 <spi_write_reg+0x144>)
   24b02:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   24b04:	23ea      	movs	r3, #234	; 0xea
   24b06:	009a      	lsls	r2, r3, #2
   24b08:	4916      	ldr	r1, [pc, #88]	; (24b64 <spi_write_reg+0x128>)
   24b0a:	4b17      	ldr	r3, [pc, #92]	; (24b68 <spi_write_reg+0x12c>)
   24b0c:	0018      	movs	r0, r3
   24b0e:	4b17      	ldr	r3, [pc, #92]	; (24b6c <spi_write_reg+0x130>)
   24b10:	4798      	blx	r3
   24b12:	230f      	movs	r3, #15
   24b14:	18fb      	adds	r3, r7, r3
   24b16:	7819      	ldrb	r1, [r3, #0]
   24b18:	683b      	ldr	r3, [r7, #0]
   24b1a:	687a      	ldr	r2, [r7, #4]
   24b1c:	4819      	ldr	r0, [pc, #100]	; (24b84 <spi_write_reg+0x148>)
   24b1e:	4c13      	ldr	r4, [pc, #76]	; (24b6c <spi_write_reg+0x130>)
   24b20:	47a0      	blx	r4
   24b22:	4b14      	ldr	r3, [pc, #80]	; (24b74 <spi_write_reg+0x138>)
   24b24:	0018      	movs	r0, r3
   24b26:	4b11      	ldr	r3, [pc, #68]	; (24b6c <spi_write_reg+0x130>)
   24b28:	4798      	blx	r3
		nm_bsp_sleep(1);
   24b2a:	2001      	movs	r0, #1
   24b2c:	4b12      	ldr	r3, [pc, #72]	; (24b78 <spi_write_reg+0x13c>)
   24b2e:	4798      	blx	r3
		retry--;
   24b30:	230f      	movs	r3, #15
   24b32:	18fb      	adds	r3, r7, r3
   24b34:	781a      	ldrb	r2, [r3, #0]
   24b36:	230f      	movs	r3, #15
   24b38:	18fb      	adds	r3, r7, r3
   24b3a:	3a01      	subs	r2, #1
   24b3c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24b3e:	230f      	movs	r3, #15
   24b40:	18fb      	adds	r3, r7, r3
   24b42:	781b      	ldrb	r3, [r3, #0]
   24b44:	2b00      	cmp	r3, #0
   24b46:	d000      	beq.n	24b4a <spi_write_reg+0x10e>
   24b48:	e78d      	b.n	24a66 <spi_write_reg+0x2a>
	}

	return result;
   24b4a:	230c      	movs	r3, #12
   24b4c:	18fb      	adds	r3, r7, r3
   24b4e:	781b      	ldrb	r3, [r3, #0]
   24b50:	b25b      	sxtb	r3, r3
}
   24b52:	0018      	movs	r0, r3
   24b54:	46bd      	mov	sp, r7
   24b56:	b005      	add	sp, #20
   24b58:	bd90      	pop	{r4, r7, pc}
   24b5a:	46c0      	nop			; (mov r8, r8)
   24b5c:	00023f71 	.word	0x00023f71
   24b60:	0000039d 	.word	0x0000039d
   24b64:	00039bf8 	.word	0x00039bf8
   24b68:	000395c0 	.word	0x000395c0
   24b6c:	0001e3f9 	.word	0x0001e3f9
   24b70:	0003992c 	.word	0x0003992c
   24b74:	00039600 	.word	0x00039600
   24b78:	000208b1 	.word	0x000208b1
   24b7c:	000239f5 	.word	0x000239f5
   24b80:	00023e35 	.word	0x00023e35
   24b84:	00039958 	.word	0x00039958

00024b88 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   24b88:	b590      	push	{r4, r7, lr}
   24b8a:	b089      	sub	sp, #36	; 0x24
   24b8c:	af02      	add	r7, sp, #8
   24b8e:	60f8      	str	r0, [r7, #12]
   24b90:	60b9      	str	r1, [r7, #8]
   24b92:	1dbb      	adds	r3, r7, #6
   24b94:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24b96:	2316      	movs	r3, #22
   24b98:	18fb      	adds	r3, r7, r3
   24b9a:	220a      	movs	r2, #10
   24b9c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   24b9e:	2315      	movs	r3, #21
   24ba0:	18fb      	adds	r3, r7, r3
   24ba2:	22c7      	movs	r2, #199	; 0xc7
   24ba4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   24ba6:	1dbb      	adds	r3, r7, #6
   24ba8:	881a      	ldrh	r2, [r3, #0]
   24baa:	68f9      	ldr	r1, [r7, #12]
   24bac:	2315      	movs	r3, #21
   24bae:	18fb      	adds	r3, r7, r3
   24bb0:	7818      	ldrb	r0, [r3, #0]
   24bb2:	2300      	movs	r3, #0
   24bb4:	9300      	str	r3, [sp, #0]
   24bb6:	0013      	movs	r3, r2
   24bb8:	2200      	movs	r2, #0
   24bba:	4c4d      	ldr	r4, [pc, #308]	; (24cf0 <nm_spi_write+0x168>)
   24bbc:	47a0      	blx	r4
   24bbe:	0002      	movs	r2, r0
   24bc0:	2317      	movs	r3, #23
   24bc2:	18fb      	adds	r3, r7, r3
   24bc4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24bc6:	2317      	movs	r3, #23
   24bc8:	18fb      	adds	r3, r7, r3
   24bca:	781b      	ldrb	r3, [r3, #0]
   24bcc:	b25b      	sxtb	r3, r3
   24bce:	2b01      	cmp	r3, #1
   24bd0:	d010      	beq.n	24bf4 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   24bd2:	4a48      	ldr	r2, [pc, #288]	; (24cf4 <nm_spi_write+0x16c>)
   24bd4:	4948      	ldr	r1, [pc, #288]	; (24cf8 <nm_spi_write+0x170>)
   24bd6:	4b49      	ldr	r3, [pc, #292]	; (24cfc <nm_spi_write+0x174>)
   24bd8:	0018      	movs	r0, r3
   24bda:	4b49      	ldr	r3, [pc, #292]	; (24d00 <nm_spi_write+0x178>)
   24bdc:	4798      	blx	r3
   24bde:	68fa      	ldr	r2, [r7, #12]
   24be0:	4b48      	ldr	r3, [pc, #288]	; (24d04 <nm_spi_write+0x17c>)
   24be2:	0011      	movs	r1, r2
   24be4:	0018      	movs	r0, r3
   24be6:	4b46      	ldr	r3, [pc, #280]	; (24d00 <nm_spi_write+0x178>)
   24be8:	4798      	blx	r3
   24bea:	4b47      	ldr	r3, [pc, #284]	; (24d08 <nm_spi_write+0x180>)
   24bec:	0018      	movs	r0, r3
   24bee:	4b44      	ldr	r3, [pc, #272]	; (24d00 <nm_spi_write+0x178>)
   24bf0:	4798      	blx	r3
		goto _FAIL_;
   24bf2:	e03e      	b.n	24c72 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   24bf4:	2317      	movs	r3, #23
   24bf6:	18fc      	adds	r4, r7, r3
   24bf8:	1dbb      	adds	r3, r7, #6
   24bfa:	881a      	ldrh	r2, [r3, #0]
   24bfc:	68bb      	ldr	r3, [r7, #8]
   24bfe:	0011      	movs	r1, r2
   24c00:	0018      	movs	r0, r3
   24c02:	4b42      	ldr	r3, [pc, #264]	; (24d0c <nm_spi_write+0x184>)
   24c04:	4798      	blx	r3
   24c06:	0003      	movs	r3, r0
   24c08:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   24c0a:	2317      	movs	r3, #23
   24c0c:	18fb      	adds	r3, r7, r3
   24c0e:	781b      	ldrb	r3, [r3, #0]
   24c10:	b25b      	sxtb	r3, r3
   24c12:	2b01      	cmp	r3, #1
   24c14:	d00e      	beq.n	24c34 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24c16:	4a3e      	ldr	r2, [pc, #248]	; (24d10 <nm_spi_write+0x188>)
   24c18:	4937      	ldr	r1, [pc, #220]	; (24cf8 <nm_spi_write+0x170>)
   24c1a:	4b38      	ldr	r3, [pc, #224]	; (24cfc <nm_spi_write+0x174>)
   24c1c:	0018      	movs	r0, r3
   24c1e:	4b38      	ldr	r3, [pc, #224]	; (24d00 <nm_spi_write+0x178>)
   24c20:	4798      	blx	r3
   24c22:	4b3c      	ldr	r3, [pc, #240]	; (24d14 <nm_spi_write+0x18c>)
   24c24:	0018      	movs	r0, r3
   24c26:	4b36      	ldr	r3, [pc, #216]	; (24d00 <nm_spi_write+0x178>)
   24c28:	4798      	blx	r3
   24c2a:	4b37      	ldr	r3, [pc, #220]	; (24d08 <nm_spi_write+0x180>)
   24c2c:	0018      	movs	r0, r3
   24c2e:	4b34      	ldr	r3, [pc, #208]	; (24d00 <nm_spi_write+0x178>)
   24c30:	4798      	blx	r3
		goto _FAIL_;
   24c32:	e01e      	b.n	24c72 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   24c34:	2317      	movs	r3, #23
   24c36:	18fc      	adds	r4, r7, r3
   24c38:	2315      	movs	r3, #21
   24c3a:	18fb      	adds	r3, r7, r3
   24c3c:	781b      	ldrb	r3, [r3, #0]
   24c3e:	0018      	movs	r0, r3
   24c40:	4b35      	ldr	r3, [pc, #212]	; (24d18 <nm_spi_write+0x190>)
   24c42:	4798      	blx	r3
   24c44:	0003      	movs	r3, r0
   24c46:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   24c48:	2317      	movs	r3, #23
   24c4a:	18fb      	adds	r3, r7, r3
   24c4c:	781b      	ldrb	r3, [r3, #0]
   24c4e:	b25b      	sxtb	r3, r3
   24c50:	2b01      	cmp	r3, #1
   24c52:	d00e      	beq.n	24c72 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24c54:	4a31      	ldr	r2, [pc, #196]	; (24d1c <nm_spi_write+0x194>)
   24c56:	4928      	ldr	r1, [pc, #160]	; (24cf8 <nm_spi_write+0x170>)
   24c58:	4b28      	ldr	r3, [pc, #160]	; (24cfc <nm_spi_write+0x174>)
   24c5a:	0018      	movs	r0, r3
   24c5c:	4b28      	ldr	r3, [pc, #160]	; (24d00 <nm_spi_write+0x178>)
   24c5e:	4798      	blx	r3
   24c60:	4b2c      	ldr	r3, [pc, #176]	; (24d14 <nm_spi_write+0x18c>)
   24c62:	0018      	movs	r0, r3
   24c64:	4b26      	ldr	r3, [pc, #152]	; (24d00 <nm_spi_write+0x178>)
   24c66:	4798      	blx	r3
   24c68:	4b27      	ldr	r3, [pc, #156]	; (24d08 <nm_spi_write+0x180>)
   24c6a:	0018      	movs	r0, r3
   24c6c:	4b24      	ldr	r3, [pc, #144]	; (24d00 <nm_spi_write+0x178>)
   24c6e:	4798      	blx	r3
		goto _FAIL_;
   24c70:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   24c72:	2317      	movs	r3, #23
   24c74:	18fb      	adds	r3, r7, r3
   24c76:	781b      	ldrb	r3, [r3, #0]
   24c78:	b25b      	sxtb	r3, r3
   24c7a:	2b01      	cmp	r3, #1
   24c7c:	d030      	beq.n	24ce0 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   24c7e:	2001      	movs	r0, #1
   24c80:	4b27      	ldr	r3, [pc, #156]	; (24d20 <nm_spi_write+0x198>)
   24c82:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24c84:	2300      	movs	r3, #0
   24c86:	9300      	str	r3, [sp, #0]
   24c88:	2300      	movs	r3, #0
   24c8a:	2200      	movs	r2, #0
   24c8c:	2100      	movs	r1, #0
   24c8e:	20cf      	movs	r0, #207	; 0xcf
   24c90:	4c24      	ldr	r4, [pc, #144]	; (24d24 <nm_spi_write+0x19c>)
   24c92:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24c94:	20cf      	movs	r0, #207	; 0xcf
   24c96:	4b24      	ldr	r3, [pc, #144]	; (24d28 <nm_spi_write+0x1a0>)
   24c98:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   24c9a:	4a24      	ldr	r2, [pc, #144]	; (24d2c <nm_spi_write+0x1a4>)
   24c9c:	4916      	ldr	r1, [pc, #88]	; (24cf8 <nm_spi_write+0x170>)
   24c9e:	4b17      	ldr	r3, [pc, #92]	; (24cfc <nm_spi_write+0x174>)
   24ca0:	0018      	movs	r0, r3
   24ca2:	4b17      	ldr	r3, [pc, #92]	; (24d00 <nm_spi_write+0x178>)
   24ca4:	4798      	blx	r3
   24ca6:	2316      	movs	r3, #22
   24ca8:	18fb      	adds	r3, r7, r3
   24caa:	7819      	ldrb	r1, [r3, #0]
   24cac:	1dbb      	adds	r3, r7, #6
   24cae:	881b      	ldrh	r3, [r3, #0]
   24cb0:	68fa      	ldr	r2, [r7, #12]
   24cb2:	481f      	ldr	r0, [pc, #124]	; (24d30 <nm_spi_write+0x1a8>)
   24cb4:	4c12      	ldr	r4, [pc, #72]	; (24d00 <nm_spi_write+0x178>)
   24cb6:	47a0      	blx	r4
   24cb8:	4b13      	ldr	r3, [pc, #76]	; (24d08 <nm_spi_write+0x180>)
   24cba:	0018      	movs	r0, r3
   24cbc:	4b10      	ldr	r3, [pc, #64]	; (24d00 <nm_spi_write+0x178>)
   24cbe:	4798      	blx	r3
		nm_bsp_sleep(1);
   24cc0:	2001      	movs	r0, #1
   24cc2:	4b17      	ldr	r3, [pc, #92]	; (24d20 <nm_spi_write+0x198>)
   24cc4:	4798      	blx	r3
		retry--;
   24cc6:	2316      	movs	r3, #22
   24cc8:	18fb      	adds	r3, r7, r3
   24cca:	781a      	ldrb	r2, [r3, #0]
   24ccc:	2316      	movs	r3, #22
   24cce:	18fb      	adds	r3, r7, r3
   24cd0:	3a01      	subs	r2, #1
   24cd2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24cd4:	2316      	movs	r3, #22
   24cd6:	18fb      	adds	r3, r7, r3
   24cd8:	781b      	ldrb	r3, [r3, #0]
   24cda:	2b00      	cmp	r3, #0
   24cdc:	d000      	beq.n	24ce0 <nm_spi_write+0x158>
   24cde:	e762      	b.n	24ba6 <nm_spi_write+0x1e>
	}


	return result;
   24ce0:	2317      	movs	r3, #23
   24ce2:	18fb      	adds	r3, r7, r3
   24ce4:	781b      	ldrb	r3, [r3, #0]
   24ce6:	b25b      	sxtb	r3, r3
}
   24ce8:	0018      	movs	r0, r3
   24cea:	46bd      	mov	sp, r7
   24cec:	b007      	add	sp, #28
   24cee:	bd90      	pop	{r4, r7, pc}
   24cf0:	00023f71 	.word	0x00023f71
   24cf4:	000003cf 	.word	0x000003cf
   24cf8:	00039c08 	.word	0x00039c08
   24cfc:	000395c0 	.word	0x000395c0
   24d00:	0001e3f9 	.word	0x0001e3f9
   24d04:	00039974 	.word	0x00039974
   24d08:	00039600 	.word	0x00039600
   24d0c:	00024865 	.word	0x00024865
   24d10:	000003d9 	.word	0x000003d9
   24d14:	000399a4 	.word	0x000399a4
   24d18:	00023d35 	.word	0x00023d35
   24d1c:	000003e1 	.word	0x000003e1
   24d20:	000208b1 	.word	0x000208b1
   24d24:	000239f5 	.word	0x000239f5
   24d28:	00023e35 	.word	0x00023e35
   24d2c:	000003eb 	.word	0x000003eb
   24d30:	000399cc 	.word	0x000399cc

00024d34 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   24d34:	b590      	push	{r4, r7, lr}
   24d36:	b087      	sub	sp, #28
   24d38:	af02      	add	r7, sp, #8
   24d3a:	6078      	str	r0, [r7, #4]
   24d3c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   24d3e:	230f      	movs	r3, #15
   24d40:	18fb      	adds	r3, r7, r3
   24d42:	220a      	movs	r2, #10
   24d44:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24d46:	230c      	movs	r3, #12
   24d48:	18fb      	adds	r3, r7, r3
   24d4a:	2201      	movs	r2, #1
   24d4c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   24d4e:	230e      	movs	r3, #14
   24d50:	18fb      	adds	r3, r7, r3
   24d52:	22ca      	movs	r2, #202	; 0xca
   24d54:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   24d56:	230d      	movs	r3, #13
   24d58:	18fb      	adds	r3, r7, r3
   24d5a:	2200      	movs	r2, #0
   24d5c:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   24d5e:	687b      	ldr	r3, [r7, #4]
   24d60:	2bff      	cmp	r3, #255	; 0xff
   24d62:	d808      	bhi.n	24d76 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   24d64:	230e      	movs	r3, #14
   24d66:	18fb      	adds	r3, r7, r3
   24d68:	22c4      	movs	r2, #196	; 0xc4
   24d6a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   24d6c:	230d      	movs	r3, #13
   24d6e:	18fb      	adds	r3, r7, r3
   24d70:	2201      	movs	r2, #1
   24d72:	701a      	strb	r2, [r3, #0]
   24d74:	e007      	b.n	24d86 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   24d76:	230e      	movs	r3, #14
   24d78:	18fb      	adds	r3, r7, r3
   24d7a:	22ca      	movs	r2, #202	; 0xca
   24d7c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   24d7e:	230d      	movs	r3, #13
   24d80:	18fb      	adds	r3, r7, r3
   24d82:	2200      	movs	r2, #0
   24d84:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   24d86:	2308      	movs	r3, #8
   24d88:	18fa      	adds	r2, r7, r3
   24d8a:	6879      	ldr	r1, [r7, #4]
   24d8c:	230e      	movs	r3, #14
   24d8e:	18fb      	adds	r3, r7, r3
   24d90:	7818      	ldrb	r0, [r3, #0]
   24d92:	230d      	movs	r3, #13
   24d94:	18fb      	adds	r3, r7, r3
   24d96:	781b      	ldrb	r3, [r3, #0]
   24d98:	9300      	str	r3, [sp, #0]
   24d9a:	2304      	movs	r3, #4
   24d9c:	4c37      	ldr	r4, [pc, #220]	; (24e7c <spi_read_reg+0x148>)
   24d9e:	47a0      	blx	r4
   24da0:	0002      	movs	r2, r0
   24da2:	230c      	movs	r3, #12
   24da4:	18fb      	adds	r3, r7, r3
   24da6:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24da8:	230c      	movs	r3, #12
   24daa:	18fb      	adds	r3, r7, r3
   24dac:	781b      	ldrb	r3, [r3, #0]
   24dae:	b25b      	sxtb	r3, r3
   24db0:	2b01      	cmp	r3, #1
   24db2:	d010      	beq.n	24dd6 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   24db4:	4a32      	ldr	r2, [pc, #200]	; (24e80 <spi_read_reg+0x14c>)
   24db6:	4933      	ldr	r1, [pc, #204]	; (24e84 <spi_read_reg+0x150>)
   24db8:	4b33      	ldr	r3, [pc, #204]	; (24e88 <spi_read_reg+0x154>)
   24dba:	0018      	movs	r0, r3
   24dbc:	4b33      	ldr	r3, [pc, #204]	; (24e8c <spi_read_reg+0x158>)
   24dbe:	4798      	blx	r3
   24dc0:	687a      	ldr	r2, [r7, #4]
   24dc2:	4b33      	ldr	r3, [pc, #204]	; (24e90 <spi_read_reg+0x15c>)
   24dc4:	0011      	movs	r1, r2
   24dc6:	0018      	movs	r0, r3
   24dc8:	4b30      	ldr	r3, [pc, #192]	; (24e8c <spi_read_reg+0x158>)
   24dca:	4798      	blx	r3
   24dcc:	4b31      	ldr	r3, [pc, #196]	; (24e94 <spi_read_reg+0x160>)
   24dce:	0018      	movs	r0, r3
   24dd0:	4b2e      	ldr	r3, [pc, #184]	; (24e8c <spi_read_reg+0x158>)
   24dd2:	4798      	blx	r3
		goto _FAIL_;
   24dd4:	e014      	b.n	24e00 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   24dd6:	2308      	movs	r3, #8
   24dd8:	18fb      	adds	r3, r7, r3
   24dda:	781b      	ldrb	r3, [r3, #0]
   24ddc:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   24dde:	2308      	movs	r3, #8
   24de0:	18fb      	adds	r3, r7, r3
   24de2:	785b      	ldrb	r3, [r3, #1]
   24de4:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   24de6:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   24de8:	2308      	movs	r3, #8
   24dea:	18fb      	adds	r3, r7, r3
   24dec:	789b      	ldrb	r3, [r3, #2]
   24dee:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   24df0:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   24df2:	2308      	movs	r3, #8
   24df4:	18fb      	adds	r3, r7, r3
   24df6:	78db      	ldrb	r3, [r3, #3]
   24df8:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   24dfa:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   24dfc:	683b      	ldr	r3, [r7, #0]
   24dfe:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   24e00:	230c      	movs	r3, #12
   24e02:	18fb      	adds	r3, r7, r3
   24e04:	781b      	ldrb	r3, [r3, #0]
   24e06:	b25b      	sxtb	r3, r3
   24e08:	2b01      	cmp	r3, #1
   24e0a:	d02f      	beq.n	24e6c <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   24e0c:	2001      	movs	r0, #1
   24e0e:	4b22      	ldr	r3, [pc, #136]	; (24e98 <spi_read_reg+0x164>)
   24e10:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24e12:	2300      	movs	r3, #0
   24e14:	9300      	str	r3, [sp, #0]
   24e16:	2300      	movs	r3, #0
   24e18:	2200      	movs	r2, #0
   24e1a:	2100      	movs	r1, #0
   24e1c:	20cf      	movs	r0, #207	; 0xcf
   24e1e:	4c1f      	ldr	r4, [pc, #124]	; (24e9c <spi_read_reg+0x168>)
   24e20:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24e22:	20cf      	movs	r0, #207	; 0xcf
   24e24:	4b1e      	ldr	r3, [pc, #120]	; (24ea0 <spi_read_reg+0x16c>)
   24e26:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   24e28:	4a1e      	ldr	r2, [pc, #120]	; (24ea4 <spi_read_reg+0x170>)
   24e2a:	4916      	ldr	r1, [pc, #88]	; (24e84 <spi_read_reg+0x150>)
   24e2c:	4b16      	ldr	r3, [pc, #88]	; (24e88 <spi_read_reg+0x154>)
   24e2e:	0018      	movs	r0, r3
   24e30:	4b16      	ldr	r3, [pc, #88]	; (24e8c <spi_read_reg+0x158>)
   24e32:	4798      	blx	r3
   24e34:	230f      	movs	r3, #15
   24e36:	18fb      	adds	r3, r7, r3
   24e38:	7819      	ldrb	r1, [r3, #0]
   24e3a:	687a      	ldr	r2, [r7, #4]
   24e3c:	4b1a      	ldr	r3, [pc, #104]	; (24ea8 <spi_read_reg+0x174>)
   24e3e:	0018      	movs	r0, r3
   24e40:	4b12      	ldr	r3, [pc, #72]	; (24e8c <spi_read_reg+0x158>)
   24e42:	4798      	blx	r3
   24e44:	4b13      	ldr	r3, [pc, #76]	; (24e94 <spi_read_reg+0x160>)
   24e46:	0018      	movs	r0, r3
   24e48:	4b10      	ldr	r3, [pc, #64]	; (24e8c <spi_read_reg+0x158>)
   24e4a:	4798      	blx	r3
		nm_bsp_sleep(1);
   24e4c:	2001      	movs	r0, #1
   24e4e:	4b12      	ldr	r3, [pc, #72]	; (24e98 <spi_read_reg+0x164>)
   24e50:	4798      	blx	r3
		retry--;
   24e52:	230f      	movs	r3, #15
   24e54:	18fb      	adds	r3, r7, r3
   24e56:	781a      	ldrb	r2, [r3, #0]
   24e58:	230f      	movs	r3, #15
   24e5a:	18fb      	adds	r3, r7, r3
   24e5c:	3a01      	subs	r2, #1
   24e5e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24e60:	230f      	movs	r3, #15
   24e62:	18fb      	adds	r3, r7, r3
   24e64:	781b      	ldrb	r3, [r3, #0]
   24e66:	2b00      	cmp	r3, #0
   24e68:	d000      	beq.n	24e6c <spi_read_reg+0x138>
   24e6a:	e778      	b.n	24d5e <spi_read_reg+0x2a>
	}
		
	return result;
   24e6c:	230c      	movs	r3, #12
   24e6e:	18fb      	adds	r3, r7, r3
   24e70:	781b      	ldrb	r3, [r3, #0]
   24e72:	b25b      	sxtb	r3, r3
}
   24e74:	0018      	movs	r0, r3
   24e76:	46bd      	mov	sp, r7
   24e78:	b005      	add	sp, #20
   24e7a:	bd90      	pop	{r4, r7, pc}
   24e7c:	00023f71 	.word	0x00023f71
   24e80:	00000423 	.word	0x00000423
   24e84:	00039c18 	.word	0x00039c18
   24e88:	000395c0 	.word	0x000395c0
   24e8c:	0001e3f9 	.word	0x0001e3f9
   24e90:	000399e8 	.word	0x000399e8
   24e94:	00039600 	.word	0x00039600
   24e98:	000208b1 	.word	0x000208b1
   24e9c:	000239f5 	.word	0x000239f5
   24ea0:	00023e35 	.word	0x00023e35
   24ea4:	00000435 	.word	0x00000435
   24ea8:	00039a14 	.word	0x00039a14

00024eac <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   24eac:	b590      	push	{r4, r7, lr}
   24eae:	b089      	sub	sp, #36	; 0x24
   24eb0:	af02      	add	r7, sp, #8
   24eb2:	60f8      	str	r0, [r7, #12]
   24eb4:	60b9      	str	r1, [r7, #8]
   24eb6:	1dbb      	adds	r3, r7, #6
   24eb8:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   24eba:	2316      	movs	r3, #22
   24ebc:	18fb      	adds	r3, r7, r3
   24ebe:	22c8      	movs	r2, #200	; 0xc8
   24ec0:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24ec2:	2317      	movs	r3, #23
   24ec4:	18fb      	adds	r3, r7, r3
   24ec6:	220a      	movs	r2, #10
   24ec8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   24eca:	1dbb      	adds	r3, r7, #6
   24ecc:	881c      	ldrh	r4, [r3, #0]
   24ece:	68ba      	ldr	r2, [r7, #8]
   24ed0:	68f9      	ldr	r1, [r7, #12]
   24ed2:	2316      	movs	r3, #22
   24ed4:	18fb      	adds	r3, r7, r3
   24ed6:	7818      	ldrb	r0, [r3, #0]
   24ed8:	2300      	movs	r3, #0
   24eda:	9300      	str	r3, [sp, #0]
   24edc:	0023      	movs	r3, r4
   24ede:	4c2e      	ldr	r4, [pc, #184]	; (24f98 <nm_spi_read+0xec>)
   24ee0:	47a0      	blx	r4
   24ee2:	0002      	movs	r2, r0
   24ee4:	2315      	movs	r3, #21
   24ee6:	18fb      	adds	r3, r7, r3
   24ee8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24eea:	2315      	movs	r3, #21
   24eec:	18fb      	adds	r3, r7, r3
   24eee:	781b      	ldrb	r3, [r3, #0]
   24ef0:	b25b      	sxtb	r3, r3
   24ef2:	2b01      	cmp	r3, #1
   24ef4:	d010      	beq.n	24f18 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   24ef6:	4a29      	ldr	r2, [pc, #164]	; (24f9c <nm_spi_read+0xf0>)
   24ef8:	4929      	ldr	r1, [pc, #164]	; (24fa0 <nm_spi_read+0xf4>)
   24efa:	4b2a      	ldr	r3, [pc, #168]	; (24fa4 <nm_spi_read+0xf8>)
   24efc:	0018      	movs	r0, r3
   24efe:	4b2a      	ldr	r3, [pc, #168]	; (24fa8 <nm_spi_read+0xfc>)
   24f00:	4798      	blx	r3
   24f02:	68fa      	ldr	r2, [r7, #12]
   24f04:	4b29      	ldr	r3, [pc, #164]	; (24fac <nm_spi_read+0x100>)
   24f06:	0011      	movs	r1, r2
   24f08:	0018      	movs	r0, r3
   24f0a:	4b27      	ldr	r3, [pc, #156]	; (24fa8 <nm_spi_read+0xfc>)
   24f0c:	4798      	blx	r3
   24f0e:	4b28      	ldr	r3, [pc, #160]	; (24fb0 <nm_spi_read+0x104>)
   24f10:	0018      	movs	r0, r3
   24f12:	4b25      	ldr	r3, [pc, #148]	; (24fa8 <nm_spi_read+0xfc>)
   24f14:	4798      	blx	r3
		goto _FAIL_;
   24f16:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   24f18:	2315      	movs	r3, #21
   24f1a:	18fb      	adds	r3, r7, r3
   24f1c:	781b      	ldrb	r3, [r3, #0]
   24f1e:	b25b      	sxtb	r3, r3
   24f20:	2b01      	cmp	r3, #1
   24f22:	d030      	beq.n	24f86 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   24f24:	2001      	movs	r0, #1
   24f26:	4b23      	ldr	r3, [pc, #140]	; (24fb4 <nm_spi_read+0x108>)
   24f28:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24f2a:	2300      	movs	r3, #0
   24f2c:	9300      	str	r3, [sp, #0]
   24f2e:	2300      	movs	r3, #0
   24f30:	2200      	movs	r2, #0
   24f32:	2100      	movs	r1, #0
   24f34:	20cf      	movs	r0, #207	; 0xcf
   24f36:	4c20      	ldr	r4, [pc, #128]	; (24fb8 <nm_spi_read+0x10c>)
   24f38:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24f3a:	20cf      	movs	r0, #207	; 0xcf
   24f3c:	4b1f      	ldr	r3, [pc, #124]	; (24fbc <nm_spi_read+0x110>)
   24f3e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   24f40:	4a1f      	ldr	r2, [pc, #124]	; (24fc0 <nm_spi_read+0x114>)
   24f42:	4917      	ldr	r1, [pc, #92]	; (24fa0 <nm_spi_read+0xf4>)
   24f44:	4b17      	ldr	r3, [pc, #92]	; (24fa4 <nm_spi_read+0xf8>)
   24f46:	0018      	movs	r0, r3
   24f48:	4b17      	ldr	r3, [pc, #92]	; (24fa8 <nm_spi_read+0xfc>)
   24f4a:	4798      	blx	r3
   24f4c:	2317      	movs	r3, #23
   24f4e:	18fb      	adds	r3, r7, r3
   24f50:	7819      	ldrb	r1, [r3, #0]
   24f52:	1dbb      	adds	r3, r7, #6
   24f54:	881b      	ldrh	r3, [r3, #0]
   24f56:	68fa      	ldr	r2, [r7, #12]
   24f58:	481a      	ldr	r0, [pc, #104]	; (24fc4 <nm_spi_read+0x118>)
   24f5a:	4c13      	ldr	r4, [pc, #76]	; (24fa8 <nm_spi_read+0xfc>)
   24f5c:	47a0      	blx	r4
   24f5e:	4b14      	ldr	r3, [pc, #80]	; (24fb0 <nm_spi_read+0x104>)
   24f60:	0018      	movs	r0, r3
   24f62:	4b11      	ldr	r3, [pc, #68]	; (24fa8 <nm_spi_read+0xfc>)
   24f64:	4798      	blx	r3
		nm_bsp_sleep(1);
   24f66:	2001      	movs	r0, #1
   24f68:	4b12      	ldr	r3, [pc, #72]	; (24fb4 <nm_spi_read+0x108>)
   24f6a:	4798      	blx	r3
		retry--;
   24f6c:	2317      	movs	r3, #23
   24f6e:	18fb      	adds	r3, r7, r3
   24f70:	781a      	ldrb	r2, [r3, #0]
   24f72:	2317      	movs	r3, #23
   24f74:	18fb      	adds	r3, r7, r3
   24f76:	3a01      	subs	r2, #1
   24f78:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24f7a:	2317      	movs	r3, #23
   24f7c:	18fb      	adds	r3, r7, r3
   24f7e:	781b      	ldrb	r3, [r3, #0]
   24f80:	2b00      	cmp	r3, #0
   24f82:	d000      	beq.n	24f86 <nm_spi_read+0xda>
   24f84:	e7a1      	b.n	24eca <nm_spi_read+0x1e>
	}

	return result;
   24f86:	2315      	movs	r3, #21
   24f88:	18fb      	adds	r3, r7, r3
   24f8a:	781b      	ldrb	r3, [r3, #0]
   24f8c:	b25b      	sxtb	r3, r3
}
   24f8e:	0018      	movs	r0, r3
   24f90:	46bd      	mov	sp, r7
   24f92:	b007      	add	sp, #28
   24f94:	bd90      	pop	{r4, r7, pc}
   24f96:	46c0      	nop			; (mov r8, r8)
   24f98:	00023f71 	.word	0x00023f71
   24f9c:	00000472 	.word	0x00000472
   24fa0:	00039c28 	.word	0x00039c28
   24fa4:	000395c0 	.word	0x000395c0
   24fa8:	0001e3f9 	.word	0x0001e3f9
   24fac:	00039a2c 	.word	0x00039a2c
   24fb0:	00039600 	.word	0x00039600
   24fb4:	000208b1 	.word	0x000208b1
   24fb8:	000239f5 	.word	0x000239f5
   24fbc:	00023e35 	.word	0x00023e35
   24fc0:	0000047d 	.word	0x0000047d
   24fc4:	000399cc 	.word	0x000399cc

00024fc8 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   24fc8:	b580      	push	{r7, lr}
   24fca:	b082      	sub	sp, #8
   24fcc:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   24fce:	4b0c      	ldr	r3, [pc, #48]	; (25000 <spi_init_pkt_sz+0x38>)
   24fd0:	0018      	movs	r0, r3
   24fd2:	4b0c      	ldr	r3, [pc, #48]	; (25004 <spi_init_pkt_sz+0x3c>)
   24fd4:	4798      	blx	r3
   24fd6:	0003      	movs	r3, r0
   24fd8:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   24fda:	687b      	ldr	r3, [r7, #4]
   24fdc:	2270      	movs	r2, #112	; 0x70
   24fde:	4393      	bics	r3, r2
   24fe0:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   24fe2:	687b      	ldr	r3, [r7, #4]
   24fe4:	2250      	movs	r2, #80	; 0x50
   24fe6:	4313      	orrs	r3, r2
   24fe8:	607b      	str	r3, [r7, #4]
   24fea:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   24fec:	687b      	ldr	r3, [r7, #4]
   24fee:	4a04      	ldr	r2, [pc, #16]	; (25000 <spi_init_pkt_sz+0x38>)
   24ff0:	0019      	movs	r1, r3
   24ff2:	0010      	movs	r0, r2
   24ff4:	4b04      	ldr	r3, [pc, #16]	; (25008 <spi_init_pkt_sz+0x40>)
   24ff6:	4798      	blx	r3
}
   24ff8:	46c0      	nop			; (mov r8, r8)
   24ffa:	46bd      	mov	sp, r7
   24ffc:	b002      	add	sp, #8
   24ffe:	bd80      	pop	{r7, pc}
   25000:	0000e824 	.word	0x0000e824
   25004:	000251a1 	.word	0x000251a1
   25008:	00025215 	.word	0x00025215

0002500c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   2500c:	b590      	push	{r4, r7, lr}
   2500e:	b083      	sub	sp, #12
   25010:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25012:	2300      	movs	r3, #0
   25014:	9300      	str	r3, [sp, #0]
   25016:	2300      	movs	r3, #0
   25018:	2200      	movs	r2, #0
   2501a:	2100      	movs	r1, #0
   2501c:	20cf      	movs	r0, #207	; 0xcf
   2501e:	4c05      	ldr	r4, [pc, #20]	; (25034 <nm_spi_reset+0x28>)
   25020:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   25022:	20cf      	movs	r0, #207	; 0xcf
   25024:	4b04      	ldr	r3, [pc, #16]	; (25038 <nm_spi_reset+0x2c>)
   25026:	4798      	blx	r3
	return M2M_SUCCESS;
   25028:	2300      	movs	r3, #0
}
   2502a:	0018      	movs	r0, r3
   2502c:	46bd      	mov	sp, r7
   2502e:	b001      	add	sp, #4
   25030:	bd90      	pop	{r4, r7, pc}
   25032:	46c0      	nop			; (mov r8, r8)
   25034:	000239f5 	.word	0x000239f5
   25038:	00023e35 	.word	0x00023e35

0002503c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   2503c:	b580      	push	{r7, lr}
   2503e:	b082      	sub	sp, #8
   25040:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   25042:	2300      	movs	r3, #0
   25044:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   25046:	4b40      	ldr	r3, [pc, #256]	; (25148 <nm_spi_init+0x10c>)
   25048:	2200      	movs	r2, #0
   2504a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   2504c:	003b      	movs	r3, r7
   2504e:	4a3f      	ldr	r2, [pc, #252]	; (2514c <nm_spi_init+0x110>)
   25050:	0019      	movs	r1, r3
   25052:	0010      	movs	r0, r2
   25054:	4b3e      	ldr	r3, [pc, #248]	; (25150 <nm_spi_init+0x114>)
   25056:	4798      	blx	r3
   25058:	1e03      	subs	r3, r0, #0
   2505a:	d129      	bne.n	250b0 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   2505c:	4b3a      	ldr	r3, [pc, #232]	; (25148 <nm_spi_init+0x10c>)
   2505e:	2201      	movs	r2, #1
   25060:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   25062:	2398      	movs	r3, #152	; 0x98
   25064:	00da      	lsls	r2, r3, #3
   25066:	493b      	ldr	r1, [pc, #236]	; (25154 <nm_spi_init+0x118>)
   25068:	4b3b      	ldr	r3, [pc, #236]	; (25158 <nm_spi_init+0x11c>)
   2506a:	0018      	movs	r0, r3
   2506c:	4b3b      	ldr	r3, [pc, #236]	; (2515c <nm_spi_init+0x120>)
   2506e:	4798      	blx	r3
   25070:	4b3b      	ldr	r3, [pc, #236]	; (25160 <nm_spi_init+0x124>)
   25072:	0018      	movs	r0, r3
   25074:	4b39      	ldr	r3, [pc, #228]	; (2515c <nm_spi_init+0x120>)
   25076:	4798      	blx	r3
   25078:	4b3a      	ldr	r3, [pc, #232]	; (25164 <nm_spi_init+0x128>)
   2507a:	0018      	movs	r0, r3
   2507c:	4b37      	ldr	r3, [pc, #220]	; (2515c <nm_spi_init+0x120>)
   2507e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   25080:	003b      	movs	r3, r7
   25082:	4a32      	ldr	r2, [pc, #200]	; (2514c <nm_spi_init+0x110>)
   25084:	0019      	movs	r1, r3
   25086:	0010      	movs	r0, r2
   25088:	4b31      	ldr	r3, [pc, #196]	; (25150 <nm_spi_init+0x114>)
   2508a:	4798      	blx	r3
   2508c:	1e03      	subs	r3, r0, #0
   2508e:	d10f      	bne.n	250b0 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   25090:	4a35      	ldr	r2, [pc, #212]	; (25168 <nm_spi_init+0x12c>)
   25092:	4930      	ldr	r1, [pc, #192]	; (25154 <nm_spi_init+0x118>)
   25094:	4b30      	ldr	r3, [pc, #192]	; (25158 <nm_spi_init+0x11c>)
   25096:	0018      	movs	r0, r3
   25098:	4b30      	ldr	r3, [pc, #192]	; (2515c <nm_spi_init+0x120>)
   2509a:	4798      	blx	r3
   2509c:	4b33      	ldr	r3, [pc, #204]	; (2516c <nm_spi_init+0x130>)
   2509e:	0018      	movs	r0, r3
   250a0:	4b2e      	ldr	r3, [pc, #184]	; (2515c <nm_spi_init+0x120>)
   250a2:	4798      	blx	r3
   250a4:	4b2f      	ldr	r3, [pc, #188]	; (25164 <nm_spi_init+0x128>)
   250a6:	0018      	movs	r0, r3
   250a8:	4b2c      	ldr	r3, [pc, #176]	; (2515c <nm_spi_init+0x120>)
   250aa:	4798      	blx	r3
			return 0;
   250ac:	2300      	movs	r3, #0
   250ae:	e047      	b.n	25140 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   250b0:	4b25      	ldr	r3, [pc, #148]	; (25148 <nm_spi_init+0x10c>)
   250b2:	781b      	ldrb	r3, [r3, #0]
   250b4:	2b00      	cmp	r3, #0
   250b6:	d126      	bne.n	25106 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   250b8:	683b      	ldr	r3, [r7, #0]
   250ba:	220c      	movs	r2, #12
   250bc:	4393      	bics	r3, r2
   250be:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   250c0:	683b      	ldr	r3, [r7, #0]
   250c2:	2270      	movs	r2, #112	; 0x70
   250c4:	4393      	bics	r3, r2
   250c6:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   250c8:	683b      	ldr	r3, [r7, #0]
   250ca:	2250      	movs	r2, #80	; 0x50
   250cc:	4313      	orrs	r3, r2
   250ce:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   250d0:	683b      	ldr	r3, [r7, #0]
   250d2:	4a1e      	ldr	r2, [pc, #120]	; (2514c <nm_spi_init+0x110>)
   250d4:	0019      	movs	r1, r3
   250d6:	0010      	movs	r0, r2
   250d8:	4b25      	ldr	r3, [pc, #148]	; (25170 <nm_spi_init+0x134>)
   250da:	4798      	blx	r3
   250dc:	1e03      	subs	r3, r0, #0
   250de:	d10f      	bne.n	25100 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   250e0:	4a24      	ldr	r2, [pc, #144]	; (25174 <nm_spi_init+0x138>)
   250e2:	491c      	ldr	r1, [pc, #112]	; (25154 <nm_spi_init+0x118>)
   250e4:	4b1c      	ldr	r3, [pc, #112]	; (25158 <nm_spi_init+0x11c>)
   250e6:	0018      	movs	r0, r3
   250e8:	4b1c      	ldr	r3, [pc, #112]	; (2515c <nm_spi_init+0x120>)
   250ea:	4798      	blx	r3
   250ec:	4b22      	ldr	r3, [pc, #136]	; (25178 <nm_spi_init+0x13c>)
   250ee:	0018      	movs	r0, r3
   250f0:	4b1a      	ldr	r3, [pc, #104]	; (2515c <nm_spi_init+0x120>)
   250f2:	4798      	blx	r3
   250f4:	4b1b      	ldr	r3, [pc, #108]	; (25164 <nm_spi_init+0x128>)
   250f6:	0018      	movs	r0, r3
   250f8:	4b18      	ldr	r3, [pc, #96]	; (2515c <nm_spi_init+0x120>)
   250fa:	4798      	blx	r3
			return 0;
   250fc:	2300      	movs	r3, #0
   250fe:	e01f      	b.n	25140 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   25100:	4b11      	ldr	r3, [pc, #68]	; (25148 <nm_spi_init+0x10c>)
   25102:	2201      	movs	r2, #1
   25104:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   25106:	1d3a      	adds	r2, r7, #4
   25108:	2380      	movs	r3, #128	; 0x80
   2510a:	015b      	lsls	r3, r3, #5
   2510c:	0011      	movs	r1, r2
   2510e:	0018      	movs	r0, r3
   25110:	4b0f      	ldr	r3, [pc, #60]	; (25150 <nm_spi_init+0x114>)
   25112:	4798      	blx	r3
   25114:	1e03      	subs	r3, r0, #0
   25116:	d110      	bne.n	2513a <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   25118:	4a18      	ldr	r2, [pc, #96]	; (2517c <nm_spi_init+0x140>)
   2511a:	490e      	ldr	r1, [pc, #56]	; (25154 <nm_spi_init+0x118>)
   2511c:	4b0e      	ldr	r3, [pc, #56]	; (25158 <nm_spi_init+0x11c>)
   2511e:	0018      	movs	r0, r3
   25120:	4b0e      	ldr	r3, [pc, #56]	; (2515c <nm_spi_init+0x120>)
   25122:	4798      	blx	r3
   25124:	4b16      	ldr	r3, [pc, #88]	; (25180 <nm_spi_init+0x144>)
   25126:	0018      	movs	r0, r3
   25128:	4b0c      	ldr	r3, [pc, #48]	; (2515c <nm_spi_init+0x120>)
   2512a:	4798      	blx	r3
   2512c:	4b0d      	ldr	r3, [pc, #52]	; (25164 <nm_spi_init+0x128>)
   2512e:	0018      	movs	r0, r3
   25130:	4b0a      	ldr	r3, [pc, #40]	; (2515c <nm_spi_init+0x120>)
   25132:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   25134:	2306      	movs	r3, #6
   25136:	425b      	negs	r3, r3
   25138:	e002      	b.n	25140 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   2513a:	4b12      	ldr	r3, [pc, #72]	; (25184 <nm_spi_init+0x148>)
   2513c:	4798      	blx	r3


	return M2M_SUCCESS;
   2513e:	2300      	movs	r3, #0
}
   25140:	0018      	movs	r0, r3
   25142:	46bd      	mov	sp, r7
   25144:	b002      	add	sp, #8
   25146:	bd80      	pop	{r7, pc}
   25148:	200042b0 	.word	0x200042b0
   2514c:	0000e824 	.word	0x0000e824
   25150:	00024d35 	.word	0x00024d35
   25154:	00039c34 	.word	0x00039c34
   25158:	000395c0 	.word	0x000395c0
   2515c:	0001e3f9 	.word	0x0001e3f9
   25160:	00039a5c 	.word	0x00039a5c
   25164:	00039600 	.word	0x00039600
   25168:	000004c3 	.word	0x000004c3
   2516c:	00039aac 	.word	0x00039aac
   25170:	00024a3d 	.word	0x00024a3d
   25174:	000004cd 	.word	0x000004cd
   25178:	00039adc 	.word	0x00039adc
   2517c:	000004d7 	.word	0x000004d7
   25180:	00039b10 	.word	0x00039b10
   25184:	00024fc9 	.word	0x00024fc9

00025188 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   25188:	b580      	push	{r7, lr}
   2518a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   2518c:	4b03      	ldr	r3, [pc, #12]	; (2519c <nm_spi_deinit+0x14>)
   2518e:	2200      	movs	r2, #0
   25190:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   25192:	2300      	movs	r3, #0
}
   25194:	0018      	movs	r0, r3
   25196:	46bd      	mov	sp, r7
   25198:	bd80      	pop	{r7, pc}
   2519a:	46c0      	nop			; (mov r8, r8)
   2519c:	200042b0 	.word	0x200042b0

000251a0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   251a0:	b580      	push	{r7, lr}
   251a2:	b084      	sub	sp, #16
   251a4:	af00      	add	r7, sp, #0
   251a6:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   251a8:	230c      	movs	r3, #12
   251aa:	18fa      	adds	r2, r7, r3
   251ac:	687b      	ldr	r3, [r7, #4]
   251ae:	0011      	movs	r1, r2
   251b0:	0018      	movs	r0, r3
   251b2:	4b03      	ldr	r3, [pc, #12]	; (251c0 <nm_spi_read_reg+0x20>)
   251b4:	4798      	blx	r3

	return u32Val;
   251b6:	68fb      	ldr	r3, [r7, #12]
}
   251b8:	0018      	movs	r0, r3
   251ba:	46bd      	mov	sp, r7
   251bc:	b004      	add	sp, #16
   251be:	bd80      	pop	{r7, pc}
   251c0:	00024d35 	.word	0x00024d35

000251c4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   251c4:	b590      	push	{r4, r7, lr}
   251c6:	b085      	sub	sp, #20
   251c8:	af00      	add	r7, sp, #0
   251ca:	6078      	str	r0, [r7, #4]
   251cc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   251ce:	230f      	movs	r3, #15
   251d0:	18fc      	adds	r4, r7, r3
   251d2:	683a      	ldr	r2, [r7, #0]
   251d4:	687b      	ldr	r3, [r7, #4]
   251d6:	0011      	movs	r1, r2
   251d8:	0018      	movs	r0, r3
   251da:	4b0d      	ldr	r3, [pc, #52]	; (25210 <nm_spi_read_reg_with_ret+0x4c>)
   251dc:	4798      	blx	r3
   251de:	0003      	movs	r3, r0
   251e0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   251e2:	230f      	movs	r3, #15
   251e4:	18fb      	adds	r3, r7, r3
   251e6:	781b      	ldrb	r3, [r3, #0]
   251e8:	b25b      	sxtb	r3, r3
   251ea:	2b01      	cmp	r3, #1
   251ec:	d104      	bne.n	251f8 <nm_spi_read_reg_with_ret+0x34>
   251ee:	230f      	movs	r3, #15
   251f0:	18fb      	adds	r3, r7, r3
   251f2:	2200      	movs	r2, #0
   251f4:	701a      	strb	r2, [r3, #0]
   251f6:	e003      	b.n	25200 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   251f8:	230f      	movs	r3, #15
   251fa:	18fb      	adds	r3, r7, r3
   251fc:	22fa      	movs	r2, #250	; 0xfa
   251fe:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25200:	230f      	movs	r3, #15
   25202:	18fb      	adds	r3, r7, r3
   25204:	781b      	ldrb	r3, [r3, #0]
   25206:	b25b      	sxtb	r3, r3
}
   25208:	0018      	movs	r0, r3
   2520a:	46bd      	mov	sp, r7
   2520c:	b005      	add	sp, #20
   2520e:	bd90      	pop	{r4, r7, pc}
   25210:	00024d35 	.word	0x00024d35

00025214 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   25214:	b590      	push	{r4, r7, lr}
   25216:	b085      	sub	sp, #20
   25218:	af00      	add	r7, sp, #0
   2521a:	6078      	str	r0, [r7, #4]
   2521c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   2521e:	230f      	movs	r3, #15
   25220:	18fc      	adds	r4, r7, r3
   25222:	683a      	ldr	r2, [r7, #0]
   25224:	687b      	ldr	r3, [r7, #4]
   25226:	0011      	movs	r1, r2
   25228:	0018      	movs	r0, r3
   2522a:	4b0d      	ldr	r3, [pc, #52]	; (25260 <nm_spi_write_reg+0x4c>)
   2522c:	4798      	blx	r3
   2522e:	0003      	movs	r3, r0
   25230:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25232:	230f      	movs	r3, #15
   25234:	18fb      	adds	r3, r7, r3
   25236:	781b      	ldrb	r3, [r3, #0]
   25238:	b25b      	sxtb	r3, r3
   2523a:	2b01      	cmp	r3, #1
   2523c:	d104      	bne.n	25248 <nm_spi_write_reg+0x34>
   2523e:	230f      	movs	r3, #15
   25240:	18fb      	adds	r3, r7, r3
   25242:	2200      	movs	r2, #0
   25244:	701a      	strb	r2, [r3, #0]
   25246:	e003      	b.n	25250 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25248:	230f      	movs	r3, #15
   2524a:	18fb      	adds	r3, r7, r3
   2524c:	22fa      	movs	r2, #250	; 0xfa
   2524e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25250:	230f      	movs	r3, #15
   25252:	18fb      	adds	r3, r7, r3
   25254:	781b      	ldrb	r3, [r3, #0]
   25256:	b25b      	sxtb	r3, r3
}
   25258:	0018      	movs	r0, r3
   2525a:	46bd      	mov	sp, r7
   2525c:	b005      	add	sp, #20
   2525e:	bd90      	pop	{r4, r7, pc}
   25260:	00024a3d 	.word	0x00024a3d

00025264 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25264:	b590      	push	{r4, r7, lr}
   25266:	b087      	sub	sp, #28
   25268:	af00      	add	r7, sp, #0
   2526a:	60f8      	str	r0, [r7, #12]
   2526c:	60b9      	str	r1, [r7, #8]
   2526e:	1dbb      	adds	r3, r7, #6
   25270:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   25272:	2317      	movs	r3, #23
   25274:	18fc      	adds	r4, r7, r3
   25276:	1dbb      	adds	r3, r7, #6
   25278:	881a      	ldrh	r2, [r3, #0]
   2527a:	68b9      	ldr	r1, [r7, #8]
   2527c:	68fb      	ldr	r3, [r7, #12]
   2527e:	0018      	movs	r0, r3
   25280:	4b0d      	ldr	r3, [pc, #52]	; (252b8 <nm_spi_read_block+0x54>)
   25282:	4798      	blx	r3
   25284:	0003      	movs	r3, r0
   25286:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25288:	2317      	movs	r3, #23
   2528a:	18fb      	adds	r3, r7, r3
   2528c:	781b      	ldrb	r3, [r3, #0]
   2528e:	b25b      	sxtb	r3, r3
   25290:	2b01      	cmp	r3, #1
   25292:	d104      	bne.n	2529e <nm_spi_read_block+0x3a>
   25294:	2317      	movs	r3, #23
   25296:	18fb      	adds	r3, r7, r3
   25298:	2200      	movs	r2, #0
   2529a:	701a      	strb	r2, [r3, #0]
   2529c:	e003      	b.n	252a6 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2529e:	2317      	movs	r3, #23
   252a0:	18fb      	adds	r3, r7, r3
   252a2:	22fa      	movs	r2, #250	; 0xfa
   252a4:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   252a6:	2317      	movs	r3, #23
   252a8:	18fb      	adds	r3, r7, r3
   252aa:	781b      	ldrb	r3, [r3, #0]
   252ac:	b25b      	sxtb	r3, r3
}
   252ae:	0018      	movs	r0, r3
   252b0:	46bd      	mov	sp, r7
   252b2:	b007      	add	sp, #28
   252b4:	bd90      	pop	{r4, r7, pc}
   252b6:	46c0      	nop			; (mov r8, r8)
   252b8:	00024ead 	.word	0x00024ead

000252bc <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   252bc:	b590      	push	{r4, r7, lr}
   252be:	b087      	sub	sp, #28
   252c0:	af00      	add	r7, sp, #0
   252c2:	60f8      	str	r0, [r7, #12]
   252c4:	60b9      	str	r1, [r7, #8]
   252c6:	1dbb      	adds	r3, r7, #6
   252c8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   252ca:	2317      	movs	r3, #23
   252cc:	18fc      	adds	r4, r7, r3
   252ce:	1dbb      	adds	r3, r7, #6
   252d0:	881a      	ldrh	r2, [r3, #0]
   252d2:	68b9      	ldr	r1, [r7, #8]
   252d4:	68fb      	ldr	r3, [r7, #12]
   252d6:	0018      	movs	r0, r3
   252d8:	4b0d      	ldr	r3, [pc, #52]	; (25310 <nm_spi_write_block+0x54>)
   252da:	4798      	blx	r3
   252dc:	0003      	movs	r3, r0
   252de:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   252e0:	2317      	movs	r3, #23
   252e2:	18fb      	adds	r3, r7, r3
   252e4:	781b      	ldrb	r3, [r3, #0]
   252e6:	b25b      	sxtb	r3, r3
   252e8:	2b01      	cmp	r3, #1
   252ea:	d104      	bne.n	252f6 <nm_spi_write_block+0x3a>
   252ec:	2317      	movs	r3, #23
   252ee:	18fb      	adds	r3, r7, r3
   252f0:	2200      	movs	r2, #0
   252f2:	701a      	strb	r2, [r3, #0]
   252f4:	e003      	b.n	252fe <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   252f6:	2317      	movs	r3, #23
   252f8:	18fb      	adds	r3, r7, r3
   252fa:	22fa      	movs	r2, #250	; 0xfa
   252fc:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   252fe:	2317      	movs	r3, #23
   25300:	18fb      	adds	r3, r7, r3
   25302:	781b      	ldrb	r3, [r3, #0]
   25304:	b25b      	sxtb	r3, r3
}
   25306:	0018      	movs	r0, r3
   25308:	46bd      	mov	sp, r7
   2530a:	b007      	add	sp, #28
   2530c:	bd90      	pop	{r4, r7, pc}
   2530e:	46c0      	nop			; (mov r8, r8)
   25310:	00024b89 	.word	0x00024b89

00025314 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   25314:	b590      	push	{r4, r7, lr}
   25316:	b089      	sub	sp, #36	; 0x24
   25318:	af00      	add	r7, sp, #0
   2531a:	60b9      	str	r1, [r7, #8]
   2531c:	0011      	movs	r1, r2
   2531e:	607b      	str	r3, [r7, #4]
   25320:	230f      	movs	r3, #15
   25322:	18fb      	adds	r3, r7, r3
   25324:	1c02      	adds	r2, r0, #0
   25326:	701a      	strb	r2, [r3, #0]
   25328:	230e      	movs	r3, #14
   2532a:	18fb      	adds	r3, r7, r3
   2532c:	1c0a      	adds	r2, r1, #0
   2532e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   25330:	2330      	movs	r3, #48	; 0x30
   25332:	18fb      	adds	r3, r7, r3
   25334:	881b      	ldrh	r3, [r3, #0]
   25336:	2b00      	cmp	r3, #0
   25338:	d100      	bne.n	2533c <Socket_ReadSocketData+0x28>
   2533a:	e0d7      	b.n	254ec <Socket_ReadSocketData+0x1d8>
   2533c:	230f      	movs	r3, #15
   2533e:	18fb      	adds	r3, r7, r3
   25340:	2200      	movs	r2, #0
   25342:	569a      	ldrsb	r2, [r3, r2]
   25344:	4b6b      	ldr	r3, [pc, #428]	; (254f4 <Socket_ReadSocketData+0x1e0>)
   25346:	0112      	lsls	r2, r2, #4
   25348:	58d3      	ldr	r3, [r2, r3]
   2534a:	2b00      	cmp	r3, #0
   2534c:	d100      	bne.n	25350 <Socket_ReadSocketData+0x3c>
   2534e:	e0cd      	b.n	254ec <Socket_ReadSocketData+0x1d8>
   25350:	230f      	movs	r3, #15
   25352:	18fb      	adds	r3, r7, r3
   25354:	781b      	ldrb	r3, [r3, #0]
   25356:	b25b      	sxtb	r3, r3
   25358:	4a66      	ldr	r2, [pc, #408]	; (254f4 <Socket_ReadSocketData+0x1e0>)
   2535a:	011b      	lsls	r3, r3, #4
   2535c:	18d3      	adds	r3, r2, r3
   2535e:	3304      	adds	r3, #4
   25360:	881b      	ldrh	r3, [r3, #0]
   25362:	b29b      	uxth	r3, r3
   25364:	2b00      	cmp	r3, #0
   25366:	d100      	bne.n	2536a <Socket_ReadSocketData+0x56>
   25368:	e0c0      	b.n	254ec <Socket_ReadSocketData+0x1d8>
   2536a:	230f      	movs	r3, #15
   2536c:	18fb      	adds	r3, r7, r3
   2536e:	781b      	ldrb	r3, [r3, #0]
   25370:	b25b      	sxtb	r3, r3
   25372:	4a60      	ldr	r2, [pc, #384]	; (254f4 <Socket_ReadSocketData+0x1e0>)
   25374:	011b      	lsls	r3, r3, #4
   25376:	18d3      	adds	r3, r2, r3
   25378:	330a      	adds	r3, #10
   2537a:	781b      	ldrb	r3, [r3, #0]
   2537c:	b2db      	uxtb	r3, r3
   2537e:	2b01      	cmp	r3, #1
   25380:	d000      	beq.n	25384 <Socket_ReadSocketData+0x70>
   25382:	e0b3      	b.n	254ec <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   25384:	687b      	ldr	r3, [r7, #4]
   25386:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   25388:	68bb      	ldr	r3, [r7, #8]
   2538a:	2230      	movs	r2, #48	; 0x30
   2538c:	18ba      	adds	r2, r7, r2
   2538e:	8812      	ldrh	r2, [r2, #0]
   25390:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   25392:	2319      	movs	r3, #25
   25394:	18fb      	adds	r3, r7, r3
   25396:	2201      	movs	r2, #1
   25398:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   2539a:	231a      	movs	r3, #26
   2539c:	18fb      	adds	r3, r7, r3
   2539e:	2230      	movs	r2, #48	; 0x30
   253a0:	18ba      	adds	r2, r7, r2
   253a2:	8812      	ldrh	r2, [r2, #0]
   253a4:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   253a6:	230f      	movs	r3, #15
   253a8:	18fb      	adds	r3, r7, r3
   253aa:	781b      	ldrb	r3, [r3, #0]
   253ac:	b25b      	sxtb	r3, r3
   253ae:	4a51      	ldr	r2, [pc, #324]	; (254f4 <Socket_ReadSocketData+0x1e0>)
   253b0:	011b      	lsls	r3, r3, #4
   253b2:	18d3      	adds	r3, r2, r3
   253b4:	3304      	adds	r3, #4
   253b6:	881b      	ldrh	r3, [r3, #0]
   253b8:	b29b      	uxth	r3, r3
   253ba:	221a      	movs	r2, #26
   253bc:	18ba      	adds	r2, r7, r2
   253be:	8812      	ldrh	r2, [r2, #0]
   253c0:	1ad3      	subs	r3, r2, r3
   253c2:	b29a      	uxth	r2, r3
   253c4:	2316      	movs	r3, #22
   253c6:	18fb      	adds	r3, r7, r3
   253c8:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   253ca:	2316      	movs	r3, #22
   253cc:	18fb      	adds	r3, r7, r3
   253ce:	2200      	movs	r2, #0
   253d0:	5e9b      	ldrsh	r3, [r3, r2]
   253d2:	2b00      	cmp	r3, #0
   253d4:	dd0f      	ble.n	253f6 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   253d6:	2319      	movs	r3, #25
   253d8:	18fb      	adds	r3, r7, r3
   253da:	2200      	movs	r2, #0
   253dc:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   253de:	230f      	movs	r3, #15
   253e0:	18fb      	adds	r3, r7, r3
   253e2:	2200      	movs	r2, #0
   253e4:	569a      	ldrsb	r2, [r3, r2]
   253e6:	231a      	movs	r3, #26
   253e8:	18fb      	adds	r3, r7, r3
   253ea:	4942      	ldr	r1, [pc, #264]	; (254f4 <Socket_ReadSocketData+0x1e0>)
   253ec:	0112      	lsls	r2, r2, #4
   253ee:	188a      	adds	r2, r1, r2
   253f0:	3204      	adds	r2, #4
   253f2:	8812      	ldrh	r2, [r2, #0]
   253f4:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   253f6:	230f      	movs	r3, #15
   253f8:	18fb      	adds	r3, r7, r3
   253fa:	2200      	movs	r2, #0
   253fc:	569a      	ldrsb	r2, [r3, r2]
   253fe:	4b3d      	ldr	r3, [pc, #244]	; (254f4 <Socket_ReadSocketData+0x1e0>)
   25400:	0112      	lsls	r2, r2, #4
   25402:	58d1      	ldr	r1, [r2, r3]
   25404:	2319      	movs	r3, #25
   25406:	18fb      	adds	r3, r7, r3
   25408:	781c      	ldrb	r4, [r3, #0]
   2540a:	231a      	movs	r3, #26
   2540c:	18fb      	adds	r3, r7, r3
   2540e:	881a      	ldrh	r2, [r3, #0]
   25410:	69f8      	ldr	r0, [r7, #28]
   25412:	0023      	movs	r3, r4
   25414:	4c38      	ldr	r4, [pc, #224]	; (254f8 <Socket_ReadSocketData+0x1e4>)
   25416:	47a0      	blx	r4
   25418:	1e03      	subs	r3, r0, #0
   2541a:	d14f      	bne.n	254bc <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   2541c:	230f      	movs	r3, #15
   2541e:	18fb      	adds	r3, r7, r3
   25420:	2200      	movs	r2, #0
   25422:	569a      	ldrsb	r2, [r3, r2]
   25424:	4b33      	ldr	r3, [pc, #204]	; (254f4 <Socket_ReadSocketData+0x1e0>)
   25426:	0112      	lsls	r2, r2, #4
   25428:	58d2      	ldr	r2, [r2, r3]
   2542a:	68bb      	ldr	r3, [r7, #8]
   2542c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   2542e:	231a      	movs	r3, #26
   25430:	18fb      	adds	r3, r7, r3
   25432:	2200      	movs	r2, #0
   25434:	5e9a      	ldrsh	r2, [r3, r2]
   25436:	68bb      	ldr	r3, [r7, #8]
   25438:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   2543a:	68bb      	ldr	r3, [r7, #8]
   2543c:	88da      	ldrh	r2, [r3, #6]
   2543e:	231a      	movs	r3, #26
   25440:	18fb      	adds	r3, r7, r3
   25442:	881b      	ldrh	r3, [r3, #0]
   25444:	1ad3      	subs	r3, r2, r3
   25446:	b29a      	uxth	r2, r3
   25448:	68bb      	ldr	r3, [r7, #8]
   2544a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   2544c:	4b2b      	ldr	r3, [pc, #172]	; (254fc <Socket_ReadSocketData+0x1e8>)
   2544e:	681b      	ldr	r3, [r3, #0]
   25450:	2b00      	cmp	r3, #0
   25452:	d00b      	beq.n	2546c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   25454:	4b29      	ldr	r3, [pc, #164]	; (254fc <Socket_ReadSocketData+0x1e8>)
   25456:	681b      	ldr	r3, [r3, #0]
   25458:	68bc      	ldr	r4, [r7, #8]
   2545a:	220e      	movs	r2, #14
   2545c:	18ba      	adds	r2, r7, r2
   2545e:	7811      	ldrb	r1, [r2, #0]
   25460:	220f      	movs	r2, #15
   25462:	18ba      	adds	r2, r7, r2
   25464:	2000      	movs	r0, #0
   25466:	5610      	ldrsb	r0, [r2, r0]
   25468:	0022      	movs	r2, r4
   2546a:	4798      	blx	r3

				u16ReadCount -= u16Read;
   2546c:	2330      	movs	r3, #48	; 0x30
   2546e:	18f9      	adds	r1, r7, r3
   25470:	2330      	movs	r3, #48	; 0x30
   25472:	18fa      	adds	r2, r7, r3
   25474:	231a      	movs	r3, #26
   25476:	18fb      	adds	r3, r7, r3
   25478:	8812      	ldrh	r2, [r2, #0]
   2547a:	881b      	ldrh	r3, [r3, #0]
   2547c:	1ad3      	subs	r3, r2, r3
   2547e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   25480:	231a      	movs	r3, #26
   25482:	18fb      	adds	r3, r7, r3
   25484:	881b      	ldrh	r3, [r3, #0]
   25486:	69fa      	ldr	r2, [r7, #28]
   25488:	18d3      	adds	r3, r2, r3
   2548a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   2548c:	230f      	movs	r3, #15
   2548e:	18fb      	adds	r3, r7, r3
   25490:	781b      	ldrb	r3, [r3, #0]
   25492:	b25b      	sxtb	r3, r3
   25494:	4a17      	ldr	r2, [pc, #92]	; (254f4 <Socket_ReadSocketData+0x1e0>)
   25496:	011b      	lsls	r3, r3, #4
   25498:	18d3      	adds	r3, r2, r3
   2549a:	330a      	adds	r3, #10
   2549c:	781b      	ldrb	r3, [r3, #0]
   2549e:	b2db      	uxtb	r3, r3
   254a0:	2b00      	cmp	r3, #0
   254a2:	d11c      	bne.n	254de <Socket_ReadSocketData+0x1ca>
   254a4:	2330      	movs	r3, #48	; 0x30
   254a6:	18fb      	adds	r3, r7, r3
   254a8:	881b      	ldrh	r3, [r3, #0]
   254aa:	2b00      	cmp	r3, #0
   254ac:	d017      	beq.n	254de <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   254ae:	2301      	movs	r3, #1
   254b0:	2200      	movs	r2, #0
   254b2:	2100      	movs	r1, #0
   254b4:	2000      	movs	r0, #0
   254b6:	4c10      	ldr	r4, [pc, #64]	; (254f8 <Socket_ReadSocketData+0x1e4>)
   254b8:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   254ba:	e017      	b.n	254ec <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   254bc:	4b10      	ldr	r3, [pc, #64]	; (25500 <Socket_ReadSocketData+0x1ec>)
   254be:	0018      	movs	r0, r3
   254c0:	4b10      	ldr	r3, [pc, #64]	; (25504 <Socket_ReadSocketData+0x1f0>)
   254c2:	4798      	blx	r3
   254c4:	2330      	movs	r3, #48	; 0x30
   254c6:	18fb      	adds	r3, r7, r3
   254c8:	881a      	ldrh	r2, [r3, #0]
   254ca:	4b0f      	ldr	r3, [pc, #60]	; (25508 <Socket_ReadSocketData+0x1f4>)
   254cc:	0011      	movs	r1, r2
   254ce:	0018      	movs	r0, r3
   254d0:	4b0c      	ldr	r3, [pc, #48]	; (25504 <Socket_ReadSocketData+0x1f0>)
   254d2:	4798      	blx	r3
   254d4:	4b0d      	ldr	r3, [pc, #52]	; (2550c <Socket_ReadSocketData+0x1f8>)
   254d6:	0018      	movs	r0, r3
   254d8:	4b0a      	ldr	r3, [pc, #40]	; (25504 <Socket_ReadSocketData+0x1f0>)
   254da:	4798      	blx	r3
				break;
   254dc:	e006      	b.n	254ec <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   254de:	2330      	movs	r3, #48	; 0x30
   254e0:	18fb      	adds	r3, r7, r3
   254e2:	881b      	ldrh	r3, [r3, #0]
   254e4:	2b00      	cmp	r3, #0
   254e6:	d000      	beq.n	254ea <Socket_ReadSocketData+0x1d6>
   254e8:	e753      	b.n	25392 <Socket_ReadSocketData+0x7e>
	}
}
   254ea:	e7ff      	b.n	254ec <Socket_ReadSocketData+0x1d8>
   254ec:	46c0      	nop			; (mov r8, r8)
   254ee:	46bd      	mov	sp, r7
   254f0:	b009      	add	sp, #36	; 0x24
   254f2:	bd90      	pop	{r4, r7, pc}
   254f4:	20005b04 	.word	0x20005b04
   254f8:	00021d0d 	.word	0x00021d0d
   254fc:	20005bb4 	.word	0x20005bb4
   25500:	00039c40 	.word	0x00039c40
   25504:	0001e3f9 	.word	0x0001e3f9
   25508:	00039c4c 	.word	0x00039c4c
   2550c:	00039c60 	.word	0x00039c60

00025510 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   25510:	b590      	push	{r4, r7, lr}
   25512:	b0bb      	sub	sp, #236	; 0xec
   25514:	af02      	add	r7, sp, #8
   25516:	603a      	str	r2, [r7, #0]
   25518:	1dfb      	adds	r3, r7, #7
   2551a:	1c02      	adds	r2, r0, #0
   2551c:	701a      	strb	r2, [r3, #0]
   2551e:	1d3b      	adds	r3, r7, #4
   25520:	1c0a      	adds	r2, r1, #0
   25522:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   25524:	1dfb      	adds	r3, r7, #7
   25526:	781b      	ldrb	r3, [r3, #0]
   25528:	2b41      	cmp	r3, #65	; 0x41
   2552a:	d003      	beq.n	25534 <m2m_ip_cb+0x24>
   2552c:	1dfb      	adds	r3, r7, #7
   2552e:	781b      	ldrb	r3, [r3, #0]
   25530:	2b54      	cmp	r3, #84	; 0x54
   25532:	d120      	bne.n	25576 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   25534:	23cc      	movs	r3, #204	; 0xcc
   25536:	18f9      	adds	r1, r7, r3
   25538:	6838      	ldr	r0, [r7, #0]
   2553a:	2300      	movs	r3, #0
   2553c:	2204      	movs	r2, #4
   2553e:	4c98      	ldr	r4, [pc, #608]	; (257a0 <m2m_ip_cb+0x290>)
   25540:	47a0      	blx	r4
   25542:	1e03      	subs	r3, r0, #0
   25544:	d000      	beq.n	25548 <m2m_ip_cb+0x38>
   25546:	e275      	b.n	25a34 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   25548:	23cc      	movs	r3, #204	; 0xcc
   2554a:	18fb      	adds	r3, r7, r3
   2554c:	2201      	movs	r2, #1
   2554e:	569a      	ldrsb	r2, [r3, r2]
   25550:	23c8      	movs	r3, #200	; 0xc8
   25552:	18fb      	adds	r3, r7, r3
   25554:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25556:	4b93      	ldr	r3, [pc, #588]	; (257a4 <m2m_ip_cb+0x294>)
   25558:	681b      	ldr	r3, [r3, #0]
   2555a:	2b00      	cmp	r3, #0
   2555c:	d100      	bne.n	25560 <m2m_ip_cb+0x50>
   2555e:	e269      	b.n	25a34 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   25560:	4b90      	ldr	r3, [pc, #576]	; (257a4 <m2m_ip_cb+0x294>)
   25562:	681b      	ldr	r3, [r3, #0]
   25564:	22cc      	movs	r2, #204	; 0xcc
   25566:	18ba      	adds	r2, r7, r2
   25568:	2000      	movs	r0, #0
   2556a:	5610      	ldrsb	r0, [r2, r0]
   2556c:	22c8      	movs	r2, #200	; 0xc8
   2556e:	18ba      	adds	r2, r7, r2
   25570:	2101      	movs	r1, #1
   25572:	4798      	blx	r3
	{
   25574:	e25e      	b.n	25a34 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   25576:	1dfb      	adds	r3, r7, #7
   25578:	781b      	ldrb	r3, [r3, #0]
   2557a:	2b42      	cmp	r3, #66	; 0x42
   2557c:	d120      	bne.n	255c0 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   2557e:	23c4      	movs	r3, #196	; 0xc4
   25580:	18f9      	adds	r1, r7, r3
   25582:	6838      	ldr	r0, [r7, #0]
   25584:	2300      	movs	r3, #0
   25586:	2204      	movs	r2, #4
   25588:	4c85      	ldr	r4, [pc, #532]	; (257a0 <m2m_ip_cb+0x290>)
   2558a:	47a0      	blx	r4
   2558c:	1e03      	subs	r3, r0, #0
   2558e:	d000      	beq.n	25592 <m2m_ip_cb+0x82>
   25590:	e257      	b.n	25a42 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   25592:	23c4      	movs	r3, #196	; 0xc4
   25594:	18fb      	adds	r3, r7, r3
   25596:	2201      	movs	r2, #1
   25598:	569a      	ldrsb	r2, [r3, r2]
   2559a:	23c0      	movs	r3, #192	; 0xc0
   2559c:	18fb      	adds	r3, r7, r3
   2559e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   255a0:	4b80      	ldr	r3, [pc, #512]	; (257a4 <m2m_ip_cb+0x294>)
   255a2:	681b      	ldr	r3, [r3, #0]
   255a4:	2b00      	cmp	r3, #0
   255a6:	d100      	bne.n	255aa <m2m_ip_cb+0x9a>
   255a8:	e24b      	b.n	25a42 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   255aa:	4b7e      	ldr	r3, [pc, #504]	; (257a4 <m2m_ip_cb+0x294>)
   255ac:	681b      	ldr	r3, [r3, #0]
   255ae:	22c4      	movs	r2, #196	; 0xc4
   255b0:	18ba      	adds	r2, r7, r2
   255b2:	2000      	movs	r0, #0
   255b4:	5610      	ldrsb	r0, [r2, r0]
   255b6:	22c0      	movs	r2, #192	; 0xc0
   255b8:	18ba      	adds	r2, r7, r2
   255ba:	2102      	movs	r1, #2
   255bc:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   255be:	e240      	b.n	25a42 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   255c0:	1dfb      	adds	r3, r7, #7
   255c2:	781b      	ldrb	r3, [r3, #0]
   255c4:	2b43      	cmp	r3, #67	; 0x43
   255c6:	d000      	beq.n	255ca <m2m_ip_cb+0xba>
   255c8:	e086      	b.n	256d8 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   255ca:	23b4      	movs	r3, #180	; 0xb4
   255cc:	18f9      	adds	r1, r7, r3
   255ce:	6838      	ldr	r0, [r7, #0]
   255d0:	2300      	movs	r3, #0
   255d2:	220c      	movs	r2, #12
   255d4:	4c72      	ldr	r4, [pc, #456]	; (257a0 <m2m_ip_cb+0x290>)
   255d6:	47a0      	blx	r4
   255d8:	1e03      	subs	r3, r0, #0
   255da:	d000      	beq.n	255de <m2m_ip_cb+0xce>
   255dc:	e231      	b.n	25a42 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   255de:	23b4      	movs	r3, #180	; 0xb4
   255e0:	18fb      	adds	r3, r7, r3
   255e2:	7a5b      	ldrb	r3, [r3, #9]
   255e4:	b25b      	sxtb	r3, r3
   255e6:	2b00      	cmp	r3, #0
   255e8:	db4f      	blt.n	2568a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   255ea:	23b4      	movs	r3, #180	; 0xb4
   255ec:	18fb      	adds	r3, r7, r3
   255ee:	7a5b      	ldrb	r3, [r3, #9]
   255f0:	b25b      	sxtb	r3, r3
   255f2:	0018      	movs	r0, r3
   255f4:	23b4      	movs	r3, #180	; 0xb4
   255f6:	18fb      	adds	r3, r7, r3
   255f8:	7a1b      	ldrb	r3, [r3, #8]
   255fa:	b25b      	sxtb	r3, r3
   255fc:	4a6a      	ldr	r2, [pc, #424]	; (257a8 <m2m_ip_cb+0x298>)
   255fe:	011b      	lsls	r3, r3, #4
   25600:	18d3      	adds	r3, r2, r3
   25602:	330b      	adds	r3, #11
   25604:	781b      	ldrb	r3, [r3, #0]
   25606:	b2d9      	uxtb	r1, r3
   25608:	4a67      	ldr	r2, [pc, #412]	; (257a8 <m2m_ip_cb+0x298>)
   2560a:	0103      	lsls	r3, r0, #4
   2560c:	18d3      	adds	r3, r2, r3
   2560e:	330b      	adds	r3, #11
   25610:	1c0a      	adds	r2, r1, #0
   25612:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   25614:	23b4      	movs	r3, #180	; 0xb4
   25616:	18fb      	adds	r3, r7, r3
   25618:	7a5b      	ldrb	r3, [r3, #9]
   2561a:	b25b      	sxtb	r3, r3
   2561c:	4a62      	ldr	r2, [pc, #392]	; (257a8 <m2m_ip_cb+0x298>)
   2561e:	011b      	lsls	r3, r3, #4
   25620:	18d3      	adds	r3, r2, r3
   25622:	330a      	adds	r3, #10
   25624:	2201      	movs	r2, #1
   25626:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25628:	23b4      	movs	r3, #180	; 0xb4
   2562a:	18fb      	adds	r3, r7, r3
   2562c:	7a5b      	ldrb	r3, [r3, #9]
   2562e:	b25b      	sxtb	r3, r3
   25630:	0018      	movs	r0, r3
   25632:	23b4      	movs	r3, #180	; 0xb4
   25634:	18fb      	adds	r3, r7, r3
   25636:	895b      	ldrh	r3, [r3, #10]
   25638:	3b08      	subs	r3, #8
   2563a:	b299      	uxth	r1, r3
   2563c:	4a5a      	ldr	r2, [pc, #360]	; (257a8 <m2m_ip_cb+0x298>)
   2563e:	0103      	lsls	r3, r0, #4
   25640:	18d3      	adds	r3, r2, r3
   25642:	3308      	adds	r3, #8
   25644:	1c0a      	adds	r2, r1, #0
   25646:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   25648:	4b58      	ldr	r3, [pc, #352]	; (257ac <m2m_ip_cb+0x29c>)
   2564a:	881b      	ldrh	r3, [r3, #0]
   2564c:	b29b      	uxth	r3, r3
   2564e:	3301      	adds	r3, #1
   25650:	b29a      	uxth	r2, r3
   25652:	4b56      	ldr	r3, [pc, #344]	; (257ac <m2m_ip_cb+0x29c>)
   25654:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   25656:	4b55      	ldr	r3, [pc, #340]	; (257ac <m2m_ip_cb+0x29c>)
   25658:	881b      	ldrh	r3, [r3, #0]
   2565a:	b29b      	uxth	r3, r3
   2565c:	2b00      	cmp	r3, #0
   2565e:	d106      	bne.n	2566e <m2m_ip_cb+0x15e>
					++gu16SessionID;
   25660:	4b52      	ldr	r3, [pc, #328]	; (257ac <m2m_ip_cb+0x29c>)
   25662:	881b      	ldrh	r3, [r3, #0]
   25664:	b29b      	uxth	r3, r3
   25666:	3301      	adds	r3, #1
   25668:	b29a      	uxth	r2, r3
   2566a:	4b50      	ldr	r3, [pc, #320]	; (257ac <m2m_ip_cb+0x29c>)
   2566c:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   2566e:	23b4      	movs	r3, #180	; 0xb4
   25670:	18fb      	adds	r3, r7, r3
   25672:	7a5b      	ldrb	r3, [r3, #9]
   25674:	b25b      	sxtb	r3, r3
   25676:	0018      	movs	r0, r3
   25678:	4b4c      	ldr	r3, [pc, #304]	; (257ac <m2m_ip_cb+0x29c>)
   2567a:	881b      	ldrh	r3, [r3, #0]
   2567c:	b299      	uxth	r1, r3
   2567e:	4a4a      	ldr	r2, [pc, #296]	; (257a8 <m2m_ip_cb+0x298>)
   25680:	0103      	lsls	r3, r0, #4
   25682:	18d3      	adds	r3, r2, r3
   25684:	3306      	adds	r3, #6
   25686:	1c0a      	adds	r2, r1, #0
   25688:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   2568a:	23b4      	movs	r3, #180	; 0xb4
   2568c:	18fb      	adds	r3, r7, r3
   2568e:	2209      	movs	r2, #9
   25690:	569a      	ldrsb	r2, [r3, r2]
   25692:	23a0      	movs	r3, #160	; 0xa0
   25694:	18fb      	adds	r3, r7, r3
   25696:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   25698:	23a0      	movs	r3, #160	; 0xa0
   2569a:	18fb      	adds	r3, r7, r3
   2569c:	2202      	movs	r2, #2
   2569e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   256a0:	23b4      	movs	r3, #180	; 0xb4
   256a2:	18fb      	adds	r3, r7, r3
   256a4:	885a      	ldrh	r2, [r3, #2]
   256a6:	23a0      	movs	r3, #160	; 0xa0
   256a8:	18fb      	adds	r3, r7, r3
   256aa:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   256ac:	23b4      	movs	r3, #180	; 0xb4
   256ae:	18fb      	adds	r3, r7, r3
   256b0:	685a      	ldr	r2, [r3, #4]
   256b2:	23a0      	movs	r3, #160	; 0xa0
   256b4:	18fb      	adds	r3, r7, r3
   256b6:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   256b8:	4b3a      	ldr	r3, [pc, #232]	; (257a4 <m2m_ip_cb+0x294>)
   256ba:	681b      	ldr	r3, [r3, #0]
   256bc:	2b00      	cmp	r3, #0
   256be:	d100      	bne.n	256c2 <m2m_ip_cb+0x1b2>
   256c0:	e1bf      	b.n	25a42 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   256c2:	4b38      	ldr	r3, [pc, #224]	; (257a4 <m2m_ip_cb+0x294>)
   256c4:	681b      	ldr	r3, [r3, #0]
   256c6:	22b4      	movs	r2, #180	; 0xb4
   256c8:	18ba      	adds	r2, r7, r2
   256ca:	2008      	movs	r0, #8
   256cc:	5610      	ldrsb	r0, [r2, r0]
   256ce:	22a0      	movs	r2, #160	; 0xa0
   256d0:	18ba      	adds	r2, r7, r2
   256d2:	2104      	movs	r1, #4
   256d4:	4798      	blx	r3
}
   256d6:	e1b4      	b.n	25a42 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   256d8:	1dfb      	adds	r3, r7, #7
   256da:	781b      	ldrb	r3, [r3, #0]
   256dc:	2b44      	cmp	r3, #68	; 0x44
   256de:	d003      	beq.n	256e8 <m2m_ip_cb+0x1d8>
   256e0:	1dfb      	adds	r3, r7, #7
   256e2:	781b      	ldrb	r3, [r3, #0]
   256e4:	2b4b      	cmp	r3, #75	; 0x4b
   256e6:	d13d      	bne.n	25764 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   256e8:	239c      	movs	r3, #156	; 0x9c
   256ea:	18f9      	adds	r1, r7, r3
   256ec:	6838      	ldr	r0, [r7, #0]
   256ee:	2300      	movs	r3, #0
   256f0:	2204      	movs	r2, #4
   256f2:	4c2b      	ldr	r4, [pc, #172]	; (257a0 <m2m_ip_cb+0x290>)
   256f4:	47a0      	blx	r4
   256f6:	1e03      	subs	r3, r0, #0
   256f8:	d000      	beq.n	256fc <m2m_ip_cb+0x1ec>
   256fa:	e19d      	b.n	25a38 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   256fc:	239c      	movs	r3, #156	; 0x9c
   256fe:	18fb      	adds	r3, r7, r3
   25700:	2200      	movs	r2, #0
   25702:	569a      	ldrsb	r2, [r3, r2]
   25704:	2398      	movs	r3, #152	; 0x98
   25706:	18fb      	adds	r3, r7, r3
   25708:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   2570a:	239c      	movs	r3, #156	; 0x9c
   2570c:	18fb      	adds	r3, r7, r3
   2570e:	2201      	movs	r2, #1
   25710:	569a      	ldrsb	r2, [r3, r2]
   25712:	2398      	movs	r3, #152	; 0x98
   25714:	18fb      	adds	r3, r7, r3
   25716:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   25718:	239c      	movs	r3, #156	; 0x9c
   2571a:	18fb      	adds	r3, r7, r3
   2571c:	785b      	ldrb	r3, [r3, #1]
   2571e:	b25b      	sxtb	r3, r3
   25720:	2b00      	cmp	r3, #0
   25722:	d10f      	bne.n	25744 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25724:	239c      	movs	r3, #156	; 0x9c
   25726:	18fb      	adds	r3, r7, r3
   25728:	781b      	ldrb	r3, [r3, #0]
   2572a:	b25b      	sxtb	r3, r3
   2572c:	0018      	movs	r0, r3
   2572e:	239c      	movs	r3, #156	; 0x9c
   25730:	18fb      	adds	r3, r7, r3
   25732:	885b      	ldrh	r3, [r3, #2]
   25734:	3b08      	subs	r3, #8
   25736:	b299      	uxth	r1, r3
   25738:	4a1b      	ldr	r2, [pc, #108]	; (257a8 <m2m_ip_cb+0x298>)
   2573a:	0103      	lsls	r3, r0, #4
   2573c:	18d3      	adds	r3, r2, r3
   2573e:	3308      	adds	r3, #8
   25740:	1c0a      	adds	r2, r1, #0
   25742:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   25744:	4b17      	ldr	r3, [pc, #92]	; (257a4 <m2m_ip_cb+0x294>)
   25746:	681b      	ldr	r3, [r3, #0]
   25748:	2b00      	cmp	r3, #0
   2574a:	d100      	bne.n	2574e <m2m_ip_cb+0x23e>
   2574c:	e174      	b.n	25a38 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   2574e:	4b15      	ldr	r3, [pc, #84]	; (257a4 <m2m_ip_cb+0x294>)
   25750:	681b      	ldr	r3, [r3, #0]
   25752:	229c      	movs	r2, #156	; 0x9c
   25754:	18ba      	adds	r2, r7, r2
   25756:	2000      	movs	r0, #0
   25758:	5610      	ldrsb	r0, [r2, r0]
   2575a:	2298      	movs	r2, #152	; 0x98
   2575c:	18ba      	adds	r2, r7, r2
   2575e:	2105      	movs	r1, #5
   25760:	4798      	blx	r3
	{
   25762:	e169      	b.n	25a38 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   25764:	1dfb      	adds	r3, r7, #7
   25766:	781b      	ldrb	r3, [r3, #0]
   25768:	2b4a      	cmp	r3, #74	; 0x4a
   2576a:	d123      	bne.n	257b4 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   2576c:	230c      	movs	r3, #12
   2576e:	18f9      	adds	r1, r7, r3
   25770:	6838      	ldr	r0, [r7, #0]
   25772:	2300      	movs	r3, #0
   25774:	2244      	movs	r2, #68	; 0x44
   25776:	4c0a      	ldr	r4, [pc, #40]	; (257a0 <m2m_ip_cb+0x290>)
   25778:	47a0      	blx	r4
   2577a:	1e03      	subs	r3, r0, #0
   2577c:	d000      	beq.n	25780 <m2m_ip_cb+0x270>
   2577e:	e160      	b.n	25a42 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   25780:	4b0b      	ldr	r3, [pc, #44]	; (257b0 <m2m_ip_cb+0x2a0>)
   25782:	681b      	ldr	r3, [r3, #0]
   25784:	2b00      	cmp	r3, #0
   25786:	d100      	bne.n	2578a <m2m_ip_cb+0x27a>
   25788:	e15b      	b.n	25a42 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   2578a:	4b09      	ldr	r3, [pc, #36]	; (257b0 <m2m_ip_cb+0x2a0>)
   2578c:	681a      	ldr	r2, [r3, #0]
   2578e:	230c      	movs	r3, #12
   25790:	18fb      	adds	r3, r7, r3
   25792:	6c19      	ldr	r1, [r3, #64]	; 0x40
   25794:	230c      	movs	r3, #12
   25796:	18fb      	adds	r3, r7, r3
   25798:	0018      	movs	r0, r3
   2579a:	4790      	blx	r2
}
   2579c:	e151      	b.n	25a42 <m2m_ip_cb+0x532>
   2579e:	46c0      	nop			; (mov r8, r8)
   257a0:	00021d0d 	.word	0x00021d0d
   257a4:	20005bb4 	.word	0x20005bb4
   257a8:	20005b04 	.word	0x20005b04
   257ac:	200042b2 	.word	0x200042b2
   257b0:	20005bbc 	.word	0x20005bbc
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   257b4:	1dfb      	adds	r3, r7, #7
   257b6:	781b      	ldrb	r3, [r3, #0]
   257b8:	2b46      	cmp	r3, #70	; 0x46
   257ba:	d008      	beq.n	257ce <m2m_ip_cb+0x2be>
   257bc:	1dfb      	adds	r3, r7, #7
   257be:	781b      	ldrb	r3, [r3, #0]
   257c0:	2b48      	cmp	r3, #72	; 0x48
   257c2:	d004      	beq.n	257ce <m2m_ip_cb+0x2be>
   257c4:	1dfb      	adds	r3, r7, #7
   257c6:	781b      	ldrb	r3, [r3, #0]
   257c8:	2b4d      	cmp	r3, #77	; 0x4d
   257ca:	d000      	beq.n	257ce <m2m_ip_cb+0x2be>
   257cc:	e0b4      	b.n	25938 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   257ce:	23df      	movs	r3, #223	; 0xdf
   257d0:	18fb      	adds	r3, r7, r3
   257d2:	2206      	movs	r2, #6
   257d4:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   257d6:	1dfb      	adds	r3, r7, #7
   257d8:	781b      	ldrb	r3, [r3, #0]
   257da:	2b48      	cmp	r3, #72	; 0x48
   257dc:	d103      	bne.n	257e6 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   257de:	23df      	movs	r3, #223	; 0xdf
   257e0:	18fb      	adds	r3, r7, r3
   257e2:	2209      	movs	r2, #9
   257e4:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   257e6:	23d8      	movs	r3, #216	; 0xd8
   257e8:	18fb      	adds	r3, r7, r3
   257ea:	2210      	movs	r2, #16
   257ec:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   257ee:	23d8      	movs	r3, #216	; 0xd8
   257f0:	18fb      	adds	r3, r7, r3
   257f2:	881a      	ldrh	r2, [r3, #0]
   257f4:	2388      	movs	r3, #136	; 0x88
   257f6:	18f9      	adds	r1, r7, r3
   257f8:	6838      	ldr	r0, [r7, #0]
   257fa:	2300      	movs	r3, #0
   257fc:	4c93      	ldr	r4, [pc, #588]	; (25a4c <m2m_ip_cb+0x53c>)
   257fe:	47a0      	blx	r4
   25800:	1e03      	subs	r3, r0, #0
   25802:	d000      	beq.n	25806 <m2m_ip_cb+0x2f6>
   25804:	e11a      	b.n	25a3c <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   25806:	23d6      	movs	r3, #214	; 0xd6
   25808:	18fb      	adds	r3, r7, r3
   2580a:	2200      	movs	r2, #0
   2580c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   2580e:	23d5      	movs	r3, #213	; 0xd5
   25810:	18fb      	adds	r3, r7, r3
   25812:	2288      	movs	r2, #136	; 0x88
   25814:	18ba      	adds	r2, r7, r2
   25816:	7b12      	ldrb	r2, [r2, #12]
   25818:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   2581a:	23d6      	movs	r3, #214	; 0xd6
   2581c:	18fb      	adds	r3, r7, r3
   2581e:	2288      	movs	r2, #136	; 0x88
   25820:	18ba      	adds	r2, r7, r2
   25822:	89d2      	ldrh	r2, [r2, #14]
   25824:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   25826:	23d5      	movs	r3, #213	; 0xd5
   25828:	18fb      	adds	r3, r7, r3
   2582a:	781b      	ldrb	r3, [r3, #0]
   2582c:	b25b      	sxtb	r3, r3
   2582e:	4a88      	ldr	r2, [pc, #544]	; (25a50 <m2m_ip_cb+0x540>)
   25830:	011b      	lsls	r3, r3, #4
   25832:	18d3      	adds	r3, r2, r3
   25834:	330c      	adds	r3, #12
   25836:	2200      	movs	r2, #0
   25838:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   2583a:	23d2      	movs	r3, #210	; 0xd2
   2583c:	18fb      	adds	r3, r7, r3
   2583e:	2288      	movs	r2, #136	; 0x88
   25840:	18ba      	adds	r2, r7, r2
   25842:	8912      	ldrh	r2, [r2, #8]
   25844:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   25846:	23d0      	movs	r3, #208	; 0xd0
   25848:	18fb      	adds	r3, r7, r3
   2584a:	2288      	movs	r2, #136	; 0x88
   2584c:	18ba      	adds	r2, r7, r2
   2584e:	8952      	ldrh	r2, [r2, #10]
   25850:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   25852:	2388      	movs	r3, #136	; 0x88
   25854:	18fb      	adds	r3, r7, r3
   25856:	885a      	ldrh	r2, [r3, #2]
   25858:	2370      	movs	r3, #112	; 0x70
   2585a:	18fb      	adds	r3, r7, r3
   2585c:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   2585e:	2388      	movs	r3, #136	; 0x88
   25860:	18fb      	adds	r3, r7, r3
   25862:	685a      	ldr	r2, [r3, #4]
   25864:	2370      	movs	r3, #112	; 0x70
   25866:	18fb      	adds	r3, r7, r3
   25868:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   2586a:	23d5      	movs	r3, #213	; 0xd5
   2586c:	18fb      	adds	r3, r7, r3
   2586e:	781b      	ldrb	r3, [r3, #0]
   25870:	b25b      	sxtb	r3, r3
   25872:	4a77      	ldr	r2, [pc, #476]	; (25a50 <m2m_ip_cb+0x540>)
   25874:	011b      	lsls	r3, r3, #4
   25876:	18d3      	adds	r3, r2, r3
   25878:	3306      	adds	r3, #6
   2587a:	881b      	ldrh	r3, [r3, #0]
   2587c:	b29b      	uxth	r3, r3
   2587e:	22d6      	movs	r2, #214	; 0xd6
   25880:	18ba      	adds	r2, r7, r2
   25882:	8812      	ldrh	r2, [r2, #0]
   25884:	429a      	cmp	r2, r3
   25886:	d148      	bne.n	2591a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   25888:	23d2      	movs	r3, #210	; 0xd2
   2588a:	18fb      	adds	r3, r7, r3
   2588c:	2200      	movs	r2, #0
   2588e:	5e9b      	ldrsh	r3, [r3, r2]
   25890:	2b00      	cmp	r3, #0
   25892:	dd25      	ble.n	258e0 <m2m_ip_cb+0x3d0>
   25894:	23d2      	movs	r3, #210	; 0xd2
   25896:	18fb      	adds	r3, r7, r3
   25898:	2200      	movs	r2, #0
   2589a:	5e9a      	ldrsh	r2, [r3, r2]
   2589c:	1d3b      	adds	r3, r7, #4
   2589e:	881b      	ldrh	r3, [r3, #0]
   258a0:	429a      	cmp	r2, r3
   258a2:	da1d      	bge.n	258e0 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   258a4:	23d0      	movs	r3, #208	; 0xd0
   258a6:	18fb      	adds	r3, r7, r3
   258a8:	881b      	ldrh	r3, [r3, #0]
   258aa:	683a      	ldr	r2, [r7, #0]
   258ac:	18d3      	adds	r3, r2, r3
   258ae:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   258b0:	23d8      	movs	r3, #216	; 0xd8
   258b2:	18fb      	adds	r3, r7, r3
   258b4:	22d2      	movs	r2, #210	; 0xd2
   258b6:	18ba      	adds	r2, r7, r2
   258b8:	8812      	ldrh	r2, [r2, #0]
   258ba:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   258bc:	683c      	ldr	r4, [r7, #0]
   258be:	23df      	movs	r3, #223	; 0xdf
   258c0:	18fb      	adds	r3, r7, r3
   258c2:	781a      	ldrb	r2, [r3, #0]
   258c4:	2370      	movs	r3, #112	; 0x70
   258c6:	18f9      	adds	r1, r7, r3
   258c8:	23d5      	movs	r3, #213	; 0xd5
   258ca:	18fb      	adds	r3, r7, r3
   258cc:	2000      	movs	r0, #0
   258ce:	5618      	ldrsb	r0, [r3, r0]
   258d0:	23d8      	movs	r3, #216	; 0xd8
   258d2:	18fb      	adds	r3, r7, r3
   258d4:	881b      	ldrh	r3, [r3, #0]
   258d6:	9300      	str	r3, [sp, #0]
   258d8:	0023      	movs	r3, r4
   258da:	4c5e      	ldr	r4, [pc, #376]	; (25a54 <m2m_ip_cb+0x544>)
   258dc:	47a0      	blx	r4
	{
   258de:	e0ad      	b.n	25a3c <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   258e0:	2370      	movs	r3, #112	; 0x70
   258e2:	18fb      	adds	r3, r7, r3
   258e4:	22d2      	movs	r2, #210	; 0xd2
   258e6:	18ba      	adds	r2, r7, r2
   258e8:	8812      	ldrh	r2, [r2, #0]
   258ea:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   258ec:	2370      	movs	r3, #112	; 0x70
   258ee:	18fb      	adds	r3, r7, r3
   258f0:	2200      	movs	r2, #0
   258f2:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   258f4:	4b58      	ldr	r3, [pc, #352]	; (25a58 <m2m_ip_cb+0x548>)
   258f6:	681b      	ldr	r3, [r3, #0]
   258f8:	2b00      	cmp	r3, #0
   258fa:	d100      	bne.n	258fe <m2m_ip_cb+0x3ee>
   258fc:	e09e      	b.n	25a3c <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   258fe:	4b56      	ldr	r3, [pc, #344]	; (25a58 <m2m_ip_cb+0x548>)
   25900:	681b      	ldr	r3, [r3, #0]
   25902:	2270      	movs	r2, #112	; 0x70
   25904:	18bc      	adds	r4, r7, r2
   25906:	22df      	movs	r2, #223	; 0xdf
   25908:	18ba      	adds	r2, r7, r2
   2590a:	7811      	ldrb	r1, [r2, #0]
   2590c:	22d5      	movs	r2, #213	; 0xd5
   2590e:	18ba      	adds	r2, r7, r2
   25910:	2000      	movs	r0, #0
   25912:	5610      	ldrsb	r0, [r2, r0]
   25914:	0022      	movs	r2, r4
   25916:	4798      	blx	r3
	{
   25918:	e090      	b.n	25a3c <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   2591a:	23d8      	movs	r3, #216	; 0xd8
   2591c:	18fa      	adds	r2, r7, r3
   2591e:	1d3b      	adds	r3, r7, #4
   25920:	8812      	ldrh	r2, [r2, #0]
   25922:	881b      	ldrh	r3, [r3, #0]
   25924:	429a      	cmp	r2, r3
   25926:	d300      	bcc.n	2592a <m2m_ip_cb+0x41a>
   25928:	e088      	b.n	25a3c <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2592a:	2301      	movs	r3, #1
   2592c:	2200      	movs	r2, #0
   2592e:	2100      	movs	r1, #0
   25930:	2000      	movs	r0, #0
   25932:	4c46      	ldr	r4, [pc, #280]	; (25a4c <m2m_ip_cb+0x53c>)
   25934:	47a0      	blx	r4
	{
   25936:	e081      	b.n	25a3c <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   25938:	1dfb      	adds	r3, r7, #7
   2593a:	781b      	ldrb	r3, [r3, #0]
   2593c:	2b45      	cmp	r3, #69	; 0x45
   2593e:	d007      	beq.n	25950 <m2m_ip_cb+0x440>
   25940:	1dfb      	adds	r3, r7, #7
   25942:	781b      	ldrb	r3, [r3, #0]
   25944:	2b47      	cmp	r3, #71	; 0x47
   25946:	d003      	beq.n	25950 <m2m_ip_cb+0x440>
   25948:	1dfb      	adds	r3, r7, #7
   2594a:	781b      	ldrb	r3, [r3, #0]
   2594c:	2b4c      	cmp	r3, #76	; 0x4c
   2594e:	d14c      	bne.n	259ea <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   25950:	23de      	movs	r3, #222	; 0xde
   25952:	18fb      	adds	r3, r7, r3
   25954:	2207      	movs	r2, #7
   25956:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   25958:	1dfb      	adds	r3, r7, #7
   2595a:	781b      	ldrb	r3, [r3, #0]
   2595c:	2b47      	cmp	r3, #71	; 0x47
   2595e:	d103      	bne.n	25968 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   25960:	23de      	movs	r3, #222	; 0xde
   25962:	18fb      	adds	r3, r7, r3
   25964:	2208      	movs	r2, #8
   25966:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   25968:	2364      	movs	r3, #100	; 0x64
   2596a:	18f9      	adds	r1, r7, r3
   2596c:	6838      	ldr	r0, [r7, #0]
   2596e:	2300      	movs	r3, #0
   25970:	2208      	movs	r2, #8
   25972:	4c36      	ldr	r4, [pc, #216]	; (25a4c <m2m_ip_cb+0x53c>)
   25974:	47a0      	blx	r4
   25976:	1e03      	subs	r3, r0, #0
   25978:	d162      	bne.n	25a40 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   2597a:	23dc      	movs	r3, #220	; 0xdc
   2597c:	18fb      	adds	r3, r7, r3
   2597e:	2200      	movs	r2, #0
   25980:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   25982:	23db      	movs	r3, #219	; 0xdb
   25984:	18fb      	adds	r3, r7, r3
   25986:	2264      	movs	r2, #100	; 0x64
   25988:	18ba      	adds	r2, r7, r2
   2598a:	7812      	ldrb	r2, [r2, #0]
   2598c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   2598e:	23dc      	movs	r3, #220	; 0xdc
   25990:	18fb      	adds	r3, r7, r3
   25992:	2264      	movs	r2, #100	; 0x64
   25994:	18ba      	adds	r2, r7, r2
   25996:	8892      	ldrh	r2, [r2, #4]
   25998:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   2599a:	2364      	movs	r3, #100	; 0x64
   2599c:	18fb      	adds	r3, r7, r3
   2599e:	2202      	movs	r2, #2
   259a0:	5e9a      	ldrsh	r2, [r3, r2]
   259a2:	236e      	movs	r3, #110	; 0x6e
   259a4:	18fb      	adds	r3, r7, r3
   259a6:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   259a8:	23db      	movs	r3, #219	; 0xdb
   259aa:	18fb      	adds	r3, r7, r3
   259ac:	781b      	ldrb	r3, [r3, #0]
   259ae:	b25b      	sxtb	r3, r3
   259b0:	4a27      	ldr	r2, [pc, #156]	; (25a50 <m2m_ip_cb+0x540>)
   259b2:	011b      	lsls	r3, r3, #4
   259b4:	18d3      	adds	r3, r2, r3
   259b6:	3306      	adds	r3, #6
   259b8:	881b      	ldrh	r3, [r3, #0]
   259ba:	b29b      	uxth	r3, r3
   259bc:	22dc      	movs	r2, #220	; 0xdc
   259be:	18ba      	adds	r2, r7, r2
   259c0:	8812      	ldrh	r2, [r2, #0]
   259c2:	429a      	cmp	r2, r3
   259c4:	d13c      	bne.n	25a40 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   259c6:	4b24      	ldr	r3, [pc, #144]	; (25a58 <m2m_ip_cb+0x548>)
   259c8:	681b      	ldr	r3, [r3, #0]
   259ca:	2b00      	cmp	r3, #0
   259cc:	d038      	beq.n	25a40 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   259ce:	4b22      	ldr	r3, [pc, #136]	; (25a58 <m2m_ip_cb+0x548>)
   259d0:	681b      	ldr	r3, [r3, #0]
   259d2:	226e      	movs	r2, #110	; 0x6e
   259d4:	18bc      	adds	r4, r7, r2
   259d6:	22de      	movs	r2, #222	; 0xde
   259d8:	18ba      	adds	r2, r7, r2
   259da:	7811      	ldrb	r1, [r2, #0]
   259dc:	22db      	movs	r2, #219	; 0xdb
   259de:	18ba      	adds	r2, r7, r2
   259e0:	2000      	movs	r0, #0
   259e2:	5610      	ldrsb	r0, [r2, r0]
   259e4:	0022      	movs	r2, r4
   259e6:	4798      	blx	r3
	{
   259e8:	e02a      	b.n	25a40 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   259ea:	1dfb      	adds	r3, r7, #7
   259ec:	781b      	ldrb	r3, [r3, #0]
   259ee:	2b52      	cmp	r3, #82	; 0x52
   259f0:	d127      	bne.n	25a42 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   259f2:	2350      	movs	r3, #80	; 0x50
   259f4:	18f9      	adds	r1, r7, r3
   259f6:	6838      	ldr	r0, [r7, #0]
   259f8:	2301      	movs	r3, #1
   259fa:	2214      	movs	r2, #20
   259fc:	4c13      	ldr	r4, [pc, #76]	; (25a4c <m2m_ip_cb+0x53c>)
   259fe:	47a0      	blx	r4
   25a00:	1e03      	subs	r3, r0, #0
   25a02:	d11e      	bne.n	25a42 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   25a04:	2350      	movs	r3, #80	; 0x50
   25a06:	18fb      	adds	r3, r7, r3
   25a08:	685b      	ldr	r3, [r3, #4]
   25a0a:	001a      	movs	r2, r3
   25a0c:	4b13      	ldr	r3, [pc, #76]	; (25a5c <m2m_ip_cb+0x54c>)
   25a0e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   25a10:	4b12      	ldr	r3, [pc, #72]	; (25a5c <m2m_ip_cb+0x54c>)
   25a12:	681b      	ldr	r3, [r3, #0]
   25a14:	2b00      	cmp	r3, #0
   25a16:	d014      	beq.n	25a42 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   25a18:	4b10      	ldr	r3, [pc, #64]	; (25a5c <m2m_ip_cb+0x54c>)
   25a1a:	681c      	ldr	r4, [r3, #0]
   25a1c:	2350      	movs	r3, #80	; 0x50
   25a1e:	18fb      	adds	r3, r7, r3
   25a20:	6818      	ldr	r0, [r3, #0]
   25a22:	2350      	movs	r3, #80	; 0x50
   25a24:	18fb      	adds	r3, r7, r3
   25a26:	6899      	ldr	r1, [r3, #8]
   25a28:	2350      	movs	r3, #80	; 0x50
   25a2a:	18fb      	adds	r3, r7, r3
   25a2c:	7c1b      	ldrb	r3, [r3, #16]
   25a2e:	001a      	movs	r2, r3
   25a30:	47a0      	blx	r4
}
   25a32:	e006      	b.n	25a42 <m2m_ip_cb+0x532>
	{
   25a34:	46c0      	nop			; (mov r8, r8)
   25a36:	e004      	b.n	25a42 <m2m_ip_cb+0x532>
	{
   25a38:	46c0      	nop			; (mov r8, r8)
   25a3a:	e002      	b.n	25a42 <m2m_ip_cb+0x532>
	{
   25a3c:	46c0      	nop			; (mov r8, r8)
   25a3e:	e000      	b.n	25a42 <m2m_ip_cb+0x532>
	{
   25a40:	46c0      	nop			; (mov r8, r8)
}
   25a42:	46c0      	nop			; (mov r8, r8)
   25a44:	46bd      	mov	sp, r7
   25a46:	b039      	add	sp, #228	; 0xe4
   25a48:	bd90      	pop	{r4, r7, pc}
   25a4a:	46c0      	nop			; (mov r8, r8)
   25a4c:	00021d0d 	.word	0x00021d0d
   25a50:	20005b04 	.word	0x20005b04
   25a54:	00025315 	.word	0x00025315
   25a58:	20005bb4 	.word	0x20005bb4
   25a5c:	20005bb8 	.word	0x20005bb8

00025a60 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   25a60:	b580      	push	{r7, lr}
   25a62:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   25a64:	4b0c      	ldr	r3, [pc, #48]	; (25a98 <socketInit+0x38>)
   25a66:	781b      	ldrb	r3, [r3, #0]
   25a68:	b2db      	uxtb	r3, r3
   25a6a:	2b00      	cmp	r3, #0
   25a6c:	d110      	bne.n	25a90 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   25a6e:	4b0b      	ldr	r3, [pc, #44]	; (25a9c <socketInit+0x3c>)
   25a70:	22b0      	movs	r2, #176	; 0xb0
   25a72:	2100      	movs	r1, #0
   25a74:	0018      	movs	r0, r3
   25a76:	4b0a      	ldr	r3, [pc, #40]	; (25aa0 <socketInit+0x40>)
   25a78:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   25a7a:	4b0a      	ldr	r3, [pc, #40]	; (25aa4 <socketInit+0x44>)
   25a7c:	0019      	movs	r1, r3
   25a7e:	2002      	movs	r0, #2
   25a80:	4b09      	ldr	r3, [pc, #36]	; (25aa8 <socketInit+0x48>)
   25a82:	4798      	blx	r3
		gbSocketInit	= 1;
   25a84:	4b04      	ldr	r3, [pc, #16]	; (25a98 <socketInit+0x38>)
   25a86:	2201      	movs	r2, #1
   25a88:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   25a8a:	4b08      	ldr	r3, [pc, #32]	; (25aac <socketInit+0x4c>)
   25a8c:	2200      	movs	r2, #0
   25a8e:	801a      	strh	r2, [r3, #0]
	}
}
   25a90:	46c0      	nop			; (mov r8, r8)
   25a92:	46bd      	mov	sp, r7
   25a94:	bd80      	pop	{r7, pc}
   25a96:	46c0      	nop			; (mov r8, r8)
   25a98:	200042b4 	.word	0x200042b4
   25a9c:	20005b04 	.word	0x20005b04
   25aa0:	00021191 	.word	0x00021191
   25aa4:	00025511 	.word	0x00025511
   25aa8:	00021e8d 	.word	0x00021e8d
   25aac:	200042b2 	.word	0x200042b2

00025ab0 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   25ab0:	b580      	push	{r7, lr}
   25ab2:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   25ab4:	4b0a      	ldr	r3, [pc, #40]	; (25ae0 <socketDeinit+0x30>)
   25ab6:	22b0      	movs	r2, #176	; 0xb0
   25ab8:	2100      	movs	r1, #0
   25aba:	0018      	movs	r0, r3
   25abc:	4b09      	ldr	r3, [pc, #36]	; (25ae4 <socketDeinit+0x34>)
   25abe:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   25ac0:	2100      	movs	r1, #0
   25ac2:	2002      	movs	r0, #2
   25ac4:	4b08      	ldr	r3, [pc, #32]	; (25ae8 <socketDeinit+0x38>)
   25ac6:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   25ac8:	4b08      	ldr	r3, [pc, #32]	; (25aec <socketDeinit+0x3c>)
   25aca:	2200      	movs	r2, #0
   25acc:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   25ace:	4b08      	ldr	r3, [pc, #32]	; (25af0 <socketDeinit+0x40>)
   25ad0:	2200      	movs	r2, #0
   25ad2:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   25ad4:	4b07      	ldr	r3, [pc, #28]	; (25af4 <socketDeinit+0x44>)
   25ad6:	2200      	movs	r2, #0
   25ad8:	701a      	strb	r2, [r3, #0]
}
   25ada:	46c0      	nop			; (mov r8, r8)
   25adc:	46bd      	mov	sp, r7
   25ade:	bd80      	pop	{r7, pc}
   25ae0:	20005b04 	.word	0x20005b04
   25ae4:	00021191 	.word	0x00021191
   25ae8:	00021e8d 	.word	0x00021e8d
   25aec:	20005bb4 	.word	0x20005bb4
   25af0:	20005bbc 	.word	0x20005bbc
   25af4:	200042b4 	.word	0x200042b4

00025af8 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   25af8:	b580      	push	{r7, lr}
   25afa:	b082      	sub	sp, #8
   25afc:	af00      	add	r7, sp, #0
   25afe:	6078      	str	r0, [r7, #4]
   25b00:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   25b02:	4b05      	ldr	r3, [pc, #20]	; (25b18 <registerSocketCallback+0x20>)
   25b04:	687a      	ldr	r2, [r7, #4]
   25b06:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   25b08:	4b04      	ldr	r3, [pc, #16]	; (25b1c <registerSocketCallback+0x24>)
   25b0a:	683a      	ldr	r2, [r7, #0]
   25b0c:	601a      	str	r2, [r3, #0]
}
   25b0e:	46c0      	nop			; (mov r8, r8)
   25b10:	46bd      	mov	sp, r7
   25b12:	b002      	add	sp, #8
   25b14:	bd80      	pop	{r7, pc}
   25b16:	46c0      	nop			; (mov r8, r8)
   25b18:	20005bb4 	.word	0x20005bb4
   25b1c:	20005bbc 	.word	0x20005bbc

00025b20 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   25b20:	b590      	push	{r4, r7, lr}
   25b22:	b08d      	sub	sp, #52	; 0x34
   25b24:	af04      	add	r7, sp, #16
   25b26:	0004      	movs	r4, r0
   25b28:	0008      	movs	r0, r1
   25b2a:	0011      	movs	r1, r2
   25b2c:	1dbb      	adds	r3, r7, #6
   25b2e:	1c22      	adds	r2, r4, #0
   25b30:	801a      	strh	r2, [r3, #0]
   25b32:	1d7b      	adds	r3, r7, #5
   25b34:	1c02      	adds	r2, r0, #0
   25b36:	701a      	strb	r2, [r3, #0]
   25b38:	1d3b      	adds	r3, r7, #4
   25b3a:	1c0a      	adds	r2, r1, #0
   25b3c:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   25b3e:	231f      	movs	r3, #31
   25b40:	18fb      	adds	r3, r7, r3
   25b42:	22ff      	movs	r2, #255	; 0xff
   25b44:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   25b46:	1dbb      	adds	r3, r7, #6
   25b48:	881b      	ldrh	r3, [r3, #0]
   25b4a:	2b02      	cmp	r3, #2
   25b4c:	d000      	beq.n	25b50 <socket+0x30>
   25b4e:	e0ce      	b.n	25cee <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   25b50:	1d7b      	adds	r3, r7, #5
   25b52:	781b      	ldrb	r3, [r3, #0]
   25b54:	2b01      	cmp	r3, #1
   25b56:	d135      	bne.n	25bc4 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   25b58:	231e      	movs	r3, #30
   25b5a:	18fb      	adds	r3, r7, r3
   25b5c:	2200      	movs	r2, #0
   25b5e:	701a      	strb	r2, [r3, #0]
   25b60:	e02a      	b.n	25bb8 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   25b62:	2317      	movs	r3, #23
   25b64:	18fb      	adds	r3, r7, r3
   25b66:	4a66      	ldr	r2, [pc, #408]	; (25d00 <socket+0x1e0>)
   25b68:	7812      	ldrb	r2, [r2, #0]
   25b6a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   25b6c:	4b64      	ldr	r3, [pc, #400]	; (25d00 <socket+0x1e0>)
   25b6e:	781b      	ldrb	r3, [r3, #0]
   25b70:	b2db      	uxtb	r3, r3
   25b72:	011a      	lsls	r2, r3, #4
   25b74:	4b63      	ldr	r3, [pc, #396]	; (25d04 <socket+0x1e4>)
   25b76:	18d3      	adds	r3, r2, r3
   25b78:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   25b7a:	4b61      	ldr	r3, [pc, #388]	; (25d00 <socket+0x1e0>)
   25b7c:	781b      	ldrb	r3, [r3, #0]
   25b7e:	b2db      	uxtb	r3, r3
   25b80:	1c5a      	adds	r2, r3, #1
   25b82:	4b61      	ldr	r3, [pc, #388]	; (25d08 <socket+0x1e8>)
   25b84:	2107      	movs	r1, #7
   25b86:	0010      	movs	r0, r2
   25b88:	4798      	blx	r3
   25b8a:	000b      	movs	r3, r1
   25b8c:	b2da      	uxtb	r2, r3
   25b8e:	4b5c      	ldr	r3, [pc, #368]	; (25d00 <socket+0x1e0>)
   25b90:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   25b92:	69bb      	ldr	r3, [r7, #24]
   25b94:	7a9b      	ldrb	r3, [r3, #10]
   25b96:	b2db      	uxtb	r3, r3
   25b98:	2b00      	cmp	r3, #0
   25b9a:	d106      	bne.n	25baa <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   25b9c:	231f      	movs	r3, #31
   25b9e:	18fb      	adds	r3, r7, r3
   25ba0:	2217      	movs	r2, #23
   25ba2:	18ba      	adds	r2, r7, r2
   25ba4:	7812      	ldrb	r2, [r2, #0]
   25ba6:	701a      	strb	r2, [r3, #0]
					break;
   25ba8:	e04c      	b.n	25c44 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   25baa:	231e      	movs	r3, #30
   25bac:	18fb      	adds	r3, r7, r3
   25bae:	781a      	ldrb	r2, [r3, #0]
   25bb0:	231e      	movs	r3, #30
   25bb2:	18fb      	adds	r3, r7, r3
   25bb4:	3201      	adds	r2, #1
   25bb6:	701a      	strb	r2, [r3, #0]
   25bb8:	231e      	movs	r3, #30
   25bba:	18fb      	adds	r3, r7, r3
   25bbc:	781b      	ldrb	r3, [r3, #0]
   25bbe:	2b06      	cmp	r3, #6
   25bc0:	d9cf      	bls.n	25b62 <socket+0x42>
   25bc2:	e03f      	b.n	25c44 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   25bc4:	1d7b      	adds	r3, r7, #5
   25bc6:	781b      	ldrb	r3, [r3, #0]
   25bc8:	2b02      	cmp	r3, #2
   25bca:	d13b      	bne.n	25c44 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   25bcc:	4b4f      	ldr	r3, [pc, #316]	; (25d0c <socket+0x1ec>)
   25bce:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   25bd0:	231e      	movs	r3, #30
   25bd2:	18fb      	adds	r3, r7, r3
   25bd4:	2200      	movs	r2, #0
   25bd6:	701a      	strb	r2, [r3, #0]
   25bd8:	e02f      	b.n	25c3a <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   25bda:	2317      	movs	r3, #23
   25bdc:	18fb      	adds	r3, r7, r3
   25bde:	4a4c      	ldr	r2, [pc, #304]	; (25d10 <socket+0x1f0>)
   25be0:	7812      	ldrb	r2, [r2, #0]
   25be2:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   25be4:	4b4a      	ldr	r3, [pc, #296]	; (25d10 <socket+0x1f0>)
   25be6:	781b      	ldrb	r3, [r3, #0]
   25be8:	b2db      	uxtb	r3, r3
   25bea:	011b      	lsls	r3, r3, #4
   25bec:	693a      	ldr	r2, [r7, #16]
   25bee:	18d3      	adds	r3, r2, r3
   25bf0:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   25bf2:	4b47      	ldr	r3, [pc, #284]	; (25d10 <socket+0x1f0>)
   25bf4:	781b      	ldrb	r3, [r3, #0]
   25bf6:	b2db      	uxtb	r3, r3
   25bf8:	3301      	adds	r3, #1
   25bfa:	4a46      	ldr	r2, [pc, #280]	; (25d14 <socket+0x1f4>)
   25bfc:	4013      	ands	r3, r2
   25bfe:	d504      	bpl.n	25c0a <socket+0xea>
   25c00:	3b01      	subs	r3, #1
   25c02:	2204      	movs	r2, #4
   25c04:	4252      	negs	r2, r2
   25c06:	4313      	orrs	r3, r2
   25c08:	3301      	adds	r3, #1
   25c0a:	b2da      	uxtb	r2, r3
   25c0c:	4b40      	ldr	r3, [pc, #256]	; (25d10 <socket+0x1f0>)
   25c0e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   25c10:	69bb      	ldr	r3, [r7, #24]
   25c12:	7a9b      	ldrb	r3, [r3, #10]
   25c14:	b2db      	uxtb	r3, r3
   25c16:	2b00      	cmp	r3, #0
   25c18:	d108      	bne.n	25c2c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   25c1a:	2317      	movs	r3, #23
   25c1c:	18fb      	adds	r3, r7, r3
   25c1e:	781b      	ldrb	r3, [r3, #0]
   25c20:	3307      	adds	r3, #7
   25c22:	b2da      	uxtb	r2, r3
   25c24:	231f      	movs	r3, #31
   25c26:	18fb      	adds	r3, r7, r3
   25c28:	701a      	strb	r2, [r3, #0]
					break;
   25c2a:	e00b      	b.n	25c44 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   25c2c:	231e      	movs	r3, #30
   25c2e:	18fb      	adds	r3, r7, r3
   25c30:	781a      	ldrb	r2, [r3, #0]
   25c32:	231e      	movs	r3, #30
   25c34:	18fb      	adds	r3, r7, r3
   25c36:	3201      	adds	r2, #1
   25c38:	701a      	strb	r2, [r3, #0]
   25c3a:	231e      	movs	r3, #30
   25c3c:	18fb      	adds	r3, r7, r3
   25c3e:	781b      	ldrb	r3, [r3, #0]
   25c40:	2b03      	cmp	r3, #3
   25c42:	d9ca      	bls.n	25bda <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   25c44:	231f      	movs	r3, #31
   25c46:	18fb      	adds	r3, r7, r3
   25c48:	781b      	ldrb	r3, [r3, #0]
   25c4a:	2b7f      	cmp	r3, #127	; 0x7f
   25c4c:	d84f      	bhi.n	25cee <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   25c4e:	69bb      	ldr	r3, [r7, #24]
   25c50:	2210      	movs	r2, #16
   25c52:	2100      	movs	r1, #0
   25c54:	0018      	movs	r0, r3
   25c56:	4b30      	ldr	r3, [pc, #192]	; (25d18 <socket+0x1f8>)
   25c58:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   25c5a:	69bb      	ldr	r3, [r7, #24]
   25c5c:	2201      	movs	r2, #1
   25c5e:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   25c60:	4b2e      	ldr	r3, [pc, #184]	; (25d1c <socket+0x1fc>)
   25c62:	881b      	ldrh	r3, [r3, #0]
   25c64:	b29b      	uxth	r3, r3
   25c66:	3301      	adds	r3, #1
   25c68:	b29a      	uxth	r2, r3
   25c6a:	4b2c      	ldr	r3, [pc, #176]	; (25d1c <socket+0x1fc>)
   25c6c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   25c6e:	4b2b      	ldr	r3, [pc, #172]	; (25d1c <socket+0x1fc>)
   25c70:	881b      	ldrh	r3, [r3, #0]
   25c72:	b29b      	uxth	r3, r3
   25c74:	2b00      	cmp	r3, #0
   25c76:	d106      	bne.n	25c86 <socket+0x166>
				++gu16SessionID;
   25c78:	4b28      	ldr	r3, [pc, #160]	; (25d1c <socket+0x1fc>)
   25c7a:	881b      	ldrh	r3, [r3, #0]
   25c7c:	b29b      	uxth	r3, r3
   25c7e:	3301      	adds	r3, #1
   25c80:	b29a      	uxth	r2, r3
   25c82:	4b26      	ldr	r3, [pc, #152]	; (25d1c <socket+0x1fc>)
   25c84:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   25c86:	4b25      	ldr	r3, [pc, #148]	; (25d1c <socket+0x1fc>)
   25c88:	881b      	ldrh	r3, [r3, #0]
   25c8a:	b29a      	uxth	r2, r3
   25c8c:	69bb      	ldr	r3, [r7, #24]
   25c8e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   25c90:	4b23      	ldr	r3, [pc, #140]	; (25d20 <socket+0x200>)
   25c92:	0018      	movs	r0, r3
   25c94:	4b23      	ldr	r3, [pc, #140]	; (25d24 <socket+0x204>)
   25c96:	4798      	blx	r3
   25c98:	231f      	movs	r3, #31
   25c9a:	18fb      	adds	r3, r7, r3
   25c9c:	2100      	movs	r1, #0
   25c9e:	5659      	ldrsb	r1, [r3, r1]
   25ca0:	4b1e      	ldr	r3, [pc, #120]	; (25d1c <socket+0x1fc>)
   25ca2:	881b      	ldrh	r3, [r3, #0]
   25ca4:	b29b      	uxth	r3, r3
   25ca6:	001a      	movs	r2, r3
   25ca8:	4b1f      	ldr	r3, [pc, #124]	; (25d28 <socket+0x208>)
   25caa:	0018      	movs	r0, r3
   25cac:	4b1d      	ldr	r3, [pc, #116]	; (25d24 <socket+0x204>)
   25cae:	4798      	blx	r3
   25cb0:	4b1e      	ldr	r3, [pc, #120]	; (25d2c <socket+0x20c>)
   25cb2:	0018      	movs	r0, r3
   25cb4:	4b1b      	ldr	r3, [pc, #108]	; (25d24 <socket+0x204>)
   25cb6:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   25cb8:	1d3b      	adds	r3, r7, #4
   25cba:	781b      	ldrb	r3, [r3, #0]
   25cbc:	2201      	movs	r2, #1
   25cbe:	4013      	ands	r3, r2
   25cc0:	d015      	beq.n	25cee <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   25cc2:	230c      	movs	r3, #12
   25cc4:	18fb      	adds	r3, r7, r3
   25cc6:	221f      	movs	r2, #31
   25cc8:	18ba      	adds	r2, r7, r2
   25cca:	7812      	ldrb	r2, [r2, #0]
   25ccc:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   25cce:	69bb      	ldr	r3, [r7, #24]
   25cd0:	2221      	movs	r2, #33	; 0x21
   25cd2:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   25cd4:	230c      	movs	r3, #12
   25cd6:	18fa      	adds	r2, r7, r3
   25cd8:	2300      	movs	r3, #0
   25cda:	9302      	str	r3, [sp, #8]
   25cdc:	2300      	movs	r3, #0
   25cde:	9301      	str	r3, [sp, #4]
   25ce0:	2300      	movs	r3, #0
   25ce2:	9300      	str	r3, [sp, #0]
   25ce4:	2304      	movs	r3, #4
   25ce6:	2150      	movs	r1, #80	; 0x50
   25ce8:	2002      	movs	r0, #2
   25cea:	4c11      	ldr	r4, [pc, #68]	; (25d30 <socket+0x210>)
   25cec:	47a0      	blx	r4
			}
		}
	}
	return sock;
   25cee:	231f      	movs	r3, #31
   25cf0:	18fb      	adds	r3, r7, r3
   25cf2:	781b      	ldrb	r3, [r3, #0]
   25cf4:	b25b      	sxtb	r3, r3
}
   25cf6:	0018      	movs	r0, r3
   25cf8:	46bd      	mov	sp, r7
   25cfa:	b009      	add	sp, #36	; 0x24
   25cfc:	bd90      	pop	{r4, r7, pc}
   25cfe:	46c0      	nop			; (mov r8, r8)
   25d00:	200042b5 	.word	0x200042b5
   25d04:	20005b04 	.word	0x20005b04
   25d08:	00033269 	.word	0x00033269
   25d0c:	20005b74 	.word	0x20005b74
   25d10:	200042b6 	.word	0x200042b6
   25d14:	80000003 	.word	0x80000003
   25d18:	00021191 	.word	0x00021191
   25d1c:	200042b2 	.word	0x200042b2
   25d20:	00039c40 	.word	0x00039c40
   25d24:	0001e3f9 	.word	0x0001e3f9
   25d28:	00039c64 	.word	0x00039c64
   25d2c:	00039c60 	.word	0x00039c60
   25d30:	000213f1 	.word	0x000213f1

00025d34 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   25d34:	b5b0      	push	{r4, r5, r7, lr}
   25d36:	b08a      	sub	sp, #40	; 0x28
   25d38:	af04      	add	r7, sp, #16
   25d3a:	6039      	str	r1, [r7, #0]
   25d3c:	0011      	movs	r1, r2
   25d3e:	1dfb      	adds	r3, r7, #7
   25d40:	1c02      	adds	r2, r0, #0
   25d42:	701a      	strb	r2, [r3, #0]
   25d44:	1dbb      	adds	r3, r7, #6
   25d46:	1c0a      	adds	r2, r1, #0
   25d48:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25d4a:	2317      	movs	r3, #23
   25d4c:	18fb      	adds	r3, r7, r3
   25d4e:	22fa      	movs	r2, #250	; 0xfa
   25d50:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   25d52:	1dfb      	adds	r3, r7, #7
   25d54:	781b      	ldrb	r3, [r3, #0]
   25d56:	2b7f      	cmp	r3, #127	; 0x7f
   25d58:	d867      	bhi.n	25e2a <connect+0xf6>
   25d5a:	683b      	ldr	r3, [r7, #0]
   25d5c:	2b00      	cmp	r3, #0
   25d5e:	d064      	beq.n	25e2a <connect+0xf6>
   25d60:	1dfb      	adds	r3, r7, #7
   25d62:	781b      	ldrb	r3, [r3, #0]
   25d64:	b25b      	sxtb	r3, r3
   25d66:	4a35      	ldr	r2, [pc, #212]	; (25e3c <connect+0x108>)
   25d68:	011b      	lsls	r3, r3, #4
   25d6a:	18d3      	adds	r3, r2, r3
   25d6c:	330a      	adds	r3, #10
   25d6e:	781b      	ldrb	r3, [r3, #0]
   25d70:	b2db      	uxtb	r3, r3
   25d72:	2b01      	cmp	r3, #1
   25d74:	d159      	bne.n	25e2a <connect+0xf6>
   25d76:	1dbb      	adds	r3, r7, #6
   25d78:	781b      	ldrb	r3, [r3, #0]
   25d7a:	2b00      	cmp	r3, #0
   25d7c:	d055      	beq.n	25e2a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   25d7e:	2316      	movs	r3, #22
   25d80:	18fb      	adds	r3, r7, r3
   25d82:	2244      	movs	r2, #68	; 0x44
   25d84:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   25d86:	1dfb      	adds	r3, r7, #7
   25d88:	781b      	ldrb	r3, [r3, #0]
   25d8a:	b25b      	sxtb	r3, r3
   25d8c:	4a2b      	ldr	r2, [pc, #172]	; (25e3c <connect+0x108>)
   25d8e:	011b      	lsls	r3, r3, #4
   25d90:	18d3      	adds	r3, r2, r3
   25d92:	330b      	adds	r3, #11
   25d94:	781b      	ldrb	r3, [r3, #0]
   25d96:	b2db      	uxtb	r3, r3
   25d98:	001a      	movs	r2, r3
   25d9a:	2301      	movs	r3, #1
   25d9c:	4013      	ands	r3, r2
   25d9e:	d00f      	beq.n	25dc0 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   25da0:	2316      	movs	r3, #22
   25da2:	18fb      	adds	r3, r7, r3
   25da4:	224b      	movs	r2, #75	; 0x4b
   25da6:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   25da8:	1dfb      	adds	r3, r7, #7
   25daa:	781b      	ldrb	r3, [r3, #0]
   25dac:	b25b      	sxtb	r3, r3
   25dae:	4a23      	ldr	r2, [pc, #140]	; (25e3c <connect+0x108>)
   25db0:	011b      	lsls	r3, r3, #4
   25db2:	18d3      	adds	r3, r2, r3
   25db4:	330b      	adds	r3, #11
   25db6:	781b      	ldrb	r3, [r3, #0]
   25db8:	b2da      	uxtb	r2, r3
   25dba:	2308      	movs	r3, #8
   25dbc:	18fb      	adds	r3, r7, r3
   25dbe:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   25dc0:	2308      	movs	r3, #8
   25dc2:	18fb      	adds	r3, r7, r3
   25dc4:	1dfa      	adds	r2, r7, #7
   25dc6:	7812      	ldrb	r2, [r2, #0]
   25dc8:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   25dca:	6839      	ldr	r1, [r7, #0]
   25dcc:	2308      	movs	r3, #8
   25dce:	18fb      	adds	r3, r7, r3
   25dd0:	2208      	movs	r2, #8
   25dd2:	0018      	movs	r0, r3
   25dd4:	4b1a      	ldr	r3, [pc, #104]	; (25e40 <connect+0x10c>)
   25dd6:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   25dd8:	1dfb      	adds	r3, r7, #7
   25dda:	781b      	ldrb	r3, [r3, #0]
   25ddc:	b25b      	sxtb	r3, r3
   25dde:	4a17      	ldr	r2, [pc, #92]	; (25e3c <connect+0x108>)
   25de0:	011b      	lsls	r3, r3, #4
   25de2:	18d3      	adds	r3, r2, r3
   25de4:	3306      	adds	r3, #6
   25de6:	881b      	ldrh	r3, [r3, #0]
   25de8:	b29a      	uxth	r2, r3
   25dea:	2308      	movs	r3, #8
   25dec:	18fb      	adds	r3, r7, r3
   25dee:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   25df0:	2317      	movs	r3, #23
   25df2:	18fc      	adds	r4, r7, r3
   25df4:	2308      	movs	r3, #8
   25df6:	18fa      	adds	r2, r7, r3
   25df8:	2316      	movs	r3, #22
   25dfa:	18fb      	adds	r3, r7, r3
   25dfc:	7819      	ldrb	r1, [r3, #0]
   25dfe:	2300      	movs	r3, #0
   25e00:	9302      	str	r3, [sp, #8]
   25e02:	2300      	movs	r3, #0
   25e04:	9301      	str	r3, [sp, #4]
   25e06:	2300      	movs	r3, #0
   25e08:	9300      	str	r3, [sp, #0]
   25e0a:	230c      	movs	r3, #12
   25e0c:	2002      	movs	r0, #2
   25e0e:	4d0d      	ldr	r5, [pc, #52]	; (25e44 <connect+0x110>)
   25e10:	47a8      	blx	r5
   25e12:	0003      	movs	r3, r0
   25e14:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25e16:	2317      	movs	r3, #23
   25e18:	18fb      	adds	r3, r7, r3
   25e1a:	781b      	ldrb	r3, [r3, #0]
   25e1c:	b25b      	sxtb	r3, r3
   25e1e:	2b00      	cmp	r3, #0
   25e20:	d003      	beq.n	25e2a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   25e22:	2317      	movs	r3, #23
   25e24:	18fb      	adds	r3, r7, r3
   25e26:	22f7      	movs	r2, #247	; 0xf7
   25e28:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   25e2a:	2317      	movs	r3, #23
   25e2c:	18fb      	adds	r3, r7, r3
   25e2e:	781b      	ldrb	r3, [r3, #0]
   25e30:	b25b      	sxtb	r3, r3
}
   25e32:	0018      	movs	r0, r3
   25e34:	46bd      	mov	sp, r7
   25e36:	b006      	add	sp, #24
   25e38:	bdb0      	pop	{r4, r5, r7, pc}
   25e3a:	46c0      	nop			; (mov r8, r8)
   25e3c:	20005b04 	.word	0x20005b04
   25e40:	00021155 	.word	0x00021155
   25e44:	000213f1 	.word	0x000213f1

00025e48 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   25e48:	b590      	push	{r4, r7, lr}
   25e4a:	b08f      	sub	sp, #60	; 0x3c
   25e4c:	af04      	add	r7, sp, #16
   25e4e:	0004      	movs	r4, r0
   25e50:	60b9      	str	r1, [r7, #8]
   25e52:	0010      	movs	r0, r2
   25e54:	0019      	movs	r1, r3
   25e56:	230f      	movs	r3, #15
   25e58:	18fb      	adds	r3, r7, r3
   25e5a:	1c22      	adds	r2, r4, #0
   25e5c:	701a      	strb	r2, [r3, #0]
   25e5e:	230c      	movs	r3, #12
   25e60:	18fb      	adds	r3, r7, r3
   25e62:	1c02      	adds	r2, r0, #0
   25e64:	801a      	strh	r2, [r3, #0]
   25e66:	1dbb      	adds	r3, r7, #6
   25e68:	1c0a      	adds	r2, r1, #0
   25e6a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25e6c:	2326      	movs	r3, #38	; 0x26
   25e6e:	18fb      	adds	r3, r7, r3
   25e70:	2206      	movs	r2, #6
   25e72:	4252      	negs	r2, r2
   25e74:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   25e76:	230f      	movs	r3, #15
   25e78:	18fb      	adds	r3, r7, r3
   25e7a:	781b      	ldrb	r3, [r3, #0]
   25e7c:	2b7f      	cmp	r3, #127	; 0x7f
   25e7e:	d900      	bls.n	25e82 <send+0x3a>
   25e80:	e087      	b.n	25f92 <send+0x14a>
   25e82:	68bb      	ldr	r3, [r7, #8]
   25e84:	2b00      	cmp	r3, #0
   25e86:	d100      	bne.n	25e8a <send+0x42>
   25e88:	e083      	b.n	25f92 <send+0x14a>
   25e8a:	230c      	movs	r3, #12
   25e8c:	18fb      	adds	r3, r7, r3
   25e8e:	881a      	ldrh	r2, [r3, #0]
   25e90:	23af      	movs	r3, #175	; 0xaf
   25e92:	00db      	lsls	r3, r3, #3
   25e94:	429a      	cmp	r2, r3
   25e96:	d900      	bls.n	25e9a <send+0x52>
   25e98:	e07b      	b.n	25f92 <send+0x14a>
   25e9a:	230f      	movs	r3, #15
   25e9c:	18fb      	adds	r3, r7, r3
   25e9e:	781b      	ldrb	r3, [r3, #0]
   25ea0:	b25b      	sxtb	r3, r3
   25ea2:	4a40      	ldr	r2, [pc, #256]	; (25fa4 <send+0x15c>)
   25ea4:	011b      	lsls	r3, r3, #4
   25ea6:	18d3      	adds	r3, r2, r3
   25ea8:	330a      	adds	r3, #10
   25eaa:	781b      	ldrb	r3, [r3, #0]
   25eac:	b2db      	uxtb	r3, r3
   25eae:	2b01      	cmp	r3, #1
   25eb0:	d16f      	bne.n	25f92 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   25eb2:	2323      	movs	r3, #35	; 0x23
   25eb4:	18fb      	adds	r3, r7, r3
   25eb6:	2245      	movs	r2, #69	; 0x45
   25eb8:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   25eba:	2324      	movs	r3, #36	; 0x24
   25ebc:	18fb      	adds	r3, r7, r3
   25ebe:	2250      	movs	r2, #80	; 0x50
   25ec0:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   25ec2:	2310      	movs	r3, #16
   25ec4:	18fb      	adds	r3, r7, r3
   25ec6:	220f      	movs	r2, #15
   25ec8:	18ba      	adds	r2, r7, r2
   25eca:	7812      	ldrb	r2, [r2, #0]
   25ecc:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   25ece:	2310      	movs	r3, #16
   25ed0:	18fb      	adds	r3, r7, r3
   25ed2:	220c      	movs	r2, #12
   25ed4:	18ba      	adds	r2, r7, r2
   25ed6:	8812      	ldrh	r2, [r2, #0]
   25ed8:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   25eda:	230f      	movs	r3, #15
   25edc:	18fb      	adds	r3, r7, r3
   25ede:	781b      	ldrb	r3, [r3, #0]
   25ee0:	b25b      	sxtb	r3, r3
   25ee2:	4a30      	ldr	r2, [pc, #192]	; (25fa4 <send+0x15c>)
   25ee4:	011b      	lsls	r3, r3, #4
   25ee6:	18d3      	adds	r3, r2, r3
   25ee8:	3306      	adds	r3, #6
   25eea:	881b      	ldrh	r3, [r3, #0]
   25eec:	b29a      	uxth	r2, r3
   25eee:	2310      	movs	r3, #16
   25ef0:	18fb      	adds	r3, r7, r3
   25ef2:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   25ef4:	230f      	movs	r3, #15
   25ef6:	18fb      	adds	r3, r7, r3
   25ef8:	781b      	ldrb	r3, [r3, #0]
   25efa:	b25b      	sxtb	r3, r3
   25efc:	2b06      	cmp	r3, #6
   25efe:	dd03      	ble.n	25f08 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   25f00:	2324      	movs	r3, #36	; 0x24
   25f02:	18fb      	adds	r3, r7, r3
   25f04:	2244      	movs	r2, #68	; 0x44
   25f06:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25f08:	230f      	movs	r3, #15
   25f0a:	18fb      	adds	r3, r7, r3
   25f0c:	781b      	ldrb	r3, [r3, #0]
   25f0e:	b25b      	sxtb	r3, r3
   25f10:	4a24      	ldr	r2, [pc, #144]	; (25fa4 <send+0x15c>)
   25f12:	011b      	lsls	r3, r3, #4
   25f14:	18d3      	adds	r3, r2, r3
   25f16:	330b      	adds	r3, #11
   25f18:	781b      	ldrb	r3, [r3, #0]
   25f1a:	b2db      	uxtb	r3, r3
   25f1c:	001a      	movs	r2, r3
   25f1e:	2301      	movs	r3, #1
   25f20:	4013      	ands	r3, r2
   25f22:	d00f      	beq.n	25f44 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   25f24:	2323      	movs	r3, #35	; 0x23
   25f26:	18fb      	adds	r3, r7, r3
   25f28:	224c      	movs	r2, #76	; 0x4c
   25f2a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   25f2c:	230f      	movs	r3, #15
   25f2e:	18fb      	adds	r3, r7, r3
   25f30:	2200      	movs	r2, #0
   25f32:	569a      	ldrsb	r2, [r3, r2]
   25f34:	2324      	movs	r3, #36	; 0x24
   25f36:	18fb      	adds	r3, r7, r3
   25f38:	491a      	ldr	r1, [pc, #104]	; (25fa4 <send+0x15c>)
   25f3a:	0112      	lsls	r2, r2, #4
   25f3c:	188a      	adds	r2, r1, r2
   25f3e:	3208      	adds	r2, #8
   25f40:	8812      	ldrh	r2, [r2, #0]
   25f42:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   25f44:	2323      	movs	r3, #35	; 0x23
   25f46:	18fb      	adds	r3, r7, r3
   25f48:	781b      	ldrb	r3, [r3, #0]
   25f4a:	2280      	movs	r2, #128	; 0x80
   25f4c:	4252      	negs	r2, r2
   25f4e:	4313      	orrs	r3, r2
   25f50:	b2d9      	uxtb	r1, r3
   25f52:	2310      	movs	r3, #16
   25f54:	18fa      	adds	r2, r7, r3
   25f56:	2324      	movs	r3, #36	; 0x24
   25f58:	18fb      	adds	r3, r7, r3
   25f5a:	881b      	ldrh	r3, [r3, #0]
   25f5c:	9302      	str	r3, [sp, #8]
   25f5e:	230c      	movs	r3, #12
   25f60:	18fb      	adds	r3, r7, r3
   25f62:	881b      	ldrh	r3, [r3, #0]
   25f64:	9301      	str	r3, [sp, #4]
   25f66:	68bb      	ldr	r3, [r7, #8]
   25f68:	9300      	str	r3, [sp, #0]
   25f6a:	2310      	movs	r3, #16
   25f6c:	2002      	movs	r0, #2
   25f6e:	4c0e      	ldr	r4, [pc, #56]	; (25fa8 <send+0x160>)
   25f70:	47a0      	blx	r4
   25f72:	0003      	movs	r3, r0
   25f74:	001a      	movs	r2, r3
   25f76:	2326      	movs	r3, #38	; 0x26
   25f78:	18fb      	adds	r3, r7, r3
   25f7a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   25f7c:	2326      	movs	r3, #38	; 0x26
   25f7e:	18fb      	adds	r3, r7, r3
   25f80:	2200      	movs	r2, #0
   25f82:	5e9b      	ldrsh	r3, [r3, r2]
   25f84:	2b00      	cmp	r3, #0
   25f86:	d004      	beq.n	25f92 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   25f88:	2326      	movs	r3, #38	; 0x26
   25f8a:	18fb      	adds	r3, r7, r3
   25f8c:	220e      	movs	r2, #14
   25f8e:	4252      	negs	r2, r2
   25f90:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   25f92:	2326      	movs	r3, #38	; 0x26
   25f94:	18fb      	adds	r3, r7, r3
   25f96:	2200      	movs	r2, #0
   25f98:	5e9b      	ldrsh	r3, [r3, r2]
}
   25f9a:	0018      	movs	r0, r3
   25f9c:	46bd      	mov	sp, r7
   25f9e:	b00b      	add	sp, #44	; 0x2c
   25fa0:	bd90      	pop	{r4, r7, pc}
   25fa2:	46c0      	nop			; (mov r8, r8)
   25fa4:	20005b04 	.word	0x20005b04
   25fa8:	000213f1 	.word	0x000213f1

00025fac <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   25fac:	b590      	push	{r4, r7, lr}
   25fae:	b08d      	sub	sp, #52	; 0x34
   25fb0:	af04      	add	r7, sp, #16
   25fb2:	60b9      	str	r1, [r7, #8]
   25fb4:	0011      	movs	r1, r2
   25fb6:	607b      	str	r3, [r7, #4]
   25fb8:	230f      	movs	r3, #15
   25fba:	18fb      	adds	r3, r7, r3
   25fbc:	1c02      	adds	r2, r0, #0
   25fbe:	701a      	strb	r2, [r3, #0]
   25fc0:	230c      	movs	r3, #12
   25fc2:	18fb      	adds	r3, r7, r3
   25fc4:	1c0a      	adds	r2, r1, #0
   25fc6:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25fc8:	231e      	movs	r3, #30
   25fca:	18fb      	adds	r3, r7, r3
   25fcc:	2206      	movs	r2, #6
   25fce:	4252      	negs	r2, r2
   25fd0:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   25fd2:	230f      	movs	r3, #15
   25fd4:	18fb      	adds	r3, r7, r3
   25fd6:	781b      	ldrb	r3, [r3, #0]
   25fd8:	2b7f      	cmp	r3, #127	; 0x7f
   25fda:	d900      	bls.n	25fde <recv+0x32>
   25fdc:	e099      	b.n	26112 <recv+0x166>
   25fde:	68bb      	ldr	r3, [r7, #8]
   25fe0:	2b00      	cmp	r3, #0
   25fe2:	d100      	bne.n	25fe6 <recv+0x3a>
   25fe4:	e095      	b.n	26112 <recv+0x166>
   25fe6:	230c      	movs	r3, #12
   25fe8:	18fb      	adds	r3, r7, r3
   25fea:	881b      	ldrh	r3, [r3, #0]
   25fec:	2b00      	cmp	r3, #0
   25fee:	d100      	bne.n	25ff2 <recv+0x46>
   25ff0:	e08f      	b.n	26112 <recv+0x166>
   25ff2:	230f      	movs	r3, #15
   25ff4:	18fb      	adds	r3, r7, r3
   25ff6:	781b      	ldrb	r3, [r3, #0]
   25ff8:	b25b      	sxtb	r3, r3
   25ffa:	4a4a      	ldr	r2, [pc, #296]	; (26124 <recv+0x178>)
   25ffc:	011b      	lsls	r3, r3, #4
   25ffe:	18d3      	adds	r3, r2, r3
   26000:	330a      	adds	r3, #10
   26002:	781b      	ldrb	r3, [r3, #0]
   26004:	b2db      	uxtb	r3, r3
   26006:	2b01      	cmp	r3, #1
   26008:	d000      	beq.n	2600c <recv+0x60>
   2600a:	e082      	b.n	26112 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   2600c:	231e      	movs	r3, #30
   2600e:	18fb      	adds	r3, r7, r3
   26010:	2200      	movs	r2, #0
   26012:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   26014:	230f      	movs	r3, #15
   26016:	18fb      	adds	r3, r7, r3
   26018:	2200      	movs	r2, #0
   2601a:	569a      	ldrsb	r2, [r3, r2]
   2601c:	4b41      	ldr	r3, [pc, #260]	; (26124 <recv+0x178>)
   2601e:	0112      	lsls	r2, r2, #4
   26020:	68b9      	ldr	r1, [r7, #8]
   26022:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   26024:	230f      	movs	r3, #15
   26026:	18fb      	adds	r3, r7, r3
   26028:	781b      	ldrb	r3, [r3, #0]
   2602a:	b25b      	sxtb	r3, r3
   2602c:	4a3d      	ldr	r2, [pc, #244]	; (26124 <recv+0x178>)
   2602e:	011b      	lsls	r3, r3, #4
   26030:	18d3      	adds	r3, r2, r3
   26032:	3304      	adds	r3, #4
   26034:	220c      	movs	r2, #12
   26036:	18ba      	adds	r2, r7, r2
   26038:	8812      	ldrh	r2, [r2, #0]
   2603a:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   2603c:	230f      	movs	r3, #15
   2603e:	18fb      	adds	r3, r7, r3
   26040:	781b      	ldrb	r3, [r3, #0]
   26042:	b25b      	sxtb	r3, r3
   26044:	4a37      	ldr	r2, [pc, #220]	; (26124 <recv+0x178>)
   26046:	011b      	lsls	r3, r3, #4
   26048:	18d3      	adds	r3, r2, r3
   2604a:	330c      	adds	r3, #12
   2604c:	781b      	ldrb	r3, [r3, #0]
   2604e:	b2db      	uxtb	r3, r3
   26050:	2b00      	cmp	r3, #0
   26052:	d15e      	bne.n	26112 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   26054:	231d      	movs	r3, #29
   26056:	18fb      	adds	r3, r7, r3
   26058:	2246      	movs	r2, #70	; 0x46
   2605a:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   2605c:	230f      	movs	r3, #15
   2605e:	18fb      	adds	r3, r7, r3
   26060:	781b      	ldrb	r3, [r3, #0]
   26062:	b25b      	sxtb	r3, r3
   26064:	4a2f      	ldr	r2, [pc, #188]	; (26124 <recv+0x178>)
   26066:	011b      	lsls	r3, r3, #4
   26068:	18d3      	adds	r3, r2, r3
   2606a:	330c      	adds	r3, #12
   2606c:	2201      	movs	r2, #1
   2606e:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26070:	230f      	movs	r3, #15
   26072:	18fb      	adds	r3, r7, r3
   26074:	781b      	ldrb	r3, [r3, #0]
   26076:	b25b      	sxtb	r3, r3
   26078:	4a2a      	ldr	r2, [pc, #168]	; (26124 <recv+0x178>)
   2607a:	011b      	lsls	r3, r3, #4
   2607c:	18d3      	adds	r3, r2, r3
   2607e:	330b      	adds	r3, #11
   26080:	781b      	ldrb	r3, [r3, #0]
   26082:	b2db      	uxtb	r3, r3
   26084:	001a      	movs	r2, r3
   26086:	2301      	movs	r3, #1
   26088:	4013      	ands	r3, r2
   2608a:	d003      	beq.n	26094 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   2608c:	231d      	movs	r3, #29
   2608e:	18fb      	adds	r3, r7, r3
   26090:	224d      	movs	r2, #77	; 0x4d
   26092:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   26094:	687b      	ldr	r3, [r7, #4]
   26096:	2b00      	cmp	r3, #0
   26098:	d105      	bne.n	260a6 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2609a:	2314      	movs	r3, #20
   2609c:	18fb      	adds	r3, r7, r3
   2609e:	2201      	movs	r2, #1
   260a0:	4252      	negs	r2, r2
   260a2:	601a      	str	r2, [r3, #0]
   260a4:	e003      	b.n	260ae <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   260a6:	2314      	movs	r3, #20
   260a8:	18fb      	adds	r3, r7, r3
   260aa:	687a      	ldr	r2, [r7, #4]
   260ac:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   260ae:	2314      	movs	r3, #20
   260b0:	18fb      	adds	r3, r7, r3
   260b2:	220f      	movs	r2, #15
   260b4:	18ba      	adds	r2, r7, r2
   260b6:	7812      	ldrb	r2, [r2, #0]
   260b8:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   260ba:	230f      	movs	r3, #15
   260bc:	18fb      	adds	r3, r7, r3
   260be:	781b      	ldrb	r3, [r3, #0]
   260c0:	b25b      	sxtb	r3, r3
   260c2:	4a18      	ldr	r2, [pc, #96]	; (26124 <recv+0x178>)
   260c4:	011b      	lsls	r3, r3, #4
   260c6:	18d3      	adds	r3, r2, r3
   260c8:	3306      	adds	r3, #6
   260ca:	881b      	ldrh	r3, [r3, #0]
   260cc:	b29a      	uxth	r2, r3
   260ce:	2314      	movs	r3, #20
   260d0:	18fb      	adds	r3, r7, r3
   260d2:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   260d4:	2314      	movs	r3, #20
   260d6:	18fa      	adds	r2, r7, r3
   260d8:	231d      	movs	r3, #29
   260da:	18fb      	adds	r3, r7, r3
   260dc:	7819      	ldrb	r1, [r3, #0]
   260de:	2300      	movs	r3, #0
   260e0:	9302      	str	r3, [sp, #8]
   260e2:	2300      	movs	r3, #0
   260e4:	9301      	str	r3, [sp, #4]
   260e6:	2300      	movs	r3, #0
   260e8:	9300      	str	r3, [sp, #0]
   260ea:	2308      	movs	r3, #8
   260ec:	2002      	movs	r0, #2
   260ee:	4c0e      	ldr	r4, [pc, #56]	; (26128 <recv+0x17c>)
   260f0:	47a0      	blx	r4
   260f2:	0003      	movs	r3, r0
   260f4:	001a      	movs	r2, r3
   260f6:	231e      	movs	r3, #30
   260f8:	18fb      	adds	r3, r7, r3
   260fa:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   260fc:	231e      	movs	r3, #30
   260fe:	18fb      	adds	r3, r7, r3
   26100:	2200      	movs	r2, #0
   26102:	5e9b      	ldrsh	r3, [r3, r2]
   26104:	2b00      	cmp	r3, #0
   26106:	d004      	beq.n	26112 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   26108:	231e      	movs	r3, #30
   2610a:	18fb      	adds	r3, r7, r3
   2610c:	220e      	movs	r2, #14
   2610e:	4252      	negs	r2, r2
   26110:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   26112:	231e      	movs	r3, #30
   26114:	18fb      	adds	r3, r7, r3
   26116:	2200      	movs	r2, #0
   26118:	5e9b      	ldrsh	r3, [r3, r2]
}
   2611a:	0018      	movs	r0, r3
   2611c:	46bd      	mov	sp, r7
   2611e:	b009      	add	sp, #36	; 0x24
   26120:	bd90      	pop	{r4, r7, pc}
   26122:	46c0      	nop			; (mov r8, r8)
   26124:	20005b04 	.word	0x20005b04
   26128:	000213f1 	.word	0x000213f1

0002612c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   2612c:	b5b0      	push	{r4, r5, r7, lr}
   2612e:	b088      	sub	sp, #32
   26130:	af04      	add	r7, sp, #16
   26132:	0002      	movs	r2, r0
   26134:	1dfb      	adds	r3, r7, #7
   26136:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   26138:	230f      	movs	r3, #15
   2613a:	18fb      	adds	r3, r7, r3
   2613c:	22fa      	movs	r2, #250	; 0xfa
   2613e:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   26140:	4b43      	ldr	r3, [pc, #268]	; (26250 <close+0x124>)
   26142:	0018      	movs	r0, r3
   26144:	4b43      	ldr	r3, [pc, #268]	; (26254 <close+0x128>)
   26146:	4798      	blx	r3
   26148:	1dfb      	adds	r3, r7, #7
   2614a:	2200      	movs	r2, #0
   2614c:	569a      	ldrsb	r2, [r3, r2]
   2614e:	4b42      	ldr	r3, [pc, #264]	; (26258 <close+0x12c>)
   26150:	0011      	movs	r1, r2
   26152:	0018      	movs	r0, r3
   26154:	4b3f      	ldr	r3, [pc, #252]	; (26254 <close+0x128>)
   26156:	4798      	blx	r3
   26158:	4b40      	ldr	r3, [pc, #256]	; (2625c <close+0x130>)
   2615a:	0018      	movs	r0, r3
   2615c:	4b3d      	ldr	r3, [pc, #244]	; (26254 <close+0x128>)
   2615e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   26160:	1dfb      	adds	r3, r7, #7
   26162:	781b      	ldrb	r3, [r3, #0]
   26164:	2b7f      	cmp	r3, #127	; 0x7f
   26166:	d86a      	bhi.n	2623e <close+0x112>
   26168:	1dfb      	adds	r3, r7, #7
   2616a:	781b      	ldrb	r3, [r3, #0]
   2616c:	b25b      	sxtb	r3, r3
   2616e:	4a3c      	ldr	r2, [pc, #240]	; (26260 <close+0x134>)
   26170:	011b      	lsls	r3, r3, #4
   26172:	18d3      	adds	r3, r2, r3
   26174:	330a      	adds	r3, #10
   26176:	781b      	ldrb	r3, [r3, #0]
   26178:	b2db      	uxtb	r3, r3
   2617a:	2b01      	cmp	r3, #1
   2617c:	d15f      	bne.n	2623e <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   2617e:	230e      	movs	r3, #14
   26180:	18fb      	adds	r3, r7, r3
   26182:	2249      	movs	r2, #73	; 0x49
   26184:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   26186:	2308      	movs	r3, #8
   26188:	18fb      	adds	r3, r7, r3
   2618a:	1dfa      	adds	r2, r7, #7
   2618c:	7812      	ldrb	r2, [r2, #0]
   2618e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   26190:	1dfb      	adds	r3, r7, #7
   26192:	781b      	ldrb	r3, [r3, #0]
   26194:	b25b      	sxtb	r3, r3
   26196:	4a32      	ldr	r2, [pc, #200]	; (26260 <close+0x134>)
   26198:	011b      	lsls	r3, r3, #4
   2619a:	18d3      	adds	r3, r2, r3
   2619c:	3306      	adds	r3, #6
   2619e:	881b      	ldrh	r3, [r3, #0]
   261a0:	b29a      	uxth	r2, r3
   261a2:	2308      	movs	r3, #8
   261a4:	18fb      	adds	r3, r7, r3
   261a6:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   261a8:	1dfb      	adds	r3, r7, #7
   261aa:	781b      	ldrb	r3, [r3, #0]
   261ac:	b25b      	sxtb	r3, r3
   261ae:	4a2c      	ldr	r2, [pc, #176]	; (26260 <close+0x134>)
   261b0:	011b      	lsls	r3, r3, #4
   261b2:	18d3      	adds	r3, r2, r3
   261b4:	330a      	adds	r3, #10
   261b6:	2200      	movs	r2, #0
   261b8:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   261ba:	1dfb      	adds	r3, r7, #7
   261bc:	781b      	ldrb	r3, [r3, #0]
   261be:	b25b      	sxtb	r3, r3
   261c0:	4a27      	ldr	r2, [pc, #156]	; (26260 <close+0x134>)
   261c2:	011b      	lsls	r3, r3, #4
   261c4:	18d3      	adds	r3, r2, r3
   261c6:	3306      	adds	r3, #6
   261c8:	2200      	movs	r2, #0
   261ca:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   261cc:	1dfb      	adds	r3, r7, #7
   261ce:	781b      	ldrb	r3, [r3, #0]
   261d0:	b25b      	sxtb	r3, r3
   261d2:	4a23      	ldr	r2, [pc, #140]	; (26260 <close+0x134>)
   261d4:	011b      	lsls	r3, r3, #4
   261d6:	18d3      	adds	r3, r2, r3
   261d8:	330b      	adds	r3, #11
   261da:	781b      	ldrb	r3, [r3, #0]
   261dc:	b2db      	uxtb	r3, r3
   261de:	001a      	movs	r2, r3
   261e0:	2301      	movs	r3, #1
   261e2:	4013      	ands	r3, r2
   261e4:	d003      	beq.n	261ee <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   261e6:	230e      	movs	r3, #14
   261e8:	18fb      	adds	r3, r7, r3
   261ea:	224e      	movs	r2, #78	; 0x4e
   261ec:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   261ee:	230f      	movs	r3, #15
   261f0:	18fc      	adds	r4, r7, r3
   261f2:	2308      	movs	r3, #8
   261f4:	18fa      	adds	r2, r7, r3
   261f6:	230e      	movs	r3, #14
   261f8:	18fb      	adds	r3, r7, r3
   261fa:	7819      	ldrb	r1, [r3, #0]
   261fc:	2300      	movs	r3, #0
   261fe:	9302      	str	r3, [sp, #8]
   26200:	2300      	movs	r3, #0
   26202:	9301      	str	r3, [sp, #4]
   26204:	2300      	movs	r3, #0
   26206:	9300      	str	r3, [sp, #0]
   26208:	2304      	movs	r3, #4
   2620a:	2002      	movs	r0, #2
   2620c:	4d15      	ldr	r5, [pc, #84]	; (26264 <close+0x138>)
   2620e:	47a8      	blx	r5
   26210:	0003      	movs	r3, r0
   26212:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   26214:	230f      	movs	r3, #15
   26216:	18fb      	adds	r3, r7, r3
   26218:	781b      	ldrb	r3, [r3, #0]
   2621a:	b25b      	sxtb	r3, r3
   2621c:	2b00      	cmp	r3, #0
   2621e:	d003      	beq.n	26228 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   26220:	230f      	movs	r3, #15
   26222:	18fb      	adds	r3, r7, r3
   26224:	22f7      	movs	r2, #247	; 0xf7
   26226:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   26228:	1dfb      	adds	r3, r7, #7
   2622a:	781b      	ldrb	r3, [r3, #0]
   2622c:	b25b      	sxtb	r3, r3
   2622e:	011a      	lsls	r2, r3, #4
   26230:	4b0b      	ldr	r3, [pc, #44]	; (26260 <close+0x134>)
   26232:	18d3      	adds	r3, r2, r3
   26234:	2210      	movs	r2, #16
   26236:	2100      	movs	r1, #0
   26238:	0018      	movs	r0, r3
   2623a:	4b0b      	ldr	r3, [pc, #44]	; (26268 <close+0x13c>)
   2623c:	4798      	blx	r3
	}
	return s8Ret;
   2623e:	230f      	movs	r3, #15
   26240:	18fb      	adds	r3, r7, r3
   26242:	781b      	ldrb	r3, [r3, #0]
   26244:	b25b      	sxtb	r3, r3
}
   26246:	0018      	movs	r0, r3
   26248:	46bd      	mov	sp, r7
   2624a:	b004      	add	sp, #16
   2624c:	bdb0      	pop	{r4, r5, r7, pc}
   2624e:	46c0      	nop			; (mov r8, r8)
   26250:	00039c40 	.word	0x00039c40
   26254:	0001e3f9 	.word	0x0001e3f9
   26258:	00039c80 	.word	0x00039c80
   2625c:	00039c60 	.word	0x00039c60
   26260:	20005b04 	.word	0x20005b04
   26264:	000213f1 	.word	0x000213f1
   26268:	00021191 	.word	0x00021191

0002626c <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   2626c:	b580      	push	{r7, lr}
   2626e:	b086      	sub	sp, #24
   26270:	af00      	add	r7, sp, #0
   26272:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   26274:	2300      	movs	r3, #0
   26276:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   26278:	2317      	movs	r3, #23
   2627a:	18fb      	adds	r3, r7, r3
   2627c:	2200      	movs	r2, #0
   2627e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   26280:	2316      	movs	r3, #22
   26282:	18fb      	adds	r3, r7, r3
   26284:	2200      	movs	r2, #0
   26286:	701a      	strb	r2, [r3, #0]
   26288:	e060      	b.n	2634c <nmi_inet_addr+0xe0>
	{
		j = 0;
   2628a:	2315      	movs	r3, #21
   2628c:	18fb      	adds	r3, r7, r3
   2628e:	2200      	movs	r2, #0
   26290:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   26292:	2314      	movs	r3, #20
   26294:	18fb      	adds	r3, r7, r3
   26296:	687a      	ldr	r2, [r7, #4]
   26298:	7812      	ldrb	r2, [r2, #0]
   2629a:	701a      	strb	r2, [r3, #0]
			++j;
   2629c:	2315      	movs	r3, #21
   2629e:	18fb      	adds	r3, r7, r3
   262a0:	2215      	movs	r2, #21
   262a2:	18ba      	adds	r2, r7, r2
   262a4:	7812      	ldrb	r2, [r2, #0]
   262a6:	3201      	adds	r2, #1
   262a8:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   262aa:	2315      	movs	r3, #21
   262ac:	18fb      	adds	r3, r7, r3
   262ae:	781b      	ldrb	r3, [r3, #0]
   262b0:	2b04      	cmp	r3, #4
   262b2:	d901      	bls.n	262b8 <nmi_inet_addr+0x4c>
			{
				return 0;
   262b4:	2300      	movs	r3, #0
   262b6:	e057      	b.n	26368 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   262b8:	2314      	movs	r3, #20
   262ba:	18fb      	adds	r3, r7, r3
   262bc:	781b      	ldrb	r3, [r3, #0]
   262be:	2b2e      	cmp	r3, #46	; 0x2e
   262c0:	d004      	beq.n	262cc <nmi_inet_addr+0x60>
   262c2:	2314      	movs	r3, #20
   262c4:	18fb      	adds	r3, r7, r3
   262c6:	781b      	ldrb	r3, [r3, #0]
   262c8:	2b00      	cmp	r3, #0
   262ca:	d10d      	bne.n	262e8 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   262cc:	2316      	movs	r3, #22
   262ce:	18fb      	adds	r3, r7, r3
   262d0:	781b      	ldrb	r3, [r3, #0]
   262d2:	220c      	movs	r2, #12
   262d4:	18ba      	adds	r2, r7, r2
   262d6:	2117      	movs	r1, #23
   262d8:	1879      	adds	r1, r7, r1
   262da:	7809      	ldrb	r1, [r1, #0]
   262dc:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   262de:	2317      	movs	r3, #23
   262e0:	18fb      	adds	r3, r7, r3
   262e2:	2200      	movs	r2, #0
   262e4:	701a      	strb	r2, [r3, #0]
   262e6:	e01d      	b.n	26324 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   262e8:	2314      	movs	r3, #20
   262ea:	18fb      	adds	r3, r7, r3
   262ec:	781b      	ldrb	r3, [r3, #0]
   262ee:	2b2f      	cmp	r3, #47	; 0x2f
   262f0:	d916      	bls.n	26320 <nmi_inet_addr+0xb4>
   262f2:	2314      	movs	r3, #20
   262f4:	18fb      	adds	r3, r7, r3
   262f6:	781b      	ldrb	r3, [r3, #0]
   262f8:	2b39      	cmp	r3, #57	; 0x39
   262fa:	d811      	bhi.n	26320 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   262fc:	2317      	movs	r3, #23
   262fe:	18fb      	adds	r3, r7, r3
   26300:	781b      	ldrb	r3, [r3, #0]
   26302:	1c1a      	adds	r2, r3, #0
   26304:	0092      	lsls	r2, r2, #2
   26306:	18d3      	adds	r3, r2, r3
   26308:	18db      	adds	r3, r3, r3
   2630a:	b2da      	uxtb	r2, r3
   2630c:	2314      	movs	r3, #20
   2630e:	18fb      	adds	r3, r7, r3
   26310:	781b      	ldrb	r3, [r3, #0]
   26312:	18d3      	adds	r3, r2, r3
   26314:	b2da      	uxtb	r2, r3
   26316:	2317      	movs	r3, #23
   26318:	18fb      	adds	r3, r7, r3
   2631a:	3a30      	subs	r2, #48	; 0x30
   2631c:	701a      	strb	r2, [r3, #0]
   2631e:	e001      	b.n	26324 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   26320:	2300      	movs	r3, #0
   26322:	e021      	b.n	26368 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   26324:	687b      	ldr	r3, [r7, #4]
   26326:	3301      	adds	r3, #1
   26328:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   2632a:	2314      	movs	r3, #20
   2632c:	18fb      	adds	r3, r7, r3
   2632e:	781b      	ldrb	r3, [r3, #0]
   26330:	2b2e      	cmp	r3, #46	; 0x2e
   26332:	d004      	beq.n	2633e <nmi_inet_addr+0xd2>
   26334:	2314      	movs	r3, #20
   26336:	18fb      	adds	r3, r7, r3
   26338:	781b      	ldrb	r3, [r3, #0]
   2633a:	2b00      	cmp	r3, #0
   2633c:	d1a9      	bne.n	26292 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   2633e:	2316      	movs	r3, #22
   26340:	18fb      	adds	r3, r7, r3
   26342:	2216      	movs	r2, #22
   26344:	18ba      	adds	r2, r7, r2
   26346:	7812      	ldrb	r2, [r2, #0]
   26348:	3201      	adds	r2, #1
   2634a:	701a      	strb	r2, [r3, #0]
   2634c:	2316      	movs	r3, #22
   2634e:	18fb      	adds	r3, r7, r3
   26350:	781b      	ldrb	r3, [r3, #0]
   26352:	2b03      	cmp	r3, #3
   26354:	d999      	bls.n	2628a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   26356:	230c      	movs	r3, #12
   26358:	18f9      	adds	r1, r7, r3
   2635a:	2310      	movs	r3, #16
   2635c:	18fb      	adds	r3, r7, r3
   2635e:	2204      	movs	r2, #4
   26360:	0018      	movs	r0, r3
   26362:	4b03      	ldr	r3, [pc, #12]	; (26370 <nmi_inet_addr+0x104>)
   26364:	4798      	blx	r3
	return u32IP;
   26366:	693b      	ldr	r3, [r7, #16]
}
   26368:	0018      	movs	r0, r3
   2636a:	46bd      	mov	sp, r7
   2636c:	b006      	add	sp, #24
   2636e:	bd80      	pop	{r7, pc}
   26370:	00021155 	.word	0x00021155

00026374 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   26374:	b5b0      	push	{r4, r5, r7, lr}
   26376:	b088      	sub	sp, #32
   26378:	af04      	add	r7, sp, #16
   2637a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   2637c:	230f      	movs	r3, #15
   2637e:	18fb      	adds	r3, r7, r3
   26380:	22fa      	movs	r2, #250	; 0xfa
   26382:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   26384:	687b      	ldr	r3, [r7, #4]
   26386:	0018      	movs	r0, r3
   26388:	4b14      	ldr	r3, [pc, #80]	; (263dc <gethostbyname+0x68>)
   2638a:	4798      	blx	r3
   2638c:	0003      	movs	r3, r0
   2638e:	001a      	movs	r2, r3
   26390:	230e      	movs	r3, #14
   26392:	18fb      	adds	r3, r7, r3
   26394:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   26396:	230e      	movs	r3, #14
   26398:	18fb      	adds	r3, r7, r3
   2639a:	781b      	ldrb	r3, [r3, #0]
   2639c:	2b40      	cmp	r3, #64	; 0x40
   2639e:	d815      	bhi.n	263cc <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   263a0:	230e      	movs	r3, #14
   263a2:	18fb      	adds	r3, r7, r3
   263a4:	781b      	ldrb	r3, [r3, #0]
   263a6:	b29b      	uxth	r3, r3
   263a8:	3301      	adds	r3, #1
   263aa:	b299      	uxth	r1, r3
   263ac:	230f      	movs	r3, #15
   263ae:	18fc      	adds	r4, r7, r3
   263b0:	687a      	ldr	r2, [r7, #4]
   263b2:	2300      	movs	r3, #0
   263b4:	9302      	str	r3, [sp, #8]
   263b6:	2300      	movs	r3, #0
   263b8:	9301      	str	r3, [sp, #4]
   263ba:	2300      	movs	r3, #0
   263bc:	9300      	str	r3, [sp, #0]
   263be:	000b      	movs	r3, r1
   263c0:	214a      	movs	r1, #74	; 0x4a
   263c2:	2002      	movs	r0, #2
   263c4:	4d06      	ldr	r5, [pc, #24]	; (263e0 <gethostbyname+0x6c>)
   263c6:	47a8      	blx	r5
   263c8:	0003      	movs	r3, r0
   263ca:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   263cc:	230f      	movs	r3, #15
   263ce:	18fb      	adds	r3, r7, r3
   263d0:	781b      	ldrb	r3, [r3, #0]
   263d2:	b25b      	sxtb	r3, r3
}
   263d4:	0018      	movs	r0, r3
   263d6:	46bd      	mov	sp, r7
   263d8:	b004      	add	sp, #16
   263da:	bdb0      	pop	{r4, r5, r7, pc}
   263dc:	000211cf 	.word	0x000211cf
   263e0:	000213f1 	.word	0x000213f1

000263e4 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   263e4:	b580      	push	{r7, lr}
   263e6:	b082      	sub	sp, #8
   263e8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   263ea:	003b      	movs	r3, r7
   263ec:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   263ee:	687b      	ldr	r3, [r7, #4]
   263f0:	22b9      	movs	r2, #185	; 0xb9
   263f2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   263f4:	4b13      	ldr	r3, [pc, #76]	; (26444 <spi_flash_enter_low_power_mode+0x60>)
   263f6:	2100      	movs	r1, #0
   263f8:	0018      	movs	r0, r3
   263fa:	4b13      	ldr	r3, [pc, #76]	; (26448 <spi_flash_enter_low_power_mode+0x64>)
   263fc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   263fe:	687b      	ldr	r3, [r7, #4]
   26400:	781b      	ldrb	r3, [r3, #0]
   26402:	001a      	movs	r2, r3
   26404:	4b11      	ldr	r3, [pc, #68]	; (2644c <spi_flash_enter_low_power_mode+0x68>)
   26406:	0011      	movs	r1, r2
   26408:	0018      	movs	r0, r3
   2640a:	4b0f      	ldr	r3, [pc, #60]	; (26448 <spi_flash_enter_low_power_mode+0x64>)
   2640c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2640e:	4b10      	ldr	r3, [pc, #64]	; (26450 <spi_flash_enter_low_power_mode+0x6c>)
   26410:	2101      	movs	r1, #1
   26412:	0018      	movs	r0, r3
   26414:	4b0c      	ldr	r3, [pc, #48]	; (26448 <spi_flash_enter_low_power_mode+0x64>)
   26416:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26418:	4b0e      	ldr	r3, [pc, #56]	; (26454 <spi_flash_enter_low_power_mode+0x70>)
   2641a:	2100      	movs	r1, #0
   2641c:	0018      	movs	r0, r3
   2641e:	4b0a      	ldr	r3, [pc, #40]	; (26448 <spi_flash_enter_low_power_mode+0x64>)
   26420:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   26422:	4b0d      	ldr	r3, [pc, #52]	; (26458 <spi_flash_enter_low_power_mode+0x74>)
   26424:	2181      	movs	r1, #129	; 0x81
   26426:	0018      	movs	r0, r3
   26428:	4b07      	ldr	r3, [pc, #28]	; (26448 <spi_flash_enter_low_power_mode+0x64>)
   2642a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   2642c:	46c0      	nop			; (mov r8, r8)
   2642e:	4b0b      	ldr	r3, [pc, #44]	; (2645c <spi_flash_enter_low_power_mode+0x78>)
   26430:	0018      	movs	r0, r3
   26432:	4b0b      	ldr	r3, [pc, #44]	; (26460 <spi_flash_enter_low_power_mode+0x7c>)
   26434:	4798      	blx	r3
   26436:	0003      	movs	r3, r0
   26438:	2b01      	cmp	r3, #1
   2643a:	d1f8      	bne.n	2642e <spi_flash_enter_low_power_mode+0x4a>
}
   2643c:	46c0      	nop			; (mov r8, r8)
   2643e:	46bd      	mov	sp, r7
   26440:	b002      	add	sp, #8
   26442:	bd80      	pop	{r7, pc}
   26444:	00010208 	.word	0x00010208
   26448:	00023245 	.word	0x00023245
   2644c:	0001020c 	.word	0x0001020c
   26450:	00010214 	.word	0x00010214
   26454:	0001021c 	.word	0x0001021c
   26458:	00010204 	.word	0x00010204
   2645c:	00010218 	.word	0x00010218
   26460:	00023201 	.word	0x00023201

00026464 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   26464:	b580      	push	{r7, lr}
   26466:	b082      	sub	sp, #8
   26468:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   2646a:	003b      	movs	r3, r7
   2646c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   2646e:	687b      	ldr	r3, [r7, #4]
   26470:	22ab      	movs	r2, #171	; 0xab
   26472:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26474:	4b13      	ldr	r3, [pc, #76]	; (264c4 <spi_flash_leave_low_power_mode+0x60>)
   26476:	2100      	movs	r1, #0
   26478:	0018      	movs	r0, r3
   2647a:	4b13      	ldr	r3, [pc, #76]	; (264c8 <spi_flash_leave_low_power_mode+0x64>)
   2647c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2647e:	687b      	ldr	r3, [r7, #4]
   26480:	781b      	ldrb	r3, [r3, #0]
   26482:	001a      	movs	r2, r3
   26484:	4b11      	ldr	r3, [pc, #68]	; (264cc <spi_flash_leave_low_power_mode+0x68>)
   26486:	0011      	movs	r1, r2
   26488:	0018      	movs	r0, r3
   2648a:	4b0f      	ldr	r3, [pc, #60]	; (264c8 <spi_flash_leave_low_power_mode+0x64>)
   2648c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2648e:	4b10      	ldr	r3, [pc, #64]	; (264d0 <spi_flash_leave_low_power_mode+0x6c>)
   26490:	2101      	movs	r1, #1
   26492:	0018      	movs	r0, r3
   26494:	4b0c      	ldr	r3, [pc, #48]	; (264c8 <spi_flash_leave_low_power_mode+0x64>)
   26496:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26498:	4b0e      	ldr	r3, [pc, #56]	; (264d4 <spi_flash_leave_low_power_mode+0x70>)
   2649a:	2100      	movs	r1, #0
   2649c:	0018      	movs	r0, r3
   2649e:	4b0a      	ldr	r3, [pc, #40]	; (264c8 <spi_flash_leave_low_power_mode+0x64>)
   264a0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   264a2:	4b0d      	ldr	r3, [pc, #52]	; (264d8 <spi_flash_leave_low_power_mode+0x74>)
   264a4:	2181      	movs	r1, #129	; 0x81
   264a6:	0018      	movs	r0, r3
   264a8:	4b07      	ldr	r3, [pc, #28]	; (264c8 <spi_flash_leave_low_power_mode+0x64>)
   264aa:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   264ac:	46c0      	nop			; (mov r8, r8)
   264ae:	4b0b      	ldr	r3, [pc, #44]	; (264dc <spi_flash_leave_low_power_mode+0x78>)
   264b0:	0018      	movs	r0, r3
   264b2:	4b0b      	ldr	r3, [pc, #44]	; (264e0 <spi_flash_leave_low_power_mode+0x7c>)
   264b4:	4798      	blx	r3
   264b6:	0003      	movs	r3, r0
   264b8:	2b01      	cmp	r3, #1
   264ba:	d1f8      	bne.n	264ae <spi_flash_leave_low_power_mode+0x4a>
}
   264bc:	46c0      	nop			; (mov r8, r8)
   264be:	46bd      	mov	sp, r7
   264c0:	b002      	add	sp, #8
   264c2:	bd80      	pop	{r7, pc}
   264c4:	00010208 	.word	0x00010208
   264c8:	00023245 	.word	0x00023245
   264cc:	0001020c 	.word	0x0001020c
   264d0:	00010214 	.word	0x00010214
   264d4:	0001021c 	.word	0x0001021c
   264d8:	00010204 	.word	0x00010204
   264dc:	00010218 	.word	0x00010218
   264e0:	00023201 	.word	0x00023201

000264e4 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   264e4:	b590      	push	{r4, r7, lr}
   264e6:	b085      	sub	sp, #20
   264e8:	af00      	add	r7, sp, #0
   264ea:	0002      	movs	r2, r0
   264ec:	1dfb      	adds	r3, r7, #7
   264ee:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   264f0:	230f      	movs	r3, #15
   264f2:	18fb      	adds	r3, r7, r3
   264f4:	2200      	movs	r2, #0
   264f6:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   264f8:	4b24      	ldr	r3, [pc, #144]	; (2658c <spi_flash_enable+0xa8>)
   264fa:	4798      	blx	r3
   264fc:	0003      	movs	r3, r0
   264fe:	051b      	lsls	r3, r3, #20
   26500:	0d1b      	lsrs	r3, r3, #20
   26502:	4a23      	ldr	r2, [pc, #140]	; (26590 <spi_flash_enable+0xac>)
   26504:	4293      	cmp	r3, r2
   26506:	d938      	bls.n	2657a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   26508:	230f      	movs	r3, #15
   2650a:	18fc      	adds	r4, r7, r3
   2650c:	2308      	movs	r3, #8
   2650e:	18fb      	adds	r3, r7, r3
   26510:	4a20      	ldr	r2, [pc, #128]	; (26594 <spi_flash_enable+0xb0>)
   26512:	0019      	movs	r1, r3
   26514:	0010      	movs	r0, r2
   26516:	4b20      	ldr	r3, [pc, #128]	; (26598 <spi_flash_enable+0xb4>)
   26518:	4798      	blx	r3
   2651a:	0003      	movs	r3, r0
   2651c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   2651e:	230f      	movs	r3, #15
   26520:	18fb      	adds	r3, r7, r3
   26522:	781b      	ldrb	r3, [r3, #0]
   26524:	b25b      	sxtb	r3, r3
   26526:	2b00      	cmp	r3, #0
   26528:	d126      	bne.n	26578 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   2652a:	68bb      	ldr	r3, [r7, #8]
   2652c:	4a1b      	ldr	r2, [pc, #108]	; (2659c <spi_flash_enable+0xb8>)
   2652e:	4013      	ands	r3, r2
   26530:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   26532:	68bb      	ldr	r3, [r7, #8]
   26534:	4a1a      	ldr	r2, [pc, #104]	; (265a0 <spi_flash_enable+0xbc>)
   26536:	4313      	orrs	r3, r2
   26538:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   2653a:	68bb      	ldr	r3, [r7, #8]
   2653c:	4a15      	ldr	r2, [pc, #84]	; (26594 <spi_flash_enable+0xb0>)
   2653e:	0019      	movs	r1, r3
   26540:	0010      	movs	r0, r2
   26542:	4b18      	ldr	r3, [pc, #96]	; (265a4 <spi_flash_enable+0xc0>)
   26544:	4798      	blx	r3
		if(enable) {
   26546:	1dfb      	adds	r3, r7, #7
   26548:	781b      	ldrb	r3, [r3, #0]
   2654a:	2b00      	cmp	r3, #0
   2654c:	d002      	beq.n	26554 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   2654e:	4b16      	ldr	r3, [pc, #88]	; (265a8 <spi_flash_enable+0xc4>)
   26550:	4798      	blx	r3
   26552:	e001      	b.n	26558 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   26554:	4b15      	ldr	r3, [pc, #84]	; (265ac <spi_flash_enable+0xc8>)
   26556:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   26558:	68bb      	ldr	r3, [r7, #8]
   2655a:	4a10      	ldr	r2, [pc, #64]	; (2659c <spi_flash_enable+0xb8>)
   2655c:	4013      	ands	r3, r2
   2655e:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   26560:	68bb      	ldr	r3, [r7, #8]
   26562:	2280      	movs	r2, #128	; 0x80
   26564:	0252      	lsls	r2, r2, #9
   26566:	4313      	orrs	r3, r2
   26568:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   2656a:	68bb      	ldr	r3, [r7, #8]
   2656c:	4a09      	ldr	r2, [pc, #36]	; (26594 <spi_flash_enable+0xb0>)
   2656e:	0019      	movs	r1, r3
   26570:	0010      	movs	r0, r2
   26572:	4b0c      	ldr	r3, [pc, #48]	; (265a4 <spi_flash_enable+0xc0>)
   26574:	4798      	blx	r3
   26576:	e000      	b.n	2657a <spi_flash_enable+0x96>
			goto ERR1;
   26578:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   2657a:	230f      	movs	r3, #15
   2657c:	18fb      	adds	r3, r7, r3
   2657e:	781b      	ldrb	r3, [r3, #0]
   26580:	b25b      	sxtb	r3, r3
}
   26582:	0018      	movs	r0, r3
   26584:	46bd      	mov	sp, r7
   26586:	b005      	add	sp, #20
   26588:	bd90      	pop	{r4, r7, pc}
   2658a:	46c0      	nop			; (mov r8, r8)
   2658c:	00022b21 	.word	0x00022b21
   26590:	0000039f 	.word	0x0000039f
   26594:	00001410 	.word	0x00001410
   26598:	00023221 	.word	0x00023221
   2659c:	f8888fff 	.word	0xf8888fff
   265a0:	01111000 	.word	0x01111000
   265a4:	00023245 	.word	0x00023245
   265a8:	00026465 	.word	0x00026465
   265ac:	000263e5 	.word	0x000263e5

000265b0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   265b0:	b580      	push	{r7, lr}
   265b2:	b084      	sub	sp, #16
   265b4:	af00      	add	r7, sp, #0
   265b6:	0002      	movs	r2, r0
   265b8:	1dfb      	adds	r3, r7, #7
   265ba:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   265bc:	1dfb      	adds	r3, r7, #7
   265be:	781b      	ldrb	r3, [r3, #0]
   265c0:	2b00      	cmp	r3, #0
   265c2:	d108      	bne.n	265d6 <mem_test_unit_ready+0x26>
   265c4:	1dfb      	adds	r3, r7, #7
   265c6:	781a      	ldrb	r2, [r3, #0]
   265c8:	4b08      	ldr	r3, [pc, #32]	; (265ec <mem_test_unit_ready+0x3c>)
   265ca:	0152      	lsls	r2, r2, #5
   265cc:	58d3      	ldr	r3, [r2, r3]
   265ce:	4798      	blx	r3
   265d0:	0003      	movs	r3, r0
   265d2:	001a      	movs	r2, r3
   265d4:	e000      	b.n	265d8 <mem_test_unit_ready+0x28>
   265d6:	2201      	movs	r2, #1
  status =
   265d8:	230f      	movs	r3, #15
   265da:	18fb      	adds	r3, r7, r3
   265dc:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   265de:	230f      	movs	r3, #15
   265e0:	18fb      	adds	r3, r7, r3
   265e2:	781b      	ldrb	r3, [r3, #0]
}
   265e4:	0018      	movs	r0, r3
   265e6:	46bd      	mov	sp, r7
   265e8:	b004      	add	sp, #16
   265ea:	bd80      	pop	{r7, pc}
   265ec:	00039d0c 	.word	0x00039d0c

000265f0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   265f0:	b580      	push	{r7, lr}
   265f2:	b084      	sub	sp, #16
   265f4:	af00      	add	r7, sp, #0
   265f6:	0002      	movs	r2, r0
   265f8:	6039      	str	r1, [r7, #0]
   265fa:	1dfb      	adds	r3, r7, #7
   265fc:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   265fe:	1dfb      	adds	r3, r7, #7
   26600:	781b      	ldrb	r3, [r3, #0]
   26602:	2b00      	cmp	r3, #0
   26604:	d10c      	bne.n	26620 <mem_read_capacity+0x30>
   26606:	1dfb      	adds	r3, r7, #7
   26608:	781b      	ldrb	r3, [r3, #0]
   2660a:	4a0b      	ldr	r2, [pc, #44]	; (26638 <mem_read_capacity+0x48>)
   2660c:	015b      	lsls	r3, r3, #5
   2660e:	18d3      	adds	r3, r2, r3
   26610:	3304      	adds	r3, #4
   26612:	681b      	ldr	r3, [r3, #0]
   26614:	683a      	ldr	r2, [r7, #0]
   26616:	0010      	movs	r0, r2
   26618:	4798      	blx	r3
   2661a:	0003      	movs	r3, r0
   2661c:	001a      	movs	r2, r3
   2661e:	e000      	b.n	26622 <mem_read_capacity+0x32>
   26620:	2201      	movs	r2, #1
  status =
   26622:	230f      	movs	r3, #15
   26624:	18fb      	adds	r3, r7, r3
   26626:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26628:	230f      	movs	r3, #15
   2662a:	18fb      	adds	r3, r7, r3
   2662c:	781b      	ldrb	r3, [r3, #0]
}
   2662e:	0018      	movs	r0, r3
   26630:	46bd      	mov	sp, r7
   26632:	b004      	add	sp, #16
   26634:	bd80      	pop	{r7, pc}
   26636:	46c0      	nop			; (mov r8, r8)
   26638:	00039d0c 	.word	0x00039d0c

0002663c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   2663c:	b580      	push	{r7, lr}
   2663e:	b084      	sub	sp, #16
   26640:	af00      	add	r7, sp, #0
   26642:	0002      	movs	r2, r0
   26644:	1dfb      	adds	r3, r7, #7
   26646:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   26648:	1dfb      	adds	r3, r7, #7
   2664a:	781b      	ldrb	r3, [r3, #0]
   2664c:	425a      	negs	r2, r3
   2664e:	4153      	adcs	r3, r2
   26650:	b2da      	uxtb	r2, r3
  sector_size =
   26652:	230f      	movs	r3, #15
   26654:	18fb      	adds	r3, r7, r3
   26656:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   26658:	230f      	movs	r3, #15
   2665a:	18fb      	adds	r3, r7, r3
   2665c:	781b      	ldrb	r3, [r3, #0]
}
   2665e:	0018      	movs	r0, r3
   26660:	46bd      	mov	sp, r7
   26662:	b004      	add	sp, #16
   26664:	bd80      	pop	{r7, pc}
	...

00026668 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   26668:	b580      	push	{r7, lr}
   2666a:	b084      	sub	sp, #16
   2666c:	af00      	add	r7, sp, #0
   2666e:	0002      	movs	r2, r0
   26670:	1dfb      	adds	r3, r7, #7
   26672:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   26674:	1dfb      	adds	r3, r7, #7
   26676:	781b      	ldrb	r3, [r3, #0]
   26678:	2b00      	cmp	r3, #0
   2667a:	d109      	bne.n	26690 <mem_wr_protect+0x28>
   2667c:	1dfb      	adds	r3, r7, #7
   2667e:	781b      	ldrb	r3, [r3, #0]
   26680:	4a0a      	ldr	r2, [pc, #40]	; (266ac <mem_wr_protect+0x44>)
   26682:	015b      	lsls	r3, r3, #5
   26684:	18d3      	adds	r3, r2, r3
   26686:	330c      	adds	r3, #12
   26688:	681b      	ldr	r3, [r3, #0]
   2668a:	4798      	blx	r3
   2668c:	1e03      	subs	r3, r0, #0
   2668e:	d001      	beq.n	26694 <mem_wr_protect+0x2c>
   26690:	2201      	movs	r2, #1
   26692:	e000      	b.n	26696 <mem_wr_protect+0x2e>
   26694:	2200      	movs	r2, #0
  wr_protect =
   26696:	230f      	movs	r3, #15
   26698:	18fb      	adds	r3, r7, r3
   2669a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   2669c:	230f      	movs	r3, #15
   2669e:	18fb      	adds	r3, r7, r3
   266a0:	781b      	ldrb	r3, [r3, #0]
}
   266a2:	0018      	movs	r0, r3
   266a4:	46bd      	mov	sp, r7
   266a6:	b004      	add	sp, #16
   266a8:	bd80      	pop	{r7, pc}
   266aa:	46c0      	nop			; (mov r8, r8)
   266ac:	00039d0c 	.word	0x00039d0c

000266b0 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   266b0:	b580      	push	{r7, lr}
   266b2:	b086      	sub	sp, #24
   266b4:	af00      	add	r7, sp, #0
   266b6:	60b9      	str	r1, [r7, #8]
   266b8:	607a      	str	r2, [r7, #4]
   266ba:	230f      	movs	r3, #15
   266bc:	18fb      	adds	r3, r7, r3
   266be:	1c02      	adds	r2, r0, #0
   266c0:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   266c2:	230f      	movs	r3, #15
   266c4:	18fb      	adds	r3, r7, r3
   266c6:	781b      	ldrb	r3, [r3, #0]
   266c8:	2b00      	cmp	r3, #0
   266ca:	d10e      	bne.n	266ea <memory_2_ram+0x3a>
   266cc:	230f      	movs	r3, #15
   266ce:	18fb      	adds	r3, r7, r3
   266d0:	781b      	ldrb	r3, [r3, #0]
   266d2:	4a0b      	ldr	r2, [pc, #44]	; (26700 <memory_2_ram+0x50>)
   266d4:	015b      	lsls	r3, r3, #5
   266d6:	18d3      	adds	r3, r2, r3
   266d8:	3314      	adds	r3, #20
   266da:	681b      	ldr	r3, [r3, #0]
   266dc:	6879      	ldr	r1, [r7, #4]
   266de:	68ba      	ldr	r2, [r7, #8]
   266e0:	0010      	movs	r0, r2
   266e2:	4798      	blx	r3
   266e4:	0003      	movs	r3, r0
   266e6:	001a      	movs	r2, r3
   266e8:	e000      	b.n	266ec <memory_2_ram+0x3c>
   266ea:	2201      	movs	r2, #1
  status =
   266ec:	2317      	movs	r3, #23
   266ee:	18fb      	adds	r3, r7, r3
   266f0:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   266f2:	2317      	movs	r3, #23
   266f4:	18fb      	adds	r3, r7, r3
   266f6:	781b      	ldrb	r3, [r3, #0]
}
   266f8:	0018      	movs	r0, r3
   266fa:	46bd      	mov	sp, r7
   266fc:	b006      	add	sp, #24
   266fe:	bd80      	pop	{r7, pc}
   26700:	00039d0c 	.word	0x00039d0c

00026704 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   26704:	b580      	push	{r7, lr}
   26706:	b086      	sub	sp, #24
   26708:	af00      	add	r7, sp, #0
   2670a:	60b9      	str	r1, [r7, #8]
   2670c:	607a      	str	r2, [r7, #4]
   2670e:	230f      	movs	r3, #15
   26710:	18fb      	adds	r3, r7, r3
   26712:	1c02      	adds	r2, r0, #0
   26714:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   26716:	230f      	movs	r3, #15
   26718:	18fb      	adds	r3, r7, r3
   2671a:	781b      	ldrb	r3, [r3, #0]
   2671c:	2b00      	cmp	r3, #0
   2671e:	d10e      	bne.n	2673e <ram_2_memory+0x3a>
   26720:	230f      	movs	r3, #15
   26722:	18fb      	adds	r3, r7, r3
   26724:	781b      	ldrb	r3, [r3, #0]
   26726:	4a0b      	ldr	r2, [pc, #44]	; (26754 <ram_2_memory+0x50>)
   26728:	015b      	lsls	r3, r3, #5
   2672a:	18d3      	adds	r3, r2, r3
   2672c:	3318      	adds	r3, #24
   2672e:	681b      	ldr	r3, [r3, #0]
   26730:	6879      	ldr	r1, [r7, #4]
   26732:	68ba      	ldr	r2, [r7, #8]
   26734:	0010      	movs	r0, r2
   26736:	4798      	blx	r3
   26738:	0003      	movs	r3, r0
   2673a:	001a      	movs	r2, r3
   2673c:	e000      	b.n	26740 <ram_2_memory+0x3c>
   2673e:	2201      	movs	r2, #1
  status =
   26740:	2317      	movs	r3, #23
   26742:	18fb      	adds	r3, r7, r3
   26744:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   26746:	2317      	movs	r3, #23
   26748:	18fb      	adds	r3, r7, r3
   2674a:	781b      	ldrb	r3, [r3, #0]
}
   2674c:	0018      	movs	r0, r3
   2674e:	46bd      	mov	sp, r7
   26750:	b006      	add	sp, #24
   26752:	bd80      	pop	{r7, pc}
   26754:	00039d0c 	.word	0x00039d0c

00026758 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   26758:	b580      	push	{r7, lr}
   2675a:	b082      	sub	sp, #8
   2675c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   2675e:	4b10      	ldr	r3, [pc, #64]	; (267a0 <cpu_irq_enter_critical+0x48>)
   26760:	681b      	ldr	r3, [r3, #0]
   26762:	2b00      	cmp	r3, #0
   26764:	d112      	bne.n	2678c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   26766:	f3ef 8310 	mrs	r3, PRIMASK
   2676a:	607b      	str	r3, [r7, #4]
  return(result);
   2676c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   2676e:	2b00      	cmp	r3, #0
   26770:	d109      	bne.n	26786 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   26772:	b672      	cpsid	i
   26774:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   26778:	4b0a      	ldr	r3, [pc, #40]	; (267a4 <cpu_irq_enter_critical+0x4c>)
   2677a:	2200      	movs	r2, #0
   2677c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   2677e:	4b0a      	ldr	r3, [pc, #40]	; (267a8 <cpu_irq_enter_critical+0x50>)
   26780:	2201      	movs	r2, #1
   26782:	701a      	strb	r2, [r3, #0]
   26784:	e002      	b.n	2678c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   26786:	4b08      	ldr	r3, [pc, #32]	; (267a8 <cpu_irq_enter_critical+0x50>)
   26788:	2200      	movs	r2, #0
   2678a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   2678c:	4b04      	ldr	r3, [pc, #16]	; (267a0 <cpu_irq_enter_critical+0x48>)
   2678e:	681b      	ldr	r3, [r3, #0]
   26790:	1c5a      	adds	r2, r3, #1
   26792:	4b03      	ldr	r3, [pc, #12]	; (267a0 <cpu_irq_enter_critical+0x48>)
   26794:	601a      	str	r2, [r3, #0]
}
   26796:	46c0      	nop			; (mov r8, r8)
   26798:	46bd      	mov	sp, r7
   2679a:	b002      	add	sp, #8
   2679c:	bd80      	pop	{r7, pc}
   2679e:	46c0      	nop			; (mov r8, r8)
   267a0:	200042b8 	.word	0x200042b8
   267a4:	20000126 	.word	0x20000126
   267a8:	200042bc 	.word	0x200042bc

000267ac <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   267ac:	b580      	push	{r7, lr}
   267ae:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   267b0:	4b0b      	ldr	r3, [pc, #44]	; (267e0 <cpu_irq_leave_critical+0x34>)
   267b2:	681b      	ldr	r3, [r3, #0]
   267b4:	1e5a      	subs	r2, r3, #1
   267b6:	4b0a      	ldr	r3, [pc, #40]	; (267e0 <cpu_irq_leave_critical+0x34>)
   267b8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   267ba:	4b09      	ldr	r3, [pc, #36]	; (267e0 <cpu_irq_leave_critical+0x34>)
   267bc:	681b      	ldr	r3, [r3, #0]
   267be:	2b00      	cmp	r3, #0
   267c0:	d10a      	bne.n	267d8 <cpu_irq_leave_critical+0x2c>
   267c2:	4b08      	ldr	r3, [pc, #32]	; (267e4 <cpu_irq_leave_critical+0x38>)
   267c4:	781b      	ldrb	r3, [r3, #0]
   267c6:	b2db      	uxtb	r3, r3
   267c8:	2b00      	cmp	r3, #0
   267ca:	d005      	beq.n	267d8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   267cc:	4b06      	ldr	r3, [pc, #24]	; (267e8 <cpu_irq_leave_critical+0x3c>)
   267ce:	2201      	movs	r2, #1
   267d0:	701a      	strb	r2, [r3, #0]
   267d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   267d6:	b662      	cpsie	i
	}
}
   267d8:	46c0      	nop			; (mov r8, r8)
   267da:	46bd      	mov	sp, r7
   267dc:	bd80      	pop	{r7, pc}
   267de:	46c0      	nop			; (mov r8, r8)
   267e0:	200042b8 	.word	0x200042b8
   267e4:	200042bc 	.word	0x200042bc
   267e8:	20000126 	.word	0x20000126

000267ec <system_pinmux_get_group_from_gpio_pin>:
{
   267ec:	b580      	push	{r7, lr}
   267ee:	b084      	sub	sp, #16
   267f0:	af00      	add	r7, sp, #0
   267f2:	0002      	movs	r2, r0
   267f4:	1dfb      	adds	r3, r7, #7
   267f6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   267f8:	230f      	movs	r3, #15
   267fa:	18fb      	adds	r3, r7, r3
   267fc:	1dfa      	adds	r2, r7, #7
   267fe:	7812      	ldrb	r2, [r2, #0]
   26800:	09d2      	lsrs	r2, r2, #7
   26802:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26804:	230e      	movs	r3, #14
   26806:	18fb      	adds	r3, r7, r3
   26808:	1dfa      	adds	r2, r7, #7
   2680a:	7812      	ldrb	r2, [r2, #0]
   2680c:	0952      	lsrs	r2, r2, #5
   2680e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   26810:	4b0d      	ldr	r3, [pc, #52]	; (26848 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26812:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26814:	230f      	movs	r3, #15
   26816:	18fb      	adds	r3, r7, r3
   26818:	781b      	ldrb	r3, [r3, #0]
   2681a:	2b00      	cmp	r3, #0
   2681c:	d10f      	bne.n	2683e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2681e:	230f      	movs	r3, #15
   26820:	18fb      	adds	r3, r7, r3
   26822:	781b      	ldrb	r3, [r3, #0]
   26824:	009b      	lsls	r3, r3, #2
   26826:	2210      	movs	r2, #16
   26828:	4694      	mov	ip, r2
   2682a:	44bc      	add	ip, r7
   2682c:	4463      	add	r3, ip
   2682e:	3b08      	subs	r3, #8
   26830:	681a      	ldr	r2, [r3, #0]
   26832:	230e      	movs	r3, #14
   26834:	18fb      	adds	r3, r7, r3
   26836:	781b      	ldrb	r3, [r3, #0]
   26838:	01db      	lsls	r3, r3, #7
   2683a:	18d3      	adds	r3, r2, r3
   2683c:	e000      	b.n	26840 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2683e:	2300      	movs	r3, #0
}
   26840:	0018      	movs	r0, r3
   26842:	46bd      	mov	sp, r7
   26844:	b004      	add	sp, #16
   26846:	bd80      	pop	{r7, pc}
   26848:	41004400 	.word	0x41004400

0002684c <port_get_group_from_gpio_pin>:
{
   2684c:	b580      	push	{r7, lr}
   2684e:	b082      	sub	sp, #8
   26850:	af00      	add	r7, sp, #0
   26852:	0002      	movs	r2, r0
   26854:	1dfb      	adds	r3, r7, #7
   26856:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26858:	1dfb      	adds	r3, r7, #7
   2685a:	781b      	ldrb	r3, [r3, #0]
   2685c:	0018      	movs	r0, r3
   2685e:	4b03      	ldr	r3, [pc, #12]	; (2686c <port_get_group_from_gpio_pin+0x20>)
   26860:	4798      	blx	r3
   26862:	0003      	movs	r3, r0
}
   26864:	0018      	movs	r0, r3
   26866:	46bd      	mov	sp, r7
   26868:	b002      	add	sp, #8
   2686a:	bd80      	pop	{r7, pc}
   2686c:	000267ed 	.word	0x000267ed

00026870 <port_get_config_defaults>:
{
   26870:	b580      	push	{r7, lr}
   26872:	b082      	sub	sp, #8
   26874:	af00      	add	r7, sp, #0
   26876:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   26878:	687b      	ldr	r3, [r7, #4]
   2687a:	2200      	movs	r2, #0
   2687c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2687e:	687b      	ldr	r3, [r7, #4]
   26880:	2201      	movs	r2, #1
   26882:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   26884:	687b      	ldr	r3, [r7, #4]
   26886:	2200      	movs	r2, #0
   26888:	709a      	strb	r2, [r3, #2]
}
   2688a:	46c0      	nop			; (mov r8, r8)
   2688c:	46bd      	mov	sp, r7
   2688e:	b002      	add	sp, #8
   26890:	bd80      	pop	{r7, pc}
	...

00026894 <port_pin_set_output_level>:
{
   26894:	b580      	push	{r7, lr}
   26896:	b084      	sub	sp, #16
   26898:	af00      	add	r7, sp, #0
   2689a:	0002      	movs	r2, r0
   2689c:	1dfb      	adds	r3, r7, #7
   2689e:	701a      	strb	r2, [r3, #0]
   268a0:	1dbb      	adds	r3, r7, #6
   268a2:	1c0a      	adds	r2, r1, #0
   268a4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   268a6:	1dfb      	adds	r3, r7, #7
   268a8:	781b      	ldrb	r3, [r3, #0]
   268aa:	0018      	movs	r0, r3
   268ac:	4b0d      	ldr	r3, [pc, #52]	; (268e4 <port_pin_set_output_level+0x50>)
   268ae:	4798      	blx	r3
   268b0:	0003      	movs	r3, r0
   268b2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   268b4:	1dfb      	adds	r3, r7, #7
   268b6:	781b      	ldrb	r3, [r3, #0]
   268b8:	221f      	movs	r2, #31
   268ba:	4013      	ands	r3, r2
   268bc:	2201      	movs	r2, #1
   268be:	409a      	lsls	r2, r3
   268c0:	0013      	movs	r3, r2
   268c2:	60bb      	str	r3, [r7, #8]
	if (level) {
   268c4:	1dbb      	adds	r3, r7, #6
   268c6:	781b      	ldrb	r3, [r3, #0]
   268c8:	2b00      	cmp	r3, #0
   268ca:	d003      	beq.n	268d4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   268cc:	68fb      	ldr	r3, [r7, #12]
   268ce:	68ba      	ldr	r2, [r7, #8]
   268d0:	619a      	str	r2, [r3, #24]
}
   268d2:	e002      	b.n	268da <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   268d4:	68fb      	ldr	r3, [r7, #12]
   268d6:	68ba      	ldr	r2, [r7, #8]
   268d8:	615a      	str	r2, [r3, #20]
}
   268da:	46c0      	nop			; (mov r8, r8)
   268dc:	46bd      	mov	sp, r7
   268de:	b004      	add	sp, #16
   268e0:	bd80      	pop	{r7, pc}
   268e2:	46c0      	nop			; (mov r8, r8)
   268e4:	0002684d 	.word	0x0002684d

000268e8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   268e8:	b580      	push	{r7, lr}
   268ea:	b082      	sub	sp, #8
   268ec:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   268ee:	1d3b      	adds	r3, r7, #4
   268f0:	0018      	movs	r0, r3
   268f2:	4b0e      	ldr	r3, [pc, #56]	; (2692c <system_board_init+0x44>)
   268f4:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   268f6:	1d3b      	adds	r3, r7, #4
   268f8:	2201      	movs	r2, #1
   268fa:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   268fc:	1d3b      	adds	r3, r7, #4
   268fe:	0019      	movs	r1, r3
   26900:	2017      	movs	r0, #23
   26902:	4b0b      	ldr	r3, [pc, #44]	; (26930 <system_board_init+0x48>)
   26904:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   26906:	2101      	movs	r1, #1
   26908:	2017      	movs	r0, #23
   2690a:	4b0a      	ldr	r3, [pc, #40]	; (26934 <system_board_init+0x4c>)
   2690c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   2690e:	1d3b      	adds	r3, r7, #4
   26910:	2200      	movs	r2, #0
   26912:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   26914:	1d3b      	adds	r3, r7, #4
   26916:	2201      	movs	r2, #1
   26918:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   2691a:	1d3b      	adds	r3, r7, #4
   2691c:	0019      	movs	r1, r3
   2691e:	2037      	movs	r0, #55	; 0x37
   26920:	4b03      	ldr	r3, [pc, #12]	; (26930 <system_board_init+0x48>)
   26922:	4798      	blx	r3
}
   26924:	46c0      	nop			; (mov r8, r8)
   26926:	46bd      	mov	sp, r7
   26928:	b002      	add	sp, #8
   2692a:	bd80      	pop	{r7, pc}
   2692c:	00026871 	.word	0x00026871
   26930:	00026f5d 	.word	0x00026f5d
   26934:	00026895 	.word	0x00026895

00026938 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   26938:	b580      	push	{r7, lr}
   2693a:	b084      	sub	sp, #16
   2693c:	af00      	add	r7, sp, #0
   2693e:	0002      	movs	r2, r0
   26940:	1dfb      	adds	r3, r7, #7
   26942:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26944:	230f      	movs	r3, #15
   26946:	18fb      	adds	r3, r7, r3
   26948:	1dfa      	adds	r2, r7, #7
   2694a:	7812      	ldrb	r2, [r2, #0]
   2694c:	0952      	lsrs	r2, r2, #5
   2694e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   26950:	230f      	movs	r3, #15
   26952:	18fb      	adds	r3, r7, r3
   26954:	781b      	ldrb	r3, [r3, #0]
   26956:	2b00      	cmp	r3, #0
   26958:	d10c      	bne.n	26974 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2695a:	4b09      	ldr	r3, [pc, #36]	; (26980 <_extint_get_eic_from_channel+0x48>)
   2695c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   2695e:	230f      	movs	r3, #15
   26960:	18fb      	adds	r3, r7, r3
   26962:	781b      	ldrb	r3, [r3, #0]
   26964:	009b      	lsls	r3, r3, #2
   26966:	2210      	movs	r2, #16
   26968:	4694      	mov	ip, r2
   2696a:	44bc      	add	ip, r7
   2696c:	4463      	add	r3, ip
   2696e:	3b08      	subs	r3, #8
   26970:	681b      	ldr	r3, [r3, #0]
   26972:	e000      	b.n	26976 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   26974:	2300      	movs	r3, #0
	}
}
   26976:	0018      	movs	r0, r3
   26978:	46bd      	mov	sp, r7
   2697a:	b004      	add	sp, #16
   2697c:	bd80      	pop	{r7, pc}
   2697e:	46c0      	nop			; (mov r8, r8)
   26980:	40001800 	.word	0x40001800

00026984 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   26984:	b580      	push	{r7, lr}
   26986:	b084      	sub	sp, #16
   26988:	af00      	add	r7, sp, #0
   2698a:	0002      	movs	r2, r0
   2698c:	1dfb      	adds	r3, r7, #7
   2698e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26990:	1dfb      	adds	r3, r7, #7
   26992:	781b      	ldrb	r3, [r3, #0]
   26994:	0018      	movs	r0, r3
   26996:	4b0b      	ldr	r3, [pc, #44]	; (269c4 <extint_chan_is_detected+0x40>)
   26998:	4798      	blx	r3
   2699a:	0003      	movs	r3, r0
   2699c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2699e:	1dfb      	adds	r3, r7, #7
   269a0:	781b      	ldrb	r3, [r3, #0]
   269a2:	221f      	movs	r2, #31
   269a4:	4013      	ands	r3, r2
   269a6:	2201      	movs	r2, #1
   269a8:	409a      	lsls	r2, r3
   269aa:	0013      	movs	r3, r2
   269ac:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   269ae:	68fb      	ldr	r3, [r7, #12]
   269b0:	691b      	ldr	r3, [r3, #16]
   269b2:	68ba      	ldr	r2, [r7, #8]
   269b4:	4013      	ands	r3, r2
   269b6:	1e5a      	subs	r2, r3, #1
   269b8:	4193      	sbcs	r3, r2
   269ba:	b2db      	uxtb	r3, r3
}
   269bc:	0018      	movs	r0, r3
   269be:	46bd      	mov	sp, r7
   269c0:	b004      	add	sp, #16
   269c2:	bd80      	pop	{r7, pc}
   269c4:	00026939 	.word	0x00026939

000269c8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   269c8:	b580      	push	{r7, lr}
   269ca:	b084      	sub	sp, #16
   269cc:	af00      	add	r7, sp, #0
   269ce:	0002      	movs	r2, r0
   269d0:	1dfb      	adds	r3, r7, #7
   269d2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   269d4:	1dfb      	adds	r3, r7, #7
   269d6:	781b      	ldrb	r3, [r3, #0]
   269d8:	0018      	movs	r0, r3
   269da:	4b09      	ldr	r3, [pc, #36]	; (26a00 <extint_chan_clear_detected+0x38>)
   269dc:	4798      	blx	r3
   269de:	0003      	movs	r3, r0
   269e0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   269e2:	1dfb      	adds	r3, r7, #7
   269e4:	781b      	ldrb	r3, [r3, #0]
   269e6:	221f      	movs	r2, #31
   269e8:	4013      	ands	r3, r2
   269ea:	2201      	movs	r2, #1
   269ec:	409a      	lsls	r2, r3
   269ee:	0013      	movs	r3, r2
   269f0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   269f2:	68fb      	ldr	r3, [r7, #12]
   269f4:	68ba      	ldr	r2, [r7, #8]
   269f6:	611a      	str	r2, [r3, #16]
}
   269f8:	46c0      	nop			; (mov r8, r8)
   269fa:	46bd      	mov	sp, r7
   269fc:	b004      	add	sp, #16
   269fe:	bd80      	pop	{r7, pc}
   26a00:	00026939 	.word	0x00026939

00026a04 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26a04:	b580      	push	{r7, lr}
   26a06:	b082      	sub	sp, #8
   26a08:	af00      	add	r7, sp, #0
   26a0a:	6078      	str	r0, [r7, #4]
   26a0c:	0008      	movs	r0, r1
   26a0e:	0011      	movs	r1, r2
   26a10:	1cfb      	adds	r3, r7, #3
   26a12:	1c02      	adds	r2, r0, #0
   26a14:	701a      	strb	r2, [r3, #0]
   26a16:	1cbb      	adds	r3, r7, #2
   26a18:	1c0a      	adds	r2, r1, #0
   26a1a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   26a1c:	1cbb      	adds	r3, r7, #2
   26a1e:	781b      	ldrb	r3, [r3, #0]
   26a20:	2b00      	cmp	r3, #0
   26a22:	d001      	beq.n	26a28 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   26a24:	2317      	movs	r3, #23
   26a26:	e019      	b.n	26a5c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   26a28:	1cfb      	adds	r3, r7, #3
   26a2a:	781a      	ldrb	r2, [r3, #0]
   26a2c:	4b0d      	ldr	r3, [pc, #52]	; (26a64 <extint_register_callback+0x60>)
   26a2e:	0092      	lsls	r2, r2, #2
   26a30:	58d3      	ldr	r3, [r2, r3]
   26a32:	2b00      	cmp	r3, #0
   26a34:	d107      	bne.n	26a46 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   26a36:	1cfb      	adds	r3, r7, #3
   26a38:	781a      	ldrb	r2, [r3, #0]
   26a3a:	4b0a      	ldr	r3, [pc, #40]	; (26a64 <extint_register_callback+0x60>)
   26a3c:	0092      	lsls	r2, r2, #2
   26a3e:	6879      	ldr	r1, [r7, #4]
   26a40:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   26a42:	2300      	movs	r3, #0
   26a44:	e00a      	b.n	26a5c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   26a46:	1cfb      	adds	r3, r7, #3
   26a48:	781a      	ldrb	r2, [r3, #0]
   26a4a:	4b06      	ldr	r3, [pc, #24]	; (26a64 <extint_register_callback+0x60>)
   26a4c:	0092      	lsls	r2, r2, #2
   26a4e:	58d2      	ldr	r2, [r2, r3]
   26a50:	687b      	ldr	r3, [r7, #4]
   26a52:	429a      	cmp	r2, r3
   26a54:	d101      	bne.n	26a5a <extint_register_callback+0x56>
		return STATUS_OK;
   26a56:	2300      	movs	r3, #0
   26a58:	e000      	b.n	26a5c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   26a5a:	231d      	movs	r3, #29
}
   26a5c:	0018      	movs	r0, r3
   26a5e:	46bd      	mov	sp, r7
   26a60:	b002      	add	sp, #8
   26a62:	bd80      	pop	{r7, pc}
   26a64:	20005bc4 	.word	0x20005bc4

00026a68 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26a68:	b580      	push	{r7, lr}
   26a6a:	b084      	sub	sp, #16
   26a6c:	af00      	add	r7, sp, #0
   26a6e:	0002      	movs	r2, r0
   26a70:	1dfb      	adds	r3, r7, #7
   26a72:	701a      	strb	r2, [r3, #0]
   26a74:	1dbb      	adds	r3, r7, #6
   26a76:	1c0a      	adds	r2, r1, #0
   26a78:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   26a7a:	1dbb      	adds	r3, r7, #6
   26a7c:	781b      	ldrb	r3, [r3, #0]
   26a7e:	2b00      	cmp	r3, #0
   26a80:	d10e      	bne.n	26aa0 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   26a82:	1dfb      	adds	r3, r7, #7
   26a84:	781b      	ldrb	r3, [r3, #0]
   26a86:	0018      	movs	r0, r3
   26a88:	4b08      	ldr	r3, [pc, #32]	; (26aac <extint_chan_enable_callback+0x44>)
   26a8a:	4798      	blx	r3
   26a8c:	0003      	movs	r3, r0
   26a8e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   26a90:	1dfb      	adds	r3, r7, #7
   26a92:	781b      	ldrb	r3, [r3, #0]
   26a94:	2201      	movs	r2, #1
   26a96:	409a      	lsls	r2, r3
   26a98:	68fb      	ldr	r3, [r7, #12]
   26a9a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   26a9c:	2300      	movs	r3, #0
   26a9e:	e000      	b.n	26aa2 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   26aa0:	2317      	movs	r3, #23
}
   26aa2:	0018      	movs	r0, r3
   26aa4:	46bd      	mov	sp, r7
   26aa6:	b004      	add	sp, #16
   26aa8:	bd80      	pop	{r7, pc}
   26aaa:	46c0      	nop			; (mov r8, r8)
   26aac:	00026939 	.word	0x00026939

00026ab0 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26ab0:	b580      	push	{r7, lr}
   26ab2:	b084      	sub	sp, #16
   26ab4:	af00      	add	r7, sp, #0
   26ab6:	0002      	movs	r2, r0
   26ab8:	1dfb      	adds	r3, r7, #7
   26aba:	701a      	strb	r2, [r3, #0]
   26abc:	1dbb      	adds	r3, r7, #6
   26abe:	1c0a      	adds	r2, r1, #0
   26ac0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   26ac2:	1dbb      	adds	r3, r7, #6
   26ac4:	781b      	ldrb	r3, [r3, #0]
   26ac6:	2b00      	cmp	r3, #0
   26ac8:	d10e      	bne.n	26ae8 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   26aca:	1dfb      	adds	r3, r7, #7
   26acc:	781b      	ldrb	r3, [r3, #0]
   26ace:	0018      	movs	r0, r3
   26ad0:	4b08      	ldr	r3, [pc, #32]	; (26af4 <extint_chan_disable_callback+0x44>)
   26ad2:	4798      	blx	r3
   26ad4:	0003      	movs	r3, r0
   26ad6:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   26ad8:	1dfb      	adds	r3, r7, #7
   26ada:	781b      	ldrb	r3, [r3, #0]
   26adc:	2201      	movs	r2, #1
   26ade:	409a      	lsls	r2, r3
   26ae0:	68fb      	ldr	r3, [r7, #12]
   26ae2:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   26ae4:	2300      	movs	r3, #0
   26ae6:	e000      	b.n	26aea <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   26ae8:	2317      	movs	r3, #23
}
   26aea:	0018      	movs	r0, r3
   26aec:	46bd      	mov	sp, r7
   26aee:	b004      	add	sp, #16
   26af0:	bd80      	pop	{r7, pc}
   26af2:	46c0      	nop			; (mov r8, r8)
   26af4:	00026939 	.word	0x00026939

00026af8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   26af8:	b580      	push	{r7, lr}
   26afa:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   26afc:	4b15      	ldr	r3, [pc, #84]	; (26b54 <EIC_Handler+0x5c>)
   26afe:	2200      	movs	r2, #0
   26b00:	701a      	strb	r2, [r3, #0]
   26b02:	e020      	b.n	26b46 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   26b04:	4b13      	ldr	r3, [pc, #76]	; (26b54 <EIC_Handler+0x5c>)
   26b06:	781b      	ldrb	r3, [r3, #0]
   26b08:	0018      	movs	r0, r3
   26b0a:	4b13      	ldr	r3, [pc, #76]	; (26b58 <EIC_Handler+0x60>)
   26b0c:	4798      	blx	r3
   26b0e:	1e03      	subs	r3, r0, #0
   26b10:	d013      	beq.n	26b3a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   26b12:	4b10      	ldr	r3, [pc, #64]	; (26b54 <EIC_Handler+0x5c>)
   26b14:	781b      	ldrb	r3, [r3, #0]
   26b16:	0018      	movs	r0, r3
   26b18:	4b10      	ldr	r3, [pc, #64]	; (26b5c <EIC_Handler+0x64>)
   26b1a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   26b1c:	4b0d      	ldr	r3, [pc, #52]	; (26b54 <EIC_Handler+0x5c>)
   26b1e:	781b      	ldrb	r3, [r3, #0]
   26b20:	001a      	movs	r2, r3
   26b22:	4b0f      	ldr	r3, [pc, #60]	; (26b60 <EIC_Handler+0x68>)
   26b24:	0092      	lsls	r2, r2, #2
   26b26:	58d3      	ldr	r3, [r2, r3]
   26b28:	2b00      	cmp	r3, #0
   26b2a:	d006      	beq.n	26b3a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   26b2c:	4b09      	ldr	r3, [pc, #36]	; (26b54 <EIC_Handler+0x5c>)
   26b2e:	781b      	ldrb	r3, [r3, #0]
   26b30:	001a      	movs	r2, r3
   26b32:	4b0b      	ldr	r3, [pc, #44]	; (26b60 <EIC_Handler+0x68>)
   26b34:	0092      	lsls	r2, r2, #2
   26b36:	58d3      	ldr	r3, [r2, r3]
   26b38:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   26b3a:	4b06      	ldr	r3, [pc, #24]	; (26b54 <EIC_Handler+0x5c>)
   26b3c:	781b      	ldrb	r3, [r3, #0]
   26b3e:	3301      	adds	r3, #1
   26b40:	b2da      	uxtb	r2, r3
   26b42:	4b04      	ldr	r3, [pc, #16]	; (26b54 <EIC_Handler+0x5c>)
   26b44:	701a      	strb	r2, [r3, #0]
   26b46:	4b03      	ldr	r3, [pc, #12]	; (26b54 <EIC_Handler+0x5c>)
   26b48:	781b      	ldrb	r3, [r3, #0]
   26b4a:	2b0f      	cmp	r3, #15
   26b4c:	d9da      	bls.n	26b04 <EIC_Handler+0xc>
			}
		}
	}
}
   26b4e:	46c0      	nop			; (mov r8, r8)
   26b50:	46bd      	mov	sp, r7
   26b52:	bd80      	pop	{r7, pc}
   26b54:	20005bc0 	.word	0x20005bc0
   26b58:	00026985 	.word	0x00026985
   26b5c:	000269c9 	.word	0x000269c9
   26b60:	20005bc4 	.word	0x20005bc4

00026b64 <system_gclk_chan_get_config_defaults>:
{
   26b64:	b580      	push	{r7, lr}
   26b66:	b082      	sub	sp, #8
   26b68:	af00      	add	r7, sp, #0
   26b6a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26b6c:	687b      	ldr	r3, [r7, #4]
   26b6e:	2200      	movs	r2, #0
   26b70:	701a      	strb	r2, [r3, #0]
}
   26b72:	46c0      	nop			; (mov r8, r8)
   26b74:	46bd      	mov	sp, r7
   26b76:	b002      	add	sp, #8
   26b78:	bd80      	pop	{r7, pc}
	...

00026b7c <system_apb_clock_set_mask>:
{
   26b7c:	b580      	push	{r7, lr}
   26b7e:	b082      	sub	sp, #8
   26b80:	af00      	add	r7, sp, #0
   26b82:	0002      	movs	r2, r0
   26b84:	6039      	str	r1, [r7, #0]
   26b86:	1dfb      	adds	r3, r7, #7
   26b88:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26b8a:	1dfb      	adds	r3, r7, #7
   26b8c:	781b      	ldrb	r3, [r3, #0]
   26b8e:	2b01      	cmp	r3, #1
   26b90:	d00a      	beq.n	26ba8 <system_apb_clock_set_mask+0x2c>
   26b92:	2b02      	cmp	r3, #2
   26b94:	d00f      	beq.n	26bb6 <system_apb_clock_set_mask+0x3a>
   26b96:	2b00      	cmp	r3, #0
   26b98:	d114      	bne.n	26bc4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26b9a:	4b0e      	ldr	r3, [pc, #56]	; (26bd4 <system_apb_clock_set_mask+0x58>)
   26b9c:	4a0d      	ldr	r2, [pc, #52]	; (26bd4 <system_apb_clock_set_mask+0x58>)
   26b9e:	6991      	ldr	r1, [r2, #24]
   26ba0:	683a      	ldr	r2, [r7, #0]
   26ba2:	430a      	orrs	r2, r1
   26ba4:	619a      	str	r2, [r3, #24]
			break;
   26ba6:	e00f      	b.n	26bc8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26ba8:	4b0a      	ldr	r3, [pc, #40]	; (26bd4 <system_apb_clock_set_mask+0x58>)
   26baa:	4a0a      	ldr	r2, [pc, #40]	; (26bd4 <system_apb_clock_set_mask+0x58>)
   26bac:	69d1      	ldr	r1, [r2, #28]
   26bae:	683a      	ldr	r2, [r7, #0]
   26bb0:	430a      	orrs	r2, r1
   26bb2:	61da      	str	r2, [r3, #28]
			break;
   26bb4:	e008      	b.n	26bc8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26bb6:	4b07      	ldr	r3, [pc, #28]	; (26bd4 <system_apb_clock_set_mask+0x58>)
   26bb8:	4a06      	ldr	r2, [pc, #24]	; (26bd4 <system_apb_clock_set_mask+0x58>)
   26bba:	6a11      	ldr	r1, [r2, #32]
   26bbc:	683a      	ldr	r2, [r7, #0]
   26bbe:	430a      	orrs	r2, r1
   26bc0:	621a      	str	r2, [r3, #32]
			break;
   26bc2:	e001      	b.n	26bc8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26bc4:	2317      	movs	r3, #23
   26bc6:	e000      	b.n	26bca <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26bc8:	2300      	movs	r3, #0
}
   26bca:	0018      	movs	r0, r3
   26bcc:	46bd      	mov	sp, r7
   26bce:	b002      	add	sp, #8
   26bd0:	bd80      	pop	{r7, pc}
   26bd2:	46c0      	nop			; (mov r8, r8)
   26bd4:	40000400 	.word	0x40000400

00026bd8 <system_pinmux_get_config_defaults>:
{
   26bd8:	b580      	push	{r7, lr}
   26bda:	b082      	sub	sp, #8
   26bdc:	af00      	add	r7, sp, #0
   26bde:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26be0:	687b      	ldr	r3, [r7, #4]
   26be2:	2280      	movs	r2, #128	; 0x80
   26be4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26be6:	687b      	ldr	r3, [r7, #4]
   26be8:	2200      	movs	r2, #0
   26bea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26bec:	687b      	ldr	r3, [r7, #4]
   26bee:	2201      	movs	r2, #1
   26bf0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26bf2:	687b      	ldr	r3, [r7, #4]
   26bf4:	2200      	movs	r2, #0
   26bf6:	70da      	strb	r2, [r3, #3]
}
   26bf8:	46c0      	nop			; (mov r8, r8)
   26bfa:	46bd      	mov	sp, r7
   26bfc:	b002      	add	sp, #8
   26bfe:	bd80      	pop	{r7, pc}

00026c00 <system_interrupt_enable>:
{
   26c00:	b580      	push	{r7, lr}
   26c02:	b082      	sub	sp, #8
   26c04:	af00      	add	r7, sp, #0
   26c06:	0002      	movs	r2, r0
   26c08:	1dfb      	adds	r3, r7, #7
   26c0a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26c0c:	4b06      	ldr	r3, [pc, #24]	; (26c28 <system_interrupt_enable+0x28>)
   26c0e:	1dfa      	adds	r2, r7, #7
   26c10:	7812      	ldrb	r2, [r2, #0]
   26c12:	0011      	movs	r1, r2
   26c14:	221f      	movs	r2, #31
   26c16:	400a      	ands	r2, r1
   26c18:	2101      	movs	r1, #1
   26c1a:	4091      	lsls	r1, r2
   26c1c:	000a      	movs	r2, r1
   26c1e:	601a      	str	r2, [r3, #0]
}
   26c20:	46c0      	nop			; (mov r8, r8)
   26c22:	46bd      	mov	sp, r7
   26c24:	b002      	add	sp, #8
   26c26:	bd80      	pop	{r7, pc}
   26c28:	e000e100 	.word	0xe000e100

00026c2c <_extint_get_eic_from_channel>:
{
   26c2c:	b580      	push	{r7, lr}
   26c2e:	b084      	sub	sp, #16
   26c30:	af00      	add	r7, sp, #0
   26c32:	0002      	movs	r2, r0
   26c34:	1dfb      	adds	r3, r7, #7
   26c36:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26c38:	230f      	movs	r3, #15
   26c3a:	18fb      	adds	r3, r7, r3
   26c3c:	1dfa      	adds	r2, r7, #7
   26c3e:	7812      	ldrb	r2, [r2, #0]
   26c40:	0952      	lsrs	r2, r2, #5
   26c42:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   26c44:	230f      	movs	r3, #15
   26c46:	18fb      	adds	r3, r7, r3
   26c48:	781b      	ldrb	r3, [r3, #0]
   26c4a:	2b00      	cmp	r3, #0
   26c4c:	d10c      	bne.n	26c68 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26c4e:	4b09      	ldr	r3, [pc, #36]	; (26c74 <_extint_get_eic_from_channel+0x48>)
   26c50:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   26c52:	230f      	movs	r3, #15
   26c54:	18fb      	adds	r3, r7, r3
   26c56:	781b      	ldrb	r3, [r3, #0]
   26c58:	009b      	lsls	r3, r3, #2
   26c5a:	2210      	movs	r2, #16
   26c5c:	4694      	mov	ip, r2
   26c5e:	44bc      	add	ip, r7
   26c60:	4463      	add	r3, ip
   26c62:	3b08      	subs	r3, #8
   26c64:	681b      	ldr	r3, [r3, #0]
   26c66:	e000      	b.n	26c6a <_extint_get_eic_from_channel+0x3e>
		return NULL;
   26c68:	2300      	movs	r3, #0
}
   26c6a:	0018      	movs	r0, r3
   26c6c:	46bd      	mov	sp, r7
   26c6e:	b004      	add	sp, #16
   26c70:	bd80      	pop	{r7, pc}
   26c72:	46c0      	nop			; (mov r8, r8)
   26c74:	40001800 	.word	0x40001800

00026c78 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   26c78:	b580      	push	{r7, lr}
   26c7a:	b082      	sub	sp, #8
   26c7c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26c7e:	4b0f      	ldr	r3, [pc, #60]	; (26cbc <extint_is_syncing+0x44>)
   26c80:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26c82:	2300      	movs	r3, #0
   26c84:	607b      	str	r3, [r7, #4]
   26c86:	e011      	b.n	26cac <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   26c88:	687b      	ldr	r3, [r7, #4]
   26c8a:	009b      	lsls	r3, r3, #2
   26c8c:	2208      	movs	r2, #8
   26c8e:	4694      	mov	ip, r2
   26c90:	44bc      	add	ip, r7
   26c92:	4463      	add	r3, ip
   26c94:	3b08      	subs	r3, #8
   26c96:	681b      	ldr	r3, [r3, #0]
   26c98:	785b      	ldrb	r3, [r3, #1]
   26c9a:	b2db      	uxtb	r3, r3
   26c9c:	b25b      	sxtb	r3, r3
   26c9e:	2b00      	cmp	r3, #0
   26ca0:	da01      	bge.n	26ca6 <extint_is_syncing+0x2e>
			return true;
   26ca2:	2301      	movs	r3, #1
   26ca4:	e006      	b.n	26cb4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26ca6:	687b      	ldr	r3, [r7, #4]
   26ca8:	3301      	adds	r3, #1
   26caa:	607b      	str	r3, [r7, #4]
   26cac:	687b      	ldr	r3, [r7, #4]
   26cae:	2b00      	cmp	r3, #0
   26cb0:	d0ea      	beq.n	26c88 <extint_is_syncing+0x10>
		}
	}
	return false;
   26cb2:	2300      	movs	r3, #0
}
   26cb4:	0018      	movs	r0, r3
   26cb6:	46bd      	mov	sp, r7
   26cb8:	b002      	add	sp, #8
   26cba:	bd80      	pop	{r7, pc}
   26cbc:	40001800 	.word	0x40001800

00026cc0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   26cc0:	b580      	push	{r7, lr}
   26cc2:	b084      	sub	sp, #16
   26cc4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26cc6:	4b2d      	ldr	r3, [pc, #180]	; (26d7c <_system_extint_init+0xbc>)
   26cc8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   26cca:	2140      	movs	r1, #64	; 0x40
   26ccc:	2000      	movs	r0, #0
   26cce:	4b2c      	ldr	r3, [pc, #176]	; (26d80 <_system_extint_init+0xc0>)
   26cd0:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26cd2:	003b      	movs	r3, r7
   26cd4:	0018      	movs	r0, r3
   26cd6:	4b2b      	ldr	r3, [pc, #172]	; (26d84 <_system_extint_init+0xc4>)
   26cd8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   26cda:	003b      	movs	r3, r7
   26cdc:	2200      	movs	r2, #0
   26cde:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   26ce0:	003b      	movs	r3, r7
   26ce2:	0019      	movs	r1, r3
   26ce4:	2005      	movs	r0, #5
   26ce6:	4b28      	ldr	r3, [pc, #160]	; (26d88 <_system_extint_init+0xc8>)
   26ce8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   26cea:	2005      	movs	r0, #5
   26cec:	4b27      	ldr	r3, [pc, #156]	; (26d8c <_system_extint_init+0xcc>)
   26cee:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26cf0:	2300      	movs	r3, #0
   26cf2:	60fb      	str	r3, [r7, #12]
   26cf4:	e018      	b.n	26d28 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   26cf6:	68fb      	ldr	r3, [r7, #12]
   26cf8:	009b      	lsls	r3, r3, #2
   26cfa:	2210      	movs	r2, #16
   26cfc:	4694      	mov	ip, r2
   26cfe:	44bc      	add	ip, r7
   26d00:	4463      	add	r3, ip
   26d02:	3b0c      	subs	r3, #12
   26d04:	681a      	ldr	r2, [r3, #0]
   26d06:	68fb      	ldr	r3, [r7, #12]
   26d08:	009b      	lsls	r3, r3, #2
   26d0a:	2110      	movs	r1, #16
   26d0c:	468c      	mov	ip, r1
   26d0e:	44bc      	add	ip, r7
   26d10:	4463      	add	r3, ip
   26d12:	3b0c      	subs	r3, #12
   26d14:	681b      	ldr	r3, [r3, #0]
   26d16:	781b      	ldrb	r3, [r3, #0]
   26d18:	b2db      	uxtb	r3, r3
   26d1a:	2101      	movs	r1, #1
   26d1c:	430b      	orrs	r3, r1
   26d1e:	b2db      	uxtb	r3, r3
   26d20:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26d22:	68fb      	ldr	r3, [r7, #12]
   26d24:	3301      	adds	r3, #1
   26d26:	60fb      	str	r3, [r7, #12]
   26d28:	68fb      	ldr	r3, [r7, #12]
   26d2a:	2b00      	cmp	r3, #0
   26d2c:	d0e3      	beq.n	26cf6 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   26d2e:	46c0      	nop			; (mov r8, r8)
   26d30:	4b17      	ldr	r3, [pc, #92]	; (26d90 <_system_extint_init+0xd0>)
   26d32:	4798      	blx	r3
   26d34:	1e03      	subs	r3, r0, #0
   26d36:	d1fb      	bne.n	26d30 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   26d38:	230b      	movs	r3, #11
   26d3a:	18fb      	adds	r3, r7, r3
   26d3c:	2200      	movs	r2, #0
   26d3e:	701a      	strb	r2, [r3, #0]
   26d40:	e00d      	b.n	26d5e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   26d42:	230b      	movs	r3, #11
   26d44:	18fb      	adds	r3, r7, r3
   26d46:	781a      	ldrb	r2, [r3, #0]
   26d48:	4b12      	ldr	r3, [pc, #72]	; (26d94 <_system_extint_init+0xd4>)
   26d4a:	0092      	lsls	r2, r2, #2
   26d4c:	2100      	movs	r1, #0
   26d4e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   26d50:	230b      	movs	r3, #11
   26d52:	18fb      	adds	r3, r7, r3
   26d54:	781a      	ldrb	r2, [r3, #0]
   26d56:	230b      	movs	r3, #11
   26d58:	18fb      	adds	r3, r7, r3
   26d5a:	3201      	adds	r2, #1
   26d5c:	701a      	strb	r2, [r3, #0]
   26d5e:	230b      	movs	r3, #11
   26d60:	18fb      	adds	r3, r7, r3
   26d62:	781b      	ldrb	r3, [r3, #0]
   26d64:	2b0f      	cmp	r3, #15
   26d66:	d9ec      	bls.n	26d42 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   26d68:	2004      	movs	r0, #4
   26d6a:	4b0b      	ldr	r3, [pc, #44]	; (26d98 <_system_extint_init+0xd8>)
   26d6c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   26d6e:	4b0b      	ldr	r3, [pc, #44]	; (26d9c <_system_extint_init+0xdc>)
   26d70:	4798      	blx	r3
}
   26d72:	46c0      	nop			; (mov r8, r8)
   26d74:	46bd      	mov	sp, r7
   26d76:	b004      	add	sp, #16
   26d78:	bd80      	pop	{r7, pc}
   26d7a:	46c0      	nop			; (mov r8, r8)
   26d7c:	40001800 	.word	0x40001800
   26d80:	00026b7d 	.word	0x00026b7d
   26d84:	00026b65 	.word	0x00026b65
   26d88:	0002a3ed 	.word	0x0002a3ed
   26d8c:	0002a431 	.word	0x0002a431
   26d90:	00026c79 	.word	0x00026c79
   26d94:	20005bc4 	.word	0x20005bc4
   26d98:	00026c01 	.word	0x00026c01
   26d9c:	00026da1 	.word	0x00026da1

00026da0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   26da0:	b580      	push	{r7, lr}
   26da2:	b082      	sub	sp, #8
   26da4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26da6:	4b15      	ldr	r3, [pc, #84]	; (26dfc <_extint_enable+0x5c>)
   26da8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26daa:	2300      	movs	r3, #0
   26dac:	607b      	str	r3, [r7, #4]
   26dae:	e018      	b.n	26de2 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   26db0:	687b      	ldr	r3, [r7, #4]
   26db2:	009b      	lsls	r3, r3, #2
   26db4:	2208      	movs	r2, #8
   26db6:	4694      	mov	ip, r2
   26db8:	44bc      	add	ip, r7
   26dba:	4463      	add	r3, ip
   26dbc:	3b08      	subs	r3, #8
   26dbe:	681a      	ldr	r2, [r3, #0]
   26dc0:	687b      	ldr	r3, [r7, #4]
   26dc2:	009b      	lsls	r3, r3, #2
   26dc4:	2108      	movs	r1, #8
   26dc6:	468c      	mov	ip, r1
   26dc8:	44bc      	add	ip, r7
   26dca:	4463      	add	r3, ip
   26dcc:	3b08      	subs	r3, #8
   26dce:	681b      	ldr	r3, [r3, #0]
   26dd0:	781b      	ldrb	r3, [r3, #0]
   26dd2:	b2db      	uxtb	r3, r3
   26dd4:	2102      	movs	r1, #2
   26dd6:	430b      	orrs	r3, r1
   26dd8:	b2db      	uxtb	r3, r3
   26dda:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26ddc:	687b      	ldr	r3, [r7, #4]
   26dde:	3301      	adds	r3, #1
   26de0:	607b      	str	r3, [r7, #4]
   26de2:	687b      	ldr	r3, [r7, #4]
   26de4:	2b00      	cmp	r3, #0
   26de6:	d0e3      	beq.n	26db0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   26de8:	46c0      	nop			; (mov r8, r8)
   26dea:	4b05      	ldr	r3, [pc, #20]	; (26e00 <_extint_enable+0x60>)
   26dec:	4798      	blx	r3
   26dee:	1e03      	subs	r3, r0, #0
   26df0:	d1fb      	bne.n	26dea <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   26df2:	46c0      	nop			; (mov r8, r8)
   26df4:	46bd      	mov	sp, r7
   26df6:	b002      	add	sp, #8
   26df8:	bd80      	pop	{r7, pc}
   26dfa:	46c0      	nop			; (mov r8, r8)
   26dfc:	40001800 	.word	0x40001800
   26e00:	00026c79 	.word	0x00026c79

00026e04 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   26e04:	b580      	push	{r7, lr}
   26e06:	b082      	sub	sp, #8
   26e08:	af00      	add	r7, sp, #0
   26e0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   26e0c:	687b      	ldr	r3, [r7, #4]
   26e0e:	2200      	movs	r2, #0
   26e10:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   26e12:	687b      	ldr	r3, [r7, #4]
   26e14:	2200      	movs	r2, #0
   26e16:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   26e18:	687b      	ldr	r3, [r7, #4]
   26e1a:	2201      	movs	r2, #1
   26e1c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   26e1e:	687b      	ldr	r3, [r7, #4]
   26e20:	2201      	movs	r2, #1
   26e22:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   26e24:	687b      	ldr	r3, [r7, #4]
   26e26:	2200      	movs	r2, #0
   26e28:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   26e2a:	687b      	ldr	r3, [r7, #4]
   26e2c:	2202      	movs	r2, #2
   26e2e:	72da      	strb	r2, [r3, #11]
}
   26e30:	46c0      	nop			; (mov r8, r8)
   26e32:	46bd      	mov	sp, r7
   26e34:	b002      	add	sp, #8
   26e36:	bd80      	pop	{r7, pc}

00026e38 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   26e38:	b580      	push	{r7, lr}
   26e3a:	b086      	sub	sp, #24
   26e3c:	af00      	add	r7, sp, #0
   26e3e:	0002      	movs	r2, r0
   26e40:	6039      	str	r1, [r7, #0]
   26e42:	1dfb      	adds	r3, r7, #7
   26e44:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   26e46:	2308      	movs	r3, #8
   26e48:	18fb      	adds	r3, r7, r3
   26e4a:	0018      	movs	r0, r3
   26e4c:	4b36      	ldr	r3, [pc, #216]	; (26f28 <extint_chan_set_config+0xf0>)
   26e4e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   26e50:	683b      	ldr	r3, [r7, #0]
   26e52:	685b      	ldr	r3, [r3, #4]
   26e54:	b2da      	uxtb	r2, r3
   26e56:	2308      	movs	r3, #8
   26e58:	18fb      	adds	r3, r7, r3
   26e5a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26e5c:	2308      	movs	r3, #8
   26e5e:	18fb      	adds	r3, r7, r3
   26e60:	2200      	movs	r2, #0
   26e62:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   26e64:	683b      	ldr	r3, [r7, #0]
   26e66:	7a1a      	ldrb	r2, [r3, #8]
   26e68:	2308      	movs	r3, #8
   26e6a:	18fb      	adds	r3, r7, r3
   26e6c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   26e6e:	683b      	ldr	r3, [r7, #0]
   26e70:	681b      	ldr	r3, [r3, #0]
   26e72:	b2db      	uxtb	r3, r3
   26e74:	2208      	movs	r2, #8
   26e76:	18ba      	adds	r2, r7, r2
   26e78:	0011      	movs	r1, r2
   26e7a:	0018      	movs	r0, r3
   26e7c:	4b2b      	ldr	r3, [pc, #172]	; (26f2c <extint_chan_set_config+0xf4>)
   26e7e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   26e80:	1dfb      	adds	r3, r7, #7
   26e82:	781b      	ldrb	r3, [r3, #0]
   26e84:	0018      	movs	r0, r3
   26e86:	4b2a      	ldr	r3, [pc, #168]	; (26f30 <extint_chan_set_config+0xf8>)
   26e88:	4798      	blx	r3
   26e8a:	0003      	movs	r3, r0
   26e8c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   26e8e:	1dfb      	adds	r3, r7, #7
   26e90:	781b      	ldrb	r3, [r3, #0]
   26e92:	2207      	movs	r2, #7
   26e94:	4013      	ands	r3, r2
   26e96:	009b      	lsls	r3, r3, #2
   26e98:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   26e9a:	683b      	ldr	r3, [r7, #0]
   26e9c:	7adb      	ldrb	r3, [r3, #11]
   26e9e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   26ea0:	683b      	ldr	r3, [r7, #0]
   26ea2:	7a9b      	ldrb	r3, [r3, #10]
   26ea4:	2b00      	cmp	r3, #0
   26ea6:	d003      	beq.n	26eb0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   26ea8:	697b      	ldr	r3, [r7, #20]
   26eaa:	2208      	movs	r2, #8
   26eac:	4313      	orrs	r3, r2
   26eae:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   26eb0:	1dfb      	adds	r3, r7, #7
   26eb2:	781b      	ldrb	r3, [r3, #0]
   26eb4:	08db      	lsrs	r3, r3, #3
   26eb6:	b2db      	uxtb	r3, r3
   26eb8:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   26eba:	1dfb      	adds	r3, r7, #7
   26ebc:	781b      	ldrb	r3, [r3, #0]
   26ebe:	08db      	lsrs	r3, r3, #3
   26ec0:	b2db      	uxtb	r3, r3
   26ec2:	001a      	movs	r2, r3
   26ec4:	693b      	ldr	r3, [r7, #16]
   26ec6:	3206      	adds	r2, #6
   26ec8:	0092      	lsls	r2, r2, #2
   26eca:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26ecc:	210f      	movs	r1, #15
   26ece:	68fa      	ldr	r2, [r7, #12]
   26ed0:	4091      	lsls	r1, r2
   26ed2:	000a      	movs	r2, r1
   26ed4:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26ed6:	401a      	ands	r2, r3
			(new_config << config_pos);
   26ed8:	6979      	ldr	r1, [r7, #20]
   26eda:	68fb      	ldr	r3, [r7, #12]
   26edc:	4099      	lsls	r1, r3
   26ede:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26ee0:	431a      	orrs	r2, r3
   26ee2:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26ee4:	693b      	ldr	r3, [r7, #16]
   26ee6:	1d82      	adds	r2, r0, #6
   26ee8:	0092      	lsls	r2, r2, #2
   26eea:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   26eec:	683b      	ldr	r3, [r7, #0]
   26eee:	7a5b      	ldrb	r3, [r3, #9]
   26ef0:	2b00      	cmp	r3, #0
   26ef2:	d00a      	beq.n	26f0a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   26ef4:	693b      	ldr	r3, [r7, #16]
   26ef6:	695a      	ldr	r2, [r3, #20]
   26ef8:	1dfb      	adds	r3, r7, #7
   26efa:	781b      	ldrb	r3, [r3, #0]
   26efc:	2101      	movs	r1, #1
   26efe:	4099      	lsls	r1, r3
   26f00:	000b      	movs	r3, r1
   26f02:	431a      	orrs	r2, r3
   26f04:	693b      	ldr	r3, [r7, #16]
   26f06:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   26f08:	e00a      	b.n	26f20 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   26f0a:	693b      	ldr	r3, [r7, #16]
   26f0c:	695b      	ldr	r3, [r3, #20]
   26f0e:	1dfa      	adds	r2, r7, #7
   26f10:	7812      	ldrb	r2, [r2, #0]
   26f12:	2101      	movs	r1, #1
   26f14:	4091      	lsls	r1, r2
   26f16:	000a      	movs	r2, r1
   26f18:	43d2      	mvns	r2, r2
   26f1a:	401a      	ands	r2, r3
   26f1c:	693b      	ldr	r3, [r7, #16]
   26f1e:	615a      	str	r2, [r3, #20]
}
   26f20:	46c0      	nop			; (mov r8, r8)
   26f22:	46bd      	mov	sp, r7
   26f24:	b006      	add	sp, #24
   26f26:	bd80      	pop	{r7, pc}
   26f28:	00026bd9 	.word	0x00026bd9
   26f2c:	0002a74d 	.word	0x0002a74d
   26f30:	00026c2d 	.word	0x00026c2d

00026f34 <system_pinmux_get_config_defaults>:
{
   26f34:	b580      	push	{r7, lr}
   26f36:	b082      	sub	sp, #8
   26f38:	af00      	add	r7, sp, #0
   26f3a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26f3c:	687b      	ldr	r3, [r7, #4]
   26f3e:	2280      	movs	r2, #128	; 0x80
   26f40:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26f42:	687b      	ldr	r3, [r7, #4]
   26f44:	2200      	movs	r2, #0
   26f46:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26f48:	687b      	ldr	r3, [r7, #4]
   26f4a:	2201      	movs	r2, #1
   26f4c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26f4e:	687b      	ldr	r3, [r7, #4]
   26f50:	2200      	movs	r2, #0
   26f52:	70da      	strb	r2, [r3, #3]
}
   26f54:	46c0      	nop			; (mov r8, r8)
   26f56:	46bd      	mov	sp, r7
   26f58:	b002      	add	sp, #8
   26f5a:	bd80      	pop	{r7, pc}

00026f5c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   26f5c:	b580      	push	{r7, lr}
   26f5e:	b084      	sub	sp, #16
   26f60:	af00      	add	r7, sp, #0
   26f62:	0002      	movs	r2, r0
   26f64:	6039      	str	r1, [r7, #0]
   26f66:	1dfb      	adds	r3, r7, #7
   26f68:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   26f6a:	230c      	movs	r3, #12
   26f6c:	18fb      	adds	r3, r7, r3
   26f6e:	0018      	movs	r0, r3
   26f70:	4b10      	ldr	r3, [pc, #64]	; (26fb4 <port_pin_set_config+0x58>)
   26f72:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   26f74:	230c      	movs	r3, #12
   26f76:	18fb      	adds	r3, r7, r3
   26f78:	2280      	movs	r2, #128	; 0x80
   26f7a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   26f7c:	683b      	ldr	r3, [r7, #0]
   26f7e:	781a      	ldrb	r2, [r3, #0]
   26f80:	230c      	movs	r3, #12
   26f82:	18fb      	adds	r3, r7, r3
   26f84:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   26f86:	683b      	ldr	r3, [r7, #0]
   26f88:	785a      	ldrb	r2, [r3, #1]
   26f8a:	230c      	movs	r3, #12
   26f8c:	18fb      	adds	r3, r7, r3
   26f8e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   26f90:	683b      	ldr	r3, [r7, #0]
   26f92:	789a      	ldrb	r2, [r3, #2]
   26f94:	230c      	movs	r3, #12
   26f96:	18fb      	adds	r3, r7, r3
   26f98:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   26f9a:	230c      	movs	r3, #12
   26f9c:	18fa      	adds	r2, r7, r3
   26f9e:	1dfb      	adds	r3, r7, #7
   26fa0:	781b      	ldrb	r3, [r3, #0]
   26fa2:	0011      	movs	r1, r2
   26fa4:	0018      	movs	r0, r3
   26fa6:	4b04      	ldr	r3, [pc, #16]	; (26fb8 <port_pin_set_config+0x5c>)
   26fa8:	4798      	blx	r3
}
   26faa:	46c0      	nop			; (mov r8, r8)
   26fac:	46bd      	mov	sp, r7
   26fae:	b004      	add	sp, #16
   26fb0:	bd80      	pop	{r7, pc}
   26fb2:	46c0      	nop			; (mov r8, r8)
   26fb4:	00026f35 	.word	0x00026f35
   26fb8:	0002a74d 	.word	0x0002a74d

00026fbc <system_gclk_chan_get_config_defaults>:
{
   26fbc:	b580      	push	{r7, lr}
   26fbe:	b082      	sub	sp, #8
   26fc0:	af00      	add	r7, sp, #0
   26fc2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26fc4:	687b      	ldr	r3, [r7, #4]
   26fc6:	2200      	movs	r2, #0
   26fc8:	701a      	strb	r2, [r3, #0]
}
   26fca:	46c0      	nop			; (mov r8, r8)
   26fcc:	46bd      	mov	sp, r7
   26fce:	b002      	add	sp, #8
   26fd0:	bd80      	pop	{r7, pc}
	...

00026fd4 <system_apb_clock_set_mask>:
{
   26fd4:	b580      	push	{r7, lr}
   26fd6:	b082      	sub	sp, #8
   26fd8:	af00      	add	r7, sp, #0
   26fda:	0002      	movs	r2, r0
   26fdc:	6039      	str	r1, [r7, #0]
   26fde:	1dfb      	adds	r3, r7, #7
   26fe0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26fe2:	1dfb      	adds	r3, r7, #7
   26fe4:	781b      	ldrb	r3, [r3, #0]
   26fe6:	2b01      	cmp	r3, #1
   26fe8:	d00a      	beq.n	27000 <system_apb_clock_set_mask+0x2c>
   26fea:	2b02      	cmp	r3, #2
   26fec:	d00f      	beq.n	2700e <system_apb_clock_set_mask+0x3a>
   26fee:	2b00      	cmp	r3, #0
   26ff0:	d114      	bne.n	2701c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26ff2:	4b0e      	ldr	r3, [pc, #56]	; (2702c <system_apb_clock_set_mask+0x58>)
   26ff4:	4a0d      	ldr	r2, [pc, #52]	; (2702c <system_apb_clock_set_mask+0x58>)
   26ff6:	6991      	ldr	r1, [r2, #24]
   26ff8:	683a      	ldr	r2, [r7, #0]
   26ffa:	430a      	orrs	r2, r1
   26ffc:	619a      	str	r2, [r3, #24]
			break;
   26ffe:	e00f      	b.n	27020 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27000:	4b0a      	ldr	r3, [pc, #40]	; (2702c <system_apb_clock_set_mask+0x58>)
   27002:	4a0a      	ldr	r2, [pc, #40]	; (2702c <system_apb_clock_set_mask+0x58>)
   27004:	69d1      	ldr	r1, [r2, #28]
   27006:	683a      	ldr	r2, [r7, #0]
   27008:	430a      	orrs	r2, r1
   2700a:	61da      	str	r2, [r3, #28]
			break;
   2700c:	e008      	b.n	27020 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2700e:	4b07      	ldr	r3, [pc, #28]	; (2702c <system_apb_clock_set_mask+0x58>)
   27010:	4a06      	ldr	r2, [pc, #24]	; (2702c <system_apb_clock_set_mask+0x58>)
   27012:	6a11      	ldr	r1, [r2, #32]
   27014:	683a      	ldr	r2, [r7, #0]
   27016:	430a      	orrs	r2, r1
   27018:	621a      	str	r2, [r3, #32]
			break;
   2701a:	e001      	b.n	27020 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2701c:	2317      	movs	r3, #23
   2701e:	e000      	b.n	27022 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27020:	2300      	movs	r3, #0
}
   27022:	0018      	movs	r0, r3
   27024:	46bd      	mov	sp, r7
   27026:	b002      	add	sp, #8
   27028:	bd80      	pop	{r7, pc}
   2702a:	46c0      	nop			; (mov r8, r8)
   2702c:	40000400 	.word	0x40000400

00027030 <system_interrupt_enable>:
{
   27030:	b580      	push	{r7, lr}
   27032:	b082      	sub	sp, #8
   27034:	af00      	add	r7, sp, #0
   27036:	0002      	movs	r2, r0
   27038:	1dfb      	adds	r3, r7, #7
   2703a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2703c:	4b06      	ldr	r3, [pc, #24]	; (27058 <system_interrupt_enable+0x28>)
   2703e:	1dfa      	adds	r2, r7, #7
   27040:	7812      	ldrb	r2, [r2, #0]
   27042:	0011      	movs	r1, r2
   27044:	221f      	movs	r2, #31
   27046:	400a      	ands	r2, r1
   27048:	2101      	movs	r1, #1
   2704a:	4091      	lsls	r1, r2
   2704c:	000a      	movs	r2, r1
   2704e:	601a      	str	r2, [r3, #0]
}
   27050:	46c0      	nop			; (mov r8, r8)
   27052:	46bd      	mov	sp, r7
   27054:	b002      	add	sp, #8
   27056:	bd80      	pop	{r7, pc}
   27058:	e000e100 	.word	0xe000e100

0002705c <system_interrupt_disable>:
{
   2705c:	b580      	push	{r7, lr}
   2705e:	b082      	sub	sp, #8
   27060:	af00      	add	r7, sp, #0
   27062:	0002      	movs	r2, r0
   27064:	1dfb      	adds	r3, r7, #7
   27066:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27068:	4a07      	ldr	r2, [pc, #28]	; (27088 <system_interrupt_disable+0x2c>)
   2706a:	1dfb      	adds	r3, r7, #7
   2706c:	781b      	ldrb	r3, [r3, #0]
   2706e:	0019      	movs	r1, r3
   27070:	231f      	movs	r3, #31
   27072:	400b      	ands	r3, r1
   27074:	2101      	movs	r1, #1
   27076:	4099      	lsls	r1, r3
   27078:	000b      	movs	r3, r1
   2707a:	0019      	movs	r1, r3
   2707c:	2380      	movs	r3, #128	; 0x80
   2707e:	50d1      	str	r1, [r2, r3]
}
   27080:	46c0      	nop			; (mov r8, r8)
   27082:	46bd      	mov	sp, r7
   27084:	b002      	add	sp, #8
   27086:	bd80      	pop	{r7, pc}
   27088:	e000e100 	.word	0xe000e100

0002708c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   2708c:	b580      	push	{r7, lr}
   2708e:	b084      	sub	sp, #16
   27090:	af00      	add	r7, sp, #0
   27092:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27094:	687b      	ldr	r3, [r7, #4]
   27096:	681b      	ldr	r3, [r3, #0]
   27098:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   2709a:	68fb      	ldr	r3, [r7, #12]
   2709c:	7a9b      	ldrb	r3, [r3, #10]
   2709e:	b2db      	uxtb	r3, r3
   270a0:	b25b      	sxtb	r3, r3
   270a2:	2b00      	cmp	r3, #0
   270a4:	da01      	bge.n	270aa <rtc_calendar_is_syncing+0x1e>
                return true;
   270a6:	2301      	movs	r3, #1
   270a8:	e000      	b.n	270ac <rtc_calendar_is_syncing+0x20>
        }

        return false;
   270aa:	2300      	movs	r3, #0
}
   270ac:	0018      	movs	r0, r3
   270ae:	46bd      	mov	sp, r7
   270b0:	b004      	add	sp, #16
   270b2:	bd80      	pop	{r7, pc}

000270b4 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   270b4:	b580      	push	{r7, lr}
   270b6:	b084      	sub	sp, #16
   270b8:	af00      	add	r7, sp, #0
   270ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   270bc:	687b      	ldr	r3, [r7, #4]
   270be:	681b      	ldr	r3, [r3, #0]
   270c0:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   270c2:	2003      	movs	r0, #3
   270c4:	4b0a      	ldr	r3, [pc, #40]	; (270f0 <rtc_calendar_enable+0x3c>)
   270c6:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   270c8:	46c0      	nop			; (mov r8, r8)
   270ca:	687b      	ldr	r3, [r7, #4]
   270cc:	0018      	movs	r0, r3
   270ce:	4b09      	ldr	r3, [pc, #36]	; (270f4 <rtc_calendar_enable+0x40>)
   270d0:	4798      	blx	r3
   270d2:	1e03      	subs	r3, r0, #0
   270d4:	d1f9      	bne.n	270ca <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   270d6:	68fb      	ldr	r3, [r7, #12]
   270d8:	881b      	ldrh	r3, [r3, #0]
   270da:	b29b      	uxth	r3, r3
   270dc:	2202      	movs	r2, #2
   270de:	4313      	orrs	r3, r2
   270e0:	b29a      	uxth	r2, r3
   270e2:	68fb      	ldr	r3, [r7, #12]
   270e4:	801a      	strh	r2, [r3, #0]
}
   270e6:	46c0      	nop			; (mov r8, r8)
   270e8:	46bd      	mov	sp, r7
   270ea:	b004      	add	sp, #16
   270ec:	bd80      	pop	{r7, pc}
   270ee:	46c0      	nop			; (mov r8, r8)
   270f0:	00027031 	.word	0x00027031
   270f4:	0002708d 	.word	0x0002708d

000270f8 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   270f8:	b580      	push	{r7, lr}
   270fa:	b084      	sub	sp, #16
   270fc:	af00      	add	r7, sp, #0
   270fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27100:	687b      	ldr	r3, [r7, #4]
   27102:	681b      	ldr	r3, [r3, #0]
   27104:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   27106:	2003      	movs	r0, #3
   27108:	4b0d      	ldr	r3, [pc, #52]	; (27140 <rtc_calendar_disable+0x48>)
   2710a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   2710c:	46c0      	nop			; (mov r8, r8)
   2710e:	687b      	ldr	r3, [r7, #4]
   27110:	0018      	movs	r0, r3
   27112:	4b0c      	ldr	r3, [pc, #48]	; (27144 <rtc_calendar_disable+0x4c>)
   27114:	4798      	blx	r3
   27116:	1e03      	subs	r3, r0, #0
   27118:	d1f9      	bne.n	2710e <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   2711a:	68fb      	ldr	r3, [r7, #12]
   2711c:	22c1      	movs	r2, #193	; 0xc1
   2711e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   27120:	68fb      	ldr	r3, [r7, #12]
   27122:	22c1      	movs	r2, #193	; 0xc1
   27124:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   27126:	68fb      	ldr	r3, [r7, #12]
   27128:	881b      	ldrh	r3, [r3, #0]
   2712a:	b29b      	uxth	r3, r3
   2712c:	2202      	movs	r2, #2
   2712e:	4393      	bics	r3, r2
   27130:	b29a      	uxth	r2, r3
   27132:	68fb      	ldr	r3, [r7, #12]
   27134:	801a      	strh	r2, [r3, #0]
}
   27136:	46c0      	nop			; (mov r8, r8)
   27138:	46bd      	mov	sp, r7
   2713a:	b004      	add	sp, #16
   2713c:	bd80      	pop	{r7, pc}
   2713e:	46c0      	nop			; (mov r8, r8)
   27140:	0002705d 	.word	0x0002705d
   27144:	0002708d 	.word	0x0002708d

00027148 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   27148:	b580      	push	{r7, lr}
   2714a:	b084      	sub	sp, #16
   2714c:	af00      	add	r7, sp, #0
   2714e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27150:	687b      	ldr	r3, [r7, #4]
   27152:	681b      	ldr	r3, [r3, #0]
   27154:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   27156:	687b      	ldr	r3, [r7, #4]
   27158:	0018      	movs	r0, r3
   2715a:	4b0d      	ldr	r3, [pc, #52]	; (27190 <rtc_calendar_reset+0x48>)
   2715c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   2715e:	687b      	ldr	r3, [r7, #4]
   27160:	2200      	movs	r2, #0
   27162:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   27164:	687b      	ldr	r3, [r7, #4]
   27166:	2200      	movs	r2, #0
   27168:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   2716a:	46c0      	nop			; (mov r8, r8)
   2716c:	687b      	ldr	r3, [r7, #4]
   2716e:	0018      	movs	r0, r3
   27170:	4b08      	ldr	r3, [pc, #32]	; (27194 <rtc_calendar_reset+0x4c>)
   27172:	4798      	blx	r3
   27174:	1e03      	subs	r3, r0, #0
   27176:	d1f9      	bne.n	2716c <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   27178:	68fb      	ldr	r3, [r7, #12]
   2717a:	881b      	ldrh	r3, [r3, #0]
   2717c:	b29b      	uxth	r3, r3
   2717e:	2201      	movs	r2, #1
   27180:	4313      	orrs	r3, r2
   27182:	b29a      	uxth	r2, r3
   27184:	68fb      	ldr	r3, [r7, #12]
   27186:	801a      	strh	r2, [r3, #0]
}
   27188:	46c0      	nop			; (mov r8, r8)
   2718a:	46bd      	mov	sp, r7
   2718c:	b004      	add	sp, #16
   2718e:	bd80      	pop	{r7, pc}
   27190:	000270f9 	.word	0x000270f9
   27194:	0002708d 	.word	0x0002708d

00027198 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   27198:	b580      	push	{r7, lr}
   2719a:	b084      	sub	sp, #16
   2719c:	af00      	add	r7, sp, #0
   2719e:	6078      	str	r0, [r7, #4]
   271a0:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   271a2:	683b      	ldr	r3, [r7, #0]
   271a4:	88db      	ldrh	r3, [r3, #6]
   271a6:	001a      	movs	r2, r3
   271a8:	687b      	ldr	r3, [r7, #4]
   271aa:	88db      	ldrh	r3, [r3, #6]
   271ac:	1ad3      	subs	r3, r2, r3
   271ae:	069b      	lsls	r3, r3, #26
   271b0:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   271b2:	683b      	ldr	r3, [r7, #0]
   271b4:	795b      	ldrb	r3, [r3, #5]
   271b6:	059b      	lsls	r3, r3, #22
   271b8:	001a      	movs	r2, r3
   271ba:	68fb      	ldr	r3, [r7, #12]
   271bc:	4313      	orrs	r3, r2
   271be:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   271c0:	683b      	ldr	r3, [r7, #0]
   271c2:	791b      	ldrb	r3, [r3, #4]
   271c4:	045b      	lsls	r3, r3, #17
   271c6:	001a      	movs	r2, r3
   271c8:	68fb      	ldr	r3, [r7, #12]
   271ca:	4313      	orrs	r3, r2
   271cc:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   271ce:	683b      	ldr	r3, [r7, #0]
   271d0:	789b      	ldrb	r3, [r3, #2]
   271d2:	031b      	lsls	r3, r3, #12
   271d4:	001a      	movs	r2, r3
   271d6:	68fb      	ldr	r3, [r7, #12]
   271d8:	4313      	orrs	r3, r2
   271da:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   271dc:	687b      	ldr	r3, [r7, #4]
   271de:	791b      	ldrb	r3, [r3, #4]
   271e0:	2201      	movs	r2, #1
   271e2:	4053      	eors	r3, r2
   271e4:	b2db      	uxtb	r3, r3
   271e6:	2b00      	cmp	r3, #0
   271e8:	d008      	beq.n	271fc <rtc_calendar_time_to_register_value+0x64>
   271ea:	683b      	ldr	r3, [r7, #0]
   271ec:	78db      	ldrb	r3, [r3, #3]
   271ee:	2b00      	cmp	r3, #0
   271f0:	d004      	beq.n	271fc <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   271f2:	68fb      	ldr	r3, [r7, #12]
   271f4:	2280      	movs	r2, #128	; 0x80
   271f6:	0252      	lsls	r2, r2, #9
   271f8:	4313      	orrs	r3, r2
   271fa:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   271fc:	683b      	ldr	r3, [r7, #0]
   271fe:	785b      	ldrb	r3, [r3, #1]
   27200:	019b      	lsls	r3, r3, #6
   27202:	001a      	movs	r2, r3
   27204:	68fb      	ldr	r3, [r7, #12]
   27206:	4313      	orrs	r3, r2
   27208:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   2720a:	683b      	ldr	r3, [r7, #0]
   2720c:	781b      	ldrb	r3, [r3, #0]
   2720e:	001a      	movs	r2, r3
   27210:	68fb      	ldr	r3, [r7, #12]
   27212:	4313      	orrs	r3, r2
   27214:	60fb      	str	r3, [r7, #12]

	return register_value;
   27216:	68fb      	ldr	r3, [r7, #12]
}
   27218:	0018      	movs	r0, r3
   2721a:	46bd      	mov	sp, r7
   2721c:	b004      	add	sp, #16
   2721e:	bd80      	pop	{r7, pc}

00027220 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   27220:	b580      	push	{r7, lr}
   27222:	b084      	sub	sp, #16
   27224:	af00      	add	r7, sp, #0
   27226:	60f8      	str	r0, [r7, #12]
   27228:	60b9      	str	r1, [r7, #8]
   2722a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   2722c:	68bb      	ldr	r3, [r7, #8]
   2722e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   27230:	b29a      	uxth	r2, r3
   27232:	68fb      	ldr	r3, [r7, #12]
   27234:	88db      	ldrh	r3, [r3, #6]
   27236:	18d3      	adds	r3, r2, r3
   27238:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   2723a:	687b      	ldr	r3, [r7, #4]
   2723c:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   2723e:	68bb      	ldr	r3, [r7, #8]
   27240:	0d9b      	lsrs	r3, r3, #22
   27242:	b2db      	uxtb	r3, r3
   27244:	220f      	movs	r2, #15
   27246:	4013      	ands	r3, r2
   27248:	b2da      	uxtb	r2, r3
   2724a:	687b      	ldr	r3, [r7, #4]
   2724c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   2724e:	68bb      	ldr	r3, [r7, #8]
   27250:	0c5b      	lsrs	r3, r3, #17
   27252:	b2db      	uxtb	r3, r3
   27254:	221f      	movs	r2, #31
   27256:	4013      	ands	r3, r2
   27258:	b2da      	uxtb	r2, r3
   2725a:	687b      	ldr	r3, [r7, #4]
   2725c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   2725e:	68fb      	ldr	r3, [r7, #12]
   27260:	791b      	ldrb	r3, [r3, #4]
   27262:	2b00      	cmp	r3, #0
   27264:	d008      	beq.n	27278 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   27266:	68bb      	ldr	r3, [r7, #8]
   27268:	0b1b      	lsrs	r3, r3, #12
   2726a:	b2db      	uxtb	r3, r3
   2726c:	221f      	movs	r2, #31
   2726e:	4013      	ands	r3, r2
   27270:	b2da      	uxtb	r2, r3
   27272:	687b      	ldr	r3, [r7, #4]
   27274:	709a      	strb	r2, [r3, #2]
   27276:	e010      	b.n	2729a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   27278:	68bb      	ldr	r3, [r7, #8]
   2727a:	0b1b      	lsrs	r3, r3, #12
   2727c:	b2db      	uxtb	r3, r3
   2727e:	220f      	movs	r2, #15
   27280:	4013      	ands	r3, r2
   27282:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   27284:	687b      	ldr	r3, [r7, #4]
   27286:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   27288:	68ba      	ldr	r2, [r7, #8]
   2728a:	2380      	movs	r3, #128	; 0x80
   2728c:	025b      	lsls	r3, r3, #9
   2728e:	4013      	ands	r3, r2
   27290:	1e5a      	subs	r2, r3, #1
   27292:	4193      	sbcs	r3, r2
   27294:	b2da      	uxtb	r2, r3
   27296:	687b      	ldr	r3, [r7, #4]
   27298:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   2729a:	68bb      	ldr	r3, [r7, #8]
   2729c:	099b      	lsrs	r3, r3, #6
   2729e:	b2db      	uxtb	r3, r3
   272a0:	223f      	movs	r2, #63	; 0x3f
   272a2:	4013      	ands	r3, r2
   272a4:	b2da      	uxtb	r2, r3
   272a6:	687b      	ldr	r3, [r7, #4]
   272a8:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   272aa:	68bb      	ldr	r3, [r7, #8]
   272ac:	b2db      	uxtb	r3, r3
   272ae:	223f      	movs	r2, #63	; 0x3f
   272b0:	4013      	ands	r3, r2
   272b2:	b2da      	uxtb	r2, r3
   272b4:	687b      	ldr	r3, [r7, #4]
   272b6:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   272b8:	46c0      	nop			; (mov r8, r8)
   272ba:	46bd      	mov	sp, r7
   272bc:	b004      	add	sp, #16
   272be:	bd80      	pop	{r7, pc}

000272c0 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   272c0:	b580      	push	{r7, lr}
   272c2:	b084      	sub	sp, #16
   272c4:	af00      	add	r7, sp, #0
   272c6:	6078      	str	r0, [r7, #4]
   272c8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   272ca:	687b      	ldr	r3, [r7, #4]
   272cc:	681b      	ldr	r3, [r3, #0]
   272ce:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   272d0:	683b      	ldr	r3, [r7, #0]
   272d2:	881a      	ldrh	r2, [r3, #0]
   272d4:	230e      	movs	r3, #14
   272d6:	18fb      	adds	r3, r7, r3
   272d8:	2108      	movs	r1, #8
   272da:	430a      	orrs	r2, r1
   272dc:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   272de:	683b      	ldr	r3, [r7, #0]
   272e0:	791b      	ldrb	r3, [r3, #4]
   272e2:	2201      	movs	r2, #1
   272e4:	4053      	eors	r3, r2
   272e6:	b2db      	uxtb	r3, r3
   272e8:	2b00      	cmp	r3, #0
   272ea:	d007      	beq.n	272fc <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   272ec:	230e      	movs	r3, #14
   272ee:	18fb      	adds	r3, r7, r3
   272f0:	220e      	movs	r2, #14
   272f2:	18ba      	adds	r2, r7, r2
   272f4:	8812      	ldrh	r2, [r2, #0]
   272f6:	2140      	movs	r1, #64	; 0x40
   272f8:	430a      	orrs	r2, r1
   272fa:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   272fc:	683b      	ldr	r3, [r7, #0]
   272fe:	789b      	ldrb	r3, [r3, #2]
   27300:	2b00      	cmp	r3, #0
   27302:	d007      	beq.n	27314 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   27304:	230e      	movs	r3, #14
   27306:	18fb      	adds	r3, r7, r3
   27308:	220e      	movs	r2, #14
   2730a:	18ba      	adds	r2, r7, r2
   2730c:	8812      	ldrh	r2, [r2, #0]
   2730e:	2180      	movs	r1, #128	; 0x80
   27310:	430a      	orrs	r2, r1
   27312:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   27314:	68bb      	ldr	r3, [r7, #8]
   27316:	220e      	movs	r2, #14
   27318:	18ba      	adds	r2, r7, r2
   2731a:	8812      	ldrh	r2, [r2, #0]
   2731c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   2731e:	683b      	ldr	r3, [r7, #0]
   27320:	78db      	ldrb	r3, [r3, #3]
   27322:	2b00      	cmp	r3, #0
   27324:	d008      	beq.n	27338 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   27326:	68bb      	ldr	r3, [r7, #8]
   27328:	885b      	ldrh	r3, [r3, #2]
   2732a:	b29b      	uxth	r3, r3
   2732c:	2280      	movs	r2, #128	; 0x80
   2732e:	01d2      	lsls	r2, r2, #7
   27330:	4313      	orrs	r3, r2
   27332:	b29a      	uxth	r2, r3
   27334:	68bb      	ldr	r3, [r7, #8]
   27336:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27338:	230d      	movs	r3, #13
   2733a:	18fb      	adds	r3, r7, r3
   2733c:	2200      	movs	r2, #0
   2733e:	701a      	strb	r2, [r3, #0]
   27340:	e017      	b.n	27372 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   27342:	230d      	movs	r3, #13
   27344:	18fb      	adds	r3, r7, r3
   27346:	781a      	ldrb	r2, [r3, #0]
   27348:	0013      	movs	r3, r2
   2734a:	009b      	lsls	r3, r3, #2
   2734c:	189b      	adds	r3, r3, r2
   2734e:	005b      	lsls	r3, r3, #1
   27350:	3308      	adds	r3, #8
   27352:	683a      	ldr	r2, [r7, #0]
   27354:	18d1      	adds	r1, r2, r3
   27356:	230d      	movs	r3, #13
   27358:	18fb      	adds	r3, r7, r3
   2735a:	781a      	ldrb	r2, [r3, #0]
   2735c:	687b      	ldr	r3, [r7, #4]
   2735e:	0018      	movs	r0, r3
   27360:	4b08      	ldr	r3, [pc, #32]	; (27384 <_rtc_calendar_set_config+0xc4>)
   27362:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27364:	230d      	movs	r3, #13
   27366:	18fb      	adds	r3, r7, r3
   27368:	781a      	ldrb	r2, [r3, #0]
   2736a:	230d      	movs	r3, #13
   2736c:	18fb      	adds	r3, r7, r3
   2736e:	3201      	adds	r2, #1
   27370:	701a      	strb	r2, [r3, #0]
   27372:	230d      	movs	r3, #13
   27374:	18fb      	adds	r3, r7, r3
   27376:	781b      	ldrb	r3, [r3, #0]
   27378:	2b00      	cmp	r3, #0
   2737a:	d0e2      	beq.n	27342 <_rtc_calendar_set_config+0x82>
	}
}
   2737c:	46c0      	nop			; (mov r8, r8)
   2737e:	46bd      	mov	sp, r7
   27380:	b004      	add	sp, #16
   27382:	bd80      	pop	{r7, pc}
   27384:	000274a9 	.word	0x000274a9

00027388 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   27388:	b580      	push	{r7, lr}
   2738a:	b086      	sub	sp, #24
   2738c:	af00      	add	r7, sp, #0
   2738e:	60f8      	str	r0, [r7, #12]
   27390:	60b9      	str	r1, [r7, #8]
   27392:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27394:	68fb      	ldr	r3, [r7, #12]
   27396:	68ba      	ldr	r2, [r7, #8]
   27398:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   2739a:	2120      	movs	r1, #32
   2739c:	2000      	movs	r0, #0
   2739e:	4b18      	ldr	r3, [pc, #96]	; (27400 <rtc_calendar_init+0x78>)
   273a0:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   273a2:	2314      	movs	r3, #20
   273a4:	18fb      	adds	r3, r7, r3
   273a6:	0018      	movs	r0, r3
   273a8:	4b16      	ldr	r3, [pc, #88]	; (27404 <rtc_calendar_init+0x7c>)
   273aa:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   273ac:	2314      	movs	r3, #20
   273ae:	18fb      	adds	r3, r7, r3
   273b0:	2202      	movs	r2, #2
   273b2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   273b4:	2314      	movs	r3, #20
   273b6:	18fb      	adds	r3, r7, r3
   273b8:	0019      	movs	r1, r3
   273ba:	2004      	movs	r0, #4
   273bc:	4b12      	ldr	r3, [pc, #72]	; (27408 <rtc_calendar_init+0x80>)
   273be:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   273c0:	2004      	movs	r0, #4
   273c2:	4b12      	ldr	r3, [pc, #72]	; (2740c <rtc_calendar_init+0x84>)
   273c4:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   273c6:	68fb      	ldr	r3, [r7, #12]
   273c8:	0018      	movs	r0, r3
   273ca:	4b11      	ldr	r3, [pc, #68]	; (27410 <rtc_calendar_init+0x88>)
   273cc:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   273ce:	687b      	ldr	r3, [r7, #4]
   273d0:	791a      	ldrb	r2, [r3, #4]
   273d2:	68fb      	ldr	r3, [r7, #12]
   273d4:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   273d6:	687b      	ldr	r3, [r7, #4]
   273d8:	78da      	ldrb	r2, [r3, #3]
   273da:	68fb      	ldr	r3, [r7, #12]
   273dc:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   273de:	687b      	ldr	r3, [r7, #4]
   273e0:	88da      	ldrh	r2, [r3, #6]
   273e2:	68fb      	ldr	r3, [r7, #12]
   273e4:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   273e6:	4b0b      	ldr	r3, [pc, #44]	; (27414 <rtc_calendar_init+0x8c>)
   273e8:	68fa      	ldr	r2, [r7, #12]
   273ea:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   273ec:	687a      	ldr	r2, [r7, #4]
   273ee:	68fb      	ldr	r3, [r7, #12]
   273f0:	0011      	movs	r1, r2
   273f2:	0018      	movs	r0, r3
   273f4:	4b08      	ldr	r3, [pc, #32]	; (27418 <rtc_calendar_init+0x90>)
   273f6:	4798      	blx	r3
}
   273f8:	46c0      	nop			; (mov r8, r8)
   273fa:	46bd      	mov	sp, r7
   273fc:	b006      	add	sp, #24
   273fe:	bd80      	pop	{r7, pc}
   27400:	00026fd5 	.word	0x00026fd5
   27404:	00026fbd 	.word	0x00026fbd
   27408:	0002a3ed 	.word	0x0002a3ed
   2740c:	0002a431 	.word	0x0002a431
   27410:	00027149 	.word	0x00027149
   27414:	20005c04 	.word	0x20005c04
   27418:	000272c1 	.word	0x000272c1

0002741c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   2741c:	b580      	push	{r7, lr}
   2741e:	b084      	sub	sp, #16
   27420:	af00      	add	r7, sp, #0
   27422:	6078      	str	r0, [r7, #4]
   27424:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27426:	687b      	ldr	r3, [r7, #4]
   27428:	681b      	ldr	r3, [r3, #0]
   2742a:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   2742c:	687b      	ldr	r3, [r7, #4]
   2742e:	795b      	ldrb	r3, [r3, #5]
   27430:	2201      	movs	r2, #1
   27432:	4053      	eors	r3, r2
   27434:	b2db      	uxtb	r3, r3
   27436:	2b00      	cmp	r3, #0
   27438:	d00a      	beq.n	27450 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   2743a:	68fb      	ldr	r3, [r7, #12]
   2743c:	4a16      	ldr	r2, [pc, #88]	; (27498 <rtc_calendar_get_time+0x7c>)
   2743e:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   27440:	46c0      	nop			; (mov r8, r8)
   27442:	687b      	ldr	r3, [r7, #4]
   27444:	0018      	movs	r0, r3
   27446:	4b15      	ldr	r3, [pc, #84]	; (2749c <rtc_calendar_get_time+0x80>)
   27448:	4798      	blx	r3
   2744a:	1e03      	subs	r3, r0, #0
   2744c:	d1f9      	bne.n	27442 <rtc_calendar_get_time+0x26>
   2744e:	e016      	b.n	2747e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   27450:	68fb      	ldr	r3, [r7, #12]
   27452:	885b      	ldrh	r3, [r3, #2]
   27454:	b29b      	uxth	r3, r3
   27456:	001a      	movs	r2, r3
   27458:	2380      	movs	r3, #128	; 0x80
   2745a:	01db      	lsls	r3, r3, #7
   2745c:	4013      	ands	r3, r2
   2745e:	d10e      	bne.n	2747e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   27460:	68fb      	ldr	r3, [r7, #12]
   27462:	885b      	ldrh	r3, [r3, #2]
   27464:	b29b      	uxth	r3, r3
   27466:	4a0e      	ldr	r2, [pc, #56]	; (274a0 <rtc_calendar_get_time+0x84>)
   27468:	4313      	orrs	r3, r2
   2746a:	b29a      	uxth	r2, r3
   2746c:	68fb      	ldr	r3, [r7, #12]
   2746e:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   27470:	46c0      	nop			; (mov r8, r8)
   27472:	687b      	ldr	r3, [r7, #4]
   27474:	0018      	movs	r0, r3
   27476:	4b09      	ldr	r3, [pc, #36]	; (2749c <rtc_calendar_get_time+0x80>)
   27478:	4798      	blx	r3
   2747a:	1e03      	subs	r3, r0, #0
   2747c:	d1f9      	bne.n	27472 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   2747e:	68fb      	ldr	r3, [r7, #12]
   27480:	691b      	ldr	r3, [r3, #16]
   27482:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   27484:	683a      	ldr	r2, [r7, #0]
   27486:	68b9      	ldr	r1, [r7, #8]
   27488:	687b      	ldr	r3, [r7, #4]
   2748a:	0018      	movs	r0, r3
   2748c:	4b05      	ldr	r3, [pc, #20]	; (274a4 <rtc_calendar_get_time+0x88>)
   2748e:	4798      	blx	r3
}
   27490:	46c0      	nop			; (mov r8, r8)
   27492:	46bd      	mov	sp, r7
   27494:	b004      	add	sp, #16
   27496:	bd80      	pop	{r7, pc}
   27498:	ffff8000 	.word	0xffff8000
   2749c:	0002708d 	.word	0x0002708d
   274a0:	ffffc000 	.word	0xffffc000
   274a4:	00027221 	.word	0x00027221

000274a8 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   274a8:	b580      	push	{r7, lr}
   274aa:	b086      	sub	sp, #24
   274ac:	af00      	add	r7, sp, #0
   274ae:	60f8      	str	r0, [r7, #12]
   274b0:	60b9      	str	r1, [r7, #8]
   274b2:	1dfb      	adds	r3, r7, #7
   274b4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   274b6:	68fb      	ldr	r3, [r7, #12]
   274b8:	681b      	ldr	r3, [r3, #0]
   274ba:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   274bc:	1dfb      	adds	r3, r7, #7
   274be:	781b      	ldrb	r3, [r3, #0]
   274c0:	2b01      	cmp	r3, #1
   274c2:	d901      	bls.n	274c8 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   274c4:	2317      	movs	r3, #23
   274c6:	e021      	b.n	2750c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   274c8:	68ba      	ldr	r2, [r7, #8]
   274ca:	68fb      	ldr	r3, [r7, #12]
   274cc:	0011      	movs	r1, r2
   274ce:	0018      	movs	r0, r3
   274d0:	4b10      	ldr	r3, [pc, #64]	; (27514 <rtc_calendar_set_alarm+0x6c>)
   274d2:	4798      	blx	r3
   274d4:	0003      	movs	r3, r0
   274d6:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   274d8:	46c0      	nop			; (mov r8, r8)
   274da:	68fb      	ldr	r3, [r7, #12]
   274dc:	0018      	movs	r0, r3
   274de:	4b0e      	ldr	r3, [pc, #56]	; (27518 <rtc_calendar_set_alarm+0x70>)
   274e0:	4798      	blx	r3
   274e2:	1e03      	subs	r3, r0, #0
   274e4:	d1f9      	bne.n	274da <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   274e6:	1dfb      	adds	r3, r7, #7
   274e8:	781a      	ldrb	r2, [r3, #0]
   274ea:	697b      	ldr	r3, [r7, #20]
   274ec:	3203      	adds	r2, #3
   274ee:	00d2      	lsls	r2, r2, #3
   274f0:	6939      	ldr	r1, [r7, #16]
   274f2:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   274f4:	1dfb      	adds	r3, r7, #7
   274f6:	781b      	ldrb	r3, [r3, #0]
   274f8:	68ba      	ldr	r2, [r7, #8]
   274fa:	7a11      	ldrb	r1, [r2, #8]
   274fc:	697a      	ldr	r2, [r7, #20]
   274fe:	3303      	adds	r3, #3
   27500:	00db      	lsls	r3, r3, #3
   27502:	18d3      	adds	r3, r2, r3
   27504:	3304      	adds	r3, #4
   27506:	1c0a      	adds	r2, r1, #0
   27508:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   2750a:	2300      	movs	r3, #0
}
   2750c:	0018      	movs	r0, r3
   2750e:	46bd      	mov	sp, r7
   27510:	b006      	add	sp, #24
   27512:	bd80      	pop	{r7, pc}
   27514:	00027199 	.word	0x00027199
   27518:	0002708d 	.word	0x0002708d

0002751c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   2751c:	b580      	push	{r7, lr}
   2751e:	b086      	sub	sp, #24
   27520:	af00      	add	r7, sp, #0
   27522:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   27524:	4b28      	ldr	r3, [pc, #160]	; (275c8 <_rtc_interrupt_handler+0xac>)
   27526:	687a      	ldr	r2, [r7, #4]
   27528:	0092      	lsls	r2, r2, #2
   2752a:	58d3      	ldr	r3, [r2, r3]
   2752c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   2752e:	697b      	ldr	r3, [r7, #20]
   27530:	681b      	ldr	r3, [r3, #0]
   27532:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   27534:	230e      	movs	r3, #14
   27536:	18fb      	adds	r3, r7, r3
   27538:	697a      	ldr	r2, [r7, #20]
   2753a:	8a52      	ldrh	r2, [r2, #18]
   2753c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   2753e:	697b      	ldr	r3, [r7, #20]
   27540:	8a1b      	ldrh	r3, [r3, #16]
   27542:	b29a      	uxth	r2, r3
   27544:	230e      	movs	r3, #14
   27546:	18fb      	adds	r3, r7, r3
   27548:	210e      	movs	r1, #14
   2754a:	1879      	adds	r1, r7, r1
   2754c:	8809      	ldrh	r1, [r1, #0]
   2754e:	400a      	ands	r2, r1
   27550:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   27552:	693b      	ldr	r3, [r7, #16]
   27554:	7a1b      	ldrb	r3, [r3, #8]
   27556:	b2da      	uxtb	r2, r3
   27558:	230c      	movs	r3, #12
   2755a:	18fb      	adds	r3, r7, r3
   2755c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   2755e:	693b      	ldr	r3, [r7, #16]
   27560:	79db      	ldrb	r3, [r3, #7]
   27562:	b2db      	uxtb	r3, r3
   27564:	b29a      	uxth	r2, r3
   27566:	230c      	movs	r3, #12
   27568:	18fb      	adds	r3, r7, r3
   2756a:	210c      	movs	r1, #12
   2756c:	1879      	adds	r1, r7, r1
   2756e:	8809      	ldrh	r1, [r1, #0]
   27570:	400a      	ands	r2, r1
   27572:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   27574:	230c      	movs	r3, #12
   27576:	18fb      	adds	r3, r7, r3
   27578:	881b      	ldrh	r3, [r3, #0]
   2757a:	2280      	movs	r2, #128	; 0x80
   2757c:	4013      	ands	r3, r2
   2757e:	d00c      	beq.n	2759a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   27580:	230e      	movs	r3, #14
   27582:	18fb      	adds	r3, r7, r3
   27584:	881b      	ldrh	r3, [r3, #0]
   27586:	2202      	movs	r2, #2
   27588:	4013      	ands	r3, r2
   2758a:	d002      	beq.n	27592 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   2758c:	697b      	ldr	r3, [r7, #20]
   2758e:	68db      	ldr	r3, [r3, #12]
   27590:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   27592:	693b      	ldr	r3, [r7, #16]
   27594:	2280      	movs	r2, #128	; 0x80
   27596:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   27598:	e011      	b.n	275be <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   2759a:	230c      	movs	r3, #12
   2759c:	18fb      	adds	r3, r7, r3
   2759e:	881b      	ldrh	r3, [r3, #0]
   275a0:	2201      	movs	r2, #1
   275a2:	4013      	ands	r3, r2
   275a4:	d00b      	beq.n	275be <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   275a6:	230e      	movs	r3, #14
   275a8:	18fb      	adds	r3, r7, r3
   275aa:	881b      	ldrh	r3, [r3, #0]
   275ac:	2201      	movs	r2, #1
   275ae:	4013      	ands	r3, r2
   275b0:	d002      	beq.n	275b8 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   275b2:	697b      	ldr	r3, [r7, #20]
   275b4:	689b      	ldr	r3, [r3, #8]
   275b6:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   275b8:	693b      	ldr	r3, [r7, #16]
   275ba:	2201      	movs	r2, #1
   275bc:	721a      	strb	r2, [r3, #8]
}
   275be:	46c0      	nop			; (mov r8, r8)
   275c0:	46bd      	mov	sp, r7
   275c2:	b006      	add	sp, #24
   275c4:	bd80      	pop	{r7, pc}
   275c6:	46c0      	nop			; (mov r8, r8)
   275c8:	20005c04 	.word	0x20005c04

000275cc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   275cc:	b580      	push	{r7, lr}
   275ce:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   275d0:	2000      	movs	r0, #0
   275d2:	4b02      	ldr	r3, [pc, #8]	; (275dc <RTC_Handler+0x10>)
   275d4:	4798      	blx	r3
}
   275d6:	46c0      	nop			; (mov r8, r8)
   275d8:	46bd      	mov	sp, r7
   275da:	bd80      	pop	{r7, pc}
   275dc:	0002751d 	.word	0x0002751d

000275e0 <system_gclk_chan_get_config_defaults>:
{
   275e0:	b580      	push	{r7, lr}
   275e2:	b082      	sub	sp, #8
   275e4:	af00      	add	r7, sp, #0
   275e6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   275e8:	687b      	ldr	r3, [r7, #4]
   275ea:	2200      	movs	r2, #0
   275ec:	701a      	strb	r2, [r3, #0]
}
   275ee:	46c0      	nop			; (mov r8, r8)
   275f0:	46bd      	mov	sp, r7
   275f2:	b002      	add	sp, #8
   275f4:	bd80      	pop	{r7, pc}

000275f6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   275f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   275f8:	b08d      	sub	sp, #52	; 0x34
   275fa:	af00      	add	r7, sp, #0
   275fc:	60b8      	str	r0, [r7, #8]
   275fe:	60f9      	str	r1, [r7, #12]
   27600:	603a      	str	r2, [r7, #0]
   27602:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   27604:	2300      	movs	r3, #0
   27606:	2400      	movs	r4, #0
   27608:	623b      	str	r3, [r7, #32]
   2760a:	627c      	str	r4, [r7, #36]	; 0x24
   2760c:	2300      	movs	r3, #0
   2760e:	2400      	movs	r4, #0
   27610:	61bb      	str	r3, [r7, #24]
   27612:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   27614:	233f      	movs	r3, #63	; 0x3f
   27616:	62fb      	str	r3, [r7, #44]	; 0x2c
   27618:	e053      	b.n	276c2 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   2761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2761c:	3b20      	subs	r3, #32
   2761e:	2b00      	cmp	r3, #0
   27620:	db04      	blt.n	2762c <long_division+0x36>
   27622:	2201      	movs	r2, #1
   27624:	409a      	lsls	r2, r3
   27626:	0013      	movs	r3, r2
   27628:	617b      	str	r3, [r7, #20]
   2762a:	e00b      	b.n	27644 <long_division+0x4e>
   2762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2762e:	2220      	movs	r2, #32
   27630:	1ad3      	subs	r3, r2, r3
   27632:	2201      	movs	r2, #1
   27634:	40da      	lsrs	r2, r3
   27636:	0013      	movs	r3, r2
   27638:	2100      	movs	r1, #0
   2763a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2763c:	4091      	lsls	r1, r2
   2763e:	000a      	movs	r2, r1
   27640:	4313      	orrs	r3, r2
   27642:	617b      	str	r3, [r7, #20]
   27644:	2201      	movs	r2, #1
   27646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27648:	409a      	lsls	r2, r3
   2764a:	0013      	movs	r3, r2
   2764c:	613b      	str	r3, [r7, #16]

		r = r << 1;
   2764e:	69bb      	ldr	r3, [r7, #24]
   27650:	69fc      	ldr	r4, [r7, #28]
   27652:	18db      	adds	r3, r3, r3
   27654:	4164      	adcs	r4, r4
   27656:	61bb      	str	r3, [r7, #24]
   27658:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   2765a:	68bb      	ldr	r3, [r7, #8]
   2765c:	693a      	ldr	r2, [r7, #16]
   2765e:	401a      	ands	r2, r3
   27660:	0015      	movs	r5, r2
   27662:	68fb      	ldr	r3, [r7, #12]
   27664:	697a      	ldr	r2, [r7, #20]
   27666:	401a      	ands	r2, r3
   27668:	0016      	movs	r6, r2
   2766a:	002b      	movs	r3, r5
   2766c:	4333      	orrs	r3, r6
   2766e:	d007      	beq.n	27680 <long_division+0x8a>
			r |= 0x01;
   27670:	69bb      	ldr	r3, [r7, #24]
   27672:	2201      	movs	r2, #1
   27674:	4313      	orrs	r3, r2
   27676:	61bb      	str	r3, [r7, #24]
   27678:	69fb      	ldr	r3, [r7, #28]
   2767a:	2200      	movs	r2, #0
   2767c:	4313      	orrs	r3, r2
   2767e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   27680:	687a      	ldr	r2, [r7, #4]
   27682:	69fb      	ldr	r3, [r7, #28]
   27684:	429a      	cmp	r2, r3
   27686:	d819      	bhi.n	276bc <long_division+0xc6>
   27688:	687a      	ldr	r2, [r7, #4]
   2768a:	69fb      	ldr	r3, [r7, #28]
   2768c:	429a      	cmp	r2, r3
   2768e:	d103      	bne.n	27698 <long_division+0xa2>
   27690:	683a      	ldr	r2, [r7, #0]
   27692:	69bb      	ldr	r3, [r7, #24]
   27694:	429a      	cmp	r2, r3
   27696:	d811      	bhi.n	276bc <long_division+0xc6>
			r = r - d;
   27698:	69b9      	ldr	r1, [r7, #24]
   2769a:	69fa      	ldr	r2, [r7, #28]
   2769c:	683b      	ldr	r3, [r7, #0]
   2769e:	687c      	ldr	r4, [r7, #4]
   276a0:	1ac9      	subs	r1, r1, r3
   276a2:	41a2      	sbcs	r2, r4
   276a4:	000b      	movs	r3, r1
   276a6:	0014      	movs	r4, r2
   276a8:	61bb      	str	r3, [r7, #24]
   276aa:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   276ac:	6a3a      	ldr	r2, [r7, #32]
   276ae:	693b      	ldr	r3, [r7, #16]
   276b0:	4313      	orrs	r3, r2
   276b2:	623b      	str	r3, [r7, #32]
   276b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   276b6:	697b      	ldr	r3, [r7, #20]
   276b8:	4313      	orrs	r3, r2
   276ba:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   276bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   276be:	3b01      	subs	r3, #1
   276c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   276c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   276c4:	2b00      	cmp	r3, #0
   276c6:	daa8      	bge.n	2761a <long_division+0x24>
		}
	}

	return q;
   276c8:	6a3b      	ldr	r3, [r7, #32]
   276ca:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   276cc:	0018      	movs	r0, r3
   276ce:	0021      	movs	r1, r4
   276d0:	46bd      	mov	sp, r7
   276d2:	b00d      	add	sp, #52	; 0x34
   276d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000276d6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   276d6:	b580      	push	{r7, lr}
   276d8:	b086      	sub	sp, #24
   276da:	af00      	add	r7, sp, #0
   276dc:	60f8      	str	r0, [r7, #12]
   276de:	60b9      	str	r1, [r7, #8]
   276e0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   276e2:	2316      	movs	r3, #22
   276e4:	18fb      	adds	r3, r7, r3
   276e6:	2200      	movs	r2, #0
   276e8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   276ea:	68bb      	ldr	r3, [r7, #8]
   276ec:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   276ee:	68bb      	ldr	r3, [r7, #8]
   276f0:	085a      	lsrs	r2, r3, #1
   276f2:	68fb      	ldr	r3, [r7, #12]
   276f4:	429a      	cmp	r2, r3
   276f6:	d201      	bcs.n	276fc <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   276f8:	2340      	movs	r3, #64	; 0x40
   276fa:	e026      	b.n	2774a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   276fc:	68bb      	ldr	r3, [r7, #8]
   276fe:	085b      	lsrs	r3, r3, #1
   27700:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   27702:	e00a      	b.n	2771a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   27704:	693a      	ldr	r2, [r7, #16]
   27706:	68fb      	ldr	r3, [r7, #12]
   27708:	1ad3      	subs	r3, r2, r3
   2770a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   2770c:	2316      	movs	r3, #22
   2770e:	18fb      	adds	r3, r7, r3
   27710:	881a      	ldrh	r2, [r3, #0]
   27712:	2316      	movs	r3, #22
   27714:	18fb      	adds	r3, r7, r3
   27716:	3201      	adds	r2, #1
   27718:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   2771a:	693a      	ldr	r2, [r7, #16]
   2771c:	68fb      	ldr	r3, [r7, #12]
   2771e:	429a      	cmp	r2, r3
   27720:	d2f0      	bcs.n	27704 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   27722:	2316      	movs	r3, #22
   27724:	18fb      	adds	r3, r7, r3
   27726:	2216      	movs	r2, #22
   27728:	18ba      	adds	r2, r7, r2
   2772a:	8812      	ldrh	r2, [r2, #0]
   2772c:	3a01      	subs	r2, #1
   2772e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   27730:	2316      	movs	r3, #22
   27732:	18fb      	adds	r3, r7, r3
   27734:	881b      	ldrh	r3, [r3, #0]
   27736:	2bff      	cmp	r3, #255	; 0xff
   27738:	d901      	bls.n	2773e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2773a:	2340      	movs	r3, #64	; 0x40
   2773c:	e005      	b.n	2774a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   2773e:	687b      	ldr	r3, [r7, #4]
   27740:	2216      	movs	r2, #22
   27742:	18ba      	adds	r2, r7, r2
   27744:	8812      	ldrh	r2, [r2, #0]
   27746:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   27748:	2300      	movs	r3, #0
	}
}
   2774a:	0018      	movs	r0, r3
   2774c:	46bd      	mov	sp, r7
   2774e:	b006      	add	sp, #24
   27750:	bd80      	pop	{r7, pc}
	...

00027754 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   27754:	b5f0      	push	{r4, r5, r6, r7, lr}
   27756:	b0a1      	sub	sp, #132	; 0x84
   27758:	af00      	add	r7, sp, #0
   2775a:	64f8      	str	r0, [r7, #76]	; 0x4c
   2775c:	64b9      	str	r1, [r7, #72]	; 0x48
   2775e:	647a      	str	r2, [r7, #68]	; 0x44
   27760:	2243      	movs	r2, #67	; 0x43
   27762:	18ba      	adds	r2, r7, r2
   27764:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   27766:	2300      	movs	r3, #0
   27768:	2400      	movs	r4, #0
   2776a:	673b      	str	r3, [r7, #112]	; 0x70
   2776c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   2776e:	2300      	movs	r3, #0
   27770:	2400      	movs	r4, #0
   27772:	66bb      	str	r3, [r7, #104]	; 0x68
   27774:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   27776:	2300      	movs	r3, #0
   27778:	2400      	movs	r4, #0
   2777a:	67bb      	str	r3, [r7, #120]	; 0x78
   2777c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   2777e:	2300      	movs	r3, #0
   27780:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   27782:	2358      	movs	r3, #88	; 0x58
   27784:	2240      	movs	r2, #64	; 0x40
   27786:	4694      	mov	ip, r2
   27788:	44bc      	add	ip, r7
   2778a:	4463      	add	r3, ip
   2778c:	781a      	ldrb	r2, [r3, #0]
   2778e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27790:	435a      	muls	r2, r3
   27792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27794:	429a      	cmp	r2, r3
   27796:	d901      	bls.n	2779c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27798:	2340      	movs	r3, #64	; 0x40
   2779a:	e0b3      	b.n	27904 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   2779c:	2343      	movs	r3, #67	; 0x43
   2779e:	18fb      	adds	r3, r7, r3
   277a0:	781b      	ldrb	r3, [r3, #0]
   277a2:	2b00      	cmp	r3, #0
   277a4:	d13d      	bne.n	27822 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   277a6:	2358      	movs	r3, #88	; 0x58
   277a8:	2240      	movs	r2, #64	; 0x40
   277aa:	4694      	mov	ip, r2
   277ac:	44bc      	add	ip, r7
   277ae:	4463      	add	r3, ip
   277b0:	781b      	ldrb	r3, [r3, #0]
   277b2:	b2db      	uxtb	r3, r3
   277b4:	613b      	str	r3, [r7, #16]
   277b6:	2300      	movs	r3, #0
   277b8:	617b      	str	r3, [r7, #20]
   277ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   277bc:	60bb      	str	r3, [r7, #8]
   277be:	2300      	movs	r3, #0
   277c0:	60fb      	str	r3, [r7, #12]
   277c2:	4c52      	ldr	r4, [pc, #328]	; (2790c <_sercom_get_async_baud_val+0x1b8>)
   277c4:	68ba      	ldr	r2, [r7, #8]
   277c6:	68fb      	ldr	r3, [r7, #12]
   277c8:	6938      	ldr	r0, [r7, #16]
   277ca:	6979      	ldr	r1, [r7, #20]
   277cc:	47a0      	blx	r4
   277ce:	0003      	movs	r3, r0
   277d0:	000c      	movs	r4, r1
   277d2:	001b      	movs	r3, r3
   277d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   277d6:	2300      	movs	r3, #0
   277d8:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   277da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   277dc:	603b      	str	r3, [r7, #0]
   277de:	2300      	movs	r3, #0
   277e0:	607b      	str	r3, [r7, #4]
   277e2:	6db8      	ldr	r0, [r7, #88]	; 0x58
   277e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   277e6:	683a      	ldr	r2, [r7, #0]
   277e8:	687b      	ldr	r3, [r7, #4]
   277ea:	4c49      	ldr	r4, [pc, #292]	; (27910 <_sercom_get_async_baud_val+0x1bc>)
   277ec:	47a0      	blx	r4
   277ee:	0003      	movs	r3, r0
   277f0:	000c      	movs	r4, r1
   277f2:	673b      	str	r3, [r7, #112]	; 0x70
   277f4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   277f6:	2100      	movs	r1, #0
   277f8:	2201      	movs	r2, #1
   277fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   277fc:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   277fe:	1ac9      	subs	r1, r1, r3
   27800:	41a2      	sbcs	r2, r4
   27802:	000b      	movs	r3, r1
   27804:	0014      	movs	r4, r2
   27806:	66bb      	str	r3, [r7, #104]	; 0x68
   27808:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   2780a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2780c:	0c1b      	lsrs	r3, r3, #16
   2780e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   27810:	0416      	lsls	r6, r2, #16
   27812:	431e      	orrs	r6, r3
   27814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27816:	041d      	lsls	r5, r3, #16
   27818:	0033      	movs	r3, r6
   2781a:	67bb      	str	r3, [r7, #120]	; 0x78
   2781c:	2300      	movs	r3, #0
   2781e:	67fb      	str	r3, [r7, #124]	; 0x7c
   27820:	e06a      	b.n	278f8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   27822:	2343      	movs	r3, #67	; 0x43
   27824:	18fb      	adds	r3, r7, r3
   27826:	781b      	ldrb	r3, [r3, #0]
   27828:	2b01      	cmp	r3, #1
   2782a:	d165      	bne.n	278f8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   2782c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2782e:	633b      	str	r3, [r7, #48]	; 0x30
   27830:	2300      	movs	r3, #0
   27832:	637b      	str	r3, [r7, #52]	; 0x34
   27834:	2358      	movs	r3, #88	; 0x58
   27836:	2240      	movs	r2, #64	; 0x40
   27838:	4694      	mov	ip, r2
   2783a:	44bc      	add	ip, r7
   2783c:	4463      	add	r3, ip
   2783e:	781b      	ldrb	r3, [r3, #0]
   27840:	b2db      	uxtb	r3, r3
   27842:	62bb      	str	r3, [r7, #40]	; 0x28
   27844:	2300      	movs	r3, #0
   27846:	62fb      	str	r3, [r7, #44]	; 0x2c
   27848:	4c30      	ldr	r4, [pc, #192]	; (2790c <_sercom_get_async_baud_val+0x1b8>)
   2784a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2784e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   27850:	6b79      	ldr	r1, [r7, #52]	; 0x34
   27852:	47a0      	blx	r4
   27854:	0003      	movs	r3, r0
   27856:	000c      	movs	r4, r1
   27858:	65bb      	str	r3, [r7, #88]	; 0x58
   2785a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   2785c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2785e:	623b      	str	r3, [r7, #32]
   27860:	2300      	movs	r3, #0
   27862:	627b      	str	r3, [r7, #36]	; 0x24
   27864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27866:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27868:	001a      	movs	r2, r3
   2786a:	0023      	movs	r3, r4
   2786c:	6a38      	ldr	r0, [r7, #32]
   2786e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27870:	4c27      	ldr	r4, [pc, #156]	; (27910 <_sercom_get_async_baud_val+0x1bc>)
   27872:	47a0      	blx	r4
   27874:	0003      	movs	r3, r0
   27876:	000c      	movs	r4, r1
   27878:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   2787a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   2787c:	2380      	movs	r3, #128	; 0x80
   2787e:	019b      	lsls	r3, r3, #6
   27880:	429a      	cmp	r2, r3
   27882:	d901      	bls.n	27888 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27884:	2340      	movs	r3, #64	; 0x40
   27886:	e03d      	b.n	27904 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   27888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2788a:	61bb      	str	r3, [r7, #24]
   2788c:	2300      	movs	r3, #0
   2788e:	61fb      	str	r3, [r7, #28]
   27890:	69b9      	ldr	r1, [r7, #24]
   27892:	69fa      	ldr	r2, [r7, #28]
   27894:	000b      	movs	r3, r1
   27896:	0f5b      	lsrs	r3, r3, #29
   27898:	0010      	movs	r0, r2
   2789a:	00c0      	lsls	r0, r0, #3
   2789c:	63f8      	str	r0, [r7, #60]	; 0x3c
   2789e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   278a0:	4318      	orrs	r0, r3
   278a2:	63f8      	str	r0, [r7, #60]	; 0x3c
   278a4:	000b      	movs	r3, r1
   278a6:	00db      	lsls	r3, r3, #3
   278a8:	63bb      	str	r3, [r7, #56]	; 0x38
   278aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   278ac:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   278ae:	001a      	movs	r2, r3
   278b0:	0023      	movs	r3, r4
   278b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   278b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   278b6:	4c16      	ldr	r4, [pc, #88]	; (27910 <_sercom_get_async_baud_val+0x1bc>)
   278b8:	47a0      	blx	r4
   278ba:	0003      	movs	r3, r0
   278bc:	000c      	movs	r4, r1
   278be:	65bb      	str	r3, [r7, #88]	; 0x58
   278c0:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   278c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   278c4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   278c6:	b2d9      	uxtb	r1, r3
   278c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   278ca:	b2db      	uxtb	r3, r3
   278cc:	00db      	lsls	r3, r3, #3
   278ce:	b2da      	uxtb	r2, r3
   278d0:	2317      	movs	r3, #23
   278d2:	2040      	movs	r0, #64	; 0x40
   278d4:	4684      	mov	ip, r0
   278d6:	44bc      	add	ip, r7
   278d8:	4463      	add	r3, ip
   278da:	1a8a      	subs	r2, r1, r2
   278dc:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   278de:	2317      	movs	r3, #23
   278e0:	2240      	movs	r2, #64	; 0x40
   278e2:	4694      	mov	ip, r2
   278e4:	44bc      	add	ip, r7
   278e6:	4463      	add	r3, ip
   278e8:	781b      	ldrb	r3, [r3, #0]
   278ea:	035b      	lsls	r3, r3, #13
   278ec:	001a      	movs	r2, r3
   278ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   278f0:	4313      	orrs	r3, r2
   278f2:	67bb      	str	r3, [r7, #120]	; 0x78
   278f4:	2300      	movs	r3, #0
   278f6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   278f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   278fa:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   278fc:	b29a      	uxth	r2, r3
   278fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   27900:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   27902:	2300      	movs	r3, #0
}
   27904:	0018      	movs	r0, r3
   27906:	46bd      	mov	sp, r7
   27908:	b021      	add	sp, #132	; 0x84
   2790a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2790c:	00033275 	.word	0x00033275
   27910:	000275f7 	.word	0x000275f7

00027914 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   27914:	b580      	push	{r7, lr}
   27916:	b084      	sub	sp, #16
   27918:	af00      	add	r7, sp, #0
   2791a:	0002      	movs	r2, r0
   2791c:	1dfb      	adds	r3, r7, #7
   2791e:	701a      	strb	r2, [r3, #0]
   27920:	1dbb      	adds	r3, r7, #6
   27922:	1c0a      	adds	r2, r1, #0
   27924:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   27926:	4b1a      	ldr	r3, [pc, #104]	; (27990 <sercom_set_gclk_generator+0x7c>)
   27928:	781b      	ldrb	r3, [r3, #0]
   2792a:	2201      	movs	r2, #1
   2792c:	4053      	eors	r3, r2
   2792e:	b2db      	uxtb	r3, r3
   27930:	2b00      	cmp	r3, #0
   27932:	d103      	bne.n	2793c <sercom_set_gclk_generator+0x28>
   27934:	1dbb      	adds	r3, r7, #6
   27936:	781b      	ldrb	r3, [r3, #0]
   27938:	2b00      	cmp	r3, #0
   2793a:	d01b      	beq.n	27974 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2793c:	230c      	movs	r3, #12
   2793e:	18fb      	adds	r3, r7, r3
   27940:	0018      	movs	r0, r3
   27942:	4b14      	ldr	r3, [pc, #80]	; (27994 <sercom_set_gclk_generator+0x80>)
   27944:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   27946:	230c      	movs	r3, #12
   27948:	18fb      	adds	r3, r7, r3
   2794a:	1dfa      	adds	r2, r7, #7
   2794c:	7812      	ldrb	r2, [r2, #0]
   2794e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   27950:	230c      	movs	r3, #12
   27952:	18fb      	adds	r3, r7, r3
   27954:	0019      	movs	r1, r3
   27956:	2013      	movs	r0, #19
   27958:	4b0f      	ldr	r3, [pc, #60]	; (27998 <sercom_set_gclk_generator+0x84>)
   2795a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   2795c:	2013      	movs	r0, #19
   2795e:	4b0f      	ldr	r3, [pc, #60]	; (2799c <sercom_set_gclk_generator+0x88>)
   27960:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   27962:	4b0b      	ldr	r3, [pc, #44]	; (27990 <sercom_set_gclk_generator+0x7c>)
   27964:	1dfa      	adds	r2, r7, #7
   27966:	7812      	ldrb	r2, [r2, #0]
   27968:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   2796a:	4b09      	ldr	r3, [pc, #36]	; (27990 <sercom_set_gclk_generator+0x7c>)
   2796c:	2201      	movs	r2, #1
   2796e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   27970:	2300      	movs	r3, #0
   27972:	e008      	b.n	27986 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   27974:	4b06      	ldr	r3, [pc, #24]	; (27990 <sercom_set_gclk_generator+0x7c>)
   27976:	785b      	ldrb	r3, [r3, #1]
   27978:	1dfa      	adds	r2, r7, #7
   2797a:	7812      	ldrb	r2, [r2, #0]
   2797c:	429a      	cmp	r2, r3
   2797e:	d101      	bne.n	27984 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   27980:	2300      	movs	r3, #0
   27982:	e000      	b.n	27986 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   27984:	231d      	movs	r3, #29
}
   27986:	0018      	movs	r0, r3
   27988:	46bd      	mov	sp, r7
   2798a:	b004      	add	sp, #16
   2798c:	bd80      	pop	{r7, pc}
   2798e:	46c0      	nop			; (mov r8, r8)
   27990:	200042c0 	.word	0x200042c0
   27994:	000275e1 	.word	0x000275e1
   27998:	0002a3ed 	.word	0x0002a3ed
   2799c:	0002a431 	.word	0x0002a431

000279a0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   279a0:	b580      	push	{r7, lr}
   279a2:	b082      	sub	sp, #8
   279a4:	af00      	add	r7, sp, #0
   279a6:	6078      	str	r0, [r7, #4]
   279a8:	000a      	movs	r2, r1
   279aa:	1cfb      	adds	r3, r7, #3
   279ac:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   279ae:	687b      	ldr	r3, [r7, #4]
   279b0:	4a4d      	ldr	r2, [pc, #308]	; (27ae8 <_sercom_get_default_pad+0x148>)
   279b2:	4293      	cmp	r3, r2
   279b4:	d03f      	beq.n	27a36 <_sercom_get_default_pad+0x96>
   279b6:	4a4c      	ldr	r2, [pc, #304]	; (27ae8 <_sercom_get_default_pad+0x148>)
   279b8:	4293      	cmp	r3, r2
   279ba:	d806      	bhi.n	279ca <_sercom_get_default_pad+0x2a>
   279bc:	4a4b      	ldr	r2, [pc, #300]	; (27aec <_sercom_get_default_pad+0x14c>)
   279be:	4293      	cmp	r3, r2
   279c0:	d00f      	beq.n	279e2 <_sercom_get_default_pad+0x42>
   279c2:	4a4b      	ldr	r2, [pc, #300]	; (27af0 <_sercom_get_default_pad+0x150>)
   279c4:	4293      	cmp	r3, r2
   279c6:	d021      	beq.n	27a0c <_sercom_get_default_pad+0x6c>
   279c8:	e089      	b.n	27ade <_sercom_get_default_pad+0x13e>
   279ca:	4a4a      	ldr	r2, [pc, #296]	; (27af4 <_sercom_get_default_pad+0x154>)
   279cc:	4293      	cmp	r3, r2
   279ce:	d100      	bne.n	279d2 <_sercom_get_default_pad+0x32>
   279d0:	e05b      	b.n	27a8a <_sercom_get_default_pad+0xea>
   279d2:	4a49      	ldr	r2, [pc, #292]	; (27af8 <_sercom_get_default_pad+0x158>)
   279d4:	4293      	cmp	r3, r2
   279d6:	d100      	bne.n	279da <_sercom_get_default_pad+0x3a>
   279d8:	e06c      	b.n	27ab4 <_sercom_get_default_pad+0x114>
   279da:	4a48      	ldr	r2, [pc, #288]	; (27afc <_sercom_get_default_pad+0x15c>)
   279dc:	4293      	cmp	r3, r2
   279de:	d03f      	beq.n	27a60 <_sercom_get_default_pad+0xc0>
   279e0:	e07d      	b.n	27ade <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   279e2:	1cfb      	adds	r3, r7, #3
   279e4:	781b      	ldrb	r3, [r3, #0]
   279e6:	2b01      	cmp	r3, #1
   279e8:	d00a      	beq.n	27a00 <_sercom_get_default_pad+0x60>
   279ea:	dc02      	bgt.n	279f2 <_sercom_get_default_pad+0x52>
   279ec:	2b00      	cmp	r3, #0
   279ee:	d005      	beq.n	279fc <_sercom_get_default_pad+0x5c>
   279f0:	e075      	b.n	27ade <_sercom_get_default_pad+0x13e>
   279f2:	2b02      	cmp	r3, #2
   279f4:	d006      	beq.n	27a04 <_sercom_get_default_pad+0x64>
   279f6:	2b03      	cmp	r3, #3
   279f8:	d006      	beq.n	27a08 <_sercom_get_default_pad+0x68>
   279fa:	e070      	b.n	27ade <_sercom_get_default_pad+0x13e>
   279fc:	4b40      	ldr	r3, [pc, #256]	; (27b00 <_sercom_get_default_pad+0x160>)
   279fe:	e06f      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a00:	4b40      	ldr	r3, [pc, #256]	; (27b04 <_sercom_get_default_pad+0x164>)
   27a02:	e06d      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a04:	4b40      	ldr	r3, [pc, #256]	; (27b08 <_sercom_get_default_pad+0x168>)
   27a06:	e06b      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a08:	4b40      	ldr	r3, [pc, #256]	; (27b0c <_sercom_get_default_pad+0x16c>)
   27a0a:	e069      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a0c:	1cfb      	adds	r3, r7, #3
   27a0e:	781b      	ldrb	r3, [r3, #0]
   27a10:	2b01      	cmp	r3, #1
   27a12:	d00a      	beq.n	27a2a <_sercom_get_default_pad+0x8a>
   27a14:	dc02      	bgt.n	27a1c <_sercom_get_default_pad+0x7c>
   27a16:	2b00      	cmp	r3, #0
   27a18:	d005      	beq.n	27a26 <_sercom_get_default_pad+0x86>
   27a1a:	e060      	b.n	27ade <_sercom_get_default_pad+0x13e>
   27a1c:	2b02      	cmp	r3, #2
   27a1e:	d006      	beq.n	27a2e <_sercom_get_default_pad+0x8e>
   27a20:	2b03      	cmp	r3, #3
   27a22:	d006      	beq.n	27a32 <_sercom_get_default_pad+0x92>
   27a24:	e05b      	b.n	27ade <_sercom_get_default_pad+0x13e>
   27a26:	2303      	movs	r3, #3
   27a28:	e05a      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a2a:	4b39      	ldr	r3, [pc, #228]	; (27b10 <_sercom_get_default_pad+0x170>)
   27a2c:	e058      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a2e:	4b39      	ldr	r3, [pc, #228]	; (27b14 <_sercom_get_default_pad+0x174>)
   27a30:	e056      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a32:	4b39      	ldr	r3, [pc, #228]	; (27b18 <_sercom_get_default_pad+0x178>)
   27a34:	e054      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a36:	1cfb      	adds	r3, r7, #3
   27a38:	781b      	ldrb	r3, [r3, #0]
   27a3a:	2b01      	cmp	r3, #1
   27a3c:	d00a      	beq.n	27a54 <_sercom_get_default_pad+0xb4>
   27a3e:	dc02      	bgt.n	27a46 <_sercom_get_default_pad+0xa6>
   27a40:	2b00      	cmp	r3, #0
   27a42:	d005      	beq.n	27a50 <_sercom_get_default_pad+0xb0>
   27a44:	e04b      	b.n	27ade <_sercom_get_default_pad+0x13e>
   27a46:	2b02      	cmp	r3, #2
   27a48:	d006      	beq.n	27a58 <_sercom_get_default_pad+0xb8>
   27a4a:	2b03      	cmp	r3, #3
   27a4c:	d006      	beq.n	27a5c <_sercom_get_default_pad+0xbc>
   27a4e:	e046      	b.n	27ade <_sercom_get_default_pad+0x13e>
   27a50:	4b32      	ldr	r3, [pc, #200]	; (27b1c <_sercom_get_default_pad+0x17c>)
   27a52:	e045      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a54:	4b32      	ldr	r3, [pc, #200]	; (27b20 <_sercom_get_default_pad+0x180>)
   27a56:	e043      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a58:	4b32      	ldr	r3, [pc, #200]	; (27b24 <_sercom_get_default_pad+0x184>)
   27a5a:	e041      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a5c:	4b32      	ldr	r3, [pc, #200]	; (27b28 <_sercom_get_default_pad+0x188>)
   27a5e:	e03f      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a60:	1cfb      	adds	r3, r7, #3
   27a62:	781b      	ldrb	r3, [r3, #0]
   27a64:	2b01      	cmp	r3, #1
   27a66:	d00a      	beq.n	27a7e <_sercom_get_default_pad+0xde>
   27a68:	dc02      	bgt.n	27a70 <_sercom_get_default_pad+0xd0>
   27a6a:	2b00      	cmp	r3, #0
   27a6c:	d005      	beq.n	27a7a <_sercom_get_default_pad+0xda>
   27a6e:	e036      	b.n	27ade <_sercom_get_default_pad+0x13e>
   27a70:	2b02      	cmp	r3, #2
   27a72:	d006      	beq.n	27a82 <_sercom_get_default_pad+0xe2>
   27a74:	2b03      	cmp	r3, #3
   27a76:	d006      	beq.n	27a86 <_sercom_get_default_pad+0xe6>
   27a78:	e031      	b.n	27ade <_sercom_get_default_pad+0x13e>
   27a7a:	4b2c      	ldr	r3, [pc, #176]	; (27b2c <_sercom_get_default_pad+0x18c>)
   27a7c:	e030      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a7e:	4b2c      	ldr	r3, [pc, #176]	; (27b30 <_sercom_get_default_pad+0x190>)
   27a80:	e02e      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a82:	4b2c      	ldr	r3, [pc, #176]	; (27b34 <_sercom_get_default_pad+0x194>)
   27a84:	e02c      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a86:	4b2c      	ldr	r3, [pc, #176]	; (27b38 <_sercom_get_default_pad+0x198>)
   27a88:	e02a      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27a8a:	1cfb      	adds	r3, r7, #3
   27a8c:	781b      	ldrb	r3, [r3, #0]
   27a8e:	2b01      	cmp	r3, #1
   27a90:	d00a      	beq.n	27aa8 <_sercom_get_default_pad+0x108>
   27a92:	dc02      	bgt.n	27a9a <_sercom_get_default_pad+0xfa>
   27a94:	2b00      	cmp	r3, #0
   27a96:	d005      	beq.n	27aa4 <_sercom_get_default_pad+0x104>
   27a98:	e021      	b.n	27ade <_sercom_get_default_pad+0x13e>
   27a9a:	2b02      	cmp	r3, #2
   27a9c:	d006      	beq.n	27aac <_sercom_get_default_pad+0x10c>
   27a9e:	2b03      	cmp	r3, #3
   27aa0:	d006      	beq.n	27ab0 <_sercom_get_default_pad+0x110>
   27aa2:	e01c      	b.n	27ade <_sercom_get_default_pad+0x13e>
   27aa4:	4b25      	ldr	r3, [pc, #148]	; (27b3c <_sercom_get_default_pad+0x19c>)
   27aa6:	e01b      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27aa8:	4b25      	ldr	r3, [pc, #148]	; (27b40 <_sercom_get_default_pad+0x1a0>)
   27aaa:	e019      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27aac:	4b25      	ldr	r3, [pc, #148]	; (27b44 <_sercom_get_default_pad+0x1a4>)
   27aae:	e017      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27ab0:	4b25      	ldr	r3, [pc, #148]	; (27b48 <_sercom_get_default_pad+0x1a8>)
   27ab2:	e015      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27ab4:	1cfb      	adds	r3, r7, #3
   27ab6:	781b      	ldrb	r3, [r3, #0]
   27ab8:	2b01      	cmp	r3, #1
   27aba:	d00a      	beq.n	27ad2 <_sercom_get_default_pad+0x132>
   27abc:	dc02      	bgt.n	27ac4 <_sercom_get_default_pad+0x124>
   27abe:	2b00      	cmp	r3, #0
   27ac0:	d005      	beq.n	27ace <_sercom_get_default_pad+0x12e>
   27ac2:	e00c      	b.n	27ade <_sercom_get_default_pad+0x13e>
   27ac4:	2b02      	cmp	r3, #2
   27ac6:	d006      	beq.n	27ad6 <_sercom_get_default_pad+0x136>
   27ac8:	2b03      	cmp	r3, #3
   27aca:	d006      	beq.n	27ada <_sercom_get_default_pad+0x13a>
   27acc:	e007      	b.n	27ade <_sercom_get_default_pad+0x13e>
   27ace:	4b1f      	ldr	r3, [pc, #124]	; (27b4c <_sercom_get_default_pad+0x1ac>)
   27ad0:	e006      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27ad2:	4b1f      	ldr	r3, [pc, #124]	; (27b50 <_sercom_get_default_pad+0x1b0>)
   27ad4:	e004      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27ad6:	4b1f      	ldr	r3, [pc, #124]	; (27b54 <_sercom_get_default_pad+0x1b4>)
   27ad8:	e002      	b.n	27ae0 <_sercom_get_default_pad+0x140>
   27ada:	4b1f      	ldr	r3, [pc, #124]	; (27b58 <_sercom_get_default_pad+0x1b8>)
   27adc:	e000      	b.n	27ae0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   27ade:	2300      	movs	r3, #0
}
   27ae0:	0018      	movs	r0, r3
   27ae2:	46bd      	mov	sp, r7
   27ae4:	b002      	add	sp, #8
   27ae6:	bd80      	pop	{r7, pc}
   27ae8:	42001000 	.word	0x42001000
   27aec:	42000800 	.word	0x42000800
   27af0:	42000c00 	.word	0x42000c00
   27af4:	42001800 	.word	0x42001800
   27af8:	42001c00 	.word	0x42001c00
   27afc:	42001400 	.word	0x42001400
   27b00:	00040003 	.word	0x00040003
   27b04:	00050003 	.word	0x00050003
   27b08:	00060003 	.word	0x00060003
   27b0c:	00070003 	.word	0x00070003
   27b10:	00010003 	.word	0x00010003
   27b14:	001e0003 	.word	0x001e0003
   27b18:	001f0003 	.word	0x001f0003
   27b1c:	00080003 	.word	0x00080003
   27b20:	00090003 	.word	0x00090003
   27b24:	000a0003 	.word	0x000a0003
   27b28:	000b0003 	.word	0x000b0003
   27b2c:	00100003 	.word	0x00100003
   27b30:	00110003 	.word	0x00110003
   27b34:	00120003 	.word	0x00120003
   27b38:	00130003 	.word	0x00130003
   27b3c:	000c0003 	.word	0x000c0003
   27b40:	000d0003 	.word	0x000d0003
   27b44:	000e0003 	.word	0x000e0003
   27b48:	000f0003 	.word	0x000f0003
   27b4c:	00160003 	.word	0x00160003
   27b50:	00170003 	.word	0x00170003
   27b54:	00180003 	.word	0x00180003
   27b58:	00190003 	.word	0x00190003

00027b5c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   27b5c:	b590      	push	{r4, r7, lr}
   27b5e:	b08b      	sub	sp, #44	; 0x2c
   27b60:	af00      	add	r7, sp, #0
   27b62:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   27b64:	230c      	movs	r3, #12
   27b66:	18fb      	adds	r3, r7, r3
   27b68:	4a0f      	ldr	r2, [pc, #60]	; (27ba8 <_sercom_get_sercom_inst_index+0x4c>)
   27b6a:	ca13      	ldmia	r2!, {r0, r1, r4}
   27b6c:	c313      	stmia	r3!, {r0, r1, r4}
   27b6e:	ca13      	ldmia	r2!, {r0, r1, r4}
   27b70:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27b72:	2300      	movs	r3, #0
   27b74:	627b      	str	r3, [r7, #36]	; 0x24
   27b76:	e00e      	b.n	27b96 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   27b78:	230c      	movs	r3, #12
   27b7a:	18fb      	adds	r3, r7, r3
   27b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27b7e:	0092      	lsls	r2, r2, #2
   27b80:	58d3      	ldr	r3, [r2, r3]
   27b82:	001a      	movs	r2, r3
   27b84:	687b      	ldr	r3, [r7, #4]
   27b86:	429a      	cmp	r2, r3
   27b88:	d102      	bne.n	27b90 <_sercom_get_sercom_inst_index+0x34>
			return i;
   27b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27b8c:	b2db      	uxtb	r3, r3
   27b8e:	e006      	b.n	27b9e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27b92:	3301      	adds	r3, #1
   27b94:	627b      	str	r3, [r7, #36]	; 0x24
   27b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27b98:	2b05      	cmp	r3, #5
   27b9a:	d9ed      	bls.n	27b78 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   27b9c:	2300      	movs	r3, #0
}
   27b9e:	0018      	movs	r0, r3
   27ba0:	46bd      	mov	sp, r7
   27ba2:	b00b      	add	sp, #44	; 0x2c
   27ba4:	bd90      	pop	{r4, r7, pc}
   27ba6:	46c0      	nop			; (mov r8, r8)
   27ba8:	00039d2c 	.word	0x00039d2c

00027bac <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   27bac:	b580      	push	{r7, lr}
   27bae:	b082      	sub	sp, #8
   27bb0:	af00      	add	r7, sp, #0
   27bb2:	0002      	movs	r2, r0
   27bb4:	1dfb      	adds	r3, r7, #7
   27bb6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   27bb8:	46c0      	nop			; (mov r8, r8)
   27bba:	46bd      	mov	sp, r7
   27bbc:	b002      	add	sp, #8
   27bbe:	bd80      	pop	{r7, pc}

00027bc0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   27bc0:	b580      	push	{r7, lr}
   27bc2:	b084      	sub	sp, #16
   27bc4:	af00      	add	r7, sp, #0
   27bc6:	0002      	movs	r2, r0
   27bc8:	6039      	str	r1, [r7, #0]
   27bca:	1dfb      	adds	r3, r7, #7
   27bcc:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   27bce:	4b13      	ldr	r3, [pc, #76]	; (27c1c <_sercom_set_handler+0x5c>)
   27bd0:	781b      	ldrb	r3, [r3, #0]
   27bd2:	2201      	movs	r2, #1
   27bd4:	4053      	eors	r3, r2
   27bd6:	b2db      	uxtb	r3, r3
   27bd8:	2b00      	cmp	r3, #0
   27bda:	d015      	beq.n	27c08 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27bdc:	2300      	movs	r3, #0
   27bde:	60fb      	str	r3, [r7, #12]
   27be0:	e00c      	b.n	27bfc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   27be2:	4b0f      	ldr	r3, [pc, #60]	; (27c20 <_sercom_set_handler+0x60>)
   27be4:	68fa      	ldr	r2, [r7, #12]
   27be6:	0092      	lsls	r2, r2, #2
   27be8:	490e      	ldr	r1, [pc, #56]	; (27c24 <_sercom_set_handler+0x64>)
   27bea:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   27bec:	4b0e      	ldr	r3, [pc, #56]	; (27c28 <_sercom_set_handler+0x68>)
   27bee:	68fa      	ldr	r2, [r7, #12]
   27bf0:	0092      	lsls	r2, r2, #2
   27bf2:	2100      	movs	r1, #0
   27bf4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27bf6:	68fb      	ldr	r3, [r7, #12]
   27bf8:	3301      	adds	r3, #1
   27bfa:	60fb      	str	r3, [r7, #12]
   27bfc:	68fb      	ldr	r3, [r7, #12]
   27bfe:	2b05      	cmp	r3, #5
   27c00:	d9ef      	bls.n	27be2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   27c02:	4b06      	ldr	r3, [pc, #24]	; (27c1c <_sercom_set_handler+0x5c>)
   27c04:	2201      	movs	r2, #1
   27c06:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   27c08:	1dfb      	adds	r3, r7, #7
   27c0a:	781a      	ldrb	r2, [r3, #0]
   27c0c:	4b04      	ldr	r3, [pc, #16]	; (27c20 <_sercom_set_handler+0x60>)
   27c0e:	0092      	lsls	r2, r2, #2
   27c10:	6839      	ldr	r1, [r7, #0]
   27c12:	50d1      	str	r1, [r2, r3]
}
   27c14:	46c0      	nop			; (mov r8, r8)
   27c16:	46bd      	mov	sp, r7
   27c18:	b004      	add	sp, #16
   27c1a:	bd80      	pop	{r7, pc}
   27c1c:	200042c2 	.word	0x200042c2
   27c20:	200042c4 	.word	0x200042c4
   27c24:	00027bad 	.word	0x00027bad
   27c28:	20005c08 	.word	0x20005c08

00027c2c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   27c2c:	b590      	push	{r4, r7, lr}
   27c2e:	b085      	sub	sp, #20
   27c30:	af00      	add	r7, sp, #0
   27c32:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   27c34:	2308      	movs	r3, #8
   27c36:	18fb      	adds	r3, r7, r3
   27c38:	4a0b      	ldr	r2, [pc, #44]	; (27c68 <_sercom_get_interrupt_vector+0x3c>)
   27c3a:	6811      	ldr	r1, [r2, #0]
   27c3c:	6019      	str	r1, [r3, #0]
   27c3e:	8892      	ldrh	r2, [r2, #4]
   27c40:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   27c42:	230f      	movs	r3, #15
   27c44:	18fc      	adds	r4, r7, r3
   27c46:	687b      	ldr	r3, [r7, #4]
   27c48:	0018      	movs	r0, r3
   27c4a:	4b08      	ldr	r3, [pc, #32]	; (27c6c <_sercom_get_interrupt_vector+0x40>)
   27c4c:	4798      	blx	r3
   27c4e:	0003      	movs	r3, r0
   27c50:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   27c52:	230f      	movs	r3, #15
   27c54:	18fb      	adds	r3, r7, r3
   27c56:	781b      	ldrb	r3, [r3, #0]
   27c58:	2208      	movs	r2, #8
   27c5a:	18ba      	adds	r2, r7, r2
   27c5c:	5cd3      	ldrb	r3, [r2, r3]
   27c5e:	b25b      	sxtb	r3, r3
}
   27c60:	0018      	movs	r0, r3
   27c62:	46bd      	mov	sp, r7
   27c64:	b005      	add	sp, #20
   27c66:	bd90      	pop	{r4, r7, pc}
   27c68:	00039d44 	.word	0x00039d44
   27c6c:	00027b5d 	.word	0x00027b5d

00027c70 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   27c70:	b580      	push	{r7, lr}
   27c72:	af00      	add	r7, sp, #0
   27c74:	4b03      	ldr	r3, [pc, #12]	; (27c84 <SERCOM0_Handler+0x14>)
   27c76:	681b      	ldr	r3, [r3, #0]
   27c78:	2000      	movs	r0, #0
   27c7a:	4798      	blx	r3
   27c7c:	46c0      	nop			; (mov r8, r8)
   27c7e:	46bd      	mov	sp, r7
   27c80:	bd80      	pop	{r7, pc}
   27c82:	46c0      	nop			; (mov r8, r8)
   27c84:	200042c4 	.word	0x200042c4

00027c88 <SERCOM1_Handler>:
   27c88:	b580      	push	{r7, lr}
   27c8a:	af00      	add	r7, sp, #0
   27c8c:	4b03      	ldr	r3, [pc, #12]	; (27c9c <SERCOM1_Handler+0x14>)
   27c8e:	685b      	ldr	r3, [r3, #4]
   27c90:	2001      	movs	r0, #1
   27c92:	4798      	blx	r3
   27c94:	46c0      	nop			; (mov r8, r8)
   27c96:	46bd      	mov	sp, r7
   27c98:	bd80      	pop	{r7, pc}
   27c9a:	46c0      	nop			; (mov r8, r8)
   27c9c:	200042c4 	.word	0x200042c4

00027ca0 <SERCOM2_Handler>:
   27ca0:	b580      	push	{r7, lr}
   27ca2:	af00      	add	r7, sp, #0
   27ca4:	4b03      	ldr	r3, [pc, #12]	; (27cb4 <SERCOM2_Handler+0x14>)
   27ca6:	689b      	ldr	r3, [r3, #8]
   27ca8:	2002      	movs	r0, #2
   27caa:	4798      	blx	r3
   27cac:	46c0      	nop			; (mov r8, r8)
   27cae:	46bd      	mov	sp, r7
   27cb0:	bd80      	pop	{r7, pc}
   27cb2:	46c0      	nop			; (mov r8, r8)
   27cb4:	200042c4 	.word	0x200042c4

00027cb8 <SERCOM3_Handler>:
   27cb8:	b580      	push	{r7, lr}
   27cba:	af00      	add	r7, sp, #0
   27cbc:	4b03      	ldr	r3, [pc, #12]	; (27ccc <SERCOM3_Handler+0x14>)
   27cbe:	68db      	ldr	r3, [r3, #12]
   27cc0:	2003      	movs	r0, #3
   27cc2:	4798      	blx	r3
   27cc4:	46c0      	nop			; (mov r8, r8)
   27cc6:	46bd      	mov	sp, r7
   27cc8:	bd80      	pop	{r7, pc}
   27cca:	46c0      	nop			; (mov r8, r8)
   27ccc:	200042c4 	.word	0x200042c4

00027cd0 <SERCOM4_Handler>:
   27cd0:	b580      	push	{r7, lr}
   27cd2:	af00      	add	r7, sp, #0
   27cd4:	4b03      	ldr	r3, [pc, #12]	; (27ce4 <SERCOM4_Handler+0x14>)
   27cd6:	691b      	ldr	r3, [r3, #16]
   27cd8:	2004      	movs	r0, #4
   27cda:	4798      	blx	r3
   27cdc:	46c0      	nop			; (mov r8, r8)
   27cde:	46bd      	mov	sp, r7
   27ce0:	bd80      	pop	{r7, pc}
   27ce2:	46c0      	nop			; (mov r8, r8)
   27ce4:	200042c4 	.word	0x200042c4

00027ce8 <SERCOM5_Handler>:
   27ce8:	b580      	push	{r7, lr}
   27cea:	af00      	add	r7, sp, #0
   27cec:	4b03      	ldr	r3, [pc, #12]	; (27cfc <SERCOM5_Handler+0x14>)
   27cee:	695b      	ldr	r3, [r3, #20]
   27cf0:	2005      	movs	r0, #5
   27cf2:	4798      	blx	r3
   27cf4:	46c0      	nop			; (mov r8, r8)
   27cf6:	46bd      	mov	sp, r7
   27cf8:	bd80      	pop	{r7, pc}
   27cfa:	46c0      	nop			; (mov r8, r8)
   27cfc:	200042c4 	.word	0x200042c4

00027d00 <system_pinmux_get_config_defaults>:
{
   27d00:	b580      	push	{r7, lr}
   27d02:	b082      	sub	sp, #8
   27d04:	af00      	add	r7, sp, #0
   27d06:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27d08:	687b      	ldr	r3, [r7, #4]
   27d0a:	2280      	movs	r2, #128	; 0x80
   27d0c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27d0e:	687b      	ldr	r3, [r7, #4]
   27d10:	2200      	movs	r2, #0
   27d12:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27d14:	687b      	ldr	r3, [r7, #4]
   27d16:	2201      	movs	r2, #1
   27d18:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27d1a:	687b      	ldr	r3, [r7, #4]
   27d1c:	2200      	movs	r2, #0
   27d1e:	70da      	strb	r2, [r3, #3]
}
   27d20:	46c0      	nop			; (mov r8, r8)
   27d22:	46bd      	mov	sp, r7
   27d24:	b002      	add	sp, #8
   27d26:	bd80      	pop	{r7, pc}

00027d28 <system_pinmux_get_group_from_gpio_pin>:
{
   27d28:	b580      	push	{r7, lr}
   27d2a:	b084      	sub	sp, #16
   27d2c:	af00      	add	r7, sp, #0
   27d2e:	0002      	movs	r2, r0
   27d30:	1dfb      	adds	r3, r7, #7
   27d32:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   27d34:	230f      	movs	r3, #15
   27d36:	18fb      	adds	r3, r7, r3
   27d38:	1dfa      	adds	r2, r7, #7
   27d3a:	7812      	ldrb	r2, [r2, #0]
   27d3c:	09d2      	lsrs	r2, r2, #7
   27d3e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   27d40:	230e      	movs	r3, #14
   27d42:	18fb      	adds	r3, r7, r3
   27d44:	1dfa      	adds	r2, r7, #7
   27d46:	7812      	ldrb	r2, [r2, #0]
   27d48:	0952      	lsrs	r2, r2, #5
   27d4a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   27d4c:	4b0d      	ldr	r3, [pc, #52]	; (27d84 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   27d4e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   27d50:	230f      	movs	r3, #15
   27d52:	18fb      	adds	r3, r7, r3
   27d54:	781b      	ldrb	r3, [r3, #0]
   27d56:	2b00      	cmp	r3, #0
   27d58:	d10f      	bne.n	27d7a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   27d5a:	230f      	movs	r3, #15
   27d5c:	18fb      	adds	r3, r7, r3
   27d5e:	781b      	ldrb	r3, [r3, #0]
   27d60:	009b      	lsls	r3, r3, #2
   27d62:	2210      	movs	r2, #16
   27d64:	4694      	mov	ip, r2
   27d66:	44bc      	add	ip, r7
   27d68:	4463      	add	r3, ip
   27d6a:	3b08      	subs	r3, #8
   27d6c:	681a      	ldr	r2, [r3, #0]
   27d6e:	230e      	movs	r3, #14
   27d70:	18fb      	adds	r3, r7, r3
   27d72:	781b      	ldrb	r3, [r3, #0]
   27d74:	01db      	lsls	r3, r3, #7
   27d76:	18d3      	adds	r3, r2, r3
   27d78:	e000      	b.n	27d7c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   27d7a:	2300      	movs	r3, #0
}
   27d7c:	0018      	movs	r0, r3
   27d7e:	46bd      	mov	sp, r7
   27d80:	b004      	add	sp, #16
   27d82:	bd80      	pop	{r7, pc}
   27d84:	41004400 	.word	0x41004400

00027d88 <port_get_group_from_gpio_pin>:
{
   27d88:	b580      	push	{r7, lr}
   27d8a:	b082      	sub	sp, #8
   27d8c:	af00      	add	r7, sp, #0
   27d8e:	0002      	movs	r2, r0
   27d90:	1dfb      	adds	r3, r7, #7
   27d92:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   27d94:	1dfb      	adds	r3, r7, #7
   27d96:	781b      	ldrb	r3, [r3, #0]
   27d98:	0018      	movs	r0, r3
   27d9a:	4b03      	ldr	r3, [pc, #12]	; (27da8 <port_get_group_from_gpio_pin+0x20>)
   27d9c:	4798      	blx	r3
   27d9e:	0003      	movs	r3, r0
}
   27da0:	0018      	movs	r0, r3
   27da2:	46bd      	mov	sp, r7
   27da4:	b002      	add	sp, #8
   27da6:	bd80      	pop	{r7, pc}
   27da8:	00027d29 	.word	0x00027d29

00027dac <port_pin_set_output_level>:
{
   27dac:	b580      	push	{r7, lr}
   27dae:	b084      	sub	sp, #16
   27db0:	af00      	add	r7, sp, #0
   27db2:	0002      	movs	r2, r0
   27db4:	1dfb      	adds	r3, r7, #7
   27db6:	701a      	strb	r2, [r3, #0]
   27db8:	1dbb      	adds	r3, r7, #6
   27dba:	1c0a      	adds	r2, r1, #0
   27dbc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   27dbe:	1dfb      	adds	r3, r7, #7
   27dc0:	781b      	ldrb	r3, [r3, #0]
   27dc2:	0018      	movs	r0, r3
   27dc4:	4b0d      	ldr	r3, [pc, #52]	; (27dfc <port_pin_set_output_level+0x50>)
   27dc6:	4798      	blx	r3
   27dc8:	0003      	movs	r3, r0
   27dca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   27dcc:	1dfb      	adds	r3, r7, #7
   27dce:	781b      	ldrb	r3, [r3, #0]
   27dd0:	221f      	movs	r2, #31
   27dd2:	4013      	ands	r3, r2
   27dd4:	2201      	movs	r2, #1
   27dd6:	409a      	lsls	r2, r3
   27dd8:	0013      	movs	r3, r2
   27dda:	60bb      	str	r3, [r7, #8]
	if (level) {
   27ddc:	1dbb      	adds	r3, r7, #6
   27dde:	781b      	ldrb	r3, [r3, #0]
   27de0:	2b00      	cmp	r3, #0
   27de2:	d003      	beq.n	27dec <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   27de4:	68fb      	ldr	r3, [r7, #12]
   27de6:	68ba      	ldr	r2, [r7, #8]
   27de8:	619a      	str	r2, [r3, #24]
}
   27dea:	e002      	b.n	27df2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   27dec:	68fb      	ldr	r3, [r7, #12]
   27dee:	68ba      	ldr	r2, [r7, #8]
   27df0:	615a      	str	r2, [r3, #20]
}
   27df2:	46c0      	nop			; (mov r8, r8)
   27df4:	46bd      	mov	sp, r7
   27df6:	b004      	add	sp, #16
   27df8:	bd80      	pop	{r7, pc}
   27dfa:	46c0      	nop			; (mov r8, r8)
   27dfc:	00027d89 	.word	0x00027d89

00027e00 <system_gclk_chan_get_config_defaults>:
{
   27e00:	b580      	push	{r7, lr}
   27e02:	b082      	sub	sp, #8
   27e04:	af00      	add	r7, sp, #0
   27e06:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27e08:	687b      	ldr	r3, [r7, #4]
   27e0a:	2200      	movs	r2, #0
   27e0c:	701a      	strb	r2, [r3, #0]
}
   27e0e:	46c0      	nop			; (mov r8, r8)
   27e10:	46bd      	mov	sp, r7
   27e12:	b002      	add	sp, #8
   27e14:	bd80      	pop	{r7, pc}
	...

00027e18 <system_apb_clock_set_mask>:
{
   27e18:	b580      	push	{r7, lr}
   27e1a:	b082      	sub	sp, #8
   27e1c:	af00      	add	r7, sp, #0
   27e1e:	0002      	movs	r2, r0
   27e20:	6039      	str	r1, [r7, #0]
   27e22:	1dfb      	adds	r3, r7, #7
   27e24:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27e26:	1dfb      	adds	r3, r7, #7
   27e28:	781b      	ldrb	r3, [r3, #0]
   27e2a:	2b01      	cmp	r3, #1
   27e2c:	d00a      	beq.n	27e44 <system_apb_clock_set_mask+0x2c>
   27e2e:	2b02      	cmp	r3, #2
   27e30:	d00f      	beq.n	27e52 <system_apb_clock_set_mask+0x3a>
   27e32:	2b00      	cmp	r3, #0
   27e34:	d114      	bne.n	27e60 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27e36:	4b0e      	ldr	r3, [pc, #56]	; (27e70 <system_apb_clock_set_mask+0x58>)
   27e38:	4a0d      	ldr	r2, [pc, #52]	; (27e70 <system_apb_clock_set_mask+0x58>)
   27e3a:	6991      	ldr	r1, [r2, #24]
   27e3c:	683a      	ldr	r2, [r7, #0]
   27e3e:	430a      	orrs	r2, r1
   27e40:	619a      	str	r2, [r3, #24]
			break;
   27e42:	e00f      	b.n	27e64 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27e44:	4b0a      	ldr	r3, [pc, #40]	; (27e70 <system_apb_clock_set_mask+0x58>)
   27e46:	4a0a      	ldr	r2, [pc, #40]	; (27e70 <system_apb_clock_set_mask+0x58>)
   27e48:	69d1      	ldr	r1, [r2, #28]
   27e4a:	683a      	ldr	r2, [r7, #0]
   27e4c:	430a      	orrs	r2, r1
   27e4e:	61da      	str	r2, [r3, #28]
			break;
   27e50:	e008      	b.n	27e64 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27e52:	4b07      	ldr	r3, [pc, #28]	; (27e70 <system_apb_clock_set_mask+0x58>)
   27e54:	4a06      	ldr	r2, [pc, #24]	; (27e70 <system_apb_clock_set_mask+0x58>)
   27e56:	6a11      	ldr	r1, [r2, #32]
   27e58:	683a      	ldr	r2, [r7, #0]
   27e5a:	430a      	orrs	r2, r1
   27e5c:	621a      	str	r2, [r3, #32]
			break;
   27e5e:	e001      	b.n	27e64 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27e60:	2317      	movs	r3, #23
   27e62:	e000      	b.n	27e66 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27e64:	2300      	movs	r3, #0
}
   27e66:	0018      	movs	r0, r3
   27e68:	46bd      	mov	sp, r7
   27e6a:	b002      	add	sp, #8
   27e6c:	bd80      	pop	{r7, pc}
   27e6e:	46c0      	nop			; (mov r8, r8)
   27e70:	40000400 	.word	0x40000400

00027e74 <system_is_debugger_present>:
{
   27e74:	b580      	push	{r7, lr}
   27e76:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   27e78:	4b05      	ldr	r3, [pc, #20]	; (27e90 <system_is_debugger_present+0x1c>)
   27e7a:	789b      	ldrb	r3, [r3, #2]
   27e7c:	b2db      	uxtb	r3, r3
   27e7e:	001a      	movs	r2, r3
   27e80:	2302      	movs	r3, #2
   27e82:	4013      	ands	r3, r2
   27e84:	1e5a      	subs	r2, r3, #1
   27e86:	4193      	sbcs	r3, r2
   27e88:	b2db      	uxtb	r3, r3
}
   27e8a:	0018      	movs	r0, r3
   27e8c:	46bd      	mov	sp, r7
   27e8e:	bd80      	pop	{r7, pc}
   27e90:	41002000 	.word	0x41002000

00027e94 <system_interrupt_enable>:
{
   27e94:	b580      	push	{r7, lr}
   27e96:	b082      	sub	sp, #8
   27e98:	af00      	add	r7, sp, #0
   27e9a:	0002      	movs	r2, r0
   27e9c:	1dfb      	adds	r3, r7, #7
   27e9e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27ea0:	4b06      	ldr	r3, [pc, #24]	; (27ebc <system_interrupt_enable+0x28>)
   27ea2:	1dfa      	adds	r2, r7, #7
   27ea4:	7812      	ldrb	r2, [r2, #0]
   27ea6:	0011      	movs	r1, r2
   27ea8:	221f      	movs	r2, #31
   27eaa:	400a      	ands	r2, r1
   27eac:	2101      	movs	r1, #1
   27eae:	4091      	lsls	r1, r2
   27eb0:	000a      	movs	r2, r1
   27eb2:	601a      	str	r2, [r3, #0]
}
   27eb4:	46c0      	nop			; (mov r8, r8)
   27eb6:	46bd      	mov	sp, r7
   27eb8:	b002      	add	sp, #8
   27eba:	bd80      	pop	{r7, pc}
   27ebc:	e000e100 	.word	0xe000e100

00027ec0 <system_interrupt_disable>:
{
   27ec0:	b580      	push	{r7, lr}
   27ec2:	b082      	sub	sp, #8
   27ec4:	af00      	add	r7, sp, #0
   27ec6:	0002      	movs	r2, r0
   27ec8:	1dfb      	adds	r3, r7, #7
   27eca:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27ecc:	4a07      	ldr	r2, [pc, #28]	; (27eec <system_interrupt_disable+0x2c>)
   27ece:	1dfb      	adds	r3, r7, #7
   27ed0:	781b      	ldrb	r3, [r3, #0]
   27ed2:	0019      	movs	r1, r3
   27ed4:	231f      	movs	r3, #31
   27ed6:	400b      	ands	r3, r1
   27ed8:	2101      	movs	r1, #1
   27eda:	4099      	lsls	r1, r3
   27edc:	000b      	movs	r3, r1
   27ede:	0019      	movs	r1, r3
   27ee0:	2380      	movs	r3, #128	; 0x80
   27ee2:	50d1      	str	r1, [r2, r3]
}
   27ee4:	46c0      	nop			; (mov r8, r8)
   27ee6:	46bd      	mov	sp, r7
   27ee8:	b002      	add	sp, #8
   27eea:	bd80      	pop	{r7, pc}
   27eec:	e000e100 	.word	0xe000e100

00027ef0 <spi_is_syncing>:
{
   27ef0:	b580      	push	{r7, lr}
   27ef2:	b084      	sub	sp, #16
   27ef4:	af00      	add	r7, sp, #0
   27ef6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27ef8:	687b      	ldr	r3, [r7, #4]
   27efa:	681b      	ldr	r3, [r3, #0]
   27efc:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   27efe:	68fb      	ldr	r3, [r7, #12]
   27f00:	69db      	ldr	r3, [r3, #28]
   27f02:	1e5a      	subs	r2, r3, #1
   27f04:	4193      	sbcs	r3, r2
   27f06:	b2db      	uxtb	r3, r3
}
   27f08:	0018      	movs	r0, r3
   27f0a:	46bd      	mov	sp, r7
   27f0c:	b004      	add	sp, #16
   27f0e:	bd80      	pop	{r7, pc}

00027f10 <spi_enable>:
{
   27f10:	b580      	push	{r7, lr}
   27f12:	b084      	sub	sp, #16
   27f14:	af00      	add	r7, sp, #0
   27f16:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27f18:	687b      	ldr	r3, [r7, #4]
   27f1a:	681b      	ldr	r3, [r3, #0]
   27f1c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   27f1e:	687b      	ldr	r3, [r7, #4]
   27f20:	681b      	ldr	r3, [r3, #0]
   27f22:	0018      	movs	r0, r3
   27f24:	4b0b      	ldr	r3, [pc, #44]	; (27f54 <spi_enable+0x44>)
   27f26:	4798      	blx	r3
   27f28:	0003      	movs	r3, r0
   27f2a:	0018      	movs	r0, r3
   27f2c:	4b0a      	ldr	r3, [pc, #40]	; (27f58 <spi_enable+0x48>)
   27f2e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   27f30:	46c0      	nop			; (mov r8, r8)
   27f32:	687b      	ldr	r3, [r7, #4]
   27f34:	0018      	movs	r0, r3
   27f36:	4b09      	ldr	r3, [pc, #36]	; (27f5c <spi_enable+0x4c>)
   27f38:	4798      	blx	r3
   27f3a:	1e03      	subs	r3, r0, #0
   27f3c:	d1f9      	bne.n	27f32 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   27f3e:	68fb      	ldr	r3, [r7, #12]
   27f40:	681b      	ldr	r3, [r3, #0]
   27f42:	2202      	movs	r2, #2
   27f44:	431a      	orrs	r2, r3
   27f46:	68fb      	ldr	r3, [r7, #12]
   27f48:	601a      	str	r2, [r3, #0]
}
   27f4a:	46c0      	nop			; (mov r8, r8)
   27f4c:	46bd      	mov	sp, r7
   27f4e:	b004      	add	sp, #16
   27f50:	bd80      	pop	{r7, pc}
   27f52:	46c0      	nop			; (mov r8, r8)
   27f54:	00027c2d 	.word	0x00027c2d
   27f58:	00027e95 	.word	0x00027e95
   27f5c:	00027ef1 	.word	0x00027ef1

00027f60 <spi_disable>:
{
   27f60:	b580      	push	{r7, lr}
   27f62:	b084      	sub	sp, #16
   27f64:	af00      	add	r7, sp, #0
   27f66:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27f68:	687b      	ldr	r3, [r7, #4]
   27f6a:	681b      	ldr	r3, [r3, #0]
   27f6c:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   27f6e:	687b      	ldr	r3, [r7, #4]
   27f70:	681b      	ldr	r3, [r3, #0]
   27f72:	0018      	movs	r0, r3
   27f74:	4b0e      	ldr	r3, [pc, #56]	; (27fb0 <spi_disable+0x50>)
   27f76:	4798      	blx	r3
   27f78:	0003      	movs	r3, r0
   27f7a:	0018      	movs	r0, r3
   27f7c:	4b0d      	ldr	r3, [pc, #52]	; (27fb4 <spi_disable+0x54>)
   27f7e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   27f80:	46c0      	nop			; (mov r8, r8)
   27f82:	687b      	ldr	r3, [r7, #4]
   27f84:	0018      	movs	r0, r3
   27f86:	4b0c      	ldr	r3, [pc, #48]	; (27fb8 <spi_disable+0x58>)
   27f88:	4798      	blx	r3
   27f8a:	1e03      	subs	r3, r0, #0
   27f8c:	d1f9      	bne.n	27f82 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   27f8e:	68fb      	ldr	r3, [r7, #12]
   27f90:	228f      	movs	r2, #143	; 0x8f
   27f92:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   27f94:	68fb      	ldr	r3, [r7, #12]
   27f96:	228f      	movs	r2, #143	; 0x8f
   27f98:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   27f9a:	68fb      	ldr	r3, [r7, #12]
   27f9c:	681b      	ldr	r3, [r3, #0]
   27f9e:	2202      	movs	r2, #2
   27fa0:	4393      	bics	r3, r2
   27fa2:	001a      	movs	r2, r3
   27fa4:	68fb      	ldr	r3, [r7, #12]
   27fa6:	601a      	str	r2, [r3, #0]
}
   27fa8:	46c0      	nop			; (mov r8, r8)
   27faa:	46bd      	mov	sp, r7
   27fac:	b004      	add	sp, #16
   27fae:	bd80      	pop	{r7, pc}
   27fb0:	00027c2d 	.word	0x00027c2d
   27fb4:	00027ec1 	.word	0x00027ec1
   27fb8:	00027ef1 	.word	0x00027ef1

00027fbc <spi_is_write_complete>:
{
   27fbc:	b580      	push	{r7, lr}
   27fbe:	b084      	sub	sp, #16
   27fc0:	af00      	add	r7, sp, #0
   27fc2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27fc4:	687b      	ldr	r3, [r7, #4]
   27fc6:	681b      	ldr	r3, [r3, #0]
   27fc8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   27fca:	68fb      	ldr	r3, [r7, #12]
   27fcc:	7e1b      	ldrb	r3, [r3, #24]
   27fce:	b2db      	uxtb	r3, r3
   27fd0:	001a      	movs	r2, r3
   27fd2:	2302      	movs	r3, #2
   27fd4:	4013      	ands	r3, r2
   27fd6:	1e5a      	subs	r2, r3, #1
   27fd8:	4193      	sbcs	r3, r2
   27fda:	b2db      	uxtb	r3, r3
}
   27fdc:	0018      	movs	r0, r3
   27fde:	46bd      	mov	sp, r7
   27fe0:	b004      	add	sp, #16
   27fe2:	bd80      	pop	{r7, pc}

00027fe4 <spi_is_ready_to_write>:
{
   27fe4:	b580      	push	{r7, lr}
   27fe6:	b084      	sub	sp, #16
   27fe8:	af00      	add	r7, sp, #0
   27fea:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27fec:	687b      	ldr	r3, [r7, #4]
   27fee:	681b      	ldr	r3, [r3, #0]
   27ff0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   27ff2:	68fb      	ldr	r3, [r7, #12]
   27ff4:	7e1b      	ldrb	r3, [r3, #24]
   27ff6:	b2db      	uxtb	r3, r3
   27ff8:	001a      	movs	r2, r3
   27ffa:	2301      	movs	r3, #1
   27ffc:	4013      	ands	r3, r2
   27ffe:	1e5a      	subs	r2, r3, #1
   28000:	4193      	sbcs	r3, r2
   28002:	b2db      	uxtb	r3, r3
}
   28004:	0018      	movs	r0, r3
   28006:	46bd      	mov	sp, r7
   28008:	b004      	add	sp, #16
   2800a:	bd80      	pop	{r7, pc}

0002800c <spi_is_ready_to_read>:
{
   2800c:	b580      	push	{r7, lr}
   2800e:	b084      	sub	sp, #16
   28010:	af00      	add	r7, sp, #0
   28012:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28014:	687b      	ldr	r3, [r7, #4]
   28016:	681b      	ldr	r3, [r3, #0]
   28018:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2801a:	68fb      	ldr	r3, [r7, #12]
   2801c:	7e1b      	ldrb	r3, [r3, #24]
   2801e:	b2db      	uxtb	r3, r3
   28020:	001a      	movs	r2, r3
   28022:	2304      	movs	r3, #4
   28024:	4013      	ands	r3, r2
   28026:	1e5a      	subs	r2, r3, #1
   28028:	4193      	sbcs	r3, r2
   2802a:	b2db      	uxtb	r3, r3
}
   2802c:	0018      	movs	r0, r3
   2802e:	46bd      	mov	sp, r7
   28030:	b004      	add	sp, #16
   28032:	bd80      	pop	{r7, pc}

00028034 <spi_write>:
{
   28034:	b580      	push	{r7, lr}
   28036:	b084      	sub	sp, #16
   28038:	af00      	add	r7, sp, #0
   2803a:	6078      	str	r0, [r7, #4]
   2803c:	000a      	movs	r2, r1
   2803e:	1cbb      	adds	r3, r7, #2
   28040:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28042:	687b      	ldr	r3, [r7, #4]
   28044:	681b      	ldr	r3, [r3, #0]
   28046:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   28048:	687b      	ldr	r3, [r7, #4]
   2804a:	0018      	movs	r0, r3
   2804c:	4b0a      	ldr	r3, [pc, #40]	; (28078 <spi_write+0x44>)
   2804e:	4798      	blx	r3
   28050:	0003      	movs	r3, r0
   28052:	001a      	movs	r2, r3
   28054:	2301      	movs	r3, #1
   28056:	4053      	eors	r3, r2
   28058:	b2db      	uxtb	r3, r3
   2805a:	2b00      	cmp	r3, #0
   2805c:	d001      	beq.n	28062 <spi_write+0x2e>
		return STATUS_BUSY;
   2805e:	2305      	movs	r3, #5
   28060:	e006      	b.n	28070 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   28062:	1cbb      	adds	r3, r7, #2
   28064:	881b      	ldrh	r3, [r3, #0]
   28066:	05db      	lsls	r3, r3, #23
   28068:	0dda      	lsrs	r2, r3, #23
   2806a:	68fb      	ldr	r3, [r7, #12]
   2806c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   2806e:	2300      	movs	r3, #0
}
   28070:	0018      	movs	r0, r3
   28072:	46bd      	mov	sp, r7
   28074:	b004      	add	sp, #16
   28076:	bd80      	pop	{r7, pc}
   28078:	00027fe5 	.word	0x00027fe5

0002807c <spi_read>:
{
   2807c:	b580      	push	{r7, lr}
   2807e:	b084      	sub	sp, #16
   28080:	af00      	add	r7, sp, #0
   28082:	6078      	str	r0, [r7, #4]
   28084:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28086:	687b      	ldr	r3, [r7, #4]
   28088:	681b      	ldr	r3, [r3, #0]
   2808a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   2808c:	687b      	ldr	r3, [r7, #4]
   2808e:	0018      	movs	r0, r3
   28090:	4b1b      	ldr	r3, [pc, #108]	; (28100 <spi_read+0x84>)
   28092:	4798      	blx	r3
   28094:	0003      	movs	r3, r0
   28096:	001a      	movs	r2, r3
   28098:	2301      	movs	r3, #1
   2809a:	4053      	eors	r3, r2
   2809c:	b2db      	uxtb	r3, r3
   2809e:	2b00      	cmp	r3, #0
   280a0:	d001      	beq.n	280a6 <spi_read+0x2a>
		return STATUS_ERR_IO;
   280a2:	2310      	movs	r3, #16
   280a4:	e027      	b.n	280f6 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   280a6:	230f      	movs	r3, #15
   280a8:	18fb      	adds	r3, r7, r3
   280aa:	2200      	movs	r2, #0
   280ac:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   280ae:	68bb      	ldr	r3, [r7, #8]
   280b0:	8b5b      	ldrh	r3, [r3, #26]
   280b2:	b29b      	uxth	r3, r3
   280b4:	001a      	movs	r2, r3
   280b6:	2304      	movs	r3, #4
   280b8:	4013      	ands	r3, r2
   280ba:	d006      	beq.n	280ca <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   280bc:	230f      	movs	r3, #15
   280be:	18fb      	adds	r3, r7, r3
   280c0:	221e      	movs	r2, #30
   280c2:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   280c4:	68bb      	ldr	r3, [r7, #8]
   280c6:	2204      	movs	r2, #4
   280c8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   280ca:	687b      	ldr	r3, [r7, #4]
   280cc:	799b      	ldrb	r3, [r3, #6]
   280ce:	2b01      	cmp	r3, #1
   280d0:	d108      	bne.n	280e4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   280d2:	68bb      	ldr	r3, [r7, #8]
   280d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   280d6:	b29b      	uxth	r3, r3
   280d8:	05db      	lsls	r3, r3, #23
   280da:	0ddb      	lsrs	r3, r3, #23
   280dc:	b29a      	uxth	r2, r3
   280de:	683b      	ldr	r3, [r7, #0]
   280e0:	801a      	strh	r2, [r3, #0]
   280e2:	e005      	b.n	280f0 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   280e4:	68bb      	ldr	r3, [r7, #8]
   280e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   280e8:	b2db      	uxtb	r3, r3
   280ea:	b29a      	uxth	r2, r3
   280ec:	683b      	ldr	r3, [r7, #0]
   280ee:	801a      	strh	r2, [r3, #0]
	return retval;
   280f0:	230f      	movs	r3, #15
   280f2:	18fb      	adds	r3, r7, r3
   280f4:	781b      	ldrb	r3, [r3, #0]
}
   280f6:	0018      	movs	r0, r3
   280f8:	46bd      	mov	sp, r7
   280fa:	b004      	add	sp, #16
   280fc:	bd80      	pop	{r7, pc}
   280fe:	46c0      	nop			; (mov r8, r8)
   28100:	0002800d 	.word	0x0002800d

00028104 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   28104:	b590      	push	{r4, r7, lr}
   28106:	b089      	sub	sp, #36	; 0x24
   28108:	af00      	add	r7, sp, #0
   2810a:	6078      	str	r0, [r7, #4]
   2810c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2810e:	230c      	movs	r3, #12
   28110:	18fb      	adds	r3, r7, r3
   28112:	2200      	movs	r2, #0
   28114:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   28116:	687b      	ldr	r3, [r7, #4]
   28118:	681b      	ldr	r3, [r3, #0]
   2811a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   2811c:	687b      	ldr	r3, [r7, #4]
   2811e:	0018      	movs	r0, r3
   28120:	4b24      	ldr	r3, [pc, #144]	; (281b4 <spi_set_baudrate+0xb0>)
   28122:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   28124:	46c0      	nop			; (mov r8, r8)
   28126:	687b      	ldr	r3, [r7, #4]
   28128:	0018      	movs	r0, r3
   2812a:	4b23      	ldr	r3, [pc, #140]	; (281b8 <spi_set_baudrate+0xb4>)
   2812c:	4798      	blx	r3
   2812e:	1e03      	subs	r3, r0, #0
   28130:	d1f9      	bne.n	28126 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28132:	687b      	ldr	r3, [r7, #4]
   28134:	681b      	ldr	r3, [r3, #0]
   28136:	0018      	movs	r0, r3
   28138:	4b20      	ldr	r3, [pc, #128]	; (281bc <spi_set_baudrate+0xb8>)
   2813a:	4798      	blx	r3
   2813c:	0003      	movs	r3, r0
   2813e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28140:	69bb      	ldr	r3, [r7, #24]
   28142:	3314      	adds	r3, #20
   28144:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   28146:	697b      	ldr	r3, [r7, #20]
   28148:	b2db      	uxtb	r3, r3
   2814a:	0018      	movs	r0, r3
   2814c:	4b1c      	ldr	r3, [pc, #112]	; (281c0 <spi_set_baudrate+0xbc>)
   2814e:	4798      	blx	r3
   28150:	0003      	movs	r3, r0
   28152:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   28154:	230f      	movs	r3, #15
   28156:	18fc      	adds	r4, r7, r3
   28158:	230c      	movs	r3, #12
   2815a:	18fa      	adds	r2, r7, r3
   2815c:	6939      	ldr	r1, [r7, #16]
   2815e:	683b      	ldr	r3, [r7, #0]
   28160:	0018      	movs	r0, r3
   28162:	4b18      	ldr	r3, [pc, #96]	; (281c4 <spi_set_baudrate+0xc0>)
   28164:	4798      	blx	r3
   28166:	0003      	movs	r3, r0
   28168:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   2816a:	230f      	movs	r3, #15
   2816c:	18fb      	adds	r3, r7, r3
   2816e:	781b      	ldrb	r3, [r3, #0]
   28170:	2b00      	cmp	r3, #0
   28172:	d001      	beq.n	28178 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   28174:	2317      	movs	r3, #23
   28176:	e018      	b.n	281aa <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   28178:	230c      	movs	r3, #12
   2817a:	18fb      	adds	r3, r7, r3
   2817c:	881b      	ldrh	r3, [r3, #0]
   2817e:	b2da      	uxtb	r2, r3
   28180:	69fb      	ldr	r3, [r7, #28]
   28182:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   28184:	46c0      	nop			; (mov r8, r8)
   28186:	687b      	ldr	r3, [r7, #4]
   28188:	0018      	movs	r0, r3
   2818a:	4b0b      	ldr	r3, [pc, #44]	; (281b8 <spi_set_baudrate+0xb4>)
   2818c:	4798      	blx	r3
   2818e:	1e03      	subs	r3, r0, #0
   28190:	d1f9      	bne.n	28186 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   28192:	687b      	ldr	r3, [r7, #4]
   28194:	0018      	movs	r0, r3
   28196:	4b0c      	ldr	r3, [pc, #48]	; (281c8 <spi_set_baudrate+0xc4>)
   28198:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2819a:	46c0      	nop			; (mov r8, r8)
   2819c:	687b      	ldr	r3, [r7, #4]
   2819e:	0018      	movs	r0, r3
   281a0:	4b05      	ldr	r3, [pc, #20]	; (281b8 <spi_set_baudrate+0xb4>)
   281a2:	4798      	blx	r3
   281a4:	1e03      	subs	r3, r0, #0
   281a6:	d1f9      	bne.n	2819c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   281a8:	2300      	movs	r3, #0
}
   281aa:	0018      	movs	r0, r3
   281ac:	46bd      	mov	sp, r7
   281ae:	b009      	add	sp, #36	; 0x24
   281b0:	bd90      	pop	{r4, r7, pc}
   281b2:	46c0      	nop			; (mov r8, r8)
   281b4:	00027f61 	.word	0x00027f61
   281b8:	00027ef1 	.word	0x00027ef1
   281bc:	00027b5d 	.word	0x00027b5d
   281c0:	0002a511 	.word	0x0002a511
   281c4:	000276d7 	.word	0x000276d7
   281c8:	00027f11 	.word	0x00027f11

000281cc <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   281cc:	b590      	push	{r4, r7, lr}
   281ce:	b093      	sub	sp, #76	; 0x4c
   281d0:	af00      	add	r7, sp, #0
   281d2:	6078      	str	r0, [r7, #4]
   281d4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   281d6:	687b      	ldr	r3, [r7, #4]
   281d8:	681b      	ldr	r3, [r3, #0]
   281da:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   281dc:	687b      	ldr	r3, [r7, #4]
   281de:	681b      	ldr	r3, [r3, #0]
   281e0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   281e2:	231c      	movs	r3, #28
   281e4:	18fb      	adds	r3, r7, r3
   281e6:	0018      	movs	r0, r3
   281e8:	4b75      	ldr	r3, [pc, #468]	; (283c0 <_spi_set_config+0x1f4>)
   281ea:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   281ec:	231c      	movs	r3, #28
   281ee:	18fb      	adds	r3, r7, r3
   281f0:	2200      	movs	r2, #0
   281f2:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   281f4:	683b      	ldr	r3, [r7, #0]
   281f6:	781b      	ldrb	r3, [r3, #0]
   281f8:	2b00      	cmp	r3, #0
   281fa:	d103      	bne.n	28204 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   281fc:	231c      	movs	r3, #28
   281fe:	18fb      	adds	r3, r7, r3
   28200:	2200      	movs	r2, #0
   28202:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28204:	683b      	ldr	r3, [r7, #0]
   28206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   28208:	230c      	movs	r3, #12
   2820a:	18fb      	adds	r3, r7, r3
   2820c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2820e:	683b      	ldr	r3, [r7, #0]
   28210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   28212:	230c      	movs	r3, #12
   28214:	18fb      	adds	r3, r7, r3
   28216:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28218:	683b      	ldr	r3, [r7, #0]
   2821a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2821c:	230c      	movs	r3, #12
   2821e:	18fb      	adds	r3, r7, r3
   28220:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   28222:	683b      	ldr	r3, [r7, #0]
   28224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   28226:	230c      	movs	r3, #12
   28228:	18fb      	adds	r3, r7, r3
   2822a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2822c:	2347      	movs	r3, #71	; 0x47
   2822e:	18fb      	adds	r3, r7, r3
   28230:	2200      	movs	r2, #0
   28232:	701a      	strb	r2, [r3, #0]
   28234:	e02c      	b.n	28290 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   28236:	2347      	movs	r3, #71	; 0x47
   28238:	18fb      	adds	r3, r7, r3
   2823a:	781a      	ldrb	r2, [r3, #0]
   2823c:	230c      	movs	r3, #12
   2823e:	18fb      	adds	r3, r7, r3
   28240:	0092      	lsls	r2, r2, #2
   28242:	58d3      	ldr	r3, [r2, r3]
   28244:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   28246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28248:	2b00      	cmp	r3, #0
   2824a:	d109      	bne.n	28260 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2824c:	2347      	movs	r3, #71	; 0x47
   2824e:	18fb      	adds	r3, r7, r3
   28250:	781a      	ldrb	r2, [r3, #0]
   28252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28254:	0011      	movs	r1, r2
   28256:	0018      	movs	r0, r3
   28258:	4b5a      	ldr	r3, [pc, #360]	; (283c4 <_spi_set_config+0x1f8>)
   2825a:	4798      	blx	r3
   2825c:	0003      	movs	r3, r0
   2825e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28262:	3301      	adds	r3, #1
   28264:	d00d      	beq.n	28282 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   28266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28268:	b2da      	uxtb	r2, r3
   2826a:	231c      	movs	r3, #28
   2826c:	18fb      	adds	r3, r7, r3
   2826e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28272:	0c1b      	lsrs	r3, r3, #16
   28274:	b2db      	uxtb	r3, r3
   28276:	221c      	movs	r2, #28
   28278:	18ba      	adds	r2, r7, r2
   2827a:	0011      	movs	r1, r2
   2827c:	0018      	movs	r0, r3
   2827e:	4b52      	ldr	r3, [pc, #328]	; (283c8 <_spi_set_config+0x1fc>)
   28280:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   28282:	2347      	movs	r3, #71	; 0x47
   28284:	18fb      	adds	r3, r7, r3
   28286:	781a      	ldrb	r2, [r3, #0]
   28288:	2347      	movs	r3, #71	; 0x47
   2828a:	18fb      	adds	r3, r7, r3
   2828c:	3201      	adds	r2, #1
   2828e:	701a      	strb	r2, [r3, #0]
   28290:	2347      	movs	r3, #71	; 0x47
   28292:	18fb      	adds	r3, r7, r3
   28294:	781b      	ldrb	r3, [r3, #0]
   28296:	2b03      	cmp	r3, #3
   28298:	d9cd      	bls.n	28236 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2829a:	683b      	ldr	r3, [r7, #0]
   2829c:	781a      	ldrb	r2, [r3, #0]
   2829e:	687b      	ldr	r3, [r7, #4]
   282a0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   282a2:	683b      	ldr	r3, [r7, #0]
   282a4:	7c1a      	ldrb	r2, [r3, #16]
   282a6:	687b      	ldr	r3, [r7, #4]
   282a8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   282aa:	683b      	ldr	r3, [r7, #0]
   282ac:	7c9a      	ldrb	r2, [r3, #18]
   282ae:	687b      	ldr	r3, [r7, #4]
   282b0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   282b2:	683b      	ldr	r3, [r7, #0]
   282b4:	7d1a      	ldrb	r2, [r3, #20]
   282b6:	687b      	ldr	r3, [r7, #4]
   282b8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   282ba:	230a      	movs	r3, #10
   282bc:	18fb      	adds	r3, r7, r3
   282be:	2200      	movs	r2, #0
   282c0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   282c2:	2300      	movs	r3, #0
   282c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   282c6:	2300      	movs	r3, #0
   282c8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   282ca:	683b      	ldr	r3, [r7, #0]
   282cc:	781b      	ldrb	r3, [r3, #0]
   282ce:	2b01      	cmp	r3, #1
   282d0:	d129      	bne.n	28326 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   282d2:	687b      	ldr	r3, [r7, #4]
   282d4:	681b      	ldr	r3, [r3, #0]
   282d6:	0018      	movs	r0, r3
   282d8:	4b3c      	ldr	r3, [pc, #240]	; (283cc <_spi_set_config+0x200>)
   282da:	4798      	blx	r3
   282dc:	0003      	movs	r3, r0
   282de:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   282e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   282e2:	3314      	adds	r3, #20
   282e4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   282e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   282e8:	b2db      	uxtb	r3, r3
   282ea:	0018      	movs	r0, r3
   282ec:	4b38      	ldr	r3, [pc, #224]	; (283d0 <_spi_set_config+0x204>)
   282ee:	4798      	blx	r3
   282f0:	0003      	movs	r3, r0
   282f2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   282f4:	683b      	ldr	r3, [r7, #0]
   282f6:	699b      	ldr	r3, [r3, #24]
   282f8:	2223      	movs	r2, #35	; 0x23
   282fa:	18bc      	adds	r4, r7, r2
   282fc:	220a      	movs	r2, #10
   282fe:	18ba      	adds	r2, r7, r2
   28300:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28302:	0018      	movs	r0, r3
   28304:	4b33      	ldr	r3, [pc, #204]	; (283d4 <_spi_set_config+0x208>)
   28306:	4798      	blx	r3
   28308:	0003      	movs	r3, r0
   2830a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   2830c:	2323      	movs	r3, #35	; 0x23
   2830e:	18fb      	adds	r3, r7, r3
   28310:	781b      	ldrb	r3, [r3, #0]
   28312:	2b00      	cmp	r3, #0
   28314:	d001      	beq.n	2831a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   28316:	2317      	movs	r3, #23
   28318:	e04e      	b.n	283b8 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   2831a:	230a      	movs	r3, #10
   2831c:	18fb      	adds	r3, r7, r3
   2831e:	881b      	ldrh	r3, [r3, #0]
   28320:	b2da      	uxtb	r2, r3
   28322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28324:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   28326:	683b      	ldr	r3, [r7, #0]
   28328:	685b      	ldr	r3, [r3, #4]
   2832a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2832c:	4313      	orrs	r3, r2
   2832e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   28330:	683b      	ldr	r3, [r7, #0]
   28332:	689b      	ldr	r3, [r3, #8]
   28334:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28336:	4313      	orrs	r3, r2
   28338:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2833a:	683b      	ldr	r3, [r7, #0]
   2833c:	68db      	ldr	r3, [r3, #12]
   2833e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28340:	4313      	orrs	r3, r2
   28342:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   28344:	683b      	ldr	r3, [r7, #0]
   28346:	7c1b      	ldrb	r3, [r3, #16]
   28348:	001a      	movs	r2, r3
   2834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2834c:	4313      	orrs	r3, r2
   2834e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   28350:	683b      	ldr	r3, [r7, #0]
   28352:	7c5b      	ldrb	r3, [r3, #17]
   28354:	2b00      	cmp	r3, #0
   28356:	d103      	bne.n	28360 <_spi_set_config+0x194>
   28358:	4b1f      	ldr	r3, [pc, #124]	; (283d8 <_spi_set_config+0x20c>)
   2835a:	4798      	blx	r3
   2835c:	1e03      	subs	r3, r0, #0
   2835e:	d003      	beq.n	28368 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   28360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28362:	2280      	movs	r2, #128	; 0x80
   28364:	4313      	orrs	r3, r2
   28366:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   28368:	683b      	ldr	r3, [r7, #0]
   2836a:	7c9b      	ldrb	r3, [r3, #18]
   2836c:	2b00      	cmp	r3, #0
   2836e:	d004      	beq.n	2837a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   28370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28372:	2280      	movs	r2, #128	; 0x80
   28374:	0292      	lsls	r2, r2, #10
   28376:	4313      	orrs	r3, r2
   28378:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2837a:	683b      	ldr	r3, [r7, #0]
   2837c:	7cdb      	ldrb	r3, [r3, #19]
   2837e:	2b00      	cmp	r3, #0
   28380:	d004      	beq.n	2838c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   28382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28384:	2280      	movs	r2, #128	; 0x80
   28386:	0092      	lsls	r2, r2, #2
   28388:	4313      	orrs	r3, r2
   2838a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2838c:	683b      	ldr	r3, [r7, #0]
   2838e:	7d1b      	ldrb	r3, [r3, #20]
   28390:	2b00      	cmp	r3, #0
   28392:	d004      	beq.n	2839e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   28394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28396:	2280      	movs	r2, #128	; 0x80
   28398:	0192      	lsls	r2, r2, #6
   2839a:	4313      	orrs	r3, r2
   2839c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   2839e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   283a0:	681a      	ldr	r2, [r3, #0]
   283a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   283a4:	431a      	orrs	r2, r3
   283a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   283a8:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   283aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   283ac:	685a      	ldr	r2, [r3, #4]
   283ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   283b0:	431a      	orrs	r2, r3
   283b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   283b4:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   283b6:	2300      	movs	r3, #0
}
   283b8:	0018      	movs	r0, r3
   283ba:	46bd      	mov	sp, r7
   283bc:	b013      	add	sp, #76	; 0x4c
   283be:	bd90      	pop	{r4, r7, pc}
   283c0:	00027d01 	.word	0x00027d01
   283c4:	000279a1 	.word	0x000279a1
   283c8:	0002a74d 	.word	0x0002a74d
   283cc:	00027b5d 	.word	0x00027b5d
   283d0:	0002a511 	.word	0x0002a511
   283d4:	000276d7 	.word	0x000276d7
   283d8:	00027e75 	.word	0x00027e75

000283dc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   283dc:	b590      	push	{r4, r7, lr}
   283de:	b08b      	sub	sp, #44	; 0x2c
   283e0:	af00      	add	r7, sp, #0
   283e2:	60f8      	str	r0, [r7, #12]
   283e4:	60b9      	str	r1, [r7, #8]
   283e6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   283e8:	68fb      	ldr	r3, [r7, #12]
   283ea:	68ba      	ldr	r2, [r7, #8]
   283ec:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   283ee:	68fb      	ldr	r3, [r7, #12]
   283f0:	681b      	ldr	r3, [r3, #0]
   283f2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   283f4:	6a3b      	ldr	r3, [r7, #32]
   283f6:	681b      	ldr	r3, [r3, #0]
   283f8:	2202      	movs	r2, #2
   283fa:	4013      	ands	r3, r2
   283fc:	d001      	beq.n	28402 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   283fe:	231c      	movs	r3, #28
   28400:	e09c      	b.n	2853c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   28402:	6a3b      	ldr	r3, [r7, #32]
   28404:	681b      	ldr	r3, [r3, #0]
   28406:	2201      	movs	r2, #1
   28408:	4013      	ands	r3, r2
   2840a:	d001      	beq.n	28410 <spi_init+0x34>
		return STATUS_BUSY;
   2840c:	2305      	movs	r3, #5
   2840e:	e095      	b.n	2853c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28410:	68fb      	ldr	r3, [r7, #12]
   28412:	681b      	ldr	r3, [r3, #0]
   28414:	0018      	movs	r0, r3
   28416:	4b4b      	ldr	r3, [pc, #300]	; (28544 <spi_init+0x168>)
   28418:	4798      	blx	r3
   2841a:	0003      	movs	r3, r0
   2841c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2841e:	69fb      	ldr	r3, [r7, #28]
   28420:	3302      	adds	r3, #2
   28422:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28424:	69fb      	ldr	r3, [r7, #28]
   28426:	3314      	adds	r3, #20
   28428:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2842a:	2201      	movs	r2, #1
   2842c:	69bb      	ldr	r3, [r7, #24]
   2842e:	409a      	lsls	r2, r3
   28430:	0013      	movs	r3, r2
   28432:	0019      	movs	r1, r3
   28434:	2002      	movs	r0, #2
   28436:	4b44      	ldr	r3, [pc, #272]	; (28548 <spi_init+0x16c>)
   28438:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2843a:	2310      	movs	r3, #16
   2843c:	18fb      	adds	r3, r7, r3
   2843e:	0018      	movs	r0, r3
   28440:	4b42      	ldr	r3, [pc, #264]	; (2854c <spi_init+0x170>)
   28442:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28444:	687b      	ldr	r3, [r7, #4]
   28446:	2224      	movs	r2, #36	; 0x24
   28448:	5c9a      	ldrb	r2, [r3, r2]
   2844a:	2310      	movs	r3, #16
   2844c:	18fb      	adds	r3, r7, r3
   2844e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28450:	697b      	ldr	r3, [r7, #20]
   28452:	b2db      	uxtb	r3, r3
   28454:	2210      	movs	r2, #16
   28456:	18ba      	adds	r2, r7, r2
   28458:	0011      	movs	r1, r2
   2845a:	0018      	movs	r0, r3
   2845c:	4b3c      	ldr	r3, [pc, #240]	; (28550 <spi_init+0x174>)
   2845e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28460:	697b      	ldr	r3, [r7, #20]
   28462:	b2db      	uxtb	r3, r3
   28464:	0018      	movs	r0, r3
   28466:	4b3b      	ldr	r3, [pc, #236]	; (28554 <spi_init+0x178>)
   28468:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2846a:	687b      	ldr	r3, [r7, #4]
   2846c:	2224      	movs	r2, #36	; 0x24
   2846e:	5c9b      	ldrb	r3, [r3, r2]
   28470:	2100      	movs	r1, #0
   28472:	0018      	movs	r0, r3
   28474:	4b38      	ldr	r3, [pc, #224]	; (28558 <spi_init+0x17c>)
   28476:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   28478:	687b      	ldr	r3, [r7, #4]
   2847a:	781b      	ldrb	r3, [r3, #0]
   2847c:	2b01      	cmp	r3, #1
   2847e:	d105      	bne.n	2848c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   28480:	6a3b      	ldr	r3, [r7, #32]
   28482:	681b      	ldr	r3, [r3, #0]
   28484:	220c      	movs	r2, #12
   28486:	431a      	orrs	r2, r3
   28488:	6a3b      	ldr	r3, [r7, #32]
   2848a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2848c:	2327      	movs	r3, #39	; 0x27
   2848e:	18fb      	adds	r3, r7, r3
   28490:	2200      	movs	r2, #0
   28492:	701a      	strb	r2, [r3, #0]
   28494:	e010      	b.n	284b8 <spi_init+0xdc>
		module->callback[i]        = NULL;
   28496:	2327      	movs	r3, #39	; 0x27
   28498:	18fb      	adds	r3, r7, r3
   2849a:	781b      	ldrb	r3, [r3, #0]
   2849c:	68fa      	ldr	r2, [r7, #12]
   2849e:	3302      	adds	r3, #2
   284a0:	009b      	lsls	r3, r3, #2
   284a2:	18d3      	adds	r3, r2, r3
   284a4:	3304      	adds	r3, #4
   284a6:	2200      	movs	r2, #0
   284a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   284aa:	2327      	movs	r3, #39	; 0x27
   284ac:	18fb      	adds	r3, r7, r3
   284ae:	781a      	ldrb	r2, [r3, #0]
   284b0:	2327      	movs	r3, #39	; 0x27
   284b2:	18fb      	adds	r3, r7, r3
   284b4:	3201      	adds	r2, #1
   284b6:	701a      	strb	r2, [r3, #0]
   284b8:	2327      	movs	r3, #39	; 0x27
   284ba:	18fb      	adds	r3, r7, r3
   284bc:	781b      	ldrb	r3, [r3, #0]
   284be:	2b06      	cmp	r3, #6
   284c0:	d9e9      	bls.n	28496 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   284c2:	68fb      	ldr	r3, [r7, #12]
   284c4:	2200      	movs	r2, #0
   284c6:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   284c8:	68fb      	ldr	r3, [r7, #12]
   284ca:	2200      	movs	r2, #0
   284cc:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   284ce:	68fb      	ldr	r3, [r7, #12]
   284d0:	2200      	movs	r2, #0
   284d2:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   284d4:	68fb      	ldr	r3, [r7, #12]
   284d6:	2200      	movs	r2, #0
   284d8:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   284da:	68fb      	ldr	r3, [r7, #12]
   284dc:	2236      	movs	r2, #54	; 0x36
   284de:	2100      	movs	r1, #0
   284e0:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   284e2:	68fb      	ldr	r3, [r7, #12]
   284e4:	2237      	movs	r2, #55	; 0x37
   284e6:	2100      	movs	r1, #0
   284e8:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   284ea:	68fb      	ldr	r3, [r7, #12]
   284ec:	2238      	movs	r2, #56	; 0x38
   284ee:	2100      	movs	r1, #0
   284f0:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   284f2:	68fb      	ldr	r3, [r7, #12]
   284f4:	2203      	movs	r2, #3
   284f6:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   284f8:	68fb      	ldr	r3, [r7, #12]
   284fa:	2200      	movs	r2, #0
   284fc:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   284fe:	68fb      	ldr	r3, [r7, #12]
   28500:	681b      	ldr	r3, [r3, #0]
   28502:	2213      	movs	r2, #19
   28504:	18bc      	adds	r4, r7, r2
   28506:	0018      	movs	r0, r3
   28508:	4b0e      	ldr	r3, [pc, #56]	; (28544 <spi_init+0x168>)
   2850a:	4798      	blx	r3
   2850c:	0003      	movs	r3, r0
   2850e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   28510:	4a12      	ldr	r2, [pc, #72]	; (2855c <spi_init+0x180>)
   28512:	2313      	movs	r3, #19
   28514:	18fb      	adds	r3, r7, r3
   28516:	781b      	ldrb	r3, [r3, #0]
   28518:	0011      	movs	r1, r2
   2851a:	0018      	movs	r0, r3
   2851c:	4b10      	ldr	r3, [pc, #64]	; (28560 <spi_init+0x184>)
   2851e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28520:	2313      	movs	r3, #19
   28522:	18fb      	adds	r3, r7, r3
   28524:	781a      	ldrb	r2, [r3, #0]
   28526:	4b0f      	ldr	r3, [pc, #60]	; (28564 <spi_init+0x188>)
   28528:	0092      	lsls	r2, r2, #2
   2852a:	68f9      	ldr	r1, [r7, #12]
   2852c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   2852e:	687a      	ldr	r2, [r7, #4]
   28530:	68fb      	ldr	r3, [r7, #12]
   28532:	0011      	movs	r1, r2
   28534:	0018      	movs	r0, r3
   28536:	4b0c      	ldr	r3, [pc, #48]	; (28568 <spi_init+0x18c>)
   28538:	4798      	blx	r3
   2853a:	0003      	movs	r3, r0
}
   2853c:	0018      	movs	r0, r3
   2853e:	46bd      	mov	sp, r7
   28540:	b00b      	add	sp, #44	; 0x2c
   28542:	bd90      	pop	{r4, r7, pc}
   28544:	00027b5d 	.word	0x00027b5d
   28548:	00027e19 	.word	0x00027e19
   2854c:	00027e01 	.word	0x00027e01
   28550:	0002a3ed 	.word	0x0002a3ed
   28554:	0002a431 	.word	0x0002a431
   28558:	00027915 	.word	0x00027915
   2855c:	00028a35 	.word	0x00028a35
   28560:	00027bc1 	.word	0x00027bc1
   28564:	20005c08 	.word	0x20005c08
   28568:	000281cd 	.word	0x000281cd

0002856c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   2856c:	b590      	push	{r4, r7, lr}
   2856e:	b087      	sub	sp, #28
   28570:	af00      	add	r7, sp, #0
   28572:	60f8      	str	r0, [r7, #12]
   28574:	60b9      	str	r1, [r7, #8]
   28576:	0019      	movs	r1, r3
   28578:	1dbb      	adds	r3, r7, #6
   2857a:	801a      	strh	r2, [r3, #0]
   2857c:	1d3b      	adds	r3, r7, #4
   2857e:	1c0a      	adds	r2, r1, #0
   28580:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28582:	68fb      	ldr	r3, [r7, #12]
   28584:	2238      	movs	r2, #56	; 0x38
   28586:	5c9b      	ldrb	r3, [r3, r2]
   28588:	b2db      	uxtb	r3, r3
   2858a:	2b05      	cmp	r3, #5
   2858c:	d101      	bne.n	28592 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2858e:	2305      	movs	r3, #5
   28590:	e07a      	b.n	28688 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   28592:	1dbb      	adds	r3, r7, #6
   28594:	881b      	ldrh	r3, [r3, #0]
   28596:	2b00      	cmp	r3, #0
   28598:	d101      	bne.n	2859e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   2859a:	2317      	movs	r3, #23
   2859c:	e074      	b.n	28688 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   2859e:	68fb      	ldr	r3, [r7, #12]
   285a0:	79db      	ldrb	r3, [r3, #7]
   285a2:	2201      	movs	r2, #1
   285a4:	4053      	eors	r3, r2
   285a6:	b2db      	uxtb	r3, r3
   285a8:	2b00      	cmp	r3, #0
   285aa:	d001      	beq.n	285b0 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   285ac:	231c      	movs	r3, #28
   285ae:	e06b      	b.n	28688 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   285b0:	2316      	movs	r3, #22
   285b2:	18fb      	adds	r3, r7, r3
   285b4:	2200      	movs	r2, #0
   285b6:	801a      	strh	r2, [r3, #0]

	while (length--) {
   285b8:	e05e      	b.n	28678 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   285ba:	68fb      	ldr	r3, [r7, #12]
   285bc:	795b      	ldrb	r3, [r3, #5]
   285be:	2b01      	cmp	r3, #1
   285c0:	d112      	bne.n	285e8 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   285c2:	46c0      	nop			; (mov r8, r8)
   285c4:	68fb      	ldr	r3, [r7, #12]
   285c6:	0018      	movs	r0, r3
   285c8:	4b31      	ldr	r3, [pc, #196]	; (28690 <spi_read_buffer_wait+0x124>)
   285ca:	4798      	blx	r3
   285cc:	0003      	movs	r3, r0
   285ce:	001a      	movs	r2, r3
   285d0:	2301      	movs	r3, #1
   285d2:	4053      	eors	r3, r2
   285d4:	b2db      	uxtb	r3, r3
   285d6:	2b00      	cmp	r3, #0
   285d8:	d1f4      	bne.n	285c4 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   285da:	1d3b      	adds	r3, r7, #4
   285dc:	881a      	ldrh	r2, [r3, #0]
   285de:	68fb      	ldr	r3, [r7, #12]
   285e0:	0011      	movs	r1, r2
   285e2:	0018      	movs	r0, r3
   285e4:	4b2b      	ldr	r3, [pc, #172]	; (28694 <spi_read_buffer_wait+0x128>)
   285e6:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   285e8:	46c0      	nop			; (mov r8, r8)
   285ea:	68fb      	ldr	r3, [r7, #12]
   285ec:	0018      	movs	r0, r3
   285ee:	4b2a      	ldr	r3, [pc, #168]	; (28698 <spi_read_buffer_wait+0x12c>)
   285f0:	4798      	blx	r3
   285f2:	0003      	movs	r3, r0
   285f4:	001a      	movs	r2, r3
   285f6:	2301      	movs	r3, #1
   285f8:	4053      	eors	r3, r2
   285fa:	b2db      	uxtb	r3, r3
   285fc:	2b00      	cmp	r3, #0
   285fe:	d1f4      	bne.n	285ea <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   28600:	2312      	movs	r3, #18
   28602:	18fb      	adds	r3, r7, r3
   28604:	2200      	movs	r2, #0
   28606:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   28608:	2315      	movs	r3, #21
   2860a:	18fc      	adds	r4, r7, r3
   2860c:	2312      	movs	r3, #18
   2860e:	18fa      	adds	r2, r7, r3
   28610:	68fb      	ldr	r3, [r7, #12]
   28612:	0011      	movs	r1, r2
   28614:	0018      	movs	r0, r3
   28616:	4b21      	ldr	r3, [pc, #132]	; (2869c <spi_read_buffer_wait+0x130>)
   28618:	4798      	blx	r3
   2861a:	0003      	movs	r3, r0
   2861c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   2861e:	2315      	movs	r3, #21
   28620:	18fb      	adds	r3, r7, r3
   28622:	781b      	ldrb	r3, [r3, #0]
   28624:	2b00      	cmp	r3, #0
   28626:	d003      	beq.n	28630 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   28628:	2315      	movs	r3, #21
   2862a:	18fb      	adds	r3, r7, r3
   2862c:	781b      	ldrb	r3, [r3, #0]
   2862e:	e02b      	b.n	28688 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   28630:	2316      	movs	r3, #22
   28632:	18fb      	adds	r3, r7, r3
   28634:	881b      	ldrh	r3, [r3, #0]
   28636:	2216      	movs	r2, #22
   28638:	18ba      	adds	r2, r7, r2
   2863a:	1c59      	adds	r1, r3, #1
   2863c:	8011      	strh	r1, [r2, #0]
   2863e:	001a      	movs	r2, r3
   28640:	68bb      	ldr	r3, [r7, #8]
   28642:	189b      	adds	r3, r3, r2
   28644:	2212      	movs	r2, #18
   28646:	18ba      	adds	r2, r7, r2
   28648:	8812      	ldrh	r2, [r2, #0]
   2864a:	b2d2      	uxtb	r2, r2
   2864c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2864e:	68fb      	ldr	r3, [r7, #12]
   28650:	799b      	ldrb	r3, [r3, #6]
   28652:	2b01      	cmp	r3, #1
   28654:	d110      	bne.n	28678 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   28656:	2316      	movs	r3, #22
   28658:	18fb      	adds	r3, r7, r3
   2865a:	881b      	ldrh	r3, [r3, #0]
   2865c:	2216      	movs	r2, #22
   2865e:	18ba      	adds	r2, r7, r2
   28660:	1c59      	adds	r1, r3, #1
   28662:	8011      	strh	r1, [r2, #0]
   28664:	001a      	movs	r2, r3
   28666:	68bb      	ldr	r3, [r7, #8]
   28668:	189b      	adds	r3, r3, r2
   2866a:	2212      	movs	r2, #18
   2866c:	18ba      	adds	r2, r7, r2
   2866e:	8812      	ldrh	r2, [r2, #0]
   28670:	0a12      	lsrs	r2, r2, #8
   28672:	b292      	uxth	r2, r2
   28674:	b2d2      	uxtb	r2, r2
   28676:	701a      	strb	r2, [r3, #0]
	while (length--) {
   28678:	1dbb      	adds	r3, r7, #6
   2867a:	881b      	ldrh	r3, [r3, #0]
   2867c:	1dba      	adds	r2, r7, #6
   2867e:	1e59      	subs	r1, r3, #1
   28680:	8011      	strh	r1, [r2, #0]
   28682:	2b00      	cmp	r3, #0
   28684:	d199      	bne.n	285ba <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   28686:	2300      	movs	r3, #0
}
   28688:	0018      	movs	r0, r3
   2868a:	46bd      	mov	sp, r7
   2868c:	b007      	add	sp, #28
   2868e:	bd90      	pop	{r4, r7, pc}
   28690:	00027fe5 	.word	0x00027fe5
   28694:	00028035 	.word	0x00028035
   28698:	0002800d 	.word	0x0002800d
   2869c:	0002807d 	.word	0x0002807d

000286a0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   286a0:	b580      	push	{r7, lr}
   286a2:	b086      	sub	sp, #24
   286a4:	af00      	add	r7, sp, #0
   286a6:	60f8      	str	r0, [r7, #12]
   286a8:	60b9      	str	r1, [r7, #8]
   286aa:	1dfb      	adds	r3, r7, #7
   286ac:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   286ae:	68fb      	ldr	r3, [r7, #12]
   286b0:	795b      	ldrb	r3, [r3, #5]
   286b2:	2b01      	cmp	r3, #1
   286b4:	d001      	beq.n	286ba <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   286b6:	2315      	movs	r3, #21
   286b8:	e05c      	b.n	28774 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   286ba:	68fb      	ldr	r3, [r7, #12]
   286bc:	7a1b      	ldrb	r3, [r3, #8]
   286be:	2201      	movs	r2, #1
   286c0:	4053      	eors	r3, r2
   286c2:	b2db      	uxtb	r3, r3
   286c4:	2b00      	cmp	r3, #0
   286c6:	d054      	beq.n	28772 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   286c8:	1dfb      	adds	r3, r7, #7
   286ca:	781b      	ldrb	r3, [r3, #0]
   286cc:	2b00      	cmp	r3, #0
   286ce:	d04a      	beq.n	28766 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   286d0:	68bb      	ldr	r3, [r7, #8]
   286d2:	785b      	ldrb	r3, [r3, #1]
   286d4:	2b00      	cmp	r3, #0
   286d6:	d03f      	beq.n	28758 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   286d8:	68fb      	ldr	r3, [r7, #12]
   286da:	0018      	movs	r0, r3
   286dc:	4b27      	ldr	r3, [pc, #156]	; (2877c <spi_select_slave+0xdc>)
   286de:	4798      	blx	r3
   286e0:	0003      	movs	r3, r0
   286e2:	001a      	movs	r2, r3
   286e4:	2301      	movs	r3, #1
   286e6:	4053      	eors	r3, r2
   286e8:	b2db      	uxtb	r3, r3
   286ea:	2b00      	cmp	r3, #0
   286ec:	d007      	beq.n	286fe <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   286ee:	68bb      	ldr	r3, [r7, #8]
   286f0:	781b      	ldrb	r3, [r3, #0]
   286f2:	2101      	movs	r1, #1
   286f4:	0018      	movs	r0, r3
   286f6:	4b22      	ldr	r3, [pc, #136]	; (28780 <spi_select_slave+0xe0>)
   286f8:	4798      	blx	r3
					return STATUS_BUSY;
   286fa:	2305      	movs	r3, #5
   286fc:	e03a      	b.n	28774 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   286fe:	68bb      	ldr	r3, [r7, #8]
   28700:	781b      	ldrb	r3, [r3, #0]
   28702:	2100      	movs	r1, #0
   28704:	0018      	movs	r0, r3
   28706:	4b1e      	ldr	r3, [pc, #120]	; (28780 <spi_select_slave+0xe0>)
   28708:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2870a:	68bb      	ldr	r3, [r7, #8]
   2870c:	789b      	ldrb	r3, [r3, #2]
   2870e:	b29a      	uxth	r2, r3
   28710:	68fb      	ldr	r3, [r7, #12]
   28712:	0011      	movs	r1, r2
   28714:	0018      	movs	r0, r3
   28716:	4b1b      	ldr	r3, [pc, #108]	; (28784 <spi_select_slave+0xe4>)
   28718:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2871a:	68fb      	ldr	r3, [r7, #12]
   2871c:	79db      	ldrb	r3, [r3, #7]
   2871e:	2201      	movs	r2, #1
   28720:	4053      	eors	r3, r2
   28722:	b2db      	uxtb	r3, r3
   28724:	2b00      	cmp	r3, #0
   28726:	d024      	beq.n	28772 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   28728:	46c0      	nop			; (mov r8, r8)
   2872a:	68fb      	ldr	r3, [r7, #12]
   2872c:	0018      	movs	r0, r3
   2872e:	4b16      	ldr	r3, [pc, #88]	; (28788 <spi_select_slave+0xe8>)
   28730:	4798      	blx	r3
   28732:	0003      	movs	r3, r0
   28734:	001a      	movs	r2, r3
   28736:	2301      	movs	r3, #1
   28738:	4053      	eors	r3, r2
   2873a:	b2db      	uxtb	r3, r3
   2873c:	2b00      	cmp	r3, #0
   2873e:	d1f4      	bne.n	2872a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   28740:	2316      	movs	r3, #22
   28742:	18fb      	adds	r3, r7, r3
   28744:	2200      	movs	r2, #0
   28746:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   28748:	2316      	movs	r3, #22
   2874a:	18fa      	adds	r2, r7, r3
   2874c:	68fb      	ldr	r3, [r7, #12]
   2874e:	0011      	movs	r1, r2
   28750:	0018      	movs	r0, r3
   28752:	4b0e      	ldr	r3, [pc, #56]	; (2878c <spi_select_slave+0xec>)
   28754:	4798      	blx	r3
   28756:	e00c      	b.n	28772 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28758:	68bb      	ldr	r3, [r7, #8]
   2875a:	781b      	ldrb	r3, [r3, #0]
   2875c:	2100      	movs	r1, #0
   2875e:	0018      	movs	r0, r3
   28760:	4b07      	ldr	r3, [pc, #28]	; (28780 <spi_select_slave+0xe0>)
   28762:	4798      	blx	r3
   28764:	e005      	b.n	28772 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   28766:	68bb      	ldr	r3, [r7, #8]
   28768:	781b      	ldrb	r3, [r3, #0]
   2876a:	2101      	movs	r1, #1
   2876c:	0018      	movs	r0, r3
   2876e:	4b04      	ldr	r3, [pc, #16]	; (28780 <spi_select_slave+0xe0>)
   28770:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   28772:	2300      	movs	r3, #0
}
   28774:	0018      	movs	r0, r3
   28776:	46bd      	mov	sp, r7
   28778:	b006      	add	sp, #24
   2877a:	bd80      	pop	{r7, pc}
   2877c:	00027fe5 	.word	0x00027fe5
   28780:	00027dad 	.word	0x00027dad
   28784:	00028035 	.word	0x00028035
   28788:	0002800d 	.word	0x0002800d
   2878c:	0002807d 	.word	0x0002807d

00028790 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   28790:	b580      	push	{r7, lr}
   28792:	b086      	sub	sp, #24
   28794:	af00      	add	r7, sp, #0
   28796:	60f8      	str	r0, [r7, #12]
   28798:	60b9      	str	r1, [r7, #8]
   2879a:	1dbb      	adds	r3, r7, #6
   2879c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   2879e:	68fb      	ldr	r3, [r7, #12]
   287a0:	2238      	movs	r2, #56	; 0x38
   287a2:	5c9b      	ldrb	r3, [r3, r2]
   287a4:	b2db      	uxtb	r3, r3
   287a6:	2b05      	cmp	r3, #5
   287a8:	d101      	bne.n	287ae <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   287aa:	2305      	movs	r3, #5
   287ac:	e087      	b.n	288be <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   287ae:	1dbb      	adds	r3, r7, #6
   287b0:	881b      	ldrh	r3, [r3, #0]
   287b2:	2b00      	cmp	r3, #0
   287b4:	d101      	bne.n	287ba <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   287b6:	2317      	movs	r3, #23
   287b8:	e081      	b.n	288be <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   287ba:	2316      	movs	r3, #22
   287bc:	18fb      	adds	r3, r7, r3
   287be:	2200      	movs	r2, #0
   287c0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   287c2:	2314      	movs	r3, #20
   287c4:	18fb      	adds	r3, r7, r3
   287c6:	1dba      	adds	r2, r7, #6
   287c8:	8812      	ldrh	r2, [r2, #0]
   287ca:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   287cc:	e05f      	b.n	2888e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   287ce:	46c0      	nop			; (mov r8, r8)
   287d0:	68fb      	ldr	r3, [r7, #12]
   287d2:	0018      	movs	r0, r3
   287d4:	4b3c      	ldr	r3, [pc, #240]	; (288c8 <spi_write_buffer_wait+0x138>)
   287d6:	4798      	blx	r3
   287d8:	0003      	movs	r3, r0
   287da:	001a      	movs	r2, r3
   287dc:	2301      	movs	r3, #1
   287de:	4053      	eors	r3, r2
   287e0:	b2db      	uxtb	r3, r3
   287e2:	2b00      	cmp	r3, #0
   287e4:	d1f4      	bne.n	287d0 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   287e6:	2316      	movs	r3, #22
   287e8:	18fb      	adds	r3, r7, r3
   287ea:	881b      	ldrh	r3, [r3, #0]
   287ec:	2216      	movs	r2, #22
   287ee:	18ba      	adds	r2, r7, r2
   287f0:	1c59      	adds	r1, r3, #1
   287f2:	8011      	strh	r1, [r2, #0]
   287f4:	001a      	movs	r2, r3
   287f6:	68bb      	ldr	r3, [r7, #8]
   287f8:	189b      	adds	r3, r3, r2
   287fa:	781a      	ldrb	r2, [r3, #0]
   287fc:	2312      	movs	r3, #18
   287fe:	18fb      	adds	r3, r7, r3
   28800:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28802:	68fb      	ldr	r3, [r7, #12]
   28804:	799b      	ldrb	r3, [r3, #6]
   28806:	2b01      	cmp	r3, #1
   28808:	d115      	bne.n	28836 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2880a:	2316      	movs	r3, #22
   2880c:	18fb      	adds	r3, r7, r3
   2880e:	881b      	ldrh	r3, [r3, #0]
   28810:	2216      	movs	r2, #22
   28812:	18ba      	adds	r2, r7, r2
   28814:	1c59      	adds	r1, r3, #1
   28816:	8011      	strh	r1, [r2, #0]
   28818:	001a      	movs	r2, r3
   2881a:	68bb      	ldr	r3, [r7, #8]
   2881c:	189b      	adds	r3, r3, r2
   2881e:	781b      	ldrb	r3, [r3, #0]
   28820:	021b      	lsls	r3, r3, #8
   28822:	b21a      	sxth	r2, r3
   28824:	2312      	movs	r3, #18
   28826:	18fb      	adds	r3, r7, r3
   28828:	2100      	movs	r1, #0
   2882a:	5e5b      	ldrsh	r3, [r3, r1]
   2882c:	4313      	orrs	r3, r2
   2882e:	b21a      	sxth	r2, r3
   28830:	2312      	movs	r3, #18
   28832:	18fb      	adds	r3, r7, r3
   28834:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   28836:	2312      	movs	r3, #18
   28838:	18fb      	adds	r3, r7, r3
   2883a:	881a      	ldrh	r2, [r3, #0]
   2883c:	68fb      	ldr	r3, [r7, #12]
   2883e:	0011      	movs	r1, r2
   28840:	0018      	movs	r0, r3
   28842:	4b22      	ldr	r3, [pc, #136]	; (288cc <spi_write_buffer_wait+0x13c>)
   28844:	4798      	blx	r3

		if (module->receiver_enabled) {
   28846:	68fb      	ldr	r3, [r7, #12]
   28848:	79db      	ldrb	r3, [r3, #7]
   2884a:	2214      	movs	r2, #20
   2884c:	18ba      	adds	r2, r7, r2
   2884e:	2114      	movs	r1, #20
   28850:	1879      	adds	r1, r7, r1
   28852:	8809      	ldrh	r1, [r1, #0]
   28854:	8011      	strh	r1, [r2, #0]
   28856:	2b00      	cmp	r3, #0
   28858:	d019      	beq.n	2888e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   2885a:	46c0      	nop			; (mov r8, r8)
   2885c:	68fb      	ldr	r3, [r7, #12]
   2885e:	0018      	movs	r0, r3
   28860:	4b1b      	ldr	r3, [pc, #108]	; (288d0 <spi_write_buffer_wait+0x140>)
   28862:	4798      	blx	r3
   28864:	0003      	movs	r3, r0
   28866:	001a      	movs	r2, r3
   28868:	2301      	movs	r3, #1
   2886a:	4053      	eors	r3, r2
   2886c:	b2db      	uxtb	r3, r3
   2886e:	2b00      	cmp	r3, #0
   28870:	d1f4      	bne.n	2885c <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   28872:	2310      	movs	r3, #16
   28874:	18fa      	adds	r2, r7, r3
   28876:	68fb      	ldr	r3, [r7, #12]
   28878:	0011      	movs	r1, r2
   2887a:	0018      	movs	r0, r3
   2887c:	4b15      	ldr	r3, [pc, #84]	; (288d4 <spi_write_buffer_wait+0x144>)
   2887e:	4798      	blx	r3
			flush_length--;
   28880:	2314      	movs	r3, #20
   28882:	18fb      	adds	r3, r7, r3
   28884:	881a      	ldrh	r2, [r3, #0]
   28886:	2314      	movs	r3, #20
   28888:	18fb      	adds	r3, r7, r3
   2888a:	3a01      	subs	r2, #1
   2888c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   2888e:	1dbb      	adds	r3, r7, #6
   28890:	881b      	ldrh	r3, [r3, #0]
   28892:	1dba      	adds	r2, r7, #6
   28894:	1e59      	subs	r1, r3, #1
   28896:	8011      	strh	r1, [r2, #0]
   28898:	2b00      	cmp	r3, #0
   2889a:	d198      	bne.n	287ce <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   2889c:	68fb      	ldr	r3, [r7, #12]
   2889e:	795b      	ldrb	r3, [r3, #5]
   288a0:	2b01      	cmp	r3, #1
   288a2:	d10b      	bne.n	288bc <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   288a4:	46c0      	nop			; (mov r8, r8)
   288a6:	68fb      	ldr	r3, [r7, #12]
   288a8:	0018      	movs	r0, r3
   288aa:	4b0b      	ldr	r3, [pc, #44]	; (288d8 <spi_write_buffer_wait+0x148>)
   288ac:	4798      	blx	r3
   288ae:	0003      	movs	r3, r0
   288b0:	001a      	movs	r2, r3
   288b2:	2301      	movs	r3, #1
   288b4:	4053      	eors	r3, r2
   288b6:	b2db      	uxtb	r3, r3
   288b8:	2b00      	cmp	r3, #0
   288ba:	d1f4      	bne.n	288a6 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   288bc:	2300      	movs	r3, #0
}
   288be:	0018      	movs	r0, r3
   288c0:	46bd      	mov	sp, r7
   288c2:	b006      	add	sp, #24
   288c4:	bd80      	pop	{r7, pc}
   288c6:	46c0      	nop			; (mov r8, r8)
   288c8:	00027fe5 	.word	0x00027fe5
   288cc:	00028035 	.word	0x00028035
   288d0:	0002800d 	.word	0x0002800d
   288d4:	0002807d 	.word	0x0002807d
   288d8:	00027fbd 	.word	0x00027fbd

000288dc <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   288dc:	b580      	push	{r7, lr}
   288de:	b084      	sub	sp, #16
   288e0:	af00      	add	r7, sp, #0
   288e2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   288e4:	687b      	ldr	r3, [r7, #4]
   288e6:	681b      	ldr	r3, [r3, #0]
   288e8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   288ea:	687b      	ldr	r3, [r7, #4]
   288ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   288ee:	781b      	ldrb	r3, [r3, #0]
   288f0:	b2da      	uxtb	r2, r3
   288f2:	230e      	movs	r3, #14
   288f4:	18fb      	adds	r3, r7, r3
   288f6:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   288f8:	687b      	ldr	r3, [r7, #4]
   288fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   288fc:	1c5a      	adds	r2, r3, #1
   288fe:	687b      	ldr	r3, [r7, #4]
   28900:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28902:	687b      	ldr	r3, [r7, #4]
   28904:	799b      	ldrb	r3, [r3, #6]
   28906:	2b01      	cmp	r3, #1
   28908:	d113      	bne.n	28932 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   2890a:	687b      	ldr	r3, [r7, #4]
   2890c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2890e:	781b      	ldrb	r3, [r3, #0]
   28910:	b2db      	uxtb	r3, r3
   28912:	021b      	lsls	r3, r3, #8
   28914:	b21a      	sxth	r2, r3
   28916:	230e      	movs	r3, #14
   28918:	18fb      	adds	r3, r7, r3
   2891a:	2100      	movs	r1, #0
   2891c:	5e5b      	ldrsh	r3, [r3, r1]
   2891e:	4313      	orrs	r3, r2
   28920:	b21a      	sxth	r2, r3
   28922:	230e      	movs	r3, #14
   28924:	18fb      	adds	r3, r7, r3
   28926:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   28928:	687b      	ldr	r3, [r7, #4]
   2892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2892c:	1c5a      	adds	r2, r3, #1
   2892e:	687b      	ldr	r3, [r7, #4]
   28930:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   28932:	230e      	movs	r3, #14
   28934:	18fb      	adds	r3, r7, r3
   28936:	881b      	ldrh	r3, [r3, #0]
   28938:	05db      	lsls	r3, r3, #23
   2893a:	0dda      	lsrs	r2, r3, #23
   2893c:	68bb      	ldr	r3, [r7, #8]
   2893e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   28940:	687b      	ldr	r3, [r7, #4]
   28942:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28944:	b29b      	uxth	r3, r3
   28946:	3b01      	subs	r3, #1
   28948:	b29a      	uxth	r2, r3
   2894a:	687b      	ldr	r3, [r7, #4]
   2894c:	869a      	strh	r2, [r3, #52]	; 0x34
}
   2894e:	46c0      	nop			; (mov r8, r8)
   28950:	46bd      	mov	sp, r7
   28952:	b004      	add	sp, #16
   28954:	bd80      	pop	{r7, pc}
	...

00028958 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   28958:	b580      	push	{r7, lr}
   2895a:	b084      	sub	sp, #16
   2895c:	af00      	add	r7, sp, #0
   2895e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28960:	687b      	ldr	r3, [r7, #4]
   28962:	681b      	ldr	r3, [r3, #0]
   28964:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   28966:	4b08      	ldr	r3, [pc, #32]	; (28988 <_spi_write_dummy+0x30>)
   28968:	881b      	ldrh	r3, [r3, #0]
   2896a:	001a      	movs	r2, r3
   2896c:	68fb      	ldr	r3, [r7, #12]
   2896e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28970:	687b      	ldr	r3, [r7, #4]
   28972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28974:	b29b      	uxth	r3, r3
   28976:	3b01      	subs	r3, #1
   28978:	b29a      	uxth	r2, r3
   2897a:	687b      	ldr	r3, [r7, #4]
   2897c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2897e:	46c0      	nop			; (mov r8, r8)
   28980:	46bd      	mov	sp, r7
   28982:	b004      	add	sp, #16
   28984:	bd80      	pop	{r7, pc}
   28986:	46c0      	nop			; (mov r8, r8)
   28988:	20005c20 	.word	0x20005c20

0002898c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   2898c:	b580      	push	{r7, lr}
   2898e:	b084      	sub	sp, #16
   28990:	af00      	add	r7, sp, #0
   28992:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28994:	687b      	ldr	r3, [r7, #4]
   28996:	681b      	ldr	r3, [r3, #0]
   28998:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   2899a:	230a      	movs	r3, #10
   2899c:	18fb      	adds	r3, r7, r3
   2899e:	2200      	movs	r2, #0
   289a0:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   289a2:	68fb      	ldr	r3, [r7, #12]
   289a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   289a6:	230a      	movs	r3, #10
   289a8:	18fb      	adds	r3, r7, r3
   289aa:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   289ac:	687b      	ldr	r3, [r7, #4]
   289ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   289b0:	b29b      	uxth	r3, r3
   289b2:	3b01      	subs	r3, #1
   289b4:	b29a      	uxth	r2, r3
   289b6:	687b      	ldr	r3, [r7, #4]
   289b8:	865a      	strh	r2, [r3, #50]	; 0x32
}
   289ba:	46c0      	nop			; (mov r8, r8)
   289bc:	46bd      	mov	sp, r7
   289be:	b004      	add	sp, #16
   289c0:	bd80      	pop	{r7, pc}

000289c2 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   289c2:	b580      	push	{r7, lr}
   289c4:	b084      	sub	sp, #16
   289c6:	af00      	add	r7, sp, #0
   289c8:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   289ca:	687b      	ldr	r3, [r7, #4]
   289cc:	681b      	ldr	r3, [r3, #0]
   289ce:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   289d0:	68fb      	ldr	r3, [r7, #12]
   289d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   289d4:	b29a      	uxth	r2, r3
   289d6:	230a      	movs	r3, #10
   289d8:	18fb      	adds	r3, r7, r3
   289da:	05d2      	lsls	r2, r2, #23
   289dc:	0dd2      	lsrs	r2, r2, #23
   289de:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   289e0:	687b      	ldr	r3, [r7, #4]
   289e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   289e4:	220a      	movs	r2, #10
   289e6:	18ba      	adds	r2, r7, r2
   289e8:	8812      	ldrh	r2, [r2, #0]
   289ea:	b2d2      	uxtb	r2, r2
   289ec:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   289ee:	687b      	ldr	r3, [r7, #4]
   289f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   289f2:	1c5a      	adds	r2, r3, #1
   289f4:	687b      	ldr	r3, [r7, #4]
   289f6:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   289f8:	687b      	ldr	r3, [r7, #4]
   289fa:	799b      	ldrb	r3, [r3, #6]
   289fc:	2b01      	cmp	r3, #1
   289fe:	d10d      	bne.n	28a1c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   28a00:	687b      	ldr	r3, [r7, #4]
   28a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28a04:	220a      	movs	r2, #10
   28a06:	18ba      	adds	r2, r7, r2
   28a08:	8812      	ldrh	r2, [r2, #0]
   28a0a:	0a12      	lsrs	r2, r2, #8
   28a0c:	b292      	uxth	r2, r2
   28a0e:	b2d2      	uxtb	r2, r2
   28a10:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   28a12:	687b      	ldr	r3, [r7, #4]
   28a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28a16:	1c5a      	adds	r2, r3, #1
   28a18:	687b      	ldr	r3, [r7, #4]
   28a1a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   28a1c:	687b      	ldr	r3, [r7, #4]
   28a1e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   28a20:	b29b      	uxth	r3, r3
   28a22:	3b01      	subs	r3, #1
   28a24:	b29a      	uxth	r2, r3
   28a26:	687b      	ldr	r3, [r7, #4]
   28a28:	861a      	strh	r2, [r3, #48]	; 0x30
}
   28a2a:	46c0      	nop			; (mov r8, r8)
   28a2c:	46bd      	mov	sp, r7
   28a2e:	b004      	add	sp, #16
   28a30:	bd80      	pop	{r7, pc}
	...

00028a34 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   28a34:	b580      	push	{r7, lr}
   28a36:	b086      	sub	sp, #24
   28a38:	af00      	add	r7, sp, #0
   28a3a:	0002      	movs	r2, r0
   28a3c:	1dfb      	adds	r3, r7, #7
   28a3e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   28a40:	1dfb      	adds	r3, r7, #7
   28a42:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   28a44:	4b96      	ldr	r3, [pc, #600]	; (28ca0 <_spi_interrupt_handler+0x26c>)
   28a46:	0092      	lsls	r2, r2, #2
   28a48:	58d3      	ldr	r3, [r2, r3]
   28a4a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28a4c:	697b      	ldr	r3, [r7, #20]
   28a4e:	681b      	ldr	r3, [r3, #0]
   28a50:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   28a52:	697b      	ldr	r3, [r7, #20]
   28a54:	2237      	movs	r2, #55	; 0x37
   28a56:	5c9a      	ldrb	r2, [r3, r2]
   28a58:	697b      	ldr	r3, [r7, #20]
   28a5a:	2136      	movs	r1, #54	; 0x36
   28a5c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   28a5e:	230f      	movs	r3, #15
   28a60:	18fb      	adds	r3, r7, r3
   28a62:	400a      	ands	r2, r1
   28a64:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   28a66:	693b      	ldr	r3, [r7, #16]
   28a68:	7e1b      	ldrb	r3, [r3, #24]
   28a6a:	b2da      	uxtb	r2, r3
   28a6c:	230c      	movs	r3, #12
   28a6e:	18fb      	adds	r3, r7, r3
   28a70:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   28a72:	693b      	ldr	r3, [r7, #16]
   28a74:	7d9b      	ldrb	r3, [r3, #22]
   28a76:	b2db      	uxtb	r3, r3
   28a78:	b29a      	uxth	r2, r3
   28a7a:	230c      	movs	r3, #12
   28a7c:	18fb      	adds	r3, r7, r3
   28a7e:	210c      	movs	r1, #12
   28a80:	1879      	adds	r1, r7, r1
   28a82:	8809      	ldrh	r1, [r1, #0]
   28a84:	400a      	ands	r2, r1
   28a86:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   28a88:	230c      	movs	r3, #12
   28a8a:	18fb      	adds	r3, r7, r3
   28a8c:	881b      	ldrh	r3, [r3, #0]
   28a8e:	2201      	movs	r2, #1
   28a90:	4013      	ands	r3, r2
   28a92:	d038      	beq.n	28b06 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   28a94:	697b      	ldr	r3, [r7, #20]
   28a96:	795b      	ldrb	r3, [r3, #5]
   28a98:	2b01      	cmp	r3, #1
   28a9a:	d110      	bne.n	28abe <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   28a9c:	697b      	ldr	r3, [r7, #20]
   28a9e:	7a5b      	ldrb	r3, [r3, #9]
   28aa0:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   28aa2:	2b00      	cmp	r3, #0
   28aa4:	d10b      	bne.n	28abe <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   28aa6:	697b      	ldr	r3, [r7, #20]
   28aa8:	0018      	movs	r0, r3
   28aaa:	4b7e      	ldr	r3, [pc, #504]	; (28ca4 <_spi_interrupt_handler+0x270>)
   28aac:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   28aae:	697b      	ldr	r3, [r7, #20]
   28ab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28ab2:	b29b      	uxth	r3, r3
   28ab4:	2b00      	cmp	r3, #0
   28ab6:	d102      	bne.n	28abe <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   28ab8:	693b      	ldr	r3, [r7, #16]
   28aba:	2201      	movs	r2, #1
   28abc:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   28abe:	697b      	ldr	r3, [r7, #20]
   28ac0:	795b      	ldrb	r3, [r3, #5]
		if (0
   28ac2:	2b01      	cmp	r3, #1
   28ac4:	d11f      	bne.n	28b06 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   28ac6:	697b      	ldr	r3, [r7, #20]
   28ac8:	7a5b      	ldrb	r3, [r3, #9]
   28aca:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   28acc:	2b00      	cmp	r3, #0
   28ace:	d01a      	beq.n	28b06 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   28ad0:	697b      	ldr	r3, [r7, #20]
   28ad2:	0018      	movs	r0, r3
   28ad4:	4b74      	ldr	r3, [pc, #464]	; (28ca8 <_spi_interrupt_handler+0x274>)
   28ad6:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   28ad8:	697b      	ldr	r3, [r7, #20]
   28ada:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28adc:	b29b      	uxth	r3, r3
   28ade:	2b00      	cmp	r3, #0
   28ae0:	d111      	bne.n	28b06 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   28ae2:	693b      	ldr	r3, [r7, #16]
   28ae4:	2201      	movs	r2, #1
   28ae6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   28ae8:	697b      	ldr	r3, [r7, #20]
   28aea:	7a5b      	ldrb	r3, [r3, #9]
   28aec:	b2db      	uxtb	r3, r3
   28aee:	2b01      	cmp	r3, #1
   28af0:	d109      	bne.n	28b06 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   28af2:	697b      	ldr	r3, [r7, #20]
   28af4:	79db      	ldrb	r3, [r3, #7]
   28af6:	2201      	movs	r2, #1
   28af8:	4053      	eors	r3, r2
   28afa:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   28afc:	2b00      	cmp	r3, #0
   28afe:	d002      	beq.n	28b06 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   28b00:	693b      	ldr	r3, [r7, #16]
   28b02:	2202      	movs	r2, #2
   28b04:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   28b06:	230c      	movs	r3, #12
   28b08:	18fb      	adds	r3, r7, r3
   28b0a:	881b      	ldrh	r3, [r3, #0]
   28b0c:	2204      	movs	r2, #4
   28b0e:	4013      	ands	r3, r2
   28b10:	d100      	bne.n	28b14 <_spi_interrupt_handler+0xe0>
   28b12:	e07e      	b.n	28c12 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   28b14:	693b      	ldr	r3, [r7, #16]
   28b16:	8b5b      	ldrh	r3, [r3, #26]
   28b18:	b29b      	uxth	r3, r3
   28b1a:	001a      	movs	r2, r3
   28b1c:	2304      	movs	r3, #4
   28b1e:	4013      	ands	r3, r2
   28b20:	d022      	beq.n	28b68 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   28b22:	697b      	ldr	r3, [r7, #20]
   28b24:	7a5b      	ldrb	r3, [r3, #9]
   28b26:	b2db      	uxtb	r3, r3
   28b28:	2b01      	cmp	r3, #1
   28b2a:	d014      	beq.n	28b56 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   28b2c:	697b      	ldr	r3, [r7, #20]
   28b2e:	2238      	movs	r2, #56	; 0x38
   28b30:	211e      	movs	r1, #30
   28b32:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   28b34:	697b      	ldr	r3, [r7, #20]
   28b36:	2203      	movs	r2, #3
   28b38:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   28b3a:	693b      	ldr	r3, [r7, #16]
   28b3c:	2205      	movs	r2, #5
   28b3e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   28b40:	230f      	movs	r3, #15
   28b42:	18fb      	adds	r3, r7, r3
   28b44:	781b      	ldrb	r3, [r3, #0]
   28b46:	2208      	movs	r2, #8
   28b48:	4013      	ands	r3, r2
   28b4a:	d004      	beq.n	28b56 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   28b4c:	697b      	ldr	r3, [r7, #20]
   28b4e:	699b      	ldr	r3, [r3, #24]
   28b50:	697a      	ldr	r2, [r7, #20]
   28b52:	0010      	movs	r0, r2
   28b54:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   28b56:	693b      	ldr	r3, [r7, #16]
   28b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   28b5a:	230a      	movs	r3, #10
   28b5c:	18fb      	adds	r3, r7, r3
   28b5e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   28b60:	693b      	ldr	r3, [r7, #16]
   28b62:	2204      	movs	r2, #4
   28b64:	835a      	strh	r2, [r3, #26]
   28b66:	e054      	b.n	28c12 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   28b68:	697b      	ldr	r3, [r7, #20]
   28b6a:	7a5b      	ldrb	r3, [r3, #9]
   28b6c:	b2db      	uxtb	r3, r3
   28b6e:	2b01      	cmp	r3, #1
   28b70:	d11e      	bne.n	28bb0 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   28b72:	697b      	ldr	r3, [r7, #20]
   28b74:	0018      	movs	r0, r3
   28b76:	4b4d      	ldr	r3, [pc, #308]	; (28cac <_spi_interrupt_handler+0x278>)
   28b78:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   28b7a:	697b      	ldr	r3, [r7, #20]
   28b7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28b7e:	b29b      	uxth	r3, r3
   28b80:	2b00      	cmp	r3, #0
   28b82:	d146      	bne.n	28c12 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28b84:	693b      	ldr	r3, [r7, #16]
   28b86:	2204      	movs	r2, #4
   28b88:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   28b8a:	697b      	ldr	r3, [r7, #20]
   28b8c:	2238      	movs	r2, #56	; 0x38
   28b8e:	2100      	movs	r1, #0
   28b90:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   28b92:	697b      	ldr	r3, [r7, #20]
   28b94:	2203      	movs	r2, #3
   28b96:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   28b98:	230f      	movs	r3, #15
   28b9a:	18fb      	adds	r3, r7, r3
   28b9c:	781b      	ldrb	r3, [r3, #0]
   28b9e:	2201      	movs	r2, #1
   28ba0:	4013      	ands	r3, r2
   28ba2:	d036      	beq.n	28c12 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   28ba4:	697b      	ldr	r3, [r7, #20]
   28ba6:	68db      	ldr	r3, [r3, #12]
   28ba8:	697a      	ldr	r2, [r7, #20]
   28baa:	0010      	movs	r0, r2
   28bac:	4798      	blx	r3
   28bae:	e030      	b.n	28c12 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   28bb0:	697b      	ldr	r3, [r7, #20]
   28bb2:	0018      	movs	r0, r3
   28bb4:	4b3e      	ldr	r3, [pc, #248]	; (28cb0 <_spi_interrupt_handler+0x27c>)
   28bb6:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   28bb8:	697b      	ldr	r3, [r7, #20]
   28bba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   28bbc:	b29b      	uxth	r3, r3
   28bbe:	2b00      	cmp	r3, #0
   28bc0:	d127      	bne.n	28c12 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   28bc2:	697b      	ldr	r3, [r7, #20]
   28bc4:	2238      	movs	r2, #56	; 0x38
   28bc6:	2100      	movs	r1, #0
   28bc8:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28bca:	693b      	ldr	r3, [r7, #16]
   28bcc:	2204      	movs	r2, #4
   28bce:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   28bd0:	697b      	ldr	r3, [r7, #20]
   28bd2:	7a5b      	ldrb	r3, [r3, #9]
   28bd4:	b2db      	uxtb	r3, r3
   28bd6:	2b02      	cmp	r3, #2
   28bd8:	d10b      	bne.n	28bf2 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   28bda:	230f      	movs	r3, #15
   28bdc:	18fb      	adds	r3, r7, r3
   28bde:	781b      	ldrb	r3, [r3, #0]
   28be0:	2204      	movs	r2, #4
   28be2:	4013      	ands	r3, r2
   28be4:	d015      	beq.n	28c12 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   28be6:	697b      	ldr	r3, [r7, #20]
   28be8:	695b      	ldr	r3, [r3, #20]
   28bea:	697a      	ldr	r2, [r7, #20]
   28bec:	0010      	movs	r0, r2
   28bee:	4798      	blx	r3
   28bf0:	e00f      	b.n	28c12 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   28bf2:	697b      	ldr	r3, [r7, #20]
   28bf4:	7a5b      	ldrb	r3, [r3, #9]
   28bf6:	b2db      	uxtb	r3, r3
   28bf8:	2b00      	cmp	r3, #0
   28bfa:	d10a      	bne.n	28c12 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   28bfc:	230f      	movs	r3, #15
   28bfe:	18fb      	adds	r3, r7, r3
   28c00:	781b      	ldrb	r3, [r3, #0]
   28c02:	2202      	movs	r2, #2
   28c04:	4013      	ands	r3, r2
   28c06:	d004      	beq.n	28c12 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   28c08:	697b      	ldr	r3, [r7, #20]
   28c0a:	691b      	ldr	r3, [r3, #16]
   28c0c:	697a      	ldr	r2, [r7, #20]
   28c0e:	0010      	movs	r0, r2
   28c10:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   28c12:	230c      	movs	r3, #12
   28c14:	18fb      	adds	r3, r7, r3
   28c16:	881b      	ldrh	r3, [r3, #0]
   28c18:	2202      	movs	r2, #2
   28c1a:	4013      	ands	r3, r2
   28c1c:	d024      	beq.n	28c68 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   28c1e:	697b      	ldr	r3, [r7, #20]
   28c20:	795b      	ldrb	r3, [r3, #5]
   28c22:	2b01      	cmp	r3, #1
   28c24:	d120      	bne.n	28c68 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   28c26:	697b      	ldr	r3, [r7, #20]
   28c28:	7a5b      	ldrb	r3, [r3, #9]
   28c2a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   28c2c:	2b01      	cmp	r3, #1
   28c2e:	d11b      	bne.n	28c68 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   28c30:	697b      	ldr	r3, [r7, #20]
   28c32:	79db      	ldrb	r3, [r3, #7]
   28c34:	2201      	movs	r2, #1
   28c36:	4053      	eors	r3, r2
   28c38:	b2db      	uxtb	r3, r3
   28c3a:	2b00      	cmp	r3, #0
   28c3c:	d014      	beq.n	28c68 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   28c3e:	693b      	ldr	r3, [r7, #16]
   28c40:	2202      	movs	r2, #2
   28c42:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   28c44:	697b      	ldr	r3, [r7, #20]
   28c46:	2203      	movs	r2, #3
   28c48:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   28c4a:	697b      	ldr	r3, [r7, #20]
   28c4c:	2238      	movs	r2, #56	; 0x38
   28c4e:	2100      	movs	r1, #0
   28c50:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   28c52:	230f      	movs	r3, #15
   28c54:	18fb      	adds	r3, r7, r3
   28c56:	781b      	ldrb	r3, [r3, #0]
   28c58:	2201      	movs	r2, #1
   28c5a:	4013      	ands	r3, r2
   28c5c:	d004      	beq.n	28c68 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   28c5e:	697b      	ldr	r3, [r7, #20]
   28c60:	68db      	ldr	r3, [r3, #12]
   28c62:	697a      	ldr	r2, [r7, #20]
   28c64:	0010      	movs	r0, r2
   28c66:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   28c68:	230c      	movs	r3, #12
   28c6a:	18fb      	adds	r3, r7, r3
   28c6c:	881b      	ldrh	r3, [r3, #0]
   28c6e:	2280      	movs	r2, #128	; 0x80
   28c70:	4013      	ands	r3, r2
   28c72:	d010      	beq.n	28c96 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   28c74:	693b      	ldr	r3, [r7, #16]
   28c76:	2280      	movs	r2, #128	; 0x80
   28c78:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   28c7a:	693b      	ldr	r3, [r7, #16]
   28c7c:	2280      	movs	r2, #128	; 0x80
   28c7e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   28c80:	230f      	movs	r3, #15
   28c82:	18fb      	adds	r3, r7, r3
   28c84:	781b      	ldrb	r3, [r3, #0]
   28c86:	2240      	movs	r2, #64	; 0x40
   28c88:	4013      	ands	r3, r2
   28c8a:	d004      	beq.n	28c96 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   28c8c:	697b      	ldr	r3, [r7, #20]
   28c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28c90:	697a      	ldr	r2, [r7, #20]
   28c92:	0010      	movs	r0, r2
   28c94:	4798      	blx	r3
		}
	}
#  endif
}
   28c96:	46c0      	nop			; (mov r8, r8)
   28c98:	46bd      	mov	sp, r7
   28c9a:	b006      	add	sp, #24
   28c9c:	bd80      	pop	{r7, pc}
   28c9e:	46c0      	nop			; (mov r8, r8)
   28ca0:	20005c08 	.word	0x20005c08
   28ca4:	00028959 	.word	0x00028959
   28ca8:	000288dd 	.word	0x000288dd
   28cac:	0002898d 	.word	0x0002898d
   28cb0:	000289c3 	.word	0x000289c3

00028cb4 <system_gclk_chan_get_config_defaults>:
{
   28cb4:	b580      	push	{r7, lr}
   28cb6:	b082      	sub	sp, #8
   28cb8:	af00      	add	r7, sp, #0
   28cba:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28cbc:	687b      	ldr	r3, [r7, #4]
   28cbe:	2200      	movs	r2, #0
   28cc0:	701a      	strb	r2, [r3, #0]
}
   28cc2:	46c0      	nop			; (mov r8, r8)
   28cc4:	46bd      	mov	sp, r7
   28cc6:	b002      	add	sp, #8
   28cc8:	bd80      	pop	{r7, pc}
	...

00028ccc <system_apb_clock_set_mask>:
{
   28ccc:	b580      	push	{r7, lr}
   28cce:	b082      	sub	sp, #8
   28cd0:	af00      	add	r7, sp, #0
   28cd2:	0002      	movs	r2, r0
   28cd4:	6039      	str	r1, [r7, #0]
   28cd6:	1dfb      	adds	r3, r7, #7
   28cd8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28cda:	1dfb      	adds	r3, r7, #7
   28cdc:	781b      	ldrb	r3, [r3, #0]
   28cde:	2b01      	cmp	r3, #1
   28ce0:	d00a      	beq.n	28cf8 <system_apb_clock_set_mask+0x2c>
   28ce2:	2b02      	cmp	r3, #2
   28ce4:	d00f      	beq.n	28d06 <system_apb_clock_set_mask+0x3a>
   28ce6:	2b00      	cmp	r3, #0
   28ce8:	d114      	bne.n	28d14 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28cea:	4b0e      	ldr	r3, [pc, #56]	; (28d24 <system_apb_clock_set_mask+0x58>)
   28cec:	4a0d      	ldr	r2, [pc, #52]	; (28d24 <system_apb_clock_set_mask+0x58>)
   28cee:	6991      	ldr	r1, [r2, #24]
   28cf0:	683a      	ldr	r2, [r7, #0]
   28cf2:	430a      	orrs	r2, r1
   28cf4:	619a      	str	r2, [r3, #24]
			break;
   28cf6:	e00f      	b.n	28d18 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28cf8:	4b0a      	ldr	r3, [pc, #40]	; (28d24 <system_apb_clock_set_mask+0x58>)
   28cfa:	4a0a      	ldr	r2, [pc, #40]	; (28d24 <system_apb_clock_set_mask+0x58>)
   28cfc:	69d1      	ldr	r1, [r2, #28]
   28cfe:	683a      	ldr	r2, [r7, #0]
   28d00:	430a      	orrs	r2, r1
   28d02:	61da      	str	r2, [r3, #28]
			break;
   28d04:	e008      	b.n	28d18 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28d06:	4b07      	ldr	r3, [pc, #28]	; (28d24 <system_apb_clock_set_mask+0x58>)
   28d08:	4a06      	ldr	r2, [pc, #24]	; (28d24 <system_apb_clock_set_mask+0x58>)
   28d0a:	6a11      	ldr	r1, [r2, #32]
   28d0c:	683a      	ldr	r2, [r7, #0]
   28d0e:	430a      	orrs	r2, r1
   28d10:	621a      	str	r2, [r3, #32]
			break;
   28d12:	e001      	b.n	28d18 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28d14:	2317      	movs	r3, #23
   28d16:	e000      	b.n	28d1a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28d18:	2300      	movs	r3, #0
}
   28d1a:	0018      	movs	r0, r3
   28d1c:	46bd      	mov	sp, r7
   28d1e:	b002      	add	sp, #8
   28d20:	bd80      	pop	{r7, pc}
   28d22:	46c0      	nop			; (mov r8, r8)
   28d24:	40000400 	.word	0x40000400

00028d28 <system_pinmux_get_config_defaults>:
{
   28d28:	b580      	push	{r7, lr}
   28d2a:	b082      	sub	sp, #8
   28d2c:	af00      	add	r7, sp, #0
   28d2e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28d30:	687b      	ldr	r3, [r7, #4]
   28d32:	2280      	movs	r2, #128	; 0x80
   28d34:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28d36:	687b      	ldr	r3, [r7, #4]
   28d38:	2200      	movs	r2, #0
   28d3a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28d3c:	687b      	ldr	r3, [r7, #4]
   28d3e:	2201      	movs	r2, #1
   28d40:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   28d42:	687b      	ldr	r3, [r7, #4]
   28d44:	2200      	movs	r2, #0
   28d46:	70da      	strb	r2, [r3, #3]
}
   28d48:	46c0      	nop			; (mov r8, r8)
   28d4a:	46bd      	mov	sp, r7
   28d4c:	b002      	add	sp, #8
   28d4e:	bd80      	pop	{r7, pc}

00028d50 <system_is_debugger_present>:
{
   28d50:	b580      	push	{r7, lr}
   28d52:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   28d54:	4b05      	ldr	r3, [pc, #20]	; (28d6c <system_is_debugger_present+0x1c>)
   28d56:	789b      	ldrb	r3, [r3, #2]
   28d58:	b2db      	uxtb	r3, r3
   28d5a:	001a      	movs	r2, r3
   28d5c:	2302      	movs	r3, #2
   28d5e:	4013      	ands	r3, r2
   28d60:	1e5a      	subs	r2, r3, #1
   28d62:	4193      	sbcs	r3, r2
   28d64:	b2db      	uxtb	r3, r3
}
   28d66:	0018      	movs	r0, r3
   28d68:	46bd      	mov	sp, r7
   28d6a:	bd80      	pop	{r7, pc}
   28d6c:	41002000 	.word	0x41002000

00028d70 <usart_is_syncing>:
{
   28d70:	b580      	push	{r7, lr}
   28d72:	b084      	sub	sp, #16
   28d74:	af00      	add	r7, sp, #0
   28d76:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   28d78:	687b      	ldr	r3, [r7, #4]
   28d7a:	681b      	ldr	r3, [r3, #0]
   28d7c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   28d7e:	68fb      	ldr	r3, [r7, #12]
   28d80:	69db      	ldr	r3, [r3, #28]
   28d82:	1e5a      	subs	r2, r3, #1
   28d84:	4193      	sbcs	r3, r2
   28d86:	b2db      	uxtb	r3, r3
}
   28d88:	0018      	movs	r0, r3
   28d8a:	46bd      	mov	sp, r7
   28d8c:	b004      	add	sp, #16
   28d8e:	bd80      	pop	{r7, pc}

00028d90 <_usart_wait_for_sync>:
{
   28d90:	b580      	push	{r7, lr}
   28d92:	b082      	sub	sp, #8
   28d94:	af00      	add	r7, sp, #0
   28d96:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   28d98:	46c0      	nop			; (mov r8, r8)
   28d9a:	687b      	ldr	r3, [r7, #4]
   28d9c:	0018      	movs	r0, r3
   28d9e:	4b04      	ldr	r3, [pc, #16]	; (28db0 <_usart_wait_for_sync+0x20>)
   28da0:	4798      	blx	r3
   28da2:	1e03      	subs	r3, r0, #0
   28da4:	d1f9      	bne.n	28d9a <_usart_wait_for_sync+0xa>
}
   28da6:	46c0      	nop			; (mov r8, r8)
   28da8:	46bd      	mov	sp, r7
   28daa:	b002      	add	sp, #8
   28dac:	bd80      	pop	{r7, pc}
   28dae:	46c0      	nop			; (mov r8, r8)
   28db0:	00028d71 	.word	0x00028d71

00028db4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   28db4:	b5b0      	push	{r4, r5, r7, lr}
   28db6:	b08c      	sub	sp, #48	; 0x30
   28db8:	af02      	add	r7, sp, #8
   28dba:	6078      	str	r0, [r7, #4]
   28dbc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28dbe:	687b      	ldr	r3, [r7, #4]
   28dc0:	681b      	ldr	r3, [r3, #0]
   28dc2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28dc4:	687b      	ldr	r3, [r7, #4]
   28dc6:	681b      	ldr	r3, [r3, #0]
   28dc8:	0018      	movs	r0, r3
   28dca:	4bab      	ldr	r3, [pc, #684]	; (29078 <_usart_set_config+0x2c4>)
   28dcc:	4798      	blx	r3
   28dce:	0003      	movs	r3, r0
   28dd0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28dd2:	697b      	ldr	r3, [r7, #20]
   28dd4:	3314      	adds	r3, #20
   28dd6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   28dd8:	2300      	movs	r3, #0
   28dda:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   28ddc:	2300      	movs	r3, #0
   28dde:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   28de0:	230a      	movs	r3, #10
   28de2:	18fb      	adds	r3, r7, r3
   28de4:	2200      	movs	r2, #0
   28de6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28de8:	231f      	movs	r3, #31
   28dea:	18fb      	adds	r3, r7, r3
   28dec:	2200      	movs	r2, #0
   28dee:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28df0:	231e      	movs	r3, #30
   28df2:	18fb      	adds	r3, r7, r3
   28df4:	2210      	movs	r2, #16
   28df6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   28df8:	683b      	ldr	r3, [r7, #0]
   28dfa:	8a1b      	ldrh	r3, [r3, #16]
   28dfc:	2280      	movs	r2, #128	; 0x80
   28dfe:	01d2      	lsls	r2, r2, #7
   28e00:	4293      	cmp	r3, r2
   28e02:	d01c      	beq.n	28e3e <_usart_set_config+0x8a>
   28e04:	2280      	movs	r2, #128	; 0x80
   28e06:	01d2      	lsls	r2, r2, #7
   28e08:	4293      	cmp	r3, r2
   28e0a:	dc06      	bgt.n	28e1a <_usart_set_config+0x66>
   28e0c:	2b00      	cmp	r3, #0
   28e0e:	d00d      	beq.n	28e2c <_usart_set_config+0x78>
   28e10:	2280      	movs	r2, #128	; 0x80
   28e12:	0192      	lsls	r2, r2, #6
   28e14:	4293      	cmp	r3, r2
   28e16:	d024      	beq.n	28e62 <_usart_set_config+0xae>
   28e18:	e035      	b.n	28e86 <_usart_set_config+0xd2>
   28e1a:	22c0      	movs	r2, #192	; 0xc0
   28e1c:	01d2      	lsls	r2, r2, #7
   28e1e:	4293      	cmp	r3, r2
   28e20:	d028      	beq.n	28e74 <_usart_set_config+0xc0>
   28e22:	2280      	movs	r2, #128	; 0x80
   28e24:	0212      	lsls	r2, r2, #8
   28e26:	4293      	cmp	r3, r2
   28e28:	d012      	beq.n	28e50 <_usart_set_config+0x9c>
   28e2a:	e02c      	b.n	28e86 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28e2c:	231f      	movs	r3, #31
   28e2e:	18fb      	adds	r3, r7, r3
   28e30:	2200      	movs	r2, #0
   28e32:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28e34:	231e      	movs	r3, #30
   28e36:	18fb      	adds	r3, r7, r3
   28e38:	2210      	movs	r2, #16
   28e3a:	701a      	strb	r2, [r3, #0]
			break;
   28e3c:	e023      	b.n	28e86 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28e3e:	231f      	movs	r3, #31
   28e40:	18fb      	adds	r3, r7, r3
   28e42:	2200      	movs	r2, #0
   28e44:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28e46:	231e      	movs	r3, #30
   28e48:	18fb      	adds	r3, r7, r3
   28e4a:	2208      	movs	r2, #8
   28e4c:	701a      	strb	r2, [r3, #0]
			break;
   28e4e:	e01a      	b.n	28e86 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28e50:	231f      	movs	r3, #31
   28e52:	18fb      	adds	r3, r7, r3
   28e54:	2200      	movs	r2, #0
   28e56:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   28e58:	231e      	movs	r3, #30
   28e5a:	18fb      	adds	r3, r7, r3
   28e5c:	2203      	movs	r2, #3
   28e5e:	701a      	strb	r2, [r3, #0]
			break;
   28e60:	e011      	b.n	28e86 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   28e62:	231f      	movs	r3, #31
   28e64:	18fb      	adds	r3, r7, r3
   28e66:	2201      	movs	r2, #1
   28e68:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28e6a:	231e      	movs	r3, #30
   28e6c:	18fb      	adds	r3, r7, r3
   28e6e:	2210      	movs	r2, #16
   28e70:	701a      	strb	r2, [r3, #0]
			break;
   28e72:	e008      	b.n	28e86 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   28e74:	231f      	movs	r3, #31
   28e76:	18fb      	adds	r3, r7, r3
   28e78:	2201      	movs	r2, #1
   28e7a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28e7c:	231e      	movs	r3, #30
   28e7e:	18fb      	adds	r3, r7, r3
   28e80:	2208      	movs	r2, #8
   28e82:	701a      	strb	r2, [r3, #0]
			break;
   28e84:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   28e86:	683b      	ldr	r3, [r7, #0]
   28e88:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   28e8a:	683b      	ldr	r3, [r7, #0]
   28e8c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   28e8e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   28e90:	683b      	ldr	r3, [r7, #0]
   28e92:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   28e94:	4313      	orrs	r3, r2
		config->sample_rate |
   28e96:	683a      	ldr	r2, [r7, #0]
   28e98:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   28e9a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   28e9c:	683a      	ldr	r2, [r7, #0]
   28e9e:	7e12      	ldrb	r2, [r2, #24]
   28ea0:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   28ea2:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   28ea4:	683a      	ldr	r2, [r7, #0]
   28ea6:	2126      	movs	r1, #38	; 0x26
   28ea8:	5c52      	ldrb	r2, [r2, r1]
   28eaa:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   28eac:	4313      	orrs	r3, r2
   28eae:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   28eb0:	231d      	movs	r3, #29
   28eb2:	18fb      	adds	r3, r7, r3
   28eb4:	2200      	movs	r2, #0
   28eb6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   28eb8:	683b      	ldr	r3, [r7, #0]
   28eba:	685b      	ldr	r3, [r3, #4]
   28ebc:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   28ebe:	68fb      	ldr	r3, [r7, #12]
   28ec0:	2b00      	cmp	r3, #0
   28ec2:	d01e      	beq.n	28f02 <_usart_set_config+0x14e>
   28ec4:	2280      	movs	r2, #128	; 0x80
   28ec6:	0552      	lsls	r2, r2, #21
   28ec8:	4293      	cmp	r3, r2
   28eca:	d14f      	bne.n	28f6c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   28ecc:	683b      	ldr	r3, [r7, #0]
   28ece:	2227      	movs	r2, #39	; 0x27
   28ed0:	5c9b      	ldrb	r3, [r3, r2]
   28ed2:	2201      	movs	r2, #1
   28ed4:	4053      	eors	r3, r2
   28ed6:	b2db      	uxtb	r3, r3
   28ed8:	2b00      	cmp	r3, #0
   28eda:	d046      	beq.n	28f6a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   28edc:	683b      	ldr	r3, [r7, #0]
   28ede:	6a1d      	ldr	r5, [r3, #32]
   28ee0:	693b      	ldr	r3, [r7, #16]
   28ee2:	b2db      	uxtb	r3, r3
   28ee4:	0018      	movs	r0, r3
   28ee6:	4b65      	ldr	r3, [pc, #404]	; (2907c <_usart_set_config+0x2c8>)
   28ee8:	4798      	blx	r3
   28eea:	0001      	movs	r1, r0
   28eec:	231d      	movs	r3, #29
   28eee:	18fc      	adds	r4, r7, r3
   28ef0:	230a      	movs	r3, #10
   28ef2:	18fb      	adds	r3, r7, r3
   28ef4:	001a      	movs	r2, r3
   28ef6:	0028      	movs	r0, r5
   28ef8:	4b61      	ldr	r3, [pc, #388]	; (29080 <_usart_set_config+0x2cc>)
   28efa:	4798      	blx	r3
   28efc:	0003      	movs	r3, r0
   28efe:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   28f00:	e033      	b.n	28f6a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   28f02:	683b      	ldr	r3, [r7, #0]
   28f04:	2227      	movs	r2, #39	; 0x27
   28f06:	5c9b      	ldrb	r3, [r3, r2]
   28f08:	2b00      	cmp	r3, #0
   28f0a:	d014      	beq.n	28f36 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   28f0c:	683b      	ldr	r3, [r7, #0]
   28f0e:	6a18      	ldr	r0, [r3, #32]
   28f10:	683b      	ldr	r3, [r7, #0]
   28f12:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   28f14:	231d      	movs	r3, #29
   28f16:	18fc      	adds	r4, r7, r3
   28f18:	231f      	movs	r3, #31
   28f1a:	18fb      	adds	r3, r7, r3
   28f1c:	781d      	ldrb	r5, [r3, #0]
   28f1e:	230a      	movs	r3, #10
   28f20:	18fa      	adds	r2, r7, r3
   28f22:	231e      	movs	r3, #30
   28f24:	18fb      	adds	r3, r7, r3
   28f26:	781b      	ldrb	r3, [r3, #0]
   28f28:	9300      	str	r3, [sp, #0]
   28f2a:	002b      	movs	r3, r5
   28f2c:	4d55      	ldr	r5, [pc, #340]	; (29084 <_usart_set_config+0x2d0>)
   28f2e:	47a8      	blx	r5
   28f30:	0003      	movs	r3, r0
   28f32:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   28f34:	e01a      	b.n	28f6c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   28f36:	683b      	ldr	r3, [r7, #0]
   28f38:	6a1d      	ldr	r5, [r3, #32]
   28f3a:	693b      	ldr	r3, [r7, #16]
   28f3c:	b2db      	uxtb	r3, r3
   28f3e:	0018      	movs	r0, r3
   28f40:	4b4e      	ldr	r3, [pc, #312]	; (2907c <_usart_set_config+0x2c8>)
   28f42:	4798      	blx	r3
				status_code =
   28f44:	231d      	movs	r3, #29
   28f46:	18fc      	adds	r4, r7, r3
   28f48:	231f      	movs	r3, #31
   28f4a:	18fb      	adds	r3, r7, r3
   28f4c:	7819      	ldrb	r1, [r3, #0]
   28f4e:	230a      	movs	r3, #10
   28f50:	18fa      	adds	r2, r7, r3
   28f52:	231e      	movs	r3, #30
   28f54:	18fb      	adds	r3, r7, r3
   28f56:	781b      	ldrb	r3, [r3, #0]
   28f58:	9300      	str	r3, [sp, #0]
   28f5a:	000b      	movs	r3, r1
   28f5c:	0001      	movs	r1, r0
   28f5e:	0028      	movs	r0, r5
   28f60:	4d48      	ldr	r5, [pc, #288]	; (29084 <_usart_set_config+0x2d0>)
   28f62:	47a8      	blx	r5
   28f64:	0003      	movs	r3, r0
   28f66:	7023      	strb	r3, [r4, #0]
			break;
   28f68:	e000      	b.n	28f6c <_usart_set_config+0x1b8>
			break;
   28f6a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   28f6c:	231d      	movs	r3, #29
   28f6e:	18fb      	adds	r3, r7, r3
   28f70:	781b      	ldrb	r3, [r3, #0]
   28f72:	2b00      	cmp	r3, #0
   28f74:	d003      	beq.n	28f7e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   28f76:	231d      	movs	r3, #29
   28f78:	18fb      	adds	r3, r7, r3
   28f7a:	781b      	ldrb	r3, [r3, #0]
   28f7c:	e077      	b.n	2906e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   28f7e:	683b      	ldr	r3, [r7, #0]
   28f80:	7e5b      	ldrb	r3, [r3, #25]
   28f82:	2b00      	cmp	r3, #0
   28f84:	d003      	beq.n	28f8e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   28f86:	683b      	ldr	r3, [r7, #0]
   28f88:	7e9a      	ldrb	r2, [r3, #26]
   28f8a:	69bb      	ldr	r3, [r7, #24]
   28f8c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   28f8e:	687b      	ldr	r3, [r7, #4]
   28f90:	0018      	movs	r0, r3
   28f92:	4b3d      	ldr	r3, [pc, #244]	; (29088 <_usart_set_config+0x2d4>)
   28f94:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   28f96:	230a      	movs	r3, #10
   28f98:	18fb      	adds	r3, r7, r3
   28f9a:	881a      	ldrh	r2, [r3, #0]
   28f9c:	69bb      	ldr	r3, [r7, #24]
   28f9e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   28fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28fa2:	68fb      	ldr	r3, [r7, #12]
   28fa4:	4313      	orrs	r3, r2
   28fa6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   28fa8:	683b      	ldr	r3, [r7, #0]
   28faa:	2227      	movs	r2, #39	; 0x27
   28fac:	5c9b      	ldrb	r3, [r3, r2]
   28fae:	2201      	movs	r2, #1
   28fb0:	4053      	eors	r3, r2
   28fb2:	b2db      	uxtb	r3, r3
   28fb4:	2b00      	cmp	r3, #0
   28fb6:	d003      	beq.n	28fc0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   28fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28fba:	2204      	movs	r2, #4
   28fbc:	4313      	orrs	r3, r2
   28fbe:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28fc0:	683b      	ldr	r3, [r7, #0]
   28fc2:	7e5b      	ldrb	r3, [r3, #25]
   28fc4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28fc6:	683b      	ldr	r3, [r7, #0]
   28fc8:	7f1b      	ldrb	r3, [r3, #28]
   28fca:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28fcc:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   28fce:	683b      	ldr	r3, [r7, #0]
   28fd0:	7f5b      	ldrb	r3, [r3, #29]
   28fd2:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28fd4:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28fd6:	683b      	ldr	r3, [r7, #0]
   28fd8:	2124      	movs	r1, #36	; 0x24
   28fda:	5c5b      	ldrb	r3, [r3, r1]
   28fdc:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   28fde:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   28fe0:	683b      	ldr	r3, [r7, #0]
   28fe2:	2125      	movs	r1, #37	; 0x25
   28fe4:	5c5b      	ldrb	r3, [r3, r1]
   28fe6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28fe8:	4313      	orrs	r3, r2
	ctrlb =  
   28fea:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   28fec:	683b      	ldr	r3, [r7, #0]
   28fee:	7a9b      	ldrb	r3, [r3, #10]
   28ff0:	001a      	movs	r2, r3
   28ff2:	6a3b      	ldr	r3, [r7, #32]
   28ff4:	4313      	orrs	r3, r2
   28ff6:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   28ff8:	683b      	ldr	r3, [r7, #0]
   28ffa:	7adb      	ldrb	r3, [r3, #11]
   28ffc:	001a      	movs	r2, r3
   28ffe:	6a3b      	ldr	r3, [r7, #32]
   29000:	4313      	orrs	r3, r2
   29002:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   29004:	683b      	ldr	r3, [r7, #0]
   29006:	891b      	ldrh	r3, [r3, #8]
   29008:	2bff      	cmp	r3, #255	; 0xff
   2900a:	d00b      	beq.n	29024 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   2900c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2900e:	2280      	movs	r2, #128	; 0x80
   29010:	0452      	lsls	r2, r2, #17
   29012:	4313      	orrs	r3, r2
   29014:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   29016:	683b      	ldr	r3, [r7, #0]
   29018:	891b      	ldrh	r3, [r3, #8]
   2901a:	001a      	movs	r2, r3
   2901c:	6a3b      	ldr	r3, [r7, #32]
   2901e:	4313      	orrs	r3, r2
   29020:	623b      	str	r3, [r7, #32]
   29022:	e008      	b.n	29036 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   29024:	683b      	ldr	r3, [r7, #0]
   29026:	7edb      	ldrb	r3, [r3, #27]
   29028:	2b00      	cmp	r3, #0
   2902a:	d004      	beq.n	29036 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   2902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2902e:	2280      	movs	r2, #128	; 0x80
   29030:	04d2      	lsls	r2, r2, #19
   29032:	4313      	orrs	r3, r2
   29034:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   29036:	683b      	ldr	r3, [r7, #0]
   29038:	222c      	movs	r2, #44	; 0x2c
   2903a:	5c9b      	ldrb	r3, [r3, r2]
   2903c:	2b00      	cmp	r3, #0
   2903e:	d103      	bne.n	29048 <_usart_set_config+0x294>
   29040:	4b12      	ldr	r3, [pc, #72]	; (2908c <_usart_set_config+0x2d8>)
   29042:	4798      	blx	r3
   29044:	1e03      	subs	r3, r0, #0
   29046:	d003      	beq.n	29050 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   29048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2904a:	2280      	movs	r2, #128	; 0x80
   2904c:	4313      	orrs	r3, r2
   2904e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   29050:	687b      	ldr	r3, [r7, #4]
   29052:	0018      	movs	r0, r3
   29054:	4b0c      	ldr	r3, [pc, #48]	; (29088 <_usart_set_config+0x2d4>)
   29056:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   29058:	69bb      	ldr	r3, [r7, #24]
   2905a:	6a3a      	ldr	r2, [r7, #32]
   2905c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2905e:	687b      	ldr	r3, [r7, #4]
   29060:	0018      	movs	r0, r3
   29062:	4b09      	ldr	r3, [pc, #36]	; (29088 <_usart_set_config+0x2d4>)
   29064:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   29066:	69bb      	ldr	r3, [r7, #24]
   29068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2906a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   2906c:	2300      	movs	r3, #0
}
   2906e:	0018      	movs	r0, r3
   29070:	46bd      	mov	sp, r7
   29072:	b00a      	add	sp, #40	; 0x28
   29074:	bdb0      	pop	{r4, r5, r7, pc}
   29076:	46c0      	nop			; (mov r8, r8)
   29078:	00027b5d 	.word	0x00027b5d
   2907c:	0002a511 	.word	0x0002a511
   29080:	000276d7 	.word	0x000276d7
   29084:	00027755 	.word	0x00027755
   29088:	00028d91 	.word	0x00028d91
   2908c:	00028d51 	.word	0x00028d51

00029090 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   29090:	b590      	push	{r4, r7, lr}
   29092:	b093      	sub	sp, #76	; 0x4c
   29094:	af00      	add	r7, sp, #0
   29096:	60f8      	str	r0, [r7, #12]
   29098:	60b9      	str	r1, [r7, #8]
   2909a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   2909c:	233b      	movs	r3, #59	; 0x3b
   2909e:	18fb      	adds	r3, r7, r3
   290a0:	2200      	movs	r2, #0
   290a2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   290a4:	68fb      	ldr	r3, [r7, #12]
   290a6:	68ba      	ldr	r2, [r7, #8]
   290a8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   290aa:	68fb      	ldr	r3, [r7, #12]
   290ac:	681b      	ldr	r3, [r3, #0]
   290ae:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   290b0:	68fb      	ldr	r3, [r7, #12]
   290b2:	681b      	ldr	r3, [r3, #0]
   290b4:	0018      	movs	r0, r3
   290b6:	4b86      	ldr	r3, [pc, #536]	; (292d0 <usart_init+0x240>)
   290b8:	4798      	blx	r3
   290ba:	0003      	movs	r3, r0
   290bc:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   290be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   290c0:	3302      	adds	r3, #2
   290c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   290c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   290c6:	3314      	adds	r3, #20
   290c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   290ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   290cc:	681b      	ldr	r3, [r3, #0]
   290ce:	2201      	movs	r2, #1
   290d0:	4013      	ands	r3, r2
   290d2:	d001      	beq.n	290d8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   290d4:	2305      	movs	r3, #5
   290d6:	e0f6      	b.n	292c6 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   290d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   290da:	681b      	ldr	r3, [r3, #0]
   290dc:	2202      	movs	r2, #2
   290de:	4013      	ands	r3, r2
   290e0:	d001      	beq.n	290e6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   290e2:	231c      	movs	r3, #28
   290e4:	e0ef      	b.n	292c6 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   290e6:	2201      	movs	r2, #1
   290e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   290ea:	409a      	lsls	r2, r3
   290ec:	0013      	movs	r3, r2
   290ee:	0019      	movs	r1, r3
   290f0:	2002      	movs	r0, #2
   290f2:	4b78      	ldr	r3, [pc, #480]	; (292d4 <usart_init+0x244>)
   290f4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   290f6:	2324      	movs	r3, #36	; 0x24
   290f8:	18fb      	adds	r3, r7, r3
   290fa:	0018      	movs	r0, r3
   290fc:	4b76      	ldr	r3, [pc, #472]	; (292d8 <usart_init+0x248>)
   290fe:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   29100:	687b      	ldr	r3, [r7, #4]
   29102:	222d      	movs	r2, #45	; 0x2d
   29104:	5c9a      	ldrb	r2, [r3, r2]
   29106:	2324      	movs	r3, #36	; 0x24
   29108:	18fb      	adds	r3, r7, r3
   2910a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2910c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2910e:	b2db      	uxtb	r3, r3
   29110:	2224      	movs	r2, #36	; 0x24
   29112:	18ba      	adds	r2, r7, r2
   29114:	0011      	movs	r1, r2
   29116:	0018      	movs	r0, r3
   29118:	4b70      	ldr	r3, [pc, #448]	; (292dc <usart_init+0x24c>)
   2911a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2911e:	b2db      	uxtb	r3, r3
   29120:	0018      	movs	r0, r3
   29122:	4b6f      	ldr	r3, [pc, #444]	; (292e0 <usart_init+0x250>)
   29124:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   29126:	687b      	ldr	r3, [r7, #4]
   29128:	222d      	movs	r2, #45	; 0x2d
   2912a:	5c9b      	ldrb	r3, [r3, r2]
   2912c:	2100      	movs	r1, #0
   2912e:	0018      	movs	r0, r3
   29130:	4b6c      	ldr	r3, [pc, #432]	; (292e4 <usart_init+0x254>)
   29132:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   29134:	687b      	ldr	r3, [r7, #4]
   29136:	7ada      	ldrb	r2, [r3, #11]
   29138:	68fb      	ldr	r3, [r7, #12]
   2913a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   2913c:	687b      	ldr	r3, [r7, #4]
   2913e:	2224      	movs	r2, #36	; 0x24
   29140:	5c9a      	ldrb	r2, [r3, r2]
   29142:	68fb      	ldr	r3, [r7, #12]
   29144:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   29146:	687b      	ldr	r3, [r7, #4]
   29148:	2225      	movs	r2, #37	; 0x25
   2914a:	5c9a      	ldrb	r2, [r3, r2]
   2914c:	68fb      	ldr	r3, [r7, #12]
   2914e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   29150:	687b      	ldr	r3, [r7, #4]
   29152:	7eda      	ldrb	r2, [r3, #27]
   29154:	68fb      	ldr	r3, [r7, #12]
   29156:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   29158:	687b      	ldr	r3, [r7, #4]
   2915a:	7f1a      	ldrb	r2, [r3, #28]
   2915c:	68fb      	ldr	r3, [r7, #12]
   2915e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   29160:	233b      	movs	r3, #59	; 0x3b
   29162:	18fc      	adds	r4, r7, r3
   29164:	687a      	ldr	r2, [r7, #4]
   29166:	68fb      	ldr	r3, [r7, #12]
   29168:	0011      	movs	r1, r2
   2916a:	0018      	movs	r0, r3
   2916c:	4b5e      	ldr	r3, [pc, #376]	; (292e8 <usart_init+0x258>)
   2916e:	4798      	blx	r3
   29170:	0003      	movs	r3, r0
   29172:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   29174:	233b      	movs	r3, #59	; 0x3b
   29176:	18fb      	adds	r3, r7, r3
   29178:	781b      	ldrb	r3, [r3, #0]
   2917a:	2b00      	cmp	r3, #0
   2917c:	d003      	beq.n	29186 <usart_init+0xf6>
		return status_code;
   2917e:	233b      	movs	r3, #59	; 0x3b
   29180:	18fb      	adds	r3, r7, r3
   29182:	781b      	ldrb	r3, [r3, #0]
   29184:	e09f      	b.n	292c6 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   29186:	2320      	movs	r3, #32
   29188:	18fb      	adds	r3, r7, r3
   2918a:	0018      	movs	r0, r3
   2918c:	4b57      	ldr	r3, [pc, #348]	; (292ec <usart_init+0x25c>)
   2918e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29190:	2320      	movs	r3, #32
   29192:	18fb      	adds	r3, r7, r3
   29194:	2200      	movs	r2, #0
   29196:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   29198:	2320      	movs	r3, #32
   2919a:	18fb      	adds	r3, r7, r3
   2919c:	2200      	movs	r2, #0
   2919e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   291a0:	687b      	ldr	r3, [r7, #4]
   291a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   291a4:	2310      	movs	r3, #16
   291a6:	18fb      	adds	r3, r7, r3
   291a8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   291aa:	687b      	ldr	r3, [r7, #4]
   291ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   291ae:	2310      	movs	r3, #16
   291b0:	18fb      	adds	r3, r7, r3
   291b2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   291b4:	687b      	ldr	r3, [r7, #4]
   291b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   291b8:	2310      	movs	r3, #16
   291ba:	18fb      	adds	r3, r7, r3
   291bc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   291be:	687b      	ldr	r3, [r7, #4]
   291c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   291c2:	2310      	movs	r3, #16
   291c4:	18fb      	adds	r3, r7, r3
   291c6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   291c8:	2347      	movs	r3, #71	; 0x47
   291ca:	18fb      	adds	r3, r7, r3
   291cc:	2200      	movs	r2, #0
   291ce:	701a      	strb	r2, [r3, #0]
   291d0:	e02c      	b.n	2922c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   291d2:	2347      	movs	r3, #71	; 0x47
   291d4:	18fb      	adds	r3, r7, r3
   291d6:	781a      	ldrb	r2, [r3, #0]
   291d8:	2310      	movs	r3, #16
   291da:	18fb      	adds	r3, r7, r3
   291dc:	0092      	lsls	r2, r2, #2
   291de:	58d3      	ldr	r3, [r2, r3]
   291e0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   291e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   291e4:	2b00      	cmp	r3, #0
   291e6:	d109      	bne.n	291fc <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   291e8:	2347      	movs	r3, #71	; 0x47
   291ea:	18fb      	adds	r3, r7, r3
   291ec:	781a      	ldrb	r2, [r3, #0]
   291ee:	68bb      	ldr	r3, [r7, #8]
   291f0:	0011      	movs	r1, r2
   291f2:	0018      	movs	r0, r3
   291f4:	4b3e      	ldr	r3, [pc, #248]	; (292f0 <usart_init+0x260>)
   291f6:	4798      	blx	r3
   291f8:	0003      	movs	r3, r0
   291fa:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   291fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   291fe:	3301      	adds	r3, #1
   29200:	d00d      	beq.n	2921e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   29202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29204:	b2da      	uxtb	r2, r3
   29206:	2320      	movs	r3, #32
   29208:	18fb      	adds	r3, r7, r3
   2920a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2920c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2920e:	0c1b      	lsrs	r3, r3, #16
   29210:	b2db      	uxtb	r3, r3
   29212:	2220      	movs	r2, #32
   29214:	18ba      	adds	r2, r7, r2
   29216:	0011      	movs	r1, r2
   29218:	0018      	movs	r0, r3
   2921a:	4b36      	ldr	r3, [pc, #216]	; (292f4 <usart_init+0x264>)
   2921c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2921e:	2347      	movs	r3, #71	; 0x47
   29220:	18fb      	adds	r3, r7, r3
   29222:	781a      	ldrb	r2, [r3, #0]
   29224:	2347      	movs	r3, #71	; 0x47
   29226:	18fb      	adds	r3, r7, r3
   29228:	3201      	adds	r2, #1
   2922a:	701a      	strb	r2, [r3, #0]
   2922c:	2347      	movs	r3, #71	; 0x47
   2922e:	18fb      	adds	r3, r7, r3
   29230:	781b      	ldrb	r3, [r3, #0]
   29232:	2b03      	cmp	r3, #3
   29234:	d9cd      	bls.n	291d2 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   29236:	2300      	movs	r3, #0
   29238:	63fb      	str	r3, [r7, #60]	; 0x3c
   2923a:	e00a      	b.n	29252 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   2923c:	68fa      	ldr	r2, [r7, #12]
   2923e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29240:	3302      	adds	r3, #2
   29242:	009b      	lsls	r3, r3, #2
   29244:	18d3      	adds	r3, r2, r3
   29246:	3304      	adds	r3, #4
   29248:	2200      	movs	r2, #0
   2924a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2924c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2924e:	3301      	adds	r3, #1
   29250:	63fb      	str	r3, [r7, #60]	; 0x3c
   29252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29254:	2b05      	cmp	r3, #5
   29256:	d9f1      	bls.n	2923c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   29258:	68fb      	ldr	r3, [r7, #12]
   2925a:	2200      	movs	r2, #0
   2925c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   2925e:	68fb      	ldr	r3, [r7, #12]
   29260:	2200      	movs	r2, #0
   29262:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   29264:	68fb      	ldr	r3, [r7, #12]
   29266:	2200      	movs	r2, #0
   29268:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   2926a:	68fb      	ldr	r3, [r7, #12]
   2926c:	2200      	movs	r2, #0
   2926e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   29270:	68fb      	ldr	r3, [r7, #12]
   29272:	2230      	movs	r2, #48	; 0x30
   29274:	2100      	movs	r1, #0
   29276:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   29278:	68fb      	ldr	r3, [r7, #12]
   2927a:	2231      	movs	r2, #49	; 0x31
   2927c:	2100      	movs	r1, #0
   2927e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   29280:	68fb      	ldr	r3, [r7, #12]
   29282:	2232      	movs	r2, #50	; 0x32
   29284:	2100      	movs	r1, #0
   29286:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   29288:	68fb      	ldr	r3, [r7, #12]
   2928a:	2233      	movs	r2, #51	; 0x33
   2928c:	2100      	movs	r1, #0
   2928e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   29290:	68fb      	ldr	r3, [r7, #12]
   29292:	681b      	ldr	r3, [r3, #0]
   29294:	2227      	movs	r2, #39	; 0x27
   29296:	18bc      	adds	r4, r7, r2
   29298:	0018      	movs	r0, r3
   2929a:	4b0d      	ldr	r3, [pc, #52]	; (292d0 <usart_init+0x240>)
   2929c:	4798      	blx	r3
   2929e:	0003      	movs	r3, r0
   292a0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   292a2:	4a15      	ldr	r2, [pc, #84]	; (292f8 <usart_init+0x268>)
   292a4:	2327      	movs	r3, #39	; 0x27
   292a6:	18fb      	adds	r3, r7, r3
   292a8:	781b      	ldrb	r3, [r3, #0]
   292aa:	0011      	movs	r1, r2
   292ac:	0018      	movs	r0, r3
   292ae:	4b13      	ldr	r3, [pc, #76]	; (292fc <usart_init+0x26c>)
   292b0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   292b2:	2327      	movs	r3, #39	; 0x27
   292b4:	18fb      	adds	r3, r7, r3
   292b6:	781a      	ldrb	r2, [r3, #0]
   292b8:	4b11      	ldr	r3, [pc, #68]	; (29300 <usart_init+0x270>)
   292ba:	0092      	lsls	r2, r2, #2
   292bc:	68f9      	ldr	r1, [r7, #12]
   292be:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   292c0:	233b      	movs	r3, #59	; 0x3b
   292c2:	18fb      	adds	r3, r7, r3
   292c4:	781b      	ldrb	r3, [r3, #0]
}
   292c6:	0018      	movs	r0, r3
   292c8:	46bd      	mov	sp, r7
   292ca:	b013      	add	sp, #76	; 0x4c
   292cc:	bd90      	pop	{r4, r7, pc}
   292ce:	46c0      	nop			; (mov r8, r8)
   292d0:	00027b5d 	.word	0x00027b5d
   292d4:	00028ccd 	.word	0x00028ccd
   292d8:	00028cb5 	.word	0x00028cb5
   292dc:	0002a3ed 	.word	0x0002a3ed
   292e0:	0002a431 	.word	0x0002a431
   292e4:	00027915 	.word	0x00027915
   292e8:	00028db5 	.word	0x00028db5
   292ec:	00028d29 	.word	0x00028d29
   292f0:	000279a1 	.word	0x000279a1
   292f4:	0002a74d 	.word	0x0002a74d
   292f8:	0002956d 	.word	0x0002956d
   292fc:	00027bc1 	.word	0x00027bc1
   29300:	20005c08 	.word	0x20005c08

00029304 <system_interrupt_enter_critical_section>:
{
   29304:	b580      	push	{r7, lr}
   29306:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   29308:	4b02      	ldr	r3, [pc, #8]	; (29314 <system_interrupt_enter_critical_section+0x10>)
   2930a:	4798      	blx	r3
}
   2930c:	46c0      	nop			; (mov r8, r8)
   2930e:	46bd      	mov	sp, r7
   29310:	bd80      	pop	{r7, pc}
   29312:	46c0      	nop			; (mov r8, r8)
   29314:	00026759 	.word	0x00026759

00029318 <system_interrupt_leave_critical_section>:
{
   29318:	b580      	push	{r7, lr}
   2931a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2931c:	4b02      	ldr	r3, [pc, #8]	; (29328 <system_interrupt_leave_critical_section+0x10>)
   2931e:	4798      	blx	r3
}
   29320:	46c0      	nop			; (mov r8, r8)
   29322:	46bd      	mov	sp, r7
   29324:	bd80      	pop	{r7, pc}
   29326:	46c0      	nop			; (mov r8, r8)
   29328:	000267ad 	.word	0x000267ad

0002932c <usart_is_syncing>:
{
   2932c:	b580      	push	{r7, lr}
   2932e:	b084      	sub	sp, #16
   29330:	af00      	add	r7, sp, #0
   29332:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   29334:	687b      	ldr	r3, [r7, #4]
   29336:	681b      	ldr	r3, [r3, #0]
   29338:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2933a:	68fb      	ldr	r3, [r7, #12]
   2933c:	69db      	ldr	r3, [r3, #28]
   2933e:	1e5a      	subs	r2, r3, #1
   29340:	4193      	sbcs	r3, r2
   29342:	b2db      	uxtb	r3, r3
}
   29344:	0018      	movs	r0, r3
   29346:	46bd      	mov	sp, r7
   29348:	b004      	add	sp, #16
   2934a:	bd80      	pop	{r7, pc}

0002934c <_usart_wait_for_sync>:
{
   2934c:	b580      	push	{r7, lr}
   2934e:	b082      	sub	sp, #8
   29350:	af00      	add	r7, sp, #0
   29352:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   29354:	46c0      	nop			; (mov r8, r8)
   29356:	687b      	ldr	r3, [r7, #4]
   29358:	0018      	movs	r0, r3
   2935a:	4b04      	ldr	r3, [pc, #16]	; (2936c <_usart_wait_for_sync+0x20>)
   2935c:	4798      	blx	r3
   2935e:	1e03      	subs	r3, r0, #0
   29360:	d1f9      	bne.n	29356 <_usart_wait_for_sync+0xa>
}
   29362:	46c0      	nop			; (mov r8, r8)
   29364:	46bd      	mov	sp, r7
   29366:	b002      	add	sp, #8
   29368:	bd80      	pop	{r7, pc}
   2936a:	46c0      	nop			; (mov r8, r8)
   2936c:	0002932d 	.word	0x0002932d

00029370 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29370:	b580      	push	{r7, lr}
   29372:	b086      	sub	sp, #24
   29374:	af00      	add	r7, sp, #0
   29376:	60f8      	str	r0, [r7, #12]
   29378:	60b9      	str	r1, [r7, #8]
   2937a:	1dbb      	adds	r3, r7, #6
   2937c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2937e:	68fb      	ldr	r3, [r7, #12]
   29380:	681b      	ldr	r3, [r3, #0]
   29382:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29384:	4b0f      	ldr	r3, [pc, #60]	; (293c4 <_usart_write_buffer+0x54>)
   29386:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   29388:	68fb      	ldr	r3, [r7, #12]
   2938a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2938c:	b29b      	uxth	r3, r3
   2938e:	2b00      	cmp	r3, #0
   29390:	d003      	beq.n	2939a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29392:	4b0d      	ldr	r3, [pc, #52]	; (293c8 <_usart_write_buffer+0x58>)
   29394:	4798      	blx	r3
		return STATUS_BUSY;
   29396:	2305      	movs	r3, #5
   29398:	e010      	b.n	293bc <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2939a:	68fb      	ldr	r3, [r7, #12]
   2939c:	1dba      	adds	r2, r7, #6
   2939e:	8812      	ldrh	r2, [r2, #0]
   293a0:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   293a2:	4b09      	ldr	r3, [pc, #36]	; (293c8 <_usart_write_buffer+0x58>)
   293a4:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   293a6:	68fb      	ldr	r3, [r7, #12]
   293a8:	68ba      	ldr	r2, [r7, #8]
   293aa:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   293ac:	68fb      	ldr	r3, [r7, #12]
   293ae:	2233      	movs	r2, #51	; 0x33
   293b0:	2105      	movs	r1, #5
   293b2:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   293b4:	697b      	ldr	r3, [r7, #20]
   293b6:	2201      	movs	r2, #1
   293b8:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   293ba:	2300      	movs	r3, #0
}
   293bc:	0018      	movs	r0, r3
   293be:	46bd      	mov	sp, r7
   293c0:	b006      	add	sp, #24
   293c2:	bd80      	pop	{r7, pc}
   293c4:	00029305 	.word	0x00029305
   293c8:	00029319 	.word	0x00029319

000293cc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   293cc:	b580      	push	{r7, lr}
   293ce:	b086      	sub	sp, #24
   293d0:	af00      	add	r7, sp, #0
   293d2:	60f8      	str	r0, [r7, #12]
   293d4:	60b9      	str	r1, [r7, #8]
   293d6:	1dbb      	adds	r3, r7, #6
   293d8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   293da:	68fb      	ldr	r3, [r7, #12]
   293dc:	681b      	ldr	r3, [r3, #0]
   293de:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   293e0:	4b16      	ldr	r3, [pc, #88]	; (2943c <_usart_read_buffer+0x70>)
   293e2:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   293e4:	68fb      	ldr	r3, [r7, #12]
   293e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   293e8:	b29b      	uxth	r3, r3
   293ea:	2b00      	cmp	r3, #0
   293ec:	d003      	beq.n	293f6 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   293ee:	4b14      	ldr	r3, [pc, #80]	; (29440 <_usart_read_buffer+0x74>)
   293f0:	4798      	blx	r3
		return STATUS_BUSY;
   293f2:	2305      	movs	r3, #5
   293f4:	e01e      	b.n	29434 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   293f6:	68fb      	ldr	r3, [r7, #12]
   293f8:	1dba      	adds	r2, r7, #6
   293fa:	8812      	ldrh	r2, [r2, #0]
   293fc:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   293fe:	4b10      	ldr	r3, [pc, #64]	; (29440 <_usart_read_buffer+0x74>)
   29400:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   29402:	68fb      	ldr	r3, [r7, #12]
   29404:	68ba      	ldr	r2, [r7, #8]
   29406:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   29408:	68fb      	ldr	r3, [r7, #12]
   2940a:	2232      	movs	r2, #50	; 0x32
   2940c:	2105      	movs	r1, #5
   2940e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   29410:	697b      	ldr	r3, [r7, #20]
   29412:	2204      	movs	r2, #4
   29414:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   29416:	68fb      	ldr	r3, [r7, #12]
   29418:	7a1b      	ldrb	r3, [r3, #8]
   2941a:	2b00      	cmp	r3, #0
   2941c:	d002      	beq.n	29424 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   2941e:	697b      	ldr	r3, [r7, #20]
   29420:	2220      	movs	r2, #32
   29422:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   29424:	68fb      	ldr	r3, [r7, #12]
   29426:	7a5b      	ldrb	r3, [r3, #9]
   29428:	2b00      	cmp	r3, #0
   2942a:	d002      	beq.n	29432 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   2942c:	697b      	ldr	r3, [r7, #20]
   2942e:	2208      	movs	r2, #8
   29430:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   29432:	2300      	movs	r3, #0
}
   29434:	0018      	movs	r0, r3
   29436:	46bd      	mov	sp, r7
   29438:	b006      	add	sp, #24
   2943a:	bd80      	pop	{r7, pc}
   2943c:	00029305 	.word	0x00029305
   29440:	00029319 	.word	0x00029319

00029444 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   29444:	b580      	push	{r7, lr}
   29446:	b084      	sub	sp, #16
   29448:	af00      	add	r7, sp, #0
   2944a:	60f8      	str	r0, [r7, #12]
   2944c:	60b9      	str	r1, [r7, #8]
   2944e:	1dfb      	adds	r3, r7, #7
   29450:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   29452:	1dfb      	adds	r3, r7, #7
   29454:	781b      	ldrb	r3, [r3, #0]
   29456:	68fa      	ldr	r2, [r7, #12]
   29458:	3302      	adds	r3, #2
   2945a:	009b      	lsls	r3, r3, #2
   2945c:	18d3      	adds	r3, r2, r3
   2945e:	3304      	adds	r3, #4
   29460:	68ba      	ldr	r2, [r7, #8]
   29462:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   29464:	68fb      	ldr	r3, [r7, #12]
   29466:	2230      	movs	r2, #48	; 0x30
   29468:	5c9b      	ldrb	r3, [r3, r2]
   2946a:	b25a      	sxtb	r2, r3
   2946c:	1dfb      	adds	r3, r7, #7
   2946e:	781b      	ldrb	r3, [r3, #0]
   29470:	2101      	movs	r1, #1
   29472:	4099      	lsls	r1, r3
   29474:	000b      	movs	r3, r1
   29476:	b25b      	sxtb	r3, r3
   29478:	4313      	orrs	r3, r2
   2947a:	b25b      	sxtb	r3, r3
   2947c:	b2d9      	uxtb	r1, r3
   2947e:	68fb      	ldr	r3, [r7, #12]
   29480:	2230      	movs	r2, #48	; 0x30
   29482:	5499      	strb	r1, [r3, r2]
}
   29484:	46c0      	nop			; (mov r8, r8)
   29486:	46bd      	mov	sp, r7
   29488:	b004      	add	sp, #16
   2948a:	bd80      	pop	{r7, pc}

0002948c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2948c:	b580      	push	{r7, lr}
   2948e:	b084      	sub	sp, #16
   29490:	af00      	add	r7, sp, #0
   29492:	60f8      	str	r0, [r7, #12]
   29494:	60b9      	str	r1, [r7, #8]
   29496:	1dbb      	adds	r3, r7, #6
   29498:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   2949a:	1dbb      	adds	r3, r7, #6
   2949c:	881b      	ldrh	r3, [r3, #0]
   2949e:	2b00      	cmp	r3, #0
   294a0:	d101      	bne.n	294a6 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   294a2:	2317      	movs	r3, #23
   294a4:	e010      	b.n	294c8 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   294a6:	68fb      	ldr	r3, [r7, #12]
   294a8:	79db      	ldrb	r3, [r3, #7]
   294aa:	2201      	movs	r2, #1
   294ac:	4053      	eors	r3, r2
   294ae:	b2db      	uxtb	r3, r3
   294b0:	2b00      	cmp	r3, #0
   294b2:	d001      	beq.n	294b8 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   294b4:	231c      	movs	r3, #28
   294b6:	e007      	b.n	294c8 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   294b8:	1dbb      	adds	r3, r7, #6
   294ba:	881a      	ldrh	r2, [r3, #0]
   294bc:	68b9      	ldr	r1, [r7, #8]
   294be:	68fb      	ldr	r3, [r7, #12]
   294c0:	0018      	movs	r0, r3
   294c2:	4b03      	ldr	r3, [pc, #12]	; (294d0 <usart_write_buffer_job+0x44>)
   294c4:	4798      	blx	r3
   294c6:	0003      	movs	r3, r0
}
   294c8:	0018      	movs	r0, r3
   294ca:	46bd      	mov	sp, r7
   294cc:	b004      	add	sp, #16
   294ce:	bd80      	pop	{r7, pc}
   294d0:	00029371 	.word	0x00029371

000294d4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   294d4:	b580      	push	{r7, lr}
   294d6:	b084      	sub	sp, #16
   294d8:	af00      	add	r7, sp, #0
   294da:	60f8      	str	r0, [r7, #12]
   294dc:	60b9      	str	r1, [r7, #8]
   294de:	1dbb      	adds	r3, r7, #6
   294e0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   294e2:	1dbb      	adds	r3, r7, #6
   294e4:	881b      	ldrh	r3, [r3, #0]
   294e6:	2b00      	cmp	r3, #0
   294e8:	d101      	bne.n	294ee <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   294ea:	2317      	movs	r3, #23
   294ec:	e010      	b.n	29510 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   294ee:	68fb      	ldr	r3, [r7, #12]
   294f0:	799b      	ldrb	r3, [r3, #6]
   294f2:	2201      	movs	r2, #1
   294f4:	4053      	eors	r3, r2
   294f6:	b2db      	uxtb	r3, r3
   294f8:	2b00      	cmp	r3, #0
   294fa:	d001      	beq.n	29500 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   294fc:	231c      	movs	r3, #28
   294fe:	e007      	b.n	29510 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   29500:	1dbb      	adds	r3, r7, #6
   29502:	881a      	ldrh	r2, [r3, #0]
   29504:	68b9      	ldr	r1, [r7, #8]
   29506:	68fb      	ldr	r3, [r7, #12]
   29508:	0018      	movs	r0, r3
   2950a:	4b03      	ldr	r3, [pc, #12]	; (29518 <usart_read_buffer_job+0x44>)
   2950c:	4798      	blx	r3
   2950e:	0003      	movs	r3, r0
}
   29510:	0018      	movs	r0, r3
   29512:	46bd      	mov	sp, r7
   29514:	b004      	add	sp, #16
   29516:	bd80      	pop	{r7, pc}
   29518:	000293cd 	.word	0x000293cd

0002951c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   2951c:	b580      	push	{r7, lr}
   2951e:	b084      	sub	sp, #16
   29520:	af00      	add	r7, sp, #0
   29522:	6078      	str	r0, [r7, #4]
   29524:	000a      	movs	r2, r1
   29526:	1cfb      	adds	r3, r7, #3
   29528:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   2952a:	1cfb      	adds	r3, r7, #3
   2952c:	781b      	ldrb	r3, [r3, #0]
   2952e:	2b00      	cmp	r3, #0
   29530:	d002      	beq.n	29538 <usart_get_job_status+0x1c>
   29532:	2b01      	cmp	r3, #1
   29534:	d007      	beq.n	29546 <usart_get_job_status+0x2a>
   29536:	e00d      	b.n	29554 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   29538:	230f      	movs	r3, #15
   2953a:	18fb      	adds	r3, r7, r3
   2953c:	687a      	ldr	r2, [r7, #4]
   2953e:	2132      	movs	r1, #50	; 0x32
   29540:	5c52      	ldrb	r2, [r2, r1]
   29542:	701a      	strb	r2, [r3, #0]
			break;
   29544:	e00b      	b.n	2955e <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   29546:	230f      	movs	r3, #15
   29548:	18fb      	adds	r3, r7, r3
   2954a:	687a      	ldr	r2, [r7, #4]
   2954c:	2133      	movs	r1, #51	; 0x33
   2954e:	5c52      	ldrb	r2, [r2, r1]
   29550:	701a      	strb	r2, [r3, #0]
			break;
   29552:	e004      	b.n	2955e <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   29554:	230f      	movs	r3, #15
   29556:	18fb      	adds	r3, r7, r3
   29558:	2217      	movs	r2, #23
   2955a:	701a      	strb	r2, [r3, #0]
			break;
   2955c:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   2955e:	230f      	movs	r3, #15
   29560:	18fb      	adds	r3, r7, r3
   29562:	781b      	ldrb	r3, [r3, #0]
}
   29564:	0018      	movs	r0, r3
   29566:	46bd      	mov	sp, r7
   29568:	b004      	add	sp, #16
   2956a:	bd80      	pop	{r7, pc}

0002956c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   2956c:	b580      	push	{r7, lr}
   2956e:	b088      	sub	sp, #32
   29570:	af00      	add	r7, sp, #0
   29572:	0002      	movs	r2, r0
   29574:	1dfb      	adds	r3, r7, #7
   29576:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   29578:	1dfb      	adds	r3, r7, #7
   2957a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   2957c:	4ba3      	ldr	r3, [pc, #652]	; (2980c <_usart_interrupt_handler+0x2a0>)
   2957e:	0092      	lsls	r2, r2, #2
   29580:	58d3      	ldr	r3, [r2, r3]
   29582:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   29584:	69bb      	ldr	r3, [r7, #24]
   29586:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   29588:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2958a:	69bb      	ldr	r3, [r7, #24]
   2958c:	0018      	movs	r0, r3
   2958e:	4ba0      	ldr	r3, [pc, #640]	; (29810 <_usart_interrupt_handler+0x2a4>)
   29590:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   29592:	697b      	ldr	r3, [r7, #20]
   29594:	7e1b      	ldrb	r3, [r3, #24]
   29596:	b2da      	uxtb	r2, r3
   29598:	2312      	movs	r3, #18
   2959a:	18fb      	adds	r3, r7, r3
   2959c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   2959e:	697b      	ldr	r3, [r7, #20]
   295a0:	7d9b      	ldrb	r3, [r3, #22]
   295a2:	b2db      	uxtb	r3, r3
   295a4:	b29a      	uxth	r2, r3
   295a6:	2312      	movs	r3, #18
   295a8:	18fb      	adds	r3, r7, r3
   295aa:	2112      	movs	r1, #18
   295ac:	1879      	adds	r1, r7, r1
   295ae:	8809      	ldrh	r1, [r1, #0]
   295b0:	400a      	ands	r2, r1
   295b2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   295b4:	69bb      	ldr	r3, [r7, #24]
   295b6:	2230      	movs	r2, #48	; 0x30
   295b8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   295ba:	69ba      	ldr	r2, [r7, #24]
   295bc:	2131      	movs	r1, #49	; 0x31
   295be:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   295c0:	4013      	ands	r3, r2
   295c2:	b2da      	uxtb	r2, r3
   295c4:	2310      	movs	r3, #16
   295c6:	18fb      	adds	r3, r7, r3
   295c8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   295ca:	2312      	movs	r3, #18
   295cc:	18fb      	adds	r3, r7, r3
   295ce:	881b      	ldrh	r3, [r3, #0]
   295d0:	2201      	movs	r2, #1
   295d2:	4013      	ands	r3, r2
   295d4:	d044      	beq.n	29660 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   295d6:	69bb      	ldr	r3, [r7, #24]
   295d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   295da:	b29b      	uxth	r3, r3
   295dc:	2b00      	cmp	r3, #0
   295de:	d03c      	beq.n	2965a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   295e0:	69bb      	ldr	r3, [r7, #24]
   295e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   295e4:	781b      	ldrb	r3, [r3, #0]
   295e6:	b2da      	uxtb	r2, r3
   295e8:	231c      	movs	r3, #28
   295ea:	18fb      	adds	r3, r7, r3
   295ec:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   295ee:	69bb      	ldr	r3, [r7, #24]
   295f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   295f2:	1c5a      	adds	r2, r3, #1
   295f4:	69bb      	ldr	r3, [r7, #24]
   295f6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   295f8:	69bb      	ldr	r3, [r7, #24]
   295fa:	795b      	ldrb	r3, [r3, #5]
   295fc:	2b01      	cmp	r3, #1
   295fe:	d113      	bne.n	29628 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   29600:	69bb      	ldr	r3, [r7, #24]
   29602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29604:	781b      	ldrb	r3, [r3, #0]
   29606:	b2db      	uxtb	r3, r3
   29608:	021b      	lsls	r3, r3, #8
   2960a:	b21a      	sxth	r2, r3
   2960c:	231c      	movs	r3, #28
   2960e:	18fb      	adds	r3, r7, r3
   29610:	2100      	movs	r1, #0
   29612:	5e5b      	ldrsh	r3, [r3, r1]
   29614:	4313      	orrs	r3, r2
   29616:	b21a      	sxth	r2, r3
   29618:	231c      	movs	r3, #28
   2961a:	18fb      	adds	r3, r7, r3
   2961c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2961e:	69bb      	ldr	r3, [r7, #24]
   29620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29622:	1c5a      	adds	r2, r3, #1
   29624:	69bb      	ldr	r3, [r7, #24]
   29626:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   29628:	231c      	movs	r3, #28
   2962a:	18fb      	adds	r3, r7, r3
   2962c:	881b      	ldrh	r3, [r3, #0]
   2962e:	05db      	lsls	r3, r3, #23
   29630:	0ddb      	lsrs	r3, r3, #23
   29632:	b29a      	uxth	r2, r3
   29634:	697b      	ldr	r3, [r7, #20]
   29636:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   29638:	69bb      	ldr	r3, [r7, #24]
   2963a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2963c:	b29b      	uxth	r3, r3
   2963e:	3b01      	subs	r3, #1
   29640:	b29b      	uxth	r3, r3
   29642:	69ba      	ldr	r2, [r7, #24]
   29644:	1c19      	adds	r1, r3, #0
   29646:	85d1      	strh	r1, [r2, #46]	; 0x2e
   29648:	2b00      	cmp	r3, #0
   2964a:	d109      	bne.n	29660 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2964c:	697b      	ldr	r3, [r7, #20]
   2964e:	2201      	movs	r2, #1
   29650:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   29652:	697b      	ldr	r3, [r7, #20]
   29654:	2202      	movs	r2, #2
   29656:	759a      	strb	r2, [r3, #22]
   29658:	e002      	b.n	29660 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2965a:	697b      	ldr	r3, [r7, #20]
   2965c:	2201      	movs	r2, #1
   2965e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   29660:	2312      	movs	r3, #18
   29662:	18fb      	adds	r3, r7, r3
   29664:	881b      	ldrh	r3, [r3, #0]
   29666:	2202      	movs	r2, #2
   29668:	4013      	ands	r3, r2
   2966a:	d011      	beq.n	29690 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   2966c:	697b      	ldr	r3, [r7, #20]
   2966e:	2202      	movs	r2, #2
   29670:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   29672:	69bb      	ldr	r3, [r7, #24]
   29674:	2233      	movs	r2, #51	; 0x33
   29676:	2100      	movs	r1, #0
   29678:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   2967a:	2310      	movs	r3, #16
   2967c:	18fb      	adds	r3, r7, r3
   2967e:	881b      	ldrh	r3, [r3, #0]
   29680:	2201      	movs	r2, #1
   29682:	4013      	ands	r3, r2
   29684:	d004      	beq.n	29690 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   29686:	69bb      	ldr	r3, [r7, #24]
   29688:	68db      	ldr	r3, [r3, #12]
   2968a:	69ba      	ldr	r2, [r7, #24]
   2968c:	0010      	movs	r0, r2
   2968e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   29690:	2312      	movs	r3, #18
   29692:	18fb      	adds	r3, r7, r3
   29694:	881b      	ldrh	r3, [r3, #0]
   29696:	2204      	movs	r2, #4
   29698:	4013      	ands	r3, r2
   2969a:	d100      	bne.n	2969e <_usart_interrupt_handler+0x132>
   2969c:	e0bd      	b.n	2981a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2969e:	69bb      	ldr	r3, [r7, #24]
   296a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   296a2:	b29b      	uxth	r3, r3
   296a4:	2b00      	cmp	r3, #0
   296a6:	d100      	bne.n	296aa <_usart_interrupt_handler+0x13e>
   296a8:	e0b4      	b.n	29814 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   296aa:	697b      	ldr	r3, [r7, #20]
   296ac:	8b5b      	ldrh	r3, [r3, #26]
   296ae:	b29b      	uxth	r3, r3
   296b0:	b2da      	uxtb	r2, r3
   296b2:	231f      	movs	r3, #31
   296b4:	18fb      	adds	r3, r7, r3
   296b6:	213f      	movs	r1, #63	; 0x3f
   296b8:	400a      	ands	r2, r1
   296ba:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   296bc:	231f      	movs	r3, #31
   296be:	18fb      	adds	r3, r7, r3
   296c0:	781b      	ldrb	r3, [r3, #0]
   296c2:	2208      	movs	r2, #8
   296c4:	4013      	ands	r3, r2
   296c6:	d007      	beq.n	296d8 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   296c8:	231f      	movs	r3, #31
   296ca:	18fb      	adds	r3, r7, r3
   296cc:	221f      	movs	r2, #31
   296ce:	18ba      	adds	r2, r7, r2
   296d0:	7812      	ldrb	r2, [r2, #0]
   296d2:	2108      	movs	r1, #8
   296d4:	438a      	bics	r2, r1
   296d6:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   296d8:	231f      	movs	r3, #31
   296da:	18fb      	adds	r3, r7, r3
   296dc:	781b      	ldrb	r3, [r3, #0]
   296de:	2b00      	cmp	r3, #0
   296e0:	d050      	beq.n	29784 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   296e2:	231f      	movs	r3, #31
   296e4:	18fb      	adds	r3, r7, r3
   296e6:	781b      	ldrb	r3, [r3, #0]
   296e8:	2202      	movs	r2, #2
   296ea:	4013      	ands	r3, r2
   296ec:	d007      	beq.n	296fe <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   296ee:	69bb      	ldr	r3, [r7, #24]
   296f0:	2232      	movs	r2, #50	; 0x32
   296f2:	211a      	movs	r1, #26
   296f4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   296f6:	697b      	ldr	r3, [r7, #20]
   296f8:	2202      	movs	r2, #2
   296fa:	835a      	strh	r2, [r3, #26]
   296fc:	e036      	b.n	2976c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   296fe:	231f      	movs	r3, #31
   29700:	18fb      	adds	r3, r7, r3
   29702:	781b      	ldrb	r3, [r3, #0]
   29704:	2204      	movs	r2, #4
   29706:	4013      	ands	r3, r2
   29708:	d007      	beq.n	2971a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2970a:	69bb      	ldr	r3, [r7, #24]
   2970c:	2232      	movs	r2, #50	; 0x32
   2970e:	211e      	movs	r1, #30
   29710:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   29712:	697b      	ldr	r3, [r7, #20]
   29714:	2204      	movs	r2, #4
   29716:	835a      	strh	r2, [r3, #26]
   29718:	e028      	b.n	2976c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2971a:	231f      	movs	r3, #31
   2971c:	18fb      	adds	r3, r7, r3
   2971e:	781b      	ldrb	r3, [r3, #0]
   29720:	2201      	movs	r2, #1
   29722:	4013      	ands	r3, r2
   29724:	d007      	beq.n	29736 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   29726:	69bb      	ldr	r3, [r7, #24]
   29728:	2232      	movs	r2, #50	; 0x32
   2972a:	2113      	movs	r1, #19
   2972c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2972e:	697b      	ldr	r3, [r7, #20]
   29730:	2201      	movs	r2, #1
   29732:	835a      	strh	r2, [r3, #26]
   29734:	e01a      	b.n	2976c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   29736:	231f      	movs	r3, #31
   29738:	18fb      	adds	r3, r7, r3
   2973a:	781b      	ldrb	r3, [r3, #0]
   2973c:	2210      	movs	r2, #16
   2973e:	4013      	ands	r3, r2
   29740:	d007      	beq.n	29752 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   29742:	69bb      	ldr	r3, [r7, #24]
   29744:	2232      	movs	r2, #50	; 0x32
   29746:	2142      	movs	r1, #66	; 0x42
   29748:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2974a:	697b      	ldr	r3, [r7, #20]
   2974c:	2210      	movs	r2, #16
   2974e:	835a      	strh	r2, [r3, #26]
   29750:	e00c      	b.n	2976c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   29752:	231f      	movs	r3, #31
   29754:	18fb      	adds	r3, r7, r3
   29756:	781b      	ldrb	r3, [r3, #0]
   29758:	2220      	movs	r2, #32
   2975a:	4013      	ands	r3, r2
   2975c:	d006      	beq.n	2976c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2975e:	69bb      	ldr	r3, [r7, #24]
   29760:	2232      	movs	r2, #50	; 0x32
   29762:	2141      	movs	r1, #65	; 0x41
   29764:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   29766:	697b      	ldr	r3, [r7, #20]
   29768:	2220      	movs	r2, #32
   2976a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2976c:	2310      	movs	r3, #16
   2976e:	18fb      	adds	r3, r7, r3
   29770:	881b      	ldrh	r3, [r3, #0]
   29772:	2204      	movs	r2, #4
   29774:	4013      	ands	r3, r2
				if (callback_status
   29776:	d050      	beq.n	2981a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   29778:	69bb      	ldr	r3, [r7, #24]
   2977a:	695b      	ldr	r3, [r3, #20]
   2977c:	69ba      	ldr	r2, [r7, #24]
   2977e:	0010      	movs	r0, r2
   29780:	4798      	blx	r3
   29782:	e04a      	b.n	2981a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   29784:	697b      	ldr	r3, [r7, #20]
   29786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   29788:	b29a      	uxth	r2, r3
   2978a:	230e      	movs	r3, #14
   2978c:	18fb      	adds	r3, r7, r3
   2978e:	05d2      	lsls	r2, r2, #23
   29790:	0dd2      	lsrs	r2, r2, #23
   29792:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   29794:	69bb      	ldr	r3, [r7, #24]
   29796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29798:	220e      	movs	r2, #14
   2979a:	18ba      	adds	r2, r7, r2
   2979c:	8812      	ldrh	r2, [r2, #0]
   2979e:	b2d2      	uxtb	r2, r2
   297a0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   297a2:	69bb      	ldr	r3, [r7, #24]
   297a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   297a6:	1c5a      	adds	r2, r3, #1
   297a8:	69bb      	ldr	r3, [r7, #24]
   297aa:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   297ac:	69bb      	ldr	r3, [r7, #24]
   297ae:	795b      	ldrb	r3, [r3, #5]
   297b0:	2b01      	cmp	r3, #1
   297b2:	d10d      	bne.n	297d0 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   297b4:	69bb      	ldr	r3, [r7, #24]
   297b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   297b8:	220e      	movs	r2, #14
   297ba:	18ba      	adds	r2, r7, r2
   297bc:	8812      	ldrh	r2, [r2, #0]
   297be:	0a12      	lsrs	r2, r2, #8
   297c0:	b292      	uxth	r2, r2
   297c2:	b2d2      	uxtb	r2, r2
   297c4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   297c6:	69bb      	ldr	r3, [r7, #24]
   297c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   297ca:	1c5a      	adds	r2, r3, #1
   297cc:	69bb      	ldr	r3, [r7, #24]
   297ce:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   297d0:	69bb      	ldr	r3, [r7, #24]
   297d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   297d4:	b29b      	uxth	r3, r3
   297d6:	3b01      	subs	r3, #1
   297d8:	b29b      	uxth	r3, r3
   297da:	69ba      	ldr	r2, [r7, #24]
   297dc:	1c19      	adds	r1, r3, #0
   297de:	8591      	strh	r1, [r2, #44]	; 0x2c
   297e0:	2b00      	cmp	r3, #0
   297e2:	d11a      	bne.n	2981a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   297e4:	697b      	ldr	r3, [r7, #20]
   297e6:	2204      	movs	r2, #4
   297e8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   297ea:	69bb      	ldr	r3, [r7, #24]
   297ec:	2232      	movs	r2, #50	; 0x32
   297ee:	2100      	movs	r1, #0
   297f0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   297f2:	2310      	movs	r3, #16
   297f4:	18fb      	adds	r3, r7, r3
   297f6:	881b      	ldrh	r3, [r3, #0]
   297f8:	2202      	movs	r2, #2
   297fa:	4013      	ands	r3, r2
					if (callback_status
   297fc:	d00d      	beq.n	2981a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   297fe:	69bb      	ldr	r3, [r7, #24]
   29800:	691b      	ldr	r3, [r3, #16]
   29802:	69ba      	ldr	r2, [r7, #24]
   29804:	0010      	movs	r0, r2
   29806:	4798      	blx	r3
   29808:	e007      	b.n	2981a <_usart_interrupt_handler+0x2ae>
   2980a:	46c0      	nop			; (mov r8, r8)
   2980c:	20005c08 	.word	0x20005c08
   29810:	0002934d 	.word	0x0002934d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29814:	697b      	ldr	r3, [r7, #20]
   29816:	2204      	movs	r2, #4
   29818:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2981a:	2312      	movs	r3, #18
   2981c:	18fb      	adds	r3, r7, r3
   2981e:	881b      	ldrh	r3, [r3, #0]
   29820:	2210      	movs	r2, #16
   29822:	4013      	ands	r3, r2
   29824:	d010      	beq.n	29848 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   29826:	697b      	ldr	r3, [r7, #20]
   29828:	2210      	movs	r2, #16
   2982a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2982c:	697b      	ldr	r3, [r7, #20]
   2982e:	2210      	movs	r2, #16
   29830:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   29832:	2310      	movs	r3, #16
   29834:	18fb      	adds	r3, r7, r3
   29836:	881b      	ldrh	r3, [r3, #0]
   29838:	2210      	movs	r2, #16
   2983a:	4013      	ands	r3, r2
   2983c:	d004      	beq.n	29848 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2983e:	69bb      	ldr	r3, [r7, #24]
   29840:	69db      	ldr	r3, [r3, #28]
   29842:	69ba      	ldr	r2, [r7, #24]
   29844:	0010      	movs	r0, r2
   29846:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   29848:	2312      	movs	r3, #18
   2984a:	18fb      	adds	r3, r7, r3
   2984c:	881b      	ldrh	r3, [r3, #0]
   2984e:	2220      	movs	r2, #32
   29850:	4013      	ands	r3, r2
   29852:	d010      	beq.n	29876 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   29854:	697b      	ldr	r3, [r7, #20]
   29856:	2220      	movs	r2, #32
   29858:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2985a:	697b      	ldr	r3, [r7, #20]
   2985c:	2220      	movs	r2, #32
   2985e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   29860:	2310      	movs	r3, #16
   29862:	18fb      	adds	r3, r7, r3
   29864:	881b      	ldrh	r3, [r3, #0]
   29866:	2208      	movs	r2, #8
   29868:	4013      	ands	r3, r2
   2986a:	d004      	beq.n	29876 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2986c:	69bb      	ldr	r3, [r7, #24]
   2986e:	699b      	ldr	r3, [r3, #24]
   29870:	69ba      	ldr	r2, [r7, #24]
   29872:	0010      	movs	r0, r2
   29874:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   29876:	2312      	movs	r3, #18
   29878:	18fb      	adds	r3, r7, r3
   2987a:	881b      	ldrh	r3, [r3, #0]
   2987c:	2208      	movs	r2, #8
   2987e:	4013      	ands	r3, r2
   29880:	d010      	beq.n	298a4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   29882:	697b      	ldr	r3, [r7, #20]
   29884:	2208      	movs	r2, #8
   29886:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   29888:	697b      	ldr	r3, [r7, #20]
   2988a:	2208      	movs	r2, #8
   2988c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2988e:	2310      	movs	r3, #16
   29890:	18fb      	adds	r3, r7, r3
   29892:	881b      	ldrh	r3, [r3, #0]
   29894:	2220      	movs	r2, #32
   29896:	4013      	ands	r3, r2
   29898:	d004      	beq.n	298a4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2989a:	69bb      	ldr	r3, [r7, #24]
   2989c:	6a1b      	ldr	r3, [r3, #32]
   2989e:	69ba      	ldr	r2, [r7, #24]
   298a0:	0010      	movs	r0, r2
   298a2:	4798      	blx	r3
		}
	}
#endif
}
   298a4:	46c0      	nop			; (mov r8, r8)
   298a6:	46bd      	mov	sp, r7
   298a8:	b008      	add	sp, #32
   298aa:	bd80      	pop	{r7, pc}

000298ac <system_gclk_gen_get_config_defaults>:
{
   298ac:	b580      	push	{r7, lr}
   298ae:	b082      	sub	sp, #8
   298b0:	af00      	add	r7, sp, #0
   298b2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   298b4:	687b      	ldr	r3, [r7, #4]
   298b6:	2201      	movs	r2, #1
   298b8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   298ba:	687b      	ldr	r3, [r7, #4]
   298bc:	2200      	movs	r2, #0
   298be:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   298c0:	687b      	ldr	r3, [r7, #4]
   298c2:	2206      	movs	r2, #6
   298c4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   298c6:	687b      	ldr	r3, [r7, #4]
   298c8:	2200      	movs	r2, #0
   298ca:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   298cc:	687b      	ldr	r3, [r7, #4]
   298ce:	2200      	movs	r2, #0
   298d0:	725a      	strb	r2, [r3, #9]
}
   298d2:	46c0      	nop			; (mov r8, r8)
   298d4:	46bd      	mov	sp, r7
   298d6:	b002      	add	sp, #8
   298d8:	bd80      	pop	{r7, pc}

000298da <system_gclk_chan_get_config_defaults>:
{
   298da:	b580      	push	{r7, lr}
   298dc:	b082      	sub	sp, #8
   298de:	af00      	add	r7, sp, #0
   298e0:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   298e2:	687b      	ldr	r3, [r7, #4]
   298e4:	2200      	movs	r2, #0
   298e6:	701a      	strb	r2, [r3, #0]
}
   298e8:	46c0      	nop			; (mov r8, r8)
   298ea:	46bd      	mov	sp, r7
   298ec:	b002      	add	sp, #8
   298ee:	bd80      	pop	{r7, pc}

000298f0 <system_clock_source_osc8m_get_config_defaults>:
{
   298f0:	b580      	push	{r7, lr}
   298f2:	b082      	sub	sp, #8
   298f4:	af00      	add	r7, sp, #0
   298f6:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   298f8:	687b      	ldr	r3, [r7, #4]
   298fa:	2203      	movs	r2, #3
   298fc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   298fe:	687b      	ldr	r3, [r7, #4]
   29900:	2200      	movs	r2, #0
   29902:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   29904:	687b      	ldr	r3, [r7, #4]
   29906:	2201      	movs	r2, #1
   29908:	709a      	strb	r2, [r3, #2]
}
   2990a:	46c0      	nop			; (mov r8, r8)
   2990c:	46bd      	mov	sp, r7
   2990e:	b002      	add	sp, #8
   29910:	bd80      	pop	{r7, pc}
	...

00029914 <system_cpu_clock_set_divider>:
{
   29914:	b580      	push	{r7, lr}
   29916:	b082      	sub	sp, #8
   29918:	af00      	add	r7, sp, #0
   2991a:	0002      	movs	r2, r0
   2991c:	1dfb      	adds	r3, r7, #7
   2991e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   29920:	4a03      	ldr	r2, [pc, #12]	; (29930 <system_cpu_clock_set_divider+0x1c>)
   29922:	1dfb      	adds	r3, r7, #7
   29924:	781b      	ldrb	r3, [r3, #0]
   29926:	7213      	strb	r3, [r2, #8]
}
   29928:	46c0      	nop			; (mov r8, r8)
   2992a:	46bd      	mov	sp, r7
   2992c:	b002      	add	sp, #8
   2992e:	bd80      	pop	{r7, pc}
   29930:	40000400 	.word	0x40000400

00029934 <system_apb_clock_set_divider>:
{
   29934:	b580      	push	{r7, lr}
   29936:	b082      	sub	sp, #8
   29938:	af00      	add	r7, sp, #0
   2993a:	0002      	movs	r2, r0
   2993c:	1dfb      	adds	r3, r7, #7
   2993e:	701a      	strb	r2, [r3, #0]
   29940:	1dbb      	adds	r3, r7, #6
   29942:	1c0a      	adds	r2, r1, #0
   29944:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29946:	1dfb      	adds	r3, r7, #7
   29948:	781b      	ldrb	r3, [r3, #0]
   2994a:	2b01      	cmp	r3, #1
   2994c:	d008      	beq.n	29960 <system_apb_clock_set_divider+0x2c>
   2994e:	2b02      	cmp	r3, #2
   29950:	d00b      	beq.n	2996a <system_apb_clock_set_divider+0x36>
   29952:	2b00      	cmp	r3, #0
   29954:	d10e      	bne.n	29974 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   29956:	4a0b      	ldr	r2, [pc, #44]	; (29984 <system_apb_clock_set_divider+0x50>)
   29958:	1dbb      	adds	r3, r7, #6
   2995a:	781b      	ldrb	r3, [r3, #0]
   2995c:	7253      	strb	r3, [r2, #9]
			break;
   2995e:	e00b      	b.n	29978 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   29960:	4a08      	ldr	r2, [pc, #32]	; (29984 <system_apb_clock_set_divider+0x50>)
   29962:	1dbb      	adds	r3, r7, #6
   29964:	781b      	ldrb	r3, [r3, #0]
   29966:	7293      	strb	r3, [r2, #10]
			break;
   29968:	e006      	b.n	29978 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   2996a:	4a06      	ldr	r2, [pc, #24]	; (29984 <system_apb_clock_set_divider+0x50>)
   2996c:	1dbb      	adds	r3, r7, #6
   2996e:	781b      	ldrb	r3, [r3, #0]
   29970:	72d3      	strb	r3, [r2, #11]
			break;
   29972:	e001      	b.n	29978 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   29974:	2317      	movs	r3, #23
   29976:	e000      	b.n	2997a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   29978:	2300      	movs	r3, #0
}
   2997a:	0018      	movs	r0, r3
   2997c:	46bd      	mov	sp, r7
   2997e:	b002      	add	sp, #8
   29980:	bd80      	pop	{r7, pc}
   29982:	46c0      	nop			; (mov r8, r8)
   29984:	40000400 	.word	0x40000400

00029988 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   29988:	b580      	push	{r7, lr}
   2998a:	b082      	sub	sp, #8
   2998c:	af00      	add	r7, sp, #0
   2998e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   29990:	687b      	ldr	r3, [r7, #4]
   29992:	2201      	movs	r2, #1
   29994:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   29996:	687b      	ldr	r3, [r7, #4]
   29998:	2200      	movs	r2, #0
   2999a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   2999c:	687b      	ldr	r3, [r7, #4]
   2999e:	2200      	movs	r2, #0
   299a0:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   299a2:	687b      	ldr	r3, [r7, #4]
   299a4:	2200      	movs	r2, #0
   299a6:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   299a8:	687b      	ldr	r3, [r7, #4]
   299aa:	2200      	movs	r2, #0
   299ac:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   299ae:	687b      	ldr	r3, [r7, #4]
   299b0:	4a0a      	ldr	r2, [pc, #40]	; (299dc <system_clock_source_dpll_get_config_defaults+0x54>)
   299b2:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   299b4:	687b      	ldr	r3, [r7, #4]
   299b6:	2280      	movs	r2, #128	; 0x80
   299b8:	0212      	lsls	r2, r2, #8
   299ba:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   299bc:	687b      	ldr	r3, [r7, #4]
   299be:	2201      	movs	r2, #1
   299c0:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   299c2:	687b      	ldr	r3, [r7, #4]
   299c4:	2200      	movs	r2, #0
   299c6:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   299c8:	687b      	ldr	r3, [r7, #4]
   299ca:	2200      	movs	r2, #0
   299cc:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   299ce:	687b      	ldr	r3, [r7, #4]
   299d0:	2200      	movs	r2, #0
   299d2:	749a      	strb	r2, [r3, #18]
};
   299d4:	46c0      	nop			; (mov r8, r8)
   299d6:	46bd      	mov	sp, r7
   299d8:	b002      	add	sp, #8
   299da:	bd80      	pop	{r7, pc}
   299dc:	02dc6c00 	.word	0x02dc6c00

000299e0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   299e0:	b580      	push	{r7, lr}
   299e2:	b082      	sub	sp, #8
   299e4:	af00      	add	r7, sp, #0
   299e6:	0002      	movs	r2, r0
   299e8:	1dfb      	adds	r3, r7, #7
   299ea:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   299ec:	4a08      	ldr	r2, [pc, #32]	; (29a10 <system_flash_set_waitstates+0x30>)
   299ee:	1dfb      	adds	r3, r7, #7
   299f0:	781b      	ldrb	r3, [r3, #0]
   299f2:	210f      	movs	r1, #15
   299f4:	400b      	ands	r3, r1
   299f6:	b2d9      	uxtb	r1, r3
   299f8:	6853      	ldr	r3, [r2, #4]
   299fa:	200f      	movs	r0, #15
   299fc:	4001      	ands	r1, r0
   299fe:	0049      	lsls	r1, r1, #1
   29a00:	201e      	movs	r0, #30
   29a02:	4383      	bics	r3, r0
   29a04:	430b      	orrs	r3, r1
   29a06:	6053      	str	r3, [r2, #4]
}
   29a08:	46c0      	nop			; (mov r8, r8)
   29a0a:	46bd      	mov	sp, r7
   29a0c:	b002      	add	sp, #8
   29a0e:	bd80      	pop	{r7, pc}
   29a10:	41004000 	.word	0x41004000

00029a14 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   29a14:	b580      	push	{r7, lr}
   29a16:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   29a18:	46c0      	nop			; (mov r8, r8)
   29a1a:	4b04      	ldr	r3, [pc, #16]	; (29a2c <_system_dfll_wait_for_sync+0x18>)
   29a1c:	68db      	ldr	r3, [r3, #12]
   29a1e:	2210      	movs	r2, #16
   29a20:	4013      	ands	r3, r2
   29a22:	d0fa      	beq.n	29a1a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   29a24:	46c0      	nop			; (mov r8, r8)
   29a26:	46bd      	mov	sp, r7
   29a28:	bd80      	pop	{r7, pc}
   29a2a:	46c0      	nop			; (mov r8, r8)
   29a2c:	40000800 	.word	0x40000800

00029a30 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   29a30:	b580      	push	{r7, lr}
   29a32:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   29a34:	4b0c      	ldr	r3, [pc, #48]	; (29a68 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29a36:	2202      	movs	r2, #2
   29a38:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   29a3a:	4b0c      	ldr	r3, [pc, #48]	; (29a6c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   29a3c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   29a3e:	4a0a      	ldr	r2, [pc, #40]	; (29a68 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29a40:	4b0b      	ldr	r3, [pc, #44]	; (29a70 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29a42:	689b      	ldr	r3, [r3, #8]
   29a44:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   29a46:	4a08      	ldr	r2, [pc, #32]	; (29a68 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29a48:	4b09      	ldr	r3, [pc, #36]	; (29a70 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29a4a:	685b      	ldr	r3, [r3, #4]
   29a4c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   29a4e:	4b06      	ldr	r3, [pc, #24]	; (29a68 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29a50:	2200      	movs	r2, #0
   29a52:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   29a54:	4b05      	ldr	r3, [pc, #20]	; (29a6c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   29a56:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   29a58:	4a03      	ldr	r2, [pc, #12]	; (29a68 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29a5a:	4b05      	ldr	r3, [pc, #20]	; (29a70 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29a5c:	681b      	ldr	r3, [r3, #0]
   29a5e:	b29b      	uxth	r3, r3
   29a60:	8493      	strh	r3, [r2, #36]	; 0x24
}
   29a62:	46c0      	nop			; (mov r8, r8)
   29a64:	46bd      	mov	sp, r7
   29a66:	bd80      	pop	{r7, pc}
   29a68:	40000800 	.word	0x40000800
   29a6c:	00029a15 	.word	0x00029a15
   29a70:	200042dc 	.word	0x200042dc

00029a74 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   29a74:	b580      	push	{r7, lr}
   29a76:	b082      	sub	sp, #8
   29a78:	af00      	add	r7, sp, #0
   29a7a:	0002      	movs	r2, r0
   29a7c:	1dfb      	adds	r3, r7, #7
   29a7e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   29a80:	1dfb      	adds	r3, r7, #7
   29a82:	781b      	ldrb	r3, [r3, #0]
   29a84:	2b08      	cmp	r3, #8
   29a86:	d841      	bhi.n	29b0c <system_clock_source_get_hz+0x98>
   29a88:	009a      	lsls	r2, r3, #2
   29a8a:	4b23      	ldr	r3, [pc, #140]	; (29b18 <system_clock_source_get_hz+0xa4>)
   29a8c:	18d3      	adds	r3, r2, r3
   29a8e:	681b      	ldr	r3, [r3, #0]
   29a90:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   29a92:	4b22      	ldr	r3, [pc, #136]	; (29b1c <system_clock_source_get_hz+0xa8>)
   29a94:	691b      	ldr	r3, [r3, #16]
   29a96:	e03a      	b.n	29b0e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   29a98:	4b21      	ldr	r3, [pc, #132]	; (29b20 <system_clock_source_get_hz+0xac>)
   29a9a:	6a1b      	ldr	r3, [r3, #32]
   29a9c:	059b      	lsls	r3, r3, #22
   29a9e:	0f9b      	lsrs	r3, r3, #30
   29aa0:	b2db      	uxtb	r3, r3
   29aa2:	001a      	movs	r2, r3
   29aa4:	4b1f      	ldr	r3, [pc, #124]	; (29b24 <system_clock_source_get_hz+0xb0>)
   29aa6:	40d3      	lsrs	r3, r2
   29aa8:	e031      	b.n	29b0e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   29aaa:	2380      	movs	r3, #128	; 0x80
   29aac:	021b      	lsls	r3, r3, #8
   29aae:	e02e      	b.n	29b0e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   29ab0:	2380      	movs	r3, #128	; 0x80
   29ab2:	021b      	lsls	r3, r3, #8
   29ab4:	e02b      	b.n	29b0e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   29ab6:	4b19      	ldr	r3, [pc, #100]	; (29b1c <system_clock_source_get_hz+0xa8>)
   29ab8:	695b      	ldr	r3, [r3, #20]
   29aba:	e028      	b.n	29b0e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   29abc:	4b17      	ldr	r3, [pc, #92]	; (29b1c <system_clock_source_get_hz+0xa8>)
   29abe:	681b      	ldr	r3, [r3, #0]
   29ac0:	2202      	movs	r2, #2
   29ac2:	4013      	ands	r3, r2
   29ac4:	d101      	bne.n	29aca <system_clock_source_get_hz+0x56>
			return 0;
   29ac6:	2300      	movs	r3, #0
   29ac8:	e021      	b.n	29b0e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   29aca:	4b17      	ldr	r3, [pc, #92]	; (29b28 <system_clock_source_get_hz+0xb4>)
   29acc:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   29ace:	4b13      	ldr	r3, [pc, #76]	; (29b1c <system_clock_source_get_hz+0xa8>)
   29ad0:	681b      	ldr	r3, [r3, #0]
   29ad2:	2224      	movs	r2, #36	; 0x24
   29ad4:	4013      	ands	r3, r2
   29ad6:	2b04      	cmp	r3, #4
   29ad8:	d109      	bne.n	29aee <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   29ada:	2000      	movs	r0, #0
   29adc:	4b13      	ldr	r3, [pc, #76]	; (29b2c <system_clock_source_get_hz+0xb8>)
   29ade:	4798      	blx	r3
   29ae0:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   29ae2:	4b0e      	ldr	r3, [pc, #56]	; (29b1c <system_clock_source_get_hz+0xa8>)
   29ae4:	689b      	ldr	r3, [r3, #8]
   29ae6:	041b      	lsls	r3, r3, #16
   29ae8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   29aea:	4353      	muls	r3, r2
   29aec:	e00f      	b.n	29b0e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   29aee:	4b10      	ldr	r3, [pc, #64]	; (29b30 <system_clock_source_get_hz+0xbc>)
   29af0:	e00d      	b.n	29b0e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   29af2:	4a0b      	ldr	r2, [pc, #44]	; (29b20 <system_clock_source_get_hz+0xac>)
   29af4:	2350      	movs	r3, #80	; 0x50
   29af6:	5cd3      	ldrb	r3, [r2, r3]
   29af8:	b2db      	uxtb	r3, r3
   29afa:	001a      	movs	r2, r3
   29afc:	2304      	movs	r3, #4
   29afe:	4013      	ands	r3, r2
   29b00:	d101      	bne.n	29b06 <system_clock_source_get_hz+0x92>
			return 0;
   29b02:	2300      	movs	r3, #0
   29b04:	e003      	b.n	29b0e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   29b06:	4b05      	ldr	r3, [pc, #20]	; (29b1c <system_clock_source_get_hz+0xa8>)
   29b08:	68db      	ldr	r3, [r3, #12]
   29b0a:	e000      	b.n	29b0e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   29b0c:	2300      	movs	r3, #0
	}
}
   29b0e:	0018      	movs	r0, r3
   29b10:	46bd      	mov	sp, r7
   29b12:	b002      	add	sp, #8
   29b14:	bd80      	pop	{r7, pc}
   29b16:	46c0      	nop			; (mov r8, r8)
   29b18:	00039d4c 	.word	0x00039d4c
   29b1c:	200042dc 	.word	0x200042dc
   29b20:	40000800 	.word	0x40000800
   29b24:	007a1200 	.word	0x007a1200
   29b28:	00029a15 	.word	0x00029a15
   29b2c:	0002a511 	.word	0x0002a511
   29b30:	02dc6c00 	.word	0x02dc6c00

00029b34 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   29b34:	b580      	push	{r7, lr}
   29b36:	b084      	sub	sp, #16
   29b38:	af00      	add	r7, sp, #0
   29b3a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   29b3c:	4b1a      	ldr	r3, [pc, #104]	; (29ba8 <system_clock_source_osc8m_set_config+0x74>)
   29b3e:	6a1b      	ldr	r3, [r3, #32]
   29b40:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   29b42:	687b      	ldr	r3, [r7, #4]
   29b44:	781b      	ldrb	r3, [r3, #0]
   29b46:	1c1a      	adds	r2, r3, #0
   29b48:	2303      	movs	r3, #3
   29b4a:	4013      	ands	r3, r2
   29b4c:	b2da      	uxtb	r2, r3
   29b4e:	230d      	movs	r3, #13
   29b50:	18fb      	adds	r3, r7, r3
   29b52:	2103      	movs	r1, #3
   29b54:	400a      	ands	r2, r1
   29b56:	0010      	movs	r0, r2
   29b58:	781a      	ldrb	r2, [r3, #0]
   29b5a:	2103      	movs	r1, #3
   29b5c:	438a      	bics	r2, r1
   29b5e:	1c11      	adds	r1, r2, #0
   29b60:	1c02      	adds	r2, r0, #0
   29b62:	430a      	orrs	r2, r1
   29b64:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   29b66:	687b      	ldr	r3, [r7, #4]
   29b68:	789a      	ldrb	r2, [r3, #2]
   29b6a:	230c      	movs	r3, #12
   29b6c:	18fb      	adds	r3, r7, r3
   29b6e:	01d0      	lsls	r0, r2, #7
   29b70:	781a      	ldrb	r2, [r3, #0]
   29b72:	217f      	movs	r1, #127	; 0x7f
   29b74:	400a      	ands	r2, r1
   29b76:	1c11      	adds	r1, r2, #0
   29b78:	1c02      	adds	r2, r0, #0
   29b7a:	430a      	orrs	r2, r1
   29b7c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   29b7e:	687b      	ldr	r3, [r7, #4]
   29b80:	785a      	ldrb	r2, [r3, #1]
   29b82:	230c      	movs	r3, #12
   29b84:	18fb      	adds	r3, r7, r3
   29b86:	2101      	movs	r1, #1
   29b88:	400a      	ands	r2, r1
   29b8a:	0190      	lsls	r0, r2, #6
   29b8c:	781a      	ldrb	r2, [r3, #0]
   29b8e:	2140      	movs	r1, #64	; 0x40
   29b90:	438a      	bics	r2, r1
   29b92:	1c11      	adds	r1, r2, #0
   29b94:	1c02      	adds	r2, r0, #0
   29b96:	430a      	orrs	r2, r1
   29b98:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   29b9a:	4b03      	ldr	r3, [pc, #12]	; (29ba8 <system_clock_source_osc8m_set_config+0x74>)
   29b9c:	68fa      	ldr	r2, [r7, #12]
   29b9e:	621a      	str	r2, [r3, #32]
}
   29ba0:	46c0      	nop			; (mov r8, r8)
   29ba2:	46bd      	mov	sp, r7
   29ba4:	b004      	add	sp, #16
   29ba6:	bd80      	pop	{r7, pc}
   29ba8:	40000800 	.word	0x40000800

00029bac <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   29bac:	b580      	push	{r7, lr}
   29bae:	b086      	sub	sp, #24
   29bb0:	af00      	add	r7, sp, #0
   29bb2:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   29bb4:	687b      	ldr	r3, [r7, #4]
   29bb6:	68db      	ldr	r3, [r3, #12]
   29bb8:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   29bba:	687b      	ldr	r3, [r7, #4]
   29bbc:	7d1b      	ldrb	r3, [r3, #20]
   29bbe:	2b01      	cmp	r3, #1
   29bc0:	d10a      	bne.n	29bd8 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   29bc2:	687b      	ldr	r3, [r7, #4]
   29bc4:	8a1b      	ldrh	r3, [r3, #16]
   29bc6:	3301      	adds	r3, #1
   29bc8:	005b      	lsls	r3, r3, #1
   29bca:	001a      	movs	r2, r3
   29bcc:	4b36      	ldr	r3, [pc, #216]	; (29ca8 <system_clock_source_dpll_set_config+0xfc>)
   29bce:	0011      	movs	r1, r2
   29bd0:	6978      	ldr	r0, [r7, #20]
   29bd2:	4798      	blx	r3
   29bd4:	0003      	movs	r3, r0
   29bd6:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   29bd8:	687b      	ldr	r3, [r7, #4]
   29bda:	689b      	ldr	r3, [r3, #8]
   29bdc:	011a      	lsls	r2, r3, #4
   29bde:	4b32      	ldr	r3, [pc, #200]	; (29ca8 <system_clock_source_dpll_set_config+0xfc>)
   29be0:	6979      	ldr	r1, [r7, #20]
   29be2:	0010      	movs	r0, r2
   29be4:	4798      	blx	r3
   29be6:	0003      	movs	r3, r0
   29be8:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   29bea:	693b      	ldr	r3, [r7, #16]
   29bec:	b2da      	uxtb	r2, r3
   29bee:	230f      	movs	r3, #15
   29bf0:	18fb      	adds	r3, r7, r3
   29bf2:	210f      	movs	r1, #15
   29bf4:	400a      	ands	r2, r1
   29bf6:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   29bf8:	693b      	ldr	r3, [r7, #16]
   29bfa:	091b      	lsrs	r3, r3, #4
   29bfc:	3b01      	subs	r3, #1
   29bfe:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   29c00:	492a      	ldr	r1, [pc, #168]	; (29cac <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   29c02:	687b      	ldr	r3, [r7, #4]
   29c04:	781b      	ldrb	r3, [r3, #0]
   29c06:	01db      	lsls	r3, r3, #7
   29c08:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   29c0a:	687b      	ldr	r3, [r7, #4]
   29c0c:	785b      	ldrb	r3, [r3, #1]
   29c0e:	019b      	lsls	r3, r3, #6
   29c10:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   29c12:	4313      	orrs	r3, r2
   29c14:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   29c16:	2344      	movs	r3, #68	; 0x44
   29c18:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   29c1a:	4b24      	ldr	r3, [pc, #144]	; (29cac <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   29c1c:	220f      	movs	r2, #15
   29c1e:	18ba      	adds	r2, r7, r2
   29c20:	7812      	ldrb	r2, [r2, #0]
   29c22:	0412      	lsls	r2, r2, #16
   29c24:	0011      	movs	r1, r2
   29c26:	22f0      	movs	r2, #240	; 0xf0
   29c28:	0312      	lsls	r2, r2, #12
   29c2a:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   29c2c:	693a      	ldr	r2, [r7, #16]
   29c2e:	0512      	lsls	r2, r2, #20
   29c30:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   29c32:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   29c34:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   29c36:	4b1d      	ldr	r3, [pc, #116]	; (29cac <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   29c38:	687a      	ldr	r2, [r7, #4]
   29c3a:	8a12      	ldrh	r2, [r2, #16]
   29c3c:	0412      	lsls	r2, r2, #16
   29c3e:	0011      	movs	r1, r2
   29c40:	4a1b      	ldr	r2, [pc, #108]	; (29cb0 <system_clock_source_dpll_set_config+0x104>)
   29c42:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   29c44:	687a      	ldr	r2, [r7, #4]
   29c46:	7892      	ldrb	r2, [r2, #2]
   29c48:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   29c4a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   29c4c:	687a      	ldr	r2, [r7, #4]
   29c4e:	7cd2      	ldrb	r2, [r2, #19]
   29c50:	0212      	lsls	r2, r2, #8
   29c52:	0010      	movs	r0, r2
   29c54:	22e0      	movs	r2, #224	; 0xe0
   29c56:	00d2      	lsls	r2, r2, #3
   29c58:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   29c5a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   29c5c:	687a      	ldr	r2, [r7, #4]
   29c5e:	7d12      	ldrb	r2, [r2, #20]
   29c60:	0112      	lsls	r2, r2, #4
   29c62:	0010      	movs	r0, r2
   29c64:	2230      	movs	r2, #48	; 0x30
   29c66:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   29c68:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   29c6a:	687a      	ldr	r2, [r7, #4]
   29c6c:	78d2      	ldrb	r2, [r2, #3]
   29c6e:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   29c70:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29c72:	687a      	ldr	r2, [r7, #4]
   29c74:	7912      	ldrb	r2, [r2, #4]
   29c76:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   29c78:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   29c7a:	687a      	ldr	r2, [r7, #4]
   29c7c:	7c92      	ldrb	r2, [r2, #18]
   29c7e:	0010      	movs	r0, r2
   29c80:	2203      	movs	r2, #3
   29c82:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29c84:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   29c86:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   29c88:	693b      	ldr	r3, [r7, #16]
   29c8a:	3301      	adds	r3, #1
   29c8c:	011a      	lsls	r2, r3, #4
   29c8e:	230f      	movs	r3, #15
   29c90:	18fb      	adds	r3, r7, r3
   29c92:	781b      	ldrb	r3, [r3, #0]
   29c94:	18d3      	adds	r3, r2, r3
   29c96:	697a      	ldr	r2, [r7, #20]
   29c98:	4353      	muls	r3, r2
   29c9a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   29c9c:	4b05      	ldr	r3, [pc, #20]	; (29cb4 <system_clock_source_dpll_set_config+0x108>)
   29c9e:	60da      	str	r2, [r3, #12]
}
   29ca0:	46c0      	nop			; (mov r8, r8)
   29ca2:	46bd      	mov	sp, r7
   29ca4:	b006      	add	sp, #24
   29ca6:	bd80      	pop	{r7, pc}
   29ca8:	00032f89 	.word	0x00032f89
   29cac:	40000800 	.word	0x40000800
   29cb0:	07ff0000 	.word	0x07ff0000
   29cb4:	200042dc 	.word	0x200042dc

00029cb8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   29cb8:	b580      	push	{r7, lr}
   29cba:	b082      	sub	sp, #8
   29cbc:	af00      	add	r7, sp, #0
   29cbe:	0002      	movs	r2, r0
   29cc0:	1dfb      	adds	r3, r7, #7
   29cc2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   29cc4:	1dfb      	adds	r3, r7, #7
   29cc6:	781b      	ldrb	r3, [r3, #0]
   29cc8:	2b08      	cmp	r3, #8
   29cca:	d83b      	bhi.n	29d44 <system_clock_source_enable+0x8c>
   29ccc:	009a      	lsls	r2, r3, #2
   29cce:	4b21      	ldr	r3, [pc, #132]	; (29d54 <system_clock_source_enable+0x9c>)
   29cd0:	18d3      	adds	r3, r2, r3
   29cd2:	681b      	ldr	r3, [r3, #0]
   29cd4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   29cd6:	4b20      	ldr	r3, [pc, #128]	; (29d58 <system_clock_source_enable+0xa0>)
   29cd8:	4a1f      	ldr	r2, [pc, #124]	; (29d58 <system_clock_source_enable+0xa0>)
   29cda:	6a12      	ldr	r2, [r2, #32]
   29cdc:	2102      	movs	r1, #2
   29cde:	430a      	orrs	r2, r1
   29ce0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   29ce2:	2300      	movs	r3, #0
   29ce4:	e031      	b.n	29d4a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   29ce6:	4b1c      	ldr	r3, [pc, #112]	; (29d58 <system_clock_source_enable+0xa0>)
   29ce8:	4a1b      	ldr	r2, [pc, #108]	; (29d58 <system_clock_source_enable+0xa0>)
   29cea:	6992      	ldr	r2, [r2, #24]
   29cec:	2102      	movs	r1, #2
   29cee:	430a      	orrs	r2, r1
   29cf0:	619a      	str	r2, [r3, #24]
		break;
   29cf2:	e029      	b.n	29d48 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   29cf4:	4a18      	ldr	r2, [pc, #96]	; (29d58 <system_clock_source_enable+0xa0>)
   29cf6:	4b18      	ldr	r3, [pc, #96]	; (29d58 <system_clock_source_enable+0xa0>)
   29cf8:	8a1b      	ldrh	r3, [r3, #16]
   29cfa:	b29b      	uxth	r3, r3
   29cfc:	2102      	movs	r1, #2
   29cfe:	430b      	orrs	r3, r1
   29d00:	b29b      	uxth	r3, r3
   29d02:	8213      	strh	r3, [r2, #16]
		break;
   29d04:	e020      	b.n	29d48 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   29d06:	4a14      	ldr	r2, [pc, #80]	; (29d58 <system_clock_source_enable+0xa0>)
   29d08:	4b13      	ldr	r3, [pc, #76]	; (29d58 <system_clock_source_enable+0xa0>)
   29d0a:	8a9b      	ldrh	r3, [r3, #20]
   29d0c:	b29b      	uxth	r3, r3
   29d0e:	2102      	movs	r1, #2
   29d10:	430b      	orrs	r3, r1
   29d12:	b29b      	uxth	r3, r3
   29d14:	8293      	strh	r3, [r2, #20]
		break;
   29d16:	e017      	b.n	29d48 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   29d18:	4b10      	ldr	r3, [pc, #64]	; (29d5c <system_clock_source_enable+0xa4>)
   29d1a:	681b      	ldr	r3, [r3, #0]
   29d1c:	2202      	movs	r2, #2
   29d1e:	431a      	orrs	r2, r3
   29d20:	4b0e      	ldr	r3, [pc, #56]	; (29d5c <system_clock_source_enable+0xa4>)
   29d22:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   29d24:	4b0e      	ldr	r3, [pc, #56]	; (29d60 <system_clock_source_enable+0xa8>)
   29d26:	4798      	blx	r3
		break;
   29d28:	e00e      	b.n	29d48 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   29d2a:	4a0b      	ldr	r2, [pc, #44]	; (29d58 <system_clock_source_enable+0xa0>)
   29d2c:	490a      	ldr	r1, [pc, #40]	; (29d58 <system_clock_source_enable+0xa0>)
   29d2e:	2344      	movs	r3, #68	; 0x44
   29d30:	5ccb      	ldrb	r3, [r1, r3]
   29d32:	b2db      	uxtb	r3, r3
   29d34:	2102      	movs	r1, #2
   29d36:	430b      	orrs	r3, r1
   29d38:	b2d9      	uxtb	r1, r3
   29d3a:	2344      	movs	r3, #68	; 0x44
   29d3c:	54d1      	strb	r1, [r2, r3]
		break;
   29d3e:	e003      	b.n	29d48 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   29d40:	2300      	movs	r3, #0
   29d42:	e002      	b.n	29d4a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   29d44:	2317      	movs	r3, #23
   29d46:	e000      	b.n	29d4a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   29d48:	2300      	movs	r3, #0
}
   29d4a:	0018      	movs	r0, r3
   29d4c:	46bd      	mov	sp, r7
   29d4e:	b002      	add	sp, #8
   29d50:	bd80      	pop	{r7, pc}
   29d52:	46c0      	nop			; (mov r8, r8)
   29d54:	00039d70 	.word	0x00039d70
   29d58:	40000800 	.word	0x40000800
   29d5c:	200042dc 	.word	0x200042dc
   29d60:	00029a31 	.word	0x00029a31

00029d64 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   29d64:	b580      	push	{r7, lr}
   29d66:	b084      	sub	sp, #16
   29d68:	af00      	add	r7, sp, #0
   29d6a:	0002      	movs	r2, r0
   29d6c:	1dfb      	adds	r3, r7, #7
   29d6e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   29d70:	2300      	movs	r3, #0
   29d72:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   29d74:	1dfb      	adds	r3, r7, #7
   29d76:	781b      	ldrb	r3, [r3, #0]
   29d78:	2b08      	cmp	r3, #8
   29d7a:	d821      	bhi.n	29dc0 <system_clock_source_is_ready+0x5c>
   29d7c:	009a      	lsls	r2, r3, #2
   29d7e:	4b18      	ldr	r3, [pc, #96]	; (29de0 <system_clock_source_is_ready+0x7c>)
   29d80:	18d3      	adds	r3, r2, r3
   29d82:	681b      	ldr	r3, [r3, #0]
   29d84:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   29d86:	2308      	movs	r3, #8
   29d88:	60fb      	str	r3, [r7, #12]
		break;
   29d8a:	e01b      	b.n	29dc4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   29d8c:	2304      	movs	r3, #4
   29d8e:	60fb      	str	r3, [r7, #12]
		break;
   29d90:	e018      	b.n	29dc4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   29d92:	2301      	movs	r3, #1
   29d94:	60fb      	str	r3, [r7, #12]
		break;
   29d96:	e015      	b.n	29dc4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   29d98:	2302      	movs	r3, #2
   29d9a:	60fb      	str	r3, [r7, #12]
		break;
   29d9c:	e012      	b.n	29dc4 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   29d9e:	2310      	movs	r3, #16
   29da0:	60fb      	str	r3, [r7, #12]
		}
		break;
   29da2:	e00f      	b.n	29dc4 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   29da4:	4a0f      	ldr	r2, [pc, #60]	; (29de4 <system_clock_source_is_ready+0x80>)
   29da6:	2350      	movs	r3, #80	; 0x50
   29da8:	5cd3      	ldrb	r3, [r2, r3]
   29daa:	b2db      	uxtb	r3, r3
   29dac:	001a      	movs	r2, r3
   29dae:	2303      	movs	r3, #3
   29db0:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   29db2:	3b03      	subs	r3, #3
   29db4:	425a      	negs	r2, r3
   29db6:	4153      	adcs	r3, r2
   29db8:	b2db      	uxtb	r3, r3
   29dba:	e00c      	b.n	29dd6 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   29dbc:	2301      	movs	r3, #1
   29dbe:	e00a      	b.n	29dd6 <system_clock_source_is_ready+0x72>

	default:
		return false;
   29dc0:	2300      	movs	r3, #0
   29dc2:	e008      	b.n	29dd6 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   29dc4:	4b07      	ldr	r3, [pc, #28]	; (29de4 <system_clock_source_is_ready+0x80>)
   29dc6:	68db      	ldr	r3, [r3, #12]
   29dc8:	68fa      	ldr	r2, [r7, #12]
   29dca:	401a      	ands	r2, r3
   29dcc:	68fb      	ldr	r3, [r7, #12]
   29dce:	1ad3      	subs	r3, r2, r3
   29dd0:	425a      	negs	r2, r3
   29dd2:	4153      	adcs	r3, r2
   29dd4:	b2db      	uxtb	r3, r3
}
   29dd6:	0018      	movs	r0, r3
   29dd8:	46bd      	mov	sp, r7
   29dda:	b004      	add	sp, #16
   29ddc:	bd80      	pop	{r7, pc}
   29dde:	46c0      	nop			; (mov r8, r8)
   29de0:	00039d94 	.word	0x00039d94
   29de4:	40000800 	.word	0x40000800

00029de8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   29de8:	b580      	push	{r7, lr}
   29dea:	b082      	sub	sp, #8
   29dec:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   29dee:	003b      	movs	r3, r7
   29df0:	2203      	movs	r2, #3
   29df2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29df4:	2300      	movs	r3, #0
   29df6:	607b      	str	r3, [r7, #4]
   29df8:	e009      	b.n	29e0e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   29dfa:	687b      	ldr	r3, [r7, #4]
   29dfc:	b2db      	uxtb	r3, r3
   29dfe:	003a      	movs	r2, r7
   29e00:	0011      	movs	r1, r2
   29e02:	0018      	movs	r0, r3
   29e04:	4b05      	ldr	r3, [pc, #20]	; (29e1c <_switch_peripheral_gclk+0x34>)
   29e06:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29e08:	687b      	ldr	r3, [r7, #4]
   29e0a:	3301      	adds	r3, #1
   29e0c:	607b      	str	r3, [r7, #4]
   29e0e:	687b      	ldr	r3, [r7, #4]
   29e10:	2b24      	cmp	r3, #36	; 0x24
   29e12:	d9f2      	bls.n	29dfa <_switch_peripheral_gclk+0x12>
	}
}
   29e14:	46c0      	nop			; (mov r8, r8)
   29e16:	46bd      	mov	sp, r7
   29e18:	b002      	add	sp, #8
   29e1a:	bd80      	pop	{r7, pc}
   29e1c:	0002a3ed 	.word	0x0002a3ed

00029e20 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   29e20:	b580      	push	{r7, lr}
   29e22:	b0a6      	sub	sp, #152	; 0x98
   29e24:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   29e26:	4b92      	ldr	r3, [pc, #584]	; (2a070 <system_clock_init+0x250>)
   29e28:	22c2      	movs	r2, #194	; 0xc2
   29e2a:	00d2      	lsls	r2, r2, #3
   29e2c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   29e2e:	2003      	movs	r0, #3
   29e30:	4b90      	ldr	r3, [pc, #576]	; (2a074 <system_clock_init+0x254>)
   29e32:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   29e34:	4b90      	ldr	r3, [pc, #576]	; (2a078 <system_clock_init+0x258>)
   29e36:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   29e38:	2394      	movs	r3, #148	; 0x94
   29e3a:	18fb      	adds	r3, r7, r3
   29e3c:	0018      	movs	r0, r3
   29e3e:	4b8f      	ldr	r3, [pc, #572]	; (2a07c <system_clock_init+0x25c>)
   29e40:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   29e42:	2394      	movs	r3, #148	; 0x94
   29e44:	18fb      	adds	r3, r7, r3
   29e46:	2200      	movs	r2, #0
   29e48:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   29e4a:	2394      	movs	r3, #148	; 0x94
   29e4c:	18fb      	adds	r3, r7, r3
   29e4e:	2201      	movs	r2, #1
   29e50:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   29e52:	2394      	movs	r3, #148	; 0x94
   29e54:	18fb      	adds	r3, r7, r3
   29e56:	2200      	movs	r2, #0
   29e58:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   29e5a:	2394      	movs	r3, #148	; 0x94
   29e5c:	18fb      	adds	r3, r7, r3
   29e5e:	0018      	movs	r0, r3
   29e60:	4b87      	ldr	r3, [pc, #540]	; (2a080 <system_clock_init+0x260>)
   29e62:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   29e64:	2006      	movs	r0, #6
   29e66:	4b87      	ldr	r3, [pc, #540]	; (2a084 <system_clock_init+0x264>)
   29e68:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   29e6a:	4b87      	ldr	r3, [pc, #540]	; (2a088 <system_clock_init+0x268>)
   29e6c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   29e6e:	2360      	movs	r3, #96	; 0x60
   29e70:	18fb      	adds	r3, r7, r3
   29e72:	0018      	movs	r0, r3
   29e74:	4b85      	ldr	r3, [pc, #532]	; (2a08c <system_clock_init+0x26c>)
   29e76:	4798      	blx	r3
   29e78:	2360      	movs	r3, #96	; 0x60
   29e7a:	18fb      	adds	r3, r7, r3
   29e7c:	2206      	movs	r2, #6
   29e7e:	701a      	strb	r2, [r3, #0]
   29e80:	2360      	movs	r3, #96	; 0x60
   29e82:	18fb      	adds	r3, r7, r3
   29e84:	2208      	movs	r2, #8
   29e86:	605a      	str	r2, [r3, #4]
   29e88:	2360      	movs	r3, #96	; 0x60
   29e8a:	18fb      	adds	r3, r7, r3
   29e8c:	2200      	movs	r2, #0
   29e8e:	721a      	strb	r2, [r3, #8]
   29e90:	2360      	movs	r3, #96	; 0x60
   29e92:	18fb      	adds	r3, r7, r3
   29e94:	2200      	movs	r2, #0
   29e96:	725a      	strb	r2, [r3, #9]
   29e98:	2360      	movs	r3, #96	; 0x60
   29e9a:	18fb      	adds	r3, r7, r3
   29e9c:	0019      	movs	r1, r3
   29e9e:	2001      	movs	r0, #1
   29ea0:	4b7b      	ldr	r3, [pc, #492]	; (2a090 <system_clock_init+0x270>)
   29ea2:	4798      	blx	r3
   29ea4:	2001      	movs	r0, #1
   29ea6:	4b7b      	ldr	r3, [pc, #492]	; (2a094 <system_clock_init+0x274>)
   29ea8:	4798      	blx	r3
   29eaa:	2354      	movs	r3, #84	; 0x54
   29eac:	18fb      	adds	r3, r7, r3
   29eae:	0018      	movs	r0, r3
   29eb0:	4b76      	ldr	r3, [pc, #472]	; (2a08c <system_clock_init+0x26c>)
   29eb2:	4798      	blx	r3
   29eb4:	2354      	movs	r3, #84	; 0x54
   29eb6:	18fb      	adds	r3, r7, r3
   29eb8:	2203      	movs	r2, #3
   29eba:	701a      	strb	r2, [r3, #0]
   29ebc:	2354      	movs	r3, #84	; 0x54
   29ebe:	18fb      	adds	r3, r7, r3
   29ec0:	2201      	movs	r2, #1
   29ec2:	605a      	str	r2, [r3, #4]
   29ec4:	2354      	movs	r3, #84	; 0x54
   29ec6:	18fb      	adds	r3, r7, r3
   29ec8:	2201      	movs	r2, #1
   29eca:	721a      	strb	r2, [r3, #8]
   29ecc:	2354      	movs	r3, #84	; 0x54
   29ece:	18fb      	adds	r3, r7, r3
   29ed0:	2200      	movs	r2, #0
   29ed2:	725a      	strb	r2, [r3, #9]
   29ed4:	2354      	movs	r3, #84	; 0x54
   29ed6:	18fb      	adds	r3, r7, r3
   29ed8:	0019      	movs	r1, r3
   29eda:	2002      	movs	r0, #2
   29edc:	4b6c      	ldr	r3, [pc, #432]	; (2a090 <system_clock_init+0x270>)
   29ede:	4798      	blx	r3
   29ee0:	2002      	movs	r0, #2
   29ee2:	4b6c      	ldr	r3, [pc, #432]	; (2a094 <system_clock_init+0x274>)
   29ee4:	4798      	blx	r3
   29ee6:	233c      	movs	r3, #60	; 0x3c
   29ee8:	18fb      	adds	r3, r7, r3
   29eea:	0018      	movs	r0, r3
   29eec:	4b67      	ldr	r3, [pc, #412]	; (2a08c <system_clock_init+0x26c>)
   29eee:	4798      	blx	r3
   29ef0:	233c      	movs	r3, #60	; 0x3c
   29ef2:	18fb      	adds	r3, r7, r3
   29ef4:	2203      	movs	r2, #3
   29ef6:	701a      	strb	r2, [r3, #0]
   29ef8:	233c      	movs	r3, #60	; 0x3c
   29efa:	18fb      	adds	r3, r7, r3
   29efc:	2220      	movs	r2, #32
   29efe:	605a      	str	r2, [r3, #4]
   29f00:	233c      	movs	r3, #60	; 0x3c
   29f02:	18fb      	adds	r3, r7, r3
   29f04:	2200      	movs	r2, #0
   29f06:	721a      	strb	r2, [r3, #8]
   29f08:	233c      	movs	r3, #60	; 0x3c
   29f0a:	18fb      	adds	r3, r7, r3
   29f0c:	2200      	movs	r2, #0
   29f0e:	725a      	strb	r2, [r3, #9]
   29f10:	233c      	movs	r3, #60	; 0x3c
   29f12:	18fb      	adds	r3, r7, r3
   29f14:	0019      	movs	r1, r3
   29f16:	2004      	movs	r0, #4
   29f18:	4b5d      	ldr	r3, [pc, #372]	; (2a090 <system_clock_init+0x270>)
   29f1a:	4798      	blx	r3
   29f1c:	2004      	movs	r0, #4
   29f1e:	4b5d      	ldr	r3, [pc, #372]	; (2a094 <system_clock_init+0x274>)
   29f20:	4798      	blx	r3
   29f22:	2330      	movs	r3, #48	; 0x30
   29f24:	18fb      	adds	r3, r7, r3
   29f26:	0018      	movs	r0, r3
   29f28:	4b58      	ldr	r3, [pc, #352]	; (2a08c <system_clock_init+0x26c>)
   29f2a:	4798      	blx	r3
   29f2c:	2330      	movs	r3, #48	; 0x30
   29f2e:	18fb      	adds	r3, r7, r3
   29f30:	2206      	movs	r2, #6
   29f32:	701a      	strb	r2, [r3, #0]
   29f34:	2330      	movs	r3, #48	; 0x30
   29f36:	18fb      	adds	r3, r7, r3
   29f38:	2201      	movs	r2, #1
   29f3a:	605a      	str	r2, [r3, #4]
   29f3c:	2330      	movs	r3, #48	; 0x30
   29f3e:	18fb      	adds	r3, r7, r3
   29f40:	2200      	movs	r2, #0
   29f42:	721a      	strb	r2, [r3, #8]
   29f44:	2330      	movs	r3, #48	; 0x30
   29f46:	18fb      	adds	r3, r7, r3
   29f48:	2200      	movs	r2, #0
   29f4a:	725a      	strb	r2, [r3, #9]
   29f4c:	2330      	movs	r3, #48	; 0x30
   29f4e:	18fb      	adds	r3, r7, r3
   29f50:	0019      	movs	r1, r3
   29f52:	2005      	movs	r0, #5
   29f54:	4b4e      	ldr	r3, [pc, #312]	; (2a090 <system_clock_init+0x270>)
   29f56:	4798      	blx	r3
   29f58:	2005      	movs	r0, #5
   29f5a:	4b4e      	ldr	r3, [pc, #312]	; (2a094 <system_clock_init+0x274>)
   29f5c:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   29f5e:	2390      	movs	r3, #144	; 0x90
   29f60:	18fb      	adds	r3, r7, r3
   29f62:	0018      	movs	r0, r3
   29f64:	4b4c      	ldr	r3, [pc, #304]	; (2a098 <system_clock_init+0x278>)
   29f66:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   29f68:	2390      	movs	r3, #144	; 0x90
   29f6a:	18fb      	adds	r3, r7, r3
   29f6c:	2201      	movs	r2, #1
   29f6e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   29f70:	2390      	movs	r3, #144	; 0x90
   29f72:	18fb      	adds	r3, r7, r3
   29f74:	0019      	movs	r1, r3
   29f76:	2001      	movs	r0, #1
   29f78:	4b48      	ldr	r3, [pc, #288]	; (2a09c <system_clock_init+0x27c>)
   29f7a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   29f7c:	2001      	movs	r0, #1
   29f7e:	4b48      	ldr	r3, [pc, #288]	; (2a0a0 <system_clock_init+0x280>)
   29f80:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   29f82:	2378      	movs	r3, #120	; 0x78
   29f84:	18fb      	adds	r3, r7, r3
   29f86:	0018      	movs	r0, r3
   29f88:	4b46      	ldr	r3, [pc, #280]	; (2a0a4 <system_clock_init+0x284>)
   29f8a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   29f8c:	2378      	movs	r3, #120	; 0x78
   29f8e:	18fb      	adds	r3, r7, r3
   29f90:	2200      	movs	r2, #0
   29f92:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   29f94:	2378      	movs	r3, #120	; 0x78
   29f96:	18fb      	adds	r3, r7, r3
   29f98:	2200      	movs	r2, #0
   29f9a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   29f9c:	2378      	movs	r3, #120	; 0x78
   29f9e:	18fb      	adds	r3, r7, r3
   29fa0:	2200      	movs	r2, #0
   29fa2:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   29fa4:	2378      	movs	r3, #120	; 0x78
   29fa6:	18fb      	adds	r3, r7, r3
   29fa8:	2200      	movs	r2, #0
   29faa:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   29fac:	2378      	movs	r3, #120	; 0x78
   29fae:	18fb      	adds	r3, r7, r3
   29fb0:	2200      	movs	r2, #0
   29fb2:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   29fb4:	2378      	movs	r3, #120	; 0x78
   29fb6:	18fb      	adds	r3, r7, r3
   29fb8:	2200      	movs	r2, #0
   29fba:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   29fbc:	2378      	movs	r3, #120	; 0x78
   29fbe:	18fb      	adds	r3, r7, r3
   29fc0:	2200      	movs	r2, #0
   29fc2:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   29fc4:	2378      	movs	r3, #120	; 0x78
   29fc6:	18fb      	adds	r3, r7, r3
   29fc8:	2202      	movs	r2, #2
   29fca:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   29fcc:	2378      	movs	r3, #120	; 0x78
   29fce:	18fb      	adds	r3, r7, r3
   29fd0:	4a35      	ldr	r2, [pc, #212]	; (2a0a8 <system_clock_init+0x288>)
   29fd2:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   29fd4:	2378      	movs	r3, #120	; 0x78
   29fd6:	18fb      	adds	r3, r7, r3
   29fd8:	2201      	movs	r2, #1
   29fda:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   29fdc:	2378      	movs	r3, #120	; 0x78
   29fde:	18fb      	adds	r3, r7, r3
   29fe0:	4a32      	ldr	r2, [pc, #200]	; (2a0ac <system_clock_init+0x28c>)
   29fe2:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   29fe4:	2378      	movs	r3, #120	; 0x78
   29fe6:	18fb      	adds	r3, r7, r3
   29fe8:	0018      	movs	r0, r3
   29fea:	4b31      	ldr	r3, [pc, #196]	; (2a0b0 <system_clock_init+0x290>)
   29fec:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   29fee:	2008      	movs	r0, #8
   29ff0:	4b24      	ldr	r3, [pc, #144]	; (2a084 <system_clock_init+0x264>)
   29ff2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   29ff4:	46c0      	nop			; (mov r8, r8)
   29ff6:	2008      	movs	r0, #8
   29ff8:	4b2e      	ldr	r3, [pc, #184]	; (2a0b4 <system_clock_init+0x294>)
   29ffa:	4798      	blx	r3
   29ffc:	0003      	movs	r3, r0
   29ffe:	001a      	movs	r2, r3
   2a000:	2301      	movs	r3, #1
   2a002:	4053      	eors	r3, r2
   2a004:	b2db      	uxtb	r3, r3
   2a006:	2b00      	cmp	r3, #0
   2a008:	d1f5      	bne.n	29ff6 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2a00a:	4919      	ldr	r1, [pc, #100]	; (2a070 <system_clock_init+0x250>)
   2a00c:	2244      	movs	r2, #68	; 0x44
   2a00e:	5c8b      	ldrb	r3, [r1, r2]
   2a010:	2080      	movs	r0, #128	; 0x80
   2a012:	4240      	negs	r0, r0
   2a014:	4303      	orrs	r3, r0
   2a016:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2a018:	2000      	movs	r0, #0
   2a01a:	4b27      	ldr	r3, [pc, #156]	; (2a0b8 <system_clock_init+0x298>)
   2a01c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2a01e:	2100      	movs	r1, #0
   2a020:	2000      	movs	r0, #0
   2a022:	4b26      	ldr	r3, [pc, #152]	; (2a0bc <system_clock_init+0x29c>)
   2a024:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2a026:	2100      	movs	r1, #0
   2a028:	2001      	movs	r0, #1
   2a02a:	4b24      	ldr	r3, [pc, #144]	; (2a0bc <system_clock_init+0x29c>)
   2a02c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2a02e:	2100      	movs	r1, #0
   2a030:	2002      	movs	r0, #2
   2a032:	4b22      	ldr	r3, [pc, #136]	; (2a0bc <system_clock_init+0x29c>)
   2a034:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2a036:	003b      	movs	r3, r7
   2a038:	0018      	movs	r0, r3
   2a03a:	4b14      	ldr	r3, [pc, #80]	; (2a08c <system_clock_init+0x26c>)
   2a03c:	4798      	blx	r3
   2a03e:	003b      	movs	r3, r7
   2a040:	2208      	movs	r2, #8
   2a042:	701a      	strb	r2, [r3, #0]
   2a044:	003b      	movs	r3, r7
   2a046:	2201      	movs	r2, #1
   2a048:	605a      	str	r2, [r3, #4]
   2a04a:	003b      	movs	r3, r7
   2a04c:	2200      	movs	r2, #0
   2a04e:	721a      	strb	r2, [r3, #8]
   2a050:	003b      	movs	r3, r7
   2a052:	2201      	movs	r2, #1
   2a054:	725a      	strb	r2, [r3, #9]
   2a056:	003b      	movs	r3, r7
   2a058:	0019      	movs	r1, r3
   2a05a:	2000      	movs	r0, #0
   2a05c:	4b0c      	ldr	r3, [pc, #48]	; (2a090 <system_clock_init+0x270>)
   2a05e:	4798      	blx	r3
   2a060:	2000      	movs	r0, #0
   2a062:	4b0c      	ldr	r3, [pc, #48]	; (2a094 <system_clock_init+0x274>)
   2a064:	4798      	blx	r3
#endif
}
   2a066:	46c0      	nop			; (mov r8, r8)
   2a068:	46bd      	mov	sp, r7
   2a06a:	b026      	add	sp, #152	; 0x98
   2a06c:	bd80      	pop	{r7, pc}
   2a06e:	46c0      	nop			; (mov r8, r8)
   2a070:	40000800 	.word	0x40000800
   2a074:	000299e1 	.word	0x000299e1
   2a078:	00029de9 	.word	0x00029de9
   2a07c:	000298f1 	.word	0x000298f1
   2a080:	00029b35 	.word	0x00029b35
   2a084:	00029cb9 	.word	0x00029cb9
   2a088:	0002a165 	.word	0x0002a165
   2a08c:	000298ad 	.word	0x000298ad
   2a090:	0002a195 	.word	0x0002a195
   2a094:	0002a2b9 	.word	0x0002a2b9
   2a098:	000298db 	.word	0x000298db
   2a09c:	0002a3ed 	.word	0x0002a3ed
   2a0a0:	0002a431 	.word	0x0002a431
   2a0a4:	00029989 	.word	0x00029989
   2a0a8:	000f4240 	.word	0x000f4240
   2a0ac:	02dc6c00 	.word	0x02dc6c00
   2a0b0:	00029bad 	.word	0x00029bad
   2a0b4:	00029d65 	.word	0x00029d65
   2a0b8:	00029915 	.word	0x00029915
   2a0bc:	00029935 	.word	0x00029935

0002a0c0 <system_apb_clock_set_mask>:
{
   2a0c0:	b580      	push	{r7, lr}
   2a0c2:	b082      	sub	sp, #8
   2a0c4:	af00      	add	r7, sp, #0
   2a0c6:	0002      	movs	r2, r0
   2a0c8:	6039      	str	r1, [r7, #0]
   2a0ca:	1dfb      	adds	r3, r7, #7
   2a0cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a0ce:	1dfb      	adds	r3, r7, #7
   2a0d0:	781b      	ldrb	r3, [r3, #0]
   2a0d2:	2b01      	cmp	r3, #1
   2a0d4:	d00a      	beq.n	2a0ec <system_apb_clock_set_mask+0x2c>
   2a0d6:	2b02      	cmp	r3, #2
   2a0d8:	d00f      	beq.n	2a0fa <system_apb_clock_set_mask+0x3a>
   2a0da:	2b00      	cmp	r3, #0
   2a0dc:	d114      	bne.n	2a108 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a0de:	4b0e      	ldr	r3, [pc, #56]	; (2a118 <system_apb_clock_set_mask+0x58>)
   2a0e0:	4a0d      	ldr	r2, [pc, #52]	; (2a118 <system_apb_clock_set_mask+0x58>)
   2a0e2:	6991      	ldr	r1, [r2, #24]
   2a0e4:	683a      	ldr	r2, [r7, #0]
   2a0e6:	430a      	orrs	r2, r1
   2a0e8:	619a      	str	r2, [r3, #24]
			break;
   2a0ea:	e00f      	b.n	2a10c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a0ec:	4b0a      	ldr	r3, [pc, #40]	; (2a118 <system_apb_clock_set_mask+0x58>)
   2a0ee:	4a0a      	ldr	r2, [pc, #40]	; (2a118 <system_apb_clock_set_mask+0x58>)
   2a0f0:	69d1      	ldr	r1, [r2, #28]
   2a0f2:	683a      	ldr	r2, [r7, #0]
   2a0f4:	430a      	orrs	r2, r1
   2a0f6:	61da      	str	r2, [r3, #28]
			break;
   2a0f8:	e008      	b.n	2a10c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a0fa:	4b07      	ldr	r3, [pc, #28]	; (2a118 <system_apb_clock_set_mask+0x58>)
   2a0fc:	4a06      	ldr	r2, [pc, #24]	; (2a118 <system_apb_clock_set_mask+0x58>)
   2a0fe:	6a11      	ldr	r1, [r2, #32]
   2a100:	683a      	ldr	r2, [r7, #0]
   2a102:	430a      	orrs	r2, r1
   2a104:	621a      	str	r2, [r3, #32]
			break;
   2a106:	e001      	b.n	2a10c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a108:	2317      	movs	r3, #23
   2a10a:	e000      	b.n	2a10e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a10c:	2300      	movs	r3, #0
}
   2a10e:	0018      	movs	r0, r3
   2a110:	46bd      	mov	sp, r7
   2a112:	b002      	add	sp, #8
   2a114:	bd80      	pop	{r7, pc}
   2a116:	46c0      	nop			; (mov r8, r8)
   2a118:	40000400 	.word	0x40000400

0002a11c <system_interrupt_enter_critical_section>:
{
   2a11c:	b580      	push	{r7, lr}
   2a11e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2a120:	4b02      	ldr	r3, [pc, #8]	; (2a12c <system_interrupt_enter_critical_section+0x10>)
   2a122:	4798      	blx	r3
}
   2a124:	46c0      	nop			; (mov r8, r8)
   2a126:	46bd      	mov	sp, r7
   2a128:	bd80      	pop	{r7, pc}
   2a12a:	46c0      	nop			; (mov r8, r8)
   2a12c:	00026759 	.word	0x00026759

0002a130 <system_interrupt_leave_critical_section>:
{
   2a130:	b580      	push	{r7, lr}
   2a132:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2a134:	4b02      	ldr	r3, [pc, #8]	; (2a140 <system_interrupt_leave_critical_section+0x10>)
   2a136:	4798      	blx	r3
}
   2a138:	46c0      	nop			; (mov r8, r8)
   2a13a:	46bd      	mov	sp, r7
   2a13c:	bd80      	pop	{r7, pc}
   2a13e:	46c0      	nop			; (mov r8, r8)
   2a140:	000267ad 	.word	0x000267ad

0002a144 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2a144:	b580      	push	{r7, lr}
   2a146:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2a148:	4b05      	ldr	r3, [pc, #20]	; (2a160 <system_gclk_is_syncing+0x1c>)
   2a14a:	785b      	ldrb	r3, [r3, #1]
   2a14c:	b2db      	uxtb	r3, r3
   2a14e:	b25b      	sxtb	r3, r3
   2a150:	2b00      	cmp	r3, #0
   2a152:	da01      	bge.n	2a158 <system_gclk_is_syncing+0x14>
		return true;
   2a154:	2301      	movs	r3, #1
   2a156:	e000      	b.n	2a15a <system_gclk_is_syncing+0x16>
	}

	return false;
   2a158:	2300      	movs	r3, #0
}
   2a15a:	0018      	movs	r0, r3
   2a15c:	46bd      	mov	sp, r7
   2a15e:	bd80      	pop	{r7, pc}
   2a160:	40000c00 	.word	0x40000c00

0002a164 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2a164:	b580      	push	{r7, lr}
   2a166:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2a168:	2108      	movs	r1, #8
   2a16a:	2000      	movs	r0, #0
   2a16c:	4b07      	ldr	r3, [pc, #28]	; (2a18c <system_gclk_init+0x28>)
   2a16e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2a170:	4b07      	ldr	r3, [pc, #28]	; (2a190 <system_gclk_init+0x2c>)
   2a172:	2201      	movs	r2, #1
   2a174:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2a176:	46c0      	nop			; (mov r8, r8)
   2a178:	4b05      	ldr	r3, [pc, #20]	; (2a190 <system_gclk_init+0x2c>)
   2a17a:	781b      	ldrb	r3, [r3, #0]
   2a17c:	b2db      	uxtb	r3, r3
   2a17e:	001a      	movs	r2, r3
   2a180:	2301      	movs	r3, #1
   2a182:	4013      	ands	r3, r2
   2a184:	d1f8      	bne.n	2a178 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2a186:	46c0      	nop			; (mov r8, r8)
   2a188:	46bd      	mov	sp, r7
   2a18a:	bd80      	pop	{r7, pc}
   2a18c:	0002a0c1 	.word	0x0002a0c1
   2a190:	40000c00 	.word	0x40000c00

0002a194 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2a194:	b580      	push	{r7, lr}
   2a196:	b086      	sub	sp, #24
   2a198:	af00      	add	r7, sp, #0
   2a19a:	0002      	movs	r2, r0
   2a19c:	6039      	str	r1, [r7, #0]
   2a19e:	1dfb      	adds	r3, r7, #7
   2a1a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2a1a2:	1dfb      	adds	r3, r7, #7
   2a1a4:	781b      	ldrb	r3, [r3, #0]
   2a1a6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2a1a8:	1dfb      	adds	r3, r7, #7
   2a1aa:	781b      	ldrb	r3, [r3, #0]
   2a1ac:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2a1ae:	683b      	ldr	r3, [r7, #0]
   2a1b0:	781b      	ldrb	r3, [r3, #0]
   2a1b2:	021b      	lsls	r3, r3, #8
   2a1b4:	001a      	movs	r2, r3
   2a1b6:	697b      	ldr	r3, [r7, #20]
   2a1b8:	4313      	orrs	r3, r2
   2a1ba:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2a1bc:	683b      	ldr	r3, [r7, #0]
   2a1be:	785b      	ldrb	r3, [r3, #1]
   2a1c0:	2b00      	cmp	r3, #0
   2a1c2:	d004      	beq.n	2a1ce <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2a1c4:	697b      	ldr	r3, [r7, #20]
   2a1c6:	2280      	movs	r2, #128	; 0x80
   2a1c8:	02d2      	lsls	r2, r2, #11
   2a1ca:	4313      	orrs	r3, r2
   2a1cc:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2a1ce:	683b      	ldr	r3, [r7, #0]
   2a1d0:	7a5b      	ldrb	r3, [r3, #9]
   2a1d2:	2b00      	cmp	r3, #0
   2a1d4:	d004      	beq.n	2a1e0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2a1d6:	697b      	ldr	r3, [r7, #20]
   2a1d8:	2280      	movs	r2, #128	; 0x80
   2a1da:	0312      	lsls	r2, r2, #12
   2a1dc:	4313      	orrs	r3, r2
   2a1de:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2a1e0:	683b      	ldr	r3, [r7, #0]
   2a1e2:	685b      	ldr	r3, [r3, #4]
   2a1e4:	2b01      	cmp	r3, #1
   2a1e6:	d92c      	bls.n	2a242 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2a1e8:	683b      	ldr	r3, [r7, #0]
   2a1ea:	685a      	ldr	r2, [r3, #4]
   2a1ec:	683b      	ldr	r3, [r7, #0]
   2a1ee:	685b      	ldr	r3, [r3, #4]
   2a1f0:	3b01      	subs	r3, #1
   2a1f2:	4013      	ands	r3, r2
   2a1f4:	d11a      	bne.n	2a22c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2a1f6:	2300      	movs	r3, #0
   2a1f8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2a1fa:	2302      	movs	r3, #2
   2a1fc:	60bb      	str	r3, [r7, #8]
   2a1fe:	e005      	b.n	2a20c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2a200:	68fb      	ldr	r3, [r7, #12]
   2a202:	3301      	adds	r3, #1
   2a204:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2a206:	68bb      	ldr	r3, [r7, #8]
   2a208:	005b      	lsls	r3, r3, #1
   2a20a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2a20c:	683b      	ldr	r3, [r7, #0]
   2a20e:	685a      	ldr	r2, [r3, #4]
   2a210:	68bb      	ldr	r3, [r7, #8]
   2a212:	429a      	cmp	r2, r3
   2a214:	d8f4      	bhi.n	2a200 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2a216:	68fb      	ldr	r3, [r7, #12]
   2a218:	021b      	lsls	r3, r3, #8
   2a21a:	693a      	ldr	r2, [r7, #16]
   2a21c:	4313      	orrs	r3, r2
   2a21e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2a220:	697b      	ldr	r3, [r7, #20]
   2a222:	2280      	movs	r2, #128	; 0x80
   2a224:	0352      	lsls	r2, r2, #13
   2a226:	4313      	orrs	r3, r2
   2a228:	617b      	str	r3, [r7, #20]
   2a22a:	e00a      	b.n	2a242 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2a22c:	683b      	ldr	r3, [r7, #0]
   2a22e:	685b      	ldr	r3, [r3, #4]
   2a230:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2a232:	693a      	ldr	r2, [r7, #16]
   2a234:	4313      	orrs	r3, r2
   2a236:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2a238:	697b      	ldr	r3, [r7, #20]
   2a23a:	2280      	movs	r2, #128	; 0x80
   2a23c:	0292      	lsls	r2, r2, #10
   2a23e:	4313      	orrs	r3, r2
   2a240:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2a242:	683b      	ldr	r3, [r7, #0]
   2a244:	7a1b      	ldrb	r3, [r3, #8]
   2a246:	2b00      	cmp	r3, #0
   2a248:	d004      	beq.n	2a254 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2a24a:	697b      	ldr	r3, [r7, #20]
   2a24c:	2280      	movs	r2, #128	; 0x80
   2a24e:	0392      	lsls	r2, r2, #14
   2a250:	4313      	orrs	r3, r2
   2a252:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2a254:	46c0      	nop			; (mov r8, r8)
   2a256:	4b13      	ldr	r3, [pc, #76]	; (2a2a4 <system_gclk_gen_set_config+0x110>)
   2a258:	4798      	blx	r3
   2a25a:	1e03      	subs	r3, r0, #0
   2a25c:	d1fb      	bne.n	2a256 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a25e:	4b12      	ldr	r3, [pc, #72]	; (2a2a8 <system_gclk_gen_set_config+0x114>)
   2a260:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a262:	4a12      	ldr	r2, [pc, #72]	; (2a2ac <system_gclk_gen_set_config+0x118>)
   2a264:	1dfb      	adds	r3, r7, #7
   2a266:	781b      	ldrb	r3, [r3, #0]
   2a268:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2a26a:	46c0      	nop			; (mov r8, r8)
   2a26c:	4b0d      	ldr	r3, [pc, #52]	; (2a2a4 <system_gclk_gen_set_config+0x110>)
   2a26e:	4798      	blx	r3
   2a270:	1e03      	subs	r3, r0, #0
   2a272:	d1fb      	bne.n	2a26c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2a274:	4b0e      	ldr	r3, [pc, #56]	; (2a2b0 <system_gclk_gen_set_config+0x11c>)
   2a276:	693a      	ldr	r2, [r7, #16]
   2a278:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2a27a:	46c0      	nop			; (mov r8, r8)
   2a27c:	4b09      	ldr	r3, [pc, #36]	; (2a2a4 <system_gclk_gen_set_config+0x110>)
   2a27e:	4798      	blx	r3
   2a280:	1e03      	subs	r3, r0, #0
   2a282:	d1fb      	bne.n	2a27c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2a284:	4b0a      	ldr	r3, [pc, #40]	; (2a2b0 <system_gclk_gen_set_config+0x11c>)
   2a286:	4a0a      	ldr	r2, [pc, #40]	; (2a2b0 <system_gclk_gen_set_config+0x11c>)
   2a288:	6851      	ldr	r1, [r2, #4]
   2a28a:	2280      	movs	r2, #128	; 0x80
   2a28c:	0252      	lsls	r2, r2, #9
   2a28e:	4011      	ands	r1, r2
   2a290:	697a      	ldr	r2, [r7, #20]
   2a292:	430a      	orrs	r2, r1
   2a294:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a296:	4b07      	ldr	r3, [pc, #28]	; (2a2b4 <system_gclk_gen_set_config+0x120>)
   2a298:	4798      	blx	r3
}
   2a29a:	46c0      	nop			; (mov r8, r8)
   2a29c:	46bd      	mov	sp, r7
   2a29e:	b006      	add	sp, #24
   2a2a0:	bd80      	pop	{r7, pc}
   2a2a2:	46c0      	nop			; (mov r8, r8)
   2a2a4:	0002a145 	.word	0x0002a145
   2a2a8:	0002a11d 	.word	0x0002a11d
   2a2ac:	40000c08 	.word	0x40000c08
   2a2b0:	40000c00 	.word	0x40000c00
   2a2b4:	0002a131 	.word	0x0002a131

0002a2b8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2a2b8:	b580      	push	{r7, lr}
   2a2ba:	b082      	sub	sp, #8
   2a2bc:	af00      	add	r7, sp, #0
   2a2be:	0002      	movs	r2, r0
   2a2c0:	1dfb      	adds	r3, r7, #7
   2a2c2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a2c4:	46c0      	nop			; (mov r8, r8)
   2a2c6:	4b0e      	ldr	r3, [pc, #56]	; (2a300 <system_gclk_gen_enable+0x48>)
   2a2c8:	4798      	blx	r3
   2a2ca:	1e03      	subs	r3, r0, #0
   2a2cc:	d1fb      	bne.n	2a2c6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a2ce:	4b0d      	ldr	r3, [pc, #52]	; (2a304 <system_gclk_gen_enable+0x4c>)
   2a2d0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a2d2:	4a0d      	ldr	r2, [pc, #52]	; (2a308 <system_gclk_gen_enable+0x50>)
   2a2d4:	1dfb      	adds	r3, r7, #7
   2a2d6:	781b      	ldrb	r3, [r3, #0]
   2a2d8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a2da:	46c0      	nop			; (mov r8, r8)
   2a2dc:	4b08      	ldr	r3, [pc, #32]	; (2a300 <system_gclk_gen_enable+0x48>)
   2a2de:	4798      	blx	r3
   2a2e0:	1e03      	subs	r3, r0, #0
   2a2e2:	d1fb      	bne.n	2a2dc <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2a2e4:	4b09      	ldr	r3, [pc, #36]	; (2a30c <system_gclk_gen_enable+0x54>)
   2a2e6:	4a09      	ldr	r2, [pc, #36]	; (2a30c <system_gclk_gen_enable+0x54>)
   2a2e8:	6852      	ldr	r2, [r2, #4]
   2a2ea:	2180      	movs	r1, #128	; 0x80
   2a2ec:	0249      	lsls	r1, r1, #9
   2a2ee:	430a      	orrs	r2, r1
   2a2f0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a2f2:	4b07      	ldr	r3, [pc, #28]	; (2a310 <system_gclk_gen_enable+0x58>)
   2a2f4:	4798      	blx	r3
}
   2a2f6:	46c0      	nop			; (mov r8, r8)
   2a2f8:	46bd      	mov	sp, r7
   2a2fa:	b002      	add	sp, #8
   2a2fc:	bd80      	pop	{r7, pc}
   2a2fe:	46c0      	nop			; (mov r8, r8)
   2a300:	0002a145 	.word	0x0002a145
   2a304:	0002a11d 	.word	0x0002a11d
   2a308:	40000c04 	.word	0x40000c04
   2a30c:	40000c00 	.word	0x40000c00
   2a310:	0002a131 	.word	0x0002a131

0002a314 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2a314:	b580      	push	{r7, lr}
   2a316:	b086      	sub	sp, #24
   2a318:	af00      	add	r7, sp, #0
   2a31a:	0002      	movs	r2, r0
   2a31c:	1dfb      	adds	r3, r7, #7
   2a31e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a320:	46c0      	nop			; (mov r8, r8)
   2a322:	4b2a      	ldr	r3, [pc, #168]	; (2a3cc <system_gclk_gen_get_hz+0xb8>)
   2a324:	4798      	blx	r3
   2a326:	1e03      	subs	r3, r0, #0
   2a328:	d1fb      	bne.n	2a322 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a32a:	4b29      	ldr	r3, [pc, #164]	; (2a3d0 <system_gclk_gen_get_hz+0xbc>)
   2a32c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a32e:	4a29      	ldr	r2, [pc, #164]	; (2a3d4 <system_gclk_gen_get_hz+0xc0>)
   2a330:	1dfb      	adds	r3, r7, #7
   2a332:	781b      	ldrb	r3, [r3, #0]
   2a334:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a336:	46c0      	nop			; (mov r8, r8)
   2a338:	4b24      	ldr	r3, [pc, #144]	; (2a3cc <system_gclk_gen_get_hz+0xb8>)
   2a33a:	4798      	blx	r3
   2a33c:	1e03      	subs	r3, r0, #0
   2a33e:	d1fb      	bne.n	2a338 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2a340:	4b25      	ldr	r3, [pc, #148]	; (2a3d8 <system_gclk_gen_get_hz+0xc4>)
   2a342:	685b      	ldr	r3, [r3, #4]
   2a344:	04db      	lsls	r3, r3, #19
   2a346:	0edb      	lsrs	r3, r3, #27
   2a348:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2a34a:	0018      	movs	r0, r3
   2a34c:	4b23      	ldr	r3, [pc, #140]	; (2a3dc <system_gclk_gen_get_hz+0xc8>)
   2a34e:	4798      	blx	r3
   2a350:	0003      	movs	r3, r0
   2a352:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a354:	4a1f      	ldr	r2, [pc, #124]	; (2a3d4 <system_gclk_gen_get_hz+0xc0>)
   2a356:	1dfb      	adds	r3, r7, #7
   2a358:	781b      	ldrb	r3, [r3, #0]
   2a35a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2a35c:	4b1e      	ldr	r3, [pc, #120]	; (2a3d8 <system_gclk_gen_get_hz+0xc4>)
   2a35e:	685b      	ldr	r3, [r3, #4]
   2a360:	02db      	lsls	r3, r3, #11
   2a362:	0fdb      	lsrs	r3, r3, #31
   2a364:	b2da      	uxtb	r2, r3
   2a366:	2313      	movs	r3, #19
   2a368:	18fb      	adds	r3, r7, r3
   2a36a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a36c:	4a1c      	ldr	r2, [pc, #112]	; (2a3e0 <system_gclk_gen_get_hz+0xcc>)
   2a36e:	1dfb      	adds	r3, r7, #7
   2a370:	781b      	ldrb	r3, [r3, #0]
   2a372:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a374:	46c0      	nop			; (mov r8, r8)
   2a376:	4b15      	ldr	r3, [pc, #84]	; (2a3cc <system_gclk_gen_get_hz+0xb8>)
   2a378:	4798      	blx	r3
   2a37a:	1e03      	subs	r3, r0, #0
   2a37c:	d1fb      	bne.n	2a376 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2a37e:	4b16      	ldr	r3, [pc, #88]	; (2a3d8 <system_gclk_gen_get_hz+0xc4>)
   2a380:	689b      	ldr	r3, [r3, #8]
   2a382:	021b      	lsls	r3, r3, #8
   2a384:	0c1b      	lsrs	r3, r3, #16
   2a386:	b29b      	uxth	r3, r3
   2a388:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2a38a:	4b16      	ldr	r3, [pc, #88]	; (2a3e4 <system_gclk_gen_get_hz+0xd0>)
   2a38c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2a38e:	2313      	movs	r3, #19
   2a390:	18fb      	adds	r3, r7, r3
   2a392:	781b      	ldrb	r3, [r3, #0]
   2a394:	2b00      	cmp	r3, #0
   2a396:	d109      	bne.n	2a3ac <system_gclk_gen_get_hz+0x98>
   2a398:	68fb      	ldr	r3, [r7, #12]
   2a39a:	2b01      	cmp	r3, #1
   2a39c:	d906      	bls.n	2a3ac <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2a39e:	4b12      	ldr	r3, [pc, #72]	; (2a3e8 <system_gclk_gen_get_hz+0xd4>)
   2a3a0:	68f9      	ldr	r1, [r7, #12]
   2a3a2:	6978      	ldr	r0, [r7, #20]
   2a3a4:	4798      	blx	r3
   2a3a6:	0003      	movs	r3, r0
   2a3a8:	617b      	str	r3, [r7, #20]
   2a3aa:	e00a      	b.n	2a3c2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2a3ac:	2313      	movs	r3, #19
   2a3ae:	18fb      	adds	r3, r7, r3
   2a3b0:	781b      	ldrb	r3, [r3, #0]
   2a3b2:	2b00      	cmp	r3, #0
   2a3b4:	d005      	beq.n	2a3c2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2a3b6:	68fb      	ldr	r3, [r7, #12]
   2a3b8:	3301      	adds	r3, #1
   2a3ba:	697a      	ldr	r2, [r7, #20]
   2a3bc:	40da      	lsrs	r2, r3
   2a3be:	0013      	movs	r3, r2
   2a3c0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2a3c2:	697b      	ldr	r3, [r7, #20]
}
   2a3c4:	0018      	movs	r0, r3
   2a3c6:	46bd      	mov	sp, r7
   2a3c8:	b006      	add	sp, #24
   2a3ca:	bd80      	pop	{r7, pc}
   2a3cc:	0002a145 	.word	0x0002a145
   2a3d0:	0002a11d 	.word	0x0002a11d
   2a3d4:	40000c04 	.word	0x40000c04
   2a3d8:	40000c00 	.word	0x40000c00
   2a3dc:	00029a75 	.word	0x00029a75
   2a3e0:	40000c08 	.word	0x40000c08
   2a3e4:	0002a131 	.word	0x0002a131
   2a3e8:	00032f89 	.word	0x00032f89

0002a3ec <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2a3ec:	b580      	push	{r7, lr}
   2a3ee:	b084      	sub	sp, #16
   2a3f0:	af00      	add	r7, sp, #0
   2a3f2:	0002      	movs	r2, r0
   2a3f4:	6039      	str	r1, [r7, #0]
   2a3f6:	1dfb      	adds	r3, r7, #7
   2a3f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2a3fa:	1dfb      	adds	r3, r7, #7
   2a3fc:	781b      	ldrb	r3, [r3, #0]
   2a3fe:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2a400:	683b      	ldr	r3, [r7, #0]
   2a402:	781b      	ldrb	r3, [r3, #0]
   2a404:	021b      	lsls	r3, r3, #8
   2a406:	001a      	movs	r2, r3
   2a408:	68fb      	ldr	r3, [r7, #12]
   2a40a:	4313      	orrs	r3, r2
   2a40c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2a40e:	1dfb      	adds	r3, r7, #7
   2a410:	781b      	ldrb	r3, [r3, #0]
   2a412:	0018      	movs	r0, r3
   2a414:	4b04      	ldr	r3, [pc, #16]	; (2a428 <system_gclk_chan_set_config+0x3c>)
   2a416:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2a418:	4b04      	ldr	r3, [pc, #16]	; (2a42c <system_gclk_chan_set_config+0x40>)
   2a41a:	68fa      	ldr	r2, [r7, #12]
   2a41c:	b292      	uxth	r2, r2
   2a41e:	805a      	strh	r2, [r3, #2]
}
   2a420:	46c0      	nop			; (mov r8, r8)
   2a422:	46bd      	mov	sp, r7
   2a424:	b004      	add	sp, #16
   2a426:	bd80      	pop	{r7, pc}
   2a428:	0002a479 	.word	0x0002a479
   2a42c:	40000c00 	.word	0x40000c00

0002a430 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2a430:	b580      	push	{r7, lr}
   2a432:	b082      	sub	sp, #8
   2a434:	af00      	add	r7, sp, #0
   2a436:	0002      	movs	r2, r0
   2a438:	1dfb      	adds	r3, r7, #7
   2a43a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2a43c:	4b0a      	ldr	r3, [pc, #40]	; (2a468 <system_gclk_chan_enable+0x38>)
   2a43e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2a440:	4a0a      	ldr	r2, [pc, #40]	; (2a46c <system_gclk_chan_enable+0x3c>)
   2a442:	1dfb      	adds	r3, r7, #7
   2a444:	781b      	ldrb	r3, [r3, #0]
   2a446:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2a448:	4909      	ldr	r1, [pc, #36]	; (2a470 <system_gclk_chan_enable+0x40>)
   2a44a:	4b09      	ldr	r3, [pc, #36]	; (2a470 <system_gclk_chan_enable+0x40>)
   2a44c:	885b      	ldrh	r3, [r3, #2]
   2a44e:	b29b      	uxth	r3, r3
   2a450:	2280      	movs	r2, #128	; 0x80
   2a452:	01d2      	lsls	r2, r2, #7
   2a454:	4313      	orrs	r3, r2
   2a456:	b29b      	uxth	r3, r3
   2a458:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2a45a:	4b06      	ldr	r3, [pc, #24]	; (2a474 <system_gclk_chan_enable+0x44>)
   2a45c:	4798      	blx	r3
}
   2a45e:	46c0      	nop			; (mov r8, r8)
   2a460:	46bd      	mov	sp, r7
   2a462:	b002      	add	sp, #8
   2a464:	bd80      	pop	{r7, pc}
   2a466:	46c0      	nop			; (mov r8, r8)
   2a468:	0002a11d 	.word	0x0002a11d
   2a46c:	40000c02 	.word	0x40000c02
   2a470:	40000c00 	.word	0x40000c00
   2a474:	0002a131 	.word	0x0002a131

0002a478 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2a478:	b580      	push	{r7, lr}
   2a47a:	b084      	sub	sp, #16
   2a47c:	af00      	add	r7, sp, #0
   2a47e:	0002      	movs	r2, r0
   2a480:	1dfb      	adds	r3, r7, #7
   2a482:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2a484:	4b1c      	ldr	r3, [pc, #112]	; (2a4f8 <system_gclk_chan_disable+0x80>)
   2a486:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2a488:	4a1c      	ldr	r2, [pc, #112]	; (2a4fc <system_gclk_chan_disable+0x84>)
   2a48a:	1dfb      	adds	r3, r7, #7
   2a48c:	781b      	ldrb	r3, [r3, #0]
   2a48e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2a490:	4b1b      	ldr	r3, [pc, #108]	; (2a500 <system_gclk_chan_disable+0x88>)
   2a492:	885b      	ldrh	r3, [r3, #2]
   2a494:	051b      	lsls	r3, r3, #20
   2a496:	0f1b      	lsrs	r3, r3, #28
   2a498:	b2db      	uxtb	r3, r3
   2a49a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2a49c:	4a18      	ldr	r2, [pc, #96]	; (2a500 <system_gclk_chan_disable+0x88>)
   2a49e:	8853      	ldrh	r3, [r2, #2]
   2a4a0:	4918      	ldr	r1, [pc, #96]	; (2a504 <system_gclk_chan_disable+0x8c>)
   2a4a2:	400b      	ands	r3, r1
   2a4a4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2a4a6:	4a16      	ldr	r2, [pc, #88]	; (2a500 <system_gclk_chan_disable+0x88>)
   2a4a8:	4b15      	ldr	r3, [pc, #84]	; (2a500 <system_gclk_chan_disable+0x88>)
   2a4aa:	885b      	ldrh	r3, [r3, #2]
   2a4ac:	b29b      	uxth	r3, r3
   2a4ae:	4916      	ldr	r1, [pc, #88]	; (2a508 <system_gclk_chan_disable+0x90>)
   2a4b0:	400b      	ands	r3, r1
   2a4b2:	b29b      	uxth	r3, r3
   2a4b4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2a4b6:	46c0      	nop			; (mov r8, r8)
   2a4b8:	4b11      	ldr	r3, [pc, #68]	; (2a500 <system_gclk_chan_disable+0x88>)
   2a4ba:	885b      	ldrh	r3, [r3, #2]
   2a4bc:	b29b      	uxth	r3, r3
   2a4be:	001a      	movs	r2, r3
   2a4c0:	2380      	movs	r3, #128	; 0x80
   2a4c2:	01db      	lsls	r3, r3, #7
   2a4c4:	4013      	ands	r3, r2
   2a4c6:	d1f7      	bne.n	2a4b8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2a4c8:	4a0d      	ldr	r2, [pc, #52]	; (2a500 <system_gclk_chan_disable+0x88>)
   2a4ca:	68fb      	ldr	r3, [r7, #12]
   2a4cc:	b2db      	uxtb	r3, r3
   2a4ce:	1c19      	adds	r1, r3, #0
   2a4d0:	230f      	movs	r3, #15
   2a4d2:	400b      	ands	r3, r1
   2a4d4:	b2d9      	uxtb	r1, r3
   2a4d6:	8853      	ldrh	r3, [r2, #2]
   2a4d8:	1c08      	adds	r0, r1, #0
   2a4da:	210f      	movs	r1, #15
   2a4dc:	4001      	ands	r1, r0
   2a4de:	0208      	lsls	r0, r1, #8
   2a4e0:	4908      	ldr	r1, [pc, #32]	; (2a504 <system_gclk_chan_disable+0x8c>)
   2a4e2:	400b      	ands	r3, r1
   2a4e4:	1c19      	adds	r1, r3, #0
   2a4e6:	1c03      	adds	r3, r0, #0
   2a4e8:	430b      	orrs	r3, r1
   2a4ea:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2a4ec:	4b07      	ldr	r3, [pc, #28]	; (2a50c <system_gclk_chan_disable+0x94>)
   2a4ee:	4798      	blx	r3
}
   2a4f0:	46c0      	nop			; (mov r8, r8)
   2a4f2:	46bd      	mov	sp, r7
   2a4f4:	b004      	add	sp, #16
   2a4f6:	bd80      	pop	{r7, pc}
   2a4f8:	0002a11d 	.word	0x0002a11d
   2a4fc:	40000c02 	.word	0x40000c02
   2a500:	40000c00 	.word	0x40000c00
   2a504:	fffff0ff 	.word	0xfffff0ff
   2a508:	ffffbfff 	.word	0xffffbfff
   2a50c:	0002a131 	.word	0x0002a131

0002a510 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2a510:	b580      	push	{r7, lr}
   2a512:	b084      	sub	sp, #16
   2a514:	af00      	add	r7, sp, #0
   2a516:	0002      	movs	r2, r0
   2a518:	1dfb      	adds	r3, r7, #7
   2a51a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2a51c:	4b0d      	ldr	r3, [pc, #52]	; (2a554 <system_gclk_chan_get_hz+0x44>)
   2a51e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2a520:	4a0d      	ldr	r2, [pc, #52]	; (2a558 <system_gclk_chan_get_hz+0x48>)
   2a522:	1dfb      	adds	r3, r7, #7
   2a524:	781b      	ldrb	r3, [r3, #0]
   2a526:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2a528:	4b0c      	ldr	r3, [pc, #48]	; (2a55c <system_gclk_chan_get_hz+0x4c>)
   2a52a:	885b      	ldrh	r3, [r3, #2]
   2a52c:	051b      	lsls	r3, r3, #20
   2a52e:	0f1b      	lsrs	r3, r3, #28
   2a530:	b2da      	uxtb	r2, r3
   2a532:	230f      	movs	r3, #15
   2a534:	18fb      	adds	r3, r7, r3
   2a536:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2a538:	4b09      	ldr	r3, [pc, #36]	; (2a560 <system_gclk_chan_get_hz+0x50>)
   2a53a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2a53c:	230f      	movs	r3, #15
   2a53e:	18fb      	adds	r3, r7, r3
   2a540:	781b      	ldrb	r3, [r3, #0]
   2a542:	0018      	movs	r0, r3
   2a544:	4b07      	ldr	r3, [pc, #28]	; (2a564 <system_gclk_chan_get_hz+0x54>)
   2a546:	4798      	blx	r3
   2a548:	0003      	movs	r3, r0
}
   2a54a:	0018      	movs	r0, r3
   2a54c:	46bd      	mov	sp, r7
   2a54e:	b004      	add	sp, #16
   2a550:	bd80      	pop	{r7, pc}
   2a552:	46c0      	nop			; (mov r8, r8)
   2a554:	0002a11d 	.word	0x0002a11d
   2a558:	40000c02 	.word	0x40000c02
   2a55c:	40000c00 	.word	0x40000c00
   2a560:	0002a131 	.word	0x0002a131
   2a564:	0002a315 	.word	0x0002a315

0002a568 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2a568:	b580      	push	{r7, lr}
   2a56a:	b084      	sub	sp, #16
   2a56c:	af00      	add	r7, sp, #0
   2a56e:	0002      	movs	r2, r0
   2a570:	1dfb      	adds	r3, r7, #7
   2a572:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2a574:	230f      	movs	r3, #15
   2a576:	18fb      	adds	r3, r7, r3
   2a578:	2200      	movs	r2, #0
   2a57a:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2a57c:	1dfb      	adds	r3, r7, #7
   2a57e:	781b      	ldrb	r3, [r3, #0]
   2a580:	2b7f      	cmp	r3, #127	; 0x7f
   2a582:	d80b      	bhi.n	2a59c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2a584:	4a13      	ldr	r2, [pc, #76]	; (2a5d4 <system_interrupt_clear_pending+0x6c>)
   2a586:	1dfb      	adds	r3, r7, #7
   2a588:	781b      	ldrb	r3, [r3, #0]
   2a58a:	b25b      	sxtb	r3, r3
   2a58c:	2101      	movs	r1, #1
   2a58e:	4099      	lsls	r1, r3
   2a590:	000b      	movs	r3, r1
   2a592:	0019      	movs	r1, r3
   2a594:	23c0      	movs	r3, #192	; 0xc0
   2a596:	005b      	lsls	r3, r3, #1
   2a598:	50d1      	str	r1, [r2, r3]
   2a59a:	e014      	b.n	2a5c6 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2a59c:	1dfb      	adds	r3, r7, #7
   2a59e:	781b      	ldrb	r3, [r3, #0]
   2a5a0:	b25b      	sxtb	r3, r3
   2a5a2:	330e      	adds	r3, #14
   2a5a4:	d101      	bne.n	2a5aa <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2a5a6:	2317      	movs	r3, #23
   2a5a8:	e010      	b.n	2a5cc <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2a5aa:	1dfb      	adds	r3, r7, #7
   2a5ac:	781b      	ldrb	r3, [r3, #0]
   2a5ae:	b25b      	sxtb	r3, r3
   2a5b0:	3301      	adds	r3, #1
   2a5b2:	d104      	bne.n	2a5be <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2a5b4:	4b08      	ldr	r3, [pc, #32]	; (2a5d8 <system_interrupt_clear_pending+0x70>)
   2a5b6:	2280      	movs	r2, #128	; 0x80
   2a5b8:	0492      	lsls	r2, r2, #18
   2a5ba:	605a      	str	r2, [r3, #4]
   2a5bc:	e003      	b.n	2a5c6 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2a5be:	230f      	movs	r3, #15
   2a5c0:	18fb      	adds	r3, r7, r3
   2a5c2:	2217      	movs	r2, #23
   2a5c4:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2a5c6:	230f      	movs	r3, #15
   2a5c8:	18fb      	adds	r3, r7, r3
   2a5ca:	781b      	ldrb	r3, [r3, #0]
}
   2a5cc:	0018      	movs	r0, r3
   2a5ce:	46bd      	mov	sp, r7
   2a5d0:	b004      	add	sp, #16
   2a5d2:	bd80      	pop	{r7, pc}
   2a5d4:	e000e100 	.word	0xe000e100
   2a5d8:	e000ed00 	.word	0xe000ed00

0002a5dc <system_pinmux_get_group_from_gpio_pin>:
{
   2a5dc:	b580      	push	{r7, lr}
   2a5de:	b084      	sub	sp, #16
   2a5e0:	af00      	add	r7, sp, #0
   2a5e2:	0002      	movs	r2, r0
   2a5e4:	1dfb      	adds	r3, r7, #7
   2a5e6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2a5e8:	230f      	movs	r3, #15
   2a5ea:	18fb      	adds	r3, r7, r3
   2a5ec:	1dfa      	adds	r2, r7, #7
   2a5ee:	7812      	ldrb	r2, [r2, #0]
   2a5f0:	09d2      	lsrs	r2, r2, #7
   2a5f2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2a5f4:	230e      	movs	r3, #14
   2a5f6:	18fb      	adds	r3, r7, r3
   2a5f8:	1dfa      	adds	r2, r7, #7
   2a5fa:	7812      	ldrb	r2, [r2, #0]
   2a5fc:	0952      	lsrs	r2, r2, #5
   2a5fe:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2a600:	4b0d      	ldr	r3, [pc, #52]	; (2a638 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2a602:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2a604:	230f      	movs	r3, #15
   2a606:	18fb      	adds	r3, r7, r3
   2a608:	781b      	ldrb	r3, [r3, #0]
   2a60a:	2b00      	cmp	r3, #0
   2a60c:	d10f      	bne.n	2a62e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2a60e:	230f      	movs	r3, #15
   2a610:	18fb      	adds	r3, r7, r3
   2a612:	781b      	ldrb	r3, [r3, #0]
   2a614:	009b      	lsls	r3, r3, #2
   2a616:	2210      	movs	r2, #16
   2a618:	4694      	mov	ip, r2
   2a61a:	44bc      	add	ip, r7
   2a61c:	4463      	add	r3, ip
   2a61e:	3b08      	subs	r3, #8
   2a620:	681a      	ldr	r2, [r3, #0]
   2a622:	230e      	movs	r3, #14
   2a624:	18fb      	adds	r3, r7, r3
   2a626:	781b      	ldrb	r3, [r3, #0]
   2a628:	01db      	lsls	r3, r3, #7
   2a62a:	18d3      	adds	r3, r2, r3
   2a62c:	e000      	b.n	2a630 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2a62e:	2300      	movs	r3, #0
}
   2a630:	0018      	movs	r0, r3
   2a632:	46bd      	mov	sp, r7
   2a634:	b004      	add	sp, #16
   2a636:	bd80      	pop	{r7, pc}
   2a638:	41004400 	.word	0x41004400

0002a63c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2a63c:	b580      	push	{r7, lr}
   2a63e:	b088      	sub	sp, #32
   2a640:	af00      	add	r7, sp, #0
   2a642:	60f8      	str	r0, [r7, #12]
   2a644:	60b9      	str	r1, [r7, #8]
   2a646:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2a648:	2300      	movs	r3, #0
   2a64a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2a64c:	687b      	ldr	r3, [r7, #4]
   2a64e:	78db      	ldrb	r3, [r3, #3]
   2a650:	2201      	movs	r2, #1
   2a652:	4053      	eors	r3, r2
   2a654:	b2db      	uxtb	r3, r3
   2a656:	2b00      	cmp	r3, #0
   2a658:	d035      	beq.n	2a6c6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2a65a:	687b      	ldr	r3, [r7, #4]
   2a65c:	781b      	ldrb	r3, [r3, #0]
   2a65e:	2b80      	cmp	r3, #128	; 0x80
   2a660:	d00b      	beq.n	2a67a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2a662:	69fb      	ldr	r3, [r7, #28]
   2a664:	2280      	movs	r2, #128	; 0x80
   2a666:	0252      	lsls	r2, r2, #9
   2a668:	4313      	orrs	r3, r2
   2a66a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2a66c:	687b      	ldr	r3, [r7, #4]
   2a66e:	781b      	ldrb	r3, [r3, #0]
   2a670:	061b      	lsls	r3, r3, #24
   2a672:	001a      	movs	r2, r3
   2a674:	69fb      	ldr	r3, [r7, #28]
   2a676:	4313      	orrs	r3, r2
   2a678:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2a67a:	687b      	ldr	r3, [r7, #4]
   2a67c:	785b      	ldrb	r3, [r3, #1]
   2a67e:	2b00      	cmp	r3, #0
   2a680:	d003      	beq.n	2a68a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a682:	687b      	ldr	r3, [r7, #4]
   2a684:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2a686:	2b02      	cmp	r3, #2
   2a688:	d110      	bne.n	2a6ac <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2a68a:	69fb      	ldr	r3, [r7, #28]
   2a68c:	2280      	movs	r2, #128	; 0x80
   2a68e:	0292      	lsls	r2, r2, #10
   2a690:	4313      	orrs	r3, r2
   2a692:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2a694:	687b      	ldr	r3, [r7, #4]
   2a696:	789b      	ldrb	r3, [r3, #2]
   2a698:	2b00      	cmp	r3, #0
   2a69a:	d004      	beq.n	2a6a6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2a69c:	69fb      	ldr	r3, [r7, #28]
   2a69e:	2280      	movs	r2, #128	; 0x80
   2a6a0:	02d2      	lsls	r2, r2, #11
   2a6a2:	4313      	orrs	r3, r2
   2a6a4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2a6a6:	68fb      	ldr	r3, [r7, #12]
   2a6a8:	68ba      	ldr	r2, [r7, #8]
   2a6aa:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a6ac:	687b      	ldr	r3, [r7, #4]
   2a6ae:	785b      	ldrb	r3, [r3, #1]
   2a6b0:	2b01      	cmp	r3, #1
   2a6b2:	d003      	beq.n	2a6bc <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a6b4:	687b      	ldr	r3, [r7, #4]
   2a6b6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a6b8:	2b02      	cmp	r3, #2
   2a6ba:	d107      	bne.n	2a6cc <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2a6bc:	69fb      	ldr	r3, [r7, #28]
   2a6be:	4a22      	ldr	r2, [pc, #136]	; (2a748 <_system_pinmux_config+0x10c>)
   2a6c0:	4013      	ands	r3, r2
   2a6c2:	61fb      	str	r3, [r7, #28]
   2a6c4:	e002      	b.n	2a6cc <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2a6c6:	68fb      	ldr	r3, [r7, #12]
   2a6c8:	68ba      	ldr	r2, [r7, #8]
   2a6ca:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2a6cc:	68bb      	ldr	r3, [r7, #8]
   2a6ce:	041b      	lsls	r3, r3, #16
   2a6d0:	0c1b      	lsrs	r3, r3, #16
   2a6d2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2a6d4:	68bb      	ldr	r3, [r7, #8]
   2a6d6:	0c1b      	lsrs	r3, r3, #16
   2a6d8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a6da:	69ba      	ldr	r2, [r7, #24]
   2a6dc:	69fb      	ldr	r3, [r7, #28]
   2a6de:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2a6e0:	22a0      	movs	r2, #160	; 0xa0
   2a6e2:	05d2      	lsls	r2, r2, #23
   2a6e4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a6e6:	68fb      	ldr	r3, [r7, #12]
   2a6e8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a6ea:	697a      	ldr	r2, [r7, #20]
   2a6ec:	69fb      	ldr	r3, [r7, #28]
   2a6ee:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2a6f0:	22d0      	movs	r2, #208	; 0xd0
   2a6f2:	0612      	lsls	r2, r2, #24
   2a6f4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a6f6:	68fb      	ldr	r3, [r7, #12]
   2a6f8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2a6fa:	687b      	ldr	r3, [r7, #4]
   2a6fc:	78db      	ldrb	r3, [r3, #3]
   2a6fe:	2201      	movs	r2, #1
   2a700:	4053      	eors	r3, r2
   2a702:	b2db      	uxtb	r3, r3
   2a704:	2b00      	cmp	r3, #0
   2a706:	d01a      	beq.n	2a73e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2a708:	69fa      	ldr	r2, [r7, #28]
   2a70a:	2380      	movs	r3, #128	; 0x80
   2a70c:	02db      	lsls	r3, r3, #11
   2a70e:	4013      	ands	r3, r2
   2a710:	d00a      	beq.n	2a728 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2a712:	687b      	ldr	r3, [r7, #4]
   2a714:	789b      	ldrb	r3, [r3, #2]
   2a716:	2b01      	cmp	r3, #1
   2a718:	d103      	bne.n	2a722 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2a71a:	68fb      	ldr	r3, [r7, #12]
   2a71c:	68ba      	ldr	r2, [r7, #8]
   2a71e:	619a      	str	r2, [r3, #24]
   2a720:	e002      	b.n	2a728 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2a722:	68fb      	ldr	r3, [r7, #12]
   2a724:	68ba      	ldr	r2, [r7, #8]
   2a726:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a728:	687b      	ldr	r3, [r7, #4]
   2a72a:	785b      	ldrb	r3, [r3, #1]
   2a72c:	2b01      	cmp	r3, #1
   2a72e:	d003      	beq.n	2a738 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a730:	687b      	ldr	r3, [r7, #4]
   2a732:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a734:	2b02      	cmp	r3, #2
   2a736:	d102      	bne.n	2a73e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2a738:	68fb      	ldr	r3, [r7, #12]
   2a73a:	68ba      	ldr	r2, [r7, #8]
   2a73c:	609a      	str	r2, [r3, #8]
		}
	}
}
   2a73e:	46c0      	nop			; (mov r8, r8)
   2a740:	46bd      	mov	sp, r7
   2a742:	b008      	add	sp, #32
   2a744:	bd80      	pop	{r7, pc}
   2a746:	46c0      	nop			; (mov r8, r8)
   2a748:	fffbffff 	.word	0xfffbffff

0002a74c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2a74c:	b580      	push	{r7, lr}
   2a74e:	b084      	sub	sp, #16
   2a750:	af00      	add	r7, sp, #0
   2a752:	0002      	movs	r2, r0
   2a754:	6039      	str	r1, [r7, #0]
   2a756:	1dfb      	adds	r3, r7, #7
   2a758:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2a75a:	1dfb      	adds	r3, r7, #7
   2a75c:	781b      	ldrb	r3, [r3, #0]
   2a75e:	0018      	movs	r0, r3
   2a760:	4b0a      	ldr	r3, [pc, #40]	; (2a78c <system_pinmux_pin_set_config+0x40>)
   2a762:	4798      	blx	r3
   2a764:	0003      	movs	r3, r0
   2a766:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2a768:	1dfb      	adds	r3, r7, #7
   2a76a:	781b      	ldrb	r3, [r3, #0]
   2a76c:	221f      	movs	r2, #31
   2a76e:	4013      	ands	r3, r2
   2a770:	2201      	movs	r2, #1
   2a772:	409a      	lsls	r2, r3
   2a774:	0013      	movs	r3, r2
   2a776:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2a778:	683a      	ldr	r2, [r7, #0]
   2a77a:	68b9      	ldr	r1, [r7, #8]
   2a77c:	68fb      	ldr	r3, [r7, #12]
   2a77e:	0018      	movs	r0, r3
   2a780:	4b03      	ldr	r3, [pc, #12]	; (2a790 <system_pinmux_pin_set_config+0x44>)
   2a782:	4798      	blx	r3
}
   2a784:	46c0      	nop			; (mov r8, r8)
   2a786:	46bd      	mov	sp, r7
   2a788:	b004      	add	sp, #16
   2a78a:	bd80      	pop	{r7, pc}
   2a78c:	0002a5dd 	.word	0x0002a5dd
   2a790:	0002a63d 	.word	0x0002a63d

0002a794 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2a794:	b580      	push	{r7, lr}
   2a796:	af00      	add	r7, sp, #0
	return;
   2a798:	46c0      	nop			; (mov r8, r8)
}
   2a79a:	46bd      	mov	sp, r7
   2a79c:	bd80      	pop	{r7, pc}
	...

0002a7a0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2a7a0:	b580      	push	{r7, lr}
   2a7a2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2a7a4:	4b06      	ldr	r3, [pc, #24]	; (2a7c0 <system_init+0x20>)
   2a7a6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2a7a8:	4b06      	ldr	r3, [pc, #24]	; (2a7c4 <system_init+0x24>)
   2a7aa:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2a7ac:	4b06      	ldr	r3, [pc, #24]	; (2a7c8 <system_init+0x28>)
   2a7ae:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2a7b0:	4b06      	ldr	r3, [pc, #24]	; (2a7cc <system_init+0x2c>)
   2a7b2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2a7b4:	4b06      	ldr	r3, [pc, #24]	; (2a7d0 <system_init+0x30>)
   2a7b6:	4798      	blx	r3
}
   2a7b8:	46c0      	nop			; (mov r8, r8)
   2a7ba:	46bd      	mov	sp, r7
   2a7bc:	bd80      	pop	{r7, pc}
   2a7be:	46c0      	nop			; (mov r8, r8)
   2a7c0:	00029e21 	.word	0x00029e21
   2a7c4:	000268e9 	.word	0x000268e9
   2a7c8:	00013011 	.word	0x00013011
   2a7cc:	00026cc1 	.word	0x00026cc1
   2a7d0:	0002a795 	.word	0x0002a795

0002a7d4 <system_gclk_chan_get_config_defaults>:
{
   2a7d4:	b580      	push	{r7, lr}
   2a7d6:	b082      	sub	sp, #8
   2a7d8:	af00      	add	r7, sp, #0
   2a7da:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a7dc:	687b      	ldr	r3, [r7, #4]
   2a7de:	2200      	movs	r2, #0
   2a7e0:	701a      	strb	r2, [r3, #0]
}
   2a7e2:	46c0      	nop			; (mov r8, r8)
   2a7e4:	46bd      	mov	sp, r7
   2a7e6:	b002      	add	sp, #8
   2a7e8:	bd80      	pop	{r7, pc}
	...

0002a7ec <system_apb_clock_set_mask>:
{
   2a7ec:	b580      	push	{r7, lr}
   2a7ee:	b082      	sub	sp, #8
   2a7f0:	af00      	add	r7, sp, #0
   2a7f2:	0002      	movs	r2, r0
   2a7f4:	6039      	str	r1, [r7, #0]
   2a7f6:	1dfb      	adds	r3, r7, #7
   2a7f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a7fa:	1dfb      	adds	r3, r7, #7
   2a7fc:	781b      	ldrb	r3, [r3, #0]
   2a7fe:	2b01      	cmp	r3, #1
   2a800:	d00a      	beq.n	2a818 <system_apb_clock_set_mask+0x2c>
   2a802:	2b02      	cmp	r3, #2
   2a804:	d00f      	beq.n	2a826 <system_apb_clock_set_mask+0x3a>
   2a806:	2b00      	cmp	r3, #0
   2a808:	d114      	bne.n	2a834 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a80a:	4b0e      	ldr	r3, [pc, #56]	; (2a844 <system_apb_clock_set_mask+0x58>)
   2a80c:	4a0d      	ldr	r2, [pc, #52]	; (2a844 <system_apb_clock_set_mask+0x58>)
   2a80e:	6991      	ldr	r1, [r2, #24]
   2a810:	683a      	ldr	r2, [r7, #0]
   2a812:	430a      	orrs	r2, r1
   2a814:	619a      	str	r2, [r3, #24]
			break;
   2a816:	e00f      	b.n	2a838 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a818:	4b0a      	ldr	r3, [pc, #40]	; (2a844 <system_apb_clock_set_mask+0x58>)
   2a81a:	4a0a      	ldr	r2, [pc, #40]	; (2a844 <system_apb_clock_set_mask+0x58>)
   2a81c:	69d1      	ldr	r1, [r2, #28]
   2a81e:	683a      	ldr	r2, [r7, #0]
   2a820:	430a      	orrs	r2, r1
   2a822:	61da      	str	r2, [r3, #28]
			break;
   2a824:	e008      	b.n	2a838 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a826:	4b07      	ldr	r3, [pc, #28]	; (2a844 <system_apb_clock_set_mask+0x58>)
   2a828:	4a06      	ldr	r2, [pc, #24]	; (2a844 <system_apb_clock_set_mask+0x58>)
   2a82a:	6a11      	ldr	r1, [r2, #32]
   2a82c:	683a      	ldr	r2, [r7, #0]
   2a82e:	430a      	orrs	r2, r1
   2a830:	621a      	str	r2, [r3, #32]
			break;
   2a832:	e001      	b.n	2a838 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a834:	2317      	movs	r3, #23
   2a836:	e000      	b.n	2a83a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a838:	2300      	movs	r3, #0
}
   2a83a:	0018      	movs	r0, r3
   2a83c:	46bd      	mov	sp, r7
   2a83e:	b002      	add	sp, #8
   2a840:	bd80      	pop	{r7, pc}
   2a842:	46c0      	nop			; (mov r8, r8)
   2a844:	40000400 	.word	0x40000400

0002a848 <system_pinmux_get_config_defaults>:
{
   2a848:	b580      	push	{r7, lr}
   2a84a:	b082      	sub	sp, #8
   2a84c:	af00      	add	r7, sp, #0
   2a84e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2a850:	687b      	ldr	r3, [r7, #4]
   2a852:	2280      	movs	r2, #128	; 0x80
   2a854:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a856:	687b      	ldr	r3, [r7, #4]
   2a858:	2200      	movs	r2, #0
   2a85a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2a85c:	687b      	ldr	r3, [r7, #4]
   2a85e:	2201      	movs	r2, #1
   2a860:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2a862:	687b      	ldr	r3, [r7, #4]
   2a864:	2200      	movs	r2, #0
   2a866:	70da      	strb	r2, [r3, #3]
}
   2a868:	46c0      	nop			; (mov r8, r8)
   2a86a:	46bd      	mov	sp, r7
   2a86c:	b002      	add	sp, #8
   2a86e:	bd80      	pop	{r7, pc}

0002a870 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2a870:	b580      	push	{r7, lr}
   2a872:	b084      	sub	sp, #16
   2a874:	af00      	add	r7, sp, #0
   2a876:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a878:	2300      	movs	r3, #0
   2a87a:	60fb      	str	r3, [r7, #12]
   2a87c:	e00c      	b.n	2a898 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2a87e:	4b0a      	ldr	r3, [pc, #40]	; (2a8a8 <_tcc_get_inst_index+0x38>)
   2a880:	68fa      	ldr	r2, [r7, #12]
   2a882:	0092      	lsls	r2, r2, #2
   2a884:	58d2      	ldr	r2, [r2, r3]
   2a886:	687b      	ldr	r3, [r7, #4]
   2a888:	429a      	cmp	r2, r3
   2a88a:	d102      	bne.n	2a892 <_tcc_get_inst_index+0x22>
			return i;
   2a88c:	68fb      	ldr	r3, [r7, #12]
   2a88e:	b2db      	uxtb	r3, r3
   2a890:	e006      	b.n	2a8a0 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a892:	68fb      	ldr	r3, [r7, #12]
   2a894:	3301      	adds	r3, #1
   2a896:	60fb      	str	r3, [r7, #12]
   2a898:	68fb      	ldr	r3, [r7, #12]
   2a89a:	2b02      	cmp	r3, #2
   2a89c:	d9ef      	bls.n	2a87e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2a89e:	2300      	movs	r3, #0
}
   2a8a0:	0018      	movs	r0, r3
   2a8a2:	46bd      	mov	sp, r7
   2a8a4:	b004      	add	sp, #16
   2a8a6:	bd80      	pop	{r7, pc}
   2a8a8:	00039db8 	.word	0x00039db8

0002a8ac <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2a8ac:	b590      	push	{r4, r7, lr}
   2a8ae:	b085      	sub	sp, #20
   2a8b0:	af00      	add	r7, sp, #0
   2a8b2:	6078      	str	r0, [r7, #4]
   2a8b4:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a8b6:	230f      	movs	r3, #15
   2a8b8:	18fc      	adds	r4, r7, r3
   2a8ba:	683b      	ldr	r3, [r7, #0]
   2a8bc:	0018      	movs	r0, r3
   2a8be:	4bad      	ldr	r3, [pc, #692]	; (2ab74 <tcc_get_config_defaults+0x2c8>)
   2a8c0:	4798      	blx	r3
   2a8c2:	0003      	movs	r3, r0
   2a8c4:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2a8c6:	687b      	ldr	r3, [r7, #4]
   2a8c8:	2200      	movs	r2, #0
   2a8ca:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2a8cc:	230f      	movs	r3, #15
   2a8ce:	18fb      	adds	r3, r7, r3
   2a8d0:	781a      	ldrb	r2, [r3, #0]
   2a8d2:	4ba9      	ldr	r3, [pc, #676]	; (2ab78 <tcc_get_config_defaults+0x2cc>)
   2a8d4:	0092      	lsls	r2, r2, #2
   2a8d6:	58d2      	ldr	r2, [r2, r3]
   2a8d8:	687b      	ldr	r3, [r7, #4]
   2a8da:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2a8dc:	687b      	ldr	r3, [r7, #4]
   2a8de:	2200      	movs	r2, #0
   2a8e0:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2a8e2:	687b      	ldr	r3, [r7, #4]
   2a8e4:	2200      	movs	r2, #0
   2a8e6:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2a8e8:	687b      	ldr	r3, [r7, #4]
   2a8ea:	2200      	movs	r2, #0
   2a8ec:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2a8ee:	687b      	ldr	r3, [r7, #4]
   2a8f0:	2200      	movs	r2, #0
   2a8f2:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2a8f4:	687b      	ldr	r3, [r7, #4]
   2a8f6:	2200      	movs	r2, #0
   2a8f8:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a8fa:	687b      	ldr	r3, [r7, #4]
   2a8fc:	2200      	movs	r2, #0
   2a8fe:	61da      	str	r2, [r3, #28]
   2a900:	687b      	ldr	r3, [r7, #4]
   2a902:	2200      	movs	r2, #0
   2a904:	621a      	str	r2, [r3, #32]
   2a906:	687b      	ldr	r3, [r7, #4]
   2a908:	2200      	movs	r2, #0
   2a90a:	625a      	str	r2, [r3, #36]	; 0x24
   2a90c:	687b      	ldr	r3, [r7, #4]
   2a90e:	2200      	movs	r2, #0
   2a910:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a912:	687b      	ldr	r3, [r7, #4]
   2a914:	2200      	movs	r2, #0
   2a916:	751a      	strb	r2, [r3, #20]
   2a918:	687b      	ldr	r3, [r7, #4]
   2a91a:	2200      	movs	r2, #0
   2a91c:	755a      	strb	r2, [r3, #21]
   2a91e:	687b      	ldr	r3, [r7, #4]
   2a920:	2200      	movs	r2, #0
   2a922:	759a      	strb	r2, [r3, #22]
   2a924:	687b      	ldr	r3, [r7, #4]
   2a926:	2200      	movs	r2, #0
   2a928:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2a92a:	687b      	ldr	r3, [r7, #4]
   2a92c:	2200      	movs	r2, #0
   2a92e:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2a930:	687b      	ldr	r3, [r7, #4]
   2a932:	2200      	movs	r2, #0
   2a934:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a936:	687b      	ldr	r3, [r7, #4]
   2a938:	2200      	movs	r2, #0
   2a93a:	741a      	strb	r2, [r3, #16]
   2a93c:	687b      	ldr	r3, [r7, #4]
   2a93e:	2200      	movs	r2, #0
   2a940:	745a      	strb	r2, [r3, #17]
   2a942:	687b      	ldr	r3, [r7, #4]
   2a944:	2200      	movs	r2, #0
   2a946:	749a      	strb	r2, [r3, #18]
   2a948:	687b      	ldr	r3, [r7, #4]
   2a94a:	2200      	movs	r2, #0
   2a94c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2a94e:	687b      	ldr	r3, [r7, #4]
   2a950:	222c      	movs	r2, #44	; 0x2c
   2a952:	2100      	movs	r1, #0
   2a954:	5499      	strb	r1, [r3, r2]
   2a956:	687b      	ldr	r3, [r7, #4]
   2a958:	222d      	movs	r2, #45	; 0x2d
   2a95a:	2100      	movs	r1, #0
   2a95c:	5499      	strb	r1, [r3, r2]
   2a95e:	687b      	ldr	r3, [r7, #4]
   2a960:	222e      	movs	r2, #46	; 0x2e
   2a962:	2100      	movs	r1, #0
   2a964:	5499      	strb	r1, [r3, r2]
   2a966:	687b      	ldr	r3, [r7, #4]
   2a968:	222f      	movs	r2, #47	; 0x2f
   2a96a:	2100      	movs	r1, #0
   2a96c:	5499      	strb	r1, [r3, r2]
   2a96e:	687b      	ldr	r3, [r7, #4]
   2a970:	2230      	movs	r2, #48	; 0x30
   2a972:	2100      	movs	r1, #0
   2a974:	5499      	strb	r1, [r3, r2]
   2a976:	687b      	ldr	r3, [r7, #4]
   2a978:	2231      	movs	r2, #49	; 0x31
   2a97a:	2100      	movs	r1, #0
   2a97c:	5499      	strb	r1, [r3, r2]
   2a97e:	687b      	ldr	r3, [r7, #4]
   2a980:	2232      	movs	r2, #50	; 0x32
   2a982:	2100      	movs	r1, #0
   2a984:	5499      	strb	r1, [r3, r2]
   2a986:	687b      	ldr	r3, [r7, #4]
   2a988:	2233      	movs	r2, #51	; 0x33
   2a98a:	2100      	movs	r1, #0
   2a98c:	5499      	strb	r1, [r3, r2]
   2a98e:	687b      	ldr	r3, [r7, #4]
   2a990:	2234      	movs	r2, #52	; 0x34
   2a992:	2100      	movs	r1, #0
   2a994:	5499      	strb	r1, [r3, r2]
   2a996:	687b      	ldr	r3, [r7, #4]
   2a998:	2235      	movs	r2, #53	; 0x35
   2a99a:	2100      	movs	r1, #0
   2a99c:	5499      	strb	r1, [r3, r2]
   2a99e:	687b      	ldr	r3, [r7, #4]
   2a9a0:	2236      	movs	r2, #54	; 0x36
   2a9a2:	2100      	movs	r1, #0
   2a9a4:	5499      	strb	r1, [r3, r2]
   2a9a6:	687b      	ldr	r3, [r7, #4]
   2a9a8:	2237      	movs	r2, #55	; 0x37
   2a9aa:	2100      	movs	r1, #0
   2a9ac:	5499      	strb	r1, [r3, r2]
   2a9ae:	687b      	ldr	r3, [r7, #4]
   2a9b0:	2238      	movs	r2, #56	; 0x38
   2a9b2:	2100      	movs	r1, #0
   2a9b4:	5499      	strb	r1, [r3, r2]
   2a9b6:	687b      	ldr	r3, [r7, #4]
   2a9b8:	2239      	movs	r2, #57	; 0x39
   2a9ba:	2100      	movs	r1, #0
   2a9bc:	5499      	strb	r1, [r3, r2]
   2a9be:	687b      	ldr	r3, [r7, #4]
   2a9c0:	223a      	movs	r2, #58	; 0x3a
   2a9c2:	2100      	movs	r1, #0
   2a9c4:	5499      	strb	r1, [r3, r2]
   2a9c6:	687b      	ldr	r3, [r7, #4]
   2a9c8:	223b      	movs	r2, #59	; 0x3b
   2a9ca:	2100      	movs	r1, #0
   2a9cc:	5499      	strb	r1, [r3, r2]
   2a9ce:	687b      	ldr	r3, [r7, #4]
   2a9d0:	223c      	movs	r2, #60	; 0x3c
   2a9d2:	2100      	movs	r1, #0
   2a9d4:	5499      	strb	r1, [r3, r2]
   2a9d6:	687b      	ldr	r3, [r7, #4]
   2a9d8:	223d      	movs	r2, #61	; 0x3d
   2a9da:	2100      	movs	r1, #0
   2a9dc:	5499      	strb	r1, [r3, r2]
   2a9de:	687b      	ldr	r3, [r7, #4]
   2a9e0:	223e      	movs	r2, #62	; 0x3e
   2a9e2:	2100      	movs	r1, #0
   2a9e4:	5499      	strb	r1, [r3, r2]
   2a9e6:	687b      	ldr	r3, [r7, #4]
   2a9e8:	223f      	movs	r2, #63	; 0x3f
   2a9ea:	2100      	movs	r1, #0
   2a9ec:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2a9ee:	687b      	ldr	r3, [r7, #4]
   2a9f0:	2240      	movs	r2, #64	; 0x40
   2a9f2:	2100      	movs	r1, #0
   2a9f4:	5499      	strb	r1, [r3, r2]
   2a9f6:	687b      	ldr	r3, [r7, #4]
   2a9f8:	2241      	movs	r2, #65	; 0x41
   2a9fa:	2100      	movs	r1, #0
   2a9fc:	5499      	strb	r1, [r3, r2]
   2a9fe:	687b      	ldr	r3, [r7, #4]
   2aa00:	2242      	movs	r2, #66	; 0x42
   2aa02:	2100      	movs	r1, #0
   2aa04:	5499      	strb	r1, [r3, r2]
   2aa06:	687b      	ldr	r3, [r7, #4]
   2aa08:	2243      	movs	r2, #67	; 0x43
   2aa0a:	2100      	movs	r1, #0
   2aa0c:	5499      	strb	r1, [r3, r2]
   2aa0e:	687b      	ldr	r3, [r7, #4]
   2aa10:	2244      	movs	r2, #68	; 0x44
   2aa12:	2100      	movs	r1, #0
   2aa14:	5499      	strb	r1, [r3, r2]
   2aa16:	687b      	ldr	r3, [r7, #4]
   2aa18:	2245      	movs	r2, #69	; 0x45
   2aa1a:	2100      	movs	r1, #0
   2aa1c:	5499      	strb	r1, [r3, r2]
   2aa1e:	687b      	ldr	r3, [r7, #4]
   2aa20:	2246      	movs	r2, #70	; 0x46
   2aa22:	2100      	movs	r1, #0
   2aa24:	5499      	strb	r1, [r3, r2]
   2aa26:	687b      	ldr	r3, [r7, #4]
   2aa28:	2247      	movs	r2, #71	; 0x47
   2aa2a:	2100      	movs	r1, #0
   2aa2c:	5499      	strb	r1, [r3, r2]
   2aa2e:	687b      	ldr	r3, [r7, #4]
   2aa30:	2248      	movs	r2, #72	; 0x48
   2aa32:	2100      	movs	r1, #0
   2aa34:	5499      	strb	r1, [r3, r2]
   2aa36:	687b      	ldr	r3, [r7, #4]
   2aa38:	2249      	movs	r2, #73	; 0x49
   2aa3a:	2100      	movs	r1, #0
   2aa3c:	5499      	strb	r1, [r3, r2]
   2aa3e:	687b      	ldr	r3, [r7, #4]
   2aa40:	224a      	movs	r2, #74	; 0x4a
   2aa42:	2100      	movs	r1, #0
   2aa44:	5499      	strb	r1, [r3, r2]
   2aa46:	687b      	ldr	r3, [r7, #4]
   2aa48:	224b      	movs	r2, #75	; 0x4b
   2aa4a:	2100      	movs	r1, #0
   2aa4c:	5499      	strb	r1, [r3, r2]
   2aa4e:	687b      	ldr	r3, [r7, #4]
   2aa50:	224c      	movs	r2, #76	; 0x4c
   2aa52:	2100      	movs	r1, #0
   2aa54:	5499      	strb	r1, [r3, r2]
   2aa56:	687b      	ldr	r3, [r7, #4]
   2aa58:	224d      	movs	r2, #77	; 0x4d
   2aa5a:	2100      	movs	r1, #0
   2aa5c:	5499      	strb	r1, [r3, r2]
   2aa5e:	687b      	ldr	r3, [r7, #4]
   2aa60:	224e      	movs	r2, #78	; 0x4e
   2aa62:	2100      	movs	r1, #0
   2aa64:	5499      	strb	r1, [r3, r2]
   2aa66:	687b      	ldr	r3, [r7, #4]
   2aa68:	224f      	movs	r2, #79	; 0x4f
   2aa6a:	2100      	movs	r1, #0
   2aa6c:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2aa6e:	687b      	ldr	r3, [r7, #4]
   2aa70:	2250      	movs	r2, #80	; 0x50
   2aa72:	2100      	movs	r1, #0
   2aa74:	5499      	strb	r1, [r3, r2]
   2aa76:	687b      	ldr	r3, [r7, #4]
   2aa78:	2251      	movs	r2, #81	; 0x51
   2aa7a:	2100      	movs	r1, #0
   2aa7c:	5499      	strb	r1, [r3, r2]
   2aa7e:	687b      	ldr	r3, [r7, #4]
   2aa80:	2252      	movs	r2, #82	; 0x52
   2aa82:	2100      	movs	r1, #0
   2aa84:	5499      	strb	r1, [r3, r2]
   2aa86:	687b      	ldr	r3, [r7, #4]
   2aa88:	2253      	movs	r2, #83	; 0x53
   2aa8a:	2100      	movs	r1, #0
   2aa8c:	5499      	strb	r1, [r3, r2]
   2aa8e:	687b      	ldr	r3, [r7, #4]
   2aa90:	2254      	movs	r2, #84	; 0x54
   2aa92:	2100      	movs	r1, #0
   2aa94:	5499      	strb	r1, [r3, r2]
   2aa96:	687b      	ldr	r3, [r7, #4]
   2aa98:	2255      	movs	r2, #85	; 0x55
   2aa9a:	2100      	movs	r1, #0
   2aa9c:	5499      	strb	r1, [r3, r2]
   2aa9e:	687b      	ldr	r3, [r7, #4]
   2aaa0:	2256      	movs	r2, #86	; 0x56
   2aaa2:	2100      	movs	r1, #0
   2aaa4:	5499      	strb	r1, [r3, r2]
   2aaa6:	687b      	ldr	r3, [r7, #4]
   2aaa8:	2257      	movs	r2, #87	; 0x57
   2aaaa:	2100      	movs	r1, #0
   2aaac:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2aaae:	687b      	ldr	r3, [r7, #4]
   2aab0:	2298      	movs	r2, #152	; 0x98
   2aab2:	2100      	movs	r1, #0
   2aab4:	5499      	strb	r1, [r3, r2]
   2aab6:	687b      	ldr	r3, [r7, #4]
   2aab8:	2200      	movs	r2, #0
   2aaba:	659a      	str	r2, [r3, #88]	; 0x58
   2aabc:	687b      	ldr	r3, [r7, #4]
   2aabe:	2200      	movs	r2, #0
   2aac0:	679a      	str	r2, [r3, #120]	; 0x78
   2aac2:	687b      	ldr	r3, [r7, #4]
   2aac4:	2299      	movs	r2, #153	; 0x99
   2aac6:	2100      	movs	r1, #0
   2aac8:	5499      	strb	r1, [r3, r2]
   2aaca:	687b      	ldr	r3, [r7, #4]
   2aacc:	2200      	movs	r2, #0
   2aace:	65da      	str	r2, [r3, #92]	; 0x5c
   2aad0:	687b      	ldr	r3, [r7, #4]
   2aad2:	2200      	movs	r2, #0
   2aad4:	67da      	str	r2, [r3, #124]	; 0x7c
   2aad6:	687b      	ldr	r3, [r7, #4]
   2aad8:	229a      	movs	r2, #154	; 0x9a
   2aada:	2100      	movs	r1, #0
   2aadc:	5499      	strb	r1, [r3, r2]
   2aade:	687b      	ldr	r3, [r7, #4]
   2aae0:	2200      	movs	r2, #0
   2aae2:	661a      	str	r2, [r3, #96]	; 0x60
   2aae4:	687b      	ldr	r3, [r7, #4]
   2aae6:	2280      	movs	r2, #128	; 0x80
   2aae8:	2100      	movs	r1, #0
   2aaea:	5099      	str	r1, [r3, r2]
   2aaec:	687b      	ldr	r3, [r7, #4]
   2aaee:	229b      	movs	r2, #155	; 0x9b
   2aaf0:	2100      	movs	r1, #0
   2aaf2:	5499      	strb	r1, [r3, r2]
   2aaf4:	687b      	ldr	r3, [r7, #4]
   2aaf6:	2200      	movs	r2, #0
   2aaf8:	665a      	str	r2, [r3, #100]	; 0x64
   2aafa:	687b      	ldr	r3, [r7, #4]
   2aafc:	2284      	movs	r2, #132	; 0x84
   2aafe:	2100      	movs	r1, #0
   2ab00:	5099      	str	r1, [r3, r2]
   2ab02:	687b      	ldr	r3, [r7, #4]
   2ab04:	229c      	movs	r2, #156	; 0x9c
   2ab06:	2100      	movs	r1, #0
   2ab08:	5499      	strb	r1, [r3, r2]
   2ab0a:	687b      	ldr	r3, [r7, #4]
   2ab0c:	2200      	movs	r2, #0
   2ab0e:	669a      	str	r2, [r3, #104]	; 0x68
   2ab10:	687b      	ldr	r3, [r7, #4]
   2ab12:	2288      	movs	r2, #136	; 0x88
   2ab14:	2100      	movs	r1, #0
   2ab16:	5099      	str	r1, [r3, r2]
   2ab18:	687b      	ldr	r3, [r7, #4]
   2ab1a:	229d      	movs	r2, #157	; 0x9d
   2ab1c:	2100      	movs	r1, #0
   2ab1e:	5499      	strb	r1, [r3, r2]
   2ab20:	687b      	ldr	r3, [r7, #4]
   2ab22:	2200      	movs	r2, #0
   2ab24:	66da      	str	r2, [r3, #108]	; 0x6c
   2ab26:	687b      	ldr	r3, [r7, #4]
   2ab28:	228c      	movs	r2, #140	; 0x8c
   2ab2a:	2100      	movs	r1, #0
   2ab2c:	5099      	str	r1, [r3, r2]
   2ab2e:	687b      	ldr	r3, [r7, #4]
   2ab30:	229e      	movs	r2, #158	; 0x9e
   2ab32:	2100      	movs	r1, #0
   2ab34:	5499      	strb	r1, [r3, r2]
   2ab36:	687b      	ldr	r3, [r7, #4]
   2ab38:	2200      	movs	r2, #0
   2ab3a:	671a      	str	r2, [r3, #112]	; 0x70
   2ab3c:	687b      	ldr	r3, [r7, #4]
   2ab3e:	2290      	movs	r2, #144	; 0x90
   2ab40:	2100      	movs	r1, #0
   2ab42:	5099      	str	r1, [r3, r2]
   2ab44:	687b      	ldr	r3, [r7, #4]
   2ab46:	229f      	movs	r2, #159	; 0x9f
   2ab48:	2100      	movs	r1, #0
   2ab4a:	5499      	strb	r1, [r3, r2]
   2ab4c:	687b      	ldr	r3, [r7, #4]
   2ab4e:	2200      	movs	r2, #0
   2ab50:	675a      	str	r2, [r3, #116]	; 0x74
   2ab52:	687b      	ldr	r3, [r7, #4]
   2ab54:	2294      	movs	r2, #148	; 0x94
   2ab56:	2100      	movs	r1, #0
   2ab58:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2ab5a:	687b      	ldr	r3, [r7, #4]
   2ab5c:	22a0      	movs	r2, #160	; 0xa0
   2ab5e:	2101      	movs	r1, #1
   2ab60:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2ab62:	687b      	ldr	r3, [r7, #4]
   2ab64:	22a1      	movs	r2, #161	; 0xa1
   2ab66:	2100      	movs	r1, #0
   2ab68:	5499      	strb	r1, [r3, r2]
}
   2ab6a:	46c0      	nop			; (mov r8, r8)
   2ab6c:	46bd      	mov	sp, r7
   2ab6e:	b005      	add	sp, #20
   2ab70:	bd90      	pop	{r4, r7, pc}
   2ab72:	46c0      	nop			; (mov r8, r8)
   2ab74:	0002a871 	.word	0x0002a871
   2ab78:	00039dd4 	.word	0x00039dd4

0002ab7c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2ab7c:	b580      	push	{r7, lr}
   2ab7e:	b086      	sub	sp, #24
   2ab80:	af00      	add	r7, sp, #0
   2ab82:	60b9      	str	r1, [r7, #8]
   2ab84:	607a      	str	r2, [r7, #4]
   2ab86:	230f      	movs	r3, #15
   2ab88:	18fb      	adds	r3, r7, r3
   2ab8a:	1c02      	adds	r2, r0, #0
   2ab8c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2ab8e:	2300      	movs	r3, #0
   2ab90:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2ab92:	2300      	movs	r3, #0
   2ab94:	613b      	str	r3, [r7, #16]
   2ab96:	e01d      	b.n	2abd4 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2ab98:	68ba      	ldr	r2, [r7, #8]
   2ab9a:	693b      	ldr	r3, [r7, #16]
   2ab9c:	18d3      	adds	r3, r2, r3
   2ab9e:	3310      	adds	r3, #16
   2aba0:	781b      	ldrb	r3, [r3, #0]
   2aba2:	2b01      	cmp	r3, #1
   2aba4:	d113      	bne.n	2abce <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2aba6:	230f      	movs	r3, #15
   2aba8:	18fb      	adds	r3, r7, r3
   2abaa:	781b      	ldrb	r3, [r3, #0]
   2abac:	4a1b      	ldr	r2, [pc, #108]	; (2ac1c <_tcc_build_ctrla+0xa0>)
   2abae:	5cd3      	ldrb	r3, [r2, r3]
   2abb0:	001a      	movs	r2, r3
   2abb2:	693b      	ldr	r3, [r7, #16]
   2abb4:	429a      	cmp	r2, r3
   2abb6:	da01      	bge.n	2abbc <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2abb8:	2317      	movs	r3, #23
   2abba:	e02a      	b.n	2ac12 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2abbc:	2380      	movs	r3, #128	; 0x80
   2abbe:	045a      	lsls	r2, r3, #17
   2abc0:	693b      	ldr	r3, [r7, #16]
   2abc2:	409a      	lsls	r2, r3
   2abc4:	0013      	movs	r3, r2
   2abc6:	001a      	movs	r2, r3
   2abc8:	697b      	ldr	r3, [r7, #20]
   2abca:	4313      	orrs	r3, r2
   2abcc:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2abce:	693b      	ldr	r3, [r7, #16]
   2abd0:	3301      	adds	r3, #1
   2abd2:	613b      	str	r3, [r7, #16]
   2abd4:	693b      	ldr	r3, [r7, #16]
   2abd6:	2b03      	cmp	r3, #3
   2abd8:	ddde      	ble.n	2ab98 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2abda:	68bb      	ldr	r3, [r7, #8]
   2abdc:	22a1      	movs	r2, #161	; 0xa1
   2abde:	5c9b      	ldrb	r3, [r3, r2]
   2abe0:	2b00      	cmp	r3, #0
   2abe2:	d004      	beq.n	2abee <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2abe4:	697b      	ldr	r3, [r7, #20]
   2abe6:	2280      	movs	r2, #128	; 0x80
   2abe8:	0112      	lsls	r2, r2, #4
   2abea:	4313      	orrs	r3, r2
   2abec:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2abee:	68bb      	ldr	r3, [r7, #8]
   2abf0:	7b1b      	ldrb	r3, [r3, #12]
   2abf2:	031b      	lsls	r3, r3, #12
   2abf4:	001a      	movs	r2, r3
   2abf6:	697b      	ldr	r3, [r7, #20]
   2abf8:	4313      	orrs	r3, r2
   2abfa:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2abfc:	68bb      	ldr	r3, [r7, #8]
   2abfe:	7adb      	ldrb	r3, [r3, #11]
   2ac00:	021b      	lsls	r3, r3, #8
   2ac02:	001a      	movs	r2, r3
   2ac04:	697b      	ldr	r3, [r7, #20]
   2ac06:	4313      	orrs	r3, r2
   2ac08:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2ac0a:	687b      	ldr	r3, [r7, #4]
   2ac0c:	697a      	ldr	r2, [r7, #20]
   2ac0e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2ac10:	2300      	movs	r3, #0
}
   2ac12:	0018      	movs	r0, r3
   2ac14:	46bd      	mov	sp, r7
   2ac16:	b006      	add	sp, #24
   2ac18:	bd80      	pop	{r7, pc}
   2ac1a:	46c0      	nop			; (mov r8, r8)
   2ac1c:	00039de0 	.word	0x00039de0

0002ac20 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2ac20:	b580      	push	{r7, lr}
   2ac22:	b086      	sub	sp, #24
   2ac24:	af00      	add	r7, sp, #0
   2ac26:	60b9      	str	r1, [r7, #8]
   2ac28:	607a      	str	r2, [r7, #4]
   2ac2a:	230f      	movs	r3, #15
   2ac2c:	18fb      	adds	r3, r7, r3
   2ac2e:	1c02      	adds	r2, r0, #0
   2ac30:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2ac32:	2317      	movs	r3, #23
   2ac34:	18fb      	adds	r3, r7, r3
   2ac36:	2200      	movs	r2, #0
   2ac38:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2ac3a:	68bb      	ldr	r3, [r7, #8]
   2ac3c:	7a1b      	ldrb	r3, [r3, #8]
   2ac3e:	2b00      	cmp	r3, #0
   2ac40:	d007      	beq.n	2ac52 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2ac42:	2317      	movs	r3, #23
   2ac44:	18fb      	adds	r3, r7, r3
   2ac46:	2217      	movs	r2, #23
   2ac48:	18ba      	adds	r2, r7, r2
   2ac4a:	7812      	ldrb	r2, [r2, #0]
   2ac4c:	2104      	movs	r1, #4
   2ac4e:	430a      	orrs	r2, r1
   2ac50:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2ac52:	68bb      	ldr	r3, [r7, #8]
   2ac54:	7a5b      	ldrb	r3, [r3, #9]
   2ac56:	2b01      	cmp	r3, #1
   2ac58:	d107      	bne.n	2ac6a <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2ac5a:	2317      	movs	r3, #23
   2ac5c:	18fb      	adds	r3, r7, r3
   2ac5e:	2217      	movs	r2, #23
   2ac60:	18ba      	adds	r2, r7, r2
   2ac62:	7812      	ldrb	r2, [r2, #0]
   2ac64:	2101      	movs	r1, #1
   2ac66:	430a      	orrs	r2, r1
   2ac68:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2ac6a:	687b      	ldr	r3, [r7, #4]
   2ac6c:	2217      	movs	r2, #23
   2ac6e:	18ba      	adds	r2, r7, r2
   2ac70:	7812      	ldrb	r2, [r2, #0]
   2ac72:	701a      	strb	r2, [r3, #0]
}
   2ac74:	46c0      	nop			; (mov r8, r8)
   2ac76:	46bd      	mov	sp, r7
   2ac78:	b006      	add	sp, #24
   2ac7a:	bd80      	pop	{r7, pc}

0002ac7c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2ac7c:	b580      	push	{r7, lr}
   2ac7e:	b088      	sub	sp, #32
   2ac80:	af00      	add	r7, sp, #0
   2ac82:	60b9      	str	r1, [r7, #8]
   2ac84:	607a      	str	r2, [r7, #4]
   2ac86:	230f      	movs	r3, #15
   2ac88:	18fb      	adds	r3, r7, r3
   2ac8a:	1c02      	adds	r2, r0, #0
   2ac8c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2ac8e:	230f      	movs	r3, #15
   2ac90:	18fb      	adds	r3, r7, r3
   2ac92:	781a      	ldrb	r2, [r3, #0]
   2ac94:	231b      	movs	r3, #27
   2ac96:	18fb      	adds	r3, r7, r3
   2ac98:	493e      	ldr	r1, [pc, #248]	; (2ad94 <_tcc_build_faults+0x118>)
   2ac9a:	5c8a      	ldrb	r2, [r1, r2]
   2ac9c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2ac9e:	2300      	movs	r3, #0
   2aca0:	61fb      	str	r3, [r7, #28]
   2aca2:	e06e      	b.n	2ad82 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2aca4:	69fa      	ldr	r2, [r7, #28]
   2aca6:	0013      	movs	r3, r2
   2aca8:	009b      	lsls	r3, r3, #2
   2acaa:	189b      	adds	r3, r3, r2
   2acac:	005b      	lsls	r3, r3, #1
   2acae:	3328      	adds	r3, #40	; 0x28
   2acb0:	68ba      	ldr	r2, [r7, #8]
   2acb2:	18d3      	adds	r3, r2, r3
   2acb4:	3304      	adds	r3, #4
   2acb6:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2acb8:	697b      	ldr	r3, [r7, #20]
   2acba:	7a5b      	ldrb	r3, [r3, #9]
   2acbc:	221b      	movs	r2, #27
   2acbe:	18ba      	adds	r2, r7, r2
   2acc0:	7812      	ldrb	r2, [r2, #0]
   2acc2:	429a      	cmp	r2, r3
   2acc4:	d801      	bhi.n	2acca <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2acc6:	2317      	movs	r3, #23
   2acc8:	e05f      	b.n	2ad8a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2acca:	697b      	ldr	r3, [r7, #20]
   2accc:	781b      	ldrb	r3, [r3, #0]
   2acce:	2b0f      	cmp	r3, #15
   2acd0:	d901      	bls.n	2acd6 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2acd2:	2317      	movs	r3, #23
   2acd4:	e059      	b.n	2ad8a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2acd6:	697b      	ldr	r3, [r7, #20]
   2acd8:	781b      	ldrb	r3, [r3, #0]
   2acda:	061b      	lsls	r3, r3, #24
   2acdc:	001a      	movs	r2, r3
   2acde:	23f0      	movs	r3, #240	; 0xf0
   2ace0:	051b      	lsls	r3, r3, #20
   2ace2:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2ace4:	697b      	ldr	r3, [r7, #20]
   2ace6:	785b      	ldrb	r3, [r3, #1]
   2ace8:	041b      	lsls	r3, r3, #16
   2acea:	0019      	movs	r1, r3
   2acec:	23ff      	movs	r3, #255	; 0xff
   2acee:	041b      	lsls	r3, r3, #16
   2acf0:	400b      	ands	r3, r1
   2acf2:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2acf4:	697b      	ldr	r3, [r7, #20]
   2acf6:	789b      	ldrb	r3, [r3, #2]
   2acf8:	2b00      	cmp	r3, #0
   2acfa:	d001      	beq.n	2ad00 <_tcc_build_faults+0x84>
   2acfc:	2380      	movs	r3, #128	; 0x80
   2acfe:	e000      	b.n	2ad02 <_tcc_build_faults+0x86>
   2ad00:	2300      	movs	r3, #0
   2ad02:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2ad04:	697b      	ldr	r3, [r7, #20]
   2ad06:	78db      	ldrb	r3, [r3, #3]
   2ad08:	2b00      	cmp	r3, #0
   2ad0a:	d001      	beq.n	2ad10 <_tcc_build_faults+0x94>
   2ad0c:	2308      	movs	r3, #8
   2ad0e:	e000      	b.n	2ad12 <_tcc_build_faults+0x96>
   2ad10:	2300      	movs	r3, #0
   2ad12:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2ad14:	697b      	ldr	r3, [r7, #20]
   2ad16:	791b      	ldrb	r3, [r3, #4]
   2ad18:	2b00      	cmp	r3, #0
   2ad1a:	d001      	beq.n	2ad20 <_tcc_build_faults+0xa4>
   2ad1c:	2310      	movs	r3, #16
   2ad1e:	e000      	b.n	2ad22 <_tcc_build_faults+0xa6>
   2ad20:	2300      	movs	r3, #0
   2ad22:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2ad24:	697b      	ldr	r3, [r7, #20]
   2ad26:	795b      	ldrb	r3, [r3, #5]
   2ad28:	0019      	movs	r1, r3
   2ad2a:	2303      	movs	r3, #3
   2ad2c:	400b      	ands	r3, r1
   2ad2e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2ad30:	697b      	ldr	r3, [r7, #20]
   2ad32:	799b      	ldrb	r3, [r3, #6]
   2ad34:	015b      	lsls	r3, r3, #5
   2ad36:	0019      	movs	r1, r3
   2ad38:	2360      	movs	r3, #96	; 0x60
   2ad3a:	400b      	ands	r3, r1
   2ad3c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2ad3e:	697b      	ldr	r3, [r7, #20]
   2ad40:	79db      	ldrb	r3, [r3, #7]
   2ad42:	021b      	lsls	r3, r3, #8
   2ad44:	0019      	movs	r1, r3
   2ad46:	23c0      	movs	r3, #192	; 0xc0
   2ad48:	009b      	lsls	r3, r3, #2
   2ad4a:	400b      	ands	r3, r1
   2ad4c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2ad4e:	697b      	ldr	r3, [r7, #20]
   2ad50:	7a1b      	ldrb	r3, [r3, #8]
   2ad52:	031b      	lsls	r3, r3, #12
   2ad54:	0019      	movs	r1, r3
   2ad56:	23e0      	movs	r3, #224	; 0xe0
   2ad58:	01db      	lsls	r3, r3, #7
   2ad5a:	400b      	ands	r3, r1
   2ad5c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2ad5e:	697b      	ldr	r3, [r7, #20]
   2ad60:	7a5b      	ldrb	r3, [r3, #9]
   2ad62:	029b      	lsls	r3, r3, #10
   2ad64:	0019      	movs	r1, r3
   2ad66:	23c0      	movs	r3, #192	; 0xc0
   2ad68:	011b      	lsls	r3, r3, #4
   2ad6a:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2ad6c:	4313      	orrs	r3, r2
   2ad6e:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2ad70:	69fb      	ldr	r3, [r7, #28]
   2ad72:	009b      	lsls	r3, r3, #2
   2ad74:	687a      	ldr	r2, [r7, #4]
   2ad76:	18d3      	adds	r3, r2, r3
   2ad78:	693a      	ldr	r2, [r7, #16]
   2ad7a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2ad7c:	69fb      	ldr	r3, [r7, #28]
   2ad7e:	3301      	adds	r3, #1
   2ad80:	61fb      	str	r3, [r7, #28]
   2ad82:	69fb      	ldr	r3, [r7, #28]
   2ad84:	2b01      	cmp	r3, #1
   2ad86:	dd8d      	ble.n	2aca4 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2ad88:	2300      	movs	r3, #0
}
   2ad8a:	0018      	movs	r0, r3
   2ad8c:	46bd      	mov	sp, r7
   2ad8e:	b008      	add	sp, #32
   2ad90:	bd80      	pop	{r7, pc}
   2ad92:	46c0      	nop			; (mov r8, r8)
   2ad94:	00039de0 	.word	0x00039de0

0002ad98 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2ad98:	b580      	push	{r7, lr}
   2ad9a:	b088      	sub	sp, #32
   2ad9c:	af00      	add	r7, sp, #0
   2ad9e:	60b9      	str	r1, [r7, #8]
   2ada0:	607a      	str	r2, [r7, #4]
   2ada2:	230f      	movs	r3, #15
   2ada4:	18fb      	adds	r3, r7, r3
   2ada6:	1c02      	adds	r2, r0, #0
   2ada8:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2adaa:	230f      	movs	r3, #15
   2adac:	18fb      	adds	r3, r7, r3
   2adae:	781a      	ldrb	r2, [r3, #0]
   2adb0:	2317      	movs	r3, #23
   2adb2:	18fb      	adds	r3, r7, r3
   2adb4:	492d      	ldr	r1, [pc, #180]	; (2ae6c <_tcc_build_drvctrl+0xd4>)
   2adb6:	5c8a      	ldrb	r2, [r1, r2]
   2adb8:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2adba:	2300      	movs	r3, #0
   2adbc:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2adbe:	2300      	movs	r3, #0
   2adc0:	61fb      	str	r3, [r7, #28]
   2adc2:	e048      	b.n	2ae56 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2adc4:	68ba      	ldr	r2, [r7, #8]
   2adc6:	2150      	movs	r1, #80	; 0x50
   2adc8:	69fb      	ldr	r3, [r7, #28]
   2adca:	18d3      	adds	r3, r2, r3
   2adcc:	185b      	adds	r3, r3, r1
   2adce:	781b      	ldrb	r3, [r3, #0]
   2add0:	2b00      	cmp	r3, #0
   2add2:	d010      	beq.n	2adf6 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2add4:	2317      	movs	r3, #23
   2add6:	18fb      	adds	r3, r7, r3
   2add8:	781a      	ldrb	r2, [r3, #0]
   2adda:	69fb      	ldr	r3, [r7, #28]
   2addc:	429a      	cmp	r2, r3
   2adde:	d801      	bhi.n	2ade4 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2ade0:	2317      	movs	r3, #23
   2ade2:	e03f      	b.n	2ae64 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2ade4:	2380      	movs	r3, #128	; 0x80
   2ade6:	025a      	lsls	r2, r3, #9
   2ade8:	69fb      	ldr	r3, [r7, #28]
   2adea:	409a      	lsls	r2, r3
   2adec:	0013      	movs	r3, r2
   2adee:	001a      	movs	r2, r3
   2adf0:	69bb      	ldr	r3, [r7, #24]
   2adf2:	4313      	orrs	r3, r2
   2adf4:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2adf6:	68ba      	ldr	r2, [r7, #8]
   2adf8:	69fb      	ldr	r3, [r7, #28]
   2adfa:	331c      	adds	r3, #28
   2adfc:	005b      	lsls	r3, r3, #1
   2adfe:	18d3      	adds	r3, r2, r3
   2ae00:	3309      	adds	r3, #9
   2ae02:	781b      	ldrb	r3, [r3, #0]
   2ae04:	2b00      	cmp	r3, #0
   2ae06:	d023      	beq.n	2ae50 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2ae08:	2317      	movs	r3, #23
   2ae0a:	18fb      	adds	r3, r7, r3
   2ae0c:	781a      	ldrb	r2, [r3, #0]
   2ae0e:	69fb      	ldr	r3, [r7, #28]
   2ae10:	429a      	cmp	r2, r3
   2ae12:	d801      	bhi.n	2ae18 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2ae14:	2317      	movs	r3, #23
   2ae16:	e025      	b.n	2ae64 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2ae18:	68ba      	ldr	r2, [r7, #8]
   2ae1a:	69fb      	ldr	r3, [r7, #28]
   2ae1c:	331c      	adds	r3, #28
   2ae1e:	005b      	lsls	r3, r3, #1
   2ae20:	18d3      	adds	r3, r2, r3
   2ae22:	3309      	adds	r3, #9
   2ae24:	781b      	ldrb	r3, [r3, #0]
   2ae26:	2b02      	cmp	r3, #2
   2ae28:	d10a      	bne.n	2ae40 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2ae2a:	2302      	movs	r3, #2
   2ae2c:	33ff      	adds	r3, #255	; 0xff
   2ae2e:	001a      	movs	r2, r3
   2ae30:	69fb      	ldr	r3, [r7, #28]
   2ae32:	409a      	lsls	r2, r3
   2ae34:	0013      	movs	r3, r2
   2ae36:	001a      	movs	r2, r3
   2ae38:	69bb      	ldr	r3, [r7, #24]
   2ae3a:	4313      	orrs	r3, r2
   2ae3c:	61bb      	str	r3, [r7, #24]
   2ae3e:	e007      	b.n	2ae50 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2ae40:	2201      	movs	r2, #1
   2ae42:	69fb      	ldr	r3, [r7, #28]
   2ae44:	409a      	lsls	r2, r3
   2ae46:	0013      	movs	r3, r2
   2ae48:	001a      	movs	r2, r3
   2ae4a:	69bb      	ldr	r3, [r7, #24]
   2ae4c:	4313      	orrs	r3, r2
   2ae4e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2ae50:	69fb      	ldr	r3, [r7, #28]
   2ae52:	3301      	adds	r3, #1
   2ae54:	61fb      	str	r3, [r7, #28]
   2ae56:	69fb      	ldr	r3, [r7, #28]
   2ae58:	2b07      	cmp	r3, #7
   2ae5a:	d9b3      	bls.n	2adc4 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2ae5c:	687b      	ldr	r3, [r7, #4]
   2ae5e:	69ba      	ldr	r2, [r7, #24]
   2ae60:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2ae62:	2300      	movs	r3, #0
}
   2ae64:	0018      	movs	r0, r3
   2ae66:	46bd      	mov	sp, r7
   2ae68:	b008      	add	sp, #32
   2ae6a:	bd80      	pop	{r7, pc}
   2ae6c:	00039de4 	.word	0x00039de4

0002ae70 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2ae70:	b580      	push	{r7, lr}
   2ae72:	b088      	sub	sp, #32
   2ae74:	af00      	add	r7, sp, #0
   2ae76:	60b9      	str	r1, [r7, #8]
   2ae78:	607a      	str	r2, [r7, #4]
   2ae7a:	230f      	movs	r3, #15
   2ae7c:	18fb      	adds	r3, r7, r3
   2ae7e:	1c02      	adds	r2, r0, #0
   2ae80:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2ae82:	230f      	movs	r3, #15
   2ae84:	18fb      	adds	r3, r7, r3
   2ae86:	781a      	ldrb	r2, [r3, #0]
   2ae88:	2317      	movs	r3, #23
   2ae8a:	18fb      	adds	r3, r7, r3
   2ae8c:	491d      	ldr	r1, [pc, #116]	; (2af04 <_tcc_build_waves+0x94>)
   2ae8e:	5c8a      	ldrb	r2, [r1, r2]
   2ae90:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2ae92:	68bb      	ldr	r3, [r7, #8]
   2ae94:	3310      	adds	r3, #16
   2ae96:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2ae98:	693b      	ldr	r3, [r7, #16]
   2ae9a:	7a5b      	ldrb	r3, [r3, #9]
   2ae9c:	011b      	lsls	r3, r3, #4
   2ae9e:	001a      	movs	r2, r3
   2aea0:	2330      	movs	r3, #48	; 0x30
   2aea2:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2aea4:	693b      	ldr	r3, [r7, #16]
   2aea6:	7a1b      	ldrb	r3, [r3, #8]
   2aea8:	0019      	movs	r1, r3
   2aeaa:	2307      	movs	r3, #7
   2aeac:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2aeae:	4313      	orrs	r3, r2
   2aeb0:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2aeb2:	2300      	movs	r3, #0
   2aeb4:	61fb      	str	r3, [r7, #28]
   2aeb6:	e01a      	b.n	2aeee <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2aeb8:	693a      	ldr	r2, [r7, #16]
   2aeba:	69fb      	ldr	r3, [r7, #28]
   2aebc:	18d3      	adds	r3, r2, r3
   2aebe:	3304      	adds	r3, #4
   2aec0:	781b      	ldrb	r3, [r3, #0]
   2aec2:	2b00      	cmp	r3, #0
   2aec4:	d010      	beq.n	2aee8 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2aec6:	2317      	movs	r3, #23
   2aec8:	18fb      	adds	r3, r7, r3
   2aeca:	781a      	ldrb	r2, [r3, #0]
   2aecc:	69fb      	ldr	r3, [r7, #28]
   2aece:	429a      	cmp	r2, r3
   2aed0:	dc01      	bgt.n	2aed6 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2aed2:	2317      	movs	r3, #23
   2aed4:	e012      	b.n	2aefc <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2aed6:	2380      	movs	r3, #128	; 0x80
   2aed8:	025a      	lsls	r2, r3, #9
   2aeda:	69fb      	ldr	r3, [r7, #28]
   2aedc:	409a      	lsls	r2, r3
   2aede:	0013      	movs	r3, r2
   2aee0:	001a      	movs	r2, r3
   2aee2:	69bb      	ldr	r3, [r7, #24]
   2aee4:	4313      	orrs	r3, r2
   2aee6:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2aee8:	69fb      	ldr	r3, [r7, #28]
   2aeea:	3301      	adds	r3, #1
   2aeec:	61fb      	str	r3, [r7, #28]
   2aeee:	69fb      	ldr	r3, [r7, #28]
   2aef0:	2b03      	cmp	r3, #3
   2aef2:	dde1      	ble.n	2aeb8 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2aef4:	687b      	ldr	r3, [r7, #4]
   2aef6:	69ba      	ldr	r2, [r7, #24]
   2aef8:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2aefa:	2300      	movs	r3, #0
}
   2aefc:	0018      	movs	r0, r3
   2aefe:	46bd      	mov	sp, r7
   2af00:	b008      	add	sp, #32
   2af02:	bd80      	pop	{r7, pc}
   2af04:	00039de0 	.word	0x00039de0

0002af08 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2af08:	b590      	push	{r4, r7, lr}
   2af0a:	b091      	sub	sp, #68	; 0x44
   2af0c:	af00      	add	r7, sp, #0
   2af0e:	60f8      	str	r0, [r7, #12]
   2af10:	60b9      	str	r1, [r7, #8]
   2af12:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2af14:	233b      	movs	r3, #59	; 0x3b
   2af16:	18fc      	adds	r4, r7, r3
   2af18:	68bb      	ldr	r3, [r7, #8]
   2af1a:	0018      	movs	r0, r3
   2af1c:	4bc4      	ldr	r3, [pc, #784]	; (2b230 <tcc_init+0x328>)
   2af1e:	4798      	blx	r3
   2af20:	0003      	movs	r3, r0
   2af22:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2af24:	233b      	movs	r3, #59	; 0x3b
   2af26:	18fb      	adds	r3, r7, r3
   2af28:	781a      	ldrb	r2, [r3, #0]
   2af2a:	4bc2      	ldr	r3, [pc, #776]	; (2b234 <tcc_init+0x32c>)
   2af2c:	0092      	lsls	r2, r2, #2
   2af2e:	58d3      	ldr	r3, [r2, r3]
   2af30:	0019      	movs	r1, r3
   2af32:	2002      	movs	r0, #2
   2af34:	4bc0      	ldr	r3, [pc, #768]	; (2b238 <tcc_init+0x330>)
   2af36:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2af38:	68bb      	ldr	r3, [r7, #8]
   2af3a:	681b      	ldr	r3, [r3, #0]
   2af3c:	2202      	movs	r2, #2
   2af3e:	4013      	ands	r3, r2
   2af40:	d001      	beq.n	2af46 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2af42:	231c      	movs	r3, #28
   2af44:	e1be      	b.n	2b2c4 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2af46:	68bb      	ldr	r3, [r7, #8]
   2af48:	681b      	ldr	r3, [r3, #0]
   2af4a:	2201      	movs	r2, #1
   2af4c:	4013      	ands	r3, r2
   2af4e:	d001      	beq.n	2af54 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2af50:	231c      	movs	r3, #28
   2af52:	e1b7      	b.n	2b2c4 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2af54:	233b      	movs	r3, #59	; 0x3b
   2af56:	18fb      	adds	r3, r7, r3
   2af58:	781a      	ldrb	r2, [r3, #0]
   2af5a:	4bb8      	ldr	r3, [pc, #736]	; (2b23c <tcc_init+0x334>)
   2af5c:	0092      	lsls	r2, r2, #2
   2af5e:	58d3      	ldr	r3, [r2, r3]
   2af60:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2af62:	687b      	ldr	r3, [r7, #4]
   2af64:	681a      	ldr	r2, [r3, #0]
   2af66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2af68:	429a      	cmp	r2, r3
   2af6a:	d804      	bhi.n	2af76 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2af6c:	687b      	ldr	r3, [r7, #4]
   2af6e:	685a      	ldr	r2, [r3, #4]
   2af70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2af72:	429a      	cmp	r2, r3
   2af74:	d901      	bls.n	2af7a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2af76:	2317      	movs	r3, #23
   2af78:	e1a4      	b.n	2b2c4 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2af7a:	2300      	movs	r3, #0
   2af7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2af7e:	e00e      	b.n	2af9e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2af80:	687a      	ldr	r2, [r7, #4]
   2af82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2af84:	3306      	adds	r3, #6
   2af86:	009b      	lsls	r3, r3, #2
   2af88:	18d3      	adds	r3, r2, r3
   2af8a:	3304      	adds	r3, #4
   2af8c:	681a      	ldr	r2, [r3, #0]
   2af8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2af90:	429a      	cmp	r2, r3
   2af92:	d901      	bls.n	2af98 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2af94:	2317      	movs	r3, #23
   2af96:	e195      	b.n	2b2c4 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2af98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2af9a:	3301      	adds	r3, #1
   2af9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2af9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2afa0:	2b03      	cmp	r3, #3
   2afa2:	dded      	ble.n	2af80 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2afa4:	2300      	movs	r3, #0
   2afa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2afa8:	e019      	b.n	2afde <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2afaa:	687a      	ldr	r2, [r7, #4]
   2afac:	2198      	movs	r1, #152	; 0x98
   2afae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2afb0:	18d3      	adds	r3, r2, r3
   2afb2:	185b      	adds	r3, r3, r1
   2afb4:	781b      	ldrb	r3, [r3, #0]
   2afb6:	2201      	movs	r2, #1
   2afb8:	4053      	eors	r3, r2
   2afba:	b2db      	uxtb	r3, r3
   2afbc:	2b00      	cmp	r3, #0
   2afbe:	d10a      	bne.n	2afd6 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2afc0:	233b      	movs	r3, #59	; 0x3b
   2afc2:	18fb      	adds	r3, r7, r3
   2afc4:	781b      	ldrb	r3, [r3, #0]
   2afc6:	4a9e      	ldr	r2, [pc, #632]	; (2b240 <tcc_init+0x338>)
   2afc8:	5cd3      	ldrb	r3, [r2, r3]
   2afca:	001a      	movs	r2, r3
   2afcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2afce:	429a      	cmp	r2, r3
   2afd0:	dc02      	bgt.n	2afd8 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2afd2:	2317      	movs	r3, #23
   2afd4:	e176      	b.n	2b2c4 <tcc_init+0x3bc>
			continue;
   2afd6:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2afd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2afda:	3301      	adds	r3, #1
   2afdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   2afde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2afe0:	2b07      	cmp	r3, #7
   2afe2:	dde2      	ble.n	2afaa <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2afe4:	2300      	movs	r3, #0
   2afe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2afe8:	2333      	movs	r3, #51	; 0x33
   2afea:	18fc      	adds	r4, r7, r3
   2afec:	232c      	movs	r3, #44	; 0x2c
   2afee:	18fa      	adds	r2, r7, r3
   2aff0:	6879      	ldr	r1, [r7, #4]
   2aff2:	233b      	movs	r3, #59	; 0x3b
   2aff4:	18fb      	adds	r3, r7, r3
   2aff6:	781b      	ldrb	r3, [r3, #0]
   2aff8:	0018      	movs	r0, r3
   2affa:	4b92      	ldr	r3, [pc, #584]	; (2b244 <tcc_init+0x33c>)
   2affc:	4798      	blx	r3
   2affe:	0003      	movs	r3, r0
   2b000:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b002:	2333      	movs	r3, #51	; 0x33
   2b004:	18fb      	adds	r3, r7, r3
   2b006:	781b      	ldrb	r3, [r3, #0]
   2b008:	2b00      	cmp	r3, #0
   2b00a:	d003      	beq.n	2b014 <tcc_init+0x10c>
		return status;
   2b00c:	2333      	movs	r3, #51	; 0x33
   2b00e:	18fb      	adds	r3, r7, r3
   2b010:	781b      	ldrb	r3, [r3, #0]
   2b012:	e157      	b.n	2b2c4 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2b014:	232b      	movs	r3, #43	; 0x2b
   2b016:	18fa      	adds	r2, r7, r3
   2b018:	6879      	ldr	r1, [r7, #4]
   2b01a:	233b      	movs	r3, #59	; 0x3b
   2b01c:	18fb      	adds	r3, r7, r3
   2b01e:	781b      	ldrb	r3, [r3, #0]
   2b020:	0018      	movs	r0, r3
   2b022:	4b89      	ldr	r3, [pc, #548]	; (2b248 <tcc_init+0x340>)
   2b024:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2b026:	2333      	movs	r3, #51	; 0x33
   2b028:	18fc      	adds	r4, r7, r3
   2b02a:	2320      	movs	r3, #32
   2b02c:	18fa      	adds	r2, r7, r3
   2b02e:	6879      	ldr	r1, [r7, #4]
   2b030:	233b      	movs	r3, #59	; 0x3b
   2b032:	18fb      	adds	r3, r7, r3
   2b034:	781b      	ldrb	r3, [r3, #0]
   2b036:	0018      	movs	r0, r3
   2b038:	4b84      	ldr	r3, [pc, #528]	; (2b24c <tcc_init+0x344>)
   2b03a:	4798      	blx	r3
   2b03c:	0003      	movs	r3, r0
   2b03e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b040:	2333      	movs	r3, #51	; 0x33
   2b042:	18fb      	adds	r3, r7, r3
   2b044:	781b      	ldrb	r3, [r3, #0]
   2b046:	2b00      	cmp	r3, #0
   2b048:	d003      	beq.n	2b052 <tcc_init+0x14a>
		return status;
   2b04a:	2333      	movs	r3, #51	; 0x33
   2b04c:	18fb      	adds	r3, r7, r3
   2b04e:	781b      	ldrb	r3, [r3, #0]
   2b050:	e138      	b.n	2b2c4 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2b052:	2300      	movs	r3, #0
   2b054:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2b056:	2333      	movs	r3, #51	; 0x33
   2b058:	18fc      	adds	r4, r7, r3
   2b05a:	231c      	movs	r3, #28
   2b05c:	18fa      	adds	r2, r7, r3
   2b05e:	6879      	ldr	r1, [r7, #4]
   2b060:	233b      	movs	r3, #59	; 0x3b
   2b062:	18fb      	adds	r3, r7, r3
   2b064:	781b      	ldrb	r3, [r3, #0]
   2b066:	0018      	movs	r0, r3
   2b068:	4b79      	ldr	r3, [pc, #484]	; (2b250 <tcc_init+0x348>)
   2b06a:	4798      	blx	r3
   2b06c:	0003      	movs	r3, r0
   2b06e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b070:	2333      	movs	r3, #51	; 0x33
   2b072:	18fb      	adds	r3, r7, r3
   2b074:	781b      	ldrb	r3, [r3, #0]
   2b076:	2b00      	cmp	r3, #0
   2b078:	d003      	beq.n	2b082 <tcc_init+0x17a>
		return status;
   2b07a:	2333      	movs	r3, #51	; 0x33
   2b07c:	18fb      	adds	r3, r7, r3
   2b07e:	781b      	ldrb	r3, [r3, #0]
   2b080:	e120      	b.n	2b2c4 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2b082:	2333      	movs	r3, #51	; 0x33
   2b084:	18fc      	adds	r4, r7, r3
   2b086:	2318      	movs	r3, #24
   2b088:	18fa      	adds	r2, r7, r3
   2b08a:	6879      	ldr	r1, [r7, #4]
   2b08c:	233b      	movs	r3, #59	; 0x3b
   2b08e:	18fb      	adds	r3, r7, r3
   2b090:	781b      	ldrb	r3, [r3, #0]
   2b092:	0018      	movs	r0, r3
   2b094:	4b6f      	ldr	r3, [pc, #444]	; (2b254 <tcc_init+0x34c>)
   2b096:	4798      	blx	r3
   2b098:	0003      	movs	r3, r0
   2b09a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b09c:	2333      	movs	r3, #51	; 0x33
   2b09e:	18fb      	adds	r3, r7, r3
   2b0a0:	781b      	ldrb	r3, [r3, #0]
   2b0a2:	2b00      	cmp	r3, #0
   2b0a4:	d003      	beq.n	2b0ae <tcc_init+0x1a6>
		return status;
   2b0a6:	2333      	movs	r3, #51	; 0x33
   2b0a8:	18fb      	adds	r3, r7, r3
   2b0aa:	781b      	ldrb	r3, [r3, #0]
   2b0ac:	e10a      	b.n	2b2c4 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b0ae:	2300      	movs	r3, #0
   2b0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b0b2:	e009      	b.n	2b0c8 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2b0b4:	68fa      	ldr	r2, [r7, #12]
   2b0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b0b8:	009b      	lsls	r3, r3, #2
   2b0ba:	18d3      	adds	r3, r2, r3
   2b0bc:	3304      	adds	r3, #4
   2b0be:	2200      	movs	r2, #0
   2b0c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b0c4:	3301      	adds	r3, #1
   2b0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b0ca:	2b0b      	cmp	r3, #11
   2b0cc:	ddf2      	ble.n	2b0b4 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2b0ce:	68fb      	ldr	r3, [r7, #12]
   2b0d0:	2200      	movs	r2, #0
   2b0d2:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2b0d4:	68fb      	ldr	r3, [r7, #12]
   2b0d6:	2200      	movs	r2, #0
   2b0d8:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2b0da:	233b      	movs	r3, #59	; 0x3b
   2b0dc:	18fb      	adds	r3, r7, r3
   2b0de:	781a      	ldrb	r2, [r3, #0]
   2b0e0:	4b5d      	ldr	r3, [pc, #372]	; (2b258 <tcc_init+0x350>)
   2b0e2:	0092      	lsls	r2, r2, #2
   2b0e4:	68f9      	ldr	r1, [r7, #12]
   2b0e6:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2b0e8:	68fb      	ldr	r3, [r7, #12]
   2b0ea:	68ba      	ldr	r2, [r7, #8]
   2b0ec:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2b0ee:	687b      	ldr	r3, [r7, #4]
   2b0f0:	22a0      	movs	r2, #160	; 0xa0
   2b0f2:	5c99      	ldrb	r1, [r3, r2]
   2b0f4:	68fb      	ldr	r3, [r7, #12]
   2b0f6:	223c      	movs	r2, #60	; 0x3c
   2b0f8:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2b0fa:	2314      	movs	r3, #20
   2b0fc:	18fb      	adds	r3, r7, r3
   2b0fe:	0018      	movs	r0, r3
   2b100:	4b56      	ldr	r3, [pc, #344]	; (2b25c <tcc_init+0x354>)
   2b102:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2b104:	687b      	ldr	r3, [r7, #4]
   2b106:	7a9a      	ldrb	r2, [r3, #10]
   2b108:	2314      	movs	r3, #20
   2b10a:	18fb      	adds	r3, r7, r3
   2b10c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2b10e:	233b      	movs	r3, #59	; 0x3b
   2b110:	18fb      	adds	r3, r7, r3
   2b112:	781b      	ldrb	r3, [r3, #0]
   2b114:	4a52      	ldr	r2, [pc, #328]	; (2b260 <tcc_init+0x358>)
   2b116:	5cd3      	ldrb	r3, [r2, r3]
   2b118:	2214      	movs	r2, #20
   2b11a:	18ba      	adds	r2, r7, r2
   2b11c:	0011      	movs	r1, r2
   2b11e:	0018      	movs	r0, r3
   2b120:	4b50      	ldr	r3, [pc, #320]	; (2b264 <tcc_init+0x35c>)
   2b122:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2b124:	233b      	movs	r3, #59	; 0x3b
   2b126:	18fb      	adds	r3, r7, r3
   2b128:	781b      	ldrb	r3, [r3, #0]
   2b12a:	4a4d      	ldr	r2, [pc, #308]	; (2b260 <tcc_init+0x358>)
   2b12c:	5cd3      	ldrb	r3, [r2, r3]
   2b12e:	0018      	movs	r0, r3
   2b130:	4b4d      	ldr	r3, [pc, #308]	; (2b268 <tcc_init+0x360>)
   2b132:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b134:	2300      	movs	r3, #0
   2b136:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b138:	e02d      	b.n	2b196 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b13a:	687a      	ldr	r2, [r7, #4]
   2b13c:	2198      	movs	r1, #152	; 0x98
   2b13e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b140:	18d3      	adds	r3, r2, r3
   2b142:	185b      	adds	r3, r3, r1
   2b144:	781b      	ldrb	r3, [r3, #0]
   2b146:	2201      	movs	r2, #1
   2b148:	4053      	eors	r3, r2
   2b14a:	b2db      	uxtb	r3, r3
   2b14c:	2b00      	cmp	r3, #0
   2b14e:	d11e      	bne.n	2b18e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2b150:	2310      	movs	r3, #16
   2b152:	18fb      	adds	r3, r7, r3
   2b154:	0018      	movs	r0, r3
   2b156:	4b45      	ldr	r3, [pc, #276]	; (2b26c <tcc_init+0x364>)
   2b158:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2b15a:	687b      	ldr	r3, [r7, #4]
   2b15c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b15e:	321e      	adds	r2, #30
   2b160:	0092      	lsls	r2, r2, #2
   2b162:	58d3      	ldr	r3, [r2, r3]
   2b164:	b2da      	uxtb	r2, r3
   2b166:	2310      	movs	r3, #16
   2b168:	18fb      	adds	r3, r7, r3
   2b16a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2b16c:	2310      	movs	r3, #16
   2b16e:	18fb      	adds	r3, r7, r3
   2b170:	2201      	movs	r2, #1
   2b172:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2b174:	687b      	ldr	r3, [r7, #4]
   2b176:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b178:	3216      	adds	r2, #22
   2b17a:	0092      	lsls	r2, r2, #2
   2b17c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2b17e:	b2db      	uxtb	r3, r3
   2b180:	2210      	movs	r2, #16
   2b182:	18ba      	adds	r2, r7, r2
   2b184:	0011      	movs	r1, r2
   2b186:	0018      	movs	r0, r3
   2b188:	4b39      	ldr	r3, [pc, #228]	; (2b270 <tcc_init+0x368>)
   2b18a:	4798      	blx	r3
   2b18c:	e000      	b.n	2b190 <tcc_init+0x288>
			continue;
   2b18e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b192:	3301      	adds	r3, #1
   2b194:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b196:	233b      	movs	r3, #59	; 0x3b
   2b198:	18fb      	adds	r3, r7, r3
   2b19a:	781b      	ldrb	r3, [r3, #0]
   2b19c:	4a28      	ldr	r2, [pc, #160]	; (2b240 <tcc_init+0x338>)
   2b19e:	5cd3      	ldrb	r3, [r2, r3]
   2b1a0:	001a      	movs	r2, r3
   2b1a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b1a4:	429a      	cmp	r2, r3
   2b1a6:	dcc8      	bgt.n	2b13a <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2b1a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2b1aa:	68bb      	ldr	r3, [r7, #8]
   2b1ac:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b1ae:	46c0      	nop			; (mov r8, r8)
   2b1b0:	68bb      	ldr	r3, [r7, #8]
   2b1b2:	689b      	ldr	r3, [r3, #8]
   2b1b4:	2204      	movs	r2, #4
   2b1b6:	4013      	ands	r3, r2
   2b1b8:	d1fa      	bne.n	2b1b0 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2b1ba:	68bb      	ldr	r3, [r7, #8]
   2b1bc:	22ff      	movs	r2, #255	; 0xff
   2b1be:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b1c0:	46c0      	nop			; (mov r8, r8)
   2b1c2:	68bb      	ldr	r3, [r7, #8]
   2b1c4:	689b      	ldr	r3, [r3, #8]
   2b1c6:	2204      	movs	r2, #4
   2b1c8:	4013      	ands	r3, r2
   2b1ca:	d1fa      	bne.n	2b1c2 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2b1cc:	232b      	movs	r3, #43	; 0x2b
   2b1ce:	18fb      	adds	r3, r7, r3
   2b1d0:	781a      	ldrb	r2, [r3, #0]
   2b1d2:	68bb      	ldr	r3, [r7, #8]
   2b1d4:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2b1d6:	2320      	movs	r3, #32
   2b1d8:	18fb      	adds	r3, r7, r3
   2b1da:	681a      	ldr	r2, [r3, #0]
   2b1dc:	68bb      	ldr	r3, [r7, #8]
   2b1de:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2b1e0:	2320      	movs	r3, #32
   2b1e2:	18fb      	adds	r3, r7, r3
   2b1e4:	685a      	ldr	r2, [r3, #4]
   2b1e6:	68bb      	ldr	r3, [r7, #8]
   2b1e8:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2b1ea:	69fa      	ldr	r2, [r7, #28]
   2b1ec:	68bb      	ldr	r3, [r7, #8]
   2b1ee:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2b1f0:	46c0      	nop			; (mov r8, r8)
   2b1f2:	68bb      	ldr	r3, [r7, #8]
   2b1f4:	689b      	ldr	r3, [r3, #8]
   2b1f6:	4a1f      	ldr	r2, [pc, #124]	; (2b274 <tcc_init+0x36c>)
   2b1f8:	4013      	ands	r3, r2
   2b1fa:	d1fa      	bne.n	2b1f2 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2b1fc:	69ba      	ldr	r2, [r7, #24]
   2b1fe:	68bb      	ldr	r3, [r7, #8]
   2b200:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2b202:	46c0      	nop			; (mov r8, r8)
   2b204:	68bb      	ldr	r3, [r7, #8]
   2b206:	689b      	ldr	r3, [r3, #8]
   2b208:	2210      	movs	r2, #16
   2b20a:	4013      	ands	r3, r2
   2b20c:	d1fa      	bne.n	2b204 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2b20e:	687b      	ldr	r3, [r7, #4]
   2b210:	681a      	ldr	r2, [r3, #0]
   2b212:	68bb      	ldr	r3, [r7, #8]
   2b214:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2b216:	46c0      	nop			; (mov r8, r8)
   2b218:	68bb      	ldr	r3, [r7, #8]
   2b21a:	689b      	ldr	r3, [r3, #8]
   2b21c:	4a16      	ldr	r2, [pc, #88]	; (2b278 <tcc_init+0x370>)
   2b21e:	4013      	ands	r3, r2
   2b220:	d1fa      	bne.n	2b218 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2b222:	687b      	ldr	r3, [r7, #4]
   2b224:	685a      	ldr	r2, [r3, #4]
   2b226:	68bb      	ldr	r3, [r7, #8]
   2b228:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b22a:	2300      	movs	r3, #0
   2b22c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b22e:	e03f      	b.n	2b2b0 <tcc_init+0x3a8>
   2b230:	0002a871 	.word	0x0002a871
   2b234:	00039dc8 	.word	0x00039dc8
   2b238:	0002a7ed 	.word	0x0002a7ed
   2b23c:	00039dd4 	.word	0x00039dd4
   2b240:	00039de4 	.word	0x00039de4
   2b244:	0002ab7d 	.word	0x0002ab7d
   2b248:	0002ac21 	.word	0x0002ac21
   2b24c:	0002ac7d 	.word	0x0002ac7d
   2b250:	0002ad99 	.word	0x0002ad99
   2b254:	0002ae71 	.word	0x0002ae71
   2b258:	20005c24 	.word	0x20005c24
   2b25c:	0002a7d5 	.word	0x0002a7d5
   2b260:	00039dc4 	.word	0x00039dc4
   2b264:	0002a3ed 	.word	0x0002a3ed
   2b268:	0002a431 	.word	0x0002a431
   2b26c:	0002a849 	.word	0x0002a849
   2b270:	0002a74d 	.word	0x0002a74d
   2b274:	00020040 	.word	0x00020040
   2b278:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2b27c:	46c0      	nop			; (mov r8, r8)
   2b27e:	68bb      	ldr	r3, [r7, #8]
   2b280:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2b282:	4912      	ldr	r1, [pc, #72]	; (2b2cc <tcc_init+0x3c4>)
   2b284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b286:	4091      	lsls	r1, r2
   2b288:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2b28a:	4013      	ands	r3, r2
   2b28c:	d1f7      	bne.n	2b27e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2b28e:	687a      	ldr	r2, [r7, #4]
   2b290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b292:	3306      	adds	r3, #6
   2b294:	009b      	lsls	r3, r3, #2
   2b296:	18d3      	adds	r3, r2, r3
   2b298:	3304      	adds	r3, #4
   2b29a:	681a      	ldr	r2, [r3, #0]
   2b29c:	68b9      	ldr	r1, [r7, #8]
   2b29e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b2a0:	3310      	adds	r3, #16
   2b2a2:	009b      	lsls	r3, r3, #2
   2b2a4:	18cb      	adds	r3, r1, r3
   2b2a6:	3304      	adds	r3, #4
   2b2a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b2ac:	3301      	adds	r3, #1
   2b2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b2b0:	233b      	movs	r3, #59	; 0x3b
   2b2b2:	18fb      	adds	r3, r7, r3
   2b2b4:	781b      	ldrb	r3, [r3, #0]
   2b2b6:	4a06      	ldr	r2, [pc, #24]	; (2b2d0 <tcc_init+0x3c8>)
   2b2b8:	5cd3      	ldrb	r3, [r2, r3]
   2b2ba:	001a      	movs	r2, r3
   2b2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b2be:	429a      	cmp	r2, r3
   2b2c0:	dcdc      	bgt.n	2b27c <tcc_init+0x374>
	}

	return STATUS_OK;
   2b2c2:	2300      	movs	r3, #0
}
   2b2c4:	0018      	movs	r0, r3
   2b2c6:	46bd      	mov	sp, r7
   2b2c8:	b011      	add	sp, #68	; 0x44
   2b2ca:	bd90      	pop	{r4, r7, pc}
   2b2cc:	00080100 	.word	0x00080100
   2b2d0:	00039de0 	.word	0x00039de0

0002b2d4 <system_interrupt_enable>:
{
   2b2d4:	b580      	push	{r7, lr}
   2b2d6:	b082      	sub	sp, #8
   2b2d8:	af00      	add	r7, sp, #0
   2b2da:	0002      	movs	r2, r0
   2b2dc:	1dfb      	adds	r3, r7, #7
   2b2de:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2b2e0:	4b06      	ldr	r3, [pc, #24]	; (2b2fc <system_interrupt_enable+0x28>)
   2b2e2:	1dfa      	adds	r2, r7, #7
   2b2e4:	7812      	ldrb	r2, [r2, #0]
   2b2e6:	0011      	movs	r1, r2
   2b2e8:	221f      	movs	r2, #31
   2b2ea:	400a      	ands	r2, r1
   2b2ec:	2101      	movs	r1, #1
   2b2ee:	4091      	lsls	r1, r2
   2b2f0:	000a      	movs	r2, r1
   2b2f2:	601a      	str	r2, [r3, #0]
}
   2b2f4:	46c0      	nop			; (mov r8, r8)
   2b2f6:	46bd      	mov	sp, r7
   2b2f8:	b002      	add	sp, #8
   2b2fa:	bd80      	pop	{r7, pc}
   2b2fc:	e000e100 	.word	0xe000e100

0002b300 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2b300:	b580      	push	{r7, lr}
   2b302:	b082      	sub	sp, #8
   2b304:	af00      	add	r7, sp, #0
   2b306:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2b308:	4a04      	ldr	r2, [pc, #16]	; (2b31c <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2b30a:	687b      	ldr	r3, [r7, #4]
   2b30c:	18d3      	adds	r3, r2, r3
   2b30e:	781b      	ldrb	r3, [r3, #0]
   2b310:	b25b      	sxtb	r3, r3
}
   2b312:	0018      	movs	r0, r3
   2b314:	46bd      	mov	sp, r7
   2b316:	b002      	add	sp, #8
   2b318:	bd80      	pop	{r7, pc}
   2b31a:	46c0      	nop			; (mov r8, r8)
   2b31c:	20000128 	.word	0x20000128

0002b320 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2b320:	b580      	push	{r7, lr}
   2b322:	b084      	sub	sp, #16
   2b324:	af00      	add	r7, sp, #0
   2b326:	60f8      	str	r0, [r7, #12]
   2b328:	60b9      	str	r1, [r7, #8]
   2b32a:	1dfb      	adds	r3, r7, #7
   2b32c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2b32e:	1dfb      	adds	r3, r7, #7
   2b330:	781b      	ldrb	r3, [r3, #0]
   2b332:	68fa      	ldr	r2, [r7, #12]
   2b334:	009b      	lsls	r3, r3, #2
   2b336:	18d3      	adds	r3, r2, r3
   2b338:	3304      	adds	r3, #4
   2b33a:	68ba      	ldr	r2, [r7, #8]
   2b33c:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2b33e:	68fb      	ldr	r3, [r7, #12]
   2b340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2b342:	1dfb      	adds	r3, r7, #7
   2b344:	7819      	ldrb	r1, [r3, #0]
   2b346:	4b05      	ldr	r3, [pc, #20]	; (2b35c <tcc_register_callback+0x3c>)
   2b348:	0089      	lsls	r1, r1, #2
   2b34a:	58cb      	ldr	r3, [r1, r3]
   2b34c:	431a      	orrs	r2, r3
   2b34e:	68fb      	ldr	r3, [r7, #12]
   2b350:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2b352:	2300      	movs	r3, #0
}
   2b354:	0018      	movs	r0, r3
   2b356:	46bd      	mov	sp, r7
   2b358:	b004      	add	sp, #16
   2b35a:	bd80      	pop	{r7, pc}
   2b35c:	00039de8 	.word	0x00039de8

0002b360 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2b360:	b580      	push	{r7, lr}
   2b362:	b082      	sub	sp, #8
   2b364:	af00      	add	r7, sp, #0
   2b366:	6078      	str	r0, [r7, #4]
   2b368:	000a      	movs	r2, r1
   2b36a:	1cfb      	adds	r3, r7, #3
   2b36c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2b36e:	687b      	ldr	r3, [r7, #4]
   2b370:	681b      	ldr	r3, [r3, #0]
   2b372:	0018      	movs	r0, r3
   2b374:	4b0f      	ldr	r3, [pc, #60]	; (2b3b4 <tcc_enable_callback+0x54>)
   2b376:	4798      	blx	r3
   2b378:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2b37a:	0018      	movs	r0, r3
   2b37c:	4b0e      	ldr	r3, [pc, #56]	; (2b3b8 <tcc_enable_callback+0x58>)
   2b37e:	4798      	blx	r3
   2b380:	0003      	movs	r3, r0
   2b382:	0018      	movs	r0, r3
   2b384:	4b0d      	ldr	r3, [pc, #52]	; (2b3bc <tcc_enable_callback+0x5c>)
   2b386:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2b388:	687b      	ldr	r3, [r7, #4]
   2b38a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2b38c:	1cfb      	adds	r3, r7, #3
   2b38e:	7819      	ldrb	r1, [r3, #0]
   2b390:	4b0b      	ldr	r3, [pc, #44]	; (2b3c0 <tcc_enable_callback+0x60>)
   2b392:	0089      	lsls	r1, r1, #2
   2b394:	58cb      	ldr	r3, [r1, r3]
   2b396:	431a      	orrs	r2, r3
   2b398:	687b      	ldr	r3, [r7, #4]
   2b39a:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2b39c:	687b      	ldr	r3, [r7, #4]
   2b39e:	681b      	ldr	r3, [r3, #0]
   2b3a0:	1cfa      	adds	r2, r7, #3
   2b3a2:	7811      	ldrb	r1, [r2, #0]
   2b3a4:	4a06      	ldr	r2, [pc, #24]	; (2b3c0 <tcc_enable_callback+0x60>)
   2b3a6:	0089      	lsls	r1, r1, #2
   2b3a8:	588a      	ldr	r2, [r1, r2]
   2b3aa:	629a      	str	r2, [r3, #40]	; 0x28
}
   2b3ac:	46c0      	nop			; (mov r8, r8)
   2b3ae:	46bd      	mov	sp, r7
   2b3b0:	b002      	add	sp, #8
   2b3b2:	bd80      	pop	{r7, pc}
   2b3b4:	0002a871 	.word	0x0002a871
   2b3b8:	0002b301 	.word	0x0002b301
   2b3bc:	0002b2d5 	.word	0x0002b2d5
   2b3c0:	00039de8 	.word	0x00039de8

0002b3c4 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2b3c4:	b580      	push	{r7, lr}
   2b3c6:	af00      	add	r7, sp, #0
   2b3c8:	2000      	movs	r0, #0
   2b3ca:	4b02      	ldr	r3, [pc, #8]	; (2b3d4 <TCC0_Handler+0x10>)
   2b3cc:	4798      	blx	r3
   2b3ce:	46c0      	nop			; (mov r8, r8)
   2b3d0:	46bd      	mov	sp, r7
   2b3d2:	bd80      	pop	{r7, pc}
   2b3d4:	0002b401 	.word	0x0002b401

0002b3d8 <TCC1_Handler>:
   2b3d8:	b580      	push	{r7, lr}
   2b3da:	af00      	add	r7, sp, #0
   2b3dc:	2001      	movs	r0, #1
   2b3de:	4b02      	ldr	r3, [pc, #8]	; (2b3e8 <TCC1_Handler+0x10>)
   2b3e0:	4798      	blx	r3
   2b3e2:	46c0      	nop			; (mov r8, r8)
   2b3e4:	46bd      	mov	sp, r7
   2b3e6:	bd80      	pop	{r7, pc}
   2b3e8:	0002b401 	.word	0x0002b401

0002b3ec <TCC2_Handler>:
   2b3ec:	b580      	push	{r7, lr}
   2b3ee:	af00      	add	r7, sp, #0
   2b3f0:	2002      	movs	r0, #2
   2b3f2:	4b02      	ldr	r3, [pc, #8]	; (2b3fc <TCC2_Handler+0x10>)
   2b3f4:	4798      	blx	r3
   2b3f6:	46c0      	nop			; (mov r8, r8)
   2b3f8:	46bd      	mov	sp, r7
   2b3fa:	bd80      	pop	{r7, pc}
   2b3fc:	0002b401 	.word	0x0002b401

0002b400 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2b400:	b580      	push	{r7, lr}
   2b402:	b086      	sub	sp, #24
   2b404:	af00      	add	r7, sp, #0
   2b406:	0002      	movs	r2, r0
   2b408:	1dfb      	adds	r3, r7, #7
   2b40a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2b40c:	1dfb      	adds	r3, r7, #7
   2b40e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2b410:	4b18      	ldr	r3, [pc, #96]	; (2b474 <_tcc_interrupt_handler+0x74>)
   2b412:	0092      	lsls	r2, r2, #2
   2b414:	58d3      	ldr	r3, [r2, r3]
   2b416:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b418:	693b      	ldr	r3, [r7, #16]
   2b41a:	681b      	ldr	r3, [r3, #0]
   2b41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2b41e:	693b      	ldr	r3, [r7, #16]
   2b420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b422:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2b424:	693b      	ldr	r3, [r7, #16]
   2b426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b428:	4013      	ands	r3, r2
   2b42a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b42c:	2300      	movs	r3, #0
   2b42e:	617b      	str	r3, [r7, #20]
   2b430:	e019      	b.n	2b466 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2b432:	4b11      	ldr	r3, [pc, #68]	; (2b478 <_tcc_interrupt_handler+0x78>)
   2b434:	697a      	ldr	r2, [r7, #20]
   2b436:	0092      	lsls	r2, r2, #2
   2b438:	58d3      	ldr	r3, [r2, r3]
   2b43a:	68fa      	ldr	r2, [r7, #12]
   2b43c:	4013      	ands	r3, r2
   2b43e:	d00f      	beq.n	2b460 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2b440:	693a      	ldr	r2, [r7, #16]
   2b442:	697b      	ldr	r3, [r7, #20]
   2b444:	009b      	lsls	r3, r3, #2
   2b446:	18d3      	adds	r3, r2, r3
   2b448:	3304      	adds	r3, #4
   2b44a:	681b      	ldr	r3, [r3, #0]
   2b44c:	693a      	ldr	r2, [r7, #16]
   2b44e:	0010      	movs	r0, r2
   2b450:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2b452:	693b      	ldr	r3, [r7, #16]
   2b454:	681b      	ldr	r3, [r3, #0]
   2b456:	4a08      	ldr	r2, [pc, #32]	; (2b478 <_tcc_interrupt_handler+0x78>)
   2b458:	6979      	ldr	r1, [r7, #20]
   2b45a:	0089      	lsls	r1, r1, #2
   2b45c:	588a      	ldr	r2, [r1, r2]
   2b45e:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b460:	697b      	ldr	r3, [r7, #20]
   2b462:	3301      	adds	r3, #1
   2b464:	617b      	str	r3, [r7, #20]
   2b466:	697b      	ldr	r3, [r7, #20]
   2b468:	2b0b      	cmp	r3, #11
   2b46a:	dde2      	ble.n	2b432 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2b46c:	46c0      	nop			; (mov r8, r8)
   2b46e:	46bd      	mov	sp, r7
   2b470:	b006      	add	sp, #24
   2b472:	bd80      	pop	{r7, pc}
   2b474:	20005c24 	.word	0x20005c24
   2b478:	00039de8 	.word	0x00039de8

0002b47c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2b47c:	b580      	push	{r7, lr}
   2b47e:	b082      	sub	sp, #8
   2b480:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2b482:	4b2f      	ldr	r3, [pc, #188]	; (2b540 <Reset_Handler+0xc4>)
   2b484:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2b486:	4b2f      	ldr	r3, [pc, #188]	; (2b544 <Reset_Handler+0xc8>)
   2b488:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2b48a:	687a      	ldr	r2, [r7, #4]
   2b48c:	683b      	ldr	r3, [r7, #0]
   2b48e:	429a      	cmp	r2, r3
   2b490:	d00c      	beq.n	2b4ac <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2b492:	e007      	b.n	2b4a4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2b494:	683b      	ldr	r3, [r7, #0]
   2b496:	1d1a      	adds	r2, r3, #4
   2b498:	603a      	str	r2, [r7, #0]
   2b49a:	687a      	ldr	r2, [r7, #4]
   2b49c:	1d11      	adds	r1, r2, #4
   2b49e:	6079      	str	r1, [r7, #4]
   2b4a0:	6812      	ldr	r2, [r2, #0]
   2b4a2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2b4a4:	683a      	ldr	r2, [r7, #0]
   2b4a6:	4b28      	ldr	r3, [pc, #160]	; (2b548 <Reset_Handler+0xcc>)
   2b4a8:	429a      	cmp	r2, r3
   2b4aa:	d3f3      	bcc.n	2b494 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2b4ac:	4b27      	ldr	r3, [pc, #156]	; (2b54c <Reset_Handler+0xd0>)
   2b4ae:	603b      	str	r3, [r7, #0]
   2b4b0:	e004      	b.n	2b4bc <Reset_Handler+0x40>
                *pDest++ = 0;
   2b4b2:	683b      	ldr	r3, [r7, #0]
   2b4b4:	1d1a      	adds	r2, r3, #4
   2b4b6:	603a      	str	r2, [r7, #0]
   2b4b8:	2200      	movs	r2, #0
   2b4ba:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2b4bc:	683a      	ldr	r2, [r7, #0]
   2b4be:	4b24      	ldr	r3, [pc, #144]	; (2b550 <Reset_Handler+0xd4>)
   2b4c0:	429a      	cmp	r2, r3
   2b4c2:	d3f6      	bcc.n	2b4b2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2b4c4:	4b23      	ldr	r3, [pc, #140]	; (2b554 <Reset_Handler+0xd8>)
   2b4c6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2b4c8:	4b23      	ldr	r3, [pc, #140]	; (2b558 <Reset_Handler+0xdc>)
   2b4ca:	687a      	ldr	r2, [r7, #4]
   2b4cc:	21ff      	movs	r1, #255	; 0xff
   2b4ce:	438a      	bics	r2, r1
   2b4d0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2b4d2:	4a22      	ldr	r2, [pc, #136]	; (2b55c <Reset_Handler+0xe0>)
   2b4d4:	2390      	movs	r3, #144	; 0x90
   2b4d6:	005b      	lsls	r3, r3, #1
   2b4d8:	2102      	movs	r1, #2
   2b4da:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2b4dc:	4a20      	ldr	r2, [pc, #128]	; (2b560 <Reset_Handler+0xe4>)
   2b4de:	78d3      	ldrb	r3, [r2, #3]
   2b4e0:	2103      	movs	r1, #3
   2b4e2:	438b      	bics	r3, r1
   2b4e4:	1c19      	adds	r1, r3, #0
   2b4e6:	2302      	movs	r3, #2
   2b4e8:	430b      	orrs	r3, r1
   2b4ea:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2b4ec:	4a1c      	ldr	r2, [pc, #112]	; (2b560 <Reset_Handler+0xe4>)
   2b4ee:	78d3      	ldrb	r3, [r2, #3]
   2b4f0:	210c      	movs	r1, #12
   2b4f2:	438b      	bics	r3, r1
   2b4f4:	1c19      	adds	r1, r3, #0
   2b4f6:	2308      	movs	r3, #8
   2b4f8:	430b      	orrs	r3, r1
   2b4fa:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2b4fc:	4a19      	ldr	r2, [pc, #100]	; (2b564 <Reset_Handler+0xe8>)
   2b4fe:	7b93      	ldrb	r3, [r2, #14]
   2b500:	2130      	movs	r1, #48	; 0x30
   2b502:	438b      	bics	r3, r1
   2b504:	1c19      	adds	r1, r3, #0
   2b506:	2320      	movs	r3, #32
   2b508:	430b      	orrs	r3, r1
   2b50a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2b50c:	4a15      	ldr	r2, [pc, #84]	; (2b564 <Reset_Handler+0xe8>)
   2b50e:	7b93      	ldrb	r3, [r2, #14]
   2b510:	210c      	movs	r1, #12
   2b512:	438b      	bics	r3, r1
   2b514:	1c19      	adds	r1, r3, #0
   2b516:	2308      	movs	r3, #8
   2b518:	430b      	orrs	r3, r1
   2b51a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2b51c:	4a11      	ldr	r2, [pc, #68]	; (2b564 <Reset_Handler+0xe8>)
   2b51e:	7b93      	ldrb	r3, [r2, #14]
   2b520:	2103      	movs	r1, #3
   2b522:	438b      	bics	r3, r1
   2b524:	1c19      	adds	r1, r3, #0
   2b526:	2302      	movs	r3, #2
   2b528:	430b      	orrs	r3, r1
   2b52a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2b52c:	4a0e      	ldr	r2, [pc, #56]	; (2b568 <Reset_Handler+0xec>)
   2b52e:	6853      	ldr	r3, [r2, #4]
   2b530:	2180      	movs	r1, #128	; 0x80
   2b532:	430b      	orrs	r3, r1
   2b534:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2b536:	4b0d      	ldr	r3, [pc, #52]	; (2b56c <Reset_Handler+0xf0>)
   2b538:	4798      	blx	r3

        /* Branch to main function */
        main();
   2b53a:	4b0d      	ldr	r3, [pc, #52]	; (2b570 <Reset_Handler+0xf4>)
   2b53c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2b53e:	e7fe      	b.n	2b53e <Reset_Handler+0xc2>
   2b540:	0003aba0 	.word	0x0003aba0
   2b544:	20000000 	.word	0x20000000
   2b548:	20000300 	.word	0x20000300
   2b54c:	20000300 	.word	0x20000300
   2b550:	20005c94 	.word	0x20005c94
   2b554:	00012000 	.word	0x00012000
   2b558:	e000ed00 	.word	0xe000ed00
   2b55c:	41007000 	.word	0x41007000
   2b560:	41005000 	.word	0x41005000
   2b564:	41004800 	.word	0x41004800
   2b568:	41004000 	.word	0x41004000
   2b56c:	00034ebd 	.word	0x00034ebd
   2b570:	00032cb1 	.word	0x00032cb1

0002b574 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2b574:	b580      	push	{r7, lr}
   2b576:	af00      	add	r7, sp, #0
  __asm volatile (
   2b578:	2004      	movs	r0, #4
   2b57a:	4671      	mov	r1, lr
   2b57c:	4208      	tst	r0, r1
   2b57e:	d002      	beq.n	2b586 <_MSP>
   2b580:	f3ef 8009 	mrs	r0, PSP
   2b584:	e001      	b.n	2b58a <_HALT>

0002b586 <_MSP>:
   2b586:	f3ef 8008 	mrs	r0, MSP

0002b58a <_HALT>:
   2b58a:	6941      	ldr	r1, [r0, #20]
   2b58c:	e004      	b.n	2b598 <HardFault_HandlerC>
   2b58e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2b590:	46c0      	nop			; (mov r8, r8)
   2b592:	46bd      	mov	sp, r7
   2b594:	bd80      	pop	{r7, pc}
	...

0002b598 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2b598:	b580      	push	{r7, lr}
   2b59a:	b090      	sub	sp, #64	; 0x40
   2b59c:	af00      	add	r7, sp, #0
   2b59e:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2b5a0:	687b      	ldr	r3, [r7, #4]
   2b5a2:	681b      	ldr	r3, [r3, #0]
   2b5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2b5a6:	687b      	ldr	r3, [r7, #4]
   2b5a8:	685b      	ldr	r3, [r3, #4]
   2b5aa:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2b5ac:	687b      	ldr	r3, [r7, #4]
   2b5ae:	689b      	ldr	r3, [r3, #8]
   2b5b0:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2b5b2:	687b      	ldr	r3, [r7, #4]
   2b5b4:	68db      	ldr	r3, [r3, #12]
   2b5b6:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2b5b8:	687b      	ldr	r3, [r7, #4]
   2b5ba:	691b      	ldr	r3, [r3, #16]
   2b5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2b5be:	687b      	ldr	r3, [r7, #4]
   2b5c0:	695b      	ldr	r3, [r3, #20]
   2b5c2:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2b5c4:	687b      	ldr	r3, [r7, #4]
   2b5c6:	699b      	ldr	r3, [r3, #24]
   2b5c8:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2b5ca:	687b      	ldr	r3, [r7, #4]
   2b5cc:	69db      	ldr	r3, [r3, #28]
   2b5ce:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2b5d0:	4b0b      	ldr	r3, [pc, #44]	; (2b600 <HardFault_HandlerC+0x68>)
   2b5d2:	681b      	ldr	r3, [r3, #0]
   2b5d4:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2b5d6:	4b0b      	ldr	r3, [pc, #44]	; (2b604 <HardFault_HandlerC+0x6c>)
   2b5d8:	681b      	ldr	r3, [r3, #0]
   2b5da:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2b5dc:	4b0a      	ldr	r3, [pc, #40]	; (2b608 <HardFault_HandlerC+0x70>)
   2b5de:	681b      	ldr	r3, [r3, #0]
   2b5e0:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2b5e2:	4b0a      	ldr	r3, [pc, #40]	; (2b60c <HardFault_HandlerC+0x74>)
   2b5e4:	681b      	ldr	r3, [r3, #0]
   2b5e6:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2b5e8:	4b09      	ldr	r3, [pc, #36]	; (2b610 <HardFault_HandlerC+0x78>)
   2b5ea:	681b      	ldr	r3, [r3, #0]
   2b5ec:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2b5ee:	4b09      	ldr	r3, [pc, #36]	; (2b614 <HardFault_HandlerC+0x7c>)
   2b5f0:	681b      	ldr	r3, [r3, #0]
   2b5f2:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2b5f4:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2b5f6:	46c0      	nop			; (mov r8, r8)
   2b5f8:	46bd      	mov	sp, r7
   2b5fa:	b010      	add	sp, #64	; 0x40
   2b5fc:	bd80      	pop	{r7, pc}
   2b5fe:	46c0      	nop			; (mov r8, r8)
   2b600:	e000ed28 	.word	0xe000ed28
   2b604:	e000ed2c 	.word	0xe000ed2c
   2b608:	e000ed30 	.word	0xe000ed30
   2b60c:	e000ed3c 	.word	0xe000ed3c
   2b610:	e000ed34 	.word	0xe000ed34
   2b614:	e000ed38 	.word	0xe000ed38

0002b618 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2b618:	b580      	push	{r7, lr}
   2b61a:	b086      	sub	sp, #24
   2b61c:	af00      	add	r7, sp, #0
   2b61e:	60f8      	str	r0, [r7, #12]
   2b620:	60b9      	str	r1, [r7, #8]
   2b622:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2b624:	2300      	movs	r3, #0
   2b626:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2b628:	68fb      	ldr	r3, [r7, #12]
   2b62a:	2b00      	cmp	r3, #0
   2b62c:	d012      	beq.n	2b654 <_read+0x3c>
		return -1;
   2b62e:	2301      	movs	r3, #1
   2b630:	425b      	negs	r3, r3
   2b632:	e013      	b.n	2b65c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2b634:	4b0b      	ldr	r3, [pc, #44]	; (2b664 <_read+0x4c>)
   2b636:	681a      	ldr	r2, [r3, #0]
   2b638:	4b0b      	ldr	r3, [pc, #44]	; (2b668 <_read+0x50>)
   2b63a:	681b      	ldr	r3, [r3, #0]
   2b63c:	68b9      	ldr	r1, [r7, #8]
   2b63e:	0018      	movs	r0, r3
   2b640:	4790      	blx	r2
		ptr++;
   2b642:	68bb      	ldr	r3, [r7, #8]
   2b644:	3301      	adds	r3, #1
   2b646:	60bb      	str	r3, [r7, #8]
		nChars++;
   2b648:	697b      	ldr	r3, [r7, #20]
   2b64a:	3301      	adds	r3, #1
   2b64c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2b64e:	687b      	ldr	r3, [r7, #4]
   2b650:	3b01      	subs	r3, #1
   2b652:	607b      	str	r3, [r7, #4]
   2b654:	687b      	ldr	r3, [r7, #4]
   2b656:	2b00      	cmp	r3, #0
   2b658:	dcec      	bgt.n	2b634 <_read+0x1c>
	}
	return nChars;
   2b65a:	697b      	ldr	r3, [r7, #20]
}
   2b65c:	0018      	movs	r0, r3
   2b65e:	46bd      	mov	sp, r7
   2b660:	b006      	add	sp, #24
   2b662:	bd80      	pop	{r7, pc}
   2b664:	20005c30 	.word	0x20005c30
   2b668:	20005c38 	.word	0x20005c38

0002b66c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2b66c:	b580      	push	{r7, lr}
   2b66e:	b086      	sub	sp, #24
   2b670:	af00      	add	r7, sp, #0
   2b672:	60f8      	str	r0, [r7, #12]
   2b674:	60b9      	str	r1, [r7, #8]
   2b676:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2b678:	2300      	movs	r3, #0
   2b67a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2b67c:	68fb      	ldr	r3, [r7, #12]
   2b67e:	2b01      	cmp	r3, #1
   2b680:	d01d      	beq.n	2b6be <_write+0x52>
   2b682:	68fb      	ldr	r3, [r7, #12]
   2b684:	2b02      	cmp	r3, #2
   2b686:	d01a      	beq.n	2b6be <_write+0x52>
   2b688:	68fb      	ldr	r3, [r7, #12]
   2b68a:	2b03      	cmp	r3, #3
   2b68c:	d017      	beq.n	2b6be <_write+0x52>
		return -1;
   2b68e:	2301      	movs	r3, #1
   2b690:	425b      	negs	r3, r3
   2b692:	e018      	b.n	2b6c6 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2b694:	4b0e      	ldr	r3, [pc, #56]	; (2b6d0 <_write+0x64>)
   2b696:	681a      	ldr	r2, [r3, #0]
   2b698:	4b0e      	ldr	r3, [pc, #56]	; (2b6d4 <_write+0x68>)
   2b69a:	6818      	ldr	r0, [r3, #0]
   2b69c:	68bb      	ldr	r3, [r7, #8]
   2b69e:	1c59      	adds	r1, r3, #1
   2b6a0:	60b9      	str	r1, [r7, #8]
   2b6a2:	781b      	ldrb	r3, [r3, #0]
   2b6a4:	0019      	movs	r1, r3
   2b6a6:	4790      	blx	r2
   2b6a8:	1e03      	subs	r3, r0, #0
   2b6aa:	da02      	bge.n	2b6b2 <_write+0x46>
			return -1;
   2b6ac:	2301      	movs	r3, #1
   2b6ae:	425b      	negs	r3, r3
   2b6b0:	e009      	b.n	2b6c6 <_write+0x5a>
		}
		++nChars;
   2b6b2:	697b      	ldr	r3, [r7, #20]
   2b6b4:	3301      	adds	r3, #1
   2b6b6:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2b6b8:	687b      	ldr	r3, [r7, #4]
   2b6ba:	3b01      	subs	r3, #1
   2b6bc:	607b      	str	r3, [r7, #4]
   2b6be:	687b      	ldr	r3, [r7, #4]
   2b6c0:	2b00      	cmp	r3, #0
   2b6c2:	d1e7      	bne.n	2b694 <_write+0x28>
	}
	return nChars;
   2b6c4:	697b      	ldr	r3, [r7, #20]
}
   2b6c6:	0018      	movs	r0, r3
   2b6c8:	46bd      	mov	sp, r7
   2b6ca:	b006      	add	sp, #24
   2b6cc:	bd80      	pop	{r7, pc}
   2b6ce:	46c0      	nop			; (mov r8, r8)
   2b6d0:	20005c34 	.word	0x20005c34
   2b6d4:	20005c38 	.word	0x20005c38

0002b6d8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2b6d8:	b580      	push	{r7, lr}
   2b6da:	b084      	sub	sp, #16
   2b6dc:	af00      	add	r7, sp, #0
   2b6de:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2b6e0:	4b0a      	ldr	r3, [pc, #40]	; (2b70c <_sbrk+0x34>)
   2b6e2:	681b      	ldr	r3, [r3, #0]
   2b6e4:	2b00      	cmp	r3, #0
   2b6e6:	d102      	bne.n	2b6ee <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2b6e8:	4b08      	ldr	r3, [pc, #32]	; (2b70c <_sbrk+0x34>)
   2b6ea:	4a09      	ldr	r2, [pc, #36]	; (2b710 <_sbrk+0x38>)
   2b6ec:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2b6ee:	4b07      	ldr	r3, [pc, #28]	; (2b70c <_sbrk+0x34>)
   2b6f0:	681b      	ldr	r3, [r3, #0]
   2b6f2:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2b6f4:	4b05      	ldr	r3, [pc, #20]	; (2b70c <_sbrk+0x34>)
   2b6f6:	681a      	ldr	r2, [r3, #0]
   2b6f8:	687b      	ldr	r3, [r7, #4]
   2b6fa:	18d2      	adds	r2, r2, r3
   2b6fc:	4b03      	ldr	r3, [pc, #12]	; (2b70c <_sbrk+0x34>)
   2b6fe:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2b700:	68fb      	ldr	r3, [r7, #12]
}
   2b702:	0018      	movs	r0, r3
   2b704:	46bd      	mov	sp, r7
   2b706:	b004      	add	sp, #16
   2b708:	bd80      	pop	{r7, pc}
   2b70a:	46c0      	nop			; (mov r8, r8)
   2b70c:	200042f4 	.word	0x200042f4
   2b710:	20007c98 	.word	0x20007c98

0002b714 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2b714:	b580      	push	{r7, lr}
   2b716:	b082      	sub	sp, #8
   2b718:	af00      	add	r7, sp, #0
   2b71a:	6078      	str	r0, [r7, #4]
	return -1;
   2b71c:	2301      	movs	r3, #1
   2b71e:	425b      	negs	r3, r3
}
   2b720:	0018      	movs	r0, r3
   2b722:	46bd      	mov	sp, r7
   2b724:	b002      	add	sp, #8
   2b726:	bd80      	pop	{r7, pc}

0002b728 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2b728:	b580      	push	{r7, lr}
   2b72a:	b082      	sub	sp, #8
   2b72c:	af00      	add	r7, sp, #0
   2b72e:	6078      	str	r0, [r7, #4]
   2b730:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2b732:	683b      	ldr	r3, [r7, #0]
   2b734:	2280      	movs	r2, #128	; 0x80
   2b736:	0192      	lsls	r2, r2, #6
   2b738:	605a      	str	r2, [r3, #4]

	return 0;
   2b73a:	2300      	movs	r3, #0
}
   2b73c:	0018      	movs	r0, r3
   2b73e:	46bd      	mov	sp, r7
   2b740:	b002      	add	sp, #8
   2b742:	bd80      	pop	{r7, pc}

0002b744 <_isatty>:

extern int _isatty(int file)
{
   2b744:	b580      	push	{r7, lr}
   2b746:	b082      	sub	sp, #8
   2b748:	af00      	add	r7, sp, #0
   2b74a:	6078      	str	r0, [r7, #4]
	return 1;
   2b74c:	2301      	movs	r3, #1
}
   2b74e:	0018      	movs	r0, r3
   2b750:	46bd      	mov	sp, r7
   2b752:	b002      	add	sp, #8
   2b754:	bd80      	pop	{r7, pc}

0002b756 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2b756:	b580      	push	{r7, lr}
   2b758:	b084      	sub	sp, #16
   2b75a:	af00      	add	r7, sp, #0
   2b75c:	60f8      	str	r0, [r7, #12]
   2b75e:	60b9      	str	r1, [r7, #8]
   2b760:	607a      	str	r2, [r7, #4]
	return 0;
   2b762:	2300      	movs	r3, #0
}
   2b764:	0018      	movs	r0, r3
   2b766:	46bd      	mov	sp, r7
   2b768:	b004      	add	sp, #16
   2b76a:	bd80      	pop	{r7, pc}

0002b76c <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2b76c:	b580      	push	{r7, lr}
   2b76e:	b082      	sub	sp, #8
   2b770:	af00      	add	r7, sp, #0
   2b772:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2b774:	687b      	ldr	r3, [r7, #4]
   2b776:	2200      	movs	r2, #0
   2b778:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2b77a:	687b      	ldr	r3, [r7, #4]
   2b77c:	2200      	movs	r2, #0
   2b77e:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2b780:	687b      	ldr	r3, [r7, #4]
   2b782:	2200      	movs	r2, #0
   2b784:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2b786:	687b      	ldr	r3, [r7, #4]
   2b788:	2200      	movs	r2, #0
   2b78a:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2b78c:	687b      	ldr	r3, [r7, #4]
   2b78e:	2201      	movs	r2, #1
   2b790:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2b792:	687b      	ldr	r3, [r7, #4]
   2b794:	2201      	movs	r2, #1
   2b796:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2b798:	687b      	ldr	r3, [r7, #4]
   2b79a:	22fa      	movs	r2, #250	; 0xfa
   2b79c:	00d2      	lsls	r2, r2, #3
   2b79e:	80da      	strh	r2, [r3, #6]
}
   2b7a0:	46c0      	nop			; (mov r8, r8)
   2b7a2:	46bd      	mov	sp, r7
   2b7a4:	b002      	add	sp, #8
   2b7a6:	bd80      	pop	{r7, pc}

0002b7a8 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2b7a8:	b580      	push	{r7, lr}
   2b7aa:	b086      	sub	sp, #24
   2b7ac:	af00      	add	r7, sp, #0
   2b7ae:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2b7b0:	230c      	movs	r3, #12
   2b7b2:	18fb      	adds	r3, r7, r3
   2b7b4:	0018      	movs	r0, r3
   2b7b6:	4b23      	ldr	r3, [pc, #140]	; (2b844 <rtc_calendar_get_config_defaults+0x9c>)
   2b7b8:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2b7ba:	687b      	ldr	r3, [r7, #4]
   2b7bc:	22a0      	movs	r2, #160	; 0xa0
   2b7be:	0112      	lsls	r2, r2, #4
   2b7c0:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2b7c2:	687b      	ldr	r3, [r7, #4]
   2b7c4:	2200      	movs	r2, #0
   2b7c6:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2b7c8:	687b      	ldr	r3, [r7, #4]
   2b7ca:	2200      	movs	r2, #0
   2b7cc:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2b7ce:	687b      	ldr	r3, [r7, #4]
   2b7d0:	2200      	movs	r2, #0
   2b7d2:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2b7d4:	687b      	ldr	r3, [r7, #4]
   2b7d6:	22fa      	movs	r2, #250	; 0xfa
   2b7d8:	00d2      	lsls	r2, r2, #3
   2b7da:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2b7dc:	2317      	movs	r3, #23
   2b7de:	18fb      	adds	r3, r7, r3
   2b7e0:	2200      	movs	r2, #0
   2b7e2:	701a      	strb	r2, [r3, #0]
   2b7e4:	e025      	b.n	2b832 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2b7e6:	2317      	movs	r3, #23
   2b7e8:	18fb      	adds	r3, r7, r3
   2b7ea:	781a      	ldrb	r2, [r3, #0]
   2b7ec:	6879      	ldr	r1, [r7, #4]
   2b7ee:	2008      	movs	r0, #8
   2b7f0:	0013      	movs	r3, r2
   2b7f2:	009b      	lsls	r3, r3, #2
   2b7f4:	189b      	adds	r3, r3, r2
   2b7f6:	005b      	lsls	r3, r3, #1
   2b7f8:	18cb      	adds	r3, r1, r3
   2b7fa:	181a      	adds	r2, r3, r0
   2b7fc:	230c      	movs	r3, #12
   2b7fe:	18fb      	adds	r3, r7, r3
   2b800:	0010      	movs	r0, r2
   2b802:	0019      	movs	r1, r3
   2b804:	2308      	movs	r3, #8
   2b806:	001a      	movs	r2, r3
   2b808:	4b0f      	ldr	r3, [pc, #60]	; (2b848 <rtc_calendar_get_config_defaults+0xa0>)
   2b80a:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b80c:	2317      	movs	r3, #23
   2b80e:	18fb      	adds	r3, r7, r3
   2b810:	781a      	ldrb	r2, [r3, #0]
   2b812:	6879      	ldr	r1, [r7, #4]
   2b814:	0013      	movs	r3, r2
   2b816:	009b      	lsls	r3, r3, #2
   2b818:	189b      	adds	r3, r3, r2
   2b81a:	005b      	lsls	r3, r3, #1
   2b81c:	18cb      	adds	r3, r1, r3
   2b81e:	3310      	adds	r3, #16
   2b820:	2206      	movs	r2, #6
   2b822:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2b824:	2317      	movs	r3, #23
   2b826:	18fb      	adds	r3, r7, r3
   2b828:	781a      	ldrb	r2, [r3, #0]
   2b82a:	2317      	movs	r3, #23
   2b82c:	18fb      	adds	r3, r7, r3
   2b82e:	3201      	adds	r2, #1
   2b830:	701a      	strb	r2, [r3, #0]
   2b832:	2317      	movs	r3, #23
   2b834:	18fb      	adds	r3, r7, r3
   2b836:	781b      	ldrb	r3, [r3, #0]
   2b838:	2b00      	cmp	r3, #0
   2b83a:	d0d4      	beq.n	2b7e6 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2b83c:	46c0      	nop			; (mov r8, r8)
   2b83e:	46bd      	mov	sp, r7
   2b840:	b006      	add	sp, #24
   2b842:	bd80      	pop	{r7, pc}
   2b844:	0002b76d 	.word	0x0002b76d
   2b848:	00034f2d 	.word	0x00034f2d

0002b84c <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2b84c:	b580      	push	{r7, lr}
   2b84e:	b088      	sub	sp, #32
   2b850:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2b852:	230c      	movs	r3, #12
   2b854:	18fb      	adds	r3, r7, r3
   2b856:	0018      	movs	r0, r3
   2b858:	4b1a      	ldr	r3, [pc, #104]	; (2b8c4 <configure_rtc_calendar+0x78>)
   2b85a:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2b85c:	1d3b      	adds	r3, r7, #4
   2b85e:	0018      	movs	r0, r3
   2b860:	4b19      	ldr	r3, [pc, #100]	; (2b8c8 <configure_rtc_calendar+0x7c>)
   2b862:	4798      	blx	r3
	init_time.year   = 2014;
   2b864:	1d3b      	adds	r3, r7, #4
   2b866:	4a19      	ldr	r2, [pc, #100]	; (2b8cc <configure_rtc_calendar+0x80>)
   2b868:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2b86a:	1d3b      	adds	r3, r7, #4
   2b86c:	2201      	movs	r2, #1
   2b86e:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2b870:	1d3b      	adds	r3, r7, #4
   2b872:	2201      	movs	r2, #1
   2b874:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2b876:	1d3b      	adds	r3, r7, #4
   2b878:	2200      	movs	r2, #0
   2b87a:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2b87c:	1d3b      	adds	r3, r7, #4
   2b87e:	2200      	movs	r2, #0
   2b880:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2b882:	1d3b      	adds	r3, r7, #4
   2b884:	2204      	movs	r2, #4
   2b886:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2b888:	230c      	movs	r3, #12
   2b88a:	18fb      	adds	r3, r7, r3
   2b88c:	2201      	movs	r2, #1
   2b88e:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2b890:	230c      	movs	r3, #12
   2b892:	18fb      	adds	r3, r7, r3
   2b894:	1d3a      	adds	r2, r7, #4
   2b896:	3308      	adds	r3, #8
   2b898:	ca03      	ldmia	r2!, {r0, r1}
   2b89a:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b89c:	230c      	movs	r3, #12
   2b89e:	18fb      	adds	r3, r7, r3
   2b8a0:	2206      	movs	r2, #6
   2b8a2:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2b8a4:	230c      	movs	r3, #12
   2b8a6:	18fa      	adds	r2, r7, r3
   2b8a8:	4909      	ldr	r1, [pc, #36]	; (2b8d0 <configure_rtc_calendar+0x84>)
   2b8aa:	4b0a      	ldr	r3, [pc, #40]	; (2b8d4 <configure_rtc_calendar+0x88>)
   2b8ac:	0018      	movs	r0, r3
   2b8ae:	4b0a      	ldr	r3, [pc, #40]	; (2b8d8 <configure_rtc_calendar+0x8c>)
   2b8b0:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2b8b2:	4b08      	ldr	r3, [pc, #32]	; (2b8d4 <configure_rtc_calendar+0x88>)
   2b8b4:	0018      	movs	r0, r3
   2b8b6:	4b09      	ldr	r3, [pc, #36]	; (2b8dc <configure_rtc_calendar+0x90>)
   2b8b8:	4798      	blx	r3
}
   2b8ba:	46c0      	nop			; (mov r8, r8)
   2b8bc:	46bd      	mov	sp, r7
   2b8be:	b008      	add	sp, #32
   2b8c0:	bd80      	pop	{r7, pc}
   2b8c2:	46c0      	nop			; (mov r8, r8)
   2b8c4:	0002b7a9 	.word	0x0002b7a9
   2b8c8:	0002b76d 	.word	0x0002b76d
   2b8cc:	000007de 	.word	0x000007de
   2b8d0:	40001400 	.word	0x40001400
   2b8d4:	20005c3c 	.word	0x20005c3c
   2b8d8:	00027389 	.word	0x00027389
   2b8dc:	000270b5 	.word	0x000270b5

0002b8e0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2b8e0:	b590      	push	{r4, r7, lr}
   2b8e2:	b085      	sub	sp, #20
   2b8e4:	af00      	add	r7, sp, #0
   2b8e6:	0002      	movs	r2, r0
   2b8e8:	1dfb      	adds	r3, r7, #7
   2b8ea:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2b8ec:	4b1a      	ldr	r3, [pc, #104]	; (2b958 <disk_initialize+0x78>)
   2b8ee:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2b8f0:	1dfb      	adds	r3, r7, #7
   2b8f2:	781b      	ldrb	r3, [r3, #0]
   2b8f4:	2b01      	cmp	r3, #1
   2b8f6:	d901      	bls.n	2b8fc <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2b8f8:	2301      	movs	r3, #1
   2b8fa:	e029      	b.n	2b950 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2b8fc:	2300      	movs	r3, #0
   2b8fe:	60fb      	str	r3, [r7, #12]
   2b900:	e010      	b.n	2b924 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2b902:	230b      	movs	r3, #11
   2b904:	18fc      	adds	r4, r7, r3
   2b906:	1dfb      	adds	r3, r7, #7
   2b908:	781b      	ldrb	r3, [r3, #0]
   2b90a:	0018      	movs	r0, r3
   2b90c:	4b13      	ldr	r3, [pc, #76]	; (2b95c <disk_initialize+0x7c>)
   2b90e:	4798      	blx	r3
   2b910:	0003      	movs	r3, r0
   2b912:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2b914:	230b      	movs	r3, #11
   2b916:	18fb      	adds	r3, r7, r3
   2b918:	781b      	ldrb	r3, [r3, #0]
   2b91a:	2b03      	cmp	r3, #3
   2b91c:	d106      	bne.n	2b92c <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2b91e:	68fb      	ldr	r3, [r7, #12]
   2b920:	3301      	adds	r3, #1
   2b922:	60fb      	str	r3, [r7, #12]
   2b924:	68fb      	ldr	r3, [r7, #12]
   2b926:	2b01      	cmp	r3, #1
   2b928:	ddeb      	ble.n	2b902 <disk_initialize+0x22>
   2b92a:	e000      	b.n	2b92e <disk_initialize+0x4e>
			break;
   2b92c:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2b92e:	230b      	movs	r3, #11
   2b930:	18fb      	adds	r3, r7, r3
   2b932:	781b      	ldrb	r3, [r3, #0]
   2b934:	2b00      	cmp	r3, #0
   2b936:	d001      	beq.n	2b93c <disk_initialize+0x5c>
		return STA_NOINIT;
   2b938:	2301      	movs	r3, #1
   2b93a:	e009      	b.n	2b950 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2b93c:	1dfb      	adds	r3, r7, #7
   2b93e:	781b      	ldrb	r3, [r3, #0]
   2b940:	0018      	movs	r0, r3
   2b942:	4b07      	ldr	r3, [pc, #28]	; (2b960 <disk_initialize+0x80>)
   2b944:	4798      	blx	r3
   2b946:	1e03      	subs	r3, r0, #0
   2b948:	d001      	beq.n	2b94e <disk_initialize+0x6e>
		return STA_PROTECT;
   2b94a:	2304      	movs	r3, #4
   2b94c:	e000      	b.n	2b950 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2b94e:	2300      	movs	r3, #0
}
   2b950:	0018      	movs	r0, r3
   2b952:	46bd      	mov	sp, r7
   2b954:	b005      	add	sp, #20
   2b956:	bd90      	pop	{r4, r7, pc}
   2b958:	0002b84d 	.word	0x0002b84d
   2b95c:	000265b1 	.word	0x000265b1
   2b960:	00026669 	.word	0x00026669

0002b964 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2b964:	b580      	push	{r7, lr}
   2b966:	b082      	sub	sp, #8
   2b968:	af00      	add	r7, sp, #0
   2b96a:	0002      	movs	r2, r0
   2b96c:	1dfb      	adds	r3, r7, #7
   2b96e:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2b970:	1dfb      	adds	r3, r7, #7
   2b972:	781b      	ldrb	r3, [r3, #0]
   2b974:	0018      	movs	r0, r3
   2b976:	4b08      	ldr	r3, [pc, #32]	; (2b998 <disk_status+0x34>)
   2b978:	4798      	blx	r3
   2b97a:	1e03      	subs	r3, r0, #0
   2b97c:	d002      	beq.n	2b984 <disk_status+0x20>
   2b97e:	2b02      	cmp	r3, #2
   2b980:	d002      	beq.n	2b988 <disk_status+0x24>
   2b982:	e003      	b.n	2b98c <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2b984:	2300      	movs	r3, #0
   2b986:	e002      	b.n	2b98e <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2b988:	2303      	movs	r3, #3
   2b98a:	e000      	b.n	2b98e <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2b98c:	2301      	movs	r3, #1
	}
}
   2b98e:	0018      	movs	r0, r3
   2b990:	46bd      	mov	sp, r7
   2b992:	b002      	add	sp, #8
   2b994:	bd80      	pop	{r7, pc}
   2b996:	46c0      	nop			; (mov r8, r8)
   2b998:	000265b1 	.word	0x000265b1

0002b99c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2b99c:	b590      	push	{r4, r7, lr}
   2b99e:	b089      	sub	sp, #36	; 0x24
   2b9a0:	af00      	add	r7, sp, #0
   2b9a2:	60b9      	str	r1, [r7, #8]
   2b9a4:	607a      	str	r2, [r7, #4]
   2b9a6:	0019      	movs	r1, r3
   2b9a8:	230f      	movs	r3, #15
   2b9aa:	18fb      	adds	r3, r7, r3
   2b9ac:	1c02      	adds	r2, r0, #0
   2b9ae:	701a      	strb	r2, [r3, #0]
   2b9b0:	230e      	movs	r3, #14
   2b9b2:	18fb      	adds	r3, r7, r3
   2b9b4:	1c0a      	adds	r2, r1, #0
   2b9b6:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b9b8:	231b      	movs	r3, #27
   2b9ba:	18fc      	adds	r4, r7, r3
   2b9bc:	230f      	movs	r3, #15
   2b9be:	18fb      	adds	r3, r7, r3
   2b9c0:	781b      	ldrb	r3, [r3, #0]
   2b9c2:	0018      	movs	r0, r3
   2b9c4:	4b28      	ldr	r3, [pc, #160]	; (2ba68 <disk_read+0xcc>)
   2b9c6:	4798      	blx	r3
   2b9c8:	0003      	movs	r3, r0
   2b9ca:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b9cc:	231b      	movs	r3, #27
   2b9ce:	18fb      	adds	r3, r7, r3
   2b9d0:	781b      	ldrb	r3, [r3, #0]
   2b9d2:	2b00      	cmp	r3, #0
   2b9d4:	d101      	bne.n	2b9da <disk_read+0x3e>
		return RES_ERROR;
   2b9d6:	2301      	movs	r3, #1
   2b9d8:	e042      	b.n	2ba60 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b9da:	2314      	movs	r3, #20
   2b9dc:	18fa      	adds	r2, r7, r3
   2b9de:	230f      	movs	r3, #15
   2b9e0:	18fb      	adds	r3, r7, r3
   2b9e2:	781b      	ldrb	r3, [r3, #0]
   2b9e4:	0011      	movs	r1, r2
   2b9e6:	0018      	movs	r0, r3
   2b9e8:	4b20      	ldr	r3, [pc, #128]	; (2ba6c <disk_read+0xd0>)
   2b9ea:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b9ec:	230e      	movs	r3, #14
   2b9ee:	18fb      	adds	r3, r7, r3
   2b9f0:	781b      	ldrb	r3, [r3, #0]
   2b9f2:	221b      	movs	r2, #27
   2b9f4:	18ba      	adds	r2, r7, r2
   2b9f6:	7812      	ldrb	r2, [r2, #0]
   2b9f8:	4353      	muls	r3, r2
   2b9fa:	001a      	movs	r2, r3
   2b9fc:	687b      	ldr	r3, [r7, #4]
   2b9fe:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2ba00:	697b      	ldr	r3, [r7, #20]
   2ba02:	3301      	adds	r3, #1
   2ba04:	211b      	movs	r1, #27
   2ba06:	1879      	adds	r1, r7, r1
   2ba08:	7809      	ldrb	r1, [r1, #0]
   2ba0a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2ba0c:	429a      	cmp	r2, r3
   2ba0e:	d901      	bls.n	2ba14 <disk_read+0x78>
		return RES_PARERR;
   2ba10:	2304      	movs	r3, #4
   2ba12:	e025      	b.n	2ba60 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2ba14:	2300      	movs	r3, #0
   2ba16:	61fb      	str	r3, [r7, #28]
   2ba18:	e01b      	b.n	2ba52 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2ba1a:	231b      	movs	r3, #27
   2ba1c:	18fb      	adds	r3, r7, r3
   2ba1e:	781b      	ldrb	r3, [r3, #0]
   2ba20:	69fa      	ldr	r2, [r7, #28]
   2ba22:	435a      	muls	r2, r3
   2ba24:	687b      	ldr	r3, [r7, #4]
   2ba26:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2ba28:	231b      	movs	r3, #27
   2ba2a:	18fb      	adds	r3, r7, r3
   2ba2c:	781b      	ldrb	r3, [r3, #0]
   2ba2e:	69fa      	ldr	r2, [r7, #28]
   2ba30:	4353      	muls	r3, r2
   2ba32:	025b      	lsls	r3, r3, #9
   2ba34:	68ba      	ldr	r2, [r7, #8]
   2ba36:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2ba38:	230f      	movs	r3, #15
   2ba3a:	18fb      	adds	r3, r7, r3
   2ba3c:	781b      	ldrb	r3, [r3, #0]
   2ba3e:	0018      	movs	r0, r3
   2ba40:	4b0b      	ldr	r3, [pc, #44]	; (2ba70 <disk_read+0xd4>)
   2ba42:	4798      	blx	r3
   2ba44:	1e03      	subs	r3, r0, #0
   2ba46:	d001      	beq.n	2ba4c <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2ba48:	2301      	movs	r3, #1
   2ba4a:	e009      	b.n	2ba60 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2ba4c:	69fb      	ldr	r3, [r7, #28]
   2ba4e:	3301      	adds	r3, #1
   2ba50:	61fb      	str	r3, [r7, #28]
   2ba52:	230e      	movs	r3, #14
   2ba54:	18fb      	adds	r3, r7, r3
   2ba56:	781a      	ldrb	r2, [r3, #0]
   2ba58:	69fb      	ldr	r3, [r7, #28]
   2ba5a:	429a      	cmp	r2, r3
   2ba5c:	d8dd      	bhi.n	2ba1a <disk_read+0x7e>
		}
	}

	return RES_OK;
   2ba5e:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2ba60:	0018      	movs	r0, r3
   2ba62:	46bd      	mov	sp, r7
   2ba64:	b009      	add	sp, #36	; 0x24
   2ba66:	bd90      	pop	{r4, r7, pc}
   2ba68:	0002663d 	.word	0x0002663d
   2ba6c:	000265f1 	.word	0x000265f1
   2ba70:	000266b1 	.word	0x000266b1

0002ba74 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2ba74:	b590      	push	{r4, r7, lr}
   2ba76:	b089      	sub	sp, #36	; 0x24
   2ba78:	af00      	add	r7, sp, #0
   2ba7a:	60b9      	str	r1, [r7, #8]
   2ba7c:	607a      	str	r2, [r7, #4]
   2ba7e:	0019      	movs	r1, r3
   2ba80:	230f      	movs	r3, #15
   2ba82:	18fb      	adds	r3, r7, r3
   2ba84:	1c02      	adds	r2, r0, #0
   2ba86:	701a      	strb	r2, [r3, #0]
   2ba88:	230e      	movs	r3, #14
   2ba8a:	18fb      	adds	r3, r7, r3
   2ba8c:	1c0a      	adds	r2, r1, #0
   2ba8e:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2ba90:	231b      	movs	r3, #27
   2ba92:	18fc      	adds	r4, r7, r3
   2ba94:	230f      	movs	r3, #15
   2ba96:	18fb      	adds	r3, r7, r3
   2ba98:	781b      	ldrb	r3, [r3, #0]
   2ba9a:	0018      	movs	r0, r3
   2ba9c:	4b28      	ldr	r3, [pc, #160]	; (2bb40 <disk_write+0xcc>)
   2ba9e:	4798      	blx	r3
   2baa0:	0003      	movs	r3, r0
   2baa2:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2baa4:	231b      	movs	r3, #27
   2baa6:	18fb      	adds	r3, r7, r3
   2baa8:	781b      	ldrb	r3, [r3, #0]
   2baaa:	2b00      	cmp	r3, #0
   2baac:	d101      	bne.n	2bab2 <disk_write+0x3e>
		return RES_ERROR;
   2baae:	2301      	movs	r3, #1
   2bab0:	e042      	b.n	2bb38 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2bab2:	2314      	movs	r3, #20
   2bab4:	18fa      	adds	r2, r7, r3
   2bab6:	230f      	movs	r3, #15
   2bab8:	18fb      	adds	r3, r7, r3
   2baba:	781b      	ldrb	r3, [r3, #0]
   2babc:	0011      	movs	r1, r2
   2babe:	0018      	movs	r0, r3
   2bac0:	4b20      	ldr	r3, [pc, #128]	; (2bb44 <disk_write+0xd0>)
   2bac2:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2bac4:	230e      	movs	r3, #14
   2bac6:	18fb      	adds	r3, r7, r3
   2bac8:	781b      	ldrb	r3, [r3, #0]
   2baca:	221b      	movs	r2, #27
   2bacc:	18ba      	adds	r2, r7, r2
   2bace:	7812      	ldrb	r2, [r2, #0]
   2bad0:	4353      	muls	r3, r2
   2bad2:	001a      	movs	r2, r3
   2bad4:	687b      	ldr	r3, [r7, #4]
   2bad6:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2bad8:	697b      	ldr	r3, [r7, #20]
   2bada:	3301      	adds	r3, #1
   2badc:	211b      	movs	r1, #27
   2bade:	1879      	adds	r1, r7, r1
   2bae0:	7809      	ldrb	r1, [r1, #0]
   2bae2:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2bae4:	429a      	cmp	r2, r3
   2bae6:	d901      	bls.n	2baec <disk_write+0x78>
		return RES_PARERR;
   2bae8:	2304      	movs	r3, #4
   2baea:	e025      	b.n	2bb38 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2baec:	2300      	movs	r3, #0
   2baee:	61fb      	str	r3, [r7, #28]
   2baf0:	e01b      	b.n	2bb2a <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2baf2:	231b      	movs	r3, #27
   2baf4:	18fb      	adds	r3, r7, r3
   2baf6:	781b      	ldrb	r3, [r3, #0]
   2baf8:	69fa      	ldr	r2, [r7, #28]
   2bafa:	435a      	muls	r2, r3
   2bafc:	687b      	ldr	r3, [r7, #4]
   2bafe:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2bb00:	231b      	movs	r3, #27
   2bb02:	18fb      	adds	r3, r7, r3
   2bb04:	781b      	ldrb	r3, [r3, #0]
   2bb06:	69fa      	ldr	r2, [r7, #28]
   2bb08:	4353      	muls	r3, r2
   2bb0a:	025b      	lsls	r3, r3, #9
   2bb0c:	68ba      	ldr	r2, [r7, #8]
   2bb0e:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2bb10:	230f      	movs	r3, #15
   2bb12:	18fb      	adds	r3, r7, r3
   2bb14:	781b      	ldrb	r3, [r3, #0]
   2bb16:	0018      	movs	r0, r3
   2bb18:	4b0b      	ldr	r3, [pc, #44]	; (2bb48 <disk_write+0xd4>)
   2bb1a:	4798      	blx	r3
   2bb1c:	1e03      	subs	r3, r0, #0
   2bb1e:	d001      	beq.n	2bb24 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2bb20:	2301      	movs	r3, #1
   2bb22:	e009      	b.n	2bb38 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2bb24:	69fb      	ldr	r3, [r7, #28]
   2bb26:	3301      	adds	r3, #1
   2bb28:	61fb      	str	r3, [r7, #28]
   2bb2a:	230e      	movs	r3, #14
   2bb2c:	18fb      	adds	r3, r7, r3
   2bb2e:	781a      	ldrb	r2, [r3, #0]
   2bb30:	69fb      	ldr	r3, [r7, #28]
   2bb32:	429a      	cmp	r2, r3
   2bb34:	d8dd      	bhi.n	2baf2 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2bb36:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2bb38:	0018      	movs	r0, r3
   2bb3a:	46bd      	mov	sp, r7
   2bb3c:	b009      	add	sp, #36	; 0x24
   2bb3e:	bd90      	pop	{r4, r7, pc}
   2bb40:	0002663d 	.word	0x0002663d
   2bb44:	000265f1 	.word	0x000265f1
   2bb48:	00026705 	.word	0x00026705

0002bb4c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2bb4c:	b590      	push	{r4, r7, lr}
   2bb4e:	b085      	sub	sp, #20
   2bb50:	af00      	add	r7, sp, #0
   2bb52:	603a      	str	r2, [r7, #0]
   2bb54:	1dfb      	adds	r3, r7, #7
   2bb56:	1c02      	adds	r2, r0, #0
   2bb58:	701a      	strb	r2, [r3, #0]
   2bb5a:	1dbb      	adds	r3, r7, #6
   2bb5c:	1c0a      	adds	r2, r1, #0
   2bb5e:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2bb60:	230f      	movs	r3, #15
   2bb62:	18fb      	adds	r3, r7, r3
   2bb64:	2204      	movs	r2, #4
   2bb66:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2bb68:	1dbb      	adds	r3, r7, #6
   2bb6a:	781b      	ldrb	r3, [r3, #0]
   2bb6c:	2b01      	cmp	r3, #1
   2bb6e:	d00f      	beq.n	2bb90 <disk_ioctl+0x44>
   2bb70:	dc02      	bgt.n	2bb78 <disk_ioctl+0x2c>
   2bb72:	2b00      	cmp	r3, #0
   2bb74:	d044      	beq.n	2bc00 <disk_ioctl+0xb4>
   2bb76:	e054      	b.n	2bc22 <disk_ioctl+0xd6>
   2bb78:	2b02      	cmp	r3, #2
   2bb7a:	d01a      	beq.n	2bbb2 <disk_ioctl+0x66>
   2bb7c:	2b03      	cmp	r3, #3
   2bb7e:	d150      	bne.n	2bc22 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2bb80:	683b      	ldr	r3, [r7, #0]
   2bb82:	2201      	movs	r2, #1
   2bb84:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2bb86:	230f      	movs	r3, #15
   2bb88:	18fb      	adds	r3, r7, r3
   2bb8a:	2200      	movs	r2, #0
   2bb8c:	701a      	strb	r2, [r3, #0]
		break;
   2bb8e:	e04c      	b.n	2bc2a <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2bb90:	2308      	movs	r3, #8
   2bb92:	18fa      	adds	r2, r7, r3
   2bb94:	1dfb      	adds	r3, r7, #7
   2bb96:	781b      	ldrb	r3, [r3, #0]
   2bb98:	0011      	movs	r1, r2
   2bb9a:	0018      	movs	r0, r3
   2bb9c:	4b26      	ldr	r3, [pc, #152]	; (2bc38 <disk_ioctl+0xec>)
   2bb9e:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2bba0:	68bb      	ldr	r3, [r7, #8]
   2bba2:	1c5a      	adds	r2, r3, #1
   2bba4:	683b      	ldr	r3, [r7, #0]
   2bba6:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2bba8:	230f      	movs	r3, #15
   2bbaa:	18fb      	adds	r3, r7, r3
   2bbac:	2200      	movs	r2, #0
   2bbae:	701a      	strb	r2, [r3, #0]
	}
	break;
   2bbb0:	e03b      	b.n	2bc2a <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2bbb2:	230e      	movs	r3, #14
   2bbb4:	18fc      	adds	r4, r7, r3
   2bbb6:	1dfb      	adds	r3, r7, #7
   2bbb8:	781b      	ldrb	r3, [r3, #0]
   2bbba:	0018      	movs	r0, r3
   2bbbc:	4b1f      	ldr	r3, [pc, #124]	; (2bc3c <disk_ioctl+0xf0>)
   2bbbe:	4798      	blx	r3
   2bbc0:	0003      	movs	r3, r0
   2bbc2:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2bbc4:	230e      	movs	r3, #14
   2bbc6:	18fb      	adds	r3, r7, r3
   2bbc8:	781b      	ldrb	r3, [r3, #0]
   2bbca:	2b01      	cmp	r3, #1
   2bbcc:	d010      	beq.n	2bbf0 <disk_ioctl+0xa4>
   2bbce:	230e      	movs	r3, #14
   2bbd0:	18fb      	adds	r3, r7, r3
   2bbd2:	781b      	ldrb	r3, [r3, #0]
   2bbd4:	2b02      	cmp	r3, #2
   2bbd6:	d00b      	beq.n	2bbf0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2bbd8:	230e      	movs	r3, #14
   2bbda:	18fb      	adds	r3, r7, r3
   2bbdc:	781b      	ldrb	r3, [r3, #0]
   2bbde:	2b04      	cmp	r3, #4
   2bbe0:	d006      	beq.n	2bbf0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2bbe2:	230e      	movs	r3, #14
   2bbe4:	18fb      	adds	r3, r7, r3
   2bbe6:	781b      	ldrb	r3, [r3, #0]
   2bbe8:	2b08      	cmp	r3, #8
   2bbea:	d001      	beq.n	2bbf0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2bbec:	2301      	movs	r3, #1
   2bbee:	e01f      	b.n	2bc30 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2bbf0:	683b      	ldr	r3, [r7, #0]
   2bbf2:	2200      	movs	r2, #0
   2bbf4:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2bbf6:	230f      	movs	r3, #15
   2bbf8:	18fb      	adds	r3, r7, r3
   2bbfa:	2200      	movs	r2, #0
   2bbfc:	701a      	strb	r2, [r3, #0]
	}
	break;
   2bbfe:	e014      	b.n	2bc2a <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2bc00:	1dfb      	adds	r3, r7, #7
   2bc02:	781b      	ldrb	r3, [r3, #0]
   2bc04:	0018      	movs	r0, r3
   2bc06:	4b0e      	ldr	r3, [pc, #56]	; (2bc40 <disk_ioctl+0xf4>)
   2bc08:	4798      	blx	r3
   2bc0a:	1e03      	subs	r3, r0, #0
   2bc0c:	d104      	bne.n	2bc18 <disk_ioctl+0xcc>
			res = RES_OK;
   2bc0e:	230f      	movs	r3, #15
   2bc10:	18fb      	adds	r3, r7, r3
   2bc12:	2200      	movs	r2, #0
   2bc14:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2bc16:	e008      	b.n	2bc2a <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2bc18:	230f      	movs	r3, #15
   2bc1a:	18fb      	adds	r3, r7, r3
   2bc1c:	2203      	movs	r2, #3
   2bc1e:	701a      	strb	r2, [r3, #0]
		break;
   2bc20:	e003      	b.n	2bc2a <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2bc22:	230f      	movs	r3, #15
   2bc24:	18fb      	adds	r3, r7, r3
   2bc26:	2204      	movs	r2, #4
   2bc28:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2bc2a:	230f      	movs	r3, #15
   2bc2c:	18fb      	adds	r3, r7, r3
   2bc2e:	781b      	ldrb	r3, [r3, #0]
}
   2bc30:	0018      	movs	r0, r3
   2bc32:	46bd      	mov	sp, r7
   2bc34:	b005      	add	sp, #20
   2bc36:	bd90      	pop	{r4, r7, pc}
   2bc38:	000265f1 	.word	0x000265f1
   2bc3c:	0002663d 	.word	0x0002663d
   2bc40:	000265b1 	.word	0x000265b1

0002bc44 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2bc44:	b580      	push	{r7, lr}
   2bc46:	b084      	sub	sp, #16
   2bc48:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2bc4a:	1d3a      	adds	r2, r7, #4
   2bc4c:	4b12      	ldr	r3, [pc, #72]	; (2bc98 <get_fattime+0x54>)
   2bc4e:	0011      	movs	r1, r2
   2bc50:	0018      	movs	r0, r3
   2bc52:	4b12      	ldr	r3, [pc, #72]	; (2bc9c <get_fattime+0x58>)
   2bc54:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2bc56:	1d3b      	adds	r3, r7, #4
   2bc58:	88db      	ldrh	r3, [r3, #6]
   2bc5a:	4a11      	ldr	r2, [pc, #68]	; (2bca0 <get_fattime+0x5c>)
   2bc5c:	4694      	mov	ip, r2
   2bc5e:	4463      	add	r3, ip
   2bc60:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2bc62:	1d3b      	adds	r3, r7, #4
   2bc64:	795b      	ldrb	r3, [r3, #5]
   2bc66:	055b      	lsls	r3, r3, #21
   2bc68:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2bc6a:	1d3b      	adds	r3, r7, #4
   2bc6c:	791b      	ldrb	r3, [r3, #4]
   2bc6e:	041b      	lsls	r3, r3, #16
   2bc70:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2bc72:	1d3b      	adds	r3, r7, #4
   2bc74:	789b      	ldrb	r3, [r3, #2]
   2bc76:	02db      	lsls	r3, r3, #11
   2bc78:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2bc7a:	1d3b      	adds	r3, r7, #4
   2bc7c:	785b      	ldrb	r3, [r3, #1]
   2bc7e:	015b      	lsls	r3, r3, #5
   2bc80:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2bc82:	1d3a      	adds	r2, r7, #4
   2bc84:	7812      	ldrb	r2, [r2, #0]
   2bc86:	0852      	lsrs	r2, r2, #1
   2bc88:	b2d2      	uxtb	r2, r2
   2bc8a:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2bc8c:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2bc8e:	68fb      	ldr	r3, [r7, #12]
}
   2bc90:	0018      	movs	r0, r3
   2bc92:	46bd      	mov	sp, r7
   2bc94:	b004      	add	sp, #16
   2bc96:	bd80      	pop	{r7, pc}
   2bc98:	20005c3c 	.word	0x20005c3c
   2bc9c:	0002741d 	.word	0x0002741d
   2bca0:	fffff844 	.word	0xfffff844

0002bca4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2bca4:	b580      	push	{r7, lr}
   2bca6:	b086      	sub	sp, #24
   2bca8:	af00      	add	r7, sp, #0
   2bcaa:	60f8      	str	r0, [r7, #12]
   2bcac:	60b9      	str	r1, [r7, #8]
   2bcae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2bcb0:	68fb      	ldr	r3, [r7, #12]
   2bcb2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2bcb4:	68bb      	ldr	r3, [r7, #8]
   2bcb6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2bcb8:	e007      	b.n	2bcca <mem_cpy+0x26>
		*d++ = *s++;
   2bcba:	697b      	ldr	r3, [r7, #20]
   2bcbc:	1c5a      	adds	r2, r3, #1
   2bcbe:	617a      	str	r2, [r7, #20]
   2bcc0:	693a      	ldr	r2, [r7, #16]
   2bcc2:	1c51      	adds	r1, r2, #1
   2bcc4:	6139      	str	r1, [r7, #16]
   2bcc6:	7812      	ldrb	r2, [r2, #0]
   2bcc8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2bcca:	687b      	ldr	r3, [r7, #4]
   2bccc:	1e5a      	subs	r2, r3, #1
   2bcce:	607a      	str	r2, [r7, #4]
   2bcd0:	2b00      	cmp	r3, #0
   2bcd2:	d1f2      	bne.n	2bcba <mem_cpy+0x16>
}
   2bcd4:	46c0      	nop			; (mov r8, r8)
   2bcd6:	46bd      	mov	sp, r7
   2bcd8:	b006      	add	sp, #24
   2bcda:	bd80      	pop	{r7, pc}

0002bcdc <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2bcdc:	b580      	push	{r7, lr}
   2bcde:	b086      	sub	sp, #24
   2bce0:	af00      	add	r7, sp, #0
   2bce2:	60f8      	str	r0, [r7, #12]
   2bce4:	60b9      	str	r1, [r7, #8]
   2bce6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2bce8:	68fb      	ldr	r3, [r7, #12]
   2bcea:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2bcec:	e005      	b.n	2bcfa <mem_set+0x1e>
		*d++ = (BYTE)val;
   2bcee:	697b      	ldr	r3, [r7, #20]
   2bcf0:	1c5a      	adds	r2, r3, #1
   2bcf2:	617a      	str	r2, [r7, #20]
   2bcf4:	68ba      	ldr	r2, [r7, #8]
   2bcf6:	b2d2      	uxtb	r2, r2
   2bcf8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2bcfa:	687b      	ldr	r3, [r7, #4]
   2bcfc:	1e5a      	subs	r2, r3, #1
   2bcfe:	607a      	str	r2, [r7, #4]
   2bd00:	2b00      	cmp	r3, #0
   2bd02:	d1f4      	bne.n	2bcee <mem_set+0x12>
}
   2bd04:	46c0      	nop			; (mov r8, r8)
   2bd06:	46bd      	mov	sp, r7
   2bd08:	b006      	add	sp, #24
   2bd0a:	bd80      	pop	{r7, pc}

0002bd0c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2bd0c:	b580      	push	{r7, lr}
   2bd0e:	b088      	sub	sp, #32
   2bd10:	af00      	add	r7, sp, #0
   2bd12:	60f8      	str	r0, [r7, #12]
   2bd14:	60b9      	str	r1, [r7, #8]
   2bd16:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2bd18:	68fb      	ldr	r3, [r7, #12]
   2bd1a:	61fb      	str	r3, [r7, #28]
   2bd1c:	68bb      	ldr	r3, [r7, #8]
   2bd1e:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2bd20:	2300      	movs	r3, #0
   2bd22:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2bd24:	46c0      	nop			; (mov r8, r8)
   2bd26:	687b      	ldr	r3, [r7, #4]
   2bd28:	1e5a      	subs	r2, r3, #1
   2bd2a:	607a      	str	r2, [r7, #4]
   2bd2c:	2b00      	cmp	r3, #0
   2bd2e:	d00d      	beq.n	2bd4c <mem_cmp+0x40>
   2bd30:	69fb      	ldr	r3, [r7, #28]
   2bd32:	1c5a      	adds	r2, r3, #1
   2bd34:	61fa      	str	r2, [r7, #28]
   2bd36:	781b      	ldrb	r3, [r3, #0]
   2bd38:	0019      	movs	r1, r3
   2bd3a:	69bb      	ldr	r3, [r7, #24]
   2bd3c:	1c5a      	adds	r2, r3, #1
   2bd3e:	61ba      	str	r2, [r7, #24]
   2bd40:	781b      	ldrb	r3, [r3, #0]
   2bd42:	1acb      	subs	r3, r1, r3
   2bd44:	617b      	str	r3, [r7, #20]
   2bd46:	697b      	ldr	r3, [r7, #20]
   2bd48:	2b00      	cmp	r3, #0
   2bd4a:	d0ec      	beq.n	2bd26 <mem_cmp+0x1a>
	return r;
   2bd4c:	697b      	ldr	r3, [r7, #20]
}
   2bd4e:	0018      	movs	r0, r3
   2bd50:	46bd      	mov	sp, r7
   2bd52:	b008      	add	sp, #32
   2bd54:	bd80      	pop	{r7, pc}

0002bd56 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2bd56:	b580      	push	{r7, lr}
   2bd58:	b082      	sub	sp, #8
   2bd5a:	af00      	add	r7, sp, #0
   2bd5c:	6078      	str	r0, [r7, #4]
   2bd5e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2bd60:	e002      	b.n	2bd68 <chk_chr+0x12>
   2bd62:	687b      	ldr	r3, [r7, #4]
   2bd64:	3301      	adds	r3, #1
   2bd66:	607b      	str	r3, [r7, #4]
   2bd68:	687b      	ldr	r3, [r7, #4]
   2bd6a:	781b      	ldrb	r3, [r3, #0]
   2bd6c:	2b00      	cmp	r3, #0
   2bd6e:	d005      	beq.n	2bd7c <chk_chr+0x26>
   2bd70:	687b      	ldr	r3, [r7, #4]
   2bd72:	781b      	ldrb	r3, [r3, #0]
   2bd74:	001a      	movs	r2, r3
   2bd76:	683b      	ldr	r3, [r7, #0]
   2bd78:	429a      	cmp	r2, r3
   2bd7a:	d1f2      	bne.n	2bd62 <chk_chr+0xc>
	return *str;
   2bd7c:	687b      	ldr	r3, [r7, #4]
   2bd7e:	781b      	ldrb	r3, [r3, #0]
}
   2bd80:	0018      	movs	r0, r3
   2bd82:	46bd      	mov	sp, r7
   2bd84:	b002      	add	sp, #8
   2bd86:	bd80      	pop	{r7, pc}

0002bd88 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2bd88:	b590      	push	{r4, r7, lr}
   2bd8a:	b085      	sub	sp, #20
   2bd8c:	af00      	add	r7, sp, #0
   2bd8e:	6078      	str	r0, [r7, #4]
   2bd90:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2bd92:	687b      	ldr	r3, [r7, #4]
   2bd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2bd96:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2bd98:	68fa      	ldr	r2, [r7, #12]
   2bd9a:	683b      	ldr	r3, [r7, #0]
   2bd9c:	429a      	cmp	r2, r3
   2bd9e:	d04e      	beq.n	2be3e <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2bda0:	687b      	ldr	r3, [r7, #4]
   2bda2:	791b      	ldrb	r3, [r3, #4]
   2bda4:	2b00      	cmp	r3, #0
   2bda6:	d037      	beq.n	2be18 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2bda8:	687b      	ldr	r3, [r7, #4]
   2bdaa:	7858      	ldrb	r0, [r3, #1]
   2bdac:	687b      	ldr	r3, [r7, #4]
   2bdae:	3330      	adds	r3, #48	; 0x30
   2bdb0:	0019      	movs	r1, r3
   2bdb2:	68fa      	ldr	r2, [r7, #12]
   2bdb4:	2301      	movs	r3, #1
   2bdb6:	4c24      	ldr	r4, [pc, #144]	; (2be48 <move_window+0xc0>)
   2bdb8:	47a0      	blx	r4
   2bdba:	1e03      	subs	r3, r0, #0
   2bdbc:	d001      	beq.n	2bdc2 <move_window+0x3a>
				return FR_DISK_ERR;
   2bdbe:	2301      	movs	r3, #1
   2bdc0:	e03e      	b.n	2be40 <move_window+0xb8>
			fs->wflag = 0;
   2bdc2:	687b      	ldr	r3, [r7, #4]
   2bdc4:	2200      	movs	r2, #0
   2bdc6:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2bdc8:	687b      	ldr	r3, [r7, #4]
   2bdca:	6a1a      	ldr	r2, [r3, #32]
   2bdcc:	687b      	ldr	r3, [r7, #4]
   2bdce:	69db      	ldr	r3, [r3, #28]
   2bdd0:	18d2      	adds	r2, r2, r3
   2bdd2:	68fb      	ldr	r3, [r7, #12]
   2bdd4:	429a      	cmp	r2, r3
   2bdd6:	d91f      	bls.n	2be18 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2bdd8:	230b      	movs	r3, #11
   2bdda:	18fb      	adds	r3, r7, r3
   2bddc:	687a      	ldr	r2, [r7, #4]
   2bdde:	78d2      	ldrb	r2, [r2, #3]
   2bde0:	701a      	strb	r2, [r3, #0]
   2bde2:	e014      	b.n	2be0e <move_window+0x86>
					wsect += fs->fsize;
   2bde4:	687b      	ldr	r3, [r7, #4]
   2bde6:	69db      	ldr	r3, [r3, #28]
   2bde8:	68fa      	ldr	r2, [r7, #12]
   2bdea:	18d3      	adds	r3, r2, r3
   2bdec:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2bdee:	687b      	ldr	r3, [r7, #4]
   2bdf0:	7858      	ldrb	r0, [r3, #1]
   2bdf2:	687b      	ldr	r3, [r7, #4]
   2bdf4:	3330      	adds	r3, #48	; 0x30
   2bdf6:	0019      	movs	r1, r3
   2bdf8:	68fa      	ldr	r2, [r7, #12]
   2bdfa:	2301      	movs	r3, #1
   2bdfc:	4c12      	ldr	r4, [pc, #72]	; (2be48 <move_window+0xc0>)
   2bdfe:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2be00:	230b      	movs	r3, #11
   2be02:	18fb      	adds	r3, r7, r3
   2be04:	781a      	ldrb	r2, [r3, #0]
   2be06:	230b      	movs	r3, #11
   2be08:	18fb      	adds	r3, r7, r3
   2be0a:	3a01      	subs	r2, #1
   2be0c:	701a      	strb	r2, [r3, #0]
   2be0e:	230b      	movs	r3, #11
   2be10:	18fb      	adds	r3, r7, r3
   2be12:	781b      	ldrb	r3, [r3, #0]
   2be14:	2b01      	cmp	r3, #1
   2be16:	d8e5      	bhi.n	2bde4 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2be18:	683b      	ldr	r3, [r7, #0]
   2be1a:	2b00      	cmp	r3, #0
   2be1c:	d00f      	beq.n	2be3e <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2be1e:	687b      	ldr	r3, [r7, #4]
   2be20:	7858      	ldrb	r0, [r3, #1]
   2be22:	687b      	ldr	r3, [r7, #4]
   2be24:	3330      	adds	r3, #48	; 0x30
   2be26:	0019      	movs	r1, r3
   2be28:	683a      	ldr	r2, [r7, #0]
   2be2a:	2301      	movs	r3, #1
   2be2c:	4c07      	ldr	r4, [pc, #28]	; (2be4c <move_window+0xc4>)
   2be2e:	47a0      	blx	r4
   2be30:	1e03      	subs	r3, r0, #0
   2be32:	d001      	beq.n	2be38 <move_window+0xb0>
				return FR_DISK_ERR;
   2be34:	2301      	movs	r3, #1
   2be36:	e003      	b.n	2be40 <move_window+0xb8>
			fs->winsect = sector;
   2be38:	687b      	ldr	r3, [r7, #4]
   2be3a:	683a      	ldr	r2, [r7, #0]
   2be3c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2be3e:	2300      	movs	r3, #0
}
   2be40:	0018      	movs	r0, r3
   2be42:	46bd      	mov	sp, r7
   2be44:	b005      	add	sp, #20
   2be46:	bd90      	pop	{r4, r7, pc}
   2be48:	0002ba75 	.word	0x0002ba75
   2be4c:	0002b99d 	.word	0x0002b99d

0002be50 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2be50:	b590      	push	{r4, r7, lr}
   2be52:	b085      	sub	sp, #20
   2be54:	af00      	add	r7, sp, #0
   2be56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2be58:	230f      	movs	r3, #15
   2be5a:	18fc      	adds	r4, r7, r3
   2be5c:	687b      	ldr	r3, [r7, #4]
   2be5e:	2100      	movs	r1, #0
   2be60:	0018      	movs	r0, r3
   2be62:	4b52      	ldr	r3, [pc, #328]	; (2bfac <sync+0x15c>)
   2be64:	4798      	blx	r3
   2be66:	0003      	movs	r3, r0
   2be68:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2be6a:	230f      	movs	r3, #15
   2be6c:	18fb      	adds	r3, r7, r3
   2be6e:	781b      	ldrb	r3, [r3, #0]
   2be70:	2b00      	cmp	r3, #0
   2be72:	d000      	beq.n	2be76 <sync+0x26>
   2be74:	e093      	b.n	2bf9e <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2be76:	687b      	ldr	r3, [r7, #4]
   2be78:	781b      	ldrb	r3, [r3, #0]
   2be7a:	2b03      	cmp	r3, #3
   2be7c:	d000      	beq.n	2be80 <sync+0x30>
   2be7e:	e081      	b.n	2bf84 <sync+0x134>
   2be80:	687b      	ldr	r3, [r7, #4]
   2be82:	795b      	ldrb	r3, [r3, #5]
   2be84:	2b00      	cmp	r3, #0
   2be86:	d07d      	beq.n	2bf84 <sync+0x134>
			fs->winsect = 0;
   2be88:	687b      	ldr	r3, [r7, #4]
   2be8a:	2200      	movs	r2, #0
   2be8c:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2be8e:	687b      	ldr	r3, [r7, #4]
   2be90:	3330      	adds	r3, #48	; 0x30
   2be92:	0018      	movs	r0, r3
   2be94:	2380      	movs	r3, #128	; 0x80
   2be96:	009b      	lsls	r3, r3, #2
   2be98:	001a      	movs	r2, r3
   2be9a:	2100      	movs	r1, #0
   2be9c:	4b44      	ldr	r3, [pc, #272]	; (2bfb0 <sync+0x160>)
   2be9e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2bea0:	687b      	ldr	r3, [r7, #4]
   2bea2:	4a44      	ldr	r2, [pc, #272]	; (2bfb4 <sync+0x164>)
   2bea4:	2155      	movs	r1, #85	; 0x55
   2bea6:	5499      	strb	r1, [r3, r2]
   2bea8:	687b      	ldr	r3, [r7, #4]
   2beaa:	4a43      	ldr	r2, [pc, #268]	; (2bfb8 <sync+0x168>)
   2beac:	21aa      	movs	r1, #170	; 0xaa
   2beae:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2beb0:	687b      	ldr	r3, [r7, #4]
   2beb2:	2230      	movs	r2, #48	; 0x30
   2beb4:	2152      	movs	r1, #82	; 0x52
   2beb6:	5499      	strb	r1, [r3, r2]
   2beb8:	687b      	ldr	r3, [r7, #4]
   2beba:	2231      	movs	r2, #49	; 0x31
   2bebc:	2152      	movs	r1, #82	; 0x52
   2bebe:	5499      	strb	r1, [r3, r2]
   2bec0:	687b      	ldr	r3, [r7, #4]
   2bec2:	2232      	movs	r2, #50	; 0x32
   2bec4:	2161      	movs	r1, #97	; 0x61
   2bec6:	5499      	strb	r1, [r3, r2]
   2bec8:	687b      	ldr	r3, [r7, #4]
   2beca:	2233      	movs	r2, #51	; 0x33
   2becc:	2141      	movs	r1, #65	; 0x41
   2bece:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2bed0:	687a      	ldr	r2, [r7, #4]
   2bed2:	2385      	movs	r3, #133	; 0x85
   2bed4:	009b      	lsls	r3, r3, #2
   2bed6:	2172      	movs	r1, #114	; 0x72
   2bed8:	54d1      	strb	r1, [r2, r3]
   2beda:	687b      	ldr	r3, [r7, #4]
   2bedc:	4a37      	ldr	r2, [pc, #220]	; (2bfbc <sync+0x16c>)
   2bede:	2172      	movs	r1, #114	; 0x72
   2bee0:	5499      	strb	r1, [r3, r2]
   2bee2:	687b      	ldr	r3, [r7, #4]
   2bee4:	4a36      	ldr	r2, [pc, #216]	; (2bfc0 <sync+0x170>)
   2bee6:	2141      	movs	r1, #65	; 0x41
   2bee8:	5499      	strb	r1, [r3, r2]
   2beea:	687b      	ldr	r3, [r7, #4]
   2beec:	4a35      	ldr	r2, [pc, #212]	; (2bfc4 <sync+0x174>)
   2beee:	2161      	movs	r1, #97	; 0x61
   2bef0:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2bef2:	687b      	ldr	r3, [r7, #4]
   2bef4:	691b      	ldr	r3, [r3, #16]
   2bef6:	b2d9      	uxtb	r1, r3
   2bef8:	687a      	ldr	r2, [r7, #4]
   2befa:	2386      	movs	r3, #134	; 0x86
   2befc:	009b      	lsls	r3, r3, #2
   2befe:	54d1      	strb	r1, [r2, r3]
   2bf00:	687b      	ldr	r3, [r7, #4]
   2bf02:	691b      	ldr	r3, [r3, #16]
   2bf04:	b29b      	uxth	r3, r3
   2bf06:	0a1b      	lsrs	r3, r3, #8
   2bf08:	b29b      	uxth	r3, r3
   2bf0a:	b2d9      	uxtb	r1, r3
   2bf0c:	687b      	ldr	r3, [r7, #4]
   2bf0e:	4a2e      	ldr	r2, [pc, #184]	; (2bfc8 <sync+0x178>)
   2bf10:	5499      	strb	r1, [r3, r2]
   2bf12:	687b      	ldr	r3, [r7, #4]
   2bf14:	691b      	ldr	r3, [r3, #16]
   2bf16:	0c1b      	lsrs	r3, r3, #16
   2bf18:	b2d9      	uxtb	r1, r3
   2bf1a:	687b      	ldr	r3, [r7, #4]
   2bf1c:	4a2b      	ldr	r2, [pc, #172]	; (2bfcc <sync+0x17c>)
   2bf1e:	5499      	strb	r1, [r3, r2]
   2bf20:	687b      	ldr	r3, [r7, #4]
   2bf22:	691b      	ldr	r3, [r3, #16]
   2bf24:	0e1b      	lsrs	r3, r3, #24
   2bf26:	b2d9      	uxtb	r1, r3
   2bf28:	687b      	ldr	r3, [r7, #4]
   2bf2a:	4a29      	ldr	r2, [pc, #164]	; (2bfd0 <sync+0x180>)
   2bf2c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2bf2e:	687b      	ldr	r3, [r7, #4]
   2bf30:	68db      	ldr	r3, [r3, #12]
   2bf32:	b2d9      	uxtb	r1, r3
   2bf34:	687a      	ldr	r2, [r7, #4]
   2bf36:	2387      	movs	r3, #135	; 0x87
   2bf38:	009b      	lsls	r3, r3, #2
   2bf3a:	54d1      	strb	r1, [r2, r3]
   2bf3c:	687b      	ldr	r3, [r7, #4]
   2bf3e:	68db      	ldr	r3, [r3, #12]
   2bf40:	b29b      	uxth	r3, r3
   2bf42:	0a1b      	lsrs	r3, r3, #8
   2bf44:	b29b      	uxth	r3, r3
   2bf46:	b2d9      	uxtb	r1, r3
   2bf48:	687b      	ldr	r3, [r7, #4]
   2bf4a:	4a22      	ldr	r2, [pc, #136]	; (2bfd4 <sync+0x184>)
   2bf4c:	5499      	strb	r1, [r3, r2]
   2bf4e:	687b      	ldr	r3, [r7, #4]
   2bf50:	68db      	ldr	r3, [r3, #12]
   2bf52:	0c1b      	lsrs	r3, r3, #16
   2bf54:	b2d9      	uxtb	r1, r3
   2bf56:	687b      	ldr	r3, [r7, #4]
   2bf58:	4a1f      	ldr	r2, [pc, #124]	; (2bfd8 <sync+0x188>)
   2bf5a:	5499      	strb	r1, [r3, r2]
   2bf5c:	687b      	ldr	r3, [r7, #4]
   2bf5e:	68db      	ldr	r3, [r3, #12]
   2bf60:	0e1b      	lsrs	r3, r3, #24
   2bf62:	b2d9      	uxtb	r1, r3
   2bf64:	687b      	ldr	r3, [r7, #4]
   2bf66:	4a1d      	ldr	r2, [pc, #116]	; (2bfdc <sync+0x18c>)
   2bf68:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2bf6a:	687b      	ldr	r3, [r7, #4]
   2bf6c:	7858      	ldrb	r0, [r3, #1]
   2bf6e:	687b      	ldr	r3, [r7, #4]
   2bf70:	3330      	adds	r3, #48	; 0x30
   2bf72:	0019      	movs	r1, r3
   2bf74:	687b      	ldr	r3, [r7, #4]
   2bf76:	695a      	ldr	r2, [r3, #20]
   2bf78:	2301      	movs	r3, #1
   2bf7a:	4c19      	ldr	r4, [pc, #100]	; (2bfe0 <sync+0x190>)
   2bf7c:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2bf7e:	687b      	ldr	r3, [r7, #4]
   2bf80:	2200      	movs	r2, #0
   2bf82:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2bf84:	687b      	ldr	r3, [r7, #4]
   2bf86:	785b      	ldrb	r3, [r3, #1]
   2bf88:	2200      	movs	r2, #0
   2bf8a:	2100      	movs	r1, #0
   2bf8c:	0018      	movs	r0, r3
   2bf8e:	4b15      	ldr	r3, [pc, #84]	; (2bfe4 <sync+0x194>)
   2bf90:	4798      	blx	r3
   2bf92:	1e03      	subs	r3, r0, #0
   2bf94:	d003      	beq.n	2bf9e <sync+0x14e>
			res = FR_DISK_ERR;
   2bf96:	230f      	movs	r3, #15
   2bf98:	18fb      	adds	r3, r7, r3
   2bf9a:	2201      	movs	r2, #1
   2bf9c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2bf9e:	230f      	movs	r3, #15
   2bfa0:	18fb      	adds	r3, r7, r3
   2bfa2:	781b      	ldrb	r3, [r3, #0]
}
   2bfa4:	0018      	movs	r0, r3
   2bfa6:	46bd      	mov	sp, r7
   2bfa8:	b005      	add	sp, #20
   2bfaa:	bd90      	pop	{r4, r7, pc}
   2bfac:	0002bd89 	.word	0x0002bd89
   2bfb0:	0002bcdd 	.word	0x0002bcdd
   2bfb4:	0000022e 	.word	0x0000022e
   2bfb8:	0000022f 	.word	0x0000022f
   2bfbc:	00000215 	.word	0x00000215
   2bfc0:	00000216 	.word	0x00000216
   2bfc4:	00000217 	.word	0x00000217
   2bfc8:	00000219 	.word	0x00000219
   2bfcc:	0000021a 	.word	0x0000021a
   2bfd0:	0000021b 	.word	0x0000021b
   2bfd4:	0000021d 	.word	0x0000021d
   2bfd8:	0000021e 	.word	0x0000021e
   2bfdc:	0000021f 	.word	0x0000021f
   2bfe0:	0002ba75 	.word	0x0002ba75
   2bfe4:	0002bb4d 	.word	0x0002bb4d

0002bfe8 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2bfe8:	b580      	push	{r7, lr}
   2bfea:	b082      	sub	sp, #8
   2bfec:	af00      	add	r7, sp, #0
   2bfee:	6078      	str	r0, [r7, #4]
   2bff0:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2bff2:	683b      	ldr	r3, [r7, #0]
   2bff4:	3b02      	subs	r3, #2
   2bff6:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2bff8:	687b      	ldr	r3, [r7, #4]
   2bffa:	699b      	ldr	r3, [r3, #24]
   2bffc:	1e9a      	subs	r2, r3, #2
   2bffe:	683b      	ldr	r3, [r7, #0]
   2c000:	429a      	cmp	r2, r3
   2c002:	d801      	bhi.n	2c008 <clust2sect+0x20>
   2c004:	2300      	movs	r3, #0
   2c006:	e007      	b.n	2c018 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2c008:	687b      	ldr	r3, [r7, #4]
   2c00a:	789b      	ldrb	r3, [r3, #2]
   2c00c:	001a      	movs	r2, r3
   2c00e:	683b      	ldr	r3, [r7, #0]
   2c010:	435a      	muls	r2, r3
   2c012:	687b      	ldr	r3, [r7, #4]
   2c014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c016:	18d3      	adds	r3, r2, r3
}
   2c018:	0018      	movs	r0, r3
   2c01a:	46bd      	mov	sp, r7
   2c01c:	b002      	add	sp, #8
   2c01e:	bd80      	pop	{r7, pc}

0002c020 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2c020:	b580      	push	{r7, lr}
   2c022:	b086      	sub	sp, #24
   2c024:	af00      	add	r7, sp, #0
   2c026:	6078      	str	r0, [r7, #4]
   2c028:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2c02a:	683b      	ldr	r3, [r7, #0]
   2c02c:	2b01      	cmp	r3, #1
   2c02e:	d904      	bls.n	2c03a <get_fat+0x1a>
   2c030:	687b      	ldr	r3, [r7, #4]
   2c032:	699a      	ldr	r2, [r3, #24]
   2c034:	683b      	ldr	r3, [r7, #0]
   2c036:	429a      	cmp	r2, r3
   2c038:	d801      	bhi.n	2c03e <get_fat+0x1e>
		return 1;
   2c03a:	2301      	movs	r3, #1
   2c03c:	e09f      	b.n	2c17e <get_fat+0x15e>

	switch (fs->fs_type) {
   2c03e:	687b      	ldr	r3, [r7, #4]
   2c040:	781b      	ldrb	r3, [r3, #0]
   2c042:	2b02      	cmp	r3, #2
   2c044:	d048      	beq.n	2c0d8 <get_fat+0xb8>
   2c046:	2b03      	cmp	r3, #3
   2c048:	d067      	beq.n	2c11a <get_fat+0xfa>
   2c04a:	2b01      	cmp	r3, #1
   2c04c:	d000      	beq.n	2c050 <get_fat+0x30>
   2c04e:	e094      	b.n	2c17a <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2c050:	683b      	ldr	r3, [r7, #0]
   2c052:	617b      	str	r3, [r7, #20]
   2c054:	697b      	ldr	r3, [r7, #20]
   2c056:	085b      	lsrs	r3, r3, #1
   2c058:	697a      	ldr	r2, [r7, #20]
   2c05a:	18d3      	adds	r3, r2, r3
   2c05c:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c05e:	687b      	ldr	r3, [r7, #4]
   2c060:	6a1a      	ldr	r2, [r3, #32]
   2c062:	697b      	ldr	r3, [r7, #20]
   2c064:	0a5b      	lsrs	r3, r3, #9
   2c066:	18d2      	adds	r2, r2, r3
   2c068:	687b      	ldr	r3, [r7, #4]
   2c06a:	0011      	movs	r1, r2
   2c06c:	0018      	movs	r0, r3
   2c06e:	4b46      	ldr	r3, [pc, #280]	; (2c188 <get_fat+0x168>)
   2c070:	4798      	blx	r3
   2c072:	1e03      	subs	r3, r0, #0
   2c074:	d000      	beq.n	2c078 <get_fat+0x58>
   2c076:	e079      	b.n	2c16c <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2c078:	697b      	ldr	r3, [r7, #20]
   2c07a:	05db      	lsls	r3, r3, #23
   2c07c:	0ddb      	lsrs	r3, r3, #23
   2c07e:	687a      	ldr	r2, [r7, #4]
   2c080:	2130      	movs	r1, #48	; 0x30
   2c082:	18d3      	adds	r3, r2, r3
   2c084:	185b      	adds	r3, r3, r1
   2c086:	781b      	ldrb	r3, [r3, #0]
   2c088:	613b      	str	r3, [r7, #16]
   2c08a:	697b      	ldr	r3, [r7, #20]
   2c08c:	3301      	adds	r3, #1
   2c08e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c090:	687b      	ldr	r3, [r7, #4]
   2c092:	6a1a      	ldr	r2, [r3, #32]
   2c094:	697b      	ldr	r3, [r7, #20]
   2c096:	0a5b      	lsrs	r3, r3, #9
   2c098:	18d2      	adds	r2, r2, r3
   2c09a:	687b      	ldr	r3, [r7, #4]
   2c09c:	0011      	movs	r1, r2
   2c09e:	0018      	movs	r0, r3
   2c0a0:	4b39      	ldr	r3, [pc, #228]	; (2c188 <get_fat+0x168>)
   2c0a2:	4798      	blx	r3
   2c0a4:	1e03      	subs	r3, r0, #0
   2c0a6:	d163      	bne.n	2c170 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2c0a8:	697b      	ldr	r3, [r7, #20]
   2c0aa:	05db      	lsls	r3, r3, #23
   2c0ac:	0ddb      	lsrs	r3, r3, #23
   2c0ae:	687a      	ldr	r2, [r7, #4]
   2c0b0:	2130      	movs	r1, #48	; 0x30
   2c0b2:	18d3      	adds	r3, r2, r3
   2c0b4:	185b      	adds	r3, r3, r1
   2c0b6:	781b      	ldrb	r3, [r3, #0]
   2c0b8:	021b      	lsls	r3, r3, #8
   2c0ba:	001a      	movs	r2, r3
   2c0bc:	693b      	ldr	r3, [r7, #16]
   2c0be:	4313      	orrs	r3, r2
   2c0c0:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2c0c2:	683b      	ldr	r3, [r7, #0]
   2c0c4:	2201      	movs	r2, #1
   2c0c6:	4013      	ands	r3, r2
   2c0c8:	d002      	beq.n	2c0d0 <get_fat+0xb0>
   2c0ca:	693b      	ldr	r3, [r7, #16]
   2c0cc:	091b      	lsrs	r3, r3, #4
   2c0ce:	e056      	b.n	2c17e <get_fat+0x15e>
   2c0d0:	693b      	ldr	r3, [r7, #16]
   2c0d2:	051b      	lsls	r3, r3, #20
   2c0d4:	0d1b      	lsrs	r3, r3, #20
   2c0d6:	e052      	b.n	2c17e <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c0d8:	687b      	ldr	r3, [r7, #4]
   2c0da:	6a1a      	ldr	r2, [r3, #32]
   2c0dc:	683b      	ldr	r3, [r7, #0]
   2c0de:	0a1b      	lsrs	r3, r3, #8
   2c0e0:	18d2      	adds	r2, r2, r3
   2c0e2:	687b      	ldr	r3, [r7, #4]
   2c0e4:	0011      	movs	r1, r2
   2c0e6:	0018      	movs	r0, r3
   2c0e8:	4b27      	ldr	r3, [pc, #156]	; (2c188 <get_fat+0x168>)
   2c0ea:	4798      	blx	r3
   2c0ec:	1e03      	subs	r3, r0, #0
   2c0ee:	d141      	bne.n	2c174 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2c0f0:	683b      	ldr	r3, [r7, #0]
   2c0f2:	005a      	lsls	r2, r3, #1
   2c0f4:	23ff      	movs	r3, #255	; 0xff
   2c0f6:	005b      	lsls	r3, r3, #1
   2c0f8:	4013      	ands	r3, r2
   2c0fa:	3330      	adds	r3, #48	; 0x30
   2c0fc:	687a      	ldr	r2, [r7, #4]
   2c0fe:	18d3      	adds	r3, r2, r3
   2c100:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2c102:	68fb      	ldr	r3, [r7, #12]
   2c104:	3301      	adds	r3, #1
   2c106:	781b      	ldrb	r3, [r3, #0]
   2c108:	021b      	lsls	r3, r3, #8
   2c10a:	b21a      	sxth	r2, r3
   2c10c:	68fb      	ldr	r3, [r7, #12]
   2c10e:	781b      	ldrb	r3, [r3, #0]
   2c110:	b21b      	sxth	r3, r3
   2c112:	4313      	orrs	r3, r2
   2c114:	b21b      	sxth	r3, r3
   2c116:	b29b      	uxth	r3, r3
   2c118:	e031      	b.n	2c17e <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c11a:	687b      	ldr	r3, [r7, #4]
   2c11c:	6a1a      	ldr	r2, [r3, #32]
   2c11e:	683b      	ldr	r3, [r7, #0]
   2c120:	09db      	lsrs	r3, r3, #7
   2c122:	18d2      	adds	r2, r2, r3
   2c124:	687b      	ldr	r3, [r7, #4]
   2c126:	0011      	movs	r1, r2
   2c128:	0018      	movs	r0, r3
   2c12a:	4b17      	ldr	r3, [pc, #92]	; (2c188 <get_fat+0x168>)
   2c12c:	4798      	blx	r3
   2c12e:	1e03      	subs	r3, r0, #0
   2c130:	d122      	bne.n	2c178 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2c132:	683b      	ldr	r3, [r7, #0]
   2c134:	009a      	lsls	r2, r3, #2
   2c136:	23fe      	movs	r3, #254	; 0xfe
   2c138:	005b      	lsls	r3, r3, #1
   2c13a:	4013      	ands	r3, r2
   2c13c:	3330      	adds	r3, #48	; 0x30
   2c13e:	687a      	ldr	r2, [r7, #4]
   2c140:	18d3      	adds	r3, r2, r3
   2c142:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2c144:	68fb      	ldr	r3, [r7, #12]
   2c146:	3303      	adds	r3, #3
   2c148:	781b      	ldrb	r3, [r3, #0]
   2c14a:	061a      	lsls	r2, r3, #24
   2c14c:	68fb      	ldr	r3, [r7, #12]
   2c14e:	3302      	adds	r3, #2
   2c150:	781b      	ldrb	r3, [r3, #0]
   2c152:	041b      	lsls	r3, r3, #16
   2c154:	4313      	orrs	r3, r2
   2c156:	68fa      	ldr	r2, [r7, #12]
   2c158:	3201      	adds	r2, #1
   2c15a:	7812      	ldrb	r2, [r2, #0]
   2c15c:	0212      	lsls	r2, r2, #8
   2c15e:	4313      	orrs	r3, r2
   2c160:	68fa      	ldr	r2, [r7, #12]
   2c162:	7812      	ldrb	r2, [r2, #0]
   2c164:	4313      	orrs	r3, r2
   2c166:	011b      	lsls	r3, r3, #4
   2c168:	091b      	lsrs	r3, r3, #4
   2c16a:	e008      	b.n	2c17e <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c16c:	46c0      	nop			; (mov r8, r8)
   2c16e:	e004      	b.n	2c17a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c170:	46c0      	nop			; (mov r8, r8)
   2c172:	e002      	b.n	2c17a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c174:	46c0      	nop			; (mov r8, r8)
   2c176:	e000      	b.n	2c17a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c178:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2c17a:	2301      	movs	r3, #1
   2c17c:	425b      	negs	r3, r3
}
   2c17e:	0018      	movs	r0, r3
   2c180:	46bd      	mov	sp, r7
   2c182:	b006      	add	sp, #24
   2c184:	bd80      	pop	{r7, pc}
   2c186:	46c0      	nop			; (mov r8, r8)
   2c188:	0002bd89 	.word	0x0002bd89

0002c18c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2c18c:	b590      	push	{r4, r7, lr}
   2c18e:	b089      	sub	sp, #36	; 0x24
   2c190:	af00      	add	r7, sp, #0
   2c192:	60f8      	str	r0, [r7, #12]
   2c194:	60b9      	str	r1, [r7, #8]
   2c196:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2c198:	68bb      	ldr	r3, [r7, #8]
   2c19a:	2b01      	cmp	r3, #1
   2c19c:	d904      	bls.n	2c1a8 <put_fat+0x1c>
   2c19e:	68fb      	ldr	r3, [r7, #12]
   2c1a0:	699a      	ldr	r2, [r3, #24]
   2c1a2:	68bb      	ldr	r3, [r7, #8]
   2c1a4:	429a      	cmp	r2, r3
   2c1a6:	d804      	bhi.n	2c1b2 <put_fat+0x26>
		res = FR_INT_ERR;
   2c1a8:	231f      	movs	r3, #31
   2c1aa:	18fb      	adds	r3, r7, r3
   2c1ac:	2202      	movs	r2, #2
   2c1ae:	701a      	strb	r2, [r3, #0]
   2c1b0:	e100      	b.n	2c3b4 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2c1b2:	68fb      	ldr	r3, [r7, #12]
   2c1b4:	781b      	ldrb	r3, [r3, #0]
   2c1b6:	2b02      	cmp	r3, #2
   2c1b8:	d100      	bne.n	2c1bc <put_fat+0x30>
   2c1ba:	e078      	b.n	2c2ae <put_fat+0x122>
   2c1bc:	2b03      	cmp	r3, #3
   2c1be:	d100      	bne.n	2c1c2 <put_fat+0x36>
   2c1c0:	e09e      	b.n	2c300 <put_fat+0x174>
   2c1c2:	2b01      	cmp	r3, #1
   2c1c4:	d000      	beq.n	2c1c8 <put_fat+0x3c>
   2c1c6:	e0e6      	b.n	2c396 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2c1c8:	68bb      	ldr	r3, [r7, #8]
   2c1ca:	61bb      	str	r3, [r7, #24]
   2c1cc:	69bb      	ldr	r3, [r7, #24]
   2c1ce:	085b      	lsrs	r3, r3, #1
   2c1d0:	69ba      	ldr	r2, [r7, #24]
   2c1d2:	18d3      	adds	r3, r2, r3
   2c1d4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c1d6:	68fb      	ldr	r3, [r7, #12]
   2c1d8:	6a1a      	ldr	r2, [r3, #32]
   2c1da:	69bb      	ldr	r3, [r7, #24]
   2c1dc:	0a5b      	lsrs	r3, r3, #9
   2c1de:	18d2      	adds	r2, r2, r3
   2c1e0:	231f      	movs	r3, #31
   2c1e2:	18fc      	adds	r4, r7, r3
   2c1e4:	68fb      	ldr	r3, [r7, #12]
   2c1e6:	0011      	movs	r1, r2
   2c1e8:	0018      	movs	r0, r3
   2c1ea:	4b76      	ldr	r3, [pc, #472]	; (2c3c4 <put_fat+0x238>)
   2c1ec:	4798      	blx	r3
   2c1ee:	0003      	movs	r3, r0
   2c1f0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c1f2:	231f      	movs	r3, #31
   2c1f4:	18fb      	adds	r3, r7, r3
   2c1f6:	781b      	ldrb	r3, [r3, #0]
   2c1f8:	2b00      	cmp	r3, #0
   2c1fa:	d000      	beq.n	2c1fe <put_fat+0x72>
   2c1fc:	e0d0      	b.n	2c3a0 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2c1fe:	69bb      	ldr	r3, [r7, #24]
   2c200:	05db      	lsls	r3, r3, #23
   2c202:	0ddb      	lsrs	r3, r3, #23
   2c204:	3330      	adds	r3, #48	; 0x30
   2c206:	68fa      	ldr	r2, [r7, #12]
   2c208:	18d3      	adds	r3, r2, r3
   2c20a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2c20c:	68bb      	ldr	r3, [r7, #8]
   2c20e:	2201      	movs	r2, #1
   2c210:	4013      	ands	r3, r2
   2c212:	d00d      	beq.n	2c230 <put_fat+0xa4>
   2c214:	697b      	ldr	r3, [r7, #20]
   2c216:	781b      	ldrb	r3, [r3, #0]
   2c218:	b25b      	sxtb	r3, r3
   2c21a:	220f      	movs	r2, #15
   2c21c:	4013      	ands	r3, r2
   2c21e:	b25a      	sxtb	r2, r3
   2c220:	687b      	ldr	r3, [r7, #4]
   2c222:	b2db      	uxtb	r3, r3
   2c224:	011b      	lsls	r3, r3, #4
   2c226:	b25b      	sxtb	r3, r3
   2c228:	4313      	orrs	r3, r2
   2c22a:	b25b      	sxtb	r3, r3
   2c22c:	b2db      	uxtb	r3, r3
   2c22e:	e001      	b.n	2c234 <put_fat+0xa8>
   2c230:	687b      	ldr	r3, [r7, #4]
   2c232:	b2db      	uxtb	r3, r3
   2c234:	697a      	ldr	r2, [r7, #20]
   2c236:	7013      	strb	r3, [r2, #0]
			bc++;
   2c238:	69bb      	ldr	r3, [r7, #24]
   2c23a:	3301      	adds	r3, #1
   2c23c:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2c23e:	68fb      	ldr	r3, [r7, #12]
   2c240:	2201      	movs	r2, #1
   2c242:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c244:	68fb      	ldr	r3, [r7, #12]
   2c246:	6a1a      	ldr	r2, [r3, #32]
   2c248:	69bb      	ldr	r3, [r7, #24]
   2c24a:	0a5b      	lsrs	r3, r3, #9
   2c24c:	18d2      	adds	r2, r2, r3
   2c24e:	231f      	movs	r3, #31
   2c250:	18fc      	adds	r4, r7, r3
   2c252:	68fb      	ldr	r3, [r7, #12]
   2c254:	0011      	movs	r1, r2
   2c256:	0018      	movs	r0, r3
   2c258:	4b5a      	ldr	r3, [pc, #360]	; (2c3c4 <put_fat+0x238>)
   2c25a:	4798      	blx	r3
   2c25c:	0003      	movs	r3, r0
   2c25e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c260:	231f      	movs	r3, #31
   2c262:	18fb      	adds	r3, r7, r3
   2c264:	781b      	ldrb	r3, [r3, #0]
   2c266:	2b00      	cmp	r3, #0
   2c268:	d000      	beq.n	2c26c <put_fat+0xe0>
   2c26a:	e09b      	b.n	2c3a4 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2c26c:	69bb      	ldr	r3, [r7, #24]
   2c26e:	05db      	lsls	r3, r3, #23
   2c270:	0ddb      	lsrs	r3, r3, #23
   2c272:	3330      	adds	r3, #48	; 0x30
   2c274:	68fa      	ldr	r2, [r7, #12]
   2c276:	18d3      	adds	r3, r2, r3
   2c278:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2c27a:	68bb      	ldr	r3, [r7, #8]
   2c27c:	2201      	movs	r2, #1
   2c27e:	4013      	ands	r3, r2
   2c280:	d003      	beq.n	2c28a <put_fat+0xfe>
   2c282:	687b      	ldr	r3, [r7, #4]
   2c284:	091b      	lsrs	r3, r3, #4
   2c286:	b2db      	uxtb	r3, r3
   2c288:	e00e      	b.n	2c2a8 <put_fat+0x11c>
   2c28a:	697b      	ldr	r3, [r7, #20]
   2c28c:	781b      	ldrb	r3, [r3, #0]
   2c28e:	b25b      	sxtb	r3, r3
   2c290:	220f      	movs	r2, #15
   2c292:	4393      	bics	r3, r2
   2c294:	b25a      	sxtb	r2, r3
   2c296:	687b      	ldr	r3, [r7, #4]
   2c298:	0a1b      	lsrs	r3, r3, #8
   2c29a:	b25b      	sxtb	r3, r3
   2c29c:	210f      	movs	r1, #15
   2c29e:	400b      	ands	r3, r1
   2c2a0:	b25b      	sxtb	r3, r3
   2c2a2:	4313      	orrs	r3, r2
   2c2a4:	b25b      	sxtb	r3, r3
   2c2a6:	b2db      	uxtb	r3, r3
   2c2a8:	697a      	ldr	r2, [r7, #20]
   2c2aa:	7013      	strb	r3, [r2, #0]
			break;
   2c2ac:	e07f      	b.n	2c3ae <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2c2ae:	68fb      	ldr	r3, [r7, #12]
   2c2b0:	6a1a      	ldr	r2, [r3, #32]
   2c2b2:	68bb      	ldr	r3, [r7, #8]
   2c2b4:	0a1b      	lsrs	r3, r3, #8
   2c2b6:	18d2      	adds	r2, r2, r3
   2c2b8:	231f      	movs	r3, #31
   2c2ba:	18fc      	adds	r4, r7, r3
   2c2bc:	68fb      	ldr	r3, [r7, #12]
   2c2be:	0011      	movs	r1, r2
   2c2c0:	0018      	movs	r0, r3
   2c2c2:	4b40      	ldr	r3, [pc, #256]	; (2c3c4 <put_fat+0x238>)
   2c2c4:	4798      	blx	r3
   2c2c6:	0003      	movs	r3, r0
   2c2c8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c2ca:	231f      	movs	r3, #31
   2c2cc:	18fb      	adds	r3, r7, r3
   2c2ce:	781b      	ldrb	r3, [r3, #0]
   2c2d0:	2b00      	cmp	r3, #0
   2c2d2:	d169      	bne.n	2c3a8 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2c2d4:	68bb      	ldr	r3, [r7, #8]
   2c2d6:	005a      	lsls	r2, r3, #1
   2c2d8:	23ff      	movs	r3, #255	; 0xff
   2c2da:	005b      	lsls	r3, r3, #1
   2c2dc:	4013      	ands	r3, r2
   2c2de:	3330      	adds	r3, #48	; 0x30
   2c2e0:	68fa      	ldr	r2, [r7, #12]
   2c2e2:	18d3      	adds	r3, r2, r3
   2c2e4:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2c2e6:	687b      	ldr	r3, [r7, #4]
   2c2e8:	b2da      	uxtb	r2, r3
   2c2ea:	697b      	ldr	r3, [r7, #20]
   2c2ec:	701a      	strb	r2, [r3, #0]
   2c2ee:	697b      	ldr	r3, [r7, #20]
   2c2f0:	3301      	adds	r3, #1
   2c2f2:	687a      	ldr	r2, [r7, #4]
   2c2f4:	b292      	uxth	r2, r2
   2c2f6:	0a12      	lsrs	r2, r2, #8
   2c2f8:	b292      	uxth	r2, r2
   2c2fa:	b2d2      	uxtb	r2, r2
   2c2fc:	701a      	strb	r2, [r3, #0]
			break;
   2c2fe:	e056      	b.n	2c3ae <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2c300:	68fb      	ldr	r3, [r7, #12]
   2c302:	6a1a      	ldr	r2, [r3, #32]
   2c304:	68bb      	ldr	r3, [r7, #8]
   2c306:	09db      	lsrs	r3, r3, #7
   2c308:	18d2      	adds	r2, r2, r3
   2c30a:	231f      	movs	r3, #31
   2c30c:	18fc      	adds	r4, r7, r3
   2c30e:	68fb      	ldr	r3, [r7, #12]
   2c310:	0011      	movs	r1, r2
   2c312:	0018      	movs	r0, r3
   2c314:	4b2b      	ldr	r3, [pc, #172]	; (2c3c4 <put_fat+0x238>)
   2c316:	4798      	blx	r3
   2c318:	0003      	movs	r3, r0
   2c31a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c31c:	231f      	movs	r3, #31
   2c31e:	18fb      	adds	r3, r7, r3
   2c320:	781b      	ldrb	r3, [r3, #0]
   2c322:	2b00      	cmp	r3, #0
   2c324:	d142      	bne.n	2c3ac <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2c326:	68bb      	ldr	r3, [r7, #8]
   2c328:	009a      	lsls	r2, r3, #2
   2c32a:	23fe      	movs	r3, #254	; 0xfe
   2c32c:	005b      	lsls	r3, r3, #1
   2c32e:	4013      	ands	r3, r2
   2c330:	3330      	adds	r3, #48	; 0x30
   2c332:	68fa      	ldr	r2, [r7, #12]
   2c334:	18d3      	adds	r3, r2, r3
   2c336:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2c338:	697b      	ldr	r3, [r7, #20]
   2c33a:	3303      	adds	r3, #3
   2c33c:	781b      	ldrb	r3, [r3, #0]
   2c33e:	061a      	lsls	r2, r3, #24
   2c340:	697b      	ldr	r3, [r7, #20]
   2c342:	3302      	adds	r3, #2
   2c344:	781b      	ldrb	r3, [r3, #0]
   2c346:	041b      	lsls	r3, r3, #16
   2c348:	4313      	orrs	r3, r2
   2c34a:	697a      	ldr	r2, [r7, #20]
   2c34c:	3201      	adds	r2, #1
   2c34e:	7812      	ldrb	r2, [r2, #0]
   2c350:	0212      	lsls	r2, r2, #8
   2c352:	4313      	orrs	r3, r2
   2c354:	697a      	ldr	r2, [r7, #20]
   2c356:	7812      	ldrb	r2, [r2, #0]
   2c358:	4313      	orrs	r3, r2
   2c35a:	0f1b      	lsrs	r3, r3, #28
   2c35c:	071b      	lsls	r3, r3, #28
   2c35e:	687a      	ldr	r2, [r7, #4]
   2c360:	4313      	orrs	r3, r2
   2c362:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2c364:	687b      	ldr	r3, [r7, #4]
   2c366:	b2da      	uxtb	r2, r3
   2c368:	697b      	ldr	r3, [r7, #20]
   2c36a:	701a      	strb	r2, [r3, #0]
   2c36c:	697b      	ldr	r3, [r7, #20]
   2c36e:	3301      	adds	r3, #1
   2c370:	687a      	ldr	r2, [r7, #4]
   2c372:	b292      	uxth	r2, r2
   2c374:	0a12      	lsrs	r2, r2, #8
   2c376:	b292      	uxth	r2, r2
   2c378:	b2d2      	uxtb	r2, r2
   2c37a:	701a      	strb	r2, [r3, #0]
   2c37c:	697b      	ldr	r3, [r7, #20]
   2c37e:	3302      	adds	r3, #2
   2c380:	687a      	ldr	r2, [r7, #4]
   2c382:	0c12      	lsrs	r2, r2, #16
   2c384:	b2d2      	uxtb	r2, r2
   2c386:	701a      	strb	r2, [r3, #0]
   2c388:	697b      	ldr	r3, [r7, #20]
   2c38a:	3303      	adds	r3, #3
   2c38c:	687a      	ldr	r2, [r7, #4]
   2c38e:	0e12      	lsrs	r2, r2, #24
   2c390:	b2d2      	uxtb	r2, r2
   2c392:	701a      	strb	r2, [r3, #0]
			break;
   2c394:	e00b      	b.n	2c3ae <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2c396:	231f      	movs	r3, #31
   2c398:	18fb      	adds	r3, r7, r3
   2c39a:	2202      	movs	r2, #2
   2c39c:	701a      	strb	r2, [r3, #0]
   2c39e:	e006      	b.n	2c3ae <put_fat+0x222>
			if (res != FR_OK) break;
   2c3a0:	46c0      	nop			; (mov r8, r8)
   2c3a2:	e004      	b.n	2c3ae <put_fat+0x222>
			if (res != FR_OK) break;
   2c3a4:	46c0      	nop			; (mov r8, r8)
   2c3a6:	e002      	b.n	2c3ae <put_fat+0x222>
			if (res != FR_OK) break;
   2c3a8:	46c0      	nop			; (mov r8, r8)
   2c3aa:	e000      	b.n	2c3ae <put_fat+0x222>
			if (res != FR_OK) break;
   2c3ac:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2c3ae:	68fb      	ldr	r3, [r7, #12]
   2c3b0:	2201      	movs	r2, #1
   2c3b2:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2c3b4:	231f      	movs	r3, #31
   2c3b6:	18fb      	adds	r3, r7, r3
   2c3b8:	781b      	ldrb	r3, [r3, #0]
}
   2c3ba:	0018      	movs	r0, r3
   2c3bc:	46bd      	mov	sp, r7
   2c3be:	b009      	add	sp, #36	; 0x24
   2c3c0:	bd90      	pop	{r4, r7, pc}
   2c3c2:	46c0      	nop			; (mov r8, r8)
   2c3c4:	0002bd89 	.word	0x0002bd89

0002c3c8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2c3c8:	b590      	push	{r4, r7, lr}
   2c3ca:	b085      	sub	sp, #20
   2c3cc:	af00      	add	r7, sp, #0
   2c3ce:	6078      	str	r0, [r7, #4]
   2c3d0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2c3d2:	683b      	ldr	r3, [r7, #0]
   2c3d4:	2b01      	cmp	r3, #1
   2c3d6:	d904      	bls.n	2c3e2 <remove_chain+0x1a>
   2c3d8:	687b      	ldr	r3, [r7, #4]
   2c3da:	699a      	ldr	r2, [r3, #24]
   2c3dc:	683b      	ldr	r3, [r7, #0]
   2c3de:	429a      	cmp	r2, r3
   2c3e0:	d804      	bhi.n	2c3ec <remove_chain+0x24>
		res = FR_INT_ERR;
   2c3e2:	230f      	movs	r3, #15
   2c3e4:	18fb      	adds	r3, r7, r3
   2c3e6:	2202      	movs	r2, #2
   2c3e8:	701a      	strb	r2, [r3, #0]
   2c3ea:	e045      	b.n	2c478 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2c3ec:	230f      	movs	r3, #15
   2c3ee:	18fb      	adds	r3, r7, r3
   2c3f0:	2200      	movs	r2, #0
   2c3f2:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2c3f4:	e037      	b.n	2c466 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2c3f6:	683a      	ldr	r2, [r7, #0]
   2c3f8:	687b      	ldr	r3, [r7, #4]
   2c3fa:	0011      	movs	r1, r2
   2c3fc:	0018      	movs	r0, r3
   2c3fe:	4b22      	ldr	r3, [pc, #136]	; (2c488 <remove_chain+0xc0>)
   2c400:	4798      	blx	r3
   2c402:	0003      	movs	r3, r0
   2c404:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2c406:	68bb      	ldr	r3, [r7, #8]
   2c408:	2b00      	cmp	r3, #0
   2c40a:	d032      	beq.n	2c472 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2c40c:	68bb      	ldr	r3, [r7, #8]
   2c40e:	2b01      	cmp	r3, #1
   2c410:	d104      	bne.n	2c41c <remove_chain+0x54>
   2c412:	230f      	movs	r3, #15
   2c414:	18fb      	adds	r3, r7, r3
   2c416:	2202      	movs	r2, #2
   2c418:	701a      	strb	r2, [r3, #0]
   2c41a:	e02d      	b.n	2c478 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2c41c:	68bb      	ldr	r3, [r7, #8]
   2c41e:	3301      	adds	r3, #1
   2c420:	d104      	bne.n	2c42c <remove_chain+0x64>
   2c422:	230f      	movs	r3, #15
   2c424:	18fb      	adds	r3, r7, r3
   2c426:	2201      	movs	r2, #1
   2c428:	701a      	strb	r2, [r3, #0]
   2c42a:	e025      	b.n	2c478 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2c42c:	230f      	movs	r3, #15
   2c42e:	18fc      	adds	r4, r7, r3
   2c430:	6839      	ldr	r1, [r7, #0]
   2c432:	687b      	ldr	r3, [r7, #4]
   2c434:	2200      	movs	r2, #0
   2c436:	0018      	movs	r0, r3
   2c438:	4b14      	ldr	r3, [pc, #80]	; (2c48c <remove_chain+0xc4>)
   2c43a:	4798      	blx	r3
   2c43c:	0003      	movs	r3, r0
   2c43e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c440:	230f      	movs	r3, #15
   2c442:	18fb      	adds	r3, r7, r3
   2c444:	781b      	ldrb	r3, [r3, #0]
   2c446:	2b00      	cmp	r3, #0
   2c448:	d115      	bne.n	2c476 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2c44a:	687b      	ldr	r3, [r7, #4]
   2c44c:	691b      	ldr	r3, [r3, #16]
   2c44e:	3301      	adds	r3, #1
   2c450:	d007      	beq.n	2c462 <remove_chain+0x9a>
				fs->free_clust++;
   2c452:	687b      	ldr	r3, [r7, #4]
   2c454:	691b      	ldr	r3, [r3, #16]
   2c456:	1c5a      	adds	r2, r3, #1
   2c458:	687b      	ldr	r3, [r7, #4]
   2c45a:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2c45c:	687b      	ldr	r3, [r7, #4]
   2c45e:	2201      	movs	r2, #1
   2c460:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2c462:	68bb      	ldr	r3, [r7, #8]
   2c464:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2c466:	687b      	ldr	r3, [r7, #4]
   2c468:	699a      	ldr	r2, [r3, #24]
   2c46a:	683b      	ldr	r3, [r7, #0]
   2c46c:	429a      	cmp	r2, r3
   2c46e:	d8c2      	bhi.n	2c3f6 <remove_chain+0x2e>
   2c470:	e002      	b.n	2c478 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2c472:	46c0      	nop			; (mov r8, r8)
   2c474:	e000      	b.n	2c478 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2c476:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2c478:	230f      	movs	r3, #15
   2c47a:	18fb      	adds	r3, r7, r3
   2c47c:	781b      	ldrb	r3, [r3, #0]
}
   2c47e:	0018      	movs	r0, r3
   2c480:	46bd      	mov	sp, r7
   2c482:	b005      	add	sp, #20
   2c484:	bd90      	pop	{r4, r7, pc}
   2c486:	46c0      	nop			; (mov r8, r8)
   2c488:	0002c021 	.word	0x0002c021
   2c48c:	0002c18d 	.word	0x0002c18d

0002c490 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2c490:	b590      	push	{r4, r7, lr}
   2c492:	b087      	sub	sp, #28
   2c494:	af00      	add	r7, sp, #0
   2c496:	6078      	str	r0, [r7, #4]
   2c498:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2c49a:	683b      	ldr	r3, [r7, #0]
   2c49c:	2b00      	cmp	r3, #0
   2c49e:	d10d      	bne.n	2c4bc <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2c4a0:	687b      	ldr	r3, [r7, #4]
   2c4a2:	68db      	ldr	r3, [r3, #12]
   2c4a4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2c4a6:	693b      	ldr	r3, [r7, #16]
   2c4a8:	2b00      	cmp	r3, #0
   2c4aa:	d004      	beq.n	2c4b6 <create_chain+0x26>
   2c4ac:	687b      	ldr	r3, [r7, #4]
   2c4ae:	699a      	ldr	r2, [r3, #24]
   2c4b0:	693b      	ldr	r3, [r7, #16]
   2c4b2:	429a      	cmp	r2, r3
   2c4b4:	d818      	bhi.n	2c4e8 <create_chain+0x58>
   2c4b6:	2301      	movs	r3, #1
   2c4b8:	613b      	str	r3, [r7, #16]
   2c4ba:	e015      	b.n	2c4e8 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2c4bc:	683a      	ldr	r2, [r7, #0]
   2c4be:	687b      	ldr	r3, [r7, #4]
   2c4c0:	0011      	movs	r1, r2
   2c4c2:	0018      	movs	r0, r3
   2c4c4:	4b3e      	ldr	r3, [pc, #248]	; (2c5c0 <create_chain+0x130>)
   2c4c6:	4798      	blx	r3
   2c4c8:	0003      	movs	r3, r0
   2c4ca:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2c4cc:	68bb      	ldr	r3, [r7, #8]
   2c4ce:	2b01      	cmp	r3, #1
   2c4d0:	d801      	bhi.n	2c4d6 <create_chain+0x46>
   2c4d2:	2301      	movs	r3, #1
   2c4d4:	e070      	b.n	2c5b8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2c4d6:	687b      	ldr	r3, [r7, #4]
   2c4d8:	699a      	ldr	r2, [r3, #24]
   2c4da:	68bb      	ldr	r3, [r7, #8]
   2c4dc:	429a      	cmp	r2, r3
   2c4de:	d901      	bls.n	2c4e4 <create_chain+0x54>
   2c4e0:	68bb      	ldr	r3, [r7, #8]
   2c4e2:	e069      	b.n	2c5b8 <create_chain+0x128>
		scl = clst;
   2c4e4:	683b      	ldr	r3, [r7, #0]
   2c4e6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2c4e8:	693b      	ldr	r3, [r7, #16]
   2c4ea:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2c4ec:	697b      	ldr	r3, [r7, #20]
   2c4ee:	3301      	adds	r3, #1
   2c4f0:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2c4f2:	687b      	ldr	r3, [r7, #4]
   2c4f4:	699a      	ldr	r2, [r3, #24]
   2c4f6:	697b      	ldr	r3, [r7, #20]
   2c4f8:	429a      	cmp	r2, r3
   2c4fa:	d807      	bhi.n	2c50c <create_chain+0x7c>
			ncl = 2;
   2c4fc:	2302      	movs	r3, #2
   2c4fe:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2c500:	697a      	ldr	r2, [r7, #20]
   2c502:	693b      	ldr	r3, [r7, #16]
   2c504:	429a      	cmp	r2, r3
   2c506:	d901      	bls.n	2c50c <create_chain+0x7c>
   2c508:	2300      	movs	r3, #0
   2c50a:	e055      	b.n	2c5b8 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2c50c:	697a      	ldr	r2, [r7, #20]
   2c50e:	687b      	ldr	r3, [r7, #4]
   2c510:	0011      	movs	r1, r2
   2c512:	0018      	movs	r0, r3
   2c514:	4b2a      	ldr	r3, [pc, #168]	; (2c5c0 <create_chain+0x130>)
   2c516:	4798      	blx	r3
   2c518:	0003      	movs	r3, r0
   2c51a:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2c51c:	68bb      	ldr	r3, [r7, #8]
   2c51e:	2b00      	cmp	r3, #0
   2c520:	d00d      	beq.n	2c53e <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2c522:	68bb      	ldr	r3, [r7, #8]
   2c524:	3301      	adds	r3, #1
   2c526:	d002      	beq.n	2c52e <create_chain+0x9e>
   2c528:	68bb      	ldr	r3, [r7, #8]
   2c52a:	2b01      	cmp	r3, #1
   2c52c:	d101      	bne.n	2c532 <create_chain+0xa2>
			return cs;
   2c52e:	68bb      	ldr	r3, [r7, #8]
   2c530:	e042      	b.n	2c5b8 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2c532:	697a      	ldr	r2, [r7, #20]
   2c534:	693b      	ldr	r3, [r7, #16]
   2c536:	429a      	cmp	r2, r3
   2c538:	d1d8      	bne.n	2c4ec <create_chain+0x5c>
   2c53a:	2300      	movs	r3, #0
   2c53c:	e03c      	b.n	2c5b8 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2c53e:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2c540:	230f      	movs	r3, #15
   2c542:	18fc      	adds	r4, r7, r3
   2c544:	4a1f      	ldr	r2, [pc, #124]	; (2c5c4 <create_chain+0x134>)
   2c546:	6979      	ldr	r1, [r7, #20]
   2c548:	687b      	ldr	r3, [r7, #4]
   2c54a:	0018      	movs	r0, r3
   2c54c:	4b1e      	ldr	r3, [pc, #120]	; (2c5c8 <create_chain+0x138>)
   2c54e:	4798      	blx	r3
   2c550:	0003      	movs	r3, r0
   2c552:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2c554:	230f      	movs	r3, #15
   2c556:	18fb      	adds	r3, r7, r3
   2c558:	781b      	ldrb	r3, [r3, #0]
   2c55a:	2b00      	cmp	r3, #0
   2c55c:	d10c      	bne.n	2c578 <create_chain+0xe8>
   2c55e:	683b      	ldr	r3, [r7, #0]
   2c560:	2b00      	cmp	r3, #0
   2c562:	d009      	beq.n	2c578 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2c564:	230f      	movs	r3, #15
   2c566:	18fc      	adds	r4, r7, r3
   2c568:	697a      	ldr	r2, [r7, #20]
   2c56a:	6839      	ldr	r1, [r7, #0]
   2c56c:	687b      	ldr	r3, [r7, #4]
   2c56e:	0018      	movs	r0, r3
   2c570:	4b15      	ldr	r3, [pc, #84]	; (2c5c8 <create_chain+0x138>)
   2c572:	4798      	blx	r3
   2c574:	0003      	movs	r3, r0
   2c576:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2c578:	230f      	movs	r3, #15
   2c57a:	18fb      	adds	r3, r7, r3
   2c57c:	781b      	ldrb	r3, [r3, #0]
   2c57e:	2b00      	cmp	r3, #0
   2c580:	d10f      	bne.n	2c5a2 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2c582:	687b      	ldr	r3, [r7, #4]
   2c584:	697a      	ldr	r2, [r7, #20]
   2c586:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2c588:	687b      	ldr	r3, [r7, #4]
   2c58a:	691b      	ldr	r3, [r3, #16]
   2c58c:	3301      	adds	r3, #1
   2c58e:	d012      	beq.n	2c5b6 <create_chain+0x126>
			fs->free_clust--;
   2c590:	687b      	ldr	r3, [r7, #4]
   2c592:	691b      	ldr	r3, [r3, #16]
   2c594:	1e5a      	subs	r2, r3, #1
   2c596:	687b      	ldr	r3, [r7, #4]
   2c598:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2c59a:	687b      	ldr	r3, [r7, #4]
   2c59c:	2201      	movs	r2, #1
   2c59e:	715a      	strb	r2, [r3, #5]
   2c5a0:	e009      	b.n	2c5b6 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2c5a2:	230f      	movs	r3, #15
   2c5a4:	18fb      	adds	r3, r7, r3
   2c5a6:	781b      	ldrb	r3, [r3, #0]
   2c5a8:	2b01      	cmp	r3, #1
   2c5aa:	d102      	bne.n	2c5b2 <create_chain+0x122>
   2c5ac:	2301      	movs	r3, #1
   2c5ae:	425b      	negs	r3, r3
   2c5b0:	e000      	b.n	2c5b4 <create_chain+0x124>
   2c5b2:	2301      	movs	r3, #1
   2c5b4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2c5b6:	697b      	ldr	r3, [r7, #20]
}
   2c5b8:	0018      	movs	r0, r3
   2c5ba:	46bd      	mov	sp, r7
   2c5bc:	b007      	add	sp, #28
   2c5be:	bd90      	pop	{r4, r7, pc}
   2c5c0:	0002c021 	.word	0x0002c021
   2c5c4:	0fffffff 	.word	0x0fffffff
   2c5c8:	0002c18d 	.word	0x0002c18d

0002c5cc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2c5cc:	b580      	push	{r7, lr}
   2c5ce:	b084      	sub	sp, #16
   2c5d0:	af00      	add	r7, sp, #0
   2c5d2:	6078      	str	r0, [r7, #4]
   2c5d4:	000a      	movs	r2, r1
   2c5d6:	1cbb      	adds	r3, r7, #2
   2c5d8:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2c5da:	687b      	ldr	r3, [r7, #4]
   2c5dc:	1cba      	adds	r2, r7, #2
   2c5de:	8812      	ldrh	r2, [r2, #0]
   2c5e0:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2c5e2:	687b      	ldr	r3, [r7, #4]
   2c5e4:	689b      	ldr	r3, [r3, #8]
   2c5e6:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2c5e8:	68fb      	ldr	r3, [r7, #12]
   2c5ea:	2b01      	cmp	r3, #1
   2c5ec:	d005      	beq.n	2c5fa <dir_sdi+0x2e>
   2c5ee:	687b      	ldr	r3, [r7, #4]
   2c5f0:	681b      	ldr	r3, [r3, #0]
   2c5f2:	699a      	ldr	r2, [r3, #24]
   2c5f4:	68fb      	ldr	r3, [r7, #12]
   2c5f6:	429a      	cmp	r2, r3
   2c5f8:	d801      	bhi.n	2c5fe <dir_sdi+0x32>
		return FR_INT_ERR;
   2c5fa:	2302      	movs	r3, #2
   2c5fc:	e075      	b.n	2c6ea <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2c5fe:	68fb      	ldr	r3, [r7, #12]
   2c600:	2b00      	cmp	r3, #0
   2c602:	d108      	bne.n	2c616 <dir_sdi+0x4a>
   2c604:	687b      	ldr	r3, [r7, #4]
   2c606:	681b      	ldr	r3, [r3, #0]
   2c608:	781b      	ldrb	r3, [r3, #0]
   2c60a:	2b03      	cmp	r3, #3
   2c60c:	d103      	bne.n	2c616 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2c60e:	687b      	ldr	r3, [r7, #4]
   2c610:	681b      	ldr	r3, [r3, #0]
   2c612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c614:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2c616:	68fb      	ldr	r3, [r7, #12]
   2c618:	2b00      	cmp	r3, #0
   2c61a:	d116      	bne.n	2c64a <dir_sdi+0x7e>
		dj->clust = clst;
   2c61c:	687b      	ldr	r3, [r7, #4]
   2c61e:	68fa      	ldr	r2, [r7, #12]
   2c620:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2c622:	687b      	ldr	r3, [r7, #4]
   2c624:	681b      	ldr	r3, [r3, #0]
   2c626:	891b      	ldrh	r3, [r3, #8]
   2c628:	1cba      	adds	r2, r7, #2
   2c62a:	8812      	ldrh	r2, [r2, #0]
   2c62c:	429a      	cmp	r2, r3
   2c62e:	d301      	bcc.n	2c634 <dir_sdi+0x68>
			return FR_INT_ERR;
   2c630:	2302      	movs	r3, #2
   2c632:	e05a      	b.n	2c6ea <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2c634:	687b      	ldr	r3, [r7, #4]
   2c636:	681b      	ldr	r3, [r3, #0]
   2c638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c63a:	1cba      	adds	r2, r7, #2
   2c63c:	8812      	ldrh	r2, [r2, #0]
   2c63e:	0912      	lsrs	r2, r2, #4
   2c640:	b292      	uxth	r2, r2
   2c642:	189a      	adds	r2, r3, r2
   2c644:	687b      	ldr	r3, [r7, #4]
   2c646:	611a      	str	r2, [r3, #16]
   2c648:	e042      	b.n	2c6d0 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2c64a:	687b      	ldr	r3, [r7, #4]
   2c64c:	681b      	ldr	r3, [r3, #0]
   2c64e:	789b      	ldrb	r3, [r3, #2]
   2c650:	b29a      	uxth	r2, r3
   2c652:	230a      	movs	r3, #10
   2c654:	18fb      	adds	r3, r7, r3
   2c656:	0112      	lsls	r2, r2, #4
   2c658:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2c65a:	e020      	b.n	2c69e <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2c65c:	687b      	ldr	r3, [r7, #4]
   2c65e:	681b      	ldr	r3, [r3, #0]
   2c660:	68fa      	ldr	r2, [r7, #12]
   2c662:	0011      	movs	r1, r2
   2c664:	0018      	movs	r0, r3
   2c666:	4b23      	ldr	r3, [pc, #140]	; (2c6f4 <dir_sdi+0x128>)
   2c668:	4798      	blx	r3
   2c66a:	0003      	movs	r3, r0
   2c66c:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2c66e:	68fb      	ldr	r3, [r7, #12]
   2c670:	3301      	adds	r3, #1
   2c672:	d101      	bne.n	2c678 <dir_sdi+0xac>
   2c674:	2301      	movs	r3, #1
   2c676:	e038      	b.n	2c6ea <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2c678:	68fb      	ldr	r3, [r7, #12]
   2c67a:	2b01      	cmp	r3, #1
   2c67c:	d905      	bls.n	2c68a <dir_sdi+0xbe>
   2c67e:	687b      	ldr	r3, [r7, #4]
   2c680:	681b      	ldr	r3, [r3, #0]
   2c682:	699a      	ldr	r2, [r3, #24]
   2c684:	68fb      	ldr	r3, [r7, #12]
   2c686:	429a      	cmp	r2, r3
   2c688:	d801      	bhi.n	2c68e <dir_sdi+0xc2>
				return FR_INT_ERR;
   2c68a:	2302      	movs	r3, #2
   2c68c:	e02d      	b.n	2c6ea <dir_sdi+0x11e>
			idx -= ic;
   2c68e:	1cbb      	adds	r3, r7, #2
   2c690:	1cb9      	adds	r1, r7, #2
   2c692:	220a      	movs	r2, #10
   2c694:	18ba      	adds	r2, r7, r2
   2c696:	8809      	ldrh	r1, [r1, #0]
   2c698:	8812      	ldrh	r2, [r2, #0]
   2c69a:	1a8a      	subs	r2, r1, r2
   2c69c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2c69e:	1cba      	adds	r2, r7, #2
   2c6a0:	230a      	movs	r3, #10
   2c6a2:	18fb      	adds	r3, r7, r3
   2c6a4:	8812      	ldrh	r2, [r2, #0]
   2c6a6:	881b      	ldrh	r3, [r3, #0]
   2c6a8:	429a      	cmp	r2, r3
   2c6aa:	d2d7      	bcs.n	2c65c <dir_sdi+0x90>
		}
		dj->clust = clst;
   2c6ac:	687b      	ldr	r3, [r7, #4]
   2c6ae:	68fa      	ldr	r2, [r7, #12]
   2c6b0:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2c6b2:	687b      	ldr	r3, [r7, #4]
   2c6b4:	681b      	ldr	r3, [r3, #0]
   2c6b6:	68fa      	ldr	r2, [r7, #12]
   2c6b8:	0011      	movs	r1, r2
   2c6ba:	0018      	movs	r0, r3
   2c6bc:	4b0e      	ldr	r3, [pc, #56]	; (2c6f8 <dir_sdi+0x12c>)
   2c6be:	4798      	blx	r3
   2c6c0:	0002      	movs	r2, r0
   2c6c2:	1cbb      	adds	r3, r7, #2
   2c6c4:	881b      	ldrh	r3, [r3, #0]
   2c6c6:	091b      	lsrs	r3, r3, #4
   2c6c8:	b29b      	uxth	r3, r3
   2c6ca:	18d2      	adds	r2, r2, r3
   2c6cc:	687b      	ldr	r3, [r7, #4]
   2c6ce:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2c6d0:	687b      	ldr	r3, [r7, #4]
   2c6d2:	681b      	ldr	r3, [r3, #0]
   2c6d4:	3330      	adds	r3, #48	; 0x30
   2c6d6:	001a      	movs	r2, r3
   2c6d8:	1cbb      	adds	r3, r7, #2
   2c6da:	881b      	ldrh	r3, [r3, #0]
   2c6dc:	210f      	movs	r1, #15
   2c6de:	400b      	ands	r3, r1
   2c6e0:	015b      	lsls	r3, r3, #5
   2c6e2:	18d2      	adds	r2, r2, r3
   2c6e4:	687b      	ldr	r3, [r7, #4]
   2c6e6:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2c6e8:	2300      	movs	r3, #0
}
   2c6ea:	0018      	movs	r0, r3
   2c6ec:	46bd      	mov	sp, r7
   2c6ee:	b004      	add	sp, #16
   2c6f0:	bd80      	pop	{r7, pc}
   2c6f2:	46c0      	nop			; (mov r8, r8)
   2c6f4:	0002c021 	.word	0x0002c021
   2c6f8:	0002bfe9 	.word	0x0002bfe9

0002c6fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2c6fc:	b590      	push	{r4, r7, lr}
   2c6fe:	b085      	sub	sp, #20
   2c700:	af00      	add	r7, sp, #0
   2c702:	6078      	str	r0, [r7, #4]
   2c704:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2c706:	687b      	ldr	r3, [r7, #4]
   2c708:	88da      	ldrh	r2, [r3, #6]
   2c70a:	2308      	movs	r3, #8
   2c70c:	18fb      	adds	r3, r7, r3
   2c70e:	3201      	adds	r2, #1
   2c710:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2c712:	2308      	movs	r3, #8
   2c714:	18fb      	adds	r3, r7, r3
   2c716:	881b      	ldrh	r3, [r3, #0]
   2c718:	2b00      	cmp	r3, #0
   2c71a:	d003      	beq.n	2c724 <dir_next+0x28>
   2c71c:	687b      	ldr	r3, [r7, #4]
   2c71e:	691b      	ldr	r3, [r3, #16]
   2c720:	2b00      	cmp	r3, #0
   2c722:	d101      	bne.n	2c728 <dir_next+0x2c>
		return FR_NO_FILE;
   2c724:	2304      	movs	r3, #4
   2c726:	e0d2      	b.n	2c8ce <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2c728:	2308      	movs	r3, #8
   2c72a:	18fb      	adds	r3, r7, r3
   2c72c:	881b      	ldrh	r3, [r3, #0]
   2c72e:	220f      	movs	r2, #15
   2c730:	4013      	ands	r3, r2
   2c732:	b29b      	uxth	r3, r3
   2c734:	2b00      	cmp	r3, #0
   2c736:	d000      	beq.n	2c73a <dir_next+0x3e>
   2c738:	e0b6      	b.n	2c8a8 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2c73a:	687b      	ldr	r3, [r7, #4]
   2c73c:	691b      	ldr	r3, [r3, #16]
   2c73e:	1c5a      	adds	r2, r3, #1
   2c740:	687b      	ldr	r3, [r7, #4]
   2c742:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2c744:	687b      	ldr	r3, [r7, #4]
   2c746:	68db      	ldr	r3, [r3, #12]
   2c748:	2b00      	cmp	r3, #0
   2c74a:	d10a      	bne.n	2c762 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2c74c:	687b      	ldr	r3, [r7, #4]
   2c74e:	681b      	ldr	r3, [r3, #0]
   2c750:	891b      	ldrh	r3, [r3, #8]
   2c752:	2208      	movs	r2, #8
   2c754:	18ba      	adds	r2, r7, r2
   2c756:	8812      	ldrh	r2, [r2, #0]
   2c758:	429a      	cmp	r2, r3
   2c75a:	d200      	bcs.n	2c75e <dir_next+0x62>
   2c75c:	e0a4      	b.n	2c8a8 <dir_next+0x1ac>
				return FR_NO_FILE;
   2c75e:	2304      	movs	r3, #4
   2c760:	e0b5      	b.n	2c8ce <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2c762:	2308      	movs	r3, #8
   2c764:	18fb      	adds	r3, r7, r3
   2c766:	881b      	ldrh	r3, [r3, #0]
   2c768:	091b      	lsrs	r3, r3, #4
   2c76a:	b29b      	uxth	r3, r3
   2c76c:	001a      	movs	r2, r3
   2c76e:	687b      	ldr	r3, [r7, #4]
   2c770:	681b      	ldr	r3, [r3, #0]
   2c772:	789b      	ldrb	r3, [r3, #2]
   2c774:	3b01      	subs	r3, #1
   2c776:	4013      	ands	r3, r2
   2c778:	d000      	beq.n	2c77c <dir_next+0x80>
   2c77a:	e095      	b.n	2c8a8 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2c77c:	687b      	ldr	r3, [r7, #4]
   2c77e:	681a      	ldr	r2, [r3, #0]
   2c780:	687b      	ldr	r3, [r7, #4]
   2c782:	68db      	ldr	r3, [r3, #12]
   2c784:	0019      	movs	r1, r3
   2c786:	0010      	movs	r0, r2
   2c788:	4b53      	ldr	r3, [pc, #332]	; (2c8d8 <dir_next+0x1dc>)
   2c78a:	4798      	blx	r3
   2c78c:	0003      	movs	r3, r0
   2c78e:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2c790:	68fb      	ldr	r3, [r7, #12]
   2c792:	2b01      	cmp	r3, #1
   2c794:	d801      	bhi.n	2c79a <dir_next+0x9e>
   2c796:	2302      	movs	r3, #2
   2c798:	e099      	b.n	2c8ce <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2c79a:	68fb      	ldr	r3, [r7, #12]
   2c79c:	3301      	adds	r3, #1
   2c79e:	d101      	bne.n	2c7a4 <dir_next+0xa8>
   2c7a0:	2301      	movs	r3, #1
   2c7a2:	e094      	b.n	2c8ce <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2c7a4:	687b      	ldr	r3, [r7, #4]
   2c7a6:	681b      	ldr	r3, [r3, #0]
   2c7a8:	699a      	ldr	r2, [r3, #24]
   2c7aa:	68fb      	ldr	r3, [r7, #12]
   2c7ac:	429a      	cmp	r2, r3
   2c7ae:	d900      	bls.n	2c7b2 <dir_next+0xb6>
   2c7b0:	e06d      	b.n	2c88e <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2c7b2:	683b      	ldr	r3, [r7, #0]
   2c7b4:	2b00      	cmp	r3, #0
   2c7b6:	d101      	bne.n	2c7bc <dir_next+0xc0>
   2c7b8:	2304      	movs	r3, #4
   2c7ba:	e088      	b.n	2c8ce <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2c7bc:	687b      	ldr	r3, [r7, #4]
   2c7be:	681a      	ldr	r2, [r3, #0]
   2c7c0:	687b      	ldr	r3, [r7, #4]
   2c7c2:	68db      	ldr	r3, [r3, #12]
   2c7c4:	0019      	movs	r1, r3
   2c7c6:	0010      	movs	r0, r2
   2c7c8:	4b44      	ldr	r3, [pc, #272]	; (2c8dc <dir_next+0x1e0>)
   2c7ca:	4798      	blx	r3
   2c7cc:	0003      	movs	r3, r0
   2c7ce:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2c7d0:	68fb      	ldr	r3, [r7, #12]
   2c7d2:	2b00      	cmp	r3, #0
   2c7d4:	d101      	bne.n	2c7da <dir_next+0xde>
   2c7d6:	2307      	movs	r3, #7
   2c7d8:	e079      	b.n	2c8ce <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2c7da:	68fb      	ldr	r3, [r7, #12]
   2c7dc:	2b01      	cmp	r3, #1
   2c7de:	d101      	bne.n	2c7e4 <dir_next+0xe8>
   2c7e0:	2302      	movs	r3, #2
   2c7e2:	e074      	b.n	2c8ce <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2c7e4:	68fb      	ldr	r3, [r7, #12]
   2c7e6:	3301      	adds	r3, #1
   2c7e8:	d101      	bne.n	2c7ee <dir_next+0xf2>
   2c7ea:	2301      	movs	r3, #1
   2c7ec:	e06f      	b.n	2c8ce <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2c7ee:	687b      	ldr	r3, [r7, #4]
   2c7f0:	681b      	ldr	r3, [r3, #0]
   2c7f2:	2100      	movs	r1, #0
   2c7f4:	0018      	movs	r0, r3
   2c7f6:	4b3a      	ldr	r3, [pc, #232]	; (2c8e0 <dir_next+0x1e4>)
   2c7f8:	4798      	blx	r3
   2c7fa:	1e03      	subs	r3, r0, #0
   2c7fc:	d001      	beq.n	2c802 <dir_next+0x106>
   2c7fe:	2301      	movs	r3, #1
   2c800:	e065      	b.n	2c8ce <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2c802:	687b      	ldr	r3, [r7, #4]
   2c804:	681b      	ldr	r3, [r3, #0]
   2c806:	3330      	adds	r3, #48	; 0x30
   2c808:	0018      	movs	r0, r3
   2c80a:	2380      	movs	r3, #128	; 0x80
   2c80c:	009b      	lsls	r3, r3, #2
   2c80e:	001a      	movs	r2, r3
   2c810:	2100      	movs	r1, #0
   2c812:	4b34      	ldr	r3, [pc, #208]	; (2c8e4 <dir_next+0x1e8>)
   2c814:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2c816:	687b      	ldr	r3, [r7, #4]
   2c818:	681c      	ldr	r4, [r3, #0]
   2c81a:	687b      	ldr	r3, [r7, #4]
   2c81c:	681b      	ldr	r3, [r3, #0]
   2c81e:	68fa      	ldr	r2, [r7, #12]
   2c820:	0011      	movs	r1, r2
   2c822:	0018      	movs	r0, r3
   2c824:	4b30      	ldr	r3, [pc, #192]	; (2c8e8 <dir_next+0x1ec>)
   2c826:	4798      	blx	r3
   2c828:	0003      	movs	r3, r0
   2c82a:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2c82c:	230b      	movs	r3, #11
   2c82e:	18fb      	adds	r3, r7, r3
   2c830:	2200      	movs	r2, #0
   2c832:	701a      	strb	r2, [r3, #0]
   2c834:	e019      	b.n	2c86a <dir_next+0x16e>
						dj->fs->wflag = 1;
   2c836:	687b      	ldr	r3, [r7, #4]
   2c838:	681b      	ldr	r3, [r3, #0]
   2c83a:	2201      	movs	r2, #1
   2c83c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2c83e:	687b      	ldr	r3, [r7, #4]
   2c840:	681b      	ldr	r3, [r3, #0]
   2c842:	2100      	movs	r1, #0
   2c844:	0018      	movs	r0, r3
   2c846:	4b26      	ldr	r3, [pc, #152]	; (2c8e0 <dir_next+0x1e4>)
   2c848:	4798      	blx	r3
   2c84a:	1e03      	subs	r3, r0, #0
   2c84c:	d001      	beq.n	2c852 <dir_next+0x156>
   2c84e:	2301      	movs	r3, #1
   2c850:	e03d      	b.n	2c8ce <dir_next+0x1d2>
						dj->fs->winsect++;
   2c852:	687b      	ldr	r3, [r7, #4]
   2c854:	681b      	ldr	r3, [r3, #0]
   2c856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c858:	3201      	adds	r2, #1
   2c85a:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2c85c:	230b      	movs	r3, #11
   2c85e:	18fb      	adds	r3, r7, r3
   2c860:	781a      	ldrb	r2, [r3, #0]
   2c862:	230b      	movs	r3, #11
   2c864:	18fb      	adds	r3, r7, r3
   2c866:	3201      	adds	r2, #1
   2c868:	701a      	strb	r2, [r3, #0]
   2c86a:	687b      	ldr	r3, [r7, #4]
   2c86c:	681b      	ldr	r3, [r3, #0]
   2c86e:	789b      	ldrb	r3, [r3, #2]
   2c870:	220b      	movs	r2, #11
   2c872:	18ba      	adds	r2, r7, r2
   2c874:	7812      	ldrb	r2, [r2, #0]
   2c876:	429a      	cmp	r2, r3
   2c878:	d3dd      	bcc.n	2c836 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2c87a:	687b      	ldr	r3, [r7, #4]
   2c87c:	681b      	ldr	r3, [r3, #0]
   2c87e:	687a      	ldr	r2, [r7, #4]
   2c880:	6812      	ldr	r2, [r2, #0]
   2c882:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2c884:	220b      	movs	r2, #11
   2c886:	18ba      	adds	r2, r7, r2
   2c888:	7812      	ldrb	r2, [r2, #0]
   2c88a:	1a8a      	subs	r2, r1, r2
   2c88c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2c88e:	687b      	ldr	r3, [r7, #4]
   2c890:	68fa      	ldr	r2, [r7, #12]
   2c892:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2c894:	687b      	ldr	r3, [r7, #4]
   2c896:	681b      	ldr	r3, [r3, #0]
   2c898:	68fa      	ldr	r2, [r7, #12]
   2c89a:	0011      	movs	r1, r2
   2c89c:	0018      	movs	r0, r3
   2c89e:	4b12      	ldr	r3, [pc, #72]	; (2c8e8 <dir_next+0x1ec>)
   2c8a0:	4798      	blx	r3
   2c8a2:	0002      	movs	r2, r0
   2c8a4:	687b      	ldr	r3, [r7, #4]
   2c8a6:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2c8a8:	687b      	ldr	r3, [r7, #4]
   2c8aa:	2208      	movs	r2, #8
   2c8ac:	18ba      	adds	r2, r7, r2
   2c8ae:	8812      	ldrh	r2, [r2, #0]
   2c8b0:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2c8b2:	687b      	ldr	r3, [r7, #4]
   2c8b4:	681b      	ldr	r3, [r3, #0]
   2c8b6:	3330      	adds	r3, #48	; 0x30
   2c8b8:	001a      	movs	r2, r3
   2c8ba:	2308      	movs	r3, #8
   2c8bc:	18fb      	adds	r3, r7, r3
   2c8be:	881b      	ldrh	r3, [r3, #0]
   2c8c0:	210f      	movs	r1, #15
   2c8c2:	400b      	ands	r3, r1
   2c8c4:	015b      	lsls	r3, r3, #5
   2c8c6:	18d2      	adds	r2, r2, r3
   2c8c8:	687b      	ldr	r3, [r7, #4]
   2c8ca:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2c8cc:	2300      	movs	r3, #0
}
   2c8ce:	0018      	movs	r0, r3
   2c8d0:	46bd      	mov	sp, r7
   2c8d2:	b005      	add	sp, #20
   2c8d4:	bd90      	pop	{r4, r7, pc}
   2c8d6:	46c0      	nop			; (mov r8, r8)
   2c8d8:	0002c021 	.word	0x0002c021
   2c8dc:	0002c491 	.word	0x0002c491
   2c8e0:	0002bd89 	.word	0x0002bd89
   2c8e4:	0002bcdd 	.word	0x0002bcdd
   2c8e8:	0002bfe9 	.word	0x0002bfe9

0002c8ec <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2c8ec:	b590      	push	{r4, r7, lr}
   2c8ee:	b087      	sub	sp, #28
   2c8f0:	af00      	add	r7, sp, #0
   2c8f2:	6078      	str	r0, [r7, #4]
   2c8f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2c8f6:	683b      	ldr	r3, [r7, #0]
   2c8f8:	781b      	ldrb	r3, [r3, #0]
   2c8fa:	001a      	movs	r2, r3
   2c8fc:	2340      	movs	r3, #64	; 0x40
   2c8fe:	439a      	bics	r2, r3
   2c900:	0013      	movs	r3, r2
   2c902:	1e5a      	subs	r2, r3, #1
   2c904:	0013      	movs	r3, r2
   2c906:	005b      	lsls	r3, r3, #1
   2c908:	189b      	adds	r3, r3, r2
   2c90a:	009b      	lsls	r3, r3, #2
   2c90c:	189b      	adds	r3, r3, r2
   2c90e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2c910:	2300      	movs	r3, #0
   2c912:	613b      	str	r3, [r7, #16]
   2c914:	230e      	movs	r3, #14
   2c916:	18fb      	adds	r3, r7, r3
   2c918:	2201      	movs	r2, #1
   2c91a:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2c91c:	4a31      	ldr	r2, [pc, #196]	; (2c9e4 <cmp_lfn+0xf8>)
   2c91e:	693b      	ldr	r3, [r7, #16]
   2c920:	18d3      	adds	r3, r2, r3
   2c922:	781b      	ldrb	r3, [r3, #0]
   2c924:	3301      	adds	r3, #1
   2c926:	683a      	ldr	r2, [r7, #0]
   2c928:	18d3      	adds	r3, r2, r3
   2c92a:	781b      	ldrb	r3, [r3, #0]
   2c92c:	021b      	lsls	r3, r3, #8
   2c92e:	b21a      	sxth	r2, r3
   2c930:	492c      	ldr	r1, [pc, #176]	; (2c9e4 <cmp_lfn+0xf8>)
   2c932:	693b      	ldr	r3, [r7, #16]
   2c934:	18cb      	adds	r3, r1, r3
   2c936:	781b      	ldrb	r3, [r3, #0]
   2c938:	0019      	movs	r1, r3
   2c93a:	683b      	ldr	r3, [r7, #0]
   2c93c:	185b      	adds	r3, r3, r1
   2c93e:	781b      	ldrb	r3, [r3, #0]
   2c940:	b21b      	sxth	r3, r3
   2c942:	4313      	orrs	r3, r2
   2c944:	b21a      	sxth	r2, r3
   2c946:	230c      	movs	r3, #12
   2c948:	18fb      	adds	r3, r7, r3
   2c94a:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2c94c:	230e      	movs	r3, #14
   2c94e:	18fb      	adds	r3, r7, r3
   2c950:	881b      	ldrh	r3, [r3, #0]
   2c952:	2b00      	cmp	r3, #0
   2c954:	d01f      	beq.n	2c996 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2c956:	230e      	movs	r3, #14
   2c958:	18fc      	adds	r4, r7, r3
   2c95a:	230c      	movs	r3, #12
   2c95c:	18fb      	adds	r3, r7, r3
   2c95e:	881b      	ldrh	r3, [r3, #0]
   2c960:	0018      	movs	r0, r3
   2c962:	4b21      	ldr	r3, [pc, #132]	; (2c9e8 <cmp_lfn+0xfc>)
   2c964:	4798      	blx	r3
   2c966:	0003      	movs	r3, r0
   2c968:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2c96a:	697b      	ldr	r3, [r7, #20]
   2c96c:	2bfe      	cmp	r3, #254	; 0xfe
   2c96e:	d810      	bhi.n	2c992 <cmp_lfn+0xa6>
   2c970:	697b      	ldr	r3, [r7, #20]
   2c972:	1c5a      	adds	r2, r3, #1
   2c974:	617a      	str	r2, [r7, #20]
   2c976:	005b      	lsls	r3, r3, #1
   2c978:	687a      	ldr	r2, [r7, #4]
   2c97a:	18d3      	adds	r3, r2, r3
   2c97c:	881b      	ldrh	r3, [r3, #0]
   2c97e:	0018      	movs	r0, r3
   2c980:	4b19      	ldr	r3, [pc, #100]	; (2c9e8 <cmp_lfn+0xfc>)
   2c982:	4798      	blx	r3
   2c984:	0003      	movs	r3, r0
   2c986:	001a      	movs	r2, r3
   2c988:	230e      	movs	r3, #14
   2c98a:	18fb      	adds	r3, r7, r3
   2c98c:	881b      	ldrh	r3, [r3, #0]
   2c98e:	4293      	cmp	r3, r2
   2c990:	d009      	beq.n	2c9a6 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2c992:	2300      	movs	r3, #0
   2c994:	e022      	b.n	2c9dc <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2c996:	230c      	movs	r3, #12
   2c998:	18fb      	adds	r3, r7, r3
   2c99a:	881b      	ldrh	r3, [r3, #0]
   2c99c:	4a13      	ldr	r2, [pc, #76]	; (2c9ec <cmp_lfn+0x100>)
   2c99e:	4293      	cmp	r3, r2
   2c9a0:	d001      	beq.n	2c9a6 <cmp_lfn+0xba>
   2c9a2:	2300      	movs	r3, #0
   2c9a4:	e01a      	b.n	2c9dc <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2c9a6:	693b      	ldr	r3, [r7, #16]
   2c9a8:	3301      	adds	r3, #1
   2c9aa:	613b      	str	r3, [r7, #16]
   2c9ac:	693b      	ldr	r3, [r7, #16]
   2c9ae:	2b0c      	cmp	r3, #12
   2c9b0:	d9b4      	bls.n	2c91c <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2c9b2:	683b      	ldr	r3, [r7, #0]
   2c9b4:	781b      	ldrb	r3, [r3, #0]
   2c9b6:	001a      	movs	r2, r3
   2c9b8:	2340      	movs	r3, #64	; 0x40
   2c9ba:	4013      	ands	r3, r2
   2c9bc:	d00d      	beq.n	2c9da <cmp_lfn+0xee>
   2c9be:	230e      	movs	r3, #14
   2c9c0:	18fb      	adds	r3, r7, r3
   2c9c2:	881b      	ldrh	r3, [r3, #0]
   2c9c4:	2b00      	cmp	r3, #0
   2c9c6:	d008      	beq.n	2c9da <cmp_lfn+0xee>
   2c9c8:	697b      	ldr	r3, [r7, #20]
   2c9ca:	005b      	lsls	r3, r3, #1
   2c9cc:	687a      	ldr	r2, [r7, #4]
   2c9ce:	18d3      	adds	r3, r2, r3
   2c9d0:	881b      	ldrh	r3, [r3, #0]
   2c9d2:	2b00      	cmp	r3, #0
   2c9d4:	d001      	beq.n	2c9da <cmp_lfn+0xee>
		return 0;
   2c9d6:	2300      	movs	r3, #0
   2c9d8:	e000      	b.n	2c9dc <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2c9da:	2301      	movs	r3, #1
}
   2c9dc:	0018      	movs	r0, r3
   2c9de:	46bd      	mov	sp, r7
   2c9e0:	b007      	add	sp, #28
   2c9e2:	bd90      	pop	{r4, r7, pc}
   2c9e4:	00039e18 	.word	0x00039e18
   2c9e8:	0002e999 	.word	0x0002e999
   2c9ec:	0000ffff 	.word	0x0000ffff

0002c9f0 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2c9f0:	b580      	push	{r7, lr}
   2c9f2:	b088      	sub	sp, #32
   2c9f4:	af00      	add	r7, sp, #0
   2c9f6:	60f8      	str	r0, [r7, #12]
   2c9f8:	60b9      	str	r1, [r7, #8]
   2c9fa:	0019      	movs	r1, r3
   2c9fc:	1dfb      	adds	r3, r7, #7
   2c9fe:	701a      	strb	r2, [r3, #0]
   2ca00:	1dbb      	adds	r3, r7, #6
   2ca02:	1c0a      	adds	r2, r1, #0
   2ca04:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2ca06:	68bb      	ldr	r3, [r7, #8]
   2ca08:	330d      	adds	r3, #13
   2ca0a:	1dba      	adds	r2, r7, #6
   2ca0c:	7812      	ldrb	r2, [r2, #0]
   2ca0e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2ca10:	68bb      	ldr	r3, [r7, #8]
   2ca12:	330b      	adds	r3, #11
   2ca14:	220f      	movs	r2, #15
   2ca16:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2ca18:	68bb      	ldr	r3, [r7, #8]
   2ca1a:	330c      	adds	r3, #12
   2ca1c:	2200      	movs	r2, #0
   2ca1e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2ca20:	68bb      	ldr	r3, [r7, #8]
   2ca22:	331a      	adds	r3, #26
   2ca24:	2200      	movs	r2, #0
   2ca26:	701a      	strb	r2, [r3, #0]
   2ca28:	68bb      	ldr	r3, [r7, #8]
   2ca2a:	331b      	adds	r3, #27
   2ca2c:	2200      	movs	r2, #0
   2ca2e:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2ca30:	1dfb      	adds	r3, r7, #7
   2ca32:	781b      	ldrb	r3, [r3, #0]
   2ca34:	1e5a      	subs	r2, r3, #1
   2ca36:	0013      	movs	r3, r2
   2ca38:	005b      	lsls	r3, r3, #1
   2ca3a:	189b      	adds	r3, r3, r2
   2ca3c:	009b      	lsls	r3, r3, #2
   2ca3e:	189b      	adds	r3, r3, r2
   2ca40:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2ca42:	2316      	movs	r3, #22
   2ca44:	18fb      	adds	r3, r7, r3
   2ca46:	2200      	movs	r2, #0
   2ca48:	801a      	strh	r2, [r3, #0]
   2ca4a:	2300      	movs	r3, #0
   2ca4c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2ca4e:	2316      	movs	r3, #22
   2ca50:	18fb      	adds	r3, r7, r3
   2ca52:	881b      	ldrh	r3, [r3, #0]
   2ca54:	4a28      	ldr	r2, [pc, #160]	; (2caf8 <fit_lfn+0x108>)
   2ca56:	4293      	cmp	r3, r2
   2ca58:	d009      	beq.n	2ca6e <fit_lfn+0x7e>
   2ca5a:	69fb      	ldr	r3, [r7, #28]
   2ca5c:	1c5a      	adds	r2, r3, #1
   2ca5e:	61fa      	str	r2, [r7, #28]
   2ca60:	005b      	lsls	r3, r3, #1
   2ca62:	68fa      	ldr	r2, [r7, #12]
   2ca64:	18d2      	adds	r2, r2, r3
   2ca66:	2316      	movs	r3, #22
   2ca68:	18fb      	adds	r3, r7, r3
   2ca6a:	8812      	ldrh	r2, [r2, #0]
   2ca6c:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2ca6e:	4a23      	ldr	r2, [pc, #140]	; (2cafc <fit_lfn+0x10c>)
   2ca70:	69bb      	ldr	r3, [r7, #24]
   2ca72:	18d3      	adds	r3, r2, r3
   2ca74:	781b      	ldrb	r3, [r3, #0]
   2ca76:	001a      	movs	r2, r3
   2ca78:	68bb      	ldr	r3, [r7, #8]
   2ca7a:	189b      	adds	r3, r3, r2
   2ca7c:	2216      	movs	r2, #22
   2ca7e:	18ba      	adds	r2, r7, r2
   2ca80:	8812      	ldrh	r2, [r2, #0]
   2ca82:	b2d2      	uxtb	r2, r2
   2ca84:	701a      	strb	r2, [r3, #0]
   2ca86:	4a1d      	ldr	r2, [pc, #116]	; (2cafc <fit_lfn+0x10c>)
   2ca88:	69bb      	ldr	r3, [r7, #24]
   2ca8a:	18d3      	adds	r3, r2, r3
   2ca8c:	781b      	ldrb	r3, [r3, #0]
   2ca8e:	3301      	adds	r3, #1
   2ca90:	68ba      	ldr	r2, [r7, #8]
   2ca92:	18d3      	adds	r3, r2, r3
   2ca94:	2216      	movs	r2, #22
   2ca96:	18ba      	adds	r2, r7, r2
   2ca98:	8812      	ldrh	r2, [r2, #0]
   2ca9a:	0a12      	lsrs	r2, r2, #8
   2ca9c:	b292      	uxth	r2, r2
   2ca9e:	b2d2      	uxtb	r2, r2
   2caa0:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2caa2:	2316      	movs	r3, #22
   2caa4:	18fb      	adds	r3, r7, r3
   2caa6:	881b      	ldrh	r3, [r3, #0]
   2caa8:	2b00      	cmp	r3, #0
   2caaa:	d104      	bne.n	2cab6 <fit_lfn+0xc6>
   2caac:	2316      	movs	r3, #22
   2caae:	18fb      	adds	r3, r7, r3
   2cab0:	2201      	movs	r2, #1
   2cab2:	4252      	negs	r2, r2
   2cab4:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2cab6:	69bb      	ldr	r3, [r7, #24]
   2cab8:	3301      	adds	r3, #1
   2caba:	61bb      	str	r3, [r7, #24]
   2cabc:	69bb      	ldr	r3, [r7, #24]
   2cabe:	2b0c      	cmp	r3, #12
   2cac0:	d9c5      	bls.n	2ca4e <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2cac2:	2316      	movs	r3, #22
   2cac4:	18fb      	adds	r3, r7, r3
   2cac6:	881b      	ldrh	r3, [r3, #0]
   2cac8:	4a0b      	ldr	r2, [pc, #44]	; (2caf8 <fit_lfn+0x108>)
   2caca:	4293      	cmp	r3, r2
   2cacc:	d006      	beq.n	2cadc <fit_lfn+0xec>
   2cace:	69fb      	ldr	r3, [r7, #28]
   2cad0:	005b      	lsls	r3, r3, #1
   2cad2:	68fa      	ldr	r2, [r7, #12]
   2cad4:	18d3      	adds	r3, r2, r3
   2cad6:	881b      	ldrh	r3, [r3, #0]
   2cad8:	2b00      	cmp	r3, #0
   2cada:	d105      	bne.n	2cae8 <fit_lfn+0xf8>
   2cadc:	1dfb      	adds	r3, r7, #7
   2cade:	1dfa      	adds	r2, r7, #7
   2cae0:	7812      	ldrb	r2, [r2, #0]
   2cae2:	2140      	movs	r1, #64	; 0x40
   2cae4:	430a      	orrs	r2, r1
   2cae6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2cae8:	68bb      	ldr	r3, [r7, #8]
   2caea:	1dfa      	adds	r2, r7, #7
   2caec:	7812      	ldrb	r2, [r2, #0]
   2caee:	701a      	strb	r2, [r3, #0]
}
   2caf0:	46c0      	nop			; (mov r8, r8)
   2caf2:	46bd      	mov	sp, r7
   2caf4:	b008      	add	sp, #32
   2caf6:	bd80      	pop	{r7, pc}
   2caf8:	0000ffff 	.word	0x0000ffff
   2cafc:	00039e18 	.word	0x00039e18

0002cb00 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2cb00:	b580      	push	{r7, lr}
   2cb02:	b08a      	sub	sp, #40	; 0x28
   2cb04:	af00      	add	r7, sp, #0
   2cb06:	60f8      	str	r0, [r7, #12]
   2cb08:	60b9      	str	r1, [r7, #8]
   2cb0a:	607a      	str	r2, [r7, #4]
   2cb0c:	001a      	movs	r2, r3
   2cb0e:	1cbb      	adds	r3, r7, #2
   2cb10:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2cb12:	68b9      	ldr	r1, [r7, #8]
   2cb14:	68fb      	ldr	r3, [r7, #12]
   2cb16:	220b      	movs	r2, #11
   2cb18:	0018      	movs	r0, r3
   2cb1a:	4b38      	ldr	r3, [pc, #224]	; (2cbfc <gen_numname+0xfc>)
   2cb1c:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2cb1e:	1cbb      	adds	r3, r7, #2
   2cb20:	881b      	ldrh	r3, [r3, #0]
   2cb22:	2b05      	cmp	r3, #5
   2cb24:	d911      	bls.n	2cb4a <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2cb26:	1cbb      	adds	r3, r7, #2
   2cb28:	881b      	ldrh	r3, [r3, #0]
   2cb2a:	b29a      	uxth	r2, r3
   2cb2c:	0852      	lsrs	r2, r2, #1
   2cb2e:	03db      	lsls	r3, r3, #15
   2cb30:	4313      	orrs	r3, r2
   2cb32:	b299      	uxth	r1, r3
   2cb34:	687b      	ldr	r3, [r7, #4]
   2cb36:	1c9a      	adds	r2, r3, #2
   2cb38:	607a      	str	r2, [r7, #4]
   2cb3a:	881a      	ldrh	r2, [r3, #0]
   2cb3c:	1cbb      	adds	r3, r7, #2
   2cb3e:	188a      	adds	r2, r1, r2
   2cb40:	801a      	strh	r2, [r3, #0]
   2cb42:	687b      	ldr	r3, [r7, #4]
   2cb44:	881b      	ldrh	r3, [r3, #0]
   2cb46:	2b00      	cmp	r3, #0
   2cb48:	d1ed      	bne.n	2cb26 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2cb4a:	2307      	movs	r3, #7
   2cb4c:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2cb4e:	1cbb      	adds	r3, r7, #2
   2cb50:	881b      	ldrh	r3, [r3, #0]
   2cb52:	b2db      	uxtb	r3, r3
   2cb54:	220f      	movs	r2, #15
   2cb56:	4013      	ands	r3, r2
   2cb58:	b2da      	uxtb	r2, r3
   2cb5a:	2327      	movs	r3, #39	; 0x27
   2cb5c:	18fb      	adds	r3, r7, r3
   2cb5e:	3230      	adds	r2, #48	; 0x30
   2cb60:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2cb62:	2327      	movs	r3, #39	; 0x27
   2cb64:	18fb      	adds	r3, r7, r3
   2cb66:	781b      	ldrb	r3, [r3, #0]
   2cb68:	2b39      	cmp	r3, #57	; 0x39
   2cb6a:	d906      	bls.n	2cb7a <gen_numname+0x7a>
   2cb6c:	2327      	movs	r3, #39	; 0x27
   2cb6e:	18fb      	adds	r3, r7, r3
   2cb70:	2227      	movs	r2, #39	; 0x27
   2cb72:	18ba      	adds	r2, r7, r2
   2cb74:	7812      	ldrb	r2, [r2, #0]
   2cb76:	3207      	adds	r2, #7
   2cb78:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2cb7a:	6a3b      	ldr	r3, [r7, #32]
   2cb7c:	1e5a      	subs	r2, r3, #1
   2cb7e:	623a      	str	r2, [r7, #32]
   2cb80:	2214      	movs	r2, #20
   2cb82:	18ba      	adds	r2, r7, r2
   2cb84:	2127      	movs	r1, #39	; 0x27
   2cb86:	1879      	adds	r1, r7, r1
   2cb88:	7809      	ldrb	r1, [r1, #0]
   2cb8a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2cb8c:	1cbb      	adds	r3, r7, #2
   2cb8e:	1cba      	adds	r2, r7, #2
   2cb90:	8812      	ldrh	r2, [r2, #0]
   2cb92:	0912      	lsrs	r2, r2, #4
   2cb94:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2cb96:	1cbb      	adds	r3, r7, #2
   2cb98:	881b      	ldrh	r3, [r3, #0]
   2cb9a:	2b00      	cmp	r3, #0
   2cb9c:	d1d7      	bne.n	2cb4e <gen_numname+0x4e>
	ns[i] = '~';
   2cb9e:	2314      	movs	r3, #20
   2cba0:	18fa      	adds	r2, r7, r3
   2cba2:	6a3b      	ldr	r3, [r7, #32]
   2cba4:	18d3      	adds	r3, r2, r3
   2cba6:	227e      	movs	r2, #126	; 0x7e
   2cba8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2cbaa:	2300      	movs	r3, #0
   2cbac:	61fb      	str	r3, [r7, #28]
   2cbae:	e002      	b.n	2cbb6 <gen_numname+0xb6>
   2cbb0:	69fb      	ldr	r3, [r7, #28]
   2cbb2:	3301      	adds	r3, #1
   2cbb4:	61fb      	str	r3, [r7, #28]
   2cbb6:	69fa      	ldr	r2, [r7, #28]
   2cbb8:	6a3b      	ldr	r3, [r7, #32]
   2cbba:	429a      	cmp	r2, r3
   2cbbc:	d205      	bcs.n	2cbca <gen_numname+0xca>
   2cbbe:	68fa      	ldr	r2, [r7, #12]
   2cbc0:	69fb      	ldr	r3, [r7, #28]
   2cbc2:	18d3      	adds	r3, r2, r3
   2cbc4:	781b      	ldrb	r3, [r3, #0]
   2cbc6:	2b20      	cmp	r3, #32
   2cbc8:	d1f2      	bne.n	2cbb0 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2cbca:	69fb      	ldr	r3, [r7, #28]
   2cbcc:	1c5a      	adds	r2, r3, #1
   2cbce:	61fa      	str	r2, [r7, #28]
   2cbd0:	68fa      	ldr	r2, [r7, #12]
   2cbd2:	18d2      	adds	r2, r2, r3
   2cbd4:	6a3b      	ldr	r3, [r7, #32]
   2cbd6:	2b07      	cmp	r3, #7
   2cbd8:	d806      	bhi.n	2cbe8 <gen_numname+0xe8>
   2cbda:	6a3b      	ldr	r3, [r7, #32]
   2cbdc:	1c59      	adds	r1, r3, #1
   2cbde:	6239      	str	r1, [r7, #32]
   2cbe0:	2114      	movs	r1, #20
   2cbe2:	1879      	adds	r1, r7, r1
   2cbe4:	5ccb      	ldrb	r3, [r1, r3]
   2cbe6:	e000      	b.n	2cbea <gen_numname+0xea>
   2cbe8:	2320      	movs	r3, #32
   2cbea:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2cbec:	69fb      	ldr	r3, [r7, #28]
   2cbee:	2b07      	cmp	r3, #7
   2cbf0:	d9eb      	bls.n	2cbca <gen_numname+0xca>
}
   2cbf2:	46c0      	nop			; (mov r8, r8)
   2cbf4:	46bd      	mov	sp, r7
   2cbf6:	b00a      	add	sp, #40	; 0x28
   2cbf8:	bd80      	pop	{r7, pc}
   2cbfa:	46c0      	nop			; (mov r8, r8)
   2cbfc:	0002bca5 	.word	0x0002bca5

0002cc00 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2cc00:	b580      	push	{r7, lr}
   2cc02:	b084      	sub	sp, #16
   2cc04:	af00      	add	r7, sp, #0
   2cc06:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2cc08:	230f      	movs	r3, #15
   2cc0a:	18fb      	adds	r3, r7, r3
   2cc0c:	2200      	movs	r2, #0
   2cc0e:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2cc10:	230b      	movs	r3, #11
   2cc12:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2cc14:	230f      	movs	r3, #15
   2cc16:	18fb      	adds	r3, r7, r3
   2cc18:	781b      	ldrb	r3, [r3, #0]
   2cc1a:	b2da      	uxtb	r2, r3
   2cc1c:	0852      	lsrs	r2, r2, #1
   2cc1e:	01db      	lsls	r3, r3, #7
   2cc20:	4313      	orrs	r3, r2
   2cc22:	b2d9      	uxtb	r1, r3
   2cc24:	687b      	ldr	r3, [r7, #4]
   2cc26:	1c5a      	adds	r2, r3, #1
   2cc28:	607a      	str	r2, [r7, #4]
   2cc2a:	781a      	ldrb	r2, [r3, #0]
   2cc2c:	230f      	movs	r3, #15
   2cc2e:	18fb      	adds	r3, r7, r3
   2cc30:	188a      	adds	r2, r1, r2
   2cc32:	701a      	strb	r2, [r3, #0]
   2cc34:	68bb      	ldr	r3, [r7, #8]
   2cc36:	3b01      	subs	r3, #1
   2cc38:	60bb      	str	r3, [r7, #8]
   2cc3a:	68bb      	ldr	r3, [r7, #8]
   2cc3c:	2b00      	cmp	r3, #0
   2cc3e:	d1e9      	bne.n	2cc14 <sum_sfn+0x14>
	return sum;
   2cc40:	230f      	movs	r3, #15
   2cc42:	18fb      	adds	r3, r7, r3
   2cc44:	781b      	ldrb	r3, [r3, #0]
}
   2cc46:	0018      	movs	r0, r3
   2cc48:	46bd      	mov	sp, r7
   2cc4a:	b004      	add	sp, #16
   2cc4c:	bd80      	pop	{r7, pc}
	...

0002cc50 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2cc50:	b590      	push	{r4, r7, lr}
   2cc52:	b087      	sub	sp, #28
   2cc54:	af00      	add	r7, sp, #0
   2cc56:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2cc58:	2317      	movs	r3, #23
   2cc5a:	18fc      	adds	r4, r7, r3
   2cc5c:	687b      	ldr	r3, [r7, #4]
   2cc5e:	2100      	movs	r1, #0
   2cc60:	0018      	movs	r0, r3
   2cc62:	4b74      	ldr	r3, [pc, #464]	; (2ce34 <dir_find+0x1e4>)
   2cc64:	4798      	blx	r3
   2cc66:	0003      	movs	r3, r0
   2cc68:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2cc6a:	2317      	movs	r3, #23
   2cc6c:	18fb      	adds	r3, r7, r3
   2cc6e:	781b      	ldrb	r3, [r3, #0]
   2cc70:	2b00      	cmp	r3, #0
   2cc72:	d003      	beq.n	2cc7c <dir_find+0x2c>
   2cc74:	2317      	movs	r3, #23
   2cc76:	18fb      	adds	r3, r7, r3
   2cc78:	781b      	ldrb	r3, [r3, #0]
   2cc7a:	e0d6      	b.n	2ce2a <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2cc7c:	2314      	movs	r3, #20
   2cc7e:	18fb      	adds	r3, r7, r3
   2cc80:	22ff      	movs	r2, #255	; 0xff
   2cc82:	701a      	strb	r2, [r3, #0]
   2cc84:	2315      	movs	r3, #21
   2cc86:	18fb      	adds	r3, r7, r3
   2cc88:	2214      	movs	r2, #20
   2cc8a:	18ba      	adds	r2, r7, r2
   2cc8c:	7812      	ldrb	r2, [r2, #0]
   2cc8e:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2cc90:	687b      	ldr	r3, [r7, #4]
   2cc92:	681a      	ldr	r2, [r3, #0]
   2cc94:	687b      	ldr	r3, [r7, #4]
   2cc96:	691b      	ldr	r3, [r3, #16]
   2cc98:	2117      	movs	r1, #23
   2cc9a:	187c      	adds	r4, r7, r1
   2cc9c:	0019      	movs	r1, r3
   2cc9e:	0010      	movs	r0, r2
   2cca0:	4b65      	ldr	r3, [pc, #404]	; (2ce38 <dir_find+0x1e8>)
   2cca2:	4798      	blx	r3
   2cca4:	0003      	movs	r3, r0
   2cca6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2cca8:	2317      	movs	r3, #23
   2ccaa:	18fb      	adds	r3, r7, r3
   2ccac:	781b      	ldrb	r3, [r3, #0]
   2ccae:	2b00      	cmp	r3, #0
   2ccb0:	d000      	beq.n	2ccb4 <dir_find+0x64>
   2ccb2:	e0b2      	b.n	2ce1a <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2ccb4:	687b      	ldr	r3, [r7, #4]
   2ccb6:	695b      	ldr	r3, [r3, #20]
   2ccb8:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2ccba:	2316      	movs	r3, #22
   2ccbc:	18fb      	adds	r3, r7, r3
   2ccbe:	693a      	ldr	r2, [r7, #16]
   2ccc0:	7812      	ldrb	r2, [r2, #0]
   2ccc2:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2ccc4:	2316      	movs	r3, #22
   2ccc6:	18fb      	adds	r3, r7, r3
   2ccc8:	781b      	ldrb	r3, [r3, #0]
   2ccca:	2b00      	cmp	r3, #0
   2cccc:	d104      	bne.n	2ccd8 <dir_find+0x88>
   2ccce:	2317      	movs	r3, #23
   2ccd0:	18fb      	adds	r3, r7, r3
   2ccd2:	2204      	movs	r2, #4
   2ccd4:	701a      	strb	r2, [r3, #0]
   2ccd6:	e0a5      	b.n	2ce24 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2ccd8:	693b      	ldr	r3, [r7, #16]
   2ccda:	330b      	adds	r3, #11
   2ccdc:	781a      	ldrb	r2, [r3, #0]
   2ccde:	230f      	movs	r3, #15
   2cce0:	18fb      	adds	r3, r7, r3
   2cce2:	213f      	movs	r1, #63	; 0x3f
   2cce4:	400a      	ands	r2, r1
   2cce6:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2cce8:	2316      	movs	r3, #22
   2ccea:	18fb      	adds	r3, r7, r3
   2ccec:	781b      	ldrb	r3, [r3, #0]
   2ccee:	2be5      	cmp	r3, #229	; 0xe5
   2ccf0:	d00a      	beq.n	2cd08 <dir_find+0xb8>
   2ccf2:	230f      	movs	r3, #15
   2ccf4:	18fb      	adds	r3, r7, r3
   2ccf6:	781b      	ldrb	r3, [r3, #0]
   2ccf8:	2208      	movs	r2, #8
   2ccfa:	4013      	ands	r3, r2
   2ccfc:	d009      	beq.n	2cd12 <dir_find+0xc2>
   2ccfe:	230f      	movs	r3, #15
   2cd00:	18fb      	adds	r3, r7, r3
   2cd02:	781b      	ldrb	r3, [r3, #0]
   2cd04:	2b0f      	cmp	r3, #15
   2cd06:	d004      	beq.n	2cd12 <dir_find+0xc2>
			ord = 0xFF;
   2cd08:	2315      	movs	r3, #21
   2cd0a:	18fb      	adds	r3, r7, r3
   2cd0c:	22ff      	movs	r2, #255	; 0xff
   2cd0e:	701a      	strb	r2, [r3, #0]
   2cd10:	e073      	b.n	2cdfa <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2cd12:	230f      	movs	r3, #15
   2cd14:	18fb      	adds	r3, r7, r3
   2cd16:	781b      	ldrb	r3, [r3, #0]
   2cd18:	2b0f      	cmp	r3, #15
   2cd1a:	d145      	bne.n	2cda8 <dir_find+0x158>
				if (dj->lfn) {
   2cd1c:	687b      	ldr	r3, [r7, #4]
   2cd1e:	69db      	ldr	r3, [r3, #28]
   2cd20:	2b00      	cmp	r3, #0
   2cd22:	d100      	bne.n	2cd26 <dir_find+0xd6>
   2cd24:	e069      	b.n	2cdfa <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2cd26:	2316      	movs	r3, #22
   2cd28:	18fb      	adds	r3, r7, r3
   2cd2a:	781b      	ldrb	r3, [r3, #0]
   2cd2c:	2240      	movs	r2, #64	; 0x40
   2cd2e:	4013      	ands	r3, r2
   2cd30:	d016      	beq.n	2cd60 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2cd32:	2314      	movs	r3, #20
   2cd34:	18fb      	adds	r3, r7, r3
   2cd36:	693a      	ldr	r2, [r7, #16]
   2cd38:	7b52      	ldrb	r2, [r2, #13]
   2cd3a:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2cd3c:	2316      	movs	r3, #22
   2cd3e:	18fb      	adds	r3, r7, r3
   2cd40:	2216      	movs	r2, #22
   2cd42:	18ba      	adds	r2, r7, r2
   2cd44:	7812      	ldrb	r2, [r2, #0]
   2cd46:	2140      	movs	r1, #64	; 0x40
   2cd48:	438a      	bics	r2, r1
   2cd4a:	701a      	strb	r2, [r3, #0]
   2cd4c:	2315      	movs	r3, #21
   2cd4e:	18fb      	adds	r3, r7, r3
   2cd50:	2216      	movs	r2, #22
   2cd52:	18ba      	adds	r2, r7, r2
   2cd54:	7812      	ldrb	r2, [r2, #0]
   2cd56:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2cd58:	687b      	ldr	r3, [r7, #4]
   2cd5a:	88da      	ldrh	r2, [r3, #6]
   2cd5c:	687b      	ldr	r3, [r7, #4]
   2cd5e:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2cd60:	2316      	movs	r3, #22
   2cd62:	18fa      	adds	r2, r7, r3
   2cd64:	2315      	movs	r3, #21
   2cd66:	18fb      	adds	r3, r7, r3
   2cd68:	7812      	ldrb	r2, [r2, #0]
   2cd6a:	781b      	ldrb	r3, [r3, #0]
   2cd6c:	429a      	cmp	r2, r3
   2cd6e:	d116      	bne.n	2cd9e <dir_find+0x14e>
   2cd70:	693b      	ldr	r3, [r7, #16]
   2cd72:	330d      	adds	r3, #13
   2cd74:	781b      	ldrb	r3, [r3, #0]
   2cd76:	2214      	movs	r2, #20
   2cd78:	18ba      	adds	r2, r7, r2
   2cd7a:	7812      	ldrb	r2, [r2, #0]
   2cd7c:	429a      	cmp	r2, r3
   2cd7e:	d10e      	bne.n	2cd9e <dir_find+0x14e>
   2cd80:	687b      	ldr	r3, [r7, #4]
   2cd82:	69db      	ldr	r3, [r3, #28]
   2cd84:	693a      	ldr	r2, [r7, #16]
   2cd86:	0011      	movs	r1, r2
   2cd88:	0018      	movs	r0, r3
   2cd8a:	4b2c      	ldr	r3, [pc, #176]	; (2ce3c <dir_find+0x1ec>)
   2cd8c:	4798      	blx	r3
   2cd8e:	1e03      	subs	r3, r0, #0
   2cd90:	d005      	beq.n	2cd9e <dir_find+0x14e>
   2cd92:	2315      	movs	r3, #21
   2cd94:	18fb      	adds	r3, r7, r3
   2cd96:	781b      	ldrb	r3, [r3, #0]
   2cd98:	3b01      	subs	r3, #1
   2cd9a:	b2da      	uxtb	r2, r3
   2cd9c:	e000      	b.n	2cda0 <dir_find+0x150>
   2cd9e:	22ff      	movs	r2, #255	; 0xff
   2cda0:	2315      	movs	r3, #21
   2cda2:	18fb      	adds	r3, r7, r3
   2cda4:	701a      	strb	r2, [r3, #0]
   2cda6:	e028      	b.n	2cdfa <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2cda8:	2315      	movs	r3, #21
   2cdaa:	18fb      	adds	r3, r7, r3
   2cdac:	781b      	ldrb	r3, [r3, #0]
   2cdae:	2b00      	cmp	r3, #0
   2cdb0:	d10a      	bne.n	2cdc8 <dir_find+0x178>
   2cdb2:	693b      	ldr	r3, [r7, #16]
   2cdb4:	0018      	movs	r0, r3
   2cdb6:	4b22      	ldr	r3, [pc, #136]	; (2ce40 <dir_find+0x1f0>)
   2cdb8:	4798      	blx	r3
   2cdba:	0003      	movs	r3, r0
   2cdbc:	001a      	movs	r2, r3
   2cdbe:	2314      	movs	r3, #20
   2cdc0:	18fb      	adds	r3, r7, r3
   2cdc2:	781b      	ldrb	r3, [r3, #0]
   2cdc4:	4293      	cmp	r3, r2
   2cdc6:	d02a      	beq.n	2ce1e <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2cdc8:	2315      	movs	r3, #21
   2cdca:	18fb      	adds	r3, r7, r3
   2cdcc:	22ff      	movs	r2, #255	; 0xff
   2cdce:	701a      	strb	r2, [r3, #0]
   2cdd0:	687b      	ldr	r3, [r7, #4]
   2cdd2:	2201      	movs	r2, #1
   2cdd4:	4252      	negs	r2, r2
   2cdd6:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2cdd8:	687b      	ldr	r3, [r7, #4]
   2cdda:	699b      	ldr	r3, [r3, #24]
   2cddc:	330b      	adds	r3, #11
   2cdde:	781b      	ldrb	r3, [r3, #0]
   2cde0:	001a      	movs	r2, r3
   2cde2:	2301      	movs	r3, #1
   2cde4:	4013      	ands	r3, r2
   2cde6:	d108      	bne.n	2cdfa <dir_find+0x1aa>
   2cde8:	687b      	ldr	r3, [r7, #4]
   2cdea:	6999      	ldr	r1, [r3, #24]
   2cdec:	693b      	ldr	r3, [r7, #16]
   2cdee:	220b      	movs	r2, #11
   2cdf0:	0018      	movs	r0, r3
   2cdf2:	4b14      	ldr	r3, [pc, #80]	; (2ce44 <dir_find+0x1f4>)
   2cdf4:	4798      	blx	r3
   2cdf6:	1e03      	subs	r3, r0, #0
   2cdf8:	d013      	beq.n	2ce22 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2cdfa:	2317      	movs	r3, #23
   2cdfc:	18fc      	adds	r4, r7, r3
   2cdfe:	687b      	ldr	r3, [r7, #4]
   2ce00:	2100      	movs	r1, #0
   2ce02:	0018      	movs	r0, r3
   2ce04:	4b10      	ldr	r3, [pc, #64]	; (2ce48 <dir_find+0x1f8>)
   2ce06:	4798      	blx	r3
   2ce08:	0003      	movs	r3, r0
   2ce0a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2ce0c:	2317      	movs	r3, #23
   2ce0e:	18fb      	adds	r3, r7, r3
   2ce10:	781b      	ldrb	r3, [r3, #0]
   2ce12:	2b00      	cmp	r3, #0
   2ce14:	d100      	bne.n	2ce18 <dir_find+0x1c8>
   2ce16:	e73b      	b.n	2cc90 <dir_find+0x40>
   2ce18:	e004      	b.n	2ce24 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2ce1a:	46c0      	nop			; (mov r8, r8)
   2ce1c:	e002      	b.n	2ce24 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2ce1e:	46c0      	nop			; (mov r8, r8)
   2ce20:	e000      	b.n	2ce24 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2ce22:	46c0      	nop			; (mov r8, r8)

	return res;
   2ce24:	2317      	movs	r3, #23
   2ce26:	18fb      	adds	r3, r7, r3
   2ce28:	781b      	ldrb	r3, [r3, #0]
}
   2ce2a:	0018      	movs	r0, r3
   2ce2c:	46bd      	mov	sp, r7
   2ce2e:	b007      	add	sp, #28
   2ce30:	bd90      	pop	{r4, r7, pc}
   2ce32:	46c0      	nop			; (mov r8, r8)
   2ce34:	0002c5cd 	.word	0x0002c5cd
   2ce38:	0002bd89 	.word	0x0002bd89
   2ce3c:	0002c8ed 	.word	0x0002c8ed
   2ce40:	0002cc01 	.word	0x0002cc01
   2ce44:	0002bd0d 	.word	0x0002bd0d
   2ce48:	0002c6fd 	.word	0x0002c6fd

0002ce4c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2ce4c:	b590      	push	{r4, r7, lr}
   2ce4e:	b08d      	sub	sp, #52	; 0x34
   2ce50:	af00      	add	r7, sp, #0
   2ce52:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2ce54:	687b      	ldr	r3, [r7, #4]
   2ce56:	699b      	ldr	r3, [r3, #24]
   2ce58:	627b      	str	r3, [r7, #36]	; 0x24
   2ce5a:	687b      	ldr	r3, [r7, #4]
   2ce5c:	69db      	ldr	r3, [r3, #28]
   2ce5e:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2ce60:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2ce62:	230c      	movs	r3, #12
   2ce64:	18fb      	adds	r3, r7, r3
   2ce66:	220c      	movs	r2, #12
   2ce68:	0018      	movs	r0, r3
   2ce6a:	4bc8      	ldr	r3, [pc, #800]	; (2d18c <dir_register+0x340>)
   2ce6c:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2ce6e:	230c      	movs	r3, #12
   2ce70:	18fb      	adds	r3, r7, r3
   2ce72:	7adb      	ldrb	r3, [r3, #11]
   2ce74:	001a      	movs	r2, r3
   2ce76:	2301      	movs	r3, #1
   2ce78:	4013      	ands	r3, r2
   2ce7a:	d048      	beq.n	2cf0e <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ce7e:	330b      	adds	r3, #11
   2ce80:	2200      	movs	r2, #0
   2ce82:	701a      	strb	r2, [r3, #0]
   2ce84:	687b      	ldr	r3, [r7, #4]
   2ce86:	2200      	movs	r2, #0
   2ce88:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2ce8a:	232c      	movs	r3, #44	; 0x2c
   2ce8c:	18fb      	adds	r3, r7, r3
   2ce8e:	2201      	movs	r2, #1
   2ce90:	801a      	strh	r2, [r3, #0]
   2ce92:	e01c      	b.n	2cece <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2ce94:	232c      	movs	r3, #44	; 0x2c
   2ce96:	18fb      	adds	r3, r7, r3
   2ce98:	881b      	ldrh	r3, [r3, #0]
   2ce9a:	6a3a      	ldr	r2, [r7, #32]
   2ce9c:	210c      	movs	r1, #12
   2ce9e:	1879      	adds	r1, r7, r1
   2cea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2cea2:	4cbb      	ldr	r4, [pc, #748]	; (2d190 <dir_register+0x344>)
   2cea4:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2cea6:	232f      	movs	r3, #47	; 0x2f
   2cea8:	18fc      	adds	r4, r7, r3
   2ceaa:	687b      	ldr	r3, [r7, #4]
   2ceac:	0018      	movs	r0, r3
   2ceae:	4bb9      	ldr	r3, [pc, #740]	; (2d194 <dir_register+0x348>)
   2ceb0:	4798      	blx	r3
   2ceb2:	0003      	movs	r3, r0
   2ceb4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ceb6:	232f      	movs	r3, #47	; 0x2f
   2ceb8:	18fb      	adds	r3, r7, r3
   2ceba:	781b      	ldrb	r3, [r3, #0]
   2cebc:	2b00      	cmp	r3, #0
   2cebe:	d10c      	bne.n	2ceda <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2cec0:	232c      	movs	r3, #44	; 0x2c
   2cec2:	18fb      	adds	r3, r7, r3
   2cec4:	881a      	ldrh	r2, [r3, #0]
   2cec6:	232c      	movs	r3, #44	; 0x2c
   2cec8:	18fb      	adds	r3, r7, r3
   2ceca:	3201      	adds	r2, #1
   2cecc:	801a      	strh	r2, [r3, #0]
   2cece:	232c      	movs	r3, #44	; 0x2c
   2ced0:	18fb      	adds	r3, r7, r3
   2ced2:	881b      	ldrh	r3, [r3, #0]
   2ced4:	2b63      	cmp	r3, #99	; 0x63
   2ced6:	d9dd      	bls.n	2ce94 <dir_register+0x48>
   2ced8:	e000      	b.n	2cedc <dir_register+0x90>
			if (res != FR_OK) break;
   2ceda:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2cedc:	232c      	movs	r3, #44	; 0x2c
   2cede:	18fb      	adds	r3, r7, r3
   2cee0:	881b      	ldrh	r3, [r3, #0]
   2cee2:	2b64      	cmp	r3, #100	; 0x64
   2cee4:	d101      	bne.n	2ceea <dir_register+0x9e>
   2cee6:	2307      	movs	r3, #7
   2cee8:	e14c      	b.n	2d184 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2ceea:	232f      	movs	r3, #47	; 0x2f
   2ceec:	18fb      	adds	r3, r7, r3
   2ceee:	781b      	ldrb	r3, [r3, #0]
   2cef0:	2b04      	cmp	r3, #4
   2cef2:	d003      	beq.n	2cefc <dir_register+0xb0>
   2cef4:	232f      	movs	r3, #47	; 0x2f
   2cef6:	18fb      	adds	r3, r7, r3
   2cef8:	781b      	ldrb	r3, [r3, #0]
   2cefa:	e143      	b.n	2d184 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2cefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2cefe:	330b      	adds	r3, #11
   2cf00:	220c      	movs	r2, #12
   2cf02:	18ba      	adds	r2, r7, r2
   2cf04:	7ad2      	ldrb	r2, [r2, #11]
   2cf06:	701a      	strb	r2, [r3, #0]
   2cf08:	687b      	ldr	r3, [r7, #4]
   2cf0a:	6a3a      	ldr	r2, [r7, #32]
   2cf0c:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2cf0e:	230c      	movs	r3, #12
   2cf10:	18fb      	adds	r3, r7, r3
   2cf12:	7adb      	ldrb	r3, [r3, #11]
   2cf14:	001a      	movs	r2, r3
   2cf16:	2302      	movs	r3, #2
   2cf18:	4013      	ands	r3, r2
   2cf1a:	d023      	beq.n	2cf64 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2cf1c:	232a      	movs	r3, #42	; 0x2a
   2cf1e:	18fb      	adds	r3, r7, r3
   2cf20:	2200      	movs	r2, #0
   2cf22:	801a      	strh	r2, [r3, #0]
   2cf24:	e006      	b.n	2cf34 <dir_register+0xe8>
   2cf26:	232a      	movs	r3, #42	; 0x2a
   2cf28:	18fb      	adds	r3, r7, r3
   2cf2a:	881a      	ldrh	r2, [r3, #0]
   2cf2c:	232a      	movs	r3, #42	; 0x2a
   2cf2e:	18fb      	adds	r3, r7, r3
   2cf30:	3201      	adds	r2, #1
   2cf32:	801a      	strh	r2, [r3, #0]
   2cf34:	232a      	movs	r3, #42	; 0x2a
   2cf36:	18fb      	adds	r3, r7, r3
   2cf38:	881b      	ldrh	r3, [r3, #0]
   2cf3a:	005b      	lsls	r3, r3, #1
   2cf3c:	6a3a      	ldr	r2, [r7, #32]
   2cf3e:	18d3      	adds	r3, r2, r3
   2cf40:	881b      	ldrh	r3, [r3, #0]
   2cf42:	2b00      	cmp	r3, #0
   2cf44:	d1ef      	bne.n	2cf26 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2cf46:	232a      	movs	r3, #42	; 0x2a
   2cf48:	18fb      	adds	r3, r7, r3
   2cf4a:	881b      	ldrh	r3, [r3, #0]
   2cf4c:	3319      	adds	r3, #25
   2cf4e:	001a      	movs	r2, r3
   2cf50:	4b91      	ldr	r3, [pc, #580]	; (2d198 <dir_register+0x34c>)
   2cf52:	210d      	movs	r1, #13
   2cf54:	0010      	movs	r0, r2
   2cf56:	4798      	blx	r3
   2cf58:	0003      	movs	r3, r0
   2cf5a:	001a      	movs	r2, r3
   2cf5c:	232a      	movs	r3, #42	; 0x2a
   2cf5e:	18fb      	adds	r3, r7, r3
   2cf60:	801a      	strh	r2, [r3, #0]
   2cf62:	e003      	b.n	2cf6c <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2cf64:	232a      	movs	r3, #42	; 0x2a
   2cf66:	18fb      	adds	r3, r7, r3
   2cf68:	2201      	movs	r2, #1
   2cf6a:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2cf6c:	232f      	movs	r3, #47	; 0x2f
   2cf6e:	18fc      	adds	r4, r7, r3
   2cf70:	687b      	ldr	r3, [r7, #4]
   2cf72:	2100      	movs	r1, #0
   2cf74:	0018      	movs	r0, r3
   2cf76:	4b89      	ldr	r3, [pc, #548]	; (2d19c <dir_register+0x350>)
   2cf78:	4798      	blx	r3
   2cf7a:	0003      	movs	r3, r0
   2cf7c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2cf7e:	232f      	movs	r3, #47	; 0x2f
   2cf80:	18fb      	adds	r3, r7, r3
   2cf82:	781b      	ldrb	r3, [r3, #0]
   2cf84:	2b00      	cmp	r3, #0
   2cf86:	d003      	beq.n	2cf90 <dir_register+0x144>
   2cf88:	232f      	movs	r3, #47	; 0x2f
   2cf8a:	18fb      	adds	r3, r7, r3
   2cf8c:	781b      	ldrb	r3, [r3, #0]
   2cf8e:	e0f9      	b.n	2d184 <dir_register+0x338>
	n = is = 0;
   2cf90:	2328      	movs	r3, #40	; 0x28
   2cf92:	18fb      	adds	r3, r7, r3
   2cf94:	2200      	movs	r2, #0
   2cf96:	801a      	strh	r2, [r3, #0]
   2cf98:	232c      	movs	r3, #44	; 0x2c
   2cf9a:	18fb      	adds	r3, r7, r3
   2cf9c:	2228      	movs	r2, #40	; 0x28
   2cf9e:	18ba      	adds	r2, r7, r2
   2cfa0:	8812      	ldrh	r2, [r2, #0]
   2cfa2:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2cfa4:	687b      	ldr	r3, [r7, #4]
   2cfa6:	681a      	ldr	r2, [r3, #0]
   2cfa8:	687b      	ldr	r3, [r7, #4]
   2cfaa:	691b      	ldr	r3, [r3, #16]
   2cfac:	212f      	movs	r1, #47	; 0x2f
   2cfae:	187c      	adds	r4, r7, r1
   2cfb0:	0019      	movs	r1, r3
   2cfb2:	0010      	movs	r0, r2
   2cfb4:	4b7a      	ldr	r3, [pc, #488]	; (2d1a0 <dir_register+0x354>)
   2cfb6:	4798      	blx	r3
   2cfb8:	0003      	movs	r3, r0
   2cfba:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2cfbc:	232f      	movs	r3, #47	; 0x2f
   2cfbe:	18fb      	adds	r3, r7, r3
   2cfc0:	781b      	ldrb	r3, [r3, #0]
   2cfc2:	2b00      	cmp	r3, #0
   2cfc4:	d13c      	bne.n	2d040 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2cfc6:	687b      	ldr	r3, [r7, #4]
   2cfc8:	695a      	ldr	r2, [r3, #20]
   2cfca:	231f      	movs	r3, #31
   2cfcc:	18fb      	adds	r3, r7, r3
   2cfce:	7812      	ldrb	r2, [r2, #0]
   2cfd0:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2cfd2:	231f      	movs	r3, #31
   2cfd4:	18fb      	adds	r3, r7, r3
   2cfd6:	781b      	ldrb	r3, [r3, #0]
   2cfd8:	2be5      	cmp	r3, #229	; 0xe5
   2cfda:	d004      	beq.n	2cfe6 <dir_register+0x19a>
   2cfdc:	231f      	movs	r3, #31
   2cfde:	18fb      	adds	r3, r7, r3
   2cfe0:	781b      	ldrb	r3, [r3, #0]
   2cfe2:	2b00      	cmp	r3, #0
   2cfe4:	d119      	bne.n	2d01a <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2cfe6:	232c      	movs	r3, #44	; 0x2c
   2cfe8:	18fb      	adds	r3, r7, r3
   2cfea:	881b      	ldrh	r3, [r3, #0]
   2cfec:	2b00      	cmp	r3, #0
   2cfee:	d104      	bne.n	2cffa <dir_register+0x1ae>
   2cff0:	2328      	movs	r3, #40	; 0x28
   2cff2:	18fb      	adds	r3, r7, r3
   2cff4:	687a      	ldr	r2, [r7, #4]
   2cff6:	88d2      	ldrh	r2, [r2, #6]
   2cff8:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2cffa:	232c      	movs	r3, #44	; 0x2c
   2cffc:	18fb      	adds	r3, r7, r3
   2cffe:	222c      	movs	r2, #44	; 0x2c
   2d000:	18ba      	adds	r2, r7, r2
   2d002:	8812      	ldrh	r2, [r2, #0]
   2d004:	3201      	adds	r2, #1
   2d006:	801a      	strh	r2, [r3, #0]
   2d008:	232c      	movs	r3, #44	; 0x2c
   2d00a:	18fa      	adds	r2, r7, r3
   2d00c:	232a      	movs	r3, #42	; 0x2a
   2d00e:	18fb      	adds	r3, r7, r3
   2d010:	8812      	ldrh	r2, [r2, #0]
   2d012:	881b      	ldrh	r3, [r3, #0]
   2d014:	429a      	cmp	r2, r3
   2d016:	d104      	bne.n	2d022 <dir_register+0x1d6>
   2d018:	e013      	b.n	2d042 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2d01a:	232c      	movs	r3, #44	; 0x2c
   2d01c:	18fb      	adds	r3, r7, r3
   2d01e:	2200      	movs	r2, #0
   2d020:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2d022:	232f      	movs	r3, #47	; 0x2f
   2d024:	18fc      	adds	r4, r7, r3
   2d026:	687b      	ldr	r3, [r7, #4]
   2d028:	2101      	movs	r1, #1
   2d02a:	0018      	movs	r0, r3
   2d02c:	4b5d      	ldr	r3, [pc, #372]	; (2d1a4 <dir_register+0x358>)
   2d02e:	4798      	blx	r3
   2d030:	0003      	movs	r3, r0
   2d032:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d034:	232f      	movs	r3, #47	; 0x2f
   2d036:	18fb      	adds	r3, r7, r3
   2d038:	781b      	ldrb	r3, [r3, #0]
   2d03a:	2b00      	cmp	r3, #0
   2d03c:	d0b2      	beq.n	2cfa4 <dir_register+0x158>
   2d03e:	e000      	b.n	2d042 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2d040:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2d042:	232f      	movs	r3, #47	; 0x2f
   2d044:	18fb      	adds	r3, r7, r3
   2d046:	781b      	ldrb	r3, [r3, #0]
   2d048:	2b00      	cmp	r3, #0
   2d04a:	d163      	bne.n	2d114 <dir_register+0x2c8>
   2d04c:	232a      	movs	r3, #42	; 0x2a
   2d04e:	18fb      	adds	r3, r7, r3
   2d050:	881b      	ldrh	r3, [r3, #0]
   2d052:	2b01      	cmp	r3, #1
   2d054:	d95e      	bls.n	2d114 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2d056:	232f      	movs	r3, #47	; 0x2f
   2d058:	18fc      	adds	r4, r7, r3
   2d05a:	2328      	movs	r3, #40	; 0x28
   2d05c:	18fb      	adds	r3, r7, r3
   2d05e:	881a      	ldrh	r2, [r3, #0]
   2d060:	687b      	ldr	r3, [r7, #4]
   2d062:	0011      	movs	r1, r2
   2d064:	0018      	movs	r0, r3
   2d066:	4b4d      	ldr	r3, [pc, #308]	; (2d19c <dir_register+0x350>)
   2d068:	4798      	blx	r3
   2d06a:	0003      	movs	r3, r0
   2d06c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d06e:	232f      	movs	r3, #47	; 0x2f
   2d070:	18fb      	adds	r3, r7, r3
   2d072:	781b      	ldrb	r3, [r3, #0]
   2d074:	2b00      	cmp	r3, #0
   2d076:	d14d      	bne.n	2d114 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2d078:	687b      	ldr	r3, [r7, #4]
   2d07a:	699b      	ldr	r3, [r3, #24]
   2d07c:	221e      	movs	r2, #30
   2d07e:	18bc      	adds	r4, r7, r2
   2d080:	0018      	movs	r0, r3
   2d082:	4b49      	ldr	r3, [pc, #292]	; (2d1a8 <dir_register+0x35c>)
   2d084:	4798      	blx	r3
   2d086:	0003      	movs	r3, r0
   2d088:	7023      	strb	r3, [r4, #0]
			ne--;
   2d08a:	232a      	movs	r3, #42	; 0x2a
   2d08c:	18fb      	adds	r3, r7, r3
   2d08e:	881a      	ldrh	r2, [r3, #0]
   2d090:	232a      	movs	r3, #42	; 0x2a
   2d092:	18fb      	adds	r3, r7, r3
   2d094:	3a01      	subs	r2, #1
   2d096:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2d098:	687b      	ldr	r3, [r7, #4]
   2d09a:	681a      	ldr	r2, [r3, #0]
   2d09c:	687b      	ldr	r3, [r7, #4]
   2d09e:	691b      	ldr	r3, [r3, #16]
   2d0a0:	212f      	movs	r1, #47	; 0x2f
   2d0a2:	187c      	adds	r4, r7, r1
   2d0a4:	0019      	movs	r1, r3
   2d0a6:	0010      	movs	r0, r2
   2d0a8:	4b3d      	ldr	r3, [pc, #244]	; (2d1a0 <dir_register+0x354>)
   2d0aa:	4798      	blx	r3
   2d0ac:	0003      	movs	r3, r0
   2d0ae:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2d0b0:	232f      	movs	r3, #47	; 0x2f
   2d0b2:	18fb      	adds	r3, r7, r3
   2d0b4:	781b      	ldrb	r3, [r3, #0]
   2d0b6:	2b00      	cmp	r3, #0
   2d0b8:	d12b      	bne.n	2d112 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2d0ba:	687b      	ldr	r3, [r7, #4]
   2d0bc:	69d8      	ldr	r0, [r3, #28]
   2d0be:	687b      	ldr	r3, [r7, #4]
   2d0c0:	6959      	ldr	r1, [r3, #20]
   2d0c2:	232a      	movs	r3, #42	; 0x2a
   2d0c4:	18fb      	adds	r3, r7, r3
   2d0c6:	881b      	ldrh	r3, [r3, #0]
   2d0c8:	b2da      	uxtb	r2, r3
   2d0ca:	231e      	movs	r3, #30
   2d0cc:	18fb      	adds	r3, r7, r3
   2d0ce:	781b      	ldrb	r3, [r3, #0]
   2d0d0:	4c36      	ldr	r4, [pc, #216]	; (2d1ac <dir_register+0x360>)
   2d0d2:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2d0d4:	687b      	ldr	r3, [r7, #4]
   2d0d6:	681b      	ldr	r3, [r3, #0]
   2d0d8:	2201      	movs	r2, #1
   2d0da:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2d0dc:	232f      	movs	r3, #47	; 0x2f
   2d0de:	18fc      	adds	r4, r7, r3
   2d0e0:	687b      	ldr	r3, [r7, #4]
   2d0e2:	2100      	movs	r1, #0
   2d0e4:	0018      	movs	r0, r3
   2d0e6:	4b2f      	ldr	r3, [pc, #188]	; (2d1a4 <dir_register+0x358>)
   2d0e8:	4798      	blx	r3
   2d0ea:	0003      	movs	r3, r0
   2d0ec:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2d0ee:	232f      	movs	r3, #47	; 0x2f
   2d0f0:	18fb      	adds	r3, r7, r3
   2d0f2:	781b      	ldrb	r3, [r3, #0]
   2d0f4:	2b00      	cmp	r3, #0
   2d0f6:	d10d      	bne.n	2d114 <dir_register+0x2c8>
   2d0f8:	232a      	movs	r3, #42	; 0x2a
   2d0fa:	18fb      	adds	r3, r7, r3
   2d0fc:	222a      	movs	r2, #42	; 0x2a
   2d0fe:	18ba      	adds	r2, r7, r2
   2d100:	8812      	ldrh	r2, [r2, #0]
   2d102:	3a01      	subs	r2, #1
   2d104:	801a      	strh	r2, [r3, #0]
   2d106:	232a      	movs	r3, #42	; 0x2a
   2d108:	18fb      	adds	r3, r7, r3
   2d10a:	881b      	ldrh	r3, [r3, #0]
   2d10c:	2b00      	cmp	r3, #0
   2d10e:	d1c3      	bne.n	2d098 <dir_register+0x24c>
   2d110:	e000      	b.n	2d114 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2d112:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2d114:	232f      	movs	r3, #47	; 0x2f
   2d116:	18fb      	adds	r3, r7, r3
   2d118:	781b      	ldrb	r3, [r3, #0]
   2d11a:	2b00      	cmp	r3, #0
   2d11c:	d12f      	bne.n	2d17e <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2d11e:	687b      	ldr	r3, [r7, #4]
   2d120:	681a      	ldr	r2, [r3, #0]
   2d122:	687b      	ldr	r3, [r7, #4]
   2d124:	691b      	ldr	r3, [r3, #16]
   2d126:	212f      	movs	r1, #47	; 0x2f
   2d128:	187c      	adds	r4, r7, r1
   2d12a:	0019      	movs	r1, r3
   2d12c:	0010      	movs	r0, r2
   2d12e:	4b1c      	ldr	r3, [pc, #112]	; (2d1a0 <dir_register+0x354>)
   2d130:	4798      	blx	r3
   2d132:	0003      	movs	r3, r0
   2d134:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d136:	232f      	movs	r3, #47	; 0x2f
   2d138:	18fb      	adds	r3, r7, r3
   2d13a:	781b      	ldrb	r3, [r3, #0]
   2d13c:	2b00      	cmp	r3, #0
   2d13e:	d11e      	bne.n	2d17e <dir_register+0x332>
			dir = dj->dir;
   2d140:	687b      	ldr	r3, [r7, #4]
   2d142:	695b      	ldr	r3, [r3, #20]
   2d144:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2d146:	69bb      	ldr	r3, [r7, #24]
   2d148:	2220      	movs	r2, #32
   2d14a:	2100      	movs	r1, #0
   2d14c:	0018      	movs	r0, r3
   2d14e:	4b18      	ldr	r3, [pc, #96]	; (2d1b0 <dir_register+0x364>)
   2d150:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2d152:	687b      	ldr	r3, [r7, #4]
   2d154:	6999      	ldr	r1, [r3, #24]
   2d156:	69bb      	ldr	r3, [r7, #24]
   2d158:	220b      	movs	r2, #11
   2d15a:	0018      	movs	r0, r3
   2d15c:	4b0b      	ldr	r3, [pc, #44]	; (2d18c <dir_register+0x340>)
   2d15e:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2d160:	69bb      	ldr	r3, [r7, #24]
   2d162:	330c      	adds	r3, #12
   2d164:	001a      	movs	r2, r3
   2d166:	687b      	ldr	r3, [r7, #4]
   2d168:	699b      	ldr	r3, [r3, #24]
   2d16a:	330b      	adds	r3, #11
   2d16c:	781b      	ldrb	r3, [r3, #0]
   2d16e:	2118      	movs	r1, #24
   2d170:	400b      	ands	r3, r1
   2d172:	b2db      	uxtb	r3, r3
   2d174:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2d176:	687b      	ldr	r3, [r7, #4]
   2d178:	681b      	ldr	r3, [r3, #0]
   2d17a:	2201      	movs	r2, #1
   2d17c:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2d17e:	232f      	movs	r3, #47	; 0x2f
   2d180:	18fb      	adds	r3, r7, r3
   2d182:	781b      	ldrb	r3, [r3, #0]
}
   2d184:	0018      	movs	r0, r3
   2d186:	46bd      	mov	sp, r7
   2d188:	b00d      	add	sp, #52	; 0x34
   2d18a:	bd90      	pop	{r4, r7, pc}
   2d18c:	0002bca5 	.word	0x0002bca5
   2d190:	0002cb01 	.word	0x0002cb01
   2d194:	0002cc51 	.word	0x0002cc51
   2d198:	0003309d 	.word	0x0003309d
   2d19c:	0002c5cd 	.word	0x0002c5cd
   2d1a0:	0002bd89 	.word	0x0002bd89
   2d1a4:	0002c6fd 	.word	0x0002c6fd
   2d1a8:	0002cc01 	.word	0x0002cc01
   2d1ac:	0002c9f1 	.word	0x0002c9f1
   2d1b0:	0002bcdd 	.word	0x0002bcdd

0002d1b4 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2d1b4:	b590      	push	{r4, r7, lr}
   2d1b6:	b08b      	sub	sp, #44	; 0x2c
   2d1b8:	af00      	add	r7, sp, #0
   2d1ba:	6078      	str	r0, [r7, #4]
   2d1bc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2d1be:	683b      	ldr	r3, [r7, #0]
   2d1c0:	681b      	ldr	r3, [r3, #0]
   2d1c2:	613b      	str	r3, [r7, #16]
   2d1c4:	e002      	b.n	2d1cc <create_name+0x18>
   2d1c6:	693b      	ldr	r3, [r7, #16]
   2d1c8:	3301      	adds	r3, #1
   2d1ca:	613b      	str	r3, [r7, #16]
   2d1cc:	693b      	ldr	r3, [r7, #16]
   2d1ce:	781b      	ldrb	r3, [r3, #0]
   2d1d0:	2b2f      	cmp	r3, #47	; 0x2f
   2d1d2:	d0f8      	beq.n	2d1c6 <create_name+0x12>
   2d1d4:	693b      	ldr	r3, [r7, #16]
   2d1d6:	781b      	ldrb	r3, [r3, #0]
   2d1d8:	2b5c      	cmp	r3, #92	; 0x5c
   2d1da:	d0f4      	beq.n	2d1c6 <create_name+0x12>
	lfn = dj->lfn;
   2d1dc:	687b      	ldr	r3, [r7, #4]
   2d1de:	69db      	ldr	r3, [r3, #28]
   2d1e0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2d1e2:	2300      	movs	r3, #0
   2d1e4:	617b      	str	r3, [r7, #20]
   2d1e6:	697b      	ldr	r3, [r7, #20]
   2d1e8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2d1ea:	69bb      	ldr	r3, [r7, #24]
   2d1ec:	1c5a      	adds	r2, r3, #1
   2d1ee:	61ba      	str	r2, [r7, #24]
   2d1f0:	693a      	ldr	r2, [r7, #16]
   2d1f2:	18d3      	adds	r3, r2, r3
   2d1f4:	781a      	ldrb	r2, [r3, #0]
   2d1f6:	2324      	movs	r3, #36	; 0x24
   2d1f8:	18fb      	adds	r3, r7, r3
   2d1fa:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2d1fc:	2324      	movs	r3, #36	; 0x24
   2d1fe:	18fb      	adds	r3, r7, r3
   2d200:	881b      	ldrh	r3, [r3, #0]
   2d202:	2b1f      	cmp	r3, #31
   2d204:	d944      	bls.n	2d290 <create_name+0xdc>
   2d206:	2324      	movs	r3, #36	; 0x24
   2d208:	18fb      	adds	r3, r7, r3
   2d20a:	881b      	ldrh	r3, [r3, #0]
   2d20c:	2b2f      	cmp	r3, #47	; 0x2f
   2d20e:	d03f      	beq.n	2d290 <create_name+0xdc>
   2d210:	2324      	movs	r3, #36	; 0x24
   2d212:	18fb      	adds	r3, r7, r3
   2d214:	881b      	ldrh	r3, [r3, #0]
   2d216:	2b5c      	cmp	r3, #92	; 0x5c
   2d218:	d03a      	beq.n	2d290 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2d21a:	697b      	ldr	r3, [r7, #20]
   2d21c:	2bfe      	cmp	r3, #254	; 0xfe
   2d21e:	d901      	bls.n	2d224 <create_name+0x70>
			return FR_INVALID_NAME;
   2d220:	2306      	movs	r3, #6
   2d222:	e1e7      	b.n	2d5f4 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2d224:	2324      	movs	r3, #36	; 0x24
   2d226:	18fb      	adds	r3, r7, r3
   2d228:	2224      	movs	r2, #36	; 0x24
   2d22a:	18ba      	adds	r2, r7, r2
   2d22c:	8812      	ldrh	r2, [r2, #0]
   2d22e:	21ff      	movs	r1, #255	; 0xff
   2d230:	400a      	ands	r2, r1
   2d232:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2d234:	2324      	movs	r3, #36	; 0x24
   2d236:	18fc      	adds	r4, r7, r3
   2d238:	2324      	movs	r3, #36	; 0x24
   2d23a:	18fb      	adds	r3, r7, r3
   2d23c:	881b      	ldrh	r3, [r3, #0]
   2d23e:	2101      	movs	r1, #1
   2d240:	0018      	movs	r0, r3
   2d242:	4bba      	ldr	r3, [pc, #744]	; (2d52c <create_name+0x378>)
   2d244:	4798      	blx	r3
   2d246:	0003      	movs	r3, r0
   2d248:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2d24a:	2324      	movs	r3, #36	; 0x24
   2d24c:	18fb      	adds	r3, r7, r3
   2d24e:	881b      	ldrh	r3, [r3, #0]
   2d250:	2b00      	cmp	r3, #0
   2d252:	d101      	bne.n	2d258 <create_name+0xa4>
   2d254:	2306      	movs	r3, #6
   2d256:	e1cd      	b.n	2d5f4 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2d258:	2324      	movs	r3, #36	; 0x24
   2d25a:	18fb      	adds	r3, r7, r3
   2d25c:	881b      	ldrh	r3, [r3, #0]
   2d25e:	2b7f      	cmp	r3, #127	; 0x7f
   2d260:	d80b      	bhi.n	2d27a <create_name+0xc6>
   2d262:	2324      	movs	r3, #36	; 0x24
   2d264:	18fb      	adds	r3, r7, r3
   2d266:	881a      	ldrh	r2, [r3, #0]
   2d268:	4bb1      	ldr	r3, [pc, #708]	; (2d530 <create_name+0x37c>)
   2d26a:	0011      	movs	r1, r2
   2d26c:	0018      	movs	r0, r3
   2d26e:	4bb1      	ldr	r3, [pc, #708]	; (2d534 <create_name+0x380>)
   2d270:	4798      	blx	r3
   2d272:	1e03      	subs	r3, r0, #0
   2d274:	d001      	beq.n	2d27a <create_name+0xc6>
			return FR_INVALID_NAME;
   2d276:	2306      	movs	r3, #6
   2d278:	e1bc      	b.n	2d5f4 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2d27a:	697b      	ldr	r3, [r7, #20]
   2d27c:	1c5a      	adds	r2, r3, #1
   2d27e:	617a      	str	r2, [r7, #20]
   2d280:	005b      	lsls	r3, r3, #1
   2d282:	68fa      	ldr	r2, [r7, #12]
   2d284:	18d3      	adds	r3, r2, r3
   2d286:	2224      	movs	r2, #36	; 0x24
   2d288:	18ba      	adds	r2, r7, r2
   2d28a:	8812      	ldrh	r2, [r2, #0]
   2d28c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2d28e:	e7ac      	b.n	2d1ea <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2d290:	693a      	ldr	r2, [r7, #16]
   2d292:	69bb      	ldr	r3, [r7, #24]
   2d294:	18d2      	adds	r2, r2, r3
   2d296:	683b      	ldr	r3, [r7, #0]
   2d298:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2d29a:	2324      	movs	r3, #36	; 0x24
   2d29c:	18fb      	adds	r3, r7, r3
   2d29e:	881b      	ldrh	r3, [r3, #0]
   2d2a0:	2b1f      	cmp	r3, #31
   2d2a2:	d801      	bhi.n	2d2a8 <create_name+0xf4>
   2d2a4:	2204      	movs	r2, #4
   2d2a6:	e000      	b.n	2d2aa <create_name+0xf6>
   2d2a8:	2200      	movs	r2, #0
   2d2aa:	2326      	movs	r3, #38	; 0x26
   2d2ac:	18fb      	adds	r3, r7, r3
   2d2ae:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2d2b0:	e017      	b.n	2d2e2 <create_name+0x12e>
		w = lfn[di-1];
   2d2b2:	697b      	ldr	r3, [r7, #20]
   2d2b4:	4aa0      	ldr	r2, [pc, #640]	; (2d538 <create_name+0x384>)
   2d2b6:	4694      	mov	ip, r2
   2d2b8:	4463      	add	r3, ip
   2d2ba:	005b      	lsls	r3, r3, #1
   2d2bc:	68fa      	ldr	r2, [r7, #12]
   2d2be:	18d2      	adds	r2, r2, r3
   2d2c0:	2324      	movs	r3, #36	; 0x24
   2d2c2:	18fb      	adds	r3, r7, r3
   2d2c4:	8812      	ldrh	r2, [r2, #0]
   2d2c6:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2d2c8:	2324      	movs	r3, #36	; 0x24
   2d2ca:	18fb      	adds	r3, r7, r3
   2d2cc:	881b      	ldrh	r3, [r3, #0]
   2d2ce:	2b20      	cmp	r3, #32
   2d2d0:	d004      	beq.n	2d2dc <create_name+0x128>
   2d2d2:	2324      	movs	r3, #36	; 0x24
   2d2d4:	18fb      	adds	r3, r7, r3
   2d2d6:	881b      	ldrh	r3, [r3, #0]
   2d2d8:	2b2e      	cmp	r3, #46	; 0x2e
   2d2da:	d106      	bne.n	2d2ea <create_name+0x136>
		di--;
   2d2dc:	697b      	ldr	r3, [r7, #20]
   2d2de:	3b01      	subs	r3, #1
   2d2e0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2d2e2:	697b      	ldr	r3, [r7, #20]
   2d2e4:	2b00      	cmp	r3, #0
   2d2e6:	d1e4      	bne.n	2d2b2 <create_name+0xfe>
   2d2e8:	e000      	b.n	2d2ec <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2d2ea:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2d2ec:	697b      	ldr	r3, [r7, #20]
   2d2ee:	2b00      	cmp	r3, #0
   2d2f0:	d101      	bne.n	2d2f6 <create_name+0x142>
   2d2f2:	2306      	movs	r3, #6
   2d2f4:	e17e      	b.n	2d5f4 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2d2f6:	697b      	ldr	r3, [r7, #20]
   2d2f8:	005b      	lsls	r3, r3, #1
   2d2fa:	68fa      	ldr	r2, [r7, #12]
   2d2fc:	18d3      	adds	r3, r2, r3
   2d2fe:	2200      	movs	r2, #0
   2d300:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2d302:	687b      	ldr	r3, [r7, #4]
   2d304:	699b      	ldr	r3, [r3, #24]
   2d306:	220b      	movs	r2, #11
   2d308:	2120      	movs	r1, #32
   2d30a:	0018      	movs	r0, r3
   2d30c:	4b8b      	ldr	r3, [pc, #556]	; (2d53c <create_name+0x388>)
   2d30e:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2d310:	2300      	movs	r3, #0
   2d312:	61bb      	str	r3, [r7, #24]
   2d314:	e002      	b.n	2d31c <create_name+0x168>
   2d316:	69bb      	ldr	r3, [r7, #24]
   2d318:	3301      	adds	r3, #1
   2d31a:	61bb      	str	r3, [r7, #24]
   2d31c:	69bb      	ldr	r3, [r7, #24]
   2d31e:	005b      	lsls	r3, r3, #1
   2d320:	68fa      	ldr	r2, [r7, #12]
   2d322:	18d3      	adds	r3, r2, r3
   2d324:	881b      	ldrh	r3, [r3, #0]
   2d326:	2b20      	cmp	r3, #32
   2d328:	d0f5      	beq.n	2d316 <create_name+0x162>
   2d32a:	69bb      	ldr	r3, [r7, #24]
   2d32c:	005b      	lsls	r3, r3, #1
   2d32e:	68fa      	ldr	r2, [r7, #12]
   2d330:	18d3      	adds	r3, r2, r3
   2d332:	881b      	ldrh	r3, [r3, #0]
   2d334:	2b2e      	cmp	r3, #46	; 0x2e
   2d336:	d0ee      	beq.n	2d316 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2d338:	69bb      	ldr	r3, [r7, #24]
   2d33a:	2b00      	cmp	r3, #0
   2d33c:	d00b      	beq.n	2d356 <create_name+0x1a2>
   2d33e:	2326      	movs	r3, #38	; 0x26
   2d340:	18fb      	adds	r3, r7, r3
   2d342:	2226      	movs	r2, #38	; 0x26
   2d344:	18ba      	adds	r2, r7, r2
   2d346:	7812      	ldrb	r2, [r2, #0]
   2d348:	2103      	movs	r1, #3
   2d34a:	430a      	orrs	r2, r1
   2d34c:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2d34e:	e002      	b.n	2d356 <create_name+0x1a2>
   2d350:	697b      	ldr	r3, [r7, #20]
   2d352:	3b01      	subs	r3, #1
   2d354:	617b      	str	r3, [r7, #20]
   2d356:	697b      	ldr	r3, [r7, #20]
   2d358:	2b00      	cmp	r3, #0
   2d35a:	d009      	beq.n	2d370 <create_name+0x1bc>
   2d35c:	697b      	ldr	r3, [r7, #20]
   2d35e:	4a76      	ldr	r2, [pc, #472]	; (2d538 <create_name+0x384>)
   2d360:	4694      	mov	ip, r2
   2d362:	4463      	add	r3, ip
   2d364:	005b      	lsls	r3, r3, #1
   2d366:	68fa      	ldr	r2, [r7, #12]
   2d368:	18d3      	adds	r3, r2, r3
   2d36a:	881b      	ldrh	r3, [r3, #0]
   2d36c:	2b2e      	cmp	r3, #46	; 0x2e
   2d36e:	d1ef      	bne.n	2d350 <create_name+0x19c>

	b = i = 0; ni = 8;
   2d370:	2300      	movs	r3, #0
   2d372:	623b      	str	r3, [r7, #32]
   2d374:	2327      	movs	r3, #39	; 0x27
   2d376:	18fb      	adds	r3, r7, r3
   2d378:	2200      	movs	r2, #0
   2d37a:	701a      	strb	r2, [r3, #0]
   2d37c:	2308      	movs	r3, #8
   2d37e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2d380:	69bb      	ldr	r3, [r7, #24]
   2d382:	1c5a      	adds	r2, r3, #1
   2d384:	61ba      	str	r2, [r7, #24]
   2d386:	005b      	lsls	r3, r3, #1
   2d388:	68fa      	ldr	r2, [r7, #12]
   2d38a:	18d2      	adds	r2, r2, r3
   2d38c:	2324      	movs	r3, #36	; 0x24
   2d38e:	18fb      	adds	r3, r7, r3
   2d390:	8812      	ldrh	r2, [r2, #0]
   2d392:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2d394:	2324      	movs	r3, #36	; 0x24
   2d396:	18fb      	adds	r3, r7, r3
   2d398:	881b      	ldrh	r3, [r3, #0]
   2d39a:	2b00      	cmp	r3, #0
   2d39c:	d100      	bne.n	2d3a0 <create_name+0x1ec>
   2d39e:	e0c3      	b.n	2d528 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2d3a0:	2324      	movs	r3, #36	; 0x24
   2d3a2:	18fb      	adds	r3, r7, r3
   2d3a4:	881b      	ldrh	r3, [r3, #0]
   2d3a6:	2b20      	cmp	r3, #32
   2d3a8:	d008      	beq.n	2d3bc <create_name+0x208>
   2d3aa:	2324      	movs	r3, #36	; 0x24
   2d3ac:	18fb      	adds	r3, r7, r3
   2d3ae:	881b      	ldrh	r3, [r3, #0]
   2d3b0:	2b2e      	cmp	r3, #46	; 0x2e
   2d3b2:	d10c      	bne.n	2d3ce <create_name+0x21a>
   2d3b4:	69ba      	ldr	r2, [r7, #24]
   2d3b6:	697b      	ldr	r3, [r7, #20]
   2d3b8:	429a      	cmp	r2, r3
   2d3ba:	d008      	beq.n	2d3ce <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2d3bc:	2326      	movs	r3, #38	; 0x26
   2d3be:	18fb      	adds	r3, r7, r3
   2d3c0:	2226      	movs	r2, #38	; 0x26
   2d3c2:	18ba      	adds	r2, r7, r2
   2d3c4:	7812      	ldrb	r2, [r2, #0]
   2d3c6:	2103      	movs	r1, #3
   2d3c8:	430a      	orrs	r2, r1
   2d3ca:	701a      	strb	r2, [r3, #0]
   2d3cc:	e0ab      	b.n	2d526 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2d3ce:	6a3a      	ldr	r2, [r7, #32]
   2d3d0:	69fb      	ldr	r3, [r7, #28]
   2d3d2:	429a      	cmp	r2, r3
   2d3d4:	d203      	bcs.n	2d3de <create_name+0x22a>
   2d3d6:	69ba      	ldr	r2, [r7, #24]
   2d3d8:	697b      	ldr	r3, [r7, #20]
   2d3da:	429a      	cmp	r2, r3
   2d3dc:	d12a      	bne.n	2d434 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2d3de:	69fb      	ldr	r3, [r7, #28]
   2d3e0:	2b0b      	cmp	r3, #11
   2d3e2:	d108      	bne.n	2d3f6 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2d3e4:	2326      	movs	r3, #38	; 0x26
   2d3e6:	18fb      	adds	r3, r7, r3
   2d3e8:	2226      	movs	r2, #38	; 0x26
   2d3ea:	18ba      	adds	r2, r7, r2
   2d3ec:	7812      	ldrb	r2, [r2, #0]
   2d3ee:	2103      	movs	r1, #3
   2d3f0:	430a      	orrs	r2, r1
   2d3f2:	701a      	strb	r2, [r3, #0]
   2d3f4:	e0a9      	b.n	2d54a <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2d3f6:	69ba      	ldr	r2, [r7, #24]
   2d3f8:	697b      	ldr	r3, [r7, #20]
   2d3fa:	429a      	cmp	r2, r3
   2d3fc:	d007      	beq.n	2d40e <create_name+0x25a>
   2d3fe:	2326      	movs	r3, #38	; 0x26
   2d400:	18fb      	adds	r3, r7, r3
   2d402:	2226      	movs	r2, #38	; 0x26
   2d404:	18ba      	adds	r2, r7, r2
   2d406:	7812      	ldrb	r2, [r2, #0]
   2d408:	2103      	movs	r1, #3
   2d40a:	430a      	orrs	r2, r1
   2d40c:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2d40e:	69ba      	ldr	r2, [r7, #24]
   2d410:	697b      	ldr	r3, [r7, #20]
   2d412:	429a      	cmp	r2, r3
   2d414:	d900      	bls.n	2d418 <create_name+0x264>
   2d416:	e097      	b.n	2d548 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2d418:	697b      	ldr	r3, [r7, #20]
   2d41a:	61bb      	str	r3, [r7, #24]
   2d41c:	2308      	movs	r3, #8
   2d41e:	623b      	str	r3, [r7, #32]
   2d420:	230b      	movs	r3, #11
   2d422:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2d424:	2327      	movs	r3, #39	; 0x27
   2d426:	18fb      	adds	r3, r7, r3
   2d428:	2227      	movs	r2, #39	; 0x27
   2d42a:	18ba      	adds	r2, r7, r2
   2d42c:	7812      	ldrb	r2, [r2, #0]
   2d42e:	0092      	lsls	r2, r2, #2
   2d430:	701a      	strb	r2, [r3, #0]
   2d432:	e078      	b.n	2d526 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2d434:	2324      	movs	r3, #36	; 0x24
   2d436:	18fb      	adds	r3, r7, r3
   2d438:	881b      	ldrh	r3, [r3, #0]
   2d43a:	2b7f      	cmp	r3, #127	; 0x7f
   2d43c:	d920      	bls.n	2d480 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2d43e:	2324      	movs	r3, #36	; 0x24
   2d440:	18fc      	adds	r4, r7, r3
   2d442:	2324      	movs	r3, #36	; 0x24
   2d444:	18fb      	adds	r3, r7, r3
   2d446:	881b      	ldrh	r3, [r3, #0]
   2d448:	2100      	movs	r1, #0
   2d44a:	0018      	movs	r0, r3
   2d44c:	4b37      	ldr	r3, [pc, #220]	; (2d52c <create_name+0x378>)
   2d44e:	4798      	blx	r3
   2d450:	0003      	movs	r3, r0
   2d452:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2d454:	2324      	movs	r3, #36	; 0x24
   2d456:	18fb      	adds	r3, r7, r3
   2d458:	881b      	ldrh	r3, [r3, #0]
   2d45a:	2b00      	cmp	r3, #0
   2d45c:	d008      	beq.n	2d470 <create_name+0x2bc>
   2d45e:	2324      	movs	r3, #36	; 0x24
   2d460:	18fb      	adds	r3, r7, r3
   2d462:	881b      	ldrh	r3, [r3, #0]
   2d464:	3b80      	subs	r3, #128	; 0x80
   2d466:	4a36      	ldr	r2, [pc, #216]	; (2d540 <create_name+0x38c>)
   2d468:	5cd2      	ldrb	r2, [r2, r3]
   2d46a:	2324      	movs	r3, #36	; 0x24
   2d46c:	18fb      	adds	r3, r7, r3
   2d46e:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2d470:	2326      	movs	r3, #38	; 0x26
   2d472:	18fb      	adds	r3, r7, r3
   2d474:	2226      	movs	r2, #38	; 0x26
   2d476:	18ba      	adds	r2, r7, r2
   2d478:	7812      	ldrb	r2, [r2, #0]
   2d47a:	2102      	movs	r1, #2
   2d47c:	430a      	orrs	r2, r1
   2d47e:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2d480:	2324      	movs	r3, #36	; 0x24
   2d482:	18fb      	adds	r3, r7, r3
   2d484:	881b      	ldrh	r3, [r3, #0]
   2d486:	2b00      	cmp	r3, #0
   2d488:	d009      	beq.n	2d49e <create_name+0x2ea>
   2d48a:	2324      	movs	r3, #36	; 0x24
   2d48c:	18fb      	adds	r3, r7, r3
   2d48e:	881a      	ldrh	r2, [r3, #0]
   2d490:	4b2c      	ldr	r3, [pc, #176]	; (2d544 <create_name+0x390>)
   2d492:	0011      	movs	r1, r2
   2d494:	0018      	movs	r0, r3
   2d496:	4b27      	ldr	r3, [pc, #156]	; (2d534 <create_name+0x380>)
   2d498:	4798      	blx	r3
   2d49a:	1e03      	subs	r3, r0, #0
   2d49c:	d00c      	beq.n	2d4b8 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2d49e:	2324      	movs	r3, #36	; 0x24
   2d4a0:	18fb      	adds	r3, r7, r3
   2d4a2:	225f      	movs	r2, #95	; 0x5f
   2d4a4:	801a      	strh	r2, [r3, #0]
   2d4a6:	2326      	movs	r3, #38	; 0x26
   2d4a8:	18fb      	adds	r3, r7, r3
   2d4aa:	2226      	movs	r2, #38	; 0x26
   2d4ac:	18ba      	adds	r2, r7, r2
   2d4ae:	7812      	ldrb	r2, [r2, #0]
   2d4b0:	2103      	movs	r1, #3
   2d4b2:	430a      	orrs	r2, r1
   2d4b4:	701a      	strb	r2, [r3, #0]
   2d4b6:	e02b      	b.n	2d510 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2d4b8:	2324      	movs	r3, #36	; 0x24
   2d4ba:	18fb      	adds	r3, r7, r3
   2d4bc:	881b      	ldrh	r3, [r3, #0]
   2d4be:	2b40      	cmp	r3, #64	; 0x40
   2d4c0:	d90d      	bls.n	2d4de <create_name+0x32a>
   2d4c2:	2324      	movs	r3, #36	; 0x24
   2d4c4:	18fb      	adds	r3, r7, r3
   2d4c6:	881b      	ldrh	r3, [r3, #0]
   2d4c8:	2b5a      	cmp	r3, #90	; 0x5a
   2d4ca:	d808      	bhi.n	2d4de <create_name+0x32a>
					b |= 2;
   2d4cc:	2327      	movs	r3, #39	; 0x27
   2d4ce:	18fb      	adds	r3, r7, r3
   2d4d0:	2227      	movs	r2, #39	; 0x27
   2d4d2:	18ba      	adds	r2, r7, r2
   2d4d4:	7812      	ldrb	r2, [r2, #0]
   2d4d6:	2102      	movs	r1, #2
   2d4d8:	430a      	orrs	r2, r1
   2d4da:	701a      	strb	r2, [r3, #0]
   2d4dc:	e018      	b.n	2d510 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2d4de:	2324      	movs	r3, #36	; 0x24
   2d4e0:	18fb      	adds	r3, r7, r3
   2d4e2:	881b      	ldrh	r3, [r3, #0]
   2d4e4:	2b60      	cmp	r3, #96	; 0x60
   2d4e6:	d913      	bls.n	2d510 <create_name+0x35c>
   2d4e8:	2324      	movs	r3, #36	; 0x24
   2d4ea:	18fb      	adds	r3, r7, r3
   2d4ec:	881b      	ldrh	r3, [r3, #0]
   2d4ee:	2b7a      	cmp	r3, #122	; 0x7a
   2d4f0:	d80e      	bhi.n	2d510 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2d4f2:	2327      	movs	r3, #39	; 0x27
   2d4f4:	18fb      	adds	r3, r7, r3
   2d4f6:	2227      	movs	r2, #39	; 0x27
   2d4f8:	18ba      	adds	r2, r7, r2
   2d4fa:	7812      	ldrb	r2, [r2, #0]
   2d4fc:	2101      	movs	r1, #1
   2d4fe:	430a      	orrs	r2, r1
   2d500:	701a      	strb	r2, [r3, #0]
   2d502:	2324      	movs	r3, #36	; 0x24
   2d504:	18fb      	adds	r3, r7, r3
   2d506:	2224      	movs	r2, #36	; 0x24
   2d508:	18ba      	adds	r2, r7, r2
   2d50a:	8812      	ldrh	r2, [r2, #0]
   2d50c:	3a20      	subs	r2, #32
   2d50e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2d510:	687b      	ldr	r3, [r7, #4]
   2d512:	699a      	ldr	r2, [r3, #24]
   2d514:	6a3b      	ldr	r3, [r7, #32]
   2d516:	1c59      	adds	r1, r3, #1
   2d518:	6239      	str	r1, [r7, #32]
   2d51a:	18d3      	adds	r3, r2, r3
   2d51c:	2224      	movs	r2, #36	; 0x24
   2d51e:	18ba      	adds	r2, r7, r2
   2d520:	8812      	ldrh	r2, [r2, #0]
   2d522:	b2d2      	uxtb	r2, r2
   2d524:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2d526:	e72b      	b.n	2d380 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2d528:	46c0      	nop			; (mov r8, r8)
   2d52a:	e00e      	b.n	2d54a <create_name+0x396>
   2d52c:	0002e8ed 	.word	0x0002e8ed
   2d530:	00039e28 	.word	0x00039e28
   2d534:	0002bd57 	.word	0x0002bd57
   2d538:	7fffffff 	.word	0x7fffffff
   2d53c:	0002bcdd 	.word	0x0002bcdd
   2d540:	00039e70 	.word	0x00039e70
   2d544:	00039e34 	.word	0x00039e34
			if (si > di) break;			/* No extension */
   2d548:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2d54a:	687b      	ldr	r3, [r7, #4]
   2d54c:	699b      	ldr	r3, [r3, #24]
   2d54e:	781b      	ldrb	r3, [r3, #0]
   2d550:	2be5      	cmp	r3, #229	; 0xe5
   2d552:	d103      	bne.n	2d55c <create_name+0x3a8>
   2d554:	687b      	ldr	r3, [r7, #4]
   2d556:	699b      	ldr	r3, [r3, #24]
   2d558:	2205      	movs	r2, #5
   2d55a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2d55c:	69fb      	ldr	r3, [r7, #28]
   2d55e:	2b08      	cmp	r3, #8
   2d560:	d106      	bne.n	2d570 <create_name+0x3bc>
   2d562:	2327      	movs	r3, #39	; 0x27
   2d564:	18fb      	adds	r3, r7, r3
   2d566:	2227      	movs	r2, #39	; 0x27
   2d568:	18ba      	adds	r2, r7, r2
   2d56a:	7812      	ldrb	r2, [r2, #0]
   2d56c:	0092      	lsls	r2, r2, #2
   2d56e:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2d570:	2327      	movs	r3, #39	; 0x27
   2d572:	18fb      	adds	r3, r7, r3
   2d574:	781b      	ldrb	r3, [r3, #0]
   2d576:	220c      	movs	r2, #12
   2d578:	4013      	ands	r3, r2
   2d57a:	2b0c      	cmp	r3, #12
   2d57c:	d006      	beq.n	2d58c <create_name+0x3d8>
   2d57e:	2327      	movs	r3, #39	; 0x27
   2d580:	18fb      	adds	r3, r7, r3
   2d582:	781b      	ldrb	r3, [r3, #0]
   2d584:	2203      	movs	r2, #3
   2d586:	4013      	ands	r3, r2
   2d588:	2b03      	cmp	r3, #3
   2d58a:	d107      	bne.n	2d59c <create_name+0x3e8>
		cf |= NS_LFN;
   2d58c:	2326      	movs	r3, #38	; 0x26
   2d58e:	18fb      	adds	r3, r7, r3
   2d590:	2226      	movs	r2, #38	; 0x26
   2d592:	18ba      	adds	r2, r7, r2
   2d594:	7812      	ldrb	r2, [r2, #0]
   2d596:	2102      	movs	r1, #2
   2d598:	430a      	orrs	r2, r1
   2d59a:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2d59c:	2326      	movs	r3, #38	; 0x26
   2d59e:	18fb      	adds	r3, r7, r3
   2d5a0:	781b      	ldrb	r3, [r3, #0]
   2d5a2:	2202      	movs	r2, #2
   2d5a4:	4013      	ands	r3, r2
   2d5a6:	d11d      	bne.n	2d5e4 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2d5a8:	2327      	movs	r3, #39	; 0x27
   2d5aa:	18fb      	adds	r3, r7, r3
   2d5ac:	781b      	ldrb	r3, [r3, #0]
   2d5ae:	2203      	movs	r2, #3
   2d5b0:	4013      	ands	r3, r2
   2d5b2:	2b01      	cmp	r3, #1
   2d5b4:	d107      	bne.n	2d5c6 <create_name+0x412>
   2d5b6:	2326      	movs	r3, #38	; 0x26
   2d5b8:	18fb      	adds	r3, r7, r3
   2d5ba:	2226      	movs	r2, #38	; 0x26
   2d5bc:	18ba      	adds	r2, r7, r2
   2d5be:	7812      	ldrb	r2, [r2, #0]
   2d5c0:	2110      	movs	r1, #16
   2d5c2:	430a      	orrs	r2, r1
   2d5c4:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2d5c6:	2327      	movs	r3, #39	; 0x27
   2d5c8:	18fb      	adds	r3, r7, r3
   2d5ca:	781b      	ldrb	r3, [r3, #0]
   2d5cc:	220c      	movs	r2, #12
   2d5ce:	4013      	ands	r3, r2
   2d5d0:	2b04      	cmp	r3, #4
   2d5d2:	d107      	bne.n	2d5e4 <create_name+0x430>
   2d5d4:	2326      	movs	r3, #38	; 0x26
   2d5d6:	18fb      	adds	r3, r7, r3
   2d5d8:	2226      	movs	r2, #38	; 0x26
   2d5da:	18ba      	adds	r2, r7, r2
   2d5dc:	7812      	ldrb	r2, [r2, #0]
   2d5de:	2108      	movs	r1, #8
   2d5e0:	430a      	orrs	r2, r1
   2d5e2:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2d5e4:	687b      	ldr	r3, [r7, #4]
   2d5e6:	699b      	ldr	r3, [r3, #24]
   2d5e8:	330b      	adds	r3, #11
   2d5ea:	2226      	movs	r2, #38	; 0x26
   2d5ec:	18ba      	adds	r2, r7, r2
   2d5ee:	7812      	ldrb	r2, [r2, #0]
   2d5f0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2d5f2:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2d5f4:	0018      	movs	r0, r3
   2d5f6:	46bd      	mov	sp, r7
   2d5f8:	b00b      	add	sp, #44	; 0x2c
   2d5fa:	bd90      	pop	{r4, r7, pc}

0002d5fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2d5fc:	b590      	push	{r4, r7, lr}
   2d5fe:	b085      	sub	sp, #20
   2d600:	af00      	add	r7, sp, #0
   2d602:	6078      	str	r0, [r7, #4]
   2d604:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2d606:	683b      	ldr	r3, [r7, #0]
   2d608:	781b      	ldrb	r3, [r3, #0]
   2d60a:	2b2f      	cmp	r3, #47	; 0x2f
   2d60c:	d003      	beq.n	2d616 <follow_path+0x1a>
   2d60e:	683b      	ldr	r3, [r7, #0]
   2d610:	781b      	ldrb	r3, [r3, #0]
   2d612:	2b5c      	cmp	r3, #92	; 0x5c
   2d614:	d102      	bne.n	2d61c <follow_path+0x20>
		path++;
   2d616:	683b      	ldr	r3, [r7, #0]
   2d618:	3301      	adds	r3, #1
   2d61a:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2d61c:	687b      	ldr	r3, [r7, #4]
   2d61e:	2200      	movs	r2, #0
   2d620:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2d622:	683b      	ldr	r3, [r7, #0]
   2d624:	781b      	ldrb	r3, [r3, #0]
   2d626:	2b1f      	cmp	r3, #31
   2d628:	d80c      	bhi.n	2d644 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2d62a:	230f      	movs	r3, #15
   2d62c:	18fc      	adds	r4, r7, r3
   2d62e:	687b      	ldr	r3, [r7, #4]
   2d630:	2100      	movs	r1, #0
   2d632:	0018      	movs	r0, r3
   2d634:	4b3c      	ldr	r3, [pc, #240]	; (2d728 <follow_path+0x12c>)
   2d636:	4798      	blx	r3
   2d638:	0003      	movs	r3, r0
   2d63a:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2d63c:	687b      	ldr	r3, [r7, #4]
   2d63e:	2200      	movs	r2, #0
   2d640:	615a      	str	r2, [r3, #20]
   2d642:	e06a      	b.n	2d71a <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2d644:	230f      	movs	r3, #15
   2d646:	18fc      	adds	r4, r7, r3
   2d648:	003a      	movs	r2, r7
   2d64a:	687b      	ldr	r3, [r7, #4]
   2d64c:	0011      	movs	r1, r2
   2d64e:	0018      	movs	r0, r3
   2d650:	4b36      	ldr	r3, [pc, #216]	; (2d72c <follow_path+0x130>)
   2d652:	4798      	blx	r3
   2d654:	0003      	movs	r3, r0
   2d656:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2d658:	230f      	movs	r3, #15
   2d65a:	18fb      	adds	r3, r7, r3
   2d65c:	781b      	ldrb	r3, [r3, #0]
   2d65e:	2b00      	cmp	r3, #0
   2d660:	d154      	bne.n	2d70c <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2d662:	230f      	movs	r3, #15
   2d664:	18fc      	adds	r4, r7, r3
   2d666:	687b      	ldr	r3, [r7, #4]
   2d668:	0018      	movs	r0, r3
   2d66a:	4b31      	ldr	r3, [pc, #196]	; (2d730 <follow_path+0x134>)
   2d66c:	4798      	blx	r3
   2d66e:	0003      	movs	r3, r0
   2d670:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2d672:	687b      	ldr	r3, [r7, #4]
   2d674:	699a      	ldr	r2, [r3, #24]
   2d676:	230e      	movs	r3, #14
   2d678:	18fb      	adds	r3, r7, r3
   2d67a:	7ad2      	ldrb	r2, [r2, #11]
   2d67c:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2d67e:	230f      	movs	r3, #15
   2d680:	18fb      	adds	r3, r7, r3
   2d682:	781b      	ldrb	r3, [r3, #0]
   2d684:	2b00      	cmp	r3, #0
   2d686:	d00f      	beq.n	2d6a8 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2d688:	230f      	movs	r3, #15
   2d68a:	18fb      	adds	r3, r7, r3
   2d68c:	781b      	ldrb	r3, [r3, #0]
   2d68e:	2b04      	cmp	r3, #4
   2d690:	d13e      	bne.n	2d710 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2d692:	230e      	movs	r3, #14
   2d694:	18fb      	adds	r3, r7, r3
   2d696:	781b      	ldrb	r3, [r3, #0]
   2d698:	2204      	movs	r2, #4
   2d69a:	4013      	ands	r3, r2
   2d69c:	d13a      	bne.n	2d714 <follow_path+0x118>
   2d69e:	230f      	movs	r3, #15
   2d6a0:	18fb      	adds	r3, r7, r3
   2d6a2:	2205      	movs	r2, #5
   2d6a4:	701a      	strb	r2, [r3, #0]
				}
				break;
   2d6a6:	e035      	b.n	2d714 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2d6a8:	230e      	movs	r3, #14
   2d6aa:	18fb      	adds	r3, r7, r3
   2d6ac:	781b      	ldrb	r3, [r3, #0]
   2d6ae:	2204      	movs	r2, #4
   2d6b0:	4013      	ands	r3, r2
   2d6b2:	d131      	bne.n	2d718 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2d6b4:	687b      	ldr	r3, [r7, #4]
   2d6b6:	695b      	ldr	r3, [r3, #20]
   2d6b8:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2d6ba:	68bb      	ldr	r3, [r7, #8]
   2d6bc:	330b      	adds	r3, #11
   2d6be:	781b      	ldrb	r3, [r3, #0]
   2d6c0:	001a      	movs	r2, r3
   2d6c2:	2310      	movs	r3, #16
   2d6c4:	4013      	ands	r3, r2
   2d6c6:	d104      	bne.n	2d6d2 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2d6c8:	230f      	movs	r3, #15
   2d6ca:	18fb      	adds	r3, r7, r3
   2d6cc:	2205      	movs	r2, #5
   2d6ce:	701a      	strb	r2, [r3, #0]
   2d6d0:	e023      	b.n	2d71a <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2d6d2:	68bb      	ldr	r3, [r7, #8]
   2d6d4:	3315      	adds	r3, #21
   2d6d6:	781b      	ldrb	r3, [r3, #0]
   2d6d8:	021b      	lsls	r3, r3, #8
   2d6da:	b21a      	sxth	r2, r3
   2d6dc:	68bb      	ldr	r3, [r7, #8]
   2d6de:	3314      	adds	r3, #20
   2d6e0:	781b      	ldrb	r3, [r3, #0]
   2d6e2:	b21b      	sxth	r3, r3
   2d6e4:	4313      	orrs	r3, r2
   2d6e6:	b21b      	sxth	r3, r3
   2d6e8:	b29b      	uxth	r3, r3
   2d6ea:	041b      	lsls	r3, r3, #16
   2d6ec:	68ba      	ldr	r2, [r7, #8]
   2d6ee:	321b      	adds	r2, #27
   2d6f0:	7812      	ldrb	r2, [r2, #0]
   2d6f2:	0212      	lsls	r2, r2, #8
   2d6f4:	b211      	sxth	r1, r2
   2d6f6:	68ba      	ldr	r2, [r7, #8]
   2d6f8:	321a      	adds	r2, #26
   2d6fa:	7812      	ldrb	r2, [r2, #0]
   2d6fc:	b212      	sxth	r2, r2
   2d6fe:	430a      	orrs	r2, r1
   2d700:	b212      	sxth	r2, r2
   2d702:	b292      	uxth	r2, r2
   2d704:	431a      	orrs	r2, r3
   2d706:	687b      	ldr	r3, [r7, #4]
   2d708:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2d70a:	e79b      	b.n	2d644 <follow_path+0x48>
			if (res != FR_OK) break;
   2d70c:	46c0      	nop			; (mov r8, r8)
   2d70e:	e004      	b.n	2d71a <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2d710:	46c0      	nop			; (mov r8, r8)
   2d712:	e002      	b.n	2d71a <follow_path+0x11e>
				break;
   2d714:	46c0      	nop			; (mov r8, r8)
   2d716:	e000      	b.n	2d71a <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2d718:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2d71a:	230f      	movs	r3, #15
   2d71c:	18fb      	adds	r3, r7, r3
   2d71e:	781b      	ldrb	r3, [r3, #0]
}
   2d720:	0018      	movs	r0, r3
   2d722:	46bd      	mov	sp, r7
   2d724:	b005      	add	sp, #20
   2d726:	bd90      	pop	{r4, r7, pc}
   2d728:	0002c5cd 	.word	0x0002c5cd
   2d72c:	0002d1b5 	.word	0x0002d1b5
   2d730:	0002cc51 	.word	0x0002cc51

0002d734 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2d734:	b590      	push	{r4, r7, lr}
   2d736:	b083      	sub	sp, #12
   2d738:	af00      	add	r7, sp, #0
   2d73a:	6078      	str	r0, [r7, #4]
   2d73c:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2d73e:	687b      	ldr	r3, [r7, #4]
   2d740:	7858      	ldrb	r0, [r3, #1]
   2d742:	687b      	ldr	r3, [r7, #4]
   2d744:	3330      	adds	r3, #48	; 0x30
   2d746:	0019      	movs	r1, r3
   2d748:	683a      	ldr	r2, [r7, #0]
   2d74a:	2301      	movs	r3, #1
   2d74c:	4c2a      	ldr	r4, [pc, #168]	; (2d7f8 <check_fs+0xc4>)
   2d74e:	47a0      	blx	r4
   2d750:	1e03      	subs	r3, r0, #0
   2d752:	d001      	beq.n	2d758 <check_fs+0x24>
		return 3;
   2d754:	2303      	movs	r3, #3
   2d756:	e04b      	b.n	2d7f0 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2d758:	687b      	ldr	r3, [r7, #4]
   2d75a:	4a28      	ldr	r2, [pc, #160]	; (2d7fc <check_fs+0xc8>)
   2d75c:	4694      	mov	ip, r2
   2d75e:	4463      	add	r3, ip
   2d760:	3301      	adds	r3, #1
   2d762:	781b      	ldrb	r3, [r3, #0]
   2d764:	021b      	lsls	r3, r3, #8
   2d766:	b21a      	sxth	r2, r3
   2d768:	687b      	ldr	r3, [r7, #4]
   2d76a:	4924      	ldr	r1, [pc, #144]	; (2d7fc <check_fs+0xc8>)
   2d76c:	5c5b      	ldrb	r3, [r3, r1]
   2d76e:	b21b      	sxth	r3, r3
   2d770:	4313      	orrs	r3, r2
   2d772:	b21b      	sxth	r3, r3
   2d774:	4a22      	ldr	r2, [pc, #136]	; (2d800 <check_fs+0xcc>)
   2d776:	4293      	cmp	r3, r2
   2d778:	d001      	beq.n	2d77e <check_fs+0x4a>
		return 2;
   2d77a:	2302      	movs	r3, #2
   2d77c:	e038      	b.n	2d7f0 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2d77e:	687b      	ldr	r3, [r7, #4]
   2d780:	3366      	adds	r3, #102	; 0x66
   2d782:	3303      	adds	r3, #3
   2d784:	781b      	ldrb	r3, [r3, #0]
   2d786:	061a      	lsls	r2, r3, #24
   2d788:	687b      	ldr	r3, [r7, #4]
   2d78a:	3366      	adds	r3, #102	; 0x66
   2d78c:	3302      	adds	r3, #2
   2d78e:	781b      	ldrb	r3, [r3, #0]
   2d790:	041b      	lsls	r3, r3, #16
   2d792:	4313      	orrs	r3, r2
   2d794:	687a      	ldr	r2, [r7, #4]
   2d796:	3266      	adds	r2, #102	; 0x66
   2d798:	3201      	adds	r2, #1
   2d79a:	7812      	ldrb	r2, [r2, #0]
   2d79c:	0212      	lsls	r2, r2, #8
   2d79e:	4313      	orrs	r3, r2
   2d7a0:	687a      	ldr	r2, [r7, #4]
   2d7a2:	2166      	movs	r1, #102	; 0x66
   2d7a4:	5c52      	ldrb	r2, [r2, r1]
   2d7a6:	4313      	orrs	r3, r2
   2d7a8:	021b      	lsls	r3, r3, #8
   2d7aa:	0a1b      	lsrs	r3, r3, #8
   2d7ac:	4a15      	ldr	r2, [pc, #84]	; (2d804 <check_fs+0xd0>)
   2d7ae:	4293      	cmp	r3, r2
   2d7b0:	d101      	bne.n	2d7b6 <check_fs+0x82>
		return 0;
   2d7b2:	2300      	movs	r3, #0
   2d7b4:	e01c      	b.n	2d7f0 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2d7b6:	687b      	ldr	r3, [r7, #4]
   2d7b8:	3382      	adds	r3, #130	; 0x82
   2d7ba:	3303      	adds	r3, #3
   2d7bc:	781b      	ldrb	r3, [r3, #0]
   2d7be:	061a      	lsls	r2, r3, #24
   2d7c0:	687b      	ldr	r3, [r7, #4]
   2d7c2:	3382      	adds	r3, #130	; 0x82
   2d7c4:	3302      	adds	r3, #2
   2d7c6:	781b      	ldrb	r3, [r3, #0]
   2d7c8:	041b      	lsls	r3, r3, #16
   2d7ca:	4313      	orrs	r3, r2
   2d7cc:	687a      	ldr	r2, [r7, #4]
   2d7ce:	3282      	adds	r2, #130	; 0x82
   2d7d0:	3201      	adds	r2, #1
   2d7d2:	7812      	ldrb	r2, [r2, #0]
   2d7d4:	0212      	lsls	r2, r2, #8
   2d7d6:	4313      	orrs	r3, r2
   2d7d8:	687a      	ldr	r2, [r7, #4]
   2d7da:	2182      	movs	r1, #130	; 0x82
   2d7dc:	5c52      	ldrb	r2, [r2, r1]
   2d7de:	4313      	orrs	r3, r2
   2d7e0:	021b      	lsls	r3, r3, #8
   2d7e2:	0a1b      	lsrs	r3, r3, #8
   2d7e4:	4a07      	ldr	r2, [pc, #28]	; (2d804 <check_fs+0xd0>)
   2d7e6:	4293      	cmp	r3, r2
   2d7e8:	d101      	bne.n	2d7ee <check_fs+0xba>
		return 0;
   2d7ea:	2300      	movs	r3, #0
   2d7ec:	e000      	b.n	2d7f0 <check_fs+0xbc>

	return 1;
   2d7ee:	2301      	movs	r3, #1
}
   2d7f0:	0018      	movs	r0, r3
   2d7f2:	46bd      	mov	sp, r7
   2d7f4:	b003      	add	sp, #12
   2d7f6:	bd90      	pop	{r4, r7, pc}
   2d7f8:	0002b99d 	.word	0x0002b99d
   2d7fc:	0000022e 	.word	0x0000022e
   2d800:	ffffaa55 	.word	0xffffaa55
   2d804:	00544146 	.word	0x00544146

0002d808 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2d808:	b590      	push	{r4, r7, lr}
   2d80a:	b093      	sub	sp, #76	; 0x4c
   2d80c:	af00      	add	r7, sp, #0
   2d80e:	60f8      	str	r0, [r7, #12]
   2d810:	60b9      	str	r1, [r7, #8]
   2d812:	1dfb      	adds	r3, r7, #7
   2d814:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2d816:	68fb      	ldr	r3, [r7, #12]
   2d818:	681b      	ldr	r3, [r3, #0]
   2d81a:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2d81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d81e:	781b      	ldrb	r3, [r3, #0]
   2d820:	3b30      	subs	r3, #48	; 0x30
   2d822:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2d824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d826:	2b09      	cmp	r3, #9
   2d828:	d80b      	bhi.n	2d842 <chk_mounted+0x3a>
   2d82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d82c:	3301      	adds	r3, #1
   2d82e:	781b      	ldrb	r3, [r3, #0]
   2d830:	2b3a      	cmp	r3, #58	; 0x3a
   2d832:	d106      	bne.n	2d842 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2d834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d836:	3302      	adds	r3, #2
   2d838:	62fb      	str	r3, [r7, #44]	; 0x2c
   2d83a:	68fb      	ldr	r3, [r7, #12]
   2d83c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2d83e:	601a      	str	r2, [r3, #0]
   2d840:	e001      	b.n	2d846 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2d842:	2300      	movs	r3, #0
   2d844:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2d846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d848:	2b07      	cmp	r3, #7
   2d84a:	d901      	bls.n	2d850 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2d84c:	230b      	movs	r3, #11
   2d84e:	e2af      	b.n	2ddb0 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2d850:	4bc5      	ldr	r3, [pc, #788]	; (2db68 <chk_mounted+0x360>)
   2d852:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2d854:	0092      	lsls	r2, r2, #2
   2d856:	58d3      	ldr	r3, [r2, r3]
   2d858:	62bb      	str	r3, [r7, #40]	; 0x28
   2d85a:	68bb      	ldr	r3, [r7, #8]
   2d85c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d85e:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2d860:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d862:	2b00      	cmp	r3, #0
   2d864:	d101      	bne.n	2d86a <chk_mounted+0x62>
   2d866:	230c      	movs	r3, #12
   2d868:	e2a2      	b.n	2ddb0 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2d86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d86c:	781b      	ldrb	r3, [r3, #0]
   2d86e:	2b00      	cmp	r3, #0
   2d870:	d01c      	beq.n	2d8ac <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2d872:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d874:	785b      	ldrb	r3, [r3, #1]
   2d876:	2227      	movs	r2, #39	; 0x27
   2d878:	18bc      	adds	r4, r7, r2
   2d87a:	0018      	movs	r0, r3
   2d87c:	4bbb      	ldr	r3, [pc, #748]	; (2db6c <chk_mounted+0x364>)
   2d87e:	4798      	blx	r3
   2d880:	0003      	movs	r3, r0
   2d882:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2d884:	2327      	movs	r3, #39	; 0x27
   2d886:	18fb      	adds	r3, r7, r3
   2d888:	781b      	ldrb	r3, [r3, #0]
   2d88a:	2201      	movs	r2, #1
   2d88c:	4013      	ands	r3, r2
   2d88e:	d10d      	bne.n	2d8ac <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2d890:	1dfb      	adds	r3, r7, #7
   2d892:	781b      	ldrb	r3, [r3, #0]
   2d894:	2b00      	cmp	r3, #0
   2d896:	d007      	beq.n	2d8a8 <chk_mounted+0xa0>
   2d898:	2327      	movs	r3, #39	; 0x27
   2d89a:	18fb      	adds	r3, r7, r3
   2d89c:	781b      	ldrb	r3, [r3, #0]
   2d89e:	2204      	movs	r2, #4
   2d8a0:	4013      	ands	r3, r2
   2d8a2:	d001      	beq.n	2d8a8 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2d8a4:	230a      	movs	r3, #10
   2d8a6:	e283      	b.n	2ddb0 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2d8a8:	2300      	movs	r3, #0
   2d8aa:	e281      	b.n	2ddb0 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2d8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d8ae:	2200      	movs	r2, #0
   2d8b0:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2d8b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d8b4:	b2da      	uxtb	r2, r3
   2d8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d8b8:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2d8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d8bc:	785b      	ldrb	r3, [r3, #1]
   2d8be:	2227      	movs	r2, #39	; 0x27
   2d8c0:	18bc      	adds	r4, r7, r2
   2d8c2:	0018      	movs	r0, r3
   2d8c4:	4baa      	ldr	r3, [pc, #680]	; (2db70 <chk_mounted+0x368>)
   2d8c6:	4798      	blx	r3
   2d8c8:	0003      	movs	r3, r0
   2d8ca:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2d8cc:	2327      	movs	r3, #39	; 0x27
   2d8ce:	18fb      	adds	r3, r7, r3
   2d8d0:	781b      	ldrb	r3, [r3, #0]
   2d8d2:	2201      	movs	r2, #1
   2d8d4:	4013      	ands	r3, r2
   2d8d6:	d001      	beq.n	2d8dc <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2d8d8:	2303      	movs	r3, #3
   2d8da:	e269      	b.n	2ddb0 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2d8dc:	1dfb      	adds	r3, r7, #7
   2d8de:	781b      	ldrb	r3, [r3, #0]
   2d8e0:	2b00      	cmp	r3, #0
   2d8e2:	d007      	beq.n	2d8f4 <chk_mounted+0xec>
   2d8e4:	2327      	movs	r3, #39	; 0x27
   2d8e6:	18fb      	adds	r3, r7, r3
   2d8e8:	781b      	ldrb	r3, [r3, #0]
   2d8ea:	2204      	movs	r2, #4
   2d8ec:	4013      	ands	r3, r2
   2d8ee:	d001      	beq.n	2d8f4 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2d8f0:	230a      	movs	r3, #10
   2d8f2:	e25d      	b.n	2ddb0 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2d8f4:	2300      	movs	r3, #0
   2d8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d8f8:	2347      	movs	r3, #71	; 0x47
   2d8fa:	18fc      	adds	r4, r7, r3
   2d8fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d900:	0011      	movs	r1, r2
   2d902:	0018      	movs	r0, r3
   2d904:	4b9b      	ldr	r3, [pc, #620]	; (2db74 <chk_mounted+0x36c>)
   2d906:	4798      	blx	r3
   2d908:	0003      	movs	r3, r0
   2d90a:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2d90c:	2347      	movs	r3, #71	; 0x47
   2d90e:	18fb      	adds	r3, r7, r3
   2d910:	781b      	ldrb	r3, [r3, #0]
   2d912:	2b01      	cmp	r3, #1
   2d914:	d13b      	bne.n	2d98e <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2d916:	2346      	movs	r3, #70	; 0x46
   2d918:	18fb      	adds	r3, r7, r3
   2d91a:	2200      	movs	r2, #0
   2d91c:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2d91e:	2346      	movs	r3, #70	; 0x46
   2d920:	18fb      	adds	r3, r7, r3
   2d922:	781b      	ldrb	r3, [r3, #0]
   2d924:	2b00      	cmp	r3, #0
   2d926:	d006      	beq.n	2d936 <chk_mounted+0x12e>
   2d928:	2346      	movs	r3, #70	; 0x46
   2d92a:	18fb      	adds	r3, r7, r3
   2d92c:	781a      	ldrb	r2, [r3, #0]
   2d92e:	2346      	movs	r3, #70	; 0x46
   2d930:	18fb      	adds	r3, r7, r3
   2d932:	3a01      	subs	r2, #1
   2d934:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2d936:	2346      	movs	r3, #70	; 0x46
   2d938:	18fb      	adds	r3, r7, r3
   2d93a:	781b      	ldrb	r3, [r3, #0]
   2d93c:	011b      	lsls	r3, r3, #4
   2d93e:	33bf      	adds	r3, #191	; 0xbf
   2d940:	33ff      	adds	r3, #255	; 0xff
   2d942:	3330      	adds	r3, #48	; 0x30
   2d944:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d946:	18d3      	adds	r3, r2, r3
   2d948:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2d94a:	6a3b      	ldr	r3, [r7, #32]
   2d94c:	3304      	adds	r3, #4
   2d94e:	781b      	ldrb	r3, [r3, #0]
   2d950:	2b00      	cmp	r3, #0
   2d952:	d01c      	beq.n	2d98e <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2d954:	6a3b      	ldr	r3, [r7, #32]
   2d956:	330b      	adds	r3, #11
   2d958:	781b      	ldrb	r3, [r3, #0]
   2d95a:	061a      	lsls	r2, r3, #24
   2d95c:	6a3b      	ldr	r3, [r7, #32]
   2d95e:	330a      	adds	r3, #10
   2d960:	781b      	ldrb	r3, [r3, #0]
   2d962:	041b      	lsls	r3, r3, #16
   2d964:	4313      	orrs	r3, r2
   2d966:	6a3a      	ldr	r2, [r7, #32]
   2d968:	3209      	adds	r2, #9
   2d96a:	7812      	ldrb	r2, [r2, #0]
   2d96c:	0212      	lsls	r2, r2, #8
   2d96e:	4313      	orrs	r3, r2
   2d970:	6a3a      	ldr	r2, [r7, #32]
   2d972:	3208      	adds	r2, #8
   2d974:	7812      	ldrb	r2, [r2, #0]
   2d976:	4313      	orrs	r3, r2
   2d978:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2d97a:	2347      	movs	r3, #71	; 0x47
   2d97c:	18fc      	adds	r4, r7, r3
   2d97e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d980:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d982:	0011      	movs	r1, r2
   2d984:	0018      	movs	r0, r3
   2d986:	4b7b      	ldr	r3, [pc, #492]	; (2db74 <chk_mounted+0x36c>)
   2d988:	4798      	blx	r3
   2d98a:	0003      	movs	r3, r0
   2d98c:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2d98e:	2347      	movs	r3, #71	; 0x47
   2d990:	18fb      	adds	r3, r7, r3
   2d992:	781b      	ldrb	r3, [r3, #0]
   2d994:	2b03      	cmp	r3, #3
   2d996:	d101      	bne.n	2d99c <chk_mounted+0x194>
   2d998:	2301      	movs	r3, #1
   2d99a:	e209      	b.n	2ddb0 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2d99c:	2347      	movs	r3, #71	; 0x47
   2d99e:	18fb      	adds	r3, r7, r3
   2d9a0:	781b      	ldrb	r3, [r3, #0]
   2d9a2:	2b00      	cmp	r3, #0
   2d9a4:	d001      	beq.n	2d9aa <chk_mounted+0x1a2>
   2d9a6:	230d      	movs	r3, #13
   2d9a8:	e202      	b.n	2ddb0 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2d9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9ac:	223c      	movs	r2, #60	; 0x3c
   2d9ae:	5c9b      	ldrb	r3, [r3, r2]
   2d9b0:	021b      	lsls	r3, r3, #8
   2d9b2:	b21a      	sxth	r2, r3
   2d9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9b6:	213b      	movs	r1, #59	; 0x3b
   2d9b8:	5c5b      	ldrb	r3, [r3, r1]
   2d9ba:	b21b      	sxth	r3, r3
   2d9bc:	4313      	orrs	r3, r2
   2d9be:	b21a      	sxth	r2, r3
   2d9c0:	2380      	movs	r3, #128	; 0x80
   2d9c2:	009b      	lsls	r3, r3, #2
   2d9c4:	429a      	cmp	r2, r3
   2d9c6:	d001      	beq.n	2d9cc <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2d9c8:	230d      	movs	r3, #13
   2d9ca:	e1f1      	b.n	2ddb0 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2d9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9ce:	2247      	movs	r2, #71	; 0x47
   2d9d0:	5c9b      	ldrb	r3, [r3, r2]
   2d9d2:	021b      	lsls	r3, r3, #8
   2d9d4:	b21a      	sxth	r2, r3
   2d9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9d8:	2146      	movs	r1, #70	; 0x46
   2d9da:	5c5b      	ldrb	r3, [r3, r1]
   2d9dc:	b21b      	sxth	r3, r3
   2d9de:	4313      	orrs	r3, r2
   2d9e0:	b21b      	sxth	r3, r3
   2d9e2:	b29b      	uxth	r3, r3
   2d9e4:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2d9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d9e8:	2b00      	cmp	r3, #0
   2d9ea:	d112      	bne.n	2da12 <chk_mounted+0x20a>
   2d9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9ee:	2257      	movs	r2, #87	; 0x57
   2d9f0:	5c9b      	ldrb	r3, [r3, r2]
   2d9f2:	061a      	lsls	r2, r3, #24
   2d9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9f6:	2156      	movs	r1, #86	; 0x56
   2d9f8:	5c5b      	ldrb	r3, [r3, r1]
   2d9fa:	041b      	lsls	r3, r3, #16
   2d9fc:	4313      	orrs	r3, r2
   2d9fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2da00:	2155      	movs	r1, #85	; 0x55
   2da02:	5c52      	ldrb	r2, [r2, r1]
   2da04:	0212      	lsls	r2, r2, #8
   2da06:	4313      	orrs	r3, r2
   2da08:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2da0a:	2154      	movs	r1, #84	; 0x54
   2da0c:	5c52      	ldrb	r2, [r2, r1]
   2da0e:	4313      	orrs	r3, r2
   2da10:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2da12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da14:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2da16:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2da18:	231f      	movs	r3, #31
   2da1a:	18fb      	adds	r3, r7, r3
   2da1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2da1e:	2140      	movs	r1, #64	; 0x40
   2da20:	5c52      	ldrb	r2, [r2, r1]
   2da22:	701a      	strb	r2, [r3, #0]
   2da24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da26:	221f      	movs	r2, #31
   2da28:	18ba      	adds	r2, r7, r2
   2da2a:	7812      	ldrb	r2, [r2, #0]
   2da2c:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2da2e:	231f      	movs	r3, #31
   2da30:	18fb      	adds	r3, r7, r3
   2da32:	781b      	ldrb	r3, [r3, #0]
   2da34:	2b01      	cmp	r3, #1
   2da36:	d006      	beq.n	2da46 <chk_mounted+0x23e>
   2da38:	231f      	movs	r3, #31
   2da3a:	18fb      	adds	r3, r7, r3
   2da3c:	781b      	ldrb	r3, [r3, #0]
   2da3e:	2b02      	cmp	r3, #2
   2da40:	d001      	beq.n	2da46 <chk_mounted+0x23e>
   2da42:	230d      	movs	r3, #13
   2da44:	e1b4      	b.n	2ddb0 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2da46:	231f      	movs	r3, #31
   2da48:	18fb      	adds	r3, r7, r3
   2da4a:	781a      	ldrb	r2, [r3, #0]
   2da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2da4e:	4353      	muls	r3, r2
   2da50:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2da52:	231f      	movs	r3, #31
   2da54:	18fb      	adds	r3, r7, r3
   2da56:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2da58:	213d      	movs	r1, #61	; 0x3d
   2da5a:	5c52      	ldrb	r2, [r2, r1]
   2da5c:	701a      	strb	r2, [r3, #0]
   2da5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da60:	221f      	movs	r2, #31
   2da62:	18ba      	adds	r2, r7, r2
   2da64:	7812      	ldrb	r2, [r2, #0]
   2da66:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2da68:	231f      	movs	r3, #31
   2da6a:	18fb      	adds	r3, r7, r3
   2da6c:	781b      	ldrb	r3, [r3, #0]
   2da6e:	2b00      	cmp	r3, #0
   2da70:	d008      	beq.n	2da84 <chk_mounted+0x27c>
   2da72:	231f      	movs	r3, #31
   2da74:	18fb      	adds	r3, r7, r3
   2da76:	781b      	ldrb	r3, [r3, #0]
   2da78:	221f      	movs	r2, #31
   2da7a:	18ba      	adds	r2, r7, r2
   2da7c:	7812      	ldrb	r2, [r2, #0]
   2da7e:	3a01      	subs	r2, #1
   2da80:	4013      	ands	r3, r2
   2da82:	d001      	beq.n	2da88 <chk_mounted+0x280>
   2da84:	230d      	movs	r3, #13
   2da86:	e193      	b.n	2ddb0 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2da88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da8a:	2242      	movs	r2, #66	; 0x42
   2da8c:	5c9b      	ldrb	r3, [r3, r2]
   2da8e:	021b      	lsls	r3, r3, #8
   2da90:	b21a      	sxth	r2, r3
   2da92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da94:	2141      	movs	r1, #65	; 0x41
   2da96:	5c5b      	ldrb	r3, [r3, r1]
   2da98:	b21b      	sxth	r3, r3
   2da9a:	4313      	orrs	r3, r2
   2da9c:	b21b      	sxth	r3, r3
   2da9e:	b29a      	uxth	r2, r3
   2daa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2daa2:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2daa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2daa6:	891b      	ldrh	r3, [r3, #8]
   2daa8:	220f      	movs	r2, #15
   2daaa:	4013      	ands	r3, r2
   2daac:	b29b      	uxth	r3, r3
   2daae:	2b00      	cmp	r3, #0
   2dab0:	d001      	beq.n	2dab6 <chk_mounted+0x2ae>
   2dab2:	230d      	movs	r3, #13
   2dab4:	e17c      	b.n	2ddb0 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2dab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dab8:	2244      	movs	r2, #68	; 0x44
   2daba:	5c9b      	ldrb	r3, [r3, r2]
   2dabc:	021b      	lsls	r3, r3, #8
   2dabe:	b21a      	sxth	r2, r3
   2dac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dac2:	2143      	movs	r1, #67	; 0x43
   2dac4:	5c5b      	ldrb	r3, [r3, r1]
   2dac6:	b21b      	sxth	r3, r3
   2dac8:	4313      	orrs	r3, r2
   2daca:	b21b      	sxth	r3, r3
   2dacc:	b29b      	uxth	r3, r3
   2dace:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2dad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2dad2:	2b00      	cmp	r3, #0
   2dad4:	d112      	bne.n	2dafc <chk_mounted+0x2f4>
   2dad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dad8:	2253      	movs	r2, #83	; 0x53
   2dada:	5c9b      	ldrb	r3, [r3, r2]
   2dadc:	061a      	lsls	r2, r3, #24
   2dade:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dae0:	2152      	movs	r1, #82	; 0x52
   2dae2:	5c5b      	ldrb	r3, [r3, r1]
   2dae4:	041b      	lsls	r3, r3, #16
   2dae6:	4313      	orrs	r3, r2
   2dae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2daea:	2151      	movs	r1, #81	; 0x51
   2daec:	5c52      	ldrb	r2, [r2, r1]
   2daee:	0212      	lsls	r2, r2, #8
   2daf0:	4313      	orrs	r3, r2
   2daf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2daf4:	2150      	movs	r1, #80	; 0x50
   2daf6:	5c52      	ldrb	r2, [r2, r1]
   2daf8:	4313      	orrs	r3, r2
   2dafa:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2dafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dafe:	223f      	movs	r2, #63	; 0x3f
   2db00:	5c9b      	ldrb	r3, [r3, r2]
   2db02:	021b      	lsls	r3, r3, #8
   2db04:	b21a      	sxth	r2, r3
   2db06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db08:	213e      	movs	r1, #62	; 0x3e
   2db0a:	5c5b      	ldrb	r3, [r3, r1]
   2db0c:	b21b      	sxth	r3, r3
   2db0e:	4313      	orrs	r3, r2
   2db10:	b21a      	sxth	r2, r3
   2db12:	231c      	movs	r3, #28
   2db14:	18fb      	adds	r3, r7, r3
   2db16:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2db18:	231c      	movs	r3, #28
   2db1a:	18fb      	adds	r3, r7, r3
   2db1c:	881b      	ldrh	r3, [r3, #0]
   2db1e:	2b00      	cmp	r3, #0
   2db20:	d101      	bne.n	2db26 <chk_mounted+0x31e>
   2db22:	230d      	movs	r3, #13
   2db24:	e144      	b.n	2ddb0 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2db26:	231c      	movs	r3, #28
   2db28:	18fb      	adds	r3, r7, r3
   2db2a:	881a      	ldrh	r2, [r3, #0]
   2db2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2db2e:	18d3      	adds	r3, r2, r3
   2db30:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2db32:	8912      	ldrh	r2, [r2, #8]
   2db34:	0912      	lsrs	r2, r2, #4
   2db36:	b292      	uxth	r2, r2
   2db38:	189b      	adds	r3, r3, r2
   2db3a:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2db3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2db3e:	69bb      	ldr	r3, [r7, #24]
   2db40:	429a      	cmp	r2, r3
   2db42:	d201      	bcs.n	2db48 <chk_mounted+0x340>
   2db44:	230d      	movs	r3, #13
   2db46:	e133      	b.n	2ddb0 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2db48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2db4a:	69bb      	ldr	r3, [r7, #24]
   2db4c:	1ad2      	subs	r2, r2, r3
   2db4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db50:	789b      	ldrb	r3, [r3, #2]
   2db52:	0019      	movs	r1, r3
   2db54:	4b08      	ldr	r3, [pc, #32]	; (2db78 <chk_mounted+0x370>)
   2db56:	0010      	movs	r0, r2
   2db58:	4798      	blx	r3
   2db5a:	0003      	movs	r3, r0
   2db5c:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2db5e:	697b      	ldr	r3, [r7, #20]
   2db60:	2b00      	cmp	r3, #0
   2db62:	d10b      	bne.n	2db7c <chk_mounted+0x374>
   2db64:	230d      	movs	r3, #13
   2db66:	e123      	b.n	2ddb0 <chk_mounted+0x5a8>
   2db68:	200042f8 	.word	0x200042f8
   2db6c:	0002b965 	.word	0x0002b965
   2db70:	0002b8e1 	.word	0x0002b8e1
   2db74:	0002d735 	.word	0x0002d735
   2db78:	00032f89 	.word	0x00032f89
	fmt = FS_FAT12;
   2db7c:	2347      	movs	r3, #71	; 0x47
   2db7e:	18fb      	adds	r3, r7, r3
   2db80:	2201      	movs	r2, #1
   2db82:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2db84:	697b      	ldr	r3, [r7, #20]
   2db86:	4a8c      	ldr	r2, [pc, #560]	; (2ddb8 <chk_mounted+0x5b0>)
   2db88:	4293      	cmp	r3, r2
   2db8a:	d903      	bls.n	2db94 <chk_mounted+0x38c>
   2db8c:	2347      	movs	r3, #71	; 0x47
   2db8e:	18fb      	adds	r3, r7, r3
   2db90:	2202      	movs	r2, #2
   2db92:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2db94:	697b      	ldr	r3, [r7, #20]
   2db96:	4a89      	ldr	r2, [pc, #548]	; (2ddbc <chk_mounted+0x5b4>)
   2db98:	4293      	cmp	r3, r2
   2db9a:	d903      	bls.n	2dba4 <chk_mounted+0x39c>
   2db9c:	2347      	movs	r3, #71	; 0x47
   2db9e:	18fb      	adds	r3, r7, r3
   2dba0:	2203      	movs	r2, #3
   2dba2:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2dba4:	697b      	ldr	r3, [r7, #20]
   2dba6:	1c9a      	adds	r2, r3, #2
   2dba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbaa:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2dbac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2dbae:	69bb      	ldr	r3, [r7, #24]
   2dbb0:	18d2      	adds	r2, r2, r3
   2dbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbb4:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2dbb6:	231c      	movs	r3, #28
   2dbb8:	18fb      	adds	r3, r7, r3
   2dbba:	881a      	ldrh	r2, [r3, #0]
   2dbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2dbbe:	18d2      	adds	r2, r2, r3
   2dbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbc2:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2dbc4:	2347      	movs	r3, #71	; 0x47
   2dbc6:	18fb      	adds	r3, r7, r3
   2dbc8:	781b      	ldrb	r3, [r3, #0]
   2dbca:	2b03      	cmp	r3, #3
   2dbcc:	d11e      	bne.n	2dc0c <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2dbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbd0:	891b      	ldrh	r3, [r3, #8]
   2dbd2:	2b00      	cmp	r3, #0
   2dbd4:	d001      	beq.n	2dbda <chk_mounted+0x3d2>
   2dbd6:	230d      	movs	r3, #13
   2dbd8:	e0ea      	b.n	2ddb0 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2dbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbdc:	225f      	movs	r2, #95	; 0x5f
   2dbde:	5c9b      	ldrb	r3, [r3, r2]
   2dbe0:	061a      	lsls	r2, r3, #24
   2dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbe4:	215e      	movs	r1, #94	; 0x5e
   2dbe6:	5c5b      	ldrb	r3, [r3, r1]
   2dbe8:	041b      	lsls	r3, r3, #16
   2dbea:	4313      	orrs	r3, r2
   2dbec:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dbee:	215d      	movs	r1, #93	; 0x5d
   2dbf0:	5c52      	ldrb	r2, [r2, r1]
   2dbf2:	0212      	lsls	r2, r2, #8
   2dbf4:	4313      	orrs	r3, r2
   2dbf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dbf8:	215c      	movs	r1, #92	; 0x5c
   2dbfa:	5c52      	ldrb	r2, [r2, r1]
   2dbfc:	431a      	orrs	r2, r3
   2dbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc00:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2dc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc04:	699b      	ldr	r3, [r3, #24]
   2dc06:	009b      	lsls	r3, r3, #2
   2dc08:	633b      	str	r3, [r7, #48]	; 0x30
   2dc0a:	e020      	b.n	2dc4e <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2dc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc0e:	891b      	ldrh	r3, [r3, #8]
   2dc10:	2b00      	cmp	r3, #0
   2dc12:	d101      	bne.n	2dc18 <chk_mounted+0x410>
   2dc14:	230d      	movs	r3, #13
   2dc16:	e0cb      	b.n	2ddb0 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2dc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc1a:	6a1a      	ldr	r2, [r3, #32]
   2dc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2dc1e:	18d2      	adds	r2, r2, r3
   2dc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc22:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2dc24:	2347      	movs	r3, #71	; 0x47
   2dc26:	18fb      	adds	r3, r7, r3
   2dc28:	781b      	ldrb	r3, [r3, #0]
   2dc2a:	2b02      	cmp	r3, #2
   2dc2c:	d103      	bne.n	2dc36 <chk_mounted+0x42e>
   2dc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc30:	699b      	ldr	r3, [r3, #24]
   2dc32:	005b      	lsls	r3, r3, #1
   2dc34:	e00a      	b.n	2dc4c <chk_mounted+0x444>
   2dc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc38:	699a      	ldr	r2, [r3, #24]
   2dc3a:	0013      	movs	r3, r2
   2dc3c:	005b      	lsls	r3, r3, #1
   2dc3e:	189b      	adds	r3, r3, r2
   2dc40:	085a      	lsrs	r2, r3, #1
   2dc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc44:	699b      	ldr	r3, [r3, #24]
   2dc46:	2101      	movs	r1, #1
   2dc48:	400b      	ands	r3, r1
   2dc4a:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2dc4c:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2dc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc50:	69da      	ldr	r2, [r3, #28]
   2dc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dc54:	495a      	ldr	r1, [pc, #360]	; (2ddc0 <chk_mounted+0x5b8>)
   2dc56:	468c      	mov	ip, r1
   2dc58:	4463      	add	r3, ip
   2dc5a:	0a5b      	lsrs	r3, r3, #9
   2dc5c:	429a      	cmp	r2, r3
   2dc5e:	d201      	bcs.n	2dc64 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2dc60:	230d      	movs	r3, #13
   2dc62:	e0a5      	b.n	2ddb0 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc66:	2201      	movs	r2, #1
   2dc68:	4252      	negs	r2, r2
   2dc6a:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2dc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc6e:	2200      	movs	r2, #0
   2dc70:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2dc72:	2347      	movs	r3, #71	; 0x47
   2dc74:	18fb      	adds	r3, r7, r3
   2dc76:	781b      	ldrb	r3, [r3, #0]
   2dc78:	2b03      	cmp	r3, #3
   2dc7a:	d000      	beq.n	2dc7e <chk_mounted+0x476>
   2dc7c:	e082      	b.n	2dd84 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2dc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc80:	2200      	movs	r2, #0
   2dc82:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2dc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc86:	2261      	movs	r2, #97	; 0x61
   2dc88:	5c9b      	ldrb	r3, [r3, r2]
   2dc8a:	021b      	lsls	r3, r3, #8
   2dc8c:	b21a      	sxth	r2, r3
   2dc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc90:	2160      	movs	r1, #96	; 0x60
   2dc92:	5c5b      	ldrb	r3, [r3, r1]
   2dc94:	b21b      	sxth	r3, r3
   2dc96:	4313      	orrs	r3, r2
   2dc98:	b21b      	sxth	r3, r3
   2dc9a:	b29b      	uxth	r3, r3
   2dc9c:	001a      	movs	r2, r3
   2dc9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2dca0:	18d2      	adds	r2, r2, r3
   2dca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dca4:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2dca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dca8:	7858      	ldrb	r0, [r3, #1]
   2dcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dcac:	3330      	adds	r3, #48	; 0x30
   2dcae:	0019      	movs	r1, r3
   2dcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dcb2:	695a      	ldr	r2, [r3, #20]
   2dcb4:	2301      	movs	r3, #1
   2dcb6:	4c43      	ldr	r4, [pc, #268]	; (2ddc4 <chk_mounted+0x5bc>)
   2dcb8:	47a0      	blx	r4
   2dcba:	1e03      	subs	r3, r0, #0
   2dcbc:	d162      	bne.n	2dd84 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2dcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dcc0:	4a41      	ldr	r2, [pc, #260]	; (2ddc8 <chk_mounted+0x5c0>)
   2dcc2:	5c9b      	ldrb	r3, [r3, r2]
   2dcc4:	021b      	lsls	r3, r3, #8
   2dcc6:	b21a      	sxth	r2, r3
   2dcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dcca:	4940      	ldr	r1, [pc, #256]	; (2ddcc <chk_mounted+0x5c4>)
   2dccc:	5c5b      	ldrb	r3, [r3, r1]
   2dcce:	b21b      	sxth	r3, r3
   2dcd0:	4313      	orrs	r3, r2
   2dcd2:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2dcd4:	4a3e      	ldr	r2, [pc, #248]	; (2ddd0 <chk_mounted+0x5c8>)
   2dcd6:	4293      	cmp	r3, r2
   2dcd8:	d154      	bne.n	2dd84 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2dcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dcdc:	2233      	movs	r2, #51	; 0x33
   2dcde:	5c9b      	ldrb	r3, [r3, r2]
   2dce0:	061a      	lsls	r2, r3, #24
   2dce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dce4:	2132      	movs	r1, #50	; 0x32
   2dce6:	5c5b      	ldrb	r3, [r3, r1]
   2dce8:	041b      	lsls	r3, r3, #16
   2dcea:	4313      	orrs	r3, r2
   2dcec:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dcee:	2131      	movs	r1, #49	; 0x31
   2dcf0:	5c52      	ldrb	r2, [r2, r1]
   2dcf2:	0212      	lsls	r2, r2, #8
   2dcf4:	4313      	orrs	r3, r2
   2dcf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dcf8:	2130      	movs	r1, #48	; 0x30
   2dcfa:	5c52      	ldrb	r2, [r2, r1]
   2dcfc:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2dcfe:	4a35      	ldr	r2, [pc, #212]	; (2ddd4 <chk_mounted+0x5cc>)
   2dd00:	4293      	cmp	r3, r2
   2dd02:	d13f      	bne.n	2dd84 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2dd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd06:	4a34      	ldr	r2, [pc, #208]	; (2ddd8 <chk_mounted+0x5d0>)
   2dd08:	5c9b      	ldrb	r3, [r3, r2]
   2dd0a:	061a      	lsls	r2, r3, #24
   2dd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd0e:	4933      	ldr	r1, [pc, #204]	; (2dddc <chk_mounted+0x5d4>)
   2dd10:	5c5b      	ldrb	r3, [r3, r1]
   2dd12:	041b      	lsls	r3, r3, #16
   2dd14:	4313      	orrs	r3, r2
   2dd16:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dd18:	4931      	ldr	r1, [pc, #196]	; (2dde0 <chk_mounted+0x5d8>)
   2dd1a:	5c52      	ldrb	r2, [r2, r1]
   2dd1c:	0212      	lsls	r2, r2, #8
   2dd1e:	4313      	orrs	r3, r2
   2dd20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2dd22:	2285      	movs	r2, #133	; 0x85
   2dd24:	0092      	lsls	r2, r2, #2
   2dd26:	5c8a      	ldrb	r2, [r1, r2]
   2dd28:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2dd2a:	4a2e      	ldr	r2, [pc, #184]	; (2dde4 <chk_mounted+0x5dc>)
   2dd2c:	4293      	cmp	r3, r2
   2dd2e:	d129      	bne.n	2dd84 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2dd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd32:	4a2d      	ldr	r2, [pc, #180]	; (2dde8 <chk_mounted+0x5e0>)
   2dd34:	5c9b      	ldrb	r3, [r3, r2]
   2dd36:	061a      	lsls	r2, r3, #24
   2dd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd3a:	492c      	ldr	r1, [pc, #176]	; (2ddec <chk_mounted+0x5e4>)
   2dd3c:	5c5b      	ldrb	r3, [r3, r1]
   2dd3e:	041b      	lsls	r3, r3, #16
   2dd40:	4313      	orrs	r3, r2
   2dd42:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dd44:	492a      	ldr	r1, [pc, #168]	; (2ddf0 <chk_mounted+0x5e8>)
   2dd46:	5c52      	ldrb	r2, [r2, r1]
   2dd48:	0212      	lsls	r2, r2, #8
   2dd4a:	4313      	orrs	r3, r2
   2dd4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2dd4e:	2287      	movs	r2, #135	; 0x87
   2dd50:	0092      	lsls	r2, r2, #2
   2dd52:	5c8a      	ldrb	r2, [r1, r2]
   2dd54:	431a      	orrs	r2, r3
   2dd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd58:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2dd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd5c:	4a25      	ldr	r2, [pc, #148]	; (2ddf4 <chk_mounted+0x5ec>)
   2dd5e:	5c9b      	ldrb	r3, [r3, r2]
   2dd60:	061a      	lsls	r2, r3, #24
   2dd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd64:	4924      	ldr	r1, [pc, #144]	; (2ddf8 <chk_mounted+0x5f0>)
   2dd66:	5c5b      	ldrb	r3, [r3, r1]
   2dd68:	041b      	lsls	r3, r3, #16
   2dd6a:	4313      	orrs	r3, r2
   2dd6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dd6e:	4923      	ldr	r1, [pc, #140]	; (2ddfc <chk_mounted+0x5f4>)
   2dd70:	5c52      	ldrb	r2, [r2, r1]
   2dd72:	0212      	lsls	r2, r2, #8
   2dd74:	4313      	orrs	r3, r2
   2dd76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2dd78:	2286      	movs	r2, #134	; 0x86
   2dd7a:	0092      	lsls	r2, r2, #2
   2dd7c:	5c8a      	ldrb	r2, [r1, r2]
   2dd7e:	431a      	orrs	r2, r3
   2dd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd82:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2dd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd86:	2247      	movs	r2, #71	; 0x47
   2dd88:	18ba      	adds	r2, r7, r2
   2dd8a:	7812      	ldrb	r2, [r2, #0]
   2dd8c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2dd8e:	4b1c      	ldr	r3, [pc, #112]	; (2de00 <chk_mounted+0x5f8>)
   2dd90:	881b      	ldrh	r3, [r3, #0]
   2dd92:	3301      	adds	r3, #1
   2dd94:	b29a      	uxth	r2, r3
   2dd96:	4b1a      	ldr	r3, [pc, #104]	; (2de00 <chk_mounted+0x5f8>)
   2dd98:	801a      	strh	r2, [r3, #0]
   2dd9a:	4b19      	ldr	r3, [pc, #100]	; (2de00 <chk_mounted+0x5f8>)
   2dd9c:	881a      	ldrh	r2, [r3, #0]
   2dd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dda0:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2dda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dda4:	2200      	movs	r2, #0
   2dda6:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2dda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ddaa:	2200      	movs	r2, #0
   2ddac:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2ddae:	2300      	movs	r3, #0
}
   2ddb0:	0018      	movs	r0, r3
   2ddb2:	46bd      	mov	sp, r7
   2ddb4:	b013      	add	sp, #76	; 0x4c
   2ddb6:	bd90      	pop	{r4, r7, pc}
   2ddb8:	00000ff5 	.word	0x00000ff5
   2ddbc:	0000fff5 	.word	0x0000fff5
   2ddc0:	000001ff 	.word	0x000001ff
   2ddc4:	0002b99d 	.word	0x0002b99d
   2ddc8:	0000022f 	.word	0x0000022f
   2ddcc:	0000022e 	.word	0x0000022e
   2ddd0:	ffffaa55 	.word	0xffffaa55
   2ddd4:	41615252 	.word	0x41615252
   2ddd8:	00000217 	.word	0x00000217
   2dddc:	00000216 	.word	0x00000216
   2dde0:	00000215 	.word	0x00000215
   2dde4:	61417272 	.word	0x61417272
   2dde8:	0000021f 	.word	0x0000021f
   2ddec:	0000021e 	.word	0x0000021e
   2ddf0:	0000021d 	.word	0x0000021d
   2ddf4:	0000021b 	.word	0x0000021b
   2ddf8:	0000021a 	.word	0x0000021a
   2ddfc:	00000219 	.word	0x00000219
   2de00:	20004318 	.word	0x20004318

0002de04 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2de04:	b580      	push	{r7, lr}
   2de06:	b082      	sub	sp, #8
   2de08:	af00      	add	r7, sp, #0
   2de0a:	6078      	str	r0, [r7, #4]
   2de0c:	000a      	movs	r2, r1
   2de0e:	1cbb      	adds	r3, r7, #2
   2de10:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2de12:	687b      	ldr	r3, [r7, #4]
   2de14:	2b00      	cmp	r3, #0
   2de16:	d009      	beq.n	2de2c <validate+0x28>
   2de18:	687b      	ldr	r3, [r7, #4]
   2de1a:	781b      	ldrb	r3, [r3, #0]
   2de1c:	2b00      	cmp	r3, #0
   2de1e:	d005      	beq.n	2de2c <validate+0x28>
   2de20:	687b      	ldr	r3, [r7, #4]
   2de22:	88db      	ldrh	r3, [r3, #6]
   2de24:	1cba      	adds	r2, r7, #2
   2de26:	8812      	ldrh	r2, [r2, #0]
   2de28:	429a      	cmp	r2, r3
   2de2a:	d001      	beq.n	2de30 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2de2c:	2309      	movs	r3, #9
   2de2e:	e00c      	b.n	2de4a <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2de30:	687b      	ldr	r3, [r7, #4]
   2de32:	785b      	ldrb	r3, [r3, #1]
   2de34:	0018      	movs	r0, r3
   2de36:	4b07      	ldr	r3, [pc, #28]	; (2de54 <validate+0x50>)
   2de38:	4798      	blx	r3
   2de3a:	0003      	movs	r3, r0
   2de3c:	001a      	movs	r2, r3
   2de3e:	2301      	movs	r3, #1
   2de40:	4013      	ands	r3, r2
   2de42:	d001      	beq.n	2de48 <validate+0x44>
		return FR_NOT_READY;
   2de44:	2303      	movs	r3, #3
   2de46:	e000      	b.n	2de4a <validate+0x46>

	return FR_OK;
   2de48:	2300      	movs	r3, #0
}
   2de4a:	0018      	movs	r0, r3
   2de4c:	46bd      	mov	sp, r7
   2de4e:	b002      	add	sp, #8
   2de50:	bd80      	pop	{r7, pc}
   2de52:	46c0      	nop			; (mov r8, r8)
   2de54:	0002b965 	.word	0x0002b965

0002de58 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2de58:	b580      	push	{r7, lr}
   2de5a:	b084      	sub	sp, #16
   2de5c:	af00      	add	r7, sp, #0
   2de5e:	0002      	movs	r2, r0
   2de60:	6039      	str	r1, [r7, #0]
   2de62:	1dfb      	adds	r3, r7, #7
   2de64:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2de66:	1dfb      	adds	r3, r7, #7
   2de68:	781b      	ldrb	r3, [r3, #0]
   2de6a:	2b07      	cmp	r3, #7
   2de6c:	d901      	bls.n	2de72 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2de6e:	230b      	movs	r3, #11
   2de70:	e018      	b.n	2dea4 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2de72:	1dfb      	adds	r3, r7, #7
   2de74:	781a      	ldrb	r2, [r3, #0]
   2de76:	4b0d      	ldr	r3, [pc, #52]	; (2deac <f_mount+0x54>)
   2de78:	0092      	lsls	r2, r2, #2
   2de7a:	58d3      	ldr	r3, [r2, r3]
   2de7c:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2de7e:	68fb      	ldr	r3, [r7, #12]
   2de80:	2b00      	cmp	r3, #0
   2de82:	d002      	beq.n	2de8a <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2de84:	68fb      	ldr	r3, [r7, #12]
   2de86:	2200      	movs	r2, #0
   2de88:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2de8a:	683b      	ldr	r3, [r7, #0]
   2de8c:	2b00      	cmp	r3, #0
   2de8e:	d002      	beq.n	2de96 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2de90:	683b      	ldr	r3, [r7, #0]
   2de92:	2200      	movs	r2, #0
   2de94:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2de96:	1dfb      	adds	r3, r7, #7
   2de98:	781a      	ldrb	r2, [r3, #0]
   2de9a:	4b04      	ldr	r3, [pc, #16]	; (2deac <f_mount+0x54>)
   2de9c:	0092      	lsls	r2, r2, #2
   2de9e:	6839      	ldr	r1, [r7, #0]
   2dea0:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2dea2:	2300      	movs	r3, #0
}
   2dea4:	0018      	movs	r0, r3
   2dea6:	46bd      	mov	sp, r7
   2dea8:	b004      	add	sp, #16
   2deaa:	bd80      	pop	{r7, pc}
   2deac:	200042f8 	.word	0x200042f8

0002deb0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2deb0:	b590      	push	{r4, r7, lr}
   2deb2:	4ce5      	ldr	r4, [pc, #916]	; (2e248 <f_open+0x398>)
   2deb4:	44a5      	add	sp, r4
   2deb6:	af00      	add	r7, sp, #0
   2deb8:	60f8      	str	r0, [r7, #12]
   2deba:	60b9      	str	r1, [r7, #8]
   2debc:	4be3      	ldr	r3, [pc, #908]	; (2e24c <f_open+0x39c>)
   2debe:	2194      	movs	r1, #148	; 0x94
   2dec0:	0089      	lsls	r1, r1, #2
   2dec2:	468c      	mov	ip, r1
   2dec4:	44bc      	add	ip, r7
   2dec6:	4463      	add	r3, ip
   2dec8:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2deca:	68fb      	ldr	r3, [r7, #12]
   2decc:	2200      	movs	r2, #0
   2dece:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2ded0:	4bde      	ldr	r3, [pc, #888]	; (2e24c <f_open+0x39c>)
   2ded2:	2294      	movs	r2, #148	; 0x94
   2ded4:	0092      	lsls	r2, r2, #2
   2ded6:	4694      	mov	ip, r2
   2ded8:	44bc      	add	ip, r7
   2deda:	4463      	add	r3, ip
   2dedc:	4adb      	ldr	r2, [pc, #876]	; (2e24c <f_open+0x39c>)
   2dede:	2194      	movs	r1, #148	; 0x94
   2dee0:	0089      	lsls	r1, r1, #2
   2dee2:	468c      	mov	ip, r1
   2dee4:	44bc      	add	ip, r7
   2dee6:	4462      	add	r2, ip
   2dee8:	7812      	ldrb	r2, [r2, #0]
   2deea:	211f      	movs	r1, #31
   2deec:	400a      	ands	r2, r1
   2deee:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2def0:	4bd6      	ldr	r3, [pc, #856]	; (2e24c <f_open+0x39c>)
   2def2:	2294      	movs	r2, #148	; 0x94
   2def4:	0092      	lsls	r2, r2, #2
   2def6:	4694      	mov	ip, r2
   2def8:	44bc      	add	ip, r7
   2defa:	4463      	add	r3, ip
   2defc:	781b      	ldrb	r3, [r3, #0]
   2defe:	2201      	movs	r2, #1
   2df00:	4393      	bics	r3, r2
   2df02:	b2da      	uxtb	r2, r3
   2df04:	4bd2      	ldr	r3, [pc, #840]	; (2e250 <f_open+0x3a0>)
   2df06:	18fc      	adds	r4, r7, r3
   2df08:	2387      	movs	r3, #135	; 0x87
   2df0a:	009b      	lsls	r3, r3, #2
   2df0c:	18f9      	adds	r1, r7, r3
   2df0e:	2308      	movs	r3, #8
   2df10:	18fb      	adds	r3, r7, r3
   2df12:	0018      	movs	r0, r3
   2df14:	4bcf      	ldr	r3, [pc, #828]	; (2e254 <f_open+0x3a4>)
   2df16:	4798      	blx	r3
   2df18:	0003      	movs	r3, r0
   2df1a:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2df1c:	2387      	movs	r3, #135	; 0x87
   2df1e:	009b      	lsls	r3, r3, #2
   2df20:	18fb      	adds	r3, r7, r3
   2df22:	2284      	movs	r2, #132	; 0x84
   2df24:	0092      	lsls	r2, r2, #2
   2df26:	18ba      	adds	r2, r7, r2
   2df28:	619a      	str	r2, [r3, #24]
   2df2a:	2387      	movs	r3, #135	; 0x87
   2df2c:	009b      	lsls	r3, r3, #2
   2df2e:	18fb      	adds	r3, r7, r3
   2df30:	2210      	movs	r2, #16
   2df32:	18ba      	adds	r2, r7, r2
   2df34:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2df36:	4bc6      	ldr	r3, [pc, #792]	; (2e250 <f_open+0x3a0>)
   2df38:	18fb      	adds	r3, r7, r3
   2df3a:	781b      	ldrb	r3, [r3, #0]
   2df3c:	2b00      	cmp	r3, #0
   2df3e:	d10b      	bne.n	2df58 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2df40:	68ba      	ldr	r2, [r7, #8]
   2df42:	4bc3      	ldr	r3, [pc, #780]	; (2e250 <f_open+0x3a0>)
   2df44:	18fc      	adds	r4, r7, r3
   2df46:	2387      	movs	r3, #135	; 0x87
   2df48:	009b      	lsls	r3, r3, #2
   2df4a:	18fb      	adds	r3, r7, r3
   2df4c:	0011      	movs	r1, r2
   2df4e:	0018      	movs	r0, r3
   2df50:	4bc1      	ldr	r3, [pc, #772]	; (2e258 <f_open+0x3a8>)
   2df52:	4798      	blx	r3
   2df54:	0003      	movs	r3, r0
   2df56:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2df58:	2387      	movs	r3, #135	; 0x87
   2df5a:	009b      	lsls	r3, r3, #2
   2df5c:	18fb      	adds	r3, r7, r3
   2df5e:	695b      	ldr	r3, [r3, #20]
   2df60:	2292      	movs	r2, #146	; 0x92
   2df62:	0092      	lsls	r2, r2, #2
   2df64:	18ba      	adds	r2, r7, r2
   2df66:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2df68:	4bb9      	ldr	r3, [pc, #740]	; (2e250 <f_open+0x3a0>)
   2df6a:	18fb      	adds	r3, r7, r3
   2df6c:	781b      	ldrb	r3, [r3, #0]
   2df6e:	2b00      	cmp	r3, #0
   2df70:	d109      	bne.n	2df86 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2df72:	2392      	movs	r3, #146	; 0x92
   2df74:	009b      	lsls	r3, r3, #2
   2df76:	18fb      	adds	r3, r7, r3
   2df78:	681b      	ldr	r3, [r3, #0]
   2df7a:	2b00      	cmp	r3, #0
   2df7c:	d103      	bne.n	2df86 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2df7e:	4bb4      	ldr	r3, [pc, #720]	; (2e250 <f_open+0x3a0>)
   2df80:	18fb      	adds	r3, r7, r3
   2df82:	2206      	movs	r2, #6
   2df84:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2df86:	4bb1      	ldr	r3, [pc, #708]	; (2e24c <f_open+0x39c>)
   2df88:	2294      	movs	r2, #148	; 0x94
   2df8a:	0092      	lsls	r2, r2, #2
   2df8c:	4694      	mov	ip, r2
   2df8e:	44bc      	add	ip, r7
   2df90:	4463      	add	r3, ip
   2df92:	781b      	ldrb	r3, [r3, #0]
   2df94:	221c      	movs	r2, #28
   2df96:	4013      	ands	r3, r2
   2df98:	d100      	bne.n	2df9c <f_open+0xec>
   2df9a:	e141      	b.n	2e220 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2df9c:	4bac      	ldr	r3, [pc, #688]	; (2e250 <f_open+0x3a0>)
   2df9e:	18fb      	adds	r3, r7, r3
   2dfa0:	781b      	ldrb	r3, [r3, #0]
   2dfa2:	2b00      	cmp	r3, #0
   2dfa4:	d027      	beq.n	2dff6 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2dfa6:	4baa      	ldr	r3, [pc, #680]	; (2e250 <f_open+0x3a0>)
   2dfa8:	18fb      	adds	r3, r7, r3
   2dfaa:	781b      	ldrb	r3, [r3, #0]
   2dfac:	2b04      	cmp	r3, #4
   2dfae:	d109      	bne.n	2dfc4 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2dfb0:	4ba7      	ldr	r3, [pc, #668]	; (2e250 <f_open+0x3a0>)
   2dfb2:	18fc      	adds	r4, r7, r3
   2dfb4:	2387      	movs	r3, #135	; 0x87
   2dfb6:	009b      	lsls	r3, r3, #2
   2dfb8:	18fb      	adds	r3, r7, r3
   2dfba:	0018      	movs	r0, r3
   2dfbc:	4ba7      	ldr	r3, [pc, #668]	; (2e25c <f_open+0x3ac>)
   2dfbe:	4798      	blx	r3
   2dfc0:	0003      	movs	r3, r0
   2dfc2:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2dfc4:	4ba1      	ldr	r3, [pc, #644]	; (2e24c <f_open+0x39c>)
   2dfc6:	2294      	movs	r2, #148	; 0x94
   2dfc8:	0092      	lsls	r2, r2, #2
   2dfca:	4694      	mov	ip, r2
   2dfcc:	44bc      	add	ip, r7
   2dfce:	4463      	add	r3, ip
   2dfd0:	4a9e      	ldr	r2, [pc, #632]	; (2e24c <f_open+0x39c>)
   2dfd2:	2194      	movs	r1, #148	; 0x94
   2dfd4:	0089      	lsls	r1, r1, #2
   2dfd6:	468c      	mov	ip, r1
   2dfd8:	44bc      	add	ip, r7
   2dfda:	4462      	add	r2, ip
   2dfdc:	7812      	ldrb	r2, [r2, #0]
   2dfde:	2108      	movs	r1, #8
   2dfe0:	430a      	orrs	r2, r1
   2dfe2:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2dfe4:	2387      	movs	r3, #135	; 0x87
   2dfe6:	009b      	lsls	r3, r3, #2
   2dfe8:	18fb      	adds	r3, r7, r3
   2dfea:	695b      	ldr	r3, [r3, #20]
   2dfec:	2292      	movs	r2, #146	; 0x92
   2dfee:	0092      	lsls	r2, r2, #2
   2dff0:	18ba      	adds	r2, r7, r2
   2dff2:	6013      	str	r3, [r2, #0]
   2dff4:	e01c      	b.n	2e030 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2dff6:	2392      	movs	r3, #146	; 0x92
   2dff8:	009b      	lsls	r3, r3, #2
   2dffa:	18fb      	adds	r3, r7, r3
   2dffc:	681b      	ldr	r3, [r3, #0]
   2dffe:	330b      	adds	r3, #11
   2e000:	781b      	ldrb	r3, [r3, #0]
   2e002:	001a      	movs	r2, r3
   2e004:	2311      	movs	r3, #17
   2e006:	4013      	ands	r3, r2
   2e008:	d004      	beq.n	2e014 <f_open+0x164>
				res = FR_DENIED;
   2e00a:	4b91      	ldr	r3, [pc, #580]	; (2e250 <f_open+0x3a0>)
   2e00c:	18fb      	adds	r3, r7, r3
   2e00e:	2207      	movs	r2, #7
   2e010:	701a      	strb	r2, [r3, #0]
   2e012:	e00d      	b.n	2e030 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2e014:	4b8d      	ldr	r3, [pc, #564]	; (2e24c <f_open+0x39c>)
   2e016:	2294      	movs	r2, #148	; 0x94
   2e018:	0092      	lsls	r2, r2, #2
   2e01a:	4694      	mov	ip, r2
   2e01c:	44bc      	add	ip, r7
   2e01e:	4463      	add	r3, ip
   2e020:	781b      	ldrb	r3, [r3, #0]
   2e022:	2204      	movs	r2, #4
   2e024:	4013      	ands	r3, r2
   2e026:	d003      	beq.n	2e030 <f_open+0x180>
					res = FR_EXIST;
   2e028:	4b89      	ldr	r3, [pc, #548]	; (2e250 <f_open+0x3a0>)
   2e02a:	18fb      	adds	r3, r7, r3
   2e02c:	2208      	movs	r2, #8
   2e02e:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2e030:	4b87      	ldr	r3, [pc, #540]	; (2e250 <f_open+0x3a0>)
   2e032:	18fb      	adds	r3, r7, r3
   2e034:	781b      	ldrb	r3, [r3, #0]
   2e036:	2b00      	cmp	r3, #0
   2e038:	d000      	beq.n	2e03c <f_open+0x18c>
   2e03a:	e12f      	b.n	2e29c <f_open+0x3ec>
   2e03c:	4b83      	ldr	r3, [pc, #524]	; (2e24c <f_open+0x39c>)
   2e03e:	2294      	movs	r2, #148	; 0x94
   2e040:	0092      	lsls	r2, r2, #2
   2e042:	4694      	mov	ip, r2
   2e044:	44bc      	add	ip, r7
   2e046:	4463      	add	r3, ip
   2e048:	781b      	ldrb	r3, [r3, #0]
   2e04a:	2208      	movs	r2, #8
   2e04c:	4013      	ands	r3, r2
   2e04e:	d100      	bne.n	2e052 <f_open+0x1a2>
   2e050:	e124      	b.n	2e29c <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2e052:	4b83      	ldr	r3, [pc, #524]	; (2e260 <f_open+0x3b0>)
   2e054:	4798      	blx	r3
   2e056:	0003      	movs	r3, r0
   2e058:	2291      	movs	r2, #145	; 0x91
   2e05a:	0092      	lsls	r2, r2, #2
   2e05c:	18ba      	adds	r2, r7, r2
   2e05e:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2e060:	2392      	movs	r3, #146	; 0x92
   2e062:	009b      	lsls	r3, r3, #2
   2e064:	18fb      	adds	r3, r7, r3
   2e066:	681b      	ldr	r3, [r3, #0]
   2e068:	330e      	adds	r3, #14
   2e06a:	2291      	movs	r2, #145	; 0x91
   2e06c:	0092      	lsls	r2, r2, #2
   2e06e:	18ba      	adds	r2, r7, r2
   2e070:	6812      	ldr	r2, [r2, #0]
   2e072:	b2d2      	uxtb	r2, r2
   2e074:	701a      	strb	r2, [r3, #0]
   2e076:	2392      	movs	r3, #146	; 0x92
   2e078:	009b      	lsls	r3, r3, #2
   2e07a:	18fb      	adds	r3, r7, r3
   2e07c:	681b      	ldr	r3, [r3, #0]
   2e07e:	330f      	adds	r3, #15
   2e080:	2291      	movs	r2, #145	; 0x91
   2e082:	0092      	lsls	r2, r2, #2
   2e084:	18ba      	adds	r2, r7, r2
   2e086:	6812      	ldr	r2, [r2, #0]
   2e088:	b292      	uxth	r2, r2
   2e08a:	0a12      	lsrs	r2, r2, #8
   2e08c:	b292      	uxth	r2, r2
   2e08e:	b2d2      	uxtb	r2, r2
   2e090:	701a      	strb	r2, [r3, #0]
   2e092:	2392      	movs	r3, #146	; 0x92
   2e094:	009b      	lsls	r3, r3, #2
   2e096:	18fb      	adds	r3, r7, r3
   2e098:	681b      	ldr	r3, [r3, #0]
   2e09a:	3310      	adds	r3, #16
   2e09c:	2291      	movs	r2, #145	; 0x91
   2e09e:	0092      	lsls	r2, r2, #2
   2e0a0:	18ba      	adds	r2, r7, r2
   2e0a2:	6812      	ldr	r2, [r2, #0]
   2e0a4:	0c12      	lsrs	r2, r2, #16
   2e0a6:	b2d2      	uxtb	r2, r2
   2e0a8:	701a      	strb	r2, [r3, #0]
   2e0aa:	2392      	movs	r3, #146	; 0x92
   2e0ac:	009b      	lsls	r3, r3, #2
   2e0ae:	18fb      	adds	r3, r7, r3
   2e0b0:	681b      	ldr	r3, [r3, #0]
   2e0b2:	3311      	adds	r3, #17
   2e0b4:	2291      	movs	r2, #145	; 0x91
   2e0b6:	0092      	lsls	r2, r2, #2
   2e0b8:	18ba      	adds	r2, r7, r2
   2e0ba:	6812      	ldr	r2, [r2, #0]
   2e0bc:	0e12      	lsrs	r2, r2, #24
   2e0be:	b2d2      	uxtb	r2, r2
   2e0c0:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2e0c2:	2392      	movs	r3, #146	; 0x92
   2e0c4:	009b      	lsls	r3, r3, #2
   2e0c6:	18fb      	adds	r3, r7, r3
   2e0c8:	681b      	ldr	r3, [r3, #0]
   2e0ca:	330b      	adds	r3, #11
   2e0cc:	2200      	movs	r2, #0
   2e0ce:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2e0d0:	2392      	movs	r3, #146	; 0x92
   2e0d2:	009b      	lsls	r3, r3, #2
   2e0d4:	18fb      	adds	r3, r7, r3
   2e0d6:	681b      	ldr	r3, [r3, #0]
   2e0d8:	331c      	adds	r3, #28
   2e0da:	2200      	movs	r2, #0
   2e0dc:	701a      	strb	r2, [r3, #0]
   2e0de:	2392      	movs	r3, #146	; 0x92
   2e0e0:	009b      	lsls	r3, r3, #2
   2e0e2:	18fb      	adds	r3, r7, r3
   2e0e4:	681b      	ldr	r3, [r3, #0]
   2e0e6:	331d      	adds	r3, #29
   2e0e8:	2200      	movs	r2, #0
   2e0ea:	701a      	strb	r2, [r3, #0]
   2e0ec:	2392      	movs	r3, #146	; 0x92
   2e0ee:	009b      	lsls	r3, r3, #2
   2e0f0:	18fb      	adds	r3, r7, r3
   2e0f2:	681b      	ldr	r3, [r3, #0]
   2e0f4:	331e      	adds	r3, #30
   2e0f6:	2200      	movs	r2, #0
   2e0f8:	701a      	strb	r2, [r3, #0]
   2e0fa:	2392      	movs	r3, #146	; 0x92
   2e0fc:	009b      	lsls	r3, r3, #2
   2e0fe:	18fb      	adds	r3, r7, r3
   2e100:	681b      	ldr	r3, [r3, #0]
   2e102:	331f      	adds	r3, #31
   2e104:	2200      	movs	r2, #0
   2e106:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2e108:	2392      	movs	r3, #146	; 0x92
   2e10a:	009b      	lsls	r3, r3, #2
   2e10c:	18fb      	adds	r3, r7, r3
   2e10e:	681b      	ldr	r3, [r3, #0]
   2e110:	3315      	adds	r3, #21
   2e112:	781b      	ldrb	r3, [r3, #0]
   2e114:	021b      	lsls	r3, r3, #8
   2e116:	b21a      	sxth	r2, r3
   2e118:	2392      	movs	r3, #146	; 0x92
   2e11a:	009b      	lsls	r3, r3, #2
   2e11c:	18fb      	adds	r3, r7, r3
   2e11e:	681b      	ldr	r3, [r3, #0]
   2e120:	3314      	adds	r3, #20
   2e122:	781b      	ldrb	r3, [r3, #0]
   2e124:	b21b      	sxth	r3, r3
   2e126:	4313      	orrs	r3, r2
   2e128:	b21b      	sxth	r3, r3
   2e12a:	b29b      	uxth	r3, r3
   2e12c:	041b      	lsls	r3, r3, #16
   2e12e:	2292      	movs	r2, #146	; 0x92
   2e130:	0092      	lsls	r2, r2, #2
   2e132:	18ba      	adds	r2, r7, r2
   2e134:	6812      	ldr	r2, [r2, #0]
   2e136:	321b      	adds	r2, #27
   2e138:	7812      	ldrb	r2, [r2, #0]
   2e13a:	0212      	lsls	r2, r2, #8
   2e13c:	b211      	sxth	r1, r2
   2e13e:	2292      	movs	r2, #146	; 0x92
   2e140:	0092      	lsls	r2, r2, #2
   2e142:	18ba      	adds	r2, r7, r2
   2e144:	6812      	ldr	r2, [r2, #0]
   2e146:	321a      	adds	r2, #26
   2e148:	7812      	ldrb	r2, [r2, #0]
   2e14a:	b212      	sxth	r2, r2
   2e14c:	430a      	orrs	r2, r1
   2e14e:	b212      	sxth	r2, r2
   2e150:	b292      	uxth	r2, r2
   2e152:	4313      	orrs	r3, r2
   2e154:	2290      	movs	r2, #144	; 0x90
   2e156:	0092      	lsls	r2, r2, #2
   2e158:	18ba      	adds	r2, r7, r2
   2e15a:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2e15c:	2392      	movs	r3, #146	; 0x92
   2e15e:	009b      	lsls	r3, r3, #2
   2e160:	18fb      	adds	r3, r7, r3
   2e162:	681b      	ldr	r3, [r3, #0]
   2e164:	331a      	adds	r3, #26
   2e166:	2200      	movs	r2, #0
   2e168:	701a      	strb	r2, [r3, #0]
   2e16a:	2392      	movs	r3, #146	; 0x92
   2e16c:	009b      	lsls	r3, r3, #2
   2e16e:	18fb      	adds	r3, r7, r3
   2e170:	681b      	ldr	r3, [r3, #0]
   2e172:	331b      	adds	r3, #27
   2e174:	2200      	movs	r2, #0
   2e176:	701a      	strb	r2, [r3, #0]
   2e178:	2392      	movs	r3, #146	; 0x92
   2e17a:	009b      	lsls	r3, r3, #2
   2e17c:	18fb      	adds	r3, r7, r3
   2e17e:	681b      	ldr	r3, [r3, #0]
   2e180:	3314      	adds	r3, #20
   2e182:	2200      	movs	r2, #0
   2e184:	701a      	strb	r2, [r3, #0]
   2e186:	2392      	movs	r3, #146	; 0x92
   2e188:	009b      	lsls	r3, r3, #2
   2e18a:	18fb      	adds	r3, r7, r3
   2e18c:	681b      	ldr	r3, [r3, #0]
   2e18e:	3315      	adds	r3, #21
   2e190:	2200      	movs	r2, #0
   2e192:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2e194:	2387      	movs	r3, #135	; 0x87
   2e196:	009b      	lsls	r3, r3, #2
   2e198:	18fb      	adds	r3, r7, r3
   2e19a:	681b      	ldr	r3, [r3, #0]
   2e19c:	2201      	movs	r2, #1
   2e19e:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2e1a0:	2390      	movs	r3, #144	; 0x90
   2e1a2:	009b      	lsls	r3, r3, #2
   2e1a4:	18fb      	adds	r3, r7, r3
   2e1a6:	681b      	ldr	r3, [r3, #0]
   2e1a8:	2b00      	cmp	r3, #0
   2e1aa:	d100      	bne.n	2e1ae <f_open+0x2fe>
   2e1ac:	e076      	b.n	2e29c <f_open+0x3ec>
				dw = dj.fs->winsect;
   2e1ae:	2387      	movs	r3, #135	; 0x87
   2e1b0:	009b      	lsls	r3, r3, #2
   2e1b2:	18fb      	adds	r3, r7, r3
   2e1b4:	681b      	ldr	r3, [r3, #0]
   2e1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e1b8:	2291      	movs	r2, #145	; 0x91
   2e1ba:	0092      	lsls	r2, r2, #2
   2e1bc:	18ba      	adds	r2, r7, r2
   2e1be:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2e1c0:	2387      	movs	r3, #135	; 0x87
   2e1c2:	009b      	lsls	r3, r3, #2
   2e1c4:	18fb      	adds	r3, r7, r3
   2e1c6:	681b      	ldr	r3, [r3, #0]
   2e1c8:	4a21      	ldr	r2, [pc, #132]	; (2e250 <f_open+0x3a0>)
   2e1ca:	18bc      	adds	r4, r7, r2
   2e1cc:	2290      	movs	r2, #144	; 0x90
   2e1ce:	0092      	lsls	r2, r2, #2
   2e1d0:	18ba      	adds	r2, r7, r2
   2e1d2:	6812      	ldr	r2, [r2, #0]
   2e1d4:	0011      	movs	r1, r2
   2e1d6:	0018      	movs	r0, r3
   2e1d8:	4b22      	ldr	r3, [pc, #136]	; (2e264 <f_open+0x3b4>)
   2e1da:	4798      	blx	r3
   2e1dc:	0003      	movs	r3, r0
   2e1de:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2e1e0:	4b1b      	ldr	r3, [pc, #108]	; (2e250 <f_open+0x3a0>)
   2e1e2:	18fb      	adds	r3, r7, r3
   2e1e4:	781b      	ldrb	r3, [r3, #0]
   2e1e6:	2b00      	cmp	r3, #0
   2e1e8:	d158      	bne.n	2e29c <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2e1ea:	2387      	movs	r3, #135	; 0x87
   2e1ec:	009b      	lsls	r3, r3, #2
   2e1ee:	18fb      	adds	r3, r7, r3
   2e1f0:	681b      	ldr	r3, [r3, #0]
   2e1f2:	2290      	movs	r2, #144	; 0x90
   2e1f4:	0092      	lsls	r2, r2, #2
   2e1f6:	18ba      	adds	r2, r7, r2
   2e1f8:	6812      	ldr	r2, [r2, #0]
   2e1fa:	3a01      	subs	r2, #1
   2e1fc:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2e1fe:	2387      	movs	r3, #135	; 0x87
   2e200:	009b      	lsls	r3, r3, #2
   2e202:	18fb      	adds	r3, r7, r3
   2e204:	681b      	ldr	r3, [r3, #0]
   2e206:	4a12      	ldr	r2, [pc, #72]	; (2e250 <f_open+0x3a0>)
   2e208:	18bc      	adds	r4, r7, r2
   2e20a:	2291      	movs	r2, #145	; 0x91
   2e20c:	0092      	lsls	r2, r2, #2
   2e20e:	18ba      	adds	r2, r7, r2
   2e210:	6812      	ldr	r2, [r2, #0]
   2e212:	0011      	movs	r1, r2
   2e214:	0018      	movs	r0, r3
   2e216:	4b14      	ldr	r3, [pc, #80]	; (2e268 <f_open+0x3b8>)
   2e218:	4798      	blx	r3
   2e21a:	0003      	movs	r3, r0
   2e21c:	7023      	strb	r3, [r4, #0]
   2e21e:	e03d      	b.n	2e29c <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2e220:	4b0b      	ldr	r3, [pc, #44]	; (2e250 <f_open+0x3a0>)
   2e222:	18fb      	adds	r3, r7, r3
   2e224:	781b      	ldrb	r3, [r3, #0]
   2e226:	2b00      	cmp	r3, #0
   2e228:	d138      	bne.n	2e29c <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2e22a:	2392      	movs	r3, #146	; 0x92
   2e22c:	009b      	lsls	r3, r3, #2
   2e22e:	18fb      	adds	r3, r7, r3
   2e230:	681b      	ldr	r3, [r3, #0]
   2e232:	330b      	adds	r3, #11
   2e234:	781b      	ldrb	r3, [r3, #0]
   2e236:	001a      	movs	r2, r3
   2e238:	2310      	movs	r3, #16
   2e23a:	4013      	ands	r3, r2
   2e23c:	d016      	beq.n	2e26c <f_open+0x3bc>
				res = FR_NO_FILE;
   2e23e:	4b04      	ldr	r3, [pc, #16]	; (2e250 <f_open+0x3a0>)
   2e240:	18fb      	adds	r3, r7, r3
   2e242:	2204      	movs	r2, #4
   2e244:	701a      	strb	r2, [r3, #0]
   2e246:	e029      	b.n	2e29c <f_open+0x3ec>
   2e248:	fffffdac 	.word	0xfffffdac
   2e24c:	fffffdb7 	.word	0xfffffdb7
   2e250:	0000024f 	.word	0x0000024f
   2e254:	0002d809 	.word	0x0002d809
   2e258:	0002d5fd 	.word	0x0002d5fd
   2e25c:	0002ce4d 	.word	0x0002ce4d
   2e260:	0002bc45 	.word	0x0002bc45
   2e264:	0002c3c9 	.word	0x0002c3c9
   2e268:	0002bd89 	.word	0x0002bd89
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2e26c:	4b5a      	ldr	r3, [pc, #360]	; (2e3d8 <f_open+0x528>)
   2e26e:	2294      	movs	r2, #148	; 0x94
   2e270:	0092      	lsls	r2, r2, #2
   2e272:	4694      	mov	ip, r2
   2e274:	44bc      	add	ip, r7
   2e276:	4463      	add	r3, ip
   2e278:	781b      	ldrb	r3, [r3, #0]
   2e27a:	2202      	movs	r2, #2
   2e27c:	4013      	ands	r3, r2
   2e27e:	d00d      	beq.n	2e29c <f_open+0x3ec>
   2e280:	2392      	movs	r3, #146	; 0x92
   2e282:	009b      	lsls	r3, r3, #2
   2e284:	18fb      	adds	r3, r7, r3
   2e286:	681b      	ldr	r3, [r3, #0]
   2e288:	330b      	adds	r3, #11
   2e28a:	781b      	ldrb	r3, [r3, #0]
   2e28c:	001a      	movs	r2, r3
   2e28e:	2301      	movs	r3, #1
   2e290:	4013      	ands	r3, r2
   2e292:	d003      	beq.n	2e29c <f_open+0x3ec>
					res = FR_DENIED;
   2e294:	4b51      	ldr	r3, [pc, #324]	; (2e3dc <f_open+0x52c>)
   2e296:	18fb      	adds	r3, r7, r3
   2e298:	2207      	movs	r2, #7
   2e29a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2e29c:	4b4f      	ldr	r3, [pc, #316]	; (2e3dc <f_open+0x52c>)
   2e29e:	18fb      	adds	r3, r7, r3
   2e2a0:	781b      	ldrb	r3, [r3, #0]
   2e2a2:	2b00      	cmp	r3, #0
   2e2a4:	d126      	bne.n	2e2f4 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2e2a6:	4b4c      	ldr	r3, [pc, #304]	; (2e3d8 <f_open+0x528>)
   2e2a8:	2294      	movs	r2, #148	; 0x94
   2e2aa:	0092      	lsls	r2, r2, #2
   2e2ac:	4694      	mov	ip, r2
   2e2ae:	44bc      	add	ip, r7
   2e2b0:	4463      	add	r3, ip
   2e2b2:	781b      	ldrb	r3, [r3, #0]
   2e2b4:	2208      	movs	r2, #8
   2e2b6:	4013      	ands	r3, r2
   2e2b8:	d00f      	beq.n	2e2da <f_open+0x42a>
			mode |= FA__WRITTEN;
   2e2ba:	4b47      	ldr	r3, [pc, #284]	; (2e3d8 <f_open+0x528>)
   2e2bc:	2294      	movs	r2, #148	; 0x94
   2e2be:	0092      	lsls	r2, r2, #2
   2e2c0:	4694      	mov	ip, r2
   2e2c2:	44bc      	add	ip, r7
   2e2c4:	4463      	add	r3, ip
   2e2c6:	4a44      	ldr	r2, [pc, #272]	; (2e3d8 <f_open+0x528>)
   2e2c8:	2194      	movs	r1, #148	; 0x94
   2e2ca:	0089      	lsls	r1, r1, #2
   2e2cc:	468c      	mov	ip, r1
   2e2ce:	44bc      	add	ip, r7
   2e2d0:	4462      	add	r2, ip
   2e2d2:	7812      	ldrb	r2, [r2, #0]
   2e2d4:	2120      	movs	r1, #32
   2e2d6:	430a      	orrs	r2, r1
   2e2d8:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2e2da:	2387      	movs	r3, #135	; 0x87
   2e2dc:	009b      	lsls	r3, r3, #2
   2e2de:	18fb      	adds	r3, r7, r3
   2e2e0:	681b      	ldr	r3, [r3, #0]
   2e2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e2e4:	68fb      	ldr	r3, [r7, #12]
   2e2e6:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2e2e8:	68fb      	ldr	r3, [r7, #12]
   2e2ea:	2292      	movs	r2, #146	; 0x92
   2e2ec:	0092      	lsls	r2, r2, #2
   2e2ee:	18ba      	adds	r2, r7, r2
   2e2f0:	6812      	ldr	r2, [r2, #0]
   2e2f2:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2e2f4:	4b39      	ldr	r3, [pc, #228]	; (2e3dc <f_open+0x52c>)
   2e2f6:	18fb      	adds	r3, r7, r3
   2e2f8:	781b      	ldrb	r3, [r3, #0]
   2e2fa:	2b00      	cmp	r3, #0
   2e2fc:	d163      	bne.n	2e3c6 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2e2fe:	68fb      	ldr	r3, [r7, #12]
   2e300:	4a35      	ldr	r2, [pc, #212]	; (2e3d8 <f_open+0x528>)
   2e302:	2194      	movs	r1, #148	; 0x94
   2e304:	0089      	lsls	r1, r1, #2
   2e306:	468c      	mov	ip, r1
   2e308:	44bc      	add	ip, r7
   2e30a:	4462      	add	r2, ip
   2e30c:	7812      	ldrb	r2, [r2, #0]
   2e30e:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2e310:	2392      	movs	r3, #146	; 0x92
   2e312:	009b      	lsls	r3, r3, #2
   2e314:	18fb      	adds	r3, r7, r3
   2e316:	681b      	ldr	r3, [r3, #0]
   2e318:	3315      	adds	r3, #21
   2e31a:	781b      	ldrb	r3, [r3, #0]
   2e31c:	021b      	lsls	r3, r3, #8
   2e31e:	b21a      	sxth	r2, r3
   2e320:	2392      	movs	r3, #146	; 0x92
   2e322:	009b      	lsls	r3, r3, #2
   2e324:	18fb      	adds	r3, r7, r3
   2e326:	681b      	ldr	r3, [r3, #0]
   2e328:	3314      	adds	r3, #20
   2e32a:	781b      	ldrb	r3, [r3, #0]
   2e32c:	b21b      	sxth	r3, r3
   2e32e:	4313      	orrs	r3, r2
   2e330:	b21b      	sxth	r3, r3
   2e332:	b29b      	uxth	r3, r3
   2e334:	041b      	lsls	r3, r3, #16
   2e336:	2292      	movs	r2, #146	; 0x92
   2e338:	0092      	lsls	r2, r2, #2
   2e33a:	18ba      	adds	r2, r7, r2
   2e33c:	6812      	ldr	r2, [r2, #0]
   2e33e:	321b      	adds	r2, #27
   2e340:	7812      	ldrb	r2, [r2, #0]
   2e342:	0212      	lsls	r2, r2, #8
   2e344:	b211      	sxth	r1, r2
   2e346:	2292      	movs	r2, #146	; 0x92
   2e348:	0092      	lsls	r2, r2, #2
   2e34a:	18ba      	adds	r2, r7, r2
   2e34c:	6812      	ldr	r2, [r2, #0]
   2e34e:	321a      	adds	r2, #26
   2e350:	7812      	ldrb	r2, [r2, #0]
   2e352:	b212      	sxth	r2, r2
   2e354:	430a      	orrs	r2, r1
   2e356:	b212      	sxth	r2, r2
   2e358:	b292      	uxth	r2, r2
   2e35a:	431a      	orrs	r2, r3
   2e35c:	68fb      	ldr	r3, [r7, #12]
   2e35e:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2e360:	2392      	movs	r3, #146	; 0x92
   2e362:	009b      	lsls	r3, r3, #2
   2e364:	18fb      	adds	r3, r7, r3
   2e366:	681b      	ldr	r3, [r3, #0]
   2e368:	331f      	adds	r3, #31
   2e36a:	781b      	ldrb	r3, [r3, #0]
   2e36c:	061a      	lsls	r2, r3, #24
   2e36e:	2392      	movs	r3, #146	; 0x92
   2e370:	009b      	lsls	r3, r3, #2
   2e372:	18fb      	adds	r3, r7, r3
   2e374:	681b      	ldr	r3, [r3, #0]
   2e376:	331e      	adds	r3, #30
   2e378:	781b      	ldrb	r3, [r3, #0]
   2e37a:	041b      	lsls	r3, r3, #16
   2e37c:	4313      	orrs	r3, r2
   2e37e:	2292      	movs	r2, #146	; 0x92
   2e380:	0092      	lsls	r2, r2, #2
   2e382:	18ba      	adds	r2, r7, r2
   2e384:	6812      	ldr	r2, [r2, #0]
   2e386:	321d      	adds	r2, #29
   2e388:	7812      	ldrb	r2, [r2, #0]
   2e38a:	0212      	lsls	r2, r2, #8
   2e38c:	4313      	orrs	r3, r2
   2e38e:	2292      	movs	r2, #146	; 0x92
   2e390:	0092      	lsls	r2, r2, #2
   2e392:	18ba      	adds	r2, r7, r2
   2e394:	6812      	ldr	r2, [r2, #0]
   2e396:	321c      	adds	r2, #28
   2e398:	7812      	ldrb	r2, [r2, #0]
   2e39a:	431a      	orrs	r2, r3
   2e39c:	68fb      	ldr	r3, [r7, #12]
   2e39e:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2e3a0:	68fb      	ldr	r3, [r7, #12]
   2e3a2:	2200      	movs	r2, #0
   2e3a4:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2e3a6:	68fb      	ldr	r3, [r7, #12]
   2e3a8:	2200      	movs	r2, #0
   2e3aa:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2e3ac:	2387      	movs	r3, #135	; 0x87
   2e3ae:	009b      	lsls	r3, r3, #2
   2e3b0:	18fb      	adds	r3, r7, r3
   2e3b2:	681a      	ldr	r2, [r3, #0]
   2e3b4:	68fb      	ldr	r3, [r7, #12]
   2e3b6:	601a      	str	r2, [r3, #0]
   2e3b8:	2387      	movs	r3, #135	; 0x87
   2e3ba:	009b      	lsls	r3, r3, #2
   2e3bc:	18fb      	adds	r3, r7, r3
   2e3be:	681b      	ldr	r3, [r3, #0]
   2e3c0:	88da      	ldrh	r2, [r3, #6]
   2e3c2:	68fb      	ldr	r3, [r7, #12]
   2e3c4:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2e3c6:	4b05      	ldr	r3, [pc, #20]	; (2e3dc <f_open+0x52c>)
   2e3c8:	18fb      	adds	r3, r7, r3
   2e3ca:	781b      	ldrb	r3, [r3, #0]
}
   2e3cc:	0018      	movs	r0, r3
   2e3ce:	46bd      	mov	sp, r7
   2e3d0:	2395      	movs	r3, #149	; 0x95
   2e3d2:	009b      	lsls	r3, r3, #2
   2e3d4:	449d      	add	sp, r3
   2e3d6:	bd90      	pop	{r4, r7, pc}
   2e3d8:	fffffdb7 	.word	0xfffffdb7
   2e3dc:	0000024f 	.word	0x0000024f

0002e3e0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2e3e0:	b590      	push	{r4, r7, lr}
   2e3e2:	b08b      	sub	sp, #44	; 0x2c
   2e3e4:	af00      	add	r7, sp, #0
   2e3e6:	60f8      	str	r0, [r7, #12]
   2e3e8:	60b9      	str	r1, [r7, #8]
   2e3ea:	607a      	str	r2, [r7, #4]
   2e3ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2e3ee:	68bb      	ldr	r3, [r7, #8]
   2e3f0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2e3f2:	683b      	ldr	r3, [r7, #0]
   2e3f4:	2200      	movs	r2, #0
   2e3f6:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2e3f8:	68fb      	ldr	r3, [r7, #12]
   2e3fa:	681a      	ldr	r2, [r3, #0]
   2e3fc:	68fb      	ldr	r3, [r7, #12]
   2e3fe:	889b      	ldrh	r3, [r3, #4]
   2e400:	2117      	movs	r1, #23
   2e402:	187c      	adds	r4, r7, r1
   2e404:	0019      	movs	r1, r3
   2e406:	0010      	movs	r0, r2
   2e408:	4bc3      	ldr	r3, [pc, #780]	; (2e718 <f_write+0x338>)
   2e40a:	4798      	blx	r3
   2e40c:	0003      	movs	r3, r0
   2e40e:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2e410:	2317      	movs	r3, #23
   2e412:	18fb      	adds	r3, r7, r3
   2e414:	781b      	ldrb	r3, [r3, #0]
   2e416:	2b00      	cmp	r3, #0
   2e418:	d003      	beq.n	2e422 <f_write+0x42>
   2e41a:	2317      	movs	r3, #23
   2e41c:	18fb      	adds	r3, r7, r3
   2e41e:	781b      	ldrb	r3, [r3, #0]
   2e420:	e176      	b.n	2e710 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2e422:	68fb      	ldr	r3, [r7, #12]
   2e424:	799b      	ldrb	r3, [r3, #6]
   2e426:	b25b      	sxtb	r3, r3
   2e428:	2b00      	cmp	r3, #0
   2e42a:	da01      	bge.n	2e430 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2e42c:	2302      	movs	r3, #2
   2e42e:	e16f      	b.n	2e710 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2e430:	68fb      	ldr	r3, [r7, #12]
   2e432:	799b      	ldrb	r3, [r3, #6]
   2e434:	001a      	movs	r2, r3
   2e436:	2302      	movs	r3, #2
   2e438:	4013      	ands	r3, r2
   2e43a:	d101      	bne.n	2e440 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2e43c:	2307      	movs	r3, #7
   2e43e:	e167      	b.n	2e710 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2e440:	68fb      	ldr	r3, [r7, #12]
   2e442:	68da      	ldr	r2, [r3, #12]
   2e444:	687b      	ldr	r3, [r7, #4]
   2e446:	18d2      	adds	r2, r2, r3
   2e448:	68fb      	ldr	r3, [r7, #12]
   2e44a:	68db      	ldr	r3, [r3, #12]
   2e44c:	429a      	cmp	r2, r3
   2e44e:	d300      	bcc.n	2e452 <f_write+0x72>
   2e450:	e146      	b.n	2e6e0 <f_write+0x300>
   2e452:	2300      	movs	r3, #0
   2e454:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2e456:	e143      	b.n	2e6e0 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2e458:	68fb      	ldr	r3, [r7, #12]
   2e45a:	689b      	ldr	r3, [r3, #8]
   2e45c:	05db      	lsls	r3, r3, #23
   2e45e:	0ddb      	lsrs	r3, r3, #23
   2e460:	d000      	beq.n	2e464 <f_write+0x84>
   2e462:	e0f6      	b.n	2e652 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2e464:	68fb      	ldr	r3, [r7, #12]
   2e466:	689b      	ldr	r3, [r3, #8]
   2e468:	0a5b      	lsrs	r3, r3, #9
   2e46a:	b2da      	uxtb	r2, r3
   2e46c:	68fb      	ldr	r3, [r7, #12]
   2e46e:	681b      	ldr	r3, [r3, #0]
   2e470:	789b      	ldrb	r3, [r3, #2]
   2e472:	3b01      	subs	r3, #1
   2e474:	b2d9      	uxtb	r1, r3
   2e476:	2316      	movs	r3, #22
   2e478:	18fb      	adds	r3, r7, r3
   2e47a:	400a      	ands	r2, r1
   2e47c:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2e47e:	2316      	movs	r3, #22
   2e480:	18fb      	adds	r3, r7, r3
   2e482:	781b      	ldrb	r3, [r3, #0]
   2e484:	2b00      	cmp	r3, #0
   2e486:	d140      	bne.n	2e50a <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2e488:	68fb      	ldr	r3, [r7, #12]
   2e48a:	689b      	ldr	r3, [r3, #8]
   2e48c:	2b00      	cmp	r3, #0
   2e48e:	d111      	bne.n	2e4b4 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2e490:	68fb      	ldr	r3, [r7, #12]
   2e492:	691b      	ldr	r3, [r3, #16]
   2e494:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2e496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e498:	2b00      	cmp	r3, #0
   2e49a:	d115      	bne.n	2e4c8 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2e49c:	68fb      	ldr	r3, [r7, #12]
   2e49e:	681b      	ldr	r3, [r3, #0]
   2e4a0:	2100      	movs	r1, #0
   2e4a2:	0018      	movs	r0, r3
   2e4a4:	4b9d      	ldr	r3, [pc, #628]	; (2e71c <f_write+0x33c>)
   2e4a6:	4798      	blx	r3
   2e4a8:	0003      	movs	r3, r0
   2e4aa:	627b      	str	r3, [r7, #36]	; 0x24
   2e4ac:	68fb      	ldr	r3, [r7, #12]
   2e4ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e4b0:	611a      	str	r2, [r3, #16]
   2e4b2:	e009      	b.n	2e4c8 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2e4b4:	68fb      	ldr	r3, [r7, #12]
   2e4b6:	681a      	ldr	r2, [r3, #0]
   2e4b8:	68fb      	ldr	r3, [r7, #12]
   2e4ba:	695b      	ldr	r3, [r3, #20]
   2e4bc:	0019      	movs	r1, r3
   2e4be:	0010      	movs	r0, r2
   2e4c0:	4b96      	ldr	r3, [pc, #600]	; (2e71c <f_write+0x33c>)
   2e4c2:	4798      	blx	r3
   2e4c4:	0003      	movs	r3, r0
   2e4c6:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e4ca:	2b00      	cmp	r3, #0
   2e4cc:	d100      	bne.n	2e4d0 <f_write+0xf0>
   2e4ce:	e10c      	b.n	2e6ea <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e4d2:	2b01      	cmp	r3, #1
   2e4d4:	d109      	bne.n	2e4ea <f_write+0x10a>
   2e4d6:	68fb      	ldr	r3, [r7, #12]
   2e4d8:	799b      	ldrb	r3, [r3, #6]
   2e4da:	2280      	movs	r2, #128	; 0x80
   2e4dc:	4252      	negs	r2, r2
   2e4de:	4313      	orrs	r3, r2
   2e4e0:	b2da      	uxtb	r2, r3
   2e4e2:	68fb      	ldr	r3, [r7, #12]
   2e4e4:	719a      	strb	r2, [r3, #6]
   2e4e6:	2302      	movs	r3, #2
   2e4e8:	e112      	b.n	2e710 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2e4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e4ec:	3301      	adds	r3, #1
   2e4ee:	d109      	bne.n	2e504 <f_write+0x124>
   2e4f0:	68fb      	ldr	r3, [r7, #12]
   2e4f2:	799b      	ldrb	r3, [r3, #6]
   2e4f4:	2280      	movs	r2, #128	; 0x80
   2e4f6:	4252      	negs	r2, r2
   2e4f8:	4313      	orrs	r3, r2
   2e4fa:	b2da      	uxtb	r2, r3
   2e4fc:	68fb      	ldr	r3, [r7, #12]
   2e4fe:	719a      	strb	r2, [r3, #6]
   2e500:	2301      	movs	r3, #1
   2e502:	e105      	b.n	2e710 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2e504:	68fb      	ldr	r3, [r7, #12]
   2e506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e508:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2e50a:	68fb      	ldr	r3, [r7, #12]
   2e50c:	681b      	ldr	r3, [r3, #0]
   2e50e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e510:	68fb      	ldr	r3, [r7, #12]
   2e512:	699b      	ldr	r3, [r3, #24]
   2e514:	429a      	cmp	r2, r3
   2e516:	d111      	bne.n	2e53c <f_write+0x15c>
   2e518:	68fb      	ldr	r3, [r7, #12]
   2e51a:	681b      	ldr	r3, [r3, #0]
   2e51c:	2100      	movs	r1, #0
   2e51e:	0018      	movs	r0, r3
   2e520:	4b7f      	ldr	r3, [pc, #508]	; (2e720 <f_write+0x340>)
   2e522:	4798      	blx	r3
   2e524:	1e03      	subs	r3, r0, #0
   2e526:	d009      	beq.n	2e53c <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2e528:	68fb      	ldr	r3, [r7, #12]
   2e52a:	799b      	ldrb	r3, [r3, #6]
   2e52c:	2280      	movs	r2, #128	; 0x80
   2e52e:	4252      	negs	r2, r2
   2e530:	4313      	orrs	r3, r2
   2e532:	b2da      	uxtb	r2, r3
   2e534:	68fb      	ldr	r3, [r7, #12]
   2e536:	719a      	strb	r2, [r3, #6]
   2e538:	2301      	movs	r3, #1
   2e53a:	e0e9      	b.n	2e710 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2e53c:	68fb      	ldr	r3, [r7, #12]
   2e53e:	681a      	ldr	r2, [r3, #0]
   2e540:	68fb      	ldr	r3, [r7, #12]
   2e542:	695b      	ldr	r3, [r3, #20]
   2e544:	0019      	movs	r1, r3
   2e546:	0010      	movs	r0, r2
   2e548:	4b76      	ldr	r3, [pc, #472]	; (2e724 <f_write+0x344>)
   2e54a:	4798      	blx	r3
   2e54c:	0003      	movs	r3, r0
   2e54e:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2e550:	693b      	ldr	r3, [r7, #16]
   2e552:	2b00      	cmp	r3, #0
   2e554:	d109      	bne.n	2e56a <f_write+0x18a>
   2e556:	68fb      	ldr	r3, [r7, #12]
   2e558:	799b      	ldrb	r3, [r3, #6]
   2e55a:	2280      	movs	r2, #128	; 0x80
   2e55c:	4252      	negs	r2, r2
   2e55e:	4313      	orrs	r3, r2
   2e560:	b2da      	uxtb	r2, r3
   2e562:	68fb      	ldr	r3, [r7, #12]
   2e564:	719a      	strb	r2, [r3, #6]
   2e566:	2302      	movs	r3, #2
   2e568:	e0d2      	b.n	2e710 <f_write+0x330>
			sect += csect;
   2e56a:	2316      	movs	r3, #22
   2e56c:	18fb      	adds	r3, r7, r3
   2e56e:	781b      	ldrb	r3, [r3, #0]
   2e570:	693a      	ldr	r2, [r7, #16]
   2e572:	18d3      	adds	r3, r2, r3
   2e574:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2e576:	687b      	ldr	r3, [r7, #4]
   2e578:	0a5b      	lsrs	r3, r3, #9
   2e57a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2e57c:	69fb      	ldr	r3, [r7, #28]
   2e57e:	2b00      	cmp	r3, #0
   2e580:	d048      	beq.n	2e614 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2e582:	2316      	movs	r3, #22
   2e584:	18fb      	adds	r3, r7, r3
   2e586:	781a      	ldrb	r2, [r3, #0]
   2e588:	69fb      	ldr	r3, [r7, #28]
   2e58a:	18d2      	adds	r2, r2, r3
   2e58c:	68fb      	ldr	r3, [r7, #12]
   2e58e:	681b      	ldr	r3, [r3, #0]
   2e590:	789b      	ldrb	r3, [r3, #2]
   2e592:	429a      	cmp	r2, r3
   2e594:	d908      	bls.n	2e5a8 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2e596:	68fb      	ldr	r3, [r7, #12]
   2e598:	681b      	ldr	r3, [r3, #0]
   2e59a:	789b      	ldrb	r3, [r3, #2]
   2e59c:	001a      	movs	r2, r3
   2e59e:	2316      	movs	r3, #22
   2e5a0:	18fb      	adds	r3, r7, r3
   2e5a2:	781b      	ldrb	r3, [r3, #0]
   2e5a4:	1ad3      	subs	r3, r2, r3
   2e5a6:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2e5a8:	68fb      	ldr	r3, [r7, #12]
   2e5aa:	681b      	ldr	r3, [r3, #0]
   2e5ac:	7858      	ldrb	r0, [r3, #1]
   2e5ae:	69fb      	ldr	r3, [r7, #28]
   2e5b0:	b2db      	uxtb	r3, r3
   2e5b2:	693a      	ldr	r2, [r7, #16]
   2e5b4:	69b9      	ldr	r1, [r7, #24]
   2e5b6:	4c5c      	ldr	r4, [pc, #368]	; (2e728 <f_write+0x348>)
   2e5b8:	47a0      	blx	r4
   2e5ba:	1e03      	subs	r3, r0, #0
   2e5bc:	d009      	beq.n	2e5d2 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2e5be:	68fb      	ldr	r3, [r7, #12]
   2e5c0:	799b      	ldrb	r3, [r3, #6]
   2e5c2:	2280      	movs	r2, #128	; 0x80
   2e5c4:	4252      	negs	r2, r2
   2e5c6:	4313      	orrs	r3, r2
   2e5c8:	b2da      	uxtb	r2, r3
   2e5ca:	68fb      	ldr	r3, [r7, #12]
   2e5cc:	719a      	strb	r2, [r3, #6]
   2e5ce:	2301      	movs	r3, #1
   2e5d0:	e09e      	b.n	2e710 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2e5d2:	68fb      	ldr	r3, [r7, #12]
   2e5d4:	681b      	ldr	r3, [r3, #0]
   2e5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e5d8:	693b      	ldr	r3, [r7, #16]
   2e5da:	1ad2      	subs	r2, r2, r3
   2e5dc:	69fb      	ldr	r3, [r7, #28]
   2e5de:	429a      	cmp	r2, r3
   2e5e0:	d214      	bcs.n	2e60c <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2e5e2:	68fb      	ldr	r3, [r7, #12]
   2e5e4:	681b      	ldr	r3, [r3, #0]
   2e5e6:	3330      	adds	r3, #48	; 0x30
   2e5e8:	0018      	movs	r0, r3
   2e5ea:	68fb      	ldr	r3, [r7, #12]
   2e5ec:	681b      	ldr	r3, [r3, #0]
   2e5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e5f0:	693b      	ldr	r3, [r7, #16]
   2e5f2:	1ad3      	subs	r3, r2, r3
   2e5f4:	025b      	lsls	r3, r3, #9
   2e5f6:	69ba      	ldr	r2, [r7, #24]
   2e5f8:	18d1      	adds	r1, r2, r3
   2e5fa:	2380      	movs	r3, #128	; 0x80
   2e5fc:	009b      	lsls	r3, r3, #2
   2e5fe:	001a      	movs	r2, r3
   2e600:	4b4a      	ldr	r3, [pc, #296]	; (2e72c <f_write+0x34c>)
   2e602:	4798      	blx	r3
					fp->fs->wflag = 0;
   2e604:	68fb      	ldr	r3, [r7, #12]
   2e606:	681b      	ldr	r3, [r3, #0]
   2e608:	2200      	movs	r2, #0
   2e60a:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2e60c:	69fb      	ldr	r3, [r7, #28]
   2e60e:	025b      	lsls	r3, r3, #9
   2e610:	623b      	str	r3, [r7, #32]
				continue;
   2e612:	e051      	b.n	2e6b8 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2e614:	68fb      	ldr	r3, [r7, #12]
   2e616:	689a      	ldr	r2, [r3, #8]
   2e618:	68fb      	ldr	r3, [r7, #12]
   2e61a:	68db      	ldr	r3, [r3, #12]
   2e61c:	429a      	cmp	r2, r3
   2e61e:	d315      	bcc.n	2e64c <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2e620:	68fb      	ldr	r3, [r7, #12]
   2e622:	681b      	ldr	r3, [r3, #0]
   2e624:	2100      	movs	r1, #0
   2e626:	0018      	movs	r0, r3
   2e628:	4b3d      	ldr	r3, [pc, #244]	; (2e720 <f_write+0x340>)
   2e62a:	4798      	blx	r3
   2e62c:	1e03      	subs	r3, r0, #0
   2e62e:	d009      	beq.n	2e644 <f_write+0x264>
   2e630:	68fb      	ldr	r3, [r7, #12]
   2e632:	799b      	ldrb	r3, [r3, #6]
   2e634:	2280      	movs	r2, #128	; 0x80
   2e636:	4252      	negs	r2, r2
   2e638:	4313      	orrs	r3, r2
   2e63a:	b2da      	uxtb	r2, r3
   2e63c:	68fb      	ldr	r3, [r7, #12]
   2e63e:	719a      	strb	r2, [r3, #6]
   2e640:	2301      	movs	r3, #1
   2e642:	e065      	b.n	2e710 <f_write+0x330>
				fp->fs->winsect = sect;
   2e644:	68fb      	ldr	r3, [r7, #12]
   2e646:	681b      	ldr	r3, [r3, #0]
   2e648:	693a      	ldr	r2, [r7, #16]
   2e64a:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2e64c:	68fb      	ldr	r3, [r7, #12]
   2e64e:	693a      	ldr	r2, [r7, #16]
   2e650:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2e652:	68fb      	ldr	r3, [r7, #12]
   2e654:	689b      	ldr	r3, [r3, #8]
   2e656:	05db      	lsls	r3, r3, #23
   2e658:	0ddb      	lsrs	r3, r3, #23
   2e65a:	2280      	movs	r2, #128	; 0x80
   2e65c:	0092      	lsls	r2, r2, #2
   2e65e:	1ad3      	subs	r3, r2, r3
   2e660:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2e662:	6a3a      	ldr	r2, [r7, #32]
   2e664:	687b      	ldr	r3, [r7, #4]
   2e666:	429a      	cmp	r2, r3
   2e668:	d901      	bls.n	2e66e <f_write+0x28e>
   2e66a:	687b      	ldr	r3, [r7, #4]
   2e66c:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2e66e:	68fb      	ldr	r3, [r7, #12]
   2e670:	681a      	ldr	r2, [r3, #0]
   2e672:	68fb      	ldr	r3, [r7, #12]
   2e674:	699b      	ldr	r3, [r3, #24]
   2e676:	0019      	movs	r1, r3
   2e678:	0010      	movs	r0, r2
   2e67a:	4b29      	ldr	r3, [pc, #164]	; (2e720 <f_write+0x340>)
   2e67c:	4798      	blx	r3
   2e67e:	1e03      	subs	r3, r0, #0
   2e680:	d009      	beq.n	2e696 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2e682:	68fb      	ldr	r3, [r7, #12]
   2e684:	799b      	ldrb	r3, [r3, #6]
   2e686:	2280      	movs	r2, #128	; 0x80
   2e688:	4252      	negs	r2, r2
   2e68a:	4313      	orrs	r3, r2
   2e68c:	b2da      	uxtb	r2, r3
   2e68e:	68fb      	ldr	r3, [r7, #12]
   2e690:	719a      	strb	r2, [r3, #6]
   2e692:	2301      	movs	r3, #1
   2e694:	e03c      	b.n	2e710 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2e696:	68fb      	ldr	r3, [r7, #12]
   2e698:	681a      	ldr	r2, [r3, #0]
   2e69a:	68fb      	ldr	r3, [r7, #12]
   2e69c:	689b      	ldr	r3, [r3, #8]
   2e69e:	05db      	lsls	r3, r3, #23
   2e6a0:	0ddb      	lsrs	r3, r3, #23
   2e6a2:	3330      	adds	r3, #48	; 0x30
   2e6a4:	18d3      	adds	r3, r2, r3
   2e6a6:	6a3a      	ldr	r2, [r7, #32]
   2e6a8:	69b9      	ldr	r1, [r7, #24]
   2e6aa:	0018      	movs	r0, r3
   2e6ac:	4b1f      	ldr	r3, [pc, #124]	; (2e72c <f_write+0x34c>)
   2e6ae:	4798      	blx	r3
		fp->fs->wflag = 1;
   2e6b0:	68fb      	ldr	r3, [r7, #12]
   2e6b2:	681b      	ldr	r3, [r3, #0]
   2e6b4:	2201      	movs	r2, #1
   2e6b6:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2e6b8:	69ba      	ldr	r2, [r7, #24]
   2e6ba:	6a3b      	ldr	r3, [r7, #32]
   2e6bc:	18d3      	adds	r3, r2, r3
   2e6be:	61bb      	str	r3, [r7, #24]
   2e6c0:	68fb      	ldr	r3, [r7, #12]
   2e6c2:	689a      	ldr	r2, [r3, #8]
   2e6c4:	6a3b      	ldr	r3, [r7, #32]
   2e6c6:	18d2      	adds	r2, r2, r3
   2e6c8:	68fb      	ldr	r3, [r7, #12]
   2e6ca:	609a      	str	r2, [r3, #8]
   2e6cc:	683b      	ldr	r3, [r7, #0]
   2e6ce:	681a      	ldr	r2, [r3, #0]
   2e6d0:	6a3b      	ldr	r3, [r7, #32]
   2e6d2:	18d2      	adds	r2, r2, r3
   2e6d4:	683b      	ldr	r3, [r7, #0]
   2e6d6:	601a      	str	r2, [r3, #0]
   2e6d8:	687a      	ldr	r2, [r7, #4]
   2e6da:	6a3b      	ldr	r3, [r7, #32]
   2e6dc:	1ad3      	subs	r3, r2, r3
   2e6de:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2e6e0:	687b      	ldr	r3, [r7, #4]
   2e6e2:	2b00      	cmp	r3, #0
   2e6e4:	d000      	beq.n	2e6e8 <f_write+0x308>
   2e6e6:	e6b7      	b.n	2e458 <f_write+0x78>
   2e6e8:	e000      	b.n	2e6ec <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2e6ea:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2e6ec:	68fb      	ldr	r3, [r7, #12]
   2e6ee:	689a      	ldr	r2, [r3, #8]
   2e6f0:	68fb      	ldr	r3, [r7, #12]
   2e6f2:	68db      	ldr	r3, [r3, #12]
   2e6f4:	429a      	cmp	r2, r3
   2e6f6:	d903      	bls.n	2e700 <f_write+0x320>
   2e6f8:	68fb      	ldr	r3, [r7, #12]
   2e6fa:	689a      	ldr	r2, [r3, #8]
   2e6fc:	68fb      	ldr	r3, [r7, #12]
   2e6fe:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2e700:	68fb      	ldr	r3, [r7, #12]
   2e702:	799b      	ldrb	r3, [r3, #6]
   2e704:	2220      	movs	r2, #32
   2e706:	4313      	orrs	r3, r2
   2e708:	b2da      	uxtb	r2, r3
   2e70a:	68fb      	ldr	r3, [r7, #12]
   2e70c:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2e70e:	2300      	movs	r3, #0
}
   2e710:	0018      	movs	r0, r3
   2e712:	46bd      	mov	sp, r7
   2e714:	b00b      	add	sp, #44	; 0x2c
   2e716:	bd90      	pop	{r4, r7, pc}
   2e718:	0002de05 	.word	0x0002de05
   2e71c:	0002c491 	.word	0x0002c491
   2e720:	0002bd89 	.word	0x0002bd89
   2e724:	0002bfe9 	.word	0x0002bfe9
   2e728:	0002ba75 	.word	0x0002ba75
   2e72c:	0002bca5 	.word	0x0002bca5

0002e730 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2e730:	b590      	push	{r4, r7, lr}
   2e732:	b087      	sub	sp, #28
   2e734:	af00      	add	r7, sp, #0
   2e736:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2e738:	687b      	ldr	r3, [r7, #4]
   2e73a:	681a      	ldr	r2, [r3, #0]
   2e73c:	687b      	ldr	r3, [r7, #4]
   2e73e:	889b      	ldrh	r3, [r3, #4]
   2e740:	2117      	movs	r1, #23
   2e742:	187c      	adds	r4, r7, r1
   2e744:	0019      	movs	r1, r3
   2e746:	0010      	movs	r0, r2
   2e748:	4b55      	ldr	r3, [pc, #340]	; (2e8a0 <f_sync+0x170>)
   2e74a:	4798      	blx	r3
   2e74c:	0003      	movs	r3, r0
   2e74e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2e750:	2317      	movs	r3, #23
   2e752:	18fb      	adds	r3, r7, r3
   2e754:	781b      	ldrb	r3, [r3, #0]
   2e756:	2b00      	cmp	r3, #0
   2e758:	d000      	beq.n	2e75c <f_sync+0x2c>
   2e75a:	e09a      	b.n	2e892 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2e75c:	687b      	ldr	r3, [r7, #4]
   2e75e:	799b      	ldrb	r3, [r3, #6]
   2e760:	001a      	movs	r2, r3
   2e762:	2320      	movs	r3, #32
   2e764:	4013      	ands	r3, r2
   2e766:	d100      	bne.n	2e76a <f_sync+0x3a>
   2e768:	e093      	b.n	2e892 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2e76a:	687b      	ldr	r3, [r7, #4]
   2e76c:	681a      	ldr	r2, [r3, #0]
   2e76e:	687b      	ldr	r3, [r7, #4]
   2e770:	69db      	ldr	r3, [r3, #28]
   2e772:	2117      	movs	r1, #23
   2e774:	187c      	adds	r4, r7, r1
   2e776:	0019      	movs	r1, r3
   2e778:	0010      	movs	r0, r2
   2e77a:	4b4a      	ldr	r3, [pc, #296]	; (2e8a4 <f_sync+0x174>)
   2e77c:	4798      	blx	r3
   2e77e:	0003      	movs	r3, r0
   2e780:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2e782:	2317      	movs	r3, #23
   2e784:	18fb      	adds	r3, r7, r3
   2e786:	781b      	ldrb	r3, [r3, #0]
   2e788:	2b00      	cmp	r3, #0
   2e78a:	d000      	beq.n	2e78e <f_sync+0x5e>
   2e78c:	e081      	b.n	2e892 <f_sync+0x162>
				dir = fp->dir_ptr;
   2e78e:	687b      	ldr	r3, [r7, #4]
   2e790:	6a1b      	ldr	r3, [r3, #32]
   2e792:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2e794:	693b      	ldr	r3, [r7, #16]
   2e796:	330b      	adds	r3, #11
   2e798:	693a      	ldr	r2, [r7, #16]
   2e79a:	320b      	adds	r2, #11
   2e79c:	7812      	ldrb	r2, [r2, #0]
   2e79e:	2120      	movs	r1, #32
   2e7a0:	430a      	orrs	r2, r1
   2e7a2:	b2d2      	uxtb	r2, r2
   2e7a4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2e7a6:	693b      	ldr	r3, [r7, #16]
   2e7a8:	331c      	adds	r3, #28
   2e7aa:	001a      	movs	r2, r3
   2e7ac:	687b      	ldr	r3, [r7, #4]
   2e7ae:	68db      	ldr	r3, [r3, #12]
   2e7b0:	b2db      	uxtb	r3, r3
   2e7b2:	7013      	strb	r3, [r2, #0]
   2e7b4:	693b      	ldr	r3, [r7, #16]
   2e7b6:	331d      	adds	r3, #29
   2e7b8:	001a      	movs	r2, r3
   2e7ba:	687b      	ldr	r3, [r7, #4]
   2e7bc:	68db      	ldr	r3, [r3, #12]
   2e7be:	b29b      	uxth	r3, r3
   2e7c0:	0a1b      	lsrs	r3, r3, #8
   2e7c2:	b29b      	uxth	r3, r3
   2e7c4:	b2db      	uxtb	r3, r3
   2e7c6:	7013      	strb	r3, [r2, #0]
   2e7c8:	693b      	ldr	r3, [r7, #16]
   2e7ca:	331e      	adds	r3, #30
   2e7cc:	001a      	movs	r2, r3
   2e7ce:	687b      	ldr	r3, [r7, #4]
   2e7d0:	68db      	ldr	r3, [r3, #12]
   2e7d2:	0c1b      	lsrs	r3, r3, #16
   2e7d4:	b2db      	uxtb	r3, r3
   2e7d6:	7013      	strb	r3, [r2, #0]
   2e7d8:	693b      	ldr	r3, [r7, #16]
   2e7da:	331f      	adds	r3, #31
   2e7dc:	001a      	movs	r2, r3
   2e7de:	687b      	ldr	r3, [r7, #4]
   2e7e0:	68db      	ldr	r3, [r3, #12]
   2e7e2:	0e1b      	lsrs	r3, r3, #24
   2e7e4:	b2db      	uxtb	r3, r3
   2e7e6:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2e7e8:	693b      	ldr	r3, [r7, #16]
   2e7ea:	331a      	adds	r3, #26
   2e7ec:	001a      	movs	r2, r3
   2e7ee:	687b      	ldr	r3, [r7, #4]
   2e7f0:	691b      	ldr	r3, [r3, #16]
   2e7f2:	b2db      	uxtb	r3, r3
   2e7f4:	7013      	strb	r3, [r2, #0]
   2e7f6:	693b      	ldr	r3, [r7, #16]
   2e7f8:	331b      	adds	r3, #27
   2e7fa:	001a      	movs	r2, r3
   2e7fc:	687b      	ldr	r3, [r7, #4]
   2e7fe:	691b      	ldr	r3, [r3, #16]
   2e800:	b29b      	uxth	r3, r3
   2e802:	0a1b      	lsrs	r3, r3, #8
   2e804:	b29b      	uxth	r3, r3
   2e806:	b2db      	uxtb	r3, r3
   2e808:	7013      	strb	r3, [r2, #0]
   2e80a:	693b      	ldr	r3, [r7, #16]
   2e80c:	3314      	adds	r3, #20
   2e80e:	001a      	movs	r2, r3
   2e810:	687b      	ldr	r3, [r7, #4]
   2e812:	691b      	ldr	r3, [r3, #16]
   2e814:	0c1b      	lsrs	r3, r3, #16
   2e816:	b2db      	uxtb	r3, r3
   2e818:	7013      	strb	r3, [r2, #0]
   2e81a:	693b      	ldr	r3, [r7, #16]
   2e81c:	3315      	adds	r3, #21
   2e81e:	001a      	movs	r2, r3
   2e820:	687b      	ldr	r3, [r7, #4]
   2e822:	691b      	ldr	r3, [r3, #16]
   2e824:	0c1b      	lsrs	r3, r3, #16
   2e826:	b29b      	uxth	r3, r3
   2e828:	0a1b      	lsrs	r3, r3, #8
   2e82a:	b29b      	uxth	r3, r3
   2e82c:	b2db      	uxtb	r3, r3
   2e82e:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2e830:	4b1d      	ldr	r3, [pc, #116]	; (2e8a8 <f_sync+0x178>)
   2e832:	4798      	blx	r3
   2e834:	0003      	movs	r3, r0
   2e836:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2e838:	693b      	ldr	r3, [r7, #16]
   2e83a:	3316      	adds	r3, #22
   2e83c:	68fa      	ldr	r2, [r7, #12]
   2e83e:	b2d2      	uxtb	r2, r2
   2e840:	701a      	strb	r2, [r3, #0]
   2e842:	693b      	ldr	r3, [r7, #16]
   2e844:	3317      	adds	r3, #23
   2e846:	68fa      	ldr	r2, [r7, #12]
   2e848:	b292      	uxth	r2, r2
   2e84a:	0a12      	lsrs	r2, r2, #8
   2e84c:	b292      	uxth	r2, r2
   2e84e:	b2d2      	uxtb	r2, r2
   2e850:	701a      	strb	r2, [r3, #0]
   2e852:	693b      	ldr	r3, [r7, #16]
   2e854:	3318      	adds	r3, #24
   2e856:	68fa      	ldr	r2, [r7, #12]
   2e858:	0c12      	lsrs	r2, r2, #16
   2e85a:	b2d2      	uxtb	r2, r2
   2e85c:	701a      	strb	r2, [r3, #0]
   2e85e:	693b      	ldr	r3, [r7, #16]
   2e860:	3319      	adds	r3, #25
   2e862:	68fa      	ldr	r2, [r7, #12]
   2e864:	0e12      	lsrs	r2, r2, #24
   2e866:	b2d2      	uxtb	r2, r2
   2e868:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2e86a:	687b      	ldr	r3, [r7, #4]
   2e86c:	799b      	ldrb	r3, [r3, #6]
   2e86e:	2220      	movs	r2, #32
   2e870:	4393      	bics	r3, r2
   2e872:	b2da      	uxtb	r2, r3
   2e874:	687b      	ldr	r3, [r7, #4]
   2e876:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2e878:	687b      	ldr	r3, [r7, #4]
   2e87a:	681b      	ldr	r3, [r3, #0]
   2e87c:	2201      	movs	r2, #1
   2e87e:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2e880:	687b      	ldr	r3, [r7, #4]
   2e882:	681b      	ldr	r3, [r3, #0]
   2e884:	2217      	movs	r2, #23
   2e886:	18bc      	adds	r4, r7, r2
   2e888:	0018      	movs	r0, r3
   2e88a:	4b08      	ldr	r3, [pc, #32]	; (2e8ac <f_sync+0x17c>)
   2e88c:	4798      	blx	r3
   2e88e:	0003      	movs	r3, r0
   2e890:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2e892:	2317      	movs	r3, #23
   2e894:	18fb      	adds	r3, r7, r3
   2e896:	781b      	ldrb	r3, [r3, #0]
}
   2e898:	0018      	movs	r0, r3
   2e89a:	46bd      	mov	sp, r7
   2e89c:	b007      	add	sp, #28
   2e89e:	bd90      	pop	{r4, r7, pc}
   2e8a0:	0002de05 	.word	0x0002de05
   2e8a4:	0002bd89 	.word	0x0002bd89
   2e8a8:	0002bc45 	.word	0x0002bc45
   2e8ac:	0002be51 	.word	0x0002be51

0002e8b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2e8b0:	b590      	push	{r4, r7, lr}
   2e8b2:	b085      	sub	sp, #20
   2e8b4:	af00      	add	r7, sp, #0
   2e8b6:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2e8b8:	230f      	movs	r3, #15
   2e8ba:	18fc      	adds	r4, r7, r3
   2e8bc:	687b      	ldr	r3, [r7, #4]
   2e8be:	0018      	movs	r0, r3
   2e8c0:	4b09      	ldr	r3, [pc, #36]	; (2e8e8 <f_close+0x38>)
   2e8c2:	4798      	blx	r3
   2e8c4:	0003      	movs	r3, r0
   2e8c6:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2e8c8:	230f      	movs	r3, #15
   2e8ca:	18fb      	adds	r3, r7, r3
   2e8cc:	781b      	ldrb	r3, [r3, #0]
   2e8ce:	2b00      	cmp	r3, #0
   2e8d0:	d102      	bne.n	2e8d8 <f_close+0x28>
   2e8d2:	687b      	ldr	r3, [r7, #4]
   2e8d4:	2200      	movs	r2, #0
   2e8d6:	601a      	str	r2, [r3, #0]
	return res;
   2e8d8:	230f      	movs	r3, #15
   2e8da:	18fb      	adds	r3, r7, r3
   2e8dc:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2e8de:	0018      	movs	r0, r3
   2e8e0:	46bd      	mov	sp, r7
   2e8e2:	b005      	add	sp, #20
   2e8e4:	bd90      	pop	{r4, r7, pc}
   2e8e6:	46c0      	nop			; (mov r8, r8)
   2e8e8:	0002e731 	.word	0x0002e731

0002e8ec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2e8ec:	b580      	push	{r7, lr}
   2e8ee:	b084      	sub	sp, #16
   2e8f0:	af00      	add	r7, sp, #0
   2e8f2:	0002      	movs	r2, r0
   2e8f4:	6039      	str	r1, [r7, #0]
   2e8f6:	1dbb      	adds	r3, r7, #6
   2e8f8:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2e8fa:	1dbb      	adds	r3, r7, #6
   2e8fc:	881b      	ldrh	r3, [r3, #0]
   2e8fe:	2b7f      	cmp	r3, #127	; 0x7f
   2e900:	d805      	bhi.n	2e90e <ff_convert+0x22>
		c = src;
   2e902:	230e      	movs	r3, #14
   2e904:	18fb      	adds	r3, r7, r3
   2e906:	1dba      	adds	r2, r7, #6
   2e908:	8812      	ldrh	r2, [r2, #0]
   2e90a:	801a      	strh	r2, [r3, #0]
   2e90c:	e03a      	b.n	2e984 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2e90e:	683b      	ldr	r3, [r7, #0]
   2e910:	2b00      	cmp	r3, #0
   2e912:	d010      	beq.n	2e936 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2e914:	1dbb      	adds	r3, r7, #6
   2e916:	881b      	ldrh	r3, [r3, #0]
   2e918:	2bff      	cmp	r3, #255	; 0xff
   2e91a:	d807      	bhi.n	2e92c <ff_convert+0x40>
   2e91c:	1dbb      	adds	r3, r7, #6
   2e91e:	881b      	ldrh	r3, [r3, #0]
   2e920:	3b80      	subs	r3, #128	; 0x80
   2e922:	001a      	movs	r2, r3
   2e924:	4b1b      	ldr	r3, [pc, #108]	; (2e994 <ff_convert+0xa8>)
   2e926:	0052      	lsls	r2, r2, #1
   2e928:	5ad2      	ldrh	r2, [r2, r3]
   2e92a:	e000      	b.n	2e92e <ff_convert+0x42>
   2e92c:	2200      	movs	r2, #0
   2e92e:	230e      	movs	r3, #14
   2e930:	18fb      	adds	r3, r7, r3
   2e932:	801a      	strh	r2, [r3, #0]
   2e934:	e026      	b.n	2e984 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2e936:	230e      	movs	r3, #14
   2e938:	18fb      	adds	r3, r7, r3
   2e93a:	2200      	movs	r2, #0
   2e93c:	801a      	strh	r2, [r3, #0]
   2e93e:	e010      	b.n	2e962 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2e940:	230e      	movs	r3, #14
   2e942:	18fb      	adds	r3, r7, r3
   2e944:	881a      	ldrh	r2, [r3, #0]
   2e946:	4b13      	ldr	r3, [pc, #76]	; (2e994 <ff_convert+0xa8>)
   2e948:	0052      	lsls	r2, r2, #1
   2e94a:	5ad3      	ldrh	r3, [r2, r3]
   2e94c:	1dba      	adds	r2, r7, #6
   2e94e:	8812      	ldrh	r2, [r2, #0]
   2e950:	429a      	cmp	r2, r3
   2e952:	d00c      	beq.n	2e96e <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2e954:	230e      	movs	r3, #14
   2e956:	18fb      	adds	r3, r7, r3
   2e958:	881a      	ldrh	r2, [r3, #0]
   2e95a:	230e      	movs	r3, #14
   2e95c:	18fb      	adds	r3, r7, r3
   2e95e:	3201      	adds	r2, #1
   2e960:	801a      	strh	r2, [r3, #0]
   2e962:	230e      	movs	r3, #14
   2e964:	18fb      	adds	r3, r7, r3
   2e966:	881b      	ldrh	r3, [r3, #0]
   2e968:	2b7f      	cmp	r3, #127	; 0x7f
   2e96a:	d9e9      	bls.n	2e940 <ff_convert+0x54>
   2e96c:	e000      	b.n	2e970 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2e96e:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2e970:	230e      	movs	r3, #14
   2e972:	18fb      	adds	r3, r7, r3
   2e974:	881b      	ldrh	r3, [r3, #0]
   2e976:	3380      	adds	r3, #128	; 0x80
   2e978:	b29a      	uxth	r2, r3
   2e97a:	230e      	movs	r3, #14
   2e97c:	18fb      	adds	r3, r7, r3
   2e97e:	21ff      	movs	r1, #255	; 0xff
   2e980:	400a      	ands	r2, r1
   2e982:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2e984:	230e      	movs	r3, #14
   2e986:	18fb      	adds	r3, r7, r3
   2e988:	881b      	ldrh	r3, [r3, #0]
}
   2e98a:	0018      	movs	r0, r3
   2e98c:	46bd      	mov	sp, r7
   2e98e:	b004      	add	sp, #16
   2e990:	bd80      	pop	{r7, pc}
   2e992:	46c0      	nop			; (mov r8, r8)
   2e994:	00039ef0 	.word	0x00039ef0

0002e998 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2e998:	b580      	push	{r7, lr}
   2e99a:	b084      	sub	sp, #16
   2e99c:	af00      	add	r7, sp, #0
   2e99e:	0002      	movs	r2, r0
   2e9a0:	1dbb      	adds	r3, r7, #6
   2e9a2:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2e9a4:	2300      	movs	r3, #0
   2e9a6:	60fb      	str	r3, [r7, #12]
   2e9a8:	e002      	b.n	2e9b0 <ff_wtoupper+0x18>
   2e9aa:	68fb      	ldr	r3, [r7, #12]
   2e9ac:	3301      	adds	r3, #1
   2e9ae:	60fb      	str	r3, [r7, #12]
   2e9b0:	4b0f      	ldr	r3, [pc, #60]	; (2e9f0 <ff_wtoupper+0x58>)
   2e9b2:	68fa      	ldr	r2, [r7, #12]
   2e9b4:	0052      	lsls	r2, r2, #1
   2e9b6:	5ad3      	ldrh	r3, [r2, r3]
   2e9b8:	2b00      	cmp	r3, #0
   2e9ba:	d007      	beq.n	2e9cc <ff_wtoupper+0x34>
   2e9bc:	4b0c      	ldr	r3, [pc, #48]	; (2e9f0 <ff_wtoupper+0x58>)
   2e9be:	68fa      	ldr	r2, [r7, #12]
   2e9c0:	0052      	lsls	r2, r2, #1
   2e9c2:	5ad3      	ldrh	r3, [r2, r3]
   2e9c4:	1dba      	adds	r2, r7, #6
   2e9c6:	8812      	ldrh	r2, [r2, #0]
   2e9c8:	429a      	cmp	r2, r3
   2e9ca:	d1ee      	bne.n	2e9aa <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2e9cc:	4b08      	ldr	r3, [pc, #32]	; (2e9f0 <ff_wtoupper+0x58>)
   2e9ce:	68fa      	ldr	r2, [r7, #12]
   2e9d0:	0052      	lsls	r2, r2, #1
   2e9d2:	5ad3      	ldrh	r3, [r2, r3]
   2e9d4:	2b00      	cmp	r3, #0
   2e9d6:	d004      	beq.n	2e9e2 <ff_wtoupper+0x4a>
   2e9d8:	4b06      	ldr	r3, [pc, #24]	; (2e9f4 <ff_wtoupper+0x5c>)
   2e9da:	68fa      	ldr	r2, [r7, #12]
   2e9dc:	0052      	lsls	r2, r2, #1
   2e9de:	5ad3      	ldrh	r3, [r2, r3]
   2e9e0:	e001      	b.n	2e9e6 <ff_wtoupper+0x4e>
   2e9e2:	1dbb      	adds	r3, r7, #6
   2e9e4:	881b      	ldrh	r3, [r3, #0]
}
   2e9e6:	0018      	movs	r0, r3
   2e9e8:	46bd      	mov	sp, r7
   2e9ea:	b004      	add	sp, #16
   2e9ec:	bd80      	pop	{r7, pc}
   2e9ee:	46c0      	nop			; (mov r8, r8)
   2e9f0:	00039ff0 	.word	0x00039ff0
   2e9f4:	0003a1d0 	.word	0x0003a1d0

0002e9f8 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2e9f8:	b580      	push	{r7, lr}
   2e9fa:	b084      	sub	sp, #16
   2e9fc:	af00      	add	r7, sp, #0
   2e9fe:	60f8      	str	r0, [r7, #12]
   2ea00:	60b9      	str	r1, [r7, #8]
   2ea02:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2ea04:	68fb      	ldr	r3, [r7, #12]
   2ea06:	68ba      	ldr	r2, [r7, #8]
   2ea08:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2ea0a:	68fb      	ldr	r3, [r7, #12]
   2ea0c:	687a      	ldr	r2, [r7, #4]
   2ea0e:	601a      	str	r2, [r3, #0]
}
   2ea10:	46c0      	nop			; (mov r8, r8)
   2ea12:	46bd      	mov	sp, r7
   2ea14:	b004      	add	sp, #16
   2ea16:	bd80      	pop	{r7, pc}

0002ea18 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2ea18:	b580      	push	{r7, lr}
   2ea1a:	b082      	sub	sp, #8
   2ea1c:	af00      	add	r7, sp, #0
   2ea1e:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2ea20:	687b      	ldr	r3, [r7, #4]
   2ea22:	681b      	ldr	r3, [r3, #0]
   2ea24:	4a07      	ldr	r2, [pc, #28]	; (2ea44 <getNextPacketId+0x2c>)
   2ea26:	4293      	cmp	r3, r2
   2ea28:	d003      	beq.n	2ea32 <getNextPacketId+0x1a>
   2ea2a:	687b      	ldr	r3, [r7, #4]
   2ea2c:	681b      	ldr	r3, [r3, #0]
   2ea2e:	1c5a      	adds	r2, r3, #1
   2ea30:	e000      	b.n	2ea34 <getNextPacketId+0x1c>
   2ea32:	2201      	movs	r2, #1
   2ea34:	687b      	ldr	r3, [r7, #4]
   2ea36:	601a      	str	r2, [r3, #0]
   2ea38:	687b      	ldr	r3, [r7, #4]
   2ea3a:	681b      	ldr	r3, [r3, #0]
}
   2ea3c:	0018      	movs	r0, r3
   2ea3e:	46bd      	mov	sp, r7
   2ea40:	b002      	add	sp, #8
   2ea42:	bd80      	pop	{r7, pc}
   2ea44:	0000ffff 	.word	0x0000ffff

0002ea48 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2ea48:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ea4a:	b087      	sub	sp, #28
   2ea4c:	af00      	add	r7, sp, #0
   2ea4e:	60f8      	str	r0, [r7, #12]
   2ea50:	60b9      	str	r1, [r7, #8]
   2ea52:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2ea54:	2301      	movs	r3, #1
   2ea56:	425b      	negs	r3, r3
   2ea58:	617b      	str	r3, [r7, #20]
        sent = 0;
   2ea5a:	2300      	movs	r3, #0
   2ea5c:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2ea5e:	e01a      	b.n	2ea96 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2ea60:	68fb      	ldr	r3, [r7, #12]
   2ea62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2ea64:	68dc      	ldr	r4, [r3, #12]
   2ea66:	68fb      	ldr	r3, [r7, #12]
   2ea68:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2ea6a:	68fb      	ldr	r3, [r7, #12]
   2ea6c:	691a      	ldr	r2, [r3, #16]
   2ea6e:	693b      	ldr	r3, [r7, #16]
   2ea70:	18d6      	adds	r6, r2, r3
   2ea72:	687b      	ldr	r3, [r7, #4]
   2ea74:	0018      	movs	r0, r3
   2ea76:	4b1a      	ldr	r3, [pc, #104]	; (2eae0 <sendPacket+0x98>)
   2ea78:	4798      	blx	r3
   2ea7a:	0003      	movs	r3, r0
   2ea7c:	68ba      	ldr	r2, [r7, #8]
   2ea7e:	0031      	movs	r1, r6
   2ea80:	0028      	movs	r0, r5
   2ea82:	47a0      	blx	r4
   2ea84:	0003      	movs	r3, r0
   2ea86:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2ea88:	697b      	ldr	r3, [r7, #20]
   2ea8a:	2b00      	cmp	r3, #0
   2ea8c:	db0e      	blt.n	2eaac <sendPacket+0x64>
            break;
        sent += rc;
   2ea8e:	693a      	ldr	r2, [r7, #16]
   2ea90:	697b      	ldr	r3, [r7, #20]
   2ea92:	18d3      	adds	r3, r2, r3
   2ea94:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2ea96:	693a      	ldr	r2, [r7, #16]
   2ea98:	68bb      	ldr	r3, [r7, #8]
   2ea9a:	429a      	cmp	r2, r3
   2ea9c:	da07      	bge.n	2eaae <sendPacket+0x66>
   2ea9e:	687b      	ldr	r3, [r7, #4]
   2eaa0:	0018      	movs	r0, r3
   2eaa2:	4b10      	ldr	r3, [pc, #64]	; (2eae4 <sendPacket+0x9c>)
   2eaa4:	4798      	blx	r3
   2eaa6:	1e03      	subs	r3, r0, #0
   2eaa8:	d0da      	beq.n	2ea60 <sendPacket+0x18>
   2eaaa:	e000      	b.n	2eaae <sendPacket+0x66>
            break;
   2eaac:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2eaae:	693a      	ldr	r2, [r7, #16]
   2eab0:	68bb      	ldr	r3, [r7, #8]
   2eab2:	429a      	cmp	r2, r3
   2eab4:	d10b      	bne.n	2eace <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2eab6:	68fb      	ldr	r3, [r7, #12]
   2eab8:	3354      	adds	r3, #84	; 0x54
   2eaba:	001a      	movs	r2, r3
   2eabc:	68fb      	ldr	r3, [r7, #12]
   2eabe:	699b      	ldr	r3, [r3, #24]
   2eac0:	0019      	movs	r1, r3
   2eac2:	0010      	movs	r0, r2
   2eac4:	4b08      	ldr	r3, [pc, #32]	; (2eae8 <sendPacket+0xa0>)
   2eac6:	4798      	blx	r3
        rc = SUCCESS;
   2eac8:	2300      	movs	r3, #0
   2eaca:	617b      	str	r3, [r7, #20]
   2eacc:	e002      	b.n	2ead4 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2eace:	2301      	movs	r3, #1
   2ead0:	425b      	negs	r3, r3
   2ead2:	617b      	str	r3, [r7, #20]
    return rc;
   2ead4:	697b      	ldr	r3, [r7, #20]
}
   2ead6:	0018      	movs	r0, r3
   2ead8:	46bd      	mov	sp, r7
   2eada:	b007      	add	sp, #28
   2eadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2eade:	46c0      	nop			; (mov r8, r8)
   2eae0:	0002f8a9 	.word	0x0002f8a9
   2eae4:	0002f82d 	.word	0x0002f82d
   2eae8:	0002f881 	.word	0x0002f881

0002eaec <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2eaec:	b580      	push	{r7, lr}
   2eaee:	b086      	sub	sp, #24
   2eaf0:	af00      	add	r7, sp, #0
   2eaf2:	60f8      	str	r0, [r7, #12]
   2eaf4:	60b9      	str	r1, [r7, #8]
   2eaf6:	607a      	str	r2, [r7, #4]
   2eaf8:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2eafa:	68fb      	ldr	r3, [r7, #12]
   2eafc:	68ba      	ldr	r2, [r7, #8]
   2eafe:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2eb00:	2300      	movs	r3, #0
   2eb02:	617b      	str	r3, [r7, #20]
   2eb04:	e00a      	b.n	2eb1c <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2eb06:	68fa      	ldr	r2, [r7, #12]
   2eb08:	697b      	ldr	r3, [r7, #20]
   2eb0a:	3304      	adds	r3, #4
   2eb0c:	00db      	lsls	r3, r3, #3
   2eb0e:	18d3      	adds	r3, r2, r3
   2eb10:	3304      	adds	r3, #4
   2eb12:	2200      	movs	r2, #0
   2eb14:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2eb16:	697b      	ldr	r3, [r7, #20]
   2eb18:	3301      	adds	r3, #1
   2eb1a:	617b      	str	r3, [r7, #20]
   2eb1c:	697b      	ldr	r3, [r7, #20]
   2eb1e:	2b04      	cmp	r3, #4
   2eb20:	ddf1      	ble.n	2eb06 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2eb22:	68fb      	ldr	r3, [r7, #12]
   2eb24:	687a      	ldr	r2, [r7, #4]
   2eb26:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2eb28:	68fb      	ldr	r3, [r7, #12]
   2eb2a:	683a      	ldr	r2, [r7, #0]
   2eb2c:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2eb2e:	68fb      	ldr	r3, [r7, #12]
   2eb30:	6a3a      	ldr	r2, [r7, #32]
   2eb32:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2eb34:	68fb      	ldr	r3, [r7, #12]
   2eb36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2eb38:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2eb3a:	68fb      	ldr	r3, [r7, #12]
   2eb3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2eb3e:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2eb40:	68fb      	ldr	r3, [r7, #12]
   2eb42:	2200      	movs	r2, #0
   2eb44:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2eb46:	68fb      	ldr	r3, [r7, #12]
   2eb48:	2200      	movs	r2, #0
   2eb4a:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2eb4c:	68fb      	ldr	r3, [r7, #12]
   2eb4e:	2200      	movs	r2, #0
   2eb50:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2eb52:	68fb      	ldr	r3, [r7, #12]
   2eb54:	2201      	movs	r2, #1
   2eb56:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2eb58:	68fb      	ldr	r3, [r7, #12]
   2eb5a:	3354      	adds	r3, #84	; 0x54
   2eb5c:	0018      	movs	r0, r3
   2eb5e:	4b03      	ldr	r3, [pc, #12]	; (2eb6c <MQTTClientInit+0x80>)
   2eb60:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2eb62:	46c0      	nop			; (mov r8, r8)
   2eb64:	46bd      	mov	sp, r7
   2eb66:	b006      	add	sp, #24
   2eb68:	bd80      	pop	{r7, pc}
   2eb6a:	46c0      	nop			; (mov r8, r8)
   2eb6c:	0002f8d1 	.word	0x0002f8d1

0002eb70 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2eb70:	b590      	push	{r4, r7, lr}
   2eb72:	b08b      	sub	sp, #44	; 0x2c
   2eb74:	af00      	add	r7, sp, #0
   2eb76:	60f8      	str	r0, [r7, #12]
   2eb78:	60b9      	str	r1, [r7, #8]
   2eb7a:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2eb7c:	2301      	movs	r3, #1
   2eb7e:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2eb80:	2300      	movs	r3, #0
   2eb82:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2eb84:	2304      	movs	r3, #4
   2eb86:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2eb88:	68bb      	ldr	r3, [r7, #8]
   2eb8a:	2200      	movs	r2, #0
   2eb8c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2eb8e:	2301      	movs	r3, #1
   2eb90:	425b      	negs	r3, r3
   2eb92:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2eb94:	6a3b      	ldr	r3, [r7, #32]
   2eb96:	3301      	adds	r3, #1
   2eb98:	623b      	str	r3, [r7, #32]
   2eb9a:	6a3a      	ldr	r2, [r7, #32]
   2eb9c:	69fb      	ldr	r3, [r7, #28]
   2eb9e:	429a      	cmp	r2, r3
   2eba0:	dd03      	ble.n	2ebaa <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2eba2:	2301      	movs	r3, #1
   2eba4:	425b      	negs	r3, r3
   2eba6:	61bb      	str	r3, [r7, #24]
            goto exit;
   2eba8:	e026      	b.n	2ebf8 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2ebaa:	68fb      	ldr	r3, [r7, #12]
   2ebac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2ebae:	689c      	ldr	r4, [r3, #8]
   2ebb0:	68fb      	ldr	r3, [r7, #12]
   2ebb2:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2ebb4:	687b      	ldr	r3, [r7, #4]
   2ebb6:	2217      	movs	r2, #23
   2ebb8:	18b9      	adds	r1, r7, r2
   2ebba:	2201      	movs	r2, #1
   2ebbc:	47a0      	blx	r4
   2ebbe:	0003      	movs	r3, r0
   2ebc0:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2ebc2:	69bb      	ldr	r3, [r7, #24]
   2ebc4:	2b01      	cmp	r3, #1
   2ebc6:	d116      	bne.n	2ebf6 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2ebc8:	68bb      	ldr	r3, [r7, #8]
   2ebca:	681a      	ldr	r2, [r3, #0]
   2ebcc:	2317      	movs	r3, #23
   2ebce:	18fb      	adds	r3, r7, r3
   2ebd0:	781b      	ldrb	r3, [r3, #0]
   2ebd2:	0019      	movs	r1, r3
   2ebd4:	237f      	movs	r3, #127	; 0x7f
   2ebd6:	400b      	ands	r3, r1
   2ebd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2ebda:	434b      	muls	r3, r1
   2ebdc:	18d2      	adds	r2, r2, r3
   2ebde:	68bb      	ldr	r3, [r7, #8]
   2ebe0:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2ebe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ebe4:	01db      	lsls	r3, r3, #7
   2ebe6:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2ebe8:	2317      	movs	r3, #23
   2ebea:	18fb      	adds	r3, r7, r3
   2ebec:	781b      	ldrb	r3, [r3, #0]
   2ebee:	b25b      	sxtb	r3, r3
   2ebf0:	2b00      	cmp	r3, #0
   2ebf2:	dbcc      	blt.n	2eb8e <decodePacket+0x1e>
   2ebf4:	e000      	b.n	2ebf8 <decodePacket+0x88>
            goto exit;
   2ebf6:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2ebf8:	6a3b      	ldr	r3, [r7, #32]
}
   2ebfa:	0018      	movs	r0, r3
   2ebfc:	46bd      	mov	sp, r7
   2ebfe:	b00b      	add	sp, #44	; 0x2c
   2ec00:	bd90      	pop	{r4, r7, pc}
	...

0002ec04 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2ec04:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ec06:	46c6      	mov	lr, r8
   2ec08:	b500      	push	{lr}
   2ec0a:	b086      	sub	sp, #24
   2ec0c:	af00      	add	r7, sp, #0
   2ec0e:	6078      	str	r0, [r7, #4]
   2ec10:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2ec12:	2301      	movs	r3, #1
   2ec14:	425b      	negs	r3, r3
   2ec16:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2ec18:	2300      	movs	r3, #0
   2ec1a:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2ec1c:	2300      	movs	r3, #0
   2ec1e:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2ec20:	2300      	movs	r3, #0
   2ec22:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2ec24:	687b      	ldr	r3, [r7, #4]
   2ec26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2ec28:	689c      	ldr	r4, [r3, #8]
   2ec2a:	687b      	ldr	r3, [r7, #4]
   2ec2c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2ec2e:	687b      	ldr	r3, [r7, #4]
   2ec30:	695e      	ldr	r6, [r3, #20]
   2ec32:	683b      	ldr	r3, [r7, #0]
   2ec34:	0018      	movs	r0, r3
   2ec36:	4b2b      	ldr	r3, [pc, #172]	; (2ece4 <readPacket+0xe0>)
   2ec38:	4798      	blx	r3
   2ec3a:	0003      	movs	r3, r0
   2ec3c:	2201      	movs	r2, #1
   2ec3e:	0031      	movs	r1, r6
   2ec40:	0028      	movs	r0, r5
   2ec42:	47a0      	blx	r4
   2ec44:	0003      	movs	r3, r0
   2ec46:	2b01      	cmp	r3, #1
   2ec48:	d141      	bne.n	2ecce <readPacket+0xca>
        goto exit;

    len = 1;
   2ec4a:	2301      	movs	r3, #1
   2ec4c:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2ec4e:	683b      	ldr	r3, [r7, #0]
   2ec50:	0018      	movs	r0, r3
   2ec52:	4b24      	ldr	r3, [pc, #144]	; (2ece4 <readPacket+0xe0>)
   2ec54:	4798      	blx	r3
   2ec56:	0002      	movs	r2, r0
   2ec58:	2308      	movs	r3, #8
   2ec5a:	18f9      	adds	r1, r7, r3
   2ec5c:	687b      	ldr	r3, [r7, #4]
   2ec5e:	0018      	movs	r0, r3
   2ec60:	4b21      	ldr	r3, [pc, #132]	; (2ece8 <readPacket+0xe4>)
   2ec62:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2ec64:	687b      	ldr	r3, [r7, #4]
   2ec66:	695b      	ldr	r3, [r3, #20]
   2ec68:	3301      	adds	r3, #1
   2ec6a:	68ba      	ldr	r2, [r7, #8]
   2ec6c:	0011      	movs	r1, r2
   2ec6e:	0018      	movs	r0, r3
   2ec70:	4b1e      	ldr	r3, [pc, #120]	; (2ecec <readPacket+0xe8>)
   2ec72:	4798      	blx	r3
   2ec74:	0002      	movs	r2, r0
   2ec76:	693b      	ldr	r3, [r7, #16]
   2ec78:	189b      	adds	r3, r3, r2
   2ec7a:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2ec7c:	68bb      	ldr	r3, [r7, #8]
   2ec7e:	2b00      	cmp	r3, #0
   2ec80:	dd17      	ble.n	2ecb2 <readPacket+0xae>
   2ec82:	687b      	ldr	r3, [r7, #4]
   2ec84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2ec86:	689c      	ldr	r4, [r3, #8]
   2ec88:	687b      	ldr	r3, [r7, #4]
   2ec8a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2ec8c:	687b      	ldr	r3, [r7, #4]
   2ec8e:	695a      	ldr	r2, [r3, #20]
   2ec90:	693b      	ldr	r3, [r7, #16]
   2ec92:	18d6      	adds	r6, r2, r3
   2ec94:	68bb      	ldr	r3, [r7, #8]
   2ec96:	4698      	mov	r8, r3
   2ec98:	683b      	ldr	r3, [r7, #0]
   2ec9a:	0018      	movs	r0, r3
   2ec9c:	4b11      	ldr	r3, [pc, #68]	; (2ece4 <readPacket+0xe0>)
   2ec9e:	4798      	blx	r3
   2eca0:	0003      	movs	r3, r0
   2eca2:	4642      	mov	r2, r8
   2eca4:	0031      	movs	r1, r6
   2eca6:	0028      	movs	r0, r5
   2eca8:	47a0      	blx	r4
   2ecaa:	0002      	movs	r2, r0
   2ecac:	68bb      	ldr	r3, [r7, #8]
   2ecae:	429a      	cmp	r2, r3
   2ecb0:	d10f      	bne.n	2ecd2 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2ecb2:	687b      	ldr	r3, [r7, #4]
   2ecb4:	695b      	ldr	r3, [r3, #20]
   2ecb6:	781a      	ldrb	r2, [r3, #0]
   2ecb8:	230c      	movs	r3, #12
   2ecba:	18fb      	adds	r3, r7, r3
   2ecbc:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2ecbe:	230c      	movs	r3, #12
   2ecc0:	18fb      	adds	r3, r7, r3
   2ecc2:	781b      	ldrb	r3, [r3, #0]
   2ecc4:	061b      	lsls	r3, r3, #24
   2ecc6:	0f1b      	lsrs	r3, r3, #28
   2ecc8:	b2db      	uxtb	r3, r3
   2ecca:	617b      	str	r3, [r7, #20]
   2eccc:	e002      	b.n	2ecd4 <readPacket+0xd0>
        goto exit;
   2ecce:	46c0      	nop			; (mov r8, r8)
   2ecd0:	e000      	b.n	2ecd4 <readPacket+0xd0>
        goto exit;
   2ecd2:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2ecd4:	697b      	ldr	r3, [r7, #20]
}
   2ecd6:	0018      	movs	r0, r3
   2ecd8:	46bd      	mov	sp, r7
   2ecda:	b006      	add	sp, #24
   2ecdc:	bc04      	pop	{r2}
   2ecde:	4690      	mov	r8, r2
   2ece0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ece2:	46c0      	nop			; (mov r8, r8)
   2ece4:	0002f8a9 	.word	0x0002f8a9
   2ece8:	0002eb71 	.word	0x0002eb71
   2ecec:	00030681 	.word	0x00030681

0002ecf0 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2ecf0:	b580      	push	{r7, lr}
   2ecf2:	b086      	sub	sp, #24
   2ecf4:	af00      	add	r7, sp, #0
   2ecf6:	6078      	str	r0, [r7, #4]
   2ecf8:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2ecfa:	687b      	ldr	r3, [r7, #4]
   2ecfc:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2ecfe:	683b      	ldr	r3, [r7, #0]
   2ed00:	689b      	ldr	r3, [r3, #8]
   2ed02:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2ed04:	683b      	ldr	r3, [r7, #0]
   2ed06:	685b      	ldr	r3, [r3, #4]
   2ed08:	001a      	movs	r2, r3
   2ed0a:	693b      	ldr	r3, [r7, #16]
   2ed0c:	189b      	adds	r3, r3, r2
   2ed0e:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2ed10:	e039      	b.n	2ed86 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2ed12:	693b      	ldr	r3, [r7, #16]
   2ed14:	781b      	ldrb	r3, [r3, #0]
   2ed16:	2b2f      	cmp	r3, #47	; 0x2f
   2ed18:	d103      	bne.n	2ed22 <isTopicMatched+0x32>
   2ed1a:	697b      	ldr	r3, [r7, #20]
   2ed1c:	781b      	ldrb	r3, [r3, #0]
   2ed1e:	2b2f      	cmp	r3, #47	; 0x2f
   2ed20:	d13a      	bne.n	2ed98 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2ed22:	697b      	ldr	r3, [r7, #20]
   2ed24:	781b      	ldrb	r3, [r3, #0]
   2ed26:	2b2b      	cmp	r3, #43	; 0x2b
   2ed28:	d009      	beq.n	2ed3e <isTopicMatched+0x4e>
   2ed2a:	697b      	ldr	r3, [r7, #20]
   2ed2c:	781b      	ldrb	r3, [r3, #0]
   2ed2e:	2b23      	cmp	r3, #35	; 0x23
   2ed30:	d005      	beq.n	2ed3e <isTopicMatched+0x4e>
   2ed32:	697b      	ldr	r3, [r7, #20]
   2ed34:	781a      	ldrb	r2, [r3, #0]
   2ed36:	693b      	ldr	r3, [r7, #16]
   2ed38:	781b      	ldrb	r3, [r3, #0]
   2ed3a:	429a      	cmp	r2, r3
   2ed3c:	d12e      	bne.n	2ed9c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2ed3e:	697b      	ldr	r3, [r7, #20]
   2ed40:	781b      	ldrb	r3, [r3, #0]
   2ed42:	2b2b      	cmp	r3, #43	; 0x2b
   2ed44:	d112      	bne.n	2ed6c <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2ed46:	693b      	ldr	r3, [r7, #16]
   2ed48:	3301      	adds	r3, #1
   2ed4a:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2ed4c:	e005      	b.n	2ed5a <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2ed4e:	693b      	ldr	r3, [r7, #16]
   2ed50:	3301      	adds	r3, #1
   2ed52:	613b      	str	r3, [r7, #16]
   2ed54:	693b      	ldr	r3, [r7, #16]
   2ed56:	3301      	adds	r3, #1
   2ed58:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2ed5a:	68fa      	ldr	r2, [r7, #12]
   2ed5c:	68bb      	ldr	r3, [r7, #8]
   2ed5e:	429a      	cmp	r2, r3
   2ed60:	d20b      	bcs.n	2ed7a <isTopicMatched+0x8a>
   2ed62:	68fb      	ldr	r3, [r7, #12]
   2ed64:	781b      	ldrb	r3, [r3, #0]
   2ed66:	2b2f      	cmp	r3, #47	; 0x2f
   2ed68:	d1f1      	bne.n	2ed4e <isTopicMatched+0x5e>
   2ed6a:	e006      	b.n	2ed7a <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2ed6c:	697b      	ldr	r3, [r7, #20]
   2ed6e:	781b      	ldrb	r3, [r3, #0]
   2ed70:	2b23      	cmp	r3, #35	; 0x23
   2ed72:	d102      	bne.n	2ed7a <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2ed74:	68bb      	ldr	r3, [r7, #8]
   2ed76:	3b01      	subs	r3, #1
   2ed78:	613b      	str	r3, [r7, #16]
        curf++;
   2ed7a:	697b      	ldr	r3, [r7, #20]
   2ed7c:	3301      	adds	r3, #1
   2ed7e:	617b      	str	r3, [r7, #20]
        curn++;
   2ed80:	693b      	ldr	r3, [r7, #16]
   2ed82:	3301      	adds	r3, #1
   2ed84:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2ed86:	697b      	ldr	r3, [r7, #20]
   2ed88:	781b      	ldrb	r3, [r3, #0]
   2ed8a:	2b00      	cmp	r3, #0
   2ed8c:	d007      	beq.n	2ed9e <isTopicMatched+0xae>
   2ed8e:	693a      	ldr	r2, [r7, #16]
   2ed90:	68bb      	ldr	r3, [r7, #8]
   2ed92:	429a      	cmp	r2, r3
   2ed94:	d3bd      	bcc.n	2ed12 <isTopicMatched+0x22>
   2ed96:	e002      	b.n	2ed9e <isTopicMatched+0xae>
            break;
   2ed98:	46c0      	nop			; (mov r8, r8)
   2ed9a:	e000      	b.n	2ed9e <isTopicMatched+0xae>
            break;
   2ed9c:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2ed9e:	693a      	ldr	r2, [r7, #16]
   2eda0:	68bb      	ldr	r3, [r7, #8]
   2eda2:	429a      	cmp	r2, r3
   2eda4:	d105      	bne.n	2edb2 <isTopicMatched+0xc2>
   2eda6:	697b      	ldr	r3, [r7, #20]
   2eda8:	781b      	ldrb	r3, [r3, #0]
   2edaa:	2b00      	cmp	r3, #0
   2edac:	d101      	bne.n	2edb2 <isTopicMatched+0xc2>
   2edae:	2301      	movs	r3, #1
   2edb0:	e000      	b.n	2edb4 <isTopicMatched+0xc4>
   2edb2:	2300      	movs	r3, #0
   2edb4:	b2db      	uxtb	r3, r3
}
   2edb6:	0018      	movs	r0, r3
   2edb8:	46bd      	mov	sp, r7
   2edba:	b006      	add	sp, #24
   2edbc:	bd80      	pop	{r7, pc}
	...

0002edc0 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2edc0:	b580      	push	{r7, lr}
   2edc2:	b08a      	sub	sp, #40	; 0x28
   2edc4:	af00      	add	r7, sp, #0
   2edc6:	60f8      	str	r0, [r7, #12]
   2edc8:	60b9      	str	r1, [r7, #8]
   2edca:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2edcc:	2301      	movs	r3, #1
   2edce:	425b      	negs	r3, r3
   2edd0:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2edd2:	2300      	movs	r3, #0
   2edd4:	627b      	str	r3, [r7, #36]	; 0x24
   2edd6:	e044      	b.n	2ee62 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2edd8:	68fa      	ldr	r2, [r7, #12]
   2edda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eddc:	3304      	adds	r3, #4
   2edde:	00db      	lsls	r3, r3, #3
   2ede0:	18d3      	adds	r3, r2, r3
   2ede2:	3304      	adds	r3, #4
   2ede4:	681b      	ldr	r3, [r3, #0]
   2ede6:	2b00      	cmp	r3, #0
   2ede8:	d038      	beq.n	2ee5c <deliverMessage+0x9c>
   2edea:	68fa      	ldr	r2, [r7, #12]
   2edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2edee:	3304      	adds	r3, #4
   2edf0:	00db      	lsls	r3, r3, #3
   2edf2:	18d3      	adds	r3, r2, r3
   2edf4:	3304      	adds	r3, #4
   2edf6:	681a      	ldr	r2, [r3, #0]
   2edf8:	68bb      	ldr	r3, [r7, #8]
   2edfa:	0011      	movs	r1, r2
   2edfc:	0018      	movs	r0, r3
   2edfe:	4b28      	ldr	r3, [pc, #160]	; (2eea0 <deliverMessage+0xe0>)
   2ee00:	4798      	blx	r3
   2ee02:	1e03      	subs	r3, r0, #0
   2ee04:	d10d      	bne.n	2ee22 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2ee06:	68fa      	ldr	r2, [r7, #12]
   2ee08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ee0a:	3304      	adds	r3, #4
   2ee0c:	00db      	lsls	r3, r3, #3
   2ee0e:	18d3      	adds	r3, r2, r3
   2ee10:	3304      	adds	r3, #4
   2ee12:	681b      	ldr	r3, [r3, #0]
   2ee14:	68ba      	ldr	r2, [r7, #8]
   2ee16:	0011      	movs	r1, r2
   2ee18:	0018      	movs	r0, r3
   2ee1a:	4b22      	ldr	r3, [pc, #136]	; (2eea4 <deliverMessage+0xe4>)
   2ee1c:	4798      	blx	r3
   2ee1e:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2ee20:	d01c      	beq.n	2ee5c <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2ee22:	68fa      	ldr	r2, [r7, #12]
   2ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ee26:	3304      	adds	r3, #4
   2ee28:	00db      	lsls	r3, r3, #3
   2ee2a:	18d3      	adds	r3, r2, r3
   2ee2c:	3308      	adds	r3, #8
   2ee2e:	681b      	ldr	r3, [r3, #0]
   2ee30:	2b00      	cmp	r3, #0
   2ee32:	d013      	beq.n	2ee5c <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2ee34:	687a      	ldr	r2, [r7, #4]
   2ee36:	68b9      	ldr	r1, [r7, #8]
   2ee38:	2318      	movs	r3, #24
   2ee3a:	18fb      	adds	r3, r7, r3
   2ee3c:	0018      	movs	r0, r3
   2ee3e:	4b1a      	ldr	r3, [pc, #104]	; (2eea8 <deliverMessage+0xe8>)
   2ee40:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2ee42:	68fa      	ldr	r2, [r7, #12]
   2ee44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ee46:	3304      	adds	r3, #4
   2ee48:	00db      	lsls	r3, r3, #3
   2ee4a:	18d3      	adds	r3, r2, r3
   2ee4c:	3308      	adds	r3, #8
   2ee4e:	681b      	ldr	r3, [r3, #0]
   2ee50:	2218      	movs	r2, #24
   2ee52:	18ba      	adds	r2, r7, r2
   2ee54:	0010      	movs	r0, r2
   2ee56:	4798      	blx	r3
                rc = SUCCESS;
   2ee58:	2300      	movs	r3, #0
   2ee5a:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ee5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ee5e:	3301      	adds	r3, #1
   2ee60:	627b      	str	r3, [r7, #36]	; 0x24
   2ee62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ee64:	2b04      	cmp	r3, #4
   2ee66:	ddb7      	ble.n	2edd8 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2ee68:	6a3b      	ldr	r3, [r7, #32]
   2ee6a:	3301      	adds	r3, #1
   2ee6c:	d112      	bne.n	2ee94 <deliverMessage+0xd4>
   2ee6e:	68fb      	ldr	r3, [r7, #12]
   2ee70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ee72:	2b00      	cmp	r3, #0
   2ee74:	d00e      	beq.n	2ee94 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2ee76:	687a      	ldr	r2, [r7, #4]
   2ee78:	68b9      	ldr	r1, [r7, #8]
   2ee7a:	2310      	movs	r3, #16
   2ee7c:	18fb      	adds	r3, r7, r3
   2ee7e:	0018      	movs	r0, r3
   2ee80:	4b09      	ldr	r3, [pc, #36]	; (2eea8 <deliverMessage+0xe8>)
   2ee82:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2ee84:	68fb      	ldr	r3, [r7, #12]
   2ee86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ee88:	2210      	movs	r2, #16
   2ee8a:	18ba      	adds	r2, r7, r2
   2ee8c:	0010      	movs	r0, r2
   2ee8e:	4798      	blx	r3
        rc = SUCCESS;
   2ee90:	2300      	movs	r3, #0
   2ee92:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2ee94:	6a3b      	ldr	r3, [r7, #32]
}
   2ee96:	0018      	movs	r0, r3
   2ee98:	46bd      	mov	sp, r7
   2ee9a:	b00a      	add	sp, #40	; 0x28
   2ee9c:	bd80      	pop	{r7, pc}
   2ee9e:	46c0      	nop			; (mov r8, r8)
   2eea0:	00030a95 	.word	0x00030a95
   2eea4:	0002ecf1 	.word	0x0002ecf1
   2eea8:	0002e9f9 	.word	0x0002e9f9

0002eeac <keepalive>:


int keepalive(MQTTClient* c)
{
   2eeac:	b580      	push	{r7, lr}
   2eeae:	b088      	sub	sp, #32
   2eeb0:	af00      	add	r7, sp, #0
   2eeb2:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2eeb4:	2301      	movs	r3, #1
   2eeb6:	425b      	negs	r3, r3
   2eeb8:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2eeba:	687b      	ldr	r3, [r7, #4]
   2eebc:	699b      	ldr	r3, [r3, #24]
   2eebe:	2b00      	cmp	r3, #0
   2eec0:	d102      	bne.n	2eec8 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2eec2:	2300      	movs	r3, #0
   2eec4:	61fb      	str	r3, [r7, #28]
        goto exit;
   2eec6:	e033      	b.n	2ef30 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2eec8:	687b      	ldr	r3, [r7, #4]
   2eeca:	3354      	adds	r3, #84	; 0x54
   2eecc:	0018      	movs	r0, r3
   2eece:	4b1b      	ldr	r3, [pc, #108]	; (2ef3c <keepalive+0x90>)
   2eed0:	4798      	blx	r3
   2eed2:	1e03      	subs	r3, r0, #0
   2eed4:	d02c      	beq.n	2ef30 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2eed6:	687b      	ldr	r3, [r7, #4]
   2eed8:	7f1b      	ldrb	r3, [r3, #28]
   2eeda:	2b00      	cmp	r3, #0
   2eedc:	d128      	bne.n	2ef30 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2eede:	230c      	movs	r3, #12
   2eee0:	18fb      	adds	r3, r7, r3
   2eee2:	0018      	movs	r0, r3
   2eee4:	4b16      	ldr	r3, [pc, #88]	; (2ef40 <keepalive+0x94>)
   2eee6:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2eee8:	23fa      	movs	r3, #250	; 0xfa
   2eeea:	009a      	lsls	r2, r3, #2
   2eeec:	230c      	movs	r3, #12
   2eeee:	18fb      	adds	r3, r7, r3
   2eef0:	0011      	movs	r1, r2
   2eef2:	0018      	movs	r0, r3
   2eef4:	4b13      	ldr	r3, [pc, #76]	; (2ef44 <keepalive+0x98>)
   2eef6:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2eef8:	687b      	ldr	r3, [r7, #4]
   2eefa:	691a      	ldr	r2, [r3, #16]
   2eefc:	687b      	ldr	r3, [r7, #4]
   2eefe:	689b      	ldr	r3, [r3, #8]
   2ef00:	0019      	movs	r1, r3
   2ef02:	0010      	movs	r0, r2
   2ef04:	4b10      	ldr	r3, [pc, #64]	; (2ef48 <keepalive+0x9c>)
   2ef06:	4798      	blx	r3
   2ef08:	0003      	movs	r3, r0
   2ef0a:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2ef0c:	69bb      	ldr	r3, [r7, #24]
   2ef0e:	2b00      	cmp	r3, #0
   2ef10:	dd0e      	ble.n	2ef30 <keepalive+0x84>
   2ef12:	230c      	movs	r3, #12
   2ef14:	18fa      	adds	r2, r7, r3
   2ef16:	69b9      	ldr	r1, [r7, #24]
   2ef18:	687b      	ldr	r3, [r7, #4]
   2ef1a:	0018      	movs	r0, r3
   2ef1c:	4b0b      	ldr	r3, [pc, #44]	; (2ef4c <keepalive+0xa0>)
   2ef1e:	4798      	blx	r3
   2ef20:	0003      	movs	r3, r0
   2ef22:	61fb      	str	r3, [r7, #28]
   2ef24:	69fb      	ldr	r3, [r7, #28]
   2ef26:	2b00      	cmp	r3, #0
   2ef28:	d102      	bne.n	2ef30 <keepalive+0x84>
                c->ping_outstanding = 1;
   2ef2a:	687b      	ldr	r3, [r7, #4]
   2ef2c:	2201      	movs	r2, #1
   2ef2e:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2ef30:	69fb      	ldr	r3, [r7, #28]
}
   2ef32:	0018      	movs	r0, r3
   2ef34:	46bd      	mov	sp, r7
   2ef36:	b008      	add	sp, #32
   2ef38:	bd80      	pop	{r7, pc}
   2ef3a:	46c0      	nop			; (mov r8, r8)
   2ef3c:	0002f82d 	.word	0x0002f82d
   2ef40:	0002f8d1 	.word	0x0002f8d1
   2ef44:	0002f859 	.word	0x0002f859
   2ef48:	000304a5 	.word	0x000304a5
   2ef4c:	0002ea49 	.word	0x0002ea49

0002ef50 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2ef50:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ef52:	b095      	sub	sp, #84	; 0x54
   2ef54:	af06      	add	r7, sp, #24
   2ef56:	6078      	str	r0, [r7, #4]
   2ef58:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2ef5a:	683a      	ldr	r2, [r7, #0]
   2ef5c:	687b      	ldr	r3, [r7, #4]
   2ef5e:	0011      	movs	r1, r2
   2ef60:	0018      	movs	r0, r3
   2ef62:	4b70      	ldr	r3, [pc, #448]	; (2f124 <cycle+0x1d4>)
   2ef64:	4798      	blx	r3
   2ef66:	0002      	movs	r2, r0
   2ef68:	232e      	movs	r3, #46	; 0x2e
   2ef6a:	18fb      	adds	r3, r7, r3
   2ef6c:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2ef6e:	2300      	movs	r3, #0
   2ef70:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2ef72:	2300      	movs	r3, #0
   2ef74:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2ef76:	232e      	movs	r3, #46	; 0x2e
   2ef78:	18fb      	adds	r3, r7, r3
   2ef7a:	881b      	ldrh	r3, [r3, #0]
   2ef7c:	2b0d      	cmp	r3, #13
   2ef7e:	d900      	bls.n	2ef82 <cycle+0x32>
   2ef80:	e0bd      	b.n	2f0fe <cycle+0x1ae>
   2ef82:	009a      	lsls	r2, r3, #2
   2ef84:	4b68      	ldr	r3, [pc, #416]	; (2f128 <cycle+0x1d8>)
   2ef86:	18d3      	adds	r3, r2, r3
   2ef88:	681b      	ldr	r3, [r3, #0]
   2ef8a:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2ef8c:	687b      	ldr	r3, [r7, #4]
   2ef8e:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2ef90:	687b      	ldr	r3, [r7, #4]
   2ef92:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2ef94:	001e      	movs	r6, r3
   2ef96:	2310      	movs	r3, #16
   2ef98:	18fb      	adds	r3, r7, r3
   2ef9a:	1d1d      	adds	r5, r3, #4
   2ef9c:	2310      	movs	r3, #16
   2ef9e:	18fb      	adds	r3, r7, r3
   2efa0:	1c5c      	adds	r4, r3, #1
   2efa2:	230c      	movs	r3, #12
   2efa4:	18f9      	adds	r1, r7, r3
   2efa6:	2310      	movs	r3, #16
   2efa8:	18fb      	adds	r3, r7, r3
   2efaa:	1c98      	adds	r0, r3, #2
   2efac:	9604      	str	r6, [sp, #16]
   2efae:	9203      	str	r2, [sp, #12]
   2efb0:	2310      	movs	r3, #16
   2efb2:	18fb      	adds	r3, r7, r3
   2efb4:	330c      	adds	r3, #12
   2efb6:	9302      	str	r3, [sp, #8]
   2efb8:	2310      	movs	r3, #16
   2efba:	18fb      	adds	r3, r7, r3
   2efbc:	3308      	adds	r3, #8
   2efbe:	9301      	str	r3, [sp, #4]
   2efc0:	2320      	movs	r3, #32
   2efc2:	18fb      	adds	r3, r7, r3
   2efc4:	9300      	str	r3, [sp, #0]
   2efc6:	002b      	movs	r3, r5
   2efc8:	0022      	movs	r2, r4
   2efca:	4c58      	ldr	r4, [pc, #352]	; (2f12c <cycle+0x1dc>)
   2efcc:	47a0      	blx	r4
   2efce:	0003      	movs	r3, r0
   2efd0:	2b01      	cmp	r3, #1
   2efd2:	d000      	beq.n	2efd6 <cycle+0x86>
   2efd4:	e098      	b.n	2f108 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2efd6:	68fb      	ldr	r3, [r7, #12]
   2efd8:	b2da      	uxtb	r2, r3
   2efda:	2310      	movs	r3, #16
   2efdc:	18fb      	adds	r3, r7, r3
   2efde:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2efe0:	2310      	movs	r3, #16
   2efe2:	18fa      	adds	r2, r7, r3
   2efe4:	2320      	movs	r3, #32
   2efe6:	18f9      	adds	r1, r7, r3
   2efe8:	687b      	ldr	r3, [r7, #4]
   2efea:	0018      	movs	r0, r3
   2efec:	4b50      	ldr	r3, [pc, #320]	; (2f130 <cycle+0x1e0>)
   2efee:	4798      	blx	r3
            if (msg.qos != QOS0)
   2eff0:	2310      	movs	r3, #16
   2eff2:	18fb      	adds	r3, r7, r3
   2eff4:	781b      	ldrb	r3, [r3, #0]
   2eff6:	2b00      	cmp	r3, #0
   2eff8:	d100      	bne.n	2effc <cycle+0xac>
   2effa:	e07d      	b.n	2f0f8 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2effc:	2310      	movs	r3, #16
   2effe:	18fb      	adds	r3, r7, r3
   2f000:	781b      	ldrb	r3, [r3, #0]
   2f002:	2b01      	cmp	r3, #1
   2f004:	d10f      	bne.n	2f026 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2f006:	687b      	ldr	r3, [r7, #4]
   2f008:	6918      	ldr	r0, [r3, #16]
   2f00a:	687b      	ldr	r3, [r7, #4]
   2f00c:	689b      	ldr	r3, [r3, #8]
   2f00e:	0019      	movs	r1, r3
   2f010:	2310      	movs	r3, #16
   2f012:	18fb      	adds	r3, r7, r3
   2f014:	889b      	ldrh	r3, [r3, #4]
   2f016:	9300      	str	r3, [sp, #0]
   2f018:	2300      	movs	r3, #0
   2f01a:	2204      	movs	r2, #4
   2f01c:	4c45      	ldr	r4, [pc, #276]	; (2f134 <cycle+0x1e4>)
   2f01e:	47a0      	blx	r4
   2f020:	0003      	movs	r3, r0
   2f022:	637b      	str	r3, [r7, #52]	; 0x34
   2f024:	e013      	b.n	2f04e <cycle+0xfe>
                else if (msg.qos == QOS2)
   2f026:	2310      	movs	r3, #16
   2f028:	18fb      	adds	r3, r7, r3
   2f02a:	781b      	ldrb	r3, [r3, #0]
   2f02c:	2b02      	cmp	r3, #2
   2f02e:	d10e      	bne.n	2f04e <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2f030:	687b      	ldr	r3, [r7, #4]
   2f032:	6918      	ldr	r0, [r3, #16]
   2f034:	687b      	ldr	r3, [r7, #4]
   2f036:	689b      	ldr	r3, [r3, #8]
   2f038:	0019      	movs	r1, r3
   2f03a:	2310      	movs	r3, #16
   2f03c:	18fb      	adds	r3, r7, r3
   2f03e:	889b      	ldrh	r3, [r3, #4]
   2f040:	9300      	str	r3, [sp, #0]
   2f042:	2300      	movs	r3, #0
   2f044:	2205      	movs	r2, #5
   2f046:	4c3b      	ldr	r4, [pc, #236]	; (2f134 <cycle+0x1e4>)
   2f048:	47a0      	blx	r4
   2f04a:	0003      	movs	r3, r0
   2f04c:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2f04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f050:	2b00      	cmp	r3, #0
   2f052:	dc03      	bgt.n	2f05c <cycle+0x10c>
                    rc = FAILURE;
   2f054:	2301      	movs	r3, #1
   2f056:	425b      	negs	r3, r3
   2f058:	633b      	str	r3, [r7, #48]	; 0x30
   2f05a:	e007      	b.n	2f06c <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2f05c:	683a      	ldr	r2, [r7, #0]
   2f05e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f060:	687b      	ldr	r3, [r7, #4]
   2f062:	0018      	movs	r0, r3
   2f064:	4b34      	ldr	r3, [pc, #208]	; (2f138 <cycle+0x1e8>)
   2f066:	4798      	blx	r3
   2f068:	0003      	movs	r3, r0
   2f06a:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2f06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f06e:	3301      	adds	r3, #1
   2f070:	d142      	bne.n	2f0f8 <cycle+0x1a8>
                    goto exit; // there was a problem
   2f072:	46c0      	nop			; (mov r8, r8)
   2f074:	e049      	b.n	2f10a <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f076:	687b      	ldr	r3, [r7, #4]
   2f078:	695c      	ldr	r4, [r3, #20]
   2f07a:	687b      	ldr	r3, [r7, #4]
   2f07c:	68db      	ldr	r3, [r3, #12]
   2f07e:	220a      	movs	r2, #10
   2f080:	18ba      	adds	r2, r7, r2
   2f082:	2109      	movs	r1, #9
   2f084:	1879      	adds	r1, r7, r1
   2f086:	2008      	movs	r0, #8
   2f088:	1838      	adds	r0, r7, r0
   2f08a:	9300      	str	r3, [sp, #0]
   2f08c:	0023      	movs	r3, r4
   2f08e:	4c2b      	ldr	r4, [pc, #172]	; (2f13c <cycle+0x1ec>)
   2f090:	47a0      	blx	r4
   2f092:	0003      	movs	r3, r0
   2f094:	2b01      	cmp	r3, #1
   2f096:	d003      	beq.n	2f0a0 <cycle+0x150>
                rc = FAILURE;
   2f098:	2301      	movs	r3, #1
   2f09a:	425b      	negs	r3, r3
   2f09c:	633b      	str	r3, [r7, #48]	; 0x30
   2f09e:	e023      	b.n	2f0e8 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2f0a0:	687b      	ldr	r3, [r7, #4]
   2f0a2:	6918      	ldr	r0, [r3, #16]
   2f0a4:	687b      	ldr	r3, [r7, #4]
   2f0a6:	689b      	ldr	r3, [r3, #8]
   2f0a8:	0019      	movs	r1, r3
   2f0aa:	230a      	movs	r3, #10
   2f0ac:	18fb      	adds	r3, r7, r3
   2f0ae:	881b      	ldrh	r3, [r3, #0]
   2f0b0:	9300      	str	r3, [sp, #0]
   2f0b2:	2300      	movs	r3, #0
   2f0b4:	2206      	movs	r2, #6
   2f0b6:	4c1f      	ldr	r4, [pc, #124]	; (2f134 <cycle+0x1e4>)
   2f0b8:	47a0      	blx	r4
   2f0ba:	0003      	movs	r3, r0
   2f0bc:	637b      	str	r3, [r7, #52]	; 0x34
   2f0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f0c0:	2b00      	cmp	r3, #0
   2f0c2:	dc03      	bgt.n	2f0cc <cycle+0x17c>
                rc = FAILURE;
   2f0c4:	2301      	movs	r3, #1
   2f0c6:	425b      	negs	r3, r3
   2f0c8:	633b      	str	r3, [r7, #48]	; 0x30
   2f0ca:	e00d      	b.n	2f0e8 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2f0cc:	683a      	ldr	r2, [r7, #0]
   2f0ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f0d0:	687b      	ldr	r3, [r7, #4]
   2f0d2:	0018      	movs	r0, r3
   2f0d4:	4b18      	ldr	r3, [pc, #96]	; (2f138 <cycle+0x1e8>)
   2f0d6:	4798      	blx	r3
   2f0d8:	0003      	movs	r3, r0
   2f0da:	633b      	str	r3, [r7, #48]	; 0x30
   2f0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f0de:	2b00      	cmp	r3, #0
   2f0e0:	d002      	beq.n	2f0e8 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2f0e2:	2301      	movs	r3, #1
   2f0e4:	425b      	negs	r3, r3
   2f0e6:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2f0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f0ea:	3301      	adds	r3, #1
   2f0ec:	d106      	bne.n	2f0fc <cycle+0x1ac>
                goto exit; // there was a problem
   2f0ee:	e00c      	b.n	2f10a <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2f0f0:	687b      	ldr	r3, [r7, #4]
   2f0f2:	2200      	movs	r2, #0
   2f0f4:	771a      	strb	r2, [r3, #28]
            break;
   2f0f6:	e002      	b.n	2f0fe <cycle+0x1ae>
            break;
   2f0f8:	46c0      	nop			; (mov r8, r8)
   2f0fa:	e000      	b.n	2f0fe <cycle+0x1ae>
            break;
   2f0fc:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2f0fe:	687b      	ldr	r3, [r7, #4]
   2f100:	0018      	movs	r0, r3
   2f102:	4b0f      	ldr	r3, [pc, #60]	; (2f140 <cycle+0x1f0>)
   2f104:	4798      	blx	r3
   2f106:	e000      	b.n	2f10a <cycle+0x1ba>
                goto exit;
   2f108:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2f10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f10c:	2b00      	cmp	r3, #0
   2f10e:	d103      	bne.n	2f118 <cycle+0x1c8>
        rc = packet_type;
   2f110:	232e      	movs	r3, #46	; 0x2e
   2f112:	18fb      	adds	r3, r7, r3
   2f114:	881b      	ldrh	r3, [r3, #0]
   2f116:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2f118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2f11a:	0018      	movs	r0, r3
   2f11c:	46bd      	mov	sp, r7
   2f11e:	b00f      	add	sp, #60	; 0x3c
   2f120:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f122:	46c0      	nop			; (mov r8, r8)
   2f124:	0002ec05 	.word	0x0002ec05
   2f128:	0003a3b0 	.word	0x0003a3b0
   2f12c:	000304c9 	.word	0x000304c9
   2f130:	0002edc1 	.word	0x0002edc1
   2f134:	00030cc1 	.word	0x00030cc1
   2f138:	0002ea49 	.word	0x0002ea49
   2f13c:	000305cd 	.word	0x000305cd
   2f140:	0002eead 	.word	0x0002eead

0002f144 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2f144:	b580      	push	{r7, lr}
   2f146:	b086      	sub	sp, #24
   2f148:	af00      	add	r7, sp, #0
   2f14a:	6078      	str	r0, [r7, #4]
   2f14c:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2f14e:	2300      	movs	r3, #0
   2f150:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2f152:	2308      	movs	r3, #8
   2f154:	18fb      	adds	r3, r7, r3
   2f156:	0018      	movs	r0, r3
   2f158:	4b11      	ldr	r3, [pc, #68]	; (2f1a0 <MQTTYield+0x5c>)
   2f15a:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2f15c:	683a      	ldr	r2, [r7, #0]
   2f15e:	2308      	movs	r3, #8
   2f160:	18fb      	adds	r3, r7, r3
   2f162:	0011      	movs	r1, r2
   2f164:	0018      	movs	r0, r3
   2f166:	4b0f      	ldr	r3, [pc, #60]	; (2f1a4 <MQTTYield+0x60>)
   2f168:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2f16a:	2308      	movs	r3, #8
   2f16c:	18fa      	adds	r2, r7, r3
   2f16e:	687b      	ldr	r3, [r7, #4]
   2f170:	0011      	movs	r1, r2
   2f172:	0018      	movs	r0, r3
   2f174:	4b0c      	ldr	r3, [pc, #48]	; (2f1a8 <MQTTYield+0x64>)
   2f176:	4798      	blx	r3
   2f178:	0003      	movs	r3, r0
   2f17a:	3301      	adds	r3, #1
   2f17c:	d103      	bne.n	2f186 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2f17e:	2301      	movs	r3, #1
   2f180:	425b      	negs	r3, r3
   2f182:	617b      	str	r3, [r7, #20]
            break;
   2f184:	e006      	b.n	2f194 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2f186:	2308      	movs	r3, #8
   2f188:	18fb      	adds	r3, r7, r3
   2f18a:	0018      	movs	r0, r3
   2f18c:	4b07      	ldr	r3, [pc, #28]	; (2f1ac <MQTTYield+0x68>)
   2f18e:	4798      	blx	r3
   2f190:	1e03      	subs	r3, r0, #0
   2f192:	d0ea      	beq.n	2f16a <MQTTYield+0x26>
        
    return rc;
   2f194:	697b      	ldr	r3, [r7, #20]
}
   2f196:	0018      	movs	r0, r3
   2f198:	46bd      	mov	sp, r7
   2f19a:	b006      	add	sp, #24
   2f19c:	bd80      	pop	{r7, pc}
   2f19e:	46c0      	nop			; (mov r8, r8)
   2f1a0:	0002f8d1 	.word	0x0002f8d1
   2f1a4:	0002f859 	.word	0x0002f859
   2f1a8:	0002ef51 	.word	0x0002ef51
   2f1ac:	0002f82d 	.word	0x0002f82d

0002f1b0 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2f1b0:	b580      	push	{r7, lr}
   2f1b2:	b086      	sub	sp, #24
   2f1b4:	af00      	add	r7, sp, #0
   2f1b6:	60f8      	str	r0, [r7, #12]
   2f1b8:	60b9      	str	r1, [r7, #8]
   2f1ba:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2f1bc:	2301      	movs	r3, #1
   2f1be:	425b      	negs	r3, r3
   2f1c0:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2f1c2:	687b      	ldr	r3, [r7, #4]
   2f1c4:	0018      	movs	r0, r3
   2f1c6:	4b0b      	ldr	r3, [pc, #44]	; (2f1f4 <waitfor+0x44>)
   2f1c8:	4798      	blx	r3
   2f1ca:	1e03      	subs	r3, r0, #0
   2f1cc:	d10c      	bne.n	2f1e8 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2f1ce:	687a      	ldr	r2, [r7, #4]
   2f1d0:	68fb      	ldr	r3, [r7, #12]
   2f1d2:	0011      	movs	r1, r2
   2f1d4:	0018      	movs	r0, r3
   2f1d6:	4b08      	ldr	r3, [pc, #32]	; (2f1f8 <waitfor+0x48>)
   2f1d8:	4798      	blx	r3
   2f1da:	0003      	movs	r3, r0
   2f1dc:	617b      	str	r3, [r7, #20]
   2f1de:	697a      	ldr	r2, [r7, #20]
   2f1e0:	68bb      	ldr	r3, [r7, #8]
   2f1e2:	429a      	cmp	r2, r3
   2f1e4:	d1ed      	bne.n	2f1c2 <waitfor+0x12>
   2f1e6:	e000      	b.n	2f1ea <waitfor+0x3a>
            break; // we timed out
   2f1e8:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2f1ea:	697b      	ldr	r3, [r7, #20]
}
   2f1ec:	0018      	movs	r0, r3
   2f1ee:	46bd      	mov	sp, r7
   2f1f0:	b006      	add	sp, #24
   2f1f2:	bd80      	pop	{r7, pc}
   2f1f4:	0002f82d 	.word	0x0002f82d
   2f1f8:	0002ef51 	.word	0x0002ef51

0002f1fc <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2f1fc:	b590      	push	{r4, r7, lr}
   2f1fe:	b09f      	sub	sp, #124	; 0x7c
   2f200:	af00      	add	r7, sp, #0
   2f202:	6078      	str	r0, [r7, #4]
   2f204:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2f206:	2301      	movs	r3, #1
   2f208:	425b      	negs	r3, r3
   2f20a:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2f20c:	230c      	movs	r3, #12
   2f20e:	18fa      	adds	r2, r7, r3
   2f210:	4b41      	ldr	r3, [pc, #260]	; (2f318 <MQTTConnect+0x11c>)
   2f212:	0010      	movs	r0, r2
   2f214:	0019      	movs	r1, r3
   2f216:	2358      	movs	r3, #88	; 0x58
   2f218:	001a      	movs	r2, r3
   2f21a:	4b40      	ldr	r3, [pc, #256]	; (2f31c <MQTTConnect+0x120>)
   2f21c:	4798      	blx	r3
    int len = 0;
   2f21e:	2300      	movs	r3, #0
   2f220:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2f222:	687b      	ldr	r3, [r7, #4]
   2f224:	6a1b      	ldr	r3, [r3, #32]
   2f226:	2b00      	cmp	r3, #0
   2f228:	d166      	bne.n	2f2f8 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2f22a:	2364      	movs	r3, #100	; 0x64
   2f22c:	18fb      	adds	r3, r7, r3
   2f22e:	0018      	movs	r0, r3
   2f230:	4b3b      	ldr	r3, [pc, #236]	; (2f320 <MQTTConnect+0x124>)
   2f232:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2f234:	687b      	ldr	r3, [r7, #4]
   2f236:	685a      	ldr	r2, [r3, #4]
   2f238:	2364      	movs	r3, #100	; 0x64
   2f23a:	18fb      	adds	r3, r7, r3
   2f23c:	0011      	movs	r1, r2
   2f23e:	0018      	movs	r0, r3
   2f240:	4b38      	ldr	r3, [pc, #224]	; (2f324 <MQTTConnect+0x128>)
   2f242:	4798      	blx	r3

    if (options == 0)
   2f244:	683b      	ldr	r3, [r7, #0]
   2f246:	2b00      	cmp	r3, #0
   2f248:	d102      	bne.n	2f250 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2f24a:	230c      	movs	r3, #12
   2f24c:	18fb      	adds	r3, r7, r3
   2f24e:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2f250:	683b      	ldr	r3, [r7, #0]
   2f252:	8b1b      	ldrh	r3, [r3, #24]
   2f254:	001a      	movs	r2, r3
   2f256:	687b      	ldr	r3, [r7, #4]
   2f258:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2f25a:	687b      	ldr	r3, [r7, #4]
   2f25c:	3354      	adds	r3, #84	; 0x54
   2f25e:	001a      	movs	r2, r3
   2f260:	687b      	ldr	r3, [r7, #4]
   2f262:	699b      	ldr	r3, [r3, #24]
   2f264:	0019      	movs	r1, r3
   2f266:	0010      	movs	r0, r2
   2f268:	4b2f      	ldr	r3, [pc, #188]	; (2f328 <MQTTConnect+0x12c>)
   2f26a:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2f26c:	687b      	ldr	r3, [r7, #4]
   2f26e:	6918      	ldr	r0, [r3, #16]
   2f270:	687b      	ldr	r3, [r7, #4]
   2f272:	689b      	ldr	r3, [r3, #8]
   2f274:	0019      	movs	r1, r3
   2f276:	683b      	ldr	r3, [r7, #0]
   2f278:	001a      	movs	r2, r3
   2f27a:	4b2c      	ldr	r3, [pc, #176]	; (2f32c <MQTTConnect+0x130>)
   2f27c:	4798      	blx	r3
   2f27e:	0003      	movs	r3, r0
   2f280:	673b      	str	r3, [r7, #112]	; 0x70
   2f282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f284:	2b00      	cmp	r3, #0
   2f286:	dd39      	ble.n	2f2fc <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2f288:	2364      	movs	r3, #100	; 0x64
   2f28a:	18fa      	adds	r2, r7, r3
   2f28c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2f28e:	687b      	ldr	r3, [r7, #4]
   2f290:	0018      	movs	r0, r3
   2f292:	4b27      	ldr	r3, [pc, #156]	; (2f330 <MQTTConnect+0x134>)
   2f294:	4798      	blx	r3
   2f296:	0003      	movs	r3, r0
   2f298:	677b      	str	r3, [r7, #116]	; 0x74
   2f29a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f29c:	2b00      	cmp	r3, #0
   2f29e:	d12f      	bne.n	2f300 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2f2a0:	2364      	movs	r3, #100	; 0x64
   2f2a2:	18fa      	adds	r2, r7, r3
   2f2a4:	687b      	ldr	r3, [r7, #4]
   2f2a6:	2102      	movs	r1, #2
   2f2a8:	0018      	movs	r0, r3
   2f2aa:	4b22      	ldr	r3, [pc, #136]	; (2f334 <MQTTConnect+0x138>)
   2f2ac:	4798      	blx	r3
   2f2ae:	0003      	movs	r3, r0
   2f2b0:	2b02      	cmp	r3, #2
   2f2b2:	d11d      	bne.n	2f2f0 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2f2b4:	230b      	movs	r3, #11
   2f2b6:	18fb      	adds	r3, r7, r3
   2f2b8:	22ff      	movs	r2, #255	; 0xff
   2f2ba:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2f2bc:	230a      	movs	r3, #10
   2f2be:	18fb      	adds	r3, r7, r3
   2f2c0:	2200      	movs	r2, #0
   2f2c2:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2f2c4:	687b      	ldr	r3, [r7, #4]
   2f2c6:	695a      	ldr	r2, [r3, #20]
   2f2c8:	687b      	ldr	r3, [r7, #4]
   2f2ca:	68db      	ldr	r3, [r3, #12]
   2f2cc:	210b      	movs	r1, #11
   2f2ce:	1879      	adds	r1, r7, r1
   2f2d0:	200a      	movs	r0, #10
   2f2d2:	1838      	adds	r0, r7, r0
   2f2d4:	4c18      	ldr	r4, [pc, #96]	; (2f338 <MQTTConnect+0x13c>)
   2f2d6:	47a0      	blx	r4
   2f2d8:	0003      	movs	r3, r0
   2f2da:	2b01      	cmp	r3, #1
   2f2dc:	d104      	bne.n	2f2e8 <MQTTConnect+0xec>
            rc = connack_rc;
   2f2de:	230b      	movs	r3, #11
   2f2e0:	18fb      	adds	r3, r7, r3
   2f2e2:	781b      	ldrb	r3, [r3, #0]
   2f2e4:	677b      	str	r3, [r7, #116]	; 0x74
   2f2e6:	e00c      	b.n	2f302 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2f2e8:	2301      	movs	r3, #1
   2f2ea:	425b      	negs	r3, r3
   2f2ec:	677b      	str	r3, [r7, #116]	; 0x74
   2f2ee:	e008      	b.n	2f302 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2f2f0:	2301      	movs	r3, #1
   2f2f2:	425b      	negs	r3, r3
   2f2f4:	677b      	str	r3, [r7, #116]	; 0x74
   2f2f6:	e004      	b.n	2f302 <MQTTConnect+0x106>
		goto exit;
   2f2f8:	46c0      	nop			; (mov r8, r8)
   2f2fa:	e002      	b.n	2f302 <MQTTConnect+0x106>
        goto exit;
   2f2fc:	46c0      	nop			; (mov r8, r8)
   2f2fe:	e000      	b.n	2f302 <MQTTConnect+0x106>
        goto exit; // there was a problem
   2f300:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2f302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f304:	2b00      	cmp	r3, #0
   2f306:	d102      	bne.n	2f30e <MQTTConnect+0x112>
        c->isconnected = 1;
   2f308:	687b      	ldr	r3, [r7, #4]
   2f30a:	2201      	movs	r2, #1
   2f30c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2f30e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2f310:	0018      	movs	r0, r3
   2f312:	46bd      	mov	sp, r7
   2f314:	b01f      	add	sp, #124	; 0x7c
   2f316:	bd90      	pop	{r4, r7, pc}
   2f318:	0003a3e8 	.word	0x0003a3e8
   2f31c:	00034f2d 	.word	0x00034f2d
   2f320:	0002f8d1 	.word	0x0002f8d1
   2f324:	0002f859 	.word	0x0002f859
   2f328:	0002f881 	.word	0x0002f881
   2f32c:	000300ad 	.word	0x000300ad
   2f330:	0002ea49 	.word	0x0002ea49
   2f334:	0002f1b1 	.word	0x0002f1b1
   2f338:	00030329 	.word	0x00030329

0002f33c <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2f33c:	b5b0      	push	{r4, r5, r7, lr}
   2f33e:	b096      	sub	sp, #88	; 0x58
   2f340:	af04      	add	r7, sp, #16
   2f342:	60f8      	str	r0, [r7, #12]
   2f344:	60b9      	str	r1, [r7, #8]
   2f346:	603b      	str	r3, [r7, #0]
   2f348:	1dfb      	adds	r3, r7, #7
   2f34a:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2f34c:	2301      	movs	r3, #1
   2f34e:	425b      	negs	r3, r3
   2f350:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2f352:	2300      	movs	r3, #0
   2f354:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2f356:	2324      	movs	r3, #36	; 0x24
   2f358:	18fb      	adds	r3, r7, r3
   2f35a:	2200      	movs	r2, #0
   2f35c:	601a      	str	r2, [r3, #0]
   2f35e:	2324      	movs	r3, #36	; 0x24
   2f360:	18fb      	adds	r3, r7, r3
   2f362:	2200      	movs	r2, #0
   2f364:	605a      	str	r2, [r3, #4]
   2f366:	2324      	movs	r3, #36	; 0x24
   2f368:	18fb      	adds	r3, r7, r3
   2f36a:	2200      	movs	r2, #0
   2f36c:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2f36e:	1dfb      	adds	r3, r7, #7
   2f370:	781b      	ldrb	r3, [r3, #0]
   2f372:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2f374:	2324      	movs	r3, #36	; 0x24
   2f376:	18fb      	adds	r3, r7, r3
   2f378:	68ba      	ldr	r2, [r7, #8]
   2f37a:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2f37c:	68fb      	ldr	r3, [r7, #12]
   2f37e:	6a1b      	ldr	r3, [r3, #32]
   2f380:	2b00      	cmp	r3, #0
   2f382:	d100      	bne.n	2f386 <MQTTSubscribe+0x4a>
   2f384:	e088      	b.n	2f498 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2f386:	2330      	movs	r3, #48	; 0x30
   2f388:	18fb      	adds	r3, r7, r3
   2f38a:	0018      	movs	r0, r3
   2f38c:	4b47      	ldr	r3, [pc, #284]	; (2f4ac <MQTTSubscribe+0x170>)
   2f38e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f390:	68fb      	ldr	r3, [r7, #12]
   2f392:	685a      	ldr	r2, [r3, #4]
   2f394:	2330      	movs	r3, #48	; 0x30
   2f396:	18fb      	adds	r3, r7, r3
   2f398:	0011      	movs	r1, r2
   2f39a:	0018      	movs	r0, r3
   2f39c:	4b44      	ldr	r3, [pc, #272]	; (2f4b0 <MQTTSubscribe+0x174>)
   2f39e:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2f3a0:	68fb      	ldr	r3, [r7, #12]
   2f3a2:	691c      	ldr	r4, [r3, #16]
   2f3a4:	68fb      	ldr	r3, [r7, #12]
   2f3a6:	689b      	ldr	r3, [r3, #8]
   2f3a8:	001d      	movs	r5, r3
   2f3aa:	68fb      	ldr	r3, [r7, #12]
   2f3ac:	0018      	movs	r0, r3
   2f3ae:	4b41      	ldr	r3, [pc, #260]	; (2f4b4 <MQTTSubscribe+0x178>)
   2f3b0:	4798      	blx	r3
   2f3b2:	0003      	movs	r3, r0
   2f3b4:	b29a      	uxth	r2, r3
   2f3b6:	2320      	movs	r3, #32
   2f3b8:	18fb      	adds	r3, r7, r3
   2f3ba:	9302      	str	r3, [sp, #8]
   2f3bc:	2324      	movs	r3, #36	; 0x24
   2f3be:	18fb      	adds	r3, r7, r3
   2f3c0:	9301      	str	r3, [sp, #4]
   2f3c2:	2301      	movs	r3, #1
   2f3c4:	9300      	str	r3, [sp, #0]
   2f3c6:	0013      	movs	r3, r2
   2f3c8:	2200      	movs	r2, #0
   2f3ca:	0029      	movs	r1, r5
   2f3cc:	0020      	movs	r0, r4
   2f3ce:	4c3a      	ldr	r4, [pc, #232]	; (2f4b8 <MQTTSubscribe+0x17c>)
   2f3d0:	47a0      	blx	r4
   2f3d2:	0003      	movs	r3, r0
   2f3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2f3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f3d8:	2b00      	cmp	r3, #0
   2f3da:	dd5f      	ble.n	2f49c <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2f3dc:	2330      	movs	r3, #48	; 0x30
   2f3de:	18fa      	adds	r2, r7, r3
   2f3e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2f3e2:	68fb      	ldr	r3, [r7, #12]
   2f3e4:	0018      	movs	r0, r3
   2f3e6:	4b35      	ldr	r3, [pc, #212]	; (2f4bc <MQTTSubscribe+0x180>)
   2f3e8:	4798      	blx	r3
   2f3ea:	0003      	movs	r3, r0
   2f3ec:	647b      	str	r3, [r7, #68]	; 0x44
   2f3ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2f3f0:	2b00      	cmp	r3, #0
   2f3f2:	d155      	bne.n	2f4a0 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2f3f4:	2330      	movs	r3, #48	; 0x30
   2f3f6:	18fa      	adds	r2, r7, r3
   2f3f8:	68fb      	ldr	r3, [r7, #12]
   2f3fa:	2109      	movs	r1, #9
   2f3fc:	0018      	movs	r0, r3
   2f3fe:	4b30      	ldr	r3, [pc, #192]	; (2f4c0 <MQTTSubscribe+0x184>)
   2f400:	4798      	blx	r3
   2f402:	0003      	movs	r3, r0
   2f404:	2b09      	cmp	r3, #9
   2f406:	d143      	bne.n	2f490 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2f408:	2300      	movs	r3, #0
   2f40a:	61fb      	str	r3, [r7, #28]
   2f40c:	2301      	movs	r3, #1
   2f40e:	425b      	negs	r3, r3
   2f410:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2f412:	68fb      	ldr	r3, [r7, #12]
   2f414:	695a      	ldr	r2, [r3, #20]
   2f416:	68fb      	ldr	r3, [r7, #12]
   2f418:	68db      	ldr	r3, [r3, #12]
   2f41a:	001c      	movs	r4, r3
   2f41c:	2318      	movs	r3, #24
   2f41e:	18fb      	adds	r3, r7, r3
   2f420:	211c      	movs	r1, #28
   2f422:	1879      	adds	r1, r7, r1
   2f424:	2016      	movs	r0, #22
   2f426:	1838      	adds	r0, r7, r0
   2f428:	9401      	str	r4, [sp, #4]
   2f42a:	9200      	str	r2, [sp, #0]
   2f42c:	000a      	movs	r2, r1
   2f42e:	2101      	movs	r1, #1
   2f430:	4c24      	ldr	r4, [pc, #144]	; (2f4c4 <MQTTSubscribe+0x188>)
   2f432:	47a0      	blx	r4
   2f434:	0003      	movs	r3, r0
   2f436:	2b01      	cmp	r3, #1
   2f438:	d101      	bne.n	2f43e <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2f43a:	69bb      	ldr	r3, [r7, #24]
   2f43c:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2f43e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2f440:	2b80      	cmp	r3, #128	; 0x80
   2f442:	d02e      	beq.n	2f4a2 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f444:	2300      	movs	r3, #0
   2f446:	643b      	str	r3, [r7, #64]	; 0x40
   2f448:	e01e      	b.n	2f488 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2f44a:	68fa      	ldr	r2, [r7, #12]
   2f44c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f44e:	3304      	adds	r3, #4
   2f450:	00db      	lsls	r3, r3, #3
   2f452:	18d3      	adds	r3, r2, r3
   2f454:	3304      	adds	r3, #4
   2f456:	681b      	ldr	r3, [r3, #0]
   2f458:	2b00      	cmp	r3, #0
   2f45a:	d112      	bne.n	2f482 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2f45c:	68fa      	ldr	r2, [r7, #12]
   2f45e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f460:	3304      	adds	r3, #4
   2f462:	00db      	lsls	r3, r3, #3
   2f464:	18d3      	adds	r3, r2, r3
   2f466:	3304      	adds	r3, #4
   2f468:	68ba      	ldr	r2, [r7, #8]
   2f46a:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2f46c:	68fa      	ldr	r2, [r7, #12]
   2f46e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f470:	3304      	adds	r3, #4
   2f472:	00db      	lsls	r3, r3, #3
   2f474:	18d3      	adds	r3, r2, r3
   2f476:	3308      	adds	r3, #8
   2f478:	683a      	ldr	r2, [r7, #0]
   2f47a:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2f47c:	2300      	movs	r3, #0
   2f47e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2f480:	e00f      	b.n	2f4a2 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f484:	3301      	adds	r3, #1
   2f486:	643b      	str	r3, [r7, #64]	; 0x40
   2f488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f48a:	2b04      	cmp	r3, #4
   2f48c:	dddd      	ble.n	2f44a <MQTTSubscribe+0x10e>
   2f48e:	e008      	b.n	2f4a2 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2f490:	2301      	movs	r3, #1
   2f492:	425b      	negs	r3, r3
   2f494:	647b      	str	r3, [r7, #68]	; 0x44
   2f496:	e004      	b.n	2f4a2 <MQTTSubscribe+0x166>
		goto exit;
   2f498:	46c0      	nop			; (mov r8, r8)
   2f49a:	e002      	b.n	2f4a2 <MQTTSubscribe+0x166>
        goto exit;
   2f49c:	46c0      	nop			; (mov r8, r8)
   2f49e:	e000      	b.n	2f4a2 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2f4a0:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2f4a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2f4a4:	0018      	movs	r0, r3
   2f4a6:	46bd      	mov	sp, r7
   2f4a8:	b012      	add	sp, #72	; 0x48
   2f4aa:	bdb0      	pop	{r4, r5, r7, pc}
   2f4ac:	0002f8d1 	.word	0x0002f8d1
   2f4b0:	0002f859 	.word	0x0002f859
   2f4b4:	0002ea19 	.word	0x0002ea19
   2f4b8:	00030e09 	.word	0x00030e09
   2f4bc:	0002ea49 	.word	0x0002ea49
   2f4c0:	0002f1b1 	.word	0x0002f1b1
   2f4c4:	00030f59 	.word	0x00030f59

0002f4c8 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2f4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f4ca:	46ce      	mov	lr, r9
   2f4cc:	4647      	mov	r7, r8
   2f4ce:	b580      	push	{r7, lr}
   2f4d0:	b097      	sub	sp, #92	; 0x5c
   2f4d2:	af08      	add	r7, sp, #32
   2f4d4:	60f8      	str	r0, [r7, #12]
   2f4d6:	60b9      	str	r1, [r7, #8]
   2f4d8:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2f4da:	2301      	movs	r3, #1
   2f4dc:	425b      	negs	r3, r3
   2f4de:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2f4e0:	2318      	movs	r3, #24
   2f4e2:	18fb      	adds	r3, r7, r3
   2f4e4:	2200      	movs	r2, #0
   2f4e6:	601a      	str	r2, [r3, #0]
   2f4e8:	2318      	movs	r3, #24
   2f4ea:	18fb      	adds	r3, r7, r3
   2f4ec:	2200      	movs	r2, #0
   2f4ee:	605a      	str	r2, [r3, #4]
   2f4f0:	2318      	movs	r3, #24
   2f4f2:	18fb      	adds	r3, r7, r3
   2f4f4:	2200      	movs	r2, #0
   2f4f6:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2f4f8:	2318      	movs	r3, #24
   2f4fa:	18fb      	adds	r3, r7, r3
   2f4fc:	68ba      	ldr	r2, [r7, #8]
   2f4fe:	601a      	str	r2, [r3, #0]
    int len = 0;
   2f500:	2300      	movs	r3, #0
   2f502:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2f504:	68fb      	ldr	r3, [r7, #12]
   2f506:	6a1b      	ldr	r3, [r3, #32]
   2f508:	2b00      	cmp	r3, #0
   2f50a:	d100      	bne.n	2f50e <MQTTPublish+0x46>
   2f50c:	e0a0      	b.n	2f650 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2f50e:	2324      	movs	r3, #36	; 0x24
   2f510:	18fb      	adds	r3, r7, r3
   2f512:	0018      	movs	r0, r3
   2f514:	4b55      	ldr	r3, [pc, #340]	; (2f66c <MQTTPublish+0x1a4>)
   2f516:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f518:	68fb      	ldr	r3, [r7, #12]
   2f51a:	685a      	ldr	r2, [r3, #4]
   2f51c:	2324      	movs	r3, #36	; 0x24
   2f51e:	18fb      	adds	r3, r7, r3
   2f520:	0011      	movs	r1, r2
   2f522:	0018      	movs	r0, r3
   2f524:	4b52      	ldr	r3, [pc, #328]	; (2f670 <MQTTPublish+0x1a8>)
   2f526:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2f528:	687b      	ldr	r3, [r7, #4]
   2f52a:	781b      	ldrb	r3, [r3, #0]
   2f52c:	2b01      	cmp	r3, #1
   2f52e:	d003      	beq.n	2f538 <MQTTPublish+0x70>
   2f530:	687b      	ldr	r3, [r7, #4]
   2f532:	781b      	ldrb	r3, [r3, #0]
   2f534:	2b02      	cmp	r3, #2
   2f536:	d107      	bne.n	2f548 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2f538:	68fb      	ldr	r3, [r7, #12]
   2f53a:	0018      	movs	r0, r3
   2f53c:	4b4d      	ldr	r3, [pc, #308]	; (2f674 <MQTTPublish+0x1ac>)
   2f53e:	4798      	blx	r3
   2f540:	0003      	movs	r3, r0
   2f542:	b29a      	uxth	r2, r3
   2f544:	687b      	ldr	r3, [r7, #4]
   2f546:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2f548:	68fb      	ldr	r3, [r7, #12]
   2f54a:	691b      	ldr	r3, [r3, #16]
   2f54c:	469c      	mov	ip, r3
   2f54e:	68fb      	ldr	r3, [r7, #12]
   2f550:	689b      	ldr	r3, [r3, #8]
   2f552:	001d      	movs	r5, r3
   2f554:	687b      	ldr	r3, [r7, #4]
   2f556:	781b      	ldrb	r3, [r3, #0]
   2f558:	001e      	movs	r6, r3
   2f55a:	687b      	ldr	r3, [r7, #4]
   2f55c:	785b      	ldrb	r3, [r3, #1]
   2f55e:	4698      	mov	r8, r3
   2f560:	687b      	ldr	r3, [r7, #4]
   2f562:	889b      	ldrh	r3, [r3, #4]
   2f564:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2f566:	687b      	ldr	r3, [r7, #4]
   2f568:	689a      	ldr	r2, [r3, #8]
   2f56a:	687b      	ldr	r3, [r7, #4]
   2f56c:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2f56e:	9306      	str	r3, [sp, #24]
   2f570:	9205      	str	r2, [sp, #20]
   2f572:	2318      	movs	r3, #24
   2f574:	18fa      	adds	r2, r7, r3
   2f576:	2308      	movs	r3, #8
   2f578:	446b      	add	r3, sp
   2f57a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2f57c:	c313      	stmia	r3!, {r0, r1, r4}
   2f57e:	464b      	mov	r3, r9
   2f580:	9301      	str	r3, [sp, #4]
   2f582:	4643      	mov	r3, r8
   2f584:	9300      	str	r3, [sp, #0]
   2f586:	0033      	movs	r3, r6
   2f588:	2200      	movs	r2, #0
   2f58a:	0029      	movs	r1, r5
   2f58c:	4660      	mov	r0, ip
   2f58e:	4c3a      	ldr	r4, [pc, #232]	; (2f678 <MQTTPublish+0x1b0>)
   2f590:	47a0      	blx	r4
   2f592:	0003      	movs	r3, r0
   2f594:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f598:	2b00      	cmp	r3, #0
   2f59a:	dd5b      	ble.n	2f654 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2f59c:	2324      	movs	r3, #36	; 0x24
   2f59e:	18fa      	adds	r2, r7, r3
   2f5a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2f5a2:	68fb      	ldr	r3, [r7, #12]
   2f5a4:	0018      	movs	r0, r3
   2f5a6:	4b35      	ldr	r3, [pc, #212]	; (2f67c <MQTTPublish+0x1b4>)
   2f5a8:	4798      	blx	r3
   2f5aa:	0003      	movs	r3, r0
   2f5ac:	637b      	str	r3, [r7, #52]	; 0x34
   2f5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f5b0:	2b00      	cmp	r3, #0
   2f5b2:	d151      	bne.n	2f658 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2f5b4:	687b      	ldr	r3, [r7, #4]
   2f5b6:	781b      	ldrb	r3, [r3, #0]
   2f5b8:	2b01      	cmp	r3, #1
   2f5ba:	d122      	bne.n	2f602 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2f5bc:	2324      	movs	r3, #36	; 0x24
   2f5be:	18fa      	adds	r2, r7, r3
   2f5c0:	68fb      	ldr	r3, [r7, #12]
   2f5c2:	2104      	movs	r1, #4
   2f5c4:	0018      	movs	r0, r3
   2f5c6:	4b2e      	ldr	r3, [pc, #184]	; (2f680 <MQTTPublish+0x1b8>)
   2f5c8:	4798      	blx	r3
   2f5ca:	0003      	movs	r3, r0
   2f5cc:	2b04      	cmp	r3, #4
   2f5ce:	d114      	bne.n	2f5fa <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f5d0:	68fb      	ldr	r3, [r7, #12]
   2f5d2:	695c      	ldr	r4, [r3, #20]
   2f5d4:	68fb      	ldr	r3, [r7, #12]
   2f5d6:	68db      	ldr	r3, [r3, #12]
   2f5d8:	2216      	movs	r2, #22
   2f5da:	18ba      	adds	r2, r7, r2
   2f5dc:	2115      	movs	r1, #21
   2f5de:	1879      	adds	r1, r7, r1
   2f5e0:	2014      	movs	r0, #20
   2f5e2:	1838      	adds	r0, r7, r0
   2f5e4:	9300      	str	r3, [sp, #0]
   2f5e6:	0023      	movs	r3, r4
   2f5e8:	4c26      	ldr	r4, [pc, #152]	; (2f684 <MQTTPublish+0x1bc>)
   2f5ea:	47a0      	blx	r4
   2f5ec:	0003      	movs	r3, r0
   2f5ee:	2b01      	cmp	r3, #1
   2f5f0:	d033      	beq.n	2f65a <MQTTPublish+0x192>
                rc = FAILURE;
   2f5f2:	2301      	movs	r3, #1
   2f5f4:	425b      	negs	r3, r3
   2f5f6:	637b      	str	r3, [r7, #52]	; 0x34
   2f5f8:	e02f      	b.n	2f65a <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2f5fa:	2301      	movs	r3, #1
   2f5fc:	425b      	negs	r3, r3
   2f5fe:	637b      	str	r3, [r7, #52]	; 0x34
   2f600:	e02b      	b.n	2f65a <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2f602:	687b      	ldr	r3, [r7, #4]
   2f604:	781b      	ldrb	r3, [r3, #0]
   2f606:	2b02      	cmp	r3, #2
   2f608:	d127      	bne.n	2f65a <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2f60a:	2324      	movs	r3, #36	; 0x24
   2f60c:	18fa      	adds	r2, r7, r3
   2f60e:	68fb      	ldr	r3, [r7, #12]
   2f610:	2107      	movs	r1, #7
   2f612:	0018      	movs	r0, r3
   2f614:	4b1a      	ldr	r3, [pc, #104]	; (2f680 <MQTTPublish+0x1b8>)
   2f616:	4798      	blx	r3
   2f618:	0003      	movs	r3, r0
   2f61a:	2b07      	cmp	r3, #7
   2f61c:	d114      	bne.n	2f648 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f61e:	68fb      	ldr	r3, [r7, #12]
   2f620:	695c      	ldr	r4, [r3, #20]
   2f622:	68fb      	ldr	r3, [r7, #12]
   2f624:	68db      	ldr	r3, [r3, #12]
   2f626:	2212      	movs	r2, #18
   2f628:	18ba      	adds	r2, r7, r2
   2f62a:	2111      	movs	r1, #17
   2f62c:	1879      	adds	r1, r7, r1
   2f62e:	2010      	movs	r0, #16
   2f630:	1838      	adds	r0, r7, r0
   2f632:	9300      	str	r3, [sp, #0]
   2f634:	0023      	movs	r3, r4
   2f636:	4c13      	ldr	r4, [pc, #76]	; (2f684 <MQTTPublish+0x1bc>)
   2f638:	47a0      	blx	r4
   2f63a:	0003      	movs	r3, r0
   2f63c:	2b01      	cmp	r3, #1
   2f63e:	d00c      	beq.n	2f65a <MQTTPublish+0x192>
                rc = FAILURE;
   2f640:	2301      	movs	r3, #1
   2f642:	425b      	negs	r3, r3
   2f644:	637b      	str	r3, [r7, #52]	; 0x34
   2f646:	e008      	b.n	2f65a <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2f648:	2301      	movs	r3, #1
   2f64a:	425b      	negs	r3, r3
   2f64c:	637b      	str	r3, [r7, #52]	; 0x34
   2f64e:	e004      	b.n	2f65a <MQTTPublish+0x192>
		goto exit;
   2f650:	46c0      	nop			; (mov r8, r8)
   2f652:	e002      	b.n	2f65a <MQTTPublish+0x192>
        goto exit;
   2f654:	46c0      	nop			; (mov r8, r8)
   2f656:	e000      	b.n	2f65a <MQTTPublish+0x192>
        goto exit; // there was a problem
   2f658:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2f65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2f65c:	0018      	movs	r0, r3
   2f65e:	46bd      	mov	sp, r7
   2f660:	b00f      	add	sp, #60	; 0x3c
   2f662:	bc0c      	pop	{r2, r3}
   2f664:	4690      	mov	r8, r2
   2f666:	4699      	mov	r9, r3
   2f668:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f66a:	46c0      	nop			; (mov r8, r8)
   2f66c:	0002f8d1 	.word	0x0002f8d1
   2f670:	0002f859 	.word	0x0002f859
   2f674:	0002ea19 	.word	0x0002ea19
   2f678:	00030b55 	.word	0x00030b55
   2f67c:	0002ea49 	.word	0x0002ea49
   2f680:	0002f1b1 	.word	0x0002f1b1
   2f684:	000305cd 	.word	0x000305cd

0002f688 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2f688:	b580      	push	{r7, lr}
   2f68a:	b088      	sub	sp, #32
   2f68c:	af00      	add	r7, sp, #0
   2f68e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2f690:	2301      	movs	r3, #1
   2f692:	425b      	negs	r3, r3
   2f694:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2f696:	2300      	movs	r3, #0
   2f698:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2f69a:	230c      	movs	r3, #12
   2f69c:	18fb      	adds	r3, r7, r3
   2f69e:	0018      	movs	r0, r3
   2f6a0:	4b13      	ldr	r3, [pc, #76]	; (2f6f0 <MQTTDisconnect+0x68>)
   2f6a2:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f6a4:	687b      	ldr	r3, [r7, #4]
   2f6a6:	685a      	ldr	r2, [r3, #4]
   2f6a8:	230c      	movs	r3, #12
   2f6aa:	18fb      	adds	r3, r7, r3
   2f6ac:	0011      	movs	r1, r2
   2f6ae:	0018      	movs	r0, r3
   2f6b0:	4b10      	ldr	r3, [pc, #64]	; (2f6f4 <MQTTDisconnect+0x6c>)
   2f6b2:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2f6b4:	687b      	ldr	r3, [r7, #4]
   2f6b6:	691a      	ldr	r2, [r3, #16]
   2f6b8:	687b      	ldr	r3, [r7, #4]
   2f6ba:	689b      	ldr	r3, [r3, #8]
   2f6bc:	0019      	movs	r1, r3
   2f6be:	0010      	movs	r0, r2
   2f6c0:	4b0d      	ldr	r3, [pc, #52]	; (2f6f8 <MQTTDisconnect+0x70>)
   2f6c2:	4798      	blx	r3
   2f6c4:	0003      	movs	r3, r0
   2f6c6:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2f6c8:	69bb      	ldr	r3, [r7, #24]
   2f6ca:	2b00      	cmp	r3, #0
   2f6cc:	dd08      	ble.n	2f6e0 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2f6ce:	230c      	movs	r3, #12
   2f6d0:	18fa      	adds	r2, r7, r3
   2f6d2:	69b9      	ldr	r1, [r7, #24]
   2f6d4:	687b      	ldr	r3, [r7, #4]
   2f6d6:	0018      	movs	r0, r3
   2f6d8:	4b08      	ldr	r3, [pc, #32]	; (2f6fc <MQTTDisconnect+0x74>)
   2f6da:	4798      	blx	r3
   2f6dc:	0003      	movs	r3, r0
   2f6de:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2f6e0:	687b      	ldr	r3, [r7, #4]
   2f6e2:	2200      	movs	r2, #0
   2f6e4:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2f6e6:	69fb      	ldr	r3, [r7, #28]
}
   2f6e8:	0018      	movs	r0, r3
   2f6ea:	46bd      	mov	sp, r7
   2f6ec:	b008      	add	sp, #32
   2f6ee:	bd80      	pop	{r7, pc}
   2f6f0:	0002f8d1 	.word	0x0002f8d1
   2f6f4:	0002f859 	.word	0x0002f859
   2f6f8:	00030481 	.word	0x00030481
   2f6fc:	0002ea49 	.word	0x0002ea49

0002f700 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2f700:	b580      	push	{r7, lr}
   2f702:	b084      	sub	sp, #16
   2f704:	af00      	add	r7, sp, #0
   2f706:	0002      	movs	r2, r0
   2f708:	1dfb      	adds	r3, r7, #7
   2f70a:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f70c:	2300      	movs	r3, #0
   2f70e:	60fb      	str	r3, [r7, #12]
   2f710:	e01c      	b.n	2f74c <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2f712:	4a12      	ldr	r2, [pc, #72]	; (2f75c <isMQTTSocket+0x5c>)
   2f714:	68fb      	ldr	r3, [r7, #12]
   2f716:	2164      	movs	r1, #100	; 0x64
   2f718:	434b      	muls	r3, r1
   2f71a:	18d3      	adds	r3, r2, r3
   2f71c:	3360      	adds	r3, #96	; 0x60
   2f71e:	681b      	ldr	r3, [r3, #0]
   2f720:	2b00      	cmp	r3, #0
   2f722:	d010      	beq.n	2f746 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2f724:	4a0d      	ldr	r2, [pc, #52]	; (2f75c <isMQTTSocket+0x5c>)
   2f726:	68fb      	ldr	r3, [r7, #12]
   2f728:	2164      	movs	r1, #100	; 0x64
   2f72a:	434b      	muls	r3, r1
   2f72c:	18d3      	adds	r3, r2, r3
   2f72e:	3360      	adds	r3, #96	; 0x60
   2f730:	681b      	ldr	r3, [r3, #0]
   2f732:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2f734:	68bb      	ldr	r3, [r7, #8]
   2f736:	6a1a      	ldr	r2, [r3, #32]
   2f738:	1dfb      	adds	r3, r7, #7
   2f73a:	781b      	ldrb	r3, [r3, #0]
   2f73c:	b25b      	sxtb	r3, r3
   2f73e:	429a      	cmp	r2, r3
   2f740:	d101      	bne.n	2f746 <isMQTTSocket+0x46>
				return true;
   2f742:	2301      	movs	r3, #1
   2f744:	e006      	b.n	2f754 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f746:	68fb      	ldr	r3, [r7, #12]
   2f748:	3301      	adds	r3, #1
   2f74a:	60fb      	str	r3, [r7, #12]
   2f74c:	68fb      	ldr	r3, [r7, #12]
   2f74e:	2b06      	cmp	r3, #6
   2f750:	d9df      	bls.n	2f712 <isMQTTSocket+0x12>
		}
	}
	return false;
   2f752:	2300      	movs	r3, #0
}
   2f754:	0018      	movs	r0, r3
   2f756:	46bd      	mov	sp, r7
   2f758:	b004      	add	sp, #16
   2f75a:	bd80      	pop	{r7, pc}
   2f75c:	20004434 	.word	0x20004434

0002f760 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2f760:	b580      	push	{r7, lr}
   2f762:	b082      	sub	sp, #8
   2f764:	af00      	add	r7, sp, #0
   2f766:	6078      	str	r0, [r7, #4]
   2f768:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2f76a:	4b0d      	ldr	r3, [pc, #52]	; (2f7a0 <dnsResolveCallback+0x40>)
   2f76c:	781b      	ldrb	r3, [r3, #0]
   2f76e:	2201      	movs	r2, #1
   2f770:	4053      	eors	r3, r2
   2f772:	b2db      	uxtb	r3, r3
   2f774:	2b00      	cmp	r3, #0
   2f776:	d00e      	beq.n	2f796 <dnsResolveCallback+0x36>
   2f778:	4b0a      	ldr	r3, [pc, #40]	; (2f7a4 <dnsResolveCallback+0x44>)
   2f77a:	681b      	ldr	r3, [r3, #0]
   2f77c:	687a      	ldr	r2, [r7, #4]
   2f77e:	0011      	movs	r1, r2
   2f780:	0018      	movs	r0, r3
   2f782:	4b09      	ldr	r3, [pc, #36]	; (2f7a8 <dnsResolveCallback+0x48>)
   2f784:	4798      	blx	r3
   2f786:	1e03      	subs	r3, r0, #0
   2f788:	d105      	bne.n	2f796 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2f78a:	683a      	ldr	r2, [r7, #0]
   2f78c:	4b07      	ldr	r3, [pc, #28]	; (2f7ac <dnsResolveCallback+0x4c>)
   2f78e:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2f790:	4b03      	ldr	r3, [pc, #12]	; (2f7a0 <dnsResolveCallback+0x40>)
   2f792:	2201      	movs	r2, #1
   2f794:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2f796:	46c0      	nop			; (mov r8, r8)
   2f798:	46bd      	mov	sp, r7
   2f79a:	b002      	add	sp, #8
   2f79c:	bd80      	pop	{r7, pc}
   2f79e:	46c0      	nop			; (mov r8, r8)
   2f7a0:	20004324 	.word	0x20004324
   2f7a4:	20004430 	.word	0x20004430
   2f7a8:	000352bb 	.word	0x000352bb
   2f7ac:	2000431c 	.word	0x2000431c

0002f7b0 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2f7b0:	b580      	push	{r7, lr}
   2f7b2:	b084      	sub	sp, #16
   2f7b4:	af00      	add	r7, sp, #0
   2f7b6:	603a      	str	r2, [r7, #0]
   2f7b8:	1dfb      	adds	r3, r7, #7
   2f7ba:	1c02      	adds	r2, r0, #0
   2f7bc:	701a      	strb	r2, [r3, #0]
   2f7be:	1dbb      	adds	r3, r7, #6
   2f7c0:	1c0a      	adds	r2, r1, #0
   2f7c2:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2f7c4:	1dfb      	adds	r3, r7, #7
   2f7c6:	781b      	ldrb	r3, [r3, #0]
   2f7c8:	b25b      	sxtb	r3, r3
   2f7ca:	0018      	movs	r0, r3
   2f7cc:	4b12      	ldr	r3, [pc, #72]	; (2f818 <tcpClientSocketEventHandler+0x68>)
   2f7ce:	4798      	blx	r3
   2f7d0:	1e03      	subs	r3, r0, #0
   2f7d2:	d01c      	beq.n	2f80e <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2f7d4:	1dbb      	adds	r3, r7, #6
   2f7d6:	781b      	ldrb	r3, [r3, #0]
   2f7d8:	2b06      	cmp	r3, #6
   2f7da:	d00c      	beq.n	2f7f6 <tcpClientSocketEventHandler+0x46>
   2f7dc:	2b07      	cmp	r3, #7
   2f7de:	d006      	beq.n	2f7ee <tcpClientSocketEventHandler+0x3e>
   2f7e0:	2b05      	cmp	r3, #5
   2f7e2:	d000      	beq.n	2f7e6 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2f7e4:	e013      	b.n	2f80e <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2f7e6:	4b0d      	ldr	r3, [pc, #52]	; (2f81c <tcpClientSocketEventHandler+0x6c>)
   2f7e8:	2201      	movs	r2, #1
   2f7ea:	701a      	strb	r2, [r3, #0]
			break;
   2f7ec:	e00f      	b.n	2f80e <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2f7ee:	4b0c      	ldr	r3, [pc, #48]	; (2f820 <tcpClientSocketEventHandler+0x70>)
   2f7f0:	2201      	movs	r2, #1
   2f7f2:	701a      	strb	r2, [r3, #0]
			break;
   2f7f4:	e00b      	b.n	2f80e <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2f7f6:	683b      	ldr	r3, [r7, #0]
   2f7f8:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2f7fa:	68fb      	ldr	r3, [r7, #12]
   2f7fc:	2204      	movs	r2, #4
   2f7fe:	5e9b      	ldrsh	r3, [r3, r2]
   2f800:	001a      	movs	r2, r3
   2f802:	4b08      	ldr	r3, [pc, #32]	; (2f824 <tcpClientSocketEventHandler+0x74>)
   2f804:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2f806:	4b08      	ldr	r3, [pc, #32]	; (2f828 <tcpClientSocketEventHandler+0x78>)
   2f808:	2201      	movs	r2, #1
   2f80a:	701a      	strb	r2, [r3, #0]
			break;
   2f80c:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2f80e:	46c0      	nop			; (mov r8, r8)
   2f810:	46bd      	mov	sp, r7
   2f812:	b004      	add	sp, #16
   2f814:	bd80      	pop	{r7, pc}
   2f816:	46c0      	nop			; (mov r8, r8)
   2f818:	0002f701 	.word	0x0002f701
   2f81c:	20004325 	.word	0x20004325
   2f820:	20004326 	.word	0x20004326
   2f824:	20004320 	.word	0x20004320
   2f828:	20004327 	.word	0x20004327

0002f82c <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2f82c:	b580      	push	{r7, lr}
   2f82e:	b082      	sub	sp, #8
   2f830:	af00      	add	r7, sp, #0
   2f832:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2f834:	687b      	ldr	r3, [r7, #4]
   2f836:	3304      	adds	r3, #4
   2f838:	687a      	ldr	r2, [r7, #4]
   2f83a:	0011      	movs	r1, r2
   2f83c:	0018      	movs	r0, r3
   2f83e:	4b05      	ldr	r3, [pc, #20]	; (2f854 <TimerIsExpired+0x28>)
   2f840:	4798      	blx	r3
   2f842:	0003      	movs	r3, r0
   2f844:	3b01      	subs	r3, #1
   2f846:	425a      	negs	r2, r3
   2f848:	4153      	adcs	r3, r2
   2f84a:	b2db      	uxtb	r3, r3
}
   2f84c:	0018      	movs	r0, r3
   2f84e:	46bd      	mov	sp, r7
   2f850:	b002      	add	sp, #8
   2f852:	bd80      	pop	{r7, pc}
   2f854:	0001d061 	.word	0x0001d061

0002f858 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2f858:	b580      	push	{r7, lr}
   2f85a:	b082      	sub	sp, #8
   2f85c:	af00      	add	r7, sp, #0
   2f85e:	6078      	str	r0, [r7, #4]
   2f860:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2f862:	687b      	ldr	r3, [r7, #4]
   2f864:	683a      	ldr	r2, [r7, #0]
   2f866:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2f868:	687b      	ldr	r3, [r7, #4]
   2f86a:	3304      	adds	r3, #4
   2f86c:	0018      	movs	r0, r3
   2f86e:	4b03      	ldr	r3, [pc, #12]	; (2f87c <TimerCountdownMS+0x24>)
   2f870:	4798      	blx	r3
}
   2f872:	46c0      	nop			; (mov r8, r8)
   2f874:	46bd      	mov	sp, r7
   2f876:	b002      	add	sp, #8
   2f878:	bd80      	pop	{r7, pc}
   2f87a:	46c0      	nop			; (mov r8, r8)
   2f87c:	0001cff5 	.word	0x0001cff5

0002f880 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2f880:	b580      	push	{r7, lr}
   2f882:	b082      	sub	sp, #8
   2f884:	af00      	add	r7, sp, #0
   2f886:	6078      	str	r0, [r7, #4]
   2f888:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2f88a:	683b      	ldr	r3, [r7, #0]
   2f88c:	22fa      	movs	r2, #250	; 0xfa
   2f88e:	0092      	lsls	r2, r2, #2
   2f890:	435a      	muls	r2, r3
   2f892:	687b      	ldr	r3, [r7, #4]
   2f894:	0011      	movs	r1, r2
   2f896:	0018      	movs	r0, r3
   2f898:	4b02      	ldr	r3, [pc, #8]	; (2f8a4 <TimerCountdown+0x24>)
   2f89a:	4798      	blx	r3
}
   2f89c:	46c0      	nop			; (mov r8, r8)
   2f89e:	46bd      	mov	sp, r7
   2f8a0:	b002      	add	sp, #8
   2f8a2:	bd80      	pop	{r7, pc}
   2f8a4:	0002f859 	.word	0x0002f859

0002f8a8 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2f8a8:	b580      	push	{r7, lr}
   2f8aa:	b082      	sub	sp, #8
   2f8ac:	af00      	add	r7, sp, #0
   2f8ae:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2f8b0:	687b      	ldr	r3, [r7, #4]
   2f8b2:	3304      	adds	r3, #4
   2f8b4:	687a      	ldr	r2, [r7, #4]
   2f8b6:	0011      	movs	r1, r2
   2f8b8:	0018      	movs	r0, r3
   2f8ba:	4b04      	ldr	r3, [pc, #16]	; (2f8cc <TimerLeftMS+0x24>)
   2f8bc:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2f8be:	687b      	ldr	r3, [r7, #4]
   2f8c0:	681b      	ldr	r3, [r3, #0]
}
   2f8c2:	0018      	movs	r0, r3
   2f8c4:	46bd      	mov	sp, r7
   2f8c6:	b002      	add	sp, #8
   2f8c8:	bd80      	pop	{r7, pc}
   2f8ca:	46c0      	nop			; (mov r8, r8)
   2f8cc:	0001d061 	.word	0x0001d061

0002f8d0 <TimerInit>:


void TimerInit(Timer* timer) {
   2f8d0:	b580      	push	{r7, lr}
   2f8d2:	b082      	sub	sp, #8
   2f8d4:	af00      	add	r7, sp, #0
   2f8d6:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2f8d8:	687b      	ldr	r3, [r7, #4]
   2f8da:	2200      	movs	r2, #0
   2f8dc:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2f8de:	687b      	ldr	r3, [r7, #4]
   2f8e0:	3304      	adds	r3, #4
   2f8e2:	2208      	movs	r2, #8
   2f8e4:	2100      	movs	r1, #0
   2f8e6:	0018      	movs	r0, r3
   2f8e8:	4b02      	ldr	r3, [pc, #8]	; (2f8f4 <TimerInit+0x24>)
   2f8ea:	4798      	blx	r3
}
   2f8ec:	46c0      	nop			; (mov r8, r8)
   2f8ee:	46bd      	mov	sp, r7
   2f8f0:	b002      	add	sp, #8
   2f8f2:	bd80      	pop	{r7, pc}
   2f8f4:	00034f63 	.word	0x00034f63

0002f8f8 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2f8f8:	b590      	push	{r4, r7, lr}
   2f8fa:	b085      	sub	sp, #20
   2f8fc:	af00      	add	r7, sp, #0
   2f8fe:	60f8      	str	r0, [r7, #12]
   2f900:	60b9      	str	r1, [r7, #8]
   2f902:	607a      	str	r2, [r7, #4]
   2f904:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2f906:	683b      	ldr	r3, [r7, #0]
   2f908:	2b00      	cmp	r3, #0
   2f90a:	d101      	bne.n	2f910 <WINC1500_read+0x18>
   2f90c:	230a      	movs	r3, #10
   2f90e:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2f910:	4b2c      	ldr	r3, [pc, #176]	; (2f9c4 <WINC1500_read+0xcc>)
   2f912:	681b      	ldr	r3, [r3, #0]
   2f914:	2b00      	cmp	r3, #0
   2f916:	d131      	bne.n	2f97c <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2f918:	4b2b      	ldr	r3, [pc, #172]	; (2f9c8 <WINC1500_read+0xd0>)
   2f91a:	2200      	movs	r2, #0
   2f91c:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2f91e:	68fb      	ldr	r3, [r7, #12]
   2f920:	681b      	ldr	r3, [r3, #0]
   2f922:	b258      	sxtb	r0, r3
   2f924:	683c      	ldr	r4, [r7, #0]
   2f926:	2380      	movs	r3, #128	; 0x80
   2f928:	005a      	lsls	r2, r3, #1
   2f92a:	4928      	ldr	r1, [pc, #160]	; (2f9cc <WINC1500_read+0xd4>)
   2f92c:	0023      	movs	r3, r4
   2f92e:	4c28      	ldr	r4, [pc, #160]	; (2f9d0 <WINC1500_read+0xd8>)
   2f930:	47a0      	blx	r4
   2f932:	1e03      	subs	r3, r0, #0
   2f934:	d005      	beq.n	2f942 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2f936:	2301      	movs	r3, #1
   2f938:	425b      	negs	r3, r3
   2f93a:	e03e      	b.n	2f9ba <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2f93c:	2000      	movs	r0, #0
   2f93e:	4b25      	ldr	r3, [pc, #148]	; (2f9d4 <WINC1500_read+0xdc>)
   2f940:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2f942:	4b21      	ldr	r3, [pc, #132]	; (2f9c8 <WINC1500_read+0xd0>)
   2f944:	781b      	ldrb	r3, [r3, #0]
   2f946:	2201      	movs	r2, #1
   2f948:	4053      	eors	r3, r2
   2f94a:	b2db      	uxtb	r3, r3
   2f94c:	2b00      	cmp	r3, #0
   2f94e:	d1f5      	bne.n	2f93c <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2f950:	4b21      	ldr	r3, [pc, #132]	; (2f9d8 <WINC1500_read+0xe0>)
   2f952:	681b      	ldr	r3, [r3, #0]
   2f954:	2b00      	cmp	r3, #0
   2f956:	dd08      	ble.n	2f96a <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2f958:	4b1f      	ldr	r3, [pc, #124]	; (2f9d8 <WINC1500_read+0xe0>)
   2f95a:	681b      	ldr	r3, [r3, #0]
   2f95c:	001a      	movs	r2, r3
   2f95e:	4b19      	ldr	r3, [pc, #100]	; (2f9c4 <WINC1500_read+0xcc>)
   2f960:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2f962:	4b1e      	ldr	r3, [pc, #120]	; (2f9dc <WINC1500_read+0xe4>)
   2f964:	2200      	movs	r2, #0
   2f966:	601a      	str	r2, [r3, #0]
   2f968:	e008      	b.n	2f97c <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2f96a:	4b16      	ldr	r3, [pc, #88]	; (2f9c4 <WINC1500_read+0xcc>)
   2f96c:	2200      	movs	r2, #0
   2f96e:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2f970:	4b1a      	ldr	r3, [pc, #104]	; (2f9dc <WINC1500_read+0xe4>)
   2f972:	2200      	movs	r2, #0
   2f974:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2f976:	4b18      	ldr	r3, [pc, #96]	; (2f9d8 <WINC1500_read+0xe0>)
   2f978:	681b      	ldr	r3, [r3, #0]
   2f97a:	e01e      	b.n	2f9ba <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2f97c:	4b11      	ldr	r3, [pc, #68]	; (2f9c4 <WINC1500_read+0xcc>)
   2f97e:	681b      	ldr	r3, [r3, #0]
   2f980:	001a      	movs	r2, r3
   2f982:	687b      	ldr	r3, [r7, #4]
   2f984:	4293      	cmp	r3, r2
   2f986:	dd02      	ble.n	2f98e <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2f988:	2301      	movs	r3, #1
   2f98a:	425b      	negs	r3, r3
   2f98c:	e015      	b.n	2f9ba <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2f98e:	4b13      	ldr	r3, [pc, #76]	; (2f9dc <WINC1500_read+0xe4>)
   2f990:	681a      	ldr	r2, [r3, #0]
   2f992:	4b0e      	ldr	r3, [pc, #56]	; (2f9cc <WINC1500_read+0xd4>)
   2f994:	18d1      	adds	r1, r2, r3
   2f996:	687a      	ldr	r2, [r7, #4]
   2f998:	68bb      	ldr	r3, [r7, #8]
   2f99a:	0018      	movs	r0, r3
   2f99c:	4b10      	ldr	r3, [pc, #64]	; (2f9e0 <WINC1500_read+0xe8>)
   2f99e:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2f9a0:	4b08      	ldr	r3, [pc, #32]	; (2f9c4 <WINC1500_read+0xcc>)
   2f9a2:	681a      	ldr	r2, [r3, #0]
   2f9a4:	687b      	ldr	r3, [r7, #4]
   2f9a6:	1ad2      	subs	r2, r2, r3
   2f9a8:	4b06      	ldr	r3, [pc, #24]	; (2f9c4 <WINC1500_read+0xcc>)
   2f9aa:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2f9ac:	4b0b      	ldr	r3, [pc, #44]	; (2f9dc <WINC1500_read+0xe4>)
   2f9ae:	681a      	ldr	r2, [r3, #0]
   2f9b0:	687b      	ldr	r3, [r7, #4]
   2f9b2:	18d2      	adds	r2, r2, r3
   2f9b4:	4b09      	ldr	r3, [pc, #36]	; (2f9dc <WINC1500_read+0xe4>)
   2f9b6:	601a      	str	r2, [r3, #0]
  
  return len;
   2f9b8:	687b      	ldr	r3, [r7, #4]
}
   2f9ba:	0018      	movs	r0, r3
   2f9bc:	46bd      	mov	sp, r7
   2f9be:	b005      	add	sp, #20
   2f9c0:	bd90      	pop	{r4, r7, pc}
   2f9c2:	46c0      	nop			; (mov r8, r8)
   2f9c4:	2000442c 	.word	0x2000442c
   2f9c8:	20004327 	.word	0x20004327
   2f9cc:	20004328 	.word	0x20004328
   2f9d0:	00025fad 	.word	0x00025fad
   2f9d4:	000224f5 	.word	0x000224f5
   2f9d8:	20004320 	.word	0x20004320
   2f9dc:	20004428 	.word	0x20004428
   2f9e0:	00034f2d 	.word	0x00034f2d

0002f9e4 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2f9e4:	b590      	push	{r4, r7, lr}
   2f9e6:	b085      	sub	sp, #20
   2f9e8:	af00      	add	r7, sp, #0
   2f9ea:	60f8      	str	r0, [r7, #12]
   2f9ec:	60b9      	str	r1, [r7, #8]
   2f9ee:	607a      	str	r2, [r7, #4]
   2f9f0:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2f9f2:	4b10      	ldr	r3, [pc, #64]	; (2fa34 <WINC1500_write+0x50>)
   2f9f4:	2200      	movs	r2, #0
   2f9f6:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2f9f8:	68fb      	ldr	r3, [r7, #12]
   2f9fa:	681b      	ldr	r3, [r3, #0]
   2f9fc:	b258      	sxtb	r0, r3
   2f9fe:	687b      	ldr	r3, [r7, #4]
   2fa00:	b29a      	uxth	r2, r3
   2fa02:	68b9      	ldr	r1, [r7, #8]
   2fa04:	2300      	movs	r3, #0
   2fa06:	4c0c      	ldr	r4, [pc, #48]	; (2fa38 <WINC1500_write+0x54>)
   2fa08:	47a0      	blx	r4
   2fa0a:	1e03      	subs	r3, r0, #0
   2fa0c:	d005      	beq.n	2fa1a <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2fa0e:	2301      	movs	r3, #1
   2fa10:	425b      	negs	r3, r3
   2fa12:	e00a      	b.n	2fa2a <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2fa14:	2000      	movs	r0, #0
   2fa16:	4b09      	ldr	r3, [pc, #36]	; (2fa3c <WINC1500_write+0x58>)
   2fa18:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2fa1a:	4b06      	ldr	r3, [pc, #24]	; (2fa34 <WINC1500_write+0x50>)
   2fa1c:	781b      	ldrb	r3, [r3, #0]
   2fa1e:	2201      	movs	r2, #1
   2fa20:	4053      	eors	r3, r2
   2fa22:	b2db      	uxtb	r3, r3
   2fa24:	2b00      	cmp	r3, #0
   2fa26:	d1f5      	bne.n	2fa14 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2fa28:	687b      	ldr	r3, [r7, #4]
}
   2fa2a:	0018      	movs	r0, r3
   2fa2c:	46bd      	mov	sp, r7
   2fa2e:	b005      	add	sp, #20
   2fa30:	bd90      	pop	{r4, r7, pc}
   2fa32:	46c0      	nop			; (mov r8, r8)
   2fa34:	20004326 	.word	0x20004326
   2fa38:	00025e49 	.word	0x00025e49
   2fa3c:	000224f5 	.word	0x000224f5

0002fa40 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2fa40:	b580      	push	{r7, lr}
   2fa42:	b082      	sub	sp, #8
   2fa44:	af00      	add	r7, sp, #0
   2fa46:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2fa48:	687b      	ldr	r3, [r7, #4]
   2fa4a:	681b      	ldr	r3, [r3, #0]
   2fa4c:	b25b      	sxtb	r3, r3
   2fa4e:	0018      	movs	r0, r3
   2fa50:	4b06      	ldr	r3, [pc, #24]	; (2fa6c <WINC1500_disconnect+0x2c>)
   2fa52:	4798      	blx	r3
	n->socket=-1;
   2fa54:	687b      	ldr	r3, [r7, #4]
   2fa56:	2201      	movs	r2, #1
   2fa58:	4252      	negs	r2, r2
   2fa5a:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2fa5c:	4b04      	ldr	r3, [pc, #16]	; (2fa70 <WINC1500_disconnect+0x30>)
   2fa5e:	2200      	movs	r2, #0
   2fa60:	701a      	strb	r2, [r3, #0]
}
   2fa62:	46c0      	nop			; (mov r8, r8)
   2fa64:	46bd      	mov	sp, r7
   2fa66:	b002      	add	sp, #8
   2fa68:	bd80      	pop	{r7, pc}
   2fa6a:	46c0      	nop			; (mov r8, r8)
   2fa6c:	0002612d 	.word	0x0002612d
   2fa70:	20004325 	.word	0x20004325

0002fa74 <NetworkInit>:


void NetworkInit(Network* n) {
   2fa74:	b580      	push	{r7, lr}
   2fa76:	b082      	sub	sp, #8
   2fa78:	af00      	add	r7, sp, #0
   2fa7a:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2fa7c:	687b      	ldr	r3, [r7, #4]
   2fa7e:	2201      	movs	r2, #1
   2fa80:	4252      	negs	r2, r2
   2fa82:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2fa84:	687b      	ldr	r3, [r7, #4]
   2fa86:	4a06      	ldr	r2, [pc, #24]	; (2faa0 <NetworkInit+0x2c>)
   2fa88:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2fa8a:	687b      	ldr	r3, [r7, #4]
   2fa8c:	4a05      	ldr	r2, [pc, #20]	; (2faa4 <NetworkInit+0x30>)
   2fa8e:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2fa90:	687b      	ldr	r3, [r7, #4]
   2fa92:	4a05      	ldr	r2, [pc, #20]	; (2faa8 <NetworkInit+0x34>)
   2fa94:	611a      	str	r2, [r3, #16]
}
   2fa96:	46c0      	nop			; (mov r8, r8)
   2fa98:	46bd      	mov	sp, r7
   2fa9a:	b002      	add	sp, #8
   2fa9c:	bd80      	pop	{r7, pc}
   2fa9e:	46c0      	nop			; (mov r8, r8)
   2faa0:	0002f8f9 	.word	0x0002f8f9
   2faa4:	0002f9e5 	.word	0x0002f9e5
   2faa8:	0002fa41 	.word	0x0002fa41

0002faac <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2faac:	b580      	push	{r7, lr}
   2faae:	b088      	sub	sp, #32
   2fab0:	af00      	add	r7, sp, #0
   2fab2:	60f8      	str	r0, [r7, #12]
   2fab4:	60b9      	str	r1, [r7, #8]
   2fab6:	607a      	str	r2, [r7, #4]
   2fab8:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2faba:	4b37      	ldr	r3, [pc, #220]	; (2fb98 <ConnectNetwork+0xec>)
   2fabc:	2200      	movs	r2, #0
   2fabe:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2fac0:	4b36      	ldr	r3, [pc, #216]	; (2fb9c <ConnectNetwork+0xf0>)
   2fac2:	68ba      	ldr	r2, [r7, #8]
   2fac4:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2fac6:	68bb      	ldr	r3, [r7, #8]
   2fac8:	0018      	movs	r0, r3
   2faca:	4b35      	ldr	r3, [pc, #212]	; (2fba0 <ConnectNetwork+0xf4>)
   2facc:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2face:	e002      	b.n	2fad6 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2fad0:	2000      	movs	r0, #0
   2fad2:	4b34      	ldr	r3, [pc, #208]	; (2fba4 <ConnectNetwork+0xf8>)
   2fad4:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2fad6:	4b30      	ldr	r3, [pc, #192]	; (2fb98 <ConnectNetwork+0xec>)
   2fad8:	781b      	ldrb	r3, [r3, #0]
   2fada:	2201      	movs	r2, #1
   2fadc:	4053      	eors	r3, r2
   2fade:	b2db      	uxtb	r3, r3
   2fae0:	2b00      	cmp	r3, #0
   2fae2:	d1f5      	bne.n	2fad0 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2fae4:	4b30      	ldr	r3, [pc, #192]	; (2fba8 <ConnectNetwork+0xfc>)
   2fae6:	681a      	ldr	r2, [r3, #0]
   2fae8:	68fb      	ldr	r3, [r7, #12]
   2faea:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2faec:	2310      	movs	r3, #16
   2faee:	18fb      	adds	r3, r7, r3
   2faf0:	2202      	movs	r2, #2
   2faf2:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2faf4:	687b      	ldr	r3, [r7, #4]
   2faf6:	b29b      	uxth	r3, r3
   2faf8:	021b      	lsls	r3, r3, #8
   2fafa:	b21a      	sxth	r2, r3
   2fafc:	687b      	ldr	r3, [r7, #4]
   2fafe:	b29b      	uxth	r3, r3
   2fb00:	0a1b      	lsrs	r3, r3, #8
   2fb02:	b29b      	uxth	r3, r3
   2fb04:	b21b      	sxth	r3, r3
   2fb06:	4313      	orrs	r3, r2
   2fb08:	b21b      	sxth	r3, r3
   2fb0a:	b29a      	uxth	r2, r3
   2fb0c:	2310      	movs	r3, #16
   2fb0e:	18fb      	adds	r3, r7, r3
   2fb10:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2fb12:	4b25      	ldr	r3, [pc, #148]	; (2fba8 <ConnectNetwork+0xfc>)
   2fb14:	681b      	ldr	r3, [r3, #0]
   2fb16:	001a      	movs	r2, r3
   2fb18:	2310      	movs	r3, #16
   2fb1a:	18fb      	adds	r3, r7, r3
   2fb1c:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2fb1e:	68fb      	ldr	r3, [r7, #12]
   2fb20:	681b      	ldr	r3, [r3, #0]
   2fb22:	2b00      	cmp	r3, #0
   2fb24:	da0a      	bge.n	2fb3c <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2fb26:	683b      	ldr	r3, [r7, #0]
   2fb28:	b2db      	uxtb	r3, r3
   2fb2a:	001a      	movs	r2, r3
   2fb2c:	2101      	movs	r1, #1
   2fb2e:	2002      	movs	r0, #2
   2fb30:	4b1e      	ldr	r3, [pc, #120]	; (2fbac <ConnectNetwork+0x100>)
   2fb32:	4798      	blx	r3
   2fb34:	0003      	movs	r3, r0
   2fb36:	001a      	movs	r2, r3
   2fb38:	68fb      	ldr	r3, [r7, #12]
   2fb3a:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2fb3c:	68fb      	ldr	r3, [r7, #12]
   2fb3e:	681b      	ldr	r3, [r3, #0]
   2fb40:	3301      	adds	r3, #1
   2fb42:	d108      	bne.n	2fb56 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2fb44:	68fb      	ldr	r3, [r7, #12]
   2fb46:	681b      	ldr	r3, [r3, #0]
   2fb48:	b25b      	sxtb	r3, r3
   2fb4a:	0018      	movs	r0, r3
   2fb4c:	4b18      	ldr	r3, [pc, #96]	; (2fbb0 <ConnectNetwork+0x104>)
   2fb4e:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2fb50:	2309      	movs	r3, #9
   2fb52:	425b      	negs	r3, r3
   2fb54:	e01c      	b.n	2fb90 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2fb56:	68fb      	ldr	r3, [r7, #12]
   2fb58:	681b      	ldr	r3, [r3, #0]
   2fb5a:	b25b      	sxtb	r3, r3
   2fb5c:	2210      	movs	r2, #16
   2fb5e:	18b9      	adds	r1, r7, r2
   2fb60:	2210      	movs	r2, #16
   2fb62:	0018      	movs	r0, r3
   2fb64:	4b13      	ldr	r3, [pc, #76]	; (2fbb4 <ConnectNetwork+0x108>)
   2fb66:	4798      	blx	r3
   2fb68:	1e03      	subs	r3, r0, #0
   2fb6a:	d002      	beq.n	2fb72 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2fb6c:	2309      	movs	r3, #9
   2fb6e:	425b      	negs	r3, r3
   2fb70:	e00e      	b.n	2fb90 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2fb72:	4b11      	ldr	r3, [pc, #68]	; (2fbb8 <ConnectNetwork+0x10c>)
   2fb74:	2200      	movs	r2, #0
   2fb76:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2fb78:	e002      	b.n	2fb80 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2fb7a:	2000      	movs	r0, #0
   2fb7c:	4b09      	ldr	r3, [pc, #36]	; (2fba4 <ConnectNetwork+0xf8>)
   2fb7e:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2fb80:	4b0d      	ldr	r3, [pc, #52]	; (2fbb8 <ConnectNetwork+0x10c>)
   2fb82:	781b      	ldrb	r3, [r3, #0]
   2fb84:	2201      	movs	r2, #1
   2fb86:	4053      	eors	r3, r2
   2fb88:	b2db      	uxtb	r3, r3
   2fb8a:	2b00      	cmp	r3, #0
   2fb8c:	d1f5      	bne.n	2fb7a <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2fb8e:	2300      	movs	r3, #0
   2fb90:	0018      	movs	r0, r3
   2fb92:	46bd      	mov	sp, r7
   2fb94:	b008      	add	sp, #32
   2fb96:	bd80      	pop	{r7, pc}
   2fb98:	20004324 	.word	0x20004324
   2fb9c:	20004430 	.word	0x20004430
   2fba0:	00026375 	.word	0x00026375
   2fba4:	000224f5 	.word	0x000224f5
   2fba8:	2000431c 	.word	0x2000431c
   2fbac:	00025b21 	.word	0x00025b21
   2fbb0:	0002612d 	.word	0x0002612d
   2fbb4:	00025d35 	.word	0x00025d35
   2fbb8:	20004325 	.word	0x20004325

0002fbbc <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2fbbc:	b580      	push	{r7, lr}
   2fbbe:	b084      	sub	sp, #16
   2fbc0:	af00      	add	r7, sp, #0
   2fbc2:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2fbc4:	687b      	ldr	r3, [r7, #4]
   2fbc6:	2b00      	cmp	r3, #0
   2fbc8:	d022      	beq.n	2fc10 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fbca:	2300      	movs	r3, #0
   2fbcc:	60fb      	str	r3, [r7, #12]
   2fbce:	e01b      	b.n	2fc08 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2fbd0:	4a11      	ldr	r2, [pc, #68]	; (2fc18 <allocateClient+0x5c>)
   2fbd2:	68fb      	ldr	r3, [r7, #12]
   2fbd4:	2164      	movs	r1, #100	; 0x64
   2fbd6:	434b      	muls	r3, r1
   2fbd8:	18d3      	adds	r3, r2, r3
   2fbda:	3360      	adds	r3, #96	; 0x60
   2fbdc:	681b      	ldr	r3, [r3, #0]
   2fbde:	2b00      	cmp	r3, #0
   2fbe0:	d10f      	bne.n	2fc02 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2fbe2:	4a0d      	ldr	r2, [pc, #52]	; (2fc18 <allocateClient+0x5c>)
   2fbe4:	68fb      	ldr	r3, [r7, #12]
   2fbe6:	2164      	movs	r1, #100	; 0x64
   2fbe8:	434b      	muls	r3, r1
   2fbea:	18d3      	adds	r3, r2, r3
   2fbec:	3360      	adds	r3, #96	; 0x60
   2fbee:	687a      	ldr	r2, [r7, #4]
   2fbf0:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2fbf2:	68fb      	ldr	r3, [r7, #12]
   2fbf4:	2264      	movs	r2, #100	; 0x64
   2fbf6:	435a      	muls	r2, r3
   2fbf8:	4b07      	ldr	r3, [pc, #28]	; (2fc18 <allocateClient+0x5c>)
   2fbfa:	18d2      	adds	r2, r2, r3
   2fbfc:	687b      	ldr	r3, [r7, #4]
   2fbfe:	61da      	str	r2, [r3, #28]
			return;
   2fc00:	e007      	b.n	2fc12 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fc02:	68fb      	ldr	r3, [r7, #12]
   2fc04:	3301      	adds	r3, #1
   2fc06:	60fb      	str	r3, [r7, #12]
   2fc08:	68fb      	ldr	r3, [r7, #12]
   2fc0a:	2b06      	cmp	r3, #6
   2fc0c:	d9e0      	bls.n	2fbd0 <allocateClient+0x14>
   2fc0e:	e000      	b.n	2fc12 <allocateClient+0x56>
		return;
   2fc10:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2fc12:	46bd      	mov	sp, r7
   2fc14:	b004      	add	sp, #16
   2fc16:	bd80      	pop	{r7, pc}
   2fc18:	20004434 	.word	0x20004434

0002fc1c <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2fc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fc1e:	b089      	sub	sp, #36	; 0x24
   2fc20:	af04      	add	r7, sp, #16
   2fc22:	6078      	str	r0, [r7, #4]
   2fc24:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2fc26:	687b      	ldr	r3, [r7, #4]
   2fc28:	2b00      	cmp	r3, #0
   2fc2a:	d00a      	beq.n	2fc42 <mqtt_init+0x26>
   2fc2c:	683b      	ldr	r3, [r7, #0]
   2fc2e:	2b00      	cmp	r3, #0
   2fc30:	d007      	beq.n	2fc42 <mqtt_init+0x26>
   2fc32:	683b      	ldr	r3, [r7, #0]
   2fc34:	691b      	ldr	r3, [r3, #16]
   2fc36:	2b00      	cmp	r3, #0
   2fc38:	d003      	beq.n	2fc42 <mqtt_init+0x26>
   2fc3a:	683b      	ldr	r3, [r7, #0]
   2fc3c:	689b      	ldr	r3, [r3, #8]
   2fc3e:	2b00      	cmp	r3, #0
   2fc40:	d102      	bne.n	2fc48 <mqtt_init+0x2c>
		return FAILURE;
   2fc42:	2301      	movs	r3, #1
   2fc44:	425b      	negs	r3, r3
   2fc46:	e034      	b.n	2fcb2 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2fc48:	683b      	ldr	r3, [r7, #0]
   2fc4a:	889b      	ldrh	r3, [r3, #4]
   2fc4c:	001a      	movs	r2, r3
   2fc4e:	23fa      	movs	r3, #250	; 0xfa
   2fc50:	009b      	lsls	r3, r3, #2
   2fc52:	4353      	muls	r3, r2
   2fc54:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2fc56:	687b      	ldr	r3, [r7, #4]
   2fc58:	3320      	adds	r3, #32
   2fc5a:	0018      	movs	r0, r3
   2fc5c:	4b17      	ldr	r3, [pc, #92]	; (2fcbc <mqtt_init+0xa0>)
   2fc5e:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2fc60:	687b      	ldr	r3, [r7, #4]
   2fc62:	3304      	adds	r3, #4
   2fc64:	6839      	ldr	r1, [r7, #0]
   2fc66:	2218      	movs	r2, #24
   2fc68:	0018      	movs	r0, r3
   2fc6a:	4b15      	ldr	r3, [pc, #84]	; (2fcc0 <mqtt_init+0xa4>)
   2fc6c:	4798      	blx	r3
	allocateClient(module);
   2fc6e:	687b      	ldr	r3, [r7, #4]
   2fc70:	0018      	movs	r0, r3
   2fc72:	4b14      	ldr	r3, [pc, #80]	; (2fcc4 <mqtt_init+0xa8>)
   2fc74:	4798      	blx	r3
	
	if(module->client)
   2fc76:	687b      	ldr	r3, [r7, #4]
   2fc78:	69db      	ldr	r3, [r3, #28]
   2fc7a:	2b00      	cmp	r3, #0
   2fc7c:	d017      	beq.n	2fcae <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2fc7e:	687b      	ldr	r3, [r7, #4]
   2fc80:	69d8      	ldr	r0, [r3, #28]
   2fc82:	687b      	ldr	r3, [r7, #4]
   2fc84:	3320      	adds	r3, #32
   2fc86:	001c      	movs	r4, r3
   2fc88:	683b      	ldr	r3, [r7, #0]
   2fc8a:	691e      	ldr	r6, [r3, #16]
   2fc8c:	683b      	ldr	r3, [r7, #0]
   2fc8e:	695a      	ldr	r2, [r3, #20]
   2fc90:	683b      	ldr	r3, [r7, #0]
   2fc92:	6899      	ldr	r1, [r3, #8]
   2fc94:	683b      	ldr	r3, [r7, #0]
   2fc96:	68db      	ldr	r3, [r3, #12]
   2fc98:	68fd      	ldr	r5, [r7, #12]
   2fc9a:	9302      	str	r3, [sp, #8]
   2fc9c:	9101      	str	r1, [sp, #4]
   2fc9e:	9200      	str	r2, [sp, #0]
   2fca0:	0033      	movs	r3, r6
   2fca2:	002a      	movs	r2, r5
   2fca4:	0021      	movs	r1, r4
   2fca6:	4c08      	ldr	r4, [pc, #32]	; (2fcc8 <mqtt_init+0xac>)
   2fca8:	47a0      	blx	r4
		return SUCCESS;
   2fcaa:	2300      	movs	r3, #0
   2fcac:	e001      	b.n	2fcb2 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2fcae:	2301      	movs	r3, #1
   2fcb0:	425b      	negs	r3, r3
}
   2fcb2:	0018      	movs	r0, r3
   2fcb4:	46bd      	mov	sp, r7
   2fcb6:	b005      	add	sp, #20
   2fcb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fcba:	46c0      	nop			; (mov r8, r8)
   2fcbc:	0002fa75 	.word	0x0002fa75
   2fcc0:	00034f2d 	.word	0x00034f2d
   2fcc4:	0002fbbd 	.word	0x0002fbbd
   2fcc8:	0002eaed 	.word	0x0002eaed

0002fccc <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2fccc:	b580      	push	{r7, lr}
   2fcce:	b082      	sub	sp, #8
   2fcd0:	af00      	add	r7, sp, #0
   2fcd2:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2fcd4:	687b      	ldr	r3, [r7, #4]
   2fcd6:	4a0c      	ldr	r2, [pc, #48]	; (2fd08 <mqtt_get_config_defaults+0x3c>)
   2fcd8:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2fcda:	687b      	ldr	r3, [r7, #4]
   2fcdc:	2200      	movs	r2, #0
   2fcde:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2fce0:	687b      	ldr	r3, [r7, #4]
   2fce2:	223c      	movs	r2, #60	; 0x3c
   2fce4:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2fce6:	687b      	ldr	r3, [r7, #4]
   2fce8:	2200      	movs	r2, #0
   2fcea:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2fcec:	687b      	ldr	r3, [r7, #4]
   2fcee:	2200      	movs	r2, #0
   2fcf0:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2fcf2:	687b      	ldr	r3, [r7, #4]
   2fcf4:	2200      	movs	r2, #0
   2fcf6:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2fcf8:	687b      	ldr	r3, [r7, #4]
   2fcfa:	2200      	movs	r2, #0
   2fcfc:	615a      	str	r2, [r3, #20]
}
   2fcfe:	46c0      	nop			; (mov r8, r8)
   2fd00:	46bd      	mov	sp, r7
   2fd02:	b002      	add	sp, #8
   2fd04:	bd80      	pop	{r7, pc}
   2fd06:	46c0      	nop			; (mov r8, r8)
   2fd08:	0000075b 	.word	0x0000075b

0002fd0c <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2fd0c:	b580      	push	{r7, lr}
   2fd0e:	b082      	sub	sp, #8
   2fd10:	af00      	add	r7, sp, #0
   2fd12:	6078      	str	r0, [r7, #4]
   2fd14:	6039      	str	r1, [r7, #0]
	if(module)
   2fd16:	687b      	ldr	r3, [r7, #4]
   2fd18:	2b00      	cmp	r3, #0
   2fd1a:	d004      	beq.n	2fd26 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2fd1c:	687b      	ldr	r3, [r7, #4]
   2fd1e:	683a      	ldr	r2, [r7, #0]
   2fd20:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2fd22:	2300      	movs	r3, #0
   2fd24:	e001      	b.n	2fd2a <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2fd26:	2301      	movs	r3, #1
   2fd28:	425b      	negs	r3, r3
}
   2fd2a:	0018      	movs	r0, r3
   2fd2c:	46bd      	mov	sp, r7
   2fd2e:	b002      	add	sp, #8
   2fd30:	bd80      	pop	{r7, pc}
	...

0002fd34 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2fd34:	b580      	push	{r7, lr}
   2fd36:	b082      	sub	sp, #8
   2fd38:	af00      	add	r7, sp, #0
   2fd3a:	603a      	str	r2, [r7, #0]
   2fd3c:	1dfb      	adds	r3, r7, #7
   2fd3e:	1c02      	adds	r2, r0, #0
   2fd40:	701a      	strb	r2, [r3, #0]
   2fd42:	1dbb      	adds	r3, r7, #6
   2fd44:	1c0a      	adds	r2, r1, #0
   2fd46:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2fd48:	683a      	ldr	r2, [r7, #0]
   2fd4a:	1dbb      	adds	r3, r7, #6
   2fd4c:	7819      	ldrb	r1, [r3, #0]
   2fd4e:	1dfb      	adds	r3, r7, #7
   2fd50:	781b      	ldrb	r3, [r3, #0]
   2fd52:	b25b      	sxtb	r3, r3
   2fd54:	0018      	movs	r0, r3
   2fd56:	4b03      	ldr	r3, [pc, #12]	; (2fd64 <mqtt_socket_event_handler+0x30>)
   2fd58:	4798      	blx	r3
}
   2fd5a:	46c0      	nop			; (mov r8, r8)
   2fd5c:	46bd      	mov	sp, r7
   2fd5e:	b002      	add	sp, #8
   2fd60:	bd80      	pop	{r7, pc}
   2fd62:	46c0      	nop			; (mov r8, r8)
   2fd64:	0002f7b1 	.word	0x0002f7b1

0002fd68 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2fd68:	b580      	push	{r7, lr}
   2fd6a:	b082      	sub	sp, #8
   2fd6c:	af00      	add	r7, sp, #0
   2fd6e:	6078      	str	r0, [r7, #4]
   2fd70:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2fd72:	683a      	ldr	r2, [r7, #0]
   2fd74:	687b      	ldr	r3, [r7, #4]
   2fd76:	0011      	movs	r1, r2
   2fd78:	0018      	movs	r0, r3
   2fd7a:	4b03      	ldr	r3, [pc, #12]	; (2fd88 <mqtt_socket_resolve_handler+0x20>)
   2fd7c:	4798      	blx	r3
}
   2fd7e:	46c0      	nop			; (mov r8, r8)
   2fd80:	46bd      	mov	sp, r7
   2fd82:	b002      	add	sp, #8
   2fd84:	bd80      	pop	{r7, pc}
   2fd86:	46c0      	nop			; (mov r8, r8)
   2fd88:	0002f761 	.word	0x0002f761

0002fd8c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2fd8c:	b590      	push	{r4, r7, lr}
   2fd8e:	b085      	sub	sp, #20
   2fd90:	af00      	add	r7, sp, #0
   2fd92:	6078      	str	r0, [r7, #4]
   2fd94:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2fd96:	687b      	ldr	r3, [r7, #4]
   2fd98:	3320      	adds	r3, #32
   2fd9a:	0018      	movs	r0, r3
   2fd9c:	687b      	ldr	r3, [r7, #4]
   2fd9e:	889b      	ldrh	r3, [r3, #4]
   2fda0:	001a      	movs	r2, r3
   2fda2:	687b      	ldr	r3, [r7, #4]
   2fda4:	799b      	ldrb	r3, [r3, #6]
   2fda6:	6839      	ldr	r1, [r7, #0]
   2fda8:	4c09      	ldr	r4, [pc, #36]	; (2fdd0 <mqtt_connect+0x44>)
   2fdaa:	47a0      	blx	r4
   2fdac:	0003      	movs	r3, r0
   2fdae:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2fdb0:	687b      	ldr	r3, [r7, #4]
   2fdb2:	681b      	ldr	r3, [r3, #0]
   2fdb4:	2b00      	cmp	r3, #0
   2fdb6:	d006      	beq.n	2fdc6 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2fdb8:	687b      	ldr	r3, [r7, #4]
   2fdba:	681b      	ldr	r3, [r3, #0]
   2fdbc:	220c      	movs	r2, #12
   2fdbe:	18ba      	adds	r2, r7, r2
   2fdc0:	6878      	ldr	r0, [r7, #4]
   2fdc2:	2100      	movs	r1, #0
   2fdc4:	4798      	blx	r3
	return connResult.sock_connected.result;
   2fdc6:	68fb      	ldr	r3, [r7, #12]
}
   2fdc8:	0018      	movs	r0, r3
   2fdca:	46bd      	mov	sp, r7
   2fdcc:	b005      	add	sp, #20
   2fdce:	bd90      	pop	{r4, r7, pc}
   2fdd0:	0002faad 	.word	0x0002faad

0002fdd4 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2fdd4:	b580      	push	{r7, lr}
   2fdd6:	b09c      	sub	sp, #112	; 0x70
   2fdd8:	af00      	add	r7, sp, #0
   2fdda:	60f8      	str	r0, [r7, #12]
   2fddc:	607a      	str	r2, [r7, #4]
   2fdde:	603b      	str	r3, [r7, #0]
   2fde0:	230b      	movs	r3, #11
   2fde2:	18fb      	adds	r3, r7, r3
   2fde4:	1c0a      	adds	r2, r1, #0
   2fde6:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2fde8:	2310      	movs	r3, #16
   2fdea:	18fa      	adds	r2, r7, r3
   2fdec:	4b31      	ldr	r3, [pc, #196]	; (2feb4 <mqtt_connect_broker+0xe0>)
   2fdee:	0010      	movs	r0, r2
   2fdf0:	0019      	movs	r1, r3
   2fdf2:	2358      	movs	r3, #88	; 0x58
   2fdf4:	001a      	movs	r2, r3
   2fdf6:	4b30      	ldr	r3, [pc, #192]	; (2feb8 <mqtt_connect_broker+0xe4>)
   2fdf8:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2fdfa:	2310      	movs	r3, #16
   2fdfc:	18fb      	adds	r3, r7, r3
   2fdfe:	2204      	movs	r2, #4
   2fe00:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2fe02:	2310      	movs	r3, #16
   2fe04:	18fb      	adds	r3, r7, r3
   2fe06:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2fe08:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2fe0a:	2310      	movs	r3, #16
   2fe0c:	18fb      	adds	r3, r7, r3
   2fe0e:	687a      	ldr	r2, [r7, #4]
   2fe10:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2fe12:	2310      	movs	r3, #16
   2fe14:	18fb      	adds	r3, r7, r3
   2fe16:	683a      	ldr	r2, [r7, #0]
   2fe18:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2fe1a:	2310      	movs	r3, #16
   2fe1c:	18fb      	adds	r3, r7, r3
   2fe1e:	220b      	movs	r2, #11
   2fe20:	18ba      	adds	r2, r7, r2
   2fe22:	7812      	ldrb	r2, [r2, #0]
   2fe24:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2fe26:	2310      	movs	r3, #16
   2fe28:	18fb      	adds	r3, r7, r3
   2fe2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2fe2c:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2fe2e:	2310      	movs	r3, #16
   2fe30:	18fb      	adds	r3, r7, r3
   2fe32:	2280      	movs	r2, #128	; 0x80
   2fe34:	18ba      	adds	r2, r7, r2
   2fe36:	6812      	ldr	r2, [r2, #0]
   2fe38:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2fe3a:	2310      	movs	r3, #16
   2fe3c:	18fb      	adds	r3, r7, r3
   2fe3e:	228c      	movs	r2, #140	; 0x8c
   2fe40:	18ba      	adds	r2, r7, r2
   2fe42:	213c      	movs	r1, #60	; 0x3c
   2fe44:	7812      	ldrb	r2, [r2, #0]
   2fe46:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2fe48:	2310      	movs	r3, #16
   2fe4a:	18fb      	adds	r3, r7, r3
   2fe4c:	2288      	movs	r2, #136	; 0x88
   2fe4e:	18ba      	adds	r2, r7, r2
   2fe50:	213d      	movs	r1, #61	; 0x3d
   2fe52:	7812      	ldrb	r2, [r2, #0]
   2fe54:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2fe56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2fe58:	2b00      	cmp	r3, #0
   2fe5a:	d008      	beq.n	2fe6e <mqtt_connect_broker+0x9a>
   2fe5c:	2380      	movs	r3, #128	; 0x80
   2fe5e:	18fb      	adds	r3, r7, r3
   2fe60:	681b      	ldr	r3, [r3, #0]
   2fe62:	2b00      	cmp	r3, #0
   2fe64:	d003      	beq.n	2fe6e <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2fe66:	2310      	movs	r3, #16
   2fe68:	18fb      	adds	r3, r7, r3
   2fe6a:	2201      	movs	r2, #1
   2fe6c:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2fe6e:	68fb      	ldr	r3, [r7, #12]
   2fe70:	69db      	ldr	r3, [r3, #28]
   2fe72:	2210      	movs	r2, #16
   2fe74:	18ba      	adds	r2, r7, r2
   2fe76:	0011      	movs	r1, r2
   2fe78:	0018      	movs	r0, r3
   2fe7a:	4b10      	ldr	r3, [pc, #64]	; (2febc <mqtt_connect_broker+0xe8>)
   2fe7c:	4798      	blx	r3
   2fe7e:	0003      	movs	r3, r0
   2fe80:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2fe82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2fe84:	b2da      	uxtb	r2, r3
   2fe86:	2368      	movs	r3, #104	; 0x68
   2fe88:	18fb      	adds	r3, r7, r3
   2fe8a:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2fe8c:	68fb      	ldr	r3, [r7, #12]
   2fe8e:	681b      	ldr	r3, [r3, #0]
   2fe90:	2b00      	cmp	r3, #0
   2fe92:	d006      	beq.n	2fea2 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2fe94:	68fb      	ldr	r3, [r7, #12]
   2fe96:	681b      	ldr	r3, [r3, #0]
   2fe98:	2268      	movs	r2, #104	; 0x68
   2fe9a:	18ba      	adds	r2, r7, r2
   2fe9c:	68f8      	ldr	r0, [r7, #12]
   2fe9e:	2101      	movs	r1, #1
   2fea0:	4798      	blx	r3
	
	module->isConnected = true;
   2fea2:	68fb      	ldr	r3, [r7, #12]
   2fea4:	2234      	movs	r2, #52	; 0x34
   2fea6:	2101      	movs	r1, #1
   2fea8:	5499      	strb	r1, [r3, r2]
	return rc;
   2feaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2feac:	0018      	movs	r0, r3
   2feae:	46bd      	mov	sp, r7
   2feb0:	b01c      	add	sp, #112	; 0x70
   2feb2:	bd80      	pop	{r7, pc}
   2feb4:	0003a440 	.word	0x0003a440
   2feb8:	00034f2d 	.word	0x00034f2d
   2febc:	0002f1fd 	.word	0x0002f1fd

0002fec0 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2fec0:	b580      	push	{r7, lr}
   2fec2:	b084      	sub	sp, #16
   2fec4:	af00      	add	r7, sp, #0
   2fec6:	6078      	str	r0, [r7, #4]
   2fec8:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2feca:	687b      	ldr	r3, [r7, #4]
   2fecc:	69db      	ldr	r3, [r3, #28]
   2fece:	0018      	movs	r0, r3
   2fed0:	4b0c      	ldr	r3, [pc, #48]	; (2ff04 <mqtt_disconnect+0x44>)
   2fed2:	4798      	blx	r3
   2fed4:	0003      	movs	r3, r0
   2fed6:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2fed8:	68fb      	ldr	r3, [r7, #12]
   2feda:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2fedc:	687b      	ldr	r3, [r7, #4]
   2fede:	681b      	ldr	r3, [r3, #0]
   2fee0:	2b00      	cmp	r3, #0
   2fee2:	d006      	beq.n	2fef2 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2fee4:	687b      	ldr	r3, [r7, #4]
   2fee6:	681b      	ldr	r3, [r3, #0]
   2fee8:	2208      	movs	r2, #8
   2feea:	18ba      	adds	r2, r7, r2
   2feec:	6878      	ldr	r0, [r7, #4]
   2feee:	2105      	movs	r1, #5
   2fef0:	4798      	blx	r3
	
	module->isConnected = false;
   2fef2:	687b      	ldr	r3, [r7, #4]
   2fef4:	2234      	movs	r2, #52	; 0x34
   2fef6:	2100      	movs	r1, #0
   2fef8:	5499      	strb	r1, [r3, r2]
	return rc;
   2fefa:	68fb      	ldr	r3, [r7, #12]
}
   2fefc:	0018      	movs	r0, r3
   2fefe:	46bd      	mov	sp, r7
   2ff00:	b004      	add	sp, #16
   2ff02:	bd80      	pop	{r7, pc}
   2ff04:	0002f689 	.word	0x0002f689

0002ff08 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2ff08:	b580      	push	{r7, lr}
   2ff0a:	b08a      	sub	sp, #40	; 0x28
   2ff0c:	af00      	add	r7, sp, #0
   2ff0e:	60f8      	str	r0, [r7, #12]
   2ff10:	60b9      	str	r1, [r7, #8]
   2ff12:	607a      	str	r2, [r7, #4]
   2ff14:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2ff16:	2314      	movs	r3, #20
   2ff18:	18fb      	adds	r3, r7, r3
   2ff1a:	2230      	movs	r2, #48	; 0x30
   2ff1c:	18ba      	adds	r2, r7, r2
   2ff1e:	7812      	ldrb	r2, [r2, #0]
   2ff20:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2ff22:	2314      	movs	r3, #20
   2ff24:	18fb      	adds	r3, r7, r3
   2ff26:	687a      	ldr	r2, [r7, #4]
   2ff28:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2ff2a:	2314      	movs	r3, #20
   2ff2c:	18fb      	adds	r3, r7, r3
   2ff2e:	683a      	ldr	r2, [r7, #0]
   2ff30:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2ff32:	2314      	movs	r3, #20
   2ff34:	18fb      	adds	r3, r7, r3
   2ff36:	2234      	movs	r2, #52	; 0x34
   2ff38:	18ba      	adds	r2, r7, r2
   2ff3a:	7812      	ldrb	r2, [r2, #0]
   2ff3c:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2ff3e:	68fb      	ldr	r3, [r7, #12]
   2ff40:	69db      	ldr	r3, [r3, #28]
   2ff42:	2214      	movs	r2, #20
   2ff44:	18ba      	adds	r2, r7, r2
   2ff46:	68b9      	ldr	r1, [r7, #8]
   2ff48:	0018      	movs	r0, r3
   2ff4a:	4b09      	ldr	r3, [pc, #36]	; (2ff70 <mqtt_publish+0x68>)
   2ff4c:	4798      	blx	r3
   2ff4e:	0003      	movs	r3, r0
   2ff50:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2ff52:	68fb      	ldr	r3, [r7, #12]
   2ff54:	681b      	ldr	r3, [r3, #0]
   2ff56:	2b00      	cmp	r3, #0
   2ff58:	d005      	beq.n	2ff66 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2ff5a:	68fb      	ldr	r3, [r7, #12]
   2ff5c:	681b      	ldr	r3, [r3, #0]
   2ff5e:	68f8      	ldr	r0, [r7, #12]
   2ff60:	2200      	movs	r2, #0
   2ff62:	2102      	movs	r1, #2
   2ff64:	4798      	blx	r3
	
	return rc;
   2ff66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2ff68:	0018      	movs	r0, r3
   2ff6a:	46bd      	mov	sp, r7
   2ff6c:	b00a      	add	sp, #40	; 0x28
   2ff6e:	bd80      	pop	{r7, pc}
   2ff70:	0002f4c9 	.word	0x0002f4c9

0002ff74 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2ff74:	b590      	push	{r4, r7, lr}
   2ff76:	b087      	sub	sp, #28
   2ff78:	af00      	add	r7, sp, #0
   2ff7a:	60f8      	str	r0, [r7, #12]
   2ff7c:	60b9      	str	r1, [r7, #8]
   2ff7e:	603b      	str	r3, [r7, #0]
   2ff80:	1dfb      	adds	r3, r7, #7
   2ff82:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2ff84:	68fb      	ldr	r3, [r7, #12]
   2ff86:	69d8      	ldr	r0, [r3, #28]
   2ff88:	683c      	ldr	r4, [r7, #0]
   2ff8a:	1dfb      	adds	r3, r7, #7
   2ff8c:	781a      	ldrb	r2, [r3, #0]
   2ff8e:	68b9      	ldr	r1, [r7, #8]
   2ff90:	0023      	movs	r3, r4
   2ff92:	4c09      	ldr	r4, [pc, #36]	; (2ffb8 <mqtt_subscribe+0x44>)
   2ff94:	47a0      	blx	r4
   2ff96:	0003      	movs	r3, r0
   2ff98:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2ff9a:	68fb      	ldr	r3, [r7, #12]
   2ff9c:	681b      	ldr	r3, [r3, #0]
   2ff9e:	2b00      	cmp	r3, #0
   2ffa0:	d005      	beq.n	2ffae <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2ffa2:	68fb      	ldr	r3, [r7, #12]
   2ffa4:	681b      	ldr	r3, [r3, #0]
   2ffa6:	68f8      	ldr	r0, [r7, #12]
   2ffa8:	2200      	movs	r2, #0
   2ffaa:	2103      	movs	r1, #3
   2ffac:	4798      	blx	r3
	
	return rc;
   2ffae:	697b      	ldr	r3, [r7, #20]
}
   2ffb0:	0018      	movs	r0, r3
   2ffb2:	46bd      	mov	sp, r7
   2ffb4:	b007      	add	sp, #28
   2ffb6:	bd90      	pop	{r4, r7, pc}
   2ffb8:	0002f33d 	.word	0x0002f33d

0002ffbc <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2ffbc:	b580      	push	{r7, lr}
   2ffbe:	b082      	sub	sp, #8
   2ffc0:	af00      	add	r7, sp, #0
   2ffc2:	6078      	str	r0, [r7, #4]
   2ffc4:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2ffc6:	687b      	ldr	r3, [r7, #4]
   2ffc8:	69db      	ldr	r3, [r3, #28]
   2ffca:	683a      	ldr	r2, [r7, #0]
   2ffcc:	0011      	movs	r1, r2
   2ffce:	0018      	movs	r0, r3
   2ffd0:	4b03      	ldr	r3, [pc, #12]	; (2ffe0 <mqtt_yield+0x24>)
   2ffd2:	4798      	blx	r3
   2ffd4:	0003      	movs	r3, r0
   2ffd6:	0018      	movs	r0, r3
   2ffd8:	46bd      	mov	sp, r7
   2ffda:	b002      	add	sp, #8
   2ffdc:	bd80      	pop	{r7, pc}
   2ffde:	46c0      	nop			; (mov r8, r8)
   2ffe0:	0002f145 	.word	0x0002f145

0002ffe4 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2ffe4:	b590      	push	{r4, r7, lr}
   2ffe6:	b085      	sub	sp, #20
   2ffe8:	af00      	add	r7, sp, #0
   2ffea:	6078      	str	r0, [r7, #4]
	int len = 0;
   2ffec:	2300      	movs	r3, #0
   2ffee:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2fff0:	687b      	ldr	r3, [r7, #4]
   2fff2:	7a1b      	ldrb	r3, [r3, #8]
   2fff4:	2b03      	cmp	r3, #3
   2fff6:	d102      	bne.n	2fffe <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2fff8:	230c      	movs	r3, #12
   2fffa:	60fb      	str	r3, [r7, #12]
   2fffc:	e005      	b.n	3000a <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2fffe:	687b      	ldr	r3, [r7, #4]
   30000:	7a1b      	ldrb	r3, [r3, #8]
   30002:	2b04      	cmp	r3, #4
   30004:	d101      	bne.n	3000a <MQTTSerialize_connectLength+0x26>
		len = 10;
   30006:	230a      	movs	r3, #10
   30008:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   3000a:	687b      	ldr	r3, [r7, #4]
   3000c:	68d8      	ldr	r0, [r3, #12]
   3000e:	6919      	ldr	r1, [r3, #16]
   30010:	695a      	ldr	r2, [r3, #20]
   30012:	4b25      	ldr	r3, [pc, #148]	; (300a8 <MQTTSerialize_connectLength+0xc4>)
   30014:	4798      	blx	r3
   30016:	0003      	movs	r3, r0
   30018:	3302      	adds	r3, #2
   3001a:	68fa      	ldr	r2, [r7, #12]
   3001c:	18d3      	adds	r3, r2, r3
   3001e:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   30020:	687b      	ldr	r3, [r7, #4]
   30022:	7edb      	ldrb	r3, [r3, #27]
   30024:	2b00      	cmp	r3, #0
   30026:	d013      	beq.n	30050 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   30028:	687b      	ldr	r3, [r7, #4]
   3002a:	6a58      	ldr	r0, [r3, #36]	; 0x24
   3002c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   3002e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   30030:	4b1d      	ldr	r3, [pc, #116]	; (300a8 <MQTTSerialize_connectLength+0xc4>)
   30032:	4798      	blx	r3
   30034:	0003      	movs	r3, r0
   30036:	1c9c      	adds	r4, r3, #2
   30038:	687b      	ldr	r3, [r7, #4]
   3003a:	6b18      	ldr	r0, [r3, #48]	; 0x30
   3003c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   3003e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   30040:	4b19      	ldr	r3, [pc, #100]	; (300a8 <MQTTSerialize_connectLength+0xc4>)
   30042:	4798      	blx	r3
   30044:	0003      	movs	r3, r0
   30046:	18e3      	adds	r3, r4, r3
   30048:	3302      	adds	r3, #2
   3004a:	68fa      	ldr	r2, [r7, #12]
   3004c:	18d3      	adds	r3, r2, r3
   3004e:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   30050:	687b      	ldr	r3, [r7, #4]
   30052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30054:	2b00      	cmp	r3, #0
   30056:	d103      	bne.n	30060 <MQTTSerialize_connectLength+0x7c>
   30058:	687b      	ldr	r3, [r7, #4]
   3005a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   3005c:	2b00      	cmp	r3, #0
   3005e:	d00a      	beq.n	30076 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   30060:	687b      	ldr	r3, [r7, #4]
   30062:	6c18      	ldr	r0, [r3, #64]	; 0x40
   30064:	6c59      	ldr	r1, [r3, #68]	; 0x44
   30066:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   30068:	4b0f      	ldr	r3, [pc, #60]	; (300a8 <MQTTSerialize_connectLength+0xc4>)
   3006a:	4798      	blx	r3
   3006c:	0003      	movs	r3, r0
   3006e:	3302      	adds	r3, #2
   30070:	68fa      	ldr	r2, [r7, #12]
   30072:	18d3      	adds	r3, r2, r3
   30074:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   30076:	687b      	ldr	r3, [r7, #4]
   30078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3007a:	2b00      	cmp	r3, #0
   3007c:	d103      	bne.n	30086 <MQTTSerialize_connectLength+0xa2>
   3007e:	687b      	ldr	r3, [r7, #4]
   30080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30082:	2b00      	cmp	r3, #0
   30084:	d00a      	beq.n	3009c <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   30086:	687b      	ldr	r3, [r7, #4]
   30088:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   3008a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   3008c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3008e:	4b06      	ldr	r3, [pc, #24]	; (300a8 <MQTTSerialize_connectLength+0xc4>)
   30090:	4798      	blx	r3
   30092:	0003      	movs	r3, r0
   30094:	3302      	adds	r3, #2
   30096:	68fa      	ldr	r2, [r7, #12]
   30098:	18d3      	adds	r3, r2, r3
   3009a:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   3009c:	68fb      	ldr	r3, [r7, #12]
}
   3009e:	0018      	movs	r0, r3
   300a0:	46bd      	mov	sp, r7
   300a2:	b005      	add	sp, #20
   300a4:	bd90      	pop	{r4, r7, pc}
   300a6:	46c0      	nop			; (mov r8, r8)
   300a8:	00030a55 	.word	0x00030a55

000300ac <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   300ac:	b590      	push	{r4, r7, lr}
   300ae:	b08b      	sub	sp, #44	; 0x2c
   300b0:	af00      	add	r7, sp, #0
   300b2:	60f8      	str	r0, [r7, #12]
   300b4:	60b9      	str	r1, [r7, #8]
   300b6:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   300b8:	68fb      	ldr	r3, [r7, #12]
   300ba:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   300bc:	2300      	movs	r3, #0
   300be:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   300c0:	2300      	movs	r3, #0
   300c2:	617b      	str	r3, [r7, #20]
	int len = 0;
   300c4:	2300      	movs	r3, #0
   300c6:	623b      	str	r3, [r7, #32]
	int rc = -1;
   300c8:	2301      	movs	r3, #1
   300ca:	425b      	negs	r3, r3
   300cc:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   300ce:	687b      	ldr	r3, [r7, #4]
   300d0:	0018      	movs	r0, r3
   300d2:	4b8c      	ldr	r3, [pc, #560]	; (30304 <MQTTSerialize_connect+0x258>)
   300d4:	4798      	blx	r3
   300d6:	0003      	movs	r3, r0
   300d8:	623b      	str	r3, [r7, #32]
   300da:	6a3b      	ldr	r3, [r7, #32]
   300dc:	0018      	movs	r0, r3
   300de:	4b8a      	ldr	r3, [pc, #552]	; (30308 <MQTTSerialize_connect+0x25c>)
   300e0:	4798      	blx	r3
   300e2:	0002      	movs	r2, r0
   300e4:	68bb      	ldr	r3, [r7, #8]
   300e6:	429a      	cmp	r2, r3
   300e8:	dd03      	ble.n	300f2 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   300ea:	2302      	movs	r3, #2
   300ec:	425b      	negs	r3, r3
   300ee:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   300f0:	e103      	b.n	302fa <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   300f2:	2318      	movs	r3, #24
   300f4:	18fb      	adds	r3, r7, r3
   300f6:	2200      	movs	r2, #0
   300f8:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   300fa:	2318      	movs	r3, #24
   300fc:	18fb      	adds	r3, r7, r3
   300fe:	781a      	ldrb	r2, [r3, #0]
   30100:	210f      	movs	r1, #15
   30102:	400a      	ands	r2, r1
   30104:	1c11      	adds	r1, r2, #0
   30106:	2210      	movs	r2, #16
   30108:	430a      	orrs	r2, r1
   3010a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   3010c:	2318      	movs	r3, #24
   3010e:	18fb      	adds	r3, r7, r3
   30110:	781a      	ldrb	r2, [r3, #0]
   30112:	231c      	movs	r3, #28
   30114:	18fb      	adds	r3, r7, r3
   30116:	0011      	movs	r1, r2
   30118:	0018      	movs	r0, r3
   3011a:	4b7c      	ldr	r3, [pc, #496]	; (3030c <MQTTSerialize_connect+0x260>)
   3011c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   3011e:	69fb      	ldr	r3, [r7, #28]
   30120:	6a3a      	ldr	r2, [r7, #32]
   30122:	0011      	movs	r1, r2
   30124:	0018      	movs	r0, r3
   30126:	4b7a      	ldr	r3, [pc, #488]	; (30310 <MQTTSerialize_connect+0x264>)
   30128:	4798      	blx	r3
   3012a:	0002      	movs	r2, r0
   3012c:	69fb      	ldr	r3, [r7, #28]
   3012e:	189b      	adds	r3, r3, r2
   30130:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   30132:	687b      	ldr	r3, [r7, #4]
   30134:	7a1b      	ldrb	r3, [r3, #8]
   30136:	2b04      	cmp	r3, #4
   30138:	d10d      	bne.n	30156 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   3013a:	4a76      	ldr	r2, [pc, #472]	; (30314 <MQTTSerialize_connect+0x268>)
   3013c:	231c      	movs	r3, #28
   3013e:	18fb      	adds	r3, r7, r3
   30140:	0011      	movs	r1, r2
   30142:	0018      	movs	r0, r3
   30144:	4b74      	ldr	r3, [pc, #464]	; (30318 <MQTTSerialize_connect+0x26c>)
   30146:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   30148:	231c      	movs	r3, #28
   3014a:	18fb      	adds	r3, r7, r3
   3014c:	2104      	movs	r1, #4
   3014e:	0018      	movs	r0, r3
   30150:	4b6e      	ldr	r3, [pc, #440]	; (3030c <MQTTSerialize_connect+0x260>)
   30152:	4798      	blx	r3
   30154:	e00c      	b.n	30170 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   30156:	4a71      	ldr	r2, [pc, #452]	; (3031c <MQTTSerialize_connect+0x270>)
   30158:	231c      	movs	r3, #28
   3015a:	18fb      	adds	r3, r7, r3
   3015c:	0011      	movs	r1, r2
   3015e:	0018      	movs	r0, r3
   30160:	4b6d      	ldr	r3, [pc, #436]	; (30318 <MQTTSerialize_connect+0x26c>)
   30162:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   30164:	231c      	movs	r3, #28
   30166:	18fb      	adds	r3, r7, r3
   30168:	2103      	movs	r1, #3
   3016a:	0018      	movs	r0, r3
   3016c:	4b67      	ldr	r3, [pc, #412]	; (3030c <MQTTSerialize_connect+0x260>)
   3016e:	4798      	blx	r3
	}

	flags.all = 0;
   30170:	2314      	movs	r3, #20
   30172:	18fb      	adds	r3, r7, r3
   30174:	2200      	movs	r2, #0
   30176:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   30178:	687b      	ldr	r3, [r7, #4]
   3017a:	7e9b      	ldrb	r3, [r3, #26]
   3017c:	1c1a      	adds	r2, r3, #0
   3017e:	2301      	movs	r3, #1
   30180:	4013      	ands	r3, r2
   30182:	b2da      	uxtb	r2, r3
   30184:	2314      	movs	r3, #20
   30186:	18fb      	adds	r3, r7, r3
   30188:	2101      	movs	r1, #1
   3018a:	400a      	ands	r2, r1
   3018c:	1890      	adds	r0, r2, r2
   3018e:	781a      	ldrb	r2, [r3, #0]
   30190:	2102      	movs	r1, #2
   30192:	438a      	bics	r2, r1
   30194:	1c11      	adds	r1, r2, #0
   30196:	1c02      	adds	r2, r0, #0
   30198:	430a      	orrs	r2, r1
   3019a:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   3019c:	687b      	ldr	r3, [r7, #4]
   3019e:	7edb      	ldrb	r3, [r3, #27]
   301a0:	1e5a      	subs	r2, r3, #1
   301a2:	4193      	sbcs	r3, r2
   301a4:	b2da      	uxtb	r2, r3
   301a6:	2314      	movs	r3, #20
   301a8:	18fb      	adds	r3, r7, r3
   301aa:	2101      	movs	r1, #1
   301ac:	400a      	ands	r2, r1
   301ae:	0090      	lsls	r0, r2, #2
   301b0:	781a      	ldrb	r2, [r3, #0]
   301b2:	2104      	movs	r1, #4
   301b4:	438a      	bics	r2, r1
   301b6:	1c11      	adds	r1, r2, #0
   301b8:	1c02      	adds	r2, r0, #0
   301ba:	430a      	orrs	r2, r1
   301bc:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   301be:	2314      	movs	r3, #20
   301c0:	18fb      	adds	r3, r7, r3
   301c2:	781b      	ldrb	r3, [r3, #0]
   301c4:	2204      	movs	r2, #4
   301c6:	4013      	ands	r3, r2
   301c8:	b2db      	uxtb	r3, r3
   301ca:	2b00      	cmp	r3, #0
   301cc:	d025      	beq.n	3021a <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   301ce:	687b      	ldr	r3, [r7, #4]
   301d0:	223d      	movs	r2, #61	; 0x3d
   301d2:	5c9b      	ldrb	r3, [r3, r2]
   301d4:	1c1a      	adds	r2, r3, #0
   301d6:	2303      	movs	r3, #3
   301d8:	4013      	ands	r3, r2
   301da:	b2da      	uxtb	r2, r3
   301dc:	2314      	movs	r3, #20
   301de:	18fb      	adds	r3, r7, r3
   301e0:	2103      	movs	r1, #3
   301e2:	400a      	ands	r2, r1
   301e4:	00d0      	lsls	r0, r2, #3
   301e6:	781a      	ldrb	r2, [r3, #0]
   301e8:	2118      	movs	r1, #24
   301ea:	438a      	bics	r2, r1
   301ec:	1c11      	adds	r1, r2, #0
   301ee:	1c02      	adds	r2, r0, #0
   301f0:	430a      	orrs	r2, r1
   301f2:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   301f4:	687b      	ldr	r3, [r7, #4]
   301f6:	223c      	movs	r2, #60	; 0x3c
   301f8:	5c9b      	ldrb	r3, [r3, r2]
   301fa:	1c1a      	adds	r2, r3, #0
   301fc:	2301      	movs	r3, #1
   301fe:	4013      	ands	r3, r2
   30200:	b2da      	uxtb	r2, r3
   30202:	2314      	movs	r3, #20
   30204:	18fb      	adds	r3, r7, r3
   30206:	2101      	movs	r1, #1
   30208:	400a      	ands	r2, r1
   3020a:	0150      	lsls	r0, r2, #5
   3020c:	781a      	ldrb	r2, [r3, #0]
   3020e:	2120      	movs	r1, #32
   30210:	438a      	bics	r2, r1
   30212:	1c11      	adds	r1, r2, #0
   30214:	1c02      	adds	r2, r0, #0
   30216:	430a      	orrs	r2, r1
   30218:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   3021a:	687b      	ldr	r3, [r7, #4]
   3021c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   3021e:	2b00      	cmp	r3, #0
   30220:	d103      	bne.n	3022a <MQTTSerialize_connect+0x17e>
   30222:	687b      	ldr	r3, [r7, #4]
   30224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30226:	2b00      	cmp	r3, #0
   30228:	d006      	beq.n	30238 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   3022a:	2314      	movs	r3, #20
   3022c:	18fb      	adds	r3, r7, r3
   3022e:	781a      	ldrb	r2, [r3, #0]
   30230:	2180      	movs	r1, #128	; 0x80
   30232:	4249      	negs	r1, r1
   30234:	430a      	orrs	r2, r1
   30236:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   30238:	687b      	ldr	r3, [r7, #4]
   3023a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3023c:	2b00      	cmp	r3, #0
   3023e:	d103      	bne.n	30248 <MQTTSerialize_connect+0x19c>
   30240:	687b      	ldr	r3, [r7, #4]
   30242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30244:	2b00      	cmp	r3, #0
   30246:	d005      	beq.n	30254 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   30248:	2314      	movs	r3, #20
   3024a:	18fb      	adds	r3, r7, r3
   3024c:	781a      	ldrb	r2, [r3, #0]
   3024e:	2140      	movs	r1, #64	; 0x40
   30250:	430a      	orrs	r2, r1
   30252:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   30254:	2314      	movs	r3, #20
   30256:	18fb      	adds	r3, r7, r3
   30258:	781a      	ldrb	r2, [r3, #0]
   3025a:	231c      	movs	r3, #28
   3025c:	18fb      	adds	r3, r7, r3
   3025e:	0011      	movs	r1, r2
   30260:	0018      	movs	r0, r3
   30262:	4b2a      	ldr	r3, [pc, #168]	; (3030c <MQTTSerialize_connect+0x260>)
   30264:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   30266:	687b      	ldr	r3, [r7, #4]
   30268:	8b1b      	ldrh	r3, [r3, #24]
   3026a:	001a      	movs	r2, r3
   3026c:	231c      	movs	r3, #28
   3026e:	18fb      	adds	r3, r7, r3
   30270:	0011      	movs	r1, r2
   30272:	0018      	movs	r0, r3
   30274:	4b2a      	ldr	r3, [pc, #168]	; (30320 <MQTTSerialize_connect+0x274>)
   30276:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   30278:	687b      	ldr	r3, [r7, #4]
   3027a:	221c      	movs	r2, #28
   3027c:	18b8      	adds	r0, r7, r2
   3027e:	68d9      	ldr	r1, [r3, #12]
   30280:	691a      	ldr	r2, [r3, #16]
   30282:	695b      	ldr	r3, [r3, #20]
   30284:	4c27      	ldr	r4, [pc, #156]	; (30324 <MQTTSerialize_connect+0x278>)
   30286:	47a0      	blx	r4
	if (options->willFlag)
   30288:	687b      	ldr	r3, [r7, #4]
   3028a:	7edb      	ldrb	r3, [r3, #27]
   3028c:	2b00      	cmp	r3, #0
   3028e:	d00f      	beq.n	302b0 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   30290:	687b      	ldr	r3, [r7, #4]
   30292:	221c      	movs	r2, #28
   30294:	18b8      	adds	r0, r7, r2
   30296:	6a59      	ldr	r1, [r3, #36]	; 0x24
   30298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3029a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   3029c:	4c21      	ldr	r4, [pc, #132]	; (30324 <MQTTSerialize_connect+0x278>)
   3029e:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   302a0:	687b      	ldr	r3, [r7, #4]
   302a2:	221c      	movs	r2, #28
   302a4:	18b8      	adds	r0, r7, r2
   302a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
   302a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   302aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   302ac:	4c1d      	ldr	r4, [pc, #116]	; (30324 <MQTTSerialize_connect+0x278>)
   302ae:	47a0      	blx	r4
	}
	if (flags.bits.username)
   302b0:	2314      	movs	r3, #20
   302b2:	18fb      	adds	r3, r7, r3
   302b4:	781b      	ldrb	r3, [r3, #0]
   302b6:	227f      	movs	r2, #127	; 0x7f
   302b8:	4393      	bics	r3, r2
   302ba:	b2db      	uxtb	r3, r3
   302bc:	2b00      	cmp	r3, #0
   302be:	d007      	beq.n	302d0 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   302c0:	687b      	ldr	r3, [r7, #4]
   302c2:	221c      	movs	r2, #28
   302c4:	18b8      	adds	r0, r7, r2
   302c6:	6c19      	ldr	r1, [r3, #64]	; 0x40
   302c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   302ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   302cc:	4c15      	ldr	r4, [pc, #84]	; (30324 <MQTTSerialize_connect+0x278>)
   302ce:	47a0      	blx	r4
	if (flags.bits.password)
   302d0:	2314      	movs	r3, #20
   302d2:	18fb      	adds	r3, r7, r3
   302d4:	781b      	ldrb	r3, [r3, #0]
   302d6:	2240      	movs	r2, #64	; 0x40
   302d8:	4013      	ands	r3, r2
   302da:	b2db      	uxtb	r3, r3
   302dc:	2b00      	cmp	r3, #0
   302de:	d007      	beq.n	302f0 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   302e0:	687b      	ldr	r3, [r7, #4]
   302e2:	221c      	movs	r2, #28
   302e4:	18b8      	adds	r0, r7, r2
   302e6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   302e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   302ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   302ec:	4c0d      	ldr	r4, [pc, #52]	; (30324 <MQTTSerialize_connect+0x278>)
   302ee:	47a0      	blx	r4

	rc = ptr - buf;
   302f0:	69fb      	ldr	r3, [r7, #28]
   302f2:	001a      	movs	r2, r3
   302f4:	68fb      	ldr	r3, [r7, #12]
   302f6:	1ad3      	subs	r3, r2, r3
   302f8:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   302fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   302fc:	0018      	movs	r0, r3
   302fe:	46bd      	mov	sp, r7
   30300:	b00b      	add	sp, #44	; 0x2c
   30302:	bd90      	pop	{r4, r7, pc}
   30304:	0002ffe5 	.word	0x0002ffe5
   30308:	00030779 	.word	0x00030779
   3030c:	0003089b 	.word	0x0003089b
   30310:	00030681 	.word	0x00030681
   30314:	0003a498 	.word	0x0003a498
   30318:	0003091d 	.word	0x0003091d
   3031c:	0003a4a0 	.word	0x0003a4a0
   30320:	000308c5 	.word	0x000308c5
   30324:	0003096d 	.word	0x0003096d

00030328 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   30328:	b580      	push	{r7, lr}
   3032a:	b08a      	sub	sp, #40	; 0x28
   3032c:	af00      	add	r7, sp, #0
   3032e:	60f8      	str	r0, [r7, #12]
   30330:	60b9      	str	r1, [r7, #8]
   30332:	607a      	str	r2, [r7, #4]
   30334:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30336:	2300      	movs	r3, #0
   30338:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   3033a:	687b      	ldr	r3, [r7, #4]
   3033c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   3033e:	2300      	movs	r3, #0
   30340:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30342:	2300      	movs	r3, #0
   30344:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   30346:	2300      	movs	r3, #0
   30348:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3034a:	2318      	movs	r3, #24
   3034c:	18fb      	adds	r3, r7, r3
   3034e:	0018      	movs	r0, r3
   30350:	4b25      	ldr	r3, [pc, #148]	; (303e8 <MQTTDeserialize_connack+0xc0>)
   30352:	4798      	blx	r3
   30354:	0003      	movs	r3, r0
   30356:	001a      	movs	r2, r3
   30358:	231c      	movs	r3, #28
   3035a:	18fb      	adds	r3, r7, r3
   3035c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   3035e:	231c      	movs	r3, #28
   30360:	18fb      	adds	r3, r7, r3
   30362:	781b      	ldrb	r3, [r3, #0]
   30364:	220f      	movs	r2, #15
   30366:	4393      	bics	r3, r2
   30368:	b2db      	uxtb	r3, r3
   3036a:	2b20      	cmp	r3, #32
   3036c:	d134      	bne.n	303d8 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   3036e:	69bb      	ldr	r3, [r7, #24]
   30370:	2214      	movs	r2, #20
   30372:	18ba      	adds	r2, r7, r2
   30374:	0011      	movs	r1, r2
   30376:	0018      	movs	r0, r3
   30378:	4b1c      	ldr	r3, [pc, #112]	; (303ec <MQTTDeserialize_connack+0xc4>)
   3037a:	4798      	blx	r3
   3037c:	0003      	movs	r3, r0
   3037e:	627b      	str	r3, [r7, #36]	; 0x24
   30380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30382:	69bb      	ldr	r3, [r7, #24]
   30384:	189b      	adds	r3, r3, r2
   30386:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30388:	69bb      	ldr	r3, [r7, #24]
   3038a:	697a      	ldr	r2, [r7, #20]
   3038c:	189b      	adds	r3, r3, r2
   3038e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30390:	6a3b      	ldr	r3, [r7, #32]
   30392:	69ba      	ldr	r2, [r7, #24]
   30394:	1a9b      	subs	r3, r3, r2
   30396:	2b01      	cmp	r3, #1
   30398:	dd20      	ble.n	303dc <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   3039a:	2318      	movs	r3, #24
   3039c:	18fb      	adds	r3, r7, r3
   3039e:	0018      	movs	r0, r3
   303a0:	4b11      	ldr	r3, [pc, #68]	; (303e8 <MQTTDeserialize_connack+0xc0>)
   303a2:	4798      	blx	r3
   303a4:	0003      	movs	r3, r0
   303a6:	001a      	movs	r2, r3
   303a8:	2310      	movs	r3, #16
   303aa:	18fb      	adds	r3, r7, r3
   303ac:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   303ae:	2310      	movs	r3, #16
   303b0:	18fb      	adds	r3, r7, r3
   303b2:	781b      	ldrb	r3, [r3, #0]
   303b4:	061b      	lsls	r3, r3, #24
   303b6:	0fdb      	lsrs	r3, r3, #31
   303b8:	b2db      	uxtb	r3, r3
   303ba:	001a      	movs	r2, r3
   303bc:	68fb      	ldr	r3, [r7, #12]
   303be:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   303c0:	2318      	movs	r3, #24
   303c2:	18fb      	adds	r3, r7, r3
   303c4:	0018      	movs	r0, r3
   303c6:	4b08      	ldr	r3, [pc, #32]	; (303e8 <MQTTDeserialize_connack+0xc0>)
   303c8:	4798      	blx	r3
   303ca:	0003      	movs	r3, r0
   303cc:	001a      	movs	r2, r3
   303ce:	68bb      	ldr	r3, [r7, #8]
   303d0:	701a      	strb	r2, [r3, #0]

	rc = 1;
   303d2:	2301      	movs	r3, #1
   303d4:	627b      	str	r3, [r7, #36]	; 0x24
   303d6:	e002      	b.n	303de <MQTTDeserialize_connack+0xb6>
		goto exit;
   303d8:	46c0      	nop			; (mov r8, r8)
   303da:	e000      	b.n	303de <MQTTDeserialize_connack+0xb6>
		goto exit;
   303dc:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   303de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   303e0:	0018      	movs	r0, r3
   303e2:	46bd      	mov	sp, r7
   303e4:	b00a      	add	sp, #40	; 0x28
   303e6:	bd80      	pop	{r7, pc}
   303e8:	0003086f 	.word	0x0003086f
   303ec:	00030809 	.word	0x00030809

000303f0 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   303f0:	b580      	push	{r7, lr}
   303f2:	b088      	sub	sp, #32
   303f4:	af00      	add	r7, sp, #0
   303f6:	60f8      	str	r0, [r7, #12]
   303f8:	60b9      	str	r1, [r7, #8]
   303fa:	1dfb      	adds	r3, r7, #7
   303fc:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   303fe:	2300      	movs	r3, #0
   30400:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   30402:	2301      	movs	r3, #1
   30404:	425b      	negs	r3, r3
   30406:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   30408:	68fb      	ldr	r3, [r7, #12]
   3040a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   3040c:	68bb      	ldr	r3, [r7, #8]
   3040e:	2b01      	cmp	r3, #1
   30410:	dc03      	bgt.n	3041a <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30412:	2302      	movs	r3, #2
   30414:	425b      	negs	r3, r3
   30416:	61fb      	str	r3, [r7, #28]
		goto exit;
   30418:	e029      	b.n	3046e <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   3041a:	2318      	movs	r3, #24
   3041c:	18fb      	adds	r3, r7, r3
   3041e:	2200      	movs	r2, #0
   30420:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   30422:	1dfb      	adds	r3, r7, #7
   30424:	781b      	ldrb	r3, [r3, #0]
   30426:	220f      	movs	r2, #15
   30428:	4013      	ands	r3, r2
   3042a:	b2da      	uxtb	r2, r3
   3042c:	2318      	movs	r3, #24
   3042e:	18fb      	adds	r3, r7, r3
   30430:	0110      	lsls	r0, r2, #4
   30432:	781a      	ldrb	r2, [r3, #0]
   30434:	210f      	movs	r1, #15
   30436:	400a      	ands	r2, r1
   30438:	1c11      	adds	r1, r2, #0
   3043a:	1c02      	adds	r2, r0, #0
   3043c:	430a      	orrs	r2, r1
   3043e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30440:	2318      	movs	r3, #24
   30442:	18fb      	adds	r3, r7, r3
   30444:	781a      	ldrb	r2, [r3, #0]
   30446:	2314      	movs	r3, #20
   30448:	18fb      	adds	r3, r7, r3
   3044a:	0011      	movs	r1, r2
   3044c:	0018      	movs	r0, r3
   3044e:	4b0a      	ldr	r3, [pc, #40]	; (30478 <MQTTSerialize_zero+0x88>)
   30450:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   30452:	697b      	ldr	r3, [r7, #20]
   30454:	2100      	movs	r1, #0
   30456:	0018      	movs	r0, r3
   30458:	4b08      	ldr	r3, [pc, #32]	; (3047c <MQTTSerialize_zero+0x8c>)
   3045a:	4798      	blx	r3
   3045c:	0002      	movs	r2, r0
   3045e:	697b      	ldr	r3, [r7, #20]
   30460:	189b      	adds	r3, r3, r2
   30462:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   30464:	697b      	ldr	r3, [r7, #20]
   30466:	001a      	movs	r2, r3
   30468:	68fb      	ldr	r3, [r7, #12]
   3046a:	1ad3      	subs	r3, r2, r3
   3046c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3046e:	69fb      	ldr	r3, [r7, #28]
}
   30470:	0018      	movs	r0, r3
   30472:	46bd      	mov	sp, r7
   30474:	b008      	add	sp, #32
   30476:	bd80      	pop	{r7, pc}
   30478:	0003089b 	.word	0x0003089b
   3047c:	00030681 	.word	0x00030681

00030480 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   30480:	b580      	push	{r7, lr}
   30482:	b082      	sub	sp, #8
   30484:	af00      	add	r7, sp, #0
   30486:	6078      	str	r0, [r7, #4]
   30488:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   3048a:	6839      	ldr	r1, [r7, #0]
   3048c:	687b      	ldr	r3, [r7, #4]
   3048e:	220e      	movs	r2, #14
   30490:	0018      	movs	r0, r3
   30492:	4b03      	ldr	r3, [pc, #12]	; (304a0 <MQTTSerialize_disconnect+0x20>)
   30494:	4798      	blx	r3
   30496:	0003      	movs	r3, r0
}
   30498:	0018      	movs	r0, r3
   3049a:	46bd      	mov	sp, r7
   3049c:	b002      	add	sp, #8
   3049e:	bd80      	pop	{r7, pc}
   304a0:	000303f1 	.word	0x000303f1

000304a4 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   304a4:	b580      	push	{r7, lr}
   304a6:	b082      	sub	sp, #8
   304a8:	af00      	add	r7, sp, #0
   304aa:	6078      	str	r0, [r7, #4]
   304ac:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   304ae:	6839      	ldr	r1, [r7, #0]
   304b0:	687b      	ldr	r3, [r7, #4]
   304b2:	220c      	movs	r2, #12
   304b4:	0018      	movs	r0, r3
   304b6:	4b03      	ldr	r3, [pc, #12]	; (304c4 <MQTTSerialize_pingreq+0x20>)
   304b8:	4798      	blx	r3
   304ba:	0003      	movs	r3, r0
}
   304bc:	0018      	movs	r0, r3
   304be:	46bd      	mov	sp, r7
   304c0:	b002      	add	sp, #8
   304c2:	bd80      	pop	{r7, pc}
   304c4:	000303f1 	.word	0x000303f1

000304c8 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   304c8:	b580      	push	{r7, lr}
   304ca:	b08a      	sub	sp, #40	; 0x28
   304cc:	af00      	add	r7, sp, #0
   304ce:	60f8      	str	r0, [r7, #12]
   304d0:	60b9      	str	r1, [r7, #8]
   304d2:	607a      	str	r2, [r7, #4]
   304d4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   304d6:	2300      	movs	r3, #0
   304d8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   304da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   304dc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   304de:	2300      	movs	r3, #0
   304e0:	623b      	str	r3, [r7, #32]
	int rc = 0;
   304e2:	2300      	movs	r3, #0
   304e4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   304e6:	2300      	movs	r3, #0
   304e8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   304ea:	2318      	movs	r3, #24
   304ec:	18fb      	adds	r3, r7, r3
   304ee:	0018      	movs	r0, r3
   304f0:	4b32      	ldr	r3, [pc, #200]	; (305bc <MQTTDeserialize_publish+0xf4>)
   304f2:	4798      	blx	r3
   304f4:	0003      	movs	r3, r0
   304f6:	001a      	movs	r2, r3
   304f8:	231c      	movs	r3, #28
   304fa:	18fb      	adds	r3, r7, r3
   304fc:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   304fe:	231c      	movs	r3, #28
   30500:	18fb      	adds	r3, r7, r3
   30502:	781b      	ldrb	r3, [r3, #0]
   30504:	220f      	movs	r2, #15
   30506:	4393      	bics	r3, r2
   30508:	b2db      	uxtb	r3, r3
   3050a:	2b30      	cmp	r3, #48	; 0x30
   3050c:	d150      	bne.n	305b0 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   3050e:	231c      	movs	r3, #28
   30510:	18fb      	adds	r3, r7, r3
   30512:	781b      	ldrb	r3, [r3, #0]
   30514:	071b      	lsls	r3, r3, #28
   30516:	0fdb      	lsrs	r3, r3, #31
   30518:	b2db      	uxtb	r3, r3
   3051a:	001a      	movs	r2, r3
   3051c:	68fb      	ldr	r3, [r7, #12]
   3051e:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   30520:	231c      	movs	r3, #28
   30522:	18fb      	adds	r3, r7, r3
   30524:	781b      	ldrb	r3, [r3, #0]
   30526:	075b      	lsls	r3, r3, #29
   30528:	0f9b      	lsrs	r3, r3, #30
   3052a:	b2db      	uxtb	r3, r3
   3052c:	001a      	movs	r2, r3
   3052e:	68bb      	ldr	r3, [r7, #8]
   30530:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   30532:	231c      	movs	r3, #28
   30534:	18fb      	adds	r3, r7, r3
   30536:	781b      	ldrb	r3, [r3, #0]
   30538:	07db      	lsls	r3, r3, #31
   3053a:	0fdb      	lsrs	r3, r3, #31
   3053c:	b2db      	uxtb	r3, r3
   3053e:	001a      	movs	r2, r3
   30540:	687b      	ldr	r3, [r7, #4]
   30542:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30544:	69bb      	ldr	r3, [r7, #24]
   30546:	2214      	movs	r2, #20
   30548:	18ba      	adds	r2, r7, r2
   3054a:	0011      	movs	r1, r2
   3054c:	0018      	movs	r0, r3
   3054e:	4b1c      	ldr	r3, [pc, #112]	; (305c0 <MQTTDeserialize_publish+0xf8>)
   30550:	4798      	blx	r3
   30552:	0003      	movs	r3, r0
   30554:	627b      	str	r3, [r7, #36]	; 0x24
   30556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30558:	69bb      	ldr	r3, [r7, #24]
   3055a:	189b      	adds	r3, r3, r2
   3055c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   3055e:	69bb      	ldr	r3, [r7, #24]
   30560:	697a      	ldr	r2, [r7, #20]
   30562:	189b      	adds	r3, r3, r2
   30564:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30566:	6a3a      	ldr	r2, [r7, #32]
   30568:	2318      	movs	r3, #24
   3056a:	18f9      	adds	r1, r7, r3
   3056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3056e:	0018      	movs	r0, r3
   30570:	4b14      	ldr	r3, [pc, #80]	; (305c4 <MQTTDeserialize_publish+0xfc>)
   30572:	4798      	blx	r3
   30574:	1e03      	subs	r3, r0, #0
   30576:	d01c      	beq.n	305b2 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   30578:	6a3b      	ldr	r3, [r7, #32]
   3057a:	69ba      	ldr	r2, [r7, #24]
   3057c:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   3057e:	d418      	bmi.n	305b2 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   30580:	68bb      	ldr	r3, [r7, #8]
   30582:	681b      	ldr	r3, [r3, #0]
   30584:	2b00      	cmp	r3, #0
   30586:	dd08      	ble.n	3059a <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   30588:	2318      	movs	r3, #24
   3058a:	18fb      	adds	r3, r7, r3
   3058c:	0018      	movs	r0, r3
   3058e:	4b0e      	ldr	r3, [pc, #56]	; (305c8 <MQTTDeserialize_publish+0x100>)
   30590:	4798      	blx	r3
   30592:	0003      	movs	r3, r0
   30594:	b29a      	uxth	r2, r3
   30596:	683b      	ldr	r3, [r7, #0]
   30598:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   3059a:	6a3b      	ldr	r3, [r7, #32]
   3059c:	69ba      	ldr	r2, [r7, #24]
   3059e:	1a9a      	subs	r2, r3, r2
   305a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   305a2:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   305a4:	69ba      	ldr	r2, [r7, #24]
   305a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   305a8:	601a      	str	r2, [r3, #0]
	rc = 1;
   305aa:	2301      	movs	r3, #1
   305ac:	627b      	str	r3, [r7, #36]	; 0x24
   305ae:	e000      	b.n	305b2 <MQTTDeserialize_publish+0xea>
		goto exit;
   305b0:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   305b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   305b4:	0018      	movs	r0, r3
   305b6:	46bd      	mov	sp, r7
   305b8:	b00a      	add	sp, #40	; 0x28
   305ba:	bd80      	pop	{r7, pc}
   305bc:	0003086f 	.word	0x0003086f
   305c0:	00030809 	.word	0x00030809
   305c4:	000309ed 	.word	0x000309ed
   305c8:	0003083d 	.word	0x0003083d

000305cc <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   305cc:	b580      	push	{r7, lr}
   305ce:	b08a      	sub	sp, #40	; 0x28
   305d0:	af00      	add	r7, sp, #0
   305d2:	60f8      	str	r0, [r7, #12]
   305d4:	60b9      	str	r1, [r7, #8]
   305d6:	607a      	str	r2, [r7, #4]
   305d8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   305da:	2300      	movs	r3, #0
   305dc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   305de:	683b      	ldr	r3, [r7, #0]
   305e0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   305e2:	2300      	movs	r3, #0
   305e4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   305e6:	2300      	movs	r3, #0
   305e8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   305ea:	2318      	movs	r3, #24
   305ec:	18fb      	adds	r3, r7, r3
   305ee:	0018      	movs	r0, r3
   305f0:	4b20      	ldr	r3, [pc, #128]	; (30674 <MQTTDeserialize_ack+0xa8>)
   305f2:	4798      	blx	r3
   305f4:	0003      	movs	r3, r0
   305f6:	001a      	movs	r2, r3
   305f8:	231c      	movs	r3, #28
   305fa:	18fb      	adds	r3, r7, r3
   305fc:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   305fe:	231c      	movs	r3, #28
   30600:	18fb      	adds	r3, r7, r3
   30602:	781b      	ldrb	r3, [r3, #0]
   30604:	071b      	lsls	r3, r3, #28
   30606:	0fdb      	lsrs	r3, r3, #31
   30608:	b2db      	uxtb	r3, r3
   3060a:	001a      	movs	r2, r3
   3060c:	68bb      	ldr	r3, [r7, #8]
   3060e:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   30610:	231c      	movs	r3, #28
   30612:	18fb      	adds	r3, r7, r3
   30614:	781b      	ldrb	r3, [r3, #0]
   30616:	061b      	lsls	r3, r3, #24
   30618:	0f1b      	lsrs	r3, r3, #28
   3061a:	b2db      	uxtb	r3, r3
   3061c:	001a      	movs	r2, r3
   3061e:	68fb      	ldr	r3, [r7, #12]
   30620:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30622:	69bb      	ldr	r3, [r7, #24]
   30624:	2214      	movs	r2, #20
   30626:	18ba      	adds	r2, r7, r2
   30628:	0011      	movs	r1, r2
   3062a:	0018      	movs	r0, r3
   3062c:	4b12      	ldr	r3, [pc, #72]	; (30678 <MQTTDeserialize_ack+0xac>)
   3062e:	4798      	blx	r3
   30630:	0003      	movs	r3, r0
   30632:	627b      	str	r3, [r7, #36]	; 0x24
   30634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30636:	69bb      	ldr	r3, [r7, #24]
   30638:	189b      	adds	r3, r3, r2
   3063a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   3063c:	69bb      	ldr	r3, [r7, #24]
   3063e:	697a      	ldr	r2, [r7, #20]
   30640:	189b      	adds	r3, r3, r2
   30642:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   30644:	6a3b      	ldr	r3, [r7, #32]
   30646:	69ba      	ldr	r2, [r7, #24]
   30648:	1a9b      	subs	r3, r3, r2
   3064a:	2b01      	cmp	r3, #1
   3064c:	dd0b      	ble.n	30666 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   3064e:	2318      	movs	r3, #24
   30650:	18fb      	adds	r3, r7, r3
   30652:	0018      	movs	r0, r3
   30654:	4b09      	ldr	r3, [pc, #36]	; (3067c <MQTTDeserialize_ack+0xb0>)
   30656:	4798      	blx	r3
   30658:	0003      	movs	r3, r0
   3065a:	b29a      	uxth	r2, r3
   3065c:	687b      	ldr	r3, [r7, #4]
   3065e:	801a      	strh	r2, [r3, #0]

	rc = 1;
   30660:	2301      	movs	r3, #1
   30662:	627b      	str	r3, [r7, #36]	; 0x24
   30664:	e000      	b.n	30668 <MQTTDeserialize_ack+0x9c>
		goto exit;
   30666:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3066a:	0018      	movs	r0, r3
   3066c:	46bd      	mov	sp, r7
   3066e:	b00a      	add	sp, #40	; 0x28
   30670:	bd80      	pop	{r7, pc}
   30672:	46c0      	nop			; (mov r8, r8)
   30674:	0003086f 	.word	0x0003086f
   30678:	00030809 	.word	0x00030809
   3067c:	0003083d 	.word	0x0003083d

00030680 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   30680:	b580      	push	{r7, lr}
   30682:	b084      	sub	sp, #16
   30684:	af00      	add	r7, sp, #0
   30686:	6078      	str	r0, [r7, #4]
   30688:	6039      	str	r1, [r7, #0]
	int rc = 0;
   3068a:	2300      	movs	r3, #0
   3068c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   3068e:	683b      	ldr	r3, [r7, #0]
   30690:	4a17      	ldr	r2, [pc, #92]	; (306f0 <MQTTPacket_encode+0x70>)
   30692:	4013      	ands	r3, r2
   30694:	d504      	bpl.n	306a0 <MQTTPacket_encode+0x20>
   30696:	3b01      	subs	r3, #1
   30698:	2280      	movs	r2, #128	; 0x80
   3069a:	4252      	negs	r2, r2
   3069c:	4313      	orrs	r3, r2
   3069e:	3301      	adds	r3, #1
   306a0:	001a      	movs	r2, r3
   306a2:	230b      	movs	r3, #11
   306a4:	18fb      	adds	r3, r7, r3
   306a6:	701a      	strb	r2, [r3, #0]
		length /= 128;
   306a8:	683b      	ldr	r3, [r7, #0]
   306aa:	2b00      	cmp	r3, #0
   306ac:	da00      	bge.n	306b0 <MQTTPacket_encode+0x30>
   306ae:	337f      	adds	r3, #127	; 0x7f
   306b0:	11db      	asrs	r3, r3, #7
   306b2:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   306b4:	683b      	ldr	r3, [r7, #0]
   306b6:	2b00      	cmp	r3, #0
   306b8:	dd08      	ble.n	306cc <MQTTPacket_encode+0x4c>
			d |= 0x80;
   306ba:	230b      	movs	r3, #11
   306bc:	18fb      	adds	r3, r7, r3
   306be:	220b      	movs	r2, #11
   306c0:	18ba      	adds	r2, r7, r2
   306c2:	7812      	ldrb	r2, [r2, #0]
   306c4:	2180      	movs	r1, #128	; 0x80
   306c6:	4249      	negs	r1, r1
   306c8:	430a      	orrs	r2, r1
   306ca:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   306cc:	68fb      	ldr	r3, [r7, #12]
   306ce:	1c5a      	adds	r2, r3, #1
   306d0:	60fa      	str	r2, [r7, #12]
   306d2:	001a      	movs	r2, r3
   306d4:	687b      	ldr	r3, [r7, #4]
   306d6:	189b      	adds	r3, r3, r2
   306d8:	220b      	movs	r2, #11
   306da:	18ba      	adds	r2, r7, r2
   306dc:	7812      	ldrb	r2, [r2, #0]
   306de:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   306e0:	683b      	ldr	r3, [r7, #0]
   306e2:	2b00      	cmp	r3, #0
   306e4:	dcd3      	bgt.n	3068e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   306e6:	68fb      	ldr	r3, [r7, #12]
}
   306e8:	0018      	movs	r0, r3
   306ea:	46bd      	mov	sp, r7
   306ec:	b004      	add	sp, #16
   306ee:	bd80      	pop	{r7, pc}
   306f0:	8000007f 	.word	0x8000007f

000306f4 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   306f4:	b580      	push	{r7, lr}
   306f6:	b086      	sub	sp, #24
   306f8:	af00      	add	r7, sp, #0
   306fa:	6078      	str	r0, [r7, #4]
   306fc:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   306fe:	2301      	movs	r3, #1
   30700:	617b      	str	r3, [r7, #20]
	int len = 0;
   30702:	2300      	movs	r3, #0
   30704:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   30706:	683b      	ldr	r3, [r7, #0]
   30708:	2200      	movs	r2, #0
   3070a:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   3070c:	2301      	movs	r3, #1
   3070e:	425b      	negs	r3, r3
   30710:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   30712:	693b      	ldr	r3, [r7, #16]
   30714:	3301      	adds	r3, #1
   30716:	613b      	str	r3, [r7, #16]
   30718:	693b      	ldr	r3, [r7, #16]
   3071a:	2b04      	cmp	r3, #4
   3071c:	dd03      	ble.n	30726 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   3071e:	2301      	movs	r3, #1
   30720:	425b      	negs	r3, r3
   30722:	60fb      	str	r3, [r7, #12]
			goto exit;
   30724:	e022      	b.n	3076c <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   30726:	230b      	movs	r3, #11
   30728:	18fa      	adds	r2, r7, r3
   3072a:	687b      	ldr	r3, [r7, #4]
   3072c:	2101      	movs	r1, #1
   3072e:	0010      	movs	r0, r2
   30730:	4798      	blx	r3
   30732:	0003      	movs	r3, r0
   30734:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   30736:	68fb      	ldr	r3, [r7, #12]
   30738:	2b01      	cmp	r3, #1
   3073a:	d116      	bne.n	3076a <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   3073c:	683b      	ldr	r3, [r7, #0]
   3073e:	681a      	ldr	r2, [r3, #0]
   30740:	230b      	movs	r3, #11
   30742:	18fb      	adds	r3, r7, r3
   30744:	781b      	ldrb	r3, [r3, #0]
   30746:	0019      	movs	r1, r3
   30748:	237f      	movs	r3, #127	; 0x7f
   3074a:	400b      	ands	r3, r1
   3074c:	6979      	ldr	r1, [r7, #20]
   3074e:	434b      	muls	r3, r1
   30750:	18d2      	adds	r2, r2, r3
   30752:	683b      	ldr	r3, [r7, #0]
   30754:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   30756:	697b      	ldr	r3, [r7, #20]
   30758:	01db      	lsls	r3, r3, #7
   3075a:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   3075c:	230b      	movs	r3, #11
   3075e:	18fb      	adds	r3, r7, r3
   30760:	781b      	ldrb	r3, [r3, #0]
   30762:	b25b      	sxtb	r3, r3
   30764:	2b00      	cmp	r3, #0
   30766:	dbd1      	blt.n	3070c <MQTTPacket_decode+0x18>
   30768:	e000      	b.n	3076c <MQTTPacket_decode+0x78>
			goto exit;
   3076a:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   3076c:	693b      	ldr	r3, [r7, #16]
}
   3076e:	0018      	movs	r0, r3
   30770:	46bd      	mov	sp, r7
   30772:	b006      	add	sp, #24
   30774:	bd80      	pop	{r7, pc}
	...

00030778 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   30778:	b580      	push	{r7, lr}
   3077a:	b082      	sub	sp, #8
   3077c:	af00      	add	r7, sp, #0
   3077e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   30780:	687b      	ldr	r3, [r7, #4]
   30782:	3301      	adds	r3, #1
   30784:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   30786:	687b      	ldr	r3, [r7, #4]
   30788:	2b7f      	cmp	r3, #127	; 0x7f
   3078a:	dc03      	bgt.n	30794 <MQTTPacket_len+0x1c>
		rem_len += 1;
   3078c:	687b      	ldr	r3, [r7, #4]
   3078e:	3301      	adds	r3, #1
   30790:	607b      	str	r3, [r7, #4]
   30792:	e012      	b.n	307ba <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   30794:	687b      	ldr	r3, [r7, #4]
   30796:	4a0b      	ldr	r2, [pc, #44]	; (307c4 <MQTTPacket_len+0x4c>)
   30798:	4293      	cmp	r3, r2
   3079a:	dc03      	bgt.n	307a4 <MQTTPacket_len+0x2c>
		rem_len += 2;
   3079c:	687b      	ldr	r3, [r7, #4]
   3079e:	3302      	adds	r3, #2
   307a0:	607b      	str	r3, [r7, #4]
   307a2:	e00a      	b.n	307ba <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   307a4:	687b      	ldr	r3, [r7, #4]
   307a6:	4a08      	ldr	r2, [pc, #32]	; (307c8 <MQTTPacket_len+0x50>)
   307a8:	4293      	cmp	r3, r2
   307aa:	dc03      	bgt.n	307b4 <MQTTPacket_len+0x3c>
		rem_len += 3;
   307ac:	687b      	ldr	r3, [r7, #4]
   307ae:	3303      	adds	r3, #3
   307b0:	607b      	str	r3, [r7, #4]
   307b2:	e002      	b.n	307ba <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   307b4:	687b      	ldr	r3, [r7, #4]
   307b6:	3304      	adds	r3, #4
   307b8:	607b      	str	r3, [r7, #4]
	return rem_len;
   307ba:	687b      	ldr	r3, [r7, #4]
}
   307bc:	0018      	movs	r0, r3
   307be:	46bd      	mov	sp, r7
   307c0:	b002      	add	sp, #8
   307c2:	bd80      	pop	{r7, pc}
   307c4:	00003fff 	.word	0x00003fff
   307c8:	001ffffe 	.word	0x001ffffe

000307cc <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   307cc:	b580      	push	{r7, lr}
   307ce:	b084      	sub	sp, #16
   307d0:	af00      	add	r7, sp, #0
   307d2:	6078      	str	r0, [r7, #4]
   307d4:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   307d6:	2300      	movs	r3, #0
   307d8:	60fb      	str	r3, [r7, #12]
   307da:	e00a      	b.n	307f2 <bufchar+0x26>
		*c = *bufptr++;
   307dc:	4b09      	ldr	r3, [pc, #36]	; (30804 <bufchar+0x38>)
   307de:	681b      	ldr	r3, [r3, #0]
   307e0:	1c59      	adds	r1, r3, #1
   307e2:	4a08      	ldr	r2, [pc, #32]	; (30804 <bufchar+0x38>)
   307e4:	6011      	str	r1, [r2, #0]
   307e6:	781a      	ldrb	r2, [r3, #0]
   307e8:	687b      	ldr	r3, [r7, #4]
   307ea:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   307ec:	68fb      	ldr	r3, [r7, #12]
   307ee:	3301      	adds	r3, #1
   307f0:	60fb      	str	r3, [r7, #12]
   307f2:	68fa      	ldr	r2, [r7, #12]
   307f4:	683b      	ldr	r3, [r7, #0]
   307f6:	429a      	cmp	r2, r3
   307f8:	dbf0      	blt.n	307dc <bufchar+0x10>
	return count;
   307fa:	683b      	ldr	r3, [r7, #0]
}
   307fc:	0018      	movs	r0, r3
   307fe:	46bd      	mov	sp, r7
   30800:	b004      	add	sp, #16
   30802:	bd80      	pop	{r7, pc}
   30804:	200046f0 	.word	0x200046f0

00030808 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   30808:	b580      	push	{r7, lr}
   3080a:	b082      	sub	sp, #8
   3080c:	af00      	add	r7, sp, #0
   3080e:	6078      	str	r0, [r7, #4]
   30810:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   30812:	4b07      	ldr	r3, [pc, #28]	; (30830 <MQTTPacket_decodeBuf+0x28>)
   30814:	687a      	ldr	r2, [r7, #4]
   30816:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   30818:	683a      	ldr	r2, [r7, #0]
   3081a:	4b06      	ldr	r3, [pc, #24]	; (30834 <MQTTPacket_decodeBuf+0x2c>)
   3081c:	0011      	movs	r1, r2
   3081e:	0018      	movs	r0, r3
   30820:	4b05      	ldr	r3, [pc, #20]	; (30838 <MQTTPacket_decodeBuf+0x30>)
   30822:	4798      	blx	r3
   30824:	0003      	movs	r3, r0
}
   30826:	0018      	movs	r0, r3
   30828:	46bd      	mov	sp, r7
   3082a:	b002      	add	sp, #8
   3082c:	bd80      	pop	{r7, pc}
   3082e:	46c0      	nop			; (mov r8, r8)
   30830:	200046f0 	.word	0x200046f0
   30834:	000307cd 	.word	0x000307cd
   30838:	000306f5 	.word	0x000306f5

0003083c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   3083c:	b580      	push	{r7, lr}
   3083e:	b084      	sub	sp, #16
   30840:	af00      	add	r7, sp, #0
   30842:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   30844:	687b      	ldr	r3, [r7, #4]
   30846:	681b      	ldr	r3, [r3, #0]
   30848:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   3084a:	68fb      	ldr	r3, [r7, #12]
   3084c:	781b      	ldrb	r3, [r3, #0]
   3084e:	021b      	lsls	r3, r3, #8
   30850:	68fa      	ldr	r2, [r7, #12]
   30852:	3201      	adds	r2, #1
   30854:	7812      	ldrb	r2, [r2, #0]
   30856:	189b      	adds	r3, r3, r2
   30858:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   3085a:	687b      	ldr	r3, [r7, #4]
   3085c:	681b      	ldr	r3, [r3, #0]
   3085e:	1c9a      	adds	r2, r3, #2
   30860:	687b      	ldr	r3, [r7, #4]
   30862:	601a      	str	r2, [r3, #0]
	return len;
   30864:	68bb      	ldr	r3, [r7, #8]
}
   30866:	0018      	movs	r0, r3
   30868:	46bd      	mov	sp, r7
   3086a:	b004      	add	sp, #16
   3086c:	bd80      	pop	{r7, pc}

0003086e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   3086e:	b580      	push	{r7, lr}
   30870:	b084      	sub	sp, #16
   30872:	af00      	add	r7, sp, #0
   30874:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   30876:	687b      	ldr	r3, [r7, #4]
   30878:	681a      	ldr	r2, [r3, #0]
   3087a:	230f      	movs	r3, #15
   3087c:	18fb      	adds	r3, r7, r3
   3087e:	7812      	ldrb	r2, [r2, #0]
   30880:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   30882:	687b      	ldr	r3, [r7, #4]
   30884:	681b      	ldr	r3, [r3, #0]
   30886:	1c5a      	adds	r2, r3, #1
   30888:	687b      	ldr	r3, [r7, #4]
   3088a:	601a      	str	r2, [r3, #0]
	return c;
   3088c:	230f      	movs	r3, #15
   3088e:	18fb      	adds	r3, r7, r3
   30890:	781b      	ldrb	r3, [r3, #0]
}
   30892:	0018      	movs	r0, r3
   30894:	46bd      	mov	sp, r7
   30896:	b004      	add	sp, #16
   30898:	bd80      	pop	{r7, pc}

0003089a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   3089a:	b580      	push	{r7, lr}
   3089c:	b082      	sub	sp, #8
   3089e:	af00      	add	r7, sp, #0
   308a0:	6078      	str	r0, [r7, #4]
   308a2:	000a      	movs	r2, r1
   308a4:	1cfb      	adds	r3, r7, #3
   308a6:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   308a8:	687b      	ldr	r3, [r7, #4]
   308aa:	681b      	ldr	r3, [r3, #0]
   308ac:	1cfa      	adds	r2, r7, #3
   308ae:	7812      	ldrb	r2, [r2, #0]
   308b0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   308b2:	687b      	ldr	r3, [r7, #4]
   308b4:	681b      	ldr	r3, [r3, #0]
   308b6:	1c5a      	adds	r2, r3, #1
   308b8:	687b      	ldr	r3, [r7, #4]
   308ba:	601a      	str	r2, [r3, #0]
}
   308bc:	46c0      	nop			; (mov r8, r8)
   308be:	46bd      	mov	sp, r7
   308c0:	b002      	add	sp, #8
   308c2:	bd80      	pop	{r7, pc}

000308c4 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   308c4:	b580      	push	{r7, lr}
   308c6:	b082      	sub	sp, #8
   308c8:	af00      	add	r7, sp, #0
   308ca:	6078      	str	r0, [r7, #4]
   308cc:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   308ce:	687b      	ldr	r3, [r7, #4]
   308d0:	681a      	ldr	r2, [r3, #0]
   308d2:	683b      	ldr	r3, [r7, #0]
   308d4:	2b00      	cmp	r3, #0
   308d6:	da00      	bge.n	308da <writeInt+0x16>
   308d8:	33ff      	adds	r3, #255	; 0xff
   308da:	121b      	asrs	r3, r3, #8
   308dc:	b2db      	uxtb	r3, r3
   308de:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   308e0:	687b      	ldr	r3, [r7, #4]
   308e2:	681b      	ldr	r3, [r3, #0]
   308e4:	1c5a      	adds	r2, r3, #1
   308e6:	687b      	ldr	r3, [r7, #4]
   308e8:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   308ea:	687b      	ldr	r3, [r7, #4]
   308ec:	681a      	ldr	r2, [r3, #0]
   308ee:	683b      	ldr	r3, [r7, #0]
   308f0:	4908      	ldr	r1, [pc, #32]	; (30914 <writeInt+0x50>)
   308f2:	400b      	ands	r3, r1
   308f4:	d503      	bpl.n	308fe <writeInt+0x3a>
   308f6:	3b01      	subs	r3, #1
   308f8:	4907      	ldr	r1, [pc, #28]	; (30918 <writeInt+0x54>)
   308fa:	430b      	orrs	r3, r1
   308fc:	3301      	adds	r3, #1
   308fe:	b2db      	uxtb	r3, r3
   30900:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   30902:	687b      	ldr	r3, [r7, #4]
   30904:	681b      	ldr	r3, [r3, #0]
   30906:	1c5a      	adds	r2, r3, #1
   30908:	687b      	ldr	r3, [r7, #4]
   3090a:	601a      	str	r2, [r3, #0]
}
   3090c:	46c0      	nop			; (mov r8, r8)
   3090e:	46bd      	mov	sp, r7
   30910:	b002      	add	sp, #8
   30912:	bd80      	pop	{r7, pc}
   30914:	800000ff 	.word	0x800000ff
   30918:	ffffff00 	.word	0xffffff00

0003091c <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   3091c:	b580      	push	{r7, lr}
   3091e:	b084      	sub	sp, #16
   30920:	af00      	add	r7, sp, #0
   30922:	6078      	str	r0, [r7, #4]
   30924:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   30926:	683b      	ldr	r3, [r7, #0]
   30928:	0018      	movs	r0, r3
   3092a:	4b0d      	ldr	r3, [pc, #52]	; (30960 <writeCString+0x44>)
   3092c:	4798      	blx	r3
   3092e:	0003      	movs	r3, r0
   30930:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   30932:	68fa      	ldr	r2, [r7, #12]
   30934:	687b      	ldr	r3, [r7, #4]
   30936:	0011      	movs	r1, r2
   30938:	0018      	movs	r0, r3
   3093a:	4b0a      	ldr	r3, [pc, #40]	; (30964 <writeCString+0x48>)
   3093c:	4798      	blx	r3
	memcpy(*pptr, string, len);
   3093e:	687b      	ldr	r3, [r7, #4]
   30940:	681b      	ldr	r3, [r3, #0]
   30942:	68fa      	ldr	r2, [r7, #12]
   30944:	6839      	ldr	r1, [r7, #0]
   30946:	0018      	movs	r0, r3
   30948:	4b07      	ldr	r3, [pc, #28]	; (30968 <writeCString+0x4c>)
   3094a:	4798      	blx	r3
	*pptr += len;
   3094c:	687b      	ldr	r3, [r7, #4]
   3094e:	681a      	ldr	r2, [r3, #0]
   30950:	68fb      	ldr	r3, [r7, #12]
   30952:	18d2      	adds	r2, r2, r3
   30954:	687b      	ldr	r3, [r7, #4]
   30956:	601a      	str	r2, [r3, #0]
}
   30958:	46c0      	nop			; (mov r8, r8)
   3095a:	46bd      	mov	sp, r7
   3095c:	b004      	add	sp, #16
   3095e:	bd80      	pop	{r7, pc}
   30960:	0003531b 	.word	0x0003531b
   30964:	000308c5 	.word	0x000308c5
   30968:	00034f2d 	.word	0x00034f2d

0003096c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   3096c:	b580      	push	{r7, lr}
   3096e:	b084      	sub	sp, #16
   30970:	af00      	add	r7, sp, #0
   30972:	60f8      	str	r0, [r7, #12]
   30974:	0038      	movs	r0, r7
   30976:	6001      	str	r1, [r0, #0]
   30978:	6042      	str	r2, [r0, #4]
   3097a:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   3097c:	003b      	movs	r3, r7
   3097e:	685b      	ldr	r3, [r3, #4]
   30980:	2b00      	cmp	r3, #0
   30982:	dd17      	ble.n	309b4 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   30984:	003b      	movs	r3, r7
   30986:	685a      	ldr	r2, [r3, #4]
   30988:	68fb      	ldr	r3, [r7, #12]
   3098a:	0011      	movs	r1, r2
   3098c:	0018      	movs	r0, r3
   3098e:	4b14      	ldr	r3, [pc, #80]	; (309e0 <writeMQTTString+0x74>)
   30990:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   30992:	68fb      	ldr	r3, [r7, #12]
   30994:	6818      	ldr	r0, [r3, #0]
   30996:	003b      	movs	r3, r7
   30998:	6899      	ldr	r1, [r3, #8]
   3099a:	003b      	movs	r3, r7
   3099c:	685b      	ldr	r3, [r3, #4]
   3099e:	001a      	movs	r2, r3
   309a0:	4b10      	ldr	r3, [pc, #64]	; (309e4 <writeMQTTString+0x78>)
   309a2:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   309a4:	68fb      	ldr	r3, [r7, #12]
   309a6:	681a      	ldr	r2, [r3, #0]
   309a8:	003b      	movs	r3, r7
   309aa:	685b      	ldr	r3, [r3, #4]
   309ac:	18d2      	adds	r2, r2, r3
   309ae:	68fb      	ldr	r3, [r7, #12]
   309b0:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   309b2:	e010      	b.n	309d6 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   309b4:	003b      	movs	r3, r7
   309b6:	681b      	ldr	r3, [r3, #0]
   309b8:	2b00      	cmp	r3, #0
   309ba:	d007      	beq.n	309cc <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   309bc:	003b      	movs	r3, r7
   309be:	681a      	ldr	r2, [r3, #0]
   309c0:	68fb      	ldr	r3, [r7, #12]
   309c2:	0011      	movs	r1, r2
   309c4:	0018      	movs	r0, r3
   309c6:	4b08      	ldr	r3, [pc, #32]	; (309e8 <writeMQTTString+0x7c>)
   309c8:	4798      	blx	r3
}
   309ca:	e004      	b.n	309d6 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   309cc:	68fb      	ldr	r3, [r7, #12]
   309ce:	2100      	movs	r1, #0
   309d0:	0018      	movs	r0, r3
   309d2:	4b03      	ldr	r3, [pc, #12]	; (309e0 <writeMQTTString+0x74>)
   309d4:	4798      	blx	r3
}
   309d6:	46c0      	nop			; (mov r8, r8)
   309d8:	46bd      	mov	sp, r7
   309da:	b004      	add	sp, #16
   309dc:	bd80      	pop	{r7, pc}
   309de:	46c0      	nop			; (mov r8, r8)
   309e0:	000308c5 	.word	0x000308c5
   309e4:	00034f2d 	.word	0x00034f2d
   309e8:	0003091d 	.word	0x0003091d

000309ec <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   309ec:	b580      	push	{r7, lr}
   309ee:	b086      	sub	sp, #24
   309f0:	af00      	add	r7, sp, #0
   309f2:	60f8      	str	r0, [r7, #12]
   309f4:	60b9      	str	r1, [r7, #8]
   309f6:	607a      	str	r2, [r7, #4]
	int rc = 0;
   309f8:	2300      	movs	r3, #0
   309fa:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   309fc:	687a      	ldr	r2, [r7, #4]
   309fe:	68bb      	ldr	r3, [r7, #8]
   30a00:	681b      	ldr	r3, [r3, #0]
   30a02:	1ad3      	subs	r3, r2, r3
   30a04:	2b01      	cmp	r3, #1
   30a06:	dd1b      	ble.n	30a40 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   30a08:	68bb      	ldr	r3, [r7, #8]
   30a0a:	0018      	movs	r0, r3
   30a0c:	4b10      	ldr	r3, [pc, #64]	; (30a50 <readMQTTLenString+0x64>)
   30a0e:	4798      	blx	r3
   30a10:	0002      	movs	r2, r0
   30a12:	68fb      	ldr	r3, [r7, #12]
   30a14:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   30a16:	68bb      	ldr	r3, [r7, #8]
   30a18:	681a      	ldr	r2, [r3, #0]
   30a1a:	68fb      	ldr	r3, [r7, #12]
   30a1c:	685b      	ldr	r3, [r3, #4]
   30a1e:	18d2      	adds	r2, r2, r3
   30a20:	687b      	ldr	r3, [r7, #4]
   30a22:	429a      	cmp	r2, r3
   30a24:	d80c      	bhi.n	30a40 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   30a26:	68bb      	ldr	r3, [r7, #8]
   30a28:	681a      	ldr	r2, [r3, #0]
   30a2a:	68fb      	ldr	r3, [r7, #12]
   30a2c:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   30a2e:	68bb      	ldr	r3, [r7, #8]
   30a30:	681a      	ldr	r2, [r3, #0]
   30a32:	68fb      	ldr	r3, [r7, #12]
   30a34:	685b      	ldr	r3, [r3, #4]
   30a36:	18d2      	adds	r2, r2, r3
   30a38:	68bb      	ldr	r3, [r7, #8]
   30a3a:	601a      	str	r2, [r3, #0]
			rc = 1;
   30a3c:	2301      	movs	r3, #1
   30a3e:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   30a40:	68fb      	ldr	r3, [r7, #12]
   30a42:	2200      	movs	r2, #0
   30a44:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   30a46:	697b      	ldr	r3, [r7, #20]
}
   30a48:	0018      	movs	r0, r3
   30a4a:	46bd      	mov	sp, r7
   30a4c:	b006      	add	sp, #24
   30a4e:	bd80      	pop	{r7, pc}
   30a50:	0003083d 	.word	0x0003083d

00030a54 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   30a54:	b580      	push	{r7, lr}
   30a56:	b086      	sub	sp, #24
   30a58:	af00      	add	r7, sp, #0
   30a5a:	1d3b      	adds	r3, r7, #4
   30a5c:	6018      	str	r0, [r3, #0]
   30a5e:	6059      	str	r1, [r3, #4]
   30a60:	609a      	str	r2, [r3, #8]
	int rc = 0;
   30a62:	2300      	movs	r3, #0
   30a64:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   30a66:	1d3b      	adds	r3, r7, #4
   30a68:	681b      	ldr	r3, [r3, #0]
   30a6a:	2b00      	cmp	r3, #0
   30a6c:	d007      	beq.n	30a7e <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   30a6e:	1d3b      	adds	r3, r7, #4
   30a70:	681b      	ldr	r3, [r3, #0]
   30a72:	0018      	movs	r0, r3
   30a74:	4b06      	ldr	r3, [pc, #24]	; (30a90 <MQTTstrlen+0x3c>)
   30a76:	4798      	blx	r3
   30a78:	0003      	movs	r3, r0
   30a7a:	617b      	str	r3, [r7, #20]
   30a7c:	e002      	b.n	30a84 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   30a7e:	1d3b      	adds	r3, r7, #4
   30a80:	685b      	ldr	r3, [r3, #4]
   30a82:	617b      	str	r3, [r7, #20]
	return rc;
   30a84:	697b      	ldr	r3, [r7, #20]
}
   30a86:	0018      	movs	r0, r3
   30a88:	46bd      	mov	sp, r7
   30a8a:	b006      	add	sp, #24
   30a8c:	bd80      	pop	{r7, pc}
   30a8e:	46c0      	nop			; (mov r8, r8)
   30a90:	0003531b 	.word	0x0003531b

00030a94 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   30a94:	b580      	push	{r7, lr}
   30a96:	b086      	sub	sp, #24
   30a98:	af00      	add	r7, sp, #0
   30a9a:	6078      	str	r0, [r7, #4]
   30a9c:	6039      	str	r1, [r7, #0]
	int alen = 0,
   30a9e:	2300      	movs	r3, #0
   30aa0:	617b      	str	r3, [r7, #20]
		blen = 0;
   30aa2:	2300      	movs	r3, #0
   30aa4:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   30aa6:	687b      	ldr	r3, [r7, #4]
   30aa8:	681b      	ldr	r3, [r3, #0]
   30aaa:	2b00      	cmp	r3, #0
   30aac:	d00a      	beq.n	30ac4 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   30aae:	687b      	ldr	r3, [r7, #4]
   30ab0:	681b      	ldr	r3, [r3, #0]
   30ab2:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   30ab4:	687b      	ldr	r3, [r7, #4]
   30ab6:	681b      	ldr	r3, [r3, #0]
   30ab8:	0018      	movs	r0, r3
   30aba:	4b12      	ldr	r3, [pc, #72]	; (30b04 <MQTTPacket_equals+0x70>)
   30abc:	4798      	blx	r3
   30abe:	0003      	movs	r3, r0
   30ac0:	617b      	str	r3, [r7, #20]
   30ac2:	e005      	b.n	30ad0 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   30ac4:	687b      	ldr	r3, [r7, #4]
   30ac6:	689b      	ldr	r3, [r3, #8]
   30ac8:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   30aca:	687b      	ldr	r3, [r7, #4]
   30acc:	685b      	ldr	r3, [r3, #4]
   30ace:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   30ad0:	683b      	ldr	r3, [r7, #0]
   30ad2:	0018      	movs	r0, r3
   30ad4:	4b0b      	ldr	r3, [pc, #44]	; (30b04 <MQTTPacket_equals+0x70>)
   30ad6:	4798      	blx	r3
   30ad8:	0003      	movs	r3, r0
   30ada:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   30adc:	697a      	ldr	r2, [r7, #20]
   30ade:	68fb      	ldr	r3, [r7, #12]
   30ae0:	429a      	cmp	r2, r3
   30ae2:	d109      	bne.n	30af8 <MQTTPacket_equals+0x64>
   30ae4:	697a      	ldr	r2, [r7, #20]
   30ae6:	6839      	ldr	r1, [r7, #0]
   30ae8:	693b      	ldr	r3, [r7, #16]
   30aea:	0018      	movs	r0, r3
   30aec:	4b06      	ldr	r3, [pc, #24]	; (30b08 <MQTTPacket_equals+0x74>)
   30aee:	4798      	blx	r3
   30af0:	1e03      	subs	r3, r0, #0
   30af2:	d101      	bne.n	30af8 <MQTTPacket_equals+0x64>
   30af4:	2301      	movs	r3, #1
   30af6:	e000      	b.n	30afa <MQTTPacket_equals+0x66>
   30af8:	2300      	movs	r3, #0
}
   30afa:	0018      	movs	r0, r3
   30afc:	46bd      	mov	sp, r7
   30afe:	b006      	add	sp, #24
   30b00:	bd80      	pop	{r7, pc}
   30b02:	46c0      	nop			; (mov r8, r8)
   30b04:	0003531b 	.word	0x0003531b
   30b08:	00035329 	.word	0x00035329

00030b0c <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   30b0c:	b580      	push	{r7, lr}
   30b0e:	b086      	sub	sp, #24
   30b10:	af00      	add	r7, sp, #0
   30b12:	60f8      	str	r0, [r7, #12]
   30b14:	0038      	movs	r0, r7
   30b16:	6001      	str	r1, [r0, #0]
   30b18:	6042      	str	r2, [r0, #4]
   30b1a:	6083      	str	r3, [r0, #8]
	int len = 0;
   30b1c:	2300      	movs	r3, #0
   30b1e:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   30b20:	003b      	movs	r3, r7
   30b22:	6818      	ldr	r0, [r3, #0]
   30b24:	6859      	ldr	r1, [r3, #4]
   30b26:	689a      	ldr	r2, [r3, #8]
   30b28:	4b09      	ldr	r3, [pc, #36]	; (30b50 <MQTTSerialize_publishLength+0x44>)
   30b2a:	4798      	blx	r3
   30b2c:	0003      	movs	r3, r0
   30b2e:	1c9a      	adds	r2, r3, #2
   30b30:	6a3b      	ldr	r3, [r7, #32]
   30b32:	18d3      	adds	r3, r2, r3
   30b34:	697a      	ldr	r2, [r7, #20]
   30b36:	18d3      	adds	r3, r2, r3
   30b38:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   30b3a:	68fb      	ldr	r3, [r7, #12]
   30b3c:	2b00      	cmp	r3, #0
   30b3e:	dd02      	ble.n	30b46 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   30b40:	697b      	ldr	r3, [r7, #20]
   30b42:	3302      	adds	r3, #2
   30b44:	617b      	str	r3, [r7, #20]
	return len;
   30b46:	697b      	ldr	r3, [r7, #20]
}
   30b48:	0018      	movs	r0, r3
   30b4a:	46bd      	mov	sp, r7
   30b4c:	b006      	add	sp, #24
   30b4e:	bd80      	pop	{r7, pc}
   30b50:	00030a55 	.word	0x00030a55

00030b54 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   30b54:	b590      	push	{r4, r7, lr}
   30b56:	b08b      	sub	sp, #44	; 0x2c
   30b58:	af02      	add	r7, sp, #8
   30b5a:	60f8      	str	r0, [r7, #12]
   30b5c:	60b9      	str	r1, [r7, #8]
   30b5e:	603b      	str	r3, [r7, #0]
   30b60:	1dfb      	adds	r3, r7, #7
   30b62:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   30b64:	68fb      	ldr	r3, [r7, #12]
   30b66:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   30b68:	2300      	movs	r3, #0
   30b6a:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   30b6c:	2300      	movs	r3, #0
   30b6e:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   30b70:	2300      	movs	r3, #0
   30b72:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   30b74:	2308      	movs	r3, #8
   30b76:	2230      	movs	r2, #48	; 0x30
   30b78:	4694      	mov	ip, r2
   30b7a:	44bc      	add	ip, r7
   30b7c:	4463      	add	r3, ip
   30b7e:	6838      	ldr	r0, [r7, #0]
   30b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
   30b82:	9200      	str	r2, [sp, #0]
   30b84:	6819      	ldr	r1, [r3, #0]
   30b86:	685a      	ldr	r2, [r3, #4]
   30b88:	689b      	ldr	r3, [r3, #8]
   30b8a:	4c46      	ldr	r4, [pc, #280]	; (30ca4 <MQTTSerialize_publish+0x150>)
   30b8c:	47a0      	blx	r4
   30b8e:	0003      	movs	r3, r0
   30b90:	61bb      	str	r3, [r7, #24]
   30b92:	69bb      	ldr	r3, [r7, #24]
   30b94:	0018      	movs	r0, r3
   30b96:	4b44      	ldr	r3, [pc, #272]	; (30ca8 <MQTTSerialize_publish+0x154>)
   30b98:	4798      	blx	r3
   30b9a:	0002      	movs	r2, r0
   30b9c:	68bb      	ldr	r3, [r7, #8]
   30b9e:	429a      	cmp	r2, r3
   30ba0:	dd03      	ble.n	30baa <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30ba2:	2302      	movs	r3, #2
   30ba4:	425b      	negs	r3, r3
   30ba6:	61fb      	str	r3, [r7, #28]
		goto exit;
   30ba8:	e077      	b.n	30c9a <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   30baa:	2310      	movs	r3, #16
   30bac:	18fb      	adds	r3, r7, r3
   30bae:	781a      	ldrb	r2, [r3, #0]
   30bb0:	210f      	movs	r1, #15
   30bb2:	400a      	ands	r2, r1
   30bb4:	1c11      	adds	r1, r2, #0
   30bb6:	2230      	movs	r2, #48	; 0x30
   30bb8:	430a      	orrs	r2, r1
   30bba:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30bbc:	1dfb      	adds	r3, r7, #7
   30bbe:	781b      	ldrb	r3, [r3, #0]
   30bc0:	2201      	movs	r2, #1
   30bc2:	4013      	ands	r3, r2
   30bc4:	b2da      	uxtb	r2, r3
   30bc6:	2310      	movs	r3, #16
   30bc8:	18fb      	adds	r3, r7, r3
   30bca:	2101      	movs	r1, #1
   30bcc:	400a      	ands	r2, r1
   30bce:	00d0      	lsls	r0, r2, #3
   30bd0:	781a      	ldrb	r2, [r3, #0]
   30bd2:	2108      	movs	r1, #8
   30bd4:	438a      	bics	r2, r1
   30bd6:	1c11      	adds	r1, r2, #0
   30bd8:	1c02      	adds	r2, r0, #0
   30bda:	430a      	orrs	r2, r1
   30bdc:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   30bde:	683b      	ldr	r3, [r7, #0]
   30be0:	b2db      	uxtb	r3, r3
   30be2:	1c1a      	adds	r2, r3, #0
   30be4:	2303      	movs	r3, #3
   30be6:	4013      	ands	r3, r2
   30be8:	b2da      	uxtb	r2, r3
   30bea:	2310      	movs	r3, #16
   30bec:	18fb      	adds	r3, r7, r3
   30bee:	2103      	movs	r1, #3
   30bf0:	400a      	ands	r2, r1
   30bf2:	1890      	adds	r0, r2, r2
   30bf4:	781a      	ldrb	r2, [r3, #0]
   30bf6:	2106      	movs	r1, #6
   30bf8:	438a      	bics	r2, r1
   30bfa:	1c11      	adds	r1, r2, #0
   30bfc:	1c02      	adds	r2, r0, #0
   30bfe:	430a      	orrs	r2, r1
   30c00:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   30c02:	2330      	movs	r3, #48	; 0x30
   30c04:	18fb      	adds	r3, r7, r3
   30c06:	781b      	ldrb	r3, [r3, #0]
   30c08:	2201      	movs	r2, #1
   30c0a:	4013      	ands	r3, r2
   30c0c:	b2da      	uxtb	r2, r3
   30c0e:	2310      	movs	r3, #16
   30c10:	18fb      	adds	r3, r7, r3
   30c12:	2101      	movs	r1, #1
   30c14:	400a      	ands	r2, r1
   30c16:	0010      	movs	r0, r2
   30c18:	781a      	ldrb	r2, [r3, #0]
   30c1a:	2101      	movs	r1, #1
   30c1c:	438a      	bics	r2, r1
   30c1e:	1c11      	adds	r1, r2, #0
   30c20:	1c02      	adds	r2, r0, #0
   30c22:	430a      	orrs	r2, r1
   30c24:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30c26:	2310      	movs	r3, #16
   30c28:	18fb      	adds	r3, r7, r3
   30c2a:	781a      	ldrb	r2, [r3, #0]
   30c2c:	2314      	movs	r3, #20
   30c2e:	18fb      	adds	r3, r7, r3
   30c30:	0011      	movs	r1, r2
   30c32:	0018      	movs	r0, r3
   30c34:	4b1d      	ldr	r3, [pc, #116]	; (30cac <MQTTSerialize_publish+0x158>)
   30c36:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30c38:	697b      	ldr	r3, [r7, #20]
   30c3a:	69ba      	ldr	r2, [r7, #24]
   30c3c:	0011      	movs	r1, r2
   30c3e:	0018      	movs	r0, r3
   30c40:	4b1b      	ldr	r3, [pc, #108]	; (30cb0 <MQTTSerialize_publish+0x15c>)
   30c42:	4798      	blx	r3
   30c44:	0002      	movs	r2, r0
   30c46:	697b      	ldr	r3, [r7, #20]
   30c48:	189b      	adds	r3, r3, r2
   30c4a:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   30c4c:	2308      	movs	r3, #8
   30c4e:	2230      	movs	r2, #48	; 0x30
   30c50:	4694      	mov	ip, r2
   30c52:	44bc      	add	ip, r7
   30c54:	4463      	add	r3, ip
   30c56:	2214      	movs	r2, #20
   30c58:	18b8      	adds	r0, r7, r2
   30c5a:	6819      	ldr	r1, [r3, #0]
   30c5c:	685a      	ldr	r2, [r3, #4]
   30c5e:	689b      	ldr	r3, [r3, #8]
   30c60:	4c14      	ldr	r4, [pc, #80]	; (30cb4 <MQTTSerialize_publish+0x160>)
   30c62:	47a0      	blx	r4

	if (qos > 0)
   30c64:	683b      	ldr	r3, [r7, #0]
   30c66:	2b00      	cmp	r3, #0
   30c68:	dd08      	ble.n	30c7c <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   30c6a:	2334      	movs	r3, #52	; 0x34
   30c6c:	18fb      	adds	r3, r7, r3
   30c6e:	881a      	ldrh	r2, [r3, #0]
   30c70:	2314      	movs	r3, #20
   30c72:	18fb      	adds	r3, r7, r3
   30c74:	0011      	movs	r1, r2
   30c76:	0018      	movs	r0, r3
   30c78:	4b0f      	ldr	r3, [pc, #60]	; (30cb8 <MQTTSerialize_publish+0x164>)
   30c7a:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   30c7c:	697b      	ldr	r3, [r7, #20]
   30c7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   30c80:	6c79      	ldr	r1, [r7, #68]	; 0x44
   30c82:	0018      	movs	r0, r3
   30c84:	4b0d      	ldr	r3, [pc, #52]	; (30cbc <MQTTSerialize_publish+0x168>)
   30c86:	4798      	blx	r3
	ptr += payloadlen;
   30c88:	697a      	ldr	r2, [r7, #20]
   30c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30c8c:	18d3      	adds	r3, r2, r3
   30c8e:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   30c90:	697b      	ldr	r3, [r7, #20]
   30c92:	001a      	movs	r2, r3
   30c94:	68fb      	ldr	r3, [r7, #12]
   30c96:	1ad3      	subs	r3, r2, r3
   30c98:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30c9a:	69fb      	ldr	r3, [r7, #28]
}
   30c9c:	0018      	movs	r0, r3
   30c9e:	46bd      	mov	sp, r7
   30ca0:	b009      	add	sp, #36	; 0x24
   30ca2:	bd90      	pop	{r4, r7, pc}
   30ca4:	00030b0d 	.word	0x00030b0d
   30ca8:	00030779 	.word	0x00030779
   30cac:	0003089b 	.word	0x0003089b
   30cb0:	00030681 	.word	0x00030681
   30cb4:	0003096d 	.word	0x0003096d
   30cb8:	000308c5 	.word	0x000308c5
   30cbc:	00034f2d 	.word	0x00034f2d

00030cc0 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   30cc0:	b580      	push	{r7, lr}
   30cc2:	b088      	sub	sp, #32
   30cc4:	af00      	add	r7, sp, #0
   30cc6:	60f8      	str	r0, [r7, #12]
   30cc8:	60b9      	str	r1, [r7, #8]
   30cca:	0019      	movs	r1, r3
   30ccc:	1dfb      	adds	r3, r7, #7
   30cce:	701a      	strb	r2, [r3, #0]
   30cd0:	1dbb      	adds	r3, r7, #6
   30cd2:	1c0a      	adds	r2, r1, #0
   30cd4:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30cd6:	2300      	movs	r3, #0
   30cd8:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   30cda:	2300      	movs	r3, #0
   30cdc:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   30cde:	68fb      	ldr	r3, [r7, #12]
   30ce0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   30ce2:	68bb      	ldr	r3, [r7, #8]
   30ce4:	2b03      	cmp	r3, #3
   30ce6:	dc03      	bgt.n	30cf0 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30ce8:	2302      	movs	r3, #2
   30cea:	425b      	negs	r3, r3
   30cec:	61fb      	str	r3, [r7, #28]
		goto exit;
   30cee:	e055      	b.n	30d9c <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   30cf0:	1dfb      	adds	r3, r7, #7
   30cf2:	781b      	ldrb	r3, [r3, #0]
   30cf4:	220f      	movs	r2, #15
   30cf6:	4013      	ands	r3, r2
   30cf8:	b2da      	uxtb	r2, r3
   30cfa:	2318      	movs	r3, #24
   30cfc:	18fb      	adds	r3, r7, r3
   30cfe:	0110      	lsls	r0, r2, #4
   30d00:	781a      	ldrb	r2, [r3, #0]
   30d02:	210f      	movs	r1, #15
   30d04:	400a      	ands	r2, r1
   30d06:	1c11      	adds	r1, r2, #0
   30d08:	1c02      	adds	r2, r0, #0
   30d0a:	430a      	orrs	r2, r1
   30d0c:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30d0e:	1dbb      	adds	r3, r7, #6
   30d10:	781b      	ldrb	r3, [r3, #0]
   30d12:	2201      	movs	r2, #1
   30d14:	4013      	ands	r3, r2
   30d16:	b2da      	uxtb	r2, r3
   30d18:	2318      	movs	r3, #24
   30d1a:	18fb      	adds	r3, r7, r3
   30d1c:	2101      	movs	r1, #1
   30d1e:	400a      	ands	r2, r1
   30d20:	00d0      	lsls	r0, r2, #3
   30d22:	781a      	ldrb	r2, [r3, #0]
   30d24:	2108      	movs	r1, #8
   30d26:	438a      	bics	r2, r1
   30d28:	1c11      	adds	r1, r2, #0
   30d2a:	1c02      	adds	r2, r0, #0
   30d2c:	430a      	orrs	r2, r1
   30d2e:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   30d30:	1dfb      	adds	r3, r7, #7
   30d32:	781b      	ldrb	r3, [r3, #0]
   30d34:	3b06      	subs	r3, #6
   30d36:	425a      	negs	r2, r3
   30d38:	4153      	adcs	r3, r2
   30d3a:	b2db      	uxtb	r3, r3
   30d3c:	1c1a      	adds	r2, r3, #0
   30d3e:	2303      	movs	r3, #3
   30d40:	4013      	ands	r3, r2
   30d42:	b2da      	uxtb	r2, r3
   30d44:	2318      	movs	r3, #24
   30d46:	18fb      	adds	r3, r7, r3
   30d48:	2103      	movs	r1, #3
   30d4a:	400a      	ands	r2, r1
   30d4c:	1890      	adds	r0, r2, r2
   30d4e:	781a      	ldrb	r2, [r3, #0]
   30d50:	2106      	movs	r1, #6
   30d52:	438a      	bics	r2, r1
   30d54:	1c11      	adds	r1, r2, #0
   30d56:	1c02      	adds	r2, r0, #0
   30d58:	430a      	orrs	r2, r1
   30d5a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30d5c:	2318      	movs	r3, #24
   30d5e:	18fb      	adds	r3, r7, r3
   30d60:	781a      	ldrb	r2, [r3, #0]
   30d62:	2314      	movs	r3, #20
   30d64:	18fb      	adds	r3, r7, r3
   30d66:	0011      	movs	r1, r2
   30d68:	0018      	movs	r0, r3
   30d6a:	4b0f      	ldr	r3, [pc, #60]	; (30da8 <MQTTSerialize_ack+0xe8>)
   30d6c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   30d6e:	697b      	ldr	r3, [r7, #20]
   30d70:	2102      	movs	r1, #2
   30d72:	0018      	movs	r0, r3
   30d74:	4b0d      	ldr	r3, [pc, #52]	; (30dac <MQTTSerialize_ack+0xec>)
   30d76:	4798      	blx	r3
   30d78:	0002      	movs	r2, r0
   30d7a:	697b      	ldr	r3, [r7, #20]
   30d7c:	189b      	adds	r3, r3, r2
   30d7e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   30d80:	2328      	movs	r3, #40	; 0x28
   30d82:	18fb      	adds	r3, r7, r3
   30d84:	881a      	ldrh	r2, [r3, #0]
   30d86:	2314      	movs	r3, #20
   30d88:	18fb      	adds	r3, r7, r3
   30d8a:	0011      	movs	r1, r2
   30d8c:	0018      	movs	r0, r3
   30d8e:	4b08      	ldr	r3, [pc, #32]	; (30db0 <MQTTSerialize_ack+0xf0>)
   30d90:	4798      	blx	r3
	rc = ptr - buf;
   30d92:	697b      	ldr	r3, [r7, #20]
   30d94:	001a      	movs	r2, r3
   30d96:	68fb      	ldr	r3, [r7, #12]
   30d98:	1ad3      	subs	r3, r2, r3
   30d9a:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30d9c:	69fb      	ldr	r3, [r7, #28]
}
   30d9e:	0018      	movs	r0, r3
   30da0:	46bd      	mov	sp, r7
   30da2:	b008      	add	sp, #32
   30da4:	bd80      	pop	{r7, pc}
   30da6:	46c0      	nop			; (mov r8, r8)
   30da8:	0003089b 	.word	0x0003089b
   30dac:	00030681 	.word	0x00030681
   30db0:	000308c5 	.word	0x000308c5

00030db4 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   30db4:	b580      	push	{r7, lr}
   30db6:	b084      	sub	sp, #16
   30db8:	af00      	add	r7, sp, #0
   30dba:	6078      	str	r0, [r7, #4]
   30dbc:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   30dbe:	2302      	movs	r3, #2
   30dc0:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   30dc2:	2300      	movs	r3, #0
   30dc4:	60fb      	str	r3, [r7, #12]
   30dc6:	e014      	b.n	30df2 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   30dc8:	68fa      	ldr	r2, [r7, #12]
   30dca:	0013      	movs	r3, r2
   30dcc:	005b      	lsls	r3, r3, #1
   30dce:	189b      	adds	r3, r3, r2
   30dd0:	009b      	lsls	r3, r3, #2
   30dd2:	001a      	movs	r2, r3
   30dd4:	683b      	ldr	r3, [r7, #0]
   30dd6:	189b      	adds	r3, r3, r2
   30dd8:	6818      	ldr	r0, [r3, #0]
   30dda:	6859      	ldr	r1, [r3, #4]
   30ddc:	689a      	ldr	r2, [r3, #8]
   30dde:	4b09      	ldr	r3, [pc, #36]	; (30e04 <MQTTSerialize_subscribeLength+0x50>)
   30de0:	4798      	blx	r3
   30de2:	0003      	movs	r3, r0
   30de4:	3303      	adds	r3, #3
   30de6:	68ba      	ldr	r2, [r7, #8]
   30de8:	18d3      	adds	r3, r2, r3
   30dea:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   30dec:	68fb      	ldr	r3, [r7, #12]
   30dee:	3301      	adds	r3, #1
   30df0:	60fb      	str	r3, [r7, #12]
   30df2:	68fa      	ldr	r2, [r7, #12]
   30df4:	687b      	ldr	r3, [r7, #4]
   30df6:	429a      	cmp	r2, r3
   30df8:	dbe6      	blt.n	30dc8 <MQTTSerialize_subscribeLength+0x14>
	return len;
   30dfa:	68bb      	ldr	r3, [r7, #8]
}
   30dfc:	0018      	movs	r0, r3
   30dfe:	46bd      	mov	sp, r7
   30e00:	b004      	add	sp, #16
   30e02:	bd80      	pop	{r7, pc}
   30e04:	00030a55 	.word	0x00030a55

00030e08 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   30e08:	b590      	push	{r4, r7, lr}
   30e0a:	b08b      	sub	sp, #44	; 0x2c
   30e0c:	af00      	add	r7, sp, #0
   30e0e:	60f8      	str	r0, [r7, #12]
   30e10:	60b9      	str	r1, [r7, #8]
   30e12:	0019      	movs	r1, r3
   30e14:	1dfb      	adds	r3, r7, #7
   30e16:	701a      	strb	r2, [r3, #0]
   30e18:	1d3b      	adds	r3, r7, #4
   30e1a:	1c0a      	adds	r2, r1, #0
   30e1c:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   30e1e:	68fb      	ldr	r3, [r7, #12]
   30e20:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   30e22:	2300      	movs	r3, #0
   30e24:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   30e26:	2300      	movs	r3, #0
   30e28:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   30e2a:	2300      	movs	r3, #0
   30e2c:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   30e2e:	2300      	movs	r3, #0
   30e30:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   30e32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   30e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30e36:	0011      	movs	r1, r2
   30e38:	0018      	movs	r0, r3
   30e3a:	4b41      	ldr	r3, [pc, #260]	; (30f40 <MQTTSerialize_subscribe+0x138>)
   30e3c:	4798      	blx	r3
   30e3e:	0003      	movs	r3, r0
   30e40:	61fb      	str	r3, [r7, #28]
   30e42:	69fb      	ldr	r3, [r7, #28]
   30e44:	0018      	movs	r0, r3
   30e46:	4b3f      	ldr	r3, [pc, #252]	; (30f44 <MQTTSerialize_subscribe+0x13c>)
   30e48:	4798      	blx	r3
   30e4a:	0002      	movs	r2, r0
   30e4c:	68bb      	ldr	r3, [r7, #8]
   30e4e:	429a      	cmp	r2, r3
   30e50:	dd03      	ble.n	30e5a <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30e52:	2302      	movs	r3, #2
   30e54:	425b      	negs	r3, r3
   30e56:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   30e58:	e06c      	b.n	30f34 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   30e5a:	2314      	movs	r3, #20
   30e5c:	18fb      	adds	r3, r7, r3
   30e5e:	2200      	movs	r2, #0
   30e60:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   30e62:	2314      	movs	r3, #20
   30e64:	18fb      	adds	r3, r7, r3
   30e66:	781a      	ldrb	r2, [r3, #0]
   30e68:	210f      	movs	r1, #15
   30e6a:	400a      	ands	r2, r1
   30e6c:	1c11      	adds	r1, r2, #0
   30e6e:	2280      	movs	r2, #128	; 0x80
   30e70:	4252      	negs	r2, r2
   30e72:	430a      	orrs	r2, r1
   30e74:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30e76:	1dfb      	adds	r3, r7, #7
   30e78:	781b      	ldrb	r3, [r3, #0]
   30e7a:	2201      	movs	r2, #1
   30e7c:	4013      	ands	r3, r2
   30e7e:	b2da      	uxtb	r2, r3
   30e80:	2314      	movs	r3, #20
   30e82:	18fb      	adds	r3, r7, r3
   30e84:	2101      	movs	r1, #1
   30e86:	400a      	ands	r2, r1
   30e88:	00d0      	lsls	r0, r2, #3
   30e8a:	781a      	ldrb	r2, [r3, #0]
   30e8c:	2108      	movs	r1, #8
   30e8e:	438a      	bics	r2, r1
   30e90:	1c11      	adds	r1, r2, #0
   30e92:	1c02      	adds	r2, r0, #0
   30e94:	430a      	orrs	r2, r1
   30e96:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   30e98:	2314      	movs	r3, #20
   30e9a:	18fb      	adds	r3, r7, r3
   30e9c:	781a      	ldrb	r2, [r3, #0]
   30e9e:	2106      	movs	r1, #6
   30ea0:	438a      	bics	r2, r1
   30ea2:	1c11      	adds	r1, r2, #0
   30ea4:	2202      	movs	r2, #2
   30ea6:	430a      	orrs	r2, r1
   30ea8:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30eaa:	2314      	movs	r3, #20
   30eac:	18fb      	adds	r3, r7, r3
   30eae:	781a      	ldrb	r2, [r3, #0]
   30eb0:	2318      	movs	r3, #24
   30eb2:	18fb      	adds	r3, r7, r3
   30eb4:	0011      	movs	r1, r2
   30eb6:	0018      	movs	r0, r3
   30eb8:	4b23      	ldr	r3, [pc, #140]	; (30f48 <MQTTSerialize_subscribe+0x140>)
   30eba:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30ebc:	69bb      	ldr	r3, [r7, #24]
   30ebe:	69fa      	ldr	r2, [r7, #28]
   30ec0:	0011      	movs	r1, r2
   30ec2:	0018      	movs	r0, r3
   30ec4:	4b21      	ldr	r3, [pc, #132]	; (30f4c <MQTTSerialize_subscribe+0x144>)
   30ec6:	4798      	blx	r3
   30ec8:	0002      	movs	r2, r0
   30eca:	69bb      	ldr	r3, [r7, #24]
   30ecc:	189b      	adds	r3, r3, r2
   30ece:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   30ed0:	1d3b      	adds	r3, r7, #4
   30ed2:	881a      	ldrh	r2, [r3, #0]
   30ed4:	2318      	movs	r3, #24
   30ed6:	18fb      	adds	r3, r7, r3
   30ed8:	0011      	movs	r1, r2
   30eda:	0018      	movs	r0, r3
   30edc:	4b1c      	ldr	r3, [pc, #112]	; (30f50 <MQTTSerialize_subscribe+0x148>)
   30ede:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   30ee0:	2300      	movs	r3, #0
   30ee2:	623b      	str	r3, [r7, #32]
   30ee4:	e01d      	b.n	30f22 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   30ee6:	6a3a      	ldr	r2, [r7, #32]
   30ee8:	0013      	movs	r3, r2
   30eea:	005b      	lsls	r3, r3, #1
   30eec:	189b      	adds	r3, r3, r2
   30eee:	009b      	lsls	r3, r3, #2
   30ef0:	001a      	movs	r2, r3
   30ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30ef4:	189b      	adds	r3, r3, r2
   30ef6:	2218      	movs	r2, #24
   30ef8:	18b8      	adds	r0, r7, r2
   30efa:	6819      	ldr	r1, [r3, #0]
   30efc:	685a      	ldr	r2, [r3, #4]
   30efe:	689b      	ldr	r3, [r3, #8]
   30f00:	4c14      	ldr	r4, [pc, #80]	; (30f54 <MQTTSerialize_subscribe+0x14c>)
   30f02:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   30f04:	6a3b      	ldr	r3, [r7, #32]
   30f06:	009b      	lsls	r3, r3, #2
   30f08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   30f0a:	18d3      	adds	r3, r2, r3
   30f0c:	681b      	ldr	r3, [r3, #0]
   30f0e:	b2da      	uxtb	r2, r3
   30f10:	2318      	movs	r3, #24
   30f12:	18fb      	adds	r3, r7, r3
   30f14:	0011      	movs	r1, r2
   30f16:	0018      	movs	r0, r3
   30f18:	4b0b      	ldr	r3, [pc, #44]	; (30f48 <MQTTSerialize_subscribe+0x140>)
   30f1a:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   30f1c:	6a3b      	ldr	r3, [r7, #32]
   30f1e:	3301      	adds	r3, #1
   30f20:	623b      	str	r3, [r7, #32]
   30f22:	6a3a      	ldr	r2, [r7, #32]
   30f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30f26:	429a      	cmp	r2, r3
   30f28:	dbdd      	blt.n	30ee6 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   30f2a:	69bb      	ldr	r3, [r7, #24]
   30f2c:	001a      	movs	r2, r3
   30f2e:	68fb      	ldr	r3, [r7, #12]
   30f30:	1ad3      	subs	r3, r2, r3
   30f32:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30f36:	0018      	movs	r0, r3
   30f38:	46bd      	mov	sp, r7
   30f3a:	b00b      	add	sp, #44	; 0x2c
   30f3c:	bd90      	pop	{r4, r7, pc}
   30f3e:	46c0      	nop			; (mov r8, r8)
   30f40:	00030db5 	.word	0x00030db5
   30f44:	00030779 	.word	0x00030779
   30f48:	0003089b 	.word	0x0003089b
   30f4c:	00030681 	.word	0x00030681
   30f50:	000308c5 	.word	0x000308c5
   30f54:	0003096d 	.word	0x0003096d

00030f58 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   30f58:	b590      	push	{r4, r7, lr}
   30f5a:	b08b      	sub	sp, #44	; 0x2c
   30f5c:	af00      	add	r7, sp, #0
   30f5e:	60f8      	str	r0, [r7, #12]
   30f60:	60b9      	str	r1, [r7, #8]
   30f62:	607a      	str	r2, [r7, #4]
   30f64:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30f66:	2300      	movs	r3, #0
   30f68:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30f6c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30f6e:	2300      	movs	r3, #0
   30f70:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30f72:	2300      	movs	r3, #0
   30f74:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30f76:	2318      	movs	r3, #24
   30f78:	18fb      	adds	r3, r7, r3
   30f7a:	0018      	movs	r0, r3
   30f7c:	4b2c      	ldr	r3, [pc, #176]	; (31030 <MQTTDeserialize_suback+0xd8>)
   30f7e:	4798      	blx	r3
   30f80:	0003      	movs	r3, r0
   30f82:	001a      	movs	r2, r3
   30f84:	231c      	movs	r3, #28
   30f86:	18fb      	adds	r3, r7, r3
   30f88:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   30f8a:	231c      	movs	r3, #28
   30f8c:	18fb      	adds	r3, r7, r3
   30f8e:	781b      	ldrb	r3, [r3, #0]
   30f90:	220f      	movs	r2, #15
   30f92:	4393      	bics	r3, r2
   30f94:	b2db      	uxtb	r3, r3
   30f96:	2b90      	cmp	r3, #144	; 0x90
   30f98:	d142      	bne.n	31020 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30f9a:	69bb      	ldr	r3, [r7, #24]
   30f9c:	2214      	movs	r2, #20
   30f9e:	18ba      	adds	r2, r7, r2
   30fa0:	0011      	movs	r1, r2
   30fa2:	0018      	movs	r0, r3
   30fa4:	4b23      	ldr	r3, [pc, #140]	; (31034 <MQTTDeserialize_suback+0xdc>)
   30fa6:	4798      	blx	r3
   30fa8:	0003      	movs	r3, r0
   30faa:	627b      	str	r3, [r7, #36]	; 0x24
   30fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30fae:	69bb      	ldr	r3, [r7, #24]
   30fb0:	189b      	adds	r3, r3, r2
   30fb2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30fb4:	69bb      	ldr	r3, [r7, #24]
   30fb6:	697a      	ldr	r2, [r7, #20]
   30fb8:	189b      	adds	r3, r3, r2
   30fba:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30fbc:	6a3b      	ldr	r3, [r7, #32]
   30fbe:	69ba      	ldr	r2, [r7, #24]
   30fc0:	1a9b      	subs	r3, r3, r2
   30fc2:	2b01      	cmp	r3, #1
   30fc4:	dd2e      	ble.n	31024 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   30fc6:	2318      	movs	r3, #24
   30fc8:	18fb      	adds	r3, r7, r3
   30fca:	0018      	movs	r0, r3
   30fcc:	4b1a      	ldr	r3, [pc, #104]	; (31038 <MQTTDeserialize_suback+0xe0>)
   30fce:	4798      	blx	r3
   30fd0:	0003      	movs	r3, r0
   30fd2:	b29a      	uxth	r2, r3
   30fd4:	68fb      	ldr	r3, [r7, #12]
   30fd6:	801a      	strh	r2, [r3, #0]

	*count = 0;
   30fd8:	687b      	ldr	r3, [r7, #4]
   30fda:	2200      	movs	r2, #0
   30fdc:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   30fde:	e018      	b.n	31012 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   30fe0:	687b      	ldr	r3, [r7, #4]
   30fe2:	681a      	ldr	r2, [r3, #0]
   30fe4:	68bb      	ldr	r3, [r7, #8]
   30fe6:	429a      	cmp	r2, r3
   30fe8:	dd03      	ble.n	30ff2 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   30fea:	2301      	movs	r3, #1
   30fec:	425b      	negs	r3, r3
   30fee:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   30ff0:	e019      	b.n	31026 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   30ff2:	687b      	ldr	r3, [r7, #4]
   30ff4:	681a      	ldr	r2, [r3, #0]
   30ff6:	1c51      	adds	r1, r2, #1
   30ff8:	687b      	ldr	r3, [r7, #4]
   30ffa:	6019      	str	r1, [r3, #0]
   30ffc:	0013      	movs	r3, r2
   30ffe:	009b      	lsls	r3, r3, #2
   31000:	683a      	ldr	r2, [r7, #0]
   31002:	18d4      	adds	r4, r2, r3
   31004:	2318      	movs	r3, #24
   31006:	18fb      	adds	r3, r7, r3
   31008:	0018      	movs	r0, r3
   3100a:	4b09      	ldr	r3, [pc, #36]	; (31030 <MQTTDeserialize_suback+0xd8>)
   3100c:	4798      	blx	r3
   3100e:	0003      	movs	r3, r0
   31010:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   31012:	69ba      	ldr	r2, [r7, #24]
   31014:	6a3b      	ldr	r3, [r7, #32]
   31016:	429a      	cmp	r2, r3
   31018:	d3e2      	bcc.n	30fe0 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   3101a:	2301      	movs	r3, #1
   3101c:	627b      	str	r3, [r7, #36]	; 0x24
   3101e:	e002      	b.n	31026 <MQTTDeserialize_suback+0xce>
		goto exit;
   31020:	46c0      	nop			; (mov r8, r8)
   31022:	e000      	b.n	31026 <MQTTDeserialize_suback+0xce>
		goto exit;
   31024:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31028:	0018      	movs	r0, r3
   3102a:	46bd      	mov	sp, r7
   3102c:	b00b      	add	sp, #44	; 0x2c
   3102e:	bd90      	pop	{r4, r7, pc}
   31030:	0003086f 	.word	0x0003086f
   31034:	00030809 	.word	0x00030809
   31038:	0003083d 	.word	0x0003083d

0003103c <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   3103c:	b580      	push	{r7, lr}
   3103e:	b082      	sub	sp, #8
   31040:	af00      	add	r7, sp, #0
   31042:	6078      	str	r0, [r7, #4]
	config->port = 80;
   31044:	687b      	ldr	r3, [r7, #4]
   31046:	2250      	movs	r2, #80	; 0x50
   31048:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   3104a:	687b      	ldr	r3, [r7, #4]
   3104c:	2200      	movs	r2, #0
   3104e:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   31050:	687b      	ldr	r3, [r7, #4]
   31052:	4a0b      	ldr	r2, [pc, #44]	; (31080 <http_client_get_config_defaults+0x44>)
   31054:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   31056:	687b      	ldr	r3, [r7, #4]
   31058:	2200      	movs	r2, #0
   3105a:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   3105c:	687b      	ldr	r3, [r7, #4]
   3105e:	2200      	movs	r2, #0
   31060:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   31062:	687b      	ldr	r3, [r7, #4]
   31064:	2280      	movs	r2, #128	; 0x80
   31066:	0052      	lsls	r2, r2, #1
   31068:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   3106a:	687b      	ldr	r3, [r7, #4]
   3106c:	2252      	movs	r2, #82	; 0x52
   3106e:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   31070:	687b      	ldr	r3, [r7, #4]
   31072:	4a04      	ldr	r2, [pc, #16]	; (31084 <http_client_get_config_defaults+0x48>)
   31074:	619a      	str	r2, [r3, #24]
}
   31076:	46c0      	nop			; (mov r8, r8)
   31078:	46bd      	mov	sp, r7
   3107a:	b002      	add	sp, #8
   3107c:	bd80      	pop	{r7, pc}
   3107e:	46c0      	nop			; (mov r8, r8)
   31080:	00004e20 	.word	0x00004e20
   31084:	0003a4a8 	.word	0x0003a4a8

00031088 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   31088:	b590      	push	{r4, r7, lr}
   3108a:	b083      	sub	sp, #12
   3108c:	af00      	add	r7, sp, #0
   3108e:	6078      	str	r0, [r7, #4]
   31090:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   31092:	687b      	ldr	r3, [r7, #4]
   31094:	2b00      	cmp	r3, #0
   31096:	d002      	beq.n	3109e <http_client_init+0x16>
   31098:	683b      	ldr	r3, [r7, #0]
   3109a:	2b00      	cmp	r3, #0
   3109c:	d102      	bne.n	310a4 <http_client_init+0x1c>
		return -EINVAL;
   3109e:	2316      	movs	r3, #22
   310a0:	425b      	negs	r3, r3
   310a2:	e058      	b.n	31156 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   310a4:	683b      	ldr	r3, [r7, #0]
   310a6:	691b      	ldr	r3, [r3, #16]
   310a8:	2b00      	cmp	r3, #0
   310aa:	d102      	bne.n	310b2 <http_client_init+0x2a>
		return -EINVAL;
   310ac:	2316      	movs	r3, #22
   310ae:	425b      	negs	r3, r3
   310b0:	e051      	b.n	31156 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   310b2:	683b      	ldr	r3, [r7, #0]
   310b4:	685b      	ldr	r3, [r3, #4]
   310b6:	2b00      	cmp	r3, #0
   310b8:	d102      	bne.n	310c0 <http_client_init+0x38>
		return -EINVAL;
   310ba:	2316      	movs	r3, #22
   310bc:	425b      	negs	r3, r3
   310be:	e04a      	b.n	31156 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   310c0:	683b      	ldr	r3, [r7, #0]
   310c2:	695b      	ldr	r3, [r3, #20]
   310c4:	2b51      	cmp	r3, #81	; 0x51
   310c6:	d802      	bhi.n	310ce <http_client_init+0x46>
		return -EINVAL;
   310c8:	2316      	movs	r3, #22
   310ca:	425b      	negs	r3, r3
   310cc:	e043      	b.n	31156 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   310ce:	687b      	ldr	r3, [r7, #4]
   310d0:	22e8      	movs	r2, #232	; 0xe8
   310d2:	2100      	movs	r1, #0
   310d4:	0018      	movs	r0, r3
   310d6:	4b22      	ldr	r3, [pc, #136]	; (31160 <http_client_init+0xd8>)
   310d8:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   310da:	687b      	ldr	r3, [r7, #4]
   310dc:	3350      	adds	r3, #80	; 0x50
   310de:	6839      	ldr	r1, [r7, #0]
   310e0:	221c      	movs	r2, #28
   310e2:	0018      	movs	r0, r3
   310e4:	4b1f      	ldr	r3, [pc, #124]	; (31164 <http_client_init+0xdc>)
   310e6:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   310e8:	687b      	ldr	r3, [r7, #4]
   310ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   310ec:	2b00      	cmp	r3, #0
   310ee:	d115      	bne.n	3111c <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   310f0:	683b      	ldr	r3, [r7, #0]
   310f2:	691b      	ldr	r3, [r3, #16]
   310f4:	0018      	movs	r0, r3
   310f6:	4b1c      	ldr	r3, [pc, #112]	; (31168 <http_client_init+0xe0>)
   310f8:	4798      	blx	r3
   310fa:	0003      	movs	r3, r0
   310fc:	001a      	movs	r2, r3
   310fe:	687b      	ldr	r3, [r7, #4]
   31100:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   31102:	687b      	ldr	r3, [r7, #4]
   31104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31106:	2b00      	cmp	r3, #0
   31108:	d102      	bne.n	31110 <http_client_init+0x88>
			return -ENOMEM;
   3110a:	230c      	movs	r3, #12
   3110c:	425b      	negs	r3, r3
   3110e:	e022      	b.n	31156 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   31110:	687b      	ldr	r3, [r7, #4]
   31112:	2241      	movs	r2, #65	; 0x41
   31114:	5c99      	ldrb	r1, [r3, r2]
   31116:	2004      	movs	r0, #4
   31118:	4301      	orrs	r1, r0
   3111a:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   3111c:	683b      	ldr	r3, [r7, #0]
   3111e:	891b      	ldrh	r3, [r3, #8]
   31120:	2b00      	cmp	r3, #0
   31122:	d010      	beq.n	31146 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   31124:	683b      	ldr	r3, [r7, #0]
   31126:	6858      	ldr	r0, [r3, #4]
   31128:	687a      	ldr	r2, [r7, #4]
   3112a:	4910      	ldr	r1, [pc, #64]	; (3116c <http_client_init+0xe4>)
   3112c:	2300      	movs	r3, #0
   3112e:	4c10      	ldr	r4, [pc, #64]	; (31170 <http_client_init+0xe8>)
   31130:	47a0      	blx	r4
   31132:	0002      	movs	r2, r0
   31134:	687b      	ldr	r3, [r7, #4]
   31136:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   31138:	687b      	ldr	r3, [r7, #4]
   3113a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   3113c:	2b00      	cmp	r3, #0
   3113e:	da02      	bge.n	31146 <http_client_init+0xbe>
			return -ENOSPC;
   31140:	231c      	movs	r3, #28
   31142:	425b      	negs	r3, r3
   31144:	e007      	b.n	31156 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   31146:	687b      	ldr	r3, [r7, #4]
   31148:	2200      	movs	r2, #0
   3114a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   3114c:	687b      	ldr	r3, [r7, #4]
   3114e:	22d8      	movs	r2, #216	; 0xd8
   31150:	2100      	movs	r1, #0
   31152:	5099      	str	r1, [r3, r2]

	return 0;
   31154:	2300      	movs	r3, #0
}
   31156:	0018      	movs	r0, r3
   31158:	46bd      	mov	sp, r7
   3115a:	b003      	add	sp, #12
   3115c:	bd90      	pop	{r4, r7, pc}
   3115e:	46c0      	nop			; (mov r8, r8)
   31160:	00034f63 	.word	0x00034f63
   31164:	00034f2d 	.word	0x00034f2d
   31168:	00034f05 	.word	0x00034f05
   3116c:	00031439 	.word	0x00031439
   31170:	00032add 	.word	0x00032add

00031174 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   31174:	b580      	push	{r7, lr}
   31176:	b082      	sub	sp, #8
   31178:	af00      	add	r7, sp, #0
   3117a:	6078      	str	r0, [r7, #4]
   3117c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   3117e:	687b      	ldr	r3, [r7, #4]
   31180:	2b00      	cmp	r3, #0
   31182:	d102      	bne.n	3118a <http_client_register_callback+0x16>
		return -EINVAL;
   31184:	2316      	movs	r3, #22
   31186:	425b      	negs	r3, r3
   31188:	e003      	b.n	31192 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   3118a:	687b      	ldr	r3, [r7, #4]
   3118c:	683a      	ldr	r2, [r7, #0]
   3118e:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   31190:	2300      	movs	r3, #0
}
   31192:	0018      	movs	r0, r3
   31194:	46bd      	mov	sp, r7
   31196:	b002      	add	sp, #8
   31198:	bd80      	pop	{r7, pc}
	...

0003119c <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   3119c:	b580      	push	{r7, lr}
   3119e:	b082      	sub	sp, #8
   311a0:	af00      	add	r7, sp, #0
   311a2:	6078      	str	r0, [r7, #4]
	switch (err) {
   311a4:	687b      	ldr	r3, [r7, #4]
   311a6:	330e      	adds	r3, #14
   311a8:	2b0e      	cmp	r3, #14
   311aa:	d825      	bhi.n	311f8 <_hwerr_to_stderr+0x5c>
   311ac:	009a      	lsls	r2, r3, #2
   311ae:	4b18      	ldr	r3, [pc, #96]	; (31210 <_hwerr_to_stderr+0x74>)
   311b0:	18d3      	adds	r3, r2, r3
   311b2:	681b      	ldr	r3, [r3, #0]
   311b4:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   311b6:	2305      	movs	r3, #5
   311b8:	425b      	negs	r3, r3
   311ba:	e024      	b.n	31206 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   311bc:	2302      	movs	r3, #2
   311be:	425b      	negs	r3, r3
   311c0:	e021      	b.n	31206 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   311c2:	2370      	movs	r3, #112	; 0x70
   311c4:	425b      	negs	r3, r3
   311c6:	e01e      	b.n	31206 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   311c8:	230c      	movs	r3, #12
   311ca:	425b      	negs	r3, r3
   311cc:	e01b      	b.n	31206 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   311ce:	2316      	movs	r3, #22
   311d0:	425b      	negs	r3, r3
   311d2:	e018      	b.n	31206 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   311d4:	230c      	movs	r3, #12
   311d6:	425b      	negs	r3, r3
   311d8:	e015      	b.n	31206 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   311da:	2305      	movs	r3, #5
   311dc:	425b      	negs	r3, r3
   311de:	e012      	b.n	31206 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   311e0:	2379      	movs	r3, #121	; 0x79
   311e2:	425b      	negs	r3, r3
   311e4:	e00f      	b.n	31206 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   311e6:	2368      	movs	r3, #104	; 0x68
   311e8:	425b      	negs	r3, r3
   311ea:	e00c      	b.n	31206 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   311ec:	230b      	movs	r3, #11
   311ee:	425b      	negs	r3, r3
   311f0:	e009      	b.n	31206 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   311f2:	2310      	movs	r3, #16
   311f4:	425b      	negs	r3, r3
   311f6:	e006      	b.n	31206 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   311f8:	687b      	ldr	r3, [r7, #4]
   311fa:	2b00      	cmp	r3, #0
   311fc:	da02      	bge.n	31204 <_hwerr_to_stderr+0x68>
				return -EIO;
   311fe:	2305      	movs	r3, #5
   31200:	425b      	negs	r3, r3
   31202:	e000      	b.n	31206 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   31204:	2300      	movs	r3, #0
	}
}
   31206:	0018      	movs	r0, r3
   31208:	46bd      	mov	sp, r7
   3120a:	b002      	add	sp, #8
   3120c:	bd80      	pop	{r7, pc}
   3120e:	46c0      	nop			; (mov r8, r8)
   31210:	0003a5e4 	.word	0x0003a5e4

00031214 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   31214:	b580      	push	{r7, lr}
   31216:	b08a      	sub	sp, #40	; 0x28
   31218:	af00      	add	r7, sp, #0
   3121a:	603a      	str	r2, [r7, #0]
   3121c:	1dfb      	adds	r3, r7, #7
   3121e:	1c02      	adds	r2, r0, #0
   31220:	701a      	strb	r2, [r3, #0]
   31222:	1dbb      	adds	r3, r7, #6
   31224:	1c0a      	adds	r2, r1, #0
   31226:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   31228:	1dfb      	adds	r3, r7, #7
   3122a:	2200      	movs	r2, #0
   3122c:	569a      	ldrsb	r2, [r3, r2]
   3122e:	4b4b      	ldr	r3, [pc, #300]	; (3135c <http_client_socket_event_handler+0x148>)
   31230:	0092      	lsls	r2, r2, #2
   31232:	58d3      	ldr	r3, [r2, r3]
   31234:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   31236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31238:	2b00      	cmp	r3, #0
   3123a:	d100      	bne.n	3123e <http_client_socket_event_handler+0x2a>
   3123c:	e08a      	b.n	31354 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   3123e:	1dbb      	adds	r3, r7, #6
   31240:	781b      	ldrb	r3, [r3, #0]
   31242:	2b06      	cmp	r3, #6
   31244:	d040      	beq.n	312c8 <http_client_socket_event_handler+0xb4>
   31246:	2b07      	cmp	r3, #7
   31248:	d060      	beq.n	3130c <http_client_socket_event_handler+0xf8>
   3124a:	2b05      	cmp	r3, #5
   3124c:	d000      	beq.n	31250 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   3124e:	e082      	b.n	31356 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   31250:	683b      	ldr	r3, [r7, #0]
   31252:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   31254:	6a3b      	ldr	r3, [r7, #32]
   31256:	785b      	ldrb	r3, [r3, #1]
   31258:	b25b      	sxtb	r3, r3
   3125a:	001a      	movs	r2, r3
   3125c:	230c      	movs	r3, #12
   3125e:	18fb      	adds	r3, r7, r3
   31260:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   31262:	6a3b      	ldr	r3, [r7, #32]
   31264:	785b      	ldrb	r3, [r3, #1]
   31266:	b25b      	sxtb	r3, r3
   31268:	2b00      	cmp	r3, #0
   3126a:	da0c      	bge.n	31286 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   3126c:	6a3b      	ldr	r3, [r7, #32]
   3126e:	785b      	ldrb	r3, [r3, #1]
   31270:	b25b      	sxtb	r3, r3
   31272:	0018      	movs	r0, r3
   31274:	4b3a      	ldr	r3, [pc, #232]	; (31360 <http_client_socket_event_handler+0x14c>)
   31276:	4798      	blx	r3
   31278:	0002      	movs	r2, r0
   3127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3127c:	0011      	movs	r1, r2
   3127e:	0018      	movs	r0, r3
   31280:	4b38      	ldr	r3, [pc, #224]	; (31364 <http_client_socket_event_handler+0x150>)
   31282:	4798      	blx	r3
    	break;
   31284:	e067      	b.n	31356 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   31286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3128a:	2b00      	cmp	r3, #0
   3128c:	d006      	beq.n	3129c <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   3128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31292:	220c      	movs	r2, #12
   31294:	18ba      	adds	r2, r7, r2
   31296:	6a78      	ldr	r0, [r7, #36]	; 0x24
   31298:	2100      	movs	r1, #0
   3129a:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   3129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3129e:	2203      	movs	r2, #3
   312a0:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   312a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   312a4:	6d58      	ldr	r0, [r3, #84]	; 0x54
   312a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   312a8:	6c99      	ldr	r1, [r3, #72]	; 0x48
   312aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   312ac:	2258      	movs	r2, #88	; 0x58
   312ae:	5a9b      	ldrh	r3, [r3, r2]
   312b0:	001a      	movs	r2, r3
   312b2:	4b2d      	ldr	r3, [pc, #180]	; (31368 <http_client_socket_event_handler+0x154>)
   312b4:	4798      	blx	r3
    		_http_client_recv_packet(module);
   312b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   312b8:	0018      	movs	r0, r3
   312ba:	4b2c      	ldr	r3, [pc, #176]	; (3136c <http_client_socket_event_handler+0x158>)
   312bc:	4798      	blx	r3
			_http_client_request(module);
   312be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   312c0:	0018      	movs	r0, r3
   312c2:	4b2b      	ldr	r3, [pc, #172]	; (31370 <http_client_socket_event_handler+0x15c>)
   312c4:	4798      	blx	r3
    	break;
   312c6:	e046      	b.n	31356 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   312c8:	683b      	ldr	r3, [r7, #0]
   312ca:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   312cc:	69fb      	ldr	r3, [r7, #28]
   312ce:	2204      	movs	r2, #4
   312d0:	5e9b      	ldrsh	r3, [r3, r2]
   312d2:	2b00      	cmp	r3, #0
   312d4:	dd09      	ble.n	312ea <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   312d6:	69fb      	ldr	r3, [r7, #28]
   312d8:	2204      	movs	r2, #4
   312da:	5e9b      	ldrsh	r3, [r3, r2]
   312dc:	001a      	movs	r2, r3
   312de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   312e0:	0011      	movs	r1, r2
   312e2:	0018      	movs	r0, r3
   312e4:	4b23      	ldr	r3, [pc, #140]	; (31374 <http_client_socket_event_handler+0x160>)
   312e6:	4798      	blx	r3
   312e8:	e00b      	b.n	31302 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   312ea:	69fb      	ldr	r3, [r7, #28]
   312ec:	2204      	movs	r2, #4
   312ee:	5e9b      	ldrsh	r3, [r3, r2]
   312f0:	0018      	movs	r0, r3
   312f2:	4b1b      	ldr	r3, [pc, #108]	; (31360 <http_client_socket_event_handler+0x14c>)
   312f4:	4798      	blx	r3
   312f6:	0002      	movs	r2, r0
   312f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   312fa:	0011      	movs	r1, r2
   312fc:	0018      	movs	r0, r3
   312fe:	4b19      	ldr	r3, [pc, #100]	; (31364 <http_client_socket_event_handler+0x150>)
   31300:	4798      	blx	r3
		_http_client_recv_packet(module);
   31302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31304:	0018      	movs	r0, r3
   31306:	4b19      	ldr	r3, [pc, #100]	; (3136c <http_client_socket_event_handler+0x158>)
   31308:	4798      	blx	r3
		break;
   3130a:	e024      	b.n	31356 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   3130c:	231a      	movs	r3, #26
   3130e:	18fb      	adds	r3, r7, r3
   31310:	683a      	ldr	r2, [r7, #0]
   31312:	8812      	ldrh	r2, [r2, #0]
   31314:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   31316:	231a      	movs	r3, #26
   31318:	18fb      	adds	r3, r7, r3
   3131a:	2200      	movs	r2, #0
   3131c:	5e9b      	ldrsh	r3, [r3, r2]
   3131e:	2b00      	cmp	r3, #0
   31320:	da0d      	bge.n	3133e <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   31322:	231a      	movs	r3, #26
   31324:	18fb      	adds	r3, r7, r3
   31326:	2200      	movs	r2, #0
   31328:	5e9b      	ldrsh	r3, [r3, r2]
   3132a:	0018      	movs	r0, r3
   3132c:	4b0c      	ldr	r3, [pc, #48]	; (31360 <http_client_socket_event_handler+0x14c>)
   3132e:	4798      	blx	r3
   31330:	0002      	movs	r2, r0
   31332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31334:	0011      	movs	r1, r2
   31336:	0018      	movs	r0, r3
   31338:	4b0a      	ldr	r3, [pc, #40]	; (31364 <http_client_socket_event_handler+0x150>)
   3133a:	4798      	blx	r3
   3133c:	e003      	b.n	31346 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   3133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31340:	0018      	movs	r0, r3
   31342:	4b0b      	ldr	r3, [pc, #44]	; (31370 <http_client_socket_event_handler+0x15c>)
   31344:	4798      	blx	r3
		module->sending = 0;
   31346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31348:	2241      	movs	r2, #65	; 0x41
   3134a:	5c99      	ldrb	r1, [r3, r2]
   3134c:	2001      	movs	r0, #1
   3134e:	4381      	bics	r1, r0
   31350:	5499      	strb	r1, [r3, r2]
    	break;
   31352:	e000      	b.n	31356 <http_client_socket_event_handler+0x142>
		return;
   31354:	46c0      	nop			; (mov r8, r8)
	}

}
   31356:	46bd      	mov	sp, r7
   31358:	b00a      	add	sp, #40	; 0x28
   3135a:	bd80      	pop	{r7, pc}
   3135c:	200046f4 	.word	0x200046f4
   31360:	0003119d 	.word	0x0003119d
   31364:	00031811 	.word	0x00031811
   31368:	00032b6d 	.word	0x00032b6d
   3136c:	0003209d 	.word	0x0003209d
   31370:	00031965 	.word	0x00031965
   31374:	00032101 	.word	0x00032101

00031378 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   31378:	b580      	push	{r7, lr}
   3137a:	b088      	sub	sp, #32
   3137c:	af00      	add	r7, sp, #0
   3137e:	6078      	str	r0, [r7, #4]
   31380:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31382:	2300      	movs	r3, #0
   31384:	61fb      	str	r3, [r7, #28]
   31386:	e048      	b.n	3141a <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   31388:	4b27      	ldr	r3, [pc, #156]	; (31428 <http_client_socket_resolve_handler+0xb0>)
   3138a:	69fa      	ldr	r2, [r7, #28]
   3138c:	0092      	lsls	r2, r2, #2
   3138e:	58d3      	ldr	r3, [r2, r3]
   31390:	2b00      	cmp	r3, #0
   31392:	d03f      	beq.n	31414 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   31394:	4b24      	ldr	r3, [pc, #144]	; (31428 <http_client_socket_resolve_handler+0xb0>)
   31396:	69fa      	ldr	r2, [r7, #28]
   31398:	0092      	lsls	r2, r2, #2
   3139a:	58d3      	ldr	r3, [r2, r3]
   3139c:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   3139e:	69bb      	ldr	r3, [r7, #24]
   313a0:	1c5a      	adds	r2, r3, #1
   313a2:	687b      	ldr	r3, [r7, #4]
   313a4:	0011      	movs	r1, r2
   313a6:	0018      	movs	r0, r3
   313a8:	4b20      	ldr	r3, [pc, #128]	; (3142c <http_client_socket_resolve_handler+0xb4>)
   313aa:	4798      	blx	r3
   313ac:	1e03      	subs	r3, r0, #0
   313ae:	d131      	bne.n	31414 <http_client_socket_resolve_handler+0x9c>
   313b0:	69bb      	ldr	r3, [r7, #24]
   313b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   313b4:	2b01      	cmp	r3, #1
   313b6:	d12d      	bne.n	31414 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   313b8:	683b      	ldr	r3, [r7, #0]
   313ba:	2b00      	cmp	r3, #0
   313bc:	d107      	bne.n	313ce <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   313be:	2376      	movs	r3, #118	; 0x76
   313c0:	425a      	negs	r2, r3
   313c2:	69bb      	ldr	r3, [r7, #24]
   313c4:	0011      	movs	r1, r2
   313c6:	0018      	movs	r0, r3
   313c8:	4b19      	ldr	r3, [pc, #100]	; (31430 <http_client_socket_resolve_handler+0xb8>)
   313ca:	4798      	blx	r3
					return;
   313cc:	e028      	b.n	31420 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   313ce:	2308      	movs	r3, #8
   313d0:	18fb      	adds	r3, r7, r3
   313d2:	2202      	movs	r2, #2
   313d4:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   313d6:	69bb      	ldr	r3, [r7, #24]
   313d8:	2250      	movs	r2, #80	; 0x50
   313da:	5a9b      	ldrh	r3, [r3, r2]
   313dc:	021b      	lsls	r3, r3, #8
   313de:	b21a      	sxth	r2, r3
   313e0:	69bb      	ldr	r3, [r7, #24]
   313e2:	2150      	movs	r1, #80	; 0x50
   313e4:	5a5b      	ldrh	r3, [r3, r1]
   313e6:	0a1b      	lsrs	r3, r3, #8
   313e8:	b29b      	uxth	r3, r3
   313ea:	b21b      	sxth	r3, r3
   313ec:	4313      	orrs	r3, r2
   313ee:	b21b      	sxth	r3, r3
   313f0:	b29a      	uxth	r2, r3
   313f2:	2308      	movs	r3, #8
   313f4:	18fb      	adds	r3, r7, r3
   313f6:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   313f8:	2308      	movs	r3, #8
   313fa:	18fb      	adds	r3, r7, r3
   313fc:	683a      	ldr	r2, [r7, #0]
   313fe:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31400:	69bb      	ldr	r3, [r7, #24]
   31402:	781b      	ldrb	r3, [r3, #0]
   31404:	b25b      	sxtb	r3, r3
   31406:	2208      	movs	r2, #8
   31408:	18b9      	adds	r1, r7, r2
   3140a:	2210      	movs	r2, #16
   3140c:	0018      	movs	r0, r3
   3140e:	4b09      	ldr	r3, [pc, #36]	; (31434 <http_client_socket_resolve_handler+0xbc>)
   31410:	4798      	blx	r3
				return;
   31412:	e005      	b.n	31420 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31414:	69fb      	ldr	r3, [r7, #28]
   31416:	3301      	adds	r3, #1
   31418:	61fb      	str	r3, [r7, #28]
   3141a:	69fb      	ldr	r3, [r7, #28]
   3141c:	2b06      	cmp	r3, #6
   3141e:	ddb3      	ble.n	31388 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   31420:	46bd      	mov	sp, r7
   31422:	b008      	add	sp, #32
   31424:	bd80      	pop	{r7, pc}
   31426:	46c0      	nop			; (mov r8, r8)
   31428:	200046f4 	.word	0x200046f4
   3142c:	000352bb 	.word	0x000352bb
   31430:	00031811 	.word	0x00031811
   31434:	00025d35 	.word	0x00025d35

00031438 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   31438:	b580      	push	{r7, lr}
   3143a:	b086      	sub	sp, #24
   3143c:	af00      	add	r7, sp, #0
   3143e:	60f8      	str	r0, [r7, #12]
   31440:	60b9      	str	r1, [r7, #8]
   31442:	607a      	str	r2, [r7, #4]
   31444:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   31446:	687b      	ldr	r3, [r7, #4]
   31448:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   3144a:	697b      	ldr	r3, [r7, #20]
   3144c:	2b00      	cmp	r3, #0
   3144e:	d007      	beq.n	31460 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   31450:	233e      	movs	r3, #62	; 0x3e
   31452:	425a      	negs	r2, r3
   31454:	697b      	ldr	r3, [r7, #20]
   31456:	0011      	movs	r1, r2
   31458:	0018      	movs	r0, r3
   3145a:	4b03      	ldr	r3, [pc, #12]	; (31468 <http_client_timer_callback+0x30>)
   3145c:	4798      	blx	r3
   3145e:	e000      	b.n	31462 <http_client_timer_callback+0x2a>
		return;
   31460:	46c0      	nop			; (mov r8, r8)
}
   31462:	46bd      	mov	sp, r7
   31464:	b006      	add	sp, #24
   31466:	bd80      	pop	{r7, pc}
   31468:	00031811 	.word	0x00031811

0003146c <_is_ip>:

static int _is_ip(const char *host)
{
   3146c:	b580      	push	{r7, lr}
   3146e:	b084      	sub	sp, #16
   31470:	af00      	add	r7, sp, #0
   31472:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   31474:	2300      	movs	r3, #0
   31476:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   31478:	e03a      	b.n	314f0 <_is_ip+0x84>
		ch = *host++;
   3147a:	687b      	ldr	r3, [r7, #4]
   3147c:	1c5a      	adds	r2, r3, #1
   3147e:	607a      	str	r2, [r7, #4]
   31480:	220b      	movs	r2, #11
   31482:	18ba      	adds	r2, r7, r2
   31484:	781b      	ldrb	r3, [r3, #0]
   31486:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   31488:	230b      	movs	r3, #11
   3148a:	18fb      	adds	r3, r7, r3
   3148c:	781b      	ldrb	r3, [r3, #0]
   3148e:	2b60      	cmp	r3, #96	; 0x60
   31490:	d904      	bls.n	3149c <_is_ip+0x30>
   31492:	230b      	movs	r3, #11
   31494:	18fb      	adds	r3, r7, r3
   31496:	781b      	ldrb	r3, [r3, #0]
   31498:	2b66      	cmp	r3, #102	; 0x66
   3149a:	d913      	bls.n	314c4 <_is_ip+0x58>
   3149c:	230b      	movs	r3, #11
   3149e:	18fb      	adds	r3, r7, r3
   314a0:	781b      	ldrb	r3, [r3, #0]
   314a2:	2b40      	cmp	r3, #64	; 0x40
   314a4:	d904      	bls.n	314b0 <_is_ip+0x44>
   314a6:	230b      	movs	r3, #11
   314a8:	18fb      	adds	r3, r7, r3
   314aa:	781b      	ldrb	r3, [r3, #0]
   314ac:	2b46      	cmp	r3, #70	; 0x46
   314ae:	d909      	bls.n	314c4 <_is_ip+0x58>
   314b0:	230b      	movs	r3, #11
   314b2:	18fb      	adds	r3, r7, r3
   314b4:	781b      	ldrb	r3, [r3, #0]
   314b6:	2b3a      	cmp	r3, #58	; 0x3a
   314b8:	d004      	beq.n	314c4 <_is_ip+0x58>
   314ba:	230b      	movs	r3, #11
   314bc:	18fb      	adds	r3, r7, r3
   314be:	781b      	ldrb	r3, [r3, #0]
   314c0:	2b2f      	cmp	r3, #47	; 0x2f
   314c2:	d102      	bne.n	314ca <_is_ip+0x5e>
			isv6 = 1;
   314c4:	2301      	movs	r3, #1
   314c6:	60fb      	str	r3, [r7, #12]
   314c8:	e012      	b.n	314f0 <_is_ip+0x84>
		} else if (ch == '.') {
   314ca:	230b      	movs	r3, #11
   314cc:	18fb      	adds	r3, r7, r3
   314ce:	781b      	ldrb	r3, [r3, #0]
   314d0:	2b2e      	cmp	r3, #46	; 0x2e
   314d2:	d104      	bne.n	314de <_is_ip+0x72>
			if (isv6) {
   314d4:	68fb      	ldr	r3, [r7, #12]
   314d6:	2b00      	cmp	r3, #0
   314d8:	d00a      	beq.n	314f0 <_is_ip+0x84>
				return 0;
   314da:	2300      	movs	r3, #0
   314dc:	e00d      	b.n	314fa <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   314de:	230b      	movs	r3, #11
   314e0:	18fb      	adds	r3, r7, r3
   314e2:	781b      	ldrb	r3, [r3, #0]
   314e4:	2230      	movs	r2, #48	; 0x30
   314e6:	4013      	ands	r3, r2
   314e8:	2b30      	cmp	r3, #48	; 0x30
   314ea:	d001      	beq.n	314f0 <_is_ip+0x84>
			return 0;
   314ec:	2300      	movs	r3, #0
   314ee:	e004      	b.n	314fa <_is_ip+0x8e>
	while (*host != '\0') {
   314f0:	687b      	ldr	r3, [r7, #4]
   314f2:	781b      	ldrb	r3, [r3, #0]
   314f4:	2b00      	cmp	r3, #0
   314f6:	d1c0      	bne.n	3147a <_is_ip+0xe>
		}
	}
	return 1;
   314f8:	2301      	movs	r3, #1
}
   314fa:	0018      	movs	r0, r3
   314fc:	46bd      	mov	sp, r7
   314fe:	b004      	add	sp, #16
   31500:	bd80      	pop	{r7, pc}
	...

00031504 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   31504:	b5b0      	push	{r4, r5, r7, lr}
   31506:	b08e      	sub	sp, #56	; 0x38
   31508:	af00      	add	r7, sp, #0
   3150a:	60f8      	str	r0, [r7, #12]
   3150c:	60b9      	str	r1, [r7, #8]
   3150e:	603b      	str	r3, [r7, #0]
   31510:	1dfb      	adds	r3, r7, #7
   31512:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   31514:	2337      	movs	r3, #55	; 0x37
   31516:	18fb      	adds	r3, r7, r3
   31518:	2200      	movs	r2, #0
   3151a:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   3151c:	2300      	movs	r3, #0
   3151e:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   31520:	2300      	movs	r3, #0
   31522:	633b      	str	r3, [r7, #48]	; 0x30
   31524:	2300      	movs	r3, #0
   31526:	62fb      	str	r3, [r7, #44]	; 0x2c
   31528:	2300      	movs	r3, #0
   3152a:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   3152c:	68fb      	ldr	r3, [r7, #12]
   3152e:	2b00      	cmp	r3, #0
   31530:	d102      	bne.n	31538 <http_client_send_request+0x34>
		return -EINVAL;
   31532:	2316      	movs	r3, #22
   31534:	425b      	negs	r3, r3
   31536:	e145      	b.n	317c4 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   31538:	68fb      	ldr	r3, [r7, #12]
   3153a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3153c:	2b02      	cmp	r3, #2
   3153e:	d902      	bls.n	31546 <http_client_send_request+0x42>
		return -EBUSY;
   31540:	2310      	movs	r3, #16
   31542:	425b      	negs	r3, r3
   31544:	e13e      	b.n	317c4 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   31546:	49a1      	ldr	r1, [pc, #644]	; (317cc <http_client_send_request+0x2c8>)
   31548:	68bb      	ldr	r3, [r7, #8]
   3154a:	2207      	movs	r2, #7
   3154c:	0018      	movs	r0, r3
   3154e:	4ba0      	ldr	r3, [pc, #640]	; (317d0 <http_client_send_request+0x2cc>)
   31550:	4798      	blx	r3
   31552:	1e03      	subs	r3, r0, #0
   31554:	d102      	bne.n	3155c <http_client_send_request+0x58>
		i = 7;
   31556:	2307      	movs	r3, #7
   31558:	633b      	str	r3, [r7, #48]	; 0x30
   3155a:	e009      	b.n	31570 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   3155c:	499d      	ldr	r1, [pc, #628]	; (317d4 <http_client_send_request+0x2d0>)
   3155e:	68bb      	ldr	r3, [r7, #8]
   31560:	2208      	movs	r2, #8
   31562:	0018      	movs	r0, r3
   31564:	4b9a      	ldr	r3, [pc, #616]	; (317d0 <http_client_send_request+0x2cc>)
   31566:	4798      	blx	r3
   31568:	1e03      	subs	r3, r0, #0
   3156a:	d101      	bne.n	31570 <http_client_send_request+0x6c>
		i = 8;
   3156c:	2308      	movs	r3, #8
   3156e:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   31570:	68fb      	ldr	r3, [r7, #12]
   31572:	1c5c      	adds	r4, r3, #1
   31574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31576:	68ba      	ldr	r2, [r7, #8]
   31578:	18d5      	adds	r5, r2, r3
   3157a:	68fb      	ldr	r3, [r7, #12]
   3157c:	3301      	adds	r3, #1
   3157e:	0018      	movs	r0, r3
   31580:	4b95      	ldr	r3, [pc, #596]	; (317d8 <http_client_send_request+0x2d4>)
   31582:	4798      	blx	r3
   31584:	0003      	movs	r3, r0
   31586:	001a      	movs	r2, r3
   31588:	0029      	movs	r1, r5
   3158a:	0020      	movs	r0, r4
   3158c:	4b90      	ldr	r3, [pc, #576]	; (317d0 <http_client_send_request+0x2cc>)
   3158e:	4798      	blx	r3
   31590:	0003      	movs	r3, r0
   31592:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31594:	e00d      	b.n	315b2 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   31596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31598:	1c5a      	adds	r2, r3, #1
   3159a:	62fa      	str	r2, [r7, #44]	; 0x2c
   3159c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   3159e:	68b9      	ldr	r1, [r7, #8]
   315a0:	188a      	adds	r2, r1, r2
   315a2:	7811      	ldrb	r1, [r2, #0]
   315a4:	68fa      	ldr	r2, [r7, #12]
   315a6:	18d3      	adds	r3, r2, r3
   315a8:	1c0a      	adds	r2, r1, #0
   315aa:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   315ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   315ae:	3301      	adds	r3, #1
   315b0:	633b      	str	r3, [r7, #48]	; 0x30
   315b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   315b4:	68ba      	ldr	r2, [r7, #8]
   315b6:	18d3      	adds	r3, r2, r3
   315b8:	781b      	ldrb	r3, [r3, #0]
   315ba:	2b00      	cmp	r3, #0
   315bc:	d005      	beq.n	315ca <http_client_send_request+0xc6>
   315be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   315c0:	68ba      	ldr	r2, [r7, #8]
   315c2:	18d3      	adds	r3, r2, r3
   315c4:	781b      	ldrb	r3, [r3, #0]
   315c6:	2b2f      	cmp	r3, #47	; 0x2f
   315c8:	d1e5      	bne.n	31596 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   315ca:	68fa      	ldr	r2, [r7, #12]
   315cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   315ce:	18d3      	adds	r3, r2, r3
   315d0:	3301      	adds	r3, #1
   315d2:	2200      	movs	r2, #0
   315d4:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   315d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   315d8:	68ba      	ldr	r2, [r7, #8]
   315da:	18d3      	adds	r3, r2, r3
   315dc:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   315de:	68fb      	ldr	r3, [r7, #12]
   315e0:	3301      	adds	r3, #1
   315e2:	781b      	ldrb	r3, [r3, #0]
   315e4:	2b00      	cmp	r3, #0
   315e6:	d102      	bne.n	315ee <http_client_send_request+0xea>
		return -EINVAL;
   315e8:	2316      	movs	r3, #22
   315ea:	425b      	negs	r3, r3
   315ec:	e0ea      	b.n	317c4 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   315ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   315f0:	0018      	movs	r0, r3
   315f2:	4b79      	ldr	r3, [pc, #484]	; (317d8 <http_client_send_request+0x2d4>)
   315f4:	4798      	blx	r3
   315f6:	0003      	movs	r3, r0
   315f8:	2b3f      	cmp	r3, #63	; 0x3f
   315fa:	d902      	bls.n	31602 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   315fc:	235b      	movs	r3, #91	; 0x5b
   315fe:	425b      	negs	r3, r3
   31600:	e0e0      	b.n	317c4 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   31602:	68fb      	ldr	r3, [r7, #12]
   31604:	22d4      	movs	r2, #212	; 0xd4
   31606:	589b      	ldr	r3, [r3, r2]
   31608:	2b00      	cmp	r3, #0
   3160a:	d005      	beq.n	31618 <http_client_send_request+0x114>
		free(module->req.ext_header);
   3160c:	68fb      	ldr	r3, [r7, #12]
   3160e:	22d4      	movs	r2, #212	; 0xd4
   31610:	589b      	ldr	r3, [r3, r2]
   31612:	0018      	movs	r0, r3
   31614:	4b71      	ldr	r3, [pc, #452]	; (317dc <http_client_send_request+0x2d8>)
   31616:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   31618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   3161a:	2b00      	cmp	r3, #0
   3161c:	d010      	beq.n	31640 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   3161e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31620:	0018      	movs	r0, r3
   31622:	4b6f      	ldr	r3, [pc, #444]	; (317e0 <http_client_send_request+0x2dc>)
   31624:	4798      	blx	r3
   31626:	0003      	movs	r3, r0
   31628:	0019      	movs	r1, r3
   3162a:	68fb      	ldr	r3, [r7, #12]
   3162c:	22d4      	movs	r2, #212	; 0xd4
   3162e:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   31630:	68fb      	ldr	r3, [r7, #12]
   31632:	22d4      	movs	r2, #212	; 0xd4
   31634:	589b      	ldr	r3, [r3, r2]
   31636:	2b00      	cmp	r3, #0
   31638:	d106      	bne.n	31648 <http_client_send_request+0x144>
			return -ENOMEM;
   3163a:	230c      	movs	r3, #12
   3163c:	425b      	negs	r3, r3
   3163e:	e0c1      	b.n	317c4 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   31640:	68fb      	ldr	r3, [r7, #12]
   31642:	22d4      	movs	r2, #212	; 0xd4
   31644:	2100      	movs	r1, #0
   31646:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   31648:	68fb      	ldr	r3, [r7, #12]
   3164a:	2241      	movs	r2, #65	; 0x41
   3164c:	5c99      	ldrb	r1, [r3, r2]
   3164e:	2001      	movs	r0, #1
   31650:	4381      	bics	r1, r0
   31652:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   31654:	68fb      	ldr	r3, [r7, #12]
   31656:	2200      	movs	r2, #0
   31658:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   3165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3165c:	781b      	ldrb	r3, [r3, #0]
   3165e:	2b2f      	cmp	r3, #47	; 0x2f
   31660:	d107      	bne.n	31672 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   31662:	68fb      	ldr	r3, [r7, #12]
   31664:	3370      	adds	r3, #112	; 0x70
   31666:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31668:	0011      	movs	r1, r2
   3166a:	0018      	movs	r0, r3
   3166c:	4b5d      	ldr	r3, [pc, #372]	; (317e4 <http_client_send_request+0x2e0>)
   3166e:	4798      	blx	r3
   31670:	e00f      	b.n	31692 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   31672:	68fb      	ldr	r3, [r7, #12]
   31674:	2270      	movs	r2, #112	; 0x70
   31676:	212f      	movs	r1, #47	; 0x2f
   31678:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   3167a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3167c:	781b      	ldrb	r3, [r3, #0]
   3167e:	2b00      	cmp	r3, #0
   31680:	d007      	beq.n	31692 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   31682:	68fb      	ldr	r3, [r7, #12]
   31684:	3370      	adds	r3, #112	; 0x70
   31686:	3301      	adds	r3, #1
   31688:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3168a:	0011      	movs	r1, r2
   3168c:	0018      	movs	r0, r3
   3168e:	4b55      	ldr	r3, [pc, #340]	; (317e4 <http_client_send_request+0x2e0>)
   31690:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   31692:	683b      	ldr	r3, [r7, #0]
   31694:	2b00      	cmp	r3, #0
   31696:	d007      	beq.n	316a8 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   31698:	68fb      	ldr	r3, [r7, #12]
   3169a:	33b0      	adds	r3, #176	; 0xb0
   3169c:	6839      	ldr	r1, [r7, #0]
   3169e:	2218      	movs	r2, #24
   316a0:	0018      	movs	r0, r3
   316a2:	4b51      	ldr	r3, [pc, #324]	; (317e8 <http_client_send_request+0x2e4>)
   316a4:	4798      	blx	r3
   316a6:	e006      	b.n	316b6 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   316a8:	68fb      	ldr	r3, [r7, #12]
   316aa:	33b0      	adds	r3, #176	; 0xb0
   316ac:	2218      	movs	r2, #24
   316ae:	2100      	movs	r1, #0
   316b0:	0018      	movs	r0, r3
   316b2:	4b4e      	ldr	r3, [pc, #312]	; (317ec <http_client_send_request+0x2e8>)
   316b4:	4798      	blx	r3
	}

	module->req.method = method;
   316b6:	68fb      	ldr	r3, [r7, #12]
   316b8:	1dfa      	adds	r2, r7, #7
   316ba:	21c8      	movs	r1, #200	; 0xc8
   316bc:	7812      	ldrb	r2, [r2, #0]
   316be:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   316c0:	68fb      	ldr	r3, [r7, #12]
   316c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   316c4:	2b01      	cmp	r3, #1
   316c6:	d003      	beq.n	316d0 <http_client_send_request+0x1cc>
   316c8:	d316      	bcc.n	316f8 <http_client_send_request+0x1f4>
   316ca:	2b02      	cmp	r3, #2
   316cc:	d004      	beq.n	316d8 <http_client_send_request+0x1d4>
   316ce:	e074      	b.n	317ba <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   316d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   316d2:	2b00      	cmp	r3, #0
   316d4:	d100      	bne.n	316d8 <http_client_send_request+0x1d4>
   316d6:	e073      	b.n	317c0 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   316d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   316da:	2b00      	cmp	r3, #0
   316dc:	d107      	bne.n	316ee <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   316de:	68fb      	ldr	r3, [r7, #12]
   316e0:	2203      	movs	r2, #3
   316e2:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   316e4:	68fb      	ldr	r3, [r7, #12]
   316e6:	0018      	movs	r0, r3
   316e8:	4b41      	ldr	r3, [pc, #260]	; (317f0 <http_client_send_request+0x2ec>)
   316ea:	4798      	blx	r3
			break;
   316ec:	e069      	b.n	317c2 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   316ee:	68fb      	ldr	r3, [r7, #12]
   316f0:	2100      	movs	r1, #0
   316f2:	0018      	movs	r0, r3
   316f4:	4b3f      	ldr	r3, [pc, #252]	; (317f4 <http_client_send_request+0x2f0>)
   316f6:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   316f8:	68fb      	ldr	r3, [r7, #12]
   316fa:	2252      	movs	r2, #82	; 0x52
   316fc:	5c9b      	ldrb	r3, [r3, r2]
   316fe:	2b00      	cmp	r3, #0
   31700:	d007      	beq.n	31712 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   31702:	2337      	movs	r3, #55	; 0x37
   31704:	18fb      	adds	r3, r7, r3
   31706:	2237      	movs	r2, #55	; 0x37
   31708:	18ba      	adds	r2, r7, r2
   3170a:	7812      	ldrb	r2, [r2, #0]
   3170c:	2101      	movs	r1, #1
   3170e:	430a      	orrs	r2, r1
   31710:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   31712:	2337      	movs	r3, #55	; 0x37
   31714:	18fb      	adds	r3, r7, r3
   31716:	781b      	ldrb	r3, [r3, #0]
   31718:	001a      	movs	r2, r3
   3171a:	2101      	movs	r1, #1
   3171c:	2002      	movs	r0, #2
   3171e:	4b36      	ldr	r3, [pc, #216]	; (317f8 <http_client_send_request+0x2f4>)
   31720:	4798      	blx	r3
   31722:	0003      	movs	r3, r0
   31724:	001a      	movs	r2, r3
   31726:	68fb      	ldr	r3, [r7, #12]
   31728:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   3172a:	68fb      	ldr	r3, [r7, #12]
   3172c:	781b      	ldrb	r3, [r3, #0]
   3172e:	b25b      	sxtb	r3, r3
   31730:	2b00      	cmp	r3, #0
   31732:	db3f      	blt.n	317b4 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   31734:	68fb      	ldr	r3, [r7, #12]
   31736:	781b      	ldrb	r3, [r3, #0]
   31738:	b25b      	sxtb	r3, r3
   3173a:	001a      	movs	r2, r3
   3173c:	4b2f      	ldr	r3, [pc, #188]	; (317fc <http_client_send_request+0x2f8>)
   3173e:	0092      	lsls	r2, r2, #2
   31740:	68f9      	ldr	r1, [r7, #12]
   31742:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   31744:	68fb      	ldr	r3, [r7, #12]
   31746:	3301      	adds	r3, #1
   31748:	0018      	movs	r0, r3
   3174a:	4b2d      	ldr	r3, [pc, #180]	; (31800 <http_client_send_request+0x2fc>)
   3174c:	4798      	blx	r3
   3174e:	1e03      	subs	r3, r0, #0
   31750:	d027      	beq.n	317a2 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   31752:	2314      	movs	r3, #20
   31754:	18fb      	adds	r3, r7, r3
   31756:	2202      	movs	r2, #2
   31758:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   3175a:	68fb      	ldr	r3, [r7, #12]
   3175c:	2250      	movs	r2, #80	; 0x50
   3175e:	5a9b      	ldrh	r3, [r3, r2]
   31760:	021b      	lsls	r3, r3, #8
   31762:	b21a      	sxth	r2, r3
   31764:	68fb      	ldr	r3, [r7, #12]
   31766:	2150      	movs	r1, #80	; 0x50
   31768:	5a5b      	ldrh	r3, [r3, r1]
   3176a:	0a1b      	lsrs	r3, r3, #8
   3176c:	b29b      	uxth	r3, r3
   3176e:	b21b      	sxth	r3, r3
   31770:	4313      	orrs	r3, r2
   31772:	b21b      	sxth	r3, r3
   31774:	b29a      	uxth	r2, r3
   31776:	2314      	movs	r3, #20
   31778:	18fb      	adds	r3, r7, r3
   3177a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   3177c:	68fb      	ldr	r3, [r7, #12]
   3177e:	3301      	adds	r3, #1
   31780:	0018      	movs	r0, r3
   31782:	4b20      	ldr	r3, [pc, #128]	; (31804 <http_client_send_request+0x300>)
   31784:	4798      	blx	r3
   31786:	0002      	movs	r2, r0
   31788:	2314      	movs	r3, #20
   3178a:	18fb      	adds	r3, r7, r3
   3178c:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   3178e:	68fb      	ldr	r3, [r7, #12]
   31790:	781b      	ldrb	r3, [r3, #0]
   31792:	b25b      	sxtb	r3, r3
   31794:	2214      	movs	r2, #20
   31796:	18b9      	adds	r1, r7, r2
   31798:	2210      	movs	r2, #16
   3179a:	0018      	movs	r0, r3
   3179c:	4b1a      	ldr	r3, [pc, #104]	; (31808 <http_client_send_request+0x304>)
   3179e:	4798      	blx	r3
   317a0:	e004      	b.n	317ac <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   317a2:	68fb      	ldr	r3, [r7, #12]
   317a4:	3301      	adds	r3, #1
   317a6:	0018      	movs	r0, r3
   317a8:	4b18      	ldr	r3, [pc, #96]	; (3180c <http_client_send_request+0x308>)
   317aa:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   317ac:	68fb      	ldr	r3, [r7, #12]
   317ae:	2201      	movs	r2, #1
   317b0:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   317b2:	e006      	b.n	317c2 <http_client_send_request+0x2be>
			return -ENOSPC;
   317b4:	231c      	movs	r3, #28
   317b6:	425b      	negs	r3, r3
   317b8:	e004      	b.n	317c4 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   317ba:	230b      	movs	r3, #11
   317bc:	425b      	negs	r3, r3
   317be:	e001      	b.n	317c4 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   317c0:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   317c2:	2300      	movs	r3, #0
}
   317c4:	0018      	movs	r0, r3
   317c6:	46bd      	mov	sp, r7
   317c8:	b00e      	add	sp, #56	; 0x38
   317ca:	bdb0      	pop	{r4, r5, r7, pc}
   317cc:	0003a4b4 	.word	0x0003a4b4
   317d0:	00035329 	.word	0x00035329
   317d4:	0003a4bc 	.word	0x0003a4bc
   317d8:	0003531b 	.word	0x0003531b
   317dc:	00034f19 	.word	0x00034f19
   317e0:	000352e1 	.word	0x000352e1
   317e4:	000352cf 	.word	0x000352cf
   317e8:	00034f2d 	.word	0x00034f2d
   317ec:	00034f63 	.word	0x00034f63
   317f0:	00031965 	.word	0x00031965
   317f4:	00031811 	.word	0x00031811
   317f8:	00025b21 	.word	0x00025b21
   317fc:	200046f4 	.word	0x200046f4
   31800:	0003146d 	.word	0x0003146d
   31804:	0002626d 	.word	0x0002626d
   31808:	00025d35 	.word	0x00025d35
   3180c:	00026375 	.word	0x00026375

00031810 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   31810:	b580      	push	{r7, lr}
   31812:	b086      	sub	sp, #24
   31814:	af00      	add	r7, sp, #0
   31816:	6078      	str	r0, [r7, #4]
   31818:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   3181a:	687b      	ldr	r3, [r7, #4]
   3181c:	22c0      	movs	r2, #192	; 0xc0
   3181e:	589b      	ldr	r3, [r3, r2]
   31820:	2b00      	cmp	r3, #0
   31822:	d007      	beq.n	31834 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   31824:	687b      	ldr	r3, [r7, #4]
   31826:	22c0      	movs	r2, #192	; 0xc0
   31828:	589b      	ldr	r3, [r3, r2]
   3182a:	687a      	ldr	r2, [r7, #4]
   3182c:	21c4      	movs	r1, #196	; 0xc4
   3182e:	5852      	ldr	r2, [r2, r1]
   31830:	0010      	movs	r0, r2
   31832:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   31834:	687b      	ldr	r3, [r7, #4]
   31836:	33b0      	adds	r3, #176	; 0xb0
   31838:	2218      	movs	r2, #24
   3183a:	2100      	movs	r1, #0
   3183c:	0018      	movs	r0, r3
   3183e:	4b24      	ldr	r3, [pc, #144]	; (318d0 <_http_client_clear_conn+0xc0>)
   31840:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   31842:	687b      	ldr	r3, [r7, #4]
   31844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31846:	2b00      	cmp	r3, #0
   31848:	d005      	beq.n	31856 <_http_client_clear_conn+0x46>
		close(module->sock);
   3184a:	687b      	ldr	r3, [r7, #4]
   3184c:	781b      	ldrb	r3, [r3, #0]
   3184e:	b25b      	sxtb	r3, r3
   31850:	0018      	movs	r0, r3
   31852:	4b20      	ldr	r3, [pc, #128]	; (318d4 <_http_client_clear_conn+0xc4>)
   31854:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   31856:	687b      	ldr	r3, [r7, #4]
   31858:	781b      	ldrb	r3, [r3, #0]
   3185a:	b25b      	sxtb	r3, r3
   3185c:	001a      	movs	r2, r3
   3185e:	4b1e      	ldr	r3, [pc, #120]	; (318d8 <_http_client_clear_conn+0xc8>)
   31860:	0092      	lsls	r2, r2, #2
   31862:	2100      	movs	r1, #0
   31864:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   31866:	687b      	ldr	r3, [r7, #4]
   31868:	336c      	adds	r3, #108	; 0x6c
   3186a:	226c      	movs	r2, #108	; 0x6c
   3186c:	2100      	movs	r1, #0
   3186e:	0018      	movs	r0, r3
   31870:	4b17      	ldr	r3, [pc, #92]	; (318d0 <_http_client_clear_conn+0xc0>)
   31872:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   31874:	687b      	ldr	r3, [r7, #4]
   31876:	33d8      	adds	r3, #216	; 0xd8
   31878:	2210      	movs	r2, #16
   3187a:	2100      	movs	r1, #0
   3187c:	0018      	movs	r0, r3
   3187e:	4b14      	ldr	r3, [pc, #80]	; (318d0 <_http_client_clear_conn+0xc0>)
   31880:	4798      	blx	r3
	module->req.state = STATE_INIT;
   31882:	687b      	ldr	r3, [r7, #4]
   31884:	2200      	movs	r2, #0
   31886:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   31888:	687b      	ldr	r3, [r7, #4]
   3188a:	22d8      	movs	r2, #216	; 0xd8
   3188c:	2100      	movs	r1, #0
   3188e:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   31890:	687b      	ldr	r3, [r7, #4]
   31892:	2241      	movs	r2, #65	; 0x41
   31894:	5c99      	ldrb	r1, [r3, r2]
   31896:	2001      	movs	r0, #1
   31898:	4381      	bics	r1, r0
   3189a:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   3189c:	687b      	ldr	r3, [r7, #4]
   3189e:	2241      	movs	r2, #65	; 0x41
   318a0:	5c99      	ldrb	r1, [r3, r2]
   318a2:	2002      	movs	r0, #2
   318a4:	4381      	bics	r1, r0
   318a6:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   318a8:	230c      	movs	r3, #12
   318aa:	18fb      	adds	r3, r7, r3
   318ac:	683a      	ldr	r2, [r7, #0]
   318ae:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   318b0:	687b      	ldr	r3, [r7, #4]
   318b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   318b4:	2b00      	cmp	r3, #0
   318b6:	d006      	beq.n	318c6 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   318b8:	687b      	ldr	r3, [r7, #4]
   318ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   318bc:	220c      	movs	r2, #12
   318be:	18ba      	adds	r2, r7, r2
   318c0:	6878      	ldr	r0, [r7, #4]
   318c2:	2104      	movs	r1, #4
   318c4:	4798      	blx	r3
	}
}
   318c6:	46c0      	nop			; (mov r8, r8)
   318c8:	46bd      	mov	sp, r7
   318ca:	b006      	add	sp, #24
   318cc:	bd80      	pop	{r7, pc}
   318ce:	46c0      	nop			; (mov r8, r8)
   318d0:	00034f63 	.word	0x00034f63
   318d4:	0002612d 	.word	0x0002612d
   318d8:	200046f4 	.word	0x200046f4

000318dc <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   318dc:	b590      	push	{r4, r7, lr}
   318de:	b087      	sub	sp, #28
   318e0:	af00      	add	r7, sp, #0
   318e2:	60f8      	str	r0, [r7, #12]
   318e4:	60b9      	str	r1, [r7, #8]
   318e6:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   318e8:	68fb      	ldr	r3, [r7, #12]
   318ea:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   318ec:	697b      	ldr	r3, [r7, #20]
   318ee:	2241      	movs	r2, #65	; 0x41
   318f0:	5c99      	ldrb	r1, [r3, r2]
   318f2:	2001      	movs	r0, #1
   318f4:	4301      	orrs	r1, r0
   318f6:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   318f8:	697b      	ldr	r3, [r7, #20]
   318fa:	2000      	movs	r0, #0
   318fc:	5618      	ldrsb	r0, [r3, r0]
   318fe:	687b      	ldr	r3, [r7, #4]
   31900:	b29a      	uxth	r2, r3
   31902:	68b9      	ldr	r1, [r7, #8]
   31904:	2300      	movs	r3, #0
   31906:	4c14      	ldr	r4, [pc, #80]	; (31958 <_http_client_send_wait+0x7c>)
   31908:	47a0      	blx	r4
   3190a:	0003      	movs	r3, r0
   3190c:	613b      	str	r3, [r7, #16]
   3190e:	693b      	ldr	r3, [r7, #16]
   31910:	2b00      	cmp	r3, #0
   31912:	da0f      	bge.n	31934 <_http_client_send_wait+0x58>
		module->sending = 0;
   31914:	697b      	ldr	r3, [r7, #20]
   31916:	2241      	movs	r2, #65	; 0x41
   31918:	5c99      	ldrb	r1, [r3, r2]
   3191a:	2001      	movs	r0, #1
   3191c:	4381      	bics	r1, r0
   3191e:	5499      	strb	r1, [r3, r2]
		return result;
   31920:	693b      	ldr	r3, [r7, #16]
   31922:	e014      	b.n	3194e <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   31924:	2000      	movs	r0, #0
   31926:	4b0d      	ldr	r3, [pc, #52]	; (3195c <_http_client_send_wait+0x80>)
   31928:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   3192a:	697b      	ldr	r3, [r7, #20]
   3192c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   3192e:	0018      	movs	r0, r3
   31930:	4b0b      	ldr	r3, [pc, #44]	; (31960 <_http_client_send_wait+0x84>)
   31932:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   31934:	697b      	ldr	r3, [r7, #20]
   31936:	2241      	movs	r2, #65	; 0x41
   31938:	5c9b      	ldrb	r3, [r3, r2]
   3193a:	2201      	movs	r2, #1
   3193c:	4013      	ands	r3, r2
   3193e:	b2db      	uxtb	r3, r3
   31940:	2b00      	cmp	r3, #0
   31942:	d003      	beq.n	3194c <_http_client_send_wait+0x70>
   31944:	697b      	ldr	r3, [r7, #20]
   31946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31948:	2b02      	cmp	r3, #2
   3194a:	d8eb      	bhi.n	31924 <_http_client_send_wait+0x48>
	}

	return 0;
   3194c:	2300      	movs	r3, #0
}
   3194e:	0018      	movs	r0, r3
   31950:	46bd      	mov	sp, r7
   31952:	b007      	add	sp, #28
   31954:	bd90      	pop	{r4, r7, pc}
   31956:	46c0      	nop			; (mov r8, r8)
   31958:	00025e49 	.word	0x00025e49
   3195c:	000224f5 	.word	0x000224f5
   31960:	00032be9 	.word	0x00032be9

00031964 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   31964:	b5f0      	push	{r4, r5, r6, r7, lr}
   31966:	46c6      	mov	lr, r8
   31968:	b500      	push	{lr}
   3196a:	b0a0      	sub	sp, #128	; 0x80
   3196c:	af02      	add	r7, sp, #8
   3196e:	61f8      	str	r0, [r7, #28]
   31970:	4668      	mov	r0, sp
   31972:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   31974:	2318      	movs	r3, #24
   31976:	2218      	movs	r2, #24
   31978:	18ba      	adds	r2, r7, r2
   3197a:	18d0      	adds	r0, r2, r3
   3197c:	4bbd      	ldr	r3, [pc, #756]	; (31c74 <_http_client_request+0x310>)
   3197e:	469c      	mov	ip, r3
   31980:	4663      	mov	r3, ip
   31982:	cb16      	ldmia	r3!, {r1, r2, r4}
   31984:	c016      	stmia	r0!, {r1, r2, r4}
   31986:	469c      	mov	ip, r3
   31988:	4663      	mov	r3, ip
   3198a:	681b      	ldr	r3, [r3, #0]
   3198c:	469c      	mov	ip, r3
   3198e:	4663      	mov	r3, ip
   31990:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   31992:	69f8      	ldr	r0, [r7, #28]
   31994:	6e40      	ldr	r0, [r0, #100]	; 0x64
   31996:	4684      	mov	ip, r0
   31998:	2301      	movs	r3, #1
   3199a:	425b      	negs	r3, r3
   3199c:	4698      	mov	r8, r3
   3199e:	44c4      	add	ip, r8
   319a0:	4663      	mov	r3, ip
   319a2:	66fb      	str	r3, [r7, #108]	; 0x6c
   319a4:	6038      	str	r0, [r7, #0]
   319a6:	2300      	movs	r3, #0
   319a8:	607b      	str	r3, [r7, #4]
   319aa:	6839      	ldr	r1, [r7, #0]
   319ac:	687a      	ldr	r2, [r7, #4]
   319ae:	000b      	movs	r3, r1
   319b0:	0f5b      	lsrs	r3, r3, #29
   319b2:	469c      	mov	ip, r3
   319b4:	0013      	movs	r3, r2
   319b6:	00db      	lsls	r3, r3, #3
   319b8:	617b      	str	r3, [r7, #20]
   319ba:	4663      	mov	r3, ip
   319bc:	697c      	ldr	r4, [r7, #20]
   319be:	431c      	orrs	r4, r3
   319c0:	617c      	str	r4, [r7, #20]
   319c2:	000b      	movs	r3, r1
   319c4:	00db      	lsls	r3, r3, #3
   319c6:	613b      	str	r3, [r7, #16]
   319c8:	0005      	movs	r5, r0
   319ca:	2200      	movs	r2, #0
   319cc:	0016      	movs	r6, r2
   319ce:	0f6a      	lsrs	r2, r5, #29
   319d0:	00f3      	lsls	r3, r6, #3
   319d2:	60fb      	str	r3, [r7, #12]
   319d4:	68fb      	ldr	r3, [r7, #12]
   319d6:	4313      	orrs	r3, r2
   319d8:	60fb      	str	r3, [r7, #12]
   319da:	00eb      	lsls	r3, r5, #3
   319dc:	60bb      	str	r3, [r7, #8]
   319de:	1dc3      	adds	r3, r0, #7
   319e0:	08db      	lsrs	r3, r3, #3
   319e2:	00db      	lsls	r3, r3, #3
   319e4:	466a      	mov	r2, sp
   319e6:	1ad3      	subs	r3, r2, r3
   319e8:	469d      	mov	sp, r3
   319ea:	ab02      	add	r3, sp, #8
   319ec:	3300      	adds	r3, #0
   319ee:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   319f0:	69fb      	ldr	r3, [r7, #28]
   319f2:	2b00      	cmp	r3, #0
   319f4:	d100      	bne.n	319f8 <_http_client_request+0x94>
   319f6:	e346      	b.n	32086 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   319f8:	69fb      	ldr	r3, [r7, #28]
   319fa:	2241      	movs	r2, #65	; 0x41
   319fc:	5c9b      	ldrb	r3, [r3, r2]
   319fe:	2201      	movs	r2, #1
   31a00:	4013      	ands	r3, r2
   31a02:	b2db      	uxtb	r3, r3
   31a04:	2b00      	cmp	r3, #0
   31a06:	d000      	beq.n	31a0a <_http_client_request+0xa6>
   31a08:	e33f      	b.n	3208a <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   31a0a:	69fb      	ldr	r3, [r7, #28]
   31a0c:	33b0      	adds	r3, #176	; 0xb0
   31a0e:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   31a10:	69fb      	ldr	r3, [r7, #28]
   31a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31a14:	2b03      	cmp	r3, #3
   31a16:	d003      	beq.n	31a20 <_http_client_request+0xbc>
   31a18:	2b04      	cmp	r3, #4
   31a1a:	d100      	bne.n	31a1e <_http_client_request+0xba>
   31a1c:	e1b3      	b.n	31d86 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   31a1e:	e32f      	b.n	32080 <_http_client_request+0x71c>
		module->req.content_length = 0;
   31a20:	69fb      	ldr	r3, [r7, #28]
   31a22:	22cc      	movs	r2, #204	; 0xcc
   31a24:	2100      	movs	r1, #0
   31a26:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   31a28:	69fb      	ldr	r3, [r7, #28]
   31a2a:	22d0      	movs	r2, #208	; 0xd0
   31a2c:	2100      	movs	r1, #0
   31a2e:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   31a30:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31a32:	69fb      	ldr	r3, [r7, #28]
   31a34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   31a36:	4c90      	ldr	r4, [pc, #576]	; (31c78 <_http_client_request+0x314>)
   31a38:	2334      	movs	r3, #52	; 0x34
   31a3a:	2018      	movs	r0, #24
   31a3c:	1838      	adds	r0, r7, r0
   31a3e:	18c0      	adds	r0, r0, r3
   31a40:	69fb      	ldr	r3, [r7, #28]
   31a42:	9300      	str	r3, [sp, #0]
   31a44:	0023      	movs	r3, r4
   31a46:	4c8d      	ldr	r4, [pc, #564]	; (31c7c <_http_client_request+0x318>)
   31a48:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   31a4a:	69fb      	ldr	r3, [r7, #28]
   31a4c:	22c8      	movs	r2, #200	; 0xc8
   31a4e:	5c9b      	ldrb	r3, [r3, r2]
   31a50:	2b01      	cmp	r3, #1
   31a52:	d10a      	bne.n	31a6a <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   31a54:	498a      	ldr	r1, [pc, #552]	; (31c80 <_http_client_request+0x31c>)
   31a56:	2334      	movs	r3, #52	; 0x34
   31a58:	2218      	movs	r2, #24
   31a5a:	4694      	mov	ip, r2
   31a5c:	44bc      	add	ip, r7
   31a5e:	4463      	add	r3, ip
   31a60:	2204      	movs	r2, #4
   31a62:	0018      	movs	r0, r3
   31a64:	4b87      	ldr	r3, [pc, #540]	; (31c84 <_http_client_request+0x320>)
   31a66:	4798      	blx	r3
   31a68:	e04e      	b.n	31b08 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   31a6a:	69fb      	ldr	r3, [r7, #28]
   31a6c:	22c8      	movs	r2, #200	; 0xc8
   31a6e:	5c9b      	ldrb	r3, [r3, r2]
   31a70:	2b02      	cmp	r3, #2
   31a72:	d10a      	bne.n	31a8a <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   31a74:	4984      	ldr	r1, [pc, #528]	; (31c88 <_http_client_request+0x324>)
   31a76:	2334      	movs	r3, #52	; 0x34
   31a78:	2218      	movs	r2, #24
   31a7a:	4694      	mov	ip, r2
   31a7c:	44bc      	add	ip, r7
   31a7e:	4463      	add	r3, ip
   31a80:	2205      	movs	r2, #5
   31a82:	0018      	movs	r0, r3
   31a84:	4b7f      	ldr	r3, [pc, #508]	; (31c84 <_http_client_request+0x320>)
   31a86:	4798      	blx	r3
   31a88:	e03e      	b.n	31b08 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   31a8a:	69fb      	ldr	r3, [r7, #28]
   31a8c:	22c8      	movs	r2, #200	; 0xc8
   31a8e:	5c9b      	ldrb	r3, [r3, r2]
   31a90:	2b03      	cmp	r3, #3
   31a92:	d10a      	bne.n	31aaa <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   31a94:	497d      	ldr	r1, [pc, #500]	; (31c8c <_http_client_request+0x328>)
   31a96:	2334      	movs	r3, #52	; 0x34
   31a98:	2218      	movs	r2, #24
   31a9a:	4694      	mov	ip, r2
   31a9c:	44bc      	add	ip, r7
   31a9e:	4463      	add	r3, ip
   31aa0:	2207      	movs	r2, #7
   31aa2:	0018      	movs	r0, r3
   31aa4:	4b77      	ldr	r3, [pc, #476]	; (31c84 <_http_client_request+0x320>)
   31aa6:	4798      	blx	r3
   31aa8:	e02e      	b.n	31b08 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   31aaa:	69fb      	ldr	r3, [r7, #28]
   31aac:	22c8      	movs	r2, #200	; 0xc8
   31aae:	5c9b      	ldrb	r3, [r3, r2]
   31ab0:	2b04      	cmp	r3, #4
   31ab2:	d10a      	bne.n	31aca <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   31ab4:	4976      	ldr	r1, [pc, #472]	; (31c90 <_http_client_request+0x32c>)
   31ab6:	2334      	movs	r3, #52	; 0x34
   31ab8:	2218      	movs	r2, #24
   31aba:	4694      	mov	ip, r2
   31abc:	44bc      	add	ip, r7
   31abe:	4463      	add	r3, ip
   31ac0:	2204      	movs	r2, #4
   31ac2:	0018      	movs	r0, r3
   31ac4:	4b6f      	ldr	r3, [pc, #444]	; (31c84 <_http_client_request+0x320>)
   31ac6:	4798      	blx	r3
   31ac8:	e01e      	b.n	31b08 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   31aca:	69fb      	ldr	r3, [r7, #28]
   31acc:	22c8      	movs	r2, #200	; 0xc8
   31ace:	5c9b      	ldrb	r3, [r3, r2]
   31ad0:	2b05      	cmp	r3, #5
   31ad2:	d10a      	bne.n	31aea <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   31ad4:	496f      	ldr	r1, [pc, #444]	; (31c94 <_http_client_request+0x330>)
   31ad6:	2334      	movs	r3, #52	; 0x34
   31ad8:	2218      	movs	r2, #24
   31ada:	4694      	mov	ip, r2
   31adc:	44bc      	add	ip, r7
   31ade:	4463      	add	r3, ip
   31ae0:	2208      	movs	r2, #8
   31ae2:	0018      	movs	r0, r3
   31ae4:	4b67      	ldr	r3, [pc, #412]	; (31c84 <_http_client_request+0x320>)
   31ae6:	4798      	blx	r3
   31ae8:	e00e      	b.n	31b08 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   31aea:	69fb      	ldr	r3, [r7, #28]
   31aec:	22c8      	movs	r2, #200	; 0xc8
   31aee:	5c9b      	ldrb	r3, [r3, r2]
   31af0:	2b06      	cmp	r3, #6
   31af2:	d109      	bne.n	31b08 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   31af4:	4968      	ldr	r1, [pc, #416]	; (31c98 <_http_client_request+0x334>)
   31af6:	2334      	movs	r3, #52	; 0x34
   31af8:	2218      	movs	r2, #24
   31afa:	4694      	mov	ip, r2
   31afc:	44bc      	add	ip, r7
   31afe:	4463      	add	r3, ip
   31b00:	2205      	movs	r2, #5
   31b02:	0018      	movs	r0, r3
   31b04:	4b5f      	ldr	r3, [pc, #380]	; (31c84 <_http_client_request+0x320>)
   31b06:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   31b08:	69fb      	ldr	r3, [r7, #28]
   31b0a:	3370      	adds	r3, #112	; 0x70
   31b0c:	001c      	movs	r4, r3
   31b0e:	69fb      	ldr	r3, [r7, #28]
   31b10:	3370      	adds	r3, #112	; 0x70
   31b12:	0018      	movs	r0, r3
   31b14:	4b61      	ldr	r3, [pc, #388]	; (31c9c <_http_client_request+0x338>)
   31b16:	4798      	blx	r3
   31b18:	0002      	movs	r2, r0
   31b1a:	2334      	movs	r3, #52	; 0x34
   31b1c:	2118      	movs	r1, #24
   31b1e:	468c      	mov	ip, r1
   31b20:	44bc      	add	ip, r7
   31b22:	4463      	add	r3, ip
   31b24:	0021      	movs	r1, r4
   31b26:	0018      	movs	r0, r3
   31b28:	4b56      	ldr	r3, [pc, #344]	; (31c84 <_http_client_request+0x320>)
   31b2a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   31b2c:	495c      	ldr	r1, [pc, #368]	; (31ca0 <_http_client_request+0x33c>)
   31b2e:	2334      	movs	r3, #52	; 0x34
   31b30:	2218      	movs	r2, #24
   31b32:	4694      	mov	ip, r2
   31b34:	44bc      	add	ip, r7
   31b36:	4463      	add	r3, ip
   31b38:	220b      	movs	r2, #11
   31b3a:	0018      	movs	r0, r3
   31b3c:	4b51      	ldr	r3, [pc, #324]	; (31c84 <_http_client_request+0x320>)
   31b3e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   31b40:	4958      	ldr	r1, [pc, #352]	; (31ca4 <_http_client_request+0x340>)
   31b42:	2334      	movs	r3, #52	; 0x34
   31b44:	2218      	movs	r2, #24
   31b46:	4694      	mov	ip, r2
   31b48:	44bc      	add	ip, r7
   31b4a:	4463      	add	r3, ip
   31b4c:	220c      	movs	r2, #12
   31b4e:	0018      	movs	r0, r3
   31b50:	4b4c      	ldr	r3, [pc, #304]	; (31c84 <_http_client_request+0x320>)
   31b52:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   31b54:	69fb      	ldr	r3, [r7, #28]
   31b56:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   31b58:	69fb      	ldr	r3, [r7, #28]
   31b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   31b5c:	0018      	movs	r0, r3
   31b5e:	4b4f      	ldr	r3, [pc, #316]	; (31c9c <_http_client_request+0x338>)
   31b60:	4798      	blx	r3
   31b62:	0002      	movs	r2, r0
   31b64:	2334      	movs	r3, #52	; 0x34
   31b66:	2118      	movs	r1, #24
   31b68:	468c      	mov	ip, r1
   31b6a:	44bc      	add	ip, r7
   31b6c:	4463      	add	r3, ip
   31b6e:	0021      	movs	r1, r4
   31b70:	0018      	movs	r0, r3
   31b72:	4b44      	ldr	r3, [pc, #272]	; (31c84 <_http_client_request+0x320>)
   31b74:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31b76:	494c      	ldr	r1, [pc, #304]	; (31ca8 <_http_client_request+0x344>)
   31b78:	2334      	movs	r3, #52	; 0x34
   31b7a:	2218      	movs	r2, #24
   31b7c:	4694      	mov	ip, r2
   31b7e:	44bc      	add	ip, r7
   31b80:	4463      	add	r3, ip
   31b82:	2202      	movs	r2, #2
   31b84:	0018      	movs	r0, r3
   31b86:	4b3f      	ldr	r3, [pc, #252]	; (31c84 <_http_client_request+0x320>)
   31b88:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   31b8a:	4948      	ldr	r1, [pc, #288]	; (31cac <_http_client_request+0x348>)
   31b8c:	2334      	movs	r3, #52	; 0x34
   31b8e:	2218      	movs	r2, #24
   31b90:	4694      	mov	ip, r2
   31b92:	44bc      	add	ip, r7
   31b94:	4463      	add	r3, ip
   31b96:	2206      	movs	r2, #6
   31b98:	0018      	movs	r0, r3
   31b9a:	4b3a      	ldr	r3, [pc, #232]	; (31c84 <_http_client_request+0x320>)
   31b9c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   31b9e:	69fb      	ldr	r3, [r7, #28]
   31ba0:	1c5c      	adds	r4, r3, #1
   31ba2:	69fb      	ldr	r3, [r7, #28]
   31ba4:	3301      	adds	r3, #1
   31ba6:	0018      	movs	r0, r3
   31ba8:	4b3c      	ldr	r3, [pc, #240]	; (31c9c <_http_client_request+0x338>)
   31baa:	4798      	blx	r3
   31bac:	0002      	movs	r2, r0
   31bae:	2334      	movs	r3, #52	; 0x34
   31bb0:	2118      	movs	r1, #24
   31bb2:	468c      	mov	ip, r1
   31bb4:	44bc      	add	ip, r7
   31bb6:	4463      	add	r3, ip
   31bb8:	0021      	movs	r1, r4
   31bba:	0018      	movs	r0, r3
   31bbc:	4b31      	ldr	r3, [pc, #196]	; (31c84 <_http_client_request+0x320>)
   31bbe:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31bc0:	4939      	ldr	r1, [pc, #228]	; (31ca8 <_http_client_request+0x344>)
   31bc2:	2334      	movs	r3, #52	; 0x34
   31bc4:	2218      	movs	r2, #24
   31bc6:	4694      	mov	ip, r2
   31bc8:	44bc      	add	ip, r7
   31bca:	4463      	add	r3, ip
   31bcc:	2202      	movs	r2, #2
   31bce:	0018      	movs	r0, r3
   31bd0:	4b2c      	ldr	r3, [pc, #176]	; (31c84 <_http_client_request+0x320>)
   31bd2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   31bd4:	4936      	ldr	r1, [pc, #216]	; (31cb0 <_http_client_request+0x34c>)
   31bd6:	2334      	movs	r3, #52	; 0x34
   31bd8:	2218      	movs	r2, #24
   31bda:	4694      	mov	ip, r2
   31bdc:	44bc      	add	ip, r7
   31bde:	4463      	add	r3, ip
   31be0:	2218      	movs	r2, #24
   31be2:	0018      	movs	r0, r3
   31be4:	4b27      	ldr	r3, [pc, #156]	; (31c84 <_http_client_request+0x320>)
   31be6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   31be8:	4932      	ldr	r1, [pc, #200]	; (31cb4 <_http_client_request+0x350>)
   31bea:	2334      	movs	r3, #52	; 0x34
   31bec:	2218      	movs	r2, #24
   31bee:	4694      	mov	ip, r2
   31bf0:	44bc      	add	ip, r7
   31bf2:	4463      	add	r3, ip
   31bf4:	2213      	movs	r2, #19
   31bf6:	0018      	movs	r0, r3
   31bf8:	4b22      	ldr	r3, [pc, #136]	; (31c84 <_http_client_request+0x320>)
   31bfa:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   31bfc:	492e      	ldr	r1, [pc, #184]	; (31cb8 <_http_client_request+0x354>)
   31bfe:	2334      	movs	r3, #52	; 0x34
   31c00:	2218      	movs	r2, #24
   31c02:	4694      	mov	ip, r2
   31c04:	44bc      	add	ip, r7
   31c06:	4463      	add	r3, ip
   31c08:	2217      	movs	r2, #23
   31c0a:	0018      	movs	r0, r3
   31c0c:	4b1d      	ldr	r3, [pc, #116]	; (31c84 <_http_client_request+0x320>)
   31c0e:	4798      	blx	r3
		if (entity->read != NULL) {
   31c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31c12:	68db      	ldr	r3, [r3, #12]
   31c14:	2b00      	cmp	r3, #0
   31c16:	d100      	bne.n	31c1a <_http_client_request+0x2b6>
   31c18:	e088      	b.n	31d2c <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   31c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31c1c:	781b      	ldrb	r3, [r3, #0]
   31c1e:	2b00      	cmp	r3, #0
   31c20:	d00f      	beq.n	31c42 <_http_client_request+0x2de>
				module->req.content_length = -1;
   31c22:	69fb      	ldr	r3, [r7, #28]
   31c24:	21cc      	movs	r1, #204	; 0xcc
   31c26:	2201      	movs	r2, #1
   31c28:	4252      	negs	r2, r2
   31c2a:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   31c2c:	4923      	ldr	r1, [pc, #140]	; (31cbc <_http_client_request+0x358>)
   31c2e:	2334      	movs	r3, #52	; 0x34
   31c30:	2218      	movs	r2, #24
   31c32:	4694      	mov	ip, r2
   31c34:	44bc      	add	ip, r7
   31c36:	4463      	add	r3, ip
   31c38:	221c      	movs	r2, #28
   31c3a:	0018      	movs	r0, r3
   31c3c:	4b11      	ldr	r3, [pc, #68]	; (31c84 <_http_client_request+0x320>)
   31c3e:	4798      	blx	r3
   31c40:	e074      	b.n	31d2c <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   31c42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31c44:	689b      	ldr	r3, [r3, #8]
   31c46:	2b00      	cmp	r3, #0
   31c48:	d070      	beq.n	31d2c <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   31c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31c4c:	689a      	ldr	r2, [r3, #8]
   31c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31c50:	695b      	ldr	r3, [r3, #20]
   31c52:	0018      	movs	r0, r3
   31c54:	4790      	blx	r2
   31c56:	0001      	movs	r1, r0
   31c58:	69fb      	ldr	r3, [r7, #28]
   31c5a:	22cc      	movs	r2, #204	; 0xcc
   31c5c:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   31c5e:	69fb      	ldr	r3, [r7, #28]
   31c60:	22cc      	movs	r2, #204	; 0xcc
   31c62:	589b      	ldr	r3, [r3, r2]
   31c64:	2b00      	cmp	r3, #0
   31c66:	da2b      	bge.n	31cc0 <_http_client_request+0x35c>
					module->req.content_length = 0;
   31c68:	69fb      	ldr	r3, [r7, #28]
   31c6a:	22cc      	movs	r2, #204	; 0xcc
   31c6c:	2100      	movs	r1, #0
   31c6e:	5099      	str	r1, [r3, r2]
   31c70:	e05c      	b.n	31d2c <_http_client_request+0x3c8>
   31c72:	46c0      	nop			; (mov r8, r8)
   31c74:	0003a5a4 	.word	0x0003a5a4
   31c78:	000318dd 	.word	0x000318dd
   31c7c:	00032845 	.word	0x00032845
   31c80:	0003a4c8 	.word	0x0003a4c8
   31c84:	000328c5 	.word	0x000328c5
   31c88:	0003a4d0 	.word	0x0003a4d0
   31c8c:	0003a4d8 	.word	0x0003a4d8
   31c90:	0003a4e0 	.word	0x0003a4e0
   31c94:	0003a4e8 	.word	0x0003a4e8
   31c98:	0003a4f4 	.word	0x0003a4f4
   31c9c:	0003531b 	.word	0x0003531b
   31ca0:	0003a4fc 	.word	0x0003a4fc
   31ca4:	0003a508 	.word	0x0003a508
   31ca8:	0003a518 	.word	0x0003a518
   31cac:	0003a51c 	.word	0x0003a51c
   31cb0:	0003a524 	.word	0x0003a524
   31cb4:	0003a540 	.word	0x0003a540
   31cb8:	0003a554 	.word	0x0003a554
   31cbc:	0003a56c 	.word	0x0003a56c
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   31cc0:	69fb      	ldr	r3, [r7, #28]
   31cc2:	22cc      	movs	r2, #204	; 0xcc
   31cc4:	589b      	ldr	r3, [r3, r2]
   31cc6:	001a      	movs	r2, r3
   31cc8:	49e0      	ldr	r1, [pc, #896]	; (3204c <_http_client_request+0x6e8>)
   31cca:	2328      	movs	r3, #40	; 0x28
   31ccc:	2018      	movs	r0, #24
   31cce:	4684      	mov	ip, r0
   31cd0:	44bc      	add	ip, r7
   31cd2:	4463      	add	r3, ip
   31cd4:	0018      	movs	r0, r3
   31cd6:	4bde      	ldr	r3, [pc, #888]	; (32050 <_http_client_request+0x6ec>)
   31cd8:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   31cda:	49de      	ldr	r1, [pc, #888]	; (32054 <_http_client_request+0x6f0>)
   31cdc:	2334      	movs	r3, #52	; 0x34
   31cde:	2218      	movs	r2, #24
   31ce0:	4694      	mov	ip, r2
   31ce2:	44bc      	add	ip, r7
   31ce4:	4463      	add	r3, ip
   31ce6:	2210      	movs	r2, #16
   31ce8:	0018      	movs	r0, r3
   31cea:	4bdb      	ldr	r3, [pc, #876]	; (32058 <_http_client_request+0x6f4>)
   31cec:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   31cee:	2328      	movs	r3, #40	; 0x28
   31cf0:	2218      	movs	r2, #24
   31cf2:	4694      	mov	ip, r2
   31cf4:	44bc      	add	ip, r7
   31cf6:	4463      	add	r3, ip
   31cf8:	0018      	movs	r0, r3
   31cfa:	4bd8      	ldr	r3, [pc, #864]	; (3205c <_http_client_request+0x6f8>)
   31cfc:	4798      	blx	r3
   31cfe:	0002      	movs	r2, r0
   31d00:	2328      	movs	r3, #40	; 0x28
   31d02:	2118      	movs	r1, #24
   31d04:	1879      	adds	r1, r7, r1
   31d06:	18c9      	adds	r1, r1, r3
   31d08:	2334      	movs	r3, #52	; 0x34
   31d0a:	2018      	movs	r0, #24
   31d0c:	4684      	mov	ip, r0
   31d0e:	44bc      	add	ip, r7
   31d10:	4463      	add	r3, ip
   31d12:	0018      	movs	r0, r3
   31d14:	4bd0      	ldr	r3, [pc, #832]	; (32058 <_http_client_request+0x6f4>)
   31d16:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31d18:	49d1      	ldr	r1, [pc, #836]	; (32060 <_http_client_request+0x6fc>)
   31d1a:	2334      	movs	r3, #52	; 0x34
   31d1c:	2218      	movs	r2, #24
   31d1e:	4694      	mov	ip, r2
   31d20:	44bc      	add	ip, r7
   31d22:	4463      	add	r3, ip
   31d24:	2202      	movs	r2, #2
   31d26:	0018      	movs	r0, r3
   31d28:	4bcb      	ldr	r3, [pc, #812]	; (32058 <_http_client_request+0x6f4>)
   31d2a:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   31d2c:	69fb      	ldr	r3, [r7, #28]
   31d2e:	22d4      	movs	r2, #212	; 0xd4
   31d30:	589b      	ldr	r3, [r3, r2]
   31d32:	2b00      	cmp	r3, #0
   31d34:	d012      	beq.n	31d5c <_http_client_request+0x3f8>
				module->req.ext_header,
   31d36:	69fb      	ldr	r3, [r7, #28]
   31d38:	22d4      	movs	r2, #212	; 0xd4
   31d3a:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   31d3c:	69fb      	ldr	r3, [r7, #28]
   31d3e:	22d4      	movs	r2, #212	; 0xd4
   31d40:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   31d42:	0018      	movs	r0, r3
   31d44:	4bc5      	ldr	r3, [pc, #788]	; (3205c <_http_client_request+0x6f8>)
   31d46:	4798      	blx	r3
   31d48:	0002      	movs	r2, r0
   31d4a:	2334      	movs	r3, #52	; 0x34
   31d4c:	2118      	movs	r1, #24
   31d4e:	468c      	mov	ip, r1
   31d50:	44bc      	add	ip, r7
   31d52:	4463      	add	r3, ip
   31d54:	0021      	movs	r1, r4
   31d56:	0018      	movs	r0, r3
   31d58:	4bbf      	ldr	r3, [pc, #764]	; (32058 <_http_client_request+0x6f4>)
   31d5a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31d5c:	49c0      	ldr	r1, [pc, #768]	; (32060 <_http_client_request+0x6fc>)
   31d5e:	2334      	movs	r3, #52	; 0x34
   31d60:	2218      	movs	r2, #24
   31d62:	4694      	mov	ip, r2
   31d64:	44bc      	add	ip, r7
   31d66:	4463      	add	r3, ip
   31d68:	2202      	movs	r2, #2
   31d6a:	0018      	movs	r0, r3
   31d6c:	4bba      	ldr	r3, [pc, #744]	; (32058 <_http_client_request+0x6f4>)
   31d6e:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   31d70:	2334      	movs	r3, #52	; 0x34
   31d72:	2218      	movs	r2, #24
   31d74:	4694      	mov	ip, r2
   31d76:	44bc      	add	ip, r7
   31d78:	4463      	add	r3, ip
   31d7a:	0018      	movs	r0, r3
   31d7c:	4bb9      	ldr	r3, [pc, #740]	; (32064 <_http_client_request+0x700>)
   31d7e:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   31d80:	69fb      	ldr	r3, [r7, #28]
   31d82:	2204      	movs	r2, #4
   31d84:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   31d86:	69fb      	ldr	r3, [r7, #28]
   31d88:	22cc      	movs	r2, #204	; 0xcc
   31d8a:	589b      	ldr	r3, [r3, r2]
   31d8c:	2b00      	cmp	r3, #0
   31d8e:	db00      	blt.n	31d92 <_http_client_request+0x42e>
   31d90:	e0c6      	b.n	31f20 <_http_client_request+0x5bc>
   31d92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31d94:	68db      	ldr	r3, [r3, #12]
   31d96:	2b00      	cmp	r3, #0
   31d98:	d100      	bne.n	31d9c <_http_client_request+0x438>
   31d9a:	e0c1      	b.n	31f20 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31d9e:	68dc      	ldr	r4, [r3, #12]
   31da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31da2:	6958      	ldr	r0, [r3, #20]
   31da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31da6:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   31da8:	69fb      	ldr	r3, [r7, #28]
   31daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31dac:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   31dae:	69fb      	ldr	r3, [r7, #28]
   31db0:	22d0      	movs	r2, #208	; 0xd0
   31db2:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31db4:	002a      	movs	r2, r5
   31db6:	47a0      	blx	r4
   31db8:	0003      	movs	r3, r0
   31dba:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   31dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31dbe:	2b00      	cmp	r3, #0
   31dc0:	da01      	bge.n	31dc6 <_http_client_request+0x462>
				size = 0;
   31dc2:	2300      	movs	r3, #0
   31dc4:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   31dc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31dc8:	220a      	movs	r2, #10
   31dca:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   31dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31dce:	220d      	movs	r2, #13
   31dd0:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   31dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31dd4:	3305      	adds	r3, #5
   31dd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
   31dd8:	210d      	movs	r1, #13
   31dda:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   31ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31dde:	3306      	adds	r3, #6
   31de0:	6eba      	ldr	r2, [r7, #104]	; 0x68
   31de2:	210a      	movs	r1, #10
   31de4:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   31de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31de8:	2b00      	cmp	r3, #0
   31dea:	db14      	blt.n	31e16 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   31dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31dee:	3302      	adds	r3, #2
   31df0:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   31df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31df4:	4a9c      	ldr	r2, [pc, #624]	; (32068 <_http_client_request+0x704>)
   31df6:	4013      	ands	r3, r2
   31df8:	d504      	bpl.n	31e04 <_http_client_request+0x4a0>
   31dfa:	3b01      	subs	r3, #1
   31dfc:	2210      	movs	r2, #16
   31dfe:	4252      	negs	r2, r2
   31e00:	4313      	orrs	r3, r2
   31e02:	3301      	adds	r3, #1
   31e04:	001a      	movs	r2, r3
   31e06:	2318      	movs	r3, #24
   31e08:	2118      	movs	r1, #24
   31e0a:	468c      	mov	ip, r1
   31e0c:	44bc      	add	ip, r7
   31e0e:	4463      	add	r3, ip
   31e10:	5c9a      	ldrb	r2, [r3, r2]
   31e12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31e14:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   31e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31e18:	2b0f      	cmp	r3, #15
   31e1a:	dd19      	ble.n	31e50 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   31e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31e1e:	3301      	adds	r3, #1
   31e20:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   31e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31e24:	2b00      	cmp	r3, #0
   31e26:	da00      	bge.n	31e2a <_http_client_request+0x4c6>
   31e28:	330f      	adds	r3, #15
   31e2a:	111b      	asrs	r3, r3, #4
   31e2c:	001a      	movs	r2, r3
   31e2e:	4b8e      	ldr	r3, [pc, #568]	; (32068 <_http_client_request+0x704>)
   31e30:	4013      	ands	r3, r2
   31e32:	d504      	bpl.n	31e3e <_http_client_request+0x4da>
   31e34:	3b01      	subs	r3, #1
   31e36:	2210      	movs	r2, #16
   31e38:	4252      	negs	r2, r2
   31e3a:	4313      	orrs	r3, r2
   31e3c:	3301      	adds	r3, #1
   31e3e:	001a      	movs	r2, r3
   31e40:	2318      	movs	r3, #24
   31e42:	2118      	movs	r1, #24
   31e44:	468c      	mov	ip, r1
   31e46:	44bc      	add	ip, r7
   31e48:	4463      	add	r3, ip
   31e4a:	5c9a      	ldrb	r2, [r3, r2]
   31e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31e4e:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   31e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31e52:	2bff      	cmp	r3, #255	; 0xff
   31e54:	dd18      	ble.n	31e88 <_http_client_request+0x524>
				ptr = buffer;
   31e56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31e58:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   31e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31e5c:	2b00      	cmp	r3, #0
   31e5e:	da00      	bge.n	31e62 <_http_client_request+0x4fe>
   31e60:	33ff      	adds	r3, #255	; 0xff
   31e62:	121b      	asrs	r3, r3, #8
   31e64:	001a      	movs	r2, r3
   31e66:	4b80      	ldr	r3, [pc, #512]	; (32068 <_http_client_request+0x704>)
   31e68:	4013      	ands	r3, r2
   31e6a:	d504      	bpl.n	31e76 <_http_client_request+0x512>
   31e6c:	3b01      	subs	r3, #1
   31e6e:	2210      	movs	r2, #16
   31e70:	4252      	negs	r2, r2
   31e72:	4313      	orrs	r3, r2
   31e74:	3301      	adds	r3, #1
   31e76:	001a      	movs	r2, r3
   31e78:	2318      	movs	r3, #24
   31e7a:	2118      	movs	r1, #24
   31e7c:	468c      	mov	ip, r1
   31e7e:	44bc      	add	ip, r7
   31e80:	4463      	add	r3, ip
   31e82:	5c9a      	ldrb	r2, [r3, r2]
   31e84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31e86:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   31e88:	69fb      	ldr	r3, [r7, #28]
   31e8a:	2000      	movs	r0, #0
   31e8c:	5618      	ldrsb	r0, [r3, r0]
   31e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31e90:	3303      	adds	r3, #3
   31e92:	001a      	movs	r2, r3
   31e94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31e96:	1ad3      	subs	r3, r2, r3
   31e98:	b29a      	uxth	r2, r3
   31e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31e9c:	b29b      	uxth	r3, r3
   31e9e:	18d3      	adds	r3, r2, r3
   31ea0:	b29b      	uxth	r3, r3
   31ea2:	3304      	adds	r3, #4
   31ea4:	b29a      	uxth	r2, r3
   31ea6:	6f39      	ldr	r1, [r7, #112]	; 0x70
   31ea8:	2300      	movs	r3, #0
   31eaa:	4c70      	ldr	r4, [pc, #448]	; (3206c <_http_client_request+0x708>)
   31eac:	47a0      	blx	r4
   31eae:	0003      	movs	r3, r0
   31eb0:	663b      	str	r3, [r7, #96]	; 0x60
   31eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   31eb4:	2b00      	cmp	r3, #0
   31eb6:	da07      	bge.n	31ec8 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   31eb8:	2305      	movs	r3, #5
   31eba:	425a      	negs	r2, r3
   31ebc:	69fb      	ldr	r3, [r7, #28]
   31ebe:	0011      	movs	r1, r2
   31ec0:	0018      	movs	r0, r3
   31ec2:	4b6b      	ldr	r3, [pc, #428]	; (32070 <_http_client_request+0x70c>)
   31ec4:	4798      	blx	r3
				return;
   31ec6:	e0e1      	b.n	3208c <_http_client_request+0x728>
			module->req.sent_length += size;
   31ec8:	69fb      	ldr	r3, [r7, #28]
   31eca:	22d0      	movs	r2, #208	; 0xd0
   31ecc:	589a      	ldr	r2, [r3, r2]
   31ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31ed0:	18d2      	adds	r2, r2, r3
   31ed2:	69fb      	ldr	r3, [r7, #28]
   31ed4:	21d0      	movs	r1, #208	; 0xd0
   31ed6:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   31ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31eda:	2b00      	cmp	r3, #0
   31edc:	d000      	beq.n	31ee0 <_http_client_request+0x57c>
   31ede:	e0c9      	b.n	32074 <_http_client_request+0x710>
				if (module->req.entity.close) {
   31ee0:	69fb      	ldr	r3, [r7, #28]
   31ee2:	22c0      	movs	r2, #192	; 0xc0
   31ee4:	589b      	ldr	r3, [r3, r2]
   31ee6:	2b00      	cmp	r3, #0
   31ee8:	d007      	beq.n	31efa <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   31eea:	69fb      	ldr	r3, [r7, #28]
   31eec:	22c0      	movs	r2, #192	; 0xc0
   31eee:	589b      	ldr	r3, [r3, r2]
   31ef0:	69fa      	ldr	r2, [r7, #28]
   31ef2:	21c4      	movs	r1, #196	; 0xc4
   31ef4:	5852      	ldr	r2, [r2, r1]
   31ef6:	0010      	movs	r0, r2
   31ef8:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   31efa:	69fb      	ldr	r3, [r7, #28]
   31efc:	2202      	movs	r2, #2
   31efe:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   31f00:	69fb      	ldr	r3, [r7, #28]
   31f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f04:	2b00      	cmp	r3, #0
   31f06:	d100      	bne.n	31f0a <_http_client_request+0x5a6>
   31f08:	e0b5      	b.n	32076 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31f0a:	69fb      	ldr	r3, [r7, #28]
   31f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f0e:	220c      	movs	r2, #12
   31f10:	2118      	movs	r1, #24
   31f12:	468c      	mov	ip, r1
   31f14:	44bc      	add	ip, r7
   31f16:	4462      	add	r2, ip
   31f18:	69f8      	ldr	r0, [r7, #28]
   31f1a:	2101      	movs	r1, #1
   31f1c:	4798      	blx	r3
				break;
   31f1e:	e0aa      	b.n	32076 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   31f20:	69fb      	ldr	r3, [r7, #28]
   31f22:	22cc      	movs	r2, #204	; 0xcc
   31f24:	589b      	ldr	r3, [r3, r2]
   31f26:	2b00      	cmp	r3, #0
   31f28:	dc00      	bgt.n	31f2c <_http_client_request+0x5c8>
   31f2a:	e07c      	b.n	32026 <_http_client_request+0x6c2>
   31f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31f2e:	68db      	ldr	r3, [r3, #12]
   31f30:	2b00      	cmp	r3, #0
   31f32:	d100      	bne.n	31f36 <_http_client_request+0x5d2>
   31f34:	e077      	b.n	32026 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   31f36:	69fb      	ldr	r3, [r7, #28]
   31f38:	22d0      	movs	r2, #208	; 0xd0
   31f3a:	589a      	ldr	r2, [r3, r2]
   31f3c:	69fb      	ldr	r3, [r7, #28]
   31f3e:	21cc      	movs	r1, #204	; 0xcc
   31f40:	585b      	ldr	r3, [r3, r1]
   31f42:	429a      	cmp	r2, r3
   31f44:	db1f      	blt.n	31f86 <_http_client_request+0x622>
				if (module->req.entity.close) {
   31f46:	69fb      	ldr	r3, [r7, #28]
   31f48:	22c0      	movs	r2, #192	; 0xc0
   31f4a:	589b      	ldr	r3, [r3, r2]
   31f4c:	2b00      	cmp	r3, #0
   31f4e:	d007      	beq.n	31f60 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   31f50:	69fb      	ldr	r3, [r7, #28]
   31f52:	22c0      	movs	r2, #192	; 0xc0
   31f54:	589b      	ldr	r3, [r3, r2]
   31f56:	69fa      	ldr	r2, [r7, #28]
   31f58:	21c4      	movs	r1, #196	; 0xc4
   31f5a:	5852      	ldr	r2, [r2, r1]
   31f5c:	0010      	movs	r0, r2
   31f5e:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   31f60:	69fb      	ldr	r3, [r7, #28]
   31f62:	2202      	movs	r2, #2
   31f64:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   31f66:	69fb      	ldr	r3, [r7, #28]
   31f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f6a:	2b00      	cmp	r3, #0
   31f6c:	d100      	bne.n	31f70 <_http_client_request+0x60c>
   31f6e:	e084      	b.n	3207a <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31f70:	69fb      	ldr	r3, [r7, #28]
   31f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f74:	220c      	movs	r2, #12
   31f76:	2118      	movs	r1, #24
   31f78:	468c      	mov	ip, r1
   31f7a:	44bc      	add	ip, r7
   31f7c:	4462      	add	r2, ip
   31f7e:	69f8      	ldr	r0, [r7, #28]
   31f80:	2101      	movs	r1, #1
   31f82:	4798      	blx	r3
				break;
   31f84:	e079      	b.n	3207a <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   31f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31f88:	68dc      	ldr	r4, [r3, #12]
   31f8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31f8c:	6958      	ldr	r0, [r3, #20]
   31f8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31f90:	69fb      	ldr	r3, [r7, #28]
   31f92:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   31f94:	69fb      	ldr	r3, [r7, #28]
   31f96:	22d0      	movs	r2, #208	; 0xd0
   31f98:	589b      	ldr	r3, [r3, r2]
   31f9a:	002a      	movs	r2, r5
   31f9c:	47a0      	blx	r4
   31f9e:	0003      	movs	r3, r0
   31fa0:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   31fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31fa4:	2b00      	cmp	r3, #0
   31fa6:	da0d      	bge.n	31fc4 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   31fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31faa:	2b00      	cmp	r3, #0
   31fac:	d102      	bne.n	31fb4 <_http_client_request+0x650>
   31fae:	234d      	movs	r3, #77	; 0x4d
   31fb0:	425b      	negs	r3, r3
   31fb2:	e001      	b.n	31fb8 <_http_client_request+0x654>
   31fb4:	2305      	movs	r3, #5
   31fb6:	425b      	negs	r3, r3
   31fb8:	69fa      	ldr	r2, [r7, #28]
   31fba:	0019      	movs	r1, r3
   31fbc:	0010      	movs	r0, r2
   31fbe:	4b2c      	ldr	r3, [pc, #176]	; (32070 <_http_client_request+0x70c>)
   31fc0:	4798      	blx	r3
			if (size < 0) {
   31fc2:	e057      	b.n	32074 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   31fc4:	69fb      	ldr	r3, [r7, #28]
   31fc6:	22cc      	movs	r2, #204	; 0xcc
   31fc8:	589a      	ldr	r2, [r3, r2]
   31fca:	69fb      	ldr	r3, [r7, #28]
   31fcc:	21d0      	movs	r1, #208	; 0xd0
   31fce:	585b      	ldr	r3, [r3, r1]
   31fd0:	1ad2      	subs	r2, r2, r3
   31fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31fd4:	429a      	cmp	r2, r3
   31fd6:	da07      	bge.n	31fe8 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   31fd8:	69fb      	ldr	r3, [r7, #28]
   31fda:	22cc      	movs	r2, #204	; 0xcc
   31fdc:	589a      	ldr	r2, [r3, r2]
   31fde:	69fb      	ldr	r3, [r7, #28]
   31fe0:	21d0      	movs	r1, #208	; 0xd0
   31fe2:	585b      	ldr	r3, [r3, r1]
   31fe4:	1ad3      	subs	r3, r2, r3
   31fe6:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   31fe8:	69fb      	ldr	r3, [r7, #28]
   31fea:	2000      	movs	r0, #0
   31fec:	5618      	ldrsb	r0, [r3, r0]
   31fee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31ff2:	b29a      	uxth	r2, r3
   31ff4:	2300      	movs	r3, #0
   31ff6:	4c1d      	ldr	r4, [pc, #116]	; (3206c <_http_client_request+0x708>)
   31ff8:	47a0      	blx	r4
   31ffa:	0003      	movs	r3, r0
   31ffc:	663b      	str	r3, [r7, #96]	; 0x60
   31ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   32000:	2b00      	cmp	r3, #0
   32002:	da07      	bge.n	32014 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   32004:	2305      	movs	r3, #5
   32006:	425a      	negs	r2, r3
   32008:	69fb      	ldr	r3, [r7, #28]
   3200a:	0011      	movs	r1, r2
   3200c:	0018      	movs	r0, r3
   3200e:	4b18      	ldr	r3, [pc, #96]	; (32070 <_http_client_request+0x70c>)
   32010:	4798      	blx	r3
					return;
   32012:	e03b      	b.n	3208c <_http_client_request+0x728>
				module->req.sent_length += size;
   32014:	69fb      	ldr	r3, [r7, #28]
   32016:	22d0      	movs	r2, #208	; 0xd0
   32018:	589a      	ldr	r2, [r3, r2]
   3201a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3201c:	18d2      	adds	r2, r2, r3
   3201e:	69fb      	ldr	r3, [r7, #28]
   32020:	21d0      	movs	r1, #208	; 0xd0
   32022:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   32024:	e026      	b.n	32074 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   32026:	69fb      	ldr	r3, [r7, #28]
   32028:	2202      	movs	r2, #2
   3202a:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   3202c:	69fb      	ldr	r3, [r7, #28]
   3202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32030:	2b00      	cmp	r3, #0
   32032:	d024      	beq.n	3207e <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   32034:	69fb      	ldr	r3, [r7, #28]
   32036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32038:	220c      	movs	r2, #12
   3203a:	2118      	movs	r1, #24
   3203c:	468c      	mov	ip, r1
   3203e:	44bc      	add	ip, r7
   32040:	4462      	add	r2, ip
   32042:	69f8      	ldr	r0, [r7, #28]
   32044:	2101      	movs	r1, #1
   32046:	4798      	blx	r3
			break;
   32048:	e019      	b.n	3207e <_http_client_request+0x71a>
   3204a:	46c0      	nop			; (mov r8, r8)
   3204c:	0003a58c 	.word	0x0003a58c
   32050:	00035221 	.word	0x00035221
   32054:	0003a590 	.word	0x0003a590
   32058:	000328c5 	.word	0x000328c5
   3205c:	0003531b 	.word	0x0003531b
   32060:	0003a518 	.word	0x0003a518
   32064:	00032901 	.word	0x00032901
   32068:	8000000f 	.word	0x8000000f
   3206c:	00025e49 	.word	0x00025e49
   32070:	00031811 	.word	0x00031811
		break;
   32074:	e004      	b.n	32080 <_http_client_request+0x71c>
				break;
   32076:	46c0      	nop			; (mov r8, r8)
   32078:	e002      	b.n	32080 <_http_client_request+0x71c>
				break;
   3207a:	46c0      	nop			; (mov r8, r8)
   3207c:	e000      	b.n	32080 <_http_client_request+0x71c>
			break;
   3207e:	46c0      	nop			; (mov r8, r8)
   32080:	69bb      	ldr	r3, [r7, #24]
   32082:	469d      	mov	sp, r3
   32084:	e004      	b.n	32090 <_http_client_request+0x72c>
		return;
   32086:	46c0      	nop			; (mov r8, r8)
   32088:	e000      	b.n	3208c <_http_client_request+0x728>
		return;
   3208a:	46c0      	nop			; (mov r8, r8)
   3208c:	69bb      	ldr	r3, [r7, #24]
   3208e:	469d      	mov	sp, r3
	}
}
   32090:	46bd      	mov	sp, r7
   32092:	b01e      	add	sp, #120	; 0x78
   32094:	bc04      	pop	{r2}
   32096:	4690      	mov	r8, r2
   32098:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3209a:	46c0      	nop			; (mov r8, r8)

0003209c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   3209c:	b590      	push	{r4, r7, lr}
   3209e:	b083      	sub	sp, #12
   320a0:	af00      	add	r7, sp, #0
   320a2:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   320a4:	687b      	ldr	r3, [r7, #4]
   320a6:	2b00      	cmp	r3, #0
   320a8:	d021      	beq.n	320ee <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   320aa:	687b      	ldr	r3, [r7, #4]
   320ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   320ae:	687b      	ldr	r3, [r7, #4]
   320b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   320b2:	429a      	cmp	r2, r3
   320b4:	d307      	bcc.n	320c6 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   320b6:	238b      	movs	r3, #139	; 0x8b
   320b8:	425a      	negs	r2, r3
   320ba:	687b      	ldr	r3, [r7, #4]
   320bc:	0011      	movs	r1, r2
   320be:	0018      	movs	r0, r3
   320c0:	4b0d      	ldr	r3, [pc, #52]	; (320f8 <_http_client_recv_packet+0x5c>)
   320c2:	4798      	blx	r3
		return;
   320c4:	e014      	b.n	320f0 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   320c6:	687b      	ldr	r3, [r7, #4]
   320c8:	2000      	movs	r0, #0
   320ca:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   320cc:	687b      	ldr	r3, [r7, #4]
   320ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   320d0:	687b      	ldr	r3, [r7, #4]
   320d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   320d4:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   320d6:	687b      	ldr	r3, [r7, #4]
   320d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   320da:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   320dc:	687b      	ldr	r3, [r7, #4]
   320de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   320e0:	b29b      	uxth	r3, r3
   320e2:	1ad3      	subs	r3, r2, r3
   320e4:	b29a      	uxth	r2, r3
   320e6:	2300      	movs	r3, #0
   320e8:	4c04      	ldr	r4, [pc, #16]	; (320fc <_http_client_recv_packet+0x60>)
   320ea:	47a0      	blx	r4
   320ec:	e000      	b.n	320f0 <_http_client_recv_packet+0x54>
		return;
   320ee:	46c0      	nop			; (mov r8, r8)
}
   320f0:	46bd      	mov	sp, r7
   320f2:	b003      	add	sp, #12
   320f4:	bd90      	pop	{r4, r7, pc}
   320f6:	46c0      	nop			; (mov r8, r8)
   320f8:	00031811 	.word	0x00031811
   320fc:	00025fad 	.word	0x00025fad

00032100 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   32100:	b580      	push	{r7, lr}
   32102:	b082      	sub	sp, #8
   32104:	af00      	add	r7, sp, #0
   32106:	6078      	str	r0, [r7, #4]
   32108:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   3210a:	687b      	ldr	r3, [r7, #4]
   3210c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3210e:	683b      	ldr	r3, [r7, #0]
   32110:	18d2      	adds	r2, r2, r3
   32112:	687b      	ldr	r3, [r7, #4]
   32114:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   32116:	687b      	ldr	r3, [r7, #4]
   32118:	2258      	movs	r2, #88	; 0x58
   3211a:	5a9b      	ldrh	r3, [r3, r2]
   3211c:	2b00      	cmp	r3, #0
   3211e:	d007      	beq.n	32130 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   32120:	687b      	ldr	r3, [r7, #4]
   32122:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32124:	687b      	ldr	r3, [r7, #4]
   32126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   32128:	0019      	movs	r1, r3
   3212a:	0010      	movs	r0, r2
   3212c:	4b06      	ldr	r3, [pc, #24]	; (32148 <_http_client_recved_packet+0x48>)
   3212e:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   32130:	46c0      	nop			; (mov r8, r8)
   32132:	687b      	ldr	r3, [r7, #4]
   32134:	0018      	movs	r0, r3
   32136:	4b05      	ldr	r3, [pc, #20]	; (3214c <_http_client_recved_packet+0x4c>)
   32138:	4798      	blx	r3
   3213a:	1e03      	subs	r3, r0, #0
   3213c:	d1f9      	bne.n	32132 <_http_client_recved_packet+0x32>
}
   3213e:	46c0      	nop			; (mov r8, r8)
   32140:	46bd      	mov	sp, r7
   32142:	b002      	add	sp, #8
   32144:	bd80      	pop	{r7, pc}
   32146:	46c0      	nop			; (mov r8, r8)
   32148:	00032bbd 	.word	0x00032bbd
   3214c:	00032151 	.word	0x00032151

00032150 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   32150:	b580      	push	{r7, lr}
   32152:	b082      	sub	sp, #8
   32154:	af00      	add	r7, sp, #0
   32156:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   32158:	687b      	ldr	r3, [r7, #4]
   3215a:	22d8      	movs	r2, #216	; 0xd8
   3215c:	589b      	ldr	r3, [r3, r2]
   3215e:	2b00      	cmp	r3, #0
   32160:	d002      	beq.n	32168 <_http_client_handle_response+0x18>
   32162:	2b01      	cmp	r3, #1
   32164:	d006      	beq.n	32174 <_http_client_handle_response+0x24>
   32166:	e00b      	b.n	32180 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   32168:	687b      	ldr	r3, [r7, #4]
   3216a:	0018      	movs	r0, r3
   3216c:	4b07      	ldr	r3, [pc, #28]	; (3218c <_http_client_handle_response+0x3c>)
   3216e:	4798      	blx	r3
   32170:	0003      	movs	r3, r0
   32172:	e006      	b.n	32182 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   32174:	687b      	ldr	r3, [r7, #4]
   32176:	0018      	movs	r0, r3
   32178:	4b05      	ldr	r3, [pc, #20]	; (32190 <_http_client_handle_response+0x40>)
   3217a:	4798      	blx	r3
   3217c:	0003      	movs	r3, r0
   3217e:	e000      	b.n	32182 <_http_client_handle_response+0x32>
	}
	return 0;
   32180:	2300      	movs	r3, #0
}
   32182:	0018      	movs	r0, r3
   32184:	46bd      	mov	sp, r7
   32186:	b002      	add	sp, #8
   32188:	bd80      	pop	{r7, pc}
   3218a:	46c0      	nop			; (mov r8, r8)
   3218c:	00032195 	.word	0x00032195
   32190:	0003264d 	.word	0x0003264d

00032194 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   32194:	b590      	push	{r4, r7, lr}
   32196:	b08b      	sub	sp, #44	; 0x2c
   32198:	af00      	add	r7, sp, #0
   3219a:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   3219c:	687b      	ldr	r3, [r7, #4]
   3219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   321a0:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   321a2:	4b9a      	ldr	r3, [pc, #616]	; (3240c <_http_client_handle_header+0x278>)
   321a4:	681a      	ldr	r2, [r3, #0]
   321a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   321a8:	0011      	movs	r1, r2
   321aa:	0018      	movs	r0, r3
   321ac:	4b98      	ldr	r3, [pc, #608]	; (32410 <_http_client_handle_header+0x27c>)
   321ae:	4798      	blx	r3
   321b0:	0003      	movs	r3, r0
   321b2:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   321b4:	69bb      	ldr	r3, [r7, #24]
   321b6:	2b00      	cmp	r3, #0
   321b8:	d007      	beq.n	321ca <_http_client_handle_header+0x36>
   321ba:	687b      	ldr	r3, [r7, #4]
   321bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   321be:	687b      	ldr	r3, [r7, #4]
   321c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   321c2:	18d2      	adds	r2, r2, r3
   321c4:	69bb      	ldr	r3, [r7, #24]
   321c6:	429a      	cmp	r2, r3
   321c8:	d807      	bhi.n	321da <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   321ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   321cc:	687b      	ldr	r3, [r7, #4]
   321ce:	0011      	movs	r1, r2
   321d0:	0018      	movs	r0, r3
   321d2:	4b90      	ldr	r3, [pc, #576]	; (32414 <_http_client_handle_header+0x280>)
   321d4:	4798      	blx	r3
			return 0;
   321d6:	2300      	movs	r3, #0
   321d8:	e114      	b.n	32404 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   321da:	4b8c      	ldr	r3, [pc, #560]	; (3240c <_http_client_handle_header+0x278>)
   321dc:	681c      	ldr	r4, [r3, #0]
   321de:	4b8b      	ldr	r3, [pc, #556]	; (3240c <_http_client_handle_header+0x278>)
   321e0:	681b      	ldr	r3, [r3, #0]
   321e2:	0018      	movs	r0, r3
   321e4:	4b8c      	ldr	r3, [pc, #560]	; (32418 <_http_client_handle_header+0x284>)
   321e6:	4798      	blx	r3
   321e8:	0002      	movs	r2, r0
   321ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   321ec:	0021      	movs	r1, r4
   321ee:	0018      	movs	r0, r3
   321f0:	4b8a      	ldr	r3, [pc, #552]	; (3241c <_http_client_handle_header+0x288>)
   321f2:	4798      	blx	r3
   321f4:	1e03      	subs	r3, r0, #0
   321f6:	d15d      	bne.n	322b4 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   321f8:	4b84      	ldr	r3, [pc, #528]	; (3240c <_http_client_handle_header+0x278>)
   321fa:	681b      	ldr	r3, [r3, #0]
   321fc:	0018      	movs	r0, r3
   321fe:	4b86      	ldr	r3, [pc, #536]	; (32418 <_http_client_handle_header+0x284>)
   32200:	4798      	blx	r3
   32202:	0002      	movs	r2, r0
   32204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32206:	189a      	adds	r2, r3, r2
   32208:	687b      	ldr	r3, [r7, #4]
   3220a:	0011      	movs	r1, r2
   3220c:	0018      	movs	r0, r3
   3220e:	4b81      	ldr	r3, [pc, #516]	; (32414 <_http_client_handle_header+0x280>)
   32210:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   32212:	687b      	ldr	r3, [r7, #4]
   32214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32216:	2b00      	cmp	r3, #0
   32218:	d046      	beq.n	322a8 <_http_client_handle_header+0x114>
   3221a:	687b      	ldr	r3, [r7, #4]
   3221c:	22e4      	movs	r2, #228	; 0xe4
   3221e:	5a9b      	ldrh	r3, [r3, r2]
   32220:	2b00      	cmp	r3, #0
   32222:	d041      	beq.n	322a8 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   32224:	687b      	ldr	r3, [r7, #4]
   32226:	22dc      	movs	r2, #220	; 0xdc
   32228:	589b      	ldr	r3, [r3, r2]
   3222a:	2b00      	cmp	r3, #0
   3222c:	da19      	bge.n	32262 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   3222e:	687b      	ldr	r3, [r7, #4]
   32230:	22e4      	movs	r2, #228	; 0xe4
   32232:	5a9a      	ldrh	r2, [r3, r2]
   32234:	230c      	movs	r3, #12
   32236:	18fb      	adds	r3, r7, r3
   32238:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   3223a:	230c      	movs	r3, #12
   3223c:	18fb      	adds	r3, r7, r3
   3223e:	2201      	movs	r2, #1
   32240:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   32242:	687b      	ldr	r3, [r7, #4]
   32244:	22e0      	movs	r2, #224	; 0xe0
   32246:	2100      	movs	r1, #0
   32248:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   3224a:	230c      	movs	r3, #12
   3224c:	18fb      	adds	r3, r7, r3
   3224e:	2200      	movs	r2, #0
   32250:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32252:	687b      	ldr	r3, [r7, #4]
   32254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32256:	220c      	movs	r2, #12
   32258:	18ba      	adds	r2, r7, r2
   3225a:	6878      	ldr	r0, [r7, #4]
   3225c:	2102      	movs	r1, #2
   3225e:	4798      	blx	r3
   32260:	e022      	b.n	322a8 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   32262:	687b      	ldr	r3, [r7, #4]
   32264:	22dc      	movs	r2, #220	; 0xdc
   32266:	589a      	ldr	r2, [r3, r2]
   32268:	687b      	ldr	r3, [r7, #4]
   3226a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3226c:	429a      	cmp	r2, r3
   3226e:	dd1b      	ble.n	322a8 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   32270:	687b      	ldr	r3, [r7, #4]
   32272:	22e4      	movs	r2, #228	; 0xe4
   32274:	5a9a      	ldrh	r2, [r3, r2]
   32276:	230c      	movs	r3, #12
   32278:	18fb      	adds	r3, r7, r3
   3227a:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   3227c:	687b      	ldr	r3, [r7, #4]
   3227e:	22dc      	movs	r2, #220	; 0xdc
   32280:	589b      	ldr	r3, [r3, r2]
   32282:	001a      	movs	r2, r3
   32284:	230c      	movs	r3, #12
   32286:	18fb      	adds	r3, r7, r3
   32288:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   3228a:	230c      	movs	r3, #12
   3228c:	18fb      	adds	r3, r7, r3
   3228e:	2200      	movs	r2, #0
   32290:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   32292:	687b      	ldr	r3, [r7, #4]
   32294:	22e0      	movs	r2, #224	; 0xe0
   32296:	2100      	movs	r1, #0
   32298:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3229a:	687b      	ldr	r3, [r7, #4]
   3229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3229e:	220c      	movs	r2, #12
   322a0:	18ba      	adds	r2, r7, r2
   322a2:	6878      	ldr	r0, [r7, #4]
   322a4:	2102      	movs	r1, #2
   322a6:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   322a8:	687b      	ldr	r3, [r7, #4]
   322aa:	22d8      	movs	r2, #216	; 0xd8
   322ac:	2101      	movs	r1, #1
   322ae:	5099      	str	r1, [r3, r2]
			return 1;
   322b0:	2301      	movs	r3, #1
   322b2:	e0a7      	b.n	32404 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   322b4:	495a      	ldr	r1, [pc, #360]	; (32420 <_http_client_handle_header+0x28c>)
   322b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   322b8:	2210      	movs	r2, #16
   322ba:	0018      	movs	r0, r3
   322bc:	4b57      	ldr	r3, [pc, #348]	; (3241c <_http_client_handle_header+0x288>)
   322be:	4798      	blx	r3
   322c0:	1e03      	subs	r3, r0, #0
   322c2:	d109      	bne.n	322d8 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   322c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   322c6:	3310      	adds	r3, #16
   322c8:	0018      	movs	r0, r3
   322ca:	4b56      	ldr	r3, [pc, #344]	; (32424 <_http_client_handle_header+0x290>)
   322cc:	4798      	blx	r3
   322ce:	0001      	movs	r1, r0
   322d0:	687b      	ldr	r3, [r7, #4]
   322d2:	22dc      	movs	r2, #220	; 0xdc
   322d4:	5099      	str	r1, [r3, r2]
   322d6:	e08b      	b.n	323f0 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   322d8:	4953      	ldr	r1, [pc, #332]	; (32428 <_http_client_handle_header+0x294>)
   322da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   322dc:	2213      	movs	r2, #19
   322de:	0018      	movs	r0, r3
   322e0:	4b4e      	ldr	r3, [pc, #312]	; (3241c <_http_client_handle_header+0x288>)
   322e2:	4798      	blx	r3
   322e4:	1e03      	subs	r3, r0, #0
   322e6:	d127      	bne.n	32338 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   322e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   322ea:	3313      	adds	r3, #19
   322ec:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   322ee:	e01e      	b.n	3232e <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   322f0:	6a3b      	ldr	r3, [r7, #32]
   322f2:	781b      	ldrb	r3, [r3, #0]
   322f4:	2b20      	cmp	r3, #32
   322f6:	d103      	bne.n	32300 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   322f8:	6a3b      	ldr	r3, [r7, #32]
   322fa:	3301      	adds	r3, #1
   322fc:	623b      	str	r3, [r7, #32]
   322fe:	e016      	b.n	3232e <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   32300:	6a3b      	ldr	r3, [r7, #32]
   32302:	781b      	ldrb	r3, [r3, #0]
   32304:	2b43      	cmp	r3, #67	; 0x43
   32306:	d003      	beq.n	32310 <_http_client_handle_header+0x17c>
   32308:	6a3b      	ldr	r3, [r7, #32]
   3230a:	781b      	ldrb	r3, [r3, #0]
   3230c:	2b63      	cmp	r3, #99	; 0x63
   3230e:	d105      	bne.n	3231c <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   32310:	687b      	ldr	r3, [r7, #4]
   32312:	21cc      	movs	r1, #204	; 0xcc
   32314:	2201      	movs	r2, #1
   32316:	4252      	negs	r2, r2
   32318:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   3231a:	e069      	b.n	323f0 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   3231c:	2386      	movs	r3, #134	; 0x86
   3231e:	425a      	negs	r2, r3
   32320:	687b      	ldr	r3, [r7, #4]
   32322:	0011      	movs	r1, r2
   32324:	0018      	movs	r0, r3
   32326:	4b41      	ldr	r3, [pc, #260]	; (3242c <_http_client_handle_header+0x298>)
   32328:	4798      	blx	r3
					return 0;
   3232a:	2300      	movs	r3, #0
   3232c:	e06a      	b.n	32404 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3232e:	69ba      	ldr	r2, [r7, #24]
   32330:	6a3b      	ldr	r3, [r7, #32]
   32332:	429a      	cmp	r2, r3
   32334:	d8dc      	bhi.n	322f0 <_http_client_handle_header+0x15c>
   32336:	e05b      	b.n	323f0 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   32338:	493d      	ldr	r1, [pc, #244]	; (32430 <_http_client_handle_header+0x29c>)
   3233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3233c:	220c      	movs	r2, #12
   3233e:	0018      	movs	r0, r3
   32340:	4b36      	ldr	r3, [pc, #216]	; (3241c <_http_client_handle_header+0x288>)
   32342:	4798      	blx	r3
   32344:	1e03      	subs	r3, r0, #0
   32346:	d126      	bne.n	32396 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   32348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3234a:	330c      	adds	r3, #12
   3234c:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3234e:	e01d      	b.n	3238c <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   32350:	69fb      	ldr	r3, [r7, #28]
   32352:	781b      	ldrb	r3, [r3, #0]
   32354:	2b20      	cmp	r3, #32
   32356:	d103      	bne.n	32360 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32358:	69fb      	ldr	r3, [r7, #28]
   3235a:	3301      	adds	r3, #1
   3235c:	61fb      	str	r3, [r7, #28]
   3235e:	e015      	b.n	3238c <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   32360:	69fb      	ldr	r3, [r7, #28]
   32362:	781b      	ldrb	r3, [r3, #0]
   32364:	2b4b      	cmp	r3, #75	; 0x4b
   32366:	d003      	beq.n	32370 <_http_client_handle_header+0x1dc>
   32368:	69fb      	ldr	r3, [r7, #28]
   3236a:	781b      	ldrb	r3, [r3, #0]
   3236c:	2b6b      	cmp	r3, #107	; 0x6b
   3236e:	d106      	bne.n	3237e <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   32370:	687b      	ldr	r3, [r7, #4]
   32372:	2241      	movs	r2, #65	; 0x41
   32374:	5c99      	ldrb	r1, [r3, r2]
   32376:	2002      	movs	r0, #2
   32378:	4301      	orrs	r1, r0
   3237a:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   3237c:	e038      	b.n	323f0 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   3237e:	687b      	ldr	r3, [r7, #4]
   32380:	2241      	movs	r2, #65	; 0x41
   32382:	5c99      	ldrb	r1, [r3, r2]
   32384:	2002      	movs	r0, #2
   32386:	4381      	bics	r1, r0
   32388:	5499      	strb	r1, [r3, r2]
				break;
   3238a:	e031      	b.n	323f0 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3238c:	69ba      	ldr	r2, [r7, #24]
   3238e:	69fb      	ldr	r3, [r7, #28]
   32390:	429a      	cmp	r2, r3
   32392:	d8dd      	bhi.n	32350 <_http_client_handle_header+0x1bc>
   32394:	e02c      	b.n	323f0 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   32396:	4927      	ldr	r1, [pc, #156]	; (32434 <_http_client_handle_header+0x2a0>)
   32398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3239a:	2205      	movs	r2, #5
   3239c:	0018      	movs	r0, r3
   3239e:	4b1f      	ldr	r3, [pc, #124]	; (3241c <_http_client_handle_header+0x288>)
   323a0:	4798      	blx	r3
   323a2:	1e03      	subs	r3, r0, #0
   323a4:	d124      	bne.n	323f0 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   323a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   323a8:	3309      	adds	r3, #9
   323aa:	0018      	movs	r0, r3
   323ac:	4b1d      	ldr	r3, [pc, #116]	; (32424 <_http_client_handle_header+0x290>)
   323ae:	4798      	blx	r3
   323b0:	0003      	movs	r3, r0
   323b2:	b299      	uxth	r1, r3
   323b4:	687b      	ldr	r3, [r7, #4]
   323b6:	22e4      	movs	r2, #228	; 0xe4
   323b8:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   323ba:	687b      	ldr	r3, [r7, #4]
   323bc:	22dc      	movs	r2, #220	; 0xdc
   323be:	2100      	movs	r1, #0
   323c0:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   323c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   323c4:	3305      	adds	r3, #5
   323c6:	781b      	ldrb	r3, [r3, #0]
   323c8:	2b31      	cmp	r3, #49	; 0x31
   323ca:	d804      	bhi.n	323d6 <_http_client_handle_header+0x242>
   323cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   323ce:	3307      	adds	r3, #7
   323d0:	781b      	ldrb	r3, [r3, #0]
   323d2:	2b30      	cmp	r3, #48	; 0x30
   323d4:	d906      	bls.n	323e4 <_http_client_handle_header+0x250>
				module->permanent = 1;
   323d6:	687b      	ldr	r3, [r7, #4]
   323d8:	2241      	movs	r2, #65	; 0x41
   323da:	5c99      	ldrb	r1, [r3, r2]
   323dc:	2002      	movs	r0, #2
   323de:	4301      	orrs	r1, r0
   323e0:	5499      	strb	r1, [r3, r2]
   323e2:	e005      	b.n	323f0 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   323e4:	687b      	ldr	r3, [r7, #4]
   323e6:	2241      	movs	r2, #65	; 0x41
   323e8:	5c99      	ldrb	r1, [r3, r2]
   323ea:	2002      	movs	r0, #2
   323ec:	4381      	bics	r1, r0
   323ee:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   323f0:	4b06      	ldr	r3, [pc, #24]	; (3240c <_http_client_handle_header+0x278>)
   323f2:	681b      	ldr	r3, [r3, #0]
   323f4:	0018      	movs	r0, r3
   323f6:	4b08      	ldr	r3, [pc, #32]	; (32418 <_http_client_handle_header+0x284>)
   323f8:	4798      	blx	r3
   323fa:	0002      	movs	r2, r0
   323fc:	69bb      	ldr	r3, [r7, #24]
   323fe:	189b      	adds	r3, r3, r2
   32400:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32402:	e6ce      	b.n	321a2 <_http_client_handle_header+0xe>
	}
}
   32404:	0018      	movs	r0, r3
   32406:	46bd      	mov	sp, r7
   32408:	b00b      	add	sp, #44	; 0x2c
   3240a:	bd90      	pop	{r4, r7, pc}
   3240c:	2000012c 	.word	0x2000012c
   32410:	00035399 	.word	0x00035399
   32414:	000327f9 	.word	0x000327f9
   32418:	0003531b 	.word	0x0003531b
   3241c:	00035329 	.word	0x00035329
   32420:	0003a590 	.word	0x0003a590
   32424:	00034eb1 	.word	0x00034eb1
   32428:	0003a5b4 	.word	0x0003a5b4
   3242c:	00031811 	.word	0x00031811
   32430:	0003a5c8 	.word	0x0003a5c8
   32434:	0003a5d8 	.word	0x0003a5d8

00032438 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   32438:	b580      	push	{r7, lr}
   3243a:	b088      	sub	sp, #32
   3243c:	af00      	add	r7, sp, #0
   3243e:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   32440:	687b      	ldr	r3, [r7, #4]
   32442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32444:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   32446:	2300      	movs	r3, #0
   32448:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   3244a:	687b      	ldr	r3, [r7, #4]
   3244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3244e:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   32450:	687b      	ldr	r3, [r7, #4]
   32452:	22e0      	movs	r2, #224	; 0xe0
   32454:	589b      	ldr	r3, [r3, r2]
   32456:	2b00      	cmp	r3, #0
   32458:	db71      	blt.n	3253e <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   3245a:	687b      	ldr	r3, [r7, #4]
   3245c:	22e0      	movs	r2, #224	; 0xe0
   3245e:	589b      	ldr	r3, [r3, r2]
   32460:	2b00      	cmp	r3, #0
   32462:	d134      	bne.n	324ce <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32464:	687b      	ldr	r3, [r7, #4]
   32466:	22d8      	movs	r2, #216	; 0xd8
   32468:	2100      	movs	r1, #0
   3246a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   3246c:	687b      	ldr	r3, [r7, #4]
   3246e:	22e4      	movs	r2, #228	; 0xe4
   32470:	2100      	movs	r1, #0
   32472:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32474:	2308      	movs	r3, #8
   32476:	18fb      	adds	r3, r7, r3
   32478:	2201      	movs	r2, #1
   3247a:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   3247c:	2308      	movs	r3, #8
   3247e:	18fb      	adds	r3, r7, r3
   32480:	2200      	movs	r2, #0
   32482:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   32484:	2308      	movs	r3, #8
   32486:	18fb      	adds	r3, r7, r3
   32488:	2200      	movs	r2, #0
   3248a:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   3248c:	687b      	ldr	r3, [r7, #4]
   3248e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32490:	2b00      	cmp	r3, #0
   32492:	d006      	beq.n	324a2 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32494:	687b      	ldr	r3, [r7, #4]
   32496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32498:	2208      	movs	r2, #8
   3249a:	18ba      	adds	r2, r7, r2
   3249c:	6878      	ldr	r0, [r7, #4]
   3249e:	2103      	movs	r1, #3
   324a0:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   324a2:	687b      	ldr	r3, [r7, #4]
   324a4:	2241      	movs	r2, #65	; 0x41
   324a6:	5c9b      	ldrb	r3, [r3, r2]
   324a8:	2202      	movs	r2, #2
   324aa:	4013      	ands	r3, r2
   324ac:	b2db      	uxtb	r3, r3
   324ae:	2b00      	cmp	r3, #0
   324b0:	d105      	bne.n	324be <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   324b2:	687b      	ldr	r3, [r7, #4]
   324b4:	2100      	movs	r1, #0
   324b6:	0018      	movs	r0, r3
   324b8:	4b62      	ldr	r3, [pc, #392]	; (32644 <_http_client_read_chuked_entity+0x20c>)
   324ba:	4798      	blx	r3
					return;
   324bc:	e0bf      	b.n	3263e <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   324be:	697b      	ldr	r3, [r7, #20]
   324c0:	1c9a      	adds	r2, r3, #2
   324c2:	687b      	ldr	r3, [r7, #4]
   324c4:	0011      	movs	r1, r2
   324c6:	0018      	movs	r0, r3
   324c8:	4b5f      	ldr	r3, [pc, #380]	; (32648 <_http_client_read_chuked_entity+0x210>)
   324ca:	4798      	blx	r3
   324cc:	e0b2      	b.n	32634 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   324ce:	687b      	ldr	r3, [r7, #4]
   324d0:	22e0      	movs	r2, #224	; 0xe0
   324d2:	589a      	ldr	r2, [r3, r2]
   324d4:	69fb      	ldr	r3, [r7, #28]
   324d6:	429a      	cmp	r2, r3
   324d8:	dd00      	ble.n	324dc <_http_client_read_chuked_entity+0xa4>
   324da:	e0ab      	b.n	32634 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   324dc:	687b      	ldr	r3, [r7, #4]
   324de:	22e0      	movs	r2, #224	; 0xe0
   324e0:	589b      	ldr	r3, [r3, r2]
   324e2:	001a      	movs	r2, r3
   324e4:	2308      	movs	r3, #8
   324e6:	18fb      	adds	r3, r7, r3
   324e8:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   324ea:	2308      	movs	r3, #8
   324ec:	18fb      	adds	r3, r7, r3
   324ee:	697a      	ldr	r2, [r7, #20]
   324f0:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   324f2:	2308      	movs	r3, #8
   324f4:	18fb      	adds	r3, r7, r3
   324f6:	2200      	movs	r2, #0
   324f8:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   324fa:	687b      	ldr	r3, [r7, #4]
   324fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   324fe:	2b00      	cmp	r3, #0
   32500:	d006      	beq.n	32510 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32502:	687b      	ldr	r3, [r7, #4]
   32504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32506:	2208      	movs	r2, #8
   32508:	18ba      	adds	r2, r7, r2
   3250a:	6878      	ldr	r0, [r7, #4]
   3250c:	2103      	movs	r1, #3
   3250e:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   32510:	687b      	ldr	r3, [r7, #4]
   32512:	22e0      	movs	r2, #224	; 0xe0
   32514:	589b      	ldr	r3, [r3, r2]
   32516:	3302      	adds	r3, #2
   32518:	697a      	ldr	r2, [r7, #20]
   3251a:	18d2      	adds	r2, r2, r3
   3251c:	687b      	ldr	r3, [r7, #4]
   3251e:	0011      	movs	r1, r2
   32520:	0018      	movs	r0, r3
   32522:	4b49      	ldr	r3, [pc, #292]	; (32648 <_http_client_read_chuked_entity+0x210>)
   32524:	4798      	blx	r3
				length = (int)module->recved_size;
   32526:	687b      	ldr	r3, [r7, #4]
   32528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3252a:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   3252c:	687b      	ldr	r3, [r7, #4]
   3252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32530:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   32532:	687b      	ldr	r3, [r7, #4]
   32534:	21e0      	movs	r1, #224	; 0xe0
   32536:	2201      	movs	r2, #1
   32538:	4252      	negs	r2, r2
   3253a:	505a      	str	r2, [r3, r1]
   3253c:	e07a      	b.n	32634 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   3253e:	687b      	ldr	r3, [r7, #4]
   32540:	22e0      	movs	r2, #224	; 0xe0
   32542:	2100      	movs	r1, #0
   32544:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   32546:	e05a      	b.n	325fe <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   32548:	697b      	ldr	r3, [r7, #20]
   3254a:	781b      	ldrb	r3, [r3, #0]
   3254c:	2b0a      	cmp	r3, #10
   3254e:	d106      	bne.n	3255e <_http_client_read_chuked_entity+0x126>
					buffer++;
   32550:	697b      	ldr	r3, [r7, #20]
   32552:	3301      	adds	r3, #1
   32554:	617b      	str	r3, [r7, #20]
					length--;
   32556:	69fb      	ldr	r3, [r7, #28]
   32558:	3b01      	subs	r3, #1
   3255a:	61fb      	str	r3, [r7, #28]
					break;
   3255c:	e052      	b.n	32604 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   3255e:	69bb      	ldr	r3, [r7, #24]
   32560:	2b00      	cmp	r3, #0
   32562:	d145      	bne.n	325f0 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   32564:	697b      	ldr	r3, [r7, #20]
   32566:	781b      	ldrb	r3, [r3, #0]
   32568:	2b2f      	cmp	r3, #47	; 0x2f
   3256a:	d910      	bls.n	3258e <_http_client_read_chuked_entity+0x156>
   3256c:	697b      	ldr	r3, [r7, #20]
   3256e:	781b      	ldrb	r3, [r3, #0]
   32570:	2b39      	cmp	r3, #57	; 0x39
   32572:	d80c      	bhi.n	3258e <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   32574:	687b      	ldr	r3, [r7, #4]
   32576:	22e0      	movs	r2, #224	; 0xe0
   32578:	589b      	ldr	r3, [r3, r2]
   3257a:	011b      	lsls	r3, r3, #4
   3257c:	697a      	ldr	r2, [r7, #20]
   3257e:	7812      	ldrb	r2, [r2, #0]
   32580:	189b      	adds	r3, r3, r2
   32582:	3b30      	subs	r3, #48	; 0x30
   32584:	001a      	movs	r2, r3
   32586:	687b      	ldr	r3, [r7, #4]
   32588:	21e0      	movs	r1, #224	; 0xe0
   3258a:	505a      	str	r2, [r3, r1]
   3258c:	e031      	b.n	325f2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   3258e:	697b      	ldr	r3, [r7, #20]
   32590:	781b      	ldrb	r3, [r3, #0]
   32592:	2b60      	cmp	r3, #96	; 0x60
   32594:	d910      	bls.n	325b8 <_http_client_read_chuked_entity+0x180>
   32596:	697b      	ldr	r3, [r7, #20]
   32598:	781b      	ldrb	r3, [r3, #0]
   3259a:	2b66      	cmp	r3, #102	; 0x66
   3259c:	d80c      	bhi.n	325b8 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   3259e:	687b      	ldr	r3, [r7, #4]
   325a0:	22e0      	movs	r2, #224	; 0xe0
   325a2:	589b      	ldr	r3, [r3, r2]
   325a4:	011b      	lsls	r3, r3, #4
   325a6:	697a      	ldr	r2, [r7, #20]
   325a8:	7812      	ldrb	r2, [r2, #0]
   325aa:	189b      	adds	r3, r3, r2
   325ac:	3b61      	subs	r3, #97	; 0x61
   325ae:	001a      	movs	r2, r3
   325b0:	687b      	ldr	r3, [r7, #4]
   325b2:	21e0      	movs	r1, #224	; 0xe0
   325b4:	505a      	str	r2, [r3, r1]
   325b6:	e01c      	b.n	325f2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   325b8:	697b      	ldr	r3, [r7, #20]
   325ba:	781b      	ldrb	r3, [r3, #0]
   325bc:	2b40      	cmp	r3, #64	; 0x40
   325be:	d910      	bls.n	325e2 <_http_client_read_chuked_entity+0x1aa>
   325c0:	697b      	ldr	r3, [r7, #20]
   325c2:	781b      	ldrb	r3, [r3, #0]
   325c4:	2b46      	cmp	r3, #70	; 0x46
   325c6:	d80c      	bhi.n	325e2 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   325c8:	687b      	ldr	r3, [r7, #4]
   325ca:	22e0      	movs	r2, #224	; 0xe0
   325cc:	589b      	ldr	r3, [r3, r2]
   325ce:	011b      	lsls	r3, r3, #4
   325d0:	697a      	ldr	r2, [r7, #20]
   325d2:	7812      	ldrb	r2, [r2, #0]
   325d4:	189b      	adds	r3, r3, r2
   325d6:	3b41      	subs	r3, #65	; 0x41
   325d8:	001a      	movs	r2, r3
   325da:	687b      	ldr	r3, [r7, #4]
   325dc:	21e0      	movs	r1, #224	; 0xe0
   325de:	505a      	str	r2, [r3, r1]
   325e0:	e007      	b.n	325f2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   325e2:	697b      	ldr	r3, [r7, #20]
   325e4:	781b      	ldrb	r3, [r3, #0]
   325e6:	2b3b      	cmp	r3, #59	; 0x3b
   325e8:	d103      	bne.n	325f2 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   325ea:	2301      	movs	r3, #1
   325ec:	61bb      	str	r3, [r7, #24]
   325ee:	e000      	b.n	325f2 <_http_client_read_chuked_entity+0x1ba>
					continue;
   325f0:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   325f2:	697b      	ldr	r3, [r7, #20]
   325f4:	3301      	adds	r3, #1
   325f6:	617b      	str	r3, [r7, #20]
   325f8:	69fb      	ldr	r3, [r7, #28]
   325fa:	3b01      	subs	r3, #1
   325fc:	61fb      	str	r3, [r7, #28]
   325fe:	69fb      	ldr	r3, [r7, #28]
   32600:	2b00      	cmp	r3, #0
   32602:	dca1      	bgt.n	32548 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   32604:	687b      	ldr	r3, [r7, #4]
   32606:	22e0      	movs	r2, #224	; 0xe0
   32608:	589a      	ldr	r2, [r3, r2]
   3260a:	687b      	ldr	r3, [r7, #4]
   3260c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3260e:	429a      	cmp	r2, r3
   32610:	dd07      	ble.n	32622 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   32612:	238b      	movs	r3, #139	; 0x8b
   32614:	425a      	negs	r2, r3
   32616:	687b      	ldr	r3, [r7, #4]
   32618:	0011      	movs	r1, r2
   3261a:	0018      	movs	r0, r3
   3261c:	4b09      	ldr	r3, [pc, #36]	; (32644 <_http_client_read_chuked_entity+0x20c>)
   3261e:	4798      	blx	r3
				return;
   32620:	e00d      	b.n	3263e <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   32622:	69fb      	ldr	r3, [r7, #28]
   32624:	2b00      	cmp	r3, #0
   32626:	d105      	bne.n	32634 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   32628:	687b      	ldr	r3, [r7, #4]
   3262a:	21e0      	movs	r1, #224	; 0xe0
   3262c:	2201      	movs	r2, #1
   3262e:	4252      	negs	r2, r2
   32630:	505a      	str	r2, [r3, r1]
				return;
   32632:	e004      	b.n	3263e <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   32634:	687b      	ldr	r3, [r7, #4]
   32636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32638:	2b00      	cmp	r3, #0
   3263a:	d000      	beq.n	3263e <_http_client_read_chuked_entity+0x206>
   3263c:	e708      	b.n	32450 <_http_client_read_chuked_entity+0x18>
}
   3263e:	46bd      	mov	sp, r7
   32640:	b008      	add	sp, #32
   32642:	bd80      	pop	{r7, pc}
   32644:	00031811 	.word	0x00031811
   32648:	000327f9 	.word	0x000327f9

0003264c <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   3264c:	b580      	push	{r7, lr}
   3264e:	b086      	sub	sp, #24
   32650:	af00      	add	r7, sp, #0
   32652:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   32654:	687b      	ldr	r3, [r7, #4]
   32656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32658:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   3265a:	687b      	ldr	r3, [r7, #4]
   3265c:	22dc      	movs	r2, #220	; 0xdc
   3265e:	589b      	ldr	r3, [r3, r2]
   32660:	2b00      	cmp	r3, #0
   32662:	db58      	blt.n	32716 <_http_client_handle_entity+0xca>
   32664:	687b      	ldr	r3, [r7, #4]
   32666:	22dc      	movs	r2, #220	; 0xdc
   32668:	589a      	ldr	r2, [r3, r2]
   3266a:	687b      	ldr	r3, [r7, #4]
   3266c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3266e:	429a      	cmp	r2, r3
   32670:	dc51      	bgt.n	32716 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   32672:	687b      	ldr	r3, [r7, #4]
   32674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32676:	0019      	movs	r1, r3
   32678:	687b      	ldr	r3, [r7, #4]
   3267a:	22dc      	movs	r2, #220	; 0xdc
   3267c:	589b      	ldr	r3, [r3, r2]
   3267e:	4299      	cmp	r1, r3
   32680:	da00      	bge.n	32684 <_http_client_handle_entity+0x38>
   32682:	e0a9      	b.n	327d8 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   32684:	687b      	ldr	r3, [r7, #4]
   32686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32688:	2b00      	cmp	r3, #0
   3268a:	d020      	beq.n	326ce <_http_client_handle_entity+0x82>
   3268c:	687b      	ldr	r3, [r7, #4]
   3268e:	22e4      	movs	r2, #228	; 0xe4
   32690:	5a9b      	ldrh	r3, [r3, r2]
   32692:	2b00      	cmp	r3, #0
   32694:	d01b      	beq.n	326ce <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   32696:	687b      	ldr	r3, [r7, #4]
   32698:	22e4      	movs	r2, #228	; 0xe4
   3269a:	5a9a      	ldrh	r2, [r3, r2]
   3269c:	2308      	movs	r3, #8
   3269e:	18fb      	adds	r3, r7, r3
   326a0:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   326a2:	2308      	movs	r3, #8
   326a4:	18fb      	adds	r3, r7, r3
   326a6:	2200      	movs	r2, #0
   326a8:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   326aa:	687b      	ldr	r3, [r7, #4]
   326ac:	22dc      	movs	r2, #220	; 0xdc
   326ae:	589b      	ldr	r3, [r3, r2]
   326b0:	001a      	movs	r2, r3
   326b2:	2308      	movs	r3, #8
   326b4:	18fb      	adds	r3, r7, r3
   326b6:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   326b8:	2308      	movs	r3, #8
   326ba:	18fb      	adds	r3, r7, r3
   326bc:	697a      	ldr	r2, [r7, #20]
   326be:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   326c0:	687b      	ldr	r3, [r7, #4]
   326c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   326c4:	2208      	movs	r2, #8
   326c6:	18ba      	adds	r2, r7, r2
   326c8:	6878      	ldr	r0, [r7, #4]
   326ca:	2102      	movs	r1, #2
   326cc:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   326ce:	687b      	ldr	r3, [r7, #4]
   326d0:	22d8      	movs	r2, #216	; 0xd8
   326d2:	2100      	movs	r1, #0
   326d4:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   326d6:	687b      	ldr	r3, [r7, #4]
   326d8:	22e4      	movs	r2, #228	; 0xe4
   326da:	2100      	movs	r1, #0
   326dc:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   326de:	687b      	ldr	r3, [r7, #4]
   326e0:	2241      	movs	r2, #65	; 0x41
   326e2:	5c9b      	ldrb	r3, [r3, r2]
   326e4:	2202      	movs	r2, #2
   326e6:	4013      	ands	r3, r2
   326e8:	b2db      	uxtb	r3, r3
   326ea:	2b00      	cmp	r3, #0
   326ec:	d105      	bne.n	326fa <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   326ee:	687b      	ldr	r3, [r7, #4]
   326f0:	2100      	movs	r1, #0
   326f2:	0018      	movs	r0, r3
   326f4:	4b3b      	ldr	r3, [pc, #236]	; (327e4 <_http_client_handle_entity+0x198>)
   326f6:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   326f8:	e06e      	b.n	327d8 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   326fa:	687b      	ldr	r3, [r7, #4]
   326fc:	22dc      	movs	r2, #220	; 0xdc
   326fe:	589b      	ldr	r3, [r3, r2]
   32700:	001a      	movs	r2, r3
   32702:	697b      	ldr	r3, [r7, #20]
   32704:	189a      	adds	r2, r3, r2
   32706:	687b      	ldr	r3, [r7, #4]
   32708:	0011      	movs	r1, r2
   3270a:	0018      	movs	r0, r3
   3270c:	4b36      	ldr	r3, [pc, #216]	; (327e8 <_http_client_handle_entity+0x19c>)
   3270e:	4798      	blx	r3
				return module->recved_size;
   32710:	687b      	ldr	r3, [r7, #4]
   32712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32714:	e061      	b.n	327da <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   32716:	687b      	ldr	r3, [r7, #4]
   32718:	22dc      	movs	r2, #220	; 0xdc
   3271a:	589b      	ldr	r3, [r3, r2]
   3271c:	2b00      	cmp	r3, #0
   3271e:	db57      	blt.n	327d0 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   32720:	687b      	ldr	r3, [r7, #4]
   32722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32724:	2308      	movs	r3, #8
   32726:	18fb      	adds	r3, r7, r3
   32728:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   3272a:	2308      	movs	r3, #8
   3272c:	18fb      	adds	r3, r7, r3
   3272e:	697a      	ldr	r2, [r7, #20]
   32730:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   32732:	687b      	ldr	r3, [r7, #4]
   32734:	22e0      	movs	r2, #224	; 0xe0
   32736:	589a      	ldr	r2, [r3, r2]
   32738:	687b      	ldr	r3, [r7, #4]
   3273a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3273c:	18d2      	adds	r2, r2, r3
   3273e:	687b      	ldr	r3, [r7, #4]
   32740:	21e0      	movs	r1, #224	; 0xe0
   32742:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   32744:	687b      	ldr	r3, [r7, #4]
   32746:	22dc      	movs	r2, #220	; 0xdc
   32748:	589a      	ldr	r2, [r3, r2]
   3274a:	687b      	ldr	r3, [r7, #4]
   3274c:	21e0      	movs	r1, #224	; 0xe0
   3274e:	585b      	ldr	r3, [r3, r1]
   32750:	429a      	cmp	r2, r3
   32752:	dc0c      	bgt.n	3276e <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32754:	687b      	ldr	r3, [r7, #4]
   32756:	22d8      	movs	r2, #216	; 0xd8
   32758:	2100      	movs	r1, #0
   3275a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   3275c:	687b      	ldr	r3, [r7, #4]
   3275e:	22e4      	movs	r2, #228	; 0xe4
   32760:	2100      	movs	r1, #0
   32762:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32764:	2308      	movs	r3, #8
   32766:	18fb      	adds	r3, r7, r3
   32768:	2201      	movs	r2, #1
   3276a:	721a      	strb	r2, [r3, #8]
   3276c:	e003      	b.n	32776 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   3276e:	2308      	movs	r3, #8
   32770:	18fb      	adds	r3, r7, r3
   32772:	2200      	movs	r2, #0
   32774:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   32776:	687b      	ldr	r3, [r7, #4]
   32778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3277a:	2b00      	cmp	r3, #0
   3277c:	d006      	beq.n	3278c <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3277e:	687b      	ldr	r3, [r7, #4]
   32780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32782:	2208      	movs	r2, #8
   32784:	18ba      	adds	r2, r7, r2
   32786:	6878      	ldr	r0, [r7, #4]
   32788:	2103      	movs	r1, #3
   3278a:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   3278c:	2308      	movs	r3, #8
   3278e:	18fb      	adds	r3, r7, r3
   32790:	7a1b      	ldrb	r3, [r3, #8]
   32792:	2b01      	cmp	r3, #1
   32794:	d112      	bne.n	327bc <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   32796:	687b      	ldr	r3, [r7, #4]
   32798:	2241      	movs	r2, #65	; 0x41
   3279a:	5c9b      	ldrb	r3, [r3, r2]
   3279c:	2202      	movs	r2, #2
   3279e:	4013      	ands	r3, r2
   327a0:	b2db      	uxtb	r3, r3
   327a2:	2b00      	cmp	r3, #0
   327a4:	d10a      	bne.n	327bc <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   327a6:	4b11      	ldr	r3, [pc, #68]	; (327ec <_http_client_handle_entity+0x1a0>)
   327a8:	0018      	movs	r0, r3
   327aa:	4b11      	ldr	r3, [pc, #68]	; (327f0 <_http_client_handle_entity+0x1a4>)
   327ac:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   327ae:	687b      	ldr	r3, [r7, #4]
   327b0:	2100      	movs	r1, #0
   327b2:	0018      	movs	r0, r3
   327b4:	4b0b      	ldr	r3, [pc, #44]	; (327e4 <_http_client_handle_entity+0x198>)
   327b6:	4798      	blx	r3
					return 0;
   327b8:	2300      	movs	r3, #0
   327ba:	e00e      	b.n	327da <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   327bc:	687b      	ldr	r3, [r7, #4]
   327be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   327c0:	697a      	ldr	r2, [r7, #20]
   327c2:	18d2      	adds	r2, r2, r3
   327c4:	687b      	ldr	r3, [r7, #4]
   327c6:	0011      	movs	r1, r2
   327c8:	0018      	movs	r0, r3
   327ca:	4b07      	ldr	r3, [pc, #28]	; (327e8 <_http_client_handle_entity+0x19c>)
   327cc:	4798      	blx	r3
   327ce:	e003      	b.n	327d8 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   327d0:	687b      	ldr	r3, [r7, #4]
   327d2:	0018      	movs	r0, r3
   327d4:	4b07      	ldr	r3, [pc, #28]	; (327f4 <_http_client_handle_entity+0x1a8>)
   327d6:	4798      	blx	r3
		}
	}

	return 0;
   327d8:	2300      	movs	r3, #0
}
   327da:	0018      	movs	r0, r3
   327dc:	46bd      	mov	sp, r7
   327de:	b006      	add	sp, #24
   327e0:	bd80      	pop	{r7, pc}
   327e2:	46c0      	nop			; (mov r8, r8)
   327e4:	00031811 	.word	0x00031811
   327e8:	000327f9 	.word	0x000327f9
   327ec:	0003a5e0 	.word	0x0003a5e0
   327f0:	00035185 	.word	0x00035185
   327f4:	00032439 	.word	0x00032439

000327f8 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   327f8:	b580      	push	{r7, lr}
   327fa:	b084      	sub	sp, #16
   327fc:	af00      	add	r7, sp, #0
   327fe:	6078      	str	r0, [r7, #4]
   32800:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   32802:	687b      	ldr	r3, [r7, #4]
   32804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32806:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   32808:	687b      	ldr	r3, [r7, #4]
   3280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3280c:	001a      	movs	r2, r3
   3280e:	683b      	ldr	r3, [r7, #0]
   32810:	1ad2      	subs	r2, r2, r3
   32812:	68fb      	ldr	r3, [r7, #12]
   32814:	18d3      	adds	r3, r2, r3
   32816:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   32818:	68bb      	ldr	r3, [r7, #8]
   3281a:	2b00      	cmp	r3, #0
   3281c:	dd09      	ble.n	32832 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   3281e:	68ba      	ldr	r2, [r7, #8]
   32820:	6839      	ldr	r1, [r7, #0]
   32822:	68fb      	ldr	r3, [r7, #12]
   32824:	0018      	movs	r0, r3
   32826:	4b06      	ldr	r3, [pc, #24]	; (32840 <_http_client_move_buffer+0x48>)
   32828:	4798      	blx	r3
		module->recved_size = remain;
   3282a:	68ba      	ldr	r2, [r7, #8]
   3282c:	687b      	ldr	r3, [r7, #4]
   3282e:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   32830:	e002      	b.n	32838 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   32832:	687b      	ldr	r3, [r7, #4]
   32834:	2200      	movs	r2, #0
   32836:	645a      	str	r2, [r3, #68]	; 0x44
}
   32838:	46c0      	nop			; (mov r8, r8)
   3283a:	46bd      	mov	sp, r7
   3283c:	b004      	add	sp, #16
   3283e:	bd80      	pop	{r7, pc}
   32840:	00034f3f 	.word	0x00034f3f

00032844 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   32844:	b580      	push	{r7, lr}
   32846:	b084      	sub	sp, #16
   32848:	af00      	add	r7, sp, #0
   3284a:	60f8      	str	r0, [r7, #12]
   3284c:	60b9      	str	r1, [r7, #8]
   3284e:	607a      	str	r2, [r7, #4]
   32850:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   32852:	68fb      	ldr	r3, [r7, #12]
   32854:	687a      	ldr	r2, [r7, #4]
   32856:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   32858:	68fb      	ldr	r3, [r7, #12]
   3285a:	68ba      	ldr	r2, [r7, #8]
   3285c:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   3285e:	68fb      	ldr	r3, [r7, #12]
   32860:	2200      	movs	r2, #0
   32862:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   32864:	68fb      	ldr	r3, [r7, #12]
   32866:	683a      	ldr	r2, [r7, #0]
   32868:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   3286a:	68fb      	ldr	r3, [r7, #12]
   3286c:	69ba      	ldr	r2, [r7, #24]
   3286e:	60da      	str	r2, [r3, #12]
}
   32870:	46c0      	nop			; (mov r8, r8)
   32872:	46bd      	mov	sp, r7
   32874:	b004      	add	sp, #16
   32876:	bd80      	pop	{r7, pc}

00032878 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   32878:	b580      	push	{r7, lr}
   3287a:	b084      	sub	sp, #16
   3287c:	af00      	add	r7, sp, #0
   3287e:	6078      	str	r0, [r7, #4]
   32880:	000a      	movs	r2, r1
   32882:	1cfb      	adds	r3, r7, #3
   32884:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   32886:	687b      	ldr	r3, [r7, #4]
   32888:	681a      	ldr	r2, [r3, #0]
   3288a:	687b      	ldr	r3, [r7, #4]
   3288c:	685b      	ldr	r3, [r3, #4]
   3288e:	1ad3      	subs	r3, r2, r3
   32890:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   32892:	68fb      	ldr	r3, [r7, #12]
   32894:	2b00      	cmp	r3, #0
   32896:	dc03      	bgt.n	328a0 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   32898:	687b      	ldr	r3, [r7, #4]
   3289a:	0018      	movs	r0, r3
   3289c:	4b08      	ldr	r3, [pc, #32]	; (328c0 <stream_writer_send_8+0x48>)
   3289e:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   328a0:	687b      	ldr	r3, [r7, #4]
   328a2:	6919      	ldr	r1, [r3, #16]
   328a4:	687b      	ldr	r3, [r7, #4]
   328a6:	685b      	ldr	r3, [r3, #4]
   328a8:	1c58      	adds	r0, r3, #1
   328aa:	687a      	ldr	r2, [r7, #4]
   328ac:	6050      	str	r0, [r2, #4]
   328ae:	18cb      	adds	r3, r1, r3
   328b0:	1cfa      	adds	r2, r7, #3
   328b2:	7812      	ldrb	r2, [r2, #0]
   328b4:	701a      	strb	r2, [r3, #0]
}
   328b6:	46c0      	nop			; (mov r8, r8)
   328b8:	46bd      	mov	sp, r7
   328ba:	b004      	add	sp, #16
   328bc:	bd80      	pop	{r7, pc}
   328be:	46c0      	nop			; (mov r8, r8)
   328c0:	00032901 	.word	0x00032901

000328c4 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   328c4:	b580      	push	{r7, lr}
   328c6:	b084      	sub	sp, #16
   328c8:	af00      	add	r7, sp, #0
   328ca:	60f8      	str	r0, [r7, #12]
   328cc:	60b9      	str	r1, [r7, #8]
   328ce:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   328d0:	e00d      	b.n	328ee <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   328d2:	68bb      	ldr	r3, [r7, #8]
   328d4:	781b      	ldrb	r3, [r3, #0]
   328d6:	b25a      	sxtb	r2, r3
   328d8:	68fb      	ldr	r3, [r7, #12]
   328da:	0011      	movs	r1, r2
   328dc:	0018      	movs	r0, r3
   328de:	4b07      	ldr	r3, [pc, #28]	; (328fc <stream_writer_send_buffer+0x38>)
   328e0:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   328e2:	687b      	ldr	r3, [r7, #4]
   328e4:	3b01      	subs	r3, #1
   328e6:	607b      	str	r3, [r7, #4]
   328e8:	68bb      	ldr	r3, [r7, #8]
   328ea:	3301      	adds	r3, #1
   328ec:	60bb      	str	r3, [r7, #8]
   328ee:	687b      	ldr	r3, [r7, #4]
   328f0:	2b00      	cmp	r3, #0
   328f2:	d1ee      	bne.n	328d2 <stream_writer_send_buffer+0xe>
	}
}
   328f4:	46c0      	nop			; (mov r8, r8)
   328f6:	46bd      	mov	sp, r7
   328f8:	b004      	add	sp, #16
   328fa:	bd80      	pop	{r7, pc}
   328fc:	00032879 	.word	0x00032879

00032900 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   32900:	b590      	push	{r4, r7, lr}
   32902:	b083      	sub	sp, #12
   32904:	af00      	add	r7, sp, #0
   32906:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   32908:	687b      	ldr	r3, [r7, #4]
   3290a:	685b      	ldr	r3, [r3, #4]
   3290c:	2b00      	cmp	r3, #0
   3290e:	d00c      	beq.n	3292a <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   32910:	687b      	ldr	r3, [r7, #4]
   32912:	689c      	ldr	r4, [r3, #8]
   32914:	687b      	ldr	r3, [r7, #4]
   32916:	68d8      	ldr	r0, [r3, #12]
   32918:	687b      	ldr	r3, [r7, #4]
   3291a:	6919      	ldr	r1, [r3, #16]
   3291c:	687b      	ldr	r3, [r7, #4]
   3291e:	685b      	ldr	r3, [r3, #4]
   32920:	001a      	movs	r2, r3
   32922:	47a0      	blx	r4
		writer->written = 0;
   32924:	687b      	ldr	r3, [r7, #4]
   32926:	2200      	movs	r2, #0
   32928:	605a      	str	r2, [r3, #4]
	}
}
   3292a:	46c0      	nop			; (mov r8, r8)
   3292c:	46bd      	mov	sp, r7
   3292e:	b003      	add	sp, #12
   32930:	bd90      	pop	{r4, r7, pc}
	...

00032934 <system_cpu_clock_get_hz>:
{
   32934:	b580      	push	{r7, lr}
   32936:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   32938:	2000      	movs	r0, #0
   3293a:	4b05      	ldr	r3, [pc, #20]	; (32950 <system_cpu_clock_get_hz+0x1c>)
   3293c:	4798      	blx	r3
   3293e:	0002      	movs	r2, r0
   32940:	4b04      	ldr	r3, [pc, #16]	; (32954 <system_cpu_clock_get_hz+0x20>)
   32942:	7a1b      	ldrb	r3, [r3, #8]
   32944:	b2db      	uxtb	r3, r3
   32946:	40da      	lsrs	r2, r3
   32948:	0013      	movs	r3, r2
}
   3294a:	0018      	movs	r0, r3
   3294c:	46bd      	mov	sp, r7
   3294e:	bd80      	pop	{r7, pc}
   32950:	0002a315 	.word	0x0002a315
   32954:	40000400 	.word	0x40000400

00032958 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   32958:	b580      	push	{r7, lr}
   3295a:	b084      	sub	sp, #16
   3295c:	af00      	add	r7, sp, #0
   3295e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   32960:	687b      	ldr	r3, [r7, #4]
   32962:	681b      	ldr	r3, [r3, #0]
   32964:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   32966:	46c0      	nop			; (mov r8, r8)
   32968:	68fb      	ldr	r3, [r7, #12]
   3296a:	689b      	ldr	r3, [r3, #8]
   3296c:	2202      	movs	r2, #2
   3296e:	4013      	ands	r3, r2
   32970:	d1fa      	bne.n	32968 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   32972:	68fb      	ldr	r3, [r7, #12]
   32974:	681b      	ldr	r3, [r3, #0]
   32976:	2202      	movs	r2, #2
   32978:	431a      	orrs	r2, r3
   3297a:	68fb      	ldr	r3, [r7, #12]
   3297c:	601a      	str	r2, [r3, #0]
}
   3297e:	46c0      	nop			; (mov r8, r8)
   32980:	46bd      	mov	sp, r7
   32982:	b004      	add	sp, #16
   32984:	bd80      	pop	{r7, pc}
	...

00032988 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   32988:	b580      	push	{r7, lr}
   3298a:	b082      	sub	sp, #8
   3298c:	af00      	add	r7, sp, #0
   3298e:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   32990:	4b04      	ldr	r3, [pc, #16]	; (329a4 <sw_timer_tcc_callback+0x1c>)
   32992:	681b      	ldr	r3, [r3, #0]
   32994:	1c5a      	adds	r2, r3, #1
   32996:	4b03      	ldr	r3, [pc, #12]	; (329a4 <sw_timer_tcc_callback+0x1c>)
   32998:	601a      	str	r2, [r3, #0]
}
   3299a:	46c0      	nop			; (mov r8, r8)
   3299c:	46bd      	mov	sp, r7
   3299e:	b002      	add	sp, #8
   329a0:	bd80      	pop	{r7, pc}
   329a2:	46c0      	nop			; (mov r8, r8)
   329a4:	20004710 	.word	0x20004710

000329a8 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   329a8:	b580      	push	{r7, lr}
   329aa:	b082      	sub	sp, #8
   329ac:	af00      	add	r7, sp, #0
   329ae:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   329b0:	687b      	ldr	r3, [r7, #4]
   329b2:	2264      	movs	r2, #100	; 0x64
   329b4:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   329b6:	687b      	ldr	r3, [r7, #4]
   329b8:	2200      	movs	r2, #0
   329ba:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   329bc:	687b      	ldr	r3, [r7, #4]
   329be:	2200      	movs	r2, #0
   329c0:	705a      	strb	r2, [r3, #1]
}
   329c2:	46c0      	nop			; (mov r8, r8)
   329c4:	46bd      	mov	sp, r7
   329c6:	b002      	add	sp, #8
   329c8:	bd80      	pop	{r7, pc}
	...

000329cc <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   329cc:	b590      	push	{r4, r7, lr}
   329ce:	b0b1      	sub	sp, #196	; 0xc4
   329d0:	af00      	add	r7, sp, #0
   329d2:	6078      	str	r0, [r7, #4]
   329d4:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   329d6:	230c      	movs	r3, #12
   329d8:	18fb      	adds	r3, r7, r3
   329da:	4a2e      	ldr	r2, [pc, #184]	; (32a94 <sw_timer_init+0xc8>)
   329dc:	ca13      	ldmia	r2!, {r0, r1, r4}
   329de:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   329e0:	683b      	ldr	r3, [r7, #0]
   329e2:	885b      	ldrh	r3, [r3, #2]
   329e4:	001a      	movs	r2, r3
   329e6:	687b      	ldr	r3, [r7, #4]
   329e8:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   329ea:	687b      	ldr	r3, [r7, #4]
   329ec:	3314      	adds	r3, #20
   329ee:	22bc      	movs	r2, #188	; 0xbc
   329f0:	18ba      	adds	r2, r7, r2
   329f2:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   329f4:	683b      	ldr	r3, [r7, #0]
   329f6:	781b      	ldrb	r3, [r3, #0]
   329f8:	001a      	movs	r2, r3
   329fa:	230c      	movs	r3, #12
   329fc:	18fb      	adds	r3, r7, r3
   329fe:	0092      	lsls	r2, r2, #2
   32a00:	58d2      	ldr	r2, [r2, r3]
   32a02:	2318      	movs	r3, #24
   32a04:	18fb      	adds	r3, r7, r3
   32a06:	0011      	movs	r1, r2
   32a08:	0018      	movs	r0, r3
   32a0a:	4b23      	ldr	r3, [pc, #140]	; (32a98 <sw_timer_init+0xcc>)
   32a0c:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   32a0e:	4b23      	ldr	r3, [pc, #140]	; (32a9c <sw_timer_init+0xd0>)
   32a10:	4798      	blx	r3
   32a12:	0004      	movs	r4, r0
   32a14:	683b      	ldr	r3, [r7, #0]
   32a16:	885b      	ldrh	r3, [r3, #2]
   32a18:	001a      	movs	r2, r3
   32a1a:	4b21      	ldr	r3, [pc, #132]	; (32aa0 <sw_timer_init+0xd4>)
   32a1c:	0011      	movs	r1, r2
   32a1e:	22fa      	movs	r2, #250	; 0xfa
   32a20:	0210      	lsls	r0, r2, #8
   32a22:	4798      	blx	r3
   32a24:	0003      	movs	r3, r0
   32a26:	001a      	movs	r2, r3
   32a28:	4b1e      	ldr	r3, [pc, #120]	; (32aa4 <sw_timer_init+0xd8>)
   32a2a:	0011      	movs	r1, r2
   32a2c:	0020      	movs	r0, r4
   32a2e:	4798      	blx	r3
   32a30:	0003      	movs	r3, r0
   32a32:	001a      	movs	r2, r3
   32a34:	2318      	movs	r3, #24
   32a36:	18fb      	adds	r3, r7, r3
   32a38:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   32a3a:	2318      	movs	r3, #24
   32a3c:	18fb      	adds	r3, r7, r3
   32a3e:	2205      	movs	r2, #5
   32a40:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   32a42:	683b      	ldr	r3, [r7, #0]
   32a44:	781b      	ldrb	r3, [r3, #0]
   32a46:	001a      	movs	r2, r3
   32a48:	230c      	movs	r3, #12
   32a4a:	18fb      	adds	r3, r7, r3
   32a4c:	0092      	lsls	r2, r2, #2
   32a4e:	58d1      	ldr	r1, [r2, r3]
   32a50:	2318      	movs	r3, #24
   32a52:	18fa      	adds	r2, r7, r3
   32a54:	23bc      	movs	r3, #188	; 0xbc
   32a56:	18fb      	adds	r3, r7, r3
   32a58:	681b      	ldr	r3, [r3, #0]
   32a5a:	0018      	movs	r0, r3
   32a5c:	4b12      	ldr	r3, [pc, #72]	; (32aa8 <sw_timer_init+0xdc>)
   32a5e:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   32a60:	683b      	ldr	r3, [r7, #0]
   32a62:	785b      	ldrb	r3, [r3, #1]
   32a64:	3308      	adds	r3, #8
   32a66:	b2da      	uxtb	r2, r3
   32a68:	4910      	ldr	r1, [pc, #64]	; (32aac <sw_timer_init+0xe0>)
   32a6a:	23bc      	movs	r3, #188	; 0xbc
   32a6c:	18fb      	adds	r3, r7, r3
   32a6e:	681b      	ldr	r3, [r3, #0]
   32a70:	0018      	movs	r0, r3
   32a72:	4b0f      	ldr	r3, [pc, #60]	; (32ab0 <sw_timer_init+0xe4>)
   32a74:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   32a76:	683b      	ldr	r3, [r7, #0]
   32a78:	785b      	ldrb	r3, [r3, #1]
   32a7a:	3308      	adds	r3, #8
   32a7c:	b2da      	uxtb	r2, r3
   32a7e:	23bc      	movs	r3, #188	; 0xbc
   32a80:	18fb      	adds	r3, r7, r3
   32a82:	681b      	ldr	r3, [r3, #0]
   32a84:	0011      	movs	r1, r2
   32a86:	0018      	movs	r0, r3
   32a88:	4b0a      	ldr	r3, [pc, #40]	; (32ab4 <sw_timer_init+0xe8>)
   32a8a:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   32a8c:	46c0      	nop			; (mov r8, r8)
   32a8e:	46bd      	mov	sp, r7
   32a90:	b031      	add	sp, #196	; 0xc4
   32a92:	bd90      	pop	{r4, r7, pc}
   32a94:	0003a620 	.word	0x0003a620
   32a98:	0002a8ad 	.word	0x0002a8ad
   32a9c:	00032935 	.word	0x00032935
   32aa0:	0003309d 	.word	0x0003309d
   32aa4:	00032f89 	.word	0x00032f89
   32aa8:	0002af09 	.word	0x0002af09
   32aac:	00032989 	.word	0x00032989
   32ab0:	0002b321 	.word	0x0002b321
   32ab4:	0002b361 	.word	0x0002b361

00032ab8 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   32ab8:	b580      	push	{r7, lr}
   32aba:	b084      	sub	sp, #16
   32abc:	af00      	add	r7, sp, #0
   32abe:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   32ac0:	687b      	ldr	r3, [r7, #4]
   32ac2:	3314      	adds	r3, #20
   32ac4:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   32ac6:	68fb      	ldr	r3, [r7, #12]
   32ac8:	0018      	movs	r0, r3
   32aca:	4b03      	ldr	r3, [pc, #12]	; (32ad8 <sw_timer_enable+0x20>)
   32acc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   32ace:	46c0      	nop			; (mov r8, r8)
   32ad0:	46bd      	mov	sp, r7
   32ad2:	b004      	add	sp, #16
   32ad4:	bd80      	pop	{r7, pc}
   32ad6:	46c0      	nop			; (mov r8, r8)
   32ad8:	00032959 	.word	0x00032959

00032adc <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   32adc:	b580      	push	{r7, lr}
   32ade:	b086      	sub	sp, #24
   32ae0:	af00      	add	r7, sp, #0
   32ae2:	60f8      	str	r0, [r7, #12]
   32ae4:	60b9      	str	r1, [r7, #8]
   32ae6:	607a      	str	r2, [r7, #4]
   32ae8:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32aea:	2300      	movs	r3, #0
   32aec:	617b      	str	r3, [r7, #20]
   32aee:	e032      	b.n	32b56 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   32af0:	68f9      	ldr	r1, [r7, #12]
   32af2:	697a      	ldr	r2, [r7, #20]
   32af4:	0013      	movs	r3, r2
   32af6:	009b      	lsls	r3, r3, #2
   32af8:	189b      	adds	r3, r3, r2
   32afa:	009b      	lsls	r3, r3, #2
   32afc:	5c5b      	ldrb	r3, [r3, r1]
   32afe:	07db      	lsls	r3, r3, #31
   32b00:	0fdb      	lsrs	r3, r3, #31
   32b02:	b2db      	uxtb	r3, r3
   32b04:	2b00      	cmp	r3, #0
   32b06:	d123      	bne.n	32b50 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   32b08:	697a      	ldr	r2, [r7, #20]
   32b0a:	0013      	movs	r3, r2
   32b0c:	009b      	lsls	r3, r3, #2
   32b0e:	189b      	adds	r3, r3, r2
   32b10:	009b      	lsls	r3, r3, #2
   32b12:	68fa      	ldr	r2, [r7, #12]
   32b14:	18d3      	adds	r3, r2, r3
   32b16:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   32b18:	693b      	ldr	r3, [r7, #16]
   32b1a:	68ba      	ldr	r2, [r7, #8]
   32b1c:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   32b1e:	693b      	ldr	r3, [r7, #16]
   32b20:	781a      	ldrb	r2, [r3, #0]
   32b22:	2102      	movs	r1, #2
   32b24:	438a      	bics	r2, r1
   32b26:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   32b28:	693b      	ldr	r3, [r7, #16]
   32b2a:	687a      	ldr	r2, [r7, #4]
   32b2c:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   32b2e:	68fb      	ldr	r3, [r7, #12]
   32b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32b32:	4b0d      	ldr	r3, [pc, #52]	; (32b68 <sw_timer_register_callback+0x8c>)
   32b34:	0011      	movs	r1, r2
   32b36:	6838      	ldr	r0, [r7, #0]
   32b38:	4798      	blx	r3
   32b3a:	0003      	movs	r3, r0
   32b3c:	001a      	movs	r2, r3
   32b3e:	693b      	ldr	r3, [r7, #16]
   32b40:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   32b42:	693b      	ldr	r3, [r7, #16]
   32b44:	781a      	ldrb	r2, [r3, #0]
   32b46:	2101      	movs	r1, #1
   32b48:	430a      	orrs	r2, r1
   32b4a:	701a      	strb	r2, [r3, #0]
			return index;
   32b4c:	697b      	ldr	r3, [r7, #20]
   32b4e:	e007      	b.n	32b60 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32b50:	697b      	ldr	r3, [r7, #20]
   32b52:	3301      	adds	r3, #1
   32b54:	617b      	str	r3, [r7, #20]
   32b56:	697b      	ldr	r3, [r7, #20]
   32b58:	2b00      	cmp	r3, #0
   32b5a:	ddc9      	ble.n	32af0 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   32b5c:	2301      	movs	r3, #1
   32b5e:	425b      	negs	r3, r3
}
   32b60:	0018      	movs	r0, r3
   32b62:	46bd      	mov	sp, r7
   32b64:	b006      	add	sp, #24
   32b66:	bd80      	pop	{r7, pc}
   32b68:	00032f89 	.word	0x00032f89

00032b6c <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   32b6c:	b580      	push	{r7, lr}
   32b6e:	b086      	sub	sp, #24
   32b70:	af00      	add	r7, sp, #0
   32b72:	60f8      	str	r0, [r7, #12]
   32b74:	60b9      	str	r1, [r7, #8]
   32b76:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   32b78:	68ba      	ldr	r2, [r7, #8]
   32b7a:	0013      	movs	r3, r2
   32b7c:	009b      	lsls	r3, r3, #2
   32b7e:	189b      	adds	r3, r3, r2
   32b80:	009b      	lsls	r3, r3, #2
   32b82:	68fa      	ldr	r2, [r7, #12]
   32b84:	18d3      	adds	r3, r2, r3
   32b86:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   32b88:	697b      	ldr	r3, [r7, #20]
   32b8a:	781a      	ldrb	r2, [r3, #0]
   32b8c:	2102      	movs	r1, #2
   32b8e:	430a      	orrs	r2, r1
   32b90:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   32b92:	68fb      	ldr	r3, [r7, #12]
   32b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32b96:	4b07      	ldr	r3, [pc, #28]	; (32bb4 <sw_timer_enable_callback+0x48>)
   32b98:	0011      	movs	r1, r2
   32b9a:	6878      	ldr	r0, [r7, #4]
   32b9c:	4798      	blx	r3
   32b9e:	0003      	movs	r3, r0
   32ba0:	001a      	movs	r2, r3
   32ba2:	4b05      	ldr	r3, [pc, #20]	; (32bb8 <sw_timer_enable_callback+0x4c>)
   32ba4:	681b      	ldr	r3, [r3, #0]
   32ba6:	18d2      	adds	r2, r2, r3
   32ba8:	697b      	ldr	r3, [r7, #20]
   32baa:	611a      	str	r2, [r3, #16]
}
   32bac:	46c0      	nop			; (mov r8, r8)
   32bae:	46bd      	mov	sp, r7
   32bb0:	b006      	add	sp, #24
   32bb2:	bd80      	pop	{r7, pc}
   32bb4:	00032f89 	.word	0x00032f89
   32bb8:	20004710 	.word	0x20004710

00032bbc <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   32bbc:	b580      	push	{r7, lr}
   32bbe:	b084      	sub	sp, #16
   32bc0:	af00      	add	r7, sp, #0
   32bc2:	6078      	str	r0, [r7, #4]
   32bc4:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   32bc6:	683a      	ldr	r2, [r7, #0]
   32bc8:	0013      	movs	r3, r2
   32bca:	009b      	lsls	r3, r3, #2
   32bcc:	189b      	adds	r3, r3, r2
   32bce:	009b      	lsls	r3, r3, #2
   32bd0:	687a      	ldr	r2, [r7, #4]
   32bd2:	18d3      	adds	r3, r2, r3
   32bd4:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   32bd6:	68fb      	ldr	r3, [r7, #12]
   32bd8:	781a      	ldrb	r2, [r3, #0]
   32bda:	2102      	movs	r1, #2
   32bdc:	438a      	bics	r2, r1
   32bde:	701a      	strb	r2, [r3, #0]
}
   32be0:	46c0      	nop			; (mov r8, r8)
   32be2:	46bd      	mov	sp, r7
   32be4:	b004      	add	sp, #16
   32be6:	bd80      	pop	{r7, pc}

00032be8 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   32be8:	b590      	push	{r4, r7, lr}
   32bea:	b085      	sub	sp, #20
   32bec:	af00      	add	r7, sp, #0
   32bee:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32bf0:	2300      	movs	r3, #0
   32bf2:	60fb      	str	r3, [r7, #12]
   32bf4:	e053      	b.n	32c9e <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   32bf6:	6879      	ldr	r1, [r7, #4]
   32bf8:	68fa      	ldr	r2, [r7, #12]
   32bfa:	0013      	movs	r3, r2
   32bfc:	009b      	lsls	r3, r3, #2
   32bfe:	189b      	adds	r3, r3, r2
   32c00:	009b      	lsls	r3, r3, #2
   32c02:	5c5b      	ldrb	r3, [r3, r1]
   32c04:	07db      	lsls	r3, r3, #31
   32c06:	0fdb      	lsrs	r3, r3, #31
   32c08:	b2db      	uxtb	r3, r3
   32c0a:	2b00      	cmp	r3, #0
   32c0c:	d044      	beq.n	32c98 <sw_timer_task+0xb0>
   32c0e:	6879      	ldr	r1, [r7, #4]
   32c10:	68fa      	ldr	r2, [r7, #12]
   32c12:	0013      	movs	r3, r2
   32c14:	009b      	lsls	r3, r3, #2
   32c16:	189b      	adds	r3, r3, r2
   32c18:	009b      	lsls	r3, r3, #2
   32c1a:	5c5b      	ldrb	r3, [r3, r1]
   32c1c:	079b      	lsls	r3, r3, #30
   32c1e:	0fdb      	lsrs	r3, r3, #31
   32c20:	b2db      	uxtb	r3, r3
   32c22:	2b00      	cmp	r3, #0
   32c24:	d038      	beq.n	32c98 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   32c26:	68fa      	ldr	r2, [r7, #12]
   32c28:	0013      	movs	r3, r2
   32c2a:	009b      	lsls	r3, r3, #2
   32c2c:	189b      	adds	r3, r3, r2
   32c2e:	009b      	lsls	r3, r3, #2
   32c30:	687a      	ldr	r2, [r7, #4]
   32c32:	18d3      	adds	r3, r2, r3
   32c34:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   32c36:	68bb      	ldr	r3, [r7, #8]
   32c38:	691a      	ldr	r2, [r3, #16]
   32c3a:	4b1c      	ldr	r3, [pc, #112]	; (32cac <sw_timer_task+0xc4>)
   32c3c:	681b      	ldr	r3, [r3, #0]
   32c3e:	1ad3      	subs	r3, r2, r3
   32c40:	d52a      	bpl.n	32c98 <sw_timer_task+0xb0>
   32c42:	68bb      	ldr	r3, [r7, #8]
   32c44:	781b      	ldrb	r3, [r3, #0]
   32c46:	2204      	movs	r2, #4
   32c48:	4013      	ands	r3, r2
   32c4a:	b2db      	uxtb	r3, r3
   32c4c:	2b00      	cmp	r3, #0
   32c4e:	d123      	bne.n	32c98 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   32c50:	68bb      	ldr	r3, [r7, #8]
   32c52:	781a      	ldrb	r2, [r3, #0]
   32c54:	2104      	movs	r1, #4
   32c56:	430a      	orrs	r2, r1
   32c58:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   32c5a:	68bb      	ldr	r3, [r7, #8]
   32c5c:	68db      	ldr	r3, [r3, #12]
   32c5e:	2b00      	cmp	r3, #0
   32c60:	d007      	beq.n	32c72 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   32c62:	68bb      	ldr	r3, [r7, #8]
   32c64:	68da      	ldr	r2, [r3, #12]
   32c66:	4b11      	ldr	r3, [pc, #68]	; (32cac <sw_timer_task+0xc4>)
   32c68:	681b      	ldr	r3, [r3, #0]
   32c6a:	18d2      	adds	r2, r2, r3
   32c6c:	68bb      	ldr	r3, [r7, #8]
   32c6e:	611a      	str	r2, [r3, #16]
   32c70:	e004      	b.n	32c7c <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   32c72:	68bb      	ldr	r3, [r7, #8]
   32c74:	781a      	ldrb	r2, [r3, #0]
   32c76:	2102      	movs	r1, #2
   32c78:	438a      	bics	r2, r1
   32c7a:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   32c7c:	68bb      	ldr	r3, [r7, #8]
   32c7e:	685c      	ldr	r4, [r3, #4]
   32c80:	68bb      	ldr	r3, [r7, #8]
   32c82:	689a      	ldr	r2, [r3, #8]
   32c84:	68bb      	ldr	r3, [r7, #8]
   32c86:	68db      	ldr	r3, [r3, #12]
   32c88:	68f9      	ldr	r1, [r7, #12]
   32c8a:	6878      	ldr	r0, [r7, #4]
   32c8c:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   32c8e:	68bb      	ldr	r3, [r7, #8]
   32c90:	781a      	ldrb	r2, [r3, #0]
   32c92:	2104      	movs	r1, #4
   32c94:	438a      	bics	r2, r1
   32c96:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32c98:	68fb      	ldr	r3, [r7, #12]
   32c9a:	3301      	adds	r3, #1
   32c9c:	60fb      	str	r3, [r7, #12]
   32c9e:	68fb      	ldr	r3, [r7, #12]
   32ca0:	2b00      	cmp	r3, #0
   32ca2:	dda8      	ble.n	32bf6 <sw_timer_task+0xe>
			}
		}
	}
}
   32ca4:	46c0      	nop			; (mov r8, r8)
   32ca6:	46bd      	mov	sp, r7
   32ca8:	b005      	add	sp, #20
   32caa:	bd90      	pop	{r4, r7, pc}
   32cac:	20004710 	.word	0x20004710

00032cb0 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   32cb0:	b580      	push	{r7, lr}
   32cb2:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   32cb4:	4b06      	ldr	r3, [pc, #24]	; (32cd0 <main+0x20>)
   32cb6:	4798      	blx	r3
		//delay_ms(2000);
		//servo_setDuty(3);
		//delay_ms(2000);
	//}
    /* Initialize the UART console. */
    InitializeSerialConsole();
   32cb8:	4b06      	ldr	r3, [pc, #24]	; (32cd4 <main+0x24>)
   32cba:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   32cbc:	2001      	movs	r0, #1
   32cbe:	4b06      	ldr	r3, [pc, #24]	; (32cd8 <main+0x28>)
   32cc0:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   32cc2:	4b06      	ldr	r3, [pc, #24]	; (32cdc <main+0x2c>)
   32cc4:	4798      	blx	r3

    return 0;  // Will not get here
   32cc6:	2300      	movs	r3, #0
}
   32cc8:	0018      	movs	r0, r3
   32cca:	46bd      	mov	sp, r7
   32ccc:	bd80      	pop	{r7, pc}
   32cce:	46c0      	nop			; (mov r8, r8)
   32cd0:	0002a7a1 	.word	0x0002a7a1
   32cd4:	0001e245 	.word	0x0001e245
   32cd8:	00018911 	.word	0x00018911
   32cdc:	0001c89d 	.word	0x0001c89d

00032ce0 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   32ce0:	b580      	push	{r7, lr}
   32ce2:	b082      	sub	sp, #8
   32ce4:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   32ce6:	4b29      	ldr	r3, [pc, #164]	; (32d8c <vApplicationDaemonTaskStartupHook+0xac>)
   32ce8:	0018      	movs	r0, r3
   32cea:	4b29      	ldr	r3, [pc, #164]	; (32d90 <vApplicationDaemonTaskStartupHook+0xb0>)
   32cec:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   32cee:	4b29      	ldr	r3, [pc, #164]	; (32d94 <vApplicationDaemonTaskStartupHook+0xb4>)
   32cf0:	0018      	movs	r0, r3
   32cf2:	4b27      	ldr	r3, [pc, #156]	; (32d90 <vApplicationDaemonTaskStartupHook+0xb0>)
   32cf4:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   32cf6:	4b28      	ldr	r3, [pc, #160]	; (32d98 <vApplicationDaemonTaskStartupHook+0xb8>)
   32cf8:	4798      	blx	r3
   32cfa:	1e03      	subs	r3, r0, #0
   32cfc:	d004      	beq.n	32d08 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   32cfe:	4b27      	ldr	r3, [pc, #156]	; (32d9c <vApplicationDaemonTaskStartupHook+0xbc>)
   32d00:	0018      	movs	r0, r3
   32d02:	4b23      	ldr	r3, [pc, #140]	; (32d90 <vApplicationDaemonTaskStartupHook+0xb0>)
   32d04:	4798      	blx	r3
   32d06:	e003      	b.n	32d10 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   32d08:	4b25      	ldr	r3, [pc, #148]	; (32da0 <vApplicationDaemonTaskStartupHook+0xc0>)
   32d0a:	0018      	movs	r0, r3
   32d0c:	4b20      	ldr	r3, [pc, #128]	; (32d90 <vApplicationDaemonTaskStartupHook+0xb0>)
   32d0e:	4798      	blx	r3
    }

    if (0 != InitializeSeesaw()) {
   32d10:	4b24      	ldr	r3, [pc, #144]	; (32da4 <vApplicationDaemonTaskStartupHook+0xc4>)
   32d12:	4798      	blx	r3
   32d14:	1e03      	subs	r3, r0, #0
   32d16:	d004      	beq.n	32d22 <vApplicationDaemonTaskStartupHook+0x42>
        SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   32d18:	4b23      	ldr	r3, [pc, #140]	; (32da8 <vApplicationDaemonTaskStartupHook+0xc8>)
   32d1a:	0018      	movs	r0, r3
   32d1c:	4b1c      	ldr	r3, [pc, #112]	; (32d90 <vApplicationDaemonTaskStartupHook+0xb0>)
   32d1e:	4798      	blx	r3
   32d20:	e003      	b.n	32d2a <vApplicationDaemonTaskStartupHook+0x4a>
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
   32d22:	4b22      	ldr	r3, [pc, #136]	; (32dac <vApplicationDaemonTaskStartupHook+0xcc>)
   32d24:	0018      	movs	r0, r3
   32d26:	4b1a      	ldr	r3, [pc, #104]	; (32d90 <vApplicationDaemonTaskStartupHook+0xb0>)
   32d28:	4798      	blx	r3
    }

    uint8_t whoamI = 0;
   32d2a:	1dfb      	adds	r3, r7, #7
   32d2c:	2200      	movs	r2, #0
   32d2e:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   32d30:	4b1f      	ldr	r3, [pc, #124]	; (32db0 <vApplicationDaemonTaskStartupHook+0xd0>)
   32d32:	4798      	blx	r3
   32d34:	0002      	movs	r2, r0
   32d36:	1dfb      	adds	r3, r7, #7
   32d38:	0019      	movs	r1, r3
   32d3a:	0010      	movs	r0, r2
   32d3c:	4b1d      	ldr	r3, [pc, #116]	; (32db4 <vApplicationDaemonTaskStartupHook+0xd4>)
   32d3e:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   32d40:	1dfb      	adds	r3, r7, #7
   32d42:	781b      	ldrb	r3, [r3, #0]
   32d44:	2b6c      	cmp	r3, #108	; 0x6c
   32d46:	d004      	beq.n	32d52 <vApplicationDaemonTaskStartupHook+0x72>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   32d48:	4b1b      	ldr	r3, [pc, #108]	; (32db8 <vApplicationDaemonTaskStartupHook+0xd8>)
   32d4a:	0018      	movs	r0, r3
   32d4c:	4b10      	ldr	r3, [pc, #64]	; (32d90 <vApplicationDaemonTaskStartupHook+0xb0>)
   32d4e:	4798      	blx	r3
   32d50:	e010      	b.n	32d74 <vApplicationDaemonTaskStartupHook+0x94>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   32d52:	4b1a      	ldr	r3, [pc, #104]	; (32dbc <vApplicationDaemonTaskStartupHook+0xdc>)
   32d54:	0018      	movs	r0, r3
   32d56:	4b0e      	ldr	r3, [pc, #56]	; (32d90 <vApplicationDaemonTaskStartupHook+0xb0>)
   32d58:	4798      	blx	r3
        if (InitImu() == 0) {
   32d5a:	4b19      	ldr	r3, [pc, #100]	; (32dc0 <vApplicationDaemonTaskStartupHook+0xe0>)
   32d5c:	4798      	blx	r3
   32d5e:	1e03      	subs	r3, r0, #0
   32d60:	d104      	bne.n	32d6c <vApplicationDaemonTaskStartupHook+0x8c>
            SerialConsoleWriteString("IMU initialized!\r\n");
   32d62:	4b18      	ldr	r3, [pc, #96]	; (32dc4 <vApplicationDaemonTaskStartupHook+0xe4>)
   32d64:	0018      	movs	r0, r3
   32d66:	4b0a      	ldr	r3, [pc, #40]	; (32d90 <vApplicationDaemonTaskStartupHook+0xb0>)
   32d68:	4798      	blx	r3
   32d6a:	e003      	b.n	32d74 <vApplicationDaemonTaskStartupHook+0x94>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   32d6c:	4b16      	ldr	r3, [pc, #88]	; (32dc8 <vApplicationDaemonTaskStartupHook+0xe8>)
   32d6e:	0018      	movs	r0, r3
   32d70:	4b07      	ldr	r3, [pc, #28]	; (32d90 <vApplicationDaemonTaskStartupHook+0xb0>)
   32d72:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   32d74:	4b15      	ldr	r3, [pc, #84]	; (32dcc <vApplicationDaemonTaskStartupHook+0xec>)
   32d76:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   32d78:	4b15      	ldr	r3, [pc, #84]	; (32dd0 <vApplicationDaemonTaskStartupHook+0xf0>)
   32d7a:	681b      	ldr	r3, [r3, #0]
   32d7c:	0018      	movs	r0, r3
   32d7e:	4b15      	ldr	r3, [pc, #84]	; (32dd4 <vApplicationDaemonTaskStartupHook+0xf4>)
   32d80:	4798      	blx	r3
}
   32d82:	46c0      	nop			; (mov r8, r8)
   32d84:	46bd      	mov	sp, r7
   32d86:	b002      	add	sp, #8
   32d88:	bd80      	pop	{r7, pc}
   32d8a:	46c0      	nop			; (mov r8, r8)
   32d8c:	0003a62c 	.word	0x0003a62c
   32d90:	0001e2b5 	.word	0x0001e2b5
   32d94:	0003a650 	.word	0x0003a650
   32d98:	0001476d 	.word	0x0001476d
   32d9c:	0003a668 	.word	0x0003a668
   32da0:	0003a68c 	.word	0x0003a68c
   32da4:	000159ad 	.word	0x000159ad
   32da8:	0003a6a8 	.word	0x0003a6a8
   32dac:	0003a6c8 	.word	0x0003a6c8
   32db0:	000158d5 	.word	0x000158d5
   32db4:	000154d9 	.word	0x000154d9
   32db8:	0003a6e0 	.word	0x0003a6e0
   32dbc:	0003a6f4 	.word	0x0003a6f4
   32dc0:	000158e5 	.word	0x000158e5
   32dc4:	0003a704 	.word	0x0003a704
   32dc8:	0003a718 	.word	0x0003a718
   32dcc:	00032dd9 	.word	0x00032dd9
   32dd0:	20004718 	.word	0x20004718
   32dd4:	0001c741 	.word	0x0001c741

00032dd8 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   32dd8:	b590      	push	{r4, r7, lr}
   32dda:	b083      	sub	sp, #12
   32ddc:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   32dde:	4b44      	ldr	r3, [pc, #272]	; (32ef0 <StartTasks+0x118>)
   32de0:	4798      	blx	r3
   32de2:	0003      	movs	r3, r0
   32de4:	4a43      	ldr	r2, [pc, #268]	; (32ef4 <StartTasks+0x11c>)
   32de6:	4844      	ldr	r0, [pc, #272]	; (32ef8 <StartTasks+0x120>)
   32de8:	2140      	movs	r1, #64	; 0x40
   32dea:	4c44      	ldr	r4, [pc, #272]	; (32efc <StartTasks+0x124>)
   32dec:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32dee:	4b42      	ldr	r3, [pc, #264]	; (32ef8 <StartTasks+0x120>)
   32df0:	0018      	movs	r0, r3
   32df2:	4b43      	ldr	r3, [pc, #268]	; (32f00 <StartTasks+0x128>)
   32df4:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   32df6:	23c8      	movs	r3, #200	; 0xc8
   32df8:	005a      	lsls	r2, r3, #1
   32dfa:	4942      	ldr	r1, [pc, #264]	; (32f04 <StartTasks+0x12c>)
   32dfc:	4842      	ldr	r0, [pc, #264]	; (32f08 <StartTasks+0x130>)
   32dfe:	4b43      	ldr	r3, [pc, #268]	; (32f0c <StartTasks+0x134>)
   32e00:	9301      	str	r3, [sp, #4]
   32e02:	2304      	movs	r3, #4
   32e04:	9300      	str	r3, [sp, #0]
   32e06:	2300      	movs	r3, #0
   32e08:	4c41      	ldr	r4, [pc, #260]	; (32f10 <StartTasks+0x138>)
   32e0a:	47a0      	blx	r4
   32e0c:	0003      	movs	r3, r0
   32e0e:	2b01      	cmp	r3, #1
   32e10:	d003      	beq.n	32e1a <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   32e12:	4b40      	ldr	r3, [pc, #256]	; (32f14 <StartTasks+0x13c>)
   32e14:	0018      	movs	r0, r3
   32e16:	4b3a      	ldr	r3, [pc, #232]	; (32f00 <StartTasks+0x128>)
   32e18:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   32e1a:	4b35      	ldr	r3, [pc, #212]	; (32ef0 <StartTasks+0x118>)
   32e1c:	4798      	blx	r3
   32e1e:	0003      	movs	r3, r0
   32e20:	4a3d      	ldr	r2, [pc, #244]	; (32f18 <StartTasks+0x140>)
   32e22:	4835      	ldr	r0, [pc, #212]	; (32ef8 <StartTasks+0x120>)
   32e24:	2140      	movs	r1, #64	; 0x40
   32e26:	4c35      	ldr	r4, [pc, #212]	; (32efc <StartTasks+0x124>)
   32e28:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32e2a:	4b33      	ldr	r3, [pc, #204]	; (32ef8 <StartTasks+0x120>)
   32e2c:	0018      	movs	r0, r3
   32e2e:	4b34      	ldr	r3, [pc, #208]	; (32f00 <StartTasks+0x128>)
   32e30:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   32e32:	23fa      	movs	r3, #250	; 0xfa
   32e34:	009a      	lsls	r2, r3, #2
   32e36:	4939      	ldr	r1, [pc, #228]	; (32f1c <StartTasks+0x144>)
   32e38:	4839      	ldr	r0, [pc, #228]	; (32f20 <StartTasks+0x148>)
   32e3a:	4b3a      	ldr	r3, [pc, #232]	; (32f24 <StartTasks+0x14c>)
   32e3c:	9301      	str	r3, [sp, #4]
   32e3e:	2303      	movs	r3, #3
   32e40:	9300      	str	r3, [sp, #0]
   32e42:	2300      	movs	r3, #0
   32e44:	4c32      	ldr	r4, [pc, #200]	; (32f10 <StartTasks+0x138>)
   32e46:	47a0      	blx	r4
   32e48:	0003      	movs	r3, r0
   32e4a:	2b01      	cmp	r3, #1
   32e4c:	d003      	beq.n	32e56 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   32e4e:	4b36      	ldr	r3, [pc, #216]	; (32f28 <StartTasks+0x150>)
   32e50:	0018      	movs	r0, r3
   32e52:	4b2b      	ldr	r3, [pc, #172]	; (32f00 <StartTasks+0x128>)
   32e54:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   32e56:	4b26      	ldr	r3, [pc, #152]	; (32ef0 <StartTasks+0x118>)
   32e58:	4798      	blx	r3
   32e5a:	0003      	movs	r3, r0
   32e5c:	4a33      	ldr	r2, [pc, #204]	; (32f2c <StartTasks+0x154>)
   32e5e:	4826      	ldr	r0, [pc, #152]	; (32ef8 <StartTasks+0x120>)
   32e60:	2140      	movs	r1, #64	; 0x40
   32e62:	4c26      	ldr	r4, [pc, #152]	; (32efc <StartTasks+0x124>)
   32e64:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32e66:	4b24      	ldr	r3, [pc, #144]	; (32ef8 <StartTasks+0x120>)
   32e68:	0018      	movs	r0, r3
   32e6a:	4b25      	ldr	r3, [pc, #148]	; (32f00 <StartTasks+0x128>)
   32e6c:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   32e6e:	23c8      	movs	r3, #200	; 0xc8
   32e70:	005a      	lsls	r2, r3, #1
   32e72:	492f      	ldr	r1, [pc, #188]	; (32f30 <StartTasks+0x158>)
   32e74:	482f      	ldr	r0, [pc, #188]	; (32f34 <StartTasks+0x15c>)
   32e76:	4b30      	ldr	r3, [pc, #192]	; (32f38 <StartTasks+0x160>)
   32e78:	9301      	str	r3, [sp, #4]
   32e7a:	2304      	movs	r3, #4
   32e7c:	9300      	str	r3, [sp, #0]
   32e7e:	2300      	movs	r3, #0
   32e80:	4c23      	ldr	r4, [pc, #140]	; (32f10 <StartTasks+0x138>)
   32e82:	47a0      	blx	r4
   32e84:	0003      	movs	r3, r0
   32e86:	2b01      	cmp	r3, #1
   32e88:	d003      	beq.n	32e92 <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   32e8a:	4b2c      	ldr	r3, [pc, #176]	; (32f3c <StartTasks+0x164>)
   32e8c:	0018      	movs	r0, r3
   32e8e:	4b1c      	ldr	r3, [pc, #112]	; (32f00 <StartTasks+0x128>)
   32e90:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   32e92:	4b17      	ldr	r3, [pc, #92]	; (32ef0 <StartTasks+0x118>)
   32e94:	4798      	blx	r3
   32e96:	0003      	movs	r3, r0
   32e98:	4a29      	ldr	r2, [pc, #164]	; (32f40 <StartTasks+0x168>)
   32e9a:	4817      	ldr	r0, [pc, #92]	; (32ef8 <StartTasks+0x120>)
   32e9c:	2140      	movs	r1, #64	; 0x40
   32e9e:	4c17      	ldr	r4, [pc, #92]	; (32efc <StartTasks+0x124>)
   32ea0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32ea2:	4b15      	ldr	r3, [pc, #84]	; (32ef8 <StartTasks+0x120>)
   32ea4:	0018      	movs	r0, r3
   32ea6:	4b16      	ldr	r3, [pc, #88]	; (32f00 <StartTasks+0x128>)
   32ea8:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   32eaa:	2380      	movs	r3, #128	; 0x80
   32eac:	005a      	lsls	r2, r3, #1
   32eae:	4925      	ldr	r1, [pc, #148]	; (32f44 <StartTasks+0x16c>)
   32eb0:	4825      	ldr	r0, [pc, #148]	; (32f48 <StartTasks+0x170>)
   32eb2:	4b26      	ldr	r3, [pc, #152]	; (32f4c <StartTasks+0x174>)
   32eb4:	9301      	str	r3, [sp, #4]
   32eb6:	2304      	movs	r3, #4
   32eb8:	9300      	str	r3, [sp, #0]
   32eba:	2300      	movs	r3, #0
   32ebc:	4c14      	ldr	r4, [pc, #80]	; (32f10 <StartTasks+0x138>)
   32ebe:	47a0      	blx	r4
   32ec0:	0003      	movs	r3, r0
   32ec2:	2b01      	cmp	r3, #1
   32ec4:	d003      	beq.n	32ece <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   32ec6:	4b22      	ldr	r3, [pc, #136]	; (32f50 <StartTasks+0x178>)
   32ec8:	0018      	movs	r0, r3
   32eca:	4b0d      	ldr	r3, [pc, #52]	; (32f00 <StartTasks+0x128>)
   32ecc:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   32ece:	4b08      	ldr	r3, [pc, #32]	; (32ef0 <StartTasks+0x118>)
   32ed0:	4798      	blx	r3
   32ed2:	0003      	movs	r3, r0
   32ed4:	4a1f      	ldr	r2, [pc, #124]	; (32f54 <StartTasks+0x17c>)
   32ed6:	4808      	ldr	r0, [pc, #32]	; (32ef8 <StartTasks+0x120>)
   32ed8:	2140      	movs	r1, #64	; 0x40
   32eda:	4c08      	ldr	r4, [pc, #32]	; (32efc <StartTasks+0x124>)
   32edc:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32ede:	4b06      	ldr	r3, [pc, #24]	; (32ef8 <StartTasks+0x120>)
   32ee0:	0018      	movs	r0, r3
   32ee2:	4b07      	ldr	r3, [pc, #28]	; (32f00 <StartTasks+0x128>)
   32ee4:	4798      	blx	r3
}
   32ee6:	46c0      	nop			; (mov r8, r8)
   32ee8:	46bd      	mov	sp, r7
   32eea:	b001      	add	sp, #4
   32eec:	bd90      	pop	{r4, r7, pc}
   32eee:	46c0      	nop			; (mov r8, r8)
   32ef0:	0001a881 	.word	0x0001a881
   32ef4:	0003a734 	.word	0x0003a734
   32ef8:	20005c50 	.word	0x20005c50
   32efc:	000351bd 	.word	0x000351bd
   32f00:	0001e2b5 	.word	0x0001e2b5
   32f04:	0003a758 	.word	0x0003a758
   32f08:	00013819 	.word	0x00013819
   32f0c:	20004714 	.word	0x20004714
   32f10:	0001c2c5 	.word	0x0001c2c5
   32f14:	0003a764 	.word	0x0003a764
   32f18:	0003a790 	.word	0x0003a790
   32f1c:	0003a7b0 	.word	0x0003a7b0
   32f20:	000176a9 	.word	0x000176a9
   32f24:	2000471c 	.word	0x2000471c
   32f28:	0003a7bc 	.word	0x0003a7bc
   32f2c:	0003a7e8 	.word	0x0003a7e8
   32f30:	0003a808 	.word	0x0003a808
   32f34:	00015ec1 	.word	0x00015ec1
   32f38:	20004720 	.word	0x20004720
   32f3c:	0003a810 	.word	0x0003a810
   32f40:	0003a83c 	.word	0x0003a83c
   32f44:	0003a860 	.word	0x0003a860
   32f48:	00014121 	.word	0x00014121
   32f4c:	20004724 	.word	0x20004724
   32f50:	0003a870 	.word	0x0003a870
   32f54:	0003a8a0 	.word	0x0003a8a0

00032f58 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   32f58:	b580      	push	{r7, lr}
   32f5a:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   32f5c:	4b02      	ldr	r3, [pc, #8]	; (32f68 <vApplicationMallocFailedHook+0x10>)
   32f5e:	0018      	movs	r0, r3
   32f60:	4b02      	ldr	r3, [pc, #8]	; (32f6c <vApplicationMallocFailedHook+0x14>)
   32f62:	4798      	blx	r3
    while (1)
   32f64:	e7fe      	b.n	32f64 <vApplicationMallocFailedHook+0xc>
   32f66:	46c0      	nop			; (mov r8, r8)
   32f68:	0003a8c8 	.word	0x0003a8c8
   32f6c:	0001e2b5 	.word	0x0001e2b5

00032f70 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   32f70:	b580      	push	{r7, lr}
   32f72:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   32f74:	4b02      	ldr	r3, [pc, #8]	; (32f80 <vApplicationStackOverflowHook+0x10>)
   32f76:	0018      	movs	r0, r3
   32f78:	4b02      	ldr	r3, [pc, #8]	; (32f84 <vApplicationStackOverflowHook+0x14>)
   32f7a:	4798      	blx	r3
    while (1)
   32f7c:	e7fe      	b.n	32f7c <vApplicationStackOverflowHook+0xc>
   32f7e:	46c0      	nop			; (mov r8, r8)
   32f80:	0003a8f4 	.word	0x0003a8f4
   32f84:	0001e2b5 	.word	0x0001e2b5

00032f88 <__udivsi3>:
   32f88:	2200      	movs	r2, #0
   32f8a:	0843      	lsrs	r3, r0, #1
   32f8c:	428b      	cmp	r3, r1
   32f8e:	d374      	bcc.n	3307a <__udivsi3+0xf2>
   32f90:	0903      	lsrs	r3, r0, #4
   32f92:	428b      	cmp	r3, r1
   32f94:	d35f      	bcc.n	33056 <__udivsi3+0xce>
   32f96:	0a03      	lsrs	r3, r0, #8
   32f98:	428b      	cmp	r3, r1
   32f9a:	d344      	bcc.n	33026 <__udivsi3+0x9e>
   32f9c:	0b03      	lsrs	r3, r0, #12
   32f9e:	428b      	cmp	r3, r1
   32fa0:	d328      	bcc.n	32ff4 <__udivsi3+0x6c>
   32fa2:	0c03      	lsrs	r3, r0, #16
   32fa4:	428b      	cmp	r3, r1
   32fa6:	d30d      	bcc.n	32fc4 <__udivsi3+0x3c>
   32fa8:	22ff      	movs	r2, #255	; 0xff
   32faa:	0209      	lsls	r1, r1, #8
   32fac:	ba12      	rev	r2, r2
   32fae:	0c03      	lsrs	r3, r0, #16
   32fb0:	428b      	cmp	r3, r1
   32fb2:	d302      	bcc.n	32fba <__udivsi3+0x32>
   32fb4:	1212      	asrs	r2, r2, #8
   32fb6:	0209      	lsls	r1, r1, #8
   32fb8:	d065      	beq.n	33086 <__udivsi3+0xfe>
   32fba:	0b03      	lsrs	r3, r0, #12
   32fbc:	428b      	cmp	r3, r1
   32fbe:	d319      	bcc.n	32ff4 <__udivsi3+0x6c>
   32fc0:	e000      	b.n	32fc4 <__udivsi3+0x3c>
   32fc2:	0a09      	lsrs	r1, r1, #8
   32fc4:	0bc3      	lsrs	r3, r0, #15
   32fc6:	428b      	cmp	r3, r1
   32fc8:	d301      	bcc.n	32fce <__udivsi3+0x46>
   32fca:	03cb      	lsls	r3, r1, #15
   32fcc:	1ac0      	subs	r0, r0, r3
   32fce:	4152      	adcs	r2, r2
   32fd0:	0b83      	lsrs	r3, r0, #14
   32fd2:	428b      	cmp	r3, r1
   32fd4:	d301      	bcc.n	32fda <__udivsi3+0x52>
   32fd6:	038b      	lsls	r3, r1, #14
   32fd8:	1ac0      	subs	r0, r0, r3
   32fda:	4152      	adcs	r2, r2
   32fdc:	0b43      	lsrs	r3, r0, #13
   32fde:	428b      	cmp	r3, r1
   32fe0:	d301      	bcc.n	32fe6 <__udivsi3+0x5e>
   32fe2:	034b      	lsls	r3, r1, #13
   32fe4:	1ac0      	subs	r0, r0, r3
   32fe6:	4152      	adcs	r2, r2
   32fe8:	0b03      	lsrs	r3, r0, #12
   32fea:	428b      	cmp	r3, r1
   32fec:	d301      	bcc.n	32ff2 <__udivsi3+0x6a>
   32fee:	030b      	lsls	r3, r1, #12
   32ff0:	1ac0      	subs	r0, r0, r3
   32ff2:	4152      	adcs	r2, r2
   32ff4:	0ac3      	lsrs	r3, r0, #11
   32ff6:	428b      	cmp	r3, r1
   32ff8:	d301      	bcc.n	32ffe <__udivsi3+0x76>
   32ffa:	02cb      	lsls	r3, r1, #11
   32ffc:	1ac0      	subs	r0, r0, r3
   32ffe:	4152      	adcs	r2, r2
   33000:	0a83      	lsrs	r3, r0, #10
   33002:	428b      	cmp	r3, r1
   33004:	d301      	bcc.n	3300a <__udivsi3+0x82>
   33006:	028b      	lsls	r3, r1, #10
   33008:	1ac0      	subs	r0, r0, r3
   3300a:	4152      	adcs	r2, r2
   3300c:	0a43      	lsrs	r3, r0, #9
   3300e:	428b      	cmp	r3, r1
   33010:	d301      	bcc.n	33016 <__udivsi3+0x8e>
   33012:	024b      	lsls	r3, r1, #9
   33014:	1ac0      	subs	r0, r0, r3
   33016:	4152      	adcs	r2, r2
   33018:	0a03      	lsrs	r3, r0, #8
   3301a:	428b      	cmp	r3, r1
   3301c:	d301      	bcc.n	33022 <__udivsi3+0x9a>
   3301e:	020b      	lsls	r3, r1, #8
   33020:	1ac0      	subs	r0, r0, r3
   33022:	4152      	adcs	r2, r2
   33024:	d2cd      	bcs.n	32fc2 <__udivsi3+0x3a>
   33026:	09c3      	lsrs	r3, r0, #7
   33028:	428b      	cmp	r3, r1
   3302a:	d301      	bcc.n	33030 <__udivsi3+0xa8>
   3302c:	01cb      	lsls	r3, r1, #7
   3302e:	1ac0      	subs	r0, r0, r3
   33030:	4152      	adcs	r2, r2
   33032:	0983      	lsrs	r3, r0, #6
   33034:	428b      	cmp	r3, r1
   33036:	d301      	bcc.n	3303c <__udivsi3+0xb4>
   33038:	018b      	lsls	r3, r1, #6
   3303a:	1ac0      	subs	r0, r0, r3
   3303c:	4152      	adcs	r2, r2
   3303e:	0943      	lsrs	r3, r0, #5
   33040:	428b      	cmp	r3, r1
   33042:	d301      	bcc.n	33048 <__udivsi3+0xc0>
   33044:	014b      	lsls	r3, r1, #5
   33046:	1ac0      	subs	r0, r0, r3
   33048:	4152      	adcs	r2, r2
   3304a:	0903      	lsrs	r3, r0, #4
   3304c:	428b      	cmp	r3, r1
   3304e:	d301      	bcc.n	33054 <__udivsi3+0xcc>
   33050:	010b      	lsls	r3, r1, #4
   33052:	1ac0      	subs	r0, r0, r3
   33054:	4152      	adcs	r2, r2
   33056:	08c3      	lsrs	r3, r0, #3
   33058:	428b      	cmp	r3, r1
   3305a:	d301      	bcc.n	33060 <__udivsi3+0xd8>
   3305c:	00cb      	lsls	r3, r1, #3
   3305e:	1ac0      	subs	r0, r0, r3
   33060:	4152      	adcs	r2, r2
   33062:	0883      	lsrs	r3, r0, #2
   33064:	428b      	cmp	r3, r1
   33066:	d301      	bcc.n	3306c <__udivsi3+0xe4>
   33068:	008b      	lsls	r3, r1, #2
   3306a:	1ac0      	subs	r0, r0, r3
   3306c:	4152      	adcs	r2, r2
   3306e:	0843      	lsrs	r3, r0, #1
   33070:	428b      	cmp	r3, r1
   33072:	d301      	bcc.n	33078 <__udivsi3+0xf0>
   33074:	004b      	lsls	r3, r1, #1
   33076:	1ac0      	subs	r0, r0, r3
   33078:	4152      	adcs	r2, r2
   3307a:	1a41      	subs	r1, r0, r1
   3307c:	d200      	bcs.n	33080 <__udivsi3+0xf8>
   3307e:	4601      	mov	r1, r0
   33080:	4152      	adcs	r2, r2
   33082:	4610      	mov	r0, r2
   33084:	4770      	bx	lr
   33086:	e7ff      	b.n	33088 <__udivsi3+0x100>
   33088:	b501      	push	{r0, lr}
   3308a:	2000      	movs	r0, #0
   3308c:	f000 f8f0 	bl	33270 <__aeabi_idiv0>
   33090:	bd02      	pop	{r1, pc}
   33092:	46c0      	nop			; (mov r8, r8)

00033094 <__aeabi_uidivmod>:
   33094:	2900      	cmp	r1, #0
   33096:	d0f7      	beq.n	33088 <__udivsi3+0x100>
   33098:	e776      	b.n	32f88 <__udivsi3>
   3309a:	4770      	bx	lr

0003309c <__divsi3>:
   3309c:	4603      	mov	r3, r0
   3309e:	430b      	orrs	r3, r1
   330a0:	d47f      	bmi.n	331a2 <__divsi3+0x106>
   330a2:	2200      	movs	r2, #0
   330a4:	0843      	lsrs	r3, r0, #1
   330a6:	428b      	cmp	r3, r1
   330a8:	d374      	bcc.n	33194 <__divsi3+0xf8>
   330aa:	0903      	lsrs	r3, r0, #4
   330ac:	428b      	cmp	r3, r1
   330ae:	d35f      	bcc.n	33170 <__divsi3+0xd4>
   330b0:	0a03      	lsrs	r3, r0, #8
   330b2:	428b      	cmp	r3, r1
   330b4:	d344      	bcc.n	33140 <__divsi3+0xa4>
   330b6:	0b03      	lsrs	r3, r0, #12
   330b8:	428b      	cmp	r3, r1
   330ba:	d328      	bcc.n	3310e <__divsi3+0x72>
   330bc:	0c03      	lsrs	r3, r0, #16
   330be:	428b      	cmp	r3, r1
   330c0:	d30d      	bcc.n	330de <__divsi3+0x42>
   330c2:	22ff      	movs	r2, #255	; 0xff
   330c4:	0209      	lsls	r1, r1, #8
   330c6:	ba12      	rev	r2, r2
   330c8:	0c03      	lsrs	r3, r0, #16
   330ca:	428b      	cmp	r3, r1
   330cc:	d302      	bcc.n	330d4 <__divsi3+0x38>
   330ce:	1212      	asrs	r2, r2, #8
   330d0:	0209      	lsls	r1, r1, #8
   330d2:	d065      	beq.n	331a0 <__divsi3+0x104>
   330d4:	0b03      	lsrs	r3, r0, #12
   330d6:	428b      	cmp	r3, r1
   330d8:	d319      	bcc.n	3310e <__divsi3+0x72>
   330da:	e000      	b.n	330de <__divsi3+0x42>
   330dc:	0a09      	lsrs	r1, r1, #8
   330de:	0bc3      	lsrs	r3, r0, #15
   330e0:	428b      	cmp	r3, r1
   330e2:	d301      	bcc.n	330e8 <__divsi3+0x4c>
   330e4:	03cb      	lsls	r3, r1, #15
   330e6:	1ac0      	subs	r0, r0, r3
   330e8:	4152      	adcs	r2, r2
   330ea:	0b83      	lsrs	r3, r0, #14
   330ec:	428b      	cmp	r3, r1
   330ee:	d301      	bcc.n	330f4 <__divsi3+0x58>
   330f0:	038b      	lsls	r3, r1, #14
   330f2:	1ac0      	subs	r0, r0, r3
   330f4:	4152      	adcs	r2, r2
   330f6:	0b43      	lsrs	r3, r0, #13
   330f8:	428b      	cmp	r3, r1
   330fa:	d301      	bcc.n	33100 <__divsi3+0x64>
   330fc:	034b      	lsls	r3, r1, #13
   330fe:	1ac0      	subs	r0, r0, r3
   33100:	4152      	adcs	r2, r2
   33102:	0b03      	lsrs	r3, r0, #12
   33104:	428b      	cmp	r3, r1
   33106:	d301      	bcc.n	3310c <__divsi3+0x70>
   33108:	030b      	lsls	r3, r1, #12
   3310a:	1ac0      	subs	r0, r0, r3
   3310c:	4152      	adcs	r2, r2
   3310e:	0ac3      	lsrs	r3, r0, #11
   33110:	428b      	cmp	r3, r1
   33112:	d301      	bcc.n	33118 <__divsi3+0x7c>
   33114:	02cb      	lsls	r3, r1, #11
   33116:	1ac0      	subs	r0, r0, r3
   33118:	4152      	adcs	r2, r2
   3311a:	0a83      	lsrs	r3, r0, #10
   3311c:	428b      	cmp	r3, r1
   3311e:	d301      	bcc.n	33124 <__divsi3+0x88>
   33120:	028b      	lsls	r3, r1, #10
   33122:	1ac0      	subs	r0, r0, r3
   33124:	4152      	adcs	r2, r2
   33126:	0a43      	lsrs	r3, r0, #9
   33128:	428b      	cmp	r3, r1
   3312a:	d301      	bcc.n	33130 <__divsi3+0x94>
   3312c:	024b      	lsls	r3, r1, #9
   3312e:	1ac0      	subs	r0, r0, r3
   33130:	4152      	adcs	r2, r2
   33132:	0a03      	lsrs	r3, r0, #8
   33134:	428b      	cmp	r3, r1
   33136:	d301      	bcc.n	3313c <__divsi3+0xa0>
   33138:	020b      	lsls	r3, r1, #8
   3313a:	1ac0      	subs	r0, r0, r3
   3313c:	4152      	adcs	r2, r2
   3313e:	d2cd      	bcs.n	330dc <__divsi3+0x40>
   33140:	09c3      	lsrs	r3, r0, #7
   33142:	428b      	cmp	r3, r1
   33144:	d301      	bcc.n	3314a <__divsi3+0xae>
   33146:	01cb      	lsls	r3, r1, #7
   33148:	1ac0      	subs	r0, r0, r3
   3314a:	4152      	adcs	r2, r2
   3314c:	0983      	lsrs	r3, r0, #6
   3314e:	428b      	cmp	r3, r1
   33150:	d301      	bcc.n	33156 <__divsi3+0xba>
   33152:	018b      	lsls	r3, r1, #6
   33154:	1ac0      	subs	r0, r0, r3
   33156:	4152      	adcs	r2, r2
   33158:	0943      	lsrs	r3, r0, #5
   3315a:	428b      	cmp	r3, r1
   3315c:	d301      	bcc.n	33162 <__divsi3+0xc6>
   3315e:	014b      	lsls	r3, r1, #5
   33160:	1ac0      	subs	r0, r0, r3
   33162:	4152      	adcs	r2, r2
   33164:	0903      	lsrs	r3, r0, #4
   33166:	428b      	cmp	r3, r1
   33168:	d301      	bcc.n	3316e <__divsi3+0xd2>
   3316a:	010b      	lsls	r3, r1, #4
   3316c:	1ac0      	subs	r0, r0, r3
   3316e:	4152      	adcs	r2, r2
   33170:	08c3      	lsrs	r3, r0, #3
   33172:	428b      	cmp	r3, r1
   33174:	d301      	bcc.n	3317a <__divsi3+0xde>
   33176:	00cb      	lsls	r3, r1, #3
   33178:	1ac0      	subs	r0, r0, r3
   3317a:	4152      	adcs	r2, r2
   3317c:	0883      	lsrs	r3, r0, #2
   3317e:	428b      	cmp	r3, r1
   33180:	d301      	bcc.n	33186 <__divsi3+0xea>
   33182:	008b      	lsls	r3, r1, #2
   33184:	1ac0      	subs	r0, r0, r3
   33186:	4152      	adcs	r2, r2
   33188:	0843      	lsrs	r3, r0, #1
   3318a:	428b      	cmp	r3, r1
   3318c:	d301      	bcc.n	33192 <__divsi3+0xf6>
   3318e:	004b      	lsls	r3, r1, #1
   33190:	1ac0      	subs	r0, r0, r3
   33192:	4152      	adcs	r2, r2
   33194:	1a41      	subs	r1, r0, r1
   33196:	d200      	bcs.n	3319a <__divsi3+0xfe>
   33198:	4601      	mov	r1, r0
   3319a:	4152      	adcs	r2, r2
   3319c:	4610      	mov	r0, r2
   3319e:	4770      	bx	lr
   331a0:	e05d      	b.n	3325e <__divsi3+0x1c2>
   331a2:	0fca      	lsrs	r2, r1, #31
   331a4:	d000      	beq.n	331a8 <__divsi3+0x10c>
   331a6:	4249      	negs	r1, r1
   331a8:	1003      	asrs	r3, r0, #32
   331aa:	d300      	bcc.n	331ae <__divsi3+0x112>
   331ac:	4240      	negs	r0, r0
   331ae:	4053      	eors	r3, r2
   331b0:	2200      	movs	r2, #0
   331b2:	469c      	mov	ip, r3
   331b4:	0903      	lsrs	r3, r0, #4
   331b6:	428b      	cmp	r3, r1
   331b8:	d32d      	bcc.n	33216 <__divsi3+0x17a>
   331ba:	0a03      	lsrs	r3, r0, #8
   331bc:	428b      	cmp	r3, r1
   331be:	d312      	bcc.n	331e6 <__divsi3+0x14a>
   331c0:	22fc      	movs	r2, #252	; 0xfc
   331c2:	0189      	lsls	r1, r1, #6
   331c4:	ba12      	rev	r2, r2
   331c6:	0a03      	lsrs	r3, r0, #8
   331c8:	428b      	cmp	r3, r1
   331ca:	d30c      	bcc.n	331e6 <__divsi3+0x14a>
   331cc:	0189      	lsls	r1, r1, #6
   331ce:	1192      	asrs	r2, r2, #6
   331d0:	428b      	cmp	r3, r1
   331d2:	d308      	bcc.n	331e6 <__divsi3+0x14a>
   331d4:	0189      	lsls	r1, r1, #6
   331d6:	1192      	asrs	r2, r2, #6
   331d8:	428b      	cmp	r3, r1
   331da:	d304      	bcc.n	331e6 <__divsi3+0x14a>
   331dc:	0189      	lsls	r1, r1, #6
   331de:	d03a      	beq.n	33256 <__divsi3+0x1ba>
   331e0:	1192      	asrs	r2, r2, #6
   331e2:	e000      	b.n	331e6 <__divsi3+0x14a>
   331e4:	0989      	lsrs	r1, r1, #6
   331e6:	09c3      	lsrs	r3, r0, #7
   331e8:	428b      	cmp	r3, r1
   331ea:	d301      	bcc.n	331f0 <__divsi3+0x154>
   331ec:	01cb      	lsls	r3, r1, #7
   331ee:	1ac0      	subs	r0, r0, r3
   331f0:	4152      	adcs	r2, r2
   331f2:	0983      	lsrs	r3, r0, #6
   331f4:	428b      	cmp	r3, r1
   331f6:	d301      	bcc.n	331fc <__divsi3+0x160>
   331f8:	018b      	lsls	r3, r1, #6
   331fa:	1ac0      	subs	r0, r0, r3
   331fc:	4152      	adcs	r2, r2
   331fe:	0943      	lsrs	r3, r0, #5
   33200:	428b      	cmp	r3, r1
   33202:	d301      	bcc.n	33208 <__divsi3+0x16c>
   33204:	014b      	lsls	r3, r1, #5
   33206:	1ac0      	subs	r0, r0, r3
   33208:	4152      	adcs	r2, r2
   3320a:	0903      	lsrs	r3, r0, #4
   3320c:	428b      	cmp	r3, r1
   3320e:	d301      	bcc.n	33214 <__divsi3+0x178>
   33210:	010b      	lsls	r3, r1, #4
   33212:	1ac0      	subs	r0, r0, r3
   33214:	4152      	adcs	r2, r2
   33216:	08c3      	lsrs	r3, r0, #3
   33218:	428b      	cmp	r3, r1
   3321a:	d301      	bcc.n	33220 <__divsi3+0x184>
   3321c:	00cb      	lsls	r3, r1, #3
   3321e:	1ac0      	subs	r0, r0, r3
   33220:	4152      	adcs	r2, r2
   33222:	0883      	lsrs	r3, r0, #2
   33224:	428b      	cmp	r3, r1
   33226:	d301      	bcc.n	3322c <__divsi3+0x190>
   33228:	008b      	lsls	r3, r1, #2
   3322a:	1ac0      	subs	r0, r0, r3
   3322c:	4152      	adcs	r2, r2
   3322e:	d2d9      	bcs.n	331e4 <__divsi3+0x148>
   33230:	0843      	lsrs	r3, r0, #1
   33232:	428b      	cmp	r3, r1
   33234:	d301      	bcc.n	3323a <__divsi3+0x19e>
   33236:	004b      	lsls	r3, r1, #1
   33238:	1ac0      	subs	r0, r0, r3
   3323a:	4152      	adcs	r2, r2
   3323c:	1a41      	subs	r1, r0, r1
   3323e:	d200      	bcs.n	33242 <__divsi3+0x1a6>
   33240:	4601      	mov	r1, r0
   33242:	4663      	mov	r3, ip
   33244:	4152      	adcs	r2, r2
   33246:	105b      	asrs	r3, r3, #1
   33248:	4610      	mov	r0, r2
   3324a:	d301      	bcc.n	33250 <__divsi3+0x1b4>
   3324c:	4240      	negs	r0, r0
   3324e:	2b00      	cmp	r3, #0
   33250:	d500      	bpl.n	33254 <__divsi3+0x1b8>
   33252:	4249      	negs	r1, r1
   33254:	4770      	bx	lr
   33256:	4663      	mov	r3, ip
   33258:	105b      	asrs	r3, r3, #1
   3325a:	d300      	bcc.n	3325e <__divsi3+0x1c2>
   3325c:	4240      	negs	r0, r0
   3325e:	b501      	push	{r0, lr}
   33260:	2000      	movs	r0, #0
   33262:	f000 f805 	bl	33270 <__aeabi_idiv0>
   33266:	bd02      	pop	{r1, pc}

00033268 <__aeabi_idivmod>:
   33268:	2900      	cmp	r1, #0
   3326a:	d0f8      	beq.n	3325e <__divsi3+0x1c2>
   3326c:	e716      	b.n	3309c <__divsi3>
   3326e:	4770      	bx	lr

00033270 <__aeabi_idiv0>:
   33270:	4770      	bx	lr
   33272:	46c0      	nop			; (mov r8, r8)

00033274 <__aeabi_lmul>:
   33274:	b5f0      	push	{r4, r5, r6, r7, lr}
   33276:	46ce      	mov	lr, r9
   33278:	4647      	mov	r7, r8
   3327a:	0415      	lsls	r5, r2, #16
   3327c:	0c2d      	lsrs	r5, r5, #16
   3327e:	002e      	movs	r6, r5
   33280:	b580      	push	{r7, lr}
   33282:	0407      	lsls	r7, r0, #16
   33284:	0c14      	lsrs	r4, r2, #16
   33286:	0c3f      	lsrs	r7, r7, #16
   33288:	4699      	mov	r9, r3
   3328a:	0c03      	lsrs	r3, r0, #16
   3328c:	437e      	muls	r6, r7
   3328e:	435d      	muls	r5, r3
   33290:	4367      	muls	r7, r4
   33292:	4363      	muls	r3, r4
   33294:	197f      	adds	r7, r7, r5
   33296:	0c34      	lsrs	r4, r6, #16
   33298:	19e4      	adds	r4, r4, r7
   3329a:	469c      	mov	ip, r3
   3329c:	42a5      	cmp	r5, r4
   3329e:	d903      	bls.n	332a8 <__aeabi_lmul+0x34>
   332a0:	2380      	movs	r3, #128	; 0x80
   332a2:	025b      	lsls	r3, r3, #9
   332a4:	4698      	mov	r8, r3
   332a6:	44c4      	add	ip, r8
   332a8:	464b      	mov	r3, r9
   332aa:	4351      	muls	r1, r2
   332ac:	4343      	muls	r3, r0
   332ae:	0436      	lsls	r6, r6, #16
   332b0:	0c36      	lsrs	r6, r6, #16
   332b2:	0c25      	lsrs	r5, r4, #16
   332b4:	0424      	lsls	r4, r4, #16
   332b6:	4465      	add	r5, ip
   332b8:	19a4      	adds	r4, r4, r6
   332ba:	1859      	adds	r1, r3, r1
   332bc:	1949      	adds	r1, r1, r5
   332be:	0020      	movs	r0, r4
   332c0:	bc0c      	pop	{r2, r3}
   332c2:	4690      	mov	r8, r2
   332c4:	4699      	mov	r9, r3
   332c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000332c8 <__aeabi_fmul>:
   332c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   332ca:	4657      	mov	r7, sl
   332cc:	464e      	mov	r6, r9
   332ce:	4645      	mov	r5, r8
   332d0:	46de      	mov	lr, fp
   332d2:	b5e0      	push	{r5, r6, r7, lr}
   332d4:	0247      	lsls	r7, r0, #9
   332d6:	0046      	lsls	r6, r0, #1
   332d8:	4688      	mov	r8, r1
   332da:	0a7f      	lsrs	r7, r7, #9
   332dc:	0e36      	lsrs	r6, r6, #24
   332de:	0fc4      	lsrs	r4, r0, #31
   332e0:	2e00      	cmp	r6, #0
   332e2:	d047      	beq.n	33374 <__aeabi_fmul+0xac>
   332e4:	2eff      	cmp	r6, #255	; 0xff
   332e6:	d024      	beq.n	33332 <__aeabi_fmul+0x6a>
   332e8:	00fb      	lsls	r3, r7, #3
   332ea:	2780      	movs	r7, #128	; 0x80
   332ec:	04ff      	lsls	r7, r7, #19
   332ee:	431f      	orrs	r7, r3
   332f0:	2300      	movs	r3, #0
   332f2:	4699      	mov	r9, r3
   332f4:	469a      	mov	sl, r3
   332f6:	3e7f      	subs	r6, #127	; 0x7f
   332f8:	4643      	mov	r3, r8
   332fa:	025d      	lsls	r5, r3, #9
   332fc:	0058      	lsls	r0, r3, #1
   332fe:	0fdb      	lsrs	r3, r3, #31
   33300:	0a6d      	lsrs	r5, r5, #9
   33302:	0e00      	lsrs	r0, r0, #24
   33304:	4698      	mov	r8, r3
   33306:	d043      	beq.n	33390 <__aeabi_fmul+0xc8>
   33308:	28ff      	cmp	r0, #255	; 0xff
   3330a:	d03b      	beq.n	33384 <__aeabi_fmul+0xbc>
   3330c:	00eb      	lsls	r3, r5, #3
   3330e:	2580      	movs	r5, #128	; 0x80
   33310:	2200      	movs	r2, #0
   33312:	04ed      	lsls	r5, r5, #19
   33314:	431d      	orrs	r5, r3
   33316:	387f      	subs	r0, #127	; 0x7f
   33318:	1836      	adds	r6, r6, r0
   3331a:	1c73      	adds	r3, r6, #1
   3331c:	4641      	mov	r1, r8
   3331e:	469b      	mov	fp, r3
   33320:	464b      	mov	r3, r9
   33322:	4061      	eors	r1, r4
   33324:	4313      	orrs	r3, r2
   33326:	2b0f      	cmp	r3, #15
   33328:	d864      	bhi.n	333f4 <__aeabi_fmul+0x12c>
   3332a:	4875      	ldr	r0, [pc, #468]	; (33500 <__aeabi_fmul+0x238>)
   3332c:	009b      	lsls	r3, r3, #2
   3332e:	58c3      	ldr	r3, [r0, r3]
   33330:	469f      	mov	pc, r3
   33332:	2f00      	cmp	r7, #0
   33334:	d142      	bne.n	333bc <__aeabi_fmul+0xf4>
   33336:	2308      	movs	r3, #8
   33338:	4699      	mov	r9, r3
   3333a:	3b06      	subs	r3, #6
   3333c:	26ff      	movs	r6, #255	; 0xff
   3333e:	469a      	mov	sl, r3
   33340:	e7da      	b.n	332f8 <__aeabi_fmul+0x30>
   33342:	4641      	mov	r1, r8
   33344:	2a02      	cmp	r2, #2
   33346:	d028      	beq.n	3339a <__aeabi_fmul+0xd2>
   33348:	2a03      	cmp	r2, #3
   3334a:	d100      	bne.n	3334e <__aeabi_fmul+0x86>
   3334c:	e0ce      	b.n	334ec <__aeabi_fmul+0x224>
   3334e:	2a01      	cmp	r2, #1
   33350:	d000      	beq.n	33354 <__aeabi_fmul+0x8c>
   33352:	e0ac      	b.n	334ae <__aeabi_fmul+0x1e6>
   33354:	4011      	ands	r1, r2
   33356:	2000      	movs	r0, #0
   33358:	2200      	movs	r2, #0
   3335a:	b2cc      	uxtb	r4, r1
   3335c:	0240      	lsls	r0, r0, #9
   3335e:	05d2      	lsls	r2, r2, #23
   33360:	0a40      	lsrs	r0, r0, #9
   33362:	07e4      	lsls	r4, r4, #31
   33364:	4310      	orrs	r0, r2
   33366:	4320      	orrs	r0, r4
   33368:	bc3c      	pop	{r2, r3, r4, r5}
   3336a:	4690      	mov	r8, r2
   3336c:	4699      	mov	r9, r3
   3336e:	46a2      	mov	sl, r4
   33370:	46ab      	mov	fp, r5
   33372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33374:	2f00      	cmp	r7, #0
   33376:	d115      	bne.n	333a4 <__aeabi_fmul+0xdc>
   33378:	2304      	movs	r3, #4
   3337a:	4699      	mov	r9, r3
   3337c:	3b03      	subs	r3, #3
   3337e:	2600      	movs	r6, #0
   33380:	469a      	mov	sl, r3
   33382:	e7b9      	b.n	332f8 <__aeabi_fmul+0x30>
   33384:	20ff      	movs	r0, #255	; 0xff
   33386:	2202      	movs	r2, #2
   33388:	2d00      	cmp	r5, #0
   3338a:	d0c5      	beq.n	33318 <__aeabi_fmul+0x50>
   3338c:	2203      	movs	r2, #3
   3338e:	e7c3      	b.n	33318 <__aeabi_fmul+0x50>
   33390:	2d00      	cmp	r5, #0
   33392:	d119      	bne.n	333c8 <__aeabi_fmul+0x100>
   33394:	2000      	movs	r0, #0
   33396:	2201      	movs	r2, #1
   33398:	e7be      	b.n	33318 <__aeabi_fmul+0x50>
   3339a:	2401      	movs	r4, #1
   3339c:	22ff      	movs	r2, #255	; 0xff
   3339e:	400c      	ands	r4, r1
   333a0:	2000      	movs	r0, #0
   333a2:	e7db      	b.n	3335c <__aeabi_fmul+0x94>
   333a4:	0038      	movs	r0, r7
   333a6:	f001 fd65 	bl	34e74 <__clzsi2>
   333aa:	2676      	movs	r6, #118	; 0x76
   333ac:	1f43      	subs	r3, r0, #5
   333ae:	409f      	lsls	r7, r3
   333b0:	2300      	movs	r3, #0
   333b2:	4276      	negs	r6, r6
   333b4:	1a36      	subs	r6, r6, r0
   333b6:	4699      	mov	r9, r3
   333b8:	469a      	mov	sl, r3
   333ba:	e79d      	b.n	332f8 <__aeabi_fmul+0x30>
   333bc:	230c      	movs	r3, #12
   333be:	4699      	mov	r9, r3
   333c0:	3b09      	subs	r3, #9
   333c2:	26ff      	movs	r6, #255	; 0xff
   333c4:	469a      	mov	sl, r3
   333c6:	e797      	b.n	332f8 <__aeabi_fmul+0x30>
   333c8:	0028      	movs	r0, r5
   333ca:	f001 fd53 	bl	34e74 <__clzsi2>
   333ce:	1f43      	subs	r3, r0, #5
   333d0:	409d      	lsls	r5, r3
   333d2:	2376      	movs	r3, #118	; 0x76
   333d4:	425b      	negs	r3, r3
   333d6:	1a18      	subs	r0, r3, r0
   333d8:	2200      	movs	r2, #0
   333da:	e79d      	b.n	33318 <__aeabi_fmul+0x50>
   333dc:	2080      	movs	r0, #128	; 0x80
   333de:	2400      	movs	r4, #0
   333e0:	03c0      	lsls	r0, r0, #15
   333e2:	22ff      	movs	r2, #255	; 0xff
   333e4:	e7ba      	b.n	3335c <__aeabi_fmul+0x94>
   333e6:	003d      	movs	r5, r7
   333e8:	4652      	mov	r2, sl
   333ea:	e7ab      	b.n	33344 <__aeabi_fmul+0x7c>
   333ec:	003d      	movs	r5, r7
   333ee:	0021      	movs	r1, r4
   333f0:	4652      	mov	r2, sl
   333f2:	e7a7      	b.n	33344 <__aeabi_fmul+0x7c>
   333f4:	0c3b      	lsrs	r3, r7, #16
   333f6:	469c      	mov	ip, r3
   333f8:	042a      	lsls	r2, r5, #16
   333fa:	0c12      	lsrs	r2, r2, #16
   333fc:	0c2b      	lsrs	r3, r5, #16
   333fe:	0014      	movs	r4, r2
   33400:	4660      	mov	r0, ip
   33402:	4665      	mov	r5, ip
   33404:	043f      	lsls	r7, r7, #16
   33406:	0c3f      	lsrs	r7, r7, #16
   33408:	437c      	muls	r4, r7
   3340a:	4342      	muls	r2, r0
   3340c:	435d      	muls	r5, r3
   3340e:	437b      	muls	r3, r7
   33410:	0c27      	lsrs	r7, r4, #16
   33412:	189b      	adds	r3, r3, r2
   33414:	18ff      	adds	r7, r7, r3
   33416:	42ba      	cmp	r2, r7
   33418:	d903      	bls.n	33422 <__aeabi_fmul+0x15a>
   3341a:	2380      	movs	r3, #128	; 0x80
   3341c:	025b      	lsls	r3, r3, #9
   3341e:	469c      	mov	ip, r3
   33420:	4465      	add	r5, ip
   33422:	0424      	lsls	r4, r4, #16
   33424:	043a      	lsls	r2, r7, #16
   33426:	0c24      	lsrs	r4, r4, #16
   33428:	1912      	adds	r2, r2, r4
   3342a:	0193      	lsls	r3, r2, #6
   3342c:	1e5c      	subs	r4, r3, #1
   3342e:	41a3      	sbcs	r3, r4
   33430:	0c3f      	lsrs	r7, r7, #16
   33432:	0e92      	lsrs	r2, r2, #26
   33434:	197d      	adds	r5, r7, r5
   33436:	431a      	orrs	r2, r3
   33438:	01ad      	lsls	r5, r5, #6
   3343a:	4315      	orrs	r5, r2
   3343c:	012b      	lsls	r3, r5, #4
   3343e:	d504      	bpl.n	3344a <__aeabi_fmul+0x182>
   33440:	2301      	movs	r3, #1
   33442:	465e      	mov	r6, fp
   33444:	086a      	lsrs	r2, r5, #1
   33446:	401d      	ands	r5, r3
   33448:	4315      	orrs	r5, r2
   3344a:	0032      	movs	r2, r6
   3344c:	327f      	adds	r2, #127	; 0x7f
   3344e:	2a00      	cmp	r2, #0
   33450:	dd25      	ble.n	3349e <__aeabi_fmul+0x1d6>
   33452:	076b      	lsls	r3, r5, #29
   33454:	d004      	beq.n	33460 <__aeabi_fmul+0x198>
   33456:	230f      	movs	r3, #15
   33458:	402b      	ands	r3, r5
   3345a:	2b04      	cmp	r3, #4
   3345c:	d000      	beq.n	33460 <__aeabi_fmul+0x198>
   3345e:	3504      	adds	r5, #4
   33460:	012b      	lsls	r3, r5, #4
   33462:	d503      	bpl.n	3346c <__aeabi_fmul+0x1a4>
   33464:	0032      	movs	r2, r6
   33466:	4b27      	ldr	r3, [pc, #156]	; (33504 <__aeabi_fmul+0x23c>)
   33468:	3280      	adds	r2, #128	; 0x80
   3346a:	401d      	ands	r5, r3
   3346c:	2afe      	cmp	r2, #254	; 0xfe
   3346e:	dc94      	bgt.n	3339a <__aeabi_fmul+0xd2>
   33470:	2401      	movs	r4, #1
   33472:	01a8      	lsls	r0, r5, #6
   33474:	0a40      	lsrs	r0, r0, #9
   33476:	b2d2      	uxtb	r2, r2
   33478:	400c      	ands	r4, r1
   3347a:	e76f      	b.n	3335c <__aeabi_fmul+0x94>
   3347c:	2080      	movs	r0, #128	; 0x80
   3347e:	03c0      	lsls	r0, r0, #15
   33480:	4207      	tst	r7, r0
   33482:	d007      	beq.n	33494 <__aeabi_fmul+0x1cc>
   33484:	4205      	tst	r5, r0
   33486:	d105      	bne.n	33494 <__aeabi_fmul+0x1cc>
   33488:	4328      	orrs	r0, r5
   3348a:	0240      	lsls	r0, r0, #9
   3348c:	0a40      	lsrs	r0, r0, #9
   3348e:	4644      	mov	r4, r8
   33490:	22ff      	movs	r2, #255	; 0xff
   33492:	e763      	b.n	3335c <__aeabi_fmul+0x94>
   33494:	4338      	orrs	r0, r7
   33496:	0240      	lsls	r0, r0, #9
   33498:	0a40      	lsrs	r0, r0, #9
   3349a:	22ff      	movs	r2, #255	; 0xff
   3349c:	e75e      	b.n	3335c <__aeabi_fmul+0x94>
   3349e:	2401      	movs	r4, #1
   334a0:	1aa3      	subs	r3, r4, r2
   334a2:	2b1b      	cmp	r3, #27
   334a4:	dd05      	ble.n	334b2 <__aeabi_fmul+0x1ea>
   334a6:	400c      	ands	r4, r1
   334a8:	2200      	movs	r2, #0
   334aa:	2000      	movs	r0, #0
   334ac:	e756      	b.n	3335c <__aeabi_fmul+0x94>
   334ae:	465e      	mov	r6, fp
   334b0:	e7cb      	b.n	3344a <__aeabi_fmul+0x182>
   334b2:	002a      	movs	r2, r5
   334b4:	2020      	movs	r0, #32
   334b6:	40da      	lsrs	r2, r3
   334b8:	1ac3      	subs	r3, r0, r3
   334ba:	409d      	lsls	r5, r3
   334bc:	002b      	movs	r3, r5
   334be:	1e5d      	subs	r5, r3, #1
   334c0:	41ab      	sbcs	r3, r5
   334c2:	4313      	orrs	r3, r2
   334c4:	075a      	lsls	r2, r3, #29
   334c6:	d004      	beq.n	334d2 <__aeabi_fmul+0x20a>
   334c8:	220f      	movs	r2, #15
   334ca:	401a      	ands	r2, r3
   334cc:	2a04      	cmp	r2, #4
   334ce:	d000      	beq.n	334d2 <__aeabi_fmul+0x20a>
   334d0:	3304      	adds	r3, #4
   334d2:	015a      	lsls	r2, r3, #5
   334d4:	d504      	bpl.n	334e0 <__aeabi_fmul+0x218>
   334d6:	2401      	movs	r4, #1
   334d8:	2201      	movs	r2, #1
   334da:	400c      	ands	r4, r1
   334dc:	2000      	movs	r0, #0
   334de:	e73d      	b.n	3335c <__aeabi_fmul+0x94>
   334e0:	2401      	movs	r4, #1
   334e2:	019b      	lsls	r3, r3, #6
   334e4:	0a58      	lsrs	r0, r3, #9
   334e6:	400c      	ands	r4, r1
   334e8:	2200      	movs	r2, #0
   334ea:	e737      	b.n	3335c <__aeabi_fmul+0x94>
   334ec:	2080      	movs	r0, #128	; 0x80
   334ee:	2401      	movs	r4, #1
   334f0:	03c0      	lsls	r0, r0, #15
   334f2:	4328      	orrs	r0, r5
   334f4:	0240      	lsls	r0, r0, #9
   334f6:	0a40      	lsrs	r0, r0, #9
   334f8:	400c      	ands	r4, r1
   334fa:	22ff      	movs	r2, #255	; 0xff
   334fc:	e72e      	b.n	3335c <__aeabi_fmul+0x94>
   334fe:	46c0      	nop			; (mov r8, r8)
   33500:	0003a91c 	.word	0x0003a91c
   33504:	f7ffffff 	.word	0xf7ffffff

00033508 <__aeabi_f2iz>:
   33508:	0241      	lsls	r1, r0, #9
   3350a:	0043      	lsls	r3, r0, #1
   3350c:	0fc2      	lsrs	r2, r0, #31
   3350e:	0a49      	lsrs	r1, r1, #9
   33510:	0e1b      	lsrs	r3, r3, #24
   33512:	2000      	movs	r0, #0
   33514:	2b7e      	cmp	r3, #126	; 0x7e
   33516:	dd0d      	ble.n	33534 <__aeabi_f2iz+0x2c>
   33518:	2b9d      	cmp	r3, #157	; 0x9d
   3351a:	dc0c      	bgt.n	33536 <__aeabi_f2iz+0x2e>
   3351c:	2080      	movs	r0, #128	; 0x80
   3351e:	0400      	lsls	r0, r0, #16
   33520:	4301      	orrs	r1, r0
   33522:	2b95      	cmp	r3, #149	; 0x95
   33524:	dc0a      	bgt.n	3353c <__aeabi_f2iz+0x34>
   33526:	2096      	movs	r0, #150	; 0x96
   33528:	1ac3      	subs	r3, r0, r3
   3352a:	40d9      	lsrs	r1, r3
   3352c:	4248      	negs	r0, r1
   3352e:	2a00      	cmp	r2, #0
   33530:	d100      	bne.n	33534 <__aeabi_f2iz+0x2c>
   33532:	0008      	movs	r0, r1
   33534:	4770      	bx	lr
   33536:	4b03      	ldr	r3, [pc, #12]	; (33544 <__aeabi_f2iz+0x3c>)
   33538:	18d0      	adds	r0, r2, r3
   3353a:	e7fb      	b.n	33534 <__aeabi_f2iz+0x2c>
   3353c:	3b96      	subs	r3, #150	; 0x96
   3353e:	4099      	lsls	r1, r3
   33540:	e7f4      	b.n	3352c <__aeabi_f2iz+0x24>
   33542:	46c0      	nop			; (mov r8, r8)
   33544:	7fffffff 	.word	0x7fffffff

00033548 <__aeabi_i2f>:
   33548:	b570      	push	{r4, r5, r6, lr}
   3354a:	2800      	cmp	r0, #0
   3354c:	d030      	beq.n	335b0 <__aeabi_i2f+0x68>
   3354e:	17c3      	asrs	r3, r0, #31
   33550:	18c4      	adds	r4, r0, r3
   33552:	405c      	eors	r4, r3
   33554:	0fc5      	lsrs	r5, r0, #31
   33556:	0020      	movs	r0, r4
   33558:	f001 fc8c 	bl	34e74 <__clzsi2>
   3355c:	239e      	movs	r3, #158	; 0x9e
   3355e:	1a1b      	subs	r3, r3, r0
   33560:	2b96      	cmp	r3, #150	; 0x96
   33562:	dc0d      	bgt.n	33580 <__aeabi_i2f+0x38>
   33564:	2296      	movs	r2, #150	; 0x96
   33566:	1ad2      	subs	r2, r2, r3
   33568:	4094      	lsls	r4, r2
   3356a:	002a      	movs	r2, r5
   3356c:	0264      	lsls	r4, r4, #9
   3356e:	0a64      	lsrs	r4, r4, #9
   33570:	b2db      	uxtb	r3, r3
   33572:	0264      	lsls	r4, r4, #9
   33574:	05db      	lsls	r3, r3, #23
   33576:	0a60      	lsrs	r0, r4, #9
   33578:	07d2      	lsls	r2, r2, #31
   3357a:	4318      	orrs	r0, r3
   3357c:	4310      	orrs	r0, r2
   3357e:	bd70      	pop	{r4, r5, r6, pc}
   33580:	2b99      	cmp	r3, #153	; 0x99
   33582:	dc19      	bgt.n	335b8 <__aeabi_i2f+0x70>
   33584:	2299      	movs	r2, #153	; 0x99
   33586:	1ad2      	subs	r2, r2, r3
   33588:	2a00      	cmp	r2, #0
   3358a:	dd29      	ble.n	335e0 <__aeabi_i2f+0x98>
   3358c:	4094      	lsls	r4, r2
   3358e:	0022      	movs	r2, r4
   33590:	4c14      	ldr	r4, [pc, #80]	; (335e4 <__aeabi_i2f+0x9c>)
   33592:	4014      	ands	r4, r2
   33594:	0751      	lsls	r1, r2, #29
   33596:	d004      	beq.n	335a2 <__aeabi_i2f+0x5a>
   33598:	210f      	movs	r1, #15
   3359a:	400a      	ands	r2, r1
   3359c:	2a04      	cmp	r2, #4
   3359e:	d000      	beq.n	335a2 <__aeabi_i2f+0x5a>
   335a0:	3404      	adds	r4, #4
   335a2:	0162      	lsls	r2, r4, #5
   335a4:	d413      	bmi.n	335ce <__aeabi_i2f+0x86>
   335a6:	01a4      	lsls	r4, r4, #6
   335a8:	0a64      	lsrs	r4, r4, #9
   335aa:	b2db      	uxtb	r3, r3
   335ac:	002a      	movs	r2, r5
   335ae:	e7e0      	b.n	33572 <__aeabi_i2f+0x2a>
   335b0:	2200      	movs	r2, #0
   335b2:	2300      	movs	r3, #0
   335b4:	2400      	movs	r4, #0
   335b6:	e7dc      	b.n	33572 <__aeabi_i2f+0x2a>
   335b8:	2205      	movs	r2, #5
   335ba:	0021      	movs	r1, r4
   335bc:	1a12      	subs	r2, r2, r0
   335be:	40d1      	lsrs	r1, r2
   335c0:	22b9      	movs	r2, #185	; 0xb9
   335c2:	1ad2      	subs	r2, r2, r3
   335c4:	4094      	lsls	r4, r2
   335c6:	1e62      	subs	r2, r4, #1
   335c8:	4194      	sbcs	r4, r2
   335ca:	430c      	orrs	r4, r1
   335cc:	e7da      	b.n	33584 <__aeabi_i2f+0x3c>
   335ce:	4b05      	ldr	r3, [pc, #20]	; (335e4 <__aeabi_i2f+0x9c>)
   335d0:	002a      	movs	r2, r5
   335d2:	401c      	ands	r4, r3
   335d4:	239f      	movs	r3, #159	; 0x9f
   335d6:	01a4      	lsls	r4, r4, #6
   335d8:	1a1b      	subs	r3, r3, r0
   335da:	0a64      	lsrs	r4, r4, #9
   335dc:	b2db      	uxtb	r3, r3
   335de:	e7c8      	b.n	33572 <__aeabi_i2f+0x2a>
   335e0:	0022      	movs	r2, r4
   335e2:	e7d5      	b.n	33590 <__aeabi_i2f+0x48>
   335e4:	fbffffff 	.word	0xfbffffff

000335e8 <__aeabi_dadd>:
   335e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   335ea:	4645      	mov	r5, r8
   335ec:	46de      	mov	lr, fp
   335ee:	4657      	mov	r7, sl
   335f0:	464e      	mov	r6, r9
   335f2:	030c      	lsls	r4, r1, #12
   335f4:	b5e0      	push	{r5, r6, r7, lr}
   335f6:	004e      	lsls	r6, r1, #1
   335f8:	0fc9      	lsrs	r1, r1, #31
   335fa:	4688      	mov	r8, r1
   335fc:	000d      	movs	r5, r1
   335fe:	0a61      	lsrs	r1, r4, #9
   33600:	0f44      	lsrs	r4, r0, #29
   33602:	430c      	orrs	r4, r1
   33604:	00c7      	lsls	r7, r0, #3
   33606:	0319      	lsls	r1, r3, #12
   33608:	0058      	lsls	r0, r3, #1
   3360a:	0fdb      	lsrs	r3, r3, #31
   3360c:	469b      	mov	fp, r3
   3360e:	0a4b      	lsrs	r3, r1, #9
   33610:	0f51      	lsrs	r1, r2, #29
   33612:	430b      	orrs	r3, r1
   33614:	0d76      	lsrs	r6, r6, #21
   33616:	0d40      	lsrs	r0, r0, #21
   33618:	0019      	movs	r1, r3
   3361a:	00d2      	lsls	r2, r2, #3
   3361c:	45d8      	cmp	r8, fp
   3361e:	d100      	bne.n	33622 <__aeabi_dadd+0x3a>
   33620:	e0ae      	b.n	33780 <__aeabi_dadd+0x198>
   33622:	1a35      	subs	r5, r6, r0
   33624:	2d00      	cmp	r5, #0
   33626:	dc00      	bgt.n	3362a <__aeabi_dadd+0x42>
   33628:	e0f6      	b.n	33818 <__aeabi_dadd+0x230>
   3362a:	2800      	cmp	r0, #0
   3362c:	d10f      	bne.n	3364e <__aeabi_dadd+0x66>
   3362e:	4313      	orrs	r3, r2
   33630:	d100      	bne.n	33634 <__aeabi_dadd+0x4c>
   33632:	e0db      	b.n	337ec <__aeabi_dadd+0x204>
   33634:	1e6b      	subs	r3, r5, #1
   33636:	2b00      	cmp	r3, #0
   33638:	d000      	beq.n	3363c <__aeabi_dadd+0x54>
   3363a:	e137      	b.n	338ac <__aeabi_dadd+0x2c4>
   3363c:	1aba      	subs	r2, r7, r2
   3363e:	4297      	cmp	r7, r2
   33640:	41bf      	sbcs	r7, r7
   33642:	1a64      	subs	r4, r4, r1
   33644:	427f      	negs	r7, r7
   33646:	1be4      	subs	r4, r4, r7
   33648:	2601      	movs	r6, #1
   3364a:	0017      	movs	r7, r2
   3364c:	e024      	b.n	33698 <__aeabi_dadd+0xb0>
   3364e:	4bc6      	ldr	r3, [pc, #792]	; (33968 <__aeabi_dadd+0x380>)
   33650:	429e      	cmp	r6, r3
   33652:	d04d      	beq.n	336f0 <__aeabi_dadd+0x108>
   33654:	2380      	movs	r3, #128	; 0x80
   33656:	041b      	lsls	r3, r3, #16
   33658:	4319      	orrs	r1, r3
   3365a:	2d38      	cmp	r5, #56	; 0x38
   3365c:	dd00      	ble.n	33660 <__aeabi_dadd+0x78>
   3365e:	e107      	b.n	33870 <__aeabi_dadd+0x288>
   33660:	2d1f      	cmp	r5, #31
   33662:	dd00      	ble.n	33666 <__aeabi_dadd+0x7e>
   33664:	e138      	b.n	338d8 <__aeabi_dadd+0x2f0>
   33666:	2020      	movs	r0, #32
   33668:	1b43      	subs	r3, r0, r5
   3366a:	469a      	mov	sl, r3
   3366c:	000b      	movs	r3, r1
   3366e:	4650      	mov	r0, sl
   33670:	4083      	lsls	r3, r0
   33672:	4699      	mov	r9, r3
   33674:	0013      	movs	r3, r2
   33676:	4648      	mov	r0, r9
   33678:	40eb      	lsrs	r3, r5
   3367a:	4318      	orrs	r0, r3
   3367c:	0003      	movs	r3, r0
   3367e:	4650      	mov	r0, sl
   33680:	4082      	lsls	r2, r0
   33682:	1e50      	subs	r0, r2, #1
   33684:	4182      	sbcs	r2, r0
   33686:	40e9      	lsrs	r1, r5
   33688:	431a      	orrs	r2, r3
   3368a:	1aba      	subs	r2, r7, r2
   3368c:	1a61      	subs	r1, r4, r1
   3368e:	4297      	cmp	r7, r2
   33690:	41a4      	sbcs	r4, r4
   33692:	0017      	movs	r7, r2
   33694:	4264      	negs	r4, r4
   33696:	1b0c      	subs	r4, r1, r4
   33698:	0223      	lsls	r3, r4, #8
   3369a:	d562      	bpl.n	33762 <__aeabi_dadd+0x17a>
   3369c:	0264      	lsls	r4, r4, #9
   3369e:	0a65      	lsrs	r5, r4, #9
   336a0:	2d00      	cmp	r5, #0
   336a2:	d100      	bne.n	336a6 <__aeabi_dadd+0xbe>
   336a4:	e0df      	b.n	33866 <__aeabi_dadd+0x27e>
   336a6:	0028      	movs	r0, r5
   336a8:	f001 fbe4 	bl	34e74 <__clzsi2>
   336ac:	0003      	movs	r3, r0
   336ae:	3b08      	subs	r3, #8
   336b0:	2b1f      	cmp	r3, #31
   336b2:	dd00      	ble.n	336b6 <__aeabi_dadd+0xce>
   336b4:	e0d2      	b.n	3385c <__aeabi_dadd+0x274>
   336b6:	2220      	movs	r2, #32
   336b8:	003c      	movs	r4, r7
   336ba:	1ad2      	subs	r2, r2, r3
   336bc:	409d      	lsls	r5, r3
   336be:	40d4      	lsrs	r4, r2
   336c0:	409f      	lsls	r7, r3
   336c2:	4325      	orrs	r5, r4
   336c4:	429e      	cmp	r6, r3
   336c6:	dd00      	ble.n	336ca <__aeabi_dadd+0xe2>
   336c8:	e0c4      	b.n	33854 <__aeabi_dadd+0x26c>
   336ca:	1b9e      	subs	r6, r3, r6
   336cc:	1c73      	adds	r3, r6, #1
   336ce:	2b1f      	cmp	r3, #31
   336d0:	dd00      	ble.n	336d4 <__aeabi_dadd+0xec>
   336d2:	e0f1      	b.n	338b8 <__aeabi_dadd+0x2d0>
   336d4:	2220      	movs	r2, #32
   336d6:	0038      	movs	r0, r7
   336d8:	0029      	movs	r1, r5
   336da:	1ad2      	subs	r2, r2, r3
   336dc:	40d8      	lsrs	r0, r3
   336de:	4091      	lsls	r1, r2
   336e0:	4097      	lsls	r7, r2
   336e2:	002c      	movs	r4, r5
   336e4:	4301      	orrs	r1, r0
   336e6:	1e78      	subs	r0, r7, #1
   336e8:	4187      	sbcs	r7, r0
   336ea:	40dc      	lsrs	r4, r3
   336ec:	2600      	movs	r6, #0
   336ee:	430f      	orrs	r7, r1
   336f0:	077b      	lsls	r3, r7, #29
   336f2:	d009      	beq.n	33708 <__aeabi_dadd+0x120>
   336f4:	230f      	movs	r3, #15
   336f6:	403b      	ands	r3, r7
   336f8:	2b04      	cmp	r3, #4
   336fa:	d005      	beq.n	33708 <__aeabi_dadd+0x120>
   336fc:	1d3b      	adds	r3, r7, #4
   336fe:	42bb      	cmp	r3, r7
   33700:	41bf      	sbcs	r7, r7
   33702:	427f      	negs	r7, r7
   33704:	19e4      	adds	r4, r4, r7
   33706:	001f      	movs	r7, r3
   33708:	0223      	lsls	r3, r4, #8
   3370a:	d52c      	bpl.n	33766 <__aeabi_dadd+0x17e>
   3370c:	4b96      	ldr	r3, [pc, #600]	; (33968 <__aeabi_dadd+0x380>)
   3370e:	3601      	adds	r6, #1
   33710:	429e      	cmp	r6, r3
   33712:	d100      	bne.n	33716 <__aeabi_dadd+0x12e>
   33714:	e09a      	b.n	3384c <__aeabi_dadd+0x264>
   33716:	4645      	mov	r5, r8
   33718:	4b94      	ldr	r3, [pc, #592]	; (3396c <__aeabi_dadd+0x384>)
   3371a:	08ff      	lsrs	r7, r7, #3
   3371c:	401c      	ands	r4, r3
   3371e:	0760      	lsls	r0, r4, #29
   33720:	0576      	lsls	r6, r6, #21
   33722:	0264      	lsls	r4, r4, #9
   33724:	4307      	orrs	r7, r0
   33726:	0b24      	lsrs	r4, r4, #12
   33728:	0d76      	lsrs	r6, r6, #21
   3372a:	2100      	movs	r1, #0
   3372c:	0324      	lsls	r4, r4, #12
   3372e:	0b23      	lsrs	r3, r4, #12
   33730:	0d0c      	lsrs	r4, r1, #20
   33732:	4a8f      	ldr	r2, [pc, #572]	; (33970 <__aeabi_dadd+0x388>)
   33734:	0524      	lsls	r4, r4, #20
   33736:	431c      	orrs	r4, r3
   33738:	4014      	ands	r4, r2
   3373a:	0533      	lsls	r3, r6, #20
   3373c:	4323      	orrs	r3, r4
   3373e:	005b      	lsls	r3, r3, #1
   33740:	07ed      	lsls	r5, r5, #31
   33742:	085b      	lsrs	r3, r3, #1
   33744:	432b      	orrs	r3, r5
   33746:	0038      	movs	r0, r7
   33748:	0019      	movs	r1, r3
   3374a:	bc3c      	pop	{r2, r3, r4, r5}
   3374c:	4690      	mov	r8, r2
   3374e:	4699      	mov	r9, r3
   33750:	46a2      	mov	sl, r4
   33752:	46ab      	mov	fp, r5
   33754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33756:	4664      	mov	r4, ip
   33758:	4304      	orrs	r4, r0
   3375a:	d100      	bne.n	3375e <__aeabi_dadd+0x176>
   3375c:	e211      	b.n	33b82 <__aeabi_dadd+0x59a>
   3375e:	0004      	movs	r4, r0
   33760:	4667      	mov	r7, ip
   33762:	077b      	lsls	r3, r7, #29
   33764:	d1c6      	bne.n	336f4 <__aeabi_dadd+0x10c>
   33766:	4645      	mov	r5, r8
   33768:	0760      	lsls	r0, r4, #29
   3376a:	08ff      	lsrs	r7, r7, #3
   3376c:	4307      	orrs	r7, r0
   3376e:	08e4      	lsrs	r4, r4, #3
   33770:	4b7d      	ldr	r3, [pc, #500]	; (33968 <__aeabi_dadd+0x380>)
   33772:	429e      	cmp	r6, r3
   33774:	d030      	beq.n	337d8 <__aeabi_dadd+0x1f0>
   33776:	0324      	lsls	r4, r4, #12
   33778:	0576      	lsls	r6, r6, #21
   3377a:	0b24      	lsrs	r4, r4, #12
   3377c:	0d76      	lsrs	r6, r6, #21
   3377e:	e7d4      	b.n	3372a <__aeabi_dadd+0x142>
   33780:	1a33      	subs	r3, r6, r0
   33782:	469a      	mov	sl, r3
   33784:	2b00      	cmp	r3, #0
   33786:	dd78      	ble.n	3387a <__aeabi_dadd+0x292>
   33788:	2800      	cmp	r0, #0
   3378a:	d031      	beq.n	337f0 <__aeabi_dadd+0x208>
   3378c:	4876      	ldr	r0, [pc, #472]	; (33968 <__aeabi_dadd+0x380>)
   3378e:	4286      	cmp	r6, r0
   33790:	d0ae      	beq.n	336f0 <__aeabi_dadd+0x108>
   33792:	2080      	movs	r0, #128	; 0x80
   33794:	0400      	lsls	r0, r0, #16
   33796:	4301      	orrs	r1, r0
   33798:	4653      	mov	r3, sl
   3379a:	2b38      	cmp	r3, #56	; 0x38
   3379c:	dc00      	bgt.n	337a0 <__aeabi_dadd+0x1b8>
   3379e:	e0e9      	b.n	33974 <__aeabi_dadd+0x38c>
   337a0:	430a      	orrs	r2, r1
   337a2:	1e51      	subs	r1, r2, #1
   337a4:	418a      	sbcs	r2, r1
   337a6:	2100      	movs	r1, #0
   337a8:	19d2      	adds	r2, r2, r7
   337aa:	42ba      	cmp	r2, r7
   337ac:	41bf      	sbcs	r7, r7
   337ae:	1909      	adds	r1, r1, r4
   337b0:	427c      	negs	r4, r7
   337b2:	0017      	movs	r7, r2
   337b4:	190c      	adds	r4, r1, r4
   337b6:	0223      	lsls	r3, r4, #8
   337b8:	d5d3      	bpl.n	33762 <__aeabi_dadd+0x17a>
   337ba:	4b6b      	ldr	r3, [pc, #428]	; (33968 <__aeabi_dadd+0x380>)
   337bc:	3601      	adds	r6, #1
   337be:	429e      	cmp	r6, r3
   337c0:	d100      	bne.n	337c4 <__aeabi_dadd+0x1dc>
   337c2:	e13a      	b.n	33a3a <__aeabi_dadd+0x452>
   337c4:	2001      	movs	r0, #1
   337c6:	4b69      	ldr	r3, [pc, #420]	; (3396c <__aeabi_dadd+0x384>)
   337c8:	401c      	ands	r4, r3
   337ca:	087b      	lsrs	r3, r7, #1
   337cc:	4007      	ands	r7, r0
   337ce:	431f      	orrs	r7, r3
   337d0:	07e0      	lsls	r0, r4, #31
   337d2:	4307      	orrs	r7, r0
   337d4:	0864      	lsrs	r4, r4, #1
   337d6:	e78b      	b.n	336f0 <__aeabi_dadd+0x108>
   337d8:	0023      	movs	r3, r4
   337da:	433b      	orrs	r3, r7
   337dc:	d100      	bne.n	337e0 <__aeabi_dadd+0x1f8>
   337de:	e1cb      	b.n	33b78 <__aeabi_dadd+0x590>
   337e0:	2280      	movs	r2, #128	; 0x80
   337e2:	0312      	lsls	r2, r2, #12
   337e4:	4314      	orrs	r4, r2
   337e6:	0324      	lsls	r4, r4, #12
   337e8:	0b24      	lsrs	r4, r4, #12
   337ea:	e79e      	b.n	3372a <__aeabi_dadd+0x142>
   337ec:	002e      	movs	r6, r5
   337ee:	e77f      	b.n	336f0 <__aeabi_dadd+0x108>
   337f0:	0008      	movs	r0, r1
   337f2:	4310      	orrs	r0, r2
   337f4:	d100      	bne.n	337f8 <__aeabi_dadd+0x210>
   337f6:	e0b4      	b.n	33962 <__aeabi_dadd+0x37a>
   337f8:	1e58      	subs	r0, r3, #1
   337fa:	2800      	cmp	r0, #0
   337fc:	d000      	beq.n	33800 <__aeabi_dadd+0x218>
   337fe:	e0de      	b.n	339be <__aeabi_dadd+0x3d6>
   33800:	18ba      	adds	r2, r7, r2
   33802:	42ba      	cmp	r2, r7
   33804:	419b      	sbcs	r3, r3
   33806:	1864      	adds	r4, r4, r1
   33808:	425b      	negs	r3, r3
   3380a:	18e4      	adds	r4, r4, r3
   3380c:	0017      	movs	r7, r2
   3380e:	2601      	movs	r6, #1
   33810:	0223      	lsls	r3, r4, #8
   33812:	d5a6      	bpl.n	33762 <__aeabi_dadd+0x17a>
   33814:	2602      	movs	r6, #2
   33816:	e7d5      	b.n	337c4 <__aeabi_dadd+0x1dc>
   33818:	2d00      	cmp	r5, #0
   3381a:	d16e      	bne.n	338fa <__aeabi_dadd+0x312>
   3381c:	1c70      	adds	r0, r6, #1
   3381e:	0540      	lsls	r0, r0, #21
   33820:	0d40      	lsrs	r0, r0, #21
   33822:	2801      	cmp	r0, #1
   33824:	dc00      	bgt.n	33828 <__aeabi_dadd+0x240>
   33826:	e0f9      	b.n	33a1c <__aeabi_dadd+0x434>
   33828:	1ab8      	subs	r0, r7, r2
   3382a:	4684      	mov	ip, r0
   3382c:	4287      	cmp	r7, r0
   3382e:	4180      	sbcs	r0, r0
   33830:	1ae5      	subs	r5, r4, r3
   33832:	4240      	negs	r0, r0
   33834:	1a2d      	subs	r5, r5, r0
   33836:	0228      	lsls	r0, r5, #8
   33838:	d400      	bmi.n	3383c <__aeabi_dadd+0x254>
   3383a:	e089      	b.n	33950 <__aeabi_dadd+0x368>
   3383c:	1bd7      	subs	r7, r2, r7
   3383e:	42ba      	cmp	r2, r7
   33840:	4192      	sbcs	r2, r2
   33842:	1b1c      	subs	r4, r3, r4
   33844:	4252      	negs	r2, r2
   33846:	1aa5      	subs	r5, r4, r2
   33848:	46d8      	mov	r8, fp
   3384a:	e729      	b.n	336a0 <__aeabi_dadd+0xb8>
   3384c:	4645      	mov	r5, r8
   3384e:	2400      	movs	r4, #0
   33850:	2700      	movs	r7, #0
   33852:	e76a      	b.n	3372a <__aeabi_dadd+0x142>
   33854:	4c45      	ldr	r4, [pc, #276]	; (3396c <__aeabi_dadd+0x384>)
   33856:	1af6      	subs	r6, r6, r3
   33858:	402c      	ands	r4, r5
   3385a:	e749      	b.n	336f0 <__aeabi_dadd+0x108>
   3385c:	003d      	movs	r5, r7
   3385e:	3828      	subs	r0, #40	; 0x28
   33860:	4085      	lsls	r5, r0
   33862:	2700      	movs	r7, #0
   33864:	e72e      	b.n	336c4 <__aeabi_dadd+0xdc>
   33866:	0038      	movs	r0, r7
   33868:	f001 fb04 	bl	34e74 <__clzsi2>
   3386c:	3020      	adds	r0, #32
   3386e:	e71d      	b.n	336ac <__aeabi_dadd+0xc4>
   33870:	430a      	orrs	r2, r1
   33872:	1e51      	subs	r1, r2, #1
   33874:	418a      	sbcs	r2, r1
   33876:	2100      	movs	r1, #0
   33878:	e707      	b.n	3368a <__aeabi_dadd+0xa2>
   3387a:	2b00      	cmp	r3, #0
   3387c:	d000      	beq.n	33880 <__aeabi_dadd+0x298>
   3387e:	e0f3      	b.n	33a68 <__aeabi_dadd+0x480>
   33880:	1c70      	adds	r0, r6, #1
   33882:	0543      	lsls	r3, r0, #21
   33884:	0d5b      	lsrs	r3, r3, #21
   33886:	2b01      	cmp	r3, #1
   33888:	dc00      	bgt.n	3388c <__aeabi_dadd+0x2a4>
   3388a:	e0ad      	b.n	339e8 <__aeabi_dadd+0x400>
   3388c:	4b36      	ldr	r3, [pc, #216]	; (33968 <__aeabi_dadd+0x380>)
   3388e:	4298      	cmp	r0, r3
   33890:	d100      	bne.n	33894 <__aeabi_dadd+0x2ac>
   33892:	e0d1      	b.n	33a38 <__aeabi_dadd+0x450>
   33894:	18ba      	adds	r2, r7, r2
   33896:	42ba      	cmp	r2, r7
   33898:	41bf      	sbcs	r7, r7
   3389a:	1864      	adds	r4, r4, r1
   3389c:	427f      	negs	r7, r7
   3389e:	19e4      	adds	r4, r4, r7
   338a0:	07e7      	lsls	r7, r4, #31
   338a2:	0852      	lsrs	r2, r2, #1
   338a4:	4317      	orrs	r7, r2
   338a6:	0864      	lsrs	r4, r4, #1
   338a8:	0006      	movs	r6, r0
   338aa:	e721      	b.n	336f0 <__aeabi_dadd+0x108>
   338ac:	482e      	ldr	r0, [pc, #184]	; (33968 <__aeabi_dadd+0x380>)
   338ae:	4285      	cmp	r5, r0
   338b0:	d100      	bne.n	338b4 <__aeabi_dadd+0x2cc>
   338b2:	e093      	b.n	339dc <__aeabi_dadd+0x3f4>
   338b4:	001d      	movs	r5, r3
   338b6:	e6d0      	b.n	3365a <__aeabi_dadd+0x72>
   338b8:	0029      	movs	r1, r5
   338ba:	3e1f      	subs	r6, #31
   338bc:	40f1      	lsrs	r1, r6
   338be:	2b20      	cmp	r3, #32
   338c0:	d100      	bne.n	338c4 <__aeabi_dadd+0x2dc>
   338c2:	e08d      	b.n	339e0 <__aeabi_dadd+0x3f8>
   338c4:	2240      	movs	r2, #64	; 0x40
   338c6:	1ad3      	subs	r3, r2, r3
   338c8:	409d      	lsls	r5, r3
   338ca:	432f      	orrs	r7, r5
   338cc:	1e7d      	subs	r5, r7, #1
   338ce:	41af      	sbcs	r7, r5
   338d0:	2400      	movs	r4, #0
   338d2:	430f      	orrs	r7, r1
   338d4:	2600      	movs	r6, #0
   338d6:	e744      	b.n	33762 <__aeabi_dadd+0x17a>
   338d8:	002b      	movs	r3, r5
   338da:	0008      	movs	r0, r1
   338dc:	3b20      	subs	r3, #32
   338de:	40d8      	lsrs	r0, r3
   338e0:	0003      	movs	r3, r0
   338e2:	2d20      	cmp	r5, #32
   338e4:	d100      	bne.n	338e8 <__aeabi_dadd+0x300>
   338e6:	e07d      	b.n	339e4 <__aeabi_dadd+0x3fc>
   338e8:	2040      	movs	r0, #64	; 0x40
   338ea:	1b45      	subs	r5, r0, r5
   338ec:	40a9      	lsls	r1, r5
   338ee:	430a      	orrs	r2, r1
   338f0:	1e51      	subs	r1, r2, #1
   338f2:	418a      	sbcs	r2, r1
   338f4:	2100      	movs	r1, #0
   338f6:	431a      	orrs	r2, r3
   338f8:	e6c7      	b.n	3368a <__aeabi_dadd+0xa2>
   338fa:	2e00      	cmp	r6, #0
   338fc:	d050      	beq.n	339a0 <__aeabi_dadd+0x3b8>
   338fe:	4e1a      	ldr	r6, [pc, #104]	; (33968 <__aeabi_dadd+0x380>)
   33900:	42b0      	cmp	r0, r6
   33902:	d057      	beq.n	339b4 <__aeabi_dadd+0x3cc>
   33904:	2680      	movs	r6, #128	; 0x80
   33906:	426b      	negs	r3, r5
   33908:	4699      	mov	r9, r3
   3390a:	0436      	lsls	r6, r6, #16
   3390c:	4334      	orrs	r4, r6
   3390e:	464b      	mov	r3, r9
   33910:	2b38      	cmp	r3, #56	; 0x38
   33912:	dd00      	ble.n	33916 <__aeabi_dadd+0x32e>
   33914:	e0d6      	b.n	33ac4 <__aeabi_dadd+0x4dc>
   33916:	2b1f      	cmp	r3, #31
   33918:	dd00      	ble.n	3391c <__aeabi_dadd+0x334>
   3391a:	e135      	b.n	33b88 <__aeabi_dadd+0x5a0>
   3391c:	2620      	movs	r6, #32
   3391e:	1af5      	subs	r5, r6, r3
   33920:	0026      	movs	r6, r4
   33922:	40ae      	lsls	r6, r5
   33924:	46b2      	mov	sl, r6
   33926:	003e      	movs	r6, r7
   33928:	40de      	lsrs	r6, r3
   3392a:	46ac      	mov	ip, r5
   3392c:	0035      	movs	r5, r6
   3392e:	4656      	mov	r6, sl
   33930:	432e      	orrs	r6, r5
   33932:	4665      	mov	r5, ip
   33934:	40af      	lsls	r7, r5
   33936:	1e7d      	subs	r5, r7, #1
   33938:	41af      	sbcs	r7, r5
   3393a:	40dc      	lsrs	r4, r3
   3393c:	4337      	orrs	r7, r6
   3393e:	1bd7      	subs	r7, r2, r7
   33940:	42ba      	cmp	r2, r7
   33942:	4192      	sbcs	r2, r2
   33944:	1b0c      	subs	r4, r1, r4
   33946:	4252      	negs	r2, r2
   33948:	1aa4      	subs	r4, r4, r2
   3394a:	0006      	movs	r6, r0
   3394c:	46d8      	mov	r8, fp
   3394e:	e6a3      	b.n	33698 <__aeabi_dadd+0xb0>
   33950:	4664      	mov	r4, ip
   33952:	4667      	mov	r7, ip
   33954:	432c      	orrs	r4, r5
   33956:	d000      	beq.n	3395a <__aeabi_dadd+0x372>
   33958:	e6a2      	b.n	336a0 <__aeabi_dadd+0xb8>
   3395a:	2500      	movs	r5, #0
   3395c:	2600      	movs	r6, #0
   3395e:	2700      	movs	r7, #0
   33960:	e706      	b.n	33770 <__aeabi_dadd+0x188>
   33962:	001e      	movs	r6, r3
   33964:	e6c4      	b.n	336f0 <__aeabi_dadd+0x108>
   33966:	46c0      	nop			; (mov r8, r8)
   33968:	000007ff 	.word	0x000007ff
   3396c:	ff7fffff 	.word	0xff7fffff
   33970:	800fffff 	.word	0x800fffff
   33974:	2b1f      	cmp	r3, #31
   33976:	dc63      	bgt.n	33a40 <__aeabi_dadd+0x458>
   33978:	2020      	movs	r0, #32
   3397a:	1ac3      	subs	r3, r0, r3
   3397c:	0008      	movs	r0, r1
   3397e:	4098      	lsls	r0, r3
   33980:	469c      	mov	ip, r3
   33982:	4683      	mov	fp, r0
   33984:	4653      	mov	r3, sl
   33986:	0010      	movs	r0, r2
   33988:	40d8      	lsrs	r0, r3
   3398a:	0003      	movs	r3, r0
   3398c:	4658      	mov	r0, fp
   3398e:	4318      	orrs	r0, r3
   33990:	4663      	mov	r3, ip
   33992:	409a      	lsls	r2, r3
   33994:	1e53      	subs	r3, r2, #1
   33996:	419a      	sbcs	r2, r3
   33998:	4653      	mov	r3, sl
   3399a:	4302      	orrs	r2, r0
   3399c:	40d9      	lsrs	r1, r3
   3399e:	e703      	b.n	337a8 <__aeabi_dadd+0x1c0>
   339a0:	0026      	movs	r6, r4
   339a2:	433e      	orrs	r6, r7
   339a4:	d006      	beq.n	339b4 <__aeabi_dadd+0x3cc>
   339a6:	43eb      	mvns	r3, r5
   339a8:	4699      	mov	r9, r3
   339aa:	2b00      	cmp	r3, #0
   339ac:	d0c7      	beq.n	3393e <__aeabi_dadd+0x356>
   339ae:	4e94      	ldr	r6, [pc, #592]	; (33c00 <__aeabi_dadd+0x618>)
   339b0:	42b0      	cmp	r0, r6
   339b2:	d1ac      	bne.n	3390e <__aeabi_dadd+0x326>
   339b4:	000c      	movs	r4, r1
   339b6:	0017      	movs	r7, r2
   339b8:	0006      	movs	r6, r0
   339ba:	46d8      	mov	r8, fp
   339bc:	e698      	b.n	336f0 <__aeabi_dadd+0x108>
   339be:	4b90      	ldr	r3, [pc, #576]	; (33c00 <__aeabi_dadd+0x618>)
   339c0:	459a      	cmp	sl, r3
   339c2:	d00b      	beq.n	339dc <__aeabi_dadd+0x3f4>
   339c4:	4682      	mov	sl, r0
   339c6:	e6e7      	b.n	33798 <__aeabi_dadd+0x1b0>
   339c8:	2800      	cmp	r0, #0
   339ca:	d000      	beq.n	339ce <__aeabi_dadd+0x3e6>
   339cc:	e09e      	b.n	33b0c <__aeabi_dadd+0x524>
   339ce:	0018      	movs	r0, r3
   339d0:	4310      	orrs	r0, r2
   339d2:	d100      	bne.n	339d6 <__aeabi_dadd+0x3ee>
   339d4:	e0e9      	b.n	33baa <__aeabi_dadd+0x5c2>
   339d6:	001c      	movs	r4, r3
   339d8:	0017      	movs	r7, r2
   339da:	46d8      	mov	r8, fp
   339dc:	4e88      	ldr	r6, [pc, #544]	; (33c00 <__aeabi_dadd+0x618>)
   339de:	e687      	b.n	336f0 <__aeabi_dadd+0x108>
   339e0:	2500      	movs	r5, #0
   339e2:	e772      	b.n	338ca <__aeabi_dadd+0x2e2>
   339e4:	2100      	movs	r1, #0
   339e6:	e782      	b.n	338ee <__aeabi_dadd+0x306>
   339e8:	0023      	movs	r3, r4
   339ea:	433b      	orrs	r3, r7
   339ec:	2e00      	cmp	r6, #0
   339ee:	d000      	beq.n	339f2 <__aeabi_dadd+0x40a>
   339f0:	e0ab      	b.n	33b4a <__aeabi_dadd+0x562>
   339f2:	2b00      	cmp	r3, #0
   339f4:	d100      	bne.n	339f8 <__aeabi_dadd+0x410>
   339f6:	e0e7      	b.n	33bc8 <__aeabi_dadd+0x5e0>
   339f8:	000b      	movs	r3, r1
   339fa:	4313      	orrs	r3, r2
   339fc:	d100      	bne.n	33a00 <__aeabi_dadd+0x418>
   339fe:	e677      	b.n	336f0 <__aeabi_dadd+0x108>
   33a00:	18ba      	adds	r2, r7, r2
   33a02:	42ba      	cmp	r2, r7
   33a04:	41bf      	sbcs	r7, r7
   33a06:	1864      	adds	r4, r4, r1
   33a08:	427f      	negs	r7, r7
   33a0a:	19e4      	adds	r4, r4, r7
   33a0c:	0223      	lsls	r3, r4, #8
   33a0e:	d400      	bmi.n	33a12 <__aeabi_dadd+0x42a>
   33a10:	e0f2      	b.n	33bf8 <__aeabi_dadd+0x610>
   33a12:	4b7c      	ldr	r3, [pc, #496]	; (33c04 <__aeabi_dadd+0x61c>)
   33a14:	0017      	movs	r7, r2
   33a16:	401c      	ands	r4, r3
   33a18:	0006      	movs	r6, r0
   33a1a:	e669      	b.n	336f0 <__aeabi_dadd+0x108>
   33a1c:	0020      	movs	r0, r4
   33a1e:	4338      	orrs	r0, r7
   33a20:	2e00      	cmp	r6, #0
   33a22:	d1d1      	bne.n	339c8 <__aeabi_dadd+0x3e0>
   33a24:	2800      	cmp	r0, #0
   33a26:	d15b      	bne.n	33ae0 <__aeabi_dadd+0x4f8>
   33a28:	001c      	movs	r4, r3
   33a2a:	4314      	orrs	r4, r2
   33a2c:	d100      	bne.n	33a30 <__aeabi_dadd+0x448>
   33a2e:	e0a8      	b.n	33b82 <__aeabi_dadd+0x59a>
   33a30:	001c      	movs	r4, r3
   33a32:	0017      	movs	r7, r2
   33a34:	46d8      	mov	r8, fp
   33a36:	e65b      	b.n	336f0 <__aeabi_dadd+0x108>
   33a38:	0006      	movs	r6, r0
   33a3a:	2400      	movs	r4, #0
   33a3c:	2700      	movs	r7, #0
   33a3e:	e697      	b.n	33770 <__aeabi_dadd+0x188>
   33a40:	4650      	mov	r0, sl
   33a42:	000b      	movs	r3, r1
   33a44:	3820      	subs	r0, #32
   33a46:	40c3      	lsrs	r3, r0
   33a48:	4699      	mov	r9, r3
   33a4a:	4653      	mov	r3, sl
   33a4c:	2b20      	cmp	r3, #32
   33a4e:	d100      	bne.n	33a52 <__aeabi_dadd+0x46a>
   33a50:	e095      	b.n	33b7e <__aeabi_dadd+0x596>
   33a52:	2340      	movs	r3, #64	; 0x40
   33a54:	4650      	mov	r0, sl
   33a56:	1a1b      	subs	r3, r3, r0
   33a58:	4099      	lsls	r1, r3
   33a5a:	430a      	orrs	r2, r1
   33a5c:	1e51      	subs	r1, r2, #1
   33a5e:	418a      	sbcs	r2, r1
   33a60:	464b      	mov	r3, r9
   33a62:	2100      	movs	r1, #0
   33a64:	431a      	orrs	r2, r3
   33a66:	e69f      	b.n	337a8 <__aeabi_dadd+0x1c0>
   33a68:	2e00      	cmp	r6, #0
   33a6a:	d130      	bne.n	33ace <__aeabi_dadd+0x4e6>
   33a6c:	0026      	movs	r6, r4
   33a6e:	433e      	orrs	r6, r7
   33a70:	d067      	beq.n	33b42 <__aeabi_dadd+0x55a>
   33a72:	43db      	mvns	r3, r3
   33a74:	469a      	mov	sl, r3
   33a76:	2b00      	cmp	r3, #0
   33a78:	d01c      	beq.n	33ab4 <__aeabi_dadd+0x4cc>
   33a7a:	4e61      	ldr	r6, [pc, #388]	; (33c00 <__aeabi_dadd+0x618>)
   33a7c:	42b0      	cmp	r0, r6
   33a7e:	d060      	beq.n	33b42 <__aeabi_dadd+0x55a>
   33a80:	4653      	mov	r3, sl
   33a82:	2b38      	cmp	r3, #56	; 0x38
   33a84:	dd00      	ble.n	33a88 <__aeabi_dadd+0x4a0>
   33a86:	e096      	b.n	33bb6 <__aeabi_dadd+0x5ce>
   33a88:	2b1f      	cmp	r3, #31
   33a8a:	dd00      	ble.n	33a8e <__aeabi_dadd+0x4a6>
   33a8c:	e09f      	b.n	33bce <__aeabi_dadd+0x5e6>
   33a8e:	2620      	movs	r6, #32
   33a90:	1af3      	subs	r3, r6, r3
   33a92:	0026      	movs	r6, r4
   33a94:	409e      	lsls	r6, r3
   33a96:	469c      	mov	ip, r3
   33a98:	46b3      	mov	fp, r6
   33a9a:	4653      	mov	r3, sl
   33a9c:	003e      	movs	r6, r7
   33a9e:	40de      	lsrs	r6, r3
   33aa0:	0033      	movs	r3, r6
   33aa2:	465e      	mov	r6, fp
   33aa4:	431e      	orrs	r6, r3
   33aa6:	4663      	mov	r3, ip
   33aa8:	409f      	lsls	r7, r3
   33aaa:	1e7b      	subs	r3, r7, #1
   33aac:	419f      	sbcs	r7, r3
   33aae:	4653      	mov	r3, sl
   33ab0:	40dc      	lsrs	r4, r3
   33ab2:	4337      	orrs	r7, r6
   33ab4:	18bf      	adds	r7, r7, r2
   33ab6:	4297      	cmp	r7, r2
   33ab8:	4192      	sbcs	r2, r2
   33aba:	1864      	adds	r4, r4, r1
   33abc:	4252      	negs	r2, r2
   33abe:	18a4      	adds	r4, r4, r2
   33ac0:	0006      	movs	r6, r0
   33ac2:	e678      	b.n	337b6 <__aeabi_dadd+0x1ce>
   33ac4:	4327      	orrs	r7, r4
   33ac6:	1e7c      	subs	r4, r7, #1
   33ac8:	41a7      	sbcs	r7, r4
   33aca:	2400      	movs	r4, #0
   33acc:	e737      	b.n	3393e <__aeabi_dadd+0x356>
   33ace:	4e4c      	ldr	r6, [pc, #304]	; (33c00 <__aeabi_dadd+0x618>)
   33ad0:	42b0      	cmp	r0, r6
   33ad2:	d036      	beq.n	33b42 <__aeabi_dadd+0x55a>
   33ad4:	2680      	movs	r6, #128	; 0x80
   33ad6:	425b      	negs	r3, r3
   33ad8:	0436      	lsls	r6, r6, #16
   33ada:	469a      	mov	sl, r3
   33adc:	4334      	orrs	r4, r6
   33ade:	e7cf      	b.n	33a80 <__aeabi_dadd+0x498>
   33ae0:	0018      	movs	r0, r3
   33ae2:	4310      	orrs	r0, r2
   33ae4:	d100      	bne.n	33ae8 <__aeabi_dadd+0x500>
   33ae6:	e603      	b.n	336f0 <__aeabi_dadd+0x108>
   33ae8:	1ab8      	subs	r0, r7, r2
   33aea:	4684      	mov	ip, r0
   33aec:	4567      	cmp	r7, ip
   33aee:	41ad      	sbcs	r5, r5
   33af0:	1ae0      	subs	r0, r4, r3
   33af2:	426d      	negs	r5, r5
   33af4:	1b40      	subs	r0, r0, r5
   33af6:	0205      	lsls	r5, r0, #8
   33af8:	d400      	bmi.n	33afc <__aeabi_dadd+0x514>
   33afa:	e62c      	b.n	33756 <__aeabi_dadd+0x16e>
   33afc:	1bd7      	subs	r7, r2, r7
   33afe:	42ba      	cmp	r2, r7
   33b00:	4192      	sbcs	r2, r2
   33b02:	1b1c      	subs	r4, r3, r4
   33b04:	4252      	negs	r2, r2
   33b06:	1aa4      	subs	r4, r4, r2
   33b08:	46d8      	mov	r8, fp
   33b0a:	e5f1      	b.n	336f0 <__aeabi_dadd+0x108>
   33b0c:	0018      	movs	r0, r3
   33b0e:	4310      	orrs	r0, r2
   33b10:	d100      	bne.n	33b14 <__aeabi_dadd+0x52c>
   33b12:	e763      	b.n	339dc <__aeabi_dadd+0x3f4>
   33b14:	08f8      	lsrs	r0, r7, #3
   33b16:	0767      	lsls	r7, r4, #29
   33b18:	4307      	orrs	r7, r0
   33b1a:	2080      	movs	r0, #128	; 0x80
   33b1c:	08e4      	lsrs	r4, r4, #3
   33b1e:	0300      	lsls	r0, r0, #12
   33b20:	4204      	tst	r4, r0
   33b22:	d008      	beq.n	33b36 <__aeabi_dadd+0x54e>
   33b24:	08dd      	lsrs	r5, r3, #3
   33b26:	4205      	tst	r5, r0
   33b28:	d105      	bne.n	33b36 <__aeabi_dadd+0x54e>
   33b2a:	08d2      	lsrs	r2, r2, #3
   33b2c:	0759      	lsls	r1, r3, #29
   33b2e:	4311      	orrs	r1, r2
   33b30:	000f      	movs	r7, r1
   33b32:	002c      	movs	r4, r5
   33b34:	46d8      	mov	r8, fp
   33b36:	0f7b      	lsrs	r3, r7, #29
   33b38:	00e4      	lsls	r4, r4, #3
   33b3a:	431c      	orrs	r4, r3
   33b3c:	00ff      	lsls	r7, r7, #3
   33b3e:	4e30      	ldr	r6, [pc, #192]	; (33c00 <__aeabi_dadd+0x618>)
   33b40:	e5d6      	b.n	336f0 <__aeabi_dadd+0x108>
   33b42:	000c      	movs	r4, r1
   33b44:	0017      	movs	r7, r2
   33b46:	0006      	movs	r6, r0
   33b48:	e5d2      	b.n	336f0 <__aeabi_dadd+0x108>
   33b4a:	2b00      	cmp	r3, #0
   33b4c:	d038      	beq.n	33bc0 <__aeabi_dadd+0x5d8>
   33b4e:	000b      	movs	r3, r1
   33b50:	4313      	orrs	r3, r2
   33b52:	d100      	bne.n	33b56 <__aeabi_dadd+0x56e>
   33b54:	e742      	b.n	339dc <__aeabi_dadd+0x3f4>
   33b56:	08f8      	lsrs	r0, r7, #3
   33b58:	0767      	lsls	r7, r4, #29
   33b5a:	4307      	orrs	r7, r0
   33b5c:	2080      	movs	r0, #128	; 0x80
   33b5e:	08e4      	lsrs	r4, r4, #3
   33b60:	0300      	lsls	r0, r0, #12
   33b62:	4204      	tst	r4, r0
   33b64:	d0e7      	beq.n	33b36 <__aeabi_dadd+0x54e>
   33b66:	08cb      	lsrs	r3, r1, #3
   33b68:	4203      	tst	r3, r0
   33b6a:	d1e4      	bne.n	33b36 <__aeabi_dadd+0x54e>
   33b6c:	08d2      	lsrs	r2, r2, #3
   33b6e:	0749      	lsls	r1, r1, #29
   33b70:	4311      	orrs	r1, r2
   33b72:	000f      	movs	r7, r1
   33b74:	001c      	movs	r4, r3
   33b76:	e7de      	b.n	33b36 <__aeabi_dadd+0x54e>
   33b78:	2700      	movs	r7, #0
   33b7a:	2400      	movs	r4, #0
   33b7c:	e5d5      	b.n	3372a <__aeabi_dadd+0x142>
   33b7e:	2100      	movs	r1, #0
   33b80:	e76b      	b.n	33a5a <__aeabi_dadd+0x472>
   33b82:	2500      	movs	r5, #0
   33b84:	2700      	movs	r7, #0
   33b86:	e5f3      	b.n	33770 <__aeabi_dadd+0x188>
   33b88:	464e      	mov	r6, r9
   33b8a:	0025      	movs	r5, r4
   33b8c:	3e20      	subs	r6, #32
   33b8e:	40f5      	lsrs	r5, r6
   33b90:	464b      	mov	r3, r9
   33b92:	002e      	movs	r6, r5
   33b94:	2b20      	cmp	r3, #32
   33b96:	d02d      	beq.n	33bf4 <__aeabi_dadd+0x60c>
   33b98:	2540      	movs	r5, #64	; 0x40
   33b9a:	1aed      	subs	r5, r5, r3
   33b9c:	40ac      	lsls	r4, r5
   33b9e:	4327      	orrs	r7, r4
   33ba0:	1e7c      	subs	r4, r7, #1
   33ba2:	41a7      	sbcs	r7, r4
   33ba4:	2400      	movs	r4, #0
   33ba6:	4337      	orrs	r7, r6
   33ba8:	e6c9      	b.n	3393e <__aeabi_dadd+0x356>
   33baa:	2480      	movs	r4, #128	; 0x80
   33bac:	2500      	movs	r5, #0
   33bae:	0324      	lsls	r4, r4, #12
   33bb0:	4e13      	ldr	r6, [pc, #76]	; (33c00 <__aeabi_dadd+0x618>)
   33bb2:	2700      	movs	r7, #0
   33bb4:	e5dc      	b.n	33770 <__aeabi_dadd+0x188>
   33bb6:	4327      	orrs	r7, r4
   33bb8:	1e7c      	subs	r4, r7, #1
   33bba:	41a7      	sbcs	r7, r4
   33bbc:	2400      	movs	r4, #0
   33bbe:	e779      	b.n	33ab4 <__aeabi_dadd+0x4cc>
   33bc0:	000c      	movs	r4, r1
   33bc2:	0017      	movs	r7, r2
   33bc4:	4e0e      	ldr	r6, [pc, #56]	; (33c00 <__aeabi_dadd+0x618>)
   33bc6:	e593      	b.n	336f0 <__aeabi_dadd+0x108>
   33bc8:	000c      	movs	r4, r1
   33bca:	0017      	movs	r7, r2
   33bcc:	e590      	b.n	336f0 <__aeabi_dadd+0x108>
   33bce:	4656      	mov	r6, sl
   33bd0:	0023      	movs	r3, r4
   33bd2:	3e20      	subs	r6, #32
   33bd4:	40f3      	lsrs	r3, r6
   33bd6:	4699      	mov	r9, r3
   33bd8:	4653      	mov	r3, sl
   33bda:	2b20      	cmp	r3, #32
   33bdc:	d00e      	beq.n	33bfc <__aeabi_dadd+0x614>
   33bde:	2340      	movs	r3, #64	; 0x40
   33be0:	4656      	mov	r6, sl
   33be2:	1b9b      	subs	r3, r3, r6
   33be4:	409c      	lsls	r4, r3
   33be6:	4327      	orrs	r7, r4
   33be8:	1e7c      	subs	r4, r7, #1
   33bea:	41a7      	sbcs	r7, r4
   33bec:	464b      	mov	r3, r9
   33bee:	2400      	movs	r4, #0
   33bf0:	431f      	orrs	r7, r3
   33bf2:	e75f      	b.n	33ab4 <__aeabi_dadd+0x4cc>
   33bf4:	2400      	movs	r4, #0
   33bf6:	e7d2      	b.n	33b9e <__aeabi_dadd+0x5b6>
   33bf8:	0017      	movs	r7, r2
   33bfa:	e5b2      	b.n	33762 <__aeabi_dadd+0x17a>
   33bfc:	2400      	movs	r4, #0
   33bfe:	e7f2      	b.n	33be6 <__aeabi_dadd+0x5fe>
   33c00:	000007ff 	.word	0x000007ff
   33c04:	ff7fffff 	.word	0xff7fffff

00033c08 <__aeabi_ddiv>:
   33c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   33c0a:	4657      	mov	r7, sl
   33c0c:	4645      	mov	r5, r8
   33c0e:	46de      	mov	lr, fp
   33c10:	464e      	mov	r6, r9
   33c12:	b5e0      	push	{r5, r6, r7, lr}
   33c14:	004c      	lsls	r4, r1, #1
   33c16:	030e      	lsls	r6, r1, #12
   33c18:	b087      	sub	sp, #28
   33c1a:	4683      	mov	fp, r0
   33c1c:	4692      	mov	sl, r2
   33c1e:	001d      	movs	r5, r3
   33c20:	4680      	mov	r8, r0
   33c22:	0b36      	lsrs	r6, r6, #12
   33c24:	0d64      	lsrs	r4, r4, #21
   33c26:	0fcf      	lsrs	r7, r1, #31
   33c28:	2c00      	cmp	r4, #0
   33c2a:	d04f      	beq.n	33ccc <__aeabi_ddiv+0xc4>
   33c2c:	4b6f      	ldr	r3, [pc, #444]	; (33dec <__aeabi_ddiv+0x1e4>)
   33c2e:	429c      	cmp	r4, r3
   33c30:	d035      	beq.n	33c9e <__aeabi_ddiv+0x96>
   33c32:	2380      	movs	r3, #128	; 0x80
   33c34:	0f42      	lsrs	r2, r0, #29
   33c36:	041b      	lsls	r3, r3, #16
   33c38:	00f6      	lsls	r6, r6, #3
   33c3a:	4313      	orrs	r3, r2
   33c3c:	4333      	orrs	r3, r6
   33c3e:	4699      	mov	r9, r3
   33c40:	00c3      	lsls	r3, r0, #3
   33c42:	4698      	mov	r8, r3
   33c44:	4b6a      	ldr	r3, [pc, #424]	; (33df0 <__aeabi_ddiv+0x1e8>)
   33c46:	2600      	movs	r6, #0
   33c48:	469c      	mov	ip, r3
   33c4a:	2300      	movs	r3, #0
   33c4c:	4464      	add	r4, ip
   33c4e:	9303      	str	r3, [sp, #12]
   33c50:	032b      	lsls	r3, r5, #12
   33c52:	0b1b      	lsrs	r3, r3, #12
   33c54:	469b      	mov	fp, r3
   33c56:	006b      	lsls	r3, r5, #1
   33c58:	0fed      	lsrs	r5, r5, #31
   33c5a:	4650      	mov	r0, sl
   33c5c:	0d5b      	lsrs	r3, r3, #21
   33c5e:	9501      	str	r5, [sp, #4]
   33c60:	d05e      	beq.n	33d20 <__aeabi_ddiv+0x118>
   33c62:	4a62      	ldr	r2, [pc, #392]	; (33dec <__aeabi_ddiv+0x1e4>)
   33c64:	4293      	cmp	r3, r2
   33c66:	d053      	beq.n	33d10 <__aeabi_ddiv+0x108>
   33c68:	465a      	mov	r2, fp
   33c6a:	00d1      	lsls	r1, r2, #3
   33c6c:	2280      	movs	r2, #128	; 0x80
   33c6e:	0f40      	lsrs	r0, r0, #29
   33c70:	0412      	lsls	r2, r2, #16
   33c72:	4302      	orrs	r2, r0
   33c74:	430a      	orrs	r2, r1
   33c76:	4693      	mov	fp, r2
   33c78:	4652      	mov	r2, sl
   33c7a:	00d1      	lsls	r1, r2, #3
   33c7c:	4a5c      	ldr	r2, [pc, #368]	; (33df0 <__aeabi_ddiv+0x1e8>)
   33c7e:	4694      	mov	ip, r2
   33c80:	2200      	movs	r2, #0
   33c82:	4463      	add	r3, ip
   33c84:	0038      	movs	r0, r7
   33c86:	4068      	eors	r0, r5
   33c88:	4684      	mov	ip, r0
   33c8a:	9002      	str	r0, [sp, #8]
   33c8c:	1ae4      	subs	r4, r4, r3
   33c8e:	4316      	orrs	r6, r2
   33c90:	2e0f      	cmp	r6, #15
   33c92:	d900      	bls.n	33c96 <__aeabi_ddiv+0x8e>
   33c94:	e0b4      	b.n	33e00 <__aeabi_ddiv+0x1f8>
   33c96:	4b57      	ldr	r3, [pc, #348]	; (33df4 <__aeabi_ddiv+0x1ec>)
   33c98:	00b6      	lsls	r6, r6, #2
   33c9a:	599b      	ldr	r3, [r3, r6]
   33c9c:	469f      	mov	pc, r3
   33c9e:	0003      	movs	r3, r0
   33ca0:	4333      	orrs	r3, r6
   33ca2:	4699      	mov	r9, r3
   33ca4:	d16c      	bne.n	33d80 <__aeabi_ddiv+0x178>
   33ca6:	2300      	movs	r3, #0
   33ca8:	4698      	mov	r8, r3
   33caa:	3302      	adds	r3, #2
   33cac:	2608      	movs	r6, #8
   33cae:	9303      	str	r3, [sp, #12]
   33cb0:	e7ce      	b.n	33c50 <__aeabi_ddiv+0x48>
   33cb2:	46cb      	mov	fp, r9
   33cb4:	4641      	mov	r1, r8
   33cb6:	9a03      	ldr	r2, [sp, #12]
   33cb8:	9701      	str	r7, [sp, #4]
   33cba:	2a02      	cmp	r2, #2
   33cbc:	d165      	bne.n	33d8a <__aeabi_ddiv+0x182>
   33cbe:	9b01      	ldr	r3, [sp, #4]
   33cc0:	4c4a      	ldr	r4, [pc, #296]	; (33dec <__aeabi_ddiv+0x1e4>)
   33cc2:	469c      	mov	ip, r3
   33cc4:	2300      	movs	r3, #0
   33cc6:	2200      	movs	r2, #0
   33cc8:	4698      	mov	r8, r3
   33cca:	e06b      	b.n	33da4 <__aeabi_ddiv+0x19c>
   33ccc:	0003      	movs	r3, r0
   33cce:	4333      	orrs	r3, r6
   33cd0:	4699      	mov	r9, r3
   33cd2:	d04e      	beq.n	33d72 <__aeabi_ddiv+0x16a>
   33cd4:	2e00      	cmp	r6, #0
   33cd6:	d100      	bne.n	33cda <__aeabi_ddiv+0xd2>
   33cd8:	e1bc      	b.n	34054 <__aeabi_ddiv+0x44c>
   33cda:	0030      	movs	r0, r6
   33cdc:	f001 f8ca 	bl	34e74 <__clzsi2>
   33ce0:	0003      	movs	r3, r0
   33ce2:	3b0b      	subs	r3, #11
   33ce4:	2b1c      	cmp	r3, #28
   33ce6:	dd00      	ble.n	33cea <__aeabi_ddiv+0xe2>
   33ce8:	e1ac      	b.n	34044 <__aeabi_ddiv+0x43c>
   33cea:	221d      	movs	r2, #29
   33cec:	1ad3      	subs	r3, r2, r3
   33cee:	465a      	mov	r2, fp
   33cf0:	0001      	movs	r1, r0
   33cf2:	40da      	lsrs	r2, r3
   33cf4:	3908      	subs	r1, #8
   33cf6:	408e      	lsls	r6, r1
   33cf8:	0013      	movs	r3, r2
   33cfa:	4333      	orrs	r3, r6
   33cfc:	4699      	mov	r9, r3
   33cfe:	465b      	mov	r3, fp
   33d00:	408b      	lsls	r3, r1
   33d02:	4698      	mov	r8, r3
   33d04:	2300      	movs	r3, #0
   33d06:	4c3c      	ldr	r4, [pc, #240]	; (33df8 <__aeabi_ddiv+0x1f0>)
   33d08:	2600      	movs	r6, #0
   33d0a:	1a24      	subs	r4, r4, r0
   33d0c:	9303      	str	r3, [sp, #12]
   33d0e:	e79f      	b.n	33c50 <__aeabi_ddiv+0x48>
   33d10:	4651      	mov	r1, sl
   33d12:	465a      	mov	r2, fp
   33d14:	4311      	orrs	r1, r2
   33d16:	d129      	bne.n	33d6c <__aeabi_ddiv+0x164>
   33d18:	2200      	movs	r2, #0
   33d1a:	4693      	mov	fp, r2
   33d1c:	3202      	adds	r2, #2
   33d1e:	e7b1      	b.n	33c84 <__aeabi_ddiv+0x7c>
   33d20:	4659      	mov	r1, fp
   33d22:	4301      	orrs	r1, r0
   33d24:	d01e      	beq.n	33d64 <__aeabi_ddiv+0x15c>
   33d26:	465b      	mov	r3, fp
   33d28:	2b00      	cmp	r3, #0
   33d2a:	d100      	bne.n	33d2e <__aeabi_ddiv+0x126>
   33d2c:	e19e      	b.n	3406c <__aeabi_ddiv+0x464>
   33d2e:	4658      	mov	r0, fp
   33d30:	f001 f8a0 	bl	34e74 <__clzsi2>
   33d34:	0003      	movs	r3, r0
   33d36:	3b0b      	subs	r3, #11
   33d38:	2b1c      	cmp	r3, #28
   33d3a:	dd00      	ble.n	33d3e <__aeabi_ddiv+0x136>
   33d3c:	e18f      	b.n	3405e <__aeabi_ddiv+0x456>
   33d3e:	0002      	movs	r2, r0
   33d40:	4659      	mov	r1, fp
   33d42:	3a08      	subs	r2, #8
   33d44:	4091      	lsls	r1, r2
   33d46:	468b      	mov	fp, r1
   33d48:	211d      	movs	r1, #29
   33d4a:	1acb      	subs	r3, r1, r3
   33d4c:	4651      	mov	r1, sl
   33d4e:	40d9      	lsrs	r1, r3
   33d50:	000b      	movs	r3, r1
   33d52:	4659      	mov	r1, fp
   33d54:	430b      	orrs	r3, r1
   33d56:	4651      	mov	r1, sl
   33d58:	469b      	mov	fp, r3
   33d5a:	4091      	lsls	r1, r2
   33d5c:	4b26      	ldr	r3, [pc, #152]	; (33df8 <__aeabi_ddiv+0x1f0>)
   33d5e:	2200      	movs	r2, #0
   33d60:	1a1b      	subs	r3, r3, r0
   33d62:	e78f      	b.n	33c84 <__aeabi_ddiv+0x7c>
   33d64:	2300      	movs	r3, #0
   33d66:	2201      	movs	r2, #1
   33d68:	469b      	mov	fp, r3
   33d6a:	e78b      	b.n	33c84 <__aeabi_ddiv+0x7c>
   33d6c:	4651      	mov	r1, sl
   33d6e:	2203      	movs	r2, #3
   33d70:	e788      	b.n	33c84 <__aeabi_ddiv+0x7c>
   33d72:	2300      	movs	r3, #0
   33d74:	4698      	mov	r8, r3
   33d76:	3301      	adds	r3, #1
   33d78:	2604      	movs	r6, #4
   33d7a:	2400      	movs	r4, #0
   33d7c:	9303      	str	r3, [sp, #12]
   33d7e:	e767      	b.n	33c50 <__aeabi_ddiv+0x48>
   33d80:	2303      	movs	r3, #3
   33d82:	46b1      	mov	r9, r6
   33d84:	9303      	str	r3, [sp, #12]
   33d86:	260c      	movs	r6, #12
   33d88:	e762      	b.n	33c50 <__aeabi_ddiv+0x48>
   33d8a:	2a03      	cmp	r2, #3
   33d8c:	d100      	bne.n	33d90 <__aeabi_ddiv+0x188>
   33d8e:	e25c      	b.n	3424a <__aeabi_ddiv+0x642>
   33d90:	9b01      	ldr	r3, [sp, #4]
   33d92:	2a01      	cmp	r2, #1
   33d94:	d000      	beq.n	33d98 <__aeabi_ddiv+0x190>
   33d96:	e1e4      	b.n	34162 <__aeabi_ddiv+0x55a>
   33d98:	4013      	ands	r3, r2
   33d9a:	469c      	mov	ip, r3
   33d9c:	2300      	movs	r3, #0
   33d9e:	2400      	movs	r4, #0
   33da0:	2200      	movs	r2, #0
   33da2:	4698      	mov	r8, r3
   33da4:	2100      	movs	r1, #0
   33da6:	0312      	lsls	r2, r2, #12
   33da8:	0b13      	lsrs	r3, r2, #12
   33daa:	0d0a      	lsrs	r2, r1, #20
   33dac:	0512      	lsls	r2, r2, #20
   33dae:	431a      	orrs	r2, r3
   33db0:	0523      	lsls	r3, r4, #20
   33db2:	4c12      	ldr	r4, [pc, #72]	; (33dfc <__aeabi_ddiv+0x1f4>)
   33db4:	4640      	mov	r0, r8
   33db6:	4022      	ands	r2, r4
   33db8:	4313      	orrs	r3, r2
   33dba:	4662      	mov	r2, ip
   33dbc:	005b      	lsls	r3, r3, #1
   33dbe:	07d2      	lsls	r2, r2, #31
   33dc0:	085b      	lsrs	r3, r3, #1
   33dc2:	4313      	orrs	r3, r2
   33dc4:	0019      	movs	r1, r3
   33dc6:	b007      	add	sp, #28
   33dc8:	bc3c      	pop	{r2, r3, r4, r5}
   33dca:	4690      	mov	r8, r2
   33dcc:	4699      	mov	r9, r3
   33dce:	46a2      	mov	sl, r4
   33dd0:	46ab      	mov	fp, r5
   33dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33dd4:	2300      	movs	r3, #0
   33dd6:	2280      	movs	r2, #128	; 0x80
   33dd8:	469c      	mov	ip, r3
   33dda:	0312      	lsls	r2, r2, #12
   33ddc:	4698      	mov	r8, r3
   33dde:	4c03      	ldr	r4, [pc, #12]	; (33dec <__aeabi_ddiv+0x1e4>)
   33de0:	e7e0      	b.n	33da4 <__aeabi_ddiv+0x19c>
   33de2:	2300      	movs	r3, #0
   33de4:	4c01      	ldr	r4, [pc, #4]	; (33dec <__aeabi_ddiv+0x1e4>)
   33de6:	2200      	movs	r2, #0
   33de8:	4698      	mov	r8, r3
   33dea:	e7db      	b.n	33da4 <__aeabi_ddiv+0x19c>
   33dec:	000007ff 	.word	0x000007ff
   33df0:	fffffc01 	.word	0xfffffc01
   33df4:	0003a95c 	.word	0x0003a95c
   33df8:	fffffc0d 	.word	0xfffffc0d
   33dfc:	800fffff 	.word	0x800fffff
   33e00:	45d9      	cmp	r9, fp
   33e02:	d900      	bls.n	33e06 <__aeabi_ddiv+0x1fe>
   33e04:	e139      	b.n	3407a <__aeabi_ddiv+0x472>
   33e06:	d100      	bne.n	33e0a <__aeabi_ddiv+0x202>
   33e08:	e134      	b.n	34074 <__aeabi_ddiv+0x46c>
   33e0a:	2300      	movs	r3, #0
   33e0c:	4646      	mov	r6, r8
   33e0e:	464d      	mov	r5, r9
   33e10:	469a      	mov	sl, r3
   33e12:	3c01      	subs	r4, #1
   33e14:	465b      	mov	r3, fp
   33e16:	0e0a      	lsrs	r2, r1, #24
   33e18:	021b      	lsls	r3, r3, #8
   33e1a:	431a      	orrs	r2, r3
   33e1c:	020b      	lsls	r3, r1, #8
   33e1e:	0c17      	lsrs	r7, r2, #16
   33e20:	9303      	str	r3, [sp, #12]
   33e22:	0413      	lsls	r3, r2, #16
   33e24:	0c1b      	lsrs	r3, r3, #16
   33e26:	0039      	movs	r1, r7
   33e28:	0028      	movs	r0, r5
   33e2a:	4690      	mov	r8, r2
   33e2c:	9301      	str	r3, [sp, #4]
   33e2e:	f7ff f8ab 	bl	32f88 <__udivsi3>
   33e32:	0002      	movs	r2, r0
   33e34:	9b01      	ldr	r3, [sp, #4]
   33e36:	4683      	mov	fp, r0
   33e38:	435a      	muls	r2, r3
   33e3a:	0028      	movs	r0, r5
   33e3c:	0039      	movs	r1, r7
   33e3e:	4691      	mov	r9, r2
   33e40:	f7ff f928 	bl	33094 <__aeabi_uidivmod>
   33e44:	0c35      	lsrs	r5, r6, #16
   33e46:	0409      	lsls	r1, r1, #16
   33e48:	430d      	orrs	r5, r1
   33e4a:	45a9      	cmp	r9, r5
   33e4c:	d90d      	bls.n	33e6a <__aeabi_ddiv+0x262>
   33e4e:	465b      	mov	r3, fp
   33e50:	4445      	add	r5, r8
   33e52:	3b01      	subs	r3, #1
   33e54:	45a8      	cmp	r8, r5
   33e56:	d900      	bls.n	33e5a <__aeabi_ddiv+0x252>
   33e58:	e13a      	b.n	340d0 <__aeabi_ddiv+0x4c8>
   33e5a:	45a9      	cmp	r9, r5
   33e5c:	d800      	bhi.n	33e60 <__aeabi_ddiv+0x258>
   33e5e:	e137      	b.n	340d0 <__aeabi_ddiv+0x4c8>
   33e60:	2302      	movs	r3, #2
   33e62:	425b      	negs	r3, r3
   33e64:	469c      	mov	ip, r3
   33e66:	4445      	add	r5, r8
   33e68:	44e3      	add	fp, ip
   33e6a:	464b      	mov	r3, r9
   33e6c:	1aeb      	subs	r3, r5, r3
   33e6e:	0039      	movs	r1, r7
   33e70:	0018      	movs	r0, r3
   33e72:	9304      	str	r3, [sp, #16]
   33e74:	f7ff f888 	bl	32f88 <__udivsi3>
   33e78:	9b01      	ldr	r3, [sp, #4]
   33e7a:	0005      	movs	r5, r0
   33e7c:	4343      	muls	r3, r0
   33e7e:	0039      	movs	r1, r7
   33e80:	9804      	ldr	r0, [sp, #16]
   33e82:	4699      	mov	r9, r3
   33e84:	f7ff f906 	bl	33094 <__aeabi_uidivmod>
   33e88:	0433      	lsls	r3, r6, #16
   33e8a:	0409      	lsls	r1, r1, #16
   33e8c:	0c1b      	lsrs	r3, r3, #16
   33e8e:	430b      	orrs	r3, r1
   33e90:	4599      	cmp	r9, r3
   33e92:	d909      	bls.n	33ea8 <__aeabi_ddiv+0x2a0>
   33e94:	4443      	add	r3, r8
   33e96:	1e6a      	subs	r2, r5, #1
   33e98:	4598      	cmp	r8, r3
   33e9a:	d900      	bls.n	33e9e <__aeabi_ddiv+0x296>
   33e9c:	e11a      	b.n	340d4 <__aeabi_ddiv+0x4cc>
   33e9e:	4599      	cmp	r9, r3
   33ea0:	d800      	bhi.n	33ea4 <__aeabi_ddiv+0x29c>
   33ea2:	e117      	b.n	340d4 <__aeabi_ddiv+0x4cc>
   33ea4:	3d02      	subs	r5, #2
   33ea6:	4443      	add	r3, r8
   33ea8:	464a      	mov	r2, r9
   33eaa:	1a9b      	subs	r3, r3, r2
   33eac:	465a      	mov	r2, fp
   33eae:	0412      	lsls	r2, r2, #16
   33eb0:	432a      	orrs	r2, r5
   33eb2:	9903      	ldr	r1, [sp, #12]
   33eb4:	4693      	mov	fp, r2
   33eb6:	0c10      	lsrs	r0, r2, #16
   33eb8:	0c0a      	lsrs	r2, r1, #16
   33eba:	4691      	mov	r9, r2
   33ebc:	0409      	lsls	r1, r1, #16
   33ebe:	465a      	mov	r2, fp
   33ec0:	0c09      	lsrs	r1, r1, #16
   33ec2:	464e      	mov	r6, r9
   33ec4:	000d      	movs	r5, r1
   33ec6:	0412      	lsls	r2, r2, #16
   33ec8:	0c12      	lsrs	r2, r2, #16
   33eca:	4345      	muls	r5, r0
   33ecc:	9105      	str	r1, [sp, #20]
   33ece:	4351      	muls	r1, r2
   33ed0:	4372      	muls	r2, r6
   33ed2:	4370      	muls	r0, r6
   33ed4:	1952      	adds	r2, r2, r5
   33ed6:	0c0e      	lsrs	r6, r1, #16
   33ed8:	18b2      	adds	r2, r6, r2
   33eda:	4295      	cmp	r5, r2
   33edc:	d903      	bls.n	33ee6 <__aeabi_ddiv+0x2de>
   33ede:	2580      	movs	r5, #128	; 0x80
   33ee0:	026d      	lsls	r5, r5, #9
   33ee2:	46ac      	mov	ip, r5
   33ee4:	4460      	add	r0, ip
   33ee6:	0c15      	lsrs	r5, r2, #16
   33ee8:	0409      	lsls	r1, r1, #16
   33eea:	0412      	lsls	r2, r2, #16
   33eec:	0c09      	lsrs	r1, r1, #16
   33eee:	1828      	adds	r0, r5, r0
   33ef0:	1852      	adds	r2, r2, r1
   33ef2:	4283      	cmp	r3, r0
   33ef4:	d200      	bcs.n	33ef8 <__aeabi_ddiv+0x2f0>
   33ef6:	e0ce      	b.n	34096 <__aeabi_ddiv+0x48e>
   33ef8:	d100      	bne.n	33efc <__aeabi_ddiv+0x2f4>
   33efa:	e0c8      	b.n	3408e <__aeabi_ddiv+0x486>
   33efc:	1a1d      	subs	r5, r3, r0
   33efe:	4653      	mov	r3, sl
   33f00:	1a9e      	subs	r6, r3, r2
   33f02:	45b2      	cmp	sl, r6
   33f04:	4192      	sbcs	r2, r2
   33f06:	4252      	negs	r2, r2
   33f08:	1aab      	subs	r3, r5, r2
   33f0a:	469a      	mov	sl, r3
   33f0c:	4598      	cmp	r8, r3
   33f0e:	d100      	bne.n	33f12 <__aeabi_ddiv+0x30a>
   33f10:	e117      	b.n	34142 <__aeabi_ddiv+0x53a>
   33f12:	0039      	movs	r1, r7
   33f14:	0018      	movs	r0, r3
   33f16:	f7ff f837 	bl	32f88 <__udivsi3>
   33f1a:	9b01      	ldr	r3, [sp, #4]
   33f1c:	0005      	movs	r5, r0
   33f1e:	4343      	muls	r3, r0
   33f20:	0039      	movs	r1, r7
   33f22:	4650      	mov	r0, sl
   33f24:	9304      	str	r3, [sp, #16]
   33f26:	f7ff f8b5 	bl	33094 <__aeabi_uidivmod>
   33f2a:	9804      	ldr	r0, [sp, #16]
   33f2c:	040b      	lsls	r3, r1, #16
   33f2e:	0c31      	lsrs	r1, r6, #16
   33f30:	4319      	orrs	r1, r3
   33f32:	4288      	cmp	r0, r1
   33f34:	d909      	bls.n	33f4a <__aeabi_ddiv+0x342>
   33f36:	4441      	add	r1, r8
   33f38:	1e6b      	subs	r3, r5, #1
   33f3a:	4588      	cmp	r8, r1
   33f3c:	d900      	bls.n	33f40 <__aeabi_ddiv+0x338>
   33f3e:	e107      	b.n	34150 <__aeabi_ddiv+0x548>
   33f40:	4288      	cmp	r0, r1
   33f42:	d800      	bhi.n	33f46 <__aeabi_ddiv+0x33e>
   33f44:	e104      	b.n	34150 <__aeabi_ddiv+0x548>
   33f46:	3d02      	subs	r5, #2
   33f48:	4441      	add	r1, r8
   33f4a:	9b04      	ldr	r3, [sp, #16]
   33f4c:	1acb      	subs	r3, r1, r3
   33f4e:	0018      	movs	r0, r3
   33f50:	0039      	movs	r1, r7
   33f52:	9304      	str	r3, [sp, #16]
   33f54:	f7ff f818 	bl	32f88 <__udivsi3>
   33f58:	9b01      	ldr	r3, [sp, #4]
   33f5a:	4682      	mov	sl, r0
   33f5c:	4343      	muls	r3, r0
   33f5e:	0039      	movs	r1, r7
   33f60:	9804      	ldr	r0, [sp, #16]
   33f62:	9301      	str	r3, [sp, #4]
   33f64:	f7ff f896 	bl	33094 <__aeabi_uidivmod>
   33f68:	9801      	ldr	r0, [sp, #4]
   33f6a:	040b      	lsls	r3, r1, #16
   33f6c:	0431      	lsls	r1, r6, #16
   33f6e:	0c09      	lsrs	r1, r1, #16
   33f70:	4319      	orrs	r1, r3
   33f72:	4288      	cmp	r0, r1
   33f74:	d90d      	bls.n	33f92 <__aeabi_ddiv+0x38a>
   33f76:	4653      	mov	r3, sl
   33f78:	4441      	add	r1, r8
   33f7a:	3b01      	subs	r3, #1
   33f7c:	4588      	cmp	r8, r1
   33f7e:	d900      	bls.n	33f82 <__aeabi_ddiv+0x37a>
   33f80:	e0e8      	b.n	34154 <__aeabi_ddiv+0x54c>
   33f82:	4288      	cmp	r0, r1
   33f84:	d800      	bhi.n	33f88 <__aeabi_ddiv+0x380>
   33f86:	e0e5      	b.n	34154 <__aeabi_ddiv+0x54c>
   33f88:	2302      	movs	r3, #2
   33f8a:	425b      	negs	r3, r3
   33f8c:	469c      	mov	ip, r3
   33f8e:	4441      	add	r1, r8
   33f90:	44e2      	add	sl, ip
   33f92:	9b01      	ldr	r3, [sp, #4]
   33f94:	042d      	lsls	r5, r5, #16
   33f96:	1ace      	subs	r6, r1, r3
   33f98:	4651      	mov	r1, sl
   33f9a:	4329      	orrs	r1, r5
   33f9c:	9d05      	ldr	r5, [sp, #20]
   33f9e:	464f      	mov	r7, r9
   33fa0:	002a      	movs	r2, r5
   33fa2:	040b      	lsls	r3, r1, #16
   33fa4:	0c08      	lsrs	r0, r1, #16
   33fa6:	0c1b      	lsrs	r3, r3, #16
   33fa8:	435a      	muls	r2, r3
   33faa:	4345      	muls	r5, r0
   33fac:	437b      	muls	r3, r7
   33fae:	4378      	muls	r0, r7
   33fb0:	195b      	adds	r3, r3, r5
   33fb2:	0c17      	lsrs	r7, r2, #16
   33fb4:	18fb      	adds	r3, r7, r3
   33fb6:	429d      	cmp	r5, r3
   33fb8:	d903      	bls.n	33fc2 <__aeabi_ddiv+0x3ba>
   33fba:	2580      	movs	r5, #128	; 0x80
   33fbc:	026d      	lsls	r5, r5, #9
   33fbe:	46ac      	mov	ip, r5
   33fc0:	4460      	add	r0, ip
   33fc2:	0c1d      	lsrs	r5, r3, #16
   33fc4:	0412      	lsls	r2, r2, #16
   33fc6:	041b      	lsls	r3, r3, #16
   33fc8:	0c12      	lsrs	r2, r2, #16
   33fca:	1828      	adds	r0, r5, r0
   33fcc:	189b      	adds	r3, r3, r2
   33fce:	4286      	cmp	r6, r0
   33fd0:	d200      	bcs.n	33fd4 <__aeabi_ddiv+0x3cc>
   33fd2:	e093      	b.n	340fc <__aeabi_ddiv+0x4f4>
   33fd4:	d100      	bne.n	33fd8 <__aeabi_ddiv+0x3d0>
   33fd6:	e08e      	b.n	340f6 <__aeabi_ddiv+0x4ee>
   33fd8:	2301      	movs	r3, #1
   33fda:	4319      	orrs	r1, r3
   33fdc:	4ba0      	ldr	r3, [pc, #640]	; (34260 <__aeabi_ddiv+0x658>)
   33fde:	18e3      	adds	r3, r4, r3
   33fe0:	2b00      	cmp	r3, #0
   33fe2:	dc00      	bgt.n	33fe6 <__aeabi_ddiv+0x3de>
   33fe4:	e099      	b.n	3411a <__aeabi_ddiv+0x512>
   33fe6:	074a      	lsls	r2, r1, #29
   33fe8:	d000      	beq.n	33fec <__aeabi_ddiv+0x3e4>
   33fea:	e09e      	b.n	3412a <__aeabi_ddiv+0x522>
   33fec:	465a      	mov	r2, fp
   33fee:	01d2      	lsls	r2, r2, #7
   33ff0:	d506      	bpl.n	34000 <__aeabi_ddiv+0x3f8>
   33ff2:	465a      	mov	r2, fp
   33ff4:	4b9b      	ldr	r3, [pc, #620]	; (34264 <__aeabi_ddiv+0x65c>)
   33ff6:	401a      	ands	r2, r3
   33ff8:	2380      	movs	r3, #128	; 0x80
   33ffa:	4693      	mov	fp, r2
   33ffc:	00db      	lsls	r3, r3, #3
   33ffe:	18e3      	adds	r3, r4, r3
   34000:	4a99      	ldr	r2, [pc, #612]	; (34268 <__aeabi_ddiv+0x660>)
   34002:	4293      	cmp	r3, r2
   34004:	dd68      	ble.n	340d8 <__aeabi_ddiv+0x4d0>
   34006:	2301      	movs	r3, #1
   34008:	9a02      	ldr	r2, [sp, #8]
   3400a:	4c98      	ldr	r4, [pc, #608]	; (3426c <__aeabi_ddiv+0x664>)
   3400c:	401a      	ands	r2, r3
   3400e:	2300      	movs	r3, #0
   34010:	4694      	mov	ip, r2
   34012:	4698      	mov	r8, r3
   34014:	2200      	movs	r2, #0
   34016:	e6c5      	b.n	33da4 <__aeabi_ddiv+0x19c>
   34018:	2280      	movs	r2, #128	; 0x80
   3401a:	464b      	mov	r3, r9
   3401c:	0312      	lsls	r2, r2, #12
   3401e:	4213      	tst	r3, r2
   34020:	d00a      	beq.n	34038 <__aeabi_ddiv+0x430>
   34022:	465b      	mov	r3, fp
   34024:	4213      	tst	r3, r2
   34026:	d106      	bne.n	34036 <__aeabi_ddiv+0x42e>
   34028:	431a      	orrs	r2, r3
   3402a:	0312      	lsls	r2, r2, #12
   3402c:	0b12      	lsrs	r2, r2, #12
   3402e:	46ac      	mov	ip, r5
   34030:	4688      	mov	r8, r1
   34032:	4c8e      	ldr	r4, [pc, #568]	; (3426c <__aeabi_ddiv+0x664>)
   34034:	e6b6      	b.n	33da4 <__aeabi_ddiv+0x19c>
   34036:	464b      	mov	r3, r9
   34038:	431a      	orrs	r2, r3
   3403a:	0312      	lsls	r2, r2, #12
   3403c:	0b12      	lsrs	r2, r2, #12
   3403e:	46bc      	mov	ip, r7
   34040:	4c8a      	ldr	r4, [pc, #552]	; (3426c <__aeabi_ddiv+0x664>)
   34042:	e6af      	b.n	33da4 <__aeabi_ddiv+0x19c>
   34044:	0003      	movs	r3, r0
   34046:	465a      	mov	r2, fp
   34048:	3b28      	subs	r3, #40	; 0x28
   3404a:	409a      	lsls	r2, r3
   3404c:	2300      	movs	r3, #0
   3404e:	4691      	mov	r9, r2
   34050:	4698      	mov	r8, r3
   34052:	e657      	b.n	33d04 <__aeabi_ddiv+0xfc>
   34054:	4658      	mov	r0, fp
   34056:	f000 ff0d 	bl	34e74 <__clzsi2>
   3405a:	3020      	adds	r0, #32
   3405c:	e640      	b.n	33ce0 <__aeabi_ddiv+0xd8>
   3405e:	0003      	movs	r3, r0
   34060:	4652      	mov	r2, sl
   34062:	3b28      	subs	r3, #40	; 0x28
   34064:	409a      	lsls	r2, r3
   34066:	2100      	movs	r1, #0
   34068:	4693      	mov	fp, r2
   3406a:	e677      	b.n	33d5c <__aeabi_ddiv+0x154>
   3406c:	f000 ff02 	bl	34e74 <__clzsi2>
   34070:	3020      	adds	r0, #32
   34072:	e65f      	b.n	33d34 <__aeabi_ddiv+0x12c>
   34074:	4588      	cmp	r8, r1
   34076:	d200      	bcs.n	3407a <__aeabi_ddiv+0x472>
   34078:	e6c7      	b.n	33e0a <__aeabi_ddiv+0x202>
   3407a:	464b      	mov	r3, r9
   3407c:	07de      	lsls	r6, r3, #31
   3407e:	085d      	lsrs	r5, r3, #1
   34080:	4643      	mov	r3, r8
   34082:	085b      	lsrs	r3, r3, #1
   34084:	431e      	orrs	r6, r3
   34086:	4643      	mov	r3, r8
   34088:	07db      	lsls	r3, r3, #31
   3408a:	469a      	mov	sl, r3
   3408c:	e6c2      	b.n	33e14 <__aeabi_ddiv+0x20c>
   3408e:	2500      	movs	r5, #0
   34090:	4592      	cmp	sl, r2
   34092:	d300      	bcc.n	34096 <__aeabi_ddiv+0x48e>
   34094:	e733      	b.n	33efe <__aeabi_ddiv+0x2f6>
   34096:	9e03      	ldr	r6, [sp, #12]
   34098:	4659      	mov	r1, fp
   3409a:	46b4      	mov	ip, r6
   3409c:	44e2      	add	sl, ip
   3409e:	45b2      	cmp	sl, r6
   340a0:	41ad      	sbcs	r5, r5
   340a2:	426d      	negs	r5, r5
   340a4:	4445      	add	r5, r8
   340a6:	18eb      	adds	r3, r5, r3
   340a8:	3901      	subs	r1, #1
   340aa:	4598      	cmp	r8, r3
   340ac:	d207      	bcs.n	340be <__aeabi_ddiv+0x4b6>
   340ae:	4298      	cmp	r0, r3
   340b0:	d900      	bls.n	340b4 <__aeabi_ddiv+0x4ac>
   340b2:	e07f      	b.n	341b4 <__aeabi_ddiv+0x5ac>
   340b4:	d100      	bne.n	340b8 <__aeabi_ddiv+0x4b0>
   340b6:	e0bc      	b.n	34232 <__aeabi_ddiv+0x62a>
   340b8:	1a1d      	subs	r5, r3, r0
   340ba:	468b      	mov	fp, r1
   340bc:	e71f      	b.n	33efe <__aeabi_ddiv+0x2f6>
   340be:	4598      	cmp	r8, r3
   340c0:	d1fa      	bne.n	340b8 <__aeabi_ddiv+0x4b0>
   340c2:	9d03      	ldr	r5, [sp, #12]
   340c4:	4555      	cmp	r5, sl
   340c6:	d9f2      	bls.n	340ae <__aeabi_ddiv+0x4a6>
   340c8:	4643      	mov	r3, r8
   340ca:	468b      	mov	fp, r1
   340cc:	1a1d      	subs	r5, r3, r0
   340ce:	e716      	b.n	33efe <__aeabi_ddiv+0x2f6>
   340d0:	469b      	mov	fp, r3
   340d2:	e6ca      	b.n	33e6a <__aeabi_ddiv+0x262>
   340d4:	0015      	movs	r5, r2
   340d6:	e6e7      	b.n	33ea8 <__aeabi_ddiv+0x2a0>
   340d8:	465a      	mov	r2, fp
   340da:	08c9      	lsrs	r1, r1, #3
   340dc:	0752      	lsls	r2, r2, #29
   340de:	430a      	orrs	r2, r1
   340e0:	055b      	lsls	r3, r3, #21
   340e2:	4690      	mov	r8, r2
   340e4:	0d5c      	lsrs	r4, r3, #21
   340e6:	465a      	mov	r2, fp
   340e8:	2301      	movs	r3, #1
   340ea:	9902      	ldr	r1, [sp, #8]
   340ec:	0252      	lsls	r2, r2, #9
   340ee:	4019      	ands	r1, r3
   340f0:	0b12      	lsrs	r2, r2, #12
   340f2:	468c      	mov	ip, r1
   340f4:	e656      	b.n	33da4 <__aeabi_ddiv+0x19c>
   340f6:	2b00      	cmp	r3, #0
   340f8:	d100      	bne.n	340fc <__aeabi_ddiv+0x4f4>
   340fa:	e76f      	b.n	33fdc <__aeabi_ddiv+0x3d4>
   340fc:	4446      	add	r6, r8
   340fe:	1e4a      	subs	r2, r1, #1
   34100:	45b0      	cmp	r8, r6
   34102:	d929      	bls.n	34158 <__aeabi_ddiv+0x550>
   34104:	0011      	movs	r1, r2
   34106:	4286      	cmp	r6, r0
   34108:	d000      	beq.n	3410c <__aeabi_ddiv+0x504>
   3410a:	e765      	b.n	33fd8 <__aeabi_ddiv+0x3d0>
   3410c:	9a03      	ldr	r2, [sp, #12]
   3410e:	4293      	cmp	r3, r2
   34110:	d000      	beq.n	34114 <__aeabi_ddiv+0x50c>
   34112:	e761      	b.n	33fd8 <__aeabi_ddiv+0x3d0>
   34114:	e762      	b.n	33fdc <__aeabi_ddiv+0x3d4>
   34116:	2101      	movs	r1, #1
   34118:	4249      	negs	r1, r1
   3411a:	2001      	movs	r0, #1
   3411c:	1ac2      	subs	r2, r0, r3
   3411e:	2a38      	cmp	r2, #56	; 0x38
   34120:	dd21      	ble.n	34166 <__aeabi_ddiv+0x55e>
   34122:	9b02      	ldr	r3, [sp, #8]
   34124:	4003      	ands	r3, r0
   34126:	469c      	mov	ip, r3
   34128:	e638      	b.n	33d9c <__aeabi_ddiv+0x194>
   3412a:	220f      	movs	r2, #15
   3412c:	400a      	ands	r2, r1
   3412e:	2a04      	cmp	r2, #4
   34130:	d100      	bne.n	34134 <__aeabi_ddiv+0x52c>
   34132:	e75b      	b.n	33fec <__aeabi_ddiv+0x3e4>
   34134:	000a      	movs	r2, r1
   34136:	1d11      	adds	r1, r2, #4
   34138:	4291      	cmp	r1, r2
   3413a:	4192      	sbcs	r2, r2
   3413c:	4252      	negs	r2, r2
   3413e:	4493      	add	fp, r2
   34140:	e754      	b.n	33fec <__aeabi_ddiv+0x3e4>
   34142:	4b47      	ldr	r3, [pc, #284]	; (34260 <__aeabi_ddiv+0x658>)
   34144:	18e3      	adds	r3, r4, r3
   34146:	2b00      	cmp	r3, #0
   34148:	dde5      	ble.n	34116 <__aeabi_ddiv+0x50e>
   3414a:	2201      	movs	r2, #1
   3414c:	4252      	negs	r2, r2
   3414e:	e7f2      	b.n	34136 <__aeabi_ddiv+0x52e>
   34150:	001d      	movs	r5, r3
   34152:	e6fa      	b.n	33f4a <__aeabi_ddiv+0x342>
   34154:	469a      	mov	sl, r3
   34156:	e71c      	b.n	33f92 <__aeabi_ddiv+0x38a>
   34158:	42b0      	cmp	r0, r6
   3415a:	d839      	bhi.n	341d0 <__aeabi_ddiv+0x5c8>
   3415c:	d06e      	beq.n	3423c <__aeabi_ddiv+0x634>
   3415e:	0011      	movs	r1, r2
   34160:	e73a      	b.n	33fd8 <__aeabi_ddiv+0x3d0>
   34162:	9302      	str	r3, [sp, #8]
   34164:	e73a      	b.n	33fdc <__aeabi_ddiv+0x3d4>
   34166:	2a1f      	cmp	r2, #31
   34168:	dc3c      	bgt.n	341e4 <__aeabi_ddiv+0x5dc>
   3416a:	2320      	movs	r3, #32
   3416c:	1a9b      	subs	r3, r3, r2
   3416e:	000c      	movs	r4, r1
   34170:	4658      	mov	r0, fp
   34172:	4099      	lsls	r1, r3
   34174:	4098      	lsls	r0, r3
   34176:	1e4b      	subs	r3, r1, #1
   34178:	4199      	sbcs	r1, r3
   3417a:	465b      	mov	r3, fp
   3417c:	40d4      	lsrs	r4, r2
   3417e:	40d3      	lsrs	r3, r2
   34180:	4320      	orrs	r0, r4
   34182:	4308      	orrs	r0, r1
   34184:	001a      	movs	r2, r3
   34186:	0743      	lsls	r3, r0, #29
   34188:	d009      	beq.n	3419e <__aeabi_ddiv+0x596>
   3418a:	230f      	movs	r3, #15
   3418c:	4003      	ands	r3, r0
   3418e:	2b04      	cmp	r3, #4
   34190:	d005      	beq.n	3419e <__aeabi_ddiv+0x596>
   34192:	0001      	movs	r1, r0
   34194:	1d08      	adds	r0, r1, #4
   34196:	4288      	cmp	r0, r1
   34198:	419b      	sbcs	r3, r3
   3419a:	425b      	negs	r3, r3
   3419c:	18d2      	adds	r2, r2, r3
   3419e:	0213      	lsls	r3, r2, #8
   341a0:	d53a      	bpl.n	34218 <__aeabi_ddiv+0x610>
   341a2:	2301      	movs	r3, #1
   341a4:	9a02      	ldr	r2, [sp, #8]
   341a6:	2401      	movs	r4, #1
   341a8:	401a      	ands	r2, r3
   341aa:	2300      	movs	r3, #0
   341ac:	4694      	mov	ip, r2
   341ae:	4698      	mov	r8, r3
   341b0:	2200      	movs	r2, #0
   341b2:	e5f7      	b.n	33da4 <__aeabi_ddiv+0x19c>
   341b4:	2102      	movs	r1, #2
   341b6:	4249      	negs	r1, r1
   341b8:	468c      	mov	ip, r1
   341ba:	9d03      	ldr	r5, [sp, #12]
   341bc:	44e3      	add	fp, ip
   341be:	46ac      	mov	ip, r5
   341c0:	44e2      	add	sl, ip
   341c2:	45aa      	cmp	sl, r5
   341c4:	41ad      	sbcs	r5, r5
   341c6:	426d      	negs	r5, r5
   341c8:	4445      	add	r5, r8
   341ca:	18ed      	adds	r5, r5, r3
   341cc:	1a2d      	subs	r5, r5, r0
   341ce:	e696      	b.n	33efe <__aeabi_ddiv+0x2f6>
   341d0:	1e8a      	subs	r2, r1, #2
   341d2:	9903      	ldr	r1, [sp, #12]
   341d4:	004d      	lsls	r5, r1, #1
   341d6:	428d      	cmp	r5, r1
   341d8:	4189      	sbcs	r1, r1
   341da:	4249      	negs	r1, r1
   341dc:	4441      	add	r1, r8
   341de:	1876      	adds	r6, r6, r1
   341e0:	9503      	str	r5, [sp, #12]
   341e2:	e78f      	b.n	34104 <__aeabi_ddiv+0x4fc>
   341e4:	201f      	movs	r0, #31
   341e6:	4240      	negs	r0, r0
   341e8:	1ac3      	subs	r3, r0, r3
   341ea:	4658      	mov	r0, fp
   341ec:	40d8      	lsrs	r0, r3
   341ee:	0003      	movs	r3, r0
   341f0:	2a20      	cmp	r2, #32
   341f2:	d028      	beq.n	34246 <__aeabi_ddiv+0x63e>
   341f4:	2040      	movs	r0, #64	; 0x40
   341f6:	465d      	mov	r5, fp
   341f8:	1a82      	subs	r2, r0, r2
   341fa:	4095      	lsls	r5, r2
   341fc:	4329      	orrs	r1, r5
   341fe:	1e4a      	subs	r2, r1, #1
   34200:	4191      	sbcs	r1, r2
   34202:	4319      	orrs	r1, r3
   34204:	2307      	movs	r3, #7
   34206:	2200      	movs	r2, #0
   34208:	400b      	ands	r3, r1
   3420a:	d009      	beq.n	34220 <__aeabi_ddiv+0x618>
   3420c:	230f      	movs	r3, #15
   3420e:	2200      	movs	r2, #0
   34210:	400b      	ands	r3, r1
   34212:	0008      	movs	r0, r1
   34214:	2b04      	cmp	r3, #4
   34216:	d1bd      	bne.n	34194 <__aeabi_ddiv+0x58c>
   34218:	0001      	movs	r1, r0
   3421a:	0753      	lsls	r3, r2, #29
   3421c:	0252      	lsls	r2, r2, #9
   3421e:	0b12      	lsrs	r2, r2, #12
   34220:	08c9      	lsrs	r1, r1, #3
   34222:	4319      	orrs	r1, r3
   34224:	2301      	movs	r3, #1
   34226:	4688      	mov	r8, r1
   34228:	9902      	ldr	r1, [sp, #8]
   3422a:	2400      	movs	r4, #0
   3422c:	4019      	ands	r1, r3
   3422e:	468c      	mov	ip, r1
   34230:	e5b8      	b.n	33da4 <__aeabi_ddiv+0x19c>
   34232:	4552      	cmp	r2, sl
   34234:	d8be      	bhi.n	341b4 <__aeabi_ddiv+0x5ac>
   34236:	468b      	mov	fp, r1
   34238:	2500      	movs	r5, #0
   3423a:	e660      	b.n	33efe <__aeabi_ddiv+0x2f6>
   3423c:	9d03      	ldr	r5, [sp, #12]
   3423e:	429d      	cmp	r5, r3
   34240:	d3c6      	bcc.n	341d0 <__aeabi_ddiv+0x5c8>
   34242:	0011      	movs	r1, r2
   34244:	e762      	b.n	3410c <__aeabi_ddiv+0x504>
   34246:	2500      	movs	r5, #0
   34248:	e7d8      	b.n	341fc <__aeabi_ddiv+0x5f4>
   3424a:	2280      	movs	r2, #128	; 0x80
   3424c:	465b      	mov	r3, fp
   3424e:	0312      	lsls	r2, r2, #12
   34250:	431a      	orrs	r2, r3
   34252:	9b01      	ldr	r3, [sp, #4]
   34254:	0312      	lsls	r2, r2, #12
   34256:	0b12      	lsrs	r2, r2, #12
   34258:	469c      	mov	ip, r3
   3425a:	4688      	mov	r8, r1
   3425c:	4c03      	ldr	r4, [pc, #12]	; (3426c <__aeabi_ddiv+0x664>)
   3425e:	e5a1      	b.n	33da4 <__aeabi_ddiv+0x19c>
   34260:	000003ff 	.word	0x000003ff
   34264:	feffffff 	.word	0xfeffffff
   34268:	000007fe 	.word	0x000007fe
   3426c:	000007ff 	.word	0x000007ff

00034270 <__aeabi_dmul>:
   34270:	b5f0      	push	{r4, r5, r6, r7, lr}
   34272:	4657      	mov	r7, sl
   34274:	4645      	mov	r5, r8
   34276:	46de      	mov	lr, fp
   34278:	464e      	mov	r6, r9
   3427a:	b5e0      	push	{r5, r6, r7, lr}
   3427c:	030c      	lsls	r4, r1, #12
   3427e:	4698      	mov	r8, r3
   34280:	004e      	lsls	r6, r1, #1
   34282:	0b23      	lsrs	r3, r4, #12
   34284:	b087      	sub	sp, #28
   34286:	0007      	movs	r7, r0
   34288:	4692      	mov	sl, r2
   3428a:	469b      	mov	fp, r3
   3428c:	0d76      	lsrs	r6, r6, #21
   3428e:	0fcd      	lsrs	r5, r1, #31
   34290:	2e00      	cmp	r6, #0
   34292:	d06b      	beq.n	3436c <__aeabi_dmul+0xfc>
   34294:	4b6d      	ldr	r3, [pc, #436]	; (3444c <__aeabi_dmul+0x1dc>)
   34296:	429e      	cmp	r6, r3
   34298:	d035      	beq.n	34306 <__aeabi_dmul+0x96>
   3429a:	2480      	movs	r4, #128	; 0x80
   3429c:	465b      	mov	r3, fp
   3429e:	0f42      	lsrs	r2, r0, #29
   342a0:	0424      	lsls	r4, r4, #16
   342a2:	00db      	lsls	r3, r3, #3
   342a4:	4314      	orrs	r4, r2
   342a6:	431c      	orrs	r4, r3
   342a8:	00c3      	lsls	r3, r0, #3
   342aa:	4699      	mov	r9, r3
   342ac:	4b68      	ldr	r3, [pc, #416]	; (34450 <__aeabi_dmul+0x1e0>)
   342ae:	46a3      	mov	fp, r4
   342b0:	469c      	mov	ip, r3
   342b2:	2300      	movs	r3, #0
   342b4:	2700      	movs	r7, #0
   342b6:	4466      	add	r6, ip
   342b8:	9302      	str	r3, [sp, #8]
   342ba:	4643      	mov	r3, r8
   342bc:	031c      	lsls	r4, r3, #12
   342be:	005a      	lsls	r2, r3, #1
   342c0:	0fdb      	lsrs	r3, r3, #31
   342c2:	4650      	mov	r0, sl
   342c4:	0b24      	lsrs	r4, r4, #12
   342c6:	0d52      	lsrs	r2, r2, #21
   342c8:	4698      	mov	r8, r3
   342ca:	d100      	bne.n	342ce <__aeabi_dmul+0x5e>
   342cc:	e076      	b.n	343bc <__aeabi_dmul+0x14c>
   342ce:	4b5f      	ldr	r3, [pc, #380]	; (3444c <__aeabi_dmul+0x1dc>)
   342d0:	429a      	cmp	r2, r3
   342d2:	d06d      	beq.n	343b0 <__aeabi_dmul+0x140>
   342d4:	2380      	movs	r3, #128	; 0x80
   342d6:	0f41      	lsrs	r1, r0, #29
   342d8:	041b      	lsls	r3, r3, #16
   342da:	430b      	orrs	r3, r1
   342dc:	495c      	ldr	r1, [pc, #368]	; (34450 <__aeabi_dmul+0x1e0>)
   342de:	00e4      	lsls	r4, r4, #3
   342e0:	468c      	mov	ip, r1
   342e2:	431c      	orrs	r4, r3
   342e4:	00c3      	lsls	r3, r0, #3
   342e6:	2000      	movs	r0, #0
   342e8:	4462      	add	r2, ip
   342ea:	4641      	mov	r1, r8
   342ec:	18b6      	adds	r6, r6, r2
   342ee:	4069      	eors	r1, r5
   342f0:	1c72      	adds	r2, r6, #1
   342f2:	9101      	str	r1, [sp, #4]
   342f4:	4694      	mov	ip, r2
   342f6:	4307      	orrs	r7, r0
   342f8:	2f0f      	cmp	r7, #15
   342fa:	d900      	bls.n	342fe <__aeabi_dmul+0x8e>
   342fc:	e0b0      	b.n	34460 <__aeabi_dmul+0x1f0>
   342fe:	4a55      	ldr	r2, [pc, #340]	; (34454 <__aeabi_dmul+0x1e4>)
   34300:	00bf      	lsls	r7, r7, #2
   34302:	59d2      	ldr	r2, [r2, r7]
   34304:	4697      	mov	pc, r2
   34306:	465b      	mov	r3, fp
   34308:	4303      	orrs	r3, r0
   3430a:	4699      	mov	r9, r3
   3430c:	d000      	beq.n	34310 <__aeabi_dmul+0xa0>
   3430e:	e087      	b.n	34420 <__aeabi_dmul+0x1b0>
   34310:	2300      	movs	r3, #0
   34312:	469b      	mov	fp, r3
   34314:	3302      	adds	r3, #2
   34316:	2708      	movs	r7, #8
   34318:	9302      	str	r3, [sp, #8]
   3431a:	e7ce      	b.n	342ba <__aeabi_dmul+0x4a>
   3431c:	4642      	mov	r2, r8
   3431e:	9201      	str	r2, [sp, #4]
   34320:	2802      	cmp	r0, #2
   34322:	d067      	beq.n	343f4 <__aeabi_dmul+0x184>
   34324:	2803      	cmp	r0, #3
   34326:	d100      	bne.n	3432a <__aeabi_dmul+0xba>
   34328:	e20e      	b.n	34748 <__aeabi_dmul+0x4d8>
   3432a:	2801      	cmp	r0, #1
   3432c:	d000      	beq.n	34330 <__aeabi_dmul+0xc0>
   3432e:	e162      	b.n	345f6 <__aeabi_dmul+0x386>
   34330:	2300      	movs	r3, #0
   34332:	2400      	movs	r4, #0
   34334:	2200      	movs	r2, #0
   34336:	4699      	mov	r9, r3
   34338:	9901      	ldr	r1, [sp, #4]
   3433a:	4001      	ands	r1, r0
   3433c:	b2cd      	uxtb	r5, r1
   3433e:	2100      	movs	r1, #0
   34340:	0312      	lsls	r2, r2, #12
   34342:	0d0b      	lsrs	r3, r1, #20
   34344:	0b12      	lsrs	r2, r2, #12
   34346:	051b      	lsls	r3, r3, #20
   34348:	4313      	orrs	r3, r2
   3434a:	4a43      	ldr	r2, [pc, #268]	; (34458 <__aeabi_dmul+0x1e8>)
   3434c:	0524      	lsls	r4, r4, #20
   3434e:	4013      	ands	r3, r2
   34350:	431c      	orrs	r4, r3
   34352:	0064      	lsls	r4, r4, #1
   34354:	07ed      	lsls	r5, r5, #31
   34356:	0864      	lsrs	r4, r4, #1
   34358:	432c      	orrs	r4, r5
   3435a:	4648      	mov	r0, r9
   3435c:	0021      	movs	r1, r4
   3435e:	b007      	add	sp, #28
   34360:	bc3c      	pop	{r2, r3, r4, r5}
   34362:	4690      	mov	r8, r2
   34364:	4699      	mov	r9, r3
   34366:	46a2      	mov	sl, r4
   34368:	46ab      	mov	fp, r5
   3436a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3436c:	4303      	orrs	r3, r0
   3436e:	4699      	mov	r9, r3
   34370:	d04f      	beq.n	34412 <__aeabi_dmul+0x1a2>
   34372:	465b      	mov	r3, fp
   34374:	2b00      	cmp	r3, #0
   34376:	d100      	bne.n	3437a <__aeabi_dmul+0x10a>
   34378:	e189      	b.n	3468e <__aeabi_dmul+0x41e>
   3437a:	4658      	mov	r0, fp
   3437c:	f000 fd7a 	bl	34e74 <__clzsi2>
   34380:	0003      	movs	r3, r0
   34382:	3b0b      	subs	r3, #11
   34384:	2b1c      	cmp	r3, #28
   34386:	dd00      	ble.n	3438a <__aeabi_dmul+0x11a>
   34388:	e17a      	b.n	34680 <__aeabi_dmul+0x410>
   3438a:	221d      	movs	r2, #29
   3438c:	1ad3      	subs	r3, r2, r3
   3438e:	003a      	movs	r2, r7
   34390:	0001      	movs	r1, r0
   34392:	465c      	mov	r4, fp
   34394:	40da      	lsrs	r2, r3
   34396:	3908      	subs	r1, #8
   34398:	408c      	lsls	r4, r1
   3439a:	0013      	movs	r3, r2
   3439c:	408f      	lsls	r7, r1
   3439e:	4323      	orrs	r3, r4
   343a0:	469b      	mov	fp, r3
   343a2:	46b9      	mov	r9, r7
   343a4:	2300      	movs	r3, #0
   343a6:	4e2d      	ldr	r6, [pc, #180]	; (3445c <__aeabi_dmul+0x1ec>)
   343a8:	2700      	movs	r7, #0
   343aa:	1a36      	subs	r6, r6, r0
   343ac:	9302      	str	r3, [sp, #8]
   343ae:	e784      	b.n	342ba <__aeabi_dmul+0x4a>
   343b0:	4653      	mov	r3, sl
   343b2:	4323      	orrs	r3, r4
   343b4:	d12a      	bne.n	3440c <__aeabi_dmul+0x19c>
   343b6:	2400      	movs	r4, #0
   343b8:	2002      	movs	r0, #2
   343ba:	e796      	b.n	342ea <__aeabi_dmul+0x7a>
   343bc:	4653      	mov	r3, sl
   343be:	4323      	orrs	r3, r4
   343c0:	d020      	beq.n	34404 <__aeabi_dmul+0x194>
   343c2:	2c00      	cmp	r4, #0
   343c4:	d100      	bne.n	343c8 <__aeabi_dmul+0x158>
   343c6:	e157      	b.n	34678 <__aeabi_dmul+0x408>
   343c8:	0020      	movs	r0, r4
   343ca:	f000 fd53 	bl	34e74 <__clzsi2>
   343ce:	0003      	movs	r3, r0
   343d0:	3b0b      	subs	r3, #11
   343d2:	2b1c      	cmp	r3, #28
   343d4:	dd00      	ble.n	343d8 <__aeabi_dmul+0x168>
   343d6:	e149      	b.n	3466c <__aeabi_dmul+0x3fc>
   343d8:	211d      	movs	r1, #29
   343da:	1acb      	subs	r3, r1, r3
   343dc:	4651      	mov	r1, sl
   343de:	0002      	movs	r2, r0
   343e0:	40d9      	lsrs	r1, r3
   343e2:	4653      	mov	r3, sl
   343e4:	3a08      	subs	r2, #8
   343e6:	4094      	lsls	r4, r2
   343e8:	4093      	lsls	r3, r2
   343ea:	430c      	orrs	r4, r1
   343ec:	4a1b      	ldr	r2, [pc, #108]	; (3445c <__aeabi_dmul+0x1ec>)
   343ee:	1a12      	subs	r2, r2, r0
   343f0:	2000      	movs	r0, #0
   343f2:	e77a      	b.n	342ea <__aeabi_dmul+0x7a>
   343f4:	2501      	movs	r5, #1
   343f6:	9b01      	ldr	r3, [sp, #4]
   343f8:	4c14      	ldr	r4, [pc, #80]	; (3444c <__aeabi_dmul+0x1dc>)
   343fa:	401d      	ands	r5, r3
   343fc:	2300      	movs	r3, #0
   343fe:	2200      	movs	r2, #0
   34400:	4699      	mov	r9, r3
   34402:	e79c      	b.n	3433e <__aeabi_dmul+0xce>
   34404:	2400      	movs	r4, #0
   34406:	2200      	movs	r2, #0
   34408:	2001      	movs	r0, #1
   3440a:	e76e      	b.n	342ea <__aeabi_dmul+0x7a>
   3440c:	4653      	mov	r3, sl
   3440e:	2003      	movs	r0, #3
   34410:	e76b      	b.n	342ea <__aeabi_dmul+0x7a>
   34412:	2300      	movs	r3, #0
   34414:	469b      	mov	fp, r3
   34416:	3301      	adds	r3, #1
   34418:	2704      	movs	r7, #4
   3441a:	2600      	movs	r6, #0
   3441c:	9302      	str	r3, [sp, #8]
   3441e:	e74c      	b.n	342ba <__aeabi_dmul+0x4a>
   34420:	2303      	movs	r3, #3
   34422:	4681      	mov	r9, r0
   34424:	270c      	movs	r7, #12
   34426:	9302      	str	r3, [sp, #8]
   34428:	e747      	b.n	342ba <__aeabi_dmul+0x4a>
   3442a:	2280      	movs	r2, #128	; 0x80
   3442c:	2300      	movs	r3, #0
   3442e:	2500      	movs	r5, #0
   34430:	0312      	lsls	r2, r2, #12
   34432:	4699      	mov	r9, r3
   34434:	4c05      	ldr	r4, [pc, #20]	; (3444c <__aeabi_dmul+0x1dc>)
   34436:	e782      	b.n	3433e <__aeabi_dmul+0xce>
   34438:	465c      	mov	r4, fp
   3443a:	464b      	mov	r3, r9
   3443c:	9802      	ldr	r0, [sp, #8]
   3443e:	e76f      	b.n	34320 <__aeabi_dmul+0xb0>
   34440:	465c      	mov	r4, fp
   34442:	464b      	mov	r3, r9
   34444:	9501      	str	r5, [sp, #4]
   34446:	9802      	ldr	r0, [sp, #8]
   34448:	e76a      	b.n	34320 <__aeabi_dmul+0xb0>
   3444a:	46c0      	nop			; (mov r8, r8)
   3444c:	000007ff 	.word	0x000007ff
   34450:	fffffc01 	.word	0xfffffc01
   34454:	0003a99c 	.word	0x0003a99c
   34458:	800fffff 	.word	0x800fffff
   3445c:	fffffc0d 	.word	0xfffffc0d
   34460:	464a      	mov	r2, r9
   34462:	4649      	mov	r1, r9
   34464:	0c17      	lsrs	r7, r2, #16
   34466:	0c1a      	lsrs	r2, r3, #16
   34468:	041b      	lsls	r3, r3, #16
   3446a:	0c1b      	lsrs	r3, r3, #16
   3446c:	0408      	lsls	r0, r1, #16
   3446e:	0019      	movs	r1, r3
   34470:	0c00      	lsrs	r0, r0, #16
   34472:	4341      	muls	r1, r0
   34474:	0015      	movs	r5, r2
   34476:	4688      	mov	r8, r1
   34478:	0019      	movs	r1, r3
   3447a:	437d      	muls	r5, r7
   3447c:	4379      	muls	r1, r7
   3447e:	9503      	str	r5, [sp, #12]
   34480:	4689      	mov	r9, r1
   34482:	0029      	movs	r1, r5
   34484:	0015      	movs	r5, r2
   34486:	4345      	muls	r5, r0
   34488:	444d      	add	r5, r9
   3448a:	9502      	str	r5, [sp, #8]
   3448c:	4645      	mov	r5, r8
   3448e:	0c2d      	lsrs	r5, r5, #16
   34490:	46aa      	mov	sl, r5
   34492:	9d02      	ldr	r5, [sp, #8]
   34494:	4455      	add	r5, sl
   34496:	45a9      	cmp	r9, r5
   34498:	d906      	bls.n	344a8 <__aeabi_dmul+0x238>
   3449a:	468a      	mov	sl, r1
   3449c:	2180      	movs	r1, #128	; 0x80
   3449e:	0249      	lsls	r1, r1, #9
   344a0:	4689      	mov	r9, r1
   344a2:	44ca      	add	sl, r9
   344a4:	4651      	mov	r1, sl
   344a6:	9103      	str	r1, [sp, #12]
   344a8:	0c29      	lsrs	r1, r5, #16
   344aa:	9104      	str	r1, [sp, #16]
   344ac:	4641      	mov	r1, r8
   344ae:	0409      	lsls	r1, r1, #16
   344b0:	042d      	lsls	r5, r5, #16
   344b2:	0c09      	lsrs	r1, r1, #16
   344b4:	4688      	mov	r8, r1
   344b6:	0029      	movs	r1, r5
   344b8:	0c25      	lsrs	r5, r4, #16
   344ba:	0424      	lsls	r4, r4, #16
   344bc:	4441      	add	r1, r8
   344be:	0c24      	lsrs	r4, r4, #16
   344c0:	9105      	str	r1, [sp, #20]
   344c2:	0021      	movs	r1, r4
   344c4:	4341      	muls	r1, r0
   344c6:	4688      	mov	r8, r1
   344c8:	0021      	movs	r1, r4
   344ca:	4379      	muls	r1, r7
   344cc:	468a      	mov	sl, r1
   344ce:	4368      	muls	r0, r5
   344d0:	4641      	mov	r1, r8
   344d2:	4450      	add	r0, sl
   344d4:	4681      	mov	r9, r0
   344d6:	0c08      	lsrs	r0, r1, #16
   344d8:	4448      	add	r0, r9
   344da:	436f      	muls	r7, r5
   344dc:	4582      	cmp	sl, r0
   344de:	d903      	bls.n	344e8 <__aeabi_dmul+0x278>
   344e0:	2180      	movs	r1, #128	; 0x80
   344e2:	0249      	lsls	r1, r1, #9
   344e4:	4689      	mov	r9, r1
   344e6:	444f      	add	r7, r9
   344e8:	0c01      	lsrs	r1, r0, #16
   344ea:	4689      	mov	r9, r1
   344ec:	0039      	movs	r1, r7
   344ee:	4449      	add	r1, r9
   344f0:	9102      	str	r1, [sp, #8]
   344f2:	4641      	mov	r1, r8
   344f4:	040f      	lsls	r7, r1, #16
   344f6:	9904      	ldr	r1, [sp, #16]
   344f8:	0c3f      	lsrs	r7, r7, #16
   344fa:	4688      	mov	r8, r1
   344fc:	0400      	lsls	r0, r0, #16
   344fe:	19c0      	adds	r0, r0, r7
   34500:	4480      	add	r8, r0
   34502:	4641      	mov	r1, r8
   34504:	9104      	str	r1, [sp, #16]
   34506:	4659      	mov	r1, fp
   34508:	0c0f      	lsrs	r7, r1, #16
   3450a:	0409      	lsls	r1, r1, #16
   3450c:	0c09      	lsrs	r1, r1, #16
   3450e:	4688      	mov	r8, r1
   34510:	4359      	muls	r1, r3
   34512:	468a      	mov	sl, r1
   34514:	0039      	movs	r1, r7
   34516:	4351      	muls	r1, r2
   34518:	4689      	mov	r9, r1
   3451a:	4641      	mov	r1, r8
   3451c:	434a      	muls	r2, r1
   3451e:	4651      	mov	r1, sl
   34520:	0c09      	lsrs	r1, r1, #16
   34522:	468b      	mov	fp, r1
   34524:	437b      	muls	r3, r7
   34526:	18d2      	adds	r2, r2, r3
   34528:	445a      	add	r2, fp
   3452a:	4293      	cmp	r3, r2
   3452c:	d903      	bls.n	34536 <__aeabi_dmul+0x2c6>
   3452e:	2380      	movs	r3, #128	; 0x80
   34530:	025b      	lsls	r3, r3, #9
   34532:	469b      	mov	fp, r3
   34534:	44d9      	add	r9, fp
   34536:	4651      	mov	r1, sl
   34538:	0409      	lsls	r1, r1, #16
   3453a:	0c09      	lsrs	r1, r1, #16
   3453c:	468a      	mov	sl, r1
   3453e:	4641      	mov	r1, r8
   34540:	4361      	muls	r1, r4
   34542:	437c      	muls	r4, r7
   34544:	0c13      	lsrs	r3, r2, #16
   34546:	0412      	lsls	r2, r2, #16
   34548:	444b      	add	r3, r9
   3454a:	4452      	add	r2, sl
   3454c:	46a1      	mov	r9, r4
   3454e:	468a      	mov	sl, r1
   34550:	003c      	movs	r4, r7
   34552:	4641      	mov	r1, r8
   34554:	436c      	muls	r4, r5
   34556:	434d      	muls	r5, r1
   34558:	4651      	mov	r1, sl
   3455a:	444d      	add	r5, r9
   3455c:	0c0f      	lsrs	r7, r1, #16
   3455e:	197d      	adds	r5, r7, r5
   34560:	45a9      	cmp	r9, r5
   34562:	d903      	bls.n	3456c <__aeabi_dmul+0x2fc>
   34564:	2180      	movs	r1, #128	; 0x80
   34566:	0249      	lsls	r1, r1, #9
   34568:	4688      	mov	r8, r1
   3456a:	4444      	add	r4, r8
   3456c:	9f04      	ldr	r7, [sp, #16]
   3456e:	9903      	ldr	r1, [sp, #12]
   34570:	46b8      	mov	r8, r7
   34572:	4441      	add	r1, r8
   34574:	468b      	mov	fp, r1
   34576:	4583      	cmp	fp, r0
   34578:	4180      	sbcs	r0, r0
   3457a:	4241      	negs	r1, r0
   3457c:	4688      	mov	r8, r1
   3457e:	4651      	mov	r1, sl
   34580:	0408      	lsls	r0, r1, #16
   34582:	042f      	lsls	r7, r5, #16
   34584:	0c00      	lsrs	r0, r0, #16
   34586:	183f      	adds	r7, r7, r0
   34588:	4658      	mov	r0, fp
   3458a:	9902      	ldr	r1, [sp, #8]
   3458c:	1810      	adds	r0, r2, r0
   3458e:	4689      	mov	r9, r1
   34590:	4290      	cmp	r0, r2
   34592:	4192      	sbcs	r2, r2
   34594:	444f      	add	r7, r9
   34596:	46ba      	mov	sl, r7
   34598:	4252      	negs	r2, r2
   3459a:	4699      	mov	r9, r3
   3459c:	4693      	mov	fp, r2
   3459e:	44c2      	add	sl, r8
   345a0:	44d1      	add	r9, sl
   345a2:	44cb      	add	fp, r9
   345a4:	428f      	cmp	r7, r1
   345a6:	41bf      	sbcs	r7, r7
   345a8:	45c2      	cmp	sl, r8
   345aa:	4189      	sbcs	r1, r1
   345ac:	4599      	cmp	r9, r3
   345ae:	419b      	sbcs	r3, r3
   345b0:	4593      	cmp	fp, r2
   345b2:	4192      	sbcs	r2, r2
   345b4:	427f      	negs	r7, r7
   345b6:	4249      	negs	r1, r1
   345b8:	0c2d      	lsrs	r5, r5, #16
   345ba:	4252      	negs	r2, r2
   345bc:	430f      	orrs	r7, r1
   345be:	425b      	negs	r3, r3
   345c0:	4313      	orrs	r3, r2
   345c2:	197f      	adds	r7, r7, r5
   345c4:	18ff      	adds	r7, r7, r3
   345c6:	465b      	mov	r3, fp
   345c8:	193c      	adds	r4, r7, r4
   345ca:	0ddb      	lsrs	r3, r3, #23
   345cc:	9a05      	ldr	r2, [sp, #20]
   345ce:	0264      	lsls	r4, r4, #9
   345d0:	431c      	orrs	r4, r3
   345d2:	0243      	lsls	r3, r0, #9
   345d4:	4313      	orrs	r3, r2
   345d6:	1e5d      	subs	r5, r3, #1
   345d8:	41ab      	sbcs	r3, r5
   345da:	465a      	mov	r2, fp
   345dc:	0dc0      	lsrs	r0, r0, #23
   345de:	4303      	orrs	r3, r0
   345e0:	0252      	lsls	r2, r2, #9
   345e2:	4313      	orrs	r3, r2
   345e4:	01e2      	lsls	r2, r4, #7
   345e6:	d556      	bpl.n	34696 <__aeabi_dmul+0x426>
   345e8:	2001      	movs	r0, #1
   345ea:	085a      	lsrs	r2, r3, #1
   345ec:	4003      	ands	r3, r0
   345ee:	4313      	orrs	r3, r2
   345f0:	07e2      	lsls	r2, r4, #31
   345f2:	4313      	orrs	r3, r2
   345f4:	0864      	lsrs	r4, r4, #1
   345f6:	485a      	ldr	r0, [pc, #360]	; (34760 <__aeabi_dmul+0x4f0>)
   345f8:	4460      	add	r0, ip
   345fa:	2800      	cmp	r0, #0
   345fc:	dd4d      	ble.n	3469a <__aeabi_dmul+0x42a>
   345fe:	075a      	lsls	r2, r3, #29
   34600:	d009      	beq.n	34616 <__aeabi_dmul+0x3a6>
   34602:	220f      	movs	r2, #15
   34604:	401a      	ands	r2, r3
   34606:	2a04      	cmp	r2, #4
   34608:	d005      	beq.n	34616 <__aeabi_dmul+0x3a6>
   3460a:	1d1a      	adds	r2, r3, #4
   3460c:	429a      	cmp	r2, r3
   3460e:	419b      	sbcs	r3, r3
   34610:	425b      	negs	r3, r3
   34612:	18e4      	adds	r4, r4, r3
   34614:	0013      	movs	r3, r2
   34616:	01e2      	lsls	r2, r4, #7
   34618:	d504      	bpl.n	34624 <__aeabi_dmul+0x3b4>
   3461a:	2080      	movs	r0, #128	; 0x80
   3461c:	4a51      	ldr	r2, [pc, #324]	; (34764 <__aeabi_dmul+0x4f4>)
   3461e:	00c0      	lsls	r0, r0, #3
   34620:	4014      	ands	r4, r2
   34622:	4460      	add	r0, ip
   34624:	4a50      	ldr	r2, [pc, #320]	; (34768 <__aeabi_dmul+0x4f8>)
   34626:	4290      	cmp	r0, r2
   34628:	dd00      	ble.n	3462c <__aeabi_dmul+0x3bc>
   3462a:	e6e3      	b.n	343f4 <__aeabi_dmul+0x184>
   3462c:	2501      	movs	r5, #1
   3462e:	08db      	lsrs	r3, r3, #3
   34630:	0762      	lsls	r2, r4, #29
   34632:	431a      	orrs	r2, r3
   34634:	0264      	lsls	r4, r4, #9
   34636:	9b01      	ldr	r3, [sp, #4]
   34638:	4691      	mov	r9, r2
   3463a:	0b22      	lsrs	r2, r4, #12
   3463c:	0544      	lsls	r4, r0, #21
   3463e:	0d64      	lsrs	r4, r4, #21
   34640:	401d      	ands	r5, r3
   34642:	e67c      	b.n	3433e <__aeabi_dmul+0xce>
   34644:	2280      	movs	r2, #128	; 0x80
   34646:	4659      	mov	r1, fp
   34648:	0312      	lsls	r2, r2, #12
   3464a:	4211      	tst	r1, r2
   3464c:	d008      	beq.n	34660 <__aeabi_dmul+0x3f0>
   3464e:	4214      	tst	r4, r2
   34650:	d106      	bne.n	34660 <__aeabi_dmul+0x3f0>
   34652:	4322      	orrs	r2, r4
   34654:	0312      	lsls	r2, r2, #12
   34656:	0b12      	lsrs	r2, r2, #12
   34658:	4645      	mov	r5, r8
   3465a:	4699      	mov	r9, r3
   3465c:	4c43      	ldr	r4, [pc, #268]	; (3476c <__aeabi_dmul+0x4fc>)
   3465e:	e66e      	b.n	3433e <__aeabi_dmul+0xce>
   34660:	465b      	mov	r3, fp
   34662:	431a      	orrs	r2, r3
   34664:	0312      	lsls	r2, r2, #12
   34666:	0b12      	lsrs	r2, r2, #12
   34668:	4c40      	ldr	r4, [pc, #256]	; (3476c <__aeabi_dmul+0x4fc>)
   3466a:	e668      	b.n	3433e <__aeabi_dmul+0xce>
   3466c:	0003      	movs	r3, r0
   3466e:	4654      	mov	r4, sl
   34670:	3b28      	subs	r3, #40	; 0x28
   34672:	409c      	lsls	r4, r3
   34674:	2300      	movs	r3, #0
   34676:	e6b9      	b.n	343ec <__aeabi_dmul+0x17c>
   34678:	f000 fbfc 	bl	34e74 <__clzsi2>
   3467c:	3020      	adds	r0, #32
   3467e:	e6a6      	b.n	343ce <__aeabi_dmul+0x15e>
   34680:	0003      	movs	r3, r0
   34682:	3b28      	subs	r3, #40	; 0x28
   34684:	409f      	lsls	r7, r3
   34686:	2300      	movs	r3, #0
   34688:	46bb      	mov	fp, r7
   3468a:	4699      	mov	r9, r3
   3468c:	e68a      	b.n	343a4 <__aeabi_dmul+0x134>
   3468e:	f000 fbf1 	bl	34e74 <__clzsi2>
   34692:	3020      	adds	r0, #32
   34694:	e674      	b.n	34380 <__aeabi_dmul+0x110>
   34696:	46b4      	mov	ip, r6
   34698:	e7ad      	b.n	345f6 <__aeabi_dmul+0x386>
   3469a:	2501      	movs	r5, #1
   3469c:	1a2a      	subs	r2, r5, r0
   3469e:	2a38      	cmp	r2, #56	; 0x38
   346a0:	dd06      	ble.n	346b0 <__aeabi_dmul+0x440>
   346a2:	9b01      	ldr	r3, [sp, #4]
   346a4:	2400      	movs	r4, #0
   346a6:	401d      	ands	r5, r3
   346a8:	2300      	movs	r3, #0
   346aa:	2200      	movs	r2, #0
   346ac:	4699      	mov	r9, r3
   346ae:	e646      	b.n	3433e <__aeabi_dmul+0xce>
   346b0:	2a1f      	cmp	r2, #31
   346b2:	dc21      	bgt.n	346f8 <__aeabi_dmul+0x488>
   346b4:	2520      	movs	r5, #32
   346b6:	0020      	movs	r0, r4
   346b8:	1aad      	subs	r5, r5, r2
   346ba:	001e      	movs	r6, r3
   346bc:	40ab      	lsls	r3, r5
   346be:	40a8      	lsls	r0, r5
   346c0:	40d6      	lsrs	r6, r2
   346c2:	1e5d      	subs	r5, r3, #1
   346c4:	41ab      	sbcs	r3, r5
   346c6:	4330      	orrs	r0, r6
   346c8:	4318      	orrs	r0, r3
   346ca:	40d4      	lsrs	r4, r2
   346cc:	0743      	lsls	r3, r0, #29
   346ce:	d009      	beq.n	346e4 <__aeabi_dmul+0x474>
   346d0:	230f      	movs	r3, #15
   346d2:	4003      	ands	r3, r0
   346d4:	2b04      	cmp	r3, #4
   346d6:	d005      	beq.n	346e4 <__aeabi_dmul+0x474>
   346d8:	0003      	movs	r3, r0
   346da:	1d18      	adds	r0, r3, #4
   346dc:	4298      	cmp	r0, r3
   346de:	419b      	sbcs	r3, r3
   346e0:	425b      	negs	r3, r3
   346e2:	18e4      	adds	r4, r4, r3
   346e4:	0223      	lsls	r3, r4, #8
   346e6:	d521      	bpl.n	3472c <__aeabi_dmul+0x4bc>
   346e8:	2501      	movs	r5, #1
   346ea:	9b01      	ldr	r3, [sp, #4]
   346ec:	2401      	movs	r4, #1
   346ee:	401d      	ands	r5, r3
   346f0:	2300      	movs	r3, #0
   346f2:	2200      	movs	r2, #0
   346f4:	4699      	mov	r9, r3
   346f6:	e622      	b.n	3433e <__aeabi_dmul+0xce>
   346f8:	251f      	movs	r5, #31
   346fa:	0021      	movs	r1, r4
   346fc:	426d      	negs	r5, r5
   346fe:	1a28      	subs	r0, r5, r0
   34700:	40c1      	lsrs	r1, r0
   34702:	0008      	movs	r0, r1
   34704:	2a20      	cmp	r2, #32
   34706:	d01d      	beq.n	34744 <__aeabi_dmul+0x4d4>
   34708:	355f      	adds	r5, #95	; 0x5f
   3470a:	1aaa      	subs	r2, r5, r2
   3470c:	4094      	lsls	r4, r2
   3470e:	4323      	orrs	r3, r4
   34710:	1e5c      	subs	r4, r3, #1
   34712:	41a3      	sbcs	r3, r4
   34714:	2507      	movs	r5, #7
   34716:	4303      	orrs	r3, r0
   34718:	401d      	ands	r5, r3
   3471a:	2200      	movs	r2, #0
   3471c:	2d00      	cmp	r5, #0
   3471e:	d009      	beq.n	34734 <__aeabi_dmul+0x4c4>
   34720:	220f      	movs	r2, #15
   34722:	2400      	movs	r4, #0
   34724:	401a      	ands	r2, r3
   34726:	0018      	movs	r0, r3
   34728:	2a04      	cmp	r2, #4
   3472a:	d1d6      	bne.n	346da <__aeabi_dmul+0x46a>
   3472c:	0003      	movs	r3, r0
   3472e:	0765      	lsls	r5, r4, #29
   34730:	0264      	lsls	r4, r4, #9
   34732:	0b22      	lsrs	r2, r4, #12
   34734:	08db      	lsrs	r3, r3, #3
   34736:	432b      	orrs	r3, r5
   34738:	2501      	movs	r5, #1
   3473a:	4699      	mov	r9, r3
   3473c:	9b01      	ldr	r3, [sp, #4]
   3473e:	2400      	movs	r4, #0
   34740:	401d      	ands	r5, r3
   34742:	e5fc      	b.n	3433e <__aeabi_dmul+0xce>
   34744:	2400      	movs	r4, #0
   34746:	e7e2      	b.n	3470e <__aeabi_dmul+0x49e>
   34748:	2280      	movs	r2, #128	; 0x80
   3474a:	2501      	movs	r5, #1
   3474c:	0312      	lsls	r2, r2, #12
   3474e:	4322      	orrs	r2, r4
   34750:	9901      	ldr	r1, [sp, #4]
   34752:	0312      	lsls	r2, r2, #12
   34754:	0b12      	lsrs	r2, r2, #12
   34756:	400d      	ands	r5, r1
   34758:	4699      	mov	r9, r3
   3475a:	4c04      	ldr	r4, [pc, #16]	; (3476c <__aeabi_dmul+0x4fc>)
   3475c:	e5ef      	b.n	3433e <__aeabi_dmul+0xce>
   3475e:	46c0      	nop			; (mov r8, r8)
   34760:	000003ff 	.word	0x000003ff
   34764:	feffffff 	.word	0xfeffffff
   34768:	000007fe 	.word	0x000007fe
   3476c:	000007ff 	.word	0x000007ff

00034770 <__aeabi_dsub>:
   34770:	b5f0      	push	{r4, r5, r6, r7, lr}
   34772:	4646      	mov	r6, r8
   34774:	46d6      	mov	lr, sl
   34776:	464f      	mov	r7, r9
   34778:	030c      	lsls	r4, r1, #12
   3477a:	b5c0      	push	{r6, r7, lr}
   3477c:	0fcd      	lsrs	r5, r1, #31
   3477e:	004e      	lsls	r6, r1, #1
   34780:	0a61      	lsrs	r1, r4, #9
   34782:	0f44      	lsrs	r4, r0, #29
   34784:	430c      	orrs	r4, r1
   34786:	00c1      	lsls	r1, r0, #3
   34788:	0058      	lsls	r0, r3, #1
   3478a:	0d40      	lsrs	r0, r0, #21
   3478c:	4684      	mov	ip, r0
   3478e:	468a      	mov	sl, r1
   34790:	000f      	movs	r7, r1
   34792:	0319      	lsls	r1, r3, #12
   34794:	0f50      	lsrs	r0, r2, #29
   34796:	0a49      	lsrs	r1, r1, #9
   34798:	4301      	orrs	r1, r0
   3479a:	48c6      	ldr	r0, [pc, #792]	; (34ab4 <__aeabi_dsub+0x344>)
   3479c:	0d76      	lsrs	r6, r6, #21
   3479e:	46a8      	mov	r8, r5
   347a0:	0fdb      	lsrs	r3, r3, #31
   347a2:	00d2      	lsls	r2, r2, #3
   347a4:	4584      	cmp	ip, r0
   347a6:	d100      	bne.n	347aa <__aeabi_dsub+0x3a>
   347a8:	e0d8      	b.n	3495c <__aeabi_dsub+0x1ec>
   347aa:	2001      	movs	r0, #1
   347ac:	4043      	eors	r3, r0
   347ae:	42ab      	cmp	r3, r5
   347b0:	d100      	bne.n	347b4 <__aeabi_dsub+0x44>
   347b2:	e0a6      	b.n	34902 <__aeabi_dsub+0x192>
   347b4:	4660      	mov	r0, ip
   347b6:	1a35      	subs	r5, r6, r0
   347b8:	2d00      	cmp	r5, #0
   347ba:	dc00      	bgt.n	347be <__aeabi_dsub+0x4e>
   347bc:	e105      	b.n	349ca <__aeabi_dsub+0x25a>
   347be:	2800      	cmp	r0, #0
   347c0:	d110      	bne.n	347e4 <__aeabi_dsub+0x74>
   347c2:	000b      	movs	r3, r1
   347c4:	4313      	orrs	r3, r2
   347c6:	d100      	bne.n	347ca <__aeabi_dsub+0x5a>
   347c8:	e0d7      	b.n	3497a <__aeabi_dsub+0x20a>
   347ca:	1e6b      	subs	r3, r5, #1
   347cc:	2b00      	cmp	r3, #0
   347ce:	d000      	beq.n	347d2 <__aeabi_dsub+0x62>
   347d0:	e14b      	b.n	34a6a <__aeabi_dsub+0x2fa>
   347d2:	4653      	mov	r3, sl
   347d4:	1a9f      	subs	r7, r3, r2
   347d6:	45ba      	cmp	sl, r7
   347d8:	4180      	sbcs	r0, r0
   347da:	1a64      	subs	r4, r4, r1
   347dc:	4240      	negs	r0, r0
   347de:	1a24      	subs	r4, r4, r0
   347e0:	2601      	movs	r6, #1
   347e2:	e01e      	b.n	34822 <__aeabi_dsub+0xb2>
   347e4:	4bb3      	ldr	r3, [pc, #716]	; (34ab4 <__aeabi_dsub+0x344>)
   347e6:	429e      	cmp	r6, r3
   347e8:	d048      	beq.n	3487c <__aeabi_dsub+0x10c>
   347ea:	2380      	movs	r3, #128	; 0x80
   347ec:	041b      	lsls	r3, r3, #16
   347ee:	4319      	orrs	r1, r3
   347f0:	2d38      	cmp	r5, #56	; 0x38
   347f2:	dd00      	ble.n	347f6 <__aeabi_dsub+0x86>
   347f4:	e119      	b.n	34a2a <__aeabi_dsub+0x2ba>
   347f6:	2d1f      	cmp	r5, #31
   347f8:	dd00      	ble.n	347fc <__aeabi_dsub+0x8c>
   347fa:	e14c      	b.n	34a96 <__aeabi_dsub+0x326>
   347fc:	2320      	movs	r3, #32
   347fe:	000f      	movs	r7, r1
   34800:	1b5b      	subs	r3, r3, r5
   34802:	0010      	movs	r0, r2
   34804:	409a      	lsls	r2, r3
   34806:	409f      	lsls	r7, r3
   34808:	40e8      	lsrs	r0, r5
   3480a:	1e53      	subs	r3, r2, #1
   3480c:	419a      	sbcs	r2, r3
   3480e:	40e9      	lsrs	r1, r5
   34810:	4307      	orrs	r7, r0
   34812:	4317      	orrs	r7, r2
   34814:	4653      	mov	r3, sl
   34816:	1bdf      	subs	r7, r3, r7
   34818:	1a61      	subs	r1, r4, r1
   3481a:	45ba      	cmp	sl, r7
   3481c:	41a4      	sbcs	r4, r4
   3481e:	4264      	negs	r4, r4
   34820:	1b0c      	subs	r4, r1, r4
   34822:	0223      	lsls	r3, r4, #8
   34824:	d400      	bmi.n	34828 <__aeabi_dsub+0xb8>
   34826:	e0c5      	b.n	349b4 <__aeabi_dsub+0x244>
   34828:	0264      	lsls	r4, r4, #9
   3482a:	0a65      	lsrs	r5, r4, #9
   3482c:	2d00      	cmp	r5, #0
   3482e:	d100      	bne.n	34832 <__aeabi_dsub+0xc2>
   34830:	e0f6      	b.n	34a20 <__aeabi_dsub+0x2b0>
   34832:	0028      	movs	r0, r5
   34834:	f000 fb1e 	bl	34e74 <__clzsi2>
   34838:	0003      	movs	r3, r0
   3483a:	3b08      	subs	r3, #8
   3483c:	2b1f      	cmp	r3, #31
   3483e:	dd00      	ble.n	34842 <__aeabi_dsub+0xd2>
   34840:	e0e9      	b.n	34a16 <__aeabi_dsub+0x2a6>
   34842:	2220      	movs	r2, #32
   34844:	003c      	movs	r4, r7
   34846:	1ad2      	subs	r2, r2, r3
   34848:	409d      	lsls	r5, r3
   3484a:	40d4      	lsrs	r4, r2
   3484c:	409f      	lsls	r7, r3
   3484e:	4325      	orrs	r5, r4
   34850:	429e      	cmp	r6, r3
   34852:	dd00      	ble.n	34856 <__aeabi_dsub+0xe6>
   34854:	e0db      	b.n	34a0e <__aeabi_dsub+0x29e>
   34856:	1b9e      	subs	r6, r3, r6
   34858:	1c73      	adds	r3, r6, #1
   3485a:	2b1f      	cmp	r3, #31
   3485c:	dd00      	ble.n	34860 <__aeabi_dsub+0xf0>
   3485e:	e10a      	b.n	34a76 <__aeabi_dsub+0x306>
   34860:	2220      	movs	r2, #32
   34862:	0038      	movs	r0, r7
   34864:	1ad2      	subs	r2, r2, r3
   34866:	0029      	movs	r1, r5
   34868:	4097      	lsls	r7, r2
   3486a:	002c      	movs	r4, r5
   3486c:	4091      	lsls	r1, r2
   3486e:	40d8      	lsrs	r0, r3
   34870:	1e7a      	subs	r2, r7, #1
   34872:	4197      	sbcs	r7, r2
   34874:	40dc      	lsrs	r4, r3
   34876:	2600      	movs	r6, #0
   34878:	4301      	orrs	r1, r0
   3487a:	430f      	orrs	r7, r1
   3487c:	077b      	lsls	r3, r7, #29
   3487e:	d009      	beq.n	34894 <__aeabi_dsub+0x124>
   34880:	230f      	movs	r3, #15
   34882:	403b      	ands	r3, r7
   34884:	2b04      	cmp	r3, #4
   34886:	d005      	beq.n	34894 <__aeabi_dsub+0x124>
   34888:	1d3b      	adds	r3, r7, #4
   3488a:	42bb      	cmp	r3, r7
   3488c:	41bf      	sbcs	r7, r7
   3488e:	427f      	negs	r7, r7
   34890:	19e4      	adds	r4, r4, r7
   34892:	001f      	movs	r7, r3
   34894:	0223      	lsls	r3, r4, #8
   34896:	d525      	bpl.n	348e4 <__aeabi_dsub+0x174>
   34898:	4b86      	ldr	r3, [pc, #536]	; (34ab4 <__aeabi_dsub+0x344>)
   3489a:	3601      	adds	r6, #1
   3489c:	429e      	cmp	r6, r3
   3489e:	d100      	bne.n	348a2 <__aeabi_dsub+0x132>
   348a0:	e0af      	b.n	34a02 <__aeabi_dsub+0x292>
   348a2:	4b85      	ldr	r3, [pc, #532]	; (34ab8 <__aeabi_dsub+0x348>)
   348a4:	2501      	movs	r5, #1
   348a6:	401c      	ands	r4, r3
   348a8:	4643      	mov	r3, r8
   348aa:	0762      	lsls	r2, r4, #29
   348ac:	08ff      	lsrs	r7, r7, #3
   348ae:	0264      	lsls	r4, r4, #9
   348b0:	0576      	lsls	r6, r6, #21
   348b2:	4317      	orrs	r7, r2
   348b4:	0b24      	lsrs	r4, r4, #12
   348b6:	0d76      	lsrs	r6, r6, #21
   348b8:	401d      	ands	r5, r3
   348ba:	2100      	movs	r1, #0
   348bc:	0324      	lsls	r4, r4, #12
   348be:	0b23      	lsrs	r3, r4, #12
   348c0:	0d0c      	lsrs	r4, r1, #20
   348c2:	4a7e      	ldr	r2, [pc, #504]	; (34abc <__aeabi_dsub+0x34c>)
   348c4:	0524      	lsls	r4, r4, #20
   348c6:	431c      	orrs	r4, r3
   348c8:	4014      	ands	r4, r2
   348ca:	0533      	lsls	r3, r6, #20
   348cc:	4323      	orrs	r3, r4
   348ce:	005b      	lsls	r3, r3, #1
   348d0:	07ed      	lsls	r5, r5, #31
   348d2:	085b      	lsrs	r3, r3, #1
   348d4:	432b      	orrs	r3, r5
   348d6:	0038      	movs	r0, r7
   348d8:	0019      	movs	r1, r3
   348da:	bc1c      	pop	{r2, r3, r4}
   348dc:	4690      	mov	r8, r2
   348de:	4699      	mov	r9, r3
   348e0:	46a2      	mov	sl, r4
   348e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   348e4:	2501      	movs	r5, #1
   348e6:	4643      	mov	r3, r8
   348e8:	0762      	lsls	r2, r4, #29
   348ea:	08ff      	lsrs	r7, r7, #3
   348ec:	4317      	orrs	r7, r2
   348ee:	08e4      	lsrs	r4, r4, #3
   348f0:	401d      	ands	r5, r3
   348f2:	4b70      	ldr	r3, [pc, #448]	; (34ab4 <__aeabi_dsub+0x344>)
   348f4:	429e      	cmp	r6, r3
   348f6:	d036      	beq.n	34966 <__aeabi_dsub+0x1f6>
   348f8:	0324      	lsls	r4, r4, #12
   348fa:	0576      	lsls	r6, r6, #21
   348fc:	0b24      	lsrs	r4, r4, #12
   348fe:	0d76      	lsrs	r6, r6, #21
   34900:	e7db      	b.n	348ba <__aeabi_dsub+0x14a>
   34902:	4663      	mov	r3, ip
   34904:	1af3      	subs	r3, r6, r3
   34906:	2b00      	cmp	r3, #0
   34908:	dc00      	bgt.n	3490c <__aeabi_dsub+0x19c>
   3490a:	e094      	b.n	34a36 <__aeabi_dsub+0x2c6>
   3490c:	4660      	mov	r0, ip
   3490e:	2800      	cmp	r0, #0
   34910:	d035      	beq.n	3497e <__aeabi_dsub+0x20e>
   34912:	4868      	ldr	r0, [pc, #416]	; (34ab4 <__aeabi_dsub+0x344>)
   34914:	4286      	cmp	r6, r0
   34916:	d0b1      	beq.n	3487c <__aeabi_dsub+0x10c>
   34918:	2780      	movs	r7, #128	; 0x80
   3491a:	043f      	lsls	r7, r7, #16
   3491c:	4339      	orrs	r1, r7
   3491e:	2b38      	cmp	r3, #56	; 0x38
   34920:	dc00      	bgt.n	34924 <__aeabi_dsub+0x1b4>
   34922:	e0fd      	b.n	34b20 <__aeabi_dsub+0x3b0>
   34924:	430a      	orrs	r2, r1
   34926:	0017      	movs	r7, r2
   34928:	2100      	movs	r1, #0
   3492a:	1e7a      	subs	r2, r7, #1
   3492c:	4197      	sbcs	r7, r2
   3492e:	4457      	add	r7, sl
   34930:	4557      	cmp	r7, sl
   34932:	4180      	sbcs	r0, r0
   34934:	1909      	adds	r1, r1, r4
   34936:	4244      	negs	r4, r0
   34938:	190c      	adds	r4, r1, r4
   3493a:	0223      	lsls	r3, r4, #8
   3493c:	d53a      	bpl.n	349b4 <__aeabi_dsub+0x244>
   3493e:	4b5d      	ldr	r3, [pc, #372]	; (34ab4 <__aeabi_dsub+0x344>)
   34940:	3601      	adds	r6, #1
   34942:	429e      	cmp	r6, r3
   34944:	d100      	bne.n	34948 <__aeabi_dsub+0x1d8>
   34946:	e14b      	b.n	34be0 <__aeabi_dsub+0x470>
   34948:	2201      	movs	r2, #1
   3494a:	4b5b      	ldr	r3, [pc, #364]	; (34ab8 <__aeabi_dsub+0x348>)
   3494c:	401c      	ands	r4, r3
   3494e:	087b      	lsrs	r3, r7, #1
   34950:	4017      	ands	r7, r2
   34952:	431f      	orrs	r7, r3
   34954:	07e2      	lsls	r2, r4, #31
   34956:	4317      	orrs	r7, r2
   34958:	0864      	lsrs	r4, r4, #1
   3495a:	e78f      	b.n	3487c <__aeabi_dsub+0x10c>
   3495c:	0008      	movs	r0, r1
   3495e:	4310      	orrs	r0, r2
   34960:	d000      	beq.n	34964 <__aeabi_dsub+0x1f4>
   34962:	e724      	b.n	347ae <__aeabi_dsub+0x3e>
   34964:	e721      	b.n	347aa <__aeabi_dsub+0x3a>
   34966:	0023      	movs	r3, r4
   34968:	433b      	orrs	r3, r7
   3496a:	d100      	bne.n	3496e <__aeabi_dsub+0x1fe>
   3496c:	e1b9      	b.n	34ce2 <__aeabi_dsub+0x572>
   3496e:	2280      	movs	r2, #128	; 0x80
   34970:	0312      	lsls	r2, r2, #12
   34972:	4314      	orrs	r4, r2
   34974:	0324      	lsls	r4, r4, #12
   34976:	0b24      	lsrs	r4, r4, #12
   34978:	e79f      	b.n	348ba <__aeabi_dsub+0x14a>
   3497a:	002e      	movs	r6, r5
   3497c:	e77e      	b.n	3487c <__aeabi_dsub+0x10c>
   3497e:	0008      	movs	r0, r1
   34980:	4310      	orrs	r0, r2
   34982:	d100      	bne.n	34986 <__aeabi_dsub+0x216>
   34984:	e0ca      	b.n	34b1c <__aeabi_dsub+0x3ac>
   34986:	1e58      	subs	r0, r3, #1
   34988:	4684      	mov	ip, r0
   3498a:	2800      	cmp	r0, #0
   3498c:	d000      	beq.n	34990 <__aeabi_dsub+0x220>
   3498e:	e0e7      	b.n	34b60 <__aeabi_dsub+0x3f0>
   34990:	4452      	add	r2, sl
   34992:	4552      	cmp	r2, sl
   34994:	4180      	sbcs	r0, r0
   34996:	1864      	adds	r4, r4, r1
   34998:	4240      	negs	r0, r0
   3499a:	1824      	adds	r4, r4, r0
   3499c:	0017      	movs	r7, r2
   3499e:	2601      	movs	r6, #1
   349a0:	0223      	lsls	r3, r4, #8
   349a2:	d507      	bpl.n	349b4 <__aeabi_dsub+0x244>
   349a4:	2602      	movs	r6, #2
   349a6:	e7cf      	b.n	34948 <__aeabi_dsub+0x1d8>
   349a8:	4664      	mov	r4, ip
   349aa:	432c      	orrs	r4, r5
   349ac:	d100      	bne.n	349b0 <__aeabi_dsub+0x240>
   349ae:	e1b3      	b.n	34d18 <__aeabi_dsub+0x5a8>
   349b0:	002c      	movs	r4, r5
   349b2:	4667      	mov	r7, ip
   349b4:	077b      	lsls	r3, r7, #29
   349b6:	d000      	beq.n	349ba <__aeabi_dsub+0x24a>
   349b8:	e762      	b.n	34880 <__aeabi_dsub+0x110>
   349ba:	0763      	lsls	r3, r4, #29
   349bc:	08ff      	lsrs	r7, r7, #3
   349be:	431f      	orrs	r7, r3
   349c0:	2501      	movs	r5, #1
   349c2:	4643      	mov	r3, r8
   349c4:	08e4      	lsrs	r4, r4, #3
   349c6:	401d      	ands	r5, r3
   349c8:	e793      	b.n	348f2 <__aeabi_dsub+0x182>
   349ca:	2d00      	cmp	r5, #0
   349cc:	d178      	bne.n	34ac0 <__aeabi_dsub+0x350>
   349ce:	1c75      	adds	r5, r6, #1
   349d0:	056d      	lsls	r5, r5, #21
   349d2:	0d6d      	lsrs	r5, r5, #21
   349d4:	2d01      	cmp	r5, #1
   349d6:	dc00      	bgt.n	349da <__aeabi_dsub+0x26a>
   349d8:	e0f2      	b.n	34bc0 <__aeabi_dsub+0x450>
   349da:	4650      	mov	r0, sl
   349dc:	1a80      	subs	r0, r0, r2
   349de:	4582      	cmp	sl, r0
   349e0:	41bf      	sbcs	r7, r7
   349e2:	1a65      	subs	r5, r4, r1
   349e4:	427f      	negs	r7, r7
   349e6:	1bed      	subs	r5, r5, r7
   349e8:	4684      	mov	ip, r0
   349ea:	0228      	lsls	r0, r5, #8
   349ec:	d400      	bmi.n	349f0 <__aeabi_dsub+0x280>
   349ee:	e08c      	b.n	34b0a <__aeabi_dsub+0x39a>
   349f0:	4650      	mov	r0, sl
   349f2:	1a17      	subs	r7, r2, r0
   349f4:	42ba      	cmp	r2, r7
   349f6:	4192      	sbcs	r2, r2
   349f8:	1b0c      	subs	r4, r1, r4
   349fa:	4255      	negs	r5, r2
   349fc:	1b65      	subs	r5, r4, r5
   349fe:	4698      	mov	r8, r3
   34a00:	e714      	b.n	3482c <__aeabi_dsub+0xbc>
   34a02:	2501      	movs	r5, #1
   34a04:	4643      	mov	r3, r8
   34a06:	2400      	movs	r4, #0
   34a08:	401d      	ands	r5, r3
   34a0a:	2700      	movs	r7, #0
   34a0c:	e755      	b.n	348ba <__aeabi_dsub+0x14a>
   34a0e:	4c2a      	ldr	r4, [pc, #168]	; (34ab8 <__aeabi_dsub+0x348>)
   34a10:	1af6      	subs	r6, r6, r3
   34a12:	402c      	ands	r4, r5
   34a14:	e732      	b.n	3487c <__aeabi_dsub+0x10c>
   34a16:	003d      	movs	r5, r7
   34a18:	3828      	subs	r0, #40	; 0x28
   34a1a:	4085      	lsls	r5, r0
   34a1c:	2700      	movs	r7, #0
   34a1e:	e717      	b.n	34850 <__aeabi_dsub+0xe0>
   34a20:	0038      	movs	r0, r7
   34a22:	f000 fa27 	bl	34e74 <__clzsi2>
   34a26:	3020      	adds	r0, #32
   34a28:	e706      	b.n	34838 <__aeabi_dsub+0xc8>
   34a2a:	430a      	orrs	r2, r1
   34a2c:	0017      	movs	r7, r2
   34a2e:	2100      	movs	r1, #0
   34a30:	1e7a      	subs	r2, r7, #1
   34a32:	4197      	sbcs	r7, r2
   34a34:	e6ee      	b.n	34814 <__aeabi_dsub+0xa4>
   34a36:	2b00      	cmp	r3, #0
   34a38:	d000      	beq.n	34a3c <__aeabi_dsub+0x2cc>
   34a3a:	e0e5      	b.n	34c08 <__aeabi_dsub+0x498>
   34a3c:	1c73      	adds	r3, r6, #1
   34a3e:	469c      	mov	ip, r3
   34a40:	055b      	lsls	r3, r3, #21
   34a42:	0d5b      	lsrs	r3, r3, #21
   34a44:	2b01      	cmp	r3, #1
   34a46:	dc00      	bgt.n	34a4a <__aeabi_dsub+0x2da>
   34a48:	e09f      	b.n	34b8a <__aeabi_dsub+0x41a>
   34a4a:	4b1a      	ldr	r3, [pc, #104]	; (34ab4 <__aeabi_dsub+0x344>)
   34a4c:	459c      	cmp	ip, r3
   34a4e:	d100      	bne.n	34a52 <__aeabi_dsub+0x2e2>
   34a50:	e0c5      	b.n	34bde <__aeabi_dsub+0x46e>
   34a52:	4452      	add	r2, sl
   34a54:	4552      	cmp	r2, sl
   34a56:	4180      	sbcs	r0, r0
   34a58:	1864      	adds	r4, r4, r1
   34a5a:	4240      	negs	r0, r0
   34a5c:	1824      	adds	r4, r4, r0
   34a5e:	07e7      	lsls	r7, r4, #31
   34a60:	0852      	lsrs	r2, r2, #1
   34a62:	4317      	orrs	r7, r2
   34a64:	0864      	lsrs	r4, r4, #1
   34a66:	4666      	mov	r6, ip
   34a68:	e708      	b.n	3487c <__aeabi_dsub+0x10c>
   34a6a:	4812      	ldr	r0, [pc, #72]	; (34ab4 <__aeabi_dsub+0x344>)
   34a6c:	4285      	cmp	r5, r0
   34a6e:	d100      	bne.n	34a72 <__aeabi_dsub+0x302>
   34a70:	e085      	b.n	34b7e <__aeabi_dsub+0x40e>
   34a72:	001d      	movs	r5, r3
   34a74:	e6bc      	b.n	347f0 <__aeabi_dsub+0x80>
   34a76:	0029      	movs	r1, r5
   34a78:	3e1f      	subs	r6, #31
   34a7a:	40f1      	lsrs	r1, r6
   34a7c:	2b20      	cmp	r3, #32
   34a7e:	d100      	bne.n	34a82 <__aeabi_dsub+0x312>
   34a80:	e07f      	b.n	34b82 <__aeabi_dsub+0x412>
   34a82:	2240      	movs	r2, #64	; 0x40
   34a84:	1ad3      	subs	r3, r2, r3
   34a86:	409d      	lsls	r5, r3
   34a88:	432f      	orrs	r7, r5
   34a8a:	1e7d      	subs	r5, r7, #1
   34a8c:	41af      	sbcs	r7, r5
   34a8e:	2400      	movs	r4, #0
   34a90:	430f      	orrs	r7, r1
   34a92:	2600      	movs	r6, #0
   34a94:	e78e      	b.n	349b4 <__aeabi_dsub+0x244>
   34a96:	002b      	movs	r3, r5
   34a98:	000f      	movs	r7, r1
   34a9a:	3b20      	subs	r3, #32
   34a9c:	40df      	lsrs	r7, r3
   34a9e:	2d20      	cmp	r5, #32
   34aa0:	d071      	beq.n	34b86 <__aeabi_dsub+0x416>
   34aa2:	2340      	movs	r3, #64	; 0x40
   34aa4:	1b5d      	subs	r5, r3, r5
   34aa6:	40a9      	lsls	r1, r5
   34aa8:	430a      	orrs	r2, r1
   34aaa:	1e51      	subs	r1, r2, #1
   34aac:	418a      	sbcs	r2, r1
   34aae:	2100      	movs	r1, #0
   34ab0:	4317      	orrs	r7, r2
   34ab2:	e6af      	b.n	34814 <__aeabi_dsub+0xa4>
   34ab4:	000007ff 	.word	0x000007ff
   34ab8:	ff7fffff 	.word	0xff7fffff
   34abc:	800fffff 	.word	0x800fffff
   34ac0:	2e00      	cmp	r6, #0
   34ac2:	d03e      	beq.n	34b42 <__aeabi_dsub+0x3d2>
   34ac4:	4eb3      	ldr	r6, [pc, #716]	; (34d94 <__aeabi_dsub+0x624>)
   34ac6:	45b4      	cmp	ip, r6
   34ac8:	d045      	beq.n	34b56 <__aeabi_dsub+0x3e6>
   34aca:	2680      	movs	r6, #128	; 0x80
   34acc:	0436      	lsls	r6, r6, #16
   34ace:	426d      	negs	r5, r5
   34ad0:	4334      	orrs	r4, r6
   34ad2:	2d38      	cmp	r5, #56	; 0x38
   34ad4:	dd00      	ble.n	34ad8 <__aeabi_dsub+0x368>
   34ad6:	e0a8      	b.n	34c2a <__aeabi_dsub+0x4ba>
   34ad8:	2d1f      	cmp	r5, #31
   34ada:	dd00      	ble.n	34ade <__aeabi_dsub+0x36e>
   34adc:	e11f      	b.n	34d1e <__aeabi_dsub+0x5ae>
   34ade:	2620      	movs	r6, #32
   34ae0:	0027      	movs	r7, r4
   34ae2:	4650      	mov	r0, sl
   34ae4:	1b76      	subs	r6, r6, r5
   34ae6:	40b7      	lsls	r7, r6
   34ae8:	40e8      	lsrs	r0, r5
   34aea:	4307      	orrs	r7, r0
   34aec:	4650      	mov	r0, sl
   34aee:	40b0      	lsls	r0, r6
   34af0:	1e46      	subs	r6, r0, #1
   34af2:	41b0      	sbcs	r0, r6
   34af4:	40ec      	lsrs	r4, r5
   34af6:	4338      	orrs	r0, r7
   34af8:	1a17      	subs	r7, r2, r0
   34afa:	42ba      	cmp	r2, r7
   34afc:	4192      	sbcs	r2, r2
   34afe:	1b0c      	subs	r4, r1, r4
   34b00:	4252      	negs	r2, r2
   34b02:	1aa4      	subs	r4, r4, r2
   34b04:	4666      	mov	r6, ip
   34b06:	4698      	mov	r8, r3
   34b08:	e68b      	b.n	34822 <__aeabi_dsub+0xb2>
   34b0a:	4664      	mov	r4, ip
   34b0c:	4667      	mov	r7, ip
   34b0e:	432c      	orrs	r4, r5
   34b10:	d000      	beq.n	34b14 <__aeabi_dsub+0x3a4>
   34b12:	e68b      	b.n	3482c <__aeabi_dsub+0xbc>
   34b14:	2500      	movs	r5, #0
   34b16:	2600      	movs	r6, #0
   34b18:	2700      	movs	r7, #0
   34b1a:	e6ea      	b.n	348f2 <__aeabi_dsub+0x182>
   34b1c:	001e      	movs	r6, r3
   34b1e:	e6ad      	b.n	3487c <__aeabi_dsub+0x10c>
   34b20:	2b1f      	cmp	r3, #31
   34b22:	dc60      	bgt.n	34be6 <__aeabi_dsub+0x476>
   34b24:	2720      	movs	r7, #32
   34b26:	1af8      	subs	r0, r7, r3
   34b28:	000f      	movs	r7, r1
   34b2a:	4684      	mov	ip, r0
   34b2c:	4087      	lsls	r7, r0
   34b2e:	0010      	movs	r0, r2
   34b30:	40d8      	lsrs	r0, r3
   34b32:	4307      	orrs	r7, r0
   34b34:	4660      	mov	r0, ip
   34b36:	4082      	lsls	r2, r0
   34b38:	1e50      	subs	r0, r2, #1
   34b3a:	4182      	sbcs	r2, r0
   34b3c:	40d9      	lsrs	r1, r3
   34b3e:	4317      	orrs	r7, r2
   34b40:	e6f5      	b.n	3492e <__aeabi_dsub+0x1be>
   34b42:	0026      	movs	r6, r4
   34b44:	4650      	mov	r0, sl
   34b46:	4306      	orrs	r6, r0
   34b48:	d005      	beq.n	34b56 <__aeabi_dsub+0x3e6>
   34b4a:	43ed      	mvns	r5, r5
   34b4c:	2d00      	cmp	r5, #0
   34b4e:	d0d3      	beq.n	34af8 <__aeabi_dsub+0x388>
   34b50:	4e90      	ldr	r6, [pc, #576]	; (34d94 <__aeabi_dsub+0x624>)
   34b52:	45b4      	cmp	ip, r6
   34b54:	d1bd      	bne.n	34ad2 <__aeabi_dsub+0x362>
   34b56:	000c      	movs	r4, r1
   34b58:	0017      	movs	r7, r2
   34b5a:	4666      	mov	r6, ip
   34b5c:	4698      	mov	r8, r3
   34b5e:	e68d      	b.n	3487c <__aeabi_dsub+0x10c>
   34b60:	488c      	ldr	r0, [pc, #560]	; (34d94 <__aeabi_dsub+0x624>)
   34b62:	4283      	cmp	r3, r0
   34b64:	d00b      	beq.n	34b7e <__aeabi_dsub+0x40e>
   34b66:	4663      	mov	r3, ip
   34b68:	e6d9      	b.n	3491e <__aeabi_dsub+0x1ae>
   34b6a:	2d00      	cmp	r5, #0
   34b6c:	d000      	beq.n	34b70 <__aeabi_dsub+0x400>
   34b6e:	e096      	b.n	34c9e <__aeabi_dsub+0x52e>
   34b70:	0008      	movs	r0, r1
   34b72:	4310      	orrs	r0, r2
   34b74:	d100      	bne.n	34b78 <__aeabi_dsub+0x408>
   34b76:	e0e2      	b.n	34d3e <__aeabi_dsub+0x5ce>
   34b78:	000c      	movs	r4, r1
   34b7a:	0017      	movs	r7, r2
   34b7c:	4698      	mov	r8, r3
   34b7e:	4e85      	ldr	r6, [pc, #532]	; (34d94 <__aeabi_dsub+0x624>)
   34b80:	e67c      	b.n	3487c <__aeabi_dsub+0x10c>
   34b82:	2500      	movs	r5, #0
   34b84:	e780      	b.n	34a88 <__aeabi_dsub+0x318>
   34b86:	2100      	movs	r1, #0
   34b88:	e78e      	b.n	34aa8 <__aeabi_dsub+0x338>
   34b8a:	0023      	movs	r3, r4
   34b8c:	4650      	mov	r0, sl
   34b8e:	4303      	orrs	r3, r0
   34b90:	2e00      	cmp	r6, #0
   34b92:	d000      	beq.n	34b96 <__aeabi_dsub+0x426>
   34b94:	e0a8      	b.n	34ce8 <__aeabi_dsub+0x578>
   34b96:	2b00      	cmp	r3, #0
   34b98:	d100      	bne.n	34b9c <__aeabi_dsub+0x42c>
   34b9a:	e0de      	b.n	34d5a <__aeabi_dsub+0x5ea>
   34b9c:	000b      	movs	r3, r1
   34b9e:	4313      	orrs	r3, r2
   34ba0:	d100      	bne.n	34ba4 <__aeabi_dsub+0x434>
   34ba2:	e66b      	b.n	3487c <__aeabi_dsub+0x10c>
   34ba4:	4452      	add	r2, sl
   34ba6:	4552      	cmp	r2, sl
   34ba8:	4180      	sbcs	r0, r0
   34baa:	1864      	adds	r4, r4, r1
   34bac:	4240      	negs	r0, r0
   34bae:	1824      	adds	r4, r4, r0
   34bb0:	0017      	movs	r7, r2
   34bb2:	0223      	lsls	r3, r4, #8
   34bb4:	d400      	bmi.n	34bb8 <__aeabi_dsub+0x448>
   34bb6:	e6fd      	b.n	349b4 <__aeabi_dsub+0x244>
   34bb8:	4b77      	ldr	r3, [pc, #476]	; (34d98 <__aeabi_dsub+0x628>)
   34bba:	4666      	mov	r6, ip
   34bbc:	401c      	ands	r4, r3
   34bbe:	e65d      	b.n	3487c <__aeabi_dsub+0x10c>
   34bc0:	0025      	movs	r5, r4
   34bc2:	4650      	mov	r0, sl
   34bc4:	4305      	orrs	r5, r0
   34bc6:	2e00      	cmp	r6, #0
   34bc8:	d1cf      	bne.n	34b6a <__aeabi_dsub+0x3fa>
   34bca:	2d00      	cmp	r5, #0
   34bcc:	d14f      	bne.n	34c6e <__aeabi_dsub+0x4fe>
   34bce:	000c      	movs	r4, r1
   34bd0:	4314      	orrs	r4, r2
   34bd2:	d100      	bne.n	34bd6 <__aeabi_dsub+0x466>
   34bd4:	e0a0      	b.n	34d18 <__aeabi_dsub+0x5a8>
   34bd6:	000c      	movs	r4, r1
   34bd8:	0017      	movs	r7, r2
   34bda:	4698      	mov	r8, r3
   34bdc:	e64e      	b.n	3487c <__aeabi_dsub+0x10c>
   34bde:	4666      	mov	r6, ip
   34be0:	2400      	movs	r4, #0
   34be2:	2700      	movs	r7, #0
   34be4:	e685      	b.n	348f2 <__aeabi_dsub+0x182>
   34be6:	001f      	movs	r7, r3
   34be8:	0008      	movs	r0, r1
   34bea:	3f20      	subs	r7, #32
   34bec:	40f8      	lsrs	r0, r7
   34bee:	0007      	movs	r7, r0
   34bf0:	2b20      	cmp	r3, #32
   34bf2:	d100      	bne.n	34bf6 <__aeabi_dsub+0x486>
   34bf4:	e08e      	b.n	34d14 <__aeabi_dsub+0x5a4>
   34bf6:	2040      	movs	r0, #64	; 0x40
   34bf8:	1ac3      	subs	r3, r0, r3
   34bfa:	4099      	lsls	r1, r3
   34bfc:	430a      	orrs	r2, r1
   34bfe:	1e51      	subs	r1, r2, #1
   34c00:	418a      	sbcs	r2, r1
   34c02:	2100      	movs	r1, #0
   34c04:	4317      	orrs	r7, r2
   34c06:	e692      	b.n	3492e <__aeabi_dsub+0x1be>
   34c08:	2e00      	cmp	r6, #0
   34c0a:	d114      	bne.n	34c36 <__aeabi_dsub+0x4c6>
   34c0c:	0026      	movs	r6, r4
   34c0e:	4650      	mov	r0, sl
   34c10:	4306      	orrs	r6, r0
   34c12:	d062      	beq.n	34cda <__aeabi_dsub+0x56a>
   34c14:	43db      	mvns	r3, r3
   34c16:	2b00      	cmp	r3, #0
   34c18:	d15c      	bne.n	34cd4 <__aeabi_dsub+0x564>
   34c1a:	1887      	adds	r7, r0, r2
   34c1c:	4297      	cmp	r7, r2
   34c1e:	4192      	sbcs	r2, r2
   34c20:	1864      	adds	r4, r4, r1
   34c22:	4252      	negs	r2, r2
   34c24:	18a4      	adds	r4, r4, r2
   34c26:	4666      	mov	r6, ip
   34c28:	e687      	b.n	3493a <__aeabi_dsub+0x1ca>
   34c2a:	4650      	mov	r0, sl
   34c2c:	4320      	orrs	r0, r4
   34c2e:	1e44      	subs	r4, r0, #1
   34c30:	41a0      	sbcs	r0, r4
   34c32:	2400      	movs	r4, #0
   34c34:	e760      	b.n	34af8 <__aeabi_dsub+0x388>
   34c36:	4e57      	ldr	r6, [pc, #348]	; (34d94 <__aeabi_dsub+0x624>)
   34c38:	45b4      	cmp	ip, r6
   34c3a:	d04e      	beq.n	34cda <__aeabi_dsub+0x56a>
   34c3c:	2680      	movs	r6, #128	; 0x80
   34c3e:	0436      	lsls	r6, r6, #16
   34c40:	425b      	negs	r3, r3
   34c42:	4334      	orrs	r4, r6
   34c44:	2b38      	cmp	r3, #56	; 0x38
   34c46:	dd00      	ble.n	34c4a <__aeabi_dsub+0x4da>
   34c48:	e07f      	b.n	34d4a <__aeabi_dsub+0x5da>
   34c4a:	2b1f      	cmp	r3, #31
   34c4c:	dd00      	ble.n	34c50 <__aeabi_dsub+0x4e0>
   34c4e:	e08b      	b.n	34d68 <__aeabi_dsub+0x5f8>
   34c50:	2620      	movs	r6, #32
   34c52:	0027      	movs	r7, r4
   34c54:	4650      	mov	r0, sl
   34c56:	1af6      	subs	r6, r6, r3
   34c58:	40b7      	lsls	r7, r6
   34c5a:	40d8      	lsrs	r0, r3
   34c5c:	4307      	orrs	r7, r0
   34c5e:	4650      	mov	r0, sl
   34c60:	40b0      	lsls	r0, r6
   34c62:	1e46      	subs	r6, r0, #1
   34c64:	41b0      	sbcs	r0, r6
   34c66:	4307      	orrs	r7, r0
   34c68:	40dc      	lsrs	r4, r3
   34c6a:	18bf      	adds	r7, r7, r2
   34c6c:	e7d6      	b.n	34c1c <__aeabi_dsub+0x4ac>
   34c6e:	000d      	movs	r5, r1
   34c70:	4315      	orrs	r5, r2
   34c72:	d100      	bne.n	34c76 <__aeabi_dsub+0x506>
   34c74:	e602      	b.n	3487c <__aeabi_dsub+0x10c>
   34c76:	4650      	mov	r0, sl
   34c78:	1a80      	subs	r0, r0, r2
   34c7a:	4582      	cmp	sl, r0
   34c7c:	41bf      	sbcs	r7, r7
   34c7e:	1a65      	subs	r5, r4, r1
   34c80:	427f      	negs	r7, r7
   34c82:	1bed      	subs	r5, r5, r7
   34c84:	4684      	mov	ip, r0
   34c86:	0228      	lsls	r0, r5, #8
   34c88:	d400      	bmi.n	34c8c <__aeabi_dsub+0x51c>
   34c8a:	e68d      	b.n	349a8 <__aeabi_dsub+0x238>
   34c8c:	4650      	mov	r0, sl
   34c8e:	1a17      	subs	r7, r2, r0
   34c90:	42ba      	cmp	r2, r7
   34c92:	4192      	sbcs	r2, r2
   34c94:	1b0c      	subs	r4, r1, r4
   34c96:	4252      	negs	r2, r2
   34c98:	1aa4      	subs	r4, r4, r2
   34c9a:	4698      	mov	r8, r3
   34c9c:	e5ee      	b.n	3487c <__aeabi_dsub+0x10c>
   34c9e:	000d      	movs	r5, r1
   34ca0:	4315      	orrs	r5, r2
   34ca2:	d100      	bne.n	34ca6 <__aeabi_dsub+0x536>
   34ca4:	e76b      	b.n	34b7e <__aeabi_dsub+0x40e>
   34ca6:	4650      	mov	r0, sl
   34ca8:	0767      	lsls	r7, r4, #29
   34caa:	08c0      	lsrs	r0, r0, #3
   34cac:	4307      	orrs	r7, r0
   34cae:	2080      	movs	r0, #128	; 0x80
   34cb0:	08e4      	lsrs	r4, r4, #3
   34cb2:	0300      	lsls	r0, r0, #12
   34cb4:	4204      	tst	r4, r0
   34cb6:	d007      	beq.n	34cc8 <__aeabi_dsub+0x558>
   34cb8:	08cd      	lsrs	r5, r1, #3
   34cba:	4205      	tst	r5, r0
   34cbc:	d104      	bne.n	34cc8 <__aeabi_dsub+0x558>
   34cbe:	002c      	movs	r4, r5
   34cc0:	4698      	mov	r8, r3
   34cc2:	08d7      	lsrs	r7, r2, #3
   34cc4:	0749      	lsls	r1, r1, #29
   34cc6:	430f      	orrs	r7, r1
   34cc8:	0f7b      	lsrs	r3, r7, #29
   34cca:	00e4      	lsls	r4, r4, #3
   34ccc:	431c      	orrs	r4, r3
   34cce:	00ff      	lsls	r7, r7, #3
   34cd0:	4e30      	ldr	r6, [pc, #192]	; (34d94 <__aeabi_dsub+0x624>)
   34cd2:	e5d3      	b.n	3487c <__aeabi_dsub+0x10c>
   34cd4:	4e2f      	ldr	r6, [pc, #188]	; (34d94 <__aeabi_dsub+0x624>)
   34cd6:	45b4      	cmp	ip, r6
   34cd8:	d1b4      	bne.n	34c44 <__aeabi_dsub+0x4d4>
   34cda:	000c      	movs	r4, r1
   34cdc:	0017      	movs	r7, r2
   34cde:	4666      	mov	r6, ip
   34ce0:	e5cc      	b.n	3487c <__aeabi_dsub+0x10c>
   34ce2:	2700      	movs	r7, #0
   34ce4:	2400      	movs	r4, #0
   34ce6:	e5e8      	b.n	348ba <__aeabi_dsub+0x14a>
   34ce8:	2b00      	cmp	r3, #0
   34cea:	d039      	beq.n	34d60 <__aeabi_dsub+0x5f0>
   34cec:	000b      	movs	r3, r1
   34cee:	4313      	orrs	r3, r2
   34cf0:	d100      	bne.n	34cf4 <__aeabi_dsub+0x584>
   34cf2:	e744      	b.n	34b7e <__aeabi_dsub+0x40e>
   34cf4:	08c0      	lsrs	r0, r0, #3
   34cf6:	0767      	lsls	r7, r4, #29
   34cf8:	4307      	orrs	r7, r0
   34cfa:	2080      	movs	r0, #128	; 0x80
   34cfc:	08e4      	lsrs	r4, r4, #3
   34cfe:	0300      	lsls	r0, r0, #12
   34d00:	4204      	tst	r4, r0
   34d02:	d0e1      	beq.n	34cc8 <__aeabi_dsub+0x558>
   34d04:	08cb      	lsrs	r3, r1, #3
   34d06:	4203      	tst	r3, r0
   34d08:	d1de      	bne.n	34cc8 <__aeabi_dsub+0x558>
   34d0a:	08d7      	lsrs	r7, r2, #3
   34d0c:	0749      	lsls	r1, r1, #29
   34d0e:	430f      	orrs	r7, r1
   34d10:	001c      	movs	r4, r3
   34d12:	e7d9      	b.n	34cc8 <__aeabi_dsub+0x558>
   34d14:	2100      	movs	r1, #0
   34d16:	e771      	b.n	34bfc <__aeabi_dsub+0x48c>
   34d18:	2500      	movs	r5, #0
   34d1a:	2700      	movs	r7, #0
   34d1c:	e5e9      	b.n	348f2 <__aeabi_dsub+0x182>
   34d1e:	002e      	movs	r6, r5
   34d20:	0027      	movs	r7, r4
   34d22:	3e20      	subs	r6, #32
   34d24:	40f7      	lsrs	r7, r6
   34d26:	2d20      	cmp	r5, #32
   34d28:	d02f      	beq.n	34d8a <__aeabi_dsub+0x61a>
   34d2a:	2640      	movs	r6, #64	; 0x40
   34d2c:	1b75      	subs	r5, r6, r5
   34d2e:	40ac      	lsls	r4, r5
   34d30:	4650      	mov	r0, sl
   34d32:	4320      	orrs	r0, r4
   34d34:	1e44      	subs	r4, r0, #1
   34d36:	41a0      	sbcs	r0, r4
   34d38:	2400      	movs	r4, #0
   34d3a:	4338      	orrs	r0, r7
   34d3c:	e6dc      	b.n	34af8 <__aeabi_dsub+0x388>
   34d3e:	2480      	movs	r4, #128	; 0x80
   34d40:	2500      	movs	r5, #0
   34d42:	0324      	lsls	r4, r4, #12
   34d44:	4e13      	ldr	r6, [pc, #76]	; (34d94 <__aeabi_dsub+0x624>)
   34d46:	2700      	movs	r7, #0
   34d48:	e5d3      	b.n	348f2 <__aeabi_dsub+0x182>
   34d4a:	4650      	mov	r0, sl
   34d4c:	4320      	orrs	r0, r4
   34d4e:	0007      	movs	r7, r0
   34d50:	1e78      	subs	r0, r7, #1
   34d52:	4187      	sbcs	r7, r0
   34d54:	2400      	movs	r4, #0
   34d56:	18bf      	adds	r7, r7, r2
   34d58:	e760      	b.n	34c1c <__aeabi_dsub+0x4ac>
   34d5a:	000c      	movs	r4, r1
   34d5c:	0017      	movs	r7, r2
   34d5e:	e58d      	b.n	3487c <__aeabi_dsub+0x10c>
   34d60:	000c      	movs	r4, r1
   34d62:	0017      	movs	r7, r2
   34d64:	4e0b      	ldr	r6, [pc, #44]	; (34d94 <__aeabi_dsub+0x624>)
   34d66:	e589      	b.n	3487c <__aeabi_dsub+0x10c>
   34d68:	001e      	movs	r6, r3
   34d6a:	0027      	movs	r7, r4
   34d6c:	3e20      	subs	r6, #32
   34d6e:	40f7      	lsrs	r7, r6
   34d70:	2b20      	cmp	r3, #32
   34d72:	d00c      	beq.n	34d8e <__aeabi_dsub+0x61e>
   34d74:	2640      	movs	r6, #64	; 0x40
   34d76:	1af3      	subs	r3, r6, r3
   34d78:	409c      	lsls	r4, r3
   34d7a:	4650      	mov	r0, sl
   34d7c:	4320      	orrs	r0, r4
   34d7e:	1e44      	subs	r4, r0, #1
   34d80:	41a0      	sbcs	r0, r4
   34d82:	4307      	orrs	r7, r0
   34d84:	2400      	movs	r4, #0
   34d86:	18bf      	adds	r7, r7, r2
   34d88:	e748      	b.n	34c1c <__aeabi_dsub+0x4ac>
   34d8a:	2400      	movs	r4, #0
   34d8c:	e7d0      	b.n	34d30 <__aeabi_dsub+0x5c0>
   34d8e:	2400      	movs	r4, #0
   34d90:	e7f3      	b.n	34d7a <__aeabi_dsub+0x60a>
   34d92:	46c0      	nop			; (mov r8, r8)
   34d94:	000007ff 	.word	0x000007ff
   34d98:	ff7fffff 	.word	0xff7fffff

00034d9c <__aeabi_d2iz>:
   34d9c:	b530      	push	{r4, r5, lr}
   34d9e:	4d13      	ldr	r5, [pc, #76]	; (34dec <__aeabi_d2iz+0x50>)
   34da0:	030a      	lsls	r2, r1, #12
   34da2:	004b      	lsls	r3, r1, #1
   34da4:	0b12      	lsrs	r2, r2, #12
   34da6:	0d5b      	lsrs	r3, r3, #21
   34da8:	0fc9      	lsrs	r1, r1, #31
   34daa:	2400      	movs	r4, #0
   34dac:	42ab      	cmp	r3, r5
   34dae:	dd10      	ble.n	34dd2 <__aeabi_d2iz+0x36>
   34db0:	4c0f      	ldr	r4, [pc, #60]	; (34df0 <__aeabi_d2iz+0x54>)
   34db2:	42a3      	cmp	r3, r4
   34db4:	dc0f      	bgt.n	34dd6 <__aeabi_d2iz+0x3a>
   34db6:	2480      	movs	r4, #128	; 0x80
   34db8:	4d0e      	ldr	r5, [pc, #56]	; (34df4 <__aeabi_d2iz+0x58>)
   34dba:	0364      	lsls	r4, r4, #13
   34dbc:	4322      	orrs	r2, r4
   34dbe:	1aed      	subs	r5, r5, r3
   34dc0:	2d1f      	cmp	r5, #31
   34dc2:	dd0b      	ble.n	34ddc <__aeabi_d2iz+0x40>
   34dc4:	480c      	ldr	r0, [pc, #48]	; (34df8 <__aeabi_d2iz+0x5c>)
   34dc6:	1ac3      	subs	r3, r0, r3
   34dc8:	40da      	lsrs	r2, r3
   34dca:	4254      	negs	r4, r2
   34dcc:	2900      	cmp	r1, #0
   34dce:	d100      	bne.n	34dd2 <__aeabi_d2iz+0x36>
   34dd0:	0014      	movs	r4, r2
   34dd2:	0020      	movs	r0, r4
   34dd4:	bd30      	pop	{r4, r5, pc}
   34dd6:	4b09      	ldr	r3, [pc, #36]	; (34dfc <__aeabi_d2iz+0x60>)
   34dd8:	18cc      	adds	r4, r1, r3
   34dda:	e7fa      	b.n	34dd2 <__aeabi_d2iz+0x36>
   34ddc:	4c08      	ldr	r4, [pc, #32]	; (34e00 <__aeabi_d2iz+0x64>)
   34dde:	40e8      	lsrs	r0, r5
   34de0:	46a4      	mov	ip, r4
   34de2:	4463      	add	r3, ip
   34de4:	409a      	lsls	r2, r3
   34de6:	4302      	orrs	r2, r0
   34de8:	e7ef      	b.n	34dca <__aeabi_d2iz+0x2e>
   34dea:	46c0      	nop			; (mov r8, r8)
   34dec:	000003fe 	.word	0x000003fe
   34df0:	0000041d 	.word	0x0000041d
   34df4:	00000433 	.word	0x00000433
   34df8:	00000413 	.word	0x00000413
   34dfc:	7fffffff 	.word	0x7fffffff
   34e00:	fffffbed 	.word	0xfffffbed

00034e04 <__aeabi_ui2d>:
   34e04:	b510      	push	{r4, lr}
   34e06:	1e04      	subs	r4, r0, #0
   34e08:	d028      	beq.n	34e5c <__aeabi_ui2d+0x58>
   34e0a:	f000 f833 	bl	34e74 <__clzsi2>
   34e0e:	4b15      	ldr	r3, [pc, #84]	; (34e64 <__aeabi_ui2d+0x60>)
   34e10:	4a15      	ldr	r2, [pc, #84]	; (34e68 <__aeabi_ui2d+0x64>)
   34e12:	1a1b      	subs	r3, r3, r0
   34e14:	1ad2      	subs	r2, r2, r3
   34e16:	2a1f      	cmp	r2, #31
   34e18:	dd15      	ble.n	34e46 <__aeabi_ui2d+0x42>
   34e1a:	4a14      	ldr	r2, [pc, #80]	; (34e6c <__aeabi_ui2d+0x68>)
   34e1c:	1ad2      	subs	r2, r2, r3
   34e1e:	4094      	lsls	r4, r2
   34e20:	2200      	movs	r2, #0
   34e22:	0324      	lsls	r4, r4, #12
   34e24:	055b      	lsls	r3, r3, #21
   34e26:	0b24      	lsrs	r4, r4, #12
   34e28:	0d5b      	lsrs	r3, r3, #21
   34e2a:	2100      	movs	r1, #0
   34e2c:	0010      	movs	r0, r2
   34e2e:	0324      	lsls	r4, r4, #12
   34e30:	0d0a      	lsrs	r2, r1, #20
   34e32:	0b24      	lsrs	r4, r4, #12
   34e34:	0512      	lsls	r2, r2, #20
   34e36:	4322      	orrs	r2, r4
   34e38:	4c0d      	ldr	r4, [pc, #52]	; (34e70 <__aeabi_ui2d+0x6c>)
   34e3a:	051b      	lsls	r3, r3, #20
   34e3c:	4022      	ands	r2, r4
   34e3e:	4313      	orrs	r3, r2
   34e40:	005b      	lsls	r3, r3, #1
   34e42:	0859      	lsrs	r1, r3, #1
   34e44:	bd10      	pop	{r4, pc}
   34e46:	0021      	movs	r1, r4
   34e48:	4091      	lsls	r1, r2
   34e4a:	000a      	movs	r2, r1
   34e4c:	210b      	movs	r1, #11
   34e4e:	1a08      	subs	r0, r1, r0
   34e50:	40c4      	lsrs	r4, r0
   34e52:	055b      	lsls	r3, r3, #21
   34e54:	0324      	lsls	r4, r4, #12
   34e56:	0b24      	lsrs	r4, r4, #12
   34e58:	0d5b      	lsrs	r3, r3, #21
   34e5a:	e7e6      	b.n	34e2a <__aeabi_ui2d+0x26>
   34e5c:	2300      	movs	r3, #0
   34e5e:	2400      	movs	r4, #0
   34e60:	2200      	movs	r2, #0
   34e62:	e7e2      	b.n	34e2a <__aeabi_ui2d+0x26>
   34e64:	0000041e 	.word	0x0000041e
   34e68:	00000433 	.word	0x00000433
   34e6c:	00000413 	.word	0x00000413
   34e70:	800fffff 	.word	0x800fffff

00034e74 <__clzsi2>:
   34e74:	211c      	movs	r1, #28
   34e76:	2301      	movs	r3, #1
   34e78:	041b      	lsls	r3, r3, #16
   34e7a:	4298      	cmp	r0, r3
   34e7c:	d301      	bcc.n	34e82 <__clzsi2+0xe>
   34e7e:	0c00      	lsrs	r0, r0, #16
   34e80:	3910      	subs	r1, #16
   34e82:	0a1b      	lsrs	r3, r3, #8
   34e84:	4298      	cmp	r0, r3
   34e86:	d301      	bcc.n	34e8c <__clzsi2+0x18>
   34e88:	0a00      	lsrs	r0, r0, #8
   34e8a:	3908      	subs	r1, #8
   34e8c:	091b      	lsrs	r3, r3, #4
   34e8e:	4298      	cmp	r0, r3
   34e90:	d301      	bcc.n	34e96 <__clzsi2+0x22>
   34e92:	0900      	lsrs	r0, r0, #4
   34e94:	3904      	subs	r1, #4
   34e96:	a202      	add	r2, pc, #8	; (adr r2, 34ea0 <__clzsi2+0x2c>)
   34e98:	5c10      	ldrb	r0, [r2, r0]
   34e9a:	1840      	adds	r0, r0, r1
   34e9c:	4770      	bx	lr
   34e9e:	46c0      	nop			; (mov r8, r8)
   34ea0:	02020304 	.word	0x02020304
   34ea4:	01010101 	.word	0x01010101
	...

00034eb0 <atoi>:
   34eb0:	b510      	push	{r4, lr}
   34eb2:	220a      	movs	r2, #10
   34eb4:	2100      	movs	r1, #0
   34eb6:	f000 fb0d 	bl	354d4 <strtol>
   34eba:	bd10      	pop	{r4, pc}

00034ebc <__libc_init_array>:
   34ebc:	b570      	push	{r4, r5, r6, lr}
   34ebe:	2600      	movs	r6, #0
   34ec0:	4d0c      	ldr	r5, [pc, #48]	; (34ef4 <__libc_init_array+0x38>)
   34ec2:	4c0d      	ldr	r4, [pc, #52]	; (34ef8 <__libc_init_array+0x3c>)
   34ec4:	1b64      	subs	r4, r4, r5
   34ec6:	10a4      	asrs	r4, r4, #2
   34ec8:	42a6      	cmp	r6, r4
   34eca:	d109      	bne.n	34ee0 <__libc_init_array+0x24>
   34ecc:	2600      	movs	r6, #0
   34ece:	f005 fe57 	bl	3ab80 <_init>
   34ed2:	4d0a      	ldr	r5, [pc, #40]	; (34efc <__libc_init_array+0x40>)
   34ed4:	4c0a      	ldr	r4, [pc, #40]	; (34f00 <__libc_init_array+0x44>)
   34ed6:	1b64      	subs	r4, r4, r5
   34ed8:	10a4      	asrs	r4, r4, #2
   34eda:	42a6      	cmp	r6, r4
   34edc:	d105      	bne.n	34eea <__libc_init_array+0x2e>
   34ede:	bd70      	pop	{r4, r5, r6, pc}
   34ee0:	00b3      	lsls	r3, r6, #2
   34ee2:	58eb      	ldr	r3, [r5, r3]
   34ee4:	4798      	blx	r3
   34ee6:	3601      	adds	r6, #1
   34ee8:	e7ee      	b.n	34ec8 <__libc_init_array+0xc>
   34eea:	00b3      	lsls	r3, r6, #2
   34eec:	58eb      	ldr	r3, [r5, r3]
   34eee:	4798      	blx	r3
   34ef0:	3601      	adds	r6, #1
   34ef2:	e7f2      	b.n	34eda <__libc_init_array+0x1e>
   34ef4:	0003ab8c 	.word	0x0003ab8c
   34ef8:	0003ab8c 	.word	0x0003ab8c
   34efc:	0003ab8c 	.word	0x0003ab8c
   34f00:	0003ab90 	.word	0x0003ab90

00034f04 <malloc>:
   34f04:	b510      	push	{r4, lr}
   34f06:	4b03      	ldr	r3, [pc, #12]	; (34f14 <malloc+0x10>)
   34f08:	0001      	movs	r1, r0
   34f0a:	6818      	ldr	r0, [r3, #0]
   34f0c:	f000 f87c 	bl	35008 <_malloc_r>
   34f10:	bd10      	pop	{r4, pc}
   34f12:	46c0      	nop			; (mov r8, r8)
   34f14:	20000130 	.word	0x20000130

00034f18 <free>:
   34f18:	b510      	push	{r4, lr}
   34f1a:	4b03      	ldr	r3, [pc, #12]	; (34f28 <free+0x10>)
   34f1c:	0001      	movs	r1, r0
   34f1e:	6818      	ldr	r0, [r3, #0]
   34f20:	f000 f828 	bl	34f74 <_free_r>
   34f24:	bd10      	pop	{r4, pc}
   34f26:	46c0      	nop			; (mov r8, r8)
   34f28:	20000130 	.word	0x20000130

00034f2c <memcpy>:
   34f2c:	2300      	movs	r3, #0
   34f2e:	b510      	push	{r4, lr}
   34f30:	429a      	cmp	r2, r3
   34f32:	d100      	bne.n	34f36 <memcpy+0xa>
   34f34:	bd10      	pop	{r4, pc}
   34f36:	5ccc      	ldrb	r4, [r1, r3]
   34f38:	54c4      	strb	r4, [r0, r3]
   34f3a:	3301      	adds	r3, #1
   34f3c:	e7f8      	b.n	34f30 <memcpy+0x4>

00034f3e <memmove>:
   34f3e:	b510      	push	{r4, lr}
   34f40:	4288      	cmp	r0, r1
   34f42:	d902      	bls.n	34f4a <memmove+0xc>
   34f44:	188b      	adds	r3, r1, r2
   34f46:	4298      	cmp	r0, r3
   34f48:	d308      	bcc.n	34f5c <memmove+0x1e>
   34f4a:	2300      	movs	r3, #0
   34f4c:	429a      	cmp	r2, r3
   34f4e:	d007      	beq.n	34f60 <memmove+0x22>
   34f50:	5ccc      	ldrb	r4, [r1, r3]
   34f52:	54c4      	strb	r4, [r0, r3]
   34f54:	3301      	adds	r3, #1
   34f56:	e7f9      	b.n	34f4c <memmove+0xe>
   34f58:	5c8b      	ldrb	r3, [r1, r2]
   34f5a:	5483      	strb	r3, [r0, r2]
   34f5c:	3a01      	subs	r2, #1
   34f5e:	d2fb      	bcs.n	34f58 <memmove+0x1a>
   34f60:	bd10      	pop	{r4, pc}

00034f62 <memset>:
   34f62:	0003      	movs	r3, r0
   34f64:	1882      	adds	r2, r0, r2
   34f66:	4293      	cmp	r3, r2
   34f68:	d100      	bne.n	34f6c <memset+0xa>
   34f6a:	4770      	bx	lr
   34f6c:	7019      	strb	r1, [r3, #0]
   34f6e:	3301      	adds	r3, #1
   34f70:	e7f9      	b.n	34f66 <memset+0x4>
	...

00034f74 <_free_r>:
   34f74:	b570      	push	{r4, r5, r6, lr}
   34f76:	0005      	movs	r5, r0
   34f78:	2900      	cmp	r1, #0
   34f7a:	d010      	beq.n	34f9e <_free_r+0x2a>
   34f7c:	1f0c      	subs	r4, r1, #4
   34f7e:	6823      	ldr	r3, [r4, #0]
   34f80:	2b00      	cmp	r3, #0
   34f82:	da00      	bge.n	34f86 <_free_r+0x12>
   34f84:	18e4      	adds	r4, r4, r3
   34f86:	0028      	movs	r0, r5
   34f88:	f000 fdd8 	bl	35b3c <__malloc_lock>
   34f8c:	4a1d      	ldr	r2, [pc, #116]	; (35004 <_free_r+0x90>)
   34f8e:	6813      	ldr	r3, [r2, #0]
   34f90:	2b00      	cmp	r3, #0
   34f92:	d105      	bne.n	34fa0 <_free_r+0x2c>
   34f94:	6063      	str	r3, [r4, #4]
   34f96:	6014      	str	r4, [r2, #0]
   34f98:	0028      	movs	r0, r5
   34f9a:	f000 fdd0 	bl	35b3e <__malloc_unlock>
   34f9e:	bd70      	pop	{r4, r5, r6, pc}
   34fa0:	42a3      	cmp	r3, r4
   34fa2:	d909      	bls.n	34fb8 <_free_r+0x44>
   34fa4:	6821      	ldr	r1, [r4, #0]
   34fa6:	1860      	adds	r0, r4, r1
   34fa8:	4283      	cmp	r3, r0
   34faa:	d1f3      	bne.n	34f94 <_free_r+0x20>
   34fac:	6818      	ldr	r0, [r3, #0]
   34fae:	685b      	ldr	r3, [r3, #4]
   34fb0:	1841      	adds	r1, r0, r1
   34fb2:	6021      	str	r1, [r4, #0]
   34fb4:	e7ee      	b.n	34f94 <_free_r+0x20>
   34fb6:	0013      	movs	r3, r2
   34fb8:	685a      	ldr	r2, [r3, #4]
   34fba:	2a00      	cmp	r2, #0
   34fbc:	d001      	beq.n	34fc2 <_free_r+0x4e>
   34fbe:	42a2      	cmp	r2, r4
   34fc0:	d9f9      	bls.n	34fb6 <_free_r+0x42>
   34fc2:	6819      	ldr	r1, [r3, #0]
   34fc4:	1858      	adds	r0, r3, r1
   34fc6:	42a0      	cmp	r0, r4
   34fc8:	d10b      	bne.n	34fe2 <_free_r+0x6e>
   34fca:	6820      	ldr	r0, [r4, #0]
   34fcc:	1809      	adds	r1, r1, r0
   34fce:	1858      	adds	r0, r3, r1
   34fd0:	6019      	str	r1, [r3, #0]
   34fd2:	4282      	cmp	r2, r0
   34fd4:	d1e0      	bne.n	34f98 <_free_r+0x24>
   34fd6:	6810      	ldr	r0, [r2, #0]
   34fd8:	6852      	ldr	r2, [r2, #4]
   34fda:	1841      	adds	r1, r0, r1
   34fdc:	6019      	str	r1, [r3, #0]
   34fde:	605a      	str	r2, [r3, #4]
   34fe0:	e7da      	b.n	34f98 <_free_r+0x24>
   34fe2:	42a0      	cmp	r0, r4
   34fe4:	d902      	bls.n	34fec <_free_r+0x78>
   34fe6:	230c      	movs	r3, #12
   34fe8:	602b      	str	r3, [r5, #0]
   34fea:	e7d5      	b.n	34f98 <_free_r+0x24>
   34fec:	6821      	ldr	r1, [r4, #0]
   34fee:	1860      	adds	r0, r4, r1
   34ff0:	4282      	cmp	r2, r0
   34ff2:	d103      	bne.n	34ffc <_free_r+0x88>
   34ff4:	6810      	ldr	r0, [r2, #0]
   34ff6:	6852      	ldr	r2, [r2, #4]
   34ff8:	1841      	adds	r1, r0, r1
   34ffa:	6021      	str	r1, [r4, #0]
   34ffc:	6062      	str	r2, [r4, #4]
   34ffe:	605c      	str	r4, [r3, #4]
   35000:	e7ca      	b.n	34f98 <_free_r+0x24>
   35002:	46c0      	nop			; (mov r8, r8)
   35004:	20004728 	.word	0x20004728

00035008 <_malloc_r>:
   35008:	2303      	movs	r3, #3
   3500a:	b570      	push	{r4, r5, r6, lr}
   3500c:	1ccd      	adds	r5, r1, #3
   3500e:	439d      	bics	r5, r3
   35010:	3508      	adds	r5, #8
   35012:	0006      	movs	r6, r0
   35014:	2d0c      	cmp	r5, #12
   35016:	d21e      	bcs.n	35056 <_malloc_r+0x4e>
   35018:	250c      	movs	r5, #12
   3501a:	42a9      	cmp	r1, r5
   3501c:	d81d      	bhi.n	3505a <_malloc_r+0x52>
   3501e:	0030      	movs	r0, r6
   35020:	f000 fd8c 	bl	35b3c <__malloc_lock>
   35024:	4a25      	ldr	r2, [pc, #148]	; (350bc <_malloc_r+0xb4>)
   35026:	6814      	ldr	r4, [r2, #0]
   35028:	0021      	movs	r1, r4
   3502a:	2900      	cmp	r1, #0
   3502c:	d119      	bne.n	35062 <_malloc_r+0x5a>
   3502e:	4c24      	ldr	r4, [pc, #144]	; (350c0 <_malloc_r+0xb8>)
   35030:	6823      	ldr	r3, [r4, #0]
   35032:	2b00      	cmp	r3, #0
   35034:	d103      	bne.n	3503e <_malloc_r+0x36>
   35036:	0030      	movs	r0, r6
   35038:	f000 f8ae 	bl	35198 <_sbrk_r>
   3503c:	6020      	str	r0, [r4, #0]
   3503e:	0029      	movs	r1, r5
   35040:	0030      	movs	r0, r6
   35042:	f000 f8a9 	bl	35198 <_sbrk_r>
   35046:	1c43      	adds	r3, r0, #1
   35048:	d12c      	bne.n	350a4 <_malloc_r+0x9c>
   3504a:	230c      	movs	r3, #12
   3504c:	0030      	movs	r0, r6
   3504e:	6033      	str	r3, [r6, #0]
   35050:	f000 fd75 	bl	35b3e <__malloc_unlock>
   35054:	e003      	b.n	3505e <_malloc_r+0x56>
   35056:	2d00      	cmp	r5, #0
   35058:	dadf      	bge.n	3501a <_malloc_r+0x12>
   3505a:	230c      	movs	r3, #12
   3505c:	6033      	str	r3, [r6, #0]
   3505e:	2000      	movs	r0, #0
   35060:	bd70      	pop	{r4, r5, r6, pc}
   35062:	680b      	ldr	r3, [r1, #0]
   35064:	1b5b      	subs	r3, r3, r5
   35066:	d41a      	bmi.n	3509e <_malloc_r+0x96>
   35068:	2b0b      	cmp	r3, #11
   3506a:	d903      	bls.n	35074 <_malloc_r+0x6c>
   3506c:	600b      	str	r3, [r1, #0]
   3506e:	18cc      	adds	r4, r1, r3
   35070:	6025      	str	r5, [r4, #0]
   35072:	e003      	b.n	3507c <_malloc_r+0x74>
   35074:	428c      	cmp	r4, r1
   35076:	d10e      	bne.n	35096 <_malloc_r+0x8e>
   35078:	6863      	ldr	r3, [r4, #4]
   3507a:	6013      	str	r3, [r2, #0]
   3507c:	0030      	movs	r0, r6
   3507e:	f000 fd5e 	bl	35b3e <__malloc_unlock>
   35082:	0020      	movs	r0, r4
   35084:	2207      	movs	r2, #7
   35086:	300b      	adds	r0, #11
   35088:	1d23      	adds	r3, r4, #4
   3508a:	4390      	bics	r0, r2
   3508c:	1ac3      	subs	r3, r0, r3
   3508e:	d0e7      	beq.n	35060 <_malloc_r+0x58>
   35090:	425a      	negs	r2, r3
   35092:	50e2      	str	r2, [r4, r3]
   35094:	e7e4      	b.n	35060 <_malloc_r+0x58>
   35096:	684b      	ldr	r3, [r1, #4]
   35098:	6063      	str	r3, [r4, #4]
   3509a:	000c      	movs	r4, r1
   3509c:	e7ee      	b.n	3507c <_malloc_r+0x74>
   3509e:	000c      	movs	r4, r1
   350a0:	6849      	ldr	r1, [r1, #4]
   350a2:	e7c2      	b.n	3502a <_malloc_r+0x22>
   350a4:	2303      	movs	r3, #3
   350a6:	1cc4      	adds	r4, r0, #3
   350a8:	439c      	bics	r4, r3
   350aa:	42a0      	cmp	r0, r4
   350ac:	d0e0      	beq.n	35070 <_malloc_r+0x68>
   350ae:	1a21      	subs	r1, r4, r0
   350b0:	0030      	movs	r0, r6
   350b2:	f000 f871 	bl	35198 <_sbrk_r>
   350b6:	1c43      	adds	r3, r0, #1
   350b8:	d1da      	bne.n	35070 <_malloc_r+0x68>
   350ba:	e7c6      	b.n	3504a <_malloc_r+0x42>
   350bc:	20004728 	.word	0x20004728
   350c0:	2000472c 	.word	0x2000472c

000350c4 <_puts_r>:
   350c4:	b570      	push	{r4, r5, r6, lr}
   350c6:	0005      	movs	r5, r0
   350c8:	000e      	movs	r6, r1
   350ca:	2800      	cmp	r0, #0
   350cc:	d004      	beq.n	350d8 <_puts_r+0x14>
   350ce:	6983      	ldr	r3, [r0, #24]
   350d0:	2b00      	cmp	r3, #0
   350d2:	d101      	bne.n	350d8 <_puts_r+0x14>
   350d4:	f000 fc0e 	bl	358f4 <__sinit>
   350d8:	69ab      	ldr	r3, [r5, #24]
   350da:	68ac      	ldr	r4, [r5, #8]
   350dc:	2b00      	cmp	r3, #0
   350de:	d102      	bne.n	350e6 <_puts_r+0x22>
   350e0:	0028      	movs	r0, r5
   350e2:	f000 fc07 	bl	358f4 <__sinit>
   350e6:	4b24      	ldr	r3, [pc, #144]	; (35178 <_puts_r+0xb4>)
   350e8:	429c      	cmp	r4, r3
   350ea:	d10f      	bne.n	3510c <_puts_r+0x48>
   350ec:	686c      	ldr	r4, [r5, #4]
   350ee:	89a3      	ldrh	r3, [r4, #12]
   350f0:	071b      	lsls	r3, r3, #28
   350f2:	d502      	bpl.n	350fa <_puts_r+0x36>
   350f4:	6923      	ldr	r3, [r4, #16]
   350f6:	2b00      	cmp	r3, #0
   350f8:	d120      	bne.n	3513c <_puts_r+0x78>
   350fa:	0021      	movs	r1, r4
   350fc:	0028      	movs	r0, r5
   350fe:	f000 fa8b 	bl	35618 <__swsetup_r>
   35102:	2800      	cmp	r0, #0
   35104:	d01a      	beq.n	3513c <_puts_r+0x78>
   35106:	2001      	movs	r0, #1
   35108:	4240      	negs	r0, r0
   3510a:	bd70      	pop	{r4, r5, r6, pc}
   3510c:	4b1b      	ldr	r3, [pc, #108]	; (3517c <_puts_r+0xb8>)
   3510e:	429c      	cmp	r4, r3
   35110:	d101      	bne.n	35116 <_puts_r+0x52>
   35112:	68ac      	ldr	r4, [r5, #8]
   35114:	e7eb      	b.n	350ee <_puts_r+0x2a>
   35116:	4b1a      	ldr	r3, [pc, #104]	; (35180 <_puts_r+0xbc>)
   35118:	429c      	cmp	r4, r3
   3511a:	d1e8      	bne.n	350ee <_puts_r+0x2a>
   3511c:	68ec      	ldr	r4, [r5, #12]
   3511e:	e7e6      	b.n	350ee <_puts_r+0x2a>
   35120:	3b01      	subs	r3, #1
   35122:	3601      	adds	r6, #1
   35124:	60a3      	str	r3, [r4, #8]
   35126:	2b00      	cmp	r3, #0
   35128:	da04      	bge.n	35134 <_puts_r+0x70>
   3512a:	69a2      	ldr	r2, [r4, #24]
   3512c:	4293      	cmp	r3, r2
   3512e:	db16      	blt.n	3515e <_puts_r+0x9a>
   35130:	290a      	cmp	r1, #10
   35132:	d014      	beq.n	3515e <_puts_r+0x9a>
   35134:	6823      	ldr	r3, [r4, #0]
   35136:	1c5a      	adds	r2, r3, #1
   35138:	6022      	str	r2, [r4, #0]
   3513a:	7019      	strb	r1, [r3, #0]
   3513c:	7831      	ldrb	r1, [r6, #0]
   3513e:	68a3      	ldr	r3, [r4, #8]
   35140:	2900      	cmp	r1, #0
   35142:	d1ed      	bne.n	35120 <_puts_r+0x5c>
   35144:	3b01      	subs	r3, #1
   35146:	60a3      	str	r3, [r4, #8]
   35148:	2b00      	cmp	r3, #0
   3514a:	da0f      	bge.n	3516c <_puts_r+0xa8>
   3514c:	0022      	movs	r2, r4
   3514e:	310a      	adds	r1, #10
   35150:	0028      	movs	r0, r5
   35152:	f000 fa0b 	bl	3556c <__swbuf_r>
   35156:	1c43      	adds	r3, r0, #1
   35158:	d0d5      	beq.n	35106 <_puts_r+0x42>
   3515a:	200a      	movs	r0, #10
   3515c:	e7d5      	b.n	3510a <_puts_r+0x46>
   3515e:	0022      	movs	r2, r4
   35160:	0028      	movs	r0, r5
   35162:	f000 fa03 	bl	3556c <__swbuf_r>
   35166:	1c43      	adds	r3, r0, #1
   35168:	d1e8      	bne.n	3513c <_puts_r+0x78>
   3516a:	e7cc      	b.n	35106 <_puts_r+0x42>
   3516c:	200a      	movs	r0, #10
   3516e:	6823      	ldr	r3, [r4, #0]
   35170:	1c5a      	adds	r2, r3, #1
   35172:	6022      	str	r2, [r4, #0]
   35174:	7018      	strb	r0, [r3, #0]
   35176:	e7c8      	b.n	3510a <_puts_r+0x46>
   35178:	0003aa00 	.word	0x0003aa00
   3517c:	0003aa20 	.word	0x0003aa20
   35180:	0003a9e0 	.word	0x0003a9e0

00035184 <puts>:
   35184:	b510      	push	{r4, lr}
   35186:	4b03      	ldr	r3, [pc, #12]	; (35194 <puts+0x10>)
   35188:	0001      	movs	r1, r0
   3518a:	6818      	ldr	r0, [r3, #0]
   3518c:	f7ff ff9a 	bl	350c4 <_puts_r>
   35190:	bd10      	pop	{r4, pc}
   35192:	46c0      	nop			; (mov r8, r8)
   35194:	20000130 	.word	0x20000130

00035198 <_sbrk_r>:
   35198:	2300      	movs	r3, #0
   3519a:	b570      	push	{r4, r5, r6, lr}
   3519c:	4c06      	ldr	r4, [pc, #24]	; (351b8 <_sbrk_r+0x20>)
   3519e:	0005      	movs	r5, r0
   351a0:	0008      	movs	r0, r1
   351a2:	6023      	str	r3, [r4, #0]
   351a4:	f7f6 fa98 	bl	2b6d8 <_sbrk>
   351a8:	1c43      	adds	r3, r0, #1
   351aa:	d103      	bne.n	351b4 <_sbrk_r+0x1c>
   351ac:	6823      	ldr	r3, [r4, #0]
   351ae:	2b00      	cmp	r3, #0
   351b0:	d000      	beq.n	351b4 <_sbrk_r+0x1c>
   351b2:	602b      	str	r3, [r5, #0]
   351b4:	bd70      	pop	{r4, r5, r6, pc}
   351b6:	46c0      	nop			; (mov r8, r8)
   351b8:	20005c90 	.word	0x20005c90

000351bc <sniprintf>:
   351bc:	b40c      	push	{r2, r3}
   351be:	b530      	push	{r4, r5, lr}
   351c0:	4b16      	ldr	r3, [pc, #88]	; (3521c <sniprintf+0x60>)
   351c2:	b09d      	sub	sp, #116	; 0x74
   351c4:	1e0c      	subs	r4, r1, #0
   351c6:	681d      	ldr	r5, [r3, #0]
   351c8:	da08      	bge.n	351dc <sniprintf+0x20>
   351ca:	238b      	movs	r3, #139	; 0x8b
   351cc:	2001      	movs	r0, #1
   351ce:	602b      	str	r3, [r5, #0]
   351d0:	4240      	negs	r0, r0
   351d2:	b01d      	add	sp, #116	; 0x74
   351d4:	bc30      	pop	{r4, r5}
   351d6:	bc08      	pop	{r3}
   351d8:	b002      	add	sp, #8
   351da:	4718      	bx	r3
   351dc:	2382      	movs	r3, #130	; 0x82
   351de:	a902      	add	r1, sp, #8
   351e0:	009b      	lsls	r3, r3, #2
   351e2:	818b      	strh	r3, [r1, #12]
   351e4:	2300      	movs	r3, #0
   351e6:	9002      	str	r0, [sp, #8]
   351e8:	6108      	str	r0, [r1, #16]
   351ea:	429c      	cmp	r4, r3
   351ec:	d000      	beq.n	351f0 <sniprintf+0x34>
   351ee:	1e63      	subs	r3, r4, #1
   351f0:	608b      	str	r3, [r1, #8]
   351f2:	614b      	str	r3, [r1, #20]
   351f4:	2301      	movs	r3, #1
   351f6:	425b      	negs	r3, r3
   351f8:	81cb      	strh	r3, [r1, #14]
   351fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
   351fc:	ab21      	add	r3, sp, #132	; 0x84
   351fe:	0028      	movs	r0, r5
   35200:	9301      	str	r3, [sp, #4]
   35202:	f000 fcff 	bl	35c04 <_svfiprintf_r>
   35206:	1c43      	adds	r3, r0, #1
   35208:	da01      	bge.n	3520e <sniprintf+0x52>
   3520a:	238b      	movs	r3, #139	; 0x8b
   3520c:	602b      	str	r3, [r5, #0]
   3520e:	2c00      	cmp	r4, #0
   35210:	d0df      	beq.n	351d2 <sniprintf+0x16>
   35212:	2300      	movs	r3, #0
   35214:	9a02      	ldr	r2, [sp, #8]
   35216:	7013      	strb	r3, [r2, #0]
   35218:	e7db      	b.n	351d2 <sniprintf+0x16>
   3521a:	46c0      	nop			; (mov r8, r8)
   3521c:	20000130 	.word	0x20000130

00035220 <siprintf>:
   35220:	b40e      	push	{r1, r2, r3}
   35222:	b510      	push	{r4, lr}
   35224:	b09d      	sub	sp, #116	; 0x74
   35226:	a902      	add	r1, sp, #8
   35228:	9002      	str	r0, [sp, #8]
   3522a:	6108      	str	r0, [r1, #16]
   3522c:	480b      	ldr	r0, [pc, #44]	; (3525c <siprintf+0x3c>)
   3522e:	2482      	movs	r4, #130	; 0x82
   35230:	6088      	str	r0, [r1, #8]
   35232:	6148      	str	r0, [r1, #20]
   35234:	2001      	movs	r0, #1
   35236:	4240      	negs	r0, r0
   35238:	ab1f      	add	r3, sp, #124	; 0x7c
   3523a:	81c8      	strh	r0, [r1, #14]
   3523c:	4808      	ldr	r0, [pc, #32]	; (35260 <siprintf+0x40>)
   3523e:	cb04      	ldmia	r3!, {r2}
   35240:	00a4      	lsls	r4, r4, #2
   35242:	6800      	ldr	r0, [r0, #0]
   35244:	9301      	str	r3, [sp, #4]
   35246:	818c      	strh	r4, [r1, #12]
   35248:	f000 fcdc 	bl	35c04 <_svfiprintf_r>
   3524c:	2300      	movs	r3, #0
   3524e:	9a02      	ldr	r2, [sp, #8]
   35250:	7013      	strb	r3, [r2, #0]
   35252:	b01d      	add	sp, #116	; 0x74
   35254:	bc10      	pop	{r4}
   35256:	bc08      	pop	{r3}
   35258:	b003      	add	sp, #12
   3525a:	4718      	bx	r3
   3525c:	7fffffff 	.word	0x7fffffff
   35260:	20000130 	.word	0x20000130

00035264 <strcasecmp>:
   35264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35266:	0007      	movs	r7, r0
   35268:	000e      	movs	r6, r1
   3526a:	783c      	ldrb	r4, [r7, #0]
   3526c:	f000 fbda 	bl	35a24 <__locale_ctype_ptr>
   35270:	2203      	movs	r2, #3
   35272:	1900      	adds	r0, r0, r4
   35274:	7843      	ldrb	r3, [r0, #1]
   35276:	4013      	ands	r3, r2
   35278:	2b01      	cmp	r3, #1
   3527a:	d100      	bne.n	3527e <strcasecmp+0x1a>
   3527c:	3420      	adds	r4, #32
   3527e:	7835      	ldrb	r5, [r6, #0]
   35280:	f000 fbd0 	bl	35a24 <__locale_ctype_ptr>
   35284:	2203      	movs	r2, #3
   35286:	1940      	adds	r0, r0, r5
   35288:	7843      	ldrb	r3, [r0, #1]
   3528a:	4013      	ands	r3, r2
   3528c:	2b01      	cmp	r3, #1
   3528e:	d100      	bne.n	35292 <strcasecmp+0x2e>
   35290:	3520      	adds	r5, #32
   35292:	1b60      	subs	r0, r4, r5
   35294:	d103      	bne.n	3529e <strcasecmp+0x3a>
   35296:	3701      	adds	r7, #1
   35298:	3601      	adds	r6, #1
   3529a:	2d00      	cmp	r5, #0
   3529c:	d1e5      	bne.n	3526a <strcasecmp+0x6>
   3529e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000352a0 <strcat>:
   352a0:	0002      	movs	r2, r0
   352a2:	b510      	push	{r4, lr}
   352a4:	7813      	ldrb	r3, [r2, #0]
   352a6:	2b00      	cmp	r3, #0
   352a8:	d105      	bne.n	352b6 <strcat+0x16>
   352aa:	5ccc      	ldrb	r4, [r1, r3]
   352ac:	54d4      	strb	r4, [r2, r3]
   352ae:	3301      	adds	r3, #1
   352b0:	2c00      	cmp	r4, #0
   352b2:	d1fa      	bne.n	352aa <strcat+0xa>
   352b4:	bd10      	pop	{r4, pc}
   352b6:	3201      	adds	r2, #1
   352b8:	e7f4      	b.n	352a4 <strcat+0x4>

000352ba <strcmp>:
   352ba:	7802      	ldrb	r2, [r0, #0]
   352bc:	780b      	ldrb	r3, [r1, #0]
   352be:	2a00      	cmp	r2, #0
   352c0:	d003      	beq.n	352ca <strcmp+0x10>
   352c2:	3001      	adds	r0, #1
   352c4:	3101      	adds	r1, #1
   352c6:	429a      	cmp	r2, r3
   352c8:	d0f7      	beq.n	352ba <strcmp>
   352ca:	1ad0      	subs	r0, r2, r3
   352cc:	4770      	bx	lr

000352ce <strcpy>:
   352ce:	1c03      	adds	r3, r0, #0
   352d0:	780a      	ldrb	r2, [r1, #0]
   352d2:	3101      	adds	r1, #1
   352d4:	701a      	strb	r2, [r3, #0]
   352d6:	3301      	adds	r3, #1
   352d8:	2a00      	cmp	r2, #0
   352da:	d1f9      	bne.n	352d0 <strcpy+0x2>
   352dc:	4770      	bx	lr
	...

000352e0 <strdup>:
   352e0:	b510      	push	{r4, lr}
   352e2:	4b03      	ldr	r3, [pc, #12]	; (352f0 <strdup+0x10>)
   352e4:	0001      	movs	r1, r0
   352e6:	6818      	ldr	r0, [r3, #0]
   352e8:	f000 f804 	bl	352f4 <_strdup_r>
   352ec:	bd10      	pop	{r4, pc}
   352ee:	46c0      	nop			; (mov r8, r8)
   352f0:	20000130 	.word	0x20000130

000352f4 <_strdup_r>:
   352f4:	b570      	push	{r4, r5, r6, lr}
   352f6:	0005      	movs	r5, r0
   352f8:	0008      	movs	r0, r1
   352fa:	000e      	movs	r6, r1
   352fc:	f000 f80d 	bl	3531a <strlen>
   35300:	1c44      	adds	r4, r0, #1
   35302:	0021      	movs	r1, r4
   35304:	0028      	movs	r0, r5
   35306:	f7ff fe7f 	bl	35008 <_malloc_r>
   3530a:	1e05      	subs	r5, r0, #0
   3530c:	d003      	beq.n	35316 <_strdup_r+0x22>
   3530e:	0022      	movs	r2, r4
   35310:	0031      	movs	r1, r6
   35312:	f7ff fe0b 	bl	34f2c <memcpy>
   35316:	0028      	movs	r0, r5
   35318:	bd70      	pop	{r4, r5, r6, pc}

0003531a <strlen>:
   3531a:	2300      	movs	r3, #0
   3531c:	5cc2      	ldrb	r2, [r0, r3]
   3531e:	3301      	adds	r3, #1
   35320:	2a00      	cmp	r2, #0
   35322:	d1fb      	bne.n	3531c <strlen+0x2>
   35324:	1e58      	subs	r0, r3, #1
   35326:	4770      	bx	lr

00035328 <strncmp>:
   35328:	2300      	movs	r3, #0
   3532a:	b530      	push	{r4, r5, lr}
   3532c:	429a      	cmp	r2, r3
   3532e:	d00a      	beq.n	35346 <strncmp+0x1e>
   35330:	3a01      	subs	r2, #1
   35332:	5cc4      	ldrb	r4, [r0, r3]
   35334:	5ccd      	ldrb	r5, [r1, r3]
   35336:	42ac      	cmp	r4, r5
   35338:	d104      	bne.n	35344 <strncmp+0x1c>
   3533a:	429a      	cmp	r2, r3
   3533c:	d002      	beq.n	35344 <strncmp+0x1c>
   3533e:	3301      	adds	r3, #1
   35340:	2c00      	cmp	r4, #0
   35342:	d1f6      	bne.n	35332 <strncmp+0xa>
   35344:	1b63      	subs	r3, r4, r5
   35346:	0018      	movs	r0, r3
   35348:	bd30      	pop	{r4, r5, pc}

0003534a <strncpy>:
   3534a:	b570      	push	{r4, r5, r6, lr}
   3534c:	0004      	movs	r4, r0
   3534e:	2a00      	cmp	r2, #0
   35350:	d100      	bne.n	35354 <strncpy+0xa>
   35352:	bd70      	pop	{r4, r5, r6, pc}
   35354:	780d      	ldrb	r5, [r1, #0]
   35356:	1e56      	subs	r6, r2, #1
   35358:	1c63      	adds	r3, r4, #1
   3535a:	7025      	strb	r5, [r4, #0]
   3535c:	3101      	adds	r1, #1
   3535e:	2d00      	cmp	r5, #0
   35360:	d105      	bne.n	3536e <strncpy+0x24>
   35362:	18a4      	adds	r4, r4, r2
   35364:	429c      	cmp	r4, r3
   35366:	d0f4      	beq.n	35352 <strncpy+0x8>
   35368:	701d      	strb	r5, [r3, #0]
   3536a:	3301      	adds	r3, #1
   3536c:	e7fa      	b.n	35364 <strncpy+0x1a>
   3536e:	001c      	movs	r4, r3
   35370:	0032      	movs	r2, r6
   35372:	e7ec      	b.n	3534e <strncpy+0x4>

00035374 <strrchr>:
   35374:	b570      	push	{r4, r5, r6, lr}
   35376:	000d      	movs	r5, r1
   35378:	2400      	movs	r4, #0
   3537a:	2900      	cmp	r1, #0
   3537c:	d105      	bne.n	3538a <strrchr+0x16>
   3537e:	f000 ff19 	bl	361b4 <strchr>
   35382:	0004      	movs	r4, r0
   35384:	e006      	b.n	35394 <strrchr+0x20>
   35386:	001c      	movs	r4, r3
   35388:	1c58      	adds	r0, r3, #1
   3538a:	0029      	movs	r1, r5
   3538c:	f000 ff12 	bl	361b4 <strchr>
   35390:	1e03      	subs	r3, r0, #0
   35392:	d1f8      	bne.n	35386 <strrchr+0x12>
   35394:	0020      	movs	r0, r4
   35396:	bd70      	pop	{r4, r5, r6, pc}

00035398 <strstr>:
   35398:	b510      	push	{r4, lr}
   3539a:	0002      	movs	r2, r0
   3539c:	7800      	ldrb	r0, [r0, #0]
   3539e:	2800      	cmp	r0, #0
   353a0:	d104      	bne.n	353ac <strstr+0x14>
   353a2:	7809      	ldrb	r1, [r1, #0]
   353a4:	2900      	cmp	r1, #0
   353a6:	d00d      	beq.n	353c4 <strstr+0x2c>
   353a8:	bd10      	pop	{r4, pc}
   353aa:	3201      	adds	r2, #1
   353ac:	7810      	ldrb	r0, [r2, #0]
   353ae:	2800      	cmp	r0, #0
   353b0:	d0fa      	beq.n	353a8 <strstr+0x10>
   353b2:	2300      	movs	r3, #0
   353b4:	5cc8      	ldrb	r0, [r1, r3]
   353b6:	2800      	cmp	r0, #0
   353b8:	d004      	beq.n	353c4 <strstr+0x2c>
   353ba:	5cd4      	ldrb	r4, [r2, r3]
   353bc:	4284      	cmp	r4, r0
   353be:	d1f4      	bne.n	353aa <strstr+0x12>
   353c0:	3301      	adds	r3, #1
   353c2:	e7f7      	b.n	353b4 <strstr+0x1c>
   353c4:	0010      	movs	r0, r2
   353c6:	e7ef      	b.n	353a8 <strstr+0x10>

000353c8 <_strtol_l.isra.0>:
   353c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   353ca:	001f      	movs	r7, r3
   353cc:	000e      	movs	r6, r1
   353ce:	b087      	sub	sp, #28
   353d0:	9005      	str	r0, [sp, #20]
   353d2:	9103      	str	r1, [sp, #12]
   353d4:	9202      	str	r2, [sp, #8]
   353d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   353d8:	7834      	ldrb	r4, [r6, #0]
   353da:	f000 fb20 	bl	35a1e <__locale_ctype_ptr_l>
   353de:	2208      	movs	r2, #8
   353e0:	1900      	adds	r0, r0, r4
   353e2:	7843      	ldrb	r3, [r0, #1]
   353e4:	1c75      	adds	r5, r6, #1
   353e6:	4013      	ands	r3, r2
   353e8:	d10c      	bne.n	35404 <_strtol_l.isra.0+0x3c>
   353ea:	2c2d      	cmp	r4, #45	; 0x2d
   353ec:	d10c      	bne.n	35408 <_strtol_l.isra.0+0x40>
   353ee:	3301      	adds	r3, #1
   353f0:	782c      	ldrb	r4, [r5, #0]
   353f2:	9301      	str	r3, [sp, #4]
   353f4:	1cb5      	adds	r5, r6, #2
   353f6:	2f00      	cmp	r7, #0
   353f8:	d00c      	beq.n	35414 <_strtol_l.isra.0+0x4c>
   353fa:	2f10      	cmp	r7, #16
   353fc:	d114      	bne.n	35428 <_strtol_l.isra.0+0x60>
   353fe:	2c30      	cmp	r4, #48	; 0x30
   35400:	d00a      	beq.n	35418 <_strtol_l.isra.0+0x50>
   35402:	e011      	b.n	35428 <_strtol_l.isra.0+0x60>
   35404:	002e      	movs	r6, r5
   35406:	e7e6      	b.n	353d6 <_strtol_l.isra.0+0xe>
   35408:	9301      	str	r3, [sp, #4]
   3540a:	2c2b      	cmp	r4, #43	; 0x2b
   3540c:	d1f3      	bne.n	353f6 <_strtol_l.isra.0+0x2e>
   3540e:	782c      	ldrb	r4, [r5, #0]
   35410:	1cb5      	adds	r5, r6, #2
   35412:	e7f0      	b.n	353f6 <_strtol_l.isra.0+0x2e>
   35414:	2c30      	cmp	r4, #48	; 0x30
   35416:	d12f      	bne.n	35478 <_strtol_l.isra.0+0xb0>
   35418:	2220      	movs	r2, #32
   3541a:	782b      	ldrb	r3, [r5, #0]
   3541c:	4393      	bics	r3, r2
   3541e:	2b58      	cmp	r3, #88	; 0x58
   35420:	d151      	bne.n	354c6 <_strtol_l.isra.0+0xfe>
   35422:	2710      	movs	r7, #16
   35424:	786c      	ldrb	r4, [r5, #1]
   35426:	3502      	adds	r5, #2
   35428:	9b01      	ldr	r3, [sp, #4]
   3542a:	4a29      	ldr	r2, [pc, #164]	; (354d0 <_strtol_l.isra.0+0x108>)
   3542c:	0039      	movs	r1, r7
   3542e:	189e      	adds	r6, r3, r2
   35430:	0030      	movs	r0, r6
   35432:	f7fd fe2f 	bl	33094 <__aeabi_uidivmod>
   35436:	0030      	movs	r0, r6
   35438:	9104      	str	r1, [sp, #16]
   3543a:	0039      	movs	r1, r7
   3543c:	f7fd fda4 	bl	32f88 <__udivsi3>
   35440:	2101      	movs	r1, #1
   35442:	2300      	movs	r3, #0
   35444:	4249      	negs	r1, r1
   35446:	0002      	movs	r2, r0
   35448:	468c      	mov	ip, r1
   3544a:	0018      	movs	r0, r3
   3544c:	0021      	movs	r1, r4
   3544e:	3930      	subs	r1, #48	; 0x30
   35450:	2909      	cmp	r1, #9
   35452:	d813      	bhi.n	3547c <_strtol_l.isra.0+0xb4>
   35454:	000c      	movs	r4, r1
   35456:	42a7      	cmp	r7, r4
   35458:	dd1c      	ble.n	35494 <_strtol_l.isra.0+0xcc>
   3545a:	1c59      	adds	r1, r3, #1
   3545c:	d009      	beq.n	35472 <_strtol_l.isra.0+0xaa>
   3545e:	4663      	mov	r3, ip
   35460:	4282      	cmp	r2, r0
   35462:	d306      	bcc.n	35472 <_strtol_l.isra.0+0xaa>
   35464:	d102      	bne.n	3546c <_strtol_l.isra.0+0xa4>
   35466:	9904      	ldr	r1, [sp, #16]
   35468:	42a1      	cmp	r1, r4
   3546a:	db02      	blt.n	35472 <_strtol_l.isra.0+0xaa>
   3546c:	2301      	movs	r3, #1
   3546e:	4378      	muls	r0, r7
   35470:	1820      	adds	r0, r4, r0
   35472:	782c      	ldrb	r4, [r5, #0]
   35474:	3501      	adds	r5, #1
   35476:	e7e9      	b.n	3544c <_strtol_l.isra.0+0x84>
   35478:	270a      	movs	r7, #10
   3547a:	e7d5      	b.n	35428 <_strtol_l.isra.0+0x60>
   3547c:	0021      	movs	r1, r4
   3547e:	3941      	subs	r1, #65	; 0x41
   35480:	2919      	cmp	r1, #25
   35482:	d801      	bhi.n	35488 <_strtol_l.isra.0+0xc0>
   35484:	3c37      	subs	r4, #55	; 0x37
   35486:	e7e6      	b.n	35456 <_strtol_l.isra.0+0x8e>
   35488:	0021      	movs	r1, r4
   3548a:	3961      	subs	r1, #97	; 0x61
   3548c:	2919      	cmp	r1, #25
   3548e:	d801      	bhi.n	35494 <_strtol_l.isra.0+0xcc>
   35490:	3c57      	subs	r4, #87	; 0x57
   35492:	e7e0      	b.n	35456 <_strtol_l.isra.0+0x8e>
   35494:	1c5a      	adds	r2, r3, #1
   35496:	d108      	bne.n	354aa <_strtol_l.isra.0+0xe2>
   35498:	9a05      	ldr	r2, [sp, #20]
   3549a:	3323      	adds	r3, #35	; 0x23
   3549c:	6013      	str	r3, [r2, #0]
   3549e:	9b02      	ldr	r3, [sp, #8]
   354a0:	0030      	movs	r0, r6
   354a2:	2b00      	cmp	r3, #0
   354a4:	d10b      	bne.n	354be <_strtol_l.isra.0+0xf6>
   354a6:	b007      	add	sp, #28
   354a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   354aa:	9a01      	ldr	r2, [sp, #4]
   354ac:	2a00      	cmp	r2, #0
   354ae:	d000      	beq.n	354b2 <_strtol_l.isra.0+0xea>
   354b0:	4240      	negs	r0, r0
   354b2:	9a02      	ldr	r2, [sp, #8]
   354b4:	2a00      	cmp	r2, #0
   354b6:	d0f6      	beq.n	354a6 <_strtol_l.isra.0+0xde>
   354b8:	9a03      	ldr	r2, [sp, #12]
   354ba:	2b00      	cmp	r3, #0
   354bc:	d000      	beq.n	354c0 <_strtol_l.isra.0+0xf8>
   354be:	1e6a      	subs	r2, r5, #1
   354c0:	9b02      	ldr	r3, [sp, #8]
   354c2:	601a      	str	r2, [r3, #0]
   354c4:	e7ef      	b.n	354a6 <_strtol_l.isra.0+0xde>
   354c6:	2430      	movs	r4, #48	; 0x30
   354c8:	2f00      	cmp	r7, #0
   354ca:	d1ad      	bne.n	35428 <_strtol_l.isra.0+0x60>
   354cc:	3708      	adds	r7, #8
   354ce:	e7ab      	b.n	35428 <_strtol_l.isra.0+0x60>
   354d0:	7fffffff 	.word	0x7fffffff

000354d4 <strtol>:
   354d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   354d6:	0013      	movs	r3, r2
   354d8:	4a06      	ldr	r2, [pc, #24]	; (354f4 <strtol+0x20>)
   354da:	0005      	movs	r5, r0
   354dc:	6810      	ldr	r0, [r2, #0]
   354de:	6a04      	ldr	r4, [r0, #32]
   354e0:	2c00      	cmp	r4, #0
   354e2:	d100      	bne.n	354e6 <strtol+0x12>
   354e4:	4c04      	ldr	r4, [pc, #16]	; (354f8 <strtol+0x24>)
   354e6:	000a      	movs	r2, r1
   354e8:	9400      	str	r4, [sp, #0]
   354ea:	0029      	movs	r1, r5
   354ec:	f7ff ff6c 	bl	353c8 <_strtol_l.isra.0>
   354f0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   354f2:	46c0      	nop			; (mov r8, r8)
   354f4:	20000130 	.word	0x20000130
   354f8:	20000194 	.word	0x20000194

000354fc <_vsniprintf_r>:
   354fc:	b530      	push	{r4, r5, lr}
   354fe:	0014      	movs	r4, r2
   35500:	b09b      	sub	sp, #108	; 0x6c
   35502:	0005      	movs	r5, r0
   35504:	001a      	movs	r2, r3
   35506:	2c00      	cmp	r4, #0
   35508:	da05      	bge.n	35516 <_vsniprintf_r+0x1a>
   3550a:	238b      	movs	r3, #139	; 0x8b
   3550c:	6003      	str	r3, [r0, #0]
   3550e:	2001      	movs	r0, #1
   35510:	4240      	negs	r0, r0
   35512:	b01b      	add	sp, #108	; 0x6c
   35514:	bd30      	pop	{r4, r5, pc}
   35516:	2382      	movs	r3, #130	; 0x82
   35518:	4668      	mov	r0, sp
   3551a:	009b      	lsls	r3, r3, #2
   3551c:	8183      	strh	r3, [r0, #12]
   3551e:	2300      	movs	r3, #0
   35520:	9100      	str	r1, [sp, #0]
   35522:	9104      	str	r1, [sp, #16]
   35524:	429c      	cmp	r4, r3
   35526:	d000      	beq.n	3552a <_vsniprintf_r+0x2e>
   35528:	1e63      	subs	r3, r4, #1
   3552a:	9302      	str	r3, [sp, #8]
   3552c:	9305      	str	r3, [sp, #20]
   3552e:	2301      	movs	r3, #1
   35530:	4669      	mov	r1, sp
   35532:	425b      	negs	r3, r3
   35534:	81cb      	strh	r3, [r1, #14]
   35536:	0028      	movs	r0, r5
   35538:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   3553a:	f000 fb63 	bl	35c04 <_svfiprintf_r>
   3553e:	1c43      	adds	r3, r0, #1
   35540:	da01      	bge.n	35546 <_vsniprintf_r+0x4a>
   35542:	238b      	movs	r3, #139	; 0x8b
   35544:	602b      	str	r3, [r5, #0]
   35546:	2c00      	cmp	r4, #0
   35548:	d0e3      	beq.n	35512 <_vsniprintf_r+0x16>
   3554a:	2300      	movs	r3, #0
   3554c:	9a00      	ldr	r2, [sp, #0]
   3554e:	7013      	strb	r3, [r2, #0]
   35550:	e7df      	b.n	35512 <_vsniprintf_r+0x16>
	...

00035554 <vsniprintf>:
   35554:	b507      	push	{r0, r1, r2, lr}
   35556:	9300      	str	r3, [sp, #0]
   35558:	0013      	movs	r3, r2
   3555a:	000a      	movs	r2, r1
   3555c:	0001      	movs	r1, r0
   3555e:	4802      	ldr	r0, [pc, #8]	; (35568 <vsniprintf+0x14>)
   35560:	6800      	ldr	r0, [r0, #0]
   35562:	f7ff ffcb 	bl	354fc <_vsniprintf_r>
   35566:	bd0e      	pop	{r1, r2, r3, pc}
   35568:	20000130 	.word	0x20000130

0003556c <__swbuf_r>:
   3556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3556e:	0005      	movs	r5, r0
   35570:	000e      	movs	r6, r1
   35572:	0014      	movs	r4, r2
   35574:	2800      	cmp	r0, #0
   35576:	d004      	beq.n	35582 <__swbuf_r+0x16>
   35578:	6983      	ldr	r3, [r0, #24]
   3557a:	2b00      	cmp	r3, #0
   3557c:	d101      	bne.n	35582 <__swbuf_r+0x16>
   3557e:	f000 f9b9 	bl	358f4 <__sinit>
   35582:	4b22      	ldr	r3, [pc, #136]	; (3560c <__swbuf_r+0xa0>)
   35584:	429c      	cmp	r4, r3
   35586:	d12d      	bne.n	355e4 <__swbuf_r+0x78>
   35588:	686c      	ldr	r4, [r5, #4]
   3558a:	69a3      	ldr	r3, [r4, #24]
   3558c:	60a3      	str	r3, [r4, #8]
   3558e:	89a3      	ldrh	r3, [r4, #12]
   35590:	071b      	lsls	r3, r3, #28
   35592:	d531      	bpl.n	355f8 <__swbuf_r+0x8c>
   35594:	6923      	ldr	r3, [r4, #16]
   35596:	2b00      	cmp	r3, #0
   35598:	d02e      	beq.n	355f8 <__swbuf_r+0x8c>
   3559a:	6823      	ldr	r3, [r4, #0]
   3559c:	6922      	ldr	r2, [r4, #16]
   3559e:	b2f7      	uxtb	r7, r6
   355a0:	1a98      	subs	r0, r3, r2
   355a2:	6963      	ldr	r3, [r4, #20]
   355a4:	b2f6      	uxtb	r6, r6
   355a6:	4298      	cmp	r0, r3
   355a8:	db05      	blt.n	355b6 <__swbuf_r+0x4a>
   355aa:	0021      	movs	r1, r4
   355ac:	0028      	movs	r0, r5
   355ae:	f000 f933 	bl	35818 <_fflush_r>
   355b2:	2800      	cmp	r0, #0
   355b4:	d126      	bne.n	35604 <__swbuf_r+0x98>
   355b6:	68a3      	ldr	r3, [r4, #8]
   355b8:	3001      	adds	r0, #1
   355ba:	3b01      	subs	r3, #1
   355bc:	60a3      	str	r3, [r4, #8]
   355be:	6823      	ldr	r3, [r4, #0]
   355c0:	1c5a      	adds	r2, r3, #1
   355c2:	6022      	str	r2, [r4, #0]
   355c4:	701f      	strb	r7, [r3, #0]
   355c6:	6963      	ldr	r3, [r4, #20]
   355c8:	4298      	cmp	r0, r3
   355ca:	d004      	beq.n	355d6 <__swbuf_r+0x6a>
   355cc:	89a3      	ldrh	r3, [r4, #12]
   355ce:	07db      	lsls	r3, r3, #31
   355d0:	d51a      	bpl.n	35608 <__swbuf_r+0x9c>
   355d2:	2e0a      	cmp	r6, #10
   355d4:	d118      	bne.n	35608 <__swbuf_r+0x9c>
   355d6:	0021      	movs	r1, r4
   355d8:	0028      	movs	r0, r5
   355da:	f000 f91d 	bl	35818 <_fflush_r>
   355de:	2800      	cmp	r0, #0
   355e0:	d012      	beq.n	35608 <__swbuf_r+0x9c>
   355e2:	e00f      	b.n	35604 <__swbuf_r+0x98>
   355e4:	4b0a      	ldr	r3, [pc, #40]	; (35610 <__swbuf_r+0xa4>)
   355e6:	429c      	cmp	r4, r3
   355e8:	d101      	bne.n	355ee <__swbuf_r+0x82>
   355ea:	68ac      	ldr	r4, [r5, #8]
   355ec:	e7cd      	b.n	3558a <__swbuf_r+0x1e>
   355ee:	4b09      	ldr	r3, [pc, #36]	; (35614 <__swbuf_r+0xa8>)
   355f0:	429c      	cmp	r4, r3
   355f2:	d1ca      	bne.n	3558a <__swbuf_r+0x1e>
   355f4:	68ec      	ldr	r4, [r5, #12]
   355f6:	e7c8      	b.n	3558a <__swbuf_r+0x1e>
   355f8:	0021      	movs	r1, r4
   355fa:	0028      	movs	r0, r5
   355fc:	f000 f80c 	bl	35618 <__swsetup_r>
   35600:	2800      	cmp	r0, #0
   35602:	d0ca      	beq.n	3559a <__swbuf_r+0x2e>
   35604:	2601      	movs	r6, #1
   35606:	4276      	negs	r6, r6
   35608:	0030      	movs	r0, r6
   3560a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3560c:	0003aa00 	.word	0x0003aa00
   35610:	0003aa20 	.word	0x0003aa20
   35614:	0003a9e0 	.word	0x0003a9e0

00035618 <__swsetup_r>:
   35618:	4b36      	ldr	r3, [pc, #216]	; (356f4 <__swsetup_r+0xdc>)
   3561a:	b570      	push	{r4, r5, r6, lr}
   3561c:	681d      	ldr	r5, [r3, #0]
   3561e:	0006      	movs	r6, r0
   35620:	000c      	movs	r4, r1
   35622:	2d00      	cmp	r5, #0
   35624:	d005      	beq.n	35632 <__swsetup_r+0x1a>
   35626:	69ab      	ldr	r3, [r5, #24]
   35628:	2b00      	cmp	r3, #0
   3562a:	d102      	bne.n	35632 <__swsetup_r+0x1a>
   3562c:	0028      	movs	r0, r5
   3562e:	f000 f961 	bl	358f4 <__sinit>
   35632:	4b31      	ldr	r3, [pc, #196]	; (356f8 <__swsetup_r+0xe0>)
   35634:	429c      	cmp	r4, r3
   35636:	d10f      	bne.n	35658 <__swsetup_r+0x40>
   35638:	686c      	ldr	r4, [r5, #4]
   3563a:	230c      	movs	r3, #12
   3563c:	5ee2      	ldrsh	r2, [r4, r3]
   3563e:	b293      	uxth	r3, r2
   35640:	0719      	lsls	r1, r3, #28
   35642:	d42d      	bmi.n	356a0 <__swsetup_r+0x88>
   35644:	06d9      	lsls	r1, r3, #27
   35646:	d411      	bmi.n	3566c <__swsetup_r+0x54>
   35648:	2309      	movs	r3, #9
   3564a:	2001      	movs	r0, #1
   3564c:	6033      	str	r3, [r6, #0]
   3564e:	3337      	adds	r3, #55	; 0x37
   35650:	4313      	orrs	r3, r2
   35652:	81a3      	strh	r3, [r4, #12]
   35654:	4240      	negs	r0, r0
   35656:	bd70      	pop	{r4, r5, r6, pc}
   35658:	4b28      	ldr	r3, [pc, #160]	; (356fc <__swsetup_r+0xe4>)
   3565a:	429c      	cmp	r4, r3
   3565c:	d101      	bne.n	35662 <__swsetup_r+0x4a>
   3565e:	68ac      	ldr	r4, [r5, #8]
   35660:	e7eb      	b.n	3563a <__swsetup_r+0x22>
   35662:	4b27      	ldr	r3, [pc, #156]	; (35700 <__swsetup_r+0xe8>)
   35664:	429c      	cmp	r4, r3
   35666:	d1e8      	bne.n	3563a <__swsetup_r+0x22>
   35668:	68ec      	ldr	r4, [r5, #12]
   3566a:	e7e6      	b.n	3563a <__swsetup_r+0x22>
   3566c:	075b      	lsls	r3, r3, #29
   3566e:	d513      	bpl.n	35698 <__swsetup_r+0x80>
   35670:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35672:	2900      	cmp	r1, #0
   35674:	d008      	beq.n	35688 <__swsetup_r+0x70>
   35676:	0023      	movs	r3, r4
   35678:	3344      	adds	r3, #68	; 0x44
   3567a:	4299      	cmp	r1, r3
   3567c:	d002      	beq.n	35684 <__swsetup_r+0x6c>
   3567e:	0030      	movs	r0, r6
   35680:	f7ff fc78 	bl	34f74 <_free_r>
   35684:	2300      	movs	r3, #0
   35686:	6363      	str	r3, [r4, #52]	; 0x34
   35688:	2224      	movs	r2, #36	; 0x24
   3568a:	89a3      	ldrh	r3, [r4, #12]
   3568c:	4393      	bics	r3, r2
   3568e:	81a3      	strh	r3, [r4, #12]
   35690:	2300      	movs	r3, #0
   35692:	6063      	str	r3, [r4, #4]
   35694:	6923      	ldr	r3, [r4, #16]
   35696:	6023      	str	r3, [r4, #0]
   35698:	2308      	movs	r3, #8
   3569a:	89a2      	ldrh	r2, [r4, #12]
   3569c:	4313      	orrs	r3, r2
   3569e:	81a3      	strh	r3, [r4, #12]
   356a0:	6923      	ldr	r3, [r4, #16]
   356a2:	2b00      	cmp	r3, #0
   356a4:	d10b      	bne.n	356be <__swsetup_r+0xa6>
   356a6:	21a0      	movs	r1, #160	; 0xa0
   356a8:	2280      	movs	r2, #128	; 0x80
   356aa:	89a3      	ldrh	r3, [r4, #12]
   356ac:	0089      	lsls	r1, r1, #2
   356ae:	0092      	lsls	r2, r2, #2
   356b0:	400b      	ands	r3, r1
   356b2:	4293      	cmp	r3, r2
   356b4:	d003      	beq.n	356be <__swsetup_r+0xa6>
   356b6:	0021      	movs	r1, r4
   356b8:	0030      	movs	r0, r6
   356ba:	f000 f9e9 	bl	35a90 <__smakebuf_r>
   356be:	2301      	movs	r3, #1
   356c0:	89a2      	ldrh	r2, [r4, #12]
   356c2:	4013      	ands	r3, r2
   356c4:	d011      	beq.n	356ea <__swsetup_r+0xd2>
   356c6:	2300      	movs	r3, #0
   356c8:	60a3      	str	r3, [r4, #8]
   356ca:	6963      	ldr	r3, [r4, #20]
   356cc:	425b      	negs	r3, r3
   356ce:	61a3      	str	r3, [r4, #24]
   356d0:	2000      	movs	r0, #0
   356d2:	6923      	ldr	r3, [r4, #16]
   356d4:	4283      	cmp	r3, r0
   356d6:	d1be      	bne.n	35656 <__swsetup_r+0x3e>
   356d8:	230c      	movs	r3, #12
   356da:	5ee2      	ldrsh	r2, [r4, r3]
   356dc:	0613      	lsls	r3, r2, #24
   356de:	d5ba      	bpl.n	35656 <__swsetup_r+0x3e>
   356e0:	2340      	movs	r3, #64	; 0x40
   356e2:	4313      	orrs	r3, r2
   356e4:	81a3      	strh	r3, [r4, #12]
   356e6:	3801      	subs	r0, #1
   356e8:	e7b5      	b.n	35656 <__swsetup_r+0x3e>
   356ea:	0792      	lsls	r2, r2, #30
   356ec:	d400      	bmi.n	356f0 <__swsetup_r+0xd8>
   356ee:	6963      	ldr	r3, [r4, #20]
   356f0:	60a3      	str	r3, [r4, #8]
   356f2:	e7ed      	b.n	356d0 <__swsetup_r+0xb8>
   356f4:	20000130 	.word	0x20000130
   356f8:	0003aa00 	.word	0x0003aa00
   356fc:	0003aa20 	.word	0x0003aa20
   35700:	0003a9e0 	.word	0x0003a9e0

00035704 <__sflush_r>:
   35704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35706:	898a      	ldrh	r2, [r1, #12]
   35708:	0005      	movs	r5, r0
   3570a:	000c      	movs	r4, r1
   3570c:	0713      	lsls	r3, r2, #28
   3570e:	d460      	bmi.n	357d2 <__sflush_r+0xce>
   35710:	684b      	ldr	r3, [r1, #4]
   35712:	2b00      	cmp	r3, #0
   35714:	dc04      	bgt.n	35720 <__sflush_r+0x1c>
   35716:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   35718:	2b00      	cmp	r3, #0
   3571a:	dc01      	bgt.n	35720 <__sflush_r+0x1c>
   3571c:	2000      	movs	r0, #0
   3571e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35720:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35722:	2f00      	cmp	r7, #0
   35724:	d0fa      	beq.n	3571c <__sflush_r+0x18>
   35726:	2300      	movs	r3, #0
   35728:	682e      	ldr	r6, [r5, #0]
   3572a:	602b      	str	r3, [r5, #0]
   3572c:	2380      	movs	r3, #128	; 0x80
   3572e:	015b      	lsls	r3, r3, #5
   35730:	401a      	ands	r2, r3
   35732:	d034      	beq.n	3579e <__sflush_r+0x9a>
   35734:	6d60      	ldr	r0, [r4, #84]	; 0x54
   35736:	89a3      	ldrh	r3, [r4, #12]
   35738:	075b      	lsls	r3, r3, #29
   3573a:	d506      	bpl.n	3574a <__sflush_r+0x46>
   3573c:	6863      	ldr	r3, [r4, #4]
   3573e:	1ac0      	subs	r0, r0, r3
   35740:	6b63      	ldr	r3, [r4, #52]	; 0x34
   35742:	2b00      	cmp	r3, #0
   35744:	d001      	beq.n	3574a <__sflush_r+0x46>
   35746:	6c23      	ldr	r3, [r4, #64]	; 0x40
   35748:	1ac0      	subs	r0, r0, r3
   3574a:	0002      	movs	r2, r0
   3574c:	6a21      	ldr	r1, [r4, #32]
   3574e:	2300      	movs	r3, #0
   35750:	0028      	movs	r0, r5
   35752:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35754:	47b8      	blx	r7
   35756:	89a1      	ldrh	r1, [r4, #12]
   35758:	1c43      	adds	r3, r0, #1
   3575a:	d106      	bne.n	3576a <__sflush_r+0x66>
   3575c:	682b      	ldr	r3, [r5, #0]
   3575e:	2b1d      	cmp	r3, #29
   35760:	d831      	bhi.n	357c6 <__sflush_r+0xc2>
   35762:	4a2c      	ldr	r2, [pc, #176]	; (35814 <__sflush_r+0x110>)
   35764:	40da      	lsrs	r2, r3
   35766:	07d3      	lsls	r3, r2, #31
   35768:	d52d      	bpl.n	357c6 <__sflush_r+0xc2>
   3576a:	2300      	movs	r3, #0
   3576c:	6063      	str	r3, [r4, #4]
   3576e:	6923      	ldr	r3, [r4, #16]
   35770:	6023      	str	r3, [r4, #0]
   35772:	04cb      	lsls	r3, r1, #19
   35774:	d505      	bpl.n	35782 <__sflush_r+0x7e>
   35776:	1c43      	adds	r3, r0, #1
   35778:	d102      	bne.n	35780 <__sflush_r+0x7c>
   3577a:	682b      	ldr	r3, [r5, #0]
   3577c:	2b00      	cmp	r3, #0
   3577e:	d100      	bne.n	35782 <__sflush_r+0x7e>
   35780:	6560      	str	r0, [r4, #84]	; 0x54
   35782:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35784:	602e      	str	r6, [r5, #0]
   35786:	2900      	cmp	r1, #0
   35788:	d0c8      	beq.n	3571c <__sflush_r+0x18>
   3578a:	0023      	movs	r3, r4
   3578c:	3344      	adds	r3, #68	; 0x44
   3578e:	4299      	cmp	r1, r3
   35790:	d002      	beq.n	35798 <__sflush_r+0x94>
   35792:	0028      	movs	r0, r5
   35794:	f7ff fbee 	bl	34f74 <_free_r>
   35798:	2000      	movs	r0, #0
   3579a:	6360      	str	r0, [r4, #52]	; 0x34
   3579c:	e7bf      	b.n	3571e <__sflush_r+0x1a>
   3579e:	2301      	movs	r3, #1
   357a0:	6a21      	ldr	r1, [r4, #32]
   357a2:	0028      	movs	r0, r5
   357a4:	47b8      	blx	r7
   357a6:	1c43      	adds	r3, r0, #1
   357a8:	d1c5      	bne.n	35736 <__sflush_r+0x32>
   357aa:	682b      	ldr	r3, [r5, #0]
   357ac:	2b00      	cmp	r3, #0
   357ae:	d0c2      	beq.n	35736 <__sflush_r+0x32>
   357b0:	2b1d      	cmp	r3, #29
   357b2:	d001      	beq.n	357b8 <__sflush_r+0xb4>
   357b4:	2b16      	cmp	r3, #22
   357b6:	d101      	bne.n	357bc <__sflush_r+0xb8>
   357b8:	602e      	str	r6, [r5, #0]
   357ba:	e7af      	b.n	3571c <__sflush_r+0x18>
   357bc:	2340      	movs	r3, #64	; 0x40
   357be:	89a2      	ldrh	r2, [r4, #12]
   357c0:	4313      	orrs	r3, r2
   357c2:	81a3      	strh	r3, [r4, #12]
   357c4:	e7ab      	b.n	3571e <__sflush_r+0x1a>
   357c6:	2340      	movs	r3, #64	; 0x40
   357c8:	430b      	orrs	r3, r1
   357ca:	2001      	movs	r0, #1
   357cc:	81a3      	strh	r3, [r4, #12]
   357ce:	4240      	negs	r0, r0
   357d0:	e7a5      	b.n	3571e <__sflush_r+0x1a>
   357d2:	690f      	ldr	r7, [r1, #16]
   357d4:	2f00      	cmp	r7, #0
   357d6:	d0a1      	beq.n	3571c <__sflush_r+0x18>
   357d8:	680b      	ldr	r3, [r1, #0]
   357da:	600f      	str	r7, [r1, #0]
   357dc:	1bdb      	subs	r3, r3, r7
   357de:	9301      	str	r3, [sp, #4]
   357e0:	2300      	movs	r3, #0
   357e2:	0792      	lsls	r2, r2, #30
   357e4:	d100      	bne.n	357e8 <__sflush_r+0xe4>
   357e6:	694b      	ldr	r3, [r1, #20]
   357e8:	60a3      	str	r3, [r4, #8]
   357ea:	9b01      	ldr	r3, [sp, #4]
   357ec:	2b00      	cmp	r3, #0
   357ee:	dc00      	bgt.n	357f2 <__sflush_r+0xee>
   357f0:	e794      	b.n	3571c <__sflush_r+0x18>
   357f2:	9b01      	ldr	r3, [sp, #4]
   357f4:	003a      	movs	r2, r7
   357f6:	6a21      	ldr	r1, [r4, #32]
   357f8:	0028      	movs	r0, r5
   357fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   357fc:	47b0      	blx	r6
   357fe:	2800      	cmp	r0, #0
   35800:	dc03      	bgt.n	3580a <__sflush_r+0x106>
   35802:	2340      	movs	r3, #64	; 0x40
   35804:	89a2      	ldrh	r2, [r4, #12]
   35806:	4313      	orrs	r3, r2
   35808:	e7df      	b.n	357ca <__sflush_r+0xc6>
   3580a:	9b01      	ldr	r3, [sp, #4]
   3580c:	183f      	adds	r7, r7, r0
   3580e:	1a1b      	subs	r3, r3, r0
   35810:	9301      	str	r3, [sp, #4]
   35812:	e7ea      	b.n	357ea <__sflush_r+0xe6>
   35814:	20400001 	.word	0x20400001

00035818 <_fflush_r>:
   35818:	690b      	ldr	r3, [r1, #16]
   3581a:	b570      	push	{r4, r5, r6, lr}
   3581c:	0005      	movs	r5, r0
   3581e:	000c      	movs	r4, r1
   35820:	2b00      	cmp	r3, #0
   35822:	d101      	bne.n	35828 <_fflush_r+0x10>
   35824:	2000      	movs	r0, #0
   35826:	bd70      	pop	{r4, r5, r6, pc}
   35828:	2800      	cmp	r0, #0
   3582a:	d004      	beq.n	35836 <_fflush_r+0x1e>
   3582c:	6983      	ldr	r3, [r0, #24]
   3582e:	2b00      	cmp	r3, #0
   35830:	d101      	bne.n	35836 <_fflush_r+0x1e>
   35832:	f000 f85f 	bl	358f4 <__sinit>
   35836:	4b0b      	ldr	r3, [pc, #44]	; (35864 <_fflush_r+0x4c>)
   35838:	429c      	cmp	r4, r3
   3583a:	d109      	bne.n	35850 <_fflush_r+0x38>
   3583c:	686c      	ldr	r4, [r5, #4]
   3583e:	220c      	movs	r2, #12
   35840:	5ea3      	ldrsh	r3, [r4, r2]
   35842:	2b00      	cmp	r3, #0
   35844:	d0ee      	beq.n	35824 <_fflush_r+0xc>
   35846:	0021      	movs	r1, r4
   35848:	0028      	movs	r0, r5
   3584a:	f7ff ff5b 	bl	35704 <__sflush_r>
   3584e:	e7ea      	b.n	35826 <_fflush_r+0xe>
   35850:	4b05      	ldr	r3, [pc, #20]	; (35868 <_fflush_r+0x50>)
   35852:	429c      	cmp	r4, r3
   35854:	d101      	bne.n	3585a <_fflush_r+0x42>
   35856:	68ac      	ldr	r4, [r5, #8]
   35858:	e7f1      	b.n	3583e <_fflush_r+0x26>
   3585a:	4b04      	ldr	r3, [pc, #16]	; (3586c <_fflush_r+0x54>)
   3585c:	429c      	cmp	r4, r3
   3585e:	d1ee      	bne.n	3583e <_fflush_r+0x26>
   35860:	68ec      	ldr	r4, [r5, #12]
   35862:	e7ec      	b.n	3583e <_fflush_r+0x26>
   35864:	0003aa00 	.word	0x0003aa00
   35868:	0003aa20 	.word	0x0003aa20
   3586c:	0003a9e0 	.word	0x0003a9e0

00035870 <_cleanup_r>:
   35870:	b510      	push	{r4, lr}
   35872:	4902      	ldr	r1, [pc, #8]	; (3587c <_cleanup_r+0xc>)
   35874:	f000 f8b2 	bl	359dc <_fwalk_reent>
   35878:	bd10      	pop	{r4, pc}
   3587a:	46c0      	nop			; (mov r8, r8)
   3587c:	00035819 	.word	0x00035819

00035880 <std.isra.0>:
   35880:	2300      	movs	r3, #0
   35882:	b510      	push	{r4, lr}
   35884:	0004      	movs	r4, r0
   35886:	6003      	str	r3, [r0, #0]
   35888:	6043      	str	r3, [r0, #4]
   3588a:	6083      	str	r3, [r0, #8]
   3588c:	8181      	strh	r1, [r0, #12]
   3588e:	6643      	str	r3, [r0, #100]	; 0x64
   35890:	81c2      	strh	r2, [r0, #14]
   35892:	6103      	str	r3, [r0, #16]
   35894:	6143      	str	r3, [r0, #20]
   35896:	6183      	str	r3, [r0, #24]
   35898:	0019      	movs	r1, r3
   3589a:	2208      	movs	r2, #8
   3589c:	305c      	adds	r0, #92	; 0x5c
   3589e:	f7ff fb60 	bl	34f62 <memset>
   358a2:	4b05      	ldr	r3, [pc, #20]	; (358b8 <std.isra.0+0x38>)
   358a4:	6224      	str	r4, [r4, #32]
   358a6:	6263      	str	r3, [r4, #36]	; 0x24
   358a8:	4b04      	ldr	r3, [pc, #16]	; (358bc <std.isra.0+0x3c>)
   358aa:	62a3      	str	r3, [r4, #40]	; 0x28
   358ac:	4b04      	ldr	r3, [pc, #16]	; (358c0 <std.isra.0+0x40>)
   358ae:	62e3      	str	r3, [r4, #44]	; 0x2c
   358b0:	4b04      	ldr	r3, [pc, #16]	; (358c4 <std.isra.0+0x44>)
   358b2:	6323      	str	r3, [r4, #48]	; 0x30
   358b4:	bd10      	pop	{r4, pc}
   358b6:	46c0      	nop			; (mov r8, r8)
   358b8:	0003611d 	.word	0x0003611d
   358bc:	00036145 	.word	0x00036145
   358c0:	0003617d 	.word	0x0003617d
   358c4:	000361a9 	.word	0x000361a9

000358c8 <__sfmoreglue>:
   358c8:	b570      	push	{r4, r5, r6, lr}
   358ca:	2568      	movs	r5, #104	; 0x68
   358cc:	1e4a      	subs	r2, r1, #1
   358ce:	4355      	muls	r5, r2
   358d0:	000e      	movs	r6, r1
   358d2:	0029      	movs	r1, r5
   358d4:	3174      	adds	r1, #116	; 0x74
   358d6:	f7ff fb97 	bl	35008 <_malloc_r>
   358da:	1e04      	subs	r4, r0, #0
   358dc:	d008      	beq.n	358f0 <__sfmoreglue+0x28>
   358de:	2100      	movs	r1, #0
   358e0:	002a      	movs	r2, r5
   358e2:	6001      	str	r1, [r0, #0]
   358e4:	6046      	str	r6, [r0, #4]
   358e6:	300c      	adds	r0, #12
   358e8:	60a0      	str	r0, [r4, #8]
   358ea:	3268      	adds	r2, #104	; 0x68
   358ec:	f7ff fb39 	bl	34f62 <memset>
   358f0:	0020      	movs	r0, r4
   358f2:	bd70      	pop	{r4, r5, r6, pc}

000358f4 <__sinit>:
   358f4:	6983      	ldr	r3, [r0, #24]
   358f6:	b513      	push	{r0, r1, r4, lr}
   358f8:	0004      	movs	r4, r0
   358fa:	2b00      	cmp	r3, #0
   358fc:	d128      	bne.n	35950 <__sinit+0x5c>
   358fe:	6483      	str	r3, [r0, #72]	; 0x48
   35900:	64c3      	str	r3, [r0, #76]	; 0x4c
   35902:	6503      	str	r3, [r0, #80]	; 0x50
   35904:	4b13      	ldr	r3, [pc, #76]	; (35954 <__sinit+0x60>)
   35906:	4a14      	ldr	r2, [pc, #80]	; (35958 <__sinit+0x64>)
   35908:	681b      	ldr	r3, [r3, #0]
   3590a:	6282      	str	r2, [r0, #40]	; 0x28
   3590c:	9301      	str	r3, [sp, #4]
   3590e:	4298      	cmp	r0, r3
   35910:	d101      	bne.n	35916 <__sinit+0x22>
   35912:	2301      	movs	r3, #1
   35914:	6183      	str	r3, [r0, #24]
   35916:	0020      	movs	r0, r4
   35918:	f000 f820 	bl	3595c <__sfp>
   3591c:	6060      	str	r0, [r4, #4]
   3591e:	0020      	movs	r0, r4
   35920:	f000 f81c 	bl	3595c <__sfp>
   35924:	60a0      	str	r0, [r4, #8]
   35926:	0020      	movs	r0, r4
   35928:	f000 f818 	bl	3595c <__sfp>
   3592c:	2200      	movs	r2, #0
   3592e:	60e0      	str	r0, [r4, #12]
   35930:	2104      	movs	r1, #4
   35932:	6860      	ldr	r0, [r4, #4]
   35934:	f7ff ffa4 	bl	35880 <std.isra.0>
   35938:	2201      	movs	r2, #1
   3593a:	2109      	movs	r1, #9
   3593c:	68a0      	ldr	r0, [r4, #8]
   3593e:	f7ff ff9f 	bl	35880 <std.isra.0>
   35942:	2202      	movs	r2, #2
   35944:	2112      	movs	r1, #18
   35946:	68e0      	ldr	r0, [r4, #12]
   35948:	f7ff ff9a 	bl	35880 <std.isra.0>
   3594c:	2301      	movs	r3, #1
   3594e:	61a3      	str	r3, [r4, #24]
   35950:	bd13      	pop	{r0, r1, r4, pc}
   35952:	46c0      	nop			; (mov r8, r8)
   35954:	0003a9dc 	.word	0x0003a9dc
   35958:	00035871 	.word	0x00035871

0003595c <__sfp>:
   3595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3595e:	4b1e      	ldr	r3, [pc, #120]	; (359d8 <__sfp+0x7c>)
   35960:	0007      	movs	r7, r0
   35962:	681e      	ldr	r6, [r3, #0]
   35964:	69b3      	ldr	r3, [r6, #24]
   35966:	2b00      	cmp	r3, #0
   35968:	d102      	bne.n	35970 <__sfp+0x14>
   3596a:	0030      	movs	r0, r6
   3596c:	f7ff ffc2 	bl	358f4 <__sinit>
   35970:	3648      	adds	r6, #72	; 0x48
   35972:	68b4      	ldr	r4, [r6, #8]
   35974:	6873      	ldr	r3, [r6, #4]
   35976:	3b01      	subs	r3, #1
   35978:	d504      	bpl.n	35984 <__sfp+0x28>
   3597a:	6833      	ldr	r3, [r6, #0]
   3597c:	2b00      	cmp	r3, #0
   3597e:	d007      	beq.n	35990 <__sfp+0x34>
   35980:	6836      	ldr	r6, [r6, #0]
   35982:	e7f6      	b.n	35972 <__sfp+0x16>
   35984:	220c      	movs	r2, #12
   35986:	5ea5      	ldrsh	r5, [r4, r2]
   35988:	2d00      	cmp	r5, #0
   3598a:	d00d      	beq.n	359a8 <__sfp+0x4c>
   3598c:	3468      	adds	r4, #104	; 0x68
   3598e:	e7f2      	b.n	35976 <__sfp+0x1a>
   35990:	2104      	movs	r1, #4
   35992:	0038      	movs	r0, r7
   35994:	f7ff ff98 	bl	358c8 <__sfmoreglue>
   35998:	6030      	str	r0, [r6, #0]
   3599a:	2800      	cmp	r0, #0
   3599c:	d1f0      	bne.n	35980 <__sfp+0x24>
   3599e:	230c      	movs	r3, #12
   359a0:	0004      	movs	r4, r0
   359a2:	603b      	str	r3, [r7, #0]
   359a4:	0020      	movs	r0, r4
   359a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   359a8:	2301      	movs	r3, #1
   359aa:	0020      	movs	r0, r4
   359ac:	425b      	negs	r3, r3
   359ae:	81e3      	strh	r3, [r4, #14]
   359b0:	3302      	adds	r3, #2
   359b2:	81a3      	strh	r3, [r4, #12]
   359b4:	6665      	str	r5, [r4, #100]	; 0x64
   359b6:	6025      	str	r5, [r4, #0]
   359b8:	60a5      	str	r5, [r4, #8]
   359ba:	6065      	str	r5, [r4, #4]
   359bc:	6125      	str	r5, [r4, #16]
   359be:	6165      	str	r5, [r4, #20]
   359c0:	61a5      	str	r5, [r4, #24]
   359c2:	2208      	movs	r2, #8
   359c4:	0029      	movs	r1, r5
   359c6:	305c      	adds	r0, #92	; 0x5c
   359c8:	f7ff facb 	bl	34f62 <memset>
   359cc:	6365      	str	r5, [r4, #52]	; 0x34
   359ce:	63a5      	str	r5, [r4, #56]	; 0x38
   359d0:	64a5      	str	r5, [r4, #72]	; 0x48
   359d2:	64e5      	str	r5, [r4, #76]	; 0x4c
   359d4:	e7e6      	b.n	359a4 <__sfp+0x48>
   359d6:	46c0      	nop			; (mov r8, r8)
   359d8:	0003a9dc 	.word	0x0003a9dc

000359dc <_fwalk_reent>:
   359dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   359de:	0004      	movs	r4, r0
   359e0:	0007      	movs	r7, r0
   359e2:	2600      	movs	r6, #0
   359e4:	9101      	str	r1, [sp, #4]
   359e6:	3448      	adds	r4, #72	; 0x48
   359e8:	2c00      	cmp	r4, #0
   359ea:	d101      	bne.n	359f0 <_fwalk_reent+0x14>
   359ec:	0030      	movs	r0, r6
   359ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   359f0:	6863      	ldr	r3, [r4, #4]
   359f2:	68a5      	ldr	r5, [r4, #8]
   359f4:	9300      	str	r3, [sp, #0]
   359f6:	9b00      	ldr	r3, [sp, #0]
   359f8:	3b01      	subs	r3, #1
   359fa:	9300      	str	r3, [sp, #0]
   359fc:	d501      	bpl.n	35a02 <_fwalk_reent+0x26>
   359fe:	6824      	ldr	r4, [r4, #0]
   35a00:	e7f2      	b.n	359e8 <_fwalk_reent+0xc>
   35a02:	89ab      	ldrh	r3, [r5, #12]
   35a04:	2b01      	cmp	r3, #1
   35a06:	d908      	bls.n	35a1a <_fwalk_reent+0x3e>
   35a08:	220e      	movs	r2, #14
   35a0a:	5eab      	ldrsh	r3, [r5, r2]
   35a0c:	3301      	adds	r3, #1
   35a0e:	d004      	beq.n	35a1a <_fwalk_reent+0x3e>
   35a10:	0029      	movs	r1, r5
   35a12:	0038      	movs	r0, r7
   35a14:	9b01      	ldr	r3, [sp, #4]
   35a16:	4798      	blx	r3
   35a18:	4306      	orrs	r6, r0
   35a1a:	3568      	adds	r5, #104	; 0x68
   35a1c:	e7eb      	b.n	359f6 <_fwalk_reent+0x1a>

00035a1e <__locale_ctype_ptr_l>:
   35a1e:	30ec      	adds	r0, #236	; 0xec
   35a20:	6800      	ldr	r0, [r0, #0]
   35a22:	4770      	bx	lr

00035a24 <__locale_ctype_ptr>:
   35a24:	4b04      	ldr	r3, [pc, #16]	; (35a38 <__locale_ctype_ptr+0x14>)
   35a26:	681b      	ldr	r3, [r3, #0]
   35a28:	6a1b      	ldr	r3, [r3, #32]
   35a2a:	2b00      	cmp	r3, #0
   35a2c:	d100      	bne.n	35a30 <__locale_ctype_ptr+0xc>
   35a2e:	4b03      	ldr	r3, [pc, #12]	; (35a3c <__locale_ctype_ptr+0x18>)
   35a30:	33ec      	adds	r3, #236	; 0xec
   35a32:	6818      	ldr	r0, [r3, #0]
   35a34:	4770      	bx	lr
   35a36:	46c0      	nop			; (mov r8, r8)
   35a38:	20000130 	.word	0x20000130
   35a3c:	20000194 	.word	0x20000194

00035a40 <__swhatbuf_r>:
   35a40:	b570      	push	{r4, r5, r6, lr}
   35a42:	000e      	movs	r6, r1
   35a44:	001d      	movs	r5, r3
   35a46:	230e      	movs	r3, #14
   35a48:	5ec9      	ldrsh	r1, [r1, r3]
   35a4a:	b090      	sub	sp, #64	; 0x40
   35a4c:	0014      	movs	r4, r2
   35a4e:	2900      	cmp	r1, #0
   35a50:	da07      	bge.n	35a62 <__swhatbuf_r+0x22>
   35a52:	2300      	movs	r3, #0
   35a54:	602b      	str	r3, [r5, #0]
   35a56:	89b3      	ldrh	r3, [r6, #12]
   35a58:	061b      	lsls	r3, r3, #24
   35a5a:	d411      	bmi.n	35a80 <__swhatbuf_r+0x40>
   35a5c:	2380      	movs	r3, #128	; 0x80
   35a5e:	00db      	lsls	r3, r3, #3
   35a60:	e00f      	b.n	35a82 <__swhatbuf_r+0x42>
   35a62:	aa01      	add	r2, sp, #4
   35a64:	f000 fbe6 	bl	36234 <_fstat_r>
   35a68:	2800      	cmp	r0, #0
   35a6a:	dbf2      	blt.n	35a52 <__swhatbuf_r+0x12>
   35a6c:	22f0      	movs	r2, #240	; 0xf0
   35a6e:	9b02      	ldr	r3, [sp, #8]
   35a70:	0212      	lsls	r2, r2, #8
   35a72:	4013      	ands	r3, r2
   35a74:	4a05      	ldr	r2, [pc, #20]	; (35a8c <__swhatbuf_r+0x4c>)
   35a76:	189b      	adds	r3, r3, r2
   35a78:	425a      	negs	r2, r3
   35a7a:	4153      	adcs	r3, r2
   35a7c:	602b      	str	r3, [r5, #0]
   35a7e:	e7ed      	b.n	35a5c <__swhatbuf_r+0x1c>
   35a80:	2340      	movs	r3, #64	; 0x40
   35a82:	2000      	movs	r0, #0
   35a84:	6023      	str	r3, [r4, #0]
   35a86:	b010      	add	sp, #64	; 0x40
   35a88:	bd70      	pop	{r4, r5, r6, pc}
   35a8a:	46c0      	nop			; (mov r8, r8)
   35a8c:	ffffe000 	.word	0xffffe000

00035a90 <__smakebuf_r>:
   35a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35a92:	2602      	movs	r6, #2
   35a94:	898b      	ldrh	r3, [r1, #12]
   35a96:	0005      	movs	r5, r0
   35a98:	000c      	movs	r4, r1
   35a9a:	4233      	tst	r3, r6
   35a9c:	d006      	beq.n	35aac <__smakebuf_r+0x1c>
   35a9e:	0023      	movs	r3, r4
   35aa0:	3347      	adds	r3, #71	; 0x47
   35aa2:	6023      	str	r3, [r4, #0]
   35aa4:	6123      	str	r3, [r4, #16]
   35aa6:	2301      	movs	r3, #1
   35aa8:	6163      	str	r3, [r4, #20]
   35aaa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   35aac:	ab01      	add	r3, sp, #4
   35aae:	466a      	mov	r2, sp
   35ab0:	f7ff ffc6 	bl	35a40 <__swhatbuf_r>
   35ab4:	9900      	ldr	r1, [sp, #0]
   35ab6:	0007      	movs	r7, r0
   35ab8:	0028      	movs	r0, r5
   35aba:	f7ff faa5 	bl	35008 <_malloc_r>
   35abe:	2800      	cmp	r0, #0
   35ac0:	d108      	bne.n	35ad4 <__smakebuf_r+0x44>
   35ac2:	220c      	movs	r2, #12
   35ac4:	5ea3      	ldrsh	r3, [r4, r2]
   35ac6:	059a      	lsls	r2, r3, #22
   35ac8:	d4ef      	bmi.n	35aaa <__smakebuf_r+0x1a>
   35aca:	2203      	movs	r2, #3
   35acc:	4393      	bics	r3, r2
   35ace:	431e      	orrs	r6, r3
   35ad0:	81a6      	strh	r6, [r4, #12]
   35ad2:	e7e4      	b.n	35a9e <__smakebuf_r+0xe>
   35ad4:	4b0f      	ldr	r3, [pc, #60]	; (35b14 <__smakebuf_r+0x84>)
   35ad6:	62ab      	str	r3, [r5, #40]	; 0x28
   35ad8:	2380      	movs	r3, #128	; 0x80
   35ada:	89a2      	ldrh	r2, [r4, #12]
   35adc:	6020      	str	r0, [r4, #0]
   35ade:	4313      	orrs	r3, r2
   35ae0:	81a3      	strh	r3, [r4, #12]
   35ae2:	9b00      	ldr	r3, [sp, #0]
   35ae4:	6120      	str	r0, [r4, #16]
   35ae6:	6163      	str	r3, [r4, #20]
   35ae8:	9b01      	ldr	r3, [sp, #4]
   35aea:	2b00      	cmp	r3, #0
   35aec:	d00d      	beq.n	35b0a <__smakebuf_r+0x7a>
   35aee:	230e      	movs	r3, #14
   35af0:	5ee1      	ldrsh	r1, [r4, r3]
   35af2:	0028      	movs	r0, r5
   35af4:	f000 fbb0 	bl	36258 <_isatty_r>
   35af8:	2800      	cmp	r0, #0
   35afa:	d006      	beq.n	35b0a <__smakebuf_r+0x7a>
   35afc:	2203      	movs	r2, #3
   35afe:	89a3      	ldrh	r3, [r4, #12]
   35b00:	4393      	bics	r3, r2
   35b02:	001a      	movs	r2, r3
   35b04:	2301      	movs	r3, #1
   35b06:	4313      	orrs	r3, r2
   35b08:	81a3      	strh	r3, [r4, #12]
   35b0a:	89a0      	ldrh	r0, [r4, #12]
   35b0c:	4338      	orrs	r0, r7
   35b0e:	81a0      	strh	r0, [r4, #12]
   35b10:	e7cb      	b.n	35aaa <__smakebuf_r+0x1a>
   35b12:	46c0      	nop			; (mov r8, r8)
   35b14:	00035871 	.word	0x00035871

00035b18 <__ascii_mbtowc>:
   35b18:	b082      	sub	sp, #8
   35b1a:	2900      	cmp	r1, #0
   35b1c:	d100      	bne.n	35b20 <__ascii_mbtowc+0x8>
   35b1e:	a901      	add	r1, sp, #4
   35b20:	1e10      	subs	r0, r2, #0
   35b22:	d006      	beq.n	35b32 <__ascii_mbtowc+0x1a>
   35b24:	2b00      	cmp	r3, #0
   35b26:	d006      	beq.n	35b36 <__ascii_mbtowc+0x1e>
   35b28:	7813      	ldrb	r3, [r2, #0]
   35b2a:	600b      	str	r3, [r1, #0]
   35b2c:	7810      	ldrb	r0, [r2, #0]
   35b2e:	1e43      	subs	r3, r0, #1
   35b30:	4198      	sbcs	r0, r3
   35b32:	b002      	add	sp, #8
   35b34:	4770      	bx	lr
   35b36:	2002      	movs	r0, #2
   35b38:	4240      	negs	r0, r0
   35b3a:	e7fa      	b.n	35b32 <__ascii_mbtowc+0x1a>

00035b3c <__malloc_lock>:
   35b3c:	4770      	bx	lr

00035b3e <__malloc_unlock>:
   35b3e:	4770      	bx	lr

00035b40 <__ssputs_r>:
   35b40:	b5f0      	push	{r4, r5, r6, r7, lr}
   35b42:	688e      	ldr	r6, [r1, #8]
   35b44:	b085      	sub	sp, #20
   35b46:	0007      	movs	r7, r0
   35b48:	000c      	movs	r4, r1
   35b4a:	9203      	str	r2, [sp, #12]
   35b4c:	9301      	str	r3, [sp, #4]
   35b4e:	429e      	cmp	r6, r3
   35b50:	d839      	bhi.n	35bc6 <__ssputs_r+0x86>
   35b52:	2390      	movs	r3, #144	; 0x90
   35b54:	898a      	ldrh	r2, [r1, #12]
   35b56:	00db      	lsls	r3, r3, #3
   35b58:	421a      	tst	r2, r3
   35b5a:	d034      	beq.n	35bc6 <__ssputs_r+0x86>
   35b5c:	2503      	movs	r5, #3
   35b5e:	6909      	ldr	r1, [r1, #16]
   35b60:	6823      	ldr	r3, [r4, #0]
   35b62:	1a5b      	subs	r3, r3, r1
   35b64:	9302      	str	r3, [sp, #8]
   35b66:	6963      	ldr	r3, [r4, #20]
   35b68:	9802      	ldr	r0, [sp, #8]
   35b6a:	435d      	muls	r5, r3
   35b6c:	0feb      	lsrs	r3, r5, #31
   35b6e:	195d      	adds	r5, r3, r5
   35b70:	9b01      	ldr	r3, [sp, #4]
   35b72:	106d      	asrs	r5, r5, #1
   35b74:	3301      	adds	r3, #1
   35b76:	181b      	adds	r3, r3, r0
   35b78:	42ab      	cmp	r3, r5
   35b7a:	d900      	bls.n	35b7e <__ssputs_r+0x3e>
   35b7c:	001d      	movs	r5, r3
   35b7e:	0553      	lsls	r3, r2, #21
   35b80:	d532      	bpl.n	35be8 <__ssputs_r+0xa8>
   35b82:	0029      	movs	r1, r5
   35b84:	0038      	movs	r0, r7
   35b86:	f7ff fa3f 	bl	35008 <_malloc_r>
   35b8a:	1e06      	subs	r6, r0, #0
   35b8c:	d109      	bne.n	35ba2 <__ssputs_r+0x62>
   35b8e:	230c      	movs	r3, #12
   35b90:	603b      	str	r3, [r7, #0]
   35b92:	2340      	movs	r3, #64	; 0x40
   35b94:	2001      	movs	r0, #1
   35b96:	89a2      	ldrh	r2, [r4, #12]
   35b98:	4240      	negs	r0, r0
   35b9a:	4313      	orrs	r3, r2
   35b9c:	81a3      	strh	r3, [r4, #12]
   35b9e:	b005      	add	sp, #20
   35ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35ba2:	9a02      	ldr	r2, [sp, #8]
   35ba4:	6921      	ldr	r1, [r4, #16]
   35ba6:	f7ff f9c1 	bl	34f2c <memcpy>
   35baa:	89a3      	ldrh	r3, [r4, #12]
   35bac:	4a14      	ldr	r2, [pc, #80]	; (35c00 <__ssputs_r+0xc0>)
   35bae:	401a      	ands	r2, r3
   35bb0:	2380      	movs	r3, #128	; 0x80
   35bb2:	4313      	orrs	r3, r2
   35bb4:	81a3      	strh	r3, [r4, #12]
   35bb6:	9b02      	ldr	r3, [sp, #8]
   35bb8:	6126      	str	r6, [r4, #16]
   35bba:	18f6      	adds	r6, r6, r3
   35bbc:	6026      	str	r6, [r4, #0]
   35bbe:	6165      	str	r5, [r4, #20]
   35bc0:	9e01      	ldr	r6, [sp, #4]
   35bc2:	1aed      	subs	r5, r5, r3
   35bc4:	60a5      	str	r5, [r4, #8]
   35bc6:	9b01      	ldr	r3, [sp, #4]
   35bc8:	42b3      	cmp	r3, r6
   35bca:	d200      	bcs.n	35bce <__ssputs_r+0x8e>
   35bcc:	001e      	movs	r6, r3
   35bce:	0032      	movs	r2, r6
   35bd0:	9903      	ldr	r1, [sp, #12]
   35bd2:	6820      	ldr	r0, [r4, #0]
   35bd4:	f7ff f9b3 	bl	34f3e <memmove>
   35bd8:	68a3      	ldr	r3, [r4, #8]
   35bda:	2000      	movs	r0, #0
   35bdc:	1b9b      	subs	r3, r3, r6
   35bde:	60a3      	str	r3, [r4, #8]
   35be0:	6823      	ldr	r3, [r4, #0]
   35be2:	199e      	adds	r6, r3, r6
   35be4:	6026      	str	r6, [r4, #0]
   35be6:	e7da      	b.n	35b9e <__ssputs_r+0x5e>
   35be8:	002a      	movs	r2, r5
   35bea:	0038      	movs	r0, r7
   35bec:	f000 fb65 	bl	362ba <_realloc_r>
   35bf0:	1e06      	subs	r6, r0, #0
   35bf2:	d1e0      	bne.n	35bb6 <__ssputs_r+0x76>
   35bf4:	6921      	ldr	r1, [r4, #16]
   35bf6:	0038      	movs	r0, r7
   35bf8:	f7ff f9bc 	bl	34f74 <_free_r>
   35bfc:	e7c7      	b.n	35b8e <__ssputs_r+0x4e>
   35bfe:	46c0      	nop			; (mov r8, r8)
   35c00:	fffffb7f 	.word	0xfffffb7f

00035c04 <_svfiprintf_r>:
   35c04:	b5f0      	push	{r4, r5, r6, r7, lr}
   35c06:	b09f      	sub	sp, #124	; 0x7c
   35c08:	9002      	str	r0, [sp, #8]
   35c0a:	9305      	str	r3, [sp, #20]
   35c0c:	898b      	ldrh	r3, [r1, #12]
   35c0e:	000f      	movs	r7, r1
   35c10:	0016      	movs	r6, r2
   35c12:	061b      	lsls	r3, r3, #24
   35c14:	d511      	bpl.n	35c3a <_svfiprintf_r+0x36>
   35c16:	690b      	ldr	r3, [r1, #16]
   35c18:	2b00      	cmp	r3, #0
   35c1a:	d10e      	bne.n	35c3a <_svfiprintf_r+0x36>
   35c1c:	2140      	movs	r1, #64	; 0x40
   35c1e:	f7ff f9f3 	bl	35008 <_malloc_r>
   35c22:	6038      	str	r0, [r7, #0]
   35c24:	6138      	str	r0, [r7, #16]
   35c26:	2800      	cmp	r0, #0
   35c28:	d105      	bne.n	35c36 <_svfiprintf_r+0x32>
   35c2a:	230c      	movs	r3, #12
   35c2c:	9a02      	ldr	r2, [sp, #8]
   35c2e:	3801      	subs	r0, #1
   35c30:	6013      	str	r3, [r2, #0]
   35c32:	b01f      	add	sp, #124	; 0x7c
   35c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35c36:	2340      	movs	r3, #64	; 0x40
   35c38:	617b      	str	r3, [r7, #20]
   35c3a:	2300      	movs	r3, #0
   35c3c:	ad06      	add	r5, sp, #24
   35c3e:	616b      	str	r3, [r5, #20]
   35c40:	3320      	adds	r3, #32
   35c42:	766b      	strb	r3, [r5, #25]
   35c44:	3310      	adds	r3, #16
   35c46:	76ab      	strb	r3, [r5, #26]
   35c48:	0034      	movs	r4, r6
   35c4a:	7823      	ldrb	r3, [r4, #0]
   35c4c:	2b00      	cmp	r3, #0
   35c4e:	d147      	bne.n	35ce0 <_svfiprintf_r+0xdc>
   35c50:	1ba3      	subs	r3, r4, r6
   35c52:	9304      	str	r3, [sp, #16]
   35c54:	d00d      	beq.n	35c72 <_svfiprintf_r+0x6e>
   35c56:	1ba3      	subs	r3, r4, r6
   35c58:	0032      	movs	r2, r6
   35c5a:	0039      	movs	r1, r7
   35c5c:	9802      	ldr	r0, [sp, #8]
   35c5e:	f7ff ff6f 	bl	35b40 <__ssputs_r>
   35c62:	1c43      	adds	r3, r0, #1
   35c64:	d100      	bne.n	35c68 <_svfiprintf_r+0x64>
   35c66:	e0b5      	b.n	35dd4 <_svfiprintf_r+0x1d0>
   35c68:	696a      	ldr	r2, [r5, #20]
   35c6a:	9b04      	ldr	r3, [sp, #16]
   35c6c:	4694      	mov	ip, r2
   35c6e:	4463      	add	r3, ip
   35c70:	616b      	str	r3, [r5, #20]
   35c72:	7823      	ldrb	r3, [r4, #0]
   35c74:	2b00      	cmp	r3, #0
   35c76:	d100      	bne.n	35c7a <_svfiprintf_r+0x76>
   35c78:	e0ac      	b.n	35dd4 <_svfiprintf_r+0x1d0>
   35c7a:	2201      	movs	r2, #1
   35c7c:	2300      	movs	r3, #0
   35c7e:	4252      	negs	r2, r2
   35c80:	606a      	str	r2, [r5, #4]
   35c82:	a902      	add	r1, sp, #8
   35c84:	3254      	adds	r2, #84	; 0x54
   35c86:	1852      	adds	r2, r2, r1
   35c88:	3401      	adds	r4, #1
   35c8a:	602b      	str	r3, [r5, #0]
   35c8c:	60eb      	str	r3, [r5, #12]
   35c8e:	60ab      	str	r3, [r5, #8]
   35c90:	7013      	strb	r3, [r2, #0]
   35c92:	65ab      	str	r3, [r5, #88]	; 0x58
   35c94:	4e58      	ldr	r6, [pc, #352]	; (35df8 <_svfiprintf_r+0x1f4>)
   35c96:	2205      	movs	r2, #5
   35c98:	7821      	ldrb	r1, [r4, #0]
   35c9a:	0030      	movs	r0, r6
   35c9c:	f000 fb02 	bl	362a4 <memchr>
   35ca0:	1c62      	adds	r2, r4, #1
   35ca2:	2800      	cmp	r0, #0
   35ca4:	d120      	bne.n	35ce8 <_svfiprintf_r+0xe4>
   35ca6:	6829      	ldr	r1, [r5, #0]
   35ca8:	06cb      	lsls	r3, r1, #27
   35caa:	d504      	bpl.n	35cb6 <_svfiprintf_r+0xb2>
   35cac:	2353      	movs	r3, #83	; 0x53
   35cae:	ae02      	add	r6, sp, #8
   35cb0:	3020      	adds	r0, #32
   35cb2:	199b      	adds	r3, r3, r6
   35cb4:	7018      	strb	r0, [r3, #0]
   35cb6:	070b      	lsls	r3, r1, #28
   35cb8:	d504      	bpl.n	35cc4 <_svfiprintf_r+0xc0>
   35cba:	2353      	movs	r3, #83	; 0x53
   35cbc:	202b      	movs	r0, #43	; 0x2b
   35cbe:	ae02      	add	r6, sp, #8
   35cc0:	199b      	adds	r3, r3, r6
   35cc2:	7018      	strb	r0, [r3, #0]
   35cc4:	7823      	ldrb	r3, [r4, #0]
   35cc6:	2b2a      	cmp	r3, #42	; 0x2a
   35cc8:	d016      	beq.n	35cf8 <_svfiprintf_r+0xf4>
   35cca:	2000      	movs	r0, #0
   35ccc:	210a      	movs	r1, #10
   35cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   35cd0:	7822      	ldrb	r2, [r4, #0]
   35cd2:	3a30      	subs	r2, #48	; 0x30
   35cd4:	2a09      	cmp	r2, #9
   35cd6:	d955      	bls.n	35d84 <_svfiprintf_r+0x180>
   35cd8:	2800      	cmp	r0, #0
   35cda:	d015      	beq.n	35d08 <_svfiprintf_r+0x104>
   35cdc:	9309      	str	r3, [sp, #36]	; 0x24
   35cde:	e013      	b.n	35d08 <_svfiprintf_r+0x104>
   35ce0:	2b25      	cmp	r3, #37	; 0x25
   35ce2:	d0b5      	beq.n	35c50 <_svfiprintf_r+0x4c>
   35ce4:	3401      	adds	r4, #1
   35ce6:	e7b0      	b.n	35c4a <_svfiprintf_r+0x46>
   35ce8:	2301      	movs	r3, #1
   35cea:	1b80      	subs	r0, r0, r6
   35cec:	4083      	lsls	r3, r0
   35cee:	6829      	ldr	r1, [r5, #0]
   35cf0:	0014      	movs	r4, r2
   35cf2:	430b      	orrs	r3, r1
   35cf4:	602b      	str	r3, [r5, #0]
   35cf6:	e7cd      	b.n	35c94 <_svfiprintf_r+0x90>
   35cf8:	9b05      	ldr	r3, [sp, #20]
   35cfa:	1d18      	adds	r0, r3, #4
   35cfc:	681b      	ldr	r3, [r3, #0]
   35cfe:	9005      	str	r0, [sp, #20]
   35d00:	2b00      	cmp	r3, #0
   35d02:	db39      	blt.n	35d78 <_svfiprintf_r+0x174>
   35d04:	9309      	str	r3, [sp, #36]	; 0x24
   35d06:	0014      	movs	r4, r2
   35d08:	7823      	ldrb	r3, [r4, #0]
   35d0a:	2b2e      	cmp	r3, #46	; 0x2e
   35d0c:	d10b      	bne.n	35d26 <_svfiprintf_r+0x122>
   35d0e:	7863      	ldrb	r3, [r4, #1]
   35d10:	1c62      	adds	r2, r4, #1
   35d12:	2b2a      	cmp	r3, #42	; 0x2a
   35d14:	d13e      	bne.n	35d94 <_svfiprintf_r+0x190>
   35d16:	9b05      	ldr	r3, [sp, #20]
   35d18:	3402      	adds	r4, #2
   35d1a:	1d1a      	adds	r2, r3, #4
   35d1c:	681b      	ldr	r3, [r3, #0]
   35d1e:	9205      	str	r2, [sp, #20]
   35d20:	2b00      	cmp	r3, #0
   35d22:	db34      	blt.n	35d8e <_svfiprintf_r+0x18a>
   35d24:	9307      	str	r3, [sp, #28]
   35d26:	4e35      	ldr	r6, [pc, #212]	; (35dfc <_svfiprintf_r+0x1f8>)
   35d28:	7821      	ldrb	r1, [r4, #0]
   35d2a:	2203      	movs	r2, #3
   35d2c:	0030      	movs	r0, r6
   35d2e:	f000 fab9 	bl	362a4 <memchr>
   35d32:	2800      	cmp	r0, #0
   35d34:	d006      	beq.n	35d44 <_svfiprintf_r+0x140>
   35d36:	2340      	movs	r3, #64	; 0x40
   35d38:	1b80      	subs	r0, r0, r6
   35d3a:	4083      	lsls	r3, r0
   35d3c:	682a      	ldr	r2, [r5, #0]
   35d3e:	3401      	adds	r4, #1
   35d40:	4313      	orrs	r3, r2
   35d42:	602b      	str	r3, [r5, #0]
   35d44:	7821      	ldrb	r1, [r4, #0]
   35d46:	2206      	movs	r2, #6
   35d48:	482d      	ldr	r0, [pc, #180]	; (35e00 <_svfiprintf_r+0x1fc>)
   35d4a:	1c66      	adds	r6, r4, #1
   35d4c:	7629      	strb	r1, [r5, #24]
   35d4e:	f000 faa9 	bl	362a4 <memchr>
   35d52:	2800      	cmp	r0, #0
   35d54:	d046      	beq.n	35de4 <_svfiprintf_r+0x1e0>
   35d56:	4b2b      	ldr	r3, [pc, #172]	; (35e04 <_svfiprintf_r+0x200>)
   35d58:	2b00      	cmp	r3, #0
   35d5a:	d12f      	bne.n	35dbc <_svfiprintf_r+0x1b8>
   35d5c:	6829      	ldr	r1, [r5, #0]
   35d5e:	9b05      	ldr	r3, [sp, #20]
   35d60:	2207      	movs	r2, #7
   35d62:	05c9      	lsls	r1, r1, #23
   35d64:	d528      	bpl.n	35db8 <_svfiprintf_r+0x1b4>
   35d66:	189b      	adds	r3, r3, r2
   35d68:	4393      	bics	r3, r2
   35d6a:	3308      	adds	r3, #8
   35d6c:	9305      	str	r3, [sp, #20]
   35d6e:	696b      	ldr	r3, [r5, #20]
   35d70:	9a03      	ldr	r2, [sp, #12]
   35d72:	189b      	adds	r3, r3, r2
   35d74:	616b      	str	r3, [r5, #20]
   35d76:	e767      	b.n	35c48 <_svfiprintf_r+0x44>
   35d78:	425b      	negs	r3, r3
   35d7a:	60eb      	str	r3, [r5, #12]
   35d7c:	2302      	movs	r3, #2
   35d7e:	430b      	orrs	r3, r1
   35d80:	602b      	str	r3, [r5, #0]
   35d82:	e7c0      	b.n	35d06 <_svfiprintf_r+0x102>
   35d84:	434b      	muls	r3, r1
   35d86:	3401      	adds	r4, #1
   35d88:	189b      	adds	r3, r3, r2
   35d8a:	2001      	movs	r0, #1
   35d8c:	e7a0      	b.n	35cd0 <_svfiprintf_r+0xcc>
   35d8e:	2301      	movs	r3, #1
   35d90:	425b      	negs	r3, r3
   35d92:	e7c7      	b.n	35d24 <_svfiprintf_r+0x120>
   35d94:	2300      	movs	r3, #0
   35d96:	0014      	movs	r4, r2
   35d98:	200a      	movs	r0, #10
   35d9a:	001a      	movs	r2, r3
   35d9c:	606b      	str	r3, [r5, #4]
   35d9e:	7821      	ldrb	r1, [r4, #0]
   35da0:	3930      	subs	r1, #48	; 0x30
   35da2:	2909      	cmp	r1, #9
   35da4:	d903      	bls.n	35dae <_svfiprintf_r+0x1aa>
   35da6:	2b00      	cmp	r3, #0
   35da8:	d0bd      	beq.n	35d26 <_svfiprintf_r+0x122>
   35daa:	9207      	str	r2, [sp, #28]
   35dac:	e7bb      	b.n	35d26 <_svfiprintf_r+0x122>
   35dae:	4342      	muls	r2, r0
   35db0:	3401      	adds	r4, #1
   35db2:	1852      	adds	r2, r2, r1
   35db4:	2301      	movs	r3, #1
   35db6:	e7f2      	b.n	35d9e <_svfiprintf_r+0x19a>
   35db8:	3307      	adds	r3, #7
   35dba:	e7d5      	b.n	35d68 <_svfiprintf_r+0x164>
   35dbc:	ab05      	add	r3, sp, #20
   35dbe:	9300      	str	r3, [sp, #0]
   35dc0:	003a      	movs	r2, r7
   35dc2:	4b11      	ldr	r3, [pc, #68]	; (35e08 <_svfiprintf_r+0x204>)
   35dc4:	0029      	movs	r1, r5
   35dc6:	9802      	ldr	r0, [sp, #8]
   35dc8:	e000      	b.n	35dcc <_svfiprintf_r+0x1c8>
   35dca:	bf00      	nop
   35dcc:	9003      	str	r0, [sp, #12]
   35dce:	9b03      	ldr	r3, [sp, #12]
   35dd0:	3301      	adds	r3, #1
   35dd2:	d1cc      	bne.n	35d6e <_svfiprintf_r+0x16a>
   35dd4:	89bb      	ldrh	r3, [r7, #12]
   35dd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   35dd8:	065b      	lsls	r3, r3, #25
   35dda:	d400      	bmi.n	35dde <_svfiprintf_r+0x1da>
   35ddc:	e729      	b.n	35c32 <_svfiprintf_r+0x2e>
   35dde:	2001      	movs	r0, #1
   35de0:	4240      	negs	r0, r0
   35de2:	e726      	b.n	35c32 <_svfiprintf_r+0x2e>
   35de4:	ab05      	add	r3, sp, #20
   35de6:	9300      	str	r3, [sp, #0]
   35de8:	003a      	movs	r2, r7
   35dea:	4b07      	ldr	r3, [pc, #28]	; (35e08 <_svfiprintf_r+0x204>)
   35dec:	0029      	movs	r1, r5
   35dee:	9802      	ldr	r0, [sp, #8]
   35df0:	f000 f87a 	bl	35ee8 <_printf_i>
   35df4:	e7ea      	b.n	35dcc <_svfiprintf_r+0x1c8>
   35df6:	46c0      	nop			; (mov r8, r8)
   35df8:	0003aa4a 	.word	0x0003aa4a
   35dfc:	0003aa50 	.word	0x0003aa50
   35e00:	0003aa54 	.word	0x0003aa54
   35e04:	00000000 	.word	0x00000000
   35e08:	00035b41 	.word	0x00035b41

00035e0c <_printf_common>:
   35e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35e0e:	0015      	movs	r5, r2
   35e10:	9301      	str	r3, [sp, #4]
   35e12:	688a      	ldr	r2, [r1, #8]
   35e14:	690b      	ldr	r3, [r1, #16]
   35e16:	9000      	str	r0, [sp, #0]
   35e18:	000c      	movs	r4, r1
   35e1a:	4293      	cmp	r3, r2
   35e1c:	da00      	bge.n	35e20 <_printf_common+0x14>
   35e1e:	0013      	movs	r3, r2
   35e20:	0022      	movs	r2, r4
   35e22:	602b      	str	r3, [r5, #0]
   35e24:	3243      	adds	r2, #67	; 0x43
   35e26:	7812      	ldrb	r2, [r2, #0]
   35e28:	2a00      	cmp	r2, #0
   35e2a:	d001      	beq.n	35e30 <_printf_common+0x24>
   35e2c:	3301      	adds	r3, #1
   35e2e:	602b      	str	r3, [r5, #0]
   35e30:	6823      	ldr	r3, [r4, #0]
   35e32:	069b      	lsls	r3, r3, #26
   35e34:	d502      	bpl.n	35e3c <_printf_common+0x30>
   35e36:	682b      	ldr	r3, [r5, #0]
   35e38:	3302      	adds	r3, #2
   35e3a:	602b      	str	r3, [r5, #0]
   35e3c:	2706      	movs	r7, #6
   35e3e:	6823      	ldr	r3, [r4, #0]
   35e40:	401f      	ands	r7, r3
   35e42:	d027      	beq.n	35e94 <_printf_common+0x88>
   35e44:	0023      	movs	r3, r4
   35e46:	3343      	adds	r3, #67	; 0x43
   35e48:	781b      	ldrb	r3, [r3, #0]
   35e4a:	1e5a      	subs	r2, r3, #1
   35e4c:	4193      	sbcs	r3, r2
   35e4e:	6822      	ldr	r2, [r4, #0]
   35e50:	0692      	lsls	r2, r2, #26
   35e52:	d430      	bmi.n	35eb6 <_printf_common+0xaa>
   35e54:	0022      	movs	r2, r4
   35e56:	9901      	ldr	r1, [sp, #4]
   35e58:	3243      	adds	r2, #67	; 0x43
   35e5a:	9800      	ldr	r0, [sp, #0]
   35e5c:	9e08      	ldr	r6, [sp, #32]
   35e5e:	47b0      	blx	r6
   35e60:	1c43      	adds	r3, r0, #1
   35e62:	d025      	beq.n	35eb0 <_printf_common+0xa4>
   35e64:	2306      	movs	r3, #6
   35e66:	6820      	ldr	r0, [r4, #0]
   35e68:	682a      	ldr	r2, [r5, #0]
   35e6a:	68e1      	ldr	r1, [r4, #12]
   35e6c:	4003      	ands	r3, r0
   35e6e:	2500      	movs	r5, #0
   35e70:	2b04      	cmp	r3, #4
   35e72:	d103      	bne.n	35e7c <_printf_common+0x70>
   35e74:	1a8d      	subs	r5, r1, r2
   35e76:	43eb      	mvns	r3, r5
   35e78:	17db      	asrs	r3, r3, #31
   35e7a:	401d      	ands	r5, r3
   35e7c:	68a3      	ldr	r3, [r4, #8]
   35e7e:	6922      	ldr	r2, [r4, #16]
   35e80:	4293      	cmp	r3, r2
   35e82:	dd01      	ble.n	35e88 <_printf_common+0x7c>
   35e84:	1a9b      	subs	r3, r3, r2
   35e86:	18ed      	adds	r5, r5, r3
   35e88:	2700      	movs	r7, #0
   35e8a:	42bd      	cmp	r5, r7
   35e8c:	d120      	bne.n	35ed0 <_printf_common+0xc4>
   35e8e:	2000      	movs	r0, #0
   35e90:	e010      	b.n	35eb4 <_printf_common+0xa8>
   35e92:	3701      	adds	r7, #1
   35e94:	68e3      	ldr	r3, [r4, #12]
   35e96:	682a      	ldr	r2, [r5, #0]
   35e98:	1a9b      	subs	r3, r3, r2
   35e9a:	429f      	cmp	r7, r3
   35e9c:	dad2      	bge.n	35e44 <_printf_common+0x38>
   35e9e:	0022      	movs	r2, r4
   35ea0:	2301      	movs	r3, #1
   35ea2:	3219      	adds	r2, #25
   35ea4:	9901      	ldr	r1, [sp, #4]
   35ea6:	9800      	ldr	r0, [sp, #0]
   35ea8:	9e08      	ldr	r6, [sp, #32]
   35eaa:	47b0      	blx	r6
   35eac:	1c43      	adds	r3, r0, #1
   35eae:	d1f0      	bne.n	35e92 <_printf_common+0x86>
   35eb0:	2001      	movs	r0, #1
   35eb2:	4240      	negs	r0, r0
   35eb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35eb6:	2030      	movs	r0, #48	; 0x30
   35eb8:	18e1      	adds	r1, r4, r3
   35eba:	3143      	adds	r1, #67	; 0x43
   35ebc:	7008      	strb	r0, [r1, #0]
   35ebe:	0021      	movs	r1, r4
   35ec0:	1c5a      	adds	r2, r3, #1
   35ec2:	3145      	adds	r1, #69	; 0x45
   35ec4:	7809      	ldrb	r1, [r1, #0]
   35ec6:	18a2      	adds	r2, r4, r2
   35ec8:	3243      	adds	r2, #67	; 0x43
   35eca:	3302      	adds	r3, #2
   35ecc:	7011      	strb	r1, [r2, #0]
   35ece:	e7c1      	b.n	35e54 <_printf_common+0x48>
   35ed0:	0022      	movs	r2, r4
   35ed2:	2301      	movs	r3, #1
   35ed4:	321a      	adds	r2, #26
   35ed6:	9901      	ldr	r1, [sp, #4]
   35ed8:	9800      	ldr	r0, [sp, #0]
   35eda:	9e08      	ldr	r6, [sp, #32]
   35edc:	47b0      	blx	r6
   35ede:	1c43      	adds	r3, r0, #1
   35ee0:	d0e6      	beq.n	35eb0 <_printf_common+0xa4>
   35ee2:	3701      	adds	r7, #1
   35ee4:	e7d1      	b.n	35e8a <_printf_common+0x7e>
	...

00035ee8 <_printf_i>:
   35ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
   35eea:	b08b      	sub	sp, #44	; 0x2c
   35eec:	9206      	str	r2, [sp, #24]
   35eee:	000a      	movs	r2, r1
   35ef0:	3243      	adds	r2, #67	; 0x43
   35ef2:	9307      	str	r3, [sp, #28]
   35ef4:	9005      	str	r0, [sp, #20]
   35ef6:	9204      	str	r2, [sp, #16]
   35ef8:	7e0a      	ldrb	r2, [r1, #24]
   35efa:	000c      	movs	r4, r1
   35efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   35efe:	2a6e      	cmp	r2, #110	; 0x6e
   35f00:	d100      	bne.n	35f04 <_printf_i+0x1c>
   35f02:	e08f      	b.n	36024 <_printf_i+0x13c>
   35f04:	d817      	bhi.n	35f36 <_printf_i+0x4e>
   35f06:	2a63      	cmp	r2, #99	; 0x63
   35f08:	d02c      	beq.n	35f64 <_printf_i+0x7c>
   35f0a:	d808      	bhi.n	35f1e <_printf_i+0x36>
   35f0c:	2a00      	cmp	r2, #0
   35f0e:	d100      	bne.n	35f12 <_printf_i+0x2a>
   35f10:	e099      	b.n	36046 <_printf_i+0x15e>
   35f12:	2a58      	cmp	r2, #88	; 0x58
   35f14:	d054      	beq.n	35fc0 <_printf_i+0xd8>
   35f16:	0026      	movs	r6, r4
   35f18:	3642      	adds	r6, #66	; 0x42
   35f1a:	7032      	strb	r2, [r6, #0]
   35f1c:	e029      	b.n	35f72 <_printf_i+0x8a>
   35f1e:	2a64      	cmp	r2, #100	; 0x64
   35f20:	d001      	beq.n	35f26 <_printf_i+0x3e>
   35f22:	2a69      	cmp	r2, #105	; 0x69
   35f24:	d1f7      	bne.n	35f16 <_printf_i+0x2e>
   35f26:	6821      	ldr	r1, [r4, #0]
   35f28:	681a      	ldr	r2, [r3, #0]
   35f2a:	0608      	lsls	r0, r1, #24
   35f2c:	d523      	bpl.n	35f76 <_printf_i+0x8e>
   35f2e:	1d11      	adds	r1, r2, #4
   35f30:	6019      	str	r1, [r3, #0]
   35f32:	6815      	ldr	r5, [r2, #0]
   35f34:	e025      	b.n	35f82 <_printf_i+0x9a>
   35f36:	2a73      	cmp	r2, #115	; 0x73
   35f38:	d100      	bne.n	35f3c <_printf_i+0x54>
   35f3a:	e088      	b.n	3604e <_printf_i+0x166>
   35f3c:	d808      	bhi.n	35f50 <_printf_i+0x68>
   35f3e:	2a6f      	cmp	r2, #111	; 0x6f
   35f40:	d029      	beq.n	35f96 <_printf_i+0xae>
   35f42:	2a70      	cmp	r2, #112	; 0x70
   35f44:	d1e7      	bne.n	35f16 <_printf_i+0x2e>
   35f46:	2220      	movs	r2, #32
   35f48:	6809      	ldr	r1, [r1, #0]
   35f4a:	430a      	orrs	r2, r1
   35f4c:	6022      	str	r2, [r4, #0]
   35f4e:	e003      	b.n	35f58 <_printf_i+0x70>
   35f50:	2a75      	cmp	r2, #117	; 0x75
   35f52:	d020      	beq.n	35f96 <_printf_i+0xae>
   35f54:	2a78      	cmp	r2, #120	; 0x78
   35f56:	d1de      	bne.n	35f16 <_printf_i+0x2e>
   35f58:	0022      	movs	r2, r4
   35f5a:	2178      	movs	r1, #120	; 0x78
   35f5c:	3245      	adds	r2, #69	; 0x45
   35f5e:	7011      	strb	r1, [r2, #0]
   35f60:	4a6c      	ldr	r2, [pc, #432]	; (36114 <_printf_i+0x22c>)
   35f62:	e030      	b.n	35fc6 <_printf_i+0xde>
   35f64:	000e      	movs	r6, r1
   35f66:	681a      	ldr	r2, [r3, #0]
   35f68:	3642      	adds	r6, #66	; 0x42
   35f6a:	1d11      	adds	r1, r2, #4
   35f6c:	6019      	str	r1, [r3, #0]
   35f6e:	6813      	ldr	r3, [r2, #0]
   35f70:	7033      	strb	r3, [r6, #0]
   35f72:	2301      	movs	r3, #1
   35f74:	e079      	b.n	3606a <_printf_i+0x182>
   35f76:	0649      	lsls	r1, r1, #25
   35f78:	d5d9      	bpl.n	35f2e <_printf_i+0x46>
   35f7a:	1d11      	adds	r1, r2, #4
   35f7c:	6019      	str	r1, [r3, #0]
   35f7e:	2300      	movs	r3, #0
   35f80:	5ed5      	ldrsh	r5, [r2, r3]
   35f82:	2d00      	cmp	r5, #0
   35f84:	da03      	bge.n	35f8e <_printf_i+0xa6>
   35f86:	232d      	movs	r3, #45	; 0x2d
   35f88:	9a04      	ldr	r2, [sp, #16]
   35f8a:	426d      	negs	r5, r5
   35f8c:	7013      	strb	r3, [r2, #0]
   35f8e:	4b62      	ldr	r3, [pc, #392]	; (36118 <_printf_i+0x230>)
   35f90:	270a      	movs	r7, #10
   35f92:	9303      	str	r3, [sp, #12]
   35f94:	e02f      	b.n	35ff6 <_printf_i+0x10e>
   35f96:	6820      	ldr	r0, [r4, #0]
   35f98:	6819      	ldr	r1, [r3, #0]
   35f9a:	0605      	lsls	r5, r0, #24
   35f9c:	d503      	bpl.n	35fa6 <_printf_i+0xbe>
   35f9e:	1d08      	adds	r0, r1, #4
   35fa0:	6018      	str	r0, [r3, #0]
   35fa2:	680d      	ldr	r5, [r1, #0]
   35fa4:	e005      	b.n	35fb2 <_printf_i+0xca>
   35fa6:	0640      	lsls	r0, r0, #25
   35fa8:	d5f9      	bpl.n	35f9e <_printf_i+0xb6>
   35faa:	680d      	ldr	r5, [r1, #0]
   35fac:	1d08      	adds	r0, r1, #4
   35fae:	6018      	str	r0, [r3, #0]
   35fb0:	b2ad      	uxth	r5, r5
   35fb2:	4b59      	ldr	r3, [pc, #356]	; (36118 <_printf_i+0x230>)
   35fb4:	2708      	movs	r7, #8
   35fb6:	9303      	str	r3, [sp, #12]
   35fb8:	2a6f      	cmp	r2, #111	; 0x6f
   35fba:	d018      	beq.n	35fee <_printf_i+0x106>
   35fbc:	270a      	movs	r7, #10
   35fbe:	e016      	b.n	35fee <_printf_i+0x106>
   35fc0:	3145      	adds	r1, #69	; 0x45
   35fc2:	700a      	strb	r2, [r1, #0]
   35fc4:	4a54      	ldr	r2, [pc, #336]	; (36118 <_printf_i+0x230>)
   35fc6:	9203      	str	r2, [sp, #12]
   35fc8:	681a      	ldr	r2, [r3, #0]
   35fca:	6821      	ldr	r1, [r4, #0]
   35fcc:	1d10      	adds	r0, r2, #4
   35fce:	6018      	str	r0, [r3, #0]
   35fd0:	6815      	ldr	r5, [r2, #0]
   35fd2:	0608      	lsls	r0, r1, #24
   35fd4:	d522      	bpl.n	3601c <_printf_i+0x134>
   35fd6:	07cb      	lsls	r3, r1, #31
   35fd8:	d502      	bpl.n	35fe0 <_printf_i+0xf8>
   35fda:	2320      	movs	r3, #32
   35fdc:	4319      	orrs	r1, r3
   35fde:	6021      	str	r1, [r4, #0]
   35fe0:	2710      	movs	r7, #16
   35fe2:	2d00      	cmp	r5, #0
   35fe4:	d103      	bne.n	35fee <_printf_i+0x106>
   35fe6:	2320      	movs	r3, #32
   35fe8:	6822      	ldr	r2, [r4, #0]
   35fea:	439a      	bics	r2, r3
   35fec:	6022      	str	r2, [r4, #0]
   35fee:	0023      	movs	r3, r4
   35ff0:	2200      	movs	r2, #0
   35ff2:	3343      	adds	r3, #67	; 0x43
   35ff4:	701a      	strb	r2, [r3, #0]
   35ff6:	6863      	ldr	r3, [r4, #4]
   35ff8:	60a3      	str	r3, [r4, #8]
   35ffa:	2b00      	cmp	r3, #0
   35ffc:	db5c      	blt.n	360b8 <_printf_i+0x1d0>
   35ffe:	2204      	movs	r2, #4
   36000:	6821      	ldr	r1, [r4, #0]
   36002:	4391      	bics	r1, r2
   36004:	6021      	str	r1, [r4, #0]
   36006:	2d00      	cmp	r5, #0
   36008:	d158      	bne.n	360bc <_printf_i+0x1d4>
   3600a:	9e04      	ldr	r6, [sp, #16]
   3600c:	2b00      	cmp	r3, #0
   3600e:	d064      	beq.n	360da <_printf_i+0x1f2>
   36010:	0026      	movs	r6, r4
   36012:	9b03      	ldr	r3, [sp, #12]
   36014:	3642      	adds	r6, #66	; 0x42
   36016:	781b      	ldrb	r3, [r3, #0]
   36018:	7033      	strb	r3, [r6, #0]
   3601a:	e05e      	b.n	360da <_printf_i+0x1f2>
   3601c:	0648      	lsls	r0, r1, #25
   3601e:	d5da      	bpl.n	35fd6 <_printf_i+0xee>
   36020:	b2ad      	uxth	r5, r5
   36022:	e7d8      	b.n	35fd6 <_printf_i+0xee>
   36024:	6809      	ldr	r1, [r1, #0]
   36026:	681a      	ldr	r2, [r3, #0]
   36028:	0608      	lsls	r0, r1, #24
   3602a:	d505      	bpl.n	36038 <_printf_i+0x150>
   3602c:	1d11      	adds	r1, r2, #4
   3602e:	6019      	str	r1, [r3, #0]
   36030:	6813      	ldr	r3, [r2, #0]
   36032:	6962      	ldr	r2, [r4, #20]
   36034:	601a      	str	r2, [r3, #0]
   36036:	e006      	b.n	36046 <_printf_i+0x15e>
   36038:	0649      	lsls	r1, r1, #25
   3603a:	d5f7      	bpl.n	3602c <_printf_i+0x144>
   3603c:	1d11      	adds	r1, r2, #4
   3603e:	6019      	str	r1, [r3, #0]
   36040:	6813      	ldr	r3, [r2, #0]
   36042:	8aa2      	ldrh	r2, [r4, #20]
   36044:	801a      	strh	r2, [r3, #0]
   36046:	2300      	movs	r3, #0
   36048:	9e04      	ldr	r6, [sp, #16]
   3604a:	6123      	str	r3, [r4, #16]
   3604c:	e054      	b.n	360f8 <_printf_i+0x210>
   3604e:	681a      	ldr	r2, [r3, #0]
   36050:	1d11      	adds	r1, r2, #4
   36052:	6019      	str	r1, [r3, #0]
   36054:	6816      	ldr	r6, [r2, #0]
   36056:	2100      	movs	r1, #0
   36058:	6862      	ldr	r2, [r4, #4]
   3605a:	0030      	movs	r0, r6
   3605c:	f000 f922 	bl	362a4 <memchr>
   36060:	2800      	cmp	r0, #0
   36062:	d001      	beq.n	36068 <_printf_i+0x180>
   36064:	1b80      	subs	r0, r0, r6
   36066:	6060      	str	r0, [r4, #4]
   36068:	6863      	ldr	r3, [r4, #4]
   3606a:	6123      	str	r3, [r4, #16]
   3606c:	2300      	movs	r3, #0
   3606e:	9a04      	ldr	r2, [sp, #16]
   36070:	7013      	strb	r3, [r2, #0]
   36072:	e041      	b.n	360f8 <_printf_i+0x210>
   36074:	6923      	ldr	r3, [r4, #16]
   36076:	0032      	movs	r2, r6
   36078:	9906      	ldr	r1, [sp, #24]
   3607a:	9805      	ldr	r0, [sp, #20]
   3607c:	9d07      	ldr	r5, [sp, #28]
   3607e:	47a8      	blx	r5
   36080:	1c43      	adds	r3, r0, #1
   36082:	d043      	beq.n	3610c <_printf_i+0x224>
   36084:	6823      	ldr	r3, [r4, #0]
   36086:	2500      	movs	r5, #0
   36088:	079b      	lsls	r3, r3, #30
   3608a:	d40f      	bmi.n	360ac <_printf_i+0x1c4>
   3608c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3608e:	68e0      	ldr	r0, [r4, #12]
   36090:	4298      	cmp	r0, r3
   36092:	da3d      	bge.n	36110 <_printf_i+0x228>
   36094:	0018      	movs	r0, r3
   36096:	e03b      	b.n	36110 <_printf_i+0x228>
   36098:	0022      	movs	r2, r4
   3609a:	2301      	movs	r3, #1
   3609c:	3219      	adds	r2, #25
   3609e:	9906      	ldr	r1, [sp, #24]
   360a0:	9805      	ldr	r0, [sp, #20]
   360a2:	9e07      	ldr	r6, [sp, #28]
   360a4:	47b0      	blx	r6
   360a6:	1c43      	adds	r3, r0, #1
   360a8:	d030      	beq.n	3610c <_printf_i+0x224>
   360aa:	3501      	adds	r5, #1
   360ac:	68e3      	ldr	r3, [r4, #12]
   360ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   360b0:	1a9b      	subs	r3, r3, r2
   360b2:	429d      	cmp	r5, r3
   360b4:	dbf0      	blt.n	36098 <_printf_i+0x1b0>
   360b6:	e7e9      	b.n	3608c <_printf_i+0x1a4>
   360b8:	2d00      	cmp	r5, #0
   360ba:	d0a9      	beq.n	36010 <_printf_i+0x128>
   360bc:	9e04      	ldr	r6, [sp, #16]
   360be:	0028      	movs	r0, r5
   360c0:	0039      	movs	r1, r7
   360c2:	f7fc ffe7 	bl	33094 <__aeabi_uidivmod>
   360c6:	9b03      	ldr	r3, [sp, #12]
   360c8:	3e01      	subs	r6, #1
   360ca:	5c5b      	ldrb	r3, [r3, r1]
   360cc:	0028      	movs	r0, r5
   360ce:	7033      	strb	r3, [r6, #0]
   360d0:	0039      	movs	r1, r7
   360d2:	f7fc ff59 	bl	32f88 <__udivsi3>
   360d6:	1e05      	subs	r5, r0, #0
   360d8:	d1f1      	bne.n	360be <_printf_i+0x1d6>
   360da:	2f08      	cmp	r7, #8
   360dc:	d109      	bne.n	360f2 <_printf_i+0x20a>
   360de:	6823      	ldr	r3, [r4, #0]
   360e0:	07db      	lsls	r3, r3, #31
   360e2:	d506      	bpl.n	360f2 <_printf_i+0x20a>
   360e4:	6863      	ldr	r3, [r4, #4]
   360e6:	6922      	ldr	r2, [r4, #16]
   360e8:	4293      	cmp	r3, r2
   360ea:	dc02      	bgt.n	360f2 <_printf_i+0x20a>
   360ec:	2330      	movs	r3, #48	; 0x30
   360ee:	3e01      	subs	r6, #1
   360f0:	7033      	strb	r3, [r6, #0]
   360f2:	9b04      	ldr	r3, [sp, #16]
   360f4:	1b9b      	subs	r3, r3, r6
   360f6:	6123      	str	r3, [r4, #16]
   360f8:	9b07      	ldr	r3, [sp, #28]
   360fa:	aa09      	add	r2, sp, #36	; 0x24
   360fc:	9300      	str	r3, [sp, #0]
   360fe:	0021      	movs	r1, r4
   36100:	9b06      	ldr	r3, [sp, #24]
   36102:	9805      	ldr	r0, [sp, #20]
   36104:	f7ff fe82 	bl	35e0c <_printf_common>
   36108:	1c43      	adds	r3, r0, #1
   3610a:	d1b3      	bne.n	36074 <_printf_i+0x18c>
   3610c:	2001      	movs	r0, #1
   3610e:	4240      	negs	r0, r0
   36110:	b00b      	add	sp, #44	; 0x2c
   36112:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36114:	0003aa6c 	.word	0x0003aa6c
   36118:	0003aa5b 	.word	0x0003aa5b

0003611c <__sread>:
   3611c:	b570      	push	{r4, r5, r6, lr}
   3611e:	000c      	movs	r4, r1
   36120:	250e      	movs	r5, #14
   36122:	5f49      	ldrsh	r1, [r1, r5]
   36124:	f000 f8f0 	bl	36308 <_read_r>
   36128:	2800      	cmp	r0, #0
   3612a:	db03      	blt.n	36134 <__sread+0x18>
   3612c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   3612e:	181b      	adds	r3, r3, r0
   36130:	6563      	str	r3, [r4, #84]	; 0x54
   36132:	bd70      	pop	{r4, r5, r6, pc}
   36134:	89a3      	ldrh	r3, [r4, #12]
   36136:	4a02      	ldr	r2, [pc, #8]	; (36140 <__sread+0x24>)
   36138:	4013      	ands	r3, r2
   3613a:	81a3      	strh	r3, [r4, #12]
   3613c:	e7f9      	b.n	36132 <__sread+0x16>
   3613e:	46c0      	nop			; (mov r8, r8)
   36140:	ffffefff 	.word	0xffffefff

00036144 <__swrite>:
   36144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36146:	001f      	movs	r7, r3
   36148:	898b      	ldrh	r3, [r1, #12]
   3614a:	0005      	movs	r5, r0
   3614c:	000c      	movs	r4, r1
   3614e:	0016      	movs	r6, r2
   36150:	05db      	lsls	r3, r3, #23
   36152:	d505      	bpl.n	36160 <__swrite+0x1c>
   36154:	230e      	movs	r3, #14
   36156:	5ec9      	ldrsh	r1, [r1, r3]
   36158:	2200      	movs	r2, #0
   3615a:	2302      	movs	r3, #2
   3615c:	f000 f88e 	bl	3627c <_lseek_r>
   36160:	89a3      	ldrh	r3, [r4, #12]
   36162:	4a05      	ldr	r2, [pc, #20]	; (36178 <__swrite+0x34>)
   36164:	0028      	movs	r0, r5
   36166:	4013      	ands	r3, r2
   36168:	81a3      	strh	r3, [r4, #12]
   3616a:	0032      	movs	r2, r6
   3616c:	230e      	movs	r3, #14
   3616e:	5ee1      	ldrsh	r1, [r4, r3]
   36170:	003b      	movs	r3, r7
   36172:	f000 f839 	bl	361e8 <_write_r>
   36176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36178:	ffffefff 	.word	0xffffefff

0003617c <__sseek>:
   3617c:	b570      	push	{r4, r5, r6, lr}
   3617e:	000c      	movs	r4, r1
   36180:	250e      	movs	r5, #14
   36182:	5f49      	ldrsh	r1, [r1, r5]
   36184:	f000 f87a 	bl	3627c <_lseek_r>
   36188:	89a3      	ldrh	r3, [r4, #12]
   3618a:	1c42      	adds	r2, r0, #1
   3618c:	d103      	bne.n	36196 <__sseek+0x1a>
   3618e:	4a05      	ldr	r2, [pc, #20]	; (361a4 <__sseek+0x28>)
   36190:	4013      	ands	r3, r2
   36192:	81a3      	strh	r3, [r4, #12]
   36194:	bd70      	pop	{r4, r5, r6, pc}
   36196:	2280      	movs	r2, #128	; 0x80
   36198:	0152      	lsls	r2, r2, #5
   3619a:	4313      	orrs	r3, r2
   3619c:	81a3      	strh	r3, [r4, #12]
   3619e:	6560      	str	r0, [r4, #84]	; 0x54
   361a0:	e7f8      	b.n	36194 <__sseek+0x18>
   361a2:	46c0      	nop			; (mov r8, r8)
   361a4:	ffffefff 	.word	0xffffefff

000361a8 <__sclose>:
   361a8:	b510      	push	{r4, lr}
   361aa:	230e      	movs	r3, #14
   361ac:	5ec9      	ldrsh	r1, [r1, r3]
   361ae:	f000 f82f 	bl	36210 <_close_r>
   361b2:	bd10      	pop	{r4, pc}

000361b4 <strchr>:
   361b4:	b2c9      	uxtb	r1, r1
   361b6:	7803      	ldrb	r3, [r0, #0]
   361b8:	2b00      	cmp	r3, #0
   361ba:	d004      	beq.n	361c6 <strchr+0x12>
   361bc:	4299      	cmp	r1, r3
   361be:	d100      	bne.n	361c2 <strchr+0xe>
   361c0:	4770      	bx	lr
   361c2:	3001      	adds	r0, #1
   361c4:	e7f7      	b.n	361b6 <strchr+0x2>
   361c6:	424b      	negs	r3, r1
   361c8:	4159      	adcs	r1, r3
   361ca:	4249      	negs	r1, r1
   361cc:	4008      	ands	r0, r1
   361ce:	e7f7      	b.n	361c0 <strchr+0xc>

000361d0 <__ascii_wctomb>:
   361d0:	1e0b      	subs	r3, r1, #0
   361d2:	d004      	beq.n	361de <__ascii_wctomb+0xe>
   361d4:	2aff      	cmp	r2, #255	; 0xff
   361d6:	d904      	bls.n	361e2 <__ascii_wctomb+0x12>
   361d8:	238a      	movs	r3, #138	; 0x8a
   361da:	6003      	str	r3, [r0, #0]
   361dc:	3b8b      	subs	r3, #139	; 0x8b
   361de:	0018      	movs	r0, r3
   361e0:	4770      	bx	lr
   361e2:	700a      	strb	r2, [r1, #0]
   361e4:	2301      	movs	r3, #1
   361e6:	e7fa      	b.n	361de <__ascii_wctomb+0xe>

000361e8 <_write_r>:
   361e8:	b570      	push	{r4, r5, r6, lr}
   361ea:	0005      	movs	r5, r0
   361ec:	0008      	movs	r0, r1
   361ee:	0011      	movs	r1, r2
   361f0:	2200      	movs	r2, #0
   361f2:	4c06      	ldr	r4, [pc, #24]	; (3620c <_write_r+0x24>)
   361f4:	6022      	str	r2, [r4, #0]
   361f6:	001a      	movs	r2, r3
   361f8:	f7f5 fa38 	bl	2b66c <_write>
   361fc:	1c43      	adds	r3, r0, #1
   361fe:	d103      	bne.n	36208 <_write_r+0x20>
   36200:	6823      	ldr	r3, [r4, #0]
   36202:	2b00      	cmp	r3, #0
   36204:	d000      	beq.n	36208 <_write_r+0x20>
   36206:	602b      	str	r3, [r5, #0]
   36208:	bd70      	pop	{r4, r5, r6, pc}
   3620a:	46c0      	nop			; (mov r8, r8)
   3620c:	20005c90 	.word	0x20005c90

00036210 <_close_r>:
   36210:	2300      	movs	r3, #0
   36212:	b570      	push	{r4, r5, r6, lr}
   36214:	4c06      	ldr	r4, [pc, #24]	; (36230 <_close_r+0x20>)
   36216:	0005      	movs	r5, r0
   36218:	0008      	movs	r0, r1
   3621a:	6023      	str	r3, [r4, #0]
   3621c:	f7f5 fa7a 	bl	2b714 <_close>
   36220:	1c43      	adds	r3, r0, #1
   36222:	d103      	bne.n	3622c <_close_r+0x1c>
   36224:	6823      	ldr	r3, [r4, #0]
   36226:	2b00      	cmp	r3, #0
   36228:	d000      	beq.n	3622c <_close_r+0x1c>
   3622a:	602b      	str	r3, [r5, #0]
   3622c:	bd70      	pop	{r4, r5, r6, pc}
   3622e:	46c0      	nop			; (mov r8, r8)
   36230:	20005c90 	.word	0x20005c90

00036234 <_fstat_r>:
   36234:	2300      	movs	r3, #0
   36236:	b570      	push	{r4, r5, r6, lr}
   36238:	4c06      	ldr	r4, [pc, #24]	; (36254 <_fstat_r+0x20>)
   3623a:	0005      	movs	r5, r0
   3623c:	0008      	movs	r0, r1
   3623e:	0011      	movs	r1, r2
   36240:	6023      	str	r3, [r4, #0]
   36242:	f7f5 fa71 	bl	2b728 <_fstat>
   36246:	1c43      	adds	r3, r0, #1
   36248:	d103      	bne.n	36252 <_fstat_r+0x1e>
   3624a:	6823      	ldr	r3, [r4, #0]
   3624c:	2b00      	cmp	r3, #0
   3624e:	d000      	beq.n	36252 <_fstat_r+0x1e>
   36250:	602b      	str	r3, [r5, #0]
   36252:	bd70      	pop	{r4, r5, r6, pc}
   36254:	20005c90 	.word	0x20005c90

00036258 <_isatty_r>:
   36258:	2300      	movs	r3, #0
   3625a:	b570      	push	{r4, r5, r6, lr}
   3625c:	4c06      	ldr	r4, [pc, #24]	; (36278 <_isatty_r+0x20>)
   3625e:	0005      	movs	r5, r0
   36260:	0008      	movs	r0, r1
   36262:	6023      	str	r3, [r4, #0]
   36264:	f7f5 fa6e 	bl	2b744 <_isatty>
   36268:	1c43      	adds	r3, r0, #1
   3626a:	d103      	bne.n	36274 <_isatty_r+0x1c>
   3626c:	6823      	ldr	r3, [r4, #0]
   3626e:	2b00      	cmp	r3, #0
   36270:	d000      	beq.n	36274 <_isatty_r+0x1c>
   36272:	602b      	str	r3, [r5, #0]
   36274:	bd70      	pop	{r4, r5, r6, pc}
   36276:	46c0      	nop			; (mov r8, r8)
   36278:	20005c90 	.word	0x20005c90

0003627c <_lseek_r>:
   3627c:	b570      	push	{r4, r5, r6, lr}
   3627e:	0005      	movs	r5, r0
   36280:	0008      	movs	r0, r1
   36282:	0011      	movs	r1, r2
   36284:	2200      	movs	r2, #0
   36286:	4c06      	ldr	r4, [pc, #24]	; (362a0 <_lseek_r+0x24>)
   36288:	6022      	str	r2, [r4, #0]
   3628a:	001a      	movs	r2, r3
   3628c:	f7f5 fa63 	bl	2b756 <_lseek>
   36290:	1c43      	adds	r3, r0, #1
   36292:	d103      	bne.n	3629c <_lseek_r+0x20>
   36294:	6823      	ldr	r3, [r4, #0]
   36296:	2b00      	cmp	r3, #0
   36298:	d000      	beq.n	3629c <_lseek_r+0x20>
   3629a:	602b      	str	r3, [r5, #0]
   3629c:	bd70      	pop	{r4, r5, r6, pc}
   3629e:	46c0      	nop			; (mov r8, r8)
   362a0:	20005c90 	.word	0x20005c90

000362a4 <memchr>:
   362a4:	b2c9      	uxtb	r1, r1
   362a6:	1882      	adds	r2, r0, r2
   362a8:	4290      	cmp	r0, r2
   362aa:	d101      	bne.n	362b0 <memchr+0xc>
   362ac:	2000      	movs	r0, #0
   362ae:	4770      	bx	lr
   362b0:	7803      	ldrb	r3, [r0, #0]
   362b2:	428b      	cmp	r3, r1
   362b4:	d0fb      	beq.n	362ae <memchr+0xa>
   362b6:	3001      	adds	r0, #1
   362b8:	e7f6      	b.n	362a8 <memchr+0x4>

000362ba <_realloc_r>:
   362ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   362bc:	0007      	movs	r7, r0
   362be:	000d      	movs	r5, r1
   362c0:	0016      	movs	r6, r2
   362c2:	2900      	cmp	r1, #0
   362c4:	d105      	bne.n	362d2 <_realloc_r+0x18>
   362c6:	0011      	movs	r1, r2
   362c8:	f7fe fe9e 	bl	35008 <_malloc_r>
   362cc:	0004      	movs	r4, r0
   362ce:	0020      	movs	r0, r4
   362d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   362d2:	2a00      	cmp	r2, #0
   362d4:	d103      	bne.n	362de <_realloc_r+0x24>
   362d6:	f7fe fe4d 	bl	34f74 <_free_r>
   362da:	0034      	movs	r4, r6
   362dc:	e7f7      	b.n	362ce <_realloc_r+0x14>
   362de:	f000 f827 	bl	36330 <_malloc_usable_size_r>
   362e2:	002c      	movs	r4, r5
   362e4:	4286      	cmp	r6, r0
   362e6:	d9f2      	bls.n	362ce <_realloc_r+0x14>
   362e8:	0031      	movs	r1, r6
   362ea:	0038      	movs	r0, r7
   362ec:	f7fe fe8c 	bl	35008 <_malloc_r>
   362f0:	1e04      	subs	r4, r0, #0
   362f2:	d0ec      	beq.n	362ce <_realloc_r+0x14>
   362f4:	0029      	movs	r1, r5
   362f6:	0032      	movs	r2, r6
   362f8:	f7fe fe18 	bl	34f2c <memcpy>
   362fc:	0029      	movs	r1, r5
   362fe:	0038      	movs	r0, r7
   36300:	f7fe fe38 	bl	34f74 <_free_r>
   36304:	e7e3      	b.n	362ce <_realloc_r+0x14>
	...

00036308 <_read_r>:
   36308:	b570      	push	{r4, r5, r6, lr}
   3630a:	0005      	movs	r5, r0
   3630c:	0008      	movs	r0, r1
   3630e:	0011      	movs	r1, r2
   36310:	2200      	movs	r2, #0
   36312:	4c06      	ldr	r4, [pc, #24]	; (3632c <_read_r+0x24>)
   36314:	6022      	str	r2, [r4, #0]
   36316:	001a      	movs	r2, r3
   36318:	f7f5 f97e 	bl	2b618 <_read>
   3631c:	1c43      	adds	r3, r0, #1
   3631e:	d103      	bne.n	36328 <_read_r+0x20>
   36320:	6823      	ldr	r3, [r4, #0]
   36322:	2b00      	cmp	r3, #0
   36324:	d000      	beq.n	36328 <_read_r+0x20>
   36326:	602b      	str	r3, [r5, #0]
   36328:	bd70      	pop	{r4, r5, r6, pc}
   3632a:	46c0      	nop			; (mov r8, r8)
   3632c:	20005c90 	.word	0x20005c90

00036330 <_malloc_usable_size_r>:
   36330:	1f0b      	subs	r3, r1, #4
   36332:	681b      	ldr	r3, [r3, #0]
   36334:	1f18      	subs	r0, r3, #4
   36336:	2b00      	cmp	r3, #0
   36338:	da01      	bge.n	3633e <_malloc_usable_size_r+0xe>
   3633a:	580b      	ldr	r3, [r1, r0]
   3633c:	18c0      	adds	r0, r0, r3
   3633e:	4770      	bx	lr

00036340 <sysfont_glyphs>:
   36340:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
   36350:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
   36360:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
   36370:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
   36380:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
   36390:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
   363a0:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
   363b0:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
   363c0:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
   363d0:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
   363e0:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
   363f0:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
   36400:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
   36410:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
   36420:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
   36430:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
   36440:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
   36450:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
   36460:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
   36470:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
   36480:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
   36490:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
   364a0:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
   364b0:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
   364c0:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
   364d0:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
   364e0:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
   364f0:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
   36500:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
   36510:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
   36520:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
   36530:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
   36540:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
   36550:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
   36560:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
   36570:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
   36580:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
   36590:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
   365a0:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
   365b0:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
   365c0:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
   365d0:	4020 0000                                    @..

000365d4 <pcWelcomeMessage>:
   365d4:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   365e4:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   365f4:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   36604:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   36614:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   36624:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   36634:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   36644:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   36654:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   36664:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   36674:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   36684:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   36694:	0a0d 0000 656c 0064 656c 2064 6b5b 7965     ....led.led [key
   366a4:	756e 5d6d 525b 5b5d 5d47 425b 3a5d 5320     num][R][G][B]: S
   366b4:	7465 2073 6874 2065 6967 6576 206e 454c     ets the given LE
   366c4:	2044 6f74 7420 6568 6720 7669 6e65 5220     D to the given R
   366d4:	472c 422c 7620 6c61 6575 2e73 0a0d 0000     ,G,B values.....
   366e4:	6567 6274 7475 6f74 006e 0000 6567 6274     getbutton...getb
   366f4:	7475 6f74 3a6e 5020 6f72 6563 7373 7365     utton: Processes
   36704:	6120 646e 7020 6972 746e 2073 6874 2065      and prints the 
   36714:	4946 4f46 6220 7475 6f74 206e 7562 6666     FIFO button buff
   36724:	7265 6620 6f72 206d 6874 2065 6573 7365     er from the sees
   36734:	7761 0d2e 000a 0000 6567 6474 7369 6174     aw......getdista
   36744:	636e 0065 6567 6474 7369 6174 636e 3a65     nce.getdistance:
   36754:	5220 7465 7275 736e 7420 6568 6420 7369      Returns the dis
   36764:	6174 636e 2065 7266 6d6f 7420 6568 5520     tance from the U
   36774:	2d53 3031 2030 6553 736e 726f 0d2e 000a     S-100 Sensor....
   36784:	6167 656d 0000 0000 6167 656d 203a 6553     game....game: Se
   36794:	646e 2073 7564 6d6d 2079 6167 656d 6420     nds dummy game d
   367a4:	7461 0d61 000a 0000 3269 0063 3269 3a63     ata.....i2c.i2c:
   367b4:	5320 6163 736e 4920 4332 6220 7375 0a0d      Scans I2C bus..
   367c4:	0000 0000 6574 7473 0000 0000 6574 7473     ....test....test
   367d4:	203a 6553 646e 2073 6574 7473 6420 7461     : Sends test dat
   367e4:	0d61 000a 6c63 0073 6c63 3a73 4320 656c     a...cls.cls: Cle
   367f4:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   36804:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   36814:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   36824:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   36834:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   36844:	6341 6563 656c 6172 6974 6e6f 5b20 676d     Acceleration [mg
   36854:	3a5d 2058 6425 5909 2520 0964 205a 6425     ]:X %d.Y %d.Z %d
   36864:	0a0d 0000 6f4e 6420 7461 2061 6572 6461     ....No data read
   36874:	2179 0d20 000a 0000 6325 325b 004a 0000     y! .....%c[2J...
   36884:	7453 6475 6e65 7374 7420 206f 6966 6c6c     Students to fill
   36894:	6f20 7475 0021 0000 7542 7474 6e6f 2320      out!...Button #
   368a4:	6425 6920 2073 6572 656c 7361 6465 0a0d     %d is released..
   368b4:	0000 0000 7542 7474 6e6f 2320 6425 6920     ....Button #%d i
   368c4:	2073 7270 7365 6573 0d64 000a 6553 736e     s pressed...Sens
   368d4:	726f 4520 7272 726f 2520 2164 0a0d 0000     or Error %d!....
   368e4:	6944 7473 6e61 6563 203a 6425 6d20 0d6d     Distance: %d mm.
   368f4:	000a 0000 6944 7473 6e61 6563 4420 7461     ....Distance Dat
   36904:	2061 514d 5454 5020 736f 0d74 000a 0000     a MQTT Post.....
   36914:	7544 6d6d 2079 6147 656d 4420 7461 2061     Dummy Game Data 
   36924:	514d 5454 5020 736f 0d74 000a 6554 7473     MQTT Post...Test
   36934:	4420 7461 2061 514d 5454 5020 736f 0d74      Data MQTT Post.
   36944:	000a 0000 2030 3120 2020 2032 3320 2020     ....0  1  2  3  
   36954:	2034 3520 2020 2036 3720 2020 2038 3920     4  5  6  7  8  9
   36964:	2020 2061 6220 2020 2063 6420 2020 2065       a  b  c  d  e 
   36974:	6620 0a0d 0000 0000 3025 7832 203a 0000      f......%02x: ..
   36984:	2058 0000                                   X ..

00036988 <xImuGetCommand>:
   36988:	6618 0003 661c 0003 3bbd 0001 0000 0000     .f...f...;......

00036998 <xOTAUCommand>:
   36998:	6640 0003 6644 0003 3cf9 0001 0000 0000     @f..Df...<......

000369a8 <xResetCommand>:
   369a8:	6674 0003 667c 0003 3d19 0001 0000 0000     tf..|f...=......

000369b8 <xNeotrellisTurnLEDCommand>:
   369b8:	6698 0003 669c 0003 3d39 0001 0004 0000     .f...f..9=......

000369c8 <xNeotrellisProcessButtonCommand>:
   369c8:	66e4 0003 66f0 0003 3d65 0001 0000 0000     .f...f..e=......

000369d8 <xDistanceSensorGetDistance>:
   369d8:	673c 0003 6748 0003 3e69 0001 0000 0000     <g..Hg..i>......

000369e8 <xSendDummyGameData>:
   369e8:	6784 0003 678c 0003 3f0d 0001 0000 0000     .g...g...?......

000369f8 <xI2cScan>:
   369f8:	67ac 0003 67b0 0003 3ff5 0001 0000 0000     .g...g...?......

00036a08 <xSendTestData>:
   36a08:	67c8 0003 67d0 0003 3fa9 0001 0000 0000     .g...g...?......

00036a18 <xClearScreen>:
   36a18:	67e8 0003 67ec 0003 3cb1 0001 0000 0000     .g...g...<......
   36a28:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   36a38:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   36a48:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   36a58:	676e 4320 6e6f 7274 6c6f 4420 7461 2061     ng Control Data 
   36a68:	7571 7565 7365 0d21 000a 0000 6f43 746e     queues!.....Cont
   36a78:	6f72 206c 6854 6572 6461 203a 6f43 736e     rol Thread: Cons
   36a88:	6d75 6465 6720 6d61 2065 6170 6b63 7465     umed game packet
   36a98:	0d21 000a 6f43 746e 6f72 206c 6854 6572     !...Control Thre
   36aa8:	6461 203a 6f43 6c75 2064 6f6e 2074 6573     ad: Could not se
   36ab8:	646e 6720 6d61 2065 6170 6b63 7465 0d21     nd game packet!.
   36ac8:	000a 0000                                   ....

00036acc <msgBaseGetHWID>:
   36acc:	0100 0000                                   ....

00036ad0 <msgNeopixelPin>:
   36ad0:	010e 0003                                   ....

00036ad4 <msgNeopixelSpeed>:
   36ad4:	020e 0001                                   ....

00036ad8 <msgNeopixelBufLength>:
   36ad8:	030e 3000                                   ...0

00036adc <msgKeypadEnableInt>:
   36adc:	0210 0001                                   ....

00036ae0 <msgKeypadGetCount>:
   36ae0:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   36af0:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   36b00:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   36b10:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   36b20:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   36b30:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   36b40:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   36b50:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   36b60:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   36b70:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   36b80:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   36b90:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   36ba0:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   36bb0:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   36bc0:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   36bd0:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   36be0:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   36bf0:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   36c00:	6574 2164 0000 0000 5345 3545 3631 0000     ted!....ESE516..
   36c10:	4948 4847 4157 0059                         HIGHWAY.

00036c18 <main_mqtt_broker>:
   36c18:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   36c28:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   36c38:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   36c48:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   36c58:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   36c68:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   36c78:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   36c88:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   36c98:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   36ca8:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   36cb8:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   36cc8:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   36cd8:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   36ce8:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   36cf8:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   36d08:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   36d18:	3437 322e 3533 312e 3537 342e 2f31 6554     74.235.175.41/Te
   36d28:	7473 2e42 6962 006e 7473 726f 5f65 6966     stB.bin.store_fi
   36d38:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   36d48:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   36d58:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   36d68:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   36d78:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   36d88:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   36d98:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   36da8:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   36db8:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   36dc8:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   36dd8:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   36de8:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   36df8:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   36e08:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   36e18:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   36e28:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   36e38:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   36e48:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   36e58:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   36e68:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   36e78:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   36e88:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   36e98:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   36ea8:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   36eb8:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   36ec8:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   36ed8:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   36ee8:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   36ef8:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   36f08:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   36f18:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   36f28:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   36f38:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   36f48:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   36f58:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   36f68:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   36f78:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   36f88:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   36f98:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   36fa8:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   36fb8:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   36fc8:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   36fd8:	5761 3174 3332 3534 3736 0000 7645 506f     aWt1234567..EvoP
   36fe8:	6968 6c6c 0079 0000 6977 6966 635f 3a62     hilly...wifi_cb:
   36ff8:	4920 2050 6461 7264 7365 2073 7369 2520      IP address is %
   37008:	2e75 7525 252e 2e75 7525 0a0d 0000 0000     u.%u.%u.%u......
   37018:	7245 6f72 2072 6f63 6e6e 6365 6974 676e     Error connecting
   37028:	7420 206f 514d 5454 4220 6f72 656b 2172      to MQTT Broker!
   37038:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   37048:	203a 6c70 6165 6573 7020 756c 2067 6e61     : please plug an
   37058:	5320 2f44 4d4d 2043 6163 6472 6920 206e      SD/MMC card in 
   37068:	6c73 746f 2e2e 0d2e 000a 0000 6e69 7469     slot........init
   37078:	735f 6f74 6172 6567 203a 4453 4320 7261     _storage: SD Car
   37088:	2064 6e69 7473 6c61 206c 6166 6c69 6465     d install failed
   37098:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   370a8:	203a 7274 2079 6e75 6c70 6775 6120 646e     : try unplug and
   370b8:	7220 2d65 6c70 6775 7420 6568 6320 7261      re-plug the car
   370c8:	2e64 0a0d 0000 0000 6e69 7469 735f 6f74     d.......init_sto
   370d8:	6172 6567 203a 6f6d 6e75 6974 676e 5320     rage: mounting S
   370e8:	2044 6163 6472 2e2e 0d2e 000a 6e69 7469     D card......init
   370f8:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   37108:	2064 6f6d 6e75 2074 6166 6c69 6465 2021     d mount failed! 
   37118:	7228 7365 2520 2964 0a0d 0000 6e69 7469     (res %d)....init
   37128:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   37138:	2064 6f6d 6e75 2074 4b4f 0d2e 000a 0000     d mount OK......
   37148:	6f63 666e 6769 7275 5f65 7468 7074 635f     configure_http_c
   37158:	696c 6e65 3a74 4820 5454 2050 6c63 6569     lient: HTTP clie
   37168:	746e 6920 696e 6974 6c61 7a69 7461 6f69     nt initializatio
   37178:	206e 6166 6c69 6465 2021 7228 7365 2520     n failed! (res %
   37188:	2964 0a0d 0000 0000 0a0d 2520 2a2e 0073     d)........ %.*s.
   37198:	6772 2862 0000 0000 0a0d 4752 2042 6425     rgb(......RGB %d
   371a8:	2520 2064 6425 0a0d 0000 0000 227b 6167      %d %d......{"ga
   371b8:	656d 3a22 005b 0000 0a0d 6147 656d 6d20     me":[.....Game m
   371c8:	7365 6173 6567 7220 6365 6965 6576 2164     essage received!
   371d8:	0a0d 0000 2e25 732a 0000 0000 0a0d 6150     ....%.*s......Pa
   371e8:	7372 6465 4320 6d6f 616d 646e 203a 0000     rsed Command: ..
   371f8:	6425 002c 0a0d 6553 746e 7020 616c 2079     %d,...Sent play 
   37208:	6f74 6320 6e6f 7274 6c6f 0d21 000a 0000     to control!.....
   37218:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   37228:	6365 6965 6576 2064 7562 2074 6f6e 2074     eceived but not 
   37238:	6e75 6564 7372 6f74 646f 0d21 000a 0000     understood!.....
   37248:	3e20 203e 0000 0000 3150 4c5f 4445 455f      >> ....P1_LED_E
   37258:	4553 3135 5f36 3954 0000 0000 6166 736c     SE516_T9....fals
   37268:	0065 0000 7274 6575 0000 0000 0a0d 6f43     e...true......Co
   37278:	6e6e 6365 6974 676e 7420 206f 7242 6b6f     nnecting to Brok
   37288:	7265 2e2e 002e 0000 7242 4a73 4e42 6f56     er......BrsJBNVo
   37298:	4251 376c 0000 0000 7472 7974 626f 6a65     QBl7....rttyobej
   372a8:	0000 0000 514d 5454 2020 7245 6f72 2072     ....MQTT  Error 
   372b8:	202d 4f4e 2054 6f43 6e6e 6365 6574 2064     - NOT Connected 
   372c8:	6f74 6220 6f72 656b 0d72 000a 514d 5454     to broker...MQTT
   372d8:	4320 6e6f 656e 7463 6465 7420 206f 7262      Connected to br
   372e8:	6b6f 7265 0a0d 0000 6f43 6e6e 6365 2074     oker....Connect 
   372f8:	6166 6c69 7420 206f 6573 7672 7265 2528     fail to server(%
   37308:	2973 2021 6572 7274 2079 7469 6120 7475     s)! retry it aut
   37318:	6d6f 7461 6369 6c61 796c 0d2e 000a 0000     omatically......
   37328:	3150 475f 4d41 5f45 5345 3545 3631 545f     P1_GAME_ESE516_T
   37338:	0039 0000 514d 5454 4320 6e6f 656e 7463     9...MQTT Connect
   37348:	6465 0a0d 0000 0000 514d 5454 6220 6f72     ed......MQTT bro
   37358:	656b 2072 6564 6c63 6e69 2065 6f79 7275     ker decline your
   37368:	6120 6363 7365 2173 6520 7272 726f 6320      access! error c
   37378:	646f 2065 6425 0a0d 0000 0000 514d 5454     ode %d......MQTT
   37388:	6420 7369 6f63 6e6e 6365 6574 0d64 000a      disconnected...
   37398:	514d 5454 6920 696e 6974 6c61 7a69 7461     MQTT initializat
   373a8:	6f69 206e 6166 6c69 6465 202e 7245 6f72     ion failed. Erro
   373b8:	2072 6f63 6564 6920 2073 2528 2964 0a0d     r code is (%d)..
   373c8:	0000 0000 514d 5454 7220 6765 7369 6574     ....MQTT registe
   373d8:	2072 6163 6c6c 6162 6b63 6620 6961 656c     r callback faile
   373e8:	2e64 4520 7272 726f 6320 646f 2065 7369     d. Error code is
   373f8:	2820 6425 0d29 000a 227b 2264 7b3a 7422      (%d)...{"d":{"t
   37408:	6d65 2270 253a 7d64 007d 0000 465b 4941     emp":%d}}...[FAI
   37418:	5d4c 7220 7365 2520 0d64 000a 6c46 6761     L] res %d...Flag
   37428:	2e41 7874 2074 6461 6564 2164 0a0d 0000     A.txt added!....
   37438:	3a30 6c46 6761 2e41 7874 0074 6f43 6e6e     0:FlagA.txt.Conn
   37448:	6365 6574 2064 6f74 4d20 5451 2054 7242     ected to MQTT Br
   37458:	6b6f 7265 0d21 000a 227b 6d69 7875 3a22     oker!...{"imux":
   37468:	6425 202c 6922 756d 2279 203a 6425 202c     %d, "imuy": %d, 
   37478:	6922 756d 227a 203a 6425 007d 3150 495f     "imuz": %d}.P1_I
   37488:	554d 455f 4553 3135 5f36 3954 0000 0000     MU_ESE516_T9....
   37498:	227b 6574 7473 3a22 6425 7d20 0000 0000     {"test":%d }....
   374a8:	4554 5453 545f 504f 4349 355f 3631 545f     TEST_TOPIC_516_T
   374b8:	0039 0000 6425 0000 7d5d 0000 0a0d 0000     9...%d..]}......
   374c8:	3250 475f 4d41 5f45 5345 3545 3631 545f     P2_GAME_ESE516_T
   374d8:	0039 0000 5245 4f52 2052 6e49 7469 6169     9...ERROR Initia
   374e8:	696c 697a 676e 5720 6669 2069 6144 6174     lizing Wifi Data
   374f8:	7120 6575 6575 2173 0a0d 0000 5345 3545      queues!....ESE5
   37508:	3631 2d20 5720 6669 2069 6e49 7469 4320     16 - Wifi Init C
   37518:	646f 0d65 000a 0000 616d 6e69 203a 326d     ode.....main: m2
   37528:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
   37538:	6520 7272 726f 2021 7228 7365 2520 2964      error! (res %d)
   37548:	0a0d 0000 616d 6e69 203a 6f63 6e6e 6365     ....main: connec
   37558:	6974 676e 7420 206f 6957 6946 4120 2050     ting to WiFi AP 
   37568:	7325 2e2e 0d2e 000a 3150 545f 4d45 4550     %s......P1_TEMPE
   37578:	4152 5554 4552 455f 4553 3135 5f36 3954     RATURE_ESE516_T9
   37588:	0000 0000 514d 5454 7320 6e65 2064 7325     ....MQTT send %s
   37598:	0a0d 0000 672c 0001 6738 0001 674a 0001     ....,g..8g..Jg..
   375a8:	67a0 0001 67c0 0001 6568 706c 0000 0000     .g...g..help....
   375b8:	0a0d 6568 706c 0d3a 200a 694c 7473 2073     ..help:.. Lists 
   375c8:	6c61 206c 6874 2065 6572 6967 7473 7265     all the register
   375d8:	6465 6320 6d6f 616d 646e 0d73 0d0a 000a     ed commands.....
   375e8:	6e49 6f63 7272 6365 2074 6f63 6d6d 6e61     Incorrect comman
   375f8:	2064 6170 6172 656d 6574 2872 2973 202e     d parameter(s). 
   37608:	4520 746e 7265 2220 6568 706c 2022 6f74      Enter "help" to
   37618:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   37628:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   37638:	7364 0d2e 0d0a 000a 6f43 6d6d 6e61 2064     ds......Command 
   37648:	6f6e 2074 6572 6f63 6e67 7369 6465 202e     not recognised. 
   37658:	4520 746e 7265 2720 6568 706c 2027 6f74      Enter 'help' to
   37668:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   37678:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   37688:	7364 0d2e 0d0a 000a                         ds......

00037690 <xHelpCommand>:
   37690:	75b0 0003 75b8 0003 8525 0001 0000 0000     .u...u..%.......
   376a0:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   376b0:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   376c0:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   376d0:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   376e0:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   376f0:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   37700:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   37710:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   37720:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   37730:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   37740:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   37750:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   37760:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   37770:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   37780:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   37790:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   377a0:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   377b0:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   377c0:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   377d0:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   377e0:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   377f0:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   37800:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   37810:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37820:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   37830:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   37840:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37850:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   37860:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   37870:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   37880:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   37890:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   378a0:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   378b0:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   378c0:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   378d0:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   378e0:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   378f0:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   37900:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   37910:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   37920:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   37930:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   37940:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   37950:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   37960:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   37970:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   37980:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   37990:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   379a0:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   379b0:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   379c0:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   379d0:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   379e0:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   379f0:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   37a00:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   37a10:	6365 6374 616c 7373 0021 0000 8c4a 0001     ectclass!...J...
   37a20:	8c42 0001 8c46 0001 8c3a 0001 8c3e 0001     B...F...:...>...
   37a30:	8c4e 0001 8c52 0001 8c56 0001 8c5a 0001     N...R...V...Z...
   37a40:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   37a50:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   37a60:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   37a70:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   37a80:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   37a90:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   37aa0:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   37ab0:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   37ac0:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   37ad0:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   37ae0:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   37af0:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   37b00:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   37b10:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   37b20:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   37b30:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   37b40:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   37b50:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   37b60:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   37b70:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   37b80:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   37b90:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   37ba0:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   37bb0:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   37bc0:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   37bd0:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   37be0:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   37bf0:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   37c00:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   37c10:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   37c20:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   37c30:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   37c40:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   37c50:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   37c60:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   37c70:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   37c80:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   37c90:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   37ca0:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   37cb0:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   37cc0:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   37cd0:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   37ce0:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   37cf0:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   37d00:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   37d10:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   37d20:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   37d30:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   37d40:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   37d50:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   37d60:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   37d70:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   37d80:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   37d90:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   37da0:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   37db0:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   37dc0:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   37dd0:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   37de0:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   37df0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37e00:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   37e10:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   37e20:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   37e30:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37e40:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37e50:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   37e60:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37e70:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   37e80:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   37e90:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   37ea0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37eb0:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37ec0:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   37ed0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37ee0:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   37ef0:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   37f00:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   37f10:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37f20:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37f30:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37f40:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   37f50:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   37f60:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   37f70:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   37f80:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   37f90:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   37fa0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37fb0:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37fc0:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   37fd0:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   37fe0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37ff0:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38000:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   38010:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   38020:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   38030:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38040:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38050:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   38060:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   38070:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   38080:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   38090:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   380a0:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   380b0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   380c0:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   380d0:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   380e0:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   380f0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38100:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   38110:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   38120:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   38130:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   38140:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   38150:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   38160:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   38170:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   38180:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38190:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   381a0:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   381b0:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   381c0:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   381d0:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   381e0:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   381f0:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   38200:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   38210:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38220:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38230:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   38240:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   38250:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38260:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   38270:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   38280:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   38290:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   382a0:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   382b0:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   382c0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   382d0:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   382e0:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   382f0:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   38300:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   38310:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   38320:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   38330:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   38340:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   38350:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   38360:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38370:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   38380:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   38390:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   383a0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   383b0:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   383c0:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   383d0:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   383e0:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   383f0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38400:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   38410:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   38420:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   38430:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38440:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   38450:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38460:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38470:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38480:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   38490:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   384a0:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   384b0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   384c0:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   384d0:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   384e0:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   384f0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38500:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   38510:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   38520:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   38530:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38540:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   38550:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   38560:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   38570:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   38580:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   38590:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   385a0:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   385b0:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   385c0:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   385d0:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   385e0:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   385f0:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38600:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38610:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38620:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   38630:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   38640:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   38650:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   38660:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   38670:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38680:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   38690:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   386a0:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   386b0:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   386c0:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   386d0:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   386e0:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   386f0:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   38700:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38710:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   38720:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   38730:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   38740:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   38750:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   38760:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   38770:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38780:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   38790:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   387a0:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   387b0:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   387c0:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   387d0:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   387e0:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   387f0:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   38800:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   38810:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   38820:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   38830:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   38840:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   38850:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   38860:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   38870:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   38880:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   38890:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   388a0:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   388b0:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   388c0:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   388d0:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   388e0:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   388f0:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   38900:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   38910:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   38920:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   38930:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38940:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   38950:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   38960:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   38970:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   38980:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   38990:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   389a0:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   389b0:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   389c0:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   389d0:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   389e0:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   389f0:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   38a00:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   38a10:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   38a20:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38a30:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   38a40:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   38a50:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   38a60:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   38a70:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   38a80:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   38a90:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   38aa0:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   38ab0:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   38ac0:	0000 0000 6d54 2072 7653 0063 dce8 0001     ....Tmr Svc.....
   38ad0:	dce8 0001 dce8 0001 dd76 0001 dd40 0001     ........v...@...
   38ae0:	dd6a 0001 dce8 0001 dce8 0001 dd76 0001     j...........v...
   38af0:	dd40 0001                                   @...

00038af4 <sd_mmc_trans_units>:
   38af4:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00038b10 <sd_trans_multipliers>:
   38b10:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   38b20:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   38b30:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   38b40:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00038b50 <mmc_trans_multipliers>:
   38b50:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   38b60:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   38b70:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   38b80:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   38b90:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38ba0:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   38bb0:	746c 6320 646d 000a 000d 0000               lt cmd......

00038bbc <__FUNCTION__.17099>:
   38bbc:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   38bcc:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   38bdc:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   38bec:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   38bfc:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   38c0c:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   38c1c:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   38c2c:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   38c3c:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   38c4c:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   38c5c:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   38c6c:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   38c7c:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   38c8c:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   38c9c:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   38cac:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   38cbc:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   38ccc:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   38cdc:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   38cec:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   38cfc:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   38d0c:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   38d1c:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   38d2c:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   38d3c:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   38d4c:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   38d5c:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   38d6c:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   38d7c:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   38d8c:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   38d9c:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   38dac:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   38dbc:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   38dcc:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   38ddc:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   38dec:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   38dfc:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   38e0c:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   38e1c:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   38e2c:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   38e3c:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   38e4c:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   38e5c:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   38e6c:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   38e7c:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   38e8c:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   38e9c:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   38eac:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   38ebc:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   38ecc:	203f 6425 000a 0000 1eec 0002 1ebc 0002     ? %d............
   38edc:	1eb4 0002 1ecc 0002 1ec4 0002 1ee4 0002     ................
   38eec:	1ed4 0002 1edc 0002                         ........

00038ef4 <__FUNCTION__.17967>:
   38ef4:	6968 5f66 6573 646e 0000 0000               hif_send....

00038f00 <__FUNCTION__.17977>:
   38f00:	6968 5f66 7369 0072                         hif_isr.

00038f08 <__FUNCTION__.17986>:
   38f08:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00038f18 <__FUNCTION__.17998>:
   38f18:	6968 5f66 6572 6563 7669 0065               hif_receive.

00038f24 <__FUNCTION__.18014>:
   38f24:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   38f34:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   38f44:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   38f54:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   38f64:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38f74:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   38f84:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   38f94:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   38fa4:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   38fb4:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   38fc4:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   38fd4:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   38fe4:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   38ff4:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   39004:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   39014:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   39024:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   39034:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   39044:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   39054:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   39064:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   39074:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   39084:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   39094:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   390a4:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   390b4:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   390c4:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   390d4:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   390e4:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   390f4:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   39104:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   39114:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   39124:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   39134:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   39144:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   39154:	000a 0000 3332 303a 3a32 3130 0000 0000     ....23:02:01....
   39164:	7041 2072 3931 3220 3230 0033 7244 7669     Apr 19 2023.Driv
   39174:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   39184:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   39194:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   391a4:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   391b4:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   391c4:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   391d4:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   391e4:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   391f4:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   39204:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   39214:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   39224:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   39234:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   39244:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   39254:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   39264:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   39274:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   39284:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   39294:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   392a4:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   392b4:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   392c4:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   392d4:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   392e4:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   392f4:	4220 6675 6566 0a72 0000 0000                Buffer.....

00039300 <__FUNCTION__.17949>:
   39300:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0003930c <__FUNCTION__.17978>:
   3930c:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0003931c <__FUNCTION__.18009>:
   3931c:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   3932c:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   3933c:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   3934c:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   3935c:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   3936c:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   3937c:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   3938c:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   3939c:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   393ac:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

000393bc <__FUNCTION__.17806>:
   393bc:	6863 7069 775f 6b61 0065 0000               chip_wake...

000393c8 <__FUNCTION__.17855>:
   393c8:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   393d8:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   393e8:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   393f8:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   39408:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   39418:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   39428:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   39438:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   39448:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   39458:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   39468:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   39478:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   39488:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   39498:	6920 696e 2074 7562 0a73 0000                init bus...

000394a4 <__FUNCTION__.17853>:
   394a4:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

000394b0 <__FUNCTION__.17860>:
   394b0:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

000394c0 <crc7_syndrome_table>:
   394c0:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   394d0:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   394e0:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   394f0:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   39500:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   39510:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   39520:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   39530:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   39540:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   39550:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   39560:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   39570:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   39580:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   39590:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   395a0:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   395b0:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   395c0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   395d0:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   395e0:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   395f0:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   39600:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39610:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   39620:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39630:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39640:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   39650:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   39660:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   39670:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   39680:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   39690:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   396a0:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   396b0:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   396c0:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   396d0:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   396e0:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   396f0:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39700:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   39710:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   39720:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39730:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   39740:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   39750:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   39760:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39770:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   39780:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   39790:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   397a0:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   397b0:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   397c0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   397d0:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   397e0:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   397f0:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   39800:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   39810:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   39820:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39830:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39840:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   39850:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   39860:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   39870:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   39880:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39890:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   398a0:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   398b0:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   398c0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   398d0:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   398e0:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   398f0:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39900:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   39910:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   39920:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   39930:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   39940:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   39950:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   39960:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   39970:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   39980:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   39990:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   399a0:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   399b0:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   399c0:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   399d0:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   399e0:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   399f0:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   39a00:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   39a10:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   39a20:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   39a30:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   39a40:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   39a50:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   39a60:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   39a70:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   39a80:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   39a90:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   39aa0:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   39ab0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   39ac0:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   39ad0:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   39ae0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   39af0:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   39b00:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   39b10:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   39b20:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   39b30:	2e2e 0a2e 0000 0000 3b14 0002 3b14 0002     .........;...;..
   39b40:	3ba4 0002 3a68 0002 3aae 0002 3ad0 0002     .;..h:...:...:..
   39b50:	3b56 0002 3b56 0002 3c10 0002 3a3c 0002     V;..V;...<..<:..
   39b60:	3c6a 0002 3c6a 0002 3c6a 0002 3c6a 0002     j<..j<..j<..j<..
   39b70:	3af2 0002 4074 0002 4074 0002 40fc 0002     .:..t@..t@...@..
   39b80:	3fd8 0002 401a 0002 4038 0002 40b2 0002     .?...@..8@...@..
   39b90:	40b2 0002 415e 0002 3fb0 0002 41ae 0002     .@..^A...?...A..
   39ba0:	41ae 0002 41ae 0002 41ae 0002 4056 0002     .A...A...A..V@..

00039bb0 <__FUNCTION__.17128>:
   39bb0:	7073 5f69 6d63 0064                         spi_cmd.

00039bb8 <__FUNCTION__.17135>:
   39bb8:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00039bc8 <__FUNCTION__.17144>:
   39bc8:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00039bd4 <__FUNCTION__.17177>:
   39bd4:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   39be4:	0000 0000                                   ....

00039be8 <__FUNCTION__.17223>:
   39be8:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00039bf8 <__FUNCTION__.17235>:
   39bf8:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00039c08 <__FUNCTION__.17246>:
   39c08:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00039c18 <__FUNCTION__.17258>:
   39c18:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00039c28 <__FUNCTION__.17269>:
   39c28:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00039c34 <__FUNCTION__.17290>:
   39c34:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   39c44:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   39c54:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   39c64:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   39c74:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   39c84:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   39c94:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   39ca4:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   39cb4:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   39cc4:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   39cd4:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   39ce4:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   39cf4:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   39d04:	2074 2230 0000 0000                         t 0"....

00039d0c <lun_desc>:
   39d0c:	f70d 0001 f765 0001 f7b1 0001 f7fd 0001     ....e...........
   39d1c:	f82d 0001 f8b1 0001 f941 0001 9cf4 0003     -.......A.......
   39d2c:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   39d3c:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   39d4c:	9a92 0002 9b0c 0002 9b0c 0002 9ab0 0002     ................
   39d5c:	9aaa 0002 9ab6 0002 9a98 0002 9abc 0002     ................
   39d6c:	9af2 0002 9cf4 0002 9d44 0002 9d44 0002     ........D...D...
   39d7c:	9d40 0002 9ce6 0002 9d06 0002 9cd6 0002     @...............
   39d8c:	9d18 0002 9d2a 0002 9d92 0002 9dc0 0002     ....*...........
   39d9c:	9dc0 0002 9dbc 0002 9d8c 0002 9d98 0002     ................
   39dac:	9d86 0002 9d9e 0002 9da4 0002               ............

00039db8 <tcc_modules>:
   39db8:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

00039dc4 <_tcc_gclk_ids>:
   39dc4:	1a1a 001b                                   ....

00039dc8 <_tcc_apbcmasks>:
   39dc8:	0100 0000 0200 0000 0400 0000               ............

00039dd4 <_tcc_maxs>:
   39dd4:	ffff 00ff ffff 00ff ffff 0000               ............

00039de0 <_tcc_cc_nums>:
   39de0:	0204 0002                                   ....

00039de4 <_tcc_ow_nums>:
   39de4:	0408 0002                                   ....

00039de8 <_tcc_intflag>:
   39de8:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   39df8:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   39e08:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00039e18 <LfnOfs>:
   39e18:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   39e28:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   39e38:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   39e48:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   39e58:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   39e68:	5441 2020 2020 0020                         AT     .

00039e70 <excvt.4558>:
   39e70:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   39e80:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   39e90:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   39ea0:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   39eb0:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   39ec0:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   39ed0:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   39ee0:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00039ef0 <Tbl>:
   39ef0:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   39f00:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   39f10:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   39f20:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   39f30:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   39f40:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   39f50:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   39f60:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   39f70:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   39f80:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   39f90:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   39fa0:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   39fb0:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   39fc0:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   39fd0:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   39fe0:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00039ff0 <tbl_lower.4308>:
   39ff0:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   3a000:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   3a010:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   3a020:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   3a030:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   3a040:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   3a050:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   3a060:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   3a070:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   3a080:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   3a090:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   3a0a0:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   3a0b0:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   3a0c0:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   3a0d0:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   3a0e0:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   3a0f0:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   3a100:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   3a110:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   3a120:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   3a130:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   3a140:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   3a150:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   3a160:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   3a170:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   3a180:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   3a190:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   3a1a0:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   3a1b0:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   3a1c0:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0003a1d0 <tbl_upper.4309>:
   3a1d0:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   3a1e0:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   3a1f0:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   3a200:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   3a210:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   3a220:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   3a230:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   3a240:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   3a250:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   3a260:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   3a270:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   3a280:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   3a290:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   3a2a0:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   3a2b0:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   3a2c0:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   3a2d0:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   3a2e0:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   3a2f0:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   3a300:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   3a310:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   3a320:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   3a330:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   3a340:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   3a350:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   3a360:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   3a370:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   3a380:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   3a390:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   3a3a0:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   3a3b0:	f0fe 0002 f0fe 0002 f0fe 0002 ef8c 0002     ................
   3a3c0:	f0fe 0002 f076 0002 f0fe 0002 f0fe 0002     ....v...........
   3a3d0:	f0fe 0002 f0fe 0002 f0fe 0002 f0fe 0002     ................
   3a3e0:	f0fe 0002 f0f0 0002 514d 4354 0000 0000     ........MQTC....
   3a3f0:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3a400:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3a440:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3a458:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3a498:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   3a4a8:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   3a4b8:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   3a4c8:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   3a4d8:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   3a4e8:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   3a4f8:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   3a508:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   3a518:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   3a528:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   3a538:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   3a548:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   3a558:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   3a568:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   3a578:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   3a588:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   3a598:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   3a5a8:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   3a5b8:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   3a5c8:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   3a5d8:	5448 5054 002f 0000 0d31 0000 11f2 0003     HTTP/...1.......
   3a5e8:	11ec 0003 11e6 0003 11e0 0003 11f8 0003     ................
   3a5f8:	11da 0003 11f8 0003 11d4 0003 11ce 0003     ................
   3a608:	11f8 0003 11c8 0003 11c8 0003 11c2 0003     ................
   3a618:	11bc 0003 11b6 0003 2000 4200 2400 4200     ......... .B.$.B
   3a628:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   3a638:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   3a648:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   3a658:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   3a668:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3a678:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   3a688:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   3a698:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   3a6a8:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3a6b8:	676e 5320 6565 6173 2177 0a0d 0000 0000     ng Seesaw!......
   3a6c8:	6e49 7469 6169 696c 657a 2064 6553 7365     Initialized Sees
   3a6d8:	7761 0d21 000a 0000 6143 6e6e 746f 6620     aw!.....Cannot f
   3a6e8:	6e69 2064 4d49 2155 0a0d 0000 4d49 2055     ind IMU!....IMU 
   3a6f8:	6f66 6e75 2164 0a0d 0000 0000 4d49 2055     found!......IMU 
   3a708:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3a718:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   3a728:	696c 657a 4920 554d 0a0d 0000 6548 7061     lize IMU....Heap
   3a738:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   3a748:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   3a758:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   3a768:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   3a778:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3a788:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3a798:	7265 7320 6174 7472 6e69 2067 4c43 3a49     er starting CLI:
   3a7a8:	2520 0d64 000a 0000 4957 4946 545f 5341      %d.....WIFI_TAS
   3a7b8:	004b 0000 5245 3a52 5720 4649 2049 6174     K...ERR: WIFI ta
   3a7c8:	6b73 6320 756f 646c 6e20 746f 6220 2065     sk could not be 
   3a7d8:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3a7e8:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   3a7f8:	6e69 2067 4957 4946 203a 6425 0a0d 0000     ing WIFI: %d....
   3a808:	4955 5420 7361 006b 5245 3a52 5520 2049     UI Task.ERR: UI 
   3a818:	6174 6b73 6320 756f 646c 6e20 746f 6220     task could not b
   3a828:	2065 6e69 7469 6169 696c 657a 2164 0a0d     e initialized!..
   3a838:	0000 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   3a848:	6174 7472 6e69 2067 4955 5420 7361 3a6b     tarting UI Task:
   3a858:	2520 0d64 000a 0000 6f43 746e 6f72 206c      %d.....Control 
   3a868:	6154 6b73 0000 0000 5245 3a52 4320 6e6f     Task....ERR: Con
   3a878:	7274 6c6f 7420 7361 206b 6f63 6c75 2064     trol task could 
   3a888:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3a898:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3a8a8:	7265 7320 6174 7472 6e69 2067 6f43 746e     er starting Cont
   3a8b8:	6f72 206c 6154 6b73 203a 6425 0a0d 0000     rol Task: %d....
   3a8c8:	7245 6f72 2072 6e6f 6d20 6d65 726f 2079     Error on memory 
   3a8d8:	6c61 6f6c 6163 6974 6e6f 6f20 206e 5246     allocation on FR
   3a8e8:	4545 5452 534f 0d21 000a 0000 7245 6f72     EERTOS!.....Erro
   3a8f8:	2072 6e6f 7320 6174 6b63 6f20 6576 6672     r on stack overf
   3a908:	6f6c 2077 6e6f 4620 4552 5245 4f54 2153     low on FREERTOS!
   3a918:	0a0d 0000 33f4 0003 3344 0003 3344 0003     .....3..D3..D3..
   3a928:	3342 0003 33e6 0003 33e6 0003 33dc 0003     B3...3...3...3..
   3a938:	3342 0003 33e6 0003 33dc 0003 33e6 0003     B3...3...3...3..
   3a948:	3342 0003 33ec 0003 33ec 0003 33ec 0003     B3...3...3...3..
   3a958:	347c 0003 3e00 0003 3de2 0003 3d9c 0003     |4...>...=...=..
   3a968:	3cba 0003 3d9c 0003 3dd4 0003 3d9c 0003     .<...=...=...=..
   3a978:	3cba 0003 3de2 0003 3de2 0003 3dd4 0003     .<...=...=...=..
   3a988:	3cba 0003 3cb2 0003 3cb2 0003 3cb2 0003     .<...<...<...<..
   3a998:	4018 0003 4460 0003 4320 0003 4320 0003     .@..`D.. C.. C..
   3a9a8:	431c 0003 4438 0003 4438 0003 442a 0003     .C..8D..8D..*D..
   3a9b8:	431c 0003 4438 0003 442a 0003 4438 0003     .C..8D..*D..8D..
   3a9c8:	431c 0003 4440 0003 4440 0003 4440 0003     .C..@D..@D..@D..
   3a9d8:	4644 0003                                   DF..

0003a9dc <_global_impure_ptr>:
   3a9dc:	0134 2000                                   4.. 

0003a9e0 <__sf_fake_stderr>:
	...

0003aa00 <__sf_fake_stdin>:
	...

0003aa20 <__sf_fake_stdout>:
	...
   3aa40:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3aa50:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3aa60:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3aa70:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003aa7d <_ctype_>:
   3aa7d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3aa8d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3aa9d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3aaad:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3aabd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3aacd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3aadd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3aaed:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3aafd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003ab80 <_init>:
   3ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ab82:	46c0      	nop			; (mov r8, r8)
   3ab84:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3ab86:	bc08      	pop	{r3}
   3ab88:	469e      	mov	lr, r3
   3ab8a:	4770      	bx	lr

0003ab8c <__init_array_start>:
   3ab8c:	000120dd 	.word	0x000120dd

0003ab90 <_fini>:
   3ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ab92:	46c0      	nop			; (mov r8, r8)
   3ab94:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3ab96:	bc08      	pop	{r3}
   3ab98:	469e      	mov	lr, r3
   3ab9a:	4770      	bx	lr

0003ab9c <__fini_array_start>:
   3ab9c:	000120b5 	.word	0x000120b5
