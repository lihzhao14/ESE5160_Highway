
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000292e8  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000300  20000000  0003b2e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005a28  20000300  0003b5f0  00030300  2**4
                  ALLOC
  3 .stack        00002000  20005d28  00041018  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
  6 .debug_info   00146a0b  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00011de8  00000000  00000000  00176d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000177f9  00000000  00000000  00188b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003f40  00000000  00000000  001a036d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003b38  00000000  00000000  001a42ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00044800  00000000  00000000  001a7de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00064695  00000000  00000000  001ec5e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c5673  00000000  00000000  00250c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000eda0  00000000  00000000  003162f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	28 7d 00 20 29 bb 02 00 21 bc 02 00 21 bc 02 00     (}. )...!...!...
	...
   1202c:	29 ab 01 00 00 00 00 00 00 00 00 00 51 ac 01 00     )...........Q...
   1203c:	99 ac 01 00 21 bc 02 00 21 bc 02 00 21 bc 02 00     ....!...!...!...
   1204c:	4d 7b 02 00 79 70 02 00 21 bc 02 00 09 2e 01 00     M{..yp..!.......
   1205c:	21 bc 02 00 4d 2f 01 00 f1 81 02 00 09 82 02 00     !...M/..........
   1206c:	21 82 02 00 39 82 02 00 51 82 02 00 69 82 02 00     !...9...Q...i...
   1207c:	71 ba 02 00 85 ba 02 00 99 ba 02 00 15 88 01 00     q...............
   1208c:	29 88 01 00 3d 88 01 00 00 00 00 00 00 00 00 00     )...=...........
   1209c:	91 2c 01 00 21 bc 02 00 cd 2d 01 00 21 bc 02 00     .,..!....-..!...
   120ac:	21 bc 02 00 00 00 00 00                             !.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003b2e8 	.word	0x0003b2e8

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003b2e8 	.word	0x0003b2e8
   1210c:	0003b2e8 	.word	0x0003b2e8
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223c      	movs	r2, #60	; 0x3c
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	2000476c 	.word	0x2000476c
   12224:	00014a81 	.word	0x00014a81

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223c      	movs	r2, #60	; 0x3c
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	2000476c 	.word	0x2000476c
   1227c:	00014a81 	.word	0x00014a81

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000031c 	.word	0x2000031c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b08      	ldr	r3, [pc, #32]	; (122dc <gfx_mono_framebuffer_put_byte+0x40>)
   122bc:	681a      	ldr	r2, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	019b      	lsls	r3, r3, #6
   122c4:	0019      	movs	r1, r3
   122c6:	1dbb      	adds	r3, r7, #6
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	18cb      	adds	r3, r1, r3
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	1d7a      	adds	r2, r7, #5
   122d0:	7812      	ldrb	r2, [r2, #0]
   122d2:	701a      	strb	r2, [r3, #0]
}
   122d4:	46c0      	nop			; (mov r8, r8)
   122d6:	46bd      	mov	sp, r7
   122d8:	b003      	add	sp, #12
   122da:	bd90      	pop	{r4, r7, pc}
   122dc:	2000031c 	.word	0x2000031c

000122e0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	0002      	movs	r2, r0
   122e8:	1dfb      	adds	r3, r7, #7
   122ea:	701a      	strb	r2, [r3, #0]
   122ec:	1dbb      	adds	r3, r7, #6
   122ee:	1c0a      	adds	r2, r1, #0
   122f0:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122f2:	4b07      	ldr	r3, [pc, #28]	; (12310 <gfx_mono_framebuffer_get_byte+0x30>)
   122f4:	681a      	ldr	r2, [r3, #0]
   122f6:	1dfb      	adds	r3, r7, #7
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	019b      	lsls	r3, r3, #6
   122fc:	0019      	movs	r1, r3
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	18cb      	adds	r3, r1, r3
   12304:	18d3      	adds	r3, r2, r3
   12306:	781b      	ldrb	r3, [r3, #0]
}
   12308:	0018      	movs	r0, r3
   1230a:	46bd      	mov	sp, r7
   1230c:	b002      	add	sp, #8
   1230e:	bd80      	pop	{r7, pc}
   12310:	2000031c 	.word	0x2000031c

00012314 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12314:	b5b0      	push	{r4, r5, r7, lr}
   12316:	b084      	sub	sp, #16
   12318:	af00      	add	r7, sp, #0
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0010      	movs	r0, r2
   12320:	0019      	movs	r1, r3
   12322:	1dfb      	adds	r3, r7, #7
   12324:	1c2a      	adds	r2, r5, #0
   12326:	701a      	strb	r2, [r3, #0]
   12328:	1dbb      	adds	r3, r7, #6
   1232a:	1c22      	adds	r2, r4, #0
   1232c:	701a      	strb	r2, [r3, #0]
   1232e:	1d7b      	adds	r3, r7, #5
   12330:	1c02      	adds	r2, r0, #0
   12332:	701a      	strb	r2, [r3, #0]
   12334:	1d3b      	adds	r3, r7, #4
   12336:	1c0a      	adds	r2, r1, #0
   12338:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1233a:	1dfb      	adds	r3, r7, #7
   1233c:	781a      	ldrb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	18d3      	adds	r3, r2, r3
   12344:	2b40      	cmp	r3, #64	; 0x40
   12346:	dd05      	ble.n	12354 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	1dfa      	adds	r2, r7, #7
   1234c:	7812      	ldrb	r2, [r2, #0]
   1234e:	2140      	movs	r1, #64	; 0x40
   12350:	1a8a      	subs	r2, r1, r2
   12352:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12354:	230f      	movs	r3, #15
   12356:	18fb      	adds	r3, r7, r3
   12358:	1dba      	adds	r2, r7, #6
   1235a:	7812      	ldrb	r2, [r2, #0]
   1235c:	08d2      	lsrs	r2, r2, #3
   1235e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12360:	1dbb      	adds	r3, r7, #6
   12362:	781a      	ldrb	r2, [r3, #0]
   12364:	230f      	movs	r3, #15
   12366:	18fb      	adds	r3, r7, r3
   12368:	781b      	ldrb	r3, [r3, #0]
   1236a:	00db      	lsls	r3, r3, #3
   1236c:	1ad3      	subs	r3, r2, r3
   1236e:	2201      	movs	r2, #1
   12370:	409a      	lsls	r2, r3
   12372:	230e      	movs	r3, #14
   12374:	18fb      	adds	r3, r7, r3
   12376:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   12378:	1d7b      	adds	r3, r7, #5
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <gfx_mono_generic_draw_horizontal_line+0x6e>
   12380:	e0a4      	b.n	124cc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	2b01      	cmp	r3, #1
   12388:	d02f      	beq.n	123ea <gfx_mono_generic_draw_horizontal_line+0xd6>
   1238a:	2b02      	cmp	r3, #2
   1238c:	d100      	bne.n	12390 <gfx_mono_generic_draw_horizontal_line+0x7c>
   1238e:	e095      	b.n	124bc <gfx_mono_generic_draw_horizontal_line+0x1a8>
   12390:	2b00      	cmp	r3, #0
   12392:	d061      	beq.n	12458 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   12394:	e09b      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12396:	1dfa      	adds	r2, r7, #7
   12398:	1d7b      	adds	r3, r7, #5
   1239a:	7812      	ldrb	r2, [r2, #0]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	18d3      	adds	r3, r2, r3
   123a0:	b2da      	uxtb	r2, r3
   123a2:	230d      	movs	r3, #13
   123a4:	18fc      	adds	r4, r7, r3
   123a6:	230f      	movs	r3, #15
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	0011      	movs	r1, r2
   123ae:	0018      	movs	r0, r3
   123b0:	4b48      	ldr	r3, [pc, #288]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   123b2:	4798      	blx	r3
   123b4:	0003      	movs	r3, r0
   123b6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   123b8:	230d      	movs	r3, #13
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	220d      	movs	r2, #13
   123be:	18b9      	adds	r1, r7, r2
   123c0:	220e      	movs	r2, #14
   123c2:	18ba      	adds	r2, r7, r2
   123c4:	7809      	ldrb	r1, [r1, #0]
   123c6:	7812      	ldrb	r2, [r2, #0]
   123c8:	430a      	orrs	r2, r1
   123ca:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   123cc:	1dfa      	adds	r2, r7, #7
   123ce:	1d7b      	adds	r3, r7, #5
   123d0:	7812      	ldrb	r2, [r2, #0]
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	18d3      	adds	r3, r2, r3
   123d6:	b2d9      	uxtb	r1, r3
   123d8:	230d      	movs	r3, #13
   123da:	18fb      	adds	r3, r7, r3
   123dc:	781a      	ldrb	r2, [r3, #0]
   123de:	230f      	movs	r3, #15
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	2300      	movs	r3, #0
   123e6:	4c3c      	ldr	r4, [pc, #240]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   123e8:	47a0      	blx	r4
		while (length-- > 0) {
   123ea:	1d7b      	adds	r3, r7, #5
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	1d7a      	adds	r2, r7, #5
   123f0:	1e59      	subs	r1, r3, #1
   123f2:	7011      	strb	r1, [r2, #0]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d1ce      	bne.n	12396 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   123f8:	e069      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   123fa:	1dfa      	adds	r2, r7, #7
   123fc:	1d7b      	adds	r3, r7, #5
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	18d3      	adds	r3, r2, r3
   12404:	b2da      	uxtb	r2, r3
   12406:	230d      	movs	r3, #13
   12408:	18fc      	adds	r4, r7, r3
   1240a:	230f      	movs	r3, #15
   1240c:	18fb      	adds	r3, r7, r3
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	0011      	movs	r1, r2
   12412:	0018      	movs	r0, r3
   12414:	4b2f      	ldr	r3, [pc, #188]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1241c:	230e      	movs	r3, #14
   1241e:	18fb      	adds	r3, r7, r3
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	b25b      	sxtb	r3, r3
   12424:	43db      	mvns	r3, r3
   12426:	b25b      	sxtb	r3, r3
   12428:	220d      	movs	r2, #13
   1242a:	18ba      	adds	r2, r7, r2
   1242c:	7812      	ldrb	r2, [r2, #0]
   1242e:	b252      	sxtb	r2, r2
   12430:	4013      	ands	r3, r2
   12432:	b25a      	sxtb	r2, r3
   12434:	230d      	movs	r3, #13
   12436:	18fb      	adds	r3, r7, r3
   12438:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1243a:	1dfa      	adds	r2, r7, #7
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	18d3      	adds	r3, r2, r3
   12444:	b2d9      	uxtb	r1, r3
   12446:	230d      	movs	r3, #13
   12448:	18fb      	adds	r3, r7, r3
   1244a:	781a      	ldrb	r2, [r3, #0]
   1244c:	230f      	movs	r3, #15
   1244e:	18fb      	adds	r3, r7, r3
   12450:	7818      	ldrb	r0, [r3, #0]
   12452:	2300      	movs	r3, #0
   12454:	4c20      	ldr	r4, [pc, #128]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12456:	47a0      	blx	r4
		while (length-- > 0) {
   12458:	1d7b      	adds	r3, r7, #5
   1245a:	781b      	ldrb	r3, [r3, #0]
   1245c:	1d7a      	adds	r2, r7, #5
   1245e:	1e59      	subs	r1, r3, #1
   12460:	7011      	strb	r1, [r2, #0]
   12462:	2b00      	cmp	r3, #0
   12464:	d1c9      	bne.n	123fa <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12466:	e032      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12468:	1dfa      	adds	r2, r7, #7
   1246a:	1d7b      	adds	r3, r7, #5
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	18d3      	adds	r3, r2, r3
   12472:	b2da      	uxtb	r2, r3
   12474:	230d      	movs	r3, #13
   12476:	18fc      	adds	r4, r7, r3
   12478:	230f      	movs	r3, #15
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	0011      	movs	r1, r2
   12480:	0018      	movs	r0, r3
   12482:	4b14      	ldr	r3, [pc, #80]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12484:	4798      	blx	r3
   12486:	0003      	movs	r3, r0
   12488:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   1248a:	230d      	movs	r3, #13
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	220d      	movs	r2, #13
   12490:	18b9      	adds	r1, r7, r2
   12492:	220e      	movs	r2, #14
   12494:	18ba      	adds	r2, r7, r2
   12496:	7809      	ldrb	r1, [r1, #0]
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	404a      	eors	r2, r1
   1249c:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1249e:	1dfa      	adds	r2, r7, #7
   124a0:	1d7b      	adds	r3, r7, #5
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	18d3      	adds	r3, r2, r3
   124a8:	b2d9      	uxtb	r1, r3
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230f      	movs	r3, #15
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	7818      	ldrb	r0, [r3, #0]
   124b6:	2300      	movs	r3, #0
   124b8:	4c07      	ldr	r4, [pc, #28]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   124ba:	47a0      	blx	r4
		while (length-- > 0) {
   124bc:	1d7b      	adds	r3, r7, #5
   124be:	781b      	ldrb	r3, [r3, #0]
   124c0:	1d7a      	adds	r2, r7, #5
   124c2:	1e59      	subs	r1, r3, #1
   124c4:	7011      	strb	r1, [r2, #0]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d1ce      	bne.n	12468 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   124ca:	e000      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   124cc:	46c0      	nop			; (mov r8, r8)
	}
}
   124ce:	46bd      	mov	sp, r7
   124d0:	b004      	add	sp, #16
   124d2:	bdb0      	pop	{r4, r5, r7, pc}
   124d4:	00012a8d 	.word	0x00012a8d
   124d8:	000129ed 	.word	0x000129ed

000124dc <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   124dc:	b5b0      	push	{r4, r5, r7, lr}
   124de:	b082      	sub	sp, #8
   124e0:	af00      	add	r7, sp, #0
   124e2:	0005      	movs	r5, r0
   124e4:	000c      	movs	r4, r1
   124e6:	0010      	movs	r0, r2
   124e8:	0019      	movs	r1, r3
   124ea:	1dfb      	adds	r3, r7, #7
   124ec:	1c2a      	adds	r2, r5, #0
   124ee:	701a      	strb	r2, [r3, #0]
   124f0:	1dbb      	adds	r3, r7, #6
   124f2:	1c22      	adds	r2, r4, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	1d7b      	adds	r3, r7, #5
   124f8:	1c02      	adds	r2, r0, #0
   124fa:	701a      	strb	r2, [r3, #0]
   124fc:	1d3b      	adds	r3, r7, #4
   124fe:	1c0a      	adds	r2, r1, #0
   12500:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   12502:	1d3b      	adds	r3, r7, #4
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d018      	beq.n	1253c <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   1250a:	e00f      	b.n	1252c <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   1250c:	1dba      	adds	r2, r7, #6
   1250e:	1d3b      	adds	r3, r7, #4
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	18d3      	adds	r3, r2, r3
   12516:	b2d9      	uxtb	r1, r3
   12518:	2318      	movs	r3, #24
   1251a:	18fb      	adds	r3, r7, r3
   1251c:	781c      	ldrb	r4, [r3, #0]
   1251e:	1d7b      	adds	r3, r7, #5
   12520:	781a      	ldrb	r2, [r3, #0]
   12522:	1dfb      	adds	r3, r7, #7
   12524:	7818      	ldrb	r0, [r3, #0]
   12526:	0023      	movs	r3, r4
   12528:	4c06      	ldr	r4, [pc, #24]	; (12544 <gfx_mono_generic_draw_filled_rect+0x68>)
   1252a:	47a0      	blx	r4
	while (height-- > 0) {
   1252c:	1d3b      	adds	r3, r7, #4
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	1d3a      	adds	r2, r7, #4
   12532:	1e59      	subs	r1, r3, #1
   12534:	7011      	strb	r1, [r2, #0]
   12536:	2b00      	cmp	r3, #0
   12538:	d1e8      	bne.n	1250c <gfx_mono_generic_draw_filled_rect+0x30>
   1253a:	e000      	b.n	1253e <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   1253c:	46c0      	nop			; (mov r8, r8)
	}
}
   1253e:	46bd      	mov	sp, r7
   12540:	b002      	add	sp, #8
   12542:	bdb0      	pop	{r4, r5, r7, pc}
   12544:	00012315 	.word	0x00012315

00012548 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12548:	b590      	push	{r4, r7, lr}
   1254a:	b087      	sub	sp, #28
   1254c:	af00      	add	r7, sp, #0
   1254e:	0004      	movs	r4, r0
   12550:	0008      	movs	r0, r1
   12552:	0011      	movs	r1, r2
   12554:	603b      	str	r3, [r7, #0]
   12556:	1dfb      	adds	r3, r7, #7
   12558:	1c22      	adds	r2, r4, #0
   1255a:	701a      	strb	r2, [r3, #0]
   1255c:	1dbb      	adds	r3, r7, #6
   1255e:	1c02      	adds	r2, r0, #0
   12560:	701a      	strb	r2, [r3, #0]
   12562:	1d7b      	adds	r3, r7, #5
   12564:	1c0a      	adds	r2, r1, #0
   12566:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12568:	2310      	movs	r3, #16
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	1dba      	adds	r2, r7, #6
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12572:	230f      	movs	r3, #15
   12574:	18fb      	adds	r3, r7, r3
   12576:	1d7a      	adds	r2, r7, #5
   12578:	7812      	ldrb	r2, [r2, #0]
   1257a:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	7a1a      	ldrb	r2, [r3, #8]
   12580:	2313      	movs	r3, #19
   12582:	18fb      	adds	r3, r7, r3
   12584:	08d2      	lsrs	r2, r2, #3
   12586:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12588:	683b      	ldr	r3, [r7, #0]
   1258a:	7a1b      	ldrb	r3, [r3, #8]
   1258c:	2207      	movs	r2, #7
   1258e:	4013      	ands	r3, r2
   12590:	b2db      	uxtb	r3, r3
   12592:	2b00      	cmp	r3, #0
   12594:	d006      	beq.n	125a4 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12596:	2313      	movs	r3, #19
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781a      	ldrb	r2, [r3, #0]
   1259c:	2313      	movs	r3, #19
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	3201      	adds	r2, #1
   125a2:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   125a4:	2313      	movs	r3, #19
   125a6:	18fb      	adds	r3, r7, r3
   125a8:	781b      	ldrb	r3, [r3, #0]
   125aa:	b29b      	uxth	r3, r3
   125ac:	683a      	ldr	r2, [r7, #0]
   125ae:	7a52      	ldrb	r2, [r2, #9]
   125b0:	b292      	uxth	r2, r2
   125b2:	4353      	muls	r3, r2
   125b4:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   125b6:	1dfb      	adds	r3, r7, #7
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	6839      	ldr	r1, [r7, #0]
   125bc:	7a89      	ldrb	r1, [r1, #10]
   125be:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   125c0:	b299      	uxth	r1, r3
   125c2:	230c      	movs	r3, #12
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	434a      	muls	r2, r1
   125c8:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	230c      	movs	r3, #12
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	881b      	ldrh	r3, [r3, #0]
   125d4:	18d3      	adds	r3, r2, r3
   125d6:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   125d8:	2312      	movs	r3, #18
   125da:	18fb      	adds	r3, r7, r3
   125dc:	683a      	ldr	r2, [r7, #0]
   125de:	7a52      	ldrb	r2, [r2, #9]
   125e0:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   125e2:	230e      	movs	r3, #14
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	2200      	movs	r2, #0
   125e8:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   125ea:	230b      	movs	r3, #11
   125ec:	18fb      	adds	r3, r7, r3
   125ee:	683a      	ldr	r2, [r7, #0]
   125f0:	7a12      	ldrb	r2, [r2, #8]
   125f2:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   125f4:	2311      	movs	r3, #17
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	2200      	movs	r2, #0
   125fa:	701a      	strb	r2, [r3, #0]
   125fc:	e034      	b.n	12668 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   125fe:	2311      	movs	r3, #17
   12600:	18fb      	adds	r3, r7, r3
   12602:	781b      	ldrb	r3, [r3, #0]
   12604:	2207      	movs	r2, #7
   12606:	4013      	ands	r3, r2
   12608:	b2db      	uxtb	r3, r3
   1260a:	2b00      	cmp	r3, #0
   1260c:	d107      	bne.n	1261e <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   1260e:	230e      	movs	r3, #14
   12610:	18fb      	adds	r3, r7, r3
   12612:	697a      	ldr	r2, [r7, #20]
   12614:	7812      	ldrb	r2, [r2, #0]
   12616:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12618:	697b      	ldr	r3, [r7, #20]
   1261a:	3301      	adds	r3, #1
   1261c:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   1261e:	230e      	movs	r3, #14
   12620:	18fb      	adds	r3, r7, r3
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	b25b      	sxtb	r3, r3
   12626:	2b00      	cmp	r3, #0
   12628:	da09      	bge.n	1263e <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   1262a:	230f      	movs	r3, #15
   1262c:	18fb      	adds	r3, r7, r3
   1262e:	7819      	ldrb	r1, [r3, #0]
   12630:	2310      	movs	r3, #16
   12632:	18fb      	adds	r3, r7, r3
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2201      	movs	r2, #1
   12638:	0018      	movs	r0, r3
   1263a:	4b1d      	ldr	r3, [pc, #116]	; (126b0 <gfx_mono_draw_char_progmem+0x168>)
   1263c:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   1263e:	2310      	movs	r3, #16
   12640:	18fb      	adds	r3, r7, r3
   12642:	2210      	movs	r2, #16
   12644:	18ba      	adds	r2, r7, r2
   12646:	7812      	ldrb	r2, [r2, #0]
   12648:	3201      	adds	r2, #1
   1264a:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   1264c:	230e      	movs	r3, #14
   1264e:	18fa      	adds	r2, r7, r3
   12650:	230e      	movs	r3, #14
   12652:	18fb      	adds	r3, r7, r3
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	18db      	adds	r3, r3, r3
   12658:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   1265a:	2311      	movs	r3, #17
   1265c:	18fb      	adds	r3, r7, r3
   1265e:	781a      	ldrb	r2, [r3, #0]
   12660:	2311      	movs	r3, #17
   12662:	18fb      	adds	r3, r7, r3
   12664:	3201      	adds	r2, #1
   12666:	701a      	strb	r2, [r3, #0]
   12668:	2311      	movs	r3, #17
   1266a:	18fa      	adds	r2, r7, r3
   1266c:	230b      	movs	r3, #11
   1266e:	18fb      	adds	r3, r7, r3
   12670:	7812      	ldrb	r2, [r2, #0]
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	429a      	cmp	r2, r3
   12676:	d3c2      	bcc.n	125fe <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12678:	230f      	movs	r3, #15
   1267a:	18fb      	adds	r3, r7, r3
   1267c:	220f      	movs	r2, #15
   1267e:	18ba      	adds	r2, r7, r2
   12680:	7812      	ldrb	r2, [r2, #0]
   12682:	3201      	adds	r2, #1
   12684:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12686:	2310      	movs	r3, #16
   12688:	18fb      	adds	r3, r7, r3
   1268a:	1dba      	adds	r2, r7, #6
   1268c:	7812      	ldrb	r2, [r2, #0]
   1268e:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12690:	2312      	movs	r3, #18
   12692:	18fb      	adds	r3, r7, r3
   12694:	781a      	ldrb	r2, [r3, #0]
   12696:	2312      	movs	r3, #18
   12698:	18fb      	adds	r3, r7, r3
   1269a:	3a01      	subs	r2, #1
   1269c:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   1269e:	2312      	movs	r3, #18
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	781b      	ldrb	r3, [r3, #0]
   126a4:	2b00      	cmp	r3, #0
   126a6:	d19c      	bne.n	125e2 <gfx_mono_draw_char_progmem+0x9a>
}
   126a8:	46c0      	nop			; (mov r8, r8)
   126aa:	46bd      	mov	sp, r7
   126ac:	b007      	add	sp, #28
   126ae:	bd90      	pop	{r4, r7, pc}
   126b0:	000128f9 	.word	0x000128f9

000126b4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   126b4:	b590      	push	{r4, r7, lr}
   126b6:	b085      	sub	sp, #20
   126b8:	af02      	add	r7, sp, #8
   126ba:	0004      	movs	r4, r0
   126bc:	0008      	movs	r0, r1
   126be:	0011      	movs	r1, r2
   126c0:	603b      	str	r3, [r7, #0]
   126c2:	1dfb      	adds	r3, r7, #7
   126c4:	1c22      	adds	r2, r4, #0
   126c6:	701a      	strb	r2, [r3, #0]
   126c8:	1dbb      	adds	r3, r7, #6
   126ca:	1c02      	adds	r2, r0, #0
   126cc:	701a      	strb	r2, [r3, #0]
   126ce:	1d7b      	adds	r3, r7, #5
   126d0:	1c0a      	adds	r2, r1, #0
   126d2:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   126d4:	683b      	ldr	r3, [r7, #0]
   126d6:	7a1a      	ldrb	r2, [r3, #8]
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	7a5c      	ldrb	r4, [r3, #9]
   126dc:	1d7b      	adds	r3, r7, #5
   126de:	7819      	ldrb	r1, [r3, #0]
   126e0:	1dbb      	adds	r3, r7, #6
   126e2:	7818      	ldrb	r0, [r3, #0]
   126e4:	2300      	movs	r3, #0
   126e6:	9300      	str	r3, [sp, #0]
   126e8:	0023      	movs	r3, r4
   126ea:	4c0b      	ldr	r4, [pc, #44]	; (12718 <gfx_mono_draw_char+0x64>)
   126ec:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   126ee:	683b      	ldr	r3, [r7, #0]
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	2b00      	cmp	r3, #0
   126f4:	d000      	beq.n	126f8 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   126f6:	e00a      	b.n	1270e <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   126f8:	683c      	ldr	r4, [r7, #0]
   126fa:	1d7b      	adds	r3, r7, #5
   126fc:	781a      	ldrb	r2, [r3, #0]
   126fe:	1dbb      	adds	r3, r7, #6
   12700:	7819      	ldrb	r1, [r3, #0]
   12702:	1dfb      	adds	r3, r7, #7
   12704:	7818      	ldrb	r0, [r3, #0]
   12706:	0023      	movs	r3, r4
   12708:	4c04      	ldr	r4, [pc, #16]	; (1271c <gfx_mono_draw_char+0x68>)
   1270a:	47a0      	blx	r4
		break;
   1270c:	46c0      	nop			; (mov r8, r8)
	}
}
   1270e:	46c0      	nop			; (mov r8, r8)
   12710:	46bd      	mov	sp, r7
   12712:	b003      	add	sp, #12
   12714:	bd90      	pop	{r4, r7, pc}
   12716:	46c0      	nop			; (mov r8, r8)
   12718:	000124dd 	.word	0x000124dd
   1271c:	00012549 	.word	0x00012549

00012720 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12720:	b590      	push	{r4, r7, lr}
   12722:	b087      	sub	sp, #28
   12724:	af00      	add	r7, sp, #0
   12726:	60f8      	str	r0, [r7, #12]
   12728:	0008      	movs	r0, r1
   1272a:	0011      	movs	r1, r2
   1272c:	607b      	str	r3, [r7, #4]
   1272e:	230b      	movs	r3, #11
   12730:	18fb      	adds	r3, r7, r3
   12732:	1c02      	adds	r2, r0, #0
   12734:	701a      	strb	r2, [r3, #0]
   12736:	230a      	movs	r3, #10
   12738:	18fb      	adds	r3, r7, r3
   1273a:	1c0a      	adds	r2, r1, #0
   1273c:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   1273e:	2317      	movs	r3, #23
   12740:	18fb      	adds	r3, r7, r3
   12742:	220b      	movs	r2, #11
   12744:	18ba      	adds	r2, r7, r2
   12746:	7812      	ldrb	r2, [r2, #0]
   12748:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   1274a:	68fb      	ldr	r3, [r7, #12]
   1274c:	781b      	ldrb	r3, [r3, #0]
   1274e:	2b0a      	cmp	r3, #10
   12750:	d111      	bne.n	12776 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12752:	230b      	movs	r3, #11
   12754:	18fb      	adds	r3, r7, r3
   12756:	2217      	movs	r2, #23
   12758:	18ba      	adds	r2, r7, r2
   1275a:	7812      	ldrb	r2, [r2, #0]
   1275c:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	7a5a      	ldrb	r2, [r3, #9]
   12762:	230a      	movs	r3, #10
   12764:	18fb      	adds	r3, r7, r3
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	18d3      	adds	r3, r2, r3
   1276a:	b2da      	uxtb	r2, r3
   1276c:	230a      	movs	r3, #10
   1276e:	18fb      	adds	r3, r7, r3
   12770:	3201      	adds	r2, #1
   12772:	701a      	strb	r2, [r3, #0]
   12774:	e018      	b.n	127a8 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12776:	68fb      	ldr	r3, [r7, #12]
   12778:	781b      	ldrb	r3, [r3, #0]
   1277a:	2b0d      	cmp	r3, #13
   1277c:	d014      	beq.n	127a8 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   1277e:	68fb      	ldr	r3, [r7, #12]
   12780:	7818      	ldrb	r0, [r3, #0]
   12782:	687c      	ldr	r4, [r7, #4]
   12784:	230a      	movs	r3, #10
   12786:	18fb      	adds	r3, r7, r3
   12788:	781a      	ldrb	r2, [r3, #0]
   1278a:	230b      	movs	r3, #11
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	7819      	ldrb	r1, [r3, #0]
   12790:	0023      	movs	r3, r4
   12792:	4c0b      	ldr	r4, [pc, #44]	; (127c0 <gfx_mono_draw_string+0xa0>)
   12794:	47a0      	blx	r4
			x += font->width;
   12796:	687b      	ldr	r3, [r7, #4]
   12798:	7a19      	ldrb	r1, [r3, #8]
   1279a:	230b      	movs	r3, #11
   1279c:	18fb      	adds	r3, r7, r3
   1279e:	220b      	movs	r2, #11
   127a0:	18ba      	adds	r2, r7, r2
   127a2:	7812      	ldrb	r2, [r2, #0]
   127a4:	188a      	adds	r2, r1, r2
   127a6:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   127a8:	68fb      	ldr	r3, [r7, #12]
   127aa:	3301      	adds	r3, #1
   127ac:	60fb      	str	r3, [r7, #12]
   127ae:	68fb      	ldr	r3, [r7, #12]
   127b0:	781b      	ldrb	r3, [r3, #0]
   127b2:	2b00      	cmp	r3, #0
   127b4:	d1c9      	bne.n	1274a <gfx_mono_draw_string+0x2a>
}
   127b6:	46c0      	nop			; (mov r8, r8)
   127b8:	46bd      	mov	sp, r7
   127ba:	b007      	add	sp, #28
   127bc:	bd90      	pop	{r4, r7, pc}
   127be:	46c0      	nop			; (mov r8, r8)
   127c0:	000126b5 	.word	0x000126b5

000127c4 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   127c4:	b580      	push	{r7, lr}
   127c6:	b082      	sub	sp, #8
   127c8:	af00      	add	r7, sp, #0
   127ca:	0002      	movs	r2, r0
   127cc:	1dfb      	adds	r3, r7, #7
   127ce:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   127d0:	1dfb      	adds	r3, r7, #7
   127d2:	1dfa      	adds	r2, r7, #7
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	210f      	movs	r1, #15
   127d8:	400a      	ands	r2, r1
   127da:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   127dc:	1dfb      	adds	r3, r7, #7
   127de:	781b      	ldrb	r3, [r3, #0]
   127e0:	2250      	movs	r2, #80	; 0x50
   127e2:	4252      	negs	r2, r2
   127e4:	4313      	orrs	r3, r2
   127e6:	b2db      	uxtb	r3, r3
   127e8:	0018      	movs	r0, r3
   127ea:	4b03      	ldr	r3, [pc, #12]	; (127f8 <ssd1306_set_page_address+0x34>)
   127ec:	4798      	blx	r3
}
   127ee:	46c0      	nop			; (mov r8, r8)
   127f0:	46bd      	mov	sp, r7
   127f2:	b002      	add	sp, #8
   127f4:	bd80      	pop	{r7, pc}
   127f6:	46c0      	nop			; (mov r8, r8)
   127f8:	000121d1 	.word	0x000121d1

000127fc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   127fc:	b580      	push	{r7, lr}
   127fe:	b082      	sub	sp, #8
   12800:	af00      	add	r7, sp, #0
   12802:	0002      	movs	r2, r0
   12804:	1dfb      	adds	r3, r7, #7
   12806:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12808:	1dfb      	adds	r3, r7, #7
   1280a:	1dfa      	adds	r2, r7, #7
   1280c:	7812      	ldrb	r2, [r2, #0]
   1280e:	217f      	movs	r1, #127	; 0x7f
   12810:	400a      	ands	r2, r1
   12812:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12814:	1dfb      	adds	r3, r7, #7
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	091b      	lsrs	r3, r3, #4
   1281a:	b2db      	uxtb	r3, r3
   1281c:	2210      	movs	r2, #16
   1281e:	4313      	orrs	r3, r2
   12820:	b2db      	uxtb	r3, r3
   12822:	3302      	adds	r3, #2
   12824:	b2db      	uxtb	r3, r3
   12826:	0018      	movs	r0, r3
   12828:	4b06      	ldr	r3, [pc, #24]	; (12844 <ssd1306_set_column_address+0x48>)
   1282a:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   1282c:	1dfb      	adds	r3, r7, #7
   1282e:	781b      	ldrb	r3, [r3, #0]
   12830:	220f      	movs	r2, #15
   12832:	4013      	ands	r3, r2
   12834:	b2db      	uxtb	r3, r3
   12836:	0018      	movs	r0, r3
   12838:	4b02      	ldr	r3, [pc, #8]	; (12844 <ssd1306_set_column_address+0x48>)
   1283a:	4798      	blx	r3
}
   1283c:	46c0      	nop			; (mov r8, r8)
   1283e:	46bd      	mov	sp, r7
   12840:	b002      	add	sp, #8
   12842:	bd80      	pop	{r7, pc}
   12844:	000121d1 	.word	0x000121d1

00012848 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12848:	b580      	push	{r7, lr}
   1284a:	b082      	sub	sp, #8
   1284c:	af00      	add	r7, sp, #0
   1284e:	0002      	movs	r2, r0
   12850:	1dfb      	adds	r3, r7, #7
   12852:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12854:	1dfb      	adds	r3, r7, #7
   12856:	1dfa      	adds	r2, r7, #7
   12858:	7812      	ldrb	r2, [r2, #0]
   1285a:	213f      	movs	r1, #63	; 0x3f
   1285c:	400a      	ands	r2, r1
   1285e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12860:	1dfb      	adds	r3, r7, #7
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	2240      	movs	r2, #64	; 0x40
   12866:	4313      	orrs	r3, r2
   12868:	b2db      	uxtb	r3, r3
   1286a:	0018      	movs	r0, r3
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <ssd1306_set_display_start_line_address+0x30>)
   1286e:	4798      	blx	r3
}
   12870:	46c0      	nop			; (mov r8, r8)
   12872:	46bd      	mov	sp, r7
   12874:	b002      	add	sp, #8
   12876:	bd80      	pop	{r7, pc}
   12878:	000121d1 	.word	0x000121d1

0001287c <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   1287c:	b590      	push	{r4, r7, lr}
   1287e:	b083      	sub	sp, #12
   12880:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12882:	4b18      	ldr	r3, [pc, #96]	; (128e4 <gfx_mono_ssd1306_init+0x68>)
   12884:	0018      	movs	r0, r3
   12886:	4b18      	ldr	r3, [pc, #96]	; (128e8 <gfx_mono_ssd1306_init+0x6c>)
   12888:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   1288a:	4b18      	ldr	r3, [pc, #96]	; (128ec <gfx_mono_ssd1306_init+0x70>)
   1288c:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   1288e:	2000      	movs	r0, #0
   12890:	4b17      	ldr	r3, [pc, #92]	; (128f0 <gfx_mono_ssd1306_init+0x74>)
   12892:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12894:	1dfb      	adds	r3, r7, #7
   12896:	2200      	movs	r2, #0
   12898:	701a      	strb	r2, [r3, #0]
   1289a:	e01a      	b.n	128d2 <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   1289c:	1dbb      	adds	r3, r7, #6
   1289e:	2200      	movs	r2, #0
   128a0:	701a      	strb	r2, [r3, #0]
   128a2:	e00c      	b.n	128be <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   128a4:	1dbb      	adds	r3, r7, #6
   128a6:	7819      	ldrb	r1, [r3, #0]
   128a8:	1dfb      	adds	r3, r7, #7
   128aa:	7818      	ldrb	r0, [r3, #0]
   128ac:	2301      	movs	r3, #1
   128ae:	2200      	movs	r2, #0
   128b0:	4c10      	ldr	r4, [pc, #64]	; (128f4 <gfx_mono_ssd1306_init+0x78>)
   128b2:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   128b4:	1dbb      	adds	r3, r7, #6
   128b6:	781a      	ldrb	r2, [r3, #0]
   128b8:	1dbb      	adds	r3, r7, #6
   128ba:	3201      	adds	r2, #1
   128bc:	701a      	strb	r2, [r3, #0]
   128be:	1dbb      	adds	r3, r7, #6
   128c0:	781b      	ldrb	r3, [r3, #0]
   128c2:	b25b      	sxtb	r3, r3
   128c4:	2b00      	cmp	r3, #0
   128c6:	daed      	bge.n	128a4 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   128c8:	1dfb      	adds	r3, r7, #7
   128ca:	781a      	ldrb	r2, [r3, #0]
   128cc:	1dfb      	adds	r3, r7, #7
   128ce:	3201      	adds	r2, #1
   128d0:	701a      	strb	r2, [r3, #0]
   128d2:	1dfb      	adds	r3, r7, #7
   128d4:	781b      	ldrb	r3, [r3, #0]
   128d6:	2b05      	cmp	r3, #5
   128d8:	d9e0      	bls.n	1289c <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   128da:	46c0      	nop			; (mov r8, r8)
   128dc:	46bd      	mov	sp, r7
   128de:	b003      	add	sp, #12
   128e0:	bd90      	pop	{r4, r7, pc}
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	20000320 	.word	0x20000320
   128e8:	00012281 	.word	0x00012281
   128ec:	00012129 	.word	0x00012129
   128f0:	00012849 	.word	0x00012849
   128f4:	000129ed 	.word	0x000129ed

000128f8 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   128f8:	b590      	push	{r4, r7, lr}
   128fa:	b085      	sub	sp, #20
   128fc:	af00      	add	r7, sp, #0
   128fe:	0004      	movs	r4, r0
   12900:	0008      	movs	r0, r1
   12902:	0011      	movs	r1, r2
   12904:	1dfb      	adds	r3, r7, #7
   12906:	1c22      	adds	r2, r4, #0
   12908:	701a      	strb	r2, [r3, #0]
   1290a:	1dbb      	adds	r3, r7, #6
   1290c:	1c02      	adds	r2, r0, #0
   1290e:	701a      	strb	r2, [r3, #0]
   12910:	1d7b      	adds	r3, r7, #5
   12912:	1c0a      	adds	r2, r1, #0
   12914:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	2b3f      	cmp	r3, #63	; 0x3f
   1291c:	d85d      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
   1291e:	1dbb      	adds	r3, r7, #6
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b2f      	cmp	r3, #47	; 0x2f
   12924:	d859      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12926:	230e      	movs	r3, #14
   12928:	18fb      	adds	r3, r7, r3
   1292a:	1dba      	adds	r2, r7, #6
   1292c:	7812      	ldrb	r2, [r2, #0]
   1292e:	08d2      	lsrs	r2, r2, #3
   12930:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12932:	1dbb      	adds	r3, r7, #6
   12934:	781a      	ldrb	r2, [r3, #0]
   12936:	230e      	movs	r3, #14
   12938:	18fb      	adds	r3, r7, r3
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	00db      	lsls	r3, r3, #3
   1293e:	1ad3      	subs	r3, r2, r3
   12940:	2201      	movs	r2, #1
   12942:	409a      	lsls	r2, r3
   12944:	230d      	movs	r3, #13
   12946:	18fb      	adds	r3, r7, r3
   12948:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   1294a:	230f      	movs	r3, #15
   1294c:	18fc      	adds	r4, r7, r3
   1294e:	1dfb      	adds	r3, r7, #7
   12950:	781a      	ldrb	r2, [r3, #0]
   12952:	230e      	movs	r3, #14
   12954:	18fb      	adds	r3, r7, r3
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	0011      	movs	r1, r2
   1295a:	0018      	movs	r0, r3
   1295c:	4b21      	ldr	r3, [pc, #132]	; (129e4 <gfx_mono_ssd1306_draw_pixel+0xec>)
   1295e:	4798      	blx	r3
   12960:	0003      	movs	r3, r0
   12962:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12964:	1d7b      	adds	r3, r7, #5
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	2b01      	cmp	r3, #1
   1296a:	d004      	beq.n	12976 <gfx_mono_ssd1306_draw_pixel+0x7e>
   1296c:	2b02      	cmp	r3, #2
   1296e:	d01d      	beq.n	129ac <gfx_mono_ssd1306_draw_pixel+0xb4>
   12970:	2b00      	cmp	r3, #0
   12972:	d00b      	beq.n	1298c <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12974:	e025      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12976:	230f      	movs	r3, #15
   12978:	18fb      	adds	r3, r7, r3
   1297a:	220f      	movs	r2, #15
   1297c:	18b9      	adds	r1, r7, r2
   1297e:	220d      	movs	r2, #13
   12980:	18ba      	adds	r2, r7, r2
   12982:	7809      	ldrb	r1, [r1, #0]
   12984:	7812      	ldrb	r2, [r2, #0]
   12986:	430a      	orrs	r2, r1
   12988:	701a      	strb	r2, [r3, #0]
		break;
   1298a:	e01a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   1298c:	230d      	movs	r3, #13
   1298e:	18fb      	adds	r3, r7, r3
   12990:	781b      	ldrb	r3, [r3, #0]
   12992:	b25b      	sxtb	r3, r3
   12994:	43db      	mvns	r3, r3
   12996:	b25b      	sxtb	r3, r3
   12998:	220f      	movs	r2, #15
   1299a:	18ba      	adds	r2, r7, r2
   1299c:	7812      	ldrb	r2, [r2, #0]
   1299e:	b252      	sxtb	r2, r2
   129a0:	4013      	ands	r3, r2
   129a2:	b25a      	sxtb	r2, r3
   129a4:	230f      	movs	r3, #15
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	701a      	strb	r2, [r3, #0]
		break;
   129aa:	e00a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	220f      	movs	r2, #15
   129b2:	18b9      	adds	r1, r7, r2
   129b4:	220d      	movs	r2, #13
   129b6:	18ba      	adds	r2, r7, r2
   129b8:	7809      	ldrb	r1, [r1, #0]
   129ba:	7812      	ldrb	r2, [r2, #0]
   129bc:	404a      	eors	r2, r1
   129be:	701a      	strb	r2, [r3, #0]
		break;
   129c0:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   129c2:	230f      	movs	r3, #15
   129c4:	18fb      	adds	r3, r7, r3
   129c6:	781a      	ldrb	r2, [r3, #0]
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	7819      	ldrb	r1, [r3, #0]
   129cc:	230e      	movs	r3, #14
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	7818      	ldrb	r0, [r3, #0]
   129d2:	2300      	movs	r3, #0
   129d4:	4c04      	ldr	r4, [pc, #16]	; (129e8 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   129d6:	47a0      	blx	r4
   129d8:	e000      	b.n	129dc <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   129da:	46c0      	nop			; (mov r8, r8)
}
   129dc:	46bd      	mov	sp, r7
   129de:	b005      	add	sp, #20
   129e0:	bd90      	pop	{r4, r7, pc}
   129e2:	46c0      	nop			; (mov r8, r8)
   129e4:	00012a8d 	.word	0x00012a8d
   129e8:	000129ed 	.word	0x000129ed

000129ec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   129ec:	b5b0      	push	{r4, r5, r7, lr}
   129ee:	b082      	sub	sp, #8
   129f0:	af00      	add	r7, sp, #0
   129f2:	0005      	movs	r5, r0
   129f4:	000c      	movs	r4, r1
   129f6:	0010      	movs	r0, r2
   129f8:	0019      	movs	r1, r3
   129fa:	1dfb      	adds	r3, r7, #7
   129fc:	1c2a      	adds	r2, r5, #0
   129fe:	701a      	strb	r2, [r3, #0]
   12a00:	1dbb      	adds	r3, r7, #6
   12a02:	1c22      	adds	r2, r4, #0
   12a04:	701a      	strb	r2, [r3, #0]
   12a06:	1d7b      	adds	r3, r7, #5
   12a08:	1c02      	adds	r2, r0, #0
   12a0a:	701a      	strb	r2, [r3, #0]
   12a0c:	1d3b      	adds	r3, r7, #4
   12a0e:	1c0a      	adds	r2, r1, #0
   12a10:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12a12:	1d3b      	adds	r3, r7, #4
   12a14:	781b      	ldrb	r3, [r3, #0]
   12a16:	2201      	movs	r2, #1
   12a18:	4053      	eors	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d00d      	beq.n	12a3c <gfx_mono_ssd1306_put_byte+0x50>
   12a20:	1dbb      	adds	r3, r7, #6
   12a22:	781a      	ldrb	r2, [r3, #0]
   12a24:	1dfb      	adds	r3, r7, #7
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	0011      	movs	r1, r2
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b12      	ldr	r3, [pc, #72]	; (12a78 <gfx_mono_ssd1306_put_byte+0x8c>)
   12a2e:	4798      	blx	r3
   12a30:	0003      	movs	r3, r0
   12a32:	001a      	movs	r2, r3
   12a34:	1d7b      	adds	r3, r7, #5
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	4293      	cmp	r3, r2
   12a3a:	d018      	beq.n	12a6e <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12a3c:	1d7b      	adds	r3, r7, #5
   12a3e:	781a      	ldrb	r2, [r3, #0]
   12a40:	1dbb      	adds	r3, r7, #6
   12a42:	7819      	ldrb	r1, [r3, #0]
   12a44:	1dfb      	adds	r3, r7, #7
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	0018      	movs	r0, r3
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <gfx_mono_ssd1306_put_byte+0x90>)
   12a4c:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12a4e:	1dfb      	adds	r3, r7, #7
   12a50:	781b      	ldrb	r3, [r3, #0]
   12a52:	0018      	movs	r0, r3
   12a54:	4b0a      	ldr	r3, [pc, #40]	; (12a80 <gfx_mono_ssd1306_put_byte+0x94>)
   12a56:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12a58:	1dbb      	adds	r3, r7, #6
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	0018      	movs	r0, r3
   12a5e:	4b09      	ldr	r3, [pc, #36]	; (12a84 <gfx_mono_ssd1306_put_byte+0x98>)
   12a60:	4798      	blx	r3

	ssd1306_write_data(data);
   12a62:	1d7b      	adds	r3, r7, #5
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	0018      	movs	r0, r3
   12a68:	4b07      	ldr	r3, [pc, #28]	; (12a88 <gfx_mono_ssd1306_put_byte+0x9c>)
   12a6a:	4798      	blx	r3
   12a6c:	e000      	b.n	12a70 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12a6e:	46c0      	nop			; (mov r8, r8)
}
   12a70:	46bd      	mov	sp, r7
   12a72:	b002      	add	sp, #8
   12a74:	bdb0      	pop	{r4, r5, r7, pc}
   12a76:	46c0      	nop			; (mov r8, r8)
   12a78:	000122e1 	.word	0x000122e1
   12a7c:	0001229d 	.word	0x0001229d
   12a80:	000127c5 	.word	0x000127c5
   12a84:	000127fd 	.word	0x000127fd
   12a88:	00012229 	.word	0x00012229

00012a8c <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b082      	sub	sp, #8
   12a90:	af00      	add	r7, sp, #0
   12a92:	0002      	movs	r2, r0
   12a94:	1dfb      	adds	r3, r7, #7
   12a96:	701a      	strb	r2, [r3, #0]
   12a98:	1dbb      	adds	r3, r7, #6
   12a9a:	1c0a      	adds	r2, r1, #0
   12a9c:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12a9e:	1dbb      	adds	r3, r7, #6
   12aa0:	781a      	ldrb	r2, [r3, #0]
   12aa2:	1dfb      	adds	r3, r7, #7
   12aa4:	781b      	ldrb	r3, [r3, #0]
   12aa6:	0011      	movs	r1, r2
   12aa8:	0018      	movs	r0, r3
   12aaa:	4b03      	ldr	r3, [pc, #12]	; (12ab8 <gfx_mono_ssd1306_get_byte+0x2c>)
   12aac:	4798      	blx	r3
   12aae:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12ab0:	0018      	movs	r0, r3
   12ab2:	46bd      	mov	sp, r7
   12ab4:	b002      	add	sp, #8
   12ab6:	bd80      	pop	{r7, pc}
   12ab8:	000122e1 	.word	0x000122e1

00012abc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12abc:	b580      	push	{r7, lr}
   12abe:	b084      	sub	sp, #16
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	681b      	ldr	r3, [r3, #0]
   12ac8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12aca:	68fb      	ldr	r3, [r7, #12]
   12acc:	7e5b      	ldrb	r3, [r3, #25]
   12ace:	b2db      	uxtb	r3, r3
   12ad0:	b25b      	sxtb	r3, r3
   12ad2:	2b00      	cmp	r3, #0
   12ad4:	da01      	bge.n	12ada <adc_is_syncing+0x1e>
		return true;
   12ad6:	2301      	movs	r3, #1
   12ad8:	e000      	b.n	12adc <adc_is_syncing+0x20>
	}

	return false;
   12ada:	2300      	movs	r3, #0
}
   12adc:	0018      	movs	r0, r3
   12ade:	46bd      	mov	sp, r7
   12ae0:	b004      	add	sp, #16
   12ae2:	bd80      	pop	{r7, pc}

00012ae4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12ae4:	b580      	push	{r7, lr}
   12ae6:	b084      	sub	sp, #16
   12ae8:	af00      	add	r7, sp, #0
   12aea:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12af2:	46c0      	nop			; (mov r8, r8)
   12af4:	687b      	ldr	r3, [r7, #4]
   12af6:	0018      	movs	r0, r3
   12af8:	4b0b      	ldr	r3, [pc, #44]	; (12b28 <adc_start_conversion+0x44>)
   12afa:	4798      	blx	r3
   12afc:	1e03      	subs	r3, r0, #0
   12afe:	d1f9      	bne.n	12af4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7b1b      	ldrb	r3, [r3, #12]
   12b04:	b2db      	uxtb	r3, r3
   12b06:	2202      	movs	r2, #2
   12b08:	4313      	orrs	r3, r2
   12b0a:	b2da      	uxtb	r2, r3
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12b10:	46c0      	nop			; (mov r8, r8)
   12b12:	687b      	ldr	r3, [r7, #4]
   12b14:	0018      	movs	r0, r3
   12b16:	4b04      	ldr	r3, [pc, #16]	; (12b28 <adc_start_conversion+0x44>)
   12b18:	4798      	blx	r3
   12b1a:	1e03      	subs	r3, r0, #0
   12b1c:	d1f9      	bne.n	12b12 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	46bd      	mov	sp, r7
   12b22:	b004      	add	sp, #16
   12b24:	bd80      	pop	{r7, pc}
   12b26:	46c0      	nop			; (mov r8, r8)
   12b28:	00012abd 	.word	0x00012abd

00012b2c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b084      	sub	sp, #16
   12b30:	af00      	add	r7, sp, #0
   12b32:	6078      	str	r0, [r7, #4]
   12b34:	000a      	movs	r2, r1
   12b36:	1cfb      	adds	r3, r7, #3
   12b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	681b      	ldr	r3, [r3, #0]
   12b3e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12b40:	68fb      	ldr	r3, [r7, #12]
   12b42:	1cfa      	adds	r2, r7, #3
   12b44:	7812      	ldrb	r2, [r2, #0]
   12b46:	759a      	strb	r2, [r3, #22]
}
   12b48:	46c0      	nop			; (mov r8, r8)
   12b4a:	46bd      	mov	sp, r7
   12b4c:	b004      	add	sp, #16
   12b4e:	bd80      	pop	{r7, pc}

00012b50 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12b50:	b580      	push	{r7, lr}
   12b52:	b084      	sub	sp, #16
   12b54:	af00      	add	r7, sp, #0
   12b56:	0002      	movs	r2, r0
   12b58:	1dfb      	adds	r3, r7, #7
   12b5a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12b5c:	1dfb      	adds	r3, r7, #7
   12b5e:	781a      	ldrb	r2, [r3, #0]
   12b60:	4b47      	ldr	r3, [pc, #284]	; (12c80 <_adc_interrupt_handler+0x130>)
   12b62:	0092      	lsls	r2, r2, #2
   12b64:	58d3      	ldr	r3, [r2, r3]
   12b66:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12b68:	68fb      	ldr	r3, [r7, #12]
   12b6a:	681b      	ldr	r3, [r3, #0]
   12b6c:	7e1b      	ldrb	r3, [r3, #24]
   12b6e:	b2da      	uxtb	r2, r3
   12b70:	68fb      	ldr	r3, [r7, #12]
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	7ddb      	ldrb	r3, [r3, #23]
   12b76:	b2db      	uxtb	r3, r3
   12b78:	4013      	ands	r3, r2
   12b7a:	b2db      	uxtb	r3, r3
   12b7c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12b7e:	68bb      	ldr	r3, [r7, #8]
   12b80:	2201      	movs	r2, #1
   12b82:	4013      	ands	r3, r2
   12b84:	d045      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12b86:	68fb      	ldr	r3, [r7, #12]
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	2201      	movs	r2, #1
   12b8c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12b8e:	46c0      	nop			; (mov r8, r8)
   12b90:	68fb      	ldr	r3, [r7, #12]
   12b92:	0018      	movs	r0, r3
   12b94:	4b3b      	ldr	r3, [pc, #236]	; (12c84 <_adc_interrupt_handler+0x134>)
   12b96:	4798      	blx	r3
   12b98:	1e03      	subs	r3, r0, #0
   12b9a:	d1f9      	bne.n	12b90 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12b9c:	68fb      	ldr	r3, [r7, #12]
   12b9e:	695b      	ldr	r3, [r3, #20]
   12ba0:	1c99      	adds	r1, r3, #2
   12ba2:	68fa      	ldr	r2, [r7, #12]
   12ba4:	6151      	str	r1, [r2, #20]
   12ba6:	68fa      	ldr	r2, [r7, #12]
   12ba8:	6812      	ldr	r2, [r2, #0]
   12baa:	8b52      	ldrh	r2, [r2, #26]
   12bac:	b292      	uxth	r2, r2
   12bae:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12bb0:	68fb      	ldr	r3, [r7, #12]
   12bb2:	8b1b      	ldrh	r3, [r3, #24]
   12bb4:	b29b      	uxth	r3, r3
   12bb6:	3b01      	subs	r3, #1
   12bb8:	b29b      	uxth	r3, r3
   12bba:	68fa      	ldr	r2, [r7, #12]
   12bbc:	1c19      	adds	r1, r3, #0
   12bbe:	8311      	strh	r1, [r2, #24]
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d008      	beq.n	12bd6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12bc4:	68fb      	ldr	r3, [r7, #12]
   12bc6:	7f5b      	ldrb	r3, [r3, #29]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d022      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12bcc:	68fb      	ldr	r3, [r7, #12]
   12bce:	0018      	movs	r0, r3
   12bd0:	4b2d      	ldr	r3, [pc, #180]	; (12c88 <_adc_interrupt_handler+0x138>)
   12bd2:	4798      	blx	r3
   12bd4:	e01d      	b.n	12c12 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12bd6:	68fb      	ldr	r3, [r7, #12]
   12bd8:	2101      	movs	r1, #1
   12bda:	0018      	movs	r0, r3
   12bdc:	4b2b      	ldr	r3, [pc, #172]	; (12c8c <_adc_interrupt_handler+0x13c>)
   12bde:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	7f1b      	ldrb	r3, [r3, #28]
   12be4:	b2db      	uxtb	r3, r3
   12be6:	2b05      	cmp	r3, #5
   12be8:	d113      	bne.n	12c12 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12bea:	68fb      	ldr	r3, [r7, #12]
   12bec:	2200      	movs	r2, #0
   12bee:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12bf0:	68fb      	ldr	r3, [r7, #12]
   12bf2:	7edb      	ldrb	r3, [r3, #27]
   12bf4:	001a      	movs	r2, r3
   12bf6:	2301      	movs	r3, #1
   12bf8:	4013      	ands	r3, r2
   12bfa:	d00a      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12bfc:	68fb      	ldr	r3, [r7, #12]
   12bfe:	7e9b      	ldrb	r3, [r3, #26]
   12c00:	001a      	movs	r2, r3
   12c02:	2301      	movs	r3, #1
   12c04:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12c06:	d004      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	689b      	ldr	r3, [r3, #8]
   12c0c:	68fa      	ldr	r2, [r7, #12]
   12c0e:	0010      	movs	r0, r2
   12c10:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12c12:	68bb      	ldr	r3, [r7, #8]
   12c14:	2204      	movs	r2, #4
   12c16:	4013      	ands	r3, r2
   12c18:	d014      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12c1a:	68fb      	ldr	r3, [r7, #12]
   12c1c:	681b      	ldr	r3, [r3, #0]
   12c1e:	2204      	movs	r2, #4
   12c20:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c22:	68fb      	ldr	r3, [r7, #12]
   12c24:	7edb      	ldrb	r3, [r3, #27]
   12c26:	001a      	movs	r2, r3
   12c28:	2302      	movs	r3, #2
   12c2a:	4013      	ands	r3, r2
   12c2c:	d00a      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12c2e:	68fb      	ldr	r3, [r7, #12]
   12c30:	7e9b      	ldrb	r3, [r3, #26]
   12c32:	001a      	movs	r2, r3
   12c34:	2302      	movs	r3, #2
   12c36:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c38:	d004      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12c3a:	68fb      	ldr	r3, [r7, #12]
   12c3c:	68db      	ldr	r3, [r3, #12]
   12c3e:	68fa      	ldr	r2, [r7, #12]
   12c40:	0010      	movs	r0, r2
   12c42:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12c44:	68bb      	ldr	r3, [r7, #8]
   12c46:	2202      	movs	r2, #2
   12c48:	4013      	ands	r3, r2
   12c4a:	d014      	beq.n	12c76 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	681b      	ldr	r3, [r3, #0]
   12c50:	2202      	movs	r2, #2
   12c52:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	7edb      	ldrb	r3, [r3, #27]
   12c58:	001a      	movs	r2, r3
   12c5a:	2304      	movs	r3, #4
   12c5c:	4013      	ands	r3, r2
   12c5e:	d00a      	beq.n	12c76 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12c60:	68fb      	ldr	r3, [r7, #12]
   12c62:	7e9b      	ldrb	r3, [r3, #26]
   12c64:	001a      	movs	r2, r3
   12c66:	2304      	movs	r3, #4
   12c68:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c6a:	d004      	beq.n	12c76 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12c6c:	68fb      	ldr	r3, [r7, #12]
   12c6e:	691b      	ldr	r3, [r3, #16]
   12c70:	68fa      	ldr	r2, [r7, #12]
   12c72:	0010      	movs	r0, r2
   12c74:	4798      	blx	r3
		}
	}
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	b004      	add	sp, #16
   12c7c:	bd80      	pop	{r7, pc}
   12c7e:	46c0      	nop			; (mov r8, r8)
   12c80:	20004780 	.word	0x20004780
   12c84:	00012abd 	.word	0x00012abd
   12c88:	00012ae5 	.word	0x00012ae5
   12c8c:	00012b2d 	.word	0x00012b2d

00012c90 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12c90:	b580      	push	{r7, lr}
   12c92:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12c94:	2000      	movs	r0, #0
   12c96:	4b02      	ldr	r3, [pc, #8]	; (12ca0 <ADC_Handler+0x10>)
   12c98:	4798      	blx	r3
}
   12c9a:	46c0      	nop			; (mov r8, r8)
   12c9c:	46bd      	mov	sp, r7
   12c9e:	bd80      	pop	{r7, pc}
   12ca0:	00012b51 	.word	0x00012b51

00012ca4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12ca4:	b580      	push	{r7, lr}
   12ca6:	b082      	sub	sp, #8
   12ca8:	af00      	add	r7, sp, #0
   12caa:	0002      	movs	r2, r0
   12cac:	1dfb      	adds	r3, r7, #7
   12cae:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12cb0:	4a07      	ldr	r2, [pc, #28]	; (12cd0 <system_interrupt_disable+0x2c>)
   12cb2:	1dfb      	adds	r3, r7, #7
   12cb4:	781b      	ldrb	r3, [r3, #0]
   12cb6:	0019      	movs	r1, r3
   12cb8:	231f      	movs	r3, #31
   12cba:	400b      	ands	r3, r1
   12cbc:	2101      	movs	r1, #1
   12cbe:	4099      	lsls	r1, r3
   12cc0:	000b      	movs	r3, r1
   12cc2:	0019      	movs	r1, r3
   12cc4:	2380      	movs	r3, #128	; 0x80
   12cc6:	50d1      	str	r1, [r2, r3]
}
   12cc8:	46c0      	nop			; (mov r8, r8)
   12cca:	46bd      	mov	sp, r7
   12ccc:	b002      	add	sp, #8
   12cce:	bd80      	pop	{r7, pc}
   12cd0:	e000e100 	.word	0xe000e100

00012cd4 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12cd4:	b580      	push	{r7, lr}
   12cd6:	b084      	sub	sp, #16
   12cd8:	af00      	add	r7, sp, #0
   12cda:	0002      	movs	r2, r0
   12cdc:	1dfb      	adds	r3, r7, #7
   12cde:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12ce0:	1dfb      	adds	r3, r7, #7
   12ce2:	781a      	ldrb	r2, [r3, #0]
   12ce4:	4b37      	ldr	r3, [pc, #220]	; (12dc4 <_dac_interrupt_handler+0xf0>)
   12ce6:	0092      	lsls	r2, r2, #2
   12ce8:	58d3      	ldr	r3, [r2, r3]
   12cea:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12cec:	68fb      	ldr	r3, [r7, #12]
   12cee:	681b      	ldr	r3, [r3, #0]
   12cf0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12cf2:	68bb      	ldr	r3, [r7, #8]
   12cf4:	799b      	ldrb	r3, [r3, #6]
   12cf6:	b2db      	uxtb	r3, r3
   12cf8:	001a      	movs	r2, r3
   12cfa:	2301      	movs	r3, #1
   12cfc:	4013      	ands	r3, r2
   12cfe:	d00e      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12d00:	68bb      	ldr	r3, [r7, #8]
   12d02:	2201      	movs	r2, #1
   12d04:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12d06:	68fb      	ldr	r3, [r7, #12]
   12d08:	3314      	adds	r3, #20
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d007      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12d0e:	68fb      	ldr	r3, [r7, #12]
   12d10:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12d12:	2b00      	cmp	r3, #0
   12d14:	d003      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12d16:	68fb      	ldr	r3, [r7, #12]
   12d18:	699b      	ldr	r3, [r3, #24]
   12d1a:	2000      	movs	r0, #0
   12d1c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12d1e:	68bb      	ldr	r3, [r7, #8]
   12d20:	799b      	ldrb	r3, [r3, #6]
   12d22:	b2db      	uxtb	r3, r3
   12d24:	001a      	movs	r2, r3
   12d26:	2302      	movs	r3, #2
   12d28:	4013      	ands	r3, r2
   12d2a:	d047      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d2c:	68bb      	ldr	r3, [r7, #8]
   12d2e:	2202      	movs	r2, #2
   12d30:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12d32:	68fb      	ldr	r3, [r7, #12]
   12d34:	899b      	ldrh	r3, [r3, #12]
   12d36:	b29b      	uxth	r3, r3
   12d38:	2b00      	cmp	r3, #0
   12d3a:	d033      	beq.n	12da4 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12d3c:	68fb      	ldr	r3, [r7, #12]
   12d3e:	689a      	ldr	r2, [r3, #8]
   12d40:	68fb      	ldr	r3, [r7, #12]
   12d42:	89db      	ldrh	r3, [r3, #14]
   12d44:	b29b      	uxth	r3, r3
   12d46:	1c59      	adds	r1, r3, #1
   12d48:	b288      	uxth	r0, r1
   12d4a:	68f9      	ldr	r1, [r7, #12]
   12d4c:	81c8      	strh	r0, [r1, #14]
   12d4e:	005b      	lsls	r3, r3, #1
   12d50:	18d3      	adds	r3, r2, r3
   12d52:	881b      	ldrh	r3, [r3, #0]
   12d54:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12d56:	68bb      	ldr	r3, [r7, #8]
   12d58:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12d5a:	68fb      	ldr	r3, [r7, #12]
   12d5c:	899b      	ldrh	r3, [r3, #12]
   12d5e:	b29b      	uxth	r3, r3
   12d60:	3b01      	subs	r3, #1
   12d62:	b29a      	uxth	r2, r3
   12d64:	68fb      	ldr	r3, [r7, #12]
   12d66:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12d68:	68fb      	ldr	r3, [r7, #12]
   12d6a:	899b      	ldrh	r3, [r3, #12]
   12d6c:	b29b      	uxth	r3, r3
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d118      	bne.n	12da4 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12d72:	68fb      	ldr	r3, [r7, #12]
   12d74:	2220      	movs	r2, #32
   12d76:	2100      	movs	r1, #0
   12d78:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12d7a:	68bb      	ldr	r3, [r7, #8]
   12d7c:	2202      	movs	r2, #2
   12d7e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d80:	68bb      	ldr	r3, [r7, #8]
   12d82:	2202      	movs	r2, #2
   12d84:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12d86:	2019      	movs	r0, #25
   12d88:	4b0f      	ldr	r3, [pc, #60]	; (12dc8 <_dac_interrupt_handler+0xf4>)
   12d8a:	4798      	blx	r3

				if ((module->callback) &&
   12d8c:	68fb      	ldr	r3, [r7, #12]
   12d8e:	3314      	adds	r3, #20
   12d90:	2b00      	cmp	r3, #0
   12d92:	d007      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12d94:	68fb      	ldr	r3, [r7, #12]
   12d96:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12d98:	2b00      	cmp	r3, #0
   12d9a:	d003      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12d9c:	68fb      	ldr	r3, [r7, #12]
   12d9e:	69db      	ldr	r3, [r3, #28]
   12da0:	2000      	movs	r0, #0
   12da2:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12da4:	68fb      	ldr	r3, [r7, #12]
   12da6:	3314      	adds	r3, #20
   12da8:	2b00      	cmp	r3, #0
   12daa:	d007      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12dac:	68fb      	ldr	r3, [r7, #12]
   12dae:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12db0:	2b00      	cmp	r3, #0
   12db2:	d003      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12db4:	68fb      	ldr	r3, [r7, #12]
   12db6:	695b      	ldr	r3, [r3, #20]
   12db8:	2000      	movs	r0, #0
   12dba:	4798      	blx	r3
		}
	}
}
   12dbc:	46c0      	nop			; (mov r8, r8)
   12dbe:	46bd      	mov	sp, r7
   12dc0:	b004      	add	sp, #16
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	20004784 	.word	0x20004784
   12dc8:	00012ca5 	.word	0x00012ca5

00012dcc <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12dcc:	b580      	push	{r7, lr}
   12dce:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12dd0:	2000      	movs	r0, #0
   12dd2:	4b02      	ldr	r3, [pc, #8]	; (12ddc <DAC_Handler+0x10>)
   12dd4:	4798      	blx	r3
}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	46bd      	mov	sp, r7
   12dda:	bd80      	pop	{r7, pc}
   12ddc:	00012cd5 	.word	0x00012cd5

00012de0 <system_interrupt_enter_critical_section>:
{
   12de0:	b580      	push	{r7, lr}
   12de2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12de4:	4b02      	ldr	r3, [pc, #8]	; (12df0 <system_interrupt_enter_critical_section+0x10>)
   12de6:	4798      	blx	r3
}
   12de8:	46c0      	nop			; (mov r8, r8)
   12dea:	46bd      	mov	sp, r7
   12dec:	bd80      	pop	{r7, pc}
   12dee:	46c0      	nop			; (mov r8, r8)
   12df0:	00026cd9 	.word	0x00026cd9

00012df4 <system_interrupt_leave_critical_section>:
{
   12df4:	b580      	push	{r7, lr}
   12df6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12df8:	4b02      	ldr	r3, [pc, #8]	; (12e04 <system_interrupt_leave_critical_section+0x10>)
   12dfa:	4798      	blx	r3
}
   12dfc:	46c0      	nop			; (mov r8, r8)
   12dfe:	46bd      	mov	sp, r7
   12e00:	bd80      	pop	{r7, pc}
   12e02:	46c0      	nop			; (mov r8, r8)
   12e04:	00026d2d 	.word	0x00026d2d

00012e08 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12e08:	b580      	push	{r7, lr}
   12e0a:	b086      	sub	sp, #24
   12e0c:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12e0e:	4b49      	ldr	r3, [pc, #292]	; (12f34 <DMAC_Handler+0x12c>)
   12e10:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12e12:	4b49      	ldr	r3, [pc, #292]	; (12f38 <DMAC_Handler+0x130>)
   12e14:	8c1b      	ldrh	r3, [r3, #32]
   12e16:	b29b      	uxth	r3, r3
   12e18:	b2da      	uxtb	r2, r3
   12e1a:	2317      	movs	r3, #23
   12e1c:	18fb      	adds	r3, r7, r3
   12e1e:	210f      	movs	r1, #15
   12e20:	400a      	ands	r2, r1
   12e22:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12e24:	2317      	movs	r3, #23
   12e26:	18fb      	adds	r3, r7, r3
   12e28:	781a      	ldrb	r2, [r3, #0]
   12e2a:	4b44      	ldr	r3, [pc, #272]	; (12f3c <DMAC_Handler+0x134>)
   12e2c:	0092      	lsls	r2, r2, #2
   12e2e:	58d3      	ldr	r3, [r2, r3]
   12e30:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12e32:	4a41      	ldr	r2, [pc, #260]	; (12f38 <DMAC_Handler+0x130>)
   12e34:	693b      	ldr	r3, [r7, #16]
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	210f      	movs	r1, #15
   12e3a:	400b      	ands	r3, r1
   12e3c:	b2d9      	uxtb	r1, r3
   12e3e:	233f      	movs	r3, #63	; 0x3f
   12e40:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12e42:	493d      	ldr	r1, [pc, #244]	; (12f38 <DMAC_Handler+0x130>)
   12e44:	230f      	movs	r3, #15
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	224e      	movs	r2, #78	; 0x4e
   12e4a:	5c8a      	ldrb	r2, [r1, r2]
   12e4c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12e4e:	693b      	ldr	r3, [r7, #16]
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	4a3b      	ldr	r2, [pc, #236]	; (12f40 <DMAC_Handler+0x138>)
   12e54:	011b      	lsls	r3, r3, #4
   12e56:	18d3      	adds	r3, r2, r3
   12e58:	3302      	adds	r3, #2
   12e5a:	881b      	ldrh	r3, [r3, #0]
   12e5c:	b29b      	uxth	r3, r3
   12e5e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12e60:	693b      	ldr	r3, [r7, #16]
   12e62:	781b      	ldrb	r3, [r3, #0]
   12e64:	4a37      	ldr	r2, [pc, #220]	; (12f44 <DMAC_Handler+0x13c>)
   12e66:	011b      	lsls	r3, r3, #4
   12e68:	18d3      	adds	r3, r2, r3
   12e6a:	3302      	adds	r3, #2
   12e6c:	881b      	ldrh	r3, [r3, #0]
   12e6e:	b29b      	uxth	r3, r3
   12e70:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12e72:	68ba      	ldr	r2, [r7, #8]
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	1ad2      	subs	r2, r2, r3
   12e78:	693b      	ldr	r3, [r7, #16]
   12e7a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12e7c:	230f      	movs	r3, #15
   12e7e:	18fb      	adds	r3, r7, r3
   12e80:	781b      	ldrb	r3, [r3, #0]
   12e82:	2201      	movs	r2, #1
   12e84:	4013      	ands	r3, r2
   12e86:	d016      	beq.n	12eb6 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12e88:	4a2b      	ldr	r2, [pc, #172]	; (12f38 <DMAC_Handler+0x130>)
   12e8a:	234e      	movs	r3, #78	; 0x4e
   12e8c:	2101      	movs	r1, #1
   12e8e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12e90:	693b      	ldr	r3, [r7, #16]
   12e92:	2210      	movs	r2, #16
   12e94:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12e96:	693b      	ldr	r3, [r7, #16]
   12e98:	7c1b      	ldrb	r3, [r3, #16]
   12e9a:	001a      	movs	r2, r3
   12e9c:	2301      	movs	r3, #1
   12e9e:	4013      	ands	r3, r2
   12ea0:	d042      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12ea2:	693b      	ldr	r3, [r7, #16]
   12ea4:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d03e      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12eaa:	693b      	ldr	r3, [r7, #16]
   12eac:	685b      	ldr	r3, [r3, #4]
   12eae:	693a      	ldr	r2, [r7, #16]
   12eb0:	0010      	movs	r0, r2
   12eb2:	4798      	blx	r3
   12eb4:	e038      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12eb6:	230f      	movs	r3, #15
   12eb8:	18fb      	adds	r3, r7, r3
   12eba:	781b      	ldrb	r3, [r3, #0]
   12ebc:	2202      	movs	r2, #2
   12ebe:	4013      	ands	r3, r2
   12ec0:	d016      	beq.n	12ef0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12ec2:	4a1d      	ldr	r2, [pc, #116]	; (12f38 <DMAC_Handler+0x130>)
   12ec4:	234e      	movs	r3, #78	; 0x4e
   12ec6:	2102      	movs	r1, #2
   12ec8:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12eca:	693b      	ldr	r3, [r7, #16]
   12ecc:	2200      	movs	r2, #0
   12ece:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ed0:	693b      	ldr	r3, [r7, #16]
   12ed2:	7c1b      	ldrb	r3, [r3, #16]
   12ed4:	001a      	movs	r2, r3
   12ed6:	2302      	movs	r3, #2
   12ed8:	4013      	ands	r3, r2
   12eda:	d025      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12edc:	693b      	ldr	r3, [r7, #16]
   12ede:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d021      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12ee4:	693b      	ldr	r3, [r7, #16]
   12ee6:	689b      	ldr	r3, [r3, #8]
   12ee8:	693a      	ldr	r2, [r7, #16]
   12eea:	0010      	movs	r0, r2
   12eec:	4798      	blx	r3
   12eee:	e01b      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2204      	movs	r2, #4
   12ef8:	4013      	ands	r3, r2
   12efa:	d015      	beq.n	12f28 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12efc:	4a0e      	ldr	r2, [pc, #56]	; (12f38 <DMAC_Handler+0x130>)
   12efe:	234e      	movs	r3, #78	; 0x4e
   12f00:	2104      	movs	r1, #4
   12f02:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12f04:	693b      	ldr	r3, [r7, #16]
   12f06:	2206      	movs	r2, #6
   12f08:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f0a:	693b      	ldr	r3, [r7, #16]
   12f0c:	7c1b      	ldrb	r3, [r3, #16]
   12f0e:	001a      	movs	r2, r3
   12f10:	2304      	movs	r3, #4
   12f12:	4013      	ands	r3, r2
   12f14:	d008      	beq.n	12f28 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12f16:	693b      	ldr	r3, [r7, #16]
   12f18:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d004      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12f1e:	693b      	ldr	r3, [r7, #16]
   12f20:	68db      	ldr	r3, [r3, #12]
   12f22:	693a      	ldr	r2, [r7, #16]
   12f24:	0010      	movs	r0, r2
   12f26:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12f28:	4b07      	ldr	r3, [pc, #28]	; (12f48 <DMAC_Handler+0x140>)
   12f2a:	4798      	blx	r3
}
   12f2c:	46c0      	nop			; (mov r8, r8)
   12f2e:	46bd      	mov	sp, r7
   12f30:	b006      	add	sp, #24
   12f32:	bd80      	pop	{r7, pc}
   12f34:	00012de1 	.word	0x00012de1
   12f38:	41004800 	.word	0x41004800
   12f3c:	200004f0 	.word	0x200004f0
   12f40:	20004790 	.word	0x20004790
   12f44:	200004a0 	.word	0x200004a0
   12f48:	00012df5 	.word	0x00012df5

00012f4c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12f4c:	b580      	push	{r7, lr}
   12f4e:	b082      	sub	sp, #8
   12f50:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12f52:	4b15      	ldr	r3, [pc, #84]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f54:	691b      	ldr	r3, [r3, #16]
   12f56:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12f58:	4b14      	ldr	r3, [pc, #80]	; (12fac <EVSYS_Handler+0x60>)
   12f5a:	699b      	ldr	r3, [r3, #24]
   12f5c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12f5e:	4b12      	ldr	r3, [pc, #72]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f60:	689a      	ldr	r2, [r3, #8]
   12f62:	683b      	ldr	r3, [r7, #0]
   12f64:	431a      	orrs	r2, r3
   12f66:	4b10      	ldr	r3, [pc, #64]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f68:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12f6a:	4b10      	ldr	r3, [pc, #64]	; (12fac <EVSYS_Handler+0x60>)
   12f6c:	4a10      	ldr	r2, [pc, #64]	; (12fb0 <EVSYS_Handler+0x64>)
   12f6e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12f70:	e008      	b.n	12f84 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12f72:	687b      	ldr	r3, [r7, #4]
   12f74:	685a      	ldr	r2, [r3, #4]
   12f76:	687b      	ldr	r3, [r7, #4]
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	0018      	movs	r0, r3
   12f7c:	4790      	blx	r2
		current_hook = current_hook->next;
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	689b      	ldr	r3, [r3, #8]
   12f82:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d1f3      	bne.n	12f72 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12f8a:	4b07      	ldr	r3, [pc, #28]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f8c:	68db      	ldr	r3, [r3, #12]
   12f8e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12f90:	4b05      	ldr	r3, [pc, #20]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f92:	689b      	ldr	r3, [r3, #8]
   12f94:	683a      	ldr	r2, [r7, #0]
   12f96:	43d2      	mvns	r2, r2
   12f98:	401a      	ands	r2, r3
   12f9a:	4b03      	ldr	r3, [pc, #12]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f9c:	609a      	str	r2, [r3, #8]
}
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	46bd      	mov	sp, r7
   12fa2:	b002      	add	sp, #8
   12fa4:	bd80      	pop	{r7, pc}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	2000000c 	.word	0x2000000c
   12fac:	42000400 	.word	0x42000400
   12fb0:	0f0fffff 	.word	0x0f0fffff

00012fb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12fb4:	b580      	push	{r7, lr}
   12fb6:	b082      	sub	sp, #8
   12fb8:	af00      	add	r7, sp, #0
   12fba:	0002      	movs	r2, r0
   12fbc:	6039      	str	r1, [r7, #0]
   12fbe:	1dfb      	adds	r3, r7, #7
   12fc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12fc2:	1dfb      	adds	r3, r7, #7
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	2b01      	cmp	r3, #1
   12fc8:	d00a      	beq.n	12fe0 <system_apb_clock_set_mask+0x2c>
   12fca:	2b02      	cmp	r3, #2
   12fcc:	d00f      	beq.n	12fee <system_apb_clock_set_mask+0x3a>
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d114      	bne.n	12ffc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12fd2:	4b0e      	ldr	r3, [pc, #56]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd4:	4a0d      	ldr	r2, [pc, #52]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd6:	6991      	ldr	r1, [r2, #24]
   12fd8:	683a      	ldr	r2, [r7, #0]
   12fda:	430a      	orrs	r2, r1
   12fdc:	619a      	str	r2, [r3, #24]
			break;
   12fde:	e00f      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12fe0:	4b0a      	ldr	r3, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe2:	4a0a      	ldr	r2, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe4:	69d1      	ldr	r1, [r2, #28]
   12fe6:	683a      	ldr	r2, [r7, #0]
   12fe8:	430a      	orrs	r2, r1
   12fea:	61da      	str	r2, [r3, #28]
			break;
   12fec:	e008      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12fee:	4b07      	ldr	r3, [pc, #28]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff0:	4a06      	ldr	r2, [pc, #24]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff2:	6a11      	ldr	r1, [r2, #32]
   12ff4:	683a      	ldr	r2, [r7, #0]
   12ff6:	430a      	orrs	r2, r1
   12ff8:	621a      	str	r2, [r3, #32]
			break;
   12ffa:	e001      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12ffc:	2317      	movs	r3, #23
   12ffe:	e000      	b.n	13002 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13000:	2300      	movs	r3, #0
}
   13002:	0018      	movs	r0, r3
   13004:	46bd      	mov	sp, r7
   13006:	b002      	add	sp, #8
   13008:	bd80      	pop	{r7, pc}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	40000400 	.word	0x40000400

00013010 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13010:	b580      	push	{r7, lr}
   13012:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   13014:	2102      	movs	r1, #2
   13016:	2002      	movs	r0, #2
   13018:	4b07      	ldr	r3, [pc, #28]	; (13038 <_system_events_init+0x28>)
   1301a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1301c:	4b07      	ldr	r3, [pc, #28]	; (1303c <_system_events_init+0x2c>)
   1301e:	2201      	movs	r2, #1
   13020:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   13022:	46c0      	nop			; (mov r8, r8)
   13024:	4b05      	ldr	r3, [pc, #20]	; (1303c <_system_events_init+0x2c>)
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	b2db      	uxtb	r3, r3
   1302a:	001a      	movs	r2, r3
   1302c:	2301      	movs	r3, #1
   1302e:	4013      	ands	r3, r2
   13030:	d1f8      	bne.n	13024 <_system_events_init+0x14>
	}
}
   13032:	46c0      	nop			; (mov r8, r8)
   13034:	46bd      	mov	sp, r7
   13036:	bd80      	pop	{r7, pc}
   13038:	00012fb5 	.word	0x00012fb5
   1303c:	42000400 	.word	0x42000400

00013040 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   13040:	b580      	push	{r7, lr}
   13042:	b084      	sub	sp, #16
   13044:	af00      	add	r7, sp, #0
   13046:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	681b      	ldr	r3, [r3, #0]
   1304c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1304e:	68fb      	ldr	r3, [r7, #12]
   13050:	69db      	ldr	r3, [r3, #28]
   13052:	2207      	movs	r2, #7
   13054:	4013      	ands	r3, r2
   13056:	1e5a      	subs	r2, r3, #1
   13058:	4193      	sbcs	r3, r2
   1305a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   1305c:	0018      	movs	r0, r3
   1305e:	46bd      	mov	sp, r7
   13060:	b004      	add	sp, #16
   13062:	bd80      	pop	{r7, pc}

00013064 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13064:	b580      	push	{r7, lr}
   13066:	b082      	sub	sp, #8
   13068:	af00      	add	r7, sp, #0
   1306a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	687b      	ldr	r3, [r7, #4]
   13070:	0018      	movs	r0, r3
   13072:	4b04      	ldr	r3, [pc, #16]	; (13084 <_i2c_master_wait_for_sync+0x20>)
   13074:	4798      	blx	r3
   13076:	1e03      	subs	r3, r0, #0
   13078:	d1f9      	bne.n	1306e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1307a:	46c0      	nop			; (mov r8, r8)
   1307c:	46bd      	mov	sp, r7
   1307e:	b002      	add	sp, #8
   13080:	bd80      	pop	{r7, pc}
   13082:	46c0      	nop			; (mov r8, r8)
   13084:	00013041 	.word	0x00013041

00013088 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13088:	b580      	push	{r7, lr}
   1308a:	b084      	sub	sp, #16
   1308c:	af00      	add	r7, sp, #0
   1308e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13090:	687b      	ldr	r3, [r7, #4]
   13092:	681b      	ldr	r3, [r3, #0]
   13094:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13096:	68fb      	ldr	r3, [r7, #12]
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	011b      	lsls	r3, r3, #4
   1309c:	0fdb      	lsrs	r3, r3, #31
   1309e:	b2db      	uxtb	r3, r3
   130a0:	001a      	movs	r2, r3
   130a2:	230b      	movs	r3, #11
   130a4:	18fb      	adds	r3, r7, r3
   130a6:	1e51      	subs	r1, r2, #1
   130a8:	418a      	sbcs	r2, r1
   130aa:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   130ac:	2308      	movs	r3, #8
   130ae:	18fb      	adds	r3, r7, r3
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	8b52      	ldrh	r2, [r2, #26]
   130b4:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	8b9b      	ldrh	r3, [r3, #28]
   130ba:	b29a      	uxth	r2, r3
   130bc:	2308      	movs	r3, #8
   130be:	18fb      	adds	r3, r7, r3
   130c0:	2108      	movs	r1, #8
   130c2:	1879      	adds	r1, r7, r1
   130c4:	8809      	ldrh	r1, [r1, #0]
   130c6:	1a8a      	subs	r2, r1, r2
   130c8:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	8b9b      	ldrh	r3, [r3, #28]
   130ce:	b29b      	uxth	r3, r3
   130d0:	3b01      	subs	r3, #1
   130d2:	b29a      	uxth	r2, r3
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   130d8:	230b      	movs	r3, #11
   130da:	18fb      	adds	r3, r7, r3
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2b00      	cmp	r3, #0
   130e0:	d010      	beq.n	13104 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   130e2:	687b      	ldr	r3, [r7, #4]
   130e4:	7adb      	ldrb	r3, [r3, #11]
   130e6:	2b00      	cmp	r3, #0
   130e8:	d01c      	beq.n	13124 <_i2c_master_read+0x9c>
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	8b9b      	ldrh	r3, [r3, #28]
   130ee:	b29b      	uxth	r3, r3
   130f0:	2b01      	cmp	r3, #1
   130f2:	d117      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	685b      	ldr	r3, [r3, #4]
   130f8:	2280      	movs	r2, #128	; 0x80
   130fa:	02d2      	lsls	r2, r2, #11
   130fc:	431a      	orrs	r2, r3
   130fe:	68fb      	ldr	r3, [r7, #12]
   13100:	605a      	str	r2, [r3, #4]
   13102:	e00f      	b.n	13124 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	7adb      	ldrb	r3, [r3, #11]
   13108:	2b00      	cmp	r3, #0
   1310a:	d00b      	beq.n	13124 <_i2c_master_read+0x9c>
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	8b9b      	ldrh	r3, [r3, #28]
   13110:	b29b      	uxth	r3, r3
   13112:	2b00      	cmp	r3, #0
   13114:	d106      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13116:	68fb      	ldr	r3, [r7, #12]
   13118:	685b      	ldr	r3, [r3, #4]
   1311a:	2280      	movs	r2, #128	; 0x80
   1311c:	02d2      	lsls	r2, r2, #11
   1311e:	431a      	orrs	r2, r3
   13120:	68fb      	ldr	r3, [r7, #12]
   13122:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	8b9b      	ldrh	r3, [r3, #28]
   13128:	b29b      	uxth	r3, r3
   1312a:	2b00      	cmp	r3, #0
   1312c:	d10e      	bne.n	1314c <_i2c_master_read+0xc4>
		if (module->send_stop) {
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	7a9b      	ldrb	r3, [r3, #10]
   13132:	2b00      	cmp	r3, #0
   13134:	d00a      	beq.n	1314c <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13136:	687b      	ldr	r3, [r7, #4]
   13138:	0018      	movs	r0, r3
   1313a:	4b0e      	ldr	r3, [pc, #56]	; (13174 <_i2c_master_read+0xec>)
   1313c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1313e:	68fb      	ldr	r3, [r7, #12]
   13140:	685b      	ldr	r3, [r3, #4]
   13142:	22c0      	movs	r2, #192	; 0xc0
   13144:	0292      	lsls	r2, r2, #10
   13146:	431a      	orrs	r2, r3
   13148:	68fb      	ldr	r3, [r7, #12]
   1314a:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	0018      	movs	r0, r3
   13150:	4b08      	ldr	r3, [pc, #32]	; (13174 <_i2c_master_read+0xec>)
   13152:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13154:	687b      	ldr	r3, [r7, #4]
   13156:	6a1a      	ldr	r2, [r3, #32]
   13158:	2308      	movs	r3, #8
   1315a:	18fb      	adds	r3, r7, r3
   1315c:	881b      	ldrh	r3, [r3, #0]
   1315e:	18d3      	adds	r3, r2, r3
   13160:	68fa      	ldr	r2, [r7, #12]
   13162:	2128      	movs	r1, #40	; 0x28
   13164:	5c52      	ldrb	r2, [r2, r1]
   13166:	b2d2      	uxtb	r2, r2
   13168:	701a      	strb	r2, [r3, #0]
}
   1316a:	46c0      	nop			; (mov r8, r8)
   1316c:	46bd      	mov	sp, r7
   1316e:	b004      	add	sp, #16
   13170:	bd80      	pop	{r7, pc}
   13172:	46c0      	nop			; (mov r8, r8)
   13174:	00013065 	.word	0x00013065

00013178 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13178:	b580      	push	{r7, lr}
   1317a:	b084      	sub	sp, #16
   1317c:	af00      	add	r7, sp, #0
   1317e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13180:	687b      	ldr	r3, [r7, #4]
   13182:	681b      	ldr	r3, [r3, #0]
   13184:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	8b5b      	ldrh	r3, [r3, #26]
   1318a:	b29b      	uxth	r3, r3
   1318c:	001a      	movs	r2, r3
   1318e:	2304      	movs	r3, #4
   13190:	4013      	ands	r3, r2
   13192:	d004      	beq.n	1319e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13194:	687b      	ldr	r3, [r7, #4]
   13196:	2225      	movs	r2, #37	; 0x25
   13198:	211e      	movs	r1, #30
   1319a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1319c:	e024      	b.n	131e8 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1319e:	230a      	movs	r3, #10
   131a0:	18fb      	adds	r3, r7, r3
   131a2:	687a      	ldr	r2, [r7, #4]
   131a4:	8b52      	ldrh	r2, [r2, #26]
   131a6:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	8b9b      	ldrh	r3, [r3, #28]
   131ac:	b29a      	uxth	r2, r3
   131ae:	230a      	movs	r3, #10
   131b0:	18fb      	adds	r3, r7, r3
   131b2:	210a      	movs	r1, #10
   131b4:	1879      	adds	r1, r7, r1
   131b6:	8809      	ldrh	r1, [r1, #0]
   131b8:	1a8a      	subs	r2, r1, r2
   131ba:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   131bc:	687b      	ldr	r3, [r7, #4]
   131be:	8b9b      	ldrh	r3, [r3, #28]
   131c0:	b29b      	uxth	r3, r3
   131c2:	3b01      	subs	r3, #1
   131c4:	b29a      	uxth	r2, r3
   131c6:	687b      	ldr	r3, [r7, #4]
   131c8:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	0018      	movs	r0, r3
   131ce:	4b08      	ldr	r3, [pc, #32]	; (131f0 <_i2c_master_write+0x78>)
   131d0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   131d2:	687b      	ldr	r3, [r7, #4]
   131d4:	6a1a      	ldr	r2, [r3, #32]
   131d6:	230a      	movs	r3, #10
   131d8:	18fb      	adds	r3, r7, r3
   131da:	881b      	ldrh	r3, [r3, #0]
   131dc:	18d3      	adds	r3, r2, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	b2d9      	uxtb	r1, r3
   131e2:	68fb      	ldr	r3, [r7, #12]
   131e4:	2228      	movs	r2, #40	; 0x28
   131e6:	5499      	strb	r1, [r3, r2]
}
   131e8:	46bd      	mov	sp, r7
   131ea:	b004      	add	sp, #16
   131ec:	bd80      	pop	{r7, pc}
   131ee:	46c0      	nop			; (mov r8, r8)
   131f0:	00013065 	.word	0x00013065

000131f4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   131f4:	b580      	push	{r7, lr}
   131f6:	b084      	sub	sp, #16
   131f8:	af00      	add	r7, sp, #0
   131fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	681b      	ldr	r3, [r3, #0]
   13200:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   13202:	68fb      	ldr	r3, [r7, #12]
   13204:	7e1b      	ldrb	r3, [r3, #24]
   13206:	b2db      	uxtb	r3, r3
   13208:	001a      	movs	r2, r3
   1320a:	2301      	movs	r3, #1
   1320c:	4013      	ands	r3, r2
   1320e:	d02b      	beq.n	13268 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13210:	68fb      	ldr	r3, [r7, #12]
   13212:	2201      	movs	r2, #1
   13214:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13216:	68fb      	ldr	r3, [r7, #12]
   13218:	8b5b      	ldrh	r3, [r3, #26]
   1321a:	b29b      	uxth	r3, r3
   1321c:	001a      	movs	r2, r3
   1321e:	2302      	movs	r3, #2
   13220:	4013      	ands	r3, r2
   13222:	d004      	beq.n	1322e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	2225      	movs	r2, #37	; 0x25
   13228:	2141      	movs	r1, #65	; 0x41
   1322a:	5499      	strb	r1, [r3, r2]
   1322c:	e01c      	b.n	13268 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	8b5b      	ldrh	r3, [r3, #26]
   13232:	b29b      	uxth	r3, r3
   13234:	001a      	movs	r2, r3
   13236:	2304      	movs	r3, #4
   13238:	4013      	ands	r3, r2
   1323a:	d015      	beq.n	13268 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   1323c:	687b      	ldr	r3, [r7, #4]
   1323e:	2225      	movs	r2, #37	; 0x25
   13240:	2118      	movs	r1, #24
   13242:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	2200      	movs	r2, #0
   13248:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   1324a:	687b      	ldr	r3, [r7, #4]
   1324c:	7a9b      	ldrb	r3, [r3, #10]
   1324e:	2b00      	cmp	r3, #0
   13250:	d00a      	beq.n	13268 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	0018      	movs	r0, r3
   13256:	4b13      	ldr	r3, [pc, #76]	; (132a4 <_i2c_master_async_address_response+0xb0>)
   13258:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1325a:	68fb      	ldr	r3, [r7, #12]
   1325c:	685b      	ldr	r3, [r3, #4]
   1325e:	22c0      	movs	r2, #192	; 0xc0
   13260:	0292      	lsls	r2, r2, #10
   13262:	431a      	orrs	r2, r3
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13268:	687b      	ldr	r3, [r7, #4]
   1326a:	8b9b      	ldrh	r3, [r3, #28]
   1326c:	b29a      	uxth	r2, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13272:	687b      	ldr	r3, [r7, #4]
   13274:	2225      	movs	r2, #37	; 0x25
   13276:	5c9b      	ldrb	r3, [r3, r2]
   13278:	b2db      	uxtb	r3, r3
   1327a:	2b05      	cmp	r3, #5
   1327c:	d10e      	bne.n	1329c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1327e:	687b      	ldr	r3, [r7, #4]
   13280:	2224      	movs	r2, #36	; 0x24
   13282:	5c9b      	ldrb	r3, [r3, r2]
   13284:	b2db      	uxtb	r3, r3
   13286:	2b00      	cmp	r3, #0
   13288:	d104      	bne.n	13294 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1328a:	687b      	ldr	r3, [r7, #4]
   1328c:	0018      	movs	r0, r3
   1328e:	4b06      	ldr	r3, [pc, #24]	; (132a8 <_i2c_master_async_address_response+0xb4>)
   13290:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13292:	e003      	b.n	1329c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13294:	687b      	ldr	r3, [r7, #4]
   13296:	0018      	movs	r0, r3
   13298:	4b04      	ldr	r3, [pc, #16]	; (132ac <_i2c_master_async_address_response+0xb8>)
   1329a:	4798      	blx	r3
}
   1329c:	46c0      	nop			; (mov r8, r8)
   1329e:	46bd      	mov	sp, r7
   132a0:	b004      	add	sp, #16
   132a2:	bd80      	pop	{r7, pc}
   132a4:	00013065 	.word	0x00013065
   132a8:	00013179 	.word	0x00013179
   132ac:	00013089 	.word	0x00013089

000132b0 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   132b0:	b580      	push	{r7, lr}
   132b2:	b084      	sub	sp, #16
   132b4:	af00      	add	r7, sp, #0
   132b6:	60f8      	str	r0, [r7, #12]
   132b8:	60b9      	str	r1, [r7, #8]
   132ba:	1dfb      	adds	r3, r7, #7
   132bc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   132be:	1dfb      	adds	r3, r7, #7
   132c0:	781b      	ldrb	r3, [r3, #0]
   132c2:	68fa      	ldr	r2, [r7, #12]
   132c4:	3302      	adds	r3, #2
   132c6:	009b      	lsls	r3, r3, #2
   132c8:	18d3      	adds	r3, r2, r3
   132ca:	3304      	adds	r3, #4
   132cc:	68ba      	ldr	r2, [r7, #8]
   132ce:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   132d0:	68fb      	ldr	r3, [r7, #12]
   132d2:	7e1b      	ldrb	r3, [r3, #24]
   132d4:	b2db      	uxtb	r3, r3
   132d6:	b25a      	sxtb	r2, r3
   132d8:	1dfb      	adds	r3, r7, #7
   132da:	781b      	ldrb	r3, [r3, #0]
   132dc:	2101      	movs	r1, #1
   132de:	4099      	lsls	r1, r3
   132e0:	000b      	movs	r3, r1
   132e2:	b25b      	sxtb	r3, r3
   132e4:	4313      	orrs	r3, r2
   132e6:	b25b      	sxtb	r3, r3
   132e8:	b2da      	uxtb	r2, r3
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	761a      	strb	r2, [r3, #24]
}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	46bd      	mov	sp, r7
   132f2:	b004      	add	sp, #16
   132f4:	bd80      	pop	{r7, pc}
	...

000132f8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f8:	b590      	push	{r4, r7, lr}
   132fa:	b087      	sub	sp, #28
   132fc:	af00      	add	r7, sp, #0
   132fe:	6078      	str	r0, [r7, #4]
   13300:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	681b      	ldr	r3, [r3, #0]
   13306:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13308:	683b      	ldr	r3, [r7, #0]
   1330a:	685a      	ldr	r2, [r3, #4]
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13310:	683b      	ldr	r3, [r7, #0]
   13312:	885a      	ldrh	r2, [r3, #2]
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2224      	movs	r2, #36	; 0x24
   1331c:	2101      	movs	r1, #1
   1331e:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13320:	687b      	ldr	r3, [r7, #4]
   13322:	2225      	movs	r2, #37	; 0x25
   13324:	2105      	movs	r1, #5
   13326:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13328:	693b      	ldr	r3, [r7, #16]
   1332a:	681b      	ldr	r3, [r3, #0]
   1332c:	011b      	lsls	r3, r3, #4
   1332e:	0fdb      	lsrs	r3, r3, #31
   13330:	b2db      	uxtb	r3, r3
   13332:	001a      	movs	r2, r3
   13334:	230f      	movs	r3, #15
   13336:	18fb      	adds	r3, r7, r3
   13338:	1e51      	subs	r1, r2, #1
   1333a:	418a      	sbcs	r2, r1
   1333c:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1333e:	683b      	ldr	r3, [r7, #0]
   13340:	7a5b      	ldrb	r3, [r3, #9]
   13342:	2b00      	cmp	r3, #0
   13344:	d006      	beq.n	13354 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13346:	683b      	ldr	r3, [r7, #0]
   13348:	7a9a      	ldrb	r2, [r3, #10]
   1334a:	687b      	ldr	r3, [r7, #4]
   1334c:	0011      	movs	r1, r2
   1334e:	0018      	movs	r0, r3
   13350:	4b3b      	ldr	r3, [pc, #236]	; (13440 <_i2c_master_read_packet+0x148>)
   13352:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13354:	230f      	movs	r3, #15
   13356:	18fb      	adds	r3, r7, r3
   13358:	781b      	ldrb	r3, [r3, #0]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d00b      	beq.n	13376 <_i2c_master_read_packet+0x7e>
   1335e:	683b      	ldr	r3, [r7, #0]
   13360:	885b      	ldrh	r3, [r3, #2]
   13362:	2b01      	cmp	r3, #1
   13364:	d107      	bne.n	13376 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13366:	693b      	ldr	r3, [r7, #16]
   13368:	685b      	ldr	r3, [r3, #4]
   1336a:	2280      	movs	r2, #128	; 0x80
   1336c:	02d2      	lsls	r2, r2, #11
   1336e:	431a      	orrs	r2, r3
   13370:	693b      	ldr	r3, [r7, #16]
   13372:	605a      	str	r2, [r3, #4]
   13374:	e005      	b.n	13382 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13376:	693b      	ldr	r3, [r7, #16]
   13378:	685b      	ldr	r3, [r3, #4]
   1337a:	4a32      	ldr	r2, [pc, #200]	; (13444 <_i2c_master_read_packet+0x14c>)
   1337c:	401a      	ands	r2, r3
   1337e:	693b      	ldr	r3, [r7, #16]
   13380:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13382:	683b      	ldr	r3, [r7, #0]
   13384:	7a1b      	ldrb	r3, [r3, #8]
   13386:	2b00      	cmp	r3, #0
   13388:	d045      	beq.n	13416 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1338a:	683b      	ldr	r3, [r7, #0]
   1338c:	881b      	ldrh	r3, [r3, #0]
   1338e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	7a5b      	ldrb	r3, [r3, #9]
   13394:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13396:	4313      	orrs	r3, r2
   13398:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1339a:	2380      	movs	r3, #128	; 0x80
   1339c:	021b      	lsls	r3, r3, #8
   1339e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   133a0:	693b      	ldr	r3, [r7, #16]
   133a2:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   133a4:	2317      	movs	r3, #23
   133a6:	18fc      	adds	r4, r7, r3
   133a8:	687b      	ldr	r3, [r7, #4]
   133aa:	0018      	movs	r0, r3
   133ac:	4b26      	ldr	r3, [pc, #152]	; (13448 <_i2c_master_read_packet+0x150>)
   133ae:	4798      	blx	r3
   133b0:	0003      	movs	r3, r0
   133b2:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   133b4:	693b      	ldr	r3, [r7, #16]
   133b6:	685b      	ldr	r3, [r3, #4]
   133b8:	4a22      	ldr	r2, [pc, #136]	; (13444 <_i2c_master_read_packet+0x14c>)
   133ba:	401a      	ands	r2, r3
   133bc:	693b      	ldr	r3, [r7, #16]
   133be:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   133c0:	2317      	movs	r3, #23
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b00      	cmp	r3, #0
   133c8:	d107      	bne.n	133da <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   133ca:	2317      	movs	r3, #23
   133cc:	18fc      	adds	r4, r7, r3
   133ce:	687b      	ldr	r3, [r7, #4]
   133d0:	0018      	movs	r0, r3
   133d2:	4b1e      	ldr	r3, [pc, #120]	; (1344c <_i2c_master_read_packet+0x154>)
   133d4:	4798      	blx	r3
   133d6:	0003      	movs	r3, r0
   133d8:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   133da:	2317      	movs	r3, #23
   133dc:	18fb      	adds	r3, r7, r3
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	2b00      	cmp	r3, #0
   133e2:	d114      	bne.n	1340e <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   133e4:	693b      	ldr	r3, [r7, #16]
   133e6:	2203      	movs	r2, #3
   133e8:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   133ea:	683b      	ldr	r3, [r7, #0]
   133ec:	881b      	ldrh	r3, [r3, #0]
   133ee:	0a1b      	lsrs	r3, r3, #8
   133f0:	b29b      	uxth	r3, r3
   133f2:	2278      	movs	r2, #120	; 0x78
   133f4:	4313      	orrs	r3, r2
   133f6:	b29b      	uxth	r3, r3
   133f8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133fa:	683b      	ldr	r3, [r7, #0]
   133fc:	7a5b      	ldrb	r3, [r3, #9]
   133fe:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13400:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13402:	2201      	movs	r2, #1
   13404:	4313      	orrs	r3, r2
   13406:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13408:	693b      	ldr	r3, [r7, #16]
   1340a:	625a      	str	r2, [r3, #36]	; 0x24
   1340c:	e012      	b.n	13434 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   1340e:	2317      	movs	r3, #23
   13410:	18fb      	adds	r3, r7, r3
   13412:	781b      	ldrb	r3, [r3, #0]
   13414:	e00f      	b.n	13436 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13416:	693b      	ldr	r3, [r7, #16]
   13418:	2203      	movs	r2, #3
   1341a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1341c:	683b      	ldr	r3, [r7, #0]
   1341e:	881b      	ldrh	r3, [r3, #0]
   13420:	005b      	lsls	r3, r3, #1
   13422:	2201      	movs	r2, #1
   13424:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13426:	683b      	ldr	r3, [r7, #0]
   13428:	7a5b      	ldrb	r3, [r3, #9]
   1342a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1342c:	4313      	orrs	r3, r2
   1342e:	001a      	movs	r2, r3
   13430:	693b      	ldr	r3, [r7, #16]
   13432:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13434:	2300      	movs	r3, #0
}
   13436:	0018      	movs	r0, r3
   13438:	46bd      	mov	sp, r7
   1343a:	b007      	add	sp, #28
   1343c:	bd90      	pop	{r4, r7, pc}
   1343e:	46c0      	nop			; (mov r8, r8)
   13440:	000187c1 	.word	0x000187c1
   13444:	fffbffff 	.word	0xfffbffff
   13448:	00018763 	.word	0x00018763
   1344c:	00018705 	.word	0x00018705

00013450 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13450:	b580      	push	{r7, lr}
   13452:	b082      	sub	sp, #8
   13454:	af00      	add	r7, sp, #0
   13456:	6078      	str	r0, [r7, #4]
   13458:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	8b9b      	ldrh	r3, [r3, #28]
   1345e:	b29b      	uxth	r3, r3
   13460:	2b00      	cmp	r3, #0
   13462:	d001      	beq.n	13468 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13464:	2305      	movs	r3, #5
   13466:	e00c      	b.n	13482 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13468:	687b      	ldr	r3, [r7, #4]
   1346a:	2201      	movs	r2, #1
   1346c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	2201      	movs	r2, #1
   13472:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13474:	683a      	ldr	r2, [r7, #0]
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	0011      	movs	r1, r2
   1347a:	0018      	movs	r0, r3
   1347c:	4b03      	ldr	r3, [pc, #12]	; (1348c <i2c_master_read_packet_job+0x3c>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
}
   13482:	0018      	movs	r0, r3
   13484:	46bd      	mov	sp, r7
   13486:	b002      	add	sp, #8
   13488:	bd80      	pop	{r7, pc}
   1348a:	46c0      	nop			; (mov r8, r8)
   1348c:	000132f9 	.word	0x000132f9

00013490 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13490:	b580      	push	{r7, lr}
   13492:	b084      	sub	sp, #16
   13494:	af00      	add	r7, sp, #0
   13496:	6078      	str	r0, [r7, #4]
   13498:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   134a0:	683b      	ldr	r3, [r7, #0]
   134a2:	7a5b      	ldrb	r3, [r3, #9]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d006      	beq.n	134b6 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   134a8:	683b      	ldr	r3, [r7, #0]
   134aa:	7a9a      	ldrb	r2, [r3, #10]
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	0011      	movs	r1, r2
   134b0:	0018      	movs	r0, r3
   134b2:	4b1e      	ldr	r3, [pc, #120]	; (1352c <_i2c_master_write_packet+0x9c>)
   134b4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   134b6:	68fb      	ldr	r3, [r7, #12]
   134b8:	685b      	ldr	r3, [r3, #4]
   134ba:	4a1d      	ldr	r2, [pc, #116]	; (13530 <_i2c_master_write_packet+0xa0>)
   134bc:	401a      	ands	r2, r3
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   134c2:	683b      	ldr	r3, [r7, #0]
   134c4:	685a      	ldr	r2, [r3, #4]
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	885a      	ldrh	r2, [r3, #2]
   134ce:	687b      	ldr	r3, [r7, #4]
   134d0:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	2224      	movs	r2, #36	; 0x24
   134d6:	2100      	movs	r1, #0
   134d8:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	2225      	movs	r2, #37	; 0x25
   134de:	2105      	movs	r1, #5
   134e0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   134e2:	68fb      	ldr	r3, [r7, #12]
   134e4:	2203      	movs	r2, #3
   134e6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   134e8:	683b      	ldr	r3, [r7, #0]
   134ea:	7a1b      	ldrb	r3, [r3, #8]
   134ec:	2b00      	cmp	r3, #0
   134ee:	d00d      	beq.n	1350c <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134f0:	683b      	ldr	r3, [r7, #0]
   134f2:	881b      	ldrh	r3, [r3, #0]
   134f4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   134f6:	683b      	ldr	r3, [r7, #0]
   134f8:	7a5b      	ldrb	r3, [r3, #9]
   134fa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134fc:	4313      	orrs	r3, r2
   134fe:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13500:	2380      	movs	r3, #128	; 0x80
   13502:	021b      	lsls	r3, r3, #8
   13504:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13506:	68fb      	ldr	r3, [r7, #12]
   13508:	625a      	str	r2, [r3, #36]	; 0x24
   1350a:	e009      	b.n	13520 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1350c:	683b      	ldr	r3, [r7, #0]
   1350e:	881b      	ldrh	r3, [r3, #0]
   13510:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13512:	683b      	ldr	r3, [r7, #0]
   13514:	7a5b      	ldrb	r3, [r3, #9]
   13516:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13518:	4313      	orrs	r3, r2
   1351a:	001a      	movs	r2, r3
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13520:	2300      	movs	r3, #0
}
   13522:	0018      	movs	r0, r3
   13524:	46bd      	mov	sp, r7
   13526:	b004      	add	sp, #16
   13528:	bd80      	pop	{r7, pc}
   1352a:	46c0      	nop			; (mov r8, r8)
   1352c:	000187c1 	.word	0x000187c1
   13530:	fffbffff 	.word	0xfffbffff

00013534 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13534:	b580      	push	{r7, lr}
   13536:	b082      	sub	sp, #8
   13538:	af00      	add	r7, sp, #0
   1353a:	6078      	str	r0, [r7, #4]
   1353c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   1353e:	687b      	ldr	r3, [r7, #4]
   13540:	8b9b      	ldrh	r3, [r3, #28]
   13542:	b29b      	uxth	r3, r3
   13544:	2b00      	cmp	r3, #0
   13546:	d001      	beq.n	1354c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13548:	2305      	movs	r3, #5
   1354a:	e00c      	b.n	13566 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	2201      	movs	r2, #1
   13550:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13552:	687b      	ldr	r3, [r7, #4]
   13554:	2201      	movs	r2, #1
   13556:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13558:	683a      	ldr	r2, [r7, #0]
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	0011      	movs	r1, r2
   1355e:	0018      	movs	r0, r3
   13560:	4b03      	ldr	r3, [pc, #12]	; (13570 <i2c_master_write_packet_job+0x3c>)
   13562:	4798      	blx	r3
   13564:	0003      	movs	r3, r0
}
   13566:	0018      	movs	r0, r3
   13568:	46bd      	mov	sp, r7
   1356a:	b002      	add	sp, #8
   1356c:	bd80      	pop	{r7, pc}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	00013491 	.word	0x00013491

00013574 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13574:	b580      	push	{r7, lr}
   13576:	b086      	sub	sp, #24
   13578:	af00      	add	r7, sp, #0
   1357a:	0002      	movs	r2, r0
   1357c:	1dfb      	adds	r3, r7, #7
   1357e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13580:	1dfb      	adds	r3, r7, #7
   13582:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13584:	4b93      	ldr	r3, [pc, #588]	; (137d4 <_i2c_master_interrupt_handler+0x260>)
   13586:	0092      	lsls	r2, r2, #2
   13588:	58d3      	ldr	r3, [r2, r3]
   1358a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1358c:	697b      	ldr	r3, [r7, #20]
   1358e:	681b      	ldr	r3, [r3, #0]
   13590:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	681b      	ldr	r3, [r3, #0]
   13596:	011b      	lsls	r3, r3, #4
   13598:	0fdb      	lsrs	r3, r3, #31
   1359a:	b2db      	uxtb	r3, r3
   1359c:	001a      	movs	r2, r3
   1359e:	230f      	movs	r3, #15
   135a0:	18fb      	adds	r3, r7, r3
   135a2:	1e51      	subs	r1, r2, #1
   135a4:	418a      	sbcs	r2, r1
   135a6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   135a8:	230e      	movs	r3, #14
   135aa:	18fb      	adds	r3, r7, r3
   135ac:	697a      	ldr	r2, [r7, #20]
   135ae:	7e52      	ldrb	r2, [r2, #25]
   135b0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	7e1b      	ldrb	r3, [r3, #24]
   135b6:	b2da      	uxtb	r2, r3
   135b8:	230e      	movs	r3, #14
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	210e      	movs	r1, #14
   135be:	1879      	adds	r1, r7, r1
   135c0:	7809      	ldrb	r1, [r1, #0]
   135c2:	400a      	ands	r2, r1
   135c4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	8b5b      	ldrh	r3, [r3, #26]
   135ca:	b29b      	uxth	r3, r3
   135cc:	2b00      	cmp	r3, #0
   135ce:	d109      	bne.n	135e4 <_i2c_master_interrupt_handler+0x70>
   135d0:	697b      	ldr	r3, [r7, #20]
   135d2:	8b9b      	ldrh	r3, [r3, #28]
   135d4:	b29b      	uxth	r3, r3
   135d6:	2b00      	cmp	r3, #0
   135d8:	d004      	beq.n	135e4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   135da:	697b      	ldr	r3, [r7, #20]
   135dc:	0018      	movs	r0, r3
   135de:	4b7e      	ldr	r3, [pc, #504]	; (137d8 <_i2c_master_interrupt_handler+0x264>)
   135e0:	4798      	blx	r3
   135e2:	e070      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   135e4:	697b      	ldr	r3, [r7, #20]
   135e6:	8b5b      	ldrh	r3, [r3, #26]
   135e8:	b29b      	uxth	r3, r3
   135ea:	2b00      	cmp	r3, #0
   135ec:	d039      	beq.n	13662 <_i2c_master_interrupt_handler+0xee>
   135ee:	697b      	ldr	r3, [r7, #20]
   135f0:	8b9b      	ldrh	r3, [r3, #28]
   135f2:	b29b      	uxth	r3, r3
   135f4:	2b00      	cmp	r3, #0
   135f6:	d134      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   135f8:	697b      	ldr	r3, [r7, #20]
   135fa:	2225      	movs	r2, #37	; 0x25
   135fc:	5c9b      	ldrb	r3, [r3, r2]
   135fe:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13600:	2b05      	cmp	r3, #5
   13602:	d12e      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13604:	697b      	ldr	r3, [r7, #20]
   13606:	2224      	movs	r2, #36	; 0x24
   13608:	5c9b      	ldrb	r3, [r3, r2]
   1360a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1360c:	2b00      	cmp	r3, #0
   1360e:	d128      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13610:	693b      	ldr	r3, [r7, #16]
   13612:	2203      	movs	r2, #3
   13614:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13616:	697b      	ldr	r3, [r7, #20]
   13618:	2200      	movs	r2, #0
   1361a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   1361c:	697b      	ldr	r3, [r7, #20]
   1361e:	2225      	movs	r2, #37	; 0x25
   13620:	2100      	movs	r1, #0
   13622:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	7a9b      	ldrb	r3, [r3, #10]
   13628:	2b00      	cmp	r3, #0
   1362a:	d00b      	beq.n	13644 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1362c:	697b      	ldr	r3, [r7, #20]
   1362e:	0018      	movs	r0, r3
   13630:	4b6a      	ldr	r3, [pc, #424]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   13632:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	685b      	ldr	r3, [r3, #4]
   13638:	22c0      	movs	r2, #192	; 0xc0
   1363a:	0292      	lsls	r2, r2, #10
   1363c:	431a      	orrs	r2, r3
   1363e:	693b      	ldr	r3, [r7, #16]
   13640:	605a      	str	r2, [r3, #4]
   13642:	e002      	b.n	1364a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13644:	693b      	ldr	r3, [r7, #16]
   13646:	2201      	movs	r2, #1
   13648:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1364a:	230e      	movs	r3, #14
   1364c:	18fb      	adds	r3, r7, r3
   1364e:	781b      	ldrb	r3, [r3, #0]
   13650:	2201      	movs	r2, #1
   13652:	4013      	ands	r3, r2
   13654:	d037      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13656:	697b      	ldr	r3, [r7, #20]
   13658:	68db      	ldr	r3, [r3, #12]
   1365a:	697a      	ldr	r2, [r7, #20]
   1365c:	0010      	movs	r0, r2
   1365e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13660:	e031      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13662:	697b      	ldr	r3, [r7, #20]
   13664:	8b5b      	ldrh	r3, [r3, #26]
   13666:	b29b      	uxth	r3, r3
   13668:	2b00      	cmp	r3, #0
   1366a:	d02c      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
   1366c:	697b      	ldr	r3, [r7, #20]
   1366e:	8b9b      	ldrh	r3, [r3, #28]
   13670:	b29b      	uxth	r3, r3
   13672:	2b00      	cmp	r3, #0
   13674:	d027      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	8b5b      	ldrh	r3, [r3, #26]
   1367a:	b29b      	uxth	r3, r3
   1367c:	001a      	movs	r2, r3
   1367e:	2320      	movs	r3, #32
   13680:	4013      	ands	r3, r2
   13682:	d111      	bne.n	136a8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13684:	230f      	movs	r3, #15
   13686:	18fb      	adds	r3, r7, r3
   13688:	781b      	ldrb	r3, [r3, #0]
   1368a:	2201      	movs	r2, #1
   1368c:	4053      	eors	r3, r2
   1368e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13690:	2b00      	cmp	r3, #0
   13692:	d104      	bne.n	1369e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13694:	697b      	ldr	r3, [r7, #20]
   13696:	8b9b      	ldrh	r3, [r3, #28]
   13698:	b29b      	uxth	r3, r3
   1369a:	2b01      	cmp	r3, #1
   1369c:	d004      	beq.n	136a8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1369e:	697b      	ldr	r3, [r7, #20]
   136a0:	2225      	movs	r2, #37	; 0x25
   136a2:	2141      	movs	r1, #65	; 0x41
   136a4:	5499      	strb	r1, [r3, r2]
   136a6:	e00e      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   136a8:	697b      	ldr	r3, [r7, #20]
   136aa:	2224      	movs	r2, #36	; 0x24
   136ac:	5c9b      	ldrb	r3, [r3, r2]
   136ae:	b2db      	uxtb	r3, r3
   136b0:	2b00      	cmp	r3, #0
   136b2:	d104      	bne.n	136be <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   136b4:	697b      	ldr	r3, [r7, #20]
   136b6:	0018      	movs	r0, r3
   136b8:	4b49      	ldr	r3, [pc, #292]	; (137e0 <_i2c_master_interrupt_handler+0x26c>)
   136ba:	4798      	blx	r3
   136bc:	e003      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   136be:	697b      	ldr	r3, [r7, #20]
   136c0:	0018      	movs	r0, r3
   136c2:	4b48      	ldr	r3, [pc, #288]	; (137e4 <_i2c_master_interrupt_handler+0x270>)
   136c4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136c6:	697b      	ldr	r3, [r7, #20]
   136c8:	8b5b      	ldrh	r3, [r3, #26]
   136ca:	b29b      	uxth	r3, r3
   136cc:	2b00      	cmp	r3, #0
   136ce:	d047      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
   136d0:	697b      	ldr	r3, [r7, #20]
   136d2:	8b9b      	ldrh	r3, [r3, #28]
   136d4:	b29b      	uxth	r3, r3
   136d6:	2b00      	cmp	r3, #0
   136d8:	d142      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   136da:	697b      	ldr	r3, [r7, #20]
   136dc:	2225      	movs	r2, #37	; 0x25
   136de:	5c9b      	ldrb	r3, [r3, r2]
   136e0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136e2:	2b05      	cmp	r3, #5
   136e4:	d13c      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   136e6:	697b      	ldr	r3, [r7, #20]
   136e8:	2224      	movs	r2, #36	; 0x24
   136ea:	5c9b      	ldrb	r3, [r3, r2]
   136ec:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   136ee:	2b01      	cmp	r3, #1
   136f0:	d136      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   136f2:	693b      	ldr	r3, [r7, #16]
   136f4:	7e1b      	ldrb	r3, [r3, #24]
   136f6:	b2db      	uxtb	r3, r3
   136f8:	001a      	movs	r2, r3
   136fa:	2302      	movs	r3, #2
   136fc:	4013      	ands	r3, r2
   136fe:	d002      	beq.n	13706 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	2202      	movs	r2, #2
   13704:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13706:	693b      	ldr	r3, [r7, #16]
   13708:	2203      	movs	r2, #3
   1370a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   1370c:	697b      	ldr	r3, [r7, #20]
   1370e:	2200      	movs	r2, #0
   13710:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13712:	697b      	ldr	r3, [r7, #20]
   13714:	2225      	movs	r2, #37	; 0x25
   13716:	2100      	movs	r1, #0
   13718:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   1371a:	230e      	movs	r3, #14
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2202      	movs	r2, #2
   13722:	4013      	ands	r3, r2
   13724:	d00b      	beq.n	1373e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13726:	697b      	ldr	r3, [r7, #20]
   13728:	2224      	movs	r2, #36	; 0x24
   1372a:	5c9b      	ldrb	r3, [r3, r2]
   1372c:	b2db      	uxtb	r3, r3
   1372e:	2b01      	cmp	r3, #1
   13730:	d105      	bne.n	1373e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13732:	697b      	ldr	r3, [r7, #20]
   13734:	691b      	ldr	r3, [r3, #16]
   13736:	697a      	ldr	r2, [r7, #20]
   13738:	0010      	movs	r0, r2
   1373a:	4798      	blx	r3
   1373c:	e010      	b.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   1373e:	230e      	movs	r3, #14
   13740:	18fb      	adds	r3, r7, r3
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	2201      	movs	r2, #1
   13746:	4013      	ands	r3, r2
   13748:	d00a      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1374a:	697b      	ldr	r3, [r7, #20]
   1374c:	2224      	movs	r2, #36	; 0x24
   1374e:	5c9b      	ldrb	r3, [r3, r2]
   13750:	b2db      	uxtb	r3, r3
   13752:	2b00      	cmp	r3, #0
   13754:	d104      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13756:	697b      	ldr	r3, [r7, #20]
   13758:	68db      	ldr	r3, [r3, #12]
   1375a:	697a      	ldr	r2, [r7, #20]
   1375c:	0010      	movs	r0, r2
   1375e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13760:	697b      	ldr	r3, [r7, #20]
   13762:	2225      	movs	r2, #37	; 0x25
   13764:	5c9b      	ldrb	r3, [r3, r2]
   13766:	b2db      	uxtb	r3, r3
   13768:	2b05      	cmp	r3, #5
   1376a:	d02e      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
   1376c:	697b      	ldr	r3, [r7, #20]
   1376e:	2225      	movs	r2, #37	; 0x25
   13770:	5c9b      	ldrb	r3, [r3, r2]
   13772:	b2db      	uxtb	r3, r3
   13774:	2b00      	cmp	r3, #0
   13776:	d028      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13778:	693b      	ldr	r3, [r7, #16]
   1377a:	2203      	movs	r2, #3
   1377c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1377e:	697b      	ldr	r3, [r7, #20]
   13780:	2200      	movs	r2, #0
   13782:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13784:	697b      	ldr	r3, [r7, #20]
   13786:	2200      	movs	r2, #0
   13788:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1378a:	697b      	ldr	r3, [r7, #20]
   1378c:	2225      	movs	r2, #37	; 0x25
   1378e:	5c9b      	ldrb	r3, [r3, r2]
   13790:	b2db      	uxtb	r3, r3
   13792:	2b41      	cmp	r3, #65	; 0x41
   13794:	d00e      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13796:	697b      	ldr	r3, [r7, #20]
   13798:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1379a:	2b00      	cmp	r3, #0
   1379c:	d00a      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1379e:	697b      	ldr	r3, [r7, #20]
   137a0:	0018      	movs	r0, r3
   137a2:	4b0e      	ldr	r3, [pc, #56]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   137a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   137a6:	693b      	ldr	r3, [r7, #16]
   137a8:	685b      	ldr	r3, [r3, #4]
   137aa:	22e0      	movs	r2, #224	; 0xe0
   137ac:	02d2      	lsls	r2, r2, #11
   137ae:	431a      	orrs	r2, r3
   137b0:	693b      	ldr	r3, [r7, #16]
   137b2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   137b4:	230e      	movs	r3, #14
   137b6:	18fb      	adds	r3, r7, r3
   137b8:	781b      	ldrb	r3, [r3, #0]
   137ba:	2204      	movs	r2, #4
   137bc:	4013      	ands	r3, r2
   137be:	d004      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   137c0:	697b      	ldr	r3, [r7, #20]
   137c2:	695b      	ldr	r3, [r3, #20]
   137c4:	697a      	ldr	r2, [r7, #20]
   137c6:	0010      	movs	r0, r2
   137c8:	4798      	blx	r3
		}
	}
}
   137ca:	46c0      	nop			; (mov r8, r8)
   137cc:	46bd      	mov	sp, r7
   137ce:	b006      	add	sp, #24
   137d0:	bd80      	pop	{r7, pc}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	20005c9c 	.word	0x20005c9c
   137d8:	000131f5 	.word	0x000131f5
   137dc:	00013065 	.word	0x00013065
   137e0:	00013179 	.word	0x00013179
   137e4:	00013089 	.word	0x00013089

000137e8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   137e8:	b580      	push	{r7, lr}
   137ea:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   137ec:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   137f0:	4b02      	ldr	r3, [pc, #8]	; (137fc <NVIC_SystemReset+0x14>)
   137f2:	4a03      	ldr	r2, [pc, #12]	; (13800 <NVIC_SystemReset+0x18>)
   137f4:	60da      	str	r2, [r3, #12]
   137f6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   137fa:	e7fe      	b.n	137fa <NVIC_SystemReset+0x12>
   137fc:	e000ed00 	.word	0xe000ed00
   13800:	05fa0004 	.word	0x05fa0004

00013804 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13804:	b580      	push	{r7, lr}
   13806:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13808:	4b02      	ldr	r3, [pc, #8]	; (13814 <system_reset+0x10>)
   1380a:	4798      	blx	r3
}
   1380c:	46c0      	nop			; (mov r8, r8)
   1380e:	46bd      	mov	sp, r7
   13810:	bd80      	pop	{r7, pc}
   13812:	46c0      	nop			; (mov r8, r8)
   13814:	000137e9 	.word	0x000137e9

00013818 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b086      	sub	sp, #24
   1381c:	af00      	add	r7, sp, #0
   1381e:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13820:	4ba6      	ldr	r3, [pc, #664]	; (13abc <vCommandConsoleTask+0x2a4>)
   13822:	0018      	movs	r0, r3
   13824:	4ba6      	ldr	r3, [pc, #664]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13826:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   13828:	4ba6      	ldr	r3, [pc, #664]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   1382a:	0018      	movs	r0, r3
   1382c:	4ba4      	ldr	r3, [pc, #656]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1382e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13830:	4ba5      	ldr	r3, [pc, #660]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   13832:	0018      	movs	r0, r3
   13834:	4ba2      	ldr	r3, [pc, #648]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13836:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13838:	4ba4      	ldr	r3, [pc, #656]	; (13acc <vCommandConsoleTask+0x2b4>)
   1383a:	0018      	movs	r0, r3
   1383c:	4ba0      	ldr	r3, [pc, #640]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1383e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   13840:	4ba3      	ldr	r3, [pc, #652]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   13842:	0018      	movs	r0, r3
   13844:	4b9e      	ldr	r3, [pc, #632]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13846:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
   13848:	4ba2      	ldr	r3, [pc, #648]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   1384a:	0018      	movs	r0, r3
   1384c:	4b9c      	ldr	r3, [pc, #624]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1384e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   13850:	4ba1      	ldr	r3, [pc, #644]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13852:	0018      	movs	r0, r3
   13854:	4b9a      	ldr	r3, [pc, #616]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13856:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
   13858:	4ba0      	ldr	r3, [pc, #640]	; (13adc <vCommandConsoleTask+0x2c4>)
   1385a:	0018      	movs	r0, r3
   1385c:	4b98      	ldr	r3, [pc, #608]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1385e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendTestData);
   13860:	4b9f      	ldr	r3, [pc, #636]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13862:	0018      	movs	r0, r3
   13864:	4b96      	ldr	r3, [pc, #600]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13866:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13868:	4b9e      	ldr	r3, [pc, #632]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   1386a:	0018      	movs	r0, r3
   1386c:	4b94      	ldr	r3, [pc, #592]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1386e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendWeightData);
   13870:	4b9d      	ldr	r3, [pc, #628]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   13872:	0018      	movs	r0, r3
   13874:	4b92      	ldr	r3, [pc, #584]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13876:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoOpen);
   13878:	4b9c      	ldr	r3, [pc, #624]	; (13aec <vCommandConsoleTask+0x2d4>)
   1387a:	0018      	movs	r0, r3
   1387c:	4b90      	ldr	r3, [pc, #576]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1387e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoClose);
   13880:	4b9b      	ldr	r3, [pc, #620]	; (13af0 <vCommandConsoleTask+0x2d8>)
   13882:	0018      	movs	r0, r3
   13884:	4b8e      	ldr	r3, [pc, #568]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13886:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13888:	2317      	movs	r3, #23
   1388a:	18fb      	adds	r3, r7, r3
   1388c:	2200      	movs	r2, #0
   1388e:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13890:	4b98      	ldr	r3, [pc, #608]	; (13af4 <vCommandConsoleTask+0x2dc>)
   13892:	0018      	movs	r0, r3
   13894:	4b98      	ldr	r3, [pc, #608]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13896:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13898:	2203      	movs	r2, #3
   1389a:	2100      	movs	r1, #0
   1389c:	2001      	movs	r0, #1
   1389e:	4b97      	ldr	r3, [pc, #604]	; (13afc <vCommandConsoleTask+0x2e4>)
   138a0:	4798      	blx	r3
   138a2:	0002      	movs	r2, r0
   138a4:	4b96      	ldr	r3, [pc, #600]	; (13b00 <vCommandConsoleTask+0x2e8>)
   138a6:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   138a8:	4b95      	ldr	r3, [pc, #596]	; (13b00 <vCommandConsoleTask+0x2e8>)
   138aa:	681b      	ldr	r3, [r3, #0]
   138ac:	2b00      	cmp	r3, #0
   138ae:	d107      	bne.n	138c0 <vCommandConsoleTask+0xa8>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   138b0:	4b94      	ldr	r3, [pc, #592]	; (13b04 <vCommandConsoleTask+0x2ec>)
   138b2:	0019      	movs	r1, r3
   138b4:	2003      	movs	r0, #3
   138b6:	4b94      	ldr	r3, [pc, #592]	; (13b08 <vCommandConsoleTask+0x2f0>)
   138b8:	4798      	blx	r3
        vTaskSuspend(NULL);
   138ba:	2000      	movs	r0, #0
   138bc:	4b93      	ldr	r3, [pc, #588]	; (13b0c <vCommandConsoleTask+0x2f4>)
   138be:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   138c0:	230c      	movs	r3, #12
   138c2:	18fb      	adds	r3, r7, r3
   138c4:	0018      	movs	r0, r3
   138c6:	4b92      	ldr	r3, [pc, #584]	; (13b10 <vCommandConsoleTask+0x2f8>)
   138c8:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   138ca:	230c      	movs	r3, #12
   138cc:	18fb      	adds	r3, r7, r3
   138ce:	781b      	ldrb	r3, [r3, #0]
   138d0:	2b0a      	cmp	r3, #10
   138d2:	d004      	beq.n	138de <vCommandConsoleTask+0xc6>
   138d4:	230c      	movs	r3, #12
   138d6:	18fb      	adds	r3, r7, r3
   138d8:	781b      	ldrb	r3, [r3, #0]
   138da:	2b0d      	cmp	r3, #13
   138dc:	d137      	bne.n	1394e <vCommandConsoleTask+0x136>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   138de:	4b8d      	ldr	r3, [pc, #564]	; (13b14 <vCommandConsoleTask+0x2fc>)
   138e0:	0018      	movs	r0, r3
   138e2:	4b85      	ldr	r3, [pc, #532]	; (13af8 <vCommandConsoleTask+0x2e0>)
   138e4:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   138e6:	4b8c      	ldr	r3, [pc, #560]	; (13b18 <vCommandConsoleTask+0x300>)
   138e8:	2200      	movs	r2, #0
   138ea:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   138ec:	4b8b      	ldr	r3, [pc, #556]	; (13b1c <vCommandConsoleTask+0x304>)
   138ee:	2200      	movs	r2, #0
   138f0:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   138f2:	498b      	ldr	r1, [pc, #556]	; (13b20 <vCommandConsoleTask+0x308>)
   138f4:	4b8b      	ldr	r3, [pc, #556]	; (13b24 <vCommandConsoleTask+0x30c>)
   138f6:	2231      	movs	r2, #49	; 0x31
   138f8:	0018      	movs	r0, r3
   138fa:	4b8b      	ldr	r3, [pc, #556]	; (13b28 <vCommandConsoleTask+0x310>)
   138fc:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   138fe:	4b89      	ldr	r3, [pc, #548]	; (13b24 <vCommandConsoleTask+0x30c>)
   13900:	2231      	movs	r2, #49	; 0x31
   13902:	2100      	movs	r1, #0
   13904:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   13906:	4989      	ldr	r1, [pc, #548]	; (13b2c <vCommandConsoleTask+0x314>)
   13908:	4b85      	ldr	r3, [pc, #532]	; (13b20 <vCommandConsoleTask+0x308>)
   1390a:	2264      	movs	r2, #100	; 0x64
   1390c:	0018      	movs	r0, r3
   1390e:	4b88      	ldr	r3, [pc, #544]	; (13b30 <vCommandConsoleTask+0x318>)
   13910:	4798      	blx	r3
   13912:	0003      	movs	r3, r0
   13914:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   13916:	4b85      	ldr	r3, [pc, #532]	; (13b2c <vCommandConsoleTask+0x314>)
   13918:	2263      	movs	r2, #99	; 0x63
   1391a:	2100      	movs	r1, #0
   1391c:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   1391e:	4b83      	ldr	r3, [pc, #524]	; (13b2c <vCommandConsoleTask+0x314>)
   13920:	0018      	movs	r0, r3
   13922:	4b75      	ldr	r3, [pc, #468]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13924:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   13926:	693b      	ldr	r3, [r7, #16]
   13928:	2b00      	cmp	r3, #0
   1392a:	d1ec      	bne.n	13906 <vCommandConsoleTask+0xee>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   1392c:	2317      	movs	r3, #23
   1392e:	18fb      	adds	r3, r7, r3
   13930:	2200      	movs	r2, #0
   13932:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13934:	4b7a      	ldr	r3, [pc, #488]	; (13b20 <vCommandConsoleTask+0x308>)
   13936:	2232      	movs	r2, #50	; 0x32
   13938:	2100      	movs	r1, #0
   1393a:	0018      	movs	r0, r3
   1393c:	4b7d      	ldr	r3, [pc, #500]	; (13b34 <vCommandConsoleTask+0x31c>)
   1393e:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13940:	4b7a      	ldr	r3, [pc, #488]	; (13b2c <vCommandConsoleTask+0x314>)
   13942:	2264      	movs	r2, #100	; 0x64
   13944:	2100      	movs	r1, #0
   13946:	0018      	movs	r0, r3
   13948:	4b7a      	ldr	r3, [pc, #488]	; (13b34 <vCommandConsoleTask+0x31c>)
   1394a:	4798      	blx	r3
   1394c:	e0b5      	b.n	13aba <vCommandConsoleTask+0x2a2>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   1394e:	4b72      	ldr	r3, [pc, #456]	; (13b18 <vCommandConsoleTask+0x300>)
   13950:	781b      	ldrb	r3, [r3, #0]
   13952:	2b00      	cmp	r3, #0
   13954:	d059      	beq.n	13a0a <vCommandConsoleTask+0x1f2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   13956:	4b71      	ldr	r3, [pc, #452]	; (13b1c <vCommandConsoleTask+0x304>)
   13958:	781b      	ldrb	r3, [r3, #0]
   1395a:	2b03      	cmp	r3, #3
   1395c:	d80c      	bhi.n	13978 <vCommandConsoleTask+0x160>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   1395e:	4b6f      	ldr	r3, [pc, #444]	; (13b1c <vCommandConsoleTask+0x304>)
   13960:	781b      	ldrb	r3, [r3, #0]
   13962:	1c5a      	adds	r2, r3, #1
   13964:	b2d1      	uxtb	r1, r2
   13966:	4a6d      	ldr	r2, [pc, #436]	; (13b1c <vCommandConsoleTask+0x304>)
   13968:	7011      	strb	r1, [r2, #0]
   1396a:	001a      	movs	r2, r3
   1396c:	230c      	movs	r3, #12
   1396e:	18fb      	adds	r3, r7, r3
   13970:	7819      	ldrb	r1, [r3, #0]
   13972:	4b71      	ldr	r3, [pc, #452]	; (13b38 <vCommandConsoleTask+0x320>)
   13974:	5499      	strb	r1, [r3, r2]
   13976:	e005      	b.n	13984 <vCommandConsoleTask+0x16c>
                } else {
                    isEscapeCode = false;
   13978:	4b67      	ldr	r3, [pc, #412]	; (13b18 <vCommandConsoleTask+0x300>)
   1397a:	2200      	movs	r2, #0
   1397c:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1397e:	4b67      	ldr	r3, [pc, #412]	; (13b1c <vCommandConsoleTask+0x304>)
   13980:	2200      	movs	r2, #0
   13982:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   13984:	4b65      	ldr	r3, [pc, #404]	; (13b1c <vCommandConsoleTask+0x304>)
   13986:	781b      	ldrb	r3, [r3, #0]
   13988:	2b01      	cmp	r3, #1
   1398a:	d999      	bls.n	138c0 <vCommandConsoleTask+0xa8>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   1398c:	4a6b      	ldr	r2, [pc, #428]	; (13b3c <vCommandConsoleTask+0x324>)
   1398e:	4b6a      	ldr	r3, [pc, #424]	; (13b38 <vCommandConsoleTask+0x320>)
   13990:	0011      	movs	r1, r2
   13992:	0018      	movs	r0, r3
   13994:	4b6a      	ldr	r3, [pc, #424]	; (13b40 <vCommandConsoleTask+0x328>)
   13996:	4798      	blx	r3
   13998:	1e03      	subs	r3, r0, #0
   1399a:	d02f      	beq.n	139fc <vCommandConsoleTask+0x1e4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   1399c:	4969      	ldr	r1, [pc, #420]	; (13b44 <vCommandConsoleTask+0x32c>)
   1399e:	4b60      	ldr	r3, [pc, #384]	; (13b20 <vCommandConsoleTask+0x308>)
   139a0:	221b      	movs	r2, #27
   139a2:	0018      	movs	r0, r3
   139a4:	4b68      	ldr	r3, [pc, #416]	; (13b48 <vCommandConsoleTask+0x330>)
   139a6:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   139a8:	4b5d      	ldr	r3, [pc, #372]	; (13b20 <vCommandConsoleTask+0x308>)
   139aa:	0018      	movs	r0, r3
   139ac:	4b52      	ldr	r3, [pc, #328]	; (13af8 <vCommandConsoleTask+0x2e0>)
   139ae:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   139b0:	2317      	movs	r3, #23
   139b2:	18fb      	adds	r3, r7, r3
   139b4:	2200      	movs	r2, #0
   139b6:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   139b8:	4b59      	ldr	r3, [pc, #356]	; (13b20 <vCommandConsoleTask+0x308>)
   139ba:	2232      	movs	r2, #50	; 0x32
   139bc:	2100      	movs	r1, #0
   139be:	0018      	movs	r0, r3
   139c0:	4b5c      	ldr	r3, [pc, #368]	; (13b34 <vCommandConsoleTask+0x31c>)
   139c2:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   139c4:	4957      	ldr	r1, [pc, #348]	; (13b24 <vCommandConsoleTask+0x30c>)
   139c6:	4b56      	ldr	r3, [pc, #344]	; (13b20 <vCommandConsoleTask+0x308>)
   139c8:	2231      	movs	r2, #49	; 0x31
   139ca:	0018      	movs	r0, r3
   139cc:	4b56      	ldr	r3, [pc, #344]	; (13b28 <vCommandConsoleTask+0x310>)
   139ce:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   139d0:	4b53      	ldr	r3, [pc, #332]	; (13b20 <vCommandConsoleTask+0x308>)
   139d2:	0018      	movs	r0, r3
   139d4:	4b5d      	ldr	r3, [pc, #372]	; (13b4c <vCommandConsoleTask+0x334>)
   139d6:	4798      	blx	r3
   139d8:	0003      	movs	r3, r0
   139da:	2b30      	cmp	r3, #48	; 0x30
   139dc:	d806      	bhi.n	139ec <vCommandConsoleTask+0x1d4>
   139de:	4b51      	ldr	r3, [pc, #324]	; (13b24 <vCommandConsoleTask+0x30c>)
   139e0:	0018      	movs	r0, r3
   139e2:	4b5a      	ldr	r3, [pc, #360]	; (13b4c <vCommandConsoleTask+0x334>)
   139e4:	4798      	blx	r3
   139e6:	0003      	movs	r3, r0
   139e8:	b2da      	uxtb	r2, r3
   139ea:	e000      	b.n	139ee <vCommandConsoleTask+0x1d6>
   139ec:	2231      	movs	r2, #49	; 0x31
   139ee:	2317      	movs	r3, #23
   139f0:	18fb      	adds	r3, r7, r3
   139f2:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   139f4:	4b4a      	ldr	r3, [pc, #296]	; (13b20 <vCommandConsoleTask+0x308>)
   139f6:	0018      	movs	r0, r3
   139f8:	4b3f      	ldr	r3, [pc, #252]	; (13af8 <vCommandConsoleTask+0x2e0>)
   139fa:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   139fc:	4b46      	ldr	r3, [pc, #280]	; (13b18 <vCommandConsoleTask+0x300>)
   139fe:	2200      	movs	r2, #0
   13a00:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13a02:	4b46      	ldr	r3, [pc, #280]	; (13b1c <vCommandConsoleTask+0x304>)
   13a04:	2200      	movs	r2, #0
   13a06:	701a      	strb	r2, [r3, #0]
   13a08:	e75a      	b.n	138c0 <vCommandConsoleTask+0xa8>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   13a0a:	230c      	movs	r3, #12
   13a0c:	18fb      	adds	r3, r7, r3
   13a0e:	781b      	ldrb	r3, [r3, #0]
   13a10:	2b0d      	cmp	r3, #13
   13a12:	d100      	bne.n	13a16 <vCommandConsoleTask+0x1fe>
   13a14:	e754      	b.n	138c0 <vCommandConsoleTask+0xa8>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a16:	230c      	movs	r3, #12
   13a18:	18fb      	adds	r3, r7, r3
   13a1a:	781b      	ldrb	r3, [r3, #0]
   13a1c:	2b08      	cmp	r3, #8
   13a1e:	d004      	beq.n	13a2a <vCommandConsoleTask+0x212>
   13a20:	230c      	movs	r3, #12
   13a22:	18fb      	adds	r3, r7, r3
   13a24:	781b      	ldrb	r3, [r3, #0]
   13a26:	2b7f      	cmp	r3, #127	; 0x7f
   13a28:	d11c      	bne.n	13a64 <vCommandConsoleTask+0x24c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13a2a:	2308      	movs	r3, #8
   13a2c:	18fb      	adds	r3, r7, r3
   13a2e:	4a48      	ldr	r2, [pc, #288]	; (13b50 <vCommandConsoleTask+0x338>)
   13a30:	6812      	ldr	r2, [r2, #0]
   13a32:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13a34:	2308      	movs	r3, #8
   13a36:	18fb      	adds	r3, r7, r3
   13a38:	0018      	movs	r0, r3
   13a3a:	4b2f      	ldr	r3, [pc, #188]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13a3c:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13a3e:	2317      	movs	r3, #23
   13a40:	18fb      	adds	r3, r7, r3
   13a42:	781b      	ldrb	r3, [r3, #0]
   13a44:	2b00      	cmp	r3, #0
   13a46:	d037      	beq.n	13ab8 <vCommandConsoleTask+0x2a0>
                    cInputIndex--;
   13a48:	2317      	movs	r3, #23
   13a4a:	18fb      	adds	r3, r7, r3
   13a4c:	781a      	ldrb	r2, [r3, #0]
   13a4e:	2317      	movs	r3, #23
   13a50:	18fb      	adds	r3, r7, r3
   13a52:	3a01      	subs	r2, #1
   13a54:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13a56:	2317      	movs	r3, #23
   13a58:	18fb      	adds	r3, r7, r3
   13a5a:	781b      	ldrb	r3, [r3, #0]
   13a5c:	4a30      	ldr	r2, [pc, #192]	; (13b20 <vCommandConsoleTask+0x308>)
   13a5e:	2100      	movs	r1, #0
   13a60:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a62:	e029      	b.n	13ab8 <vCommandConsoleTask+0x2a0>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13a64:	230c      	movs	r3, #12
   13a66:	18fb      	adds	r3, r7, r3
   13a68:	781b      	ldrb	r3, [r3, #0]
   13a6a:	2b1b      	cmp	r3, #27
   13a6c:	d106      	bne.n	13a7c <vCommandConsoleTask+0x264>
                isEscapeCode = true;  // Next characters will be code arguments
   13a6e:	4b2a      	ldr	r3, [pc, #168]	; (13b18 <vCommandConsoleTask+0x300>)
   13a70:	2201      	movs	r2, #1
   13a72:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   13a74:	4b29      	ldr	r3, [pc, #164]	; (13b1c <vCommandConsoleTask+0x304>)
   13a76:	2200      	movs	r2, #0
   13a78:	701a      	strb	r2, [r3, #0]
   13a7a:	e721      	b.n	138c0 <vCommandConsoleTask+0xa8>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13a7c:	2317      	movs	r3, #23
   13a7e:	18fb      	adds	r3, r7, r3
   13a80:	781b      	ldrb	r3, [r3, #0]
   13a82:	2b31      	cmp	r3, #49	; 0x31
   13a84:	d80e      	bhi.n	13aa4 <vCommandConsoleTask+0x28c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   13a86:	2317      	movs	r3, #23
   13a88:	18fb      	adds	r3, r7, r3
   13a8a:	781b      	ldrb	r3, [r3, #0]
   13a8c:	220c      	movs	r2, #12
   13a8e:	18ba      	adds	r2, r7, r2
   13a90:	7811      	ldrb	r1, [r2, #0]
   13a92:	4a23      	ldr	r2, [pc, #140]	; (13b20 <vCommandConsoleTask+0x308>)
   13a94:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13a96:	2317      	movs	r3, #23
   13a98:	18fb      	adds	r3, r7, r3
   13a9a:	781a      	ldrb	r2, [r3, #0]
   13a9c:	2317      	movs	r3, #23
   13a9e:	18fb      	adds	r3, r7, r3
   13aa0:	3201      	adds	r2, #1
   13aa2:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13aa4:	230c      	movs	r3, #12
   13aa6:	18fb      	adds	r3, r7, r3
   13aa8:	2200      	movs	r2, #0
   13aaa:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13aac:	230c      	movs	r3, #12
   13aae:	18fb      	adds	r3, r7, r3
   13ab0:	0018      	movs	r0, r3
   13ab2:	4b11      	ldr	r3, [pc, #68]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13ab4:	4798      	blx	r3
   13ab6:	e703      	b.n	138c0 <vCommandConsoleTask+0xa8>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13ab8:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13aba:	e701      	b.n	138c0 <vCommandConsoleTask+0xa8>
   13abc:	000370b8 	.word	0x000370b8
   13ac0:	00018909 	.word	0x00018909
   13ac4:	000370a8 	.word	0x000370a8
   13ac8:	00037168 	.word	0x00037168
   13acc:	000370c8 	.word	0x000370c8
   13ad0:	000370d8 	.word	0x000370d8
   13ad4:	000370e8 	.word	0x000370e8
   13ad8:	000370f8 	.word	0x000370f8
   13adc:	00037108 	.word	0x00037108
   13ae0:	00037128 	.word	0x00037128
   13ae4:	00037118 	.word	0x00037118
   13ae8:	00037138 	.word	0x00037138
   13aec:	00037148 	.word	0x00037148
   13af0:	00037158 	.word	0x00037158
   13af4:	00036c80 	.word	0x00036c80
   13af8:	0001e835 	.word	0x0001e835
   13afc:	0001aed5 	.word	0x0001aed5
   13b00:	200047e0 	.word	0x200047e0
   13b04:	00036f0c 	.word	0x00036f0c
   13b08:	0001e921 	.word	0x0001e921
   13b0c:	0001ccc1 	.word	0x0001ccc1
   13b10:	00013b55 	.word	0x00013b55
   13b14:	00036f2c 	.word	0x00036f2c
   13b18:	20000514 	.word	0x20000514
   13b1c:	20000515 	.word	0x20000515
   13b20:	2000054c 	.word	0x2000054c
   13b24:	20000518 	.word	0x20000518
   13b28:	000359f7 	.word	0x000359f7
   13b2c:	20000580 	.word	0x20000580
   13b30:	00018979 	.word	0x00018979
   13b34:	0003560f 	.word	0x0003560f
   13b38:	200005e4 	.word	0x200005e4
   13b3c:	00036f30 	.word	0x00036f30
   13b40:	00035911 	.word	0x00035911
   13b44:	00036f34 	.word	0x00036f34
   13b48:	000358cd 	.word	0x000358cd
   13b4c:	000359c7 	.word	0x000359c7
   13b50:	00036f3c 	.word	0x00036f3c

00013b54 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13b54:	b580      	push	{r7, lr}
   13b56:	b084      	sub	sp, #16
   13b58:	af00      	add	r7, sp, #0
   13b5a:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b5c:	687b      	ldr	r3, [r7, #4]
   13b5e:	0018      	movs	r0, r3
   13b60:	4b0c      	ldr	r3, [pc, #48]	; (13b94 <FreeRTOS_read+0x40>)
   13b62:	4798      	blx	r3
   13b64:	0003      	movs	r3, r0
   13b66:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13b68:	e00d      	b.n	13b86 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13b6a:	4b0b      	ldr	r3, [pc, #44]	; (13b98 <FreeRTOS_read+0x44>)
   13b6c:	681a      	ldr	r2, [r3, #0]
   13b6e:	2301      	movs	r3, #1
   13b70:	425b      	negs	r3, r3
   13b72:	0019      	movs	r1, r3
   13b74:	0010      	movs	r0, r2
   13b76:	4b09      	ldr	r3, [pc, #36]	; (13b9c <FreeRTOS_read+0x48>)
   13b78:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b7a:	687b      	ldr	r3, [r7, #4]
   13b7c:	0018      	movs	r0, r3
   13b7e:	4b05      	ldr	r3, [pc, #20]	; (13b94 <FreeRTOS_read+0x40>)
   13b80:	4798      	blx	r3
   13b82:	0003      	movs	r3, r0
   13b84:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13b86:	68fb      	ldr	r3, [r7, #12]
   13b88:	3301      	adds	r3, #1
   13b8a:	d0ee      	beq.n	13b6a <FreeRTOS_read+0x16>
    }
}
   13b8c:	46c0      	nop			; (mov r8, r8)
   13b8e:	46bd      	mov	sp, r7
   13b90:	b004      	add	sp, #16
   13b92:	bd80      	pop	{r7, pc}
   13b94:	0001e8d1 	.word	0x0001e8d1
   13b98:	200047e0 	.word	0x200047e0
   13b9c:	0001be8d 	.word	0x0001be8d

00013ba0 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13ba0:	b580      	push	{r7, lr}
   13ba2:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13ba4:	4b0a      	ldr	r3, [pc, #40]	; (13bd0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13ba6:	2200      	movs	r2, #0
   13ba8:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13baa:	4b0a      	ldr	r3, [pc, #40]	; (13bd4 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13bac:	681b      	ldr	r3, [r3, #0]
   13bae:	4a08      	ldr	r2, [pc, #32]	; (13bd0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13bb0:	0011      	movs	r1, r2
   13bb2:	0018      	movs	r0, r3
   13bb4:	4b08      	ldr	r3, [pc, #32]	; (13bd8 <CliCharReadySemaphoreGiveFromISR+0x38>)
   13bb6:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13bb8:	4b05      	ldr	r3, [pc, #20]	; (13bd0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13bba:	681b      	ldr	r3, [r3, #0]
   13bbc:	2b00      	cmp	r3, #0
   13bbe:	d003      	beq.n	13bc8 <CliCharReadySemaphoreGiveFromISR+0x28>
   13bc0:	4b06      	ldr	r3, [pc, #24]	; (13bdc <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13bc2:	2280      	movs	r2, #128	; 0x80
   13bc4:	0552      	lsls	r2, r2, #21
   13bc6:	601a      	str	r2, [r3, #0]
}
   13bc8:	46c0      	nop			; (mov r8, r8)
   13bca:	46bd      	mov	sp, r7
   13bcc:	bd80      	pop	{r7, pc}
   13bce:	46c0      	nop			; (mov r8, r8)
   13bd0:	200005e8 	.word	0x200005e8
   13bd4:	200047e0 	.word	0x200047e0
   13bd8:	0001b805 	.word	0x0001b805
   13bdc:	e000ed04 	.word	0xe000ed04

00013be0 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13be0:	b5b0      	push	{r4, r5, r7, lr}
   13be2:	b088      	sub	sp, #32
   13be4:	af02      	add	r7, sp, #8
   13be6:	60f8      	str	r0, [r7, #12]
   13be8:	60b9      	str	r1, [r7, #8]
   13bea:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   13bec:	4b2e      	ldr	r3, [pc, #184]	; (13ca8 <CLI_GetImuData+0xc8>)
   13bee:	4798      	blx	r3
   13bf0:	0003      	movs	r3, r0
   13bf2:	617b      	str	r3, [r7, #20]

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   13bf4:	2313      	movs	r3, #19
   13bf6:	18fa      	adds	r2, r7, r3
   13bf8:	697b      	ldr	r3, [r7, #20]
   13bfa:	0011      	movs	r1, r2
   13bfc:	0018      	movs	r0, r3
   13bfe:	4b2b      	ldr	r3, [pc, #172]	; (13cac <CLI_GetImuData+0xcc>)
   13c00:	4798      	blx	r3

    if (reg) {
   13c02:	2313      	movs	r3, #19
   13c04:	18fb      	adds	r3, r7, r3
   13c06:	781b      	ldrb	r3, [r3, #0]
   13c08:	2b00      	cmp	r3, #0
   13c0a:	d041      	beq.n	13c90 <CLI_GetImuData+0xb0>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   13c0c:	4b28      	ldr	r3, [pc, #160]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c0e:	2206      	movs	r2, #6
   13c10:	2100      	movs	r1, #0
   13c12:	0018      	movs	r0, r3
   13c14:	4b27      	ldr	r3, [pc, #156]	; (13cb4 <CLI_GetImuData+0xd4>)
   13c16:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13c18:	4a25      	ldr	r2, [pc, #148]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c1a:	697b      	ldr	r3, [r7, #20]
   13c1c:	0011      	movs	r1, r2
   13c1e:	0018      	movs	r0, r3
   13c20:	4b25      	ldr	r3, [pc, #148]	; (13cb8 <CLI_GetImuData+0xd8>)
   13c22:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   13c24:	4b22      	ldr	r3, [pc, #136]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c26:	2200      	movs	r2, #0
   13c28:	5e9b      	ldrsh	r3, [r3, r2]
   13c2a:	0018      	movs	r0, r3
   13c2c:	4b23      	ldr	r3, [pc, #140]	; (13cbc <CLI_GetImuData+0xdc>)
   13c2e:	4798      	blx	r3
   13c30:	1c02      	adds	r2, r0, #0
   13c32:	4b23      	ldr	r3, [pc, #140]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c34:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   13c36:	4b1e      	ldr	r3, [pc, #120]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c38:	2202      	movs	r2, #2
   13c3a:	5e9b      	ldrsh	r3, [r3, r2]
   13c3c:	0018      	movs	r0, r3
   13c3e:	4b1f      	ldr	r3, [pc, #124]	; (13cbc <CLI_GetImuData+0xdc>)
   13c40:	4798      	blx	r3
   13c42:	1c02      	adds	r2, r0, #0
   13c44:	4b1e      	ldr	r3, [pc, #120]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c46:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13c48:	4b19      	ldr	r3, [pc, #100]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c4a:	2204      	movs	r2, #4
   13c4c:	5e9b      	ldrsh	r3, [r3, r2]
   13c4e:	0018      	movs	r0, r3
   13c50:	4b1a      	ldr	r3, [pc, #104]	; (13cbc <CLI_GetImuData+0xdc>)
   13c52:	4798      	blx	r3
   13c54:	1c02      	adds	r2, r0, #0
   13c56:	4b1a      	ldr	r3, [pc, #104]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c58:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   13c5a:	4b19      	ldr	r3, [pc, #100]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c5c:	681a      	ldr	r2, [r3, #0]
   13c5e:	4b19      	ldr	r3, [pc, #100]	; (13cc4 <CLI_GetImuData+0xe4>)
   13c60:	1c10      	adds	r0, r2, #0
   13c62:	4798      	blx	r3
   13c64:	0005      	movs	r5, r0
   13c66:	4b16      	ldr	r3, [pc, #88]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c68:	685a      	ldr	r2, [r3, #4]
   13c6a:	4b16      	ldr	r3, [pc, #88]	; (13cc4 <CLI_GetImuData+0xe4>)
   13c6c:	1c10      	adds	r0, r2, #0
   13c6e:	4798      	blx	r3
   13c70:	0004      	movs	r4, r0
   13c72:	4b13      	ldr	r3, [pc, #76]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c74:	689a      	ldr	r2, [r3, #8]
   13c76:	4b13      	ldr	r3, [pc, #76]	; (13cc4 <CLI_GetImuData+0xe4>)
   13c78:	1c10      	adds	r0, r2, #0
   13c7a:	4798      	blx	r3
   13c7c:	0003      	movs	r3, r0
   13c7e:	4a12      	ldr	r2, [pc, #72]	; (13cc8 <CLI_GetImuData+0xe8>)
   13c80:	68b9      	ldr	r1, [r7, #8]
   13c82:	68f8      	ldr	r0, [r7, #12]
   13c84:	9301      	str	r3, [sp, #4]
   13c86:	9400      	str	r4, [sp, #0]
   13c88:	002b      	movs	r3, r5
   13c8a:	4c10      	ldr	r4, [pc, #64]	; (13ccc <CLI_GetImuData+0xec>)
   13c8c:	47a0      	blx	r4
   13c8e:	e005      	b.n	13c9c <CLI_GetImuData+0xbc>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! \r\n");
   13c90:	4a0f      	ldr	r2, [pc, #60]	; (13cd0 <CLI_GetImuData+0xf0>)
   13c92:	68b9      	ldr	r1, [r7, #8]
   13c94:	68fb      	ldr	r3, [r7, #12]
   13c96:	0018      	movs	r0, r3
   13c98:	4b0c      	ldr	r3, [pc, #48]	; (13ccc <CLI_GetImuData+0xec>)
   13c9a:	4798      	blx	r3
    }
    return pdFALSE;
   13c9c:	2300      	movs	r3, #0
}
   13c9e:	0018      	movs	r0, r3
   13ca0:	46bd      	mov	sp, r7
   13ca2:	b006      	add	sp, #24
   13ca4:	bdb0      	pop	{r4, r5, r7, pc}
   13ca6:	46c0      	nop			; (mov r8, r8)
   13ca8:	000159bd 	.word	0x000159bd
   13cac:	00015469 	.word	0x00015469
   13cb0:	200005ec 	.word	0x200005ec
   13cb4:	0003560f 	.word	0x0003560f
   13cb8:	000154a5 	.word	0x000154a5
   13cbc:	00014cf9 	.word	0x00014cf9
   13cc0:	200005f4 	.word	0x200005f4
   13cc4:	00033bb5 	.word	0x00033bb5
   13cc8:	00036f40 	.word	0x00036f40
   13ccc:	00035869 	.word	0x00035869
   13cd0:	00036f64 	.word	0x00036f64

00013cd4 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13cd4:	b590      	push	{r4, r7, lr}
   13cd6:	b087      	sub	sp, #28
   13cd8:	af00      	add	r7, sp, #0
   13cda:	60f8      	str	r0, [r7, #12]
   13cdc:	60b9      	str	r1, [r7, #8]
   13cde:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13ce0:	2317      	movs	r3, #23
   13ce2:	18fb      	adds	r3, r7, r3
   13ce4:	221b      	movs	r2, #27
   13ce6:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13ce8:	2317      	movs	r3, #23
   13cea:	18fb      	adds	r3, r7, r3
   13cec:	781b      	ldrb	r3, [r3, #0]
   13cee:	4a08      	ldr	r2, [pc, #32]	; (13d10 <xCliClearTerminalScreen+0x3c>)
   13cf0:	4808      	ldr	r0, [pc, #32]	; (13d14 <xCliClearTerminalScreen+0x40>)
   13cf2:	210f      	movs	r1, #15
   13cf4:	4c08      	ldr	r4, [pc, #32]	; (13d18 <xCliClearTerminalScreen+0x44>)
   13cf6:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13cf8:	4a06      	ldr	r2, [pc, #24]	; (13d14 <xCliClearTerminalScreen+0x40>)
   13cfa:	68b9      	ldr	r1, [r7, #8]
   13cfc:	68fb      	ldr	r3, [r7, #12]
   13cfe:	0018      	movs	r0, r3
   13d00:	4b05      	ldr	r3, [pc, #20]	; (13d18 <xCliClearTerminalScreen+0x44>)
   13d02:	4798      	blx	r3
    return pdFALSE;
   13d04:	2300      	movs	r3, #0
}
   13d06:	0018      	movs	r0, r3
   13d08:	46bd      	mov	sp, r7
   13d0a:	b007      	add	sp, #28
   13d0c:	bd90      	pop	{r4, r7, pc}
   13d0e:	46c0      	nop			; (mov r8, r8)
   13d10:	00036f78 	.word	0x00036f78
   13d14:	20000504 	.word	0x20000504
   13d18:	00035869 	.word	0x00035869

00013d1c <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d1c:	b580      	push	{r7, lr}
   13d1e:	b084      	sub	sp, #16
   13d20:	af00      	add	r7, sp, #0
   13d22:	60f8      	str	r0, [r7, #12]
   13d24:	60b9      	str	r1, [r7, #8]
   13d26:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13d28:	2002      	movs	r0, #2
   13d2a:	4b03      	ldr	r3, [pc, #12]	; (13d38 <CLI_OTAU+0x1c>)
   13d2c:	4798      	blx	r3

    return pdFALSE;
   13d2e:	2300      	movs	r3, #0
}
   13d30:	0018      	movs	r0, r3
   13d32:	46bd      	mov	sp, r7
   13d34:	b004      	add	sp, #16
   13d36:	bd80      	pop	{r7, pc}
   13d38:	00017eed 	.word	0x00017eed

00013d3c <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d3c:	b580      	push	{r7, lr}
   13d3e:	b084      	sub	sp, #16
   13d40:	af00      	add	r7, sp, #0
   13d42:	60f8      	str	r0, [r7, #12]
   13d44:	60b9      	str	r1, [r7, #8]
   13d46:	607a      	str	r2, [r7, #4]
    system_reset();
   13d48:	4b03      	ldr	r3, [pc, #12]	; (13d58 <CLI_ResetDevice+0x1c>)
   13d4a:	4798      	blx	r3
    return pdFALSE;
   13d4c:	2300      	movs	r3, #0
}
   13d4e:	0018      	movs	r0, r3
   13d50:	46bd      	mov	sp, r7
   13d52:	b004      	add	sp, #16
   13d54:	bd80      	pop	{r7, pc}
   13d56:	46c0      	nop			; (mov r8, r8)
   13d58:	00013805 	.word	0x00013805

00013d5c <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d5c:	b580      	push	{r7, lr}
   13d5e:	b084      	sub	sp, #16
   13d60:	af00      	add	r7, sp, #0
   13d62:	60f8      	str	r0, [r7, #12]
   13d64:	60b9      	str	r1, [r7, #8]
   13d66:	607a      	str	r2, [r7, #4]
    snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Students to fill out!");
   13d68:	4a05      	ldr	r2, [pc, #20]	; (13d80 <CLI_NeotrellisSetLed+0x24>)
   13d6a:	68b9      	ldr	r1, [r7, #8]
   13d6c:	68fb      	ldr	r3, [r7, #12]
   13d6e:	0018      	movs	r0, r3
   13d70:	4b04      	ldr	r3, [pc, #16]	; (13d84 <CLI_NeotrellisSetLed+0x28>)
   13d72:	4798      	blx	r3
    // Check code SeesawSetLed and SeesawSetLed
    // How do you get parameters? Checl link in comments!
    // Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
    // return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
    // This function expects 4 arguments inside pcCommandString: key, R, G, B.
    return pdFALSE;
   13d74:	2300      	movs	r3, #0
}
   13d76:	0018      	movs	r0, r3
   13d78:	46bd      	mov	sp, r7
   13d7a:	b004      	add	sp, #16
   13d7c:	bd80      	pop	{r7, pc}
   13d7e:	46c0      	nop			; (mov r8, r8)
   13d80:	00036f80 	.word	0x00036f80
   13d84:	00035869 	.word	0x00035869

00013d88 <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d88:	b590      	push	{r4, r7, lr}
   13d8a:	b099      	sub	sp, #100	; 0x64
   13d8c:	af00      	add	r7, sp, #0
   13d8e:	60f8      	str	r0, [r7, #12]
   13d90:	60b9      	str	r1, [r7, #8]
   13d92:	607a      	str	r2, [r7, #4]
    // snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
    // Print to pcWriteBuffer in order.
    // If the string is too long to print, print what you can.
    // The function you write will be useful in the future.
    uint8_t buffer[64];
    uint8_t count = SeesawGetKeypadCount();
   13d94:	235f      	movs	r3, #95	; 0x5f
   13d96:	18fc      	adds	r4, r7, r3
   13d98:	4b36      	ldr	r3, [pc, #216]	; (13e74 <CLI_NeotrellProcessButtonBuffer+0xec>)
   13d9a:	4798      	blx	r3
   13d9c:	0003      	movs	r3, r0
   13d9e:	7023      	strb	r3, [r4, #0]
    if (count >= 1) {
   13da0:	235f      	movs	r3, #95	; 0x5f
   13da2:	18fb      	adds	r3, r7, r3
   13da4:	781b      	ldrb	r3, [r3, #0]
   13da6:	2b00      	cmp	r3, #0
   13da8:	d05d      	beq.n	13e66 <CLI_NeotrellProcessButtonBuffer+0xde>
        int32_t res = SeesawReadKeypad(buffer, 1);
   13daa:	2310      	movs	r3, #16
   13dac:	18fb      	adds	r3, r7, r3
   13dae:	2101      	movs	r1, #1
   13db0:	0018      	movs	r0, r3
   13db2:	4b31      	ldr	r3, [pc, #196]	; (13e78 <CLI_NeotrellProcessButtonBuffer+0xf0>)
   13db4:	4798      	blx	r3
   13db6:	0003      	movs	r3, r0
   13db8:	65bb      	str	r3, [r7, #88]	; 0x58
        if (res == 0) {
   13dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13dbc:	2b00      	cmp	r3, #0
   13dbe:	d150      	bne.n	13e62 <CLI_NeotrellProcessButtonBuffer+0xda>
            uint8_t pos, press;
            press = buffer[0] & 0x3;
   13dc0:	2310      	movs	r3, #16
   13dc2:	18fb      	adds	r3, r7, r3
   13dc4:	781a      	ldrb	r2, [r3, #0]
   13dc6:	2357      	movs	r3, #87	; 0x57
   13dc8:	18fb      	adds	r3, r7, r3
   13dca:	2103      	movs	r1, #3
   13dcc:	400a      	ands	r2, r1
   13dce:	701a      	strb	r2, [r3, #0]
            pos = buffer[0] >> 2;
   13dd0:	2310      	movs	r3, #16
   13dd2:	18fb      	adds	r3, r7, r3
   13dd4:	781a      	ldrb	r2, [r3, #0]
   13dd6:	2356      	movs	r3, #86	; 0x56
   13dd8:	18fb      	adds	r3, r7, r3
   13dda:	0892      	lsrs	r2, r2, #2
   13ddc:	701a      	strb	r2, [r3, #0]
            int num = NEO_TRELLIS_SEESAW_KEY(pos);
   13dde:	2356      	movs	r3, #86	; 0x56
   13de0:	18fb      	adds	r3, r7, r3
   13de2:	781b      	ldrb	r3, [r3, #0]
   13de4:	08db      	lsrs	r3, r3, #3
   13de6:	b2db      	uxtb	r3, r3
   13de8:	009a      	lsls	r2, r3, #2
   13dea:	2356      	movs	r3, #86	; 0x56
   13dec:	18fb      	adds	r3, r7, r3
   13dee:	781b      	ldrb	r3, [r3, #0]
   13df0:	2107      	movs	r1, #7
   13df2:	400b      	ands	r3, r1
   13df4:	18d3      	adds	r3, r2, r3
   13df6:	653b      	str	r3, [r7, #80]	; 0x50
            if (press == 0x2) {
   13df8:	2357      	movs	r3, #87	; 0x57
   13dfa:	18fb      	adds	r3, r7, r3
   13dfc:	781b      	ldrb	r3, [r3, #0]
   13dfe:	2b02      	cmp	r3, #2
   13e00:	d115      	bne.n	13e2e <CLI_NeotrellProcessButtonBuffer+0xa6>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   13e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e04:	2b00      	cmp	r3, #0
   13e06:	da00      	bge.n	13e0a <CLI_NeotrellProcessButtonBuffer+0x82>
   13e08:	3307      	adds	r3, #7
   13e0a:	10db      	asrs	r3, r3, #3
   13e0c:	009a      	lsls	r2, r3, #2
   13e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e10:	491a      	ldr	r1, [pc, #104]	; (13e7c <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13e12:	400b      	ands	r3, r1
   13e14:	d504      	bpl.n	13e20 <CLI_NeotrellProcessButtonBuffer+0x98>
   13e16:	3b01      	subs	r3, #1
   13e18:	2108      	movs	r1, #8
   13e1a:	4249      	negs	r1, r1
   13e1c:	430b      	orrs	r3, r1
   13e1e:	3301      	adds	r3, #1
   13e20:	18d3      	adds	r3, r2, r3
   13e22:	4a17      	ldr	r2, [pc, #92]	; (13e80 <CLI_NeotrellProcessButtonBuffer+0xf8>)
   13e24:	68b9      	ldr	r1, [r7, #8]
   13e26:	68f8      	ldr	r0, [r7, #12]
   13e28:	4c16      	ldr	r4, [pc, #88]	; (13e84 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13e2a:	47a0      	blx	r4
   13e2c:	e019      	b.n	13e62 <CLI_NeotrellProcessButtonBuffer+0xda>
            } else if (press == 0x3) {
   13e2e:	2357      	movs	r3, #87	; 0x57
   13e30:	18fb      	adds	r3, r7, r3
   13e32:	781b      	ldrb	r3, [r3, #0]
   13e34:	2b03      	cmp	r3, #3
   13e36:	d114      	bne.n	13e62 <CLI_NeotrellProcessButtonBuffer+0xda>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   13e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e3a:	2b00      	cmp	r3, #0
   13e3c:	da00      	bge.n	13e40 <CLI_NeotrellProcessButtonBuffer+0xb8>
   13e3e:	3307      	adds	r3, #7
   13e40:	10db      	asrs	r3, r3, #3
   13e42:	009a      	lsls	r2, r3, #2
   13e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e46:	490d      	ldr	r1, [pc, #52]	; (13e7c <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13e48:	400b      	ands	r3, r1
   13e4a:	d504      	bpl.n	13e56 <CLI_NeotrellProcessButtonBuffer+0xce>
   13e4c:	3b01      	subs	r3, #1
   13e4e:	2108      	movs	r1, #8
   13e50:	4249      	negs	r1, r1
   13e52:	430b      	orrs	r3, r1
   13e54:	3301      	adds	r3, #1
   13e56:	18d3      	adds	r3, r2, r3
   13e58:	4a0b      	ldr	r2, [pc, #44]	; (13e88 <CLI_NeotrellProcessButtonBuffer+0x100>)
   13e5a:	68b9      	ldr	r1, [r7, #8]
   13e5c:	68f8      	ldr	r0, [r7, #12]
   13e5e:	4c09      	ldr	r4, [pc, #36]	; (13e84 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13e60:	47a0      	blx	r4
            }
        }
        return pdTRUE;
   13e62:	2301      	movs	r3, #1
   13e64:	e002      	b.n	13e6c <CLI_NeotrellProcessButtonBuffer+0xe4>
    } else {
        pcWriteBuffer = 0;
   13e66:	2300      	movs	r3, #0
   13e68:	60fb      	str	r3, [r7, #12]
        return pdFALSE;
   13e6a:	2300      	movs	r3, #0
    }
}
   13e6c:	0018      	movs	r0, r3
   13e6e:	46bd      	mov	sp, r7
   13e70:	b019      	add	sp, #100	; 0x64
   13e72:	bd90      	pop	{r4, r7, pc}
   13e74:	00015f61 	.word	0x00015f61
   13e78:	00015fc9 	.word	0x00015fc9
   13e7c:	80000007 	.word	0x80000007
   13e80:	00036f98 	.word	0x00036f98
   13e84:	00035869 	.word	0x00035869
   13e88:	00036fb4 	.word	0x00036fb4

00013e8c <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13e8c:	b590      	push	{r4, r7, lr}
   13e8e:	b087      	sub	sp, #28
   13e90:	af00      	add	r7, sp, #0
   13e92:	60f8      	str	r0, [r7, #12]
   13e94:	60b9      	str	r1, [r7, #8]
   13e96:	607a      	str	r2, [r7, #4]
    uint16_t distance = 0;
   13e98:	2312      	movs	r3, #18
   13e9a:	18fb      	adds	r3, r7, r3
   13e9c:	2200      	movs	r2, #0
   13e9e:	801a      	strh	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
   13ea0:	2312      	movs	r3, #18
   13ea2:	18fb      	adds	r3, r7, r3
   13ea4:	2164      	movs	r1, #100	; 0x64
   13ea6:	0018      	movs	r0, r3
   13ea8:	4b19      	ldr	r3, [pc, #100]	; (13f10 <CLI_DistanceSensorGetDistance+0x84>)
   13eaa:	4798      	blx	r3
   13eac:	0003      	movs	r3, r0
   13eae:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   13eb0:	697b      	ldr	r3, [r7, #20]
   13eb2:	2b00      	cmp	r3, #0
   13eb4:	d006      	beq.n	13ec4 <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   13eb6:	697b      	ldr	r3, [r7, #20]
   13eb8:	4a16      	ldr	r2, [pc, #88]	; (13f14 <CLI_DistanceSensorGetDistance+0x88>)
   13eba:	68b9      	ldr	r1, [r7, #8]
   13ebc:	68f8      	ldr	r0, [r7, #12]
   13ebe:	4c16      	ldr	r4, [pc, #88]	; (13f18 <CLI_DistanceSensorGetDistance+0x8c>)
   13ec0:	47a0      	blx	r4
   13ec2:	e007      	b.n	13ed4 <CLI_DistanceSensorGetDistance+0x48>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
   13ec4:	2312      	movs	r3, #18
   13ec6:	18fb      	adds	r3, r7, r3
   13ec8:	881b      	ldrh	r3, [r3, #0]
   13eca:	4a14      	ldr	r2, [pc, #80]	; (13f1c <CLI_DistanceSensorGetDistance+0x90>)
   13ecc:	68b9      	ldr	r1, [r7, #8]
   13ece:	68f8      	ldr	r0, [r7, #12]
   13ed0:	4c11      	ldr	r4, [pc, #68]	; (13f18 <CLI_DistanceSensorGetDistance+0x8c>)
   13ed2:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
   13ed4:	2312      	movs	r3, #18
   13ed6:	18fb      	adds	r3, r7, r3
   13ed8:	0018      	movs	r0, r3
   13eda:	4b11      	ldr	r3, [pc, #68]	; (13f20 <CLI_DistanceSensorGetDistance+0x94>)
   13edc:	4798      	blx	r3
   13ede:	0003      	movs	r3, r0
   13ee0:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   13ee2:	697b      	ldr	r3, [r7, #20]
   13ee4:	2b01      	cmp	r3, #1
   13ee6:	d10e      	bne.n	13f06 <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   13ee8:	68fb      	ldr	r3, [r7, #12]
   13eea:	0018      	movs	r0, r3
   13eec:	4b0d      	ldr	r3, [pc, #52]	; (13f24 <CLI_DistanceSensorGetDistance+0x98>)
   13eee:	4798      	blx	r3
   13ef0:	0003      	movs	r3, r0
   13ef2:	001a      	movs	r2, r3
   13ef4:	68fb      	ldr	r3, [r7, #12]
   13ef6:	189a      	adds	r2, r3, r2
   13ef8:	4b0b      	ldr	r3, [pc, #44]	; (13f28 <CLI_DistanceSensorGetDistance+0x9c>)
   13efa:	0010      	movs	r0, r2
   13efc:	0019      	movs	r1, r3
   13efe:	231a      	movs	r3, #26
   13f00:	001a      	movs	r2, r3
   13f02:	4b0a      	ldr	r3, [pc, #40]	; (13f2c <CLI_DistanceSensorGetDistance+0xa0>)
   13f04:	4798      	blx	r3
    }
    return pdFALSE;
   13f06:	2300      	movs	r3, #0
}
   13f08:	0018      	movs	r0, r3
   13f0a:	46bd      	mov	sp, r7
   13f0c:	b007      	add	sp, #28
   13f0e:	bd90      	pop	{r4, r7, pc}
   13f10:	0001434d 	.word	0x0001434d
   13f14:	00036fcc 	.word	0x00036fcc
   13f18:	00035869 	.word	0x00035869
   13f1c:	00036fe0 	.word	0x00036fe0
   13f20:	00017f21 	.word	0x00017f21
   13f24:	000359c7 	.word	0x000359c7
   13f28:	00036ff4 	.word	0x00036ff4
   13f2c:	000355d9 	.word	0x000355d9

00013f30 <CLI_SendDummyGameData>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_SendDummyGameData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13f30:	b580      	push	{r7, lr}
   13f32:	b08a      	sub	sp, #40	; 0x28
   13f34:	af00      	add	r7, sp, #0
   13f36:	60f8      	str	r0, [r7, #12]
   13f38:	60b9      	str	r1, [r7, #8]
   13f3a:	607a      	str	r2, [r7, #4]
    struct GameDataPacket gamevar;

    gamevar.game[0] = 0;
   13f3c:	2310      	movs	r3, #16
   13f3e:	18fb      	adds	r3, r7, r3
   13f40:	2200      	movs	r2, #0
   13f42:	701a      	strb	r2, [r3, #0]
    gamevar.game[1] = 1;
   13f44:	2310      	movs	r3, #16
   13f46:	18fb      	adds	r3, r7, r3
   13f48:	2201      	movs	r2, #1
   13f4a:	705a      	strb	r2, [r3, #1]
    gamevar.game[2] = 2;
   13f4c:	2310      	movs	r3, #16
   13f4e:	18fb      	adds	r3, r7, r3
   13f50:	2202      	movs	r2, #2
   13f52:	709a      	strb	r2, [r3, #2]
    gamevar.game[3] = 3;
   13f54:	2310      	movs	r3, #16
   13f56:	18fb      	adds	r3, r7, r3
   13f58:	2203      	movs	r2, #3
   13f5a:	70da      	strb	r2, [r3, #3]
    gamevar.game[4] = 4;
   13f5c:	2310      	movs	r3, #16
   13f5e:	18fb      	adds	r3, r7, r3
   13f60:	2204      	movs	r2, #4
   13f62:	711a      	strb	r2, [r3, #4]
    gamevar.game[5] = 5;
   13f64:	2310      	movs	r3, #16
   13f66:	18fb      	adds	r3, r7, r3
   13f68:	2205      	movs	r2, #5
   13f6a:	715a      	strb	r2, [r3, #5]
    gamevar.game[6] = 6;
   13f6c:	2310      	movs	r3, #16
   13f6e:	18fb      	adds	r3, r7, r3
   13f70:	2206      	movs	r2, #6
   13f72:	719a      	strb	r2, [r3, #6]
    gamevar.game[7] = 7;
   13f74:	2310      	movs	r3, #16
   13f76:	18fb      	adds	r3, r7, r3
   13f78:	2207      	movs	r2, #7
   13f7a:	71da      	strb	r2, [r3, #7]
    gamevar.game[8] = 8;
   13f7c:	2310      	movs	r3, #16
   13f7e:	18fb      	adds	r3, r7, r3
   13f80:	2208      	movs	r2, #8
   13f82:	721a      	strb	r2, [r3, #8]
    gamevar.game[9] = 9;
   13f84:	2310      	movs	r3, #16
   13f86:	18fb      	adds	r3, r7, r3
   13f88:	2209      	movs	r2, #9
   13f8a:	725a      	strb	r2, [r3, #9]
    gamevar.game[10] = 0xFF;
   13f8c:	2310      	movs	r3, #16
   13f8e:	18fb      	adds	r3, r7, r3
   13f90:	22ff      	movs	r2, #255	; 0xff
   13f92:	729a      	strb	r2, [r3, #10]

    int error = WifiAddGameDataToQueue(&gamevar);
   13f94:	2310      	movs	r3, #16
   13f96:	18fb      	adds	r3, r7, r3
   13f98:	0018      	movs	r0, r3
   13f9a:	4b09      	ldr	r3, [pc, #36]	; (13fc0 <CLI_SendDummyGameData+0x90>)
   13f9c:	4798      	blx	r3
   13f9e:	0003      	movs	r3, r0
   13fa0:	627b      	str	r3, [r7, #36]	; 0x24
    if (error == pdTRUE) {
   13fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13fa4:	2b01      	cmp	r3, #1
   13fa6:	d105      	bne.n	13fb4 <CLI_SendDummyGameData+0x84>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   13fa8:	4a06      	ldr	r2, [pc, #24]	; (13fc4 <CLI_SendDummyGameData+0x94>)
   13faa:	68b9      	ldr	r1, [r7, #8]
   13fac:	68fb      	ldr	r3, [r7, #12]
   13fae:	0018      	movs	r0, r3
   13fb0:	4b05      	ldr	r3, [pc, #20]	; (13fc8 <CLI_SendDummyGameData+0x98>)
   13fb2:	4798      	blx	r3
    }
    return pdFALSE;
   13fb4:	2300      	movs	r3, #0
}
   13fb6:	0018      	movs	r0, r3
   13fb8:	46bd      	mov	sp, r7
   13fba:	b00a      	add	sp, #40	; 0x28
   13fbc:	bd80      	pop	{r7, pc}
   13fbe:	46c0      	nop			; (mov r8, r8)
   13fc0:	00017f4d 	.word	0x00017f4d
   13fc4:	00037010 	.word	0x00037010
   13fc8:	00035869 	.word	0x00035869

00013fcc <CLI_SendTestData>:

BaseType_t CLI_SendTestData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13fcc:	b580      	push	{r7, lr}
   13fce:	b086      	sub	sp, #24
   13fd0:	af00      	add	r7, sp, #0
   13fd2:	60f8      	str	r0, [r7, #12]
   13fd4:	60b9      	str	r1, [r7, #8]
   13fd6:	607a      	str	r2, [r7, #4]
	struct TestPacket testvar;

	testvar.test = 6;
   13fd8:	2310      	movs	r3, #16
   13fda:	18fb      	adds	r3, r7, r3
   13fdc:	2206      	movs	r2, #6
   13fde:	701a      	strb	r2, [r3, #0]

	int error = WifiAddTestDataToQueue(&testvar);
   13fe0:	2310      	movs	r3, #16
   13fe2:	18fb      	adds	r3, r7, r3
   13fe4:	0018      	movs	r0, r3
   13fe6:	4b09      	ldr	r3, [pc, #36]	; (1400c <CLI_SendTestData+0x40>)
   13fe8:	4798      	blx	r3
   13fea:	0003      	movs	r3, r0
   13fec:	617b      	str	r3, [r7, #20]
	if (error == pdTRUE) {
   13fee:	697b      	ldr	r3, [r7, #20]
   13ff0:	2b01      	cmp	r3, #1
   13ff2:	d105      	bne.n	14000 <CLI_SendTestData+0x34>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Test Data MQTT Post\r\n");
   13ff4:	4a06      	ldr	r2, [pc, #24]	; (14010 <CLI_SendTestData+0x44>)
   13ff6:	68b9      	ldr	r1, [r7, #8]
   13ff8:	68fb      	ldr	r3, [r7, #12]
   13ffa:	0018      	movs	r0, r3
   13ffc:	4b05      	ldr	r3, [pc, #20]	; (14014 <CLI_SendTestData+0x48>)
   13ffe:	4798      	blx	r3
	}
	return pdFALSE;
   14000:	2300      	movs	r3, #0
}
   14002:	0018      	movs	r0, r3
   14004:	46bd      	mov	sp, r7
   14006:	b006      	add	sp, #24
   14008:	bd80      	pop	{r7, pc}
   1400a:	46c0      	nop			; (mov r8, r8)
   1400c:	00017f79 	.word	0x00017f79
   14010:	0003702c 	.word	0x0003702c
   14014:	00035869 	.word	0x00035869

00014018 <CLI_ServoOpen>:

BaseType_t CLI_ServoOpen(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14018:	b580      	push	{r7, lr}
   1401a:	b084      	sub	sp, #16
   1401c:	af00      	add	r7, sp, #0
   1401e:	60f8      	str	r0, [r7, #12]
   14020:	60b9      	str	r1, [r7, #8]
   14022:	607a      	str	r2, [r7, #4]
	servo_setDuty(2);	
   14024:	2002      	movs	r0, #2
   14026:	4b03      	ldr	r3, [pc, #12]	; (14034 <CLI_ServoOpen+0x1c>)
   14028:	4798      	blx	r3
	return pdFALSE;
   1402a:	2300      	movs	r3, #0
}
   1402c:	0018      	movs	r0, r3
   1402e:	46bd      	mov	sp, r7
   14030:	b004      	add	sp, #16
   14032:	bd80      	pop	{r7, pc}
   14034:	000163f5 	.word	0x000163f5

00014038 <CLI_ServoClose>:

BaseType_t CLI_ServoClose(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14038:	b580      	push	{r7, lr}
   1403a:	b084      	sub	sp, #16
   1403c:	af00      	add	r7, sp, #0
   1403e:	60f8      	str	r0, [r7, #12]
   14040:	60b9      	str	r1, [r7, #8]
   14042:	607a      	str	r2, [r7, #4]
	servo_setDuty(3);
   14044:	2003      	movs	r0, #3
   14046:	4b03      	ldr	r3, [pc, #12]	; (14054 <CLI_ServoClose+0x1c>)
   14048:	4798      	blx	r3
	return pdFALSE;
   1404a:	2300      	movs	r3, #0
}
   1404c:	0018      	movs	r0, r3
   1404e:	46bd      	mov	sp, r7
   14050:	b004      	add	sp, #16
   14052:	bd80      	pop	{r7, pc}
   14054:	000163f5 	.word	0x000163f5

00014058 <CLI_SendWeightData>:

BaseType_t CLI_SendWeightData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14058:	b590      	push	{r4, r7, lr}
   1405a:	b097      	sub	sp, #92	; 0x5c
   1405c:	af00      	add	r7, sp, #0
   1405e:	60f8      	str	r0, [r7, #12]
   14060:	60b9      	str	r1, [r7, #8]
   14062:	607a      	str	r2, [r7, #4]
	//SerialConsoleWriteString( "hello  NAU7802!\r\n");
	I2cInitializeDriver();
   14064:	4b15      	ldr	r3, [pc, #84]	; (140bc <CLI_SendWeightData+0x64>)
   14066:	4798      	blx	r3
	//SerialConsoleWriteString( "I2C Initial!\r\n");
	ADCchip_Init();
   14068:	4b15      	ldr	r3, [pc, #84]	; (140c0 <CLI_SendWeightData+0x68>)
   1406a:	4798      	blx	r3
	//SerialConsoleWriteString( "ADC Initial!\r\n");
	ADC_StartConversion();
   1406c:	4b15      	ldr	r3, [pc, #84]	; (140c4 <CLI_SendWeightData+0x6c>)
   1406e:	4798      	blx	r3
	//SerialConsoleWriteString( "ADC Conver!\r\n");
	
	
	while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
   14070:	46c0      	nop			; (mov r8, r8)
   14072:	2000      	movs	r0, #0
   14074:	4b14      	ldr	r3, [pc, #80]	; (140c8 <CLI_SendWeightData+0x70>)
   14076:	4798      	blx	r3
   14078:	0003      	movs	r3, r0
   1407a:	001a      	movs	r2, r3
   1407c:	2320      	movs	r3, #32
   1407e:	4013      	ands	r3, r2
   14080:	2b20      	cmp	r3, #32
   14082:	d1f6      	bne.n	14072 <CLI_SendWeightData+0x1a>
	uint32_t ADC_value=ADC_Read_Conversion_Data();
   14084:	4b11      	ldr	r3, [pc, #68]	; (140cc <CLI_SendWeightData+0x74>)
   14086:	4798      	blx	r3
   14088:	0003      	movs	r3, r0
   1408a:	657b      	str	r3, [r7, #84]	; 0x54
	
	int i32ConversionData = (int)(ADC_value << 8);
   1408c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1408e:	021b      	lsls	r3, r3, #8
   14090:	653b      	str	r3, [r7, #80]	; 0x50
	/* Shift the number back right to recover its intended magnitude */
	i32ConversionData = (i32ConversionData >> 8);
   14092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14094:	121b      	asrs	r3, r3, #8
   14096:	653b      	str	r3, [r7, #80]	; 0x50
	
	char help[64];
	//snprintf(help, 64, "input vol = VIN1P - VIN1N = %.2f\r\n",((float)i32ConversionData / 16777216) * (float)(3.14));
	snprintf(help, 64, "input vol = VIN1P - VIN1N = %d\r\n",ADC_value);
   14098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1409a:	4a0d      	ldr	r2, [pc, #52]	; (140d0 <CLI_SendWeightData+0x78>)
   1409c:	2110      	movs	r1, #16
   1409e:	1878      	adds	r0, r7, r1
   140a0:	2140      	movs	r1, #64	; 0x40
   140a2:	4c0c      	ldr	r4, [pc, #48]	; (140d4 <CLI_SendWeightData+0x7c>)
   140a4:	47a0      	blx	r4
	SerialConsoleWriteString(help);
   140a6:	2310      	movs	r3, #16
   140a8:	18fb      	adds	r3, r7, r3
   140aa:	0018      	movs	r0, r3
   140ac:	4b0a      	ldr	r3, [pc, #40]	; (140d8 <CLI_SendWeightData+0x80>)
   140ae:	4798      	blx	r3
	
	return pdFALSE;
   140b0:	2300      	movs	r3, #0
}
   140b2:	0018      	movs	r0, r3
   140b4:	46bd      	mov	sp, r7
   140b6:	b017      	add	sp, #92	; 0x5c
   140b8:	bd90      	pop	{r4, r7, pc}
   140ba:	46c0      	nop			; (mov r8, r8)
   140bc:	00014855 	.word	0x00014855
   140c0:	00015cbd 	.word	0x00015cbd
   140c4:	00015d59 	.word	0x00015d59
   140c8:	00015ba5 	.word	0x00015ba5
   140cc:	00015e15 	.word	0x00015e15
   140d0:	00037044 	.word	0x00037044
   140d4:	00035869 	.word	0x00035869
   140d8:	0001e835 	.word	0x0001e835

000140dc <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   140dc:	b590      	push	{r4, r7, lr}
   140de:	b08f      	sub	sp, #60	; 0x3c
   140e0:	af00      	add	r7, sp, #0
   140e2:	60f8      	str	r0, [r7, #12]
   140e4:	60b9      	str	r1, [r7, #8]
   140e6:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   140e8:	2318      	movs	r3, #24
   140ea:	18fb      	adds	r3, r7, r3
   140ec:	2200      	movs	r2, #0
   140ee:	701a      	strb	r2, [r3, #0]
   140f0:	2318      	movs	r3, #24
   140f2:	18fb      	adds	r3, r7, r3
   140f4:	2200      	movs	r2, #0
   140f6:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   140f8:	2318      	movs	r3, #24
   140fa:	18fb      	adds	r3, r7, r3
   140fc:	2200      	movs	r2, #0
   140fe:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   14100:	2318      	movs	r3, #24
   14102:	18fb      	adds	r3, r7, r3
   14104:	2200      	movs	r2, #0
   14106:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   14108:	231c      	movs	r3, #28
   1410a:	18fb      	adds	r3, r7, r3
   1410c:	2200      	movs	r2, #0
   1410e:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   14110:	231c      	movs	r3, #28
   14112:	18fb      	adds	r3, r7, r3
   14114:	2214      	movs	r2, #20
   14116:	18ba      	adds	r2, r7, r2
   14118:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   1411a:	231c      	movs	r3, #28
   1411c:	18fb      	adds	r3, r7, r3
   1411e:	2201      	movs	r2, #1
   14120:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   14122:	231c      	movs	r3, #28
   14124:	18fb      	adds	r3, r7, r3
   14126:	2218      	movs	r2, #24
   14128:	18ba      	adds	r2, r7, r2
   1412a:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   1412c:	231c      	movs	r3, #28
   1412e:	18fb      	adds	r3, r7, r3
   14130:	2201      	movs	r2, #1
   14132:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   14134:	4b2c      	ldr	r3, [pc, #176]	; (141e8 <CLI_i2cScan+0x10c>)
   14136:	0018      	movs	r0, r3
   14138:	4b2c      	ldr	r3, [pc, #176]	; (141ec <CLI_i2cScan+0x110>)
   1413a:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   1413c:	2300      	movs	r3, #0
   1413e:	637b      	str	r3, [r7, #52]	; 0x34
   14140:	e046      	b.n	141d0 <CLI_i2cScan+0xf4>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   14142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14144:	4a2a      	ldr	r2, [pc, #168]	; (141f0 <CLI_i2cScan+0x114>)
   14146:	482b      	ldr	r0, [pc, #172]	; (141f4 <CLI_i2cScan+0x118>)
   14148:	210f      	movs	r1, #15
   1414a:	4c2b      	ldr	r4, [pc, #172]	; (141f8 <CLI_i2cScan+0x11c>)
   1414c:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   1414e:	4b29      	ldr	r3, [pc, #164]	; (141f4 <CLI_i2cScan+0x118>)
   14150:	0018      	movs	r0, r3
   14152:	4b26      	ldr	r3, [pc, #152]	; (141ec <CLI_i2cScan+0x110>)
   14154:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   14156:	2300      	movs	r3, #0
   14158:	633b      	str	r3, [r7, #48]	; 0x30
   1415a:	e02f      	b.n	141bc <CLI_i2cScan+0xe0>
                {

                    i2cOled.address = (i + j) << 1;
   1415c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1415e:	b2da      	uxtb	r2, r3
   14160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14162:	b2db      	uxtb	r3, r3
   14164:	18d3      	adds	r3, r2, r3
   14166:	b2db      	uxtb	r3, r3
   14168:	18db      	adds	r3, r3, r3
   1416a:	b2da      	uxtb	r2, r3
   1416c:	231c      	movs	r3, #28
   1416e:	18fb      	adds	r3, r7, r3
   14170:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cWriteDataWait(&i2cOled, 100);
   14172:	231c      	movs	r3, #28
   14174:	18fb      	adds	r3, r7, r3
   14176:	2164      	movs	r1, #100	; 0x64
   14178:	0018      	movs	r0, r3
   1417a:	4b20      	ldr	r3, [pc, #128]	; (141fc <CLI_i2cScan+0x120>)
   1417c:	4798      	blx	r3
   1417e:	0003      	movs	r3, r0
   14180:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   14182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14184:	2b00      	cmp	r3, #0
   14186:	d10c      	bne.n	141a2 <CLI_i2cScan+0xc6>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cOled.address);
   14188:	231c      	movs	r3, #28
   1418a:	18fb      	adds	r3, r7, r3
   1418c:	781b      	ldrb	r3, [r3, #0]
   1418e:	4a18      	ldr	r2, [pc, #96]	; (141f0 <CLI_i2cScan+0x114>)
   14190:	4818      	ldr	r0, [pc, #96]	; (141f4 <CLI_i2cScan+0x118>)
   14192:	210f      	movs	r1, #15
   14194:	4c18      	ldr	r4, [pc, #96]	; (141f8 <CLI_i2cScan+0x11c>)
   14196:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   14198:	4b16      	ldr	r3, [pc, #88]	; (141f4 <CLI_i2cScan+0x118>)
   1419a:	0018      	movs	r0, r3
   1419c:	4b13      	ldr	r3, [pc, #76]	; (141ec <CLI_i2cScan+0x110>)
   1419e:	4798      	blx	r3
   141a0:	e009      	b.n	141b6 <CLI_i2cScan+0xda>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   141a2:	4b14      	ldr	r3, [pc, #80]	; (141f4 <CLI_i2cScan+0x118>)
   141a4:	4a16      	ldr	r2, [pc, #88]	; (14200 <CLI_i2cScan+0x124>)
   141a6:	8811      	ldrh	r1, [r2, #0]
   141a8:	8019      	strh	r1, [r3, #0]
   141aa:	7892      	ldrb	r2, [r2, #2]
   141ac:	709a      	strb	r2, [r3, #2]
						SerialConsoleWriteString(bufCli);
   141ae:	4b11      	ldr	r3, [pc, #68]	; (141f4 <CLI_i2cScan+0x118>)
   141b0:	0018      	movs	r0, r3
   141b2:	4b0e      	ldr	r3, [pc, #56]	; (141ec <CLI_i2cScan+0x110>)
   141b4:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   141b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   141b8:	3301      	adds	r3, #1
   141ba:	633b      	str	r3, [r7, #48]	; 0x30
   141bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   141be:	2b0f      	cmp	r3, #15
   141c0:	ddcc      	ble.n	1415c <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   141c2:	4b10      	ldr	r3, [pc, #64]	; (14204 <CLI_i2cScan+0x128>)
   141c4:	0018      	movs	r0, r3
   141c6:	4b09      	ldr	r3, [pc, #36]	; (141ec <CLI_i2cScan+0x110>)
   141c8:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   141ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   141cc:	3310      	adds	r3, #16
   141ce:	637b      	str	r3, [r7, #52]	; 0x34
   141d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   141d2:	2b7f      	cmp	r3, #127	; 0x7f
   141d4:	ddb5      	ble.n	14142 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   141d6:	4b0b      	ldr	r3, [pc, #44]	; (14204 <CLI_i2cScan+0x128>)
   141d8:	0018      	movs	r0, r3
   141da:	4b04      	ldr	r3, [pc, #16]	; (141ec <CLI_i2cScan+0x110>)
   141dc:	4798      	blx	r3
			return pdFALSE;
   141de:	2300      	movs	r3, #0

}
   141e0:	0018      	movs	r0, r3
   141e2:	46bd      	mov	sp, r7
   141e4:	b00f      	add	sp, #60	; 0x3c
   141e6:	bd90      	pop	{r4, r7, pc}
   141e8:	00037068 	.word	0x00037068
   141ec:	0001e835 	.word	0x0001e835
   141f0:	0003709c 	.word	0x0003709c
   141f4:	20000504 	.word	0x20000504
   141f8:	00035869 	.word	0x00035869
   141fc:	00014a81 	.word	0x00014a81
   14200:	000370a4 	.word	0x000370a4
   14204:	00036f2c 	.word	0x00036f2c

00014208 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   14208:	b580      	push	{r7, lr}
   1420a:	b088      	sub	sp, #32
   1420c:	af00      	add	r7, sp, #0
   1420e:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   14210:	4b33      	ldr	r3, [pc, #204]	; (142e0 <vControlHandlerTask+0xd8>)
   14212:	0018      	movs	r0, r3
   14214:	4b33      	ldr	r3, [pc, #204]	; (142e4 <vControlHandlerTask+0xdc>)
   14216:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   14218:	2200      	movs	r2, #0
   1421a:	2114      	movs	r1, #20
   1421c:	2002      	movs	r0, #2
   1421e:	4b32      	ldr	r3, [pc, #200]	; (142e8 <vControlHandlerTask+0xe0>)
   14220:	4798      	blx	r3
   14222:	0002      	movs	r2, r0
   14224:	4b31      	ldr	r3, [pc, #196]	; (142ec <vControlHandlerTask+0xe4>)
   14226:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   14228:	2200      	movs	r2, #0
   1422a:	2103      	movs	r1, #3
   1422c:	2002      	movs	r0, #2
   1422e:	4b2e      	ldr	r3, [pc, #184]	; (142e8 <vControlHandlerTask+0xe0>)
   14230:	4798      	blx	r3
   14232:	0002      	movs	r2, r0
   14234:	4b2e      	ldr	r3, [pc, #184]	; (142f0 <vControlHandlerTask+0xe8>)
   14236:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   14238:	4b2c      	ldr	r3, [pc, #176]	; (142ec <vControlHandlerTask+0xe4>)
   1423a:	681b      	ldr	r3, [r3, #0]
   1423c:	2b00      	cmp	r3, #0
   1423e:	d003      	beq.n	14248 <vControlHandlerTask+0x40>
   14240:	4b2b      	ldr	r3, [pc, #172]	; (142f0 <vControlHandlerTask+0xe8>)
   14242:	681b      	ldr	r3, [r3, #0]
   14244:	2b00      	cmp	r3, #0
   14246:	d103      	bne.n	14250 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   14248:	4b2a      	ldr	r3, [pc, #168]	; (142f4 <vControlHandlerTask+0xec>)
   1424a:	0018      	movs	r0, r3
   1424c:	4b25      	ldr	r3, [pc, #148]	; (142e4 <vControlHandlerTask+0xdc>)
   1424e:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   14250:	4b29      	ldr	r3, [pc, #164]	; (142f8 <vControlHandlerTask+0xf0>)
   14252:	2200      	movs	r2, #0
   14254:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   14256:	4b28      	ldr	r3, [pc, #160]	; (142f8 <vControlHandlerTask+0xf0>)
   14258:	781b      	ldrb	r3, [r3, #0]
   1425a:	2b01      	cmp	r3, #1
   1425c:	d01d      	beq.n	1429a <vControlHandlerTask+0x92>
   1425e:	2b02      	cmp	r3, #2
   14260:	d035      	beq.n	142ce <vControlHandlerTask+0xc6>
   14262:	2b00      	cmp	r3, #0
   14264:	d12f      	bne.n	142c6 <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   14266:	4b21      	ldr	r3, [pc, #132]	; (142ec <vControlHandlerTask+0xe4>)
   14268:	681b      	ldr	r3, [r3, #0]
   1426a:	220c      	movs	r2, #12
   1426c:	18b9      	adds	r1, r7, r2
   1426e:	2200      	movs	r2, #0
   14270:	0018      	movs	r0, r3
   14272:	4b22      	ldr	r3, [pc, #136]	; (142fc <vControlHandlerTask+0xf4>)
   14274:	4798      	blx	r3
   14276:	0003      	movs	r3, r0
   14278:	2b01      	cmp	r3, #1
   1427a:	d12a      	bne.n	142d2 <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   1427c:	4b20      	ldr	r3, [pc, #128]	; (14300 <vControlHandlerTask+0xf8>)
   1427e:	0019      	movs	r1, r3
   14280:	2001      	movs	r0, #1
   14282:	4b20      	ldr	r3, [pc, #128]	; (14304 <vControlHandlerTask+0xfc>)
   14284:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   14286:	230c      	movs	r3, #12
   14288:	18fb      	adds	r3, r7, r3
   1428a:	0018      	movs	r0, r3
   1428c:	4b1e      	ldr	r3, [pc, #120]	; (14308 <vControlHandlerTask+0x100>)
   1428e:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   14290:	4b19      	ldr	r3, [pc, #100]	; (142f8 <vControlHandlerTask+0xf0>)
   14292:	2201      	movs	r2, #1
   14294:	701a      	strb	r2, [r3, #0]
                }

                break;
   14296:	46c0      	nop			; (mov r8, r8)
   14298:	e01b      	b.n	142d2 <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   1429a:	4b1c      	ldr	r3, [pc, #112]	; (1430c <vControlHandlerTask+0x104>)
   1429c:	4798      	blx	r3
   1429e:	1e03      	subs	r3, r0, #0
   142a0:	d019      	beq.n	142d6 <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   142a2:	4b1b      	ldr	r3, [pc, #108]	; (14310 <vControlHandlerTask+0x108>)
   142a4:	4798      	blx	r3
   142a6:	0003      	movs	r3, r0
   142a8:	0018      	movs	r0, r3
   142aa:	4b1a      	ldr	r3, [pc, #104]	; (14314 <vControlHandlerTask+0x10c>)
   142ac:	4798      	blx	r3
   142ae:	0003      	movs	r3, r0
   142b0:	2b01      	cmp	r3, #1
   142b2:	d004      	beq.n	142be <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   142b4:	4b18      	ldr	r3, [pc, #96]	; (14318 <vControlHandlerTask+0x110>)
   142b6:	0019      	movs	r1, r3
   142b8:	2001      	movs	r0, #1
   142ba:	4b12      	ldr	r3, [pc, #72]	; (14304 <vControlHandlerTask+0xfc>)
   142bc:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   142be:	4b0e      	ldr	r3, [pc, #56]	; (142f8 <vControlHandlerTask+0xf0>)
   142c0:	2200      	movs	r2, #0
   142c2:	701a      	strb	r2, [r3, #0]
                }

                break;
   142c4:	e007      	b.n	142d6 <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   142c6:	4b0c      	ldr	r3, [pc, #48]	; (142f8 <vControlHandlerTask+0xf0>)
   142c8:	2200      	movs	r2, #0
   142ca:	701a      	strb	r2, [r3, #0]
                break;
   142cc:	e004      	b.n	142d8 <vControlHandlerTask+0xd0>
                break;
   142ce:	46c0      	nop			; (mov r8, r8)
   142d0:	e002      	b.n	142d8 <vControlHandlerTask+0xd0>
                break;
   142d2:	46c0      	nop			; (mov r8, r8)
   142d4:	e000      	b.n	142d8 <vControlHandlerTask+0xd0>
                break;
   142d6:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   142d8:	2028      	movs	r0, #40	; 0x28
   142da:	4b10      	ldr	r3, [pc, #64]	; (1431c <vControlHandlerTask+0x114>)
   142dc:	4798      	blx	r3
        switch (controlState) {
   142de:	e7ba      	b.n	14256 <vControlHandlerTask+0x4e>
   142e0:	00037178 	.word	0x00037178
   142e4:	0001e835 	.word	0x0001e835
   142e8:	0001aed5 	.word	0x0001aed5
   142ec:	20000600 	.word	0x20000600
   142f0:	20000604 	.word	0x20000604
   142f4:	00037198 	.word	0x00037198
   142f8:	200047e4 	.word	0x200047e4
   142fc:	0001ba35 	.word	0x0001ba35
   14300:	000371c4 	.word	0x000371c4
   14304:	0001e921 	.word	0x0001e921
   14308:	000164ad 	.word	0x000164ad
   1430c:	000164e9 	.word	0x000164e9
   14310:	000164fd 	.word	0x000164fd
   14314:	00017f4d 	.word	0x00017f4d
   14318:	000371ec 	.word	0x000371ec
   1431c:	0001cbe1 	.word	0x0001cbe1

00014320 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   14320:	b590      	push	{r4, r7, lr}
   14322:	b085      	sub	sp, #20
   14324:	af00      	add	r7, sp, #0
   14326:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   14328:	4b06      	ldr	r3, [pc, #24]	; (14344 <ControlAddGameData+0x24>)
   1432a:	6818      	ldr	r0, [r3, #0]
   1432c:	6879      	ldr	r1, [r7, #4]
   1432e:	2300      	movs	r3, #0
   14330:	220a      	movs	r2, #10
   14332:	4c05      	ldr	r4, [pc, #20]	; (14348 <ControlAddGameData+0x28>)
   14334:	47a0      	blx	r4
   14336:	0003      	movs	r3, r0
   14338:	60fb      	str	r3, [r7, #12]
    return error;
   1433a:	68fb      	ldr	r3, [r7, #12]
}
   1433c:	0018      	movs	r0, r3
   1433e:	46bd      	mov	sp, r7
   14340:	b005      	add	sp, #20
   14342:	bd90      	pop	{r4, r7, pc}
   14344:	20000600 	.word	0x20000600
   14348:	0001b17d 	.word	0x0001b17d

0001434c <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(uint16_t *distance, const TickType_t xMaxBlockTime)
{
   1434c:	b580      	push	{r7, lr}
   1434e:	b084      	sub	sp, #16
   14350:	af00      	add	r7, sp, #0
   14352:	6078      	str	r0, [r7, #4]
   14354:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   14356:	2300      	movs	r3, #0
   14358:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   1435a:	2396      	movs	r3, #150	; 0x96
   1435c:	005b      	lsls	r3, r3, #1
   1435e:	0018      	movs	r0, r3
   14360:	4b25      	ldr	r3, [pc, #148]	; (143f8 <DistanceSensorGetDistance+0xac>)
   14362:	4798      	blx	r3
   14364:	0003      	movs	r3, r0
   14366:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   14368:	68fb      	ldr	r3, [r7, #12]
   1436a:	2b00      	cmp	r3, #0
   1436c:	d139      	bne.n	143e2 <DistanceSensorGetDistance+0x96>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   1436e:	4b23      	ldr	r3, [pc, #140]	; (143fc <DistanceSensorGetDistance+0xb0>)
   14370:	2255      	movs	r2, #85	; 0x55
   14372:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   14374:	4921      	ldr	r1, [pc, #132]	; (143fc <DistanceSensorGetDistance+0xb0>)
   14376:	4b22      	ldr	r3, [pc, #136]	; (14400 <DistanceSensorGetDistance+0xb4>)
   14378:	2201      	movs	r2, #1
   1437a:	0018      	movs	r0, r3
   1437c:	4b21      	ldr	r3, [pc, #132]	; (14404 <DistanceSensorGetDistance+0xb8>)
   1437e:	4798      	blx	r3
   14380:	1e03      	subs	r3, r0, #0
   14382:	d130      	bne.n	143e6 <DistanceSensorGetDistance+0x9a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14384:	4b20      	ldr	r3, [pc, #128]	; (14408 <DistanceSensorGetDistance+0xbc>)
   14386:	681b      	ldr	r3, [r3, #0]
   14388:	683a      	ldr	r2, [r7, #0]
   1438a:	0011      	movs	r1, r2
   1438c:	0018      	movs	r0, r3
   1438e:	4b1f      	ldr	r3, [pc, #124]	; (1440c <DistanceSensorGetDistance+0xc0>)
   14390:	4798      	blx	r3
   14392:	0003      	movs	r3, r0
   14394:	2b01      	cmp	r3, #1
   14396:	d003      	beq.n	143a0 <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14398:	2303      	movs	r3, #3
   1439a:	425b      	negs	r3, r3
   1439c:	60fb      	str	r3, [r7, #12]
        goto exitf;
   1439e:	e023      	b.n	143e8 <DistanceSensorGetDistance+0x9c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
   143a0:	491b      	ldr	r1, [pc, #108]	; (14410 <DistanceSensorGetDistance+0xc4>)
   143a2:	4b17      	ldr	r3, [pc, #92]	; (14400 <DistanceSensorGetDistance+0xb4>)
   143a4:	2202      	movs	r2, #2
   143a6:	0018      	movs	r0, r3
   143a8:	4b1a      	ldr	r3, [pc, #104]	; (14414 <DistanceSensorGetDistance+0xc8>)
   143aa:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   143ac:	4b16      	ldr	r3, [pc, #88]	; (14408 <DistanceSensorGetDistance+0xbc>)
   143ae:	681b      	ldr	r3, [r3, #0]
   143b0:	683a      	ldr	r2, [r7, #0]
   143b2:	0011      	movs	r1, r2
   143b4:	0018      	movs	r0, r3
   143b6:	4b15      	ldr	r3, [pc, #84]	; (1440c <DistanceSensorGetDistance+0xc0>)
   143b8:	4798      	blx	r3
   143ba:	0003      	movs	r3, r0
   143bc:	2b01      	cmp	r3, #1
   143be:	d10c      	bne.n	143da <DistanceSensorGetDistance+0x8e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   143c0:	4b13      	ldr	r3, [pc, #76]	; (14410 <DistanceSensorGetDistance+0xc4>)
   143c2:	781b      	ldrb	r3, [r3, #0]
   143c4:	b29b      	uxth	r3, r3
   143c6:	021b      	lsls	r3, r3, #8
   143c8:	b29a      	uxth	r2, r3
   143ca:	4b11      	ldr	r3, [pc, #68]	; (14410 <DistanceSensorGetDistance+0xc4>)
   143cc:	785b      	ldrb	r3, [r3, #1]
   143ce:	b29b      	uxth	r3, r3
   143d0:	18d3      	adds	r3, r2, r3
   143d2:	b29a      	uxth	r2, r3
   143d4:	687b      	ldr	r3, [r7, #4]
   143d6:	801a      	strh	r2, [r3, #0]
   143d8:	e006      	b.n	143e8 <DistanceSensorGetDistance+0x9c>
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   143da:	2303      	movs	r3, #3
   143dc:	425b      	negs	r3, r3
   143de:	60fb      	str	r3, [r7, #12]
        goto exitf;
   143e0:	e002      	b.n	143e8 <DistanceSensorGetDistance+0x9c>
    if (ERROR_NONE != error) goto exitf;
   143e2:	46c0      	nop			; (mov r8, r8)
   143e4:	e000      	b.n	143e8 <DistanceSensorGetDistance+0x9c>
        goto exitf;
   143e6:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   143e8:	4b0b      	ldr	r3, [pc, #44]	; (14418 <DistanceSensorGetDistance+0xcc>)
   143ea:	4798      	blx	r3

    return error;
   143ec:	68fb      	ldr	r3, [r7, #12]
}
   143ee:	0018      	movs	r0, r3
   143f0:	46bd      	mov	sp, r7
   143f2:	b004      	add	sp, #16
   143f4:	bd80      	pop	{r7, pc}
   143f6:	46c0      	nop			; (mov r8, r8)
   143f8:	00014455 	.word	0x00014455
   143fc:	200047ea 	.word	0x200047ea
   14400:	200047f4 	.word	0x200047f4
   14404:	00029a0d 	.word	0x00029a0d
   14408:	200047ec 	.word	0x200047ec
   1440c:	0001be8d 	.word	0x0001be8d
   14410:	200047e8 	.word	0x200047e8
   14414:	00029a55 	.word	0x00029a55
   14418:	0001441d 	.word	0x0001441d

0001441c <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   1441c:	b590      	push	{r4, r7, lr}
   1441e:	b083      	sub	sp, #12
   14420:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   14422:	2300      	movs	r3, #0
   14424:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   14426:	4b09      	ldr	r3, [pc, #36]	; (1444c <DistanceSensorFreeMutex+0x30>)
   14428:	6818      	ldr	r0, [r3, #0]
   1442a:	2300      	movs	r3, #0
   1442c:	2200      	movs	r2, #0
   1442e:	2100      	movs	r1, #0
   14430:	4c07      	ldr	r4, [pc, #28]	; (14450 <DistanceSensorFreeMutex+0x34>)
   14432:	47a0      	blx	r4
   14434:	0003      	movs	r3, r0
   14436:	2b01      	cmp	r3, #1
   14438:	d002      	beq.n	14440 <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   1443a:	2314      	movs	r3, #20
   1443c:	425b      	negs	r3, r3
   1443e:	607b      	str	r3, [r7, #4]
    }
    return error;
   14440:	687b      	ldr	r3, [r7, #4]
}
   14442:	0018      	movs	r0, r3
   14444:	46bd      	mov	sp, r7
   14446:	b003      	add	sp, #12
   14448:	bd90      	pop	{r4, r7, pc}
   1444a:	46c0      	nop			; (mov r8, r8)
   1444c:	200047f0 	.word	0x200047f0
   14450:	0001b17d 	.word	0x0001b17d

00014454 <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   14454:	b580      	push	{r7, lr}
   14456:	b084      	sub	sp, #16
   14458:	af00      	add	r7, sp, #0
   1445a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   1445c:	2300      	movs	r3, #0
   1445e:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   14460:	4b08      	ldr	r3, [pc, #32]	; (14484 <DistanceSensorGetMutex+0x30>)
   14462:	681b      	ldr	r3, [r3, #0]
   14464:	687a      	ldr	r2, [r7, #4]
   14466:	0011      	movs	r1, r2
   14468:	0018      	movs	r0, r3
   1446a:	4b07      	ldr	r3, [pc, #28]	; (14488 <DistanceSensorGetMutex+0x34>)
   1446c:	4798      	blx	r3
   1446e:	0003      	movs	r3, r0
   14470:	2b01      	cmp	r3, #1
   14472:	d002      	beq.n	1447a <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   14474:	231d      	movs	r3, #29
   14476:	425b      	negs	r3, r3
   14478:	60fb      	str	r3, [r7, #12]
    }
    return error;
   1447a:	68fb      	ldr	r3, [r7, #12]
   1447c:	0018      	movs	r0, r3
   1447e:	46bd      	mov	sp, r7
   14480:	b004      	add	sp, #16
   14482:	bd80      	pop	{r7, pc}
   14484:	200047f0 	.word	0x200047f0
   14488:	0001be8d 	.word	0x0001be8d

0001448c <system_interrupt_enable>:
{
   1448c:	b580      	push	{r7, lr}
   1448e:	b082      	sub	sp, #8
   14490:	af00      	add	r7, sp, #0
   14492:	0002      	movs	r2, r0
   14494:	1dfb      	adds	r3, r7, #7
   14496:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14498:	4b06      	ldr	r3, [pc, #24]	; (144b4 <system_interrupt_enable+0x28>)
   1449a:	1dfa      	adds	r2, r7, #7
   1449c:	7812      	ldrb	r2, [r2, #0]
   1449e:	0011      	movs	r1, r2
   144a0:	221f      	movs	r2, #31
   144a2:	400a      	ands	r2, r1
   144a4:	2101      	movs	r1, #1
   144a6:	4091      	lsls	r1, r2
   144a8:	000a      	movs	r2, r1
   144aa:	601a      	str	r2, [r3, #0]
}
   144ac:	46c0      	nop			; (mov r8, r8)
   144ae:	46bd      	mov	sp, r7
   144b0:	b002      	add	sp, #8
   144b2:	bd80      	pop	{r7, pc}
   144b4:	e000e100 	.word	0xe000e100

000144b8 <i2c_master_is_syncing>:
{
   144b8:	b580      	push	{r7, lr}
   144ba:	b084      	sub	sp, #16
   144bc:	af00      	add	r7, sp, #0
   144be:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   144c0:	687b      	ldr	r3, [r7, #4]
   144c2:	681b      	ldr	r3, [r3, #0]
   144c4:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   144c6:	68fb      	ldr	r3, [r7, #12]
   144c8:	69db      	ldr	r3, [r3, #28]
   144ca:	2207      	movs	r2, #7
   144cc:	4013      	ands	r3, r2
   144ce:	1e5a      	subs	r2, r3, #1
   144d0:	4193      	sbcs	r3, r2
   144d2:	b2db      	uxtb	r3, r3
}
   144d4:	0018      	movs	r0, r3
   144d6:	46bd      	mov	sp, r7
   144d8:	b004      	add	sp, #16
   144da:	bd80      	pop	{r7, pc}

000144dc <_i2c_master_wait_for_sync>:
{
   144dc:	b580      	push	{r7, lr}
   144de:	b082      	sub	sp, #8
   144e0:	af00      	add	r7, sp, #0
   144e2:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   144e4:	46c0      	nop			; (mov r8, r8)
   144e6:	687b      	ldr	r3, [r7, #4]
   144e8:	0018      	movs	r0, r3
   144ea:	4b04      	ldr	r3, [pc, #16]	; (144fc <_i2c_master_wait_for_sync+0x20>)
   144ec:	4798      	blx	r3
   144ee:	1e03      	subs	r3, r0, #0
   144f0:	d1f9      	bne.n	144e6 <_i2c_master_wait_for_sync+0xa>
}
   144f2:	46c0      	nop			; (mov r8, r8)
   144f4:	46bd      	mov	sp, r7
   144f6:	b002      	add	sp, #8
   144f8:	bd80      	pop	{r7, pc}
   144fa:	46c0      	nop			; (mov r8, r8)
   144fc:	000144b9 	.word	0x000144b9

00014500 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   14500:	b580      	push	{r7, lr}
   14502:	b082      	sub	sp, #8
   14504:	af00      	add	r7, sp, #0
   14506:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   14508:	687b      	ldr	r3, [r7, #4]
   1450a:	2264      	movs	r2, #100	; 0x64
   1450c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   1450e:	687b      	ldr	r3, [r7, #4]
   14510:	4a1b      	ldr	r2, [pc, #108]	; (14580 <i2c_master_get_config_defaults+0x80>)
   14512:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   14514:	687b      	ldr	r3, [r7, #4]
   14516:	2200      	movs	r2, #0
   14518:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   1451a:	687b      	ldr	r3, [r7, #4]
   1451c:	2200      	movs	r2, #0
   1451e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   14520:	687b      	ldr	r3, [r7, #4]
   14522:	2200      	movs	r2, #0
   14524:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   14526:	687b      	ldr	r3, [r7, #4]
   14528:	2280      	movs	r2, #128	; 0x80
   1452a:	0392      	lsls	r2, r2, #14
   1452c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   1452e:	687b      	ldr	r3, [r7, #4]
   14530:	2201      	movs	r2, #1
   14532:	4252      	negs	r2, r2
   14534:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   14536:	687b      	ldr	r3, [r7, #4]
   14538:	2201      	movs	r2, #1
   1453a:	4252      	negs	r2, r2
   1453c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1453e:	687b      	ldr	r3, [r7, #4]
   14540:	2200      	movs	r2, #0
   14542:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   14544:	687b      	ldr	r3, [r7, #4]
   14546:	2200      	movs	r2, #0
   14548:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   1454a:	687b      	ldr	r3, [r7, #4]
   1454c:	2224      	movs	r2, #36	; 0x24
   1454e:	2100      	movs	r1, #0
   14550:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   14552:	687b      	ldr	r3, [r7, #4]
   14554:	2200      	movs	r2, #0
   14556:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   14558:	687b      	ldr	r3, [r7, #4]
   1455a:	222c      	movs	r2, #44	; 0x2c
   1455c:	2100      	movs	r1, #0
   1455e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   14560:	687b      	ldr	r3, [r7, #4]
   14562:	222d      	movs	r2, #45	; 0x2d
   14564:	2100      	movs	r1, #0
   14566:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   14568:	687b      	ldr	r3, [r7, #4]
   1456a:	222e      	movs	r2, #46	; 0x2e
   1456c:	2100      	movs	r1, #0
   1456e:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   14570:	687b      	ldr	r3, [r7, #4]
   14572:	22d7      	movs	r2, #215	; 0xd7
   14574:	861a      	strh	r2, [r3, #48]	; 0x30
}
   14576:	46c0      	nop			; (mov r8, r8)
   14578:	46bd      	mov	sp, r7
   1457a:	b002      	add	sp, #8
   1457c:	bd80      	pop	{r7, pc}
   1457e:	46c0      	nop			; (mov r8, r8)
   14580:	00000d48 	.word	0x00000d48

00014584 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   14584:	b580      	push	{r7, lr}
   14586:	b084      	sub	sp, #16
   14588:	af00      	add	r7, sp, #0
   1458a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1458c:	687b      	ldr	r3, [r7, #4]
   1458e:	681b      	ldr	r3, [r3, #0]
   14590:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   14592:	2300      	movs	r3, #0
   14594:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14596:	687b      	ldr	r3, [r7, #4]
   14598:	0018      	movs	r0, r3
   1459a:	4b14      	ldr	r3, [pc, #80]	; (145ec <i2c_master_enable+0x68>)
   1459c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1459e:	68bb      	ldr	r3, [r7, #8]
   145a0:	681b      	ldr	r3, [r3, #0]
   145a2:	2202      	movs	r2, #2
   145a4:	431a      	orrs	r2, r3
   145a6:	68bb      	ldr	r3, [r7, #8]
   145a8:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   145aa:	687b      	ldr	r3, [r7, #4]
   145ac:	681b      	ldr	r3, [r3, #0]
   145ae:	0018      	movs	r0, r3
   145b0:	4b0f      	ldr	r3, [pc, #60]	; (145f0 <i2c_master_enable+0x6c>)
   145b2:	4798      	blx	r3
   145b4:	0003      	movs	r3, r0
   145b6:	0018      	movs	r0, r3
   145b8:	4b0e      	ldr	r3, [pc, #56]	; (145f4 <i2c_master_enable+0x70>)
   145ba:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   145bc:	e00c      	b.n	145d8 <i2c_master_enable+0x54>
		timeout_counter++;
   145be:	68fb      	ldr	r3, [r7, #12]
   145c0:	3301      	adds	r3, #1
   145c2:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   145c4:	687b      	ldr	r3, [r7, #4]
   145c6:	88db      	ldrh	r3, [r3, #6]
   145c8:	001a      	movs	r2, r3
   145ca:	68fb      	ldr	r3, [r7, #12]
   145cc:	429a      	cmp	r2, r3
   145ce:	d803      	bhi.n	145d8 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   145d0:	68bb      	ldr	r3, [r7, #8]
   145d2:	2210      	movs	r2, #16
   145d4:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   145d6:	e006      	b.n	145e6 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   145d8:	68bb      	ldr	r3, [r7, #8]
   145da:	8b5b      	ldrh	r3, [r3, #26]
   145dc:	b29b      	uxth	r3, r3
   145de:	001a      	movs	r2, r3
   145e0:	2310      	movs	r3, #16
   145e2:	4013      	ands	r3, r2
   145e4:	d0eb      	beq.n	145be <i2c_master_enable+0x3a>
		}
	}
}
   145e6:	46bd      	mov	sp, r7
   145e8:	b004      	add	sp, #16
   145ea:	bd80      	pop	{r7, pc}
   145ec:	000144dd 	.word	0x000144dd
   145f0:	000281ad 	.word	0x000281ad
   145f4:	0001448d 	.word	0x0001448d

000145f8 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   145f8:	b580      	push	{r7, lr}
   145fa:	b082      	sub	sp, #8
   145fc:	af00      	add	r7, sp, #0
   145fe:	6078      	str	r0, [r7, #4]
   14600:	000a      	movs	r2, r1
   14602:	1cfb      	adds	r3, r7, #3
   14604:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   14606:	687b      	ldr	r3, [r7, #4]
   14608:	7e5b      	ldrb	r3, [r3, #25]
   1460a:	b2db      	uxtb	r3, r3
   1460c:	b25a      	sxtb	r2, r3
   1460e:	1cfb      	adds	r3, r7, #3
   14610:	781b      	ldrb	r3, [r3, #0]
   14612:	2101      	movs	r1, #1
   14614:	4099      	lsls	r1, r3
   14616:	000b      	movs	r3, r1
   14618:	b25b      	sxtb	r3, r3
   1461a:	4313      	orrs	r3, r2
   1461c:	b25b      	sxtb	r3, r3
   1461e:	b2da      	uxtb	r2, r3
   14620:	687b      	ldr	r3, [r7, #4]
   14622:	765a      	strb	r2, [r3, #25]
}
   14624:	46c0      	nop			; (mov r8, r8)
   14626:	46bd      	mov	sp, r7
   14628:	b002      	add	sp, #8
   1462a:	bd80      	pop	{r7, pc}

0001462c <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   1462c:	b590      	push	{r4, r7, lr}
   1462e:	b091      	sub	sp, #68	; 0x44
   14630:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14632:	2300      	movs	r3, #0
   14634:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   14636:	233a      	movs	r3, #58	; 0x3a
   14638:	18fb      	adds	r3, r7, r3
   1463a:	2200      	movs	r2, #0
   1463c:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   1463e:	1d3b      	adds	r3, r7, #4
   14640:	0018      	movs	r0, r3
   14642:	4b21      	ldr	r3, [pc, #132]	; (146c8 <I2cDriverConfigureSensorBus+0x9c>)
   14644:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   14646:	1d3b      	adds	r3, r7, #4
   14648:	4a20      	ldr	r2, [pc, #128]	; (146cc <I2cDriverConfigureSensorBus+0xa0>)
   1464a:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   1464c:	1d3b      	adds	r3, r7, #4
   1464e:	4a20      	ldr	r2, [pc, #128]	; (146d0 <I2cDriverConfigureSensorBus+0xa4>)
   14650:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   14652:	1d3b      	adds	r3, r7, #4
   14654:	22fa      	movs	r2, #250	; 0xfa
   14656:	0092      	lsls	r2, r2, #2
   14658:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   1465a:	233b      	movs	r3, #59	; 0x3b
   1465c:	18fb      	adds	r3, r7, r3
   1465e:	2203      	movs	r2, #3
   14660:	701a      	strb	r2, [r3, #0]
   14662:	e01e      	b.n	146a2 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   14664:	233a      	movs	r3, #58	; 0x3a
   14666:	18fc      	adds	r4, r7, r3
   14668:	1d3a      	adds	r2, r7, #4
   1466a:	491a      	ldr	r1, [pc, #104]	; (146d4 <I2cDriverConfigureSensorBus+0xa8>)
   1466c:	4b1a      	ldr	r3, [pc, #104]	; (146d8 <I2cDriverConfigureSensorBus+0xac>)
   1466e:	0018      	movs	r0, r3
   14670:	4b1a      	ldr	r3, [pc, #104]	; (146dc <I2cDriverConfigureSensorBus+0xb0>)
   14672:	4798      	blx	r3
   14674:	0003      	movs	r3, r0
   14676:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   14678:	233a      	movs	r3, #58	; 0x3a
   1467a:	18fb      	adds	r3, r7, r3
   1467c:	781b      	ldrb	r3, [r3, #0]
   1467e:	2b00      	cmp	r3, #0
   14680:	d104      	bne.n	1468c <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   14682:	233a      	movs	r3, #58	; 0x3a
   14684:	18fb      	adds	r3, r7, r3
   14686:	781b      	ldrb	r3, [r3, #0]
   14688:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   1468a:	e00f      	b.n	146ac <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   1468c:	4b12      	ldr	r3, [pc, #72]	; (146d8 <I2cDriverConfigureSensorBus+0xac>)
   1468e:	0018      	movs	r0, r3
   14690:	4b13      	ldr	r3, [pc, #76]	; (146e0 <I2cDriverConfigureSensorBus+0xb4>)
   14692:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14694:	233b      	movs	r3, #59	; 0x3b
   14696:	18fb      	adds	r3, r7, r3
   14698:	781a      	ldrb	r2, [r3, #0]
   1469a:	233b      	movs	r3, #59	; 0x3b
   1469c:	18fb      	adds	r3, r7, r3
   1469e:	3a01      	subs	r2, #1
   146a0:	701a      	strb	r2, [r3, #0]
   146a2:	233b      	movs	r3, #59	; 0x3b
   146a4:	18fb      	adds	r3, r7, r3
   146a6:	781b      	ldrb	r3, [r3, #0]
   146a8:	2b00      	cmp	r3, #0
   146aa:	d1db      	bne.n	14664 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   146ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   146ae:	2b00      	cmp	r3, #0
   146b0:	d104      	bne.n	146bc <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   146b2:	4b09      	ldr	r3, [pc, #36]	; (146d8 <I2cDriverConfigureSensorBus+0xac>)
   146b4:	0018      	movs	r0, r3
   146b6:	4b0b      	ldr	r3, [pc, #44]	; (146e4 <I2cDriverConfigureSensorBus+0xb8>)
   146b8:	4798      	blx	r3
   146ba:	e000      	b.n	146be <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   146bc:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   146be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   146c0:	0018      	movs	r0, r3
   146c2:	46bd      	mov	sp, r7
   146c4:	b011      	add	sp, #68	; 0x44
   146c6:	bd90      	pop	{r4, r7, pc}
   146c8:	00014501 	.word	0x00014501
   146cc:	00080002 	.word	0x00080002
   146d0:	00090002 	.word	0x00090002
   146d4:	42000800 	.word	0x42000800
   146d8:	2000482c 	.word	0x2000482c
   146dc:	00018569 	.word	0x00018569
   146e0:	0001869d 	.word	0x0001869d
   146e4:	00014585 	.word	0x00014585

000146e8 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   146e8:	b580      	push	{r7, lr}
   146ea:	b084      	sub	sp, #16
   146ec:	af00      	add	r7, sp, #0
   146ee:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   146f0:	4b0e      	ldr	r3, [pc, #56]	; (1472c <I2cSensorsTxComplete+0x44>)
   146f2:	2200      	movs	r2, #0
   146f4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   146f6:	4b0d      	ldr	r3, [pc, #52]	; (1472c <I2cSensorsTxComplete+0x44>)
   146f8:	2201      	movs	r2, #1
   146fa:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   146fc:	2300      	movs	r3, #0
   146fe:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14700:	4b0b      	ldr	r3, [pc, #44]	; (14730 <I2cSensorsTxComplete+0x48>)
   14702:	681b      	ldr	r3, [r3, #0]
   14704:	220c      	movs	r2, #12
   14706:	18ba      	adds	r2, r7, r2
   14708:	0011      	movs	r1, r2
   1470a:	0018      	movs	r0, r3
   1470c:	4b09      	ldr	r3, [pc, #36]	; (14734 <I2cSensorsTxComplete+0x4c>)
   1470e:	4798      	blx	r3
    sensorTransmitError = false;
   14710:	4b09      	ldr	r3, [pc, #36]	; (14738 <I2cSensorsTxComplete+0x50>)
   14712:	2200      	movs	r2, #0
   14714:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14716:	68fb      	ldr	r3, [r7, #12]
   14718:	2b00      	cmp	r3, #0
   1471a:	d003      	beq.n	14724 <I2cSensorsTxComplete+0x3c>
   1471c:	4b07      	ldr	r3, [pc, #28]	; (1473c <I2cSensorsTxComplete+0x54>)
   1471e:	2280      	movs	r2, #128	; 0x80
   14720:	0552      	lsls	r2, r2, #21
   14722:	601a      	str	r2, [r3, #0]
}
   14724:	46c0      	nop			; (mov r8, r8)
   14726:	46bd      	mov	sp, r7
   14728:	b004      	add	sp, #16
   1472a:	bd80      	pop	{r7, pc}
   1472c:	2000060c 	.word	0x2000060c
   14730:	20004854 	.word	0x20004854
   14734:	0001b805 	.word	0x0001b805
   14738:	20000608 	.word	0x20000608
   1473c:	e000ed04 	.word	0xe000ed04

00014740 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   14740:	b580      	push	{r7, lr}
   14742:	b084      	sub	sp, #16
   14744:	af00      	add	r7, sp, #0
   14746:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14748:	4b0e      	ldr	r3, [pc, #56]	; (14784 <I2cSensorsRxComplete+0x44>)
   1474a:	2200      	movs	r2, #0
   1474c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   1474e:	4b0d      	ldr	r3, [pc, #52]	; (14784 <I2cSensorsRxComplete+0x44>)
   14750:	2201      	movs	r2, #1
   14752:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14754:	2300      	movs	r3, #0
   14756:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14758:	4b0b      	ldr	r3, [pc, #44]	; (14788 <I2cSensorsRxComplete+0x48>)
   1475a:	681b      	ldr	r3, [r3, #0]
   1475c:	220c      	movs	r2, #12
   1475e:	18ba      	adds	r2, r7, r2
   14760:	0011      	movs	r1, r2
   14762:	0018      	movs	r0, r3
   14764:	4b09      	ldr	r3, [pc, #36]	; (1478c <I2cSensorsRxComplete+0x4c>)
   14766:	4798      	blx	r3
    sensorTransmitError = false;
   14768:	4b09      	ldr	r3, [pc, #36]	; (14790 <I2cSensorsRxComplete+0x50>)
   1476a:	2200      	movs	r2, #0
   1476c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1476e:	68fb      	ldr	r3, [r7, #12]
   14770:	2b00      	cmp	r3, #0
   14772:	d003      	beq.n	1477c <I2cSensorsRxComplete+0x3c>
   14774:	4b07      	ldr	r3, [pc, #28]	; (14794 <I2cSensorsRxComplete+0x54>)
   14776:	2280      	movs	r2, #128	; 0x80
   14778:	0552      	lsls	r2, r2, #21
   1477a:	601a      	str	r2, [r3, #0]
}
   1477c:	46c0      	nop			; (mov r8, r8)
   1477e:	46bd      	mov	sp, r7
   14780:	b004      	add	sp, #16
   14782:	bd80      	pop	{r7, pc}
   14784:	2000060c 	.word	0x2000060c
   14788:	20004854 	.word	0x20004854
   1478c:	0001b805 	.word	0x0001b805
   14790:	20000608 	.word	0x20000608
   14794:	e000ed04 	.word	0xe000ed04

00014798 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   14798:	b580      	push	{r7, lr}
   1479a:	b084      	sub	sp, #16
   1479c:	af00      	add	r7, sp, #0
   1479e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   147a0:	4b0e      	ldr	r3, [pc, #56]	; (147dc <I2cSensorsError+0x44>)
   147a2:	2200      	movs	r2, #0
   147a4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   147a6:	4b0d      	ldr	r3, [pc, #52]	; (147dc <I2cSensorsError+0x44>)
   147a8:	2201      	movs	r2, #1
   147aa:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   147ac:	2300      	movs	r3, #0
   147ae:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   147b0:	4b0b      	ldr	r3, [pc, #44]	; (147e0 <I2cSensorsError+0x48>)
   147b2:	681b      	ldr	r3, [r3, #0]
   147b4:	220c      	movs	r2, #12
   147b6:	18ba      	adds	r2, r7, r2
   147b8:	0011      	movs	r1, r2
   147ba:	0018      	movs	r0, r3
   147bc:	4b09      	ldr	r3, [pc, #36]	; (147e4 <I2cSensorsError+0x4c>)
   147be:	4798      	blx	r3
    sensorTransmitError = true;
   147c0:	4b09      	ldr	r3, [pc, #36]	; (147e8 <I2cSensorsError+0x50>)
   147c2:	2201      	movs	r2, #1
   147c4:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   147c6:	68fb      	ldr	r3, [r7, #12]
   147c8:	2b00      	cmp	r3, #0
   147ca:	d003      	beq.n	147d4 <I2cSensorsError+0x3c>
   147cc:	4b07      	ldr	r3, [pc, #28]	; (147ec <I2cSensorsError+0x54>)
   147ce:	2280      	movs	r2, #128	; 0x80
   147d0:	0552      	lsls	r2, r2, #21
   147d2:	601a      	str	r2, [r3, #0]
}
   147d4:	46c0      	nop			; (mov r8, r8)
   147d6:	46bd      	mov	sp, r7
   147d8:	b004      	add	sp, #16
   147da:	bd80      	pop	{r7, pc}
   147dc:	2000060c 	.word	0x2000060c
   147e0:	20004854 	.word	0x20004854
   147e4:	0001b805 	.word	0x0001b805
   147e8:	20000608 	.word	0x20000608
   147ec:	e000ed04 	.word	0xe000ed04

000147f0 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   147f0:	b580      	push	{r7, lr}
   147f2:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   147f4:	4911      	ldr	r1, [pc, #68]	; (1483c <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   147f6:	4b12      	ldr	r3, [pc, #72]	; (14840 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   147f8:	2200      	movs	r2, #0
   147fa:	0018      	movs	r0, r3
   147fc:	4b11      	ldr	r3, [pc, #68]	; (14844 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   147fe:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14800:	4b0f      	ldr	r3, [pc, #60]	; (14840 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14802:	2100      	movs	r1, #0
   14804:	0018      	movs	r0, r3
   14806:	4b10      	ldr	r3, [pc, #64]	; (14848 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14808:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   1480a:	4910      	ldr	r1, [pc, #64]	; (1484c <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   1480c:	4b0c      	ldr	r3, [pc, #48]	; (14840 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1480e:	2201      	movs	r2, #1
   14810:	0018      	movs	r0, r3
   14812:	4b0c      	ldr	r3, [pc, #48]	; (14844 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14814:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14816:	4b0a      	ldr	r3, [pc, #40]	; (14840 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14818:	2101      	movs	r1, #1
   1481a:	0018      	movs	r0, r3
   1481c:	4b0a      	ldr	r3, [pc, #40]	; (14848 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   1481e:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   14820:	490b      	ldr	r1, [pc, #44]	; (14850 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   14822:	4b07      	ldr	r3, [pc, #28]	; (14840 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14824:	2202      	movs	r2, #2
   14826:	0018      	movs	r0, r3
   14828:	4b06      	ldr	r3, [pc, #24]	; (14844 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1482a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   1482c:	4b04      	ldr	r3, [pc, #16]	; (14840 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1482e:	2102      	movs	r1, #2
   14830:	0018      	movs	r0, r3
   14832:	4b05      	ldr	r3, [pc, #20]	; (14848 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14834:	4798      	blx	r3
}
   14836:	46c0      	nop			; (mov r8, r8)
   14838:	46bd      	mov	sp, r7
   1483a:	bd80      	pop	{r7, pc}
   1483c:	000146e9 	.word	0x000146e9
   14840:	2000482c 	.word	0x2000482c
   14844:	000132b1 	.word	0x000132b1
   14848:	000145f9 	.word	0x000145f9
   1484c:	00014741 	.word	0x00014741
   14850:	00014799 	.word	0x00014799

00014854 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   14854:	b580      	push	{r7, lr}
   14856:	b082      	sub	sp, #8
   14858:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   1485a:	2300      	movs	r3, #0
   1485c:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   1485e:	4b14      	ldr	r3, [pc, #80]	; (148b0 <I2cInitializeDriver+0x5c>)
   14860:	4798      	blx	r3
   14862:	0003      	movs	r3, r0
   14864:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   14866:	687b      	ldr	r3, [r7, #4]
   14868:	2b00      	cmp	r3, #0
   1486a:	d11a      	bne.n	148a2 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   1486c:	4b11      	ldr	r3, [pc, #68]	; (148b4 <I2cInitializeDriver+0x60>)
   1486e:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   14870:	2001      	movs	r0, #1
   14872:	4b11      	ldr	r3, [pc, #68]	; (148b8 <I2cInitializeDriver+0x64>)
   14874:	4798      	blx	r3
   14876:	0002      	movs	r2, r0
   14878:	4b10      	ldr	r3, [pc, #64]	; (148bc <I2cInitializeDriver+0x68>)
   1487a:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   1487c:	2203      	movs	r2, #3
   1487e:	2100      	movs	r1, #0
   14880:	2001      	movs	r0, #1
   14882:	4b0f      	ldr	r3, [pc, #60]	; (148c0 <I2cInitializeDriver+0x6c>)
   14884:	4798      	blx	r3
   14886:	0002      	movs	r2, r0
   14888:	4b0e      	ldr	r3, [pc, #56]	; (148c4 <I2cInitializeDriver+0x70>)
   1488a:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   1488c:	4b0b      	ldr	r3, [pc, #44]	; (148bc <I2cInitializeDriver+0x68>)
   1488e:	681b      	ldr	r3, [r3, #0]
   14890:	2b00      	cmp	r3, #0
   14892:	d003      	beq.n	1489c <I2cInitializeDriver+0x48>
   14894:	4b0b      	ldr	r3, [pc, #44]	; (148c4 <I2cInitializeDriver+0x70>)
   14896:	681b      	ldr	r3, [r3, #0]
   14898:	2b00      	cmp	r3, #0
   1489a:	d103      	bne.n	148a4 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   1489c:	2306      	movs	r3, #6
   1489e:	607b      	str	r3, [r7, #4]
        goto exit;
   148a0:	e000      	b.n	148a4 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   148a2:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   148a4:	687b      	ldr	r3, [r7, #4]
}
   148a6:	0018      	movs	r0, r3
   148a8:	46bd      	mov	sp, r7
   148aa:	b002      	add	sp, #8
   148ac:	bd80      	pop	{r7, pc}
   148ae:	46c0      	nop			; (mov r8, r8)
   148b0:	0001462d 	.word	0x0001462d
   148b4:	000147f1 	.word	0x000147f1
   148b8:	0001b13d 	.word	0x0001b13d
   148bc:	20004828 	.word	0x20004828
   148c0:	0001aed5 	.word	0x0001aed5
   148c4:	20004854 	.word	0x20004854

000148c8 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   148c8:	b590      	push	{r4, r7, lr}
   148ca:	b085      	sub	sp, #20
   148cc:	af00      	add	r7, sp, #0
   148ce:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   148d0:	2300      	movs	r3, #0
   148d2:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   148d4:	687b      	ldr	r3, [r7, #4]
   148d6:	2b00      	cmp	r3, #0
   148d8:	d003      	beq.n	148e2 <I2cWriteData+0x1a>
   148da:	687b      	ldr	r3, [r7, #4]
   148dc:	685b      	ldr	r3, [r3, #4]
   148de:	2b00      	cmp	r3, #0
   148e0:	d103      	bne.n	148ea <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   148e2:	2308      	movs	r3, #8
   148e4:	425b      	negs	r3, r3
   148e6:	60fb      	str	r3, [r7, #12]
        goto exit;
   148e8:	e01f      	b.n	1492a <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   148ea:	687b      	ldr	r3, [r7, #4]
   148ec:	781b      	ldrb	r3, [r3, #0]
   148ee:	b29a      	uxth	r2, r3
   148f0:	4b10      	ldr	r3, [pc, #64]	; (14934 <I2cWriteData+0x6c>)
   148f2:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   148f4:	687b      	ldr	r3, [r7, #4]
   148f6:	685a      	ldr	r2, [r3, #4]
   148f8:	4b0e      	ldr	r3, [pc, #56]	; (14934 <I2cWriteData+0x6c>)
   148fa:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   148fc:	687b      	ldr	r3, [r7, #4]
   148fe:	89da      	ldrh	r2, [r3, #14]
   14900:	4b0c      	ldr	r3, [pc, #48]	; (14934 <I2cWriteData+0x6c>)
   14902:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14904:	230b      	movs	r3, #11
   14906:	18fc      	adds	r4, r7, r3
   14908:	4a0a      	ldr	r2, [pc, #40]	; (14934 <I2cWriteData+0x6c>)
   1490a:	4b0b      	ldr	r3, [pc, #44]	; (14938 <I2cWriteData+0x70>)
   1490c:	0011      	movs	r1, r2
   1490e:	0018      	movs	r0, r3
   14910:	4b0a      	ldr	r3, [pc, #40]	; (1493c <I2cWriteData+0x74>)
   14912:	4798      	blx	r3
   14914:	0003      	movs	r3, r0
   14916:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14918:	230b      	movs	r3, #11
   1491a:	18fb      	adds	r3, r7, r3
   1491c:	781b      	ldrb	r3, [r3, #0]
   1491e:	2b00      	cmp	r3, #0
   14920:	d003      	beq.n	1492a <I2cWriteData+0x62>
        error = ERROR_IO;
   14922:	2306      	movs	r3, #6
   14924:	425b      	negs	r3, r3
   14926:	60fb      	str	r3, [r7, #12]
        goto exit;
   14928:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1492a:	68fb      	ldr	r3, [r7, #12]
}
   1492c:	0018      	movs	r0, r3
   1492e:	46bd      	mov	sp, r7
   14930:	b005      	add	sp, #20
   14932:	bd90      	pop	{r4, r7, pc}
   14934:	20004858 	.word	0x20004858
   14938:	2000482c 	.word	0x2000482c
   1493c:	00013535 	.word	0x00013535

00014940 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   14940:	b590      	push	{r4, r7, lr}
   14942:	b085      	sub	sp, #20
   14944:	af00      	add	r7, sp, #0
   14946:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14948:	2300      	movs	r3, #0
   1494a:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   1494c:	687b      	ldr	r3, [r7, #4]
   1494e:	2b00      	cmp	r3, #0
   14950:	d003      	beq.n	1495a <I2cReadData+0x1a>
   14952:	687b      	ldr	r3, [r7, #4]
   14954:	685b      	ldr	r3, [r3, #4]
   14956:	2b00      	cmp	r3, #0
   14958:	d103      	bne.n	14962 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   1495a:	2308      	movs	r3, #8
   1495c:	425b      	negs	r3, r3
   1495e:	60fb      	str	r3, [r7, #12]
        goto exit;
   14960:	e01f      	b.n	149a2 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   14962:	687b      	ldr	r3, [r7, #4]
   14964:	781b      	ldrb	r3, [r3, #0]
   14966:	b29a      	uxth	r2, r3
   14968:	4b10      	ldr	r3, [pc, #64]	; (149ac <I2cReadData+0x6c>)
   1496a:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   1496c:	687b      	ldr	r3, [r7, #4]
   1496e:	689a      	ldr	r2, [r3, #8]
   14970:	4b0e      	ldr	r3, [pc, #56]	; (149ac <I2cReadData+0x6c>)
   14972:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   14974:	687b      	ldr	r3, [r7, #4]
   14976:	899a      	ldrh	r2, [r3, #12]
   14978:	4b0c      	ldr	r3, [pc, #48]	; (149ac <I2cReadData+0x6c>)
   1497a:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   1497c:	230b      	movs	r3, #11
   1497e:	18fc      	adds	r4, r7, r3
   14980:	4a0a      	ldr	r2, [pc, #40]	; (149ac <I2cReadData+0x6c>)
   14982:	4b0b      	ldr	r3, [pc, #44]	; (149b0 <I2cReadData+0x70>)
   14984:	0011      	movs	r1, r2
   14986:	0018      	movs	r0, r3
   14988:	4b0a      	ldr	r3, [pc, #40]	; (149b4 <I2cReadData+0x74>)
   1498a:	4798      	blx	r3
   1498c:	0003      	movs	r3, r0
   1498e:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14990:	230b      	movs	r3, #11
   14992:	18fb      	adds	r3, r7, r3
   14994:	781b      	ldrb	r3, [r3, #0]
   14996:	2b00      	cmp	r3, #0
   14998:	d003      	beq.n	149a2 <I2cReadData+0x62>
        error = ERROR_IO;
   1499a:	2306      	movs	r3, #6
   1499c:	425b      	negs	r3, r3
   1499e:	60fb      	str	r3, [r7, #12]
        goto exit;
   149a0:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   149a2:	68fb      	ldr	r3, [r7, #12]
}
   149a4:	0018      	movs	r0, r3
   149a6:	46bd      	mov	sp, r7
   149a8:	b005      	add	sp, #20
   149aa:	bd90      	pop	{r4, r7, pc}
   149ac:	20004858 	.word	0x20004858
   149b0:	2000482c 	.word	0x2000482c
   149b4:	00013451 	.word	0x00013451

000149b8 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   149b8:	b590      	push	{r4, r7, lr}
   149ba:	b083      	sub	sp, #12
   149bc:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   149be:	2300      	movs	r3, #0
   149c0:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   149c2:	4b09      	ldr	r3, [pc, #36]	; (149e8 <I2cFreeMutex+0x30>)
   149c4:	6818      	ldr	r0, [r3, #0]
   149c6:	2300      	movs	r3, #0
   149c8:	2200      	movs	r2, #0
   149ca:	2100      	movs	r1, #0
   149cc:	4c07      	ldr	r4, [pc, #28]	; (149ec <I2cFreeMutex+0x34>)
   149ce:	47a0      	blx	r4
   149d0:	0003      	movs	r3, r0
   149d2:	2b01      	cmp	r3, #1
   149d4:	d002      	beq.n	149dc <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   149d6:	2314      	movs	r3, #20
   149d8:	425b      	negs	r3, r3
   149da:	607b      	str	r3, [r7, #4]
    }
    return error;
   149dc:	687b      	ldr	r3, [r7, #4]
}
   149de:	0018      	movs	r0, r3
   149e0:	46bd      	mov	sp, r7
   149e2:	b003      	add	sp, #12
   149e4:	bd90      	pop	{r4, r7, pc}
   149e6:	46c0      	nop			; (mov r8, r8)
   149e8:	20004828 	.word	0x20004828
   149ec:	0001b17d 	.word	0x0001b17d

000149f0 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   149f0:	b580      	push	{r7, lr}
   149f2:	b084      	sub	sp, #16
   149f4:	af00      	add	r7, sp, #0
   149f6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   149f8:	2300      	movs	r3, #0
   149fa:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   149fc:	4b08      	ldr	r3, [pc, #32]	; (14a20 <I2cGetMutex+0x30>)
   149fe:	681b      	ldr	r3, [r3, #0]
   14a00:	687a      	ldr	r2, [r7, #4]
   14a02:	0011      	movs	r1, r2
   14a04:	0018      	movs	r0, r3
   14a06:	4b07      	ldr	r3, [pc, #28]	; (14a24 <I2cGetMutex+0x34>)
   14a08:	4798      	blx	r3
   14a0a:	0003      	movs	r3, r0
   14a0c:	2b01      	cmp	r3, #1
   14a0e:	d002      	beq.n	14a16 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14a10:	231d      	movs	r3, #29
   14a12:	425b      	negs	r3, r3
   14a14:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14a16:	68fb      	ldr	r3, [r7, #12]
}
   14a18:	0018      	movs	r0, r3
   14a1a:	46bd      	mov	sp, r7
   14a1c:	b004      	add	sp, #16
   14a1e:	bd80      	pop	{r7, pc}
   14a20:	20004828 	.word	0x20004828
   14a24:	0001be8d 	.word	0x0001be8d

00014a28 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   14a28:	b580      	push	{r7, lr}
   14a2a:	b084      	sub	sp, #16
   14a2c:	af00      	add	r7, sp, #0
   14a2e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14a30:	2300      	movs	r3, #0
   14a32:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   14a34:	4b04      	ldr	r3, [pc, #16]	; (14a48 <I2cGetSemaphoreHandle+0x20>)
   14a36:	681a      	ldr	r2, [r3, #0]
   14a38:	687b      	ldr	r3, [r7, #4]
   14a3a:	601a      	str	r2, [r3, #0]
    return error;
   14a3c:	68fb      	ldr	r3, [r7, #12]
}
   14a3e:	0018      	movs	r0, r3
   14a40:	46bd      	mov	sp, r7
   14a42:	b004      	add	sp, #16
   14a44:	bd80      	pop	{r7, pc}
   14a46:	46c0      	nop			; (mov r8, r8)
   14a48:	20004854 	.word	0x20004854

00014a4c <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   14a4c:	b580      	push	{r7, lr}
   14a4e:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   14a50:	4b02      	ldr	r3, [pc, #8]	; (14a5c <I2cGetTaskErrorStatus+0x10>)
   14a52:	781b      	ldrb	r3, [r3, #0]
}
   14a54:	0018      	movs	r0, r3
   14a56:	46bd      	mov	sp, r7
   14a58:	bd80      	pop	{r7, pc}
   14a5a:	46c0      	nop			; (mov r8, r8)
   14a5c:	20000608 	.word	0x20000608

00014a60 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   14a60:	b580      	push	{r7, lr}
   14a62:	b082      	sub	sp, #8
   14a64:	af00      	add	r7, sp, #0
   14a66:	0002      	movs	r2, r0
   14a68:	1dfb      	adds	r3, r7, #7
   14a6a:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   14a6c:	4b03      	ldr	r3, [pc, #12]	; (14a7c <I2cSetTaskErrorStatus+0x1c>)
   14a6e:	1dfa      	adds	r2, r7, #7
   14a70:	7812      	ldrb	r2, [r2, #0]
   14a72:	701a      	strb	r2, [r3, #0]
}
   14a74:	46c0      	nop			; (mov r8, r8)
   14a76:	46bd      	mov	sp, r7
   14a78:	b002      	add	sp, #8
   14a7a:	bd80      	pop	{r7, pc}
   14a7c:	20000608 	.word	0x20000608

00014a80 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   14a80:	b580      	push	{r7, lr}
   14a82:	b084      	sub	sp, #16
   14a84:	af00      	add	r7, sp, #0
   14a86:	6078      	str	r0, [r7, #4]
   14a88:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   14a8a:	2300      	movs	r3, #0
   14a8c:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   14a8e:	2300      	movs	r3, #0
   14a90:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14a92:	2396      	movs	r3, #150	; 0x96
   14a94:	005b      	lsls	r3, r3, #1
   14a96:	0018      	movs	r0, r3
   14a98:	4b28      	ldr	r3, [pc, #160]	; (14b3c <I2cWriteDataWait+0xbc>)
   14a9a:	4798      	blx	r3
   14a9c:	0003      	movs	r3, r0
   14a9e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14aa0:	68fb      	ldr	r3, [r7, #12]
   14aa2:	2b00      	cmp	r3, #0
   14aa4:	d138      	bne.n	14b18 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14aa6:	2308      	movs	r3, #8
   14aa8:	18fb      	adds	r3, r7, r3
   14aaa:	0018      	movs	r0, r3
   14aac:	4b24      	ldr	r3, [pc, #144]	; (14b40 <I2cWriteDataWait+0xc0>)
   14aae:	4798      	blx	r3
   14ab0:	0003      	movs	r3, r0
   14ab2:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14ab4:	68fb      	ldr	r3, [r7, #12]
   14ab6:	2b00      	cmp	r3, #0
   14ab8:	d130      	bne.n	14b1c <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14aba:	687b      	ldr	r3, [r7, #4]
   14abc:	0018      	movs	r0, r3
   14abe:	4b21      	ldr	r3, [pc, #132]	; (14b44 <I2cWriteDataWait+0xc4>)
   14ac0:	4798      	blx	r3
   14ac2:	0003      	movs	r3, r0
   14ac4:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   14ac6:	68fb      	ldr	r3, [r7, #12]
   14ac8:	2b00      	cmp	r3, #0
   14aca:	d12a      	bne.n	14b22 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14acc:	68bb      	ldr	r3, [r7, #8]
   14ace:	683a      	ldr	r2, [r7, #0]
   14ad0:	0011      	movs	r1, r2
   14ad2:	0018      	movs	r0, r3
   14ad4:	4b1c      	ldr	r3, [pc, #112]	; (14b48 <I2cWriteDataWait+0xc8>)
   14ad6:	4798      	blx	r3
   14ad8:	0003      	movs	r3, r0
   14ada:	2b01      	cmp	r3, #1
   14adc:	d111      	bne.n	14b02 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14ade:	4b1b      	ldr	r3, [pc, #108]	; (14b4c <I2cWriteDataWait+0xcc>)
   14ae0:	4798      	blx	r3
   14ae2:	1e03      	subs	r3, r0, #0
   14ae4:	d011      	beq.n	14b0a <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   14ae6:	2000      	movs	r0, #0
   14ae8:	4b19      	ldr	r3, [pc, #100]	; (14b50 <I2cWriteDataWait+0xd0>)
   14aea:	4798      	blx	r3
            if (error != ERROR_NONE) {
   14aec:	68fb      	ldr	r3, [r7, #12]
   14aee:	2b00      	cmp	r3, #0
   14af0:	d003      	beq.n	14afa <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   14af2:	2321      	movs	r3, #33	; 0x21
   14af4:	425b      	negs	r3, r3
   14af6:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   14af8:	e014      	b.n	14b24 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   14afa:	2303      	movs	r3, #3
   14afc:	425b      	negs	r3, r3
   14afe:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   14b00:	e010      	b.n	14b24 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14b02:	2303      	movs	r3, #3
   14b04:	425b      	negs	r3, r3
   14b06:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   14b08:	e00c      	b.n	14b24 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   14b0a:	4b12      	ldr	r3, [pc, #72]	; (14b54 <I2cWriteDataWait+0xd4>)
   14b0c:	4798      	blx	r3
   14b0e:	0002      	movs	r2, r0
   14b10:	68fb      	ldr	r3, [r7, #12]
   14b12:	4313      	orrs	r3, r2
   14b14:	60fb      	str	r3, [r7, #12]
   14b16:	e002      	b.n	14b1e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14b18:	46c0      	nop			; (mov r8, r8)
   14b1a:	e000      	b.n	14b1e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14b1c:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14b1e:	68fb      	ldr	r3, [r7, #12]
   14b20:	e007      	b.n	14b32 <I2cWriteDataWait+0xb2>
        goto exitError0;
   14b22:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   14b24:	4b0b      	ldr	r3, [pc, #44]	; (14b54 <I2cWriteDataWait+0xd4>)
   14b26:	4798      	blx	r3
   14b28:	0002      	movs	r2, r0
   14b2a:	68fb      	ldr	r3, [r7, #12]
   14b2c:	4313      	orrs	r3, r2
   14b2e:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   14b30:	68fb      	ldr	r3, [r7, #12]
}
   14b32:	0018      	movs	r0, r3
   14b34:	46bd      	mov	sp, r7
   14b36:	b004      	add	sp, #16
   14b38:	bd80      	pop	{r7, pc}
   14b3a:	46c0      	nop			; (mov r8, r8)
   14b3c:	000149f1 	.word	0x000149f1
   14b40:	00014a29 	.word	0x00014a29
   14b44:	000148c9 	.word	0x000148c9
   14b48:	0001be8d 	.word	0x0001be8d
   14b4c:	00014a4d 	.word	0x00014a4d
   14b50:	00014a61 	.word	0x00014a61
   14b54:	000149b9 	.word	0x000149b9

00014b58 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   14b58:	b580      	push	{r7, lr}
   14b5a:	b086      	sub	sp, #24
   14b5c:	af00      	add	r7, sp, #0
   14b5e:	60f8      	str	r0, [r7, #12]
   14b60:	60b9      	str	r1, [r7, #8]
   14b62:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   14b64:	2300      	movs	r3, #0
   14b66:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   14b68:	2300      	movs	r3, #0
   14b6a:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14b6c:	2396      	movs	r3, #150	; 0x96
   14b6e:	005b      	lsls	r3, r3, #1
   14b70:	0018      	movs	r0, r3
   14b72:	4b35      	ldr	r3, [pc, #212]	; (14c48 <I2cReadDataWait+0xf0>)
   14b74:	4798      	blx	r3
   14b76:	0003      	movs	r3, r0
   14b78:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14b7a:	697b      	ldr	r3, [r7, #20]
   14b7c:	2b00      	cmp	r3, #0
   14b7e:	d155      	bne.n	14c2c <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14b80:	2310      	movs	r3, #16
   14b82:	18fb      	adds	r3, r7, r3
   14b84:	0018      	movs	r0, r3
   14b86:	4b31      	ldr	r3, [pc, #196]	; (14c4c <I2cReadDataWait+0xf4>)
   14b88:	4798      	blx	r3
   14b8a:	0003      	movs	r3, r0
   14b8c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14b8e:	697b      	ldr	r3, [r7, #20]
   14b90:	2b00      	cmp	r3, #0
   14b92:	d14d      	bne.n	14c30 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14b94:	68fb      	ldr	r3, [r7, #12]
   14b96:	0018      	movs	r0, r3
   14b98:	4b2d      	ldr	r3, [pc, #180]	; (14c50 <I2cReadDataWait+0xf8>)
   14b9a:	4798      	blx	r3
   14b9c:	0003      	movs	r3, r0
   14b9e:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14ba0:	697b      	ldr	r3, [r7, #20]
   14ba2:	2b00      	cmp	r3, #0
   14ba4:	d147      	bne.n	14c36 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14ba6:	693b      	ldr	r3, [r7, #16]
   14ba8:	687a      	ldr	r2, [r7, #4]
   14baa:	0011      	movs	r1, r2
   14bac:	0018      	movs	r0, r3
   14bae:	4b29      	ldr	r3, [pc, #164]	; (14c54 <I2cReadDataWait+0xfc>)
   14bb0:	4798      	blx	r3
   14bb2:	0003      	movs	r3, r0
   14bb4:	2b01      	cmp	r3, #1
   14bb6:	d118      	bne.n	14bea <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14bb8:	4b27      	ldr	r3, [pc, #156]	; (14c58 <I2cReadDataWait+0x100>)
   14bba:	4798      	blx	r3
   14bbc:	1e03      	subs	r3, r0, #0
   14bbe:	d006      	beq.n	14bce <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14bc0:	2000      	movs	r0, #0
   14bc2:	4b26      	ldr	r3, [pc, #152]	; (14c5c <I2cReadDataWait+0x104>)
   14bc4:	4798      	blx	r3
            error = ERROR_ABORTED;
   14bc6:	2303      	movs	r3, #3
   14bc8:	425b      	negs	r3, r3
   14bca:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14bcc:	e034      	b.n	14c38 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   14bce:	68bb      	ldr	r3, [r7, #8]
   14bd0:	0018      	movs	r0, r3
   14bd2:	4b23      	ldr	r3, [pc, #140]	; (14c60 <I2cReadDataWait+0x108>)
   14bd4:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   14bd6:	68fb      	ldr	r3, [r7, #12]
   14bd8:	0018      	movs	r0, r3
   14bda:	4b22      	ldr	r3, [pc, #136]	; (14c64 <I2cReadDataWait+0x10c>)
   14bdc:	4798      	blx	r3
   14bde:	0003      	movs	r3, r0
   14be0:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14be2:	697b      	ldr	r3, [r7, #20]
   14be4:	2b00      	cmp	r3, #0
   14be6:	d004      	beq.n	14bf2 <I2cReadDataWait+0x9a>
        goto exitError0;
   14be8:	e026      	b.n	14c38 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   14bea:	2303      	movs	r3, #3
   14bec:	425b      	negs	r3, r3
   14bee:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14bf0:	e022      	b.n	14c38 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14bf2:	693b      	ldr	r3, [r7, #16]
   14bf4:	687a      	ldr	r2, [r7, #4]
   14bf6:	0011      	movs	r1, r2
   14bf8:	0018      	movs	r0, r3
   14bfa:	4b16      	ldr	r3, [pc, #88]	; (14c54 <I2cReadDataWait+0xfc>)
   14bfc:	4798      	blx	r3
   14bfe:	0003      	movs	r3, r0
   14c00:	2b01      	cmp	r3, #1
   14c02:	d10a      	bne.n	14c1a <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14c04:	4b14      	ldr	r3, [pc, #80]	; (14c58 <I2cReadDataWait+0x100>)
   14c06:	4798      	blx	r3
   14c08:	1e03      	subs	r3, r0, #0
   14c0a:	d00a      	beq.n	14c22 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   14c0c:	2000      	movs	r0, #0
   14c0e:	4b13      	ldr	r3, [pc, #76]	; (14c5c <I2cReadDataWait+0x104>)
   14c10:	4798      	blx	r3
            error = ERROR_ABORTED;
   14c12:	2303      	movs	r3, #3
   14c14:	425b      	negs	r3, r3
   14c16:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14c18:	e00e      	b.n	14c38 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14c1a:	2303      	movs	r3, #3
   14c1c:	425b      	negs	r3, r3
   14c1e:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14c20:	e00a      	b.n	14c38 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   14c22:	4b11      	ldr	r3, [pc, #68]	; (14c68 <I2cReadDataWait+0x110>)
   14c24:	4798      	blx	r3
   14c26:	0003      	movs	r3, r0
   14c28:	617b      	str	r3, [r7, #20]
   14c2a:	e002      	b.n	14c32 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14c2c:	46c0      	nop			; (mov r8, r8)
   14c2e:	e000      	b.n	14c32 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14c30:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14c32:	697b      	ldr	r3, [r7, #20]
   14c34:	e003      	b.n	14c3e <I2cReadDataWait+0xe6>
        goto exitError0;
   14c36:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   14c38:	4b0b      	ldr	r3, [pc, #44]	; (14c68 <I2cReadDataWait+0x110>)
   14c3a:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14c3c:	697b      	ldr	r3, [r7, #20]
}
   14c3e:	0018      	movs	r0, r3
   14c40:	46bd      	mov	sp, r7
   14c42:	b006      	add	sp, #24
   14c44:	bd80      	pop	{r7, pc}
   14c46:	46c0      	nop			; (mov r8, r8)
   14c48:	000149f1 	.word	0x000149f1
   14c4c:	00014a29 	.word	0x00014a29
   14c50:	000148c9 	.word	0x000148c9
   14c54:	0001be8d 	.word	0x0001be8d
   14c58:	00014a4d 	.word	0x00014a4d
   14c5c:	00014a61 	.word	0x00014a61
   14c60:	0001cbe1 	.word	0x0001cbe1
   14c64:	00014941 	.word	0x00014941
   14c68:	000149b9 	.word	0x000149b9

00014c6c <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   14c6c:	b5b0      	push	{r4, r5, r7, lr}
   14c6e:	b086      	sub	sp, #24
   14c70:	af00      	add	r7, sp, #0
   14c72:	60f8      	str	r0, [r7, #12]
   14c74:	0008      	movs	r0, r1
   14c76:	607a      	str	r2, [r7, #4]
   14c78:	0019      	movs	r1, r3
   14c7a:	230b      	movs	r3, #11
   14c7c:	18fb      	adds	r3, r7, r3
   14c7e:	1c02      	adds	r2, r0, #0
   14c80:	701a      	strb	r2, [r3, #0]
   14c82:	2308      	movs	r3, #8
   14c84:	18fb      	adds	r3, r7, r3
   14c86:	1c0a      	adds	r2, r1, #0
   14c88:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   14c8a:	68fb      	ldr	r3, [r7, #12]
   14c8c:	685c      	ldr	r4, [r3, #4]
   14c8e:	68fb      	ldr	r3, [r7, #12]
   14c90:	6898      	ldr	r0, [r3, #8]
   14c92:	2308      	movs	r3, #8
   14c94:	18fb      	adds	r3, r7, r3
   14c96:	881d      	ldrh	r5, [r3, #0]
   14c98:	687a      	ldr	r2, [r7, #4]
   14c9a:	230b      	movs	r3, #11
   14c9c:	18fb      	adds	r3, r7, r3
   14c9e:	7819      	ldrb	r1, [r3, #0]
   14ca0:	002b      	movs	r3, r5
   14ca2:	47a0      	blx	r4
   14ca4:	0003      	movs	r3, r0
   14ca6:	617b      	str	r3, [r7, #20]

  return ret;
   14ca8:	697b      	ldr	r3, [r7, #20]
}
   14caa:	0018      	movs	r0, r3
   14cac:	46bd      	mov	sp, r7
   14cae:	b006      	add	sp, #24
   14cb0:	bdb0      	pop	{r4, r5, r7, pc}

00014cb2 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   14cb2:	b5b0      	push	{r4, r5, r7, lr}
   14cb4:	b086      	sub	sp, #24
   14cb6:	af00      	add	r7, sp, #0
   14cb8:	60f8      	str	r0, [r7, #12]
   14cba:	0008      	movs	r0, r1
   14cbc:	607a      	str	r2, [r7, #4]
   14cbe:	0019      	movs	r1, r3
   14cc0:	230b      	movs	r3, #11
   14cc2:	18fb      	adds	r3, r7, r3
   14cc4:	1c02      	adds	r2, r0, #0
   14cc6:	701a      	strb	r2, [r3, #0]
   14cc8:	2308      	movs	r3, #8
   14cca:	18fb      	adds	r3, r7, r3
   14ccc:	1c0a      	adds	r2, r1, #0
   14cce:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   14cd0:	68fb      	ldr	r3, [r7, #12]
   14cd2:	681c      	ldr	r4, [r3, #0]
   14cd4:	68fb      	ldr	r3, [r7, #12]
   14cd6:	6898      	ldr	r0, [r3, #8]
   14cd8:	2308      	movs	r3, #8
   14cda:	18fb      	adds	r3, r7, r3
   14cdc:	881d      	ldrh	r5, [r3, #0]
   14cde:	687a      	ldr	r2, [r7, #4]
   14ce0:	230b      	movs	r3, #11
   14ce2:	18fb      	adds	r3, r7, r3
   14ce4:	7819      	ldrb	r1, [r3, #0]
   14ce6:	002b      	movs	r3, r5
   14ce8:	47a0      	blx	r4
   14cea:	0003      	movs	r3, r0
   14cec:	617b      	str	r3, [r7, #20]

  return ret;
   14cee:	697b      	ldr	r3, [r7, #20]
}
   14cf0:	0018      	movs	r0, r3
   14cf2:	46bd      	mov	sp, r7
   14cf4:	b006      	add	sp, #24
   14cf6:	bdb0      	pop	{r4, r5, r7, pc}

00014cf8 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   14cf8:	b580      	push	{r7, lr}
   14cfa:	b082      	sub	sp, #8
   14cfc:	af00      	add	r7, sp, #0
   14cfe:	0002      	movs	r2, r0
   14d00:	1dbb      	adds	r3, r7, #6
   14d02:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   14d04:	1dbb      	adds	r3, r7, #6
   14d06:	2200      	movs	r2, #0
   14d08:	5e9a      	ldrsh	r2, [r3, r2]
   14d0a:	4b06      	ldr	r3, [pc, #24]	; (14d24 <lsm6dso_from_fs2_to_mg+0x2c>)
   14d0c:	0010      	movs	r0, r2
   14d0e:	4798      	blx	r3
   14d10:	1c02      	adds	r2, r0, #0
   14d12:	4b05      	ldr	r3, [pc, #20]	; (14d28 <lsm6dso_from_fs2_to_mg+0x30>)
   14d14:	4905      	ldr	r1, [pc, #20]	; (14d2c <lsm6dso_from_fs2_to_mg+0x34>)
   14d16:	1c10      	adds	r0, r2, #0
   14d18:	4798      	blx	r3
   14d1a:	1c03      	adds	r3, r0, #0
}
   14d1c:	1c18      	adds	r0, r3, #0
   14d1e:	46bd      	mov	sp, r7
   14d20:	b002      	add	sp, #8
   14d22:	bd80      	pop	{r7, pc}
   14d24:	00033bf5 	.word	0x00033bf5
   14d28:	00033975 	.word	0x00033975
   14d2c:	3d79db23 	.word	0x3d79db23

00014d30 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   14d30:	b590      	push	{r4, r7, lr}
   14d32:	b085      	sub	sp, #20
   14d34:	af00      	add	r7, sp, #0
   14d36:	6078      	str	r0, [r7, #4]
   14d38:	000a      	movs	r2, r1
   14d3a:	1cfb      	adds	r3, r7, #3
   14d3c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14d3e:	2308      	movs	r3, #8
   14d40:	18fa      	adds	r2, r7, r3
   14d42:	6878      	ldr	r0, [r7, #4]
   14d44:	2301      	movs	r3, #1
   14d46:	2110      	movs	r1, #16
   14d48:	4c12      	ldr	r4, [pc, #72]	; (14d94 <lsm6dso_xl_full_scale_set+0x64>)
   14d4a:	47a0      	blx	r4
   14d4c:	0003      	movs	r3, r0
   14d4e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14d50:	68fb      	ldr	r3, [r7, #12]
   14d52:	2b00      	cmp	r3, #0
   14d54:	d119      	bne.n	14d8a <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   14d56:	1cfb      	adds	r3, r7, #3
   14d58:	781b      	ldrb	r3, [r3, #0]
   14d5a:	2203      	movs	r2, #3
   14d5c:	4013      	ands	r3, r2
   14d5e:	b2da      	uxtb	r2, r3
   14d60:	2308      	movs	r3, #8
   14d62:	18fb      	adds	r3, r7, r3
   14d64:	2103      	movs	r1, #3
   14d66:	400a      	ands	r2, r1
   14d68:	0090      	lsls	r0, r2, #2
   14d6a:	781a      	ldrb	r2, [r3, #0]
   14d6c:	210c      	movs	r1, #12
   14d6e:	438a      	bics	r2, r1
   14d70:	1c11      	adds	r1, r2, #0
   14d72:	1c02      	adds	r2, r0, #0
   14d74:	430a      	orrs	r2, r1
   14d76:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14d78:	2308      	movs	r3, #8
   14d7a:	18fa      	adds	r2, r7, r3
   14d7c:	6878      	ldr	r0, [r7, #4]
   14d7e:	2301      	movs	r3, #1
   14d80:	2110      	movs	r1, #16
   14d82:	4c05      	ldr	r4, [pc, #20]	; (14d98 <lsm6dso_xl_full_scale_set+0x68>)
   14d84:	47a0      	blx	r4
   14d86:	0003      	movs	r3, r0
   14d88:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14d8a:	68fb      	ldr	r3, [r7, #12]
}
   14d8c:	0018      	movs	r0, r3
   14d8e:	46bd      	mov	sp, r7
   14d90:	b005      	add	sp, #20
   14d92:	bd90      	pop	{r4, r7, pc}
   14d94:	00014c6d 	.word	0x00014c6d
   14d98:	00014cb3 	.word	0x00014cb3

00014d9c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   14d9c:	b590      	push	{r4, r7, lr}
   14d9e:	b087      	sub	sp, #28
   14da0:	af00      	add	r7, sp, #0
   14da2:	6078      	str	r0, [r7, #4]
   14da4:	000a      	movs	r2, r1
   14da6:	1cfb      	adds	r3, r7, #3
   14da8:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   14daa:	2317      	movs	r3, #23
   14dac:	18fb      	adds	r3, r7, r3
   14dae:	1cfa      	adds	r2, r7, #3
   14db0:	7812      	ldrb	r2, [r2, #0]
   14db2:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   14db4:	230c      	movs	r3, #12
   14db6:	18fa      	adds	r2, r7, r3
   14db8:	687b      	ldr	r3, [r7, #4]
   14dba:	0011      	movs	r1, r2
   14dbc:	0018      	movs	r0, r3
   14dbe:	4ba4      	ldr	r3, [pc, #656]	; (15050 <lsm6dso_xl_data_rate_set+0x2b4>)
   14dc0:	4798      	blx	r3
   14dc2:	0003      	movs	r3, r0
   14dc4:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   14dc6:	693b      	ldr	r3, [r7, #16]
   14dc8:	2b00      	cmp	r3, #0
   14dca:	d000      	beq.n	14dce <lsm6dso_xl_data_rate_set+0x32>
   14dcc:	e113      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14dce:	230c      	movs	r3, #12
   14dd0:	18fb      	adds	r3, r7, r3
   14dd2:	781b      	ldrb	r3, [r3, #0]
   14dd4:	07db      	lsls	r3, r3, #31
   14dd6:	0fdb      	lsrs	r3, r3, #31
   14dd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14dda:	230c      	movs	r3, #12
   14ddc:	18fb      	adds	r3, r7, r3
   14dde:	781b      	ldrb	r3, [r3, #0]
   14de0:	079b      	lsls	r3, r3, #30
   14de2:	0fdb      	lsrs	r3, r3, #31
   14de4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14de6:	4313      	orrs	r3, r2
   14de8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14dea:	230c      	movs	r3, #12
   14dec:	18fb      	adds	r3, r7, r3
   14dee:	781b      	ldrb	r3, [r3, #0]
   14df0:	075b      	lsls	r3, r3, #29
   14df2:	0fdb      	lsrs	r3, r3, #31
   14df4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14df6:	4313      	orrs	r3, r2
   14df8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14dfa:	230c      	movs	r3, #12
   14dfc:	18fb      	adds	r3, r7, r3
   14dfe:	781b      	ldrb	r3, [r3, #0]
   14e00:	071b      	lsls	r3, r3, #28
   14e02:	0fdb      	lsrs	r3, r3, #31
   14e04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14e06:	4313      	orrs	r3, r2
   14e08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14e0a:	230c      	movs	r3, #12
   14e0c:	18fb      	adds	r3, r7, r3
   14e0e:	781b      	ldrb	r3, [r3, #0]
   14e10:	06db      	lsls	r3, r3, #27
   14e12:	0fdb      	lsrs	r3, r3, #31
   14e14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14e16:	4313      	orrs	r3, r2
   14e18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14e1a:	230c      	movs	r3, #12
   14e1c:	18fb      	adds	r3, r7, r3
   14e1e:	781b      	ldrb	r3, [r3, #0]
   14e20:	069b      	lsls	r3, r3, #26
   14e22:	0fdb      	lsrs	r3, r3, #31
   14e24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14e26:	4313      	orrs	r3, r2
   14e28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14e2a:	230c      	movs	r3, #12
   14e2c:	18fb      	adds	r3, r7, r3
   14e2e:	781b      	ldrb	r3, [r3, #0]
   14e30:	065b      	lsls	r3, r3, #25
   14e32:	0fdb      	lsrs	r3, r3, #31
   14e34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14e36:	4313      	orrs	r3, r2
   14e38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14e3a:	230c      	movs	r3, #12
   14e3c:	18fb      	adds	r3, r7, r3
   14e3e:	781b      	ldrb	r3, [r3, #0]
   14e40:	061b      	lsls	r3, r3, #24
   14e42:	0fdb      	lsrs	r3, r3, #31
   14e44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14e46:	4313      	orrs	r3, r2
   14e48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14e4a:	230c      	movs	r3, #12
   14e4c:	18fb      	adds	r3, r7, r3
   14e4e:	785b      	ldrb	r3, [r3, #1]
   14e50:	07db      	lsls	r3, r3, #31
   14e52:	0fdb      	lsrs	r3, r3, #31
   14e54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14e56:	4313      	orrs	r3, r2
   14e58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14e5a:	230c      	movs	r3, #12
   14e5c:	18fb      	adds	r3, r7, r3
   14e5e:	785b      	ldrb	r3, [r3, #1]
   14e60:	079b      	lsls	r3, r3, #30
   14e62:	0fdb      	lsrs	r3, r3, #31
   14e64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14e66:	4313      	orrs	r3, r2
   14e68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14e6a:	230c      	movs	r3, #12
   14e6c:	18fb      	adds	r3, r7, r3
   14e6e:	785b      	ldrb	r3, [r3, #1]
   14e70:	075b      	lsls	r3, r3, #29
   14e72:	0fdb      	lsrs	r3, r3, #31
   14e74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14e76:	4313      	orrs	r3, r2
   14e78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14e7a:	230c      	movs	r3, #12
   14e7c:	18fb      	adds	r3, r7, r3
   14e7e:	785b      	ldrb	r3, [r3, #1]
   14e80:	071b      	lsls	r3, r3, #28
   14e82:	0fdb      	lsrs	r3, r3, #31
   14e84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14e86:	4313      	orrs	r3, r2
   14e88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14e8a:	230c      	movs	r3, #12
   14e8c:	18fb      	adds	r3, r7, r3
   14e8e:	785b      	ldrb	r3, [r3, #1]
   14e90:	06db      	lsls	r3, r3, #27
   14e92:	0fdb      	lsrs	r3, r3, #31
   14e94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14e96:	4313      	orrs	r3, r2
   14e98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14e9a:	230c      	movs	r3, #12
   14e9c:	18fb      	adds	r3, r7, r3
   14e9e:	785b      	ldrb	r3, [r3, #1]
   14ea0:	069b      	lsls	r3, r3, #26
   14ea2:	0fdb      	lsrs	r3, r3, #31
   14ea4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14ea6:	4313      	orrs	r3, r2
   14ea8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14eaa:	230c      	movs	r3, #12
   14eac:	18fb      	adds	r3, r7, r3
   14eae:	785b      	ldrb	r3, [r3, #1]
   14eb0:	065b      	lsls	r3, r3, #25
   14eb2:	0fdb      	lsrs	r3, r3, #31
   14eb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14eb6:	4313      	orrs	r3, r2
   14eb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   14eba:	230c      	movs	r3, #12
   14ebc:	18fb      	adds	r3, r7, r3
   14ebe:	785b      	ldrb	r3, [r3, #1]
   14ec0:	061b      	lsls	r3, r3, #24
   14ec2:	0fdb      	lsrs	r3, r3, #31
   14ec4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14ec6:	4313      	orrs	r3, r2
   14ec8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14eca:	2b01      	cmp	r3, #1
   14ecc:	d000      	beq.n	14ed0 <lsm6dso_xl_data_rate_set+0x134>
   14ece:	e092      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   14ed0:	230b      	movs	r3, #11
   14ed2:	18fa      	adds	r2, r7, r3
   14ed4:	687b      	ldr	r3, [r7, #4]
   14ed6:	0011      	movs	r1, r2
   14ed8:	0018      	movs	r0, r3
   14eda:	4b5e      	ldr	r3, [pc, #376]	; (15054 <lsm6dso_xl_data_rate_set+0x2b8>)
   14edc:	4798      	blx	r3
   14ede:	0003      	movs	r3, r0
   14ee0:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   14ee2:	693b      	ldr	r3, [r7, #16]
   14ee4:	2b00      	cmp	r3, #0
   14ee6:	d000      	beq.n	14eea <lsm6dso_xl_data_rate_set+0x14e>
   14ee8:	e085      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   14eea:	230b      	movs	r3, #11
   14eec:	18fb      	adds	r3, r7, r3
   14eee:	781b      	ldrb	r3, [r3, #0]
   14ef0:	2b01      	cmp	r3, #1
   14ef2:	d017      	beq.n	14f24 <lsm6dso_xl_data_rate_set+0x188>
   14ef4:	dc02      	bgt.n	14efc <lsm6dso_xl_data_rate_set+0x160>
   14ef6:	2b00      	cmp	r3, #0
   14ef8:	d005      	beq.n	14f06 <lsm6dso_xl_data_rate_set+0x16a>
   14efa:	e076      	b.n	14fea <lsm6dso_xl_data_rate_set+0x24e>
   14efc:	2b02      	cmp	r3, #2
   14efe:	d029      	beq.n	14f54 <lsm6dso_xl_data_rate_set+0x1b8>
   14f00:	2b03      	cmp	r3, #3
   14f02:	d048      	beq.n	14f96 <lsm6dso_xl_data_rate_set+0x1fa>
   14f04:	e071      	b.n	14fea <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   14f06:	1cfb      	adds	r3, r7, #3
   14f08:	781b      	ldrb	r3, [r3, #0]
   14f0a:	2b00      	cmp	r3, #0
   14f0c:	d104      	bne.n	14f18 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   14f0e:	2317      	movs	r3, #23
   14f10:	18fb      	adds	r3, r7, r3
   14f12:	2201      	movs	r2, #1
   14f14:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14f16:	e06e      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14f18:	2317      	movs	r3, #23
   14f1a:	18fb      	adds	r3, r7, r3
   14f1c:	1cfa      	adds	r2, r7, #3
   14f1e:	7812      	ldrb	r2, [r2, #0]
   14f20:	701a      	strb	r2, [r3, #0]
            break;
   14f22:	e068      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14f24:	1cfb      	adds	r3, r7, #3
   14f26:	781b      	ldrb	r3, [r3, #0]
   14f28:	2b00      	cmp	r3, #0
   14f2a:	d104      	bne.n	14f36 <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14f2c:	2317      	movs	r3, #23
   14f2e:	18fb      	adds	r3, r7, r3
   14f30:	2202      	movs	r2, #2
   14f32:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14f34:	e05f      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14f36:	1cfb      	adds	r3, r7, #3
   14f38:	781b      	ldrb	r3, [r3, #0]
   14f3a:	2b01      	cmp	r3, #1
   14f3c:	d104      	bne.n	14f48 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14f3e:	2317      	movs	r3, #23
   14f40:	18fb      	adds	r3, r7, r3
   14f42:	2202      	movs	r2, #2
   14f44:	701a      	strb	r2, [r3, #0]
            break;
   14f46:	e056      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14f48:	2317      	movs	r3, #23
   14f4a:	18fb      	adds	r3, r7, r3
   14f4c:	1cfa      	adds	r2, r7, #3
   14f4e:	7812      	ldrb	r2, [r2, #0]
   14f50:	701a      	strb	r2, [r3, #0]
            break;
   14f52:	e050      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14f54:	1cfb      	adds	r3, r7, #3
   14f56:	781b      	ldrb	r3, [r3, #0]
   14f58:	2b00      	cmp	r3, #0
   14f5a:	d104      	bne.n	14f66 <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14f5c:	2317      	movs	r3, #23
   14f5e:	18fb      	adds	r3, r7, r3
   14f60:	2203      	movs	r2, #3
   14f62:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14f64:	e047      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14f66:	1cfb      	adds	r3, r7, #3
   14f68:	781b      	ldrb	r3, [r3, #0]
   14f6a:	2b01      	cmp	r3, #1
   14f6c:	d104      	bne.n	14f78 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14f6e:	2317      	movs	r3, #23
   14f70:	18fb      	adds	r3, r7, r3
   14f72:	2203      	movs	r2, #3
   14f74:	701a      	strb	r2, [r3, #0]
            break;
   14f76:	e03e      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   14f78:	1cfb      	adds	r3, r7, #3
   14f7a:	781b      	ldrb	r3, [r3, #0]
   14f7c:	2b02      	cmp	r3, #2
   14f7e:	d104      	bne.n	14f8a <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14f80:	2317      	movs	r3, #23
   14f82:	18fb      	adds	r3, r7, r3
   14f84:	2203      	movs	r2, #3
   14f86:	701a      	strb	r2, [r3, #0]
            break;
   14f88:	e035      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14f8a:	2317      	movs	r3, #23
   14f8c:	18fb      	adds	r3, r7, r3
   14f8e:	1cfa      	adds	r2, r7, #3
   14f90:	7812      	ldrb	r2, [r2, #0]
   14f92:	701a      	strb	r2, [r3, #0]
            break;
   14f94:	e02f      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14f96:	1cfb      	adds	r3, r7, #3
   14f98:	781b      	ldrb	r3, [r3, #0]
   14f9a:	2b00      	cmp	r3, #0
   14f9c:	d104      	bne.n	14fa8 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14f9e:	2317      	movs	r3, #23
   14fa0:	18fb      	adds	r3, r7, r3
   14fa2:	2204      	movs	r2, #4
   14fa4:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14fa6:	e026      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14fa8:	1cfb      	adds	r3, r7, #3
   14faa:	781b      	ldrb	r3, [r3, #0]
   14fac:	2b01      	cmp	r3, #1
   14fae:	d104      	bne.n	14fba <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14fb0:	2317      	movs	r3, #23
   14fb2:	18fb      	adds	r3, r7, r3
   14fb4:	2204      	movs	r2, #4
   14fb6:	701a      	strb	r2, [r3, #0]
            break;
   14fb8:	e01d      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   14fba:	1cfb      	adds	r3, r7, #3
   14fbc:	781b      	ldrb	r3, [r3, #0]
   14fbe:	2b02      	cmp	r3, #2
   14fc0:	d104      	bne.n	14fcc <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14fc2:	2317      	movs	r3, #23
   14fc4:	18fb      	adds	r3, r7, r3
   14fc6:	2204      	movs	r2, #4
   14fc8:	701a      	strb	r2, [r3, #0]
            break;
   14fca:	e014      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   14fcc:	1cfb      	adds	r3, r7, #3
   14fce:	781b      	ldrb	r3, [r3, #0]
   14fd0:	2b03      	cmp	r3, #3
   14fd2:	d104      	bne.n	14fde <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14fd4:	2317      	movs	r3, #23
   14fd6:	18fb      	adds	r3, r7, r3
   14fd8:	2204      	movs	r2, #4
   14fda:	701a      	strb	r2, [r3, #0]
            break;
   14fdc:	e00b      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14fde:	2317      	movs	r3, #23
   14fe0:	18fb      	adds	r3, r7, r3
   14fe2:	1cfa      	adds	r2, r7, #3
   14fe4:	7812      	ldrb	r2, [r2, #0]
   14fe6:	701a      	strb	r2, [r3, #0]
            break;
   14fe8:	e005      	b.n	14ff6 <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   14fea:	2317      	movs	r3, #23
   14fec:	18fb      	adds	r3, r7, r3
   14fee:	1cfa      	adds	r2, r7, #3
   14ff0:	7812      	ldrb	r2, [r2, #0]
   14ff2:	701a      	strb	r2, [r3, #0]
            break;
   14ff4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   14ff6:	693b      	ldr	r3, [r7, #16]
   14ff8:	2b00      	cmp	r3, #0
   14ffa:	d108      	bne.n	1500e <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14ffc:	2308      	movs	r3, #8
   14ffe:	18fa      	adds	r2, r7, r3
   15000:	6878      	ldr	r0, [r7, #4]
   15002:	2301      	movs	r3, #1
   15004:	2110      	movs	r1, #16
   15006:	4c14      	ldr	r4, [pc, #80]	; (15058 <lsm6dso_xl_data_rate_set+0x2bc>)
   15008:	47a0      	blx	r4
   1500a:	0003      	movs	r3, r0
   1500c:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   1500e:	693b      	ldr	r3, [r7, #16]
   15010:	2b00      	cmp	r3, #0
   15012:	d118      	bne.n	15046 <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   15014:	2317      	movs	r3, #23
   15016:	18fb      	adds	r3, r7, r3
   15018:	781b      	ldrb	r3, [r3, #0]
   1501a:	220f      	movs	r2, #15
   1501c:	4013      	ands	r3, r2
   1501e:	b2da      	uxtb	r2, r3
   15020:	2308      	movs	r3, #8
   15022:	18fb      	adds	r3, r7, r3
   15024:	0110      	lsls	r0, r2, #4
   15026:	781a      	ldrb	r2, [r3, #0]
   15028:	210f      	movs	r1, #15
   1502a:	400a      	ands	r2, r1
   1502c:	1c11      	adds	r1, r2, #0
   1502e:	1c02      	adds	r2, r0, #0
   15030:	430a      	orrs	r2, r1
   15032:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15034:	2308      	movs	r3, #8
   15036:	18fa      	adds	r2, r7, r3
   15038:	6878      	ldr	r0, [r7, #4]
   1503a:	2301      	movs	r3, #1
   1503c:	2110      	movs	r1, #16
   1503e:	4c07      	ldr	r4, [pc, #28]	; (1505c <lsm6dso_xl_data_rate_set+0x2c0>)
   15040:	47a0      	blx	r4
   15042:	0003      	movs	r3, r0
   15044:	613b      	str	r3, [r7, #16]
  }

  return ret;
   15046:	693b      	ldr	r3, [r7, #16]
}
   15048:	0018      	movs	r0, r3
   1504a:	46bd      	mov	sp, r7
   1504c:	b007      	add	sp, #28
   1504e:	bd90      	pop	{r4, r7, pc}
   15050:	00015879 	.word	0x00015879
   15054:	000158cd 	.word	0x000158cd
   15058:	00014c6d 	.word	0x00014c6d
   1505c:	00014cb3 	.word	0x00014cb3

00015060 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   15060:	b590      	push	{r4, r7, lr}
   15062:	b085      	sub	sp, #20
   15064:	af00      	add	r7, sp, #0
   15066:	6078      	str	r0, [r7, #4]
   15068:	000a      	movs	r2, r1
   1506a:	1cfb      	adds	r3, r7, #3
   1506c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1506e:	2308      	movs	r3, #8
   15070:	18fa      	adds	r2, r7, r3
   15072:	6878      	ldr	r0, [r7, #4]
   15074:	2301      	movs	r3, #1
   15076:	2111      	movs	r1, #17
   15078:	4c12      	ldr	r4, [pc, #72]	; (150c4 <lsm6dso_gy_full_scale_set+0x64>)
   1507a:	47a0      	blx	r4
   1507c:	0003      	movs	r3, r0
   1507e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15080:	68fb      	ldr	r3, [r7, #12]
   15082:	2b00      	cmp	r3, #0
   15084:	d119      	bne.n	150ba <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   15086:	1cfb      	adds	r3, r7, #3
   15088:	781b      	ldrb	r3, [r3, #0]
   1508a:	2207      	movs	r2, #7
   1508c:	4013      	ands	r3, r2
   1508e:	b2da      	uxtb	r2, r3
   15090:	2308      	movs	r3, #8
   15092:	18fb      	adds	r3, r7, r3
   15094:	2107      	movs	r1, #7
   15096:	400a      	ands	r2, r1
   15098:	1890      	adds	r0, r2, r2
   1509a:	781a      	ldrb	r2, [r3, #0]
   1509c:	210e      	movs	r1, #14
   1509e:	438a      	bics	r2, r1
   150a0:	1c11      	adds	r1, r2, #0
   150a2:	1c02      	adds	r2, r0, #0
   150a4:	430a      	orrs	r2, r1
   150a6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   150a8:	2308      	movs	r3, #8
   150aa:	18fa      	adds	r2, r7, r3
   150ac:	6878      	ldr	r0, [r7, #4]
   150ae:	2301      	movs	r3, #1
   150b0:	2111      	movs	r1, #17
   150b2:	4c05      	ldr	r4, [pc, #20]	; (150c8 <lsm6dso_gy_full_scale_set+0x68>)
   150b4:	47a0      	blx	r4
   150b6:	0003      	movs	r3, r0
   150b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   150ba:	68fb      	ldr	r3, [r7, #12]
}
   150bc:	0018      	movs	r0, r3
   150be:	46bd      	mov	sp, r7
   150c0:	b005      	add	sp, #20
   150c2:	bd90      	pop	{r4, r7, pc}
   150c4:	00014c6d 	.word	0x00014c6d
   150c8:	00014cb3 	.word	0x00014cb3

000150cc <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   150cc:	b590      	push	{r4, r7, lr}
   150ce:	b087      	sub	sp, #28
   150d0:	af00      	add	r7, sp, #0
   150d2:	6078      	str	r0, [r7, #4]
   150d4:	000a      	movs	r2, r1
   150d6:	1cfb      	adds	r3, r7, #3
   150d8:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   150da:	2317      	movs	r3, #23
   150dc:	18fb      	adds	r3, r7, r3
   150de:	1cfa      	adds	r2, r7, #3
   150e0:	7812      	ldrb	r2, [r2, #0]
   150e2:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   150e4:	230c      	movs	r3, #12
   150e6:	18fa      	adds	r2, r7, r3
   150e8:	687b      	ldr	r3, [r7, #4]
   150ea:	0011      	movs	r1, r2
   150ec:	0018      	movs	r0, r3
   150ee:	4ba4      	ldr	r3, [pc, #656]	; (15380 <lsm6dso_gy_data_rate_set+0x2b4>)
   150f0:	4798      	blx	r3
   150f2:	0003      	movs	r3, r0
   150f4:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   150f6:	693b      	ldr	r3, [r7, #16]
   150f8:	2b00      	cmp	r3, #0
   150fa:	d000      	beq.n	150fe <lsm6dso_gy_data_rate_set+0x32>
   150fc:	e113      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   150fe:	230c      	movs	r3, #12
   15100:	18fb      	adds	r3, r7, r3
   15102:	781b      	ldrb	r3, [r3, #0]
   15104:	07db      	lsls	r3, r3, #31
   15106:	0fdb      	lsrs	r3, r3, #31
   15108:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1510a:	230c      	movs	r3, #12
   1510c:	18fb      	adds	r3, r7, r3
   1510e:	781b      	ldrb	r3, [r3, #0]
   15110:	079b      	lsls	r3, r3, #30
   15112:	0fdb      	lsrs	r3, r3, #31
   15114:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15116:	4313      	orrs	r3, r2
   15118:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1511a:	230c      	movs	r3, #12
   1511c:	18fb      	adds	r3, r7, r3
   1511e:	781b      	ldrb	r3, [r3, #0]
   15120:	075b      	lsls	r3, r3, #29
   15122:	0fdb      	lsrs	r3, r3, #31
   15124:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15126:	4313      	orrs	r3, r2
   15128:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1512a:	230c      	movs	r3, #12
   1512c:	18fb      	adds	r3, r7, r3
   1512e:	781b      	ldrb	r3, [r3, #0]
   15130:	071b      	lsls	r3, r3, #28
   15132:	0fdb      	lsrs	r3, r3, #31
   15134:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15136:	4313      	orrs	r3, r2
   15138:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1513a:	230c      	movs	r3, #12
   1513c:	18fb      	adds	r3, r7, r3
   1513e:	781b      	ldrb	r3, [r3, #0]
   15140:	06db      	lsls	r3, r3, #27
   15142:	0fdb      	lsrs	r3, r3, #31
   15144:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15146:	4313      	orrs	r3, r2
   15148:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1514a:	230c      	movs	r3, #12
   1514c:	18fb      	adds	r3, r7, r3
   1514e:	781b      	ldrb	r3, [r3, #0]
   15150:	069b      	lsls	r3, r3, #26
   15152:	0fdb      	lsrs	r3, r3, #31
   15154:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15156:	4313      	orrs	r3, r2
   15158:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1515a:	230c      	movs	r3, #12
   1515c:	18fb      	adds	r3, r7, r3
   1515e:	781b      	ldrb	r3, [r3, #0]
   15160:	065b      	lsls	r3, r3, #25
   15162:	0fdb      	lsrs	r3, r3, #31
   15164:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15166:	4313      	orrs	r3, r2
   15168:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1516a:	230c      	movs	r3, #12
   1516c:	18fb      	adds	r3, r7, r3
   1516e:	781b      	ldrb	r3, [r3, #0]
   15170:	061b      	lsls	r3, r3, #24
   15172:	0fdb      	lsrs	r3, r3, #31
   15174:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15176:	4313      	orrs	r3, r2
   15178:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1517a:	230c      	movs	r3, #12
   1517c:	18fb      	adds	r3, r7, r3
   1517e:	785b      	ldrb	r3, [r3, #1]
   15180:	07db      	lsls	r3, r3, #31
   15182:	0fdb      	lsrs	r3, r3, #31
   15184:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15186:	4313      	orrs	r3, r2
   15188:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1518a:	230c      	movs	r3, #12
   1518c:	18fb      	adds	r3, r7, r3
   1518e:	785b      	ldrb	r3, [r3, #1]
   15190:	079b      	lsls	r3, r3, #30
   15192:	0fdb      	lsrs	r3, r3, #31
   15194:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15196:	4313      	orrs	r3, r2
   15198:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1519a:	230c      	movs	r3, #12
   1519c:	18fb      	adds	r3, r7, r3
   1519e:	785b      	ldrb	r3, [r3, #1]
   151a0:	075b      	lsls	r3, r3, #29
   151a2:	0fdb      	lsrs	r3, r3, #31
   151a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   151a6:	4313      	orrs	r3, r2
   151a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   151aa:	230c      	movs	r3, #12
   151ac:	18fb      	adds	r3, r7, r3
   151ae:	785b      	ldrb	r3, [r3, #1]
   151b0:	071b      	lsls	r3, r3, #28
   151b2:	0fdb      	lsrs	r3, r3, #31
   151b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   151b6:	4313      	orrs	r3, r2
   151b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   151ba:	230c      	movs	r3, #12
   151bc:	18fb      	adds	r3, r7, r3
   151be:	785b      	ldrb	r3, [r3, #1]
   151c0:	06db      	lsls	r3, r3, #27
   151c2:	0fdb      	lsrs	r3, r3, #31
   151c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   151c6:	4313      	orrs	r3, r2
   151c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   151ca:	230c      	movs	r3, #12
   151cc:	18fb      	adds	r3, r7, r3
   151ce:	785b      	ldrb	r3, [r3, #1]
   151d0:	069b      	lsls	r3, r3, #26
   151d2:	0fdb      	lsrs	r3, r3, #31
   151d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   151d6:	4313      	orrs	r3, r2
   151d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   151da:	230c      	movs	r3, #12
   151dc:	18fb      	adds	r3, r7, r3
   151de:	785b      	ldrb	r3, [r3, #1]
   151e0:	065b      	lsls	r3, r3, #25
   151e2:	0fdb      	lsrs	r3, r3, #31
   151e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   151e6:	4313      	orrs	r3, r2
   151e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   151ea:	230c      	movs	r3, #12
   151ec:	18fb      	adds	r3, r7, r3
   151ee:	785b      	ldrb	r3, [r3, #1]
   151f0:	061b      	lsls	r3, r3, #24
   151f2:	0fdb      	lsrs	r3, r3, #31
   151f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   151f6:	4313      	orrs	r3, r2
   151f8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   151fa:	2b01      	cmp	r3, #1
   151fc:	d000      	beq.n	15200 <lsm6dso_gy_data_rate_set+0x134>
   151fe:	e092      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   15200:	230b      	movs	r3, #11
   15202:	18fa      	adds	r2, r7, r3
   15204:	687b      	ldr	r3, [r7, #4]
   15206:	0011      	movs	r1, r2
   15208:	0018      	movs	r0, r3
   1520a:	4b5e      	ldr	r3, [pc, #376]	; (15384 <lsm6dso_gy_data_rate_set+0x2b8>)
   1520c:	4798      	blx	r3
   1520e:	0003      	movs	r3, r0
   15210:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   15212:	693b      	ldr	r3, [r7, #16]
   15214:	2b00      	cmp	r3, #0
   15216:	d000      	beq.n	1521a <lsm6dso_gy_data_rate_set+0x14e>
   15218:	e085      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   1521a:	230b      	movs	r3, #11
   1521c:	18fb      	adds	r3, r7, r3
   1521e:	781b      	ldrb	r3, [r3, #0]
   15220:	2b01      	cmp	r3, #1
   15222:	d017      	beq.n	15254 <lsm6dso_gy_data_rate_set+0x188>
   15224:	dc02      	bgt.n	1522c <lsm6dso_gy_data_rate_set+0x160>
   15226:	2b00      	cmp	r3, #0
   15228:	d005      	beq.n	15236 <lsm6dso_gy_data_rate_set+0x16a>
   1522a:	e076      	b.n	1531a <lsm6dso_gy_data_rate_set+0x24e>
   1522c:	2b02      	cmp	r3, #2
   1522e:	d029      	beq.n	15284 <lsm6dso_gy_data_rate_set+0x1b8>
   15230:	2b03      	cmp	r3, #3
   15232:	d048      	beq.n	152c6 <lsm6dso_gy_data_rate_set+0x1fa>
   15234:	e071      	b.n	1531a <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   15236:	1cfb      	adds	r3, r7, #3
   15238:	781b      	ldrb	r3, [r3, #0]
   1523a:	2b00      	cmp	r3, #0
   1523c:	d104      	bne.n	15248 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   1523e:	2317      	movs	r3, #23
   15240:	18fb      	adds	r3, r7, r3
   15242:	2201      	movs	r2, #1
   15244:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15246:	e06e      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15248:	2317      	movs	r3, #23
   1524a:	18fb      	adds	r3, r7, r3
   1524c:	1cfa      	adds	r2, r7, #3
   1524e:	7812      	ldrb	r2, [r2, #0]
   15250:	701a      	strb	r2, [r3, #0]
            break;
   15252:	e068      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15254:	1cfb      	adds	r3, r7, #3
   15256:	781b      	ldrb	r3, [r3, #0]
   15258:	2b00      	cmp	r3, #0
   1525a:	d104      	bne.n	15266 <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   1525c:	2317      	movs	r3, #23
   1525e:	18fb      	adds	r3, r7, r3
   15260:	2202      	movs	r2, #2
   15262:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15264:	e05f      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15266:	1cfb      	adds	r3, r7, #3
   15268:	781b      	ldrb	r3, [r3, #0]
   1526a:	2b01      	cmp	r3, #1
   1526c:	d104      	bne.n	15278 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   1526e:	2317      	movs	r3, #23
   15270:	18fb      	adds	r3, r7, r3
   15272:	2202      	movs	r2, #2
   15274:	701a      	strb	r2, [r3, #0]
            break;
   15276:	e056      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15278:	2317      	movs	r3, #23
   1527a:	18fb      	adds	r3, r7, r3
   1527c:	1cfa      	adds	r2, r7, #3
   1527e:	7812      	ldrb	r2, [r2, #0]
   15280:	701a      	strb	r2, [r3, #0]
            break;
   15282:	e050      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15284:	1cfb      	adds	r3, r7, #3
   15286:	781b      	ldrb	r3, [r3, #0]
   15288:	2b00      	cmp	r3, #0
   1528a:	d104      	bne.n	15296 <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   1528c:	2317      	movs	r3, #23
   1528e:	18fb      	adds	r3, r7, r3
   15290:	2203      	movs	r2, #3
   15292:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15294:	e047      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15296:	1cfb      	adds	r3, r7, #3
   15298:	781b      	ldrb	r3, [r3, #0]
   1529a:	2b01      	cmp	r3, #1
   1529c:	d104      	bne.n	152a8 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   1529e:	2317      	movs	r3, #23
   152a0:	18fb      	adds	r3, r7, r3
   152a2:	2203      	movs	r2, #3
   152a4:	701a      	strb	r2, [r3, #0]
            break;
   152a6:	e03e      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   152a8:	1cfb      	adds	r3, r7, #3
   152aa:	781b      	ldrb	r3, [r3, #0]
   152ac:	2b02      	cmp	r3, #2
   152ae:	d104      	bne.n	152ba <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   152b0:	2317      	movs	r3, #23
   152b2:	18fb      	adds	r3, r7, r3
   152b4:	2203      	movs	r2, #3
   152b6:	701a      	strb	r2, [r3, #0]
            break;
   152b8:	e035      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   152ba:	2317      	movs	r3, #23
   152bc:	18fb      	adds	r3, r7, r3
   152be:	1cfa      	adds	r2, r7, #3
   152c0:	7812      	ldrb	r2, [r2, #0]
   152c2:	701a      	strb	r2, [r3, #0]
            break;
   152c4:	e02f      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   152c6:	1cfb      	adds	r3, r7, #3
   152c8:	781b      	ldrb	r3, [r3, #0]
   152ca:	2b00      	cmp	r3, #0
   152cc:	d104      	bne.n	152d8 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   152ce:	2317      	movs	r3, #23
   152d0:	18fb      	adds	r3, r7, r3
   152d2:	2204      	movs	r2, #4
   152d4:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   152d6:	e026      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   152d8:	1cfb      	adds	r3, r7, #3
   152da:	781b      	ldrb	r3, [r3, #0]
   152dc:	2b01      	cmp	r3, #1
   152de:	d104      	bne.n	152ea <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   152e0:	2317      	movs	r3, #23
   152e2:	18fb      	adds	r3, r7, r3
   152e4:	2204      	movs	r2, #4
   152e6:	701a      	strb	r2, [r3, #0]
            break;
   152e8:	e01d      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   152ea:	1cfb      	adds	r3, r7, #3
   152ec:	781b      	ldrb	r3, [r3, #0]
   152ee:	2b02      	cmp	r3, #2
   152f0:	d104      	bne.n	152fc <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   152f2:	2317      	movs	r3, #23
   152f4:	18fb      	adds	r3, r7, r3
   152f6:	2204      	movs	r2, #4
   152f8:	701a      	strb	r2, [r3, #0]
            break;
   152fa:	e014      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   152fc:	1cfb      	adds	r3, r7, #3
   152fe:	781b      	ldrb	r3, [r3, #0]
   15300:	2b03      	cmp	r3, #3
   15302:	d104      	bne.n	1530e <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15304:	2317      	movs	r3, #23
   15306:	18fb      	adds	r3, r7, r3
   15308:	2204      	movs	r2, #4
   1530a:	701a      	strb	r2, [r3, #0]
            break;
   1530c:	e00b      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   1530e:	2317      	movs	r3, #23
   15310:	18fb      	adds	r3, r7, r3
   15312:	1cfa      	adds	r2, r7, #3
   15314:	7812      	ldrb	r2, [r2, #0]
   15316:	701a      	strb	r2, [r3, #0]
            break;
   15318:	e005      	b.n	15326 <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   1531a:	2317      	movs	r3, #23
   1531c:	18fb      	adds	r3, r7, r3
   1531e:	1cfa      	adds	r2, r7, #3
   15320:	7812      	ldrb	r2, [r2, #0]
   15322:	701a      	strb	r2, [r3, #0]
            break;
   15324:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   15326:	693b      	ldr	r3, [r7, #16]
   15328:	2b00      	cmp	r3, #0
   1532a:	d108      	bne.n	1533e <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1532c:	2308      	movs	r3, #8
   1532e:	18fa      	adds	r2, r7, r3
   15330:	6878      	ldr	r0, [r7, #4]
   15332:	2301      	movs	r3, #1
   15334:	2111      	movs	r1, #17
   15336:	4c14      	ldr	r4, [pc, #80]	; (15388 <lsm6dso_gy_data_rate_set+0x2bc>)
   15338:	47a0      	blx	r4
   1533a:	0003      	movs	r3, r0
   1533c:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   1533e:	693b      	ldr	r3, [r7, #16]
   15340:	2b00      	cmp	r3, #0
   15342:	d118      	bne.n	15376 <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   15344:	2317      	movs	r3, #23
   15346:	18fb      	adds	r3, r7, r3
   15348:	781b      	ldrb	r3, [r3, #0]
   1534a:	220f      	movs	r2, #15
   1534c:	4013      	ands	r3, r2
   1534e:	b2da      	uxtb	r2, r3
   15350:	2308      	movs	r3, #8
   15352:	18fb      	adds	r3, r7, r3
   15354:	0110      	lsls	r0, r2, #4
   15356:	781a      	ldrb	r2, [r3, #0]
   15358:	210f      	movs	r1, #15
   1535a:	400a      	ands	r2, r1
   1535c:	1c11      	adds	r1, r2, #0
   1535e:	1c02      	adds	r2, r0, #0
   15360:	430a      	orrs	r2, r1
   15362:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15364:	2308      	movs	r3, #8
   15366:	18fa      	adds	r2, r7, r3
   15368:	6878      	ldr	r0, [r7, #4]
   1536a:	2301      	movs	r3, #1
   1536c:	2111      	movs	r1, #17
   1536e:	4c07      	ldr	r4, [pc, #28]	; (1538c <lsm6dso_gy_data_rate_set+0x2c0>)
   15370:	47a0      	blx	r4
   15372:	0003      	movs	r3, r0
   15374:	613b      	str	r3, [r7, #16]
  }

  return ret;
   15376:	693b      	ldr	r3, [r7, #16]
}
   15378:	0018      	movs	r0, r3
   1537a:	46bd      	mov	sp, r7
   1537c:	b007      	add	sp, #28
   1537e:	bd90      	pop	{r4, r7, pc}
   15380:	00015879 	.word	0x00015879
   15384:	000158cd 	.word	0x000158cd
   15388:	00014c6d 	.word	0x00014c6d
   1538c:	00014cb3 	.word	0x00014cb3

00015390 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15390:	b590      	push	{r4, r7, lr}
   15392:	b085      	sub	sp, #20
   15394:	af00      	add	r7, sp, #0
   15396:	6078      	str	r0, [r7, #4]
   15398:	000a      	movs	r2, r1
   1539a:	1cfb      	adds	r3, r7, #3
   1539c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1539e:	2308      	movs	r3, #8
   153a0:	18fa      	adds	r2, r7, r3
   153a2:	6878      	ldr	r0, [r7, #4]
   153a4:	2301      	movs	r3, #1
   153a6:	2112      	movs	r1, #18
   153a8:	4c12      	ldr	r4, [pc, #72]	; (153f4 <lsm6dso_block_data_update_set+0x64>)
   153aa:	47a0      	blx	r4
   153ac:	0003      	movs	r3, r0
   153ae:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   153b0:	68fb      	ldr	r3, [r7, #12]
   153b2:	2b00      	cmp	r3, #0
   153b4:	d119      	bne.n	153ea <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   153b6:	1cfb      	adds	r3, r7, #3
   153b8:	781b      	ldrb	r3, [r3, #0]
   153ba:	2201      	movs	r2, #1
   153bc:	4013      	ands	r3, r2
   153be:	b2da      	uxtb	r2, r3
   153c0:	2308      	movs	r3, #8
   153c2:	18fb      	adds	r3, r7, r3
   153c4:	2101      	movs	r1, #1
   153c6:	400a      	ands	r2, r1
   153c8:	0190      	lsls	r0, r2, #6
   153ca:	781a      	ldrb	r2, [r3, #0]
   153cc:	2140      	movs	r1, #64	; 0x40
   153ce:	438a      	bics	r2, r1
   153d0:	1c11      	adds	r1, r2, #0
   153d2:	1c02      	adds	r2, r0, #0
   153d4:	430a      	orrs	r2, r1
   153d6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   153d8:	2308      	movs	r3, #8
   153da:	18fa      	adds	r2, r7, r3
   153dc:	6878      	ldr	r0, [r7, #4]
   153de:	2301      	movs	r3, #1
   153e0:	2112      	movs	r1, #18
   153e2:	4c05      	ldr	r4, [pc, #20]	; (153f8 <lsm6dso_block_data_update_set+0x68>)
   153e4:	47a0      	blx	r4
   153e6:	0003      	movs	r3, r0
   153e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   153ea:	68fb      	ldr	r3, [r7, #12]
}
   153ec:	0018      	movs	r0, r3
   153ee:	46bd      	mov	sp, r7
   153f0:	b005      	add	sp, #20
   153f2:	bd90      	pop	{r4, r7, pc}
   153f4:	00014c6d 	.word	0x00014c6d
   153f8:	00014cb3 	.word	0x00014cb3

000153fc <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   153fc:	b590      	push	{r4, r7, lr}
   153fe:	b085      	sub	sp, #20
   15400:	af00      	add	r7, sp, #0
   15402:	6078      	str	r0, [r7, #4]
   15404:	000a      	movs	r2, r1
   15406:	1cfb      	adds	r3, r7, #3
   15408:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   1540a:	2308      	movs	r3, #8
   1540c:	18fa      	adds	r2, r7, r3
   1540e:	6878      	ldr	r0, [r7, #4]
   15410:	2301      	movs	r3, #1
   15412:	2115      	movs	r1, #21
   15414:	4c12      	ldr	r4, [pc, #72]	; (15460 <lsm6dso_xl_offset_weight_set+0x64>)
   15416:	47a0      	blx	r4
   15418:	0003      	movs	r3, r0
   1541a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1541c:	68fb      	ldr	r3, [r7, #12]
   1541e:	2b00      	cmp	r3, #0
   15420:	d119      	bne.n	15456 <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   15422:	1cfb      	adds	r3, r7, #3
   15424:	781b      	ldrb	r3, [r3, #0]
   15426:	2201      	movs	r2, #1
   15428:	4013      	ands	r3, r2
   1542a:	b2da      	uxtb	r2, r3
   1542c:	2308      	movs	r3, #8
   1542e:	18fb      	adds	r3, r7, r3
   15430:	2101      	movs	r1, #1
   15432:	400a      	ands	r2, r1
   15434:	00d0      	lsls	r0, r2, #3
   15436:	781a      	ldrb	r2, [r3, #0]
   15438:	2108      	movs	r1, #8
   1543a:	438a      	bics	r2, r1
   1543c:	1c11      	adds	r1, r2, #0
   1543e:	1c02      	adds	r2, r0, #0
   15440:	430a      	orrs	r2, r1
   15442:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15444:	2308      	movs	r3, #8
   15446:	18fa      	adds	r2, r7, r3
   15448:	6878      	ldr	r0, [r7, #4]
   1544a:	2301      	movs	r3, #1
   1544c:	2115      	movs	r1, #21
   1544e:	4c05      	ldr	r4, [pc, #20]	; (15464 <lsm6dso_xl_offset_weight_set+0x68>)
   15450:	47a0      	blx	r4
   15452:	0003      	movs	r3, r0
   15454:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15456:	68fb      	ldr	r3, [r7, #12]
}
   15458:	0018      	movs	r0, r3
   1545a:	46bd      	mov	sp, r7
   1545c:	b005      	add	sp, #20
   1545e:	bd90      	pop	{r4, r7, pc}
   15460:	00014c6d 	.word	0x00014c6d
   15464:	00014cb3 	.word	0x00014cb3

00015468 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   15468:	b590      	push	{r4, r7, lr}
   1546a:	b085      	sub	sp, #20
   1546c:	af00      	add	r7, sp, #0
   1546e:	6078      	str	r0, [r7, #4]
   15470:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   15472:	2308      	movs	r3, #8
   15474:	18fa      	adds	r2, r7, r3
   15476:	6878      	ldr	r0, [r7, #4]
   15478:	2301      	movs	r3, #1
   1547a:	211e      	movs	r1, #30
   1547c:	4c08      	ldr	r4, [pc, #32]	; (154a0 <lsm6dso_xl_flag_data_ready_get+0x38>)
   1547e:	47a0      	blx	r4
   15480:	0003      	movs	r3, r0
   15482:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   15484:	2308      	movs	r3, #8
   15486:	18fb      	adds	r3, r7, r3
   15488:	781b      	ldrb	r3, [r3, #0]
   1548a:	07db      	lsls	r3, r3, #31
   1548c:	0fdb      	lsrs	r3, r3, #31
   1548e:	b2db      	uxtb	r3, r3
   15490:	001a      	movs	r2, r3
   15492:	683b      	ldr	r3, [r7, #0]
   15494:	701a      	strb	r2, [r3, #0]

  return ret;
   15496:	68fb      	ldr	r3, [r7, #12]
}
   15498:	0018      	movs	r0, r3
   1549a:	46bd      	mov	sp, r7
   1549c:	b005      	add	sp, #20
   1549e:	bd90      	pop	{r4, r7, pc}
   154a0:	00014c6d 	.word	0x00014c6d

000154a4 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   154a4:	b590      	push	{r4, r7, lr}
   154a6:	b087      	sub	sp, #28
   154a8:	af00      	add	r7, sp, #0
   154aa:	6078      	str	r0, [r7, #4]
   154ac:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   154ae:	230c      	movs	r3, #12
   154b0:	18fa      	adds	r2, r7, r3
   154b2:	6878      	ldr	r0, [r7, #4]
   154b4:	2306      	movs	r3, #6
   154b6:	2128      	movs	r1, #40	; 0x28
   154b8:	4c26      	ldr	r4, [pc, #152]	; (15554 <lsm6dso_acceleration_raw_get+0xb0>)
   154ba:	47a0      	blx	r4
   154bc:	0003      	movs	r3, r0
   154be:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   154c0:	230c      	movs	r3, #12
   154c2:	18fb      	adds	r3, r7, r3
   154c4:	785b      	ldrb	r3, [r3, #1]
   154c6:	b21a      	sxth	r2, r3
   154c8:	683b      	ldr	r3, [r7, #0]
   154ca:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   154cc:	683b      	ldr	r3, [r7, #0]
   154ce:	2200      	movs	r2, #0
   154d0:	5e9b      	ldrsh	r3, [r3, r2]
   154d2:	b29b      	uxth	r3, r3
   154d4:	021b      	lsls	r3, r3, #8
   154d6:	b29a      	uxth	r2, r3
   154d8:	230c      	movs	r3, #12
   154da:	18fb      	adds	r3, r7, r3
   154dc:	781b      	ldrb	r3, [r3, #0]
   154de:	b29b      	uxth	r3, r3
   154e0:	18d3      	adds	r3, r2, r3
   154e2:	b29b      	uxth	r3, r3
   154e4:	b21a      	sxth	r2, r3
   154e6:	683b      	ldr	r3, [r7, #0]
   154e8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   154ea:	683b      	ldr	r3, [r7, #0]
   154ec:	3302      	adds	r3, #2
   154ee:	220c      	movs	r2, #12
   154f0:	18ba      	adds	r2, r7, r2
   154f2:	78d2      	ldrb	r2, [r2, #3]
   154f4:	b212      	sxth	r2, r2
   154f6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   154f8:	683b      	ldr	r3, [r7, #0]
   154fa:	3302      	adds	r3, #2
   154fc:	683a      	ldr	r2, [r7, #0]
   154fe:	3202      	adds	r2, #2
   15500:	2100      	movs	r1, #0
   15502:	5e52      	ldrsh	r2, [r2, r1]
   15504:	b292      	uxth	r2, r2
   15506:	0212      	lsls	r2, r2, #8
   15508:	b291      	uxth	r1, r2
   1550a:	220c      	movs	r2, #12
   1550c:	18ba      	adds	r2, r7, r2
   1550e:	7892      	ldrb	r2, [r2, #2]
   15510:	b292      	uxth	r2, r2
   15512:	188a      	adds	r2, r1, r2
   15514:	b292      	uxth	r2, r2
   15516:	b212      	sxth	r2, r2
   15518:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   1551a:	683b      	ldr	r3, [r7, #0]
   1551c:	3304      	adds	r3, #4
   1551e:	220c      	movs	r2, #12
   15520:	18ba      	adds	r2, r7, r2
   15522:	7952      	ldrb	r2, [r2, #5]
   15524:	b212      	sxth	r2, r2
   15526:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   15528:	683b      	ldr	r3, [r7, #0]
   1552a:	3304      	adds	r3, #4
   1552c:	683a      	ldr	r2, [r7, #0]
   1552e:	3204      	adds	r2, #4
   15530:	2100      	movs	r1, #0
   15532:	5e52      	ldrsh	r2, [r2, r1]
   15534:	b292      	uxth	r2, r2
   15536:	0212      	lsls	r2, r2, #8
   15538:	b291      	uxth	r1, r2
   1553a:	220c      	movs	r2, #12
   1553c:	18ba      	adds	r2, r7, r2
   1553e:	7912      	ldrb	r2, [r2, #4]
   15540:	b292      	uxth	r2, r2
   15542:	188a      	adds	r2, r1, r2
   15544:	b292      	uxth	r2, r2
   15546:	b212      	sxth	r2, r2
   15548:	801a      	strh	r2, [r3, #0]

  return ret;
   1554a:	697b      	ldr	r3, [r7, #20]
}
   1554c:	0018      	movs	r0, r3
   1554e:	46bd      	mov	sp, r7
   15550:	b007      	add	sp, #28
   15552:	bd90      	pop	{r4, r7, pc}
   15554:	00014c6d 	.word	0x00014c6d

00015558 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   15558:	b590      	push	{r4, r7, lr}
   1555a:	b085      	sub	sp, #20
   1555c:	af00      	add	r7, sp, #0
   1555e:	6078      	str	r0, [r7, #4]
   15560:	000a      	movs	r2, r1
   15562:	1cfb      	adds	r3, r7, #3
   15564:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15566:	2308      	movs	r3, #8
   15568:	18fa      	adds	r2, r7, r3
   1556a:	6878      	ldr	r0, [r7, #4]
   1556c:	2301      	movs	r3, #1
   1556e:	2101      	movs	r1, #1
   15570:	4c11      	ldr	r4, [pc, #68]	; (155b8 <lsm6dso_mem_bank_set+0x60>)
   15572:	47a0      	blx	r4
   15574:	0003      	movs	r3, r0
   15576:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15578:	68fb      	ldr	r3, [r7, #12]
   1557a:	2b00      	cmp	r3, #0
   1557c:	d117      	bne.n	155ae <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   1557e:	1cfb      	adds	r3, r7, #3
   15580:	781b      	ldrb	r3, [r3, #0]
   15582:	2203      	movs	r2, #3
   15584:	4013      	ands	r3, r2
   15586:	b2da      	uxtb	r2, r3
   15588:	2308      	movs	r3, #8
   1558a:	18fb      	adds	r3, r7, r3
   1558c:	0190      	lsls	r0, r2, #6
   1558e:	781a      	ldrb	r2, [r3, #0]
   15590:	213f      	movs	r1, #63	; 0x3f
   15592:	400a      	ands	r2, r1
   15594:	1c11      	adds	r1, r2, #0
   15596:	1c02      	adds	r2, r0, #0
   15598:	430a      	orrs	r2, r1
   1559a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   1559c:	2308      	movs	r3, #8
   1559e:	18fa      	adds	r2, r7, r3
   155a0:	6878      	ldr	r0, [r7, #4]
   155a2:	2301      	movs	r3, #1
   155a4:	2101      	movs	r1, #1
   155a6:	4c05      	ldr	r4, [pc, #20]	; (155bc <lsm6dso_mem_bank_set+0x64>)
   155a8:	47a0      	blx	r4
   155aa:	0003      	movs	r3, r0
   155ac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   155ae:	68fb      	ldr	r3, [r7, #12]
}
   155b0:	0018      	movs	r0, r3
   155b2:	46bd      	mov	sp, r7
   155b4:	b005      	add	sp, #20
   155b6:	bd90      	pop	{r4, r7, pc}
   155b8:	00014c6d 	.word	0x00014c6d
   155bc:	00014cb3 	.word	0x00014cb3

000155c0 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   155c0:	b590      	push	{r4, r7, lr}
   155c2:	b085      	sub	sp, #20
   155c4:	af00      	add	r7, sp, #0
   155c6:	6078      	str	r0, [r7, #4]
   155c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   155ca:	683a      	ldr	r2, [r7, #0]
   155cc:	6878      	ldr	r0, [r7, #4]
   155ce:	2301      	movs	r3, #1
   155d0:	210f      	movs	r1, #15
   155d2:	4c04      	ldr	r4, [pc, #16]	; (155e4 <lsm6dso_device_id_get+0x24>)
   155d4:	47a0      	blx	r4
   155d6:	0003      	movs	r3, r0
   155d8:	60fb      	str	r3, [r7, #12]

  return ret;
   155da:	68fb      	ldr	r3, [r7, #12]
}
   155dc:	0018      	movs	r0, r3
   155de:	46bd      	mov	sp, r7
   155e0:	b005      	add	sp, #20
   155e2:	bd90      	pop	{r4, r7, pc}
   155e4:	00014c6d 	.word	0x00014c6d

000155e8 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   155e8:	b590      	push	{r4, r7, lr}
   155ea:	b085      	sub	sp, #20
   155ec:	af00      	add	r7, sp, #0
   155ee:	6078      	str	r0, [r7, #4]
   155f0:	000a      	movs	r2, r1
   155f2:	1cfb      	adds	r3, r7, #3
   155f4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   155f6:	2308      	movs	r3, #8
   155f8:	18fa      	adds	r2, r7, r3
   155fa:	6878      	ldr	r0, [r7, #4]
   155fc:	2301      	movs	r3, #1
   155fe:	2112      	movs	r1, #18
   15600:	4c12      	ldr	r4, [pc, #72]	; (1564c <lsm6dso_reset_set+0x64>)
   15602:	47a0      	blx	r4
   15604:	0003      	movs	r3, r0
   15606:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15608:	68fb      	ldr	r3, [r7, #12]
   1560a:	2b00      	cmp	r3, #0
   1560c:	d119      	bne.n	15642 <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   1560e:	1cfb      	adds	r3, r7, #3
   15610:	781b      	ldrb	r3, [r3, #0]
   15612:	2201      	movs	r2, #1
   15614:	4013      	ands	r3, r2
   15616:	b2da      	uxtb	r2, r3
   15618:	2308      	movs	r3, #8
   1561a:	18fb      	adds	r3, r7, r3
   1561c:	2101      	movs	r1, #1
   1561e:	400a      	ands	r2, r1
   15620:	0010      	movs	r0, r2
   15622:	781a      	ldrb	r2, [r3, #0]
   15624:	2101      	movs	r1, #1
   15626:	438a      	bics	r2, r1
   15628:	1c11      	adds	r1, r2, #0
   1562a:	1c02      	adds	r2, r0, #0
   1562c:	430a      	orrs	r2, r1
   1562e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15630:	2308      	movs	r3, #8
   15632:	18fa      	adds	r2, r7, r3
   15634:	6878      	ldr	r0, [r7, #4]
   15636:	2301      	movs	r3, #1
   15638:	2112      	movs	r1, #18
   1563a:	4c05      	ldr	r4, [pc, #20]	; (15650 <lsm6dso_reset_set+0x68>)
   1563c:	47a0      	blx	r4
   1563e:	0003      	movs	r3, r0
   15640:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15642:	68fb      	ldr	r3, [r7, #12]
}
   15644:	0018      	movs	r0, r3
   15646:	46bd      	mov	sp, r7
   15648:	b005      	add	sp, #20
   1564a:	bd90      	pop	{r4, r7, pc}
   1564c:	00014c6d 	.word	0x00014c6d
   15650:	00014cb3 	.word	0x00014cb3

00015654 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   15654:	b590      	push	{r4, r7, lr}
   15656:	b085      	sub	sp, #20
   15658:	af00      	add	r7, sp, #0
   1565a:	6078      	str	r0, [r7, #4]
   1565c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1565e:	2308      	movs	r3, #8
   15660:	18fa      	adds	r2, r7, r3
   15662:	6878      	ldr	r0, [r7, #4]
   15664:	2301      	movs	r3, #1
   15666:	2112      	movs	r1, #18
   15668:	4c08      	ldr	r4, [pc, #32]	; (1568c <lsm6dso_reset_get+0x38>)
   1566a:	47a0      	blx	r4
   1566c:	0003      	movs	r3, r0
   1566e:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   15670:	2308      	movs	r3, #8
   15672:	18fb      	adds	r3, r7, r3
   15674:	781b      	ldrb	r3, [r3, #0]
   15676:	07db      	lsls	r3, r3, #31
   15678:	0fdb      	lsrs	r3, r3, #31
   1567a:	b2db      	uxtb	r3, r3
   1567c:	001a      	movs	r2, r3
   1567e:	683b      	ldr	r3, [r7, #0]
   15680:	701a      	strb	r2, [r3, #0]

  return ret;
   15682:	68fb      	ldr	r3, [r7, #12]
}
   15684:	0018      	movs	r0, r3
   15686:	46bd      	mov	sp, r7
   15688:	b005      	add	sp, #20
   1568a:	bd90      	pop	{r4, r7, pc}
   1568c:	00014c6d 	.word	0x00014c6d

00015690 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15690:	b590      	push	{r4, r7, lr}
   15692:	b085      	sub	sp, #20
   15694:	af00      	add	r7, sp, #0
   15696:	6078      	str	r0, [r7, #4]
   15698:	000a      	movs	r2, r1
   1569a:	1cfb      	adds	r3, r7, #3
   1569c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1569e:	2308      	movs	r3, #8
   156a0:	18fa      	adds	r2, r7, r3
   156a2:	6878      	ldr	r0, [r7, #4]
   156a4:	2301      	movs	r3, #1
   156a6:	2110      	movs	r1, #16
   156a8:	4c12      	ldr	r4, [pc, #72]	; (156f4 <lsm6dso_xl_filter_lp2_set+0x64>)
   156aa:	47a0      	blx	r4
   156ac:	0003      	movs	r3, r0
   156ae:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   156b0:	68fb      	ldr	r3, [r7, #12]
   156b2:	2b00      	cmp	r3, #0
   156b4:	d119      	bne.n	156ea <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   156b6:	1cfb      	adds	r3, r7, #3
   156b8:	781b      	ldrb	r3, [r3, #0]
   156ba:	2201      	movs	r2, #1
   156bc:	4013      	ands	r3, r2
   156be:	b2da      	uxtb	r2, r3
   156c0:	2308      	movs	r3, #8
   156c2:	18fb      	adds	r3, r7, r3
   156c4:	2101      	movs	r1, #1
   156c6:	400a      	ands	r2, r1
   156c8:	1890      	adds	r0, r2, r2
   156ca:	781a      	ldrb	r2, [r3, #0]
   156cc:	2102      	movs	r1, #2
   156ce:	438a      	bics	r2, r1
   156d0:	1c11      	adds	r1, r2, #0
   156d2:	1c02      	adds	r2, r0, #0
   156d4:	430a      	orrs	r2, r1
   156d6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   156d8:	2308      	movs	r3, #8
   156da:	18fa      	adds	r2, r7, r3
   156dc:	6878      	ldr	r0, [r7, #4]
   156de:	2301      	movs	r3, #1
   156e0:	2110      	movs	r1, #16
   156e2:	4c05      	ldr	r4, [pc, #20]	; (156f8 <lsm6dso_xl_filter_lp2_set+0x68>)
   156e4:	47a0      	blx	r4
   156e6:	0003      	movs	r3, r0
   156e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   156ea:	68fb      	ldr	r3, [r7, #12]
}
   156ec:	0018      	movs	r0, r3
   156ee:	46bd      	mov	sp, r7
   156f0:	b005      	add	sp, #20
   156f2:	bd90      	pop	{r4, r7, pc}
   156f4:	00014c6d 	.word	0x00014c6d
   156f8:	00014cb3 	.word	0x00014cb3

000156fc <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   156fc:	b590      	push	{r4, r7, lr}
   156fe:	b085      	sub	sp, #20
   15700:	af00      	add	r7, sp, #0
   15702:	6078      	str	r0, [r7, #4]
   15704:	000a      	movs	r2, r1
   15706:	1cfb      	adds	r3, r7, #3
   15708:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   1570a:	2308      	movs	r3, #8
   1570c:	18fa      	adds	r2, r7, r3
   1570e:	6878      	ldr	r0, [r7, #4]
   15710:	2301      	movs	r3, #1
   15712:	2117      	movs	r1, #23
   15714:	4c25      	ldr	r4, [pc, #148]	; (157ac <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   15716:	47a0      	blx	r4
   15718:	0003      	movs	r3, r0
   1571a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1571c:	68fb      	ldr	r3, [r7, #12]
   1571e:	2b00      	cmp	r3, #0
   15720:	d13f      	bne.n	157a2 <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   15722:	1cfb      	adds	r3, r7, #3
   15724:	781b      	ldrb	r3, [r3, #0]
   15726:	091b      	lsrs	r3, r3, #4
   15728:	b2db      	uxtb	r3, r3
   1572a:	1c1a      	adds	r2, r3, #0
   1572c:	2301      	movs	r3, #1
   1572e:	4013      	ands	r3, r2
   15730:	b2da      	uxtb	r2, r3
   15732:	2308      	movs	r3, #8
   15734:	18fb      	adds	r3, r7, r3
   15736:	2101      	movs	r1, #1
   15738:	400a      	ands	r2, r1
   1573a:	0090      	lsls	r0, r2, #2
   1573c:	781a      	ldrb	r2, [r3, #0]
   1573e:	2104      	movs	r1, #4
   15740:	438a      	bics	r2, r1
   15742:	1c11      	adds	r1, r2, #0
   15744:	1c02      	adds	r2, r0, #0
   15746:	430a      	orrs	r2, r1
   15748:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   1574a:	1cfb      	adds	r3, r7, #3
   1574c:	781b      	ldrb	r3, [r3, #0]
   1574e:	095b      	lsrs	r3, r3, #5
   15750:	b2db      	uxtb	r3, r3
   15752:	1c1a      	adds	r2, r3, #0
   15754:	2301      	movs	r3, #1
   15756:	4013      	ands	r3, r2
   15758:	b2da      	uxtb	r2, r3
   1575a:	2308      	movs	r3, #8
   1575c:	18fb      	adds	r3, r7, r3
   1575e:	2101      	movs	r1, #1
   15760:	400a      	ands	r2, r1
   15762:	0110      	lsls	r0, r2, #4
   15764:	781a      	ldrb	r2, [r3, #0]
   15766:	2110      	movs	r1, #16
   15768:	438a      	bics	r2, r1
   1576a:	1c11      	adds	r1, r2, #0
   1576c:	1c02      	adds	r2, r0, #0
   1576e:	430a      	orrs	r2, r1
   15770:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   15772:	1cfb      	adds	r3, r7, #3
   15774:	781b      	ldrb	r3, [r3, #0]
   15776:	2207      	movs	r2, #7
   15778:	4013      	ands	r3, r2
   1577a:	b2da      	uxtb	r2, r3
   1577c:	2308      	movs	r3, #8
   1577e:	18fb      	adds	r3, r7, r3
   15780:	0150      	lsls	r0, r2, #5
   15782:	781a      	ldrb	r2, [r3, #0]
   15784:	211f      	movs	r1, #31
   15786:	400a      	ands	r2, r1
   15788:	1c11      	adds	r1, r2, #0
   1578a:	1c02      	adds	r2, r0, #0
   1578c:	430a      	orrs	r2, r1
   1578e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   15790:	2308      	movs	r3, #8
   15792:	18fa      	adds	r2, r7, r3
   15794:	6878      	ldr	r0, [r7, #4]
   15796:	2301      	movs	r3, #1
   15798:	2117      	movs	r1, #23
   1579a:	4c05      	ldr	r4, [pc, #20]	; (157b0 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   1579c:	47a0      	blx	r4
   1579e:	0003      	movs	r3, r0
   157a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   157a2:	68fb      	ldr	r3, [r7, #12]
}
   157a4:	0018      	movs	r0, r3
   157a6:	46bd      	mov	sp, r7
   157a8:	b005      	add	sp, #20
   157aa:	bd90      	pop	{r4, r7, pc}
   157ac:	00014c6d 	.word	0x00014c6d
   157b0:	00014cb3 	.word	0x00014cb3

000157b4 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   157b4:	b590      	push	{r4, r7, lr}
   157b6:	b087      	sub	sp, #28
   157b8:	af00      	add	r7, sp, #0
   157ba:	6078      	str	r0, [r7, #4]
   157bc:	000a      	movs	r2, r1
   157be:	1cfb      	adds	r3, r7, #3
   157c0:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   157c2:	230c      	movs	r3, #12
   157c4:	18fa      	adds	r2, r7, r3
   157c6:	6878      	ldr	r0, [r7, #4]
   157c8:	2301      	movs	r3, #1
   157ca:	2118      	movs	r1, #24
   157cc:	4c28      	ldr	r4, [pc, #160]	; (15870 <lsm6dso_i3c_disable_set+0xbc>)
   157ce:	47a0      	blx	r4
   157d0:	0003      	movs	r3, r0
   157d2:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   157d4:	697b      	ldr	r3, [r7, #20]
   157d6:	2b00      	cmp	r3, #0
   157d8:	d11c      	bne.n	15814 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   157da:	1cfb      	adds	r3, r7, #3
   157dc:	781b      	ldrb	r3, [r3, #0]
   157de:	09db      	lsrs	r3, r3, #7
   157e0:	b2db      	uxtb	r3, r3
   157e2:	1c1a      	adds	r2, r3, #0
   157e4:	2301      	movs	r3, #1
   157e6:	4013      	ands	r3, r2
   157e8:	b2da      	uxtb	r2, r3
   157ea:	230c      	movs	r3, #12
   157ec:	18fb      	adds	r3, r7, r3
   157ee:	2101      	movs	r1, #1
   157f0:	400a      	ands	r2, r1
   157f2:	1890      	adds	r0, r2, r2
   157f4:	781a      	ldrb	r2, [r3, #0]
   157f6:	2102      	movs	r1, #2
   157f8:	438a      	bics	r2, r1
   157fa:	1c11      	adds	r1, r2, #0
   157fc:	1c02      	adds	r2, r0, #0
   157fe:	430a      	orrs	r2, r1
   15800:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   15802:	230c      	movs	r3, #12
   15804:	18fa      	adds	r2, r7, r3
   15806:	6878      	ldr	r0, [r7, #4]
   15808:	2301      	movs	r3, #1
   1580a:	2118      	movs	r1, #24
   1580c:	4c19      	ldr	r4, [pc, #100]	; (15874 <lsm6dso_i3c_disable_set+0xc0>)
   1580e:	47a0      	blx	r4
   15810:	0003      	movs	r3, r0
   15812:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   15814:	697b      	ldr	r3, [r7, #20]
   15816:	2b00      	cmp	r3, #0
   15818:	d108      	bne.n	1582c <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   1581a:	2310      	movs	r3, #16
   1581c:	18fa      	adds	r2, r7, r3
   1581e:	6878      	ldr	r0, [r7, #4]
   15820:	2301      	movs	r3, #1
   15822:	2162      	movs	r1, #98	; 0x62
   15824:	4c12      	ldr	r4, [pc, #72]	; (15870 <lsm6dso_i3c_disable_set+0xbc>)
   15826:	47a0      	blx	r4
   15828:	0003      	movs	r3, r0
   1582a:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   1582c:	697b      	ldr	r3, [r7, #20]
   1582e:	2b00      	cmp	r3, #0
   15830:	d119      	bne.n	15866 <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   15832:	1cfb      	adds	r3, r7, #3
   15834:	781b      	ldrb	r3, [r3, #0]
   15836:	2203      	movs	r2, #3
   15838:	4013      	ands	r3, r2
   1583a:	b2da      	uxtb	r2, r3
   1583c:	2310      	movs	r3, #16
   1583e:	18fb      	adds	r3, r7, r3
   15840:	2103      	movs	r1, #3
   15842:	400a      	ands	r2, r1
   15844:	00d0      	lsls	r0, r2, #3
   15846:	781a      	ldrb	r2, [r3, #0]
   15848:	2118      	movs	r1, #24
   1584a:	438a      	bics	r2, r1
   1584c:	1c11      	adds	r1, r2, #0
   1584e:	1c02      	adds	r2, r0, #0
   15850:	430a      	orrs	r2, r1
   15852:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   15854:	2310      	movs	r3, #16
   15856:	18fa      	adds	r2, r7, r3
   15858:	6878      	ldr	r0, [r7, #4]
   1585a:	2301      	movs	r3, #1
   1585c:	2162      	movs	r1, #98	; 0x62
   1585e:	4c05      	ldr	r4, [pc, #20]	; (15874 <lsm6dso_i3c_disable_set+0xc0>)
   15860:	47a0      	blx	r4
   15862:	0003      	movs	r3, r0
   15864:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   15866:	697b      	ldr	r3, [r7, #20]
}
   15868:	0018      	movs	r0, r3
   1586a:	46bd      	mov	sp, r7
   1586c:	b007      	add	sp, #28
   1586e:	bd90      	pop	{r4, r7, pc}
   15870:	00014c6d 	.word	0x00014c6d
   15874:	00014cb3 	.word	0x00014cb3

00015878 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   15878:	b590      	push	{r4, r7, lr}
   1587a:	b085      	sub	sp, #20
   1587c:	af00      	add	r7, sp, #0
   1587e:	6078      	str	r0, [r7, #4]
   15880:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   15882:	687b      	ldr	r3, [r7, #4]
   15884:	2102      	movs	r1, #2
   15886:	0018      	movs	r0, r3
   15888:	4b0e      	ldr	r3, [pc, #56]	; (158c4 <lsm6dso_fsm_enable_get+0x4c>)
   1588a:	4798      	blx	r3
   1588c:	0003      	movs	r3, r0
   1588e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15890:	68fb      	ldr	r3, [r7, #12]
   15892:	2b00      	cmp	r3, #0
   15894:	d107      	bne.n	158a6 <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   15896:	683a      	ldr	r2, [r7, #0]
   15898:	6878      	ldr	r0, [r7, #4]
   1589a:	2302      	movs	r3, #2
   1589c:	2146      	movs	r1, #70	; 0x46
   1589e:	4c0a      	ldr	r4, [pc, #40]	; (158c8 <lsm6dso_fsm_enable_get+0x50>)
   158a0:	47a0      	blx	r4
   158a2:	0003      	movs	r3, r0
   158a4:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   158a6:	68fb      	ldr	r3, [r7, #12]
   158a8:	2b00      	cmp	r3, #0
   158aa:	d106      	bne.n	158ba <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   158ac:	687b      	ldr	r3, [r7, #4]
   158ae:	2100      	movs	r1, #0
   158b0:	0018      	movs	r0, r3
   158b2:	4b04      	ldr	r3, [pc, #16]	; (158c4 <lsm6dso_fsm_enable_get+0x4c>)
   158b4:	4798      	blx	r3
   158b6:	0003      	movs	r3, r0
   158b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   158ba:	68fb      	ldr	r3, [r7, #12]
}
   158bc:	0018      	movs	r0, r3
   158be:	46bd      	mov	sp, r7
   158c0:	b005      	add	sp, #20
   158c2:	bd90      	pop	{r4, r7, pc}
   158c4:	00015559 	.word	0x00015559
   158c8:	00014c6d 	.word	0x00014c6d

000158cc <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   158cc:	b590      	push	{r4, r7, lr}
   158ce:	b085      	sub	sp, #20
   158d0:	af00      	add	r7, sp, #0
   158d2:	6078      	str	r0, [r7, #4]
   158d4:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   158d6:	687b      	ldr	r3, [r7, #4]
   158d8:	2102      	movs	r1, #2
   158da:	0018      	movs	r0, r3
   158dc:	4b21      	ldr	r3, [pc, #132]	; (15964 <lsm6dso_fsm_data_rate_get+0x98>)
   158de:	4798      	blx	r3
   158e0:	0003      	movs	r3, r0
   158e2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   158e4:	68fb      	ldr	r3, [r7, #12]
   158e6:	2b00      	cmp	r3, #0
   158e8:	d108      	bne.n	158fc <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   158ea:	2308      	movs	r3, #8
   158ec:	18fa      	adds	r2, r7, r3
   158ee:	6878      	ldr	r0, [r7, #4]
   158f0:	2301      	movs	r3, #1
   158f2:	215f      	movs	r1, #95	; 0x5f
   158f4:	4c1c      	ldr	r4, [pc, #112]	; (15968 <lsm6dso_fsm_data_rate_get+0x9c>)
   158f6:	47a0      	blx	r4
   158f8:	0003      	movs	r3, r0
   158fa:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   158fc:	68fb      	ldr	r3, [r7, #12]
   158fe:	2b00      	cmp	r3, #0
   15900:	d12b      	bne.n	1595a <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   15902:	2308      	movs	r3, #8
   15904:	18fb      	adds	r3, r7, r3
   15906:	781b      	ldrb	r3, [r3, #0]
   15908:	06db      	lsls	r3, r3, #27
   1590a:	0f9b      	lsrs	r3, r3, #30
   1590c:	b2db      	uxtb	r3, r3
   1590e:	2b01      	cmp	r3, #1
   15910:	d00c      	beq.n	1592c <lsm6dso_fsm_data_rate_get+0x60>
   15912:	dc02      	bgt.n	1591a <lsm6dso_fsm_data_rate_get+0x4e>
   15914:	2b00      	cmp	r3, #0
   15916:	d005      	beq.n	15924 <lsm6dso_fsm_data_rate_get+0x58>
   15918:	e014      	b.n	15944 <lsm6dso_fsm_data_rate_get+0x78>
   1591a:	2b02      	cmp	r3, #2
   1591c:	d00a      	beq.n	15934 <lsm6dso_fsm_data_rate_get+0x68>
   1591e:	2b03      	cmp	r3, #3
   15920:	d00c      	beq.n	1593c <lsm6dso_fsm_data_rate_get+0x70>
   15922:	e00f      	b.n	15944 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   15924:	683b      	ldr	r3, [r7, #0]
   15926:	2200      	movs	r2, #0
   15928:	701a      	strb	r2, [r3, #0]
        break;
   1592a:	e00f      	b.n	1594c <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   1592c:	683b      	ldr	r3, [r7, #0]
   1592e:	2201      	movs	r2, #1
   15930:	701a      	strb	r2, [r3, #0]
        break;
   15932:	e00b      	b.n	1594c <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   15934:	683b      	ldr	r3, [r7, #0]
   15936:	2202      	movs	r2, #2
   15938:	701a      	strb	r2, [r3, #0]
        break;
   1593a:	e007      	b.n	1594c <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   1593c:	683b      	ldr	r3, [r7, #0]
   1593e:	2203      	movs	r2, #3
   15940:	701a      	strb	r2, [r3, #0]
        break;
   15942:	e003      	b.n	1594c <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   15944:	683b      	ldr	r3, [r7, #0]
   15946:	2200      	movs	r2, #0
   15948:	701a      	strb	r2, [r3, #0]
        break;
   1594a:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   1594c:	687b      	ldr	r3, [r7, #4]
   1594e:	2100      	movs	r1, #0
   15950:	0018      	movs	r0, r3
   15952:	4b04      	ldr	r3, [pc, #16]	; (15964 <lsm6dso_fsm_data_rate_get+0x98>)
   15954:	4798      	blx	r3
   15956:	0003      	movs	r3, r0
   15958:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1595a:	68fb      	ldr	r3, [r7, #12]
}
   1595c:	0018      	movs	r0, r3
   1595e:	46bd      	mov	sp, r7
   15960:	b005      	add	sp, #20
   15962:	bd90      	pop	{r4, r7, pc}
   15964:	00015559 	.word	0x00015559
   15968:	00014c6d 	.word	0x00014c6d

0001596c <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   1596c:	b580      	push	{r7, lr}
   1596e:	b084      	sub	sp, #16
   15970:	af00      	add	r7, sp, #0
   15972:	60f8      	str	r0, [r7, #12]
   15974:	0008      	movs	r0, r1
   15976:	607a      	str	r2, [r7, #4]
   15978:	0019      	movs	r1, r3
   1597a:	230b      	movs	r3, #11
   1597c:	18fb      	adds	r3, r7, r3
   1597e:	1c02      	adds	r2, r0, #0
   15980:	701a      	strb	r2, [r3, #0]
   15982:	2308      	movs	r3, #8
   15984:	18fb      	adds	r3, r7, r3
   15986:	1c0a      	adds	r2, r1, #0
   15988:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
return 0;
   1598a:	2300      	movs	r3, #0

}
   1598c:	0018      	movs	r0, r3
   1598e:	46bd      	mov	sp, r7
   15990:	b004      	add	sp, #16
   15992:	bd80      	pop	{r7, pc}

00015994 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   15994:	b580      	push	{r7, lr}
   15996:	b084      	sub	sp, #16
   15998:	af00      	add	r7, sp, #0
   1599a:	60f8      	str	r0, [r7, #12]
   1599c:	0008      	movs	r0, r1
   1599e:	607a      	str	r2, [r7, #4]
   159a0:	0019      	movs	r1, r3
   159a2:	230b      	movs	r3, #11
   159a4:	18fb      	adds	r3, r7, r3
   159a6:	1c02      	adds	r2, r0, #0
   159a8:	701a      	strb	r2, [r3, #0]
   159aa:	2308      	movs	r3, #8
   159ac:	18fb      	adds	r3, r7, r3
   159ae:	1c0a      	adds	r2, r1, #0
   159b0:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
return 0;
   159b2:	2300      	movs	r3, #0


}
   159b4:	0018      	movs	r0, r3
   159b6:	46bd      	mov	sp, r7
   159b8:	b004      	add	sp, #16
   159ba:	bd80      	pop	{r7, pc}

000159bc <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   159bc:	b580      	push	{r7, lr}
   159be:	af00      	add	r7, sp, #0
return &dev_ctx;
   159c0:	4b01      	ldr	r3, [pc, #4]	; (159c8 <GetImuStruct+0xc>)
}
   159c2:	0018      	movs	r0, r3
   159c4:	46bd      	mov	sp, r7
   159c6:	bd80      	pop	{r7, pc}
   159c8:	20000020 	.word	0x20000020

000159cc <InitImu>:



int32_t InitImu(void)
{
   159cc:	b580      	push	{r7, lr}
   159ce:	b082      	sub	sp, #8
   159d0:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   159d2:	2300      	movs	r3, #0
   159d4:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   159d6:	4b23      	ldr	r3, [pc, #140]	; (15a64 <InitImu+0x98>)
   159d8:	2101      	movs	r1, #1
   159da:	0018      	movs	r0, r3
   159dc:	4b22      	ldr	r3, [pc, #136]	; (15a68 <InitImu+0x9c>)
   159de:	4798      	blx	r3
   159e0:	0003      	movs	r3, r0
   159e2:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   159e4:	1cfa      	adds	r2, r7, #3
   159e6:	4b1f      	ldr	r3, [pc, #124]	; (15a64 <InitImu+0x98>)
   159e8:	0011      	movs	r1, r2
   159ea:	0018      	movs	r0, r3
   159ec:	4b1f      	ldr	r3, [pc, #124]	; (15a6c <InitImu+0xa0>)
   159ee:	4798      	blx	r3
   159f0:	0002      	movs	r2, r0
   159f2:	687b      	ldr	r3, [r7, #4]
   159f4:	4313      	orrs	r3, r2
   159f6:	607b      	str	r3, [r7, #4]
  } while (rst);
   159f8:	1cfb      	adds	r3, r7, #3
   159fa:	781b      	ldrb	r3, [r3, #0]
   159fc:	2b00      	cmp	r3, #0
   159fe:	d1f1      	bne.n	159e4 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   15a00:	4b18      	ldr	r3, [pc, #96]	; (15a64 <InitImu+0x98>)
   15a02:	2180      	movs	r1, #128	; 0x80
   15a04:	0018      	movs	r0, r3
   15a06:	4b1a      	ldr	r3, [pc, #104]	; (15a70 <InitImu+0xa4>)
   15a08:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   15a0a:	4b16      	ldr	r3, [pc, #88]	; (15a64 <InitImu+0x98>)
   15a0c:	2101      	movs	r1, #1
   15a0e:	0018      	movs	r0, r3
   15a10:	4b18      	ldr	r3, [pc, #96]	; (15a74 <InitImu+0xa8>)
   15a12:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   15a14:	4b13      	ldr	r3, [pc, #76]	; (15a64 <InitImu+0x98>)
   15a16:	2100      	movs	r1, #0
   15a18:	0018      	movs	r0, r3
   15a1a:	4b17      	ldr	r3, [pc, #92]	; (15a78 <InitImu+0xac>)
   15a1c:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   15a1e:	4b11      	ldr	r3, [pc, #68]	; (15a64 <InitImu+0x98>)
   15a20:	2101      	movs	r1, #1
   15a22:	0018      	movs	r0, r3
   15a24:	4b15      	ldr	r3, [pc, #84]	; (15a7c <InitImu+0xb0>)
   15a26:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   15a28:	4b0e      	ldr	r3, [pc, #56]	; (15a64 <InitImu+0x98>)
   15a2a:	2101      	movs	r1, #1
   15a2c:	0018      	movs	r0, r3
   15a2e:	4b14      	ldr	r3, [pc, #80]	; (15a80 <InitImu+0xb4>)
   15a30:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   15a32:	4b0c      	ldr	r3, [pc, #48]	; (15a64 <InitImu+0x98>)
   15a34:	2100      	movs	r1, #0
   15a36:	0018      	movs	r0, r3
   15a38:	4b12      	ldr	r3, [pc, #72]	; (15a84 <InitImu+0xb8>)
   15a3a:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   15a3c:	4b09      	ldr	r3, [pc, #36]	; (15a64 <InitImu+0x98>)
   15a3e:	2106      	movs	r1, #6
   15a40:	0018      	movs	r0, r3
   15a42:	4b11      	ldr	r3, [pc, #68]	; (15a88 <InitImu+0xbc>)
   15a44:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   15a46:	4b07      	ldr	r3, [pc, #28]	; (15a64 <InitImu+0x98>)
   15a48:	2104      	movs	r1, #4
   15a4a:	0018      	movs	r0, r3
   15a4c:	4b0f      	ldr	r3, [pc, #60]	; (15a8c <InitImu+0xc0>)
   15a4e:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   15a50:	4b04      	ldr	r3, [pc, #16]	; (15a64 <InitImu+0x98>)
   15a52:	2101      	movs	r1, #1
   15a54:	0018      	movs	r0, r3
   15a56:	4b0e      	ldr	r3, [pc, #56]	; (15a90 <InitImu+0xc4>)
   15a58:	4798      	blx	r3

  return error;
   15a5a:	687b      	ldr	r3, [r7, #4]
}
   15a5c:	0018      	movs	r0, r3
   15a5e:	46bd      	mov	sp, r7
   15a60:	b002      	add	sp, #8
   15a62:	bd80      	pop	{r7, pc}
   15a64:	20000020 	.word	0x20000020
   15a68:	000155e9 	.word	0x000155e9
   15a6c:	00015655 	.word	0x00015655
   15a70:	000157b5 	.word	0x000157b5
   15a74:	00015391 	.word	0x00015391
   15a78:	000153fd 	.word	0x000153fd
   15a7c:	00014d9d 	.word	0x00014d9d
   15a80:	000150cd 	.word	0x000150cd
   15a84:	00014d31 	.word	0x00014d31
   15a88:	00015061 	.word	0x00015061
   15a8c:	000156fd 	.word	0x000156fd
   15a90:	00015691 	.word	0x00015691

00015a94 <reg_write>:
#include "I2cDriver/I2cDriver.h"
#include "SerialConsole.h"
uint8_t msgOut[64];
I2C_Data adcData; 
static int32_t reg_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   15a94:	b580      	push	{r7, lr}
   15a96:	b096      	sub	sp, #88	; 0x58
   15a98:	af00      	add	r7, sp, #0
   15a9a:	60f8      	str	r0, [r7, #12]
   15a9c:	0008      	movs	r0, r1
   15a9e:	607a      	str	r2, [r7, #4]
   15aa0:	0019      	movs	r1, r3
   15aa2:	230b      	movs	r3, #11
   15aa4:	18fb      	adds	r3, r7, r3
   15aa6:	1c02      	adds	r2, r0, #0
   15aa8:	701a      	strb	r2, [r3, #0]
   15aaa:	2308      	movs	r3, #8
   15aac:	18fb      	adds	r3, r7, r3
   15aae:	1c0a      	adds	r2, r1, #0
   15ab0:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
   15ab2:	2300      	movs	r3, #0
   15ab4:	653b      	str	r3, [r7, #80]	; 0x50
	msgOut[0]=reg;
   15ab6:	4b19      	ldr	r3, [pc, #100]	; (15b1c <reg_write+0x88>)
   15ab8:	220b      	movs	r2, #11
   15aba:	18ba      	adds	r2, r7, r2
   15abc:	7812      	ldrb	r2, [r2, #0]
   15abe:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<len;i++)
   15ac0:	2300      	movs	r3, #0
   15ac2:	657b      	str	r3, [r7, #84]	; 0x54
   15ac4:	e00a      	b.n	15adc <reg_write+0x48>
	{
		msgOut[1+i]=bufp[i];
   15ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15ac8:	3301      	adds	r3, #1
   15aca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   15acc:	6879      	ldr	r1, [r7, #4]
   15ace:	188a      	adds	r2, r1, r2
   15ad0:	7811      	ldrb	r1, [r2, #0]
   15ad2:	4a12      	ldr	r2, [pc, #72]	; (15b1c <reg_write+0x88>)
   15ad4:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<len;i++)
   15ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15ad8:	3301      	adds	r3, #1
   15ada:	657b      	str	r3, [r7, #84]	; 0x54
   15adc:	2308      	movs	r3, #8
   15ade:	18fb      	adds	r3, r7, r3
   15ae0:	881a      	ldrh	r2, [r3, #0]
   15ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15ae4:	429a      	cmp	r2, r3
   15ae6:	dcee      	bgt.n	15ac6 <reg_write+0x32>
	}
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   15ae8:	4b0d      	ldr	r3, [pc, #52]	; (15b20 <reg_write+0x8c>)
   15aea:	222a      	movs	r2, #42	; 0x2a
   15aec:	701a      	strb	r2, [r3, #0]
	adcData.msgOut=&msgOut;		///<Pointer to array buffer that we will write from
   15aee:	4b0c      	ldr	r3, [pc, #48]	; (15b20 <reg_write+0x8c>)
   15af0:	4a0a      	ldr	r2, [pc, #40]	; (15b1c <reg_write+0x88>)
   15af2:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1+len;
   15af4:	2308      	movs	r3, #8
   15af6:	18fb      	adds	r3, r7, r3
   15af8:	881b      	ldrh	r3, [r3, #0]
   15afa:	3301      	adds	r3, #1
   15afc:	b29a      	uxth	r2, r3
   15afe:	4b08      	ldr	r3, [pc, #32]	; (15b20 <reg_write+0x8c>)
   15b00:	81da      	strh	r2, [r3, #14]
	error= I2cWriteDataWait(&adcData, 100);
   15b02:	4b07      	ldr	r3, [pc, #28]	; (15b20 <reg_write+0x8c>)
   15b04:	2164      	movs	r1, #100	; 0x64
   15b06:	0018      	movs	r0, r3
   15b08:	4b06      	ldr	r3, [pc, #24]	; (15b24 <reg_write+0x90>)
   15b0a:	4798      	blx	r3
   15b0c:	0003      	movs	r3, r0
   15b0e:	653b      	str	r3, [r7, #80]	; 0x50
		char help[64];
		//snprintf(help, 64, "error_write = %d\r\n",error);
		//SerialConsoleWriteString(help);
	return error;
   15b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50

}
   15b12:	0018      	movs	r0, r3
   15b14:	46bd      	mov	sp, r7
   15b16:	b016      	add	sp, #88	; 0x58
   15b18:	bd80      	pop	{r7, pc}
   15b1a:	46c0      	nop			; (mov r8, r8)
   15b1c:	20004868 	.word	0x20004868
   15b20:	200048a8 	.word	0x200048a8
   15b24:	00014a81 	.word	0x00014a81

00015b28 <reg_read>:

static  int32_t reg_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   15b28:	b580      	push	{r7, lr}
   15b2a:	b096      	sub	sp, #88	; 0x58
   15b2c:	af00      	add	r7, sp, #0
   15b2e:	60f8      	str	r0, [r7, #12]
   15b30:	0008      	movs	r0, r1
   15b32:	607a      	str	r2, [r7, #4]
   15b34:	0019      	movs	r1, r3
   15b36:	230b      	movs	r3, #11
   15b38:	18fb      	adds	r3, r7, r3
   15b3a:	1c02      	adds	r2, r0, #0
   15b3c:	701a      	strb	r2, [r3, #0]
   15b3e:	2308      	movs	r3, #8
   15b40:	18fb      	adds	r3, r7, r3
   15b42:	1c0a      	adds	r2, r1, #0
   15b44:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
   15b46:	2300      	movs	r3, #0
   15b48:	657b      	str	r3, [r7, #84]	; 0x54
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   15b4a:	4b13      	ldr	r3, [pc, #76]	; (15b98 <reg_read+0x70>)
   15b4c:	222a      	movs	r2, #42	; 0x2a
   15b4e:	701a      	strb	r2, [r3, #0]

	adcData.lenIn=len;			///<Length of message to read/write;	
   15b50:	4b11      	ldr	r3, [pc, #68]	; (15b98 <reg_read+0x70>)
   15b52:	2208      	movs	r2, #8
   15b54:	18ba      	adds	r2, r7, r2
   15b56:	8812      	ldrh	r2, [r2, #0]
   15b58:	819a      	strh	r2, [r3, #12]
	adcData.msgIn=bufp;
   15b5a:	4b0f      	ldr	r3, [pc, #60]	; (15b98 <reg_read+0x70>)
   15b5c:	687a      	ldr	r2, [r7, #4]
   15b5e:	609a      	str	r2, [r3, #8]
	msgOut[0]=reg;
   15b60:	4b0e      	ldr	r3, [pc, #56]	; (15b9c <reg_read+0x74>)
   15b62:	220b      	movs	r2, #11
   15b64:	18ba      	adds	r2, r7, r2
   15b66:	7812      	ldrb	r2, [r2, #0]
   15b68:	701a      	strb	r2, [r3, #0]
	msgOut[1]=0;
   15b6a:	4b0c      	ldr	r3, [pc, #48]	; (15b9c <reg_read+0x74>)
   15b6c:	2200      	movs	r2, #0
   15b6e:	705a      	strb	r2, [r3, #1]
	adcData.msgOut=&msgOut;	
   15b70:	4b09      	ldr	r3, [pc, #36]	; (15b98 <reg_read+0x70>)
   15b72:	4a0a      	ldr	r2, [pc, #40]	; (15b9c <reg_read+0x74>)
   15b74:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1;	///<Pointer to array buffer that we will write from
   15b76:	4b08      	ldr	r3, [pc, #32]	; (15b98 <reg_read+0x70>)
   15b78:	2201      	movs	r2, #1
   15b7a:	81da      	strh	r2, [r3, #14]
	error= I2cReadDataWait(&adcData, 5, 100);
   15b7c:	4b06      	ldr	r3, [pc, #24]	; (15b98 <reg_read+0x70>)
   15b7e:	2264      	movs	r2, #100	; 0x64
   15b80:	2105      	movs	r1, #5
   15b82:	0018      	movs	r0, r3
   15b84:	4b06      	ldr	r3, [pc, #24]	; (15ba0 <reg_read+0x78>)
   15b86:	4798      	blx	r3
   15b88:	0003      	movs	r3, r0
   15b8a:	657b      	str	r3, [r7, #84]	; 0x54
	char help[64];
	//snprintf(help, 64, "error_read = %d\r\n",error);
	//SerialConsoleWriteString(help);
	
	
	return error;
   15b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
   15b8e:	0018      	movs	r0, r3
   15b90:	46bd      	mov	sp, r7
   15b92:	b016      	add	sp, #88	; 0x58
   15b94:	bd80      	pop	{r7, pc}
   15b96:	46c0      	nop			; (mov r8, r8)
   15b98:	200048a8 	.word	0x200048a8
   15b9c:	20004868 	.word	0x20004868
   15ba0:	00014b59 	.word	0x00014b59

00015ba4 <ADC_ReadReg>:
void *handle;
uint8_t ADC_ReadReg(uint8_t u8RegAddr)
{
   15ba4:	b590      	push	{r4, r7, lr}
   15ba6:	b085      	sub	sp, #20
   15ba8:	af00      	add	r7, sp, #0
   15baa:	0002      	movs	r2, r0
   15bac:	1dfb      	adds	r3, r7, #7
   15bae:	701a      	strb	r2, [r3, #0]
	//rdata = I2C_ReadByteOneReg(I2C1, ADC_SLAVE_ADDR, u8RegAddr);
	int32_t err= I2cReadData(&adcData);
	return ADC_bytes[0];*/
	static uint8_t read_bytes;
	
	int32_t err= reg_read(handle, u8RegAddr, &read_bytes,1);
   15bb0:	4b07      	ldr	r3, [pc, #28]	; (15bd0 <ADC_ReadReg+0x2c>)
   15bb2:	6818      	ldr	r0, [r3, #0]
   15bb4:	4a07      	ldr	r2, [pc, #28]	; (15bd4 <ADC_ReadReg+0x30>)
   15bb6:	1dfb      	adds	r3, r7, #7
   15bb8:	7819      	ldrb	r1, [r3, #0]
   15bba:	2301      	movs	r3, #1
   15bbc:	4c06      	ldr	r4, [pc, #24]	; (15bd8 <ADC_ReadReg+0x34>)
   15bbe:	47a0      	blx	r4
   15bc0:	0003      	movs	r3, r0
   15bc2:	60fb      	str	r3, [r7, #12]
	return read_bytes;
   15bc4:	4b03      	ldr	r3, [pc, #12]	; (15bd4 <ADC_ReadReg+0x30>)
   15bc6:	781b      	ldrb	r3, [r3, #0]
	
}
   15bc8:	0018      	movs	r0, r3
   15bca:	46bd      	mov	sp, r7
   15bcc:	b005      	add	sp, #20
   15bce:	bd90      	pop	{r4, r7, pc}
   15bd0:	20004864 	.word	0x20004864
   15bd4:	20000620 	.word	0x20000620
   15bd8:	00015b29 	.word	0x00015b29

00015bdc <ADC_WriteReg>:


uint8_t ADC_WriteReg(uint8_t u8RegAddr, uint8_t data)
{
   15bdc:	b590      	push	{r4, r7, lr}
   15bde:	b085      	sub	sp, #20
   15be0:	af00      	add	r7, sp, #0
   15be2:	0002      	movs	r2, r0
   15be4:	1dfb      	adds	r3, r7, #7
   15be6:	701a      	strb	r2, [r3, #0]
   15be8:	1dbb      	adds	r3, r7, #6
   15bea:	1c0a      	adds	r2, r1, #0
   15bec:	701a      	strb	r2, [r3, #0]
	adcData.address = u8RegAddr;
	adcData.msgOut=&data;
	adcData.lenOut=sizeof(data);
	int32_t err=I2cWriteData(&adcData);
	return err;*/
	int32_t err=reg_write(handle, u8RegAddr,&data,1);
   15bee:	4b08      	ldr	r3, [pc, #32]	; (15c10 <ADC_WriteReg+0x34>)
   15bf0:	6818      	ldr	r0, [r3, #0]
   15bf2:	1dba      	adds	r2, r7, #6
   15bf4:	1dfb      	adds	r3, r7, #7
   15bf6:	7819      	ldrb	r1, [r3, #0]
   15bf8:	2301      	movs	r3, #1
   15bfa:	4c06      	ldr	r4, [pc, #24]	; (15c14 <ADC_WriteReg+0x38>)
   15bfc:	47a0      	blx	r4
   15bfe:	0003      	movs	r3, r0
   15c00:	60fb      	str	r3, [r7, #12]
	return err;
   15c02:	68fb      	ldr	r3, [r7, #12]
   15c04:	b2db      	uxtb	r3, r3
}
   15c06:	0018      	movs	r0, r3
   15c08:	46bd      	mov	sp, r7
   15c0a:	b005      	add	sp, #20
   15c0c:	bd90      	pop	{r4, r7, pc}
   15c0e:	46c0      	nop			; (mov r8, r8)
   15c10:	20004864 	.word	0x20004864
   15c14:	00015a95 	.word	0x00015a95

00015c18 <ADC_Calibration>:

	ADC_WriteReg(CTRL1_ADDR, reg);
}

void ADC_Calibration(void)
{
   15c18:	b590      	push	{r4, r7, lr}
   15c1a:	b083      	sub	sp, #12
   15c1c:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   15c1e:	1dfb      	adds	r3, r7, #7
   15c20:	2200      	movs	r2, #0
   15c22:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		reg = ADC_ReadReg(CTRL2_ADDR);
   15c24:	1dfc      	adds	r4, r7, #7
   15c26:	2002      	movs	r0, #2
   15c28:	4b21      	ldr	r3, [pc, #132]	; (15cb0 <ADC_Calibration+0x98>)
   15c2a:	4798      	blx	r3
   15c2c:	0003      	movs	r3, r0
   15c2e:	7023      	strb	r3, [r4, #0]
		reg &= ~(CALMOD_Msk | CALS_Msk);
   15c30:	1dfb      	adds	r3, r7, #7
   15c32:	1dfa      	adds	r2, r7, #7
   15c34:	7812      	ldrb	r2, [r2, #0]
   15c36:	2107      	movs	r1, #7
   15c38:	438a      	bics	r2, r1
   15c3a:	701a      	strb	r2, [r3, #0]

		/* Set Calibration mode */
		reg |= CALMOD_OFFSET_INTERNAL;   /* Calibration mode = Internal Offset Calibration */
   15c3c:	1dfb      	adds	r3, r7, #7
   15c3e:	1dfa      	adds	r2, r7, #7
   15c40:	7812      	ldrb	r2, [r2, #0]
   15c42:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   15c44:	1dfb      	adds	r3, r7, #7
   15c46:	781b      	ldrb	r3, [r3, #0]
   15c48:	0019      	movs	r1, r3
   15c4a:	2002      	movs	r0, #2
   15c4c:	4b19      	ldr	r3, [pc, #100]	; (15cb4 <ADC_Calibration+0x9c>)
   15c4e:	4798      	blx	r3
		/* Start calibration */
		reg |= CALS_ACTION;              /* Start calibration */
   15c50:	1dfb      	adds	r3, r7, #7
   15c52:	1dfa      	adds	r2, r7, #7
   15c54:	7812      	ldrb	r2, [r2, #0]
   15c56:	2104      	movs	r1, #4
   15c58:	430a      	orrs	r2, r1
   15c5a:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   15c5c:	1dfb      	adds	r3, r7, #7
   15c5e:	781b      	ldrb	r3, [r3, #0]
   15c60:	0019      	movs	r1, r3
   15c62:	2002      	movs	r0, #2
   15c64:	4b13      	ldr	r3, [pc, #76]	; (15cb4 <ADC_Calibration+0x9c>)
   15c66:	4798      	blx	r3

		while (1)
		{
			/* Wait for calibration finish */
			delay_ms(50); /* Wait 50ms */
   15c68:	2032      	movs	r0, #50	; 0x32
   15c6a:	4b13      	ldr	r3, [pc, #76]	; (15cb8 <ADC_Calibration+0xa0>)
   15c6c:	4798      	blx	r3
			/* Read calibration result */
			reg = ADC_ReadReg(CTRL2_ADDR);
   15c6e:	1dfc      	adds	r4, r7, #7
   15c70:	2002      	movs	r0, #2
   15c72:	4b0f      	ldr	r3, [pc, #60]	; (15cb0 <ADC_Calibration+0x98>)
   15c74:	4798      	blx	r3
   15c76:	0003      	movs	r3, r0
   15c78:	7023      	strb	r3, [r4, #0]

			if ((reg & CALS_Msk) == CALS_FINISHED)
   15c7a:	1dfb      	adds	r3, r7, #7
   15c7c:	781b      	ldrb	r3, [r3, #0]
   15c7e:	2204      	movs	r2, #4
   15c80:	4013      	ands	r3, r2
   15c82:	d000      	beq.n	15c86 <ADC_Calibration+0x6e>
			delay_ms(50); /* Wait 50ms */
   15c84:	e7f0      	b.n	15c68 <ADC_Calibration+0x50>
			break;
   15c86:	46c0      	nop			; (mov r8, r8)
		}
		reg &= CAL_ERR_Msk;
   15c88:	1dfb      	adds	r3, r7, #7
   15c8a:	1dfa      	adds	r2, r7, #7
   15c8c:	7812      	ldrb	r2, [r2, #0]
   15c8e:	2108      	movs	r1, #8
   15c90:	400a      	ands	r2, r1
   15c92:	701a      	strb	r2, [r3, #0]
		if ((reg & CAL_ERR_Msk) == 0) /* There is no error */
   15c94:	1dfb      	adds	r3, r7, #7
   15c96:	781b      	ldrb	r3, [r3, #0]
   15c98:	2208      	movs	r2, #8
   15c9a:	4013      	ands	r3, r2
   15c9c:	d000      	beq.n	15ca0 <ADC_Calibration+0x88>
		reg = ADC_ReadReg(CTRL2_ADDR);
   15c9e:	e7c1      	b.n	15c24 <ADC_Calibration+0xc>
		break;
   15ca0:	46c0      	nop			; (mov r8, r8)
	}
	delay_ms(1);    /* Wait 1 ms */
   15ca2:	2001      	movs	r0, #1
   15ca4:	4b04      	ldr	r3, [pc, #16]	; (15cb8 <ADC_Calibration+0xa0>)
   15ca6:	4798      	blx	r3

}
   15ca8:	46c0      	nop			; (mov r8, r8)
   15caa:	46bd      	mov	sp, r7
   15cac:	b003      	add	sp, #12
   15cae:	bd90      	pop	{r4, r7, pc}
   15cb0:	00015ba5 	.word	0x00015ba5
   15cb4:	00015bdd 	.word	0x00015bdd
   15cb8:	00020bed 	.word	0x00020bed

00015cbc <ADCchip_Init>:

void  ADCchip_Init(void)
{
   15cbc:	b580      	push	{r7, lr}
   15cbe:	b082      	sub	sp, #8
   15cc0:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   15cc2:	1dfb      	adds	r3, r7, #7
   15cc4:	2200      	movs	r2, #0
   15cc6:	701a      	strb	r2, [r3, #0]

	/* Reset */
	reg =  0x01;                   /* Enter reset mode */
   15cc8:	1dfb      	adds	r3, r7, #7
   15cca:	2201      	movs	r2, #1
   15ccc:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15cce:	1dfb      	adds	r3, r7, #7
   15cd0:	781b      	ldrb	r3, [r3, #0]
   15cd2:	0019      	movs	r1, r3
   15cd4:	2000      	movs	r0, #0
   15cd6:	4b1d      	ldr	r3, [pc, #116]	; (15d4c <ADCchip_Init+0x90>)
   15cd8:	4798      	blx	r3
	delay_ms(1);         /* Wait 1 ms */
   15cda:	2001      	movs	r0, #1
   15cdc:	4b1c      	ldr	r3, [pc, #112]	; (15d50 <ADCchip_Init+0x94>)
   15cde:	4798      	blx	r3
	
	reg =  0x02 ;                  /* Enter Noraml mode */
   15ce0:	1dfb      	adds	r3, r7, #7
   15ce2:	2202      	movs	r2, #2
   15ce4:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15ce6:	1dfb      	adds	r3, r7, #7
   15ce8:	781b      	ldrb	r3, [r3, #0]
   15cea:	0019      	movs	r1, r3
   15cec:	2000      	movs	r0, #0
   15cee:	4b17      	ldr	r3, [pc, #92]	; (15d4c <ADCchip_Init+0x90>)
   15cf0:	4798      	blx	r3
	delay_ms(50);         /* Wait 1 ms */
   15cf2:	2032      	movs	r0, #50	; 0x32
   15cf4:	4b16      	ldr	r3, [pc, #88]	; (15d50 <ADCchip_Init+0x94>)
   15cf6:	4798      	blx	r3
	reg = (CRP_ACTIVE_LOW |             // DRDY = LOW Active 
	DRDY_SEL_OUTPUT_CONVERSION | // DRDY output = conversion ready 
	VLDO_3V3 |                   // LDO = 3.3V  (no use) 
	GAINS_1);                    // PGA = x1 
*/	
	reg=0x27;
   15cf8:	1dfb      	adds	r3, r7, #7
   15cfa:	2227      	movs	r2, #39	; 0x27
   15cfc:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(CTRL1_ADDR, reg);
   15cfe:	1dfb      	adds	r3, r7, #7
   15d00:	781b      	ldrb	r3, [r3, #0]
   15d02:	0019      	movs	r1, r3
   15d04:	2001      	movs	r0, #1
   15d06:	4b11      	ldr	r3, [pc, #68]	; (15d4c <ADCchip_Init+0x90>)
   15d08:	4798      	blx	r3
	delay_ms(1);
   15d0a:	2001      	movs	r0, #1
   15d0c:	4b10      	ldr	r3, [pc, #64]	; (15d50 <ADCchip_Init+0x94>)
   15d0e:	4798      	blx	r3
	
	reg=0x86;
   15d10:	1dfb      	adds	r3, r7, #7
   15d12:	2286      	movs	r2, #134	; 0x86
   15d14:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15d16:	1dfb      	adds	r3, r7, #7
   15d18:	781b      	ldrb	r3, [r3, #0]
   15d1a:	0019      	movs	r1, r3
   15d1c:	2000      	movs	r0, #0
   15d1e:	4b0b      	ldr	r3, [pc, #44]	; (15d4c <ADCchip_Init+0x90>)
   15d20:	4798      	blx	r3
	delay_ms(1);
   15d22:	2001      	movs	r0, #1
   15d24:	4b0a      	ldr	r3, [pc, #40]	; (15d50 <ADCchip_Init+0x94>)
   15d26:	4798      	blx	r3
	
	reg=0x30;
   15d28:	1dfb      	adds	r3, r7, #7
   15d2a:	2230      	movs	r2, #48	; 0x30
   15d2c:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(OTP_B1_ADDR , reg);
   15d2e:	1dfb      	adds	r3, r7, #7
   15d30:	781b      	ldrb	r3, [r3, #0]
   15d32:	0019      	movs	r1, r3
   15d34:	2015      	movs	r0, #21
   15d36:	4b05      	ldr	r3, [pc, #20]	; (15d4c <ADCchip_Init+0x90>)
   15d38:	4798      	blx	r3
	delay_ms(1);
   15d3a:	2001      	movs	r0, #1
   15d3c:	4b04      	ldr	r3, [pc, #16]	; (15d50 <ADCchip_Init+0x94>)
   15d3e:	4798      	blx	r3
   

	/* Calibration */
	ADC_Calibration();
   15d40:	4b04      	ldr	r3, [pc, #16]	; (15d54 <ADCchip_Init+0x98>)
   15d42:	4798      	blx	r3
}
   15d44:	46c0      	nop			; (mov r8, r8)
   15d46:	46bd      	mov	sp, r7
   15d48:	b002      	add	sp, #8
   15d4a:	bd80      	pop	{r7, pc}
   15d4c:	00015bdd 	.word	0x00015bdd
   15d50:	00020bed 	.word	0x00020bed
   15d54:	00015c19 	.word	0x00015c19

00015d58 <ADC_StartConversion>:

void ADC_StartConversion(void)
{
   15d58:	b590      	push	{r4, r7, lr}
   15d5a:	b083      	sub	sp, #12
   15d5c:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   15d5e:	1dfb      	adds	r3, r7, #7
   15d60:	2200      	movs	r2, #0
   15d62:	701a      	strb	r2, [r3, #0]
	/* Start conversion */
	reg = ADC_ReadReg(PU_CTRL_ADDR);
   15d64:	1dfc      	adds	r4, r7, #7
   15d66:	2000      	movs	r0, #0
   15d68:	4b09      	ldr	r3, [pc, #36]	; (15d90 <ADC_StartConversion+0x38>)
   15d6a:	4798      	blx	r3
   15d6c:	0003      	movs	r3, r0
   15d6e:	7023      	strb	r3, [r4, #0]
	reg |= CS_START_CONVERSION; /* CS=1 */
   15d70:	1dfb      	adds	r3, r7, #7
   15d72:	1dfa      	adds	r2, r7, #7
   15d74:	7812      	ldrb	r2, [r2, #0]
   15d76:	2110      	movs	r1, #16
   15d78:	430a      	orrs	r2, r1
   15d7a:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15d7c:	1dfb      	adds	r3, r7, #7
   15d7e:	781b      	ldrb	r3, [r3, #0]
   15d80:	0019      	movs	r1, r3
   15d82:	2000      	movs	r0, #0
   15d84:	4b03      	ldr	r3, [pc, #12]	; (15d94 <ADC_StartConversion+0x3c>)
   15d86:	4798      	blx	r3
}
   15d88:	46c0      	nop			; (mov r8, r8)
   15d8a:	46bd      	mov	sp, r7
   15d8c:	b003      	add	sp, #12
   15d8e:	bd90      	pop	{r4, r7, pc}
   15d90:	00015ba5 	.word	0x00015ba5
   15d94:	00015bdd 	.word	0x00015bdd

00015d98 <I2C_ReadMultiBytesOneReg>:

int32_t I2C_ReadMultiBytesOneReg(uint8_t u8RegAddr1, uint8_t u8RegAddr2,uint8_t *data,uint32_t len)
{
   15d98:	b580      	push	{r7, lr}
   15d9a:	b088      	sub	sp, #32
   15d9c:	af00      	add	r7, sp, #0
   15d9e:	60ba      	str	r2, [r7, #8]
   15da0:	607b      	str	r3, [r7, #4]
   15da2:	230f      	movs	r3, #15
   15da4:	18fb      	adds	r3, r7, r3
   15da6:	1c02      	adds	r2, r0, #0
   15da8:	701a      	strb	r2, [r3, #0]
   15daa:	230e      	movs	r3, #14
   15dac:	18fb      	adds	r3, r7, r3
   15dae:	1c0a      	adds	r2, r1, #0
   15db0:	701a      	strb	r2, [r3, #0]
	int32_t temp1, temp2, temp3, x;
	temp1 = ADC_ReadReg( 0x02);
   15db2:	2002      	movs	r0, #2
   15db4:	4b14      	ldr	r3, [pc, #80]	; (15e08 <I2C_ReadMultiBytesOneReg+0x70>)
   15db6:	4798      	blx	r3
   15db8:	0003      	movs	r3, r0
   15dba:	61fb      	str	r3, [r7, #28]
	temp1 |= 0 << 7;
	ADC_WriteReg(0x02, temp1);
   15dbc:	69fb      	ldr	r3, [r7, #28]
   15dbe:	b2db      	uxtb	r3, r3
   15dc0:	0019      	movs	r1, r3
   15dc2:	2002      	movs	r0, #2
   15dc4:	4b11      	ldr	r3, [pc, #68]	; (15e0c <I2C_ReadMultiBytesOneReg+0x74>)
   15dc6:	4798      	blx	r3
	delay_ms(1);
   15dc8:	2001      	movs	r0, #1
   15dca:	4b11      	ldr	r3, [pc, #68]	; (15e10 <I2C_ReadMultiBytesOneReg+0x78>)
   15dcc:	4798      	blx	r3

	temp1 = ADC_ReadReg(0x12);
   15dce:	2012      	movs	r0, #18
   15dd0:	4b0d      	ldr	r3, [pc, #52]	; (15e08 <I2C_ReadMultiBytesOneReg+0x70>)
   15dd2:	4798      	blx	r3
   15dd4:	0003      	movs	r3, r0
   15dd6:	61fb      	str	r3, [r7, #28]
	temp2 = ADC_ReadReg(0x13);
   15dd8:	2013      	movs	r0, #19
   15dda:	4b0b      	ldr	r3, [pc, #44]	; (15e08 <I2C_ReadMultiBytesOneReg+0x70>)
   15ddc:	4798      	blx	r3
   15dde:	0003      	movs	r3, r0
   15de0:	61bb      	str	r3, [r7, #24]
	temp3 = ADC_ReadReg( 0x14);
   15de2:	2014      	movs	r0, #20
   15de4:	4b08      	ldr	r3, [pc, #32]	; (15e08 <I2C_ReadMultiBytesOneReg+0x70>)
   15de6:	4798      	blx	r3
   15de8:	0003      	movs	r3, r0
   15dea:	617b      	str	r3, [r7, #20]

	x = temp1 << 16 | temp2 << 8 | temp3 << 0;
   15dec:	69fb      	ldr	r3, [r7, #28]
   15dee:	041a      	lsls	r2, r3, #16
   15df0:	69bb      	ldr	r3, [r7, #24]
   15df2:	021b      	lsls	r3, r3, #8
   15df4:	431a      	orrs	r2, r3
   15df6:	697b      	ldr	r3, [r7, #20]
   15df8:	4313      	orrs	r3, r2
   15dfa:	613b      	str	r3, [r7, #16]
	return x;
   15dfc:	693b      	ldr	r3, [r7, #16]
	adcData.lenOut = sizeof(data);

	int32_t err= I2cReadData(&adcData);*/
	
	//int32_t err= reg_read(handle, u8RegAddr2, data,len);
}
   15dfe:	0018      	movs	r0, r3
   15e00:	46bd      	mov	sp, r7
   15e02:	b008      	add	sp, #32
   15e04:	bd80      	pop	{r7, pc}
   15e06:	46c0      	nop			; (mov r8, r8)
   15e08:	00015ba5 	.word	0x00015ba5
   15e0c:	00015bdd 	.word	0x00015bdd
   15e10:	00020bed 	.word	0x00020bed

00015e14 <ADC_Read_Conversion_Data>:

uint32_t ADC_Read_Conversion_Data(void)
{
   15e14:	b590      	push	{r4, r7, lr}
   15e16:	b083      	sub	sp, #12
   15e18:	af00      	add	r7, sp, #0
	uint8_t rdata[3];
	uint32_t result;
	result = I2C_ReadMultiBytesOneReg( ADC_SLAVE_ADDR, ADCO_B2_ADDR, &rdata[0], 3);
   15e1a:	003a      	movs	r2, r7
   15e1c:	2303      	movs	r3, #3
   15e1e:	2112      	movs	r1, #18
   15e20:	202a      	movs	r0, #42	; 0x2a
   15e22:	4c04      	ldr	r4, [pc, #16]	; (15e34 <ADC_Read_Conversion_Data+0x20>)
   15e24:	47a0      	blx	r4
   15e26:	0003      	movs	r3, r0
   15e28:	607b      	str	r3, [r7, #4]
	//((rdata[0] << 16) | (rdata[1] << 8) | rdata[2]);
	return result;
   15e2a:	687b      	ldr	r3, [r7, #4]
}
   15e2c:	0018      	movs	r0, r3
   15e2e:	46bd      	mov	sp, r7
   15e30:	b003      	add	sp, #12
   15e32:	bd90      	pop	{r4, r7, pc}
   15e34:	00015d99 	.word	0x00015d99

00015e38 <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(void)
{
   15e38:	b580      	push	{r7, lr}
   15e3a:	b082      	sub	sp, #8
   15e3c:	af00      	add	r7, sp, #0
    uint8_t readData[2];
    seesawData.address = NEO_TRELLIS_ADDR;
   15e3e:	4b38      	ldr	r3, [pc, #224]	; (15f20 <InitializeSeesaw+0xe8>)
   15e40:	222e      	movs	r2, #46	; 0x2e
   15e42:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   15e44:	4b36      	ldr	r3, [pc, #216]	; (15f20 <InitializeSeesaw+0xe8>)
   15e46:	4a37      	ldr	r2, [pc, #220]	; (15f24 <InitializeSeesaw+0xec>)
   15e48:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   15e4a:	4b35      	ldr	r3, [pc, #212]	; (15f20 <InitializeSeesaw+0xe8>)
   15e4c:	2202      	movs	r2, #2
   15e4e:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   15e50:	4b33      	ldr	r3, [pc, #204]	; (15f20 <InitializeSeesaw+0xe8>)
   15e52:	003a      	movs	r2, r7
   15e54:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15e56:	4b32      	ldr	r3, [pc, #200]	; (15f20 <InitializeSeesaw+0xe8>)
   15e58:	2201      	movs	r2, #1
   15e5a:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15e5c:	4b30      	ldr	r3, [pc, #192]	; (15f20 <InitializeSeesaw+0xe8>)
   15e5e:	2264      	movs	r2, #100	; 0x64
   15e60:	2100      	movs	r1, #0
   15e62:	0018      	movs	r0, r3
   15e64:	4b30      	ldr	r3, [pc, #192]	; (15f28 <InitializeSeesaw+0xf0>)
   15e66:	4798      	blx	r3
   15e68:	0003      	movs	r3, r0
   15e6a:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   15e6c:	687b      	ldr	r3, [r7, #4]
   15e6e:	2b00      	cmp	r3, #0
   15e70:	d004      	beq.n	15e7c <InitializeSeesaw+0x44>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   15e72:	4b2e      	ldr	r3, [pc, #184]	; (15f2c <InitializeSeesaw+0xf4>)
   15e74:	0018      	movs	r0, r3
   15e76:	4b2e      	ldr	r3, [pc, #184]	; (15f30 <InitializeSeesaw+0xf8>)
   15e78:	4798      	blx	r3
   15e7a:	e00c      	b.n	15e96 <InitializeSeesaw+0x5e>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   15e7c:	003b      	movs	r3, r7
   15e7e:	781b      	ldrb	r3, [r3, #0]
   15e80:	2b55      	cmp	r3, #85	; 0x55
   15e82:	d004      	beq.n	15e8e <InitializeSeesaw+0x56>
            SerialConsoleWriteString("Error/r/n");
   15e84:	4b2b      	ldr	r3, [pc, #172]	; (15f34 <InitializeSeesaw+0xfc>)
   15e86:	0018      	movs	r0, r3
   15e88:	4b29      	ldr	r3, [pc, #164]	; (15f30 <InitializeSeesaw+0xf8>)
   15e8a:	4798      	blx	r3
   15e8c:	e003      	b.n	15e96 <InitializeSeesaw+0x5e>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   15e8e:	4b2a      	ldr	r3, [pc, #168]	; (15f38 <InitializeSeesaw+0x100>)
   15e90:	0018      	movs	r0, r3
   15e92:	4b27      	ldr	r3, [pc, #156]	; (15f30 <InitializeSeesaw+0xf8>)
   15e94:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   15e96:	4b22      	ldr	r3, [pc, #136]	; (15f20 <InitializeSeesaw+0xe8>)
   15e98:	4a28      	ldr	r2, [pc, #160]	; (15f3c <InitializeSeesaw+0x104>)
   15e9a:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   15e9c:	4b20      	ldr	r3, [pc, #128]	; (15f20 <InitializeSeesaw+0xe8>)
   15e9e:	2203      	movs	r2, #3
   15ea0:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15ea2:	4b1f      	ldr	r3, [pc, #124]	; (15f20 <InitializeSeesaw+0xe8>)
   15ea4:	2164      	movs	r1, #100	; 0x64
   15ea6:	0018      	movs	r0, r3
   15ea8:	4b25      	ldr	r3, [pc, #148]	; (15f40 <InitializeSeesaw+0x108>)
   15eaa:	4798      	blx	r3
   15eac:	0003      	movs	r3, r0
   15eae:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   15eb0:	687b      	ldr	r3, [r7, #4]
   15eb2:	2b00      	cmp	r3, #0
   15eb4:	d003      	beq.n	15ebe <InitializeSeesaw+0x86>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   15eb6:	4b23      	ldr	r3, [pc, #140]	; (15f44 <InitializeSeesaw+0x10c>)
   15eb8:	0018      	movs	r0, r3
   15eba:	4b1d      	ldr	r3, [pc, #116]	; (15f30 <InitializeSeesaw+0xf8>)
   15ebc:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   15ebe:	4b18      	ldr	r3, [pc, #96]	; (15f20 <InitializeSeesaw+0xe8>)
   15ec0:	4a21      	ldr	r2, [pc, #132]	; (15f48 <InitializeSeesaw+0x110>)
   15ec2:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   15ec4:	4b16      	ldr	r3, [pc, #88]	; (15f20 <InitializeSeesaw+0xe8>)
   15ec6:	2203      	movs	r2, #3
   15ec8:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15eca:	4b15      	ldr	r3, [pc, #84]	; (15f20 <InitializeSeesaw+0xe8>)
   15ecc:	2164      	movs	r1, #100	; 0x64
   15ece:	0018      	movs	r0, r3
   15ed0:	4b1b      	ldr	r3, [pc, #108]	; (15f40 <InitializeSeesaw+0x108>)
   15ed2:	4798      	blx	r3
   15ed4:	0003      	movs	r3, r0
   15ed6:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   15ed8:	687b      	ldr	r3, [r7, #4]
   15eda:	2b00      	cmp	r3, #0
   15edc:	d003      	beq.n	15ee6 <InitializeSeesaw+0xae>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   15ede:	4b1b      	ldr	r3, [pc, #108]	; (15f4c <InitializeSeesaw+0x114>)
   15ee0:	0018      	movs	r0, r3
   15ee2:	4b13      	ldr	r3, [pc, #76]	; (15f30 <InitializeSeesaw+0xf8>)
   15ee4:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   15ee6:	4b0e      	ldr	r3, [pc, #56]	; (15f20 <InitializeSeesaw+0xe8>)
   15ee8:	4a19      	ldr	r2, [pc, #100]	; (15f50 <InitializeSeesaw+0x118>)
   15eea:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   15eec:	4b0c      	ldr	r3, [pc, #48]	; (15f20 <InitializeSeesaw+0xe8>)
   15eee:	2204      	movs	r2, #4
   15ef0:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15ef2:	4b0b      	ldr	r3, [pc, #44]	; (15f20 <InitializeSeesaw+0xe8>)
   15ef4:	2164      	movs	r1, #100	; 0x64
   15ef6:	0018      	movs	r0, r3
   15ef8:	4b11      	ldr	r3, [pc, #68]	; (15f40 <InitializeSeesaw+0x108>)
   15efa:	4798      	blx	r3
   15efc:	0003      	movs	r3, r0
   15efe:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   15f00:	687b      	ldr	r3, [r7, #4]
   15f02:	2b00      	cmp	r3, #0
   15f04:	d003      	beq.n	15f0e <InitializeSeesaw+0xd6>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   15f06:	4b13      	ldr	r3, [pc, #76]	; (15f54 <InitializeSeesaw+0x11c>)
   15f08:	0018      	movs	r0, r3
   15f0a:	4b09      	ldr	r3, [pc, #36]	; (15f30 <InitializeSeesaw+0xf8>)
   15f0c:	4798      	blx	r3
    }

    SeesawTurnOnLedTest();
   15f0e:	4b12      	ldr	r3, [pc, #72]	; (15f58 <InitializeSeesaw+0x120>)
   15f10:	4798      	blx	r3

    SeesawInitializeKeypad();
   15f12:	4b12      	ldr	r3, [pc, #72]	; (15f5c <InitializeSeesaw+0x124>)
   15f14:	4798      	blx	r3
    return error;
   15f16:	687b      	ldr	r3, [r7, #4]
}
   15f18:	0018      	movs	r0, r3
   15f1a:	46bd      	mov	sp, r7
   15f1c:	b002      	add	sp, #8
   15f1e:	bd80      	pop	{r7, pc}
   15f20:	200048b8 	.word	0x200048b8
   15f24:	0003721c 	.word	0x0003721c
   15f28:	00014b59 	.word	0x00014b59
   15f2c:	00037234 	.word	0x00037234
   15f30:	0001e835 	.word	0x0001e835
   15f34:	00037254 	.word	0x00037254
   15f38:	00037260 	.word	0x00037260
   15f3c:	00037220 	.word	0x00037220
   15f40:	00014a81 	.word	0x00014a81
   15f44:	00037274 	.word	0x00037274
   15f48:	00037224 	.word	0x00037224
   15f4c:	00037294 	.word	0x00037294
   15f50:	00037228 	.word	0x00037228
   15f54:	000372c0 	.word	0x000372c0
   15f58:	0001630d 	.word	0x0001630d
   15f5c:	0001621d 	.word	0x0001621d

00015f60 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   15f60:	b580      	push	{r7, lr}
   15f62:	b082      	sub	sp, #8
   15f64:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   15f66:	1cfb      	adds	r3, r7, #3
   15f68:	2200      	movs	r2, #0
   15f6a:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   15f6c:	4b11      	ldr	r3, [pc, #68]	; (15fb4 <SeesawGetKeypadCount+0x54>)
   15f6e:	222e      	movs	r2, #46	; 0x2e
   15f70:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   15f72:	4b10      	ldr	r3, [pc, #64]	; (15fb4 <SeesawGetKeypadCount+0x54>)
   15f74:	4a10      	ldr	r2, [pc, #64]	; (15fb8 <SeesawGetKeypadCount+0x58>)
   15f76:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   15f78:	4b0e      	ldr	r3, [pc, #56]	; (15fb4 <SeesawGetKeypadCount+0x54>)
   15f7a:	2202      	movs	r2, #2
   15f7c:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   15f7e:	4b0d      	ldr	r3, [pc, #52]	; (15fb4 <SeesawGetKeypadCount+0x54>)
   15f80:	1cfa      	adds	r2, r7, #3
   15f82:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15f84:	4b0b      	ldr	r3, [pc, #44]	; (15fb4 <SeesawGetKeypadCount+0x54>)
   15f86:	2201      	movs	r2, #1
   15f88:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15f8a:	4b0a      	ldr	r3, [pc, #40]	; (15fb4 <SeesawGetKeypadCount+0x54>)
   15f8c:	2264      	movs	r2, #100	; 0x64
   15f8e:	2100      	movs	r1, #0
   15f90:	0018      	movs	r0, r3
   15f92:	4b0a      	ldr	r3, [pc, #40]	; (15fbc <SeesawGetKeypadCount+0x5c>)
   15f94:	4798      	blx	r3
   15f96:	0003      	movs	r3, r0
   15f98:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   15f9a:	687b      	ldr	r3, [r7, #4]
   15f9c:	2b00      	cmp	r3, #0
   15f9e:	d003      	beq.n	15fa8 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15fa0:	4b07      	ldr	r3, [pc, #28]	; (15fc0 <SeesawGetKeypadCount+0x60>)
   15fa2:	0018      	movs	r0, r3
   15fa4:	4b07      	ldr	r3, [pc, #28]	; (15fc4 <SeesawGetKeypadCount+0x64>)
   15fa6:	4798      	blx	r3
    }
    return count;
   15fa8:	1cfb      	adds	r3, r7, #3
   15faa:	781b      	ldrb	r3, [r3, #0]
}
   15fac:	0018      	movs	r0, r3
   15fae:	46bd      	mov	sp, r7
   15fb0:	b002      	add	sp, #8
   15fb2:	bd80      	pop	{r7, pc}
   15fb4:	200048b8 	.word	0x200048b8
   15fb8:	00037230 	.word	0x00037230
   15fbc:	00014b59 	.word	0x00014b59
   15fc0:	000372f4 	.word	0x000372f4
   15fc4:	0001e835 	.word	0x0001e835

00015fc8 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   15fc8:	b580      	push	{r7, lr}
   15fca:	b084      	sub	sp, #16
   15fcc:	af00      	add	r7, sp, #0
   15fce:	6078      	str	r0, [r7, #4]
   15fd0:	000a      	movs	r2, r1
   15fd2:	1cfb      	adds	r3, r7, #3
   15fd4:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   15fd6:	1cfb      	adds	r3, r7, #3
   15fd8:	781b      	ldrb	r3, [r3, #0]
   15fda:	2b00      	cmp	r3, #0
   15fdc:	d101      	bne.n	15fe2 <SeesawReadKeypad+0x1a>
   15fde:	2300      	movs	r3, #0
   15fe0:	e026      	b.n	16030 <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   15fe2:	2308      	movs	r3, #8
   15fe4:	18fb      	adds	r3, r7, r3
   15fe6:	4a14      	ldr	r2, [pc, #80]	; (16038 <SeesawReadKeypad+0x70>)
   15fe8:	8812      	ldrh	r2, [r2, #0]
   15fea:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   15fec:	4b13      	ldr	r3, [pc, #76]	; (1603c <SeesawReadKeypad+0x74>)
   15fee:	222e      	movs	r2, #46	; 0x2e
   15ff0:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   15ff2:	4b12      	ldr	r3, [pc, #72]	; (1603c <SeesawReadKeypad+0x74>)
   15ff4:	2208      	movs	r2, #8
   15ff6:	18ba      	adds	r2, r7, r2
   15ff8:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   15ffa:	4b10      	ldr	r3, [pc, #64]	; (1603c <SeesawReadKeypad+0x74>)
   15ffc:	2202      	movs	r2, #2
   15ffe:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   16000:	4b0e      	ldr	r3, [pc, #56]	; (1603c <SeesawReadKeypad+0x74>)
   16002:	687a      	ldr	r2, [r7, #4]
   16004:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   16006:	1cfb      	adds	r3, r7, #3
   16008:	781b      	ldrb	r3, [r3, #0]
   1600a:	b29a      	uxth	r2, r3
   1600c:	4b0b      	ldr	r3, [pc, #44]	; (1603c <SeesawReadKeypad+0x74>)
   1600e:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   16010:	4b0a      	ldr	r3, [pc, #40]	; (1603c <SeesawReadKeypad+0x74>)
   16012:	2264      	movs	r2, #100	; 0x64
   16014:	2100      	movs	r1, #0
   16016:	0018      	movs	r0, r3
   16018:	4b09      	ldr	r3, [pc, #36]	; (16040 <SeesawReadKeypad+0x78>)
   1601a:	4798      	blx	r3
   1601c:	0003      	movs	r3, r0
   1601e:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   16020:	68fb      	ldr	r3, [r7, #12]
   16022:	2b00      	cmp	r3, #0
   16024:	d003      	beq.n	1602e <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16026:	4b07      	ldr	r3, [pc, #28]	; (16044 <SeesawReadKeypad+0x7c>)
   16028:	0018      	movs	r0, r3
   1602a:	4b07      	ldr	r3, [pc, #28]	; (16048 <SeesawReadKeypad+0x80>)
   1602c:	4798      	blx	r3
    }
    return error;
   1602e:	68fb      	ldr	r3, [r7, #12]
}
   16030:	0018      	movs	r0, r3
   16032:	46bd      	mov	sp, r7
   16034:	b004      	add	sp, #16
   16036:	bd80      	pop	{r7, pc}
   16038:	00037318 	.word	0x00037318
   1603c:	200048b8 	.word	0x200048b8
   16040:	00014b59 	.word	0x00014b59
   16044:	000372f4 	.word	0x000372f4
   16048:	0001e835 	.word	0x0001e835

0001604c <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
{
   1604c:	b590      	push	{r4, r7, lr}
   1604e:	b087      	sub	sp, #28
   16050:	af00      	add	r7, sp, #0
   16052:	0004      	movs	r4, r0
   16054:	0008      	movs	r0, r1
   16056:	0011      	movs	r1, r2
   16058:	1dfb      	adds	r3, r7, #7
   1605a:	1c22      	adds	r2, r4, #0
   1605c:	701a      	strb	r2, [r3, #0]
   1605e:	1dbb      	adds	r3, r7, #6
   16060:	1c02      	adds	r2, r0, #0
   16062:	701a      	strb	r2, [r3, #0]
   16064:	1d7b      	adds	r3, r7, #5
   16066:	1c0a      	adds	r2, r1, #0
   16068:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   1606a:	2310      	movs	r3, #16
   1606c:	18fb      	adds	r3, r7, r3
   1606e:	1d7a      	adds	r2, r7, #5
   16070:	7812      	ldrb	r2, [r2, #0]
   16072:	2101      	movs	r1, #1
   16074:	0010      	movs	r0, r2
   16076:	4008      	ands	r0, r1
   16078:	781a      	ldrb	r2, [r3, #0]
   1607a:	2101      	movs	r1, #1
   1607c:	438a      	bics	r2, r1
   1607e:	1c11      	adds	r1, r2, #0
   16080:	1c02      	adds	r2, r0, #0
   16082:	430a      	orrs	r2, r1
   16084:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   16086:	1dbb      	adds	r3, r7, #6
   16088:	781b      	ldrb	r3, [r3, #0]
   1608a:	2201      	movs	r2, #1
   1608c:	409a      	lsls	r2, r3
   1608e:	0013      	movs	r3, r2
   16090:	b2db      	uxtb	r3, r3
   16092:	1c1a      	adds	r2, r3, #0
   16094:	230f      	movs	r3, #15
   16096:	4013      	ands	r3, r2
   16098:	b2da      	uxtb	r2, r3
   1609a:	2310      	movs	r3, #16
   1609c:	18fb      	adds	r3, r7, r3
   1609e:	210f      	movs	r1, #15
   160a0:	400a      	ands	r2, r1
   160a2:	1890      	adds	r0, r2, r2
   160a4:	781a      	ldrb	r2, [r3, #0]
   160a6:	211e      	movs	r1, #30
   160a8:	438a      	bics	r2, r1
   160aa:	1c11      	adds	r1, r2, #0
   160ac:	1c02      	adds	r2, r0, #0
   160ae:	430a      	orrs	r2, r1
   160b0:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   160b2:	230c      	movs	r3, #12
   160b4:	18fb      	adds	r3, r7, r3
   160b6:	2210      	movs	r2, #16
   160b8:	701a      	strb	r2, [r3, #0]
   160ba:	230c      	movs	r3, #12
   160bc:	18fb      	adds	r3, r7, r3
   160be:	2201      	movs	r2, #1
   160c0:	705a      	strb	r2, [r3, #1]
   160c2:	230c      	movs	r3, #12
   160c4:	18fb      	adds	r3, r7, r3
   160c6:	1dfa      	adds	r2, r7, #7
   160c8:	7812      	ldrb	r2, [r2, #0]
   160ca:	709a      	strb	r2, [r3, #2]
   160cc:	2310      	movs	r3, #16
   160ce:	18fb      	adds	r3, r7, r3
   160d0:	781a      	ldrb	r2, [r3, #0]
   160d2:	230c      	movs	r3, #12
   160d4:	18fb      	adds	r3, r7, r3
   160d6:	70da      	strb	r2, [r3, #3]

    seesawData.address = NEO_TRELLIS_ADDR;
   160d8:	4b0c      	ldr	r3, [pc, #48]	; (1610c <SeesawActivateKey+0xc0>)
   160da:	222e      	movs	r2, #46	; 0x2e
   160dc:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   160de:	4b0b      	ldr	r3, [pc, #44]	; (1610c <SeesawActivateKey+0xc0>)
   160e0:	220c      	movs	r2, #12
   160e2:	18ba      	adds	r2, r7, r2
   160e4:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   160e6:	4b09      	ldr	r3, [pc, #36]	; (1610c <SeesawActivateKey+0xc0>)
   160e8:	2204      	movs	r2, #4
   160ea:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   160ec:	4b07      	ldr	r3, [pc, #28]	; (1610c <SeesawActivateKey+0xc0>)
   160ee:	2200      	movs	r2, #0
   160f0:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   160f2:	4b06      	ldr	r3, [pc, #24]	; (1610c <SeesawActivateKey+0xc0>)
   160f4:	2164      	movs	r1, #100	; 0x64
   160f6:	0018      	movs	r0, r3
   160f8:	4b05      	ldr	r3, [pc, #20]	; (16110 <SeesawActivateKey+0xc4>)
   160fa:	4798      	blx	r3
   160fc:	0003      	movs	r3, r0
   160fe:	617b      	str	r3, [r7, #20]
    return error;
   16100:	697b      	ldr	r3, [r7, #20]
}
   16102:	0018      	movs	r0, r3
   16104:	46bd      	mov	sp, r7
   16106:	b007      	add	sp, #28
   16108:	bd90      	pop	{r4, r7, pc}
   1610a:	46c0      	nop			; (mov r8, r8)
   1610c:	200048b8 	.word	0x200048b8
   16110:	00014a81 	.word	0x00014a81

00016114 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   16114:	b5b0      	push	{r4, r5, r7, lr}
   16116:	b086      	sub	sp, #24
   16118:	af00      	add	r7, sp, #0
   1611a:	0005      	movs	r5, r0
   1611c:	000c      	movs	r4, r1
   1611e:	0010      	movs	r0, r2
   16120:	0019      	movs	r1, r3
   16122:	1dfb      	adds	r3, r7, #7
   16124:	1c2a      	adds	r2, r5, #0
   16126:	701a      	strb	r2, [r3, #0]
   16128:	1dbb      	adds	r3, r7, #6
   1612a:	1c22      	adds	r2, r4, #0
   1612c:	701a      	strb	r2, [r3, #0]
   1612e:	1d7b      	adds	r3, r7, #5
   16130:	1c02      	adds	r2, r0, #0
   16132:	701a      	strb	r2, [r3, #0]
   16134:	1d3b      	adds	r3, r7, #4
   16136:	1c0a      	adds	r2, r1, #0
   16138:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   1613a:	2308      	movs	r3, #8
   1613c:	18fb      	adds	r3, r7, r3
   1613e:	220e      	movs	r2, #14
   16140:	701a      	strb	r2, [r3, #0]
   16142:	2308      	movs	r3, #8
   16144:	18fb      	adds	r3, r7, r3
   16146:	2204      	movs	r2, #4
   16148:	705a      	strb	r2, [r3, #1]
   1614a:	2308      	movs	r3, #8
   1614c:	18fb      	adds	r3, r7, r3
   1614e:	2200      	movs	r2, #0
   16150:	709a      	strb	r2, [r3, #2]
   16152:	2308      	movs	r3, #8
   16154:	18fb      	adds	r3, r7, r3
   16156:	2200      	movs	r2, #0
   16158:	70da      	strb	r2, [r3, #3]
   1615a:	2308      	movs	r3, #8
   1615c:	18fb      	adds	r3, r7, r3
   1615e:	1d7a      	adds	r2, r7, #5
   16160:	7812      	ldrb	r2, [r2, #0]
   16162:	711a      	strb	r2, [r3, #4]
   16164:	2308      	movs	r3, #8
   16166:	18fb      	adds	r3, r7, r3
   16168:	1dba      	adds	r2, r7, #6
   1616a:	7812      	ldrb	r2, [r2, #0]
   1616c:	715a      	strb	r2, [r3, #5]
   1616e:	2308      	movs	r3, #8
   16170:	18fb      	adds	r3, r7, r3
   16172:	1d3a      	adds	r2, r7, #4
   16174:	7812      	ldrb	r2, [r2, #0]
   16176:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   16178:	1dfb      	adds	r3, r7, #7
   1617a:	781b      	ldrb	r3, [r3, #0]
   1617c:	b29b      	uxth	r3, r3
   1617e:	2216      	movs	r2, #22
   16180:	18ba      	adds	r2, r7, r2
   16182:	1c19      	adds	r1, r3, #0
   16184:	1c0b      	adds	r3, r1, #0
   16186:	18db      	adds	r3, r3, r3
   16188:	185b      	adds	r3, r3, r1
   1618a:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   1618c:	2316      	movs	r3, #22
   1618e:	18fb      	adds	r3, r7, r3
   16190:	881b      	ldrh	r3, [r3, #0]
   16192:	0a1b      	lsrs	r3, r3, #8
   16194:	b29b      	uxth	r3, r3
   16196:	b2da      	uxtb	r2, r3
   16198:	2308      	movs	r3, #8
   1619a:	18fb      	adds	r3, r7, r3
   1619c:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   1619e:	2316      	movs	r3, #22
   161a0:	18fb      	adds	r3, r7, r3
   161a2:	881b      	ldrh	r3, [r3, #0]
   161a4:	b2da      	uxtb	r2, r3
   161a6:	2308      	movs	r3, #8
   161a8:	18fb      	adds	r3, r7, r3
   161aa:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   161ac:	4b09      	ldr	r3, [pc, #36]	; (161d4 <SeesawSetLed+0xc0>)
   161ae:	2208      	movs	r2, #8
   161b0:	18ba      	adds	r2, r7, r2
   161b2:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   161b4:	4b07      	ldr	r3, [pc, #28]	; (161d4 <SeesawSetLed+0xc0>)
   161b6:	2207      	movs	r2, #7
   161b8:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   161ba:	4b06      	ldr	r3, [pc, #24]	; (161d4 <SeesawSetLed+0xc0>)
   161bc:	2164      	movs	r1, #100	; 0x64
   161be:	0018      	movs	r0, r3
   161c0:	4b05      	ldr	r3, [pc, #20]	; (161d8 <SeesawSetLed+0xc4>)
   161c2:	4798      	blx	r3
   161c4:	0003      	movs	r3, r0
   161c6:	613b      	str	r3, [r7, #16]
    return error;
   161c8:	693b      	ldr	r3, [r7, #16]
}
   161ca:	0018      	movs	r0, r3
   161cc:	46bd      	mov	sp, r7
   161ce:	b006      	add	sp, #24
   161d0:	bdb0      	pop	{r4, r5, r7, pc}
   161d2:	46c0      	nop			; (mov r8, r8)
   161d4:	200048b8 	.word	0x200048b8
   161d8:	00014a81 	.word	0x00014a81

000161dc <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   161dc:	b580      	push	{r7, lr}
   161de:	b082      	sub	sp, #8
   161e0:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   161e2:	003b      	movs	r3, r7
   161e4:	4a0a      	ldr	r2, [pc, #40]	; (16210 <SeesawOrderLedUpdate+0x34>)
   161e6:	8812      	ldrh	r2, [r2, #0]
   161e8:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   161ea:	4b0a      	ldr	r3, [pc, #40]	; (16214 <SeesawOrderLedUpdate+0x38>)
   161ec:	003a      	movs	r2, r7
   161ee:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   161f0:	4b08      	ldr	r3, [pc, #32]	; (16214 <SeesawOrderLedUpdate+0x38>)
   161f2:	2202      	movs	r2, #2
   161f4:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   161f6:	4b07      	ldr	r3, [pc, #28]	; (16214 <SeesawOrderLedUpdate+0x38>)
   161f8:	2164      	movs	r1, #100	; 0x64
   161fa:	0018      	movs	r0, r3
   161fc:	4b06      	ldr	r3, [pc, #24]	; (16218 <SeesawOrderLedUpdate+0x3c>)
   161fe:	4798      	blx	r3
   16200:	0003      	movs	r3, r0
   16202:	607b      	str	r3, [r7, #4]
    return error;
   16204:	687b      	ldr	r3, [r7, #4]
}
   16206:	0018      	movs	r0, r3
   16208:	46bd      	mov	sp, r7
   1620a:	b002      	add	sp, #8
   1620c:	bd80      	pop	{r7, pc}
   1620e:	46c0      	nop			; (mov r8, r8)
   16210:	0003731c 	.word	0x0003731c
   16214:	200048b8 	.word	0x200048b8
   16218:	00014a81 	.word	0x00014a81

0001621c <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   1621c:	b580      	push	{r7, lr}
   1621e:	b082      	sub	sp, #8
   16220:	af00      	add	r7, sp, #0
    seesawData.address = NEO_TRELLIS_ADDR;
   16222:	4b33      	ldr	r3, [pc, #204]	; (162f0 <SeesawInitializeKeypad+0xd4>)
   16224:	222e      	movs	r2, #46	; 0x2e
   16226:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   16228:	4b31      	ldr	r3, [pc, #196]	; (162f0 <SeesawInitializeKeypad+0xd4>)
   1622a:	4a32      	ldr	r2, [pc, #200]	; (162f4 <SeesawInitializeKeypad+0xd8>)
   1622c:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   1622e:	4b30      	ldr	r3, [pc, #192]	; (162f0 <SeesawInitializeKeypad+0xd4>)
   16230:	2203      	movs	r2, #3
   16232:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   16234:	4b2e      	ldr	r3, [pc, #184]	; (162f0 <SeesawInitializeKeypad+0xd4>)
   16236:	2200      	movs	r2, #0
   16238:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   1623a:	4b2d      	ldr	r3, [pc, #180]	; (162f0 <SeesawInitializeKeypad+0xd4>)
   1623c:	2164      	movs	r1, #100	; 0x64
   1623e:	0018      	movs	r0, r3
   16240:	4b2d      	ldr	r3, [pc, #180]	; (162f8 <SeesawInitializeKeypad+0xdc>)
   16242:	4798      	blx	r3
   16244:	0003      	movs	r3, r0
   16246:	603b      	str	r3, [r7, #0]
    if (ERROR_NONE != error) {
   16248:	683b      	ldr	r3, [r7, #0]
   1624a:	2b00      	cmp	r3, #0
   1624c:	d003      	beq.n	16256 <SeesawInitializeKeypad+0x3a>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   1624e:	4b2b      	ldr	r3, [pc, #172]	; (162fc <SeesawInitializeKeypad+0xe0>)
   16250:	0018      	movs	r0, r3
   16252:	4b2b      	ldr	r3, [pc, #172]	; (16300 <SeesawInitializeKeypad+0xe4>)
   16254:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   16256:	2300      	movs	r3, #0
   16258:	607b      	str	r3, [r7, #4]
   1625a:	e041      	b.n	162e0 <SeesawInitializeKeypad+0xc4>
        error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   1625c:	687b      	ldr	r3, [r7, #4]
   1625e:	2b00      	cmp	r3, #0
   16260:	da00      	bge.n	16264 <SeesawInitializeKeypad+0x48>
   16262:	3303      	adds	r3, #3
   16264:	109b      	asrs	r3, r3, #2
   16266:	b2db      	uxtb	r3, r3
   16268:	00db      	lsls	r3, r3, #3
   1626a:	b2da      	uxtb	r2, r3
   1626c:	687b      	ldr	r3, [r7, #4]
   1626e:	4925      	ldr	r1, [pc, #148]	; (16304 <SeesawInitializeKeypad+0xe8>)
   16270:	400b      	ands	r3, r1
   16272:	d504      	bpl.n	1627e <SeesawInitializeKeypad+0x62>
   16274:	3b01      	subs	r3, #1
   16276:	2104      	movs	r1, #4
   16278:	4249      	negs	r1, r1
   1627a:	430b      	orrs	r3, r1
   1627c:	3301      	adds	r3, #1
   1627e:	b2db      	uxtb	r3, r3
   16280:	18d3      	adds	r3, r2, r3
   16282:	b2db      	uxtb	r3, r3
   16284:	2201      	movs	r2, #1
   16286:	2103      	movs	r1, #3
   16288:	0018      	movs	r0, r3
   1628a:	4b1f      	ldr	r3, [pc, #124]	; (16308 <SeesawInitializeKeypad+0xec>)
   1628c:	4798      	blx	r3
   1628e:	0003      	movs	r3, r0
   16290:	603b      	str	r3, [r7, #0]
        error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   16292:	687b      	ldr	r3, [r7, #4]
   16294:	2b00      	cmp	r3, #0
   16296:	da00      	bge.n	1629a <SeesawInitializeKeypad+0x7e>
   16298:	3303      	adds	r3, #3
   1629a:	109b      	asrs	r3, r3, #2
   1629c:	b2db      	uxtb	r3, r3
   1629e:	00db      	lsls	r3, r3, #3
   162a0:	b2da      	uxtb	r2, r3
   162a2:	687b      	ldr	r3, [r7, #4]
   162a4:	4917      	ldr	r1, [pc, #92]	; (16304 <SeesawInitializeKeypad+0xe8>)
   162a6:	400b      	ands	r3, r1
   162a8:	d504      	bpl.n	162b4 <SeesawInitializeKeypad+0x98>
   162aa:	3b01      	subs	r3, #1
   162ac:	2104      	movs	r1, #4
   162ae:	4249      	negs	r1, r1
   162b0:	430b      	orrs	r3, r1
   162b2:	3301      	adds	r3, #1
   162b4:	b2db      	uxtb	r3, r3
   162b6:	18d3      	adds	r3, r2, r3
   162b8:	b2db      	uxtb	r3, r3
   162ba:	2201      	movs	r2, #1
   162bc:	2102      	movs	r1, #2
   162be:	0018      	movs	r0, r3
   162c0:	4b11      	ldr	r3, [pc, #68]	; (16308 <SeesawInitializeKeypad+0xec>)
   162c2:	4798      	blx	r3
   162c4:	0002      	movs	r2, r0
   162c6:	683b      	ldr	r3, [r7, #0]
   162c8:	4313      	orrs	r3, r2
   162ca:	603b      	str	r3, [r7, #0]
        if (ERROR_NONE != error) {
   162cc:	683b      	ldr	r3, [r7, #0]
   162ce:	2b00      	cmp	r3, #0
   162d0:	d003      	beq.n	162da <SeesawInitializeKeypad+0xbe>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   162d2:	4b0a      	ldr	r3, [pc, #40]	; (162fc <SeesawInitializeKeypad+0xe0>)
   162d4:	0018      	movs	r0, r3
   162d6:	4b0a      	ldr	r3, [pc, #40]	; (16300 <SeesawInitializeKeypad+0xe4>)
   162d8:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   162da:	687b      	ldr	r3, [r7, #4]
   162dc:	3301      	adds	r3, #1
   162de:	607b      	str	r3, [r7, #4]
   162e0:	687b      	ldr	r3, [r7, #4]
   162e2:	2b0f      	cmp	r3, #15
   162e4:	ddba      	ble.n	1625c <SeesawInitializeKeypad+0x40>
        }
    }
}
   162e6:	46c0      	nop			; (mov r8, r8)
   162e8:	46bd      	mov	sp, r7
   162ea:	b002      	add	sp, #8
   162ec:	bd80      	pop	{r7, pc}
   162ee:	46c0      	nop			; (mov r8, r8)
   162f0:	200048b8 	.word	0x200048b8
   162f4:	0003722c 	.word	0x0003722c
   162f8:	00014a81 	.word	0x00014a81
   162fc:	00037320 	.word	0x00037320
   16300:	0001e835 	.word	0x0001e835
   16304:	80000003 	.word	0x80000003
   16308:	0001604d 	.word	0x0001604d

0001630c <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(void)
{
   1630c:	b5b0      	push	{r4, r5, r7, lr}
   1630e:	af00      	add	r7, sp, #0
    SeesawSetLed(15, 255, 255, 255);
   16310:	23ff      	movs	r3, #255	; 0xff
   16312:	22ff      	movs	r2, #255	; 0xff
   16314:	21ff      	movs	r1, #255	; 0xff
   16316:	200f      	movs	r0, #15
   16318:	4c09      	ldr	r4, [pc, #36]	; (16340 <SeesawTurnOnLedTest+0x34>)
   1631a:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   1631c:	4b09      	ldr	r3, [pc, #36]	; (16344 <SeesawTurnOnLedTest+0x38>)
   1631e:	4798      	blx	r3
    vTaskDelay(400);
   16320:	23c8      	movs	r3, #200	; 0xc8
   16322:	005b      	lsls	r3, r3, #1
   16324:	0018      	movs	r0, r3
   16326:	4b08      	ldr	r3, [pc, #32]	; (16348 <SeesawTurnOnLedTest+0x3c>)
   16328:	4798      	blx	r3

    SeesawSetLed(15, 0, 0, 0);
   1632a:	2300      	movs	r3, #0
   1632c:	2200      	movs	r2, #0
   1632e:	2100      	movs	r1, #0
   16330:	200f      	movs	r0, #15
   16332:	4c03      	ldr	r4, [pc, #12]	; (16340 <SeesawTurnOnLedTest+0x34>)
   16334:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   16336:	4b03      	ldr	r3, [pc, #12]	; (16344 <SeesawTurnOnLedTest+0x38>)
   16338:	4798      	blx	r3
   1633a:	46c0      	nop			; (mov r8, r8)
   1633c:	46bd      	mov	sp, r7
   1633e:	bdb0      	pop	{r4, r5, r7, pc}
   16340:	00016115 	.word	0x00016115
   16344:	000161dd 	.word	0x000161dd
   16348:	0001cbe1 	.word	0x0001cbe1

0001634c <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   1634c:	b580      	push	{r7, lr}
   1634e:	b084      	sub	sp, #16
   16350:	af00      	add	r7, sp, #0
   16352:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   16354:	687b      	ldr	r3, [r7, #4]
   16356:	681b      	ldr	r3, [r3, #0]
   16358:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   1635a:	46c0      	nop			; (mov r8, r8)
   1635c:	68fb      	ldr	r3, [r7, #12]
   1635e:	689b      	ldr	r3, [r3, #8]
   16360:	2202      	movs	r2, #2
   16362:	4013      	ands	r3, r2
   16364:	d1fa      	bne.n	1635c <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   16366:	68fb      	ldr	r3, [r7, #12]
   16368:	681b      	ldr	r3, [r3, #0]
   1636a:	2202      	movs	r2, #2
   1636c:	431a      	orrs	r2, r3
   1636e:	68fb      	ldr	r3, [r7, #12]
   16370:	601a      	str	r2, [r3, #0]
}
   16372:	46c0      	nop			; (mov r8, r8)
   16374:	46bd      	mov	sp, r7
   16376:	b004      	add	sp, #16
   16378:	bd80      	pop	{r7, pc}
	...

0001637c <configure_tcc>:
 *  Author: 60267
 */ 
#include "servo.h"
struct tcc_module tcc_instance;
void configure_tcc(void)
{
   1637c:	b580      	push	{r7, lr}
   1637e:	b0aa      	sub	sp, #168	; 0xa8
   16380:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
   16382:	4a15      	ldr	r2, [pc, #84]	; (163d8 <configure_tcc+0x5c>)
   16384:	1d3b      	adds	r3, r7, #4
   16386:	0011      	movs	r1, r2
   16388:	0018      	movs	r0, r3
   1638a:	4b14      	ldr	r3, [pc, #80]	; (163dc <configure_tcc+0x60>)
   1638c:	4798      	blx	r3
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV4;
   1638e:	1d3b      	adds	r3, r7, #4
   16390:	2202      	movs	r2, #2
   16392:	72da      	strb	r2, [r3, #11]
	config_tcc.counter.period = 0xBA2E;
   16394:	1d3b      	adds	r3, r7, #4
   16396:	4a12      	ldr	r2, [pc, #72]	; (163e0 <configure_tcc+0x64>)
   16398:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
   1639a:	1d3b      	adds	r3, r7, #4
   1639c:	2202      	movs	r2, #2
   1639e:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[CONF_PWM_CHANNEL] = (0xBA2E / 2);
   163a0:	1d3b      	adds	r3, r7, #4
   163a2:	4a10      	ldr	r2, [pc, #64]	; (163e4 <configure_tcc+0x68>)
   163a4:	625a      	str	r2, [r3, #36]	; 0x24
	config_tcc.pins.enable_wave_out_pin[CONF_PWM_OUTPUT] = true;
   163a6:	1d3b      	adds	r3, r7, #4
   163a8:	229a      	movs	r2, #154	; 0x9a
   163aa:	2101      	movs	r1, #1
   163ac:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.wave_out_pin[CONF_PWM_OUTPUT]        = CONF_PWM_OUT_PIN;
   163ae:	1d3b      	adds	r3, r7, #4
   163b0:	220a      	movs	r2, #10
   163b2:	661a      	str	r2, [r3, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[CONF_PWM_OUTPUT]    = CONF_PWM_OUT_MUX;
   163b4:	1d3b      	adds	r3, r7, #4
   163b6:	2280      	movs	r2, #128	; 0x80
   163b8:	2105      	movs	r1, #5
   163ba:	5099      	str	r1, [r3, r2]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
   163bc:	1d3a      	adds	r2, r7, #4
   163be:	4906      	ldr	r1, [pc, #24]	; (163d8 <configure_tcc+0x5c>)
   163c0:	4b09      	ldr	r3, [pc, #36]	; (163e8 <configure_tcc+0x6c>)
   163c2:	0018      	movs	r0, r3
   163c4:	4b09      	ldr	r3, [pc, #36]	; (163ec <configure_tcc+0x70>)
   163c6:	4798      	blx	r3
	tcc_enable(&tcc_instance);
   163c8:	4b07      	ldr	r3, [pc, #28]	; (163e8 <configure_tcc+0x6c>)
   163ca:	0018      	movs	r0, r3
   163cc:	4b08      	ldr	r3, [pc, #32]	; (163f0 <configure_tcc+0x74>)
   163ce:	4798      	blx	r3
}
   163d0:	46c0      	nop			; (mov r8, r8)
   163d2:	46bd      	mov	sp, r7
   163d4:	b02a      	add	sp, #168	; 0xa8
   163d6:	bd80      	pop	{r7, pc}
   163d8:	42002000 	.word	0x42002000
   163dc:	0002ae2d 	.word	0x0002ae2d
   163e0:	0000ba2e 	.word	0x0000ba2e
   163e4:	00005d17 	.word	0x00005d17
   163e8:	200048c8 	.word	0x200048c8
   163ec:	0002b489 	.word	0x0002b489
   163f0:	0001634d 	.word	0x0001634d

000163f4 <servo_setDuty>:


void servo_setDuty(int dutyCycle)
{
   163f4:	b580      	push	{r7, lr}
   163f6:	b084      	sub	sp, #16
   163f8:	af00      	add	r7, sp, #0
   163fa:	6078      	str	r0, [r7, #4]
	uint32_t compareValue = 0xBA2E / dutyCycle;
   163fc:	4b07      	ldr	r3, [pc, #28]	; (1641c <servo_setDuty+0x28>)
   163fe:	6879      	ldr	r1, [r7, #4]
   16400:	4807      	ldr	r0, [pc, #28]	; (16420 <servo_setDuty+0x2c>)
   16402:	4798      	blx	r3
   16404:	0003      	movs	r3, r0
   16406:	60fb      	str	r3, [r7, #12]
	tcc_set_compare_value(&tcc_instance, CONF_PWM_CHANNEL, compareValue);
   16408:	68fa      	ldr	r2, [r7, #12]
   1640a:	4b06      	ldr	r3, [pc, #24]	; (16424 <servo_setDuty+0x30>)
   1640c:	2102      	movs	r1, #2
   1640e:	0018      	movs	r0, r3
   16410:	4b05      	ldr	r3, [pc, #20]	; (16428 <servo_setDuty+0x34>)
   16412:	4798      	blx	r3
   16414:	46c0      	nop			; (mov r8, r8)
   16416:	46bd      	mov	sp, r7
   16418:	b004      	add	sp, #16
   1641a:	bd80      	pop	{r7, pc}
   1641c:	00033749 	.word	0x00033749
   16420:	0000ba2e 	.word	0x0000ba2e
   16424:	200048c8 	.word	0x200048c8
   16428:	0002b949 	.word	0x0002b949

0001642c <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   1642c:	b590      	push	{r4, r7, lr}
   1642e:	b085      	sub	sp, #20
   16430:	af00      	add	r7, sp, #0
   16432:	6078      	str	r0, [r7, #4]
    // Do initialization code here
	SerialConsoleWriteString("UI Task Started!");
   16434:	4b12      	ldr	r3, [pc, #72]	; (16480 <vUiHandlerTask+0x54>)
   16436:	0018      	movs	r0, r3
   16438:	4b12      	ldr	r3, [pc, #72]	; (16484 <vUiHandlerTask+0x58>)
   1643a:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   1643c:	4b12      	ldr	r3, [pc, #72]	; (16488 <vUiHandlerTask+0x5c>)
   1643e:	2201      	movs	r2, #1
   16440:	701a      	strb	r2, [r3, #0]
	configure_tcc();
   16442:	4b12      	ldr	r3, [pc, #72]	; (1648c <vUiHandlerTask+0x60>)
   16444:	4798      	blx	r3
	servo_setDuty(2);
   16446:	2002      	movs	r0, #2
   16448:	4b11      	ldr	r3, [pc, #68]	; (16490 <vUiHandlerTask+0x64>)
   1644a:	4798      	blx	r3

	
    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   1644c:	4b11      	ldr	r3, [pc, #68]	; (16494 <vUiHandlerTask+0x68>)
   1644e:	4798      	blx	r3
    gfx_mono_draw_string("ESE516", 0, 8, &sysfont);
   16450:	4b11      	ldr	r3, [pc, #68]	; (16498 <vUiHandlerTask+0x6c>)
   16452:	4812      	ldr	r0, [pc, #72]	; (1649c <vUiHandlerTask+0x70>)
   16454:	2208      	movs	r2, #8
   16456:	2100      	movs	r1, #0
   16458:	4c11      	ldr	r4, [pc, #68]	; (164a0 <vUiHandlerTask+0x74>)
   1645a:	47a0      	blx	r4
    gfx_mono_draw_string("HIGHWAY", 0, 18, &sysfont);
   1645c:	4b0e      	ldr	r3, [pc, #56]	; (16498 <vUiHandlerTask+0x6c>)
   1645e:	4811      	ldr	r0, [pc, #68]	; (164a4 <vUiHandlerTask+0x78>)
   16460:	2212      	movs	r2, #18
   16462:	2100      	movs	r1, #0
   16464:	4c0e      	ldr	r4, [pc, #56]	; (164a0 <vUiHandlerTask+0x74>)
   16466:	47a0      	blx	r4
	uint8_t count = 0;
   16468:	230f      	movs	r3, #15
   1646a:	18fb      	adds	r3, r7, r3
   1646c:	2200      	movs	r2, #0
   1646e:	701a      	strb	r2, [r3, #0]
	bool servo_flag = false;
   16470:	230e      	movs	r3, #14
   16472:	18fb      	adds	r3, r7, r3
   16474:	2200      	movs	r2, #0
   16476:	701a      	strb	r2, [r3, #0]
                //uiState = UI_STATE_HANDLE_BUTTONS;
                //break;
        //}
		
        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   16478:	2032      	movs	r0, #50	; 0x32
   1647a:	4b0b      	ldr	r3, [pc, #44]	; (164a8 <vUiHandlerTask+0x7c>)
   1647c:	4798      	blx	r3
   1647e:	e7fb      	b.n	16478 <vUiHandlerTask+0x4c>
   16480:	00037344 	.word	0x00037344
   16484:	0001e835 	.word	0x0001e835
   16488:	20004940 	.word	0x20004940
   1648c:	0001637d 	.word	0x0001637d
   16490:	000163f5 	.word	0x000163f5
   16494:	0001287d 	.word	0x0001287d
   16498:	20000000 	.word	0x20000000
   1649c:	00037358 	.word	0x00037358
   164a0:	00012721 	.word	0x00012721
   164a4:	00037360 	.word	0x00037360
   164a8:	0001cbe1 	.word	0x0001cbe1

000164ac <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   164ac:	b580      	push	{r7, lr}
   164ae:	b082      	sub	sp, #8
   164b0:	af00      	add	r7, sp, #0
   164b2:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   164b4:	4a08      	ldr	r2, [pc, #32]	; (164d8 <UiOrderShowMoves+0x2c>)
   164b6:	687b      	ldr	r3, [r7, #4]
   164b8:	0010      	movs	r0, r2
   164ba:	0019      	movs	r1, r3
   164bc:	2314      	movs	r3, #20
   164be:	001a      	movs	r2, r3
   164c0:	4b06      	ldr	r3, [pc, #24]	; (164dc <UiOrderShowMoves+0x30>)
   164c2:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   164c4:	4b06      	ldr	r3, [pc, #24]	; (164e0 <UiOrderShowMoves+0x34>)
   164c6:	2202      	movs	r2, #2
   164c8:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   164ca:	4b06      	ldr	r3, [pc, #24]	; (164e4 <UiOrderShowMoves+0x38>)
   164cc:	2200      	movs	r2, #0
   164ce:	701a      	strb	r2, [r3, #0]
}
   164d0:	46c0      	nop			; (mov r8, r8)
   164d2:	46bd      	mov	sp, r7
   164d4:	b002      	add	sp, #8
   164d6:	bd80      	pop	{r7, pc}
   164d8:	2000491c 	.word	0x2000491c
   164dc:	000355d9 	.word	0x000355d9
   164e0:	20004940 	.word	0x20004940
   164e4:	20000622 	.word	0x20000622

000164e8 <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   164e8:	b580      	push	{r7, lr}
   164ea:	af00      	add	r7, sp, #0
    return playIsDone;
   164ec:	4b02      	ldr	r3, [pc, #8]	; (164f8 <UiPlayIsDone+0x10>)
   164ee:	781b      	ldrb	r3, [r3, #0]
}
   164f0:	0018      	movs	r0, r3
   164f2:	46bd      	mov	sp, r7
   164f4:	bd80      	pop	{r7, pc}
   164f6:	46c0      	nop			; (mov r8, r8)
   164f8:	20000622 	.word	0x20000622

000164fc <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   164fc:	b580      	push	{r7, lr}
   164fe:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   16500:	4b01      	ldr	r3, [pc, #4]	; (16508 <UiGetGamePacketOut+0xc>)
}
   16502:	0018      	movs	r0, r3
   16504:	46bd      	mov	sp, r7
   16506:	bd80      	pop	{r7, pc}
   16508:	20004908 	.word	0x20004908

0001650c <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   1650c:	b590      	push	{r4, r7, lr}
   1650e:	b083      	sub	sp, #12
   16510:	af00      	add	r7, sp, #0
   16512:	0004      	movs	r4, r0
   16514:	0008      	movs	r0, r1
   16516:	0011      	movs	r1, r2
   16518:	1dfb      	adds	r3, r7, #7
   1651a:	1c22      	adds	r2, r4, #0
   1651c:	701a      	strb	r2, [r3, #0]
   1651e:	1dbb      	adds	r3, r7, #6
   16520:	1c02      	adds	r2, r0, #0
   16522:	701a      	strb	r2, [r3, #0]
   16524:	1d7b      	adds	r3, r7, #5
   16526:	1c0a      	adds	r2, r1, #0
   16528:	701a      	strb	r2, [r3, #0]
    red = r;
   1652a:	4b08      	ldr	r3, [pc, #32]	; (1654c <UIChangeColors+0x40>)
   1652c:	1dfa      	adds	r2, r7, #7
   1652e:	7812      	ldrb	r2, [r2, #0]
   16530:	701a      	strb	r2, [r3, #0]
    green = g;
   16532:	4b07      	ldr	r3, [pc, #28]	; (16550 <UIChangeColors+0x44>)
   16534:	1dba      	adds	r2, r7, #6
   16536:	7812      	ldrb	r2, [r2, #0]
   16538:	701a      	strb	r2, [r3, #0]
    blue = b;
   1653a:	4b06      	ldr	r3, [pc, #24]	; (16554 <UIChangeColors+0x48>)
   1653c:	1d7a      	adds	r2, r7, #5
   1653e:	7812      	ldrb	r2, [r2, #0]
   16540:	701a      	strb	r2, [r3, #0]
}
   16542:	46c0      	nop			; (mov r8, r8)
   16544:	46bd      	mov	sp, r7
   16546:	b003      	add	sp, #12
   16548:	bd90      	pop	{r4, r7, pc}
   1654a:	46c0      	nop			; (mov r8, r8)
   1654c:	20000621 	.word	0x20000621
   16550:	2000002c 	.word	0x2000002c
   16554:	2000002d 	.word	0x2000002d

00016558 <NVIC_SystemReset>:
{
   16558:	b580      	push	{r7, lr}
   1655a:	af00      	add	r7, sp, #0
   1655c:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   16560:	4b02      	ldr	r3, [pc, #8]	; (1656c <NVIC_SystemReset+0x14>)
   16562:	4a03      	ldr	r2, [pc, #12]	; (16570 <NVIC_SystemReset+0x18>)
   16564:	60da      	str	r2, [r3, #12]
   16566:	f3bf 8f4f 	dsb	sy
  while(1);                                                    /* wait until reset */
   1656a:	e7fe      	b.n	1656a <NVIC_SystemReset+0x12>
   1656c:	e000ed00 	.word	0xe000ed00
   16570:	05fa0004 	.word	0x05fa0004

00016574 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16574:	b580      	push	{r7, lr}
   16576:	b084      	sub	sp, #16
   16578:	af00      	add	r7, sp, #0
   1657a:	0002      	movs	r2, r0
   1657c:	1dfb      	adds	r3, r7, #7
   1657e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16580:	230f      	movs	r3, #15
   16582:	18fb      	adds	r3, r7, r3
   16584:	1dfa      	adds	r2, r7, #7
   16586:	7812      	ldrb	r2, [r2, #0]
   16588:	09d2      	lsrs	r2, r2, #7
   1658a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1658c:	230e      	movs	r3, #14
   1658e:	18fb      	adds	r3, r7, r3
   16590:	1dfa      	adds	r2, r7, #7
   16592:	7812      	ldrb	r2, [r2, #0]
   16594:	0952      	lsrs	r2, r2, #5
   16596:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16598:	4b0d      	ldr	r3, [pc, #52]	; (165d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1659a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   1659c:	230f      	movs	r3, #15
   1659e:	18fb      	adds	r3, r7, r3
   165a0:	781b      	ldrb	r3, [r3, #0]
   165a2:	2b00      	cmp	r3, #0
   165a4:	d10f      	bne.n	165c6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   165a6:	230f      	movs	r3, #15
   165a8:	18fb      	adds	r3, r7, r3
   165aa:	781b      	ldrb	r3, [r3, #0]
   165ac:	009b      	lsls	r3, r3, #2
   165ae:	2210      	movs	r2, #16
   165b0:	4694      	mov	ip, r2
   165b2:	44bc      	add	ip, r7
   165b4:	4463      	add	r3, ip
   165b6:	3b08      	subs	r3, #8
   165b8:	681a      	ldr	r2, [r3, #0]
   165ba:	230e      	movs	r3, #14
   165bc:	18fb      	adds	r3, r7, r3
   165be:	781b      	ldrb	r3, [r3, #0]
   165c0:	01db      	lsls	r3, r3, #7
   165c2:	18d3      	adds	r3, r2, r3
   165c4:	e000      	b.n	165c8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   165c6:	2300      	movs	r3, #0
	}
}
   165c8:	0018      	movs	r0, r3
   165ca:	46bd      	mov	sp, r7
   165cc:	b004      	add	sp, #16
   165ce:	bd80      	pop	{r7, pc}
   165d0:	41004400 	.word	0x41004400

000165d4 <system_reset>:
{
   165d4:	b580      	push	{r7, lr}
   165d6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   165d8:	4b02      	ldr	r3, [pc, #8]	; (165e4 <system_reset+0x10>)
   165da:	4798      	blx	r3
}
   165dc:	46c0      	nop			; (mov r8, r8)
   165de:	46bd      	mov	sp, r7
   165e0:	bd80      	pop	{r7, pc}
   165e2:	46c0      	nop			; (mov r8, r8)
   165e4:	00016559 	.word	0x00016559

000165e8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   165e8:	b580      	push	{r7, lr}
   165ea:	b082      	sub	sp, #8
   165ec:	af00      	add	r7, sp, #0
   165ee:	0002      	movs	r2, r0
   165f0:	1dfb      	adds	r3, r7, #7
   165f2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   165f4:	1dfb      	adds	r3, r7, #7
   165f6:	781b      	ldrb	r3, [r3, #0]
   165f8:	0018      	movs	r0, r3
   165fa:	4b03      	ldr	r3, [pc, #12]	; (16608 <port_get_group_from_gpio_pin+0x20>)
   165fc:	4798      	blx	r3
   165fe:	0003      	movs	r3, r0
}
   16600:	0018      	movs	r0, r3
   16602:	46bd      	mov	sp, r7
   16604:	b002      	add	sp, #8
   16606:	bd80      	pop	{r7, pc}
   16608:	00016575 	.word	0x00016575

0001660c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   1660c:	b580      	push	{r7, lr}
   1660e:	b084      	sub	sp, #16
   16610:	af00      	add	r7, sp, #0
   16612:	0002      	movs	r2, r0
   16614:	1dfb      	adds	r3, r7, #7
   16616:	701a      	strb	r2, [r3, #0]
   16618:	1dbb      	adds	r3, r7, #6
   1661a:	1c0a      	adds	r2, r1, #0
   1661c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1661e:	1dfb      	adds	r3, r7, #7
   16620:	781b      	ldrb	r3, [r3, #0]
   16622:	0018      	movs	r0, r3
   16624:	4b0d      	ldr	r3, [pc, #52]	; (1665c <port_pin_set_output_level+0x50>)
   16626:	4798      	blx	r3
   16628:	0003      	movs	r3, r0
   1662a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1662c:	1dfb      	adds	r3, r7, #7
   1662e:	781b      	ldrb	r3, [r3, #0]
   16630:	221f      	movs	r2, #31
   16632:	4013      	ands	r3, r2
   16634:	2201      	movs	r2, #1
   16636:	409a      	lsls	r2, r3
   16638:	0013      	movs	r3, r2
   1663a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   1663c:	1dbb      	adds	r3, r7, #6
   1663e:	781b      	ldrb	r3, [r3, #0]
   16640:	2b00      	cmp	r3, #0
   16642:	d003      	beq.n	1664c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16644:	68fb      	ldr	r3, [r7, #12]
   16646:	68ba      	ldr	r2, [r7, #8]
   16648:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   1664a:	e002      	b.n	16652 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1664c:	68fb      	ldr	r3, [r7, #12]
   1664e:	68ba      	ldr	r2, [r7, #8]
   16650:	615a      	str	r2, [r3, #20]
}
   16652:	46c0      	nop			; (mov r8, r8)
   16654:	46bd      	mov	sp, r7
   16656:	b004      	add	sp, #16
   16658:	bd80      	pop	{r7, pc}
   1665a:	46c0      	nop			; (mov r8, r8)
   1665c:	000165e9 	.word	0x000165e9

00016660 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   16660:	b580      	push	{r7, lr}
   16662:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   16664:	4b02      	ldr	r3, [pc, #8]	; (16670 <init_state+0x10>)
   16666:	2200      	movs	r2, #0
   16668:	701a      	strb	r2, [r3, #0]
}
   1666a:	46c0      	nop			; (mov r8, r8)
   1666c:	46bd      	mov	sp, r7
   1666e:	bd80      	pop	{r7, pc}
   16670:	20000639 	.word	0x20000639

00016674 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   16674:	b580      	push	{r7, lr}
   16676:	b082      	sub	sp, #8
   16678:	af00      	add	r7, sp, #0
   1667a:	0002      	movs	r2, r0
   1667c:	1dfb      	adds	r3, r7, #7
   1667e:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   16680:	1dfb      	adds	r3, r7, #7
   16682:	781b      	ldrb	r3, [r3, #0]
   16684:	b25b      	sxtb	r3, r3
   16686:	43db      	mvns	r3, r3
   16688:	b25b      	sxtb	r3, r3
   1668a:	4a06      	ldr	r2, [pc, #24]	; (166a4 <clear_state+0x30>)
   1668c:	7812      	ldrb	r2, [r2, #0]
   1668e:	b252      	sxtb	r2, r2
   16690:	4013      	ands	r3, r2
   16692:	b25b      	sxtb	r3, r3
   16694:	b2da      	uxtb	r2, r3
   16696:	4b03      	ldr	r3, [pc, #12]	; (166a4 <clear_state+0x30>)
   16698:	701a      	strb	r2, [r3, #0]
}
   1669a:	46c0      	nop			; (mov r8, r8)
   1669c:	46bd      	mov	sp, r7
   1669e:	b002      	add	sp, #8
   166a0:	bd80      	pop	{r7, pc}
   166a2:	46c0      	nop			; (mov r8, r8)
   166a4:	20000639 	.word	0x20000639

000166a8 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   166a8:	b580      	push	{r7, lr}
   166aa:	b082      	sub	sp, #8
   166ac:	af00      	add	r7, sp, #0
   166ae:	0002      	movs	r2, r0
   166b0:	1dfb      	adds	r3, r7, #7
   166b2:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   166b4:	4b05      	ldr	r3, [pc, #20]	; (166cc <add_state+0x24>)
   166b6:	781a      	ldrb	r2, [r3, #0]
   166b8:	1dfb      	adds	r3, r7, #7
   166ba:	781b      	ldrb	r3, [r3, #0]
   166bc:	4313      	orrs	r3, r2
   166be:	b2da      	uxtb	r2, r3
   166c0:	4b02      	ldr	r3, [pc, #8]	; (166cc <add_state+0x24>)
   166c2:	701a      	strb	r2, [r3, #0]
}
   166c4:	46c0      	nop			; (mov r8, r8)
   166c6:	46bd      	mov	sp, r7
   166c8:	b002      	add	sp, #8
   166ca:	bd80      	pop	{r7, pc}
   166cc:	20000639 	.word	0x20000639

000166d0 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   166d0:	b580      	push	{r7, lr}
   166d2:	b082      	sub	sp, #8
   166d4:	af00      	add	r7, sp, #0
   166d6:	0002      	movs	r2, r0
   166d8:	1dfb      	adds	r3, r7, #7
   166da:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   166dc:	4b06      	ldr	r3, [pc, #24]	; (166f8 <is_state_set+0x28>)
   166de:	781b      	ldrb	r3, [r3, #0]
   166e0:	1dfa      	adds	r2, r7, #7
   166e2:	7812      	ldrb	r2, [r2, #0]
   166e4:	4013      	ands	r3, r2
   166e6:	b2db      	uxtb	r3, r3
   166e8:	1e5a      	subs	r2, r3, #1
   166ea:	4193      	sbcs	r3, r2
   166ec:	b2db      	uxtb	r3, r3
}
   166ee:	0018      	movs	r0, r3
   166f0:	46bd      	mov	sp, r7
   166f2:	b002      	add	sp, #8
   166f4:	bd80      	pop	{r7, pc}
   166f6:	46c0      	nop			; (mov r8, r8)
   166f8:	20000639 	.word	0x20000639

000166fc <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   166fc:	b590      	push	{r4, r7, lr}
   166fe:	b085      	sub	sp, #20
   16700:	af00      	add	r7, sp, #0
   16702:	6078      	str	r0, [r7, #4]
   16704:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   16706:	687b      	ldr	r3, [r7, #4]
   16708:	2b00      	cmp	r3, #0
   1670a:	d002      	beq.n	16712 <is_exist_file+0x16>
   1670c:	683b      	ldr	r3, [r7, #0]
   1670e:	2b00      	cmp	r3, #0
   16710:	d101      	bne.n	16716 <is_exist_file+0x1a>
        return false;
   16712:	2300      	movs	r3, #0
   16714:	e013      	b.n	1673e <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   16716:	230f      	movs	r3, #15
   16718:	18fc      	adds	r4, r7, r3
   1671a:	6839      	ldr	r1, [r7, #0]
   1671c:	4b0a      	ldr	r3, [pc, #40]	; (16748 <is_exist_file+0x4c>)
   1671e:	2200      	movs	r2, #0
   16720:	0018      	movs	r0, r3
   16722:	4b0a      	ldr	r3, [pc, #40]	; (1674c <is_exist_file+0x50>)
   16724:	4798      	blx	r3
   16726:	0003      	movs	r3, r0
   16728:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   1672a:	4b07      	ldr	r3, [pc, #28]	; (16748 <is_exist_file+0x4c>)
   1672c:	0018      	movs	r0, r3
   1672e:	4b08      	ldr	r3, [pc, #32]	; (16750 <is_exist_file+0x54>)
   16730:	4798      	blx	r3
    return (ret == FR_OK);
   16732:	230f      	movs	r3, #15
   16734:	18fb      	adds	r3, r7, r3
   16736:	781b      	ldrb	r3, [r3, #0]
   16738:	425a      	negs	r2, r3
   1673a:	4153      	adcs	r3, r2
   1673c:	b2db      	uxtb	r3, r3
}
   1673e:	0018      	movs	r0, r3
   16740:	46bd      	mov	sp, r7
   16742:	b005      	add	sp, #20
   16744:	bd90      	pop	{r4, r7, pc}
   16746:	46c0      	nop			; (mov r8, r8)
   16748:	2000086c 	.word	0x2000086c
   1674c:	0002e55d 	.word	0x0002e55d
   16750:	0002ef5d 	.word	0x0002ef5d

00016754 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   16754:	b580      	push	{r7, lr}
   16756:	b09e      	sub	sp, #120	; 0x78
   16758:	af00      	add	r7, sp, #0
   1675a:	60f8      	str	r0, [r7, #12]
   1675c:	60b9      	str	r1, [r7, #8]
   1675e:	1dfb      	adds	r3, r7, #7
   16760:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   16762:	2376      	movs	r3, #118	; 0x76
   16764:	18fb      	adds	r3, r7, r3
   16766:	2201      	movs	r2, #1
   16768:	801a      	strh	r2, [r3, #0]
   1676a:	2374      	movs	r3, #116	; 0x74
   1676c:	18fb      	adds	r3, r7, r3
   1676e:	2200      	movs	r2, #0
   16770:	801a      	strh	r2, [r3, #0]
   16772:	236e      	movs	r3, #110	; 0x6e
   16774:	18fb      	adds	r3, r7, r3
   16776:	2200      	movs	r2, #0
   16778:	801a      	strh	r2, [r3, #0]
   1677a:	2372      	movs	r3, #114	; 0x72
   1677c:	18fb      	adds	r3, r7, r3
   1677e:	2200      	movs	r2, #0
   16780:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   16782:	2324      	movs	r3, #36	; 0x24
   16784:	18fb      	adds	r3, r7, r3
   16786:	0018      	movs	r0, r3
   16788:	2341      	movs	r3, #65	; 0x41
   1678a:	001a      	movs	r2, r3
   1678c:	2100      	movs	r1, #0
   1678e:	4b92      	ldr	r3, [pc, #584]	; (169d8 <rename_to_unique+0x284>)
   16790:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   16792:	2318      	movs	r3, #24
   16794:	18fb      	adds	r3, r7, r3
   16796:	0018      	movs	r0, r3
   16798:	2309      	movs	r3, #9
   1679a:	001a      	movs	r2, r3
   1679c:	2100      	movs	r1, #0
   1679e:	4b8e      	ldr	r3, [pc, #568]	; (169d8 <rename_to_unique+0x284>)
   167a0:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   167a2:	2314      	movs	r3, #20
   167a4:	18fb      	adds	r3, r7, r3
   167a6:	2200      	movs	r2, #0
   167a8:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   167aa:	2300      	movs	r3, #0
   167ac:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   167ae:	2371      	movs	r3, #113	; 0x71
   167b0:	18fb      	adds	r3, r7, r3
   167b2:	2200      	movs	r2, #0
   167b4:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   167b6:	68bb      	ldr	r3, [r7, #8]
   167b8:	2b00      	cmp	r3, #0
   167ba:	d101      	bne.n	167c0 <rename_to_unique+0x6c>
        return false;
   167bc:	2300      	movs	r3, #0
   167be:	e106      	b.n	169ce <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   167c0:	68ba      	ldr	r2, [r7, #8]
   167c2:	68fb      	ldr	r3, [r7, #12]
   167c4:	0011      	movs	r1, r2
   167c6:	0018      	movs	r0, r3
   167c8:	4b84      	ldr	r3, [pc, #528]	; (169dc <rename_to_unique+0x288>)
   167ca:	4798      	blx	r3
   167cc:	0003      	movs	r3, r0
   167ce:	001a      	movs	r2, r3
   167d0:	2301      	movs	r3, #1
   167d2:	4053      	eors	r3, r2
   167d4:	b2db      	uxtb	r3, r3
   167d6:	2b00      	cmp	r3, #0
   167d8:	d001      	beq.n	167de <rename_to_unique+0x8a>
        return true;
   167da:	2301      	movs	r3, #1
   167dc:	e0f7      	b.n	169ce <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   167de:	68bb      	ldr	r3, [r7, #8]
   167e0:	0018      	movs	r0, r3
   167e2:	4b7f      	ldr	r3, [pc, #508]	; (169e0 <rename_to_unique+0x28c>)
   167e4:	4798      	blx	r3
   167e6:	0003      	movs	r3, r0
   167e8:	2b40      	cmp	r3, #64	; 0x40
   167ea:	d901      	bls.n	167f0 <rename_to_unique+0x9c>
        return false;
   167ec:	2300      	movs	r3, #0
   167ee:	e0ee      	b.n	169ce <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   167f0:	68bb      	ldr	r3, [r7, #8]
   167f2:	212e      	movs	r1, #46	; 0x2e
   167f4:	0018      	movs	r0, r3
   167f6:	4b7b      	ldr	r3, [pc, #492]	; (169e4 <rename_to_unique+0x290>)
   167f8:	4798      	blx	r3
   167fa:	0003      	movs	r3, r0
   167fc:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   167fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16800:	2b00      	cmp	r3, #0
   16802:	d052      	beq.n	168aa <rename_to_unique+0x156>
        ext_len = strlen(p);
   16804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16806:	0018      	movs	r0, r3
   16808:	4b75      	ldr	r3, [pc, #468]	; (169e0 <rename_to_unique+0x28c>)
   1680a:	4798      	blx	r3
   1680c:	0002      	movs	r2, r0
   1680e:	236e      	movs	r3, #110	; 0x6e
   16810:	18fb      	adds	r3, r7, r3
   16812:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   16814:	236e      	movs	r3, #110	; 0x6e
   16816:	18fb      	adds	r3, r7, r3
   16818:	881b      	ldrh	r3, [r3, #0]
   1681a:	2b07      	cmp	r3, #7
   1681c:	d837      	bhi.n	1688e <rename_to_unique+0x13a>
            valid_ext = true;
   1681e:	2371      	movs	r3, #113	; 0x71
   16820:	18fb      	adds	r3, r7, r3
   16822:	2201      	movs	r2, #1
   16824:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   16826:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16828:	2318      	movs	r3, #24
   1682a:	18fb      	adds	r3, r7, r3
   1682c:	0011      	movs	r1, r2
   1682e:	0018      	movs	r0, r3
   16830:	4b6d      	ldr	r3, [pc, #436]	; (169e8 <rename_to_unique+0x294>)
   16832:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   16834:	68bb      	ldr	r3, [r7, #8]
   16836:	0018      	movs	r0, r3
   16838:	4b69      	ldr	r3, [pc, #420]	; (169e0 <rename_to_unique+0x28c>)
   1683a:	4798      	blx	r3
   1683c:	0002      	movs	r2, r0
   1683e:	236e      	movs	r3, #110	; 0x6e
   16840:	18fb      	adds	r3, r7, r3
   16842:	881b      	ldrh	r3, [r3, #0]
   16844:	1ad3      	subs	r3, r2, r3
   16846:	2b3c      	cmp	r3, #60	; 0x3c
   16848:	d911      	bls.n	1686e <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   1684a:	2374      	movs	r3, #116	; 0x74
   1684c:	18fb      	adds	r3, r7, r3
   1684e:	226e      	movs	r2, #110	; 0x6e
   16850:	18ba      	adds	r2, r7, r2
   16852:	8812      	ldrh	r2, [r2, #0]
   16854:	213c      	movs	r1, #60	; 0x3c
   16856:	1a8a      	subs	r2, r1, r2
   16858:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   1685a:	2374      	movs	r3, #116	; 0x74
   1685c:	18fb      	adds	r3, r7, r3
   1685e:	881a      	ldrh	r2, [r3, #0]
   16860:	68b9      	ldr	r1, [r7, #8]
   16862:	2324      	movs	r3, #36	; 0x24
   16864:	18fb      	adds	r3, r7, r3
   16866:	0018      	movs	r0, r3
   16868:	4b60      	ldr	r3, [pc, #384]	; (169ec <rename_to_unique+0x298>)
   1686a:	4798      	blx	r3
   1686c:	e02a      	b.n	168c4 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   1686e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16870:	68bb      	ldr	r3, [r7, #8]
   16872:	1ad2      	subs	r2, r2, r3
   16874:	2374      	movs	r3, #116	; 0x74
   16876:	18fb      	adds	r3, r7, r3
   16878:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   1687a:	2374      	movs	r3, #116	; 0x74
   1687c:	18fb      	adds	r3, r7, r3
   1687e:	881a      	ldrh	r2, [r3, #0]
   16880:	68b9      	ldr	r1, [r7, #8]
   16882:	2324      	movs	r3, #36	; 0x24
   16884:	18fb      	adds	r3, r7, r3
   16886:	0018      	movs	r0, r3
   16888:	4b58      	ldr	r3, [pc, #352]	; (169ec <rename_to_unique+0x298>)
   1688a:	4798      	blx	r3
   1688c:	e01a      	b.n	168c4 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1688e:	2374      	movs	r3, #116	; 0x74
   16890:	18fb      	adds	r3, r7, r3
   16892:	223c      	movs	r2, #60	; 0x3c
   16894:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   16896:	2374      	movs	r3, #116	; 0x74
   16898:	18fb      	adds	r3, r7, r3
   1689a:	881a      	ldrh	r2, [r3, #0]
   1689c:	68b9      	ldr	r1, [r7, #8]
   1689e:	2324      	movs	r3, #36	; 0x24
   168a0:	18fb      	adds	r3, r7, r3
   168a2:	0018      	movs	r0, r3
   168a4:	4b51      	ldr	r3, [pc, #324]	; (169ec <rename_to_unique+0x298>)
   168a6:	4798      	blx	r3
   168a8:	e00c      	b.n	168c4 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   168aa:	2374      	movs	r3, #116	; 0x74
   168ac:	18fb      	adds	r3, r7, r3
   168ae:	223c      	movs	r2, #60	; 0x3c
   168b0:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   168b2:	2374      	movs	r3, #116	; 0x74
   168b4:	18fb      	adds	r3, r7, r3
   168b6:	881a      	ldrh	r2, [r3, #0]
   168b8:	68b9      	ldr	r1, [r7, #8]
   168ba:	2324      	movs	r3, #36	; 0x24
   168bc:	18fb      	adds	r3, r7, r3
   168be:	0018      	movs	r0, r3
   168c0:	4b4a      	ldr	r3, [pc, #296]	; (169ec <rename_to_unique+0x298>)
   168c2:	4798      	blx	r3
    }

    name[name_len++] = '-';
   168c4:	2374      	movs	r3, #116	; 0x74
   168c6:	18fb      	adds	r3, r7, r3
   168c8:	881b      	ldrh	r3, [r3, #0]
   168ca:	2274      	movs	r2, #116	; 0x74
   168cc:	18ba      	adds	r2, r7, r2
   168ce:	1c59      	adds	r1, r3, #1
   168d0:	8011      	strh	r1, [r2, #0]
   168d2:	001a      	movs	r2, r3
   168d4:	2324      	movs	r3, #36	; 0x24
   168d6:	18fb      	adds	r3, r7, r3
   168d8:	212d      	movs	r1, #45	; 0x2d
   168da:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   168dc:	2376      	movs	r3, #118	; 0x76
   168de:	18fb      	adds	r3, r7, r3
   168e0:	2200      	movs	r2, #0
   168e2:	801a      	strh	r2, [r3, #0]
   168e4:	2372      	movs	r3, #114	; 0x72
   168e6:	18fb      	adds	r3, r7, r3
   168e8:	2201      	movs	r2, #1
   168ea:	801a      	strh	r2, [r3, #0]
   168ec:	e010      	b.n	16910 <rename_to_unique+0x1bc>
        count *= 10;
   168ee:	2372      	movs	r3, #114	; 0x72
   168f0:	18fa      	adds	r2, r7, r3
   168f2:	2372      	movs	r3, #114	; 0x72
   168f4:	18fb      	adds	r3, r7, r3
   168f6:	881b      	ldrh	r3, [r3, #0]
   168f8:	1c19      	adds	r1, r3, #0
   168fa:	0089      	lsls	r1, r1, #2
   168fc:	18cb      	adds	r3, r1, r3
   168fe:	18db      	adds	r3, r3, r3
   16900:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16902:	2376      	movs	r3, #118	; 0x76
   16904:	18fb      	adds	r3, r7, r3
   16906:	881a      	ldrh	r2, [r3, #0]
   16908:	2376      	movs	r3, #118	; 0x76
   1690a:	18fb      	adds	r3, r7, r3
   1690c:	3201      	adds	r2, #1
   1690e:	801a      	strh	r2, [r3, #0]
   16910:	2376      	movs	r3, #118	; 0x76
   16912:	18fb      	adds	r3, r7, r3
   16914:	881b      	ldrh	r3, [r3, #0]
   16916:	2b02      	cmp	r3, #2
   16918:	d9e9      	bls.n	168ee <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   1691a:	2376      	movs	r3, #118	; 0x76
   1691c:	18fb      	adds	r3, r7, r3
   1691e:	2201      	movs	r2, #1
   16920:	801a      	strh	r2, [r3, #0]
   16922:	e04b      	b.n	169bc <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   16924:	2376      	movs	r3, #118	; 0x76
   16926:	18fb      	adds	r3, r7, r3
   16928:	881a      	ldrh	r2, [r3, #0]
   1692a:	4931      	ldr	r1, [pc, #196]	; (169f0 <rename_to_unique+0x29c>)
   1692c:	2314      	movs	r3, #20
   1692e:	18fb      	adds	r3, r7, r3
   16930:	0018      	movs	r0, r3
   16932:	4b30      	ldr	r3, [pc, #192]	; (169f4 <rename_to_unique+0x2a0>)
   16934:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   16936:	2374      	movs	r3, #116	; 0x74
   16938:	18fb      	adds	r3, r7, r3
   1693a:	881b      	ldrh	r3, [r3, #0]
   1693c:	2224      	movs	r2, #36	; 0x24
   1693e:	18ba      	adds	r2, r7, r2
   16940:	18d3      	adds	r3, r2, r3
   16942:	2214      	movs	r2, #20
   16944:	18b9      	adds	r1, r7, r2
   16946:	2203      	movs	r2, #3
   16948:	0018      	movs	r0, r3
   1694a:	4b28      	ldr	r3, [pc, #160]	; (169ec <rename_to_unique+0x298>)
   1694c:	4798      	blx	r3
        if (valid_ext) {
   1694e:	2371      	movs	r3, #113	; 0x71
   16950:	18fb      	adds	r3, r7, r3
   16952:	781b      	ldrb	r3, [r3, #0]
   16954:	2b00      	cmp	r3, #0
   16956:	d00c      	beq.n	16972 <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   16958:	2374      	movs	r3, #116	; 0x74
   1695a:	18fb      	adds	r3, r7, r3
   1695c:	881b      	ldrh	r3, [r3, #0]
   1695e:	3303      	adds	r3, #3
   16960:	2224      	movs	r2, #36	; 0x24
   16962:	18ba      	adds	r2, r7, r2
   16964:	18d3      	adds	r3, r2, r3
   16966:	2218      	movs	r2, #24
   16968:	18ba      	adds	r2, r7, r2
   1696a:	0011      	movs	r1, r2
   1696c:	0018      	movs	r0, r3
   1696e:	4b1e      	ldr	r3, [pc, #120]	; (169e8 <rename_to_unique+0x294>)
   16970:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   16972:	2324      	movs	r3, #36	; 0x24
   16974:	18fa      	adds	r2, r7, r3
   16976:	68fb      	ldr	r3, [r7, #12]
   16978:	0011      	movs	r1, r2
   1697a:	0018      	movs	r0, r3
   1697c:	4b17      	ldr	r3, [pc, #92]	; (169dc <rename_to_unique+0x288>)
   1697e:	4798      	blx	r3
   16980:	0003      	movs	r3, r0
   16982:	001a      	movs	r2, r3
   16984:	2301      	movs	r3, #1
   16986:	4053      	eors	r3, r2
   16988:	b2db      	uxtb	r3, r3
   1698a:	2b00      	cmp	r3, #0
   1698c:	d00f      	beq.n	169ae <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   1698e:	1dfb      	adds	r3, r7, #7
   16990:	781a      	ldrb	r2, [r3, #0]
   16992:	68bb      	ldr	r3, [r7, #8]
   16994:	2100      	movs	r1, #0
   16996:	0018      	movs	r0, r3
   16998:	4b0f      	ldr	r3, [pc, #60]	; (169d8 <rename_to_unique+0x284>)
   1699a:	4798      	blx	r3
            strcpy(file_path_name, name);
   1699c:	2324      	movs	r3, #36	; 0x24
   1699e:	18fa      	adds	r2, r7, r3
   169a0:	68bb      	ldr	r3, [r7, #8]
   169a2:	0011      	movs	r1, r2
   169a4:	0018      	movs	r0, r3
   169a6:	4b10      	ldr	r3, [pc, #64]	; (169e8 <rename_to_unique+0x294>)
   169a8:	4798      	blx	r3
            return true;
   169aa:	2301      	movs	r3, #1
   169ac:	e00f      	b.n	169ce <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   169ae:	2376      	movs	r3, #118	; 0x76
   169b0:	18fb      	adds	r3, r7, r3
   169b2:	881a      	ldrh	r2, [r3, #0]
   169b4:	2376      	movs	r3, #118	; 0x76
   169b6:	18fb      	adds	r3, r7, r3
   169b8:	3201      	adds	r2, #1
   169ba:	801a      	strh	r2, [r3, #0]
   169bc:	2376      	movs	r3, #118	; 0x76
   169be:	18fa      	adds	r2, r7, r3
   169c0:	2372      	movs	r3, #114	; 0x72
   169c2:	18fb      	adds	r3, r7, r3
   169c4:	8812      	ldrh	r2, [r2, #0]
   169c6:	881b      	ldrh	r3, [r3, #0]
   169c8:	429a      	cmp	r2, r3
   169ca:	d3ab      	bcc.n	16924 <rename_to_unique+0x1d0>
        }
    }
    return false;
   169cc:	2300      	movs	r3, #0
}
   169ce:	0018      	movs	r0, r3
   169d0:	46bd      	mov	sp, r7
   169d2:	b01e      	add	sp, #120	; 0x78
   169d4:	bd80      	pop	{r7, pc}
   169d6:	46c0      	nop			; (mov r8, r8)
   169d8:	0003560f 	.word	0x0003560f
   169dc:	000166fd 	.word	0x000166fd
   169e0:	000359c7 	.word	0x000359c7
   169e4:	00035a21 	.word	0x00035a21
   169e8:	0003597b 	.word	0x0003597b
   169ec:	000359f7 	.word	0x000359f7
   169f0:	0003737c 	.word	0x0003737c
   169f4:	000358cd 	.word	0x000358cd

000169f8 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   169f8:	b590      	push	{r4, r7, lr}
   169fa:	b083      	sub	sp, #12
   169fc:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   169fe:	2001      	movs	r0, #1
   16a00:	4b22      	ldr	r3, [pc, #136]	; (16a8c <start_download+0x94>)
   16a02:	4798      	blx	r3
   16a04:	0003      	movs	r3, r0
   16a06:	001a      	movs	r2, r3
   16a08:	2301      	movs	r3, #1
   16a0a:	4053      	eors	r3, r2
   16a0c:	b2db      	uxtb	r3, r3
   16a0e:	2b00      	cmp	r3, #0
   16a10:	d005      	beq.n	16a1e <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   16a12:	4b1f      	ldr	r3, [pc, #124]	; (16a90 <start_download+0x98>)
   16a14:	0019      	movs	r1, r3
   16a16:	2001      	movs	r0, #1
   16a18:	4b1e      	ldr	r3, [pc, #120]	; (16a94 <start_download+0x9c>)
   16a1a:	4798      	blx	r3
        return;
   16a1c:	e032      	b.n	16a84 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   16a1e:	2002      	movs	r0, #2
   16a20:	4b1a      	ldr	r3, [pc, #104]	; (16a8c <start_download+0x94>)
   16a22:	4798      	blx	r3
   16a24:	0003      	movs	r3, r0
   16a26:	001a      	movs	r2, r3
   16a28:	2301      	movs	r3, #1
   16a2a:	4053      	eors	r3, r2
   16a2c:	b2db      	uxtb	r3, r3
   16a2e:	2b00      	cmp	r3, #0
   16a30:	d005      	beq.n	16a3e <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   16a32:	4b19      	ldr	r3, [pc, #100]	; (16a98 <start_download+0xa0>)
   16a34:	0019      	movs	r1, r3
   16a36:	2001      	movs	r0, #1
   16a38:	4b16      	ldr	r3, [pc, #88]	; (16a94 <start_download+0x9c>)
   16a3a:	4798      	blx	r3
        return;
   16a3c:	e022      	b.n	16a84 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   16a3e:	2004      	movs	r0, #4
   16a40:	4b12      	ldr	r3, [pc, #72]	; (16a8c <start_download+0x94>)
   16a42:	4798      	blx	r3
   16a44:	1e03      	subs	r3, r0, #0
   16a46:	d005      	beq.n	16a54 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   16a48:	4b14      	ldr	r3, [pc, #80]	; (16a9c <start_download+0xa4>)
   16a4a:	0019      	movs	r1, r3
   16a4c:	2001      	movs	r0, #1
   16a4e:	4b11      	ldr	r3, [pc, #68]	; (16a94 <start_download+0x9c>)
   16a50:	4798      	blx	r3
        return;
   16a52:	e017      	b.n	16a84 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   16a54:	2008      	movs	r0, #8
   16a56:	4b0d      	ldr	r3, [pc, #52]	; (16a8c <start_download+0x94>)
   16a58:	4798      	blx	r3
   16a5a:	1e03      	subs	r3, r0, #0
   16a5c:	d005      	beq.n	16a6a <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   16a5e:	4b10      	ldr	r3, [pc, #64]	; (16aa0 <start_download+0xa8>)
   16a60:	0019      	movs	r1, r3
   16a62:	2001      	movs	r0, #1
   16a64:	4b0b      	ldr	r3, [pc, #44]	; (16a94 <start_download+0x9c>)
   16a66:	4798      	blx	r3
        return;
   16a68:	e00c      	b.n	16a84 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   16a6a:	4b0e      	ldr	r3, [pc, #56]	; (16aa4 <start_download+0xac>)
   16a6c:	0019      	movs	r1, r3
   16a6e:	2001      	movs	r0, #1
   16a70:	4b08      	ldr	r3, [pc, #32]	; (16a94 <start_download+0x9c>)
   16a72:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   16a74:	490c      	ldr	r1, [pc, #48]	; (16aa8 <start_download+0xb0>)
   16a76:	480d      	ldr	r0, [pc, #52]	; (16aac <start_download+0xb4>)
   16a78:	2300      	movs	r3, #0
   16a7a:	9300      	str	r3, [sp, #0]
   16a7c:	2300      	movs	r3, #0
   16a7e:	2201      	movs	r2, #1
   16a80:	4c0b      	ldr	r4, [pc, #44]	; (16ab0 <start_download+0xb8>)
   16a82:	47a0      	blx	r4
}
   16a84:	46bd      	mov	sp, r7
   16a86:	b001      	add	sp, #4
   16a88:	bd90      	pop	{r4, r7, pc}
   16a8a:	46c0      	nop			; (mov r8, r8)
   16a8c:	000166d1 	.word	0x000166d1
   16a90:	00037384 	.word	0x00037384
   16a94:	0001e921 	.word	0x0001e921
   16a98:	000373b0 	.word	0x000373b0
   16a9c:	000373dc 	.word	0x000373dc
   16aa0:	00037408 	.word	0x00037408
   16aa4:	00037434 	.word	0x00037434
   16aa8:	00037460 	.word	0x00037460
   16aac:	2000499c 	.word	0x2000499c
   16ab0:	00031bb1 	.word	0x00031bb1

00016ab4 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   16ab4:	b5b0      	push	{r4, r5, r7, lr}
   16ab6:	b086      	sub	sp, #24
   16ab8:	af00      	add	r7, sp, #0
   16aba:	6078      	str	r0, [r7, #4]
   16abc:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   16abe:	687b      	ldr	r3, [r7, #4]
   16ac0:	2b00      	cmp	r3, #0
   16ac2:	d002      	beq.n	16aca <store_file_packet+0x16>
   16ac4:	683b      	ldr	r3, [r7, #0]
   16ac6:	2b00      	cmp	r3, #0
   16ac8:	d105      	bne.n	16ad6 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   16aca:	4b58      	ldr	r3, [pc, #352]	; (16c2c <store_file_packet+0x178>)
   16acc:	0019      	movs	r1, r3
   16ace:	2001      	movs	r0, #1
   16ad0:	4b57      	ldr	r3, [pc, #348]	; (16c30 <store_file_packet+0x17c>)
   16ad2:	4798      	blx	r3
        return;
   16ad4:	e0a6      	b.n	16c24 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   16ad6:	2008      	movs	r0, #8
   16ad8:	4b56      	ldr	r3, [pc, #344]	; (16c34 <store_file_packet+0x180>)
   16ada:	4798      	blx	r3
   16adc:	0003      	movs	r3, r0
   16ade:	001a      	movs	r2, r3
   16ae0:	2301      	movs	r3, #1
   16ae2:	4053      	eors	r3, r2
   16ae4:	b2db      	uxtb	r3, r3
   16ae6:	2b00      	cmp	r3, #0
   16ae8:	d055      	beq.n	16b96 <store_file_packet+0xe2>
        char *cp = NULL;
   16aea:	2300      	movs	r3, #0
   16aec:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16aee:	4b52      	ldr	r3, [pc, #328]	; (16c38 <store_file_packet+0x184>)
   16af0:	2230      	movs	r2, #48	; 0x30
   16af2:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   16af4:	4b50      	ldr	r3, [pc, #320]	; (16c38 <store_file_packet+0x184>)
   16af6:	223a      	movs	r2, #58	; 0x3a
   16af8:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   16afa:	4b50      	ldr	r3, [pc, #320]	; (16c3c <store_file_packet+0x188>)
   16afc:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16afe:	e002      	b.n	16b06 <store_file_packet+0x52>
            cp--;
   16b00:	697b      	ldr	r3, [r7, #20]
   16b02:	3b01      	subs	r3, #1
   16b04:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16b06:	697b      	ldr	r3, [r7, #20]
   16b08:	781b      	ldrb	r3, [r3, #0]
   16b0a:	2b2f      	cmp	r3, #47	; 0x2f
   16b0c:	d1f8      	bne.n	16b00 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   16b0e:	697b      	ldr	r3, [r7, #20]
   16b10:	0018      	movs	r0, r3
   16b12:	4b4b      	ldr	r3, [pc, #300]	; (16c40 <store_file_packet+0x18c>)
   16b14:	4798      	blx	r3
   16b16:	0003      	movs	r3, r0
   16b18:	2b01      	cmp	r3, #1
   16b1a:	d924      	bls.n	16b66 <store_file_packet+0xb2>
            cp++;
   16b1c:	697b      	ldr	r3, [r7, #20]
   16b1e:	3301      	adds	r3, #1
   16b20:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   16b22:	697a      	ldr	r2, [r7, #20]
   16b24:	4b47      	ldr	r3, [pc, #284]	; (16c44 <store_file_packet+0x190>)
   16b26:	0011      	movs	r1, r2
   16b28:	0018      	movs	r0, r3
   16b2a:	4b47      	ldr	r3, [pc, #284]	; (16c48 <store_file_packet+0x194>)
   16b2c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   16b2e:	4942      	ldr	r1, [pc, #264]	; (16c38 <store_file_packet+0x184>)
   16b30:	4b46      	ldr	r3, [pc, #280]	; (16c4c <store_file_packet+0x198>)
   16b32:	2240      	movs	r2, #64	; 0x40
   16b34:	0018      	movs	r0, r3
   16b36:	4b46      	ldr	r3, [pc, #280]	; (16c50 <store_file_packet+0x19c>)
   16b38:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   16b3a:	4a3f      	ldr	r2, [pc, #252]	; (16c38 <store_file_packet+0x184>)
   16b3c:	4b45      	ldr	r3, [pc, #276]	; (16c54 <store_file_packet+0x1a0>)
   16b3e:	0019      	movs	r1, r3
   16b40:	2001      	movs	r0, #1
   16b42:	4b3b      	ldr	r3, [pc, #236]	; (16c30 <store_file_packet+0x17c>)
   16b44:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16b46:	2313      	movs	r3, #19
   16b48:	18fc      	adds	r4, r7, r3
   16b4a:	493b      	ldr	r1, [pc, #236]	; (16c38 <store_file_packet+0x184>)
   16b4c:	4b3f      	ldr	r3, [pc, #252]	; (16c4c <store_file_packet+0x198>)
   16b4e:	220a      	movs	r2, #10
   16b50:	0018      	movs	r0, r3
   16b52:	4b41      	ldr	r3, [pc, #260]	; (16c58 <store_file_packet+0x1a4>)
   16b54:	4798      	blx	r3
   16b56:	0003      	movs	r3, r0
   16b58:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16b5a:	2313      	movs	r3, #19
   16b5c:	18fb      	adds	r3, r7, r3
   16b5e:	781b      	ldrb	r3, [r3, #0]
   16b60:	2b00      	cmp	r3, #0
   16b62:	d012      	beq.n	16b8a <store_file_packet+0xd6>
   16b64:	e008      	b.n	16b78 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   16b66:	4b3d      	ldr	r3, [pc, #244]	; (16c5c <store_file_packet+0x1a8>)
   16b68:	0019      	movs	r1, r3
   16b6a:	2001      	movs	r0, #1
   16b6c:	4b30      	ldr	r3, [pc, #192]	; (16c30 <store_file_packet+0x17c>)
   16b6e:	4798      	blx	r3
            add_state(CANCELED);
   16b70:	2020      	movs	r0, #32
   16b72:	4b3b      	ldr	r3, [pc, #236]	; (16c60 <store_file_packet+0x1ac>)
   16b74:	4798      	blx	r3
            return;
   16b76:	e055      	b.n	16c24 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   16b78:	2313      	movs	r3, #19
   16b7a:	18fb      	adds	r3, r7, r3
   16b7c:	781a      	ldrb	r2, [r3, #0]
   16b7e:	4b39      	ldr	r3, [pc, #228]	; (16c64 <store_file_packet+0x1b0>)
   16b80:	0019      	movs	r1, r3
   16b82:	2001      	movs	r0, #1
   16b84:	4b2a      	ldr	r3, [pc, #168]	; (16c30 <store_file_packet+0x17c>)
   16b86:	4798      	blx	r3
            return;
   16b88:	e04c      	b.n	16c24 <store_file_packet+0x170>
        }

        received_file_size = 0;
   16b8a:	4b37      	ldr	r3, [pc, #220]	; (16c68 <store_file_packet+0x1b4>)
   16b8c:	2200      	movs	r2, #0
   16b8e:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   16b90:	2008      	movs	r0, #8
   16b92:	4b33      	ldr	r3, [pc, #204]	; (16c60 <store_file_packet+0x1ac>)
   16b94:	4798      	blx	r3
    }

    if (data != NULL) {
   16b96:	687b      	ldr	r3, [r7, #4]
   16b98:	2b00      	cmp	r3, #0
   16b9a:	d043      	beq.n	16c24 <store_file_packet+0x170>
        UINT wsize = 0;
   16b9c:	2300      	movs	r3, #0
   16b9e:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   16ba0:	2313      	movs	r3, #19
   16ba2:	18fc      	adds	r4, r7, r3
   16ba4:	230c      	movs	r3, #12
   16ba6:	18fb      	adds	r3, r7, r3
   16ba8:	683a      	ldr	r2, [r7, #0]
   16baa:	6879      	ldr	r1, [r7, #4]
   16bac:	4827      	ldr	r0, [pc, #156]	; (16c4c <store_file_packet+0x198>)
   16bae:	4d2f      	ldr	r5, [pc, #188]	; (16c6c <store_file_packet+0x1b8>)
   16bb0:	47a8      	blx	r5
   16bb2:	0003      	movs	r3, r0
   16bb4:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16bb6:	2313      	movs	r3, #19
   16bb8:	18fb      	adds	r3, r7, r3
   16bba:	781b      	ldrb	r3, [r3, #0]
   16bbc:	2b00      	cmp	r3, #0
   16bbe:	d00c      	beq.n	16bda <store_file_packet+0x126>
            f_close(&file_object);
   16bc0:	4b22      	ldr	r3, [pc, #136]	; (16c4c <store_file_packet+0x198>)
   16bc2:	0018      	movs	r0, r3
   16bc4:	4b2a      	ldr	r3, [pc, #168]	; (16c70 <store_file_packet+0x1bc>)
   16bc6:	4798      	blx	r3
            add_state(CANCELED);
   16bc8:	2020      	movs	r0, #32
   16bca:	4b25      	ldr	r3, [pc, #148]	; (16c60 <store_file_packet+0x1ac>)
   16bcc:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   16bce:	4b29      	ldr	r3, [pc, #164]	; (16c74 <store_file_packet+0x1c0>)
   16bd0:	0019      	movs	r1, r3
   16bd2:	2001      	movs	r0, #1
   16bd4:	4b16      	ldr	r3, [pc, #88]	; (16c30 <store_file_packet+0x17c>)
   16bd6:	4798      	blx	r3
            return;
   16bd8:	e024      	b.n	16c24 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   16bda:	4b23      	ldr	r3, [pc, #140]	; (16c68 <store_file_packet+0x1b4>)
   16bdc:	681a      	ldr	r2, [r3, #0]
   16bde:	68fb      	ldr	r3, [r7, #12]
   16be0:	18d2      	adds	r2, r2, r3
   16be2:	4b21      	ldr	r3, [pc, #132]	; (16c68 <store_file_packet+0x1b4>)
   16be4:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   16be6:	4b20      	ldr	r3, [pc, #128]	; (16c68 <store_file_packet+0x1b4>)
   16be8:	681a      	ldr	r2, [r3, #0]
   16bea:	4b23      	ldr	r3, [pc, #140]	; (16c78 <store_file_packet+0x1c4>)
   16bec:	681b      	ldr	r3, [r3, #0]
   16bee:	4923      	ldr	r1, [pc, #140]	; (16c7c <store_file_packet+0x1c8>)
   16bf0:	2001      	movs	r0, #1
   16bf2:	4c0f      	ldr	r4, [pc, #60]	; (16c30 <store_file_packet+0x17c>)
   16bf4:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   16bf6:	4b1c      	ldr	r3, [pc, #112]	; (16c68 <store_file_packet+0x1b4>)
   16bf8:	681a      	ldr	r2, [r3, #0]
   16bfa:	4b1f      	ldr	r3, [pc, #124]	; (16c78 <store_file_packet+0x1c4>)
   16bfc:	681b      	ldr	r3, [r3, #0]
   16bfe:	429a      	cmp	r2, r3
   16c00:	d310      	bcc.n	16c24 <store_file_packet+0x170>
            f_close(&file_object);
   16c02:	4b12      	ldr	r3, [pc, #72]	; (16c4c <store_file_packet+0x198>)
   16c04:	0018      	movs	r0, r3
   16c06:	4b1a      	ldr	r3, [pc, #104]	; (16c70 <store_file_packet+0x1bc>)
   16c08:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   16c0a:	4b1d      	ldr	r3, [pc, #116]	; (16c80 <store_file_packet+0x1cc>)
   16c0c:	0019      	movs	r1, r3
   16c0e:	2001      	movs	r0, #1
   16c10:	4b07      	ldr	r3, [pc, #28]	; (16c30 <store_file_packet+0x17c>)
   16c12:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   16c14:	2100      	movs	r1, #0
   16c16:	2017      	movs	r0, #23
   16c18:	4b1a      	ldr	r3, [pc, #104]	; (16c84 <store_file_packet+0x1d0>)
   16c1a:	4798      	blx	r3
            add_state(COMPLETED);
   16c1c:	2010      	movs	r0, #16
   16c1e:	4b10      	ldr	r3, [pc, #64]	; (16c60 <store_file_packet+0x1ac>)
   16c20:	4798      	blx	r3
            return;
   16c22:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   16c24:	46bd      	mov	sp, r7
   16c26:	b006      	add	sp, #24
   16c28:	bdb0      	pop	{r4, r5, r7, pc}
   16c2a:	46c0      	nop			; (mov r8, r8)
   16c2c:	00037480 	.word	0x00037480
   16c30:	0001e921 	.word	0x0001e921
   16c34:	000166d1 	.word	0x000166d1
   16c38:	200000b4 	.word	0x200000b4
   16c3c:	0003747f 	.word	0x0003747f
   16c40:	000359c7 	.word	0x000359c7
   16c44:	200000b6 	.word	0x200000b6
   16c48:	0003597b 	.word	0x0003597b
   16c4c:	2000086c 	.word	0x2000086c
   16c50:	00016755 	.word	0x00016755
   16c54:	000374e4 	.word	0x000374e4
   16c58:	0002e55d 	.word	0x0002e55d
   16c5c:	000374a4 	.word	0x000374a4
   16c60:	000166a9 	.word	0x000166a9
   16c64:	0003750c 	.word	0x0003750c
   16c68:	20000894 	.word	0x20000894
   16c6c:	0002ea8d 	.word	0x0002ea8d
   16c70:	0002ef5d 	.word	0x0002ef5d
   16c74:	00037540 	.word	0x00037540
   16c78:	20000890 	.word	0x20000890
   16c7c:	0003757c 	.word	0x0003757c
   16c80:	000375b0 	.word	0x000375b0
   16c84:	0001660d 	.word	0x0001660d

00016c88 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   16c88:	b590      	push	{r4, r7, lr}
   16c8a:	b085      	sub	sp, #20
   16c8c:	af00      	add	r7, sp, #0
   16c8e:	60f8      	str	r0, [r7, #12]
   16c90:	60b9      	str	r1, [r7, #8]
   16c92:	607a      	str	r2, [r7, #4]
    switch (type) {
   16c94:	68bb      	ldr	r3, [r7, #8]
   16c96:	2b04      	cmp	r3, #4
   16c98:	d900      	bls.n	16c9c <http_client_callback+0x14>
   16c9a:	e077      	b.n	16d8c <http_client_callback+0x104>
   16c9c:	68bb      	ldr	r3, [r7, #8]
   16c9e:	009a      	lsls	r2, r3, #2
   16ca0:	4b3c      	ldr	r3, [pc, #240]	; (16d94 <http_client_callback+0x10c>)
   16ca2:	18d3      	adds	r3, r2, r3
   16ca4:	681b      	ldr	r3, [r3, #0]
   16ca6:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   16ca8:	4b3b      	ldr	r3, [pc, #236]	; (16d98 <http_client_callback+0x110>)
   16caa:	0019      	movs	r1, r3
   16cac:	2001      	movs	r0, #1
   16cae:	4b3b      	ldr	r3, [pc, #236]	; (16d9c <http_client_callback+0x114>)
   16cb0:	4798      	blx	r3
            break;
   16cb2:	e06b      	b.n	16d8c <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   16cb4:	4b3a      	ldr	r3, [pc, #232]	; (16da0 <http_client_callback+0x118>)
   16cb6:	0019      	movs	r1, r3
   16cb8:	2001      	movs	r0, #1
   16cba:	4b38      	ldr	r3, [pc, #224]	; (16d9c <http_client_callback+0x114>)
   16cbc:	4798      	blx	r3
            add_state(GET_REQUESTED);
   16cbe:	2004      	movs	r0, #4
   16cc0:	4b38      	ldr	r3, [pc, #224]	; (16da4 <http_client_callback+0x11c>)
   16cc2:	4798      	blx	r3
            break;
   16cc4:	e062      	b.n	16d8c <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   16cc6:	687b      	ldr	r3, [r7, #4]
   16cc8:	881b      	ldrh	r3, [r3, #0]
   16cca:	001a      	movs	r2, r3
   16ccc:	687b      	ldr	r3, [r7, #4]
   16cce:	685b      	ldr	r3, [r3, #4]
   16cd0:	4935      	ldr	r1, [pc, #212]	; (16da8 <http_client_callback+0x120>)
   16cd2:	2001      	movs	r0, #1
   16cd4:	4c31      	ldr	r4, [pc, #196]	; (16d9c <http_client_callback+0x114>)
   16cd6:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   16cd8:	687b      	ldr	r3, [r7, #4]
   16cda:	881b      	ldrh	r3, [r3, #0]
   16cdc:	2bc8      	cmp	r3, #200	; 0xc8
   16cde:	d10d      	bne.n	16cfc <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   16ce0:	687b      	ldr	r3, [r7, #4]
   16ce2:	685a      	ldr	r2, [r3, #4]
   16ce4:	4b31      	ldr	r3, [pc, #196]	; (16dac <http_client_callback+0x124>)
   16ce6:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   16ce8:	4b31      	ldr	r3, [pc, #196]	; (16db0 <http_client_callback+0x128>)
   16cea:	2200      	movs	r2, #0
   16cec:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   16cee:	687b      	ldr	r3, [r7, #4]
   16cf0:	685a      	ldr	r2, [r3, #4]
   16cf2:	2380      	movs	r3, #128	; 0x80
   16cf4:	009b      	lsls	r3, r3, #2
   16cf6:	429a      	cmp	r2, r3
   16cf8:	d843      	bhi.n	16d82 <http_client_callback+0xfa>
   16cfa:	e003      	b.n	16d04 <http_client_callback+0x7c>
                add_state(CANCELED);
   16cfc:	2020      	movs	r0, #32
   16cfe:	4b29      	ldr	r3, [pc, #164]	; (16da4 <http_client_callback+0x11c>)
   16d00:	4798      	blx	r3
                return;
   16d02:	e043      	b.n	16d8c <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   16d04:	687b      	ldr	r3, [r7, #4]
   16d06:	689a      	ldr	r2, [r3, #8]
   16d08:	687b      	ldr	r3, [r7, #4]
   16d0a:	685b      	ldr	r3, [r3, #4]
   16d0c:	0019      	movs	r1, r3
   16d0e:	0010      	movs	r0, r2
   16d10:	4b28      	ldr	r3, [pc, #160]	; (16db4 <http_client_callback+0x12c>)
   16d12:	4798      	blx	r3
                add_state(COMPLETED);
   16d14:	2010      	movs	r0, #16
   16d16:	4b23      	ldr	r3, [pc, #140]	; (16da4 <http_client_callback+0x11c>)
   16d18:	4798      	blx	r3
            }
            break;
   16d1a:	e032      	b.n	16d82 <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   16d1c:	687b      	ldr	r3, [r7, #4]
   16d1e:	685a      	ldr	r2, [r3, #4]
   16d20:	687b      	ldr	r3, [r7, #4]
   16d22:	681b      	ldr	r3, [r3, #0]
   16d24:	0019      	movs	r1, r3
   16d26:	0010      	movs	r0, r2
   16d28:	4b22      	ldr	r3, [pc, #136]	; (16db4 <http_client_callback+0x12c>)
   16d2a:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   16d2c:	687b      	ldr	r3, [r7, #4]
   16d2e:	7a1b      	ldrb	r3, [r3, #8]
   16d30:	2b00      	cmp	r3, #0
   16d32:	d028      	beq.n	16d86 <http_client_callback+0xfe>
                add_state(COMPLETED);
   16d34:	2010      	movs	r0, #16
   16d36:	4b1b      	ldr	r3, [pc, #108]	; (16da4 <http_client_callback+0x11c>)
   16d38:	4798      	blx	r3
            }

            break;
   16d3a:	e024      	b.n	16d86 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   16d3c:	687b      	ldr	r3, [r7, #4]
   16d3e:	681a      	ldr	r2, [r3, #0]
   16d40:	4b1d      	ldr	r3, [pc, #116]	; (16db8 <http_client_callback+0x130>)
   16d42:	0019      	movs	r1, r3
   16d44:	2001      	movs	r0, #1
   16d46:	4b15      	ldr	r3, [pc, #84]	; (16d9c <http_client_callback+0x114>)
   16d48:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   16d4a:	687b      	ldr	r3, [r7, #4]
   16d4c:	681b      	ldr	r3, [r3, #0]
   16d4e:	330b      	adds	r3, #11
   16d50:	d11b      	bne.n	16d8a <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   16d52:	2008      	movs	r0, #8
   16d54:	4b19      	ldr	r3, [pc, #100]	; (16dbc <http_client_callback+0x134>)
   16d56:	4798      	blx	r3
   16d58:	1e03      	subs	r3, r0, #0
   16d5a:	d006      	beq.n	16d6a <http_client_callback+0xe2>
                    f_close(&file_object);
   16d5c:	4b18      	ldr	r3, [pc, #96]	; (16dc0 <http_client_callback+0x138>)
   16d5e:	0018      	movs	r0, r3
   16d60:	4b18      	ldr	r3, [pc, #96]	; (16dc4 <http_client_callback+0x13c>)
   16d62:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   16d64:	2008      	movs	r0, #8
   16d66:	4b18      	ldr	r3, [pc, #96]	; (16dc8 <http_client_callback+0x140>)
   16d68:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   16d6a:	2004      	movs	r0, #4
   16d6c:	4b13      	ldr	r3, [pc, #76]	; (16dbc <http_client_callback+0x134>)
   16d6e:	4798      	blx	r3
   16d70:	1e03      	subs	r3, r0, #0
   16d72:	d002      	beq.n	16d7a <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   16d74:	2004      	movs	r0, #4
   16d76:	4b14      	ldr	r3, [pc, #80]	; (16dc8 <http_client_callback+0x140>)
   16d78:	4798      	blx	r3
                }

                start_download();
   16d7a:	4b14      	ldr	r3, [pc, #80]	; (16dcc <http_client_callback+0x144>)
   16d7c:	4798      	blx	r3
            }

            break;
   16d7e:	46c0      	nop			; (mov r8, r8)
   16d80:	e003      	b.n	16d8a <http_client_callback+0x102>
            break;
   16d82:	46c0      	nop			; (mov r8, r8)
   16d84:	e002      	b.n	16d8c <http_client_callback+0x104>
            break;
   16d86:	46c0      	nop			; (mov r8, r8)
   16d88:	e000      	b.n	16d8c <http_client_callback+0x104>
            break;
   16d8a:	46c0      	nop			; (mov r8, r8)
    }
}
   16d8c:	46bd      	mov	sp, r7
   16d8e:	b005      	add	sp, #20
   16d90:	bd90      	pop	{r4, r7, pc}
   16d92:	46c0      	nop			; (mov r8, r8)
   16d94:	00037ce4 	.word	0x00037ce4
   16d98:	000375e4 	.word	0x000375e4
   16d9c:	0001e921 	.word	0x0001e921
   16da0:	0003761c 	.word	0x0003761c
   16da4:	000166a9 	.word	0x000166a9
   16da8:	00037648 	.word	0x00037648
   16dac:	20000890 	.word	0x20000890
   16db0:	20000894 	.word	0x20000894
   16db4:	00016ab5 	.word	0x00016ab5
   16db8:	00037684 	.word	0x00037684
   16dbc:	000166d1 	.word	0x000166d1
   16dc0:	2000086c 	.word	0x2000086c
   16dc4:	0002ef5d 	.word	0x0002ef5d
   16dc8:	00016675 	.word	0x00016675
   16dcc:	000169f9 	.word	0x000169f9

00016dd0 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   16dd0:	b580      	push	{r7, lr}
   16dd2:	b082      	sub	sp, #8
   16dd4:	af00      	add	r7, sp, #0
   16dd6:	603a      	str	r2, [r7, #0]
   16dd8:	1dfb      	adds	r3, r7, #7
   16dda:	1c02      	adds	r2, r0, #0
   16ddc:	701a      	strb	r2, [r3, #0]
   16dde:	1dbb      	adds	r3, r7, #6
   16de0:	1c0a      	adds	r2, r1, #0
   16de2:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   16de4:	683a      	ldr	r2, [r7, #0]
   16de6:	1dbb      	adds	r3, r7, #6
   16de8:	7819      	ldrb	r1, [r3, #0]
   16dea:	1dfb      	adds	r3, r7, #7
   16dec:	781b      	ldrb	r3, [r3, #0]
   16dee:	b25b      	sxtb	r3, r3
   16df0:	0018      	movs	r0, r3
   16df2:	4b03      	ldr	r3, [pc, #12]	; (16e00 <socket_cb+0x30>)
   16df4:	4798      	blx	r3
}
   16df6:	46c0      	nop			; (mov r8, r8)
   16df8:	46bd      	mov	sp, r7
   16dfa:	b002      	add	sp, #8
   16dfc:	bd80      	pop	{r7, pc}
   16dfe:	46c0      	nop			; (mov r8, r8)
   16e00:	000318c1 	.word	0x000318c1

00016e04 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   16e04:	b5b0      	push	{r4, r5, r7, lr}
   16e06:	b086      	sub	sp, #24
   16e08:	af04      	add	r7, sp, #16
   16e0a:	6078      	str	r0, [r7, #4]
   16e0c:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   16e0e:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   16e10:	22ff      	movs	r2, #255	; 0xff
   16e12:	4013      	ands	r3, r2
   16e14:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   16e16:	683b      	ldr	r3, [r7, #0]
   16e18:	0a1b      	lsrs	r3, r3, #8
   16e1a:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   16e1c:	23ff      	movs	r3, #255	; 0xff
   16e1e:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   16e20:	683a      	ldr	r2, [r7, #0]
   16e22:	0c12      	lsrs	r2, r2, #16
   16e24:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   16e26:	22ff      	movs	r2, #255	; 0xff
   16e28:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   16e2a:	6839      	ldr	r1, [r7, #0]
   16e2c:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   16e2e:	000d      	movs	r5, r1
   16e30:	6878      	ldr	r0, [r7, #4]
   16e32:	4909      	ldr	r1, [pc, #36]	; (16e58 <resolve_cb+0x54>)
   16e34:	9502      	str	r5, [sp, #8]
   16e36:	9201      	str	r2, [sp, #4]
   16e38:	9300      	str	r3, [sp, #0]
   16e3a:	0023      	movs	r3, r4
   16e3c:	0002      	movs	r2, r0
   16e3e:	2001      	movs	r0, #1
   16e40:	4c06      	ldr	r4, [pc, #24]	; (16e5c <resolve_cb+0x58>)
   16e42:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   16e44:	683a      	ldr	r2, [r7, #0]
   16e46:	687b      	ldr	r3, [r7, #4]
   16e48:	0011      	movs	r1, r2
   16e4a:	0018      	movs	r0, r3
   16e4c:	4b04      	ldr	r3, [pc, #16]	; (16e60 <resolve_cb+0x5c>)
   16e4e:	4798      	blx	r3
}
   16e50:	46c0      	nop			; (mov r8, r8)
   16e52:	46bd      	mov	sp, r7
   16e54:	b002      	add	sp, #8
   16e56:	bdb0      	pop	{r4, r5, r7, pc}
   16e58:	000376b4 	.word	0x000376b4
   16e5c:	0001e921 	.word	0x0001e921
   16e60:	00031a25 	.word	0x00031a25

00016e64 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   16e64:	b590      	push	{r4, r7, lr}
   16e66:	b087      	sub	sp, #28
   16e68:	af02      	add	r7, sp, #8
   16e6a:	0002      	movs	r2, r0
   16e6c:	6039      	str	r1, [r7, #0]
   16e6e:	1dfb      	adds	r3, r7, #7
   16e70:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   16e72:	1dfb      	adds	r3, r7, #7
   16e74:	781b      	ldrb	r3, [r3, #0]
   16e76:	2b2c      	cmp	r3, #44	; 0x2c
   16e78:	d002      	beq.n	16e80 <wifi_cb+0x1c>
   16e7a:	2b32      	cmp	r3, #50	; 0x32
   16e7c:	d03d      	beq.n	16efa <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   16e7e:	e06f      	b.n	16f60 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   16e80:	683b      	ldr	r3, [r7, #0]
   16e82:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16e84:	68fb      	ldr	r3, [r7, #12]
   16e86:	781b      	ldrb	r3, [r3, #0]
   16e88:	2b01      	cmp	r3, #1
   16e8a:	d107      	bne.n	16e9c <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16e8c:	4b36      	ldr	r3, [pc, #216]	; (16f68 <wifi_cb+0x104>)
   16e8e:	0019      	movs	r1, r3
   16e90:	2001      	movs	r0, #1
   16e92:	4b36      	ldr	r3, [pc, #216]	; (16f6c <wifi_cb+0x108>)
   16e94:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   16e96:	4b36      	ldr	r3, [pc, #216]	; (16f70 <wifi_cb+0x10c>)
   16e98:	4798      	blx	r3
            break;
   16e9a:	e05e      	b.n	16f5a <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   16e9c:	68fb      	ldr	r3, [r7, #12]
   16e9e:	781b      	ldrb	r3, [r3, #0]
   16ea0:	2b00      	cmp	r3, #0
   16ea2:	d15a      	bne.n	16f5a <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   16ea4:	4b33      	ldr	r3, [pc, #204]	; (16f74 <wifi_cb+0x110>)
   16ea6:	0019      	movs	r1, r3
   16ea8:	2001      	movs	r0, #1
   16eaa:	4b30      	ldr	r3, [pc, #192]	; (16f6c <wifi_cb+0x108>)
   16eac:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   16eae:	2002      	movs	r0, #2
   16eb0:	4b31      	ldr	r3, [pc, #196]	; (16f78 <wifi_cb+0x114>)
   16eb2:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   16eb4:	2008      	movs	r0, #8
   16eb6:	4b31      	ldr	r3, [pc, #196]	; (16f7c <wifi_cb+0x118>)
   16eb8:	4798      	blx	r3
   16eba:	1e03      	subs	r3, r0, #0
   16ebc:	d006      	beq.n	16ecc <wifi_cb+0x68>
                    f_close(&file_object);
   16ebe:	4b30      	ldr	r3, [pc, #192]	; (16f80 <wifi_cb+0x11c>)
   16ec0:	0018      	movs	r0, r3
   16ec2:	4b30      	ldr	r3, [pc, #192]	; (16f84 <wifi_cb+0x120>)
   16ec4:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   16ec6:	2008      	movs	r0, #8
   16ec8:	4b2b      	ldr	r3, [pc, #172]	; (16f78 <wifi_cb+0x114>)
   16eca:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   16ecc:	2004      	movs	r0, #4
   16ece:	4b2b      	ldr	r3, [pc, #172]	; (16f7c <wifi_cb+0x118>)
   16ed0:	4798      	blx	r3
   16ed2:	1e03      	subs	r3, r0, #0
   16ed4:	d002      	beq.n	16edc <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   16ed6:	2004      	movs	r0, #4
   16ed8:	4b27      	ldr	r3, [pc, #156]	; (16f78 <wifi_cb+0x114>)
   16eda:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   16edc:	4b2a      	ldr	r3, [pc, #168]	; (16f88 <wifi_cb+0x124>)
   16ede:	2101      	movs	r1, #1
   16ee0:	0018      	movs	r0, r3
   16ee2:	4b2a      	ldr	r3, [pc, #168]	; (16f8c <wifi_cb+0x128>)
   16ee4:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16ee6:	4a2a      	ldr	r2, [pc, #168]	; (16f90 <wifi_cb+0x12c>)
   16ee8:	482a      	ldr	r0, [pc, #168]	; (16f94 <wifi_cb+0x130>)
   16eea:	23ff      	movs	r3, #255	; 0xff
   16eec:	9300      	str	r3, [sp, #0]
   16eee:	0013      	movs	r3, r2
   16ef0:	2202      	movs	r2, #2
   16ef2:	2102      	movs	r1, #2
   16ef4:	4c28      	ldr	r4, [pc, #160]	; (16f98 <wifi_cb+0x134>)
   16ef6:	47a0      	blx	r4
            break;
   16ef8:	e02f      	b.n	16f5a <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   16efa:	683b      	ldr	r3, [r7, #0]
   16efc:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16efe:	68bb      	ldr	r3, [r7, #8]
   16f00:	781b      	ldrb	r3, [r3, #0]
   16f02:	0018      	movs	r0, r3
   16f04:	68bb      	ldr	r3, [r7, #8]
   16f06:	3301      	adds	r3, #1
   16f08:	781b      	ldrb	r3, [r3, #0]
   16f0a:	001c      	movs	r4, r3
   16f0c:	68bb      	ldr	r3, [r7, #8]
   16f0e:	3302      	adds	r3, #2
   16f10:	781b      	ldrb	r3, [r3, #0]
   16f12:	001a      	movs	r2, r3
   16f14:	68bb      	ldr	r3, [r7, #8]
   16f16:	3303      	adds	r3, #3
   16f18:	781b      	ldrb	r3, [r3, #0]
   16f1a:	4920      	ldr	r1, [pc, #128]	; (16f9c <wifi_cb+0x138>)
   16f1c:	9301      	str	r3, [sp, #4]
   16f1e:	9200      	str	r2, [sp, #0]
   16f20:	0023      	movs	r3, r4
   16f22:	0002      	movs	r2, r0
   16f24:	2001      	movs	r0, #1
   16f26:	4c11      	ldr	r4, [pc, #68]	; (16f6c <wifi_cb+0x108>)
   16f28:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   16f2a:	2002      	movs	r0, #2
   16f2c:	4b1c      	ldr	r3, [pc, #112]	; (16fa0 <wifi_cb+0x13c>)
   16f2e:	4798      	blx	r3
            if (do_download_flag == 1) {
   16f30:	4b1c      	ldr	r3, [pc, #112]	; (16fa4 <wifi_cb+0x140>)
   16f32:	781b      	ldrb	r3, [r3, #0]
   16f34:	2b01      	cmp	r3, #1
   16f36:	d102      	bne.n	16f3e <wifi_cb+0xda>
                start_download();
   16f38:	4b1b      	ldr	r3, [pc, #108]	; (16fa8 <wifi_cb+0x144>)
   16f3a:	4798      	blx	r3
        } break;
   16f3c:	e00f      	b.n	16f5e <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16f3e:	4a1b      	ldr	r2, [pc, #108]	; (16fac <wifi_cb+0x148>)
   16f40:	4b11      	ldr	r3, [pc, #68]	; (16f88 <wifi_cb+0x124>)
   16f42:	0011      	movs	r1, r2
   16f44:	0018      	movs	r0, r3
   16f46:	4b1a      	ldr	r3, [pc, #104]	; (16fb0 <wifi_cb+0x14c>)
   16f48:	4798      	blx	r3
   16f4a:	1e03      	subs	r3, r0, #0
   16f4c:	d007      	beq.n	16f5e <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16f4e:	4b19      	ldr	r3, [pc, #100]	; (16fb4 <wifi_cb+0x150>)
   16f50:	0019      	movs	r1, r3
   16f52:	2001      	movs	r0, #1
   16f54:	4b05      	ldr	r3, [pc, #20]	; (16f6c <wifi_cb+0x108>)
   16f56:	4798      	blx	r3
        } break;
   16f58:	e001      	b.n	16f5e <wifi_cb+0xfa>
            break;
   16f5a:	46c0      	nop			; (mov r8, r8)
   16f5c:	e000      	b.n	16f60 <wifi_cb+0xfc>
        } break;
   16f5e:	46c0      	nop			; (mov r8, r8)
    }
}
   16f60:	46c0      	nop			; (mov r8, r8)
   16f62:	46bd      	mov	sp, r7
   16f64:	b005      	add	sp, #20
   16f66:	bd90      	pop	{r4, r7, pc}
   16f68:	000376e4 	.word	0x000376e4
   16f6c:	0001e921 	.word	0x0001e921
   16f70:	00022f65 	.word	0x00022f65
   16f74:	00037704 	.word	0x00037704
   16f78:	00016675 	.word	0x00016675
   16f7c:	000166d1 	.word	0x000166d1
   16f80:	2000086c 	.word	0x2000086c
   16f84:	0002ef5d 	.word	0x0002ef5d
   16f88:	20000898 	.word	0x20000898
   16f8c:	0003056d 	.word	0x0003056d
   16f90:	00037728 	.word	0x00037728
   16f94:	00037734 	.word	0x00037734
   16f98:	00022a91 	.word	0x00022a91
   16f9c:	00037738 	.word	0x00037738
   16fa0:	000166a9 	.word	0x000166a9
   16fa4:	20000638 	.word	0x20000638
   16fa8:	000169f9 	.word	0x000169f9
   16fac:	00037368 	.word	0x00037368
   16fb0:	00030439 	.word	0x00030439
   16fb4:	00037760 	.word	0x00037760

00016fb8 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   16fb8:	b590      	push	{r4, r7, lr}
   16fba:	b083      	sub	sp, #12
   16fbc:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   16fbe:	4b29      	ldr	r3, [pc, #164]	; (17064 <init_storage+0xac>)
   16fc0:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   16fc2:	4b29      	ldr	r3, [pc, #164]	; (17068 <init_storage+0xb0>)
   16fc4:	0019      	movs	r1, r3
   16fc6:	2001      	movs	r0, #1
   16fc8:	4b28      	ldr	r3, [pc, #160]	; (1706c <init_storage+0xb4>)
   16fca:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   16fcc:	1dfc      	adds	r4, r7, #7
   16fce:	2000      	movs	r0, #0
   16fd0:	4b27      	ldr	r3, [pc, #156]	; (17070 <init_storage+0xb8>)
   16fd2:	4798      	blx	r3
   16fd4:	0003      	movs	r3, r0
   16fd6:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   16fd8:	1dfb      	adds	r3, r7, #7
   16fda:	781b      	ldrb	r3, [r3, #0]
   16fdc:	2b01      	cmp	r3, #1
   16fde:	d110      	bne.n	17002 <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   16fe0:	4b24      	ldr	r3, [pc, #144]	; (17074 <init_storage+0xbc>)
   16fe2:	0019      	movs	r1, r3
   16fe4:	2001      	movs	r0, #1
   16fe6:	4b21      	ldr	r3, [pc, #132]	; (1706c <init_storage+0xb4>)
   16fe8:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   16fea:	4b23      	ldr	r3, [pc, #140]	; (17078 <init_storage+0xc0>)
   16fec:	0019      	movs	r1, r3
   16fee:	2001      	movs	r0, #1
   16ff0:	4b1e      	ldr	r3, [pc, #120]	; (1706c <init_storage+0xb4>)
   16ff2:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   16ff4:	46c0      	nop			; (mov r8, r8)
   16ff6:	2000      	movs	r0, #0
   16ff8:	4b20      	ldr	r3, [pc, #128]	; (1707c <init_storage+0xc4>)
   16ffa:	4798      	blx	r3
   16ffc:	0003      	movs	r3, r0
   16ffe:	2b02      	cmp	r3, #2
   17000:	d1f9      	bne.n	16ff6 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   17002:	1dfb      	adds	r3, r7, #7
   17004:	781b      	ldrb	r3, [r3, #0]
   17006:	2b00      	cmp	r3, #0
   17008:	d1e0      	bne.n	16fcc <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   1700a:	4b1d      	ldr	r3, [pc, #116]	; (17080 <init_storage+0xc8>)
   1700c:	0019      	movs	r1, r3
   1700e:	2001      	movs	r0, #1
   17010:	4b16      	ldr	r3, [pc, #88]	; (1706c <init_storage+0xb4>)
   17012:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   17014:	238c      	movs	r3, #140	; 0x8c
   17016:	009a      	lsls	r2, r3, #2
   17018:	4b1a      	ldr	r3, [pc, #104]	; (17084 <init_storage+0xcc>)
   1701a:	2100      	movs	r1, #0
   1701c:	0018      	movs	r0, r3
   1701e:	4b1a      	ldr	r3, [pc, #104]	; (17088 <init_storage+0xd0>)
   17020:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   17022:	1dbc      	adds	r4, r7, #6
   17024:	4b17      	ldr	r3, [pc, #92]	; (17084 <init_storage+0xcc>)
   17026:	0019      	movs	r1, r3
   17028:	2000      	movs	r0, #0
   1702a:	4b18      	ldr	r3, [pc, #96]	; (1708c <init_storage+0xd4>)
   1702c:	4798      	blx	r3
   1702e:	0003      	movs	r3, r0
   17030:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   17032:	1dbb      	adds	r3, r7, #6
   17034:	781b      	ldrb	r3, [r3, #0]
   17036:	2b0b      	cmp	r3, #11
   17038:	d107      	bne.n	1704a <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   1703a:	1dbb      	adds	r3, r7, #6
   1703c:	781a      	ldrb	r2, [r3, #0]
   1703e:	4b14      	ldr	r3, [pc, #80]	; (17090 <init_storage+0xd8>)
   17040:	0019      	movs	r1, r3
   17042:	2001      	movs	r0, #1
   17044:	4b09      	ldr	r3, [pc, #36]	; (1706c <init_storage+0xb4>)
   17046:	4798      	blx	r3
            return;
   17048:	e008      	b.n	1705c <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   1704a:	4b12      	ldr	r3, [pc, #72]	; (17094 <init_storage+0xdc>)
   1704c:	0019      	movs	r1, r3
   1704e:	2001      	movs	r0, #1
   17050:	4b06      	ldr	r3, [pc, #24]	; (1706c <init_storage+0xb4>)
   17052:	4798      	blx	r3
        add_state(STORAGE_READY);
   17054:	2001      	movs	r0, #1
   17056:	4b10      	ldr	r3, [pc, #64]	; (17098 <init_storage+0xe0>)
   17058:	4798      	blx	r3
        return;
   1705a:	46c0      	nop			; (mov r8, r8)
    }
}
   1705c:	46bd      	mov	sp, r7
   1705e:	b003      	add	sp, #12
   17060:	bd90      	pop	{r4, r7, pc}
   17062:	46c0      	nop			; (mov r8, r8)
   17064:	0001f739 	.word	0x0001f739
   17068:	00037784 	.word	0x00037784
   1706c:	0001e921 	.word	0x0001e921
   17070:	0001fc15 	.word	0x0001fc15
   17074:	000377bc 	.word	0x000377bc
   17078:	000377e4 	.word	0x000377e4
   1707c:	0001f789 	.word	0x0001f789
   17080:	00037818 	.word	0x00037818
   17084:	2000063c 	.word	0x2000063c
   17088:	0003560f 	.word	0x0003560f
   1708c:	0002e505 	.word	0x0002e505
   17090:	0003783c 	.word	0x0003783c
   17094:	0003786c 	.word	0x0003786c
   17098:	000166a9 	.word	0x000166a9

0001709c <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   1709c:	b580      	push	{r7, lr}
   1709e:	b082      	sub	sp, #8
   170a0:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   170a2:	1d3b      	adds	r3, r7, #4
   170a4:	0018      	movs	r0, r3
   170a6:	4b08      	ldr	r3, [pc, #32]	; (170c8 <configure_timer+0x2c>)
   170a8:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   170aa:	1d3a      	adds	r2, r7, #4
   170ac:	4b07      	ldr	r3, [pc, #28]	; (170cc <configure_timer+0x30>)
   170ae:	0011      	movs	r1, r2
   170b0:	0018      	movs	r0, r3
   170b2:	4b07      	ldr	r3, [pc, #28]	; (170d0 <configure_timer+0x34>)
   170b4:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   170b6:	4b05      	ldr	r3, [pc, #20]	; (170cc <configure_timer+0x30>)
   170b8:	0018      	movs	r0, r3
   170ba:	4b06      	ldr	r3, [pc, #24]	; (170d4 <configure_timer+0x38>)
   170bc:	4798      	blx	r3
}
   170be:	46c0      	nop			; (mov r8, r8)
   170c0:	46bd      	mov	sp, r7
   170c2:	b002      	add	sp, #8
   170c4:	bd80      	pop	{r7, pc}
   170c6:	46c0      	nop			; (mov r8, r8)
   170c8:	00033055 	.word	0x00033055
   170cc:	20004944 	.word	0x20004944
   170d0:	00033079 	.word	0x00033079
   170d4:	00033165 	.word	0x00033165

000170d8 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   170d8:	b580      	push	{r7, lr}
   170da:	b088      	sub	sp, #32
   170dc:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   170de:	003b      	movs	r3, r7
   170e0:	0018      	movs	r0, r3
   170e2:	4b12      	ldr	r3, [pc, #72]	; (1712c <configure_http_client+0x54>)
   170e4:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   170e6:	003b      	movs	r3, r7
   170e8:	2280      	movs	r2, #128	; 0x80
   170ea:	0092      	lsls	r2, r2, #2
   170ec:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   170ee:	003b      	movs	r3, r7
   170f0:	4a0f      	ldr	r2, [pc, #60]	; (17130 <configure_http_client+0x58>)
   170f2:	605a      	str	r2, [r3, #4]
    //httpc_conf.port = 443;
    //httpc_conf.tls = 1;

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   170f4:	003a      	movs	r2, r7
   170f6:	4b0f      	ldr	r3, [pc, #60]	; (17134 <configure_http_client+0x5c>)
   170f8:	0011      	movs	r1, r2
   170fa:	0018      	movs	r0, r3
   170fc:	4b0e      	ldr	r3, [pc, #56]	; (17138 <configure_http_client+0x60>)
   170fe:	4798      	blx	r3
   17100:	0003      	movs	r3, r0
   17102:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   17104:	69fb      	ldr	r3, [r7, #28]
   17106:	2b00      	cmp	r3, #0
   17108:	da06      	bge.n	17118 <configure_http_client+0x40>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   1710a:	69fa      	ldr	r2, [r7, #28]
   1710c:	4b0b      	ldr	r3, [pc, #44]	; (1713c <configure_http_client+0x64>)
   1710e:	0019      	movs	r1, r3
   17110:	2001      	movs	r0, #1
   17112:	4b0b      	ldr	r3, [pc, #44]	; (17140 <configure_http_client+0x68>)
   17114:	4798      	blx	r3
        while (1) {
   17116:	e7fe      	b.n	17116 <configure_http_client+0x3e>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   17118:	4a0a      	ldr	r2, [pc, #40]	; (17144 <configure_http_client+0x6c>)
   1711a:	4b06      	ldr	r3, [pc, #24]	; (17134 <configure_http_client+0x5c>)
   1711c:	0011      	movs	r1, r2
   1711e:	0018      	movs	r0, r3
   17120:	4b09      	ldr	r3, [pc, #36]	; (17148 <configure_http_client+0x70>)
   17122:	4798      	blx	r3
}
   17124:	46c0      	nop			; (mov r8, r8)
   17126:	46bd      	mov	sp, r7
   17128:	b008      	add	sp, #32
   1712a:	bd80      	pop	{r7, pc}
   1712c:	000316e9 	.word	0x000316e9
   17130:	20004944 	.word	0x20004944
   17134:	2000499c 	.word	0x2000499c
   17138:	00031735 	.word	0x00031735
   1713c:	00037890 	.word	0x00037890
   17140:	0001e921 	.word	0x0001e921
   17144:	00016c89 	.word	0x00016c89
   17148:	00031821 	.word	0x00031821

0001714c <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   1714c:	b580      	push	{r7, lr}
   1714e:	b082      	sub	sp, #8
   17150:	af00      	add	r7, sp, #0
   17152:	603a      	str	r2, [r7, #0]
   17154:	1dfb      	adds	r3, r7, #7
   17156:	1c02      	adds	r2, r0, #0
   17158:	701a      	strb	r2, [r3, #0]
   1715a:	1dbb      	adds	r3, r7, #6
   1715c:	1c0a      	adds	r2, r1, #0
   1715e:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   17160:	683a      	ldr	r2, [r7, #0]
   17162:	1dbb      	adds	r3, r7, #6
   17164:	7819      	ldrb	r1, [r3, #0]
   17166:	1dfb      	adds	r3, r7, #7
   17168:	781b      	ldrb	r3, [r3, #0]
   1716a:	b25b      	sxtb	r3, r3
   1716c:	0018      	movs	r0, r3
   1716e:	4b03      	ldr	r3, [pc, #12]	; (1717c <socket_event_handler+0x30>)
   17170:	4798      	blx	r3
}
   17172:	46c0      	nop			; (mov r8, r8)
   17174:	46bd      	mov	sp, r7
   17176:	b002      	add	sp, #8
   17178:	bd80      	pop	{r7, pc}
   1717a:	46c0      	nop			; (mov r8, r8)
   1717c:	000303e1 	.word	0x000303e1

00017180 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   17180:	b580      	push	{r7, lr}
   17182:	b082      	sub	sp, #8
   17184:	af00      	add	r7, sp, #0
   17186:	6078      	str	r0, [r7, #4]
   17188:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   1718a:	683a      	ldr	r2, [r7, #0]
   1718c:	687b      	ldr	r3, [r7, #4]
   1718e:	0011      	movs	r1, r2
   17190:	0018      	movs	r0, r3
   17192:	4b03      	ldr	r3, [pc, #12]	; (171a0 <socket_resolve_handler+0x20>)
   17194:	4798      	blx	r3
}
   17196:	46c0      	nop			; (mov r8, r8)
   17198:	46bd      	mov	sp, r7
   1719a:	b002      	add	sp, #8
   1719c:	bd80      	pop	{r7, pc}
   1719e:	46c0      	nop			; (mov r8, r8)
   171a0:	00030415 	.word	0x00030415

000171a4 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   171a4:	b590      	push	{r4, r7, lr}
   171a6:	b089      	sub	sp, #36	; 0x24
   171a8:	af02      	add	r7, sp, #8
   171aa:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   171ac:	2310      	movs	r3, #16
   171ae:	18fb      	adds	r3, r7, r3
   171b0:	2200      	movs	r2, #0
   171b2:	701a      	strb	r2, [r3, #0]
   171b4:	2310      	movs	r3, #16
   171b6:	18fb      	adds	r3, r7, r3
   171b8:	2200      	movs	r2, #0
   171ba:	705a      	strb	r2, [r3, #1]
   171bc:	2310      	movs	r3, #16
   171be:	18fb      	adds	r3, r7, r3
   171c0:	2200      	movs	r2, #0
   171c2:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   171c4:	687b      	ldr	r3, [r7, #4]
   171c6:	685b      	ldr	r3, [r3, #4]
   171c8:	685a      	ldr	r2, [r3, #4]
   171ca:	687b      	ldr	r3, [r7, #4]
   171cc:	685b      	ldr	r3, [r3, #4]
   171ce:	689b      	ldr	r3, [r3, #8]
   171d0:	492a      	ldr	r1, [pc, #168]	; (1727c <SubscribeHandlerLedTopic+0xd8>)
   171d2:	2001      	movs	r0, #1
   171d4:	4c2a      	ldr	r4, [pc, #168]	; (17280 <SubscribeHandlerLedTopic+0xdc>)
   171d6:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   171d8:	687b      	ldr	r3, [r7, #4]
   171da:	681b      	ldr	r3, [r3, #0]
   171dc:	689b      	ldr	r3, [r3, #8]
   171de:	4929      	ldr	r1, [pc, #164]	; (17284 <SubscribeHandlerLedTopic+0xe0>)
   171e0:	2204      	movs	r2, #4
   171e2:	0018      	movs	r0, r3
   171e4:	4b28      	ldr	r3, [pc, #160]	; (17288 <SubscribeHandlerLedTopic+0xe4>)
   171e6:	4798      	blx	r3
   171e8:	1e03      	subs	r3, r0, #0
   171ea:	d143      	bne.n	17274 <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   171ec:	687b      	ldr	r3, [r7, #4]
   171ee:	681b      	ldr	r3, [r3, #0]
   171f0:	689b      	ldr	r3, [r3, #8]
   171f2:	3304      	adds	r3, #4
   171f4:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   171f6:	2300      	movs	r3, #0
   171f8:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   171fa:	e015      	b.n	17228 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   171fc:	697c      	ldr	r4, [r7, #20]
   171fe:	1c63      	adds	r3, r4, #1
   17200:	617b      	str	r3, [r7, #20]
   17202:	68fb      	ldr	r3, [r7, #12]
   17204:	220c      	movs	r2, #12
   17206:	18b9      	adds	r1, r7, r2
   17208:	220a      	movs	r2, #10
   1720a:	0018      	movs	r0, r3
   1720c:	4b1f      	ldr	r3, [pc, #124]	; (1728c <SubscribeHandlerLedTopic+0xe8>)
   1720e:	4798      	blx	r3
   17210:	0003      	movs	r3, r0
   17212:	b2da      	uxtb	r2, r3
   17214:	2310      	movs	r3, #16
   17216:	18fb      	adds	r3, r7, r3
   17218:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   1721a:	68fb      	ldr	r3, [r7, #12]
   1721c:	781b      	ldrb	r3, [r3, #0]
   1721e:	2b2c      	cmp	r3, #44	; 0x2c
   17220:	d10a      	bne.n	17238 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   17222:	68fb      	ldr	r3, [r7, #12]
   17224:	3301      	adds	r3, #1
   17226:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   17228:	697b      	ldr	r3, [r7, #20]
   1722a:	2b02      	cmp	r3, #2
   1722c:	dc05      	bgt.n	1723a <SubscribeHandlerLedTopic+0x96>
   1722e:	68fb      	ldr	r3, [r7, #12]
   17230:	781b      	ldrb	r3, [r3, #0]
   17232:	2b00      	cmp	r3, #0
   17234:	d1e2      	bne.n	171fc <SubscribeHandlerLedTopic+0x58>
   17236:	e000      	b.n	1723a <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   17238:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   1723a:	2310      	movs	r3, #16
   1723c:	18fb      	adds	r3, r7, r3
   1723e:	781b      	ldrb	r3, [r3, #0]
   17240:	001a      	movs	r2, r3
   17242:	2310      	movs	r3, #16
   17244:	18fb      	adds	r3, r7, r3
   17246:	785b      	ldrb	r3, [r3, #1]
   17248:	0018      	movs	r0, r3
   1724a:	2310      	movs	r3, #16
   1724c:	18fb      	adds	r3, r7, r3
   1724e:	789b      	ldrb	r3, [r3, #2]
   17250:	490f      	ldr	r1, [pc, #60]	; (17290 <SubscribeHandlerLedTopic+0xec>)
   17252:	9300      	str	r3, [sp, #0]
   17254:	0003      	movs	r3, r0
   17256:	2001      	movs	r0, #1
   17258:	4c09      	ldr	r4, [pc, #36]	; (17280 <SubscribeHandlerLedTopic+0xdc>)
   1725a:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   1725c:	2310      	movs	r3, #16
   1725e:	18fb      	adds	r3, r7, r3
   17260:	7818      	ldrb	r0, [r3, #0]
   17262:	2310      	movs	r3, #16
   17264:	18fb      	adds	r3, r7, r3
   17266:	7859      	ldrb	r1, [r3, #1]
   17268:	2310      	movs	r3, #16
   1726a:	18fb      	adds	r3, r7, r3
   1726c:	789b      	ldrb	r3, [r3, #2]
   1726e:	001a      	movs	r2, r3
   17270:	4b08      	ldr	r3, [pc, #32]	; (17294 <SubscribeHandlerLedTopic+0xf0>)
   17272:	4798      	blx	r3
    }
}
   17274:	46c0      	nop			; (mov r8, r8)
   17276:	46bd      	mov	sp, r7
   17278:	b007      	add	sp, #28
   1727a:	bd90      	pop	{r4, r7, pc}
   1727c:	000378d8 	.word	0x000378d8
   17280:	0001e921 	.word	0x0001e921
   17284:	000378e0 	.word	0x000378e0
   17288:	000359d5 	.word	0x000359d5
   1728c:	00035b81 	.word	0x00035b81
   17290:	000378e8 	.word	0x000378e8
   17294:	0001650d 	.word	0x0001650d

00017298 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   17298:	b590      	push	{r4, r7, lr}
   1729a:	b08b      	sub	sp, #44	; 0x2c
   1729c:	af00      	add	r7, sp, #0
   1729e:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   172a0:	230c      	movs	r3, #12
   172a2:	18fb      	adds	r3, r7, r3
   172a4:	2214      	movs	r2, #20
   172a6:	21ff      	movs	r1, #255	; 0xff
   172a8:	0018      	movs	r0, r3
   172aa:	4b48      	ldr	r3, [pc, #288]	; (173cc <SubscribeHandlerGameTopic+0x134>)
   172ac:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   172ae:	687b      	ldr	r3, [r7, #4]
   172b0:	681b      	ldr	r3, [r3, #0]
   172b2:	689b      	ldr	r3, [r3, #8]
   172b4:	4946      	ldr	r1, [pc, #280]	; (173d0 <SubscribeHandlerGameTopic+0x138>)
   172b6:	2209      	movs	r2, #9
   172b8:	0018      	movs	r0, r3
   172ba:	4b46      	ldr	r3, [pc, #280]	; (173d4 <SubscribeHandlerGameTopic+0x13c>)
   172bc:	4798      	blx	r3
   172be:	1e03      	subs	r3, r0, #0
   172c0:	d166      	bne.n	17390 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   172c2:	4b45      	ldr	r3, [pc, #276]	; (173d8 <SubscribeHandlerGameTopic+0x140>)
   172c4:	0019      	movs	r1, r3
   172c6:	2001      	movs	r0, #1
   172c8:	4b44      	ldr	r3, [pc, #272]	; (173dc <SubscribeHandlerGameTopic+0x144>)
   172ca:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   172cc:	687b      	ldr	r3, [r7, #4]
   172ce:	685b      	ldr	r3, [r3, #4]
   172d0:	685a      	ldr	r2, [r3, #4]
   172d2:	687b      	ldr	r3, [r7, #4]
   172d4:	685b      	ldr	r3, [r3, #4]
   172d6:	689b      	ldr	r3, [r3, #8]
   172d8:	4941      	ldr	r1, [pc, #260]	; (173e0 <SubscribeHandlerGameTopic+0x148>)
   172da:	2001      	movs	r0, #1
   172dc:	4c3f      	ldr	r4, [pc, #252]	; (173dc <SubscribeHandlerGameTopic+0x144>)
   172de:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   172e0:	687b      	ldr	r3, [r7, #4]
   172e2:	681b      	ldr	r3, [r3, #0]
   172e4:	68da      	ldr	r2, [r3, #12]
   172e6:	687b      	ldr	r3, [r7, #4]
   172e8:	681b      	ldr	r3, [r3, #0]
   172ea:	689b      	ldr	r3, [r3, #8]
   172ec:	493d      	ldr	r1, [pc, #244]	; (173e4 <SubscribeHandlerGameTopic+0x14c>)
   172ee:	2001      	movs	r0, #1
   172f0:	4c3a      	ldr	r4, [pc, #232]	; (173dc <SubscribeHandlerGameTopic+0x144>)
   172f2:	47a0      	blx	r4

        int nb = 0;
   172f4:	2300      	movs	r3, #0
   172f6:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   172f8:	687b      	ldr	r3, [r7, #4]
   172fa:	681b      	ldr	r3, [r3, #0]
   172fc:	689b      	ldr	r3, [r3, #8]
   172fe:	3309      	adds	r3, #9
   17300:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   17302:	e015      	b.n	17330 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   17304:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   17306:	1c63      	adds	r3, r4, #1
   17308:	627b      	str	r3, [r7, #36]	; 0x24
   1730a:	68bb      	ldr	r3, [r7, #8]
   1730c:	2208      	movs	r2, #8
   1730e:	18b9      	adds	r1, r7, r2
   17310:	220a      	movs	r2, #10
   17312:	0018      	movs	r0, r3
   17314:	4b34      	ldr	r3, [pc, #208]	; (173e8 <SubscribeHandlerGameTopic+0x150>)
   17316:	4798      	blx	r3
   17318:	0003      	movs	r3, r0
   1731a:	b2da      	uxtb	r2, r3
   1731c:	230c      	movs	r3, #12
   1731e:	18fb      	adds	r3, r7, r3
   17320:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   17322:	68bb      	ldr	r3, [r7, #8]
   17324:	781b      	ldrb	r3, [r3, #0]
   17326:	2b2c      	cmp	r3, #44	; 0x2c
   17328:	d10a      	bne.n	17340 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   1732a:	68bb      	ldr	r3, [r7, #8]
   1732c:	3301      	adds	r3, #1
   1732e:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   17330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17332:	2b13      	cmp	r3, #19
   17334:	dc05      	bgt.n	17342 <SubscribeHandlerGameTopic+0xaa>
   17336:	68bb      	ldr	r3, [r7, #8]
   17338:	781b      	ldrb	r3, [r3, #0]
   1733a:	2b00      	cmp	r3, #0
   1733c:	d1e2      	bne.n	17304 <SubscribeHandlerGameTopic+0x6c>
   1733e:	e000      	b.n	17342 <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   17340:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   17342:	4b2a      	ldr	r3, [pc, #168]	; (173ec <SubscribeHandlerGameTopic+0x154>)
   17344:	0019      	movs	r1, r3
   17346:	2001      	movs	r0, #1
   17348:	4b24      	ldr	r3, [pc, #144]	; (173dc <SubscribeHandlerGameTopic+0x144>)
   1734a:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   1734c:	2300      	movs	r3, #0
   1734e:	623b      	str	r3, [r7, #32]
   17350:	e00d      	b.n	1736e <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   17352:	230c      	movs	r3, #12
   17354:	18fa      	adds	r2, r7, r3
   17356:	6a3b      	ldr	r3, [r7, #32]
   17358:	18d3      	adds	r3, r2, r3
   1735a:	781b      	ldrb	r3, [r3, #0]
   1735c:	001a      	movs	r2, r3
   1735e:	4b24      	ldr	r3, [pc, #144]	; (173f0 <SubscribeHandlerGameTopic+0x158>)
   17360:	0019      	movs	r1, r3
   17362:	2001      	movs	r0, #1
   17364:	4b1d      	ldr	r3, [pc, #116]	; (173dc <SubscribeHandlerGameTopic+0x144>)
   17366:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   17368:	6a3b      	ldr	r3, [r7, #32]
   1736a:	3301      	adds	r3, #1
   1736c:	623b      	str	r3, [r7, #32]
   1736e:	6a3b      	ldr	r3, [r7, #32]
   17370:	2b13      	cmp	r3, #19
   17372:	ddee      	ble.n	17352 <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   17374:	230c      	movs	r3, #12
   17376:	18fb      	adds	r3, r7, r3
   17378:	0018      	movs	r0, r3
   1737a:	4b1e      	ldr	r3, [pc, #120]	; (173f4 <SubscribeHandlerGameTopic+0x15c>)
   1737c:	4798      	blx	r3
   1737e:	0003      	movs	r3, r0
   17380:	2b01      	cmp	r3, #1
   17382:	d11e      	bne.n	173c2 <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   17384:	4b1c      	ldr	r3, [pc, #112]	; (173f8 <SubscribeHandlerGameTopic+0x160>)
   17386:	0019      	movs	r1, r3
   17388:	2001      	movs	r0, #1
   1738a:	4b14      	ldr	r3, [pc, #80]	; (173dc <SubscribeHandlerGameTopic+0x144>)
   1738c:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   1738e:	e018      	b.n	173c2 <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   17390:	4b1a      	ldr	r3, [pc, #104]	; (173fc <SubscribeHandlerGameTopic+0x164>)
   17392:	0019      	movs	r1, r3
   17394:	2001      	movs	r0, #1
   17396:	4b11      	ldr	r3, [pc, #68]	; (173dc <SubscribeHandlerGameTopic+0x144>)
   17398:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1739a:	687b      	ldr	r3, [r7, #4]
   1739c:	685b      	ldr	r3, [r3, #4]
   1739e:	685a      	ldr	r2, [r3, #4]
   173a0:	687b      	ldr	r3, [r7, #4]
   173a2:	685b      	ldr	r3, [r3, #4]
   173a4:	689b      	ldr	r3, [r3, #8]
   173a6:	490e      	ldr	r1, [pc, #56]	; (173e0 <SubscribeHandlerGameTopic+0x148>)
   173a8:	2001      	movs	r0, #1
   173aa:	4c0c      	ldr	r4, [pc, #48]	; (173dc <SubscribeHandlerGameTopic+0x144>)
   173ac:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   173ae:	687b      	ldr	r3, [r7, #4]
   173b0:	681b      	ldr	r3, [r3, #0]
   173b2:	68da      	ldr	r2, [r3, #12]
   173b4:	687b      	ldr	r3, [r7, #4]
   173b6:	681b      	ldr	r3, [r3, #0]
   173b8:	689b      	ldr	r3, [r3, #8]
   173ba:	490a      	ldr	r1, [pc, #40]	; (173e4 <SubscribeHandlerGameTopic+0x14c>)
   173bc:	2001      	movs	r0, #1
   173be:	4c07      	ldr	r4, [pc, #28]	; (173dc <SubscribeHandlerGameTopic+0x144>)
   173c0:	47a0      	blx	r4
}
   173c2:	46c0      	nop			; (mov r8, r8)
   173c4:	46bd      	mov	sp, r7
   173c6:	b00b      	add	sp, #44	; 0x2c
   173c8:	bd90      	pop	{r4, r7, pc}
   173ca:	46c0      	nop			; (mov r8, r8)
   173cc:	0003560f 	.word	0x0003560f
   173d0:	000378fc 	.word	0x000378fc
   173d4:	000359d5 	.word	0x000359d5
   173d8:	00037908 	.word	0x00037908
   173dc:	0001e921 	.word	0x0001e921
   173e0:	000378d8 	.word	0x000378d8
   173e4:	00037924 	.word	0x00037924
   173e8:	00035b81 	.word	0x00035b81
   173ec:	0003792c 	.word	0x0003792c
   173f0:	00037940 	.word	0x00037940
   173f4:	00014321 	.word	0x00014321
   173f8:	00037944 	.word	0x00037944
   173fc:	00037960 	.word	0x00037960

00017400 <SubscribeHandler>:
{
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
}

void SubscribeHandler(MessageData *msgData)
{
   17400:	b590      	push	{r4, r7, lr}
   17402:	b083      	sub	sp, #12
   17404:	af00      	add	r7, sp, #0
   17406:	6078      	str	r0, [r7, #4]
    /* You received publish message which you had subscribed. */
    /* Print Topic and message */
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   17408:	687b      	ldr	r3, [r7, #4]
   1740a:	685b      	ldr	r3, [r3, #4]
   1740c:	685a      	ldr	r2, [r3, #4]
   1740e:	687b      	ldr	r3, [r7, #4]
   17410:	685b      	ldr	r3, [r3, #4]
   17412:	689b      	ldr	r3, [r3, #8]
   17414:	4921      	ldr	r1, [pc, #132]	; (1749c <SubscribeHandler+0x9c>)
   17416:	2001      	movs	r0, #1
   17418:	4c21      	ldr	r4, [pc, #132]	; (174a0 <SubscribeHandler+0xa0>)
   1741a:	47a0      	blx	r4
    LogMessage(LOG_DEBUG_LVL, " >> ");
   1741c:	4b21      	ldr	r3, [pc, #132]	; (174a4 <SubscribeHandler+0xa4>)
   1741e:	0019      	movs	r1, r3
   17420:	2001      	movs	r0, #1
   17422:	4b1f      	ldr	r3, [pc, #124]	; (174a0 <SubscribeHandler+0xa0>)
   17424:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   17426:	687b      	ldr	r3, [r7, #4]
   17428:	681b      	ldr	r3, [r3, #0]
   1742a:	68da      	ldr	r2, [r3, #12]
   1742c:	687b      	ldr	r3, [r7, #4]
   1742e:	681b      	ldr	r3, [r3, #0]
   17430:	689b      	ldr	r3, [r3, #8]
   17432:	491d      	ldr	r1, [pc, #116]	; (174a8 <SubscribeHandler+0xa8>)
   17434:	2001      	movs	r0, #1
   17436:	4c1a      	ldr	r4, [pc, #104]	; (174a0 <SubscribeHandler+0xa0>)
   17438:	47a0      	blx	r4

    // Handle LedData message
    if (strncmp((char *)msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0) {
   1743a:	687b      	ldr	r3, [r7, #4]
   1743c:	685b      	ldr	r3, [r3, #4]
   1743e:	6898      	ldr	r0, [r3, #8]
   17440:	687b      	ldr	r3, [r7, #4]
   17442:	681b      	ldr	r3, [r3, #0]
   17444:	68da      	ldr	r2, [r3, #12]
   17446:	4b19      	ldr	r3, [pc, #100]	; (174ac <SubscribeHandler+0xac>)
   17448:	0019      	movs	r1, r3
   1744a:	4b19      	ldr	r3, [pc, #100]	; (174b0 <SubscribeHandler+0xb0>)
   1744c:	4798      	blx	r3
   1744e:	1e03      	subs	r3, r0, #0
   17450:	d120      	bne.n	17494 <SubscribeHandler+0x94>
        if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
   17452:	687b      	ldr	r3, [r7, #4]
   17454:	681b      	ldr	r3, [r3, #0]
   17456:	6898      	ldr	r0, [r3, #8]
   17458:	687b      	ldr	r3, [r7, #4]
   1745a:	681b      	ldr	r3, [r3, #0]
   1745c:	68da      	ldr	r2, [r3, #12]
   1745e:	4b15      	ldr	r3, [pc, #84]	; (174b4 <SubscribeHandler+0xb4>)
   17460:	0019      	movs	r1, r3
   17462:	4b13      	ldr	r3, [pc, #76]	; (174b0 <SubscribeHandler+0xb0>)
   17464:	4798      	blx	r3
   17466:	1e03      	subs	r3, r0, #0
   17468:	d104      	bne.n	17474 <SubscribeHandler+0x74>
            port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   1746a:	2101      	movs	r1, #1
   1746c:	2017      	movs	r0, #23
   1746e:	4b12      	ldr	r3, [pc, #72]	; (174b8 <SubscribeHandler+0xb8>)
   17470:	4798      	blx	r3
        } else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
            port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
        }
    }
}
   17472:	e00f      	b.n	17494 <SubscribeHandler+0x94>
        } else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
   17474:	687b      	ldr	r3, [r7, #4]
   17476:	681b      	ldr	r3, [r3, #0]
   17478:	6898      	ldr	r0, [r3, #8]
   1747a:	687b      	ldr	r3, [r7, #4]
   1747c:	681b      	ldr	r3, [r3, #0]
   1747e:	68da      	ldr	r2, [r3, #12]
   17480:	4b0e      	ldr	r3, [pc, #56]	; (174bc <SubscribeHandler+0xbc>)
   17482:	0019      	movs	r1, r3
   17484:	4b0a      	ldr	r3, [pc, #40]	; (174b0 <SubscribeHandler+0xb0>)
   17486:	4798      	blx	r3
   17488:	1e03      	subs	r3, r0, #0
   1748a:	d103      	bne.n	17494 <SubscribeHandler+0x94>
            port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
   1748c:	2100      	movs	r1, #0
   1748e:	2017      	movs	r0, #23
   17490:	4b09      	ldr	r3, [pc, #36]	; (174b8 <SubscribeHandler+0xb8>)
   17492:	4798      	blx	r3
}
   17494:	46c0      	nop			; (mov r8, r8)
   17496:	46bd      	mov	sp, r7
   17498:	b003      	add	sp, #12
   1749a:	bd90      	pop	{r4, r7, pc}
   1749c:	000378d8 	.word	0x000378d8
   174a0:	0001e921 	.word	0x0001e921
   174a4:	00037990 	.word	0x00037990
   174a8:	00037924 	.word	0x00037924
   174ac:	00037998 	.word	0x00037998
   174b0:	000359d5 	.word	0x000359d5
   174b4:	000379ac 	.word	0x000379ac
   174b8:	0001660d 	.word	0x0001660d
   174bc:	000379b4 	.word	0x000379b4

000174c0 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   174c0:	b590      	push	{r4, r7, lr}
   174c2:	b08b      	sub	sp, #44	; 0x2c
   174c4:	af06      	add	r7, sp, #24
   174c6:	60f8      	str	r0, [r7, #12]
   174c8:	60b9      	str	r1, [r7, #8]
   174ca:	607a      	str	r2, [r7, #4]
    switch (type) {
   174cc:	68bb      	ldr	r3, [r7, #8]
   174ce:	2b01      	cmp	r3, #1
   174d0:	d03b      	beq.n	1754a <mqtt_callback+0x8a>
   174d2:	2b05      	cmp	r3, #5
   174d4:	d05e      	beq.n	17594 <mqtt_callback+0xd4>
   174d6:	2b00      	cmp	r3, #0
   174d8:	d000      	beq.n	174dc <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   174da:	e061      	b.n	175a0 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   174dc:	687b      	ldr	r3, [r7, #4]
   174de:	681b      	ldr	r3, [r3, #0]
   174e0:	2b00      	cmp	r3, #0
   174e2:	db25      	blt.n	17530 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   174e4:	4b30      	ldr	r3, [pc, #192]	; (175a8 <mqtt_callback+0xe8>)
   174e6:	0019      	movs	r1, r3
   174e8:	2001      	movs	r0, #1
   174ea:	4b30      	ldr	r3, [pc, #192]	; (175ac <mqtt_callback+0xec>)
   174ec:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   174ee:	4930      	ldr	r1, [pc, #192]	; (175b0 <mqtt_callback+0xf0>)
   174f0:	4a30      	ldr	r2, [pc, #192]	; (175b4 <mqtt_callback+0xf4>)
   174f2:	68f8      	ldr	r0, [r7, #12]
   174f4:	2300      	movs	r3, #0
   174f6:	9305      	str	r3, [sp, #20]
   174f8:	2300      	movs	r3, #0
   174fa:	9304      	str	r3, [sp, #16]
   174fc:	2300      	movs	r3, #0
   174fe:	9303      	str	r3, [sp, #12]
   17500:	2300      	movs	r3, #0
   17502:	9302      	str	r3, [sp, #8]
   17504:	2300      	movs	r3, #0
   17506:	9301      	str	r3, [sp, #4]
   17508:	4b2a      	ldr	r3, [pc, #168]	; (175b4 <mqtt_callback+0xf4>)
   1750a:	9300      	str	r3, [sp, #0]
   1750c:	000b      	movs	r3, r1
   1750e:	2101      	movs	r1, #1
   17510:	4c29      	ldr	r4, [pc, #164]	; (175b8 <mqtt_callback+0xf8>)
   17512:	47a0      	blx	r4
   17514:	1e03      	subs	r3, r0, #0
   17516:	d005      	beq.n	17524 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   17518:	4b28      	ldr	r3, [pc, #160]	; (175bc <mqtt_callback+0xfc>)
   1751a:	0019      	movs	r1, r3
   1751c:	2001      	movs	r0, #1
   1751e:	4b23      	ldr	r3, [pc, #140]	; (175ac <mqtt_callback+0xec>)
   17520:	4798      	blx	r3
        } break;
   17522:	e03d      	b.n	175a0 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   17524:	4b26      	ldr	r3, [pc, #152]	; (175c0 <mqtt_callback+0x100>)
   17526:	0019      	movs	r1, r3
   17528:	2001      	movs	r0, #1
   1752a:	4b20      	ldr	r3, [pc, #128]	; (175ac <mqtt_callback+0xec>)
   1752c:	4798      	blx	r3
        } break;
   1752e:	e037      	b.n	175a0 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   17530:	4a24      	ldr	r2, [pc, #144]	; (175c4 <mqtt_callback+0x104>)
   17532:	4b25      	ldr	r3, [pc, #148]	; (175c8 <mqtt_callback+0x108>)
   17534:	0019      	movs	r1, r3
   17536:	2001      	movs	r0, #1
   17538:	4b1c      	ldr	r3, [pc, #112]	; (175ac <mqtt_callback+0xec>)
   1753a:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   1753c:	4a21      	ldr	r2, [pc, #132]	; (175c4 <mqtt_callback+0x104>)
   1753e:	68fb      	ldr	r3, [r7, #12]
   17540:	0011      	movs	r1, r2
   17542:	0018      	movs	r0, r3
   17544:	4b21      	ldr	r3, [pc, #132]	; (175cc <mqtt_callback+0x10c>)
   17546:	4798      	blx	r3
        } break;
   17548:	e02a      	b.n	175a0 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   1754a:	687b      	ldr	r3, [r7, #4]
   1754c:	781b      	ldrb	r3, [r3, #0]
   1754e:	2b00      	cmp	r3, #0
   17550:	d117      	bne.n	17582 <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   17552:	4b1f      	ldr	r3, [pc, #124]	; (175d0 <mqtt_callback+0x110>)
   17554:	491f      	ldr	r1, [pc, #124]	; (175d4 <mqtt_callback+0x114>)
   17556:	68f8      	ldr	r0, [r7, #12]
   17558:	2202      	movs	r2, #2
   1755a:	4c1f      	ldr	r4, [pc, #124]	; (175d8 <mqtt_callback+0x118>)
   1755c:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   1755e:	4b1f      	ldr	r3, [pc, #124]	; (175dc <mqtt_callback+0x11c>)
   17560:	491f      	ldr	r1, [pc, #124]	; (175e0 <mqtt_callback+0x120>)
   17562:	68f8      	ldr	r0, [r7, #12]
   17564:	2202      	movs	r2, #2
   17566:	4c1c      	ldr	r4, [pc, #112]	; (175d8 <mqtt_callback+0x118>)
   17568:	47a0      	blx	r4
				mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandler);
   1756a:	4b1e      	ldr	r3, [pc, #120]	; (175e4 <mqtt_callback+0x124>)
   1756c:	491c      	ldr	r1, [pc, #112]	; (175e0 <mqtt_callback+0x120>)
   1756e:	68f8      	ldr	r0, [r7, #12]
   17570:	2202      	movs	r2, #2
   17572:	4c19      	ldr	r4, [pc, #100]	; (175d8 <mqtt_callback+0x118>)
   17574:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   17576:	4b1c      	ldr	r3, [pc, #112]	; (175e8 <mqtt_callback+0x128>)
   17578:	0019      	movs	r1, r3
   1757a:	2001      	movs	r0, #1
   1757c:	4b0b      	ldr	r3, [pc, #44]	; (175ac <mqtt_callback+0xec>)
   1757e:	4798      	blx	r3
            break;
   17580:	e00e      	b.n	175a0 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   17582:	687b      	ldr	r3, [r7, #4]
   17584:	781b      	ldrb	r3, [r3, #0]
   17586:	001a      	movs	r2, r3
   17588:	4b18      	ldr	r3, [pc, #96]	; (175ec <mqtt_callback+0x12c>)
   1758a:	0019      	movs	r1, r3
   1758c:	2001      	movs	r0, #1
   1758e:	4b07      	ldr	r3, [pc, #28]	; (175ac <mqtt_callback+0xec>)
   17590:	4798      	blx	r3
            break;
   17592:	e005      	b.n	175a0 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   17594:	4b16      	ldr	r3, [pc, #88]	; (175f0 <mqtt_callback+0x130>)
   17596:	0019      	movs	r1, r3
   17598:	2001      	movs	r0, #1
   1759a:	4b04      	ldr	r3, [pc, #16]	; (175ac <mqtt_callback+0xec>)
   1759c:	4798      	blx	r3
            break;
   1759e:	46c0      	nop			; (mov r8, r8)
}
   175a0:	46c0      	nop			; (mov r8, r8)
   175a2:	46bd      	mov	sp, r7
   175a4:	b005      	add	sp, #20
   175a6:	bd90      	pop	{r4, r7, pc}
   175a8:	000379bc 	.word	0x000379bc
   175ac:	0001e921 	.word	0x0001e921
   175b0:	000379d8 	.word	0x000379d8
   175b4:	000379e8 	.word	0x000379e8
   175b8:	00030481 	.word	0x00030481
   175bc:	000379f4 	.word	0x000379f4
   175c0:	00037a1c 	.word	0x00037a1c
   175c4:	00037368 	.word	0x00037368
   175c8:	00037a38 	.word	0x00037a38
   175cc:	00030439 	.word	0x00030439
   175d0:	00017299 	.word	0x00017299
   175d4:	00037a70 	.word	0x00037a70
   175d8:	00030621 	.word	0x00030621
   175dc:	000171a5 	.word	0x000171a5
   175e0:	00037998 	.word	0x00037998
   175e4:	00017401 	.word	0x00017401
   175e8:	00037a84 	.word	0x00037a84
   175ec:	00037a98 	.word	0x00037a98
   175f0:	00037acc 	.word	0x00037acc

000175f4 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   175f4:	b580      	push	{r7, lr}
   175f6:	b088      	sub	sp, #32
   175f8:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   175fa:	1d3b      	adds	r3, r7, #4
   175fc:	0018      	movs	r0, r3
   175fe:	4b1f      	ldr	r3, [pc, #124]	; (1767c <configure_mqtt+0x88>)
   17600:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   17602:	1d3b      	adds	r3, r7, #4
   17604:	4a1e      	ldr	r2, [pc, #120]	; (17680 <configure_mqtt+0x8c>)
   17606:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17608:	1d3b      	adds	r3, r7, #4
   1760a:	2280      	movs	r2, #128	; 0x80
   1760c:	0092      	lsls	r2, r2, #2
   1760e:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   17610:	1d3b      	adds	r3, r7, #4
   17612:	4a1c      	ldr	r2, [pc, #112]	; (17684 <configure_mqtt+0x90>)
   17614:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17616:	1d3b      	adds	r3, r7, #4
   17618:	2280      	movs	r2, #128	; 0x80
   1761a:	0092      	lsls	r2, r2, #2
   1761c:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   1761e:	1d3b      	adds	r3, r7, #4
   17620:	4a19      	ldr	r2, [pc, #100]	; (17688 <configure_mqtt+0x94>)
   17622:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   17624:	1d3b      	adds	r3, r7, #4
   17626:	4a19      	ldr	r2, [pc, #100]	; (1768c <configure_mqtt+0x98>)
   17628:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   1762a:	1d3a      	adds	r2, r7, #4
   1762c:	4b18      	ldr	r3, [pc, #96]	; (17690 <configure_mqtt+0x9c>)
   1762e:	0011      	movs	r1, r2
   17630:	0018      	movs	r0, r3
   17632:	4b18      	ldr	r3, [pc, #96]	; (17694 <configure_mqtt+0xa0>)
   17634:	4798      	blx	r3
   17636:	0003      	movs	r3, r0
   17638:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   1763a:	69fb      	ldr	r3, [r7, #28]
   1763c:	2b00      	cmp	r3, #0
   1763e:	da06      	bge.n	1764e <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   17640:	69fa      	ldr	r2, [r7, #28]
   17642:	4b15      	ldr	r3, [pc, #84]	; (17698 <configure_mqtt+0xa4>)
   17644:	0019      	movs	r1, r3
   17646:	2001      	movs	r0, #1
   17648:	4b14      	ldr	r3, [pc, #80]	; (1769c <configure_mqtt+0xa8>)
   1764a:	4798      	blx	r3
        while (1) {
   1764c:	e7fe      	b.n	1764c <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   1764e:	4a14      	ldr	r2, [pc, #80]	; (176a0 <configure_mqtt+0xac>)
   17650:	4b0f      	ldr	r3, [pc, #60]	; (17690 <configure_mqtt+0x9c>)
   17652:	0011      	movs	r1, r2
   17654:	0018      	movs	r0, r3
   17656:	4b13      	ldr	r3, [pc, #76]	; (176a4 <configure_mqtt+0xb0>)
   17658:	4798      	blx	r3
   1765a:	0003      	movs	r3, r0
   1765c:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   1765e:	69fb      	ldr	r3, [r7, #28]
   17660:	2b00      	cmp	r3, #0
   17662:	da06      	bge.n	17672 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   17664:	69fa      	ldr	r2, [r7, #28]
   17666:	4b10      	ldr	r3, [pc, #64]	; (176a8 <configure_mqtt+0xb4>)
   17668:	0019      	movs	r1, r3
   1766a:	2001      	movs	r0, #1
   1766c:	4b0b      	ldr	r3, [pc, #44]	; (1769c <configure_mqtt+0xa8>)
   1766e:	4798      	blx	r3
        while (1) {
   17670:	e7fe      	b.n	17670 <configure_mqtt+0x7c>
        }
    }
}
   17672:	46c0      	nop			; (mov r8, r8)
   17674:	46bd      	mov	sp, r7
   17676:	b008      	add	sp, #32
   17678:	bd80      	pop	{r7, pc}
   1767a:	46c0      	nop			; (mov r8, r8)
   1767c:	00030379 	.word	0x00030379
   17680:	200008d0 	.word	0x200008d0
   17684:	20000ad0 	.word	0x20000ad0
   17688:	0000075b 	.word	0x0000075b
   1768c:	00001770 	.word	0x00001770
   17690:	20000898 	.word	0x20000898
   17694:	000302c9 	.word	0x000302c9
   17698:	00037ae0 	.word	0x00037ae0
   1769c:	0001e921 	.word	0x0001e921
   176a0:	000174c1 	.word	0x000174c1
   176a4:	000303b9 	.word	0x000303b9
   176a8:	00037b14 	.word	0x00037b14

000176ac <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   176ac:	b580      	push	{r7, lr}
   176ae:	b084      	sub	sp, #16
   176b0:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   176b2:	1d3b      	adds	r3, r7, #4
   176b4:	0018      	movs	r0, r3
   176b6:	4b0b      	ldr	r3, [pc, #44]	; (176e4 <configure_extint_channel+0x38>)
   176b8:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   176ba:	1d3b      	adds	r3, r7, #4
   176bc:	2237      	movs	r2, #55	; 0x37
   176be:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   176c0:	1d3b      	adds	r3, r7, #4
   176c2:	2200      	movs	r2, #0
   176c4:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   176c6:	1d3b      	adds	r3, r7, #4
   176c8:	2201      	movs	r2, #1
   176ca:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   176cc:	1d3b      	adds	r3, r7, #4
   176ce:	2202      	movs	r2, #2
   176d0:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   176d2:	1d3b      	adds	r3, r7, #4
   176d4:	0019      	movs	r1, r3
   176d6:	2007      	movs	r0, #7
   176d8:	4b03      	ldr	r3, [pc, #12]	; (176e8 <configure_extint_channel+0x3c>)
   176da:	4798      	blx	r3
}
   176dc:	46c0      	nop			; (mov r8, r8)
   176de:	46bd      	mov	sp, r7
   176e0:	b004      	add	sp, #16
   176e2:	bd80      	pop	{r7, pc}
   176e4:	00027385 	.word	0x00027385
   176e8:	000273b9 	.word	0x000273b9

000176ec <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   176ec:	b580      	push	{r7, lr}
   176ee:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   176f0:	4b06      	ldr	r3, [pc, #24]	; (1770c <configure_extint_callbacks+0x20>)
   176f2:	2200      	movs	r2, #0
   176f4:	2107      	movs	r1, #7
   176f6:	0018      	movs	r0, r3
   176f8:	4b05      	ldr	r3, [pc, #20]	; (17710 <configure_extint_callbacks+0x24>)
   176fa:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   176fc:	2100      	movs	r1, #0
   176fe:	2007      	movs	r0, #7
   17700:	4b04      	ldr	r3, [pc, #16]	; (17714 <configure_extint_callbacks+0x28>)
   17702:	4798      	blx	r3
}
   17704:	46c0      	nop			; (mov r8, r8)
   17706:	46bd      	mov	sp, r7
   17708:	bd80      	pop	{r7, pc}
   1770a:	46c0      	nop			; (mov r8, r8)
   1770c:	00017719 	.word	0x00017719
   17710:	00026f85 	.word	0x00026f85
   17714:	00026fe9 	.word	0x00026fe9

00017718 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   17718:	b5b0      	push	{r4, r5, r7, lr}
   1771a:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   1771c:	4b0c      	ldr	r3, [pc, #48]	; (17750 <extint_detection_callback+0x38>)
   1771e:	681b      	ldr	r3, [r3, #0]
   17720:	1c5a      	adds	r2, r3, #1
   17722:	4b0b      	ldr	r3, [pc, #44]	; (17750 <extint_detection_callback+0x38>)
   17724:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   17726:	4b0a      	ldr	r3, [pc, #40]	; (17750 <extint_detection_callback+0x38>)
   17728:	681b      	ldr	r3, [r3, #0]
   1772a:	2b28      	cmp	r3, #40	; 0x28
   1772c:	d902      	bls.n	17734 <extint_detection_callback+0x1c>
   1772e:	4b08      	ldr	r3, [pc, #32]	; (17750 <extint_detection_callback+0x38>)
   17730:	2201      	movs	r2, #1
   17732:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   17734:	4b06      	ldr	r3, [pc, #24]	; (17750 <extint_detection_callback+0x38>)
   17736:	681b      	ldr	r3, [r3, #0]
   17738:	4a06      	ldr	r2, [pc, #24]	; (17754 <extint_detection_callback+0x3c>)
   1773a:	4807      	ldr	r0, [pc, #28]	; (17758 <extint_detection_callback+0x40>)
   1773c:	213f      	movs	r1, #63	; 0x3f
   1773e:	4c07      	ldr	r4, [pc, #28]	; (1775c <extint_detection_callback+0x44>)
   17740:	47a0      	blx	r4
    isPressed = true;
   17742:	4b07      	ldr	r3, [pc, #28]	; (17760 <extint_detection_callback+0x48>)
   17744:	2201      	movs	r2, #1
   17746:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   17748:	46c0      	nop			; (mov r8, r8)
   1774a:	46bd      	mov	sp, r7
   1774c:	bdb0      	pop	{r4, r5, r7, pc}
   1774e:	46c0      	nop			; (mov r8, r8)
   17750:	200000b0 	.word	0x200000b0
   17754:	00037b48 	.word	0x00037b48
   17758:	20000070 	.word	0x20000070
   1775c:	00035869 	.word	0x00035869
   17760:	20000cd0 	.word	0x20000cd0

00017764 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   17764:	b580      	push	{r7, lr}
   17766:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   17768:	4a15      	ldr	r2, [pc, #84]	; (177c0 <HTTP_DownloadFileInit+0x5c>)
   1776a:	4b16      	ldr	r3, [pc, #88]	; (177c4 <HTTP_DownloadFileInit+0x60>)
   1776c:	0011      	movs	r1, r2
   1776e:	0018      	movs	r0, r3
   17770:	4b15      	ldr	r3, [pc, #84]	; (177c8 <HTTP_DownloadFileInit+0x64>)
   17772:	4798      	blx	r3
   17774:	1e03      	subs	r3, r0, #0
   17776:	d008      	beq.n	1778a <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17778:	4b14      	ldr	r3, [pc, #80]	; (177cc <HTTP_DownloadFileInit+0x68>)
   1777a:	0019      	movs	r1, r3
   1777c:	2001      	movs	r0, #1
   1777e:	4b14      	ldr	r3, [pc, #80]	; (177d0 <HTTP_DownloadFileInit+0x6c>)
   17780:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   17782:	e002      	b.n	1778a <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   17784:	2000      	movs	r0, #0
   17786:	4b13      	ldr	r3, [pc, #76]	; (177d4 <HTTP_DownloadFileInit+0x70>)
   17788:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   1778a:	4b0e      	ldr	r3, [pc, #56]	; (177c4 <HTTP_DownloadFileInit+0x60>)
   1778c:	2234      	movs	r2, #52	; 0x34
   1778e:	5c9b      	ldrb	r3, [r3, r2]
   17790:	2b00      	cmp	r3, #0
   17792:	d1f7      	bne.n	17784 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   17794:	4b10      	ldr	r3, [pc, #64]	; (177d8 <HTTP_DownloadFileInit+0x74>)
   17796:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   17798:	4b10      	ldr	r3, [pc, #64]	; (177dc <HTTP_DownloadFileInit+0x78>)
   1779a:	2201      	movs	r2, #1
   1779c:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   1779e:	4a10      	ldr	r2, [pc, #64]	; (177e0 <HTTP_DownloadFileInit+0x7c>)
   177a0:	4b10      	ldr	r3, [pc, #64]	; (177e4 <HTTP_DownloadFileInit+0x80>)
   177a2:	0011      	movs	r1, r2
   177a4:	0018      	movs	r0, r3
   177a6:	4b10      	ldr	r3, [pc, #64]	; (177e8 <HTTP_DownloadFileInit+0x84>)
   177a8:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   177aa:	4b10      	ldr	r3, [pc, #64]	; (177ec <HTTP_DownloadFileInit+0x88>)
   177ac:	4798      	blx	r3

    start_download();
   177ae:	4b10      	ldr	r3, [pc, #64]	; (177f0 <HTTP_DownloadFileInit+0x8c>)
   177b0:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   177b2:	4b10      	ldr	r3, [pc, #64]	; (177f4 <HTTP_DownloadFileInit+0x90>)
   177b4:	2203      	movs	r2, #3
   177b6:	701a      	strb	r2, [r3, #0]
}
   177b8:	46c0      	nop			; (mov r8, r8)
   177ba:	46bd      	mov	sp, r7
   177bc:	bd80      	pop	{r7, pc}
   177be:	46c0      	nop			; (mov r8, r8)
   177c0:	00037368 	.word	0x00037368
   177c4:	20000898 	.word	0x20000898
   177c8:	0003056d 	.word	0x0003056d
   177cc:	00037760 	.word	0x00037760
   177d0:	0001e921 	.word	0x0001e921
   177d4:	00022a75 	.word	0x00022a75
   177d8:	00026031 	.word	0x00026031
   177dc:	20000638 	.word	0x20000638
   177e0:	00016e05 	.word	0x00016e05
   177e4:	00016dd1 	.word	0x00016dd1
   177e8:	00026079 	.word	0x00026079
   177ec:	00025fe1 	.word	0x00025fe1
   177f0:	000169f9 	.word	0x000169f9
   177f4:	20000623 	.word	0x20000623

000177f8 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   177f8:	b590      	push	{r4, r7, lr}
   177fa:	b085      	sub	sp, #20
   177fc:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   177fe:	e009      	b.n	17814 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17800:	2000      	movs	r0, #0
   17802:	4b30      	ldr	r3, [pc, #192]	; (178c4 <HTTP_DownloadFileTransaction+0xcc>)
   17804:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17806:	4b30      	ldr	r3, [pc, #192]	; (178c8 <HTTP_DownloadFileTransaction+0xd0>)
   17808:	0018      	movs	r0, r3
   1780a:	4b30      	ldr	r3, [pc, #192]	; (178cc <HTTP_DownloadFileTransaction+0xd4>)
   1780c:	4798      	blx	r3
        vTaskDelay(5);
   1780e:	2005      	movs	r0, #5
   17810:	4b2f      	ldr	r3, [pc, #188]	; (178d0 <HTTP_DownloadFileTransaction+0xd8>)
   17812:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17814:	2010      	movs	r0, #16
   17816:	4b2f      	ldr	r3, [pc, #188]	; (178d4 <HTTP_DownloadFileTransaction+0xdc>)
   17818:	4798      	blx	r3
   1781a:	0003      	movs	r3, r0
   1781c:	001a      	movs	r2, r3
   1781e:	2301      	movs	r3, #1
   17820:	4053      	eors	r3, r2
   17822:	b2db      	uxtb	r3, r3
   17824:	2b00      	cmp	r3, #0
   17826:	d009      	beq.n	1783c <HTTP_DownloadFileTransaction+0x44>
   17828:	2020      	movs	r0, #32
   1782a:	4b2a      	ldr	r3, [pc, #168]	; (178d4 <HTTP_DownloadFileTransaction+0xdc>)
   1782c:	4798      	blx	r3
   1782e:	0003      	movs	r3, r0
   17830:	001a      	movs	r2, r3
   17832:	2301      	movs	r3, #1
   17834:	4053      	eors	r3, r2
   17836:	b2db      	uxtb	r3, r3
   17838:	2b00      	cmp	r3, #0
   1783a:	d1e1      	bne.n	17800 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   1783c:	4b26      	ldr	r3, [pc, #152]	; (178d8 <HTTP_DownloadFileTransaction+0xe0>)
   1783e:	4798      	blx	r3
    vTaskDelay(1000);
   17840:	23fa      	movs	r3, #250	; 0xfa
   17842:	009b      	lsls	r3, r3, #2
   17844:	0018      	movs	r0, r3
   17846:	4b22      	ldr	r3, [pc, #136]	; (178d0 <HTTP_DownloadFileTransaction+0xd8>)
   17848:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   1784a:	4b24      	ldr	r3, [pc, #144]	; (178dc <HTTP_DownloadFileTransaction+0xe4>)
   1784c:	2200      	movs	r2, #0
   1784e:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   17850:	003b      	movs	r3, r7
   17852:	4a23      	ldr	r2, [pc, #140]	; (178e0 <HTTP_DownloadFileTransaction+0xe8>)
   17854:	ca13      	ldmia	r2!, {r0, r1, r4}
   17856:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   17858:	003b      	movs	r3, r7
   1785a:	2230      	movs	r2, #48	; 0x30
   1785c:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1785e:	230f      	movs	r3, #15
   17860:	18fc      	adds	r4, r7, r3
   17862:	0039      	movs	r1, r7
   17864:	4b1f      	ldr	r3, [pc, #124]	; (178e4 <HTTP_DownloadFileTransaction+0xec>)
   17866:	220a      	movs	r2, #10
   17868:	0018      	movs	r0, r3
   1786a:	4b1f      	ldr	r3, [pc, #124]	; (178e8 <HTTP_DownloadFileTransaction+0xf0>)
   1786c:	4798      	blx	r3
   1786e:	0003      	movs	r3, r0
   17870:	7023      	strb	r3, [r4, #0]
    res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   17872:	230f      	movs	r3, #15
   17874:	18fc      	adds	r4, r7, r3
   17876:	0039      	movs	r1, r7
   17878:	4b1a      	ldr	r3, [pc, #104]	; (178e4 <HTTP_DownloadFileTransaction+0xec>)
   1787a:	220a      	movs	r2, #10
   1787c:	0018      	movs	r0, r3
   1787e:	4b1a      	ldr	r3, [pc, #104]	; (178e8 <HTTP_DownloadFileTransaction+0xf0>)
   17880:	4798      	blx	r3
   17882:	0003      	movs	r3, r0
   17884:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   17886:	230f      	movs	r3, #15
   17888:	18fb      	adds	r3, r7, r3
   1788a:	781b      	ldrb	r3, [r3, #0]
   1788c:	2b00      	cmp	r3, #0
   1788e:	d008      	beq.n	178a2 <HTTP_DownloadFileTransaction+0xaa>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   17890:	230f      	movs	r3, #15
   17892:	18fb      	adds	r3, r7, r3
   17894:	781a      	ldrb	r2, [r3, #0]
   17896:	4b15      	ldr	r3, [pc, #84]	; (178ec <HTTP_DownloadFileTransaction+0xf4>)
   17898:	0019      	movs	r1, r3
   1789a:	2000      	movs	r0, #0
   1789c:	4b14      	ldr	r3, [pc, #80]	; (178f0 <HTTP_DownloadFileTransaction+0xf8>)
   1789e:	4798      	blx	r3
   178a0:	e003      	b.n	178aa <HTTP_DownloadFileTransaction+0xb2>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   178a2:	4b14      	ldr	r3, [pc, #80]	; (178f4 <HTTP_DownloadFileTransaction+0xfc>)
   178a4:	0018      	movs	r0, r3
   178a6:	4b14      	ldr	r3, [pc, #80]	; (178f8 <HTTP_DownloadFileTransaction+0x100>)
   178a8:	4798      	blx	r3
    }
    delay_ms(100);
   178aa:	2064      	movs	r0, #100	; 0x64
   178ac:	4b13      	ldr	r3, [pc, #76]	; (178fc <HTTP_DownloadFileTransaction+0x104>)
   178ae:	4798      	blx	r3
    system_reset();
   178b0:	4b13      	ldr	r3, [pc, #76]	; (17900 <HTTP_DownloadFileTransaction+0x108>)
   178b2:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   178b4:	4b13      	ldr	r3, [pc, #76]	; (17904 <HTTP_DownloadFileTransaction+0x10c>)
   178b6:	2200      	movs	r2, #0
   178b8:	701a      	strb	r2, [r3, #0]
}
   178ba:	46c0      	nop			; (mov r8, r8)
   178bc:	46bd      	mov	sp, r7
   178be:	b005      	add	sp, #20
   178c0:	bd90      	pop	{r4, r7, pc}
   178c2:	46c0      	nop			; (mov r8, r8)
   178c4:	00022a75 	.word	0x00022a75
   178c8:	20004944 	.word	0x20004944
   178cc:	00033295 	.word	0x00033295
   178d0:	0001cbe1 	.word	0x0001cbe1
   178d4:	000166d1 	.word	0x000166d1
   178d8:	00026031 	.word	0x00026031
   178dc:	20000638 	.word	0x20000638
   178e0:	00037b80 	.word	0x00037b80
   178e4:	2000086c 	.word	0x2000086c
   178e8:	0002e55d 	.word	0x0002e55d
   178ec:	00037b5c 	.word	0x00037b5c
   178f0:	0001e921 	.word	0x0001e921
   178f4:	00037b6c 	.word	0x00037b6c
   178f8:	0001e835 	.word	0x0001e835
   178fc:	00020bed 	.word	0x00020bed
   17900:	000165d5 	.word	0x000165d5
   17904:	20000623 	.word	0x20000623

00017908 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   17908:	b580      	push	{r7, lr}
   1790a:	af00      	add	r7, sp, #0
    socketDeinit();
   1790c:	4b18      	ldr	r3, [pc, #96]	; (17970 <MQTT_InitRoutine+0x68>)
   1790e:	4798      	blx	r3
    configure_mqtt();
   17910:	4b18      	ldr	r3, [pc, #96]	; (17974 <MQTT_InitRoutine+0x6c>)
   17912:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17914:	4a18      	ldr	r2, [pc, #96]	; (17978 <MQTT_InitRoutine+0x70>)
   17916:	4b19      	ldr	r3, [pc, #100]	; (1797c <MQTT_InitRoutine+0x74>)
   17918:	0011      	movs	r1, r2
   1791a:	0018      	movs	r0, r3
   1791c:	4b18      	ldr	r3, [pc, #96]	; (17980 <MQTT_InitRoutine+0x78>)
   1791e:	4798      	blx	r3
    socketInit();
   17920:	4b18      	ldr	r3, [pc, #96]	; (17984 <MQTT_InitRoutine+0x7c>)
   17922:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   17924:	4b18      	ldr	r3, [pc, #96]	; (17988 <MQTT_InitRoutine+0x80>)
   17926:	2234      	movs	r2, #52	; 0x34
   17928:	5c9b      	ldrb	r3, [r3, r2]
   1792a:	2201      	movs	r2, #1
   1792c:	4053      	eors	r3, r2
   1792e:	b2db      	uxtb	r3, r3
   17930:	2b00      	cmp	r3, #0
   17932:	d00c      	beq.n	1794e <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17934:	4a15      	ldr	r2, [pc, #84]	; (1798c <MQTT_InitRoutine+0x84>)
   17936:	4b14      	ldr	r3, [pc, #80]	; (17988 <MQTT_InitRoutine+0x80>)
   17938:	0011      	movs	r1, r2
   1793a:	0018      	movs	r0, r3
   1793c:	4b14      	ldr	r3, [pc, #80]	; (17990 <MQTT_InitRoutine+0x88>)
   1793e:	4798      	blx	r3
   17940:	1e03      	subs	r3, r0, #0
   17942:	d004      	beq.n	1794e <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17944:	4b13      	ldr	r3, [pc, #76]	; (17994 <MQTT_InitRoutine+0x8c>)
   17946:	0019      	movs	r1, r3
   17948:	2001      	movs	r0, #1
   1794a:	4b13      	ldr	r3, [pc, #76]	; (17998 <MQTT_InitRoutine+0x90>)
   1794c:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   1794e:	4b0e      	ldr	r3, [pc, #56]	; (17988 <MQTT_InitRoutine+0x80>)
   17950:	2234      	movs	r2, #52	; 0x34
   17952:	5c9b      	ldrb	r3, [r3, r2]
   17954:	2b00      	cmp	r3, #0
   17956:	d004      	beq.n	17962 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   17958:	4b10      	ldr	r3, [pc, #64]	; (1799c <MQTT_InitRoutine+0x94>)
   1795a:	0019      	movs	r1, r3
   1795c:	2001      	movs	r0, #1
   1795e:	4b0e      	ldr	r3, [pc, #56]	; (17998 <MQTT_InitRoutine+0x90>)
   17960:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   17962:	4b0f      	ldr	r3, [pc, #60]	; (179a0 <MQTT_InitRoutine+0x98>)
   17964:	2201      	movs	r2, #1
   17966:	701a      	strb	r2, [r3, #0]
}
   17968:	46c0      	nop			; (mov r8, r8)
   1796a:	46bd      	mov	sp, r7
   1796c:	bd80      	pop	{r7, pc}
   1796e:	46c0      	nop			; (mov r8, r8)
   17970:	00026031 	.word	0x00026031
   17974:	000175f5 	.word	0x000175f5
   17978:	00017181 	.word	0x00017181
   1797c:	0001714d 	.word	0x0001714d
   17980:	00026079 	.word	0x00026079
   17984:	00025fe1 	.word	0x00025fe1
   17988:	20000898 	.word	0x20000898
   1798c:	00037368 	.word	0x00037368
   17990:	00030439 	.word	0x00030439
   17994:	00037760 	.word	0x00037760
   17998:	0001e921 	.word	0x0001e921
   1799c:	00037b8c 	.word	0x00037b8c
   179a0:	20000623 	.word	0x20000623

000179a4 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   179a4:	b580      	push	{r7, lr}
   179a6:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   179a8:	2000      	movs	r0, #0
   179aa:	4b0c      	ldr	r3, [pc, #48]	; (179dc <MQTT_HandleTransactions+0x38>)
   179ac:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   179ae:	4b0c      	ldr	r3, [pc, #48]	; (179e0 <MQTT_HandleTransactions+0x3c>)
   179b0:	0018      	movs	r0, r3
   179b2:	4b0c      	ldr	r3, [pc, #48]	; (179e4 <MQTT_HandleTransactions+0x40>)
   179b4:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   179b6:	4b0c      	ldr	r3, [pc, #48]	; (179e8 <MQTT_HandleTransactions+0x44>)
   179b8:	4798      	blx	r3
    MQTT_HandleImuMessages();
   179ba:	4b0c      	ldr	r3, [pc, #48]	; (179ec <MQTT_HandleTransactions+0x48>)
   179bc:	4798      	blx	r3
	MQTT_HandleTestMessages();
   179be:	4b0c      	ldr	r3, [pc, #48]	; (179f0 <MQTT_HandleTransactions+0x4c>)
   179c0:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   179c2:	4b0c      	ldr	r3, [pc, #48]	; (179f4 <MQTT_HandleTransactions+0x50>)
   179c4:	2234      	movs	r2, #52	; 0x34
   179c6:	5c9b      	ldrb	r3, [r3, r2]
   179c8:	2b00      	cmp	r3, #0
   179ca:	d004      	beq.n	179d6 <MQTT_HandleTransactions+0x32>
   179cc:	4b09      	ldr	r3, [pc, #36]	; (179f4 <MQTT_HandleTransactions+0x50>)
   179ce:	2164      	movs	r1, #100	; 0x64
   179d0:	0018      	movs	r0, r3
   179d2:	4b09      	ldr	r3, [pc, #36]	; (179f8 <MQTT_HandleTransactions+0x54>)
   179d4:	4798      	blx	r3
}
   179d6:	46c0      	nop			; (mov r8, r8)
   179d8:	46bd      	mov	sp, r7
   179da:	bd80      	pop	{r7, pc}
   179dc:	00022a75 	.word	0x00022a75
   179e0:	20004944 	.word	0x20004944
   179e4:	00033295 	.word	0x00033295
   179e8:	00017afd 	.word	0x00017afd
   179ec:	000179fd 	.word	0x000179fd
   179f0:	00017a89 	.word	0x00017a89
   179f4:	20000898 	.word	0x20000898
   179f8:	00030669 	.word	0x00030669

000179fc <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   179fc:	b590      	push	{r4, r7, lr}
   179fe:	b085      	sub	sp, #20
   17a00:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   17a02:	4b18      	ldr	r3, [pc, #96]	; (17a64 <MQTT_HandleImuMessages+0x68>)
   17a04:	681b      	ldr	r3, [r3, #0]
   17a06:	0039      	movs	r1, r7
   17a08:	2200      	movs	r2, #0
   17a0a:	0018      	movs	r0, r3
   17a0c:	4b16      	ldr	r3, [pc, #88]	; (17a68 <MQTT_HandleImuMessages+0x6c>)
   17a0e:	4798      	blx	r3
   17a10:	0003      	movs	r3, r0
   17a12:	2b01      	cmp	r3, #1
   17a14:	d121      	bne.n	17a5a <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   17a16:	003b      	movs	r3, r7
   17a18:	2200      	movs	r2, #0
   17a1a:	5e9b      	ldrsh	r3, [r3, r2]
   17a1c:	001c      	movs	r4, r3
   17a1e:	003b      	movs	r3, r7
   17a20:	2202      	movs	r2, #2
   17a22:	5e9b      	ldrsh	r3, [r3, r2]
   17a24:	0019      	movs	r1, r3
   17a26:	003b      	movs	r3, r7
   17a28:	2204      	movs	r2, #4
   17a2a:	5e9b      	ldrsh	r3, [r3, r2]
   17a2c:	4a0f      	ldr	r2, [pc, #60]	; (17a6c <MQTT_HandleImuMessages+0x70>)
   17a2e:	4810      	ldr	r0, [pc, #64]	; (17a70 <MQTT_HandleImuMessages+0x74>)
   17a30:	9301      	str	r3, [sp, #4]
   17a32:	9100      	str	r1, [sp, #0]
   17a34:	0023      	movs	r3, r4
   17a36:	213f      	movs	r1, #63	; 0x3f
   17a38:	4c0e      	ldr	r4, [pc, #56]	; (17a74 <MQTT_HandleImuMessages+0x78>)
   17a3a:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17a3c:	4b0c      	ldr	r3, [pc, #48]	; (17a70 <MQTT_HandleImuMessages+0x74>)
   17a3e:	0018      	movs	r0, r3
   17a40:	4b0d      	ldr	r3, [pc, #52]	; (17a78 <MQTT_HandleImuMessages+0x7c>)
   17a42:	4798      	blx	r3
   17a44:	0004      	movs	r4, r0
   17a46:	4a0a      	ldr	r2, [pc, #40]	; (17a70 <MQTT_HandleImuMessages+0x74>)
   17a48:	490c      	ldr	r1, [pc, #48]	; (17a7c <MQTT_HandleImuMessages+0x80>)
   17a4a:	480d      	ldr	r0, [pc, #52]	; (17a80 <MQTT_HandleImuMessages+0x84>)
   17a4c:	2300      	movs	r3, #0
   17a4e:	9301      	str	r3, [sp, #4]
   17a50:	2301      	movs	r3, #1
   17a52:	9300      	str	r3, [sp, #0]
   17a54:	0023      	movs	r3, r4
   17a56:	4c0b      	ldr	r4, [pc, #44]	; (17a84 <MQTT_HandleImuMessages+0x88>)
   17a58:	47a0      	blx	r4
    }
}
   17a5a:	46c0      	nop			; (mov r8, r8)
   17a5c:	46bd      	mov	sp, r7
   17a5e:	b003      	add	sp, #12
   17a60:	bd90      	pop	{r4, r7, pc}
   17a62:	46c0      	nop			; (mov r8, r8)
   17a64:	2000062c 	.word	0x2000062c
   17a68:	0001ba35 	.word	0x0001ba35
   17a6c:	00037ba8 	.word	0x00037ba8
   17a70:	20000030 	.word	0x20000030
   17a74:	00035869 	.word	0x00035869
   17a78:	000359c7 	.word	0x000359c7
   17a7c:	00037bcc 	.word	0x00037bcc
   17a80:	20000898 	.word	0x20000898
   17a84:	000305b5 	.word	0x000305b5

00017a88 <MQTT_HandleTestMessages>:

static void MQTT_HandleTestMessages(void)
{
   17a88:	b590      	push	{r4, r7, lr}
   17a8a:	b085      	sub	sp, #20
   17a8c:	af02      	add	r7, sp, #8
	struct TestPacket TestDataVar;
	if (pdPASS == xQueueReceive(xQueueTestBuffer, &TestDataVar, 0)) {
   17a8e:	4b12      	ldr	r3, [pc, #72]	; (17ad8 <MQTT_HandleTestMessages+0x50>)
   17a90:	681b      	ldr	r3, [r3, #0]
   17a92:	1d39      	adds	r1, r7, #4
   17a94:	2200      	movs	r2, #0
   17a96:	0018      	movs	r0, r3
   17a98:	4b10      	ldr	r3, [pc, #64]	; (17adc <MQTT_HandleTestMessages+0x54>)
   17a9a:	4798      	blx	r3
   17a9c:	0003      	movs	r3, r0
   17a9e:	2b01      	cmp	r3, #1
   17aa0:	d115      	bne.n	17ace <MQTT_HandleTestMessages+0x46>
		snprintf(mqtt_msg, 63, "{\"test\":%d }", TestDataVar.test);
   17aa2:	1d3b      	adds	r3, r7, #4
   17aa4:	781b      	ldrb	r3, [r3, #0]
   17aa6:	4a0e      	ldr	r2, [pc, #56]	; (17ae0 <MQTT_HandleTestMessages+0x58>)
   17aa8:	480e      	ldr	r0, [pc, #56]	; (17ae4 <MQTT_HandleTestMessages+0x5c>)
   17aaa:	213f      	movs	r1, #63	; 0x3f
   17aac:	4c0e      	ldr	r4, [pc, #56]	; (17ae8 <MQTT_HandleTestMessages+0x60>)
   17aae:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, TEST_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17ab0:	4b0c      	ldr	r3, [pc, #48]	; (17ae4 <MQTT_HandleTestMessages+0x5c>)
   17ab2:	0018      	movs	r0, r3
   17ab4:	4b0d      	ldr	r3, [pc, #52]	; (17aec <MQTT_HandleTestMessages+0x64>)
   17ab6:	4798      	blx	r3
   17ab8:	0004      	movs	r4, r0
   17aba:	4a0a      	ldr	r2, [pc, #40]	; (17ae4 <MQTT_HandleTestMessages+0x5c>)
   17abc:	490c      	ldr	r1, [pc, #48]	; (17af0 <MQTT_HandleTestMessages+0x68>)
   17abe:	480d      	ldr	r0, [pc, #52]	; (17af4 <MQTT_HandleTestMessages+0x6c>)
   17ac0:	2300      	movs	r3, #0
   17ac2:	9301      	str	r3, [sp, #4]
   17ac4:	2301      	movs	r3, #1
   17ac6:	9300      	str	r3, [sp, #0]
   17ac8:	0023      	movs	r3, r4
   17aca:	4c0b      	ldr	r4, [pc, #44]	; (17af8 <MQTT_HandleTestMessages+0x70>)
   17acc:	47a0      	blx	r4
	}
}
   17ace:	46c0      	nop			; (mov r8, r8)
   17ad0:	46bd      	mov	sp, r7
   17ad2:	b003      	add	sp, #12
   17ad4:	bd90      	pop	{r4, r7, pc}
   17ad6:	46c0      	nop			; (mov r8, r8)
   17ad8:	20000634 	.word	0x20000634
   17adc:	0001ba35 	.word	0x0001ba35
   17ae0:	00037be0 	.word	0x00037be0
   17ae4:	20000030 	.word	0x20000030
   17ae8:	00035869 	.word	0x00035869
   17aec:	000359c7 	.word	0x000359c7
   17af0:	00037bf0 	.word	0x00037bf0
   17af4:	20000898 	.word	0x20000898
   17af8:	000305b5 	.word	0x000305b5

00017afc <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   17afc:	b590      	push	{r4, r7, lr}
   17afe:	b08b      	sub	sp, #44	; 0x2c
   17b00:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   17b02:	4b39      	ldr	r3, [pc, #228]	; (17be8 <MQTT_HandleGameMessages+0xec>)
   17b04:	681b      	ldr	r3, [r3, #0]
   17b06:	2208      	movs	r2, #8
   17b08:	18b9      	adds	r1, r7, r2
   17b0a:	2200      	movs	r2, #0
   17b0c:	0018      	movs	r0, r3
   17b0e:	4b37      	ldr	r3, [pc, #220]	; (17bec <MQTT_HandleGameMessages+0xf0>)
   17b10:	4798      	blx	r3
   17b12:	0003      	movs	r3, r0
   17b14:	2b01      	cmp	r3, #1
   17b16:	d163      	bne.n	17be0 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   17b18:	4b35      	ldr	r3, [pc, #212]	; (17bf0 <MQTT_HandleGameMessages+0xf4>)
   17b1a:	4a36      	ldr	r2, [pc, #216]	; (17bf4 <MQTT_HandleGameMessages+0xf8>)
   17b1c:	ca03      	ldmia	r2!, {r0, r1}
   17b1e:	c303      	stmia	r3!, {r0, r1}
   17b20:	8812      	ldrh	r2, [r2, #0]
   17b22:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17b24:	2300      	movs	r3, #0
   17b26:	61fb      	str	r3, [r7, #28]
   17b28:	e02d      	b.n	17b86 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   17b2a:	2308      	movs	r3, #8
   17b2c:	18fa      	adds	r2, r7, r3
   17b2e:	69fb      	ldr	r3, [r7, #28]
   17b30:	18d3      	adds	r3, r2, r3
   17b32:	781b      	ldrb	r3, [r3, #0]
   17b34:	2bff      	cmp	r3, #255	; 0xff
   17b36:	d02a      	beq.n	17b8e <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   17b38:	2308      	movs	r3, #8
   17b3a:	18fa      	adds	r2, r7, r3
   17b3c:	69fb      	ldr	r3, [r7, #28]
   17b3e:	18d3      	adds	r3, r2, r3
   17b40:	781b      	ldrb	r3, [r3, #0]
   17b42:	4a2d      	ldr	r2, [pc, #180]	; (17bf8 <MQTT_HandleGameMessages+0xfc>)
   17b44:	0038      	movs	r0, r7
   17b46:	2103      	movs	r1, #3
   17b48:	4c2c      	ldr	r4, [pc, #176]	; (17bfc <MQTT_HandleGameMessages+0x100>)
   17b4a:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   17b4c:	003a      	movs	r2, r7
   17b4e:	4b28      	ldr	r3, [pc, #160]	; (17bf0 <MQTT_HandleGameMessages+0xf4>)
   17b50:	0011      	movs	r1, r2
   17b52:	0018      	movs	r0, r3
   17b54:	4b2a      	ldr	r3, [pc, #168]	; (17c00 <MQTT_HandleGameMessages+0x104>)
   17b56:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   17b58:	69fb      	ldr	r3, [r7, #28]
   17b5a:	3301      	adds	r3, #1
   17b5c:	2208      	movs	r2, #8
   17b5e:	18ba      	adds	r2, r7, r2
   17b60:	5cd3      	ldrb	r3, [r2, r3]
   17b62:	2bff      	cmp	r3, #255	; 0xff
   17b64:	d00c      	beq.n	17b80 <MQTT_HandleGameMessages+0x84>
   17b66:	69fb      	ldr	r3, [r7, #28]
   17b68:	3301      	adds	r3, #1
   17b6a:	2b13      	cmp	r3, #19
   17b6c:	dc08      	bgt.n	17b80 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   17b6e:	003b      	movs	r3, r7
   17b70:	222c      	movs	r2, #44	; 0x2c
   17b72:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   17b74:	003a      	movs	r2, r7
   17b76:	4b1e      	ldr	r3, [pc, #120]	; (17bf0 <MQTT_HandleGameMessages+0xf4>)
   17b78:	0011      	movs	r1, r2
   17b7a:	0018      	movs	r0, r3
   17b7c:	4b20      	ldr	r3, [pc, #128]	; (17c00 <MQTT_HandleGameMessages+0x104>)
   17b7e:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17b80:	69fb      	ldr	r3, [r7, #28]
   17b82:	3301      	adds	r3, #1
   17b84:	61fb      	str	r3, [r7, #28]
   17b86:	69fb      	ldr	r3, [r7, #28]
   17b88:	2b13      	cmp	r3, #19
   17b8a:	ddce      	ble.n	17b2a <MQTT_HandleGameMessages+0x2e>
   17b8c:	e000      	b.n	17b90 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   17b8e:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   17b90:	4b17      	ldr	r3, [pc, #92]	; (17bf0 <MQTT_HandleGameMessages+0xf4>)
   17b92:	0018      	movs	r0, r3
   17b94:	4b1b      	ldr	r3, [pc, #108]	; (17c04 <MQTT_HandleGameMessages+0x108>)
   17b96:	4798      	blx	r3
   17b98:	0003      	movs	r3, r0
   17b9a:	001a      	movs	r2, r3
   17b9c:	4b14      	ldr	r3, [pc, #80]	; (17bf0 <MQTT_HandleGameMessages+0xf4>)
   17b9e:	18d2      	adds	r2, r2, r3
   17ba0:	4b19      	ldr	r3, [pc, #100]	; (17c08 <MQTT_HandleGameMessages+0x10c>)
   17ba2:	0010      	movs	r0, r2
   17ba4:	0019      	movs	r1, r3
   17ba6:	2303      	movs	r3, #3
   17ba8:	001a      	movs	r2, r3
   17baa:	4b18      	ldr	r3, [pc, #96]	; (17c0c <MQTT_HandleGameMessages+0x110>)
   17bac:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   17bae:	4b10      	ldr	r3, [pc, #64]	; (17bf0 <MQTT_HandleGameMessages+0xf4>)
   17bb0:	0019      	movs	r1, r3
   17bb2:	2001      	movs	r0, #1
   17bb4:	4b16      	ldr	r3, [pc, #88]	; (17c10 <MQTT_HandleGameMessages+0x114>)
   17bb6:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   17bb8:	4b16      	ldr	r3, [pc, #88]	; (17c14 <MQTT_HandleGameMessages+0x118>)
   17bba:	0019      	movs	r1, r3
   17bbc:	2001      	movs	r0, #1
   17bbe:	4b14      	ldr	r3, [pc, #80]	; (17c10 <MQTT_HandleGameMessages+0x114>)
   17bc0:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17bc2:	4b0b      	ldr	r3, [pc, #44]	; (17bf0 <MQTT_HandleGameMessages+0xf4>)
   17bc4:	0018      	movs	r0, r3
   17bc6:	4b0f      	ldr	r3, [pc, #60]	; (17c04 <MQTT_HandleGameMessages+0x108>)
   17bc8:	4798      	blx	r3
   17bca:	0004      	movs	r4, r0
   17bcc:	4a08      	ldr	r2, [pc, #32]	; (17bf0 <MQTT_HandleGameMessages+0xf4>)
   17bce:	4912      	ldr	r1, [pc, #72]	; (17c18 <MQTT_HandleGameMessages+0x11c>)
   17bd0:	4812      	ldr	r0, [pc, #72]	; (17c1c <MQTT_HandleGameMessages+0x120>)
   17bd2:	2300      	movs	r3, #0
   17bd4:	9301      	str	r3, [sp, #4]
   17bd6:	2301      	movs	r3, #1
   17bd8:	9300      	str	r3, [sp, #0]
   17bda:	0023      	movs	r3, r4
   17bdc:	4c10      	ldr	r4, [pc, #64]	; (17c20 <MQTT_HandleGameMessages+0x124>)
   17bde:	47a0      	blx	r4
    }
}
   17be0:	46c0      	nop			; (mov r8, r8)
   17be2:	46bd      	mov	sp, r7
   17be4:	b009      	add	sp, #36	; 0x24
   17be6:	bd90      	pop	{r4, r7, pc}
   17be8:	20000628 	.word	0x20000628
   17bec:	0001ba35 	.word	0x0001ba35
   17bf0:	20000030 	.word	0x20000030
   17bf4:	000378fc 	.word	0x000378fc
   17bf8:	00037c04 	.word	0x00037c04
   17bfc:	00035869 	.word	0x00035869
   17c00:	0003594d 	.word	0x0003594d
   17c04:	000359c7 	.word	0x000359c7
   17c08:	00037c08 	.word	0x00037c08
   17c0c:	000355d9 	.word	0x000355d9
   17c10:	0001e921 	.word	0x0001e921
   17c14:	00037c0c 	.word	0x00037c0c
   17c18:	00037c10 	.word	0x00037c10
   17c1c:	20000898 	.word	0x20000898
   17c20:	000305b5 	.word	0x000305b5

00017c24 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   17c24:	b590      	push	{r4, r7, lr}
   17c26:	b08d      	sub	sp, #52	; 0x34
   17c28:	af02      	add	r7, sp, #8
   17c2a:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   17c2c:	2064      	movs	r0, #100	; 0x64
   17c2e:	4b7f      	ldr	r3, [pc, #508]	; (17e2c <vWifiTask+0x208>)
   17c30:	4798      	blx	r3
    init_state();
   17c32:	4b7f      	ldr	r3, [pc, #508]	; (17e30 <vWifiTask+0x20c>)
   17c34:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   17c36:	2200      	movs	r2, #0
   17c38:	2104      	movs	r1, #4
   17c3a:	2005      	movs	r0, #5
   17c3c:	4b7d      	ldr	r3, [pc, #500]	; (17e34 <vWifiTask+0x210>)
   17c3e:	4798      	blx	r3
   17c40:	0002      	movs	r2, r0
   17c42:	4b7d      	ldr	r3, [pc, #500]	; (17e38 <vWifiTask+0x214>)
   17c44:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   17c46:	2200      	movs	r2, #0
   17c48:	2106      	movs	r1, #6
   17c4a:	2005      	movs	r0, #5
   17c4c:	4b79      	ldr	r3, [pc, #484]	; (17e34 <vWifiTask+0x210>)
   17c4e:	4798      	blx	r3
   17c50:	0002      	movs	r2, r0
   17c52:	4b7a      	ldr	r3, [pc, #488]	; (17e3c <vWifiTask+0x218>)
   17c54:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   17c56:	2200      	movs	r2, #0
   17c58:	2114      	movs	r1, #20
   17c5a:	2002      	movs	r0, #2
   17c5c:	4b75      	ldr	r3, [pc, #468]	; (17e34 <vWifiTask+0x210>)
   17c5e:	4798      	blx	r3
   17c60:	0002      	movs	r2, r0
   17c62:	4b77      	ldr	r3, [pc, #476]	; (17e40 <vWifiTask+0x21c>)
   17c64:	601a      	str	r2, [r3, #0]
	xQueueTestBuffer = xQueueCreate(5, sizeof(struct TestPacket));
   17c66:	2200      	movs	r2, #0
   17c68:	2101      	movs	r1, #1
   17c6a:	2005      	movs	r0, #5
   17c6c:	4b71      	ldr	r3, [pc, #452]	; (17e34 <vWifiTask+0x210>)
   17c6e:	4798      	blx	r3
   17c70:	0002      	movs	r2, r0
   17c72:	4b74      	ldr	r3, [pc, #464]	; (17e44 <vWifiTask+0x220>)
   17c74:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   17c76:	2200      	movs	r2, #0
   17c78:	2102      	movs	r1, #2
   17c7a:	2005      	movs	r0, #5
   17c7c:	4b6d      	ldr	r3, [pc, #436]	; (17e34 <vWifiTask+0x210>)
   17c7e:	4798      	blx	r3
   17c80:	0002      	movs	r2, r0
   17c82:	4b71      	ldr	r3, [pc, #452]	; (17e48 <vWifiTask+0x224>)
   17c84:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL || xQueueTestBuffer == NULL) {
   17c86:	4b6c      	ldr	r3, [pc, #432]	; (17e38 <vWifiTask+0x214>)
   17c88:	681b      	ldr	r3, [r3, #0]
   17c8a:	2b00      	cmp	r3, #0
   17c8c:	d00f      	beq.n	17cae <vWifiTask+0x8a>
   17c8e:	4b6b      	ldr	r3, [pc, #428]	; (17e3c <vWifiTask+0x218>)
   17c90:	681b      	ldr	r3, [r3, #0]
   17c92:	2b00      	cmp	r3, #0
   17c94:	d00b      	beq.n	17cae <vWifiTask+0x8a>
   17c96:	4b6a      	ldr	r3, [pc, #424]	; (17e40 <vWifiTask+0x21c>)
   17c98:	681b      	ldr	r3, [r3, #0]
   17c9a:	2b00      	cmp	r3, #0
   17c9c:	d007      	beq.n	17cae <vWifiTask+0x8a>
   17c9e:	4b6a      	ldr	r3, [pc, #424]	; (17e48 <vWifiTask+0x224>)
   17ca0:	681b      	ldr	r3, [r3, #0]
   17ca2:	2b00      	cmp	r3, #0
   17ca4:	d003      	beq.n	17cae <vWifiTask+0x8a>
   17ca6:	4b67      	ldr	r3, [pc, #412]	; (17e44 <vWifiTask+0x220>)
   17ca8:	681b      	ldr	r3, [r3, #0]
   17caa:	2b00      	cmp	r3, #0
   17cac:	d103      	bne.n	17cb6 <vWifiTask+0x92>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   17cae:	4b67      	ldr	r3, [pc, #412]	; (17e4c <vWifiTask+0x228>)
   17cb0:	0018      	movs	r0, r3
   17cb2:	4b67      	ldr	r3, [pc, #412]	; (17e50 <vWifiTask+0x22c>)
   17cb4:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   17cb6:	4b67      	ldr	r3, [pc, #412]	; (17e54 <vWifiTask+0x230>)
   17cb8:	0018      	movs	r0, r3
   17cba:	4b65      	ldr	r3, [pc, #404]	; (17e50 <vWifiTask+0x22c>)
   17cbc:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   17cbe:	4b66      	ldr	r3, [pc, #408]	; (17e58 <vWifiTask+0x234>)
   17cc0:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   17cc2:	4b66      	ldr	r3, [pc, #408]	; (17e5c <vWifiTask+0x238>)
   17cc4:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   17cc6:	4b66      	ldr	r3, [pc, #408]	; (17e60 <vWifiTask+0x23c>)
   17cc8:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   17cca:	4b66      	ldr	r3, [pc, #408]	; (17e64 <vWifiTask+0x240>)
   17ccc:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   17cce:	4b66      	ldr	r3, [pc, #408]	; (17e68 <vWifiTask+0x244>)
   17cd0:	4798      	blx	r3
    configure_extint_callbacks();
   17cd2:	4b66      	ldr	r3, [pc, #408]	; (17e6c <vWifiTask+0x248>)
   17cd4:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   17cd6:	230c      	movs	r3, #12
   17cd8:	18fb      	adds	r3, r7, r3
   17cda:	2218      	movs	r2, #24
   17cdc:	2100      	movs	r1, #0
   17cde:	0018      	movs	r0, r3
   17ce0:	4b63      	ldr	r3, [pc, #396]	; (17e70 <vWifiTask+0x24c>)
   17ce2:	4798      	blx	r3

    nm_bsp_init();
   17ce4:	4b63      	ldr	r3, [pc, #396]	; (17e74 <vWifiTask+0x250>)
   17ce6:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   17ce8:	230c      	movs	r3, #12
   17cea:	18fb      	adds	r3, r7, r3
   17cec:	4a62      	ldr	r2, [pc, #392]	; (17e78 <vWifiTask+0x254>)
   17cee:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   17cf0:	2327      	movs	r3, #39	; 0x27
   17cf2:	18fc      	adds	r4, r7, r3
   17cf4:	230c      	movs	r3, #12
   17cf6:	18fb      	adds	r3, r7, r3
   17cf8:	0018      	movs	r0, r3
   17cfa:	4b60      	ldr	r3, [pc, #384]	; (17e7c <vWifiTask+0x258>)
   17cfc:	4798      	blx	r3
   17cfe:	0003      	movs	r3, r0
   17d00:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   17d02:	2327      	movs	r3, #39	; 0x27
   17d04:	18fb      	adds	r3, r7, r3
   17d06:	781b      	ldrb	r3, [r3, #0]
   17d08:	b25b      	sxtb	r3, r3
   17d0a:	2b00      	cmp	r3, #0
   17d0c:	d009      	beq.n	17d22 <vWifiTask+0xfe>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   17d0e:	2327      	movs	r3, #39	; 0x27
   17d10:	18fb      	adds	r3, r7, r3
   17d12:	2200      	movs	r2, #0
   17d14:	569a      	ldrsb	r2, [r3, r2]
   17d16:	4b5a      	ldr	r3, [pc, #360]	; (17e80 <vWifiTask+0x25c>)
   17d18:	0019      	movs	r1, r3
   17d1a:	2001      	movs	r0, #1
   17d1c:	4b59      	ldr	r3, [pc, #356]	; (17e84 <vWifiTask+0x260>)
   17d1e:	4798      	blx	r3
        while (1) {
   17d20:	e7fe      	b.n	17d20 <vWifiTask+0xfc>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   17d22:	4a59      	ldr	r2, [pc, #356]	; (17e88 <vWifiTask+0x264>)
   17d24:	4b59      	ldr	r3, [pc, #356]	; (17e8c <vWifiTask+0x268>)
   17d26:	0019      	movs	r1, r3
   17d28:	2001      	movs	r0, #1
   17d2a:	4b56      	ldr	r3, [pc, #344]	; (17e84 <vWifiTask+0x260>)
   17d2c:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   17d2e:	4b58      	ldr	r3, [pc, #352]	; (17e90 <vWifiTask+0x26c>)
   17d30:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17d32:	4a58      	ldr	r2, [pc, #352]	; (17e94 <vWifiTask+0x270>)
   17d34:	4b58      	ldr	r3, [pc, #352]	; (17e98 <vWifiTask+0x274>)
   17d36:	0011      	movs	r1, r2
   17d38:	0018      	movs	r0, r3
   17d3a:	4b58      	ldr	r3, [pc, #352]	; (17e9c <vWifiTask+0x278>)
   17d3c:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   17d3e:	4a58      	ldr	r2, [pc, #352]	; (17ea0 <vWifiTask+0x27c>)
   17d40:	4851      	ldr	r0, [pc, #324]	; (17e88 <vWifiTask+0x264>)
   17d42:	23ff      	movs	r3, #255	; 0xff
   17d44:	9300      	str	r3, [sp, #0]
   17d46:	0013      	movs	r3, r2
   17d48:	2202      	movs	r2, #2
   17d4a:	2102      	movs	r1, #2
   17d4c:	4c55      	ldr	r4, [pc, #340]	; (17ea4 <vWifiTask+0x280>)
   17d4e:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   17d50:	e006      	b.n	17d60 <vWifiTask+0x13c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17d52:	2000      	movs	r0, #0
   17d54:	4b54      	ldr	r3, [pc, #336]	; (17ea8 <vWifiTask+0x284>)
   17d56:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17d58:	4b54      	ldr	r3, [pc, #336]	; (17eac <vWifiTask+0x288>)
   17d5a:	0018      	movs	r0, r3
   17d5c:	4b54      	ldr	r3, [pc, #336]	; (17eb0 <vWifiTask+0x28c>)
   17d5e:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   17d60:	2002      	movs	r0, #2
   17d62:	4b54      	ldr	r3, [pc, #336]	; (17eb4 <vWifiTask+0x290>)
   17d64:	4798      	blx	r3
   17d66:	0003      	movs	r3, r0
   17d68:	001a      	movs	r2, r3
   17d6a:	2301      	movs	r3, #1
   17d6c:	4053      	eors	r3, r2
   17d6e:	b2db      	uxtb	r3, r3
   17d70:	2b00      	cmp	r3, #0
   17d72:	d1ee      	bne.n	17d52 <vWifiTask+0x12e>
    }

    vTaskDelay(1000);
   17d74:	23fa      	movs	r3, #250	; 0xfa
   17d76:	009b      	lsls	r3, r3, #2
   17d78:	0018      	movs	r0, r3
   17d7a:	4b2c      	ldr	r3, [pc, #176]	; (17e2c <vWifiTask+0x208>)
   17d7c:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   17d7e:	4b4e      	ldr	r3, [pc, #312]	; (17eb8 <vWifiTask+0x294>)
   17d80:	2201      	movs	r2, #1
   17d82:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   17d84:	4b4c      	ldr	r3, [pc, #304]	; (17eb8 <vWifiTask+0x294>)
   17d86:	781b      	ldrb	r3, [r3, #0]
   17d88:	b25b      	sxtb	r3, r3
   17d8a:	2b01      	cmp	r3, #1
   17d8c:	d00b      	beq.n	17da6 <vWifiTask+0x182>
   17d8e:	dc02      	bgt.n	17d96 <vWifiTask+0x172>
   17d90:	2b00      	cmp	r3, #0
   17d92:	d005      	beq.n	17da0 <vWifiTask+0x17c>
   17d94:	e010      	b.n	17db8 <vWifiTask+0x194>
   17d96:	2b02      	cmp	r3, #2
   17d98:	d008      	beq.n	17dac <vWifiTask+0x188>
   17d9a:	2b03      	cmp	r3, #3
   17d9c:	d009      	beq.n	17db2 <vWifiTask+0x18e>
   17d9e:	e00b      	b.n	17db8 <vWifiTask+0x194>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   17da0:	4b46      	ldr	r3, [pc, #280]	; (17ebc <vWifiTask+0x298>)
   17da2:	4798      	blx	r3

                break;
   17da4:	e00c      	b.n	17dc0 <vWifiTask+0x19c>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   17da6:	4b46      	ldr	r3, [pc, #280]	; (17ec0 <vWifiTask+0x29c>)
   17da8:	4798      	blx	r3
                break;
   17daa:	e009      	b.n	17dc0 <vWifiTask+0x19c>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   17dac:	4b45      	ldr	r3, [pc, #276]	; (17ec4 <vWifiTask+0x2a0>)
   17dae:	4798      	blx	r3
                break;
   17db0:	e006      	b.n	17dc0 <vWifiTask+0x19c>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   17db2:	4b45      	ldr	r3, [pc, #276]	; (17ec8 <vWifiTask+0x2a4>)
   17db4:	4798      	blx	r3
                break;
   17db6:	e003      	b.n	17dc0 <vWifiTask+0x19c>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   17db8:	4b3f      	ldr	r3, [pc, #252]	; (17eb8 <vWifiTask+0x294>)
   17dba:	2200      	movs	r2, #0
   17dbc:	701a      	strb	r2, [r3, #0]
                break;
   17dbe:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   17dc0:	230b      	movs	r3, #11
   17dc2:	18fb      	adds	r3, r7, r3
   17dc4:	2200      	movs	r2, #0
   17dc6:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   17dc8:	4b1b      	ldr	r3, [pc, #108]	; (17e38 <vWifiTask+0x214>)
   17dca:	681b      	ldr	r3, [r3, #0]
   17dcc:	220b      	movs	r2, #11
   17dce:	18b9      	adds	r1, r7, r2
   17dd0:	2200      	movs	r2, #0
   17dd2:	0018      	movs	r0, r3
   17dd4:	4b3d      	ldr	r3, [pc, #244]	; (17ecc <vWifiTask+0x2a8>)
   17dd6:	4798      	blx	r3
   17dd8:	0003      	movs	r3, r0
   17dda:	2b01      	cmp	r3, #1
   17ddc:	d105      	bne.n	17dea <vWifiTask+0x1c6>
            wifiStateMachine = DataToReceive;  // Update new state
   17dde:	230b      	movs	r3, #11
   17de0:	18fb      	adds	r3, r7, r3
   17de2:	781b      	ldrb	r3, [r3, #0]
   17de4:	b25a      	sxtb	r2, r3
   17de6:	4b34      	ldr	r3, [pc, #208]	; (17eb8 <vWifiTask+0x294>)
   17de8:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publis something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   17dea:	4b39      	ldr	r3, [pc, #228]	; (17ed0 <vWifiTask+0x2ac>)
   17dec:	781b      	ldrb	r3, [r3, #0]
   17dee:	b2db      	uxtb	r3, r3
   17df0:	2b00      	cmp	r3, #0
   17df2:	d017      	beq.n	17e24 <vWifiTask+0x200>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   17df4:	4b37      	ldr	r3, [pc, #220]	; (17ed4 <vWifiTask+0x2b0>)
   17df6:	0018      	movs	r0, r3
   17df8:	4b37      	ldr	r3, [pc, #220]	; (17ed8 <vWifiTask+0x2b4>)
   17dfa:	4798      	blx	r3
   17dfc:	0004      	movs	r4, r0
   17dfe:	4a35      	ldr	r2, [pc, #212]	; (17ed4 <vWifiTask+0x2b0>)
   17e00:	4936      	ldr	r1, [pc, #216]	; (17edc <vWifiTask+0x2b8>)
   17e02:	4837      	ldr	r0, [pc, #220]	; (17ee0 <vWifiTask+0x2bc>)
   17e04:	2300      	movs	r3, #0
   17e06:	9301      	str	r3, [sp, #4]
   17e08:	2301      	movs	r3, #1
   17e0a:	9300      	str	r3, [sp, #0]
   17e0c:	0023      	movs	r3, r4
   17e0e:	4c35      	ldr	r4, [pc, #212]	; (17ee4 <vWifiTask+0x2c0>)
   17e10:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   17e12:	4a30      	ldr	r2, [pc, #192]	; (17ed4 <vWifiTask+0x2b0>)
   17e14:	4b34      	ldr	r3, [pc, #208]	; (17ee8 <vWifiTask+0x2c4>)
   17e16:	0019      	movs	r1, r3
   17e18:	2001      	movs	r0, #1
   17e1a:	4b1a      	ldr	r3, [pc, #104]	; (17e84 <vWifiTask+0x260>)
   17e1c:	4798      	blx	r3
            isPressed = false;
   17e1e:	4b2c      	ldr	r3, [pc, #176]	; (17ed0 <vWifiTask+0x2ac>)
   17e20:	2200      	movs	r2, #0
   17e22:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   17e24:	2064      	movs	r0, #100	; 0x64
   17e26:	4b01      	ldr	r3, [pc, #4]	; (17e2c <vWifiTask+0x208>)
   17e28:	4798      	blx	r3
    while (1) {
   17e2a:	e7ab      	b.n	17d84 <vWifiTask+0x160>
   17e2c:	0001cbe1 	.word	0x0001cbe1
   17e30:	00016661 	.word	0x00016661
   17e34:	0001aed5 	.word	0x0001aed5
   17e38:	20000624 	.word	0x20000624
   17e3c:	2000062c 	.word	0x2000062c
   17e40:	20000628 	.word	0x20000628
   17e44:	20000634 	.word	0x20000634
   17e48:	20000630 	.word	0x20000630
   17e4c:	00037c24 	.word	0x00037c24
   17e50:	0001e835 	.word	0x0001e835
   17e54:	00037c4c 	.word	0x00037c4c
   17e58:	0001709d 	.word	0x0001709d
   17e5c:	000170d9 	.word	0x000170d9
   17e60:	000175f5 	.word	0x000175f5
   17e64:	00016fb9 	.word	0x00016fb9
   17e68:	000176ad 	.word	0x000176ad
   17e6c:	000176ed 	.word	0x000176ed
   17e70:	0003560f 	.word	0x0003560f
   17e74:	00020da9 	.word	0x00020da9
   17e78:	00016e65 	.word	0x00016e65
   17e7c:	00022881 	.word	0x00022881
   17e80:	00037c68 	.word	0x00037c68
   17e84:	0001e921 	.word	0x0001e921
   17e88:	00037734 	.word	0x00037734
   17e8c:	00037c94 	.word	0x00037c94
   17e90:	00025fe1 	.word	0x00025fe1
   17e94:	00017181 	.word	0x00017181
   17e98:	0001714d 	.word	0x0001714d
   17e9c:	00026079 	.word	0x00026079
   17ea0:	00037728 	.word	0x00037728
   17ea4:	00022a91 	.word	0x00022a91
   17ea8:	00022a75 	.word	0x00022a75
   17eac:	20004944 	.word	0x20004944
   17eb0:	00033295 	.word	0x00033295
   17eb4:	000166d1 	.word	0x000166d1
   17eb8:	20000623 	.word	0x20000623
   17ebc:	00017909 	.word	0x00017909
   17ec0:	000179a5 	.word	0x000179a5
   17ec4:	00017765 	.word	0x00017765
   17ec8:	000177f9 	.word	0x000177f9
   17ecc:	0001ba35 	.word	0x0001ba35
   17ed0:	20000cd0 	.word	0x20000cd0
   17ed4:	20000070 	.word	0x20000070
   17ed8:	000359c7 	.word	0x000359c7
   17edc:	00037cb8 	.word	0x00037cb8
   17ee0:	20000898 	.word	0x20000898
   17ee4:	000305b5 	.word	0x000305b5
   17ee8:	00037cd4 	.word	0x00037cd4

00017eec <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   17eec:	b590      	push	{r4, r7, lr}
   17eee:	b083      	sub	sp, #12
   17ef0:	af00      	add	r7, sp, #0
   17ef2:	0002      	movs	r2, r0
   17ef4:	1dfb      	adds	r3, r7, #7
   17ef6:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   17ef8:	1dfb      	adds	r3, r7, #7
   17efa:	781b      	ldrb	r3, [r3, #0]
   17efc:	2b03      	cmp	r3, #3
   17efe:	d806      	bhi.n	17f0e <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   17f00:	4b05      	ldr	r3, [pc, #20]	; (17f18 <WifiHandlerSetState+0x2c>)
   17f02:	6818      	ldr	r0, [r3, #0]
   17f04:	1df9      	adds	r1, r7, #7
   17f06:	2300      	movs	r3, #0
   17f08:	220a      	movs	r2, #10
   17f0a:	4c04      	ldr	r4, [pc, #16]	; (17f1c <WifiHandlerSetState+0x30>)
   17f0c:	47a0      	blx	r4
    }
}
   17f0e:	46c0      	nop			; (mov r8, r8)
   17f10:	46bd      	mov	sp, r7
   17f12:	b003      	add	sp, #12
   17f14:	bd90      	pop	{r4, r7, pc}
   17f16:	46c0      	nop			; (mov r8, r8)
   17f18:	20000624 	.word	0x20000624
   17f1c:	0001b17d 	.word	0x0001b17d

00017f20 <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   17f20:	b590      	push	{r4, r7, lr}
   17f22:	b085      	sub	sp, #20
   17f24:	af00      	add	r7, sp, #0
   17f26:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
   17f28:	4b06      	ldr	r3, [pc, #24]	; (17f44 <WifiAddDistanceDataToQueue+0x24>)
   17f2a:	6818      	ldr	r0, [r3, #0]
   17f2c:	6879      	ldr	r1, [r7, #4]
   17f2e:	2300      	movs	r3, #0
   17f30:	220a      	movs	r2, #10
   17f32:	4c05      	ldr	r4, [pc, #20]	; (17f48 <WifiAddDistanceDataToQueue+0x28>)
   17f34:	47a0      	blx	r4
   17f36:	0003      	movs	r3, r0
   17f38:	60fb      	str	r3, [r7, #12]
    return error;
   17f3a:	68fb      	ldr	r3, [r7, #12]
}
   17f3c:	0018      	movs	r0, r3
   17f3e:	46bd      	mov	sp, r7
   17f40:	b005      	add	sp, #20
   17f42:	bd90      	pop	{r4, r7, pc}
   17f44:	20000630 	.word	0x20000630
   17f48:	0001b17d 	.word	0x0001b17d

00017f4c <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   17f4c:	b590      	push	{r4, r7, lr}
   17f4e:	b085      	sub	sp, #20
   17f50:	af00      	add	r7, sp, #0
   17f52:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   17f54:	4b06      	ldr	r3, [pc, #24]	; (17f70 <WifiAddGameDataToQueue+0x24>)
   17f56:	6818      	ldr	r0, [r3, #0]
   17f58:	6879      	ldr	r1, [r7, #4]
   17f5a:	2300      	movs	r3, #0
   17f5c:	220a      	movs	r2, #10
   17f5e:	4c05      	ldr	r4, [pc, #20]	; (17f74 <WifiAddGameDataToQueue+0x28>)
   17f60:	47a0      	blx	r4
   17f62:	0003      	movs	r3, r0
   17f64:	60fb      	str	r3, [r7, #12]
    return error;
   17f66:	68fb      	ldr	r3, [r7, #12]
}
   17f68:	0018      	movs	r0, r3
   17f6a:	46bd      	mov	sp, r7
   17f6c:	b005      	add	sp, #20
   17f6e:	bd90      	pop	{r4, r7, pc}
   17f70:	20000628 	.word	0x20000628
   17f74:	0001b17d 	.word	0x0001b17d

00017f78 <WifiAddTestDataToQueue>:

int WifiAddTestDataToQueue(struct TestPacket *test)
{
   17f78:	b590      	push	{r4, r7, lr}
   17f7a:	b085      	sub	sp, #20
   17f7c:	af00      	add	r7, sp, #0
   17f7e:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueTestBuffer, test, (TickType_t)10);
   17f80:	4b06      	ldr	r3, [pc, #24]	; (17f9c <WifiAddTestDataToQueue+0x24>)
   17f82:	6818      	ldr	r0, [r3, #0]
   17f84:	6879      	ldr	r1, [r7, #4]
   17f86:	2300      	movs	r3, #0
   17f88:	220a      	movs	r2, #10
   17f8a:	4c05      	ldr	r4, [pc, #20]	; (17fa0 <WifiAddTestDataToQueue+0x28>)
   17f8c:	47a0      	blx	r4
   17f8e:	0003      	movs	r3, r0
   17f90:	60fb      	str	r3, [r7, #12]
	return error;
   17f92:	68fb      	ldr	r3, [r7, #12]
   17f94:	0018      	movs	r0, r3
   17f96:	46bd      	mov	sp, r7
   17f98:	b005      	add	sp, #20
   17f9a:	bd90      	pop	{r4, r7, pc}
   17f9c:	20000634 	.word	0x20000634
   17fa0:	0001b17d 	.word	0x0001b17d

00017fa4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   17fa4:	b580      	push	{r7, lr}
   17fa6:	b082      	sub	sp, #8
   17fa8:	af00      	add	r7, sp, #0
   17faa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   17fac:	687b      	ldr	r3, [r7, #4]
   17fae:	2200      	movs	r2, #0
   17fb0:	701a      	strb	r2, [r3, #0]
}
   17fb2:	46c0      	nop			; (mov r8, r8)
   17fb4:	46bd      	mov	sp, r7
   17fb6:	b002      	add	sp, #8
   17fb8:	bd80      	pop	{r7, pc}
	...

00017fbc <system_apb_clock_set_mask>:
{
   17fbc:	b580      	push	{r7, lr}
   17fbe:	b082      	sub	sp, #8
   17fc0:	af00      	add	r7, sp, #0
   17fc2:	0002      	movs	r2, r0
   17fc4:	6039      	str	r1, [r7, #0]
   17fc6:	1dfb      	adds	r3, r7, #7
   17fc8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   17fca:	1dfb      	adds	r3, r7, #7
   17fcc:	781b      	ldrb	r3, [r3, #0]
   17fce:	2b01      	cmp	r3, #1
   17fd0:	d00a      	beq.n	17fe8 <system_apb_clock_set_mask+0x2c>
   17fd2:	2b02      	cmp	r3, #2
   17fd4:	d00f      	beq.n	17ff6 <system_apb_clock_set_mask+0x3a>
   17fd6:	2b00      	cmp	r3, #0
   17fd8:	d114      	bne.n	18004 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   17fda:	4b0e      	ldr	r3, [pc, #56]	; (18014 <system_apb_clock_set_mask+0x58>)
   17fdc:	4a0d      	ldr	r2, [pc, #52]	; (18014 <system_apb_clock_set_mask+0x58>)
   17fde:	6991      	ldr	r1, [r2, #24]
   17fe0:	683a      	ldr	r2, [r7, #0]
   17fe2:	430a      	orrs	r2, r1
   17fe4:	619a      	str	r2, [r3, #24]
			break;
   17fe6:	e00f      	b.n	18008 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   17fe8:	4b0a      	ldr	r3, [pc, #40]	; (18014 <system_apb_clock_set_mask+0x58>)
   17fea:	4a0a      	ldr	r2, [pc, #40]	; (18014 <system_apb_clock_set_mask+0x58>)
   17fec:	69d1      	ldr	r1, [r2, #28]
   17fee:	683a      	ldr	r2, [r7, #0]
   17ff0:	430a      	orrs	r2, r1
   17ff2:	61da      	str	r2, [r3, #28]
			break;
   17ff4:	e008      	b.n	18008 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   17ff6:	4b07      	ldr	r3, [pc, #28]	; (18014 <system_apb_clock_set_mask+0x58>)
   17ff8:	4a06      	ldr	r2, [pc, #24]	; (18014 <system_apb_clock_set_mask+0x58>)
   17ffa:	6a11      	ldr	r1, [r2, #32]
   17ffc:	683a      	ldr	r2, [r7, #0]
   17ffe:	430a      	orrs	r2, r1
   18000:	621a      	str	r2, [r3, #32]
			break;
   18002:	e001      	b.n	18008 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   18004:	2317      	movs	r3, #23
   18006:	e000      	b.n	1800a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   18008:	2300      	movs	r3, #0
}
   1800a:	0018      	movs	r0, r3
   1800c:	46bd      	mov	sp, r7
   1800e:	b002      	add	sp, #8
   18010:	bd80      	pop	{r7, pc}
   18012:	46c0      	nop			; (mov r8, r8)
   18014:	40000400 	.word	0x40000400

00018018 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   18018:	b580      	push	{r7, lr}
   1801a:	b082      	sub	sp, #8
   1801c:	af00      	add	r7, sp, #0
   1801e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   18020:	687b      	ldr	r3, [r7, #4]
   18022:	2280      	movs	r2, #128	; 0x80
   18024:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   18026:	687b      	ldr	r3, [r7, #4]
   18028:	2200      	movs	r2, #0
   1802a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1802c:	687b      	ldr	r3, [r7, #4]
   1802e:	2201      	movs	r2, #1
   18030:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   18032:	687b      	ldr	r3, [r7, #4]
   18034:	2200      	movs	r2, #0
   18036:	70da      	strb	r2, [r3, #3]
}
   18038:	46c0      	nop			; (mov r8, r8)
   1803a:	46bd      	mov	sp, r7
   1803c:	b002      	add	sp, #8
   1803e:	bd80      	pop	{r7, pc}

00018040 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   18040:	b580      	push	{r7, lr}
   18042:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   18044:	4b05      	ldr	r3, [pc, #20]	; (1805c <system_is_debugger_present+0x1c>)
   18046:	789b      	ldrb	r3, [r3, #2]
   18048:	b2db      	uxtb	r3, r3
   1804a:	001a      	movs	r2, r3
   1804c:	2302      	movs	r3, #2
   1804e:	4013      	ands	r3, r2
   18050:	1e5a      	subs	r2, r3, #1
   18052:	4193      	sbcs	r3, r2
   18054:	b2db      	uxtb	r3, r3
}
   18056:	0018      	movs	r0, r3
   18058:	46bd      	mov	sp, r7
   1805a:	bd80      	pop	{r7, pc}
   1805c:	41002000 	.word	0x41002000

00018060 <system_interrupt_enter_critical_section>:
{
   18060:	b580      	push	{r7, lr}
   18062:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   18064:	4b02      	ldr	r3, [pc, #8]	; (18070 <system_interrupt_enter_critical_section+0x10>)
   18066:	4798      	blx	r3
}
   18068:	46c0      	nop			; (mov r8, r8)
   1806a:	46bd      	mov	sp, r7
   1806c:	bd80      	pop	{r7, pc}
   1806e:	46c0      	nop			; (mov r8, r8)
   18070:	00026cd9 	.word	0x00026cd9

00018074 <system_interrupt_leave_critical_section>:
{
   18074:	b580      	push	{r7, lr}
   18076:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   18078:	4b02      	ldr	r3, [pc, #8]	; (18084 <system_interrupt_leave_critical_section+0x10>)
   1807a:	4798      	blx	r3
}
   1807c:	46c0      	nop			; (mov r8, r8)
   1807e:	46bd      	mov	sp, r7
   18080:	bd80      	pop	{r7, pc}
   18082:	46c0      	nop			; (mov r8, r8)
   18084:	00026d2d 	.word	0x00026d2d

00018088 <system_interrupt_disable>:
{
   18088:	b580      	push	{r7, lr}
   1808a:	b082      	sub	sp, #8
   1808c:	af00      	add	r7, sp, #0
   1808e:	0002      	movs	r2, r0
   18090:	1dfb      	adds	r3, r7, #7
   18092:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   18094:	4a07      	ldr	r2, [pc, #28]	; (180b4 <system_interrupt_disable+0x2c>)
   18096:	1dfb      	adds	r3, r7, #7
   18098:	781b      	ldrb	r3, [r3, #0]
   1809a:	0019      	movs	r1, r3
   1809c:	231f      	movs	r3, #31
   1809e:	400b      	ands	r3, r1
   180a0:	2101      	movs	r1, #1
   180a2:	4099      	lsls	r1, r3
   180a4:	000b      	movs	r3, r1
   180a6:	0019      	movs	r1, r3
   180a8:	2380      	movs	r3, #128	; 0x80
   180aa:	50d1      	str	r1, [r2, r3]
}
   180ac:	46c0      	nop			; (mov r8, r8)
   180ae:	46bd      	mov	sp, r7
   180b0:	b002      	add	sp, #8
   180b2:	bd80      	pop	{r7, pc}
   180b4:	e000e100 	.word	0xe000e100

000180b8 <i2c_master_is_syncing>:
{
   180b8:	b580      	push	{r7, lr}
   180ba:	b084      	sub	sp, #16
   180bc:	af00      	add	r7, sp, #0
   180be:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   180c0:	687b      	ldr	r3, [r7, #4]
   180c2:	681b      	ldr	r3, [r3, #0]
   180c4:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   180c6:	68fb      	ldr	r3, [r7, #12]
   180c8:	69db      	ldr	r3, [r3, #28]
   180ca:	2207      	movs	r2, #7
   180cc:	4013      	ands	r3, r2
   180ce:	1e5a      	subs	r2, r3, #1
   180d0:	4193      	sbcs	r3, r2
   180d2:	b2db      	uxtb	r3, r3
}
   180d4:	0018      	movs	r0, r3
   180d6:	46bd      	mov	sp, r7
   180d8:	b004      	add	sp, #16
   180da:	bd80      	pop	{r7, pc}

000180dc <_i2c_master_wait_for_sync>:
{
   180dc:	b580      	push	{r7, lr}
   180de:	b082      	sub	sp, #8
   180e0:	af00      	add	r7, sp, #0
   180e2:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   180e4:	46c0      	nop			; (mov r8, r8)
   180e6:	687b      	ldr	r3, [r7, #4]
   180e8:	0018      	movs	r0, r3
   180ea:	4b04      	ldr	r3, [pc, #16]	; (180fc <_i2c_master_wait_for_sync+0x20>)
   180ec:	4798      	blx	r3
   180ee:	1e03      	subs	r3, r0, #0
   180f0:	d1f9      	bne.n	180e6 <_i2c_master_wait_for_sync+0xa>
}
   180f2:	46c0      	nop			; (mov r8, r8)
   180f4:	46bd      	mov	sp, r7
   180f6:	b002      	add	sp, #8
   180f8:	bd80      	pop	{r7, pc}
   180fa:	46c0      	nop			; (mov r8, r8)
   180fc:	000180b9 	.word	0x000180b9

00018100 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   18100:	b580      	push	{r7, lr}
   18102:	b084      	sub	sp, #16
   18104:	af00      	add	r7, sp, #0
   18106:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18108:	687b      	ldr	r3, [r7, #4]
   1810a:	681b      	ldr	r3, [r3, #0]
   1810c:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1810e:	687b      	ldr	r3, [r7, #4]
   18110:	681b      	ldr	r3, [r3, #0]
   18112:	0018      	movs	r0, r3
   18114:	4b0d      	ldr	r3, [pc, #52]	; (1814c <i2c_master_disable+0x4c>)
   18116:	4798      	blx	r3
   18118:	0003      	movs	r3, r0
   1811a:	0018      	movs	r0, r3
   1811c:	4b0c      	ldr	r3, [pc, #48]	; (18150 <i2c_master_disable+0x50>)
   1811e:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   18120:	687b      	ldr	r3, [r7, #4]
   18122:	0018      	movs	r0, r3
   18124:	4b0b      	ldr	r3, [pc, #44]	; (18154 <i2c_master_disable+0x54>)
   18126:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   18128:	68fb      	ldr	r3, [r7, #12]
   1812a:	2283      	movs	r2, #131	; 0x83
   1812c:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   1812e:	68fb      	ldr	r3, [r7, #12]
   18130:	2283      	movs	r2, #131	; 0x83
   18132:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   18134:	68fb      	ldr	r3, [r7, #12]
   18136:	681b      	ldr	r3, [r3, #0]
   18138:	2202      	movs	r2, #2
   1813a:	4393      	bics	r3, r2
   1813c:	001a      	movs	r2, r3
   1813e:	68fb      	ldr	r3, [r7, #12]
   18140:	601a      	str	r2, [r3, #0]

}
   18142:	46c0      	nop			; (mov r8, r8)
   18144:	46bd      	mov	sp, r7
   18146:	b004      	add	sp, #16
   18148:	bd80      	pop	{r7, pc}
   1814a:	46c0      	nop			; (mov r8, r8)
   1814c:	000281ad 	.word	0x000281ad
   18150:	00018089 	.word	0x00018089
   18154:	000180dd 	.word	0x000180dd

00018158 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   18158:	b5f0      	push	{r4, r5, r6, r7, lr}
   1815a:	b097      	sub	sp, #92	; 0x5c
   1815c:	af00      	add	r7, sp, #0
   1815e:	6178      	str	r0, [r7, #20]
   18160:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   18162:	2300      	movs	r3, #0
   18164:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   18166:	2300      	movs	r3, #0
   18168:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   1816a:	2300      	movs	r3, #0
   1816c:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   1816e:	233b      	movs	r3, #59	; 0x3b
   18170:	2210      	movs	r2, #16
   18172:	4694      	mov	ip, r2
   18174:	44bc      	add	ip, r7
   18176:	4463      	add	r3, ip
   18178:	2200      	movs	r2, #0
   1817a:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1817c:	697b      	ldr	r3, [r7, #20]
   1817e:	681b      	ldr	r3, [r3, #0]
   18180:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   18182:	697b      	ldr	r3, [r7, #20]
   18184:	681b      	ldr	r3, [r3, #0]
   18186:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   18188:	2323      	movs	r3, #35	; 0x23
   1818a:	2210      	movs	r2, #16
   1818c:	18ba      	adds	r2, r7, r2
   1818e:	18d4      	adds	r4, r2, r3
   18190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18192:	0018      	movs	r0, r3
   18194:	4bc0      	ldr	r3, [pc, #768]	; (18498 <_i2c_master_set_config+0x340>)
   18196:	4798      	blx	r3
   18198:	0003      	movs	r3, r0
   1819a:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   1819c:	230c      	movs	r3, #12
   1819e:	2210      	movs	r2, #16
   181a0:	4694      	mov	ip, r2
   181a2:	44bc      	add	ip, r7
   181a4:	4463      	add	r3, ip
   181a6:	0018      	movs	r0, r3
   181a8:	4bbc      	ldr	r3, [pc, #752]	; (1849c <_i2c_master_set_config+0x344>)
   181aa:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   181ac:	693b      	ldr	r3, [r7, #16]
   181ae:	69db      	ldr	r3, [r3, #28]
   181b0:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   181b2:	693b      	ldr	r3, [r7, #16]
   181b4:	6a1b      	ldr	r3, [r3, #32]
   181b6:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   181b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   181ba:	2b00      	cmp	r3, #0
   181bc:	d106      	bne.n	181cc <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   181be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   181c0:	2100      	movs	r1, #0
   181c2:	0018      	movs	r0, r3
   181c4:	4bb6      	ldr	r3, [pc, #728]	; (184a0 <_i2c_master_set_config+0x348>)
   181c6:	4798      	blx	r3
   181c8:	0003      	movs	r3, r0
   181ca:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   181cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   181ce:	b2da      	uxtb	r2, r3
   181d0:	230c      	movs	r3, #12
   181d2:	2110      	movs	r1, #16
   181d4:	468c      	mov	ip, r1
   181d6:	44bc      	add	ip, r7
   181d8:	4463      	add	r3, ip
   181da:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   181dc:	230c      	movs	r3, #12
   181de:	2210      	movs	r2, #16
   181e0:	4694      	mov	ip, r2
   181e2:	44bc      	add	ip, r7
   181e4:	4463      	add	r3, ip
   181e6:	2202      	movs	r2, #2
   181e8:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   181ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   181ec:	0c1b      	lsrs	r3, r3, #16
   181ee:	b2db      	uxtb	r3, r3
   181f0:	220c      	movs	r2, #12
   181f2:	2110      	movs	r1, #16
   181f4:	468c      	mov	ip, r1
   181f6:	44bc      	add	ip, r7
   181f8:	4462      	add	r2, ip
   181fa:	0011      	movs	r1, r2
   181fc:	0018      	movs	r0, r3
   181fe:	4ba9      	ldr	r3, [pc, #676]	; (184a4 <_i2c_master_set_config+0x34c>)
   18200:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   18202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18204:	2b00      	cmp	r3, #0
   18206:	d106      	bne.n	18216 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   18208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1820a:	2101      	movs	r1, #1
   1820c:	0018      	movs	r0, r3
   1820e:	4ba4      	ldr	r3, [pc, #656]	; (184a0 <_i2c_master_set_config+0x348>)
   18210:	4798      	blx	r3
   18212:	0003      	movs	r3, r0
   18214:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   18216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18218:	b2da      	uxtb	r2, r3
   1821a:	230c      	movs	r3, #12
   1821c:	2110      	movs	r1, #16
   1821e:	468c      	mov	ip, r1
   18220:	44bc      	add	ip, r7
   18222:	4463      	add	r3, ip
   18224:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   18226:	230c      	movs	r3, #12
   18228:	2210      	movs	r2, #16
   1822a:	4694      	mov	ip, r2
   1822c:	44bc      	add	ip, r7
   1822e:	4463      	add	r3, ip
   18230:	2202      	movs	r2, #2
   18232:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   18234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18236:	0c1b      	lsrs	r3, r3, #16
   18238:	b2db      	uxtb	r3, r3
   1823a:	220c      	movs	r2, #12
   1823c:	2110      	movs	r1, #16
   1823e:	468c      	mov	ip, r1
   18240:	44bc      	add	ip, r7
   18242:	4462      	add	r2, ip
   18244:	0011      	movs	r1, r2
   18246:	0018      	movs	r0, r3
   18248:	4b96      	ldr	r3, [pc, #600]	; (184a4 <_i2c_master_set_config+0x34c>)
   1824a:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   1824c:	693b      	ldr	r3, [r7, #16]
   1824e:	8a9a      	ldrh	r2, [r3, #20]
   18250:	697b      	ldr	r3, [r7, #20]
   18252:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   18254:	693b      	ldr	r3, [r7, #16]
   18256:	8ada      	ldrh	r2, [r3, #22]
   18258:	697b      	ldr	r3, [r7, #20]
   1825a:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   1825c:	693b      	ldr	r3, [r7, #16]
   1825e:	7e1b      	ldrb	r3, [r3, #24]
   18260:	2b00      	cmp	r3, #0
   18262:	d103      	bne.n	1826c <_i2c_master_set_config+0x114>
   18264:	4b90      	ldr	r3, [pc, #576]	; (184a8 <_i2c_master_set_config+0x350>)
   18266:	4798      	blx	r3
   18268:	1e03      	subs	r3, r0, #0
   1826a:	d002      	beq.n	18272 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   1826c:	2380      	movs	r3, #128	; 0x80
   1826e:	657b      	str	r3, [r7, #84]	; 0x54
   18270:	e001      	b.n	18276 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   18272:	2300      	movs	r3, #0
   18274:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   18276:	693b      	ldr	r3, [r7, #16]
   18278:	691b      	ldr	r3, [r3, #16]
   1827a:	2b00      	cmp	r3, #0
   1827c:	d004      	beq.n	18288 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   1827e:	693b      	ldr	r3, [r7, #16]
   18280:	691b      	ldr	r3, [r3, #16]
   18282:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18284:	4313      	orrs	r3, r2
   18286:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   18288:	693b      	ldr	r3, [r7, #16]
   1828a:	689b      	ldr	r3, [r3, #8]
   1828c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1828e:	4313      	orrs	r3, r2
   18290:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   18292:	693b      	ldr	r3, [r7, #16]
   18294:	2224      	movs	r2, #36	; 0x24
   18296:	5c9b      	ldrb	r3, [r3, r2]
   18298:	2b00      	cmp	r3, #0
   1829a:	d004      	beq.n	182a6 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   1829c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1829e:	2280      	movs	r2, #128	; 0x80
   182a0:	05d2      	lsls	r2, r2, #23
   182a2:	4313      	orrs	r3, r2
   182a4:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   182a6:	693b      	ldr	r3, [r7, #16]
   182a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   182aa:	2b00      	cmp	r3, #0
   182ac:	d004      	beq.n	182b8 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   182ae:	693b      	ldr	r3, [r7, #16]
   182b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   182b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   182b4:	4313      	orrs	r3, r2
   182b6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   182b8:	693b      	ldr	r3, [r7, #16]
   182ba:	222c      	movs	r2, #44	; 0x2c
   182bc:	5c9b      	ldrb	r3, [r3, r2]
   182be:	2b00      	cmp	r3, #0
   182c0:	d105      	bne.n	182ce <_i2c_master_set_config+0x176>
   182c2:	693b      	ldr	r3, [r7, #16]
   182c4:	689a      	ldr	r2, [r3, #8]
   182c6:	2380      	movs	r3, #128	; 0x80
   182c8:	049b      	lsls	r3, r3, #18
   182ca:	429a      	cmp	r2, r3
   182cc:	d104      	bne.n	182d8 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   182ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   182d0:	2280      	movs	r2, #128	; 0x80
   182d2:	0512      	lsls	r2, r2, #20
   182d4:	4313      	orrs	r3, r2
   182d6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   182d8:	693b      	ldr	r3, [r7, #16]
   182da:	222d      	movs	r2, #45	; 0x2d
   182dc:	5c9b      	ldrb	r3, [r3, r2]
   182de:	2b00      	cmp	r3, #0
   182e0:	d004      	beq.n	182ec <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   182e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   182e4:	2280      	movs	r2, #128	; 0x80
   182e6:	0412      	lsls	r2, r2, #16
   182e8:	4313      	orrs	r3, r2
   182ea:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   182ec:	693b      	ldr	r3, [r7, #16]
   182ee:	222e      	movs	r2, #46	; 0x2e
   182f0:	5c9b      	ldrb	r3, [r3, r2]
   182f2:	2b00      	cmp	r3, #0
   182f4:	d004      	beq.n	18300 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   182f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   182f8:	2280      	movs	r2, #128	; 0x80
   182fa:	03d2      	lsls	r2, r2, #15
   182fc:	4313      	orrs	r3, r2
   182fe:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   18300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18302:	681a      	ldr	r2, [r3, #0]
   18304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18306:	431a      	orrs	r2, r3
   18308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1830a:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   1830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1830e:	2280      	movs	r2, #128	; 0x80
   18310:	0052      	lsls	r2, r2, #1
   18312:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   18314:	2323      	movs	r3, #35	; 0x23
   18316:	2210      	movs	r2, #16
   18318:	4694      	mov	ip, r2
   1831a:	44bc      	add	ip, r7
   1831c:	4463      	add	r3, ip
   1831e:	781b      	ldrb	r3, [r3, #0]
   18320:	3314      	adds	r3, #20
   18322:	b2db      	uxtb	r3, r3
   18324:	0018      	movs	r0, r3
   18326:	4b61      	ldr	r3, [pc, #388]	; (184ac <_i2c_master_set_config+0x354>)
   18328:	4798      	blx	r3
   1832a:	0003      	movs	r3, r0
   1832c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   1832e:	693b      	ldr	r3, [r7, #16]
   18330:	681b      	ldr	r3, [r3, #0]
   18332:	22fa      	movs	r2, #250	; 0xfa
   18334:	0092      	lsls	r2, r2, #2
   18336:	4353      	muls	r3, r2
   18338:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   1833a:	693b      	ldr	r3, [r7, #16]
   1833c:	685b      	ldr	r3, [r3, #4]
   1833e:	22fa      	movs	r2, #250	; 0xfa
   18340:	0092      	lsls	r2, r2, #2
   18342:	4353      	muls	r3, r2
   18344:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   18346:	693b      	ldr	r3, [r7, #16]
   18348:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   1834a:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   1834c:	4b58      	ldr	r3, [pc, #352]	; (184b0 <_i2c_master_set_config+0x358>)
   1834e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18350:	4798      	blx	r3
   18352:	0005      	movs	r5, r0
   18354:	000e      	movs	r6, r1
   18356:	4b56      	ldr	r3, [pc, #344]	; (184b0 <_i2c_master_set_config+0x358>)
   18358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1835a:	4798      	blx	r3
   1835c:	60b8      	str	r0, [r7, #8]
   1835e:	60f9      	str	r1, [r7, #12]
   18360:	4b53      	ldr	r3, [pc, #332]	; (184b0 <_i2c_master_set_config+0x358>)
   18362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18364:	4798      	blx	r3
   18366:	4c53      	ldr	r4, [pc, #332]	; (184b4 <_i2c_master_set_config+0x35c>)
   18368:	4a53      	ldr	r2, [pc, #332]	; (184b8 <_i2c_master_set_config+0x360>)
   1836a:	4b54      	ldr	r3, [pc, #336]	; (184bc <_i2c_master_set_config+0x364>)
   1836c:	47a0      	blx	r4
   1836e:	0003      	movs	r3, r0
   18370:	000c      	movs	r4, r1
   18372:	603b      	str	r3, [r7, #0]
   18374:	607c      	str	r4, [r7, #4]
   18376:	4b4e      	ldr	r3, [pc, #312]	; (184b0 <_i2c_master_set_config+0x358>)
   18378:	6a38      	ldr	r0, [r7, #32]
   1837a:	4798      	blx	r3
   1837c:	0002      	movs	r2, r0
   1837e:	000b      	movs	r3, r1
   18380:	4c4c      	ldr	r4, [pc, #304]	; (184b4 <_i2c_master_set_config+0x35c>)
   18382:	6838      	ldr	r0, [r7, #0]
   18384:	6879      	ldr	r1, [r7, #4]
   18386:	47a0      	blx	r4
   18388:	0003      	movs	r3, r0
   1838a:	000c      	movs	r4, r1
   1838c:	0018      	movs	r0, r3
   1838e:	0021      	movs	r1, r4
   18390:	4c4b      	ldr	r4, [pc, #300]	; (184c0 <_i2c_master_set_config+0x368>)
   18392:	2200      	movs	r2, #0
   18394:	4b4b      	ldr	r3, [pc, #300]	; (184c4 <_i2c_master_set_config+0x36c>)
   18396:	47a0      	blx	r4
   18398:	0003      	movs	r3, r0
   1839a:	000c      	movs	r4, r1
   1839c:	001a      	movs	r2, r3
   1839e:	0023      	movs	r3, r4
   183a0:	4c44      	ldr	r4, [pc, #272]	; (184b4 <_i2c_master_set_config+0x35c>)
   183a2:	68b8      	ldr	r0, [r7, #8]
   183a4:	68f9      	ldr	r1, [r7, #12]
   183a6:	47a0      	blx	r4
   183a8:	0003      	movs	r3, r0
   183aa:	000c      	movs	r4, r1
   183ac:	001a      	movs	r2, r3
   183ae:	0023      	movs	r3, r4
   183b0:	4c45      	ldr	r4, [pc, #276]	; (184c8 <_i2c_master_set_config+0x370>)
   183b2:	0028      	movs	r0, r5
   183b4:	0031      	movs	r1, r6
   183b6:	47a0      	blx	r4
   183b8:	0003      	movs	r3, r0
   183ba:	000c      	movs	r4, r1
   183bc:	001d      	movs	r5, r3
   183be:	0026      	movs	r6, r4
   183c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   183c2:	005a      	lsls	r2, r3, #1
   183c4:	4b3a      	ldr	r3, [pc, #232]	; (184b0 <_i2c_master_set_config+0x358>)
   183c6:	0010      	movs	r0, r2
   183c8:	4798      	blx	r3
   183ca:	0002      	movs	r2, r0
   183cc:	000b      	movs	r3, r1
   183ce:	4c3c      	ldr	r4, [pc, #240]	; (184c0 <_i2c_master_set_config+0x368>)
   183d0:	0028      	movs	r0, r5
   183d2:	0031      	movs	r1, r6
   183d4:	47a0      	blx	r4
   183d6:	0003      	movs	r3, r0
   183d8:	000c      	movs	r4, r1
   183da:	0018      	movs	r0, r3
   183dc:	0021      	movs	r1, r4
   183de:	4c3a      	ldr	r4, [pc, #232]	; (184c8 <_i2c_master_set_config+0x370>)
   183e0:	2200      	movs	r2, #0
   183e2:	4b3a      	ldr	r3, [pc, #232]	; (184cc <_i2c_master_set_config+0x374>)
   183e4:	47a0      	blx	r4
   183e6:	0003      	movs	r3, r0
   183e8:	000c      	movs	r4, r1
   183ea:	001d      	movs	r5, r3
   183ec:	0026      	movs	r6, r4
   183ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   183f0:	005a      	lsls	r2, r3, #1
   183f2:	4b2f      	ldr	r3, [pc, #188]	; (184b0 <_i2c_master_set_config+0x358>)
   183f4:	0010      	movs	r0, r2
   183f6:	4798      	blx	r3
   183f8:	0002      	movs	r2, r0
   183fa:	000b      	movs	r3, r1
   183fc:	4c34      	ldr	r4, [pc, #208]	; (184d0 <_i2c_master_set_config+0x378>)
   183fe:	0028      	movs	r0, r5
   18400:	0031      	movs	r1, r6
   18402:	47a0      	blx	r4
   18404:	0003      	movs	r3, r0
   18406:	000c      	movs	r4, r1
   18408:	0019      	movs	r1, r3
   1840a:	0022      	movs	r2, r4
   1840c:	4b31      	ldr	r3, [pc, #196]	; (184d4 <_i2c_master_set_config+0x37c>)
   1840e:	0008      	movs	r0, r1
   18410:	0011      	movs	r1, r2
   18412:	4798      	blx	r3
   18414:	0003      	movs	r3, r0
   18416:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   18418:	693b      	ldr	r3, [r7, #16]
   1841a:	689a      	ldr	r2, [r3, #8]
   1841c:	2380      	movs	r3, #128	; 0x80
   1841e:	049b      	lsls	r3, r3, #18
   18420:	429a      	cmp	r2, r3
   18422:	d16a      	bne.n	184fa <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   18424:	4b22      	ldr	r3, [pc, #136]	; (184b0 <_i2c_master_set_config+0x358>)
   18426:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18428:	4798      	blx	r3
   1842a:	4c25      	ldr	r4, [pc, #148]	; (184c0 <_i2c_master_set_config+0x368>)
   1842c:	0002      	movs	r2, r0
   1842e:	000b      	movs	r3, r1
   18430:	47a0      	blx	r4
   18432:	0003      	movs	r3, r0
   18434:	000c      	movs	r4, r1
   18436:	001d      	movs	r5, r3
   18438:	0026      	movs	r6, r4
   1843a:	4b1d      	ldr	r3, [pc, #116]	; (184b0 <_i2c_master_set_config+0x358>)
   1843c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1843e:	4798      	blx	r3
   18440:	4c1c      	ldr	r4, [pc, #112]	; (184b4 <_i2c_master_set_config+0x35c>)
   18442:	2200      	movs	r2, #0
   18444:	4b24      	ldr	r3, [pc, #144]	; (184d8 <_i2c_master_set_config+0x380>)
   18446:	47a0      	blx	r4
   18448:	0003      	movs	r3, r0
   1844a:	000c      	movs	r4, r1
   1844c:	001a      	movs	r2, r3
   1844e:	0023      	movs	r3, r4
   18450:	4c1f      	ldr	r4, [pc, #124]	; (184d0 <_i2c_master_set_config+0x378>)
   18452:	0028      	movs	r0, r5
   18454:	0031      	movs	r1, r6
   18456:	47a0      	blx	r4
   18458:	0003      	movs	r3, r0
   1845a:	000c      	movs	r4, r1
   1845c:	0018      	movs	r0, r3
   1845e:	0021      	movs	r1, r4
   18460:	4c19      	ldr	r4, [pc, #100]	; (184c8 <_i2c_master_set_config+0x370>)
   18462:	2200      	movs	r2, #0
   18464:	4b19      	ldr	r3, [pc, #100]	; (184cc <_i2c_master_set_config+0x374>)
   18466:	47a0      	blx	r4
   18468:	0003      	movs	r3, r0
   1846a:	000c      	movs	r4, r1
   1846c:	0019      	movs	r1, r3
   1846e:	0022      	movs	r2, r4
   18470:	4b18      	ldr	r3, [pc, #96]	; (184d4 <_i2c_master_set_config+0x37c>)
   18472:	0008      	movs	r0, r1
   18474:	0011      	movs	r1, r2
   18476:	4798      	blx	r3
   18478:	0003      	movs	r3, r0
   1847a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   1847c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1847e:	2b00      	cmp	r3, #0
   18480:	d02e      	beq.n	184e0 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   18482:	4b16      	ldr	r3, [pc, #88]	; (184dc <_i2c_master_set_config+0x384>)
   18484:	6a79      	ldr	r1, [r7, #36]	; 0x24
   18486:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18488:	4798      	blx	r3
   1848a:	0003      	movs	r3, r0
   1848c:	1e9a      	subs	r2, r3, #2
   1848e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18490:	1ad3      	subs	r3, r2, r3
   18492:	653b      	str	r3, [r7, #80]	; 0x50
   18494:	e031      	b.n	184fa <_i2c_master_set_config+0x3a2>
   18496:	46c0      	nop			; (mov r8, r8)
   18498:	000280dd 	.word	0x000280dd
   1849c:	00018019 	.word	0x00018019
   184a0:	00027f21 	.word	0x00027f21
   184a4:	0002accd 	.word	0x0002accd
   184a8:	00018041 	.word	0x00018041
   184ac:	0002aa91 	.word	0x0002aa91
   184b0:	000354b1 	.word	0x000354b1
   184b4:	0003491d 	.word	0x0003491d
   184b8:	e826d695 	.word	0xe826d695
   184bc:	3e112e0b 	.word	0x3e112e0b
   184c0:	00033c95 	.word	0x00033c95
   184c4:	40240000 	.word	0x40240000
   184c8:	00034e1d 	.word	0x00034e1d
   184cc:	3ff00000 	.word	0x3ff00000
   184d0:	000342b5 	.word	0x000342b5
   184d4:	00035449 	.word	0x00035449
   184d8:	40080000 	.word	0x40080000
   184dc:	00033635 	.word	0x00033635
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   184e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   184e2:	005a      	lsls	r2, r3, #1
   184e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   184e6:	18d3      	adds	r3, r2, r3
   184e8:	1e5a      	subs	r2, r3, #1
   184ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   184ec:	0059      	lsls	r1, r3, #1
   184ee:	4b1d      	ldr	r3, [pc, #116]	; (18564 <_i2c_master_set_config+0x40c>)
   184f0:	0010      	movs	r0, r2
   184f2:	4798      	blx	r3
   184f4:	0003      	movs	r3, r0
   184f6:	3b01      	subs	r3, #1
   184f8:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   184fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   184fc:	2bff      	cmp	r3, #255	; 0xff
   184fe:	dc08      	bgt.n	18512 <_i2c_master_set_config+0x3ba>
   18500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18502:	2b00      	cmp	r3, #0
   18504:	db05      	blt.n	18512 <_i2c_master_set_config+0x3ba>
   18506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18508:	2bff      	cmp	r3, #255	; 0xff
   1850a:	dc02      	bgt.n	18512 <_i2c_master_set_config+0x3ba>
   1850c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1850e:	2b00      	cmp	r3, #0
   18510:	da06      	bge.n	18520 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   18512:	233b      	movs	r3, #59	; 0x3b
   18514:	2210      	movs	r2, #16
   18516:	4694      	mov	ip, r2
   18518:	44bc      	add	ip, r7
   1851a:	4463      	add	r3, ip
   1851c:	2240      	movs	r2, #64	; 0x40
   1851e:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   18520:	233b      	movs	r3, #59	; 0x3b
   18522:	2210      	movs	r2, #16
   18524:	4694      	mov	ip, r2
   18526:	44bc      	add	ip, r7
   18528:	4463      	add	r3, ip
   1852a:	781b      	ldrb	r3, [r3, #0]
   1852c:	2b40      	cmp	r3, #64	; 0x40
   1852e:	d00e      	beq.n	1854e <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   18530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18532:	22ff      	movs	r2, #255	; 0xff
   18534:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   18536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18538:	041b      	lsls	r3, r3, #16
   1853a:	0019      	movs	r1, r3
   1853c:	23ff      	movs	r3, #255	; 0xff
   1853e:	041b      	lsls	r3, r3, #16
   18540:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   18542:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   18544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   18546:	0612      	lsls	r2, r2, #24
   18548:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1854c:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   1854e:	233b      	movs	r3, #59	; 0x3b
   18550:	2210      	movs	r2, #16
   18552:	4694      	mov	ip, r2
   18554:	44bc      	add	ip, r7
   18556:	4463      	add	r3, ip
   18558:	781b      	ldrb	r3, [r3, #0]
}
   1855a:	0018      	movs	r0, r3
   1855c:	46bd      	mov	sp, r7
   1855e:	b017      	add	sp, #92	; 0x5c
   18560:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18562:	46c0      	nop			; (mov r8, r8)
   18564:	00033635 	.word	0x00033635

00018568 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   18568:	b590      	push	{r4, r7, lr}
   1856a:	b08b      	sub	sp, #44	; 0x2c
   1856c:	af00      	add	r7, sp, #0
   1856e:	60f8      	str	r0, [r7, #12]
   18570:	60b9      	str	r1, [r7, #8]
   18572:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   18574:	68fb      	ldr	r3, [r7, #12]
   18576:	68ba      	ldr	r2, [r7, #8]
   18578:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1857a:	68fb      	ldr	r3, [r7, #12]
   1857c:	681b      	ldr	r3, [r3, #0]
   1857e:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   18580:	68fb      	ldr	r3, [r7, #12]
   18582:	681b      	ldr	r3, [r3, #0]
   18584:	0018      	movs	r0, r3
   18586:	4b3b      	ldr	r3, [pc, #236]	; (18674 <i2c_master_init+0x10c>)
   18588:	4798      	blx	r3
   1858a:	0003      	movs	r3, r0
   1858c:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1858e:	6a3b      	ldr	r3, [r7, #32]
   18590:	3302      	adds	r3, #2
   18592:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   18594:	6a3b      	ldr	r3, [r7, #32]
   18596:	3314      	adds	r3, #20
   18598:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1859a:	2201      	movs	r2, #1
   1859c:	69fb      	ldr	r3, [r7, #28]
   1859e:	409a      	lsls	r2, r3
   185a0:	0013      	movs	r3, r2
   185a2:	0019      	movs	r1, r3
   185a4:	2002      	movs	r0, #2
   185a6:	4b34      	ldr	r3, [pc, #208]	; (18678 <i2c_master_init+0x110>)
   185a8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   185aa:	2314      	movs	r3, #20
   185ac:	18fb      	adds	r3, r7, r3
   185ae:	0018      	movs	r0, r3
   185b0:	4b32      	ldr	r3, [pc, #200]	; (1867c <i2c_master_init+0x114>)
   185b2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   185b4:	687b      	ldr	r3, [r7, #4]
   185b6:	7b1a      	ldrb	r2, [r3, #12]
   185b8:	2314      	movs	r3, #20
   185ba:	18fb      	adds	r3, r7, r3
   185bc:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   185be:	69bb      	ldr	r3, [r7, #24]
   185c0:	b2db      	uxtb	r3, r3
   185c2:	2214      	movs	r2, #20
   185c4:	18ba      	adds	r2, r7, r2
   185c6:	0011      	movs	r1, r2
   185c8:	0018      	movs	r0, r3
   185ca:	4b2d      	ldr	r3, [pc, #180]	; (18680 <i2c_master_init+0x118>)
   185cc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   185ce:	69bb      	ldr	r3, [r7, #24]
   185d0:	b2db      	uxtb	r3, r3
   185d2:	0018      	movs	r0, r3
   185d4:	4b2b      	ldr	r3, [pc, #172]	; (18684 <i2c_master_init+0x11c>)
   185d6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   185d8:	687b      	ldr	r3, [r7, #4]
   185da:	7b1b      	ldrb	r3, [r3, #12]
   185dc:	2100      	movs	r1, #0
   185de:	0018      	movs	r0, r3
   185e0:	4b29      	ldr	r3, [pc, #164]	; (18688 <i2c_master_init+0x120>)
   185e2:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   185e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   185e6:	681b      	ldr	r3, [r3, #0]
   185e8:	2202      	movs	r2, #2
   185ea:	4013      	ands	r3, r2
   185ec:	d001      	beq.n	185f2 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   185ee:	231c      	movs	r3, #28
   185f0:	e03b      	b.n	1866a <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   185f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   185f4:	681b      	ldr	r3, [r3, #0]
   185f6:	2201      	movs	r2, #1
   185f8:	4013      	ands	r3, r2
   185fa:	d001      	beq.n	18600 <i2c_master_init+0x98>
		return STATUS_BUSY;
   185fc:	2305      	movs	r3, #5
   185fe:	e034      	b.n	1866a <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   18600:	68fb      	ldr	r3, [r7, #12]
   18602:	681b      	ldr	r3, [r3, #0]
   18604:	2217      	movs	r2, #23
   18606:	18bc      	adds	r4, r7, r2
   18608:	0018      	movs	r0, r3
   1860a:	4b1a      	ldr	r3, [pc, #104]	; (18674 <i2c_master_init+0x10c>)
   1860c:	4798      	blx	r3
   1860e:	0003      	movs	r3, r0
   18610:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   18612:	4a1e      	ldr	r2, [pc, #120]	; (1868c <i2c_master_init+0x124>)
   18614:	2317      	movs	r3, #23
   18616:	18fb      	adds	r3, r7, r3
   18618:	781b      	ldrb	r3, [r3, #0]
   1861a:	0011      	movs	r1, r2
   1861c:	0018      	movs	r0, r3
   1861e:	4b1c      	ldr	r3, [pc, #112]	; (18690 <i2c_master_init+0x128>)
   18620:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   18622:	2317      	movs	r3, #23
   18624:	18fb      	adds	r3, r7, r3
   18626:	781a      	ldrb	r2, [r3, #0]
   18628:	4b1a      	ldr	r3, [pc, #104]	; (18694 <i2c_master_init+0x12c>)
   1862a:	0092      	lsls	r2, r2, #2
   1862c:	68f9      	ldr	r1, [r7, #12]
   1862e:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   18630:	68fb      	ldr	r3, [r7, #12]
   18632:	2200      	movs	r2, #0
   18634:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   18636:	68fb      	ldr	r3, [r7, #12]
   18638:	2200      	movs	r2, #0
   1863a:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   1863c:	68fb      	ldr	r3, [r7, #12]
   1863e:	2200      	movs	r2, #0
   18640:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   18642:	68fb      	ldr	r3, [r7, #12]
   18644:	2200      	movs	r2, #0
   18646:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   18648:	68fb      	ldr	r3, [r7, #12]
   1864a:	2225      	movs	r2, #37	; 0x25
   1864c:	2100      	movs	r1, #0
   1864e:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   18650:	68fb      	ldr	r3, [r7, #12]
   18652:	2200      	movs	r2, #0
   18654:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   18656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18658:	2214      	movs	r2, #20
   1865a:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   1865c:	687a      	ldr	r2, [r7, #4]
   1865e:	68fb      	ldr	r3, [r7, #12]
   18660:	0011      	movs	r1, r2
   18662:	0018      	movs	r0, r3
   18664:	4b0c      	ldr	r3, [pc, #48]	; (18698 <i2c_master_init+0x130>)
   18666:	4798      	blx	r3
   18668:	0003      	movs	r3, r0
}
   1866a:	0018      	movs	r0, r3
   1866c:	46bd      	mov	sp, r7
   1866e:	b00b      	add	sp, #44	; 0x2c
   18670:	bd90      	pop	{r4, r7, pc}
   18672:	46c0      	nop			; (mov r8, r8)
   18674:	000280dd 	.word	0x000280dd
   18678:	00017fbd 	.word	0x00017fbd
   1867c:	00017fa5 	.word	0x00017fa5
   18680:	0002a96d 	.word	0x0002a96d
   18684:	0002a9b1 	.word	0x0002a9b1
   18688:	00027e95 	.word	0x00027e95
   1868c:	00013575 	.word	0x00013575
   18690:	00028141 	.word	0x00028141
   18694:	20005c9c 	.word	0x20005c9c
   18698:	00018159 	.word	0x00018159

0001869c <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   1869c:	b580      	push	{r7, lr}
   1869e:	b084      	sub	sp, #16
   186a0:	af00      	add	r7, sp, #0
   186a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   186a4:	687b      	ldr	r3, [r7, #4]
   186a6:	681b      	ldr	r3, [r3, #0]
   186a8:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   186aa:	687b      	ldr	r3, [r7, #4]
   186ac:	0018      	movs	r0, r3
   186ae:	4b0f      	ldr	r3, [pc, #60]	; (186ec <i2c_master_reset+0x50>)
   186b0:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   186b2:	687b      	ldr	r3, [r7, #4]
   186b4:	0018      	movs	r0, r3
   186b6:	4b0e      	ldr	r3, [pc, #56]	; (186f0 <i2c_master_reset+0x54>)
   186b8:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   186ba:	4b0e      	ldr	r3, [pc, #56]	; (186f4 <i2c_master_reset+0x58>)
   186bc:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   186be:	687b      	ldr	r3, [r7, #4]
   186c0:	681b      	ldr	r3, [r3, #0]
   186c2:	0018      	movs	r0, r3
   186c4:	4b0c      	ldr	r3, [pc, #48]	; (186f8 <i2c_master_reset+0x5c>)
   186c6:	4798      	blx	r3
   186c8:	0003      	movs	r3, r0
   186ca:	0018      	movs	r0, r3
   186cc:	4b0b      	ldr	r3, [pc, #44]	; (186fc <i2c_master_reset+0x60>)
   186ce:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   186d0:	4b0b      	ldr	r3, [pc, #44]	; (18700 <i2c_master_reset+0x64>)
   186d2:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   186d4:	687b      	ldr	r3, [r7, #4]
   186d6:	0018      	movs	r0, r3
   186d8:	4b04      	ldr	r3, [pc, #16]	; (186ec <i2c_master_reset+0x50>)
   186da:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   186dc:	68fb      	ldr	r3, [r7, #12]
   186de:	2201      	movs	r2, #1
   186e0:	601a      	str	r2, [r3, #0]
}
   186e2:	46c0      	nop			; (mov r8, r8)
   186e4:	46bd      	mov	sp, r7
   186e6:	b004      	add	sp, #16
   186e8:	bd80      	pop	{r7, pc}
   186ea:	46c0      	nop			; (mov r8, r8)
   186ec:	000180dd 	.word	0x000180dd
   186f0:	00018101 	.word	0x00018101
   186f4:	00018061 	.word	0x00018061
   186f8:	000281ad 	.word	0x000281ad
   186fc:	0002aae9 	.word	0x0002aae9
   18700:	00018075 	.word	0x00018075

00018704 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   18704:	b580      	push	{r7, lr}
   18706:	b084      	sub	sp, #16
   18708:	af00      	add	r7, sp, #0
   1870a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1870c:	687b      	ldr	r3, [r7, #4]
   1870e:	681b      	ldr	r3, [r3, #0]
   18710:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   18712:	68fb      	ldr	r3, [r7, #12]
   18714:	7e1b      	ldrb	r3, [r3, #24]
   18716:	b2db      	uxtb	r3, r3
   18718:	001a      	movs	r2, r3
   1871a:	2302      	movs	r3, #2
   1871c:	4013      	ands	r3, r2
   1871e:	d00b      	beq.n	18738 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   18720:	68fb      	ldr	r3, [r7, #12]
   18722:	2202      	movs	r2, #2
   18724:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   18726:	68fb      	ldr	r3, [r7, #12]
   18728:	8b5b      	ldrh	r3, [r3, #26]
   1872a:	b29b      	uxth	r3, r3
   1872c:	001a      	movs	r2, r3
   1872e:	2302      	movs	r3, #2
   18730:	4013      	ands	r3, r2
   18732:	d011      	beq.n	18758 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   18734:	2341      	movs	r3, #65	; 0x41
   18736:	e010      	b.n	1875a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   18738:	68fb      	ldr	r3, [r7, #12]
   1873a:	8b5b      	ldrh	r3, [r3, #26]
   1873c:	b29b      	uxth	r3, r3
   1873e:	001a      	movs	r2, r3
   18740:	2304      	movs	r3, #4
   18742:	4013      	ands	r3, r2
   18744:	d008      	beq.n	18758 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   18746:	68fb      	ldr	r3, [r7, #12]
   18748:	685b      	ldr	r3, [r3, #4]
   1874a:	22c0      	movs	r2, #192	; 0xc0
   1874c:	0292      	lsls	r2, r2, #10
   1874e:	431a      	orrs	r2, r3
   18750:	68fb      	ldr	r3, [r7, #12]
   18752:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   18754:	2318      	movs	r3, #24
   18756:	e000      	b.n	1875a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   18758:	2300      	movs	r3, #0
}
   1875a:	0018      	movs	r0, r3
   1875c:	46bd      	mov	sp, r7
   1875e:	b004      	add	sp, #16
   18760:	bd80      	pop	{r7, pc}

00018762 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   18762:	b580      	push	{r7, lr}
   18764:	b084      	sub	sp, #16
   18766:	af00      	add	r7, sp, #0
   18768:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1876a:	687b      	ldr	r3, [r7, #4]
   1876c:	681b      	ldr	r3, [r3, #0]
   1876e:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   18770:	230e      	movs	r3, #14
   18772:	18fb      	adds	r3, r7, r3
   18774:	2200      	movs	r2, #0
   18776:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18778:	e00f      	b.n	1879a <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   1877a:	230e      	movs	r3, #14
   1877c:	18fb      	adds	r3, r7, r3
   1877e:	220e      	movs	r2, #14
   18780:	18ba      	adds	r2, r7, r2
   18782:	8812      	ldrh	r2, [r2, #0]
   18784:	3201      	adds	r2, #1
   18786:	801a      	strh	r2, [r3, #0]
   18788:	687b      	ldr	r3, [r7, #4]
   1878a:	891b      	ldrh	r3, [r3, #8]
   1878c:	220e      	movs	r2, #14
   1878e:	18ba      	adds	r2, r7, r2
   18790:	8812      	ldrh	r2, [r2, #0]
   18792:	429a      	cmp	r2, r3
   18794:	d301      	bcc.n	1879a <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   18796:	2312      	movs	r3, #18
   18798:	e00e      	b.n	187b8 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1879a:	68bb      	ldr	r3, [r7, #8]
   1879c:	7e1b      	ldrb	r3, [r3, #24]
   1879e:	b2db      	uxtb	r3, r3
   187a0:	001a      	movs	r2, r3
   187a2:	2301      	movs	r3, #1
   187a4:	4013      	ands	r3, r2
   187a6:	d106      	bne.n	187b6 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   187a8:	68bb      	ldr	r3, [r7, #8]
   187aa:	7e1b      	ldrb	r3, [r3, #24]
   187ac:	b2db      	uxtb	r3, r3
   187ae:	001a      	movs	r2, r3
   187b0:	2302      	movs	r3, #2
   187b2:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   187b4:	d0e1      	beq.n	1877a <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   187b6:	2300      	movs	r3, #0
}
   187b8:	0018      	movs	r0, r3
   187ba:	46bd      	mov	sp, r7
   187bc:	b004      	add	sp, #16
   187be:	bd80      	pop	{r7, pc}

000187c0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   187c0:	b590      	push	{r4, r7, lr}
   187c2:	b085      	sub	sp, #20
   187c4:	af00      	add	r7, sp, #0
   187c6:	6078      	str	r0, [r7, #4]
   187c8:	000a      	movs	r2, r1
   187ca:	1cfb      	adds	r3, r7, #3
   187cc:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   187ce:	687b      	ldr	r3, [r7, #4]
   187d0:	681b      	ldr	r3, [r3, #0]
   187d2:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   187d4:	68fb      	ldr	r3, [r7, #12]
   187d6:	685b      	ldr	r3, [r3, #4]
   187d8:	2280      	movs	r2, #128	; 0x80
   187da:	02d2      	lsls	r2, r2, #11
   187dc:	431a      	orrs	r2, r3
   187de:	68fb      	ldr	r3, [r7, #12]
   187e0:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   187e2:	1cfb      	adds	r3, r7, #3
   187e4:	781a      	ldrb	r2, [r3, #0]
   187e6:	68fb      	ldr	r3, [r7, #12]
   187e8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   187ea:	230b      	movs	r3, #11
   187ec:	18fc      	adds	r4, r7, r3
   187ee:	687b      	ldr	r3, [r7, #4]
   187f0:	0018      	movs	r0, r3
   187f2:	4b07      	ldr	r3, [pc, #28]	; (18810 <_i2c_master_send_hs_master_code+0x50>)
   187f4:	4798      	blx	r3
   187f6:	0003      	movs	r3, r0
   187f8:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   187fa:	68fb      	ldr	r3, [r7, #12]
   187fc:	2201      	movs	r2, #1
   187fe:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   18800:	230b      	movs	r3, #11
   18802:	18fb      	adds	r3, r7, r3
   18804:	781b      	ldrb	r3, [r3, #0]
}
   18806:	0018      	movs	r0, r3
   18808:	46bd      	mov	sp, r7
   1880a:	b005      	add	sp, #20
   1880c:	bd90      	pop	{r4, r7, pc}
   1880e:	46c0      	nop			; (mov r8, r8)
   18810:	00018763 	.word	0x00018763

00018814 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   18814:	b580      	push	{r7, lr}
   18816:	af00      	add	r7, sp, #0
   18818:	2000      	movs	r0, #0
   1881a:	4b02      	ldr	r3, [pc, #8]	; (18824 <TC3_Handler+0x10>)
   1881c:	4798      	blx	r3
   1881e:	46c0      	nop			; (mov r8, r8)
   18820:	46bd      	mov	sp, r7
   18822:	bd80      	pop	{r7, pc}
   18824:	00018851 	.word	0x00018851

00018828 <TC4_Handler>:
   18828:	b580      	push	{r7, lr}
   1882a:	af00      	add	r7, sp, #0
   1882c:	2001      	movs	r0, #1
   1882e:	4b02      	ldr	r3, [pc, #8]	; (18838 <TC4_Handler+0x10>)
   18830:	4798      	blx	r3
   18832:	46c0      	nop			; (mov r8, r8)
   18834:	46bd      	mov	sp, r7
   18836:	bd80      	pop	{r7, pc}
   18838:	00018851 	.word	0x00018851

0001883c <TC5_Handler>:
   1883c:	b580      	push	{r7, lr}
   1883e:	af00      	add	r7, sp, #0
   18840:	2002      	movs	r0, #2
   18842:	4b02      	ldr	r3, [pc, #8]	; (1884c <TC5_Handler+0x10>)
   18844:	4798      	blx	r3
   18846:	46c0      	nop			; (mov r8, r8)
   18848:	46bd      	mov	sp, r7
   1884a:	bd80      	pop	{r7, pc}
   1884c:	00018851 	.word	0x00018851

00018850 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   18850:	b580      	push	{r7, lr}
   18852:	b084      	sub	sp, #16
   18854:	af00      	add	r7, sp, #0
   18856:	0002      	movs	r2, r0
   18858:	1dfb      	adds	r3, r7, #7
   1885a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   1885c:	1dfb      	adds	r3, r7, #7
   1885e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   18860:	4b28      	ldr	r3, [pc, #160]	; (18904 <_tc_interrupt_handler+0xb4>)
   18862:	0092      	lsls	r2, r2, #2
   18864:	58d3      	ldr	r3, [r2, r3]
   18866:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18868:	68fb      	ldr	r3, [r7, #12]
   1886a:	681b      	ldr	r3, [r3, #0]
   1886c:	7b9b      	ldrb	r3, [r3, #14]
   1886e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   18870:	68fa      	ldr	r2, [r7, #12]
   18872:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18874:	4013      	ands	r3, r2
   18876:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   18878:	68fb      	ldr	r3, [r7, #12]
   1887a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1887c:	230b      	movs	r3, #11
   1887e:	18fb      	adds	r3, r7, r3
   18880:	400a      	ands	r2, r1
   18882:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   18884:	230b      	movs	r3, #11
   18886:	18fb      	adds	r3, r7, r3
   18888:	781b      	ldrb	r3, [r3, #0]
   1888a:	2201      	movs	r2, #1
   1888c:	4013      	ands	r3, r2
   1888e:	d008      	beq.n	188a2 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   18890:	68fb      	ldr	r3, [r7, #12]
   18892:	689b      	ldr	r3, [r3, #8]
   18894:	68fa      	ldr	r2, [r7, #12]
   18896:	0010      	movs	r0, r2
   18898:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   1889a:	68fb      	ldr	r3, [r7, #12]
   1889c:	681b      	ldr	r3, [r3, #0]
   1889e:	2201      	movs	r2, #1
   188a0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   188a2:	230b      	movs	r3, #11
   188a4:	18fb      	adds	r3, r7, r3
   188a6:	781b      	ldrb	r3, [r3, #0]
   188a8:	2202      	movs	r2, #2
   188aa:	4013      	ands	r3, r2
   188ac:	d008      	beq.n	188c0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   188ae:	68fb      	ldr	r3, [r7, #12]
   188b0:	68db      	ldr	r3, [r3, #12]
   188b2:	68fa      	ldr	r2, [r7, #12]
   188b4:	0010      	movs	r0, r2
   188b6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   188b8:	68fb      	ldr	r3, [r7, #12]
   188ba:	681b      	ldr	r3, [r3, #0]
   188bc:	2202      	movs	r2, #2
   188be:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   188c0:	230b      	movs	r3, #11
   188c2:	18fb      	adds	r3, r7, r3
   188c4:	781b      	ldrb	r3, [r3, #0]
   188c6:	2210      	movs	r2, #16
   188c8:	4013      	ands	r3, r2
   188ca:	d008      	beq.n	188de <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   188cc:	68fb      	ldr	r3, [r7, #12]
   188ce:	691b      	ldr	r3, [r3, #16]
   188d0:	68fa      	ldr	r2, [r7, #12]
   188d2:	0010      	movs	r0, r2
   188d4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   188d6:	68fb      	ldr	r3, [r7, #12]
   188d8:	681b      	ldr	r3, [r3, #0]
   188da:	2210      	movs	r2, #16
   188dc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   188de:	230b      	movs	r3, #11
   188e0:	18fb      	adds	r3, r7, r3
   188e2:	781b      	ldrb	r3, [r3, #0]
   188e4:	2220      	movs	r2, #32
   188e6:	4013      	ands	r3, r2
   188e8:	d008      	beq.n	188fc <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   188ea:	68fb      	ldr	r3, [r7, #12]
   188ec:	695b      	ldr	r3, [r3, #20]
   188ee:	68fa      	ldr	r2, [r7, #12]
   188f0:	0010      	movs	r0, r2
   188f2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   188f4:	68fb      	ldr	r3, [r7, #12]
   188f6:	681b      	ldr	r3, [r3, #0]
   188f8:	2220      	movs	r2, #32
   188fa:	739a      	strb	r2, [r3, #14]
	}
}
   188fc:	46c0      	nop			; (mov r8, r8)
   188fe:	46bd      	mov	sp, r7
   18900:	b004      	add	sp, #16
   18902:	bd80      	pop	{r7, pc}
   18904:	20004a84 	.word	0x20004a84

00018908 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   18908:	b580      	push	{r7, lr}
   1890a:	b084      	sub	sp, #16
   1890c:	af00      	add	r7, sp, #0
   1890e:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   18910:	2300      	movs	r3, #0
   18912:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   18914:	687b      	ldr	r3, [r7, #4]
   18916:	2b00      	cmp	r3, #0
   18918:	d101      	bne.n	1891e <FreeRTOS_CLIRegisterCommand+0x16>
   1891a:	b672      	cpsid	i
   1891c:	e7fe      	b.n	1891c <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   1891e:	2008      	movs	r0, #8
   18920:	4b11      	ldr	r3, [pc, #68]	; (18968 <FreeRTOS_CLIRegisterCommand+0x60>)
   18922:	4798      	blx	r3
   18924:	0003      	movs	r3, r0
   18926:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   18928:	68bb      	ldr	r3, [r7, #8]
   1892a:	2b00      	cmp	r3, #0
   1892c:	d101      	bne.n	18932 <FreeRTOS_CLIRegisterCommand+0x2a>
   1892e:	b672      	cpsid	i
   18930:	e7fe      	b.n	18930 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   18932:	68bb      	ldr	r3, [r7, #8]
   18934:	2b00      	cmp	r3, #0
   18936:	d012      	beq.n	1895e <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   18938:	4b0c      	ldr	r3, [pc, #48]	; (1896c <FreeRTOS_CLIRegisterCommand+0x64>)
   1893a:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   1893c:	68bb      	ldr	r3, [r7, #8]
   1893e:	687a      	ldr	r2, [r7, #4]
   18940:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   18942:	68bb      	ldr	r3, [r7, #8]
   18944:	2200      	movs	r2, #0
   18946:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   18948:	4b09      	ldr	r3, [pc, #36]	; (18970 <FreeRTOS_CLIRegisterCommand+0x68>)
   1894a:	681b      	ldr	r3, [r3, #0]
   1894c:	68ba      	ldr	r2, [r7, #8]
   1894e:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   18950:	4b07      	ldr	r3, [pc, #28]	; (18970 <FreeRTOS_CLIRegisterCommand+0x68>)
   18952:	68ba      	ldr	r2, [r7, #8]
   18954:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   18956:	4b07      	ldr	r3, [pc, #28]	; (18974 <FreeRTOS_CLIRegisterCommand+0x6c>)
   18958:	4798      	blx	r3

		xReturn = pdPASS;
   1895a:	2301      	movs	r3, #1
   1895c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   1895e:	68fb      	ldr	r3, [r7, #12]
}
   18960:	0018      	movs	r0, r3
   18962:	46bd      	mov	sp, r7
   18964:	b004      	add	sp, #16
   18966:	bd80      	pop	{r7, pc}
   18968:	0001ad21 	.word	0x0001ad21
   1896c:	0001abe9 	.word	0x0001abe9
   18970:	20000100 	.word	0x20000100
   18974:	0001ac0d 	.word	0x0001ac0d

00018978 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   18978:	b580      	push	{r7, lr}
   1897a:	b088      	sub	sp, #32
   1897c:	af00      	add	r7, sp, #0
   1897e:	60f8      	str	r0, [r7, #12]
   18980:	60b9      	str	r1, [r7, #8]
   18982:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   18984:	2301      	movs	r3, #1
   18986:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   18988:	4b3d      	ldr	r3, [pc, #244]	; (18a80 <FreeRTOS_CLIProcessCommand+0x108>)
   1898a:	681b      	ldr	r3, [r3, #0]
   1898c:	2b00      	cmp	r3, #0
   1898e:	d144      	bne.n	18a1a <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18990:	4b3b      	ldr	r3, [pc, #236]	; (18a80 <FreeRTOS_CLIProcessCommand+0x108>)
   18992:	4a3c      	ldr	r2, [pc, #240]	; (18a84 <FreeRTOS_CLIProcessCommand+0x10c>)
   18994:	601a      	str	r2, [r3, #0]
   18996:	e03a      	b.n	18a0e <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   18998:	4b39      	ldr	r3, [pc, #228]	; (18a80 <FreeRTOS_CLIProcessCommand+0x108>)
   1899a:	681b      	ldr	r3, [r3, #0]
   1899c:	681b      	ldr	r3, [r3, #0]
   1899e:	681b      	ldr	r3, [r3, #0]
   189a0:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   189a2:	69bb      	ldr	r3, [r7, #24]
   189a4:	0018      	movs	r0, r3
   189a6:	4b38      	ldr	r3, [pc, #224]	; (18a88 <FreeRTOS_CLIProcessCommand+0x110>)
   189a8:	4798      	blx	r3
   189aa:	0003      	movs	r3, r0
   189ac:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   189ae:	68fa      	ldr	r2, [r7, #12]
   189b0:	697b      	ldr	r3, [r7, #20]
   189b2:	18d3      	adds	r3, r2, r3
   189b4:	781b      	ldrb	r3, [r3, #0]
   189b6:	2b20      	cmp	r3, #32
   189b8:	d005      	beq.n	189c6 <FreeRTOS_CLIProcessCommand+0x4e>
   189ba:	68fa      	ldr	r2, [r7, #12]
   189bc:	697b      	ldr	r3, [r7, #20]
   189be:	18d3      	adds	r3, r2, r3
   189c0:	781b      	ldrb	r3, [r3, #0]
   189c2:	2b00      	cmp	r3, #0
   189c4:	d11e      	bne.n	18a04 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   189c6:	697a      	ldr	r2, [r7, #20]
   189c8:	69b9      	ldr	r1, [r7, #24]
   189ca:	68fb      	ldr	r3, [r7, #12]
   189cc:	0018      	movs	r0, r3
   189ce:	4b2f      	ldr	r3, [pc, #188]	; (18a8c <FreeRTOS_CLIProcessCommand+0x114>)
   189d0:	4798      	blx	r3
   189d2:	1e03      	subs	r3, r0, #0
   189d4:	d116      	bne.n	18a04 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   189d6:	4b2a      	ldr	r3, [pc, #168]	; (18a80 <FreeRTOS_CLIProcessCommand+0x108>)
   189d8:	681b      	ldr	r3, [r3, #0]
   189da:	681b      	ldr	r3, [r3, #0]
   189dc:	7b1b      	ldrb	r3, [r3, #12]
   189de:	b25b      	sxtb	r3, r3
   189e0:	2b00      	cmp	r3, #0
   189e2:	db19      	blt.n	18a18 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   189e4:	68fb      	ldr	r3, [r7, #12]
   189e6:	0018      	movs	r0, r3
   189e8:	4b29      	ldr	r3, [pc, #164]	; (18a90 <FreeRTOS_CLIProcessCommand+0x118>)
   189ea:	4798      	blx	r3
   189ec:	0003      	movs	r3, r0
   189ee:	001a      	movs	r2, r3
   189f0:	4b23      	ldr	r3, [pc, #140]	; (18a80 <FreeRTOS_CLIProcessCommand+0x108>)
   189f2:	681b      	ldr	r3, [r3, #0]
   189f4:	681b      	ldr	r3, [r3, #0]
   189f6:	7b1b      	ldrb	r3, [r3, #12]
   189f8:	b25b      	sxtb	r3, r3
   189fa:	429a      	cmp	r2, r3
   189fc:	d00c      	beq.n	18a18 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   189fe:	2300      	movs	r3, #0
   18a00:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   18a02:	e009      	b.n	18a18 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18a04:	4b1e      	ldr	r3, [pc, #120]	; (18a80 <FreeRTOS_CLIProcessCommand+0x108>)
   18a06:	681b      	ldr	r3, [r3, #0]
   18a08:	685a      	ldr	r2, [r3, #4]
   18a0a:	4b1d      	ldr	r3, [pc, #116]	; (18a80 <FreeRTOS_CLIProcessCommand+0x108>)
   18a0c:	601a      	str	r2, [r3, #0]
   18a0e:	4b1c      	ldr	r3, [pc, #112]	; (18a80 <FreeRTOS_CLIProcessCommand+0x108>)
   18a10:	681b      	ldr	r3, [r3, #0]
   18a12:	2b00      	cmp	r3, #0
   18a14:	d1c0      	bne.n	18998 <FreeRTOS_CLIProcessCommand+0x20>
   18a16:	e000      	b.n	18a1a <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   18a18:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   18a1a:	4b19      	ldr	r3, [pc, #100]	; (18a80 <FreeRTOS_CLIProcessCommand+0x108>)
   18a1c:	681b      	ldr	r3, [r3, #0]
   18a1e:	2b00      	cmp	r3, #0
   18a20:	d00c      	beq.n	18a3c <FreeRTOS_CLIProcessCommand+0xc4>
   18a22:	69fb      	ldr	r3, [r7, #28]
   18a24:	2b00      	cmp	r3, #0
   18a26:	d109      	bne.n	18a3c <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18a28:	687a      	ldr	r2, [r7, #4]
   18a2a:	491a      	ldr	r1, [pc, #104]	; (18a94 <FreeRTOS_CLIProcessCommand+0x11c>)
   18a2c:	68bb      	ldr	r3, [r7, #8]
   18a2e:	0018      	movs	r0, r3
   18a30:	4b19      	ldr	r3, [pc, #100]	; (18a98 <FreeRTOS_CLIProcessCommand+0x120>)
   18a32:	4798      	blx	r3
		pxCommand = NULL;
   18a34:	4b12      	ldr	r3, [pc, #72]	; (18a80 <FreeRTOS_CLIProcessCommand+0x108>)
   18a36:	2200      	movs	r2, #0
   18a38:	601a      	str	r2, [r3, #0]
   18a3a:	e01c      	b.n	18a76 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   18a3c:	4b10      	ldr	r3, [pc, #64]	; (18a80 <FreeRTOS_CLIProcessCommand+0x108>)
   18a3e:	681b      	ldr	r3, [r3, #0]
   18a40:	2b00      	cmp	r3, #0
   18a42:	d010      	beq.n	18a66 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   18a44:	4b0e      	ldr	r3, [pc, #56]	; (18a80 <FreeRTOS_CLIProcessCommand+0x108>)
   18a46:	681b      	ldr	r3, [r3, #0]
   18a48:	681b      	ldr	r3, [r3, #0]
   18a4a:	689b      	ldr	r3, [r3, #8]
   18a4c:	68fa      	ldr	r2, [r7, #12]
   18a4e:	6879      	ldr	r1, [r7, #4]
   18a50:	68b8      	ldr	r0, [r7, #8]
   18a52:	4798      	blx	r3
   18a54:	0003      	movs	r3, r0
   18a56:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   18a58:	69fb      	ldr	r3, [r7, #28]
   18a5a:	2b00      	cmp	r3, #0
   18a5c:	d10b      	bne.n	18a76 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   18a5e:	4b08      	ldr	r3, [pc, #32]	; (18a80 <FreeRTOS_CLIProcessCommand+0x108>)
   18a60:	2200      	movs	r2, #0
   18a62:	601a      	str	r2, [r3, #0]
   18a64:	e007      	b.n	18a76 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18a66:	687a      	ldr	r2, [r7, #4]
   18a68:	490c      	ldr	r1, [pc, #48]	; (18a9c <FreeRTOS_CLIProcessCommand+0x124>)
   18a6a:	68bb      	ldr	r3, [r7, #8]
   18a6c:	0018      	movs	r0, r3
   18a6e:	4b0a      	ldr	r3, [pc, #40]	; (18a98 <FreeRTOS_CLIProcessCommand+0x120>)
   18a70:	4798      	blx	r3
		xReturn = pdFALSE;
   18a72:	2300      	movs	r3, #0
   18a74:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   18a76:	69fb      	ldr	r3, [r7, #28]
}
   18a78:	0018      	movs	r0, r3
   18a7a:	46bd      	mov	sp, r7
   18a7c:	b008      	add	sp, #32
   18a7e:	bd80      	pop	{r7, pc}
   18a80:	20000cd4 	.word	0x20000cd4
   18a84:	200000f8 	.word	0x200000f8
   18a88:	000359c7 	.word	0x000359c7
   18a8c:	000359d5 	.word	0x000359d5
   18a90:	00018b01 	.word	0x00018b01
   18a94:	00037d30 	.word	0x00037d30
   18a98:	000359f7 	.word	0x000359f7
   18a9c:	00037d88 	.word	0x00037d88

00018aa0 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   18aa0:	b580      	push	{r7, lr}
   18aa2:	b086      	sub	sp, #24
   18aa4:	af00      	add	r7, sp, #0
   18aa6:	60f8      	str	r0, [r7, #12]
   18aa8:	60b9      	str	r1, [r7, #8]
   18aaa:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   18aac:	4b11      	ldr	r3, [pc, #68]	; (18af4 <prvHelpCommand+0x54>)
   18aae:	681b      	ldr	r3, [r3, #0]
   18ab0:	2b00      	cmp	r3, #0
   18ab2:	d102      	bne.n	18aba <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   18ab4:	4b0f      	ldr	r3, [pc, #60]	; (18af4 <prvHelpCommand+0x54>)
   18ab6:	4a10      	ldr	r2, [pc, #64]	; (18af8 <prvHelpCommand+0x58>)
   18ab8:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   18aba:	4b0e      	ldr	r3, [pc, #56]	; (18af4 <prvHelpCommand+0x54>)
   18abc:	681b      	ldr	r3, [r3, #0]
   18abe:	681b      	ldr	r3, [r3, #0]
   18ac0:	6859      	ldr	r1, [r3, #4]
   18ac2:	68ba      	ldr	r2, [r7, #8]
   18ac4:	68fb      	ldr	r3, [r7, #12]
   18ac6:	0018      	movs	r0, r3
   18ac8:	4b0c      	ldr	r3, [pc, #48]	; (18afc <prvHelpCommand+0x5c>)
   18aca:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   18acc:	4b09      	ldr	r3, [pc, #36]	; (18af4 <prvHelpCommand+0x54>)
   18ace:	681b      	ldr	r3, [r3, #0]
   18ad0:	685a      	ldr	r2, [r3, #4]
   18ad2:	4b08      	ldr	r3, [pc, #32]	; (18af4 <prvHelpCommand+0x54>)
   18ad4:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   18ad6:	4b07      	ldr	r3, [pc, #28]	; (18af4 <prvHelpCommand+0x54>)
   18ad8:	681b      	ldr	r3, [r3, #0]
   18ada:	2b00      	cmp	r3, #0
   18adc:	d102      	bne.n	18ae4 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   18ade:	2300      	movs	r3, #0
   18ae0:	617b      	str	r3, [r7, #20]
   18ae2:	e001      	b.n	18ae8 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   18ae4:	2301      	movs	r3, #1
   18ae6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   18ae8:	697b      	ldr	r3, [r7, #20]
}
   18aea:	0018      	movs	r0, r3
   18aec:	46bd      	mov	sp, r7
   18aee:	b006      	add	sp, #24
   18af0:	bd80      	pop	{r7, pc}
   18af2:	46c0      	nop			; (mov r8, r8)
   18af4:	20000cd8 	.word	0x20000cd8
   18af8:	200000f8 	.word	0x200000f8
   18afc:	000359f7 	.word	0x000359f7

00018b00 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   18b00:	b580      	push	{r7, lr}
   18b02:	b084      	sub	sp, #16
   18b04:	af00      	add	r7, sp, #0
   18b06:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   18b08:	230f      	movs	r3, #15
   18b0a:	18fb      	adds	r3, r7, r3
   18b0c:	2200      	movs	r2, #0
   18b0e:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   18b10:	2300      	movs	r3, #0
   18b12:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   18b14:	e018      	b.n	18b48 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   18b16:	687b      	ldr	r3, [r7, #4]
   18b18:	781b      	ldrb	r3, [r3, #0]
   18b1a:	2b20      	cmp	r3, #32
   18b1c:	d10f      	bne.n	18b3e <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   18b1e:	68bb      	ldr	r3, [r7, #8]
   18b20:	2b01      	cmp	r3, #1
   18b22:	d00e      	beq.n	18b42 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   18b24:	230f      	movs	r3, #15
   18b26:	18fb      	adds	r3, r7, r3
   18b28:	781b      	ldrb	r3, [r3, #0]
   18b2a:	b25b      	sxtb	r3, r3
   18b2c:	b2db      	uxtb	r3, r3
   18b2e:	3301      	adds	r3, #1
   18b30:	b2da      	uxtb	r2, r3
   18b32:	230f      	movs	r3, #15
   18b34:	18fb      	adds	r3, r7, r3
   18b36:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   18b38:	2301      	movs	r3, #1
   18b3a:	60bb      	str	r3, [r7, #8]
   18b3c:	e001      	b.n	18b42 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   18b3e:	2300      	movs	r3, #0
   18b40:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   18b42:	687b      	ldr	r3, [r7, #4]
   18b44:	3301      	adds	r3, #1
   18b46:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   18b48:	687b      	ldr	r3, [r7, #4]
   18b4a:	781b      	ldrb	r3, [r3, #0]
   18b4c:	2b00      	cmp	r3, #0
   18b4e:	d1e2      	bne.n	18b16 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   18b50:	68bb      	ldr	r3, [r7, #8]
   18b52:	2b01      	cmp	r3, #1
   18b54:	d109      	bne.n	18b6a <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   18b56:	230f      	movs	r3, #15
   18b58:	18fb      	adds	r3, r7, r3
   18b5a:	781b      	ldrb	r3, [r3, #0]
   18b5c:	b25b      	sxtb	r3, r3
   18b5e:	b2db      	uxtb	r3, r3
   18b60:	3b01      	subs	r3, #1
   18b62:	b2da      	uxtb	r2, r3
   18b64:	230f      	movs	r3, #15
   18b66:	18fb      	adds	r3, r7, r3
   18b68:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   18b6a:	230f      	movs	r3, #15
   18b6c:	18fb      	adds	r3, r7, r3
   18b6e:	781b      	ldrb	r3, [r3, #0]
   18b70:	b25b      	sxtb	r3, r3
}
   18b72:	0018      	movs	r0, r3
   18b74:	46bd      	mov	sp, r7
   18b76:	b004      	add	sp, #16
   18b78:	bd80      	pop	{r7, pc}
	...

00018b7c <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   18b7c:	b580      	push	{r7, lr}
   18b7e:	b082      	sub	sp, #8
   18b80:	af00      	add	r7, sp, #0
   18b82:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   18b84:	687b      	ldr	r3, [r7, #4]
   18b86:	0018      	movs	r0, r3
   18b88:	4b03      	ldr	r3, [pc, #12]	; (18b98 <prvTraceGetQueueNumber+0x1c>)
   18b8a:	4798      	blx	r3
   18b8c:	0003      	movs	r3, r0
}
   18b8e:	0018      	movs	r0, r3
   18b90:	46bd      	mov	sp, r7
   18b92:	b002      	add	sp, #8
   18b94:	bd80      	pop	{r7, pc}
   18b96:	46c0      	nop			; (mov r8, r8)
   18b98:	0001c345 	.word	0x0001c345

00018b9c <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   18b9c:	b580      	push	{r7, lr}
   18b9e:	b082      	sub	sp, #8
   18ba0:	af00      	add	r7, sp, #0
   18ba2:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   18ba4:	687b      	ldr	r3, [r7, #4]
   18ba6:	0018      	movs	r0, r3
   18ba8:	4b03      	ldr	r3, [pc, #12]	; (18bb8 <prvTraceGetQueueType+0x1c>)
   18baa:	4798      	blx	r3
   18bac:	0003      	movs	r3, r0
}
   18bae:	0018      	movs	r0, r3
   18bb0:	46bd      	mov	sp, r7
   18bb2:	b002      	add	sp, #8
   18bb4:	bd80      	pop	{r7, pc}
   18bb6:	46c0      	nop			; (mov r8, r8)
   18bb8:	0001c371 	.word	0x0001c371

00018bbc <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   18bbc:	b580      	push	{r7, lr}
   18bbe:	b082      	sub	sp, #8
   18bc0:	af00      	add	r7, sp, #0
   18bc2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   18bc4:	687b      	ldr	r3, [r7, #4]
   18bc6:	0018      	movs	r0, r3
   18bc8:	4b03      	ldr	r3, [pc, #12]	; (18bd8 <prvTraceGetTaskNumberLow16+0x1c>)
   18bca:	4798      	blx	r3
   18bcc:	0003      	movs	r3, r0
   18bce:	b29b      	uxth	r3, r3
}
   18bd0:	0018      	movs	r0, r3
   18bd2:	46bd      	mov	sp, r7
   18bd4:	b002      	add	sp, #8
   18bd6:	bd80      	pop	{r7, pc}
   18bd8:	0001d6a1 	.word	0x0001d6a1

00018bdc <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   18bdc:	b580      	push	{r7, lr}
   18bde:	b082      	sub	sp, #8
   18be0:	af00      	add	r7, sp, #0
   18be2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   18be4:	687b      	ldr	r3, [r7, #4]
   18be6:	0018      	movs	r0, r3
   18be8:	4b04      	ldr	r3, [pc, #16]	; (18bfc <prvTraceGetTaskNumberHigh16+0x20>)
   18bea:	4798      	blx	r3
   18bec:	0003      	movs	r3, r0
   18bee:	0c1b      	lsrs	r3, r3, #16
   18bf0:	b29b      	uxth	r3, r3
}
   18bf2:	0018      	movs	r0, r3
   18bf4:	46bd      	mov	sp, r7
   18bf6:	b002      	add	sp, #8
   18bf8:	bd80      	pop	{r7, pc}
   18bfa:	46c0      	nop			; (mov r8, r8)
   18bfc:	0001d6a1 	.word	0x0001d6a1

00018c00 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   18c00:	b580      	push	{r7, lr}
   18c02:	b082      	sub	sp, #8
   18c04:	af00      	add	r7, sp, #0
   18c06:	6078      	str	r0, [r7, #4]
   18c08:	000a      	movs	r2, r1
   18c0a:	1cbb      	adds	r3, r7, #2
   18c0c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   18c0e:	687b      	ldr	r3, [r7, #4]
   18c10:	0018      	movs	r0, r3
   18c12:	4b08      	ldr	r3, [pc, #32]	; (18c34 <prvTraceSetTaskNumberLow16+0x34>)
   18c14:	4798      	blx	r3
   18c16:	0003      	movs	r3, r0
   18c18:	0c1b      	lsrs	r3, r3, #16
   18c1a:	041a      	lsls	r2, r3, #16
   18c1c:	1cbb      	adds	r3, r7, #2
   18c1e:	881b      	ldrh	r3, [r3, #0]
   18c20:	431a      	orrs	r2, r3
   18c22:	687b      	ldr	r3, [r7, #4]
   18c24:	0011      	movs	r1, r2
   18c26:	0018      	movs	r0, r3
   18c28:	4b03      	ldr	r3, [pc, #12]	; (18c38 <prvTraceSetTaskNumberLow16+0x38>)
   18c2a:	4798      	blx	r3
}
   18c2c:	46c0      	nop			; (mov r8, r8)
   18c2e:	46bd      	mov	sp, r7
   18c30:	b002      	add	sp, #8
   18c32:	bd80      	pop	{r7, pc}
   18c34:	0001d6a1 	.word	0x0001d6a1
   18c38:	0001d6c9 	.word	0x0001d6c9

00018c3c <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   18c3c:	b580      	push	{r7, lr}
   18c3e:	b082      	sub	sp, #8
   18c40:	af00      	add	r7, sp, #0
   18c42:	6078      	str	r0, [r7, #4]
   18c44:	000a      	movs	r2, r1
   18c46:	1cbb      	adds	r3, r7, #2
   18c48:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   18c4a:	687b      	ldr	r3, [r7, #4]
   18c4c:	0018      	movs	r0, r3
   18c4e:	4b09      	ldr	r3, [pc, #36]	; (18c74 <prvTraceSetTaskNumberHigh16+0x38>)
   18c50:	4798      	blx	r3
   18c52:	0003      	movs	r3, r0
   18c54:	041b      	lsls	r3, r3, #16
   18c56:	0c1a      	lsrs	r2, r3, #16
   18c58:	1cbb      	adds	r3, r7, #2
   18c5a:	881b      	ldrh	r3, [r3, #0]
   18c5c:	041b      	lsls	r3, r3, #16
   18c5e:	431a      	orrs	r2, r3
   18c60:	687b      	ldr	r3, [r7, #4]
   18c62:	0011      	movs	r1, r2
   18c64:	0018      	movs	r0, r3
   18c66:	4b04      	ldr	r3, [pc, #16]	; (18c78 <prvTraceSetTaskNumberHigh16+0x3c>)
   18c68:	4798      	blx	r3
}
   18c6a:	46c0      	nop			; (mov r8, r8)
   18c6c:	46bd      	mov	sp, r7
   18c6e:	b002      	add	sp, #8
   18c70:	bd80      	pop	{r7, pc}
   18c72:	46c0      	nop			; (mov r8, r8)
   18c74:	0001d6a1 	.word	0x0001d6a1
   18c78:	0001d6c9 	.word	0x0001d6c9

00018c7c <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   18c7c:	b580      	push	{r7, lr}
   18c7e:	b082      	sub	sp, #8
   18c80:	af00      	add	r7, sp, #0
   18c82:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   18c84:	687b      	ldr	r3, [r7, #4]
   18c86:	0018      	movs	r0, r3
   18c88:	4b03      	ldr	r3, [pc, #12]	; (18c98 <prvTraceGetQueueNumberLow16+0x1c>)
   18c8a:	4798      	blx	r3
   18c8c:	0003      	movs	r3, r0
   18c8e:	b29b      	uxth	r3, r3
}
   18c90:	0018      	movs	r0, r3
   18c92:	46bd      	mov	sp, r7
   18c94:	b002      	add	sp, #8
   18c96:	bd80      	pop	{r7, pc}
   18c98:	00018b7d 	.word	0x00018b7d

00018c9c <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   18c9c:	b580      	push	{r7, lr}
   18c9e:	b082      	sub	sp, #8
   18ca0:	af00      	add	r7, sp, #0
   18ca2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   18ca4:	687b      	ldr	r3, [r7, #4]
   18ca6:	0018      	movs	r0, r3
   18ca8:	4b04      	ldr	r3, [pc, #16]	; (18cbc <prvTraceGetQueueNumberHigh16+0x20>)
   18caa:	4798      	blx	r3
   18cac:	0003      	movs	r3, r0
   18cae:	0c1b      	lsrs	r3, r3, #16
   18cb0:	b29b      	uxth	r3, r3
}
   18cb2:	0018      	movs	r0, r3
   18cb4:	46bd      	mov	sp, r7
   18cb6:	b002      	add	sp, #8
   18cb8:	bd80      	pop	{r7, pc}
   18cba:	46c0      	nop			; (mov r8, r8)
   18cbc:	00018b7d 	.word	0x00018b7d

00018cc0 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   18cc0:	b580      	push	{r7, lr}
   18cc2:	b082      	sub	sp, #8
   18cc4:	af00      	add	r7, sp, #0
   18cc6:	6078      	str	r0, [r7, #4]
   18cc8:	000a      	movs	r2, r1
   18cca:	1cbb      	adds	r3, r7, #2
   18ccc:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   18cce:	687b      	ldr	r3, [r7, #4]
   18cd0:	0018      	movs	r0, r3
   18cd2:	4b08      	ldr	r3, [pc, #32]	; (18cf4 <prvTraceSetQueueNumberLow16+0x34>)
   18cd4:	4798      	blx	r3
   18cd6:	0003      	movs	r3, r0
   18cd8:	0c1b      	lsrs	r3, r3, #16
   18cda:	041a      	lsls	r2, r3, #16
   18cdc:	1cbb      	adds	r3, r7, #2
   18cde:	881b      	ldrh	r3, [r3, #0]
   18ce0:	431a      	orrs	r2, r3
   18ce2:	687b      	ldr	r3, [r7, #4]
   18ce4:	0011      	movs	r1, r2
   18ce6:	0018      	movs	r0, r3
   18ce8:	4b03      	ldr	r3, [pc, #12]	; (18cf8 <prvTraceSetQueueNumberLow16+0x38>)
   18cea:	4798      	blx	r3
}
   18cec:	46c0      	nop			; (mov r8, r8)
   18cee:	46bd      	mov	sp, r7
   18cf0:	b002      	add	sp, #8
   18cf2:	bd80      	pop	{r7, pc}
   18cf4:	00018b7d 	.word	0x00018b7d
   18cf8:	0001c359 	.word	0x0001c359

00018cfc <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   18cfc:	b580      	push	{r7, lr}
   18cfe:	b082      	sub	sp, #8
   18d00:	af00      	add	r7, sp, #0
   18d02:	6078      	str	r0, [r7, #4]
   18d04:	000a      	movs	r2, r1
   18d06:	1cbb      	adds	r3, r7, #2
   18d08:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   18d0a:	687b      	ldr	r3, [r7, #4]
   18d0c:	0018      	movs	r0, r3
   18d0e:	4b09      	ldr	r3, [pc, #36]	; (18d34 <prvTraceSetQueueNumberHigh16+0x38>)
   18d10:	4798      	blx	r3
   18d12:	0003      	movs	r3, r0
   18d14:	041b      	lsls	r3, r3, #16
   18d16:	0c1a      	lsrs	r2, r3, #16
   18d18:	1cbb      	adds	r3, r7, #2
   18d1a:	881b      	ldrh	r3, [r3, #0]
   18d1c:	041b      	lsls	r3, r3, #16
   18d1e:	431a      	orrs	r2, r3
   18d20:	687b      	ldr	r3, [r7, #4]
   18d22:	0011      	movs	r1, r2
   18d24:	0018      	movs	r0, r3
   18d26:	4b04      	ldr	r3, [pc, #16]	; (18d38 <prvTraceSetQueueNumberHigh16+0x3c>)
   18d28:	4798      	blx	r3
}
   18d2a:	46c0      	nop			; (mov r8, r8)
   18d2c:	46bd      	mov	sp, r7
   18d2e:	b002      	add	sp, #8
   18d30:	bd80      	pop	{r7, pc}
   18d32:	46c0      	nop			; (mov r8, r8)
   18d34:	00018b7d 	.word	0x00018b7d
   18d38:	0001c359 	.word	0x0001c359

00018d3c <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   18d3c:	b580      	push	{r7, lr}
   18d3e:	b084      	sub	sp, #16
   18d40:	af00      	add	r7, sp, #0
   18d42:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   18d44:	2300      	movs	r3, #0
   18d46:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18d48:	2300      	movs	r3, #0
   18d4a:	60bb      	str	r3, [r7, #8]
   18d4c:	e018      	b.n	18d80 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   18d4e:	4b14      	ldr	r3, [pc, #80]	; (18da0 <prvAddTaskToStackMonitor+0x64>)
   18d50:	68ba      	ldr	r2, [r7, #8]
   18d52:	00d2      	lsls	r2, r2, #3
   18d54:	58d3      	ldr	r3, [r2, r3]
   18d56:	2b00      	cmp	r3, #0
   18d58:	d10f      	bne.n	18d7a <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   18d5a:	4b11      	ldr	r3, [pc, #68]	; (18da0 <prvAddTaskToStackMonitor+0x64>)
   18d5c:	68ba      	ldr	r2, [r7, #8]
   18d5e:	00d2      	lsls	r2, r2, #3
   18d60:	6879      	ldr	r1, [r7, #4]
   18d62:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   18d64:	4a0e      	ldr	r2, [pc, #56]	; (18da0 <prvAddTaskToStackMonitor+0x64>)
   18d66:	68bb      	ldr	r3, [r7, #8]
   18d68:	00db      	lsls	r3, r3, #3
   18d6a:	18d3      	adds	r3, r2, r3
   18d6c:	3304      	adds	r3, #4
   18d6e:	2201      	movs	r2, #1
   18d70:	4252      	negs	r2, r2
   18d72:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   18d74:	2301      	movs	r3, #1
   18d76:	60fb      	str	r3, [r7, #12]
			break;
   18d78:	e005      	b.n	18d86 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18d7a:	68bb      	ldr	r3, [r7, #8]
   18d7c:	3301      	adds	r3, #1
   18d7e:	60bb      	str	r3, [r7, #8]
   18d80:	68bb      	ldr	r3, [r7, #8]
   18d82:	2b09      	cmp	r3, #9
   18d84:	dde3      	ble.n	18d4e <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   18d86:	68fb      	ldr	r3, [r7, #12]
   18d88:	2b00      	cmp	r3, #0
   18d8a:	d104      	bne.n	18d96 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   18d8c:	4b05      	ldr	r3, [pc, #20]	; (18da4 <prvAddTaskToStackMonitor+0x68>)
   18d8e:	681b      	ldr	r3, [r3, #0]
   18d90:	1c5a      	adds	r2, r3, #1
   18d92:	4b04      	ldr	r3, [pc, #16]	; (18da4 <prvAddTaskToStackMonitor+0x68>)
   18d94:	601a      	str	r2, [r3, #0]
	}
}
   18d96:	46c0      	nop			; (mov r8, r8)
   18d98:	46bd      	mov	sp, r7
   18d9a:	b004      	add	sp, #16
   18d9c:	bd80      	pop	{r7, pc}
   18d9e:	46c0      	nop			; (mov r8, r8)
   18da0:	20000ce0 	.word	0x20000ce0
   18da4:	20000d30 	.word	0x20000d30

00018da8 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   18da8:	b590      	push	{r4, r7, lr}
   18daa:	b085      	sub	sp, #20
   18dac:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   18dae:	2300      	movs	r3, #0
   18db0:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   18db2:	4b2b      	ldr	r3, [pc, #172]	; (18e60 <prvReportStackUsage+0xb8>)
   18db4:	681b      	ldr	r3, [r3, #0]
   18db6:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   18db8:	4b29      	ldr	r3, [pc, #164]	; (18e60 <prvReportStackUsage+0xb8>)
   18dba:	681a      	ldr	r2, [r3, #0]
   18dbc:	4b29      	ldr	r3, [pc, #164]	; (18e64 <prvReportStackUsage+0xbc>)
   18dbe:	00d2      	lsls	r2, r2, #3
   18dc0:	58d3      	ldr	r3, [r2, r3]
   18dc2:	2b00      	cmp	r3, #0
   18dc4:	d035      	beq.n	18e32 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   18dc6:	4b26      	ldr	r3, [pc, #152]	; (18e60 <prvReportStackUsage+0xb8>)
   18dc8:	681a      	ldr	r2, [r3, #0]
   18dca:	4b26      	ldr	r3, [pc, #152]	; (18e64 <prvReportStackUsage+0xbc>)
   18dcc:	00d2      	lsls	r2, r2, #3
   18dce:	58d3      	ldr	r3, [r2, r3]
   18dd0:	0018      	movs	r0, r3
   18dd2:	4b25      	ldr	r3, [pc, #148]	; (18e68 <prvReportStackUsage+0xc0>)
   18dd4:	4798      	blx	r3
   18dd6:	0003      	movs	r3, r0
   18dd8:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   18dda:	4b21      	ldr	r3, [pc, #132]	; (18e60 <prvReportStackUsage+0xb8>)
   18ddc:	681b      	ldr	r3, [r3, #0]
   18dde:	4a21      	ldr	r2, [pc, #132]	; (18e64 <prvReportStackUsage+0xbc>)
   18de0:	00db      	lsls	r3, r3, #3
   18de2:	18d3      	adds	r3, r2, r3
   18de4:	3304      	adds	r3, #4
   18de6:	681a      	ldr	r2, [r3, #0]
   18de8:	687b      	ldr	r3, [r7, #4]
   18dea:	429a      	cmp	r2, r3
   18dec:	d907      	bls.n	18dfe <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   18dee:	4b1c      	ldr	r3, [pc, #112]	; (18e60 <prvReportStackUsage+0xb8>)
   18df0:	681b      	ldr	r3, [r3, #0]
   18df2:	4a1c      	ldr	r2, [pc, #112]	; (18e64 <prvReportStackUsage+0xbc>)
   18df4:	00db      	lsls	r3, r3, #3
   18df6:	18d3      	adds	r3, r2, r3
   18df8:	3304      	adds	r3, #4
   18dfa:	687a      	ldr	r2, [r7, #4]
   18dfc:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   18dfe:	4b18      	ldr	r3, [pc, #96]	; (18e60 <prvReportStackUsage+0xb8>)
   18e00:	681a      	ldr	r2, [r3, #0]
   18e02:	4b18      	ldr	r3, [pc, #96]	; (18e64 <prvReportStackUsage+0xbc>)
   18e04:	00d2      	lsls	r2, r2, #3
   18e06:	58d3      	ldr	r3, [r2, r3]
   18e08:	0018      	movs	r0, r3
   18e0a:	4b18      	ldr	r3, [pc, #96]	; (18e6c <prvReportStackUsage+0xc4>)
   18e0c:	4798      	blx	r3
   18e0e:	0003      	movs	r3, r0
   18e10:	b2db      	uxtb	r3, r3
   18e12:	0019      	movs	r1, r3
   18e14:	4b12      	ldr	r3, [pc, #72]	; (18e60 <prvReportStackUsage+0xb8>)
   18e16:	681b      	ldr	r3, [r3, #0]
   18e18:	4a12      	ldr	r2, [pc, #72]	; (18e64 <prvReportStackUsage+0xbc>)
   18e1a:	00db      	lsls	r3, r3, #3
   18e1c:	18d3      	adds	r3, r2, r3
   18e1e:	3304      	adds	r3, #4
   18e20:	681b      	ldr	r3, [r3, #0]
   18e22:	000a      	movs	r2, r1
   18e24:	2103      	movs	r1, #3
   18e26:	20ea      	movs	r0, #234	; 0xea
   18e28:	4c11      	ldr	r4, [pc, #68]	; (18e70 <prvReportStackUsage+0xc8>)
   18e2a:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   18e2c:	68fb      	ldr	r3, [r7, #12]
   18e2e:	3301      	adds	r3, #1
   18e30:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   18e32:	4b0b      	ldr	r3, [pc, #44]	; (18e60 <prvReportStackUsage+0xb8>)
   18e34:	681b      	ldr	r3, [r3, #0]
   18e36:	1c5a      	adds	r2, r3, #1
   18e38:	4b0e      	ldr	r3, [pc, #56]	; (18e74 <prvReportStackUsage+0xcc>)
   18e3a:	210a      	movs	r1, #10
   18e3c:	0010      	movs	r0, r2
   18e3e:	4798      	blx	r3
   18e40:	000b      	movs	r3, r1
   18e42:	001a      	movs	r2, r3
   18e44:	4b06      	ldr	r3, [pc, #24]	; (18e60 <prvReportStackUsage+0xb8>)
   18e46:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   18e48:	68fb      	ldr	r3, [r7, #12]
   18e4a:	2b00      	cmp	r3, #0
   18e4c:	dc04      	bgt.n	18e58 <prvReportStackUsage+0xb0>
   18e4e:	4b04      	ldr	r3, [pc, #16]	; (18e60 <prvReportStackUsage+0xb8>)
   18e50:	681a      	ldr	r2, [r3, #0]
   18e52:	68bb      	ldr	r3, [r7, #8]
   18e54:	429a      	cmp	r2, r3
   18e56:	d1af      	bne.n	18db8 <prvReportStackUsage+0x10>
}
   18e58:	46c0      	nop			; (mov r8, r8)
   18e5a:	46bd      	mov	sp, r7
   18e5c:	b005      	add	sp, #20
   18e5e:	bd90      	pop	{r4, r7, pc}
   18e60:	20000d34 	.word	0x20000d34
   18e64:	20000ce0 	.word	0x20000ce0
   18e68:	0001d841 	.word	0x0001d841
   18e6c:	00018bbd 	.word	0x00018bbd
   18e70:	00019705 	.word	0x00019705
   18e74:	00033915 	.word	0x00033915

00018e78 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   18e78:	b580      	push	{r7, lr}
   18e7a:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   18e7c:	4b02      	ldr	r3, [pc, #8]	; (18e88 <prvTraceGetCurrentTaskHandle+0x10>)
   18e7e:	4798      	blx	r3
   18e80:	0003      	movs	r3, r0
}
   18e82:	0018      	movs	r0, r3
   18e84:	46bd      	mov	sp, r7
   18e86:	bd80      	pop	{r7, pc}
   18e88:	0001d8ed 	.word	0x0001d8ed

00018e8c <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   18e8c:	b590      	push	{r4, r7, lr}
   18e8e:	b085      	sub	sp, #20
   18e90:	af02      	add	r7, sp, #8
   18e92:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   18e94:	4b14      	ldr	r3, [pc, #80]	; (18ee8 <vTraceEnable+0x5c>)
   18e96:	4798      	blx	r3

	if (startOption == TRC_START)
   18e98:	687b      	ldr	r3, [r7, #4]
   18e9a:	2b01      	cmp	r3, #1
   18e9c:	d102      	bne.n	18ea4 <vTraceEnable+0x18>
	{
		vTraceStart();
   18e9e:	4b13      	ldr	r3, [pc, #76]	; (18eec <vTraceEnable+0x60>)
   18ea0:	4798      	blx	r3
   18ea2:	e00e      	b.n	18ec2 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   18ea4:	687b      	ldr	r3, [r7, #4]
   18ea6:	2b02      	cmp	r3, #2
   18ea8:	d104      	bne.n	18eb4 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   18eaa:	4b11      	ldr	r3, [pc, #68]	; (18ef0 <vTraceEnable+0x64>)
   18eac:	0018      	movs	r0, r3
   18eae:	4b11      	ldr	r3, [pc, #68]	; (18ef4 <vTraceEnable+0x68>)
   18eb0:	4798      	blx	r3
   18eb2:	e006      	b.n	18ec2 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   18eb4:	687b      	ldr	r3, [r7, #4]
   18eb6:	2b00      	cmp	r3, #0
   18eb8:	d003      	beq.n	18ec2 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   18eba:	4b0f      	ldr	r3, [pc, #60]	; (18ef8 <vTraceEnable+0x6c>)
   18ebc:	0018      	movs	r0, r3
   18ebe:	4b0d      	ldr	r3, [pc, #52]	; (18ef4 <vTraceEnable+0x68>)
   18ec0:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   18ec2:	4b0e      	ldr	r3, [pc, #56]	; (18efc <vTraceEnable+0x70>)
   18ec4:	681b      	ldr	r3, [r3, #0]
   18ec6:	2b00      	cmp	r3, #0
   18ec8:	d10a      	bne.n	18ee0 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   18eca:	2396      	movs	r3, #150	; 0x96
   18ecc:	005a      	lsls	r2, r3, #1
   18ece:	490c      	ldr	r1, [pc, #48]	; (18f00 <vTraceEnable+0x74>)
   18ed0:	480c      	ldr	r0, [pc, #48]	; (18f04 <vTraceEnable+0x78>)
   18ed2:	4b0a      	ldr	r3, [pc, #40]	; (18efc <vTraceEnable+0x70>)
   18ed4:	9301      	str	r3, [sp, #4]
   18ed6:	2304      	movs	r3, #4
   18ed8:	9300      	str	r3, [sp, #0]
   18eda:	2300      	movs	r3, #0
   18edc:	4c0a      	ldr	r4, [pc, #40]	; (18f08 <vTraceEnable+0x7c>)
   18ede:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   18ee0:	46c0      	nop			; (mov r8, r8)
   18ee2:	46bd      	mov	sp, r7
   18ee4:	b003      	add	sp, #12
   18ee6:	bd90      	pop	{r4, r7, pc}
   18ee8:	00019dd1 	.word	0x00019dd1
   18eec:	00019329 	.word	0x00019329
   18ef0:	00037de8 	.word	0x00037de8
   18ef4:	0001a479 	.word	0x0001a479
   18ef8:	00037e28 	.word	0x00037e28
   18efc:	20000cdc 	.word	0x20000cdc
   18f00:	00037e5c 	.word	0x00037e5c
   18f04:	00018f0d 	.word	0x00018f0d
   18f08:	0001c845 	.word	0x0001c845

00018f0c <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   18f0c:	b580      	push	{r7, lr}
   18f0e:	b082      	sub	sp, #8
   18f10:	af00      	add	r7, sp, #0
   18f12:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   18f14:	4b04      	ldr	r3, [pc, #16]	; (18f28 <TzCtrl+0x1c>)
   18f16:	4798      	blx	r3
   18f18:	1e03      	subs	r3, r0, #0
   18f1a:	d001      	beq.n	18f20 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   18f1c:	4b03      	ldr	r3, [pc, #12]	; (18f2c <TzCtrl+0x20>)
   18f1e:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   18f20:	2004      	movs	r0, #4
   18f22:	4b03      	ldr	r3, [pc, #12]	; (18f30 <TzCtrl+0x24>)
   18f24:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   18f26:	e7f5      	b.n	18f14 <TzCtrl+0x8>
   18f28:	0001936d 	.word	0x0001936d
   18f2c:	00018da9 	.word	0x00018da9
   18f30:	0001cbe1 	.word	0x0001cbe1

00018f34 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   18f34:	b580      	push	{r7, lr}
   18f36:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   18f38:	4b60      	ldr	r3, [pc, #384]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18f3a:	681b      	ldr	r3, [r3, #0]
   18f3c:	2209      	movs	r2, #9
   18f3e:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   18f40:	4b5e      	ldr	r3, [pc, #376]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18f42:	681b      	ldr	r3, [r3, #0]
   18f44:	2264      	movs	r2, #100	; 0x64
   18f46:	210a      	movs	r1, #10
   18f48:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   18f4a:	4b5c      	ldr	r3, [pc, #368]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18f4c:	681b      	ldr	r3, [r3, #0]
   18f4e:	2265      	movs	r2, #101	; 0x65
   18f50:	210a      	movs	r1, #10
   18f52:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   18f54:	4b59      	ldr	r3, [pc, #356]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18f56:	681b      	ldr	r3, [r3, #0]
   18f58:	2266      	movs	r2, #102	; 0x66
   18f5a:	210a      	movs	r1, #10
   18f5c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   18f5e:	4b57      	ldr	r3, [pc, #348]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18f60:	681b      	ldr	r3, [r3, #0]
   18f62:	2267      	movs	r2, #103	; 0x67
   18f64:	210f      	movs	r1, #15
   18f66:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   18f68:	4b54      	ldr	r3, [pc, #336]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18f6a:	681b      	ldr	r3, [r3, #0]
   18f6c:	2268      	movs	r2, #104	; 0x68
   18f6e:	2105      	movs	r1, #5
   18f70:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   18f72:	4b52      	ldr	r3, [pc, #328]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18f74:	681b      	ldr	r3, [r3, #0]
   18f76:	2269      	movs	r2, #105	; 0x69
   18f78:	2105      	movs	r1, #5
   18f7a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   18f7c:	4b4f      	ldr	r3, [pc, #316]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18f7e:	681b      	ldr	r3, [r3, #0]
   18f80:	226a      	movs	r2, #106	; 0x6a
   18f82:	2105      	movs	r1, #5
   18f84:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   18f86:	4b4d      	ldr	r3, [pc, #308]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18f88:	681b      	ldr	r3, [r3, #0]
   18f8a:	226b      	movs	r2, #107	; 0x6b
   18f8c:	2105      	movs	r1, #5
   18f8e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   18f90:	4b4a      	ldr	r3, [pc, #296]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18f92:	681b      	ldr	r3, [r3, #0]
   18f94:	226c      	movs	r2, #108	; 0x6c
   18f96:	2105      	movs	r1, #5
   18f98:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   18f9a:	4b48      	ldr	r3, [pc, #288]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18f9c:	681b      	ldr	r3, [r3, #0]
   18f9e:	2270      	movs	r2, #112	; 0x70
   18fa0:	210f      	movs	r1, #15
   18fa2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   18fa4:	4b45      	ldr	r3, [pc, #276]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18fa6:	681b      	ldr	r3, [r3, #0]
   18fa8:	2271      	movs	r2, #113	; 0x71
   18faa:	210f      	movs	r1, #15
   18fac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   18fae:	4b43      	ldr	r3, [pc, #268]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18fb0:	681b      	ldr	r3, [r3, #0]
   18fb2:	2272      	movs	r2, #114	; 0x72
   18fb4:	210f      	movs	r1, #15
   18fb6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   18fb8:	4b40      	ldr	r3, [pc, #256]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18fba:	681b      	ldr	r3, [r3, #0]
   18fbc:	2273      	movs	r2, #115	; 0x73
   18fbe:	210f      	movs	r1, #15
   18fc0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   18fc2:	4b3e      	ldr	r3, [pc, #248]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18fc4:	681b      	ldr	r3, [r3, #0]
   18fc6:	2274      	movs	r2, #116	; 0x74
   18fc8:	210f      	movs	r1, #15
   18fca:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   18fcc:	4b3b      	ldr	r3, [pc, #236]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18fce:	681b      	ldr	r3, [r3, #0]
   18fd0:	2275      	movs	r2, #117	; 0x75
   18fd2:	210f      	movs	r1, #15
   18fd4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   18fd6:	4b39      	ldr	r3, [pc, #228]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18fd8:	681b      	ldr	r3, [r3, #0]
   18fda:	2276      	movs	r2, #118	; 0x76
   18fdc:	210f      	movs	r1, #15
   18fde:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   18fe0:	4b36      	ldr	r3, [pc, #216]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18fe2:	681b      	ldr	r3, [r3, #0]
   18fe4:	2277      	movs	r2, #119	; 0x77
   18fe6:	210f      	movs	r1, #15
   18fe8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   18fea:	4b34      	ldr	r3, [pc, #208]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18fec:	681b      	ldr	r3, [r3, #0]
   18fee:	2278      	movs	r2, #120	; 0x78
   18ff0:	210f      	movs	r1, #15
   18ff2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   18ff4:	4b31      	ldr	r3, [pc, #196]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   18ff6:	681b      	ldr	r3, [r3, #0]
   18ff8:	227c      	movs	r2, #124	; 0x7c
   18ffa:	2110      	movs	r1, #16
   18ffc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   18ffe:	4b2f      	ldr	r3, [pc, #188]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   19000:	681b      	ldr	r3, [r3, #0]
   19002:	227d      	movs	r2, #125	; 0x7d
   19004:	2110      	movs	r1, #16
   19006:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   19008:	4b2c      	ldr	r3, [pc, #176]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   1900a:	681b      	ldr	r3, [r3, #0]
   1900c:	227e      	movs	r2, #126	; 0x7e
   1900e:	2110      	movs	r1, #16
   19010:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   19012:	4b2a      	ldr	r3, [pc, #168]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   19014:	681b      	ldr	r3, [r3, #0]
   19016:	227f      	movs	r2, #127	; 0x7f
   19018:	2113      	movs	r1, #19
   1901a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   1901c:	4b27      	ldr	r3, [pc, #156]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   1901e:	681b      	ldr	r3, [r3, #0]
   19020:	2280      	movs	r2, #128	; 0x80
   19022:	2111      	movs	r1, #17
   19024:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   19026:	4b25      	ldr	r3, [pc, #148]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   19028:	681b      	ldr	r3, [r3, #0]
   1902a:	2281      	movs	r2, #129	; 0x81
   1902c:	2110      	movs	r1, #16
   1902e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   19030:	4b22      	ldr	r3, [pc, #136]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   19032:	681b      	ldr	r3, [r3, #0]
   19034:	2282      	movs	r2, #130	; 0x82
   19036:	2113      	movs	r1, #19
   19038:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1903a:	4b20      	ldr	r3, [pc, #128]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   1903c:	681b      	ldr	r3, [r3, #0]
   1903e:	2283      	movs	r2, #131	; 0x83
   19040:	2113      	movs	r1, #19
   19042:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   19044:	4b1d      	ldr	r3, [pc, #116]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   19046:	681b      	ldr	r3, [r3, #0]
   19048:	2284      	movs	r2, #132	; 0x84
   1904a:	2113      	movs	r1, #19
   1904c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1904e:	4b1b      	ldr	r3, [pc, #108]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   19050:	681b      	ldr	r3, [r3, #0]
   19052:	2288      	movs	r2, #136	; 0x88
   19054:	2100      	movs	r1, #0
   19056:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   19058:	4b18      	ldr	r3, [pc, #96]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   1905a:	681b      	ldr	r3, [r3, #0]
   1905c:	228a      	movs	r2, #138	; 0x8a
   1905e:	21a0      	movs	r1, #160	; 0xa0
   19060:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   19062:	4b16      	ldr	r3, [pc, #88]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   19064:	681b      	ldr	r3, [r3, #0]
   19066:	228c      	movs	r2, #140	; 0x8c
   19068:	21a0      	movs	r1, #160	; 0xa0
   1906a:	0049      	lsls	r1, r1, #1
   1906c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1906e:	4b13      	ldr	r3, [pc, #76]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   19070:	681b      	ldr	r3, [r3, #0]
   19072:	228e      	movs	r2, #142	; 0x8e
   19074:	21f0      	movs	r1, #240	; 0xf0
   19076:	0049      	lsls	r1, r1, #1
   19078:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1907a:	4b10      	ldr	r3, [pc, #64]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   1907c:	681b      	ldr	r3, [r3, #0]
   1907e:	2290      	movs	r2, #144	; 0x90
   19080:	490f      	ldr	r1, [pc, #60]	; (190c0 <vTraceInitObjectPropertyTable+0x18c>)
   19082:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   19084:	4b0d      	ldr	r3, [pc, #52]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   19086:	681b      	ldr	r3, [r3, #0]
   19088:	2292      	movs	r2, #146	; 0x92
   1908a:	490e      	ldr	r1, [pc, #56]	; (190c4 <vTraceInitObjectPropertyTable+0x190>)
   1908c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1908e:	4b0b      	ldr	r3, [pc, #44]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   19090:	681b      	ldr	r3, [r3, #0]
   19092:	2294      	movs	r2, #148	; 0x94
   19094:	490c      	ldr	r1, [pc, #48]	; (190c8 <vTraceInitObjectPropertyTable+0x194>)
   19096:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   19098:	4b08      	ldr	r3, [pc, #32]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   1909a:	681b      	ldr	r3, [r3, #0]
   1909c:	2296      	movs	r2, #150	; 0x96
   1909e:	490b      	ldr	r1, [pc, #44]	; (190cc <vTraceInitObjectPropertyTable+0x198>)
   190a0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   190a2:	4b06      	ldr	r3, [pc, #24]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   190a4:	681b      	ldr	r3, [r3, #0]
   190a6:	2298      	movs	r2, #152	; 0x98
   190a8:	218c      	movs	r1, #140	; 0x8c
   190aa:	00c9      	lsls	r1, r1, #3
   190ac:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   190ae:	4b03      	ldr	r3, [pc, #12]	; (190bc <vTraceInitObjectPropertyTable+0x188>)
   190b0:	681b      	ldr	r3, [r3, #0]
   190b2:	4a07      	ldr	r2, [pc, #28]	; (190d0 <vTraceInitObjectPropertyTable+0x19c>)
   190b4:	661a      	str	r2, [r3, #96]	; 0x60
}
   190b6:	46c0      	nop			; (mov r8, r8)
   190b8:	46bd      	mov	sp, r7
   190ba:	bd80      	pop	{r7, pc}
   190bc:	20000df4 	.word	0x20000df4
   190c0:	000002fd 	.word	0x000002fd
   190c4:	00000352 	.word	0x00000352
   190c8:	000003a2 	.word	0x000003a2
   190cc:	00000401 	.word	0x00000401
   190d0:	000004bf 	.word	0x000004bf

000190d4 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   190d4:	b580      	push	{r7, lr}
   190d6:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   190d8:	4b2e      	ldr	r3, [pc, #184]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   190da:	2200      	movs	r2, #0
   190dc:	825a      	strh	r2, [r3, #18]
   190de:	4b2d      	ldr	r3, [pc, #180]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   190e0:	8a5a      	ldrh	r2, [r3, #18]
   190e2:	4b2c      	ldr	r3, [pc, #176]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   190e4:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   190e6:	4b2b      	ldr	r3, [pc, #172]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   190e8:	220a      	movs	r2, #10
   190ea:	829a      	strh	r2, [r3, #20]
   190ec:	4b29      	ldr	r3, [pc, #164]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   190ee:	8a9a      	ldrh	r2, [r3, #20]
   190f0:	4b28      	ldr	r3, [pc, #160]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   190f2:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   190f4:	4b27      	ldr	r3, [pc, #156]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   190f6:	2214      	movs	r2, #20
   190f8:	82da      	strh	r2, [r3, #22]
   190fa:	4b26      	ldr	r3, [pc, #152]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   190fc:	8ada      	ldrh	r2, [r3, #22]
   190fe:	4b25      	ldr	r3, [pc, #148]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19100:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   19102:	4b24      	ldr	r3, [pc, #144]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19104:	221e      	movs	r2, #30
   19106:	831a      	strh	r2, [r3, #24]
   19108:	4b22      	ldr	r3, [pc, #136]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   1910a:	8b1a      	ldrh	r2, [r3, #24]
   1910c:	4b21      	ldr	r3, [pc, #132]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   1910e:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   19110:	4b20      	ldr	r3, [pc, #128]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19112:	222d      	movs	r2, #45	; 0x2d
   19114:	835a      	strh	r2, [r3, #26]
   19116:	4b1f      	ldr	r3, [pc, #124]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19118:	8b5a      	ldrh	r2, [r3, #26]
   1911a:	4b1e      	ldr	r3, [pc, #120]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   1911c:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   1911e:	4b1d      	ldr	r3, [pc, #116]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19120:	2232      	movs	r2, #50	; 0x32
   19122:	839a      	strh	r2, [r3, #28]
   19124:	4b1b      	ldr	r3, [pc, #108]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19126:	8b9a      	ldrh	r2, [r3, #28]
   19128:	4b1a      	ldr	r3, [pc, #104]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   1912a:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   1912c:	4b19      	ldr	r3, [pc, #100]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   1912e:	2237      	movs	r2, #55	; 0x37
   19130:	83da      	strh	r2, [r3, #30]
   19132:	4b18      	ldr	r3, [pc, #96]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19134:	8bda      	ldrh	r2, [r3, #30]
   19136:	4b17      	ldr	r3, [pc, #92]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19138:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1913a:	4b16      	ldr	r3, [pc, #88]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   1913c:	223c      	movs	r2, #60	; 0x3c
   1913e:	841a      	strh	r2, [r3, #32]
   19140:	4b14      	ldr	r3, [pc, #80]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19142:	8c1a      	ldrh	r2, [r3, #32]
   19144:	4b13      	ldr	r3, [pc, #76]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19146:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   19148:	4b12      	ldr	r3, [pc, #72]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   1914a:	2241      	movs	r2, #65	; 0x41
   1914c:	845a      	strh	r2, [r3, #34]	; 0x22
   1914e:	4b11      	ldr	r3, [pc, #68]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19150:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   19152:	4b10      	ldr	r3, [pc, #64]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19154:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   19156:	4b0f      	ldr	r3, [pc, #60]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19158:	2209      	movs	r2, #9
   1915a:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   1915c:	4b0d      	ldr	r3, [pc, #52]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   1915e:	2213      	movs	r2, #19
   19160:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   19162:	4b0c      	ldr	r3, [pc, #48]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19164:	221d      	movs	r2, #29
   19166:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   19168:	4b0a      	ldr	r3, [pc, #40]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   1916a:	222c      	movs	r2, #44	; 0x2c
   1916c:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   1916e:	4b09      	ldr	r3, [pc, #36]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19170:	2231      	movs	r2, #49	; 0x31
   19172:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   19174:	4b07      	ldr	r3, [pc, #28]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19176:	2236      	movs	r2, #54	; 0x36
   19178:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1917a:	4b06      	ldr	r3, [pc, #24]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   1917c:	223b      	movs	r2, #59	; 0x3b
   1917e:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   19180:	4b04      	ldr	r3, [pc, #16]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19182:	2240      	movs	r2, #64	; 0x40
   19184:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   19186:	4b03      	ldr	r3, [pc, #12]	; (19194 <vTraceInitObjectHandleStack+0xc0>)
   19188:	2245      	movs	r2, #69	; 0x45
   1918a:	869a      	strh	r2, [r3, #52]	; 0x34
}
   1918c:	46c0      	nop			; (mov r8, r8)
   1918e:	46bd      	mov	sp, r7
   19190:	bd80      	pop	{r7, pc}
   19192:	46c0      	nop			; (mov r8, r8)
   19194:	20000d64 	.word	0x20000d64

00019198 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   19198:	b580      	push	{r7, lr}
   1919a:	b082      	sub	sp, #8
   1919c:	af00      	add	r7, sp, #0
   1919e:	0002      	movs	r2, r0
   191a0:	1dfb      	adds	r3, r7, #7
   191a2:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   191a4:	1dfb      	adds	r3, r7, #7
   191a6:	781b      	ldrb	r3, [r3, #0]
   191a8:	2b08      	cmp	r3, #8
   191aa:	d816      	bhi.n	191da <pszTraceGetErrorNotEnoughHandles+0x42>
   191ac:	009a      	lsls	r2, r3, #2
   191ae:	4b0d      	ldr	r3, [pc, #52]	; (191e4 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   191b0:	18d3      	adds	r3, r2, r3
   191b2:	681b      	ldr	r3, [r3, #0]
   191b4:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   191b6:	4b0c      	ldr	r3, [pc, #48]	; (191e8 <pszTraceGetErrorNotEnoughHandles+0x50>)
   191b8:	e010      	b.n	191dc <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   191ba:	4b0c      	ldr	r3, [pc, #48]	; (191ec <pszTraceGetErrorNotEnoughHandles+0x54>)
   191bc:	e00e      	b.n	191dc <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   191be:	4b0c      	ldr	r3, [pc, #48]	; (191f0 <pszTraceGetErrorNotEnoughHandles+0x58>)
   191c0:	e00c      	b.n	191dc <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   191c2:	4b0c      	ldr	r3, [pc, #48]	; (191f4 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   191c4:	e00a      	b.n	191dc <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   191c6:	4b0c      	ldr	r3, [pc, #48]	; (191f8 <pszTraceGetErrorNotEnoughHandles+0x60>)
   191c8:	e008      	b.n	191dc <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   191ca:	4b0c      	ldr	r3, [pc, #48]	; (191fc <pszTraceGetErrorNotEnoughHandles+0x64>)
   191cc:	e006      	b.n	191dc <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   191ce:	4b0c      	ldr	r3, [pc, #48]	; (19200 <pszTraceGetErrorNotEnoughHandles+0x68>)
   191d0:	e004      	b.n	191dc <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   191d2:	4b0c      	ldr	r3, [pc, #48]	; (19204 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   191d4:	e002      	b.n	191dc <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   191d6:	4b0c      	ldr	r3, [pc, #48]	; (19208 <pszTraceGetErrorNotEnoughHandles+0x70>)
   191d8:	e000      	b.n	191dc <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   191da:	4b0c      	ldr	r3, [pc, #48]	; (1920c <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   191dc:	0018      	movs	r0, r3
   191de:	46bd      	mov	sp, r7
   191e0:	b002      	add	sp, #8
   191e2:	bd80      	pop	{r7, pc}
   191e4:	00038164 	.word	0x00038164
   191e8:	00037e64 	.word	0x00037e64
   191ec:	00037eac 	.word	0x00037eac
   191f0:	00037ef4 	.word	0x00037ef4
   191f4:	00037f48 	.word	0x00037f48
   191f8:	00037f94 	.word	0x00037f94
   191fc:	00037fe0 	.word	0x00037fe0
   19200:	0003802c 	.word	0x0003802c
   19204:	00038080 	.word	0x00038080
   19208:	000380d8 	.word	0x000380d8
   1920c:	00038134 	.word	0x00038134

00019210 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   19210:	b590      	push	{r4, r7, lr}
   19212:	b087      	sub	sp, #28
   19214:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   19216:	2317      	movs	r3, #23
   19218:	18fb      	adds	r3, r7, r3
   1921a:	2200      	movs	r2, #0
   1921c:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   1921e:	4b36      	ldr	r3, [pc, #216]	; (192f8 <uiTraceStart+0xe8>)
   19220:	681b      	ldr	r3, [r3, #0]
   19222:	2b00      	cmp	r3, #0
   19224:	d10b      	bne.n	1923e <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   19226:	4b34      	ldr	r3, [pc, #208]	; (192f8 <uiTraceStart+0xe8>)
   19228:	681b      	ldr	r3, [r3, #0]
   1922a:	2b00      	cmp	r3, #0
   1922c:	d105      	bne.n	1923a <uiTraceStart+0x2a>
   1922e:	4b33      	ldr	r3, [pc, #204]	; (192fc <uiTraceStart+0xec>)
   19230:	0018      	movs	r0, r3
   19232:	4b33      	ldr	r3, [pc, #204]	; (19300 <uiTraceStart+0xf0>)
   19234:	4798      	blx	r3
   19236:	2300      	movs	r3, #0
   19238:	e059      	b.n	192ee <uiTraceStart+0xde>
		return 0;
   1923a:	2300      	movs	r3, #0
   1923c:	e057      	b.n	192ee <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   1923e:	4b2e      	ldr	r3, [pc, #184]	; (192f8 <uiTraceStart+0xe8>)
   19240:	681b      	ldr	r3, [r3, #0]
   19242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19244:	2b01      	cmp	r3, #1
   19246:	d101      	bne.n	1924c <uiTraceStart+0x3c>
		return 1; /* Already running */
   19248:	2301      	movs	r3, #1
   1924a:	e050      	b.n	192ee <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   1924c:	4b2d      	ldr	r3, [pc, #180]	; (19304 <uiTraceStart+0xf4>)
   1924e:	681b      	ldr	r3, [r3, #0]
   19250:	2b00      	cmp	r3, #0
   19252:	d149      	bne.n	192e8 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19254:	f3ef 8310 	mrs	r3, PRIMASK
   19258:	60bb      	str	r3, [r7, #8]
  return(result);
   1925a:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   1925c:	613b      	str	r3, [r7, #16]
   1925e:	2301      	movs	r3, #1
   19260:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19262:	68fb      	ldr	r3, [r7, #12]
   19264:	f383 8810 	msr	PRIMASK, r3
   19268:	4b27      	ldr	r3, [pc, #156]	; (19308 <uiTraceStart+0xf8>)
   1926a:	681b      	ldr	r3, [r3, #0]
   1926c:	1c5a      	adds	r2, r3, #1
   1926e:	4b26      	ldr	r3, [pc, #152]	; (19308 <uiTraceStart+0xf8>)
   19270:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   19272:	4b21      	ldr	r3, [pc, #132]	; (192f8 <uiTraceStart+0xe8>)
   19274:	681b      	ldr	r3, [r3, #0]
   19276:	2201      	movs	r2, #1
   19278:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1927a:	4b24      	ldr	r3, [pc, #144]	; (1930c <uiTraceStart+0xfc>)
   1927c:	4798      	blx	r3
   1927e:	0003      	movs	r3, r0
   19280:	0018      	movs	r0, r3
   19282:	4b23      	ldr	r3, [pc, #140]	; (19310 <uiTraceStart+0x100>)
   19284:	4798      	blx	r3
   19286:	0003      	movs	r3, r0
   19288:	001a      	movs	r2, r3
   1928a:	2317      	movs	r3, #23
   1928c:	18fb      	adds	r3, r7, r3
   1928e:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   19290:	2317      	movs	r3, #23
   19292:	18fb      	adds	r3, r7, r3
   19294:	781b      	ldrb	r3, [r3, #0]
   19296:	2b00      	cmp	r3, #0
   19298:	d116      	bne.n	192c8 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1929a:	2317      	movs	r3, #23
   1929c:	18fc      	adds	r4, r7, r3
   1929e:	2003      	movs	r0, #3
   192a0:	4b1c      	ldr	r3, [pc, #112]	; (19314 <uiTraceStart+0x104>)
   192a2:	4798      	blx	r3
   192a4:	0003      	movs	r3, r0
   192a6:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   192a8:	4a1b      	ldr	r2, [pc, #108]	; (19318 <uiTraceStart+0x108>)
   192aa:	2317      	movs	r3, #23
   192ac:	18fb      	adds	r3, r7, r3
   192ae:	781b      	ldrb	r3, [r3, #0]
   192b0:	0019      	movs	r1, r3
   192b2:	2003      	movs	r0, #3
   192b4:	4b19      	ldr	r3, [pc, #100]	; (1931c <uiTraceStart+0x10c>)
   192b6:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   192b8:	2317      	movs	r3, #23
   192ba:	18fb      	adds	r3, r7, r3
   192bc:	781b      	ldrb	r3, [r3, #0]
   192be:	2200      	movs	r2, #0
   192c0:	0019      	movs	r1, r3
   192c2:	2003      	movs	r0, #3
   192c4:	4b16      	ldr	r3, [pc, #88]	; (19320 <uiTraceStart+0x110>)
   192c6:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   192c8:	2317      	movs	r3, #23
   192ca:	18fb      	adds	r3, r7, r3
   192cc:	781b      	ldrb	r3, [r3, #0]
   192ce:	0018      	movs	r0, r3
   192d0:	4b14      	ldr	r3, [pc, #80]	; (19324 <uiTraceStart+0x114>)
   192d2:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   192d4:	4b0c      	ldr	r3, [pc, #48]	; (19308 <uiTraceStart+0xf8>)
   192d6:	681b      	ldr	r3, [r3, #0]
   192d8:	1e5a      	subs	r2, r3, #1
   192da:	4b0b      	ldr	r3, [pc, #44]	; (19308 <uiTraceStart+0xf8>)
   192dc:	601a      	str	r2, [r3, #0]
   192de:	693b      	ldr	r3, [r7, #16]
   192e0:	607b      	str	r3, [r7, #4]
   192e2:	687b      	ldr	r3, [r7, #4]
   192e4:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   192e8:	4b03      	ldr	r3, [pc, #12]	; (192f8 <uiTraceStart+0xe8>)
   192ea:	681b      	ldr	r3, [r3, #0]
   192ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   192ee:	0018      	movs	r0, r3
   192f0:	46bd      	mov	sp, r7
   192f2:	b007      	add	sp, #28
   192f4:	bd90      	pop	{r4, r7, pc}
   192f6:	46c0      	nop			; (mov r8, r8)
   192f8:	20000df4 	.word	0x20000df4
   192fc:	00038188 	.word	0x00038188
   19300:	0001a479 	.word	0x0001a479
   19304:	20000d54 	.word	0x20000d54
   19308:	20000d4c 	.word	0x20000d4c
   1930c:	00018e79 	.word	0x00018e79
   19310:	00018bbd 	.word	0x00018bbd
   19314:	0001a15d 	.word	0x0001a15d
   19318:	000381cc 	.word	0x000381cc
   1931c:	0001a38d 	.word	0x0001a38d
   19320:	00019af1 	.word	0x00019af1
   19324:	000199d9 	.word	0x000199d9

00019328 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   19328:	b580      	push	{r7, lr}
   1932a:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   1932c:	4b02      	ldr	r3, [pc, #8]	; (19338 <vTraceStart+0x10>)
   1932e:	4798      	blx	r3
}
   19330:	46c0      	nop			; (mov r8, r8)
   19332:	46bd      	mov	sp, r7
   19334:	bd80      	pop	{r7, pc}
   19336:	46c0      	nop			; (mov r8, r8)
   19338:	00019211 	.word	0x00019211

0001933c <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   1933c:	b580      	push	{r7, lr}
   1933e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   19340:	4b08      	ldr	r3, [pc, #32]	; (19364 <vTraceStop+0x28>)
   19342:	681b      	ldr	r3, [r3, #0]
   19344:	2b00      	cmp	r3, #0
   19346:	d003      	beq.n	19350 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   19348:	4b06      	ldr	r3, [pc, #24]	; (19364 <vTraceStop+0x28>)
   1934a:	681b      	ldr	r3, [r3, #0]
   1934c:	2200      	movs	r2, #0
   1934e:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   19350:	4b05      	ldr	r3, [pc, #20]	; (19368 <vTraceStop+0x2c>)
   19352:	681b      	ldr	r3, [r3, #0]
   19354:	2b00      	cmp	r3, #0
   19356:	d002      	beq.n	1935e <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   19358:	4b03      	ldr	r3, [pc, #12]	; (19368 <vTraceStop+0x2c>)
   1935a:	681b      	ldr	r3, [r3, #0]
   1935c:	4798      	blx	r3
	}
}
   1935e:	46c0      	nop			; (mov r8, r8)
   19360:	46bd      	mov	sp, r7
   19362:	bd80      	pop	{r7, pc}
   19364:	20000df4 	.word	0x20000df4
   19368:	20000d5c 	.word	0x20000d5c

0001936c <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   1936c:	b580      	push	{r7, lr}
   1936e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   19370:	4b05      	ldr	r3, [pc, #20]	; (19388 <xTraceIsRecordingEnabled+0x1c>)
   19372:	681b      	ldr	r3, [r3, #0]
   19374:	2b00      	cmp	r3, #0
   19376:	d003      	beq.n	19380 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   19378:	4b03      	ldr	r3, [pc, #12]	; (19388 <xTraceIsRecordingEnabled+0x1c>)
   1937a:	681b      	ldr	r3, [r3, #0]
   1937c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1937e:	e000      	b.n	19382 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   19380:	2300      	movs	r3, #0
	}
}
   19382:	0018      	movs	r0, r3
   19384:	46bd      	mov	sp, r7
   19386:	bd80      	pop	{r7, pc}
   19388:	20000df4 	.word	0x20000df4

0001938c <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   1938c:	b590      	push	{r4, r7, lr}
   1938e:	b089      	sub	sp, #36	; 0x24
   19390:	af00      	add	r7, sp, #0
   19392:	0002      	movs	r2, r0
   19394:	1dfb      	adds	r3, r7, #7
   19396:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   19398:	1dfb      	adds	r3, r7, #7
   1939a:	781b      	ldrb	r3, [r3, #0]
   1939c:	2b00      	cmp	r3, #0
   1939e:	d057      	beq.n	19450 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   193a0:	4b2e      	ldr	r3, [pc, #184]	; (1945c <prvTraceStoreTaskReady+0xd0>)
   193a2:	681b      	ldr	r3, [r3, #0]
   193a4:	2b00      	cmp	r3, #0
   193a6:	d055      	beq.n	19454 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   193a8:	1dfb      	adds	r3, r7, #7
   193aa:	781b      	ldrb	r3, [r3, #0]
   193ac:	2b0f      	cmp	r3, #15
   193ae:	d904      	bls.n	193ba <prvTraceStoreTaskReady+0x2e>
   193b0:	4b2b      	ldr	r3, [pc, #172]	; (19460 <prvTraceStoreTaskReady+0xd4>)
   193b2:	0018      	movs	r0, r3
   193b4:	4b2b      	ldr	r3, [pc, #172]	; (19464 <prvTraceStoreTaskReady+0xd8>)
   193b6:	4798      	blx	r3
   193b8:	e04d      	b.n	19456 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   193ba:	4b2b      	ldr	r3, [pc, #172]	; (19468 <prvTraceStoreTaskReady+0xdc>)
   193bc:	681b      	ldr	r3, [r3, #0]
   193be:	2b00      	cmp	r3, #0
   193c0:	d004      	beq.n	193cc <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   193c2:	4b2a      	ldr	r3, [pc, #168]	; (1946c <prvTraceStoreTaskReady+0xe0>)
   193c4:	0018      	movs	r0, r3
   193c6:	4b27      	ldr	r3, [pc, #156]	; (19464 <prvTraceStoreTaskReady+0xd8>)
   193c8:	4798      	blx	r3
		return;
   193ca:	e044      	b.n	19456 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   193cc:	f3ef 8310 	mrs	r3, PRIMASK
   193d0:	60fb      	str	r3, [r7, #12]
  return(result);
   193d2:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   193d4:	61fb      	str	r3, [r7, #28]
   193d6:	2301      	movs	r3, #1
   193d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   193da:	693b      	ldr	r3, [r7, #16]
   193dc:	f383 8810 	msr	PRIMASK, r3
   193e0:	4b21      	ldr	r3, [pc, #132]	; (19468 <prvTraceStoreTaskReady+0xdc>)
   193e2:	681b      	ldr	r3, [r3, #0]
   193e4:	1c5a      	adds	r2, r3, #1
   193e6:	4b20      	ldr	r3, [pc, #128]	; (19468 <prvTraceStoreTaskReady+0xdc>)
   193e8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   193ea:	4b21      	ldr	r3, [pc, #132]	; (19470 <prvTraceStoreTaskReady+0xe4>)
   193ec:	681b      	ldr	r3, [r3, #0]
   193ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   193f0:	2b00      	cmp	r3, #0
   193f2:	d022      	beq.n	1943a <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   193f4:	231a      	movs	r3, #26
   193f6:	18fc      	adds	r4, r7, r3
   193f8:	4b1e      	ldr	r3, [pc, #120]	; (19474 <prvTraceStoreTaskReady+0xe8>)
   193fa:	0018      	movs	r0, r3
   193fc:	4b1e      	ldr	r3, [pc, #120]	; (19478 <prvTraceStoreTaskReady+0xec>)
   193fe:	4798      	blx	r3
   19400:	0003      	movs	r3, r0
   19402:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   19404:	2319      	movs	r3, #25
   19406:	18fb      	adds	r3, r7, r3
   19408:	1dfa      	adds	r2, r7, #7
   1940a:	7812      	ldrb	r2, [r2, #0]
   1940c:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   1940e:	4b1b      	ldr	r3, [pc, #108]	; (1947c <prvTraceStoreTaskReady+0xf0>)
   19410:	4798      	blx	r3
   19412:	0003      	movs	r3, r0
   19414:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   19416:	697b      	ldr	r3, [r7, #20]
   19418:	2b00      	cmp	r3, #0
   1941a:	d00e      	beq.n	1943a <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   1941c:	697b      	ldr	r3, [r7, #20]
   1941e:	2202      	movs	r2, #2
   19420:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   19422:	697b      	ldr	r3, [r7, #20]
   19424:	221a      	movs	r2, #26
   19426:	18ba      	adds	r2, r7, r2
   19428:	8812      	ldrh	r2, [r2, #0]
   1942a:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   1942c:	697b      	ldr	r3, [r7, #20]
   1942e:	2219      	movs	r2, #25
   19430:	18ba      	adds	r2, r7, r2
   19432:	7812      	ldrb	r2, [r2, #0]
   19434:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   19436:	4b12      	ldr	r3, [pc, #72]	; (19480 <prvTraceStoreTaskReady+0xf4>)
   19438:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1943a:	4b0b      	ldr	r3, [pc, #44]	; (19468 <prvTraceStoreTaskReady+0xdc>)
   1943c:	681b      	ldr	r3, [r3, #0]
   1943e:	1e5a      	subs	r2, r3, #1
   19440:	4b09      	ldr	r3, [pc, #36]	; (19468 <prvTraceStoreTaskReady+0xdc>)
   19442:	601a      	str	r2, [r3, #0]
   19444:	69fb      	ldr	r3, [r7, #28]
   19446:	60bb      	str	r3, [r7, #8]
   19448:	68bb      	ldr	r3, [r7, #8]
   1944a:	f383 8810 	msr	PRIMASK, r3
   1944e:	e002      	b.n	19456 <prvTraceStoreTaskReady+0xca>
		return;
   19450:	46c0      	nop			; (mov r8, r8)
   19452:	e000      	b.n	19456 <prvTraceStoreTaskReady+0xca>
		return;
   19454:	46c0      	nop			; (mov r8, r8)
}
   19456:	46bd      	mov	sp, r7
   19458:	b009      	add	sp, #36	; 0x24
   1945a:	bd90      	pop	{r4, r7, pc}
   1945c:	2000010c 	.word	0x2000010c
   19460:	00038534 	.word	0x00038534
   19464:	0001a479 	.word	0x0001a479
   19468:	20000d4c 	.word	0x20000d4c
   1946c:	00038574 	.word	0x00038574
   19470:	20000df4 	.word	0x20000df4
   19474:	0000ffff 	.word	0x0000ffff
   19478:	0001a68d 	.word	0x0001a68d
   1947c:	0001a031 	.word	0x0001a031
   19480:	0001a635 	.word	0x0001a635

00019484 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   19484:	b580      	push	{r7, lr}
   19486:	b08e      	sub	sp, #56	; 0x38
   19488:	af00      	add	r7, sp, #0
   1948a:	60f8      	str	r0, [r7, #12]
   1948c:	60b9      	str	r1, [r7, #8]
   1948e:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   19490:	4b48      	ldr	r3, [pc, #288]	; (195b4 <vTraceStoreMemMangEvent+0x130>)
   19492:	681b      	ldr	r3, [r3, #0]
   19494:	2b00      	cmp	r3, #0
   19496:	d100      	bne.n	1949a <vTraceStoreMemMangEvent+0x16>
   19498:	e088      	b.n	195ac <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   1949a:	687b      	ldr	r3, [r7, #4]
   1949c:	2b00      	cmp	r3, #0
   1949e:	da03      	bge.n	194a8 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   194a0:	687b      	ldr	r3, [r7, #4]
   194a2:	425b      	negs	r3, r3
   194a4:	637b      	str	r3, [r7, #52]	; 0x34
   194a6:	e001      	b.n	194ac <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   194a8:	687b      	ldr	r3, [r7, #4]
   194aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   194ac:	f3ef 8310 	mrs	r3, PRIMASK
   194b0:	61bb      	str	r3, [r7, #24]
  return(result);
   194b2:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   194b4:	633b      	str	r3, [r7, #48]	; 0x30
   194b6:	2301      	movs	r3, #1
   194b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   194ba:	69fb      	ldr	r3, [r7, #28]
   194bc:	f383 8810 	msr	PRIMASK, r3
   194c0:	4b3d      	ldr	r3, [pc, #244]	; (195b8 <vTraceStoreMemMangEvent+0x134>)
   194c2:	681b      	ldr	r3, [r3, #0]
   194c4:	1c5a      	adds	r2, r3, #1
   194c6:	4b3c      	ldr	r3, [pc, #240]	; (195b8 <vTraceStoreMemMangEvent+0x134>)
   194c8:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   194ca:	68bb      	ldr	r3, [r7, #8]
   194cc:	2b00      	cmp	r3, #0
   194ce:	d005      	beq.n	194dc <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   194d0:	4b3a      	ldr	r3, [pc, #232]	; (195bc <vTraceStoreMemMangEvent+0x138>)
   194d2:	681a      	ldr	r2, [r3, #0]
   194d4:	687b      	ldr	r3, [r7, #4]
   194d6:	18d2      	adds	r2, r2, r3
   194d8:	4b38      	ldr	r3, [pc, #224]	; (195bc <vTraceStoreMemMangEvent+0x138>)
   194da:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   194dc:	4b35      	ldr	r3, [pc, #212]	; (195b4 <vTraceStoreMemMangEvent+0x130>)
   194de:	681b      	ldr	r3, [r3, #0]
   194e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   194e2:	2b00      	cmp	r3, #0
   194e4:	d057      	beq.n	19596 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   194e6:	20ff      	movs	r0, #255	; 0xff
   194e8:	4b35      	ldr	r3, [pc, #212]	; (195c0 <vTraceStoreMemMangEvent+0x13c>)
   194ea:	4798      	blx	r3
   194ec:	0003      	movs	r3, r0
   194ee:	001a      	movs	r2, r3
   194f0:	232f      	movs	r3, #47	; 0x2f
   194f2:	18fb      	adds	r3, r7, r3
   194f4:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   194f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   194f8:	4a32      	ldr	r2, [pc, #200]	; (195c4 <vTraceStoreMemMangEvent+0x140>)
   194fa:	0019      	movs	r1, r3
   194fc:	0010      	movs	r0, r2
   194fe:	4b32      	ldr	r3, [pc, #200]	; (195c8 <vTraceStoreMemMangEvent+0x144>)
   19500:	4798      	blx	r3
   19502:	0002      	movs	r2, r0
   19504:	232c      	movs	r3, #44	; 0x2c
   19506:	18fb      	adds	r3, r7, r3
   19508:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   1950a:	4b30      	ldr	r3, [pc, #192]	; (195cc <vTraceStoreMemMangEvent+0x148>)
   1950c:	4798      	blx	r3
   1950e:	0003      	movs	r3, r0
   19510:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   19512:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19514:	2b00      	cmp	r3, #0
   19516:	d03e      	beq.n	19596 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   19518:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1951a:	222f      	movs	r2, #47	; 0x2f
   1951c:	18ba      	adds	r2, r7, r2
   1951e:	7812      	ldrb	r2, [r2, #0]
   19520:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   19522:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19524:	2200      	movs	r2, #0
   19526:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   19528:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1952a:	222c      	movs	r2, #44	; 0x2c
   1952c:	18ba      	adds	r2, r7, r2
   1952e:	8812      	ldrh	r2, [r2, #0]
   19530:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19532:	4b27      	ldr	r3, [pc, #156]	; (195d0 <vTraceStoreMemMangEvent+0x14c>)
   19534:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   19536:	68bb      	ldr	r3, [r7, #8]
   19538:	4a22      	ldr	r2, [pc, #136]	; (195c4 <vTraceStoreMemMangEvent+0x140>)
   1953a:	0019      	movs	r1, r3
   1953c:	0010      	movs	r0, r2
   1953e:	4b22      	ldr	r3, [pc, #136]	; (195c8 <vTraceStoreMemMangEvent+0x144>)
   19540:	4798      	blx	r3
   19542:	0002      	movs	r2, r0
   19544:	2326      	movs	r3, #38	; 0x26
   19546:	18fb      	adds	r3, r7, r3
   19548:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   1954a:	2325      	movs	r3, #37	; 0x25
   1954c:	18fb      	adds	r3, r7, r3
   1954e:	2200      	movs	r2, #0
   19550:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   19552:	4b1e      	ldr	r3, [pc, #120]	; (195cc <vTraceStoreMemMangEvent+0x148>)
   19554:	4798      	blx	r3
   19556:	0003      	movs	r3, r0
   19558:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   1955a:	6a3b      	ldr	r3, [r7, #32]
   1955c:	2b00      	cmp	r3, #0
   1955e:	d01a      	beq.n	19596 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   19560:	6a3b      	ldr	r3, [r7, #32]
   19562:	2226      	movs	r2, #38	; 0x26
   19564:	18ba      	adds	r2, r7, r2
   19566:	8812      	ldrh	r2, [r2, #0]
   19568:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   1956a:	6a3b      	ldr	r3, [r7, #32]
   1956c:	2225      	movs	r2, #37	; 0x25
   1956e:	18ba      	adds	r2, r7, r2
   19570:	7812      	ldrb	r2, [r2, #0]
   19572:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   19574:	68fb      	ldr	r3, [r7, #12]
   19576:	b2db      	uxtb	r3, r3
   19578:	3301      	adds	r3, #1
   1957a:	b2da      	uxtb	r2, r3
   1957c:	6a3b      	ldr	r3, [r7, #32]
   1957e:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   19580:	68fb      	ldr	r3, [r7, #12]
   19582:	b2da      	uxtb	r2, r3
   19584:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19586:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   19588:	4b11      	ldr	r3, [pc, #68]	; (195d0 <vTraceStoreMemMangEvent+0x14c>)
   1958a:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   1958c:	4b09      	ldr	r3, [pc, #36]	; (195b4 <vTraceStoreMemMangEvent+0x130>)
   1958e:	681b      	ldr	r3, [r3, #0]
   19590:	4a0a      	ldr	r2, [pc, #40]	; (195bc <vTraceStoreMemMangEvent+0x138>)
   19592:	6812      	ldr	r2, [r2, #0]
   19594:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   19596:	4b08      	ldr	r3, [pc, #32]	; (195b8 <vTraceStoreMemMangEvent+0x134>)
   19598:	681b      	ldr	r3, [r3, #0]
   1959a:	1e5a      	subs	r2, r3, #1
   1959c:	4b06      	ldr	r3, [pc, #24]	; (195b8 <vTraceStoreMemMangEvent+0x134>)
   1959e:	601a      	str	r2, [r3, #0]
   195a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   195a2:	617b      	str	r3, [r7, #20]
   195a4:	697b      	ldr	r3, [r7, #20]
   195a6:	f383 8810 	msr	PRIMASK, r3
   195aa:	e000      	b.n	195ae <vTraceStoreMemMangEvent+0x12a>
		return;
   195ac:	46c0      	nop			; (mov r8, r8)
}
   195ae:	46bd      	mov	sp, r7
   195b0:	b00e      	add	sp, #56	; 0x38
   195b2:	bd80      	pop	{r7, pc}
   195b4:	20000df4 	.word	0x20000df4
   195b8:	20000d4c 	.word	0x20000d4c
   195bc:	20000d60 	.word	0x20000d60
   195c0:	0001a68d 	.word	0x0001a68d
   195c4:	0000ffff 	.word	0x0000ffff
   195c8:	00019851 	.word	0x00019851
   195cc:	0001a031 	.word	0x0001a031
   195d0:	0001a635 	.word	0x0001a635

000195d4 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   195d4:	b590      	push	{r4, r7, lr}
   195d6:	b08b      	sub	sp, #44	; 0x2c
   195d8:	af00      	add	r7, sp, #0
   195da:	60f8      	str	r0, [r7, #12]
   195dc:	607a      	str	r2, [r7, #4]
   195de:	230b      	movs	r3, #11
   195e0:	18fb      	adds	r3, r7, r3
   195e2:	1c0a      	adds	r2, r1, #0
   195e4:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   195e6:	68fb      	ldr	r3, [r7, #12]
   195e8:	2bfe      	cmp	r3, #254	; 0xfe
   195ea:	d904      	bls.n	195f6 <prvTraceStoreKernelCall+0x22>
   195ec:	4b39      	ldr	r3, [pc, #228]	; (196d4 <prvTraceStoreKernelCall+0x100>)
   195ee:	0018      	movs	r0, r3
   195f0:	4b39      	ldr	r3, [pc, #228]	; (196d8 <prvTraceStoreKernelCall+0x104>)
   195f2:	4798      	blx	r3
   195f4:	e06b      	b.n	196ce <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   195f6:	230b      	movs	r3, #11
   195f8:	18fb      	adds	r3, r7, r3
   195fa:	781b      	ldrb	r3, [r3, #0]
   195fc:	2b08      	cmp	r3, #8
   195fe:	d904      	bls.n	1960a <prvTraceStoreKernelCall+0x36>
   19600:	4b36      	ldr	r3, [pc, #216]	; (196dc <prvTraceStoreKernelCall+0x108>)
   19602:	0018      	movs	r0, r3
   19604:	4b34      	ldr	r3, [pc, #208]	; (196d8 <prvTraceStoreKernelCall+0x104>)
   19606:	4798      	blx	r3
   19608:	e061      	b.n	196ce <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1960a:	4b35      	ldr	r3, [pc, #212]	; (196e0 <prvTraceStoreKernelCall+0x10c>)
   1960c:	681a      	ldr	r2, [r3, #0]
   1960e:	230b      	movs	r3, #11
   19610:	18fb      	adds	r3, r7, r3
   19612:	781b      	ldrb	r3, [r3, #0]
   19614:	2164      	movs	r1, #100	; 0x64
   19616:	18d3      	adds	r3, r2, r3
   19618:	185b      	adds	r3, r3, r1
   1961a:	781b      	ldrb	r3, [r3, #0]
   1961c:	001a      	movs	r2, r3
   1961e:	687b      	ldr	r3, [r7, #4]
   19620:	429a      	cmp	r2, r3
   19622:	d204      	bcs.n	1962e <prvTraceStoreKernelCall+0x5a>
   19624:	4b2f      	ldr	r3, [pc, #188]	; (196e4 <prvTraceStoreKernelCall+0x110>)
   19626:	0018      	movs	r0, r3
   19628:	4b2b      	ldr	r3, [pc, #172]	; (196d8 <prvTraceStoreKernelCall+0x104>)
   1962a:	4798      	blx	r3
   1962c:	e04f      	b.n	196ce <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   1962e:	4b2e      	ldr	r3, [pc, #184]	; (196e8 <prvTraceStoreKernelCall+0x114>)
   19630:	681b      	ldr	r3, [r3, #0]
   19632:	2b00      	cmp	r3, #0
   19634:	d004      	beq.n	19640 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   19636:	4b2d      	ldr	r3, [pc, #180]	; (196ec <prvTraceStoreKernelCall+0x118>)
   19638:	0018      	movs	r0, r3
   1963a:	4b27      	ldr	r3, [pc, #156]	; (196d8 <prvTraceStoreKernelCall+0x104>)
   1963c:	4798      	blx	r3
		return;
   1963e:	e046      	b.n	196ce <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   19640:	4b2b      	ldr	r3, [pc, #172]	; (196f0 <prvTraceStoreKernelCall+0x11c>)
   19642:	781b      	ldrb	r3, [r3, #0]
   19644:	2b00      	cmp	r3, #0
   19646:	d041      	beq.n	196cc <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19648:	f3ef 8310 	mrs	r3, PRIMASK
   1964c:	617b      	str	r3, [r7, #20]
  return(result);
   1964e:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   19650:	627b      	str	r3, [r7, #36]	; 0x24
   19652:	2301      	movs	r3, #1
   19654:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19656:	69bb      	ldr	r3, [r7, #24]
   19658:	f383 8810 	msr	PRIMASK, r3
   1965c:	4b22      	ldr	r3, [pc, #136]	; (196e8 <prvTraceStoreKernelCall+0x114>)
   1965e:	681b      	ldr	r3, [r3, #0]
   19660:	1c5a      	adds	r2, r3, #1
   19662:	4b21      	ldr	r3, [pc, #132]	; (196e8 <prvTraceStoreKernelCall+0x114>)
   19664:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   19666:	4b1e      	ldr	r3, [pc, #120]	; (196e0 <prvTraceStoreKernelCall+0x10c>)
   19668:	681b      	ldr	r3, [r3, #0]
   1966a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1966c:	2b00      	cmp	r3, #0
   1966e:	d022      	beq.n	196b6 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19670:	2322      	movs	r3, #34	; 0x22
   19672:	18fc      	adds	r4, r7, r3
   19674:	4b1f      	ldr	r3, [pc, #124]	; (196f4 <prvTraceStoreKernelCall+0x120>)
   19676:	0018      	movs	r0, r3
   19678:	4b1f      	ldr	r3, [pc, #124]	; (196f8 <prvTraceStoreKernelCall+0x124>)
   1967a:	4798      	blx	r3
   1967c:	0003      	movs	r3, r0
   1967e:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19680:	2321      	movs	r3, #33	; 0x21
   19682:	18fb      	adds	r3, r7, r3
   19684:	687a      	ldr	r2, [r7, #4]
   19686:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   19688:	4b1c      	ldr	r3, [pc, #112]	; (196fc <prvTraceStoreKernelCall+0x128>)
   1968a:	4798      	blx	r3
   1968c:	0003      	movs	r3, r0
   1968e:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19690:	69fb      	ldr	r3, [r7, #28]
   19692:	2b00      	cmp	r3, #0
   19694:	d00f      	beq.n	196b6 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   19696:	69fb      	ldr	r3, [r7, #28]
   19698:	2222      	movs	r2, #34	; 0x22
   1969a:	18ba      	adds	r2, r7, r2
   1969c:	8812      	ldrh	r2, [r2, #0]
   1969e:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   196a0:	68fb      	ldr	r3, [r7, #12]
   196a2:	b2da      	uxtb	r2, r3
   196a4:	69fb      	ldr	r3, [r7, #28]
   196a6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   196a8:	69fb      	ldr	r3, [r7, #28]
   196aa:	2221      	movs	r2, #33	; 0x21
   196ac:	18ba      	adds	r2, r7, r2
   196ae:	7812      	ldrb	r2, [r2, #0]
   196b0:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   196b2:	4b13      	ldr	r3, [pc, #76]	; (19700 <prvTraceStoreKernelCall+0x12c>)
   196b4:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   196b6:	4b0c      	ldr	r3, [pc, #48]	; (196e8 <prvTraceStoreKernelCall+0x114>)
   196b8:	681b      	ldr	r3, [r3, #0]
   196ba:	1e5a      	subs	r2, r3, #1
   196bc:	4b0a      	ldr	r3, [pc, #40]	; (196e8 <prvTraceStoreKernelCall+0x114>)
   196be:	601a      	str	r2, [r3, #0]
   196c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   196c2:	613b      	str	r3, [r7, #16]
   196c4:	693b      	ldr	r3, [r7, #16]
   196c6:	f383 8810 	msr	PRIMASK, r3
   196ca:	e000      	b.n	196ce <prvTraceStoreKernelCall+0xfa>
		return;
   196cc:	46c0      	nop			; (mov r8, r8)
}
   196ce:	46bd      	mov	sp, r7
   196d0:	b00b      	add	sp, #44	; 0x2c
   196d2:	bd90      	pop	{r4, r7, pc}
   196d4:	000385e4 	.word	0x000385e4
   196d8:	0001a479 	.word	0x0001a479
   196dc:	0003861c 	.word	0x0003861c
   196e0:	20000df4 	.word	0x20000df4
   196e4:	00038664 	.word	0x00038664
   196e8:	20000d4c 	.word	0x20000d4c
   196ec:	000386ac 	.word	0x000386ac
   196f0:	20000d58 	.word	0x20000d58
   196f4:	0000ffff 	.word	0x0000ffff
   196f8:	0001a68d 	.word	0x0001a68d
   196fc:	0001a031 	.word	0x0001a031
   19700:	0001a635 	.word	0x0001a635

00019704 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   19704:	b580      	push	{r7, lr}
   19706:	b08a      	sub	sp, #40	; 0x28
   19708:	af00      	add	r7, sp, #0
   1970a:	60f8      	str	r0, [r7, #12]
   1970c:	607a      	str	r2, [r7, #4]
   1970e:	603b      	str	r3, [r7, #0]
   19710:	230b      	movs	r3, #11
   19712:	18fb      	adds	r3, r7, r3
   19714:	1c0a      	adds	r2, r1, #0
   19716:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   19718:	68fb      	ldr	r3, [r7, #12]
   1971a:	2bfe      	cmp	r3, #254	; 0xfe
   1971c:	d904      	bls.n	19728 <prvTraceStoreKernelCallWithParam+0x24>
   1971e:	4b40      	ldr	r3, [pc, #256]	; (19820 <prvTraceStoreKernelCallWithParam+0x11c>)
   19720:	0018      	movs	r0, r3
   19722:	4b40      	ldr	r3, [pc, #256]	; (19824 <prvTraceStoreKernelCallWithParam+0x120>)
   19724:	4798      	blx	r3
   19726:	e077      	b.n	19818 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   19728:	230b      	movs	r3, #11
   1972a:	18fb      	adds	r3, r7, r3
   1972c:	781b      	ldrb	r3, [r3, #0]
   1972e:	2b08      	cmp	r3, #8
   19730:	d904      	bls.n	1973c <prvTraceStoreKernelCallWithParam+0x38>
   19732:	4b3d      	ldr	r3, [pc, #244]	; (19828 <prvTraceStoreKernelCallWithParam+0x124>)
   19734:	0018      	movs	r0, r3
   19736:	4b3b      	ldr	r3, [pc, #236]	; (19824 <prvTraceStoreKernelCallWithParam+0x120>)
   19738:	4798      	blx	r3
   1973a:	e06d      	b.n	19818 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   1973c:	4b3b      	ldr	r3, [pc, #236]	; (1982c <prvTraceStoreKernelCallWithParam+0x128>)
   1973e:	681a      	ldr	r2, [r3, #0]
   19740:	230b      	movs	r3, #11
   19742:	18fb      	adds	r3, r7, r3
   19744:	781b      	ldrb	r3, [r3, #0]
   19746:	2164      	movs	r1, #100	; 0x64
   19748:	18d3      	adds	r3, r2, r3
   1974a:	185b      	adds	r3, r3, r1
   1974c:	781b      	ldrb	r3, [r3, #0]
   1974e:	001a      	movs	r2, r3
   19750:	687b      	ldr	r3, [r7, #4]
   19752:	429a      	cmp	r2, r3
   19754:	d204      	bcs.n	19760 <prvTraceStoreKernelCallWithParam+0x5c>
   19756:	4b36      	ldr	r3, [pc, #216]	; (19830 <prvTraceStoreKernelCallWithParam+0x12c>)
   19758:	0018      	movs	r0, r3
   1975a:	4b32      	ldr	r3, [pc, #200]	; (19824 <prvTraceStoreKernelCallWithParam+0x120>)
   1975c:	4798      	blx	r3
   1975e:	e05b      	b.n	19818 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   19760:	4b34      	ldr	r3, [pc, #208]	; (19834 <prvTraceStoreKernelCallWithParam+0x130>)
   19762:	681b      	ldr	r3, [r3, #0]
   19764:	2b00      	cmp	r3, #0
   19766:	d004      	beq.n	19772 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   19768:	4b33      	ldr	r3, [pc, #204]	; (19838 <prvTraceStoreKernelCallWithParam+0x134>)
   1976a:	0018      	movs	r0, r3
   1976c:	4b2d      	ldr	r3, [pc, #180]	; (19824 <prvTraceStoreKernelCallWithParam+0x120>)
   1976e:	4798      	blx	r3
		return;
   19770:	e052      	b.n	19818 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19772:	f3ef 8310 	mrs	r3, PRIMASK
   19776:	617b      	str	r3, [r7, #20]
  return(result);
   19778:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   1977a:	627b      	str	r3, [r7, #36]	; 0x24
   1977c:	2301      	movs	r3, #1
   1977e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19780:	69bb      	ldr	r3, [r7, #24]
   19782:	f383 8810 	msr	PRIMASK, r3
   19786:	4b2b      	ldr	r3, [pc, #172]	; (19834 <prvTraceStoreKernelCallWithParam+0x130>)
   19788:	681b      	ldr	r3, [r3, #0]
   1978a:	1c5a      	adds	r2, r3, #1
   1978c:	4b29      	ldr	r3, [pc, #164]	; (19834 <prvTraceStoreKernelCallWithParam+0x130>)
   1978e:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   19790:	4b26      	ldr	r3, [pc, #152]	; (1982c <prvTraceStoreKernelCallWithParam+0x128>)
   19792:	681b      	ldr	r3, [r3, #0]
   19794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19796:	2b00      	cmp	r3, #0
   19798:	d034      	beq.n	19804 <prvTraceStoreKernelCallWithParam+0x100>
   1979a:	4b28      	ldr	r3, [pc, #160]	; (1983c <prvTraceStoreKernelCallWithParam+0x138>)
   1979c:	781b      	ldrb	r3, [r3, #0]
   1979e:	2b00      	cmp	r3, #0
   197a0:	d030      	beq.n	19804 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   197a2:	20ff      	movs	r0, #255	; 0xff
   197a4:	4b26      	ldr	r3, [pc, #152]	; (19840 <prvTraceStoreKernelCallWithParam+0x13c>)
   197a6:	4798      	blx	r3
   197a8:	0003      	movs	r3, r0
   197aa:	001a      	movs	r2, r3
   197ac:	2323      	movs	r3, #35	; 0x23
   197ae:	18fb      	adds	r3, r7, r3
   197b0:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   197b2:	683b      	ldr	r3, [r7, #0]
   197b4:	0019      	movs	r1, r3
   197b6:	20ff      	movs	r0, #255	; 0xff
   197b8:	4b22      	ldr	r3, [pc, #136]	; (19844 <prvTraceStoreKernelCallWithParam+0x140>)
   197ba:	4798      	blx	r3
   197bc:	0002      	movs	r2, r0
   197be:	2322      	movs	r3, #34	; 0x22
   197c0:	18fb      	adds	r3, r7, r3
   197c2:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   197c4:	2321      	movs	r3, #33	; 0x21
   197c6:	18fb      	adds	r3, r7, r3
   197c8:	687a      	ldr	r2, [r7, #4]
   197ca:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   197cc:	4b1e      	ldr	r3, [pc, #120]	; (19848 <prvTraceStoreKernelCallWithParam+0x144>)
   197ce:	4798      	blx	r3
   197d0:	0003      	movs	r3, r0
   197d2:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   197d4:	69fb      	ldr	r3, [r7, #28]
   197d6:	2b00      	cmp	r3, #0
   197d8:	d014      	beq.n	19804 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   197da:	69fb      	ldr	r3, [r7, #28]
   197dc:	2223      	movs	r2, #35	; 0x23
   197de:	18ba      	adds	r2, r7, r2
   197e0:	7812      	ldrb	r2, [r2, #0]
   197e2:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   197e4:	68fb      	ldr	r3, [r7, #12]
   197e6:	b2da      	uxtb	r2, r3
   197e8:	69fb      	ldr	r3, [r7, #28]
   197ea:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   197ec:	69fb      	ldr	r3, [r7, #28]
   197ee:	2221      	movs	r2, #33	; 0x21
   197f0:	18ba      	adds	r2, r7, r2
   197f2:	7812      	ldrb	r2, [r2, #0]
   197f4:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   197f6:	69fb      	ldr	r3, [r7, #28]
   197f8:	2222      	movs	r2, #34	; 0x22
   197fa:	18ba      	adds	r2, r7, r2
   197fc:	7812      	ldrb	r2, [r2, #0]
   197fe:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   19800:	4b12      	ldr	r3, [pc, #72]	; (1984c <prvTraceStoreKernelCallWithParam+0x148>)
   19802:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19804:	4b0b      	ldr	r3, [pc, #44]	; (19834 <prvTraceStoreKernelCallWithParam+0x130>)
   19806:	681b      	ldr	r3, [r3, #0]
   19808:	1e5a      	subs	r2, r3, #1
   1980a:	4b0a      	ldr	r3, [pc, #40]	; (19834 <prvTraceStoreKernelCallWithParam+0x130>)
   1980c:	601a      	str	r2, [r3, #0]
   1980e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19810:	613b      	str	r3, [r7, #16]
   19812:	693b      	ldr	r3, [r7, #16]
   19814:	f383 8810 	msr	PRIMASK, r3
}
   19818:	46bd      	mov	sp, r7
   1981a:	b00a      	add	sp, #40	; 0x28
   1981c:	bd80      	pop	{r7, pc}
   1981e:	46c0      	nop			; (mov r8, r8)
   19820:	000386e4 	.word	0x000386e4
   19824:	0001a479 	.word	0x0001a479
   19828:	00038724 	.word	0x00038724
   1982c:	20000df4 	.word	0x20000df4
   19830:	00038774 	.word	0x00038774
   19834:	20000d4c 	.word	0x20000d4c
   19838:	000387c4 	.word	0x000387c4
   1983c:	20000d58 	.word	0x20000d58
   19840:	0001a68d 	.word	0x0001a68d
   19844:	00019851 	.word	0x00019851
   19848:	0001a031 	.word	0x0001a031
   1984c:	0001a635 	.word	0x0001a635

00019850 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   19850:	b580      	push	{r7, lr}
   19852:	b084      	sub	sp, #16
   19854:	af00      	add	r7, sp, #0
   19856:	6078      	str	r0, [r7, #4]
   19858:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   1985a:	687b      	ldr	r3, [r7, #4]
   1985c:	2bff      	cmp	r3, #255	; 0xff
   1985e:	d009      	beq.n	19874 <prvTraceGetParam+0x24>
   19860:	687b      	ldr	r3, [r7, #4]
   19862:	4a19      	ldr	r2, [pc, #100]	; (198c8 <prvTraceGetParam+0x78>)
   19864:	4293      	cmp	r3, r2
   19866:	d005      	beq.n	19874 <prvTraceGetParam+0x24>
   19868:	4b18      	ldr	r3, [pc, #96]	; (198cc <prvTraceGetParam+0x7c>)
   1986a:	0018      	movs	r0, r3
   1986c:	4b18      	ldr	r3, [pc, #96]	; (198d0 <prvTraceGetParam+0x80>)
   1986e:	4798      	blx	r3
   19870:	683b      	ldr	r3, [r7, #0]
   19872:	e024      	b.n	198be <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   19874:	683a      	ldr	r2, [r7, #0]
   19876:	687b      	ldr	r3, [r7, #4]
   19878:	429a      	cmp	r2, r3
   1987a:	d801      	bhi.n	19880 <prvTraceGetParam+0x30>
	{
		return param;
   1987c:	683b      	ldr	r3, [r7, #0]
   1987e:	e01e      	b.n	198be <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   19880:	4b14      	ldr	r3, [pc, #80]	; (198d4 <prvTraceGetParam+0x84>)
   19882:	4798      	blx	r3
   19884:	0003      	movs	r3, r0
   19886:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   19888:	68fb      	ldr	r3, [r7, #12]
   1988a:	2b00      	cmp	r3, #0
   1988c:	d014      	beq.n	198b8 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   1988e:	68fb      	ldr	r3, [r7, #12]
   19890:	2201      	movs	r2, #1
   19892:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   19894:	687b      	ldr	r3, [r7, #4]
   19896:	43db      	mvns	r3, r3
   19898:	683a      	ldr	r2, [r7, #0]
   1989a:	4013      	ands	r3, r2
   1989c:	0a1b      	lsrs	r3, r3, #8
   1989e:	b2da      	uxtb	r2, r3
   198a0:	68fb      	ldr	r3, [r7, #12]
   198a2:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   198a4:	687b      	ldr	r3, [r7, #4]
   198a6:	43db      	mvns	r3, r3
   198a8:	683a      	ldr	r2, [r7, #0]
   198aa:	4013      	ands	r3, r2
   198ac:	0c1b      	lsrs	r3, r3, #16
   198ae:	b29a      	uxth	r2, r3
   198b0:	68fb      	ldr	r3, [r7, #12]
   198b2:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   198b4:	4b08      	ldr	r3, [pc, #32]	; (198d8 <prvTraceGetParam+0x88>)
   198b6:	4798      	blx	r3
		}

		return param & param_max;
   198b8:	683b      	ldr	r3, [r7, #0]
   198ba:	687a      	ldr	r2, [r7, #4]
   198bc:	4013      	ands	r3, r2
	}
}
   198be:	0018      	movs	r0, r3
   198c0:	46bd      	mov	sp, r7
   198c2:	b004      	add	sp, #16
   198c4:	bd80      	pop	{r7, pc}
   198c6:	46c0      	nop			; (mov r8, r8)
   198c8:	0000ffff 	.word	0x0000ffff
   198cc:	000387fc 	.word	0x000387fc
   198d0:	0001a479 	.word	0x0001a479
   198d4:	0001a031 	.word	0x0001a031
   198d8:	0001a635 	.word	0x0001a635

000198dc <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   198dc:	b580      	push	{r7, lr}
   198de:	b08a      	sub	sp, #40	; 0x28
   198e0:	af00      	add	r7, sp, #0
   198e2:	6078      	str	r0, [r7, #4]
   198e4:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   198e6:	2326      	movs	r3, #38	; 0x26
   198e8:	18fb      	adds	r3, r7, r3
   198ea:	2200      	movs	r2, #0
   198ec:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   198ee:	687b      	ldr	r3, [r7, #4]
   198f0:	2bfe      	cmp	r3, #254	; 0xfe
   198f2:	d904      	bls.n	198fe <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   198f4:	4b2d      	ldr	r3, [pc, #180]	; (199ac <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   198f6:	0018      	movs	r0, r3
   198f8:	4b2d      	ldr	r3, [pc, #180]	; (199b0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   198fa:	4798      	blx	r3
   198fc:	e053      	b.n	199a6 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   198fe:	4b2d      	ldr	r3, [pc, #180]	; (199b4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19900:	681b      	ldr	r3, [r3, #0]
   19902:	2b00      	cmp	r3, #0
   19904:	d004      	beq.n	19910 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   19906:	4b2c      	ldr	r3, [pc, #176]	; (199b8 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   19908:	0018      	movs	r0, r3
   1990a:	4b29      	ldr	r3, [pc, #164]	; (199b0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1990c:	4798      	blx	r3
		return;
   1990e:	e04a      	b.n	199a6 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19910:	f3ef 8310 	mrs	r3, PRIMASK
   19914:	613b      	str	r3, [r7, #16]
  return(result);
   19916:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   19918:	623b      	str	r3, [r7, #32]
   1991a:	2301      	movs	r3, #1
   1991c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1991e:	697b      	ldr	r3, [r7, #20]
   19920:	f383 8810 	msr	PRIMASK, r3
   19924:	4b23      	ldr	r3, [pc, #140]	; (199b4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19926:	681b      	ldr	r3, [r3, #0]
   19928:	1c5a      	adds	r2, r3, #1
   1992a:	4b22      	ldr	r3, [pc, #136]	; (199b4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1992c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1992e:	4b23      	ldr	r3, [pc, #140]	; (199bc <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   19930:	681b      	ldr	r3, [r3, #0]
   19932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19934:	2b00      	cmp	r3, #0
   19936:	d02c      	beq.n	19992 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   19938:	4b21      	ldr	r3, [pc, #132]	; (199c0 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   1993a:	781b      	ldrb	r3, [r3, #0]
   1993c:	2b00      	cmp	r3, #0
   1993e:	d028      	beq.n	19992 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   19940:	20ff      	movs	r0, #255	; 0xff
   19942:	4b20      	ldr	r3, [pc, #128]	; (199c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   19944:	4798      	blx	r3
   19946:	0003      	movs	r3, r0
   19948:	001a      	movs	r2, r3
   1994a:	231f      	movs	r3, #31
   1994c:	18fb      	adds	r3, r7, r3
   1994e:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   19950:	683b      	ldr	r3, [r7, #0]
   19952:	4a1d      	ldr	r2, [pc, #116]	; (199c8 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   19954:	0019      	movs	r1, r3
   19956:	0010      	movs	r0, r2
   19958:	4b1c      	ldr	r3, [pc, #112]	; (199cc <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   1995a:	4798      	blx	r3
   1995c:	0002      	movs	r2, r0
   1995e:	2326      	movs	r3, #38	; 0x26
   19960:	18fb      	adds	r3, r7, r3
   19962:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   19964:	4b1a      	ldr	r3, [pc, #104]	; (199d0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   19966:	4798      	blx	r3
   19968:	0003      	movs	r3, r0
   1996a:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   1996c:	69bb      	ldr	r3, [r7, #24]
   1996e:	2b00      	cmp	r3, #0
   19970:	d00f      	beq.n	19992 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   19972:	69bb      	ldr	r3, [r7, #24]
   19974:	221f      	movs	r2, #31
   19976:	18ba      	adds	r2, r7, r2
   19978:	7812      	ldrb	r2, [r2, #0]
   1997a:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   1997c:	687b      	ldr	r3, [r7, #4]
   1997e:	b2da      	uxtb	r2, r3
   19980:	69bb      	ldr	r3, [r7, #24]
   19982:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   19984:	69bb      	ldr	r3, [r7, #24]
   19986:	2226      	movs	r2, #38	; 0x26
   19988:	18ba      	adds	r2, r7, r2
   1998a:	8812      	ldrh	r2, [r2, #0]
   1998c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1998e:	4b11      	ldr	r3, [pc, #68]	; (199d4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   19990:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19992:	4b08      	ldr	r3, [pc, #32]	; (199b4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19994:	681b      	ldr	r3, [r3, #0]
   19996:	1e5a      	subs	r2, r3, #1
   19998:	4b06      	ldr	r3, [pc, #24]	; (199b4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1999a:	601a      	str	r2, [r3, #0]
   1999c:	6a3b      	ldr	r3, [r7, #32]
   1999e:	60fb      	str	r3, [r7, #12]
   199a0:	68fb      	ldr	r3, [r7, #12]
   199a2:	f383 8810 	msr	PRIMASK, r3
}
   199a6:	46bd      	mov	sp, r7
   199a8:	b00a      	add	sp, #40	; 0x28
   199aa:	bd80      	pop	{r7, pc}
   199ac:	00038838 	.word	0x00038838
   199b0:	0001a479 	.word	0x0001a479
   199b4:	20000d4c 	.word	0x20000d4c
   199b8:	00038890 	.word	0x00038890
   199bc:	20000df4 	.word	0x20000df4
   199c0:	20000d58 	.word	0x20000d58
   199c4:	0001a68d 	.word	0x0001a68d
   199c8:	0000ffff 	.word	0x0000ffff
   199cc:	00019851 	.word	0x00019851
   199d0:	0001a031 	.word	0x0001a031
   199d4:	0001a635 	.word	0x0001a635

000199d8 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   199d8:	b590      	push	{r4, r7, lr}
   199da:	b089      	sub	sp, #36	; 0x24
   199dc:	af00      	add	r7, sp, #0
   199de:	0002      	movs	r2, r0
   199e0:	1dfb      	adds	r3, r7, #7
   199e2:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   199e4:	1dfb      	adds	r3, r7, #7
   199e6:	781b      	ldrb	r3, [r3, #0]
   199e8:	2b0f      	cmp	r3, #15
   199ea:	d904      	bls.n	199f6 <prvTraceStoreTaskswitch+0x1e>
   199ec:	4b34      	ldr	r3, [pc, #208]	; (19ac0 <prvTraceStoreTaskswitch+0xe8>)
   199ee:	0018      	movs	r0, r3
   199f0:	4b34      	ldr	r3, [pc, #208]	; (19ac4 <prvTraceStoreTaskswitch+0xec>)
   199f2:	4798      	blx	r3
   199f4:	e061      	b.n	19aba <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   199f6:	f3ef 8310 	mrs	r3, PRIMASK
   199fa:	60fb      	str	r3, [r7, #12]
  return(result);
   199fc:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   199fe:	61fb      	str	r3, [r7, #28]
   19a00:	2301      	movs	r3, #1
   19a02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19a04:	693b      	ldr	r3, [r7, #16]
   19a06:	f383 8810 	msr	PRIMASK, r3
   19a0a:	4b2f      	ldr	r3, [pc, #188]	; (19ac8 <prvTraceStoreTaskswitch+0xf0>)
   19a0c:	681b      	ldr	r3, [r3, #0]
   19a0e:	1c5a      	adds	r2, r3, #1
   19a10:	4b2d      	ldr	r3, [pc, #180]	; (19ac8 <prvTraceStoreTaskswitch+0xf0>)
   19a12:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   19a14:	4b2d      	ldr	r3, [pc, #180]	; (19acc <prvTraceStoreTaskswitch+0xf4>)
   19a16:	781b      	ldrb	r3, [r3, #0]
   19a18:	1dfa      	adds	r2, r7, #7
   19a1a:	7812      	ldrb	r2, [r2, #0]
   19a1c:	429a      	cmp	r2, r3
   19a1e:	d042      	beq.n	19aa6 <prvTraceStoreTaskswitch+0xce>
   19a20:	4b2b      	ldr	r3, [pc, #172]	; (19ad0 <prvTraceStoreTaskswitch+0xf8>)
   19a22:	681b      	ldr	r3, [r3, #0]
   19a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19a26:	2b00      	cmp	r3, #0
   19a28:	d03d      	beq.n	19aa6 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   19a2a:	4b2a      	ldr	r3, [pc, #168]	; (19ad4 <prvTraceStoreTaskswitch+0xfc>)
   19a2c:	2200      	movs	r2, #0
   19a2e:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19a30:	231a      	movs	r3, #26
   19a32:	18fc      	adds	r4, r7, r3
   19a34:	4b28      	ldr	r3, [pc, #160]	; (19ad8 <prvTraceStoreTaskswitch+0x100>)
   19a36:	0018      	movs	r0, r3
   19a38:	4b28      	ldr	r3, [pc, #160]	; (19adc <prvTraceStoreTaskswitch+0x104>)
   19a3a:	4798      	blx	r3
   19a3c:	0003      	movs	r3, r0
   19a3e:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   19a40:	4b22      	ldr	r3, [pc, #136]	; (19acc <prvTraceStoreTaskswitch+0xf4>)
   19a42:	1dfa      	adds	r2, r7, #7
   19a44:	7812      	ldrb	r2, [r2, #0]
   19a46:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   19a48:	2319      	movs	r3, #25
   19a4a:	18fb      	adds	r3, r7, r3
   19a4c:	4a1f      	ldr	r2, [pc, #124]	; (19acc <prvTraceStoreTaskswitch+0xf4>)
   19a4e:	7812      	ldrb	r2, [r2, #0]
   19a50:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   19a52:	4b23      	ldr	r3, [pc, #140]	; (19ae0 <prvTraceStoreTaskswitch+0x108>)
   19a54:	4798      	blx	r3
   19a56:	0003      	movs	r3, r0
   19a58:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   19a5a:	697b      	ldr	r3, [r7, #20]
   19a5c:	2b00      	cmp	r3, #0
   19a5e:	d022      	beq.n	19aa6 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   19a60:	4b1a      	ldr	r3, [pc, #104]	; (19acc <prvTraceStoreTaskswitch+0xf4>)
   19a62:	781b      	ldrb	r3, [r3, #0]
   19a64:	0019      	movs	r1, r3
   19a66:	2003      	movs	r0, #3
   19a68:	4b1e      	ldr	r3, [pc, #120]	; (19ae4 <prvTraceStoreTaskswitch+0x10c>)
   19a6a:	4798      	blx	r3
   19a6c:	0003      	movs	r3, r0
   19a6e:	2b01      	cmp	r3, #1
   19a70:	d103      	bne.n	19a7a <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   19a72:	697b      	ldr	r3, [r7, #20]
   19a74:	2207      	movs	r2, #7
   19a76:	701a      	strb	r2, [r3, #0]
   19a78:	e002      	b.n	19a80 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   19a7a:	697b      	ldr	r3, [r7, #20]
   19a7c:	2206      	movs	r2, #6
   19a7e:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   19a80:	697b      	ldr	r3, [r7, #20]
   19a82:	221a      	movs	r2, #26
   19a84:	18ba      	adds	r2, r7, r2
   19a86:	8812      	ldrh	r2, [r2, #0]
   19a88:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   19a8a:	697b      	ldr	r3, [r7, #20]
   19a8c:	2219      	movs	r2, #25
   19a8e:	18ba      	adds	r2, r7, r2
   19a90:	7812      	ldrb	r2, [r2, #0]
   19a92:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   19a94:	4b0d      	ldr	r3, [pc, #52]	; (19acc <prvTraceStoreTaskswitch+0xf4>)
   19a96:	781b      	ldrb	r3, [r3, #0]
   19a98:	2201      	movs	r2, #1
   19a9a:	0019      	movs	r1, r3
   19a9c:	2003      	movs	r0, #3
   19a9e:	4b12      	ldr	r3, [pc, #72]	; (19ae8 <prvTraceStoreTaskswitch+0x110>)
   19aa0:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   19aa2:	4b12      	ldr	r3, [pc, #72]	; (19aec <prvTraceStoreTaskswitch+0x114>)
   19aa4:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   19aa6:	4b08      	ldr	r3, [pc, #32]	; (19ac8 <prvTraceStoreTaskswitch+0xf0>)
   19aa8:	681b      	ldr	r3, [r3, #0]
   19aaa:	1e5a      	subs	r2, r3, #1
   19aac:	4b06      	ldr	r3, [pc, #24]	; (19ac8 <prvTraceStoreTaskswitch+0xf0>)
   19aae:	601a      	str	r2, [r3, #0]
   19ab0:	69fb      	ldr	r3, [r7, #28]
   19ab2:	60bb      	str	r3, [r7, #8]
   19ab4:	68bb      	ldr	r3, [r7, #8]
   19ab6:	f383 8810 	msr	PRIMASK, r3
}
   19aba:	46bd      	mov	sp, r7
   19abc:	b009      	add	sp, #36	; 0x24
   19abe:	bd90      	pop	{r4, r7, pc}
   19ac0:	000388c8 	.word	0x000388c8
   19ac4:	0001a479 	.word	0x0001a479
   19ac8:	20000d4c 	.word	0x20000d4c
   19acc:	20000d58 	.word	0x20000d58
   19ad0:	20000df4 	.word	0x20000df4
   19ad4:	20000d38 	.word	0x20000d38
   19ad8:	0000ffff 	.word	0x0000ffff
   19adc:	0001a68d 	.word	0x0001a68d
   19ae0:	0001a031 	.word	0x0001a031
   19ae4:	00019cd5 	.word	0x00019cd5
   19ae8:	00019c31 	.word	0x00019c31
   19aec:	0001a635 	.word	0x0001a635

00019af0 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19af0:	b590      	push	{r4, r7, lr}
   19af2:	b083      	sub	sp, #12
   19af4:	af00      	add	r7, sp, #0
   19af6:	0004      	movs	r4, r0
   19af8:	0008      	movs	r0, r1
   19afa:	0011      	movs	r1, r2
   19afc:	1dfb      	adds	r3, r7, #7
   19afe:	1c22      	adds	r2, r4, #0
   19b00:	701a      	strb	r2, [r3, #0]
   19b02:	1dbb      	adds	r3, r7, #6
   19b04:	1c02      	adds	r2, r0, #0
   19b06:	701a      	strb	r2, [r3, #0]
   19b08:	1d7b      	adds	r3, r7, #5
   19b0a:	1c0a      	adds	r2, r1, #0
   19b0c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19b0e:	1dfb      	adds	r3, r7, #7
   19b10:	781b      	ldrb	r3, [r3, #0]
   19b12:	2b08      	cmp	r3, #8
   19b14:	d904      	bls.n	19b20 <prvTraceSetPriorityProperty+0x30>
   19b16:	4b1a      	ldr	r3, [pc, #104]	; (19b80 <prvTraceSetPriorityProperty+0x90>)
   19b18:	0018      	movs	r0, r3
   19b1a:	4b1a      	ldr	r3, [pc, #104]	; (19b84 <prvTraceSetPriorityProperty+0x94>)
   19b1c:	4798      	blx	r3
   19b1e:	e02c      	b.n	19b7a <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19b20:	4b19      	ldr	r3, [pc, #100]	; (19b88 <prvTraceSetPriorityProperty+0x98>)
   19b22:	681a      	ldr	r2, [r3, #0]
   19b24:	1dfb      	adds	r3, r7, #7
   19b26:	781b      	ldrb	r3, [r3, #0]
   19b28:	2164      	movs	r1, #100	; 0x64
   19b2a:	18d3      	adds	r3, r2, r3
   19b2c:	185b      	adds	r3, r3, r1
   19b2e:	781b      	ldrb	r3, [r3, #0]
   19b30:	1dba      	adds	r2, r7, #6
   19b32:	7812      	ldrb	r2, [r2, #0]
   19b34:	429a      	cmp	r2, r3
   19b36:	d904      	bls.n	19b42 <prvTraceSetPriorityProperty+0x52>
   19b38:	4b14      	ldr	r3, [pc, #80]	; (19b8c <prvTraceSetPriorityProperty+0x9c>)
   19b3a:	0018      	movs	r0, r3
   19b3c:	4b11      	ldr	r3, [pc, #68]	; (19b84 <prvTraceSetPriorityProperty+0x94>)
   19b3e:	4798      	blx	r3
   19b40:	e01b      	b.n	19b7a <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   19b42:	4b11      	ldr	r3, [pc, #68]	; (19b88 <prvTraceSetPriorityProperty+0x98>)
   19b44:	681c      	ldr	r4, [r3, #0]
   19b46:	1dfb      	adds	r3, r7, #7
   19b48:	781a      	ldrb	r2, [r3, #0]
   19b4a:	1dbb      	adds	r3, r7, #6
   19b4c:	781b      	ldrb	r3, [r3, #0]
   19b4e:	0011      	movs	r1, r2
   19b50:	0018      	movs	r0, r3
   19b52:	4b0f      	ldr	r3, [pc, #60]	; (19b90 <prvTraceSetPriorityProperty+0xa0>)
   19b54:	4798      	blx	r3
   19b56:	0003      	movs	r3, r0
   19b58:	0018      	movs	r0, r3
   19b5a:	4b0b      	ldr	r3, [pc, #44]	; (19b88 <prvTraceSetPriorityProperty+0x98>)
   19b5c:	681a      	ldr	r2, [r3, #0]
   19b5e:	1dfb      	adds	r3, r7, #7
   19b60:	781b      	ldrb	r3, [r3, #0]
   19b62:	2170      	movs	r1, #112	; 0x70
   19b64:	18d3      	adds	r3, r2, r3
   19b66:	185b      	adds	r3, r3, r1
   19b68:	781b      	ldrb	r3, [r3, #0]
   19b6a:	18c3      	adds	r3, r0, r3
   19b6c:	3301      	adds	r3, #1
   19b6e:	229c      	movs	r2, #156	; 0x9c
   19b70:	18e3      	adds	r3, r4, r3
   19b72:	189b      	adds	r3, r3, r2
   19b74:	1d7a      	adds	r2, r7, #5
   19b76:	7812      	ldrb	r2, [r2, #0]
   19b78:	701a      	strb	r2, [r3, #0]
}
   19b7a:	46bd      	mov	sp, r7
   19b7c:	b003      	add	sp, #12
   19b7e:	bd90      	pop	{r4, r7, pc}
   19b80:	00038a5c 	.word	0x00038a5c
   19b84:	0001a479 	.word	0x0001a479
   19b88:	20000df4 	.word	0x20000df4
   19b8c:	00038aa8 	.word	0x00038aa8
   19b90:	0001a085 	.word	0x0001a085

00019b94 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   19b94:	b590      	push	{r4, r7, lr}
   19b96:	b083      	sub	sp, #12
   19b98:	af00      	add	r7, sp, #0
   19b9a:	0002      	movs	r2, r0
   19b9c:	1dfb      	adds	r3, r7, #7
   19b9e:	701a      	strb	r2, [r3, #0]
   19ba0:	1dbb      	adds	r3, r7, #6
   19ba2:	1c0a      	adds	r2, r1, #0
   19ba4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19ba6:	1dfb      	adds	r3, r7, #7
   19ba8:	781b      	ldrb	r3, [r3, #0]
   19baa:	2b08      	cmp	r3, #8
   19bac:	d905      	bls.n	19bba <prvTraceGetPriorityProperty+0x26>
   19bae:	4b1b      	ldr	r3, [pc, #108]	; (19c1c <prvTraceGetPriorityProperty+0x88>)
   19bb0:	0018      	movs	r0, r3
   19bb2:	4b1b      	ldr	r3, [pc, #108]	; (19c20 <prvTraceGetPriorityProperty+0x8c>)
   19bb4:	4798      	blx	r3
   19bb6:	2300      	movs	r3, #0
   19bb8:	e02b      	b.n	19c12 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19bba:	4b1a      	ldr	r3, [pc, #104]	; (19c24 <prvTraceGetPriorityProperty+0x90>)
   19bbc:	681a      	ldr	r2, [r3, #0]
   19bbe:	1dfb      	adds	r3, r7, #7
   19bc0:	781b      	ldrb	r3, [r3, #0]
   19bc2:	2164      	movs	r1, #100	; 0x64
   19bc4:	18d3      	adds	r3, r2, r3
   19bc6:	185b      	adds	r3, r3, r1
   19bc8:	781b      	ldrb	r3, [r3, #0]
   19bca:	1dba      	adds	r2, r7, #6
   19bcc:	7812      	ldrb	r2, [r2, #0]
   19bce:	429a      	cmp	r2, r3
   19bd0:	d905      	bls.n	19bde <prvTraceGetPriorityProperty+0x4a>
   19bd2:	4b15      	ldr	r3, [pc, #84]	; (19c28 <prvTraceGetPriorityProperty+0x94>)
   19bd4:	0018      	movs	r0, r3
   19bd6:	4b12      	ldr	r3, [pc, #72]	; (19c20 <prvTraceGetPriorityProperty+0x8c>)
   19bd8:	4798      	blx	r3
   19bda:	2300      	movs	r3, #0
   19bdc:	e019      	b.n	19c12 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   19bde:	4b11      	ldr	r3, [pc, #68]	; (19c24 <prvTraceGetPriorityProperty+0x90>)
   19be0:	681c      	ldr	r4, [r3, #0]
   19be2:	1dfb      	adds	r3, r7, #7
   19be4:	781a      	ldrb	r2, [r3, #0]
   19be6:	1dbb      	adds	r3, r7, #6
   19be8:	781b      	ldrb	r3, [r3, #0]
   19bea:	0011      	movs	r1, r2
   19bec:	0018      	movs	r0, r3
   19bee:	4b0f      	ldr	r3, [pc, #60]	; (19c2c <prvTraceGetPriorityProperty+0x98>)
   19bf0:	4798      	blx	r3
   19bf2:	0003      	movs	r3, r0
   19bf4:	0018      	movs	r0, r3
   19bf6:	4b0b      	ldr	r3, [pc, #44]	; (19c24 <prvTraceGetPriorityProperty+0x90>)
   19bf8:	681a      	ldr	r2, [r3, #0]
   19bfa:	1dfb      	adds	r3, r7, #7
   19bfc:	781b      	ldrb	r3, [r3, #0]
   19bfe:	2170      	movs	r1, #112	; 0x70
   19c00:	18d3      	adds	r3, r2, r3
   19c02:	185b      	adds	r3, r3, r1
   19c04:	781b      	ldrb	r3, [r3, #0]
   19c06:	18c3      	adds	r3, r0, r3
   19c08:	3301      	adds	r3, #1
   19c0a:	229c      	movs	r2, #156	; 0x9c
   19c0c:	18e3      	adds	r3, r4, r3
   19c0e:	189b      	adds	r3, r3, r2
   19c10:	781b      	ldrb	r3, [r3, #0]
}
   19c12:	0018      	movs	r0, r3
   19c14:	46bd      	mov	sp, r7
   19c16:	b003      	add	sp, #12
   19c18:	bd90      	pop	{r4, r7, pc}
   19c1a:	46c0      	nop			; (mov r8, r8)
   19c1c:	00038ae8 	.word	0x00038ae8
   19c20:	0001a479 	.word	0x0001a479
   19c24:	20000df4 	.word	0x20000df4
   19c28:	00038b34 	.word	0x00038b34
   19c2c:	0001a085 	.word	0x0001a085

00019c30 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19c30:	b590      	push	{r4, r7, lr}
   19c32:	b083      	sub	sp, #12
   19c34:	af00      	add	r7, sp, #0
   19c36:	0004      	movs	r4, r0
   19c38:	0008      	movs	r0, r1
   19c3a:	0011      	movs	r1, r2
   19c3c:	1dfb      	adds	r3, r7, #7
   19c3e:	1c22      	adds	r2, r4, #0
   19c40:	701a      	strb	r2, [r3, #0]
   19c42:	1dbb      	adds	r3, r7, #6
   19c44:	1c02      	adds	r2, r0, #0
   19c46:	701a      	strb	r2, [r3, #0]
   19c48:	1d7b      	adds	r3, r7, #5
   19c4a:	1c0a      	adds	r2, r1, #0
   19c4c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19c4e:	1dfb      	adds	r3, r7, #7
   19c50:	781b      	ldrb	r3, [r3, #0]
   19c52:	2b08      	cmp	r3, #8
   19c54:	d904      	bls.n	19c60 <prvTraceSetObjectState+0x30>
   19c56:	4b1a      	ldr	r3, [pc, #104]	; (19cc0 <prvTraceSetObjectState+0x90>)
   19c58:	0018      	movs	r0, r3
   19c5a:	4b1a      	ldr	r3, [pc, #104]	; (19cc4 <prvTraceSetObjectState+0x94>)
   19c5c:	4798      	blx	r3
   19c5e:	e02b      	b.n	19cb8 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19c60:	4b19      	ldr	r3, [pc, #100]	; (19cc8 <prvTraceSetObjectState+0x98>)
   19c62:	681a      	ldr	r2, [r3, #0]
   19c64:	1dfb      	adds	r3, r7, #7
   19c66:	781b      	ldrb	r3, [r3, #0]
   19c68:	2164      	movs	r1, #100	; 0x64
   19c6a:	18d3      	adds	r3, r2, r3
   19c6c:	185b      	adds	r3, r3, r1
   19c6e:	781b      	ldrb	r3, [r3, #0]
   19c70:	1dba      	adds	r2, r7, #6
   19c72:	7812      	ldrb	r2, [r2, #0]
   19c74:	429a      	cmp	r2, r3
   19c76:	d904      	bls.n	19c82 <prvTraceSetObjectState+0x52>
   19c78:	4b14      	ldr	r3, [pc, #80]	; (19ccc <prvTraceSetObjectState+0x9c>)
   19c7a:	0018      	movs	r0, r3
   19c7c:	4b11      	ldr	r3, [pc, #68]	; (19cc4 <prvTraceSetObjectState+0x94>)
   19c7e:	4798      	blx	r3
   19c80:	e01a      	b.n	19cb8 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   19c82:	4b11      	ldr	r3, [pc, #68]	; (19cc8 <prvTraceSetObjectState+0x98>)
   19c84:	681c      	ldr	r4, [r3, #0]
   19c86:	1dfb      	adds	r3, r7, #7
   19c88:	781a      	ldrb	r2, [r3, #0]
   19c8a:	1dbb      	adds	r3, r7, #6
   19c8c:	781b      	ldrb	r3, [r3, #0]
   19c8e:	0011      	movs	r1, r2
   19c90:	0018      	movs	r0, r3
   19c92:	4b0f      	ldr	r3, [pc, #60]	; (19cd0 <prvTraceSetObjectState+0xa0>)
   19c94:	4798      	blx	r3
   19c96:	0003      	movs	r3, r0
   19c98:	0018      	movs	r0, r3
   19c9a:	4b0b      	ldr	r3, [pc, #44]	; (19cc8 <prvTraceSetObjectState+0x98>)
   19c9c:	681a      	ldr	r2, [r3, #0]
   19c9e:	1dfb      	adds	r3, r7, #7
   19ca0:	781b      	ldrb	r3, [r3, #0]
   19ca2:	2170      	movs	r1, #112	; 0x70
   19ca4:	18d3      	adds	r3, r2, r3
   19ca6:	185b      	adds	r3, r3, r1
   19ca8:	781b      	ldrb	r3, [r3, #0]
   19caa:	18c3      	adds	r3, r0, r3
   19cac:	229c      	movs	r2, #156	; 0x9c
   19cae:	18e3      	adds	r3, r4, r3
   19cb0:	189b      	adds	r3, r3, r2
   19cb2:	1d7a      	adds	r2, r7, #5
   19cb4:	7812      	ldrb	r2, [r2, #0]
   19cb6:	701a      	strb	r2, [r3, #0]
}
   19cb8:	46bd      	mov	sp, r7
   19cba:	b003      	add	sp, #12
   19cbc:	bd90      	pop	{r4, r7, pc}
   19cbe:	46c0      	nop			; (mov r8, r8)
   19cc0:	00038b74 	.word	0x00038b74
   19cc4:	0001a479 	.word	0x0001a479
   19cc8:	20000df4 	.word	0x20000df4
   19ccc:	00038bb8 	.word	0x00038bb8
   19cd0:	0001a085 	.word	0x0001a085

00019cd4 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   19cd4:	b590      	push	{r4, r7, lr}
   19cd6:	b083      	sub	sp, #12
   19cd8:	af00      	add	r7, sp, #0
   19cda:	0002      	movs	r2, r0
   19cdc:	1dfb      	adds	r3, r7, #7
   19cde:	701a      	strb	r2, [r3, #0]
   19ce0:	1dbb      	adds	r3, r7, #6
   19ce2:	1c0a      	adds	r2, r1, #0
   19ce4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19ce6:	1dfb      	adds	r3, r7, #7
   19ce8:	781b      	ldrb	r3, [r3, #0]
   19cea:	2b08      	cmp	r3, #8
   19cec:	d905      	bls.n	19cfa <prvTraceGetObjectState+0x26>
   19cee:	4b1a      	ldr	r3, [pc, #104]	; (19d58 <prvTraceGetObjectState+0x84>)
   19cf0:	0018      	movs	r0, r3
   19cf2:	4b1a      	ldr	r3, [pc, #104]	; (19d5c <prvTraceGetObjectState+0x88>)
   19cf4:	4798      	blx	r3
   19cf6:	2300      	movs	r3, #0
   19cf8:	e02a      	b.n	19d50 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19cfa:	4b19      	ldr	r3, [pc, #100]	; (19d60 <prvTraceGetObjectState+0x8c>)
   19cfc:	681a      	ldr	r2, [r3, #0]
   19cfe:	1dfb      	adds	r3, r7, #7
   19d00:	781b      	ldrb	r3, [r3, #0]
   19d02:	2164      	movs	r1, #100	; 0x64
   19d04:	18d3      	adds	r3, r2, r3
   19d06:	185b      	adds	r3, r3, r1
   19d08:	781b      	ldrb	r3, [r3, #0]
   19d0a:	1dba      	adds	r2, r7, #6
   19d0c:	7812      	ldrb	r2, [r2, #0]
   19d0e:	429a      	cmp	r2, r3
   19d10:	d905      	bls.n	19d1e <prvTraceGetObjectState+0x4a>
   19d12:	4b14      	ldr	r3, [pc, #80]	; (19d64 <prvTraceGetObjectState+0x90>)
   19d14:	0018      	movs	r0, r3
   19d16:	4b11      	ldr	r3, [pc, #68]	; (19d5c <prvTraceGetObjectState+0x88>)
   19d18:	4798      	blx	r3
   19d1a:	2300      	movs	r3, #0
   19d1c:	e018      	b.n	19d50 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   19d1e:	4b10      	ldr	r3, [pc, #64]	; (19d60 <prvTraceGetObjectState+0x8c>)
   19d20:	681c      	ldr	r4, [r3, #0]
   19d22:	1dfb      	adds	r3, r7, #7
   19d24:	781a      	ldrb	r2, [r3, #0]
   19d26:	1dbb      	adds	r3, r7, #6
   19d28:	781b      	ldrb	r3, [r3, #0]
   19d2a:	0011      	movs	r1, r2
   19d2c:	0018      	movs	r0, r3
   19d2e:	4b0e      	ldr	r3, [pc, #56]	; (19d68 <prvTraceGetObjectState+0x94>)
   19d30:	4798      	blx	r3
   19d32:	0003      	movs	r3, r0
   19d34:	0018      	movs	r0, r3
   19d36:	4b0a      	ldr	r3, [pc, #40]	; (19d60 <prvTraceGetObjectState+0x8c>)
   19d38:	681a      	ldr	r2, [r3, #0]
   19d3a:	1dfb      	adds	r3, r7, #7
   19d3c:	781b      	ldrb	r3, [r3, #0]
   19d3e:	2170      	movs	r1, #112	; 0x70
   19d40:	18d3      	adds	r3, r2, r3
   19d42:	185b      	adds	r3, r3, r1
   19d44:	781b      	ldrb	r3, [r3, #0]
   19d46:	18c3      	adds	r3, r0, r3
   19d48:	229c      	movs	r2, #156	; 0x9c
   19d4a:	18e3      	adds	r3, r4, r3
   19d4c:	189b      	adds	r3, r3, r2
   19d4e:	781b      	ldrb	r3, [r3, #0]
}
   19d50:	0018      	movs	r0, r3
   19d52:	46bd      	mov	sp, r7
   19d54:	b003      	add	sp, #12
   19d56:	bd90      	pop	{r4, r7, pc}
   19d58:	00038bf4 	.word	0x00038bf4
   19d5c:	0001a479 	.word	0x0001a479
   19d60:	20000df4 	.word	0x20000df4
   19d64:	00038c38 	.word	0x00038c38
   19d68:	0001a085 	.word	0x0001a085

00019d6c <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   19d6c:	b590      	push	{r4, r7, lr}
   19d6e:	b083      	sub	sp, #12
   19d70:	af00      	add	r7, sp, #0
   19d72:	0002      	movs	r2, r0
   19d74:	1dfb      	adds	r3, r7, #7
   19d76:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   19d78:	4b11      	ldr	r3, [pc, #68]	; (19dc0 <prvTraceSetTaskInstanceFinished+0x54>)
   19d7a:	681b      	ldr	r3, [r3, #0]
   19d7c:	2267      	movs	r2, #103	; 0x67
   19d7e:	5c9b      	ldrb	r3, [r3, r2]
   19d80:	1dfa      	adds	r2, r7, #7
   19d82:	7812      	ldrb	r2, [r2, #0]
   19d84:	429a      	cmp	r2, r3
   19d86:	d904      	bls.n	19d92 <prvTraceSetTaskInstanceFinished+0x26>
   19d88:	4b0e      	ldr	r3, [pc, #56]	; (19dc4 <prvTraceSetTaskInstanceFinished+0x58>)
   19d8a:	0018      	movs	r0, r3
   19d8c:	4b0e      	ldr	r3, [pc, #56]	; (19dc8 <prvTraceSetTaskInstanceFinished+0x5c>)
   19d8e:	4798      	blx	r3
   19d90:	e013      	b.n	19dba <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   19d92:	4b0b      	ldr	r3, [pc, #44]	; (19dc0 <prvTraceSetTaskInstanceFinished+0x54>)
   19d94:	681c      	ldr	r4, [r3, #0]
   19d96:	1dfb      	adds	r3, r7, #7
   19d98:	781b      	ldrb	r3, [r3, #0]
   19d9a:	2103      	movs	r1, #3
   19d9c:	0018      	movs	r0, r3
   19d9e:	4b0b      	ldr	r3, [pc, #44]	; (19dcc <prvTraceSetTaskInstanceFinished+0x60>)
   19da0:	4798      	blx	r3
   19da2:	0003      	movs	r3, r0
   19da4:	0019      	movs	r1, r3
   19da6:	4b06      	ldr	r3, [pc, #24]	; (19dc0 <prvTraceSetTaskInstanceFinished+0x54>)
   19da8:	681b      	ldr	r3, [r3, #0]
   19daa:	2273      	movs	r2, #115	; 0x73
   19dac:	5c9b      	ldrb	r3, [r3, r2]
   19dae:	18cb      	adds	r3, r1, r3
   19db0:	229c      	movs	r2, #156	; 0x9c
   19db2:	18e3      	adds	r3, r4, r3
   19db4:	189b      	adds	r3, r3, r2
   19db6:	2200      	movs	r2, #0
   19db8:	701a      	strb	r2, [r3, #0]
#endif
}
   19dba:	46bd      	mov	sp, r7
   19dbc:	b003      	add	sp, #12
   19dbe:	bd90      	pop	{r4, r7, pc}
   19dc0:	20000df4 	.word	0x20000df4
   19dc4:	00038c74 	.word	0x00038c74
   19dc8:	0001a479 	.word	0x0001a479
   19dcc:	0001a085 	.word	0x0001a085

00019dd0 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   19dd0:	b580      	push	{r7, lr}
   19dd2:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   19dd4:	4b75      	ldr	r3, [pc, #468]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19dd6:	681b      	ldr	r3, [r3, #0]
   19dd8:	2b00      	cmp	r3, #0
   19dda:	d103      	bne.n	19de4 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   19ddc:	4b73      	ldr	r3, [pc, #460]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19dde:	4a74      	ldr	r2, [pc, #464]	; (19fb0 <prvTraceInitTraceData+0x1e0>)
   19de0:	601a      	str	r2, [r3, #0]
   19de2:	e006      	b.n	19df2 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   19de4:	4b71      	ldr	r3, [pc, #452]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19de6:	681b      	ldr	r3, [r3, #0]
   19de8:	781b      	ldrb	r3, [r3, #0]
   19dea:	b2db      	uxtb	r3, r3
   19dec:	2b01      	cmp	r3, #1
   19dee:	d100      	bne.n	19df2 <prvTraceInitTraceData+0x22>
   19df0:	e0d8      	b.n	19fa4 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   19df2:	4b70      	ldr	r3, [pc, #448]	; (19fb4 <prvTraceInitTraceData+0x1e4>)
   19df4:	681a      	ldr	r2, [r3, #0]
   19df6:	4b70      	ldr	r3, [pc, #448]	; (19fb8 <prvTraceInitTraceData+0x1e8>)
   19df8:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   19dfa:	4b6c      	ldr	r3, [pc, #432]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19dfc:	6818      	ldr	r0, [r3, #0]
   19dfe:	23bd      	movs	r3, #189	; 0xbd
   19e00:	011b      	lsls	r3, r3, #4
   19e02:	001a      	movs	r2, r3
   19e04:	2100      	movs	r1, #0
   19e06:	4b6d      	ldr	r3, [pc, #436]	; (19fbc <prvTraceInitTraceData+0x1ec>)
   19e08:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   19e0a:	4b68      	ldr	r3, [pc, #416]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e0c:	681b      	ldr	r3, [r3, #0]
   19e0e:	4a6c      	ldr	r2, [pc, #432]	; (19fc0 <prvTraceInitTraceData+0x1f0>)
   19e10:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   19e12:	4b66      	ldr	r3, [pc, #408]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e14:	681b      	ldr	r3, [r3, #0]
   19e16:	2205      	movs	r2, #5
   19e18:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   19e1a:	4b64      	ldr	r3, [pc, #400]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e1c:	681b      	ldr	r3, [r3, #0]
   19e1e:	2200      	movs	r2, #0
   19e20:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   19e22:	4b62      	ldr	r3, [pc, #392]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e24:	681b      	ldr	r3, [r3, #0]
   19e26:	22bd      	movs	r2, #189	; 0xbd
   19e28:	0112      	lsls	r2, r2, #4
   19e2a:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   19e2c:	4b5f      	ldr	r3, [pc, #380]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e2e:	681b      	ldr	r3, [r3, #0]
   19e30:	2296      	movs	r2, #150	; 0x96
   19e32:	0052      	lsls	r2, r2, #1
   19e34:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   19e36:	4b5d      	ldr	r3, [pc, #372]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e38:	681b      	ldr	r3, [r3, #0]
   19e3a:	4a62      	ldr	r2, [pc, #392]	; (19fc4 <prvTraceInitTraceData+0x1f4>)
   19e3c:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   19e3e:	4b5b      	ldr	r3, [pc, #364]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e40:	681b      	ldr	r3, [r3, #0]
   19e42:	2200      	movs	r2, #0
   19e44:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   19e46:	4b59      	ldr	r3, [pc, #356]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e48:	681b      	ldr	r3, [r3, #0]
   19e4a:	2200      	movs	r2, #0
   19e4c:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   19e4e:	4b5e      	ldr	r3, [pc, #376]	; (19fc8 <prvTraceInitTraceData+0x1f8>)
   19e50:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   19e52:	4b56      	ldr	r3, [pc, #344]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e54:	681b      	ldr	r3, [r3, #0]
   19e56:	4a5d      	ldr	r2, [pc, #372]	; (19fcc <prvTraceInitTraceData+0x1fc>)
   19e58:	495d      	ldr	r1, [pc, #372]	; (19fd0 <prvTraceInitTraceData+0x200>)
   19e5a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   19e5c:	4b53      	ldr	r3, [pc, #332]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e5e:	681a      	ldr	r2, [r3, #0]
   19e60:	23ac      	movs	r3, #172	; 0xac
   19e62:	00db      	lsls	r3, r3, #3
   19e64:	21c8      	movs	r1, #200	; 0xc8
   19e66:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   19e68:	4b50      	ldr	r3, [pc, #320]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e6a:	681b      	ldr	r3, [r3, #0]
   19e6c:	4a59      	ldr	r2, [pc, #356]	; (19fd4 <prvTraceInitTraceData+0x204>)
   19e6e:	2101      	movs	r1, #1
   19e70:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   19e72:	4b4e      	ldr	r3, [pc, #312]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e74:	681a      	ldr	r2, [r3, #0]
   19e76:	23d7      	movs	r3, #215	; 0xd7
   19e78:	00db      	lsls	r3, r3, #3
   19e7a:	4957      	ldr	r1, [pc, #348]	; (19fd8 <prvTraceInitTraceData+0x208>)
   19e7c:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   19e7e:	4b4b      	ldr	r3, [pc, #300]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e80:	681b      	ldr	r3, [r3, #0]
   19e82:	4a56      	ldr	r2, [pc, #344]	; (19fdc <prvTraceInitTraceData+0x20c>)
   19e84:	4694      	mov	ip, r2
   19e86:	4463      	add	r3, ip
   19e88:	4955      	ldr	r1, [pc, #340]	; (19fe0 <prvTraceInitTraceData+0x210>)
   19e8a:	2250      	movs	r2, #80	; 0x50
   19e8c:	0018      	movs	r0, r3
   19e8e:	4b55      	ldr	r3, [pc, #340]	; (19fe4 <prvTraceInitTraceData+0x214>)
   19e90:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   19e92:	4b46      	ldr	r3, [pc, #280]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e94:	681b      	ldr	r3, [r3, #0]
   19e96:	4a54      	ldr	r2, [pc, #336]	; (19fe8 <prvTraceInitTraceData+0x218>)
   19e98:	4954      	ldr	r1, [pc, #336]	; (19fec <prvTraceInitTraceData+0x21c>)
   19e9a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   19e9c:	4b43      	ldr	r3, [pc, #268]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19e9e:	681b      	ldr	r3, [r3, #0]
   19ea0:	4a53      	ldr	r2, [pc, #332]	; (19ff0 <prvTraceInitTraceData+0x220>)
   19ea2:	210a      	movs	r1, #10
   19ea4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   19ea6:	4b41      	ldr	r3, [pc, #260]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19ea8:	681b      	ldr	r3, [r3, #0]
   19eaa:	4a52      	ldr	r2, [pc, #328]	; (19ff4 <prvTraceInitTraceData+0x224>)
   19eac:	210b      	movs	r1, #11
   19eae:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   19eb0:	4b3e      	ldr	r3, [pc, #248]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19eb2:	681b      	ldr	r3, [r3, #0]
   19eb4:	4a50      	ldr	r2, [pc, #320]	; (19ff8 <prvTraceInitTraceData+0x228>)
   19eb6:	210c      	movs	r1, #12
   19eb8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   19eba:	4b3c      	ldr	r3, [pc, #240]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19ebc:	681b      	ldr	r3, [r3, #0]
   19ebe:	4a4f      	ldr	r2, [pc, #316]	; (19ffc <prvTraceInitTraceData+0x22c>)
   19ec0:	210d      	movs	r1, #13
   19ec2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   19ec4:	4b39      	ldr	r3, [pc, #228]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19ec6:	681b      	ldr	r3, [r3, #0]
   19ec8:	4a4d      	ldr	r2, [pc, #308]	; (1a000 <prvTraceInitTraceData+0x230>)
   19eca:	2171      	movs	r1, #113	; 0x71
   19ecc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   19ece:	4b37      	ldr	r3, [pc, #220]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19ed0:	681b      	ldr	r3, [r3, #0]
   19ed2:	4a4c      	ldr	r2, [pc, #304]	; (1a004 <prvTraceInitTraceData+0x234>)
   19ed4:	2172      	movs	r1, #114	; 0x72
   19ed6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   19ed8:	4b34      	ldr	r3, [pc, #208]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19eda:	681b      	ldr	r3, [r3, #0]
   19edc:	4a4a      	ldr	r2, [pc, #296]	; (1a008 <prvTraceInitTraceData+0x238>)
   19ede:	2173      	movs	r1, #115	; 0x73
   19ee0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   19ee2:	4b32      	ldr	r3, [pc, #200]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19ee4:	681b      	ldr	r3, [r3, #0]
   19ee6:	4a49      	ldr	r2, [pc, #292]	; (1a00c <prvTraceInitTraceData+0x23c>)
   19ee8:	2174      	movs	r1, #116	; 0x74
   19eea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   19eec:	4b2f      	ldr	r3, [pc, #188]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19eee:	681b      	ldr	r3, [r3, #0]
   19ef0:	4a47      	ldr	r2, [pc, #284]	; (1a010 <prvTraceInitTraceData+0x240>)
   19ef2:	21f1      	movs	r1, #241	; 0xf1
   19ef4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   19ef6:	4b2d      	ldr	r3, [pc, #180]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19ef8:	681b      	ldr	r3, [r3, #0]
   19efa:	4a46      	ldr	r2, [pc, #280]	; (1a014 <prvTraceInitTraceData+0x244>)
   19efc:	21f2      	movs	r1, #242	; 0xf2
   19efe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   19f00:	4b2a      	ldr	r3, [pc, #168]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f02:	681b      	ldr	r3, [r3, #0]
   19f04:	4a44      	ldr	r2, [pc, #272]	; (1a018 <prvTraceInitTraceData+0x248>)
   19f06:	21f3      	movs	r1, #243	; 0xf3
   19f08:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   19f0a:	4b28      	ldr	r3, [pc, #160]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f0c:	681b      	ldr	r3, [r3, #0]
   19f0e:	4a43      	ldr	r2, [pc, #268]	; (1a01c <prvTraceInitTraceData+0x24c>)
   19f10:	21f4      	movs	r1, #244	; 0xf4
   19f12:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   19f14:	4b42      	ldr	r3, [pc, #264]	; (1a020 <prvTraceInitTraceData+0x250>)
   19f16:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   19f18:	4b24      	ldr	r3, [pc, #144]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f1a:	681b      	ldr	r3, [r3, #0]
   19f1c:	22f4      	movs	r2, #244	; 0xf4
   19f1e:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   19f20:	4b22      	ldr	r3, [pc, #136]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f22:	681b      	ldr	r3, [r3, #0]
   19f24:	22f3      	movs	r2, #243	; 0xf3
   19f26:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   19f28:	4b20      	ldr	r3, [pc, #128]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f2a:	681b      	ldr	r3, [r3, #0]
   19f2c:	22f2      	movs	r2, #242	; 0xf2
   19f2e:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   19f30:	4b1e      	ldr	r3, [pc, #120]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f32:	681b      	ldr	r3, [r3, #0]
   19f34:	22f1      	movs	r2, #241	; 0xf1
   19f36:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   19f38:	4b1c      	ldr	r3, [pc, #112]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f3a:	681b      	ldr	r3, [r3, #0]
   19f3c:	2274      	movs	r2, #116	; 0x74
   19f3e:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   19f40:	4b1a      	ldr	r3, [pc, #104]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f42:	681b      	ldr	r3, [r3, #0]
   19f44:	2273      	movs	r2, #115	; 0x73
   19f46:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   19f48:	4b18      	ldr	r3, [pc, #96]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f4a:	681b      	ldr	r3, [r3, #0]
   19f4c:	2272      	movs	r2, #114	; 0x72
   19f4e:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   19f50:	4b16      	ldr	r3, [pc, #88]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f52:	681b      	ldr	r3, [r3, #0]
   19f54:	2271      	movs	r2, #113	; 0x71
   19f56:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   19f58:	4b14      	ldr	r3, [pc, #80]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f5a:	681b      	ldr	r3, [r3, #0]
   19f5c:	2204      	movs	r2, #4
   19f5e:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   19f60:	4b12      	ldr	r3, [pc, #72]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f62:	681b      	ldr	r3, [r3, #0]
   19f64:	2203      	movs	r2, #3
   19f66:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   19f68:	4b10      	ldr	r3, [pc, #64]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f6a:	681b      	ldr	r3, [r3, #0]
   19f6c:	2202      	movs	r2, #2
   19f6e:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   19f70:	4b0e      	ldr	r3, [pc, #56]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f72:	681b      	ldr	r3, [r3, #0]
   19f74:	2201      	movs	r2, #1
   19f76:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   19f78:	4b2a      	ldr	r3, [pc, #168]	; (1a024 <prvTraceInitTraceData+0x254>)
   19f7a:	681b      	ldr	r3, [r3, #0]
   19f7c:	2b00      	cmp	r3, #0
   19f7e:	d012      	beq.n	19fa6 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   19f80:	4b0a      	ldr	r3, [pc, #40]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f82:	681b      	ldr	r3, [r3, #0]
   19f84:	4a15      	ldr	r2, [pc, #84]	; (19fdc <prvTraceInitTraceData+0x20c>)
   19f86:	1898      	adds	r0, r3, r2
   19f88:	4b26      	ldr	r3, [pc, #152]	; (1a024 <prvTraceInitTraceData+0x254>)
   19f8a:	681b      	ldr	r3, [r3, #0]
   19f8c:	2250      	movs	r2, #80	; 0x50
   19f8e:	0019      	movs	r1, r3
   19f90:	4b14      	ldr	r3, [pc, #80]	; (19fe4 <prvTraceInitTraceData+0x214>)
   19f92:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   19f94:	4b05      	ldr	r3, [pc, #20]	; (19fac <prvTraceInitTraceData+0x1dc>)
   19f96:	681b      	ldr	r3, [r3, #0]
   19f98:	4a23      	ldr	r2, [pc, #140]	; (1a028 <prvTraceInitTraceData+0x258>)
   19f9a:	2101      	movs	r1, #1
   19f9c:	5099      	str	r1, [r3, r2]
		vTraceStop();
   19f9e:	4b23      	ldr	r3, [pc, #140]	; (1a02c <prvTraceInitTraceData+0x25c>)
   19fa0:	4798      	blx	r3
   19fa2:	e000      	b.n	19fa6 <prvTraceInitTraceData+0x1d6>
			return;
   19fa4:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   19fa6:	46bd      	mov	sp, r7
   19fa8:	bd80      	pop	{r7, pc}
   19faa:	46c0      	nop			; (mov r8, r8)
   19fac:	20000df4 	.word	0x20000df4
   19fb0:	20004a90 	.word	0x20004a90
   19fb4:	e000e018 	.word	0xe000e018
   19fb8:	20005660 	.word	0x20005660
   19fbc:	0003560f 	.word	0x0003560f
   19fc0:	00001aa1 	.word	0x00001aa1
   19fc4:	f0f0f0f0 	.word	0xf0f0f0f0
   19fc8:	00018f35 	.word	0x00018f35
   19fcc:	0000055c 	.word	0x0000055c
   19fd0:	f1f1f1f1 	.word	0xf1f1f1f1
   19fd4:	00000564 	.word	0x00000564
   19fd8:	f2f2f2f2 	.word	0xf2f2f2f2
   19fdc:	000006bc 	.word	0x000006bc
   19fe0:	00038cbc 	.word	0x00038cbc
   19fe4:	0001a345 	.word	0x0001a345
   19fe8:	0000070c 	.word	0x0000070c
   19fec:	f3f3f3f3 	.word	0xf3f3f3f3
   19ff0:	00000bc4 	.word	0x00000bc4
   19ff4:	00000bc5 	.word	0x00000bc5
   19ff8:	00000bc6 	.word	0x00000bc6
   19ffc:	00000bc7 	.word	0x00000bc7
   1a000:	00000bc8 	.word	0x00000bc8
   1a004:	00000bc9 	.word	0x00000bc9
   1a008:	00000bca 	.word	0x00000bca
   1a00c:	00000bcb 	.word	0x00000bcb
   1a010:	00000bcc 	.word	0x00000bcc
   1a014:	00000bcd 	.word	0x00000bcd
   1a018:	00000bce 	.word	0x00000bce
   1a01c:	00000bcf 	.word	0x00000bcf
   1a020:	000190d5 	.word	0x000190d5
   1a024:	20000d54 	.word	0x20000d54
   1a028:	000006b4 	.word	0x000006b4
   1a02c:	0001933d 	.word	0x0001933d

0001a030 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1a030:	b580      	push	{r7, lr}
   1a032:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   1a034:	4b10      	ldr	r3, [pc, #64]	; (1a078 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a036:	681b      	ldr	r3, [r3, #0]
   1a038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a03a:	2b00      	cmp	r3, #0
   1a03c:	d101      	bne.n	1a042 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1a03e:	2300      	movs	r3, #0
   1a040:	e017      	b.n	1a072 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a042:	4b0d      	ldr	r3, [pc, #52]	; (1a078 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a044:	681b      	ldr	r3, [r3, #0]
   1a046:	69da      	ldr	r2, [r3, #28]
   1a048:	232c      	movs	r3, #44	; 0x2c
   1a04a:	33ff      	adds	r3, #255	; 0xff
   1a04c:	429a      	cmp	r2, r3
   1a04e:	d905      	bls.n	1a05c <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1a050:	4b0a      	ldr	r3, [pc, #40]	; (1a07c <prvTraceNextFreeEventBufferSlot+0x4c>)
   1a052:	0018      	movs	r0, r3
   1a054:	4b0a      	ldr	r3, [pc, #40]	; (1a080 <prvTraceNextFreeEventBufferSlot+0x50>)
   1a056:	4798      	blx	r3
		return NULL;
   1a058:	2300      	movs	r3, #0
   1a05a:	e00a      	b.n	1a072 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1a05c:	4b06      	ldr	r3, [pc, #24]	; (1a078 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a05e:	681a      	ldr	r2, [r3, #0]
   1a060:	4b05      	ldr	r3, [pc, #20]	; (1a078 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a062:	681b      	ldr	r3, [r3, #0]
   1a064:	69db      	ldr	r3, [r3, #28]
   1a066:	009b      	lsls	r3, r3, #2
   1a068:	21e2      	movs	r1, #226	; 0xe2
   1a06a:	00c9      	lsls	r1, r1, #3
   1a06c:	468c      	mov	ip, r1
   1a06e:	4463      	add	r3, ip
   1a070:	18d3      	adds	r3, r2, r3
}
   1a072:	0018      	movs	r0, r3
   1a074:	46bd      	mov	sp, r7
   1a076:	bd80      	pop	{r7, pc}
   1a078:	20000df4 	.word	0x20000df4
   1a07c:	00038cd0 	.word	0x00038cd0
   1a080:	0001a479 	.word	0x0001a479

0001a084 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   1a084:	b580      	push	{r7, lr}
   1a086:	b082      	sub	sp, #8
   1a088:	af00      	add	r7, sp, #0
   1a08a:	0002      	movs	r2, r0
   1a08c:	1dfb      	adds	r3, r7, #7
   1a08e:	701a      	strb	r2, [r3, #0]
   1a090:	1dbb      	adds	r3, r7, #6
   1a092:	1c0a      	adds	r2, r1, #0
   1a094:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a096:	1dbb      	adds	r3, r7, #6
   1a098:	781b      	ldrb	r3, [r3, #0]
   1a09a:	2b08      	cmp	r3, #8
   1a09c:	d905      	bls.n	1a0aa <uiIndexOfObject+0x26>
   1a09e:	4b2a      	ldr	r3, [pc, #168]	; (1a148 <uiIndexOfObject+0xc4>)
   1a0a0:	0018      	movs	r0, r3
   1a0a2:	4b2a      	ldr	r3, [pc, #168]	; (1a14c <uiIndexOfObject+0xc8>)
   1a0a4:	4798      	blx	r3
   1a0a6:	2300      	movs	r3, #0
   1a0a8:	e049      	b.n	1a13e <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1a0aa:	1dfb      	adds	r3, r7, #7
   1a0ac:	781b      	ldrb	r3, [r3, #0]
   1a0ae:	2b00      	cmp	r3, #0
   1a0b0:	d00b      	beq.n	1a0ca <uiIndexOfObject+0x46>
   1a0b2:	4b27      	ldr	r3, [pc, #156]	; (1a150 <uiIndexOfObject+0xcc>)
   1a0b4:	681a      	ldr	r2, [r3, #0]
   1a0b6:	1dbb      	adds	r3, r7, #6
   1a0b8:	781b      	ldrb	r3, [r3, #0]
   1a0ba:	2164      	movs	r1, #100	; 0x64
   1a0bc:	18d3      	adds	r3, r2, r3
   1a0be:	185b      	adds	r3, r3, r1
   1a0c0:	781b      	ldrb	r3, [r3, #0]
   1a0c2:	1dfa      	adds	r2, r7, #7
   1a0c4:	7812      	ldrb	r2, [r2, #0]
   1a0c6:	429a      	cmp	r2, r3
   1a0c8:	d905      	bls.n	1a0d6 <uiIndexOfObject+0x52>
   1a0ca:	4b22      	ldr	r3, [pc, #136]	; (1a154 <uiIndexOfObject+0xd0>)
   1a0cc:	0018      	movs	r0, r3
   1a0ce:	4b1f      	ldr	r3, [pc, #124]	; (1a14c <uiIndexOfObject+0xc8>)
   1a0d0:	4798      	blx	r3
   1a0d2:	2300      	movs	r3, #0
   1a0d4:	e033      	b.n	1a13e <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a0d6:	1dbb      	adds	r3, r7, #6
   1a0d8:	781b      	ldrb	r3, [r3, #0]
   1a0da:	2b08      	cmp	r3, #8
   1a0dc:	d82a      	bhi.n	1a134 <uiIndexOfObject+0xb0>
   1a0de:	1dfb      	adds	r3, r7, #7
   1a0e0:	781b      	ldrb	r3, [r3, #0]
   1a0e2:	2b00      	cmp	r3, #0
   1a0e4:	d026      	beq.n	1a134 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1a0e6:	4b1a      	ldr	r3, [pc, #104]	; (1a150 <uiIndexOfObject+0xcc>)
   1a0e8:	681a      	ldr	r2, [r3, #0]
   1a0ea:	1dbb      	adds	r3, r7, #6
   1a0ec:	781b      	ldrb	r3, [r3, #0]
   1a0ee:	2164      	movs	r1, #100	; 0x64
   1a0f0:	18d3      	adds	r3, r2, r3
   1a0f2:	185b      	adds	r3, r3, r1
   1a0f4:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a0f6:	1dfa      	adds	r2, r7, #7
   1a0f8:	7812      	ldrb	r2, [r2, #0]
   1a0fa:	429a      	cmp	r2, r3
   1a0fc:	d81a      	bhi.n	1a134 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a0fe:	4b14      	ldr	r3, [pc, #80]	; (1a150 <uiIndexOfObject+0xcc>)
   1a100:	681a      	ldr	r2, [r3, #0]
   1a102:	1dbb      	adds	r3, r7, #6
   1a104:	781b      	ldrb	r3, [r3, #0]
   1a106:	3340      	adds	r3, #64	; 0x40
   1a108:	005b      	lsls	r3, r3, #1
   1a10a:	18d3      	adds	r3, r2, r3
   1a10c:	3308      	adds	r3, #8
   1a10e:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a110:	4b0f      	ldr	r3, [pc, #60]	; (1a150 <uiIndexOfObject+0xcc>)
   1a112:	6819      	ldr	r1, [r3, #0]
   1a114:	1dbb      	adds	r3, r7, #6
   1a116:	781b      	ldrb	r3, [r3, #0]
   1a118:	207c      	movs	r0, #124	; 0x7c
   1a11a:	18cb      	adds	r3, r1, r3
   1a11c:	181b      	adds	r3, r3, r0
   1a11e:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a120:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a122:	1df9      	adds	r1, r7, #7
   1a124:	7809      	ldrb	r1, [r1, #0]
   1a126:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a128:	b289      	uxth	r1, r1
   1a12a:	434b      	muls	r3, r1
   1a12c:	b29b      	uxth	r3, r3
   1a12e:	18d3      	adds	r3, r2, r3
   1a130:	b29b      	uxth	r3, r3
   1a132:	e004      	b.n	1a13e <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1a134:	4b08      	ldr	r3, [pc, #32]	; (1a158 <uiIndexOfObject+0xd4>)
   1a136:	0018      	movs	r0, r3
   1a138:	4b04      	ldr	r3, [pc, #16]	; (1a14c <uiIndexOfObject+0xc8>)
   1a13a:	4798      	blx	r3
	return 0;
   1a13c:	2300      	movs	r3, #0
}
   1a13e:	0018      	movs	r0, r3
   1a140:	46bd      	mov	sp, r7
   1a142:	b002      	add	sp, #8
   1a144:	bd80      	pop	{r7, pc}
   1a146:	46c0      	nop			; (mov r8, r8)
   1a148:	00038cf8 	.word	0x00038cf8
   1a14c:	0001a479 	.word	0x0001a479
   1a150:	20000df4 	.word	0x20000df4
   1a154:	00038d38 	.word	0x00038d38
   1a158:	00038d78 	.word	0x00038d78

0001a15c <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1a15c:	b580      	push	{r7, lr}
   1a15e:	b088      	sub	sp, #32
   1a160:	af00      	add	r7, sp, #0
   1a162:	0002      	movs	r2, r0
   1a164:	1dfb      	adds	r3, r7, #7
   1a166:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1a168:	4b5a      	ldr	r3, [pc, #360]	; (1a2d4 <prvTraceGetObjectHandle+0x178>)
   1a16a:	681b      	ldr	r3, [r3, #0]
   1a16c:	2b00      	cmp	r3, #0
   1a16e:	d105      	bne.n	1a17c <prvTraceGetObjectHandle+0x20>
   1a170:	4b59      	ldr	r3, [pc, #356]	; (1a2d8 <prvTraceGetObjectHandle+0x17c>)
   1a172:	0018      	movs	r0, r3
   1a174:	4b59      	ldr	r3, [pc, #356]	; (1a2dc <prvTraceGetObjectHandle+0x180>)
   1a176:	4798      	blx	r3
   1a178:	2300      	movs	r3, #0
   1a17a:	e0a7      	b.n	1a2cc <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a17c:	1dfb      	adds	r3, r7, #7
   1a17e:	781b      	ldrb	r3, [r3, #0]
   1a180:	2b08      	cmp	r3, #8
   1a182:	d905      	bls.n	1a190 <prvTraceGetObjectHandle+0x34>
   1a184:	4b56      	ldr	r3, [pc, #344]	; (1a2e0 <prvTraceGetObjectHandle+0x184>)
   1a186:	0018      	movs	r0, r3
   1a188:	4b54      	ldr	r3, [pc, #336]	; (1a2dc <prvTraceGetObjectHandle+0x180>)
   1a18a:	4798      	blx	r3
   1a18c:	2300      	movs	r3, #0
   1a18e:	e09d      	b.n	1a2cc <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1a190:	f3ef 8310 	mrs	r3, PRIMASK
   1a194:	60fb      	str	r3, [r7, #12]
  return(result);
   1a196:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1a198:	61bb      	str	r3, [r7, #24]
   1a19a:	2301      	movs	r3, #1
   1a19c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1a19e:	693b      	ldr	r3, [r7, #16]
   1a1a0:	f383 8810 	msr	PRIMASK, r3
   1a1a4:	4b4f      	ldr	r3, [pc, #316]	; (1a2e4 <prvTraceGetObjectHandle+0x188>)
   1a1a6:	681b      	ldr	r3, [r3, #0]
   1a1a8:	1c5a      	adds	r2, r3, #1
   1a1aa:	4b4e      	ldr	r3, [pc, #312]	; (1a2e4 <prvTraceGetObjectHandle+0x188>)
   1a1ac:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1a1ae:	1dfb      	adds	r3, r7, #7
   1a1b0:	781a      	ldrb	r2, [r3, #0]
   1a1b2:	4b4d      	ldr	r3, [pc, #308]	; (1a2e8 <prvTraceGetObjectHandle+0x18c>)
   1a1b4:	0052      	lsls	r2, r2, #1
   1a1b6:	5ad3      	ldrh	r3, [r2, r3]
   1a1b8:	001a      	movs	r2, r3
   1a1ba:	4b4c      	ldr	r3, [pc, #304]	; (1a2ec <prvTraceGetObjectHandle+0x190>)
   1a1bc:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1a1be:	4b4b      	ldr	r3, [pc, #300]	; (1a2ec <prvTraceGetObjectHandle+0x190>)
   1a1c0:	681b      	ldr	r3, [r3, #0]
   1a1c2:	4a49      	ldr	r2, [pc, #292]	; (1a2e8 <prvTraceGetObjectHandle+0x18c>)
   1a1c4:	2148      	movs	r1, #72	; 0x48
   1a1c6:	18d3      	adds	r3, r2, r3
   1a1c8:	185b      	adds	r3, r3, r1
   1a1ca:	781b      	ldrb	r3, [r3, #0]
   1a1cc:	2b00      	cmp	r3, #0
   1a1ce:	d117      	bne.n	1a200 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a1d0:	4b46      	ldr	r3, [pc, #280]	; (1a2ec <prvTraceGetObjectHandle+0x190>)
   1a1d2:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a1d4:	4b45      	ldr	r3, [pc, #276]	; (1a2ec <prvTraceGetObjectHandle+0x190>)
   1a1d6:	681b      	ldr	r3, [r3, #0]
   1a1d8:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1a1da:	1dfb      	adds	r3, r7, #7
   1a1dc:	781b      	ldrb	r3, [r3, #0]
   1a1de:	4842      	ldr	r0, [pc, #264]	; (1a2e8 <prvTraceGetObjectHandle+0x18c>)
   1a1e0:	3308      	adds	r3, #8
   1a1e2:	005b      	lsls	r3, r3, #1
   1a1e4:	18c3      	adds	r3, r0, r3
   1a1e6:	3302      	adds	r3, #2
   1a1e8:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a1ea:	b2db      	uxtb	r3, r3
   1a1ec:	1acb      	subs	r3, r1, r3
   1a1ee:	b2db      	uxtb	r3, r3
   1a1f0:	3301      	adds	r3, #1
   1a1f2:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a1f4:	4b3c      	ldr	r3, [pc, #240]	; (1a2e8 <prvTraceGetObjectHandle+0x18c>)
   1a1f6:	2148      	movs	r1, #72	; 0x48
   1a1f8:	189b      	adds	r3, r3, r2
   1a1fa:	185b      	adds	r3, r3, r1
   1a1fc:	1c02      	adds	r2, r0, #0
   1a1fe:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   1a200:	4b3a      	ldr	r3, [pc, #232]	; (1a2ec <prvTraceGetObjectHandle+0x190>)
   1a202:	681a      	ldr	r2, [r3, #0]
   1a204:	231f      	movs	r3, #31
   1a206:	18fb      	adds	r3, r7, r3
   1a208:	4937      	ldr	r1, [pc, #220]	; (1a2e8 <prvTraceGetObjectHandle+0x18c>)
   1a20a:	2048      	movs	r0, #72	; 0x48
   1a20c:	188a      	adds	r2, r1, r2
   1a20e:	1812      	adds	r2, r2, r0
   1a210:	7812      	ldrb	r2, [r2, #0]
   1a212:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a214:	1dfb      	adds	r3, r7, #7
   1a216:	781a      	ldrb	r2, [r3, #0]
   1a218:	4b33      	ldr	r3, [pc, #204]	; (1a2e8 <prvTraceGetObjectHandle+0x18c>)
   1a21a:	0052      	lsls	r2, r2, #1
   1a21c:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1a21e:	1dfb      	adds	r3, r7, #7
   1a220:	781b      	ldrb	r3, [r3, #0]
   1a222:	4931      	ldr	r1, [pc, #196]	; (1a2e8 <prvTraceGetObjectHandle+0x18c>)
   1a224:	3310      	adds	r3, #16
   1a226:	005b      	lsls	r3, r3, #1
   1a228:	18cb      	adds	r3, r1, r3
   1a22a:	3304      	adds	r3, #4
   1a22c:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a22e:	429a      	cmp	r2, r3
   1a230:	d90d      	bls.n	1a24e <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a232:	1dfb      	adds	r3, r7, #7
   1a234:	781b      	ldrb	r3, [r3, #0]
   1a236:	0018      	movs	r0, r3
   1a238:	4b2d      	ldr	r3, [pc, #180]	; (1a2f0 <prvTraceGetObjectHandle+0x194>)
   1a23a:	4798      	blx	r3
   1a23c:	0003      	movs	r3, r0
   1a23e:	0018      	movs	r0, r3
   1a240:	4b26      	ldr	r3, [pc, #152]	; (1a2dc <prvTraceGetObjectHandle+0x180>)
   1a242:	4798      	blx	r3
		handle = 0;
   1a244:	231f      	movs	r3, #31
   1a246:	18fb      	adds	r3, r7, r3
   1a248:	2200      	movs	r2, #0
   1a24a:	701a      	strb	r2, [r3, #0]
   1a24c:	e031      	b.n	1a2b2 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1a24e:	1dfb      	adds	r3, r7, #7
   1a250:	781b      	ldrb	r3, [r3, #0]
   1a252:	4a25      	ldr	r2, [pc, #148]	; (1a2e8 <prvTraceGetObjectHandle+0x18c>)
   1a254:	0059      	lsls	r1, r3, #1
   1a256:	5a8a      	ldrh	r2, [r1, r2]
   1a258:	3201      	adds	r2, #1
   1a25a:	b291      	uxth	r1, r2
   1a25c:	4a22      	ldr	r2, [pc, #136]	; (1a2e8 <prvTraceGetObjectHandle+0x18c>)
   1a25e:	005b      	lsls	r3, r3, #1
   1a260:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a262:	1dfb      	adds	r3, r7, #7
   1a264:	781a      	ldrb	r2, [r3, #0]
   1a266:	4b20      	ldr	r3, [pc, #128]	; (1a2e8 <prvTraceGetObjectHandle+0x18c>)
   1a268:	0052      	lsls	r2, r2, #1
   1a26a:	5ad3      	ldrh	r3, [r2, r3]
   1a26c:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1a26e:	1dfb      	adds	r3, r7, #7
   1a270:	781b      	ldrb	r3, [r3, #0]
   1a272:	4a1d      	ldr	r2, [pc, #116]	; (1a2e8 <prvTraceGetObjectHandle+0x18c>)
   1a274:	3308      	adds	r3, #8
   1a276:	005b      	lsls	r3, r3, #1
   1a278:	18d3      	adds	r3, r2, r3
   1a27a:	3302      	adds	r3, #2
   1a27c:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a27e:	1acb      	subs	r3, r1, r3
   1a280:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1a282:	1dfb      	adds	r3, r7, #7
   1a284:	781b      	ldrb	r3, [r3, #0]
   1a286:	4a18      	ldr	r2, [pc, #96]	; (1a2e8 <prvTraceGetObjectHandle+0x18c>)
   1a288:	3318      	adds	r3, #24
   1a28a:	005b      	lsls	r3, r3, #1
   1a28c:	18d3      	adds	r3, r2, r3
   1a28e:	3306      	adds	r3, #6
   1a290:	881b      	ldrh	r3, [r3, #0]
   1a292:	001a      	movs	r2, r3
		if (hndCount >
   1a294:	697b      	ldr	r3, [r7, #20]
   1a296:	429a      	cmp	r2, r3
   1a298:	da0b      	bge.n	1a2b2 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a29a:	1dfb      	adds	r3, r7, #7
   1a29c:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1a29e:	697a      	ldr	r2, [r7, #20]
   1a2a0:	b2d2      	uxtb	r2, r2
   1a2a2:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a2a4:	4a10      	ldr	r2, [pc, #64]	; (1a2e8 <prvTraceGetObjectHandle+0x18c>)
   1a2a6:	3318      	adds	r3, #24
   1a2a8:	005b      	lsls	r3, r3, #1
   1a2aa:	18d3      	adds	r3, r2, r3
   1a2ac:	3306      	adds	r3, #6
   1a2ae:	1c0a      	adds	r2, r1, #0
   1a2b0:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1a2b2:	4b0c      	ldr	r3, [pc, #48]	; (1a2e4 <prvTraceGetObjectHandle+0x188>)
   1a2b4:	681b      	ldr	r3, [r3, #0]
   1a2b6:	1e5a      	subs	r2, r3, #1
   1a2b8:	4b0a      	ldr	r3, [pc, #40]	; (1a2e4 <prvTraceGetObjectHandle+0x188>)
   1a2ba:	601a      	str	r2, [r3, #0]
   1a2bc:	69bb      	ldr	r3, [r7, #24]
   1a2be:	60bb      	str	r3, [r7, #8]
   1a2c0:	68bb      	ldr	r3, [r7, #8]
   1a2c2:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1a2c6:	231f      	movs	r3, #31
   1a2c8:	18fb      	adds	r3, r7, r3
   1a2ca:	781b      	ldrb	r3, [r3, #0]
}
   1a2cc:	0018      	movs	r0, r3
   1a2ce:	46bd      	mov	sp, r7
   1a2d0:	b008      	add	sp, #32
   1a2d2:	bd80      	pop	{r7, pc}
   1a2d4:	20000df4 	.word	0x20000df4
   1a2d8:	000381d8 	.word	0x000381d8
   1a2dc:	0001a479 	.word	0x0001a479
   1a2e0:	00038db8 	.word	0x00038db8
   1a2e4:	20000d4c 	.word	0x20000d4c
   1a2e8:	20000d64 	.word	0x20000d64
   1a2ec:	20000df8 	.word	0x20000df8
   1a2f0:	00019199 	.word	0x00019199

0001a2f4 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1a2f4:	b590      	push	{r4, r7, lr}
   1a2f6:	b085      	sub	sp, #20
   1a2f8:	af00      	add	r7, sp, #0
   1a2fa:	0002      	movs	r2, r0
   1a2fc:	1dfb      	adds	r3, r7, #7
   1a2fe:	701a      	strb	r2, [r3, #0]
   1a300:	1dbb      	adds	r3, r7, #6
   1a302:	1c0a      	adds	r2, r1, #0
   1a304:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1a306:	230e      	movs	r3, #14
   1a308:	18fc      	adds	r4, r7, r3
   1a30a:	1dfb      	adds	r3, r7, #7
   1a30c:	781a      	ldrb	r2, [r3, #0]
   1a30e:	1dbb      	adds	r3, r7, #6
   1a310:	781b      	ldrb	r3, [r3, #0]
   1a312:	0011      	movs	r1, r2
   1a314:	0018      	movs	r0, r3
   1a316:	4b09      	ldr	r3, [pc, #36]	; (1a33c <prvMarkObjectAsUsed+0x48>)
   1a318:	4798      	blx	r3
   1a31a:	0003      	movs	r3, r0
   1a31c:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1a31e:	4b08      	ldr	r3, [pc, #32]	; (1a340 <prvMarkObjectAsUsed+0x4c>)
   1a320:	681a      	ldr	r2, [r3, #0]
   1a322:	230e      	movs	r3, #14
   1a324:	18fb      	adds	r3, r7, r3
   1a326:	881b      	ldrh	r3, [r3, #0]
   1a328:	219c      	movs	r1, #156	; 0x9c
   1a32a:	18d3      	adds	r3, r2, r3
   1a32c:	185b      	adds	r3, r3, r1
   1a32e:	2201      	movs	r2, #1
   1a330:	701a      	strb	r2, [r3, #0]
}
   1a332:	46c0      	nop			; (mov r8, r8)
   1a334:	46bd      	mov	sp, r7
   1a336:	b005      	add	sp, #20
   1a338:	bd90      	pop	{r4, r7, pc}
   1a33a:	46c0      	nop			; (mov r8, r8)
   1a33c:	0001a085 	.word	0x0001a085
   1a340:	20000df4 	.word	0x20000df4

0001a344 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1a344:	b580      	push	{r7, lr}
   1a346:	b086      	sub	sp, #24
   1a348:	af00      	add	r7, sp, #0
   1a34a:	60f8      	str	r0, [r7, #12]
   1a34c:	60b9      	str	r1, [r7, #8]
   1a34e:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1a350:	2300      	movs	r3, #0
   1a352:	617b      	str	r3, [r7, #20]
   1a354:	e010      	b.n	1a378 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1a356:	68fa      	ldr	r2, [r7, #12]
   1a358:	697b      	ldr	r3, [r7, #20]
   1a35a:	18d3      	adds	r3, r2, r3
   1a35c:	68b9      	ldr	r1, [r7, #8]
   1a35e:	697a      	ldr	r2, [r7, #20]
   1a360:	188a      	adds	r2, r1, r2
   1a362:	7812      	ldrb	r2, [r2, #0]
   1a364:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1a366:	68ba      	ldr	r2, [r7, #8]
   1a368:	697b      	ldr	r3, [r7, #20]
   1a36a:	18d3      	adds	r3, r2, r3
   1a36c:	781b      	ldrb	r3, [r3, #0]
   1a36e:	2b00      	cmp	r3, #0
   1a370:	d007      	beq.n	1a382 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1a372:	697b      	ldr	r3, [r7, #20]
   1a374:	3301      	adds	r3, #1
   1a376:	617b      	str	r3, [r7, #20]
   1a378:	697a      	ldr	r2, [r7, #20]
   1a37a:	687b      	ldr	r3, [r7, #4]
   1a37c:	429a      	cmp	r2, r3
   1a37e:	d3ea      	bcc.n	1a356 <prvStrncpy+0x12>
			break;
	}
}
   1a380:	e000      	b.n	1a384 <prvStrncpy+0x40>
			break;
   1a382:	46c0      	nop			; (mov r8, r8)
}
   1a384:	46c0      	nop			; (mov r8, r8)
   1a386:	46bd      	mov	sp, r7
   1a388:	b006      	add	sp, #24
   1a38a:	bd80      	pop	{r7, pc}

0001a38c <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1a38c:	b580      	push	{r7, lr}
   1a38e:	b082      	sub	sp, #8
   1a390:	af00      	add	r7, sp, #0
   1a392:	603a      	str	r2, [r7, #0]
   1a394:	1dfb      	adds	r3, r7, #7
   1a396:	1c02      	adds	r2, r0, #0
   1a398:	701a      	strb	r2, [r3, #0]
   1a39a:	1dbb      	adds	r3, r7, #6
   1a39c:	1c0a      	adds	r2, r1, #0
   1a39e:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1a3a0:	683b      	ldr	r3, [r7, #0]
   1a3a2:	2b00      	cmp	r3, #0
   1a3a4:	d104      	bne.n	1a3b0 <prvTraceSetObjectName+0x24>
   1a3a6:	4b2a      	ldr	r3, [pc, #168]	; (1a450 <prvTraceSetObjectName+0xc4>)
   1a3a8:	0018      	movs	r0, r3
   1a3aa:	4b2a      	ldr	r3, [pc, #168]	; (1a454 <prvTraceSetObjectName+0xc8>)
   1a3ac:	4798      	blx	r3
   1a3ae:	e04b      	b.n	1a448 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1a3b0:	1dfb      	adds	r3, r7, #7
   1a3b2:	781b      	ldrb	r3, [r3, #0]
   1a3b4:	2b08      	cmp	r3, #8
   1a3b6:	d904      	bls.n	1a3c2 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1a3b8:	4b27      	ldr	r3, [pc, #156]	; (1a458 <prvTraceSetObjectName+0xcc>)
   1a3ba:	0018      	movs	r0, r3
   1a3bc:	4b25      	ldr	r3, [pc, #148]	; (1a454 <prvTraceSetObjectName+0xc8>)
   1a3be:	4798      	blx	r3
		return;
   1a3c0:	e042      	b.n	1a448 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1a3c2:	1dbb      	adds	r3, r7, #6
   1a3c4:	781b      	ldrb	r3, [r3, #0]
   1a3c6:	2b00      	cmp	r3, #0
   1a3c8:	d104      	bne.n	1a3d4 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1a3ca:	4b24      	ldr	r3, [pc, #144]	; (1a45c <prvTraceSetObjectName+0xd0>)
   1a3cc:	0018      	movs	r0, r3
   1a3ce:	4b21      	ldr	r3, [pc, #132]	; (1a454 <prvTraceSetObjectName+0xc8>)
   1a3d0:	4798      	blx	r3
		return;
   1a3d2:	e039      	b.n	1a448 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1a3d4:	4b22      	ldr	r3, [pc, #136]	; (1a460 <prvTraceSetObjectName+0xd4>)
   1a3d6:	681a      	ldr	r2, [r3, #0]
   1a3d8:	1dfb      	adds	r3, r7, #7
   1a3da:	781b      	ldrb	r3, [r3, #0]
   1a3dc:	2164      	movs	r1, #100	; 0x64
   1a3de:	18d3      	adds	r3, r2, r3
   1a3e0:	185b      	adds	r3, r3, r1
   1a3e2:	781b      	ldrb	r3, [r3, #0]
   1a3e4:	1dba      	adds	r2, r7, #6
   1a3e6:	7812      	ldrb	r2, [r2, #0]
   1a3e8:	429a      	cmp	r2, r3
   1a3ea:	d909      	bls.n	1a400 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a3ec:	1dfb      	adds	r3, r7, #7
   1a3ee:	781b      	ldrb	r3, [r3, #0]
   1a3f0:	0018      	movs	r0, r3
   1a3f2:	4b1c      	ldr	r3, [pc, #112]	; (1a464 <prvTraceSetObjectName+0xd8>)
   1a3f4:	4798      	blx	r3
   1a3f6:	0003      	movs	r3, r0
   1a3f8:	0018      	movs	r0, r3
   1a3fa:	4b16      	ldr	r3, [pc, #88]	; (1a454 <prvTraceSetObjectName+0xc8>)
   1a3fc:	4798      	blx	r3
   1a3fe:	e023      	b.n	1a448 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1a400:	1dfb      	adds	r3, r7, #7
   1a402:	781a      	ldrb	r2, [r3, #0]
   1a404:	1dbb      	adds	r3, r7, #6
   1a406:	781b      	ldrb	r3, [r3, #0]
   1a408:	0011      	movs	r1, r2
   1a40a:	0018      	movs	r0, r3
   1a40c:	4b16      	ldr	r3, [pc, #88]	; (1a468 <prvTraceSetObjectName+0xdc>)
   1a40e:	4798      	blx	r3
   1a410:	0003      	movs	r3, r0
   1a412:	001a      	movs	r2, r3
   1a414:	4b15      	ldr	r3, [pc, #84]	; (1a46c <prvTraceSetObjectName+0xe0>)
   1a416:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1a418:	4b15      	ldr	r3, [pc, #84]	; (1a470 <prvTraceSetObjectName+0xe4>)
   1a41a:	681b      	ldr	r3, [r3, #0]
   1a41c:	2b00      	cmp	r3, #0
   1a41e:	d113      	bne.n	1a448 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a420:	4b0f      	ldr	r3, [pc, #60]	; (1a460 <prvTraceSetObjectName+0xd4>)
   1a422:	681a      	ldr	r2, [r3, #0]
   1a424:	4b11      	ldr	r3, [pc, #68]	; (1a46c <prvTraceSetObjectName+0xe0>)
   1a426:	881b      	ldrh	r3, [r3, #0]
   1a428:	3398      	adds	r3, #152	; 0x98
   1a42a:	18d3      	adds	r3, r2, r3
   1a42c:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1a42e:	4b0c      	ldr	r3, [pc, #48]	; (1a460 <prvTraceSetObjectName+0xd4>)
   1a430:	681a      	ldr	r2, [r3, #0]
   1a432:	1dfb      	adds	r3, r7, #7
   1a434:	781b      	ldrb	r3, [r3, #0]
   1a436:	2170      	movs	r1, #112	; 0x70
   1a438:	18d3      	adds	r3, r2, r3
   1a43a:	185b      	adds	r3, r3, r1
   1a43c:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a43e:	001a      	movs	r2, r3
   1a440:	683b      	ldr	r3, [r7, #0]
   1a442:	0019      	movs	r1, r3
   1a444:	4b0b      	ldr	r3, [pc, #44]	; (1a474 <prvTraceSetObjectName+0xe8>)
   1a446:	4798      	blx	r3
		}
	}
}
   1a448:	46bd      	mov	sp, r7
   1a44a:	b002      	add	sp, #8
   1a44c:	bd80      	pop	{r7, pc}
   1a44e:	46c0      	nop			; (mov r8, r8)
   1a450:	00038ebc 	.word	0x00038ebc
   1a454:	0001a479 	.word	0x0001a479
   1a458:	00038ef0 	.word	0x00038ef0
   1a45c:	00038f20 	.word	0x00038f20
   1a460:	20000df4 	.word	0x20000df4
   1a464:	00019199 	.word	0x00019199
   1a468:	0001a085 	.word	0x0001a085
   1a46c:	20000dfc 	.word	0x20000dfc
   1a470:	20000d54 	.word	0x20000d54
   1a474:	0001a345 	.word	0x0001a345

0001a478 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1a478:	b580      	push	{r7, lr}
   1a47a:	b082      	sub	sp, #8
   1a47c:	af00      	add	r7, sp, #0
   1a47e:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1a480:	4b11      	ldr	r3, [pc, #68]	; (1a4c8 <prvTraceError+0x50>)
   1a482:	681b      	ldr	r3, [r3, #0]
   1a484:	2b00      	cmp	r3, #0
   1a486:	d001      	beq.n	1a48c <prvTraceError+0x14>
	{
		vTraceStop();
   1a488:	4b10      	ldr	r3, [pc, #64]	; (1a4cc <prvTraceError+0x54>)
   1a48a:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1a48c:	4b10      	ldr	r3, [pc, #64]	; (1a4d0 <prvTraceError+0x58>)
   1a48e:	681b      	ldr	r3, [r3, #0]
   1a490:	2b00      	cmp	r3, #0
   1a492:	d115      	bne.n	1a4c0 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1a494:	4b0e      	ldr	r3, [pc, #56]	; (1a4d0 <prvTraceError+0x58>)
   1a496:	687a      	ldr	r2, [r7, #4]
   1a498:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1a49a:	4b0b      	ldr	r3, [pc, #44]	; (1a4c8 <prvTraceError+0x50>)
   1a49c:	681b      	ldr	r3, [r3, #0]
   1a49e:	2b00      	cmp	r3, #0
   1a4a0:	d00e      	beq.n	1a4c0 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a4a2:	4b09      	ldr	r3, [pc, #36]	; (1a4c8 <prvTraceError+0x50>)
   1a4a4:	681b      	ldr	r3, [r3, #0]
   1a4a6:	4a0b      	ldr	r2, [pc, #44]	; (1a4d4 <prvTraceError+0x5c>)
   1a4a8:	1898      	adds	r0, r3, r2
   1a4aa:	4b09      	ldr	r3, [pc, #36]	; (1a4d0 <prvTraceError+0x58>)
   1a4ac:	681b      	ldr	r3, [r3, #0]
   1a4ae:	2250      	movs	r2, #80	; 0x50
   1a4b0:	0019      	movs	r1, r3
   1a4b2:	4b09      	ldr	r3, [pc, #36]	; (1a4d8 <prvTraceError+0x60>)
   1a4b4:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1a4b6:	4b04      	ldr	r3, [pc, #16]	; (1a4c8 <prvTraceError+0x50>)
   1a4b8:	681b      	ldr	r3, [r3, #0]
   1a4ba:	4a08      	ldr	r2, [pc, #32]	; (1a4dc <prvTraceError+0x64>)
   1a4bc:	2101      	movs	r1, #1
   1a4be:	5099      	str	r1, [r3, r2]
		}
	}
}
   1a4c0:	46c0      	nop			; (mov r8, r8)
   1a4c2:	46bd      	mov	sp, r7
   1a4c4:	b002      	add	sp, #8
   1a4c6:	bd80      	pop	{r7, pc}
   1a4c8:	20000df4 	.word	0x20000df4
   1a4cc:	0001933d 	.word	0x0001933d
   1a4d0:	20000d54 	.word	0x20000d54
   1a4d4:	000006bc 	.word	0x000006bc
   1a4d8:	0001a345 	.word	0x0001a345
   1a4dc:	000006b4 	.word	0x000006b4

0001a4e0 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1a4e0:	b580      	push	{r7, lr}
   1a4e2:	b086      	sub	sp, #24
   1a4e4:	af00      	add	r7, sp, #0
   1a4e6:	0002      	movs	r2, r0
   1a4e8:	1dfb      	adds	r3, r7, #7
   1a4ea:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1a4ec:	2300      	movs	r3, #0
   1a4ee:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1a4f0:	2300      	movs	r3, #0
   1a4f2:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1a4f4:	1dfb      	adds	r3, r7, #7
   1a4f6:	781b      	ldrb	r3, [r3, #0]
   1a4f8:	2b00      	cmp	r3, #0
   1a4fa:	d000      	beq.n	1a4fe <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1a4fc:	e089      	b.n	1a612 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1a4fe:	4b49      	ldr	r3, [pc, #292]	; (1a624 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1a500:	0018      	movs	r0, r3
   1a502:	4b49      	ldr	r3, [pc, #292]	; (1a628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1a504:	4798      	blx	r3
   1a506:	e08a      	b.n	1a61e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1a508:	4b48      	ldr	r3, [pc, #288]	; (1a62c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a50a:	681b      	ldr	r3, [r3, #0]
   1a50c:	69da      	ldr	r2, [r3, #28]
   1a50e:	697b      	ldr	r3, [r7, #20]
   1a510:	18d3      	adds	r3, r2, r3
   1a512:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a514:	4b45      	ldr	r3, [pc, #276]	; (1a62c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a516:	6819      	ldr	r1, [r3, #0]
   1a518:	693b      	ldr	r3, [r7, #16]
   1a51a:	009a      	lsls	r2, r3, #2
   1a51c:	23e2      	movs	r3, #226	; 0xe2
   1a51e:	00db      	lsls	r3, r3, #3
   1a520:	188a      	adds	r2, r1, r2
   1a522:	18d3      	adds	r3, r2, r3
   1a524:	781b      	ldrb	r3, [r3, #0]
   1a526:	2b98      	cmp	r3, #152	; 0x98
   1a528:	d934      	bls.n	1a594 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1a52a:	4b40      	ldr	r3, [pc, #256]	; (1a62c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a52c:	6819      	ldr	r1, [r3, #0]
   1a52e:	693b      	ldr	r3, [r7, #16]
   1a530:	009a      	lsls	r2, r3, #2
   1a532:	23e2      	movs	r3, #226	; 0xe2
   1a534:	00db      	lsls	r3, r3, #3
   1a536:	188a      	adds	r2, r1, r2
   1a538:	18d3      	adds	r3, r2, r3
   1a53a:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a53c:	2ba7      	cmp	r3, #167	; 0xa7
   1a53e:	d829      	bhi.n	1a594 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1a540:	4b3a      	ldr	r3, [pc, #232]	; (1a62c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a542:	6819      	ldr	r1, [r3, #0]
   1a544:	693b      	ldr	r3, [r7, #16]
   1a546:	009a      	lsls	r2, r3, #2
   1a548:	23e2      	movs	r3, #226	; 0xe2
   1a54a:	00db      	lsls	r3, r3, #3
   1a54c:	188a      	adds	r2, r1, r2
   1a54e:	18d3      	adds	r3, r2, r3
   1a550:	781a      	ldrb	r2, [r3, #0]
   1a552:	230f      	movs	r3, #15
   1a554:	18fb      	adds	r3, r7, r3
   1a556:	3268      	adds	r2, #104	; 0x68
   1a558:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1a55a:	230f      	movs	r3, #15
   1a55c:	18fb      	adds	r3, r7, r3
   1a55e:	781a      	ldrb	r2, [r3, #0]
   1a560:	693b      	ldr	r3, [r7, #16]
   1a562:	18d2      	adds	r2, r2, r3
   1a564:	4b31      	ldr	r3, [pc, #196]	; (1a62c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a566:	681b      	ldr	r3, [r3, #0]
   1a568:	699b      	ldr	r3, [r3, #24]
   1a56a:	429a      	cmp	r2, r3
   1a56c:	d24d      	bcs.n	1a60a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1a56e:	4b2f      	ldr	r3, [pc, #188]	; (1a62c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a570:	681a      	ldr	r2, [r3, #0]
   1a572:	693b      	ldr	r3, [r7, #16]
   1a574:	009b      	lsls	r3, r3, #2
   1a576:	21e2      	movs	r1, #226	; 0xe2
   1a578:	00c9      	lsls	r1, r1, #3
   1a57a:	468c      	mov	ip, r1
   1a57c:	4463      	add	r3, ip
   1a57e:	18d0      	adds	r0, r2, r3
   1a580:	230f      	movs	r3, #15
   1a582:	18fb      	adds	r3, r7, r3
   1a584:	781b      	ldrb	r3, [r3, #0]
   1a586:	3301      	adds	r3, #1
   1a588:	009b      	lsls	r3, r3, #2
   1a58a:	001a      	movs	r2, r3
   1a58c:	2100      	movs	r1, #0
   1a58e:	4b28      	ldr	r3, [pc, #160]	; (1a630 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a590:	4798      	blx	r3
		{
   1a592:	e03a      	b.n	1a60a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1a594:	4b25      	ldr	r3, [pc, #148]	; (1a62c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a596:	6819      	ldr	r1, [r3, #0]
   1a598:	693b      	ldr	r3, [r7, #16]
   1a59a:	009a      	lsls	r2, r3, #2
   1a59c:	23e2      	movs	r3, #226	; 0xe2
   1a59e:	00db      	lsls	r3, r3, #3
   1a5a0:	188a      	adds	r2, r1, r2
   1a5a2:	18d3      	adds	r3, r2, r3
   1a5a4:	781b      	ldrb	r3, [r3, #0]
   1a5a6:	2b01      	cmp	r3, #1
   1a5a8:	d130      	bne.n	1a60c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1a5aa:	693b      	ldr	r3, [r7, #16]
   1a5ac:	1c5a      	adds	r2, r3, #1
   1a5ae:	4b1f      	ldr	r3, [pc, #124]	; (1a62c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a5b0:	681b      	ldr	r3, [r3, #0]
   1a5b2:	699b      	ldr	r3, [r3, #24]
   1a5b4:	429a      	cmp	r2, r3
   1a5b6:	d20e      	bcs.n	1a5d6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1a5b8:	4b1c      	ldr	r3, [pc, #112]	; (1a62c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a5ba:	681a      	ldr	r2, [r3, #0]
   1a5bc:	693b      	ldr	r3, [r7, #16]
   1a5be:	009b      	lsls	r3, r3, #2
   1a5c0:	21e2      	movs	r1, #226	; 0xe2
   1a5c2:	00c9      	lsls	r1, r1, #3
   1a5c4:	468c      	mov	ip, r1
   1a5c6:	4463      	add	r3, ip
   1a5c8:	18d3      	adds	r3, r2, r3
   1a5ca:	2208      	movs	r2, #8
   1a5cc:	2100      	movs	r1, #0
   1a5ce:	0018      	movs	r0, r3
   1a5d0:	4b17      	ldr	r3, [pc, #92]	; (1a630 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a5d2:	4798      	blx	r3
   1a5d4:	e01a      	b.n	1a60c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1a5d6:	4b15      	ldr	r3, [pc, #84]	; (1a62c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a5d8:	681b      	ldr	r3, [r3, #0]
   1a5da:	22e2      	movs	r2, #226	; 0xe2
   1a5dc:	00d2      	lsls	r2, r2, #3
   1a5de:	4694      	mov	ip, r2
   1a5e0:	4463      	add	r3, ip
   1a5e2:	2204      	movs	r2, #4
   1a5e4:	2100      	movs	r1, #0
   1a5e6:	0018      	movs	r0, r3
   1a5e8:	4b11      	ldr	r3, [pc, #68]	; (1a630 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a5ea:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1a5ec:	4b0f      	ldr	r3, [pc, #60]	; (1a62c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a5ee:	681a      	ldr	r2, [r3, #0]
   1a5f0:	693b      	ldr	r3, [r7, #16]
   1a5f2:	009b      	lsls	r3, r3, #2
   1a5f4:	21e2      	movs	r1, #226	; 0xe2
   1a5f6:	00c9      	lsls	r1, r1, #3
   1a5f8:	468c      	mov	ip, r1
   1a5fa:	4463      	add	r3, ip
   1a5fc:	18d3      	adds	r3, r2, r3
   1a5fe:	2204      	movs	r2, #4
   1a600:	2100      	movs	r1, #0
   1a602:	0018      	movs	r0, r3
   1a604:	4b0a      	ldr	r3, [pc, #40]	; (1a630 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a606:	4798      	blx	r3
   1a608:	e000      	b.n	1a60c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1a60a:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1a60c:	697b      	ldr	r3, [r7, #20]
   1a60e:	3301      	adds	r3, #1
   1a610:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1a612:	1dfb      	adds	r3, r7, #7
   1a614:	781a      	ldrb	r2, [r3, #0]
   1a616:	697b      	ldr	r3, [r7, #20]
   1a618:	429a      	cmp	r2, r3
   1a61a:	d900      	bls.n	1a61e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1a61c:	e774      	b.n	1a508 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1a61e:	46bd      	mov	sp, r7
   1a620:	b006      	add	sp, #24
   1a622:	bd80      	pop	{r7, pc}
   1a624:	00038f80 	.word	0x00038f80
   1a628:	0001a479 	.word	0x0001a479
   1a62c:	20000df4 	.word	0x20000df4
   1a630:	0003560f 	.word	0x0003560f

0001a634 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1a634:	b580      	push	{r7, lr}
   1a636:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1a638:	4b12      	ldr	r3, [pc, #72]	; (1a684 <prvTraceUpdateCounters+0x50>)
   1a63a:	681b      	ldr	r3, [r3, #0]
   1a63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a63e:	2b00      	cmp	r3, #0
   1a640:	d01c      	beq.n	1a67c <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1a642:	4b10      	ldr	r3, [pc, #64]	; (1a684 <prvTraceUpdateCounters+0x50>)
   1a644:	681b      	ldr	r3, [r3, #0]
   1a646:	695a      	ldr	r2, [r3, #20]
   1a648:	3201      	adds	r2, #1
   1a64a:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1a64c:	4b0d      	ldr	r3, [pc, #52]	; (1a684 <prvTraceUpdateCounters+0x50>)
   1a64e:	681b      	ldr	r3, [r3, #0]
   1a650:	69da      	ldr	r2, [r3, #28]
   1a652:	3201      	adds	r2, #1
   1a654:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a656:	4b0b      	ldr	r3, [pc, #44]	; (1a684 <prvTraceUpdateCounters+0x50>)
   1a658:	681b      	ldr	r3, [r3, #0]
   1a65a:	69da      	ldr	r2, [r3, #28]
   1a65c:	232c      	movs	r3, #44	; 0x2c
   1a65e:	33ff      	adds	r3, #255	; 0xff
   1a660:	429a      	cmp	r2, r3
   1a662:	d907      	bls.n	1a674 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1a664:	4b07      	ldr	r3, [pc, #28]	; (1a684 <prvTraceUpdateCounters+0x50>)
   1a666:	681b      	ldr	r3, [r3, #0]
   1a668:	2201      	movs	r2, #1
   1a66a:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1a66c:	4b05      	ldr	r3, [pc, #20]	; (1a684 <prvTraceUpdateCounters+0x50>)
   1a66e:	681b      	ldr	r3, [r3, #0]
   1a670:	2200      	movs	r2, #0
   1a672:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1a674:	2001      	movs	r0, #1
   1a676:	4b04      	ldr	r3, [pc, #16]	; (1a688 <prvTraceUpdateCounters+0x54>)
   1a678:	4798      	blx	r3
   1a67a:	e000      	b.n	1a67e <prvTraceUpdateCounters+0x4a>
		return;
   1a67c:	46c0      	nop			; (mov r8, r8)
#endif
}
   1a67e:	46bd      	mov	sp, r7
   1a680:	bd80      	pop	{r7, pc}
   1a682:	46c0      	nop			; (mov r8, r8)
   1a684:	20000df4 	.word	0x20000df4
   1a688:	0001a4e1 	.word	0x0001a4e1

0001a68c <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1a68c:	b5b0      	push	{r4, r5, r7, lr}
   1a68e:	b086      	sub	sp, #24
   1a690:	af00      	add	r7, sp, #0
   1a692:	0002      	movs	r2, r0
   1a694:	1dbb      	adds	r3, r7, #6
   1a696:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1a698:	2300      	movs	r3, #0
   1a69a:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1a69c:	2300      	movs	r3, #0
   1a69e:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1a6a0:	2300      	movs	r3, #0
   1a6a2:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1a6a4:	1dbb      	adds	r3, r7, #6
   1a6a6:	881b      	ldrh	r3, [r3, #0]
   1a6a8:	2bff      	cmp	r3, #255	; 0xff
   1a6aa:	d00a      	beq.n	1a6c2 <prvTraceGetDTS+0x36>
   1a6ac:	1dbb      	adds	r3, r7, #6
   1a6ae:	881b      	ldrh	r3, [r3, #0]
   1a6b0:	4a60      	ldr	r2, [pc, #384]	; (1a834 <prvTraceGetDTS+0x1a8>)
   1a6b2:	4293      	cmp	r3, r2
   1a6b4:	d005      	beq.n	1a6c2 <prvTraceGetDTS+0x36>
   1a6b6:	4b60      	ldr	r3, [pc, #384]	; (1a838 <prvTraceGetDTS+0x1ac>)
   1a6b8:	0018      	movs	r0, r3
   1a6ba:	4b60      	ldr	r3, [pc, #384]	; (1a83c <prvTraceGetDTS+0x1b0>)
   1a6bc:	4798      	blx	r3
   1a6be:	2300      	movs	r3, #0
   1a6c0:	e0b3      	b.n	1a82a <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1a6c2:	4b5f      	ldr	r3, [pc, #380]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a6c4:	681b      	ldr	r3, [r3, #0]
   1a6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a6c8:	2b00      	cmp	r3, #0
   1a6ca:	d118      	bne.n	1a6fe <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1a6cc:	4b5d      	ldr	r3, [pc, #372]	; (1a844 <prvTraceGetDTS+0x1b8>)
   1a6ce:	681b      	ldr	r3, [r3, #0]
   1a6d0:	2b00      	cmp	r3, #0
   1a6d2:	d006      	beq.n	1a6e2 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1a6d4:	4b5a      	ldr	r3, [pc, #360]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a6d6:	681b      	ldr	r3, [r3, #0]
   1a6d8:	4a5a      	ldr	r2, [pc, #360]	; (1a844 <prvTraceGetDTS+0x1b8>)
   1a6da:	6812      	ldr	r2, [r2, #0]
   1a6dc:	0892      	lsrs	r2, r2, #2
   1a6de:	625a      	str	r2, [r3, #36]	; 0x24
   1a6e0:	e00d      	b.n	1a6fe <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1a6e2:	4b59      	ldr	r3, [pc, #356]	; (1a848 <prvTraceGetDTS+0x1bc>)
   1a6e4:	681a      	ldr	r2, [r3, #0]
   1a6e6:	4b59      	ldr	r3, [pc, #356]	; (1a84c <prvTraceGetDTS+0x1c0>)
   1a6e8:	681b      	ldr	r3, [r3, #0]
   1a6ea:	429a      	cmp	r2, r3
   1a6ec:	d007      	beq.n	1a6fe <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1a6ee:	4b54      	ldr	r3, [pc, #336]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a6f0:	681c      	ldr	r4, [r3, #0]
   1a6f2:	2000      	movs	r0, #0
   1a6f4:	4b56      	ldr	r3, [pc, #344]	; (1a850 <prvTraceGetDTS+0x1c4>)
   1a6f6:	4798      	blx	r3
   1a6f8:	0003      	movs	r3, r0
   1a6fa:	089b      	lsrs	r3, r3, #2
   1a6fc:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1a6fe:	230c      	movs	r3, #12
   1a700:	18fb      	adds	r3, r7, r3
   1a702:	0018      	movs	r0, r3
   1a704:	4b53      	ldr	r3, [pc, #332]	; (1a854 <prvTraceGetDTS+0x1c8>)
   1a706:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1a708:	68fa      	ldr	r2, [r7, #12]
   1a70a:	4b53      	ldr	r3, [pc, #332]	; (1a858 <prvTraceGetDTS+0x1cc>)
   1a70c:	681b      	ldr	r3, [r3, #0]
   1a70e:	1ad3      	subs	r3, r2, r3
   1a710:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1a712:	68fa      	ldr	r2, [r7, #12]
   1a714:	4b50      	ldr	r3, [pc, #320]	; (1a858 <prvTraceGetDTS+0x1cc>)
   1a716:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1a718:	4b49      	ldr	r3, [pc, #292]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a71a:	681b      	ldr	r3, [r3, #0]
   1a71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a71e:	2b00      	cmp	r3, #0
   1a720:	d044      	beq.n	1a7ac <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1a722:	4b47      	ldr	r3, [pc, #284]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a724:	681b      	ldr	r3, [r3, #0]
   1a726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a728:	693b      	ldr	r3, [r7, #16]
   1a72a:	429a      	cmp	r2, r3
   1a72c:	d21e      	bcs.n	1a76c <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1a72e:	4b44      	ldr	r3, [pc, #272]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a730:	681c      	ldr	r4, [r3, #0]
   1a732:	4b43      	ldr	r3, [pc, #268]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a734:	681b      	ldr	r3, [r3, #0]
   1a736:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1a738:	4b41      	ldr	r3, [pc, #260]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a73a:	681b      	ldr	r3, [r3, #0]
   1a73c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a73e:	4b47      	ldr	r3, [pc, #284]	; (1a85c <prvTraceGetDTS+0x1d0>)
   1a740:	0011      	movs	r1, r2
   1a742:	6938      	ldr	r0, [r7, #16]
   1a744:	4798      	blx	r3
   1a746:	0003      	movs	r3, r0
   1a748:	18eb      	adds	r3, r5, r3
   1a74a:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1a74c:	4b3c      	ldr	r3, [pc, #240]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a74e:	681c      	ldr	r4, [r3, #0]
   1a750:	4b3b      	ldr	r3, [pc, #236]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a752:	681b      	ldr	r3, [r3, #0]
   1a754:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1a756:	4b3a      	ldr	r3, [pc, #232]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a758:	681b      	ldr	r3, [r3, #0]
   1a75a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a75c:	693a      	ldr	r2, [r7, #16]
   1a75e:	4b40      	ldr	r3, [pc, #256]	; (1a860 <prvTraceGetDTS+0x1d4>)
   1a760:	0010      	movs	r0, r2
   1a762:	4798      	blx	r3
   1a764:	000b      	movs	r3, r1
   1a766:	18eb      	adds	r3, r5, r3
   1a768:	62a3      	str	r3, [r4, #40]	; 0x28
   1a76a:	e007      	b.n	1a77c <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1a76c:	4b34      	ldr	r3, [pc, #208]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a76e:	681b      	ldr	r3, [r3, #0]
   1a770:	4a33      	ldr	r2, [pc, #204]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a772:	6812      	ldr	r2, [r2, #0]
   1a774:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a776:	693a      	ldr	r2, [r7, #16]
   1a778:	188a      	adds	r2, r1, r2
   1a77a:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1a77c:	4b30      	ldr	r3, [pc, #192]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a77e:	681b      	ldr	r3, [r3, #0]
   1a780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a782:	4b2f      	ldr	r3, [pc, #188]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a784:	681b      	ldr	r3, [r3, #0]
   1a786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a788:	429a      	cmp	r2, r3
   1a78a:	d313      	bcc.n	1a7b4 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1a78c:	4b2c      	ldr	r3, [pc, #176]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a78e:	681b      	ldr	r3, [r3, #0]
   1a790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a792:	3201      	adds	r2, #1
   1a794:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1a796:	4b2a      	ldr	r3, [pc, #168]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a798:	681b      	ldr	r3, [r3, #0]
   1a79a:	4a29      	ldr	r2, [pc, #164]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a79c:	6812      	ldr	r2, [r2, #0]
   1a79e:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a7a0:	4a27      	ldr	r2, [pc, #156]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a7a2:	6812      	ldr	r2, [r2, #0]
   1a7a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1a7a6:	1a8a      	subs	r2, r1, r2
   1a7a8:	629a      	str	r2, [r3, #40]	; 0x28
   1a7aa:	e003      	b.n	1a7b4 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1a7ac:	4b24      	ldr	r3, [pc, #144]	; (1a840 <prvTraceGetDTS+0x1b4>)
   1a7ae:	681b      	ldr	r3, [r3, #0]
   1a7b0:	68fa      	ldr	r2, [r7, #12]
   1a7b2:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1a7b4:	1dbb      	adds	r3, r7, #6
   1a7b6:	881a      	ldrh	r2, [r3, #0]
   1a7b8:	693b      	ldr	r3, [r7, #16]
   1a7ba:	429a      	cmp	r2, r3
   1a7bc:	d22f      	bcs.n	1a81e <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1a7be:	4b29      	ldr	r3, [pc, #164]	; (1a864 <prvTraceGetDTS+0x1d8>)
   1a7c0:	4798      	blx	r3
   1a7c2:	0003      	movs	r3, r0
   1a7c4:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1a7c6:	697b      	ldr	r3, [r7, #20]
   1a7c8:	2b00      	cmp	r3, #0
   1a7ca:	d028      	beq.n	1a81e <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1a7cc:	1dbb      	adds	r3, r7, #6
   1a7ce:	881b      	ldrh	r3, [r3, #0]
   1a7d0:	4a18      	ldr	r2, [pc, #96]	; (1a834 <prvTraceGetDTS+0x1a8>)
   1a7d2:	4293      	cmp	r3, r2
   1a7d4:	d10b      	bne.n	1a7ee <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1a7d6:	697b      	ldr	r3, [r7, #20]
   1a7d8:	22a9      	movs	r2, #169	; 0xa9
   1a7da:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1a7dc:	693b      	ldr	r3, [r7, #16]
   1a7de:	0c1b      	lsrs	r3, r3, #16
   1a7e0:	b29a      	uxth	r2, r3
   1a7e2:	697b      	ldr	r3, [r7, #20]
   1a7e4:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1a7e6:	697b      	ldr	r3, [r7, #20]
   1a7e8:	2200      	movs	r2, #0
   1a7ea:	705a      	strb	r2, [r3, #1]
   1a7ec:	e015      	b.n	1a81a <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1a7ee:	1dbb      	adds	r3, r7, #6
   1a7f0:	881b      	ldrh	r3, [r3, #0]
   1a7f2:	2bff      	cmp	r3, #255	; 0xff
   1a7f4:	d10d      	bne.n	1a812 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1a7f6:	697b      	ldr	r3, [r7, #20]
   1a7f8:	22a8      	movs	r2, #168	; 0xa8
   1a7fa:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1a7fc:	693b      	ldr	r3, [r7, #16]
   1a7fe:	0a1b      	lsrs	r3, r3, #8
   1a800:	b29a      	uxth	r2, r3
   1a802:	697b      	ldr	r3, [r7, #20]
   1a804:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1a806:	693b      	ldr	r3, [r7, #16]
   1a808:	0e1b      	lsrs	r3, r3, #24
   1a80a:	b2da      	uxtb	r2, r3
   1a80c:	697b      	ldr	r3, [r7, #20]
   1a80e:	705a      	strb	r2, [r3, #1]
   1a810:	e003      	b.n	1a81a <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1a812:	4b15      	ldr	r3, [pc, #84]	; (1a868 <prvTraceGetDTS+0x1dc>)
   1a814:	0018      	movs	r0, r3
   1a816:	4b09      	ldr	r3, [pc, #36]	; (1a83c <prvTraceGetDTS+0x1b0>)
   1a818:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1a81a:	4b14      	ldr	r3, [pc, #80]	; (1a86c <prvTraceGetDTS+0x1e0>)
   1a81c:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1a81e:	693b      	ldr	r3, [r7, #16]
   1a820:	b29b      	uxth	r3, r3
   1a822:	1dba      	adds	r2, r7, #6
   1a824:	8812      	ldrh	r2, [r2, #0]
   1a826:	4013      	ands	r3, r2
   1a828:	b29b      	uxth	r3, r3
}
   1a82a:	0018      	movs	r0, r3
   1a82c:	46bd      	mov	sp, r7
   1a82e:	b006      	add	sp, #24
   1a830:	bdb0      	pop	{r4, r5, r7, pc}
   1a832:	46c0      	nop			; (mov r8, r8)
   1a834:	0000ffff 	.word	0x0000ffff
   1a838:	00038fd8 	.word	0x00038fd8
   1a83c:	0001a479 	.word	0x0001a479
   1a840:	20000df4 	.word	0x20000df4
   1a844:	20000d50 	.word	0x20000d50
   1a848:	e000e018 	.word	0xe000e018
   1a84c:	20005660 	.word	0x20005660
   1a850:	0002a895 	.word	0x0002a895
   1a854:	0001a871 	.word	0x0001a871
   1a858:	20000e00 	.word	0x20000e00
   1a85c:	00033635 	.word	0x00033635
   1a860:	00033741 	.word	0x00033741
   1a864:	0001a031 	.word	0x0001a031
   1a868:	00039018 	.word	0x00039018
   1a86c:	0001a635 	.word	0x0001a635

0001a870 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1a870:	b580      	push	{r7, lr}
   1a872:	b084      	sub	sp, #16
   1a874:	af00      	add	r7, sp, #0
   1a876:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1a878:	2300      	movs	r3, #0
   1a87a:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1a87c:	2300      	movs	r3, #0
   1a87e:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1a880:	4b2d      	ldr	r3, [pc, #180]	; (1a938 <prvTracePortGetTimeStamp+0xc8>)
   1a882:	681b      	ldr	r3, [r3, #0]
   1a884:	2b01      	cmp	r3, #1
   1a886:	d107      	bne.n	1a898 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1a888:	687b      	ldr	r3, [r7, #4]
   1a88a:	2b00      	cmp	r3, #0
   1a88c:	d04f      	beq.n	1a92e <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1a88e:	4b2b      	ldr	r3, [pc, #172]	; (1a93c <prvTracePortGetTimeStamp+0xcc>)
   1a890:	681a      	ldr	r2, [r3, #0]
   1a892:	687b      	ldr	r3, [r7, #4]
   1a894:	601a      	str	r2, [r3, #0]
		return;
   1a896:	e04a      	b.n	1a92e <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1a898:	4b29      	ldr	r3, [pc, #164]	; (1a940 <prvTracePortGetTimeStamp+0xd0>)
   1a89a:	681a      	ldr	r2, [r3, #0]
   1a89c:	4b29      	ldr	r3, [pc, #164]	; (1a944 <prvTracePortGetTimeStamp+0xd4>)
   1a89e:	681b      	ldr	r3, [r3, #0]
   1a8a0:	1ad3      	subs	r3, r2, r3
   1a8a2:	3301      	adds	r3, #1
   1a8a4:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1a8a6:	4b28      	ldr	r3, [pc, #160]	; (1a948 <prvTracePortGetTimeStamp+0xd8>)
   1a8a8:	681a      	ldr	r2, [r3, #0]
   1a8aa:	4b28      	ldr	r3, [pc, #160]	; (1a94c <prvTracePortGetTimeStamp+0xdc>)
   1a8ac:	681b      	ldr	r3, [r3, #0]
   1a8ae:	1ad3      	subs	r3, r2, r3
   1a8b0:	3b01      	subs	r3, #1
   1a8b2:	2b00      	cmp	r3, #0
   1a8b4:	db03      	blt.n	1a8be <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1a8b6:	4b24      	ldr	r3, [pc, #144]	; (1a948 <prvTracePortGetTimeStamp+0xd8>)
   1a8b8:	681b      	ldr	r3, [r3, #0]
   1a8ba:	60fb      	str	r3, [r7, #12]
   1a8bc:	e002      	b.n	1a8c4 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1a8be:	4b23      	ldr	r3, [pc, #140]	; (1a94c <prvTracePortGetTimeStamp+0xdc>)
   1a8c0:	681b      	ldr	r3, [r3, #0]
   1a8c2:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1a8c4:	4b20      	ldr	r3, [pc, #128]	; (1a948 <prvTracePortGetTimeStamp+0xd8>)
   1a8c6:	681b      	ldr	r3, [r3, #0]
   1a8c8:	68fa      	ldr	r2, [r7, #12]
   1a8ca:	429a      	cmp	r2, r3
   1a8cc:	d107      	bne.n	1a8de <prvTracePortGetTimeStamp+0x6e>
   1a8ce:	4b20      	ldr	r3, [pc, #128]	; (1a950 <prvTracePortGetTimeStamp+0xe0>)
   1a8d0:	681b      	ldr	r3, [r3, #0]
   1a8d2:	68ba      	ldr	r2, [r7, #8]
   1a8d4:	429a      	cmp	r2, r3
   1a8d6:	d202      	bcs.n	1a8de <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1a8d8:	68fb      	ldr	r3, [r7, #12]
   1a8da:	3301      	adds	r3, #1
   1a8dc:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1a8de:	687b      	ldr	r3, [r7, #4]
   1a8e0:	2b00      	cmp	r3, #0
   1a8e2:	d016      	beq.n	1a912 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1a8e4:	4b16      	ldr	r3, [pc, #88]	; (1a940 <prvTracePortGetTimeStamp+0xd0>)
   1a8e6:	681b      	ldr	r3, [r3, #0]
   1a8e8:	3301      	adds	r3, #1
   1a8ea:	089b      	lsrs	r3, r3, #2
   1a8ec:	68fa      	ldr	r2, [r7, #12]
   1a8ee:	435a      	muls	r2, r3
   1a8f0:	4b12      	ldr	r3, [pc, #72]	; (1a93c <prvTracePortGetTimeStamp+0xcc>)
   1a8f2:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1a8f4:	4b12      	ldr	r3, [pc, #72]	; (1a940 <prvTracePortGetTimeStamp+0xd0>)
   1a8f6:	681b      	ldr	r3, [r3, #0]
   1a8f8:	3301      	adds	r3, #1
   1a8fa:	2203      	movs	r2, #3
   1a8fc:	4013      	ands	r3, r2
   1a8fe:	68fa      	ldr	r2, [r7, #12]
   1a900:	435a      	muls	r2, r3
   1a902:	68bb      	ldr	r3, [r7, #8]
   1a904:	18d3      	adds	r3, r2, r3
   1a906:	089a      	lsrs	r2, r3, #2
   1a908:	4b0c      	ldr	r3, [pc, #48]	; (1a93c <prvTracePortGetTimeStamp+0xcc>)
   1a90a:	681b      	ldr	r3, [r3, #0]
   1a90c:	18d2      	adds	r2, r2, r3
   1a90e:	4b0b      	ldr	r3, [pc, #44]	; (1a93c <prvTracePortGetTimeStamp+0xcc>)
   1a910:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1a912:	4b0d      	ldr	r3, [pc, #52]	; (1a948 <prvTracePortGetTimeStamp+0xd8>)
   1a914:	68fa      	ldr	r2, [r7, #12]
   1a916:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1a918:	687b      	ldr	r3, [r7, #4]
   1a91a:	2b00      	cmp	r3, #0
   1a91c:	d003      	beq.n	1a926 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1a91e:	4b07      	ldr	r3, [pc, #28]	; (1a93c <prvTracePortGetTimeStamp+0xcc>)
   1a920:	681a      	ldr	r2, [r3, #0]
   1a922:	687b      	ldr	r3, [r7, #4]
   1a924:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1a926:	4b0a      	ldr	r3, [pc, #40]	; (1a950 <prvTracePortGetTimeStamp+0xe0>)
   1a928:	68ba      	ldr	r2, [r7, #8]
   1a92a:	601a      	str	r2, [r3, #0]
   1a92c:	e000      	b.n	1a930 <prvTracePortGetTimeStamp+0xc0>
		return;
   1a92e:	46c0      	nop			; (mov r8, r8)
}
   1a930:	46bd      	mov	sp, r7
   1a932:	b004      	add	sp, #16
   1a934:	bd80      	pop	{r7, pc}
   1a936:	46c0      	nop			; (mov r8, r8)
   1a938:	20000d40 	.word	0x20000d40
   1a93c:	20000d44 	.word	0x20000d44
   1a940:	e000e014 	.word	0xe000e014
   1a944:	e000e018 	.word	0xe000e018
   1a948:	20000e04 	.word	0x20000e04
   1a94c:	20000d3c 	.word	0x20000d3c
   1a950:	20000e08 	.word	0x20000e08

0001a954 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1a954:	b580      	push	{r7, lr}
   1a956:	b082      	sub	sp, #8
   1a958:	af00      	add	r7, sp, #0
   1a95a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a95c:	687b      	ldr	r3, [r7, #4]
   1a95e:	3308      	adds	r3, #8
   1a960:	001a      	movs	r2, r3
   1a962:	687b      	ldr	r3, [r7, #4]
   1a964:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1a966:	687b      	ldr	r3, [r7, #4]
   1a968:	2201      	movs	r2, #1
   1a96a:	4252      	negs	r2, r2
   1a96c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a96e:	687b      	ldr	r3, [r7, #4]
   1a970:	3308      	adds	r3, #8
   1a972:	001a      	movs	r2, r3
   1a974:	687b      	ldr	r3, [r7, #4]
   1a976:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a978:	687b      	ldr	r3, [r7, #4]
   1a97a:	3308      	adds	r3, #8
   1a97c:	001a      	movs	r2, r3
   1a97e:	687b      	ldr	r3, [r7, #4]
   1a980:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1a982:	687b      	ldr	r3, [r7, #4]
   1a984:	2200      	movs	r2, #0
   1a986:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1a988:	46c0      	nop			; (mov r8, r8)
   1a98a:	46bd      	mov	sp, r7
   1a98c:	b002      	add	sp, #8
   1a98e:	bd80      	pop	{r7, pc}

0001a990 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1a990:	b580      	push	{r7, lr}
   1a992:	b082      	sub	sp, #8
   1a994:	af00      	add	r7, sp, #0
   1a996:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1a998:	687b      	ldr	r3, [r7, #4]
   1a99a:	2200      	movs	r2, #0
   1a99c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1a99e:	46c0      	nop			; (mov r8, r8)
   1a9a0:	46bd      	mov	sp, r7
   1a9a2:	b002      	add	sp, #8
   1a9a4:	bd80      	pop	{r7, pc}

0001a9a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1a9a6:	b580      	push	{r7, lr}
   1a9a8:	b084      	sub	sp, #16
   1a9aa:	af00      	add	r7, sp, #0
   1a9ac:	6078      	str	r0, [r7, #4]
   1a9ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1a9b0:	687b      	ldr	r3, [r7, #4]
   1a9b2:	685b      	ldr	r3, [r3, #4]
   1a9b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1a9b6:	683b      	ldr	r3, [r7, #0]
   1a9b8:	68fa      	ldr	r2, [r7, #12]
   1a9ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1a9bc:	68fb      	ldr	r3, [r7, #12]
   1a9be:	689a      	ldr	r2, [r3, #8]
   1a9c0:	683b      	ldr	r3, [r7, #0]
   1a9c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1a9c4:	68fb      	ldr	r3, [r7, #12]
   1a9c6:	689b      	ldr	r3, [r3, #8]
   1a9c8:	683a      	ldr	r2, [r7, #0]
   1a9ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1a9cc:	68fb      	ldr	r3, [r7, #12]
   1a9ce:	683a      	ldr	r2, [r7, #0]
   1a9d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1a9d2:	683b      	ldr	r3, [r7, #0]
   1a9d4:	687a      	ldr	r2, [r7, #4]
   1a9d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1a9d8:	687b      	ldr	r3, [r7, #4]
   1a9da:	681b      	ldr	r3, [r3, #0]
   1a9dc:	1c5a      	adds	r2, r3, #1
   1a9de:	687b      	ldr	r3, [r7, #4]
   1a9e0:	601a      	str	r2, [r3, #0]
}
   1a9e2:	46c0      	nop			; (mov r8, r8)
   1a9e4:	46bd      	mov	sp, r7
   1a9e6:	b004      	add	sp, #16
   1a9e8:	bd80      	pop	{r7, pc}

0001a9ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1a9ea:	b580      	push	{r7, lr}
   1a9ec:	b084      	sub	sp, #16
   1a9ee:	af00      	add	r7, sp, #0
   1a9f0:	6078      	str	r0, [r7, #4]
   1a9f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1a9f4:	683b      	ldr	r3, [r7, #0]
   1a9f6:	681b      	ldr	r3, [r3, #0]
   1a9f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1a9fa:	68bb      	ldr	r3, [r7, #8]
   1a9fc:	3301      	adds	r3, #1
   1a9fe:	d103      	bne.n	1aa08 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1aa00:	687b      	ldr	r3, [r7, #4]
   1aa02:	691b      	ldr	r3, [r3, #16]
   1aa04:	60fb      	str	r3, [r7, #12]
   1aa06:	e00c      	b.n	1aa22 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1aa08:	687b      	ldr	r3, [r7, #4]
   1aa0a:	3308      	adds	r3, #8
   1aa0c:	60fb      	str	r3, [r7, #12]
   1aa0e:	e002      	b.n	1aa16 <vListInsert+0x2c>
   1aa10:	68fb      	ldr	r3, [r7, #12]
   1aa12:	685b      	ldr	r3, [r3, #4]
   1aa14:	60fb      	str	r3, [r7, #12]
   1aa16:	68fb      	ldr	r3, [r7, #12]
   1aa18:	685b      	ldr	r3, [r3, #4]
   1aa1a:	681a      	ldr	r2, [r3, #0]
   1aa1c:	68bb      	ldr	r3, [r7, #8]
   1aa1e:	429a      	cmp	r2, r3
   1aa20:	d9f6      	bls.n	1aa10 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1aa22:	68fb      	ldr	r3, [r7, #12]
   1aa24:	685a      	ldr	r2, [r3, #4]
   1aa26:	683b      	ldr	r3, [r7, #0]
   1aa28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1aa2a:	683b      	ldr	r3, [r7, #0]
   1aa2c:	685b      	ldr	r3, [r3, #4]
   1aa2e:	683a      	ldr	r2, [r7, #0]
   1aa30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1aa32:	683b      	ldr	r3, [r7, #0]
   1aa34:	68fa      	ldr	r2, [r7, #12]
   1aa36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1aa38:	68fb      	ldr	r3, [r7, #12]
   1aa3a:	683a      	ldr	r2, [r7, #0]
   1aa3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1aa3e:	683b      	ldr	r3, [r7, #0]
   1aa40:	687a      	ldr	r2, [r7, #4]
   1aa42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1aa44:	687b      	ldr	r3, [r7, #4]
   1aa46:	681b      	ldr	r3, [r3, #0]
   1aa48:	1c5a      	adds	r2, r3, #1
   1aa4a:	687b      	ldr	r3, [r7, #4]
   1aa4c:	601a      	str	r2, [r3, #0]
}
   1aa4e:	46c0      	nop			; (mov r8, r8)
   1aa50:	46bd      	mov	sp, r7
   1aa52:	b004      	add	sp, #16
   1aa54:	bd80      	pop	{r7, pc}

0001aa56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1aa56:	b580      	push	{r7, lr}
   1aa58:	b084      	sub	sp, #16
   1aa5a:	af00      	add	r7, sp, #0
   1aa5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1aa5e:	687b      	ldr	r3, [r7, #4]
   1aa60:	691b      	ldr	r3, [r3, #16]
   1aa62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1aa64:	687b      	ldr	r3, [r7, #4]
   1aa66:	685b      	ldr	r3, [r3, #4]
   1aa68:	687a      	ldr	r2, [r7, #4]
   1aa6a:	6892      	ldr	r2, [r2, #8]
   1aa6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1aa6e:	687b      	ldr	r3, [r7, #4]
   1aa70:	689b      	ldr	r3, [r3, #8]
   1aa72:	687a      	ldr	r2, [r7, #4]
   1aa74:	6852      	ldr	r2, [r2, #4]
   1aa76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1aa78:	68fb      	ldr	r3, [r7, #12]
   1aa7a:	685a      	ldr	r2, [r3, #4]
   1aa7c:	687b      	ldr	r3, [r7, #4]
   1aa7e:	429a      	cmp	r2, r3
   1aa80:	d103      	bne.n	1aa8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1aa82:	687b      	ldr	r3, [r7, #4]
   1aa84:	689a      	ldr	r2, [r3, #8]
   1aa86:	68fb      	ldr	r3, [r7, #12]
   1aa88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1aa8a:	687b      	ldr	r3, [r7, #4]
   1aa8c:	2200      	movs	r2, #0
   1aa8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1aa90:	68fb      	ldr	r3, [r7, #12]
   1aa92:	681b      	ldr	r3, [r3, #0]
   1aa94:	1e5a      	subs	r2, r3, #1
   1aa96:	68fb      	ldr	r3, [r7, #12]
   1aa98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1aa9a:	68fb      	ldr	r3, [r7, #12]
   1aa9c:	681b      	ldr	r3, [r3, #0]
}
   1aa9e:	0018      	movs	r0, r3
   1aaa0:	46bd      	mov	sp, r7
   1aaa2:	b004      	add	sp, #16
   1aaa4:	bd80      	pop	{r7, pc}
	...

0001aaa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1aaa8:	b580      	push	{r7, lr}
   1aaaa:	b084      	sub	sp, #16
   1aaac:	af00      	add	r7, sp, #0
   1aaae:	60f8      	str	r0, [r7, #12]
   1aab0:	60b9      	str	r1, [r7, #8]
   1aab2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1aab4:	68fb      	ldr	r3, [r7, #12]
   1aab6:	3b04      	subs	r3, #4
   1aab8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1aaba:	68fb      	ldr	r3, [r7, #12]
   1aabc:	2280      	movs	r2, #128	; 0x80
   1aabe:	0452      	lsls	r2, r2, #17
   1aac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1aac2:	68fb      	ldr	r3, [r7, #12]
   1aac4:	3b04      	subs	r3, #4
   1aac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1aac8:	68ba      	ldr	r2, [r7, #8]
   1aaca:	68fb      	ldr	r3, [r7, #12]
   1aacc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1aace:	68fb      	ldr	r3, [r7, #12]
   1aad0:	3b04      	subs	r3, #4
   1aad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1aad4:	4a08      	ldr	r2, [pc, #32]	; (1aaf8 <pxPortInitialiseStack+0x50>)
   1aad6:	68fb      	ldr	r3, [r7, #12]
   1aad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1aada:	68fb      	ldr	r3, [r7, #12]
   1aadc:	3b14      	subs	r3, #20
   1aade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1aae0:	687a      	ldr	r2, [r7, #4]
   1aae2:	68fb      	ldr	r3, [r7, #12]
   1aae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1aae6:	68fb      	ldr	r3, [r7, #12]
   1aae8:	3b20      	subs	r3, #32
   1aaea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1aaec:	68fb      	ldr	r3, [r7, #12]
}
   1aaee:	0018      	movs	r0, r3
   1aaf0:	46bd      	mov	sp, r7
   1aaf2:	b004      	add	sp, #16
   1aaf4:	bd80      	pop	{r7, pc}
   1aaf6:	46c0      	nop			; (mov r8, r8)
   1aaf8:	0001aafd 	.word	0x0001aafd

0001aafc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1aafc:	b580      	push	{r7, lr}
   1aafe:	b082      	sub	sp, #8
   1ab00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1ab02:	2300      	movs	r3, #0
   1ab04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1ab06:	4b07      	ldr	r3, [pc, #28]	; (1ab24 <prvTaskExitError+0x28>)
   1ab08:	681b      	ldr	r3, [r3, #0]
   1ab0a:	3301      	adds	r3, #1
   1ab0c:	d001      	beq.n	1ab12 <prvTaskExitError+0x16>
   1ab0e:	b672      	cpsid	i
   1ab10:	e7fe      	b.n	1ab10 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1ab12:	b672      	cpsid	i
	while( ulDummy == 0 )
   1ab14:	46c0      	nop			; (mov r8, r8)
   1ab16:	687b      	ldr	r3, [r7, #4]
   1ab18:	2b00      	cmp	r3, #0
   1ab1a:	d0fc      	beq.n	1ab16 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1ab1c:	46c0      	nop			; (mov r8, r8)
   1ab1e:	46bd      	mov	sp, r7
   1ab20:	b002      	add	sp, #8
   1ab22:	bd80      	pop	{r7, pc}
   1ab24:	20000114 	.word	0x20000114

0001ab28 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1ab28:	b580      	push	{r7, lr}
   1ab2a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1ab2c:	46c0      	nop			; (mov r8, r8)
   1ab2e:	46bd      	mov	sp, r7
   1ab30:	bd80      	pop	{r7, pc}
	...

0001ab40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1ab40:	4a0b      	ldr	r2, [pc, #44]	; (1ab70 <pxCurrentTCBConst2>)
   1ab42:	6813      	ldr	r3, [r2, #0]
   1ab44:	6818      	ldr	r0, [r3, #0]
   1ab46:	3020      	adds	r0, #32
   1ab48:	f380 8809 	msr	PSP, r0
   1ab4c:	2002      	movs	r0, #2
   1ab4e:	f380 8814 	msr	CONTROL, r0
   1ab52:	f3bf 8f6f 	isb	sy
   1ab56:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1ab58:	46ae      	mov	lr, r5
   1ab5a:	bc08      	pop	{r3}
   1ab5c:	bc04      	pop	{r2}
   1ab5e:	b662      	cpsie	i
   1ab60:	4718      	bx	r3
   1ab62:	46c0      	nop			; (mov r8, r8)
   1ab64:	46c0      	nop			; (mov r8, r8)
   1ab66:	46c0      	nop			; (mov r8, r8)
   1ab68:	46c0      	nop			; (mov r8, r8)
   1ab6a:	46c0      	nop			; (mov r8, r8)
   1ab6c:	46c0      	nop			; (mov r8, r8)
   1ab6e:	46c0      	nop			; (mov r8, r8)

0001ab70 <pxCurrentTCBConst2>:
   1ab70:	200040dc 	.word	0x200040dc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1ab74:	46c0      	nop			; (mov r8, r8)
   1ab76:	46c0      	nop			; (mov r8, r8)

0001ab78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1ab78:	b580      	push	{r7, lr}
   1ab7a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1ab7c:	4b0e      	ldr	r3, [pc, #56]	; (1abb8 <xPortStartScheduler+0x40>)
   1ab7e:	4a0e      	ldr	r2, [pc, #56]	; (1abb8 <xPortStartScheduler+0x40>)
   1ab80:	6812      	ldr	r2, [r2, #0]
   1ab82:	21ff      	movs	r1, #255	; 0xff
   1ab84:	0409      	lsls	r1, r1, #16
   1ab86:	430a      	orrs	r2, r1
   1ab88:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1ab8a:	4b0b      	ldr	r3, [pc, #44]	; (1abb8 <xPortStartScheduler+0x40>)
   1ab8c:	4a0a      	ldr	r2, [pc, #40]	; (1abb8 <xPortStartScheduler+0x40>)
   1ab8e:	6812      	ldr	r2, [r2, #0]
   1ab90:	21ff      	movs	r1, #255	; 0xff
   1ab92:	0609      	lsls	r1, r1, #24
   1ab94:	430a      	orrs	r2, r1
   1ab96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1ab98:	4b08      	ldr	r3, [pc, #32]	; (1abbc <xPortStartScheduler+0x44>)
   1ab9a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1ab9c:	4b08      	ldr	r3, [pc, #32]	; (1abc0 <xPortStartScheduler+0x48>)
   1ab9e:	2200      	movs	r2, #0
   1aba0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1aba2:	4b08      	ldr	r3, [pc, #32]	; (1abc4 <xPortStartScheduler+0x4c>)
   1aba4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1aba6:	4b08      	ldr	r3, [pc, #32]	; (1abc8 <xPortStartScheduler+0x50>)
   1aba8:	4798      	blx	r3
	prvTaskExitError();
   1abaa:	4b08      	ldr	r3, [pc, #32]	; (1abcc <xPortStartScheduler+0x54>)
   1abac:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1abae:	2300      	movs	r3, #0
}
   1abb0:	0018      	movs	r0, r3
   1abb2:	46bd      	mov	sp, r7
   1abb4:	bd80      	pop	{r7, pc}
   1abb6:	46c0      	nop			; (mov r8, r8)
   1abb8:	e000ed20 	.word	0xe000ed20
   1abbc:	0001acd9 	.word	0x0001acd9
   1abc0:	20000114 	.word	0x20000114
   1abc4:	0001ab41 	.word	0x0001ab41
   1abc8:	0001d235 	.word	0x0001d235
   1abcc:	0001aafd 	.word	0x0001aafd

0001abd0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1abd0:	b580      	push	{r7, lr}
   1abd2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1abd4:	4b03      	ldr	r3, [pc, #12]	; (1abe4 <vPortYield+0x14>)
   1abd6:	2280      	movs	r2, #128	; 0x80
   1abd8:	0552      	lsls	r2, r2, #21
   1abda:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1abdc:	46c0      	nop			; (mov r8, r8)
   1abde:	46bd      	mov	sp, r7
   1abe0:	bd80      	pop	{r7, pc}
   1abe2:	46c0      	nop			; (mov r8, r8)
   1abe4:	e000ed04 	.word	0xe000ed04

0001abe8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1abe8:	b580      	push	{r7, lr}
   1abea:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1abec:	b672      	cpsid	i
    uxCriticalNesting++;
   1abee:	4b06      	ldr	r3, [pc, #24]	; (1ac08 <vPortEnterCritical+0x20>)
   1abf0:	681b      	ldr	r3, [r3, #0]
   1abf2:	1c5a      	adds	r2, r3, #1
   1abf4:	4b04      	ldr	r3, [pc, #16]	; (1ac08 <vPortEnterCritical+0x20>)
   1abf6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1abf8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1abfc:	f3bf 8f6f 	isb	sy
}
   1ac00:	46c0      	nop			; (mov r8, r8)
   1ac02:	46bd      	mov	sp, r7
   1ac04:	bd80      	pop	{r7, pc}
   1ac06:	46c0      	nop			; (mov r8, r8)
   1ac08:	20000114 	.word	0x20000114

0001ac0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1ac0c:	b580      	push	{r7, lr}
   1ac0e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1ac10:	4b09      	ldr	r3, [pc, #36]	; (1ac38 <vPortExitCritical+0x2c>)
   1ac12:	681b      	ldr	r3, [r3, #0]
   1ac14:	2b00      	cmp	r3, #0
   1ac16:	d101      	bne.n	1ac1c <vPortExitCritical+0x10>
   1ac18:	b672      	cpsid	i
   1ac1a:	e7fe      	b.n	1ac1a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1ac1c:	4b06      	ldr	r3, [pc, #24]	; (1ac38 <vPortExitCritical+0x2c>)
   1ac1e:	681b      	ldr	r3, [r3, #0]
   1ac20:	1e5a      	subs	r2, r3, #1
   1ac22:	4b05      	ldr	r3, [pc, #20]	; (1ac38 <vPortExitCritical+0x2c>)
   1ac24:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1ac26:	4b04      	ldr	r3, [pc, #16]	; (1ac38 <vPortExitCritical+0x2c>)
   1ac28:	681b      	ldr	r3, [r3, #0]
   1ac2a:	2b00      	cmp	r3, #0
   1ac2c:	d100      	bne.n	1ac30 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1ac2e:	b662      	cpsie	i
    }
}
   1ac30:	46c0      	nop			; (mov r8, r8)
   1ac32:	46bd      	mov	sp, r7
   1ac34:	bd80      	pop	{r7, pc}
   1ac36:	46c0      	nop			; (mov r8, r8)
   1ac38:	20000114 	.word	0x20000114

0001ac3c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1ac3c:	f3ef 8010 	mrs	r0, PRIMASK
   1ac40:	b672      	cpsid	i
   1ac42:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1ac44:	46c0      	nop			; (mov r8, r8)
   1ac46:	0018      	movs	r0, r3

0001ac48 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1ac48:	f380 8810 	msr	PRIMASK, r0
   1ac4c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1ac4e:	46c0      	nop			; (mov r8, r8)

0001ac50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1ac50:	f3ef 8009 	mrs	r0, PSP
   1ac54:	4b0e      	ldr	r3, [pc, #56]	; (1ac90 <pxCurrentTCBConst>)
   1ac56:	681a      	ldr	r2, [r3, #0]
   1ac58:	3820      	subs	r0, #32
   1ac5a:	6010      	str	r0, [r2, #0]
   1ac5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ac5e:	4644      	mov	r4, r8
   1ac60:	464d      	mov	r5, r9
   1ac62:	4656      	mov	r6, sl
   1ac64:	465f      	mov	r7, fp
   1ac66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ac68:	b508      	push	{r3, lr}
   1ac6a:	b672      	cpsid	i
   1ac6c:	f002 fae2 	bl	1d234 <vTaskSwitchContext>
   1ac70:	b662      	cpsie	i
   1ac72:	bc0c      	pop	{r2, r3}
   1ac74:	6811      	ldr	r1, [r2, #0]
   1ac76:	6808      	ldr	r0, [r1, #0]
   1ac78:	3010      	adds	r0, #16
   1ac7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ac7c:	46a0      	mov	r8, r4
   1ac7e:	46a9      	mov	r9, r5
   1ac80:	46b2      	mov	sl, r6
   1ac82:	46bb      	mov	fp, r7
   1ac84:	f380 8809 	msr	PSP, r0
   1ac88:	3820      	subs	r0, #32
   1ac8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ac8c:	4718      	bx	r3
   1ac8e:	46c0      	nop			; (mov r8, r8)

0001ac90 <pxCurrentTCBConst>:
   1ac90:	200040dc 	.word	0x200040dc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1ac94:	46c0      	nop			; (mov r8, r8)
   1ac96:	46c0      	nop			; (mov r8, r8)

0001ac98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1ac98:	b580      	push	{r7, lr}
   1ac9a:	b082      	sub	sp, #8
   1ac9c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1ac9e:	4b0a      	ldr	r3, [pc, #40]	; (1acc8 <SysTick_Handler+0x30>)
   1aca0:	4798      	blx	r3
   1aca2:	0003      	movs	r3, r0
   1aca4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1aca6:	4b09      	ldr	r3, [pc, #36]	; (1accc <SysTick_Handler+0x34>)
   1aca8:	4798      	blx	r3
   1acaa:	1e03      	subs	r3, r0, #0
   1acac:	d003      	beq.n	1acb6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1acae:	4b08      	ldr	r3, [pc, #32]	; (1acd0 <SysTick_Handler+0x38>)
   1acb0:	2280      	movs	r2, #128	; 0x80
   1acb2:	0552      	lsls	r2, r2, #21
   1acb4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1acb6:	687b      	ldr	r3, [r7, #4]
   1acb8:	0018      	movs	r0, r3
   1acba:	4b06      	ldr	r3, [pc, #24]	; (1acd4 <SysTick_Handler+0x3c>)
   1acbc:	4798      	blx	r3
}
   1acbe:	46c0      	nop			; (mov r8, r8)
   1acc0:	46bd      	mov	sp, r7
   1acc2:	b002      	add	sp, #8
   1acc4:	bd80      	pop	{r7, pc}
   1acc6:	46c0      	nop			; (mov r8, r8)
   1acc8:	0001ac3d 	.word	0x0001ac3d
   1accc:	0001d045 	.word	0x0001d045
   1acd0:	e000ed04 	.word	0xe000ed04
   1acd4:	0001ac49 	.word	0x0001ac49

0001acd8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1acd8:	b5b0      	push	{r4, r5, r7, lr}
   1acda:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1acdc:	4b0b      	ldr	r3, [pc, #44]	; (1ad0c <prvSetupTimerInterrupt+0x34>)
   1acde:	2200      	movs	r2, #0
   1ace0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1ace2:	4b0b      	ldr	r3, [pc, #44]	; (1ad10 <prvSetupTimerInterrupt+0x38>)
   1ace4:	2200      	movs	r2, #0
   1ace6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1ace8:	4c0a      	ldr	r4, [pc, #40]	; (1ad14 <prvSetupTimerInterrupt+0x3c>)
   1acea:	2000      	movs	r0, #0
   1acec:	4b0a      	ldr	r3, [pc, #40]	; (1ad18 <prvSetupTimerInterrupt+0x40>)
   1acee:	4798      	blx	r3
   1acf0:	4b0a      	ldr	r3, [pc, #40]	; (1ad1c <prvSetupTimerInterrupt+0x44>)
   1acf2:	22fa      	movs	r2, #250	; 0xfa
   1acf4:	0091      	lsls	r1, r2, #2
   1acf6:	4798      	blx	r3
   1acf8:	0003      	movs	r3, r0
   1acfa:	3b01      	subs	r3, #1
   1acfc:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1acfe:	4b03      	ldr	r3, [pc, #12]	; (1ad0c <prvSetupTimerInterrupt+0x34>)
   1ad00:	2207      	movs	r2, #7
   1ad02:	601a      	str	r2, [r3, #0]
}
   1ad04:	46c0      	nop			; (mov r8, r8)
   1ad06:	46bd      	mov	sp, r7
   1ad08:	bdb0      	pop	{r4, r5, r7, pc}
   1ad0a:	46c0      	nop			; (mov r8, r8)
   1ad0c:	e000e010 	.word	0xe000e010
   1ad10:	e000e018 	.word	0xe000e018
   1ad14:	e000e014 	.word	0xe000e014
   1ad18:	0002a895 	.word	0x0002a895
   1ad1c:	00033635 	.word	0x00033635

0001ad20 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1ad20:	b580      	push	{r7, lr}
   1ad22:	b084      	sub	sp, #16
   1ad24:	af00      	add	r7, sp, #0
   1ad26:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1ad28:	2300      	movs	r3, #0
   1ad2a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1ad2c:	687b      	ldr	r3, [r7, #4]
   1ad2e:	2207      	movs	r2, #7
   1ad30:	4013      	ands	r3, r2
   1ad32:	d004      	beq.n	1ad3e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1ad34:	687b      	ldr	r3, [r7, #4]
   1ad36:	2207      	movs	r2, #7
   1ad38:	4393      	bics	r3, r2
   1ad3a:	3308      	adds	r3, #8
   1ad3c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1ad3e:	4b21      	ldr	r3, [pc, #132]	; (1adc4 <pvPortMalloc+0xa4>)
   1ad40:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1ad42:	4b21      	ldr	r3, [pc, #132]	; (1adc8 <pvPortMalloc+0xa8>)
   1ad44:	681b      	ldr	r3, [r3, #0]
   1ad46:	2b00      	cmp	r3, #0
   1ad48:	d105      	bne.n	1ad56 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1ad4a:	4b20      	ldr	r3, [pc, #128]	; (1adcc <pvPortMalloc+0xac>)
   1ad4c:	2207      	movs	r2, #7
   1ad4e:	4393      	bics	r3, r2
   1ad50:	001a      	movs	r2, r3
   1ad52:	4b1d      	ldr	r3, [pc, #116]	; (1adc8 <pvPortMalloc+0xa8>)
   1ad54:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1ad56:	4b1e      	ldr	r3, [pc, #120]	; (1add0 <pvPortMalloc+0xb0>)
   1ad58:	681a      	ldr	r2, [r3, #0]
   1ad5a:	687b      	ldr	r3, [r7, #4]
   1ad5c:	18d3      	adds	r3, r2, r3
   1ad5e:	4a1d      	ldr	r2, [pc, #116]	; (1add4 <pvPortMalloc+0xb4>)
   1ad60:	4293      	cmp	r3, r2
   1ad62:	d813      	bhi.n	1ad8c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1ad64:	4b1a      	ldr	r3, [pc, #104]	; (1add0 <pvPortMalloc+0xb0>)
   1ad66:	681a      	ldr	r2, [r3, #0]
   1ad68:	687b      	ldr	r3, [r7, #4]
   1ad6a:	18d2      	adds	r2, r2, r3
   1ad6c:	4b18      	ldr	r3, [pc, #96]	; (1add0 <pvPortMalloc+0xb0>)
   1ad6e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1ad70:	429a      	cmp	r2, r3
   1ad72:	d90b      	bls.n	1ad8c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1ad74:	4b14      	ldr	r3, [pc, #80]	; (1adc8 <pvPortMalloc+0xa8>)
   1ad76:	681a      	ldr	r2, [r3, #0]
   1ad78:	4b15      	ldr	r3, [pc, #84]	; (1add0 <pvPortMalloc+0xb0>)
   1ad7a:	681b      	ldr	r3, [r3, #0]
   1ad7c:	18d3      	adds	r3, r2, r3
   1ad7e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1ad80:	4b13      	ldr	r3, [pc, #76]	; (1add0 <pvPortMalloc+0xb0>)
   1ad82:	681a      	ldr	r2, [r3, #0]
   1ad84:	687b      	ldr	r3, [r7, #4]
   1ad86:	18d2      	adds	r2, r2, r3
   1ad88:	4b11      	ldr	r3, [pc, #68]	; (1add0 <pvPortMalloc+0xb0>)
   1ad8a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1ad8c:	68fb      	ldr	r3, [r7, #12]
   1ad8e:	2b00      	cmp	r3, #0
   1ad90:	d006      	beq.n	1ada0 <pvPortMalloc+0x80>
   1ad92:	68fb      	ldr	r3, [r7, #12]
   1ad94:	687a      	ldr	r2, [r7, #4]
   1ad96:	0019      	movs	r1, r3
   1ad98:	2094      	movs	r0, #148	; 0x94
   1ad9a:	4b0f      	ldr	r3, [pc, #60]	; (1add8 <pvPortMalloc+0xb8>)
   1ad9c:	4798      	blx	r3
   1ad9e:	e005      	b.n	1adac <pvPortMalloc+0x8c>
   1ada0:	68fb      	ldr	r3, [r7, #12]
   1ada2:	687a      	ldr	r2, [r7, #4]
   1ada4:	0019      	movs	r1, r3
   1ada6:	20e8      	movs	r0, #232	; 0xe8
   1ada8:	4b0b      	ldr	r3, [pc, #44]	; (1add8 <pvPortMalloc+0xb8>)
   1adaa:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1adac:	4b0b      	ldr	r3, [pc, #44]	; (1addc <pvPortMalloc+0xbc>)
   1adae:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1adb0:	68fb      	ldr	r3, [r7, #12]
   1adb2:	2b00      	cmp	r3, #0
   1adb4:	d101      	bne.n	1adba <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1adb6:	4b0a      	ldr	r3, [pc, #40]	; (1ade0 <pvPortMalloc+0xc0>)
   1adb8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1adba:	68fb      	ldr	r3, [r7, #12]
}
   1adbc:	0018      	movs	r0, r3
   1adbe:	46bd      	mov	sp, r7
   1adc0:	b004      	add	sp, #16
   1adc2:	bd80      	pop	{r7, pc}
   1adc4:	0001cea1 	.word	0x0001cea1
   1adc8:	200040d8 	.word	0x200040d8
   1adcc:	20000e14 	.word	0x20000e14
   1add0:	200040d4 	.word	0x200040d4
   1add4:	000032bf 	.word	0x000032bf
   1add8:	00019485 	.word	0x00019485
   1addc:	0001ceb9 	.word	0x0001ceb9
   1ade0:	00033605 	.word	0x00033605

0001ade4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1ade4:	b580      	push	{r7, lr}
   1ade6:	b082      	sub	sp, #8
   1ade8:	af00      	add	r7, sp, #0
   1adea:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1adec:	687b      	ldr	r3, [r7, #4]
   1adee:	2b00      	cmp	r3, #0
   1adf0:	d001      	beq.n	1adf6 <vPortFree+0x12>
   1adf2:	b672      	cpsid	i
   1adf4:	e7fe      	b.n	1adf4 <vPortFree+0x10>
}
   1adf6:	46c0      	nop			; (mov r8, r8)
   1adf8:	46bd      	mov	sp, r7
   1adfa:	b002      	add	sp, #8
   1adfc:	bd80      	pop	{r7, pc}
	...

0001ae00 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1ae00:	b580      	push	{r7, lr}
   1ae02:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1ae04:	4b03      	ldr	r3, [pc, #12]	; (1ae14 <xPortGetFreeHeapSize+0x14>)
   1ae06:	681b      	ldr	r3, [r3, #0]
   1ae08:	22cb      	movs	r2, #203	; 0xcb
   1ae0a:	0192      	lsls	r2, r2, #6
   1ae0c:	1ad3      	subs	r3, r2, r3
}
   1ae0e:	0018      	movs	r0, r3
   1ae10:	46bd      	mov	sp, r7
   1ae12:	bd80      	pop	{r7, pc}
   1ae14:	200040d4 	.word	0x200040d4

0001ae18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1ae18:	b580      	push	{r7, lr}
   1ae1a:	b084      	sub	sp, #16
   1ae1c:	af00      	add	r7, sp, #0
   1ae1e:	6078      	str	r0, [r7, #4]
   1ae20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ae22:	687b      	ldr	r3, [r7, #4]
   1ae24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1ae26:	68fb      	ldr	r3, [r7, #12]
   1ae28:	2b00      	cmp	r3, #0
   1ae2a:	d101      	bne.n	1ae30 <xQueueGenericReset+0x18>
   1ae2c:	b672      	cpsid	i
   1ae2e:	e7fe      	b.n	1ae2e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1ae30:	4b23      	ldr	r3, [pc, #140]	; (1aec0 <xQueueGenericReset+0xa8>)
   1ae32:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1ae34:	68fb      	ldr	r3, [r7, #12]
   1ae36:	681a      	ldr	r2, [r3, #0]
   1ae38:	68fb      	ldr	r3, [r7, #12]
   1ae3a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1ae3c:	68fb      	ldr	r3, [r7, #12]
   1ae3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ae40:	434b      	muls	r3, r1
   1ae42:	18d2      	adds	r2, r2, r3
   1ae44:	68fb      	ldr	r3, [r7, #12]
   1ae46:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1ae48:	68fb      	ldr	r3, [r7, #12]
   1ae4a:	2200      	movs	r2, #0
   1ae4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1ae4e:	68fb      	ldr	r3, [r7, #12]
   1ae50:	681a      	ldr	r2, [r3, #0]
   1ae52:	68fb      	ldr	r3, [r7, #12]
   1ae54:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1ae56:	68fb      	ldr	r3, [r7, #12]
   1ae58:	681a      	ldr	r2, [r3, #0]
   1ae5a:	68fb      	ldr	r3, [r7, #12]
   1ae5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ae5e:	1e59      	subs	r1, r3, #1
   1ae60:	68fb      	ldr	r3, [r7, #12]
   1ae62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ae64:	434b      	muls	r3, r1
   1ae66:	18d2      	adds	r2, r2, r3
   1ae68:	68fb      	ldr	r3, [r7, #12]
   1ae6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1ae6c:	68fb      	ldr	r3, [r7, #12]
   1ae6e:	2244      	movs	r2, #68	; 0x44
   1ae70:	21ff      	movs	r1, #255	; 0xff
   1ae72:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1ae74:	68fb      	ldr	r3, [r7, #12]
   1ae76:	2245      	movs	r2, #69	; 0x45
   1ae78:	21ff      	movs	r1, #255	; 0xff
   1ae7a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1ae7c:	683b      	ldr	r3, [r7, #0]
   1ae7e:	2b00      	cmp	r3, #0
   1ae80:	d10d      	bne.n	1ae9e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ae82:	68fb      	ldr	r3, [r7, #12]
   1ae84:	691b      	ldr	r3, [r3, #16]
   1ae86:	2b00      	cmp	r3, #0
   1ae88:	d013      	beq.n	1aeb2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ae8a:	68fb      	ldr	r3, [r7, #12]
   1ae8c:	3310      	adds	r3, #16
   1ae8e:	0018      	movs	r0, r3
   1ae90:	4b0c      	ldr	r3, [pc, #48]	; (1aec4 <xQueueGenericReset+0xac>)
   1ae92:	4798      	blx	r3
   1ae94:	1e03      	subs	r3, r0, #0
   1ae96:	d00c      	beq.n	1aeb2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1ae98:	4b0b      	ldr	r3, [pc, #44]	; (1aec8 <xQueueGenericReset+0xb0>)
   1ae9a:	4798      	blx	r3
   1ae9c:	e009      	b.n	1aeb2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1ae9e:	68fb      	ldr	r3, [r7, #12]
   1aea0:	3310      	adds	r3, #16
   1aea2:	0018      	movs	r0, r3
   1aea4:	4b09      	ldr	r3, [pc, #36]	; (1aecc <xQueueGenericReset+0xb4>)
   1aea6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1aea8:	68fb      	ldr	r3, [r7, #12]
   1aeaa:	3324      	adds	r3, #36	; 0x24
   1aeac:	0018      	movs	r0, r3
   1aeae:	4b07      	ldr	r3, [pc, #28]	; (1aecc <xQueueGenericReset+0xb4>)
   1aeb0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1aeb2:	4b07      	ldr	r3, [pc, #28]	; (1aed0 <xQueueGenericReset+0xb8>)
   1aeb4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1aeb6:	2301      	movs	r3, #1
}
   1aeb8:	0018      	movs	r0, r3
   1aeba:	46bd      	mov	sp, r7
   1aebc:	b004      	add	sp, #16
   1aebe:	bd80      	pop	{r7, pc}
   1aec0:	0001abe9 	.word	0x0001abe9
   1aec4:	0001d479 	.word	0x0001d479
   1aec8:	0001abd1 	.word	0x0001abd1
   1aecc:	0001a955 	.word	0x0001a955
   1aed0:	0001ac0d 	.word	0x0001ac0d

0001aed4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1aed4:	b590      	push	{r4, r7, lr}
   1aed6:	b08b      	sub	sp, #44	; 0x2c
   1aed8:	af02      	add	r7, sp, #8
   1aeda:	60f8      	str	r0, [r7, #12]
   1aedc:	60b9      	str	r1, [r7, #8]
   1aede:	1dfb      	adds	r3, r7, #7
   1aee0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1aee2:	68fb      	ldr	r3, [r7, #12]
   1aee4:	2b00      	cmp	r3, #0
   1aee6:	d101      	bne.n	1aeec <xQueueGenericCreate+0x18>
   1aee8:	b672      	cpsid	i
   1aeea:	e7fe      	b.n	1aeea <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1aeec:	68bb      	ldr	r3, [r7, #8]
   1aeee:	2b00      	cmp	r3, #0
   1aef0:	d102      	bne.n	1aef8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1aef2:	2300      	movs	r3, #0
   1aef4:	61fb      	str	r3, [r7, #28]
   1aef6:	e003      	b.n	1af00 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1aef8:	68fb      	ldr	r3, [r7, #12]
   1aefa:	68ba      	ldr	r2, [r7, #8]
   1aefc:	4353      	muls	r3, r2
   1aefe:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1af00:	69fb      	ldr	r3, [r7, #28]
   1af02:	3354      	adds	r3, #84	; 0x54
   1af04:	0018      	movs	r0, r3
   1af06:	4b19      	ldr	r3, [pc, #100]	; (1af6c <xQueueGenericCreate+0x98>)
   1af08:	4798      	blx	r3
   1af0a:	0003      	movs	r3, r0
   1af0c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1af0e:	69bb      	ldr	r3, [r7, #24]
   1af10:	2b00      	cmp	r3, #0
   1af12:	d00d      	beq.n	1af30 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1af14:	69bb      	ldr	r3, [r7, #24]
   1af16:	3354      	adds	r3, #84	; 0x54
   1af18:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1af1a:	1dfb      	adds	r3, r7, #7
   1af1c:	781c      	ldrb	r4, [r3, #0]
   1af1e:	697a      	ldr	r2, [r7, #20]
   1af20:	68b9      	ldr	r1, [r7, #8]
   1af22:	68f8      	ldr	r0, [r7, #12]
   1af24:	69bb      	ldr	r3, [r7, #24]
   1af26:	9300      	str	r3, [sp, #0]
   1af28:	0023      	movs	r3, r4
   1af2a:	4c11      	ldr	r4, [pc, #68]	; (1af70 <xQueueGenericCreate+0x9c>)
   1af2c:	47a0      	blx	r4
   1af2e:	e017      	b.n	1af60 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1af30:	4b10      	ldr	r3, [pc, #64]	; (1af74 <xQueueGenericCreate+0xa0>)
   1af32:	4798      	blx	r3
   1af34:	0003      	movs	r3, r0
   1af36:	0018      	movs	r0, r3
   1af38:	4b0f      	ldr	r3, [pc, #60]	; (1af78 <xQueueGenericCreate+0xa4>)
   1af3a:	4798      	blx	r3
   1af3c:	0003      	movs	r3, r0
   1af3e:	001a      	movs	r2, r3
   1af40:	4b0e      	ldr	r3, [pc, #56]	; (1af7c <xQueueGenericCreate+0xa8>)
   1af42:	881b      	ldrh	r3, [r3, #0]
   1af44:	4013      	ands	r3, r2
   1af46:	b29b      	uxth	r3, r3
   1af48:	2b00      	cmp	r3, #0
   1af4a:	d009      	beq.n	1af60 <xQueueGenericCreate+0x8c>
   1af4c:	1dfb      	adds	r3, r7, #7
   1af4e:	781b      	ldrb	r3, [r3, #0]
   1af50:	4a0b      	ldr	r2, [pc, #44]	; (1af80 <xQueueGenericCreate+0xac>)
   1af52:	5cd3      	ldrb	r3, [r2, r3]
   1af54:	3340      	adds	r3, #64	; 0x40
   1af56:	b2db      	uxtb	r3, r3
   1af58:	2100      	movs	r1, #0
   1af5a:	0018      	movs	r0, r3
   1af5c:	4b09      	ldr	r3, [pc, #36]	; (1af84 <xQueueGenericCreate+0xb0>)
   1af5e:	4798      	blx	r3
		}

		return pxNewQueue;
   1af60:	69bb      	ldr	r3, [r7, #24]
	}
   1af62:	0018      	movs	r0, r3
   1af64:	46bd      	mov	sp, r7
   1af66:	b009      	add	sp, #36	; 0x24
   1af68:	bd90      	pop	{r4, r7, pc}
   1af6a:	46c0      	nop			; (mov r8, r8)
   1af6c:	0001ad21 	.word	0x0001ad21
   1af70:	0001af89 	.word	0x0001af89
   1af74:	00018e79 	.word	0x00018e79
   1af78:	00018bdd 	.word	0x00018bdd
   1af7c:	20000110 	.word	0x20000110
   1af80:	20000104 	.word	0x20000104
   1af84:	000198dd 	.word	0x000198dd

0001af88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1af88:	b5b0      	push	{r4, r5, r7, lr}
   1af8a:	b084      	sub	sp, #16
   1af8c:	af00      	add	r7, sp, #0
   1af8e:	60f8      	str	r0, [r7, #12]
   1af90:	60b9      	str	r1, [r7, #8]
   1af92:	607a      	str	r2, [r7, #4]
   1af94:	001a      	movs	r2, r3
   1af96:	1cfb      	adds	r3, r7, #3
   1af98:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1af9a:	68bb      	ldr	r3, [r7, #8]
   1af9c:	2b00      	cmp	r3, #0
   1af9e:	d103      	bne.n	1afa8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1afa0:	6a3b      	ldr	r3, [r7, #32]
   1afa2:	6a3a      	ldr	r2, [r7, #32]
   1afa4:	601a      	str	r2, [r3, #0]
   1afa6:	e002      	b.n	1afae <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1afa8:	6a3b      	ldr	r3, [r7, #32]
   1afaa:	687a      	ldr	r2, [r7, #4]
   1afac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1afae:	6a3b      	ldr	r3, [r7, #32]
   1afb0:	68fa      	ldr	r2, [r7, #12]
   1afb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1afb4:	6a3b      	ldr	r3, [r7, #32]
   1afb6:	68ba      	ldr	r2, [r7, #8]
   1afb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1afba:	6a3b      	ldr	r3, [r7, #32]
   1afbc:	2101      	movs	r1, #1
   1afbe:	0018      	movs	r0, r3
   1afc0:	4b41      	ldr	r3, [pc, #260]	; (1b0c8 <prvInitialiseNewQueue+0x140>)
   1afc2:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1afc4:	6a3b      	ldr	r3, [r7, #32]
   1afc6:	1cfa      	adds	r2, r7, #3
   1afc8:	2150      	movs	r1, #80	; 0x50
   1afca:	7812      	ldrb	r2, [r2, #0]
   1afcc:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1afce:	6a3b      	ldr	r3, [r7, #32]
   1afd0:	2200      	movs	r2, #0
   1afd2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1afd4:	6a3b      	ldr	r3, [r7, #32]
   1afd6:	0018      	movs	r0, r3
   1afd8:	4b3c      	ldr	r3, [pc, #240]	; (1b0cc <prvInitialiseNewQueue+0x144>)
   1afda:	4798      	blx	r3
   1afdc:	0003      	movs	r3, r0
   1afde:	001a      	movs	r2, r3
   1afe0:	4b3b      	ldr	r3, [pc, #236]	; (1b0d0 <prvInitialiseNewQueue+0x148>)
   1afe2:	5c9b      	ldrb	r3, [r3, r2]
   1afe4:	0018      	movs	r0, r3
   1afe6:	4b3b      	ldr	r3, [pc, #236]	; (1b0d4 <prvInitialiseNewQueue+0x14c>)
   1afe8:	4798      	blx	r3
   1afea:	0003      	movs	r3, r0
   1afec:	b29a      	uxth	r2, r3
   1afee:	6a3b      	ldr	r3, [r7, #32]
   1aff0:	0011      	movs	r1, r2
   1aff2:	0018      	movs	r0, r3
   1aff4:	4b38      	ldr	r3, [pc, #224]	; (1b0d8 <prvInitialiseNewQueue+0x150>)
   1aff6:	4798      	blx	r3
   1aff8:	4b38      	ldr	r3, [pc, #224]	; (1b0dc <prvInitialiseNewQueue+0x154>)
   1affa:	881a      	ldrh	r2, [r3, #0]
   1affc:	6a3b      	ldr	r3, [r7, #32]
   1affe:	0011      	movs	r1, r2
   1b000:	0018      	movs	r0, r3
   1b002:	4b37      	ldr	r3, [pc, #220]	; (1b0e0 <prvInitialiseNewQueue+0x158>)
   1b004:	4798      	blx	r3
   1b006:	6a3b      	ldr	r3, [r7, #32]
   1b008:	0018      	movs	r0, r3
   1b00a:	4b30      	ldr	r3, [pc, #192]	; (1b0cc <prvInitialiseNewQueue+0x144>)
   1b00c:	4798      	blx	r3
   1b00e:	0003      	movs	r3, r0
   1b010:	001a      	movs	r2, r3
   1b012:	4b2f      	ldr	r3, [pc, #188]	; (1b0d0 <prvInitialiseNewQueue+0x148>)
   1b014:	5c9c      	ldrb	r4, [r3, r2]
   1b016:	6a3b      	ldr	r3, [r7, #32]
   1b018:	0018      	movs	r0, r3
   1b01a:	4b32      	ldr	r3, [pc, #200]	; (1b0e4 <prvInitialiseNewQueue+0x15c>)
   1b01c:	4798      	blx	r3
   1b01e:	0003      	movs	r3, r0
   1b020:	b2db      	uxtb	r3, r3
   1b022:	0019      	movs	r1, r3
   1b024:	0020      	movs	r0, r4
   1b026:	4b30      	ldr	r3, [pc, #192]	; (1b0e8 <prvInitialiseNewQueue+0x160>)
   1b028:	4798      	blx	r3
   1b02a:	4b30      	ldr	r3, [pc, #192]	; (1b0ec <prvInitialiseNewQueue+0x164>)
   1b02c:	4798      	blx	r3
   1b02e:	0003      	movs	r3, r0
   1b030:	0018      	movs	r0, r3
   1b032:	4b2f      	ldr	r3, [pc, #188]	; (1b0f0 <prvInitialiseNewQueue+0x168>)
   1b034:	4798      	blx	r3
   1b036:	0003      	movs	r3, r0
   1b038:	001a      	movs	r2, r3
   1b03a:	4b2e      	ldr	r3, [pc, #184]	; (1b0f4 <prvInitialiseNewQueue+0x16c>)
   1b03c:	881b      	ldrh	r3, [r3, #0]
   1b03e:	4013      	ands	r3, r2
   1b040:	b29b      	uxth	r3, r3
   1b042:	2b00      	cmp	r3, #0
   1b044:	d029      	beq.n	1b09a <prvInitialiseNewQueue+0x112>
   1b046:	6a3b      	ldr	r3, [r7, #32]
   1b048:	0018      	movs	r0, r3
   1b04a:	4b2b      	ldr	r3, [pc, #172]	; (1b0f8 <prvInitialiseNewQueue+0x170>)
   1b04c:	4798      	blx	r3
   1b04e:	0003      	movs	r3, r0
   1b050:	001a      	movs	r2, r3
   1b052:	4b28      	ldr	r3, [pc, #160]	; (1b0f4 <prvInitialiseNewQueue+0x16c>)
   1b054:	881b      	ldrh	r3, [r3, #0]
   1b056:	4013      	ands	r3, r2
   1b058:	b29b      	uxth	r3, r3
   1b05a:	2b00      	cmp	r3, #0
   1b05c:	d01d      	beq.n	1b09a <prvInitialiseNewQueue+0x112>
   1b05e:	6a3b      	ldr	r3, [r7, #32]
   1b060:	0018      	movs	r0, r3
   1b062:	4b1a      	ldr	r3, [pc, #104]	; (1b0cc <prvInitialiseNewQueue+0x144>)
   1b064:	4798      	blx	r3
   1b066:	0003      	movs	r3, r0
   1b068:	001a      	movs	r2, r3
   1b06a:	4b19      	ldr	r3, [pc, #100]	; (1b0d0 <prvInitialiseNewQueue+0x148>)
   1b06c:	5c9b      	ldrb	r3, [r3, r2]
   1b06e:	3318      	adds	r3, #24
   1b070:	b2db      	uxtb	r3, r3
   1b072:	001d      	movs	r5, r3
   1b074:	6a3b      	ldr	r3, [r7, #32]
   1b076:	0018      	movs	r0, r3
   1b078:	4b14      	ldr	r3, [pc, #80]	; (1b0cc <prvInitialiseNewQueue+0x144>)
   1b07a:	4798      	blx	r3
   1b07c:	0003      	movs	r3, r0
   1b07e:	001a      	movs	r2, r3
   1b080:	4b13      	ldr	r3, [pc, #76]	; (1b0d0 <prvInitialiseNewQueue+0x148>)
   1b082:	5c9c      	ldrb	r4, [r3, r2]
   1b084:	6a3b      	ldr	r3, [r7, #32]
   1b086:	0018      	movs	r0, r3
   1b088:	4b16      	ldr	r3, [pc, #88]	; (1b0e4 <prvInitialiseNewQueue+0x15c>)
   1b08a:	4798      	blx	r3
   1b08c:	0003      	movs	r3, r0
   1b08e:	b2db      	uxtb	r3, r3
   1b090:	001a      	movs	r2, r3
   1b092:	0021      	movs	r1, r4
   1b094:	0028      	movs	r0, r5
   1b096:	4b19      	ldr	r3, [pc, #100]	; (1b0fc <prvInitialiseNewQueue+0x174>)
   1b098:	4798      	blx	r3
   1b09a:	6a3b      	ldr	r3, [r7, #32]
   1b09c:	0018      	movs	r0, r3
   1b09e:	4b0b      	ldr	r3, [pc, #44]	; (1b0cc <prvInitialiseNewQueue+0x144>)
   1b0a0:	4798      	blx	r3
   1b0a2:	0003      	movs	r3, r0
   1b0a4:	001a      	movs	r2, r3
   1b0a6:	4b0a      	ldr	r3, [pc, #40]	; (1b0d0 <prvInitialiseNewQueue+0x148>)
   1b0a8:	5c9c      	ldrb	r4, [r3, r2]
   1b0aa:	6a3b      	ldr	r3, [r7, #32]
   1b0ac:	0018      	movs	r0, r3
   1b0ae:	4b0d      	ldr	r3, [pc, #52]	; (1b0e4 <prvInitialiseNewQueue+0x15c>)
   1b0b0:	4798      	blx	r3
   1b0b2:	0003      	movs	r3, r0
   1b0b4:	b2db      	uxtb	r3, r3
   1b0b6:	2200      	movs	r2, #0
   1b0b8:	0019      	movs	r1, r3
   1b0ba:	0020      	movs	r0, r4
   1b0bc:	4b10      	ldr	r3, [pc, #64]	; (1b100 <prvInitialiseNewQueue+0x178>)
   1b0be:	4798      	blx	r3
}
   1b0c0:	46c0      	nop			; (mov r8, r8)
   1b0c2:	46bd      	mov	sp, r7
   1b0c4:	b004      	add	sp, #16
   1b0c6:	bdb0      	pop	{r4, r5, r7, pc}
   1b0c8:	0001ae19 	.word	0x0001ae19
   1b0cc:	00018b9d 	.word	0x00018b9d
   1b0d0:	20000104 	.word	0x20000104
   1b0d4:	0001a15d 	.word	0x0001a15d
   1b0d8:	00018cc1 	.word	0x00018cc1
   1b0dc:	20000112 	.word	0x20000112
   1b0e0:	00018cfd 	.word	0x00018cfd
   1b0e4:	00018c7d 	.word	0x00018c7d
   1b0e8:	0001a2f5 	.word	0x0001a2f5
   1b0ec:	00018e79 	.word	0x00018e79
   1b0f0:	00018bdd 	.word	0x00018bdd
   1b0f4:	20000110 	.word	0x20000110
   1b0f8:	00018c9d 	.word	0x00018c9d
   1b0fc:	000195d5 	.word	0x000195d5
   1b100:	00019c31 	.word	0x00019c31

0001b104 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1b104:	b590      	push	{r4, r7, lr}
   1b106:	b083      	sub	sp, #12
   1b108:	af00      	add	r7, sp, #0
   1b10a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1b10c:	687b      	ldr	r3, [r7, #4]
   1b10e:	2b00      	cmp	r3, #0
   1b110:	d00e      	beq.n	1b130 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1b112:	687b      	ldr	r3, [r7, #4]
   1b114:	2200      	movs	r2, #0
   1b116:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1b118:	687b      	ldr	r3, [r7, #4]
   1b11a:	2200      	movs	r2, #0
   1b11c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1b11e:	687b      	ldr	r3, [r7, #4]
   1b120:	2200      	movs	r2, #0
   1b122:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1b124:	6878      	ldr	r0, [r7, #4]
   1b126:	2300      	movs	r3, #0
   1b128:	2200      	movs	r2, #0
   1b12a:	2100      	movs	r1, #0
   1b12c:	4c02      	ldr	r4, [pc, #8]	; (1b138 <prvInitialiseMutex+0x34>)
   1b12e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1b130:	46c0      	nop			; (mov r8, r8)
   1b132:	46bd      	mov	sp, r7
   1b134:	b003      	add	sp, #12
   1b136:	bd90      	pop	{r4, r7, pc}
   1b138:	0001b17d 	.word	0x0001b17d

0001b13c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1b13c:	b580      	push	{r7, lr}
   1b13e:	b086      	sub	sp, #24
   1b140:	af00      	add	r7, sp, #0
   1b142:	0002      	movs	r2, r0
   1b144:	1dfb      	adds	r3, r7, #7
   1b146:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1b148:	2301      	movs	r3, #1
   1b14a:	617b      	str	r3, [r7, #20]
   1b14c:	2300      	movs	r3, #0
   1b14e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1b150:	1dfb      	adds	r3, r7, #7
   1b152:	781a      	ldrb	r2, [r3, #0]
   1b154:	6939      	ldr	r1, [r7, #16]
   1b156:	697b      	ldr	r3, [r7, #20]
   1b158:	0018      	movs	r0, r3
   1b15a:	4b06      	ldr	r3, [pc, #24]	; (1b174 <xQueueCreateMutex+0x38>)
   1b15c:	4798      	blx	r3
   1b15e:	0003      	movs	r3, r0
   1b160:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1b162:	68fb      	ldr	r3, [r7, #12]
   1b164:	0018      	movs	r0, r3
   1b166:	4b04      	ldr	r3, [pc, #16]	; (1b178 <xQueueCreateMutex+0x3c>)
   1b168:	4798      	blx	r3

		return pxNewQueue;
   1b16a:	68fb      	ldr	r3, [r7, #12]
	}
   1b16c:	0018      	movs	r0, r3
   1b16e:	46bd      	mov	sp, r7
   1b170:	b006      	add	sp, #24
   1b172:	bd80      	pop	{r7, pc}
   1b174:	0001aed5 	.word	0x0001aed5
   1b178:	0001b105 	.word	0x0001b105

0001b17c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1b17c:	b5b0      	push	{r4, r5, r7, lr}
   1b17e:	b08a      	sub	sp, #40	; 0x28
   1b180:	af00      	add	r7, sp, #0
   1b182:	60f8      	str	r0, [r7, #12]
   1b184:	60b9      	str	r1, [r7, #8]
   1b186:	607a      	str	r2, [r7, #4]
   1b188:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1b18a:	2300      	movs	r3, #0
   1b18c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b18e:	68fb      	ldr	r3, [r7, #12]
   1b190:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1b192:	6a3b      	ldr	r3, [r7, #32]
   1b194:	2b00      	cmp	r3, #0
   1b196:	d101      	bne.n	1b19c <xQueueGenericSend+0x20>
   1b198:	b672      	cpsid	i
   1b19a:	e7fe      	b.n	1b19a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b19c:	68bb      	ldr	r3, [r7, #8]
   1b19e:	2b00      	cmp	r3, #0
   1b1a0:	d103      	bne.n	1b1aa <xQueueGenericSend+0x2e>
   1b1a2:	6a3b      	ldr	r3, [r7, #32]
   1b1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b1a6:	2b00      	cmp	r3, #0
   1b1a8:	d101      	bne.n	1b1ae <xQueueGenericSend+0x32>
   1b1aa:	2301      	movs	r3, #1
   1b1ac:	e000      	b.n	1b1b0 <xQueueGenericSend+0x34>
   1b1ae:	2300      	movs	r3, #0
   1b1b0:	2b00      	cmp	r3, #0
   1b1b2:	d101      	bne.n	1b1b8 <xQueueGenericSend+0x3c>
   1b1b4:	b672      	cpsid	i
   1b1b6:	e7fe      	b.n	1b1b6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b1b8:	683b      	ldr	r3, [r7, #0]
   1b1ba:	2b02      	cmp	r3, #2
   1b1bc:	d103      	bne.n	1b1c6 <xQueueGenericSend+0x4a>
   1b1be:	6a3b      	ldr	r3, [r7, #32]
   1b1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b1c2:	2b01      	cmp	r3, #1
   1b1c4:	d101      	bne.n	1b1ca <xQueueGenericSend+0x4e>
   1b1c6:	2301      	movs	r3, #1
   1b1c8:	e000      	b.n	1b1cc <xQueueGenericSend+0x50>
   1b1ca:	2300      	movs	r3, #0
   1b1cc:	2b00      	cmp	r3, #0
   1b1ce:	d101      	bne.n	1b1d4 <xQueueGenericSend+0x58>
   1b1d0:	b672      	cpsid	i
   1b1d2:	e7fe      	b.n	1b1d2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b1d4:	4bbc      	ldr	r3, [pc, #752]	; (1b4c8 <xQueueGenericSend+0x34c>)
   1b1d6:	4798      	blx	r3
   1b1d8:	1e03      	subs	r3, r0, #0
   1b1da:	d102      	bne.n	1b1e2 <xQueueGenericSend+0x66>
   1b1dc:	687b      	ldr	r3, [r7, #4]
   1b1de:	2b00      	cmp	r3, #0
   1b1e0:	d101      	bne.n	1b1e6 <xQueueGenericSend+0x6a>
   1b1e2:	2301      	movs	r3, #1
   1b1e4:	e000      	b.n	1b1e8 <xQueueGenericSend+0x6c>
   1b1e6:	2300      	movs	r3, #0
   1b1e8:	2b00      	cmp	r3, #0
   1b1ea:	d101      	bne.n	1b1f0 <xQueueGenericSend+0x74>
   1b1ec:	b672      	cpsid	i
   1b1ee:	e7fe      	b.n	1b1ee <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1b1f0:	4bb6      	ldr	r3, [pc, #728]	; (1b4cc <xQueueGenericSend+0x350>)
   1b1f2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b1f4:	6a3b      	ldr	r3, [r7, #32]
   1b1f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b1f8:	6a3b      	ldr	r3, [r7, #32]
   1b1fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b1fc:	429a      	cmp	r2, r3
   1b1fe:	d303      	bcc.n	1b208 <xQueueGenericSend+0x8c>
   1b200:	683b      	ldr	r3, [r7, #0]
   1b202:	2b02      	cmp	r3, #2
   1b204:	d000      	beq.n	1b208 <xQueueGenericSend+0x8c>
   1b206:	e08e      	b.n	1b326 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1b208:	4bb1      	ldr	r3, [pc, #708]	; (1b4d0 <xQueueGenericSend+0x354>)
   1b20a:	4798      	blx	r3
   1b20c:	0003      	movs	r3, r0
   1b20e:	0018      	movs	r0, r3
   1b210:	4bb0      	ldr	r3, [pc, #704]	; (1b4d4 <xQueueGenericSend+0x358>)
   1b212:	4798      	blx	r3
   1b214:	0003      	movs	r3, r0
   1b216:	001a      	movs	r2, r3
   1b218:	4baf      	ldr	r3, [pc, #700]	; (1b4d8 <xQueueGenericSend+0x35c>)
   1b21a:	881b      	ldrh	r3, [r3, #0]
   1b21c:	4013      	ands	r3, r2
   1b21e:	b29b      	uxth	r3, r3
   1b220:	2b00      	cmp	r3, #0
   1b222:	d02e      	beq.n	1b282 <xQueueGenericSend+0x106>
   1b224:	6a3b      	ldr	r3, [r7, #32]
   1b226:	0018      	movs	r0, r3
   1b228:	4bac      	ldr	r3, [pc, #688]	; (1b4dc <xQueueGenericSend+0x360>)
   1b22a:	4798      	blx	r3
   1b22c:	0003      	movs	r3, r0
   1b22e:	001a      	movs	r2, r3
   1b230:	4ba9      	ldr	r3, [pc, #676]	; (1b4d8 <xQueueGenericSend+0x35c>)
   1b232:	881b      	ldrh	r3, [r3, #0]
   1b234:	4013      	ands	r3, r2
   1b236:	b29b      	uxth	r3, r3
   1b238:	2b00      	cmp	r3, #0
   1b23a:	d022      	beq.n	1b282 <xQueueGenericSend+0x106>
   1b23c:	683b      	ldr	r3, [r7, #0]
   1b23e:	2b00      	cmp	r3, #0
   1b240:	d10b      	bne.n	1b25a <xQueueGenericSend+0xde>
   1b242:	6a3b      	ldr	r3, [r7, #32]
   1b244:	0018      	movs	r0, r3
   1b246:	4ba6      	ldr	r3, [pc, #664]	; (1b4e0 <xQueueGenericSend+0x364>)
   1b248:	4798      	blx	r3
   1b24a:	0003      	movs	r3, r0
   1b24c:	001a      	movs	r2, r3
   1b24e:	4ba5      	ldr	r3, [pc, #660]	; (1b4e4 <xQueueGenericSend+0x368>)
   1b250:	5c9b      	ldrb	r3, [r3, r2]
   1b252:	3320      	adds	r3, #32
   1b254:	b2db      	uxtb	r3, r3
   1b256:	001d      	movs	r5, r3
   1b258:	e000      	b.n	1b25c <xQueueGenericSend+0xe0>
   1b25a:	2525      	movs	r5, #37	; 0x25
   1b25c:	6a3b      	ldr	r3, [r7, #32]
   1b25e:	0018      	movs	r0, r3
   1b260:	4b9f      	ldr	r3, [pc, #636]	; (1b4e0 <xQueueGenericSend+0x364>)
   1b262:	4798      	blx	r3
   1b264:	0003      	movs	r3, r0
   1b266:	001a      	movs	r2, r3
   1b268:	4b9e      	ldr	r3, [pc, #632]	; (1b4e4 <xQueueGenericSend+0x368>)
   1b26a:	5c9c      	ldrb	r4, [r3, r2]
   1b26c:	6a3b      	ldr	r3, [r7, #32]
   1b26e:	0018      	movs	r0, r3
   1b270:	4b9d      	ldr	r3, [pc, #628]	; (1b4e8 <xQueueGenericSend+0x36c>)
   1b272:	4798      	blx	r3
   1b274:	0003      	movs	r3, r0
   1b276:	b2db      	uxtb	r3, r3
   1b278:	001a      	movs	r2, r3
   1b27a:	0021      	movs	r1, r4
   1b27c:	0028      	movs	r0, r5
   1b27e:	4b9b      	ldr	r3, [pc, #620]	; (1b4ec <xQueueGenericSend+0x370>)
   1b280:	4798      	blx	r3
   1b282:	6a3b      	ldr	r3, [r7, #32]
   1b284:	0018      	movs	r0, r3
   1b286:	4b96      	ldr	r3, [pc, #600]	; (1b4e0 <xQueueGenericSend+0x364>)
   1b288:	4798      	blx	r3
   1b28a:	0003      	movs	r3, r0
   1b28c:	001a      	movs	r2, r3
   1b28e:	4b95      	ldr	r3, [pc, #596]	; (1b4e4 <xQueueGenericSend+0x368>)
   1b290:	5c9c      	ldrb	r4, [r3, r2]
   1b292:	6a3b      	ldr	r3, [r7, #32]
   1b294:	0018      	movs	r0, r3
   1b296:	4b94      	ldr	r3, [pc, #592]	; (1b4e8 <xQueueGenericSend+0x36c>)
   1b298:	4798      	blx	r3
   1b29a:	0003      	movs	r3, r0
   1b29c:	b2dd      	uxtb	r5, r3
   1b29e:	6a3b      	ldr	r3, [r7, #32]
   1b2a0:	0018      	movs	r0, r3
   1b2a2:	4b8f      	ldr	r3, [pc, #572]	; (1b4e0 <xQueueGenericSend+0x364>)
   1b2a4:	4798      	blx	r3
   1b2a6:	0003      	movs	r3, r0
   1b2a8:	001a      	movs	r2, r3
   1b2aa:	4b8e      	ldr	r3, [pc, #568]	; (1b4e4 <xQueueGenericSend+0x368>)
   1b2ac:	5c9b      	ldrb	r3, [r3, r2]
   1b2ae:	2b02      	cmp	r3, #2
   1b2b0:	d005      	beq.n	1b2be <xQueueGenericSend+0x142>
   1b2b2:	6a3b      	ldr	r3, [r7, #32]
   1b2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b2b6:	b2db      	uxtb	r3, r3
   1b2b8:	3301      	adds	r3, #1
   1b2ba:	b2db      	uxtb	r3, r3
   1b2bc:	e000      	b.n	1b2c0 <xQueueGenericSend+0x144>
   1b2be:	2300      	movs	r3, #0
   1b2c0:	001a      	movs	r2, r3
   1b2c2:	0029      	movs	r1, r5
   1b2c4:	0020      	movs	r0, r4
   1b2c6:	4b8a      	ldr	r3, [pc, #552]	; (1b4f0 <xQueueGenericSend+0x374>)
   1b2c8:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b2ca:	683a      	ldr	r2, [r7, #0]
   1b2cc:	68b9      	ldr	r1, [r7, #8]
   1b2ce:	6a3b      	ldr	r3, [r7, #32]
   1b2d0:	0018      	movs	r0, r3
   1b2d2:	4b88      	ldr	r3, [pc, #544]	; (1b4f4 <xQueueGenericSend+0x378>)
   1b2d4:	4798      	blx	r3
   1b2d6:	0003      	movs	r3, r0
   1b2d8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b2da:	6a3b      	ldr	r3, [r7, #32]
   1b2dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b2de:	2b00      	cmp	r3, #0
   1b2e0:	d00a      	beq.n	1b2f8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b2e2:	683a      	ldr	r2, [r7, #0]
   1b2e4:	6a3b      	ldr	r3, [r7, #32]
   1b2e6:	0011      	movs	r1, r2
   1b2e8:	0018      	movs	r0, r3
   1b2ea:	4b83      	ldr	r3, [pc, #524]	; (1b4f8 <xQueueGenericSend+0x37c>)
   1b2ec:	4798      	blx	r3
   1b2ee:	1e03      	subs	r3, r0, #0
   1b2f0:	d015      	beq.n	1b31e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1b2f2:	4b82      	ldr	r3, [pc, #520]	; (1b4fc <xQueueGenericSend+0x380>)
   1b2f4:	4798      	blx	r3
   1b2f6:	e012      	b.n	1b31e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b2f8:	6a3b      	ldr	r3, [r7, #32]
   1b2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b2fc:	2b00      	cmp	r3, #0
   1b2fe:	d009      	beq.n	1b314 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b300:	6a3b      	ldr	r3, [r7, #32]
   1b302:	3324      	adds	r3, #36	; 0x24
   1b304:	0018      	movs	r0, r3
   1b306:	4b7e      	ldr	r3, [pc, #504]	; (1b500 <xQueueGenericSend+0x384>)
   1b308:	4798      	blx	r3
   1b30a:	1e03      	subs	r3, r0, #0
   1b30c:	d007      	beq.n	1b31e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1b30e:	4b7b      	ldr	r3, [pc, #492]	; (1b4fc <xQueueGenericSend+0x380>)
   1b310:	4798      	blx	r3
   1b312:	e004      	b.n	1b31e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1b314:	69fb      	ldr	r3, [r7, #28]
   1b316:	2b00      	cmp	r3, #0
   1b318:	d001      	beq.n	1b31e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1b31a:	4b78      	ldr	r3, [pc, #480]	; (1b4fc <xQueueGenericSend+0x380>)
   1b31c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1b31e:	4b79      	ldr	r3, [pc, #484]	; (1b504 <xQueueGenericSend+0x388>)
   1b320:	4798      	blx	r3
				return pdPASS;
   1b322:	2301      	movs	r3, #1
   1b324:	e142      	b.n	1b5ac <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b326:	687b      	ldr	r3, [r7, #4]
   1b328:	2b00      	cmp	r3, #0
   1b32a:	d140      	bne.n	1b3ae <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b32c:	4b75      	ldr	r3, [pc, #468]	; (1b504 <xQueueGenericSend+0x388>)
   1b32e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1b330:	4b67      	ldr	r3, [pc, #412]	; (1b4d0 <xQueueGenericSend+0x354>)
   1b332:	4798      	blx	r3
   1b334:	0003      	movs	r3, r0
   1b336:	0018      	movs	r0, r3
   1b338:	4b66      	ldr	r3, [pc, #408]	; (1b4d4 <xQueueGenericSend+0x358>)
   1b33a:	4798      	blx	r3
   1b33c:	0003      	movs	r3, r0
   1b33e:	001a      	movs	r2, r3
   1b340:	4b65      	ldr	r3, [pc, #404]	; (1b4d8 <xQueueGenericSend+0x35c>)
   1b342:	881b      	ldrh	r3, [r3, #0]
   1b344:	4013      	ands	r3, r2
   1b346:	b29b      	uxth	r3, r3
   1b348:	2b00      	cmp	r3, #0
   1b34a:	d02e      	beq.n	1b3aa <xQueueGenericSend+0x22e>
   1b34c:	6a3b      	ldr	r3, [r7, #32]
   1b34e:	0018      	movs	r0, r3
   1b350:	4b62      	ldr	r3, [pc, #392]	; (1b4dc <xQueueGenericSend+0x360>)
   1b352:	4798      	blx	r3
   1b354:	0003      	movs	r3, r0
   1b356:	001a      	movs	r2, r3
   1b358:	4b5f      	ldr	r3, [pc, #380]	; (1b4d8 <xQueueGenericSend+0x35c>)
   1b35a:	881b      	ldrh	r3, [r3, #0]
   1b35c:	4013      	ands	r3, r2
   1b35e:	b29b      	uxth	r3, r3
   1b360:	2b00      	cmp	r3, #0
   1b362:	d022      	beq.n	1b3aa <xQueueGenericSend+0x22e>
   1b364:	683b      	ldr	r3, [r7, #0]
   1b366:	2b00      	cmp	r3, #0
   1b368:	d10b      	bne.n	1b382 <xQueueGenericSend+0x206>
   1b36a:	6a3b      	ldr	r3, [r7, #32]
   1b36c:	0018      	movs	r0, r3
   1b36e:	4b5c      	ldr	r3, [pc, #368]	; (1b4e0 <xQueueGenericSend+0x364>)
   1b370:	4798      	blx	r3
   1b372:	0003      	movs	r3, r0
   1b374:	001a      	movs	r2, r3
   1b376:	4b5b      	ldr	r3, [pc, #364]	; (1b4e4 <xQueueGenericSend+0x368>)
   1b378:	5c9b      	ldrb	r3, [r3, r2]
   1b37a:	3348      	adds	r3, #72	; 0x48
   1b37c:	b2db      	uxtb	r3, r3
   1b37e:	001d      	movs	r5, r3
   1b380:	e000      	b.n	1b384 <xQueueGenericSend+0x208>
   1b382:	254d      	movs	r5, #77	; 0x4d
   1b384:	6a3b      	ldr	r3, [r7, #32]
   1b386:	0018      	movs	r0, r3
   1b388:	4b55      	ldr	r3, [pc, #340]	; (1b4e0 <xQueueGenericSend+0x364>)
   1b38a:	4798      	blx	r3
   1b38c:	0003      	movs	r3, r0
   1b38e:	001a      	movs	r2, r3
   1b390:	4b54      	ldr	r3, [pc, #336]	; (1b4e4 <xQueueGenericSend+0x368>)
   1b392:	5c9c      	ldrb	r4, [r3, r2]
   1b394:	6a3b      	ldr	r3, [r7, #32]
   1b396:	0018      	movs	r0, r3
   1b398:	4b53      	ldr	r3, [pc, #332]	; (1b4e8 <xQueueGenericSend+0x36c>)
   1b39a:	4798      	blx	r3
   1b39c:	0003      	movs	r3, r0
   1b39e:	b2db      	uxtb	r3, r3
   1b3a0:	001a      	movs	r2, r3
   1b3a2:	0021      	movs	r1, r4
   1b3a4:	0028      	movs	r0, r5
   1b3a6:	4b51      	ldr	r3, [pc, #324]	; (1b4ec <xQueueGenericSend+0x370>)
   1b3a8:	4798      	blx	r3
					return errQUEUE_FULL;
   1b3aa:	2300      	movs	r3, #0
   1b3ac:	e0fe      	b.n	1b5ac <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b3b0:	2b00      	cmp	r3, #0
   1b3b2:	d106      	bne.n	1b3c2 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b3b4:	2314      	movs	r3, #20
   1b3b6:	18fb      	adds	r3, r7, r3
   1b3b8:	0018      	movs	r0, r3
   1b3ba:	4b53      	ldr	r3, [pc, #332]	; (1b508 <xQueueGenericSend+0x38c>)
   1b3bc:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b3be:	2301      	movs	r3, #1
   1b3c0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b3c2:	4b50      	ldr	r3, [pc, #320]	; (1b504 <xQueueGenericSend+0x388>)
   1b3c4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b3c6:	4b51      	ldr	r3, [pc, #324]	; (1b50c <xQueueGenericSend+0x390>)
   1b3c8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b3ca:	4b40      	ldr	r3, [pc, #256]	; (1b4cc <xQueueGenericSend+0x350>)
   1b3cc:	4798      	blx	r3
   1b3ce:	6a3b      	ldr	r3, [r7, #32]
   1b3d0:	2244      	movs	r2, #68	; 0x44
   1b3d2:	5c9b      	ldrb	r3, [r3, r2]
   1b3d4:	b25b      	sxtb	r3, r3
   1b3d6:	3301      	adds	r3, #1
   1b3d8:	d103      	bne.n	1b3e2 <xQueueGenericSend+0x266>
   1b3da:	6a3b      	ldr	r3, [r7, #32]
   1b3dc:	2244      	movs	r2, #68	; 0x44
   1b3de:	2100      	movs	r1, #0
   1b3e0:	5499      	strb	r1, [r3, r2]
   1b3e2:	6a3b      	ldr	r3, [r7, #32]
   1b3e4:	2245      	movs	r2, #69	; 0x45
   1b3e6:	5c9b      	ldrb	r3, [r3, r2]
   1b3e8:	b25b      	sxtb	r3, r3
   1b3ea:	3301      	adds	r3, #1
   1b3ec:	d103      	bne.n	1b3f6 <xQueueGenericSend+0x27a>
   1b3ee:	6a3b      	ldr	r3, [r7, #32]
   1b3f0:	2245      	movs	r2, #69	; 0x45
   1b3f2:	2100      	movs	r1, #0
   1b3f4:	5499      	strb	r1, [r3, r2]
   1b3f6:	4b43      	ldr	r3, [pc, #268]	; (1b504 <xQueueGenericSend+0x388>)
   1b3f8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b3fa:	1d3a      	adds	r2, r7, #4
   1b3fc:	2314      	movs	r3, #20
   1b3fe:	18fb      	adds	r3, r7, r3
   1b400:	0011      	movs	r1, r2
   1b402:	0018      	movs	r0, r3
   1b404:	4b42      	ldr	r3, [pc, #264]	; (1b510 <xQueueGenericSend+0x394>)
   1b406:	4798      	blx	r3
   1b408:	1e03      	subs	r3, r0, #0
   1b40a:	d000      	beq.n	1b40e <xQueueGenericSend+0x292>
   1b40c:	e08a      	b.n	1b524 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1b40e:	6a3b      	ldr	r3, [r7, #32]
   1b410:	0018      	movs	r0, r3
   1b412:	4b40      	ldr	r3, [pc, #256]	; (1b514 <xQueueGenericSend+0x398>)
   1b414:	4798      	blx	r3
   1b416:	1e03      	subs	r3, r0, #0
   1b418:	d04f      	beq.n	1b4ba <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1b41a:	4b2d      	ldr	r3, [pc, #180]	; (1b4d0 <xQueueGenericSend+0x354>)
   1b41c:	4798      	blx	r3
   1b41e:	0003      	movs	r3, r0
   1b420:	0018      	movs	r0, r3
   1b422:	4b2c      	ldr	r3, [pc, #176]	; (1b4d4 <xQueueGenericSend+0x358>)
   1b424:	4798      	blx	r3
   1b426:	0003      	movs	r3, r0
   1b428:	001a      	movs	r2, r3
   1b42a:	4b2b      	ldr	r3, [pc, #172]	; (1b4d8 <xQueueGenericSend+0x35c>)
   1b42c:	881b      	ldrh	r3, [r3, #0]
   1b42e:	4013      	ands	r3, r2
   1b430:	b29b      	uxth	r3, r3
   1b432:	2b00      	cmp	r3, #0
   1b434:	d02e      	beq.n	1b494 <xQueueGenericSend+0x318>
   1b436:	6a3b      	ldr	r3, [r7, #32]
   1b438:	0018      	movs	r0, r3
   1b43a:	4b28      	ldr	r3, [pc, #160]	; (1b4dc <xQueueGenericSend+0x360>)
   1b43c:	4798      	blx	r3
   1b43e:	0003      	movs	r3, r0
   1b440:	001a      	movs	r2, r3
   1b442:	4b25      	ldr	r3, [pc, #148]	; (1b4d8 <xQueueGenericSend+0x35c>)
   1b444:	881b      	ldrh	r3, [r3, #0]
   1b446:	4013      	ands	r3, r2
   1b448:	b29b      	uxth	r3, r3
   1b44a:	2b00      	cmp	r3, #0
   1b44c:	d022      	beq.n	1b494 <xQueueGenericSend+0x318>
   1b44e:	683b      	ldr	r3, [r7, #0]
   1b450:	2b00      	cmp	r3, #0
   1b452:	d10b      	bne.n	1b46c <xQueueGenericSend+0x2f0>
   1b454:	6a3b      	ldr	r3, [r7, #32]
   1b456:	0018      	movs	r0, r3
   1b458:	4b21      	ldr	r3, [pc, #132]	; (1b4e0 <xQueueGenericSend+0x364>)
   1b45a:	4798      	blx	r3
   1b45c:	0003      	movs	r3, r0
   1b45e:	001a      	movs	r2, r3
   1b460:	4b20      	ldr	r3, [pc, #128]	; (1b4e4 <xQueueGenericSend+0x368>)
   1b462:	5c9b      	ldrb	r3, [r3, r2]
   1b464:	3370      	adds	r3, #112	; 0x70
   1b466:	b2db      	uxtb	r3, r3
   1b468:	001d      	movs	r5, r3
   1b46a:	e000      	b.n	1b46e <xQueueGenericSend+0x2f2>
   1b46c:	2575      	movs	r5, #117	; 0x75
   1b46e:	6a3b      	ldr	r3, [r7, #32]
   1b470:	0018      	movs	r0, r3
   1b472:	4b1b      	ldr	r3, [pc, #108]	; (1b4e0 <xQueueGenericSend+0x364>)
   1b474:	4798      	blx	r3
   1b476:	0003      	movs	r3, r0
   1b478:	001a      	movs	r2, r3
   1b47a:	4b1a      	ldr	r3, [pc, #104]	; (1b4e4 <xQueueGenericSend+0x368>)
   1b47c:	5c9c      	ldrb	r4, [r3, r2]
   1b47e:	6a3b      	ldr	r3, [r7, #32]
   1b480:	0018      	movs	r0, r3
   1b482:	4b19      	ldr	r3, [pc, #100]	; (1b4e8 <xQueueGenericSend+0x36c>)
   1b484:	4798      	blx	r3
   1b486:	0003      	movs	r3, r0
   1b488:	b2db      	uxtb	r3, r3
   1b48a:	001a      	movs	r2, r3
   1b48c:	0021      	movs	r1, r4
   1b48e:	0028      	movs	r0, r5
   1b490:	4b16      	ldr	r3, [pc, #88]	; (1b4ec <xQueueGenericSend+0x370>)
   1b492:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1b494:	6a3b      	ldr	r3, [r7, #32]
   1b496:	3310      	adds	r3, #16
   1b498:	687a      	ldr	r2, [r7, #4]
   1b49a:	0011      	movs	r1, r2
   1b49c:	0018      	movs	r0, r3
   1b49e:	4b1e      	ldr	r3, [pc, #120]	; (1b518 <xQueueGenericSend+0x39c>)
   1b4a0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1b4a2:	6a3b      	ldr	r3, [r7, #32]
   1b4a4:	0018      	movs	r0, r3
   1b4a6:	4b1d      	ldr	r3, [pc, #116]	; (1b51c <xQueueGenericSend+0x3a0>)
   1b4a8:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1b4aa:	4b1d      	ldr	r3, [pc, #116]	; (1b520 <xQueueGenericSend+0x3a4>)
   1b4ac:	4798      	blx	r3
   1b4ae:	1e03      	subs	r3, r0, #0
   1b4b0:	d000      	beq.n	1b4b4 <xQueueGenericSend+0x338>
   1b4b2:	e69d      	b.n	1b1f0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1b4b4:	4b11      	ldr	r3, [pc, #68]	; (1b4fc <xQueueGenericSend+0x380>)
   1b4b6:	4798      	blx	r3
   1b4b8:	e69a      	b.n	1b1f0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1b4ba:	6a3b      	ldr	r3, [r7, #32]
   1b4bc:	0018      	movs	r0, r3
   1b4be:	4b17      	ldr	r3, [pc, #92]	; (1b51c <xQueueGenericSend+0x3a0>)
   1b4c0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b4c2:	4b17      	ldr	r3, [pc, #92]	; (1b520 <xQueueGenericSend+0x3a4>)
   1b4c4:	4798      	blx	r3
   1b4c6:	e693      	b.n	1b1f0 <xQueueGenericSend+0x74>
   1b4c8:	0001d909 	.word	0x0001d909
   1b4cc:	0001abe9 	.word	0x0001abe9
   1b4d0:	00018e79 	.word	0x00018e79
   1b4d4:	00018bdd 	.word	0x00018bdd
   1b4d8:	20000110 	.word	0x20000110
   1b4dc:	00018c9d 	.word	0x00018c9d
   1b4e0:	00018b9d 	.word	0x00018b9d
   1b4e4:	20000104 	.word	0x20000104
   1b4e8:	00018c7d 	.word	0x00018c7d
   1b4ec:	000195d5 	.word	0x000195d5
   1b4f0:	00019c31 	.word	0x00019c31
   1b4f4:	0001c3b5 	.word	0x0001c3b5
   1b4f8:	0001c6b9 	.word	0x0001c6b9
   1b4fc:	0001abd1 	.word	0x0001abd1
   1b500:	0001d479 	.word	0x0001d479
   1b504:	0001ac0d 	.word	0x0001ac0d
   1b508:	0001d5b9 	.word	0x0001d5b9
   1b50c:	0001cea1 	.word	0x0001cea1
   1b510:	0001d5e1 	.word	0x0001d5e1
   1b514:	0001c609 	.word	0x0001c609
   1b518:	0001d355 	.word	0x0001d355
   1b51c:	0001c4e5 	.word	0x0001c4e5
   1b520:	0001ceb9 	.word	0x0001ceb9
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1b524:	6a3b      	ldr	r3, [r7, #32]
   1b526:	0018      	movs	r0, r3
   1b528:	4b22      	ldr	r3, [pc, #136]	; (1b5b4 <xQueueGenericSend+0x438>)
   1b52a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b52c:	4b22      	ldr	r3, [pc, #136]	; (1b5b8 <xQueueGenericSend+0x43c>)
   1b52e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1b530:	4b22      	ldr	r3, [pc, #136]	; (1b5bc <xQueueGenericSend+0x440>)
   1b532:	4798      	blx	r3
   1b534:	0003      	movs	r3, r0
   1b536:	0018      	movs	r0, r3
   1b538:	4b21      	ldr	r3, [pc, #132]	; (1b5c0 <xQueueGenericSend+0x444>)
   1b53a:	4798      	blx	r3
   1b53c:	0003      	movs	r3, r0
   1b53e:	001a      	movs	r2, r3
   1b540:	4b20      	ldr	r3, [pc, #128]	; (1b5c4 <xQueueGenericSend+0x448>)
   1b542:	881b      	ldrh	r3, [r3, #0]
   1b544:	4013      	ands	r3, r2
   1b546:	b29b      	uxth	r3, r3
   1b548:	2b00      	cmp	r3, #0
   1b54a:	d02e      	beq.n	1b5aa <xQueueGenericSend+0x42e>
   1b54c:	6a3b      	ldr	r3, [r7, #32]
   1b54e:	0018      	movs	r0, r3
   1b550:	4b1d      	ldr	r3, [pc, #116]	; (1b5c8 <xQueueGenericSend+0x44c>)
   1b552:	4798      	blx	r3
   1b554:	0003      	movs	r3, r0
   1b556:	001a      	movs	r2, r3
   1b558:	4b1a      	ldr	r3, [pc, #104]	; (1b5c4 <xQueueGenericSend+0x448>)
   1b55a:	881b      	ldrh	r3, [r3, #0]
   1b55c:	4013      	ands	r3, r2
   1b55e:	b29b      	uxth	r3, r3
   1b560:	2b00      	cmp	r3, #0
   1b562:	d022      	beq.n	1b5aa <xQueueGenericSend+0x42e>
   1b564:	683b      	ldr	r3, [r7, #0]
   1b566:	2b00      	cmp	r3, #0
   1b568:	d10b      	bne.n	1b582 <xQueueGenericSend+0x406>
   1b56a:	6a3b      	ldr	r3, [r7, #32]
   1b56c:	0018      	movs	r0, r3
   1b56e:	4b17      	ldr	r3, [pc, #92]	; (1b5cc <xQueueGenericSend+0x450>)
   1b570:	4798      	blx	r3
   1b572:	0003      	movs	r3, r0
   1b574:	001a      	movs	r2, r3
   1b576:	4b16      	ldr	r3, [pc, #88]	; (1b5d0 <xQueueGenericSend+0x454>)
   1b578:	5c9b      	ldrb	r3, [r3, r2]
   1b57a:	3348      	adds	r3, #72	; 0x48
   1b57c:	b2db      	uxtb	r3, r3
   1b57e:	001d      	movs	r5, r3
   1b580:	e000      	b.n	1b584 <xQueueGenericSend+0x408>
   1b582:	254d      	movs	r5, #77	; 0x4d
   1b584:	6a3b      	ldr	r3, [r7, #32]
   1b586:	0018      	movs	r0, r3
   1b588:	4b10      	ldr	r3, [pc, #64]	; (1b5cc <xQueueGenericSend+0x450>)
   1b58a:	4798      	blx	r3
   1b58c:	0003      	movs	r3, r0
   1b58e:	001a      	movs	r2, r3
   1b590:	4b0f      	ldr	r3, [pc, #60]	; (1b5d0 <xQueueGenericSend+0x454>)
   1b592:	5c9c      	ldrb	r4, [r3, r2]
   1b594:	6a3b      	ldr	r3, [r7, #32]
   1b596:	0018      	movs	r0, r3
   1b598:	4b0e      	ldr	r3, [pc, #56]	; (1b5d4 <xQueueGenericSend+0x458>)
   1b59a:	4798      	blx	r3
   1b59c:	0003      	movs	r3, r0
   1b59e:	b2db      	uxtb	r3, r3
   1b5a0:	001a      	movs	r2, r3
   1b5a2:	0021      	movs	r1, r4
   1b5a4:	0028      	movs	r0, r5
   1b5a6:	4b0c      	ldr	r3, [pc, #48]	; (1b5d8 <xQueueGenericSend+0x45c>)
   1b5a8:	4798      	blx	r3
			return errQUEUE_FULL;
   1b5aa:	2300      	movs	r3, #0
		}
	}
}
   1b5ac:	0018      	movs	r0, r3
   1b5ae:	46bd      	mov	sp, r7
   1b5b0:	b00a      	add	sp, #40	; 0x28
   1b5b2:	bdb0      	pop	{r4, r5, r7, pc}
   1b5b4:	0001c4e5 	.word	0x0001c4e5
   1b5b8:	0001ceb9 	.word	0x0001ceb9
   1b5bc:	00018e79 	.word	0x00018e79
   1b5c0:	00018bdd 	.word	0x00018bdd
   1b5c4:	20000110 	.word	0x20000110
   1b5c8:	00018c9d 	.word	0x00018c9d
   1b5cc:	00018b9d 	.word	0x00018b9d
   1b5d0:	20000104 	.word	0x20000104
   1b5d4:	00018c7d 	.word	0x00018c7d
   1b5d8:	000195d5 	.word	0x000195d5

0001b5dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1b5dc:	b5b0      	push	{r4, r5, r7, lr}
   1b5de:	b088      	sub	sp, #32
   1b5e0:	af00      	add	r7, sp, #0
   1b5e2:	60f8      	str	r0, [r7, #12]
   1b5e4:	60b9      	str	r1, [r7, #8]
   1b5e6:	607a      	str	r2, [r7, #4]
   1b5e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b5ea:	68fb      	ldr	r3, [r7, #12]
   1b5ec:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1b5ee:	69bb      	ldr	r3, [r7, #24]
   1b5f0:	2b00      	cmp	r3, #0
   1b5f2:	d101      	bne.n	1b5f8 <xQueueGenericSendFromISR+0x1c>
   1b5f4:	b672      	cpsid	i
   1b5f6:	e7fe      	b.n	1b5f6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b5f8:	68bb      	ldr	r3, [r7, #8]
   1b5fa:	2b00      	cmp	r3, #0
   1b5fc:	d103      	bne.n	1b606 <xQueueGenericSendFromISR+0x2a>
   1b5fe:	69bb      	ldr	r3, [r7, #24]
   1b600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b602:	2b00      	cmp	r3, #0
   1b604:	d101      	bne.n	1b60a <xQueueGenericSendFromISR+0x2e>
   1b606:	2301      	movs	r3, #1
   1b608:	e000      	b.n	1b60c <xQueueGenericSendFromISR+0x30>
   1b60a:	2300      	movs	r3, #0
   1b60c:	2b00      	cmp	r3, #0
   1b60e:	d101      	bne.n	1b614 <xQueueGenericSendFromISR+0x38>
   1b610:	b672      	cpsid	i
   1b612:	e7fe      	b.n	1b612 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b614:	683b      	ldr	r3, [r7, #0]
   1b616:	2b02      	cmp	r3, #2
   1b618:	d103      	bne.n	1b622 <xQueueGenericSendFromISR+0x46>
   1b61a:	69bb      	ldr	r3, [r7, #24]
   1b61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b61e:	2b01      	cmp	r3, #1
   1b620:	d101      	bne.n	1b626 <xQueueGenericSendFromISR+0x4a>
   1b622:	2301      	movs	r3, #1
   1b624:	e000      	b.n	1b628 <xQueueGenericSendFromISR+0x4c>
   1b626:	2300      	movs	r3, #0
   1b628:	2b00      	cmp	r3, #0
   1b62a:	d101      	bne.n	1b630 <xQueueGenericSendFromISR+0x54>
   1b62c:	b672      	cpsid	i
   1b62e:	e7fe      	b.n	1b62e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b630:	4b68      	ldr	r3, [pc, #416]	; (1b7d4 <xQueueGenericSendFromISR+0x1f8>)
   1b632:	4798      	blx	r3
   1b634:	0003      	movs	r3, r0
   1b636:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b638:	69bb      	ldr	r3, [r7, #24]
   1b63a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b63c:	69bb      	ldr	r3, [r7, #24]
   1b63e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b640:	429a      	cmp	r2, r3
   1b642:	d303      	bcc.n	1b64c <xQueueGenericSendFromISR+0x70>
   1b644:	683b      	ldr	r3, [r7, #0]
   1b646:	2b02      	cmp	r3, #2
   1b648:	d000      	beq.n	1b64c <xQueueGenericSendFromISR+0x70>
   1b64a:	e088      	b.n	1b75e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b64c:	2313      	movs	r3, #19
   1b64e:	18fb      	adds	r3, r7, r3
   1b650:	69ba      	ldr	r2, [r7, #24]
   1b652:	2145      	movs	r1, #69	; 0x45
   1b654:	5c52      	ldrb	r2, [r2, r1]
   1b656:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b658:	69bb      	ldr	r3, [r7, #24]
   1b65a:	0018      	movs	r0, r3
   1b65c:	4b5e      	ldr	r3, [pc, #376]	; (1b7d8 <xQueueGenericSendFromISR+0x1fc>)
   1b65e:	4798      	blx	r3
   1b660:	0003      	movs	r3, r0
   1b662:	001a      	movs	r2, r3
   1b664:	4b5d      	ldr	r3, [pc, #372]	; (1b7dc <xQueueGenericSendFromISR+0x200>)
   1b666:	881b      	ldrh	r3, [r3, #0]
   1b668:	4013      	ands	r3, r2
   1b66a:	b29b      	uxth	r3, r3
   1b66c:	2b00      	cmp	r3, #0
   1b66e:	d022      	beq.n	1b6b6 <xQueueGenericSendFromISR+0xda>
   1b670:	683b      	ldr	r3, [r7, #0]
   1b672:	2b00      	cmp	r3, #0
   1b674:	d10b      	bne.n	1b68e <xQueueGenericSendFromISR+0xb2>
   1b676:	69bb      	ldr	r3, [r7, #24]
   1b678:	0018      	movs	r0, r3
   1b67a:	4b59      	ldr	r3, [pc, #356]	; (1b7e0 <xQueueGenericSendFromISR+0x204>)
   1b67c:	4798      	blx	r3
   1b67e:	0003      	movs	r3, r0
   1b680:	001a      	movs	r2, r3
   1b682:	4b58      	ldr	r3, [pc, #352]	; (1b7e4 <xQueueGenericSendFromISR+0x208>)
   1b684:	5c9b      	ldrb	r3, [r3, r2]
   1b686:	3330      	adds	r3, #48	; 0x30
   1b688:	b2db      	uxtb	r3, r3
   1b68a:	001d      	movs	r5, r3
   1b68c:	e000      	b.n	1b690 <xQueueGenericSendFromISR+0xb4>
   1b68e:	2535      	movs	r5, #53	; 0x35
   1b690:	69bb      	ldr	r3, [r7, #24]
   1b692:	0018      	movs	r0, r3
   1b694:	4b52      	ldr	r3, [pc, #328]	; (1b7e0 <xQueueGenericSendFromISR+0x204>)
   1b696:	4798      	blx	r3
   1b698:	0003      	movs	r3, r0
   1b69a:	001a      	movs	r2, r3
   1b69c:	4b51      	ldr	r3, [pc, #324]	; (1b7e4 <xQueueGenericSendFromISR+0x208>)
   1b69e:	5c9c      	ldrb	r4, [r3, r2]
   1b6a0:	69bb      	ldr	r3, [r7, #24]
   1b6a2:	0018      	movs	r0, r3
   1b6a4:	4b50      	ldr	r3, [pc, #320]	; (1b7e8 <xQueueGenericSendFromISR+0x20c>)
   1b6a6:	4798      	blx	r3
   1b6a8:	0003      	movs	r3, r0
   1b6aa:	b2db      	uxtb	r3, r3
   1b6ac:	001a      	movs	r2, r3
   1b6ae:	0021      	movs	r1, r4
   1b6b0:	0028      	movs	r0, r5
   1b6b2:	4b4e      	ldr	r3, [pc, #312]	; (1b7ec <xQueueGenericSendFromISR+0x210>)
   1b6b4:	4798      	blx	r3
   1b6b6:	69bb      	ldr	r3, [r7, #24]
   1b6b8:	0018      	movs	r0, r3
   1b6ba:	4b49      	ldr	r3, [pc, #292]	; (1b7e0 <xQueueGenericSendFromISR+0x204>)
   1b6bc:	4798      	blx	r3
   1b6be:	0003      	movs	r3, r0
   1b6c0:	001a      	movs	r2, r3
   1b6c2:	4b48      	ldr	r3, [pc, #288]	; (1b7e4 <xQueueGenericSendFromISR+0x208>)
   1b6c4:	5c9c      	ldrb	r4, [r3, r2]
   1b6c6:	69bb      	ldr	r3, [r7, #24]
   1b6c8:	0018      	movs	r0, r3
   1b6ca:	4b47      	ldr	r3, [pc, #284]	; (1b7e8 <xQueueGenericSendFromISR+0x20c>)
   1b6cc:	4798      	blx	r3
   1b6ce:	0003      	movs	r3, r0
   1b6d0:	b2d9      	uxtb	r1, r3
   1b6d2:	69bb      	ldr	r3, [r7, #24]
   1b6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b6d6:	b2db      	uxtb	r3, r3
   1b6d8:	3301      	adds	r3, #1
   1b6da:	b2db      	uxtb	r3, r3
   1b6dc:	001a      	movs	r2, r3
   1b6de:	0020      	movs	r0, r4
   1b6e0:	4b43      	ldr	r3, [pc, #268]	; (1b7f0 <xQueueGenericSendFromISR+0x214>)
   1b6e2:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b6e4:	683a      	ldr	r2, [r7, #0]
   1b6e6:	68b9      	ldr	r1, [r7, #8]
   1b6e8:	69bb      	ldr	r3, [r7, #24]
   1b6ea:	0018      	movs	r0, r3
   1b6ec:	4b41      	ldr	r3, [pc, #260]	; (1b7f4 <xQueueGenericSendFromISR+0x218>)
   1b6ee:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b6f0:	2313      	movs	r3, #19
   1b6f2:	18fb      	adds	r3, r7, r3
   1b6f4:	781b      	ldrb	r3, [r3, #0]
   1b6f6:	b25b      	sxtb	r3, r3
   1b6f8:	3301      	adds	r3, #1
   1b6fa:	d124      	bne.n	1b746 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b6fc:	69bb      	ldr	r3, [r7, #24]
   1b6fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b700:	2b00      	cmp	r3, #0
   1b702:	d00e      	beq.n	1b722 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b704:	683a      	ldr	r2, [r7, #0]
   1b706:	69bb      	ldr	r3, [r7, #24]
   1b708:	0011      	movs	r1, r2
   1b70a:	0018      	movs	r0, r3
   1b70c:	4b3a      	ldr	r3, [pc, #232]	; (1b7f8 <xQueueGenericSendFromISR+0x21c>)
   1b70e:	4798      	blx	r3
   1b710:	1e03      	subs	r3, r0, #0
   1b712:	d021      	beq.n	1b758 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b714:	687b      	ldr	r3, [r7, #4]
   1b716:	2b00      	cmp	r3, #0
   1b718:	d01e      	beq.n	1b758 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b71a:	687b      	ldr	r3, [r7, #4]
   1b71c:	2201      	movs	r2, #1
   1b71e:	601a      	str	r2, [r3, #0]
   1b720:	e01a      	b.n	1b758 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b722:	69bb      	ldr	r3, [r7, #24]
   1b724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b726:	2b00      	cmp	r3, #0
   1b728:	d016      	beq.n	1b758 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b72a:	69bb      	ldr	r3, [r7, #24]
   1b72c:	3324      	adds	r3, #36	; 0x24
   1b72e:	0018      	movs	r0, r3
   1b730:	4b32      	ldr	r3, [pc, #200]	; (1b7fc <xQueueGenericSendFromISR+0x220>)
   1b732:	4798      	blx	r3
   1b734:	1e03      	subs	r3, r0, #0
   1b736:	d00f      	beq.n	1b758 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b738:	687b      	ldr	r3, [r7, #4]
   1b73a:	2b00      	cmp	r3, #0
   1b73c:	d00c      	beq.n	1b758 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b73e:	687b      	ldr	r3, [r7, #4]
   1b740:	2201      	movs	r2, #1
   1b742:	601a      	str	r2, [r3, #0]
   1b744:	e008      	b.n	1b758 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b746:	2313      	movs	r3, #19
   1b748:	18fb      	adds	r3, r7, r3
   1b74a:	781b      	ldrb	r3, [r3, #0]
   1b74c:	3301      	adds	r3, #1
   1b74e:	b2db      	uxtb	r3, r3
   1b750:	b259      	sxtb	r1, r3
   1b752:	69bb      	ldr	r3, [r7, #24]
   1b754:	2245      	movs	r2, #69	; 0x45
   1b756:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b758:	2301      	movs	r3, #1
   1b75a:	61fb      	str	r3, [r7, #28]
		{
   1b75c:	e030      	b.n	1b7c0 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b75e:	69bb      	ldr	r3, [r7, #24]
   1b760:	0018      	movs	r0, r3
   1b762:	4b1d      	ldr	r3, [pc, #116]	; (1b7d8 <xQueueGenericSendFromISR+0x1fc>)
   1b764:	4798      	blx	r3
   1b766:	0003      	movs	r3, r0
   1b768:	001a      	movs	r2, r3
   1b76a:	4b1c      	ldr	r3, [pc, #112]	; (1b7dc <xQueueGenericSendFromISR+0x200>)
   1b76c:	881b      	ldrh	r3, [r3, #0]
   1b76e:	4013      	ands	r3, r2
   1b770:	b29b      	uxth	r3, r3
   1b772:	2b00      	cmp	r3, #0
   1b774:	d022      	beq.n	1b7bc <xQueueGenericSendFromISR+0x1e0>
   1b776:	683b      	ldr	r3, [r7, #0]
   1b778:	2b00      	cmp	r3, #0
   1b77a:	d10b      	bne.n	1b794 <xQueueGenericSendFromISR+0x1b8>
   1b77c:	69bb      	ldr	r3, [r7, #24]
   1b77e:	0018      	movs	r0, r3
   1b780:	4b17      	ldr	r3, [pc, #92]	; (1b7e0 <xQueueGenericSendFromISR+0x204>)
   1b782:	4798      	blx	r3
   1b784:	0003      	movs	r3, r0
   1b786:	001a      	movs	r2, r3
   1b788:	4b16      	ldr	r3, [pc, #88]	; (1b7e4 <xQueueGenericSendFromISR+0x208>)
   1b78a:	5c9b      	ldrb	r3, [r3, r2]
   1b78c:	3358      	adds	r3, #88	; 0x58
   1b78e:	b2db      	uxtb	r3, r3
   1b790:	001d      	movs	r5, r3
   1b792:	e000      	b.n	1b796 <xQueueGenericSendFromISR+0x1ba>
   1b794:	255d      	movs	r5, #93	; 0x5d
   1b796:	69bb      	ldr	r3, [r7, #24]
   1b798:	0018      	movs	r0, r3
   1b79a:	4b11      	ldr	r3, [pc, #68]	; (1b7e0 <xQueueGenericSendFromISR+0x204>)
   1b79c:	4798      	blx	r3
   1b79e:	0003      	movs	r3, r0
   1b7a0:	001a      	movs	r2, r3
   1b7a2:	4b10      	ldr	r3, [pc, #64]	; (1b7e4 <xQueueGenericSendFromISR+0x208>)
   1b7a4:	5c9c      	ldrb	r4, [r3, r2]
   1b7a6:	69bb      	ldr	r3, [r7, #24]
   1b7a8:	0018      	movs	r0, r3
   1b7aa:	4b0f      	ldr	r3, [pc, #60]	; (1b7e8 <xQueueGenericSendFromISR+0x20c>)
   1b7ac:	4798      	blx	r3
   1b7ae:	0003      	movs	r3, r0
   1b7b0:	b2db      	uxtb	r3, r3
   1b7b2:	001a      	movs	r2, r3
   1b7b4:	0021      	movs	r1, r4
   1b7b6:	0028      	movs	r0, r5
   1b7b8:	4b0c      	ldr	r3, [pc, #48]	; (1b7ec <xQueueGenericSendFromISR+0x210>)
   1b7ba:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1b7bc:	2300      	movs	r3, #0
   1b7be:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1b7c0:	697b      	ldr	r3, [r7, #20]
   1b7c2:	0018      	movs	r0, r3
   1b7c4:	4b0e      	ldr	r3, [pc, #56]	; (1b800 <xQueueGenericSendFromISR+0x224>)
   1b7c6:	4798      	blx	r3

	return xReturn;
   1b7c8:	69fb      	ldr	r3, [r7, #28]
}
   1b7ca:	0018      	movs	r0, r3
   1b7cc:	46bd      	mov	sp, r7
   1b7ce:	b008      	add	sp, #32
   1b7d0:	bdb0      	pop	{r4, r5, r7, pc}
   1b7d2:	46c0      	nop			; (mov r8, r8)
   1b7d4:	0001ac3d 	.word	0x0001ac3d
   1b7d8:	00018c9d 	.word	0x00018c9d
   1b7dc:	20000110 	.word	0x20000110
   1b7e0:	00018b9d 	.word	0x00018b9d
   1b7e4:	20000104 	.word	0x20000104
   1b7e8:	00018c7d 	.word	0x00018c7d
   1b7ec:	000195d5 	.word	0x000195d5
   1b7f0:	00019c31 	.word	0x00019c31
   1b7f4:	0001c3b5 	.word	0x0001c3b5
   1b7f8:	0001c6b9 	.word	0x0001c6b9
   1b7fc:	0001d479 	.word	0x0001d479
   1b800:	0001ac49 	.word	0x0001ac49

0001b804 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1b804:	b580      	push	{r7, lr}
   1b806:	b082      	sub	sp, #8
   1b808:	af00      	add	r7, sp, #0
   1b80a:	6078      	str	r0, [r7, #4]
   1b80c:	6039      	str	r1, [r7, #0]
   1b80e:	6839      	ldr	r1, [r7, #0]
   1b810:	687b      	ldr	r3, [r7, #4]
   1b812:	2200      	movs	r2, #0
   1b814:	0018      	movs	r0, r3
   1b816:	4b03      	ldr	r3, [pc, #12]	; (1b824 <xQueueGiveFromISR+0x20>)
   1b818:	4798      	blx	r3
   1b81a:	0003      	movs	r3, r0
   1b81c:	0018      	movs	r0, r3
   1b81e:	46bd      	mov	sp, r7
   1b820:	b002      	add	sp, #8
   1b822:	bd80      	pop	{r7, pc}
   1b824:	0001b829 	.word	0x0001b829

0001b828 <MyWrapper>:
{
   1b828:	b5b0      	push	{r4, r5, r7, lr}
   1b82a:	b08a      	sub	sp, #40	; 0x28
   1b82c:	af00      	add	r7, sp, #0
   1b82e:	60f8      	str	r0, [r7, #12]
   1b830:	60b9      	str	r1, [r7, #8]
   1b832:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b834:	68fb      	ldr	r3, [r7, #12]
   1b836:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1b838:	6a3b      	ldr	r3, [r7, #32]
   1b83a:	2b00      	cmp	r3, #0
   1b83c:	d101      	bne.n	1b842 <MyWrapper+0x1a>
   1b83e:	b672      	cpsid	i
   1b840:	e7fe      	b.n	1b840 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b842:	6a3b      	ldr	r3, [r7, #32]
   1b844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b846:	2b00      	cmp	r3, #0
   1b848:	d001      	beq.n	1b84e <MyWrapper+0x26>
   1b84a:	b672      	cpsid	i
   1b84c:	e7fe      	b.n	1b84c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1b84e:	6a3b      	ldr	r3, [r7, #32]
   1b850:	681b      	ldr	r3, [r3, #0]
   1b852:	2b00      	cmp	r3, #0
   1b854:	d103      	bne.n	1b85e <MyWrapper+0x36>
   1b856:	6a3b      	ldr	r3, [r7, #32]
   1b858:	685b      	ldr	r3, [r3, #4]
   1b85a:	2b00      	cmp	r3, #0
   1b85c:	d101      	bne.n	1b862 <MyWrapper+0x3a>
   1b85e:	2301      	movs	r3, #1
   1b860:	e000      	b.n	1b864 <MyWrapper+0x3c>
   1b862:	2300      	movs	r3, #0
   1b864:	2b00      	cmp	r3, #0
   1b866:	d101      	bne.n	1b86c <MyWrapper+0x44>
   1b868:	b672      	cpsid	i
   1b86a:	e7fe      	b.n	1b86a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b86c:	4b66      	ldr	r3, [pc, #408]	; (1ba08 <MyWrapper+0x1e0>)
   1b86e:	4798      	blx	r3
   1b870:	0003      	movs	r3, r0
   1b872:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b874:	6a3b      	ldr	r3, [r7, #32]
   1b876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b878:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1b87a:	6a3b      	ldr	r3, [r7, #32]
   1b87c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1b87e:	69bb      	ldr	r3, [r7, #24]
   1b880:	429a      	cmp	r2, r3
   1b882:	d800      	bhi.n	1b886 <MyWrapper+0x5e>
   1b884:	e085      	b.n	1b992 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b886:	2317      	movs	r3, #23
   1b888:	18fb      	adds	r3, r7, r3
   1b88a:	6a3a      	ldr	r2, [r7, #32]
   1b88c:	2145      	movs	r1, #69	; 0x45
   1b88e:	5c52      	ldrb	r2, [r2, r1]
   1b890:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b892:	6a3b      	ldr	r3, [r7, #32]
   1b894:	0018      	movs	r0, r3
   1b896:	4b5d      	ldr	r3, [pc, #372]	; (1ba0c <MyWrapper+0x1e4>)
   1b898:	4798      	blx	r3
   1b89a:	0003      	movs	r3, r0
   1b89c:	001a      	movs	r2, r3
   1b89e:	4b5c      	ldr	r3, [pc, #368]	; (1ba10 <MyWrapper+0x1e8>)
   1b8a0:	881b      	ldrh	r3, [r3, #0]
   1b8a2:	4013      	ands	r3, r2
   1b8a4:	b29b      	uxth	r3, r3
   1b8a6:	2b00      	cmp	r3, #0
   1b8a8:	d022      	beq.n	1b8f0 <MyWrapper+0xc8>
   1b8aa:	687b      	ldr	r3, [r7, #4]
   1b8ac:	2b00      	cmp	r3, #0
   1b8ae:	d10b      	bne.n	1b8c8 <MyWrapper+0xa0>
   1b8b0:	6a3b      	ldr	r3, [r7, #32]
   1b8b2:	0018      	movs	r0, r3
   1b8b4:	4b57      	ldr	r3, [pc, #348]	; (1ba14 <MyWrapper+0x1ec>)
   1b8b6:	4798      	blx	r3
   1b8b8:	0003      	movs	r3, r0
   1b8ba:	001a      	movs	r2, r3
   1b8bc:	4b56      	ldr	r3, [pc, #344]	; (1ba18 <MyWrapper+0x1f0>)
   1b8be:	5c9b      	ldrb	r3, [r3, r2]
   1b8c0:	3330      	adds	r3, #48	; 0x30
   1b8c2:	b2db      	uxtb	r3, r3
   1b8c4:	001d      	movs	r5, r3
   1b8c6:	e000      	b.n	1b8ca <MyWrapper+0xa2>
   1b8c8:	2535      	movs	r5, #53	; 0x35
   1b8ca:	6a3b      	ldr	r3, [r7, #32]
   1b8cc:	0018      	movs	r0, r3
   1b8ce:	4b51      	ldr	r3, [pc, #324]	; (1ba14 <MyWrapper+0x1ec>)
   1b8d0:	4798      	blx	r3
   1b8d2:	0003      	movs	r3, r0
   1b8d4:	001a      	movs	r2, r3
   1b8d6:	4b50      	ldr	r3, [pc, #320]	; (1ba18 <MyWrapper+0x1f0>)
   1b8d8:	5c9c      	ldrb	r4, [r3, r2]
   1b8da:	6a3b      	ldr	r3, [r7, #32]
   1b8dc:	0018      	movs	r0, r3
   1b8de:	4b4f      	ldr	r3, [pc, #316]	; (1ba1c <MyWrapper+0x1f4>)
   1b8e0:	4798      	blx	r3
   1b8e2:	0003      	movs	r3, r0
   1b8e4:	b2db      	uxtb	r3, r3
   1b8e6:	001a      	movs	r2, r3
   1b8e8:	0021      	movs	r1, r4
   1b8ea:	0028      	movs	r0, r5
   1b8ec:	4b4c      	ldr	r3, [pc, #304]	; (1ba20 <MyWrapper+0x1f8>)
   1b8ee:	4798      	blx	r3
   1b8f0:	6a3b      	ldr	r3, [r7, #32]
   1b8f2:	0018      	movs	r0, r3
   1b8f4:	4b47      	ldr	r3, [pc, #284]	; (1ba14 <MyWrapper+0x1ec>)
   1b8f6:	4798      	blx	r3
   1b8f8:	0003      	movs	r3, r0
   1b8fa:	001a      	movs	r2, r3
   1b8fc:	4b46      	ldr	r3, [pc, #280]	; (1ba18 <MyWrapper+0x1f0>)
   1b8fe:	5c9c      	ldrb	r4, [r3, r2]
   1b900:	6a3b      	ldr	r3, [r7, #32]
   1b902:	0018      	movs	r0, r3
   1b904:	4b45      	ldr	r3, [pc, #276]	; (1ba1c <MyWrapper+0x1f4>)
   1b906:	4798      	blx	r3
   1b908:	0003      	movs	r3, r0
   1b90a:	b2d9      	uxtb	r1, r3
   1b90c:	6a3b      	ldr	r3, [r7, #32]
   1b90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b910:	b2db      	uxtb	r3, r3
   1b912:	3301      	adds	r3, #1
   1b914:	b2db      	uxtb	r3, r3
   1b916:	001a      	movs	r2, r3
   1b918:	0020      	movs	r0, r4
   1b91a:	4b42      	ldr	r3, [pc, #264]	; (1ba24 <MyWrapper+0x1fc>)
   1b91c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b91e:	69bb      	ldr	r3, [r7, #24]
   1b920:	1c5a      	adds	r2, r3, #1
   1b922:	6a3b      	ldr	r3, [r7, #32]
   1b924:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b926:	2317      	movs	r3, #23
   1b928:	18fb      	adds	r3, r7, r3
   1b92a:	781b      	ldrb	r3, [r3, #0]
   1b92c:	b25b      	sxtb	r3, r3
   1b92e:	3301      	adds	r3, #1
   1b930:	d123      	bne.n	1b97a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b932:	6a3b      	ldr	r3, [r7, #32]
   1b934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b936:	2b00      	cmp	r3, #0
   1b938:	d00d      	beq.n	1b956 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b93a:	6a3b      	ldr	r3, [r7, #32]
   1b93c:	2100      	movs	r1, #0
   1b93e:	0018      	movs	r0, r3
   1b940:	4b39      	ldr	r3, [pc, #228]	; (1ba28 <MyWrapper+0x200>)
   1b942:	4798      	blx	r3
   1b944:	1e03      	subs	r3, r0, #0
   1b946:	d021      	beq.n	1b98c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b948:	68bb      	ldr	r3, [r7, #8]
   1b94a:	2b00      	cmp	r3, #0
   1b94c:	d01e      	beq.n	1b98c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b94e:	68bb      	ldr	r3, [r7, #8]
   1b950:	2201      	movs	r2, #1
   1b952:	601a      	str	r2, [r3, #0]
   1b954:	e01a      	b.n	1b98c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b956:	6a3b      	ldr	r3, [r7, #32]
   1b958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b95a:	2b00      	cmp	r3, #0
   1b95c:	d016      	beq.n	1b98c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b95e:	6a3b      	ldr	r3, [r7, #32]
   1b960:	3324      	adds	r3, #36	; 0x24
   1b962:	0018      	movs	r0, r3
   1b964:	4b31      	ldr	r3, [pc, #196]	; (1ba2c <MyWrapper+0x204>)
   1b966:	4798      	blx	r3
   1b968:	1e03      	subs	r3, r0, #0
   1b96a:	d00f      	beq.n	1b98c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b96c:	68bb      	ldr	r3, [r7, #8]
   1b96e:	2b00      	cmp	r3, #0
   1b970:	d00c      	beq.n	1b98c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b972:	68bb      	ldr	r3, [r7, #8]
   1b974:	2201      	movs	r2, #1
   1b976:	601a      	str	r2, [r3, #0]
   1b978:	e008      	b.n	1b98c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b97a:	2317      	movs	r3, #23
   1b97c:	18fb      	adds	r3, r7, r3
   1b97e:	781b      	ldrb	r3, [r3, #0]
   1b980:	3301      	adds	r3, #1
   1b982:	b2db      	uxtb	r3, r3
   1b984:	b259      	sxtb	r1, r3
   1b986:	6a3b      	ldr	r3, [r7, #32]
   1b988:	2245      	movs	r2, #69	; 0x45
   1b98a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b98c:	2301      	movs	r3, #1
   1b98e:	627b      	str	r3, [r7, #36]	; 0x24
   1b990:	e030      	b.n	1b9f4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b992:	6a3b      	ldr	r3, [r7, #32]
   1b994:	0018      	movs	r0, r3
   1b996:	4b1d      	ldr	r3, [pc, #116]	; (1ba0c <MyWrapper+0x1e4>)
   1b998:	4798      	blx	r3
   1b99a:	0003      	movs	r3, r0
   1b99c:	001a      	movs	r2, r3
   1b99e:	4b1c      	ldr	r3, [pc, #112]	; (1ba10 <MyWrapper+0x1e8>)
   1b9a0:	881b      	ldrh	r3, [r3, #0]
   1b9a2:	4013      	ands	r3, r2
   1b9a4:	b29b      	uxth	r3, r3
   1b9a6:	2b00      	cmp	r3, #0
   1b9a8:	d022      	beq.n	1b9f0 <MyWrapper+0x1c8>
   1b9aa:	687b      	ldr	r3, [r7, #4]
   1b9ac:	2b00      	cmp	r3, #0
   1b9ae:	d10b      	bne.n	1b9c8 <MyWrapper+0x1a0>
   1b9b0:	6a3b      	ldr	r3, [r7, #32]
   1b9b2:	0018      	movs	r0, r3
   1b9b4:	4b17      	ldr	r3, [pc, #92]	; (1ba14 <MyWrapper+0x1ec>)
   1b9b6:	4798      	blx	r3
   1b9b8:	0003      	movs	r3, r0
   1b9ba:	001a      	movs	r2, r3
   1b9bc:	4b16      	ldr	r3, [pc, #88]	; (1ba18 <MyWrapper+0x1f0>)
   1b9be:	5c9b      	ldrb	r3, [r3, r2]
   1b9c0:	3358      	adds	r3, #88	; 0x58
   1b9c2:	b2db      	uxtb	r3, r3
   1b9c4:	001d      	movs	r5, r3
   1b9c6:	e000      	b.n	1b9ca <MyWrapper+0x1a2>
   1b9c8:	255d      	movs	r5, #93	; 0x5d
   1b9ca:	6a3b      	ldr	r3, [r7, #32]
   1b9cc:	0018      	movs	r0, r3
   1b9ce:	4b11      	ldr	r3, [pc, #68]	; (1ba14 <MyWrapper+0x1ec>)
   1b9d0:	4798      	blx	r3
   1b9d2:	0003      	movs	r3, r0
   1b9d4:	001a      	movs	r2, r3
   1b9d6:	4b10      	ldr	r3, [pc, #64]	; (1ba18 <MyWrapper+0x1f0>)
   1b9d8:	5c9c      	ldrb	r4, [r3, r2]
   1b9da:	6a3b      	ldr	r3, [r7, #32]
   1b9dc:	0018      	movs	r0, r3
   1b9de:	4b0f      	ldr	r3, [pc, #60]	; (1ba1c <MyWrapper+0x1f4>)
   1b9e0:	4798      	blx	r3
   1b9e2:	0003      	movs	r3, r0
   1b9e4:	b2db      	uxtb	r3, r3
   1b9e6:	001a      	movs	r2, r3
   1b9e8:	0021      	movs	r1, r4
   1b9ea:	0028      	movs	r0, r5
   1b9ec:	4b0c      	ldr	r3, [pc, #48]	; (1ba20 <MyWrapper+0x1f8>)
   1b9ee:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1b9f0:	2300      	movs	r3, #0
   1b9f2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1b9f4:	69fb      	ldr	r3, [r7, #28]
   1b9f6:	0018      	movs	r0, r3
   1b9f8:	4b0d      	ldr	r3, [pc, #52]	; (1ba30 <MyWrapper+0x208>)
   1b9fa:	4798      	blx	r3

	return xReturn;
   1b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b9fe:	0018      	movs	r0, r3
   1ba00:	46bd      	mov	sp, r7
   1ba02:	b00a      	add	sp, #40	; 0x28
   1ba04:	bdb0      	pop	{r4, r5, r7, pc}
   1ba06:	46c0      	nop			; (mov r8, r8)
   1ba08:	0001ac3d 	.word	0x0001ac3d
   1ba0c:	00018c9d 	.word	0x00018c9d
   1ba10:	20000110 	.word	0x20000110
   1ba14:	00018b9d 	.word	0x00018b9d
   1ba18:	20000104 	.word	0x20000104
   1ba1c:	00018c7d 	.word	0x00018c7d
   1ba20:	000195d5 	.word	0x000195d5
   1ba24:	00019c31 	.word	0x00019c31
   1ba28:	0001c6b9 	.word	0x0001c6b9
   1ba2c:	0001d479 	.word	0x0001d479
   1ba30:	0001ac49 	.word	0x0001ac49

0001ba34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1ba34:	b5b0      	push	{r4, r5, r7, lr}
   1ba36:	b08a      	sub	sp, #40	; 0x28
   1ba38:	af00      	add	r7, sp, #0
   1ba3a:	60f8      	str	r0, [r7, #12]
   1ba3c:	60b9      	str	r1, [r7, #8]
   1ba3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1ba40:	2300      	movs	r3, #0
   1ba42:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ba44:	68fb      	ldr	r3, [r7, #12]
   1ba46:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1ba48:	6a3b      	ldr	r3, [r7, #32]
   1ba4a:	2b00      	cmp	r3, #0
   1ba4c:	d101      	bne.n	1ba52 <xQueueReceive+0x1e>
   1ba4e:	b672      	cpsid	i
   1ba50:	e7fe      	b.n	1ba50 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ba52:	68bb      	ldr	r3, [r7, #8]
   1ba54:	2b00      	cmp	r3, #0
   1ba56:	d103      	bne.n	1ba60 <xQueueReceive+0x2c>
   1ba58:	6a3b      	ldr	r3, [r7, #32]
   1ba5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ba5c:	2b00      	cmp	r3, #0
   1ba5e:	d101      	bne.n	1ba64 <xQueueReceive+0x30>
   1ba60:	2301      	movs	r3, #1
   1ba62:	e000      	b.n	1ba66 <xQueueReceive+0x32>
   1ba64:	2300      	movs	r3, #0
   1ba66:	2b00      	cmp	r3, #0
   1ba68:	d101      	bne.n	1ba6e <xQueueReceive+0x3a>
   1ba6a:	b672      	cpsid	i
   1ba6c:	e7fe      	b.n	1ba6c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ba6e:	4bbf      	ldr	r3, [pc, #764]	; (1bd6c <xQueueReceive+0x338>)
   1ba70:	4798      	blx	r3
   1ba72:	1e03      	subs	r3, r0, #0
   1ba74:	d102      	bne.n	1ba7c <xQueueReceive+0x48>
   1ba76:	687b      	ldr	r3, [r7, #4]
   1ba78:	2b00      	cmp	r3, #0
   1ba7a:	d101      	bne.n	1ba80 <xQueueReceive+0x4c>
   1ba7c:	2301      	movs	r3, #1
   1ba7e:	e000      	b.n	1ba82 <xQueueReceive+0x4e>
   1ba80:	2300      	movs	r3, #0
   1ba82:	2b00      	cmp	r3, #0
   1ba84:	d101      	bne.n	1ba8a <xQueueReceive+0x56>
   1ba86:	b672      	cpsid	i
   1ba88:	e7fe      	b.n	1ba88 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1ba8a:	4bb9      	ldr	r3, [pc, #740]	; (1bd70 <xQueueReceive+0x33c>)
   1ba8c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1ba8e:	6a3b      	ldr	r3, [r7, #32]
   1ba90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ba92:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1ba94:	69fb      	ldr	r3, [r7, #28]
   1ba96:	2b00      	cmp	r3, #0
   1ba98:	d100      	bne.n	1ba9c <xQueueReceive+0x68>
   1ba9a:	e07d      	b.n	1bb98 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1ba9c:	68ba      	ldr	r2, [r7, #8]
   1ba9e:	6a3b      	ldr	r3, [r7, #32]
   1baa0:	0011      	movs	r1, r2
   1baa2:	0018      	movs	r0, r3
   1baa4:	4bb3      	ldr	r3, [pc, #716]	; (1bd74 <xQueueReceive+0x340>)
   1baa6:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1baa8:	4bb3      	ldr	r3, [pc, #716]	; (1bd78 <xQueueReceive+0x344>)
   1baaa:	4798      	blx	r3
   1baac:	0003      	movs	r3, r0
   1baae:	0018      	movs	r0, r3
   1bab0:	4bb2      	ldr	r3, [pc, #712]	; (1bd7c <xQueueReceive+0x348>)
   1bab2:	4798      	blx	r3
   1bab4:	0003      	movs	r3, r0
   1bab6:	001a      	movs	r2, r3
   1bab8:	4bb1      	ldr	r3, [pc, #708]	; (1bd80 <xQueueReceive+0x34c>)
   1baba:	881b      	ldrh	r3, [r3, #0]
   1babc:	4013      	ands	r3, r2
   1babe:	b29b      	uxth	r3, r3
   1bac0:	2b00      	cmp	r3, #0
   1bac2:	d029      	beq.n	1bb18 <xQueueReceive+0xe4>
   1bac4:	6a3b      	ldr	r3, [r7, #32]
   1bac6:	0018      	movs	r0, r3
   1bac8:	4bae      	ldr	r3, [pc, #696]	; (1bd84 <xQueueReceive+0x350>)
   1baca:	4798      	blx	r3
   1bacc:	0003      	movs	r3, r0
   1bace:	001a      	movs	r2, r3
   1bad0:	4bab      	ldr	r3, [pc, #684]	; (1bd80 <xQueueReceive+0x34c>)
   1bad2:	881b      	ldrh	r3, [r3, #0]
   1bad4:	4013      	ands	r3, r2
   1bad6:	b29b      	uxth	r3, r3
   1bad8:	2b00      	cmp	r3, #0
   1bada:	d01d      	beq.n	1bb18 <xQueueReceive+0xe4>
   1badc:	6a3b      	ldr	r3, [r7, #32]
   1bade:	0018      	movs	r0, r3
   1bae0:	4ba9      	ldr	r3, [pc, #676]	; (1bd88 <xQueueReceive+0x354>)
   1bae2:	4798      	blx	r3
   1bae4:	0003      	movs	r3, r0
   1bae6:	001a      	movs	r2, r3
   1bae8:	4ba8      	ldr	r3, [pc, #672]	; (1bd8c <xQueueReceive+0x358>)
   1baea:	5c9b      	ldrb	r3, [r3, r2]
   1baec:	3328      	adds	r3, #40	; 0x28
   1baee:	b2db      	uxtb	r3, r3
   1baf0:	001d      	movs	r5, r3
   1baf2:	6a3b      	ldr	r3, [r7, #32]
   1baf4:	0018      	movs	r0, r3
   1baf6:	4ba4      	ldr	r3, [pc, #656]	; (1bd88 <xQueueReceive+0x354>)
   1baf8:	4798      	blx	r3
   1bafa:	0003      	movs	r3, r0
   1bafc:	001a      	movs	r2, r3
   1bafe:	4ba3      	ldr	r3, [pc, #652]	; (1bd8c <xQueueReceive+0x358>)
   1bb00:	5c9c      	ldrb	r4, [r3, r2]
   1bb02:	6a3b      	ldr	r3, [r7, #32]
   1bb04:	0018      	movs	r0, r3
   1bb06:	4ba2      	ldr	r3, [pc, #648]	; (1bd90 <xQueueReceive+0x35c>)
   1bb08:	4798      	blx	r3
   1bb0a:	0003      	movs	r3, r0
   1bb0c:	b2db      	uxtb	r3, r3
   1bb0e:	001a      	movs	r2, r3
   1bb10:	0021      	movs	r1, r4
   1bb12:	0028      	movs	r0, r5
   1bb14:	4b9f      	ldr	r3, [pc, #636]	; (1bd94 <xQueueReceive+0x360>)
   1bb16:	4798      	blx	r3
   1bb18:	6a3b      	ldr	r3, [r7, #32]
   1bb1a:	0018      	movs	r0, r3
   1bb1c:	4b9a      	ldr	r3, [pc, #616]	; (1bd88 <xQueueReceive+0x354>)
   1bb1e:	4798      	blx	r3
   1bb20:	0003      	movs	r3, r0
   1bb22:	001a      	movs	r2, r3
   1bb24:	4b99      	ldr	r3, [pc, #612]	; (1bd8c <xQueueReceive+0x358>)
   1bb26:	5c9c      	ldrb	r4, [r3, r2]
   1bb28:	6a3b      	ldr	r3, [r7, #32]
   1bb2a:	0018      	movs	r0, r3
   1bb2c:	4b98      	ldr	r3, [pc, #608]	; (1bd90 <xQueueReceive+0x35c>)
   1bb2e:	4798      	blx	r3
   1bb30:	0003      	movs	r3, r0
   1bb32:	b2dd      	uxtb	r5, r3
   1bb34:	6a3b      	ldr	r3, [r7, #32]
   1bb36:	0018      	movs	r0, r3
   1bb38:	4b93      	ldr	r3, [pc, #588]	; (1bd88 <xQueueReceive+0x354>)
   1bb3a:	4798      	blx	r3
   1bb3c:	0003      	movs	r3, r0
   1bb3e:	001a      	movs	r2, r3
   1bb40:	4b92      	ldr	r3, [pc, #584]	; (1bd8c <xQueueReceive+0x358>)
   1bb42:	5c9b      	ldrb	r3, [r3, r2]
   1bb44:	2b02      	cmp	r3, #2
   1bb46:	d108      	bne.n	1bb5a <xQueueReceive+0x126>
   1bb48:	4b8b      	ldr	r3, [pc, #556]	; (1bd78 <xQueueReceive+0x344>)
   1bb4a:	4798      	blx	r3
   1bb4c:	0003      	movs	r3, r0
   1bb4e:	0018      	movs	r0, r3
   1bb50:	4b91      	ldr	r3, [pc, #580]	; (1bd98 <xQueueReceive+0x364>)
   1bb52:	4798      	blx	r3
   1bb54:	0003      	movs	r3, r0
   1bb56:	b2db      	uxtb	r3, r3
   1bb58:	e004      	b.n	1bb64 <xQueueReceive+0x130>
   1bb5a:	6a3b      	ldr	r3, [r7, #32]
   1bb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bb5e:	b2db      	uxtb	r3, r3
   1bb60:	3b01      	subs	r3, #1
   1bb62:	b2db      	uxtb	r3, r3
   1bb64:	001a      	movs	r2, r3
   1bb66:	0029      	movs	r1, r5
   1bb68:	0020      	movs	r0, r4
   1bb6a:	4b8c      	ldr	r3, [pc, #560]	; (1bd9c <xQueueReceive+0x368>)
   1bb6c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1bb6e:	69fb      	ldr	r3, [r7, #28]
   1bb70:	1e5a      	subs	r2, r3, #1
   1bb72:	6a3b      	ldr	r3, [r7, #32]
   1bb74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bb76:	6a3b      	ldr	r3, [r7, #32]
   1bb78:	691b      	ldr	r3, [r3, #16]
   1bb7a:	2b00      	cmp	r3, #0
   1bb7c:	d008      	beq.n	1bb90 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bb7e:	6a3b      	ldr	r3, [r7, #32]
   1bb80:	3310      	adds	r3, #16
   1bb82:	0018      	movs	r0, r3
   1bb84:	4b86      	ldr	r3, [pc, #536]	; (1bda0 <xQueueReceive+0x36c>)
   1bb86:	4798      	blx	r3
   1bb88:	1e03      	subs	r3, r0, #0
   1bb8a:	d001      	beq.n	1bb90 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1bb8c:	4b85      	ldr	r3, [pc, #532]	; (1bda4 <xQueueReceive+0x370>)
   1bb8e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1bb90:	4b85      	ldr	r3, [pc, #532]	; (1bda8 <xQueueReceive+0x374>)
   1bb92:	4798      	blx	r3
				return pdPASS;
   1bb94:	2301      	movs	r3, #1
   1bb96:	e15f      	b.n	1be58 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1bb98:	687b      	ldr	r3, [r7, #4]
   1bb9a:	2b00      	cmp	r3, #0
   1bb9c:	d13b      	bne.n	1bc16 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1bb9e:	4b82      	ldr	r3, [pc, #520]	; (1bda8 <xQueueReceive+0x374>)
   1bba0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bba2:	4b75      	ldr	r3, [pc, #468]	; (1bd78 <xQueueReceive+0x344>)
   1bba4:	4798      	blx	r3
   1bba6:	0003      	movs	r3, r0
   1bba8:	0018      	movs	r0, r3
   1bbaa:	4b74      	ldr	r3, [pc, #464]	; (1bd7c <xQueueReceive+0x348>)
   1bbac:	4798      	blx	r3
   1bbae:	0003      	movs	r3, r0
   1bbb0:	001a      	movs	r2, r3
   1bbb2:	4b73      	ldr	r3, [pc, #460]	; (1bd80 <xQueueReceive+0x34c>)
   1bbb4:	881b      	ldrh	r3, [r3, #0]
   1bbb6:	4013      	ands	r3, r2
   1bbb8:	b29b      	uxth	r3, r3
   1bbba:	2b00      	cmp	r3, #0
   1bbbc:	d029      	beq.n	1bc12 <xQueueReceive+0x1de>
   1bbbe:	6a3b      	ldr	r3, [r7, #32]
   1bbc0:	0018      	movs	r0, r3
   1bbc2:	4b70      	ldr	r3, [pc, #448]	; (1bd84 <xQueueReceive+0x350>)
   1bbc4:	4798      	blx	r3
   1bbc6:	0003      	movs	r3, r0
   1bbc8:	001a      	movs	r2, r3
   1bbca:	4b6d      	ldr	r3, [pc, #436]	; (1bd80 <xQueueReceive+0x34c>)
   1bbcc:	881b      	ldrh	r3, [r3, #0]
   1bbce:	4013      	ands	r3, r2
   1bbd0:	b29b      	uxth	r3, r3
   1bbd2:	2b00      	cmp	r3, #0
   1bbd4:	d01d      	beq.n	1bc12 <xQueueReceive+0x1de>
   1bbd6:	6a3b      	ldr	r3, [r7, #32]
   1bbd8:	0018      	movs	r0, r3
   1bbda:	4b6b      	ldr	r3, [pc, #428]	; (1bd88 <xQueueReceive+0x354>)
   1bbdc:	4798      	blx	r3
   1bbde:	0003      	movs	r3, r0
   1bbe0:	001a      	movs	r2, r3
   1bbe2:	4b6a      	ldr	r3, [pc, #424]	; (1bd8c <xQueueReceive+0x358>)
   1bbe4:	5c9b      	ldrb	r3, [r3, r2]
   1bbe6:	3350      	adds	r3, #80	; 0x50
   1bbe8:	b2db      	uxtb	r3, r3
   1bbea:	001d      	movs	r5, r3
   1bbec:	6a3b      	ldr	r3, [r7, #32]
   1bbee:	0018      	movs	r0, r3
   1bbf0:	4b65      	ldr	r3, [pc, #404]	; (1bd88 <xQueueReceive+0x354>)
   1bbf2:	4798      	blx	r3
   1bbf4:	0003      	movs	r3, r0
   1bbf6:	001a      	movs	r2, r3
   1bbf8:	4b64      	ldr	r3, [pc, #400]	; (1bd8c <xQueueReceive+0x358>)
   1bbfa:	5c9c      	ldrb	r4, [r3, r2]
   1bbfc:	6a3b      	ldr	r3, [r7, #32]
   1bbfe:	0018      	movs	r0, r3
   1bc00:	4b63      	ldr	r3, [pc, #396]	; (1bd90 <xQueueReceive+0x35c>)
   1bc02:	4798      	blx	r3
   1bc04:	0003      	movs	r3, r0
   1bc06:	b2db      	uxtb	r3, r3
   1bc08:	001a      	movs	r2, r3
   1bc0a:	0021      	movs	r1, r4
   1bc0c:	0028      	movs	r0, r5
   1bc0e:	4b61      	ldr	r3, [pc, #388]	; (1bd94 <xQueueReceive+0x360>)
   1bc10:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1bc12:	2300      	movs	r3, #0
   1bc14:	e120      	b.n	1be58 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1bc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bc18:	2b00      	cmp	r3, #0
   1bc1a:	d106      	bne.n	1bc2a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1bc1c:	2314      	movs	r3, #20
   1bc1e:	18fb      	adds	r3, r7, r3
   1bc20:	0018      	movs	r0, r3
   1bc22:	4b62      	ldr	r3, [pc, #392]	; (1bdac <xQueueReceive+0x378>)
   1bc24:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1bc26:	2301      	movs	r3, #1
   1bc28:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1bc2a:	4b5f      	ldr	r3, [pc, #380]	; (1bda8 <xQueueReceive+0x374>)
   1bc2c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1bc2e:	4b60      	ldr	r3, [pc, #384]	; (1bdb0 <xQueueReceive+0x37c>)
   1bc30:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1bc32:	4b4f      	ldr	r3, [pc, #316]	; (1bd70 <xQueueReceive+0x33c>)
   1bc34:	4798      	blx	r3
   1bc36:	6a3b      	ldr	r3, [r7, #32]
   1bc38:	2244      	movs	r2, #68	; 0x44
   1bc3a:	5c9b      	ldrb	r3, [r3, r2]
   1bc3c:	b25b      	sxtb	r3, r3
   1bc3e:	3301      	adds	r3, #1
   1bc40:	d103      	bne.n	1bc4a <xQueueReceive+0x216>
   1bc42:	6a3b      	ldr	r3, [r7, #32]
   1bc44:	2244      	movs	r2, #68	; 0x44
   1bc46:	2100      	movs	r1, #0
   1bc48:	5499      	strb	r1, [r3, r2]
   1bc4a:	6a3b      	ldr	r3, [r7, #32]
   1bc4c:	2245      	movs	r2, #69	; 0x45
   1bc4e:	5c9b      	ldrb	r3, [r3, r2]
   1bc50:	b25b      	sxtb	r3, r3
   1bc52:	3301      	adds	r3, #1
   1bc54:	d103      	bne.n	1bc5e <xQueueReceive+0x22a>
   1bc56:	6a3b      	ldr	r3, [r7, #32]
   1bc58:	2245      	movs	r2, #69	; 0x45
   1bc5a:	2100      	movs	r1, #0
   1bc5c:	5499      	strb	r1, [r3, r2]
   1bc5e:	4b52      	ldr	r3, [pc, #328]	; (1bda8 <xQueueReceive+0x374>)
   1bc60:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1bc62:	1d3a      	adds	r2, r7, #4
   1bc64:	2314      	movs	r3, #20
   1bc66:	18fb      	adds	r3, r7, r3
   1bc68:	0011      	movs	r1, r2
   1bc6a:	0018      	movs	r0, r3
   1bc6c:	4b51      	ldr	r3, [pc, #324]	; (1bdb4 <xQueueReceive+0x380>)
   1bc6e:	4798      	blx	r3
   1bc70:	1e03      	subs	r3, r0, #0
   1bc72:	d000      	beq.n	1bc76 <xQueueReceive+0x242>
   1bc74:	e0aa      	b.n	1bdcc <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1bc76:	6a3b      	ldr	r3, [r7, #32]
   1bc78:	0018      	movs	r0, r3
   1bc7a:	4b4f      	ldr	r3, [pc, #316]	; (1bdb8 <xQueueReceive+0x384>)
   1bc7c:	4798      	blx	r3
   1bc7e:	1e03      	subs	r3, r0, #0
   1bc80:	d06d      	beq.n	1bd5e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1bc82:	4b3d      	ldr	r3, [pc, #244]	; (1bd78 <xQueueReceive+0x344>)
   1bc84:	4798      	blx	r3
   1bc86:	0003      	movs	r3, r0
   1bc88:	0018      	movs	r0, r3
   1bc8a:	4b3c      	ldr	r3, [pc, #240]	; (1bd7c <xQueueReceive+0x348>)
   1bc8c:	4798      	blx	r3
   1bc8e:	0003      	movs	r3, r0
   1bc90:	001a      	movs	r2, r3
   1bc92:	4b3b      	ldr	r3, [pc, #236]	; (1bd80 <xQueueReceive+0x34c>)
   1bc94:	881b      	ldrh	r3, [r3, #0]
   1bc96:	4013      	ands	r3, r2
   1bc98:	b29b      	uxth	r3, r3
   1bc9a:	2b00      	cmp	r3, #0
   1bc9c:	d029      	beq.n	1bcf2 <xQueueReceive+0x2be>
   1bc9e:	6a3b      	ldr	r3, [r7, #32]
   1bca0:	0018      	movs	r0, r3
   1bca2:	4b38      	ldr	r3, [pc, #224]	; (1bd84 <xQueueReceive+0x350>)
   1bca4:	4798      	blx	r3
   1bca6:	0003      	movs	r3, r0
   1bca8:	001a      	movs	r2, r3
   1bcaa:	4b35      	ldr	r3, [pc, #212]	; (1bd80 <xQueueReceive+0x34c>)
   1bcac:	881b      	ldrh	r3, [r3, #0]
   1bcae:	4013      	ands	r3, r2
   1bcb0:	b29b      	uxth	r3, r3
   1bcb2:	2b00      	cmp	r3, #0
   1bcb4:	d01d      	beq.n	1bcf2 <xQueueReceive+0x2be>
   1bcb6:	6a3b      	ldr	r3, [r7, #32]
   1bcb8:	0018      	movs	r0, r3
   1bcba:	4b33      	ldr	r3, [pc, #204]	; (1bd88 <xQueueReceive+0x354>)
   1bcbc:	4798      	blx	r3
   1bcbe:	0003      	movs	r3, r0
   1bcc0:	001a      	movs	r2, r3
   1bcc2:	4b32      	ldr	r3, [pc, #200]	; (1bd8c <xQueueReceive+0x358>)
   1bcc4:	5c9b      	ldrb	r3, [r3, r2]
   1bcc6:	3368      	adds	r3, #104	; 0x68
   1bcc8:	b2db      	uxtb	r3, r3
   1bcca:	001d      	movs	r5, r3
   1bccc:	6a3b      	ldr	r3, [r7, #32]
   1bcce:	0018      	movs	r0, r3
   1bcd0:	4b2d      	ldr	r3, [pc, #180]	; (1bd88 <xQueueReceive+0x354>)
   1bcd2:	4798      	blx	r3
   1bcd4:	0003      	movs	r3, r0
   1bcd6:	001a      	movs	r2, r3
   1bcd8:	4b2c      	ldr	r3, [pc, #176]	; (1bd8c <xQueueReceive+0x358>)
   1bcda:	5c9c      	ldrb	r4, [r3, r2]
   1bcdc:	6a3b      	ldr	r3, [r7, #32]
   1bcde:	0018      	movs	r0, r3
   1bce0:	4b2b      	ldr	r3, [pc, #172]	; (1bd90 <xQueueReceive+0x35c>)
   1bce2:	4798      	blx	r3
   1bce4:	0003      	movs	r3, r0
   1bce6:	b2db      	uxtb	r3, r3
   1bce8:	001a      	movs	r2, r3
   1bcea:	0021      	movs	r1, r4
   1bcec:	0028      	movs	r0, r5
   1bcee:	4b29      	ldr	r3, [pc, #164]	; (1bd94 <xQueueReceive+0x360>)
   1bcf0:	4798      	blx	r3
   1bcf2:	6a3b      	ldr	r3, [r7, #32]
   1bcf4:	0018      	movs	r0, r3
   1bcf6:	4b24      	ldr	r3, [pc, #144]	; (1bd88 <xQueueReceive+0x354>)
   1bcf8:	4798      	blx	r3
   1bcfa:	0003      	movs	r3, r0
   1bcfc:	001a      	movs	r2, r3
   1bcfe:	4b23      	ldr	r3, [pc, #140]	; (1bd8c <xQueueReceive+0x358>)
   1bd00:	5c9b      	ldrb	r3, [r3, r2]
   1bd02:	2b02      	cmp	r3, #2
   1bd04:	d018      	beq.n	1bd38 <xQueueReceive+0x304>
   1bd06:	4b1c      	ldr	r3, [pc, #112]	; (1bd78 <xQueueReceive+0x344>)
   1bd08:	4798      	blx	r3
   1bd0a:	0003      	movs	r3, r0
   1bd0c:	0018      	movs	r0, r3
   1bd0e:	4b1b      	ldr	r3, [pc, #108]	; (1bd7c <xQueueReceive+0x348>)
   1bd10:	4798      	blx	r3
   1bd12:	0003      	movs	r3, r0
   1bd14:	001a      	movs	r2, r3
   1bd16:	4b1a      	ldr	r3, [pc, #104]	; (1bd80 <xQueueReceive+0x34c>)
   1bd18:	881b      	ldrh	r3, [r3, #0]
   1bd1a:	4013      	ands	r3, r2
   1bd1c:	b29b      	uxth	r3, r3
   1bd1e:	2b00      	cmp	r3, #0
   1bd20:	d00a      	beq.n	1bd38 <xQueueReceive+0x304>
   1bd22:	4b15      	ldr	r3, [pc, #84]	; (1bd78 <xQueueReceive+0x344>)
   1bd24:	4798      	blx	r3
   1bd26:	0003      	movs	r3, r0
   1bd28:	0018      	movs	r0, r3
   1bd2a:	4b1b      	ldr	r3, [pc, #108]	; (1bd98 <xQueueReceive+0x364>)
   1bd2c:	4798      	blx	r3
   1bd2e:	0003      	movs	r3, r0
   1bd30:	b2db      	uxtb	r3, r3
   1bd32:	0018      	movs	r0, r3
   1bd34:	4b21      	ldr	r3, [pc, #132]	; (1bdbc <xQueueReceive+0x388>)
   1bd36:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1bd38:	6a3b      	ldr	r3, [r7, #32]
   1bd3a:	3324      	adds	r3, #36	; 0x24
   1bd3c:	687a      	ldr	r2, [r7, #4]
   1bd3e:	0011      	movs	r1, r2
   1bd40:	0018      	movs	r0, r3
   1bd42:	4b1f      	ldr	r3, [pc, #124]	; (1bdc0 <xQueueReceive+0x38c>)
   1bd44:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1bd46:	6a3b      	ldr	r3, [r7, #32]
   1bd48:	0018      	movs	r0, r3
   1bd4a:	4b1e      	ldr	r3, [pc, #120]	; (1bdc4 <xQueueReceive+0x390>)
   1bd4c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1bd4e:	4b1e      	ldr	r3, [pc, #120]	; (1bdc8 <xQueueReceive+0x394>)
   1bd50:	4798      	blx	r3
   1bd52:	1e03      	subs	r3, r0, #0
   1bd54:	d000      	beq.n	1bd58 <xQueueReceive+0x324>
   1bd56:	e698      	b.n	1ba8a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1bd58:	4b12      	ldr	r3, [pc, #72]	; (1bda4 <xQueueReceive+0x370>)
   1bd5a:	4798      	blx	r3
   1bd5c:	e695      	b.n	1ba8a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1bd5e:	6a3b      	ldr	r3, [r7, #32]
   1bd60:	0018      	movs	r0, r3
   1bd62:	4b18      	ldr	r3, [pc, #96]	; (1bdc4 <xQueueReceive+0x390>)
   1bd64:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1bd66:	4b18      	ldr	r3, [pc, #96]	; (1bdc8 <xQueueReceive+0x394>)
   1bd68:	4798      	blx	r3
   1bd6a:	e68e      	b.n	1ba8a <xQueueReceive+0x56>
   1bd6c:	0001d909 	.word	0x0001d909
   1bd70:	0001abe9 	.word	0x0001abe9
   1bd74:	0001c495 	.word	0x0001c495
   1bd78:	00018e79 	.word	0x00018e79
   1bd7c:	00018bdd 	.word	0x00018bdd
   1bd80:	20000110 	.word	0x20000110
   1bd84:	00018c9d 	.word	0x00018c9d
   1bd88:	00018b9d 	.word	0x00018b9d
   1bd8c:	20000104 	.word	0x20000104
   1bd90:	00018c7d 	.word	0x00018c7d
   1bd94:	000195d5 	.word	0x000195d5
   1bd98:	00018bbd 	.word	0x00018bbd
   1bd9c:	00019c31 	.word	0x00019c31
   1bda0:	0001d479 	.word	0x0001d479
   1bda4:	0001abd1 	.word	0x0001abd1
   1bda8:	0001ac0d 	.word	0x0001ac0d
   1bdac:	0001d5b9 	.word	0x0001d5b9
   1bdb0:	0001cea1 	.word	0x0001cea1
   1bdb4:	0001d5e1 	.word	0x0001d5e1
   1bdb8:	0001c5d5 	.word	0x0001c5d5
   1bdbc:	00019d6d 	.word	0x00019d6d
   1bdc0:	0001d355 	.word	0x0001d355
   1bdc4:	0001c4e5 	.word	0x0001c4e5
   1bdc8:	0001ceb9 	.word	0x0001ceb9
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1bdcc:	6a3b      	ldr	r3, [r7, #32]
   1bdce:	0018      	movs	r0, r3
   1bdd0:	4b23      	ldr	r3, [pc, #140]	; (1be60 <xQueueReceive+0x42c>)
   1bdd2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1bdd4:	4b23      	ldr	r3, [pc, #140]	; (1be64 <xQueueReceive+0x430>)
   1bdd6:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1bdd8:	6a3b      	ldr	r3, [r7, #32]
   1bdda:	0018      	movs	r0, r3
   1bddc:	4b22      	ldr	r3, [pc, #136]	; (1be68 <xQueueReceive+0x434>)
   1bdde:	4798      	blx	r3
   1bde0:	1e03      	subs	r3, r0, #0
   1bde2:	d100      	bne.n	1bde6 <xQueueReceive+0x3b2>
   1bde4:	e651      	b.n	1ba8a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bde6:	4b21      	ldr	r3, [pc, #132]	; (1be6c <xQueueReceive+0x438>)
   1bde8:	4798      	blx	r3
   1bdea:	0003      	movs	r3, r0
   1bdec:	0018      	movs	r0, r3
   1bdee:	4b20      	ldr	r3, [pc, #128]	; (1be70 <xQueueReceive+0x43c>)
   1bdf0:	4798      	blx	r3
   1bdf2:	0003      	movs	r3, r0
   1bdf4:	001a      	movs	r2, r3
   1bdf6:	4b1f      	ldr	r3, [pc, #124]	; (1be74 <xQueueReceive+0x440>)
   1bdf8:	881b      	ldrh	r3, [r3, #0]
   1bdfa:	4013      	ands	r3, r2
   1bdfc:	b29b      	uxth	r3, r3
   1bdfe:	2b00      	cmp	r3, #0
   1be00:	d029      	beq.n	1be56 <xQueueReceive+0x422>
   1be02:	6a3b      	ldr	r3, [r7, #32]
   1be04:	0018      	movs	r0, r3
   1be06:	4b1c      	ldr	r3, [pc, #112]	; (1be78 <xQueueReceive+0x444>)
   1be08:	4798      	blx	r3
   1be0a:	0003      	movs	r3, r0
   1be0c:	001a      	movs	r2, r3
   1be0e:	4b19      	ldr	r3, [pc, #100]	; (1be74 <xQueueReceive+0x440>)
   1be10:	881b      	ldrh	r3, [r3, #0]
   1be12:	4013      	ands	r3, r2
   1be14:	b29b      	uxth	r3, r3
   1be16:	2b00      	cmp	r3, #0
   1be18:	d01d      	beq.n	1be56 <xQueueReceive+0x422>
   1be1a:	6a3b      	ldr	r3, [r7, #32]
   1be1c:	0018      	movs	r0, r3
   1be1e:	4b17      	ldr	r3, [pc, #92]	; (1be7c <xQueueReceive+0x448>)
   1be20:	4798      	blx	r3
   1be22:	0003      	movs	r3, r0
   1be24:	001a      	movs	r2, r3
   1be26:	4b16      	ldr	r3, [pc, #88]	; (1be80 <xQueueReceive+0x44c>)
   1be28:	5c9b      	ldrb	r3, [r3, r2]
   1be2a:	3350      	adds	r3, #80	; 0x50
   1be2c:	b2db      	uxtb	r3, r3
   1be2e:	001d      	movs	r5, r3
   1be30:	6a3b      	ldr	r3, [r7, #32]
   1be32:	0018      	movs	r0, r3
   1be34:	4b11      	ldr	r3, [pc, #68]	; (1be7c <xQueueReceive+0x448>)
   1be36:	4798      	blx	r3
   1be38:	0003      	movs	r3, r0
   1be3a:	001a      	movs	r2, r3
   1be3c:	4b10      	ldr	r3, [pc, #64]	; (1be80 <xQueueReceive+0x44c>)
   1be3e:	5c9c      	ldrb	r4, [r3, r2]
   1be40:	6a3b      	ldr	r3, [r7, #32]
   1be42:	0018      	movs	r0, r3
   1be44:	4b0f      	ldr	r3, [pc, #60]	; (1be84 <xQueueReceive+0x450>)
   1be46:	4798      	blx	r3
   1be48:	0003      	movs	r3, r0
   1be4a:	b2db      	uxtb	r3, r3
   1be4c:	001a      	movs	r2, r3
   1be4e:	0021      	movs	r1, r4
   1be50:	0028      	movs	r0, r5
   1be52:	4b0d      	ldr	r3, [pc, #52]	; (1be88 <xQueueReceive+0x454>)
   1be54:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1be56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1be58:	0018      	movs	r0, r3
   1be5a:	46bd      	mov	sp, r7
   1be5c:	b00a      	add	sp, #40	; 0x28
   1be5e:	bdb0      	pop	{r4, r5, r7, pc}
   1be60:	0001c4e5 	.word	0x0001c4e5
   1be64:	0001ceb9 	.word	0x0001ceb9
   1be68:	0001c5d5 	.word	0x0001c5d5
   1be6c:	00018e79 	.word	0x00018e79
   1be70:	00018bdd 	.word	0x00018bdd
   1be74:	20000110 	.word	0x20000110
   1be78:	00018c9d 	.word	0x00018c9d
   1be7c:	00018b9d 	.word	0x00018b9d
   1be80:	20000104 	.word	0x20000104
   1be84:	00018c7d 	.word	0x00018c7d
   1be88:	000195d5 	.word	0x000195d5

0001be8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1be8c:	b5b0      	push	{r4, r5, r7, lr}
   1be8e:	b08a      	sub	sp, #40	; 0x28
   1be90:	af00      	add	r7, sp, #0
   1be92:	6078      	str	r0, [r7, #4]
   1be94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1be96:	2300      	movs	r3, #0
   1be98:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1be9a:	687b      	ldr	r3, [r7, #4]
   1be9c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1be9e:	2300      	movs	r3, #0
   1bea0:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1bea2:	69fb      	ldr	r3, [r7, #28]
   1bea4:	2b00      	cmp	r3, #0
   1bea6:	d101      	bne.n	1beac <xQueueSemaphoreTake+0x20>
   1bea8:	b672      	cpsid	i
   1beaa:	e7fe      	b.n	1beaa <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1beac:	69fb      	ldr	r3, [r7, #28]
   1beae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1beb0:	2b00      	cmp	r3, #0
   1beb2:	d001      	beq.n	1beb8 <xQueueSemaphoreTake+0x2c>
   1beb4:	b672      	cpsid	i
   1beb6:	e7fe      	b.n	1beb6 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1beb8:	4bcb      	ldr	r3, [pc, #812]	; (1c1e8 <xQueueSemaphoreTake+0x35c>)
   1beba:	4798      	blx	r3
   1bebc:	1e03      	subs	r3, r0, #0
   1bebe:	d102      	bne.n	1bec6 <xQueueSemaphoreTake+0x3a>
   1bec0:	683b      	ldr	r3, [r7, #0]
   1bec2:	2b00      	cmp	r3, #0
   1bec4:	d101      	bne.n	1beca <xQueueSemaphoreTake+0x3e>
   1bec6:	2301      	movs	r3, #1
   1bec8:	e000      	b.n	1becc <xQueueSemaphoreTake+0x40>
   1beca:	2300      	movs	r3, #0
   1becc:	2b00      	cmp	r3, #0
   1bece:	d101      	bne.n	1bed4 <xQueueSemaphoreTake+0x48>
   1bed0:	b672      	cpsid	i
   1bed2:	e7fe      	b.n	1bed2 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1bed4:	4bc5      	ldr	r3, [pc, #788]	; (1c1ec <xQueueSemaphoreTake+0x360>)
   1bed6:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1bed8:	69fb      	ldr	r3, [r7, #28]
   1beda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bedc:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1bede:	69bb      	ldr	r3, [r7, #24]
   1bee0:	2b00      	cmp	r3, #0
   1bee2:	d100      	bne.n	1bee6 <xQueueSemaphoreTake+0x5a>
   1bee4:	e080      	b.n	1bfe8 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1bee6:	4bc2      	ldr	r3, [pc, #776]	; (1c1f0 <xQueueSemaphoreTake+0x364>)
   1bee8:	4798      	blx	r3
   1beea:	0003      	movs	r3, r0
   1beec:	0018      	movs	r0, r3
   1beee:	4bc1      	ldr	r3, [pc, #772]	; (1c1f4 <xQueueSemaphoreTake+0x368>)
   1bef0:	4798      	blx	r3
   1bef2:	0003      	movs	r3, r0
   1bef4:	001a      	movs	r2, r3
   1bef6:	4bc0      	ldr	r3, [pc, #768]	; (1c1f8 <xQueueSemaphoreTake+0x36c>)
   1bef8:	881b      	ldrh	r3, [r3, #0]
   1befa:	4013      	ands	r3, r2
   1befc:	b29b      	uxth	r3, r3
   1befe:	2b00      	cmp	r3, #0
   1bf00:	d029      	beq.n	1bf56 <xQueueSemaphoreTake+0xca>
   1bf02:	69fb      	ldr	r3, [r7, #28]
   1bf04:	0018      	movs	r0, r3
   1bf06:	4bbd      	ldr	r3, [pc, #756]	; (1c1fc <xQueueSemaphoreTake+0x370>)
   1bf08:	4798      	blx	r3
   1bf0a:	0003      	movs	r3, r0
   1bf0c:	001a      	movs	r2, r3
   1bf0e:	4bba      	ldr	r3, [pc, #744]	; (1c1f8 <xQueueSemaphoreTake+0x36c>)
   1bf10:	881b      	ldrh	r3, [r3, #0]
   1bf12:	4013      	ands	r3, r2
   1bf14:	b29b      	uxth	r3, r3
   1bf16:	2b00      	cmp	r3, #0
   1bf18:	d01d      	beq.n	1bf56 <xQueueSemaphoreTake+0xca>
   1bf1a:	69fb      	ldr	r3, [r7, #28]
   1bf1c:	0018      	movs	r0, r3
   1bf1e:	4bb8      	ldr	r3, [pc, #736]	; (1c200 <xQueueSemaphoreTake+0x374>)
   1bf20:	4798      	blx	r3
   1bf22:	0003      	movs	r3, r0
   1bf24:	001a      	movs	r2, r3
   1bf26:	4bb7      	ldr	r3, [pc, #732]	; (1c204 <xQueueSemaphoreTake+0x378>)
   1bf28:	5c9b      	ldrb	r3, [r3, r2]
   1bf2a:	3328      	adds	r3, #40	; 0x28
   1bf2c:	b2db      	uxtb	r3, r3
   1bf2e:	001d      	movs	r5, r3
   1bf30:	69fb      	ldr	r3, [r7, #28]
   1bf32:	0018      	movs	r0, r3
   1bf34:	4bb2      	ldr	r3, [pc, #712]	; (1c200 <xQueueSemaphoreTake+0x374>)
   1bf36:	4798      	blx	r3
   1bf38:	0003      	movs	r3, r0
   1bf3a:	001a      	movs	r2, r3
   1bf3c:	4bb1      	ldr	r3, [pc, #708]	; (1c204 <xQueueSemaphoreTake+0x378>)
   1bf3e:	5c9c      	ldrb	r4, [r3, r2]
   1bf40:	69fb      	ldr	r3, [r7, #28]
   1bf42:	0018      	movs	r0, r3
   1bf44:	4bb0      	ldr	r3, [pc, #704]	; (1c208 <xQueueSemaphoreTake+0x37c>)
   1bf46:	4798      	blx	r3
   1bf48:	0003      	movs	r3, r0
   1bf4a:	b2db      	uxtb	r3, r3
   1bf4c:	001a      	movs	r2, r3
   1bf4e:	0021      	movs	r1, r4
   1bf50:	0028      	movs	r0, r5
   1bf52:	4bae      	ldr	r3, [pc, #696]	; (1c20c <xQueueSemaphoreTake+0x380>)
   1bf54:	4798      	blx	r3
   1bf56:	69fb      	ldr	r3, [r7, #28]
   1bf58:	0018      	movs	r0, r3
   1bf5a:	4ba9      	ldr	r3, [pc, #676]	; (1c200 <xQueueSemaphoreTake+0x374>)
   1bf5c:	4798      	blx	r3
   1bf5e:	0003      	movs	r3, r0
   1bf60:	001a      	movs	r2, r3
   1bf62:	4ba8      	ldr	r3, [pc, #672]	; (1c204 <xQueueSemaphoreTake+0x378>)
   1bf64:	5c9c      	ldrb	r4, [r3, r2]
   1bf66:	69fb      	ldr	r3, [r7, #28]
   1bf68:	0018      	movs	r0, r3
   1bf6a:	4ba7      	ldr	r3, [pc, #668]	; (1c208 <xQueueSemaphoreTake+0x37c>)
   1bf6c:	4798      	blx	r3
   1bf6e:	0003      	movs	r3, r0
   1bf70:	b2dd      	uxtb	r5, r3
   1bf72:	69fb      	ldr	r3, [r7, #28]
   1bf74:	0018      	movs	r0, r3
   1bf76:	4ba2      	ldr	r3, [pc, #648]	; (1c200 <xQueueSemaphoreTake+0x374>)
   1bf78:	4798      	blx	r3
   1bf7a:	0003      	movs	r3, r0
   1bf7c:	001a      	movs	r2, r3
   1bf7e:	4ba1      	ldr	r3, [pc, #644]	; (1c204 <xQueueSemaphoreTake+0x378>)
   1bf80:	5c9b      	ldrb	r3, [r3, r2]
   1bf82:	2b02      	cmp	r3, #2
   1bf84:	d108      	bne.n	1bf98 <xQueueSemaphoreTake+0x10c>
   1bf86:	4b9a      	ldr	r3, [pc, #616]	; (1c1f0 <xQueueSemaphoreTake+0x364>)
   1bf88:	4798      	blx	r3
   1bf8a:	0003      	movs	r3, r0
   1bf8c:	0018      	movs	r0, r3
   1bf8e:	4ba0      	ldr	r3, [pc, #640]	; (1c210 <xQueueSemaphoreTake+0x384>)
   1bf90:	4798      	blx	r3
   1bf92:	0003      	movs	r3, r0
   1bf94:	b2db      	uxtb	r3, r3
   1bf96:	e004      	b.n	1bfa2 <xQueueSemaphoreTake+0x116>
   1bf98:	69fb      	ldr	r3, [r7, #28]
   1bf9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bf9c:	b2db      	uxtb	r3, r3
   1bf9e:	3b01      	subs	r3, #1
   1bfa0:	b2db      	uxtb	r3, r3
   1bfa2:	001a      	movs	r2, r3
   1bfa4:	0029      	movs	r1, r5
   1bfa6:	0020      	movs	r0, r4
   1bfa8:	4b9a      	ldr	r3, [pc, #616]	; (1c214 <xQueueSemaphoreTake+0x388>)
   1bfaa:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1bfac:	69bb      	ldr	r3, [r7, #24]
   1bfae:	1e5a      	subs	r2, r3, #1
   1bfb0:	69fb      	ldr	r3, [r7, #28]
   1bfb2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1bfb4:	69fb      	ldr	r3, [r7, #28]
   1bfb6:	681b      	ldr	r3, [r3, #0]
   1bfb8:	2b00      	cmp	r3, #0
   1bfba:	d104      	bne.n	1bfc6 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1bfbc:	4b96      	ldr	r3, [pc, #600]	; (1c218 <xQueueSemaphoreTake+0x38c>)
   1bfbe:	4798      	blx	r3
   1bfc0:	0002      	movs	r2, r0
   1bfc2:	69fb      	ldr	r3, [r7, #28]
   1bfc4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bfc6:	69fb      	ldr	r3, [r7, #28]
   1bfc8:	691b      	ldr	r3, [r3, #16]
   1bfca:	2b00      	cmp	r3, #0
   1bfcc:	d008      	beq.n	1bfe0 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bfce:	69fb      	ldr	r3, [r7, #28]
   1bfd0:	3310      	adds	r3, #16
   1bfd2:	0018      	movs	r0, r3
   1bfd4:	4b91      	ldr	r3, [pc, #580]	; (1c21c <xQueueSemaphoreTake+0x390>)
   1bfd6:	4798      	blx	r3
   1bfd8:	1e03      	subs	r3, r0, #0
   1bfda:	d001      	beq.n	1bfe0 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1bfdc:	4b90      	ldr	r3, [pc, #576]	; (1c220 <xQueueSemaphoreTake+0x394>)
   1bfde:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1bfe0:	4b90      	ldr	r3, [pc, #576]	; (1c224 <xQueueSemaphoreTake+0x398>)
   1bfe2:	4798      	blx	r3
				return pdPASS;
   1bfe4:	2301      	movs	r3, #1
   1bfe6:	e18b      	b.n	1c300 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1bfe8:	683b      	ldr	r3, [r7, #0]
   1bfea:	2b00      	cmp	r3, #0
   1bfec:	d140      	bne.n	1c070 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1bfee:	6a3b      	ldr	r3, [r7, #32]
   1bff0:	2b00      	cmp	r3, #0
   1bff2:	d001      	beq.n	1bff8 <xQueueSemaphoreTake+0x16c>
   1bff4:	b672      	cpsid	i
   1bff6:	e7fe      	b.n	1bff6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1bff8:	4b8a      	ldr	r3, [pc, #552]	; (1c224 <xQueueSemaphoreTake+0x398>)
   1bffa:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bffc:	4b7c      	ldr	r3, [pc, #496]	; (1c1f0 <xQueueSemaphoreTake+0x364>)
   1bffe:	4798      	blx	r3
   1c000:	0003      	movs	r3, r0
   1c002:	0018      	movs	r0, r3
   1c004:	4b7b      	ldr	r3, [pc, #492]	; (1c1f4 <xQueueSemaphoreTake+0x368>)
   1c006:	4798      	blx	r3
   1c008:	0003      	movs	r3, r0
   1c00a:	001a      	movs	r2, r3
   1c00c:	4b7a      	ldr	r3, [pc, #488]	; (1c1f8 <xQueueSemaphoreTake+0x36c>)
   1c00e:	881b      	ldrh	r3, [r3, #0]
   1c010:	4013      	ands	r3, r2
   1c012:	b29b      	uxth	r3, r3
   1c014:	2b00      	cmp	r3, #0
   1c016:	d029      	beq.n	1c06c <xQueueSemaphoreTake+0x1e0>
   1c018:	69fb      	ldr	r3, [r7, #28]
   1c01a:	0018      	movs	r0, r3
   1c01c:	4b77      	ldr	r3, [pc, #476]	; (1c1fc <xQueueSemaphoreTake+0x370>)
   1c01e:	4798      	blx	r3
   1c020:	0003      	movs	r3, r0
   1c022:	001a      	movs	r2, r3
   1c024:	4b74      	ldr	r3, [pc, #464]	; (1c1f8 <xQueueSemaphoreTake+0x36c>)
   1c026:	881b      	ldrh	r3, [r3, #0]
   1c028:	4013      	ands	r3, r2
   1c02a:	b29b      	uxth	r3, r3
   1c02c:	2b00      	cmp	r3, #0
   1c02e:	d01d      	beq.n	1c06c <xQueueSemaphoreTake+0x1e0>
   1c030:	69fb      	ldr	r3, [r7, #28]
   1c032:	0018      	movs	r0, r3
   1c034:	4b72      	ldr	r3, [pc, #456]	; (1c200 <xQueueSemaphoreTake+0x374>)
   1c036:	4798      	blx	r3
   1c038:	0003      	movs	r3, r0
   1c03a:	001a      	movs	r2, r3
   1c03c:	4b71      	ldr	r3, [pc, #452]	; (1c204 <xQueueSemaphoreTake+0x378>)
   1c03e:	5c9b      	ldrb	r3, [r3, r2]
   1c040:	3350      	adds	r3, #80	; 0x50
   1c042:	b2db      	uxtb	r3, r3
   1c044:	001d      	movs	r5, r3
   1c046:	69fb      	ldr	r3, [r7, #28]
   1c048:	0018      	movs	r0, r3
   1c04a:	4b6d      	ldr	r3, [pc, #436]	; (1c200 <xQueueSemaphoreTake+0x374>)
   1c04c:	4798      	blx	r3
   1c04e:	0003      	movs	r3, r0
   1c050:	001a      	movs	r2, r3
   1c052:	4b6c      	ldr	r3, [pc, #432]	; (1c204 <xQueueSemaphoreTake+0x378>)
   1c054:	5c9c      	ldrb	r4, [r3, r2]
   1c056:	69fb      	ldr	r3, [r7, #28]
   1c058:	0018      	movs	r0, r3
   1c05a:	4b6b      	ldr	r3, [pc, #428]	; (1c208 <xQueueSemaphoreTake+0x37c>)
   1c05c:	4798      	blx	r3
   1c05e:	0003      	movs	r3, r0
   1c060:	b2db      	uxtb	r3, r3
   1c062:	001a      	movs	r2, r3
   1c064:	0021      	movs	r1, r4
   1c066:	0028      	movs	r0, r5
   1c068:	4b68      	ldr	r3, [pc, #416]	; (1c20c <xQueueSemaphoreTake+0x380>)
   1c06a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1c06c:	2300      	movs	r3, #0
   1c06e:	e147      	b.n	1c300 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c072:	2b00      	cmp	r3, #0
   1c074:	d106      	bne.n	1c084 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1c076:	230c      	movs	r3, #12
   1c078:	18fb      	adds	r3, r7, r3
   1c07a:	0018      	movs	r0, r3
   1c07c:	4b6a      	ldr	r3, [pc, #424]	; (1c228 <xQueueSemaphoreTake+0x39c>)
   1c07e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1c080:	2301      	movs	r3, #1
   1c082:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1c084:	4b67      	ldr	r3, [pc, #412]	; (1c224 <xQueueSemaphoreTake+0x398>)
   1c086:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1c088:	4b68      	ldr	r3, [pc, #416]	; (1c22c <xQueueSemaphoreTake+0x3a0>)
   1c08a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1c08c:	4b57      	ldr	r3, [pc, #348]	; (1c1ec <xQueueSemaphoreTake+0x360>)
   1c08e:	4798      	blx	r3
   1c090:	69fb      	ldr	r3, [r7, #28]
   1c092:	2244      	movs	r2, #68	; 0x44
   1c094:	5c9b      	ldrb	r3, [r3, r2]
   1c096:	b25b      	sxtb	r3, r3
   1c098:	3301      	adds	r3, #1
   1c09a:	d103      	bne.n	1c0a4 <xQueueSemaphoreTake+0x218>
   1c09c:	69fb      	ldr	r3, [r7, #28]
   1c09e:	2244      	movs	r2, #68	; 0x44
   1c0a0:	2100      	movs	r1, #0
   1c0a2:	5499      	strb	r1, [r3, r2]
   1c0a4:	69fb      	ldr	r3, [r7, #28]
   1c0a6:	2245      	movs	r2, #69	; 0x45
   1c0a8:	5c9b      	ldrb	r3, [r3, r2]
   1c0aa:	b25b      	sxtb	r3, r3
   1c0ac:	3301      	adds	r3, #1
   1c0ae:	d103      	bne.n	1c0b8 <xQueueSemaphoreTake+0x22c>
   1c0b0:	69fb      	ldr	r3, [r7, #28]
   1c0b2:	2245      	movs	r2, #69	; 0x45
   1c0b4:	2100      	movs	r1, #0
   1c0b6:	5499      	strb	r1, [r3, r2]
   1c0b8:	4b5a      	ldr	r3, [pc, #360]	; (1c224 <xQueueSemaphoreTake+0x398>)
   1c0ba:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c0bc:	003a      	movs	r2, r7
   1c0be:	230c      	movs	r3, #12
   1c0c0:	18fb      	adds	r3, r7, r3
   1c0c2:	0011      	movs	r1, r2
   1c0c4:	0018      	movs	r0, r3
   1c0c6:	4b5a      	ldr	r3, [pc, #360]	; (1c230 <xQueueSemaphoreTake+0x3a4>)
   1c0c8:	4798      	blx	r3
   1c0ca:	1e03      	subs	r3, r0, #0
   1c0cc:	d000      	beq.n	1c0d0 <xQueueSemaphoreTake+0x244>
   1c0ce:	e0bd      	b.n	1c24c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c0d0:	69fb      	ldr	r3, [r7, #28]
   1c0d2:	0018      	movs	r0, r3
   1c0d4:	4b57      	ldr	r3, [pc, #348]	; (1c234 <xQueueSemaphoreTake+0x3a8>)
   1c0d6:	4798      	blx	r3
   1c0d8:	1e03      	subs	r3, r0, #0
   1c0da:	d100      	bne.n	1c0de <xQueueSemaphoreTake+0x252>
   1c0dc:	e07c      	b.n	1c1d8 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1c0de:	4b44      	ldr	r3, [pc, #272]	; (1c1f0 <xQueueSemaphoreTake+0x364>)
   1c0e0:	4798      	blx	r3
   1c0e2:	0003      	movs	r3, r0
   1c0e4:	0018      	movs	r0, r3
   1c0e6:	4b43      	ldr	r3, [pc, #268]	; (1c1f4 <xQueueSemaphoreTake+0x368>)
   1c0e8:	4798      	blx	r3
   1c0ea:	0003      	movs	r3, r0
   1c0ec:	001a      	movs	r2, r3
   1c0ee:	4b42      	ldr	r3, [pc, #264]	; (1c1f8 <xQueueSemaphoreTake+0x36c>)
   1c0f0:	881b      	ldrh	r3, [r3, #0]
   1c0f2:	4013      	ands	r3, r2
   1c0f4:	b29b      	uxth	r3, r3
   1c0f6:	2b00      	cmp	r3, #0
   1c0f8:	d029      	beq.n	1c14e <xQueueSemaphoreTake+0x2c2>
   1c0fa:	69fb      	ldr	r3, [r7, #28]
   1c0fc:	0018      	movs	r0, r3
   1c0fe:	4b3f      	ldr	r3, [pc, #252]	; (1c1fc <xQueueSemaphoreTake+0x370>)
   1c100:	4798      	blx	r3
   1c102:	0003      	movs	r3, r0
   1c104:	001a      	movs	r2, r3
   1c106:	4b3c      	ldr	r3, [pc, #240]	; (1c1f8 <xQueueSemaphoreTake+0x36c>)
   1c108:	881b      	ldrh	r3, [r3, #0]
   1c10a:	4013      	ands	r3, r2
   1c10c:	b29b      	uxth	r3, r3
   1c10e:	2b00      	cmp	r3, #0
   1c110:	d01d      	beq.n	1c14e <xQueueSemaphoreTake+0x2c2>
   1c112:	69fb      	ldr	r3, [r7, #28]
   1c114:	0018      	movs	r0, r3
   1c116:	4b3a      	ldr	r3, [pc, #232]	; (1c200 <xQueueSemaphoreTake+0x374>)
   1c118:	4798      	blx	r3
   1c11a:	0003      	movs	r3, r0
   1c11c:	001a      	movs	r2, r3
   1c11e:	4b39      	ldr	r3, [pc, #228]	; (1c204 <xQueueSemaphoreTake+0x378>)
   1c120:	5c9b      	ldrb	r3, [r3, r2]
   1c122:	3368      	adds	r3, #104	; 0x68
   1c124:	b2db      	uxtb	r3, r3
   1c126:	001d      	movs	r5, r3
   1c128:	69fb      	ldr	r3, [r7, #28]
   1c12a:	0018      	movs	r0, r3
   1c12c:	4b34      	ldr	r3, [pc, #208]	; (1c200 <xQueueSemaphoreTake+0x374>)
   1c12e:	4798      	blx	r3
   1c130:	0003      	movs	r3, r0
   1c132:	001a      	movs	r2, r3
   1c134:	4b33      	ldr	r3, [pc, #204]	; (1c204 <xQueueSemaphoreTake+0x378>)
   1c136:	5c9c      	ldrb	r4, [r3, r2]
   1c138:	69fb      	ldr	r3, [r7, #28]
   1c13a:	0018      	movs	r0, r3
   1c13c:	4b32      	ldr	r3, [pc, #200]	; (1c208 <xQueueSemaphoreTake+0x37c>)
   1c13e:	4798      	blx	r3
   1c140:	0003      	movs	r3, r0
   1c142:	b2db      	uxtb	r3, r3
   1c144:	001a      	movs	r2, r3
   1c146:	0021      	movs	r1, r4
   1c148:	0028      	movs	r0, r5
   1c14a:	4b30      	ldr	r3, [pc, #192]	; (1c20c <xQueueSemaphoreTake+0x380>)
   1c14c:	4798      	blx	r3
   1c14e:	69fb      	ldr	r3, [r7, #28]
   1c150:	0018      	movs	r0, r3
   1c152:	4b2b      	ldr	r3, [pc, #172]	; (1c200 <xQueueSemaphoreTake+0x374>)
   1c154:	4798      	blx	r3
   1c156:	0003      	movs	r3, r0
   1c158:	001a      	movs	r2, r3
   1c15a:	4b2a      	ldr	r3, [pc, #168]	; (1c204 <xQueueSemaphoreTake+0x378>)
   1c15c:	5c9b      	ldrb	r3, [r3, r2]
   1c15e:	2b02      	cmp	r3, #2
   1c160:	d018      	beq.n	1c194 <xQueueSemaphoreTake+0x308>
   1c162:	4b23      	ldr	r3, [pc, #140]	; (1c1f0 <xQueueSemaphoreTake+0x364>)
   1c164:	4798      	blx	r3
   1c166:	0003      	movs	r3, r0
   1c168:	0018      	movs	r0, r3
   1c16a:	4b22      	ldr	r3, [pc, #136]	; (1c1f4 <xQueueSemaphoreTake+0x368>)
   1c16c:	4798      	blx	r3
   1c16e:	0003      	movs	r3, r0
   1c170:	001a      	movs	r2, r3
   1c172:	4b21      	ldr	r3, [pc, #132]	; (1c1f8 <xQueueSemaphoreTake+0x36c>)
   1c174:	881b      	ldrh	r3, [r3, #0]
   1c176:	4013      	ands	r3, r2
   1c178:	b29b      	uxth	r3, r3
   1c17a:	2b00      	cmp	r3, #0
   1c17c:	d00a      	beq.n	1c194 <xQueueSemaphoreTake+0x308>
   1c17e:	4b1c      	ldr	r3, [pc, #112]	; (1c1f0 <xQueueSemaphoreTake+0x364>)
   1c180:	4798      	blx	r3
   1c182:	0003      	movs	r3, r0
   1c184:	0018      	movs	r0, r3
   1c186:	4b22      	ldr	r3, [pc, #136]	; (1c210 <xQueueSemaphoreTake+0x384>)
   1c188:	4798      	blx	r3
   1c18a:	0003      	movs	r3, r0
   1c18c:	b2db      	uxtb	r3, r3
   1c18e:	0018      	movs	r0, r3
   1c190:	4b29      	ldr	r3, [pc, #164]	; (1c238 <xQueueSemaphoreTake+0x3ac>)
   1c192:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c194:	69fb      	ldr	r3, [r7, #28]
   1c196:	681b      	ldr	r3, [r3, #0]
   1c198:	2b00      	cmp	r3, #0
   1c19a:	d10a      	bne.n	1c1b2 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1c19c:	4b13      	ldr	r3, [pc, #76]	; (1c1ec <xQueueSemaphoreTake+0x360>)
   1c19e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1c1a0:	69fb      	ldr	r3, [r7, #28]
   1c1a2:	685b      	ldr	r3, [r3, #4]
   1c1a4:	0018      	movs	r0, r3
   1c1a6:	4b25      	ldr	r3, [pc, #148]	; (1c23c <xQueueSemaphoreTake+0x3b0>)
   1c1a8:	4798      	blx	r3
   1c1aa:	0003      	movs	r3, r0
   1c1ac:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1c1ae:	4b1d      	ldr	r3, [pc, #116]	; (1c224 <xQueueSemaphoreTake+0x398>)
   1c1b0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1c1b2:	69fb      	ldr	r3, [r7, #28]
   1c1b4:	3324      	adds	r3, #36	; 0x24
   1c1b6:	683a      	ldr	r2, [r7, #0]
   1c1b8:	0011      	movs	r1, r2
   1c1ba:	0018      	movs	r0, r3
   1c1bc:	4b20      	ldr	r3, [pc, #128]	; (1c240 <xQueueSemaphoreTake+0x3b4>)
   1c1be:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1c1c0:	69fb      	ldr	r3, [r7, #28]
   1c1c2:	0018      	movs	r0, r3
   1c1c4:	4b1f      	ldr	r3, [pc, #124]	; (1c244 <xQueueSemaphoreTake+0x3b8>)
   1c1c6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c1c8:	4b1f      	ldr	r3, [pc, #124]	; (1c248 <xQueueSemaphoreTake+0x3bc>)
   1c1ca:	4798      	blx	r3
   1c1cc:	1e03      	subs	r3, r0, #0
   1c1ce:	d000      	beq.n	1c1d2 <xQueueSemaphoreTake+0x346>
   1c1d0:	e680      	b.n	1bed4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1c1d2:	4b13      	ldr	r3, [pc, #76]	; (1c220 <xQueueSemaphoreTake+0x394>)
   1c1d4:	4798      	blx	r3
   1c1d6:	e67d      	b.n	1bed4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1c1d8:	69fb      	ldr	r3, [r7, #28]
   1c1da:	0018      	movs	r0, r3
   1c1dc:	4b19      	ldr	r3, [pc, #100]	; (1c244 <xQueueSemaphoreTake+0x3b8>)
   1c1de:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1c1e0:	4b19      	ldr	r3, [pc, #100]	; (1c248 <xQueueSemaphoreTake+0x3bc>)
   1c1e2:	4798      	blx	r3
   1c1e4:	e676      	b.n	1bed4 <xQueueSemaphoreTake+0x48>
   1c1e6:	46c0      	nop			; (mov r8, r8)
   1c1e8:	0001d909 	.word	0x0001d909
   1c1ec:	0001abe9 	.word	0x0001abe9
   1c1f0:	00018e79 	.word	0x00018e79
   1c1f4:	00018bdd 	.word	0x00018bdd
   1c1f8:	20000110 	.word	0x20000110
   1c1fc:	00018c9d 	.word	0x00018c9d
   1c200:	00018b9d 	.word	0x00018b9d
   1c204:	20000104 	.word	0x20000104
   1c208:	00018c7d 	.word	0x00018c7d
   1c20c:	000195d5 	.word	0x000195d5
   1c210:	00018bbd 	.word	0x00018bbd
   1c214:	00019c31 	.word	0x00019c31
   1c218:	0001ddd5 	.word	0x0001ddd5
   1c21c:	0001d479 	.word	0x0001d479
   1c220:	0001abd1 	.word	0x0001abd1
   1c224:	0001ac0d 	.word	0x0001ac0d
   1c228:	0001d5b9 	.word	0x0001d5b9
   1c22c:	0001cea1 	.word	0x0001cea1
   1c230:	0001d5e1 	.word	0x0001d5e1
   1c234:	0001c5d5 	.word	0x0001c5d5
   1c238:	00019d6d 	.word	0x00019d6d
   1c23c:	0001d941 	.word	0x0001d941
   1c240:	0001d355 	.word	0x0001d355
   1c244:	0001c4e5 	.word	0x0001c4e5
   1c248:	0001ceb9 	.word	0x0001ceb9
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1c24c:	69fb      	ldr	r3, [r7, #28]
   1c24e:	0018      	movs	r0, r3
   1c250:	4b2d      	ldr	r3, [pc, #180]	; (1c308 <xQueueSemaphoreTake+0x47c>)
   1c252:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1c254:	4b2d      	ldr	r3, [pc, #180]	; (1c30c <xQueueSemaphoreTake+0x480>)
   1c256:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c258:	69fb      	ldr	r3, [r7, #28]
   1c25a:	0018      	movs	r0, r3
   1c25c:	4b2c      	ldr	r3, [pc, #176]	; (1c310 <xQueueSemaphoreTake+0x484>)
   1c25e:	4798      	blx	r3
   1c260:	1e03      	subs	r3, r0, #0
   1c262:	d100      	bne.n	1c266 <xQueueSemaphoreTake+0x3da>
   1c264:	e636      	b.n	1bed4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1c266:	6a3b      	ldr	r3, [r7, #32]
   1c268:	2b00      	cmp	r3, #0
   1c26a:	d010      	beq.n	1c28e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1c26c:	4b29      	ldr	r3, [pc, #164]	; (1c314 <xQueueSemaphoreTake+0x488>)
   1c26e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1c270:	69fb      	ldr	r3, [r7, #28]
   1c272:	0018      	movs	r0, r3
   1c274:	4b28      	ldr	r3, [pc, #160]	; (1c318 <xQueueSemaphoreTake+0x48c>)
   1c276:	4798      	blx	r3
   1c278:	0003      	movs	r3, r0
   1c27a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1c27c:	69fb      	ldr	r3, [r7, #28]
   1c27e:	685b      	ldr	r3, [r3, #4]
   1c280:	697a      	ldr	r2, [r7, #20]
   1c282:	0011      	movs	r1, r2
   1c284:	0018      	movs	r0, r3
   1c286:	4b25      	ldr	r3, [pc, #148]	; (1c31c <xQueueSemaphoreTake+0x490>)
   1c288:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1c28a:	4b25      	ldr	r3, [pc, #148]	; (1c320 <xQueueSemaphoreTake+0x494>)
   1c28c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c28e:	4b25      	ldr	r3, [pc, #148]	; (1c324 <xQueueSemaphoreTake+0x498>)
   1c290:	4798      	blx	r3
   1c292:	0003      	movs	r3, r0
   1c294:	0018      	movs	r0, r3
   1c296:	4b24      	ldr	r3, [pc, #144]	; (1c328 <xQueueSemaphoreTake+0x49c>)
   1c298:	4798      	blx	r3
   1c29a:	0003      	movs	r3, r0
   1c29c:	001a      	movs	r2, r3
   1c29e:	4b23      	ldr	r3, [pc, #140]	; (1c32c <xQueueSemaphoreTake+0x4a0>)
   1c2a0:	881b      	ldrh	r3, [r3, #0]
   1c2a2:	4013      	ands	r3, r2
   1c2a4:	b29b      	uxth	r3, r3
   1c2a6:	2b00      	cmp	r3, #0
   1c2a8:	d029      	beq.n	1c2fe <xQueueSemaphoreTake+0x472>
   1c2aa:	69fb      	ldr	r3, [r7, #28]
   1c2ac:	0018      	movs	r0, r3
   1c2ae:	4b20      	ldr	r3, [pc, #128]	; (1c330 <xQueueSemaphoreTake+0x4a4>)
   1c2b0:	4798      	blx	r3
   1c2b2:	0003      	movs	r3, r0
   1c2b4:	001a      	movs	r2, r3
   1c2b6:	4b1d      	ldr	r3, [pc, #116]	; (1c32c <xQueueSemaphoreTake+0x4a0>)
   1c2b8:	881b      	ldrh	r3, [r3, #0]
   1c2ba:	4013      	ands	r3, r2
   1c2bc:	b29b      	uxth	r3, r3
   1c2be:	2b00      	cmp	r3, #0
   1c2c0:	d01d      	beq.n	1c2fe <xQueueSemaphoreTake+0x472>
   1c2c2:	69fb      	ldr	r3, [r7, #28]
   1c2c4:	0018      	movs	r0, r3
   1c2c6:	4b1b      	ldr	r3, [pc, #108]	; (1c334 <xQueueSemaphoreTake+0x4a8>)
   1c2c8:	4798      	blx	r3
   1c2ca:	0003      	movs	r3, r0
   1c2cc:	001a      	movs	r2, r3
   1c2ce:	4b1a      	ldr	r3, [pc, #104]	; (1c338 <xQueueSemaphoreTake+0x4ac>)
   1c2d0:	5c9b      	ldrb	r3, [r3, r2]
   1c2d2:	3350      	adds	r3, #80	; 0x50
   1c2d4:	b2db      	uxtb	r3, r3
   1c2d6:	001d      	movs	r5, r3
   1c2d8:	69fb      	ldr	r3, [r7, #28]
   1c2da:	0018      	movs	r0, r3
   1c2dc:	4b15      	ldr	r3, [pc, #84]	; (1c334 <xQueueSemaphoreTake+0x4a8>)
   1c2de:	4798      	blx	r3
   1c2e0:	0003      	movs	r3, r0
   1c2e2:	001a      	movs	r2, r3
   1c2e4:	4b14      	ldr	r3, [pc, #80]	; (1c338 <xQueueSemaphoreTake+0x4ac>)
   1c2e6:	5c9c      	ldrb	r4, [r3, r2]
   1c2e8:	69fb      	ldr	r3, [r7, #28]
   1c2ea:	0018      	movs	r0, r3
   1c2ec:	4b13      	ldr	r3, [pc, #76]	; (1c33c <xQueueSemaphoreTake+0x4b0>)
   1c2ee:	4798      	blx	r3
   1c2f0:	0003      	movs	r3, r0
   1c2f2:	b2db      	uxtb	r3, r3
   1c2f4:	001a      	movs	r2, r3
   1c2f6:	0021      	movs	r1, r4
   1c2f8:	0028      	movs	r0, r5
   1c2fa:	4b11      	ldr	r3, [pc, #68]	; (1c340 <xQueueSemaphoreTake+0x4b4>)
   1c2fc:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1c2fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1c300:	0018      	movs	r0, r3
   1c302:	46bd      	mov	sp, r7
   1c304:	b00a      	add	sp, #40	; 0x28
   1c306:	bdb0      	pop	{r4, r5, r7, pc}
   1c308:	0001c4e5 	.word	0x0001c4e5
   1c30c:	0001ceb9 	.word	0x0001ceb9
   1c310:	0001c5d5 	.word	0x0001c5d5
   1c314:	0001abe9 	.word	0x0001abe9
   1c318:	0001c387 	.word	0x0001c387
   1c31c:	0001dc39 	.word	0x0001dc39
   1c320:	0001ac0d 	.word	0x0001ac0d
   1c324:	00018e79 	.word	0x00018e79
   1c328:	00018bdd 	.word	0x00018bdd
   1c32c:	20000110 	.word	0x20000110
   1c330:	00018c9d 	.word	0x00018c9d
   1c334:	00018b9d 	.word	0x00018b9d
   1c338:	20000104 	.word	0x20000104
   1c33c:	00018c7d 	.word	0x00018c7d
   1c340:	000195d5 	.word	0x000195d5

0001c344 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1c344:	b580      	push	{r7, lr}
   1c346:	b082      	sub	sp, #8
   1c348:	af00      	add	r7, sp, #0
   1c34a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1c34c:	687b      	ldr	r3, [r7, #4]
   1c34e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1c350:	0018      	movs	r0, r3
   1c352:	46bd      	mov	sp, r7
   1c354:	b002      	add	sp, #8
   1c356:	bd80      	pop	{r7, pc}

0001c358 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1c358:	b580      	push	{r7, lr}
   1c35a:	b082      	sub	sp, #8
   1c35c:	af00      	add	r7, sp, #0
   1c35e:	6078      	str	r0, [r7, #4]
   1c360:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1c362:	687b      	ldr	r3, [r7, #4]
   1c364:	683a      	ldr	r2, [r7, #0]
   1c366:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1c368:	46c0      	nop			; (mov r8, r8)
   1c36a:	46bd      	mov	sp, r7
   1c36c:	b002      	add	sp, #8
   1c36e:	bd80      	pop	{r7, pc}

0001c370 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1c370:	b580      	push	{r7, lr}
   1c372:	b082      	sub	sp, #8
   1c374:	af00      	add	r7, sp, #0
   1c376:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1c378:	687b      	ldr	r3, [r7, #4]
   1c37a:	2250      	movs	r2, #80	; 0x50
   1c37c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1c37e:	0018      	movs	r0, r3
   1c380:	46bd      	mov	sp, r7
   1c382:	b002      	add	sp, #8
   1c384:	bd80      	pop	{r7, pc}

0001c386 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1c386:	b580      	push	{r7, lr}
   1c388:	b084      	sub	sp, #16
   1c38a:	af00      	add	r7, sp, #0
   1c38c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1c38e:	687b      	ldr	r3, [r7, #4]
   1c390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c392:	2b00      	cmp	r3, #0
   1c394:	d006      	beq.n	1c3a4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1c396:	687b      	ldr	r3, [r7, #4]
   1c398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c39a:	681b      	ldr	r3, [r3, #0]
   1c39c:	2205      	movs	r2, #5
   1c39e:	1ad3      	subs	r3, r2, r3
   1c3a0:	60fb      	str	r3, [r7, #12]
   1c3a2:	e001      	b.n	1c3a8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1c3a4:	2300      	movs	r3, #0
   1c3a6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1c3a8:	68fb      	ldr	r3, [r7, #12]
	}
   1c3aa:	0018      	movs	r0, r3
   1c3ac:	46bd      	mov	sp, r7
   1c3ae:	b004      	add	sp, #16
   1c3b0:	bd80      	pop	{r7, pc}
	...

0001c3b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1c3b4:	b580      	push	{r7, lr}
   1c3b6:	b086      	sub	sp, #24
   1c3b8:	af00      	add	r7, sp, #0
   1c3ba:	60f8      	str	r0, [r7, #12]
   1c3bc:	60b9      	str	r1, [r7, #8]
   1c3be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1c3c0:	2300      	movs	r3, #0
   1c3c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1c3c4:	68fb      	ldr	r3, [r7, #12]
   1c3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c3c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1c3ca:	68fb      	ldr	r3, [r7, #12]
   1c3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c3ce:	2b00      	cmp	r3, #0
   1c3d0:	d10e      	bne.n	1c3f0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c3d2:	68fb      	ldr	r3, [r7, #12]
   1c3d4:	681b      	ldr	r3, [r3, #0]
   1c3d6:	2b00      	cmp	r3, #0
   1c3d8:	d14e      	bne.n	1c478 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1c3da:	68fb      	ldr	r3, [r7, #12]
   1c3dc:	685b      	ldr	r3, [r3, #4]
   1c3de:	0018      	movs	r0, r3
   1c3e0:	4b2a      	ldr	r3, [pc, #168]	; (1c48c <prvCopyDataToQueue+0xd8>)
   1c3e2:	4798      	blx	r3
   1c3e4:	0003      	movs	r3, r0
   1c3e6:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1c3e8:	68fb      	ldr	r3, [r7, #12]
   1c3ea:	2200      	movs	r2, #0
   1c3ec:	605a      	str	r2, [r3, #4]
   1c3ee:	e043      	b.n	1c478 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1c3f0:	687b      	ldr	r3, [r7, #4]
   1c3f2:	2b00      	cmp	r3, #0
   1c3f4:	d119      	bne.n	1c42a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1c3f6:	68fb      	ldr	r3, [r7, #12]
   1c3f8:	6898      	ldr	r0, [r3, #8]
   1c3fa:	68fb      	ldr	r3, [r7, #12]
   1c3fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c3fe:	68bb      	ldr	r3, [r7, #8]
   1c400:	0019      	movs	r1, r3
   1c402:	4b23      	ldr	r3, [pc, #140]	; (1c490 <prvCopyDataToQueue+0xdc>)
   1c404:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1c406:	68fb      	ldr	r3, [r7, #12]
   1c408:	689a      	ldr	r2, [r3, #8]
   1c40a:	68fb      	ldr	r3, [r7, #12]
   1c40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c40e:	18d2      	adds	r2, r2, r3
   1c410:	68fb      	ldr	r3, [r7, #12]
   1c412:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c414:	68fb      	ldr	r3, [r7, #12]
   1c416:	689a      	ldr	r2, [r3, #8]
   1c418:	68fb      	ldr	r3, [r7, #12]
   1c41a:	685b      	ldr	r3, [r3, #4]
   1c41c:	429a      	cmp	r2, r3
   1c41e:	d32b      	bcc.n	1c478 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1c420:	68fb      	ldr	r3, [r7, #12]
   1c422:	681a      	ldr	r2, [r3, #0]
   1c424:	68fb      	ldr	r3, [r7, #12]
   1c426:	609a      	str	r2, [r3, #8]
   1c428:	e026      	b.n	1c478 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c42a:	68fb      	ldr	r3, [r7, #12]
   1c42c:	68d8      	ldr	r0, [r3, #12]
   1c42e:	68fb      	ldr	r3, [r7, #12]
   1c430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c432:	68bb      	ldr	r3, [r7, #8]
   1c434:	0019      	movs	r1, r3
   1c436:	4b16      	ldr	r3, [pc, #88]	; (1c490 <prvCopyDataToQueue+0xdc>)
   1c438:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1c43a:	68fb      	ldr	r3, [r7, #12]
   1c43c:	68da      	ldr	r2, [r3, #12]
   1c43e:	68fb      	ldr	r3, [r7, #12]
   1c440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c442:	425b      	negs	r3, r3
   1c444:	18d2      	adds	r2, r2, r3
   1c446:	68fb      	ldr	r3, [r7, #12]
   1c448:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c44a:	68fb      	ldr	r3, [r7, #12]
   1c44c:	68da      	ldr	r2, [r3, #12]
   1c44e:	68fb      	ldr	r3, [r7, #12]
   1c450:	681b      	ldr	r3, [r3, #0]
   1c452:	429a      	cmp	r2, r3
   1c454:	d207      	bcs.n	1c466 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1c456:	68fb      	ldr	r3, [r7, #12]
   1c458:	685a      	ldr	r2, [r3, #4]
   1c45a:	68fb      	ldr	r3, [r7, #12]
   1c45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c45e:	425b      	negs	r3, r3
   1c460:	18d2      	adds	r2, r2, r3
   1c462:	68fb      	ldr	r3, [r7, #12]
   1c464:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1c466:	687b      	ldr	r3, [r7, #4]
   1c468:	2b02      	cmp	r3, #2
   1c46a:	d105      	bne.n	1c478 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1c46c:	693b      	ldr	r3, [r7, #16]
   1c46e:	2b00      	cmp	r3, #0
   1c470:	d002      	beq.n	1c478 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1c472:	693b      	ldr	r3, [r7, #16]
   1c474:	3b01      	subs	r3, #1
   1c476:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1c478:	693b      	ldr	r3, [r7, #16]
   1c47a:	1c5a      	adds	r2, r3, #1
   1c47c:	68fb      	ldr	r3, [r7, #12]
   1c47e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1c480:	697b      	ldr	r3, [r7, #20]
}
   1c482:	0018      	movs	r0, r3
   1c484:	46bd      	mov	sp, r7
   1c486:	b006      	add	sp, #24
   1c488:	bd80      	pop	{r7, pc}
   1c48a:	46c0      	nop			; (mov r8, r8)
   1c48c:	0001dad1 	.word	0x0001dad1
   1c490:	000355d9 	.word	0x000355d9

0001c494 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1c494:	b580      	push	{r7, lr}
   1c496:	b082      	sub	sp, #8
   1c498:	af00      	add	r7, sp, #0
   1c49a:	6078      	str	r0, [r7, #4]
   1c49c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1c49e:	687b      	ldr	r3, [r7, #4]
   1c4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c4a2:	2b00      	cmp	r3, #0
   1c4a4:	d018      	beq.n	1c4d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1c4a6:	687b      	ldr	r3, [r7, #4]
   1c4a8:	68da      	ldr	r2, [r3, #12]
   1c4aa:	687b      	ldr	r3, [r7, #4]
   1c4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c4ae:	18d2      	adds	r2, r2, r3
   1c4b0:	687b      	ldr	r3, [r7, #4]
   1c4b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1c4b4:	687b      	ldr	r3, [r7, #4]
   1c4b6:	68da      	ldr	r2, [r3, #12]
   1c4b8:	687b      	ldr	r3, [r7, #4]
   1c4ba:	685b      	ldr	r3, [r3, #4]
   1c4bc:	429a      	cmp	r2, r3
   1c4be:	d303      	bcc.n	1c4c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1c4c0:	687b      	ldr	r3, [r7, #4]
   1c4c2:	681a      	ldr	r2, [r3, #0]
   1c4c4:	687b      	ldr	r3, [r7, #4]
   1c4c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1c4c8:	687b      	ldr	r3, [r7, #4]
   1c4ca:	68d9      	ldr	r1, [r3, #12]
   1c4cc:	687b      	ldr	r3, [r7, #4]
   1c4ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c4d0:	683b      	ldr	r3, [r7, #0]
   1c4d2:	0018      	movs	r0, r3
   1c4d4:	4b02      	ldr	r3, [pc, #8]	; (1c4e0 <prvCopyDataFromQueue+0x4c>)
   1c4d6:	4798      	blx	r3
	}
}
   1c4d8:	46c0      	nop			; (mov r8, r8)
   1c4da:	46bd      	mov	sp, r7
   1c4dc:	b002      	add	sp, #8
   1c4de:	bd80      	pop	{r7, pc}
   1c4e0:	000355d9 	.word	0x000355d9

0001c4e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1c4e4:	b580      	push	{r7, lr}
   1c4e6:	b084      	sub	sp, #16
   1c4e8:	af00      	add	r7, sp, #0
   1c4ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1c4ec:	4b34      	ldr	r3, [pc, #208]	; (1c5c0 <prvUnlockQueue+0xdc>)
   1c4ee:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1c4f0:	230f      	movs	r3, #15
   1c4f2:	18fb      	adds	r3, r7, r3
   1c4f4:	687a      	ldr	r2, [r7, #4]
   1c4f6:	2145      	movs	r1, #69	; 0x45
   1c4f8:	5c52      	ldrb	r2, [r2, r1]
   1c4fa:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c4fc:	e022      	b.n	1c544 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1c4fe:	687b      	ldr	r3, [r7, #4]
   1c500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c502:	2b00      	cmp	r3, #0
   1c504:	d009      	beq.n	1c51a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1c506:	687b      	ldr	r3, [r7, #4]
   1c508:	2100      	movs	r1, #0
   1c50a:	0018      	movs	r0, r3
   1c50c:	4b2d      	ldr	r3, [pc, #180]	; (1c5c4 <prvUnlockQueue+0xe0>)
   1c50e:	4798      	blx	r3
   1c510:	1e03      	subs	r3, r0, #0
   1c512:	d00f      	beq.n	1c534 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1c514:	4b2c      	ldr	r3, [pc, #176]	; (1c5c8 <prvUnlockQueue+0xe4>)
   1c516:	4798      	blx	r3
   1c518:	e00c      	b.n	1c534 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c51a:	687b      	ldr	r3, [r7, #4]
   1c51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c51e:	2b00      	cmp	r3, #0
   1c520:	d017      	beq.n	1c552 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c522:	687b      	ldr	r3, [r7, #4]
   1c524:	3324      	adds	r3, #36	; 0x24
   1c526:	0018      	movs	r0, r3
   1c528:	4b28      	ldr	r3, [pc, #160]	; (1c5cc <prvUnlockQueue+0xe8>)
   1c52a:	4798      	blx	r3
   1c52c:	1e03      	subs	r3, r0, #0
   1c52e:	d001      	beq.n	1c534 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1c530:	4b25      	ldr	r3, [pc, #148]	; (1c5c8 <prvUnlockQueue+0xe4>)
   1c532:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1c534:	230f      	movs	r3, #15
   1c536:	18fb      	adds	r3, r7, r3
   1c538:	781b      	ldrb	r3, [r3, #0]
   1c53a:	3b01      	subs	r3, #1
   1c53c:	b2da      	uxtb	r2, r3
   1c53e:	230f      	movs	r3, #15
   1c540:	18fb      	adds	r3, r7, r3
   1c542:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c544:	230f      	movs	r3, #15
   1c546:	18fb      	adds	r3, r7, r3
   1c548:	781b      	ldrb	r3, [r3, #0]
   1c54a:	b25b      	sxtb	r3, r3
   1c54c:	2b00      	cmp	r3, #0
   1c54e:	dcd6      	bgt.n	1c4fe <prvUnlockQueue+0x1a>
   1c550:	e000      	b.n	1c554 <prvUnlockQueue+0x70>
						break;
   1c552:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1c554:	687b      	ldr	r3, [r7, #4]
   1c556:	2245      	movs	r2, #69	; 0x45
   1c558:	21ff      	movs	r1, #255	; 0xff
   1c55a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c55c:	4b1c      	ldr	r3, [pc, #112]	; (1c5d0 <prvUnlockQueue+0xec>)
   1c55e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1c560:	4b17      	ldr	r3, [pc, #92]	; (1c5c0 <prvUnlockQueue+0xdc>)
   1c562:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1c564:	230e      	movs	r3, #14
   1c566:	18fb      	adds	r3, r7, r3
   1c568:	687a      	ldr	r2, [r7, #4]
   1c56a:	2144      	movs	r1, #68	; 0x44
   1c56c:	5c52      	ldrb	r2, [r2, r1]
   1c56e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c570:	e014      	b.n	1c59c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c572:	687b      	ldr	r3, [r7, #4]
   1c574:	691b      	ldr	r3, [r3, #16]
   1c576:	2b00      	cmp	r3, #0
   1c578:	d017      	beq.n	1c5aa <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c57a:	687b      	ldr	r3, [r7, #4]
   1c57c:	3310      	adds	r3, #16
   1c57e:	0018      	movs	r0, r3
   1c580:	4b12      	ldr	r3, [pc, #72]	; (1c5cc <prvUnlockQueue+0xe8>)
   1c582:	4798      	blx	r3
   1c584:	1e03      	subs	r3, r0, #0
   1c586:	d001      	beq.n	1c58c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1c588:	4b0f      	ldr	r3, [pc, #60]	; (1c5c8 <prvUnlockQueue+0xe4>)
   1c58a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1c58c:	230e      	movs	r3, #14
   1c58e:	18fb      	adds	r3, r7, r3
   1c590:	781b      	ldrb	r3, [r3, #0]
   1c592:	3b01      	subs	r3, #1
   1c594:	b2da      	uxtb	r2, r3
   1c596:	230e      	movs	r3, #14
   1c598:	18fb      	adds	r3, r7, r3
   1c59a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c59c:	230e      	movs	r3, #14
   1c59e:	18fb      	adds	r3, r7, r3
   1c5a0:	781b      	ldrb	r3, [r3, #0]
   1c5a2:	b25b      	sxtb	r3, r3
   1c5a4:	2b00      	cmp	r3, #0
   1c5a6:	dce4      	bgt.n	1c572 <prvUnlockQueue+0x8e>
   1c5a8:	e000      	b.n	1c5ac <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1c5aa:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1c5ac:	687b      	ldr	r3, [r7, #4]
   1c5ae:	2244      	movs	r2, #68	; 0x44
   1c5b0:	21ff      	movs	r1, #255	; 0xff
   1c5b2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c5b4:	4b06      	ldr	r3, [pc, #24]	; (1c5d0 <prvUnlockQueue+0xec>)
   1c5b6:	4798      	blx	r3
}
   1c5b8:	46c0      	nop			; (mov r8, r8)
   1c5ba:	46bd      	mov	sp, r7
   1c5bc:	b004      	add	sp, #16
   1c5be:	bd80      	pop	{r7, pc}
   1c5c0:	0001abe9 	.word	0x0001abe9
   1c5c4:	0001c6b9 	.word	0x0001c6b9
   1c5c8:	0001d68d 	.word	0x0001d68d
   1c5cc:	0001d479 	.word	0x0001d479
   1c5d0:	0001ac0d 	.word	0x0001ac0d

0001c5d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1c5d4:	b580      	push	{r7, lr}
   1c5d6:	b084      	sub	sp, #16
   1c5d8:	af00      	add	r7, sp, #0
   1c5da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c5dc:	4b08      	ldr	r3, [pc, #32]	; (1c600 <prvIsQueueEmpty+0x2c>)
   1c5de:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1c5e0:	687b      	ldr	r3, [r7, #4]
   1c5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c5e4:	2b00      	cmp	r3, #0
   1c5e6:	d102      	bne.n	1c5ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1c5e8:	2301      	movs	r3, #1
   1c5ea:	60fb      	str	r3, [r7, #12]
   1c5ec:	e001      	b.n	1c5f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1c5ee:	2300      	movs	r3, #0
   1c5f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c5f2:	4b04      	ldr	r3, [pc, #16]	; (1c604 <prvIsQueueEmpty+0x30>)
   1c5f4:	4798      	blx	r3

	return xReturn;
   1c5f6:	68fb      	ldr	r3, [r7, #12]
}
   1c5f8:	0018      	movs	r0, r3
   1c5fa:	46bd      	mov	sp, r7
   1c5fc:	b004      	add	sp, #16
   1c5fe:	bd80      	pop	{r7, pc}
   1c600:	0001abe9 	.word	0x0001abe9
   1c604:	0001ac0d 	.word	0x0001ac0d

0001c608 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1c608:	b580      	push	{r7, lr}
   1c60a:	b084      	sub	sp, #16
   1c60c:	af00      	add	r7, sp, #0
   1c60e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c610:	4b09      	ldr	r3, [pc, #36]	; (1c638 <prvIsQueueFull+0x30>)
   1c612:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1c614:	687b      	ldr	r3, [r7, #4]
   1c616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c618:	687b      	ldr	r3, [r7, #4]
   1c61a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c61c:	429a      	cmp	r2, r3
   1c61e:	d102      	bne.n	1c626 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1c620:	2301      	movs	r3, #1
   1c622:	60fb      	str	r3, [r7, #12]
   1c624:	e001      	b.n	1c62a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1c626:	2300      	movs	r3, #0
   1c628:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c62a:	4b04      	ldr	r3, [pc, #16]	; (1c63c <prvIsQueueFull+0x34>)
   1c62c:	4798      	blx	r3

	return xReturn;
   1c62e:	68fb      	ldr	r3, [r7, #12]
}
   1c630:	0018      	movs	r0, r3
   1c632:	46bd      	mov	sp, r7
   1c634:	b004      	add	sp, #16
   1c636:	bd80      	pop	{r7, pc}
   1c638:	0001abe9 	.word	0x0001abe9
   1c63c:	0001ac0d 	.word	0x0001ac0d

0001c640 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c640:	b580      	push	{r7, lr}
   1c642:	b086      	sub	sp, #24
   1c644:	af00      	add	r7, sp, #0
   1c646:	60f8      	str	r0, [r7, #12]
   1c648:	60b9      	str	r1, [r7, #8]
   1c64a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c64c:	68fb      	ldr	r3, [r7, #12]
   1c64e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1c650:	4b15      	ldr	r3, [pc, #84]	; (1c6a8 <vQueueWaitForMessageRestricted+0x68>)
   1c652:	4798      	blx	r3
   1c654:	697b      	ldr	r3, [r7, #20]
   1c656:	2244      	movs	r2, #68	; 0x44
   1c658:	5c9b      	ldrb	r3, [r3, r2]
   1c65a:	b25b      	sxtb	r3, r3
   1c65c:	3301      	adds	r3, #1
   1c65e:	d103      	bne.n	1c668 <vQueueWaitForMessageRestricted+0x28>
   1c660:	697b      	ldr	r3, [r7, #20]
   1c662:	2244      	movs	r2, #68	; 0x44
   1c664:	2100      	movs	r1, #0
   1c666:	5499      	strb	r1, [r3, r2]
   1c668:	697b      	ldr	r3, [r7, #20]
   1c66a:	2245      	movs	r2, #69	; 0x45
   1c66c:	5c9b      	ldrb	r3, [r3, r2]
   1c66e:	b25b      	sxtb	r3, r3
   1c670:	3301      	adds	r3, #1
   1c672:	d103      	bne.n	1c67c <vQueueWaitForMessageRestricted+0x3c>
   1c674:	697b      	ldr	r3, [r7, #20]
   1c676:	2245      	movs	r2, #69	; 0x45
   1c678:	2100      	movs	r1, #0
   1c67a:	5499      	strb	r1, [r3, r2]
   1c67c:	4b0b      	ldr	r3, [pc, #44]	; (1c6ac <vQueueWaitForMessageRestricted+0x6c>)
   1c67e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1c680:	697b      	ldr	r3, [r7, #20]
   1c682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c684:	2b00      	cmp	r3, #0
   1c686:	d106      	bne.n	1c696 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1c688:	697b      	ldr	r3, [r7, #20]
   1c68a:	3324      	adds	r3, #36	; 0x24
   1c68c:	687a      	ldr	r2, [r7, #4]
   1c68e:	68b9      	ldr	r1, [r7, #8]
   1c690:	0018      	movs	r0, r3
   1c692:	4b07      	ldr	r3, [pc, #28]	; (1c6b0 <vQueueWaitForMessageRestricted+0x70>)
   1c694:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1c696:	697b      	ldr	r3, [r7, #20]
   1c698:	0018      	movs	r0, r3
   1c69a:	4b06      	ldr	r3, [pc, #24]	; (1c6b4 <vQueueWaitForMessageRestricted+0x74>)
   1c69c:	4798      	blx	r3
	}
   1c69e:	46c0      	nop			; (mov r8, r8)
   1c6a0:	46bd      	mov	sp, r7
   1c6a2:	b006      	add	sp, #24
   1c6a4:	bd80      	pop	{r7, pc}
   1c6a6:	46c0      	nop			; (mov r8, r8)
   1c6a8:	0001abe9 	.word	0x0001abe9
   1c6ac:	0001ac0d 	.word	0x0001ac0d
   1c6b0:	0001d399 	.word	0x0001d399
   1c6b4:	0001c4e5 	.word	0x0001c4e5

0001c6b8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1c6b8:	b5b0      	push	{r4, r5, r7, lr}
   1c6ba:	b086      	sub	sp, #24
   1c6bc:	af00      	add	r7, sp, #0
   1c6be:	6078      	str	r0, [r7, #4]
   1c6c0:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1c6c2:	687b      	ldr	r3, [r7, #4]
   1c6c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c6c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1c6c8:	2300      	movs	r3, #0
   1c6ca:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1c6cc:	693b      	ldr	r3, [r7, #16]
   1c6ce:	2b00      	cmp	r3, #0
   1c6d0:	d101      	bne.n	1c6d6 <prvNotifyQueueSetContainer+0x1e>
   1c6d2:	b672      	cpsid	i
   1c6d4:	e7fe      	b.n	1c6d4 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1c6d6:	693b      	ldr	r3, [r7, #16]
   1c6d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c6da:	693b      	ldr	r3, [r7, #16]
   1c6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c6de:	429a      	cmp	r2, r3
   1c6e0:	d301      	bcc.n	1c6e6 <prvNotifyQueueSetContainer+0x2e>
   1c6e2:	b672      	cpsid	i
   1c6e4:	e7fe      	b.n	1c6e4 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1c6e6:	693b      	ldr	r3, [r7, #16]
   1c6e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c6ea:	693b      	ldr	r3, [r7, #16]
   1c6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c6ee:	429a      	cmp	r2, r3
   1c6f0:	d300      	bcc.n	1c6f4 <prvNotifyQueueSetContainer+0x3c>
   1c6f2:	e08b      	b.n	1c80c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1c6f4:	230f      	movs	r3, #15
   1c6f6:	18fb      	adds	r3, r7, r3
   1c6f8:	693a      	ldr	r2, [r7, #16]
   1c6fa:	2145      	movs	r1, #69	; 0x45
   1c6fc:	5c52      	ldrb	r2, [r2, r1]
   1c6fe:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1c700:	4b45      	ldr	r3, [pc, #276]	; (1c818 <prvNotifyQueueSetContainer+0x160>)
   1c702:	4798      	blx	r3
   1c704:	0003      	movs	r3, r0
   1c706:	0018      	movs	r0, r3
   1c708:	4b44      	ldr	r3, [pc, #272]	; (1c81c <prvNotifyQueueSetContainer+0x164>)
   1c70a:	4798      	blx	r3
   1c70c:	0003      	movs	r3, r0
   1c70e:	001a      	movs	r2, r3
   1c710:	4b43      	ldr	r3, [pc, #268]	; (1c820 <prvNotifyQueueSetContainer+0x168>)
   1c712:	881b      	ldrh	r3, [r3, #0]
   1c714:	4013      	ands	r3, r2
   1c716:	b29b      	uxth	r3, r3
   1c718:	2b00      	cmp	r3, #0
   1c71a:	d02e      	beq.n	1c77a <prvNotifyQueueSetContainer+0xc2>
   1c71c:	693b      	ldr	r3, [r7, #16]
   1c71e:	0018      	movs	r0, r3
   1c720:	4b40      	ldr	r3, [pc, #256]	; (1c824 <prvNotifyQueueSetContainer+0x16c>)
   1c722:	4798      	blx	r3
   1c724:	0003      	movs	r3, r0
   1c726:	001a      	movs	r2, r3
   1c728:	4b3d      	ldr	r3, [pc, #244]	; (1c820 <prvNotifyQueueSetContainer+0x168>)
   1c72a:	881b      	ldrh	r3, [r3, #0]
   1c72c:	4013      	ands	r3, r2
   1c72e:	b29b      	uxth	r3, r3
   1c730:	2b00      	cmp	r3, #0
   1c732:	d022      	beq.n	1c77a <prvNotifyQueueSetContainer+0xc2>
   1c734:	683b      	ldr	r3, [r7, #0]
   1c736:	2b00      	cmp	r3, #0
   1c738:	d10b      	bne.n	1c752 <prvNotifyQueueSetContainer+0x9a>
   1c73a:	693b      	ldr	r3, [r7, #16]
   1c73c:	0018      	movs	r0, r3
   1c73e:	4b3a      	ldr	r3, [pc, #232]	; (1c828 <prvNotifyQueueSetContainer+0x170>)
   1c740:	4798      	blx	r3
   1c742:	0003      	movs	r3, r0
   1c744:	001a      	movs	r2, r3
   1c746:	4b39      	ldr	r3, [pc, #228]	; (1c82c <prvNotifyQueueSetContainer+0x174>)
   1c748:	5c9b      	ldrb	r3, [r3, r2]
   1c74a:	3320      	adds	r3, #32
   1c74c:	b2db      	uxtb	r3, r3
   1c74e:	001d      	movs	r5, r3
   1c750:	e000      	b.n	1c754 <prvNotifyQueueSetContainer+0x9c>
   1c752:	2525      	movs	r5, #37	; 0x25
   1c754:	693b      	ldr	r3, [r7, #16]
   1c756:	0018      	movs	r0, r3
   1c758:	4b33      	ldr	r3, [pc, #204]	; (1c828 <prvNotifyQueueSetContainer+0x170>)
   1c75a:	4798      	blx	r3
   1c75c:	0003      	movs	r3, r0
   1c75e:	001a      	movs	r2, r3
   1c760:	4b32      	ldr	r3, [pc, #200]	; (1c82c <prvNotifyQueueSetContainer+0x174>)
   1c762:	5c9c      	ldrb	r4, [r3, r2]
   1c764:	693b      	ldr	r3, [r7, #16]
   1c766:	0018      	movs	r0, r3
   1c768:	4b31      	ldr	r3, [pc, #196]	; (1c830 <prvNotifyQueueSetContainer+0x178>)
   1c76a:	4798      	blx	r3
   1c76c:	0003      	movs	r3, r0
   1c76e:	b2db      	uxtb	r3, r3
   1c770:	001a      	movs	r2, r3
   1c772:	0021      	movs	r1, r4
   1c774:	0028      	movs	r0, r5
   1c776:	4b2f      	ldr	r3, [pc, #188]	; (1c834 <prvNotifyQueueSetContainer+0x17c>)
   1c778:	4798      	blx	r3
   1c77a:	693b      	ldr	r3, [r7, #16]
   1c77c:	0018      	movs	r0, r3
   1c77e:	4b2a      	ldr	r3, [pc, #168]	; (1c828 <prvNotifyQueueSetContainer+0x170>)
   1c780:	4798      	blx	r3
   1c782:	0003      	movs	r3, r0
   1c784:	001a      	movs	r2, r3
   1c786:	4b29      	ldr	r3, [pc, #164]	; (1c82c <prvNotifyQueueSetContainer+0x174>)
   1c788:	5c9c      	ldrb	r4, [r3, r2]
   1c78a:	693b      	ldr	r3, [r7, #16]
   1c78c:	0018      	movs	r0, r3
   1c78e:	4b28      	ldr	r3, [pc, #160]	; (1c830 <prvNotifyQueueSetContainer+0x178>)
   1c790:	4798      	blx	r3
   1c792:	0003      	movs	r3, r0
   1c794:	b2dd      	uxtb	r5, r3
   1c796:	693b      	ldr	r3, [r7, #16]
   1c798:	0018      	movs	r0, r3
   1c79a:	4b23      	ldr	r3, [pc, #140]	; (1c828 <prvNotifyQueueSetContainer+0x170>)
   1c79c:	4798      	blx	r3
   1c79e:	0003      	movs	r3, r0
   1c7a0:	001a      	movs	r2, r3
   1c7a2:	4b22      	ldr	r3, [pc, #136]	; (1c82c <prvNotifyQueueSetContainer+0x174>)
   1c7a4:	5c9b      	ldrb	r3, [r3, r2]
   1c7a6:	2b02      	cmp	r3, #2
   1c7a8:	d005      	beq.n	1c7b6 <prvNotifyQueueSetContainer+0xfe>
   1c7aa:	693b      	ldr	r3, [r7, #16]
   1c7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c7ae:	b2db      	uxtb	r3, r3
   1c7b0:	3301      	adds	r3, #1
   1c7b2:	b2db      	uxtb	r3, r3
   1c7b4:	e000      	b.n	1c7b8 <prvNotifyQueueSetContainer+0x100>
   1c7b6:	2300      	movs	r3, #0
   1c7b8:	001a      	movs	r2, r3
   1c7ba:	0029      	movs	r1, r5
   1c7bc:	0020      	movs	r0, r4
   1c7be:	4b1e      	ldr	r3, [pc, #120]	; (1c838 <prvNotifyQueueSetContainer+0x180>)
   1c7c0:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1c7c2:	683a      	ldr	r2, [r7, #0]
   1c7c4:	1d39      	adds	r1, r7, #4
   1c7c6:	693b      	ldr	r3, [r7, #16]
   1c7c8:	0018      	movs	r0, r3
   1c7ca:	4b1c      	ldr	r3, [pc, #112]	; (1c83c <prvNotifyQueueSetContainer+0x184>)
   1c7cc:	4798      	blx	r3
   1c7ce:	0003      	movs	r3, r0
   1c7d0:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1c7d2:	230f      	movs	r3, #15
   1c7d4:	18fb      	adds	r3, r7, r3
   1c7d6:	781b      	ldrb	r3, [r3, #0]
   1c7d8:	b25b      	sxtb	r3, r3
   1c7da:	3301      	adds	r3, #1
   1c7dc:	d10d      	bne.n	1c7fa <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1c7de:	693b      	ldr	r3, [r7, #16]
   1c7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c7e2:	2b00      	cmp	r3, #0
   1c7e4:	d012      	beq.n	1c80c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1c7e6:	693b      	ldr	r3, [r7, #16]
   1c7e8:	3324      	adds	r3, #36	; 0x24
   1c7ea:	0018      	movs	r0, r3
   1c7ec:	4b14      	ldr	r3, [pc, #80]	; (1c840 <prvNotifyQueueSetContainer+0x188>)
   1c7ee:	4798      	blx	r3
   1c7f0:	1e03      	subs	r3, r0, #0
   1c7f2:	d00b      	beq.n	1c80c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1c7f4:	2301      	movs	r3, #1
   1c7f6:	617b      	str	r3, [r7, #20]
   1c7f8:	e008      	b.n	1c80c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1c7fa:	230f      	movs	r3, #15
   1c7fc:	18fb      	adds	r3, r7, r3
   1c7fe:	781b      	ldrb	r3, [r3, #0]
   1c800:	3301      	adds	r3, #1
   1c802:	b2db      	uxtb	r3, r3
   1c804:	b259      	sxtb	r1, r3
   1c806:	693b      	ldr	r3, [r7, #16]
   1c808:	2245      	movs	r2, #69	; 0x45
   1c80a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c80c:	697b      	ldr	r3, [r7, #20]
	}
   1c80e:	0018      	movs	r0, r3
   1c810:	46bd      	mov	sp, r7
   1c812:	b006      	add	sp, #24
   1c814:	bdb0      	pop	{r4, r5, r7, pc}
   1c816:	46c0      	nop			; (mov r8, r8)
   1c818:	00018e79 	.word	0x00018e79
   1c81c:	00018bdd 	.word	0x00018bdd
   1c820:	20000110 	.word	0x20000110
   1c824:	00018c9d 	.word	0x00018c9d
   1c828:	00018b9d 	.word	0x00018b9d
   1c82c:	20000104 	.word	0x20000104
   1c830:	00018c7d 	.word	0x00018c7d
   1c834:	000195d5 	.word	0x000195d5
   1c838:	00019c31 	.word	0x00019c31
   1c83c:	0001c3b5 	.word	0x0001c3b5
   1c840:	0001d479 	.word	0x0001d479

0001c844 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1c844:	b590      	push	{r4, r7, lr}
   1c846:	b08d      	sub	sp, #52	; 0x34
   1c848:	af04      	add	r7, sp, #16
   1c84a:	60f8      	str	r0, [r7, #12]
   1c84c:	60b9      	str	r1, [r7, #8]
   1c84e:	603b      	str	r3, [r7, #0]
   1c850:	1dbb      	adds	r3, r7, #6
   1c852:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c854:	1dbb      	adds	r3, r7, #6
   1c856:	881b      	ldrh	r3, [r3, #0]
   1c858:	009b      	lsls	r3, r3, #2
   1c85a:	0018      	movs	r0, r3
   1c85c:	4b1d      	ldr	r3, [pc, #116]	; (1c8d4 <xTaskCreate+0x90>)
   1c85e:	4798      	blx	r3
   1c860:	0003      	movs	r3, r0
   1c862:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1c864:	697b      	ldr	r3, [r7, #20]
   1c866:	2b00      	cmp	r3, #0
   1c868:	d010      	beq.n	1c88c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1c86a:	2054      	movs	r0, #84	; 0x54
   1c86c:	4b19      	ldr	r3, [pc, #100]	; (1c8d4 <xTaskCreate+0x90>)
   1c86e:	4798      	blx	r3
   1c870:	0003      	movs	r3, r0
   1c872:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1c874:	69fb      	ldr	r3, [r7, #28]
   1c876:	2b00      	cmp	r3, #0
   1c878:	d003      	beq.n	1c882 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1c87a:	69fb      	ldr	r3, [r7, #28]
   1c87c:	697a      	ldr	r2, [r7, #20]
   1c87e:	631a      	str	r2, [r3, #48]	; 0x30
   1c880:	e006      	b.n	1c890 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1c882:	697b      	ldr	r3, [r7, #20]
   1c884:	0018      	movs	r0, r3
   1c886:	4b14      	ldr	r3, [pc, #80]	; (1c8d8 <xTaskCreate+0x94>)
   1c888:	4798      	blx	r3
   1c88a:	e001      	b.n	1c890 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1c88c:	2300      	movs	r3, #0
   1c88e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1c890:	69fb      	ldr	r3, [r7, #28]
   1c892:	2b00      	cmp	r3, #0
   1c894:	d016      	beq.n	1c8c4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1c896:	1dbb      	adds	r3, r7, #6
   1c898:	881a      	ldrh	r2, [r3, #0]
   1c89a:	683c      	ldr	r4, [r7, #0]
   1c89c:	68b9      	ldr	r1, [r7, #8]
   1c89e:	68f8      	ldr	r0, [r7, #12]
   1c8a0:	2300      	movs	r3, #0
   1c8a2:	9303      	str	r3, [sp, #12]
   1c8a4:	69fb      	ldr	r3, [r7, #28]
   1c8a6:	9302      	str	r3, [sp, #8]
   1c8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c8aa:	9301      	str	r3, [sp, #4]
   1c8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c8ae:	9300      	str	r3, [sp, #0]
   1c8b0:	0023      	movs	r3, r4
   1c8b2:	4c0a      	ldr	r4, [pc, #40]	; (1c8dc <xTaskCreate+0x98>)
   1c8b4:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1c8b6:	69fb      	ldr	r3, [r7, #28]
   1c8b8:	0018      	movs	r0, r3
   1c8ba:	4b09      	ldr	r3, [pc, #36]	; (1c8e0 <xTaskCreate+0x9c>)
   1c8bc:	4798      	blx	r3
			xReturn = pdPASS;
   1c8be:	2301      	movs	r3, #1
   1c8c0:	61bb      	str	r3, [r7, #24]
   1c8c2:	e002      	b.n	1c8ca <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1c8c4:	2301      	movs	r3, #1
   1c8c6:	425b      	negs	r3, r3
   1c8c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1c8ca:	69bb      	ldr	r3, [r7, #24]
	}
   1c8cc:	0018      	movs	r0, r3
   1c8ce:	46bd      	mov	sp, r7
   1c8d0:	b009      	add	sp, #36	; 0x24
   1c8d2:	bd90      	pop	{r4, r7, pc}
   1c8d4:	0001ad21 	.word	0x0001ad21
   1c8d8:	0001ade5 	.word	0x0001ade5
   1c8dc:	0001c8e5 	.word	0x0001c8e5
   1c8e0:	0001c9f5 	.word	0x0001c9f5

0001c8e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1c8e4:	b580      	push	{r7, lr}
   1c8e6:	b086      	sub	sp, #24
   1c8e8:	af00      	add	r7, sp, #0
   1c8ea:	60f8      	str	r0, [r7, #12]
   1c8ec:	60b9      	str	r1, [r7, #8]
   1c8ee:	607a      	str	r2, [r7, #4]
   1c8f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1c8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c8f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c8f6:	687b      	ldr	r3, [r7, #4]
   1c8f8:	009b      	lsls	r3, r3, #2
   1c8fa:	001a      	movs	r2, r3
   1c8fc:	21a5      	movs	r1, #165	; 0xa5
   1c8fe:	4b39      	ldr	r3, [pc, #228]	; (1c9e4 <prvInitialiseNewTask+0x100>)
   1c900:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1c902:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c906:	687b      	ldr	r3, [r7, #4]
   1c908:	4937      	ldr	r1, [pc, #220]	; (1c9e8 <prvInitialiseNewTask+0x104>)
   1c90a:	468c      	mov	ip, r1
   1c90c:	4463      	add	r3, ip
   1c90e:	009b      	lsls	r3, r3, #2
   1c910:	18d3      	adds	r3, r2, r3
   1c912:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1c914:	693b      	ldr	r3, [r7, #16]
   1c916:	2207      	movs	r2, #7
   1c918:	4393      	bics	r3, r2
   1c91a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1c91c:	693b      	ldr	r3, [r7, #16]
   1c91e:	2207      	movs	r2, #7
   1c920:	4013      	ands	r3, r2
   1c922:	d001      	beq.n	1c928 <prvInitialiseNewTask+0x44>
   1c924:	b672      	cpsid	i
   1c926:	e7fe      	b.n	1c926 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c928:	2300      	movs	r3, #0
   1c92a:	617b      	str	r3, [r7, #20]
   1c92c:	e013      	b.n	1c956 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1c92e:	68ba      	ldr	r2, [r7, #8]
   1c930:	697b      	ldr	r3, [r7, #20]
   1c932:	18d3      	adds	r3, r2, r3
   1c934:	7818      	ldrb	r0, [r3, #0]
   1c936:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c938:	2134      	movs	r1, #52	; 0x34
   1c93a:	697b      	ldr	r3, [r7, #20]
   1c93c:	18d3      	adds	r3, r2, r3
   1c93e:	185b      	adds	r3, r3, r1
   1c940:	1c02      	adds	r2, r0, #0
   1c942:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1c944:	68ba      	ldr	r2, [r7, #8]
   1c946:	697b      	ldr	r3, [r7, #20]
   1c948:	18d3      	adds	r3, r2, r3
   1c94a:	781b      	ldrb	r3, [r3, #0]
   1c94c:	2b00      	cmp	r3, #0
   1c94e:	d006      	beq.n	1c95e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c950:	697b      	ldr	r3, [r7, #20]
   1c952:	3301      	adds	r3, #1
   1c954:	617b      	str	r3, [r7, #20]
   1c956:	697b      	ldr	r3, [r7, #20]
   1c958:	2b07      	cmp	r3, #7
   1c95a:	d9e8      	bls.n	1c92e <prvInitialiseNewTask+0x4a>
   1c95c:	e000      	b.n	1c960 <prvInitialiseNewTask+0x7c>
		{
			break;
   1c95e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1c960:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c962:	223b      	movs	r2, #59	; 0x3b
   1c964:	2100      	movs	r1, #0
   1c966:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1c968:	6a3b      	ldr	r3, [r7, #32]
   1c96a:	2b04      	cmp	r3, #4
   1c96c:	d901      	bls.n	1c972 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1c96e:	2304      	movs	r3, #4
   1c970:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1c972:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c974:	6a3a      	ldr	r2, [r7, #32]
   1c976:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1c978:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c97a:	6a3a      	ldr	r2, [r7, #32]
   1c97c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1c97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c980:	2200      	movs	r2, #0
   1c982:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1c984:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c986:	3304      	adds	r3, #4
   1c988:	0018      	movs	r0, r3
   1c98a:	4b18      	ldr	r3, [pc, #96]	; (1c9ec <prvInitialiseNewTask+0x108>)
   1c98c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1c98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c990:	3318      	adds	r3, #24
   1c992:	0018      	movs	r0, r3
   1c994:	4b15      	ldr	r3, [pc, #84]	; (1c9ec <prvInitialiseNewTask+0x108>)
   1c996:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c99a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c99c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c99e:	6a3b      	ldr	r3, [r7, #32]
   1c9a0:	2205      	movs	r2, #5
   1c9a2:	1ad2      	subs	r2, r2, r3
   1c9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1c9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c9ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1c9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9b0:	2200      	movs	r2, #0
   1c9b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9b6:	2250      	movs	r2, #80	; 0x50
   1c9b8:	2100      	movs	r1, #0
   1c9ba:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1c9bc:	683a      	ldr	r2, [r7, #0]
   1c9be:	68f9      	ldr	r1, [r7, #12]
   1c9c0:	693b      	ldr	r3, [r7, #16]
   1c9c2:	0018      	movs	r0, r3
   1c9c4:	4b0a      	ldr	r3, [pc, #40]	; (1c9f0 <prvInitialiseNewTask+0x10c>)
   1c9c6:	4798      	blx	r3
   1c9c8:	0002      	movs	r2, r0
   1c9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9cc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c9d0:	2b00      	cmp	r3, #0
   1c9d2:	d002      	beq.n	1c9da <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c9d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c9d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c9da:	46c0      	nop			; (mov r8, r8)
   1c9dc:	46bd      	mov	sp, r7
   1c9de:	b006      	add	sp, #24
   1c9e0:	bd80      	pop	{r7, pc}
   1c9e2:	46c0      	nop			; (mov r8, r8)
   1c9e4:	0003560f 	.word	0x0003560f
   1c9e8:	3fffffff 	.word	0x3fffffff
   1c9ec:	0001a991 	.word	0x0001a991
   1c9f0:	0001aaa9 	.word	0x0001aaa9

0001c9f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1c9f4:	b580      	push	{r7, lr}
   1c9f6:	b082      	sub	sp, #8
   1c9f8:	af00      	add	r7, sp, #0
   1c9fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1c9fc:	4b60      	ldr	r3, [pc, #384]	; (1cb80 <prvAddNewTaskToReadyList+0x18c>)
   1c9fe:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1ca00:	4b60      	ldr	r3, [pc, #384]	; (1cb84 <prvAddNewTaskToReadyList+0x190>)
   1ca02:	681b      	ldr	r3, [r3, #0]
   1ca04:	1c5a      	adds	r2, r3, #1
   1ca06:	4b5f      	ldr	r3, [pc, #380]	; (1cb84 <prvAddNewTaskToReadyList+0x190>)
   1ca08:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1ca0a:	4b5f      	ldr	r3, [pc, #380]	; (1cb88 <prvAddNewTaskToReadyList+0x194>)
   1ca0c:	681b      	ldr	r3, [r3, #0]
   1ca0e:	2b00      	cmp	r3, #0
   1ca10:	d109      	bne.n	1ca26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1ca12:	4b5d      	ldr	r3, [pc, #372]	; (1cb88 <prvAddNewTaskToReadyList+0x194>)
   1ca14:	687a      	ldr	r2, [r7, #4]
   1ca16:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1ca18:	4b5a      	ldr	r3, [pc, #360]	; (1cb84 <prvAddNewTaskToReadyList+0x190>)
   1ca1a:	681b      	ldr	r3, [r3, #0]
   1ca1c:	2b01      	cmp	r3, #1
   1ca1e:	d110      	bne.n	1ca42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1ca20:	4b5a      	ldr	r3, [pc, #360]	; (1cb8c <prvAddNewTaskToReadyList+0x198>)
   1ca22:	4798      	blx	r3
   1ca24:	e00d      	b.n	1ca42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1ca26:	4b5a      	ldr	r3, [pc, #360]	; (1cb90 <prvAddNewTaskToReadyList+0x19c>)
   1ca28:	681b      	ldr	r3, [r3, #0]
   1ca2a:	2b00      	cmp	r3, #0
   1ca2c:	d109      	bne.n	1ca42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1ca2e:	4b56      	ldr	r3, [pc, #344]	; (1cb88 <prvAddNewTaskToReadyList+0x194>)
   1ca30:	681b      	ldr	r3, [r3, #0]
   1ca32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ca34:	687b      	ldr	r3, [r7, #4]
   1ca36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ca38:	429a      	cmp	r2, r3
   1ca3a:	d802      	bhi.n	1ca42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1ca3c:	4b52      	ldr	r3, [pc, #328]	; (1cb88 <prvAddNewTaskToReadyList+0x194>)
   1ca3e:	687a      	ldr	r2, [r7, #4]
   1ca40:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1ca42:	4b54      	ldr	r3, [pc, #336]	; (1cb94 <prvAddNewTaskToReadyList+0x1a0>)
   1ca44:	681b      	ldr	r3, [r3, #0]
   1ca46:	1c5a      	adds	r2, r3, #1
   1ca48:	4b52      	ldr	r3, [pc, #328]	; (1cb94 <prvAddNewTaskToReadyList+0x1a0>)
   1ca4a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1ca4c:	4b51      	ldr	r3, [pc, #324]	; (1cb94 <prvAddNewTaskToReadyList+0x1a0>)
   1ca4e:	681a      	ldr	r2, [r3, #0]
   1ca50:	687b      	ldr	r3, [r7, #4]
   1ca52:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1ca54:	687b      	ldr	r3, [r7, #4]
   1ca56:	2b00      	cmp	r3, #0
   1ca58:	d052      	beq.n	1cb00 <prvAddNewTaskToReadyList+0x10c>
   1ca5a:	2003      	movs	r0, #3
   1ca5c:	4b4e      	ldr	r3, [pc, #312]	; (1cb98 <prvAddNewTaskToReadyList+0x1a4>)
   1ca5e:	4798      	blx	r3
   1ca60:	0003      	movs	r3, r0
   1ca62:	b29a      	uxth	r2, r3
   1ca64:	687b      	ldr	r3, [r7, #4]
   1ca66:	0011      	movs	r1, r2
   1ca68:	0018      	movs	r0, r3
   1ca6a:	4b4c      	ldr	r3, [pc, #304]	; (1cb9c <prvAddNewTaskToReadyList+0x1a8>)
   1ca6c:	4798      	blx	r3
   1ca6e:	4b4c      	ldr	r3, [pc, #304]	; (1cba0 <prvAddNewTaskToReadyList+0x1ac>)
   1ca70:	881a      	ldrh	r2, [r3, #0]
   1ca72:	687b      	ldr	r3, [r7, #4]
   1ca74:	0011      	movs	r1, r2
   1ca76:	0018      	movs	r0, r3
   1ca78:	4b4a      	ldr	r3, [pc, #296]	; (1cba4 <prvAddNewTaskToReadyList+0x1b0>)
   1ca7a:	4798      	blx	r3
   1ca7c:	687b      	ldr	r3, [r7, #4]
   1ca7e:	0018      	movs	r0, r3
   1ca80:	4b49      	ldr	r3, [pc, #292]	; (1cba8 <prvAddNewTaskToReadyList+0x1b4>)
   1ca82:	4798      	blx	r3
   1ca84:	0003      	movs	r3, r0
   1ca86:	b2d9      	uxtb	r1, r3
   1ca88:	687b      	ldr	r3, [r7, #4]
   1ca8a:	3334      	adds	r3, #52	; 0x34
   1ca8c:	001a      	movs	r2, r3
   1ca8e:	2003      	movs	r0, #3
   1ca90:	4b46      	ldr	r3, [pc, #280]	; (1cbac <prvAddNewTaskToReadyList+0x1b8>)
   1ca92:	4798      	blx	r3
   1ca94:	687b      	ldr	r3, [r7, #4]
   1ca96:	0018      	movs	r0, r3
   1ca98:	4b43      	ldr	r3, [pc, #268]	; (1cba8 <prvAddNewTaskToReadyList+0x1b4>)
   1ca9a:	4798      	blx	r3
   1ca9c:	0003      	movs	r3, r0
   1ca9e:	b2d9      	uxtb	r1, r3
   1caa0:	687b      	ldr	r3, [r7, #4]
   1caa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1caa4:	b2db      	uxtb	r3, r3
   1caa6:	001a      	movs	r2, r3
   1caa8:	2003      	movs	r0, #3
   1caaa:	4b41      	ldr	r3, [pc, #260]	; (1cbb0 <prvAddNewTaskToReadyList+0x1bc>)
   1caac:	4798      	blx	r3
   1caae:	4b41      	ldr	r3, [pc, #260]	; (1cbb4 <prvAddNewTaskToReadyList+0x1c0>)
   1cab0:	4798      	blx	r3
   1cab2:	0003      	movs	r3, r0
   1cab4:	0018      	movs	r0, r3
   1cab6:	4b40      	ldr	r3, [pc, #256]	; (1cbb8 <prvAddNewTaskToReadyList+0x1c4>)
   1cab8:	4798      	blx	r3
   1caba:	0003      	movs	r3, r0
   1cabc:	001a      	movs	r2, r3
   1cabe:	4b3f      	ldr	r3, [pc, #252]	; (1cbbc <prvAddNewTaskToReadyList+0x1c8>)
   1cac0:	881b      	ldrh	r3, [r3, #0]
   1cac2:	4013      	ands	r3, r2
   1cac4:	b29b      	uxth	r3, r3
   1cac6:	2b00      	cmp	r3, #0
   1cac8:	d016      	beq.n	1caf8 <prvAddNewTaskToReadyList+0x104>
   1caca:	687b      	ldr	r3, [r7, #4]
   1cacc:	0018      	movs	r0, r3
   1cace:	4b3a      	ldr	r3, [pc, #232]	; (1cbb8 <prvAddNewTaskToReadyList+0x1c4>)
   1cad0:	4798      	blx	r3
   1cad2:	0003      	movs	r3, r0
   1cad4:	001a      	movs	r2, r3
   1cad6:	4b39      	ldr	r3, [pc, #228]	; (1cbbc <prvAddNewTaskToReadyList+0x1c8>)
   1cad8:	881b      	ldrh	r3, [r3, #0]
   1cada:	4013      	ands	r3, r2
   1cadc:	b29b      	uxth	r3, r3
   1cade:	2b00      	cmp	r3, #0
   1cae0:	d00a      	beq.n	1caf8 <prvAddNewTaskToReadyList+0x104>
   1cae2:	687b      	ldr	r3, [r7, #4]
   1cae4:	0018      	movs	r0, r3
   1cae6:	4b30      	ldr	r3, [pc, #192]	; (1cba8 <prvAddNewTaskToReadyList+0x1b4>)
   1cae8:	4798      	blx	r3
   1caea:	0003      	movs	r3, r0
   1caec:	b2db      	uxtb	r3, r3
   1caee:	001a      	movs	r2, r3
   1caf0:	2103      	movs	r1, #3
   1caf2:	201b      	movs	r0, #27
   1caf4:	4b32      	ldr	r3, [pc, #200]	; (1cbc0 <prvAddNewTaskToReadyList+0x1cc>)
   1caf6:	4798      	blx	r3
   1caf8:	687b      	ldr	r3, [r7, #4]
   1cafa:	0018      	movs	r0, r3
   1cafc:	4b31      	ldr	r3, [pc, #196]	; (1cbc4 <prvAddNewTaskToReadyList+0x1d0>)
   1cafe:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1cb00:	687b      	ldr	r3, [r7, #4]
   1cb02:	0018      	movs	r0, r3
   1cb04:	4b2c      	ldr	r3, [pc, #176]	; (1cbb8 <prvAddNewTaskToReadyList+0x1c4>)
   1cb06:	4798      	blx	r3
   1cb08:	0003      	movs	r3, r0
   1cb0a:	001a      	movs	r2, r3
   1cb0c:	4b2b      	ldr	r3, [pc, #172]	; (1cbbc <prvAddNewTaskToReadyList+0x1c8>)
   1cb0e:	881b      	ldrh	r3, [r3, #0]
   1cb10:	4013      	ands	r3, r2
   1cb12:	b29b      	uxth	r3, r3
   1cb14:	2b00      	cmp	r3, #0
   1cb16:	d008      	beq.n	1cb2a <prvAddNewTaskToReadyList+0x136>
   1cb18:	687b      	ldr	r3, [r7, #4]
   1cb1a:	0018      	movs	r0, r3
   1cb1c:	4b22      	ldr	r3, [pc, #136]	; (1cba8 <prvAddNewTaskToReadyList+0x1b4>)
   1cb1e:	4798      	blx	r3
   1cb20:	0003      	movs	r3, r0
   1cb22:	b2db      	uxtb	r3, r3
   1cb24:	0018      	movs	r0, r3
   1cb26:	4b28      	ldr	r3, [pc, #160]	; (1cbc8 <prvAddNewTaskToReadyList+0x1d4>)
   1cb28:	4798      	blx	r3
   1cb2a:	687b      	ldr	r3, [r7, #4]
   1cb2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb2e:	4b27      	ldr	r3, [pc, #156]	; (1cbcc <prvAddNewTaskToReadyList+0x1d8>)
   1cb30:	681b      	ldr	r3, [r3, #0]
   1cb32:	429a      	cmp	r2, r3
   1cb34:	d903      	bls.n	1cb3e <prvAddNewTaskToReadyList+0x14a>
   1cb36:	687b      	ldr	r3, [r7, #4]
   1cb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb3a:	4b24      	ldr	r3, [pc, #144]	; (1cbcc <prvAddNewTaskToReadyList+0x1d8>)
   1cb3c:	601a      	str	r2, [r3, #0]
   1cb3e:	687b      	ldr	r3, [r7, #4]
   1cb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb42:	0013      	movs	r3, r2
   1cb44:	009b      	lsls	r3, r3, #2
   1cb46:	189b      	adds	r3, r3, r2
   1cb48:	009b      	lsls	r3, r3, #2
   1cb4a:	4a21      	ldr	r2, [pc, #132]	; (1cbd0 <prvAddNewTaskToReadyList+0x1dc>)
   1cb4c:	189a      	adds	r2, r3, r2
   1cb4e:	687b      	ldr	r3, [r7, #4]
   1cb50:	3304      	adds	r3, #4
   1cb52:	0019      	movs	r1, r3
   1cb54:	0010      	movs	r0, r2
   1cb56:	4b1f      	ldr	r3, [pc, #124]	; (1cbd4 <prvAddNewTaskToReadyList+0x1e0>)
   1cb58:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1cb5a:	4b1f      	ldr	r3, [pc, #124]	; (1cbd8 <prvAddNewTaskToReadyList+0x1e4>)
   1cb5c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1cb5e:	4b0c      	ldr	r3, [pc, #48]	; (1cb90 <prvAddNewTaskToReadyList+0x19c>)
   1cb60:	681b      	ldr	r3, [r3, #0]
   1cb62:	2b00      	cmp	r3, #0
   1cb64:	d008      	beq.n	1cb78 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1cb66:	4b08      	ldr	r3, [pc, #32]	; (1cb88 <prvAddNewTaskToReadyList+0x194>)
   1cb68:	681b      	ldr	r3, [r3, #0]
   1cb6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb6c:	687b      	ldr	r3, [r7, #4]
   1cb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cb70:	429a      	cmp	r2, r3
   1cb72:	d201      	bcs.n	1cb78 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1cb74:	4b19      	ldr	r3, [pc, #100]	; (1cbdc <prvAddNewTaskToReadyList+0x1e8>)
   1cb76:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1cb78:	46c0      	nop			; (mov r8, r8)
   1cb7a:	46bd      	mov	sp, r7
   1cb7c:	b002      	add	sp, #8
   1cb7e:	bd80      	pop	{r7, pc}
   1cb80:	0001abe9 	.word	0x0001abe9
   1cb84:	200041b4 	.word	0x200041b4
   1cb88:	200040dc 	.word	0x200040dc
   1cb8c:	0001d715 	.word	0x0001d715
   1cb90:	200041c0 	.word	0x200041c0
   1cb94:	200041d0 	.word	0x200041d0
   1cb98:	0001a15d 	.word	0x0001a15d
   1cb9c:	00018c01 	.word	0x00018c01
   1cba0:	20000112 	.word	0x20000112
   1cba4:	00018c3d 	.word	0x00018c3d
   1cba8:	00018bbd 	.word	0x00018bbd
   1cbac:	0001a38d 	.word	0x0001a38d
   1cbb0:	00019af1 	.word	0x00019af1
   1cbb4:	00018e79 	.word	0x00018e79
   1cbb8:	00018bdd 	.word	0x00018bdd
   1cbbc:	20000110 	.word	0x20000110
   1cbc0:	000195d5 	.word	0x000195d5
   1cbc4:	00018d3d 	.word	0x00018d3d
   1cbc8:	0001938d 	.word	0x0001938d
   1cbcc:	200041bc 	.word	0x200041bc
   1cbd0:	200040e0 	.word	0x200040e0
   1cbd4:	0001a9a7 	.word	0x0001a9a7
   1cbd8:	0001ac0d 	.word	0x0001ac0d
   1cbdc:	0001abd1 	.word	0x0001abd1

0001cbe0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1cbe0:	b580      	push	{r7, lr}
   1cbe2:	b084      	sub	sp, #16
   1cbe4:	af00      	add	r7, sp, #0
   1cbe6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1cbe8:	2300      	movs	r3, #0
   1cbea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1cbec:	687b      	ldr	r3, [r7, #4]
   1cbee:	2b00      	cmp	r3, #0
   1cbf0:	d045      	beq.n	1cc7e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1cbf2:	4b27      	ldr	r3, [pc, #156]	; (1cc90 <vTaskDelay+0xb0>)
   1cbf4:	681b      	ldr	r3, [r3, #0]
   1cbf6:	2b00      	cmp	r3, #0
   1cbf8:	d001      	beq.n	1cbfe <vTaskDelay+0x1e>
   1cbfa:	b672      	cpsid	i
   1cbfc:	e7fe      	b.n	1cbfc <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1cbfe:	4b25      	ldr	r3, [pc, #148]	; (1cc94 <vTaskDelay+0xb4>)
   1cc00:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1cc02:	4b25      	ldr	r3, [pc, #148]	; (1cc98 <vTaskDelay+0xb8>)
   1cc04:	681b      	ldr	r3, [r3, #0]
   1cc06:	0018      	movs	r0, r3
   1cc08:	4b24      	ldr	r3, [pc, #144]	; (1cc9c <vTaskDelay+0xbc>)
   1cc0a:	4798      	blx	r3
   1cc0c:	0003      	movs	r3, r0
   1cc0e:	001a      	movs	r2, r3
   1cc10:	4b23      	ldr	r3, [pc, #140]	; (1cca0 <vTaskDelay+0xc0>)
   1cc12:	881b      	ldrh	r3, [r3, #0]
   1cc14:	4013      	ands	r3, r2
   1cc16:	b29b      	uxth	r3, r3
   1cc18:	2b00      	cmp	r3, #0
   1cc1a:	d00e      	beq.n	1cc3a <vTaskDelay+0x5a>
   1cc1c:	687b      	ldr	r3, [r7, #4]
   1cc1e:	0019      	movs	r1, r3
   1cc20:	2089      	movs	r0, #137	; 0x89
   1cc22:	4b20      	ldr	r3, [pc, #128]	; (1cca4 <vTaskDelay+0xc4>)
   1cc24:	4798      	blx	r3
   1cc26:	4b1c      	ldr	r3, [pc, #112]	; (1cc98 <vTaskDelay+0xb8>)
   1cc28:	681b      	ldr	r3, [r3, #0]
   1cc2a:	0018      	movs	r0, r3
   1cc2c:	4b1e      	ldr	r3, [pc, #120]	; (1cca8 <vTaskDelay+0xc8>)
   1cc2e:	4798      	blx	r3
   1cc30:	0003      	movs	r3, r0
   1cc32:	b2db      	uxtb	r3, r3
   1cc34:	0018      	movs	r0, r3
   1cc36:	4b1d      	ldr	r3, [pc, #116]	; (1ccac <vTaskDelay+0xcc>)
   1cc38:	4798      	blx	r3
   1cc3a:	4b1d      	ldr	r3, [pc, #116]	; (1ccb0 <vTaskDelay+0xd0>)
   1cc3c:	4798      	blx	r3
   1cc3e:	0003      	movs	r3, r0
   1cc40:	0018      	movs	r0, r3
   1cc42:	4b16      	ldr	r3, [pc, #88]	; (1cc9c <vTaskDelay+0xbc>)
   1cc44:	4798      	blx	r3
   1cc46:	0003      	movs	r3, r0
   1cc48:	001a      	movs	r2, r3
   1cc4a:	4b15      	ldr	r3, [pc, #84]	; (1cca0 <vTaskDelay+0xc0>)
   1cc4c:	881b      	ldrh	r3, [r3, #0]
   1cc4e:	4013      	ands	r3, r2
   1cc50:	b29b      	uxth	r3, r3
   1cc52:	2b00      	cmp	r3, #0
   1cc54:	d00a      	beq.n	1cc6c <vTaskDelay+0x8c>
   1cc56:	4b16      	ldr	r3, [pc, #88]	; (1ccb0 <vTaskDelay+0xd0>)
   1cc58:	4798      	blx	r3
   1cc5a:	0003      	movs	r3, r0
   1cc5c:	0018      	movs	r0, r3
   1cc5e:	4b12      	ldr	r3, [pc, #72]	; (1cca8 <vTaskDelay+0xc8>)
   1cc60:	4798      	blx	r3
   1cc62:	0003      	movs	r3, r0
   1cc64:	b2db      	uxtb	r3, r3
   1cc66:	0018      	movs	r0, r3
   1cc68:	4b10      	ldr	r3, [pc, #64]	; (1ccac <vTaskDelay+0xcc>)
   1cc6a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1cc6c:	687b      	ldr	r3, [r7, #4]
   1cc6e:	2100      	movs	r1, #0
   1cc70:	0018      	movs	r0, r3
   1cc72:	4b10      	ldr	r3, [pc, #64]	; (1ccb4 <vTaskDelay+0xd4>)
   1cc74:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1cc76:	4b10      	ldr	r3, [pc, #64]	; (1ccb8 <vTaskDelay+0xd8>)
   1cc78:	4798      	blx	r3
   1cc7a:	0003      	movs	r3, r0
   1cc7c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1cc7e:	68fb      	ldr	r3, [r7, #12]
   1cc80:	2b00      	cmp	r3, #0
   1cc82:	d101      	bne.n	1cc88 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1cc84:	4b0d      	ldr	r3, [pc, #52]	; (1ccbc <vTaskDelay+0xdc>)
   1cc86:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1cc88:	46c0      	nop			; (mov r8, r8)
   1cc8a:	46bd      	mov	sp, r7
   1cc8c:	b004      	add	sp, #16
   1cc8e:	bd80      	pop	{r7, pc}
   1cc90:	200041dc 	.word	0x200041dc
   1cc94:	0001cea1 	.word	0x0001cea1
   1cc98:	200040dc 	.word	0x200040dc
   1cc9c:	00018bdd 	.word	0x00018bdd
   1cca0:	20000110 	.word	0x20000110
   1cca4:	000198dd 	.word	0x000198dd
   1cca8:	00018bbd 	.word	0x00018bbd
   1ccac:	00019d6d 	.word	0x00019d6d
   1ccb0:	00018e79 	.word	0x00018e79
   1ccb4:	0001ddf9 	.word	0x0001ddf9
   1ccb8:	0001ceb9 	.word	0x0001ceb9
   1ccbc:	0001abd1 	.word	0x0001abd1

0001ccc0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1ccc0:	b580      	push	{r7, lr}
   1ccc2:	b084      	sub	sp, #16
   1ccc4:	af00      	add	r7, sp, #0
   1ccc6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1ccc8:	4b42      	ldr	r3, [pc, #264]	; (1cdd4 <vTaskSuspend+0x114>)
   1ccca:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1cccc:	687b      	ldr	r3, [r7, #4]
   1ccce:	2b00      	cmp	r3, #0
   1ccd0:	d102      	bne.n	1ccd8 <vTaskSuspend+0x18>
   1ccd2:	4b41      	ldr	r3, [pc, #260]	; (1cdd8 <vTaskSuspend+0x118>)
   1ccd4:	681b      	ldr	r3, [r3, #0]
   1ccd6:	e000      	b.n	1ccda <vTaskSuspend+0x1a>
   1ccd8:	687b      	ldr	r3, [r7, #4]
   1ccda:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1ccdc:	4b3f      	ldr	r3, [pc, #252]	; (1cddc <vTaskSuspend+0x11c>)
   1ccde:	4798      	blx	r3
   1cce0:	0003      	movs	r3, r0
   1cce2:	0018      	movs	r0, r3
   1cce4:	4b3e      	ldr	r3, [pc, #248]	; (1cde0 <vTaskSuspend+0x120>)
   1cce6:	4798      	blx	r3
   1cce8:	0003      	movs	r3, r0
   1ccea:	001a      	movs	r2, r3
   1ccec:	4b3d      	ldr	r3, [pc, #244]	; (1cde4 <vTaskSuspend+0x124>)
   1ccee:	881b      	ldrh	r3, [r3, #0]
   1ccf0:	4013      	ands	r3, r2
   1ccf2:	b29b      	uxth	r3, r3
   1ccf4:	2b00      	cmp	r3, #0
   1ccf6:	d016      	beq.n	1cd26 <vTaskSuspend+0x66>
   1ccf8:	68fb      	ldr	r3, [r7, #12]
   1ccfa:	0018      	movs	r0, r3
   1ccfc:	4b38      	ldr	r3, [pc, #224]	; (1cde0 <vTaskSuspend+0x120>)
   1ccfe:	4798      	blx	r3
   1cd00:	0003      	movs	r3, r0
   1cd02:	001a      	movs	r2, r3
   1cd04:	4b37      	ldr	r3, [pc, #220]	; (1cde4 <vTaskSuspend+0x124>)
   1cd06:	881b      	ldrh	r3, [r3, #0]
   1cd08:	4013      	ands	r3, r2
   1cd0a:	b29b      	uxth	r3, r3
   1cd0c:	2b00      	cmp	r3, #0
   1cd0e:	d00a      	beq.n	1cd26 <vTaskSuspend+0x66>
   1cd10:	68fb      	ldr	r3, [r7, #12]
   1cd12:	0018      	movs	r0, r3
   1cd14:	4b34      	ldr	r3, [pc, #208]	; (1cde8 <vTaskSuspend+0x128>)
   1cd16:	4798      	blx	r3
   1cd18:	0003      	movs	r3, r0
   1cd1a:	b2db      	uxtb	r3, r3
   1cd1c:	001a      	movs	r2, r3
   1cd1e:	2103      	movs	r1, #3
   1cd20:	208a      	movs	r0, #138	; 0x8a
   1cd22:	4b32      	ldr	r3, [pc, #200]	; (1cdec <vTaskSuspend+0x12c>)
   1cd24:	4798      	blx	r3
   1cd26:	68fb      	ldr	r3, [r7, #12]
   1cd28:	0018      	movs	r0, r3
   1cd2a:	4b2f      	ldr	r3, [pc, #188]	; (1cde8 <vTaskSuspend+0x128>)
   1cd2c:	4798      	blx	r3
   1cd2e:	0003      	movs	r3, r0
   1cd30:	b2db      	uxtb	r3, r3
   1cd32:	0018      	movs	r0, r3
   1cd34:	4b2e      	ldr	r3, [pc, #184]	; (1cdf0 <vTaskSuspend+0x130>)
   1cd36:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cd38:	68fb      	ldr	r3, [r7, #12]
   1cd3a:	3304      	adds	r3, #4
   1cd3c:	0018      	movs	r0, r3
   1cd3e:	4b2d      	ldr	r3, [pc, #180]	; (1cdf4 <vTaskSuspend+0x134>)
   1cd40:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1cd42:	68fb      	ldr	r3, [r7, #12]
   1cd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cd46:	2b00      	cmp	r3, #0
   1cd48:	d004      	beq.n	1cd54 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1cd4a:	68fb      	ldr	r3, [r7, #12]
   1cd4c:	3318      	adds	r3, #24
   1cd4e:	0018      	movs	r0, r3
   1cd50:	4b28      	ldr	r3, [pc, #160]	; (1cdf4 <vTaskSuspend+0x134>)
   1cd52:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1cd54:	68fb      	ldr	r3, [r7, #12]
   1cd56:	1d1a      	adds	r2, r3, #4
   1cd58:	4b27      	ldr	r3, [pc, #156]	; (1cdf8 <vTaskSuspend+0x138>)
   1cd5a:	0011      	movs	r1, r2
   1cd5c:	0018      	movs	r0, r3
   1cd5e:	4b27      	ldr	r3, [pc, #156]	; (1cdfc <vTaskSuspend+0x13c>)
   1cd60:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1cd62:	68fb      	ldr	r3, [r7, #12]
   1cd64:	2250      	movs	r2, #80	; 0x50
   1cd66:	5c9b      	ldrb	r3, [r3, r2]
   1cd68:	b2db      	uxtb	r3, r3
   1cd6a:	2b01      	cmp	r3, #1
   1cd6c:	d103      	bne.n	1cd76 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1cd6e:	68fb      	ldr	r3, [r7, #12]
   1cd70:	2250      	movs	r2, #80	; 0x50
   1cd72:	2100      	movs	r1, #0
   1cd74:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1cd76:	4b22      	ldr	r3, [pc, #136]	; (1ce00 <vTaskSuspend+0x140>)
   1cd78:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1cd7a:	4b22      	ldr	r3, [pc, #136]	; (1ce04 <vTaskSuspend+0x144>)
   1cd7c:	681b      	ldr	r3, [r3, #0]
   1cd7e:	2b00      	cmp	r3, #0
   1cd80:	d005      	beq.n	1cd8e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1cd82:	4b14      	ldr	r3, [pc, #80]	; (1cdd4 <vTaskSuspend+0x114>)
   1cd84:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1cd86:	4b20      	ldr	r3, [pc, #128]	; (1ce08 <vTaskSuspend+0x148>)
   1cd88:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1cd8a:	4b1d      	ldr	r3, [pc, #116]	; (1ce00 <vTaskSuspend+0x140>)
   1cd8c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1cd8e:	4b12      	ldr	r3, [pc, #72]	; (1cdd8 <vTaskSuspend+0x118>)
   1cd90:	681b      	ldr	r3, [r3, #0]
   1cd92:	68fa      	ldr	r2, [r7, #12]
   1cd94:	429a      	cmp	r2, r3
   1cd96:	d118      	bne.n	1cdca <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1cd98:	4b1a      	ldr	r3, [pc, #104]	; (1ce04 <vTaskSuspend+0x144>)
   1cd9a:	681b      	ldr	r3, [r3, #0]
   1cd9c:	2b00      	cmp	r3, #0
   1cd9e:	d008      	beq.n	1cdb2 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1cda0:	4b1a      	ldr	r3, [pc, #104]	; (1ce0c <vTaskSuspend+0x14c>)
   1cda2:	681b      	ldr	r3, [r3, #0]
   1cda4:	2b00      	cmp	r3, #0
   1cda6:	d001      	beq.n	1cdac <vTaskSuspend+0xec>
   1cda8:	b672      	cpsid	i
   1cdaa:	e7fe      	b.n	1cdaa <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1cdac:	4b18      	ldr	r3, [pc, #96]	; (1ce10 <vTaskSuspend+0x150>)
   1cdae:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1cdb0:	e00b      	b.n	1cdca <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1cdb2:	4b11      	ldr	r3, [pc, #68]	; (1cdf8 <vTaskSuspend+0x138>)
   1cdb4:	681a      	ldr	r2, [r3, #0]
   1cdb6:	4b17      	ldr	r3, [pc, #92]	; (1ce14 <vTaskSuspend+0x154>)
   1cdb8:	681b      	ldr	r3, [r3, #0]
   1cdba:	429a      	cmp	r2, r3
   1cdbc:	d103      	bne.n	1cdc6 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1cdbe:	4b06      	ldr	r3, [pc, #24]	; (1cdd8 <vTaskSuspend+0x118>)
   1cdc0:	2200      	movs	r2, #0
   1cdc2:	601a      	str	r2, [r3, #0]
	}
   1cdc4:	e001      	b.n	1cdca <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1cdc6:	4b14      	ldr	r3, [pc, #80]	; (1ce18 <vTaskSuspend+0x158>)
   1cdc8:	4798      	blx	r3
	}
   1cdca:	46c0      	nop			; (mov r8, r8)
   1cdcc:	46bd      	mov	sp, r7
   1cdce:	b004      	add	sp, #16
   1cdd0:	bd80      	pop	{r7, pc}
   1cdd2:	46c0      	nop			; (mov r8, r8)
   1cdd4:	0001abe9 	.word	0x0001abe9
   1cdd8:	200040dc 	.word	0x200040dc
   1cddc:	00018e79 	.word	0x00018e79
   1cde0:	00018bdd 	.word	0x00018bdd
   1cde4:	20000110 	.word	0x20000110
   1cde8:	00018bbd 	.word	0x00018bbd
   1cdec:	000195d5 	.word	0x000195d5
   1cdf0:	00019d6d 	.word	0x00019d6d
   1cdf4:	0001aa57 	.word	0x0001aa57
   1cdf8:	200041a0 	.word	0x200041a0
   1cdfc:	0001a9a7 	.word	0x0001a9a7
   1ce00:	0001ac0d 	.word	0x0001ac0d
   1ce04:	200041c0 	.word	0x200041c0
   1ce08:	0001d8a5 	.word	0x0001d8a5
   1ce0c:	200041dc 	.word	0x200041dc
   1ce10:	0001abd1 	.word	0x0001abd1
   1ce14:	200041b4 	.word	0x200041b4
   1ce18:	0001d235 	.word	0x0001d235

0001ce1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1ce1c:	b590      	push	{r4, r7, lr}
   1ce1e:	b085      	sub	sp, #20
   1ce20:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1ce22:	4916      	ldr	r1, [pc, #88]	; (1ce7c <vTaskStartScheduler+0x60>)
   1ce24:	4816      	ldr	r0, [pc, #88]	; (1ce80 <vTaskStartScheduler+0x64>)
   1ce26:	4b17      	ldr	r3, [pc, #92]	; (1ce84 <vTaskStartScheduler+0x68>)
   1ce28:	9301      	str	r3, [sp, #4]
   1ce2a:	2300      	movs	r3, #0
   1ce2c:	9300      	str	r3, [sp, #0]
   1ce2e:	2300      	movs	r3, #0
   1ce30:	2296      	movs	r2, #150	; 0x96
   1ce32:	4c15      	ldr	r4, [pc, #84]	; (1ce88 <vTaskStartScheduler+0x6c>)
   1ce34:	47a0      	blx	r4
   1ce36:	0003      	movs	r3, r0
   1ce38:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1ce3a:	687b      	ldr	r3, [r7, #4]
   1ce3c:	2b01      	cmp	r3, #1
   1ce3e:	d103      	bne.n	1ce48 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1ce40:	4b12      	ldr	r3, [pc, #72]	; (1ce8c <vTaskStartScheduler+0x70>)
   1ce42:	4798      	blx	r3
   1ce44:	0003      	movs	r3, r0
   1ce46:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1ce48:	687b      	ldr	r3, [r7, #4]
   1ce4a:	2b01      	cmp	r3, #1
   1ce4c:	d10d      	bne.n	1ce6a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1ce4e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1ce50:	4b0f      	ldr	r3, [pc, #60]	; (1ce90 <vTaskStartScheduler+0x74>)
   1ce52:	2201      	movs	r2, #1
   1ce54:	4252      	negs	r2, r2
   1ce56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1ce58:	4b0e      	ldr	r3, [pc, #56]	; (1ce94 <vTaskStartScheduler+0x78>)
   1ce5a:	2201      	movs	r2, #1
   1ce5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1ce5e:	4b0e      	ldr	r3, [pc, #56]	; (1ce98 <vTaskStartScheduler+0x7c>)
   1ce60:	2200      	movs	r2, #0
   1ce62:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1ce64:	4b0d      	ldr	r3, [pc, #52]	; (1ce9c <vTaskStartScheduler+0x80>)
   1ce66:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1ce68:	e004      	b.n	1ce74 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1ce6a:	687b      	ldr	r3, [r7, #4]
   1ce6c:	3301      	adds	r3, #1
   1ce6e:	d101      	bne.n	1ce74 <vTaskStartScheduler+0x58>
   1ce70:	b672      	cpsid	i
   1ce72:	e7fe      	b.n	1ce72 <vTaskStartScheduler+0x56>
}
   1ce74:	46c0      	nop			; (mov r8, r8)
   1ce76:	46bd      	mov	sp, r7
   1ce78:	b003      	add	sp, #12
   1ce7a:	bd90      	pop	{r4, r7, pc}
   1ce7c:	00039204 	.word	0x00039204
   1ce80:	0001d6ed 	.word	0x0001d6ed
   1ce84:	200041d8 	.word	0x200041d8
   1ce88:	0001c845 	.word	0x0001c845
   1ce8c:	0001dead 	.word	0x0001dead
   1ce90:	200041d4 	.word	0x200041d4
   1ce94:	200041c0 	.word	0x200041c0
   1ce98:	200041b8 	.word	0x200041b8
   1ce9c:	0001ab79 	.word	0x0001ab79

0001cea0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1cea0:	b580      	push	{r7, lr}
   1cea2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1cea4:	4b03      	ldr	r3, [pc, #12]	; (1ceb4 <vTaskSuspendAll+0x14>)
   1cea6:	681b      	ldr	r3, [r3, #0]
   1cea8:	1c5a      	adds	r2, r3, #1
   1ceaa:	4b02      	ldr	r3, [pc, #8]	; (1ceb4 <vTaskSuspendAll+0x14>)
   1ceac:	601a      	str	r2, [r3, #0]
}
   1ceae:	46c0      	nop			; (mov r8, r8)
   1ceb0:	46bd      	mov	sp, r7
   1ceb2:	bd80      	pop	{r7, pc}
   1ceb4:	200041dc 	.word	0x200041dc

0001ceb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1ceb8:	b580      	push	{r7, lr}
   1ceba:	b084      	sub	sp, #16
   1cebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1cebe:	2300      	movs	r3, #0
   1cec0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1cec2:	2300      	movs	r3, #0
   1cec4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1cec6:	4b45      	ldr	r3, [pc, #276]	; (1cfdc <xTaskResumeAll+0x124>)
   1cec8:	681b      	ldr	r3, [r3, #0]
   1ceca:	2b00      	cmp	r3, #0
   1cecc:	d101      	bne.n	1ced2 <xTaskResumeAll+0x1a>
   1cece:	b672      	cpsid	i
   1ced0:	e7fe      	b.n	1ced0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1ced2:	4b43      	ldr	r3, [pc, #268]	; (1cfe0 <xTaskResumeAll+0x128>)
   1ced4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1ced6:	4b41      	ldr	r3, [pc, #260]	; (1cfdc <xTaskResumeAll+0x124>)
   1ced8:	681b      	ldr	r3, [r3, #0]
   1ceda:	1e5a      	subs	r2, r3, #1
   1cedc:	4b3f      	ldr	r3, [pc, #252]	; (1cfdc <xTaskResumeAll+0x124>)
   1cede:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cee0:	4b3e      	ldr	r3, [pc, #248]	; (1cfdc <xTaskResumeAll+0x124>)
   1cee2:	681b      	ldr	r3, [r3, #0]
   1cee4:	2b00      	cmp	r3, #0
   1cee6:	d000      	beq.n	1ceea <xTaskResumeAll+0x32>
   1cee8:	e071      	b.n	1cfce <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1ceea:	4b3e      	ldr	r3, [pc, #248]	; (1cfe4 <xTaskResumeAll+0x12c>)
   1ceec:	681b      	ldr	r3, [r3, #0]
   1ceee:	2b00      	cmp	r3, #0
   1cef0:	d100      	bne.n	1cef4 <xTaskResumeAll+0x3c>
   1cef2:	e06c      	b.n	1cfce <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1cef4:	e044      	b.n	1cf80 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1cef6:	4b3c      	ldr	r3, [pc, #240]	; (1cfe8 <xTaskResumeAll+0x130>)
   1cef8:	68db      	ldr	r3, [r3, #12]
   1cefa:	68db      	ldr	r3, [r3, #12]
   1cefc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1cefe:	68fb      	ldr	r3, [r7, #12]
   1cf00:	3318      	adds	r3, #24
   1cf02:	0018      	movs	r0, r3
   1cf04:	4b39      	ldr	r3, [pc, #228]	; (1cfec <xTaskResumeAll+0x134>)
   1cf06:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cf08:	68fb      	ldr	r3, [r7, #12]
   1cf0a:	3304      	adds	r3, #4
   1cf0c:	0018      	movs	r0, r3
   1cf0e:	4b37      	ldr	r3, [pc, #220]	; (1cfec <xTaskResumeAll+0x134>)
   1cf10:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1cf12:	68fb      	ldr	r3, [r7, #12]
   1cf14:	0018      	movs	r0, r3
   1cf16:	4b36      	ldr	r3, [pc, #216]	; (1cff0 <xTaskResumeAll+0x138>)
   1cf18:	4798      	blx	r3
   1cf1a:	0003      	movs	r3, r0
   1cf1c:	001a      	movs	r2, r3
   1cf1e:	4b35      	ldr	r3, [pc, #212]	; (1cff4 <xTaskResumeAll+0x13c>)
   1cf20:	881b      	ldrh	r3, [r3, #0]
   1cf22:	4013      	ands	r3, r2
   1cf24:	b29b      	uxth	r3, r3
   1cf26:	2b00      	cmp	r3, #0
   1cf28:	d008      	beq.n	1cf3c <xTaskResumeAll+0x84>
   1cf2a:	68fb      	ldr	r3, [r7, #12]
   1cf2c:	0018      	movs	r0, r3
   1cf2e:	4b32      	ldr	r3, [pc, #200]	; (1cff8 <xTaskResumeAll+0x140>)
   1cf30:	4798      	blx	r3
   1cf32:	0003      	movs	r3, r0
   1cf34:	b2db      	uxtb	r3, r3
   1cf36:	0018      	movs	r0, r3
   1cf38:	4b30      	ldr	r3, [pc, #192]	; (1cffc <xTaskResumeAll+0x144>)
   1cf3a:	4798      	blx	r3
   1cf3c:	68fb      	ldr	r3, [r7, #12]
   1cf3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf40:	4b2f      	ldr	r3, [pc, #188]	; (1d000 <xTaskResumeAll+0x148>)
   1cf42:	681b      	ldr	r3, [r3, #0]
   1cf44:	429a      	cmp	r2, r3
   1cf46:	d903      	bls.n	1cf50 <xTaskResumeAll+0x98>
   1cf48:	68fb      	ldr	r3, [r7, #12]
   1cf4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf4c:	4b2c      	ldr	r3, [pc, #176]	; (1d000 <xTaskResumeAll+0x148>)
   1cf4e:	601a      	str	r2, [r3, #0]
   1cf50:	68fb      	ldr	r3, [r7, #12]
   1cf52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf54:	0013      	movs	r3, r2
   1cf56:	009b      	lsls	r3, r3, #2
   1cf58:	189b      	adds	r3, r3, r2
   1cf5a:	009b      	lsls	r3, r3, #2
   1cf5c:	4a29      	ldr	r2, [pc, #164]	; (1d004 <xTaskResumeAll+0x14c>)
   1cf5e:	189a      	adds	r2, r3, r2
   1cf60:	68fb      	ldr	r3, [r7, #12]
   1cf62:	3304      	adds	r3, #4
   1cf64:	0019      	movs	r1, r3
   1cf66:	0010      	movs	r0, r2
   1cf68:	4b27      	ldr	r3, [pc, #156]	; (1d008 <xTaskResumeAll+0x150>)
   1cf6a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1cf6c:	68fb      	ldr	r3, [r7, #12]
   1cf6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf70:	4b26      	ldr	r3, [pc, #152]	; (1d00c <xTaskResumeAll+0x154>)
   1cf72:	681b      	ldr	r3, [r3, #0]
   1cf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf76:	429a      	cmp	r2, r3
   1cf78:	d302      	bcc.n	1cf80 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1cf7a:	4b25      	ldr	r3, [pc, #148]	; (1d010 <xTaskResumeAll+0x158>)
   1cf7c:	2201      	movs	r2, #1
   1cf7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1cf80:	4b19      	ldr	r3, [pc, #100]	; (1cfe8 <xTaskResumeAll+0x130>)
   1cf82:	681b      	ldr	r3, [r3, #0]
   1cf84:	2b00      	cmp	r3, #0
   1cf86:	d1b6      	bne.n	1cef6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1cf88:	68fb      	ldr	r3, [r7, #12]
   1cf8a:	2b00      	cmp	r3, #0
   1cf8c:	d001      	beq.n	1cf92 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1cf8e:	4b21      	ldr	r3, [pc, #132]	; (1d014 <xTaskResumeAll+0x15c>)
   1cf90:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1cf92:	4b21      	ldr	r3, [pc, #132]	; (1d018 <xTaskResumeAll+0x160>)
   1cf94:	681b      	ldr	r3, [r3, #0]
   1cf96:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1cf98:	687b      	ldr	r3, [r7, #4]
   1cf9a:	2b00      	cmp	r3, #0
   1cf9c:	d00f      	beq.n	1cfbe <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1cf9e:	4b1f      	ldr	r3, [pc, #124]	; (1d01c <xTaskResumeAll+0x164>)
   1cfa0:	4798      	blx	r3
   1cfa2:	1e03      	subs	r3, r0, #0
   1cfa4:	d002      	beq.n	1cfac <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1cfa6:	4b1a      	ldr	r3, [pc, #104]	; (1d010 <xTaskResumeAll+0x158>)
   1cfa8:	2201      	movs	r2, #1
   1cfaa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1cfac:	687b      	ldr	r3, [r7, #4]
   1cfae:	3b01      	subs	r3, #1
   1cfb0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1cfb2:	687b      	ldr	r3, [r7, #4]
   1cfb4:	2b00      	cmp	r3, #0
   1cfb6:	d1f2      	bne.n	1cf9e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1cfb8:	4b17      	ldr	r3, [pc, #92]	; (1d018 <xTaskResumeAll+0x160>)
   1cfba:	2200      	movs	r2, #0
   1cfbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1cfbe:	4b14      	ldr	r3, [pc, #80]	; (1d010 <xTaskResumeAll+0x158>)
   1cfc0:	681b      	ldr	r3, [r3, #0]
   1cfc2:	2b00      	cmp	r3, #0
   1cfc4:	d003      	beq.n	1cfce <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1cfc6:	2301      	movs	r3, #1
   1cfc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1cfca:	4b15      	ldr	r3, [pc, #84]	; (1d020 <xTaskResumeAll+0x168>)
   1cfcc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1cfce:	4b15      	ldr	r3, [pc, #84]	; (1d024 <xTaskResumeAll+0x16c>)
   1cfd0:	4798      	blx	r3

	return xAlreadyYielded;
   1cfd2:	68bb      	ldr	r3, [r7, #8]
}
   1cfd4:	0018      	movs	r0, r3
   1cfd6:	46bd      	mov	sp, r7
   1cfd8:	b004      	add	sp, #16
   1cfda:	bd80      	pop	{r7, pc}
   1cfdc:	200041dc 	.word	0x200041dc
   1cfe0:	0001abe9 	.word	0x0001abe9
   1cfe4:	200041b4 	.word	0x200041b4
   1cfe8:	20004174 	.word	0x20004174
   1cfec:	0001aa57 	.word	0x0001aa57
   1cff0:	00018bdd 	.word	0x00018bdd
   1cff4:	20000110 	.word	0x20000110
   1cff8:	00018bbd 	.word	0x00018bbd
   1cffc:	0001938d 	.word	0x0001938d
   1d000:	200041bc 	.word	0x200041bc
   1d004:	200040e0 	.word	0x200040e0
   1d008:	0001a9a7 	.word	0x0001a9a7
   1d00c:	200040dc 	.word	0x200040dc
   1d010:	200041c8 	.word	0x200041c8
   1d014:	0001d8a5 	.word	0x0001d8a5
   1d018:	200041c4 	.word	0x200041c4
   1d01c:	0001d045 	.word	0x0001d045
   1d020:	0001abd1 	.word	0x0001abd1
   1d024:	0001ac0d 	.word	0x0001ac0d

0001d028 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1d028:	b580      	push	{r7, lr}
   1d02a:	b082      	sub	sp, #8
   1d02c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1d02e:	4b04      	ldr	r3, [pc, #16]	; (1d040 <xTaskGetTickCount+0x18>)
   1d030:	681b      	ldr	r3, [r3, #0]
   1d032:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1d034:	687b      	ldr	r3, [r7, #4]
}
   1d036:	0018      	movs	r0, r3
   1d038:	46bd      	mov	sp, r7
   1d03a:	b002      	add	sp, #8
   1d03c:	bd80      	pop	{r7, pc}
   1d03e:	46c0      	nop			; (mov r8, r8)
   1d040:	200041b8 	.word	0x200041b8

0001d044 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1d044:	b580      	push	{r7, lr}
   1d046:	b086      	sub	sp, #24
   1d048:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1d04a:	2300      	movs	r3, #0
   1d04c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1d04e:	4b64      	ldr	r3, [pc, #400]	; (1d1e0 <xTaskIncrementTick+0x19c>)
   1d050:	681b      	ldr	r3, [r3, #0]
   1d052:	2b01      	cmp	r3, #1
   1d054:	d003      	beq.n	1d05e <xTaskIncrementTick+0x1a>
   1d056:	4b63      	ldr	r3, [pc, #396]	; (1d1e4 <xTaskIncrementTick+0x1a0>)
   1d058:	681b      	ldr	r3, [r3, #0]
   1d05a:	2b00      	cmp	r3, #0
   1d05c:	d107      	bne.n	1d06e <xTaskIncrementTick+0x2a>
   1d05e:	4b62      	ldr	r3, [pc, #392]	; (1d1e8 <xTaskIncrementTick+0x1a4>)
   1d060:	681b      	ldr	r3, [r3, #0]
   1d062:	1c5a      	adds	r2, r3, #1
   1d064:	4b60      	ldr	r3, [pc, #384]	; (1d1e8 <xTaskIncrementTick+0x1a4>)
   1d066:	601a      	str	r2, [r3, #0]
   1d068:	2000      	movs	r0, #0
   1d06a:	4b60      	ldr	r3, [pc, #384]	; (1d1ec <xTaskIncrementTick+0x1a8>)
   1d06c:	4798      	blx	r3
   1d06e:	4b5c      	ldr	r3, [pc, #368]	; (1d1e0 <xTaskIncrementTick+0x19c>)
   1d070:	681b      	ldr	r3, [r3, #0]
   1d072:	2b00      	cmp	r3, #0
   1d074:	d106      	bne.n	1d084 <xTaskIncrementTick+0x40>
   1d076:	4b5e      	ldr	r3, [pc, #376]	; (1d1f0 <xTaskIncrementTick+0x1ac>)
   1d078:	681b      	ldr	r3, [r3, #0]
   1d07a:	3301      	adds	r3, #1
   1d07c:	0019      	movs	r1, r3
   1d07e:	2003      	movs	r0, #3
   1d080:	4b5c      	ldr	r3, [pc, #368]	; (1d1f4 <xTaskIncrementTick+0x1b0>)
   1d082:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d084:	4b56      	ldr	r3, [pc, #344]	; (1d1e0 <xTaskIncrementTick+0x19c>)
   1d086:	681b      	ldr	r3, [r3, #0]
   1d088:	2b00      	cmp	r3, #0
   1d08a:	d000      	beq.n	1d08e <xTaskIncrementTick+0x4a>
   1d08c:	e098      	b.n	1d1c0 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1d08e:	4b58      	ldr	r3, [pc, #352]	; (1d1f0 <xTaskIncrementTick+0x1ac>)
   1d090:	681b      	ldr	r3, [r3, #0]
   1d092:	3301      	adds	r3, #1
   1d094:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1d096:	4b56      	ldr	r3, [pc, #344]	; (1d1f0 <xTaskIncrementTick+0x1ac>)
   1d098:	693a      	ldr	r2, [r7, #16]
   1d09a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1d09c:	693b      	ldr	r3, [r7, #16]
   1d09e:	2b00      	cmp	r3, #0
   1d0a0:	d117      	bne.n	1d0d2 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1d0a2:	4b55      	ldr	r3, [pc, #340]	; (1d1f8 <xTaskIncrementTick+0x1b4>)
   1d0a4:	681b      	ldr	r3, [r3, #0]
   1d0a6:	681b      	ldr	r3, [r3, #0]
   1d0a8:	2b00      	cmp	r3, #0
   1d0aa:	d001      	beq.n	1d0b0 <xTaskIncrementTick+0x6c>
   1d0ac:	b672      	cpsid	i
   1d0ae:	e7fe      	b.n	1d0ae <xTaskIncrementTick+0x6a>
   1d0b0:	4b51      	ldr	r3, [pc, #324]	; (1d1f8 <xTaskIncrementTick+0x1b4>)
   1d0b2:	681b      	ldr	r3, [r3, #0]
   1d0b4:	60fb      	str	r3, [r7, #12]
   1d0b6:	4b51      	ldr	r3, [pc, #324]	; (1d1fc <xTaskIncrementTick+0x1b8>)
   1d0b8:	681a      	ldr	r2, [r3, #0]
   1d0ba:	4b4f      	ldr	r3, [pc, #316]	; (1d1f8 <xTaskIncrementTick+0x1b4>)
   1d0bc:	601a      	str	r2, [r3, #0]
   1d0be:	4b4f      	ldr	r3, [pc, #316]	; (1d1fc <xTaskIncrementTick+0x1b8>)
   1d0c0:	68fa      	ldr	r2, [r7, #12]
   1d0c2:	601a      	str	r2, [r3, #0]
   1d0c4:	4b4e      	ldr	r3, [pc, #312]	; (1d200 <xTaskIncrementTick+0x1bc>)
   1d0c6:	681b      	ldr	r3, [r3, #0]
   1d0c8:	1c5a      	adds	r2, r3, #1
   1d0ca:	4b4d      	ldr	r3, [pc, #308]	; (1d200 <xTaskIncrementTick+0x1bc>)
   1d0cc:	601a      	str	r2, [r3, #0]
   1d0ce:	4b4d      	ldr	r3, [pc, #308]	; (1d204 <xTaskIncrementTick+0x1c0>)
   1d0d0:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1d0d2:	4b4d      	ldr	r3, [pc, #308]	; (1d208 <xTaskIncrementTick+0x1c4>)
   1d0d4:	681b      	ldr	r3, [r3, #0]
   1d0d6:	693a      	ldr	r2, [r7, #16]
   1d0d8:	429a      	cmp	r2, r3
   1d0da:	d363      	bcc.n	1d1a4 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d0dc:	4b46      	ldr	r3, [pc, #280]	; (1d1f8 <xTaskIncrementTick+0x1b4>)
   1d0de:	681b      	ldr	r3, [r3, #0]
   1d0e0:	681b      	ldr	r3, [r3, #0]
   1d0e2:	2b00      	cmp	r3, #0
   1d0e4:	d101      	bne.n	1d0ea <xTaskIncrementTick+0xa6>
   1d0e6:	2301      	movs	r3, #1
   1d0e8:	e000      	b.n	1d0ec <xTaskIncrementTick+0xa8>
   1d0ea:	2300      	movs	r3, #0
   1d0ec:	2b00      	cmp	r3, #0
   1d0ee:	d004      	beq.n	1d0fa <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d0f0:	4b45      	ldr	r3, [pc, #276]	; (1d208 <xTaskIncrementTick+0x1c4>)
   1d0f2:	2201      	movs	r2, #1
   1d0f4:	4252      	negs	r2, r2
   1d0f6:	601a      	str	r2, [r3, #0]
					break;
   1d0f8:	e054      	b.n	1d1a4 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d0fa:	4b3f      	ldr	r3, [pc, #252]	; (1d1f8 <xTaskIncrementTick+0x1b4>)
   1d0fc:	681b      	ldr	r3, [r3, #0]
   1d0fe:	68db      	ldr	r3, [r3, #12]
   1d100:	68db      	ldr	r3, [r3, #12]
   1d102:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1d104:	68bb      	ldr	r3, [r7, #8]
   1d106:	685b      	ldr	r3, [r3, #4]
   1d108:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1d10a:	693a      	ldr	r2, [r7, #16]
   1d10c:	687b      	ldr	r3, [r7, #4]
   1d10e:	429a      	cmp	r2, r3
   1d110:	d203      	bcs.n	1d11a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1d112:	4b3d      	ldr	r3, [pc, #244]	; (1d208 <xTaskIncrementTick+0x1c4>)
   1d114:	687a      	ldr	r2, [r7, #4]
   1d116:	601a      	str	r2, [r3, #0]
						break;
   1d118:	e044      	b.n	1d1a4 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d11a:	68bb      	ldr	r3, [r7, #8]
   1d11c:	3304      	adds	r3, #4
   1d11e:	0018      	movs	r0, r3
   1d120:	4b3a      	ldr	r3, [pc, #232]	; (1d20c <xTaskIncrementTick+0x1c8>)
   1d122:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1d124:	68bb      	ldr	r3, [r7, #8]
   1d126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d128:	2b00      	cmp	r3, #0
   1d12a:	d004      	beq.n	1d136 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d12c:	68bb      	ldr	r3, [r7, #8]
   1d12e:	3318      	adds	r3, #24
   1d130:	0018      	movs	r0, r3
   1d132:	4b36      	ldr	r3, [pc, #216]	; (1d20c <xTaskIncrementTick+0x1c8>)
   1d134:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1d136:	68bb      	ldr	r3, [r7, #8]
   1d138:	0018      	movs	r0, r3
   1d13a:	4b35      	ldr	r3, [pc, #212]	; (1d210 <xTaskIncrementTick+0x1cc>)
   1d13c:	4798      	blx	r3
   1d13e:	0003      	movs	r3, r0
   1d140:	001a      	movs	r2, r3
   1d142:	4b34      	ldr	r3, [pc, #208]	; (1d214 <xTaskIncrementTick+0x1d0>)
   1d144:	881b      	ldrh	r3, [r3, #0]
   1d146:	4013      	ands	r3, r2
   1d148:	b29b      	uxth	r3, r3
   1d14a:	2b00      	cmp	r3, #0
   1d14c:	d008      	beq.n	1d160 <xTaskIncrementTick+0x11c>
   1d14e:	68bb      	ldr	r3, [r7, #8]
   1d150:	0018      	movs	r0, r3
   1d152:	4b31      	ldr	r3, [pc, #196]	; (1d218 <xTaskIncrementTick+0x1d4>)
   1d154:	4798      	blx	r3
   1d156:	0003      	movs	r3, r0
   1d158:	b2db      	uxtb	r3, r3
   1d15a:	0018      	movs	r0, r3
   1d15c:	4b2f      	ldr	r3, [pc, #188]	; (1d21c <xTaskIncrementTick+0x1d8>)
   1d15e:	4798      	blx	r3
   1d160:	68bb      	ldr	r3, [r7, #8]
   1d162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d164:	4b2e      	ldr	r3, [pc, #184]	; (1d220 <xTaskIncrementTick+0x1dc>)
   1d166:	681b      	ldr	r3, [r3, #0]
   1d168:	429a      	cmp	r2, r3
   1d16a:	d903      	bls.n	1d174 <xTaskIncrementTick+0x130>
   1d16c:	68bb      	ldr	r3, [r7, #8]
   1d16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d170:	4b2b      	ldr	r3, [pc, #172]	; (1d220 <xTaskIncrementTick+0x1dc>)
   1d172:	601a      	str	r2, [r3, #0]
   1d174:	68bb      	ldr	r3, [r7, #8]
   1d176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d178:	0013      	movs	r3, r2
   1d17a:	009b      	lsls	r3, r3, #2
   1d17c:	189b      	adds	r3, r3, r2
   1d17e:	009b      	lsls	r3, r3, #2
   1d180:	4a28      	ldr	r2, [pc, #160]	; (1d224 <xTaskIncrementTick+0x1e0>)
   1d182:	189a      	adds	r2, r3, r2
   1d184:	68bb      	ldr	r3, [r7, #8]
   1d186:	3304      	adds	r3, #4
   1d188:	0019      	movs	r1, r3
   1d18a:	0010      	movs	r0, r2
   1d18c:	4b26      	ldr	r3, [pc, #152]	; (1d228 <xTaskIncrementTick+0x1e4>)
   1d18e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1d190:	68bb      	ldr	r3, [r7, #8]
   1d192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d194:	4b25      	ldr	r3, [pc, #148]	; (1d22c <xTaskIncrementTick+0x1e8>)
   1d196:	681b      	ldr	r3, [r3, #0]
   1d198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d19a:	429a      	cmp	r2, r3
   1d19c:	d39e      	bcc.n	1d0dc <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1d19e:	2301      	movs	r3, #1
   1d1a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d1a2:	e79b      	b.n	1d0dc <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1d1a4:	4b21      	ldr	r3, [pc, #132]	; (1d22c <xTaskIncrementTick+0x1e8>)
   1d1a6:	681b      	ldr	r3, [r3, #0]
   1d1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1aa:	491e      	ldr	r1, [pc, #120]	; (1d224 <xTaskIncrementTick+0x1e0>)
   1d1ac:	0013      	movs	r3, r2
   1d1ae:	009b      	lsls	r3, r3, #2
   1d1b0:	189b      	adds	r3, r3, r2
   1d1b2:	009b      	lsls	r3, r3, #2
   1d1b4:	585b      	ldr	r3, [r3, r1]
   1d1b6:	2b01      	cmp	r3, #1
   1d1b8:	d907      	bls.n	1d1ca <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1d1ba:	2301      	movs	r3, #1
   1d1bc:	617b      	str	r3, [r7, #20]
   1d1be:	e004      	b.n	1d1ca <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1d1c0:	4b08      	ldr	r3, [pc, #32]	; (1d1e4 <xTaskIncrementTick+0x1a0>)
   1d1c2:	681b      	ldr	r3, [r3, #0]
   1d1c4:	1c5a      	adds	r2, r3, #1
   1d1c6:	4b07      	ldr	r3, [pc, #28]	; (1d1e4 <xTaskIncrementTick+0x1a0>)
   1d1c8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1d1ca:	4b19      	ldr	r3, [pc, #100]	; (1d230 <xTaskIncrementTick+0x1ec>)
   1d1cc:	681b      	ldr	r3, [r3, #0]
   1d1ce:	2b00      	cmp	r3, #0
   1d1d0:	d001      	beq.n	1d1d6 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1d1d2:	2301      	movs	r3, #1
   1d1d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1d1d6:	697b      	ldr	r3, [r7, #20]
}
   1d1d8:	0018      	movs	r0, r3
   1d1da:	46bd      	mov	sp, r7
   1d1dc:	b006      	add	sp, #24
   1d1de:	bd80      	pop	{r7, pc}
   1d1e0:	200041dc 	.word	0x200041dc
   1d1e4:	200041c4 	.word	0x200041c4
   1d1e8:	20000d3c 	.word	0x20000d3c
   1d1ec:	0001a871 	.word	0x0001a871
   1d1f0:	200041b8 	.word	0x200041b8
   1d1f4:	000198dd 	.word	0x000198dd
   1d1f8:	2000416c 	.word	0x2000416c
   1d1fc:	20004170 	.word	0x20004170
   1d200:	200041cc 	.word	0x200041cc
   1d204:	0001d8a5 	.word	0x0001d8a5
   1d208:	200041d4 	.word	0x200041d4
   1d20c:	0001aa57 	.word	0x0001aa57
   1d210:	00018bdd 	.word	0x00018bdd
   1d214:	20000110 	.word	0x20000110
   1d218:	00018bbd 	.word	0x00018bbd
   1d21c:	0001938d 	.word	0x0001938d
   1d220:	200041bc 	.word	0x200041bc
   1d224:	200040e0 	.word	0x200040e0
   1d228:	0001a9a7 	.word	0x0001a9a7
   1d22c:	200040dc 	.word	0x200040dc
   1d230:	200041c8 	.word	0x200041c8

0001d234 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1d234:	b580      	push	{r7, lr}
   1d236:	b082      	sub	sp, #8
   1d238:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1d23a:	4b3a      	ldr	r3, [pc, #232]	; (1d324 <vTaskSwitchContext+0xf0>)
   1d23c:	681b      	ldr	r3, [r3, #0]
   1d23e:	2b00      	cmp	r3, #0
   1d240:	d003      	beq.n	1d24a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1d242:	4b39      	ldr	r3, [pc, #228]	; (1d328 <vTaskSwitchContext+0xf4>)
   1d244:	2201      	movs	r2, #1
   1d246:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1d248:	e067      	b.n	1d31a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1d24a:	4b37      	ldr	r3, [pc, #220]	; (1d328 <vTaskSwitchContext+0xf4>)
   1d24c:	2200      	movs	r2, #0
   1d24e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1d250:	4b36      	ldr	r3, [pc, #216]	; (1d32c <vTaskSwitchContext+0xf8>)
   1d252:	681b      	ldr	r3, [r3, #0]
   1d254:	681a      	ldr	r2, [r3, #0]
   1d256:	4b35      	ldr	r3, [pc, #212]	; (1d32c <vTaskSwitchContext+0xf8>)
   1d258:	681b      	ldr	r3, [r3, #0]
   1d25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d25c:	429a      	cmp	r2, r3
   1d25e:	d808      	bhi.n	1d272 <vTaskSwitchContext+0x3e>
   1d260:	4b32      	ldr	r3, [pc, #200]	; (1d32c <vTaskSwitchContext+0xf8>)
   1d262:	681a      	ldr	r2, [r3, #0]
   1d264:	4b31      	ldr	r3, [pc, #196]	; (1d32c <vTaskSwitchContext+0xf8>)
   1d266:	681b      	ldr	r3, [r3, #0]
   1d268:	3334      	adds	r3, #52	; 0x34
   1d26a:	0019      	movs	r1, r3
   1d26c:	0010      	movs	r0, r2
   1d26e:	4b30      	ldr	r3, [pc, #192]	; (1d330 <vTaskSwitchContext+0xfc>)
   1d270:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1d272:	4b30      	ldr	r3, [pc, #192]	; (1d334 <vTaskSwitchContext+0x100>)
   1d274:	681b      	ldr	r3, [r3, #0]
   1d276:	607b      	str	r3, [r7, #4]
   1d278:	e007      	b.n	1d28a <vTaskSwitchContext+0x56>
   1d27a:	687b      	ldr	r3, [r7, #4]
   1d27c:	2b00      	cmp	r3, #0
   1d27e:	d101      	bne.n	1d284 <vTaskSwitchContext+0x50>
   1d280:	b672      	cpsid	i
   1d282:	e7fe      	b.n	1d282 <vTaskSwitchContext+0x4e>
   1d284:	687b      	ldr	r3, [r7, #4]
   1d286:	3b01      	subs	r3, #1
   1d288:	607b      	str	r3, [r7, #4]
   1d28a:	492b      	ldr	r1, [pc, #172]	; (1d338 <vTaskSwitchContext+0x104>)
   1d28c:	687a      	ldr	r2, [r7, #4]
   1d28e:	0013      	movs	r3, r2
   1d290:	009b      	lsls	r3, r3, #2
   1d292:	189b      	adds	r3, r3, r2
   1d294:	009b      	lsls	r3, r3, #2
   1d296:	585b      	ldr	r3, [r3, r1]
   1d298:	2b00      	cmp	r3, #0
   1d29a:	d0ee      	beq.n	1d27a <vTaskSwitchContext+0x46>
   1d29c:	687a      	ldr	r2, [r7, #4]
   1d29e:	0013      	movs	r3, r2
   1d2a0:	009b      	lsls	r3, r3, #2
   1d2a2:	189b      	adds	r3, r3, r2
   1d2a4:	009b      	lsls	r3, r3, #2
   1d2a6:	4a24      	ldr	r2, [pc, #144]	; (1d338 <vTaskSwitchContext+0x104>)
   1d2a8:	189b      	adds	r3, r3, r2
   1d2aa:	603b      	str	r3, [r7, #0]
   1d2ac:	683b      	ldr	r3, [r7, #0]
   1d2ae:	685b      	ldr	r3, [r3, #4]
   1d2b0:	685a      	ldr	r2, [r3, #4]
   1d2b2:	683b      	ldr	r3, [r7, #0]
   1d2b4:	605a      	str	r2, [r3, #4]
   1d2b6:	683b      	ldr	r3, [r7, #0]
   1d2b8:	685a      	ldr	r2, [r3, #4]
   1d2ba:	683b      	ldr	r3, [r7, #0]
   1d2bc:	3308      	adds	r3, #8
   1d2be:	429a      	cmp	r2, r3
   1d2c0:	d104      	bne.n	1d2cc <vTaskSwitchContext+0x98>
   1d2c2:	683b      	ldr	r3, [r7, #0]
   1d2c4:	685b      	ldr	r3, [r3, #4]
   1d2c6:	685a      	ldr	r2, [r3, #4]
   1d2c8:	683b      	ldr	r3, [r7, #0]
   1d2ca:	605a      	str	r2, [r3, #4]
   1d2cc:	683b      	ldr	r3, [r7, #0]
   1d2ce:	685b      	ldr	r3, [r3, #4]
   1d2d0:	68da      	ldr	r2, [r3, #12]
   1d2d2:	4b16      	ldr	r3, [pc, #88]	; (1d32c <vTaskSwitchContext+0xf8>)
   1d2d4:	601a      	str	r2, [r3, #0]
   1d2d6:	4b17      	ldr	r3, [pc, #92]	; (1d334 <vTaskSwitchContext+0x100>)
   1d2d8:	687a      	ldr	r2, [r7, #4]
   1d2da:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1d2dc:	4b17      	ldr	r3, [pc, #92]	; (1d33c <vTaskSwitchContext+0x108>)
   1d2de:	2201      	movs	r2, #1
   1d2e0:	601a      	str	r2, [r3, #0]
   1d2e2:	4b17      	ldr	r3, [pc, #92]	; (1d340 <vTaskSwitchContext+0x10c>)
   1d2e4:	4798      	blx	r3
   1d2e6:	0003      	movs	r3, r0
   1d2e8:	0018      	movs	r0, r3
   1d2ea:	4b16      	ldr	r3, [pc, #88]	; (1d344 <vTaskSwitchContext+0x110>)
   1d2ec:	4798      	blx	r3
   1d2ee:	0003      	movs	r3, r0
   1d2f0:	001a      	movs	r2, r3
   1d2f2:	4b15      	ldr	r3, [pc, #84]	; (1d348 <vTaskSwitchContext+0x114>)
   1d2f4:	881b      	ldrh	r3, [r3, #0]
   1d2f6:	4013      	ands	r3, r2
   1d2f8:	b29b      	uxth	r3, r3
   1d2fa:	2b00      	cmp	r3, #0
   1d2fc:	d00a      	beq.n	1d314 <vTaskSwitchContext+0xe0>
   1d2fe:	4b10      	ldr	r3, [pc, #64]	; (1d340 <vTaskSwitchContext+0x10c>)
   1d300:	4798      	blx	r3
   1d302:	0003      	movs	r3, r0
   1d304:	0018      	movs	r0, r3
   1d306:	4b11      	ldr	r3, [pc, #68]	; (1d34c <vTaskSwitchContext+0x118>)
   1d308:	4798      	blx	r3
   1d30a:	0003      	movs	r3, r0
   1d30c:	b2db      	uxtb	r3, r3
   1d30e:	0018      	movs	r0, r3
   1d310:	4b0f      	ldr	r3, [pc, #60]	; (1d350 <vTaskSwitchContext+0x11c>)
   1d312:	4798      	blx	r3
   1d314:	4b09      	ldr	r3, [pc, #36]	; (1d33c <vTaskSwitchContext+0x108>)
   1d316:	2202      	movs	r2, #2
   1d318:	601a      	str	r2, [r3, #0]
}
   1d31a:	46c0      	nop			; (mov r8, r8)
   1d31c:	46bd      	mov	sp, r7
   1d31e:	b002      	add	sp, #8
   1d320:	bd80      	pop	{r7, pc}
   1d322:	46c0      	nop			; (mov r8, r8)
   1d324:	200041dc 	.word	0x200041dc
   1d328:	200041c8 	.word	0x200041c8
   1d32c:	200040dc 	.word	0x200040dc
   1d330:	0003361d 	.word	0x0003361d
   1d334:	200041bc 	.word	0x200041bc
   1d338:	200040e0 	.word	0x200040e0
   1d33c:	20000d48 	.word	0x20000d48
   1d340:	00018e79 	.word	0x00018e79
   1d344:	00018bdd 	.word	0x00018bdd
   1d348:	20000110 	.word	0x20000110
   1d34c:	00018bbd 	.word	0x00018bbd
   1d350:	000199d9 	.word	0x000199d9

0001d354 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1d354:	b580      	push	{r7, lr}
   1d356:	b082      	sub	sp, #8
   1d358:	af00      	add	r7, sp, #0
   1d35a:	6078      	str	r0, [r7, #4]
   1d35c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1d35e:	687b      	ldr	r3, [r7, #4]
   1d360:	2b00      	cmp	r3, #0
   1d362:	d101      	bne.n	1d368 <vTaskPlaceOnEventList+0x14>
   1d364:	b672      	cpsid	i
   1d366:	e7fe      	b.n	1d366 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d368:	4b08      	ldr	r3, [pc, #32]	; (1d38c <vTaskPlaceOnEventList+0x38>)
   1d36a:	681b      	ldr	r3, [r3, #0]
   1d36c:	3318      	adds	r3, #24
   1d36e:	001a      	movs	r2, r3
   1d370:	687b      	ldr	r3, [r7, #4]
   1d372:	0011      	movs	r1, r2
   1d374:	0018      	movs	r0, r3
   1d376:	4b06      	ldr	r3, [pc, #24]	; (1d390 <vTaskPlaceOnEventList+0x3c>)
   1d378:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1d37a:	683b      	ldr	r3, [r7, #0]
   1d37c:	2101      	movs	r1, #1
   1d37e:	0018      	movs	r0, r3
   1d380:	4b04      	ldr	r3, [pc, #16]	; (1d394 <vTaskPlaceOnEventList+0x40>)
   1d382:	4798      	blx	r3
}
   1d384:	46c0      	nop			; (mov r8, r8)
   1d386:	46bd      	mov	sp, r7
   1d388:	b002      	add	sp, #8
   1d38a:	bd80      	pop	{r7, pc}
   1d38c:	200040dc 	.word	0x200040dc
   1d390:	0001a9eb 	.word	0x0001a9eb
   1d394:	0001ddf9 	.word	0x0001ddf9

0001d398 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1d398:	b580      	push	{r7, lr}
   1d39a:	b084      	sub	sp, #16
   1d39c:	af00      	add	r7, sp, #0
   1d39e:	60f8      	str	r0, [r7, #12]
   1d3a0:	60b9      	str	r1, [r7, #8]
   1d3a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1d3a4:	68fb      	ldr	r3, [r7, #12]
   1d3a6:	2b00      	cmp	r3, #0
   1d3a8:	d101      	bne.n	1d3ae <vTaskPlaceOnEventListRestricted+0x16>
   1d3aa:	b672      	cpsid	i
   1d3ac:	e7fe      	b.n	1d3ac <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d3ae:	4b28      	ldr	r3, [pc, #160]	; (1d450 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d3b0:	681b      	ldr	r3, [r3, #0]
   1d3b2:	3318      	adds	r3, #24
   1d3b4:	001a      	movs	r2, r3
   1d3b6:	68fb      	ldr	r3, [r7, #12]
   1d3b8:	0011      	movs	r1, r2
   1d3ba:	0018      	movs	r0, r3
   1d3bc:	4b25      	ldr	r3, [pc, #148]	; (1d454 <vTaskPlaceOnEventListRestricted+0xbc>)
   1d3be:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1d3c0:	687b      	ldr	r3, [r7, #4]
   1d3c2:	2b00      	cmp	r3, #0
   1d3c4:	d002      	beq.n	1d3cc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1d3c6:	2301      	movs	r3, #1
   1d3c8:	425b      	negs	r3, r3
   1d3ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1d3cc:	4b20      	ldr	r3, [pc, #128]	; (1d450 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d3ce:	681b      	ldr	r3, [r3, #0]
   1d3d0:	0018      	movs	r0, r3
   1d3d2:	4b21      	ldr	r3, [pc, #132]	; (1d458 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d3d4:	4798      	blx	r3
   1d3d6:	0003      	movs	r3, r0
   1d3d8:	001a      	movs	r2, r3
   1d3da:	4b20      	ldr	r3, [pc, #128]	; (1d45c <vTaskPlaceOnEventListRestricted+0xc4>)
   1d3dc:	881b      	ldrh	r3, [r3, #0]
   1d3de:	4013      	ands	r3, r2
   1d3e0:	b29b      	uxth	r3, r3
   1d3e2:	2b00      	cmp	r3, #0
   1d3e4:	d011      	beq.n	1d40a <vTaskPlaceOnEventListRestricted+0x72>
   1d3e6:	4b1e      	ldr	r3, [pc, #120]	; (1d460 <vTaskPlaceOnEventListRestricted+0xc8>)
   1d3e8:	681a      	ldr	r2, [r3, #0]
   1d3ea:	68bb      	ldr	r3, [r7, #8]
   1d3ec:	18d3      	adds	r3, r2, r3
   1d3ee:	0019      	movs	r1, r3
   1d3f0:	2088      	movs	r0, #136	; 0x88
   1d3f2:	4b1c      	ldr	r3, [pc, #112]	; (1d464 <vTaskPlaceOnEventListRestricted+0xcc>)
   1d3f4:	4798      	blx	r3
   1d3f6:	4b16      	ldr	r3, [pc, #88]	; (1d450 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d3f8:	681b      	ldr	r3, [r3, #0]
   1d3fa:	0018      	movs	r0, r3
   1d3fc:	4b1a      	ldr	r3, [pc, #104]	; (1d468 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d3fe:	4798      	blx	r3
   1d400:	0003      	movs	r3, r0
   1d402:	b2db      	uxtb	r3, r3
   1d404:	0018      	movs	r0, r3
   1d406:	4b19      	ldr	r3, [pc, #100]	; (1d46c <vTaskPlaceOnEventListRestricted+0xd4>)
   1d408:	4798      	blx	r3
   1d40a:	4b19      	ldr	r3, [pc, #100]	; (1d470 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d40c:	4798      	blx	r3
   1d40e:	0003      	movs	r3, r0
   1d410:	0018      	movs	r0, r3
   1d412:	4b11      	ldr	r3, [pc, #68]	; (1d458 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d414:	4798      	blx	r3
   1d416:	0003      	movs	r3, r0
   1d418:	001a      	movs	r2, r3
   1d41a:	4b10      	ldr	r3, [pc, #64]	; (1d45c <vTaskPlaceOnEventListRestricted+0xc4>)
   1d41c:	881b      	ldrh	r3, [r3, #0]
   1d41e:	4013      	ands	r3, r2
   1d420:	b29b      	uxth	r3, r3
   1d422:	2b00      	cmp	r3, #0
   1d424:	d00a      	beq.n	1d43c <vTaskPlaceOnEventListRestricted+0xa4>
   1d426:	4b12      	ldr	r3, [pc, #72]	; (1d470 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d428:	4798      	blx	r3
   1d42a:	0003      	movs	r3, r0
   1d42c:	0018      	movs	r0, r3
   1d42e:	4b0e      	ldr	r3, [pc, #56]	; (1d468 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d430:	4798      	blx	r3
   1d432:	0003      	movs	r3, r0
   1d434:	b2db      	uxtb	r3, r3
   1d436:	0018      	movs	r0, r3
   1d438:	4b0c      	ldr	r3, [pc, #48]	; (1d46c <vTaskPlaceOnEventListRestricted+0xd4>)
   1d43a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1d43c:	687a      	ldr	r2, [r7, #4]
   1d43e:	68bb      	ldr	r3, [r7, #8]
   1d440:	0011      	movs	r1, r2
   1d442:	0018      	movs	r0, r3
   1d444:	4b0b      	ldr	r3, [pc, #44]	; (1d474 <vTaskPlaceOnEventListRestricted+0xdc>)
   1d446:	4798      	blx	r3
	}
   1d448:	46c0      	nop			; (mov r8, r8)
   1d44a:	46bd      	mov	sp, r7
   1d44c:	b004      	add	sp, #16
   1d44e:	bd80      	pop	{r7, pc}
   1d450:	200040dc 	.word	0x200040dc
   1d454:	0001a9a7 	.word	0x0001a9a7
   1d458:	00018bdd 	.word	0x00018bdd
   1d45c:	20000110 	.word	0x20000110
   1d460:	200041b8 	.word	0x200041b8
   1d464:	000198dd 	.word	0x000198dd
   1d468:	00018bbd 	.word	0x00018bbd
   1d46c:	00019d6d 	.word	0x00019d6d
   1d470:	00018e79 	.word	0x00018e79
   1d474:	0001ddf9 	.word	0x0001ddf9

0001d478 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1d478:	b580      	push	{r7, lr}
   1d47a:	b084      	sub	sp, #16
   1d47c:	af00      	add	r7, sp, #0
   1d47e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1d480:	687b      	ldr	r3, [r7, #4]
   1d482:	68db      	ldr	r3, [r3, #12]
   1d484:	68db      	ldr	r3, [r3, #12]
   1d486:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1d488:	68bb      	ldr	r3, [r7, #8]
   1d48a:	2b00      	cmp	r3, #0
   1d48c:	d101      	bne.n	1d492 <xTaskRemoveFromEventList+0x1a>
   1d48e:	b672      	cpsid	i
   1d490:	e7fe      	b.n	1d490 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1d492:	68bb      	ldr	r3, [r7, #8]
   1d494:	3318      	adds	r3, #24
   1d496:	0018      	movs	r0, r3
   1d498:	4b2a      	ldr	r3, [pc, #168]	; (1d544 <xTaskRemoveFromEventList+0xcc>)
   1d49a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d49c:	4b2a      	ldr	r3, [pc, #168]	; (1d548 <xTaskRemoveFromEventList+0xd0>)
   1d49e:	681b      	ldr	r3, [r3, #0]
   1d4a0:	2b00      	cmp	r3, #0
   1d4a2:	d132      	bne.n	1d50a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1d4a4:	68bb      	ldr	r3, [r7, #8]
   1d4a6:	3304      	adds	r3, #4
   1d4a8:	0018      	movs	r0, r3
   1d4aa:	4b26      	ldr	r3, [pc, #152]	; (1d544 <xTaskRemoveFromEventList+0xcc>)
   1d4ac:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1d4ae:	68bb      	ldr	r3, [r7, #8]
   1d4b0:	0018      	movs	r0, r3
   1d4b2:	4b26      	ldr	r3, [pc, #152]	; (1d54c <xTaskRemoveFromEventList+0xd4>)
   1d4b4:	4798      	blx	r3
   1d4b6:	0003      	movs	r3, r0
   1d4b8:	001a      	movs	r2, r3
   1d4ba:	4b25      	ldr	r3, [pc, #148]	; (1d550 <xTaskRemoveFromEventList+0xd8>)
   1d4bc:	881b      	ldrh	r3, [r3, #0]
   1d4be:	4013      	ands	r3, r2
   1d4c0:	b29b      	uxth	r3, r3
   1d4c2:	2b00      	cmp	r3, #0
   1d4c4:	d008      	beq.n	1d4d8 <xTaskRemoveFromEventList+0x60>
   1d4c6:	68bb      	ldr	r3, [r7, #8]
   1d4c8:	0018      	movs	r0, r3
   1d4ca:	4b22      	ldr	r3, [pc, #136]	; (1d554 <xTaskRemoveFromEventList+0xdc>)
   1d4cc:	4798      	blx	r3
   1d4ce:	0003      	movs	r3, r0
   1d4d0:	b2db      	uxtb	r3, r3
   1d4d2:	0018      	movs	r0, r3
   1d4d4:	4b20      	ldr	r3, [pc, #128]	; (1d558 <xTaskRemoveFromEventList+0xe0>)
   1d4d6:	4798      	blx	r3
   1d4d8:	68bb      	ldr	r3, [r7, #8]
   1d4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d4dc:	4b1f      	ldr	r3, [pc, #124]	; (1d55c <xTaskRemoveFromEventList+0xe4>)
   1d4de:	681b      	ldr	r3, [r3, #0]
   1d4e0:	429a      	cmp	r2, r3
   1d4e2:	d903      	bls.n	1d4ec <xTaskRemoveFromEventList+0x74>
   1d4e4:	68bb      	ldr	r3, [r7, #8]
   1d4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d4e8:	4b1c      	ldr	r3, [pc, #112]	; (1d55c <xTaskRemoveFromEventList+0xe4>)
   1d4ea:	601a      	str	r2, [r3, #0]
   1d4ec:	68bb      	ldr	r3, [r7, #8]
   1d4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d4f0:	0013      	movs	r3, r2
   1d4f2:	009b      	lsls	r3, r3, #2
   1d4f4:	189b      	adds	r3, r3, r2
   1d4f6:	009b      	lsls	r3, r3, #2
   1d4f8:	4a19      	ldr	r2, [pc, #100]	; (1d560 <xTaskRemoveFromEventList+0xe8>)
   1d4fa:	189a      	adds	r2, r3, r2
   1d4fc:	68bb      	ldr	r3, [r7, #8]
   1d4fe:	3304      	adds	r3, #4
   1d500:	0019      	movs	r1, r3
   1d502:	0010      	movs	r0, r2
   1d504:	4b17      	ldr	r3, [pc, #92]	; (1d564 <xTaskRemoveFromEventList+0xec>)
   1d506:	4798      	blx	r3
   1d508:	e007      	b.n	1d51a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1d50a:	68bb      	ldr	r3, [r7, #8]
   1d50c:	3318      	adds	r3, #24
   1d50e:	001a      	movs	r2, r3
   1d510:	4b15      	ldr	r3, [pc, #84]	; (1d568 <xTaskRemoveFromEventList+0xf0>)
   1d512:	0011      	movs	r1, r2
   1d514:	0018      	movs	r0, r3
   1d516:	4b13      	ldr	r3, [pc, #76]	; (1d564 <xTaskRemoveFromEventList+0xec>)
   1d518:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1d51a:	68bb      	ldr	r3, [r7, #8]
   1d51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d51e:	4b13      	ldr	r3, [pc, #76]	; (1d56c <xTaskRemoveFromEventList+0xf4>)
   1d520:	681b      	ldr	r3, [r3, #0]
   1d522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d524:	429a      	cmp	r2, r3
   1d526:	d905      	bls.n	1d534 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1d528:	2301      	movs	r3, #1
   1d52a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1d52c:	4b10      	ldr	r3, [pc, #64]	; (1d570 <xTaskRemoveFromEventList+0xf8>)
   1d52e:	2201      	movs	r2, #1
   1d530:	601a      	str	r2, [r3, #0]
   1d532:	e001      	b.n	1d538 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1d534:	2300      	movs	r3, #0
   1d536:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1d538:	68fb      	ldr	r3, [r7, #12]
}
   1d53a:	0018      	movs	r0, r3
   1d53c:	46bd      	mov	sp, r7
   1d53e:	b004      	add	sp, #16
   1d540:	bd80      	pop	{r7, pc}
   1d542:	46c0      	nop			; (mov r8, r8)
   1d544:	0001aa57 	.word	0x0001aa57
   1d548:	200041dc 	.word	0x200041dc
   1d54c:	00018bdd 	.word	0x00018bdd
   1d550:	20000110 	.word	0x20000110
   1d554:	00018bbd 	.word	0x00018bbd
   1d558:	0001938d 	.word	0x0001938d
   1d55c:	200041bc 	.word	0x200041bc
   1d560:	200040e0 	.word	0x200040e0
   1d564:	0001a9a7 	.word	0x0001a9a7
   1d568:	20004174 	.word	0x20004174
   1d56c:	200040dc 	.word	0x200040dc
   1d570:	200041c8 	.word	0x200041c8

0001d574 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d574:	b580      	push	{r7, lr}
   1d576:	b082      	sub	sp, #8
   1d578:	af00      	add	r7, sp, #0
   1d57a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1d57c:	687b      	ldr	r3, [r7, #4]
   1d57e:	2b00      	cmp	r3, #0
   1d580:	d101      	bne.n	1d586 <vTaskSetTimeOutState+0x12>
   1d582:	b672      	cpsid	i
   1d584:	e7fe      	b.n	1d584 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1d586:	4b08      	ldr	r3, [pc, #32]	; (1d5a8 <vTaskSetTimeOutState+0x34>)
   1d588:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d58a:	4b08      	ldr	r3, [pc, #32]	; (1d5ac <vTaskSetTimeOutState+0x38>)
   1d58c:	681a      	ldr	r2, [r3, #0]
   1d58e:	687b      	ldr	r3, [r7, #4]
   1d590:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1d592:	4b07      	ldr	r3, [pc, #28]	; (1d5b0 <vTaskSetTimeOutState+0x3c>)
   1d594:	681a      	ldr	r2, [r3, #0]
   1d596:	687b      	ldr	r3, [r7, #4]
   1d598:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1d59a:	4b06      	ldr	r3, [pc, #24]	; (1d5b4 <vTaskSetTimeOutState+0x40>)
   1d59c:	4798      	blx	r3
}
   1d59e:	46c0      	nop			; (mov r8, r8)
   1d5a0:	46bd      	mov	sp, r7
   1d5a2:	b002      	add	sp, #8
   1d5a4:	bd80      	pop	{r7, pc}
   1d5a6:	46c0      	nop			; (mov r8, r8)
   1d5a8:	0001abe9 	.word	0x0001abe9
   1d5ac:	200041cc 	.word	0x200041cc
   1d5b0:	200041b8 	.word	0x200041b8
   1d5b4:	0001ac0d 	.word	0x0001ac0d

0001d5b8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d5b8:	b580      	push	{r7, lr}
   1d5ba:	b082      	sub	sp, #8
   1d5bc:	af00      	add	r7, sp, #0
   1d5be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d5c0:	4b05      	ldr	r3, [pc, #20]	; (1d5d8 <vTaskInternalSetTimeOutState+0x20>)
   1d5c2:	681a      	ldr	r2, [r3, #0]
   1d5c4:	687b      	ldr	r3, [r7, #4]
   1d5c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1d5c8:	4b04      	ldr	r3, [pc, #16]	; (1d5dc <vTaskInternalSetTimeOutState+0x24>)
   1d5ca:	681a      	ldr	r2, [r3, #0]
   1d5cc:	687b      	ldr	r3, [r7, #4]
   1d5ce:	605a      	str	r2, [r3, #4]
}
   1d5d0:	46c0      	nop			; (mov r8, r8)
   1d5d2:	46bd      	mov	sp, r7
   1d5d4:	b002      	add	sp, #8
   1d5d6:	bd80      	pop	{r7, pc}
   1d5d8:	200041cc 	.word	0x200041cc
   1d5dc:	200041b8 	.word	0x200041b8

0001d5e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1d5e0:	b580      	push	{r7, lr}
   1d5e2:	b086      	sub	sp, #24
   1d5e4:	af00      	add	r7, sp, #0
   1d5e6:	6078      	str	r0, [r7, #4]
   1d5e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1d5ea:	687b      	ldr	r3, [r7, #4]
   1d5ec:	2b00      	cmp	r3, #0
   1d5ee:	d101      	bne.n	1d5f4 <xTaskCheckForTimeOut+0x14>
   1d5f0:	b672      	cpsid	i
   1d5f2:	e7fe      	b.n	1d5f2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1d5f4:	683b      	ldr	r3, [r7, #0]
   1d5f6:	2b00      	cmp	r3, #0
   1d5f8:	d101      	bne.n	1d5fe <xTaskCheckForTimeOut+0x1e>
   1d5fa:	b672      	cpsid	i
   1d5fc:	e7fe      	b.n	1d5fc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1d5fe:	4b1e      	ldr	r3, [pc, #120]	; (1d678 <xTaskCheckForTimeOut+0x98>)
   1d600:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1d602:	4b1e      	ldr	r3, [pc, #120]	; (1d67c <xTaskCheckForTimeOut+0x9c>)
   1d604:	681b      	ldr	r3, [r3, #0]
   1d606:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1d608:	687b      	ldr	r3, [r7, #4]
   1d60a:	685b      	ldr	r3, [r3, #4]
   1d60c:	693a      	ldr	r2, [r7, #16]
   1d60e:	1ad3      	subs	r3, r2, r3
   1d610:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1d612:	683b      	ldr	r3, [r7, #0]
   1d614:	681b      	ldr	r3, [r3, #0]
   1d616:	3301      	adds	r3, #1
   1d618:	d102      	bne.n	1d620 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1d61a:	2300      	movs	r3, #0
   1d61c:	617b      	str	r3, [r7, #20]
   1d61e:	e024      	b.n	1d66a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1d620:	687b      	ldr	r3, [r7, #4]
   1d622:	681a      	ldr	r2, [r3, #0]
   1d624:	4b16      	ldr	r3, [pc, #88]	; (1d680 <xTaskCheckForTimeOut+0xa0>)
   1d626:	681b      	ldr	r3, [r3, #0]
   1d628:	429a      	cmp	r2, r3
   1d62a:	d007      	beq.n	1d63c <xTaskCheckForTimeOut+0x5c>
   1d62c:	687b      	ldr	r3, [r7, #4]
   1d62e:	685a      	ldr	r2, [r3, #4]
   1d630:	693b      	ldr	r3, [r7, #16]
   1d632:	429a      	cmp	r2, r3
   1d634:	d802      	bhi.n	1d63c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1d636:	2301      	movs	r3, #1
   1d638:	617b      	str	r3, [r7, #20]
   1d63a:	e016      	b.n	1d66a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1d63c:	683b      	ldr	r3, [r7, #0]
   1d63e:	681a      	ldr	r2, [r3, #0]
   1d640:	68fb      	ldr	r3, [r7, #12]
   1d642:	429a      	cmp	r2, r3
   1d644:	d90c      	bls.n	1d660 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1d646:	683b      	ldr	r3, [r7, #0]
   1d648:	681a      	ldr	r2, [r3, #0]
   1d64a:	68fb      	ldr	r3, [r7, #12]
   1d64c:	1ad2      	subs	r2, r2, r3
   1d64e:	683b      	ldr	r3, [r7, #0]
   1d650:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1d652:	687b      	ldr	r3, [r7, #4]
   1d654:	0018      	movs	r0, r3
   1d656:	4b0b      	ldr	r3, [pc, #44]	; (1d684 <xTaskCheckForTimeOut+0xa4>)
   1d658:	4798      	blx	r3
			xReturn = pdFALSE;
   1d65a:	2300      	movs	r3, #0
   1d65c:	617b      	str	r3, [r7, #20]
   1d65e:	e004      	b.n	1d66a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1d660:	683b      	ldr	r3, [r7, #0]
   1d662:	2200      	movs	r2, #0
   1d664:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1d666:	2301      	movs	r3, #1
   1d668:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1d66a:	4b07      	ldr	r3, [pc, #28]	; (1d688 <xTaskCheckForTimeOut+0xa8>)
   1d66c:	4798      	blx	r3

	return xReturn;
   1d66e:	697b      	ldr	r3, [r7, #20]
}
   1d670:	0018      	movs	r0, r3
   1d672:	46bd      	mov	sp, r7
   1d674:	b006      	add	sp, #24
   1d676:	bd80      	pop	{r7, pc}
   1d678:	0001abe9 	.word	0x0001abe9
   1d67c:	200041b8 	.word	0x200041b8
   1d680:	200041cc 	.word	0x200041cc
   1d684:	0001d5b9 	.word	0x0001d5b9
   1d688:	0001ac0d 	.word	0x0001ac0d

0001d68c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1d68c:	b580      	push	{r7, lr}
   1d68e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1d690:	4b02      	ldr	r3, [pc, #8]	; (1d69c <vTaskMissedYield+0x10>)
   1d692:	2201      	movs	r2, #1
   1d694:	601a      	str	r2, [r3, #0]
}
   1d696:	46c0      	nop			; (mov r8, r8)
   1d698:	46bd      	mov	sp, r7
   1d69a:	bd80      	pop	{r7, pc}
   1d69c:	200041c8 	.word	0x200041c8

0001d6a0 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1d6a0:	b580      	push	{r7, lr}
   1d6a2:	b084      	sub	sp, #16
   1d6a4:	af00      	add	r7, sp, #0
   1d6a6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d6a8:	687b      	ldr	r3, [r7, #4]
   1d6aa:	2b00      	cmp	r3, #0
   1d6ac:	d005      	beq.n	1d6ba <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d6ae:	687b      	ldr	r3, [r7, #4]
   1d6b0:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1d6b2:	68bb      	ldr	r3, [r7, #8]
   1d6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d6b6:	60fb      	str	r3, [r7, #12]
   1d6b8:	e001      	b.n	1d6be <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1d6ba:	2300      	movs	r3, #0
   1d6bc:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1d6be:	68fb      	ldr	r3, [r7, #12]
	}
   1d6c0:	0018      	movs	r0, r3
   1d6c2:	46bd      	mov	sp, r7
   1d6c4:	b004      	add	sp, #16
   1d6c6:	bd80      	pop	{r7, pc}

0001d6c8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1d6c8:	b580      	push	{r7, lr}
   1d6ca:	b084      	sub	sp, #16
   1d6cc:	af00      	add	r7, sp, #0
   1d6ce:	6078      	str	r0, [r7, #4]
   1d6d0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d6d2:	687b      	ldr	r3, [r7, #4]
   1d6d4:	2b00      	cmp	r3, #0
   1d6d6:	d004      	beq.n	1d6e2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d6d8:	687b      	ldr	r3, [r7, #4]
   1d6da:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1d6dc:	68fb      	ldr	r3, [r7, #12]
   1d6de:	683a      	ldr	r2, [r7, #0]
   1d6e0:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1d6e2:	46c0      	nop			; (mov r8, r8)
   1d6e4:	46bd      	mov	sp, r7
   1d6e6:	b004      	add	sp, #16
   1d6e8:	bd80      	pop	{r7, pc}
	...

0001d6ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1d6ec:	b580      	push	{r7, lr}
   1d6ee:	b082      	sub	sp, #8
   1d6f0:	af00      	add	r7, sp, #0
   1d6f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1d6f4:	4b04      	ldr	r3, [pc, #16]	; (1d708 <prvIdleTask+0x1c>)
   1d6f6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1d6f8:	4b04      	ldr	r3, [pc, #16]	; (1d70c <prvIdleTask+0x20>)
   1d6fa:	681b      	ldr	r3, [r3, #0]
   1d6fc:	2b01      	cmp	r3, #1
   1d6fe:	d9f9      	bls.n	1d6f4 <prvIdleTask+0x8>
			{
				taskYIELD();
   1d700:	4b03      	ldr	r3, [pc, #12]	; (1d710 <prvIdleTask+0x24>)
   1d702:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1d704:	e7f6      	b.n	1d6f4 <prvIdleTask+0x8>
   1d706:	46c0      	nop			; (mov r8, r8)
   1d708:	0001d7a1 	.word	0x0001d7a1
   1d70c:	200040e0 	.word	0x200040e0
   1d710:	0001abd1 	.word	0x0001abd1

0001d714 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1d714:	b580      	push	{r7, lr}
   1d716:	b082      	sub	sp, #8
   1d718:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d71a:	2300      	movs	r3, #0
   1d71c:	607b      	str	r3, [r7, #4]
   1d71e:	e00c      	b.n	1d73a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1d720:	687a      	ldr	r2, [r7, #4]
   1d722:	0013      	movs	r3, r2
   1d724:	009b      	lsls	r3, r3, #2
   1d726:	189b      	adds	r3, r3, r2
   1d728:	009b      	lsls	r3, r3, #2
   1d72a:	4a14      	ldr	r2, [pc, #80]	; (1d77c <prvInitialiseTaskLists+0x68>)
   1d72c:	189b      	adds	r3, r3, r2
   1d72e:	0018      	movs	r0, r3
   1d730:	4b13      	ldr	r3, [pc, #76]	; (1d780 <prvInitialiseTaskLists+0x6c>)
   1d732:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d734:	687b      	ldr	r3, [r7, #4]
   1d736:	3301      	adds	r3, #1
   1d738:	607b      	str	r3, [r7, #4]
   1d73a:	687b      	ldr	r3, [r7, #4]
   1d73c:	2b04      	cmp	r3, #4
   1d73e:	d9ef      	bls.n	1d720 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1d740:	4b10      	ldr	r3, [pc, #64]	; (1d784 <prvInitialiseTaskLists+0x70>)
   1d742:	0018      	movs	r0, r3
   1d744:	4b0e      	ldr	r3, [pc, #56]	; (1d780 <prvInitialiseTaskLists+0x6c>)
   1d746:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1d748:	4b0f      	ldr	r3, [pc, #60]	; (1d788 <prvInitialiseTaskLists+0x74>)
   1d74a:	0018      	movs	r0, r3
   1d74c:	4b0c      	ldr	r3, [pc, #48]	; (1d780 <prvInitialiseTaskLists+0x6c>)
   1d74e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1d750:	4b0e      	ldr	r3, [pc, #56]	; (1d78c <prvInitialiseTaskLists+0x78>)
   1d752:	0018      	movs	r0, r3
   1d754:	4b0a      	ldr	r3, [pc, #40]	; (1d780 <prvInitialiseTaskLists+0x6c>)
   1d756:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1d758:	4b0d      	ldr	r3, [pc, #52]	; (1d790 <prvInitialiseTaskLists+0x7c>)
   1d75a:	0018      	movs	r0, r3
   1d75c:	4b08      	ldr	r3, [pc, #32]	; (1d780 <prvInitialiseTaskLists+0x6c>)
   1d75e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1d760:	4b0c      	ldr	r3, [pc, #48]	; (1d794 <prvInitialiseTaskLists+0x80>)
   1d762:	0018      	movs	r0, r3
   1d764:	4b06      	ldr	r3, [pc, #24]	; (1d780 <prvInitialiseTaskLists+0x6c>)
   1d766:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1d768:	4b0b      	ldr	r3, [pc, #44]	; (1d798 <prvInitialiseTaskLists+0x84>)
   1d76a:	4a06      	ldr	r2, [pc, #24]	; (1d784 <prvInitialiseTaskLists+0x70>)
   1d76c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1d76e:	4b0b      	ldr	r3, [pc, #44]	; (1d79c <prvInitialiseTaskLists+0x88>)
   1d770:	4a05      	ldr	r2, [pc, #20]	; (1d788 <prvInitialiseTaskLists+0x74>)
   1d772:	601a      	str	r2, [r3, #0]
}
   1d774:	46c0      	nop			; (mov r8, r8)
   1d776:	46bd      	mov	sp, r7
   1d778:	b002      	add	sp, #8
   1d77a:	bd80      	pop	{r7, pc}
   1d77c:	200040e0 	.word	0x200040e0
   1d780:	0001a955 	.word	0x0001a955
   1d784:	20004144 	.word	0x20004144
   1d788:	20004158 	.word	0x20004158
   1d78c:	20004174 	.word	0x20004174
   1d790:	20004188 	.word	0x20004188
   1d794:	200041a0 	.word	0x200041a0
   1d798:	2000416c 	.word	0x2000416c
   1d79c:	20004170 	.word	0x20004170

0001d7a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1d7a0:	b580      	push	{r7, lr}
   1d7a2:	b082      	sub	sp, #8
   1d7a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d7a6:	e01a      	b.n	1d7de <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1d7a8:	4b11      	ldr	r3, [pc, #68]	; (1d7f0 <prvCheckTasksWaitingTermination+0x50>)
   1d7aa:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1d7ac:	4b11      	ldr	r3, [pc, #68]	; (1d7f4 <prvCheckTasksWaitingTermination+0x54>)
   1d7ae:	68db      	ldr	r3, [r3, #12]
   1d7b0:	68db      	ldr	r3, [r3, #12]
   1d7b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d7b4:	687b      	ldr	r3, [r7, #4]
   1d7b6:	3304      	adds	r3, #4
   1d7b8:	0018      	movs	r0, r3
   1d7ba:	4b0f      	ldr	r3, [pc, #60]	; (1d7f8 <prvCheckTasksWaitingTermination+0x58>)
   1d7bc:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1d7be:	4b0f      	ldr	r3, [pc, #60]	; (1d7fc <prvCheckTasksWaitingTermination+0x5c>)
   1d7c0:	681b      	ldr	r3, [r3, #0]
   1d7c2:	1e5a      	subs	r2, r3, #1
   1d7c4:	4b0d      	ldr	r3, [pc, #52]	; (1d7fc <prvCheckTasksWaitingTermination+0x5c>)
   1d7c6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1d7c8:	4b0d      	ldr	r3, [pc, #52]	; (1d800 <prvCheckTasksWaitingTermination+0x60>)
   1d7ca:	681b      	ldr	r3, [r3, #0]
   1d7cc:	1e5a      	subs	r2, r3, #1
   1d7ce:	4b0c      	ldr	r3, [pc, #48]	; (1d800 <prvCheckTasksWaitingTermination+0x60>)
   1d7d0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1d7d2:	4b0c      	ldr	r3, [pc, #48]	; (1d804 <prvCheckTasksWaitingTermination+0x64>)
   1d7d4:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1d7d6:	687b      	ldr	r3, [r7, #4]
   1d7d8:	0018      	movs	r0, r3
   1d7da:	4b0b      	ldr	r3, [pc, #44]	; (1d808 <prvCheckTasksWaitingTermination+0x68>)
   1d7dc:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d7de:	4b08      	ldr	r3, [pc, #32]	; (1d800 <prvCheckTasksWaitingTermination+0x60>)
   1d7e0:	681b      	ldr	r3, [r3, #0]
   1d7e2:	2b00      	cmp	r3, #0
   1d7e4:	d1e0      	bne.n	1d7a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1d7e6:	46c0      	nop			; (mov r8, r8)
   1d7e8:	46bd      	mov	sp, r7
   1d7ea:	b002      	add	sp, #8
   1d7ec:	bd80      	pop	{r7, pc}
   1d7ee:	46c0      	nop			; (mov r8, r8)
   1d7f0:	0001abe9 	.word	0x0001abe9
   1d7f4:	20004188 	.word	0x20004188
   1d7f8:	0001aa57 	.word	0x0001aa57
   1d7fc:	200041b4 	.word	0x200041b4
   1d800:	2000419c 	.word	0x2000419c
   1d804:	0001ac0d 	.word	0x0001ac0d
   1d808:	0001d87d 	.word	0x0001d87d

0001d80c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1d80c:	b580      	push	{r7, lr}
   1d80e:	b084      	sub	sp, #16
   1d810:	af00      	add	r7, sp, #0
   1d812:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1d814:	2300      	movs	r3, #0
   1d816:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d818:	e005      	b.n	1d826 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1d81a:	687b      	ldr	r3, [r7, #4]
   1d81c:	3301      	adds	r3, #1
   1d81e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1d820:	68fb      	ldr	r3, [r7, #12]
   1d822:	3301      	adds	r3, #1
   1d824:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d826:	687b      	ldr	r3, [r7, #4]
   1d828:	781b      	ldrb	r3, [r3, #0]
   1d82a:	2ba5      	cmp	r3, #165	; 0xa5
   1d82c:	d0f5      	beq.n	1d81a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1d82e:	68fb      	ldr	r3, [r7, #12]
   1d830:	089b      	lsrs	r3, r3, #2
   1d832:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1d834:	68fb      	ldr	r3, [r7, #12]
   1d836:	b29b      	uxth	r3, r3
	}
   1d838:	0018      	movs	r0, r3
   1d83a:	46bd      	mov	sp, r7
   1d83c:	b004      	add	sp, #16
   1d83e:	bd80      	pop	{r7, pc}

0001d840 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1d840:	b580      	push	{r7, lr}
   1d842:	b086      	sub	sp, #24
   1d844:	af00      	add	r7, sp, #0
   1d846:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1d848:	687b      	ldr	r3, [r7, #4]
   1d84a:	2b00      	cmp	r3, #0
   1d84c:	d102      	bne.n	1d854 <uxTaskGetStackHighWaterMark+0x14>
   1d84e:	4b09      	ldr	r3, [pc, #36]	; (1d874 <uxTaskGetStackHighWaterMark+0x34>)
   1d850:	681b      	ldr	r3, [r3, #0]
   1d852:	e000      	b.n	1d856 <uxTaskGetStackHighWaterMark+0x16>
   1d854:	687b      	ldr	r3, [r7, #4]
   1d856:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1d858:	697b      	ldr	r3, [r7, #20]
   1d85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d85c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1d85e:	693b      	ldr	r3, [r7, #16]
   1d860:	0018      	movs	r0, r3
   1d862:	4b05      	ldr	r3, [pc, #20]	; (1d878 <uxTaskGetStackHighWaterMark+0x38>)
   1d864:	4798      	blx	r3
   1d866:	0003      	movs	r3, r0
   1d868:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1d86a:	68fb      	ldr	r3, [r7, #12]
	}
   1d86c:	0018      	movs	r0, r3
   1d86e:	46bd      	mov	sp, r7
   1d870:	b006      	add	sp, #24
   1d872:	bd80      	pop	{r7, pc}
   1d874:	200040dc 	.word	0x200040dc
   1d878:	0001d80d 	.word	0x0001d80d

0001d87c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1d87c:	b580      	push	{r7, lr}
   1d87e:	b082      	sub	sp, #8
   1d880:	af00      	add	r7, sp, #0
   1d882:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1d884:	687b      	ldr	r3, [r7, #4]
   1d886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d888:	0018      	movs	r0, r3
   1d88a:	4b05      	ldr	r3, [pc, #20]	; (1d8a0 <prvDeleteTCB+0x24>)
   1d88c:	4798      	blx	r3
			vPortFree( pxTCB );
   1d88e:	687b      	ldr	r3, [r7, #4]
   1d890:	0018      	movs	r0, r3
   1d892:	4b03      	ldr	r3, [pc, #12]	; (1d8a0 <prvDeleteTCB+0x24>)
   1d894:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1d896:	46c0      	nop			; (mov r8, r8)
   1d898:	46bd      	mov	sp, r7
   1d89a:	b002      	add	sp, #8
   1d89c:	bd80      	pop	{r7, pc}
   1d89e:	46c0      	nop			; (mov r8, r8)
   1d8a0:	0001ade5 	.word	0x0001ade5

0001d8a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1d8a4:	b580      	push	{r7, lr}
   1d8a6:	b082      	sub	sp, #8
   1d8a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d8aa:	4b0e      	ldr	r3, [pc, #56]	; (1d8e4 <prvResetNextTaskUnblockTime+0x40>)
   1d8ac:	681b      	ldr	r3, [r3, #0]
   1d8ae:	681b      	ldr	r3, [r3, #0]
   1d8b0:	2b00      	cmp	r3, #0
   1d8b2:	d101      	bne.n	1d8b8 <prvResetNextTaskUnblockTime+0x14>
   1d8b4:	2301      	movs	r3, #1
   1d8b6:	e000      	b.n	1d8ba <prvResetNextTaskUnblockTime+0x16>
   1d8b8:	2300      	movs	r3, #0
   1d8ba:	2b00      	cmp	r3, #0
   1d8bc:	d004      	beq.n	1d8c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1d8be:	4b0a      	ldr	r3, [pc, #40]	; (1d8e8 <prvResetNextTaskUnblockTime+0x44>)
   1d8c0:	2201      	movs	r2, #1
   1d8c2:	4252      	negs	r2, r2
   1d8c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1d8c6:	e008      	b.n	1d8da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d8c8:	4b06      	ldr	r3, [pc, #24]	; (1d8e4 <prvResetNextTaskUnblockTime+0x40>)
   1d8ca:	681b      	ldr	r3, [r3, #0]
   1d8cc:	68db      	ldr	r3, [r3, #12]
   1d8ce:	68db      	ldr	r3, [r3, #12]
   1d8d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1d8d2:	687b      	ldr	r3, [r7, #4]
   1d8d4:	685a      	ldr	r2, [r3, #4]
   1d8d6:	4b04      	ldr	r3, [pc, #16]	; (1d8e8 <prvResetNextTaskUnblockTime+0x44>)
   1d8d8:	601a      	str	r2, [r3, #0]
}
   1d8da:	46c0      	nop			; (mov r8, r8)
   1d8dc:	46bd      	mov	sp, r7
   1d8de:	b002      	add	sp, #8
   1d8e0:	bd80      	pop	{r7, pc}
   1d8e2:	46c0      	nop			; (mov r8, r8)
   1d8e4:	2000416c 	.word	0x2000416c
   1d8e8:	200041d4 	.word	0x200041d4

0001d8ec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1d8ec:	b580      	push	{r7, lr}
   1d8ee:	b082      	sub	sp, #8
   1d8f0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1d8f2:	4b04      	ldr	r3, [pc, #16]	; (1d904 <xTaskGetCurrentTaskHandle+0x18>)
   1d8f4:	681b      	ldr	r3, [r3, #0]
   1d8f6:	607b      	str	r3, [r7, #4]

		return xReturn;
   1d8f8:	687b      	ldr	r3, [r7, #4]
	}
   1d8fa:	0018      	movs	r0, r3
   1d8fc:	46bd      	mov	sp, r7
   1d8fe:	b002      	add	sp, #8
   1d900:	bd80      	pop	{r7, pc}
   1d902:	46c0      	nop			; (mov r8, r8)
   1d904:	200040dc 	.word	0x200040dc

0001d908 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1d908:	b580      	push	{r7, lr}
   1d90a:	b082      	sub	sp, #8
   1d90c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1d90e:	4b0a      	ldr	r3, [pc, #40]	; (1d938 <xTaskGetSchedulerState+0x30>)
   1d910:	681b      	ldr	r3, [r3, #0]
   1d912:	2b00      	cmp	r3, #0
   1d914:	d102      	bne.n	1d91c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1d916:	2301      	movs	r3, #1
   1d918:	607b      	str	r3, [r7, #4]
   1d91a:	e008      	b.n	1d92e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d91c:	4b07      	ldr	r3, [pc, #28]	; (1d93c <xTaskGetSchedulerState+0x34>)
   1d91e:	681b      	ldr	r3, [r3, #0]
   1d920:	2b00      	cmp	r3, #0
   1d922:	d102      	bne.n	1d92a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1d924:	2302      	movs	r3, #2
   1d926:	607b      	str	r3, [r7, #4]
   1d928:	e001      	b.n	1d92e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1d92a:	2300      	movs	r3, #0
   1d92c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1d92e:	687b      	ldr	r3, [r7, #4]
	}
   1d930:	0018      	movs	r0, r3
   1d932:	46bd      	mov	sp, r7
   1d934:	b002      	add	sp, #8
   1d936:	bd80      	pop	{r7, pc}
   1d938:	200041c0 	.word	0x200041c0
   1d93c:	200041dc 	.word	0x200041dc

0001d940 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1d940:	b590      	push	{r4, r7, lr}
   1d942:	b085      	sub	sp, #20
   1d944:	af00      	add	r7, sp, #0
   1d946:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1d948:	687b      	ldr	r3, [r7, #4]
   1d94a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1d94c:	2300      	movs	r3, #0
   1d94e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1d950:	687b      	ldr	r3, [r7, #4]
   1d952:	2b00      	cmp	r3, #0
   1d954:	d100      	bne.n	1d958 <xTaskPriorityInherit+0x18>
   1d956:	e09d      	b.n	1da94 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1d958:	68bb      	ldr	r3, [r7, #8]
   1d95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d95c:	4b50      	ldr	r3, [pc, #320]	; (1daa0 <xTaskPriorityInherit+0x160>)
   1d95e:	681b      	ldr	r3, [r3, #0]
   1d960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d962:	429a      	cmp	r2, r3
   1d964:	d300      	bcc.n	1d968 <xTaskPriorityInherit+0x28>
   1d966:	e08c      	b.n	1da82 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d968:	68bb      	ldr	r3, [r7, #8]
   1d96a:	699b      	ldr	r3, [r3, #24]
   1d96c:	2b00      	cmp	r3, #0
   1d96e:	db06      	blt.n	1d97e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d970:	4b4b      	ldr	r3, [pc, #300]	; (1daa0 <xTaskPriorityInherit+0x160>)
   1d972:	681b      	ldr	r3, [r3, #0]
   1d974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d976:	2205      	movs	r2, #5
   1d978:	1ad2      	subs	r2, r2, r3
   1d97a:	68bb      	ldr	r3, [r7, #8]
   1d97c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1d97e:	68bb      	ldr	r3, [r7, #8]
   1d980:	6959      	ldr	r1, [r3, #20]
   1d982:	68bb      	ldr	r3, [r7, #8]
   1d984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d986:	0013      	movs	r3, r2
   1d988:	009b      	lsls	r3, r3, #2
   1d98a:	189b      	adds	r3, r3, r2
   1d98c:	009b      	lsls	r3, r3, #2
   1d98e:	4a45      	ldr	r2, [pc, #276]	; (1daa4 <xTaskPriorityInherit+0x164>)
   1d990:	189b      	adds	r3, r3, r2
   1d992:	4299      	cmp	r1, r3
   1d994:	d101      	bne.n	1d99a <xTaskPriorityInherit+0x5a>
   1d996:	2301      	movs	r3, #1
   1d998:	e000      	b.n	1d99c <xTaskPriorityInherit+0x5c>
   1d99a:	2300      	movs	r3, #0
   1d99c:	2b00      	cmp	r3, #0
   1d99e:	d037      	beq.n	1da10 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d9a0:	68bb      	ldr	r3, [r7, #8]
   1d9a2:	3304      	adds	r3, #4
   1d9a4:	0018      	movs	r0, r3
   1d9a6:	4b40      	ldr	r3, [pc, #256]	; (1daa8 <xTaskPriorityInherit+0x168>)
   1d9a8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1d9aa:	4b3d      	ldr	r3, [pc, #244]	; (1daa0 <xTaskPriorityInherit+0x160>)
   1d9ac:	681b      	ldr	r3, [r3, #0]
   1d9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d9b0:	68bb      	ldr	r3, [r7, #8]
   1d9b2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1d9b4:	68bb      	ldr	r3, [r7, #8]
   1d9b6:	0018      	movs	r0, r3
   1d9b8:	4b3c      	ldr	r3, [pc, #240]	; (1daac <xTaskPriorityInherit+0x16c>)
   1d9ba:	4798      	blx	r3
   1d9bc:	0003      	movs	r3, r0
   1d9be:	001a      	movs	r2, r3
   1d9c0:	4b3b      	ldr	r3, [pc, #236]	; (1dab0 <xTaskPriorityInherit+0x170>)
   1d9c2:	881b      	ldrh	r3, [r3, #0]
   1d9c4:	4013      	ands	r3, r2
   1d9c6:	b29b      	uxth	r3, r3
   1d9c8:	2b00      	cmp	r3, #0
   1d9ca:	d008      	beq.n	1d9de <xTaskPriorityInherit+0x9e>
   1d9cc:	68bb      	ldr	r3, [r7, #8]
   1d9ce:	0018      	movs	r0, r3
   1d9d0:	4b38      	ldr	r3, [pc, #224]	; (1dab4 <xTaskPriorityInherit+0x174>)
   1d9d2:	4798      	blx	r3
   1d9d4:	0003      	movs	r3, r0
   1d9d6:	b2db      	uxtb	r3, r3
   1d9d8:	0018      	movs	r0, r3
   1d9da:	4b37      	ldr	r3, [pc, #220]	; (1dab8 <xTaskPriorityInherit+0x178>)
   1d9dc:	4798      	blx	r3
   1d9de:	68bb      	ldr	r3, [r7, #8]
   1d9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d9e2:	4b36      	ldr	r3, [pc, #216]	; (1dabc <xTaskPriorityInherit+0x17c>)
   1d9e4:	681b      	ldr	r3, [r3, #0]
   1d9e6:	429a      	cmp	r2, r3
   1d9e8:	d903      	bls.n	1d9f2 <xTaskPriorityInherit+0xb2>
   1d9ea:	68bb      	ldr	r3, [r7, #8]
   1d9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d9ee:	4b33      	ldr	r3, [pc, #204]	; (1dabc <xTaskPriorityInherit+0x17c>)
   1d9f0:	601a      	str	r2, [r3, #0]
   1d9f2:	68bb      	ldr	r3, [r7, #8]
   1d9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d9f6:	0013      	movs	r3, r2
   1d9f8:	009b      	lsls	r3, r3, #2
   1d9fa:	189b      	adds	r3, r3, r2
   1d9fc:	009b      	lsls	r3, r3, #2
   1d9fe:	4a29      	ldr	r2, [pc, #164]	; (1daa4 <xTaskPriorityInherit+0x164>)
   1da00:	189a      	adds	r2, r3, r2
   1da02:	68bb      	ldr	r3, [r7, #8]
   1da04:	3304      	adds	r3, #4
   1da06:	0019      	movs	r1, r3
   1da08:	0010      	movs	r0, r2
   1da0a:	4b2d      	ldr	r3, [pc, #180]	; (1dac0 <xTaskPriorityInherit+0x180>)
   1da0c:	4798      	blx	r3
   1da0e:	e004      	b.n	1da1a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1da10:	4b23      	ldr	r3, [pc, #140]	; (1daa0 <xTaskPriorityInherit+0x160>)
   1da12:	681b      	ldr	r3, [r3, #0]
   1da14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da16:	68bb      	ldr	r3, [r7, #8]
   1da18:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1da1a:	68bb      	ldr	r3, [r7, #8]
   1da1c:	0018      	movs	r0, r3
   1da1e:	4b23      	ldr	r3, [pc, #140]	; (1daac <xTaskPriorityInherit+0x16c>)
   1da20:	4798      	blx	r3
   1da22:	0003      	movs	r3, r0
   1da24:	001a      	movs	r2, r3
   1da26:	4b22      	ldr	r3, [pc, #136]	; (1dab0 <xTaskPriorityInherit+0x170>)
   1da28:	881b      	ldrh	r3, [r3, #0]
   1da2a:	4013      	ands	r3, r2
   1da2c:	b29b      	uxth	r3, r3
   1da2e:	2b00      	cmp	r3, #0
   1da30:	d024      	beq.n	1da7c <xTaskPriorityInherit+0x13c>
   1da32:	68bb      	ldr	r3, [r7, #8]
   1da34:	0018      	movs	r0, r3
   1da36:	4b1f      	ldr	r3, [pc, #124]	; (1dab4 <xTaskPriorityInherit+0x174>)
   1da38:	4798      	blx	r3
   1da3a:	0003      	movs	r3, r0
   1da3c:	b2db      	uxtb	r3, r3
   1da3e:	001c      	movs	r4, r3
   1da40:	68bb      	ldr	r3, [r7, #8]
   1da42:	0018      	movs	r0, r3
   1da44:	4b1b      	ldr	r3, [pc, #108]	; (1dab4 <xTaskPriorityInherit+0x174>)
   1da46:	4798      	blx	r3
   1da48:	0003      	movs	r3, r0
   1da4a:	b2db      	uxtb	r3, r3
   1da4c:	0019      	movs	r1, r3
   1da4e:	2003      	movs	r0, #3
   1da50:	4b1c      	ldr	r3, [pc, #112]	; (1dac4 <xTaskPriorityInherit+0x184>)
   1da52:	4798      	blx	r3
   1da54:	0003      	movs	r3, r0
   1da56:	0022      	movs	r2, r4
   1da58:	2103      	movs	r1, #3
   1da5a:	208e      	movs	r0, #142	; 0x8e
   1da5c:	4c1a      	ldr	r4, [pc, #104]	; (1dac8 <xTaskPriorityInherit+0x188>)
   1da5e:	47a0      	blx	r4
   1da60:	68bb      	ldr	r3, [r7, #8]
   1da62:	0018      	movs	r0, r3
   1da64:	4b13      	ldr	r3, [pc, #76]	; (1dab4 <xTaskPriorityInherit+0x174>)
   1da66:	4798      	blx	r3
   1da68:	0003      	movs	r3, r0
   1da6a:	b2d9      	uxtb	r1, r3
   1da6c:	4b0c      	ldr	r3, [pc, #48]	; (1daa0 <xTaskPriorityInherit+0x160>)
   1da6e:	681b      	ldr	r3, [r3, #0]
   1da70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1da72:	b2db      	uxtb	r3, r3
   1da74:	001a      	movs	r2, r3
   1da76:	2003      	movs	r0, #3
   1da78:	4b14      	ldr	r3, [pc, #80]	; (1dacc <xTaskPriorityInherit+0x18c>)
   1da7a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1da7c:	2301      	movs	r3, #1
   1da7e:	60fb      	str	r3, [r7, #12]
   1da80:	e008      	b.n	1da94 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1da82:	68bb      	ldr	r3, [r7, #8]
   1da84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1da86:	4b06      	ldr	r3, [pc, #24]	; (1daa0 <xTaskPriorityInherit+0x160>)
   1da88:	681b      	ldr	r3, [r3, #0]
   1da8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1da8c:	429a      	cmp	r2, r3
   1da8e:	d201      	bcs.n	1da94 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1da90:	2301      	movs	r3, #1
   1da92:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1da94:	68fb      	ldr	r3, [r7, #12]
	}
   1da96:	0018      	movs	r0, r3
   1da98:	46bd      	mov	sp, r7
   1da9a:	b005      	add	sp, #20
   1da9c:	bd90      	pop	{r4, r7, pc}
   1da9e:	46c0      	nop			; (mov r8, r8)
   1daa0:	200040dc 	.word	0x200040dc
   1daa4:	200040e0 	.word	0x200040e0
   1daa8:	0001aa57 	.word	0x0001aa57
   1daac:	00018bdd 	.word	0x00018bdd
   1dab0:	20000110 	.word	0x20000110
   1dab4:	00018bbd 	.word	0x00018bbd
   1dab8:	0001938d 	.word	0x0001938d
   1dabc:	200041bc 	.word	0x200041bc
   1dac0:	0001a9a7 	.word	0x0001a9a7
   1dac4:	00019b95 	.word	0x00019b95
   1dac8:	00019705 	.word	0x00019705
   1dacc:	00019af1 	.word	0x00019af1

0001dad0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1dad0:	b590      	push	{r4, r7, lr}
   1dad2:	b085      	sub	sp, #20
   1dad4:	af00      	add	r7, sp, #0
   1dad6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1dad8:	687b      	ldr	r3, [r7, #4]
   1dada:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1dadc:	2300      	movs	r3, #0
   1dade:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1dae0:	687b      	ldr	r3, [r7, #4]
   1dae2:	2b00      	cmp	r3, #0
   1dae4:	d100      	bne.n	1dae8 <xTaskPriorityDisinherit+0x18>
   1dae6:	e089      	b.n	1dbfc <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1dae8:	4b47      	ldr	r3, [pc, #284]	; (1dc08 <xTaskPriorityDisinherit+0x138>)
   1daea:	681b      	ldr	r3, [r3, #0]
   1daec:	68ba      	ldr	r2, [r7, #8]
   1daee:	429a      	cmp	r2, r3
   1daf0:	d001      	beq.n	1daf6 <xTaskPriorityDisinherit+0x26>
   1daf2:	b672      	cpsid	i
   1daf4:	e7fe      	b.n	1daf4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1daf6:	68bb      	ldr	r3, [r7, #8]
   1daf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dafa:	2b00      	cmp	r3, #0
   1dafc:	d101      	bne.n	1db02 <xTaskPriorityDisinherit+0x32>
   1dafe:	b672      	cpsid	i
   1db00:	e7fe      	b.n	1db00 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1db02:	68bb      	ldr	r3, [r7, #8]
   1db04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1db06:	1e5a      	subs	r2, r3, #1
   1db08:	68bb      	ldr	r3, [r7, #8]
   1db0a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1db0c:	68bb      	ldr	r3, [r7, #8]
   1db0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1db10:	68bb      	ldr	r3, [r7, #8]
   1db12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1db14:	429a      	cmp	r2, r3
   1db16:	d071      	beq.n	1dbfc <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1db18:	68bb      	ldr	r3, [r7, #8]
   1db1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1db1c:	2b00      	cmp	r3, #0
   1db1e:	d16d      	bne.n	1dbfc <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1db20:	68bb      	ldr	r3, [r7, #8]
   1db22:	3304      	adds	r3, #4
   1db24:	0018      	movs	r0, r3
   1db26:	4b39      	ldr	r3, [pc, #228]	; (1dc0c <xTaskPriorityDisinherit+0x13c>)
   1db28:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1db2a:	68bb      	ldr	r3, [r7, #8]
   1db2c:	0018      	movs	r0, r3
   1db2e:	4b38      	ldr	r3, [pc, #224]	; (1dc10 <xTaskPriorityDisinherit+0x140>)
   1db30:	4798      	blx	r3
   1db32:	0003      	movs	r3, r0
   1db34:	001a      	movs	r2, r3
   1db36:	4b37      	ldr	r3, [pc, #220]	; (1dc14 <xTaskPriorityDisinherit+0x144>)
   1db38:	881b      	ldrh	r3, [r3, #0]
   1db3a:	4013      	ands	r3, r2
   1db3c:	b29b      	uxth	r3, r3
   1db3e:	2b00      	cmp	r3, #0
   1db40:	d023      	beq.n	1db8a <xTaskPriorityDisinherit+0xba>
   1db42:	68bb      	ldr	r3, [r7, #8]
   1db44:	0018      	movs	r0, r3
   1db46:	4b34      	ldr	r3, [pc, #208]	; (1dc18 <xTaskPriorityDisinherit+0x148>)
   1db48:	4798      	blx	r3
   1db4a:	0003      	movs	r3, r0
   1db4c:	b2db      	uxtb	r3, r3
   1db4e:	001c      	movs	r4, r3
   1db50:	68bb      	ldr	r3, [r7, #8]
   1db52:	0018      	movs	r0, r3
   1db54:	4b30      	ldr	r3, [pc, #192]	; (1dc18 <xTaskPriorityDisinherit+0x148>)
   1db56:	4798      	blx	r3
   1db58:	0003      	movs	r3, r0
   1db5a:	b2db      	uxtb	r3, r3
   1db5c:	0019      	movs	r1, r3
   1db5e:	2003      	movs	r0, #3
   1db60:	4b2e      	ldr	r3, [pc, #184]	; (1dc1c <xTaskPriorityDisinherit+0x14c>)
   1db62:	4798      	blx	r3
   1db64:	0003      	movs	r3, r0
   1db66:	0022      	movs	r2, r4
   1db68:	2103      	movs	r1, #3
   1db6a:	208f      	movs	r0, #143	; 0x8f
   1db6c:	4c2c      	ldr	r4, [pc, #176]	; (1dc20 <xTaskPriorityDisinherit+0x150>)
   1db6e:	47a0      	blx	r4
   1db70:	68bb      	ldr	r3, [r7, #8]
   1db72:	0018      	movs	r0, r3
   1db74:	4b28      	ldr	r3, [pc, #160]	; (1dc18 <xTaskPriorityDisinherit+0x148>)
   1db76:	4798      	blx	r3
   1db78:	0003      	movs	r3, r0
   1db7a:	b2d9      	uxtb	r1, r3
   1db7c:	68bb      	ldr	r3, [r7, #8]
   1db7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1db80:	b2db      	uxtb	r3, r3
   1db82:	001a      	movs	r2, r3
   1db84:	2003      	movs	r0, #3
   1db86:	4b27      	ldr	r3, [pc, #156]	; (1dc24 <xTaskPriorityDisinherit+0x154>)
   1db88:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1db8a:	68bb      	ldr	r3, [r7, #8]
   1db8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1db8e:	68bb      	ldr	r3, [r7, #8]
   1db90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1db92:	68bb      	ldr	r3, [r7, #8]
   1db94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1db96:	2205      	movs	r2, #5
   1db98:	1ad2      	subs	r2, r2, r3
   1db9a:	68bb      	ldr	r3, [r7, #8]
   1db9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1db9e:	68bb      	ldr	r3, [r7, #8]
   1dba0:	0018      	movs	r0, r3
   1dba2:	4b1b      	ldr	r3, [pc, #108]	; (1dc10 <xTaskPriorityDisinherit+0x140>)
   1dba4:	4798      	blx	r3
   1dba6:	0003      	movs	r3, r0
   1dba8:	001a      	movs	r2, r3
   1dbaa:	4b1a      	ldr	r3, [pc, #104]	; (1dc14 <xTaskPriorityDisinherit+0x144>)
   1dbac:	881b      	ldrh	r3, [r3, #0]
   1dbae:	4013      	ands	r3, r2
   1dbb0:	b29b      	uxth	r3, r3
   1dbb2:	2b00      	cmp	r3, #0
   1dbb4:	d008      	beq.n	1dbc8 <xTaskPriorityDisinherit+0xf8>
   1dbb6:	68bb      	ldr	r3, [r7, #8]
   1dbb8:	0018      	movs	r0, r3
   1dbba:	4b17      	ldr	r3, [pc, #92]	; (1dc18 <xTaskPriorityDisinherit+0x148>)
   1dbbc:	4798      	blx	r3
   1dbbe:	0003      	movs	r3, r0
   1dbc0:	b2db      	uxtb	r3, r3
   1dbc2:	0018      	movs	r0, r3
   1dbc4:	4b18      	ldr	r3, [pc, #96]	; (1dc28 <xTaskPriorityDisinherit+0x158>)
   1dbc6:	4798      	blx	r3
   1dbc8:	68bb      	ldr	r3, [r7, #8]
   1dbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dbcc:	4b17      	ldr	r3, [pc, #92]	; (1dc2c <xTaskPriorityDisinherit+0x15c>)
   1dbce:	681b      	ldr	r3, [r3, #0]
   1dbd0:	429a      	cmp	r2, r3
   1dbd2:	d903      	bls.n	1dbdc <xTaskPriorityDisinherit+0x10c>
   1dbd4:	68bb      	ldr	r3, [r7, #8]
   1dbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dbd8:	4b14      	ldr	r3, [pc, #80]	; (1dc2c <xTaskPriorityDisinherit+0x15c>)
   1dbda:	601a      	str	r2, [r3, #0]
   1dbdc:	68bb      	ldr	r3, [r7, #8]
   1dbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dbe0:	0013      	movs	r3, r2
   1dbe2:	009b      	lsls	r3, r3, #2
   1dbe4:	189b      	adds	r3, r3, r2
   1dbe6:	009b      	lsls	r3, r3, #2
   1dbe8:	4a11      	ldr	r2, [pc, #68]	; (1dc30 <xTaskPriorityDisinherit+0x160>)
   1dbea:	189a      	adds	r2, r3, r2
   1dbec:	68bb      	ldr	r3, [r7, #8]
   1dbee:	3304      	adds	r3, #4
   1dbf0:	0019      	movs	r1, r3
   1dbf2:	0010      	movs	r0, r2
   1dbf4:	4b0f      	ldr	r3, [pc, #60]	; (1dc34 <xTaskPriorityDisinherit+0x164>)
   1dbf6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1dbf8:	2301      	movs	r3, #1
   1dbfa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1dbfc:	68fb      	ldr	r3, [r7, #12]
	}
   1dbfe:	0018      	movs	r0, r3
   1dc00:	46bd      	mov	sp, r7
   1dc02:	b005      	add	sp, #20
   1dc04:	bd90      	pop	{r4, r7, pc}
   1dc06:	46c0      	nop			; (mov r8, r8)
   1dc08:	200040dc 	.word	0x200040dc
   1dc0c:	0001aa57 	.word	0x0001aa57
   1dc10:	00018bdd 	.word	0x00018bdd
   1dc14:	20000110 	.word	0x20000110
   1dc18:	00018bbd 	.word	0x00018bbd
   1dc1c:	00019b95 	.word	0x00019b95
   1dc20:	00019705 	.word	0x00019705
   1dc24:	00019af1 	.word	0x00019af1
   1dc28:	0001938d 	.word	0x0001938d
   1dc2c:	200041bc 	.word	0x200041bc
   1dc30:	200040e0 	.word	0x200040e0
   1dc34:	0001a9a7 	.word	0x0001a9a7

0001dc38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1dc38:	b590      	push	{r4, r7, lr}
   1dc3a:	b087      	sub	sp, #28
   1dc3c:	af00      	add	r7, sp, #0
   1dc3e:	6078      	str	r0, [r7, #4]
   1dc40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1dc42:	687b      	ldr	r3, [r7, #4]
   1dc44:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1dc46:	2301      	movs	r3, #1
   1dc48:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1dc4a:	687b      	ldr	r3, [r7, #4]
   1dc4c:	2b00      	cmp	r3, #0
   1dc4e:	d100      	bne.n	1dc52 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1dc50:	e0a4      	b.n	1dd9c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1dc52:	693b      	ldr	r3, [r7, #16]
   1dc54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dc56:	2b00      	cmp	r3, #0
   1dc58:	d101      	bne.n	1dc5e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1dc5a:	b672      	cpsid	i
   1dc5c:	e7fe      	b.n	1dc5c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1dc5e:	693b      	ldr	r3, [r7, #16]
   1dc60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1dc62:	683b      	ldr	r3, [r7, #0]
   1dc64:	429a      	cmp	r2, r3
   1dc66:	d202      	bcs.n	1dc6e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1dc68:	683b      	ldr	r3, [r7, #0]
   1dc6a:	617b      	str	r3, [r7, #20]
   1dc6c:	e002      	b.n	1dc74 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1dc6e:	693b      	ldr	r3, [r7, #16]
   1dc70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dc72:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1dc74:	693b      	ldr	r3, [r7, #16]
   1dc76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dc78:	697b      	ldr	r3, [r7, #20]
   1dc7a:	429a      	cmp	r2, r3
   1dc7c:	d100      	bne.n	1dc80 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1dc7e:	e08d      	b.n	1dd9c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1dc80:	693b      	ldr	r3, [r7, #16]
   1dc82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1dc84:	68fb      	ldr	r3, [r7, #12]
   1dc86:	429a      	cmp	r2, r3
   1dc88:	d000      	beq.n	1dc8c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1dc8a:	e087      	b.n	1dd9c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1dc8c:	4b45      	ldr	r3, [pc, #276]	; (1dda4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1dc8e:	681b      	ldr	r3, [r3, #0]
   1dc90:	693a      	ldr	r2, [r7, #16]
   1dc92:	429a      	cmp	r2, r3
   1dc94:	d101      	bne.n	1dc9a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1dc96:	b672      	cpsid	i
   1dc98:	e7fe      	b.n	1dc98 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1dc9a:	693b      	ldr	r3, [r7, #16]
   1dc9c:	0018      	movs	r0, r3
   1dc9e:	4b42      	ldr	r3, [pc, #264]	; (1dda8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1dca0:	4798      	blx	r3
   1dca2:	0003      	movs	r3, r0
   1dca4:	001a      	movs	r2, r3
   1dca6:	4b41      	ldr	r3, [pc, #260]	; (1ddac <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1dca8:	881b      	ldrh	r3, [r3, #0]
   1dcaa:	4013      	ands	r3, r2
   1dcac:	b29b      	uxth	r3, r3
   1dcae:	2b00      	cmp	r3, #0
   1dcb0:	d023      	beq.n	1dcfa <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1dcb2:	693b      	ldr	r3, [r7, #16]
   1dcb4:	0018      	movs	r0, r3
   1dcb6:	4b3e      	ldr	r3, [pc, #248]	; (1ddb0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1dcb8:	4798      	blx	r3
   1dcba:	0003      	movs	r3, r0
   1dcbc:	b2db      	uxtb	r3, r3
   1dcbe:	001c      	movs	r4, r3
   1dcc0:	693b      	ldr	r3, [r7, #16]
   1dcc2:	0018      	movs	r0, r3
   1dcc4:	4b3a      	ldr	r3, [pc, #232]	; (1ddb0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1dcc6:	4798      	blx	r3
   1dcc8:	0003      	movs	r3, r0
   1dcca:	b2db      	uxtb	r3, r3
   1dccc:	0019      	movs	r1, r3
   1dcce:	2003      	movs	r0, #3
   1dcd0:	4b38      	ldr	r3, [pc, #224]	; (1ddb4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1dcd2:	4798      	blx	r3
   1dcd4:	0003      	movs	r3, r0
   1dcd6:	0022      	movs	r2, r4
   1dcd8:	2103      	movs	r1, #3
   1dcda:	208f      	movs	r0, #143	; 0x8f
   1dcdc:	4c36      	ldr	r4, [pc, #216]	; (1ddb8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1dcde:	47a0      	blx	r4
   1dce0:	693b      	ldr	r3, [r7, #16]
   1dce2:	0018      	movs	r0, r3
   1dce4:	4b32      	ldr	r3, [pc, #200]	; (1ddb0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1dce6:	4798      	blx	r3
   1dce8:	0003      	movs	r3, r0
   1dcea:	b2d9      	uxtb	r1, r3
   1dcec:	693b      	ldr	r3, [r7, #16]
   1dcee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dcf0:	b2db      	uxtb	r3, r3
   1dcf2:	001a      	movs	r2, r3
   1dcf4:	2003      	movs	r0, #3
   1dcf6:	4b31      	ldr	r3, [pc, #196]	; (1ddbc <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1dcf8:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1dcfa:	693b      	ldr	r3, [r7, #16]
   1dcfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dcfe:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1dd00:	693b      	ldr	r3, [r7, #16]
   1dd02:	697a      	ldr	r2, [r7, #20]
   1dd04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1dd06:	693b      	ldr	r3, [r7, #16]
   1dd08:	699b      	ldr	r3, [r3, #24]
   1dd0a:	2b00      	cmp	r3, #0
   1dd0c:	db04      	blt.n	1dd18 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dd0e:	697b      	ldr	r3, [r7, #20]
   1dd10:	2205      	movs	r2, #5
   1dd12:	1ad2      	subs	r2, r2, r3
   1dd14:	693b      	ldr	r3, [r7, #16]
   1dd16:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1dd18:	693b      	ldr	r3, [r7, #16]
   1dd1a:	6959      	ldr	r1, [r3, #20]
   1dd1c:	68ba      	ldr	r2, [r7, #8]
   1dd1e:	0013      	movs	r3, r2
   1dd20:	009b      	lsls	r3, r3, #2
   1dd22:	189b      	adds	r3, r3, r2
   1dd24:	009b      	lsls	r3, r3, #2
   1dd26:	4a26      	ldr	r2, [pc, #152]	; (1ddc0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1dd28:	189b      	adds	r3, r3, r2
   1dd2a:	4299      	cmp	r1, r3
   1dd2c:	d101      	bne.n	1dd32 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1dd2e:	2301      	movs	r3, #1
   1dd30:	e000      	b.n	1dd34 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1dd32:	2300      	movs	r3, #0
   1dd34:	2b00      	cmp	r3, #0
   1dd36:	d031      	beq.n	1dd9c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1dd38:	693b      	ldr	r3, [r7, #16]
   1dd3a:	3304      	adds	r3, #4
   1dd3c:	0018      	movs	r0, r3
   1dd3e:	4b21      	ldr	r3, [pc, #132]	; (1ddc4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1dd40:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1dd42:	693b      	ldr	r3, [r7, #16]
   1dd44:	0018      	movs	r0, r3
   1dd46:	4b18      	ldr	r3, [pc, #96]	; (1dda8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1dd48:	4798      	blx	r3
   1dd4a:	0003      	movs	r3, r0
   1dd4c:	001a      	movs	r2, r3
   1dd4e:	4b17      	ldr	r3, [pc, #92]	; (1ddac <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1dd50:	881b      	ldrh	r3, [r3, #0]
   1dd52:	4013      	ands	r3, r2
   1dd54:	b29b      	uxth	r3, r3
   1dd56:	2b00      	cmp	r3, #0
   1dd58:	d008      	beq.n	1dd6c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1dd5a:	693b      	ldr	r3, [r7, #16]
   1dd5c:	0018      	movs	r0, r3
   1dd5e:	4b14      	ldr	r3, [pc, #80]	; (1ddb0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1dd60:	4798      	blx	r3
   1dd62:	0003      	movs	r3, r0
   1dd64:	b2db      	uxtb	r3, r3
   1dd66:	0018      	movs	r0, r3
   1dd68:	4b17      	ldr	r3, [pc, #92]	; (1ddc8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1dd6a:	4798      	blx	r3
   1dd6c:	693b      	ldr	r3, [r7, #16]
   1dd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd70:	4b16      	ldr	r3, [pc, #88]	; (1ddcc <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1dd72:	681b      	ldr	r3, [r3, #0]
   1dd74:	429a      	cmp	r2, r3
   1dd76:	d903      	bls.n	1dd80 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1dd78:	693b      	ldr	r3, [r7, #16]
   1dd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd7c:	4b13      	ldr	r3, [pc, #76]	; (1ddcc <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1dd7e:	601a      	str	r2, [r3, #0]
   1dd80:	693b      	ldr	r3, [r7, #16]
   1dd82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd84:	0013      	movs	r3, r2
   1dd86:	009b      	lsls	r3, r3, #2
   1dd88:	189b      	adds	r3, r3, r2
   1dd8a:	009b      	lsls	r3, r3, #2
   1dd8c:	4a0c      	ldr	r2, [pc, #48]	; (1ddc0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1dd8e:	189a      	adds	r2, r3, r2
   1dd90:	693b      	ldr	r3, [r7, #16]
   1dd92:	3304      	adds	r3, #4
   1dd94:	0019      	movs	r1, r3
   1dd96:	0010      	movs	r0, r2
   1dd98:	4b0d      	ldr	r3, [pc, #52]	; (1ddd0 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1dd9a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1dd9c:	46c0      	nop			; (mov r8, r8)
   1dd9e:	46bd      	mov	sp, r7
   1dda0:	b007      	add	sp, #28
   1dda2:	bd90      	pop	{r4, r7, pc}
   1dda4:	200040dc 	.word	0x200040dc
   1dda8:	00018bdd 	.word	0x00018bdd
   1ddac:	20000110 	.word	0x20000110
   1ddb0:	00018bbd 	.word	0x00018bbd
   1ddb4:	00019b95 	.word	0x00019b95
   1ddb8:	00019705 	.word	0x00019705
   1ddbc:	00019af1 	.word	0x00019af1
   1ddc0:	200040e0 	.word	0x200040e0
   1ddc4:	0001aa57 	.word	0x0001aa57
   1ddc8:	0001938d 	.word	0x0001938d
   1ddcc:	200041bc 	.word	0x200041bc
   1ddd0:	0001a9a7 	.word	0x0001a9a7

0001ddd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1ddd4:	b580      	push	{r7, lr}
   1ddd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1ddd8:	4b06      	ldr	r3, [pc, #24]	; (1ddf4 <pvTaskIncrementMutexHeldCount+0x20>)
   1ddda:	681b      	ldr	r3, [r3, #0]
   1dddc:	2b00      	cmp	r3, #0
   1ddde:	d004      	beq.n	1ddea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1dde0:	4b04      	ldr	r3, [pc, #16]	; (1ddf4 <pvTaskIncrementMutexHeldCount+0x20>)
   1dde2:	681b      	ldr	r3, [r3, #0]
   1dde4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1dde6:	3201      	adds	r2, #1
   1dde8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1ddea:	4b02      	ldr	r3, [pc, #8]	; (1ddf4 <pvTaskIncrementMutexHeldCount+0x20>)
   1ddec:	681b      	ldr	r3, [r3, #0]
	}
   1ddee:	0018      	movs	r0, r3
   1ddf0:	46bd      	mov	sp, r7
   1ddf2:	bd80      	pop	{r7, pc}
   1ddf4:	200040dc 	.word	0x200040dc

0001ddf8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1ddf8:	b580      	push	{r7, lr}
   1ddfa:	b084      	sub	sp, #16
   1ddfc:	af00      	add	r7, sp, #0
   1ddfe:	6078      	str	r0, [r7, #4]
   1de00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1de02:	4b21      	ldr	r3, [pc, #132]	; (1de88 <prvAddCurrentTaskToDelayedList+0x90>)
   1de04:	681b      	ldr	r3, [r3, #0]
   1de06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1de08:	4b20      	ldr	r3, [pc, #128]	; (1de8c <prvAddCurrentTaskToDelayedList+0x94>)
   1de0a:	681b      	ldr	r3, [r3, #0]
   1de0c:	3304      	adds	r3, #4
   1de0e:	0018      	movs	r0, r3
   1de10:	4b1f      	ldr	r3, [pc, #124]	; (1de90 <prvAddCurrentTaskToDelayedList+0x98>)
   1de12:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1de14:	687b      	ldr	r3, [r7, #4]
   1de16:	3301      	adds	r3, #1
   1de18:	d10b      	bne.n	1de32 <prvAddCurrentTaskToDelayedList+0x3a>
   1de1a:	683b      	ldr	r3, [r7, #0]
   1de1c:	2b00      	cmp	r3, #0
   1de1e:	d008      	beq.n	1de32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1de20:	4b1a      	ldr	r3, [pc, #104]	; (1de8c <prvAddCurrentTaskToDelayedList+0x94>)
   1de22:	681b      	ldr	r3, [r3, #0]
   1de24:	1d1a      	adds	r2, r3, #4
   1de26:	4b1b      	ldr	r3, [pc, #108]	; (1de94 <prvAddCurrentTaskToDelayedList+0x9c>)
   1de28:	0011      	movs	r1, r2
   1de2a:	0018      	movs	r0, r3
   1de2c:	4b1a      	ldr	r3, [pc, #104]	; (1de98 <prvAddCurrentTaskToDelayedList+0xa0>)
   1de2e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1de30:	e026      	b.n	1de80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1de32:	68fa      	ldr	r2, [r7, #12]
   1de34:	687b      	ldr	r3, [r7, #4]
   1de36:	18d3      	adds	r3, r2, r3
   1de38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1de3a:	4b14      	ldr	r3, [pc, #80]	; (1de8c <prvAddCurrentTaskToDelayedList+0x94>)
   1de3c:	681b      	ldr	r3, [r3, #0]
   1de3e:	68ba      	ldr	r2, [r7, #8]
   1de40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1de42:	68ba      	ldr	r2, [r7, #8]
   1de44:	68fb      	ldr	r3, [r7, #12]
   1de46:	429a      	cmp	r2, r3
   1de48:	d209      	bcs.n	1de5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1de4a:	4b14      	ldr	r3, [pc, #80]	; (1de9c <prvAddCurrentTaskToDelayedList+0xa4>)
   1de4c:	681a      	ldr	r2, [r3, #0]
   1de4e:	4b0f      	ldr	r3, [pc, #60]	; (1de8c <prvAddCurrentTaskToDelayedList+0x94>)
   1de50:	681b      	ldr	r3, [r3, #0]
   1de52:	3304      	adds	r3, #4
   1de54:	0019      	movs	r1, r3
   1de56:	0010      	movs	r0, r2
   1de58:	4b11      	ldr	r3, [pc, #68]	; (1dea0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1de5a:	4798      	blx	r3
}
   1de5c:	e010      	b.n	1de80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1de5e:	4b11      	ldr	r3, [pc, #68]	; (1dea4 <prvAddCurrentTaskToDelayedList+0xac>)
   1de60:	681a      	ldr	r2, [r3, #0]
   1de62:	4b0a      	ldr	r3, [pc, #40]	; (1de8c <prvAddCurrentTaskToDelayedList+0x94>)
   1de64:	681b      	ldr	r3, [r3, #0]
   1de66:	3304      	adds	r3, #4
   1de68:	0019      	movs	r1, r3
   1de6a:	0010      	movs	r0, r2
   1de6c:	4b0c      	ldr	r3, [pc, #48]	; (1dea0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1de6e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1de70:	4b0d      	ldr	r3, [pc, #52]	; (1dea8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1de72:	681b      	ldr	r3, [r3, #0]
   1de74:	68ba      	ldr	r2, [r7, #8]
   1de76:	429a      	cmp	r2, r3
   1de78:	d202      	bcs.n	1de80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1de7a:	4b0b      	ldr	r3, [pc, #44]	; (1dea8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1de7c:	68ba      	ldr	r2, [r7, #8]
   1de7e:	601a      	str	r2, [r3, #0]
}
   1de80:	46c0      	nop			; (mov r8, r8)
   1de82:	46bd      	mov	sp, r7
   1de84:	b004      	add	sp, #16
   1de86:	bd80      	pop	{r7, pc}
   1de88:	200041b8 	.word	0x200041b8
   1de8c:	200040dc 	.word	0x200040dc
   1de90:	0001aa57 	.word	0x0001aa57
   1de94:	200041a0 	.word	0x200041a0
   1de98:	0001a9a7 	.word	0x0001a9a7
   1de9c:	20004170 	.word	0x20004170
   1dea0:	0001a9eb 	.word	0x0001a9eb
   1dea4:	2000416c 	.word	0x2000416c
   1dea8:	200041d4 	.word	0x200041d4

0001deac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1deac:	b590      	push	{r4, r7, lr}
   1deae:	b085      	sub	sp, #20
   1deb0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1deb2:	2300      	movs	r3, #0
   1deb4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1deb6:	4b0e      	ldr	r3, [pc, #56]	; (1def0 <xTimerCreateTimerTask+0x44>)
   1deb8:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1deba:	4b0e      	ldr	r3, [pc, #56]	; (1def4 <xTimerCreateTimerTask+0x48>)
   1debc:	681b      	ldr	r3, [r3, #0]
   1debe:	2b00      	cmp	r3, #0
   1dec0:	d00b      	beq.n	1deda <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1dec2:	490d      	ldr	r1, [pc, #52]	; (1def8 <xTimerCreateTimerTask+0x4c>)
   1dec4:	480d      	ldr	r0, [pc, #52]	; (1defc <xTimerCreateTimerTask+0x50>)
   1dec6:	4b0e      	ldr	r3, [pc, #56]	; (1df00 <xTimerCreateTimerTask+0x54>)
   1dec8:	9301      	str	r3, [sp, #4]
   1deca:	2302      	movs	r3, #2
   1decc:	9300      	str	r3, [sp, #0]
   1dece:	2300      	movs	r3, #0
   1ded0:	2280      	movs	r2, #128	; 0x80
   1ded2:	4c0c      	ldr	r4, [pc, #48]	; (1df04 <xTimerCreateTimerTask+0x58>)
   1ded4:	47a0      	blx	r4
   1ded6:	0003      	movs	r3, r0
   1ded8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1deda:	687b      	ldr	r3, [r7, #4]
   1dedc:	2b00      	cmp	r3, #0
   1dede:	d101      	bne.n	1dee4 <xTimerCreateTimerTask+0x38>
   1dee0:	b672      	cpsid	i
   1dee2:	e7fe      	b.n	1dee2 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1dee4:	687b      	ldr	r3, [r7, #4]
}
   1dee6:	0018      	movs	r0, r3
   1dee8:	46bd      	mov	sp, r7
   1deea:	b003      	add	sp, #12
   1deec:	bd90      	pop	{r4, r7, pc}
   1deee:	46c0      	nop			; (mov r8, r8)
   1def0:	0001e3f5 	.word	0x0001e3f5
   1def4:	20004210 	.word	0x20004210
   1def8:	0003920c 	.word	0x0003920c
   1defc:	0001e02d 	.word	0x0001e02d
   1df00:	20004214 	.word	0x20004214
   1df04:	0001c845 	.word	0x0001c845

0001df08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1df08:	b590      	push	{r4, r7, lr}
   1df0a:	b089      	sub	sp, #36	; 0x24
   1df0c:	af00      	add	r7, sp, #0
   1df0e:	60f8      	str	r0, [r7, #12]
   1df10:	60b9      	str	r1, [r7, #8]
   1df12:	607a      	str	r2, [r7, #4]
   1df14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1df16:	2300      	movs	r3, #0
   1df18:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1df1a:	68fb      	ldr	r3, [r7, #12]
   1df1c:	2b00      	cmp	r3, #0
   1df1e:	d101      	bne.n	1df24 <xTimerGenericCommand+0x1c>
   1df20:	b672      	cpsid	i
   1df22:	e7fe      	b.n	1df22 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1df24:	4b1e      	ldr	r3, [pc, #120]	; (1dfa0 <xTimerGenericCommand+0x98>)
   1df26:	681b      	ldr	r3, [r3, #0]
   1df28:	2b00      	cmp	r3, #0
   1df2a:	d033      	beq.n	1df94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1df2c:	2310      	movs	r3, #16
   1df2e:	18fb      	adds	r3, r7, r3
   1df30:	68ba      	ldr	r2, [r7, #8]
   1df32:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1df34:	2310      	movs	r3, #16
   1df36:	18fb      	adds	r3, r7, r3
   1df38:	687a      	ldr	r2, [r7, #4]
   1df3a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1df3c:	2310      	movs	r3, #16
   1df3e:	18fb      	adds	r3, r7, r3
   1df40:	68fa      	ldr	r2, [r7, #12]
   1df42:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1df44:	68bb      	ldr	r3, [r7, #8]
   1df46:	2b05      	cmp	r3, #5
   1df48:	dc1a      	bgt.n	1df80 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1df4a:	4b16      	ldr	r3, [pc, #88]	; (1dfa4 <xTimerGenericCommand+0x9c>)
   1df4c:	4798      	blx	r3
   1df4e:	0003      	movs	r3, r0
   1df50:	2b02      	cmp	r3, #2
   1df52:	d10a      	bne.n	1df6a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1df54:	4b12      	ldr	r3, [pc, #72]	; (1dfa0 <xTimerGenericCommand+0x98>)
   1df56:	6818      	ldr	r0, [r3, #0]
   1df58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1df5a:	2310      	movs	r3, #16
   1df5c:	18f9      	adds	r1, r7, r3
   1df5e:	2300      	movs	r3, #0
   1df60:	4c11      	ldr	r4, [pc, #68]	; (1dfa8 <xTimerGenericCommand+0xa0>)
   1df62:	47a0      	blx	r4
   1df64:	0003      	movs	r3, r0
   1df66:	61fb      	str	r3, [r7, #28]
   1df68:	e014      	b.n	1df94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1df6a:	4b0d      	ldr	r3, [pc, #52]	; (1dfa0 <xTimerGenericCommand+0x98>)
   1df6c:	6818      	ldr	r0, [r3, #0]
   1df6e:	2310      	movs	r3, #16
   1df70:	18f9      	adds	r1, r7, r3
   1df72:	2300      	movs	r3, #0
   1df74:	2200      	movs	r2, #0
   1df76:	4c0c      	ldr	r4, [pc, #48]	; (1dfa8 <xTimerGenericCommand+0xa0>)
   1df78:	47a0      	blx	r4
   1df7a:	0003      	movs	r3, r0
   1df7c:	61fb      	str	r3, [r7, #28]
   1df7e:	e009      	b.n	1df94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1df80:	4b07      	ldr	r3, [pc, #28]	; (1dfa0 <xTimerGenericCommand+0x98>)
   1df82:	6818      	ldr	r0, [r3, #0]
   1df84:	683a      	ldr	r2, [r7, #0]
   1df86:	2310      	movs	r3, #16
   1df88:	18f9      	adds	r1, r7, r3
   1df8a:	2300      	movs	r3, #0
   1df8c:	4c07      	ldr	r4, [pc, #28]	; (1dfac <xTimerGenericCommand+0xa4>)
   1df8e:	47a0      	blx	r4
   1df90:	0003      	movs	r3, r0
   1df92:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1df94:	69fb      	ldr	r3, [r7, #28]
}
   1df96:	0018      	movs	r0, r3
   1df98:	46bd      	mov	sp, r7
   1df9a:	b009      	add	sp, #36	; 0x24
   1df9c:	bd90      	pop	{r4, r7, pc}
   1df9e:	46c0      	nop			; (mov r8, r8)
   1dfa0:	20004210 	.word	0x20004210
   1dfa4:	0001d909 	.word	0x0001d909
   1dfa8:	0001b17d 	.word	0x0001b17d
   1dfac:	0001b5dd 	.word	0x0001b5dd

0001dfb0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1dfb0:	b590      	push	{r4, r7, lr}
   1dfb2:	b087      	sub	sp, #28
   1dfb4:	af02      	add	r7, sp, #8
   1dfb6:	6078      	str	r0, [r7, #4]
   1dfb8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1dfba:	4b18      	ldr	r3, [pc, #96]	; (1e01c <prvProcessExpiredTimer+0x6c>)
   1dfbc:	681b      	ldr	r3, [r3, #0]
   1dfbe:	68db      	ldr	r3, [r3, #12]
   1dfc0:	68db      	ldr	r3, [r3, #12]
   1dfc2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1dfc4:	68fb      	ldr	r3, [r7, #12]
   1dfc6:	3304      	adds	r3, #4
   1dfc8:	0018      	movs	r0, r3
   1dfca:	4b15      	ldr	r3, [pc, #84]	; (1e020 <prvProcessExpiredTimer+0x70>)
   1dfcc:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1dfce:	68fb      	ldr	r3, [r7, #12]
   1dfd0:	69db      	ldr	r3, [r3, #28]
   1dfd2:	2b01      	cmp	r3, #1
   1dfd4:	d119      	bne.n	1e00a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1dfd6:	68fb      	ldr	r3, [r7, #12]
   1dfd8:	699a      	ldr	r2, [r3, #24]
   1dfda:	687b      	ldr	r3, [r7, #4]
   1dfdc:	18d1      	adds	r1, r2, r3
   1dfde:	687b      	ldr	r3, [r7, #4]
   1dfe0:	683a      	ldr	r2, [r7, #0]
   1dfe2:	68f8      	ldr	r0, [r7, #12]
   1dfe4:	4c0f      	ldr	r4, [pc, #60]	; (1e024 <prvProcessExpiredTimer+0x74>)
   1dfe6:	47a0      	blx	r4
   1dfe8:	1e03      	subs	r3, r0, #0
   1dfea:	d00e      	beq.n	1e00a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1dfec:	687a      	ldr	r2, [r7, #4]
   1dfee:	68f8      	ldr	r0, [r7, #12]
   1dff0:	2300      	movs	r3, #0
   1dff2:	9300      	str	r3, [sp, #0]
   1dff4:	2300      	movs	r3, #0
   1dff6:	2100      	movs	r1, #0
   1dff8:	4c0b      	ldr	r4, [pc, #44]	; (1e028 <prvProcessExpiredTimer+0x78>)
   1dffa:	47a0      	blx	r4
   1dffc:	0003      	movs	r3, r0
   1dffe:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1e000:	68bb      	ldr	r3, [r7, #8]
   1e002:	2b00      	cmp	r3, #0
   1e004:	d101      	bne.n	1e00a <prvProcessExpiredTimer+0x5a>
   1e006:	b672      	cpsid	i
   1e008:	e7fe      	b.n	1e008 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e00a:	68fb      	ldr	r3, [r7, #12]
   1e00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e00e:	68fa      	ldr	r2, [r7, #12]
   1e010:	0010      	movs	r0, r2
   1e012:	4798      	blx	r3
}
   1e014:	46c0      	nop			; (mov r8, r8)
   1e016:	46bd      	mov	sp, r7
   1e018:	b005      	add	sp, #20
   1e01a:	bd90      	pop	{r4, r7, pc}
   1e01c:	20004208 	.word	0x20004208
   1e020:	0001aa57 	.word	0x0001aa57
   1e024:	0001e195 	.word	0x0001e195
   1e028:	0001df09 	.word	0x0001df09

0001e02c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1e02c:	b580      	push	{r7, lr}
   1e02e:	b084      	sub	sp, #16
   1e030:	af00      	add	r7, sp, #0
   1e032:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1e034:	4b08      	ldr	r3, [pc, #32]	; (1e058 <prvTimerTask+0x2c>)
   1e036:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e038:	2308      	movs	r3, #8
   1e03a:	18fb      	adds	r3, r7, r3
   1e03c:	0018      	movs	r0, r3
   1e03e:	4b07      	ldr	r3, [pc, #28]	; (1e05c <prvTimerTask+0x30>)
   1e040:	4798      	blx	r3
   1e042:	0003      	movs	r3, r0
   1e044:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1e046:	68ba      	ldr	r2, [r7, #8]
   1e048:	68fb      	ldr	r3, [r7, #12]
   1e04a:	0011      	movs	r1, r2
   1e04c:	0018      	movs	r0, r3
   1e04e:	4b04      	ldr	r3, [pc, #16]	; (1e060 <prvTimerTask+0x34>)
   1e050:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1e052:	4b04      	ldr	r3, [pc, #16]	; (1e064 <prvTimerTask+0x38>)
   1e054:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e056:	e7ef      	b.n	1e038 <prvTimerTask+0xc>
   1e058:	0003338d 	.word	0x0003338d
   1e05c:	0001e10d 	.word	0x0001e10d
   1e060:	0001e069 	.word	0x0001e069
   1e064:	0001e21d 	.word	0x0001e21d

0001e068 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1e068:	b580      	push	{r7, lr}
   1e06a:	b084      	sub	sp, #16
   1e06c:	af00      	add	r7, sp, #0
   1e06e:	6078      	str	r0, [r7, #4]
   1e070:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1e072:	4b1e      	ldr	r3, [pc, #120]	; (1e0ec <prvProcessTimerOrBlockTask+0x84>)
   1e074:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e076:	2308      	movs	r3, #8
   1e078:	18fb      	adds	r3, r7, r3
   1e07a:	0018      	movs	r0, r3
   1e07c:	4b1c      	ldr	r3, [pc, #112]	; (1e0f0 <prvProcessTimerOrBlockTask+0x88>)
   1e07e:	4798      	blx	r3
   1e080:	0003      	movs	r3, r0
   1e082:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1e084:	68bb      	ldr	r3, [r7, #8]
   1e086:	2b00      	cmp	r3, #0
   1e088:	d129      	bne.n	1e0de <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1e08a:	683b      	ldr	r3, [r7, #0]
   1e08c:	2b00      	cmp	r3, #0
   1e08e:	d10c      	bne.n	1e0aa <prvProcessTimerOrBlockTask+0x42>
   1e090:	687a      	ldr	r2, [r7, #4]
   1e092:	68fb      	ldr	r3, [r7, #12]
   1e094:	429a      	cmp	r2, r3
   1e096:	d808      	bhi.n	1e0aa <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1e098:	4b16      	ldr	r3, [pc, #88]	; (1e0f4 <prvProcessTimerOrBlockTask+0x8c>)
   1e09a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1e09c:	68fa      	ldr	r2, [r7, #12]
   1e09e:	687b      	ldr	r3, [r7, #4]
   1e0a0:	0011      	movs	r1, r2
   1e0a2:	0018      	movs	r0, r3
   1e0a4:	4b14      	ldr	r3, [pc, #80]	; (1e0f8 <prvProcessTimerOrBlockTask+0x90>)
   1e0a6:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1e0a8:	e01b      	b.n	1e0e2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1e0aa:	683b      	ldr	r3, [r7, #0]
   1e0ac:	2b00      	cmp	r3, #0
   1e0ae:	d006      	beq.n	1e0be <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1e0b0:	4b12      	ldr	r3, [pc, #72]	; (1e0fc <prvProcessTimerOrBlockTask+0x94>)
   1e0b2:	681b      	ldr	r3, [r3, #0]
   1e0b4:	681b      	ldr	r3, [r3, #0]
   1e0b6:	425a      	negs	r2, r3
   1e0b8:	4153      	adcs	r3, r2
   1e0ba:	b2db      	uxtb	r3, r3
   1e0bc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1e0be:	4b10      	ldr	r3, [pc, #64]	; (1e100 <prvProcessTimerOrBlockTask+0x98>)
   1e0c0:	6818      	ldr	r0, [r3, #0]
   1e0c2:	687a      	ldr	r2, [r7, #4]
   1e0c4:	68fb      	ldr	r3, [r7, #12]
   1e0c6:	1ad3      	subs	r3, r2, r3
   1e0c8:	683a      	ldr	r2, [r7, #0]
   1e0ca:	0019      	movs	r1, r3
   1e0cc:	4b0d      	ldr	r3, [pc, #52]	; (1e104 <prvProcessTimerOrBlockTask+0x9c>)
   1e0ce:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1e0d0:	4b08      	ldr	r3, [pc, #32]	; (1e0f4 <prvProcessTimerOrBlockTask+0x8c>)
   1e0d2:	4798      	blx	r3
   1e0d4:	1e03      	subs	r3, r0, #0
   1e0d6:	d104      	bne.n	1e0e2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1e0d8:	4b0b      	ldr	r3, [pc, #44]	; (1e108 <prvProcessTimerOrBlockTask+0xa0>)
   1e0da:	4798      	blx	r3
}
   1e0dc:	e001      	b.n	1e0e2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1e0de:	4b05      	ldr	r3, [pc, #20]	; (1e0f4 <prvProcessTimerOrBlockTask+0x8c>)
   1e0e0:	4798      	blx	r3
}
   1e0e2:	46c0      	nop			; (mov r8, r8)
   1e0e4:	46bd      	mov	sp, r7
   1e0e6:	b004      	add	sp, #16
   1e0e8:	bd80      	pop	{r7, pc}
   1e0ea:	46c0      	nop			; (mov r8, r8)
   1e0ec:	0001cea1 	.word	0x0001cea1
   1e0f0:	0001e14d 	.word	0x0001e14d
   1e0f4:	0001ceb9 	.word	0x0001ceb9
   1e0f8:	0001dfb1 	.word	0x0001dfb1
   1e0fc:	2000420c 	.word	0x2000420c
   1e100:	20004210 	.word	0x20004210
   1e104:	0001c641 	.word	0x0001c641
   1e108:	0001abd1 	.word	0x0001abd1

0001e10c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1e10c:	b580      	push	{r7, lr}
   1e10e:	b084      	sub	sp, #16
   1e110:	af00      	add	r7, sp, #0
   1e112:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1e114:	4b0c      	ldr	r3, [pc, #48]	; (1e148 <prvGetNextExpireTime+0x3c>)
   1e116:	681b      	ldr	r3, [r3, #0]
   1e118:	681b      	ldr	r3, [r3, #0]
   1e11a:	425a      	negs	r2, r3
   1e11c:	4153      	adcs	r3, r2
   1e11e:	b2db      	uxtb	r3, r3
   1e120:	001a      	movs	r2, r3
   1e122:	687b      	ldr	r3, [r7, #4]
   1e124:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1e126:	687b      	ldr	r3, [r7, #4]
   1e128:	681b      	ldr	r3, [r3, #0]
   1e12a:	2b00      	cmp	r3, #0
   1e12c:	d105      	bne.n	1e13a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e12e:	4b06      	ldr	r3, [pc, #24]	; (1e148 <prvGetNextExpireTime+0x3c>)
   1e130:	681b      	ldr	r3, [r3, #0]
   1e132:	68db      	ldr	r3, [r3, #12]
   1e134:	681b      	ldr	r3, [r3, #0]
   1e136:	60fb      	str	r3, [r7, #12]
   1e138:	e001      	b.n	1e13e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1e13a:	2300      	movs	r3, #0
   1e13c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1e13e:	68fb      	ldr	r3, [r7, #12]
}
   1e140:	0018      	movs	r0, r3
   1e142:	46bd      	mov	sp, r7
   1e144:	b004      	add	sp, #16
   1e146:	bd80      	pop	{r7, pc}
   1e148:	20004208 	.word	0x20004208

0001e14c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1e14c:	b580      	push	{r7, lr}
   1e14e:	b084      	sub	sp, #16
   1e150:	af00      	add	r7, sp, #0
   1e152:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1e154:	4b0c      	ldr	r3, [pc, #48]	; (1e188 <prvSampleTimeNow+0x3c>)
   1e156:	4798      	blx	r3
   1e158:	0003      	movs	r3, r0
   1e15a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1e15c:	4b0b      	ldr	r3, [pc, #44]	; (1e18c <prvSampleTimeNow+0x40>)
   1e15e:	681b      	ldr	r3, [r3, #0]
   1e160:	68fa      	ldr	r2, [r7, #12]
   1e162:	429a      	cmp	r2, r3
   1e164:	d205      	bcs.n	1e172 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1e166:	4b0a      	ldr	r3, [pc, #40]	; (1e190 <prvSampleTimeNow+0x44>)
   1e168:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1e16a:	687b      	ldr	r3, [r7, #4]
   1e16c:	2201      	movs	r2, #1
   1e16e:	601a      	str	r2, [r3, #0]
   1e170:	e002      	b.n	1e178 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1e172:	687b      	ldr	r3, [r7, #4]
   1e174:	2200      	movs	r2, #0
   1e176:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1e178:	4b04      	ldr	r3, [pc, #16]	; (1e18c <prvSampleTimeNow+0x40>)
   1e17a:	68fa      	ldr	r2, [r7, #12]
   1e17c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1e17e:	68fb      	ldr	r3, [r7, #12]
}
   1e180:	0018      	movs	r0, r3
   1e182:	46bd      	mov	sp, r7
   1e184:	b004      	add	sp, #16
   1e186:	bd80      	pop	{r7, pc}
   1e188:	0001d029 	.word	0x0001d029
   1e18c:	20004218 	.word	0x20004218
   1e190:	0001e335 	.word	0x0001e335

0001e194 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1e194:	b580      	push	{r7, lr}
   1e196:	b086      	sub	sp, #24
   1e198:	af00      	add	r7, sp, #0
   1e19a:	60f8      	str	r0, [r7, #12]
   1e19c:	60b9      	str	r1, [r7, #8]
   1e19e:	607a      	str	r2, [r7, #4]
   1e1a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1e1a2:	2300      	movs	r3, #0
   1e1a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1e1a6:	68fb      	ldr	r3, [r7, #12]
   1e1a8:	68ba      	ldr	r2, [r7, #8]
   1e1aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e1ac:	68fb      	ldr	r3, [r7, #12]
   1e1ae:	68fa      	ldr	r2, [r7, #12]
   1e1b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1e1b2:	68ba      	ldr	r2, [r7, #8]
   1e1b4:	687b      	ldr	r3, [r7, #4]
   1e1b6:	429a      	cmp	r2, r3
   1e1b8:	d812      	bhi.n	1e1e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e1ba:	687a      	ldr	r2, [r7, #4]
   1e1bc:	683b      	ldr	r3, [r7, #0]
   1e1be:	1ad2      	subs	r2, r2, r3
   1e1c0:	68fb      	ldr	r3, [r7, #12]
   1e1c2:	699b      	ldr	r3, [r3, #24]
   1e1c4:	429a      	cmp	r2, r3
   1e1c6:	d302      	bcc.n	1e1ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1e1c8:	2301      	movs	r3, #1
   1e1ca:	617b      	str	r3, [r7, #20]
   1e1cc:	e01b      	b.n	1e206 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1e1ce:	4b10      	ldr	r3, [pc, #64]	; (1e210 <prvInsertTimerInActiveList+0x7c>)
   1e1d0:	681a      	ldr	r2, [r3, #0]
   1e1d2:	68fb      	ldr	r3, [r7, #12]
   1e1d4:	3304      	adds	r3, #4
   1e1d6:	0019      	movs	r1, r3
   1e1d8:	0010      	movs	r0, r2
   1e1da:	4b0e      	ldr	r3, [pc, #56]	; (1e214 <prvInsertTimerInActiveList+0x80>)
   1e1dc:	4798      	blx	r3
   1e1de:	e012      	b.n	1e206 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1e1e0:	687a      	ldr	r2, [r7, #4]
   1e1e2:	683b      	ldr	r3, [r7, #0]
   1e1e4:	429a      	cmp	r2, r3
   1e1e6:	d206      	bcs.n	1e1f6 <prvInsertTimerInActiveList+0x62>
   1e1e8:	68ba      	ldr	r2, [r7, #8]
   1e1ea:	683b      	ldr	r3, [r7, #0]
   1e1ec:	429a      	cmp	r2, r3
   1e1ee:	d302      	bcc.n	1e1f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1e1f0:	2301      	movs	r3, #1
   1e1f2:	617b      	str	r3, [r7, #20]
   1e1f4:	e007      	b.n	1e206 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e1f6:	4b08      	ldr	r3, [pc, #32]	; (1e218 <prvInsertTimerInActiveList+0x84>)
   1e1f8:	681a      	ldr	r2, [r3, #0]
   1e1fa:	68fb      	ldr	r3, [r7, #12]
   1e1fc:	3304      	adds	r3, #4
   1e1fe:	0019      	movs	r1, r3
   1e200:	0010      	movs	r0, r2
   1e202:	4b04      	ldr	r3, [pc, #16]	; (1e214 <prvInsertTimerInActiveList+0x80>)
   1e204:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1e206:	697b      	ldr	r3, [r7, #20]
}
   1e208:	0018      	movs	r0, r3
   1e20a:	46bd      	mov	sp, r7
   1e20c:	b006      	add	sp, #24
   1e20e:	bd80      	pop	{r7, pc}
   1e210:	2000420c 	.word	0x2000420c
   1e214:	0001a9eb 	.word	0x0001a9eb
   1e218:	20004208 	.word	0x20004208

0001e21c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1e21c:	b590      	push	{r4, r7, lr}
   1e21e:	b08b      	sub	sp, #44	; 0x2c
   1e220:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e222:	e068      	b.n	1e2f6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1e224:	2308      	movs	r3, #8
   1e226:	18fb      	adds	r3, r7, r3
   1e228:	681b      	ldr	r3, [r3, #0]
   1e22a:	2b00      	cmp	r3, #0
   1e22c:	db63      	blt.n	1e2f6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1e22e:	2308      	movs	r3, #8
   1e230:	18fb      	adds	r3, r7, r3
   1e232:	689b      	ldr	r3, [r3, #8]
   1e234:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1e236:	69fb      	ldr	r3, [r7, #28]
   1e238:	695b      	ldr	r3, [r3, #20]
   1e23a:	2b00      	cmp	r3, #0
   1e23c:	d004      	beq.n	1e248 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e23e:	69fb      	ldr	r3, [r7, #28]
   1e240:	3304      	adds	r3, #4
   1e242:	0018      	movs	r0, r3
   1e244:	4b33      	ldr	r3, [pc, #204]	; (1e314 <prvProcessReceivedCommands+0xf8>)
   1e246:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e248:	1d3b      	adds	r3, r7, #4
   1e24a:	0018      	movs	r0, r3
   1e24c:	4b32      	ldr	r3, [pc, #200]	; (1e318 <prvProcessReceivedCommands+0xfc>)
   1e24e:	4798      	blx	r3
   1e250:	0003      	movs	r3, r0
   1e252:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1e254:	2308      	movs	r3, #8
   1e256:	18fb      	adds	r3, r7, r3
   1e258:	681b      	ldr	r3, [r3, #0]
   1e25a:	2b09      	cmp	r3, #9
   1e25c:	d84a      	bhi.n	1e2f4 <prvProcessReceivedCommands+0xd8>
   1e25e:	009a      	lsls	r2, r3, #2
   1e260:	4b2e      	ldr	r3, [pc, #184]	; (1e31c <prvProcessReceivedCommands+0x100>)
   1e262:	18d3      	adds	r3, r2, r3
   1e264:	681b      	ldr	r3, [r3, #0]
   1e266:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1e268:	2308      	movs	r3, #8
   1e26a:	18fb      	adds	r3, r7, r3
   1e26c:	685a      	ldr	r2, [r3, #4]
   1e26e:	69fb      	ldr	r3, [r7, #28]
   1e270:	699b      	ldr	r3, [r3, #24]
   1e272:	18d1      	adds	r1, r2, r3
   1e274:	2308      	movs	r3, #8
   1e276:	18fb      	adds	r3, r7, r3
   1e278:	685b      	ldr	r3, [r3, #4]
   1e27a:	69ba      	ldr	r2, [r7, #24]
   1e27c:	69f8      	ldr	r0, [r7, #28]
   1e27e:	4c28      	ldr	r4, [pc, #160]	; (1e320 <prvProcessReceivedCommands+0x104>)
   1e280:	47a0      	blx	r4
   1e282:	1e03      	subs	r3, r0, #0
   1e284:	d037      	beq.n	1e2f6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e286:	69fb      	ldr	r3, [r7, #28]
   1e288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e28a:	69fa      	ldr	r2, [r7, #28]
   1e28c:	0010      	movs	r0, r2
   1e28e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e290:	69fb      	ldr	r3, [r7, #28]
   1e292:	69db      	ldr	r3, [r3, #28]
   1e294:	2b01      	cmp	r3, #1
   1e296:	d12e      	bne.n	1e2f6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1e298:	2308      	movs	r3, #8
   1e29a:	18fb      	adds	r3, r7, r3
   1e29c:	685a      	ldr	r2, [r3, #4]
   1e29e:	69fb      	ldr	r3, [r7, #28]
   1e2a0:	699b      	ldr	r3, [r3, #24]
   1e2a2:	18d2      	adds	r2, r2, r3
   1e2a4:	69f8      	ldr	r0, [r7, #28]
   1e2a6:	2300      	movs	r3, #0
   1e2a8:	9300      	str	r3, [sp, #0]
   1e2aa:	2300      	movs	r3, #0
   1e2ac:	2100      	movs	r1, #0
   1e2ae:	4c1d      	ldr	r4, [pc, #116]	; (1e324 <prvProcessReceivedCommands+0x108>)
   1e2b0:	47a0      	blx	r4
   1e2b2:	0003      	movs	r3, r0
   1e2b4:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1e2b6:	697b      	ldr	r3, [r7, #20]
   1e2b8:	2b00      	cmp	r3, #0
   1e2ba:	d11c      	bne.n	1e2f6 <prvProcessReceivedCommands+0xda>
   1e2bc:	b672      	cpsid	i
   1e2be:	e7fe      	b.n	1e2be <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1e2c0:	2308      	movs	r3, #8
   1e2c2:	18fb      	adds	r3, r7, r3
   1e2c4:	685a      	ldr	r2, [r3, #4]
   1e2c6:	69fb      	ldr	r3, [r7, #28]
   1e2c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1e2ca:	69fb      	ldr	r3, [r7, #28]
   1e2cc:	699b      	ldr	r3, [r3, #24]
   1e2ce:	2b00      	cmp	r3, #0
   1e2d0:	d101      	bne.n	1e2d6 <prvProcessReceivedCommands+0xba>
   1e2d2:	b672      	cpsid	i
   1e2d4:	e7fe      	b.n	1e2d4 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1e2d6:	69fb      	ldr	r3, [r7, #28]
   1e2d8:	699a      	ldr	r2, [r3, #24]
   1e2da:	69bb      	ldr	r3, [r7, #24]
   1e2dc:	18d1      	adds	r1, r2, r3
   1e2de:	69bb      	ldr	r3, [r7, #24]
   1e2e0:	69ba      	ldr	r2, [r7, #24]
   1e2e2:	69f8      	ldr	r0, [r7, #28]
   1e2e4:	4c0e      	ldr	r4, [pc, #56]	; (1e320 <prvProcessReceivedCommands+0x104>)
   1e2e6:	47a0      	blx	r4
					break;
   1e2e8:	e005      	b.n	1e2f6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1e2ea:	69fb      	ldr	r3, [r7, #28]
   1e2ec:	0018      	movs	r0, r3
   1e2ee:	4b0e      	ldr	r3, [pc, #56]	; (1e328 <prvProcessReceivedCommands+0x10c>)
   1e2f0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1e2f2:	e000      	b.n	1e2f6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1e2f4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e2f6:	4b0d      	ldr	r3, [pc, #52]	; (1e32c <prvProcessReceivedCommands+0x110>)
   1e2f8:	681b      	ldr	r3, [r3, #0]
   1e2fa:	2208      	movs	r2, #8
   1e2fc:	18b9      	adds	r1, r7, r2
   1e2fe:	2200      	movs	r2, #0
   1e300:	0018      	movs	r0, r3
   1e302:	4b0b      	ldr	r3, [pc, #44]	; (1e330 <prvProcessReceivedCommands+0x114>)
   1e304:	4798      	blx	r3
   1e306:	1e03      	subs	r3, r0, #0
   1e308:	d18c      	bne.n	1e224 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1e30a:	46c0      	nop			; (mov r8, r8)
   1e30c:	46bd      	mov	sp, r7
   1e30e:	b009      	add	sp, #36	; 0x24
   1e310:	bd90      	pop	{r4, r7, pc}
   1e312:	46c0      	nop			; (mov r8, r8)
   1e314:	0001aa57 	.word	0x0001aa57
   1e318:	0001e14d 	.word	0x0001e14d
   1e31c:	00039214 	.word	0x00039214
   1e320:	0001e195 	.word	0x0001e195
   1e324:	0001df09 	.word	0x0001df09
   1e328:	0001ade5 	.word	0x0001ade5
   1e32c:	20004210 	.word	0x20004210
   1e330:	0001ba35 	.word	0x0001ba35

0001e334 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1e334:	b590      	push	{r4, r7, lr}
   1e336:	b089      	sub	sp, #36	; 0x24
   1e338:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e33a:	e03e      	b.n	1e3ba <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e33c:	4b28      	ldr	r3, [pc, #160]	; (1e3e0 <prvSwitchTimerLists+0xac>)
   1e33e:	681b      	ldr	r3, [r3, #0]
   1e340:	68db      	ldr	r3, [r3, #12]
   1e342:	681b      	ldr	r3, [r3, #0]
   1e344:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e346:	4b26      	ldr	r3, [pc, #152]	; (1e3e0 <prvSwitchTimerLists+0xac>)
   1e348:	681b      	ldr	r3, [r3, #0]
   1e34a:	68db      	ldr	r3, [r3, #12]
   1e34c:	68db      	ldr	r3, [r3, #12]
   1e34e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e350:	693b      	ldr	r3, [r7, #16]
   1e352:	3304      	adds	r3, #4
   1e354:	0018      	movs	r0, r3
   1e356:	4b23      	ldr	r3, [pc, #140]	; (1e3e4 <prvSwitchTimerLists+0xb0>)
   1e358:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e35a:	693b      	ldr	r3, [r7, #16]
   1e35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e35e:	693a      	ldr	r2, [r7, #16]
   1e360:	0010      	movs	r0, r2
   1e362:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e364:	693b      	ldr	r3, [r7, #16]
   1e366:	69db      	ldr	r3, [r3, #28]
   1e368:	2b01      	cmp	r3, #1
   1e36a:	d126      	bne.n	1e3ba <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1e36c:	693b      	ldr	r3, [r7, #16]
   1e36e:	699a      	ldr	r2, [r3, #24]
   1e370:	697b      	ldr	r3, [r7, #20]
   1e372:	18d3      	adds	r3, r2, r3
   1e374:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1e376:	68fa      	ldr	r2, [r7, #12]
   1e378:	697b      	ldr	r3, [r7, #20]
   1e37a:	429a      	cmp	r2, r3
   1e37c:	d90e      	bls.n	1e39c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1e37e:	693b      	ldr	r3, [r7, #16]
   1e380:	68fa      	ldr	r2, [r7, #12]
   1e382:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e384:	693b      	ldr	r3, [r7, #16]
   1e386:	693a      	ldr	r2, [r7, #16]
   1e388:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e38a:	4b15      	ldr	r3, [pc, #84]	; (1e3e0 <prvSwitchTimerLists+0xac>)
   1e38c:	681a      	ldr	r2, [r3, #0]
   1e38e:	693b      	ldr	r3, [r7, #16]
   1e390:	3304      	adds	r3, #4
   1e392:	0019      	movs	r1, r3
   1e394:	0010      	movs	r0, r2
   1e396:	4b14      	ldr	r3, [pc, #80]	; (1e3e8 <prvSwitchTimerLists+0xb4>)
   1e398:	4798      	blx	r3
   1e39a:	e00e      	b.n	1e3ba <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e39c:	697a      	ldr	r2, [r7, #20]
   1e39e:	6938      	ldr	r0, [r7, #16]
   1e3a0:	2300      	movs	r3, #0
   1e3a2:	9300      	str	r3, [sp, #0]
   1e3a4:	2300      	movs	r3, #0
   1e3a6:	2100      	movs	r1, #0
   1e3a8:	4c10      	ldr	r4, [pc, #64]	; (1e3ec <prvSwitchTimerLists+0xb8>)
   1e3aa:	47a0      	blx	r4
   1e3ac:	0003      	movs	r3, r0
   1e3ae:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1e3b0:	68bb      	ldr	r3, [r7, #8]
   1e3b2:	2b00      	cmp	r3, #0
   1e3b4:	d101      	bne.n	1e3ba <prvSwitchTimerLists+0x86>
   1e3b6:	b672      	cpsid	i
   1e3b8:	e7fe      	b.n	1e3b8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e3ba:	4b09      	ldr	r3, [pc, #36]	; (1e3e0 <prvSwitchTimerLists+0xac>)
   1e3bc:	681b      	ldr	r3, [r3, #0]
   1e3be:	681b      	ldr	r3, [r3, #0]
   1e3c0:	2b00      	cmp	r3, #0
   1e3c2:	d1bb      	bne.n	1e33c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1e3c4:	4b06      	ldr	r3, [pc, #24]	; (1e3e0 <prvSwitchTimerLists+0xac>)
   1e3c6:	681b      	ldr	r3, [r3, #0]
   1e3c8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1e3ca:	4b09      	ldr	r3, [pc, #36]	; (1e3f0 <prvSwitchTimerLists+0xbc>)
   1e3cc:	681a      	ldr	r2, [r3, #0]
   1e3ce:	4b04      	ldr	r3, [pc, #16]	; (1e3e0 <prvSwitchTimerLists+0xac>)
   1e3d0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1e3d2:	4b07      	ldr	r3, [pc, #28]	; (1e3f0 <prvSwitchTimerLists+0xbc>)
   1e3d4:	687a      	ldr	r2, [r7, #4]
   1e3d6:	601a      	str	r2, [r3, #0]
}
   1e3d8:	46c0      	nop			; (mov r8, r8)
   1e3da:	46bd      	mov	sp, r7
   1e3dc:	b007      	add	sp, #28
   1e3de:	bd90      	pop	{r4, r7, pc}
   1e3e0:	20004208 	.word	0x20004208
   1e3e4:	0001aa57 	.word	0x0001aa57
   1e3e8:	0001a9eb 	.word	0x0001a9eb
   1e3ec:	0001df09 	.word	0x0001df09
   1e3f0:	2000420c 	.word	0x2000420c

0001e3f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1e3f4:	b580      	push	{r7, lr}
   1e3f6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1e3f8:	4b10      	ldr	r3, [pc, #64]	; (1e43c <prvCheckForValidListAndQueue+0x48>)
   1e3fa:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1e3fc:	4b10      	ldr	r3, [pc, #64]	; (1e440 <prvCheckForValidListAndQueue+0x4c>)
   1e3fe:	681b      	ldr	r3, [r3, #0]
   1e400:	2b00      	cmp	r3, #0
   1e402:	d115      	bne.n	1e430 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1e404:	4b0f      	ldr	r3, [pc, #60]	; (1e444 <prvCheckForValidListAndQueue+0x50>)
   1e406:	0018      	movs	r0, r3
   1e408:	4b0f      	ldr	r3, [pc, #60]	; (1e448 <prvCheckForValidListAndQueue+0x54>)
   1e40a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1e40c:	4b0f      	ldr	r3, [pc, #60]	; (1e44c <prvCheckForValidListAndQueue+0x58>)
   1e40e:	0018      	movs	r0, r3
   1e410:	4b0d      	ldr	r3, [pc, #52]	; (1e448 <prvCheckForValidListAndQueue+0x54>)
   1e412:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1e414:	4b0e      	ldr	r3, [pc, #56]	; (1e450 <prvCheckForValidListAndQueue+0x5c>)
   1e416:	4a0b      	ldr	r2, [pc, #44]	; (1e444 <prvCheckForValidListAndQueue+0x50>)
   1e418:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1e41a:	4b0e      	ldr	r3, [pc, #56]	; (1e454 <prvCheckForValidListAndQueue+0x60>)
   1e41c:	4a0b      	ldr	r2, [pc, #44]	; (1e44c <prvCheckForValidListAndQueue+0x58>)
   1e41e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1e420:	2200      	movs	r2, #0
   1e422:	210c      	movs	r1, #12
   1e424:	2005      	movs	r0, #5
   1e426:	4b0c      	ldr	r3, [pc, #48]	; (1e458 <prvCheckForValidListAndQueue+0x64>)
   1e428:	4798      	blx	r3
   1e42a:	0002      	movs	r2, r0
   1e42c:	4b04      	ldr	r3, [pc, #16]	; (1e440 <prvCheckForValidListAndQueue+0x4c>)
   1e42e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1e430:	4b0a      	ldr	r3, [pc, #40]	; (1e45c <prvCheckForValidListAndQueue+0x68>)
   1e432:	4798      	blx	r3
}
   1e434:	46c0      	nop			; (mov r8, r8)
   1e436:	46bd      	mov	sp, r7
   1e438:	bd80      	pop	{r7, pc}
   1e43a:	46c0      	nop			; (mov r8, r8)
   1e43c:	0001abe9 	.word	0x0001abe9
   1e440:	20004210 	.word	0x20004210
   1e444:	200041e0 	.word	0x200041e0
   1e448:	0001a955 	.word	0x0001a955
   1e44c:	200041f4 	.word	0x200041f4
   1e450:	20004208 	.word	0x20004208
   1e454:	2000420c 	.word	0x2000420c
   1e458:	0001aed5 	.word	0x0001aed5
   1e45c:	0001ac0d 	.word	0x0001ac0d

0001e460 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1e460:	b580      	push	{r7, lr}
   1e462:	b082      	sub	sp, #8
   1e464:	af00      	add	r7, sp, #0
   1e466:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1e468:	687b      	ldr	r3, [r7, #4]
   1e46a:	7c1b      	ldrb	r3, [r3, #16]
   1e46c:	2b00      	cmp	r3, #0
   1e46e:	d00b      	beq.n	1e488 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e470:	687b      	ldr	r3, [r7, #4]
   1e472:	689b      	ldr	r3, [r3, #8]
   1e474:	1c5a      	adds	r2, r3, #1
   1e476:	687b      	ldr	r3, [r7, #4]
   1e478:	68d9      	ldr	r1, [r3, #12]
   1e47a:	4b10      	ldr	r3, [pc, #64]	; (1e4bc <advance_pointer+0x5c>)
   1e47c:	0010      	movs	r0, r2
   1e47e:	4798      	blx	r3
   1e480:	000b      	movs	r3, r1
   1e482:	001a      	movs	r2, r3
   1e484:	687b      	ldr	r3, [r7, #4]
   1e486:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1e488:	687b      	ldr	r3, [r7, #4]
   1e48a:	685b      	ldr	r3, [r3, #4]
   1e48c:	1c5a      	adds	r2, r3, #1
   1e48e:	687b      	ldr	r3, [r7, #4]
   1e490:	68d9      	ldr	r1, [r3, #12]
   1e492:	4b0a      	ldr	r3, [pc, #40]	; (1e4bc <advance_pointer+0x5c>)
   1e494:	0010      	movs	r0, r2
   1e496:	4798      	blx	r3
   1e498:	000b      	movs	r3, r1
   1e49a:	001a      	movs	r2, r3
   1e49c:	687b      	ldr	r3, [r7, #4]
   1e49e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1e4a0:	687b      	ldr	r3, [r7, #4]
   1e4a2:	685a      	ldr	r2, [r3, #4]
   1e4a4:	687b      	ldr	r3, [r7, #4]
   1e4a6:	689b      	ldr	r3, [r3, #8]
   1e4a8:	1ad3      	subs	r3, r2, r3
   1e4aa:	425a      	negs	r2, r3
   1e4ac:	4153      	adcs	r3, r2
   1e4ae:	b2da      	uxtb	r2, r3
   1e4b0:	687b      	ldr	r3, [r7, #4]
   1e4b2:	741a      	strb	r2, [r3, #16]
 }
   1e4b4:	46c0      	nop			; (mov r8, r8)
   1e4b6:	46bd      	mov	sp, r7
   1e4b8:	b002      	add	sp, #8
   1e4ba:	bd80      	pop	{r7, pc}
   1e4bc:	00033741 	.word	0x00033741

0001e4c0 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1e4c0:	b580      	push	{r7, lr}
   1e4c2:	b082      	sub	sp, #8
   1e4c4:	af00      	add	r7, sp, #0
   1e4c6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1e4c8:	687b      	ldr	r3, [r7, #4]
   1e4ca:	2200      	movs	r2, #0
   1e4cc:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e4ce:	687b      	ldr	r3, [r7, #4]
   1e4d0:	689b      	ldr	r3, [r3, #8]
   1e4d2:	1c5a      	adds	r2, r3, #1
   1e4d4:	687b      	ldr	r3, [r7, #4]
   1e4d6:	68d9      	ldr	r1, [r3, #12]
   1e4d8:	4b05      	ldr	r3, [pc, #20]	; (1e4f0 <retreat_pointer+0x30>)
   1e4da:	0010      	movs	r0, r2
   1e4dc:	4798      	blx	r3
   1e4de:	000b      	movs	r3, r1
   1e4e0:	001a      	movs	r2, r3
   1e4e2:	687b      	ldr	r3, [r7, #4]
   1e4e4:	609a      	str	r2, [r3, #8]
 }
   1e4e6:	46c0      	nop			; (mov r8, r8)
   1e4e8:	46bd      	mov	sp, r7
   1e4ea:	b002      	add	sp, #8
   1e4ec:	bd80      	pop	{r7, pc}
   1e4ee:	46c0      	nop			; (mov r8, r8)
   1e4f0:	00033741 	.word	0x00033741

0001e4f4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1e4f4:	b580      	push	{r7, lr}
   1e4f6:	b084      	sub	sp, #16
   1e4f8:	af00      	add	r7, sp, #0
   1e4fa:	6078      	str	r0, [r7, #4]
   1e4fc:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1e4fe:	2014      	movs	r0, #20
   1e500:	4b09      	ldr	r3, [pc, #36]	; (1e528 <circular_buf_init+0x34>)
   1e502:	4798      	blx	r3
   1e504:	0003      	movs	r3, r0
   1e506:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1e508:	68fb      	ldr	r3, [r7, #12]
   1e50a:	687a      	ldr	r2, [r7, #4]
   1e50c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1e50e:	68fb      	ldr	r3, [r7, #12]
   1e510:	683a      	ldr	r2, [r7, #0]
   1e512:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1e514:	68fb      	ldr	r3, [r7, #12]
   1e516:	0018      	movs	r0, r3
   1e518:	4b04      	ldr	r3, [pc, #16]	; (1e52c <circular_buf_init+0x38>)
   1e51a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1e51c:	68fb      	ldr	r3, [r7, #12]
 }
   1e51e:	0018      	movs	r0, r3
   1e520:	46bd      	mov	sp, r7
   1e522:	b004      	add	sp, #16
   1e524:	bd80      	pop	{r7, pc}
   1e526:	46c0      	nop			; (mov r8, r8)
   1e528:	000355b1 	.word	0x000355b1
   1e52c:	0001e531 	.word	0x0001e531

0001e530 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1e530:	b580      	push	{r7, lr}
   1e532:	b082      	sub	sp, #8
   1e534:	af00      	add	r7, sp, #0
   1e536:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1e538:	687b      	ldr	r3, [r7, #4]
   1e53a:	2200      	movs	r2, #0
   1e53c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1e53e:	687b      	ldr	r3, [r7, #4]
   1e540:	2200      	movs	r2, #0
   1e542:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1e544:	687b      	ldr	r3, [r7, #4]
   1e546:	2200      	movs	r2, #0
   1e548:	741a      	strb	r2, [r3, #16]
 }
   1e54a:	46c0      	nop			; (mov r8, r8)
   1e54c:	46bd      	mov	sp, r7
   1e54e:	b002      	add	sp, #8
   1e550:	bd80      	pop	{r7, pc}
	...

0001e554 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1e554:	b580      	push	{r7, lr}
   1e556:	b082      	sub	sp, #8
   1e558:	af00      	add	r7, sp, #0
   1e55a:	6078      	str	r0, [r7, #4]
   1e55c:	000a      	movs	r2, r1
   1e55e:	1cfb      	adds	r3, r7, #3
   1e560:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1e562:	687b      	ldr	r3, [r7, #4]
   1e564:	681a      	ldr	r2, [r3, #0]
   1e566:	687b      	ldr	r3, [r7, #4]
   1e568:	685b      	ldr	r3, [r3, #4]
   1e56a:	18d3      	adds	r3, r2, r3
   1e56c:	1cfa      	adds	r2, r7, #3
   1e56e:	7812      	ldrb	r2, [r2, #0]
   1e570:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1e572:	687b      	ldr	r3, [r7, #4]
   1e574:	0018      	movs	r0, r3
   1e576:	4b03      	ldr	r3, [pc, #12]	; (1e584 <circular_buf_put+0x30>)
   1e578:	4798      	blx	r3
 }
   1e57a:	46c0      	nop			; (mov r8, r8)
   1e57c:	46bd      	mov	sp, r7
   1e57e:	b002      	add	sp, #8
   1e580:	bd80      	pop	{r7, pc}
   1e582:	46c0      	nop			; (mov r8, r8)
   1e584:	0001e461 	.word	0x0001e461

0001e588 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1e588:	b580      	push	{r7, lr}
   1e58a:	b084      	sub	sp, #16
   1e58c:	af00      	add	r7, sp, #0
   1e58e:	6078      	str	r0, [r7, #4]
   1e590:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1e592:	2301      	movs	r3, #1
   1e594:	425b      	negs	r3, r3
   1e596:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1e598:	687b      	ldr	r3, [r7, #4]
   1e59a:	0018      	movs	r0, r3
   1e59c:	4b0d      	ldr	r3, [pc, #52]	; (1e5d4 <circular_buf_get+0x4c>)
   1e59e:	4798      	blx	r3
   1e5a0:	0003      	movs	r3, r0
   1e5a2:	001a      	movs	r2, r3
   1e5a4:	2301      	movs	r3, #1
   1e5a6:	4053      	eors	r3, r2
   1e5a8:	b2db      	uxtb	r3, r3
   1e5aa:	2b00      	cmp	r3, #0
   1e5ac:	d00d      	beq.n	1e5ca <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1e5ae:	687b      	ldr	r3, [r7, #4]
   1e5b0:	681a      	ldr	r2, [r3, #0]
   1e5b2:	687b      	ldr	r3, [r7, #4]
   1e5b4:	689b      	ldr	r3, [r3, #8]
   1e5b6:	18d3      	adds	r3, r2, r3
   1e5b8:	781a      	ldrb	r2, [r3, #0]
   1e5ba:	683b      	ldr	r3, [r7, #0]
   1e5bc:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1e5be:	687b      	ldr	r3, [r7, #4]
   1e5c0:	0018      	movs	r0, r3
   1e5c2:	4b05      	ldr	r3, [pc, #20]	; (1e5d8 <circular_buf_get+0x50>)
   1e5c4:	4798      	blx	r3

		 r = 0;
   1e5c6:	2300      	movs	r3, #0
   1e5c8:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1e5ca:	68fb      	ldr	r3, [r7, #12]
 }
   1e5cc:	0018      	movs	r0, r3
   1e5ce:	46bd      	mov	sp, r7
   1e5d0:	b004      	add	sp, #16
   1e5d2:	bd80      	pop	{r7, pc}
   1e5d4:	0001e5dd 	.word	0x0001e5dd
   1e5d8:	0001e4c1 	.word	0x0001e4c1

0001e5dc <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1e5dc:	b580      	push	{r7, lr}
   1e5de:	b082      	sub	sp, #8
   1e5e0:	af00      	add	r7, sp, #0
   1e5e2:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1e5e4:	687b      	ldr	r3, [r7, #4]
   1e5e6:	7c1b      	ldrb	r3, [r3, #16]
   1e5e8:	2201      	movs	r2, #1
   1e5ea:	4053      	eors	r3, r2
   1e5ec:	b2db      	uxtb	r3, r3
   1e5ee:	2b00      	cmp	r3, #0
   1e5f0:	d007      	beq.n	1e602 <circular_buf_empty+0x26>
   1e5f2:	687b      	ldr	r3, [r7, #4]
   1e5f4:	685a      	ldr	r2, [r3, #4]
   1e5f6:	687b      	ldr	r3, [r7, #4]
   1e5f8:	689b      	ldr	r3, [r3, #8]
   1e5fa:	429a      	cmp	r2, r3
   1e5fc:	d101      	bne.n	1e602 <circular_buf_empty+0x26>
   1e5fe:	2301      	movs	r3, #1
   1e600:	e000      	b.n	1e604 <circular_buf_empty+0x28>
   1e602:	2300      	movs	r3, #0
   1e604:	1c1a      	adds	r2, r3, #0
   1e606:	2301      	movs	r3, #1
   1e608:	4013      	ands	r3, r2
   1e60a:	b2db      	uxtb	r3, r3
 }
   1e60c:	0018      	movs	r0, r3
   1e60e:	46bd      	mov	sp, r7
   1e610:	b002      	add	sp, #8
   1e612:	bd80      	pop	{r7, pc}

0001e614 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   1e614:	b580      	push	{r7, lr}
   1e616:	b082      	sub	sp, #8
   1e618:	af00      	add	r7, sp, #0
   1e61a:	0002      	movs	r2, r0
   1e61c:	1dfb      	adds	r3, r7, #7
   1e61e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e620:	4b06      	ldr	r3, [pc, #24]	; (1e63c <system_interrupt_enable+0x28>)
   1e622:	1dfa      	adds	r2, r7, #7
   1e624:	7812      	ldrb	r2, [r2, #0]
   1e626:	0011      	movs	r1, r2
   1e628:	221f      	movs	r2, #31
   1e62a:	400a      	ands	r2, r1
   1e62c:	2101      	movs	r1, #1
   1e62e:	4091      	lsls	r1, r2
   1e630:	000a      	movs	r2, r1
   1e632:	601a      	str	r2, [r3, #0]
}
   1e634:	46c0      	nop			; (mov r8, r8)
   1e636:	46bd      	mov	sp, r7
   1e638:	b002      	add	sp, #8
   1e63a:	bd80      	pop	{r7, pc}
   1e63c:	e000e100 	.word	0xe000e100

0001e640 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1e640:	b580      	push	{r7, lr}
   1e642:	b084      	sub	sp, #16
   1e644:	af00      	add	r7, sp, #0
   1e646:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1e648:	687b      	ldr	r3, [r7, #4]
   1e64a:	681b      	ldr	r3, [r3, #0]
   1e64c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1e64e:	68fb      	ldr	r3, [r7, #12]
   1e650:	69db      	ldr	r3, [r3, #28]
   1e652:	1e5a      	subs	r2, r3, #1
   1e654:	4193      	sbcs	r3, r2
   1e656:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1e658:	0018      	movs	r0, r3
   1e65a:	46bd      	mov	sp, r7
   1e65c:	b004      	add	sp, #16
   1e65e:	bd80      	pop	{r7, pc}

0001e660 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1e660:	b580      	push	{r7, lr}
   1e662:	b082      	sub	sp, #8
   1e664:	af00      	add	r7, sp, #0
   1e666:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1e668:	46c0      	nop			; (mov r8, r8)
   1e66a:	687b      	ldr	r3, [r7, #4]
   1e66c:	0018      	movs	r0, r3
   1e66e:	4b04      	ldr	r3, [pc, #16]	; (1e680 <_usart_wait_for_sync+0x20>)
   1e670:	4798      	blx	r3
   1e672:	1e03      	subs	r3, r0, #0
   1e674:	d1f9      	bne.n	1e66a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1e676:	46c0      	nop			; (mov r8, r8)
   1e678:	46bd      	mov	sp, r7
   1e67a:	b002      	add	sp, #8
   1e67c:	bd80      	pop	{r7, pc}
   1e67e:	46c0      	nop			; (mov r8, r8)
   1e680:	0001e641 	.word	0x0001e641

0001e684 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1e684:	b580      	push	{r7, lr}
   1e686:	b082      	sub	sp, #8
   1e688:	af00      	add	r7, sp, #0
   1e68a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1e68c:	687b      	ldr	r3, [r7, #4]
   1e68e:	2280      	movs	r2, #128	; 0x80
   1e690:	05d2      	lsls	r2, r2, #23
   1e692:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1e694:	687b      	ldr	r3, [r7, #4]
   1e696:	2200      	movs	r2, #0
   1e698:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1e69a:	687b      	ldr	r3, [r7, #4]
   1e69c:	22ff      	movs	r2, #255	; 0xff
   1e69e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1e6a0:	687b      	ldr	r3, [r7, #4]
   1e6a2:	2200      	movs	r2, #0
   1e6a4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1e6a6:	687b      	ldr	r3, [r7, #4]
   1e6a8:	2200      	movs	r2, #0
   1e6aa:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1e6ac:	687b      	ldr	r3, [r7, #4]
   1e6ae:	2296      	movs	r2, #150	; 0x96
   1e6b0:	0192      	lsls	r2, r2, #6
   1e6b2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1e6b4:	687b      	ldr	r3, [r7, #4]
   1e6b6:	2224      	movs	r2, #36	; 0x24
   1e6b8:	2101      	movs	r1, #1
   1e6ba:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1e6bc:	687b      	ldr	r3, [r7, #4]
   1e6be:	2225      	movs	r2, #37	; 0x25
   1e6c0:	2101      	movs	r1, #1
   1e6c2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1e6c4:	687b      	ldr	r3, [r7, #4]
   1e6c6:	2226      	movs	r2, #38	; 0x26
   1e6c8:	2100      	movs	r1, #0
   1e6ca:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1e6cc:	687b      	ldr	r3, [r7, #4]
   1e6ce:	2227      	movs	r2, #39	; 0x27
   1e6d0:	2100      	movs	r1, #0
   1e6d2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1e6d4:	687b      	ldr	r3, [r7, #4]
   1e6d6:	2200      	movs	r2, #0
   1e6d8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1e6da:	687b      	ldr	r3, [r7, #4]
   1e6dc:	2288      	movs	r2, #136	; 0x88
   1e6de:	0352      	lsls	r2, r2, #13
   1e6e0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1e6e2:	687b      	ldr	r3, [r7, #4]
   1e6e4:	222c      	movs	r2, #44	; 0x2c
   1e6e6:	2100      	movs	r1, #0
   1e6e8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1e6ea:	687b      	ldr	r3, [r7, #4]
   1e6ec:	222d      	movs	r2, #45	; 0x2d
   1e6ee:	2100      	movs	r1, #0
   1e6f0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1e6f2:	687b      	ldr	r3, [r7, #4]
   1e6f4:	2200      	movs	r2, #0
   1e6f6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1e6f8:	687b      	ldr	r3, [r7, #4]
   1e6fa:	2200      	movs	r2, #0
   1e6fc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1e6fe:	687b      	ldr	r3, [r7, #4]
   1e700:	2200      	movs	r2, #0
   1e702:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1e704:	687b      	ldr	r3, [r7, #4]
   1e706:	2200      	movs	r2, #0
   1e708:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1e70a:	687b      	ldr	r3, [r7, #4]
   1e70c:	2200      	movs	r2, #0
   1e70e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1e710:	687b      	ldr	r3, [r7, #4]
   1e712:	2200      	movs	r2, #0
   1e714:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1e716:	687b      	ldr	r3, [r7, #4]
   1e718:	2200      	movs	r2, #0
   1e71a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1e71c:	687b      	ldr	r3, [r7, #4]
   1e71e:	2200      	movs	r2, #0
   1e720:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1e722:	687b      	ldr	r3, [r7, #4]
   1e724:	2200      	movs	r2, #0
   1e726:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1e728:	687b      	ldr	r3, [r7, #4]
   1e72a:	2200      	movs	r2, #0
   1e72c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1e72e:	687b      	ldr	r3, [r7, #4]
   1e730:	2213      	movs	r2, #19
   1e732:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1e734:	687b      	ldr	r3, [r7, #4]
   1e736:	2200      	movs	r2, #0
   1e738:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1e73a:	46c0      	nop			; (mov r8, r8)
   1e73c:	46bd      	mov	sp, r7
   1e73e:	b002      	add	sp, #8
   1e740:	bd80      	pop	{r7, pc}
	...

0001e744 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1e744:	b580      	push	{r7, lr}
   1e746:	b084      	sub	sp, #16
   1e748:	af00      	add	r7, sp, #0
   1e74a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e74c:	687b      	ldr	r3, [r7, #4]
   1e74e:	681b      	ldr	r3, [r3, #0]
   1e750:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e752:	687b      	ldr	r3, [r7, #4]
   1e754:	681b      	ldr	r3, [r3, #0]
   1e756:	0018      	movs	r0, r3
   1e758:	4b09      	ldr	r3, [pc, #36]	; (1e780 <usart_enable+0x3c>)
   1e75a:	4798      	blx	r3
   1e75c:	0003      	movs	r3, r0
   1e75e:	0018      	movs	r0, r3
   1e760:	4b08      	ldr	r3, [pc, #32]	; (1e784 <usart_enable+0x40>)
   1e762:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1e764:	687b      	ldr	r3, [r7, #4]
   1e766:	0018      	movs	r0, r3
   1e768:	4b07      	ldr	r3, [pc, #28]	; (1e788 <usart_enable+0x44>)
   1e76a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1e76c:	68fb      	ldr	r3, [r7, #12]
   1e76e:	681b      	ldr	r3, [r3, #0]
   1e770:	2202      	movs	r2, #2
   1e772:	431a      	orrs	r2, r3
   1e774:	68fb      	ldr	r3, [r7, #12]
   1e776:	601a      	str	r2, [r3, #0]
}
   1e778:	46c0      	nop			; (mov r8, r8)
   1e77a:	46bd      	mov	sp, r7
   1e77c:	b004      	add	sp, #16
   1e77e:	bd80      	pop	{r7, pc}
   1e780:	000281ad 	.word	0x000281ad
   1e784:	0001e615 	.word	0x0001e615
   1e788:	0001e661 	.word	0x0001e661

0001e78c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1e78c:	b580      	push	{r7, lr}
   1e78e:	b082      	sub	sp, #8
   1e790:	af00      	add	r7, sp, #0
   1e792:	6078      	str	r0, [r7, #4]
   1e794:	000a      	movs	r2, r1
   1e796:	1cfb      	adds	r3, r7, #3
   1e798:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1e79a:	687b      	ldr	r3, [r7, #4]
   1e79c:	2231      	movs	r2, #49	; 0x31
   1e79e:	5c9b      	ldrb	r3, [r3, r2]
   1e7a0:	b25a      	sxtb	r2, r3
   1e7a2:	1cfb      	adds	r3, r7, #3
   1e7a4:	781b      	ldrb	r3, [r3, #0]
   1e7a6:	2101      	movs	r1, #1
   1e7a8:	4099      	lsls	r1, r3
   1e7aa:	000b      	movs	r3, r1
   1e7ac:	b25b      	sxtb	r3, r3
   1e7ae:	4313      	orrs	r3, r2
   1e7b0:	b25b      	sxtb	r3, r3
   1e7b2:	b2d9      	uxtb	r1, r3
   1e7b4:	687b      	ldr	r3, [r7, #4]
   1e7b6:	2231      	movs	r2, #49	; 0x31
   1e7b8:	5499      	strb	r1, [r3, r2]

}
   1e7ba:	46c0      	nop			; (mov r8, r8)
   1e7bc:	46bd      	mov	sp, r7
   1e7be:	b002      	add	sp, #8
   1e7c0:	bd80      	pop	{r7, pc}
	...

0001e7c4 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1e7c4:	b580      	push	{r7, lr}
   1e7c6:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1e7c8:	2380      	movs	r3, #128	; 0x80
   1e7ca:	009a      	lsls	r2, r3, #2
   1e7cc:	4b0f      	ldr	r3, [pc, #60]	; (1e80c <InitializeSerialConsole+0x48>)
   1e7ce:	0011      	movs	r1, r2
   1e7d0:	0018      	movs	r0, r3
   1e7d2:	4b0f      	ldr	r3, [pc, #60]	; (1e810 <InitializeSerialConsole+0x4c>)
   1e7d4:	4798      	blx	r3
   1e7d6:	0002      	movs	r2, r0
   1e7d8:	4b0e      	ldr	r3, [pc, #56]	; (1e814 <InitializeSerialConsole+0x50>)
   1e7da:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1e7dc:	2380      	movs	r3, #128	; 0x80
   1e7de:	009a      	lsls	r2, r3, #2
   1e7e0:	4b0d      	ldr	r3, [pc, #52]	; (1e818 <InitializeSerialConsole+0x54>)
   1e7e2:	0011      	movs	r1, r2
   1e7e4:	0018      	movs	r0, r3
   1e7e6:	4b0a      	ldr	r3, [pc, #40]	; (1e810 <InitializeSerialConsole+0x4c>)
   1e7e8:	4798      	blx	r3
   1e7ea:	0002      	movs	r2, r0
   1e7ec:	4b0b      	ldr	r3, [pc, #44]	; (1e81c <InitializeSerialConsole+0x58>)
   1e7ee:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1e7f0:	4b0b      	ldr	r3, [pc, #44]	; (1e820 <InitializeSerialConsole+0x5c>)
   1e7f2:	4798      	blx	r3
    configure_usart_callbacks();
   1e7f4:	4b0b      	ldr	r3, [pc, #44]	; (1e824 <InitializeSerialConsole+0x60>)
   1e7f6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1e7f8:	490b      	ldr	r1, [pc, #44]	; (1e828 <InitializeSerialConsole+0x64>)
   1e7fa:	4b0c      	ldr	r3, [pc, #48]	; (1e82c <InitializeSerialConsole+0x68>)
   1e7fc:	2201      	movs	r2, #1
   1e7fe:	0018      	movs	r0, r3
   1e800:	4b0b      	ldr	r3, [pc, #44]	; (1e830 <InitializeSerialConsole+0x6c>)
   1e802:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1e804:	46c0      	nop			; (mov r8, r8)
   1e806:	46bd      	mov	sp, r7
   1e808:	bd80      	pop	{r7, pc}
   1e80a:	46c0      	nop			; (mov r8, r8)
   1e80c:	20005920 	.word	0x20005920
   1e810:	0001e4f5 	.word	0x0001e4f5
   1e814:	20005718 	.word	0x20005718
   1e818:	20005720 	.word	0x20005720
   1e81c:	20005b24 	.word	0x20005b24
   1e820:	0001e999 	.word	0x0001e999
   1e824:	0001ea11 	.word	0x0001ea11
   1e828:	2000571c 	.word	0x2000571c
   1e82c:	200056e4 	.word	0x200056e4
   1e830:	00029a55 	.word	0x00029a55

0001e834 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1e834:	b580      	push	{r7, lr}
   1e836:	b084      	sub	sp, #16
   1e838:	af00      	add	r7, sp, #0
   1e83a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e83c:	4b1a      	ldr	r3, [pc, #104]	; (1e8a8 <SerialConsoleWriteString+0x74>)
   1e83e:	4798      	blx	r3
    if (string != NULL) {
   1e840:	687b      	ldr	r3, [r7, #4]
   1e842:	2b00      	cmp	r3, #0
   1e844:	d02a      	beq.n	1e89c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e846:	2300      	movs	r3, #0
   1e848:	60fb      	str	r3, [r7, #12]
   1e84a:	e00b      	b.n	1e864 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1e84c:	4b17      	ldr	r3, [pc, #92]	; (1e8ac <SerialConsoleWriteString+0x78>)
   1e84e:	6818      	ldr	r0, [r3, #0]
   1e850:	687a      	ldr	r2, [r7, #4]
   1e852:	68fb      	ldr	r3, [r7, #12]
   1e854:	18d3      	adds	r3, r2, r3
   1e856:	781b      	ldrb	r3, [r3, #0]
   1e858:	0019      	movs	r1, r3
   1e85a:	4b15      	ldr	r3, [pc, #84]	; (1e8b0 <SerialConsoleWriteString+0x7c>)
   1e85c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e85e:	68fb      	ldr	r3, [r7, #12]
   1e860:	3301      	adds	r3, #1
   1e862:	60fb      	str	r3, [r7, #12]
   1e864:	687b      	ldr	r3, [r7, #4]
   1e866:	0018      	movs	r0, r3
   1e868:	4b12      	ldr	r3, [pc, #72]	; (1e8b4 <SerialConsoleWriteString+0x80>)
   1e86a:	4798      	blx	r3
   1e86c:	0002      	movs	r2, r0
   1e86e:	68fb      	ldr	r3, [r7, #12]
   1e870:	429a      	cmp	r2, r3
   1e872:	d8eb      	bhi.n	1e84c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1e874:	4b10      	ldr	r3, [pc, #64]	; (1e8b8 <SerialConsoleWriteString+0x84>)
   1e876:	2101      	movs	r1, #1
   1e878:	0018      	movs	r0, r3
   1e87a:	4b10      	ldr	r3, [pc, #64]	; (1e8bc <SerialConsoleWriteString+0x88>)
   1e87c:	4798      	blx	r3
   1e87e:	1e03      	subs	r3, r0, #0
   1e880:	d10c      	bne.n	1e89c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1e882:	4b0a      	ldr	r3, [pc, #40]	; (1e8ac <SerialConsoleWriteString+0x78>)
   1e884:	681b      	ldr	r3, [r3, #0]
   1e886:	4a0e      	ldr	r2, [pc, #56]	; (1e8c0 <SerialConsoleWriteString+0x8c>)
   1e888:	0011      	movs	r1, r2
   1e88a:	0018      	movs	r0, r3
   1e88c:	4b0d      	ldr	r3, [pc, #52]	; (1e8c4 <SerialConsoleWriteString+0x90>)
   1e88e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e890:	490b      	ldr	r1, [pc, #44]	; (1e8c0 <SerialConsoleWriteString+0x8c>)
   1e892:	4b09      	ldr	r3, [pc, #36]	; (1e8b8 <SerialConsoleWriteString+0x84>)
   1e894:	2201      	movs	r2, #1
   1e896:	0018      	movs	r0, r3
   1e898:	4b0b      	ldr	r3, [pc, #44]	; (1e8c8 <SerialConsoleWriteString+0x94>)
   1e89a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1e89c:	4b0b      	ldr	r3, [pc, #44]	; (1e8cc <SerialConsoleWriteString+0x98>)
   1e89e:	4798      	blx	r3
}
   1e8a0:	46c0      	nop			; (mov r8, r8)
   1e8a2:	46bd      	mov	sp, r7
   1e8a4:	b004      	add	sp, #16
   1e8a6:	bd80      	pop	{r7, pc}
   1e8a8:	0001cea1 	.word	0x0001cea1
   1e8ac:	20005b24 	.word	0x20005b24
   1e8b0:	0001e555 	.word	0x0001e555
   1e8b4:	000359c7 	.word	0x000359c7
   1e8b8:	200056e4 	.word	0x200056e4
   1e8bc:	00029a9d 	.word	0x00029a9d
   1e8c0:	20005b20 	.word	0x20005b20
   1e8c4:	0001e589 	.word	0x0001e589
   1e8c8:	00029a0d 	.word	0x00029a0d
   1e8cc:	0001ceb9 	.word	0x0001ceb9

0001e8d0 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1e8d0:	b580      	push	{r7, lr}
   1e8d2:	b084      	sub	sp, #16
   1e8d4:	af00      	add	r7, sp, #0
   1e8d6:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e8d8:	4b08      	ldr	r3, [pc, #32]	; (1e8fc <SerialConsoleReadCharacter+0x2c>)
   1e8da:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1e8dc:	4b08      	ldr	r3, [pc, #32]	; (1e900 <SerialConsoleReadCharacter+0x30>)
   1e8de:	681b      	ldr	r3, [r3, #0]
   1e8e0:	687a      	ldr	r2, [r7, #4]
   1e8e2:	0011      	movs	r1, r2
   1e8e4:	0018      	movs	r0, r3
   1e8e6:	4b07      	ldr	r3, [pc, #28]	; (1e904 <SerialConsoleReadCharacter+0x34>)
   1e8e8:	4798      	blx	r3
   1e8ea:	0003      	movs	r3, r0
   1e8ec:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1e8ee:	4b06      	ldr	r3, [pc, #24]	; (1e908 <SerialConsoleReadCharacter+0x38>)
   1e8f0:	4798      	blx	r3
    return a;
   1e8f2:	68fb      	ldr	r3, [r7, #12]
}
   1e8f4:	0018      	movs	r0, r3
   1e8f6:	46bd      	mov	sp, r7
   1e8f8:	b004      	add	sp, #16
   1e8fa:	bd80      	pop	{r7, pc}
   1e8fc:	0001cea1 	.word	0x0001cea1
   1e900:	20005718 	.word	0x20005718
   1e904:	0001e589 	.word	0x0001e589
   1e908:	0001ceb9 	.word	0x0001ceb9

0001e90c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1e90c:	b580      	push	{r7, lr}
   1e90e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1e910:	4b02      	ldr	r3, [pc, #8]	; (1e91c <getLogLevel+0x10>)
   1e912:	781b      	ldrb	r3, [r3, #0]
}
   1e914:	0018      	movs	r0, r3
   1e916:	46bd      	mov	sp, r7
   1e918:	bd80      	pop	{r7, pc}
   1e91a:	46c0      	nop			; (mov r8, r8)
   1e91c:	2000421c 	.word	0x2000421c

0001e920 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1e920:	b40e      	push	{r1, r2, r3}
   1e922:	b590      	push	{r4, r7, lr}
   1e924:	b084      	sub	sp, #16
   1e926:	af00      	add	r7, sp, #0
   1e928:	0002      	movs	r2, r0
   1e92a:	1dfb      	adds	r3, r7, #7
   1e92c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1e92e:	4b0e      	ldr	r3, [pc, #56]	; (1e968 <LogMessage+0x48>)
   1e930:	4798      	blx	r3
   1e932:	0003      	movs	r3, r0
   1e934:	001a      	movs	r2, r3
   1e936:	1dfb      	adds	r3, r7, #7
   1e938:	781b      	ldrb	r3, [r3, #0]
   1e93a:	4293      	cmp	r3, r2
   1e93c:	d30c      	bcc.n	1e958 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1e93e:	2320      	movs	r3, #32
   1e940:	18fb      	adds	r3, r7, r3
   1e942:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1e944:	68fb      	ldr	r3, [r7, #12]
   1e946:	69fa      	ldr	r2, [r7, #28]
   1e948:	4808      	ldr	r0, [pc, #32]	; (1e96c <LogMessage+0x4c>)
   1e94a:	217f      	movs	r1, #127	; 0x7f
   1e94c:	4c08      	ldr	r4, [pc, #32]	; (1e970 <LogMessage+0x50>)
   1e94e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1e950:	4b06      	ldr	r3, [pc, #24]	; (1e96c <LogMessage+0x4c>)
   1e952:	0018      	movs	r0, r3
   1e954:	4b07      	ldr	r3, [pc, #28]	; (1e974 <LogMessage+0x54>)
   1e956:	4798      	blx	r3
        va_end(ap);
    }
};
   1e958:	46c0      	nop			; (mov r8, r8)
   1e95a:	46bd      	mov	sp, r7
   1e95c:	b004      	add	sp, #16
   1e95e:	bc90      	pop	{r4, r7}
   1e960:	bc08      	pop	{r3}
   1e962:	b003      	add	sp, #12
   1e964:	4718      	bx	r3
   1e966:	46c0      	nop			; (mov r8, r8)
   1e968:	0001e90d 	.word	0x0001e90d
   1e96c:	20005664 	.word	0x20005664
   1e970:	00035c01 	.word	0x00035c01
   1e974:	0001e835 	.word	0x0001e835

0001e978 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1e978:	b40f      	push	{r0, r1, r2, r3}
   1e97a:	b580      	push	{r7, lr}
   1e97c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1e97e:	68bb      	ldr	r3, [r7, #8]
   1e980:	0019      	movs	r1, r3
   1e982:	2001      	movs	r0, #1
   1e984:	4b03      	ldr	r3, [pc, #12]	; (1e994 <LogMessageDebug+0x1c>)
   1e986:	4798      	blx	r3
};
   1e988:	46c0      	nop			; (mov r8, r8)
   1e98a:	46bd      	mov	sp, r7
   1e98c:	bc80      	pop	{r7}
   1e98e:	bc08      	pop	{r3}
   1e990:	b004      	add	sp, #16
   1e992:	4718      	bx	r3
   1e994:	0001e921 	.word	0x0001e921

0001e998 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1e998:	b580      	push	{r7, lr}
   1e99a:	b090      	sub	sp, #64	; 0x40
   1e99c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1e99e:	003b      	movs	r3, r7
   1e9a0:	0018      	movs	r0, r3
   1e9a2:	4b14      	ldr	r3, [pc, #80]	; (1e9f4 <configure_usart+0x5c>)
   1e9a4:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1e9a6:	003b      	movs	r3, r7
   1e9a8:	22e1      	movs	r2, #225	; 0xe1
   1e9aa:	0252      	lsls	r2, r2, #9
   1e9ac:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1e9ae:	003b      	movs	r3, r7
   1e9b0:	22c4      	movs	r2, #196	; 0xc4
   1e9b2:	0392      	lsls	r2, r2, #14
   1e9b4:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1e9b6:	003b      	movs	r3, r7
   1e9b8:	2201      	movs	r2, #1
   1e9ba:	4252      	negs	r2, r2
   1e9bc:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1e9be:	003b      	movs	r3, r7
   1e9c0:	2201      	movs	r2, #1
   1e9c2:	4252      	negs	r2, r2
   1e9c4:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1e9c6:	003b      	movs	r3, r7
   1e9c8:	4a0b      	ldr	r2, [pc, #44]	; (1e9f8 <configure_usart+0x60>)
   1e9ca:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1e9cc:	003b      	movs	r3, r7
   1e9ce:	4a0b      	ldr	r2, [pc, #44]	; (1e9fc <configure_usart+0x64>)
   1e9d0:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1e9d2:	46c0      	nop			; (mov r8, r8)
   1e9d4:	003a      	movs	r2, r7
   1e9d6:	490a      	ldr	r1, [pc, #40]	; (1ea00 <configure_usart+0x68>)
   1e9d8:	4b0a      	ldr	r3, [pc, #40]	; (1ea04 <configure_usart+0x6c>)
   1e9da:	0018      	movs	r0, r3
   1e9dc:	4b0a      	ldr	r3, [pc, #40]	; (1ea08 <configure_usart+0x70>)
   1e9de:	4798      	blx	r3
   1e9e0:	1e03      	subs	r3, r0, #0
   1e9e2:	d1f7      	bne.n	1e9d4 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1e9e4:	4b07      	ldr	r3, [pc, #28]	; (1ea04 <configure_usart+0x6c>)
   1e9e6:	0018      	movs	r0, r3
   1e9e8:	4b08      	ldr	r3, [pc, #32]	; (1ea0c <configure_usart+0x74>)
   1e9ea:	4798      	blx	r3
}
   1e9ec:	46c0      	nop			; (mov r8, r8)
   1e9ee:	46bd      	mov	sp, r7
   1e9f0:	b010      	add	sp, #64	; 0x40
   1e9f2:	bd80      	pop	{r7, pc}
   1e9f4:	0001e685 	.word	0x0001e685
   1e9f8:	002a0003 	.word	0x002a0003
   1e9fc:	002b0003 	.word	0x002b0003
   1ea00:	42001800 	.word	0x42001800
   1ea04:	200056e4 	.word	0x200056e4
   1ea08:	00029611 	.word	0x00029611
   1ea0c:	0001e745 	.word	0x0001e745

0001ea10 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1ea10:	b580      	push	{r7, lr}
   1ea12:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1ea14:	490c      	ldr	r1, [pc, #48]	; (1ea48 <configure_usart_callbacks+0x38>)
   1ea16:	4b0d      	ldr	r3, [pc, #52]	; (1ea4c <configure_usart_callbacks+0x3c>)
   1ea18:	2200      	movs	r2, #0
   1ea1a:	0018      	movs	r0, r3
   1ea1c:	4b0c      	ldr	r3, [pc, #48]	; (1ea50 <configure_usart_callbacks+0x40>)
   1ea1e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1ea20:	490c      	ldr	r1, [pc, #48]	; (1ea54 <configure_usart_callbacks+0x44>)
   1ea22:	4b0a      	ldr	r3, [pc, #40]	; (1ea4c <configure_usart_callbacks+0x3c>)
   1ea24:	2201      	movs	r2, #1
   1ea26:	0018      	movs	r0, r3
   1ea28:	4b09      	ldr	r3, [pc, #36]	; (1ea50 <configure_usart_callbacks+0x40>)
   1ea2a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1ea2c:	4b07      	ldr	r3, [pc, #28]	; (1ea4c <configure_usart_callbacks+0x3c>)
   1ea2e:	2100      	movs	r1, #0
   1ea30:	0018      	movs	r0, r3
   1ea32:	4b09      	ldr	r3, [pc, #36]	; (1ea58 <configure_usart_callbacks+0x48>)
   1ea34:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1ea36:	4b05      	ldr	r3, [pc, #20]	; (1ea4c <configure_usart_callbacks+0x3c>)
   1ea38:	2101      	movs	r1, #1
   1ea3a:	0018      	movs	r0, r3
   1ea3c:	4b06      	ldr	r3, [pc, #24]	; (1ea58 <configure_usart_callbacks+0x48>)
   1ea3e:	4798      	blx	r3
}
   1ea40:	46c0      	nop			; (mov r8, r8)
   1ea42:	46bd      	mov	sp, r7
   1ea44:	bd80      	pop	{r7, pc}
   1ea46:	46c0      	nop			; (mov r8, r8)
   1ea48:	0001eaa5 	.word	0x0001eaa5
   1ea4c:	200056e4 	.word	0x200056e4
   1ea50:	000299c5 	.word	0x000299c5
   1ea54:	0001ea5d 	.word	0x0001ea5d
   1ea58:	0001e78d 	.word	0x0001e78d

0001ea5c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1ea5c:	b580      	push	{r7, lr}
   1ea5e:	b082      	sub	sp, #8
   1ea60:	af00      	add	r7, sp, #0
   1ea62:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1ea64:	4b09      	ldr	r3, [pc, #36]	; (1ea8c <usart_read_callback+0x30>)
   1ea66:	681a      	ldr	r2, [r3, #0]
   1ea68:	4b09      	ldr	r3, [pc, #36]	; (1ea90 <usart_read_callback+0x34>)
   1ea6a:	781b      	ldrb	r3, [r3, #0]
   1ea6c:	0019      	movs	r1, r3
   1ea6e:	0010      	movs	r0, r2
   1ea70:	4b08      	ldr	r3, [pc, #32]	; (1ea94 <usart_read_callback+0x38>)
   1ea72:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1ea74:	4906      	ldr	r1, [pc, #24]	; (1ea90 <usart_read_callback+0x34>)
   1ea76:	4b08      	ldr	r3, [pc, #32]	; (1ea98 <usart_read_callback+0x3c>)
   1ea78:	2201      	movs	r2, #1
   1ea7a:	0018      	movs	r0, r3
   1ea7c:	4b07      	ldr	r3, [pc, #28]	; (1ea9c <usart_read_callback+0x40>)
   1ea7e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1ea80:	4b07      	ldr	r3, [pc, #28]	; (1eaa0 <usart_read_callback+0x44>)
   1ea82:	4798      	blx	r3
}
   1ea84:	46c0      	nop			; (mov r8, r8)
   1ea86:	46bd      	mov	sp, r7
   1ea88:	b002      	add	sp, #8
   1ea8a:	bd80      	pop	{r7, pc}
   1ea8c:	20005718 	.word	0x20005718
   1ea90:	2000571c 	.word	0x2000571c
   1ea94:	0001e555 	.word	0x0001e555
   1ea98:	200056e4 	.word	0x200056e4
   1ea9c:	00029a55 	.word	0x00029a55
   1eaa0:	00013ba1 	.word	0x00013ba1

0001eaa4 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1eaa4:	b580      	push	{r7, lr}
   1eaa6:	b082      	sub	sp, #8
   1eaa8:	af00      	add	r7, sp, #0
   1eaaa:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1eaac:	4b09      	ldr	r3, [pc, #36]	; (1ead4 <usart_write_callback+0x30>)
   1eaae:	681b      	ldr	r3, [r3, #0]
   1eab0:	4a09      	ldr	r2, [pc, #36]	; (1ead8 <usart_write_callback+0x34>)
   1eab2:	0011      	movs	r1, r2
   1eab4:	0018      	movs	r0, r3
   1eab6:	4b09      	ldr	r3, [pc, #36]	; (1eadc <usart_write_callback+0x38>)
   1eab8:	4798      	blx	r3
   1eaba:	0003      	movs	r3, r0
   1eabc:	3301      	adds	r3, #1
   1eabe:	d005      	beq.n	1eacc <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1eac0:	4905      	ldr	r1, [pc, #20]	; (1ead8 <usart_write_callback+0x34>)
   1eac2:	4b07      	ldr	r3, [pc, #28]	; (1eae0 <usart_write_callback+0x3c>)
   1eac4:	2201      	movs	r2, #1
   1eac6:	0018      	movs	r0, r3
   1eac8:	4b06      	ldr	r3, [pc, #24]	; (1eae4 <usart_write_callback+0x40>)
   1eaca:	4798      	blx	r3
    }
}
   1eacc:	46c0      	nop			; (mov r8, r8)
   1eace:	46bd      	mov	sp, r7
   1ead0:	b002      	add	sp, #8
   1ead2:	bd80      	pop	{r7, pc}
   1ead4:	20005b24 	.word	0x20005b24
   1ead8:	20005b20 	.word	0x20005b20
   1eadc:	0001e589 	.word	0x0001e589
   1eae0:	200056e4 	.word	0x200056e4
   1eae4:	00029a0d 	.word	0x00029a0d

0001eae8 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1eae8:	b590      	push	{r4, r7, lr}
   1eaea:	b087      	sub	sp, #28
   1eaec:	af00      	add	r7, sp, #0
   1eaee:	60f8      	str	r0, [r7, #12]
   1eaf0:	000c      	movs	r4, r1
   1eaf2:	0010      	movs	r0, r2
   1eaf4:	0019      	movs	r1, r3
   1eaf6:	230a      	movs	r3, #10
   1eaf8:	18fb      	adds	r3, r7, r3
   1eafa:	1c22      	adds	r2, r4, #0
   1eafc:	801a      	strh	r2, [r3, #0]
   1eafe:	2308      	movs	r3, #8
   1eb00:	18fb      	adds	r3, r7, r3
   1eb02:	1c02      	adds	r2, r0, #0
   1eb04:	801a      	strh	r2, [r3, #0]
   1eb06:	1dfb      	adds	r3, r7, #7
   1eb08:	1c0a      	adds	r2, r1, #0
   1eb0a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1eb0c:	230a      	movs	r3, #10
   1eb0e:	18fb      	adds	r3, r7, r3
   1eb10:	881a      	ldrh	r2, [r3, #0]
   1eb12:	2308      	movs	r3, #8
   1eb14:	18fb      	adds	r3, r7, r3
   1eb16:	881b      	ldrh	r3, [r3, #0]
   1eb18:	1ad3      	subs	r3, r2, r3
   1eb1a:	3307      	adds	r3, #7
   1eb1c:	2b00      	cmp	r3, #0
   1eb1e:	da00      	bge.n	1eb22 <SDMMC_UNSTUFF_BITS+0x3a>
   1eb20:	3307      	adds	r3, #7
   1eb22:	10db      	asrs	r3, r3, #3
   1eb24:	3b01      	subs	r3, #1
   1eb26:	68fa      	ldr	r2, [r7, #12]
   1eb28:	18d3      	adds	r3, r2, r3
   1eb2a:	781b      	ldrb	r3, [r3, #0]
   1eb2c:	0019      	movs	r1, r3
   1eb2e:	2308      	movs	r3, #8
   1eb30:	18fb      	adds	r3, r7, r3
   1eb32:	881b      	ldrh	r3, [r3, #0]
   1eb34:	2207      	movs	r2, #7
   1eb36:	4013      	ands	r3, r2
   1eb38:	4119      	asrs	r1, r3
   1eb3a:	000b      	movs	r3, r1
   1eb3c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1eb3e:	2308      	movs	r3, #8
   1eb40:	18fb      	adds	r3, r7, r3
   1eb42:	881b      	ldrh	r3, [r3, #0]
   1eb44:	2207      	movs	r2, #7
   1eb46:	401a      	ands	r2, r3
   1eb48:	1dfb      	adds	r3, r7, #7
   1eb4a:	781b      	ldrb	r3, [r3, #0]
   1eb4c:	18d3      	adds	r3, r2, r3
   1eb4e:	2b08      	cmp	r3, #8
   1eb50:	dd1c      	ble.n	1eb8c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1eb52:	230a      	movs	r3, #10
   1eb54:	18fb      	adds	r3, r7, r3
   1eb56:	881a      	ldrh	r2, [r3, #0]
   1eb58:	2308      	movs	r3, #8
   1eb5a:	18fb      	adds	r3, r7, r3
   1eb5c:	881b      	ldrh	r3, [r3, #0]
   1eb5e:	1ad3      	subs	r3, r2, r3
   1eb60:	3307      	adds	r3, #7
   1eb62:	2b00      	cmp	r3, #0
   1eb64:	da00      	bge.n	1eb68 <SDMMC_UNSTUFF_BITS+0x80>
   1eb66:	3307      	adds	r3, #7
   1eb68:	10db      	asrs	r3, r3, #3
   1eb6a:	3b02      	subs	r3, #2
   1eb6c:	68fa      	ldr	r2, [r7, #12]
   1eb6e:	18d3      	adds	r3, r2, r3
   1eb70:	781b      	ldrb	r3, [r3, #0]
   1eb72:	0019      	movs	r1, r3
   1eb74:	2308      	movs	r3, #8
   1eb76:	18fb      	adds	r3, r7, r3
   1eb78:	881b      	ldrh	r3, [r3, #0]
   1eb7a:	2207      	movs	r2, #7
   1eb7c:	4013      	ands	r3, r2
   1eb7e:	2208      	movs	r2, #8
   1eb80:	1ad3      	subs	r3, r2, r3
   1eb82:	4099      	lsls	r1, r3
   1eb84:	000b      	movs	r3, r1
   1eb86:	697a      	ldr	r2, [r7, #20]
   1eb88:	4313      	orrs	r3, r2
   1eb8a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1eb8c:	2308      	movs	r3, #8
   1eb8e:	18fb      	adds	r3, r7, r3
   1eb90:	881b      	ldrh	r3, [r3, #0]
   1eb92:	2207      	movs	r2, #7
   1eb94:	401a      	ands	r2, r3
   1eb96:	1dfb      	adds	r3, r7, #7
   1eb98:	781b      	ldrb	r3, [r3, #0]
   1eb9a:	18d3      	adds	r3, r2, r3
   1eb9c:	2b10      	cmp	r3, #16
   1eb9e:	dd1c      	ble.n	1ebda <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1eba0:	230a      	movs	r3, #10
   1eba2:	18fb      	adds	r3, r7, r3
   1eba4:	881a      	ldrh	r2, [r3, #0]
   1eba6:	2308      	movs	r3, #8
   1eba8:	18fb      	adds	r3, r7, r3
   1ebaa:	881b      	ldrh	r3, [r3, #0]
   1ebac:	1ad3      	subs	r3, r2, r3
   1ebae:	3307      	adds	r3, #7
   1ebb0:	2b00      	cmp	r3, #0
   1ebb2:	da00      	bge.n	1ebb6 <SDMMC_UNSTUFF_BITS+0xce>
   1ebb4:	3307      	adds	r3, #7
   1ebb6:	10db      	asrs	r3, r3, #3
   1ebb8:	3b03      	subs	r3, #3
   1ebba:	68fa      	ldr	r2, [r7, #12]
   1ebbc:	18d3      	adds	r3, r2, r3
   1ebbe:	781b      	ldrb	r3, [r3, #0]
   1ebc0:	0019      	movs	r1, r3
   1ebc2:	2308      	movs	r3, #8
   1ebc4:	18fb      	adds	r3, r7, r3
   1ebc6:	881b      	ldrh	r3, [r3, #0]
   1ebc8:	2207      	movs	r2, #7
   1ebca:	4013      	ands	r3, r2
   1ebcc:	2210      	movs	r2, #16
   1ebce:	1ad3      	subs	r3, r2, r3
   1ebd0:	4099      	lsls	r1, r3
   1ebd2:	000b      	movs	r3, r1
   1ebd4:	697a      	ldr	r2, [r7, #20]
   1ebd6:	4313      	orrs	r3, r2
   1ebd8:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1ebda:	2308      	movs	r3, #8
   1ebdc:	18fb      	adds	r3, r7, r3
   1ebde:	881b      	ldrh	r3, [r3, #0]
   1ebe0:	2207      	movs	r2, #7
   1ebe2:	401a      	ands	r2, r3
   1ebe4:	1dfb      	adds	r3, r7, #7
   1ebe6:	781b      	ldrb	r3, [r3, #0]
   1ebe8:	18d3      	adds	r3, r2, r3
   1ebea:	2b10      	cmp	r3, #16
   1ebec:	dd1c      	ble.n	1ec28 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1ebee:	230a      	movs	r3, #10
   1ebf0:	18fb      	adds	r3, r7, r3
   1ebf2:	881a      	ldrh	r2, [r3, #0]
   1ebf4:	2308      	movs	r3, #8
   1ebf6:	18fb      	adds	r3, r7, r3
   1ebf8:	881b      	ldrh	r3, [r3, #0]
   1ebfa:	1ad3      	subs	r3, r2, r3
   1ebfc:	3307      	adds	r3, #7
   1ebfe:	2b00      	cmp	r3, #0
   1ec00:	da00      	bge.n	1ec04 <SDMMC_UNSTUFF_BITS+0x11c>
   1ec02:	3307      	adds	r3, #7
   1ec04:	10db      	asrs	r3, r3, #3
   1ec06:	3b03      	subs	r3, #3
   1ec08:	68fa      	ldr	r2, [r7, #12]
   1ec0a:	18d3      	adds	r3, r2, r3
   1ec0c:	781b      	ldrb	r3, [r3, #0]
   1ec0e:	0019      	movs	r1, r3
   1ec10:	2308      	movs	r3, #8
   1ec12:	18fb      	adds	r3, r7, r3
   1ec14:	881b      	ldrh	r3, [r3, #0]
   1ec16:	2207      	movs	r2, #7
   1ec18:	4013      	ands	r3, r2
   1ec1a:	2210      	movs	r2, #16
   1ec1c:	1ad3      	subs	r3, r2, r3
   1ec1e:	4099      	lsls	r1, r3
   1ec20:	000b      	movs	r3, r1
   1ec22:	697a      	ldr	r2, [r7, #20]
   1ec24:	4313      	orrs	r3, r2
   1ec26:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1ec28:	1dfb      	adds	r3, r7, #7
   1ec2a:	781b      	ldrb	r3, [r3, #0]
   1ec2c:	2201      	movs	r2, #1
   1ec2e:	409a      	lsls	r2, r3
   1ec30:	0013      	movs	r3, r2
   1ec32:	1e5a      	subs	r2, r3, #1
   1ec34:	697b      	ldr	r3, [r7, #20]
   1ec36:	4013      	ands	r3, r2
   1ec38:	617b      	str	r3, [r7, #20]
	return value;
   1ec3a:	697b      	ldr	r3, [r7, #20]
}
   1ec3c:	0018      	movs	r0, r3
   1ec3e:	46bd      	mov	sp, r7
   1ec40:	b007      	add	sp, #28
   1ec42:	bd90      	pop	{r4, r7, pc}

0001ec44 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1ec44:	b580      	push	{r7, lr}
   1ec46:	b082      	sub	sp, #8
   1ec48:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1ec4a:	4b23      	ldr	r3, [pc, #140]	; (1ecd8 <mmc_spi_op_cond+0x94>)
   1ec4c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1ec4e:	4b23      	ldr	r3, [pc, #140]	; (1ecdc <mmc_spi_op_cond+0x98>)
   1ec50:	2100      	movs	r1, #0
   1ec52:	0018      	movs	r0, r3
   1ec54:	4b22      	ldr	r3, [pc, #136]	; (1ece0 <mmc_spi_op_cond+0x9c>)
   1ec56:	4798      	blx	r3
   1ec58:	0003      	movs	r3, r0
   1ec5a:	001a      	movs	r2, r3
   1ec5c:	2301      	movs	r3, #1
   1ec5e:	4053      	eors	r3, r2
   1ec60:	b2db      	uxtb	r3, r3
   1ec62:	2b00      	cmp	r3, #0
   1ec64:	d001      	beq.n	1ec6a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1ec66:	2300      	movs	r3, #0
   1ec68:	e031      	b.n	1ecce <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1ec6a:	4b1e      	ldr	r3, [pc, #120]	; (1ece4 <mmc_spi_op_cond+0xa0>)
   1ec6c:	4798      	blx	r3
   1ec6e:	0003      	movs	r3, r0
   1ec70:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1ec72:	683b      	ldr	r3, [r7, #0]
   1ec74:	2201      	movs	r2, #1
   1ec76:	4013      	ands	r3, r2
   1ec78:	d006      	beq.n	1ec88 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1ec7a:	687b      	ldr	r3, [r7, #4]
   1ec7c:	1e5a      	subs	r2, r3, #1
   1ec7e:	607a      	str	r2, [r7, #4]
   1ec80:	2b00      	cmp	r3, #0
   1ec82:	d1e4      	bne.n	1ec4e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1ec84:	2300      	movs	r3, #0
   1ec86:	e022      	b.n	1ecce <mmc_spi_op_cond+0x8a>
			break;
   1ec88:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1ec8a:	4b17      	ldr	r3, [pc, #92]	; (1ece8 <mmc_spi_op_cond+0xa4>)
   1ec8c:	2100      	movs	r1, #0
   1ec8e:	0018      	movs	r0, r3
   1ec90:	4b13      	ldr	r3, [pc, #76]	; (1ece0 <mmc_spi_op_cond+0x9c>)
   1ec92:	4798      	blx	r3
   1ec94:	0003      	movs	r3, r0
   1ec96:	001a      	movs	r2, r3
   1ec98:	2301      	movs	r3, #1
   1ec9a:	4053      	eors	r3, r2
   1ec9c:	b2db      	uxtb	r3, r3
   1ec9e:	2b00      	cmp	r3, #0
   1eca0:	d001      	beq.n	1eca6 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1eca2:	2300      	movs	r3, #0
   1eca4:	e013      	b.n	1ecce <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1eca6:	4b0f      	ldr	r3, [pc, #60]	; (1ece4 <mmc_spi_op_cond+0xa0>)
   1eca8:	4798      	blx	r3
   1ecaa:	0002      	movs	r2, r0
   1ecac:	23c0      	movs	r3, #192	; 0xc0
   1ecae:	05db      	lsls	r3, r3, #23
   1ecb0:	401a      	ands	r2, r3
   1ecb2:	2380      	movs	r3, #128	; 0x80
   1ecb4:	05db      	lsls	r3, r3, #23
   1ecb6:	429a      	cmp	r2, r3
   1ecb8:	d108      	bne.n	1eccc <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1ecba:	4b0c      	ldr	r3, [pc, #48]	; (1ecec <mmc_spi_op_cond+0xa8>)
   1ecbc:	681a      	ldr	r2, [r3, #0]
   1ecbe:	4b0b      	ldr	r3, [pc, #44]	; (1ecec <mmc_spi_op_cond+0xa8>)
   1ecc0:	681b      	ldr	r3, [r3, #0]
   1ecc2:	7adb      	ldrb	r3, [r3, #11]
   1ecc4:	2108      	movs	r1, #8
   1ecc6:	430b      	orrs	r3, r1
   1ecc8:	b2db      	uxtb	r3, r3
   1ecca:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1eccc:	2301      	movs	r3, #1
}
   1ecce:	0018      	movs	r0, r3
   1ecd0:	46bd      	mov	sp, r7
   1ecd2:	b002      	add	sp, #8
   1ecd4:	bd80      	pop	{r7, pc}
   1ecd6:	46c0      	nop			; (mov r8, r8)
   1ecd8:	00001bee 	.word	0x00001bee
   1ecdc:	00001101 	.word	0x00001101
   1ece0:	000206c1 	.word	0x000206c1
   1ece4:	00020901 	.word	0x00020901
   1ece8:	0000053a 	.word	0x0000053a
   1ecec:	20004244 	.word	0x20004244

0001ecf0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1ecf0:	b580      	push	{r7, lr}
   1ecf2:	b086      	sub	sp, #24
   1ecf4:	af00      	add	r7, sp, #0
   1ecf6:	0002      	movs	r2, r0
   1ecf8:	1dfb      	adds	r3, r7, #7
   1ecfa:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1ecfc:	4b2e      	ldr	r3, [pc, #184]	; (1edb8 <sd_spi_op_cond+0xc8>)
   1ecfe:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1ed00:	4b2e      	ldr	r3, [pc, #184]	; (1edbc <sd_spi_op_cond+0xcc>)
   1ed02:	2100      	movs	r1, #0
   1ed04:	0018      	movs	r0, r3
   1ed06:	4b2e      	ldr	r3, [pc, #184]	; (1edc0 <sd_spi_op_cond+0xd0>)
   1ed08:	4798      	blx	r3
   1ed0a:	0003      	movs	r3, r0
   1ed0c:	001a      	movs	r2, r3
   1ed0e:	2301      	movs	r3, #1
   1ed10:	4053      	eors	r3, r2
   1ed12:	b2db      	uxtb	r3, r3
   1ed14:	2b00      	cmp	r3, #0
   1ed16:	d001      	beq.n	1ed1c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1ed18:	2300      	movs	r3, #0
   1ed1a:	e048      	b.n	1edae <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1ed1c:	2300      	movs	r3, #0
   1ed1e:	617b      	str	r3, [r7, #20]
		if (v2) {
   1ed20:	1dfb      	adds	r3, r7, #7
   1ed22:	781b      	ldrb	r3, [r3, #0]
   1ed24:	2b00      	cmp	r3, #0
   1ed26:	d004      	beq.n	1ed32 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1ed28:	697b      	ldr	r3, [r7, #20]
   1ed2a:	2280      	movs	r2, #128	; 0x80
   1ed2c:	05d2      	lsls	r2, r2, #23
   1ed2e:	4313      	orrs	r3, r2
   1ed30:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1ed32:	697b      	ldr	r3, [r7, #20]
   1ed34:	4a23      	ldr	r2, [pc, #140]	; (1edc4 <sd_spi_op_cond+0xd4>)
   1ed36:	0019      	movs	r1, r3
   1ed38:	0010      	movs	r0, r2
   1ed3a:	4b21      	ldr	r3, [pc, #132]	; (1edc0 <sd_spi_op_cond+0xd0>)
   1ed3c:	4798      	blx	r3
   1ed3e:	0003      	movs	r3, r0
   1ed40:	001a      	movs	r2, r3
   1ed42:	2301      	movs	r3, #1
   1ed44:	4053      	eors	r3, r2
   1ed46:	b2db      	uxtb	r3, r3
   1ed48:	2b00      	cmp	r3, #0
   1ed4a:	d001      	beq.n	1ed50 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1ed4c:	2300      	movs	r3, #0
   1ed4e:	e02e      	b.n	1edae <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1ed50:	4b1d      	ldr	r3, [pc, #116]	; (1edc8 <sd_spi_op_cond+0xd8>)
   1ed52:	4798      	blx	r3
   1ed54:	0003      	movs	r3, r0
   1ed56:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1ed58:	68fb      	ldr	r3, [r7, #12]
   1ed5a:	2201      	movs	r2, #1
   1ed5c:	4013      	ands	r3, r2
   1ed5e:	d006      	beq.n	1ed6e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1ed60:	693b      	ldr	r3, [r7, #16]
   1ed62:	1e5a      	subs	r2, r3, #1
   1ed64:	613a      	str	r2, [r7, #16]
   1ed66:	2b00      	cmp	r3, #0
   1ed68:	d1ca      	bne.n	1ed00 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1ed6a:	2300      	movs	r3, #0
   1ed6c:	e01f      	b.n	1edae <sd_spi_op_cond+0xbe>
			break;
   1ed6e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1ed70:	4b16      	ldr	r3, [pc, #88]	; (1edcc <sd_spi_op_cond+0xdc>)
   1ed72:	2100      	movs	r1, #0
   1ed74:	0018      	movs	r0, r3
   1ed76:	4b12      	ldr	r3, [pc, #72]	; (1edc0 <sd_spi_op_cond+0xd0>)
   1ed78:	4798      	blx	r3
   1ed7a:	0003      	movs	r3, r0
   1ed7c:	001a      	movs	r2, r3
   1ed7e:	2301      	movs	r3, #1
   1ed80:	4053      	eors	r3, r2
   1ed82:	b2db      	uxtb	r3, r3
   1ed84:	2b00      	cmp	r3, #0
   1ed86:	d001      	beq.n	1ed8c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1ed88:	2300      	movs	r3, #0
   1ed8a:	e010      	b.n	1edae <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1ed8c:	4b0e      	ldr	r3, [pc, #56]	; (1edc8 <sd_spi_op_cond+0xd8>)
   1ed8e:	4798      	blx	r3
   1ed90:	0002      	movs	r2, r0
   1ed92:	2380      	movs	r3, #128	; 0x80
   1ed94:	05db      	lsls	r3, r3, #23
   1ed96:	4013      	ands	r3, r2
   1ed98:	d008      	beq.n	1edac <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1ed9a:	4b0d      	ldr	r3, [pc, #52]	; (1edd0 <sd_spi_op_cond+0xe0>)
   1ed9c:	681a      	ldr	r2, [r3, #0]
   1ed9e:	4b0c      	ldr	r3, [pc, #48]	; (1edd0 <sd_spi_op_cond+0xe0>)
   1eda0:	681b      	ldr	r3, [r3, #0]
   1eda2:	7adb      	ldrb	r3, [r3, #11]
   1eda4:	2108      	movs	r1, #8
   1eda6:	430b      	orrs	r3, r1
   1eda8:	b2db      	uxtb	r3, r3
   1edaa:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1edac:	2301      	movs	r3, #1
}
   1edae:	0018      	movs	r0, r3
   1edb0:	46bd      	mov	sp, r7
   1edb2:	b006      	add	sp, #24
   1edb4:	bd80      	pop	{r7, pc}
   1edb6:	46c0      	nop			; (mov r8, r8)
   1edb8:	00001bee 	.word	0x00001bee
   1edbc:	00001137 	.word	0x00001137
   1edc0:	000206c1 	.word	0x000206c1
   1edc4:	00001129 	.word	0x00001129
   1edc8:	00020901 	.word	0x00020901
   1edcc:	0000053a 	.word	0x0000053a
   1edd0:	20004244 	.word	0x20004244

0001edd4 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1edd4:	b580      	push	{r7, lr}
   1edd6:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1edd8:	2301      	movs	r3, #1
}
   1edda:	0018      	movs	r0, r3
   1eddc:	46bd      	mov	sp, r7
   1edde:	bd80      	pop	{r7, pc}

0001ede0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1ede0:	b580      	push	{r7, lr}
   1ede2:	b084      	sub	sp, #16
   1ede4:	af00      	add	r7, sp, #0
   1ede6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1ede8:	687b      	ldr	r3, [r7, #4]
   1edea:	2200      	movs	r2, #0
   1edec:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1edee:	23d5      	movs	r3, #213	; 0xd5
   1edf0:	005b      	lsls	r3, r3, #1
   1edf2:	4a14      	ldr	r2, [pc, #80]	; (1ee44 <sd_cmd8+0x64>)
   1edf4:	0019      	movs	r1, r3
   1edf6:	0010      	movs	r0, r2
   1edf8:	4b13      	ldr	r3, [pc, #76]	; (1ee48 <sd_cmd8+0x68>)
   1edfa:	4798      	blx	r3
   1edfc:	0003      	movs	r3, r0
   1edfe:	001a      	movs	r2, r3
   1ee00:	2301      	movs	r3, #1
   1ee02:	4053      	eors	r3, r2
   1ee04:	b2db      	uxtb	r3, r3
   1ee06:	2b00      	cmp	r3, #0
   1ee08:	d001      	beq.n	1ee0e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1ee0a:	2301      	movs	r3, #1
   1ee0c:	e015      	b.n	1ee3a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1ee0e:	4b0f      	ldr	r3, [pc, #60]	; (1ee4c <sd_cmd8+0x6c>)
   1ee10:	4798      	blx	r3
   1ee12:	0003      	movs	r3, r0
   1ee14:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1ee16:	68fb      	ldr	r3, [r7, #12]
   1ee18:	3301      	adds	r3, #1
   1ee1a:	d101      	bne.n	1ee20 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1ee1c:	2301      	movs	r3, #1
   1ee1e:	e00c      	b.n	1ee3a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1ee20:	68fb      	ldr	r3, [r7, #12]
   1ee22:	051b      	lsls	r3, r3, #20
   1ee24:	0d1a      	lsrs	r2, r3, #20
   1ee26:	23d5      	movs	r3, #213	; 0xd5
   1ee28:	005b      	lsls	r3, r3, #1
   1ee2a:	429a      	cmp	r2, r3
   1ee2c:	d001      	beq.n	1ee32 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1ee2e:	2300      	movs	r3, #0
   1ee30:	e003      	b.n	1ee3a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1ee32:	687b      	ldr	r3, [r7, #4]
   1ee34:	2201      	movs	r2, #1
   1ee36:	701a      	strb	r2, [r3, #0]
	return true;
   1ee38:	2301      	movs	r3, #1
}
   1ee3a:	0018      	movs	r0, r3
   1ee3c:	46bd      	mov	sp, r7
   1ee3e:	b004      	add	sp, #16
   1ee40:	bd80      	pop	{r7, pc}
   1ee42:	46c0      	nop			; (mov r8, r8)
   1ee44:	00005508 	.word	0x00005508
   1ee48:	000206c1 	.word	0x000206c1
   1ee4c:	00020901 	.word	0x00020901

0001ee50 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1ee50:	b590      	push	{r4, r7, lr}
   1ee52:	b089      	sub	sp, #36	; 0x24
   1ee54:	af02      	add	r7, sp, #8
   1ee56:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1ee58:	2380      	movs	r3, #128	; 0x80
   1ee5a:	009a      	lsls	r2, r3, #2
   1ee5c:	4841      	ldr	r0, [pc, #260]	; (1ef64 <mmc_cmd8+0x114>)
   1ee5e:	2300      	movs	r3, #0
   1ee60:	9300      	str	r3, [sp, #0]
   1ee62:	2301      	movs	r3, #1
   1ee64:	2100      	movs	r1, #0
   1ee66:	4c40      	ldr	r4, [pc, #256]	; (1ef68 <mmc_cmd8+0x118>)
   1ee68:	47a0      	blx	r4
   1ee6a:	0003      	movs	r3, r0
   1ee6c:	001a      	movs	r2, r3
   1ee6e:	2301      	movs	r3, #1
   1ee70:	4053      	eors	r3, r2
   1ee72:	b2db      	uxtb	r3, r3
   1ee74:	2b00      	cmp	r3, #0
   1ee76:	d001      	beq.n	1ee7c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1ee78:	2300      	movs	r3, #0
   1ee7a:	e06e      	b.n	1ef5a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1ee7c:	2316      	movs	r3, #22
   1ee7e:	18fb      	adds	r3, r7, r3
   1ee80:	2200      	movs	r2, #0
   1ee82:	801a      	strh	r2, [r3, #0]
   1ee84:	e014      	b.n	1eeb0 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1ee86:	2310      	movs	r3, #16
   1ee88:	18fb      	adds	r3, r7, r3
   1ee8a:	0018      	movs	r0, r3
   1ee8c:	4b37      	ldr	r3, [pc, #220]	; (1ef6c <mmc_cmd8+0x11c>)
   1ee8e:	4798      	blx	r3
   1ee90:	0003      	movs	r3, r0
   1ee92:	001a      	movs	r2, r3
   1ee94:	2301      	movs	r3, #1
   1ee96:	4053      	eors	r3, r2
   1ee98:	b2db      	uxtb	r3, r3
   1ee9a:	2b00      	cmp	r3, #0
   1ee9c:	d001      	beq.n	1eea2 <mmc_cmd8+0x52>
			return false;
   1ee9e:	2300      	movs	r3, #0
   1eea0:	e05b      	b.n	1ef5a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1eea2:	2316      	movs	r3, #22
   1eea4:	18fb      	adds	r3, r7, r3
   1eea6:	881a      	ldrh	r2, [r3, #0]
   1eea8:	2316      	movs	r3, #22
   1eeaa:	18fb      	adds	r3, r7, r3
   1eeac:	3201      	adds	r2, #1
   1eeae:	801a      	strh	r2, [r3, #0]
   1eeb0:	2316      	movs	r3, #22
   1eeb2:	18fb      	adds	r3, r7, r3
   1eeb4:	881b      	ldrh	r3, [r3, #0]
   1eeb6:	2b31      	cmp	r3, #49	; 0x31
   1eeb8:	d9e5      	bls.n	1ee86 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1eeba:	693b      	ldr	r3, [r7, #16]
   1eebc:	b2db      	uxtb	r3, r3
   1eebe:	2202      	movs	r2, #2
   1eec0:	4013      	ands	r3, r2
   1eec2:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1eec4:	687b      	ldr	r3, [r7, #4]
   1eec6:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1eec8:	4b29      	ldr	r3, [pc, #164]	; (1ef70 <mmc_cmd8+0x120>)
   1eeca:	681b      	ldr	r3, [r3, #0]
   1eecc:	330e      	adds	r3, #14
   1eece:	0018      	movs	r0, r3
   1eed0:	230c      	movs	r3, #12
   1eed2:	223e      	movs	r2, #62	; 0x3e
   1eed4:	2180      	movs	r1, #128	; 0x80
   1eed6:	4c27      	ldr	r4, [pc, #156]	; (1ef74 <mmc_cmd8+0x124>)
   1eed8:	47a0      	blx	r4
   1eeda:	0002      	movs	r2, r0
   1eedc:	4b26      	ldr	r3, [pc, #152]	; (1ef78 <mmc_cmd8+0x128>)
   1eede:	429a      	cmp	r2, r3
   1eee0:	d135      	bne.n	1ef4e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1eee2:	e014      	b.n	1ef0e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1eee4:	230c      	movs	r3, #12
   1eee6:	18fb      	adds	r3, r7, r3
   1eee8:	0018      	movs	r0, r3
   1eeea:	4b20      	ldr	r3, [pc, #128]	; (1ef6c <mmc_cmd8+0x11c>)
   1eeec:	4798      	blx	r3
   1eeee:	0003      	movs	r3, r0
   1eef0:	001a      	movs	r2, r3
   1eef2:	2301      	movs	r3, #1
   1eef4:	4053      	eors	r3, r2
   1eef6:	b2db      	uxtb	r3, r3
   1eef8:	2b00      	cmp	r3, #0
   1eefa:	d001      	beq.n	1ef00 <mmc_cmd8+0xb0>
				return false;
   1eefc:	2300      	movs	r3, #0
   1eefe:	e02c      	b.n	1ef5a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1ef00:	2316      	movs	r3, #22
   1ef02:	18fb      	adds	r3, r7, r3
   1ef04:	881a      	ldrh	r2, [r3, #0]
   1ef06:	2316      	movs	r3, #22
   1ef08:	18fb      	adds	r3, r7, r3
   1ef0a:	3201      	adds	r2, #1
   1ef0c:	801a      	strh	r2, [r3, #0]
   1ef0e:	2316      	movs	r3, #22
   1ef10:	18fb      	adds	r3, r7, r3
   1ef12:	881b      	ldrh	r3, [r3, #0]
   1ef14:	2b35      	cmp	r3, #53	; 0x35
   1ef16:	d9e5      	bls.n	1eee4 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1ef18:	4b15      	ldr	r3, [pc, #84]	; (1ef70 <mmc_cmd8+0x120>)
   1ef1a:	681b      	ldr	r3, [r3, #0]
   1ef1c:	68fa      	ldr	r2, [r7, #12]
   1ef1e:	0852      	lsrs	r2, r2, #1
   1ef20:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1ef22:	e014      	b.n	1ef4e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1ef24:	230c      	movs	r3, #12
   1ef26:	18fb      	adds	r3, r7, r3
   1ef28:	0018      	movs	r0, r3
   1ef2a:	4b10      	ldr	r3, [pc, #64]	; (1ef6c <mmc_cmd8+0x11c>)
   1ef2c:	4798      	blx	r3
   1ef2e:	0003      	movs	r3, r0
   1ef30:	001a      	movs	r2, r3
   1ef32:	2301      	movs	r3, #1
   1ef34:	4053      	eors	r3, r2
   1ef36:	b2db      	uxtb	r3, r3
   1ef38:	2b00      	cmp	r3, #0
   1ef3a:	d001      	beq.n	1ef40 <mmc_cmd8+0xf0>
			return false;
   1ef3c:	2300      	movs	r3, #0
   1ef3e:	e00c      	b.n	1ef5a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1ef40:	2316      	movs	r3, #22
   1ef42:	18fb      	adds	r3, r7, r3
   1ef44:	881a      	ldrh	r2, [r3, #0]
   1ef46:	2316      	movs	r3, #22
   1ef48:	18fb      	adds	r3, r7, r3
   1ef4a:	3201      	adds	r2, #1
   1ef4c:	801a      	strh	r2, [r3, #0]
   1ef4e:	2316      	movs	r3, #22
   1ef50:	18fb      	adds	r3, r7, r3
   1ef52:	881b      	ldrh	r3, [r3, #0]
   1ef54:	2b7f      	cmp	r3, #127	; 0x7f
   1ef56:	d9e5      	bls.n	1ef24 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1ef58:	2301      	movs	r3, #1
}
   1ef5a:	0018      	movs	r0, r3
   1ef5c:	46bd      	mov	sp, r7
   1ef5e:	b007      	add	sp, #28
   1ef60:	bd90      	pop	{r4, r7, pc}
   1ef62:	46c0      	nop			; (mov r8, r8)
   1ef64:	00081108 	.word	0x00081108
   1ef68:	000206e9 	.word	0x000206e9
   1ef6c:	00020915 	.word	0x00020915
   1ef70:	20004244 	.word	0x20004244
   1ef74:	0001eae9 	.word	0x0001eae9
   1ef78:	00000fff 	.word	0x00000fff

0001ef7c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1ef7c:	b590      	push	{r4, r7, lr}
   1ef7e:	b083      	sub	sp, #12
   1ef80:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1ef82:	4b15      	ldr	r3, [pc, #84]	; (1efd8 <sd_mmc_cmd9_spi+0x5c>)
   1ef84:	681b      	ldr	r3, [r3, #0]
   1ef86:	891b      	ldrh	r3, [r3, #8]
   1ef88:	0419      	lsls	r1, r3, #16
   1ef8a:	4814      	ldr	r0, [pc, #80]	; (1efdc <sd_mmc_cmd9_spi+0x60>)
   1ef8c:	2301      	movs	r3, #1
   1ef8e:	9300      	str	r3, [sp, #0]
   1ef90:	2301      	movs	r3, #1
   1ef92:	2210      	movs	r2, #16
   1ef94:	4c12      	ldr	r4, [pc, #72]	; (1efe0 <sd_mmc_cmd9_spi+0x64>)
   1ef96:	47a0      	blx	r4
   1ef98:	0003      	movs	r3, r0
   1ef9a:	001a      	movs	r2, r3
   1ef9c:	2301      	movs	r3, #1
   1ef9e:	4053      	eors	r3, r2
   1efa0:	b2db      	uxtb	r3, r3
   1efa2:	2b00      	cmp	r3, #0
   1efa4:	d001      	beq.n	1efaa <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1efa6:	2300      	movs	r3, #0
   1efa8:	e012      	b.n	1efd0 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1efaa:	4b0b      	ldr	r3, [pc, #44]	; (1efd8 <sd_mmc_cmd9_spi+0x5c>)
   1efac:	681b      	ldr	r3, [r3, #0]
   1efae:	330e      	adds	r3, #14
   1efb0:	2101      	movs	r1, #1
   1efb2:	0018      	movs	r0, r3
   1efb4:	4b0b      	ldr	r3, [pc, #44]	; (1efe4 <sd_mmc_cmd9_spi+0x68>)
   1efb6:	4798      	blx	r3
   1efb8:	0003      	movs	r3, r0
   1efba:	001a      	movs	r2, r3
   1efbc:	2301      	movs	r3, #1
   1efbe:	4053      	eors	r3, r2
   1efc0:	b2db      	uxtb	r3, r3
   1efc2:	2b00      	cmp	r3, #0
   1efc4:	d001      	beq.n	1efca <sd_mmc_cmd9_spi+0x4e>
		return false;
   1efc6:	2300      	movs	r3, #0
   1efc8:	e002      	b.n	1efd0 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1efca:	4b07      	ldr	r3, [pc, #28]	; (1efe8 <sd_mmc_cmd9_spi+0x6c>)
   1efcc:	4798      	blx	r3
   1efce:	0003      	movs	r3, r0
}
   1efd0:	0018      	movs	r0, r3
   1efd2:	46bd      	mov	sp, r7
   1efd4:	b001      	add	sp, #4
   1efd6:	bd90      	pop	{r4, r7, pc}
   1efd8:	20004244 	.word	0x20004244
   1efdc:	00081109 	.word	0x00081109
   1efe0:	000206e9 	.word	0x000206e9
   1efe4:	000209b9 	.word	0x000209b9
   1efe8:	00020a5d 	.word	0x00020a5d

0001efec <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1efec:	b5b0      	push	{r4, r5, r7, lr}
   1efee:	b084      	sub	sp, #16
   1eff0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1eff2:	4b45      	ldr	r3, [pc, #276]	; (1f108 <mmc_decode_csd+0x11c>)
   1eff4:	681b      	ldr	r3, [r3, #0]
   1eff6:	330e      	adds	r3, #14
   1eff8:	0018      	movs	r0, r3
   1effa:	2304      	movs	r3, #4
   1effc:	227a      	movs	r2, #122	; 0x7a
   1effe:	2180      	movs	r1, #128	; 0x80
   1f000:	4c42      	ldr	r4, [pc, #264]	; (1f10c <mmc_decode_csd+0x120>)
   1f002:	47a0      	blx	r4
   1f004:	0003      	movs	r3, r0
   1f006:	2b02      	cmp	r3, #2
   1f008:	d011      	beq.n	1f02e <mmc_decode_csd+0x42>
   1f00a:	d802      	bhi.n	1f012 <mmc_decode_csd+0x26>
   1f00c:	2b01      	cmp	r3, #1
   1f00e:	d009      	beq.n	1f024 <mmc_decode_csd+0x38>
   1f010:	e003      	b.n	1f01a <mmc_decode_csd+0x2e>
   1f012:	2b03      	cmp	r3, #3
   1f014:	d010      	beq.n	1f038 <mmc_decode_csd+0x4c>
   1f016:	2b04      	cmp	r3, #4
   1f018:	d013      	beq.n	1f042 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1f01a:	4b3b      	ldr	r3, [pc, #236]	; (1f108 <mmc_decode_csd+0x11c>)
   1f01c:	681b      	ldr	r3, [r3, #0]
   1f01e:	2212      	movs	r2, #18
   1f020:	731a      	strb	r2, [r3, #12]
		break;
   1f022:	e013      	b.n	1f04c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1f024:	4b38      	ldr	r3, [pc, #224]	; (1f108 <mmc_decode_csd+0x11c>)
   1f026:	681b      	ldr	r3, [r3, #0]
   1f028:	2214      	movs	r2, #20
   1f02a:	731a      	strb	r2, [r3, #12]
		break;
   1f02c:	e00e      	b.n	1f04c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1f02e:	4b36      	ldr	r3, [pc, #216]	; (1f108 <mmc_decode_csd+0x11c>)
   1f030:	681b      	ldr	r3, [r3, #0]
   1f032:	2222      	movs	r2, #34	; 0x22
   1f034:	731a      	strb	r2, [r3, #12]
		break;
   1f036:	e009      	b.n	1f04c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1f038:	4b33      	ldr	r3, [pc, #204]	; (1f108 <mmc_decode_csd+0x11c>)
   1f03a:	681b      	ldr	r3, [r3, #0]
   1f03c:	2230      	movs	r2, #48	; 0x30
   1f03e:	731a      	strb	r2, [r3, #12]
		break;
   1f040:	e004      	b.n	1f04c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1f042:	4b31      	ldr	r3, [pc, #196]	; (1f108 <mmc_decode_csd+0x11c>)
   1f044:	681b      	ldr	r3, [r3, #0]
   1f046:	2240      	movs	r2, #64	; 0x40
   1f048:	731a      	strb	r2, [r3, #12]
		break;
   1f04a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f04c:	4b2e      	ldr	r3, [pc, #184]	; (1f108 <mmc_decode_csd+0x11c>)
   1f04e:	681b      	ldr	r3, [r3, #0]
   1f050:	330e      	adds	r3, #14
   1f052:	0018      	movs	r0, r3
   1f054:	2308      	movs	r3, #8
   1f056:	2260      	movs	r2, #96	; 0x60
   1f058:	2180      	movs	r1, #128	; 0x80
   1f05a:	4c2c      	ldr	r4, [pc, #176]	; (1f10c <mmc_decode_csd+0x120>)
   1f05c:	47a0      	blx	r4
   1f05e:	0003      	movs	r3, r0
   1f060:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f062:	68fb      	ldr	r3, [r7, #12]
   1f064:	2207      	movs	r2, #7
   1f066:	401a      	ands	r2, r3
   1f068:	4b29      	ldr	r3, [pc, #164]	; (1f110 <mmc_decode_csd+0x124>)
   1f06a:	0092      	lsls	r2, r2, #2
   1f06c:	58d3      	ldr	r3, [r2, r3]
   1f06e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f070:	68fb      	ldr	r3, [r7, #12]
   1f072:	08db      	lsrs	r3, r3, #3
   1f074:	220f      	movs	r2, #15
   1f076:	401a      	ands	r2, r3
   1f078:	4b26      	ldr	r3, [pc, #152]	; (1f114 <mmc_decode_csd+0x128>)
   1f07a:	0092      	lsls	r2, r2, #2
   1f07c:	58d3      	ldr	r3, [r2, r3]
   1f07e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f080:	4b21      	ldr	r3, [pc, #132]	; (1f108 <mmc_decode_csd+0x11c>)
   1f082:	681b      	ldr	r3, [r3, #0]
   1f084:	68ba      	ldr	r2, [r7, #8]
   1f086:	6879      	ldr	r1, [r7, #4]
   1f088:	434a      	muls	r2, r1
   1f08a:	21fa      	movs	r1, #250	; 0xfa
   1f08c:	0089      	lsls	r1, r1, #2
   1f08e:	434a      	muls	r2, r1
   1f090:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1f092:	4b1d      	ldr	r3, [pc, #116]	; (1f108 <mmc_decode_csd+0x11c>)
   1f094:	681b      	ldr	r3, [r3, #0]
   1f096:	330e      	adds	r3, #14
   1f098:	0018      	movs	r0, r3
   1f09a:	230c      	movs	r3, #12
   1f09c:	223e      	movs	r2, #62	; 0x3e
   1f09e:	2180      	movs	r1, #128	; 0x80
   1f0a0:	4c1a      	ldr	r4, [pc, #104]	; (1f10c <mmc_decode_csd+0x120>)
   1f0a2:	47a0      	blx	r4
   1f0a4:	0002      	movs	r2, r0
   1f0a6:	4b1c      	ldr	r3, [pc, #112]	; (1f118 <mmc_decode_csd+0x12c>)
   1f0a8:	429a      	cmp	r2, r3
   1f0aa:	d028      	beq.n	1f0fe <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f0ac:	4b16      	ldr	r3, [pc, #88]	; (1f108 <mmc_decode_csd+0x11c>)
   1f0ae:	681b      	ldr	r3, [r3, #0]
   1f0b0:	330e      	adds	r3, #14
   1f0b2:	0018      	movs	r0, r3
   1f0b4:	230c      	movs	r3, #12
   1f0b6:	223e      	movs	r2, #62	; 0x3e
   1f0b8:	2180      	movs	r1, #128	; 0x80
   1f0ba:	4c14      	ldr	r4, [pc, #80]	; (1f10c <mmc_decode_csd+0x120>)
   1f0bc:	47a0      	blx	r4
   1f0be:	0003      	movs	r3, r0
   1f0c0:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f0c2:	4b11      	ldr	r3, [pc, #68]	; (1f108 <mmc_decode_csd+0x11c>)
   1f0c4:	681b      	ldr	r3, [r3, #0]
   1f0c6:	330e      	adds	r3, #14
   1f0c8:	0018      	movs	r0, r3
   1f0ca:	2303      	movs	r3, #3
   1f0cc:	222f      	movs	r2, #47	; 0x2f
   1f0ce:	2180      	movs	r1, #128	; 0x80
   1f0d0:	4d0e      	ldr	r5, [pc, #56]	; (1f10c <mmc_decode_csd+0x120>)
   1f0d2:	47a8      	blx	r5
   1f0d4:	0003      	movs	r3, r0
   1f0d6:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f0d8:	409c      	lsls	r4, r3
   1f0da:	0023      	movs	r3, r4
   1f0dc:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f0de:	4b0a      	ldr	r3, [pc, #40]	; (1f108 <mmc_decode_csd+0x11c>)
   1f0e0:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f0e2:	4b09      	ldr	r3, [pc, #36]	; (1f108 <mmc_decode_csd+0x11c>)
   1f0e4:	681b      	ldr	r3, [r3, #0]
   1f0e6:	330e      	adds	r3, #14
   1f0e8:	0018      	movs	r0, r3
   1f0ea:	2304      	movs	r3, #4
   1f0ec:	2250      	movs	r2, #80	; 0x50
   1f0ee:	2180      	movs	r1, #128	; 0x80
   1f0f0:	4d06      	ldr	r5, [pc, #24]	; (1f10c <mmc_decode_csd+0x120>)
   1f0f2:	47a8      	blx	r5
   1f0f4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f0f6:	683b      	ldr	r3, [r7, #0]
   1f0f8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f0fa:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f0fc:	6063      	str	r3, [r4, #4]
	}
}
   1f0fe:	46c0      	nop			; (mov r8, r8)
   1f100:	46bd      	mov	sp, r7
   1f102:	b004      	add	sp, #16
   1f104:	bdb0      	pop	{r4, r5, r7, pc}
   1f106:	46c0      	nop			; (mov r8, r8)
   1f108:	20004244 	.word	0x20004244
   1f10c:	0001eae9 	.word	0x0001eae9
   1f110:	0003923c 	.word	0x0003923c
   1f114:	00039298 	.word	0x00039298
   1f118:	00000fff 	.word	0x00000fff

0001f11c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1f11c:	b5b0      	push	{r4, r5, r7, lr}
   1f11e:	b084      	sub	sp, #16
   1f120:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f122:	4b35      	ldr	r3, [pc, #212]	; (1f1f8 <sd_decode_csd+0xdc>)
   1f124:	681b      	ldr	r3, [r3, #0]
   1f126:	330e      	adds	r3, #14
   1f128:	0018      	movs	r0, r3
   1f12a:	2308      	movs	r3, #8
   1f12c:	2260      	movs	r2, #96	; 0x60
   1f12e:	2180      	movs	r1, #128	; 0x80
   1f130:	4c32      	ldr	r4, [pc, #200]	; (1f1fc <sd_decode_csd+0xe0>)
   1f132:	47a0      	blx	r4
   1f134:	0003      	movs	r3, r0
   1f136:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f138:	68fb      	ldr	r3, [r7, #12]
   1f13a:	2207      	movs	r2, #7
   1f13c:	401a      	ands	r2, r3
   1f13e:	4b30      	ldr	r3, [pc, #192]	; (1f200 <sd_decode_csd+0xe4>)
   1f140:	0092      	lsls	r2, r2, #2
   1f142:	58d3      	ldr	r3, [r2, r3]
   1f144:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f146:	68fb      	ldr	r3, [r7, #12]
   1f148:	08db      	lsrs	r3, r3, #3
   1f14a:	220f      	movs	r2, #15
   1f14c:	401a      	ands	r2, r3
   1f14e:	4b2d      	ldr	r3, [pc, #180]	; (1f204 <sd_decode_csd+0xe8>)
   1f150:	0092      	lsls	r2, r2, #2
   1f152:	58d3      	ldr	r3, [r2, r3]
   1f154:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f156:	4b28      	ldr	r3, [pc, #160]	; (1f1f8 <sd_decode_csd+0xdc>)
   1f158:	681b      	ldr	r3, [r3, #0]
   1f15a:	68ba      	ldr	r2, [r7, #8]
   1f15c:	6879      	ldr	r1, [r7, #4]
   1f15e:	434a      	muls	r2, r1
   1f160:	21fa      	movs	r1, #250	; 0xfa
   1f162:	0089      	lsls	r1, r1, #2
   1f164:	434a      	muls	r2, r1
   1f166:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1f168:	4b23      	ldr	r3, [pc, #140]	; (1f1f8 <sd_decode_csd+0xdc>)
   1f16a:	681b      	ldr	r3, [r3, #0]
   1f16c:	330e      	adds	r3, #14
   1f16e:	0018      	movs	r0, r3
   1f170:	2302      	movs	r3, #2
   1f172:	227e      	movs	r2, #126	; 0x7e
   1f174:	2180      	movs	r1, #128	; 0x80
   1f176:	4c21      	ldr	r4, [pc, #132]	; (1f1fc <sd_decode_csd+0xe0>)
   1f178:	47a0      	blx	r4
   1f17a:	1e03      	subs	r3, r0, #0
   1f17c:	d00f      	beq.n	1f19e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1f17e:	4b1e      	ldr	r3, [pc, #120]	; (1f1f8 <sd_decode_csd+0xdc>)
   1f180:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1f182:	4b1d      	ldr	r3, [pc, #116]	; (1f1f8 <sd_decode_csd+0xdc>)
   1f184:	681b      	ldr	r3, [r3, #0]
   1f186:	330e      	adds	r3, #14
   1f188:	0018      	movs	r0, r3
   1f18a:	2316      	movs	r3, #22
   1f18c:	2230      	movs	r2, #48	; 0x30
   1f18e:	2180      	movs	r1, #128	; 0x80
   1f190:	4d1a      	ldr	r5, [pc, #104]	; (1f1fc <sd_decode_csd+0xe0>)
   1f192:	47a8      	blx	r5
   1f194:	0003      	movs	r3, r0
				* 512;
   1f196:	3301      	adds	r3, #1
   1f198:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1f19a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1f19c:	e028      	b.n	1f1f0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f19e:	4b16      	ldr	r3, [pc, #88]	; (1f1f8 <sd_decode_csd+0xdc>)
   1f1a0:	681b      	ldr	r3, [r3, #0]
   1f1a2:	330e      	adds	r3, #14
   1f1a4:	0018      	movs	r0, r3
   1f1a6:	230c      	movs	r3, #12
   1f1a8:	223e      	movs	r2, #62	; 0x3e
   1f1aa:	2180      	movs	r1, #128	; 0x80
   1f1ac:	4c13      	ldr	r4, [pc, #76]	; (1f1fc <sd_decode_csd+0xe0>)
   1f1ae:	47a0      	blx	r4
   1f1b0:	0003      	movs	r3, r0
   1f1b2:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f1b4:	4b10      	ldr	r3, [pc, #64]	; (1f1f8 <sd_decode_csd+0xdc>)
   1f1b6:	681b      	ldr	r3, [r3, #0]
   1f1b8:	330e      	adds	r3, #14
   1f1ba:	0018      	movs	r0, r3
   1f1bc:	2303      	movs	r3, #3
   1f1be:	222f      	movs	r2, #47	; 0x2f
   1f1c0:	2180      	movs	r1, #128	; 0x80
   1f1c2:	4d0e      	ldr	r5, [pc, #56]	; (1f1fc <sd_decode_csd+0xe0>)
   1f1c4:	47a8      	blx	r5
   1f1c6:	0003      	movs	r3, r0
   1f1c8:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f1ca:	409c      	lsls	r4, r3
   1f1cc:	0023      	movs	r3, r4
   1f1ce:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f1d0:	4b09      	ldr	r3, [pc, #36]	; (1f1f8 <sd_decode_csd+0xdc>)
   1f1d2:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1f1d4:	4b08      	ldr	r3, [pc, #32]	; (1f1f8 <sd_decode_csd+0xdc>)
   1f1d6:	681b      	ldr	r3, [r3, #0]
   1f1d8:	330e      	adds	r3, #14
   1f1da:	0018      	movs	r0, r3
   1f1dc:	2304      	movs	r3, #4
   1f1de:	2250      	movs	r2, #80	; 0x50
   1f1e0:	2180      	movs	r1, #128	; 0x80
   1f1e2:	4d06      	ldr	r5, [pc, #24]	; (1f1fc <sd_decode_csd+0xe0>)
   1f1e4:	47a8      	blx	r5
   1f1e6:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f1e8:	683b      	ldr	r3, [r7, #0]
   1f1ea:	4093      	lsls	r3, r2
				/ 1024;
   1f1ec:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f1ee:	6063      	str	r3, [r4, #4]
}
   1f1f0:	46c0      	nop			; (mov r8, r8)
   1f1f2:	46bd      	mov	sp, r7
   1f1f4:	b004      	add	sp, #16
   1f1f6:	bdb0      	pop	{r4, r5, r7, pc}
   1f1f8:	20004244 	.word	0x20004244
   1f1fc:	0001eae9 	.word	0x0001eae9
   1f200:	0003923c 	.word	0x0003923c
   1f204:	00039258 	.word	0x00039258

0001f208 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1f208:	b580      	push	{r7, lr}
   1f20a:	b082      	sub	sp, #8
   1f20c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1f20e:	4b11      	ldr	r3, [pc, #68]	; (1f254 <sd_mmc_cmd13+0x4c>)
   1f210:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1f212:	4b11      	ldr	r3, [pc, #68]	; (1f258 <sd_mmc_cmd13+0x50>)
   1f214:	2100      	movs	r1, #0
   1f216:	0018      	movs	r0, r3
   1f218:	4b10      	ldr	r3, [pc, #64]	; (1f25c <sd_mmc_cmd13+0x54>)
   1f21a:	4798      	blx	r3
   1f21c:	0003      	movs	r3, r0
   1f21e:	001a      	movs	r2, r3
   1f220:	2301      	movs	r3, #1
   1f222:	4053      	eors	r3, r2
   1f224:	b2db      	uxtb	r3, r3
   1f226:	2b00      	cmp	r3, #0
   1f228:	d001      	beq.n	1f22e <sd_mmc_cmd13+0x26>
				return false;
   1f22a:	2300      	movs	r3, #0
   1f22c:	e00e      	b.n	1f24c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1f22e:	4b0c      	ldr	r3, [pc, #48]	; (1f260 <sd_mmc_cmd13+0x58>)
   1f230:	4798      	blx	r3
   1f232:	0002      	movs	r2, r0
   1f234:	23ff      	movs	r3, #255	; 0xff
   1f236:	4013      	ands	r3, r2
   1f238:	d006      	beq.n	1f248 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1f23a:	687b      	ldr	r3, [r7, #4]
   1f23c:	1e5a      	subs	r2, r3, #1
   1f23e:	607a      	str	r2, [r7, #4]
   1f240:	2b00      	cmp	r3, #0
   1f242:	d1e6      	bne.n	1f212 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1f244:	2300      	movs	r3, #0
   1f246:	e001      	b.n	1f24c <sd_mmc_cmd13+0x44>
				break;
   1f248:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1f24a:	2301      	movs	r3, #1
}
   1f24c:	0018      	movs	r0, r3
   1f24e:	46bd      	mov	sp, r7
   1f250:	b002      	add	sp, #8
   1f252:	bd80      	pop	{r7, pc}
   1f254:	00030d40 	.word	0x00030d40
   1f258:	00001b0d 	.word	0x00001b0d
   1f25c:	000206c1 	.word	0x000206c1
   1f260:	00020901 	.word	0x00020901

0001f264 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1f264:	b590      	push	{r4, r7, lr}
   1f266:	b085      	sub	sp, #20
   1f268:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1f26a:	4b38      	ldr	r3, [pc, #224]	; (1f34c <sd_acmd51+0xe8>)
   1f26c:	681b      	ldr	r3, [r3, #0]
   1f26e:	891b      	ldrh	r3, [r3, #8]
   1f270:	041b      	lsls	r3, r3, #16
   1f272:	4a37      	ldr	r2, [pc, #220]	; (1f350 <sd_acmd51+0xec>)
   1f274:	0019      	movs	r1, r3
   1f276:	0010      	movs	r0, r2
   1f278:	4b36      	ldr	r3, [pc, #216]	; (1f354 <sd_acmd51+0xf0>)
   1f27a:	4798      	blx	r3
   1f27c:	0003      	movs	r3, r0
   1f27e:	001a      	movs	r2, r3
   1f280:	2301      	movs	r3, #1
   1f282:	4053      	eors	r3, r2
   1f284:	b2db      	uxtb	r3, r3
   1f286:	2b00      	cmp	r3, #0
   1f288:	d001      	beq.n	1f28e <sd_acmd51+0x2a>
		return false;
   1f28a:	2300      	movs	r3, #0
   1f28c:	e059      	b.n	1f342 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1f28e:	4832      	ldr	r0, [pc, #200]	; (1f358 <sd_acmd51+0xf4>)
   1f290:	2301      	movs	r3, #1
   1f292:	9300      	str	r3, [sp, #0]
   1f294:	2301      	movs	r3, #1
   1f296:	2208      	movs	r2, #8
   1f298:	2100      	movs	r1, #0
   1f29a:	4c30      	ldr	r4, [pc, #192]	; (1f35c <sd_acmd51+0xf8>)
   1f29c:	47a0      	blx	r4
   1f29e:	0003      	movs	r3, r0
   1f2a0:	001a      	movs	r2, r3
   1f2a2:	2301      	movs	r3, #1
   1f2a4:	4053      	eors	r3, r2
   1f2a6:	b2db      	uxtb	r3, r3
   1f2a8:	2b00      	cmp	r3, #0
   1f2aa:	d001      	beq.n	1f2b0 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1f2ac:	2300      	movs	r3, #0
   1f2ae:	e048      	b.n	1f342 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1f2b0:	003b      	movs	r3, r7
   1f2b2:	2101      	movs	r1, #1
   1f2b4:	0018      	movs	r0, r3
   1f2b6:	4b2a      	ldr	r3, [pc, #168]	; (1f360 <sd_acmd51+0xfc>)
   1f2b8:	4798      	blx	r3
   1f2ba:	0003      	movs	r3, r0
   1f2bc:	001a      	movs	r2, r3
   1f2be:	2301      	movs	r3, #1
   1f2c0:	4053      	eors	r3, r2
   1f2c2:	b2db      	uxtb	r3, r3
   1f2c4:	2b00      	cmp	r3, #0
   1f2c6:	d001      	beq.n	1f2cc <sd_acmd51+0x68>
		return false;
   1f2c8:	2300      	movs	r3, #0
   1f2ca:	e03a      	b.n	1f342 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1f2cc:	4b25      	ldr	r3, [pc, #148]	; (1f364 <sd_acmd51+0x100>)
   1f2ce:	4798      	blx	r3
   1f2d0:	0003      	movs	r3, r0
   1f2d2:	001a      	movs	r2, r3
   1f2d4:	2301      	movs	r3, #1
   1f2d6:	4053      	eors	r3, r2
   1f2d8:	b2db      	uxtb	r3, r3
   1f2da:	2b00      	cmp	r3, #0
   1f2dc:	d001      	beq.n	1f2e2 <sd_acmd51+0x7e>
		return false;
   1f2de:	2300      	movs	r3, #0
   1f2e0:	e02f      	b.n	1f342 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1f2e2:	0038      	movs	r0, r7
   1f2e4:	2304      	movs	r3, #4
   1f2e6:	2238      	movs	r2, #56	; 0x38
   1f2e8:	2140      	movs	r1, #64	; 0x40
   1f2ea:	4c1f      	ldr	r4, [pc, #124]	; (1f368 <sd_acmd51+0x104>)
   1f2ec:	47a0      	blx	r4
   1f2ee:	0003      	movs	r3, r0
   1f2f0:	2b01      	cmp	r3, #1
   1f2f2:	d008      	beq.n	1f306 <sd_acmd51+0xa2>
   1f2f4:	d302      	bcc.n	1f2fc <sd_acmd51+0x98>
   1f2f6:	2b02      	cmp	r3, #2
   1f2f8:	d00a      	beq.n	1f310 <sd_acmd51+0xac>
   1f2fa:	e01c      	b.n	1f336 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f2fc:	4b13      	ldr	r3, [pc, #76]	; (1f34c <sd_acmd51+0xe8>)
   1f2fe:	681b      	ldr	r3, [r3, #0]
   1f300:	2210      	movs	r2, #16
   1f302:	731a      	strb	r2, [r3, #12]
		break;
   1f304:	e01c      	b.n	1f340 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1f306:	4b11      	ldr	r3, [pc, #68]	; (1f34c <sd_acmd51+0xe8>)
   1f308:	681b      	ldr	r3, [r3, #0]
   1f30a:	221a      	movs	r2, #26
   1f30c:	731a      	strb	r2, [r3, #12]
		break;
   1f30e:	e017      	b.n	1f340 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1f310:	0038      	movs	r0, r7
   1f312:	2301      	movs	r3, #1
   1f314:	222f      	movs	r2, #47	; 0x2f
   1f316:	2140      	movs	r1, #64	; 0x40
   1f318:	4c13      	ldr	r4, [pc, #76]	; (1f368 <sd_acmd51+0x104>)
   1f31a:	47a0      	blx	r4
   1f31c:	0003      	movs	r3, r0
   1f31e:	2b01      	cmp	r3, #1
   1f320:	d104      	bne.n	1f32c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1f322:	4b0a      	ldr	r3, [pc, #40]	; (1f34c <sd_acmd51+0xe8>)
   1f324:	681b      	ldr	r3, [r3, #0]
   1f326:	2230      	movs	r2, #48	; 0x30
   1f328:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1f32a:	e009      	b.n	1f340 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1f32c:	4b07      	ldr	r3, [pc, #28]	; (1f34c <sd_acmd51+0xe8>)
   1f32e:	681b      	ldr	r3, [r3, #0]
   1f330:	2220      	movs	r2, #32
   1f332:	731a      	strb	r2, [r3, #12]
		break;
   1f334:	e004      	b.n	1f340 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f336:	4b05      	ldr	r3, [pc, #20]	; (1f34c <sd_acmd51+0xe8>)
   1f338:	681b      	ldr	r3, [r3, #0]
   1f33a:	2210      	movs	r2, #16
   1f33c:	731a      	strb	r2, [r3, #12]
		break;
   1f33e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f340:	2301      	movs	r3, #1
}
   1f342:	0018      	movs	r0, r3
   1f344:	46bd      	mov	sp, r7
   1f346:	b003      	add	sp, #12
   1f348:	bd90      	pop	{r4, r7, pc}
   1f34a:	46c0      	nop			; (mov r8, r8)
   1f34c:	20004244 	.word	0x20004244
   1f350:	00001137 	.word	0x00001137
   1f354:	000206c1 	.word	0x000206c1
   1f358:	00081133 	.word	0x00081133
   1f35c:	000206e9 	.word	0x000206e9
   1f360:	000209b9 	.word	0x000209b9
   1f364:	00020a5d 	.word	0x00020a5d
   1f368:	0001eae9 	.word	0x0001eae9

0001f36c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1f36c:	b580      	push	{r7, lr}
   1f36e:	b082      	sub	sp, #8
   1f370:	af00      	add	r7, sp, #0
   1f372:	0002      	movs	r2, r0
   1f374:	1dfb      	adds	r3, r7, #7
   1f376:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1f378:	1dfb      	adds	r3, r7, #7
   1f37a:	781b      	ldrb	r3, [r3, #0]
   1f37c:	2b00      	cmp	r3, #0
   1f37e:	d001      	beq.n	1f384 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1f380:	2304      	movs	r3, #4
   1f382:	e047      	b.n	1f414 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1f384:	1dfb      	adds	r3, r7, #7
   1f386:	781b      	ldrb	r3, [r3, #0]
   1f388:	4a24      	ldr	r2, [pc, #144]	; (1f41c <sd_mmc_select_slot+0xb0>)
   1f38a:	015b      	lsls	r3, r3, #5
   1f38c:	18d3      	adds	r3, r2, r3
   1f38e:	330a      	adds	r3, #10
   1f390:	781b      	ldrb	r3, [r3, #0]
   1f392:	2b04      	cmp	r3, #4
   1f394:	d008      	beq.n	1f3a8 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1f396:	1dfb      	adds	r3, r7, #7
   1f398:	781b      	ldrb	r3, [r3, #0]
   1f39a:	4a20      	ldr	r2, [pc, #128]	; (1f41c <sd_mmc_select_slot+0xb0>)
   1f39c:	015b      	lsls	r3, r3, #5
   1f39e:	18d3      	adds	r3, r2, r3
   1f3a0:	330a      	adds	r3, #10
   1f3a2:	781b      	ldrb	r3, [r3, #0]
   1f3a4:	2b03      	cmp	r3, #3
   1f3a6:	d11d      	bne.n	1f3e4 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1f3a8:	1dfb      	adds	r3, r7, #7
   1f3aa:	781b      	ldrb	r3, [r3, #0]
   1f3ac:	4a1b      	ldr	r2, [pc, #108]	; (1f41c <sd_mmc_select_slot+0xb0>)
   1f3ae:	015b      	lsls	r3, r3, #5
   1f3b0:	18d3      	adds	r3, r2, r3
   1f3b2:	330a      	adds	r3, #10
   1f3b4:	2202      	movs	r2, #2
   1f3b6:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1f3b8:	1dfb      	adds	r3, r7, #7
   1f3ba:	781a      	ldrb	r2, [r3, #0]
   1f3bc:	4b17      	ldr	r3, [pc, #92]	; (1f41c <sd_mmc_select_slot+0xb0>)
   1f3be:	0152      	lsls	r2, r2, #5
   1f3c0:	4917      	ldr	r1, [pc, #92]	; (1f420 <sd_mmc_select_slot+0xb4>)
   1f3c2:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1f3c4:	1dfb      	adds	r3, r7, #7
   1f3c6:	781b      	ldrb	r3, [r3, #0]
   1f3c8:	4a14      	ldr	r2, [pc, #80]	; (1f41c <sd_mmc_select_slot+0xb0>)
   1f3ca:	015b      	lsls	r3, r3, #5
   1f3cc:	18d3      	adds	r3, r2, r3
   1f3ce:	330d      	adds	r3, #13
   1f3d0:	2201      	movs	r2, #1
   1f3d2:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1f3d4:	1dfb      	adds	r3, r7, #7
   1f3d6:	781b      	ldrb	r3, [r3, #0]
   1f3d8:	4a10      	ldr	r2, [pc, #64]	; (1f41c <sd_mmc_select_slot+0xb0>)
   1f3da:	015b      	lsls	r3, r3, #5
   1f3dc:	18d3      	adds	r3, r2, r3
   1f3de:	331e      	adds	r3, #30
   1f3e0:	2200      	movs	r2, #0
   1f3e2:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1f3e4:	4b0f      	ldr	r3, [pc, #60]	; (1f424 <sd_mmc_select_slot+0xb8>)
   1f3e6:	1dfa      	adds	r2, r7, #7
   1f3e8:	7812      	ldrb	r2, [r2, #0]
   1f3ea:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1f3ec:	1dfb      	adds	r3, r7, #7
   1f3ee:	781b      	ldrb	r3, [r3, #0]
   1f3f0:	015a      	lsls	r2, r3, #5
   1f3f2:	4b0a      	ldr	r3, [pc, #40]	; (1f41c <sd_mmc_select_slot+0xb0>)
   1f3f4:	18d2      	adds	r2, r2, r3
   1f3f6:	4b0c      	ldr	r3, [pc, #48]	; (1f428 <sd_mmc_select_slot+0xbc>)
   1f3f8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1f3fa:	4b0c      	ldr	r3, [pc, #48]	; (1f42c <sd_mmc_select_slot+0xc0>)
   1f3fc:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1f3fe:	1dfb      	adds	r3, r7, #7
   1f400:	781b      	ldrb	r3, [r3, #0]
   1f402:	4a06      	ldr	r2, [pc, #24]	; (1f41c <sd_mmc_select_slot+0xb0>)
   1f404:	015b      	lsls	r3, r3, #5
   1f406:	18d3      	adds	r3, r2, r3
   1f408:	330a      	adds	r3, #10
   1f40a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1f40c:	3b02      	subs	r3, #2
   1f40e:	425a      	negs	r2, r3
   1f410:	4153      	adcs	r3, r2
   1f412:	b2db      	uxtb	r3, r3
}
   1f414:	0018      	movs	r0, r3
   1f416:	46bd      	mov	sp, r7
   1f418:	b002      	add	sp, #8
   1f41a:	bd80      	pop	{r7, pc}
   1f41c:	20004220 	.word	0x20004220
   1f420:	00061a80 	.word	0x00061a80
   1f424:	20004240 	.word	0x20004240
   1f428:	20004244 	.word	0x20004244
   1f42c:	0001f431 	.word	0x0001f431

0001f430 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1f430:	b5b0      	push	{r4, r5, r7, lr}
   1f432:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f434:	4b09      	ldr	r3, [pc, #36]	; (1f45c <sd_mmc_configure_slot+0x2c>)
   1f436:	7818      	ldrb	r0, [r3, #0]
   1f438:	4b09      	ldr	r3, [pc, #36]	; (1f460 <sd_mmc_configure_slot+0x30>)
   1f43a:	681b      	ldr	r3, [r3, #0]
   1f43c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f43e:	4b08      	ldr	r3, [pc, #32]	; (1f460 <sd_mmc_configure_slot+0x30>)
   1f440:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f442:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f444:	4b06      	ldr	r3, [pc, #24]	; (1f460 <sd_mmc_configure_slot+0x30>)
   1f446:	681b      	ldr	r3, [r3, #0]
   1f448:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f44a:	1e5c      	subs	r4, r3, #1
   1f44c:	41a3      	sbcs	r3, r4
   1f44e:	b2db      	uxtb	r3, r3
   1f450:	4c04      	ldr	r4, [pc, #16]	; (1f464 <sd_mmc_configure_slot+0x34>)
   1f452:	47a0      	blx	r4
}
   1f454:	46c0      	nop			; (mov r8, r8)
   1f456:	46bd      	mov	sp, r7
   1f458:	bdb0      	pop	{r4, r5, r7, pc}
   1f45a:	46c0      	nop			; (mov r8, r8)
   1f45c:	20004240 	.word	0x20004240
   1f460:	20004244 	.word	0x20004244
   1f464:	000205a9 	.word	0x000205a9

0001f468 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1f468:	b580      	push	{r7, lr}
   1f46a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1f46c:	4b05      	ldr	r3, [pc, #20]	; (1f484 <sd_mmc_deselect_slot+0x1c>)
   1f46e:	781b      	ldrb	r3, [r3, #0]
   1f470:	2b00      	cmp	r3, #0
   1f472:	d104      	bne.n	1f47e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1f474:	4b03      	ldr	r3, [pc, #12]	; (1f484 <sd_mmc_deselect_slot+0x1c>)
   1f476:	781b      	ldrb	r3, [r3, #0]
   1f478:	0018      	movs	r0, r3
   1f47a:	4b03      	ldr	r3, [pc, #12]	; (1f488 <sd_mmc_deselect_slot+0x20>)
   1f47c:	4798      	blx	r3
	}
}
   1f47e:	46c0      	nop			; (mov r8, r8)
   1f480:	46bd      	mov	sp, r7
   1f482:	bd80      	pop	{r7, pc}
   1f484:	20004240 	.word	0x20004240
   1f488:	00020631 	.word	0x00020631

0001f48c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1f48c:	b580      	push	{r7, lr}
   1f48e:	b082      	sub	sp, #8
   1f490:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1f492:	1dfb      	adds	r3, r7, #7
   1f494:	2200      	movs	r2, #0
   1f496:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1f498:	4b59      	ldr	r3, [pc, #356]	; (1f600 <sd_mmc_spi_card_init+0x174>)
   1f49a:	681b      	ldr	r3, [r3, #0]
   1f49c:	2201      	movs	r2, #1
   1f49e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1f4a0:	4b57      	ldr	r3, [pc, #348]	; (1f600 <sd_mmc_spi_card_init+0x174>)
   1f4a2:	681b      	ldr	r3, [r3, #0]
   1f4a4:	2200      	movs	r2, #0
   1f4a6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1f4a8:	4b55      	ldr	r3, [pc, #340]	; (1f600 <sd_mmc_spi_card_init+0x174>)
   1f4aa:	681b      	ldr	r3, [r3, #0]
   1f4ac:	2200      	movs	r2, #0
   1f4ae:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1f4b0:	4b54      	ldr	r3, [pc, #336]	; (1f604 <sd_mmc_spi_card_init+0x178>)
   1f4b2:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f4b4:	2388      	movs	r3, #136	; 0x88
   1f4b6:	015b      	lsls	r3, r3, #5
   1f4b8:	2100      	movs	r1, #0
   1f4ba:	0018      	movs	r0, r3
   1f4bc:	4b52      	ldr	r3, [pc, #328]	; (1f608 <sd_mmc_spi_card_init+0x17c>)
   1f4be:	4798      	blx	r3
   1f4c0:	0003      	movs	r3, r0
   1f4c2:	001a      	movs	r2, r3
   1f4c4:	2301      	movs	r3, #1
   1f4c6:	4053      	eors	r3, r2
   1f4c8:	b2db      	uxtb	r3, r3
   1f4ca:	2b00      	cmp	r3, #0
   1f4cc:	d001      	beq.n	1f4d2 <sd_mmc_spi_card_init+0x46>
		return false;
   1f4ce:	2300      	movs	r3, #0
   1f4d0:	e092      	b.n	1f5f8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1f4d2:	1dfb      	adds	r3, r7, #7
   1f4d4:	0018      	movs	r0, r3
   1f4d6:	4b4d      	ldr	r3, [pc, #308]	; (1f60c <sd_mmc_spi_card_init+0x180>)
   1f4d8:	4798      	blx	r3
   1f4da:	0003      	movs	r3, r0
   1f4dc:	001a      	movs	r2, r3
   1f4de:	2301      	movs	r3, #1
   1f4e0:	4053      	eors	r3, r2
   1f4e2:	b2db      	uxtb	r3, r3
   1f4e4:	2b00      	cmp	r3, #0
   1f4e6:	d001      	beq.n	1f4ec <sd_mmc_spi_card_init+0x60>
		return false;
   1f4e8:	2300      	movs	r3, #0
   1f4ea:	e085      	b.n	1f5f8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1f4ec:	4b48      	ldr	r3, [pc, #288]	; (1f610 <sd_mmc_spi_card_init+0x184>)
   1f4ee:	4798      	blx	r3
   1f4f0:	0003      	movs	r3, r0
   1f4f2:	001a      	movs	r2, r3
   1f4f4:	2301      	movs	r3, #1
   1f4f6:	4053      	eors	r3, r2
   1f4f8:	b2db      	uxtb	r3, r3
   1f4fa:	2b00      	cmp	r3, #0
   1f4fc:	d001      	beq.n	1f502 <sd_mmc_spi_card_init+0x76>
		return false;
   1f4fe:	2300      	movs	r3, #0
   1f500:	e07a      	b.n	1f5f8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f502:	4b3f      	ldr	r3, [pc, #252]	; (1f600 <sd_mmc_spi_card_init+0x174>)
   1f504:	681b      	ldr	r3, [r3, #0]
   1f506:	7adb      	ldrb	r3, [r3, #11]
   1f508:	001a      	movs	r2, r3
   1f50a:	2301      	movs	r3, #1
   1f50c:	4013      	ands	r3, r2
   1f50e:	d021      	beq.n	1f554 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1f510:	1dfb      	adds	r3, r7, #7
   1f512:	781b      	ldrb	r3, [r3, #0]
   1f514:	0018      	movs	r0, r3
   1f516:	4b3f      	ldr	r3, [pc, #252]	; (1f614 <sd_mmc_spi_card_init+0x188>)
   1f518:	4798      	blx	r3
   1f51a:	0003      	movs	r3, r0
   1f51c:	001a      	movs	r2, r3
   1f51e:	2301      	movs	r3, #1
   1f520:	4053      	eors	r3, r2
   1f522:	b2db      	uxtb	r3, r3
   1f524:	2b00      	cmp	r3, #0
   1f526:	d007      	beq.n	1f538 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1f528:	4b35      	ldr	r3, [pc, #212]	; (1f600 <sd_mmc_spi_card_init+0x174>)
   1f52a:	681b      	ldr	r3, [r3, #0]
   1f52c:	2202      	movs	r2, #2
   1f52e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1f530:	4b39      	ldr	r3, [pc, #228]	; (1f618 <sd_mmc_spi_card_init+0x18c>)
   1f532:	4798      	blx	r3
   1f534:	0003      	movs	r3, r0
   1f536:	e05f      	b.n	1f5f8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f538:	4b38      	ldr	r3, [pc, #224]	; (1f61c <sd_mmc_spi_card_init+0x190>)
   1f53a:	2100      	movs	r1, #0
   1f53c:	0018      	movs	r0, r3
   1f53e:	4b32      	ldr	r3, [pc, #200]	; (1f608 <sd_mmc_spi_card_init+0x17c>)
   1f540:	4798      	blx	r3
   1f542:	0003      	movs	r3, r0
   1f544:	001a      	movs	r2, r3
   1f546:	2301      	movs	r3, #1
   1f548:	4053      	eors	r3, r2
   1f54a:	b2db      	uxtb	r3, r3
   1f54c:	2b00      	cmp	r3, #0
   1f54e:	d001      	beq.n	1f554 <sd_mmc_spi_card_init+0xc8>
			return false;
   1f550:	2300      	movs	r3, #0
   1f552:	e051      	b.n	1f5f8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f554:	4b2a      	ldr	r3, [pc, #168]	; (1f600 <sd_mmc_spi_card_init+0x174>)
   1f556:	681b      	ldr	r3, [r3, #0]
   1f558:	7adb      	ldrb	r3, [r3, #11]
   1f55a:	001a      	movs	r2, r3
   1f55c:	2301      	movs	r3, #1
   1f55e:	4013      	ands	r3, r2
   1f560:	d017      	beq.n	1f592 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1f562:	4b2f      	ldr	r3, [pc, #188]	; (1f620 <sd_mmc_spi_card_init+0x194>)
   1f564:	4798      	blx	r3
   1f566:	0003      	movs	r3, r0
   1f568:	001a      	movs	r2, r3
   1f56a:	2301      	movs	r3, #1
   1f56c:	4053      	eors	r3, r2
   1f56e:	b2db      	uxtb	r3, r3
   1f570:	2b00      	cmp	r3, #0
   1f572:	d001      	beq.n	1f578 <sd_mmc_spi_card_init+0xec>
			return false;
   1f574:	2300      	movs	r3, #0
   1f576:	e03f      	b.n	1f5f8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1f578:	4b2a      	ldr	r3, [pc, #168]	; (1f624 <sd_mmc_spi_card_init+0x198>)
   1f57a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1f57c:	4b2a      	ldr	r3, [pc, #168]	; (1f628 <sd_mmc_spi_card_init+0x19c>)
   1f57e:	4798      	blx	r3
   1f580:	0003      	movs	r3, r0
   1f582:	001a      	movs	r2, r3
   1f584:	2301      	movs	r3, #1
   1f586:	4053      	eors	r3, r2
   1f588:	b2db      	uxtb	r3, r3
   1f58a:	2b00      	cmp	r3, #0
   1f58c:	d001      	beq.n	1f592 <sd_mmc_spi_card_init+0x106>
			return false;
   1f58e:	2300      	movs	r3, #0
   1f590:	e032      	b.n	1f5f8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f592:	4b1b      	ldr	r3, [pc, #108]	; (1f600 <sd_mmc_spi_card_init+0x174>)
   1f594:	681b      	ldr	r3, [r3, #0]
   1f596:	7adb      	ldrb	r3, [r3, #11]
   1f598:	001a      	movs	r2, r3
   1f59a:	2301      	movs	r3, #1
   1f59c:	4013      	ands	r3, r2
   1f59e:	d016      	beq.n	1f5ce <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1f5a0:	4b17      	ldr	r3, [pc, #92]	; (1f600 <sd_mmc_spi_card_init+0x174>)
   1f5a2:	681b      	ldr	r3, [r3, #0]
   1f5a4:	7adb      	ldrb	r3, [r3, #11]
   1f5a6:	001a      	movs	r2, r3
   1f5a8:	2308      	movs	r3, #8
   1f5aa:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f5ac:	d10f      	bne.n	1f5ce <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f5ae:	2380      	movs	r3, #128	; 0x80
   1f5b0:	009b      	lsls	r3, r3, #2
   1f5b2:	4a1e      	ldr	r2, [pc, #120]	; (1f62c <sd_mmc_spi_card_init+0x1a0>)
   1f5b4:	0019      	movs	r1, r3
   1f5b6:	0010      	movs	r0, r2
   1f5b8:	4b13      	ldr	r3, [pc, #76]	; (1f608 <sd_mmc_spi_card_init+0x17c>)
   1f5ba:	4798      	blx	r3
   1f5bc:	0003      	movs	r3, r0
   1f5be:	001a      	movs	r2, r3
   1f5c0:	2301      	movs	r3, #1
   1f5c2:	4053      	eors	r3, r2
   1f5c4:	b2db      	uxtb	r3, r3
   1f5c6:	2b00      	cmp	r3, #0
   1f5c8:	d001      	beq.n	1f5ce <sd_mmc_spi_card_init+0x142>
			return false;
   1f5ca:	2300      	movs	r3, #0
   1f5cc:	e014      	b.n	1f5f8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f5ce:	4b0c      	ldr	r3, [pc, #48]	; (1f600 <sd_mmc_spi_card_init+0x174>)
   1f5d0:	681b      	ldr	r3, [r3, #0]
   1f5d2:	7adb      	ldrb	r3, [r3, #11]
   1f5d4:	001a      	movs	r2, r3
   1f5d6:	2301      	movs	r3, #1
   1f5d8:	4013      	ands	r3, r2
   1f5da:	d00a      	beq.n	1f5f2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1f5dc:	4b14      	ldr	r3, [pc, #80]	; (1f630 <sd_mmc_spi_card_init+0x1a4>)
   1f5de:	4798      	blx	r3
   1f5e0:	0003      	movs	r3, r0
   1f5e2:	001a      	movs	r2, r3
   1f5e4:	2301      	movs	r3, #1
   1f5e6:	4053      	eors	r3, r2
   1f5e8:	b2db      	uxtb	r3, r3
   1f5ea:	2b00      	cmp	r3, #0
   1f5ec:	d001      	beq.n	1f5f2 <sd_mmc_spi_card_init+0x166>
			return false;
   1f5ee:	2300      	movs	r3, #0
   1f5f0:	e002      	b.n	1f5f8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f5f2:	4b10      	ldr	r3, [pc, #64]	; (1f634 <sd_mmc_spi_card_init+0x1a8>)
   1f5f4:	4798      	blx	r3
	return true;
   1f5f6:	2301      	movs	r3, #1
}
   1f5f8:	0018      	movs	r0, r3
   1f5fa:	46bd      	mov	sp, r7
   1f5fc:	b002      	add	sp, #8
   1f5fe:	bd80      	pop	{r7, pc}
   1f600:	20004244 	.word	0x20004244
   1f604:	00020675 	.word	0x00020675
   1f608:	000206c1 	.word	0x000206c1
   1f60c:	0001ede1 	.word	0x0001ede1
   1f610:	0001edd5 	.word	0x0001edd5
   1f614:	0001ecf1 	.word	0x0001ecf1
   1f618:	0001f639 	.word	0x0001f639
   1f61c:	0000113b 	.word	0x0000113b
   1f620:	0001ef7d 	.word	0x0001ef7d
   1f624:	0001f11d 	.word	0x0001f11d
   1f628:	0001f265 	.word	0x0001f265
   1f62c:	00001110 	.word	0x00001110
   1f630:	0001f209 	.word	0x0001f209
   1f634:	0001f431 	.word	0x0001f431

0001f638 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1f638:	b580      	push	{r7, lr}
   1f63a:	b082      	sub	sp, #8
   1f63c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f63e:	2388      	movs	r3, #136	; 0x88
   1f640:	015b      	lsls	r3, r3, #5
   1f642:	2100      	movs	r1, #0
   1f644:	0018      	movs	r0, r3
   1f646:	4b32      	ldr	r3, [pc, #200]	; (1f710 <sd_mmc_spi_install_mmc+0xd8>)
   1f648:	4798      	blx	r3
   1f64a:	0003      	movs	r3, r0
   1f64c:	001a      	movs	r2, r3
   1f64e:	2301      	movs	r3, #1
   1f650:	4053      	eors	r3, r2
   1f652:	b2db      	uxtb	r3, r3
   1f654:	2b00      	cmp	r3, #0
   1f656:	d001      	beq.n	1f65c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1f658:	2300      	movs	r3, #0
   1f65a:	e055      	b.n	1f708 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1f65c:	4b2d      	ldr	r3, [pc, #180]	; (1f714 <sd_mmc_spi_install_mmc+0xdc>)
   1f65e:	4798      	blx	r3
   1f660:	0003      	movs	r3, r0
   1f662:	001a      	movs	r2, r3
   1f664:	2301      	movs	r3, #1
   1f666:	4053      	eors	r3, r2
   1f668:	b2db      	uxtb	r3, r3
   1f66a:	2b00      	cmp	r3, #0
   1f66c:	d001      	beq.n	1f672 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1f66e:	2300      	movs	r3, #0
   1f670:	e04a      	b.n	1f708 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f672:	4b29      	ldr	r3, [pc, #164]	; (1f718 <sd_mmc_spi_install_mmc+0xe0>)
   1f674:	2100      	movs	r1, #0
   1f676:	0018      	movs	r0, r3
   1f678:	4b25      	ldr	r3, [pc, #148]	; (1f710 <sd_mmc_spi_install_mmc+0xd8>)
   1f67a:	4798      	blx	r3
   1f67c:	0003      	movs	r3, r0
   1f67e:	001a      	movs	r2, r3
   1f680:	2301      	movs	r3, #1
   1f682:	4053      	eors	r3, r2
   1f684:	b2db      	uxtb	r3, r3
   1f686:	2b00      	cmp	r3, #0
   1f688:	d001      	beq.n	1f68e <sd_mmc_spi_install_mmc+0x56>
		return false;
   1f68a:	2300      	movs	r3, #0
   1f68c:	e03c      	b.n	1f708 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1f68e:	4b23      	ldr	r3, [pc, #140]	; (1f71c <sd_mmc_spi_install_mmc+0xe4>)
   1f690:	4798      	blx	r3
   1f692:	0003      	movs	r3, r0
   1f694:	001a      	movs	r2, r3
   1f696:	2301      	movs	r3, #1
   1f698:	4053      	eors	r3, r2
   1f69a:	b2db      	uxtb	r3, r3
   1f69c:	2b00      	cmp	r3, #0
   1f69e:	d001      	beq.n	1f6a4 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1f6a0:	2300      	movs	r3, #0
   1f6a2:	e031      	b.n	1f708 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1f6a4:	4b1e      	ldr	r3, [pc, #120]	; (1f720 <sd_mmc_spi_install_mmc+0xe8>)
   1f6a6:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1f6a8:	4b1e      	ldr	r3, [pc, #120]	; (1f724 <sd_mmc_spi_install_mmc+0xec>)
   1f6aa:	681b      	ldr	r3, [r3, #0]
   1f6ac:	7b1b      	ldrb	r3, [r3, #12]
   1f6ae:	2b3f      	cmp	r3, #63	; 0x3f
   1f6b0:	d90c      	bls.n	1f6cc <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1f6b2:	1dfb      	adds	r3, r7, #7
   1f6b4:	0018      	movs	r0, r3
   1f6b6:	4b1c      	ldr	r3, [pc, #112]	; (1f728 <sd_mmc_spi_install_mmc+0xf0>)
   1f6b8:	4798      	blx	r3
   1f6ba:	0003      	movs	r3, r0
   1f6bc:	001a      	movs	r2, r3
   1f6be:	2301      	movs	r3, #1
   1f6c0:	4053      	eors	r3, r2
   1f6c2:	b2db      	uxtb	r3, r3
   1f6c4:	2b00      	cmp	r3, #0
   1f6c6:	d001      	beq.n	1f6cc <sd_mmc_spi_install_mmc+0x94>
			return false;
   1f6c8:	2300      	movs	r3, #0
   1f6ca:	e01d      	b.n	1f708 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f6cc:	2380      	movs	r3, #128	; 0x80
   1f6ce:	009b      	lsls	r3, r3, #2
   1f6d0:	4a16      	ldr	r2, [pc, #88]	; (1f72c <sd_mmc_spi_install_mmc+0xf4>)
   1f6d2:	0019      	movs	r1, r3
   1f6d4:	0010      	movs	r0, r2
   1f6d6:	4b0e      	ldr	r3, [pc, #56]	; (1f710 <sd_mmc_spi_install_mmc+0xd8>)
   1f6d8:	4798      	blx	r3
   1f6da:	0003      	movs	r3, r0
   1f6dc:	001a      	movs	r2, r3
   1f6de:	2301      	movs	r3, #1
   1f6e0:	4053      	eors	r3, r2
   1f6e2:	b2db      	uxtb	r3, r3
   1f6e4:	2b00      	cmp	r3, #0
   1f6e6:	d001      	beq.n	1f6ec <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1f6e8:	2300      	movs	r3, #0
   1f6ea:	e00d      	b.n	1f708 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1f6ec:	4b10      	ldr	r3, [pc, #64]	; (1f730 <sd_mmc_spi_install_mmc+0xf8>)
   1f6ee:	4798      	blx	r3
   1f6f0:	0003      	movs	r3, r0
   1f6f2:	001a      	movs	r2, r3
   1f6f4:	2301      	movs	r3, #1
   1f6f6:	4053      	eors	r3, r2
   1f6f8:	b2db      	uxtb	r3, r3
   1f6fa:	2b00      	cmp	r3, #0
   1f6fc:	d001      	beq.n	1f702 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1f6fe:	2300      	movs	r3, #0
   1f700:	e002      	b.n	1f708 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f702:	4b0c      	ldr	r3, [pc, #48]	; (1f734 <sd_mmc_spi_install_mmc+0xfc>)
   1f704:	4798      	blx	r3
	return true;
   1f706:	2301      	movs	r3, #1
}
   1f708:	0018      	movs	r0, r3
   1f70a:	46bd      	mov	sp, r7
   1f70c:	b002      	add	sp, #8
   1f70e:	bd80      	pop	{r7, pc}
   1f710:	000206c1 	.word	0x000206c1
   1f714:	0001ec45 	.word	0x0001ec45
   1f718:	0000113b 	.word	0x0000113b
   1f71c:	0001ef7d 	.word	0x0001ef7d
   1f720:	0001efed 	.word	0x0001efed
   1f724:	20004244 	.word	0x20004244
   1f728:	0001ee51 	.word	0x0001ee51
   1f72c:	00001110 	.word	0x00001110
   1f730:	0001f209 	.word	0x0001f209
   1f734:	0001f431 	.word	0x0001f431

0001f738 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1f738:	b580      	push	{r7, lr}
   1f73a:	b082      	sub	sp, #8
   1f73c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f73e:	1dfb      	adds	r3, r7, #7
   1f740:	2200      	movs	r2, #0
   1f742:	701a      	strb	r2, [r3, #0]
   1f744:	e00c      	b.n	1f760 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1f746:	1dfb      	adds	r3, r7, #7
   1f748:	781b      	ldrb	r3, [r3, #0]
   1f74a:	4a0c      	ldr	r2, [pc, #48]	; (1f77c <sd_mmc_init+0x44>)
   1f74c:	015b      	lsls	r3, r3, #5
   1f74e:	18d3      	adds	r3, r2, r3
   1f750:	330a      	adds	r3, #10
   1f752:	2204      	movs	r2, #4
   1f754:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f756:	1dfb      	adds	r3, r7, #7
   1f758:	781a      	ldrb	r2, [r3, #0]
   1f75a:	1dfb      	adds	r3, r7, #7
   1f75c:	3201      	adds	r2, #1
   1f75e:	701a      	strb	r2, [r3, #0]
   1f760:	1dfb      	adds	r3, r7, #7
   1f762:	781b      	ldrb	r3, [r3, #0]
   1f764:	2b00      	cmp	r3, #0
   1f766:	d0ee      	beq.n	1f746 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1f768:	4b05      	ldr	r3, [pc, #20]	; (1f780 <sd_mmc_init+0x48>)
   1f76a:	22ff      	movs	r2, #255	; 0xff
   1f76c:	701a      	strb	r2, [r3, #0]
	driver_init();
   1f76e:	4b05      	ldr	r3, [pc, #20]	; (1f784 <sd_mmc_init+0x4c>)
   1f770:	4798      	blx	r3
}
   1f772:	46c0      	nop			; (mov r8, r8)
   1f774:	46bd      	mov	sp, r7
   1f776:	b002      	add	sp, #8
   1f778:	bd80      	pop	{r7, pc}
   1f77a:	46c0      	nop			; (mov r8, r8)
   1f77c:	20004220 	.word	0x20004220
   1f780:	20004240 	.word	0x20004240
   1f784:	000204e1 	.word	0x000204e1

0001f788 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1f788:	b590      	push	{r4, r7, lr}
   1f78a:	b085      	sub	sp, #20
   1f78c:	af00      	add	r7, sp, #0
   1f78e:	0002      	movs	r2, r0
   1f790:	1dfb      	adds	r3, r7, #7
   1f792:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f794:	230f      	movs	r3, #15
   1f796:	18fc      	adds	r4, r7, r3
   1f798:	1dfb      	adds	r3, r7, #7
   1f79a:	781b      	ldrb	r3, [r3, #0]
   1f79c:	0018      	movs	r0, r3
   1f79e:	4b13      	ldr	r3, [pc, #76]	; (1f7ec <sd_mmc_check+0x64>)
   1f7a0:	4798      	blx	r3
   1f7a2:	0003      	movs	r3, r0
   1f7a4:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1f7a6:	230f      	movs	r3, #15
   1f7a8:	18fb      	adds	r3, r7, r3
   1f7aa:	781b      	ldrb	r3, [r3, #0]
   1f7ac:	2b01      	cmp	r3, #1
   1f7ae:	d005      	beq.n	1f7bc <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1f7b0:	4b0f      	ldr	r3, [pc, #60]	; (1f7f0 <sd_mmc_check+0x68>)
   1f7b2:	4798      	blx	r3
		return sd_mmc_err;
   1f7b4:	230f      	movs	r3, #15
   1f7b6:	18fb      	adds	r3, r7, r3
   1f7b8:	781b      	ldrb	r3, [r3, #0]
   1f7ba:	e012      	b.n	1f7e2 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1f7bc:	4b0d      	ldr	r3, [pc, #52]	; (1f7f4 <sd_mmc_check+0x6c>)
   1f7be:	4798      	blx	r3
   1f7c0:	1e03      	subs	r3, r0, #0
   1f7c2:	d007      	beq.n	1f7d4 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1f7c4:	4b0c      	ldr	r3, [pc, #48]	; (1f7f8 <sd_mmc_check+0x70>)
   1f7c6:	681b      	ldr	r3, [r3, #0]
   1f7c8:	2200      	movs	r2, #0
   1f7ca:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1f7cc:	4b08      	ldr	r3, [pc, #32]	; (1f7f0 <sd_mmc_check+0x68>)
   1f7ce:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1f7d0:	2301      	movs	r3, #1
   1f7d2:	e006      	b.n	1f7e2 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1f7d4:	4b08      	ldr	r3, [pc, #32]	; (1f7f8 <sd_mmc_check+0x70>)
   1f7d6:	681b      	ldr	r3, [r3, #0]
   1f7d8:	2203      	movs	r2, #3
   1f7da:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1f7dc:	4b04      	ldr	r3, [pc, #16]	; (1f7f0 <sd_mmc_check+0x68>)
   1f7de:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1f7e0:	2303      	movs	r3, #3
}
   1f7e2:	0018      	movs	r0, r3
   1f7e4:	46bd      	mov	sp, r7
   1f7e6:	b005      	add	sp, #20
   1f7e8:	bd90      	pop	{r4, r7, pc}
   1f7ea:	46c0      	nop			; (mov r8, r8)
   1f7ec:	0001f36d 	.word	0x0001f36d
   1f7f0:	0001f469 	.word	0x0001f469
   1f7f4:	0001f48d 	.word	0x0001f48d
   1f7f8:	20004244 	.word	0x20004244

0001f7fc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1f7fc:	b580      	push	{r7, lr}
   1f7fe:	b082      	sub	sp, #8
   1f800:	af00      	add	r7, sp, #0
   1f802:	0002      	movs	r2, r0
   1f804:	1dfb      	adds	r3, r7, #7
   1f806:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f808:	1dfb      	adds	r3, r7, #7
   1f80a:	781b      	ldrb	r3, [r3, #0]
   1f80c:	0018      	movs	r0, r3
   1f80e:	4b07      	ldr	r3, [pc, #28]	; (1f82c <sd_mmc_get_type+0x30>)
   1f810:	4798      	blx	r3
   1f812:	1e03      	subs	r3, r0, #0
   1f814:	d001      	beq.n	1f81a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1f816:	2300      	movs	r3, #0
   1f818:	e004      	b.n	1f824 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1f81a:	4b05      	ldr	r3, [pc, #20]	; (1f830 <sd_mmc_get_type+0x34>)
   1f81c:	4798      	blx	r3
	return sd_mmc_card->type;
   1f81e:	4b05      	ldr	r3, [pc, #20]	; (1f834 <sd_mmc_get_type+0x38>)
   1f820:	681b      	ldr	r3, [r3, #0]
   1f822:	7adb      	ldrb	r3, [r3, #11]
}
   1f824:	0018      	movs	r0, r3
   1f826:	46bd      	mov	sp, r7
   1f828:	b002      	add	sp, #8
   1f82a:	bd80      	pop	{r7, pc}
   1f82c:	0001f36d 	.word	0x0001f36d
   1f830:	0001f469 	.word	0x0001f469
   1f834:	20004244 	.word	0x20004244

0001f838 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1f838:	b580      	push	{r7, lr}
   1f83a:	b082      	sub	sp, #8
   1f83c:	af00      	add	r7, sp, #0
   1f83e:	0002      	movs	r2, r0
   1f840:	1dfb      	adds	r3, r7, #7
   1f842:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f844:	1dfb      	adds	r3, r7, #7
   1f846:	781b      	ldrb	r3, [r3, #0]
   1f848:	0018      	movs	r0, r3
   1f84a:	4b07      	ldr	r3, [pc, #28]	; (1f868 <sd_mmc_get_capacity+0x30>)
   1f84c:	4798      	blx	r3
   1f84e:	1e03      	subs	r3, r0, #0
   1f850:	d001      	beq.n	1f856 <sd_mmc_get_capacity+0x1e>
		return 0;
   1f852:	2300      	movs	r3, #0
   1f854:	e004      	b.n	1f860 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1f856:	4b05      	ldr	r3, [pc, #20]	; (1f86c <sd_mmc_get_capacity+0x34>)
   1f858:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1f85a:	4b05      	ldr	r3, [pc, #20]	; (1f870 <sd_mmc_get_capacity+0x38>)
   1f85c:	681b      	ldr	r3, [r3, #0]
   1f85e:	685b      	ldr	r3, [r3, #4]
}
   1f860:	0018      	movs	r0, r3
   1f862:	46bd      	mov	sp, r7
   1f864:	b002      	add	sp, #8
   1f866:	bd80      	pop	{r7, pc}
   1f868:	0001f36d 	.word	0x0001f36d
   1f86c:	0001f469 	.word	0x0001f469
   1f870:	20004244 	.word	0x20004244

0001f874 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1f874:	b580      	push	{r7, lr}
   1f876:	b082      	sub	sp, #8
   1f878:	af00      	add	r7, sp, #0
   1f87a:	0002      	movs	r2, r0
   1f87c:	1dfb      	adds	r3, r7, #7
   1f87e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1f880:	2300      	movs	r3, #0
}
   1f882:	0018      	movs	r0, r3
   1f884:	46bd      	mov	sp, r7
   1f886:	b002      	add	sp, #8
   1f888:	bd80      	pop	{r7, pc}
	...

0001f88c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f88c:	b590      	push	{r4, r7, lr}
   1f88e:	b089      	sub	sp, #36	; 0x24
   1f890:	af02      	add	r7, sp, #8
   1f892:	6039      	str	r1, [r7, #0]
   1f894:	0011      	movs	r1, r2
   1f896:	1dfb      	adds	r3, r7, #7
   1f898:	1c02      	adds	r2, r0, #0
   1f89a:	701a      	strb	r2, [r3, #0]
   1f89c:	1d3b      	adds	r3, r7, #4
   1f89e:	1c0a      	adds	r2, r1, #0
   1f8a0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f8a2:	230f      	movs	r3, #15
   1f8a4:	18fc      	adds	r4, r7, r3
   1f8a6:	1dfb      	adds	r3, r7, #7
   1f8a8:	781b      	ldrb	r3, [r3, #0]
   1f8aa:	0018      	movs	r0, r3
   1f8ac:	4b29      	ldr	r3, [pc, #164]	; (1f954 <sd_mmc_init_read_blocks+0xc8>)
   1f8ae:	4798      	blx	r3
   1f8b0:	0003      	movs	r3, r0
   1f8b2:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f8b4:	230f      	movs	r3, #15
   1f8b6:	18fb      	adds	r3, r7, r3
   1f8b8:	781b      	ldrb	r3, [r3, #0]
   1f8ba:	2b00      	cmp	r3, #0
   1f8bc:	d003      	beq.n	1f8c6 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1f8be:	230f      	movs	r3, #15
   1f8c0:	18fb      	adds	r3, r7, r3
   1f8c2:	781b      	ldrb	r3, [r3, #0]
   1f8c4:	e041      	b.n	1f94a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1f8c6:	4b24      	ldr	r3, [pc, #144]	; (1f958 <sd_mmc_init_read_blocks+0xcc>)
   1f8c8:	4798      	blx	r3
   1f8ca:	0003      	movs	r3, r0
   1f8cc:	001a      	movs	r2, r3
   1f8ce:	2301      	movs	r3, #1
   1f8d0:	4053      	eors	r3, r2
   1f8d2:	b2db      	uxtb	r3, r3
   1f8d4:	2b00      	cmp	r3, #0
   1f8d6:	d003      	beq.n	1f8e0 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1f8d8:	4b20      	ldr	r3, [pc, #128]	; (1f95c <sd_mmc_init_read_blocks+0xd0>)
   1f8da:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f8dc:	2305      	movs	r3, #5
   1f8de:	e034      	b.n	1f94a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1f8e0:	1d3b      	adds	r3, r7, #4
   1f8e2:	881b      	ldrh	r3, [r3, #0]
   1f8e4:	2b01      	cmp	r3, #1
   1f8e6:	d902      	bls.n	1f8ee <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1f8e8:	4b1d      	ldr	r3, [pc, #116]	; (1f960 <sd_mmc_init_read_blocks+0xd4>)
   1f8ea:	617b      	str	r3, [r7, #20]
   1f8ec:	e001      	b.n	1f8f2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1f8ee:	4b1d      	ldr	r3, [pc, #116]	; (1f964 <sd_mmc_init_read_blocks+0xd8>)
   1f8f0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f8f2:	4b1d      	ldr	r3, [pc, #116]	; (1f968 <sd_mmc_init_read_blocks+0xdc>)
   1f8f4:	681b      	ldr	r3, [r3, #0]
   1f8f6:	7adb      	ldrb	r3, [r3, #11]
   1f8f8:	001a      	movs	r2, r3
   1f8fa:	2308      	movs	r3, #8
   1f8fc:	4013      	ands	r3, r2
   1f8fe:	d002      	beq.n	1f906 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1f900:	683b      	ldr	r3, [r7, #0]
   1f902:	613b      	str	r3, [r7, #16]
   1f904:	e002      	b.n	1f90c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f906:	683b      	ldr	r3, [r7, #0]
   1f908:	025b      	lsls	r3, r3, #9
   1f90a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f90c:	1d3b      	adds	r3, r7, #4
   1f90e:	881c      	ldrh	r4, [r3, #0]
   1f910:	2380      	movs	r3, #128	; 0x80
   1f912:	009a      	lsls	r2, r3, #2
   1f914:	6939      	ldr	r1, [r7, #16]
   1f916:	6978      	ldr	r0, [r7, #20]
   1f918:	2301      	movs	r3, #1
   1f91a:	9300      	str	r3, [sp, #0]
   1f91c:	0023      	movs	r3, r4
   1f91e:	4c13      	ldr	r4, [pc, #76]	; (1f96c <sd_mmc_init_read_blocks+0xe0>)
   1f920:	47a0      	blx	r4
   1f922:	0003      	movs	r3, r0
   1f924:	001a      	movs	r2, r3
   1f926:	2301      	movs	r3, #1
   1f928:	4053      	eors	r3, r2
   1f92a:	b2db      	uxtb	r3, r3
   1f92c:	2b00      	cmp	r3, #0
   1f92e:	d003      	beq.n	1f938 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1f930:	4b0a      	ldr	r3, [pc, #40]	; (1f95c <sd_mmc_init_read_blocks+0xd0>)
   1f932:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f934:	2305      	movs	r3, #5
   1f936:	e008      	b.n	1f94a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1f938:	4b0d      	ldr	r3, [pc, #52]	; (1f970 <sd_mmc_init_read_blocks+0xe4>)
   1f93a:	1d3a      	adds	r2, r7, #4
   1f93c:	8812      	ldrh	r2, [r2, #0]
   1f93e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1f940:	4b0c      	ldr	r3, [pc, #48]	; (1f974 <sd_mmc_init_read_blocks+0xe8>)
   1f942:	1d3a      	adds	r2, r7, #4
   1f944:	8812      	ldrh	r2, [r2, #0]
   1f946:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f948:	2300      	movs	r3, #0
}
   1f94a:	0018      	movs	r0, r3
   1f94c:	46bd      	mov	sp, r7
   1f94e:	b007      	add	sp, #28
   1f950:	bd90      	pop	{r4, r7, pc}
   1f952:	46c0      	nop			; (mov r8, r8)
   1f954:	0001f36d 	.word	0x0001f36d
   1f958:	0001f209 	.word	0x0001f209
   1f95c:	0001f469 	.word	0x0001f469
   1f960:	00101112 	.word	0x00101112
   1f964:	00081111 	.word	0x00081111
   1f968:	20004244 	.word	0x20004244
   1f96c:	000206e9 	.word	0x000206e9
   1f970:	2000424a 	.word	0x2000424a
   1f974:	20004248 	.word	0x20004248

0001f978 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1f978:	b580      	push	{r7, lr}
   1f97a:	b082      	sub	sp, #8
   1f97c:	af00      	add	r7, sp, #0
   1f97e:	6078      	str	r0, [r7, #4]
   1f980:	000a      	movs	r2, r1
   1f982:	1cbb      	adds	r3, r7, #2
   1f984:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1f986:	1cbb      	adds	r3, r7, #2
   1f988:	881a      	ldrh	r2, [r3, #0]
   1f98a:	687b      	ldr	r3, [r7, #4]
   1f98c:	0011      	movs	r1, r2
   1f98e:	0018      	movs	r0, r3
   1f990:	4b0d      	ldr	r3, [pc, #52]	; (1f9c8 <sd_mmc_start_read_blocks+0x50>)
   1f992:	4798      	blx	r3
   1f994:	0003      	movs	r3, r0
   1f996:	001a      	movs	r2, r3
   1f998:	2301      	movs	r3, #1
   1f99a:	4053      	eors	r3, r2
   1f99c:	b2db      	uxtb	r3, r3
   1f99e:	2b00      	cmp	r3, #0
   1f9a0:	d004      	beq.n	1f9ac <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1f9a2:	4b0a      	ldr	r3, [pc, #40]	; (1f9cc <sd_mmc_start_read_blocks+0x54>)
   1f9a4:	2200      	movs	r2, #0
   1f9a6:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1f9a8:	2305      	movs	r3, #5
   1f9aa:	e008      	b.n	1f9be <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1f9ac:	4b07      	ldr	r3, [pc, #28]	; (1f9cc <sd_mmc_start_read_blocks+0x54>)
   1f9ae:	881a      	ldrh	r2, [r3, #0]
   1f9b0:	1cbb      	adds	r3, r7, #2
   1f9b2:	881b      	ldrh	r3, [r3, #0]
   1f9b4:	1ad3      	subs	r3, r2, r3
   1f9b6:	b29a      	uxth	r2, r3
   1f9b8:	4b04      	ldr	r3, [pc, #16]	; (1f9cc <sd_mmc_start_read_blocks+0x54>)
   1f9ba:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f9bc:	2300      	movs	r3, #0
}
   1f9be:	0018      	movs	r0, r3
   1f9c0:	46bd      	mov	sp, r7
   1f9c2:	b002      	add	sp, #8
   1f9c4:	bd80      	pop	{r7, pc}
   1f9c6:	46c0      	nop			; (mov r8, r8)
   1f9c8:	000209b9 	.word	0x000209b9
   1f9cc:	2000424a 	.word	0x2000424a

0001f9d0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1f9d0:	b580      	push	{r7, lr}
   1f9d2:	b082      	sub	sp, #8
   1f9d4:	af00      	add	r7, sp, #0
   1f9d6:	0002      	movs	r2, r0
   1f9d8:	1dfb      	adds	r3, r7, #7
   1f9da:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1f9dc:	4b1c      	ldr	r3, [pc, #112]	; (1fa50 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1f9de:	4798      	blx	r3
   1f9e0:	0003      	movs	r3, r0
   1f9e2:	001a      	movs	r2, r3
   1f9e4:	2301      	movs	r3, #1
   1f9e6:	4053      	eors	r3, r2
   1f9e8:	b2db      	uxtb	r3, r3
   1f9ea:	2b00      	cmp	r3, #0
   1f9ec:	d001      	beq.n	1f9f2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1f9ee:	2305      	movs	r3, #5
   1f9f0:	e029      	b.n	1fa46 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1f9f2:	1dfb      	adds	r3, r7, #7
   1f9f4:	781b      	ldrb	r3, [r3, #0]
   1f9f6:	2b00      	cmp	r3, #0
   1f9f8:	d003      	beq.n	1fa02 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1f9fa:	4b16      	ldr	r3, [pc, #88]	; (1fa54 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1f9fc:	2200      	movs	r2, #0
   1f9fe:	801a      	strh	r2, [r3, #0]
   1fa00:	e005      	b.n	1fa0e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1fa02:	4b14      	ldr	r3, [pc, #80]	; (1fa54 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fa04:	881b      	ldrh	r3, [r3, #0]
   1fa06:	2b00      	cmp	r3, #0
   1fa08:	d001      	beq.n	1fa0e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1fa0a:	2300      	movs	r3, #0
   1fa0c:	e01b      	b.n	1fa46 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1fa0e:	4b12      	ldr	r3, [pc, #72]	; (1fa58 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1fa10:	881b      	ldrh	r3, [r3, #0]
   1fa12:	2b01      	cmp	r3, #1
   1fa14:	d103      	bne.n	1fa1e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1fa16:	4b11      	ldr	r3, [pc, #68]	; (1fa5c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fa18:	4798      	blx	r3
		return SD_MMC_OK;
   1fa1a:	2300      	movs	r3, #0
   1fa1c:	e013      	b.n	1fa46 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1fa1e:	4b10      	ldr	r3, [pc, #64]	; (1fa60 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fa20:	2100      	movs	r1, #0
   1fa22:	0018      	movs	r0, r3
   1fa24:	4b0f      	ldr	r3, [pc, #60]	; (1fa64 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fa26:	4798      	blx	r3
   1fa28:	0003      	movs	r3, r0
   1fa2a:	001a      	movs	r2, r3
   1fa2c:	2301      	movs	r3, #1
   1fa2e:	4053      	eors	r3, r2
   1fa30:	b2db      	uxtb	r3, r3
   1fa32:	2b00      	cmp	r3, #0
   1fa34:	d004      	beq.n	1fa40 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1fa36:	4b0a      	ldr	r3, [pc, #40]	; (1fa60 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fa38:	2100      	movs	r1, #0
   1fa3a:	0018      	movs	r0, r3
   1fa3c:	4b09      	ldr	r3, [pc, #36]	; (1fa64 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fa3e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1fa40:	4b06      	ldr	r3, [pc, #24]	; (1fa5c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fa42:	4798      	blx	r3
	return SD_MMC_OK;
   1fa44:	2300      	movs	r3, #0
}
   1fa46:	0018      	movs	r0, r3
   1fa48:	46bd      	mov	sp, r7
   1fa4a:	b002      	add	sp, #8
   1fa4c:	bd80      	pop	{r7, pc}
   1fa4e:	46c0      	nop			; (mov r8, r8)
   1fa50:	00020a5d 	.word	0x00020a5d
   1fa54:	2000424a 	.word	0x2000424a
   1fa58:	20004248 	.word	0x20004248
   1fa5c:	0001f469 	.word	0x0001f469
   1fa60:	0000310c 	.word	0x0000310c
   1fa64:	000206c1 	.word	0x000206c1

0001fa68 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1fa68:	b590      	push	{r4, r7, lr}
   1fa6a:	b089      	sub	sp, #36	; 0x24
   1fa6c:	af02      	add	r7, sp, #8
   1fa6e:	6039      	str	r1, [r7, #0]
   1fa70:	0011      	movs	r1, r2
   1fa72:	1dfb      	adds	r3, r7, #7
   1fa74:	1c02      	adds	r2, r0, #0
   1fa76:	701a      	strb	r2, [r3, #0]
   1fa78:	1d3b      	adds	r3, r7, #4
   1fa7a:	1c0a      	adds	r2, r1, #0
   1fa7c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1fa7e:	230f      	movs	r3, #15
   1fa80:	18fc      	adds	r4, r7, r3
   1fa82:	1dfb      	adds	r3, r7, #7
   1fa84:	781b      	ldrb	r3, [r3, #0]
   1fa86:	0018      	movs	r0, r3
   1fa88:	4b28      	ldr	r3, [pc, #160]	; (1fb2c <sd_mmc_init_write_blocks+0xc4>)
   1fa8a:	4798      	blx	r3
   1fa8c:	0003      	movs	r3, r0
   1fa8e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1fa90:	230f      	movs	r3, #15
   1fa92:	18fb      	adds	r3, r7, r3
   1fa94:	781b      	ldrb	r3, [r3, #0]
   1fa96:	2b00      	cmp	r3, #0
   1fa98:	d003      	beq.n	1faa2 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1fa9a:	230f      	movs	r3, #15
   1fa9c:	18fb      	adds	r3, r7, r3
   1fa9e:	781b      	ldrb	r3, [r3, #0]
   1faa0:	e03f      	b.n	1fb22 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1faa2:	1dfb      	adds	r3, r7, #7
   1faa4:	781b      	ldrb	r3, [r3, #0]
   1faa6:	0018      	movs	r0, r3
   1faa8:	4b21      	ldr	r3, [pc, #132]	; (1fb30 <sd_mmc_init_write_blocks+0xc8>)
   1faaa:	4798      	blx	r3
   1faac:	1e03      	subs	r3, r0, #0
   1faae:	d003      	beq.n	1fab8 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1fab0:	4b20      	ldr	r3, [pc, #128]	; (1fb34 <sd_mmc_init_write_blocks+0xcc>)
   1fab2:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1fab4:	2307      	movs	r3, #7
   1fab6:	e034      	b.n	1fb22 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1fab8:	1d3b      	adds	r3, r7, #4
   1faba:	881b      	ldrh	r3, [r3, #0]
   1fabc:	2b01      	cmp	r3, #1
   1fabe:	d902      	bls.n	1fac6 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1fac0:	4b1d      	ldr	r3, [pc, #116]	; (1fb38 <sd_mmc_init_write_blocks+0xd0>)
   1fac2:	617b      	str	r3, [r7, #20]
   1fac4:	e001      	b.n	1faca <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1fac6:	4b1d      	ldr	r3, [pc, #116]	; (1fb3c <sd_mmc_init_write_blocks+0xd4>)
   1fac8:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1faca:	4b1d      	ldr	r3, [pc, #116]	; (1fb40 <sd_mmc_init_write_blocks+0xd8>)
   1facc:	681b      	ldr	r3, [r3, #0]
   1face:	7adb      	ldrb	r3, [r3, #11]
   1fad0:	001a      	movs	r2, r3
   1fad2:	2308      	movs	r3, #8
   1fad4:	4013      	ands	r3, r2
   1fad6:	d002      	beq.n	1fade <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1fad8:	683b      	ldr	r3, [r7, #0]
   1fada:	613b      	str	r3, [r7, #16]
   1fadc:	e002      	b.n	1fae4 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1fade:	683b      	ldr	r3, [r7, #0]
   1fae0:	025b      	lsls	r3, r3, #9
   1fae2:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1fae4:	1d3b      	adds	r3, r7, #4
   1fae6:	881c      	ldrh	r4, [r3, #0]
   1fae8:	2380      	movs	r3, #128	; 0x80
   1faea:	009a      	lsls	r2, r3, #2
   1faec:	6939      	ldr	r1, [r7, #16]
   1faee:	6978      	ldr	r0, [r7, #20]
   1faf0:	2301      	movs	r3, #1
   1faf2:	9300      	str	r3, [sp, #0]
   1faf4:	0023      	movs	r3, r4
   1faf6:	4c13      	ldr	r4, [pc, #76]	; (1fb44 <sd_mmc_init_write_blocks+0xdc>)
   1faf8:	47a0      	blx	r4
   1fafa:	0003      	movs	r3, r0
   1fafc:	001a      	movs	r2, r3
   1fafe:	2301      	movs	r3, #1
   1fb00:	4053      	eors	r3, r2
   1fb02:	b2db      	uxtb	r3, r3
   1fb04:	2b00      	cmp	r3, #0
   1fb06:	d003      	beq.n	1fb10 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1fb08:	4b0a      	ldr	r3, [pc, #40]	; (1fb34 <sd_mmc_init_write_blocks+0xcc>)
   1fb0a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fb0c:	2305      	movs	r3, #5
   1fb0e:	e008      	b.n	1fb22 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1fb10:	4b0d      	ldr	r3, [pc, #52]	; (1fb48 <sd_mmc_init_write_blocks+0xe0>)
   1fb12:	1d3a      	adds	r2, r7, #4
   1fb14:	8812      	ldrh	r2, [r2, #0]
   1fb16:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1fb18:	4b0c      	ldr	r3, [pc, #48]	; (1fb4c <sd_mmc_init_write_blocks+0xe4>)
   1fb1a:	1d3a      	adds	r2, r7, #4
   1fb1c:	8812      	ldrh	r2, [r2, #0]
   1fb1e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fb20:	2300      	movs	r3, #0
}
   1fb22:	0018      	movs	r0, r3
   1fb24:	46bd      	mov	sp, r7
   1fb26:	b007      	add	sp, #28
   1fb28:	bd90      	pop	{r4, r7, pc}
   1fb2a:	46c0      	nop			; (mov r8, r8)
   1fb2c:	0001f36d 	.word	0x0001f36d
   1fb30:	0001f875 	.word	0x0001f875
   1fb34:	0001f469 	.word	0x0001f469
   1fb38:	00109119 	.word	0x00109119
   1fb3c:	00089118 	.word	0x00089118
   1fb40:	20004244 	.word	0x20004244
   1fb44:	000206e9 	.word	0x000206e9
   1fb48:	2000424a 	.word	0x2000424a
   1fb4c:	20004248 	.word	0x20004248

0001fb50 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1fb50:	b580      	push	{r7, lr}
   1fb52:	b082      	sub	sp, #8
   1fb54:	af00      	add	r7, sp, #0
   1fb56:	6078      	str	r0, [r7, #4]
   1fb58:	000a      	movs	r2, r1
   1fb5a:	1cbb      	adds	r3, r7, #2
   1fb5c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1fb5e:	1cbb      	adds	r3, r7, #2
   1fb60:	881a      	ldrh	r2, [r3, #0]
   1fb62:	687b      	ldr	r3, [r7, #4]
   1fb64:	0011      	movs	r1, r2
   1fb66:	0018      	movs	r0, r3
   1fb68:	4b0d      	ldr	r3, [pc, #52]	; (1fba0 <sd_mmc_start_write_blocks+0x50>)
   1fb6a:	4798      	blx	r3
   1fb6c:	0003      	movs	r3, r0
   1fb6e:	001a      	movs	r2, r3
   1fb70:	2301      	movs	r3, #1
   1fb72:	4053      	eors	r3, r2
   1fb74:	b2db      	uxtb	r3, r3
   1fb76:	2b00      	cmp	r3, #0
   1fb78:	d004      	beq.n	1fb84 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1fb7a:	4b0a      	ldr	r3, [pc, #40]	; (1fba4 <sd_mmc_start_write_blocks+0x54>)
   1fb7c:	2200      	movs	r2, #0
   1fb7e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1fb80:	2305      	movs	r3, #5
   1fb82:	e008      	b.n	1fb96 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1fb84:	4b07      	ldr	r3, [pc, #28]	; (1fba4 <sd_mmc_start_write_blocks+0x54>)
   1fb86:	881a      	ldrh	r2, [r3, #0]
   1fb88:	1cbb      	adds	r3, r7, #2
   1fb8a:	881b      	ldrh	r3, [r3, #0]
   1fb8c:	1ad3      	subs	r3, r2, r3
   1fb8e:	b29a      	uxth	r2, r3
   1fb90:	4b04      	ldr	r3, [pc, #16]	; (1fba4 <sd_mmc_start_write_blocks+0x54>)
   1fb92:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fb94:	2300      	movs	r3, #0
}
   1fb96:	0018      	movs	r0, r3
   1fb98:	46bd      	mov	sp, r7
   1fb9a:	b002      	add	sp, #8
   1fb9c:	bd80      	pop	{r7, pc}
   1fb9e:	46c0      	nop			; (mov r8, r8)
   1fba0:	00020a69 	.word	0x00020a69
   1fba4:	2000424a 	.word	0x2000424a

0001fba8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1fba8:	b580      	push	{r7, lr}
   1fbaa:	b082      	sub	sp, #8
   1fbac:	af00      	add	r7, sp, #0
   1fbae:	0002      	movs	r2, r0
   1fbb0:	1dfb      	adds	r3, r7, #7
   1fbb2:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1fbb4:	4b13      	ldr	r3, [pc, #76]	; (1fc04 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1fbb6:	4798      	blx	r3
   1fbb8:	0003      	movs	r3, r0
   1fbba:	001a      	movs	r2, r3
   1fbbc:	2301      	movs	r3, #1
   1fbbe:	4053      	eors	r3, r2
   1fbc0:	b2db      	uxtb	r3, r3
   1fbc2:	2b00      	cmp	r3, #0
   1fbc4:	d001      	beq.n	1fbca <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1fbc6:	2305      	movs	r3, #5
   1fbc8:	e018      	b.n	1fbfc <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1fbca:	1dfb      	adds	r3, r7, #7
   1fbcc:	781b      	ldrb	r3, [r3, #0]
   1fbce:	2b00      	cmp	r3, #0
   1fbd0:	d003      	beq.n	1fbda <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1fbd2:	4b0d      	ldr	r3, [pc, #52]	; (1fc08 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1fbd4:	2200      	movs	r2, #0
   1fbd6:	801a      	strh	r2, [r3, #0]
   1fbd8:	e005      	b.n	1fbe6 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1fbda:	4b0b      	ldr	r3, [pc, #44]	; (1fc08 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1fbdc:	881b      	ldrh	r3, [r3, #0]
   1fbde:	2b00      	cmp	r3, #0
   1fbe0:	d001      	beq.n	1fbe6 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1fbe2:	2300      	movs	r3, #0
   1fbe4:	e00a      	b.n	1fbfc <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1fbe6:	4b09      	ldr	r3, [pc, #36]	; (1fc0c <sd_mmc_wait_end_of_write_blocks+0x64>)
   1fbe8:	881b      	ldrh	r3, [r3, #0]
   1fbea:	2b01      	cmp	r3, #1
   1fbec:	d103      	bne.n	1fbf6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1fbee:	4b08      	ldr	r3, [pc, #32]	; (1fc10 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1fbf0:	4798      	blx	r3
		return SD_MMC_OK;
   1fbf2:	2300      	movs	r3, #0
   1fbf4:	e002      	b.n	1fbfc <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1fbf6:	4b06      	ldr	r3, [pc, #24]	; (1fc10 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1fbf8:	4798      	blx	r3
	return SD_MMC_OK;
   1fbfa:	2300      	movs	r3, #0
}
   1fbfc:	0018      	movs	r0, r3
   1fbfe:	46bd      	mov	sp, r7
   1fc00:	b002      	add	sp, #8
   1fc02:	bd80      	pop	{r7, pc}
   1fc04:	00020b29 	.word	0x00020b29
   1fc08:	2000424a 	.word	0x2000424a
   1fc0c:	20004248 	.word	0x20004248
   1fc10:	0001f469 	.word	0x0001f469

0001fc14 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1fc14:	b580      	push	{r7, lr}
   1fc16:	b082      	sub	sp, #8
   1fc18:	af00      	add	r7, sp, #0
   1fc1a:	0002      	movs	r2, r0
   1fc1c:	1dfb      	adds	r3, r7, #7
   1fc1e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1fc20:	1dfb      	adds	r3, r7, #7
   1fc22:	781b      	ldrb	r3, [r3, #0]
   1fc24:	0018      	movs	r0, r3
   1fc26:	4b16      	ldr	r3, [pc, #88]	; (1fc80 <sd_mmc_test_unit_ready+0x6c>)
   1fc28:	4798      	blx	r3
   1fc2a:	0003      	movs	r3, r0
   1fc2c:	2b01      	cmp	r3, #1
   1fc2e:	d019      	beq.n	1fc64 <sd_mmc_test_unit_ready+0x50>
   1fc30:	2b02      	cmp	r3, #2
   1fc32:	d019      	beq.n	1fc68 <sd_mmc_test_unit_ready+0x54>
   1fc34:	2b00      	cmp	r3, #0
   1fc36:	d11e      	bne.n	1fc76 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1fc38:	1dfb      	adds	r3, r7, #7
   1fc3a:	781b      	ldrb	r3, [r3, #0]
   1fc3c:	4a11      	ldr	r2, [pc, #68]	; (1fc84 <sd_mmc_test_unit_ready+0x70>)
   1fc3e:	5cd3      	ldrb	r3, [r2, r3]
   1fc40:	2b00      	cmp	r3, #0
   1fc42:	d001      	beq.n	1fc48 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1fc44:	2302      	movs	r3, #2
   1fc46:	e017      	b.n	1fc78 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1fc48:	1dfb      	adds	r3, r7, #7
   1fc4a:	781b      	ldrb	r3, [r3, #0]
   1fc4c:	0018      	movs	r0, r3
   1fc4e:	4b0e      	ldr	r3, [pc, #56]	; (1fc88 <sd_mmc_test_unit_ready+0x74>)
   1fc50:	4798      	blx	r3
   1fc52:	0003      	movs	r3, r0
   1fc54:	001a      	movs	r2, r3
   1fc56:	2303      	movs	r3, #3
   1fc58:	4013      	ands	r3, r2
   1fc5a:	d001      	beq.n	1fc60 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1fc5c:	2300      	movs	r3, #0
   1fc5e:	e00b      	b.n	1fc78 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1fc60:	2302      	movs	r3, #2
   1fc62:	e009      	b.n	1fc78 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1fc64:	2303      	movs	r3, #3
   1fc66:	e007      	b.n	1fc78 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1fc68:	1dfb      	adds	r3, r7, #7
   1fc6a:	781b      	ldrb	r3, [r3, #0]
   1fc6c:	4a05      	ldr	r2, [pc, #20]	; (1fc84 <sd_mmc_test_unit_ready+0x70>)
   1fc6e:	2100      	movs	r1, #0
   1fc70:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1fc72:	2302      	movs	r3, #2
   1fc74:	e000      	b.n	1fc78 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1fc76:	2301      	movs	r3, #1
	}
}
   1fc78:	0018      	movs	r0, r3
   1fc7a:	46bd      	mov	sp, r7
   1fc7c:	b002      	add	sp, #8
   1fc7e:	bd80      	pop	{r7, pc}
   1fc80:	0001f789 	.word	0x0001f789
   1fc84:	2000424c 	.word	0x2000424c
   1fc88:	0001f7fd 	.word	0x0001f7fd

0001fc8c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1fc8c:	b580      	push	{r7, lr}
   1fc8e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1fc90:	2000      	movs	r0, #0
   1fc92:	4b03      	ldr	r3, [pc, #12]	; (1fca0 <sd_mmc_test_unit_ready_0+0x14>)
   1fc94:	4798      	blx	r3
   1fc96:	0003      	movs	r3, r0
}
   1fc98:	0018      	movs	r0, r3
   1fc9a:	46bd      	mov	sp, r7
   1fc9c:	bd80      	pop	{r7, pc}
   1fc9e:	46c0      	nop			; (mov r8, r8)
   1fca0:	0001fc15 	.word	0x0001fc15

0001fca4 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1fca4:	b580      	push	{r7, lr}
   1fca6:	b082      	sub	sp, #8
   1fca8:	af00      	add	r7, sp, #0
   1fcaa:	0002      	movs	r2, r0
   1fcac:	6039      	str	r1, [r7, #0]
   1fcae:	1dfb      	adds	r3, r7, #7
   1fcb0:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1fcb2:	1dfb      	adds	r3, r7, #7
   1fcb4:	781b      	ldrb	r3, [r3, #0]
   1fcb6:	0018      	movs	r0, r3
   1fcb8:	4b08      	ldr	r3, [pc, #32]	; (1fcdc <sd_mmc_read_capacity+0x38>)
   1fcba:	4798      	blx	r3
   1fcbc:	0003      	movs	r3, r0
   1fcbe:	005b      	lsls	r3, r3, #1
   1fcc0:	1e5a      	subs	r2, r3, #1
   1fcc2:	683b      	ldr	r3, [r7, #0]
   1fcc4:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1fcc6:	1dfb      	adds	r3, r7, #7
   1fcc8:	781b      	ldrb	r3, [r3, #0]
   1fcca:	0018      	movs	r0, r3
   1fccc:	4b04      	ldr	r3, [pc, #16]	; (1fce0 <sd_mmc_read_capacity+0x3c>)
   1fcce:	4798      	blx	r3
   1fcd0:	0003      	movs	r3, r0
}
   1fcd2:	0018      	movs	r0, r3
   1fcd4:	46bd      	mov	sp, r7
   1fcd6:	b002      	add	sp, #8
   1fcd8:	bd80      	pop	{r7, pc}
   1fcda:	46c0      	nop			; (mov r8, r8)
   1fcdc:	0001f839 	.word	0x0001f839
   1fce0:	0001fc15 	.word	0x0001fc15

0001fce4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1fce4:	b580      	push	{r7, lr}
   1fce6:	b082      	sub	sp, #8
   1fce8:	af00      	add	r7, sp, #0
   1fcea:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1fcec:	687b      	ldr	r3, [r7, #4]
   1fcee:	0019      	movs	r1, r3
   1fcf0:	2000      	movs	r0, #0
   1fcf2:	4b03      	ldr	r3, [pc, #12]	; (1fd00 <sd_mmc_read_capacity_0+0x1c>)
   1fcf4:	4798      	blx	r3
   1fcf6:	0003      	movs	r3, r0
}
   1fcf8:	0018      	movs	r0, r3
   1fcfa:	46bd      	mov	sp, r7
   1fcfc:	b002      	add	sp, #8
   1fcfe:	bd80      	pop	{r7, pc}
   1fd00:	0001fca5 	.word	0x0001fca5

0001fd04 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1fd04:	b580      	push	{r7, lr}
   1fd06:	b082      	sub	sp, #8
   1fd08:	af00      	add	r7, sp, #0
   1fd0a:	0002      	movs	r2, r0
   1fd0c:	1dfb      	adds	r3, r7, #7
   1fd0e:	701a      	strb	r2, [r3, #0]
   1fd10:	1dbb      	adds	r3, r7, #6
   1fd12:	1c0a      	adds	r2, r1, #0
   1fd14:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1fd16:	1dfb      	adds	r3, r7, #7
   1fd18:	781b      	ldrb	r3, [r3, #0]
   1fd1a:	4a04      	ldr	r2, [pc, #16]	; (1fd2c <sd_mmc_unload+0x28>)
   1fd1c:	1db9      	adds	r1, r7, #6
   1fd1e:	7809      	ldrb	r1, [r1, #0]
   1fd20:	54d1      	strb	r1, [r2, r3]
	return true;
   1fd22:	2301      	movs	r3, #1
}
   1fd24:	0018      	movs	r0, r3
   1fd26:	46bd      	mov	sp, r7
   1fd28:	b002      	add	sp, #8
   1fd2a:	bd80      	pop	{r7, pc}
   1fd2c:	2000424c 	.word	0x2000424c

0001fd30 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1fd30:	b580      	push	{r7, lr}
   1fd32:	b082      	sub	sp, #8
   1fd34:	af00      	add	r7, sp, #0
   1fd36:	0002      	movs	r2, r0
   1fd38:	1dfb      	adds	r3, r7, #7
   1fd3a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1fd3c:	1dfb      	adds	r3, r7, #7
   1fd3e:	781b      	ldrb	r3, [r3, #0]
   1fd40:	0019      	movs	r1, r3
   1fd42:	2000      	movs	r0, #0
   1fd44:	4b03      	ldr	r3, [pc, #12]	; (1fd54 <sd_mmc_unload_0+0x24>)
   1fd46:	4798      	blx	r3
   1fd48:	0003      	movs	r3, r0
}
   1fd4a:	0018      	movs	r0, r3
   1fd4c:	46bd      	mov	sp, r7
   1fd4e:	b002      	add	sp, #8
   1fd50:	bd80      	pop	{r7, pc}
   1fd52:	46c0      	nop			; (mov r8, r8)
   1fd54:	0001fd05 	.word	0x0001fd05

0001fd58 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1fd58:	b580      	push	{r7, lr}
   1fd5a:	b082      	sub	sp, #8
   1fd5c:	af00      	add	r7, sp, #0
   1fd5e:	0002      	movs	r2, r0
   1fd60:	1dfb      	adds	r3, r7, #7
   1fd62:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1fd64:	1dfb      	adds	r3, r7, #7
   1fd66:	781b      	ldrb	r3, [r3, #0]
   1fd68:	0018      	movs	r0, r3
   1fd6a:	4b03      	ldr	r3, [pc, #12]	; (1fd78 <sd_mmc_wr_protect+0x20>)
   1fd6c:	4798      	blx	r3
   1fd6e:	0003      	movs	r3, r0
}
   1fd70:	0018      	movs	r0, r3
   1fd72:	46bd      	mov	sp, r7
   1fd74:	b002      	add	sp, #8
   1fd76:	bd80      	pop	{r7, pc}
   1fd78:	0001f875 	.word	0x0001f875

0001fd7c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1fd7c:	b580      	push	{r7, lr}
   1fd7e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1fd80:	2000      	movs	r0, #0
   1fd82:	4b03      	ldr	r3, [pc, #12]	; (1fd90 <sd_mmc_wr_protect_0+0x14>)
   1fd84:	4798      	blx	r3
   1fd86:	0003      	movs	r3, r0
}
   1fd88:	0018      	movs	r0, r3
   1fd8a:	46bd      	mov	sp, r7
   1fd8c:	bd80      	pop	{r7, pc}
   1fd8e:	46c0      	nop			; (mov r8, r8)
   1fd90:	0001fd59 	.word	0x0001fd59

0001fd94 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1fd94:	b580      	push	{r7, lr}
   1fd96:	b082      	sub	sp, #8
   1fd98:	af00      	add	r7, sp, #0
   1fd9a:	0002      	movs	r2, r0
   1fd9c:	1dfb      	adds	r3, r7, #7
   1fd9e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1fda0:	2301      	movs	r3, #1
}
   1fda2:	0018      	movs	r0, r3
   1fda4:	46bd      	mov	sp, r7
   1fda6:	b002      	add	sp, #8
   1fda8:	bd80      	pop	{r7, pc}
	...

0001fdac <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1fdac:	b580      	push	{r7, lr}
   1fdae:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1fdb0:	2000      	movs	r0, #0
   1fdb2:	4b03      	ldr	r3, [pc, #12]	; (1fdc0 <sd_mmc_removal_0+0x14>)
   1fdb4:	4798      	blx	r3
   1fdb6:	0003      	movs	r3, r0
}
   1fdb8:	0018      	movs	r0, r3
   1fdba:	46bd      	mov	sp, r7
   1fdbc:	bd80      	pop	{r7, pc}
   1fdbe:	46c0      	nop			; (mov r8, r8)
   1fdc0:	0001fd95 	.word	0x0001fd95

0001fdc4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1fdc4:	b580      	push	{r7, lr}
   1fdc6:	b084      	sub	sp, #16
   1fdc8:	af00      	add	r7, sp, #0
   1fdca:	60b9      	str	r1, [r7, #8]
   1fdcc:	607a      	str	r2, [r7, #4]
   1fdce:	230f      	movs	r3, #15
   1fdd0:	18fb      	adds	r3, r7, r3
   1fdd2:	1c02      	adds	r2, r0, #0
   1fdd4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1fdd6:	68b9      	ldr	r1, [r7, #8]
   1fdd8:	230f      	movs	r3, #15
   1fdda:	18fb      	adds	r3, r7, r3
   1fddc:	781b      	ldrb	r3, [r3, #0]
   1fdde:	2201      	movs	r2, #1
   1fde0:	0018      	movs	r0, r3
   1fde2:	4b10      	ldr	r3, [pc, #64]	; (1fe24 <sd_mmc_mem_2_ram+0x60>)
   1fde4:	4798      	blx	r3
   1fde6:	1e03      	subs	r3, r0, #0
   1fde8:	d005      	beq.n	1fdf6 <sd_mmc_mem_2_ram+0x32>
   1fdea:	2b02      	cmp	r3, #2
   1fdec:	d101      	bne.n	1fdf2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1fdee:	2302      	movs	r3, #2
   1fdf0:	e013      	b.n	1fe1a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1fdf2:	2301      	movs	r3, #1
   1fdf4:	e011      	b.n	1fe1a <sd_mmc_mem_2_ram+0x56>
		break;
   1fdf6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1fdf8:	687b      	ldr	r3, [r7, #4]
   1fdfa:	2101      	movs	r1, #1
   1fdfc:	0018      	movs	r0, r3
   1fdfe:	4b0a      	ldr	r3, [pc, #40]	; (1fe28 <sd_mmc_mem_2_ram+0x64>)
   1fe00:	4798      	blx	r3
   1fe02:	1e03      	subs	r3, r0, #0
   1fe04:	d001      	beq.n	1fe0a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1fe06:	2301      	movs	r3, #1
   1fe08:	e007      	b.n	1fe1a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1fe0a:	2000      	movs	r0, #0
   1fe0c:	4b07      	ldr	r3, [pc, #28]	; (1fe2c <sd_mmc_mem_2_ram+0x68>)
   1fe0e:	4798      	blx	r3
   1fe10:	1e03      	subs	r3, r0, #0
   1fe12:	d001      	beq.n	1fe18 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1fe14:	2301      	movs	r3, #1
   1fe16:	e000      	b.n	1fe1a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1fe18:	2300      	movs	r3, #0
}
   1fe1a:	0018      	movs	r0, r3
   1fe1c:	46bd      	mov	sp, r7
   1fe1e:	b004      	add	sp, #16
   1fe20:	bd80      	pop	{r7, pc}
   1fe22:	46c0      	nop			; (mov r8, r8)
   1fe24:	0001f88d 	.word	0x0001f88d
   1fe28:	0001f979 	.word	0x0001f979
   1fe2c:	0001f9d1 	.word	0x0001f9d1

0001fe30 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1fe30:	b580      	push	{r7, lr}
   1fe32:	b082      	sub	sp, #8
   1fe34:	af00      	add	r7, sp, #0
   1fe36:	6078      	str	r0, [r7, #4]
   1fe38:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1fe3a:	683a      	ldr	r2, [r7, #0]
   1fe3c:	687b      	ldr	r3, [r7, #4]
   1fe3e:	0019      	movs	r1, r3
   1fe40:	2000      	movs	r0, #0
   1fe42:	4b03      	ldr	r3, [pc, #12]	; (1fe50 <sd_mmc_mem_2_ram_0+0x20>)
   1fe44:	4798      	blx	r3
   1fe46:	0003      	movs	r3, r0
}
   1fe48:	0018      	movs	r0, r3
   1fe4a:	46bd      	mov	sp, r7
   1fe4c:	b002      	add	sp, #8
   1fe4e:	bd80      	pop	{r7, pc}
   1fe50:	0001fdc5 	.word	0x0001fdc5

0001fe54 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1fe54:	b580      	push	{r7, lr}
   1fe56:	b084      	sub	sp, #16
   1fe58:	af00      	add	r7, sp, #0
   1fe5a:	60b9      	str	r1, [r7, #8]
   1fe5c:	607a      	str	r2, [r7, #4]
   1fe5e:	230f      	movs	r3, #15
   1fe60:	18fb      	adds	r3, r7, r3
   1fe62:	1c02      	adds	r2, r0, #0
   1fe64:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1fe66:	68b9      	ldr	r1, [r7, #8]
   1fe68:	230f      	movs	r3, #15
   1fe6a:	18fb      	adds	r3, r7, r3
   1fe6c:	781b      	ldrb	r3, [r3, #0]
   1fe6e:	2201      	movs	r2, #1
   1fe70:	0018      	movs	r0, r3
   1fe72:	4b10      	ldr	r3, [pc, #64]	; (1feb4 <sd_mmc_ram_2_mem+0x60>)
   1fe74:	4798      	blx	r3
   1fe76:	1e03      	subs	r3, r0, #0
   1fe78:	d005      	beq.n	1fe86 <sd_mmc_ram_2_mem+0x32>
   1fe7a:	2b02      	cmp	r3, #2
   1fe7c:	d101      	bne.n	1fe82 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1fe7e:	2302      	movs	r3, #2
   1fe80:	e013      	b.n	1feaa <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1fe82:	2301      	movs	r3, #1
   1fe84:	e011      	b.n	1feaa <sd_mmc_ram_2_mem+0x56>
		break;
   1fe86:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1fe88:	687b      	ldr	r3, [r7, #4]
   1fe8a:	2101      	movs	r1, #1
   1fe8c:	0018      	movs	r0, r3
   1fe8e:	4b0a      	ldr	r3, [pc, #40]	; (1feb8 <sd_mmc_ram_2_mem+0x64>)
   1fe90:	4798      	blx	r3
   1fe92:	1e03      	subs	r3, r0, #0
   1fe94:	d001      	beq.n	1fe9a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1fe96:	2301      	movs	r3, #1
   1fe98:	e007      	b.n	1feaa <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1fe9a:	2000      	movs	r0, #0
   1fe9c:	4b07      	ldr	r3, [pc, #28]	; (1febc <sd_mmc_ram_2_mem+0x68>)
   1fe9e:	4798      	blx	r3
   1fea0:	1e03      	subs	r3, r0, #0
   1fea2:	d001      	beq.n	1fea8 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1fea4:	2301      	movs	r3, #1
   1fea6:	e000      	b.n	1feaa <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1fea8:	2300      	movs	r3, #0
}
   1feaa:	0018      	movs	r0, r3
   1feac:	46bd      	mov	sp, r7
   1feae:	b004      	add	sp, #16
   1feb0:	bd80      	pop	{r7, pc}
   1feb2:	46c0      	nop			; (mov r8, r8)
   1feb4:	0001fa69 	.word	0x0001fa69
   1feb8:	0001fb51 	.word	0x0001fb51
   1febc:	0001fba9 	.word	0x0001fba9

0001fec0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1fec0:	b580      	push	{r7, lr}
   1fec2:	b082      	sub	sp, #8
   1fec4:	af00      	add	r7, sp, #0
   1fec6:	6078      	str	r0, [r7, #4]
   1fec8:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1feca:	683a      	ldr	r2, [r7, #0]
   1fecc:	687b      	ldr	r3, [r7, #4]
   1fece:	0019      	movs	r1, r3
   1fed0:	2000      	movs	r0, #0
   1fed2:	4b03      	ldr	r3, [pc, #12]	; (1fee0 <sd_mmc_ram_2_mem_0+0x20>)
   1fed4:	4798      	blx	r3
   1fed6:	0003      	movs	r3, r0
}
   1fed8:	0018      	movs	r0, r3
   1feda:	46bd      	mov	sp, r7
   1fedc:	b002      	add	sp, #8
   1fede:	bd80      	pop	{r7, pc}
   1fee0:	0001fe55 	.word	0x0001fe55

0001fee4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1fee4:	b580      	push	{r7, lr}
   1fee6:	b084      	sub	sp, #16
   1fee8:	af00      	add	r7, sp, #0
   1feea:	0002      	movs	r2, r0
   1feec:	1dfb      	adds	r3, r7, #7
   1feee:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1fef0:	230f      	movs	r3, #15
   1fef2:	18fb      	adds	r3, r7, r3
   1fef4:	1dfa      	adds	r2, r7, #7
   1fef6:	7812      	ldrb	r2, [r2, #0]
   1fef8:	09d2      	lsrs	r2, r2, #7
   1fefa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1fefc:	230e      	movs	r3, #14
   1fefe:	18fb      	adds	r3, r7, r3
   1ff00:	1dfa      	adds	r2, r7, #7
   1ff02:	7812      	ldrb	r2, [r2, #0]
   1ff04:	0952      	lsrs	r2, r2, #5
   1ff06:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1ff08:	4b0d      	ldr	r3, [pc, #52]	; (1ff40 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1ff0a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   1ff0c:	230f      	movs	r3, #15
   1ff0e:	18fb      	adds	r3, r7, r3
   1ff10:	781b      	ldrb	r3, [r3, #0]
   1ff12:	2b00      	cmp	r3, #0
   1ff14:	d10f      	bne.n	1ff36 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1ff16:	230f      	movs	r3, #15
   1ff18:	18fb      	adds	r3, r7, r3
   1ff1a:	781b      	ldrb	r3, [r3, #0]
   1ff1c:	009b      	lsls	r3, r3, #2
   1ff1e:	2210      	movs	r2, #16
   1ff20:	4694      	mov	ip, r2
   1ff22:	44bc      	add	ip, r7
   1ff24:	4463      	add	r3, ip
   1ff26:	3b08      	subs	r3, #8
   1ff28:	681a      	ldr	r2, [r3, #0]
   1ff2a:	230e      	movs	r3, #14
   1ff2c:	18fb      	adds	r3, r7, r3
   1ff2e:	781b      	ldrb	r3, [r3, #0]
   1ff30:	01db      	lsls	r3, r3, #7
   1ff32:	18d3      	adds	r3, r2, r3
   1ff34:	e000      	b.n	1ff38 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   1ff36:	2300      	movs	r3, #0
	}
}
   1ff38:	0018      	movs	r0, r3
   1ff3a:	46bd      	mov	sp, r7
   1ff3c:	b004      	add	sp, #16
   1ff3e:	bd80      	pop	{r7, pc}
   1ff40:	41004400 	.word	0x41004400

0001ff44 <system_interrupt_enable>:
{
   1ff44:	b580      	push	{r7, lr}
   1ff46:	b082      	sub	sp, #8
   1ff48:	af00      	add	r7, sp, #0
   1ff4a:	0002      	movs	r2, r0
   1ff4c:	1dfb      	adds	r3, r7, #7
   1ff4e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1ff50:	4b06      	ldr	r3, [pc, #24]	; (1ff6c <system_interrupt_enable+0x28>)
   1ff52:	1dfa      	adds	r2, r7, #7
   1ff54:	7812      	ldrb	r2, [r2, #0]
   1ff56:	0011      	movs	r1, r2
   1ff58:	221f      	movs	r2, #31
   1ff5a:	400a      	ands	r2, r1
   1ff5c:	2101      	movs	r1, #1
   1ff5e:	4091      	lsls	r1, r2
   1ff60:	000a      	movs	r2, r1
   1ff62:	601a      	str	r2, [r3, #0]
}
   1ff64:	46c0      	nop			; (mov r8, r8)
   1ff66:	46bd      	mov	sp, r7
   1ff68:	b002      	add	sp, #8
   1ff6a:	bd80      	pop	{r7, pc}
   1ff6c:	e000e100 	.word	0xe000e100

0001ff70 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1ff70:	b580      	push	{r7, lr}
   1ff72:	b082      	sub	sp, #8
   1ff74:	af00      	add	r7, sp, #0
   1ff76:	0002      	movs	r2, r0
   1ff78:	1dfb      	adds	r3, r7, #7
   1ff7a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1ff7c:	1dfb      	adds	r3, r7, #7
   1ff7e:	781b      	ldrb	r3, [r3, #0]
   1ff80:	0018      	movs	r0, r3
   1ff82:	4b03      	ldr	r3, [pc, #12]	; (1ff90 <port_get_group_from_gpio_pin+0x20>)
   1ff84:	4798      	blx	r3
   1ff86:	0003      	movs	r3, r0
}
   1ff88:	0018      	movs	r0, r3
   1ff8a:	46bd      	mov	sp, r7
   1ff8c:	b002      	add	sp, #8
   1ff8e:	bd80      	pop	{r7, pc}
   1ff90:	0001fee5 	.word	0x0001fee5

0001ff94 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   1ff94:	b580      	push	{r7, lr}
   1ff96:	b082      	sub	sp, #8
   1ff98:	af00      	add	r7, sp, #0
   1ff9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   1ff9c:	687b      	ldr	r3, [r7, #4]
   1ff9e:	2200      	movs	r2, #0
   1ffa0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1ffa2:	687b      	ldr	r3, [r7, #4]
   1ffa4:	2201      	movs	r2, #1
   1ffa6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1ffa8:	687b      	ldr	r3, [r7, #4]
   1ffaa:	2200      	movs	r2, #0
   1ffac:	709a      	strb	r2, [r3, #2]
}
   1ffae:	46c0      	nop			; (mov r8, r8)
   1ffb0:	46bd      	mov	sp, r7
   1ffb2:	b002      	add	sp, #8
   1ffb4:	bd80      	pop	{r7, pc}
	...

0001ffb8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   1ffb8:	b580      	push	{r7, lr}
   1ffba:	b084      	sub	sp, #16
   1ffbc:	af00      	add	r7, sp, #0
   1ffbe:	0002      	movs	r2, r0
   1ffc0:	1dfb      	adds	r3, r7, #7
   1ffc2:	701a      	strb	r2, [r3, #0]
   1ffc4:	1dbb      	adds	r3, r7, #6
   1ffc6:	1c0a      	adds	r2, r1, #0
   1ffc8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1ffca:	1dfb      	adds	r3, r7, #7
   1ffcc:	781b      	ldrb	r3, [r3, #0]
   1ffce:	0018      	movs	r0, r3
   1ffd0:	4b0d      	ldr	r3, [pc, #52]	; (20008 <port_pin_set_output_level+0x50>)
   1ffd2:	4798      	blx	r3
   1ffd4:	0003      	movs	r3, r0
   1ffd6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1ffd8:	1dfb      	adds	r3, r7, #7
   1ffda:	781b      	ldrb	r3, [r3, #0]
   1ffdc:	221f      	movs	r2, #31
   1ffde:	4013      	ands	r3, r2
   1ffe0:	2201      	movs	r2, #1
   1ffe2:	409a      	lsls	r2, r3
   1ffe4:	0013      	movs	r3, r2
   1ffe6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   1ffe8:	1dbb      	adds	r3, r7, #6
   1ffea:	781b      	ldrb	r3, [r3, #0]
   1ffec:	2b00      	cmp	r3, #0
   1ffee:	d003      	beq.n	1fff8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1fff0:	68fb      	ldr	r3, [r7, #12]
   1fff2:	68ba      	ldr	r2, [r7, #8]
   1fff4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   1fff6:	e002      	b.n	1fffe <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1fff8:	68fb      	ldr	r3, [r7, #12]
   1fffa:	68ba      	ldr	r2, [r7, #8]
   1fffc:	615a      	str	r2, [r3, #20]
}
   1fffe:	46c0      	nop			; (mov r8, r8)
   20000:	46bd      	mov	sp, r7
   20002:	b004      	add	sp, #16
   20004:	bd80      	pop	{r7, pc}
   20006:	46c0      	nop			; (mov r8, r8)
   20008:	0001ff71 	.word	0x0001ff71

0002000c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   2000c:	b580      	push	{r7, lr}
   2000e:	b084      	sub	sp, #16
   20010:	af00      	add	r7, sp, #0
   20012:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20014:	687b      	ldr	r3, [r7, #4]
   20016:	681b      	ldr	r3, [r3, #0]
   20018:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   2001a:	68fb      	ldr	r3, [r7, #12]
   2001c:	69db      	ldr	r3, [r3, #28]
   2001e:	1e5a      	subs	r2, r3, #1
   20020:	4193      	sbcs	r3, r2
   20022:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   20024:	0018      	movs	r0, r3
   20026:	46bd      	mov	sp, r7
   20028:	b004      	add	sp, #16
   2002a:	bd80      	pop	{r7, pc}

0002002c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   2002c:	b580      	push	{r7, lr}
   2002e:	b082      	sub	sp, #8
   20030:	af00      	add	r7, sp, #0
   20032:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   20034:	687b      	ldr	r3, [r7, #4]
   20036:	2201      	movs	r2, #1
   20038:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   2003a:	687b      	ldr	r3, [r7, #4]
   2003c:	2200      	movs	r2, #0
   2003e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   20040:	687b      	ldr	r3, [r7, #4]
   20042:	2200      	movs	r2, #0
   20044:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   20046:	687b      	ldr	r3, [r7, #4]
   20048:	22c0      	movs	r2, #192	; 0xc0
   2004a:	0392      	lsls	r2, r2, #14
   2004c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   2004e:	687b      	ldr	r3, [r7, #4]
   20050:	2200      	movs	r2, #0
   20052:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   20054:	687b      	ldr	r3, [r7, #4]
   20056:	2200      	movs	r2, #0
   20058:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   2005a:	687b      	ldr	r3, [r7, #4]
   2005c:	2201      	movs	r2, #1
   2005e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   20060:	687b      	ldr	r3, [r7, #4]
   20062:	2201      	movs	r2, #1
   20064:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   20066:	687b      	ldr	r3, [r7, #4]
   20068:	2200      	movs	r2, #0
   2006a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   2006c:	687b      	ldr	r3, [r7, #4]
   2006e:	2224      	movs	r2, #36	; 0x24
   20070:	2100      	movs	r1, #0
   20072:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   20074:	687b      	ldr	r3, [r7, #4]
   20076:	3318      	adds	r3, #24
   20078:	220c      	movs	r2, #12
   2007a:	2100      	movs	r1, #0
   2007c:	0018      	movs	r0, r3
   2007e:	4b0a      	ldr	r3, [pc, #40]	; (200a8 <spi_get_config_defaults+0x7c>)
   20080:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   20082:	687b      	ldr	r3, [r7, #4]
   20084:	4a09      	ldr	r2, [pc, #36]	; (200ac <spi_get_config_defaults+0x80>)
   20086:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   20088:	687b      	ldr	r3, [r7, #4]
   2008a:	2200      	movs	r2, #0
   2008c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   2008e:	687b      	ldr	r3, [r7, #4]
   20090:	2200      	movs	r2, #0
   20092:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   20094:	687b      	ldr	r3, [r7, #4]
   20096:	2200      	movs	r2, #0
   20098:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2009a:	687b      	ldr	r3, [r7, #4]
   2009c:	2200      	movs	r2, #0
   2009e:	635a      	str	r2, [r3, #52]	; 0x34

};
   200a0:	46c0      	nop			; (mov r8, r8)
   200a2:	46bd      	mov	sp, r7
   200a4:	b002      	add	sp, #8
   200a6:	bd80      	pop	{r7, pc}
   200a8:	0003560f 	.word	0x0003560f
   200ac:	000186a0 	.word	0x000186a0

000200b0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   200b0:	b580      	push	{r7, lr}
   200b2:	b082      	sub	sp, #8
   200b4:	af00      	add	r7, sp, #0
   200b6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   200b8:	687b      	ldr	r3, [r7, #4]
   200ba:	220a      	movs	r2, #10
   200bc:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   200be:	687b      	ldr	r3, [r7, #4]
   200c0:	2200      	movs	r2, #0
   200c2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   200c4:	687b      	ldr	r3, [r7, #4]
   200c6:	2200      	movs	r2, #0
   200c8:	709a      	strb	r2, [r3, #2]
}
   200ca:	46c0      	nop			; (mov r8, r8)
   200cc:	46bd      	mov	sp, r7
   200ce:	b002      	add	sp, #8
   200d0:	bd80      	pop	{r7, pc}
	...

000200d4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   200d4:	b580      	push	{r7, lr}
   200d6:	b084      	sub	sp, #16
   200d8:	af00      	add	r7, sp, #0
   200da:	6078      	str	r0, [r7, #4]
   200dc:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   200de:	683b      	ldr	r3, [r7, #0]
   200e0:	781a      	ldrb	r2, [r3, #0]
   200e2:	687b      	ldr	r3, [r7, #4]
   200e4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   200e6:	683b      	ldr	r3, [r7, #0]
   200e8:	785a      	ldrb	r2, [r3, #1]
   200ea:	687b      	ldr	r3, [r7, #4]
   200ec:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   200ee:	683b      	ldr	r3, [r7, #0]
   200f0:	789a      	ldrb	r2, [r3, #2]
   200f2:	687b      	ldr	r3, [r7, #4]
   200f4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   200f6:	230c      	movs	r3, #12
   200f8:	18fb      	adds	r3, r7, r3
   200fa:	0018      	movs	r0, r3
   200fc:	4b0b      	ldr	r3, [pc, #44]	; (2012c <spi_attach_slave+0x58>)
   200fe:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   20100:	230c      	movs	r3, #12
   20102:	18fb      	adds	r3, r7, r3
   20104:	2201      	movs	r2, #1
   20106:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   20108:	687b      	ldr	r3, [r7, #4]
   2010a:	781b      	ldrb	r3, [r3, #0]
   2010c:	220c      	movs	r2, #12
   2010e:	18ba      	adds	r2, r7, r2
   20110:	0011      	movs	r1, r2
   20112:	0018      	movs	r0, r3
   20114:	4b06      	ldr	r3, [pc, #24]	; (20130 <spi_attach_slave+0x5c>)
   20116:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   20118:	687b      	ldr	r3, [r7, #4]
   2011a:	781b      	ldrb	r3, [r3, #0]
   2011c:	2101      	movs	r1, #1
   2011e:	0018      	movs	r0, r3
   20120:	4b04      	ldr	r3, [pc, #16]	; (20134 <spi_attach_slave+0x60>)
   20122:	4798      	blx	r3
}
   20124:	46c0      	nop			; (mov r8, r8)
   20126:	46bd      	mov	sp, r7
   20128:	b004      	add	sp, #16
   2012a:	bd80      	pop	{r7, pc}
   2012c:	0001ff95 	.word	0x0001ff95
   20130:	000274dd 	.word	0x000274dd
   20134:	0001ffb9 	.word	0x0001ffb9

00020138 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   20138:	b580      	push	{r7, lr}
   2013a:	b084      	sub	sp, #16
   2013c:	af00      	add	r7, sp, #0
   2013e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20140:	687b      	ldr	r3, [r7, #4]
   20142:	681b      	ldr	r3, [r3, #0]
   20144:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   20146:	687b      	ldr	r3, [r7, #4]
   20148:	681b      	ldr	r3, [r3, #0]
   2014a:	0018      	movs	r0, r3
   2014c:	4b0b      	ldr	r3, [pc, #44]	; (2017c <spi_enable+0x44>)
   2014e:	4798      	blx	r3
   20150:	0003      	movs	r3, r0
   20152:	0018      	movs	r0, r3
   20154:	4b0a      	ldr	r3, [pc, #40]	; (20180 <spi_enable+0x48>)
   20156:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   20158:	46c0      	nop			; (mov r8, r8)
   2015a:	687b      	ldr	r3, [r7, #4]
   2015c:	0018      	movs	r0, r3
   2015e:	4b09      	ldr	r3, [pc, #36]	; (20184 <spi_enable+0x4c>)
   20160:	4798      	blx	r3
   20162:	1e03      	subs	r3, r0, #0
   20164:	d1f9      	bne.n	2015a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   20166:	68fb      	ldr	r3, [r7, #12]
   20168:	681b      	ldr	r3, [r3, #0]
   2016a:	2202      	movs	r2, #2
   2016c:	431a      	orrs	r2, r3
   2016e:	68fb      	ldr	r3, [r7, #12]
   20170:	601a      	str	r2, [r3, #0]
}
   20172:	46c0      	nop			; (mov r8, r8)
   20174:	46bd      	mov	sp, r7
   20176:	b004      	add	sp, #16
   20178:	bd80      	pop	{r7, pc}
   2017a:	46c0      	nop			; (mov r8, r8)
   2017c:	000281ad 	.word	0x000281ad
   20180:	0001ff45 	.word	0x0001ff45
   20184:	0002000d 	.word	0x0002000d

00020188 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   20188:	b580      	push	{r7, lr}
   2018a:	b084      	sub	sp, #16
   2018c:	af00      	add	r7, sp, #0
   2018e:	6078      	str	r0, [r7, #4]
   20190:	000a      	movs	r2, r1
   20192:	1cfb      	adds	r3, r7, #3
   20194:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   20196:	230f      	movs	r3, #15
   20198:	18fb      	adds	r3, r7, r3
   2019a:	2200      	movs	r2, #0
   2019c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   2019e:	e038      	b.n	20212 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   201a0:	687b      	ldr	r3, [r7, #4]
   201a2:	1c5a      	adds	r2, r3, #1
   201a4:	607a      	str	r2, [r7, #4]
   201a6:	220e      	movs	r2, #14
   201a8:	18ba      	adds	r2, r7, r2
   201aa:	781b      	ldrb	r3, [r3, #0]
   201ac:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   201ae:	230d      	movs	r3, #13
   201b0:	18fb      	adds	r3, r7, r3
   201b2:	2200      	movs	r2, #0
   201b4:	701a      	strb	r2, [r3, #0]
   201b6:	e027      	b.n	20208 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   201b8:	230f      	movs	r3, #15
   201ba:	18fa      	adds	r2, r7, r3
   201bc:	230f      	movs	r3, #15
   201be:	18fb      	adds	r3, r7, r3
   201c0:	781b      	ldrb	r3, [r3, #0]
   201c2:	18db      	adds	r3, r3, r3
   201c4:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   201c6:	230e      	movs	r3, #14
   201c8:	18fa      	adds	r2, r7, r3
   201ca:	230f      	movs	r3, #15
   201cc:	18fb      	adds	r3, r7, r3
   201ce:	7812      	ldrb	r2, [r2, #0]
   201d0:	781b      	ldrb	r3, [r3, #0]
   201d2:	4053      	eors	r3, r2
   201d4:	b2db      	uxtb	r3, r3
   201d6:	b25b      	sxtb	r3, r3
   201d8:	2b00      	cmp	r3, #0
   201da:	da07      	bge.n	201ec <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   201dc:	230f      	movs	r3, #15
   201de:	18fb      	adds	r3, r7, r3
   201e0:	220f      	movs	r2, #15
   201e2:	18ba      	adds	r2, r7, r2
   201e4:	7812      	ldrb	r2, [r2, #0]
   201e6:	2109      	movs	r1, #9
   201e8:	404a      	eors	r2, r1
   201ea:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   201ec:	230e      	movs	r3, #14
   201ee:	18fa      	adds	r2, r7, r3
   201f0:	230e      	movs	r3, #14
   201f2:	18fb      	adds	r3, r7, r3
   201f4:	781b      	ldrb	r3, [r3, #0]
   201f6:	18db      	adds	r3, r3, r3
   201f8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   201fa:	230d      	movs	r3, #13
   201fc:	18fb      	adds	r3, r7, r3
   201fe:	781a      	ldrb	r2, [r3, #0]
   20200:	230d      	movs	r3, #13
   20202:	18fb      	adds	r3, r7, r3
   20204:	3201      	adds	r2, #1
   20206:	701a      	strb	r2, [r3, #0]
   20208:	230d      	movs	r3, #13
   2020a:	18fb      	adds	r3, r7, r3
   2020c:	781b      	ldrb	r3, [r3, #0]
   2020e:	2b07      	cmp	r3, #7
   20210:	d9d2      	bls.n	201b8 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   20212:	1cfb      	adds	r3, r7, #3
   20214:	781b      	ldrb	r3, [r3, #0]
   20216:	1cfa      	adds	r2, r7, #3
   20218:	1e59      	subs	r1, r3, #1
   2021a:	7011      	strb	r1, [r2, #0]
   2021c:	2b00      	cmp	r3, #0
   2021e:	d1bf      	bne.n	201a0 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   20220:	230f      	movs	r3, #15
   20222:	18fb      	adds	r3, r7, r3
   20224:	781b      	ldrb	r3, [r3, #0]
   20226:	005b      	lsls	r3, r3, #1
   20228:	b25b      	sxtb	r3, r3
   2022a:	2201      	movs	r2, #1
   2022c:	4313      	orrs	r3, r2
   2022e:	b25a      	sxtb	r2, r3
   20230:	230f      	movs	r3, #15
   20232:	18fb      	adds	r3, r7, r3
   20234:	701a      	strb	r2, [r3, #0]
	return crc;
   20236:	230f      	movs	r3, #15
   20238:	18fb      	adds	r3, r7, r3
   2023a:	781b      	ldrb	r3, [r3, #0]
}
   2023c:	0018      	movs	r0, r3
   2023e:	46bd      	mov	sp, r7
   20240:	b004      	add	sp, #16
   20242:	bd80      	pop	{r7, pc}

00020244 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   20244:	b590      	push	{r4, r7, lr}
   20246:	b083      	sub	sp, #12
   20248:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   2024a:	1c7b      	adds	r3, r7, #1
   2024c:	22ff      	movs	r2, #255	; 0xff
   2024e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   20250:	1cbb      	adds	r3, r7, #2
   20252:	22ff      	movs	r2, #255	; 0xff
   20254:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   20256:	1cbb      	adds	r3, r7, #2
   20258:	881b      	ldrh	r3, [r3, #0]
   2025a:	1c79      	adds	r1, r7, #1
   2025c:	4811      	ldr	r0, [pc, #68]	; (202a4 <sd_mmc_spi_wait_busy+0x60>)
   2025e:	2201      	movs	r2, #1
   20260:	4c11      	ldr	r4, [pc, #68]	; (202a8 <sd_mmc_spi_wait_busy+0x64>)
   20262:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   20264:	4b11      	ldr	r3, [pc, #68]	; (202ac <sd_mmc_spi_wait_busy+0x68>)
   20266:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   20268:	1cbb      	adds	r3, r7, #2
   2026a:	881b      	ldrh	r3, [r3, #0]
   2026c:	1c79      	adds	r1, r7, #1
   2026e:	480d      	ldr	r0, [pc, #52]	; (202a4 <sd_mmc_spi_wait_busy+0x60>)
   20270:	2201      	movs	r2, #1
   20272:	4c0d      	ldr	r4, [pc, #52]	; (202a8 <sd_mmc_spi_wait_busy+0x64>)
   20274:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   20276:	1cbb      	adds	r3, r7, #2
   20278:	881b      	ldrh	r3, [r3, #0]
   2027a:	1c79      	adds	r1, r7, #1
   2027c:	4809      	ldr	r0, [pc, #36]	; (202a4 <sd_mmc_spi_wait_busy+0x60>)
   2027e:	2201      	movs	r2, #1
   20280:	4c09      	ldr	r4, [pc, #36]	; (202a8 <sd_mmc_spi_wait_busy+0x64>)
   20282:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   20284:	687b      	ldr	r3, [r7, #4]
   20286:	1e5a      	subs	r2, r3, #1
   20288:	607a      	str	r2, [r7, #4]
   2028a:	2b00      	cmp	r3, #0
   2028c:	d101      	bne.n	20292 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   2028e:	2300      	movs	r3, #0
   20290:	e004      	b.n	2029c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   20292:	1c7b      	adds	r3, r7, #1
   20294:	781b      	ldrb	r3, [r3, #0]
   20296:	2bff      	cmp	r3, #255	; 0xff
   20298:	d1ed      	bne.n	20276 <sd_mmc_spi_wait_busy+0x32>
	return true;
   2029a:	2301      	movs	r3, #1
}
   2029c:	0018      	movs	r0, r3
   2029e:	46bd      	mov	sp, r7
   202a0:	b003      	add	sp, #12
   202a2:	bd90      	pop	{r4, r7, pc}
   202a4:	20004250 	.word	0x20004250
   202a8:	00028aed 	.word	0x00028aed
   202ac:	00030d40 	.word	0x00030d40

000202b0 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   202b0:	b590      	push	{r4, r7, lr}
   202b2:	b083      	sub	sp, #12
   202b4:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   202b6:	1cbb      	adds	r3, r7, #2
   202b8:	22ff      	movs	r2, #255	; 0xff
   202ba:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   202bc:	1c7b      	adds	r3, r7, #1
   202be:	2200      	movs	r2, #0
   202c0:	701a      	strb	r2, [r3, #0]
	i = 500000;
   202c2:	4b18      	ldr	r3, [pc, #96]	; (20324 <sd_mmc_spi_start_read_block+0x74>)
   202c4:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   202c6:	687b      	ldr	r3, [r7, #4]
   202c8:	1e5a      	subs	r2, r3, #1
   202ca:	607a      	str	r2, [r7, #4]
   202cc:	2b00      	cmp	r3, #0
   202ce:	d104      	bne.n	202da <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   202d0:	4b15      	ldr	r3, [pc, #84]	; (20328 <sd_mmc_spi_start_read_block+0x78>)
   202d2:	2204      	movs	r2, #4
   202d4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   202d6:	2300      	movs	r3, #0
   202d8:	e020      	b.n	2031c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   202da:	1cbb      	adds	r3, r7, #2
   202dc:	881b      	ldrh	r3, [r3, #0]
   202de:	1c79      	adds	r1, r7, #1
   202e0:	4812      	ldr	r0, [pc, #72]	; (2032c <sd_mmc_spi_start_read_block+0x7c>)
   202e2:	2201      	movs	r2, #1
   202e4:	4c12      	ldr	r4, [pc, #72]	; (20330 <sd_mmc_spi_start_read_block+0x80>)
   202e6:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   202e8:	1c7b      	adds	r3, r7, #1
   202ea:	781b      	ldrb	r3, [r3, #0]
   202ec:	001a      	movs	r2, r3
   202ee:	23f0      	movs	r3, #240	; 0xf0
   202f0:	4013      	ands	r3, r2
   202f2:	d10e      	bne.n	20312 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   202f4:	1c7b      	adds	r3, r7, #1
   202f6:	781b      	ldrb	r3, [r3, #0]
   202f8:	001a      	movs	r2, r3
   202fa:	2307      	movs	r3, #7
   202fc:	4013      	ands	r3, r2
   202fe:	d003      	beq.n	20308 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   20300:	4b09      	ldr	r3, [pc, #36]	; (20328 <sd_mmc_spi_start_read_block+0x78>)
   20302:	2207      	movs	r2, #7
   20304:	701a      	strb	r2, [r3, #0]
   20306:	e002      	b.n	2030e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   20308:	4b07      	ldr	r3, [pc, #28]	; (20328 <sd_mmc_spi_start_read_block+0x78>)
   2030a:	220b      	movs	r2, #11
   2030c:	701a      	strb	r2, [r3, #0]
			}
			return false;
   2030e:	2300      	movs	r3, #0
   20310:	e004      	b.n	2031c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   20312:	1c7b      	adds	r3, r7, #1
   20314:	781b      	ldrb	r3, [r3, #0]
   20316:	2bfe      	cmp	r3, #254	; 0xfe
   20318:	d1d5      	bne.n	202c6 <sd_mmc_spi_start_read_block+0x16>

	return true;
   2031a:	2301      	movs	r3, #1
}
   2031c:	0018      	movs	r0, r3
   2031e:	46bd      	mov	sp, r7
   20320:	b003      	add	sp, #12
   20322:	bd90      	pop	{r4, r7, pc}
   20324:	0007a120 	.word	0x0007a120
   20328:	20004293 	.word	0x20004293
   2032c:	20004250 	.word	0x20004250
   20330:	00028aed 	.word	0x00028aed

00020334 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   20334:	b590      	push	{r4, r7, lr}
   20336:	b083      	sub	sp, #12
   20338:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   2033a:	1dbb      	adds	r3, r7, #6
   2033c:	22ff      	movs	r2, #255	; 0xff
   2033e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   20340:	1dbb      	adds	r3, r7, #6
   20342:	881b      	ldrh	r3, [r3, #0]
   20344:	1d39      	adds	r1, r7, #4
   20346:	4804      	ldr	r0, [pc, #16]	; (20358 <sd_mmc_spi_stop_read_block+0x24>)
   20348:	2202      	movs	r2, #2
   2034a:	4c04      	ldr	r4, [pc, #16]	; (2035c <sd_mmc_spi_stop_read_block+0x28>)
   2034c:	47a0      	blx	r4
			dummy);
}
   2034e:	46c0      	nop			; (mov r8, r8)
   20350:	46bd      	mov	sp, r7
   20352:	b003      	add	sp, #12
   20354:	bd90      	pop	{r4, r7, pc}
   20356:	46c0      	nop			; (mov r8, r8)
   20358:	20004250 	.word	0x20004250
   2035c:	00028aed 	.word	0x00028aed

00020360 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   20360:	b580      	push	{r7, lr}
   20362:	b082      	sub	sp, #8
   20364:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   20366:	1dfb      	adds	r3, r7, #7
   20368:	22ff      	movs	r2, #255	; 0xff
   2036a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   2036c:	1df9      	adds	r1, r7, #7
   2036e:	4b0d      	ldr	r3, [pc, #52]	; (203a4 <sd_mmc_spi_start_write_block+0x44>)
   20370:	2201      	movs	r2, #1
   20372:	0018      	movs	r0, r3
   20374:	4b0c      	ldr	r3, [pc, #48]	; (203a8 <sd_mmc_spi_start_write_block+0x48>)
   20376:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   20378:	4b0c      	ldr	r3, [pc, #48]	; (203ac <sd_mmc_spi_start_write_block+0x4c>)
   2037a:	881b      	ldrh	r3, [r3, #0]
   2037c:	2b01      	cmp	r3, #1
   2037e:	d103      	bne.n	20388 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   20380:	1dbb      	adds	r3, r7, #6
   20382:	22fe      	movs	r2, #254	; 0xfe
   20384:	701a      	strb	r2, [r3, #0]
   20386:	e002      	b.n	2038e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   20388:	1dbb      	adds	r3, r7, #6
   2038a:	22fc      	movs	r2, #252	; 0xfc
   2038c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   2038e:	1db9      	adds	r1, r7, #6
   20390:	4b04      	ldr	r3, [pc, #16]	; (203a4 <sd_mmc_spi_start_write_block+0x44>)
   20392:	2201      	movs	r2, #1
   20394:	0018      	movs	r0, r3
   20396:	4b04      	ldr	r3, [pc, #16]	; (203a8 <sd_mmc_spi_start_write_block+0x48>)
   20398:	4798      	blx	r3
}
   2039a:	46c0      	nop			; (mov r8, r8)
   2039c:	46bd      	mov	sp, r7
   2039e:	b002      	add	sp, #8
   203a0:	bd80      	pop	{r7, pc}
   203a2:	46c0      	nop			; (mov r8, r8)
   203a4:	20004250 	.word	0x20004250
   203a8:	00028d11 	.word	0x00028d11
   203ac:	2000429e 	.word	0x2000429e

000203b0 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   203b0:	b590      	push	{r4, r7, lr}
   203b2:	b083      	sub	sp, #12
   203b4:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   203b6:	1dbb      	adds	r3, r7, #6
   203b8:	22ff      	movs	r2, #255	; 0xff
   203ba:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   203bc:	1cbb      	adds	r3, r7, #2
   203be:	2201      	movs	r2, #1
   203c0:	4252      	negs	r2, r2
   203c2:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   203c4:	1cb9      	adds	r1, r7, #2
   203c6:	4b1b      	ldr	r3, [pc, #108]	; (20434 <sd_mmc_spi_stop_write_block+0x84>)
   203c8:	2202      	movs	r2, #2
   203ca:	0018      	movs	r0, r3
   203cc:	4b1a      	ldr	r3, [pc, #104]	; (20438 <sd_mmc_spi_stop_write_block+0x88>)
   203ce:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   203d0:	1dbb      	adds	r3, r7, #6
   203d2:	881b      	ldrh	r3, [r3, #0]
   203d4:	1d79      	adds	r1, r7, #5
   203d6:	4817      	ldr	r0, [pc, #92]	; (20434 <sd_mmc_spi_stop_write_block+0x84>)
   203d8:	2201      	movs	r2, #1
   203da:	4c18      	ldr	r4, [pc, #96]	; (2043c <sd_mmc_spi_stop_write_block+0x8c>)
   203dc:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   203de:	1d7b      	adds	r3, r7, #5
   203e0:	781b      	ldrb	r3, [r3, #0]
   203e2:	001a      	movs	r2, r3
   203e4:	2310      	movs	r3, #16
   203e6:	4013      	ands	r3, r2
   203e8:	d105      	bne.n	203f6 <sd_mmc_spi_stop_write_block+0x46>
   203ea:	1d7b      	adds	r3, r7, #5
   203ec:	781b      	ldrb	r3, [r3, #0]
   203ee:	001a      	movs	r2, r3
   203f0:	2301      	movs	r3, #1
   203f2:	4013      	ands	r3, r2
   203f4:	d104      	bne.n	20400 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   203f6:	4b12      	ldr	r3, [pc, #72]	; (20440 <sd_mmc_spi_stop_write_block+0x90>)
   203f8:	2201      	movs	r2, #1
   203fa:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   203fc:	2300      	movs	r3, #0
   203fe:	e014      	b.n	2042a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   20400:	1d7b      	adds	r3, r7, #5
   20402:	781b      	ldrb	r3, [r3, #0]
   20404:	001a      	movs	r2, r3
   20406:	231e      	movs	r3, #30
   20408:	4013      	ands	r3, r2
   2040a:	2b04      	cmp	r3, #4
   2040c:	d00b      	beq.n	20426 <sd_mmc_spi_stop_write_block+0x76>
   2040e:	2b0a      	cmp	r3, #10
   20410:	d104      	bne.n	2041c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   20412:	4b0b      	ldr	r3, [pc, #44]	; (20440 <sd_mmc_spi_stop_write_block+0x90>)
   20414:	2208      	movs	r2, #8
   20416:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   20418:	2300      	movs	r3, #0
   2041a:	e006      	b.n	2042a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   2041c:	4b08      	ldr	r3, [pc, #32]	; (20440 <sd_mmc_spi_stop_write_block+0x90>)
   2041e:	220a      	movs	r2, #10
   20420:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   20422:	2300      	movs	r3, #0
   20424:	e001      	b.n	2042a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   20426:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   20428:	2301      	movs	r3, #1
}
   2042a:	0018      	movs	r0, r3
   2042c:	46bd      	mov	sp, r7
   2042e:	b003      	add	sp, #12
   20430:	bd90      	pop	{r4, r7, pc}
   20432:	46c0      	nop			; (mov r8, r8)
   20434:	20004250 	.word	0x20004250
   20438:	00028d11 	.word	0x00028d11
   2043c:	00028aed 	.word	0x00028aed
   20440:	20004293 	.word	0x20004293

00020444 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   20444:	b590      	push	{r4, r7, lr}
   20446:	b083      	sub	sp, #12
   20448:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   2044a:	4b1d      	ldr	r3, [pc, #116]	; (204c0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   2044c:	881b      	ldrh	r3, [r3, #0]
   2044e:	2b01      	cmp	r3, #1
   20450:	d101      	bne.n	20456 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   20452:	2301      	movs	r3, #1
   20454:	e030      	b.n	204b8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   20456:	4b1a      	ldr	r3, [pc, #104]	; (204c0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   20458:	881b      	ldrh	r3, [r3, #0]
   2045a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   2045c:	4b19      	ldr	r3, [pc, #100]	; (204c4 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   2045e:	681a      	ldr	r2, [r3, #0]
   20460:	4b19      	ldr	r3, [pc, #100]	; (204c8 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   20462:	881b      	ldrh	r3, [r3, #0]
   20464:	0019      	movs	r1, r3
   20466:	4b19      	ldr	r3, [pc, #100]	; (204cc <sd_mmc_spi_stop_multiwrite_block+0x88>)
   20468:	0010      	movs	r0, r2
   2046a:	4798      	blx	r3
   2046c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   2046e:	429c      	cmp	r4, r3
   20470:	d901      	bls.n	20476 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   20472:	2301      	movs	r3, #1
   20474:	e020      	b.n	204b8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   20476:	1dfb      	adds	r3, r7, #7
   20478:	22ff      	movs	r2, #255	; 0xff
   2047a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2047c:	1df9      	adds	r1, r7, #7
   2047e:	4b14      	ldr	r3, [pc, #80]	; (204d0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20480:	2201      	movs	r2, #1
   20482:	0018      	movs	r0, r3
   20484:	4b13      	ldr	r3, [pc, #76]	; (204d4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   20486:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   20488:	1dfb      	adds	r3, r7, #7
   2048a:	22fd      	movs	r2, #253	; 0xfd
   2048c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2048e:	1df9      	adds	r1, r7, #7
   20490:	4b0f      	ldr	r3, [pc, #60]	; (204d0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20492:	2201      	movs	r2, #1
   20494:	0018      	movs	r0, r3
   20496:	4b0f      	ldr	r3, [pc, #60]	; (204d4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   20498:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   2049a:	4b0f      	ldr	r3, [pc, #60]	; (204d8 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   2049c:	4798      	blx	r3
   2049e:	0003      	movs	r3, r0
   204a0:	001a      	movs	r2, r3
   204a2:	2301      	movs	r3, #1
   204a4:	4053      	eors	r3, r2
   204a6:	b2db      	uxtb	r3, r3
   204a8:	2b00      	cmp	r3, #0
   204aa:	d004      	beq.n	204b6 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   204ac:	4b0b      	ldr	r3, [pc, #44]	; (204dc <sd_mmc_spi_stop_multiwrite_block+0x98>)
   204ae:	2205      	movs	r2, #5
   204b0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   204b2:	2300      	movs	r3, #0
   204b4:	e000      	b.n	204b8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   204b6:	2301      	movs	r3, #1
}
   204b8:	0018      	movs	r0, r3
   204ba:	46bd      	mov	sp, r7
   204bc:	b003      	add	sp, #12
   204be:	bd90      	pop	{r4, r7, pc}
   204c0:	2000429e 	.word	0x2000429e
   204c4:	20004298 	.word	0x20004298
   204c8:	2000429c 	.word	0x2000429c
   204cc:	00033635 	.word	0x00033635
   204d0:	20004250 	.word	0x20004250
   204d4:	00028d11 	.word	0x00028d11
   204d8:	00020245 	.word	0x00020245
   204dc:	20004293 	.word	0x20004293

000204e0 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   204e0:	b580      	push	{r7, lr}
   204e2:	b090      	sub	sp, #64	; 0x40
   204e4:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   204e6:	4b1f      	ldr	r3, [pc, #124]	; (20564 <sd_mmc_spi_init+0x84>)
   204e8:	2200      	movs	r2, #0
   204ea:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   204ec:	233c      	movs	r3, #60	; 0x3c
   204ee:	18fb      	adds	r3, r7, r3
   204f0:	0018      	movs	r0, r3
   204f2:	4b1d      	ldr	r3, [pc, #116]	; (20568 <sd_mmc_spi_init+0x88>)
   204f4:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   204f6:	1d3b      	adds	r3, r7, #4
   204f8:	0018      	movs	r0, r3
   204fa:	4b1c      	ldr	r3, [pc, #112]	; (2056c <sd_mmc_spi_init+0x8c>)
   204fc:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   204fe:	1d3b      	adds	r3, r7, #4
   20500:	2280      	movs	r2, #128	; 0x80
   20502:	0252      	lsls	r2, r2, #9
   20504:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   20506:	1d3b      	adds	r3, r7, #4
   20508:	4a19      	ldr	r2, [pc, #100]	; (20570 <sd_mmc_spi_init+0x90>)
   2050a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   2050c:	1d3b      	adds	r3, r7, #4
   2050e:	4a19      	ldr	r2, [pc, #100]	; (20574 <sd_mmc_spi_init+0x94>)
   20510:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   20512:	1d3b      	adds	r3, r7, #4
   20514:	4a18      	ldr	r2, [pc, #96]	; (20578 <sd_mmc_spi_init+0x98>)
   20516:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   20518:	1d3b      	adds	r3, r7, #4
   2051a:	4a18      	ldr	r2, [pc, #96]	; (2057c <sd_mmc_spi_init+0x9c>)
   2051c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   2051e:	1d3b      	adds	r3, r7, #4
   20520:	2224      	movs	r2, #36	; 0x24
   20522:	2100      	movs	r1, #0
   20524:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   20526:	1d3b      	adds	r3, r7, #4
   20528:	4a15      	ldr	r2, [pc, #84]	; (20580 <sd_mmc_spi_init+0xa0>)
   2052a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   2052c:	1d3a      	adds	r2, r7, #4
   2052e:	4915      	ldr	r1, [pc, #84]	; (20584 <sd_mmc_spi_init+0xa4>)
   20530:	4b15      	ldr	r3, [pc, #84]	; (20588 <sd_mmc_spi_init+0xa8>)
   20532:	0018      	movs	r0, r3
   20534:	4b15      	ldr	r3, [pc, #84]	; (2058c <sd_mmc_spi_init+0xac>)
   20536:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   20538:	4b13      	ldr	r3, [pc, #76]	; (20588 <sd_mmc_spi_init+0xa8>)
   2053a:	0018      	movs	r0, r3
   2053c:	4b14      	ldr	r3, [pc, #80]	; (20590 <sd_mmc_spi_init+0xb0>)
   2053e:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   20540:	4b14      	ldr	r3, [pc, #80]	; (20594 <sd_mmc_spi_init+0xb4>)
   20542:	0018      	movs	r0, r3
   20544:	4b14      	ldr	r3, [pc, #80]	; (20598 <sd_mmc_spi_init+0xb8>)
   20546:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   20548:	4b14      	ldr	r3, [pc, #80]	; (2059c <sd_mmc_spi_init+0xbc>)
   2054a:	781a      	ldrb	r2, [r3, #0]
   2054c:	4b11      	ldr	r3, [pc, #68]	; (20594 <sd_mmc_spi_init+0xb4>)
   2054e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   20550:	4a10      	ldr	r2, [pc, #64]	; (20594 <sd_mmc_spi_init+0xb4>)
   20552:	4b13      	ldr	r3, [pc, #76]	; (205a0 <sd_mmc_spi_init+0xc0>)
   20554:	0011      	movs	r1, r2
   20556:	0018      	movs	r0, r3
   20558:	4b12      	ldr	r3, [pc, #72]	; (205a4 <sd_mmc_spi_init+0xc4>)
   2055a:	4798      	blx	r3
}
   2055c:	46c0      	nop			; (mov r8, r8)
   2055e:	46bd      	mov	sp, r7
   20560:	b010      	add	sp, #64	; 0x40
   20562:	bd80      	pop	{r7, pc}
   20564:	20004293 	.word	0x20004293
   20568:	0001ff95 	.word	0x0001ff95
   2056c:	0002002d 	.word	0x0002002d
   20570:	00100002 	.word	0x00100002
   20574:	00110002 	.word	0x00110002
   20578:	00120002 	.word	0x00120002
   2057c:	00130002 	.word	0x00130002
   20580:	00061a80 	.word	0x00061a80
   20584:	42000c00 	.word	0x42000c00
   20588:	20004250 	.word	0x20004250
   2058c:	0002895d 	.word	0x0002895d
   20590:	00020139 	.word	0x00020139
   20594:	20004290 	.word	0x20004290
   20598:	000200b1 	.word	0x000200b1
   2059c:	20000118 	.word	0x20000118
   205a0:	2000428c 	.word	0x2000428c
   205a4:	000200d5 	.word	0x000200d5

000205a8 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   205a8:	b590      	push	{r4, r7, lr}
   205aa:	b083      	sub	sp, #12
   205ac:	af00      	add	r7, sp, #0
   205ae:	0004      	movs	r4, r0
   205b0:	6039      	str	r1, [r7, #0]
   205b2:	0010      	movs	r0, r2
   205b4:	0019      	movs	r1, r3
   205b6:	1dfb      	adds	r3, r7, #7
   205b8:	1c22      	adds	r2, r4, #0
   205ba:	701a      	strb	r2, [r3, #0]
   205bc:	1dbb      	adds	r3, r7, #6
   205be:	1c02      	adds	r2, r0, #0
   205c0:	701a      	strb	r2, [r3, #0]
   205c2:	1d7b      	adds	r3, r7, #5
   205c4:	1c0a      	adds	r2, r1, #0
   205c6:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   205c8:	4b13      	ldr	r3, [pc, #76]	; (20618 <sd_mmc_spi_select_device+0x70>)
   205ca:	2200      	movs	r2, #0
   205cc:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   205ce:	683b      	ldr	r3, [r7, #0]
   205d0:	4a12      	ldr	r2, [pc, #72]	; (2061c <sd_mmc_spi_select_device+0x74>)
   205d2:	4293      	cmp	r3, r2
   205d4:	d907      	bls.n	205e6 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   205d6:	4b11      	ldr	r3, [pc, #68]	; (2061c <sd_mmc_spi_select_device+0x74>)
   205d8:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   205da:	e004      	b.n	205e6 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   205dc:	683b      	ldr	r3, [r7, #0]
   205de:	08db      	lsrs	r3, r3, #3
   205e0:	683a      	ldr	r2, [r7, #0]
   205e2:	1ad3      	subs	r3, r2, r3
   205e4:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   205e6:	683a      	ldr	r2, [r7, #0]
   205e8:	4b0d      	ldr	r3, [pc, #52]	; (20620 <sd_mmc_spi_select_device+0x78>)
   205ea:	0011      	movs	r1, r2
   205ec:	0018      	movs	r0, r3
   205ee:	4b0d      	ldr	r3, [pc, #52]	; (20624 <sd_mmc_spi_select_device+0x7c>)
   205f0:	4798      	blx	r3
   205f2:	0003      	movs	r3, r0
   205f4:	2b17      	cmp	r3, #23
   205f6:	d0f1      	beq.n	205dc <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   205f8:	1dfb      	adds	r3, r7, #7
   205fa:	781a      	ldrb	r2, [r3, #0]
   205fc:	0013      	movs	r3, r2
   205fe:	005b      	lsls	r3, r3, #1
   20600:	189b      	adds	r3, r3, r2
   20602:	4a09      	ldr	r2, [pc, #36]	; (20628 <sd_mmc_spi_select_device+0x80>)
   20604:	1899      	adds	r1, r3, r2
   20606:	4b06      	ldr	r3, [pc, #24]	; (20620 <sd_mmc_spi_select_device+0x78>)
   20608:	2201      	movs	r2, #1
   2060a:	0018      	movs	r0, r3
   2060c:	4b07      	ldr	r3, [pc, #28]	; (2062c <sd_mmc_spi_select_device+0x84>)
   2060e:	4798      	blx	r3
}
   20610:	46c0      	nop			; (mov r8, r8)
   20612:	46bd      	mov	sp, r7
   20614:	b003      	add	sp, #12
   20616:	bd90      	pop	{r4, r7, pc}
   20618:	20004293 	.word	0x20004293
   2061c:	00989680 	.word	0x00989680
   20620:	20004250 	.word	0x20004250
   20624:	00028685 	.word	0x00028685
   20628:	2000428c 	.word	0x2000428c
   2062c:	00028c21 	.word	0x00028c21

00020630 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   20630:	b580      	push	{r7, lr}
   20632:	b082      	sub	sp, #8
   20634:	af00      	add	r7, sp, #0
   20636:	0002      	movs	r2, r0
   20638:	1dfb      	adds	r3, r7, #7
   2063a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2063c:	4b09      	ldr	r3, [pc, #36]	; (20664 <sd_mmc_spi_deselect_device+0x34>)
   2063e:	2200      	movs	r2, #0
   20640:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   20642:	1dfb      	adds	r3, r7, #7
   20644:	781a      	ldrb	r2, [r3, #0]
   20646:	0013      	movs	r3, r2
   20648:	005b      	lsls	r3, r3, #1
   2064a:	189b      	adds	r3, r3, r2
   2064c:	4a06      	ldr	r2, [pc, #24]	; (20668 <sd_mmc_spi_deselect_device+0x38>)
   2064e:	1899      	adds	r1, r3, r2
   20650:	4b06      	ldr	r3, [pc, #24]	; (2066c <sd_mmc_spi_deselect_device+0x3c>)
   20652:	2200      	movs	r2, #0
   20654:	0018      	movs	r0, r3
   20656:	4b06      	ldr	r3, [pc, #24]	; (20670 <sd_mmc_spi_deselect_device+0x40>)
   20658:	4798      	blx	r3
}
   2065a:	46c0      	nop			; (mov r8, r8)
   2065c:	46bd      	mov	sp, r7
   2065e:	b002      	add	sp, #8
   20660:	bd80      	pop	{r7, pc}
   20662:	46c0      	nop			; (mov r8, r8)
   20664:	20004293 	.word	0x20004293
   20668:	2000428c 	.word	0x2000428c
   2066c:	20004250 	.word	0x20004250
   20670:	00028c21 	.word	0x00028c21

00020674 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   20674:	b580      	push	{r7, lr}
   20676:	b082      	sub	sp, #8
   20678:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   2067a:	1dbb      	adds	r3, r7, #6
   2067c:	22ff      	movs	r2, #255	; 0xff
   2067e:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20680:	4b0c      	ldr	r3, [pc, #48]	; (206b4 <sd_mmc_spi_send_clock+0x40>)
   20682:	2200      	movs	r2, #0
   20684:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   20686:	1dfb      	adds	r3, r7, #7
   20688:	2200      	movs	r2, #0
   2068a:	701a      	strb	r2, [r3, #0]
   2068c:	e00a      	b.n	206a4 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   2068e:	1db9      	adds	r1, r7, #6
   20690:	4b09      	ldr	r3, [pc, #36]	; (206b8 <sd_mmc_spi_send_clock+0x44>)
   20692:	2201      	movs	r2, #1
   20694:	0018      	movs	r0, r3
   20696:	4b09      	ldr	r3, [pc, #36]	; (206bc <sd_mmc_spi_send_clock+0x48>)
   20698:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   2069a:	1dfb      	adds	r3, r7, #7
   2069c:	781a      	ldrb	r2, [r3, #0]
   2069e:	1dfb      	adds	r3, r7, #7
   206a0:	3201      	adds	r2, #1
   206a2:	701a      	strb	r2, [r3, #0]
   206a4:	1dfb      	adds	r3, r7, #7
   206a6:	781b      	ldrb	r3, [r3, #0]
   206a8:	2b09      	cmp	r3, #9
   206aa:	d9f0      	bls.n	2068e <sd_mmc_spi_send_clock+0x1a>
	}
}
   206ac:	46c0      	nop			; (mov r8, r8)
   206ae:	46bd      	mov	sp, r7
   206b0:	b002      	add	sp, #8
   206b2:	bd80      	pop	{r7, pc}
   206b4:	20004293 	.word	0x20004293
   206b8:	20004250 	.word	0x20004250
   206bc:	00028d11 	.word	0x00028d11

000206c0 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   206c0:	b590      	push	{r4, r7, lr}
   206c2:	b085      	sub	sp, #20
   206c4:	af02      	add	r7, sp, #8
   206c6:	6078      	str	r0, [r7, #4]
   206c8:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   206ca:	6839      	ldr	r1, [r7, #0]
   206cc:	6878      	ldr	r0, [r7, #4]
   206ce:	2300      	movs	r3, #0
   206d0:	9300      	str	r3, [sp, #0]
   206d2:	2300      	movs	r3, #0
   206d4:	2200      	movs	r2, #0
   206d6:	4c03      	ldr	r4, [pc, #12]	; (206e4 <sd_mmc_spi_send_cmd+0x24>)
   206d8:	47a0      	blx	r4
   206da:	0003      	movs	r3, r0
}
   206dc:	0018      	movs	r0, r3
   206de:	46bd      	mov	sp, r7
   206e0:	b003      	add	sp, #12
   206e2:	bd90      	pop	{r4, r7, pc}
   206e4:	000206e9 	.word	0x000206e9

000206e8 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   206e8:	b590      	push	{r4, r7, lr}
   206ea:	b089      	sub	sp, #36	; 0x24
   206ec:	af00      	add	r7, sp, #0
   206ee:	60f8      	str	r0, [r7, #12]
   206f0:	60b9      	str	r1, [r7, #8]
   206f2:	0019      	movs	r1, r3
   206f4:	1dbb      	adds	r3, r7, #6
   206f6:	801a      	strh	r2, [r3, #0]
   206f8:	1d3b      	adds	r3, r7, #4
   206fa:	1c0a      	adds	r2, r1, #0
   206fc:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   206fe:	231b      	movs	r3, #27
   20700:	18fb      	adds	r3, r7, r3
   20702:	22ff      	movs	r2, #255	; 0xff
   20704:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   20706:	231c      	movs	r3, #28
   20708:	18fb      	adds	r3, r7, r3
   2070a:	22ff      	movs	r2, #255	; 0xff
   2070c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2070e:	4b72      	ldr	r3, [pc, #456]	; (208d8 <sd_mmc_spi_adtc_start+0x1f0>)
   20710:	2200      	movs	r2, #0
   20712:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   20714:	68fb      	ldr	r3, [r7, #12]
   20716:	b2db      	uxtb	r3, r3
   20718:	223f      	movs	r2, #63	; 0x3f
   2071a:	4013      	ands	r3, r2
   2071c:	b2db      	uxtb	r3, r3
   2071e:	2240      	movs	r2, #64	; 0x40
   20720:	4313      	orrs	r3, r2
   20722:	b2da      	uxtb	r2, r3
   20724:	2314      	movs	r3, #20
   20726:	18fb      	adds	r3, r7, r3
   20728:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   2072a:	68bb      	ldr	r3, [r7, #8]
   2072c:	0e1b      	lsrs	r3, r3, #24
   2072e:	b2da      	uxtb	r2, r3
   20730:	2314      	movs	r3, #20
   20732:	18fb      	adds	r3, r7, r3
   20734:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   20736:	68bb      	ldr	r3, [r7, #8]
   20738:	0c1b      	lsrs	r3, r3, #16
   2073a:	b2da      	uxtb	r2, r3
   2073c:	2314      	movs	r3, #20
   2073e:	18fb      	adds	r3, r7, r3
   20740:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   20742:	68bb      	ldr	r3, [r7, #8]
   20744:	0a1b      	lsrs	r3, r3, #8
   20746:	b2da      	uxtb	r2, r3
   20748:	2314      	movs	r3, #20
   2074a:	18fb      	adds	r3, r7, r3
   2074c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   2074e:	68bb      	ldr	r3, [r7, #8]
   20750:	b2da      	uxtb	r2, r3
   20752:	2314      	movs	r3, #20
   20754:	18fb      	adds	r3, r7, r3
   20756:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   20758:	2314      	movs	r3, #20
   2075a:	18fb      	adds	r3, r7, r3
   2075c:	2105      	movs	r1, #5
   2075e:	0018      	movs	r0, r3
   20760:	4b5e      	ldr	r3, [pc, #376]	; (208dc <sd_mmc_spi_adtc_start+0x1f4>)
   20762:	4798      	blx	r3
   20764:	0003      	movs	r3, r0
   20766:	001a      	movs	r2, r3
   20768:	2314      	movs	r3, #20
   2076a:	18fb      	adds	r3, r7, r3
   2076c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   2076e:	231b      	movs	r3, #27
   20770:	18f9      	adds	r1, r7, r3
   20772:	4b5b      	ldr	r3, [pc, #364]	; (208e0 <sd_mmc_spi_adtc_start+0x1f8>)
   20774:	2201      	movs	r2, #1
   20776:	0018      	movs	r0, r3
   20778:	4b5a      	ldr	r3, [pc, #360]	; (208e4 <sd_mmc_spi_adtc_start+0x1fc>)
   2077a:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   2077c:	2314      	movs	r3, #20
   2077e:	18f9      	adds	r1, r7, r3
   20780:	4b57      	ldr	r3, [pc, #348]	; (208e0 <sd_mmc_spi_adtc_start+0x1f8>)
   20782:	2206      	movs	r2, #6
   20784:	0018      	movs	r0, r3
   20786:	4b57      	ldr	r3, [pc, #348]	; (208e4 <sd_mmc_spi_adtc_start+0x1fc>)
   20788:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   2078a:	2313      	movs	r3, #19
   2078c:	18fb      	adds	r3, r7, r3
   2078e:	22ff      	movs	r2, #255	; 0xff
   20790:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   20792:	231c      	movs	r3, #28
   20794:	18fb      	adds	r3, r7, r3
   20796:	881b      	ldrh	r3, [r3, #0]
   20798:	2213      	movs	r2, #19
   2079a:	18b9      	adds	r1, r7, r2
   2079c:	4850      	ldr	r0, [pc, #320]	; (208e0 <sd_mmc_spi_adtc_start+0x1f8>)
   2079e:	2201      	movs	r2, #1
   207a0:	4c51      	ldr	r4, [pc, #324]	; (208e8 <sd_mmc_spi_adtc_start+0x200>)
   207a2:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   207a4:	231f      	movs	r3, #31
   207a6:	18fb      	adds	r3, r7, r3
   207a8:	2207      	movs	r2, #7
   207aa:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   207ac:	231c      	movs	r3, #28
   207ae:	18fb      	adds	r3, r7, r3
   207b0:	881b      	ldrh	r3, [r3, #0]
   207b2:	2213      	movs	r2, #19
   207b4:	18b9      	adds	r1, r7, r2
   207b6:	484a      	ldr	r0, [pc, #296]	; (208e0 <sd_mmc_spi_adtc_start+0x1f8>)
   207b8:	2201      	movs	r2, #1
   207ba:	4c4b      	ldr	r4, [pc, #300]	; (208e8 <sd_mmc_spi_adtc_start+0x200>)
   207bc:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   207be:	2313      	movs	r3, #19
   207c0:	18fb      	adds	r3, r7, r3
   207c2:	781b      	ldrb	r3, [r3, #0]
   207c4:	b25b      	sxtb	r3, r3
   207c6:	2b00      	cmp	r3, #0
   207c8:	da10      	bge.n	207ec <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   207ca:	231f      	movs	r3, #31
   207cc:	18fb      	adds	r3, r7, r3
   207ce:	221f      	movs	r2, #31
   207d0:	18ba      	adds	r2, r7, r2
   207d2:	7812      	ldrb	r2, [r2, #0]
   207d4:	3a01      	subs	r2, #1
   207d6:	701a      	strb	r2, [r3, #0]
   207d8:	231f      	movs	r3, #31
   207da:	18fb      	adds	r3, r7, r3
   207dc:	781b      	ldrb	r3, [r3, #0]
   207de:	2b00      	cmp	r3, #0
   207e0:	d1e4      	bne.n	207ac <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   207e2:	4b3d      	ldr	r3, [pc, #244]	; (208d8 <sd_mmc_spi_adtc_start+0x1f0>)
   207e4:	2202      	movs	r2, #2
   207e6:	701a      	strb	r2, [r3, #0]
			return false;
   207e8:	2300      	movs	r3, #0
   207ea:	e070      	b.n	208ce <sd_mmc_spi_adtc_start+0x1e6>
			break;
   207ec:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   207ee:	2313      	movs	r3, #19
   207f0:	18fb      	adds	r3, r7, r3
   207f2:	781b      	ldrb	r3, [r3, #0]
   207f4:	001a      	movs	r2, r3
   207f6:	4b3d      	ldr	r3, [pc, #244]	; (208ec <sd_mmc_spi_adtc_start+0x204>)
   207f8:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   207fa:	2313      	movs	r3, #19
   207fc:	18fb      	adds	r3, r7, r3
   207fe:	781b      	ldrb	r3, [r3, #0]
   20800:	001a      	movs	r2, r3
   20802:	2308      	movs	r3, #8
   20804:	4013      	ands	r3, r2
   20806:	d004      	beq.n	20812 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   20808:	4b33      	ldr	r3, [pc, #204]	; (208d8 <sd_mmc_spi_adtc_start+0x1f0>)
   2080a:	2206      	movs	r2, #6
   2080c:	701a      	strb	r2, [r3, #0]
		return false;
   2080e:	2300      	movs	r3, #0
   20810:	e05d      	b.n	208ce <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   20812:	2313      	movs	r3, #19
   20814:	18fb      	adds	r3, r7, r3
   20816:	781b      	ldrb	r3, [r3, #0]
   20818:	001a      	movs	r2, r3
   2081a:	2304      	movs	r3, #4
   2081c:	4013      	ands	r3, r2
   2081e:	d004      	beq.n	2082a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   20820:	4b2d      	ldr	r3, [pc, #180]	; (208d8 <sd_mmc_spi_adtc_start+0x1f0>)
   20822:	2209      	movs	r2, #9
   20824:	701a      	strb	r2, [r3, #0]
		return false;
   20826:	2300      	movs	r3, #0
   20828:	e051      	b.n	208ce <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   2082a:	2313      	movs	r3, #19
   2082c:	18fb      	adds	r3, r7, r3
   2082e:	781b      	ldrb	r3, [r3, #0]
   20830:	001a      	movs	r2, r3
   20832:	2301      	movs	r3, #1
   20834:	439a      	bics	r2, r3
   20836:	1e13      	subs	r3, r2, #0
   20838:	d004      	beq.n	20844 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   2083a:	4b27      	ldr	r3, [pc, #156]	; (208d8 <sd_mmc_spi_adtc_start+0x1f0>)
   2083c:	2201      	movs	r2, #1
   2083e:	701a      	strb	r2, [r3, #0]
		return false;
   20840:	2300      	movs	r3, #0
   20842:	e044      	b.n	208ce <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   20844:	68fa      	ldr	r2, [r7, #12]
   20846:	2380      	movs	r3, #128	; 0x80
   20848:	019b      	lsls	r3, r3, #6
   2084a:	4013      	ands	r3, r2
   2084c:	d00d      	beq.n	2086a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   2084e:	4b28      	ldr	r3, [pc, #160]	; (208f0 <sd_mmc_spi_adtc_start+0x208>)
   20850:	4798      	blx	r3
   20852:	0003      	movs	r3, r0
   20854:	001a      	movs	r2, r3
   20856:	2301      	movs	r3, #1
   20858:	4053      	eors	r3, r2
   2085a:	b2db      	uxtb	r3, r3
   2085c:	2b00      	cmp	r3, #0
   2085e:	d004      	beq.n	2086a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   20860:	4b1d      	ldr	r3, [pc, #116]	; (208d8 <sd_mmc_spi_adtc_start+0x1f0>)
   20862:	2203      	movs	r2, #3
   20864:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   20866:	2300      	movs	r3, #0
   20868:	e031      	b.n	208ce <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   2086a:	68fa      	ldr	r2, [r7, #12]
   2086c:	2380      	movs	r3, #128	; 0x80
   2086e:	009b      	lsls	r3, r3, #2
   20870:	4013      	ands	r3, r2
   20872:	d00e      	beq.n	20892 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   20874:	4b1d      	ldr	r3, [pc, #116]	; (208ec <sd_mmc_spi_adtc_start+0x204>)
   20876:	2200      	movs	r2, #0
   20878:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   2087a:	231c      	movs	r3, #28
   2087c:	18fb      	adds	r3, r7, r3
   2087e:	881b      	ldrh	r3, [r3, #0]
   20880:	491a      	ldr	r1, [pc, #104]	; (208ec <sd_mmc_spi_adtc_start+0x204>)
   20882:	4817      	ldr	r0, [pc, #92]	; (208e0 <sd_mmc_spi_adtc_start+0x1f8>)
   20884:	2201      	movs	r2, #1
   20886:	4c18      	ldr	r4, [pc, #96]	; (208e8 <sd_mmc_spi_adtc_start+0x200>)
   20888:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   2088a:	4b18      	ldr	r3, [pc, #96]	; (208ec <sd_mmc_spi_adtc_start+0x204>)
   2088c:	681a      	ldr	r2, [r3, #0]
   2088e:	4b17      	ldr	r3, [pc, #92]	; (208ec <sd_mmc_spi_adtc_start+0x204>)
   20890:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   20892:	68fa      	ldr	r2, [r7, #12]
   20894:	2380      	movs	r3, #128	; 0x80
   20896:	00db      	lsls	r3, r3, #3
   20898:	4013      	ands	r3, r2
   2089a:	d00c      	beq.n	208b6 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   2089c:	231c      	movs	r3, #28
   2089e:	18fb      	adds	r3, r7, r3
   208a0:	881b      	ldrh	r3, [r3, #0]
   208a2:	4912      	ldr	r1, [pc, #72]	; (208ec <sd_mmc_spi_adtc_start+0x204>)
   208a4:	480e      	ldr	r0, [pc, #56]	; (208e0 <sd_mmc_spi_adtc_start+0x1f8>)
   208a6:	2204      	movs	r2, #4
   208a8:	4c0f      	ldr	r4, [pc, #60]	; (208e8 <sd_mmc_spi_adtc_start+0x200>)
   208aa:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   208ac:	4b0f      	ldr	r3, [pc, #60]	; (208ec <sd_mmc_spi_adtc_start+0x204>)
   208ae:	681b      	ldr	r3, [r3, #0]
   208b0:	ba1a      	rev	r2, r3
   208b2:	4b0e      	ldr	r3, [pc, #56]	; (208ec <sd_mmc_spi_adtc_start+0x204>)
   208b4:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   208b6:	4b0f      	ldr	r3, [pc, #60]	; (208f4 <sd_mmc_spi_adtc_start+0x20c>)
   208b8:	1dba      	adds	r2, r7, #6
   208ba:	8812      	ldrh	r2, [r2, #0]
   208bc:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   208be:	4b0e      	ldr	r3, [pc, #56]	; (208f8 <sd_mmc_spi_adtc_start+0x210>)
   208c0:	1d3a      	adds	r2, r7, #4
   208c2:	8812      	ldrh	r2, [r2, #0]
   208c4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   208c6:	4b0d      	ldr	r3, [pc, #52]	; (208fc <sd_mmc_spi_adtc_start+0x214>)
   208c8:	2200      	movs	r2, #0
   208ca:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   208cc:	2301      	movs	r3, #1
}
   208ce:	0018      	movs	r0, r3
   208d0:	46bd      	mov	sp, r7
   208d2:	b009      	add	sp, #36	; 0x24
   208d4:	bd90      	pop	{r4, r7, pc}
   208d6:	46c0      	nop			; (mov r8, r8)
   208d8:	20004293 	.word	0x20004293
   208dc:	00020189 	.word	0x00020189
   208e0:	20004250 	.word	0x20004250
   208e4:	00028d11 	.word	0x00028d11
   208e8:	00028aed 	.word	0x00028aed
   208ec:	20004294 	.word	0x20004294
   208f0:	00020245 	.word	0x00020245
   208f4:	2000429c 	.word	0x2000429c
   208f8:	2000429e 	.word	0x2000429e
   208fc:	20004298 	.word	0x20004298

00020900 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   20900:	b580      	push	{r7, lr}
   20902:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   20904:	4b02      	ldr	r3, [pc, #8]	; (20910 <sd_mmc_spi_get_response+0x10>)
   20906:	681b      	ldr	r3, [r3, #0]
}
   20908:	0018      	movs	r0, r3
   2090a:	46bd      	mov	sp, r7
   2090c:	bd80      	pop	{r7, pc}
   2090e:	46c0      	nop			; (mov r8, r8)
   20910:	20004294 	.word	0x20004294

00020914 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   20914:	b590      	push	{r4, r7, lr}
   20916:	b085      	sub	sp, #20
   20918:	af00      	add	r7, sp, #0
   2091a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   2091c:	230e      	movs	r3, #14
   2091e:	18fb      	adds	r3, r7, r3
   20920:	22ff      	movs	r2, #255	; 0xff
   20922:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20924:	4b1c      	ldr	r3, [pc, #112]	; (20998 <sd_mmc_spi_read_word+0x84>)
   20926:	2200      	movs	r2, #0
   20928:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   2092a:	4b1c      	ldr	r3, [pc, #112]	; (2099c <sd_mmc_spi_read_word+0x88>)
   2092c:	681a      	ldr	r2, [r3, #0]
   2092e:	4b1c      	ldr	r3, [pc, #112]	; (209a0 <sd_mmc_spi_read_word+0x8c>)
   20930:	881b      	ldrh	r3, [r3, #0]
   20932:	0019      	movs	r1, r3
   20934:	4b1b      	ldr	r3, [pc, #108]	; (209a4 <sd_mmc_spi_read_word+0x90>)
   20936:	0010      	movs	r0, r2
   20938:	4798      	blx	r3
   2093a:	1e0b      	subs	r3, r1, #0
   2093c:	d10a      	bne.n	20954 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   2093e:	4b1a      	ldr	r3, [pc, #104]	; (209a8 <sd_mmc_spi_read_word+0x94>)
   20940:	4798      	blx	r3
   20942:	0003      	movs	r3, r0
   20944:	001a      	movs	r2, r3
   20946:	2301      	movs	r3, #1
   20948:	4053      	eors	r3, r2
   2094a:	b2db      	uxtb	r3, r3
   2094c:	2b00      	cmp	r3, #0
   2094e:	d001      	beq.n	20954 <sd_mmc_spi_read_word+0x40>
			return false;
   20950:	2300      	movs	r3, #0
   20952:	e01d      	b.n	20990 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   20954:	230e      	movs	r3, #14
   20956:	18fb      	adds	r3, r7, r3
   20958:	881b      	ldrh	r3, [r3, #0]
   2095a:	1d39      	adds	r1, r7, #4
   2095c:	4813      	ldr	r0, [pc, #76]	; (209ac <sd_mmc_spi_read_word+0x98>)
   2095e:	2204      	movs	r2, #4
   20960:	4c13      	ldr	r4, [pc, #76]	; (209b0 <sd_mmc_spi_read_word+0x9c>)
   20962:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   20964:	687b      	ldr	r3, [r7, #4]
   20966:	687a      	ldr	r2, [r7, #4]
   20968:	6812      	ldr	r2, [r2, #0]
   2096a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   2096c:	4b0b      	ldr	r3, [pc, #44]	; (2099c <sd_mmc_spi_read_word+0x88>)
   2096e:	681b      	ldr	r3, [r3, #0]
   20970:	1d1a      	adds	r2, r3, #4
   20972:	4b0a      	ldr	r3, [pc, #40]	; (2099c <sd_mmc_spi_read_word+0x88>)
   20974:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20976:	4b09      	ldr	r3, [pc, #36]	; (2099c <sd_mmc_spi_read_word+0x88>)
   20978:	681a      	ldr	r2, [r3, #0]
   2097a:	4b09      	ldr	r3, [pc, #36]	; (209a0 <sd_mmc_spi_read_word+0x8c>)
   2097c:	881b      	ldrh	r3, [r3, #0]
   2097e:	0019      	movs	r1, r3
   20980:	4b08      	ldr	r3, [pc, #32]	; (209a4 <sd_mmc_spi_read_word+0x90>)
   20982:	0010      	movs	r0, r2
   20984:	4798      	blx	r3
   20986:	1e0b      	subs	r3, r1, #0
   20988:	d101      	bne.n	2098e <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   2098a:	4b0a      	ldr	r3, [pc, #40]	; (209b4 <sd_mmc_spi_read_word+0xa0>)
   2098c:	4798      	blx	r3
	}
	return true;
   2098e:	2301      	movs	r3, #1
}
   20990:	0018      	movs	r0, r3
   20992:	46bd      	mov	sp, r7
   20994:	b005      	add	sp, #20
   20996:	bd90      	pop	{r4, r7, pc}
   20998:	20004293 	.word	0x20004293
   2099c:	20004298 	.word	0x20004298
   209a0:	2000429c 	.word	0x2000429c
   209a4:	00033741 	.word	0x00033741
   209a8:	000202b1 	.word	0x000202b1
   209ac:	20004250 	.word	0x20004250
   209b0:	00028aed 	.word	0x00028aed
   209b4:	00020335 	.word	0x00020335

000209b8 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   209b8:	b590      	push	{r4, r7, lr}
   209ba:	b085      	sub	sp, #20
   209bc:	af00      	add	r7, sp, #0
   209be:	6078      	str	r0, [r7, #4]
   209c0:	000a      	movs	r2, r1
   209c2:	1cbb      	adds	r3, r7, #2
   209c4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   209c6:	230a      	movs	r3, #10
   209c8:	18fb      	adds	r3, r7, r3
   209ca:	22ff      	movs	r2, #255	; 0xff
   209cc:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   209ce:	4b1c      	ldr	r3, [pc, #112]	; (20a40 <sd_mmc_spi_start_read_blocks+0x88>)
   209d0:	2200      	movs	r2, #0
   209d2:	701a      	strb	r2, [r3, #0]
	pos = 0;
   209d4:	2300      	movs	r3, #0
   209d6:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   209d8:	e025      	b.n	20a26 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   209da:	4b1a      	ldr	r3, [pc, #104]	; (20a44 <sd_mmc_spi_start_read_blocks+0x8c>)
   209dc:	4798      	blx	r3
   209de:	0003      	movs	r3, r0
   209e0:	001a      	movs	r2, r3
   209e2:	2301      	movs	r3, #1
   209e4:	4053      	eors	r3, r2
   209e6:	b2db      	uxtb	r3, r3
   209e8:	2b00      	cmp	r3, #0
   209ea:	d001      	beq.n	209f0 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   209ec:	2300      	movs	r3, #0
   209ee:	e022      	b.n	20a36 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   209f0:	687a      	ldr	r2, [r7, #4]
   209f2:	68fb      	ldr	r3, [r7, #12]
   209f4:	18d1      	adds	r1, r2, r3
   209f6:	4b14      	ldr	r3, [pc, #80]	; (20a48 <sd_mmc_spi_start_read_blocks+0x90>)
   209f8:	881a      	ldrh	r2, [r3, #0]
   209fa:	230a      	movs	r3, #10
   209fc:	18fb      	adds	r3, r7, r3
   209fe:	881b      	ldrh	r3, [r3, #0]
   20a00:	4812      	ldr	r0, [pc, #72]	; (20a4c <sd_mmc_spi_start_read_blocks+0x94>)
   20a02:	4c13      	ldr	r4, [pc, #76]	; (20a50 <sd_mmc_spi_start_read_blocks+0x98>)
   20a04:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   20a06:	4b10      	ldr	r3, [pc, #64]	; (20a48 <sd_mmc_spi_start_read_blocks+0x90>)
   20a08:	881b      	ldrh	r3, [r3, #0]
   20a0a:	001a      	movs	r2, r3
   20a0c:	68fb      	ldr	r3, [r7, #12]
   20a0e:	189b      	adds	r3, r3, r2
   20a10:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20a12:	4b0d      	ldr	r3, [pc, #52]	; (20a48 <sd_mmc_spi_start_read_blocks+0x90>)
   20a14:	881b      	ldrh	r3, [r3, #0]
   20a16:	001a      	movs	r2, r3
   20a18:	4b0e      	ldr	r3, [pc, #56]	; (20a54 <sd_mmc_spi_start_read_blocks+0x9c>)
   20a1a:	681b      	ldr	r3, [r3, #0]
   20a1c:	18d2      	adds	r2, r2, r3
   20a1e:	4b0d      	ldr	r3, [pc, #52]	; (20a54 <sd_mmc_spi_start_read_blocks+0x9c>)
   20a20:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   20a22:	4b0d      	ldr	r3, [pc, #52]	; (20a58 <sd_mmc_spi_start_read_blocks+0xa0>)
   20a24:	4798      	blx	r3
	while (nb_block--) {
   20a26:	1cbb      	adds	r3, r7, #2
   20a28:	881b      	ldrh	r3, [r3, #0]
   20a2a:	1cba      	adds	r2, r7, #2
   20a2c:	1e59      	subs	r1, r3, #1
   20a2e:	8011      	strh	r1, [r2, #0]
   20a30:	2b00      	cmp	r3, #0
   20a32:	d1d2      	bne.n	209da <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   20a34:	2301      	movs	r3, #1
}
   20a36:	0018      	movs	r0, r3
   20a38:	46bd      	mov	sp, r7
   20a3a:	b005      	add	sp, #20
   20a3c:	bd90      	pop	{r4, r7, pc}
   20a3e:	46c0      	nop			; (mov r8, r8)
   20a40:	20004293 	.word	0x20004293
   20a44:	000202b1 	.word	0x000202b1
   20a48:	2000429c 	.word	0x2000429c
   20a4c:	20004250 	.word	0x20004250
   20a50:	00028aed 	.word	0x00028aed
   20a54:	20004298 	.word	0x20004298
   20a58:	00020335 	.word	0x00020335

00020a5c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   20a5c:	b580      	push	{r7, lr}
   20a5e:	af00      	add	r7, sp, #0
	return true;
   20a60:	2301      	movs	r3, #1
}
   20a62:	0018      	movs	r0, r3
   20a64:	46bd      	mov	sp, r7
   20a66:	bd80      	pop	{r7, pc}

00020a68 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   20a68:	b580      	push	{r7, lr}
   20a6a:	b084      	sub	sp, #16
   20a6c:	af00      	add	r7, sp, #0
   20a6e:	6078      	str	r0, [r7, #4]
   20a70:	000a      	movs	r2, r1
   20a72:	1cbb      	adds	r3, r7, #2
   20a74:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20a76:	4b24      	ldr	r3, [pc, #144]	; (20b08 <sd_mmc_spi_start_write_blocks+0xa0>)
   20a78:	2200      	movs	r2, #0
   20a7a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20a7c:	2300      	movs	r3, #0
   20a7e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20a80:	e035      	b.n	20aee <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   20a82:	4b22      	ldr	r3, [pc, #136]	; (20b0c <sd_mmc_spi_start_write_blocks+0xa4>)
   20a84:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   20a86:	687a      	ldr	r2, [r7, #4]
   20a88:	68fb      	ldr	r3, [r7, #12]
   20a8a:	18d1      	adds	r1, r2, r3
   20a8c:	4b20      	ldr	r3, [pc, #128]	; (20b10 <sd_mmc_spi_start_write_blocks+0xa8>)
   20a8e:	881a      	ldrh	r2, [r3, #0]
   20a90:	4b20      	ldr	r3, [pc, #128]	; (20b14 <sd_mmc_spi_start_write_blocks+0xac>)
   20a92:	0018      	movs	r0, r3
   20a94:	4b20      	ldr	r3, [pc, #128]	; (20b18 <sd_mmc_spi_start_write_blocks+0xb0>)
   20a96:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   20a98:	4b1d      	ldr	r3, [pc, #116]	; (20b10 <sd_mmc_spi_start_write_blocks+0xa8>)
   20a9a:	881b      	ldrh	r3, [r3, #0]
   20a9c:	001a      	movs	r2, r3
   20a9e:	68fb      	ldr	r3, [r7, #12]
   20aa0:	189b      	adds	r3, r3, r2
   20aa2:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20aa4:	4b1a      	ldr	r3, [pc, #104]	; (20b10 <sd_mmc_spi_start_write_blocks+0xa8>)
   20aa6:	881b      	ldrh	r3, [r3, #0]
   20aa8:	001a      	movs	r2, r3
   20aaa:	4b1c      	ldr	r3, [pc, #112]	; (20b1c <sd_mmc_spi_start_write_blocks+0xb4>)
   20aac:	681b      	ldr	r3, [r3, #0]
   20aae:	18d2      	adds	r2, r2, r3
   20ab0:	4b1a      	ldr	r3, [pc, #104]	; (20b1c <sd_mmc_spi_start_write_blocks+0xb4>)
   20ab2:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   20ab4:	4b1a      	ldr	r3, [pc, #104]	; (20b20 <sd_mmc_spi_start_write_blocks+0xb8>)
   20ab6:	4798      	blx	r3
   20ab8:	0003      	movs	r3, r0
   20aba:	001a      	movs	r2, r3
   20abc:	2301      	movs	r3, #1
   20abe:	4053      	eors	r3, r2
   20ac0:	b2db      	uxtb	r3, r3
   20ac2:	2b00      	cmp	r3, #0
   20ac4:	d001      	beq.n	20aca <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   20ac6:	2300      	movs	r3, #0
   20ac8:	e019      	b.n	20afe <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   20aca:	1cbb      	adds	r3, r7, #2
   20acc:	881b      	ldrh	r3, [r3, #0]
   20ace:	2b00      	cmp	r3, #0
   20ad0:	d00d      	beq.n	20aee <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   20ad2:	4b14      	ldr	r3, [pc, #80]	; (20b24 <sd_mmc_spi_start_write_blocks+0xbc>)
   20ad4:	4798      	blx	r3
   20ad6:	0003      	movs	r3, r0
   20ad8:	001a      	movs	r2, r3
   20ada:	2301      	movs	r3, #1
   20adc:	4053      	eors	r3, r2
   20ade:	b2db      	uxtb	r3, r3
   20ae0:	2b00      	cmp	r3, #0
   20ae2:	d004      	beq.n	20aee <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20ae4:	4b08      	ldr	r3, [pc, #32]	; (20b08 <sd_mmc_spi_start_write_blocks+0xa0>)
   20ae6:	2205      	movs	r2, #5
   20ae8:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   20aea:	2300      	movs	r3, #0
   20aec:	e007      	b.n	20afe <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   20aee:	1cbb      	adds	r3, r7, #2
   20af0:	881b      	ldrh	r3, [r3, #0]
   20af2:	1cba      	adds	r2, r7, #2
   20af4:	1e59      	subs	r1, r3, #1
   20af6:	8011      	strh	r1, [r2, #0]
   20af8:	2b00      	cmp	r3, #0
   20afa:	d1c2      	bne.n	20a82 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   20afc:	2301      	movs	r3, #1
}
   20afe:	0018      	movs	r0, r3
   20b00:	46bd      	mov	sp, r7
   20b02:	b004      	add	sp, #16
   20b04:	bd80      	pop	{r7, pc}
   20b06:	46c0      	nop			; (mov r8, r8)
   20b08:	20004293 	.word	0x20004293
   20b0c:	00020361 	.word	0x00020361
   20b10:	2000429c 	.word	0x2000429c
   20b14:	20004250 	.word	0x20004250
   20b18:	00028d11 	.word	0x00028d11
   20b1c:	20004298 	.word	0x20004298
   20b20:	000203b1 	.word	0x000203b1
   20b24:	00020245 	.word	0x00020245

00020b28 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   20b28:	b580      	push	{r7, lr}
   20b2a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   20b2c:	4b09      	ldr	r3, [pc, #36]	; (20b54 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   20b2e:	4798      	blx	r3
   20b30:	0003      	movs	r3, r0
   20b32:	001a      	movs	r2, r3
   20b34:	2301      	movs	r3, #1
   20b36:	4053      	eors	r3, r2
   20b38:	b2db      	uxtb	r3, r3
   20b3a:	2b00      	cmp	r3, #0
   20b3c:	d004      	beq.n	20b48 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20b3e:	4b06      	ldr	r3, [pc, #24]	; (20b58 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   20b40:	2205      	movs	r2, #5
   20b42:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   20b44:	2300      	movs	r3, #0
   20b46:	e002      	b.n	20b4e <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   20b48:	4b04      	ldr	r3, [pc, #16]	; (20b5c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   20b4a:	4798      	blx	r3
   20b4c:	0003      	movs	r3, r0
}
   20b4e:	0018      	movs	r0, r3
   20b50:	46bd      	mov	sp, r7
   20b52:	bd80      	pop	{r7, pc}
   20b54:	00020245 	.word	0x00020245
   20b58:	20004293 	.word	0x20004293
   20b5c:	00020445 	.word	0x00020445

00020b60 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   20b60:	b580      	push	{r7, lr}
   20b62:	b082      	sub	sp, #8
   20b64:	af00      	add	r7, sp, #0
   20b66:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   20b68:	687b      	ldr	r3, [r7, #4]
   20b6a:	2b00      	cmp	r3, #0
   20b6c:	d00c      	beq.n	20b88 <delay_cycles+0x28>
		SysTick->LOAD = n;
   20b6e:	4b08      	ldr	r3, [pc, #32]	; (20b90 <delay_cycles+0x30>)
   20b70:	687a      	ldr	r2, [r7, #4]
   20b72:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   20b74:	4b06      	ldr	r3, [pc, #24]	; (20b90 <delay_cycles+0x30>)
   20b76:	2200      	movs	r2, #0
   20b78:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   20b7a:	46c0      	nop			; (mov r8, r8)
   20b7c:	4b04      	ldr	r3, [pc, #16]	; (20b90 <delay_cycles+0x30>)
   20b7e:	681a      	ldr	r2, [r3, #0]
   20b80:	2380      	movs	r3, #128	; 0x80
   20b82:	025b      	lsls	r3, r3, #9
   20b84:	4013      	ands	r3, r2
   20b86:	d0f9      	beq.n	20b7c <delay_cycles+0x1c>
		};
	}
}
   20b88:	46c0      	nop			; (mov r8, r8)
   20b8a:	46bd      	mov	sp, r7
   20b8c:	b002      	add	sp, #8
   20b8e:	bd80      	pop	{r7, pc}
   20b90:	e000e010 	.word	0xe000e010

00020b94 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   20b94:	b580      	push	{r7, lr}
   20b96:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   20b98:	2000      	movs	r0, #0
   20b9a:	4b0f      	ldr	r3, [pc, #60]	; (20bd8 <delay_init+0x44>)
   20b9c:	4798      	blx	r3
   20b9e:	0002      	movs	r2, r0
   20ba0:	4b0e      	ldr	r3, [pc, #56]	; (20bdc <delay_init+0x48>)
   20ba2:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   20ba4:	4b0d      	ldr	r3, [pc, #52]	; (20bdc <delay_init+0x48>)
   20ba6:	6818      	ldr	r0, [r3, #0]
   20ba8:	4b0d      	ldr	r3, [pc, #52]	; (20be0 <delay_init+0x4c>)
   20baa:	22fa      	movs	r2, #250	; 0xfa
   20bac:	0091      	lsls	r1, r2, #2
   20bae:	4798      	blx	r3
   20bb0:	0003      	movs	r3, r0
   20bb2:	001a      	movs	r2, r3
   20bb4:	4b09      	ldr	r3, [pc, #36]	; (20bdc <delay_init+0x48>)
   20bb6:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   20bb8:	4b08      	ldr	r3, [pc, #32]	; (20bdc <delay_init+0x48>)
   20bba:	6818      	ldr	r0, [r3, #0]
   20bbc:	4b08      	ldr	r3, [pc, #32]	; (20be0 <delay_init+0x4c>)
   20bbe:	22fa      	movs	r2, #250	; 0xfa
   20bc0:	0091      	lsls	r1, r2, #2
   20bc2:	4798      	blx	r3
   20bc4:	0003      	movs	r3, r0
   20bc6:	001a      	movs	r2, r3
   20bc8:	4b06      	ldr	r3, [pc, #24]	; (20be4 <delay_init+0x50>)
   20bca:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   20bcc:	4b06      	ldr	r3, [pc, #24]	; (20be8 <delay_init+0x54>)
   20bce:	2205      	movs	r2, #5
   20bd0:	601a      	str	r2, [r3, #0]
}
   20bd2:	46c0      	nop			; (mov r8, r8)
   20bd4:	46bd      	mov	sp, r7
   20bd6:	bd80      	pop	{r7, pc}
   20bd8:	0002a895 	.word	0x0002a895
   20bdc:	2000011c 	.word	0x2000011c
   20be0:	00033635 	.word	0x00033635
   20be4:	20000120 	.word	0x20000120
   20be8:	e000e010 	.word	0xe000e010

00020bec <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   20bec:	b580      	push	{r7, lr}
   20bee:	b082      	sub	sp, #8
   20bf0:	af00      	add	r7, sp, #0
   20bf2:	6078      	str	r0, [r7, #4]
	while (n--) {
   20bf4:	e004      	b.n	20c00 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   20bf6:	4b07      	ldr	r3, [pc, #28]	; (20c14 <delay_cycles_ms+0x28>)
   20bf8:	681b      	ldr	r3, [r3, #0]
   20bfa:	0018      	movs	r0, r3
   20bfc:	4b06      	ldr	r3, [pc, #24]	; (20c18 <delay_cycles_ms+0x2c>)
   20bfe:	4798      	blx	r3
	while (n--) {
   20c00:	687b      	ldr	r3, [r7, #4]
   20c02:	1e5a      	subs	r2, r3, #1
   20c04:	607a      	str	r2, [r7, #4]
   20c06:	2b00      	cmp	r3, #0
   20c08:	d1f5      	bne.n	20bf6 <delay_cycles_ms+0xa>
	}
}
   20c0a:	46c0      	nop			; (mov r8, r8)
   20c0c:	46bd      	mov	sp, r7
   20c0e:	b002      	add	sp, #8
   20c10:	bd80      	pop	{r7, pc}
   20c12:	46c0      	nop			; (mov r8, r8)
   20c14:	2000011c 	.word	0x2000011c
   20c18:	00020b61 	.word	0x00020b61

00020c1c <system_pinmux_get_group_from_gpio_pin>:
{
   20c1c:	b580      	push	{r7, lr}
   20c1e:	b084      	sub	sp, #16
   20c20:	af00      	add	r7, sp, #0
   20c22:	0002      	movs	r2, r0
   20c24:	1dfb      	adds	r3, r7, #7
   20c26:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20c28:	230f      	movs	r3, #15
   20c2a:	18fb      	adds	r3, r7, r3
   20c2c:	1dfa      	adds	r2, r7, #7
   20c2e:	7812      	ldrb	r2, [r2, #0]
   20c30:	09d2      	lsrs	r2, r2, #7
   20c32:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20c34:	230e      	movs	r3, #14
   20c36:	18fb      	adds	r3, r7, r3
   20c38:	1dfa      	adds	r2, r7, #7
   20c3a:	7812      	ldrb	r2, [r2, #0]
   20c3c:	0952      	lsrs	r2, r2, #5
   20c3e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20c40:	4b0d      	ldr	r3, [pc, #52]	; (20c78 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   20c42:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20c44:	230f      	movs	r3, #15
   20c46:	18fb      	adds	r3, r7, r3
   20c48:	781b      	ldrb	r3, [r3, #0]
   20c4a:	2b00      	cmp	r3, #0
   20c4c:	d10f      	bne.n	20c6e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   20c4e:	230f      	movs	r3, #15
   20c50:	18fb      	adds	r3, r7, r3
   20c52:	781b      	ldrb	r3, [r3, #0]
   20c54:	009b      	lsls	r3, r3, #2
   20c56:	2210      	movs	r2, #16
   20c58:	4694      	mov	ip, r2
   20c5a:	44bc      	add	ip, r7
   20c5c:	4463      	add	r3, ip
   20c5e:	3b08      	subs	r3, #8
   20c60:	681a      	ldr	r2, [r3, #0]
   20c62:	230e      	movs	r3, #14
   20c64:	18fb      	adds	r3, r7, r3
   20c66:	781b      	ldrb	r3, [r3, #0]
   20c68:	01db      	lsls	r3, r3, #7
   20c6a:	18d3      	adds	r3, r2, r3
   20c6c:	e000      	b.n	20c70 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   20c6e:	2300      	movs	r3, #0
}
   20c70:	0018      	movs	r0, r3
   20c72:	46bd      	mov	sp, r7
   20c74:	b004      	add	sp, #16
   20c76:	bd80      	pop	{r7, pc}
   20c78:	41004400 	.word	0x41004400

00020c7c <system_interrupt_enable_global>:
{
   20c7c:	b580      	push	{r7, lr}
   20c7e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   20c80:	4b04      	ldr	r3, [pc, #16]	; (20c94 <system_interrupt_enable_global+0x18>)
   20c82:	2201      	movs	r2, #1
   20c84:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   20c86:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   20c8a:	b662      	cpsie	i
}
   20c8c:	46c0      	nop			; (mov r8, r8)
   20c8e:	46bd      	mov	sp, r7
   20c90:	bd80      	pop	{r7, pc}
   20c92:	46c0      	nop			; (mov r8, r8)
   20c94:	20000126 	.word	0x20000126

00020c98 <port_get_group_from_gpio_pin>:
{
   20c98:	b580      	push	{r7, lr}
   20c9a:	b082      	sub	sp, #8
   20c9c:	af00      	add	r7, sp, #0
   20c9e:	0002      	movs	r2, r0
   20ca0:	1dfb      	adds	r3, r7, #7
   20ca2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20ca4:	1dfb      	adds	r3, r7, #7
   20ca6:	781b      	ldrb	r3, [r3, #0]
   20ca8:	0018      	movs	r0, r3
   20caa:	4b03      	ldr	r3, [pc, #12]	; (20cb8 <port_get_group_from_gpio_pin+0x20>)
   20cac:	4798      	blx	r3
   20cae:	0003      	movs	r3, r0
}
   20cb0:	0018      	movs	r0, r3
   20cb2:	46bd      	mov	sp, r7
   20cb4:	b002      	add	sp, #8
   20cb6:	bd80      	pop	{r7, pc}
   20cb8:	00020c1d 	.word	0x00020c1d

00020cbc <port_get_config_defaults>:
{
   20cbc:	b580      	push	{r7, lr}
   20cbe:	b082      	sub	sp, #8
   20cc0:	af00      	add	r7, sp, #0
   20cc2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20cc4:	687b      	ldr	r3, [r7, #4]
   20cc6:	2200      	movs	r2, #0
   20cc8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20cca:	687b      	ldr	r3, [r7, #4]
   20ccc:	2201      	movs	r2, #1
   20cce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20cd0:	687b      	ldr	r3, [r7, #4]
   20cd2:	2200      	movs	r2, #0
   20cd4:	709a      	strb	r2, [r3, #2]
}
   20cd6:	46c0      	nop			; (mov r8, r8)
   20cd8:	46bd      	mov	sp, r7
   20cda:	b002      	add	sp, #8
   20cdc:	bd80      	pop	{r7, pc}
	...

00020ce0 <port_pin_set_output_level>:
{
   20ce0:	b580      	push	{r7, lr}
   20ce2:	b084      	sub	sp, #16
   20ce4:	af00      	add	r7, sp, #0
   20ce6:	0002      	movs	r2, r0
   20ce8:	1dfb      	adds	r3, r7, #7
   20cea:	701a      	strb	r2, [r3, #0]
   20cec:	1dbb      	adds	r3, r7, #6
   20cee:	1c0a      	adds	r2, r1, #0
   20cf0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   20cf2:	1dfb      	adds	r3, r7, #7
   20cf4:	781b      	ldrb	r3, [r3, #0]
   20cf6:	0018      	movs	r0, r3
   20cf8:	4b0d      	ldr	r3, [pc, #52]	; (20d30 <port_pin_set_output_level+0x50>)
   20cfa:	4798      	blx	r3
   20cfc:	0003      	movs	r3, r0
   20cfe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20d00:	1dfb      	adds	r3, r7, #7
   20d02:	781b      	ldrb	r3, [r3, #0]
   20d04:	221f      	movs	r2, #31
   20d06:	4013      	ands	r3, r2
   20d08:	2201      	movs	r2, #1
   20d0a:	409a      	lsls	r2, r3
   20d0c:	0013      	movs	r3, r2
   20d0e:	60bb      	str	r3, [r7, #8]
	if (level) {
   20d10:	1dbb      	adds	r3, r7, #6
   20d12:	781b      	ldrb	r3, [r3, #0]
   20d14:	2b00      	cmp	r3, #0
   20d16:	d003      	beq.n	20d20 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20d18:	68fb      	ldr	r3, [r7, #12]
   20d1a:	68ba      	ldr	r2, [r7, #8]
   20d1c:	619a      	str	r2, [r3, #24]
}
   20d1e:	e002      	b.n	20d26 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   20d20:	68fb      	ldr	r3, [r7, #12]
   20d22:	68ba      	ldr	r2, [r7, #8]
   20d24:	615a      	str	r2, [r3, #20]
}
   20d26:	46c0      	nop			; (mov r8, r8)
   20d28:	46bd      	mov	sp, r7
   20d2a:	b004      	add	sp, #16
   20d2c:	bd80      	pop	{r7, pc}
   20d2e:	46c0      	nop			; (mov r8, r8)
   20d30:	00020c99 	.word	0x00020c99

00020d34 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   20d34:	b580      	push	{r7, lr}
   20d36:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   20d38:	4b04      	ldr	r3, [pc, #16]	; (20d4c <chip_isr+0x18>)
   20d3a:	681b      	ldr	r3, [r3, #0]
   20d3c:	2b00      	cmp	r3, #0
   20d3e:	d002      	beq.n	20d46 <chip_isr+0x12>
		gpfIsr();
   20d40:	4b02      	ldr	r3, [pc, #8]	; (20d4c <chip_isr+0x18>)
   20d42:	681b      	ldr	r3, [r3, #0]
   20d44:	4798      	blx	r3
	}
}
   20d46:	46c0      	nop			; (mov r8, r8)
   20d48:	46bd      	mov	sp, r7
   20d4a:	bd80      	pop	{r7, pc}
   20d4c:	200042a0 	.word	0x200042a0

00020d50 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   20d50:	b580      	push	{r7, lr}
   20d52:	b082      	sub	sp, #8
   20d54:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   20d56:	1d3b      	adds	r3, r7, #4
   20d58:	0018      	movs	r0, r3
   20d5a:	4b10      	ldr	r3, [pc, #64]	; (20d9c <init_chip_pins+0x4c>)
   20d5c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   20d5e:	1d3b      	adds	r3, r7, #4
   20d60:	2201      	movs	r2, #1
   20d62:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   20d64:	1d3b      	adds	r3, r7, #4
   20d66:	0019      	movs	r1, r3
   20d68:	201b      	movs	r0, #27
   20d6a:	4b0d      	ldr	r3, [pc, #52]	; (20da0 <init_chip_pins+0x50>)
   20d6c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   20d6e:	1d3b      	adds	r3, r7, #4
   20d70:	0019      	movs	r1, r3
   20d72:	201c      	movs	r0, #28
   20d74:	4b0a      	ldr	r3, [pc, #40]	; (20da0 <init_chip_pins+0x50>)
   20d76:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   20d78:	1d3b      	adds	r3, r7, #4
   20d7a:	0019      	movs	r1, r3
   20d7c:	2028      	movs	r0, #40	; 0x28
   20d7e:	4b08      	ldr	r3, [pc, #32]	; (20da0 <init_chip_pins+0x50>)
   20d80:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20d82:	2100      	movs	r1, #0
   20d84:	201c      	movs	r0, #28
   20d86:	4b07      	ldr	r3, [pc, #28]	; (20da4 <init_chip_pins+0x54>)
   20d88:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20d8a:	2100      	movs	r1, #0
   20d8c:	201b      	movs	r0, #27
   20d8e:	4b05      	ldr	r3, [pc, #20]	; (20da4 <init_chip_pins+0x54>)
   20d90:	4798      	blx	r3
}
   20d92:	46c0      	nop			; (mov r8, r8)
   20d94:	46bd      	mov	sp, r7
   20d96:	b002      	add	sp, #8
   20d98:	bd80      	pop	{r7, pc}
   20d9a:	46c0      	nop			; (mov r8, r8)
   20d9c:	00020cbd 	.word	0x00020cbd
   20da0:	000274dd 	.word	0x000274dd
   20da4:	00020ce1 	.word	0x00020ce1

00020da8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   20da8:	b580      	push	{r7, lr}
   20daa:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   20dac:	4b0b      	ldr	r3, [pc, #44]	; (20ddc <nm_bsp_init+0x34>)
   20dae:	2200      	movs	r2, #0
   20db0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   20db2:	4b0b      	ldr	r3, [pc, #44]	; (20de0 <nm_bsp_init+0x38>)
   20db4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   20db6:	4b0b      	ldr	r3, [pc, #44]	; (20de4 <nm_bsp_init+0x3c>)
   20db8:	681b      	ldr	r3, [r3, #0]
   20dba:	2201      	movs	r2, #1
   20dbc:	4013      	ands	r3, r2
   20dbe:	d004      	beq.n	20dca <nm_bsp_init+0x22>
   20dc0:	4b08      	ldr	r3, [pc, #32]	; (20de4 <nm_bsp_init+0x3c>)
   20dc2:	681b      	ldr	r3, [r3, #0]
   20dc4:	2202      	movs	r2, #2
   20dc6:	4013      	ands	r3, r2
   20dc8:	d101      	bne.n	20dce <nm_bsp_init+0x26>
	    delay_init();
   20dca:	4b07      	ldr	r3, [pc, #28]	; (20de8 <nm_bsp_init+0x40>)
   20dcc:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   20dce:	4b07      	ldr	r3, [pc, #28]	; (20dec <nm_bsp_init+0x44>)
   20dd0:	4798      	blx	r3

	return M2M_SUCCESS;
   20dd2:	2300      	movs	r3, #0
}
   20dd4:	0018      	movs	r0, r3
   20dd6:	46bd      	mov	sp, r7
   20dd8:	bd80      	pop	{r7, pc}
   20dda:	46c0      	nop			; (mov r8, r8)
   20ddc:	200042a0 	.word	0x200042a0
   20de0:	00020d51 	.word	0x00020d51
   20de4:	e000e010 	.word	0xe000e010
   20de8:	00020b95 	.word	0x00020b95
   20dec:	00020c7d 	.word	0x00020c7d

00020df0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   20df0:	b580      	push	{r7, lr}
   20df2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20df4:	2100      	movs	r1, #0
   20df6:	201c      	movs	r0, #28
   20df8:	4b0b      	ldr	r3, [pc, #44]	; (20e28 <nm_bsp_reset+0x38>)
   20dfa:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20dfc:	2100      	movs	r1, #0
   20dfe:	201b      	movs	r0, #27
   20e00:	4b09      	ldr	r3, [pc, #36]	; (20e28 <nm_bsp_reset+0x38>)
   20e02:	4798      	blx	r3
	nm_bsp_sleep(1);
   20e04:	2001      	movs	r0, #1
   20e06:	4b09      	ldr	r3, [pc, #36]	; (20e2c <nm_bsp_reset+0x3c>)
   20e08:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   20e0a:	2101      	movs	r1, #1
   20e0c:	201c      	movs	r0, #28
   20e0e:	4b06      	ldr	r3, [pc, #24]	; (20e28 <nm_bsp_reset+0x38>)
   20e10:	4798      	blx	r3
	nm_bsp_sleep(10);
   20e12:	200a      	movs	r0, #10
   20e14:	4b05      	ldr	r3, [pc, #20]	; (20e2c <nm_bsp_reset+0x3c>)
   20e16:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   20e18:	2101      	movs	r1, #1
   20e1a:	201b      	movs	r0, #27
   20e1c:	4b02      	ldr	r3, [pc, #8]	; (20e28 <nm_bsp_reset+0x38>)
   20e1e:	4798      	blx	r3
}
   20e20:	46c0      	nop			; (mov r8, r8)
   20e22:	46bd      	mov	sp, r7
   20e24:	bd80      	pop	{r7, pc}
   20e26:	46c0      	nop			; (mov r8, r8)
   20e28:	00020ce1 	.word	0x00020ce1
   20e2c:	00020e31 	.word	0x00020e31

00020e30 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   20e30:	b580      	push	{r7, lr}
   20e32:	b082      	sub	sp, #8
   20e34:	af00      	add	r7, sp, #0
   20e36:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   20e38:	687b      	ldr	r3, [r7, #4]
   20e3a:	0018      	movs	r0, r3
   20e3c:	4b02      	ldr	r3, [pc, #8]	; (20e48 <nm_bsp_sleep+0x18>)
   20e3e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   20e40:	46c0      	nop			; (mov r8, r8)
   20e42:	46bd      	mov	sp, r7
   20e44:	b002      	add	sp, #8
   20e46:	bd80      	pop	{r7, pc}
   20e48:	0001cbe1 	.word	0x0001cbe1

00020e4c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   20e4c:	b580      	push	{r7, lr}
   20e4e:	b086      	sub	sp, #24
   20e50:	af00      	add	r7, sp, #0
   20e52:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   20e54:	4b15      	ldr	r3, [pc, #84]	; (20eac <nm_bsp_register_isr+0x60>)
   20e56:	687a      	ldr	r2, [r7, #4]
   20e58:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   20e5a:	230c      	movs	r3, #12
   20e5c:	18fb      	adds	r3, r7, r3
   20e5e:	0018      	movs	r0, r3
   20e60:	4b13      	ldr	r3, [pc, #76]	; (20eb0 <nm_bsp_register_isr+0x64>)
   20e62:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   20e64:	230c      	movs	r3, #12
   20e66:	18fb      	adds	r3, r7, r3
   20e68:	2229      	movs	r2, #41	; 0x29
   20e6a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   20e6c:	230c      	movs	r3, #12
   20e6e:	18fb      	adds	r3, r7, r3
   20e70:	2200      	movs	r2, #0
   20e72:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   20e74:	230c      	movs	r3, #12
   20e76:	18fb      	adds	r3, r7, r3
   20e78:	2201      	movs	r2, #1
   20e7a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   20e7c:	230c      	movs	r3, #12
   20e7e:	18fb      	adds	r3, r7, r3
   20e80:	2202      	movs	r2, #2
   20e82:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   20e84:	230c      	movs	r3, #12
   20e86:	18fb      	adds	r3, r7, r3
   20e88:	0019      	movs	r1, r3
   20e8a:	2009      	movs	r0, #9
   20e8c:	4b09      	ldr	r3, [pc, #36]	; (20eb4 <nm_bsp_register_isr+0x68>)
   20e8e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   20e90:	4b09      	ldr	r3, [pc, #36]	; (20eb8 <nm_bsp_register_isr+0x6c>)
   20e92:	2200      	movs	r2, #0
   20e94:	2109      	movs	r1, #9
   20e96:	0018      	movs	r0, r3
   20e98:	4b08      	ldr	r3, [pc, #32]	; (20ebc <nm_bsp_register_isr+0x70>)
   20e9a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20e9c:	2100      	movs	r1, #0
   20e9e:	2009      	movs	r0, #9
   20ea0:	4b07      	ldr	r3, [pc, #28]	; (20ec0 <nm_bsp_register_isr+0x74>)
   20ea2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   20ea4:	46c0      	nop			; (mov r8, r8)
   20ea6:	46bd      	mov	sp, r7
   20ea8:	b006      	add	sp, #24
   20eaa:	bd80      	pop	{r7, pc}
   20eac:	200042a0 	.word	0x200042a0
   20eb0:	00027385 	.word	0x00027385
   20eb4:	000273b9 	.word	0x000273b9
   20eb8:	00020d35 	.word	0x00020d35
   20ebc:	00026f85 	.word	0x00026f85
   20ec0:	00026fe9 	.word	0x00026fe9

00020ec4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   20ec4:	b580      	push	{r7, lr}
   20ec6:	b082      	sub	sp, #8
   20ec8:	af00      	add	r7, sp, #0
   20eca:	0002      	movs	r2, r0
   20ecc:	1dfb      	adds	r3, r7, #7
   20ece:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   20ed0:	1dfb      	adds	r3, r7, #7
   20ed2:	781b      	ldrb	r3, [r3, #0]
   20ed4:	2b00      	cmp	r3, #0
   20ed6:	d004      	beq.n	20ee2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20ed8:	2100      	movs	r1, #0
   20eda:	2009      	movs	r0, #9
   20edc:	4b05      	ldr	r3, [pc, #20]	; (20ef4 <nm_bsp_interrupt_ctrl+0x30>)
   20ede:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   20ee0:	e003      	b.n	20eea <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   20ee2:	2100      	movs	r1, #0
   20ee4:	2009      	movs	r0, #9
   20ee6:	4b04      	ldr	r3, [pc, #16]	; (20ef8 <nm_bsp_interrupt_ctrl+0x34>)
   20ee8:	4798      	blx	r3
}
   20eea:	46c0      	nop			; (mov r8, r8)
   20eec:	46bd      	mov	sp, r7
   20eee:	b002      	add	sp, #8
   20ef0:	bd80      	pop	{r7, pc}
   20ef2:	46c0      	nop			; (mov r8, r8)
   20ef4:	00026fe9 	.word	0x00026fe9
   20ef8:	00027031 	.word	0x00027031

00020efc <system_pinmux_get_group_from_gpio_pin>:
{
   20efc:	b580      	push	{r7, lr}
   20efe:	b084      	sub	sp, #16
   20f00:	af00      	add	r7, sp, #0
   20f02:	0002      	movs	r2, r0
   20f04:	1dfb      	adds	r3, r7, #7
   20f06:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20f08:	230f      	movs	r3, #15
   20f0a:	18fb      	adds	r3, r7, r3
   20f0c:	1dfa      	adds	r2, r7, #7
   20f0e:	7812      	ldrb	r2, [r2, #0]
   20f10:	09d2      	lsrs	r2, r2, #7
   20f12:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20f14:	230e      	movs	r3, #14
   20f16:	18fb      	adds	r3, r7, r3
   20f18:	1dfa      	adds	r2, r7, #7
   20f1a:	7812      	ldrb	r2, [r2, #0]
   20f1c:	0952      	lsrs	r2, r2, #5
   20f1e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20f20:	4b0d      	ldr	r3, [pc, #52]	; (20f58 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   20f22:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20f24:	230f      	movs	r3, #15
   20f26:	18fb      	adds	r3, r7, r3
   20f28:	781b      	ldrb	r3, [r3, #0]
   20f2a:	2b00      	cmp	r3, #0
   20f2c:	d10f      	bne.n	20f4e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   20f2e:	230f      	movs	r3, #15
   20f30:	18fb      	adds	r3, r7, r3
   20f32:	781b      	ldrb	r3, [r3, #0]
   20f34:	009b      	lsls	r3, r3, #2
   20f36:	2210      	movs	r2, #16
   20f38:	4694      	mov	ip, r2
   20f3a:	44bc      	add	ip, r7
   20f3c:	4463      	add	r3, ip
   20f3e:	3b08      	subs	r3, #8
   20f40:	681a      	ldr	r2, [r3, #0]
   20f42:	230e      	movs	r3, #14
   20f44:	18fb      	adds	r3, r7, r3
   20f46:	781b      	ldrb	r3, [r3, #0]
   20f48:	01db      	lsls	r3, r3, #7
   20f4a:	18d3      	adds	r3, r2, r3
   20f4c:	e000      	b.n	20f50 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   20f4e:	2300      	movs	r3, #0
}
   20f50:	0018      	movs	r0, r3
   20f52:	46bd      	mov	sp, r7
   20f54:	b004      	add	sp, #16
   20f56:	bd80      	pop	{r7, pc}
   20f58:	41004400 	.word	0x41004400

00020f5c <system_interrupt_enable>:
{
   20f5c:	b580      	push	{r7, lr}
   20f5e:	b082      	sub	sp, #8
   20f60:	af00      	add	r7, sp, #0
   20f62:	0002      	movs	r2, r0
   20f64:	1dfb      	adds	r3, r7, #7
   20f66:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20f68:	4b06      	ldr	r3, [pc, #24]	; (20f84 <system_interrupt_enable+0x28>)
   20f6a:	1dfa      	adds	r2, r7, #7
   20f6c:	7812      	ldrb	r2, [r2, #0]
   20f6e:	0011      	movs	r1, r2
   20f70:	221f      	movs	r2, #31
   20f72:	400a      	ands	r2, r1
   20f74:	2101      	movs	r1, #1
   20f76:	4091      	lsls	r1, r2
   20f78:	000a      	movs	r2, r1
   20f7a:	601a      	str	r2, [r3, #0]
}
   20f7c:	46c0      	nop			; (mov r8, r8)
   20f7e:	46bd      	mov	sp, r7
   20f80:	b002      	add	sp, #8
   20f82:	bd80      	pop	{r7, pc}
   20f84:	e000e100 	.word	0xe000e100

00020f88 <system_interrupt_disable>:
{
   20f88:	b580      	push	{r7, lr}
   20f8a:	b082      	sub	sp, #8
   20f8c:	af00      	add	r7, sp, #0
   20f8e:	0002      	movs	r2, r0
   20f90:	1dfb      	adds	r3, r7, #7
   20f92:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20f94:	4a07      	ldr	r2, [pc, #28]	; (20fb4 <system_interrupt_disable+0x2c>)
   20f96:	1dfb      	adds	r3, r7, #7
   20f98:	781b      	ldrb	r3, [r3, #0]
   20f9a:	0019      	movs	r1, r3
   20f9c:	231f      	movs	r3, #31
   20f9e:	400b      	ands	r3, r1
   20fa0:	2101      	movs	r1, #1
   20fa2:	4099      	lsls	r1, r3
   20fa4:	000b      	movs	r3, r1
   20fa6:	0019      	movs	r1, r3
   20fa8:	2380      	movs	r3, #128	; 0x80
   20faa:	50d1      	str	r1, [r2, r3]
}
   20fac:	46c0      	nop			; (mov r8, r8)
   20fae:	46bd      	mov	sp, r7
   20fb0:	b002      	add	sp, #8
   20fb2:	bd80      	pop	{r7, pc}
   20fb4:	e000e100 	.word	0xe000e100

00020fb8 <port_get_group_from_gpio_pin>:
{
   20fb8:	b580      	push	{r7, lr}
   20fba:	b082      	sub	sp, #8
   20fbc:	af00      	add	r7, sp, #0
   20fbe:	0002      	movs	r2, r0
   20fc0:	1dfb      	adds	r3, r7, #7
   20fc2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20fc4:	1dfb      	adds	r3, r7, #7
   20fc6:	781b      	ldrb	r3, [r3, #0]
   20fc8:	0018      	movs	r0, r3
   20fca:	4b03      	ldr	r3, [pc, #12]	; (20fd8 <port_get_group_from_gpio_pin+0x20>)
   20fcc:	4798      	blx	r3
   20fce:	0003      	movs	r3, r0
}
   20fd0:	0018      	movs	r0, r3
   20fd2:	46bd      	mov	sp, r7
   20fd4:	b002      	add	sp, #8
   20fd6:	bd80      	pop	{r7, pc}
   20fd8:	00020efd 	.word	0x00020efd

00020fdc <port_get_config_defaults>:
{
   20fdc:	b580      	push	{r7, lr}
   20fde:	b082      	sub	sp, #8
   20fe0:	af00      	add	r7, sp, #0
   20fe2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20fe4:	687b      	ldr	r3, [r7, #4]
   20fe6:	2200      	movs	r2, #0
   20fe8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20fea:	687b      	ldr	r3, [r7, #4]
   20fec:	2201      	movs	r2, #1
   20fee:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20ff0:	687b      	ldr	r3, [r7, #4]
   20ff2:	2200      	movs	r2, #0
   20ff4:	709a      	strb	r2, [r3, #2]
}
   20ff6:	46c0      	nop			; (mov r8, r8)
   20ff8:	46bd      	mov	sp, r7
   20ffa:	b002      	add	sp, #8
   20ffc:	bd80      	pop	{r7, pc}
	...

00021000 <port_pin_set_output_level>:
{
   21000:	b580      	push	{r7, lr}
   21002:	b084      	sub	sp, #16
   21004:	af00      	add	r7, sp, #0
   21006:	0002      	movs	r2, r0
   21008:	1dfb      	adds	r3, r7, #7
   2100a:	701a      	strb	r2, [r3, #0]
   2100c:	1dbb      	adds	r3, r7, #6
   2100e:	1c0a      	adds	r2, r1, #0
   21010:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   21012:	1dfb      	adds	r3, r7, #7
   21014:	781b      	ldrb	r3, [r3, #0]
   21016:	0018      	movs	r0, r3
   21018:	4b0d      	ldr	r3, [pc, #52]	; (21050 <port_pin_set_output_level+0x50>)
   2101a:	4798      	blx	r3
   2101c:	0003      	movs	r3, r0
   2101e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   21020:	1dfb      	adds	r3, r7, #7
   21022:	781b      	ldrb	r3, [r3, #0]
   21024:	221f      	movs	r2, #31
   21026:	4013      	ands	r3, r2
   21028:	2201      	movs	r2, #1
   2102a:	409a      	lsls	r2, r3
   2102c:	0013      	movs	r3, r2
   2102e:	60bb      	str	r3, [r7, #8]
	if (level) {
   21030:	1dbb      	adds	r3, r7, #6
   21032:	781b      	ldrb	r3, [r3, #0]
   21034:	2b00      	cmp	r3, #0
   21036:	d003      	beq.n	21040 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   21038:	68fb      	ldr	r3, [r7, #12]
   2103a:	68ba      	ldr	r2, [r7, #8]
   2103c:	619a      	str	r2, [r3, #24]
}
   2103e:	e002      	b.n	21046 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   21040:	68fb      	ldr	r3, [r7, #12]
   21042:	68ba      	ldr	r2, [r7, #8]
   21044:	615a      	str	r2, [r3, #20]
}
   21046:	46c0      	nop			; (mov r8, r8)
   21048:	46bd      	mov	sp, r7
   2104a:	b004      	add	sp, #16
   2104c:	bd80      	pop	{r7, pc}
   2104e:	46c0      	nop			; (mov r8, r8)
   21050:	00020fb9 	.word	0x00020fb9

00021054 <spi_is_syncing>:
{
   21054:	b580      	push	{r7, lr}
   21056:	b084      	sub	sp, #16
   21058:	af00      	add	r7, sp, #0
   2105a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2105c:	687b      	ldr	r3, [r7, #4]
   2105e:	681b      	ldr	r3, [r3, #0]
   21060:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   21062:	68fb      	ldr	r3, [r7, #12]
   21064:	69db      	ldr	r3, [r3, #28]
   21066:	1e5a      	subs	r2, r3, #1
   21068:	4193      	sbcs	r3, r2
   2106a:	b2db      	uxtb	r3, r3
}
   2106c:	0018      	movs	r0, r3
   2106e:	46bd      	mov	sp, r7
   21070:	b004      	add	sp, #16
   21072:	bd80      	pop	{r7, pc}

00021074 <spi_get_config_defaults>:
{
   21074:	b580      	push	{r7, lr}
   21076:	b082      	sub	sp, #8
   21078:	af00      	add	r7, sp, #0
   2107a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   2107c:	687b      	ldr	r3, [r7, #4]
   2107e:	2201      	movs	r2, #1
   21080:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   21082:	687b      	ldr	r3, [r7, #4]
   21084:	2200      	movs	r2, #0
   21086:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   21088:	687b      	ldr	r3, [r7, #4]
   2108a:	2200      	movs	r2, #0
   2108c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   2108e:	687b      	ldr	r3, [r7, #4]
   21090:	22c0      	movs	r2, #192	; 0xc0
   21092:	0392      	lsls	r2, r2, #14
   21094:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   21096:	687b      	ldr	r3, [r7, #4]
   21098:	2200      	movs	r2, #0
   2109a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   2109c:	687b      	ldr	r3, [r7, #4]
   2109e:	2200      	movs	r2, #0
   210a0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   210a2:	687b      	ldr	r3, [r7, #4]
   210a4:	2201      	movs	r2, #1
   210a6:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   210a8:	687b      	ldr	r3, [r7, #4]
   210aa:	2201      	movs	r2, #1
   210ac:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   210ae:	687b      	ldr	r3, [r7, #4]
   210b0:	2200      	movs	r2, #0
   210b2:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   210b4:	687b      	ldr	r3, [r7, #4]
   210b6:	2224      	movs	r2, #36	; 0x24
   210b8:	2100      	movs	r1, #0
   210ba:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   210bc:	687b      	ldr	r3, [r7, #4]
   210be:	3318      	adds	r3, #24
   210c0:	220c      	movs	r2, #12
   210c2:	2100      	movs	r1, #0
   210c4:	0018      	movs	r0, r3
   210c6:	4b0a      	ldr	r3, [pc, #40]	; (210f0 <spi_get_config_defaults+0x7c>)
   210c8:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   210ca:	687b      	ldr	r3, [r7, #4]
   210cc:	4a09      	ldr	r2, [pc, #36]	; (210f4 <spi_get_config_defaults+0x80>)
   210ce:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   210d0:	687b      	ldr	r3, [r7, #4]
   210d2:	2200      	movs	r2, #0
   210d4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   210d6:	687b      	ldr	r3, [r7, #4]
   210d8:	2200      	movs	r2, #0
   210da:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   210dc:	687b      	ldr	r3, [r7, #4]
   210de:	2200      	movs	r2, #0
   210e0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   210e2:	687b      	ldr	r3, [r7, #4]
   210e4:	2200      	movs	r2, #0
   210e6:	635a      	str	r2, [r3, #52]	; 0x34
};
   210e8:	46c0      	nop			; (mov r8, r8)
   210ea:	46bd      	mov	sp, r7
   210ec:	b002      	add	sp, #8
   210ee:	bd80      	pop	{r7, pc}
   210f0:	0003560f 	.word	0x0003560f
   210f4:	000186a0 	.word	0x000186a0

000210f8 <spi_slave_inst_get_config_defaults>:
{
   210f8:	b580      	push	{r7, lr}
   210fa:	b082      	sub	sp, #8
   210fc:	af00      	add	r7, sp, #0
   210fe:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   21100:	687b      	ldr	r3, [r7, #4]
   21102:	220a      	movs	r2, #10
   21104:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   21106:	687b      	ldr	r3, [r7, #4]
   21108:	2200      	movs	r2, #0
   2110a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   2110c:	687b      	ldr	r3, [r7, #4]
   2110e:	2200      	movs	r2, #0
   21110:	709a      	strb	r2, [r3, #2]
}
   21112:	46c0      	nop			; (mov r8, r8)
   21114:	46bd      	mov	sp, r7
   21116:	b002      	add	sp, #8
   21118:	bd80      	pop	{r7, pc}
	...

0002111c <spi_attach_slave>:
{
   2111c:	b580      	push	{r7, lr}
   2111e:	b084      	sub	sp, #16
   21120:	af00      	add	r7, sp, #0
   21122:	6078      	str	r0, [r7, #4]
   21124:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   21126:	683b      	ldr	r3, [r7, #0]
   21128:	781a      	ldrb	r2, [r3, #0]
   2112a:	687b      	ldr	r3, [r7, #4]
   2112c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2112e:	683b      	ldr	r3, [r7, #0]
   21130:	785a      	ldrb	r2, [r3, #1]
   21132:	687b      	ldr	r3, [r7, #4]
   21134:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   21136:	683b      	ldr	r3, [r7, #0]
   21138:	789a      	ldrb	r2, [r3, #2]
   2113a:	687b      	ldr	r3, [r7, #4]
   2113c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   2113e:	230c      	movs	r3, #12
   21140:	18fb      	adds	r3, r7, r3
   21142:	0018      	movs	r0, r3
   21144:	4b0b      	ldr	r3, [pc, #44]	; (21174 <spi_attach_slave+0x58>)
   21146:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   21148:	230c      	movs	r3, #12
   2114a:	18fb      	adds	r3, r7, r3
   2114c:	2201      	movs	r2, #1
   2114e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   21150:	687b      	ldr	r3, [r7, #4]
   21152:	781b      	ldrb	r3, [r3, #0]
   21154:	220c      	movs	r2, #12
   21156:	18ba      	adds	r2, r7, r2
   21158:	0011      	movs	r1, r2
   2115a:	0018      	movs	r0, r3
   2115c:	4b06      	ldr	r3, [pc, #24]	; (21178 <spi_attach_slave+0x5c>)
   2115e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   21160:	687b      	ldr	r3, [r7, #4]
   21162:	781b      	ldrb	r3, [r3, #0]
   21164:	2101      	movs	r1, #1
   21166:	0018      	movs	r0, r3
   21168:	4b04      	ldr	r3, [pc, #16]	; (2117c <spi_attach_slave+0x60>)
   2116a:	4798      	blx	r3
}
   2116c:	46c0      	nop			; (mov r8, r8)
   2116e:	46bd      	mov	sp, r7
   21170:	b004      	add	sp, #16
   21172:	bd80      	pop	{r7, pc}
   21174:	00020fdd 	.word	0x00020fdd
   21178:	000274dd 	.word	0x000274dd
   2117c:	00021001 	.word	0x00021001

00021180 <spi_enable>:
{
   21180:	b580      	push	{r7, lr}
   21182:	b084      	sub	sp, #16
   21184:	af00      	add	r7, sp, #0
   21186:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   21188:	687b      	ldr	r3, [r7, #4]
   2118a:	681b      	ldr	r3, [r3, #0]
   2118c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2118e:	687b      	ldr	r3, [r7, #4]
   21190:	681b      	ldr	r3, [r3, #0]
   21192:	0018      	movs	r0, r3
   21194:	4b0b      	ldr	r3, [pc, #44]	; (211c4 <spi_enable+0x44>)
   21196:	4798      	blx	r3
   21198:	0003      	movs	r3, r0
   2119a:	0018      	movs	r0, r3
   2119c:	4b0a      	ldr	r3, [pc, #40]	; (211c8 <spi_enable+0x48>)
   2119e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   211a0:	46c0      	nop			; (mov r8, r8)
   211a2:	687b      	ldr	r3, [r7, #4]
   211a4:	0018      	movs	r0, r3
   211a6:	4b09      	ldr	r3, [pc, #36]	; (211cc <spi_enable+0x4c>)
   211a8:	4798      	blx	r3
   211aa:	1e03      	subs	r3, r0, #0
   211ac:	d1f9      	bne.n	211a2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   211ae:	68fb      	ldr	r3, [r7, #12]
   211b0:	681b      	ldr	r3, [r3, #0]
   211b2:	2202      	movs	r2, #2
   211b4:	431a      	orrs	r2, r3
   211b6:	68fb      	ldr	r3, [r7, #12]
   211b8:	601a      	str	r2, [r3, #0]
}
   211ba:	46c0      	nop			; (mov r8, r8)
   211bc:	46bd      	mov	sp, r7
   211be:	b004      	add	sp, #16
   211c0:	bd80      	pop	{r7, pc}
   211c2:	46c0      	nop			; (mov r8, r8)
   211c4:	000281ad 	.word	0x000281ad
   211c8:	00020f5d 	.word	0x00020f5d
   211cc:	00021055 	.word	0x00021055

000211d0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   211d0:	b580      	push	{r7, lr}
   211d2:	b084      	sub	sp, #16
   211d4:	af00      	add	r7, sp, #0
   211d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   211d8:	687b      	ldr	r3, [r7, #4]
   211da:	681b      	ldr	r3, [r3, #0]
   211dc:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   211de:	687b      	ldr	r3, [r7, #4]
   211e0:	681b      	ldr	r3, [r3, #0]
   211e2:	0018      	movs	r0, r3
   211e4:	4b0e      	ldr	r3, [pc, #56]	; (21220 <spi_disable+0x50>)
   211e6:	4798      	blx	r3
   211e8:	0003      	movs	r3, r0
   211ea:	0018      	movs	r0, r3
   211ec:	4b0d      	ldr	r3, [pc, #52]	; (21224 <spi_disable+0x54>)
   211ee:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   211f0:	46c0      	nop			; (mov r8, r8)
   211f2:	687b      	ldr	r3, [r7, #4]
   211f4:	0018      	movs	r0, r3
   211f6:	4b0c      	ldr	r3, [pc, #48]	; (21228 <spi_disable+0x58>)
   211f8:	4798      	blx	r3
   211fa:	1e03      	subs	r3, r0, #0
   211fc:	d1f9      	bne.n	211f2 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   211fe:	68fb      	ldr	r3, [r7, #12]
   21200:	228f      	movs	r2, #143	; 0x8f
   21202:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   21204:	68fb      	ldr	r3, [r7, #12]
   21206:	228f      	movs	r2, #143	; 0x8f
   21208:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2120a:	68fb      	ldr	r3, [r7, #12]
   2120c:	681b      	ldr	r3, [r3, #0]
   2120e:	2202      	movs	r2, #2
   21210:	4393      	bics	r3, r2
   21212:	001a      	movs	r2, r3
   21214:	68fb      	ldr	r3, [r7, #12]
   21216:	601a      	str	r2, [r3, #0]
}
   21218:	46c0      	nop			; (mov r8, r8)
   2121a:	46bd      	mov	sp, r7
   2121c:	b004      	add	sp, #16
   2121e:	bd80      	pop	{r7, pc}
   21220:	000281ad 	.word	0x000281ad
   21224:	00020f89 	.word	0x00020f89
   21228:	00021055 	.word	0x00021055

0002122c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   2122c:	b580      	push	{r7, lr}
   2122e:	b084      	sub	sp, #16
   21230:	af00      	add	r7, sp, #0
   21232:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21234:	687b      	ldr	r3, [r7, #4]
   21236:	681b      	ldr	r3, [r3, #0]
   21238:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2123a:	68fb      	ldr	r3, [r7, #12]
   2123c:	7e1b      	ldrb	r3, [r3, #24]
   2123e:	b2db      	uxtb	r3, r3
   21240:	001a      	movs	r2, r3
   21242:	2302      	movs	r3, #2
   21244:	4013      	ands	r3, r2
   21246:	1e5a      	subs	r2, r3, #1
   21248:	4193      	sbcs	r3, r2
   2124a:	b2db      	uxtb	r3, r3
}
   2124c:	0018      	movs	r0, r3
   2124e:	46bd      	mov	sp, r7
   21250:	b004      	add	sp, #16
   21252:	bd80      	pop	{r7, pc}

00021254 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   21254:	b580      	push	{r7, lr}
   21256:	b084      	sub	sp, #16
   21258:	af00      	add	r7, sp, #0
   2125a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2125c:	687b      	ldr	r3, [r7, #4]
   2125e:	681b      	ldr	r3, [r3, #0]
   21260:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   21262:	68fb      	ldr	r3, [r7, #12]
   21264:	7e1b      	ldrb	r3, [r3, #24]
   21266:	b2db      	uxtb	r3, r3
   21268:	001a      	movs	r2, r3
   2126a:	2301      	movs	r3, #1
   2126c:	4013      	ands	r3, r2
   2126e:	1e5a      	subs	r2, r3, #1
   21270:	4193      	sbcs	r3, r2
   21272:	b2db      	uxtb	r3, r3
}
   21274:	0018      	movs	r0, r3
   21276:	46bd      	mov	sp, r7
   21278:	b004      	add	sp, #16
   2127a:	bd80      	pop	{r7, pc}

0002127c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   2127c:	b580      	push	{r7, lr}
   2127e:	b084      	sub	sp, #16
   21280:	af00      	add	r7, sp, #0
   21282:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21284:	687b      	ldr	r3, [r7, #4]
   21286:	681b      	ldr	r3, [r3, #0]
   21288:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2128a:	68fb      	ldr	r3, [r7, #12]
   2128c:	7e1b      	ldrb	r3, [r3, #24]
   2128e:	b2db      	uxtb	r3, r3
   21290:	001a      	movs	r2, r3
   21292:	2304      	movs	r3, #4
   21294:	4013      	ands	r3, r2
   21296:	1e5a      	subs	r2, r3, #1
   21298:	4193      	sbcs	r3, r2
   2129a:	b2db      	uxtb	r3, r3
}
   2129c:	0018      	movs	r0, r3
   2129e:	46bd      	mov	sp, r7
   212a0:	b004      	add	sp, #16
   212a2:	bd80      	pop	{r7, pc}

000212a4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   212a4:	b580      	push	{r7, lr}
   212a6:	b084      	sub	sp, #16
   212a8:	af00      	add	r7, sp, #0
   212aa:	6078      	str	r0, [r7, #4]
   212ac:	000a      	movs	r2, r1
   212ae:	1cbb      	adds	r3, r7, #2
   212b0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   212b2:	687b      	ldr	r3, [r7, #4]
   212b4:	681b      	ldr	r3, [r3, #0]
   212b6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   212b8:	687b      	ldr	r3, [r7, #4]
   212ba:	0018      	movs	r0, r3
   212bc:	4b0a      	ldr	r3, [pc, #40]	; (212e8 <spi_write+0x44>)
   212be:	4798      	blx	r3
   212c0:	0003      	movs	r3, r0
   212c2:	001a      	movs	r2, r3
   212c4:	2301      	movs	r3, #1
   212c6:	4053      	eors	r3, r2
   212c8:	b2db      	uxtb	r3, r3
   212ca:	2b00      	cmp	r3, #0
   212cc:	d001      	beq.n	212d2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   212ce:	2305      	movs	r3, #5
   212d0:	e006      	b.n	212e0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   212d2:	1cbb      	adds	r3, r7, #2
   212d4:	881b      	ldrh	r3, [r3, #0]
   212d6:	05db      	lsls	r3, r3, #23
   212d8:	0dda      	lsrs	r2, r3, #23
   212da:	68fb      	ldr	r3, [r7, #12]
   212dc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   212de:	2300      	movs	r3, #0
}
   212e0:	0018      	movs	r0, r3
   212e2:	46bd      	mov	sp, r7
   212e4:	b004      	add	sp, #16
   212e6:	bd80      	pop	{r7, pc}
   212e8:	00021255 	.word	0x00021255

000212ec <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   212ec:	b580      	push	{r7, lr}
   212ee:	b084      	sub	sp, #16
   212f0:	af00      	add	r7, sp, #0
   212f2:	6078      	str	r0, [r7, #4]
   212f4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   212f6:	687b      	ldr	r3, [r7, #4]
   212f8:	681b      	ldr	r3, [r3, #0]
   212fa:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   212fc:	687b      	ldr	r3, [r7, #4]
   212fe:	0018      	movs	r0, r3
   21300:	4b1b      	ldr	r3, [pc, #108]	; (21370 <spi_read+0x84>)
   21302:	4798      	blx	r3
   21304:	0003      	movs	r3, r0
   21306:	001a      	movs	r2, r3
   21308:	2301      	movs	r3, #1
   2130a:	4053      	eors	r3, r2
   2130c:	b2db      	uxtb	r3, r3
   2130e:	2b00      	cmp	r3, #0
   21310:	d001      	beq.n	21316 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   21312:	2310      	movs	r3, #16
   21314:	e027      	b.n	21366 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   21316:	230f      	movs	r3, #15
   21318:	18fb      	adds	r3, r7, r3
   2131a:	2200      	movs	r2, #0
   2131c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2131e:	68bb      	ldr	r3, [r7, #8]
   21320:	8b5b      	ldrh	r3, [r3, #26]
   21322:	b29b      	uxth	r3, r3
   21324:	001a      	movs	r2, r3
   21326:	2304      	movs	r3, #4
   21328:	4013      	ands	r3, r2
   2132a:	d006      	beq.n	2133a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2132c:	230f      	movs	r3, #15
   2132e:	18fb      	adds	r3, r7, r3
   21330:	221e      	movs	r2, #30
   21332:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   21334:	68bb      	ldr	r3, [r7, #8]
   21336:	2204      	movs	r2, #4
   21338:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2133a:	687b      	ldr	r3, [r7, #4]
   2133c:	799b      	ldrb	r3, [r3, #6]
   2133e:	2b01      	cmp	r3, #1
   21340:	d108      	bne.n	21354 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   21342:	68bb      	ldr	r3, [r7, #8]
   21344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21346:	b29b      	uxth	r3, r3
   21348:	05db      	lsls	r3, r3, #23
   2134a:	0ddb      	lsrs	r3, r3, #23
   2134c:	b29a      	uxth	r2, r3
   2134e:	683b      	ldr	r3, [r7, #0]
   21350:	801a      	strh	r2, [r3, #0]
   21352:	e005      	b.n	21360 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   21354:	68bb      	ldr	r3, [r7, #8]
   21356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21358:	b2db      	uxtb	r3, r3
   2135a:	b29a      	uxth	r2, r3
   2135c:	683b      	ldr	r3, [r7, #0]
   2135e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   21360:	230f      	movs	r3, #15
   21362:	18fb      	adds	r3, r7, r3
   21364:	781b      	ldrb	r3, [r3, #0]
}
   21366:	0018      	movs	r0, r3
   21368:	46bd      	mov	sp, r7
   2136a:	b004      	add	sp, #16
   2136c:	bd80      	pop	{r7, pc}
   2136e:	46c0      	nop			; (mov r8, r8)
   21370:	0002127d 	.word	0x0002127d

00021374 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   21374:	b580      	push	{r7, lr}
   21376:	b086      	sub	sp, #24
   21378:	af00      	add	r7, sp, #0
   2137a:	60f8      	str	r0, [r7, #12]
   2137c:	60b9      	str	r1, [r7, #8]
   2137e:	1dbb      	adds	r3, r7, #6
   21380:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   21382:	2313      	movs	r3, #19
   21384:	18fb      	adds	r3, r7, r3
   21386:	22ff      	movs	r2, #255	; 0xff
   21388:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   2138a:	2317      	movs	r3, #23
   2138c:	18fb      	adds	r3, r7, r3
   2138e:	2200      	movs	r2, #0
   21390:	701a      	strb	r2, [r3, #0]
   21392:	2316      	movs	r3, #22
   21394:	18fb      	adds	r3, r7, r3
   21396:	2200      	movs	r2, #0
   21398:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   2139a:	2314      	movs	r3, #20
   2139c:	18fb      	adds	r3, r7, r3
   2139e:	2200      	movs	r2, #0
   213a0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   213a2:	2310      	movs	r3, #16
   213a4:	18fb      	adds	r3, r7, r3
   213a6:	2200      	movs	r2, #0
   213a8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   213aa:	68bb      	ldr	r3, [r7, #8]
   213ac:	2b00      	cmp	r3, #0
   213ae:	d102      	bne.n	213b6 <spi_rw+0x42>
   213b0:	68fb      	ldr	r3, [r7, #12]
   213b2:	2b00      	cmp	r3, #0
   213b4:	d003      	beq.n	213be <spi_rw+0x4a>
   213b6:	1dbb      	adds	r3, r7, #6
   213b8:	881b      	ldrh	r3, [r3, #0]
   213ba:	2b00      	cmp	r3, #0
   213bc:	d102      	bne.n	213c4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   213be:	230f      	movs	r3, #15
   213c0:	425b      	negs	r3, r3
   213c2:	e07e      	b.n	214c2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   213c4:	68fb      	ldr	r3, [r7, #12]
   213c6:	2b00      	cmp	r3, #0
   213c8:	d106      	bne.n	213d8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   213ca:	2313      	movs	r3, #19
   213cc:	18fb      	adds	r3, r7, r3
   213ce:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   213d0:	2317      	movs	r3, #23
   213d2:	18fb      	adds	r3, r7, r3
   213d4:	2201      	movs	r2, #1
   213d6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   213d8:	68bb      	ldr	r3, [r7, #8]
   213da:	2b00      	cmp	r3, #0
   213dc:	d106      	bne.n	213ec <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   213de:	2313      	movs	r3, #19
   213e0:	18fb      	adds	r3, r7, r3
   213e2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   213e4:	2316      	movs	r3, #22
   213e6:	18fb      	adds	r3, r7, r3
   213e8:	2201      	movs	r2, #1
   213ea:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   213ec:	4937      	ldr	r1, [pc, #220]	; (214cc <spi_rw+0x158>)
   213ee:	4b38      	ldr	r3, [pc, #224]	; (214d0 <spi_rw+0x15c>)
   213f0:	2201      	movs	r2, #1
   213f2:	0018      	movs	r0, r3
   213f4:	4b37      	ldr	r3, [pc, #220]	; (214d4 <spi_rw+0x160>)
   213f6:	4798      	blx	r3

	while (u16Sz) {
   213f8:	e04c      	b.n	21494 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   213fa:	68fb      	ldr	r3, [r7, #12]
   213fc:	781a      	ldrb	r2, [r3, #0]
   213fe:	2314      	movs	r3, #20
   21400:	18fb      	adds	r3, r7, r3
   21402:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   21404:	46c0      	nop			; (mov r8, r8)
   21406:	4b32      	ldr	r3, [pc, #200]	; (214d0 <spi_rw+0x15c>)
   21408:	0018      	movs	r0, r3
   2140a:	4b33      	ldr	r3, [pc, #204]	; (214d8 <spi_rw+0x164>)
   2140c:	4798      	blx	r3
   2140e:	0003      	movs	r3, r0
   21410:	001a      	movs	r2, r3
   21412:	2301      	movs	r3, #1
   21414:	4053      	eors	r3, r2
   21416:	b2db      	uxtb	r3, r3
   21418:	2b00      	cmp	r3, #0
   2141a:	d1f4      	bne.n	21406 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   2141c:	46c0      	nop			; (mov r8, r8)
   2141e:	2314      	movs	r3, #20
   21420:	18fb      	adds	r3, r7, r3
   21422:	881a      	ldrh	r2, [r3, #0]
   21424:	4b2a      	ldr	r3, [pc, #168]	; (214d0 <spi_rw+0x15c>)
   21426:	0011      	movs	r1, r2
   21428:	0018      	movs	r0, r3
   2142a:	4b2c      	ldr	r3, [pc, #176]	; (214dc <spi_rw+0x168>)
   2142c:	4798      	blx	r3
   2142e:	1e03      	subs	r3, r0, #0
   21430:	d1f5      	bne.n	2141e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   21432:	46c0      	nop			; (mov r8, r8)
   21434:	4b26      	ldr	r3, [pc, #152]	; (214d0 <spi_rw+0x15c>)
   21436:	0018      	movs	r0, r3
   21438:	4b29      	ldr	r3, [pc, #164]	; (214e0 <spi_rw+0x16c>)
   2143a:	4798      	blx	r3
   2143c:	0003      	movs	r3, r0
   2143e:	001a      	movs	r2, r3
   21440:	2301      	movs	r3, #1
   21442:	4053      	eors	r3, r2
   21444:	b2db      	uxtb	r3, r3
   21446:	2b00      	cmp	r3, #0
   21448:	d1f4      	bne.n	21434 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   2144a:	46c0      	nop			; (mov r8, r8)
   2144c:	2310      	movs	r3, #16
   2144e:	18fa      	adds	r2, r7, r3
   21450:	4b1f      	ldr	r3, [pc, #124]	; (214d0 <spi_rw+0x15c>)
   21452:	0011      	movs	r1, r2
   21454:	0018      	movs	r0, r3
   21456:	4b23      	ldr	r3, [pc, #140]	; (214e4 <spi_rw+0x170>)
   21458:	4798      	blx	r3
   2145a:	1e03      	subs	r3, r0, #0
   2145c:	d1f6      	bne.n	2144c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   2145e:	2310      	movs	r3, #16
   21460:	18fb      	adds	r3, r7, r3
   21462:	881b      	ldrh	r3, [r3, #0]
   21464:	b2da      	uxtb	r2, r3
   21466:	68bb      	ldr	r3, [r7, #8]
   21468:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   2146a:	1dbb      	adds	r3, r7, #6
   2146c:	881a      	ldrh	r2, [r3, #0]
   2146e:	1dbb      	adds	r3, r7, #6
   21470:	3a01      	subs	r2, #1
   21472:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   21474:	2316      	movs	r3, #22
   21476:	18fb      	adds	r3, r7, r3
   21478:	781b      	ldrb	r3, [r3, #0]
   2147a:	2b00      	cmp	r3, #0
   2147c:	d102      	bne.n	21484 <spi_rw+0x110>
			pu8Miso++;
   2147e:	68bb      	ldr	r3, [r7, #8]
   21480:	3301      	adds	r3, #1
   21482:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   21484:	2317      	movs	r3, #23
   21486:	18fb      	adds	r3, r7, r3
   21488:	781b      	ldrb	r3, [r3, #0]
   2148a:	2b00      	cmp	r3, #0
   2148c:	d102      	bne.n	21494 <spi_rw+0x120>
			pu8Mosi++;
   2148e:	68fb      	ldr	r3, [r7, #12]
   21490:	3301      	adds	r3, #1
   21492:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   21494:	1dbb      	adds	r3, r7, #6
   21496:	881b      	ldrh	r3, [r3, #0]
   21498:	2b00      	cmp	r3, #0
   2149a:	d1ae      	bne.n	213fa <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   2149c:	46c0      	nop			; (mov r8, r8)
   2149e:	4b0c      	ldr	r3, [pc, #48]	; (214d0 <spi_rw+0x15c>)
   214a0:	0018      	movs	r0, r3
   214a2:	4b11      	ldr	r3, [pc, #68]	; (214e8 <spi_rw+0x174>)
   214a4:	4798      	blx	r3
   214a6:	0003      	movs	r3, r0
   214a8:	001a      	movs	r2, r3
   214aa:	2301      	movs	r3, #1
   214ac:	4053      	eors	r3, r2
   214ae:	b2db      	uxtb	r3, r3
   214b0:	2b00      	cmp	r3, #0
   214b2:	d1f4      	bne.n	2149e <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   214b4:	4905      	ldr	r1, [pc, #20]	; (214cc <spi_rw+0x158>)
   214b6:	4b06      	ldr	r3, [pc, #24]	; (214d0 <spi_rw+0x15c>)
   214b8:	2200      	movs	r2, #0
   214ba:	0018      	movs	r0, r3
   214bc:	4b05      	ldr	r3, [pc, #20]	; (214d4 <spi_rw+0x160>)
   214be:	4798      	blx	r3

	return M2M_SUCCESS;
   214c0:	2300      	movs	r3, #0
}
   214c2:	0018      	movs	r0, r3
   214c4:	46bd      	mov	sp, r7
   214c6:	b006      	add	sp, #24
   214c8:	bd80      	pop	{r7, pc}
   214ca:	46c0      	nop			; (mov r8, r8)
   214cc:	20005b28 	.word	0x20005b28
   214d0:	20005b2c 	.word	0x20005b2c
   214d4:	00028c21 	.word	0x00028c21
   214d8:	00021255 	.word	0x00021255
   214dc:	000212a5 	.word	0x000212a5
   214e0:	0002127d 	.word	0x0002127d
   214e4:	000212ed 	.word	0x000212ed
   214e8:	0002122d 	.word	0x0002122d

000214ec <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   214ec:	b580      	push	{r7, lr}
   214ee:	b092      	sub	sp, #72	; 0x48
   214f0:	af00      	add	r7, sp, #0
   214f2:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   214f4:	2347      	movs	r3, #71	; 0x47
   214f6:	18fb      	adds	r3, r7, r3
   214f8:	2200      	movs	r2, #0
   214fa:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   214fc:	2308      	movs	r3, #8
   214fe:	18fb      	adds	r3, r7, r3
   21500:	0018      	movs	r0, r3
   21502:	4b26      	ldr	r3, [pc, #152]	; (2159c <nm_bus_init+0xb0>)
   21504:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   21506:	2308      	movs	r3, #8
   21508:	18fb      	adds	r3, r7, r3
   2150a:	220e      	movs	r2, #14
   2150c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   2150e:	2308      	movs	r3, #8
   21510:	18fa      	adds	r2, r7, r3
   21512:	4b23      	ldr	r3, [pc, #140]	; (215a0 <nm_bus_init+0xb4>)
   21514:	0011      	movs	r1, r2
   21516:	0018      	movs	r0, r3
   21518:	4b22      	ldr	r3, [pc, #136]	; (215a4 <nm_bus_init+0xb8>)
   2151a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   2151c:	230c      	movs	r3, #12
   2151e:	18fb      	adds	r3, r7, r3
   21520:	0018      	movs	r0, r3
   21522:	4b21      	ldr	r3, [pc, #132]	; (215a8 <nm_bus_init+0xbc>)
   21524:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   21526:	230c      	movs	r3, #12
   21528:	18fb      	adds	r3, r7, r3
   2152a:	22c0      	movs	r2, #192	; 0xc0
   2152c:	0392      	lsls	r2, r2, #14
   2152e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   21530:	230c      	movs	r3, #12
   21532:	18fb      	adds	r3, r7, r3
   21534:	4a1d      	ldr	r2, [pc, #116]	; (215ac <nm_bus_init+0xc0>)
   21536:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   21538:	230c      	movs	r3, #12
   2153a:	18fb      	adds	r3, r7, r3
   2153c:	4a1c      	ldr	r2, [pc, #112]	; (215b0 <nm_bus_init+0xc4>)
   2153e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   21540:	230c      	movs	r3, #12
   21542:	18fb      	adds	r3, r7, r3
   21544:	2201      	movs	r2, #1
   21546:	4252      	negs	r2, r2
   21548:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   2154a:	230c      	movs	r3, #12
   2154c:	18fb      	adds	r3, r7, r3
   2154e:	4a19      	ldr	r2, [pc, #100]	; (215b4 <nm_bus_init+0xc8>)
   21550:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   21552:	230c      	movs	r3, #12
   21554:	18fb      	adds	r3, r7, r3
   21556:	2200      	movs	r2, #0
   21558:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   2155a:	230c      	movs	r3, #12
   2155c:	18fb      	adds	r3, r7, r3
   2155e:	4a16      	ldr	r2, [pc, #88]	; (215b8 <nm_bus_init+0xcc>)
   21560:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   21562:	230c      	movs	r3, #12
   21564:	18fa      	adds	r2, r7, r3
   21566:	4915      	ldr	r1, [pc, #84]	; (215bc <nm_bus_init+0xd0>)
   21568:	4b15      	ldr	r3, [pc, #84]	; (215c0 <nm_bus_init+0xd4>)
   2156a:	0018      	movs	r0, r3
   2156c:	4b15      	ldr	r3, [pc, #84]	; (215c4 <nm_bus_init+0xd8>)
   2156e:	4798      	blx	r3
   21570:	1e03      	subs	r3, r0, #0
   21572:	d002      	beq.n	2157a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   21574:	2306      	movs	r3, #6
   21576:	425b      	negs	r3, r3
   21578:	e00c      	b.n	21594 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   2157a:	4b11      	ldr	r3, [pc, #68]	; (215c0 <nm_bus_init+0xd4>)
   2157c:	0018      	movs	r0, r3
   2157e:	4b12      	ldr	r3, [pc, #72]	; (215c8 <nm_bus_init+0xdc>)
   21580:	4798      	blx	r3

	nm_bsp_reset();
   21582:	4b12      	ldr	r3, [pc, #72]	; (215cc <nm_bus_init+0xe0>)
   21584:	4798      	blx	r3
	nm_bsp_sleep(1);
   21586:	2001      	movs	r0, #1
   21588:	4b11      	ldr	r3, [pc, #68]	; (215d0 <nm_bus_init+0xe4>)
   2158a:	4798      	blx	r3
#endif
	return result;
   2158c:	2347      	movs	r3, #71	; 0x47
   2158e:	18fb      	adds	r3, r7, r3
   21590:	781b      	ldrb	r3, [r3, #0]
   21592:	b25b      	sxtb	r3, r3
}
   21594:	0018      	movs	r0, r3
   21596:	46bd      	mov	sp, r7
   21598:	b012      	add	sp, #72	; 0x48
   2159a:	bd80      	pop	{r7, pc}
   2159c:	000210f9 	.word	0x000210f9
   215a0:	20005b28 	.word	0x20005b28
   215a4:	0002111d 	.word	0x0002111d
   215a8:	00021075 	.word	0x00021075
   215ac:	000c0002 	.word	0x000c0002
   215b0:	000d0002 	.word	0x000d0002
   215b4:	000f0002 	.word	0x000f0002
   215b8:	00124f80 	.word	0x00124f80
   215bc:	42001000 	.word	0x42001000
   215c0:	20005b2c 	.word	0x20005b2c
   215c4:	0002895d 	.word	0x0002895d
   215c8:	00021181 	.word	0x00021181
   215cc:	00020df1 	.word	0x00020df1
   215d0:	00020e31 	.word	0x00020e31

000215d4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   215d4:	b590      	push	{r4, r7, lr}
   215d6:	b085      	sub	sp, #20
   215d8:	af00      	add	r7, sp, #0
   215da:	0002      	movs	r2, r0
   215dc:	6039      	str	r1, [r7, #0]
   215de:	1dfb      	adds	r3, r7, #7
   215e0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   215e2:	230f      	movs	r3, #15
   215e4:	18fb      	adds	r3, r7, r3
   215e6:	2200      	movs	r2, #0
   215e8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   215ea:	1dfb      	adds	r3, r7, #7
   215ec:	781b      	ldrb	r3, [r3, #0]
   215ee:	2b03      	cmp	r3, #3
   215f0:	d10f      	bne.n	21612 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   215f2:	683b      	ldr	r3, [r7, #0]
   215f4:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   215f6:	68bb      	ldr	r3, [r7, #8]
   215f8:	6818      	ldr	r0, [r3, #0]
   215fa:	68bb      	ldr	r3, [r7, #8]
   215fc:	6859      	ldr	r1, [r3, #4]
   215fe:	68bb      	ldr	r3, [r7, #8]
   21600:	891b      	ldrh	r3, [r3, #8]
   21602:	220f      	movs	r2, #15
   21604:	18bc      	adds	r4, r7, r2
   21606:	001a      	movs	r2, r3
   21608:	4b10      	ldr	r3, [pc, #64]	; (2164c <nm_bus_ioctl+0x78>)
   2160a:	4798      	blx	r3
   2160c:	0003      	movs	r3, r0
   2160e:	7023      	strb	r3, [r4, #0]
		}
		break;
   21610:	e013      	b.n	2163a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   21612:	230f      	movs	r3, #15
   21614:	18fb      	adds	r3, r7, r3
   21616:	22ff      	movs	r2, #255	; 0xff
   21618:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   2161a:	2383      	movs	r3, #131	; 0x83
   2161c:	005a      	lsls	r2, r3, #1
   2161e:	490c      	ldr	r1, [pc, #48]	; (21650 <nm_bus_ioctl+0x7c>)
   21620:	4b0c      	ldr	r3, [pc, #48]	; (21654 <nm_bus_ioctl+0x80>)
   21622:	0018      	movs	r0, r3
   21624:	4b0c      	ldr	r3, [pc, #48]	; (21658 <nm_bus_ioctl+0x84>)
   21626:	4798      	blx	r3
   21628:	4b0c      	ldr	r3, [pc, #48]	; (2165c <nm_bus_ioctl+0x88>)
   2162a:	0018      	movs	r0, r3
   2162c:	4b0a      	ldr	r3, [pc, #40]	; (21658 <nm_bus_ioctl+0x84>)
   2162e:	4798      	blx	r3
   21630:	4b0b      	ldr	r3, [pc, #44]	; (21660 <nm_bus_ioctl+0x8c>)
   21632:	0018      	movs	r0, r3
   21634:	4b08      	ldr	r3, [pc, #32]	; (21658 <nm_bus_ioctl+0x84>)
   21636:	4798      	blx	r3
			break;
   21638:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   2163a:	230f      	movs	r3, #15
   2163c:	18fb      	adds	r3, r7, r3
   2163e:	781b      	ldrb	r3, [r3, #0]
   21640:	b25b      	sxtb	r3, r3
}
   21642:	0018      	movs	r0, r3
   21644:	46bd      	mov	sp, r7
   21646:	b005      	add	sp, #20
   21648:	bd90      	pop	{r4, r7, pc}
   2164a:	46c0      	nop			; (mov r8, r8)
   2164c:	00021375 	.word	0x00021375
   21650:	00039304 	.word	0x00039304
   21654:	000392d8 	.word	0x000392d8
   21658:	0001e979 	.word	0x0001e979
   2165c:	000392ec 	.word	0x000392ec
   21660:	00039300 	.word	0x00039300

00021664 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   21664:	b580      	push	{r7, lr}
   21666:	b082      	sub	sp, #8
   21668:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   2166a:	1dfb      	adds	r3, r7, #7
   2166c:	2200      	movs	r2, #0
   2166e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   21670:	1d3b      	adds	r3, r7, #4
   21672:	0018      	movs	r0, r3
   21674:	4b13      	ldr	r3, [pc, #76]	; (216c4 <nm_bus_deinit+0x60>)
   21676:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   21678:	1d3b      	adds	r3, r7, #4
   2167a:	2200      	movs	r2, #0
   2167c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   2167e:	1d3b      	adds	r3, r7, #4
   21680:	2200      	movs	r2, #0
   21682:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   21684:	4b10      	ldr	r3, [pc, #64]	; (216c8 <nm_bus_deinit+0x64>)
   21686:	0018      	movs	r0, r3
   21688:	4b10      	ldr	r3, [pc, #64]	; (216cc <nm_bus_deinit+0x68>)
   2168a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   2168c:	1d3b      	adds	r3, r7, #4
   2168e:	0019      	movs	r1, r3
   21690:	200c      	movs	r0, #12
   21692:	4b0f      	ldr	r3, [pc, #60]	; (216d0 <nm_bus_deinit+0x6c>)
   21694:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   21696:	1d3b      	adds	r3, r7, #4
   21698:	0019      	movs	r1, r3
   2169a:	200f      	movs	r0, #15
   2169c:	4b0c      	ldr	r3, [pc, #48]	; (216d0 <nm_bus_deinit+0x6c>)
   2169e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   216a0:	1d3b      	adds	r3, r7, #4
   216a2:	0019      	movs	r1, r3
   216a4:	200d      	movs	r0, #13
   216a6:	4b0a      	ldr	r3, [pc, #40]	; (216d0 <nm_bus_deinit+0x6c>)
   216a8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   216aa:	1d3b      	adds	r3, r7, #4
   216ac:	0019      	movs	r1, r3
   216ae:	200e      	movs	r0, #14
   216b0:	4b07      	ldr	r3, [pc, #28]	; (216d0 <nm_bus_deinit+0x6c>)
   216b2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   216b4:	1dfb      	adds	r3, r7, #7
   216b6:	781b      	ldrb	r3, [r3, #0]
   216b8:	b25b      	sxtb	r3, r3
}
   216ba:	0018      	movs	r0, r3
   216bc:	46bd      	mov	sp, r7
   216be:	b002      	add	sp, #8
   216c0:	bd80      	pop	{r7, pc}
   216c2:	46c0      	nop			; (mov r8, r8)
   216c4:	00020fdd 	.word	0x00020fdd
   216c8:	20005b2c 	.word	0x20005b2c
   216cc:	000211d1 	.word	0x000211d1
   216d0:	000274dd 	.word	0x000274dd

000216d4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   216d4:	b580      	push	{r7, lr}
   216d6:	b084      	sub	sp, #16
   216d8:	af00      	add	r7, sp, #0
   216da:	60f8      	str	r0, [r7, #12]
   216dc:	60b9      	str	r1, [r7, #8]
   216de:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   216e0:	687b      	ldr	r3, [r7, #4]
   216e2:	2b00      	cmp	r3, #0
   216e4:	d010      	beq.n	21708 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   216e6:	68bb      	ldr	r3, [r7, #8]
   216e8:	781a      	ldrb	r2, [r3, #0]
   216ea:	68fb      	ldr	r3, [r7, #12]
   216ec:	701a      	strb	r2, [r3, #0]
		pDst++;
   216ee:	68fb      	ldr	r3, [r7, #12]
   216f0:	3301      	adds	r3, #1
   216f2:	60fb      	str	r3, [r7, #12]
		pSrc++;
   216f4:	68bb      	ldr	r3, [r7, #8]
   216f6:	3301      	adds	r3, #1
   216f8:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   216fa:	687b      	ldr	r3, [r7, #4]
   216fc:	3b01      	subs	r3, #1
   216fe:	607b      	str	r3, [r7, #4]
   21700:	687b      	ldr	r3, [r7, #4]
   21702:	2b00      	cmp	r3, #0
   21704:	d1ef      	bne.n	216e6 <m2m_memcpy+0x12>
   21706:	e000      	b.n	2170a <m2m_memcpy+0x36>
	if(sz == 0) return;
   21708:	46c0      	nop			; (mov r8, r8)
}
   2170a:	46bd      	mov	sp, r7
   2170c:	b004      	add	sp, #16
   2170e:	bd80      	pop	{r7, pc}

00021710 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   21710:	b580      	push	{r7, lr}
   21712:	b084      	sub	sp, #16
   21714:	af00      	add	r7, sp, #0
   21716:	60f8      	str	r0, [r7, #12]
   21718:	607a      	str	r2, [r7, #4]
   2171a:	230b      	movs	r3, #11
   2171c:	18fb      	adds	r3, r7, r3
   2171e:	1c0a      	adds	r2, r1, #0
   21720:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   21722:	687b      	ldr	r3, [r7, #4]
   21724:	2b00      	cmp	r3, #0
   21726:	d00e      	beq.n	21746 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   21728:	68fb      	ldr	r3, [r7, #12]
   2172a:	220b      	movs	r2, #11
   2172c:	18ba      	adds	r2, r7, r2
   2172e:	7812      	ldrb	r2, [r2, #0]
   21730:	701a      	strb	r2, [r3, #0]
		pBuf++;
   21732:	68fb      	ldr	r3, [r7, #12]
   21734:	3301      	adds	r3, #1
   21736:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   21738:	687b      	ldr	r3, [r7, #4]
   2173a:	3b01      	subs	r3, #1
   2173c:	607b      	str	r3, [r7, #4]
   2173e:	687b      	ldr	r3, [r7, #4]
   21740:	2b00      	cmp	r3, #0
   21742:	d1f1      	bne.n	21728 <m2m_memset+0x18>
   21744:	e000      	b.n	21748 <m2m_memset+0x38>
	if(sz == 0) return;
   21746:	46c0      	nop			; (mov r8, r8)
}
   21748:	46bd      	mov	sp, r7
   2174a:	b004      	add	sp, #16
   2174c:	bd80      	pop	{r7, pc}

0002174e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   2174e:	b580      	push	{r7, lr}
   21750:	b084      	sub	sp, #16
   21752:	af00      	add	r7, sp, #0
   21754:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   21756:	230e      	movs	r3, #14
   21758:	18fb      	adds	r3, r7, r3
   2175a:	2200      	movs	r2, #0
   2175c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   2175e:	e009      	b.n	21774 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   21760:	230e      	movs	r3, #14
   21762:	18fb      	adds	r3, r7, r3
   21764:	881a      	ldrh	r2, [r3, #0]
   21766:	230e      	movs	r3, #14
   21768:	18fb      	adds	r3, r7, r3
   2176a:	3201      	adds	r2, #1
   2176c:	801a      	strh	r2, [r3, #0]
		pcStr++;
   2176e:	687b      	ldr	r3, [r7, #4]
   21770:	3301      	adds	r3, #1
   21772:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   21774:	687b      	ldr	r3, [r7, #4]
   21776:	781b      	ldrb	r3, [r3, #0]
   21778:	2b00      	cmp	r3, #0
   2177a:	d1f1      	bne.n	21760 <m2m_strlen+0x12>
	}
	return u16StrLen;
   2177c:	230e      	movs	r3, #14
   2177e:	18fb      	adds	r3, r7, r3
   21780:	881b      	ldrh	r3, [r3, #0]
}
   21782:	0018      	movs	r0, r3
   21784:	46bd      	mov	sp, r7
   21786:	b004      	add	sp, #16
   21788:	bd80      	pop	{r7, pc}
	...

0002178c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   2178c:	b580      	push	{r7, lr}
   2178e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   21790:	4b04      	ldr	r3, [pc, #16]	; (217a4 <isr+0x18>)
   21792:	78db      	ldrb	r3, [r3, #3]
   21794:	b2db      	uxtb	r3, r3
   21796:	3301      	adds	r3, #1
   21798:	b2da      	uxtb	r2, r3
   2179a:	4b02      	ldr	r3, [pc, #8]	; (217a4 <isr+0x18>)
   2179c:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   2179e:	46c0      	nop			; (mov r8, r8)
   217a0:	46bd      	mov	sp, r7
   217a2:	bd80      	pop	{r7, pc}
   217a4:	20005b68 	.word	0x20005b68

000217a8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   217a8:	b590      	push	{r4, r7, lr}
   217aa:	b083      	sub	sp, #12
   217ac:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   217ae:	1dfb      	adds	r3, r7, #7
   217b0:	2200      	movs	r2, #0
   217b2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   217b4:	4b14      	ldr	r3, [pc, #80]	; (21808 <hif_set_rx_done+0x60>)
   217b6:	2200      	movs	r2, #0
   217b8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   217ba:	2001      	movs	r0, #1
   217bc:	4b13      	ldr	r3, [pc, #76]	; (2180c <hif_set_rx_done+0x64>)
   217be:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   217c0:	1dfc      	adds	r4, r7, #7
   217c2:	003b      	movs	r3, r7
   217c4:	4a12      	ldr	r2, [pc, #72]	; (21810 <hif_set_rx_done+0x68>)
   217c6:	0019      	movs	r1, r3
   217c8:	0010      	movs	r0, r2
   217ca:	4b12      	ldr	r3, [pc, #72]	; (21814 <hif_set_rx_done+0x6c>)
   217cc:	4798      	blx	r3
   217ce:	0003      	movs	r3, r0
   217d0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   217d2:	1dfb      	adds	r3, r7, #7
   217d4:	781b      	ldrb	r3, [r3, #0]
   217d6:	b25b      	sxtb	r3, r3
   217d8:	2b00      	cmp	r3, #0
   217da:	d10d      	bne.n	217f8 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   217dc:	683b      	ldr	r3, [r7, #0]
   217de:	2202      	movs	r2, #2
   217e0:	4313      	orrs	r3, r2
   217e2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   217e4:	683b      	ldr	r3, [r7, #0]
   217e6:	1dfc      	adds	r4, r7, #7
   217e8:	4a09      	ldr	r2, [pc, #36]	; (21810 <hif_set_rx_done+0x68>)
   217ea:	0019      	movs	r1, r3
   217ec:	0010      	movs	r0, r2
   217ee:	4b0a      	ldr	r3, [pc, #40]	; (21818 <hif_set_rx_done+0x70>)
   217f0:	4798      	blx	r3
   217f2:	0003      	movs	r3, r0
   217f4:	7023      	strb	r3, [r4, #0]
   217f6:	e000      	b.n	217fa <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   217f8:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   217fa:	1dfb      	adds	r3, r7, #7
   217fc:	781b      	ldrb	r3, [r3, #0]
   217fe:	b25b      	sxtb	r3, r3

}
   21800:	0018      	movs	r0, r3
   21802:	46bd      	mov	sp, r7
   21804:	b003      	add	sp, #12
   21806:	bd90      	pop	{r4, r7, pc}
   21808:	20005b68 	.word	0x20005b68
   2180c:	00020ec5 	.word	0x00020ec5
   21810:	00001070 	.word	0x00001070
   21814:	000237a1 	.word	0x000237a1
   21818:	000237c5 	.word	0x000237c5

0002181c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   2181c:	b580      	push	{r7, lr}
   2181e:	b082      	sub	sp, #8
   21820:	af00      	add	r7, sp, #0
   21822:	603a      	str	r2, [r7, #0]
   21824:	1dfb      	adds	r3, r7, #7
   21826:	1c02      	adds	r2, r0, #0
   21828:	701a      	strb	r2, [r3, #0]
   2182a:	1d3b      	adds	r3, r7, #4
   2182c:	1c0a      	adds	r2, r1, #0
   2182e:	801a      	strh	r2, [r3, #0]


}
   21830:	46c0      	nop			; (mov r8, r8)
   21832:	46bd      	mov	sp, r7
   21834:	b002      	add	sp, #8
   21836:	bd80      	pop	{r7, pc}

00021838 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   21838:	b590      	push	{r4, r7, lr}
   2183a:	b083      	sub	sp, #12
   2183c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2183e:	1dfb      	adds	r3, r7, #7
   21840:	2200      	movs	r2, #0
   21842:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   21844:	4b16      	ldr	r3, [pc, #88]	; (218a0 <hif_chip_wake+0x68>)
   21846:	789b      	ldrb	r3, [r3, #2]
   21848:	b2db      	uxtb	r3, r3
   2184a:	2b00      	cmp	r3, #0
   2184c:	d003      	beq.n	21856 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   2184e:	1dfb      	adds	r3, r7, #7
   21850:	781b      	ldrb	r3, [r3, #0]
   21852:	b25b      	sxtb	r3, r3
   21854:	e01f      	b.n	21896 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   21856:	4b12      	ldr	r3, [pc, #72]	; (218a0 <hif_chip_wake+0x68>)
   21858:	785b      	ldrb	r3, [r3, #1]
   2185a:	b2db      	uxtb	r3, r3
   2185c:	2b00      	cmp	r3, #0
   2185e:	d10e      	bne.n	2187e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   21860:	4b0f      	ldr	r3, [pc, #60]	; (218a0 <hif_chip_wake+0x68>)
   21862:	781b      	ldrb	r3, [r3, #0]
   21864:	b2db      	uxtb	r3, r3
   21866:	2b00      	cmp	r3, #0
   21868:	d009      	beq.n	2187e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   2186a:	1dfc      	adds	r4, r7, #7
   2186c:	4b0d      	ldr	r3, [pc, #52]	; (218a4 <hif_chip_wake+0x6c>)
   2186e:	4798      	blx	r3
   21870:	0003      	movs	r3, r0
   21872:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21874:	1dfb      	adds	r3, r7, #7
   21876:	781b      	ldrb	r3, [r3, #0]
   21878:	b25b      	sxtb	r3, r3
   2187a:	2b00      	cmp	r3, #0
   2187c:	d107      	bne.n	2188e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   2187e:	4b08      	ldr	r3, [pc, #32]	; (218a0 <hif_chip_wake+0x68>)
   21880:	785b      	ldrb	r3, [r3, #1]
   21882:	b2db      	uxtb	r3, r3
   21884:	3301      	adds	r3, #1
   21886:	b2da      	uxtb	r2, r3
   21888:	4b05      	ldr	r3, [pc, #20]	; (218a0 <hif_chip_wake+0x68>)
   2188a:	705a      	strb	r2, [r3, #1]
   2188c:	e000      	b.n	21890 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   2188e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   21890:	1dfb      	adds	r3, r7, #7
   21892:	781b      	ldrb	r3, [r3, #0]
   21894:	b25b      	sxtb	r3, r3
}
   21896:	0018      	movs	r0, r3
   21898:	46bd      	mov	sp, r7
   2189a:	b003      	add	sp, #12
   2189c:	bd90      	pop	{r4, r7, pc}
   2189e:	46c0      	nop			; (mov r8, r8)
   218a0:	20005b68 	.word	0x20005b68
   218a4:	00023271 	.word	0x00023271

000218a8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   218a8:	b580      	push	{r7, lr}
   218aa:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   218ac:	4b07      	ldr	r3, [pc, #28]	; (218cc <hif_chip_sleep_sc+0x24>)
   218ae:	785b      	ldrb	r3, [r3, #1]
   218b0:	b2db      	uxtb	r3, r3
   218b2:	2b00      	cmp	r3, #0
   218b4:	d006      	beq.n	218c4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   218b6:	4b05      	ldr	r3, [pc, #20]	; (218cc <hif_chip_sleep_sc+0x24>)
   218b8:	785b      	ldrb	r3, [r3, #1]
   218ba:	b2db      	uxtb	r3, r3
   218bc:	3b01      	subs	r3, #1
   218be:	b2da      	uxtb	r2, r3
   218c0:	4b02      	ldr	r3, [pc, #8]	; (218cc <hif_chip_sleep_sc+0x24>)
   218c2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   218c4:	2300      	movs	r3, #0
}
   218c6:	0018      	movs	r0, r3
   218c8:	46bd      	mov	sp, r7
   218ca:	bd80      	pop	{r7, pc}
   218cc:	20005b68 	.word	0x20005b68

000218d0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   218d0:	b590      	push	{r4, r7, lr}
   218d2:	b083      	sub	sp, #12
   218d4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   218d6:	1dfb      	adds	r3, r7, #7
   218d8:	2200      	movs	r2, #0
   218da:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   218dc:	4b10      	ldr	r3, [pc, #64]	; (21920 <hif_chip_sleep+0x50>)
   218de:	785b      	ldrb	r3, [r3, #1]
   218e0:	b2db      	uxtb	r3, r3
   218e2:	2b00      	cmp	r3, #0
   218e4:	d006      	beq.n	218f4 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   218e6:	4b0e      	ldr	r3, [pc, #56]	; (21920 <hif_chip_sleep+0x50>)
   218e8:	785b      	ldrb	r3, [r3, #1]
   218ea:	b2db      	uxtb	r3, r3
   218ec:	3b01      	subs	r3, #1
   218ee:	b2da      	uxtb	r2, r3
   218f0:	4b0b      	ldr	r3, [pc, #44]	; (21920 <hif_chip_sleep+0x50>)
   218f2:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   218f4:	4b0a      	ldr	r3, [pc, #40]	; (21920 <hif_chip_sleep+0x50>)
   218f6:	785b      	ldrb	r3, [r3, #1]
   218f8:	b2db      	uxtb	r3, r3
   218fa:	2b00      	cmp	r3, #0
   218fc:	d109      	bne.n	21912 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   218fe:	4b08      	ldr	r3, [pc, #32]	; (21920 <hif_chip_sleep+0x50>)
   21900:	781b      	ldrb	r3, [r3, #0]
   21902:	b2db      	uxtb	r3, r3
   21904:	2b00      	cmp	r3, #0
   21906:	d004      	beq.n	21912 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   21908:	1dfc      	adds	r4, r7, #7
   2190a:	4b06      	ldr	r3, [pc, #24]	; (21924 <hif_chip_sleep+0x54>)
   2190c:	4798      	blx	r3
   2190e:	0003      	movs	r3, r0
   21910:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   21912:	1dfb      	adds	r3, r7, #7
   21914:	781b      	ldrb	r3, [r3, #0]
   21916:	b25b      	sxtb	r3, r3
}
   21918:	0018      	movs	r0, r3
   2191a:	46bd      	mov	sp, r7
   2191c:	b003      	add	sp, #12
   2191e:	bd90      	pop	{r4, r7, pc}
   21920:	20005b68 	.word	0x20005b68
   21924:	00023199 	.word	0x00023199

00021928 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   21928:	b580      	push	{r7, lr}
   2192a:	b082      	sub	sp, #8
   2192c:	af00      	add	r7, sp, #0
   2192e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   21930:	4b09      	ldr	r3, [pc, #36]	; (21958 <hif_init+0x30>)
   21932:	222c      	movs	r2, #44	; 0x2c
   21934:	2100      	movs	r1, #0
   21936:	0018      	movs	r0, r3
   21938:	4b08      	ldr	r3, [pc, #32]	; (2195c <hif_init+0x34>)
   2193a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   2193c:	4b08      	ldr	r3, [pc, #32]	; (21960 <hif_init+0x38>)
   2193e:	0018      	movs	r0, r3
   21940:	4b08      	ldr	r3, [pc, #32]	; (21964 <hif_init+0x3c>)
   21942:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   21944:	4b08      	ldr	r3, [pc, #32]	; (21968 <hif_init+0x40>)
   21946:	0019      	movs	r1, r3
   21948:	2003      	movs	r0, #3
   2194a:	4b08      	ldr	r3, [pc, #32]	; (2196c <hif_init+0x44>)
   2194c:	4798      	blx	r3
	return M2M_SUCCESS;
   2194e:	2300      	movs	r3, #0
}
   21950:	0018      	movs	r0, r3
   21952:	46bd      	mov	sp, r7
   21954:	b002      	add	sp, #8
   21956:	bd80      	pop	{r7, pc}
   21958:	20005b68 	.word	0x20005b68
   2195c:	00021711 	.word	0x00021711
   21960:	0002178d 	.word	0x0002178d
   21964:	00020e4d 	.word	0x00020e4d
   21968:	0002181d 	.word	0x0002181d
   2196c:	0002240d 	.word	0x0002240d

00021970 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   21970:	b590      	push	{r4, r7, lr}
   21972:	b089      	sub	sp, #36	; 0x24
   21974:	af00      	add	r7, sp, #0
   21976:	0004      	movs	r4, r0
   21978:	0008      	movs	r0, r1
   2197a:	603a      	str	r2, [r7, #0]
   2197c:	0019      	movs	r1, r3
   2197e:	1dfb      	adds	r3, r7, #7
   21980:	1c22      	adds	r2, r4, #0
   21982:	701a      	strb	r2, [r3, #0]
   21984:	1dbb      	adds	r3, r7, #6
   21986:	1c02      	adds	r2, r0, #0
   21988:	701a      	strb	r2, [r3, #0]
   2198a:	1d3b      	adds	r3, r7, #4
   2198c:	1c0a      	adds	r2, r1, #0
   2198e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   21990:	231f      	movs	r3, #31
   21992:	18fb      	adds	r3, r7, r3
   21994:	22ff      	movs	r2, #255	; 0xff
   21996:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   21998:	1dbb      	adds	r3, r7, #6
   2199a:	781b      	ldrb	r3, [r3, #0]
   2199c:	227f      	movs	r2, #127	; 0x7f
   2199e:	4013      	ands	r3, r2
   219a0:	b2da      	uxtb	r2, r3
   219a2:	2318      	movs	r3, #24
   219a4:	18fb      	adds	r3, r7, r3
   219a6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   219a8:	2318      	movs	r3, #24
   219aa:	18fb      	adds	r3, r7, r3
   219ac:	1dfa      	adds	r2, r7, #7
   219ae:	7812      	ldrb	r2, [r2, #0]
   219b0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   219b2:	2318      	movs	r3, #24
   219b4:	18fb      	adds	r3, r7, r3
   219b6:	2208      	movs	r2, #8
   219b8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   219ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   219bc:	2b00      	cmp	r3, #0
   219be:	d011      	beq.n	219e4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   219c0:	2318      	movs	r3, #24
   219c2:	18fb      	adds	r3, r7, r3
   219c4:	885b      	ldrh	r3, [r3, #2]
   219c6:	b29a      	uxth	r2, r3
   219c8:	2338      	movs	r3, #56	; 0x38
   219ca:	18f9      	adds	r1, r7, r3
   219cc:	2334      	movs	r3, #52	; 0x34
   219ce:	18fb      	adds	r3, r7, r3
   219d0:	8809      	ldrh	r1, [r1, #0]
   219d2:	881b      	ldrh	r3, [r3, #0]
   219d4:	18cb      	adds	r3, r1, r3
   219d6:	b29b      	uxth	r3, r3
   219d8:	18d3      	adds	r3, r2, r3
   219da:	b29a      	uxth	r2, r3
   219dc:	2318      	movs	r3, #24
   219de:	18fb      	adds	r3, r7, r3
   219e0:	805a      	strh	r2, [r3, #2]
   219e2:	e00a      	b.n	219fa <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   219e4:	2318      	movs	r3, #24
   219e6:	18fb      	adds	r3, r7, r3
   219e8:	885b      	ldrh	r3, [r3, #2]
   219ea:	b29a      	uxth	r2, r3
   219ec:	1d3b      	adds	r3, r7, #4
   219ee:	881b      	ldrh	r3, [r3, #0]
   219f0:	18d3      	adds	r3, r2, r3
   219f2:	b29a      	uxth	r2, r3
   219f4:	2318      	movs	r3, #24
   219f6:	18fb      	adds	r3, r7, r3
   219f8:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   219fa:	231f      	movs	r3, #31
   219fc:	18fc      	adds	r4, r7, r3
   219fe:	4bb2      	ldr	r3, [pc, #712]	; (21cc8 <hif_send+0x358>)
   21a00:	4798      	blx	r3
   21a02:	0003      	movs	r3, r0
   21a04:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   21a06:	231f      	movs	r3, #31
   21a08:	18fb      	adds	r3, r7, r3
   21a0a:	781b      	ldrb	r3, [r3, #0]
   21a0c:	b25b      	sxtb	r3, r3
   21a0e:	2b00      	cmp	r3, #0
   21a10:	d000      	beq.n	21a14 <hif_send+0xa4>
   21a12:	e129      	b.n	21c68 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   21a14:	2300      	movs	r3, #0
   21a16:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   21a18:	230e      	movs	r3, #14
   21a1a:	18fb      	adds	r3, r7, r3
   21a1c:	2200      	movs	r2, #0
   21a1e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   21a20:	2300      	movs	r3, #0
   21a22:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   21a24:	1dfb      	adds	r3, r7, #7
   21a26:	781a      	ldrb	r2, [r3, #0]
   21a28:	697b      	ldr	r3, [r7, #20]
   21a2a:	4313      	orrs	r3, r2
   21a2c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   21a2e:	1dbb      	adds	r3, r7, #6
   21a30:	781b      	ldrb	r3, [r3, #0]
   21a32:	021a      	lsls	r2, r3, #8
   21a34:	697b      	ldr	r3, [r7, #20]
   21a36:	4313      	orrs	r3, r2
   21a38:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   21a3a:	2318      	movs	r3, #24
   21a3c:	18fb      	adds	r3, r7, r3
   21a3e:	885b      	ldrh	r3, [r3, #2]
   21a40:	b29b      	uxth	r3, r3
   21a42:	041a      	lsls	r2, r3, #16
   21a44:	697b      	ldr	r3, [r7, #20]
   21a46:	4313      	orrs	r3, r2
   21a48:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   21a4a:	697b      	ldr	r3, [r7, #20]
   21a4c:	221f      	movs	r2, #31
   21a4e:	18bc      	adds	r4, r7, r2
   21a50:	4a9e      	ldr	r2, [pc, #632]	; (21ccc <hif_send+0x35c>)
   21a52:	0019      	movs	r1, r3
   21a54:	0010      	movs	r0, r2
   21a56:	4b9e      	ldr	r3, [pc, #632]	; (21cd0 <hif_send+0x360>)
   21a58:	4798      	blx	r3
   21a5a:	0003      	movs	r3, r0
   21a5c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21a5e:	231f      	movs	r3, #31
   21a60:	18fb      	adds	r3, r7, r3
   21a62:	781b      	ldrb	r3, [r3, #0]
   21a64:	b25b      	sxtb	r3, r3
   21a66:	2b00      	cmp	r3, #0
   21a68:	d000      	beq.n	21a6c <hif_send+0xfc>
   21a6a:	e119      	b.n	21ca0 <hif_send+0x330>

		reg = 0UL;
   21a6c:	2300      	movs	r3, #0
   21a6e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   21a70:	697b      	ldr	r3, [r7, #20]
   21a72:	2202      	movs	r2, #2
   21a74:	4313      	orrs	r3, r2
   21a76:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   21a78:	697b      	ldr	r3, [r7, #20]
   21a7a:	221f      	movs	r2, #31
   21a7c:	18bc      	adds	r4, r7, r2
   21a7e:	4a95      	ldr	r2, [pc, #596]	; (21cd4 <hif_send+0x364>)
   21a80:	0019      	movs	r1, r3
   21a82:	0010      	movs	r0, r2
   21a84:	4b92      	ldr	r3, [pc, #584]	; (21cd0 <hif_send+0x360>)
   21a86:	4798      	blx	r3
   21a88:	0003      	movs	r3, r0
   21a8a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21a8c:	231f      	movs	r3, #31
   21a8e:	18fb      	adds	r3, r7, r3
   21a90:	781b      	ldrb	r3, [r3, #0]
   21a92:	b25b      	sxtb	r3, r3
   21a94:	2b00      	cmp	r3, #0
   21a96:	d000      	beq.n	21a9a <hif_send+0x12a>
   21a98:	e104      	b.n	21ca4 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   21a9a:	2300      	movs	r3, #0
   21a9c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   21a9e:	230e      	movs	r3, #14
   21aa0:	18fb      	adds	r3, r7, r3
   21aa2:	2200      	movs	r2, #0
   21aa4:	801a      	strh	r2, [r3, #0]
   21aa6:	e050      	b.n	21b4a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   21aa8:	231f      	movs	r3, #31
   21aaa:	18fc      	adds	r4, r7, r3
   21aac:	2314      	movs	r3, #20
   21aae:	18fb      	adds	r3, r7, r3
   21ab0:	4a88      	ldr	r2, [pc, #544]	; (21cd4 <hif_send+0x364>)
   21ab2:	0019      	movs	r1, r3
   21ab4:	0010      	movs	r0, r2
   21ab6:	4b88      	ldr	r3, [pc, #544]	; (21cd8 <hif_send+0x368>)
   21ab8:	4798      	blx	r3
   21aba:	0003      	movs	r3, r0
   21abc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   21abe:	231f      	movs	r3, #31
   21ac0:	18fb      	adds	r3, r7, r3
   21ac2:	781b      	ldrb	r3, [r3, #0]
   21ac4:	b25b      	sxtb	r3, r3
   21ac6:	2b00      	cmp	r3, #0
   21ac8:	d147      	bne.n	21b5a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   21aca:	230e      	movs	r3, #14
   21acc:	18fb      	adds	r3, r7, r3
   21ace:	881b      	ldrh	r3, [r3, #0]
   21ad0:	b29a      	uxth	r2, r3
   21ad2:	23f4      	movs	r3, #244	; 0xf4
   21ad4:	33ff      	adds	r3, #255	; 0xff
   21ad6:	429a      	cmp	r2, r3
   21ad8:	d916      	bls.n	21b08 <hif_send+0x198>
				if(cnt < 501) {
   21ada:	230e      	movs	r3, #14
   21adc:	18fb      	adds	r3, r7, r3
   21ade:	881b      	ldrh	r3, [r3, #0]
   21ae0:	b29a      	uxth	r2, r3
   21ae2:	23fa      	movs	r3, #250	; 0xfa
   21ae4:	005b      	lsls	r3, r3, #1
   21ae6:	429a      	cmp	r2, r3
   21ae8:	d80b      	bhi.n	21b02 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   21aea:	4b7c      	ldr	r3, [pc, #496]	; (21cdc <hif_send+0x36c>)
   21aec:	0018      	movs	r0, r3
   21aee:	4b7c      	ldr	r3, [pc, #496]	; (21ce0 <hif_send+0x370>)
   21af0:	4798      	blx	r3
   21af2:	4b7c      	ldr	r3, [pc, #496]	; (21ce4 <hif_send+0x374>)
   21af4:	0018      	movs	r0, r3
   21af6:	4b7a      	ldr	r3, [pc, #488]	; (21ce0 <hif_send+0x370>)
   21af8:	4798      	blx	r3
   21afa:	4b7b      	ldr	r3, [pc, #492]	; (21ce8 <hif_send+0x378>)
   21afc:	0018      	movs	r0, r3
   21afe:	4b78      	ldr	r3, [pc, #480]	; (21ce0 <hif_send+0x370>)
   21b00:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   21b02:	2001      	movs	r0, #1
   21b04:	4b79      	ldr	r3, [pc, #484]	; (21cec <hif_send+0x37c>)
   21b06:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   21b08:	697b      	ldr	r3, [r7, #20]
   21b0a:	2202      	movs	r2, #2
   21b0c:	4013      	ands	r3, r2
   21b0e:	d113      	bne.n	21b38 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   21b10:	231f      	movs	r3, #31
   21b12:	18fc      	adds	r4, r7, r3
   21b14:	2310      	movs	r3, #16
   21b16:	18fb      	adds	r3, r7, r3
   21b18:	4a75      	ldr	r2, [pc, #468]	; (21cf0 <hif_send+0x380>)
   21b1a:	0019      	movs	r1, r3
   21b1c:	0010      	movs	r0, r2
   21b1e:	4b6e      	ldr	r3, [pc, #440]	; (21cd8 <hif_send+0x368>)
   21b20:	4798      	blx	r3
   21b22:	0003      	movs	r3, r0
   21b24:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   21b26:	231f      	movs	r3, #31
   21b28:	18fb      	adds	r3, r7, r3
   21b2a:	781b      	ldrb	r3, [r3, #0]
   21b2c:	b25b      	sxtb	r3, r3
   21b2e:	2b00      	cmp	r3, #0
   21b30:	d015      	beq.n	21b5e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   21b32:	2300      	movs	r3, #0
   21b34:	613b      	str	r3, [r7, #16]
					goto ERR1;
   21b36:	e0bc      	b.n	21cb2 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   21b38:	230e      	movs	r3, #14
   21b3a:	18fb      	adds	r3, r7, r3
   21b3c:	881b      	ldrh	r3, [r3, #0]
   21b3e:	b29b      	uxth	r3, r3
   21b40:	3301      	adds	r3, #1
   21b42:	b29a      	uxth	r2, r3
   21b44:	230e      	movs	r3, #14
   21b46:	18fb      	adds	r3, r7, r3
   21b48:	801a      	strh	r2, [r3, #0]
   21b4a:	230e      	movs	r3, #14
   21b4c:	18fb      	adds	r3, r7, r3
   21b4e:	881b      	ldrh	r3, [r3, #0]
   21b50:	b29b      	uxth	r3, r3
   21b52:	4a68      	ldr	r2, [pc, #416]	; (21cf4 <hif_send+0x384>)
   21b54:	4293      	cmp	r3, r2
   21b56:	d9a7      	bls.n	21aa8 <hif_send+0x138>
   21b58:	e002      	b.n	21b60 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   21b5a:	46c0      	nop			; (mov r8, r8)
   21b5c:	e000      	b.n	21b60 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   21b5e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   21b60:	693b      	ldr	r3, [r7, #16]
   21b62:	2b00      	cmp	r3, #0
   21b64:	d100      	bne.n	21b68 <hif_send+0x1f8>
   21b66:	e074      	b.n	21c52 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   21b68:	693b      	ldr	r3, [r7, #16]
   21b6a:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   21b6c:	2318      	movs	r3, #24
   21b6e:	18fb      	adds	r3, r7, r3
   21b70:	885b      	ldrh	r3, [r3, #2]
   21b72:	b29a      	uxth	r2, r3
   21b74:	2318      	movs	r3, #24
   21b76:	18fb      	adds	r3, r7, r3
   21b78:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   21b7a:	68bb      	ldr	r3, [r7, #8]
   21b7c:	221f      	movs	r2, #31
   21b7e:	18bc      	adds	r4, r7, r2
   21b80:	2218      	movs	r2, #24
   21b82:	18b9      	adds	r1, r7, r2
   21b84:	2208      	movs	r2, #8
   21b86:	0018      	movs	r0, r3
   21b88:	4b5b      	ldr	r3, [pc, #364]	; (21cf8 <hif_send+0x388>)
   21b8a:	4798      	blx	r3
   21b8c:	0003      	movs	r3, r0
   21b8e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21b90:	231f      	movs	r3, #31
   21b92:	18fb      	adds	r3, r7, r3
   21b94:	781b      	ldrb	r3, [r3, #0]
   21b96:	b25b      	sxtb	r3, r3
   21b98:	2b00      	cmp	r3, #0
   21b9a:	d000      	beq.n	21b9e <hif_send+0x22e>
   21b9c:	e084      	b.n	21ca8 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   21b9e:	68bb      	ldr	r3, [r7, #8]
   21ba0:	3308      	adds	r3, #8
   21ba2:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   21ba4:	683b      	ldr	r3, [r7, #0]
   21ba6:	2b00      	cmp	r3, #0
   21ba8:	d016      	beq.n	21bd8 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   21baa:	68b8      	ldr	r0, [r7, #8]
   21bac:	1d3b      	adds	r3, r7, #4
   21bae:	881a      	ldrh	r2, [r3, #0]
   21bb0:	231f      	movs	r3, #31
   21bb2:	18fc      	adds	r4, r7, r3
   21bb4:	683b      	ldr	r3, [r7, #0]
   21bb6:	0019      	movs	r1, r3
   21bb8:	4b4f      	ldr	r3, [pc, #316]	; (21cf8 <hif_send+0x388>)
   21bba:	4798      	blx	r3
   21bbc:	0003      	movs	r3, r0
   21bbe:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21bc0:	231f      	movs	r3, #31
   21bc2:	18fb      	adds	r3, r7, r3
   21bc4:	781b      	ldrb	r3, [r3, #0]
   21bc6:	b25b      	sxtb	r3, r3
   21bc8:	2b00      	cmp	r3, #0
   21bca:	d000      	beq.n	21bce <hif_send+0x25e>
   21bcc:	e06e      	b.n	21cac <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   21bce:	1d3b      	adds	r3, r7, #4
   21bd0:	881a      	ldrh	r2, [r3, #0]
   21bd2:	68bb      	ldr	r3, [r7, #8]
   21bd4:	18d3      	adds	r3, r2, r3
   21bd6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   21bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21bda:	2b00      	cmp	r3, #0
   21bdc:	d021      	beq.n	21c22 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   21bde:	2338      	movs	r3, #56	; 0x38
   21be0:	18fb      	adds	r3, r7, r3
   21be2:	881a      	ldrh	r2, [r3, #0]
   21be4:	1d3b      	adds	r3, r7, #4
   21be6:	881b      	ldrh	r3, [r3, #0]
   21be8:	1ad3      	subs	r3, r2, r3
   21bea:	001a      	movs	r2, r3
   21bec:	68bb      	ldr	r3, [r7, #8]
   21bee:	18d3      	adds	r3, r2, r3
   21bf0:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   21bf2:	68b8      	ldr	r0, [r7, #8]
   21bf4:	2334      	movs	r3, #52	; 0x34
   21bf6:	18fb      	adds	r3, r7, r3
   21bf8:	881a      	ldrh	r2, [r3, #0]
   21bfa:	231f      	movs	r3, #31
   21bfc:	18fc      	adds	r4, r7, r3
   21bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21c00:	0019      	movs	r1, r3
   21c02:	4b3d      	ldr	r3, [pc, #244]	; (21cf8 <hif_send+0x388>)
   21c04:	4798      	blx	r3
   21c06:	0003      	movs	r3, r0
   21c08:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21c0a:	231f      	movs	r3, #31
   21c0c:	18fb      	adds	r3, r7, r3
   21c0e:	781b      	ldrb	r3, [r3, #0]
   21c10:	b25b      	sxtb	r3, r3
   21c12:	2b00      	cmp	r3, #0
   21c14:	d14c      	bne.n	21cb0 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   21c16:	2334      	movs	r3, #52	; 0x34
   21c18:	18fb      	adds	r3, r7, r3
   21c1a:	881a      	ldrh	r2, [r3, #0]
   21c1c:	68bb      	ldr	r3, [r7, #8]
   21c1e:	18d3      	adds	r3, r2, r3
   21c20:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   21c22:	693b      	ldr	r3, [r7, #16]
   21c24:	009b      	lsls	r3, r3, #2
   21c26:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   21c28:	697b      	ldr	r3, [r7, #20]
   21c2a:	2202      	movs	r2, #2
   21c2c:	4313      	orrs	r3, r2
   21c2e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   21c30:	697b      	ldr	r3, [r7, #20]
   21c32:	221f      	movs	r2, #31
   21c34:	18bc      	adds	r4, r7, r2
   21c36:	4a31      	ldr	r2, [pc, #196]	; (21cfc <hif_send+0x38c>)
   21c38:	0019      	movs	r1, r3
   21c3a:	0010      	movs	r0, r2
   21c3c:	4b24      	ldr	r3, [pc, #144]	; (21cd0 <hif_send+0x360>)
   21c3e:	4798      	blx	r3
   21c40:	0003      	movs	r3, r0
   21c42:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21c44:	231f      	movs	r3, #31
   21c46:	18fb      	adds	r3, r7, r3
   21c48:	781b      	ldrb	r3, [r3, #0]
   21c4a:	b25b      	sxtb	r3, r3
   21c4c:	2b00      	cmp	r3, #0
   21c4e:	d01c      	beq.n	21c8a <hif_send+0x31a>
   21c50:	e02f      	b.n	21cb2 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   21c52:	231f      	movs	r3, #31
   21c54:	18fc      	adds	r4, r7, r3
   21c56:	4b2a      	ldr	r3, [pc, #168]	; (21d00 <hif_send+0x390>)
   21c58:	4798      	blx	r3
   21c5a:	0003      	movs	r3, r0
   21c5c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   21c5e:	231f      	movs	r3, #31
   21c60:	18fb      	adds	r3, r7, r3
   21c62:	22fd      	movs	r2, #253	; 0xfd
   21c64:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   21c66:	e026      	b.n	21cb6 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   21c68:	2398      	movs	r3, #152	; 0x98
   21c6a:	33ff      	adds	r3, #255	; 0xff
   21c6c:	001a      	movs	r2, r3
   21c6e:	4925      	ldr	r1, [pc, #148]	; (21d04 <hif_send+0x394>)
   21c70:	4b25      	ldr	r3, [pc, #148]	; (21d08 <hif_send+0x398>)
   21c72:	0018      	movs	r0, r3
   21c74:	4b1a      	ldr	r3, [pc, #104]	; (21ce0 <hif_send+0x370>)
   21c76:	4798      	blx	r3
   21c78:	4b24      	ldr	r3, [pc, #144]	; (21d0c <hif_send+0x39c>)
   21c7a:	0018      	movs	r0, r3
   21c7c:	4b18      	ldr	r3, [pc, #96]	; (21ce0 <hif_send+0x370>)
   21c7e:	4798      	blx	r3
   21c80:	4b19      	ldr	r3, [pc, #100]	; (21ce8 <hif_send+0x378>)
   21c82:	0018      	movs	r0, r3
   21c84:	4b16      	ldr	r3, [pc, #88]	; (21ce0 <hif_send+0x370>)
   21c86:	4798      	blx	r3
		goto ERR2;
   21c88:	e015      	b.n	21cb6 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   21c8a:	231f      	movs	r3, #31
   21c8c:	18fc      	adds	r4, r7, r3
   21c8e:	4b1c      	ldr	r3, [pc, #112]	; (21d00 <hif_send+0x390>)
   21c90:	4798      	blx	r3
   21c92:	0003      	movs	r3, r0
   21c94:	7023      	strb	r3, [r4, #0]
	return ret;
   21c96:	231f      	movs	r3, #31
   21c98:	18fb      	adds	r3, r7, r3
   21c9a:	781b      	ldrb	r3, [r3, #0]
   21c9c:	b25b      	sxtb	r3, r3
   21c9e:	e00e      	b.n	21cbe <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   21ca0:	46c0      	nop			; (mov r8, r8)
   21ca2:	e006      	b.n	21cb2 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   21ca4:	46c0      	nop			; (mov r8, r8)
   21ca6:	e004      	b.n	21cb2 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   21ca8:	46c0      	nop			; (mov r8, r8)
   21caa:	e002      	b.n	21cb2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21cac:	46c0      	nop			; (mov r8, r8)
   21cae:	e000      	b.n	21cb2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21cb0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   21cb2:	4b17      	ldr	r3, [pc, #92]	; (21d10 <hif_send+0x3a0>)
   21cb4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   21cb6:	231f      	movs	r3, #31
   21cb8:	18fb      	adds	r3, r7, r3
   21cba:	781b      	ldrb	r3, [r3, #0]
   21cbc:	b25b      	sxtb	r3, r3
}
   21cbe:	0018      	movs	r0, r3
   21cc0:	46bd      	mov	sp, r7
   21cc2:	b009      	add	sp, #36	; 0x24
   21cc4:	bd90      	pop	{r4, r7, pc}
   21cc6:	46c0      	nop			; (mov r8, r8)
   21cc8:	00021839 	.word	0x00021839
   21ccc:	0000108c 	.word	0x0000108c
   21cd0:	000237c5 	.word	0x000237c5
   21cd4:	00001078 	.word	0x00001078
   21cd8:	000237a1 	.word	0x000237a1
   21cdc:	00039314 	.word	0x00039314
   21ce0:	0001e979 	.word	0x0001e979
   21ce4:	00039320 	.word	0x00039320
   21ce8:	00039334 	.word	0x00039334
   21cec:	00020e31 	.word	0x00020e31
   21cf0:	00150400 	.word	0x00150400
   21cf4:	000003e7 	.word	0x000003e7
   21cf8:	0002390d 	.word	0x0002390d
   21cfc:	0000106c 	.word	0x0000106c
   21d00:	000218d1 	.word	0x000218d1
   21d04:	0003963c 	.word	0x0003963c
   21d08:	00039338 	.word	0x00039338
   21d0c:	0003934c 	.word	0x0003934c
   21d10:	000218a9 	.word	0x000218a9

00021d14 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   21d14:	b590      	push	{r4, r7, lr}
   21d16:	b087      	sub	sp, #28
   21d18:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   21d1a:	230f      	movs	r3, #15
   21d1c:	18fb      	adds	r3, r7, r3
   21d1e:	2200      	movs	r2, #0
   21d20:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   21d22:	230f      	movs	r3, #15
   21d24:	18fc      	adds	r4, r7, r3
   21d26:	2308      	movs	r3, #8
   21d28:	18fb      	adds	r3, r7, r3
   21d2a:	4adc      	ldr	r2, [pc, #880]	; (2209c <hif_isr+0x388>)
   21d2c:	0019      	movs	r1, r3
   21d2e:	0010      	movs	r0, r2
   21d30:	4bdb      	ldr	r3, [pc, #876]	; (220a0 <hif_isr+0x38c>)
   21d32:	4798      	blx	r3
   21d34:	0003      	movs	r3, r0
   21d36:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   21d38:	230f      	movs	r3, #15
   21d3a:	18fb      	adds	r3, r7, r3
   21d3c:	781b      	ldrb	r3, [r3, #0]
   21d3e:	b25b      	sxtb	r3, r3
   21d40:	2b00      	cmp	r3, #0
   21d42:	d000      	beq.n	21d46 <hif_isr+0x32>
   21d44:	e21e      	b.n	22184 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   21d46:	68bb      	ldr	r3, [r7, #8]
   21d48:	2201      	movs	r2, #1
   21d4a:	4013      	ands	r3, r2
   21d4c:	d100      	bne.n	21d50 <hif_isr+0x3c>
   21d4e:	e204      	b.n	2215a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   21d50:	2000      	movs	r0, #0
   21d52:	4bd4      	ldr	r3, [pc, #848]	; (220a4 <hif_isr+0x390>)
   21d54:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   21d56:	68bb      	ldr	r3, [r7, #8]
   21d58:	2201      	movs	r2, #1
   21d5a:	4393      	bics	r3, r2
   21d5c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   21d5e:	68bb      	ldr	r3, [r7, #8]
   21d60:	220f      	movs	r2, #15
   21d62:	18bc      	adds	r4, r7, r2
   21d64:	4acd      	ldr	r2, [pc, #820]	; (2209c <hif_isr+0x388>)
   21d66:	0019      	movs	r1, r3
   21d68:	0010      	movs	r0, r2
   21d6a:	4bcf      	ldr	r3, [pc, #828]	; (220a8 <hif_isr+0x394>)
   21d6c:	4798      	blx	r3
   21d6e:	0003      	movs	r3, r0
   21d70:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21d72:	230f      	movs	r3, #15
   21d74:	18fb      	adds	r3, r7, r3
   21d76:	781b      	ldrb	r3, [r3, #0]
   21d78:	b25b      	sxtb	r3, r3
   21d7a:	2b00      	cmp	r3, #0
   21d7c:	d000      	beq.n	21d80 <hif_isr+0x6c>
   21d7e:	e210      	b.n	221a2 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   21d80:	4bca      	ldr	r3, [pc, #808]	; (220ac <hif_isr+0x398>)
   21d82:	2201      	movs	r2, #1
   21d84:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   21d86:	68bb      	ldr	r3, [r7, #8]
   21d88:	089b      	lsrs	r3, r3, #2
   21d8a:	b29a      	uxth	r2, r3
   21d8c:	230c      	movs	r3, #12
   21d8e:	18fb      	adds	r3, r7, r3
   21d90:	0512      	lsls	r2, r2, #20
   21d92:	0d12      	lsrs	r2, r2, #20
   21d94:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   21d96:	230c      	movs	r3, #12
   21d98:	18fb      	adds	r3, r7, r3
   21d9a:	881b      	ldrh	r3, [r3, #0]
   21d9c:	2b00      	cmp	r3, #0
   21d9e:	d100      	bne.n	21da2 <hif_isr+0x8e>
   21da0:	e1c8      	b.n	22134 <hif_isr+0x420>
				uint32 address = 0;
   21da2:	2300      	movs	r3, #0
   21da4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   21da6:	230f      	movs	r3, #15
   21da8:	18fc      	adds	r4, r7, r3
   21daa:	003b      	movs	r3, r7
   21dac:	4ac0      	ldr	r2, [pc, #768]	; (220b0 <hif_isr+0x39c>)
   21dae:	0019      	movs	r1, r3
   21db0:	0010      	movs	r0, r2
   21db2:	4bbb      	ldr	r3, [pc, #748]	; (220a0 <hif_isr+0x38c>)
   21db4:	4798      	blx	r3
   21db6:	0003      	movs	r3, r0
   21db8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   21dba:	230f      	movs	r3, #15
   21dbc:	18fb      	adds	r3, r7, r3
   21dbe:	781b      	ldrb	r3, [r3, #0]
   21dc0:	b25b      	sxtb	r3, r3
   21dc2:	2b00      	cmp	r3, #0
   21dc4:	d012      	beq.n	21dec <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   21dc6:	23e4      	movs	r3, #228	; 0xe4
   21dc8:	005a      	lsls	r2, r3, #1
   21dca:	49ba      	ldr	r1, [pc, #744]	; (220b4 <hif_isr+0x3a0>)
   21dcc:	4bba      	ldr	r3, [pc, #744]	; (220b8 <hif_isr+0x3a4>)
   21dce:	0018      	movs	r0, r3
   21dd0:	4bba      	ldr	r3, [pc, #744]	; (220bc <hif_isr+0x3a8>)
   21dd2:	4798      	blx	r3
   21dd4:	4bba      	ldr	r3, [pc, #744]	; (220c0 <hif_isr+0x3ac>)
   21dd6:	0018      	movs	r0, r3
   21dd8:	4bb8      	ldr	r3, [pc, #736]	; (220bc <hif_isr+0x3a8>)
   21dda:	4798      	blx	r3
   21ddc:	4bb9      	ldr	r3, [pc, #740]	; (220c4 <hif_isr+0x3b0>)
   21dde:	0018      	movs	r0, r3
   21de0:	4bb6      	ldr	r3, [pc, #728]	; (220bc <hif_isr+0x3a8>)
   21de2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21de4:	2001      	movs	r0, #1
   21de6:	4baf      	ldr	r3, [pc, #700]	; (220a4 <hif_isr+0x390>)
   21de8:	4798      	blx	r3
					goto ERR1;
   21dea:	e1db      	b.n	221a4 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   21dec:	683a      	ldr	r2, [r7, #0]
   21dee:	4baf      	ldr	r3, [pc, #700]	; (220ac <hif_isr+0x398>)
   21df0:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   21df2:	230c      	movs	r3, #12
   21df4:	18fb      	adds	r3, r7, r3
   21df6:	881a      	ldrh	r2, [r3, #0]
   21df8:	4bac      	ldr	r3, [pc, #688]	; (220ac <hif_isr+0x398>)
   21dfa:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   21dfc:	683b      	ldr	r3, [r7, #0]
   21dfe:	220f      	movs	r2, #15
   21e00:	18bc      	adds	r4, r7, r2
   21e02:	1d39      	adds	r1, r7, #4
   21e04:	2204      	movs	r2, #4
   21e06:	0018      	movs	r0, r3
   21e08:	4baf      	ldr	r3, [pc, #700]	; (220c8 <hif_isr+0x3b4>)
   21e0a:	4798      	blx	r3
   21e0c:	0003      	movs	r3, r0
   21e0e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   21e10:	1d3b      	adds	r3, r7, #4
   21e12:	885b      	ldrh	r3, [r3, #2]
   21e14:	b29a      	uxth	r2, r3
   21e16:	1d3b      	adds	r3, r7, #4
   21e18:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   21e1a:	230f      	movs	r3, #15
   21e1c:	18fb      	adds	r3, r7, r3
   21e1e:	781b      	ldrb	r3, [r3, #0]
   21e20:	b25b      	sxtb	r3, r3
   21e22:	2b00      	cmp	r3, #0
   21e24:	d012      	beq.n	21e4c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   21e26:	23e9      	movs	r3, #233	; 0xe9
   21e28:	005a      	lsls	r2, r3, #1
   21e2a:	49a2      	ldr	r1, [pc, #648]	; (220b4 <hif_isr+0x3a0>)
   21e2c:	4ba2      	ldr	r3, [pc, #648]	; (220b8 <hif_isr+0x3a4>)
   21e2e:	0018      	movs	r0, r3
   21e30:	4ba2      	ldr	r3, [pc, #648]	; (220bc <hif_isr+0x3a8>)
   21e32:	4798      	blx	r3
   21e34:	4ba5      	ldr	r3, [pc, #660]	; (220cc <hif_isr+0x3b8>)
   21e36:	0018      	movs	r0, r3
   21e38:	4ba0      	ldr	r3, [pc, #640]	; (220bc <hif_isr+0x3a8>)
   21e3a:	4798      	blx	r3
   21e3c:	4ba1      	ldr	r3, [pc, #644]	; (220c4 <hif_isr+0x3b0>)
   21e3e:	0018      	movs	r0, r3
   21e40:	4b9e      	ldr	r3, [pc, #632]	; (220bc <hif_isr+0x3a8>)
   21e42:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21e44:	2001      	movs	r0, #1
   21e46:	4b97      	ldr	r3, [pc, #604]	; (220a4 <hif_isr+0x390>)
   21e48:	4798      	blx	r3
					goto ERR1;
   21e4a:	e1ab      	b.n	221a4 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   21e4c:	1d3b      	adds	r3, r7, #4
   21e4e:	885b      	ldrh	r3, [r3, #2]
   21e50:	b29b      	uxth	r3, r3
   21e52:	220c      	movs	r2, #12
   21e54:	18ba      	adds	r2, r7, r2
   21e56:	8812      	ldrh	r2, [r2, #0]
   21e58:	429a      	cmp	r2, r3
   21e5a:	d02f      	beq.n	21ebc <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   21e5c:	230c      	movs	r3, #12
   21e5e:	18fb      	adds	r3, r7, r3
   21e60:	881b      	ldrh	r3, [r3, #0]
   21e62:	1d3a      	adds	r2, r7, #4
   21e64:	8852      	ldrh	r2, [r2, #2]
   21e66:	b292      	uxth	r2, r2
   21e68:	1a9b      	subs	r3, r3, r2
   21e6a:	2b04      	cmp	r3, #4
   21e6c:	dd26      	ble.n	21ebc <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   21e6e:	23dc      	movs	r3, #220	; 0xdc
   21e70:	33ff      	adds	r3, #255	; 0xff
   21e72:	001a      	movs	r2, r3
   21e74:	498f      	ldr	r1, [pc, #572]	; (220b4 <hif_isr+0x3a0>)
   21e76:	4b90      	ldr	r3, [pc, #576]	; (220b8 <hif_isr+0x3a4>)
   21e78:	0018      	movs	r0, r3
   21e7a:	4b90      	ldr	r3, [pc, #576]	; (220bc <hif_isr+0x3a8>)
   21e7c:	4798      	blx	r3
   21e7e:	230c      	movs	r3, #12
   21e80:	18fb      	adds	r3, r7, r3
   21e82:	8819      	ldrh	r1, [r3, #0]
   21e84:	1d3b      	adds	r3, r7, #4
   21e86:	885b      	ldrh	r3, [r3, #2]
   21e88:	b29b      	uxth	r3, r3
   21e8a:	001a      	movs	r2, r3
   21e8c:	1d3b      	adds	r3, r7, #4
   21e8e:	781b      	ldrb	r3, [r3, #0]
   21e90:	b2db      	uxtb	r3, r3
   21e92:	001c      	movs	r4, r3
   21e94:	1d3b      	adds	r3, r7, #4
   21e96:	785b      	ldrb	r3, [r3, #1]
   21e98:	b2db      	uxtb	r3, r3
   21e9a:	488d      	ldr	r0, [pc, #564]	; (220d0 <hif_isr+0x3bc>)
   21e9c:	9300      	str	r3, [sp, #0]
   21e9e:	0023      	movs	r3, r4
   21ea0:	4c86      	ldr	r4, [pc, #536]	; (220bc <hif_isr+0x3a8>)
   21ea2:	47a0      	blx	r4
   21ea4:	4b87      	ldr	r3, [pc, #540]	; (220c4 <hif_isr+0x3b0>)
   21ea6:	0018      	movs	r0, r3
   21ea8:	4b84      	ldr	r3, [pc, #528]	; (220bc <hif_isr+0x3a8>)
   21eaa:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   21eac:	2001      	movs	r0, #1
   21eae:	4b7d      	ldr	r3, [pc, #500]	; (220a4 <hif_isr+0x390>)
   21eb0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   21eb2:	230f      	movs	r3, #15
   21eb4:	18fb      	adds	r3, r7, r3
   21eb6:	22fa      	movs	r2, #250	; 0xfa
   21eb8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   21eba:	e173      	b.n	221a4 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   21ebc:	1d3b      	adds	r3, r7, #4
   21ebe:	781b      	ldrb	r3, [r3, #0]
   21ec0:	b2db      	uxtb	r3, r3
   21ec2:	2b01      	cmp	r3, #1
   21ec4:	d122      	bne.n	21f0c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   21ec6:	4b79      	ldr	r3, [pc, #484]	; (220ac <hif_isr+0x398>)
   21ec8:	691b      	ldr	r3, [r3, #16]
   21eca:	2b00      	cmp	r3, #0
   21ecc:	d00d      	beq.n	21eea <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21ece:	4b77      	ldr	r3, [pc, #476]	; (220ac <hif_isr+0x398>)
   21ed0:	691b      	ldr	r3, [r3, #16]
   21ed2:	1d3a      	adds	r2, r7, #4
   21ed4:	7852      	ldrb	r2, [r2, #1]
   21ed6:	b2d0      	uxtb	r0, r2
   21ed8:	1d3a      	adds	r2, r7, #4
   21eda:	8852      	ldrh	r2, [r2, #2]
   21edc:	b292      	uxth	r2, r2
   21ede:	3a08      	subs	r2, #8
   21ee0:	b291      	uxth	r1, r2
   21ee2:	683a      	ldr	r2, [r7, #0]
   21ee4:	3208      	adds	r2, #8
   21ee6:	4798      	blx	r3
   21ee8:	e102      	b.n	220f0 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   21eea:	23e8      	movs	r3, #232	; 0xe8
   21eec:	33ff      	adds	r3, #255	; 0xff
   21eee:	001a      	movs	r2, r3
   21ef0:	4970      	ldr	r1, [pc, #448]	; (220b4 <hif_isr+0x3a0>)
   21ef2:	4b71      	ldr	r3, [pc, #452]	; (220b8 <hif_isr+0x3a4>)
   21ef4:	0018      	movs	r0, r3
   21ef6:	4b71      	ldr	r3, [pc, #452]	; (220bc <hif_isr+0x3a8>)
   21ef8:	4798      	blx	r3
   21efa:	4b76      	ldr	r3, [pc, #472]	; (220d4 <hif_isr+0x3c0>)
   21efc:	0018      	movs	r0, r3
   21efe:	4b6f      	ldr	r3, [pc, #444]	; (220bc <hif_isr+0x3a8>)
   21f00:	4798      	blx	r3
   21f02:	4b70      	ldr	r3, [pc, #448]	; (220c4 <hif_isr+0x3b0>)
   21f04:	0018      	movs	r0, r3
   21f06:	4b6d      	ldr	r3, [pc, #436]	; (220bc <hif_isr+0x3a8>)
   21f08:	4798      	blx	r3
   21f0a:	e0f1      	b.n	220f0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   21f0c:	1d3b      	adds	r3, r7, #4
   21f0e:	781b      	ldrb	r3, [r3, #0]
   21f10:	b2db      	uxtb	r3, r3
   21f12:	2b02      	cmp	r3, #2
   21f14:	d122      	bne.n	21f5c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   21f16:	4b65      	ldr	r3, [pc, #404]	; (220ac <hif_isr+0x398>)
   21f18:	695b      	ldr	r3, [r3, #20]
   21f1a:	2b00      	cmp	r3, #0
   21f1c:	d00d      	beq.n	21f3a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21f1e:	4b63      	ldr	r3, [pc, #396]	; (220ac <hif_isr+0x398>)
   21f20:	695b      	ldr	r3, [r3, #20]
   21f22:	1d3a      	adds	r2, r7, #4
   21f24:	7852      	ldrb	r2, [r2, #1]
   21f26:	b2d0      	uxtb	r0, r2
   21f28:	1d3a      	adds	r2, r7, #4
   21f2a:	8852      	ldrh	r2, [r2, #2]
   21f2c:	b292      	uxth	r2, r2
   21f2e:	3a08      	subs	r2, #8
   21f30:	b291      	uxth	r1, r2
   21f32:	683a      	ldr	r2, [r7, #0]
   21f34:	3208      	adds	r2, #8
   21f36:	4798      	blx	r3
   21f38:	e0da      	b.n	220f0 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   21f3a:	23f0      	movs	r3, #240	; 0xf0
   21f3c:	33ff      	adds	r3, #255	; 0xff
   21f3e:	001a      	movs	r2, r3
   21f40:	495c      	ldr	r1, [pc, #368]	; (220b4 <hif_isr+0x3a0>)
   21f42:	4b5d      	ldr	r3, [pc, #372]	; (220b8 <hif_isr+0x3a4>)
   21f44:	0018      	movs	r0, r3
   21f46:	4b5d      	ldr	r3, [pc, #372]	; (220bc <hif_isr+0x3a8>)
   21f48:	4798      	blx	r3
   21f4a:	4b63      	ldr	r3, [pc, #396]	; (220d8 <hif_isr+0x3c4>)
   21f4c:	0018      	movs	r0, r3
   21f4e:	4b5b      	ldr	r3, [pc, #364]	; (220bc <hif_isr+0x3a8>)
   21f50:	4798      	blx	r3
   21f52:	4b5c      	ldr	r3, [pc, #368]	; (220c4 <hif_isr+0x3b0>)
   21f54:	0018      	movs	r0, r3
   21f56:	4b59      	ldr	r3, [pc, #356]	; (220bc <hif_isr+0x3a8>)
   21f58:	4798      	blx	r3
   21f5a:	e0c9      	b.n	220f0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   21f5c:	1d3b      	adds	r3, r7, #4
   21f5e:	781b      	ldrb	r3, [r3, #0]
   21f60:	b2db      	uxtb	r3, r3
   21f62:	2b04      	cmp	r3, #4
   21f64:	d122      	bne.n	21fac <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   21f66:	4b51      	ldr	r3, [pc, #324]	; (220ac <hif_isr+0x398>)
   21f68:	699b      	ldr	r3, [r3, #24]
   21f6a:	2b00      	cmp	r3, #0
   21f6c:	d00d      	beq.n	21f8a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21f6e:	4b4f      	ldr	r3, [pc, #316]	; (220ac <hif_isr+0x398>)
   21f70:	699b      	ldr	r3, [r3, #24]
   21f72:	1d3a      	adds	r2, r7, #4
   21f74:	7852      	ldrb	r2, [r2, #1]
   21f76:	b2d0      	uxtb	r0, r2
   21f78:	1d3a      	adds	r2, r7, #4
   21f7a:	8852      	ldrh	r2, [r2, #2]
   21f7c:	b292      	uxth	r2, r2
   21f7e:	3a08      	subs	r2, #8
   21f80:	b291      	uxth	r1, r2
   21f82:	683a      	ldr	r2, [r7, #0]
   21f84:	3208      	adds	r2, #8
   21f86:	4798      	blx	r3
   21f88:	e0b2      	b.n	220f0 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   21f8a:	23f8      	movs	r3, #248	; 0xf8
   21f8c:	33ff      	adds	r3, #255	; 0xff
   21f8e:	001a      	movs	r2, r3
   21f90:	4948      	ldr	r1, [pc, #288]	; (220b4 <hif_isr+0x3a0>)
   21f92:	4b49      	ldr	r3, [pc, #292]	; (220b8 <hif_isr+0x3a4>)
   21f94:	0018      	movs	r0, r3
   21f96:	4b49      	ldr	r3, [pc, #292]	; (220bc <hif_isr+0x3a8>)
   21f98:	4798      	blx	r3
   21f9a:	4b50      	ldr	r3, [pc, #320]	; (220dc <hif_isr+0x3c8>)
   21f9c:	0018      	movs	r0, r3
   21f9e:	4b47      	ldr	r3, [pc, #284]	; (220bc <hif_isr+0x3a8>)
   21fa0:	4798      	blx	r3
   21fa2:	4b48      	ldr	r3, [pc, #288]	; (220c4 <hif_isr+0x3b0>)
   21fa4:	0018      	movs	r0, r3
   21fa6:	4b45      	ldr	r3, [pc, #276]	; (220bc <hif_isr+0x3a8>)
   21fa8:	4798      	blx	r3
   21faa:	e0a1      	b.n	220f0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   21fac:	1d3b      	adds	r3, r7, #4
   21fae:	781b      	ldrb	r3, [r3, #0]
   21fb0:	b2db      	uxtb	r3, r3
   21fb2:	2b06      	cmp	r3, #6
   21fb4:	d121      	bne.n	21ffa <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   21fb6:	4b3d      	ldr	r3, [pc, #244]	; (220ac <hif_isr+0x398>)
   21fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21fba:	2b00      	cmp	r3, #0
   21fbc:	d00d      	beq.n	21fda <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21fbe:	4b3b      	ldr	r3, [pc, #236]	; (220ac <hif_isr+0x398>)
   21fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21fc2:	1d3a      	adds	r2, r7, #4
   21fc4:	7852      	ldrb	r2, [r2, #1]
   21fc6:	b2d0      	uxtb	r0, r2
   21fc8:	1d3a      	adds	r2, r7, #4
   21fca:	8852      	ldrh	r2, [r2, #2]
   21fcc:	b292      	uxth	r2, r2
   21fce:	3a08      	subs	r2, #8
   21fd0:	b291      	uxth	r1, r2
   21fd2:	683a      	ldr	r2, [r7, #0]
   21fd4:	3208      	adds	r2, #8
   21fd6:	4798      	blx	r3
   21fd8:	e08a      	b.n	220f0 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   21fda:	2380      	movs	r3, #128	; 0x80
   21fdc:	009a      	lsls	r2, r3, #2
   21fde:	4935      	ldr	r1, [pc, #212]	; (220b4 <hif_isr+0x3a0>)
   21fe0:	4b35      	ldr	r3, [pc, #212]	; (220b8 <hif_isr+0x3a4>)
   21fe2:	0018      	movs	r0, r3
   21fe4:	4b35      	ldr	r3, [pc, #212]	; (220bc <hif_isr+0x3a8>)
   21fe6:	4798      	blx	r3
   21fe8:	4b3d      	ldr	r3, [pc, #244]	; (220e0 <hif_isr+0x3cc>)
   21fea:	0018      	movs	r0, r3
   21fec:	4b33      	ldr	r3, [pc, #204]	; (220bc <hif_isr+0x3a8>)
   21fee:	4798      	blx	r3
   21ff0:	4b34      	ldr	r3, [pc, #208]	; (220c4 <hif_isr+0x3b0>)
   21ff2:	0018      	movs	r0, r3
   21ff4:	4b31      	ldr	r3, [pc, #196]	; (220bc <hif_isr+0x3a8>)
   21ff6:	4798      	blx	r3
   21ff8:	e07a      	b.n	220f0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   21ffa:	1d3b      	adds	r3, r7, #4
   21ffc:	781b      	ldrb	r3, [r3, #0]
   21ffe:	b2db      	uxtb	r3, r3
   22000:	2b07      	cmp	r3, #7
   22002:	d120      	bne.n	22046 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   22004:	4b29      	ldr	r3, [pc, #164]	; (220ac <hif_isr+0x398>)
   22006:	69db      	ldr	r3, [r3, #28]
   22008:	2b00      	cmp	r3, #0
   2200a:	d00d      	beq.n	22028 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2200c:	4b27      	ldr	r3, [pc, #156]	; (220ac <hif_isr+0x398>)
   2200e:	69db      	ldr	r3, [r3, #28]
   22010:	1d3a      	adds	r2, r7, #4
   22012:	7852      	ldrb	r2, [r2, #1]
   22014:	b2d0      	uxtb	r0, r2
   22016:	1d3a      	adds	r2, r7, #4
   22018:	8852      	ldrh	r2, [r2, #2]
   2201a:	b292      	uxth	r2, r2
   2201c:	3a08      	subs	r2, #8
   2201e:	b291      	uxth	r1, r2
   22020:	683a      	ldr	r2, [r7, #0]
   22022:	3208      	adds	r2, #8
   22024:	4798      	blx	r3
   22026:	e063      	b.n	220f0 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   22028:	4a2e      	ldr	r2, [pc, #184]	; (220e4 <hif_isr+0x3d0>)
   2202a:	4922      	ldr	r1, [pc, #136]	; (220b4 <hif_isr+0x3a0>)
   2202c:	4b22      	ldr	r3, [pc, #136]	; (220b8 <hif_isr+0x3a4>)
   2202e:	0018      	movs	r0, r3
   22030:	4b22      	ldr	r3, [pc, #136]	; (220bc <hif_isr+0x3a8>)
   22032:	4798      	blx	r3
   22034:	4b2c      	ldr	r3, [pc, #176]	; (220e8 <hif_isr+0x3d4>)
   22036:	0018      	movs	r0, r3
   22038:	4b20      	ldr	r3, [pc, #128]	; (220bc <hif_isr+0x3a8>)
   2203a:	4798      	blx	r3
   2203c:	4b21      	ldr	r3, [pc, #132]	; (220c4 <hif_isr+0x3b0>)
   2203e:	0018      	movs	r0, r3
   22040:	4b1e      	ldr	r3, [pc, #120]	; (220bc <hif_isr+0x3a8>)
   22042:	4798      	blx	r3
   22044:	e054      	b.n	220f0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   22046:	1d3b      	adds	r3, r7, #4
   22048:	781b      	ldrb	r3, [r3, #0]
   2204a:	b2db      	uxtb	r3, r3
   2204c:	2b05      	cmp	r3, #5
   2204e:	d111      	bne.n	22074 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   22050:	4b16      	ldr	r3, [pc, #88]	; (220ac <hif_isr+0x398>)
   22052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22054:	2b00      	cmp	r3, #0
   22056:	d04b      	beq.n	220f0 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   22058:	4b14      	ldr	r3, [pc, #80]	; (220ac <hif_isr+0x398>)
   2205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2205c:	1d3a      	adds	r2, r7, #4
   2205e:	7852      	ldrb	r2, [r2, #1]
   22060:	b2d0      	uxtb	r0, r2
   22062:	1d3a      	adds	r2, r7, #4
   22064:	8852      	ldrh	r2, [r2, #2]
   22066:	b292      	uxth	r2, r2
   22068:	3a08      	subs	r2, #8
   2206a:	b291      	uxth	r1, r2
   2206c:	683a      	ldr	r2, [r7, #0]
   2206e:	3208      	adds	r2, #8
   22070:	4798      	blx	r3
   22072:	e03d      	b.n	220f0 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   22074:	2384      	movs	r3, #132	; 0x84
   22076:	009a      	lsls	r2, r3, #2
   22078:	490e      	ldr	r1, [pc, #56]	; (220b4 <hif_isr+0x3a0>)
   2207a:	4b0f      	ldr	r3, [pc, #60]	; (220b8 <hif_isr+0x3a4>)
   2207c:	0018      	movs	r0, r3
   2207e:	4b0f      	ldr	r3, [pc, #60]	; (220bc <hif_isr+0x3a8>)
   22080:	4798      	blx	r3
   22082:	4b1a      	ldr	r3, [pc, #104]	; (220ec <hif_isr+0x3d8>)
   22084:	0018      	movs	r0, r3
   22086:	4b0d      	ldr	r3, [pc, #52]	; (220bc <hif_isr+0x3a8>)
   22088:	4798      	blx	r3
   2208a:	4b0e      	ldr	r3, [pc, #56]	; (220c4 <hif_isr+0x3b0>)
   2208c:	0018      	movs	r0, r3
   2208e:	4b0b      	ldr	r3, [pc, #44]	; (220bc <hif_isr+0x3a8>)
   22090:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   22092:	230f      	movs	r3, #15
   22094:	18fb      	adds	r3, r7, r3
   22096:	22fa      	movs	r2, #250	; 0xfa
   22098:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   2209a:	e083      	b.n	221a4 <hif_isr+0x490>
   2209c:	00001070 	.word	0x00001070
   220a0:	000237a1 	.word	0x000237a1
   220a4:	00020ec5 	.word	0x00020ec5
   220a8:	000237c5 	.word	0x000237c5
   220ac:	20005b68 	.word	0x20005b68
   220b0:	00001084 	.word	0x00001084
   220b4:	00039648 	.word	0x00039648
   220b8:	00039338 	.word	0x00039338
   220bc:	0001e979 	.word	0x0001e979
   220c0:	0003936c 	.word	0x0003936c
   220c4:	00039334 	.word	0x00039334
   220c8:	00023815 	.word	0x00023815
   220cc:	00039394 	.word	0x00039394
   220d0:	000393ac 	.word	0x000393ac
   220d4:	000393ec 	.word	0x000393ec
   220d8:	00039410 	.word	0x00039410
   220dc:	00039434 	.word	0x00039434
   220e0:	00039454 	.word	0x00039454
   220e4:	00000207 	.word	0x00000207
   220e8:	00039478 	.word	0x00039478
   220ec:	0003949c 	.word	0x0003949c
				}
				if(gstrHifCxt.u8HifRXDone)
   220f0:	4b30      	ldr	r3, [pc, #192]	; (221b4 <hif_isr+0x4a0>)
   220f2:	789b      	ldrb	r3, [r3, #2]
   220f4:	b2db      	uxtb	r3, r3
   220f6:	2b00      	cmp	r3, #0
   220f8:	d054      	beq.n	221a4 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   220fa:	4a2f      	ldr	r2, [pc, #188]	; (221b8 <hif_isr+0x4a4>)
   220fc:	492f      	ldr	r1, [pc, #188]	; (221bc <hif_isr+0x4a8>)
   220fe:	4b30      	ldr	r3, [pc, #192]	; (221c0 <hif_isr+0x4ac>)
   22100:	0018      	movs	r0, r3
   22102:	4b30      	ldr	r3, [pc, #192]	; (221c4 <hif_isr+0x4b0>)
   22104:	4798      	blx	r3
   22106:	1d3b      	adds	r3, r7, #4
   22108:	781b      	ldrb	r3, [r3, #0]
   2210a:	b2db      	uxtb	r3, r3
   2210c:	0019      	movs	r1, r3
   2210e:	1d3b      	adds	r3, r7, #4
   22110:	785b      	ldrb	r3, [r3, #1]
   22112:	b2db      	uxtb	r3, r3
   22114:	001a      	movs	r2, r3
   22116:	4b2c      	ldr	r3, [pc, #176]	; (221c8 <hif_isr+0x4b4>)
   22118:	0018      	movs	r0, r3
   2211a:	4b2a      	ldr	r3, [pc, #168]	; (221c4 <hif_isr+0x4b0>)
   2211c:	4798      	blx	r3
   2211e:	4b2b      	ldr	r3, [pc, #172]	; (221cc <hif_isr+0x4b8>)
   22120:	0018      	movs	r0, r3
   22122:	4b28      	ldr	r3, [pc, #160]	; (221c4 <hif_isr+0x4b0>)
   22124:	4798      	blx	r3
					ret = hif_set_rx_done();
   22126:	230f      	movs	r3, #15
   22128:	18fc      	adds	r4, r7, r3
   2212a:	4b29      	ldr	r3, [pc, #164]	; (221d0 <hif_isr+0x4bc>)
   2212c:	4798      	blx	r3
   2212e:	0003      	movs	r3, r0
   22130:	7023      	strb	r3, [r4, #0]
   22132:	e037      	b.n	221a4 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   22134:	4a27      	ldr	r2, [pc, #156]	; (221d4 <hif_isr+0x4c0>)
   22136:	4921      	ldr	r1, [pc, #132]	; (221bc <hif_isr+0x4a8>)
   22138:	4b21      	ldr	r3, [pc, #132]	; (221c0 <hif_isr+0x4ac>)
   2213a:	0018      	movs	r0, r3
   2213c:	4b21      	ldr	r3, [pc, #132]	; (221c4 <hif_isr+0x4b0>)
   2213e:	4798      	blx	r3
   22140:	4b25      	ldr	r3, [pc, #148]	; (221d8 <hif_isr+0x4c4>)
   22142:	0018      	movs	r0, r3
   22144:	4b1f      	ldr	r3, [pc, #124]	; (221c4 <hif_isr+0x4b0>)
   22146:	4798      	blx	r3
   22148:	4b20      	ldr	r3, [pc, #128]	; (221cc <hif_isr+0x4b8>)
   2214a:	0018      	movs	r0, r3
   2214c:	4b1d      	ldr	r3, [pc, #116]	; (221c4 <hif_isr+0x4b0>)
   2214e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   22150:	230f      	movs	r3, #15
   22152:	18fb      	adds	r3, r7, r3
   22154:	22fe      	movs	r2, #254	; 0xfe
   22156:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   22158:	e024      	b.n	221a4 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   2215a:	4a20      	ldr	r2, [pc, #128]	; (221dc <hif_isr+0x4c8>)
   2215c:	4917      	ldr	r1, [pc, #92]	; (221bc <hif_isr+0x4a8>)
   2215e:	4b18      	ldr	r3, [pc, #96]	; (221c0 <hif_isr+0x4ac>)
   22160:	0018      	movs	r0, r3
   22162:	4b18      	ldr	r3, [pc, #96]	; (221c4 <hif_isr+0x4b0>)
   22164:	4798      	blx	r3
   22166:	68ba      	ldr	r2, [r7, #8]
   22168:	4b1d      	ldr	r3, [pc, #116]	; (221e0 <hif_isr+0x4cc>)
   2216a:	0011      	movs	r1, r2
   2216c:	0018      	movs	r0, r3
   2216e:	4b15      	ldr	r3, [pc, #84]	; (221c4 <hif_isr+0x4b0>)
   22170:	4798      	blx	r3
   22172:	4b16      	ldr	r3, [pc, #88]	; (221cc <hif_isr+0x4b8>)
   22174:	0018      	movs	r0, r3
   22176:	4b13      	ldr	r3, [pc, #76]	; (221c4 <hif_isr+0x4b0>)
   22178:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2217a:	230f      	movs	r3, #15
   2217c:	18fb      	adds	r3, r7, r3
   2217e:	22f4      	movs	r2, #244	; 0xf4
   22180:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22182:	e00f      	b.n	221a4 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   22184:	4a17      	ldr	r2, [pc, #92]	; (221e4 <hif_isr+0x4d0>)
   22186:	490d      	ldr	r1, [pc, #52]	; (221bc <hif_isr+0x4a8>)
   22188:	4b0d      	ldr	r3, [pc, #52]	; (221c0 <hif_isr+0x4ac>)
   2218a:	0018      	movs	r0, r3
   2218c:	4b0d      	ldr	r3, [pc, #52]	; (221c4 <hif_isr+0x4b0>)
   2218e:	4798      	blx	r3
   22190:	4b15      	ldr	r3, [pc, #84]	; (221e8 <hif_isr+0x4d4>)
   22192:	0018      	movs	r0, r3
   22194:	4b0b      	ldr	r3, [pc, #44]	; (221c4 <hif_isr+0x4b0>)
   22196:	4798      	blx	r3
   22198:	4b0c      	ldr	r3, [pc, #48]	; (221cc <hif_isr+0x4b8>)
   2219a:	0018      	movs	r0, r3
   2219c:	4b09      	ldr	r3, [pc, #36]	; (221c4 <hif_isr+0x4b0>)
   2219e:	4798      	blx	r3
		goto ERR1;
   221a0:	e000      	b.n	221a4 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   221a2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   221a4:	230f      	movs	r3, #15
   221a6:	18fb      	adds	r3, r7, r3
   221a8:	781b      	ldrb	r3, [r3, #0]
   221aa:	b25b      	sxtb	r3, r3
}
   221ac:	0018      	movs	r0, r3
   221ae:	46bd      	mov	sp, r7
   221b0:	b005      	add	sp, #20
   221b2:	bd90      	pop	{r4, r7, pc}
   221b4:	20005b68 	.word	0x20005b68
   221b8:	00000216 	.word	0x00000216
   221bc:	00039648 	.word	0x00039648
   221c0:	00039338 	.word	0x00039338
   221c4:	0001e979 	.word	0x0001e979
   221c8:	000394b4 	.word	0x000394b4
   221cc:	00039334 	.word	0x00039334
   221d0:	000217a9 	.word	0x000217a9
   221d4:	0000021d 	.word	0x0000021d
   221d8:	000394e0 	.word	0x000394e0
   221dc:	00000225 	.word	0x00000225
   221e0:	000394f4 	.word	0x000394f4
   221e4:	0000022e 	.word	0x0000022e
   221e8:	00039510 	.word	0x00039510

000221ec <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   221ec:	b590      	push	{r4, r7, lr}
   221ee:	b083      	sub	sp, #12
   221f0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   221f2:	1dfb      	adds	r3, r7, #7
   221f4:	2200      	movs	r2, #0
   221f6:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   221f8:	4b1c      	ldr	r3, [pc, #112]	; (2226c <hif_handle_isr+0x80>)
   221fa:	2200      	movs	r2, #0
   221fc:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   221fe:	e024      	b.n	2224a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   22200:	4b1a      	ldr	r3, [pc, #104]	; (2226c <hif_handle_isr+0x80>)
   22202:	78db      	ldrb	r3, [r3, #3]
   22204:	b2db      	uxtb	r3, r3
   22206:	3b01      	subs	r3, #1
   22208:	b2da      	uxtb	r2, r3
   2220a:	4b18      	ldr	r3, [pc, #96]	; (2226c <hif_handle_isr+0x80>)
   2220c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2220e:	1dfc      	adds	r4, r7, #7
   22210:	4b17      	ldr	r3, [pc, #92]	; (22270 <hif_handle_isr+0x84>)
   22212:	4798      	blx	r3
   22214:	0003      	movs	r3, r0
   22216:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   22218:	1dfb      	adds	r3, r7, #7
   2221a:	781b      	ldrb	r3, [r3, #0]
   2221c:	b25b      	sxtb	r3, r3
   2221e:	2b00      	cmp	r3, #0
   22220:	d100      	bne.n	22224 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   22222:	e012      	b.n	2224a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   22224:	4a13      	ldr	r2, [pc, #76]	; (22274 <hif_handle_isr+0x88>)
   22226:	4914      	ldr	r1, [pc, #80]	; (22278 <hif_handle_isr+0x8c>)
   22228:	4b14      	ldr	r3, [pc, #80]	; (2227c <hif_handle_isr+0x90>)
   2222a:	0018      	movs	r0, r3
   2222c:	4b14      	ldr	r3, [pc, #80]	; (22280 <hif_handle_isr+0x94>)
   2222e:	4798      	blx	r3
   22230:	1dfb      	adds	r3, r7, #7
   22232:	2200      	movs	r2, #0
   22234:	569a      	ldrsb	r2, [r3, r2]
   22236:	4b13      	ldr	r3, [pc, #76]	; (22284 <hif_handle_isr+0x98>)
   22238:	0011      	movs	r1, r2
   2223a:	0018      	movs	r0, r3
   2223c:	4b10      	ldr	r3, [pc, #64]	; (22280 <hif_handle_isr+0x94>)
   2223e:	4798      	blx	r3
   22240:	4b11      	ldr	r3, [pc, #68]	; (22288 <hif_handle_isr+0x9c>)
   22242:	0018      	movs	r0, r3
   22244:	4b0e      	ldr	r3, [pc, #56]	; (22280 <hif_handle_isr+0x94>)
   22246:	4798      	blx	r3
			ret = hif_isr();
   22248:	e7e1      	b.n	2220e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2224a:	4b08      	ldr	r3, [pc, #32]	; (2226c <hif_handle_isr+0x80>)
   2224c:	78db      	ldrb	r3, [r3, #3]
   2224e:	b2db      	uxtb	r3, r3
   22250:	2b00      	cmp	r3, #0
   22252:	d004      	beq.n	2225e <hif_handle_isr+0x72>
   22254:	4b05      	ldr	r3, [pc, #20]	; (2226c <hif_handle_isr+0x80>)
   22256:	791b      	ldrb	r3, [r3, #4]
   22258:	b2db      	uxtb	r3, r3
   2225a:	2b00      	cmp	r3, #0
   2225c:	d0d0      	beq.n	22200 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   2225e:	1dfb      	adds	r3, r7, #7
   22260:	781b      	ldrb	r3, [r3, #0]
   22262:	b25b      	sxtb	r3, r3
}
   22264:	0018      	movs	r0, r3
   22266:	46bd      	mov	sp, r7
   22268:	b003      	add	sp, #12
   2226a:	bd90      	pop	{r4, r7, pc}
   2226c:	20005b68 	.word	0x20005b68
   22270:	00021d15 	.word	0x00021d15
   22274:	00000257 	.word	0x00000257
   22278:	00039650 	.word	0x00039650
   2227c:	00039338 	.word	0x00039338
   22280:	0001e979 	.word	0x0001e979
   22284:	00039534 	.word	0x00039534
   22288:	00039334 	.word	0x00039334

0002228c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   2228c:	b590      	push	{r4, r7, lr}
   2228e:	b087      	sub	sp, #28
   22290:	af00      	add	r7, sp, #0
   22292:	60f8      	str	r0, [r7, #12]
   22294:	60b9      	str	r1, [r7, #8]
   22296:	0019      	movs	r1, r3
   22298:	1dbb      	adds	r3, r7, #6
   2229a:	801a      	strh	r2, [r3, #0]
   2229c:	1d7b      	adds	r3, r7, #5
   2229e:	1c0a      	adds	r2, r1, #0
   222a0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   222a2:	2317      	movs	r3, #23
   222a4:	18fb      	adds	r3, r7, r3
   222a6:	2200      	movs	r2, #0
   222a8:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   222aa:	68fb      	ldr	r3, [r7, #12]
   222ac:	2b00      	cmp	r3, #0
   222ae:	d006      	beq.n	222be <hif_receive+0x32>
   222b0:	68bb      	ldr	r3, [r7, #8]
   222b2:	2b00      	cmp	r3, #0
   222b4:	d003      	beq.n	222be <hif_receive+0x32>
   222b6:	1dbb      	adds	r3, r7, #6
   222b8:	881b      	ldrh	r3, [r3, #0]
   222ba:	2b00      	cmp	r3, #0
   222bc:	d11e      	bne.n	222fc <hif_receive+0x70>
	{
		if(isDone)
   222be:	1d7b      	adds	r3, r7, #5
   222c0:	781b      	ldrb	r3, [r3, #0]
   222c2:	2b00      	cmp	r3, #0
   222c4:	d006      	beq.n	222d4 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   222c6:	2317      	movs	r3, #23
   222c8:	18fc      	adds	r4, r7, r3
   222ca:	4b45      	ldr	r3, [pc, #276]	; (223e0 <hif_receive+0x154>)
   222cc:	4798      	blx	r3
   222ce:	0003      	movs	r3, r0
   222d0:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   222d2:	e07c      	b.n	223ce <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   222d4:	2317      	movs	r3, #23
   222d6:	18fb      	adds	r3, r7, r3
   222d8:	22f4      	movs	r2, #244	; 0xf4
   222da:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   222dc:	239e      	movs	r3, #158	; 0x9e
   222de:	009a      	lsls	r2, r3, #2
   222e0:	4940      	ldr	r1, [pc, #256]	; (223e4 <hif_receive+0x158>)
   222e2:	4b41      	ldr	r3, [pc, #260]	; (223e8 <hif_receive+0x15c>)
   222e4:	0018      	movs	r0, r3
   222e6:	4b41      	ldr	r3, [pc, #260]	; (223ec <hif_receive+0x160>)
   222e8:	4798      	blx	r3
   222ea:	4b41      	ldr	r3, [pc, #260]	; (223f0 <hif_receive+0x164>)
   222ec:	0018      	movs	r0, r3
   222ee:	4b3f      	ldr	r3, [pc, #252]	; (223ec <hif_receive+0x160>)
   222f0:	4798      	blx	r3
   222f2:	4b40      	ldr	r3, [pc, #256]	; (223f4 <hif_receive+0x168>)
   222f4:	0018      	movs	r0, r3
   222f6:	4b3d      	ldr	r3, [pc, #244]	; (223ec <hif_receive+0x160>)
   222f8:	4798      	blx	r3
		goto ERR1;
   222fa:	e068      	b.n	223ce <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   222fc:	1dbb      	adds	r3, r7, #6
   222fe:	881a      	ldrh	r2, [r3, #0]
   22300:	4b3d      	ldr	r3, [pc, #244]	; (223f8 <hif_receive+0x16c>)
   22302:	68db      	ldr	r3, [r3, #12]
   22304:	429a      	cmp	r2, r3
   22306:	d917      	bls.n	22338 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   22308:	2317      	movs	r3, #23
   2230a:	18fb      	adds	r3, r7, r3
   2230c:	22f4      	movs	r2, #244	; 0xf4
   2230e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   22310:	23a0      	movs	r3, #160	; 0xa0
   22312:	009a      	lsls	r2, r3, #2
   22314:	4933      	ldr	r1, [pc, #204]	; (223e4 <hif_receive+0x158>)
   22316:	4b34      	ldr	r3, [pc, #208]	; (223e8 <hif_receive+0x15c>)
   22318:	0018      	movs	r0, r3
   2231a:	4b34      	ldr	r3, [pc, #208]	; (223ec <hif_receive+0x160>)
   2231c:	4798      	blx	r3
   2231e:	1dbb      	adds	r3, r7, #6
   22320:	8819      	ldrh	r1, [r3, #0]
   22322:	4b35      	ldr	r3, [pc, #212]	; (223f8 <hif_receive+0x16c>)
   22324:	68da      	ldr	r2, [r3, #12]
   22326:	4b35      	ldr	r3, [pc, #212]	; (223fc <hif_receive+0x170>)
   22328:	0018      	movs	r0, r3
   2232a:	4b30      	ldr	r3, [pc, #192]	; (223ec <hif_receive+0x160>)
   2232c:	4798      	blx	r3
   2232e:	4b31      	ldr	r3, [pc, #196]	; (223f4 <hif_receive+0x168>)
   22330:	0018      	movs	r0, r3
   22332:	4b2e      	ldr	r3, [pc, #184]	; (223ec <hif_receive+0x160>)
   22334:	4798      	blx	r3
		goto ERR1;
   22336:	e04a      	b.n	223ce <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   22338:	4b2f      	ldr	r3, [pc, #188]	; (223f8 <hif_receive+0x16c>)
   2233a:	689a      	ldr	r2, [r3, #8]
   2233c:	68fb      	ldr	r3, [r7, #12]
   2233e:	429a      	cmp	r2, r3
   22340:	d80a      	bhi.n	22358 <hif_receive+0xcc>
   22342:	1dbb      	adds	r3, r7, #6
   22344:	881a      	ldrh	r2, [r3, #0]
   22346:	68fb      	ldr	r3, [r7, #12]
   22348:	18d2      	adds	r2, r2, r3
   2234a:	4b2b      	ldr	r3, [pc, #172]	; (223f8 <hif_receive+0x16c>)
   2234c:	6899      	ldr	r1, [r3, #8]
   2234e:	4b2a      	ldr	r3, [pc, #168]	; (223f8 <hif_receive+0x16c>)
   22350:	68db      	ldr	r3, [r3, #12]
   22352:	18cb      	adds	r3, r1, r3
   22354:	429a      	cmp	r2, r3
   22356:	d912      	bls.n	2237e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   22358:	2317      	movs	r3, #23
   2235a:	18fb      	adds	r3, r7, r3
   2235c:	22f4      	movs	r2, #244	; 0xf4
   2235e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   22360:	4a27      	ldr	r2, [pc, #156]	; (22400 <hif_receive+0x174>)
   22362:	4920      	ldr	r1, [pc, #128]	; (223e4 <hif_receive+0x158>)
   22364:	4b20      	ldr	r3, [pc, #128]	; (223e8 <hif_receive+0x15c>)
   22366:	0018      	movs	r0, r3
   22368:	4b20      	ldr	r3, [pc, #128]	; (223ec <hif_receive+0x160>)
   2236a:	4798      	blx	r3
   2236c:	4b25      	ldr	r3, [pc, #148]	; (22404 <hif_receive+0x178>)
   2236e:	0018      	movs	r0, r3
   22370:	4b1e      	ldr	r3, [pc, #120]	; (223ec <hif_receive+0x160>)
   22372:	4798      	blx	r3
   22374:	4b1f      	ldr	r3, [pc, #124]	; (223f4 <hif_receive+0x168>)
   22376:	0018      	movs	r0, r3
   22378:	4b1c      	ldr	r3, [pc, #112]	; (223ec <hif_receive+0x160>)
   2237a:	4798      	blx	r3
		goto ERR1;
   2237c:	e027      	b.n	223ce <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   2237e:	1dbb      	adds	r3, r7, #6
   22380:	881a      	ldrh	r2, [r3, #0]
   22382:	2317      	movs	r3, #23
   22384:	18fc      	adds	r4, r7, r3
   22386:	68b9      	ldr	r1, [r7, #8]
   22388:	68fb      	ldr	r3, [r7, #12]
   2238a:	0018      	movs	r0, r3
   2238c:	4b1e      	ldr	r3, [pc, #120]	; (22408 <hif_receive+0x17c>)
   2238e:	4798      	blx	r3
   22390:	0003      	movs	r3, r0
   22392:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22394:	2317      	movs	r3, #23
   22396:	18fb      	adds	r3, r7, r3
   22398:	781b      	ldrb	r3, [r3, #0]
   2239a:	b25b      	sxtb	r3, r3
   2239c:	2b00      	cmp	r3, #0
   2239e:	d115      	bne.n	223cc <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   223a0:	4b15      	ldr	r3, [pc, #84]	; (223f8 <hif_receive+0x16c>)
   223a2:	689a      	ldr	r2, [r3, #8]
   223a4:	4b14      	ldr	r3, [pc, #80]	; (223f8 <hif_receive+0x16c>)
   223a6:	68db      	ldr	r3, [r3, #12]
   223a8:	18d2      	adds	r2, r2, r3
   223aa:	1dbb      	adds	r3, r7, #6
   223ac:	8819      	ldrh	r1, [r3, #0]
   223ae:	68fb      	ldr	r3, [r7, #12]
   223b0:	18cb      	adds	r3, r1, r3
   223b2:	429a      	cmp	r2, r3
   223b4:	d003      	beq.n	223be <hif_receive+0x132>
   223b6:	1d7b      	adds	r3, r7, #5
   223b8:	781b      	ldrb	r3, [r3, #0]
   223ba:	2b00      	cmp	r3, #0
   223bc:	d007      	beq.n	223ce <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   223be:	2317      	movs	r3, #23
   223c0:	18fc      	adds	r4, r7, r3
   223c2:	4b07      	ldr	r3, [pc, #28]	; (223e0 <hif_receive+0x154>)
   223c4:	4798      	blx	r3
   223c6:	0003      	movs	r3, r0
   223c8:	7023      	strb	r3, [r4, #0]
   223ca:	e000      	b.n	223ce <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   223cc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   223ce:	2317      	movs	r3, #23
   223d0:	18fb      	adds	r3, r7, r3
   223d2:	781b      	ldrb	r3, [r3, #0]
   223d4:	b25b      	sxtb	r3, r3
}
   223d6:	0018      	movs	r0, r3
   223d8:	46bd      	mov	sp, r7
   223da:	b007      	add	sp, #28
   223dc:	bd90      	pop	{r4, r7, pc}
   223de:	46c0      	nop			; (mov r8, r8)
   223e0:	000217a9 	.word	0x000217a9
   223e4:	00039660 	.word	0x00039660
   223e8:	00039338 	.word	0x00039338
   223ec:	0001e979 	.word	0x0001e979
   223f0:	00039564 	.word	0x00039564
   223f4:	00039334 	.word	0x00039334
   223f8:	20005b68 	.word	0x20005b68
   223fc:	00039584 	.word	0x00039584
   22400:	00000286 	.word	0x00000286
   22404:	000395cc 	.word	0x000395cc
   22408:	00023815 	.word	0x00023815

0002240c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   2240c:	b580      	push	{r7, lr}
   2240e:	b084      	sub	sp, #16
   22410:	af00      	add	r7, sp, #0
   22412:	0002      	movs	r2, r0
   22414:	6039      	str	r1, [r7, #0]
   22416:	1dfb      	adds	r3, r7, #7
   22418:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2241a:	230f      	movs	r3, #15
   2241c:	18fb      	adds	r3, r7, r3
   2241e:	2200      	movs	r2, #0
   22420:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   22422:	1dfb      	adds	r3, r7, #7
   22424:	781b      	ldrb	r3, [r3, #0]
   22426:	2b07      	cmp	r3, #7
   22428:	d820      	bhi.n	2246c <hif_register_cb+0x60>
   2242a:	009a      	lsls	r2, r3, #2
   2242c:	4b1e      	ldr	r3, [pc, #120]	; (224a8 <hif_register_cb+0x9c>)
   2242e:	18d3      	adds	r3, r2, r3
   22430:	681b      	ldr	r3, [r3, #0]
   22432:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   22434:	4b1d      	ldr	r3, [pc, #116]	; (224ac <hif_register_cb+0xa0>)
   22436:	683a      	ldr	r2, [r7, #0]
   22438:	615a      	str	r2, [r3, #20]
			break;
   2243a:	e02d      	b.n	22498 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   2243c:	4b1b      	ldr	r3, [pc, #108]	; (224ac <hif_register_cb+0xa0>)
   2243e:	683a      	ldr	r2, [r7, #0]
   22440:	611a      	str	r2, [r3, #16]
			break;
   22442:	e029      	b.n	22498 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   22444:	4b19      	ldr	r3, [pc, #100]	; (224ac <hif_register_cb+0xa0>)
   22446:	683a      	ldr	r2, [r7, #0]
   22448:	619a      	str	r2, [r3, #24]
			break;
   2244a:	e025      	b.n	22498 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   2244c:	4b17      	ldr	r3, [pc, #92]	; (224ac <hif_register_cb+0xa0>)
   2244e:	683a      	ldr	r2, [r7, #0]
   22450:	621a      	str	r2, [r3, #32]
			break;
   22452:	e021      	b.n	22498 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   22454:	4b15      	ldr	r3, [pc, #84]	; (224ac <hif_register_cb+0xa0>)
   22456:	683a      	ldr	r2, [r7, #0]
   22458:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   2245a:	e01d      	b.n	22498 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   2245c:	4b13      	ldr	r3, [pc, #76]	; (224ac <hif_register_cb+0xa0>)
   2245e:	683a      	ldr	r2, [r7, #0]
   22460:	61da      	str	r2, [r3, #28]
			break;
   22462:	e019      	b.n	22498 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   22464:	4b11      	ldr	r3, [pc, #68]	; (224ac <hif_register_cb+0xa0>)
   22466:	683a      	ldr	r2, [r7, #0]
   22468:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   2246a:	e015      	b.n	22498 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   2246c:	4a10      	ldr	r2, [pc, #64]	; (224b0 <hif_register_cb+0xa4>)
   2246e:	4911      	ldr	r1, [pc, #68]	; (224b4 <hif_register_cb+0xa8>)
   22470:	4b11      	ldr	r3, [pc, #68]	; (224b8 <hif_register_cb+0xac>)
   22472:	0018      	movs	r0, r3
   22474:	4b11      	ldr	r3, [pc, #68]	; (224bc <hif_register_cb+0xb0>)
   22476:	4798      	blx	r3
   22478:	1dfb      	adds	r3, r7, #7
   2247a:	781a      	ldrb	r2, [r3, #0]
   2247c:	4b10      	ldr	r3, [pc, #64]	; (224c0 <hif_register_cb+0xb4>)
   2247e:	0011      	movs	r1, r2
   22480:	0018      	movs	r0, r3
   22482:	4b0e      	ldr	r3, [pc, #56]	; (224bc <hif_register_cb+0xb0>)
   22484:	4798      	blx	r3
   22486:	4b0f      	ldr	r3, [pc, #60]	; (224c4 <hif_register_cb+0xb8>)
   22488:	0018      	movs	r0, r3
   2248a:	4b0c      	ldr	r3, [pc, #48]	; (224bc <hif_register_cb+0xb0>)
   2248c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2248e:	230f      	movs	r3, #15
   22490:	18fb      	adds	r3, r7, r3
   22492:	22f4      	movs	r2, #244	; 0xf4
   22494:	701a      	strb	r2, [r3, #0]
			break;
   22496:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   22498:	230f      	movs	r3, #15
   2249a:	18fb      	adds	r3, r7, r3
   2249c:	781b      	ldrb	r3, [r3, #0]
   2249e:	b25b      	sxtb	r3, r3
}
   224a0:	0018      	movs	r0, r3
   224a2:	46bd      	mov	sp, r7
   224a4:	b004      	add	sp, #16
   224a6:	bd80      	pop	{r7, pc}
   224a8:	0003961c 	.word	0x0003961c
   224ac:	20005b68 	.word	0x20005b68
   224b0:	000002be 	.word	0x000002be
   224b4:	0003966c 	.word	0x0003966c
   224b8:	00039338 	.word	0x00039338
   224bc:	0001e979 	.word	0x0001e979
   224c0:	00039610 	.word	0x00039610
   224c4:	00039334 	.word	0x00039334

000224c8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   224c8:	b590      	push	{r4, r7, lr}
   224ca:	b0af      	sub	sp, #188	; 0xbc
   224cc:	af02      	add	r7, sp, #8
   224ce:	603a      	str	r2, [r7, #0]
   224d0:	1dfb      	adds	r3, r7, #7
   224d2:	1c02      	adds	r2, r0, #0
   224d4:	701a      	strb	r2, [r3, #0]
   224d6:	1d3b      	adds	r3, r7, #4
   224d8:	1c0a      	adds	r2, r1, #0
   224da:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   224dc:	1dfb      	adds	r3, r7, #7
   224de:	781b      	ldrb	r3, [r3, #0]
   224e0:	2b2c      	cmp	r3, #44	; 0x2c
   224e2:	d116      	bne.n	22512 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   224e4:	23a4      	movs	r3, #164	; 0xa4
   224e6:	18f9      	adds	r1, r7, r3
   224e8:	6838      	ldr	r0, [r7, #0]
   224ea:	2300      	movs	r3, #0
   224ec:	2204      	movs	r2, #4
   224ee:	4cca      	ldr	r4, [pc, #808]	; (22818 <m2m_wifi_cb+0x350>)
   224f0:	47a0      	blx	r4
   224f2:	1e03      	subs	r3, r0, #0
   224f4:	d000      	beq.n	224f8 <m2m_wifi_cb+0x30>
   224f6:	e1b4      	b.n	22862 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   224f8:	4bc8      	ldr	r3, [pc, #800]	; (2281c <m2m_wifi_cb+0x354>)
   224fa:	681b      	ldr	r3, [r3, #0]
   224fc:	2b00      	cmp	r3, #0
   224fe:	d100      	bne.n	22502 <m2m_wifi_cb+0x3a>
   22500:	e1af      	b.n	22862 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   22502:	4bc6      	ldr	r3, [pc, #792]	; (2281c <m2m_wifi_cb+0x354>)
   22504:	681b      	ldr	r3, [r3, #0]
   22506:	22a4      	movs	r2, #164	; 0xa4
   22508:	18ba      	adds	r2, r7, r2
   2250a:	0011      	movs	r1, r2
   2250c:	202c      	movs	r0, #44	; 0x2c
   2250e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   22510:	e1a7      	b.n	22862 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   22512:	1dfb      	adds	r3, r7, #7
   22514:	781b      	ldrb	r3, [r3, #0]
   22516:	2b1b      	cmp	r3, #27
   22518:	d116      	bne.n	22548 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   2251a:	239c      	movs	r3, #156	; 0x9c
   2251c:	18f9      	adds	r1, r7, r3
   2251e:	6838      	ldr	r0, [r7, #0]
   22520:	2300      	movs	r3, #0
   22522:	2208      	movs	r2, #8
   22524:	4cbc      	ldr	r4, [pc, #752]	; (22818 <m2m_wifi_cb+0x350>)
   22526:	47a0      	blx	r4
   22528:	1e03      	subs	r3, r0, #0
   2252a:	d000      	beq.n	2252e <m2m_wifi_cb+0x66>
   2252c:	e199      	b.n	22862 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2252e:	4bbb      	ldr	r3, [pc, #748]	; (2281c <m2m_wifi_cb+0x354>)
   22530:	681b      	ldr	r3, [r3, #0]
   22532:	2b00      	cmp	r3, #0
   22534:	d100      	bne.n	22538 <m2m_wifi_cb+0x70>
   22536:	e194      	b.n	22862 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   22538:	4bb8      	ldr	r3, [pc, #736]	; (2281c <m2m_wifi_cb+0x354>)
   2253a:	681b      	ldr	r3, [r3, #0]
   2253c:	229c      	movs	r2, #156	; 0x9c
   2253e:	18ba      	adds	r2, r7, r2
   22540:	0011      	movs	r1, r2
   22542:	201b      	movs	r0, #27
   22544:	4798      	blx	r3
}
   22546:	e18c      	b.n	22862 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   22548:	1dfb      	adds	r3, r7, #7
   2254a:	781b      	ldrb	r3, [r3, #0]
   2254c:	2b06      	cmp	r3, #6
   2254e:	d116      	bne.n	2257e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   22550:	230c      	movs	r3, #12
   22552:	18f9      	adds	r1, r7, r3
   22554:	6838      	ldr	r0, [r7, #0]
   22556:	2301      	movs	r3, #1
   22558:	2230      	movs	r2, #48	; 0x30
   2255a:	4caf      	ldr	r4, [pc, #700]	; (22818 <m2m_wifi_cb+0x350>)
   2255c:	47a0      	blx	r4
   2255e:	1e03      	subs	r3, r0, #0
   22560:	d000      	beq.n	22564 <m2m_wifi_cb+0x9c>
   22562:	e17e      	b.n	22862 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22564:	4bad      	ldr	r3, [pc, #692]	; (2281c <m2m_wifi_cb+0x354>)
   22566:	681b      	ldr	r3, [r3, #0]
   22568:	2b00      	cmp	r3, #0
   2256a:	d100      	bne.n	2256e <m2m_wifi_cb+0xa6>
   2256c:	e179      	b.n	22862 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   2256e:	4bab      	ldr	r3, [pc, #684]	; (2281c <m2m_wifi_cb+0x354>)
   22570:	681b      	ldr	r3, [r3, #0]
   22572:	220c      	movs	r2, #12
   22574:	18ba      	adds	r2, r7, r2
   22576:	0011      	movs	r1, r2
   22578:	2006      	movs	r0, #6
   2257a:	4798      	blx	r3
}
   2257c:	e171      	b.n	22862 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   2257e:	1dfb      	adds	r3, r7, #7
   22580:	781b      	ldrb	r3, [r3, #0]
   22582:	2b0e      	cmp	r3, #14
   22584:	d100      	bne.n	22588 <m2m_wifi_cb+0xc0>
   22586:	e16c      	b.n	22862 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   22588:	1dfb      	adds	r3, r7, #7
   2258a:	781b      	ldrb	r3, [r3, #0]
   2258c:	2b32      	cmp	r3, #50	; 0x32
   2258e:	d116      	bne.n	225be <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   22590:	2384      	movs	r3, #132	; 0x84
   22592:	18f9      	adds	r1, r7, r3
   22594:	6838      	ldr	r0, [r7, #0]
   22596:	2300      	movs	r3, #0
   22598:	2218      	movs	r2, #24
   2259a:	4c9f      	ldr	r4, [pc, #636]	; (22818 <m2m_wifi_cb+0x350>)
   2259c:	47a0      	blx	r4
   2259e:	1e03      	subs	r3, r0, #0
   225a0:	d000      	beq.n	225a4 <m2m_wifi_cb+0xdc>
   225a2:	e15e      	b.n	22862 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   225a4:	4b9d      	ldr	r3, [pc, #628]	; (2281c <m2m_wifi_cb+0x354>)
   225a6:	681b      	ldr	r3, [r3, #0]
   225a8:	2b00      	cmp	r3, #0
   225aa:	d100      	bne.n	225ae <m2m_wifi_cb+0xe6>
   225ac:	e159      	b.n	22862 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   225ae:	4b9b      	ldr	r3, [pc, #620]	; (2281c <m2m_wifi_cb+0x354>)
   225b0:	681b      	ldr	r3, [r3, #0]
   225b2:	2284      	movs	r2, #132	; 0x84
   225b4:	18ba      	adds	r2, r7, r2
   225b6:	0011      	movs	r1, r2
   225b8:	2032      	movs	r0, #50	; 0x32
   225ba:	4798      	blx	r3
}
   225bc:	e151      	b.n	22862 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   225be:	1dfb      	adds	r3, r7, #7
   225c0:	781b      	ldrb	r3, [r3, #0]
   225c2:	2b2f      	cmp	r3, #47	; 0x2f
   225c4:	d11d      	bne.n	22602 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   225c6:	230c      	movs	r3, #12
   225c8:	18fb      	adds	r3, r7, r3
   225ca:	2264      	movs	r2, #100	; 0x64
   225cc:	2100      	movs	r1, #0
   225ce:	0018      	movs	r0, r3
   225d0:	4b93      	ldr	r3, [pc, #588]	; (22820 <m2m_wifi_cb+0x358>)
   225d2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   225d4:	230c      	movs	r3, #12
   225d6:	18f9      	adds	r1, r7, r3
   225d8:	6838      	ldr	r0, [r7, #0]
   225da:	2300      	movs	r3, #0
   225dc:	2264      	movs	r2, #100	; 0x64
   225de:	4c8e      	ldr	r4, [pc, #568]	; (22818 <m2m_wifi_cb+0x350>)
   225e0:	47a0      	blx	r4
   225e2:	1e03      	subs	r3, r0, #0
   225e4:	d000      	beq.n	225e8 <m2m_wifi_cb+0x120>
   225e6:	e13c      	b.n	22862 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   225e8:	4b8c      	ldr	r3, [pc, #560]	; (2281c <m2m_wifi_cb+0x354>)
   225ea:	681b      	ldr	r3, [r3, #0]
   225ec:	2b00      	cmp	r3, #0
   225ee:	d100      	bne.n	225f2 <m2m_wifi_cb+0x12a>
   225f0:	e137      	b.n	22862 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   225f2:	4b8a      	ldr	r3, [pc, #552]	; (2281c <m2m_wifi_cb+0x354>)
   225f4:	681b      	ldr	r3, [r3, #0]
   225f6:	220c      	movs	r2, #12
   225f8:	18ba      	adds	r2, r7, r2
   225fa:	0011      	movs	r1, r2
   225fc:	202f      	movs	r0, #47	; 0x2f
   225fe:	4798      	blx	r3
}
   22600:	e12f      	b.n	22862 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   22602:	1dfb      	adds	r3, r7, #7
   22604:	781b      	ldrb	r3, [r3, #0]
   22606:	2b34      	cmp	r3, #52	; 0x34
   22608:	d137      	bne.n	2267a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   2260a:	2380      	movs	r3, #128	; 0x80
   2260c:	18f9      	adds	r1, r7, r3
   2260e:	6838      	ldr	r0, [r7, #0]
   22610:	2300      	movs	r3, #0
   22612:	2204      	movs	r2, #4
   22614:	4c80      	ldr	r4, [pc, #512]	; (22818 <m2m_wifi_cb+0x350>)
   22616:	47a0      	blx	r4
   22618:	1e03      	subs	r3, r0, #0
   2261a:	d000      	beq.n	2261e <m2m_wifi_cb+0x156>
   2261c:	e121      	b.n	22862 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   2261e:	4b81      	ldr	r3, [pc, #516]	; (22824 <m2m_wifi_cb+0x35c>)
   22620:	0018      	movs	r0, r3
   22622:	4b81      	ldr	r3, [pc, #516]	; (22828 <m2m_wifi_cb+0x360>)
   22624:	4798      	blx	r3
   22626:	2380      	movs	r3, #128	; 0x80
   22628:	18fb      	adds	r3, r7, r3
   2262a:	681b      	ldr	r3, [r3, #0]
   2262c:	0e1b      	lsrs	r3, r3, #24
   2262e:	b2db      	uxtb	r3, r3
   22630:	0019      	movs	r1, r3
   22632:	2380      	movs	r3, #128	; 0x80
   22634:	18fb      	adds	r3, r7, r3
   22636:	681b      	ldr	r3, [r3, #0]
   22638:	0c1b      	lsrs	r3, r3, #16
   2263a:	b2db      	uxtb	r3, r3
   2263c:	001a      	movs	r2, r3
   2263e:	2380      	movs	r3, #128	; 0x80
   22640:	18fb      	adds	r3, r7, r3
   22642:	681b      	ldr	r3, [r3, #0]
   22644:	0a1b      	lsrs	r3, r3, #8
   22646:	b2db      	uxtb	r3, r3
   22648:	001c      	movs	r4, r3
   2264a:	2380      	movs	r3, #128	; 0x80
   2264c:	18fb      	adds	r3, r7, r3
   2264e:	681b      	ldr	r3, [r3, #0]
   22650:	b2db      	uxtb	r3, r3
   22652:	4876      	ldr	r0, [pc, #472]	; (2282c <m2m_wifi_cb+0x364>)
   22654:	9300      	str	r3, [sp, #0]
   22656:	0023      	movs	r3, r4
   22658:	4c73      	ldr	r4, [pc, #460]	; (22828 <m2m_wifi_cb+0x360>)
   2265a:	47a0      	blx	r4
   2265c:	4b74      	ldr	r3, [pc, #464]	; (22830 <m2m_wifi_cb+0x368>)
   2265e:	0018      	movs	r0, r3
   22660:	4b71      	ldr	r3, [pc, #452]	; (22828 <m2m_wifi_cb+0x360>)
   22662:	4798      	blx	r3
			if (gpfAppWifiCb)
   22664:	4b6d      	ldr	r3, [pc, #436]	; (2281c <m2m_wifi_cb+0x354>)
   22666:	681b      	ldr	r3, [r3, #0]
   22668:	2b00      	cmp	r3, #0
   2266a:	d100      	bne.n	2266e <m2m_wifi_cb+0x1a6>
   2266c:	e0f9      	b.n	22862 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   2266e:	4b6b      	ldr	r3, [pc, #428]	; (2281c <m2m_wifi_cb+0x354>)
   22670:	681b      	ldr	r3, [r3, #0]
   22672:	2100      	movs	r1, #0
   22674:	2034      	movs	r0, #52	; 0x34
   22676:	4798      	blx	r3
}
   22678:	e0f3      	b.n	22862 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   2267a:	1dfb      	adds	r3, r7, #7
   2267c:	781b      	ldrb	r3, [r3, #0]
   2267e:	2b11      	cmp	r3, #17
   22680:	d11e      	bne.n	226c0 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   22682:	4b6c      	ldr	r3, [pc, #432]	; (22834 <m2m_wifi_cb+0x36c>)
   22684:	2200      	movs	r2, #0
   22686:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   22688:	237c      	movs	r3, #124	; 0x7c
   2268a:	18f9      	adds	r1, r7, r3
   2268c:	6838      	ldr	r0, [r7, #0]
   2268e:	2300      	movs	r3, #0
   22690:	2204      	movs	r2, #4
   22692:	4c61      	ldr	r4, [pc, #388]	; (22818 <m2m_wifi_cb+0x350>)
   22694:	47a0      	blx	r4
   22696:	1e03      	subs	r3, r0, #0
   22698:	d000      	beq.n	2269c <m2m_wifi_cb+0x1d4>
   2269a:	e0e2      	b.n	22862 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   2269c:	237c      	movs	r3, #124	; 0x7c
   2269e:	18fb      	adds	r3, r7, r3
   226a0:	781a      	ldrb	r2, [r3, #0]
   226a2:	4b65      	ldr	r3, [pc, #404]	; (22838 <m2m_wifi_cb+0x370>)
   226a4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   226a6:	4b5d      	ldr	r3, [pc, #372]	; (2281c <m2m_wifi_cb+0x354>)
   226a8:	681b      	ldr	r3, [r3, #0]
   226aa:	2b00      	cmp	r3, #0
   226ac:	d100      	bne.n	226b0 <m2m_wifi_cb+0x1e8>
   226ae:	e0d8      	b.n	22862 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   226b0:	4b5a      	ldr	r3, [pc, #360]	; (2281c <m2m_wifi_cb+0x354>)
   226b2:	681b      	ldr	r3, [r3, #0]
   226b4:	227c      	movs	r2, #124	; 0x7c
   226b6:	18ba      	adds	r2, r7, r2
   226b8:	0011      	movs	r1, r2
   226ba:	2011      	movs	r0, #17
   226bc:	4798      	blx	r3
}
   226be:	e0d0      	b.n	22862 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   226c0:	1dfb      	adds	r3, r7, #7
   226c2:	781b      	ldrb	r3, [r3, #0]
   226c4:	2b13      	cmp	r3, #19
   226c6:	d116      	bne.n	226f6 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   226c8:	230c      	movs	r3, #12
   226ca:	18f9      	adds	r1, r7, r3
   226cc:	6838      	ldr	r0, [r7, #0]
   226ce:	2300      	movs	r3, #0
   226d0:	222c      	movs	r2, #44	; 0x2c
   226d2:	4c51      	ldr	r4, [pc, #324]	; (22818 <m2m_wifi_cb+0x350>)
   226d4:	47a0      	blx	r4
   226d6:	1e03      	subs	r3, r0, #0
   226d8:	d000      	beq.n	226dc <m2m_wifi_cb+0x214>
   226da:	e0c2      	b.n	22862 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   226dc:	4b4f      	ldr	r3, [pc, #316]	; (2281c <m2m_wifi_cb+0x354>)
   226de:	681b      	ldr	r3, [r3, #0]
   226e0:	2b00      	cmp	r3, #0
   226e2:	d100      	bne.n	226e6 <m2m_wifi_cb+0x21e>
   226e4:	e0bd      	b.n	22862 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   226e6:	4b4d      	ldr	r3, [pc, #308]	; (2281c <m2m_wifi_cb+0x354>)
   226e8:	681b      	ldr	r3, [r3, #0]
   226ea:	220c      	movs	r2, #12
   226ec:	18ba      	adds	r2, r7, r2
   226ee:	0011      	movs	r1, r2
   226f0:	2013      	movs	r0, #19
   226f2:	4798      	blx	r3
}
   226f4:	e0b5      	b.n	22862 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   226f6:	1dfb      	adds	r3, r7, #7
   226f8:	781b      	ldrb	r3, [r3, #0]
   226fa:	2b04      	cmp	r3, #4
   226fc:	d116      	bne.n	2272c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   226fe:	23a8      	movs	r3, #168	; 0xa8
   22700:	18f9      	adds	r1, r7, r3
   22702:	6838      	ldr	r0, [r7, #0]
   22704:	2300      	movs	r3, #0
   22706:	2204      	movs	r2, #4
   22708:	4c43      	ldr	r4, [pc, #268]	; (22818 <m2m_wifi_cb+0x350>)
   2270a:	47a0      	blx	r4
   2270c:	1e03      	subs	r3, r0, #0
   2270e:	d000      	beq.n	22712 <m2m_wifi_cb+0x24a>
   22710:	e0a7      	b.n	22862 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22712:	4b42      	ldr	r3, [pc, #264]	; (2281c <m2m_wifi_cb+0x354>)
   22714:	681b      	ldr	r3, [r3, #0]
   22716:	2b00      	cmp	r3, #0
   22718:	d100      	bne.n	2271c <m2m_wifi_cb+0x254>
   2271a:	e0a2      	b.n	22862 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   2271c:	4b3f      	ldr	r3, [pc, #252]	; (2281c <m2m_wifi_cb+0x354>)
   2271e:	681b      	ldr	r3, [r3, #0]
   22720:	22a8      	movs	r2, #168	; 0xa8
   22722:	18ba      	adds	r2, r7, r2
   22724:	0011      	movs	r1, r2
   22726:	2004      	movs	r0, #4
   22728:	4798      	blx	r3
}
   2272a:	e09a      	b.n	22862 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   2272c:	1dfb      	adds	r3, r7, #7
   2272e:	781b      	ldrb	r3, [r3, #0]
   22730:	2b65      	cmp	r3, #101	; 0x65
   22732:	d116      	bne.n	22762 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   22734:	23a8      	movs	r3, #168	; 0xa8
   22736:	18f9      	adds	r1, r7, r3
   22738:	6838      	ldr	r0, [r7, #0]
   2273a:	2300      	movs	r3, #0
   2273c:	2204      	movs	r2, #4
   2273e:	4c36      	ldr	r4, [pc, #216]	; (22818 <m2m_wifi_cb+0x350>)
   22740:	47a0      	blx	r4
   22742:	1e03      	subs	r3, r0, #0
   22744:	d000      	beq.n	22748 <m2m_wifi_cb+0x280>
   22746:	e08c      	b.n	22862 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22748:	4b34      	ldr	r3, [pc, #208]	; (2281c <m2m_wifi_cb+0x354>)
   2274a:	681b      	ldr	r3, [r3, #0]
   2274c:	2b00      	cmp	r3, #0
   2274e:	d100      	bne.n	22752 <m2m_wifi_cb+0x28a>
   22750:	e087      	b.n	22862 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   22752:	4b32      	ldr	r3, [pc, #200]	; (2281c <m2m_wifi_cb+0x354>)
   22754:	681b      	ldr	r3, [r3, #0]
   22756:	22a8      	movs	r2, #168	; 0xa8
   22758:	18ba      	adds	r2, r7, r2
   2275a:	0011      	movs	r1, r2
   2275c:	2065      	movs	r0, #101	; 0x65
   2275e:	4798      	blx	r3
}
   22760:	e07f      	b.n	22862 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   22762:	1dfb      	adds	r3, r7, #7
   22764:	781b      	ldrb	r3, [r3, #0]
   22766:	2b09      	cmp	r3, #9
   22768:	d116      	bne.n	22798 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   2276a:	230c      	movs	r3, #12
   2276c:	18f9      	adds	r1, r7, r3
   2276e:	6838      	ldr	r0, [r7, #0]
   22770:	2301      	movs	r3, #1
   22772:	2264      	movs	r2, #100	; 0x64
   22774:	4c28      	ldr	r4, [pc, #160]	; (22818 <m2m_wifi_cb+0x350>)
   22776:	47a0      	blx	r4
   22778:	1e03      	subs	r3, r0, #0
   2277a:	d000      	beq.n	2277e <m2m_wifi_cb+0x2b6>
   2277c:	e071      	b.n	22862 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2277e:	4b27      	ldr	r3, [pc, #156]	; (2281c <m2m_wifi_cb+0x354>)
   22780:	681b      	ldr	r3, [r3, #0]
   22782:	2b00      	cmp	r3, #0
   22784:	d100      	bne.n	22788 <m2m_wifi_cb+0x2c0>
   22786:	e06c      	b.n	22862 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   22788:	4b24      	ldr	r3, [pc, #144]	; (2281c <m2m_wifi_cb+0x354>)
   2278a:	681b      	ldr	r3, [r3, #0]
   2278c:	220c      	movs	r2, #12
   2278e:	18ba      	adds	r2, r7, r2
   22790:	0011      	movs	r1, r2
   22792:	2009      	movs	r0, #9
   22794:	4798      	blx	r3
}
   22796:	e064      	b.n	22862 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   22798:	1dfb      	adds	r3, r7, #7
   2279a:	781b      	ldrb	r3, [r3, #0]
   2279c:	2b2a      	cmp	r3, #42	; 0x2a
   2279e:	d114      	bne.n	227ca <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   227a0:	2378      	movs	r3, #120	; 0x78
   227a2:	18f9      	adds	r1, r7, r3
   227a4:	6838      	ldr	r0, [r7, #0]
   227a6:	2301      	movs	r3, #1
   227a8:	2204      	movs	r2, #4
   227aa:	4c1b      	ldr	r4, [pc, #108]	; (22818 <m2m_wifi_cb+0x350>)
   227ac:	47a0      	blx	r4
   227ae:	1e03      	subs	r3, r0, #0
   227b0:	d157      	bne.n	22862 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   227b2:	4b1a      	ldr	r3, [pc, #104]	; (2281c <m2m_wifi_cb+0x354>)
   227b4:	681b      	ldr	r3, [r3, #0]
   227b6:	2b00      	cmp	r3, #0
   227b8:	d053      	beq.n	22862 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   227ba:	4b18      	ldr	r3, [pc, #96]	; (2281c <m2m_wifi_cb+0x354>)
   227bc:	681b      	ldr	r3, [r3, #0]
   227be:	2278      	movs	r2, #120	; 0x78
   227c0:	18ba      	adds	r2, r7, r2
   227c2:	0011      	movs	r1, r2
   227c4:	202a      	movs	r0, #42	; 0x2a
   227c6:	4798      	blx	r3
}
   227c8:	e04b      	b.n	22862 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   227ca:	1dfb      	adds	r3, r7, #7
   227cc:	781b      	ldrb	r3, [r3, #0]
   227ce:	2b20      	cmp	r3, #32
   227d0:	d134      	bne.n	2283c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   227d2:	2370      	movs	r3, #112	; 0x70
   227d4:	18f9      	adds	r1, r7, r3
   227d6:	6838      	ldr	r0, [r7, #0]
   227d8:	2300      	movs	r3, #0
   227da:	2208      	movs	r2, #8
   227dc:	4c0e      	ldr	r4, [pc, #56]	; (22818 <m2m_wifi_cb+0x350>)
   227de:	47a0      	blx	r4
   227e0:	1e03      	subs	r3, r0, #0
   227e2:	d13e      	bne.n	22862 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   227e4:	683b      	ldr	r3, [r7, #0]
   227e6:	3308      	adds	r3, #8
   227e8:	0018      	movs	r0, r3
   227ea:	2370      	movs	r3, #112	; 0x70
   227ec:	18fb      	adds	r3, r7, r3
   227ee:	6819      	ldr	r1, [r3, #0]
   227f0:	2370      	movs	r3, #112	; 0x70
   227f2:	18fb      	adds	r3, r7, r3
   227f4:	889a      	ldrh	r2, [r3, #4]
   227f6:	2301      	movs	r3, #1
   227f8:	4c07      	ldr	r4, [pc, #28]	; (22818 <m2m_wifi_cb+0x350>)
   227fa:	47a0      	blx	r4
   227fc:	1e03      	subs	r3, r0, #0
   227fe:	d130      	bne.n	22862 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   22800:	4b06      	ldr	r3, [pc, #24]	; (2281c <m2m_wifi_cb+0x354>)
   22802:	681b      	ldr	r3, [r3, #0]
   22804:	2b00      	cmp	r3, #0
   22806:	d02c      	beq.n	22862 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   22808:	4b04      	ldr	r3, [pc, #16]	; (2281c <m2m_wifi_cb+0x354>)
   2280a:	681b      	ldr	r3, [r3, #0]
   2280c:	2270      	movs	r2, #112	; 0x70
   2280e:	18ba      	adds	r2, r7, r2
   22810:	0011      	movs	r1, r2
   22812:	2020      	movs	r0, #32
   22814:	4798      	blx	r3
}
   22816:	e024      	b.n	22862 <m2m_wifi_cb+0x39a>
   22818:	0002228d 	.word	0x0002228d
   2281c:	200042a8 	.word	0x200042a8
   22820:	00021711 	.word	0x00021711
   22824:	0003967c 	.word	0x0003967c
   22828:	0001e979 	.word	0x0001e979
   2282c:	00039688 	.word	0x00039688
   22830:	000396a8 	.word	0x000396a8
   22834:	200042a5 	.word	0x200042a5
   22838:	200042a4 	.word	0x200042a4
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   2283c:	2324      	movs	r3, #36	; 0x24
   2283e:	33ff      	adds	r3, #255	; 0xff
   22840:	001a      	movs	r2, r3
   22842:	490a      	ldr	r1, [pc, #40]	; (2286c <m2m_wifi_cb+0x3a4>)
   22844:	4b0a      	ldr	r3, [pc, #40]	; (22870 <m2m_wifi_cb+0x3a8>)
   22846:	0018      	movs	r0, r3
   22848:	4b0a      	ldr	r3, [pc, #40]	; (22874 <m2m_wifi_cb+0x3ac>)
   2284a:	4798      	blx	r3
   2284c:	1dfb      	adds	r3, r7, #7
   2284e:	781a      	ldrb	r2, [r3, #0]
   22850:	4b09      	ldr	r3, [pc, #36]	; (22878 <m2m_wifi_cb+0x3b0>)
   22852:	0011      	movs	r1, r2
   22854:	0018      	movs	r0, r3
   22856:	4b07      	ldr	r3, [pc, #28]	; (22874 <m2m_wifi_cb+0x3ac>)
   22858:	4798      	blx	r3
   2285a:	4b08      	ldr	r3, [pc, #32]	; (2287c <m2m_wifi_cb+0x3b4>)
   2285c:	0018      	movs	r0, r3
   2285e:	4b05      	ldr	r3, [pc, #20]	; (22874 <m2m_wifi_cb+0x3ac>)
   22860:	4798      	blx	r3
}
   22862:	46c0      	nop			; (mov r8, r8)
   22864:	46bd      	mov	sp, r7
   22866:	b02d      	add	sp, #180	; 0xb4
   22868:	bd90      	pop	{r4, r7, pc}
   2286a:	46c0      	nop			; (mov r8, r8)
   2286c:	00039a48 	.word	0x00039a48
   22870:	000396ac 	.word	0x000396ac
   22874:	0001e979 	.word	0x0001e979
   22878:	000396c0 	.word	0x000396c0
   2287c:	000396a8 	.word	0x000396a8

00022880 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   22880:	b590      	push	{r4, r7, lr}
   22882:	b091      	sub	sp, #68	; 0x44
   22884:	af02      	add	r7, sp, #8
   22886:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   22888:	2337      	movs	r3, #55	; 0x37
   2288a:	18fb      	adds	r3, r7, r3
   2288c:	2200      	movs	r2, #0
   2288e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   22890:	230b      	movs	r3, #11
   22892:	18fb      	adds	r3, r7, r3
   22894:	2201      	movs	r2, #1
   22896:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   22898:	687b      	ldr	r3, [r7, #4]
   2289a:	2b00      	cmp	r3, #0
   2289c:	d104      	bne.n	228a8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   2289e:	2337      	movs	r3, #55	; 0x37
   228a0:	18fb      	adds	r3, r7, r3
   228a2:	22f4      	movs	r2, #244	; 0xf4
   228a4:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   228a6:	e0b3      	b.n	22a10 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   228a8:	687b      	ldr	r3, [r7, #4]
   228aa:	681a      	ldr	r2, [r3, #0]
   228ac:	4b5c      	ldr	r3, [pc, #368]	; (22a20 <m2m_wifi_init+0x1a0>)
   228ae:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   228b0:	4b5c      	ldr	r3, [pc, #368]	; (22a24 <m2m_wifi_init+0x1a4>)
   228b2:	2200      	movs	r2, #0
   228b4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   228b6:	2337      	movs	r3, #55	; 0x37
   228b8:	18fc      	adds	r4, r7, r3
   228ba:	230b      	movs	r3, #11
   228bc:	18fb      	adds	r3, r7, r3
   228be:	0018      	movs	r0, r3
   228c0:	4b59      	ldr	r3, [pc, #356]	; (22a28 <m2m_wifi_init+0x1a8>)
   228c2:	4798      	blx	r3
   228c4:	0003      	movs	r3, r0
   228c6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   228c8:	2337      	movs	r3, #55	; 0x37
   228ca:	18fb      	adds	r3, r7, r3
   228cc:	781b      	ldrb	r3, [r3, #0]
   228ce:	b25b      	sxtb	r3, r3
   228d0:	2b00      	cmp	r3, #0
   228d2:	d000      	beq.n	228d6 <m2m_wifi_init+0x56>
   228d4:	e099      	b.n	22a0a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   228d6:	2337      	movs	r3, #55	; 0x37
   228d8:	18fc      	adds	r4, r7, r3
   228da:	2000      	movs	r0, #0
   228dc:	4b53      	ldr	r3, [pc, #332]	; (22a2c <m2m_wifi_init+0x1ac>)
   228de:	4798      	blx	r3
   228e0:	0003      	movs	r3, r0
   228e2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   228e4:	2337      	movs	r3, #55	; 0x37
   228e6:	18fb      	adds	r3, r7, r3
   228e8:	781b      	ldrb	r3, [r3, #0]
   228ea:	b25b      	sxtb	r3, r3
   228ec:	2b00      	cmp	r3, #0
   228ee:	d000      	beq.n	228f2 <m2m_wifi_init+0x72>
   228f0:	e086      	b.n	22a00 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   228f2:	4b4f      	ldr	r3, [pc, #316]	; (22a30 <m2m_wifi_init+0x1b0>)
   228f4:	0019      	movs	r1, r3
   228f6:	2001      	movs	r0, #1
   228f8:	4b4e      	ldr	r3, [pc, #312]	; (22a34 <m2m_wifi_init+0x1b4>)
   228fa:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   228fc:	2337      	movs	r3, #55	; 0x37
   228fe:	18fc      	adds	r4, r7, r3
   22900:	230c      	movs	r3, #12
   22902:	18fb      	adds	r3, r7, r3
   22904:	0018      	movs	r0, r3
   22906:	4b4c      	ldr	r3, [pc, #304]	; (22a38 <m2m_wifi_init+0x1b8>)
   22908:	4798      	blx	r3
   2290a:	0003      	movs	r3, r0
   2290c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   2290e:	4b4b      	ldr	r3, [pc, #300]	; (22a3c <m2m_wifi_init+0x1bc>)
   22910:	0018      	movs	r0, r3
   22912:	4b4b      	ldr	r3, [pc, #300]	; (22a40 <m2m_wifi_init+0x1c0>)
   22914:	4798      	blx	r3
   22916:	230c      	movs	r3, #12
   22918:	18fb      	adds	r3, r7, r3
   2291a:	791b      	ldrb	r3, [r3, #4]
   2291c:	0019      	movs	r1, r3
   2291e:	230c      	movs	r3, #12
   22920:	18fb      	adds	r3, r7, r3
   22922:	795b      	ldrb	r3, [r3, #5]
   22924:	001a      	movs	r2, r3
   22926:	230c      	movs	r3, #12
   22928:	18fb      	adds	r3, r7, r3
   2292a:	799b      	ldrb	r3, [r3, #6]
   2292c:	001c      	movs	r4, r3
   2292e:	230c      	movs	r3, #12
   22930:	18fb      	adds	r3, r7, r3
   22932:	8c1b      	ldrh	r3, [r3, #32]
   22934:	4843      	ldr	r0, [pc, #268]	; (22a44 <m2m_wifi_init+0x1c4>)
   22936:	9300      	str	r3, [sp, #0]
   22938:	0023      	movs	r3, r4
   2293a:	4c41      	ldr	r4, [pc, #260]	; (22a40 <m2m_wifi_init+0x1c0>)
   2293c:	47a0      	blx	r4
   2293e:	4b42      	ldr	r3, [pc, #264]	; (22a48 <m2m_wifi_init+0x1c8>)
   22940:	0018      	movs	r0, r3
   22942:	4b3f      	ldr	r3, [pc, #252]	; (22a40 <m2m_wifi_init+0x1c0>)
   22944:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   22946:	4b3d      	ldr	r3, [pc, #244]	; (22a3c <m2m_wifi_init+0x1bc>)
   22948:	0018      	movs	r0, r3
   2294a:	4b3d      	ldr	r3, [pc, #244]	; (22a40 <m2m_wifi_init+0x1c0>)
   2294c:	4798      	blx	r3
   2294e:	230c      	movs	r3, #12
   22950:	18fb      	adds	r3, r7, r3
   22952:	3316      	adds	r3, #22
   22954:	001a      	movs	r2, r3
   22956:	230c      	movs	r3, #12
   22958:	18fb      	adds	r3, r7, r3
   2295a:	330a      	adds	r3, #10
   2295c:	0019      	movs	r1, r3
   2295e:	4b3b      	ldr	r3, [pc, #236]	; (22a4c <m2m_wifi_init+0x1cc>)
   22960:	0018      	movs	r0, r3
   22962:	4b37      	ldr	r3, [pc, #220]	; (22a40 <m2m_wifi_init+0x1c0>)
   22964:	4798      	blx	r3
   22966:	4b38      	ldr	r3, [pc, #224]	; (22a48 <m2m_wifi_init+0x1c8>)
   22968:	0018      	movs	r0, r3
   2296a:	4b35      	ldr	r3, [pc, #212]	; (22a40 <m2m_wifi_init+0x1c0>)
   2296c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   2296e:	4b33      	ldr	r3, [pc, #204]	; (22a3c <m2m_wifi_init+0x1bc>)
   22970:	0018      	movs	r0, r3
   22972:	4b33      	ldr	r3, [pc, #204]	; (22a40 <m2m_wifi_init+0x1c0>)
   22974:	4798      	blx	r3
   22976:	230c      	movs	r3, #12
   22978:	18fb      	adds	r3, r7, r3
   2297a:	79db      	ldrb	r3, [r3, #7]
   2297c:	0019      	movs	r1, r3
   2297e:	230c      	movs	r3, #12
   22980:	18fb      	adds	r3, r7, r3
   22982:	7a1b      	ldrb	r3, [r3, #8]
   22984:	001a      	movs	r2, r3
   22986:	230c      	movs	r3, #12
   22988:	18fb      	adds	r3, r7, r3
   2298a:	7a5b      	ldrb	r3, [r3, #9]
   2298c:	4830      	ldr	r0, [pc, #192]	; (22a50 <m2m_wifi_init+0x1d0>)
   2298e:	4c2c      	ldr	r4, [pc, #176]	; (22a40 <m2m_wifi_init+0x1c0>)
   22990:	47a0      	blx	r4
   22992:	4b2d      	ldr	r3, [pc, #180]	; (22a48 <m2m_wifi_init+0x1c8>)
   22994:	0018      	movs	r0, r3
   22996:	4b2a      	ldr	r3, [pc, #168]	; (22a40 <m2m_wifi_init+0x1c0>)
   22998:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   2299a:	4b28      	ldr	r3, [pc, #160]	; (22a3c <m2m_wifi_init+0x1bc>)
   2299c:	0018      	movs	r0, r3
   2299e:	4b28      	ldr	r3, [pc, #160]	; (22a40 <m2m_wifi_init+0x1c0>)
   229a0:	4798      	blx	r3
   229a2:	482c      	ldr	r0, [pc, #176]	; (22a54 <m2m_wifi_init+0x1d4>)
   229a4:	2304      	movs	r3, #4
   229a6:	2205      	movs	r2, #5
   229a8:	2113      	movs	r1, #19
   229aa:	4c25      	ldr	r4, [pc, #148]	; (22a40 <m2m_wifi_init+0x1c0>)
   229ac:	47a0      	blx	r4
   229ae:	4b26      	ldr	r3, [pc, #152]	; (22a48 <m2m_wifi_init+0x1c8>)
   229b0:	0018      	movs	r0, r3
   229b2:	4b23      	ldr	r3, [pc, #140]	; (22a40 <m2m_wifi_init+0x1c0>)
   229b4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   229b6:	4b21      	ldr	r3, [pc, #132]	; (22a3c <m2m_wifi_init+0x1bc>)
   229b8:	0018      	movs	r0, r3
   229ba:	4b21      	ldr	r3, [pc, #132]	; (22a40 <m2m_wifi_init+0x1c0>)
   229bc:	4798      	blx	r3
   229be:	4a26      	ldr	r2, [pc, #152]	; (22a58 <m2m_wifi_init+0x1d8>)
   229c0:	4926      	ldr	r1, [pc, #152]	; (22a5c <m2m_wifi_init+0x1dc>)
   229c2:	4b27      	ldr	r3, [pc, #156]	; (22a60 <m2m_wifi_init+0x1e0>)
   229c4:	0018      	movs	r0, r3
   229c6:	4b1e      	ldr	r3, [pc, #120]	; (22a40 <m2m_wifi_init+0x1c0>)
   229c8:	4798      	blx	r3
   229ca:	4b1f      	ldr	r3, [pc, #124]	; (22a48 <m2m_wifi_init+0x1c8>)
   229cc:	0018      	movs	r0, r3
   229ce:	4b1c      	ldr	r3, [pc, #112]	; (22a40 <m2m_wifi_init+0x1c0>)
   229d0:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   229d2:	2337      	movs	r3, #55	; 0x37
   229d4:	18fb      	adds	r3, r7, r3
   229d6:	781b      	ldrb	r3, [r3, #0]
   229d8:	b25b      	sxtb	r3, r3
   229da:	330d      	adds	r3, #13
   229dc:	d117      	bne.n	22a0e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   229de:	23e8      	movs	r3, #232	; 0xe8
   229e0:	33ff      	adds	r3, #255	; 0xff
   229e2:	001a      	movs	r2, r3
   229e4:	491f      	ldr	r1, [pc, #124]	; (22a64 <m2m_wifi_init+0x1e4>)
   229e6:	4b20      	ldr	r3, [pc, #128]	; (22a68 <m2m_wifi_init+0x1e8>)
   229e8:	0018      	movs	r0, r3
   229ea:	4b15      	ldr	r3, [pc, #84]	; (22a40 <m2m_wifi_init+0x1c0>)
   229ec:	4798      	blx	r3
   229ee:	4b1f      	ldr	r3, [pc, #124]	; (22a6c <m2m_wifi_init+0x1ec>)
   229f0:	0018      	movs	r0, r3
   229f2:	4b13      	ldr	r3, [pc, #76]	; (22a40 <m2m_wifi_init+0x1c0>)
   229f4:	4798      	blx	r3
   229f6:	4b14      	ldr	r3, [pc, #80]	; (22a48 <m2m_wifi_init+0x1c8>)
   229f8:	0018      	movs	r0, r3
   229fa:	4b11      	ldr	r3, [pc, #68]	; (22a40 <m2m_wifi_init+0x1c0>)
   229fc:	4798      	blx	r3
	}

	goto _EXIT0;
   229fe:	e006      	b.n	22a0e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22a00:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   22a02:	2000      	movs	r0, #0
   22a04:	4b1a      	ldr	r3, [pc, #104]	; (22a70 <m2m_wifi_init+0x1f0>)
   22a06:	4798      	blx	r3
   22a08:	e002      	b.n	22a10 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22a0a:	46c0      	nop			; (mov r8, r8)
   22a0c:	e000      	b.n	22a10 <m2m_wifi_init+0x190>
	goto _EXIT0;
   22a0e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   22a10:	2337      	movs	r3, #55	; 0x37
   22a12:	18fb      	adds	r3, r7, r3
   22a14:	781b      	ldrb	r3, [r3, #0]
   22a16:	b25b      	sxtb	r3, r3
}
   22a18:	0018      	movs	r0, r3
   22a1a:	46bd      	mov	sp, r7
   22a1c:	b00f      	add	sp, #60	; 0x3c
   22a1e:	bd90      	pop	{r4, r7, pc}
   22a20:	200042a8 	.word	0x200042a8
   22a24:	200042a5 	.word	0x200042a5
   22a28:	00023ba5 	.word	0x00023ba5
   22a2c:	00021929 	.word	0x00021929
   22a30:	000224c9 	.word	0x000224c9
   22a34:	0002240d 	.word	0x0002240d
   22a38:	000239d9 	.word	0x000239d9
   22a3c:	0003967c 	.word	0x0003967c
   22a40:	0001e979 	.word	0x0001e979
   22a44:	00039820 	.word	0x00039820
   22a48:	000396a8 	.word	0x000396a8
   22a4c:	00039848 	.word	0x00039848
   22a50:	00039864 	.word	0x00039864
   22a54:	00039888 	.word	0x00039888
   22a58:	000398a0 	.word	0x000398a0
   22a5c:	000398ac 	.word	0x000398ac
   22a60:	000398b8 	.word	0x000398b8
   22a64:	00039a54 	.word	0x00039a54
   22a68:	000396ac 	.word	0x000396ac
   22a6c:	000398d0 	.word	0x000398d0
   22a70:	00023d35 	.word	0x00023d35

00022a74 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   22a74:	b580      	push	{r7, lr}
   22a76:	b082      	sub	sp, #8
   22a78:	af00      	add	r7, sp, #0
   22a7a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   22a7c:	4b03      	ldr	r3, [pc, #12]	; (22a8c <m2m_wifi_handle_events+0x18>)
   22a7e:	4798      	blx	r3
   22a80:	0003      	movs	r3, r0
}
   22a82:	0018      	movs	r0, r3
   22a84:	46bd      	mov	sp, r7
   22a86:	b002      	add	sp, #8
   22a88:	bd80      	pop	{r7, pc}
   22a8a:	46c0      	nop			; (mov r8, r8)
   22a8c:	000221ed 	.word	0x000221ed

00022a90 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   22a90:	b590      	push	{r4, r7, lr}
   22a92:	b087      	sub	sp, #28
   22a94:	af02      	add	r7, sp, #8
   22a96:	60f8      	str	r0, [r7, #12]
   22a98:	0008      	movs	r0, r1
   22a9a:	0011      	movs	r1, r2
   22a9c:	607b      	str	r3, [r7, #4]
   22a9e:	230b      	movs	r3, #11
   22aa0:	18fb      	adds	r3, r7, r3
   22aa2:	1c02      	adds	r2, r0, #0
   22aa4:	701a      	strb	r2, [r3, #0]
   22aa6:	230a      	movs	r3, #10
   22aa8:	18fb      	adds	r3, r7, r3
   22aaa:	1c0a      	adds	r2, r1, #0
   22aac:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   22aae:	687c      	ldr	r4, [r7, #4]
   22ab0:	230a      	movs	r3, #10
   22ab2:	18fb      	adds	r3, r7, r3
   22ab4:	781a      	ldrb	r2, [r3, #0]
   22ab6:	230b      	movs	r3, #11
   22ab8:	18fb      	adds	r3, r7, r3
   22aba:	7819      	ldrb	r1, [r3, #0]
   22abc:	68f8      	ldr	r0, [r7, #12]
   22abe:	2300      	movs	r3, #0
   22ac0:	9301      	str	r3, [sp, #4]
   22ac2:	2320      	movs	r3, #32
   22ac4:	18fb      	adds	r3, r7, r3
   22ac6:	881b      	ldrh	r3, [r3, #0]
   22ac8:	9300      	str	r3, [sp, #0]
   22aca:	0023      	movs	r3, r4
   22acc:	4c03      	ldr	r4, [pc, #12]	; (22adc <m2m_wifi_connect+0x4c>)
   22ace:	47a0      	blx	r4
   22ad0:	0003      	movs	r3, r0
}
   22ad2:	0018      	movs	r0, r3
   22ad4:	46bd      	mov	sp, r7
   22ad6:	b005      	add	sp, #20
   22ad8:	bd90      	pop	{r4, r7, pc}
   22ada:	46c0      	nop			; (mov r8, r8)
   22adc:	00022ae1 	.word	0x00022ae1

00022ae0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   22ae0:	b5b0      	push	{r4, r5, r7, lr}
   22ae2:	b0aa      	sub	sp, #168	; 0xa8
   22ae4:	af04      	add	r7, sp, #16
   22ae6:	60f8      	str	r0, [r7, #12]
   22ae8:	0008      	movs	r0, r1
   22aea:	0011      	movs	r1, r2
   22aec:	607b      	str	r3, [r7, #4]
   22aee:	230b      	movs	r3, #11
   22af0:	18fb      	adds	r3, r7, r3
   22af2:	1c02      	adds	r2, r0, #0
   22af4:	701a      	strb	r2, [r3, #0]
   22af6:	230a      	movs	r3, #10
   22af8:	18fb      	adds	r3, r7, r3
   22afa:	1c0a      	adds	r2, r1, #0
   22afc:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   22afe:	2397      	movs	r3, #151	; 0x97
   22b00:	18fb      	adds	r3, r7, r3
   22b02:	2200      	movs	r2, #0
   22b04:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   22b06:	230a      	movs	r3, #10
   22b08:	18fb      	adds	r3, r7, r3
   22b0a:	781b      	ldrb	r3, [r3, #0]
   22b0c:	2b01      	cmp	r3, #1
   22b0e:	d100      	bne.n	22b12 <m2m_wifi_connect_sc+0x32>
   22b10:	e085      	b.n	22c1e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   22b12:	687b      	ldr	r3, [r7, #4]
   22b14:	2b00      	cmp	r3, #0
   22b16:	d112      	bne.n	22b3e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   22b18:	4ad8      	ldr	r2, [pc, #864]	; (22e7c <m2m_wifi_connect_sc+0x39c>)
   22b1a:	49d9      	ldr	r1, [pc, #868]	; (22e80 <m2m_wifi_connect_sc+0x3a0>)
   22b1c:	4bd9      	ldr	r3, [pc, #868]	; (22e84 <m2m_wifi_connect_sc+0x3a4>)
   22b1e:	0018      	movs	r0, r3
   22b20:	4bd9      	ldr	r3, [pc, #868]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22b22:	4798      	blx	r3
   22b24:	4bd9      	ldr	r3, [pc, #868]	; (22e8c <m2m_wifi_connect_sc+0x3ac>)
   22b26:	0018      	movs	r0, r3
   22b28:	4bd7      	ldr	r3, [pc, #860]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22b2a:	4798      	blx	r3
   22b2c:	4bd8      	ldr	r3, [pc, #864]	; (22e90 <m2m_wifi_connect_sc+0x3b0>)
   22b2e:	0018      	movs	r0, r3
   22b30:	4bd5      	ldr	r3, [pc, #852]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22b32:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22b34:	2397      	movs	r3, #151	; 0x97
   22b36:	18fb      	adds	r3, r7, r3
   22b38:	22f4      	movs	r2, #244	; 0xf4
   22b3a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22b3c:	e1f9      	b.n	22f32 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   22b3e:	230a      	movs	r3, #10
   22b40:	18fb      	adds	r3, r7, r3
   22b42:	781b      	ldrb	r3, [r3, #0]
   22b44:	2b02      	cmp	r3, #2
   22b46:	d16a      	bne.n	22c1e <m2m_wifi_connect_sc+0x13e>
   22b48:	687b      	ldr	r3, [r7, #4]
   22b4a:	0018      	movs	r0, r3
   22b4c:	4bd1      	ldr	r3, [pc, #836]	; (22e94 <m2m_wifi_connect_sc+0x3b4>)
   22b4e:	4798      	blx	r3
   22b50:	0003      	movs	r3, r0
   22b52:	2b40      	cmp	r3, #64	; 0x40
   22b54:	d163      	bne.n	22c1e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   22b56:	2396      	movs	r3, #150	; 0x96
   22b58:	18fb      	adds	r3, r7, r3
   22b5a:	2200      	movs	r2, #0
   22b5c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   22b5e:	687b      	ldr	r3, [r7, #4]
   22b60:	2290      	movs	r2, #144	; 0x90
   22b62:	18ba      	adds	r2, r7, r2
   22b64:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22b66:	e055      	b.n	22c14 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   22b68:	2396      	movs	r3, #150	; 0x96
   22b6a:	18fb      	adds	r3, r7, r3
   22b6c:	781b      	ldrb	r3, [r3, #0]
   22b6e:	2290      	movs	r2, #144	; 0x90
   22b70:	18ba      	adds	r2, r7, r2
   22b72:	6812      	ldr	r2, [r2, #0]
   22b74:	18d3      	adds	r3, r2, r3
   22b76:	781b      	ldrb	r3, [r3, #0]
   22b78:	2b2f      	cmp	r3, #47	; 0x2f
   22b7a:	d931      	bls.n	22be0 <m2m_wifi_connect_sc+0x100>
   22b7c:	2396      	movs	r3, #150	; 0x96
   22b7e:	18fb      	adds	r3, r7, r3
   22b80:	781b      	ldrb	r3, [r3, #0]
   22b82:	2290      	movs	r2, #144	; 0x90
   22b84:	18ba      	adds	r2, r7, r2
   22b86:	6812      	ldr	r2, [r2, #0]
   22b88:	18d3      	adds	r3, r2, r3
   22b8a:	781b      	ldrb	r3, [r3, #0]
   22b8c:	2b39      	cmp	r3, #57	; 0x39
   22b8e:	d909      	bls.n	22ba4 <m2m_wifi_connect_sc+0xc4>
   22b90:	2396      	movs	r3, #150	; 0x96
   22b92:	18fb      	adds	r3, r7, r3
   22b94:	781b      	ldrb	r3, [r3, #0]
   22b96:	2290      	movs	r2, #144	; 0x90
   22b98:	18ba      	adds	r2, r7, r2
   22b9a:	6812      	ldr	r2, [r2, #0]
   22b9c:	18d3      	adds	r3, r2, r3
   22b9e:	781b      	ldrb	r3, [r3, #0]
   22ba0:	2b40      	cmp	r3, #64	; 0x40
   22ba2:	d91d      	bls.n	22be0 <m2m_wifi_connect_sc+0x100>
   22ba4:	2396      	movs	r3, #150	; 0x96
   22ba6:	18fb      	adds	r3, r7, r3
   22ba8:	781b      	ldrb	r3, [r3, #0]
   22baa:	2290      	movs	r2, #144	; 0x90
   22bac:	18ba      	adds	r2, r7, r2
   22bae:	6812      	ldr	r2, [r2, #0]
   22bb0:	18d3      	adds	r3, r2, r3
   22bb2:	781b      	ldrb	r3, [r3, #0]
   22bb4:	2b46      	cmp	r3, #70	; 0x46
   22bb6:	d909      	bls.n	22bcc <m2m_wifi_connect_sc+0xec>
   22bb8:	2396      	movs	r3, #150	; 0x96
   22bba:	18fb      	adds	r3, r7, r3
   22bbc:	781b      	ldrb	r3, [r3, #0]
   22bbe:	2290      	movs	r2, #144	; 0x90
   22bc0:	18ba      	adds	r2, r7, r2
   22bc2:	6812      	ldr	r2, [r2, #0]
   22bc4:	18d3      	adds	r3, r2, r3
   22bc6:	781b      	ldrb	r3, [r3, #0]
   22bc8:	2b60      	cmp	r3, #96	; 0x60
   22bca:	d909      	bls.n	22be0 <m2m_wifi_connect_sc+0x100>
   22bcc:	2396      	movs	r3, #150	; 0x96
   22bce:	18fb      	adds	r3, r7, r3
   22bd0:	781b      	ldrb	r3, [r3, #0]
   22bd2:	2290      	movs	r2, #144	; 0x90
   22bd4:	18ba      	adds	r2, r7, r2
   22bd6:	6812      	ldr	r2, [r2, #0]
   22bd8:	18d3      	adds	r3, r2, r3
   22bda:	781b      	ldrb	r3, [r3, #0]
   22bdc:	2b66      	cmp	r3, #102	; 0x66
   22bde:	d912      	bls.n	22c06 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   22be0:	4aad      	ldr	r2, [pc, #692]	; (22e98 <m2m_wifi_connect_sc+0x3b8>)
   22be2:	49a7      	ldr	r1, [pc, #668]	; (22e80 <m2m_wifi_connect_sc+0x3a0>)
   22be4:	4ba7      	ldr	r3, [pc, #668]	; (22e84 <m2m_wifi_connect_sc+0x3a4>)
   22be6:	0018      	movs	r0, r3
   22be8:	4ba7      	ldr	r3, [pc, #668]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22bea:	4798      	blx	r3
   22bec:	4bab      	ldr	r3, [pc, #684]	; (22e9c <m2m_wifi_connect_sc+0x3bc>)
   22bee:	0018      	movs	r0, r3
   22bf0:	4ba5      	ldr	r3, [pc, #660]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22bf2:	4798      	blx	r3
   22bf4:	4ba6      	ldr	r3, [pc, #664]	; (22e90 <m2m_wifi_connect_sc+0x3b0>)
   22bf6:	0018      	movs	r0, r3
   22bf8:	4ba3      	ldr	r3, [pc, #652]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22bfa:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   22bfc:	2397      	movs	r3, #151	; 0x97
   22bfe:	18fb      	adds	r3, r7, r3
   22c00:	22f4      	movs	r2, #244	; 0xf4
   22c02:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   22c04:	e195      	b.n	22f32 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   22c06:	2396      	movs	r3, #150	; 0x96
   22c08:	18fb      	adds	r3, r7, r3
   22c0a:	781a      	ldrb	r2, [r3, #0]
   22c0c:	2396      	movs	r3, #150	; 0x96
   22c0e:	18fb      	adds	r3, r7, r3
   22c10:	3201      	adds	r2, #1
   22c12:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22c14:	2396      	movs	r3, #150	; 0x96
   22c16:	18fb      	adds	r3, r7, r3
   22c18:	781b      	ldrb	r3, [r3, #0]
   22c1a:	2b3f      	cmp	r3, #63	; 0x3f
   22c1c:	d9a4      	bls.n	22b68 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   22c1e:	230b      	movs	r3, #11
   22c20:	18fb      	adds	r3, r7, r3
   22c22:	781b      	ldrb	r3, [r3, #0]
   22c24:	2b00      	cmp	r3, #0
   22c26:	d004      	beq.n	22c32 <m2m_wifi_connect_sc+0x152>
   22c28:	230b      	movs	r3, #11
   22c2a:	18fb      	adds	r3, r7, r3
   22c2c:	781b      	ldrb	r3, [r3, #0]
   22c2e:	2b20      	cmp	r3, #32
   22c30:	d913      	bls.n	22c5a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   22c32:	238c      	movs	r3, #140	; 0x8c
   22c34:	009a      	lsls	r2, r3, #2
   22c36:	4992      	ldr	r1, [pc, #584]	; (22e80 <m2m_wifi_connect_sc+0x3a0>)
   22c38:	4b92      	ldr	r3, [pc, #584]	; (22e84 <m2m_wifi_connect_sc+0x3a4>)
   22c3a:	0018      	movs	r0, r3
   22c3c:	4b92      	ldr	r3, [pc, #584]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22c3e:	4798      	blx	r3
   22c40:	4b97      	ldr	r3, [pc, #604]	; (22ea0 <m2m_wifi_connect_sc+0x3c0>)
   22c42:	0018      	movs	r0, r3
   22c44:	4b90      	ldr	r3, [pc, #576]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22c46:	4798      	blx	r3
   22c48:	4b91      	ldr	r3, [pc, #580]	; (22e90 <m2m_wifi_connect_sc+0x3b0>)
   22c4a:	0018      	movs	r0, r3
   22c4c:	4b8e      	ldr	r3, [pc, #568]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22c4e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22c50:	2397      	movs	r3, #151	; 0x97
   22c52:	18fb      	adds	r3, r7, r3
   22c54:	22f4      	movs	r2, #244	; 0xf4
   22c56:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22c58:	e16b      	b.n	22f32 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   22c5a:	23a8      	movs	r3, #168	; 0xa8
   22c5c:	18fb      	adds	r3, r7, r3
   22c5e:	881b      	ldrh	r3, [r3, #0]
   22c60:	2b00      	cmp	r3, #0
   22c62:	d004      	beq.n	22c6e <m2m_wifi_connect_sc+0x18e>
   22c64:	23a8      	movs	r3, #168	; 0xa8
   22c66:	18fb      	adds	r3, r7, r3
   22c68:	881b      	ldrh	r3, [r3, #0]
   22c6a:	2b0e      	cmp	r3, #14
   22c6c:	d917      	bls.n	22c9e <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   22c6e:	23a8      	movs	r3, #168	; 0xa8
   22c70:	18fb      	adds	r3, r7, r3
   22c72:	881b      	ldrh	r3, [r3, #0]
   22c74:	2bff      	cmp	r3, #255	; 0xff
   22c76:	d012      	beq.n	22c9e <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   22c78:	4a8a      	ldr	r2, [pc, #552]	; (22ea4 <m2m_wifi_connect_sc+0x3c4>)
   22c7a:	4981      	ldr	r1, [pc, #516]	; (22e80 <m2m_wifi_connect_sc+0x3a0>)
   22c7c:	4b81      	ldr	r3, [pc, #516]	; (22e84 <m2m_wifi_connect_sc+0x3a4>)
   22c7e:	0018      	movs	r0, r3
   22c80:	4b81      	ldr	r3, [pc, #516]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22c82:	4798      	blx	r3
   22c84:	4b88      	ldr	r3, [pc, #544]	; (22ea8 <m2m_wifi_connect_sc+0x3c8>)
   22c86:	0018      	movs	r0, r3
   22c88:	4b7f      	ldr	r3, [pc, #508]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22c8a:	4798      	blx	r3
   22c8c:	4b80      	ldr	r3, [pc, #512]	; (22e90 <m2m_wifi_connect_sc+0x3b0>)
   22c8e:	0018      	movs	r0, r3
   22c90:	4b7d      	ldr	r3, [pc, #500]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22c92:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22c94:	2397      	movs	r3, #151	; 0x97
   22c96:	18fb      	adds	r3, r7, r3
   22c98:	22f4      	movs	r2, #244	; 0xf4
   22c9a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22c9c:	e149      	b.n	22f32 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   22c9e:	230b      	movs	r3, #11
   22ca0:	18fb      	adds	r3, r7, r3
   22ca2:	781a      	ldrb	r2, [r3, #0]
   22ca4:	68f9      	ldr	r1, [r7, #12]
   22ca6:	2314      	movs	r3, #20
   22ca8:	18fb      	adds	r3, r7, r3
   22caa:	3346      	adds	r3, #70	; 0x46
   22cac:	0018      	movs	r0, r3
   22cae:	4b7f      	ldr	r3, [pc, #508]	; (22eac <m2m_wifi_connect_sc+0x3cc>)
   22cb0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   22cb2:	230b      	movs	r3, #11
   22cb4:	18fb      	adds	r3, r7, r3
   22cb6:	781b      	ldrb	r3, [r3, #0]
   22cb8:	2214      	movs	r2, #20
   22cba:	18ba      	adds	r2, r7, r2
   22cbc:	2146      	movs	r1, #70	; 0x46
   22cbe:	18d3      	adds	r3, r2, r3
   22cc0:	185b      	adds	r3, r3, r1
   22cc2:	2200      	movs	r2, #0
   22cc4:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   22cc6:	2314      	movs	r3, #20
   22cc8:	18fb      	adds	r3, r7, r3
   22cca:	22a8      	movs	r2, #168	; 0xa8
   22ccc:	18ba      	adds	r2, r7, r2
   22cce:	2144      	movs	r1, #68	; 0x44
   22cd0:	8812      	ldrh	r2, [r2, #0]
   22cd2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   22cd4:	23ac      	movs	r3, #172	; 0xac
   22cd6:	18fb      	adds	r3, r7, r3
   22cd8:	781b      	ldrb	r3, [r3, #0]
   22cda:	1e5a      	subs	r2, r3, #1
   22cdc:	4193      	sbcs	r3, r2
   22cde:	b2db      	uxtb	r3, r3
   22ce0:	0019      	movs	r1, r3
   22ce2:	2314      	movs	r3, #20
   22ce4:	18fb      	adds	r3, r7, r3
   22ce6:	2267      	movs	r2, #103	; 0x67
   22ce8:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   22cea:	2314      	movs	r3, #20
   22cec:	18fb      	adds	r3, r7, r3
   22cee:	228c      	movs	r2, #140	; 0x8c
   22cf0:	18ba      	adds	r2, r7, r2
   22cf2:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   22cf4:	238c      	movs	r3, #140	; 0x8c
   22cf6:	18fb      	adds	r3, r7, r3
   22cf8:	681b      	ldr	r3, [r3, #0]
   22cfa:	220a      	movs	r2, #10
   22cfc:	18ba      	adds	r2, r7, r2
   22cfe:	2141      	movs	r1, #65	; 0x41
   22d00:	7812      	ldrb	r2, [r2, #0]
   22d02:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   22d04:	230a      	movs	r3, #10
   22d06:	18fb      	adds	r3, r7, r3
   22d08:	781b      	ldrb	r3, [r3, #0]
   22d0a:	2b03      	cmp	r3, #3
   22d0c:	d000      	beq.n	22d10 <m2m_wifi_connect_sc+0x230>
   22d0e:	e07d      	b.n	22e0c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   22d10:	687b      	ldr	r3, [r7, #4]
   22d12:	2288      	movs	r2, #136	; 0x88
   22d14:	18ba      	adds	r2, r7, r2
   22d16:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   22d18:	238c      	movs	r3, #140	; 0x8c
   22d1a:	18fb      	adds	r3, r7, r3
   22d1c:	681b      	ldr	r3, [r3, #0]
   22d1e:	2284      	movs	r2, #132	; 0x84
   22d20:	18ba      	adds	r2, r7, r2
   22d22:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   22d24:	2388      	movs	r3, #136	; 0x88
   22d26:	18fb      	adds	r3, r7, r3
   22d28:	681b      	ldr	r3, [r3, #0]
   22d2a:	781b      	ldrb	r3, [r3, #0]
   22d2c:	3b01      	subs	r3, #1
   22d2e:	b2da      	uxtb	r2, r3
   22d30:	2384      	movs	r3, #132	; 0x84
   22d32:	18fb      	adds	r3, r7, r3
   22d34:	681b      	ldr	r3, [r3, #0]
   22d36:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   22d38:	2384      	movs	r3, #132	; 0x84
   22d3a:	18fb      	adds	r3, r7, r3
   22d3c:	681b      	ldr	r3, [r3, #0]
   22d3e:	781b      	ldrb	r3, [r3, #0]
   22d40:	2b03      	cmp	r3, #3
   22d42:	d919      	bls.n	22d78 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   22d44:	2394      	movs	r3, #148	; 0x94
   22d46:	009a      	lsls	r2, r3, #2
   22d48:	494d      	ldr	r1, [pc, #308]	; (22e80 <m2m_wifi_connect_sc+0x3a0>)
   22d4a:	4b4e      	ldr	r3, [pc, #312]	; (22e84 <m2m_wifi_connect_sc+0x3a4>)
   22d4c:	0018      	movs	r0, r3
   22d4e:	4b4e      	ldr	r3, [pc, #312]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22d50:	4798      	blx	r3
   22d52:	2384      	movs	r3, #132	; 0x84
   22d54:	18fb      	adds	r3, r7, r3
   22d56:	681b      	ldr	r3, [r3, #0]
   22d58:	781b      	ldrb	r3, [r3, #0]
   22d5a:	001a      	movs	r2, r3
   22d5c:	4b54      	ldr	r3, [pc, #336]	; (22eb0 <m2m_wifi_connect_sc+0x3d0>)
   22d5e:	0011      	movs	r1, r2
   22d60:	0018      	movs	r0, r3
   22d62:	4b49      	ldr	r3, [pc, #292]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22d64:	4798      	blx	r3
   22d66:	4b4a      	ldr	r3, [pc, #296]	; (22e90 <m2m_wifi_connect_sc+0x3b0>)
   22d68:	0018      	movs	r0, r3
   22d6a:	4b47      	ldr	r3, [pc, #284]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22d6c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22d6e:	2397      	movs	r3, #151	; 0x97
   22d70:	18fb      	adds	r3, r7, r3
   22d72:	22f4      	movs	r2, #244	; 0xf4
   22d74:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22d76:	e0dc      	b.n	22f32 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   22d78:	2388      	movs	r3, #136	; 0x88
   22d7a:	18fb      	adds	r3, r7, r3
   22d7c:	681b      	ldr	r3, [r3, #0]
   22d7e:	785b      	ldrb	r3, [r3, #1]
   22d80:	3b01      	subs	r3, #1
   22d82:	b2da      	uxtb	r2, r3
   22d84:	2384      	movs	r3, #132	; 0x84
   22d86:	18fb      	adds	r3, r7, r3
   22d88:	681b      	ldr	r3, [r3, #0]
   22d8a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   22d8c:	2384      	movs	r3, #132	; 0x84
   22d8e:	18fb      	adds	r3, r7, r3
   22d90:	681b      	ldr	r3, [r3, #0]
   22d92:	785b      	ldrb	r3, [r3, #1]
   22d94:	2b0a      	cmp	r3, #10
   22d96:	d01e      	beq.n	22dd6 <m2m_wifi_connect_sc+0x2f6>
   22d98:	2384      	movs	r3, #132	; 0x84
   22d9a:	18fb      	adds	r3, r7, r3
   22d9c:	681b      	ldr	r3, [r3, #0]
   22d9e:	785b      	ldrb	r3, [r3, #1]
   22da0:	2b1a      	cmp	r3, #26
   22da2:	d018      	beq.n	22dd6 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   22da4:	4a43      	ldr	r2, [pc, #268]	; (22eb4 <m2m_wifi_connect_sc+0x3d4>)
   22da6:	4936      	ldr	r1, [pc, #216]	; (22e80 <m2m_wifi_connect_sc+0x3a0>)
   22da8:	4b36      	ldr	r3, [pc, #216]	; (22e84 <m2m_wifi_connect_sc+0x3a4>)
   22daa:	0018      	movs	r0, r3
   22dac:	4b36      	ldr	r3, [pc, #216]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22dae:	4798      	blx	r3
   22db0:	2384      	movs	r3, #132	; 0x84
   22db2:	18fb      	adds	r3, r7, r3
   22db4:	681b      	ldr	r3, [r3, #0]
   22db6:	785b      	ldrb	r3, [r3, #1]
   22db8:	001a      	movs	r2, r3
   22dba:	4b3f      	ldr	r3, [pc, #252]	; (22eb8 <m2m_wifi_connect_sc+0x3d8>)
   22dbc:	0011      	movs	r1, r2
   22dbe:	0018      	movs	r0, r3
   22dc0:	4b31      	ldr	r3, [pc, #196]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22dc2:	4798      	blx	r3
   22dc4:	4b32      	ldr	r3, [pc, #200]	; (22e90 <m2m_wifi_connect_sc+0x3b0>)
   22dc6:	0018      	movs	r0, r3
   22dc8:	4b2f      	ldr	r3, [pc, #188]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22dca:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22dcc:	2397      	movs	r3, #151	; 0x97
   22dce:	18fb      	adds	r3, r7, r3
   22dd0:	22f4      	movs	r2, #244	; 0xf4
   22dd2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22dd4:	e0ad      	b.n	22f32 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   22dd6:	2384      	movs	r3, #132	; 0x84
   22dd8:	18fb      	adds	r3, r7, r3
   22dda:	681b      	ldr	r3, [r3, #0]
   22ddc:	1c98      	adds	r0, r3, #2
   22dde:	2388      	movs	r3, #136	; 0x88
   22de0:	18fb      	adds	r3, r7, r3
   22de2:	681b      	ldr	r3, [r3, #0]
   22de4:	1c99      	adds	r1, r3, #2
   22de6:	2388      	movs	r3, #136	; 0x88
   22de8:	18fb      	adds	r3, r7, r3
   22dea:	681b      	ldr	r3, [r3, #0]
   22dec:	785b      	ldrb	r3, [r3, #1]
   22dee:	001a      	movs	r2, r3
   22df0:	4b2e      	ldr	r3, [pc, #184]	; (22eac <m2m_wifi_connect_sc+0x3cc>)
   22df2:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   22df4:	2388      	movs	r3, #136	; 0x88
   22df6:	18fb      	adds	r3, r7, r3
   22df8:	681b      	ldr	r3, [r3, #0]
   22dfa:	785b      	ldrb	r3, [r3, #1]
   22dfc:	001a      	movs	r2, r3
   22dfe:	2384      	movs	r3, #132	; 0x84
   22e00:	18fb      	adds	r3, r7, r3
   22e02:	681b      	ldr	r3, [r3, #0]
   22e04:	189b      	adds	r3, r3, r2
   22e06:	2200      	movs	r2, #0
   22e08:	709a      	strb	r2, [r3, #2]
   22e0a:	e081      	b.n	22f10 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   22e0c:	230a      	movs	r3, #10
   22e0e:	18fb      	adds	r3, r7, r3
   22e10:	781b      	ldrb	r3, [r3, #0]
   22e12:	2b02      	cmp	r3, #2
   22e14:	d156      	bne.n	22ec4 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   22e16:	2382      	movs	r3, #130	; 0x82
   22e18:	18fc      	adds	r4, r7, r3
   22e1a:	687b      	ldr	r3, [r7, #4]
   22e1c:	0018      	movs	r0, r3
   22e1e:	4b1d      	ldr	r3, [pc, #116]	; (22e94 <m2m_wifi_connect_sc+0x3b4>)
   22e20:	4798      	blx	r3
   22e22:	0003      	movs	r3, r0
   22e24:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   22e26:	2382      	movs	r3, #130	; 0x82
   22e28:	18fb      	adds	r3, r7, r3
   22e2a:	881b      	ldrh	r3, [r3, #0]
   22e2c:	2b00      	cmp	r3, #0
   22e2e:	d004      	beq.n	22e3a <m2m_wifi_connect_sc+0x35a>
   22e30:	2382      	movs	r3, #130	; 0x82
   22e32:	18fb      	adds	r3, r7, r3
   22e34:	881b      	ldrh	r3, [r3, #0]
   22e36:	2b40      	cmp	r3, #64	; 0x40
   22e38:	d912      	bls.n	22e60 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   22e3a:	4a20      	ldr	r2, [pc, #128]	; (22ebc <m2m_wifi_connect_sc+0x3dc>)
   22e3c:	4910      	ldr	r1, [pc, #64]	; (22e80 <m2m_wifi_connect_sc+0x3a0>)
   22e3e:	4b11      	ldr	r3, [pc, #68]	; (22e84 <m2m_wifi_connect_sc+0x3a4>)
   22e40:	0018      	movs	r0, r3
   22e42:	4b11      	ldr	r3, [pc, #68]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22e44:	4798      	blx	r3
   22e46:	4b1e      	ldr	r3, [pc, #120]	; (22ec0 <m2m_wifi_connect_sc+0x3e0>)
   22e48:	0018      	movs	r0, r3
   22e4a:	4b0f      	ldr	r3, [pc, #60]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22e4c:	4798      	blx	r3
   22e4e:	4b10      	ldr	r3, [pc, #64]	; (22e90 <m2m_wifi_connect_sc+0x3b0>)
   22e50:	0018      	movs	r0, r3
   22e52:	4b0d      	ldr	r3, [pc, #52]	; (22e88 <m2m_wifi_connect_sc+0x3a8>)
   22e54:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22e56:	2397      	movs	r3, #151	; 0x97
   22e58:	18fb      	adds	r3, r7, r3
   22e5a:	22f4      	movs	r2, #244	; 0xf4
   22e5c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22e5e:	e068      	b.n	22f32 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   22e60:	238c      	movs	r3, #140	; 0x8c
   22e62:	18fb      	adds	r3, r7, r3
   22e64:	6818      	ldr	r0, [r3, #0]
   22e66:	2382      	movs	r3, #130	; 0x82
   22e68:	18fb      	adds	r3, r7, r3
   22e6a:	881b      	ldrh	r3, [r3, #0]
   22e6c:	3301      	adds	r3, #1
   22e6e:	001a      	movs	r2, r3
   22e70:	687b      	ldr	r3, [r7, #4]
   22e72:	0019      	movs	r1, r3
   22e74:	4b0d      	ldr	r3, [pc, #52]	; (22eac <m2m_wifi_connect_sc+0x3cc>)
   22e76:	4798      	blx	r3
   22e78:	e04a      	b.n	22f10 <m2m_wifi_connect_sc+0x430>
   22e7a:	46c0      	nop			; (mov r8, r8)
   22e7c:	0000021a 	.word	0x0000021a
   22e80:	00039a64 	.word	0x00039a64
   22e84:	000396ac 	.word	0x000396ac
   22e88:	0001e979 	.word	0x0001e979
   22e8c:	000398ec 	.word	0x000398ec
   22e90:	000396a8 	.word	0x000396a8
   22e94:	0002174f 	.word	0x0002174f
   22e98:	00000226 	.word	0x00000226
   22e9c:	00039900 	.word	0x00039900
   22ea0:	00039910 	.word	0x00039910
   22ea4:	00000239 	.word	0x00000239
   22ea8:	00039924 	.word	0x00039924
   22eac:	000216d5 	.word	0x000216d5
   22eb0:	00039930 	.word	0x00039930
   22eb4:	00000257 	.word	0x00000257
   22eb8:	0003994c 	.word	0x0003994c
   22ebc:	00000266 	.word	0x00000266
   22ec0:	00039968 	.word	0x00039968
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   22ec4:	230a      	movs	r3, #10
   22ec6:	18fb      	adds	r3, r7, r3
   22ec8:	781b      	ldrb	r3, [r3, #0]
   22eca:	2b04      	cmp	r3, #4
   22ecc:	d108      	bne.n	22ee0 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   22ece:	238c      	movs	r3, #140	; 0x8c
   22ed0:	18fb      	adds	r3, r7, r3
   22ed2:	681b      	ldr	r3, [r3, #0]
   22ed4:	6879      	ldr	r1, [r7, #4]
   22ed6:	223e      	movs	r2, #62	; 0x3e
   22ed8:	0018      	movs	r0, r3
   22eda:	4b1a      	ldr	r3, [pc, #104]	; (22f44 <m2m_wifi_connect_sc+0x464>)
   22edc:	4798      	blx	r3
   22ede:	e017      	b.n	22f10 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   22ee0:	230a      	movs	r3, #10
   22ee2:	18fb      	adds	r3, r7, r3
   22ee4:	781b      	ldrb	r3, [r3, #0]
   22ee6:	2b01      	cmp	r3, #1
   22ee8:	d012      	beq.n	22f10 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   22eea:	4a17      	ldr	r2, [pc, #92]	; (22f48 <m2m_wifi_connect_sc+0x468>)
   22eec:	4917      	ldr	r1, [pc, #92]	; (22f4c <m2m_wifi_connect_sc+0x46c>)
   22eee:	4b18      	ldr	r3, [pc, #96]	; (22f50 <m2m_wifi_connect_sc+0x470>)
   22ef0:	0018      	movs	r0, r3
   22ef2:	4b18      	ldr	r3, [pc, #96]	; (22f54 <m2m_wifi_connect_sc+0x474>)
   22ef4:	4798      	blx	r3
   22ef6:	4b18      	ldr	r3, [pc, #96]	; (22f58 <m2m_wifi_connect_sc+0x478>)
   22ef8:	0018      	movs	r0, r3
   22efa:	4b16      	ldr	r3, [pc, #88]	; (22f54 <m2m_wifi_connect_sc+0x474>)
   22efc:	4798      	blx	r3
   22efe:	4b17      	ldr	r3, [pc, #92]	; (22f5c <m2m_wifi_connect_sc+0x47c>)
   22f00:	0018      	movs	r0, r3
   22f02:	4b14      	ldr	r3, [pc, #80]	; (22f54 <m2m_wifi_connect_sc+0x474>)
   22f04:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22f06:	2397      	movs	r3, #151	; 0x97
   22f08:	18fb      	adds	r3, r7, r3
   22f0a:	22f4      	movs	r2, #244	; 0xf4
   22f0c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22f0e:	e010      	b.n	22f32 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   22f10:	2397      	movs	r3, #151	; 0x97
   22f12:	18fc      	adds	r4, r7, r3
   22f14:	2314      	movs	r3, #20
   22f16:	18fa      	adds	r2, r7, r3
   22f18:	2300      	movs	r3, #0
   22f1a:	9302      	str	r3, [sp, #8]
   22f1c:	2300      	movs	r3, #0
   22f1e:	9301      	str	r3, [sp, #4]
   22f20:	2300      	movs	r3, #0
   22f22:	9300      	str	r3, [sp, #0]
   22f24:	236c      	movs	r3, #108	; 0x6c
   22f26:	2128      	movs	r1, #40	; 0x28
   22f28:	2001      	movs	r0, #1
   22f2a:	4d0d      	ldr	r5, [pc, #52]	; (22f60 <m2m_wifi_connect_sc+0x480>)
   22f2c:	47a8      	blx	r5
   22f2e:	0003      	movs	r3, r0
   22f30:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   22f32:	2397      	movs	r3, #151	; 0x97
   22f34:	18fb      	adds	r3, r7, r3
   22f36:	781b      	ldrb	r3, [r3, #0]
   22f38:	b25b      	sxtb	r3, r3
}
   22f3a:	0018      	movs	r0, r3
   22f3c:	46bd      	mov	sp, r7
   22f3e:	b026      	add	sp, #152	; 0x98
   22f40:	bdb0      	pop	{r4, r5, r7, pc}
   22f42:	46c0      	nop			; (mov r8, r8)
   22f44:	000216d5 	.word	0x000216d5
   22f48:	00000276 	.word	0x00000276
   22f4c:	00039a64 	.word	0x00039a64
   22f50:	000396ac 	.word	0x000396ac
   22f54:	0001e979 	.word	0x0001e979
   22f58:	00039984 	.word	0x00039984
   22f5c:	000396a8 	.word	0x000396a8
   22f60:	00021971 	.word	0x00021971

00022f64 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   22f64:	b580      	push	{r7, lr}
   22f66:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   22f68:	2300      	movs	r3, #0
}
   22f6a:	0018      	movs	r0, r3
   22f6c:	46bd      	mov	sp, r7
   22f6e:	bd80      	pop	{r7, pc}

00022f70 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   22f70:	b590      	push	{r4, r7, lr}
   22f72:	b087      	sub	sp, #28
   22f74:	af00      	add	r7, sp, #0
   22f76:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22f78:	2317      	movs	r3, #23
   22f7a:	18fb      	adds	r3, r7, r3
   22f7c:	2200      	movs	r2, #0
   22f7e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   22f80:	687b      	ldr	r3, [r7, #4]
   22f82:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   22f84:	693b      	ldr	r3, [r7, #16]
   22f86:	2280      	movs	r2, #128	; 0x80
   22f88:	0052      	lsls	r2, r2, #1
   22f8a:	4313      	orrs	r3, r2
   22f8c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   22f8e:	693a      	ldr	r2, [r7, #16]
   22f90:	23a5      	movs	r3, #165	; 0xa5
   22f92:	015b      	lsls	r3, r3, #5
   22f94:	0011      	movs	r1, r2
   22f96:	0018      	movs	r0, r3
   22f98:	4b12      	ldr	r3, [pc, #72]	; (22fe4 <chip_apply_conf+0x74>)
   22f9a:	4798      	blx	r3
		if(val32 != 0) {		
   22f9c:	693b      	ldr	r3, [r7, #16]
   22f9e:	2b00      	cmp	r3, #0
   22fa0:	d018      	beq.n	22fd4 <chip_apply_conf+0x64>
			uint32 reg = 0;
   22fa2:	2300      	movs	r3, #0
   22fa4:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   22fa6:	2317      	movs	r3, #23
   22fa8:	18fc      	adds	r4, r7, r3
   22faa:	230c      	movs	r3, #12
   22fac:	18fa      	adds	r2, r7, r3
   22fae:	23a5      	movs	r3, #165	; 0xa5
   22fb0:	015b      	lsls	r3, r3, #5
   22fb2:	0011      	movs	r1, r2
   22fb4:	0018      	movs	r0, r3
   22fb6:	4b0c      	ldr	r3, [pc, #48]	; (22fe8 <chip_apply_conf+0x78>)
   22fb8:	4798      	blx	r3
   22fba:	0003      	movs	r3, r0
   22fbc:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   22fbe:	2317      	movs	r3, #23
   22fc0:	18fb      	adds	r3, r7, r3
   22fc2:	781b      	ldrb	r3, [r3, #0]
   22fc4:	b25b      	sxtb	r3, r3
   22fc6:	2b00      	cmp	r3, #0
   22fc8:	d1e1      	bne.n	22f8e <chip_apply_conf+0x1e>
				if(reg == val32)
   22fca:	68fa      	ldr	r2, [r7, #12]
   22fcc:	693b      	ldr	r3, [r7, #16]
   22fce:	429a      	cmp	r2, r3
   22fd0:	d002      	beq.n	22fd8 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   22fd2:	e7dc      	b.n	22f8e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   22fd4:	46c0      	nop			; (mov r8, r8)
   22fd6:	e000      	b.n	22fda <chip_apply_conf+0x6a>
					break;
   22fd8:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   22fda:	2300      	movs	r3, #0
}
   22fdc:	0018      	movs	r0, r3
   22fde:	46bd      	mov	sp, r7
   22fe0:	b007      	add	sp, #28
   22fe2:	bd90      	pop	{r4, r7, pc}
   22fe4:	000237c5 	.word	0x000237c5
   22fe8:	000237a1 	.word	0x000237a1

00022fec <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   22fec:	b590      	push	{r4, r7, lr}
   22fee:	b083      	sub	sp, #12
   22ff0:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   22ff2:	2300      	movs	r3, #0
   22ff4:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   22ff6:	1dfb      	adds	r3, r7, #7
   22ff8:	2200      	movs	r2, #0
   22ffa:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   22ffc:	1dfc      	adds	r4, r7, #7
   22ffe:	003b      	movs	r3, r7
   23000:	4a24      	ldr	r2, [pc, #144]	; (23094 <enable_interrupts+0xa8>)
   23002:	0019      	movs	r1, r3
   23004:	0010      	movs	r0, r2
   23006:	4b24      	ldr	r3, [pc, #144]	; (23098 <enable_interrupts+0xac>)
   23008:	4798      	blx	r3
   2300a:	0003      	movs	r3, r0
   2300c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2300e:	1dfb      	adds	r3, r7, #7
   23010:	781b      	ldrb	r3, [r3, #0]
   23012:	b25b      	sxtb	r3, r3
   23014:	2b00      	cmp	r3, #0
   23016:	d131      	bne.n	2307c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   23018:	683b      	ldr	r3, [r7, #0]
   2301a:	2280      	movs	r2, #128	; 0x80
   2301c:	0052      	lsls	r2, r2, #1
   2301e:	4313      	orrs	r3, r2
   23020:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   23022:	683b      	ldr	r3, [r7, #0]
   23024:	1dfc      	adds	r4, r7, #7
   23026:	4a1b      	ldr	r2, [pc, #108]	; (23094 <enable_interrupts+0xa8>)
   23028:	0019      	movs	r1, r3
   2302a:	0010      	movs	r0, r2
   2302c:	4b1b      	ldr	r3, [pc, #108]	; (2309c <enable_interrupts+0xb0>)
   2302e:	4798      	blx	r3
   23030:	0003      	movs	r3, r0
   23032:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   23034:	1dfb      	adds	r3, r7, #7
   23036:	781b      	ldrb	r3, [r3, #0]
   23038:	b25b      	sxtb	r3, r3
   2303a:	2b00      	cmp	r3, #0
   2303c:	d120      	bne.n	23080 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   2303e:	1dfc      	adds	r4, r7, #7
   23040:	003a      	movs	r2, r7
   23042:	23d0      	movs	r3, #208	; 0xd0
   23044:	015b      	lsls	r3, r3, #5
   23046:	0011      	movs	r1, r2
   23048:	0018      	movs	r0, r3
   2304a:	4b13      	ldr	r3, [pc, #76]	; (23098 <enable_interrupts+0xac>)
   2304c:	4798      	blx	r3
   2304e:	0003      	movs	r3, r0
   23050:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   23052:	1dfb      	adds	r3, r7, #7
   23054:	781b      	ldrb	r3, [r3, #0]
   23056:	b25b      	sxtb	r3, r3
   23058:	2b00      	cmp	r3, #0
   2305a:	d113      	bne.n	23084 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   2305c:	683b      	ldr	r3, [r7, #0]
   2305e:	2280      	movs	r2, #128	; 0x80
   23060:	0252      	lsls	r2, r2, #9
   23062:	4313      	orrs	r3, r2
   23064:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   23066:	683a      	ldr	r2, [r7, #0]
   23068:	1dfc      	adds	r4, r7, #7
   2306a:	23d0      	movs	r3, #208	; 0xd0
   2306c:	015b      	lsls	r3, r3, #5
   2306e:	0011      	movs	r1, r2
   23070:	0018      	movs	r0, r3
   23072:	4b0a      	ldr	r3, [pc, #40]	; (2309c <enable_interrupts+0xb0>)
   23074:	4798      	blx	r3
   23076:	0003      	movs	r3, r0
   23078:	7023      	strb	r3, [r4, #0]
   2307a:	e004      	b.n	23086 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2307c:	46c0      	nop			; (mov r8, r8)
   2307e:	e002      	b.n	23086 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23080:	46c0      	nop			; (mov r8, r8)
   23082:	e000      	b.n	23086 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23084:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   23086:	1dfb      	adds	r3, r7, #7
   23088:	781b      	ldrb	r3, [r3, #0]
   2308a:	b25b      	sxtb	r3, r3
}
   2308c:	0018      	movs	r0, r3
   2308e:	46bd      	mov	sp, r7
   23090:	b003      	add	sp, #12
   23092:	bd90      	pop	{r4, r7, pc}
   23094:	00001408 	.word	0x00001408
   23098:	000237a1 	.word	0x000237a1
   2309c:	000237c5 	.word	0x000237c5

000230a0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   230a0:	b580      	push	{r7, lr}
   230a2:	b082      	sub	sp, #8
   230a4:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   230a6:	4b32      	ldr	r3, [pc, #200]	; (23170 <nmi_get_chipid+0xd0>)
   230a8:	681b      	ldr	r3, [r3, #0]
   230aa:	2b00      	cmp	r3, #0
   230ac:	d159      	bne.n	23162 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   230ae:	4a30      	ldr	r2, [pc, #192]	; (23170 <nmi_get_chipid+0xd0>)
   230b0:	2380      	movs	r3, #128	; 0x80
   230b2:	015b      	lsls	r3, r3, #5
   230b4:	0011      	movs	r1, r2
   230b6:	0018      	movs	r0, r3
   230b8:	4b2e      	ldr	r3, [pc, #184]	; (23174 <nmi_get_chipid+0xd4>)
   230ba:	4798      	blx	r3
   230bc:	1e03      	subs	r3, r0, #0
   230be:	d004      	beq.n	230ca <nmi_get_chipid+0x2a>
			chipid = 0;
   230c0:	4b2b      	ldr	r3, [pc, #172]	; (23170 <nmi_get_chipid+0xd0>)
   230c2:	2200      	movs	r2, #0
   230c4:	601a      	str	r2, [r3, #0]
			return 0;
   230c6:	2300      	movs	r3, #0
   230c8:	e04d      	b.n	23166 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   230ca:	1d3b      	adds	r3, r7, #4
   230cc:	4a2a      	ldr	r2, [pc, #168]	; (23178 <nmi_get_chipid+0xd8>)
   230ce:	0019      	movs	r1, r3
   230d0:	0010      	movs	r0, r2
   230d2:	4b28      	ldr	r3, [pc, #160]	; (23174 <nmi_get_chipid+0xd4>)
   230d4:	4798      	blx	r3
   230d6:	1e03      	subs	r3, r0, #0
   230d8:	d004      	beq.n	230e4 <nmi_get_chipid+0x44>
			chipid = 0;
   230da:	4b25      	ldr	r3, [pc, #148]	; (23170 <nmi_get_chipid+0xd0>)
   230dc:	2200      	movs	r2, #0
   230de:	601a      	str	r2, [r3, #0]
			return 0;
   230e0:	2300      	movs	r3, #0
   230e2:	e040      	b.n	23166 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   230e4:	4b22      	ldr	r3, [pc, #136]	; (23170 <nmi_get_chipid+0xd0>)
   230e6:	681b      	ldr	r3, [r3, #0]
   230e8:	4a24      	ldr	r2, [pc, #144]	; (2317c <nmi_get_chipid+0xdc>)
   230ea:	4293      	cmp	r3, r2
   230ec:	d106      	bne.n	230fc <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   230ee:	687b      	ldr	r3, [r7, #4]
   230f0:	2b01      	cmp	r3, #1
   230f2:	d029      	beq.n	23148 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   230f4:	4b1e      	ldr	r3, [pc, #120]	; (23170 <nmi_get_chipid+0xd0>)
   230f6:	4a22      	ldr	r2, [pc, #136]	; (23180 <nmi_get_chipid+0xe0>)
   230f8:	601a      	str	r2, [r3, #0]
   230fa:	e025      	b.n	23148 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   230fc:	4b1c      	ldr	r3, [pc, #112]	; (23170 <nmi_get_chipid+0xd0>)
   230fe:	681b      	ldr	r3, [r3, #0]
   23100:	4a20      	ldr	r2, [pc, #128]	; (23184 <nmi_get_chipid+0xe4>)
   23102:	4293      	cmp	r3, r2
   23104:	d10d      	bne.n	23122 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   23106:	687b      	ldr	r3, [r7, #4]
   23108:	2b03      	cmp	r3, #3
   2310a:	d01d      	beq.n	23148 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   2310c:	687b      	ldr	r3, [r7, #4]
   2310e:	2b04      	cmp	r3, #4
   23110:	d103      	bne.n	2311a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   23112:	4b17      	ldr	r3, [pc, #92]	; (23170 <nmi_get_chipid+0xd0>)
   23114:	4a1c      	ldr	r2, [pc, #112]	; (23188 <nmi_get_chipid+0xe8>)
   23116:	601a      	str	r2, [r3, #0]
   23118:	e016      	b.n	23148 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2311a:	4b15      	ldr	r3, [pc, #84]	; (23170 <nmi_get_chipid+0xd0>)
   2311c:	4a1b      	ldr	r2, [pc, #108]	; (2318c <nmi_get_chipid+0xec>)
   2311e:	601a      	str	r2, [r3, #0]
   23120:	e012      	b.n	23148 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   23122:	4b13      	ldr	r3, [pc, #76]	; (23170 <nmi_get_chipid+0xd0>)
   23124:	681b      	ldr	r3, [r3, #0]
   23126:	4a1a      	ldr	r2, [pc, #104]	; (23190 <nmi_get_chipid+0xf0>)
   23128:	4293      	cmp	r3, r2
   2312a:	d10d      	bne.n	23148 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   2312c:	4a10      	ldr	r2, [pc, #64]	; (23170 <nmi_get_chipid+0xd0>)
   2312e:	23ec      	movs	r3, #236	; 0xec
   23130:	039b      	lsls	r3, r3, #14
   23132:	0011      	movs	r1, r2
   23134:	0018      	movs	r0, r3
   23136:	4b0f      	ldr	r3, [pc, #60]	; (23174 <nmi_get_chipid+0xd4>)
   23138:	4798      	blx	r3
   2313a:	1e03      	subs	r3, r0, #0
   2313c:	d004      	beq.n	23148 <nmi_get_chipid+0xa8>
			chipid = 0;
   2313e:	4b0c      	ldr	r3, [pc, #48]	; (23170 <nmi_get_chipid+0xd0>)
   23140:	2200      	movs	r2, #0
   23142:	601a      	str	r2, [r3, #0]
			return 0;
   23144:	2300      	movs	r3, #0
   23146:	e00e      	b.n	23166 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   23148:	4b09      	ldr	r3, [pc, #36]	; (23170 <nmi_get_chipid+0xd0>)
   2314a:	681b      	ldr	r3, [r3, #0]
   2314c:	4a11      	ldr	r2, [pc, #68]	; (23194 <nmi_get_chipid+0xf4>)
   2314e:	401a      	ands	r2, r3
   23150:	4b07      	ldr	r3, [pc, #28]	; (23170 <nmi_get_chipid+0xd0>)
   23152:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   23154:	4b06      	ldr	r3, [pc, #24]	; (23170 <nmi_get_chipid+0xd0>)
   23156:	681b      	ldr	r3, [r3, #0]
   23158:	22a0      	movs	r2, #160	; 0xa0
   2315a:	02d2      	lsls	r2, r2, #11
   2315c:	431a      	orrs	r2, r3
   2315e:	4b04      	ldr	r3, [pc, #16]	; (23170 <nmi_get_chipid+0xd0>)
   23160:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   23162:	4b03      	ldr	r3, [pc, #12]	; (23170 <nmi_get_chipid+0xd0>)
   23164:	681b      	ldr	r3, [r3, #0]
}
   23166:	0018      	movs	r0, r3
   23168:	46bd      	mov	sp, r7
   2316a:	b002      	add	sp, #8
   2316c:	bd80      	pop	{r7, pc}
   2316e:	46c0      	nop			; (mov r8, r8)
   23170:	200042ac 	.word	0x200042ac
   23174:	000237a1 	.word	0x000237a1
   23178:	000013f4 	.word	0x000013f4
   2317c:	001002a0 	.word	0x001002a0
   23180:	001002a1 	.word	0x001002a1
   23184:	001002b0 	.word	0x001002b0
   23188:	001002b1 	.word	0x001002b1
   2318c:	001002b2 	.word	0x001002b2
   23190:	001000f0 	.word	0x001000f0
   23194:	fff0ffff 	.word	0xfff0ffff

00023198 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   23198:	b590      	push	{r4, r7, lr}
   2319a:	b083      	sub	sp, #12
   2319c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2319e:	1dfb      	adds	r3, r7, #7
   231a0:	2200      	movs	r2, #0
   231a2:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   231a4:	1dfc      	adds	r4, r7, #7
   231a6:	003b      	movs	r3, r7
   231a8:	0019      	movs	r1, r3
   231aa:	2010      	movs	r0, #16
   231ac:	4b2e      	ldr	r3, [pc, #184]	; (23268 <chip_sleep+0xd0>)
   231ae:	4798      	blx	r3
   231b0:	0003      	movs	r3, r0
   231b2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   231b4:	1dfb      	adds	r3, r7, #7
   231b6:	781b      	ldrb	r3, [r3, #0]
   231b8:	b25b      	sxtb	r3, r3
   231ba:	2b00      	cmp	r3, #0
   231bc:	d145      	bne.n	2324a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   231be:	683b      	ldr	r3, [r7, #0]
   231c0:	2201      	movs	r2, #1
   231c2:	4013      	ands	r3, r2
   231c4:	d000      	beq.n	231c8 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   231c6:	e7ed      	b.n	231a4 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   231c8:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   231ca:	1dfc      	adds	r4, r7, #7
   231cc:	003b      	movs	r3, r7
   231ce:	0019      	movs	r1, r3
   231d0:	2001      	movs	r0, #1
   231d2:	4b25      	ldr	r3, [pc, #148]	; (23268 <chip_sleep+0xd0>)
   231d4:	4798      	blx	r3
   231d6:	0003      	movs	r3, r0
   231d8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   231da:	1dfb      	adds	r3, r7, #7
   231dc:	781b      	ldrb	r3, [r3, #0]
   231de:	b25b      	sxtb	r3, r3
   231e0:	2b00      	cmp	r3, #0
   231e2:	d134      	bne.n	2324e <chip_sleep+0xb6>
	if(reg & NBIT1)
   231e4:	683b      	ldr	r3, [r7, #0]
   231e6:	2202      	movs	r2, #2
   231e8:	4013      	ands	r3, r2
   231ea:	d010      	beq.n	2320e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   231ec:	683b      	ldr	r3, [r7, #0]
   231ee:	2202      	movs	r2, #2
   231f0:	4393      	bics	r3, r2
   231f2:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   231f4:	683b      	ldr	r3, [r7, #0]
   231f6:	1dfc      	adds	r4, r7, #7
   231f8:	0019      	movs	r1, r3
   231fa:	2001      	movs	r0, #1
   231fc:	4b1b      	ldr	r3, [pc, #108]	; (2326c <chip_sleep+0xd4>)
   231fe:	4798      	blx	r3
   23200:	0003      	movs	r3, r0
   23202:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   23204:	1dfb      	adds	r3, r7, #7
   23206:	781b      	ldrb	r3, [r3, #0]
   23208:	b25b      	sxtb	r3, r3
   2320a:	2b00      	cmp	r3, #0
   2320c:	d121      	bne.n	23252 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2320e:	1dfc      	adds	r4, r7, #7
   23210:	003b      	movs	r3, r7
   23212:	0019      	movs	r1, r3
   23214:	200b      	movs	r0, #11
   23216:	4b14      	ldr	r3, [pc, #80]	; (23268 <chip_sleep+0xd0>)
   23218:	4798      	blx	r3
   2321a:	0003      	movs	r3, r0
   2321c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2321e:	1dfb      	adds	r3, r7, #7
   23220:	781b      	ldrb	r3, [r3, #0]
   23222:	b25b      	sxtb	r3, r3
   23224:	2b00      	cmp	r3, #0
   23226:	d116      	bne.n	23256 <chip_sleep+0xbe>
	if(reg & NBIT0)
   23228:	683b      	ldr	r3, [r7, #0]
   2322a:	2201      	movs	r2, #1
   2322c:	4013      	ands	r3, r2
   2322e:	d013      	beq.n	23258 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   23230:	683b      	ldr	r3, [r7, #0]
   23232:	2201      	movs	r2, #1
   23234:	4393      	bics	r3, r2
   23236:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   23238:	683b      	ldr	r3, [r7, #0]
   2323a:	1dfc      	adds	r4, r7, #7
   2323c:	0019      	movs	r1, r3
   2323e:	200b      	movs	r0, #11
   23240:	4b0a      	ldr	r3, [pc, #40]	; (2326c <chip_sleep+0xd4>)
   23242:	4798      	blx	r3
   23244:	0003      	movs	r3, r0
   23246:	7023      	strb	r3, [r4, #0]
   23248:	e006      	b.n	23258 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   2324a:	46c0      	nop			; (mov r8, r8)
   2324c:	e004      	b.n	23258 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2324e:	46c0      	nop			; (mov r8, r8)
   23250:	e002      	b.n	23258 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   23252:	46c0      	nop			; (mov r8, r8)
   23254:	e000      	b.n	23258 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   23256:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   23258:	1dfb      	adds	r3, r7, #7
   2325a:	781b      	ldrb	r3, [r3, #0]
   2325c:	b25b      	sxtb	r3, r3
}
   2325e:	0018      	movs	r0, r3
   23260:	46bd      	mov	sp, r7
   23262:	b003      	add	sp, #12
   23264:	bd90      	pop	{r4, r7, pc}
   23266:	46c0      	nop			; (mov r8, r8)
   23268:	000237a1 	.word	0x000237a1
   2326c:	000237c5 	.word	0x000237c5

00023270 <chip_wake>:
sint8 chip_wake(void)
{
   23270:	b590      	push	{r4, r7, lr}
   23272:	b085      	sub	sp, #20
   23274:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23276:	230f      	movs	r3, #15
   23278:	18fb      	adds	r3, r7, r3
   2327a:	2200      	movs	r2, #0
   2327c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   2327e:	2300      	movs	r3, #0
   23280:	607b      	str	r3, [r7, #4]
   23282:	2300      	movs	r3, #0
   23284:	603b      	str	r3, [r7, #0]
   23286:	2300      	movs	r3, #0
   23288:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2328a:	230f      	movs	r3, #15
   2328c:	18fc      	adds	r4, r7, r3
   2328e:	1d3b      	adds	r3, r7, #4
   23290:	0019      	movs	r1, r3
   23292:	200b      	movs	r0, #11
   23294:	4b4e      	ldr	r3, [pc, #312]	; (233d0 <chip_wake+0x160>)
   23296:	4798      	blx	r3
   23298:	0003      	movs	r3, r0
   2329a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2329c:	230f      	movs	r3, #15
   2329e:	18fb      	adds	r3, r7, r3
   232a0:	781b      	ldrb	r3, [r3, #0]
   232a2:	b25b      	sxtb	r3, r3
   232a4:	2b00      	cmp	r3, #0
   232a6:	d000      	beq.n	232aa <chip_wake+0x3a>
   232a8:	e082      	b.n	233b0 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   232aa:	687b      	ldr	r3, [r7, #4]
   232ac:	2201      	movs	r2, #1
   232ae:	4013      	ands	r3, r2
   232b0:	d111      	bne.n	232d6 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   232b2:	687b      	ldr	r3, [r7, #4]
   232b4:	2201      	movs	r2, #1
   232b6:	4313      	orrs	r3, r2
   232b8:	220f      	movs	r2, #15
   232ba:	18bc      	adds	r4, r7, r2
   232bc:	0019      	movs	r1, r3
   232be:	200b      	movs	r0, #11
   232c0:	4b44      	ldr	r3, [pc, #272]	; (233d4 <chip_wake+0x164>)
   232c2:	4798      	blx	r3
   232c4:	0003      	movs	r3, r0
   232c6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   232c8:	230f      	movs	r3, #15
   232ca:	18fb      	adds	r3, r7, r3
   232cc:	781b      	ldrb	r3, [r3, #0]
   232ce:	b25b      	sxtb	r3, r3
   232d0:	2b00      	cmp	r3, #0
   232d2:	d000      	beq.n	232d6 <chip_wake+0x66>
   232d4:	e06e      	b.n	233b4 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   232d6:	230f      	movs	r3, #15
   232d8:	18fc      	adds	r4, r7, r3
   232da:	1d3b      	adds	r3, r7, #4
   232dc:	0019      	movs	r1, r3
   232de:	2001      	movs	r0, #1
   232e0:	4b3b      	ldr	r3, [pc, #236]	; (233d0 <chip_wake+0x160>)
   232e2:	4798      	blx	r3
   232e4:	0003      	movs	r3, r0
   232e6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   232e8:	230f      	movs	r3, #15
   232ea:	18fb      	adds	r3, r7, r3
   232ec:	781b      	ldrb	r3, [r3, #0]
   232ee:	b25b      	sxtb	r3, r3
   232f0:	2b00      	cmp	r3, #0
   232f2:	d161      	bne.n	233b8 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   232f4:	687b      	ldr	r3, [r7, #4]
   232f6:	2202      	movs	r2, #2
   232f8:	4013      	ands	r3, r2
   232fa:	d110      	bne.n	2331e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   232fc:	687b      	ldr	r3, [r7, #4]
   232fe:	2202      	movs	r2, #2
   23300:	4313      	orrs	r3, r2
   23302:	220f      	movs	r2, #15
   23304:	18bc      	adds	r4, r7, r2
   23306:	0019      	movs	r1, r3
   23308:	2001      	movs	r0, #1
   2330a:	4b32      	ldr	r3, [pc, #200]	; (233d4 <chip_wake+0x164>)
   2330c:	4798      	blx	r3
   2330e:	0003      	movs	r3, r0
   23310:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   23312:	230f      	movs	r3, #15
   23314:	18fb      	adds	r3, r7, r3
   23316:	781b      	ldrb	r3, [r3, #0]
   23318:	b25b      	sxtb	r3, r3
   2331a:	2b00      	cmp	r3, #0
   2331c:	d14e      	bne.n	233bc <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2331e:	230f      	movs	r3, #15
   23320:	18fc      	adds	r4, r7, r3
   23322:	003b      	movs	r3, r7
   23324:	0019      	movs	r1, r3
   23326:	200f      	movs	r0, #15
   23328:	4b29      	ldr	r3, [pc, #164]	; (233d0 <chip_wake+0x160>)
   2332a:	4798      	blx	r3
   2332c:	0003      	movs	r3, r0
   2332e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   23330:	230f      	movs	r3, #15
   23332:	18fb      	adds	r3, r7, r3
   23334:	781b      	ldrb	r3, [r3, #0]
   23336:	b25b      	sxtb	r3, r3
   23338:	2b00      	cmp	r3, #0
   2333a:	d014      	beq.n	23366 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   2333c:	23a8      	movs	r3, #168	; 0xa8
   2333e:	005a      	lsls	r2, r3, #1
   23340:	4925      	ldr	r1, [pc, #148]	; (233d8 <chip_wake+0x168>)
   23342:	4b26      	ldr	r3, [pc, #152]	; (233dc <chip_wake+0x16c>)
   23344:	0018      	movs	r0, r3
   23346:	4b26      	ldr	r3, [pc, #152]	; (233e0 <chip_wake+0x170>)
   23348:	4798      	blx	r3
   2334a:	230f      	movs	r3, #15
   2334c:	18fb      	adds	r3, r7, r3
   2334e:	2100      	movs	r1, #0
   23350:	5659      	ldrsb	r1, [r3, r1]
   23352:	683a      	ldr	r2, [r7, #0]
   23354:	4b23      	ldr	r3, [pc, #140]	; (233e4 <chip_wake+0x174>)
   23356:	0018      	movs	r0, r3
   23358:	4b21      	ldr	r3, [pc, #132]	; (233e0 <chip_wake+0x170>)
   2335a:	4798      	blx	r3
   2335c:	4b22      	ldr	r3, [pc, #136]	; (233e8 <chip_wake+0x178>)
   2335e:	0018      	movs	r0, r3
   23360:	4b1f      	ldr	r3, [pc, #124]	; (233e0 <chip_wake+0x170>)
   23362:	4798      	blx	r3
			goto _WAKE_EXIT;
   23364:	e02b      	b.n	233be <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   23366:	683b      	ldr	r3, [r7, #0]
   23368:	2204      	movs	r2, #4
   2336a:	4013      	ands	r3, r2
   2336c:	d11c      	bne.n	233a8 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   2336e:	2002      	movs	r0, #2
   23370:	4b1e      	ldr	r3, [pc, #120]	; (233ec <chip_wake+0x17c>)
   23372:	4798      	blx	r3
		trials++;
   23374:	68bb      	ldr	r3, [r7, #8]
   23376:	3301      	adds	r3, #1
   23378:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2337a:	68bb      	ldr	r3, [r7, #8]
   2337c:	2b04      	cmp	r3, #4
   2337e:	d9ce      	bls.n	2331e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   23380:	23ad      	movs	r3, #173	; 0xad
   23382:	005a      	lsls	r2, r3, #1
   23384:	4914      	ldr	r1, [pc, #80]	; (233d8 <chip_wake+0x168>)
   23386:	4b15      	ldr	r3, [pc, #84]	; (233dc <chip_wake+0x16c>)
   23388:	0018      	movs	r0, r3
   2338a:	4b15      	ldr	r3, [pc, #84]	; (233e0 <chip_wake+0x170>)
   2338c:	4798      	blx	r3
   2338e:	4b18      	ldr	r3, [pc, #96]	; (233f0 <chip_wake+0x180>)
   23390:	0018      	movs	r0, r3
   23392:	4b13      	ldr	r3, [pc, #76]	; (233e0 <chip_wake+0x170>)
   23394:	4798      	blx	r3
   23396:	4b14      	ldr	r3, [pc, #80]	; (233e8 <chip_wake+0x178>)
   23398:	0018      	movs	r0, r3
   2339a:	4b11      	ldr	r3, [pc, #68]	; (233e0 <chip_wake+0x170>)
   2339c:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   2339e:	230f      	movs	r3, #15
   233a0:	18fb      	adds	r3, r7, r3
   233a2:	22fc      	movs	r2, #252	; 0xfc
   233a4:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   233a6:	e00a      	b.n	233be <chip_wake+0x14e>
			break;
   233a8:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   233aa:	4b12      	ldr	r3, [pc, #72]	; (233f4 <chip_wake+0x184>)
   233ac:	4798      	blx	r3
   233ae:	e006      	b.n	233be <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   233b0:	46c0      	nop			; (mov r8, r8)
   233b2:	e004      	b.n	233be <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   233b4:	46c0      	nop			; (mov r8, r8)
   233b6:	e002      	b.n	233be <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   233b8:	46c0      	nop			; (mov r8, r8)
   233ba:	e000      	b.n	233be <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   233bc:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   233be:	230f      	movs	r3, #15
   233c0:	18fb      	adds	r3, r7, r3
   233c2:	781b      	ldrb	r3, [r3, #0]
   233c4:	b25b      	sxtb	r3, r3
}
   233c6:	0018      	movs	r0, r3
   233c8:	46bd      	mov	sp, r7
   233ca:	b005      	add	sp, #20
   233cc:	bd90      	pop	{r4, r7, pc}
   233ce:	46c0      	nop			; (mov r8, r8)
   233d0:	000237a1 	.word	0x000237a1
   233d4:	000237c5 	.word	0x000237c5
   233d8:	00039b04 	.word	0x00039b04
   233dc:	00039a78 	.word	0x00039a78
   233e0:	0001e979 	.word	0x0001e979
   233e4:	00039a8c 	.word	0x00039a8c
   233e8:	00039aa4 	.word	0x00039aa4
   233ec:	00020e31 	.word	0x00020e31
   233f0:	00039aa8 	.word	0x00039aa8
   233f4:	00023761 	.word	0x00023761

000233f8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   233f8:	b580      	push	{r7, lr}
   233fa:	b088      	sub	sp, #32
   233fc:	af00      	add	r7, sp, #0
   233fe:	0002      	movs	r2, r0
   23400:	1dfb      	adds	r3, r7, #7
   23402:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23404:	2313      	movs	r3, #19
   23406:	18fb      	adds	r3, r7, r3
   23408:	2200      	movs	r2, #0
   2340a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   2340c:	2300      	movs	r3, #0
   2340e:	61fb      	str	r3, [r7, #28]
   23410:	2300      	movs	r3, #0
   23412:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   23414:	2300      	movs	r3, #0
   23416:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   23418:	4b4a      	ldr	r3, [pc, #296]	; (23544 <wait_for_bootrom+0x14c>)
   2341a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   2341c:	2300      	movs	r3, #0
   2341e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   23420:	4b49      	ldr	r3, [pc, #292]	; (23548 <wait_for_bootrom+0x150>)
   23422:	0018      	movs	r0, r3
   23424:	4b49      	ldr	r3, [pc, #292]	; (2354c <wait_for_bootrom+0x154>)
   23426:	4798      	blx	r3
   23428:	0003      	movs	r3, r0
   2342a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   2342c:	69fb      	ldr	r3, [r7, #28]
   2342e:	2b00      	cmp	r3, #0
   23430:	db03      	blt.n	2343a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   23432:	2001      	movs	r0, #1
   23434:	4b46      	ldr	r3, [pc, #280]	; (23550 <wait_for_bootrom+0x158>)
   23436:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   23438:	e7f2      	b.n	23420 <wait_for_bootrom+0x28>
			break;
   2343a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   2343c:	4b45      	ldr	r3, [pc, #276]	; (23554 <wait_for_bootrom+0x15c>)
   2343e:	0018      	movs	r0, r3
   23440:	4b42      	ldr	r3, [pc, #264]	; (2354c <wait_for_bootrom+0x154>)
   23442:	4798      	blx	r3
   23444:	0003      	movs	r3, r0
   23446:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   23448:	69fb      	ldr	r3, [r7, #28]
   2344a:	2201      	movs	r2, #1
   2344c:	4013      	ands	r3, r2
   2344e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   23450:	69fb      	ldr	r3, [r7, #28]
   23452:	2b00      	cmp	r3, #0
   23454:	d112      	bne.n	2347c <wait_for_bootrom+0x84>
	{
		reg = 0;
   23456:	2300      	movs	r3, #0
   23458:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   2345a:	e00b      	b.n	23474 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   2345c:	2001      	movs	r0, #1
   2345e:	4b3c      	ldr	r3, [pc, #240]	; (23550 <wait_for_bootrom+0x158>)
   23460:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   23462:	4b3d      	ldr	r3, [pc, #244]	; (23558 <wait_for_bootrom+0x160>)
   23464:	0018      	movs	r0, r3
   23466:	4b39      	ldr	r3, [pc, #228]	; (2354c <wait_for_bootrom+0x154>)
   23468:	4798      	blx	r3
   2346a:	0003      	movs	r3, r0
   2346c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   2346e:	69bb      	ldr	r3, [r7, #24]
   23470:	3301      	adds	r3, #1
   23472:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   23474:	69fb      	ldr	r3, [r7, #28]
   23476:	4a39      	ldr	r2, [pc, #228]	; (2355c <wait_for_bootrom+0x164>)
   23478:	4293      	cmp	r3, r2
   2347a:	d1ef      	bne.n	2345c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   2347c:	1dfb      	adds	r3, r7, #7
   2347e:	781b      	ldrb	r3, [r3, #0]
   23480:	2b02      	cmp	r3, #2
   23482:	d10d      	bne.n	234a0 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   23484:	4a36      	ldr	r2, [pc, #216]	; (23560 <wait_for_bootrom+0x168>)
   23486:	4b37      	ldr	r3, [pc, #220]	; (23564 <wait_for_bootrom+0x16c>)
   23488:	0011      	movs	r1, r2
   2348a:	0018      	movs	r0, r3
   2348c:	4b36      	ldr	r3, [pc, #216]	; (23568 <wait_for_bootrom+0x170>)
   2348e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   23490:	2380      	movs	r3, #128	; 0x80
   23492:	035b      	lsls	r3, r3, #13
   23494:	4a35      	ldr	r2, [pc, #212]	; (2356c <wait_for_bootrom+0x174>)
   23496:	0019      	movs	r1, r3
   23498:	0010      	movs	r0, r2
   2349a:	4b33      	ldr	r3, [pc, #204]	; (23568 <wait_for_bootrom+0x170>)
   2349c:	4798      	blx	r3
   2349e:	e022      	b.n	234e6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   234a0:	1dfb      	adds	r3, r7, #7
   234a2:	781b      	ldrb	r3, [r3, #0]
   234a4:	2b03      	cmp	r3, #3
   234a6:	d10b      	bne.n	234c0 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   234a8:	4a2d      	ldr	r2, [pc, #180]	; (23560 <wait_for_bootrom+0x168>)
   234aa:	4b2e      	ldr	r3, [pc, #184]	; (23564 <wait_for_bootrom+0x16c>)
   234ac:	0011      	movs	r1, r2
   234ae:	0018      	movs	r0, r3
   234b0:	4b2d      	ldr	r3, [pc, #180]	; (23568 <wait_for_bootrom+0x170>)
   234b2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   234b4:	4b2d      	ldr	r3, [pc, #180]	; (2356c <wait_for_bootrom+0x174>)
   234b6:	2100      	movs	r1, #0
   234b8:	0018      	movs	r0, r3
   234ba:	4b2b      	ldr	r3, [pc, #172]	; (23568 <wait_for_bootrom+0x170>)
   234bc:	4798      	blx	r3
   234be:	e012      	b.n	234e6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   234c0:	1dfb      	adds	r3, r7, #7
   234c2:	781b      	ldrb	r3, [r3, #0]
   234c4:	2b04      	cmp	r3, #4
   234c6:	d108      	bne.n	234da <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   234c8:	2380      	movs	r3, #128	; 0x80
   234ca:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   234cc:	68fb      	ldr	r3, [r7, #12]
   234ce:	4a27      	ldr	r2, [pc, #156]	; (2356c <wait_for_bootrom+0x174>)
   234d0:	0019      	movs	r1, r3
   234d2:	0010      	movs	r0, r2
   234d4:	4b24      	ldr	r3, [pc, #144]	; (23568 <wait_for_bootrom+0x170>)
   234d6:	4798      	blx	r3
   234d8:	e005      	b.n	234e6 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   234da:	68fb      	ldr	r3, [r7, #12]
   234dc:	4a23      	ldr	r2, [pc, #140]	; (2356c <wait_for_bootrom+0x174>)
   234de:	0019      	movs	r1, r3
   234e0:	0010      	movs	r0, r2
   234e2:	4b21      	ldr	r3, [pc, #132]	; (23568 <wait_for_bootrom+0x170>)
   234e4:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   234e6:	4b22      	ldr	r3, [pc, #136]	; (23570 <wait_for_bootrom+0x178>)
   234e8:	4798      	blx	r3
   234ea:	0003      	movs	r3, r0
   234ec:	051b      	lsls	r3, r3, #20
   234ee:	0d1b      	lsrs	r3, r3, #20
   234f0:	4a20      	ldr	r2, [pc, #128]	; (23574 <wait_for_bootrom+0x17c>)
   234f2:	4293      	cmp	r3, r2
   234f4:	d906      	bls.n	23504 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   234f6:	697b      	ldr	r3, [r7, #20]
   234f8:	2202      	movs	r2, #2
   234fa:	4313      	orrs	r3, r2
   234fc:	0018      	movs	r0, r3
   234fe:	4b1e      	ldr	r3, [pc, #120]	; (23578 <wait_for_bootrom+0x180>)
   23500:	4798      	blx	r3
   23502:	e003      	b.n	2350c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   23504:	697b      	ldr	r3, [r7, #20]
   23506:	0018      	movs	r0, r3
   23508:	4b1b      	ldr	r3, [pc, #108]	; (23578 <wait_for_bootrom+0x180>)
   2350a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   2350c:	4b1b      	ldr	r3, [pc, #108]	; (2357c <wait_for_bootrom+0x184>)
   2350e:	0018      	movs	r0, r3
   23510:	4b1b      	ldr	r3, [pc, #108]	; (23580 <wait_for_bootrom+0x188>)
   23512:	4798      	blx	r3
   23514:	68fa      	ldr	r2, [r7, #12]
   23516:	4b1b      	ldr	r3, [pc, #108]	; (23584 <wait_for_bootrom+0x18c>)
   23518:	0011      	movs	r1, r2
   2351a:	0018      	movs	r0, r3
   2351c:	4b18      	ldr	r3, [pc, #96]	; (23580 <wait_for_bootrom+0x188>)
   2351e:	4798      	blx	r3
   23520:	4b19      	ldr	r3, [pc, #100]	; (23588 <wait_for_bootrom+0x190>)
   23522:	0018      	movs	r0, r3
   23524:	4b16      	ldr	r3, [pc, #88]	; (23580 <wait_for_bootrom+0x188>)
   23526:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   23528:	4a18      	ldr	r2, [pc, #96]	; (2358c <wait_for_bootrom+0x194>)
   2352a:	4b0b      	ldr	r3, [pc, #44]	; (23558 <wait_for_bootrom+0x160>)
   2352c:	0011      	movs	r1, r2
   2352e:	0018      	movs	r0, r3
   23530:	4b0d      	ldr	r3, [pc, #52]	; (23568 <wait_for_bootrom+0x170>)
   23532:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   23534:	2313      	movs	r3, #19
   23536:	18fb      	adds	r3, r7, r3
   23538:	781b      	ldrb	r3, [r3, #0]
   2353a:	b25b      	sxtb	r3, r3
}
   2353c:	0018      	movs	r0, r3
   2353e:	46bd      	mov	sp, r7
   23540:	b008      	add	sp, #32
   23542:	bd80      	pop	{r7, pc}
   23544:	13301354 	.word	0x13301354
   23548:	00001014 	.word	0x00001014
   2354c:	00023781 	.word	0x00023781
   23550:	00020e31 	.word	0x00020e31
   23554:	000207bc 	.word	0x000207bc
   23558:	000c000c 	.word	0x000c000c
   2355c:	10add09e 	.word	0x10add09e
   23560:	3c1cd57d 	.word	0x3c1cd57d
   23564:	000207ac 	.word	0x000207ac
   23568:	000237c5 	.word	0x000237c5
   2356c:	0000108c 	.word	0x0000108c
   23570:	000230a1 	.word	0x000230a1
   23574:	0000039f 	.word	0x0000039f
   23578:	00022f71 	.word	0x00022f71
   2357c:	00039ac4 	.word	0x00039ac4
   23580:	0001e979 	.word	0x0001e979
   23584:	00039ad0 	.word	0x00039ad0
   23588:	00039aa4 	.word	0x00039aa4
   2358c:	ef522f61 	.word	0xef522f61

00023590 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   23590:	b580      	push	{r7, lr}
   23592:	b088      	sub	sp, #32
   23594:	af00      	add	r7, sp, #0
   23596:	0002      	movs	r2, r0
   23598:	1dfb      	adds	r3, r7, #7
   2359a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2359c:	231f      	movs	r3, #31
   2359e:	18fb      	adds	r3, r7, r3
   235a0:	2200      	movs	r2, #0
   235a2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   235a4:	2300      	movs	r3, #0
   235a6:	61bb      	str	r3, [r7, #24]
   235a8:	2300      	movs	r3, #0
   235aa:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   235ac:	2301      	movs	r3, #1
   235ae:	425b      	negs	r3, r3
   235b0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   235b2:	4b1d      	ldr	r3, [pc, #116]	; (23628 <wait_for_firmware_start+0x98>)
   235b4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   235b6:	4b1d      	ldr	r3, [pc, #116]	; (2362c <wait_for_firmware_start+0x9c>)
   235b8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   235ba:	1dfb      	adds	r3, r7, #7
   235bc:	781b      	ldrb	r3, [r3, #0]
   235be:	2b02      	cmp	r3, #2
   235c0:	d003      	beq.n	235ca <wait_for_firmware_start+0x3a>
   235c2:	1dfb      	adds	r3, r7, #7
   235c4:	781b      	ldrb	r3, [r3, #0]
   235c6:	2b03      	cmp	r3, #3
   235c8:	d119      	bne.n	235fe <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   235ca:	4b19      	ldr	r3, [pc, #100]	; (23630 <wait_for_firmware_start+0xa0>)
   235cc:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   235ce:	4b19      	ldr	r3, [pc, #100]	; (23634 <wait_for_firmware_start+0xa4>)
   235d0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   235d2:	e014      	b.n	235fe <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   235d4:	2002      	movs	r0, #2
   235d6:	4b18      	ldr	r3, [pc, #96]	; (23638 <wait_for_firmware_start+0xa8>)
   235d8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   235da:	68fb      	ldr	r3, [r7, #12]
   235dc:	0018      	movs	r0, r3
   235de:	4b17      	ldr	r3, [pc, #92]	; (2363c <wait_for_firmware_start+0xac>)
   235e0:	4798      	blx	r3
   235e2:	0003      	movs	r3, r0
   235e4:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   235e6:	697b      	ldr	r3, [r7, #20]
   235e8:	3301      	adds	r3, #1
   235ea:	617b      	str	r3, [r7, #20]
   235ec:	697a      	ldr	r2, [r7, #20]
   235ee:	693b      	ldr	r3, [r7, #16]
   235f0:	429a      	cmp	r2, r3
   235f2:	d304      	bcc.n	235fe <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   235f4:	231f      	movs	r3, #31
   235f6:	18fb      	adds	r3, r7, r3
   235f8:	22fb      	movs	r2, #251	; 0xfb
   235fa:	701a      	strb	r2, [r3, #0]
			goto ERR;
   235fc:	e00c      	b.n	23618 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   235fe:	68ba      	ldr	r2, [r7, #8]
   23600:	69bb      	ldr	r3, [r7, #24]
   23602:	429a      	cmp	r2, r3
   23604:	d1e6      	bne.n	235d4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   23606:	68bb      	ldr	r3, [r7, #8]
   23608:	4a08      	ldr	r2, [pc, #32]	; (2362c <wait_for_firmware_start+0x9c>)
   2360a:	4293      	cmp	r3, r2
   2360c:	d104      	bne.n	23618 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   2360e:	4b06      	ldr	r3, [pc, #24]	; (23628 <wait_for_firmware_start+0x98>)
   23610:	2100      	movs	r1, #0
   23612:	0018      	movs	r0, r3
   23614:	4b0a      	ldr	r3, [pc, #40]	; (23640 <wait_for_firmware_start+0xb0>)
   23616:	4798      	blx	r3
	}
ERR:
	return ret;
   23618:	231f      	movs	r3, #31
   2361a:	18fb      	adds	r3, r7, r3
   2361c:	781b      	ldrb	r3, [r3, #0]
   2361e:	b25b      	sxtb	r3, r3
}
   23620:	0018      	movs	r0, r3
   23622:	46bd      	mov	sp, r7
   23624:	b008      	add	sp, #32
   23626:	bd80      	pop	{r7, pc}
   23628:	0000108c 	.word	0x0000108c
   2362c:	02532636 	.word	0x02532636
   23630:	000207ac 	.word	0x000207ac
   23634:	d75dc1c3 	.word	0xd75dc1c3
   23638:	00020e31 	.word	0x00020e31
   2363c:	00023781 	.word	0x00023781
   23640:	000237c5 	.word	0x000237c5

00023644 <chip_deinit>:

sint8 chip_deinit(void)
{
   23644:	b590      	push	{r4, r7, lr}
   23646:	b083      	sub	sp, #12
   23648:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2364a:	2300      	movs	r3, #0
   2364c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   2364e:	1dfc      	adds	r4, r7, #7
   23650:	003a      	movs	r2, r7
   23652:	23a0      	movs	r3, #160	; 0xa0
   23654:	015b      	lsls	r3, r3, #5
   23656:	0011      	movs	r1, r2
   23658:	0018      	movs	r0, r3
   2365a:	4b20      	ldr	r3, [pc, #128]	; (236dc <chip_deinit+0x98>)
   2365c:	4798      	blx	r3
   2365e:	0003      	movs	r3, r0
   23660:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   23662:	1dfb      	adds	r3, r7, #7
   23664:	781b      	ldrb	r3, [r3, #0]
   23666:	b25b      	sxtb	r3, r3
   23668:	2b00      	cmp	r3, #0
   2366a:	d00e      	beq.n	2368a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   2366c:	4a1c      	ldr	r2, [pc, #112]	; (236e0 <chip_deinit+0x9c>)
   2366e:	491d      	ldr	r1, [pc, #116]	; (236e4 <chip_deinit+0xa0>)
   23670:	4b1d      	ldr	r3, [pc, #116]	; (236e8 <chip_deinit+0xa4>)
   23672:	0018      	movs	r0, r3
   23674:	4b1d      	ldr	r3, [pc, #116]	; (236ec <chip_deinit+0xa8>)
   23676:	4798      	blx	r3
   23678:	4b1d      	ldr	r3, [pc, #116]	; (236f0 <chip_deinit+0xac>)
   2367a:	0018      	movs	r0, r3
   2367c:	4b1b      	ldr	r3, [pc, #108]	; (236ec <chip_deinit+0xa8>)
   2367e:	4798      	blx	r3
   23680:	4b1c      	ldr	r3, [pc, #112]	; (236f4 <chip_deinit+0xb0>)
   23682:	0018      	movs	r0, r3
   23684:	4b19      	ldr	r3, [pc, #100]	; (236ec <chip_deinit+0xa8>)
   23686:	4798      	blx	r3
		goto ERR1;
   23688:	e021      	b.n	236ce <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   2368a:	683b      	ldr	r3, [r7, #0]
   2368c:	4a1a      	ldr	r2, [pc, #104]	; (236f8 <chip_deinit+0xb4>)
   2368e:	4013      	ands	r3, r2
   23690:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   23692:	683a      	ldr	r2, [r7, #0]
   23694:	1dfc      	adds	r4, r7, #7
   23696:	23a0      	movs	r3, #160	; 0xa0
   23698:	015b      	lsls	r3, r3, #5
   2369a:	0011      	movs	r1, r2
   2369c:	0018      	movs	r0, r3
   2369e:	4b17      	ldr	r3, [pc, #92]	; (236fc <chip_deinit+0xb8>)
   236a0:	4798      	blx	r3
   236a2:	0003      	movs	r3, r0
   236a4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   236a6:	1dfb      	adds	r3, r7, #7
   236a8:	781b      	ldrb	r3, [r3, #0]
   236aa:	b25b      	sxtb	r3, r3
   236ac:	2b00      	cmp	r3, #0
   236ae:	d00e      	beq.n	236ce <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   236b0:	4a13      	ldr	r2, [pc, #76]	; (23700 <chip_deinit+0xbc>)
   236b2:	490c      	ldr	r1, [pc, #48]	; (236e4 <chip_deinit+0xa0>)
   236b4:	4b0c      	ldr	r3, [pc, #48]	; (236e8 <chip_deinit+0xa4>)
   236b6:	0018      	movs	r0, r3
   236b8:	4b0c      	ldr	r3, [pc, #48]	; (236ec <chip_deinit+0xa8>)
   236ba:	4798      	blx	r3
   236bc:	4b0c      	ldr	r3, [pc, #48]	; (236f0 <chip_deinit+0xac>)
   236be:	0018      	movs	r0, r3
   236c0:	4b0a      	ldr	r3, [pc, #40]	; (236ec <chip_deinit+0xa8>)
   236c2:	4798      	blx	r3
   236c4:	4b0b      	ldr	r3, [pc, #44]	; (236f4 <chip_deinit+0xb0>)
   236c6:	0018      	movs	r0, r3
   236c8:	4b08      	ldr	r3, [pc, #32]	; (236ec <chip_deinit+0xa8>)
   236ca:	4798      	blx	r3
		goto ERR1;
   236cc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   236ce:	1dfb      	adds	r3, r7, #7
   236d0:	781b      	ldrb	r3, [r3, #0]
   236d2:	b25b      	sxtb	r3, r3
}
   236d4:	0018      	movs	r0, r3
   236d6:	46bd      	mov	sp, r7
   236d8:	b003      	add	sp, #12
   236da:	bd90      	pop	{r4, r7, pc}
   236dc:	000237a1 	.word	0x000237a1
   236e0:	00000201 	.word	0x00000201
   236e4:	00039b10 	.word	0x00039b10
   236e8:	00039a78 	.word	0x00039a78
   236ec:	0001e979 	.word	0x0001e979
   236f0:	00039ae8 	.word	0x00039ae8
   236f4:	00039aa4 	.word	0x00039aa4
   236f8:	fffffbff 	.word	0xfffffbff
   236fc:	000237c5 	.word	0x000237c5
   23700:	00000207 	.word	0x00000207

00023704 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   23704:	b590      	push	{r4, r7, lr}
   23706:	b085      	sub	sp, #20
   23708:	af00      	add	r7, sp, #0
   2370a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2370c:	230f      	movs	r3, #15
   2370e:	18fb      	adds	r3, r7, r3
   23710:	2200      	movs	r2, #0
   23712:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   23714:	230f      	movs	r3, #15
   23716:	18fc      	adds	r4, r7, r3
   23718:	687b      	ldr	r3, [r7, #4]
   2371a:	0018      	movs	r0, r3
   2371c:	4b05      	ldr	r3, [pc, #20]	; (23734 <nm_bus_iface_init+0x30>)
   2371e:	4798      	blx	r3
   23720:	0003      	movs	r3, r0
   23722:	7023      	strb	r3, [r4, #0]
	return ret;
   23724:	230f      	movs	r3, #15
   23726:	18fb      	adds	r3, r7, r3
   23728:	781b      	ldrb	r3, [r3, #0]
   2372a:	b25b      	sxtb	r3, r3
}
   2372c:	0018      	movs	r0, r3
   2372e:	46bd      	mov	sp, r7
   23730:	b005      	add	sp, #20
   23732:	bd90      	pop	{r4, r7, pc}
   23734:	000214ed 	.word	0x000214ed

00023738 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   23738:	b590      	push	{r4, r7, lr}
   2373a:	b083      	sub	sp, #12
   2373c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2373e:	1dfb      	adds	r3, r7, #7
   23740:	2200      	movs	r2, #0
   23742:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   23744:	1dfc      	adds	r4, r7, #7
   23746:	4b05      	ldr	r3, [pc, #20]	; (2375c <nm_bus_iface_deinit+0x24>)
   23748:	4798      	blx	r3
   2374a:	0003      	movs	r3, r0
   2374c:	7023      	strb	r3, [r4, #0]

	return ret;
   2374e:	1dfb      	adds	r3, r7, #7
   23750:	781b      	ldrb	r3, [r3, #0]
   23752:	b25b      	sxtb	r3, r3
}
   23754:	0018      	movs	r0, r3
   23756:	46bd      	mov	sp, r7
   23758:	b003      	add	sp, #12
   2375a:	bd90      	pop	{r4, r7, pc}
   2375c:	00021665 	.word	0x00021665

00023760 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   23760:	b580      	push	{r7, lr}
   23762:	b082      	sub	sp, #8
   23764:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23766:	1dfb      	adds	r3, r7, #7
   23768:	2200      	movs	r2, #0
   2376a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   2376c:	4b03      	ldr	r3, [pc, #12]	; (2377c <nm_bus_reset+0x1c>)
   2376e:	4798      	blx	r3
   23770:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   23772:	0018      	movs	r0, r3
   23774:	46bd      	mov	sp, r7
   23776:	b002      	add	sp, #8
   23778:	bd80      	pop	{r7, pc}
   2377a:	46c0      	nop			; (mov r8, r8)
   2377c:	0002558d 	.word	0x0002558d

00023780 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   23780:	b580      	push	{r7, lr}
   23782:	b082      	sub	sp, #8
   23784:	af00      	add	r7, sp, #0
   23786:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   23788:	687b      	ldr	r3, [r7, #4]
   2378a:	0018      	movs	r0, r3
   2378c:	4b03      	ldr	r3, [pc, #12]	; (2379c <nm_read_reg+0x1c>)
   2378e:	4798      	blx	r3
   23790:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   23792:	0018      	movs	r0, r3
   23794:	46bd      	mov	sp, r7
   23796:	b002      	add	sp, #8
   23798:	bd80      	pop	{r7, pc}
   2379a:	46c0      	nop			; (mov r8, r8)
   2379c:	00025721 	.word	0x00025721

000237a0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   237a0:	b580      	push	{r7, lr}
   237a2:	b082      	sub	sp, #8
   237a4:	af00      	add	r7, sp, #0
   237a6:	6078      	str	r0, [r7, #4]
   237a8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   237aa:	683a      	ldr	r2, [r7, #0]
   237ac:	687b      	ldr	r3, [r7, #4]
   237ae:	0011      	movs	r1, r2
   237b0:	0018      	movs	r0, r3
   237b2:	4b03      	ldr	r3, [pc, #12]	; (237c0 <nm_read_reg_with_ret+0x20>)
   237b4:	4798      	blx	r3
   237b6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   237b8:	0018      	movs	r0, r3
   237ba:	46bd      	mov	sp, r7
   237bc:	b002      	add	sp, #8
   237be:	bd80      	pop	{r7, pc}
   237c0:	00025745 	.word	0x00025745

000237c4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   237c4:	b580      	push	{r7, lr}
   237c6:	b082      	sub	sp, #8
   237c8:	af00      	add	r7, sp, #0
   237ca:	6078      	str	r0, [r7, #4]
   237cc:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   237ce:	683a      	ldr	r2, [r7, #0]
   237d0:	687b      	ldr	r3, [r7, #4]
   237d2:	0011      	movs	r1, r2
   237d4:	0018      	movs	r0, r3
   237d6:	4b03      	ldr	r3, [pc, #12]	; (237e4 <nm_write_reg+0x20>)
   237d8:	4798      	blx	r3
   237da:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   237dc:	0018      	movs	r0, r3
   237de:	46bd      	mov	sp, r7
   237e0:	b002      	add	sp, #8
   237e2:	bd80      	pop	{r7, pc}
   237e4:	00025795 	.word	0x00025795

000237e8 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   237e8:	b580      	push	{r7, lr}
   237ea:	b084      	sub	sp, #16
   237ec:	af00      	add	r7, sp, #0
   237ee:	60f8      	str	r0, [r7, #12]
   237f0:	60b9      	str	r1, [r7, #8]
   237f2:	1dbb      	adds	r3, r7, #6
   237f4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   237f6:	1dbb      	adds	r3, r7, #6
   237f8:	881a      	ldrh	r2, [r3, #0]
   237fa:	68b9      	ldr	r1, [r7, #8]
   237fc:	68fb      	ldr	r3, [r7, #12]
   237fe:	0018      	movs	r0, r3
   23800:	4b03      	ldr	r3, [pc, #12]	; (23810 <p_nm_read_block+0x28>)
   23802:	4798      	blx	r3
   23804:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   23806:	0018      	movs	r0, r3
   23808:	46bd      	mov	sp, r7
   2380a:	b004      	add	sp, #16
   2380c:	bd80      	pop	{r7, pc}
   2380e:	46c0      	nop			; (mov r8, r8)
   23810:	000257e5 	.word	0x000257e5

00023814 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23814:	b580      	push	{r7, lr}
   23816:	b086      	sub	sp, #24
   23818:	af00      	add	r7, sp, #0
   2381a:	60f8      	str	r0, [r7, #12]
   2381c:	60b9      	str	r1, [r7, #8]
   2381e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23820:	4b2d      	ldr	r3, [pc, #180]	; (238d8 <nm_read_block+0xc4>)
   23822:	881a      	ldrh	r2, [r3, #0]
   23824:	2310      	movs	r3, #16
   23826:	18fb      	adds	r3, r7, r3
   23828:	3a08      	subs	r2, #8
   2382a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   2382c:	2300      	movs	r3, #0
   2382e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23830:	2313      	movs	r3, #19
   23832:	18fb      	adds	r3, r7, r3
   23834:	2200      	movs	r2, #0
   23836:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23838:	2310      	movs	r3, #16
   2383a:	18fb      	adds	r3, r7, r3
   2383c:	881a      	ldrh	r2, [r3, #0]
   2383e:	687b      	ldr	r3, [r7, #4]
   23840:	429a      	cmp	r2, r3
   23842:	d313      	bcc.n	2386c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23844:	68ba      	ldr	r2, [r7, #8]
   23846:	697b      	ldr	r3, [r7, #20]
   23848:	18d1      	adds	r1, r2, r3
   2384a:	687b      	ldr	r3, [r7, #4]
   2384c:	b29a      	uxth	r2, r3
   2384e:	68fb      	ldr	r3, [r7, #12]
   23850:	0018      	movs	r0, r3
   23852:	4b22      	ldr	r3, [pc, #136]	; (238dc <nm_read_block+0xc8>)
   23854:	4798      	blx	r3
   23856:	0003      	movs	r3, r0
   23858:	b2da      	uxtb	r2, r3
   2385a:	2313      	movs	r3, #19
   2385c:	18fb      	adds	r3, r7, r3
   2385e:	781b      	ldrb	r3, [r3, #0]
   23860:	18d3      	adds	r3, r2, r3
   23862:	b2da      	uxtb	r2, r3
   23864:	2313      	movs	r3, #19
   23866:	18fb      	adds	r3, r7, r3
   23868:	701a      	strb	r2, [r3, #0]
			break;
   2386a:	e02d      	b.n	238c8 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   2386c:	68ba      	ldr	r2, [r7, #8]
   2386e:	697b      	ldr	r3, [r7, #20]
   23870:	18d1      	adds	r1, r2, r3
   23872:	2310      	movs	r3, #16
   23874:	18fb      	adds	r3, r7, r3
   23876:	881a      	ldrh	r2, [r3, #0]
   23878:	68fb      	ldr	r3, [r7, #12]
   2387a:	0018      	movs	r0, r3
   2387c:	4b17      	ldr	r3, [pc, #92]	; (238dc <nm_read_block+0xc8>)
   2387e:	4798      	blx	r3
   23880:	0003      	movs	r3, r0
   23882:	b2da      	uxtb	r2, r3
   23884:	2313      	movs	r3, #19
   23886:	18fb      	adds	r3, r7, r3
   23888:	781b      	ldrb	r3, [r3, #0]
   2388a:	18d3      	adds	r3, r2, r3
   2388c:	b2da      	uxtb	r2, r3
   2388e:	2313      	movs	r3, #19
   23890:	18fb      	adds	r3, r7, r3
   23892:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23894:	2313      	movs	r3, #19
   23896:	18fb      	adds	r3, r7, r3
   23898:	781b      	ldrb	r3, [r3, #0]
   2389a:	b25b      	sxtb	r3, r3
   2389c:	2b00      	cmp	r3, #0
   2389e:	d112      	bne.n	238c6 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   238a0:	2310      	movs	r3, #16
   238a2:	18fb      	adds	r3, r7, r3
   238a4:	881b      	ldrh	r3, [r3, #0]
   238a6:	687a      	ldr	r2, [r7, #4]
   238a8:	1ad3      	subs	r3, r2, r3
   238aa:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   238ac:	2310      	movs	r3, #16
   238ae:	18fb      	adds	r3, r7, r3
   238b0:	881b      	ldrh	r3, [r3, #0]
   238b2:	697a      	ldr	r2, [r7, #20]
   238b4:	18d3      	adds	r3, r2, r3
   238b6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   238b8:	2310      	movs	r3, #16
   238ba:	18fb      	adds	r3, r7, r3
   238bc:	881b      	ldrh	r3, [r3, #0]
   238be:	68fa      	ldr	r2, [r7, #12]
   238c0:	18d3      	adds	r3, r2, r3
   238c2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   238c4:	e7b8      	b.n	23838 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   238c6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   238c8:	2313      	movs	r3, #19
   238ca:	18fb      	adds	r3, r7, r3
   238cc:	781b      	ldrb	r3, [r3, #0]
   238ce:	b25b      	sxtb	r3, r3
}
   238d0:	0018      	movs	r0, r3
   238d2:	46bd      	mov	sp, r7
   238d4:	b006      	add	sp, #24
   238d6:	bd80      	pop	{r7, pc}
   238d8:	20000124 	.word	0x20000124
   238dc:	000237e9 	.word	0x000237e9

000238e0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   238e0:	b580      	push	{r7, lr}
   238e2:	b084      	sub	sp, #16
   238e4:	af00      	add	r7, sp, #0
   238e6:	60f8      	str	r0, [r7, #12]
   238e8:	60b9      	str	r1, [r7, #8]
   238ea:	1dbb      	adds	r3, r7, #6
   238ec:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   238ee:	1dbb      	adds	r3, r7, #6
   238f0:	881a      	ldrh	r2, [r3, #0]
   238f2:	68b9      	ldr	r1, [r7, #8]
   238f4:	68fb      	ldr	r3, [r7, #12]
   238f6:	0018      	movs	r0, r3
   238f8:	4b03      	ldr	r3, [pc, #12]	; (23908 <p_nm_write_block+0x28>)
   238fa:	4798      	blx	r3
   238fc:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   238fe:	0018      	movs	r0, r3
   23900:	46bd      	mov	sp, r7
   23902:	b004      	add	sp, #16
   23904:	bd80      	pop	{r7, pc}
   23906:	46c0      	nop			; (mov r8, r8)
   23908:	0002583d 	.word	0x0002583d

0002390c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   2390c:	b580      	push	{r7, lr}
   2390e:	b086      	sub	sp, #24
   23910:	af00      	add	r7, sp, #0
   23912:	60f8      	str	r0, [r7, #12]
   23914:	60b9      	str	r1, [r7, #8]
   23916:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23918:	4b2d      	ldr	r3, [pc, #180]	; (239d0 <nm_write_block+0xc4>)
   2391a:	881a      	ldrh	r2, [r3, #0]
   2391c:	2310      	movs	r3, #16
   2391e:	18fb      	adds	r3, r7, r3
   23920:	3a08      	subs	r2, #8
   23922:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23924:	2300      	movs	r3, #0
   23926:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23928:	2313      	movs	r3, #19
   2392a:	18fb      	adds	r3, r7, r3
   2392c:	2200      	movs	r2, #0
   2392e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23930:	2310      	movs	r3, #16
   23932:	18fb      	adds	r3, r7, r3
   23934:	881a      	ldrh	r2, [r3, #0]
   23936:	687b      	ldr	r3, [r7, #4]
   23938:	429a      	cmp	r2, r3
   2393a:	d313      	bcc.n	23964 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   2393c:	68ba      	ldr	r2, [r7, #8]
   2393e:	697b      	ldr	r3, [r7, #20]
   23940:	18d1      	adds	r1, r2, r3
   23942:	687b      	ldr	r3, [r7, #4]
   23944:	b29a      	uxth	r2, r3
   23946:	68fb      	ldr	r3, [r7, #12]
   23948:	0018      	movs	r0, r3
   2394a:	4b22      	ldr	r3, [pc, #136]	; (239d4 <nm_write_block+0xc8>)
   2394c:	4798      	blx	r3
   2394e:	0003      	movs	r3, r0
   23950:	b2da      	uxtb	r2, r3
   23952:	2313      	movs	r3, #19
   23954:	18fb      	adds	r3, r7, r3
   23956:	781b      	ldrb	r3, [r3, #0]
   23958:	18d3      	adds	r3, r2, r3
   2395a:	b2da      	uxtb	r2, r3
   2395c:	2313      	movs	r3, #19
   2395e:	18fb      	adds	r3, r7, r3
   23960:	701a      	strb	r2, [r3, #0]
			break;
   23962:	e02d      	b.n	239c0 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   23964:	68ba      	ldr	r2, [r7, #8]
   23966:	697b      	ldr	r3, [r7, #20]
   23968:	18d1      	adds	r1, r2, r3
   2396a:	2310      	movs	r3, #16
   2396c:	18fb      	adds	r3, r7, r3
   2396e:	881a      	ldrh	r2, [r3, #0]
   23970:	68fb      	ldr	r3, [r7, #12]
   23972:	0018      	movs	r0, r3
   23974:	4b17      	ldr	r3, [pc, #92]	; (239d4 <nm_write_block+0xc8>)
   23976:	4798      	blx	r3
   23978:	0003      	movs	r3, r0
   2397a:	b2da      	uxtb	r2, r3
   2397c:	2313      	movs	r3, #19
   2397e:	18fb      	adds	r3, r7, r3
   23980:	781b      	ldrb	r3, [r3, #0]
   23982:	18d3      	adds	r3, r2, r3
   23984:	b2da      	uxtb	r2, r3
   23986:	2313      	movs	r3, #19
   23988:	18fb      	adds	r3, r7, r3
   2398a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   2398c:	2313      	movs	r3, #19
   2398e:	18fb      	adds	r3, r7, r3
   23990:	781b      	ldrb	r3, [r3, #0]
   23992:	b25b      	sxtb	r3, r3
   23994:	2b00      	cmp	r3, #0
   23996:	d112      	bne.n	239be <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23998:	2310      	movs	r3, #16
   2399a:	18fb      	adds	r3, r7, r3
   2399c:	881b      	ldrh	r3, [r3, #0]
   2399e:	687a      	ldr	r2, [r7, #4]
   239a0:	1ad3      	subs	r3, r2, r3
   239a2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   239a4:	2310      	movs	r3, #16
   239a6:	18fb      	adds	r3, r7, r3
   239a8:	881b      	ldrh	r3, [r3, #0]
   239aa:	697a      	ldr	r2, [r7, #20]
   239ac:	18d3      	adds	r3, r2, r3
   239ae:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   239b0:	2310      	movs	r3, #16
   239b2:	18fb      	adds	r3, r7, r3
   239b4:	881b      	ldrh	r3, [r3, #0]
   239b6:	68fa      	ldr	r2, [r7, #12]
   239b8:	18d3      	adds	r3, r2, r3
   239ba:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   239bc:	e7b8      	b.n	23930 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   239be:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   239c0:	2313      	movs	r3, #19
   239c2:	18fb      	adds	r3, r7, r3
   239c4:	781b      	ldrb	r3, [r3, #0]
   239c6:	b25b      	sxtb	r3, r3
}
   239c8:	0018      	movs	r0, r3
   239ca:	46bd      	mov	sp, r7
   239cc:	b006      	add	sp, #24
   239ce:	bd80      	pop	{r7, pc}
   239d0:	20000124 	.word	0x20000124
   239d4:	000238e1 	.word	0x000238e1

000239d8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   239d8:	b590      	push	{r4, r7, lr}
   239da:	b089      	sub	sp, #36	; 0x24
   239dc:	af00      	add	r7, sp, #0
   239de:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   239e0:	2300      	movs	r3, #0
   239e2:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   239e4:	231f      	movs	r3, #31
   239e6:	18fb      	adds	r3, r7, r3
   239e8:	2200      	movs	r2, #0
   239ea:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   239ec:	230c      	movs	r3, #12
   239ee:	18fb      	adds	r3, r7, r3
   239f0:	0018      	movs	r0, r3
   239f2:	2308      	movs	r3, #8
   239f4:	001a      	movs	r2, r3
   239f6:	2100      	movs	r1, #0
   239f8:	4b64      	ldr	r3, [pc, #400]	; (23b8c <nm_get_firmware_full_info+0x1b4>)
   239fa:	4798      	blx	r3
	if (pstrRev != NULL)
   239fc:	687b      	ldr	r3, [r7, #4]
   239fe:	2b00      	cmp	r3, #0
   23a00:	d100      	bne.n	23a04 <nm_get_firmware_full_info+0x2c>
   23a02:	e0ba      	b.n	23b7a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   23a04:	687b      	ldr	r3, [r7, #4]
   23a06:	2228      	movs	r2, #40	; 0x28
   23a08:	2100      	movs	r1, #0
   23a0a:	0018      	movs	r0, r3
   23a0c:	4b60      	ldr	r3, [pc, #384]	; (23b90 <nm_get_firmware_full_info+0x1b8>)
   23a0e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   23a10:	231f      	movs	r3, #31
   23a12:	18fc      	adds	r4, r7, r3
   23a14:	2314      	movs	r3, #20
   23a16:	18fb      	adds	r3, r7, r3
   23a18:	4a5e      	ldr	r2, [pc, #376]	; (23b94 <nm_get_firmware_full_info+0x1bc>)
   23a1a:	0019      	movs	r1, r3
   23a1c:	0010      	movs	r0, r2
   23a1e:	4b5e      	ldr	r3, [pc, #376]	; (23b98 <nm_get_firmware_full_info+0x1c0>)
   23a20:	4798      	blx	r3
   23a22:	0003      	movs	r3, r0
   23a24:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   23a26:	231f      	movs	r3, #31
   23a28:	18fb      	adds	r3, r7, r3
   23a2a:	781b      	ldrb	r3, [r3, #0]
   23a2c:	b25b      	sxtb	r3, r3
   23a2e:	2b00      	cmp	r3, #0
   23a30:	d000      	beq.n	23a34 <nm_get_firmware_full_info+0x5c>
   23a32:	e0a2      	b.n	23b7a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   23a34:	697b      	ldr	r3, [r7, #20]
   23a36:	2b00      	cmp	r3, #0
   23a38:	d100      	bne.n	23a3c <nm_get_firmware_full_info+0x64>
   23a3a:	e09a      	b.n	23b72 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   23a3c:	697b      	ldr	r3, [r7, #20]
   23a3e:	22c0      	movs	r2, #192	; 0xc0
   23a40:	0292      	lsls	r2, r2, #10
   23a42:	4313      	orrs	r3, r2
   23a44:	221f      	movs	r2, #31
   23a46:	18bc      	adds	r4, r7, r2
   23a48:	220c      	movs	r2, #12
   23a4a:	18b9      	adds	r1, r7, r2
   23a4c:	2208      	movs	r2, #8
   23a4e:	0018      	movs	r0, r3
   23a50:	4b52      	ldr	r3, [pc, #328]	; (23b9c <nm_get_firmware_full_info+0x1c4>)
   23a52:	4798      	blx	r3
   23a54:	0003      	movs	r3, r0
   23a56:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   23a58:	231f      	movs	r3, #31
   23a5a:	18fb      	adds	r3, r7, r3
   23a5c:	781b      	ldrb	r3, [r3, #0]
   23a5e:	b25b      	sxtb	r3, r3
   23a60:	2b00      	cmp	r3, #0
   23a62:	d000      	beq.n	23a66 <nm_get_firmware_full_info+0x8e>
   23a64:	e089      	b.n	23b7a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   23a66:	230c      	movs	r3, #12
   23a68:	18fb      	adds	r3, r7, r3
   23a6a:	685b      	ldr	r3, [r3, #4]
   23a6c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   23a6e:	697b      	ldr	r3, [r7, #20]
   23a70:	041b      	lsls	r3, r3, #16
   23a72:	0c1b      	lsrs	r3, r3, #16
   23a74:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   23a76:	697b      	ldr	r3, [r7, #20]
   23a78:	2b00      	cmp	r3, #0
   23a7a:	d100      	bne.n	23a7e <nm_get_firmware_full_info+0xa6>
   23a7c:	e074      	b.n	23b68 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   23a7e:	697b      	ldr	r3, [r7, #20]
   23a80:	22c0      	movs	r2, #192	; 0xc0
   23a82:	0292      	lsls	r2, r2, #10
   23a84:	4313      	orrs	r3, r2
   23a86:	221f      	movs	r2, #31
   23a88:	18bc      	adds	r4, r7, r2
   23a8a:	6879      	ldr	r1, [r7, #4]
   23a8c:	2228      	movs	r2, #40	; 0x28
   23a8e:	0018      	movs	r0, r3
   23a90:	4b42      	ldr	r3, [pc, #264]	; (23b9c <nm_get_firmware_full_info+0x1c4>)
   23a92:	4798      	blx	r3
   23a94:	0003      	movs	r3, r0
   23a96:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   23a98:	231f      	movs	r3, #31
   23a9a:	18fb      	adds	r3, r7, r3
   23a9c:	781b      	ldrb	r3, [r3, #0]
   23a9e:	b25b      	sxtb	r3, r3
   23aa0:	2b00      	cmp	r3, #0
   23aa2:	d16a      	bne.n	23b7a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   23aa4:	687b      	ldr	r3, [r7, #4]
   23aa6:	791b      	ldrb	r3, [r3, #4]
   23aa8:	021b      	lsls	r3, r3, #8
   23aaa:	b21a      	sxth	r2, r3
   23aac:	687b      	ldr	r3, [r7, #4]
   23aae:	795b      	ldrb	r3, [r3, #5]
   23ab0:	011b      	lsls	r3, r3, #4
   23ab2:	b21b      	sxth	r3, r3
   23ab4:	21ff      	movs	r1, #255	; 0xff
   23ab6:	400b      	ands	r3, r1
   23ab8:	b21b      	sxth	r3, r3
   23aba:	4313      	orrs	r3, r2
   23abc:	b21a      	sxth	r2, r3
   23abe:	687b      	ldr	r3, [r7, #4]
   23ac0:	799b      	ldrb	r3, [r3, #6]
   23ac2:	b21b      	sxth	r3, r3
   23ac4:	210f      	movs	r1, #15
   23ac6:	400b      	ands	r3, r1
   23ac8:	b21b      	sxth	r3, r3
   23aca:	4313      	orrs	r3, r2
   23acc:	b21a      	sxth	r2, r3
   23ace:	231c      	movs	r3, #28
   23ad0:	18fb      	adds	r3, r7, r3
   23ad2:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   23ad4:	231a      	movs	r3, #26
   23ad6:	18fb      	adds	r3, r7, r3
   23ad8:	4a31      	ldr	r2, [pc, #196]	; (23ba0 <nm_get_firmware_full_info+0x1c8>)
   23ada:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   23adc:	687b      	ldr	r3, [r7, #4]
   23ade:	79db      	ldrb	r3, [r3, #7]
   23ae0:	021b      	lsls	r3, r3, #8
   23ae2:	b21a      	sxth	r2, r3
   23ae4:	687b      	ldr	r3, [r7, #4]
   23ae6:	7a1b      	ldrb	r3, [r3, #8]
   23ae8:	011b      	lsls	r3, r3, #4
   23aea:	b21b      	sxth	r3, r3
   23aec:	21ff      	movs	r1, #255	; 0xff
   23aee:	400b      	ands	r3, r1
   23af0:	b21b      	sxth	r3, r3
   23af2:	4313      	orrs	r3, r2
   23af4:	b21a      	sxth	r2, r3
   23af6:	687b      	ldr	r3, [r7, #4]
   23af8:	7a5b      	ldrb	r3, [r3, #9]
   23afa:	b21b      	sxth	r3, r3
   23afc:	210f      	movs	r1, #15
   23afe:	400b      	ands	r3, r1
   23b00:	b21b      	sxth	r3, r3
   23b02:	4313      	orrs	r3, r2
   23b04:	b21a      	sxth	r2, r3
   23b06:	2318      	movs	r3, #24
   23b08:	18fb      	adds	r3, r7, r3
   23b0a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   23b0c:	231c      	movs	r3, #28
   23b0e:	18fb      	adds	r3, r7, r3
   23b10:	881b      	ldrh	r3, [r3, #0]
   23b12:	2b00      	cmp	r3, #0
   23b14:	d009      	beq.n	23b2a <nm_get_firmware_full_info+0x152>
   23b16:	2318      	movs	r3, #24
   23b18:	18fb      	adds	r3, r7, r3
   23b1a:	881b      	ldrh	r3, [r3, #0]
   23b1c:	2b00      	cmp	r3, #0
   23b1e:	d004      	beq.n	23b2a <nm_get_firmware_full_info+0x152>
   23b20:	2318      	movs	r3, #24
   23b22:	18fb      	adds	r3, r7, r3
   23b24:	881b      	ldrh	r3, [r3, #0]
   23b26:	2b00      	cmp	r3, #0
   23b28:	d104      	bne.n	23b34 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   23b2a:	231f      	movs	r3, #31
   23b2c:	18fb      	adds	r3, r7, r3
   23b2e:	22f4      	movs	r2, #244	; 0xf4
   23b30:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23b32:	e022      	b.n	23b7a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   23b34:	231a      	movs	r3, #26
   23b36:	18fa      	adds	r2, r7, r3
   23b38:	2318      	movs	r3, #24
   23b3a:	18fb      	adds	r3, r7, r3
   23b3c:	8812      	ldrh	r2, [r2, #0]
   23b3e:	881b      	ldrh	r3, [r3, #0]
   23b40:	429a      	cmp	r2, r3
   23b42:	d204      	bcs.n	23b4e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   23b44:	231f      	movs	r3, #31
   23b46:	18fb      	adds	r3, r7, r3
   23b48:	22f3      	movs	r2, #243	; 0xf3
   23b4a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23b4c:	e015      	b.n	23b7a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   23b4e:	231a      	movs	r3, #26
   23b50:	18fa      	adds	r2, r7, r3
   23b52:	231c      	movs	r3, #28
   23b54:	18fb      	adds	r3, r7, r3
   23b56:	8812      	ldrh	r2, [r2, #0]
   23b58:	881b      	ldrh	r3, [r3, #0]
   23b5a:	429a      	cmp	r2, r3
   23b5c:	d90d      	bls.n	23b7a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   23b5e:	231f      	movs	r3, #31
   23b60:	18fb      	adds	r3, r7, r3
   23b62:	22f3      	movs	r2, #243	; 0xf3
   23b64:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23b66:	e008      	b.n	23b7a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   23b68:	231f      	movs	r3, #31
   23b6a:	18fb      	adds	r3, r7, r3
   23b6c:	22f4      	movs	r2, #244	; 0xf4
   23b6e:	701a      	strb	r2, [r3, #0]
   23b70:	e003      	b.n	23b7a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   23b72:	231f      	movs	r3, #31
   23b74:	18fb      	adds	r3, r7, r3
   23b76:	22f4      	movs	r2, #244	; 0xf4
   23b78:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   23b7a:	231f      	movs	r3, #31
   23b7c:	18fb      	adds	r3, r7, r3
   23b7e:	781b      	ldrb	r3, [r3, #0]
   23b80:	b25b      	sxtb	r3, r3
}
   23b82:	0018      	movs	r0, r3
   23b84:	46bd      	mov	sp, r7
   23b86:	b009      	add	sp, #36	; 0x24
   23b88:	bd90      	pop	{r4, r7, pc}
   23b8a:	46c0      	nop			; (mov r8, r8)
   23b8c:	0003560f 	.word	0x0003560f
   23b90:	00021711 	.word	0x00021711
   23b94:	000c0008 	.word	0x000c0008
   23b98:	000237a1 	.word	0x000237a1
   23b9c:	00023815 	.word	0x00023815
   23ba0:	00001354 	.word	0x00001354

00023ba4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   23ba4:	b590      	push	{r4, r7, lr}
   23ba6:	b085      	sub	sp, #20
   23ba8:	af00      	add	r7, sp, #0
   23baa:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23bac:	230f      	movs	r3, #15
   23bae:	18fb      	adds	r3, r7, r3
   23bb0:	2200      	movs	r2, #0
   23bb2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   23bb4:	687b      	ldr	r3, [r7, #4]
   23bb6:	2b00      	cmp	r3, #0
   23bb8:	d013      	beq.n	23be2 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   23bba:	230e      	movs	r3, #14
   23bbc:	18fb      	adds	r3, r7, r3
   23bbe:	687a      	ldr	r2, [r7, #4]
   23bc0:	7812      	ldrb	r2, [r2, #0]
   23bc2:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   23bc4:	230e      	movs	r3, #14
   23bc6:	18fb      	adds	r3, r7, r3
   23bc8:	781b      	ldrb	r3, [r3, #0]
   23bca:	2b00      	cmp	r3, #0
   23bcc:	d004      	beq.n	23bd8 <nm_drv_init+0x34>
   23bce:	230e      	movs	r3, #14
   23bd0:	18fb      	adds	r3, r7, r3
   23bd2:	781b      	ldrb	r3, [r3, #0]
   23bd4:	2b04      	cmp	r3, #4
   23bd6:	d908      	bls.n	23bea <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   23bd8:	230e      	movs	r3, #14
   23bda:	18fb      	adds	r3, r7, r3
   23bdc:	2201      	movs	r2, #1
   23bde:	701a      	strb	r2, [r3, #0]
   23be0:	e003      	b.n	23bea <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   23be2:	230e      	movs	r3, #14
   23be4:	18fb      	adds	r3, r7, r3
   23be6:	2201      	movs	r2, #1
   23be8:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   23bea:	230f      	movs	r3, #15
   23bec:	18fc      	adds	r4, r7, r3
   23bee:	2000      	movs	r0, #0
   23bf0:	4b41      	ldr	r3, [pc, #260]	; (23cf8 <nm_drv_init+0x154>)
   23bf2:	4798      	blx	r3
   23bf4:	0003      	movs	r3, r0
   23bf6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23bf8:	230f      	movs	r3, #15
   23bfa:	18fb      	adds	r3, r7, r3
   23bfc:	781b      	ldrb	r3, [r3, #0]
   23bfe:	b25b      	sxtb	r3, r3
   23c00:	2b00      	cmp	r3, #0
   23c02:	d00f      	beq.n	23c24 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   23c04:	2390      	movs	r3, #144	; 0x90
   23c06:	005a      	lsls	r2, r3, #1
   23c08:	493c      	ldr	r1, [pc, #240]	; (23cfc <nm_drv_init+0x158>)
   23c0a:	4b3d      	ldr	r3, [pc, #244]	; (23d00 <nm_drv_init+0x15c>)
   23c0c:	0018      	movs	r0, r3
   23c0e:	4b3d      	ldr	r3, [pc, #244]	; (23d04 <nm_drv_init+0x160>)
   23c10:	4798      	blx	r3
   23c12:	4b3d      	ldr	r3, [pc, #244]	; (23d08 <nm_drv_init+0x164>)
   23c14:	0018      	movs	r0, r3
   23c16:	4b3b      	ldr	r3, [pc, #236]	; (23d04 <nm_drv_init+0x160>)
   23c18:	4798      	blx	r3
   23c1a:	4b3c      	ldr	r3, [pc, #240]	; (23d0c <nm_drv_init+0x168>)
   23c1c:	0018      	movs	r0, r3
   23c1e:	4b39      	ldr	r3, [pc, #228]	; (23d04 <nm_drv_init+0x160>)
   23c20:	4798      	blx	r3
		goto ERR1;
   23c22:	e061      	b.n	23ce8 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   23c24:	4b3a      	ldr	r3, [pc, #232]	; (23d10 <nm_drv_init+0x16c>)
   23c26:	0018      	movs	r0, r3
   23c28:	4b36      	ldr	r3, [pc, #216]	; (23d04 <nm_drv_init+0x160>)
   23c2a:	4798      	blx	r3
   23c2c:	4b39      	ldr	r3, [pc, #228]	; (23d14 <nm_drv_init+0x170>)
   23c2e:	4798      	blx	r3
   23c30:	0002      	movs	r2, r0
   23c32:	4b39      	ldr	r3, [pc, #228]	; (23d18 <nm_drv_init+0x174>)
   23c34:	0011      	movs	r1, r2
   23c36:	0018      	movs	r0, r3
   23c38:	4b32      	ldr	r3, [pc, #200]	; (23d04 <nm_drv_init+0x160>)
   23c3a:	4798      	blx	r3
   23c3c:	4b33      	ldr	r3, [pc, #204]	; (23d0c <nm_drv_init+0x168>)
   23c3e:	0018      	movs	r0, r3
   23c40:	4b30      	ldr	r3, [pc, #192]	; (23d04 <nm_drv_init+0x160>)
   23c42:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   23c44:	4b35      	ldr	r3, [pc, #212]	; (23d1c <nm_drv_init+0x178>)
   23c46:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   23c48:	230f      	movs	r3, #15
   23c4a:	18fc      	adds	r4, r7, r3
   23c4c:	230e      	movs	r3, #14
   23c4e:	18fb      	adds	r3, r7, r3
   23c50:	781b      	ldrb	r3, [r3, #0]
   23c52:	0018      	movs	r0, r3
   23c54:	4b32      	ldr	r3, [pc, #200]	; (23d20 <nm_drv_init+0x17c>)
   23c56:	4798      	blx	r3
   23c58:	0003      	movs	r3, r0
   23c5a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23c5c:	230f      	movs	r3, #15
   23c5e:	18fb      	adds	r3, r7, r3
   23c60:	781b      	ldrb	r3, [r3, #0]
   23c62:	b25b      	sxtb	r3, r3
   23c64:	2b00      	cmp	r3, #0
   23c66:	d13a      	bne.n	23cde <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   23c68:	230f      	movs	r3, #15
   23c6a:	18fc      	adds	r4, r7, r3
   23c6c:	230e      	movs	r3, #14
   23c6e:	18fb      	adds	r3, r7, r3
   23c70:	781b      	ldrb	r3, [r3, #0]
   23c72:	0018      	movs	r0, r3
   23c74:	4b2b      	ldr	r3, [pc, #172]	; (23d24 <nm_drv_init+0x180>)
   23c76:	4798      	blx	r3
   23c78:	0003      	movs	r3, r0
   23c7a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23c7c:	230f      	movs	r3, #15
   23c7e:	18fb      	adds	r3, r7, r3
   23c80:	781b      	ldrb	r3, [r3, #0]
   23c82:	b25b      	sxtb	r3, r3
   23c84:	2b00      	cmp	r3, #0
   23c86:	d12c      	bne.n	23ce2 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   23c88:	230e      	movs	r3, #14
   23c8a:	18fb      	adds	r3, r7, r3
   23c8c:	781b      	ldrb	r3, [r3, #0]
   23c8e:	2b02      	cmp	r3, #2
   23c90:	d02a      	beq.n	23ce8 <nm_drv_init+0x144>
   23c92:	230e      	movs	r3, #14
   23c94:	18fb      	adds	r3, r7, r3
   23c96:	781b      	ldrb	r3, [r3, #0]
   23c98:	2b03      	cmp	r3, #3
   23c9a:	d025      	beq.n	23ce8 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   23c9c:	230f      	movs	r3, #15
   23c9e:	18fc      	adds	r4, r7, r3
   23ca0:	4b21      	ldr	r3, [pc, #132]	; (23d28 <nm_drv_init+0x184>)
   23ca2:	4798      	blx	r3
   23ca4:	0003      	movs	r3, r0
   23ca6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23ca8:	230f      	movs	r3, #15
   23caa:	18fb      	adds	r3, r7, r3
   23cac:	781b      	ldrb	r3, [r3, #0]
   23cae:	b25b      	sxtb	r3, r3
   23cb0:	2b00      	cmp	r3, #0
   23cb2:	d00f      	beq.n	23cd4 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   23cb4:	23a7      	movs	r3, #167	; 0xa7
   23cb6:	005a      	lsls	r2, r3, #1
   23cb8:	4910      	ldr	r1, [pc, #64]	; (23cfc <nm_drv_init+0x158>)
   23cba:	4b11      	ldr	r3, [pc, #68]	; (23d00 <nm_drv_init+0x15c>)
   23cbc:	0018      	movs	r0, r3
   23cbe:	4b11      	ldr	r3, [pc, #68]	; (23d04 <nm_drv_init+0x160>)
   23cc0:	4798      	blx	r3
   23cc2:	4b1a      	ldr	r3, [pc, #104]	; (23d2c <nm_drv_init+0x188>)
   23cc4:	0018      	movs	r0, r3
   23cc6:	4b0f      	ldr	r3, [pc, #60]	; (23d04 <nm_drv_init+0x160>)
   23cc8:	4798      	blx	r3
   23cca:	4b10      	ldr	r3, [pc, #64]	; (23d0c <nm_drv_init+0x168>)
   23ccc:	0018      	movs	r0, r3
   23cce:	4b0d      	ldr	r3, [pc, #52]	; (23d04 <nm_drv_init+0x160>)
   23cd0:	4798      	blx	r3
		goto ERR2;
   23cd2:	e007      	b.n	23ce4 <nm_drv_init+0x140>
	}
	return ret;
   23cd4:	230f      	movs	r3, #15
   23cd6:	18fb      	adds	r3, r7, r3
   23cd8:	781b      	ldrb	r3, [r3, #0]
   23cda:	b25b      	sxtb	r3, r3
   23cdc:	e008      	b.n	23cf0 <nm_drv_init+0x14c>
		goto ERR2;
   23cde:	46c0      	nop			; (mov r8, r8)
   23ce0:	e000      	b.n	23ce4 <nm_drv_init+0x140>
		goto ERR2;
   23ce2:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   23ce4:	4b12      	ldr	r3, [pc, #72]	; (23d30 <nm_drv_init+0x18c>)
   23ce6:	4798      	blx	r3
ERR1:
	return ret;
   23ce8:	230f      	movs	r3, #15
   23cea:	18fb      	adds	r3, r7, r3
   23cec:	781b      	ldrb	r3, [r3, #0]
   23cee:	b25b      	sxtb	r3, r3
}
   23cf0:	0018      	movs	r0, r3
   23cf2:	46bd      	mov	sp, r7
   23cf4:	b005      	add	sp, #20
   23cf6:	bd90      	pop	{r4, r7, pc}
   23cf8:	00023705 	.word	0x00023705
   23cfc:	00039bec 	.word	0x00039bec
   23d00:	00039b1c 	.word	0x00039b1c
   23d04:	0001e979 	.word	0x0001e979
   23d08:	00039b30 	.word	0x00039b30
   23d0c:	00039b4c 	.word	0x00039b4c
   23d10:	00039b50 	.word	0x00039b50
   23d14:	000230a1 	.word	0x000230a1
   23d18:	00039b5c 	.word	0x00039b5c
   23d1c:	000255bd 	.word	0x000255bd
   23d20:	000233f9 	.word	0x000233f9
   23d24:	00023591 	.word	0x00023591
   23d28:	00022fed 	.word	0x00022fed
   23d2c:	00039b6c 	.word	0x00039b6c
   23d30:	00023739 	.word	0x00023739

00023d34 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   23d34:	b590      	push	{r4, r7, lr}
   23d36:	b085      	sub	sp, #20
   23d38:	af00      	add	r7, sp, #0
   23d3a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   23d3c:	230f      	movs	r3, #15
   23d3e:	18fc      	adds	r4, r7, r3
   23d40:	4b2e      	ldr	r3, [pc, #184]	; (23dfc <nm_drv_deinit+0xc8>)
   23d42:	4798      	blx	r3
   23d44:	0003      	movs	r3, r0
   23d46:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23d48:	230f      	movs	r3, #15
   23d4a:	18fb      	adds	r3, r7, r3
   23d4c:	781b      	ldrb	r3, [r3, #0]
   23d4e:	b25b      	sxtb	r3, r3
   23d50:	2b00      	cmp	r3, #0
   23d52:	d010      	beq.n	23d76 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   23d54:	2366      	movs	r3, #102	; 0x66
   23d56:	33ff      	adds	r3, #255	; 0xff
   23d58:	001a      	movs	r2, r3
   23d5a:	4929      	ldr	r1, [pc, #164]	; (23e00 <nm_drv_deinit+0xcc>)
   23d5c:	4b29      	ldr	r3, [pc, #164]	; (23e04 <nm_drv_deinit+0xd0>)
   23d5e:	0018      	movs	r0, r3
   23d60:	4b29      	ldr	r3, [pc, #164]	; (23e08 <nm_drv_deinit+0xd4>)
   23d62:	4798      	blx	r3
   23d64:	4b29      	ldr	r3, [pc, #164]	; (23e0c <nm_drv_deinit+0xd8>)
   23d66:	0018      	movs	r0, r3
   23d68:	4b27      	ldr	r3, [pc, #156]	; (23e08 <nm_drv_deinit+0xd4>)
   23d6a:	4798      	blx	r3
   23d6c:	4b28      	ldr	r3, [pc, #160]	; (23e10 <nm_drv_deinit+0xdc>)
   23d6e:	0018      	movs	r0, r3
   23d70:	4b25      	ldr	r3, [pc, #148]	; (23e08 <nm_drv_deinit+0xd4>)
   23d72:	4798      	blx	r3
		goto ERR1;
   23d74:	e03a      	b.n	23dec <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   23d76:	230f      	movs	r3, #15
   23d78:	18fc      	adds	r4, r7, r3
   23d7a:	2000      	movs	r0, #0
   23d7c:	4b25      	ldr	r3, [pc, #148]	; (23e14 <nm_drv_deinit+0xe0>)
   23d7e:	4798      	blx	r3
   23d80:	0003      	movs	r3, r0
   23d82:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23d84:	230f      	movs	r3, #15
   23d86:	18fb      	adds	r3, r7, r3
   23d88:	781b      	ldrb	r3, [r3, #0]
   23d8a:	b25b      	sxtb	r3, r3
   23d8c:	2b00      	cmp	r3, #0
   23d8e:	d00f      	beq.n	23db0 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   23d90:	23b6      	movs	r3, #182	; 0xb6
   23d92:	005a      	lsls	r2, r3, #1
   23d94:	491a      	ldr	r1, [pc, #104]	; (23e00 <nm_drv_deinit+0xcc>)
   23d96:	4b1b      	ldr	r3, [pc, #108]	; (23e04 <nm_drv_deinit+0xd0>)
   23d98:	0018      	movs	r0, r3
   23d9a:	4b1b      	ldr	r3, [pc, #108]	; (23e08 <nm_drv_deinit+0xd4>)
   23d9c:	4798      	blx	r3
   23d9e:	4b1e      	ldr	r3, [pc, #120]	; (23e18 <nm_drv_deinit+0xe4>)
   23da0:	0018      	movs	r0, r3
   23da2:	4b19      	ldr	r3, [pc, #100]	; (23e08 <nm_drv_deinit+0xd4>)
   23da4:	4798      	blx	r3
   23da6:	4b1a      	ldr	r3, [pc, #104]	; (23e10 <nm_drv_deinit+0xdc>)
   23da8:	0018      	movs	r0, r3
   23daa:	4b17      	ldr	r3, [pc, #92]	; (23e08 <nm_drv_deinit+0xd4>)
   23dac:	4798      	blx	r3
		goto ERR1;
   23dae:	e01d      	b.n	23dec <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   23db0:	230f      	movs	r3, #15
   23db2:	18fc      	adds	r4, r7, r3
   23db4:	4b19      	ldr	r3, [pc, #100]	; (23e1c <nm_drv_deinit+0xe8>)
   23db6:	4798      	blx	r3
   23db8:	0003      	movs	r3, r0
   23dba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23dbc:	230f      	movs	r3, #15
   23dbe:	18fb      	adds	r3, r7, r3
   23dc0:	781b      	ldrb	r3, [r3, #0]
   23dc2:	b25b      	sxtb	r3, r3
   23dc4:	2b00      	cmp	r3, #0
   23dc6:	d00f      	beq.n	23de8 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   23dc8:	23b9      	movs	r3, #185	; 0xb9
   23dca:	005a      	lsls	r2, r3, #1
   23dcc:	490c      	ldr	r1, [pc, #48]	; (23e00 <nm_drv_deinit+0xcc>)
   23dce:	4b0d      	ldr	r3, [pc, #52]	; (23e04 <nm_drv_deinit+0xd0>)
   23dd0:	0018      	movs	r0, r3
   23dd2:	4b0d      	ldr	r3, [pc, #52]	; (23e08 <nm_drv_deinit+0xd4>)
   23dd4:	4798      	blx	r3
   23dd6:	4b12      	ldr	r3, [pc, #72]	; (23e20 <nm_drv_deinit+0xec>)
   23dd8:	0018      	movs	r0, r3
   23dda:	4b0b      	ldr	r3, [pc, #44]	; (23e08 <nm_drv_deinit+0xd4>)
   23ddc:	4798      	blx	r3
   23dde:	4b0c      	ldr	r3, [pc, #48]	; (23e10 <nm_drv_deinit+0xdc>)
   23de0:	0018      	movs	r0, r3
   23de2:	4b09      	ldr	r3, [pc, #36]	; (23e08 <nm_drv_deinit+0xd4>)
   23de4:	4798      	blx	r3
		goto ERR1;
   23de6:	e001      	b.n	23dec <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   23de8:	4b0e      	ldr	r3, [pc, #56]	; (23e24 <nm_drv_deinit+0xf0>)
   23dea:	4798      	blx	r3
#endif

ERR1:
	return ret;
   23dec:	230f      	movs	r3, #15
   23dee:	18fb      	adds	r3, r7, r3
   23df0:	781b      	ldrb	r3, [r3, #0]
   23df2:	b25b      	sxtb	r3, r3
}
   23df4:	0018      	movs	r0, r3
   23df6:	46bd      	mov	sp, r7
   23df8:	b005      	add	sp, #20
   23dfa:	bd90      	pop	{r4, r7, pc}
   23dfc:	00023645 	.word	0x00023645
   23e00:	00039bf8 	.word	0x00039bf8
   23e04:	00039b1c 	.word	0x00039b1c
   23e08:	0001e979 	.word	0x0001e979
   23e0c:	00039b8c 	.word	0x00039b8c
   23e10:	00039b4c 	.word	0x00039b4c
   23e14:	00026a65 	.word	0x00026a65
   23e18:	00039bac 	.word	0x00039bac
   23e1c:	00023739 	.word	0x00023739
   23e20:	00039bd0 	.word	0x00039bd0
   23e24:	00025709 	.word	0x00025709

00023e28 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   23e28:	b580      	push	{r7, lr}
   23e2a:	b086      	sub	sp, #24
   23e2c:	af00      	add	r7, sp, #0
   23e2e:	6078      	str	r0, [r7, #4]
   23e30:	000a      	movs	r2, r1
   23e32:	1cbb      	adds	r3, r7, #2
   23e34:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   23e36:	230c      	movs	r3, #12
   23e38:	18fb      	adds	r3, r7, r3
   23e3a:	2200      	movs	r2, #0
   23e3c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   23e3e:	230c      	movs	r3, #12
   23e40:	18fb      	adds	r3, r7, r3
   23e42:	687a      	ldr	r2, [r7, #4]
   23e44:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23e46:	230c      	movs	r3, #12
   23e48:	18fb      	adds	r3, r7, r3
   23e4a:	1cba      	adds	r2, r7, #2
   23e4c:	8812      	ldrh	r2, [r2, #0]
   23e4e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23e50:	230c      	movs	r3, #12
   23e52:	18fb      	adds	r3, r7, r3
   23e54:	0019      	movs	r1, r3
   23e56:	2003      	movs	r0, #3
   23e58:	4b03      	ldr	r3, [pc, #12]	; (23e68 <nmi_spi_read+0x40>)
   23e5a:	4798      	blx	r3
   23e5c:	0003      	movs	r3, r0
}
   23e5e:	0018      	movs	r0, r3
   23e60:	46bd      	mov	sp, r7
   23e62:	b006      	add	sp, #24
   23e64:	bd80      	pop	{r7, pc}
   23e66:	46c0      	nop			; (mov r8, r8)
   23e68:	000215d5 	.word	0x000215d5

00023e6c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   23e6c:	b580      	push	{r7, lr}
   23e6e:	b086      	sub	sp, #24
   23e70:	af00      	add	r7, sp, #0
   23e72:	6078      	str	r0, [r7, #4]
   23e74:	000a      	movs	r2, r1
   23e76:	1cbb      	adds	r3, r7, #2
   23e78:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   23e7a:	230c      	movs	r3, #12
   23e7c:	18fb      	adds	r3, r7, r3
   23e7e:	687a      	ldr	r2, [r7, #4]
   23e80:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   23e82:	230c      	movs	r3, #12
   23e84:	18fb      	adds	r3, r7, r3
   23e86:	2200      	movs	r2, #0
   23e88:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23e8a:	230c      	movs	r3, #12
   23e8c:	18fb      	adds	r3, r7, r3
   23e8e:	1cba      	adds	r2, r7, #2
   23e90:	8812      	ldrh	r2, [r2, #0]
   23e92:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23e94:	230c      	movs	r3, #12
   23e96:	18fb      	adds	r3, r7, r3
   23e98:	0019      	movs	r1, r3
   23e9a:	2003      	movs	r0, #3
   23e9c:	4b03      	ldr	r3, [pc, #12]	; (23eac <nmi_spi_write+0x40>)
   23e9e:	4798      	blx	r3
   23ea0:	0003      	movs	r3, r0
}
   23ea2:	0018      	movs	r0, r3
   23ea4:	46bd      	mov	sp, r7
   23ea6:	b006      	add	sp, #24
   23ea8:	bd80      	pop	{r7, pc}
   23eaa:	46c0      	nop			; (mov r8, r8)
   23eac:	000215d5 	.word	0x000215d5

00023eb0 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   23eb0:	b580      	push	{r7, lr}
   23eb2:	b088      	sub	sp, #32
   23eb4:	af00      	add	r7, sp, #0
   23eb6:	60f8      	str	r0, [r7, #12]
   23eb8:	60b9      	str	r1, [r7, #8]
   23eba:	1dbb      	adds	r3, r7, #6
   23ebc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   23ebe:	2314      	movs	r3, #20
   23ec0:	18fb      	adds	r3, r7, r3
   23ec2:	68fa      	ldr	r2, [r7, #12]
   23ec4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   23ec6:	2314      	movs	r3, #20
   23ec8:	18fb      	adds	r3, r7, r3
   23eca:	68ba      	ldr	r2, [r7, #8]
   23ecc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23ece:	2314      	movs	r3, #20
   23ed0:	18fb      	adds	r3, r7, r3
   23ed2:	1dba      	adds	r2, r7, #6
   23ed4:	8812      	ldrh	r2, [r2, #0]
   23ed6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   23ed8:	2314      	movs	r3, #20
   23eda:	18fb      	adds	r3, r7, r3
   23edc:	0019      	movs	r1, r3
   23ede:	2003      	movs	r0, #3
   23ee0:	4b03      	ldr	r3, [pc, #12]	; (23ef0 <nmi_spi_rw+0x40>)
   23ee2:	4798      	blx	r3
   23ee4:	0003      	movs	r3, r0
}
   23ee6:	0018      	movs	r0, r3
   23ee8:	46bd      	mov	sp, r7
   23eea:	b008      	add	sp, #32
   23eec:	bd80      	pop	{r7, pc}
   23eee:	46c0      	nop			; (mov r8, r8)
   23ef0:	000215d5 	.word	0x000215d5

00023ef4 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   23ef4:	b580      	push	{r7, lr}
   23ef6:	b082      	sub	sp, #8
   23ef8:	af00      	add	r7, sp, #0
   23efa:	0002      	movs	r2, r0
   23efc:	1dfb      	adds	r3, r7, #7
   23efe:	701a      	strb	r2, [r3, #0]
   23f00:	1dbb      	adds	r3, r7, #6
   23f02:	1c0a      	adds	r2, r1, #0
   23f04:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   23f06:	1dfb      	adds	r3, r7, #7
   23f08:	781b      	ldrb	r3, [r3, #0]
   23f0a:	005a      	lsls	r2, r3, #1
   23f0c:	1dbb      	adds	r3, r7, #6
   23f0e:	781b      	ldrb	r3, [r3, #0]
   23f10:	4053      	eors	r3, r2
   23f12:	4a03      	ldr	r2, [pc, #12]	; (23f20 <crc7_byte+0x2c>)
   23f14:	5cd3      	ldrb	r3, [r2, r3]
}
   23f16:	0018      	movs	r0, r3
   23f18:	46bd      	mov	sp, r7
   23f1a:	b002      	add	sp, #8
   23f1c:	bd80      	pop	{r7, pc}
   23f1e:	46c0      	nop			; (mov r8, r8)
   23f20:	00039c08 	.word	0x00039c08

00023f24 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   23f24:	b590      	push	{r4, r7, lr}
   23f26:	b085      	sub	sp, #20
   23f28:	af00      	add	r7, sp, #0
   23f2a:	60b9      	str	r1, [r7, #8]
   23f2c:	607a      	str	r2, [r7, #4]
   23f2e:	230f      	movs	r3, #15
   23f30:	18fb      	adds	r3, r7, r3
   23f32:	1c02      	adds	r2, r0, #0
   23f34:	701a      	strb	r2, [r3, #0]
	while (len--)
   23f36:	e00e      	b.n	23f56 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   23f38:	68bb      	ldr	r3, [r7, #8]
   23f3a:	1c5a      	adds	r2, r3, #1
   23f3c:	60ba      	str	r2, [r7, #8]
   23f3e:	781a      	ldrb	r2, [r3, #0]
   23f40:	230f      	movs	r3, #15
   23f42:	18fc      	adds	r4, r7, r3
   23f44:	230f      	movs	r3, #15
   23f46:	18fb      	adds	r3, r7, r3
   23f48:	781b      	ldrb	r3, [r3, #0]
   23f4a:	0011      	movs	r1, r2
   23f4c:	0018      	movs	r0, r3
   23f4e:	4b08      	ldr	r3, [pc, #32]	; (23f70 <crc7+0x4c>)
   23f50:	4798      	blx	r3
   23f52:	0003      	movs	r3, r0
   23f54:	7023      	strb	r3, [r4, #0]
	while (len--)
   23f56:	687b      	ldr	r3, [r7, #4]
   23f58:	1e5a      	subs	r2, r3, #1
   23f5a:	607a      	str	r2, [r7, #4]
   23f5c:	2b00      	cmp	r3, #0
   23f5e:	d1eb      	bne.n	23f38 <crc7+0x14>
	return crc;
   23f60:	230f      	movs	r3, #15
   23f62:	18fb      	adds	r3, r7, r3
   23f64:	781b      	ldrb	r3, [r3, #0]
}
   23f66:	0018      	movs	r0, r3
   23f68:	46bd      	mov	sp, r7
   23f6a:	b005      	add	sp, #20
   23f6c:	bd90      	pop	{r4, r7, pc}
   23f6e:	46c0      	nop			; (mov r8, r8)
   23f70:	00023ef5 	.word	0x00023ef5

00023f74 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   23f74:	b590      	push	{r4, r7, lr}
   23f76:	b089      	sub	sp, #36	; 0x24
   23f78:	af00      	add	r7, sp, #0
   23f7a:	60b9      	str	r1, [r7, #8]
   23f7c:	607a      	str	r2, [r7, #4]
   23f7e:	603b      	str	r3, [r7, #0]
   23f80:	230f      	movs	r3, #15
   23f82:	18fb      	adds	r3, r7, r3
   23f84:	1c02      	adds	r2, r0, #0
   23f86:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   23f88:	231f      	movs	r3, #31
   23f8a:	18fb      	adds	r3, r7, r3
   23f8c:	2205      	movs	r2, #5
   23f8e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23f90:	231e      	movs	r3, #30
   23f92:	18fb      	adds	r3, r7, r3
   23f94:	2201      	movs	r2, #1
   23f96:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   23f98:	2314      	movs	r3, #20
   23f9a:	18fb      	adds	r3, r7, r3
   23f9c:	220f      	movs	r2, #15
   23f9e:	18ba      	adds	r2, r7, r2
   23fa0:	7812      	ldrb	r2, [r2, #0]
   23fa2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23fa4:	230f      	movs	r3, #15
   23fa6:	18fb      	adds	r3, r7, r3
   23fa8:	781b      	ldrb	r3, [r3, #0]
   23faa:	3bc1      	subs	r3, #193	; 0xc1
   23fac:	2b0e      	cmp	r3, #14
   23fae:	d900      	bls.n	23fb2 <spi_cmd+0x3e>
   23fb0:	e11b      	b.n	241ea <spi_cmd+0x276>
   23fb2:	009a      	lsls	r2, r3, #2
   23fb4:	4bb6      	ldr	r3, [pc, #728]	; (24290 <spi_cmd+0x31c>)
   23fb6:	18d3      	adds	r3, r2, r3
   23fb8:	681b      	ldr	r3, [r3, #0]
   23fba:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   23fbc:	68bb      	ldr	r3, [r7, #8]
   23fbe:	0c1b      	lsrs	r3, r3, #16
   23fc0:	b2da      	uxtb	r2, r3
   23fc2:	2314      	movs	r3, #20
   23fc4:	18fb      	adds	r3, r7, r3
   23fc6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23fc8:	68bb      	ldr	r3, [r7, #8]
   23fca:	0a1b      	lsrs	r3, r3, #8
   23fcc:	b2da      	uxtb	r2, r3
   23fce:	2314      	movs	r3, #20
   23fd0:	18fb      	adds	r3, r7, r3
   23fd2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23fd4:	68bb      	ldr	r3, [r7, #8]
   23fd6:	b2da      	uxtb	r2, r3
   23fd8:	2314      	movs	r3, #20
   23fda:	18fb      	adds	r3, r7, r3
   23fdc:	70da      	strb	r2, [r3, #3]
		len = 5;
   23fde:	231f      	movs	r3, #31
   23fe0:	18fb      	adds	r3, r7, r3
   23fe2:	2205      	movs	r2, #5
   23fe4:	701a      	strb	r2, [r3, #0]
		break;
   23fe6:	e105      	b.n	241f4 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   23fe8:	68bb      	ldr	r3, [r7, #8]
   23fea:	0a1b      	lsrs	r3, r3, #8
   23fec:	b2da      	uxtb	r2, r3
   23fee:	2314      	movs	r3, #20
   23ff0:	18fb      	adds	r3, r7, r3
   23ff2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   23ff4:	2330      	movs	r3, #48	; 0x30
   23ff6:	18fb      	adds	r3, r7, r3
   23ff8:	781b      	ldrb	r3, [r3, #0]
   23ffa:	2b00      	cmp	r3, #0
   23ffc:	d009      	beq.n	24012 <spi_cmd+0x9e>
   23ffe:	2314      	movs	r3, #20
   24000:	18fb      	adds	r3, r7, r3
   24002:	785b      	ldrb	r3, [r3, #1]
   24004:	2280      	movs	r2, #128	; 0x80
   24006:	4252      	negs	r2, r2
   24008:	4313      	orrs	r3, r2
   2400a:	b2da      	uxtb	r2, r3
   2400c:	2314      	movs	r3, #20
   2400e:	18fb      	adds	r3, r7, r3
   24010:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   24012:	68bb      	ldr	r3, [r7, #8]
   24014:	b2da      	uxtb	r2, r3
   24016:	2314      	movs	r3, #20
   24018:	18fb      	adds	r3, r7, r3
   2401a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2401c:	2314      	movs	r3, #20
   2401e:	18fb      	adds	r3, r7, r3
   24020:	2200      	movs	r2, #0
   24022:	70da      	strb	r2, [r3, #3]
		len = 5;
   24024:	231f      	movs	r3, #31
   24026:	18fb      	adds	r3, r7, r3
   24028:	2205      	movs	r2, #5
   2402a:	701a      	strb	r2, [r3, #0]
		break;
   2402c:	e0e2      	b.n	241f4 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   2402e:	2314      	movs	r3, #20
   24030:	18fb      	adds	r3, r7, r3
   24032:	2200      	movs	r2, #0
   24034:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   24036:	2314      	movs	r3, #20
   24038:	18fb      	adds	r3, r7, r3
   2403a:	2200      	movs	r2, #0
   2403c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2403e:	2314      	movs	r3, #20
   24040:	18fb      	adds	r3, r7, r3
   24042:	2200      	movs	r2, #0
   24044:	70da      	strb	r2, [r3, #3]
		len = 5;
   24046:	231f      	movs	r3, #31
   24048:	18fb      	adds	r3, r7, r3
   2404a:	2205      	movs	r2, #5
   2404c:	701a      	strb	r2, [r3, #0]
		break;
   2404e:	e0d1      	b.n	241f4 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   24050:	2314      	movs	r3, #20
   24052:	18fb      	adds	r3, r7, r3
   24054:	2200      	movs	r2, #0
   24056:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   24058:	2314      	movs	r3, #20
   2405a:	18fb      	adds	r3, r7, r3
   2405c:	2200      	movs	r2, #0
   2405e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   24060:	2314      	movs	r3, #20
   24062:	18fb      	adds	r3, r7, r3
   24064:	2200      	movs	r2, #0
   24066:	70da      	strb	r2, [r3, #3]
		len = 5;
   24068:	231f      	movs	r3, #31
   2406a:	18fb      	adds	r3, r7, r3
   2406c:	2205      	movs	r2, #5
   2406e:	701a      	strb	r2, [r3, #0]
		break;
   24070:	e0c0      	b.n	241f4 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   24072:	2314      	movs	r3, #20
   24074:	18fb      	adds	r3, r7, r3
   24076:	22ff      	movs	r2, #255	; 0xff
   24078:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   2407a:	2314      	movs	r3, #20
   2407c:	18fb      	adds	r3, r7, r3
   2407e:	22ff      	movs	r2, #255	; 0xff
   24080:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   24082:	2314      	movs	r3, #20
   24084:	18fb      	adds	r3, r7, r3
   24086:	22ff      	movs	r2, #255	; 0xff
   24088:	70da      	strb	r2, [r3, #3]
		len = 5;
   2408a:	231f      	movs	r3, #31
   2408c:	18fb      	adds	r3, r7, r3
   2408e:	2205      	movs	r2, #5
   24090:	701a      	strb	r2, [r3, #0]
		break;
   24092:	e0af      	b.n	241f4 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   24094:	68bb      	ldr	r3, [r7, #8]
   24096:	0c1b      	lsrs	r3, r3, #16
   24098:	b2da      	uxtb	r2, r3
   2409a:	2314      	movs	r3, #20
   2409c:	18fb      	adds	r3, r7, r3
   2409e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   240a0:	68bb      	ldr	r3, [r7, #8]
   240a2:	0a1b      	lsrs	r3, r3, #8
   240a4:	b2da      	uxtb	r2, r3
   240a6:	2314      	movs	r3, #20
   240a8:	18fb      	adds	r3, r7, r3
   240aa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   240ac:	68bb      	ldr	r3, [r7, #8]
   240ae:	b2da      	uxtb	r2, r3
   240b0:	2314      	movs	r3, #20
   240b2:	18fb      	adds	r3, r7, r3
   240b4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   240b6:	683b      	ldr	r3, [r7, #0]
   240b8:	0a1b      	lsrs	r3, r3, #8
   240ba:	b2da      	uxtb	r2, r3
   240bc:	2314      	movs	r3, #20
   240be:	18fb      	adds	r3, r7, r3
   240c0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   240c2:	683b      	ldr	r3, [r7, #0]
   240c4:	b2da      	uxtb	r2, r3
   240c6:	2314      	movs	r3, #20
   240c8:	18fb      	adds	r3, r7, r3
   240ca:	715a      	strb	r2, [r3, #5]
		len = 7;
   240cc:	231f      	movs	r3, #31
   240ce:	18fb      	adds	r3, r7, r3
   240d0:	2207      	movs	r2, #7
   240d2:	701a      	strb	r2, [r3, #0]
		break;
   240d4:	e08e      	b.n	241f4 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   240d6:	68bb      	ldr	r3, [r7, #8]
   240d8:	0c1b      	lsrs	r3, r3, #16
   240da:	b2da      	uxtb	r2, r3
   240dc:	2314      	movs	r3, #20
   240de:	18fb      	adds	r3, r7, r3
   240e0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   240e2:	68bb      	ldr	r3, [r7, #8]
   240e4:	0a1b      	lsrs	r3, r3, #8
   240e6:	b2da      	uxtb	r2, r3
   240e8:	2314      	movs	r3, #20
   240ea:	18fb      	adds	r3, r7, r3
   240ec:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   240ee:	68bb      	ldr	r3, [r7, #8]
   240f0:	b2da      	uxtb	r2, r3
   240f2:	2314      	movs	r3, #20
   240f4:	18fb      	adds	r3, r7, r3
   240f6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   240f8:	683b      	ldr	r3, [r7, #0]
   240fa:	0c1b      	lsrs	r3, r3, #16
   240fc:	b2da      	uxtb	r2, r3
   240fe:	2314      	movs	r3, #20
   24100:	18fb      	adds	r3, r7, r3
   24102:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   24104:	683b      	ldr	r3, [r7, #0]
   24106:	0a1b      	lsrs	r3, r3, #8
   24108:	b2da      	uxtb	r2, r3
   2410a:	2314      	movs	r3, #20
   2410c:	18fb      	adds	r3, r7, r3
   2410e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   24110:	683b      	ldr	r3, [r7, #0]
   24112:	b2da      	uxtb	r2, r3
   24114:	2314      	movs	r3, #20
   24116:	18fb      	adds	r3, r7, r3
   24118:	719a      	strb	r2, [r3, #6]
		len = 8;
   2411a:	231f      	movs	r3, #31
   2411c:	18fb      	adds	r3, r7, r3
   2411e:	2208      	movs	r2, #8
   24120:	701a      	strb	r2, [r3, #0]
		break;
   24122:	e067      	b.n	241f4 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   24124:	68bb      	ldr	r3, [r7, #8]
   24126:	0a1b      	lsrs	r3, r3, #8
   24128:	b2da      	uxtb	r2, r3
   2412a:	2314      	movs	r3, #20
   2412c:	18fb      	adds	r3, r7, r3
   2412e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   24130:	2330      	movs	r3, #48	; 0x30
   24132:	18fb      	adds	r3, r7, r3
   24134:	781b      	ldrb	r3, [r3, #0]
   24136:	2b00      	cmp	r3, #0
   24138:	d009      	beq.n	2414e <spi_cmd+0x1da>
   2413a:	2314      	movs	r3, #20
   2413c:	18fb      	adds	r3, r7, r3
   2413e:	785b      	ldrb	r3, [r3, #1]
   24140:	2280      	movs	r2, #128	; 0x80
   24142:	4252      	negs	r2, r2
   24144:	4313      	orrs	r3, r2
   24146:	b2da      	uxtb	r2, r3
   24148:	2314      	movs	r3, #20
   2414a:	18fb      	adds	r3, r7, r3
   2414c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2414e:	68bb      	ldr	r3, [r7, #8]
   24150:	b2da      	uxtb	r2, r3
   24152:	2314      	movs	r3, #20
   24154:	18fb      	adds	r3, r7, r3
   24156:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   24158:	687b      	ldr	r3, [r7, #4]
   2415a:	0e1b      	lsrs	r3, r3, #24
   2415c:	b2da      	uxtb	r2, r3
   2415e:	2314      	movs	r3, #20
   24160:	18fb      	adds	r3, r7, r3
   24162:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   24164:	687b      	ldr	r3, [r7, #4]
   24166:	0c1b      	lsrs	r3, r3, #16
   24168:	b2da      	uxtb	r2, r3
   2416a:	2314      	movs	r3, #20
   2416c:	18fb      	adds	r3, r7, r3
   2416e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   24170:	687b      	ldr	r3, [r7, #4]
   24172:	0a1b      	lsrs	r3, r3, #8
   24174:	b2da      	uxtb	r2, r3
   24176:	2314      	movs	r3, #20
   24178:	18fb      	adds	r3, r7, r3
   2417a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   2417c:	687b      	ldr	r3, [r7, #4]
   2417e:	b2da      	uxtb	r2, r3
   24180:	2314      	movs	r3, #20
   24182:	18fb      	adds	r3, r7, r3
   24184:	719a      	strb	r2, [r3, #6]
		len = 8;
   24186:	231f      	movs	r3, #31
   24188:	18fb      	adds	r3, r7, r3
   2418a:	2208      	movs	r2, #8
   2418c:	701a      	strb	r2, [r3, #0]
		break;
   2418e:	e031      	b.n	241f4 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   24190:	68bb      	ldr	r3, [r7, #8]
   24192:	0c1b      	lsrs	r3, r3, #16
   24194:	b2da      	uxtb	r2, r3
   24196:	2314      	movs	r3, #20
   24198:	18fb      	adds	r3, r7, r3
   2419a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2419c:	68bb      	ldr	r3, [r7, #8]
   2419e:	0a1b      	lsrs	r3, r3, #8
   241a0:	b2da      	uxtb	r2, r3
   241a2:	2314      	movs	r3, #20
   241a4:	18fb      	adds	r3, r7, r3
   241a6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   241a8:	68bb      	ldr	r3, [r7, #8]
   241aa:	b2da      	uxtb	r2, r3
   241ac:	2314      	movs	r3, #20
   241ae:	18fb      	adds	r3, r7, r3
   241b0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   241b2:	687b      	ldr	r3, [r7, #4]
   241b4:	0e1b      	lsrs	r3, r3, #24
   241b6:	b2da      	uxtb	r2, r3
   241b8:	2314      	movs	r3, #20
   241ba:	18fb      	adds	r3, r7, r3
   241bc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   241be:	687b      	ldr	r3, [r7, #4]
   241c0:	0c1b      	lsrs	r3, r3, #16
   241c2:	b2da      	uxtb	r2, r3
   241c4:	2314      	movs	r3, #20
   241c6:	18fb      	adds	r3, r7, r3
   241c8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   241ca:	687b      	ldr	r3, [r7, #4]
   241cc:	0a1b      	lsrs	r3, r3, #8
   241ce:	b2da      	uxtb	r2, r3
   241d0:	2314      	movs	r3, #20
   241d2:	18fb      	adds	r3, r7, r3
   241d4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   241d6:	687b      	ldr	r3, [r7, #4]
   241d8:	b2da      	uxtb	r2, r3
   241da:	2314      	movs	r3, #20
   241dc:	18fb      	adds	r3, r7, r3
   241de:	71da      	strb	r2, [r3, #7]
		len = 9;
   241e0:	231f      	movs	r3, #31
   241e2:	18fb      	adds	r3, r7, r3
   241e4:	2209      	movs	r2, #9
   241e6:	701a      	strb	r2, [r3, #0]
		break;
   241e8:	e004      	b.n	241f4 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   241ea:	231e      	movs	r3, #30
   241ec:	18fb      	adds	r3, r7, r3
   241ee:	2200      	movs	r2, #0
   241f0:	701a      	strb	r2, [r3, #0]
		break;
   241f2:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   241f4:	231e      	movs	r3, #30
   241f6:	18fb      	adds	r3, r7, r3
   241f8:	781b      	ldrb	r3, [r3, #0]
   241fa:	b25b      	sxtb	r3, r3
   241fc:	2b00      	cmp	r3, #0
   241fe:	d03f      	beq.n	24280 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   24200:	4b24      	ldr	r3, [pc, #144]	; (24294 <spi_cmd+0x320>)
   24202:	781b      	ldrb	r3, [r3, #0]
   24204:	2b00      	cmp	r3, #0
   24206:	d115      	bne.n	24234 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   24208:	231f      	movs	r3, #31
   2420a:	18fb      	adds	r3, r7, r3
   2420c:	781b      	ldrb	r3, [r3, #0]
   2420e:	1e5c      	subs	r4, r3, #1
   24210:	231f      	movs	r3, #31
   24212:	18fb      	adds	r3, r7, r3
   24214:	781b      	ldrb	r3, [r3, #0]
   24216:	3b01      	subs	r3, #1
   24218:	001a      	movs	r2, r3
   2421a:	2314      	movs	r3, #20
   2421c:	18fb      	adds	r3, r7, r3
   2421e:	0019      	movs	r1, r3
   24220:	207f      	movs	r0, #127	; 0x7f
   24222:	4b1d      	ldr	r3, [pc, #116]	; (24298 <spi_cmd+0x324>)
   24224:	4798      	blx	r3
   24226:	0003      	movs	r3, r0
   24228:	18db      	adds	r3, r3, r3
   2422a:	b2da      	uxtb	r2, r3
   2422c:	2314      	movs	r3, #20
   2422e:	18fb      	adds	r3, r7, r3
   24230:	551a      	strb	r2, [r3, r4]
   24232:	e006      	b.n	24242 <spi_cmd+0x2ce>
		else
			len-=1;
   24234:	231f      	movs	r3, #31
   24236:	18fb      	adds	r3, r7, r3
   24238:	221f      	movs	r2, #31
   2423a:	18ba      	adds	r2, r7, r2
   2423c:	7812      	ldrb	r2, [r2, #0]
   2423e:	3a01      	subs	r2, #1
   24240:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   24242:	231f      	movs	r3, #31
   24244:	18fb      	adds	r3, r7, r3
   24246:	781b      	ldrb	r3, [r3, #0]
   24248:	b29a      	uxth	r2, r3
   2424a:	2314      	movs	r3, #20
   2424c:	18fb      	adds	r3, r7, r3
   2424e:	0011      	movs	r1, r2
   24250:	0018      	movs	r0, r3
   24252:	4b12      	ldr	r3, [pc, #72]	; (2429c <spi_cmd+0x328>)
   24254:	4798      	blx	r3
   24256:	1e03      	subs	r3, r0, #0
   24258:	d012      	beq.n	24280 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2425a:	2390      	movs	r3, #144	; 0x90
   2425c:	005a      	lsls	r2, r3, #1
   2425e:	4910      	ldr	r1, [pc, #64]	; (242a0 <spi_cmd+0x32c>)
   24260:	4b10      	ldr	r3, [pc, #64]	; (242a4 <spi_cmd+0x330>)
   24262:	0018      	movs	r0, r3
   24264:	4b10      	ldr	r3, [pc, #64]	; (242a8 <spi_cmd+0x334>)
   24266:	4798      	blx	r3
   24268:	4b10      	ldr	r3, [pc, #64]	; (242ac <spi_cmd+0x338>)
   2426a:	0018      	movs	r0, r3
   2426c:	4b0e      	ldr	r3, [pc, #56]	; (242a8 <spi_cmd+0x334>)
   2426e:	4798      	blx	r3
   24270:	4b0f      	ldr	r3, [pc, #60]	; (242b0 <spi_cmd+0x33c>)
   24272:	0018      	movs	r0, r3
   24274:	4b0c      	ldr	r3, [pc, #48]	; (242a8 <spi_cmd+0x334>)
   24276:	4798      	blx	r3
			result = N_FAIL;
   24278:	231e      	movs	r3, #30
   2427a:	18fb      	adds	r3, r7, r3
   2427c:	2200      	movs	r2, #0
   2427e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   24280:	231e      	movs	r3, #30
   24282:	18fb      	adds	r3, r7, r3
   24284:	781b      	ldrb	r3, [r3, #0]
   24286:	b25b      	sxtb	r3, r3
}
   24288:	0018      	movs	r0, r3
   2428a:	46bd      	mov	sp, r7
   2428c:	b009      	add	sp, #36	; 0x24
   2428e:	bd90      	pop	{r4, r7, pc}
   24290:	0003a280 	.word	0x0003a280
   24294:	200042b0 	.word	0x200042b0
   24298:	00023f25 	.word	0x00023f25
   2429c:	00023e6d 	.word	0x00023e6d
   242a0:	0003a2f8 	.word	0x0003a2f8
   242a4:	00039d08 	.word	0x00039d08
   242a8:	0001e979 	.word	0x0001e979
   242ac:	00039d1c 	.word	0x00039d1c
   242b0:	00039d48 	.word	0x00039d48

000242b4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   242b4:	b590      	push	{r4, r7, lr}
   242b6:	b085      	sub	sp, #20
   242b8:	af00      	add	r7, sp, #0
   242ba:	0002      	movs	r2, r0
   242bc:	1dfb      	adds	r3, r7, #7
   242be:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   242c0:	230e      	movs	r3, #14
   242c2:	18fb      	adds	r3, r7, r3
   242c4:	2201      	movs	r2, #1
   242c6:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   242c8:	4b32      	ldr	r3, [pc, #200]	; (24394 <spi_data_rsp+0xe0>)
   242ca:	781b      	ldrb	r3, [r3, #0]
   242cc:	2b00      	cmp	r3, #0
   242ce:	d104      	bne.n	242da <spi_data_rsp+0x26>
		len = 2;
   242d0:	230f      	movs	r3, #15
   242d2:	18fb      	adds	r3, r7, r3
   242d4:	2202      	movs	r2, #2
   242d6:	701a      	strb	r2, [r3, #0]
   242d8:	e003      	b.n	242e2 <spi_data_rsp+0x2e>
	else
		len = 3;
   242da:	230f      	movs	r3, #15
   242dc:	18fb      	adds	r3, r7, r3
   242de:	2203      	movs	r2, #3
   242e0:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   242e2:	230f      	movs	r3, #15
   242e4:	18fb      	adds	r3, r7, r3
   242e6:	781b      	ldrb	r3, [r3, #0]
   242e8:	b29a      	uxth	r2, r3
   242ea:	2308      	movs	r3, #8
   242ec:	18fb      	adds	r3, r7, r3
   242ee:	0011      	movs	r1, r2
   242f0:	0018      	movs	r0, r3
   242f2:	4b29      	ldr	r3, [pc, #164]	; (24398 <spi_data_rsp+0xe4>)
   242f4:	4798      	blx	r3
   242f6:	1e03      	subs	r3, r0, #0
   242f8:	d013      	beq.n	24322 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   242fa:	239a      	movs	r3, #154	; 0x9a
   242fc:	005a      	lsls	r2, r3, #1
   242fe:	4927      	ldr	r1, [pc, #156]	; (2439c <spi_data_rsp+0xe8>)
   24300:	4b27      	ldr	r3, [pc, #156]	; (243a0 <spi_data_rsp+0xec>)
   24302:	0018      	movs	r0, r3
   24304:	4b27      	ldr	r3, [pc, #156]	; (243a4 <spi_data_rsp+0xf0>)
   24306:	4798      	blx	r3
   24308:	4b27      	ldr	r3, [pc, #156]	; (243a8 <spi_data_rsp+0xf4>)
   2430a:	0018      	movs	r0, r3
   2430c:	4b25      	ldr	r3, [pc, #148]	; (243a4 <spi_data_rsp+0xf0>)
   2430e:	4798      	blx	r3
   24310:	4b26      	ldr	r3, [pc, #152]	; (243ac <spi_data_rsp+0xf8>)
   24312:	0018      	movs	r0, r3
   24314:	4b23      	ldr	r3, [pc, #140]	; (243a4 <spi_data_rsp+0xf0>)
   24316:	4798      	blx	r3
		result = N_FAIL;
   24318:	230e      	movs	r3, #14
   2431a:	18fb      	adds	r3, r7, r3
   2431c:	2200      	movs	r2, #0
   2431e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   24320:	e030      	b.n	24384 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   24322:	230f      	movs	r3, #15
   24324:	18fb      	adds	r3, r7, r3
   24326:	781b      	ldrb	r3, [r3, #0]
   24328:	3b01      	subs	r3, #1
   2432a:	2208      	movs	r2, #8
   2432c:	18ba      	adds	r2, r7, r2
   2432e:	5cd3      	ldrb	r3, [r2, r3]
   24330:	2b00      	cmp	r3, #0
   24332:	d108      	bne.n	24346 <spi_data_rsp+0x92>
   24334:	230f      	movs	r3, #15
   24336:	18fb      	adds	r3, r7, r3
   24338:	781b      	ldrb	r3, [r3, #0]
   2433a:	3b02      	subs	r3, #2
   2433c:	2208      	movs	r2, #8
   2433e:	18ba      	adds	r2, r7, r2
   24340:	5cd3      	ldrb	r3, [r2, r3]
   24342:	2bc3      	cmp	r3, #195	; 0xc3
   24344:	d01e      	beq.n	24384 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   24346:	233c      	movs	r3, #60	; 0x3c
   24348:	33ff      	adds	r3, #255	; 0xff
   2434a:	001a      	movs	r2, r3
   2434c:	4913      	ldr	r1, [pc, #76]	; (2439c <spi_data_rsp+0xe8>)
   2434e:	4b14      	ldr	r3, [pc, #80]	; (243a0 <spi_data_rsp+0xec>)
   24350:	0018      	movs	r0, r3
   24352:	4b14      	ldr	r3, [pc, #80]	; (243a4 <spi_data_rsp+0xf0>)
   24354:	4798      	blx	r3
   24356:	2308      	movs	r3, #8
   24358:	18fb      	adds	r3, r7, r3
   2435a:	781b      	ldrb	r3, [r3, #0]
   2435c:	0019      	movs	r1, r3
   2435e:	2308      	movs	r3, #8
   24360:	18fb      	adds	r3, r7, r3
   24362:	785b      	ldrb	r3, [r3, #1]
   24364:	001a      	movs	r2, r3
   24366:	2308      	movs	r3, #8
   24368:	18fb      	adds	r3, r7, r3
   2436a:	789b      	ldrb	r3, [r3, #2]
   2436c:	4810      	ldr	r0, [pc, #64]	; (243b0 <spi_data_rsp+0xfc>)
   2436e:	4c0d      	ldr	r4, [pc, #52]	; (243a4 <spi_data_rsp+0xf0>)
   24370:	47a0      	blx	r4
   24372:	4b0e      	ldr	r3, [pc, #56]	; (243ac <spi_data_rsp+0xf8>)
   24374:	0018      	movs	r0, r3
   24376:	4b0b      	ldr	r3, [pc, #44]	; (243a4 <spi_data_rsp+0xf0>)
   24378:	4798      	blx	r3
		result = N_FAIL;
   2437a:	230e      	movs	r3, #14
   2437c:	18fb      	adds	r3, r7, r3
   2437e:	2200      	movs	r2, #0
   24380:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   24382:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   24384:	230e      	movs	r3, #14
   24386:	18fb      	adds	r3, r7, r3
   24388:	781b      	ldrb	r3, [r3, #0]
   2438a:	b25b      	sxtb	r3, r3
}
   2438c:	0018      	movs	r0, r3
   2438e:	46bd      	mov	sp, r7
   24390:	b005      	add	sp, #20
   24392:	bd90      	pop	{r4, r7, pc}
   24394:	200042b0 	.word	0x200042b0
   24398:	00023e29 	.word	0x00023e29
   2439c:	0003a300 	.word	0x0003a300
   243a0:	00039d08 	.word	0x00039d08
   243a4:	0001e979 	.word	0x0001e979
   243a8:	00039d4c 	.word	0x00039d4c
   243ac:	00039d48 	.word	0x00039d48
   243b0:	00039d6c 	.word	0x00039d6c

000243b4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   243b4:	b580      	push	{r7, lr}
   243b6:	b084      	sub	sp, #16
   243b8:	af00      	add	r7, sp, #0
   243ba:	0002      	movs	r2, r0
   243bc:	1dfb      	adds	r3, r7, #7
   243be:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   243c0:	230f      	movs	r3, #15
   243c2:	18fb      	adds	r3, r7, r3
   243c4:	2201      	movs	r2, #1
   243c6:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   243c8:	1dfb      	adds	r3, r7, #7
   243ca:	781b      	ldrb	r3, [r3, #0]
   243cc:	2bcf      	cmp	r3, #207	; 0xcf
   243ce:	d007      	beq.n	243e0 <spi_cmd_rsp+0x2c>
   243d0:	1dfb      	adds	r3, r7, #7
   243d2:	781b      	ldrb	r3, [r3, #0]
   243d4:	2bc5      	cmp	r3, #197	; 0xc5
   243d6:	d003      	beq.n	243e0 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   243d8:	1dfb      	adds	r3, r7, #7
   243da:	781b      	ldrb	r3, [r3, #0]
   243dc:	2bc6      	cmp	r3, #198	; 0xc6
   243de:	d10c      	bne.n	243fa <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   243e0:	230d      	movs	r3, #13
   243e2:	18fb      	adds	r3, r7, r3
   243e4:	2101      	movs	r1, #1
   243e6:	0018      	movs	r0, r3
   243e8:	4b3b      	ldr	r3, [pc, #236]	; (244d8 <spi_cmd_rsp+0x124>)
   243ea:	4798      	blx	r3
   243ec:	1e03      	subs	r3, r0, #0
   243ee:	d004      	beq.n	243fa <spi_cmd_rsp+0x46>
			result = N_FAIL;
   243f0:	230f      	movs	r3, #15
   243f2:	18fb      	adds	r3, r7, r3
   243f4:	2200      	movs	r2, #0
   243f6:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   243f8:	e065      	b.n	244c6 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   243fa:	230e      	movs	r3, #14
   243fc:	18fb      	adds	r3, r7, r3
   243fe:	220a      	movs	r2, #10
   24400:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   24402:	230d      	movs	r3, #13
   24404:	18fb      	adds	r3, r7, r3
   24406:	2101      	movs	r1, #1
   24408:	0018      	movs	r0, r3
   2440a:	4b33      	ldr	r3, [pc, #204]	; (244d8 <spi_cmd_rsp+0x124>)
   2440c:	4798      	blx	r3
   2440e:	1e03      	subs	r3, r0, #0
   24410:	d014      	beq.n	2443c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   24412:	235c      	movs	r3, #92	; 0x5c
   24414:	33ff      	adds	r3, #255	; 0xff
   24416:	001a      	movs	r2, r3
   24418:	4930      	ldr	r1, [pc, #192]	; (244dc <spi_cmd_rsp+0x128>)
   2441a:	4b31      	ldr	r3, [pc, #196]	; (244e0 <spi_cmd_rsp+0x12c>)
   2441c:	0018      	movs	r0, r3
   2441e:	4b31      	ldr	r3, [pc, #196]	; (244e4 <spi_cmd_rsp+0x130>)
   24420:	4798      	blx	r3
   24422:	4b31      	ldr	r3, [pc, #196]	; (244e8 <spi_cmd_rsp+0x134>)
   24424:	0018      	movs	r0, r3
   24426:	4b2f      	ldr	r3, [pc, #188]	; (244e4 <spi_cmd_rsp+0x130>)
   24428:	4798      	blx	r3
   2442a:	4b30      	ldr	r3, [pc, #192]	; (244ec <spi_cmd_rsp+0x138>)
   2442c:	0018      	movs	r0, r3
   2442e:	4b2d      	ldr	r3, [pc, #180]	; (244e4 <spi_cmd_rsp+0x130>)
   24430:	4798      	blx	r3
			result = N_FAIL;
   24432:	230f      	movs	r3, #15
   24434:	18fb      	adds	r3, r7, r3
   24436:	2200      	movs	r2, #0
   24438:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2443a:	e044      	b.n	244c6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   2443c:	230d      	movs	r3, #13
   2443e:	18fb      	adds	r3, r7, r3
   24440:	781b      	ldrb	r3, [r3, #0]
   24442:	1dfa      	adds	r2, r7, #7
   24444:	7812      	ldrb	r2, [r2, #0]
   24446:	429a      	cmp	r2, r3
   24448:	d00b      	beq.n	24462 <spi_cmd_rsp+0xae>
   2444a:	230e      	movs	r3, #14
   2444c:	18fb      	adds	r3, r7, r3
   2444e:	781b      	ldrb	r3, [r3, #0]
   24450:	b25b      	sxtb	r3, r3
   24452:	b2da      	uxtb	r2, r3
   24454:	3a01      	subs	r2, #1
   24456:	b2d1      	uxtb	r1, r2
   24458:	220e      	movs	r2, #14
   2445a:	18ba      	adds	r2, r7, r2
   2445c:	7011      	strb	r1, [r2, #0]
   2445e:	2b00      	cmp	r3, #0
   24460:	dccf      	bgt.n	24402 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   24462:	230e      	movs	r3, #14
   24464:	18fb      	adds	r3, r7, r3
   24466:	220a      	movs	r2, #10
   24468:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2446a:	230d      	movs	r3, #13
   2446c:	18fb      	adds	r3, r7, r3
   2446e:	2101      	movs	r1, #1
   24470:	0018      	movs	r0, r3
   24472:	4b19      	ldr	r3, [pc, #100]	; (244d8 <spi_cmd_rsp+0x124>)
   24474:	4798      	blx	r3
   24476:	1e03      	subs	r3, r0, #0
   24478:	d014      	beq.n	244a4 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2447a:	236a      	movs	r3, #106	; 0x6a
   2447c:	33ff      	adds	r3, #255	; 0xff
   2447e:	001a      	movs	r2, r3
   24480:	4916      	ldr	r1, [pc, #88]	; (244dc <spi_cmd_rsp+0x128>)
   24482:	4b17      	ldr	r3, [pc, #92]	; (244e0 <spi_cmd_rsp+0x12c>)
   24484:	0018      	movs	r0, r3
   24486:	4b17      	ldr	r3, [pc, #92]	; (244e4 <spi_cmd_rsp+0x130>)
   24488:	4798      	blx	r3
   2448a:	4b17      	ldr	r3, [pc, #92]	; (244e8 <spi_cmd_rsp+0x134>)
   2448c:	0018      	movs	r0, r3
   2448e:	4b15      	ldr	r3, [pc, #84]	; (244e4 <spi_cmd_rsp+0x130>)
   24490:	4798      	blx	r3
   24492:	4b16      	ldr	r3, [pc, #88]	; (244ec <spi_cmd_rsp+0x138>)
   24494:	0018      	movs	r0, r3
   24496:	4b13      	ldr	r3, [pc, #76]	; (244e4 <spi_cmd_rsp+0x130>)
   24498:	4798      	blx	r3
			result = N_FAIL;
   2449a:	230f      	movs	r3, #15
   2449c:	18fb      	adds	r3, r7, r3
   2449e:	2200      	movs	r2, #0
   244a0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   244a2:	e010      	b.n	244c6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   244a4:	230d      	movs	r3, #13
   244a6:	18fb      	adds	r3, r7, r3
   244a8:	781b      	ldrb	r3, [r3, #0]
   244aa:	2b00      	cmp	r3, #0
   244ac:	d00b      	beq.n	244c6 <spi_cmd_rsp+0x112>
   244ae:	230e      	movs	r3, #14
   244b0:	18fb      	adds	r3, r7, r3
   244b2:	781b      	ldrb	r3, [r3, #0]
   244b4:	b25b      	sxtb	r3, r3
   244b6:	b2da      	uxtb	r2, r3
   244b8:	3a01      	subs	r2, #1
   244ba:	b2d1      	uxtb	r1, r2
   244bc:	220e      	movs	r2, #14
   244be:	18ba      	adds	r2, r7, r2
   244c0:	7011      	strb	r1, [r2, #0]
   244c2:	2b00      	cmp	r3, #0
   244c4:	dcd1      	bgt.n	2446a <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   244c6:	230f      	movs	r3, #15
   244c8:	18fb      	adds	r3, r7, r3
   244ca:	781b      	ldrb	r3, [r3, #0]
   244cc:	b25b      	sxtb	r3, r3
}
   244ce:	0018      	movs	r0, r3
   244d0:	46bd      	mov	sp, r7
   244d2:	b004      	add	sp, #16
   244d4:	bd80      	pop	{r7, pc}
   244d6:	46c0      	nop			; (mov r8, r8)
   244d8:	00023e29 	.word	0x00023e29
   244dc:	0003a310 	.word	0x0003a310
   244e0:	00039d08 	.word	0x00039d08
   244e4:	0001e979 	.word	0x0001e979
   244e8:	00039d9c 	.word	0x00039d9c
   244ec:	00039d48 	.word	0x00039d48

000244f0 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   244f0:	b590      	push	{r4, r7, lr}
   244f2:	b09f      	sub	sp, #124	; 0x7c
   244f4:	af00      	add	r7, sp, #0
   244f6:	60b9      	str	r1, [r7, #8]
   244f8:	607a      	str	r2, [r7, #4]
   244fa:	603b      	str	r3, [r7, #0]
   244fc:	230f      	movs	r3, #15
   244fe:	18fb      	adds	r3, r7, r3
   24500:	1c02      	adds	r2, r0, #0
   24502:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   24504:	2300      	movs	r3, #0
   24506:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   24508:	2301      	movs	r3, #1
   2450a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   2450c:	2338      	movs	r3, #56	; 0x38
   2450e:	18fb      	adds	r3, r7, r3
   24510:	220f      	movs	r2, #15
   24512:	18ba      	adds	r2, r7, r2
   24514:	7812      	ldrb	r2, [r2, #0]
   24516:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   24518:	230f      	movs	r3, #15
   2451a:	18fb      	adds	r3, r7, r3
   2451c:	781b      	ldrb	r3, [r3, #0]
   2451e:	3bc1      	subs	r3, #193	; 0xc1
   24520:	2b0e      	cmp	r3, #14
   24522:	d900      	bls.n	24526 <spi_cmd_complete+0x36>
   24524:	e103      	b.n	2472e <spi_cmd_complete+0x23e>
   24526:	009a      	lsls	r2, r3, #2
   24528:	4bd1      	ldr	r3, [pc, #836]	; (24870 <spi_cmd_complete+0x380>)
   2452a:	18d3      	adds	r3, r2, r3
   2452c:	681b      	ldr	r3, [r3, #0]
   2452e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   24530:	68bb      	ldr	r3, [r7, #8]
   24532:	0c1b      	lsrs	r3, r3, #16
   24534:	b2da      	uxtb	r2, r3
   24536:	2338      	movs	r3, #56	; 0x38
   24538:	18fb      	adds	r3, r7, r3
   2453a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2453c:	68bb      	ldr	r3, [r7, #8]
   2453e:	0a1b      	lsrs	r3, r3, #8
   24540:	b2da      	uxtb	r2, r3
   24542:	2338      	movs	r3, #56	; 0x38
   24544:	18fb      	adds	r3, r7, r3
   24546:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   24548:	68bb      	ldr	r3, [r7, #8]
   2454a:	b2da      	uxtb	r2, r3
   2454c:	2338      	movs	r3, #56	; 0x38
   2454e:	18fb      	adds	r3, r7, r3
   24550:	70da      	strb	r2, [r3, #3]
		len = 5;
   24552:	2305      	movs	r3, #5
   24554:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   24556:	e0ed      	b.n	24734 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   24558:	68bb      	ldr	r3, [r7, #8]
   2455a:	0a1b      	lsrs	r3, r3, #8
   2455c:	b2da      	uxtb	r2, r3
   2455e:	2338      	movs	r3, #56	; 0x38
   24560:	18fb      	adds	r3, r7, r3
   24562:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   24564:	2388      	movs	r3, #136	; 0x88
   24566:	18fb      	adds	r3, r7, r3
   24568:	781b      	ldrb	r3, [r3, #0]
   2456a:	2b01      	cmp	r3, #1
   2456c:	d109      	bne.n	24582 <spi_cmd_complete+0x92>
   2456e:	2338      	movs	r3, #56	; 0x38
   24570:	18fb      	adds	r3, r7, r3
   24572:	785b      	ldrb	r3, [r3, #1]
   24574:	2280      	movs	r2, #128	; 0x80
   24576:	4252      	negs	r2, r2
   24578:	4313      	orrs	r3, r2
   2457a:	b2da      	uxtb	r2, r3
   2457c:	2338      	movs	r3, #56	; 0x38
   2457e:	18fb      	adds	r3, r7, r3
   24580:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   24582:	68bb      	ldr	r3, [r7, #8]
   24584:	b2da      	uxtb	r2, r3
   24586:	2338      	movs	r3, #56	; 0x38
   24588:	18fb      	adds	r3, r7, r3
   2458a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2458c:	2338      	movs	r3, #56	; 0x38
   2458e:	18fb      	adds	r3, r7, r3
   24590:	2200      	movs	r2, #0
   24592:	70da      	strb	r2, [r3, #3]
		len = 5;
   24594:	2305      	movs	r3, #5
   24596:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24598:	e0cc      	b.n	24734 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   2459a:	2338      	movs	r3, #56	; 0x38
   2459c:	18fb      	adds	r3, r7, r3
   2459e:	2200      	movs	r2, #0
   245a0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   245a2:	2338      	movs	r3, #56	; 0x38
   245a4:	18fb      	adds	r3, r7, r3
   245a6:	2200      	movs	r2, #0
   245a8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   245aa:	2338      	movs	r3, #56	; 0x38
   245ac:	18fb      	adds	r3, r7, r3
   245ae:	2200      	movs	r2, #0
   245b0:	70da      	strb	r2, [r3, #3]
		len = 5;
   245b2:	2305      	movs	r3, #5
   245b4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   245b6:	e0bd      	b.n	24734 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   245b8:	2338      	movs	r3, #56	; 0x38
   245ba:	18fb      	adds	r3, r7, r3
   245bc:	2200      	movs	r2, #0
   245be:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   245c0:	2338      	movs	r3, #56	; 0x38
   245c2:	18fb      	adds	r3, r7, r3
   245c4:	2200      	movs	r2, #0
   245c6:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   245c8:	2338      	movs	r3, #56	; 0x38
   245ca:	18fb      	adds	r3, r7, r3
   245cc:	2200      	movs	r2, #0
   245ce:	70da      	strb	r2, [r3, #3]
		len = 5;
   245d0:	2305      	movs	r3, #5
   245d2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   245d4:	e0ae      	b.n	24734 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   245d6:	2338      	movs	r3, #56	; 0x38
   245d8:	18fb      	adds	r3, r7, r3
   245da:	22ff      	movs	r2, #255	; 0xff
   245dc:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   245de:	2338      	movs	r3, #56	; 0x38
   245e0:	18fb      	adds	r3, r7, r3
   245e2:	22ff      	movs	r2, #255	; 0xff
   245e4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   245e6:	2338      	movs	r3, #56	; 0x38
   245e8:	18fb      	adds	r3, r7, r3
   245ea:	22ff      	movs	r2, #255	; 0xff
   245ec:	70da      	strb	r2, [r3, #3]
		len = 5;
   245ee:	2305      	movs	r3, #5
   245f0:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   245f2:	e09f      	b.n	24734 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   245f4:	68bb      	ldr	r3, [r7, #8]
   245f6:	0c1b      	lsrs	r3, r3, #16
   245f8:	b2da      	uxtb	r2, r3
   245fa:	2338      	movs	r3, #56	; 0x38
   245fc:	18fb      	adds	r3, r7, r3
   245fe:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24600:	68bb      	ldr	r3, [r7, #8]
   24602:	0a1b      	lsrs	r3, r3, #8
   24604:	b2da      	uxtb	r2, r3
   24606:	2338      	movs	r3, #56	; 0x38
   24608:	18fb      	adds	r3, r7, r3
   2460a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2460c:	68bb      	ldr	r3, [r7, #8]
   2460e:	b2da      	uxtb	r2, r3
   24610:	2338      	movs	r3, #56	; 0x38
   24612:	18fb      	adds	r3, r7, r3
   24614:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   24616:	683b      	ldr	r3, [r7, #0]
   24618:	0a1b      	lsrs	r3, r3, #8
   2461a:	b2da      	uxtb	r2, r3
   2461c:	2338      	movs	r3, #56	; 0x38
   2461e:	18fb      	adds	r3, r7, r3
   24620:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   24622:	683b      	ldr	r3, [r7, #0]
   24624:	b2da      	uxtb	r2, r3
   24626:	2338      	movs	r3, #56	; 0x38
   24628:	18fb      	adds	r3, r7, r3
   2462a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2462c:	2307      	movs	r3, #7
   2462e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24630:	e080      	b.n	24734 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   24632:	68bb      	ldr	r3, [r7, #8]
   24634:	0c1b      	lsrs	r3, r3, #16
   24636:	b2da      	uxtb	r2, r3
   24638:	2338      	movs	r3, #56	; 0x38
   2463a:	18fb      	adds	r3, r7, r3
   2463c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2463e:	68bb      	ldr	r3, [r7, #8]
   24640:	0a1b      	lsrs	r3, r3, #8
   24642:	b2da      	uxtb	r2, r3
   24644:	2338      	movs	r3, #56	; 0x38
   24646:	18fb      	adds	r3, r7, r3
   24648:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2464a:	68bb      	ldr	r3, [r7, #8]
   2464c:	b2da      	uxtb	r2, r3
   2464e:	2338      	movs	r3, #56	; 0x38
   24650:	18fb      	adds	r3, r7, r3
   24652:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   24654:	683b      	ldr	r3, [r7, #0]
   24656:	0c1b      	lsrs	r3, r3, #16
   24658:	b2da      	uxtb	r2, r3
   2465a:	2338      	movs	r3, #56	; 0x38
   2465c:	18fb      	adds	r3, r7, r3
   2465e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   24660:	683b      	ldr	r3, [r7, #0]
   24662:	0a1b      	lsrs	r3, r3, #8
   24664:	b2da      	uxtb	r2, r3
   24666:	2338      	movs	r3, #56	; 0x38
   24668:	18fb      	adds	r3, r7, r3
   2466a:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   2466c:	683b      	ldr	r3, [r7, #0]
   2466e:	b2da      	uxtb	r2, r3
   24670:	2338      	movs	r3, #56	; 0x38
   24672:	18fb      	adds	r3, r7, r3
   24674:	719a      	strb	r2, [r3, #6]
		len = 8;
   24676:	2308      	movs	r3, #8
   24678:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2467a:	e05b      	b.n	24734 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   2467c:	68bb      	ldr	r3, [r7, #8]
   2467e:	0a1b      	lsrs	r3, r3, #8
   24680:	b2da      	uxtb	r2, r3
   24682:	2338      	movs	r3, #56	; 0x38
   24684:	18fb      	adds	r3, r7, r3
   24686:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   24688:	2388      	movs	r3, #136	; 0x88
   2468a:	18fb      	adds	r3, r7, r3
   2468c:	781b      	ldrb	r3, [r3, #0]
   2468e:	2b01      	cmp	r3, #1
   24690:	d109      	bne.n	246a6 <spi_cmd_complete+0x1b6>
   24692:	2338      	movs	r3, #56	; 0x38
   24694:	18fb      	adds	r3, r7, r3
   24696:	785b      	ldrb	r3, [r3, #1]
   24698:	2280      	movs	r2, #128	; 0x80
   2469a:	4252      	negs	r2, r2
   2469c:	4313      	orrs	r3, r2
   2469e:	b2da      	uxtb	r2, r3
   246a0:	2338      	movs	r3, #56	; 0x38
   246a2:	18fb      	adds	r3, r7, r3
   246a4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   246a6:	68bb      	ldr	r3, [r7, #8]
   246a8:	b2da      	uxtb	r2, r3
   246aa:	2338      	movs	r3, #56	; 0x38
   246ac:	18fb      	adds	r3, r7, r3
   246ae:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   246b0:	687b      	ldr	r3, [r7, #4]
   246b2:	78da      	ldrb	r2, [r3, #3]
   246b4:	2338      	movs	r3, #56	; 0x38
   246b6:	18fb      	adds	r3, r7, r3
   246b8:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   246ba:	687b      	ldr	r3, [r7, #4]
   246bc:	789a      	ldrb	r2, [r3, #2]
   246be:	2338      	movs	r3, #56	; 0x38
   246c0:	18fb      	adds	r3, r7, r3
   246c2:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   246c4:	687b      	ldr	r3, [r7, #4]
   246c6:	785a      	ldrb	r2, [r3, #1]
   246c8:	2338      	movs	r3, #56	; 0x38
   246ca:	18fb      	adds	r3, r7, r3
   246cc:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   246ce:	687b      	ldr	r3, [r7, #4]
   246d0:	781a      	ldrb	r2, [r3, #0]
   246d2:	2338      	movs	r3, #56	; 0x38
   246d4:	18fb      	adds	r3, r7, r3
   246d6:	719a      	strb	r2, [r3, #6]
		len = 8;
   246d8:	2308      	movs	r3, #8
   246da:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   246dc:	e02a      	b.n	24734 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   246de:	68bb      	ldr	r3, [r7, #8]
   246e0:	0c1b      	lsrs	r3, r3, #16
   246e2:	b2da      	uxtb	r2, r3
   246e4:	2338      	movs	r3, #56	; 0x38
   246e6:	18fb      	adds	r3, r7, r3
   246e8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   246ea:	68bb      	ldr	r3, [r7, #8]
   246ec:	0a1b      	lsrs	r3, r3, #8
   246ee:	b2da      	uxtb	r2, r3
   246f0:	2338      	movs	r3, #56	; 0x38
   246f2:	18fb      	adds	r3, r7, r3
   246f4:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   246f6:	68bb      	ldr	r3, [r7, #8]
   246f8:	b2da      	uxtb	r2, r3
   246fa:	2338      	movs	r3, #56	; 0x38
   246fc:	18fb      	adds	r3, r7, r3
   246fe:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   24700:	687b      	ldr	r3, [r7, #4]
   24702:	78da      	ldrb	r2, [r3, #3]
   24704:	2338      	movs	r3, #56	; 0x38
   24706:	18fb      	adds	r3, r7, r3
   24708:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2470a:	687b      	ldr	r3, [r7, #4]
   2470c:	789a      	ldrb	r2, [r3, #2]
   2470e:	2338      	movs	r3, #56	; 0x38
   24710:	18fb      	adds	r3, r7, r3
   24712:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   24714:	687b      	ldr	r3, [r7, #4]
   24716:	785a      	ldrb	r2, [r3, #1]
   24718:	2338      	movs	r3, #56	; 0x38
   2471a:	18fb      	adds	r3, r7, r3
   2471c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   2471e:	687b      	ldr	r3, [r7, #4]
   24720:	781a      	ldrb	r2, [r3, #0]
   24722:	2338      	movs	r3, #56	; 0x38
   24724:	18fb      	adds	r3, r7, r3
   24726:	71da      	strb	r2, [r3, #7]
		len = 9;
   24728:	2309      	movs	r3, #9
   2472a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2472c:	e002      	b.n	24734 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   2472e:	2300      	movs	r3, #0
   24730:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   24732:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   24734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24736:	2b01      	cmp	r3, #1
   24738:	d001      	beq.n	2473e <spi_cmd_complete+0x24e>
		return result;
   2473a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2473c:	e33a      	b.n	24db4 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2473e:	4b4d      	ldr	r3, [pc, #308]	; (24874 <spi_cmd_complete+0x384>)
   24740:	781b      	ldrb	r3, [r3, #0]
   24742:	2b00      	cmp	r3, #0
   24744:	d111      	bne.n	2476a <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   24746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24748:	1e5c      	subs	r4, r3, #1
   2474a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2474c:	3b01      	subs	r3, #1
   2474e:	001a      	movs	r2, r3
   24750:	2338      	movs	r3, #56	; 0x38
   24752:	18fb      	adds	r3, r7, r3
   24754:	0019      	movs	r1, r3
   24756:	207f      	movs	r0, #127	; 0x7f
   24758:	4b47      	ldr	r3, [pc, #284]	; (24878 <spi_cmd_complete+0x388>)
   2475a:	4798      	blx	r3
   2475c:	0003      	movs	r3, r0
   2475e:	18db      	adds	r3, r3, r3
   24760:	b2da      	uxtb	r2, r3
   24762:	2338      	movs	r3, #56	; 0x38
   24764:	18fb      	adds	r3, r7, r3
   24766:	551a      	strb	r2, [r3, r4]
   24768:	e002      	b.n	24770 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   2476a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2476c:	3b01      	subs	r3, #1
   2476e:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   24770:	230f      	movs	r3, #15
   24772:	18fb      	adds	r3, r7, r3
   24774:	781b      	ldrb	r3, [r3, #0]
   24776:	2bcf      	cmp	r3, #207	; 0xcf
   24778:	d009      	beq.n	2478e <spi_cmd_complete+0x29e>
   2477a:	230f      	movs	r3, #15
   2477c:	18fb      	adds	r3, r7, r3
   2477e:	781b      	ldrb	r3, [r3, #0]
   24780:	2bc5      	cmp	r3, #197	; 0xc5
   24782:	d004      	beq.n	2478e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   24784:	230f      	movs	r3, #15
   24786:	18fb      	adds	r3, r7, r3
   24788:	781b      	ldrb	r3, [r3, #0]
   2478a:	2bc6      	cmp	r3, #198	; 0xc6
   2478c:	d103      	bne.n	24796 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2478e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24790:	3306      	adds	r3, #6
   24792:	673b      	str	r3, [r7, #112]	; 0x70
   24794:	e018      	b.n	247c8 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24796:	230f      	movs	r3, #15
   24798:	18fb      	adds	r3, r7, r3
   2479a:	781b      	ldrb	r3, [r3, #0]
   2479c:	2bc4      	cmp	r3, #196	; 0xc4
   2479e:	d004      	beq.n	247aa <spi_cmd_complete+0x2ba>
   247a0:	230f      	movs	r3, #15
   247a2:	18fb      	adds	r3, r7, r3
   247a4:	781b      	ldrb	r3, [r3, #0]
   247a6:	2bca      	cmp	r3, #202	; 0xca
   247a8:	d10b      	bne.n	247c2 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   247aa:	4b32      	ldr	r3, [pc, #200]	; (24874 <spi_cmd_complete+0x384>)
   247ac:	781b      	ldrb	r3, [r3, #0]
   247ae:	2b00      	cmp	r3, #0
   247b0:	d103      	bne.n	247ba <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   247b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   247b4:	330c      	adds	r3, #12
   247b6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   247b8:	e006      	b.n	247c8 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   247ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   247bc:	330a      	adds	r3, #10
   247be:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   247c0:	e002      	b.n	247c8 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   247c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   247c4:	3305      	adds	r3, #5
   247c6:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   247c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   247ca:	2b20      	cmp	r3, #32
   247cc:	d914      	bls.n	247f8 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   247ce:	23f7      	movs	r3, #247	; 0xf7
   247d0:	005a      	lsls	r2, r3, #1
   247d2:	492a      	ldr	r1, [pc, #168]	; (2487c <spi_cmd_complete+0x38c>)
   247d4:	4b2a      	ldr	r3, [pc, #168]	; (24880 <spi_cmd_complete+0x390>)
   247d6:	0018      	movs	r0, r3
   247d8:	4b2a      	ldr	r3, [pc, #168]	; (24884 <spi_cmd_complete+0x394>)
   247da:	4798      	blx	r3
   247dc:	6f39      	ldr	r1, [r7, #112]	; 0x70
   247de:	4b2a      	ldr	r3, [pc, #168]	; (24888 <spi_cmd_complete+0x398>)
   247e0:	2220      	movs	r2, #32
   247e2:	0018      	movs	r0, r3
   247e4:	4b27      	ldr	r3, [pc, #156]	; (24884 <spi_cmd_complete+0x394>)
   247e6:	4798      	blx	r3
   247e8:	4b28      	ldr	r3, [pc, #160]	; (2488c <spi_cmd_complete+0x39c>)
   247ea:	0018      	movs	r0, r3
   247ec:	4b25      	ldr	r3, [pc, #148]	; (24884 <spi_cmd_complete+0x394>)
   247ee:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   247f0:	2300      	movs	r3, #0
   247f2:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   247f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   247f6:	e2dd      	b.n	24db4 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   247f8:	2377      	movs	r3, #119	; 0x77
   247fa:	18fb      	adds	r3, r7, r3
   247fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   247fe:	701a      	strb	r2, [r3, #0]
   24800:	e00d      	b.n	2481e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   24802:	2377      	movs	r3, #119	; 0x77
   24804:	18fb      	adds	r3, r7, r3
   24806:	781b      	ldrb	r3, [r3, #0]
   24808:	2238      	movs	r2, #56	; 0x38
   2480a:	18ba      	adds	r2, r7, r2
   2480c:	2100      	movs	r1, #0
   2480e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   24810:	2377      	movs	r3, #119	; 0x77
   24812:	18fb      	adds	r3, r7, r3
   24814:	781a      	ldrb	r2, [r3, #0]
   24816:	2377      	movs	r3, #119	; 0x77
   24818:	18fb      	adds	r3, r7, r3
   2481a:	3201      	adds	r2, #1
   2481c:	701a      	strb	r2, [r3, #0]
   2481e:	2377      	movs	r3, #119	; 0x77
   24820:	18fb      	adds	r3, r7, r3
   24822:	781a      	ldrb	r2, [r3, #0]
   24824:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24826:	429a      	cmp	r2, r3
   24828:	d3eb      	bcc.n	24802 <spi_cmd_complete+0x312>
	}
	rix = len;
   2482a:	2376      	movs	r3, #118	; 0x76
   2482c:	18fb      	adds	r3, r7, r3
   2482e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24830:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   24832:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24834:	b29a      	uxth	r2, r3
   24836:	2318      	movs	r3, #24
   24838:	18f9      	adds	r1, r7, r3
   2483a:	2338      	movs	r3, #56	; 0x38
   2483c:	18fb      	adds	r3, r7, r3
   2483e:	0018      	movs	r0, r3
   24840:	4b13      	ldr	r3, [pc, #76]	; (24890 <spi_cmd_complete+0x3a0>)
   24842:	4798      	blx	r3
   24844:	1e03      	subs	r3, r0, #0
   24846:	d027      	beq.n	24898 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   24848:	23fa      	movs	r3, #250	; 0xfa
   2484a:	33ff      	adds	r3, #255	; 0xff
   2484c:	001a      	movs	r2, r3
   2484e:	490b      	ldr	r1, [pc, #44]	; (2487c <spi_cmd_complete+0x38c>)
   24850:	4b0b      	ldr	r3, [pc, #44]	; (24880 <spi_cmd_complete+0x390>)
   24852:	0018      	movs	r0, r3
   24854:	4b0b      	ldr	r3, [pc, #44]	; (24884 <spi_cmd_complete+0x394>)
   24856:	4798      	blx	r3
   24858:	4b0e      	ldr	r3, [pc, #56]	; (24894 <spi_cmd_complete+0x3a4>)
   2485a:	0018      	movs	r0, r3
   2485c:	4b09      	ldr	r3, [pc, #36]	; (24884 <spi_cmd_complete+0x394>)
   2485e:	4798      	blx	r3
   24860:	4b0a      	ldr	r3, [pc, #40]	; (2488c <spi_cmd_complete+0x39c>)
   24862:	0018      	movs	r0, r3
   24864:	4b07      	ldr	r3, [pc, #28]	; (24884 <spi_cmd_complete+0x394>)
   24866:	4798      	blx	r3
		result = N_FAIL;
   24868:	2300      	movs	r3, #0
   2486a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2486c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2486e:	e2a1      	b.n	24db4 <spi_cmd_complete+0x8c4>
   24870:	0003a2bc 	.word	0x0003a2bc
   24874:	200042b0 	.word	0x200042b0
   24878:	00023f25 	.word	0x00023f25
   2487c:	0003a31c 	.word	0x0003a31c
   24880:	00039d08 	.word	0x00039d08
   24884:	0001e979 	.word	0x0001e979
   24888:	00039dd0 	.word	0x00039dd0
   2488c:	00039d48 	.word	0x00039d48
   24890:	00023eb1 	.word	0x00023eb1
   24894:	00039d1c 	.word	0x00039d1c
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   24898:	230f      	movs	r3, #15
   2489a:	18fb      	adds	r3, r7, r3
   2489c:	781b      	ldrb	r3, [r3, #0]
   2489e:	2bcf      	cmp	r3, #207	; 0xcf
   248a0:	d009      	beq.n	248b6 <spi_cmd_complete+0x3c6>
   248a2:	230f      	movs	r3, #15
   248a4:	18fb      	adds	r3, r7, r3
   248a6:	781b      	ldrb	r3, [r3, #0]
   248a8:	2bc5      	cmp	r3, #197	; 0xc5
   248aa:	d004      	beq.n	248b6 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   248ac:	230f      	movs	r3, #15
   248ae:	18fb      	adds	r3, r7, r3
   248b0:	781b      	ldrb	r3, [r3, #0]
   248b2:	2bc6      	cmp	r3, #198	; 0xc6
   248b4:	d106      	bne.n	248c4 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   248b6:	2376      	movs	r3, #118	; 0x76
   248b8:	18fb      	adds	r3, r7, r3
   248ba:	781a      	ldrb	r2, [r3, #0]
   248bc:	2376      	movs	r3, #118	; 0x76
   248be:	18fb      	adds	r3, r7, r3
   248c0:	3201      	adds	r2, #1
   248c2:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   248c4:	2376      	movs	r3, #118	; 0x76
   248c6:	18fb      	adds	r3, r7, r3
   248c8:	781b      	ldrb	r3, [r3, #0]
   248ca:	2276      	movs	r2, #118	; 0x76
   248cc:	18ba      	adds	r2, r7, r2
   248ce:	1c59      	adds	r1, r3, #1
   248d0:	7011      	strb	r1, [r2, #0]
   248d2:	001a      	movs	r2, r3
   248d4:	2318      	movs	r3, #24
   248d6:	18fb      	adds	r3, r7, r3
   248d8:	5c9a      	ldrb	r2, [r3, r2]
   248da:	2317      	movs	r3, #23
   248dc:	18fb      	adds	r3, r7, r3
   248de:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   248e0:	2317      	movs	r3, #23
   248e2:	18fb      	adds	r3, r7, r3
   248e4:	781b      	ldrb	r3, [r3, #0]
   248e6:	220f      	movs	r2, #15
   248e8:	18ba      	adds	r2, r7, r2
   248ea:	7812      	ldrb	r2, [r2, #0]
   248ec:	429a      	cmp	r2, r3
   248ee:	d018      	beq.n	24922 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   248f0:	4add      	ldr	r2, [pc, #884]	; (24c68 <spi_cmd_complete+0x778>)
   248f2:	49de      	ldr	r1, [pc, #888]	; (24c6c <spi_cmd_complete+0x77c>)
   248f4:	4bde      	ldr	r3, [pc, #888]	; (24c70 <spi_cmd_complete+0x780>)
   248f6:	0018      	movs	r0, r3
   248f8:	4bde      	ldr	r3, [pc, #888]	; (24c74 <spi_cmd_complete+0x784>)
   248fa:	4798      	blx	r3
   248fc:	230f      	movs	r3, #15
   248fe:	18fb      	adds	r3, r7, r3
   24900:	7819      	ldrb	r1, [r3, #0]
   24902:	2317      	movs	r3, #23
   24904:	18fb      	adds	r3, r7, r3
   24906:	781b      	ldrb	r3, [r3, #0]
   24908:	001a      	movs	r2, r3
   2490a:	4bdb      	ldr	r3, [pc, #876]	; (24c78 <spi_cmd_complete+0x788>)
   2490c:	0018      	movs	r0, r3
   2490e:	4bd9      	ldr	r3, [pc, #868]	; (24c74 <spi_cmd_complete+0x784>)
   24910:	4798      	blx	r3
   24912:	4bda      	ldr	r3, [pc, #872]	; (24c7c <spi_cmd_complete+0x78c>)
   24914:	0018      	movs	r0, r3
   24916:	4bd7      	ldr	r3, [pc, #860]	; (24c74 <spi_cmd_complete+0x784>)
   24918:	4798      	blx	r3
		result = N_FAIL;
   2491a:	2300      	movs	r3, #0
   2491c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2491e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24920:	e248      	b.n	24db4 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   24922:	2376      	movs	r3, #118	; 0x76
   24924:	18fb      	adds	r3, r7, r3
   24926:	781b      	ldrb	r3, [r3, #0]
   24928:	2276      	movs	r2, #118	; 0x76
   2492a:	18ba      	adds	r2, r7, r2
   2492c:	1c59      	adds	r1, r3, #1
   2492e:	7011      	strb	r1, [r2, #0]
   24930:	001a      	movs	r2, r3
   24932:	2318      	movs	r3, #24
   24934:	18fb      	adds	r3, r7, r3
   24936:	5c9a      	ldrb	r2, [r3, r2]
   24938:	2317      	movs	r3, #23
   2493a:	18fb      	adds	r3, r7, r3
   2493c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   2493e:	2317      	movs	r3, #23
   24940:	18fb      	adds	r3, r7, r3
   24942:	781b      	ldrb	r3, [r3, #0]
   24944:	2b00      	cmp	r3, #0
   24946:	d016      	beq.n	24976 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   24948:	4acd      	ldr	r2, [pc, #820]	; (24c80 <spi_cmd_complete+0x790>)
   2494a:	49c8      	ldr	r1, [pc, #800]	; (24c6c <spi_cmd_complete+0x77c>)
   2494c:	4bc8      	ldr	r3, [pc, #800]	; (24c70 <spi_cmd_complete+0x780>)
   2494e:	0018      	movs	r0, r3
   24950:	4bc8      	ldr	r3, [pc, #800]	; (24c74 <spi_cmd_complete+0x784>)
   24952:	4798      	blx	r3
   24954:	2317      	movs	r3, #23
   24956:	18fb      	adds	r3, r7, r3
   24958:	781b      	ldrb	r3, [r3, #0]
   2495a:	001a      	movs	r2, r3
   2495c:	4bc9      	ldr	r3, [pc, #804]	; (24c84 <spi_cmd_complete+0x794>)
   2495e:	0011      	movs	r1, r2
   24960:	0018      	movs	r0, r3
   24962:	4bc4      	ldr	r3, [pc, #784]	; (24c74 <spi_cmd_complete+0x784>)
   24964:	4798      	blx	r3
   24966:	4bc5      	ldr	r3, [pc, #788]	; (24c7c <spi_cmd_complete+0x78c>)
   24968:	0018      	movs	r0, r3
   2496a:	4bc2      	ldr	r3, [pc, #776]	; (24c74 <spi_cmd_complete+0x784>)
   2496c:	4798      	blx	r3
		result = N_FAIL;
   2496e:	2300      	movs	r3, #0
   24970:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24974:	e21e      	b.n	24db4 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   24976:	230f      	movs	r3, #15
   24978:	18fb      	adds	r3, r7, r3
   2497a:	781b      	ldrb	r3, [r3, #0]
   2497c:	2bc4      	cmp	r3, #196	; 0xc4
   2497e:	d00f      	beq.n	249a0 <spi_cmd_complete+0x4b0>
   24980:	230f      	movs	r3, #15
   24982:	18fb      	adds	r3, r7, r3
   24984:	781b      	ldrb	r3, [r3, #0]
   24986:	2bca      	cmp	r3, #202	; 0xca
   24988:	d00a      	beq.n	249a0 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   2498a:	230f      	movs	r3, #15
   2498c:	18fb      	adds	r3, r7, r3
   2498e:	781b      	ldrb	r3, [r3, #0]
   24990:	2bc2      	cmp	r3, #194	; 0xc2
   24992:	d005      	beq.n	249a0 <spi_cmd_complete+0x4b0>
   24994:	230f      	movs	r3, #15
   24996:	18fb      	adds	r3, r7, r3
   24998:	781b      	ldrb	r3, [r3, #0]
   2499a:	2bc8      	cmp	r3, #200	; 0xc8
   2499c:	d000      	beq.n	249a0 <spi_cmd_complete+0x4b0>
   2499e:	e208      	b.n	24db2 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   249a0:	230a      	movs	r3, #10
   249a2:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   249a4:	2376      	movs	r3, #118	; 0x76
   249a6:	18fb      	adds	r3, r7, r3
   249a8:	781a      	ldrb	r2, [r3, #0]
   249aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   249ac:	429a      	cmp	r2, r3
   249ae:	d218      	bcs.n	249e2 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   249b0:	2376      	movs	r3, #118	; 0x76
   249b2:	18fb      	adds	r3, r7, r3
   249b4:	781b      	ldrb	r3, [r3, #0]
   249b6:	2276      	movs	r2, #118	; 0x76
   249b8:	18ba      	adds	r2, r7, r2
   249ba:	1c59      	adds	r1, r3, #1
   249bc:	7011      	strb	r1, [r2, #0]
   249be:	001a      	movs	r2, r3
   249c0:	2318      	movs	r3, #24
   249c2:	18fb      	adds	r3, r7, r3
   249c4:	5c9a      	ldrb	r2, [r3, r2]
   249c6:	2317      	movs	r3, #23
   249c8:	18fb      	adds	r3, r7, r3
   249ca:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   249cc:	2317      	movs	r3, #23
   249ce:	18fb      	adds	r3, r7, r3
   249d0:	781b      	ldrb	r3, [r3, #0]
   249d2:	091b      	lsrs	r3, r3, #4
   249d4:	b2db      	uxtb	r3, r3
   249d6:	001a      	movs	r2, r3
   249d8:	230f      	movs	r3, #15
   249da:	4013      	ands	r3, r2
   249dc:	2b0f      	cmp	r3, #15
   249de:	d103      	bne.n	249e8 <spi_cmd_complete+0x4f8>
					break;
   249e0:	e007      	b.n	249f2 <spi_cmd_complete+0x502>
					retry = 0;
   249e2:	2300      	movs	r3, #0
   249e4:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   249e6:	e004      	b.n	249f2 <spi_cmd_complete+0x502>
			} while (retry--);
   249e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   249ea:	1e5a      	subs	r2, r3, #1
   249ec:	667a      	str	r2, [r7, #100]	; 0x64
   249ee:	2b00      	cmp	r3, #0
   249f0:	d1d8      	bne.n	249a4 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   249f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   249f4:	2b00      	cmp	r3, #0
   249f6:	dc18      	bgt.n	24a2a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   249f8:	2395      	movs	r3, #149	; 0x95
   249fa:	009a      	lsls	r2, r3, #2
   249fc:	499b      	ldr	r1, [pc, #620]	; (24c6c <spi_cmd_complete+0x77c>)
   249fe:	4b9c      	ldr	r3, [pc, #624]	; (24c70 <spi_cmd_complete+0x780>)
   24a00:	0018      	movs	r0, r3
   24a02:	4b9c      	ldr	r3, [pc, #624]	; (24c74 <spi_cmd_complete+0x784>)
   24a04:	4798      	blx	r3
   24a06:	2317      	movs	r3, #23
   24a08:	18fb      	adds	r3, r7, r3
   24a0a:	781b      	ldrb	r3, [r3, #0]
   24a0c:	001a      	movs	r2, r3
   24a0e:	4b9e      	ldr	r3, [pc, #632]	; (24c88 <spi_cmd_complete+0x798>)
   24a10:	0011      	movs	r1, r2
   24a12:	0018      	movs	r0, r3
   24a14:	4b97      	ldr	r3, [pc, #604]	; (24c74 <spi_cmd_complete+0x784>)
   24a16:	4798      	blx	r3
   24a18:	4b98      	ldr	r3, [pc, #608]	; (24c7c <spi_cmd_complete+0x78c>)
   24a1a:	0018      	movs	r0, r3
   24a1c:	4b95      	ldr	r3, [pc, #596]	; (24c74 <spi_cmd_complete+0x784>)
   24a1e:	4798      	blx	r3
				result = N_RESET;
   24a20:	2301      	movs	r3, #1
   24a22:	425b      	negs	r3, r3
   24a24:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   24a26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24a28:	e1c4      	b.n	24db4 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24a2a:	230f      	movs	r3, #15
   24a2c:	18fb      	adds	r3, r7, r3
   24a2e:	781b      	ldrb	r3, [r3, #0]
   24a30:	2bc4      	cmp	r3, #196	; 0xc4
   24a32:	d005      	beq.n	24a40 <spi_cmd_complete+0x550>
   24a34:	230f      	movs	r3, #15
   24a36:	18fb      	adds	r3, r7, r3
   24a38:	781b      	ldrb	r3, [r3, #0]
   24a3a:	2bca      	cmp	r3, #202	; 0xca
   24a3c:	d000      	beq.n	24a40 <spi_cmd_complete+0x550>
   24a3e:	e08e      	b.n	24b5e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   24a40:	2376      	movs	r3, #118	; 0x76
   24a42:	18fb      	adds	r3, r7, r3
   24a44:	781b      	ldrb	r3, [r3, #0]
   24a46:	3303      	adds	r3, #3
   24a48:	001a      	movs	r2, r3
   24a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24a4c:	429a      	cmp	r2, r3
   24a4e:	d23c      	bcs.n	24aca <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   24a50:	2376      	movs	r3, #118	; 0x76
   24a52:	18fb      	adds	r3, r7, r3
   24a54:	781b      	ldrb	r3, [r3, #0]
   24a56:	2276      	movs	r2, #118	; 0x76
   24a58:	18ba      	adds	r2, r7, r2
   24a5a:	1c59      	adds	r1, r3, #1
   24a5c:	7011      	strb	r1, [r2, #0]
   24a5e:	001a      	movs	r2, r3
   24a60:	2318      	movs	r3, #24
   24a62:	18fb      	adds	r3, r7, r3
   24a64:	5c9a      	ldrb	r2, [r3, r2]
   24a66:	687b      	ldr	r3, [r7, #4]
   24a68:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   24a6a:	687b      	ldr	r3, [r7, #4]
   24a6c:	1c5a      	adds	r2, r3, #1
   24a6e:	2376      	movs	r3, #118	; 0x76
   24a70:	18fb      	adds	r3, r7, r3
   24a72:	781b      	ldrb	r3, [r3, #0]
   24a74:	2176      	movs	r1, #118	; 0x76
   24a76:	1879      	adds	r1, r7, r1
   24a78:	1c58      	adds	r0, r3, #1
   24a7a:	7008      	strb	r0, [r1, #0]
   24a7c:	0019      	movs	r1, r3
   24a7e:	2318      	movs	r3, #24
   24a80:	18fb      	adds	r3, r7, r3
   24a82:	5c5b      	ldrb	r3, [r3, r1]
   24a84:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   24a86:	687b      	ldr	r3, [r7, #4]
   24a88:	1c9a      	adds	r2, r3, #2
   24a8a:	2376      	movs	r3, #118	; 0x76
   24a8c:	18fb      	adds	r3, r7, r3
   24a8e:	781b      	ldrb	r3, [r3, #0]
   24a90:	2176      	movs	r1, #118	; 0x76
   24a92:	1879      	adds	r1, r7, r1
   24a94:	1c58      	adds	r0, r3, #1
   24a96:	7008      	strb	r0, [r1, #0]
   24a98:	0019      	movs	r1, r3
   24a9a:	2318      	movs	r3, #24
   24a9c:	18fb      	adds	r3, r7, r3
   24a9e:	5c5b      	ldrb	r3, [r3, r1]
   24aa0:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   24aa2:	687b      	ldr	r3, [r7, #4]
   24aa4:	1cda      	adds	r2, r3, #3
   24aa6:	2376      	movs	r3, #118	; 0x76
   24aa8:	18fb      	adds	r3, r7, r3
   24aaa:	781b      	ldrb	r3, [r3, #0]
   24aac:	2176      	movs	r1, #118	; 0x76
   24aae:	1879      	adds	r1, r7, r1
   24ab0:	1c58      	adds	r0, r3, #1
   24ab2:	7008      	strb	r0, [r1, #0]
   24ab4:	0019      	movs	r1, r3
   24ab6:	2318      	movs	r3, #24
   24ab8:	18fb      	adds	r3, r7, r3
   24aba:	5c5b      	ldrb	r3, [r3, r1]
   24abc:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   24abe:	4b73      	ldr	r3, [pc, #460]	; (24c8c <spi_cmd_complete+0x79c>)
   24ac0:	781b      	ldrb	r3, [r3, #0]
   24ac2:	2b00      	cmp	r3, #0
   24ac4:	d000      	beq.n	24ac8 <spi_cmd_complete+0x5d8>
   24ac6:	e174      	b.n	24db2 <spi_cmd_complete+0x8c2>
   24ac8:	e011      	b.n	24aee <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   24aca:	4a71      	ldr	r2, [pc, #452]	; (24c90 <spi_cmd_complete+0x7a0>)
   24acc:	4967      	ldr	r1, [pc, #412]	; (24c6c <spi_cmd_complete+0x77c>)
   24ace:	4b68      	ldr	r3, [pc, #416]	; (24c70 <spi_cmd_complete+0x780>)
   24ad0:	0018      	movs	r0, r3
   24ad2:	4b68      	ldr	r3, [pc, #416]	; (24c74 <spi_cmd_complete+0x784>)
   24ad4:	4798      	blx	r3
   24ad6:	4b6f      	ldr	r3, [pc, #444]	; (24c94 <spi_cmd_complete+0x7a4>)
   24ad8:	0018      	movs	r0, r3
   24ada:	4b66      	ldr	r3, [pc, #408]	; (24c74 <spi_cmd_complete+0x784>)
   24adc:	4798      	blx	r3
   24ade:	4b67      	ldr	r3, [pc, #412]	; (24c7c <spi_cmd_complete+0x78c>)
   24ae0:	0018      	movs	r0, r3
   24ae2:	4b64      	ldr	r3, [pc, #400]	; (24c74 <spi_cmd_complete+0x784>)
   24ae4:	4798      	blx	r3
					result = N_FAIL;
   24ae6:	2300      	movs	r3, #0
   24ae8:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   24aea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24aec:	e162      	b.n	24db4 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   24aee:	2376      	movs	r3, #118	; 0x76
   24af0:	18fb      	adds	r3, r7, r3
   24af2:	781b      	ldrb	r3, [r3, #0]
   24af4:	3301      	adds	r3, #1
   24af6:	001a      	movs	r2, r3
   24af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24afa:	429a      	cmp	r2, r3
   24afc:	d21c      	bcs.n	24b38 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   24afe:	2376      	movs	r3, #118	; 0x76
   24b00:	18fb      	adds	r3, r7, r3
   24b02:	781b      	ldrb	r3, [r3, #0]
   24b04:	2276      	movs	r2, #118	; 0x76
   24b06:	18ba      	adds	r2, r7, r2
   24b08:	1c59      	adds	r1, r3, #1
   24b0a:	7011      	strb	r1, [r2, #0]
   24b0c:	001a      	movs	r2, r3
   24b0e:	2318      	movs	r3, #24
   24b10:	18fb      	adds	r3, r7, r3
   24b12:	5c9a      	ldrb	r2, [r3, r2]
   24b14:	2314      	movs	r3, #20
   24b16:	18fb      	adds	r3, r7, r3
   24b18:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   24b1a:	2376      	movs	r3, #118	; 0x76
   24b1c:	18fb      	adds	r3, r7, r3
   24b1e:	781b      	ldrb	r3, [r3, #0]
   24b20:	2276      	movs	r2, #118	; 0x76
   24b22:	18ba      	adds	r2, r7, r2
   24b24:	1c59      	adds	r1, r3, #1
   24b26:	7011      	strb	r1, [r2, #0]
   24b28:	001a      	movs	r2, r3
   24b2a:	2318      	movs	r3, #24
   24b2c:	18fb      	adds	r3, r7, r3
   24b2e:	5c9a      	ldrb	r2, [r3, r2]
   24b30:	2314      	movs	r3, #20
   24b32:	18fb      	adds	r3, r7, r3
   24b34:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   24b36:	e13c      	b.n	24db2 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   24b38:	239c      	movs	r3, #156	; 0x9c
   24b3a:	009a      	lsls	r2, r3, #2
   24b3c:	494b      	ldr	r1, [pc, #300]	; (24c6c <spi_cmd_complete+0x77c>)
   24b3e:	4b4c      	ldr	r3, [pc, #304]	; (24c70 <spi_cmd_complete+0x780>)
   24b40:	0018      	movs	r0, r3
   24b42:	4b4c      	ldr	r3, [pc, #304]	; (24c74 <spi_cmd_complete+0x784>)
   24b44:	4798      	blx	r3
   24b46:	4b54      	ldr	r3, [pc, #336]	; (24c98 <spi_cmd_complete+0x7a8>)
   24b48:	0018      	movs	r0, r3
   24b4a:	4b4a      	ldr	r3, [pc, #296]	; (24c74 <spi_cmd_complete+0x784>)
   24b4c:	4798      	blx	r3
   24b4e:	4b4b      	ldr	r3, [pc, #300]	; (24c7c <spi_cmd_complete+0x78c>)
   24b50:	0018      	movs	r0, r3
   24b52:	4b48      	ldr	r3, [pc, #288]	; (24c74 <spi_cmd_complete+0x784>)
   24b54:	4798      	blx	r3
						result = N_FAIL;
   24b56:	2300      	movs	r3, #0
   24b58:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   24b5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24b5c:	e12a      	b.n	24db4 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24b5e:	230f      	movs	r3, #15
   24b60:	18fb      	adds	r3, r7, r3
   24b62:	781b      	ldrb	r3, [r3, #0]
   24b64:	2bc2      	cmp	r3, #194	; 0xc2
   24b66:	d005      	beq.n	24b74 <spi_cmd_complete+0x684>
   24b68:	230f      	movs	r3, #15
   24b6a:	18fb      	adds	r3, r7, r3
   24b6c:	781b      	ldrb	r3, [r3, #0]
   24b6e:	2bc8      	cmp	r3, #200	; 0xc8
   24b70:	d000      	beq.n	24b74 <spi_cmd_complete+0x684>
   24b72:	e11e      	b.n	24db2 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   24b74:	2300      	movs	r3, #0
   24b76:	663b      	str	r3, [r7, #96]	; 0x60
   24b78:	e011      	b.n	24b9e <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   24b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24b7c:	1c5a      	adds	r2, r3, #1
   24b7e:	663a      	str	r2, [r7, #96]	; 0x60
   24b80:	001a      	movs	r2, r3
   24b82:	687b      	ldr	r3, [r7, #4]
   24b84:	189a      	adds	r2, r3, r2
   24b86:	2376      	movs	r3, #118	; 0x76
   24b88:	18fb      	adds	r3, r7, r3
   24b8a:	781b      	ldrb	r3, [r3, #0]
   24b8c:	2176      	movs	r1, #118	; 0x76
   24b8e:	1879      	adds	r1, r7, r1
   24b90:	1c58      	adds	r0, r3, #1
   24b92:	7008      	strb	r0, [r1, #0]
   24b94:	0019      	movs	r1, r3
   24b96:	2318      	movs	r3, #24
   24b98:	18fb      	adds	r3, r7, r3
   24b9a:	5c5b      	ldrb	r3, [r3, r1]
   24b9c:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   24b9e:	2376      	movs	r3, #118	; 0x76
   24ba0:	18fb      	adds	r3, r7, r3
   24ba2:	781a      	ldrb	r2, [r3, #0]
   24ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24ba6:	429a      	cmp	r2, r3
   24ba8:	d203      	bcs.n	24bb2 <spi_cmd_complete+0x6c2>
   24baa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24bac:	683b      	ldr	r3, [r7, #0]
   24bae:	429a      	cmp	r2, r3
   24bb0:	d3e3      	bcc.n	24b7a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   24bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24bb4:	683a      	ldr	r2, [r7, #0]
   24bb6:	1ad3      	subs	r3, r2, r3
   24bb8:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   24bba:	683b      	ldr	r3, [r7, #0]
   24bbc:	2b00      	cmp	r3, #0
   24bbe:	d100      	bne.n	24bc2 <spi_cmd_complete+0x6d2>
   24bc0:	e0f1      	b.n	24da6 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   24bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24bc4:	2280      	movs	r2, #128	; 0x80
   24bc6:	0192      	lsls	r2, r2, #6
   24bc8:	1ad3      	subs	r3, r2, r3
   24bca:	001a      	movs	r2, r3
   24bcc:	683b      	ldr	r3, [r7, #0]
   24bce:	429a      	cmp	r2, r3
   24bd0:	d302      	bcc.n	24bd8 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   24bd2:	683b      	ldr	r3, [r7, #0]
   24bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   24bd6:	e004      	b.n	24be2 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   24bd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24bda:	2280      	movs	r2, #128	; 0x80
   24bdc:	0192      	lsls	r2, r2, #6
   24bde:	1ad3      	subs	r3, r2, r3
   24be0:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24be4:	687a      	ldr	r2, [r7, #4]
   24be6:	18d3      	adds	r3, r2, r3
   24be8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   24bea:	b292      	uxth	r2, r2
   24bec:	0011      	movs	r1, r2
   24bee:	0018      	movs	r0, r3
   24bf0:	4b2a      	ldr	r3, [pc, #168]	; (24c9c <spi_cmd_complete+0x7ac>)
   24bf2:	4798      	blx	r3
   24bf4:	1e03      	subs	r3, r0, #0
   24bf6:	d010      	beq.n	24c1a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24bf8:	4a29      	ldr	r2, [pc, #164]	; (24ca0 <spi_cmd_complete+0x7b0>)
   24bfa:	491c      	ldr	r1, [pc, #112]	; (24c6c <spi_cmd_complete+0x77c>)
   24bfc:	4b1c      	ldr	r3, [pc, #112]	; (24c70 <spi_cmd_complete+0x780>)
   24bfe:	0018      	movs	r0, r3
   24c00:	4b1c      	ldr	r3, [pc, #112]	; (24c74 <spi_cmd_complete+0x784>)
   24c02:	4798      	blx	r3
   24c04:	4b27      	ldr	r3, [pc, #156]	; (24ca4 <spi_cmd_complete+0x7b4>)
   24c06:	0018      	movs	r0, r3
   24c08:	4b1a      	ldr	r3, [pc, #104]	; (24c74 <spi_cmd_complete+0x784>)
   24c0a:	4798      	blx	r3
   24c0c:	4b1b      	ldr	r3, [pc, #108]	; (24c7c <spi_cmd_complete+0x78c>)
   24c0e:	0018      	movs	r0, r3
   24c10:	4b18      	ldr	r3, [pc, #96]	; (24c74 <spi_cmd_complete+0x784>)
   24c12:	4798      	blx	r3
						result = N_FAIL;
   24c14:	2300      	movs	r3, #0
   24c16:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   24c18:	e0cb      	b.n	24db2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24c1a:	4b1c      	ldr	r3, [pc, #112]	; (24c8c <spi_cmd_complete+0x79c>)
   24c1c:	781b      	ldrb	r3, [r3, #0]
   24c1e:	2b00      	cmp	r3, #0
   24c20:	d119      	bne.n	24c56 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24c22:	2314      	movs	r3, #20
   24c24:	18fb      	adds	r3, r7, r3
   24c26:	2102      	movs	r1, #2
   24c28:	0018      	movs	r0, r3
   24c2a:	4b1c      	ldr	r3, [pc, #112]	; (24c9c <spi_cmd_complete+0x7ac>)
   24c2c:	4798      	blx	r3
   24c2e:	1e03      	subs	r3, r0, #0
   24c30:	d011      	beq.n	24c56 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24c32:	23a6      	movs	r3, #166	; 0xa6
   24c34:	009a      	lsls	r2, r3, #2
   24c36:	490d      	ldr	r1, [pc, #52]	; (24c6c <spi_cmd_complete+0x77c>)
   24c38:	4b0d      	ldr	r3, [pc, #52]	; (24c70 <spi_cmd_complete+0x780>)
   24c3a:	0018      	movs	r0, r3
   24c3c:	4b0d      	ldr	r3, [pc, #52]	; (24c74 <spi_cmd_complete+0x784>)
   24c3e:	4798      	blx	r3
   24c40:	4b19      	ldr	r3, [pc, #100]	; (24ca8 <spi_cmd_complete+0x7b8>)
   24c42:	0018      	movs	r0, r3
   24c44:	4b0b      	ldr	r3, [pc, #44]	; (24c74 <spi_cmd_complete+0x784>)
   24c46:	4798      	blx	r3
   24c48:	4b0c      	ldr	r3, [pc, #48]	; (24c7c <spi_cmd_complete+0x78c>)
   24c4a:	0018      	movs	r0, r3
   24c4c:	4b09      	ldr	r3, [pc, #36]	; (24c74 <spi_cmd_complete+0x784>)
   24c4e:	4798      	blx	r3
							result = N_FAIL;
   24c50:	2300      	movs	r3, #0
   24c52:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   24c54:	e0ad      	b.n	24db2 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   24c56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24c5a:	18d3      	adds	r3, r2, r3
   24c5c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24c60:	683a      	ldr	r2, [r7, #0]
   24c62:	1ad3      	subs	r3, r2, r3
   24c64:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   24c66:	e09e      	b.n	24da6 <spi_cmd_complete+0x8b6>
   24c68:	0000022f 	.word	0x0000022f
   24c6c:	0003a31c 	.word	0x0003a31c
   24c70:	00039d08 	.word	0x00039d08
   24c74:	0001e979 	.word	0x0001e979
   24c78:	00039e00 	.word	0x00039e00
   24c7c:	00039d48 	.word	0x00039d48
   24c80:	00000239 	.word	0x00000239
   24c84:	00039e3c 	.word	0x00039e3c
   24c88:	00039e70 	.word	0x00039e70
   24c8c:	200042b0 	.word	0x200042b0
   24c90:	00000263 	.word	0x00000263
   24c94:	00039ea0 	.word	0x00039ea0
   24c98:	00039ed0 	.word	0x00039ed0
   24c9c:	00023e29 	.word	0x00023e29
   24ca0:	0000028e 	.word	0x0000028e
   24ca4:	00039f00 	.word	0x00039f00
   24ca8:	00039f34 	.word	0x00039f34
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   24cac:	683a      	ldr	r2, [r7, #0]
   24cae:	2380      	movs	r3, #128	; 0x80
   24cb0:	019b      	lsls	r3, r3, #6
   24cb2:	429a      	cmp	r2, r3
   24cb4:	d802      	bhi.n	24cbc <spi_cmd_complete+0x7cc>
						nbytes = sz;
   24cb6:	683b      	ldr	r3, [r7, #0]
   24cb8:	65bb      	str	r3, [r7, #88]	; 0x58
   24cba:	e002      	b.n	24cc2 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   24cbc:	2380      	movs	r3, #128	; 0x80
   24cbe:	019b      	lsls	r3, r3, #6
   24cc0:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   24cc2:	230a      	movs	r3, #10
   24cc4:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   24cc6:	2317      	movs	r3, #23
   24cc8:	18fb      	adds	r3, r7, r3
   24cca:	2101      	movs	r1, #1
   24ccc:	0018      	movs	r0, r3
   24cce:	4b3b      	ldr	r3, [pc, #236]	; (24dbc <spi_cmd_complete+0x8cc>)
   24cd0:	4798      	blx	r3
   24cd2:	1e03      	subs	r3, r0, #0
   24cd4:	d011      	beq.n	24cfa <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   24cd6:	23ae      	movs	r3, #174	; 0xae
   24cd8:	009a      	lsls	r2, r3, #2
   24cda:	4939      	ldr	r1, [pc, #228]	; (24dc0 <spi_cmd_complete+0x8d0>)
   24cdc:	4b39      	ldr	r3, [pc, #228]	; (24dc4 <spi_cmd_complete+0x8d4>)
   24cde:	0018      	movs	r0, r3
   24ce0:	4b39      	ldr	r3, [pc, #228]	; (24dc8 <spi_cmd_complete+0x8d8>)
   24ce2:	4798      	blx	r3
   24ce4:	4b39      	ldr	r3, [pc, #228]	; (24dcc <spi_cmd_complete+0x8dc>)
   24ce6:	0018      	movs	r0, r3
   24ce8:	4b37      	ldr	r3, [pc, #220]	; (24dc8 <spi_cmd_complete+0x8d8>)
   24cea:	4798      	blx	r3
   24cec:	4b38      	ldr	r3, [pc, #224]	; (24dd0 <spi_cmd_complete+0x8e0>)
   24cee:	0018      	movs	r0, r3
   24cf0:	4b35      	ldr	r3, [pc, #212]	; (24dc8 <spi_cmd_complete+0x8d8>)
   24cf2:	4798      	blx	r3
							result = N_FAIL;
   24cf4:	2300      	movs	r3, #0
   24cf6:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24cf8:	e010      	b.n	24d1c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   24cfa:	2317      	movs	r3, #23
   24cfc:	18fb      	adds	r3, r7, r3
   24cfe:	781b      	ldrb	r3, [r3, #0]
   24d00:	091b      	lsrs	r3, r3, #4
   24d02:	b2db      	uxtb	r3, r3
   24d04:	001a      	movs	r2, r3
   24d06:	230f      	movs	r3, #15
   24d08:	4013      	ands	r3, r2
   24d0a:	2b0f      	cmp	r3, #15
   24d0c:	d005      	beq.n	24d1a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   24d0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24d10:	1e5a      	subs	r2, r3, #1
   24d12:	667a      	str	r2, [r7, #100]	; 0x64
   24d14:	2b00      	cmp	r3, #0
   24d16:	d1d6      	bne.n	24cc6 <spi_cmd_complete+0x7d6>
   24d18:	e000      	b.n	24d1c <spi_cmd_complete+0x82c>
							break;
   24d1a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   24d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24d1e:	2b00      	cmp	r3, #0
   24d20:	d046      	beq.n	24db0 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24d24:	687a      	ldr	r2, [r7, #4]
   24d26:	18d3      	adds	r3, r2, r3
   24d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
   24d2a:	b292      	uxth	r2, r2
   24d2c:	0011      	movs	r1, r2
   24d2e:	0018      	movs	r0, r3
   24d30:	4b22      	ldr	r3, [pc, #136]	; (24dbc <spi_cmd_complete+0x8cc>)
   24d32:	4798      	blx	r3
   24d34:	1e03      	subs	r3, r0, #0
   24d36:	d011      	beq.n	24d5c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24d38:	23b2      	movs	r3, #178	; 0xb2
   24d3a:	009a      	lsls	r2, r3, #2
   24d3c:	4920      	ldr	r1, [pc, #128]	; (24dc0 <spi_cmd_complete+0x8d0>)
   24d3e:	4b21      	ldr	r3, [pc, #132]	; (24dc4 <spi_cmd_complete+0x8d4>)
   24d40:	0018      	movs	r0, r3
   24d42:	4b21      	ldr	r3, [pc, #132]	; (24dc8 <spi_cmd_complete+0x8d8>)
   24d44:	4798      	blx	r3
   24d46:	4b23      	ldr	r3, [pc, #140]	; (24dd4 <spi_cmd_complete+0x8e4>)
   24d48:	0018      	movs	r0, r3
   24d4a:	4b1f      	ldr	r3, [pc, #124]	; (24dc8 <spi_cmd_complete+0x8d8>)
   24d4c:	4798      	blx	r3
   24d4e:	4b20      	ldr	r3, [pc, #128]	; (24dd0 <spi_cmd_complete+0x8e0>)
   24d50:	0018      	movs	r0, r3
   24d52:	4b1d      	ldr	r3, [pc, #116]	; (24dc8 <spi_cmd_complete+0x8d8>)
   24d54:	4798      	blx	r3
						result = N_FAIL;
   24d56:	2300      	movs	r3, #0
   24d58:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   24d5a:	e02a      	b.n	24db2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24d5c:	4b1e      	ldr	r3, [pc, #120]	; (24dd8 <spi_cmd_complete+0x8e8>)
   24d5e:	781b      	ldrb	r3, [r3, #0]
   24d60:	2b00      	cmp	r3, #0
   24d62:	d118      	bne.n	24d96 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24d64:	2314      	movs	r3, #20
   24d66:	18fb      	adds	r3, r7, r3
   24d68:	2102      	movs	r1, #2
   24d6a:	0018      	movs	r0, r3
   24d6c:	4b13      	ldr	r3, [pc, #76]	; (24dbc <spi_cmd_complete+0x8cc>)
   24d6e:	4798      	blx	r3
   24d70:	1e03      	subs	r3, r0, #0
   24d72:	d010      	beq.n	24d96 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24d74:	4a19      	ldr	r2, [pc, #100]	; (24ddc <spi_cmd_complete+0x8ec>)
   24d76:	4912      	ldr	r1, [pc, #72]	; (24dc0 <spi_cmd_complete+0x8d0>)
   24d78:	4b12      	ldr	r3, [pc, #72]	; (24dc4 <spi_cmd_complete+0x8d4>)
   24d7a:	0018      	movs	r0, r3
   24d7c:	4b12      	ldr	r3, [pc, #72]	; (24dc8 <spi_cmd_complete+0x8d8>)
   24d7e:	4798      	blx	r3
   24d80:	4b17      	ldr	r3, [pc, #92]	; (24de0 <spi_cmd_complete+0x8f0>)
   24d82:	0018      	movs	r0, r3
   24d84:	4b10      	ldr	r3, [pc, #64]	; (24dc8 <spi_cmd_complete+0x8d8>)
   24d86:	4798      	blx	r3
   24d88:	4b11      	ldr	r3, [pc, #68]	; (24dd0 <spi_cmd_complete+0x8e0>)
   24d8a:	0018      	movs	r0, r3
   24d8c:	4b0e      	ldr	r3, [pc, #56]	; (24dc8 <spi_cmd_complete+0x8d8>)
   24d8e:	4798      	blx	r3
							result = N_FAIL;
   24d90:	2300      	movs	r3, #0
   24d92:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24d94:	e00d      	b.n	24db2 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   24d96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24d9a:	18d3      	adds	r3, r2, r3
   24d9c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24d9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24da0:	683a      	ldr	r2, [r7, #0]
   24da2:	1ad3      	subs	r3, r2, r3
   24da4:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   24da6:	683b      	ldr	r3, [r7, #0]
   24da8:	2b00      	cmp	r3, #0
   24daa:	d000      	beq.n	24dae <spi_cmd_complete+0x8be>
   24dac:	e77e      	b.n	24cac <spi_cmd_complete+0x7bc>
   24dae:	e000      	b.n	24db2 <spi_cmd_complete+0x8c2>
						break;
   24db0:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   24db2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   24db4:	0018      	movs	r0, r3
   24db6:	46bd      	mov	sp, r7
   24db8:	b01f      	add	sp, #124	; 0x7c
   24dba:	bd90      	pop	{r4, r7, pc}
   24dbc:	00023e29 	.word	0x00023e29
   24dc0:	0003a31c 	.word	0x0003a31c
   24dc4:	00039d08 	.word	0x00039d08
   24dc8:	0001e979 	.word	0x0001e979
   24dcc:	00039f6c 	.word	0x00039f6c
   24dd0:	00039d48 	.word	0x00039d48
   24dd4:	00039f00 	.word	0x00039f00
   24dd8:	200042b0 	.word	0x200042b0
   24ddc:	000002d2 	.word	0x000002d2
   24de0:	00039f34 	.word	0x00039f34

00024de4 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   24de4:	b580      	push	{r7, lr}
   24de6:	b086      	sub	sp, #24
   24de8:	af00      	add	r7, sp, #0
   24dea:	6078      	str	r0, [r7, #4]
   24dec:	000a      	movs	r2, r1
   24dee:	1cbb      	adds	r3, r7, #2
   24df0:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   24df2:	2313      	movs	r3, #19
   24df4:	18fb      	adds	r3, r7, r3
   24df6:	2201      	movs	r2, #1
   24df8:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   24dfa:	230c      	movs	r3, #12
   24dfc:	18fb      	adds	r3, r7, r3
   24dfe:	2200      	movs	r2, #0
   24e00:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   24e02:	2316      	movs	r3, #22
   24e04:	18fb      	adds	r3, r7, r3
   24e06:	2200      	movs	r2, #0
   24e08:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   24e0a:	1cbb      	adds	r3, r7, #2
   24e0c:	881a      	ldrh	r2, [r3, #0]
   24e0e:	2380      	movs	r3, #128	; 0x80
   24e10:	019b      	lsls	r3, r3, #6
   24e12:	429a      	cmp	r2, r3
   24e14:	d805      	bhi.n	24e22 <spi_data_write+0x3e>
			nbytes = sz;
   24e16:	2314      	movs	r3, #20
   24e18:	18fb      	adds	r3, r7, r3
   24e1a:	1cba      	adds	r2, r7, #2
   24e1c:	8812      	ldrh	r2, [r2, #0]
   24e1e:	801a      	strh	r2, [r3, #0]
   24e20:	e004      	b.n	24e2c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   24e22:	2314      	movs	r3, #20
   24e24:	18fb      	adds	r3, r7, r3
   24e26:	2280      	movs	r2, #128	; 0x80
   24e28:	0192      	lsls	r2, r2, #6
   24e2a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   24e2c:	2311      	movs	r3, #17
   24e2e:	18fb      	adds	r3, r7, r3
   24e30:	22f0      	movs	r2, #240	; 0xf0
   24e32:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   24e34:	2316      	movs	r3, #22
   24e36:	18fb      	adds	r3, r7, r3
   24e38:	2200      	movs	r2, #0
   24e3a:	5e9b      	ldrsh	r3, [r3, r2]
   24e3c:	2b00      	cmp	r3, #0
   24e3e:	d10f      	bne.n	24e60 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   24e40:	1cbb      	adds	r3, r7, #2
   24e42:	881a      	ldrh	r2, [r3, #0]
   24e44:	2380      	movs	r3, #128	; 0x80
   24e46:	019b      	lsls	r3, r3, #6
   24e48:	429a      	cmp	r2, r3
   24e4a:	d804      	bhi.n	24e56 <spi_data_write+0x72>
				order = 0x3;
   24e4c:	2312      	movs	r3, #18
   24e4e:	18fb      	adds	r3, r7, r3
   24e50:	2203      	movs	r2, #3
   24e52:	701a      	strb	r2, [r3, #0]
   24e54:	e013      	b.n	24e7e <spi_data_write+0x9a>
			else
				order = 0x1;
   24e56:	2312      	movs	r3, #18
   24e58:	18fb      	adds	r3, r7, r3
   24e5a:	2201      	movs	r2, #1
   24e5c:	701a      	strb	r2, [r3, #0]
   24e5e:	e00e      	b.n	24e7e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   24e60:	1cbb      	adds	r3, r7, #2
   24e62:	881a      	ldrh	r2, [r3, #0]
   24e64:	2380      	movs	r3, #128	; 0x80
   24e66:	019b      	lsls	r3, r3, #6
   24e68:	429a      	cmp	r2, r3
   24e6a:	d804      	bhi.n	24e76 <spi_data_write+0x92>
				order = 0x3;
   24e6c:	2312      	movs	r3, #18
   24e6e:	18fb      	adds	r3, r7, r3
   24e70:	2203      	movs	r2, #3
   24e72:	701a      	strb	r2, [r3, #0]
   24e74:	e003      	b.n	24e7e <spi_data_write+0x9a>
			else
				order = 0x2;
   24e76:	2312      	movs	r3, #18
   24e78:	18fb      	adds	r3, r7, r3
   24e7a:	2202      	movs	r2, #2
   24e7c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   24e7e:	2311      	movs	r3, #17
   24e80:	18fb      	adds	r3, r7, r3
   24e82:	781a      	ldrb	r2, [r3, #0]
   24e84:	2312      	movs	r3, #18
   24e86:	18fb      	adds	r3, r7, r3
   24e88:	781b      	ldrb	r3, [r3, #0]
   24e8a:	4313      	orrs	r3, r2
   24e8c:	b2da      	uxtb	r2, r3
   24e8e:	2311      	movs	r3, #17
   24e90:	18fb      	adds	r3, r7, r3
   24e92:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   24e94:	2311      	movs	r3, #17
   24e96:	18fb      	adds	r3, r7, r3
   24e98:	2101      	movs	r1, #1
   24e9a:	0018      	movs	r0, r3
   24e9c:	4b3c      	ldr	r3, [pc, #240]	; (24f90 <spi_data_write+0x1ac>)
   24e9e:	4798      	blx	r3
   24ea0:	1e03      	subs	r3, r0, #0
   24ea2:	d012      	beq.n	24eca <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   24ea4:	4a3b      	ldr	r2, [pc, #236]	; (24f94 <spi_data_write+0x1b0>)
   24ea6:	493c      	ldr	r1, [pc, #240]	; (24f98 <spi_data_write+0x1b4>)
   24ea8:	4b3c      	ldr	r3, [pc, #240]	; (24f9c <spi_data_write+0x1b8>)
   24eaa:	0018      	movs	r0, r3
   24eac:	4b3c      	ldr	r3, [pc, #240]	; (24fa0 <spi_data_write+0x1bc>)
   24eae:	4798      	blx	r3
   24eb0:	4b3c      	ldr	r3, [pc, #240]	; (24fa4 <spi_data_write+0x1c0>)
   24eb2:	0018      	movs	r0, r3
   24eb4:	4b3a      	ldr	r3, [pc, #232]	; (24fa0 <spi_data_write+0x1bc>)
   24eb6:	4798      	blx	r3
   24eb8:	4b3b      	ldr	r3, [pc, #236]	; (24fa8 <spi_data_write+0x1c4>)
   24eba:	0018      	movs	r0, r3
   24ebc:	4b38      	ldr	r3, [pc, #224]	; (24fa0 <spi_data_write+0x1bc>)
   24ebe:	4798      	blx	r3
			result = N_FAIL;
   24ec0:	2313      	movs	r3, #19
   24ec2:	18fb      	adds	r3, r7, r3
   24ec4:	2200      	movs	r2, #0
   24ec6:	701a      	strb	r2, [r3, #0]
			break;
   24ec8:	e059      	b.n	24f7e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   24eca:	2316      	movs	r3, #22
   24ecc:	18fb      	adds	r3, r7, r3
   24ece:	2200      	movs	r2, #0
   24ed0:	5e9b      	ldrsh	r3, [r3, r2]
   24ed2:	687a      	ldr	r2, [r7, #4]
   24ed4:	18d2      	adds	r2, r2, r3
   24ed6:	2314      	movs	r3, #20
   24ed8:	18fb      	adds	r3, r7, r3
   24eda:	881b      	ldrh	r3, [r3, #0]
   24edc:	0019      	movs	r1, r3
   24ede:	0010      	movs	r0, r2
   24ee0:	4b2b      	ldr	r3, [pc, #172]	; (24f90 <spi_data_write+0x1ac>)
   24ee2:	4798      	blx	r3
   24ee4:	1e03      	subs	r3, r0, #0
   24ee6:	d012      	beq.n	24f0e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   24ee8:	4a30      	ldr	r2, [pc, #192]	; (24fac <spi_data_write+0x1c8>)
   24eea:	492b      	ldr	r1, [pc, #172]	; (24f98 <spi_data_write+0x1b4>)
   24eec:	4b2b      	ldr	r3, [pc, #172]	; (24f9c <spi_data_write+0x1b8>)
   24eee:	0018      	movs	r0, r3
   24ef0:	4b2b      	ldr	r3, [pc, #172]	; (24fa0 <spi_data_write+0x1bc>)
   24ef2:	4798      	blx	r3
   24ef4:	4b2e      	ldr	r3, [pc, #184]	; (24fb0 <spi_data_write+0x1cc>)
   24ef6:	0018      	movs	r0, r3
   24ef8:	4b29      	ldr	r3, [pc, #164]	; (24fa0 <spi_data_write+0x1bc>)
   24efa:	4798      	blx	r3
   24efc:	4b2a      	ldr	r3, [pc, #168]	; (24fa8 <spi_data_write+0x1c4>)
   24efe:	0018      	movs	r0, r3
   24f00:	4b27      	ldr	r3, [pc, #156]	; (24fa0 <spi_data_write+0x1bc>)
   24f02:	4798      	blx	r3
			result = N_FAIL;
   24f04:	2313      	movs	r3, #19
   24f06:	18fb      	adds	r3, r7, r3
   24f08:	2200      	movs	r2, #0
   24f0a:	701a      	strb	r2, [r3, #0]
			break;
   24f0c:	e037      	b.n	24f7e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   24f0e:	4b29      	ldr	r3, [pc, #164]	; (24fb4 <spi_data_write+0x1d0>)
   24f10:	781b      	ldrb	r3, [r3, #0]
   24f12:	2b00      	cmp	r3, #0
   24f14:	d11b      	bne.n	24f4e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   24f16:	230c      	movs	r3, #12
   24f18:	18fb      	adds	r3, r7, r3
   24f1a:	2102      	movs	r1, #2
   24f1c:	0018      	movs	r0, r3
   24f1e:	4b1c      	ldr	r3, [pc, #112]	; (24f90 <spi_data_write+0x1ac>)
   24f20:	4798      	blx	r3
   24f22:	1e03      	subs	r3, r0, #0
   24f24:	d013      	beq.n	24f4e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   24f26:	23d7      	movs	r3, #215	; 0xd7
   24f28:	009a      	lsls	r2, r3, #2
   24f2a:	491b      	ldr	r1, [pc, #108]	; (24f98 <spi_data_write+0x1b4>)
   24f2c:	4b1b      	ldr	r3, [pc, #108]	; (24f9c <spi_data_write+0x1b8>)
   24f2e:	0018      	movs	r0, r3
   24f30:	4b1b      	ldr	r3, [pc, #108]	; (24fa0 <spi_data_write+0x1bc>)
   24f32:	4798      	blx	r3
   24f34:	4b20      	ldr	r3, [pc, #128]	; (24fb8 <spi_data_write+0x1d4>)
   24f36:	0018      	movs	r0, r3
   24f38:	4b19      	ldr	r3, [pc, #100]	; (24fa0 <spi_data_write+0x1bc>)
   24f3a:	4798      	blx	r3
   24f3c:	4b1a      	ldr	r3, [pc, #104]	; (24fa8 <spi_data_write+0x1c4>)
   24f3e:	0018      	movs	r0, r3
   24f40:	4b17      	ldr	r3, [pc, #92]	; (24fa0 <spi_data_write+0x1bc>)
   24f42:	4798      	blx	r3
				result = N_FAIL;
   24f44:	2313      	movs	r3, #19
   24f46:	18fb      	adds	r3, r7, r3
   24f48:	2200      	movs	r2, #0
   24f4a:	701a      	strb	r2, [r3, #0]
				break;
   24f4c:	e017      	b.n	24f7e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   24f4e:	2316      	movs	r3, #22
   24f50:	18fb      	adds	r3, r7, r3
   24f52:	881a      	ldrh	r2, [r3, #0]
   24f54:	2314      	movs	r3, #20
   24f56:	18fb      	adds	r3, r7, r3
   24f58:	881b      	ldrh	r3, [r3, #0]
   24f5a:	18d3      	adds	r3, r2, r3
   24f5c:	b29a      	uxth	r2, r3
   24f5e:	2316      	movs	r3, #22
   24f60:	18fb      	adds	r3, r7, r3
   24f62:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   24f64:	1cbb      	adds	r3, r7, #2
   24f66:	1cb9      	adds	r1, r7, #2
   24f68:	2214      	movs	r2, #20
   24f6a:	18ba      	adds	r2, r7, r2
   24f6c:	8809      	ldrh	r1, [r1, #0]
   24f6e:	8812      	ldrh	r2, [r2, #0]
   24f70:	1a8a      	subs	r2, r1, r2
   24f72:	801a      	strh	r2, [r3, #0]
	} while (sz);
   24f74:	1cbb      	adds	r3, r7, #2
   24f76:	881b      	ldrh	r3, [r3, #0]
   24f78:	2b00      	cmp	r3, #0
   24f7a:	d000      	beq.n	24f7e <spi_data_write+0x19a>
   24f7c:	e745      	b.n	24e0a <spi_data_write+0x26>


	return result;
   24f7e:	2313      	movs	r3, #19
   24f80:	18fb      	adds	r3, r7, r3
   24f82:	781b      	ldrb	r3, [r3, #0]
   24f84:	b25b      	sxtb	r3, r3
}
   24f86:	0018      	movs	r0, r3
   24f88:	46bd      	mov	sp, r7
   24f8a:	b006      	add	sp, #24
   24f8c:	bd80      	pop	{r7, pc}
   24f8e:	46c0      	nop			; (mov r8, r8)
   24f90:	00023e6d 	.word	0x00023e6d
   24f94:	00000349 	.word	0x00000349
   24f98:	0003a330 	.word	0x0003a330
   24f9c:	00039d08 	.word	0x00039d08
   24fa0:	0001e979 	.word	0x0001e979
   24fa4:	00039fd0 	.word	0x00039fd0
   24fa8:	00039d48 	.word	0x00039d48
   24fac:	00000352 	.word	0x00000352
   24fb0:	0003a008 	.word	0x0003a008
   24fb4:	200042b0 	.word	0x200042b0
   24fb8:	0003a03c 	.word	0x0003a03c

00024fbc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   24fbc:	b590      	push	{r4, r7, lr}
   24fbe:	b087      	sub	sp, #28
   24fc0:	af02      	add	r7, sp, #8
   24fc2:	6078      	str	r0, [r7, #4]
   24fc4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   24fc6:	230f      	movs	r3, #15
   24fc8:	18fb      	adds	r3, r7, r3
   24fca:	220a      	movs	r2, #10
   24fcc:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24fce:	230c      	movs	r3, #12
   24fd0:	18fb      	adds	r3, r7, r3
   24fd2:	2201      	movs	r2, #1
   24fd4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   24fd6:	230e      	movs	r3, #14
   24fd8:	18fb      	adds	r3, r7, r3
   24fda:	22c9      	movs	r2, #201	; 0xc9
   24fdc:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   24fde:	230d      	movs	r3, #13
   24fe0:	18fb      	adds	r3, r7, r3
   24fe2:	2200      	movs	r2, #0
   24fe4:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   24fe6:	687b      	ldr	r3, [r7, #4]
   24fe8:	2b30      	cmp	r3, #48	; 0x30
   24fea:	d808      	bhi.n	24ffe <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   24fec:	230e      	movs	r3, #14
   24fee:	18fb      	adds	r3, r7, r3
   24ff0:	22c3      	movs	r2, #195	; 0xc3
   24ff2:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   24ff4:	230d      	movs	r3, #13
   24ff6:	18fb      	adds	r3, r7, r3
   24ff8:	2201      	movs	r2, #1
   24ffa:	701a      	strb	r2, [r3, #0]
   24ffc:	e007      	b.n	2500e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   24ffe:	230e      	movs	r3, #14
   25000:	18fb      	adds	r3, r7, r3
   25002:	22c9      	movs	r2, #201	; 0xc9
   25004:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   25006:	230d      	movs	r3, #13
   25008:	18fb      	adds	r3, r7, r3
   2500a:	2200      	movs	r2, #0
   2500c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   2500e:	003a      	movs	r2, r7
   25010:	6879      	ldr	r1, [r7, #4]
   25012:	230e      	movs	r3, #14
   25014:	18fb      	adds	r3, r7, r3
   25016:	7818      	ldrb	r0, [r3, #0]
   25018:	230d      	movs	r3, #13
   2501a:	18fb      	adds	r3, r7, r3
   2501c:	781b      	ldrb	r3, [r3, #0]
   2501e:	9300      	str	r3, [sp, #0]
   25020:	2304      	movs	r3, #4
   25022:	4c2e      	ldr	r4, [pc, #184]	; (250dc <spi_write_reg+0x120>)
   25024:	47a0      	blx	r4
   25026:	0002      	movs	r2, r0
   25028:	230c      	movs	r3, #12
   2502a:	18fb      	adds	r3, r7, r3
   2502c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2502e:	230c      	movs	r3, #12
   25030:	18fb      	adds	r3, r7, r3
   25032:	781b      	ldrb	r3, [r3, #0]
   25034:	b25b      	sxtb	r3, r3
   25036:	2b01      	cmp	r3, #1
   25038:	d010      	beq.n	2505c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   2503a:	4a29      	ldr	r2, [pc, #164]	; (250e0 <spi_write_reg+0x124>)
   2503c:	4929      	ldr	r1, [pc, #164]	; (250e4 <spi_write_reg+0x128>)
   2503e:	4b2a      	ldr	r3, [pc, #168]	; (250e8 <spi_write_reg+0x12c>)
   25040:	0018      	movs	r0, r3
   25042:	4b2a      	ldr	r3, [pc, #168]	; (250ec <spi_write_reg+0x130>)
   25044:	4798      	blx	r3
   25046:	687a      	ldr	r2, [r7, #4]
   25048:	4b29      	ldr	r3, [pc, #164]	; (250f0 <spi_write_reg+0x134>)
   2504a:	0011      	movs	r1, r2
   2504c:	0018      	movs	r0, r3
   2504e:	4b27      	ldr	r3, [pc, #156]	; (250ec <spi_write_reg+0x130>)
   25050:	4798      	blx	r3
   25052:	4b28      	ldr	r3, [pc, #160]	; (250f4 <spi_write_reg+0x138>)
   25054:	0018      	movs	r0, r3
   25056:	4b25      	ldr	r3, [pc, #148]	; (250ec <spi_write_reg+0x130>)
   25058:	4798      	blx	r3
		goto _FAIL_;
   2505a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   2505c:	230c      	movs	r3, #12
   2505e:	18fb      	adds	r3, r7, r3
   25060:	781b      	ldrb	r3, [r3, #0]
   25062:	b25b      	sxtb	r3, r3
   25064:	2b01      	cmp	r3, #1
   25066:	d030      	beq.n	250ca <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   25068:	2001      	movs	r0, #1
   2506a:	4b23      	ldr	r3, [pc, #140]	; (250f8 <spi_write_reg+0x13c>)
   2506c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2506e:	2300      	movs	r3, #0
   25070:	9300      	str	r3, [sp, #0]
   25072:	2300      	movs	r3, #0
   25074:	2200      	movs	r2, #0
   25076:	2100      	movs	r1, #0
   25078:	20cf      	movs	r0, #207	; 0xcf
   2507a:	4c20      	ldr	r4, [pc, #128]	; (250fc <spi_write_reg+0x140>)
   2507c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2507e:	20cf      	movs	r0, #207	; 0xcf
   25080:	4b1f      	ldr	r3, [pc, #124]	; (25100 <spi_write_reg+0x144>)
   25082:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   25084:	23ea      	movs	r3, #234	; 0xea
   25086:	009a      	lsls	r2, r3, #2
   25088:	4916      	ldr	r1, [pc, #88]	; (250e4 <spi_write_reg+0x128>)
   2508a:	4b17      	ldr	r3, [pc, #92]	; (250e8 <spi_write_reg+0x12c>)
   2508c:	0018      	movs	r0, r3
   2508e:	4b17      	ldr	r3, [pc, #92]	; (250ec <spi_write_reg+0x130>)
   25090:	4798      	blx	r3
   25092:	230f      	movs	r3, #15
   25094:	18fb      	adds	r3, r7, r3
   25096:	7819      	ldrb	r1, [r3, #0]
   25098:	683b      	ldr	r3, [r7, #0]
   2509a:	687a      	ldr	r2, [r7, #4]
   2509c:	4819      	ldr	r0, [pc, #100]	; (25104 <spi_write_reg+0x148>)
   2509e:	4c13      	ldr	r4, [pc, #76]	; (250ec <spi_write_reg+0x130>)
   250a0:	47a0      	blx	r4
   250a2:	4b14      	ldr	r3, [pc, #80]	; (250f4 <spi_write_reg+0x138>)
   250a4:	0018      	movs	r0, r3
   250a6:	4b11      	ldr	r3, [pc, #68]	; (250ec <spi_write_reg+0x130>)
   250a8:	4798      	blx	r3
		nm_bsp_sleep(1);
   250aa:	2001      	movs	r0, #1
   250ac:	4b12      	ldr	r3, [pc, #72]	; (250f8 <spi_write_reg+0x13c>)
   250ae:	4798      	blx	r3
		retry--;
   250b0:	230f      	movs	r3, #15
   250b2:	18fb      	adds	r3, r7, r3
   250b4:	781a      	ldrb	r2, [r3, #0]
   250b6:	230f      	movs	r3, #15
   250b8:	18fb      	adds	r3, r7, r3
   250ba:	3a01      	subs	r2, #1
   250bc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   250be:	230f      	movs	r3, #15
   250c0:	18fb      	adds	r3, r7, r3
   250c2:	781b      	ldrb	r3, [r3, #0]
   250c4:	2b00      	cmp	r3, #0
   250c6:	d000      	beq.n	250ca <spi_write_reg+0x10e>
   250c8:	e78d      	b.n	24fe6 <spi_write_reg+0x2a>
	}

	return result;
   250ca:	230c      	movs	r3, #12
   250cc:	18fb      	adds	r3, r7, r3
   250ce:	781b      	ldrb	r3, [r3, #0]
   250d0:	b25b      	sxtb	r3, r3
}
   250d2:	0018      	movs	r0, r3
   250d4:	46bd      	mov	sp, r7
   250d6:	b005      	add	sp, #20
   250d8:	bd90      	pop	{r4, r7, pc}
   250da:	46c0      	nop			; (mov r8, r8)
   250dc:	000244f1 	.word	0x000244f1
   250e0:	0000039d 	.word	0x0000039d
   250e4:	0003a340 	.word	0x0003a340
   250e8:	00039d08 	.word	0x00039d08
   250ec:	0001e979 	.word	0x0001e979
   250f0:	0003a074 	.word	0x0003a074
   250f4:	00039d48 	.word	0x00039d48
   250f8:	00020e31 	.word	0x00020e31
   250fc:	00023f75 	.word	0x00023f75
   25100:	000243b5 	.word	0x000243b5
   25104:	0003a0a0 	.word	0x0003a0a0

00025108 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   25108:	b590      	push	{r4, r7, lr}
   2510a:	b089      	sub	sp, #36	; 0x24
   2510c:	af02      	add	r7, sp, #8
   2510e:	60f8      	str	r0, [r7, #12]
   25110:	60b9      	str	r1, [r7, #8]
   25112:	1dbb      	adds	r3, r7, #6
   25114:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   25116:	2316      	movs	r3, #22
   25118:	18fb      	adds	r3, r7, r3
   2511a:	220a      	movs	r2, #10
   2511c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2511e:	2315      	movs	r3, #21
   25120:	18fb      	adds	r3, r7, r3
   25122:	22c7      	movs	r2, #199	; 0xc7
   25124:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   25126:	1dbb      	adds	r3, r7, #6
   25128:	881a      	ldrh	r2, [r3, #0]
   2512a:	68f9      	ldr	r1, [r7, #12]
   2512c:	2315      	movs	r3, #21
   2512e:	18fb      	adds	r3, r7, r3
   25130:	7818      	ldrb	r0, [r3, #0]
   25132:	2300      	movs	r3, #0
   25134:	9300      	str	r3, [sp, #0]
   25136:	0013      	movs	r3, r2
   25138:	2200      	movs	r2, #0
   2513a:	4c4d      	ldr	r4, [pc, #308]	; (25270 <nm_spi_write+0x168>)
   2513c:	47a0      	blx	r4
   2513e:	0002      	movs	r2, r0
   25140:	2317      	movs	r3, #23
   25142:	18fb      	adds	r3, r7, r3
   25144:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   25146:	2317      	movs	r3, #23
   25148:	18fb      	adds	r3, r7, r3
   2514a:	781b      	ldrb	r3, [r3, #0]
   2514c:	b25b      	sxtb	r3, r3
   2514e:	2b01      	cmp	r3, #1
   25150:	d010      	beq.n	25174 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   25152:	4a48      	ldr	r2, [pc, #288]	; (25274 <nm_spi_write+0x16c>)
   25154:	4948      	ldr	r1, [pc, #288]	; (25278 <nm_spi_write+0x170>)
   25156:	4b49      	ldr	r3, [pc, #292]	; (2527c <nm_spi_write+0x174>)
   25158:	0018      	movs	r0, r3
   2515a:	4b49      	ldr	r3, [pc, #292]	; (25280 <nm_spi_write+0x178>)
   2515c:	4798      	blx	r3
   2515e:	68fa      	ldr	r2, [r7, #12]
   25160:	4b48      	ldr	r3, [pc, #288]	; (25284 <nm_spi_write+0x17c>)
   25162:	0011      	movs	r1, r2
   25164:	0018      	movs	r0, r3
   25166:	4b46      	ldr	r3, [pc, #280]	; (25280 <nm_spi_write+0x178>)
   25168:	4798      	blx	r3
   2516a:	4b47      	ldr	r3, [pc, #284]	; (25288 <nm_spi_write+0x180>)
   2516c:	0018      	movs	r0, r3
   2516e:	4b44      	ldr	r3, [pc, #272]	; (25280 <nm_spi_write+0x178>)
   25170:	4798      	blx	r3
		goto _FAIL_;
   25172:	e03e      	b.n	251f2 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   25174:	2317      	movs	r3, #23
   25176:	18fc      	adds	r4, r7, r3
   25178:	1dbb      	adds	r3, r7, #6
   2517a:	881a      	ldrh	r2, [r3, #0]
   2517c:	68bb      	ldr	r3, [r7, #8]
   2517e:	0011      	movs	r1, r2
   25180:	0018      	movs	r0, r3
   25182:	4b42      	ldr	r3, [pc, #264]	; (2528c <nm_spi_write+0x184>)
   25184:	4798      	blx	r3
   25186:	0003      	movs	r3, r0
   25188:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2518a:	2317      	movs	r3, #23
   2518c:	18fb      	adds	r3, r7, r3
   2518e:	781b      	ldrb	r3, [r3, #0]
   25190:	b25b      	sxtb	r3, r3
   25192:	2b01      	cmp	r3, #1
   25194:	d00e      	beq.n	251b4 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   25196:	4a3e      	ldr	r2, [pc, #248]	; (25290 <nm_spi_write+0x188>)
   25198:	4937      	ldr	r1, [pc, #220]	; (25278 <nm_spi_write+0x170>)
   2519a:	4b38      	ldr	r3, [pc, #224]	; (2527c <nm_spi_write+0x174>)
   2519c:	0018      	movs	r0, r3
   2519e:	4b38      	ldr	r3, [pc, #224]	; (25280 <nm_spi_write+0x178>)
   251a0:	4798      	blx	r3
   251a2:	4b3c      	ldr	r3, [pc, #240]	; (25294 <nm_spi_write+0x18c>)
   251a4:	0018      	movs	r0, r3
   251a6:	4b36      	ldr	r3, [pc, #216]	; (25280 <nm_spi_write+0x178>)
   251a8:	4798      	blx	r3
   251aa:	4b37      	ldr	r3, [pc, #220]	; (25288 <nm_spi_write+0x180>)
   251ac:	0018      	movs	r0, r3
   251ae:	4b34      	ldr	r3, [pc, #208]	; (25280 <nm_spi_write+0x178>)
   251b0:	4798      	blx	r3
		goto _FAIL_;
   251b2:	e01e      	b.n	251f2 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   251b4:	2317      	movs	r3, #23
   251b6:	18fc      	adds	r4, r7, r3
   251b8:	2315      	movs	r3, #21
   251ba:	18fb      	adds	r3, r7, r3
   251bc:	781b      	ldrb	r3, [r3, #0]
   251be:	0018      	movs	r0, r3
   251c0:	4b35      	ldr	r3, [pc, #212]	; (25298 <nm_spi_write+0x190>)
   251c2:	4798      	blx	r3
   251c4:	0003      	movs	r3, r0
   251c6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   251c8:	2317      	movs	r3, #23
   251ca:	18fb      	adds	r3, r7, r3
   251cc:	781b      	ldrb	r3, [r3, #0]
   251ce:	b25b      	sxtb	r3, r3
   251d0:	2b01      	cmp	r3, #1
   251d2:	d00e      	beq.n	251f2 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   251d4:	4a31      	ldr	r2, [pc, #196]	; (2529c <nm_spi_write+0x194>)
   251d6:	4928      	ldr	r1, [pc, #160]	; (25278 <nm_spi_write+0x170>)
   251d8:	4b28      	ldr	r3, [pc, #160]	; (2527c <nm_spi_write+0x174>)
   251da:	0018      	movs	r0, r3
   251dc:	4b28      	ldr	r3, [pc, #160]	; (25280 <nm_spi_write+0x178>)
   251de:	4798      	blx	r3
   251e0:	4b2c      	ldr	r3, [pc, #176]	; (25294 <nm_spi_write+0x18c>)
   251e2:	0018      	movs	r0, r3
   251e4:	4b26      	ldr	r3, [pc, #152]	; (25280 <nm_spi_write+0x178>)
   251e6:	4798      	blx	r3
   251e8:	4b27      	ldr	r3, [pc, #156]	; (25288 <nm_spi_write+0x180>)
   251ea:	0018      	movs	r0, r3
   251ec:	4b24      	ldr	r3, [pc, #144]	; (25280 <nm_spi_write+0x178>)
   251ee:	4798      	blx	r3
		goto _FAIL_;
   251f0:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   251f2:	2317      	movs	r3, #23
   251f4:	18fb      	adds	r3, r7, r3
   251f6:	781b      	ldrb	r3, [r3, #0]
   251f8:	b25b      	sxtb	r3, r3
   251fa:	2b01      	cmp	r3, #1
   251fc:	d030      	beq.n	25260 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   251fe:	2001      	movs	r0, #1
   25200:	4b27      	ldr	r3, [pc, #156]	; (252a0 <nm_spi_write+0x198>)
   25202:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25204:	2300      	movs	r3, #0
   25206:	9300      	str	r3, [sp, #0]
   25208:	2300      	movs	r3, #0
   2520a:	2200      	movs	r2, #0
   2520c:	2100      	movs	r1, #0
   2520e:	20cf      	movs	r0, #207	; 0xcf
   25210:	4c24      	ldr	r4, [pc, #144]	; (252a4 <nm_spi_write+0x19c>)
   25212:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   25214:	20cf      	movs	r0, #207	; 0xcf
   25216:	4b24      	ldr	r3, [pc, #144]	; (252a8 <nm_spi_write+0x1a0>)
   25218:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2521a:	4a24      	ldr	r2, [pc, #144]	; (252ac <nm_spi_write+0x1a4>)
   2521c:	4916      	ldr	r1, [pc, #88]	; (25278 <nm_spi_write+0x170>)
   2521e:	4b17      	ldr	r3, [pc, #92]	; (2527c <nm_spi_write+0x174>)
   25220:	0018      	movs	r0, r3
   25222:	4b17      	ldr	r3, [pc, #92]	; (25280 <nm_spi_write+0x178>)
   25224:	4798      	blx	r3
   25226:	2316      	movs	r3, #22
   25228:	18fb      	adds	r3, r7, r3
   2522a:	7819      	ldrb	r1, [r3, #0]
   2522c:	1dbb      	adds	r3, r7, #6
   2522e:	881b      	ldrh	r3, [r3, #0]
   25230:	68fa      	ldr	r2, [r7, #12]
   25232:	481f      	ldr	r0, [pc, #124]	; (252b0 <nm_spi_write+0x1a8>)
   25234:	4c12      	ldr	r4, [pc, #72]	; (25280 <nm_spi_write+0x178>)
   25236:	47a0      	blx	r4
   25238:	4b13      	ldr	r3, [pc, #76]	; (25288 <nm_spi_write+0x180>)
   2523a:	0018      	movs	r0, r3
   2523c:	4b10      	ldr	r3, [pc, #64]	; (25280 <nm_spi_write+0x178>)
   2523e:	4798      	blx	r3
		nm_bsp_sleep(1);
   25240:	2001      	movs	r0, #1
   25242:	4b17      	ldr	r3, [pc, #92]	; (252a0 <nm_spi_write+0x198>)
   25244:	4798      	blx	r3
		retry--;
   25246:	2316      	movs	r3, #22
   25248:	18fb      	adds	r3, r7, r3
   2524a:	781a      	ldrb	r2, [r3, #0]
   2524c:	2316      	movs	r3, #22
   2524e:	18fb      	adds	r3, r7, r3
   25250:	3a01      	subs	r2, #1
   25252:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   25254:	2316      	movs	r3, #22
   25256:	18fb      	adds	r3, r7, r3
   25258:	781b      	ldrb	r3, [r3, #0]
   2525a:	2b00      	cmp	r3, #0
   2525c:	d000      	beq.n	25260 <nm_spi_write+0x158>
   2525e:	e762      	b.n	25126 <nm_spi_write+0x1e>
	}


	return result;
   25260:	2317      	movs	r3, #23
   25262:	18fb      	adds	r3, r7, r3
   25264:	781b      	ldrb	r3, [r3, #0]
   25266:	b25b      	sxtb	r3, r3
}
   25268:	0018      	movs	r0, r3
   2526a:	46bd      	mov	sp, r7
   2526c:	b007      	add	sp, #28
   2526e:	bd90      	pop	{r4, r7, pc}
   25270:	000244f1 	.word	0x000244f1
   25274:	000003cf 	.word	0x000003cf
   25278:	0003a350 	.word	0x0003a350
   2527c:	00039d08 	.word	0x00039d08
   25280:	0001e979 	.word	0x0001e979
   25284:	0003a0bc 	.word	0x0003a0bc
   25288:	00039d48 	.word	0x00039d48
   2528c:	00024de5 	.word	0x00024de5
   25290:	000003d9 	.word	0x000003d9
   25294:	0003a0ec 	.word	0x0003a0ec
   25298:	000242b5 	.word	0x000242b5
   2529c:	000003e1 	.word	0x000003e1
   252a0:	00020e31 	.word	0x00020e31
   252a4:	00023f75 	.word	0x00023f75
   252a8:	000243b5 	.word	0x000243b5
   252ac:	000003eb 	.word	0x000003eb
   252b0:	0003a114 	.word	0x0003a114

000252b4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   252b4:	b590      	push	{r4, r7, lr}
   252b6:	b087      	sub	sp, #28
   252b8:	af02      	add	r7, sp, #8
   252ba:	6078      	str	r0, [r7, #4]
   252bc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   252be:	230f      	movs	r3, #15
   252c0:	18fb      	adds	r3, r7, r3
   252c2:	220a      	movs	r2, #10
   252c4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   252c6:	230c      	movs	r3, #12
   252c8:	18fb      	adds	r3, r7, r3
   252ca:	2201      	movs	r2, #1
   252cc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   252ce:	230e      	movs	r3, #14
   252d0:	18fb      	adds	r3, r7, r3
   252d2:	22ca      	movs	r2, #202	; 0xca
   252d4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   252d6:	230d      	movs	r3, #13
   252d8:	18fb      	adds	r3, r7, r3
   252da:	2200      	movs	r2, #0
   252dc:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   252de:	687b      	ldr	r3, [r7, #4]
   252e0:	2bff      	cmp	r3, #255	; 0xff
   252e2:	d808      	bhi.n	252f6 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   252e4:	230e      	movs	r3, #14
   252e6:	18fb      	adds	r3, r7, r3
   252e8:	22c4      	movs	r2, #196	; 0xc4
   252ea:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   252ec:	230d      	movs	r3, #13
   252ee:	18fb      	adds	r3, r7, r3
   252f0:	2201      	movs	r2, #1
   252f2:	701a      	strb	r2, [r3, #0]
   252f4:	e007      	b.n	25306 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   252f6:	230e      	movs	r3, #14
   252f8:	18fb      	adds	r3, r7, r3
   252fa:	22ca      	movs	r2, #202	; 0xca
   252fc:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   252fe:	230d      	movs	r3, #13
   25300:	18fb      	adds	r3, r7, r3
   25302:	2200      	movs	r2, #0
   25304:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   25306:	2308      	movs	r3, #8
   25308:	18fa      	adds	r2, r7, r3
   2530a:	6879      	ldr	r1, [r7, #4]
   2530c:	230e      	movs	r3, #14
   2530e:	18fb      	adds	r3, r7, r3
   25310:	7818      	ldrb	r0, [r3, #0]
   25312:	230d      	movs	r3, #13
   25314:	18fb      	adds	r3, r7, r3
   25316:	781b      	ldrb	r3, [r3, #0]
   25318:	9300      	str	r3, [sp, #0]
   2531a:	2304      	movs	r3, #4
   2531c:	4c37      	ldr	r4, [pc, #220]	; (253fc <spi_read_reg+0x148>)
   2531e:	47a0      	blx	r4
   25320:	0002      	movs	r2, r0
   25322:	230c      	movs	r3, #12
   25324:	18fb      	adds	r3, r7, r3
   25326:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   25328:	230c      	movs	r3, #12
   2532a:	18fb      	adds	r3, r7, r3
   2532c:	781b      	ldrb	r3, [r3, #0]
   2532e:	b25b      	sxtb	r3, r3
   25330:	2b01      	cmp	r3, #1
   25332:	d010      	beq.n	25356 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   25334:	4a32      	ldr	r2, [pc, #200]	; (25400 <spi_read_reg+0x14c>)
   25336:	4933      	ldr	r1, [pc, #204]	; (25404 <spi_read_reg+0x150>)
   25338:	4b33      	ldr	r3, [pc, #204]	; (25408 <spi_read_reg+0x154>)
   2533a:	0018      	movs	r0, r3
   2533c:	4b33      	ldr	r3, [pc, #204]	; (2540c <spi_read_reg+0x158>)
   2533e:	4798      	blx	r3
   25340:	687a      	ldr	r2, [r7, #4]
   25342:	4b33      	ldr	r3, [pc, #204]	; (25410 <spi_read_reg+0x15c>)
   25344:	0011      	movs	r1, r2
   25346:	0018      	movs	r0, r3
   25348:	4b30      	ldr	r3, [pc, #192]	; (2540c <spi_read_reg+0x158>)
   2534a:	4798      	blx	r3
   2534c:	4b31      	ldr	r3, [pc, #196]	; (25414 <spi_read_reg+0x160>)
   2534e:	0018      	movs	r0, r3
   25350:	4b2e      	ldr	r3, [pc, #184]	; (2540c <spi_read_reg+0x158>)
   25352:	4798      	blx	r3
		goto _FAIL_;
   25354:	e014      	b.n	25380 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   25356:	2308      	movs	r3, #8
   25358:	18fb      	adds	r3, r7, r3
   2535a:	781b      	ldrb	r3, [r3, #0]
   2535c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2535e:	2308      	movs	r3, #8
   25360:	18fb      	adds	r3, r7, r3
   25362:	785b      	ldrb	r3, [r3, #1]
   25364:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   25366:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   25368:	2308      	movs	r3, #8
   2536a:	18fb      	adds	r3, r7, r3
   2536c:	789b      	ldrb	r3, [r3, #2]
   2536e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   25370:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   25372:	2308      	movs	r3, #8
   25374:	18fb      	adds	r3, r7, r3
   25376:	78db      	ldrb	r3, [r3, #3]
   25378:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2537a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   2537c:	683b      	ldr	r3, [r7, #0]
   2537e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   25380:	230c      	movs	r3, #12
   25382:	18fb      	adds	r3, r7, r3
   25384:	781b      	ldrb	r3, [r3, #0]
   25386:	b25b      	sxtb	r3, r3
   25388:	2b01      	cmp	r3, #1
   2538a:	d02f      	beq.n	253ec <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   2538c:	2001      	movs	r0, #1
   2538e:	4b22      	ldr	r3, [pc, #136]	; (25418 <spi_read_reg+0x164>)
   25390:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25392:	2300      	movs	r3, #0
   25394:	9300      	str	r3, [sp, #0]
   25396:	2300      	movs	r3, #0
   25398:	2200      	movs	r2, #0
   2539a:	2100      	movs	r1, #0
   2539c:	20cf      	movs	r0, #207	; 0xcf
   2539e:	4c1f      	ldr	r4, [pc, #124]	; (2541c <spi_read_reg+0x168>)
   253a0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   253a2:	20cf      	movs	r0, #207	; 0xcf
   253a4:	4b1e      	ldr	r3, [pc, #120]	; (25420 <spi_read_reg+0x16c>)
   253a6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   253a8:	4a1e      	ldr	r2, [pc, #120]	; (25424 <spi_read_reg+0x170>)
   253aa:	4916      	ldr	r1, [pc, #88]	; (25404 <spi_read_reg+0x150>)
   253ac:	4b16      	ldr	r3, [pc, #88]	; (25408 <spi_read_reg+0x154>)
   253ae:	0018      	movs	r0, r3
   253b0:	4b16      	ldr	r3, [pc, #88]	; (2540c <spi_read_reg+0x158>)
   253b2:	4798      	blx	r3
   253b4:	230f      	movs	r3, #15
   253b6:	18fb      	adds	r3, r7, r3
   253b8:	7819      	ldrb	r1, [r3, #0]
   253ba:	687a      	ldr	r2, [r7, #4]
   253bc:	4b1a      	ldr	r3, [pc, #104]	; (25428 <spi_read_reg+0x174>)
   253be:	0018      	movs	r0, r3
   253c0:	4b12      	ldr	r3, [pc, #72]	; (2540c <spi_read_reg+0x158>)
   253c2:	4798      	blx	r3
   253c4:	4b13      	ldr	r3, [pc, #76]	; (25414 <spi_read_reg+0x160>)
   253c6:	0018      	movs	r0, r3
   253c8:	4b10      	ldr	r3, [pc, #64]	; (2540c <spi_read_reg+0x158>)
   253ca:	4798      	blx	r3
		nm_bsp_sleep(1);
   253cc:	2001      	movs	r0, #1
   253ce:	4b12      	ldr	r3, [pc, #72]	; (25418 <spi_read_reg+0x164>)
   253d0:	4798      	blx	r3
		retry--;
   253d2:	230f      	movs	r3, #15
   253d4:	18fb      	adds	r3, r7, r3
   253d6:	781a      	ldrb	r2, [r3, #0]
   253d8:	230f      	movs	r3, #15
   253da:	18fb      	adds	r3, r7, r3
   253dc:	3a01      	subs	r2, #1
   253de:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   253e0:	230f      	movs	r3, #15
   253e2:	18fb      	adds	r3, r7, r3
   253e4:	781b      	ldrb	r3, [r3, #0]
   253e6:	2b00      	cmp	r3, #0
   253e8:	d000      	beq.n	253ec <spi_read_reg+0x138>
   253ea:	e778      	b.n	252de <spi_read_reg+0x2a>
	}
		
	return result;
   253ec:	230c      	movs	r3, #12
   253ee:	18fb      	adds	r3, r7, r3
   253f0:	781b      	ldrb	r3, [r3, #0]
   253f2:	b25b      	sxtb	r3, r3
}
   253f4:	0018      	movs	r0, r3
   253f6:	46bd      	mov	sp, r7
   253f8:	b005      	add	sp, #20
   253fa:	bd90      	pop	{r4, r7, pc}
   253fc:	000244f1 	.word	0x000244f1
   25400:	00000423 	.word	0x00000423
   25404:	0003a360 	.word	0x0003a360
   25408:	00039d08 	.word	0x00039d08
   2540c:	0001e979 	.word	0x0001e979
   25410:	0003a130 	.word	0x0003a130
   25414:	00039d48 	.word	0x00039d48
   25418:	00020e31 	.word	0x00020e31
   2541c:	00023f75 	.word	0x00023f75
   25420:	000243b5 	.word	0x000243b5
   25424:	00000435 	.word	0x00000435
   25428:	0003a15c 	.word	0x0003a15c

0002542c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   2542c:	b590      	push	{r4, r7, lr}
   2542e:	b089      	sub	sp, #36	; 0x24
   25430:	af02      	add	r7, sp, #8
   25432:	60f8      	str	r0, [r7, #12]
   25434:	60b9      	str	r1, [r7, #8]
   25436:	1dbb      	adds	r3, r7, #6
   25438:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   2543a:	2316      	movs	r3, #22
   2543c:	18fb      	adds	r3, r7, r3
   2543e:	22c8      	movs	r2, #200	; 0xc8
   25440:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   25442:	2317      	movs	r3, #23
   25444:	18fb      	adds	r3, r7, r3
   25446:	220a      	movs	r2, #10
   25448:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   2544a:	1dbb      	adds	r3, r7, #6
   2544c:	881c      	ldrh	r4, [r3, #0]
   2544e:	68ba      	ldr	r2, [r7, #8]
   25450:	68f9      	ldr	r1, [r7, #12]
   25452:	2316      	movs	r3, #22
   25454:	18fb      	adds	r3, r7, r3
   25456:	7818      	ldrb	r0, [r3, #0]
   25458:	2300      	movs	r3, #0
   2545a:	9300      	str	r3, [sp, #0]
   2545c:	0023      	movs	r3, r4
   2545e:	4c2e      	ldr	r4, [pc, #184]	; (25518 <nm_spi_read+0xec>)
   25460:	47a0      	blx	r4
   25462:	0002      	movs	r2, r0
   25464:	2315      	movs	r3, #21
   25466:	18fb      	adds	r3, r7, r3
   25468:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2546a:	2315      	movs	r3, #21
   2546c:	18fb      	adds	r3, r7, r3
   2546e:	781b      	ldrb	r3, [r3, #0]
   25470:	b25b      	sxtb	r3, r3
   25472:	2b01      	cmp	r3, #1
   25474:	d010      	beq.n	25498 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   25476:	4a29      	ldr	r2, [pc, #164]	; (2551c <nm_spi_read+0xf0>)
   25478:	4929      	ldr	r1, [pc, #164]	; (25520 <nm_spi_read+0xf4>)
   2547a:	4b2a      	ldr	r3, [pc, #168]	; (25524 <nm_spi_read+0xf8>)
   2547c:	0018      	movs	r0, r3
   2547e:	4b2a      	ldr	r3, [pc, #168]	; (25528 <nm_spi_read+0xfc>)
   25480:	4798      	blx	r3
   25482:	68fa      	ldr	r2, [r7, #12]
   25484:	4b29      	ldr	r3, [pc, #164]	; (2552c <nm_spi_read+0x100>)
   25486:	0011      	movs	r1, r2
   25488:	0018      	movs	r0, r3
   2548a:	4b27      	ldr	r3, [pc, #156]	; (25528 <nm_spi_read+0xfc>)
   2548c:	4798      	blx	r3
   2548e:	4b28      	ldr	r3, [pc, #160]	; (25530 <nm_spi_read+0x104>)
   25490:	0018      	movs	r0, r3
   25492:	4b25      	ldr	r3, [pc, #148]	; (25528 <nm_spi_read+0xfc>)
   25494:	4798      	blx	r3
		goto _FAIL_;
   25496:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   25498:	2315      	movs	r3, #21
   2549a:	18fb      	adds	r3, r7, r3
   2549c:	781b      	ldrb	r3, [r3, #0]
   2549e:	b25b      	sxtb	r3, r3
   254a0:	2b01      	cmp	r3, #1
   254a2:	d030      	beq.n	25506 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   254a4:	2001      	movs	r0, #1
   254a6:	4b23      	ldr	r3, [pc, #140]	; (25534 <nm_spi_read+0x108>)
   254a8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   254aa:	2300      	movs	r3, #0
   254ac:	9300      	str	r3, [sp, #0]
   254ae:	2300      	movs	r3, #0
   254b0:	2200      	movs	r2, #0
   254b2:	2100      	movs	r1, #0
   254b4:	20cf      	movs	r0, #207	; 0xcf
   254b6:	4c20      	ldr	r4, [pc, #128]	; (25538 <nm_spi_read+0x10c>)
   254b8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   254ba:	20cf      	movs	r0, #207	; 0xcf
   254bc:	4b1f      	ldr	r3, [pc, #124]	; (2553c <nm_spi_read+0x110>)
   254be:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   254c0:	4a1f      	ldr	r2, [pc, #124]	; (25540 <nm_spi_read+0x114>)
   254c2:	4917      	ldr	r1, [pc, #92]	; (25520 <nm_spi_read+0xf4>)
   254c4:	4b17      	ldr	r3, [pc, #92]	; (25524 <nm_spi_read+0xf8>)
   254c6:	0018      	movs	r0, r3
   254c8:	4b17      	ldr	r3, [pc, #92]	; (25528 <nm_spi_read+0xfc>)
   254ca:	4798      	blx	r3
   254cc:	2317      	movs	r3, #23
   254ce:	18fb      	adds	r3, r7, r3
   254d0:	7819      	ldrb	r1, [r3, #0]
   254d2:	1dbb      	adds	r3, r7, #6
   254d4:	881b      	ldrh	r3, [r3, #0]
   254d6:	68fa      	ldr	r2, [r7, #12]
   254d8:	481a      	ldr	r0, [pc, #104]	; (25544 <nm_spi_read+0x118>)
   254da:	4c13      	ldr	r4, [pc, #76]	; (25528 <nm_spi_read+0xfc>)
   254dc:	47a0      	blx	r4
   254de:	4b14      	ldr	r3, [pc, #80]	; (25530 <nm_spi_read+0x104>)
   254e0:	0018      	movs	r0, r3
   254e2:	4b11      	ldr	r3, [pc, #68]	; (25528 <nm_spi_read+0xfc>)
   254e4:	4798      	blx	r3
		nm_bsp_sleep(1);
   254e6:	2001      	movs	r0, #1
   254e8:	4b12      	ldr	r3, [pc, #72]	; (25534 <nm_spi_read+0x108>)
   254ea:	4798      	blx	r3
		retry--;
   254ec:	2317      	movs	r3, #23
   254ee:	18fb      	adds	r3, r7, r3
   254f0:	781a      	ldrb	r2, [r3, #0]
   254f2:	2317      	movs	r3, #23
   254f4:	18fb      	adds	r3, r7, r3
   254f6:	3a01      	subs	r2, #1
   254f8:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   254fa:	2317      	movs	r3, #23
   254fc:	18fb      	adds	r3, r7, r3
   254fe:	781b      	ldrb	r3, [r3, #0]
   25500:	2b00      	cmp	r3, #0
   25502:	d000      	beq.n	25506 <nm_spi_read+0xda>
   25504:	e7a1      	b.n	2544a <nm_spi_read+0x1e>
	}

	return result;
   25506:	2315      	movs	r3, #21
   25508:	18fb      	adds	r3, r7, r3
   2550a:	781b      	ldrb	r3, [r3, #0]
   2550c:	b25b      	sxtb	r3, r3
}
   2550e:	0018      	movs	r0, r3
   25510:	46bd      	mov	sp, r7
   25512:	b007      	add	sp, #28
   25514:	bd90      	pop	{r4, r7, pc}
   25516:	46c0      	nop			; (mov r8, r8)
   25518:	000244f1 	.word	0x000244f1
   2551c:	00000472 	.word	0x00000472
   25520:	0003a370 	.word	0x0003a370
   25524:	00039d08 	.word	0x00039d08
   25528:	0001e979 	.word	0x0001e979
   2552c:	0003a174 	.word	0x0003a174
   25530:	00039d48 	.word	0x00039d48
   25534:	00020e31 	.word	0x00020e31
   25538:	00023f75 	.word	0x00023f75
   2553c:	000243b5 	.word	0x000243b5
   25540:	0000047d 	.word	0x0000047d
   25544:	0003a114 	.word	0x0003a114

00025548 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   25548:	b580      	push	{r7, lr}
   2554a:	b082      	sub	sp, #8
   2554c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2554e:	4b0c      	ldr	r3, [pc, #48]	; (25580 <spi_init_pkt_sz+0x38>)
   25550:	0018      	movs	r0, r3
   25552:	4b0c      	ldr	r3, [pc, #48]	; (25584 <spi_init_pkt_sz+0x3c>)
   25554:	4798      	blx	r3
   25556:	0003      	movs	r3, r0
   25558:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   2555a:	687b      	ldr	r3, [r7, #4]
   2555c:	2270      	movs	r2, #112	; 0x70
   2555e:	4393      	bics	r3, r2
   25560:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   25562:	687b      	ldr	r3, [r7, #4]
   25564:	2250      	movs	r2, #80	; 0x50
   25566:	4313      	orrs	r3, r2
   25568:	607b      	str	r3, [r7, #4]
   2556a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   2556c:	687b      	ldr	r3, [r7, #4]
   2556e:	4a04      	ldr	r2, [pc, #16]	; (25580 <spi_init_pkt_sz+0x38>)
   25570:	0019      	movs	r1, r3
   25572:	0010      	movs	r0, r2
   25574:	4b04      	ldr	r3, [pc, #16]	; (25588 <spi_init_pkt_sz+0x40>)
   25576:	4798      	blx	r3
}
   25578:	46c0      	nop			; (mov r8, r8)
   2557a:	46bd      	mov	sp, r7
   2557c:	b002      	add	sp, #8
   2557e:	bd80      	pop	{r7, pc}
   25580:	0000e824 	.word	0x0000e824
   25584:	00025721 	.word	0x00025721
   25588:	00025795 	.word	0x00025795

0002558c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   2558c:	b590      	push	{r4, r7, lr}
   2558e:	b083      	sub	sp, #12
   25590:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25592:	2300      	movs	r3, #0
   25594:	9300      	str	r3, [sp, #0]
   25596:	2300      	movs	r3, #0
   25598:	2200      	movs	r2, #0
   2559a:	2100      	movs	r1, #0
   2559c:	20cf      	movs	r0, #207	; 0xcf
   2559e:	4c05      	ldr	r4, [pc, #20]	; (255b4 <nm_spi_reset+0x28>)
   255a0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   255a2:	20cf      	movs	r0, #207	; 0xcf
   255a4:	4b04      	ldr	r3, [pc, #16]	; (255b8 <nm_spi_reset+0x2c>)
   255a6:	4798      	blx	r3
	return M2M_SUCCESS;
   255a8:	2300      	movs	r3, #0
}
   255aa:	0018      	movs	r0, r3
   255ac:	46bd      	mov	sp, r7
   255ae:	b001      	add	sp, #4
   255b0:	bd90      	pop	{r4, r7, pc}
   255b2:	46c0      	nop			; (mov r8, r8)
   255b4:	00023f75 	.word	0x00023f75
   255b8:	000243b5 	.word	0x000243b5

000255bc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   255bc:	b580      	push	{r7, lr}
   255be:	b082      	sub	sp, #8
   255c0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   255c2:	2300      	movs	r3, #0
   255c4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   255c6:	4b40      	ldr	r3, [pc, #256]	; (256c8 <nm_spi_init+0x10c>)
   255c8:	2200      	movs	r2, #0
   255ca:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   255cc:	003b      	movs	r3, r7
   255ce:	4a3f      	ldr	r2, [pc, #252]	; (256cc <nm_spi_init+0x110>)
   255d0:	0019      	movs	r1, r3
   255d2:	0010      	movs	r0, r2
   255d4:	4b3e      	ldr	r3, [pc, #248]	; (256d0 <nm_spi_init+0x114>)
   255d6:	4798      	blx	r3
   255d8:	1e03      	subs	r3, r0, #0
   255da:	d129      	bne.n	25630 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   255dc:	4b3a      	ldr	r3, [pc, #232]	; (256c8 <nm_spi_init+0x10c>)
   255de:	2201      	movs	r2, #1
   255e0:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   255e2:	2398      	movs	r3, #152	; 0x98
   255e4:	00da      	lsls	r2, r3, #3
   255e6:	493b      	ldr	r1, [pc, #236]	; (256d4 <nm_spi_init+0x118>)
   255e8:	4b3b      	ldr	r3, [pc, #236]	; (256d8 <nm_spi_init+0x11c>)
   255ea:	0018      	movs	r0, r3
   255ec:	4b3b      	ldr	r3, [pc, #236]	; (256dc <nm_spi_init+0x120>)
   255ee:	4798      	blx	r3
   255f0:	4b3b      	ldr	r3, [pc, #236]	; (256e0 <nm_spi_init+0x124>)
   255f2:	0018      	movs	r0, r3
   255f4:	4b39      	ldr	r3, [pc, #228]	; (256dc <nm_spi_init+0x120>)
   255f6:	4798      	blx	r3
   255f8:	4b3a      	ldr	r3, [pc, #232]	; (256e4 <nm_spi_init+0x128>)
   255fa:	0018      	movs	r0, r3
   255fc:	4b37      	ldr	r3, [pc, #220]	; (256dc <nm_spi_init+0x120>)
   255fe:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   25600:	003b      	movs	r3, r7
   25602:	4a32      	ldr	r2, [pc, #200]	; (256cc <nm_spi_init+0x110>)
   25604:	0019      	movs	r1, r3
   25606:	0010      	movs	r0, r2
   25608:	4b31      	ldr	r3, [pc, #196]	; (256d0 <nm_spi_init+0x114>)
   2560a:	4798      	blx	r3
   2560c:	1e03      	subs	r3, r0, #0
   2560e:	d10f      	bne.n	25630 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   25610:	4a35      	ldr	r2, [pc, #212]	; (256e8 <nm_spi_init+0x12c>)
   25612:	4930      	ldr	r1, [pc, #192]	; (256d4 <nm_spi_init+0x118>)
   25614:	4b30      	ldr	r3, [pc, #192]	; (256d8 <nm_spi_init+0x11c>)
   25616:	0018      	movs	r0, r3
   25618:	4b30      	ldr	r3, [pc, #192]	; (256dc <nm_spi_init+0x120>)
   2561a:	4798      	blx	r3
   2561c:	4b33      	ldr	r3, [pc, #204]	; (256ec <nm_spi_init+0x130>)
   2561e:	0018      	movs	r0, r3
   25620:	4b2e      	ldr	r3, [pc, #184]	; (256dc <nm_spi_init+0x120>)
   25622:	4798      	blx	r3
   25624:	4b2f      	ldr	r3, [pc, #188]	; (256e4 <nm_spi_init+0x128>)
   25626:	0018      	movs	r0, r3
   25628:	4b2c      	ldr	r3, [pc, #176]	; (256dc <nm_spi_init+0x120>)
   2562a:	4798      	blx	r3
			return 0;
   2562c:	2300      	movs	r3, #0
   2562e:	e047      	b.n	256c0 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   25630:	4b25      	ldr	r3, [pc, #148]	; (256c8 <nm_spi_init+0x10c>)
   25632:	781b      	ldrb	r3, [r3, #0]
   25634:	2b00      	cmp	r3, #0
   25636:	d126      	bne.n	25686 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   25638:	683b      	ldr	r3, [r7, #0]
   2563a:	220c      	movs	r2, #12
   2563c:	4393      	bics	r3, r2
   2563e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   25640:	683b      	ldr	r3, [r7, #0]
   25642:	2270      	movs	r2, #112	; 0x70
   25644:	4393      	bics	r3, r2
   25646:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   25648:	683b      	ldr	r3, [r7, #0]
   2564a:	2250      	movs	r2, #80	; 0x50
   2564c:	4313      	orrs	r3, r2
   2564e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   25650:	683b      	ldr	r3, [r7, #0]
   25652:	4a1e      	ldr	r2, [pc, #120]	; (256cc <nm_spi_init+0x110>)
   25654:	0019      	movs	r1, r3
   25656:	0010      	movs	r0, r2
   25658:	4b25      	ldr	r3, [pc, #148]	; (256f0 <nm_spi_init+0x134>)
   2565a:	4798      	blx	r3
   2565c:	1e03      	subs	r3, r0, #0
   2565e:	d10f      	bne.n	25680 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   25660:	4a24      	ldr	r2, [pc, #144]	; (256f4 <nm_spi_init+0x138>)
   25662:	491c      	ldr	r1, [pc, #112]	; (256d4 <nm_spi_init+0x118>)
   25664:	4b1c      	ldr	r3, [pc, #112]	; (256d8 <nm_spi_init+0x11c>)
   25666:	0018      	movs	r0, r3
   25668:	4b1c      	ldr	r3, [pc, #112]	; (256dc <nm_spi_init+0x120>)
   2566a:	4798      	blx	r3
   2566c:	4b22      	ldr	r3, [pc, #136]	; (256f8 <nm_spi_init+0x13c>)
   2566e:	0018      	movs	r0, r3
   25670:	4b1a      	ldr	r3, [pc, #104]	; (256dc <nm_spi_init+0x120>)
   25672:	4798      	blx	r3
   25674:	4b1b      	ldr	r3, [pc, #108]	; (256e4 <nm_spi_init+0x128>)
   25676:	0018      	movs	r0, r3
   25678:	4b18      	ldr	r3, [pc, #96]	; (256dc <nm_spi_init+0x120>)
   2567a:	4798      	blx	r3
			return 0;
   2567c:	2300      	movs	r3, #0
   2567e:	e01f      	b.n	256c0 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   25680:	4b11      	ldr	r3, [pc, #68]	; (256c8 <nm_spi_init+0x10c>)
   25682:	2201      	movs	r2, #1
   25684:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   25686:	1d3a      	adds	r2, r7, #4
   25688:	2380      	movs	r3, #128	; 0x80
   2568a:	015b      	lsls	r3, r3, #5
   2568c:	0011      	movs	r1, r2
   2568e:	0018      	movs	r0, r3
   25690:	4b0f      	ldr	r3, [pc, #60]	; (256d0 <nm_spi_init+0x114>)
   25692:	4798      	blx	r3
   25694:	1e03      	subs	r3, r0, #0
   25696:	d110      	bne.n	256ba <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   25698:	4a18      	ldr	r2, [pc, #96]	; (256fc <nm_spi_init+0x140>)
   2569a:	490e      	ldr	r1, [pc, #56]	; (256d4 <nm_spi_init+0x118>)
   2569c:	4b0e      	ldr	r3, [pc, #56]	; (256d8 <nm_spi_init+0x11c>)
   2569e:	0018      	movs	r0, r3
   256a0:	4b0e      	ldr	r3, [pc, #56]	; (256dc <nm_spi_init+0x120>)
   256a2:	4798      	blx	r3
   256a4:	4b16      	ldr	r3, [pc, #88]	; (25700 <nm_spi_init+0x144>)
   256a6:	0018      	movs	r0, r3
   256a8:	4b0c      	ldr	r3, [pc, #48]	; (256dc <nm_spi_init+0x120>)
   256aa:	4798      	blx	r3
   256ac:	4b0d      	ldr	r3, [pc, #52]	; (256e4 <nm_spi_init+0x128>)
   256ae:	0018      	movs	r0, r3
   256b0:	4b0a      	ldr	r3, [pc, #40]	; (256dc <nm_spi_init+0x120>)
   256b2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   256b4:	2306      	movs	r3, #6
   256b6:	425b      	negs	r3, r3
   256b8:	e002      	b.n	256c0 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   256ba:	4b12      	ldr	r3, [pc, #72]	; (25704 <nm_spi_init+0x148>)
   256bc:	4798      	blx	r3


	return M2M_SUCCESS;
   256be:	2300      	movs	r3, #0
}
   256c0:	0018      	movs	r0, r3
   256c2:	46bd      	mov	sp, r7
   256c4:	b002      	add	sp, #8
   256c6:	bd80      	pop	{r7, pc}
   256c8:	200042b0 	.word	0x200042b0
   256cc:	0000e824 	.word	0x0000e824
   256d0:	000252b5 	.word	0x000252b5
   256d4:	0003a37c 	.word	0x0003a37c
   256d8:	00039d08 	.word	0x00039d08
   256dc:	0001e979 	.word	0x0001e979
   256e0:	0003a1a4 	.word	0x0003a1a4
   256e4:	00039d48 	.word	0x00039d48
   256e8:	000004c3 	.word	0x000004c3
   256ec:	0003a1f4 	.word	0x0003a1f4
   256f0:	00024fbd 	.word	0x00024fbd
   256f4:	000004cd 	.word	0x000004cd
   256f8:	0003a224 	.word	0x0003a224
   256fc:	000004d7 	.word	0x000004d7
   25700:	0003a258 	.word	0x0003a258
   25704:	00025549 	.word	0x00025549

00025708 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   25708:	b580      	push	{r7, lr}
   2570a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   2570c:	4b03      	ldr	r3, [pc, #12]	; (2571c <nm_spi_deinit+0x14>)
   2570e:	2200      	movs	r2, #0
   25710:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   25712:	2300      	movs	r3, #0
}
   25714:	0018      	movs	r0, r3
   25716:	46bd      	mov	sp, r7
   25718:	bd80      	pop	{r7, pc}
   2571a:	46c0      	nop			; (mov r8, r8)
   2571c:	200042b0 	.word	0x200042b0

00025720 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   25720:	b580      	push	{r7, lr}
   25722:	b084      	sub	sp, #16
   25724:	af00      	add	r7, sp, #0
   25726:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   25728:	230c      	movs	r3, #12
   2572a:	18fa      	adds	r2, r7, r3
   2572c:	687b      	ldr	r3, [r7, #4]
   2572e:	0011      	movs	r1, r2
   25730:	0018      	movs	r0, r3
   25732:	4b03      	ldr	r3, [pc, #12]	; (25740 <nm_spi_read_reg+0x20>)
   25734:	4798      	blx	r3

	return u32Val;
   25736:	68fb      	ldr	r3, [r7, #12]
}
   25738:	0018      	movs	r0, r3
   2573a:	46bd      	mov	sp, r7
   2573c:	b004      	add	sp, #16
   2573e:	bd80      	pop	{r7, pc}
   25740:	000252b5 	.word	0x000252b5

00025744 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   25744:	b590      	push	{r4, r7, lr}
   25746:	b085      	sub	sp, #20
   25748:	af00      	add	r7, sp, #0
   2574a:	6078      	str	r0, [r7, #4]
   2574c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   2574e:	230f      	movs	r3, #15
   25750:	18fc      	adds	r4, r7, r3
   25752:	683a      	ldr	r2, [r7, #0]
   25754:	687b      	ldr	r3, [r7, #4]
   25756:	0011      	movs	r1, r2
   25758:	0018      	movs	r0, r3
   2575a:	4b0d      	ldr	r3, [pc, #52]	; (25790 <nm_spi_read_reg_with_ret+0x4c>)
   2575c:	4798      	blx	r3
   2575e:	0003      	movs	r3, r0
   25760:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25762:	230f      	movs	r3, #15
   25764:	18fb      	adds	r3, r7, r3
   25766:	781b      	ldrb	r3, [r3, #0]
   25768:	b25b      	sxtb	r3, r3
   2576a:	2b01      	cmp	r3, #1
   2576c:	d104      	bne.n	25778 <nm_spi_read_reg_with_ret+0x34>
   2576e:	230f      	movs	r3, #15
   25770:	18fb      	adds	r3, r7, r3
   25772:	2200      	movs	r2, #0
   25774:	701a      	strb	r2, [r3, #0]
   25776:	e003      	b.n	25780 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25778:	230f      	movs	r3, #15
   2577a:	18fb      	adds	r3, r7, r3
   2577c:	22fa      	movs	r2, #250	; 0xfa
   2577e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25780:	230f      	movs	r3, #15
   25782:	18fb      	adds	r3, r7, r3
   25784:	781b      	ldrb	r3, [r3, #0]
   25786:	b25b      	sxtb	r3, r3
}
   25788:	0018      	movs	r0, r3
   2578a:	46bd      	mov	sp, r7
   2578c:	b005      	add	sp, #20
   2578e:	bd90      	pop	{r4, r7, pc}
   25790:	000252b5 	.word	0x000252b5

00025794 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   25794:	b590      	push	{r4, r7, lr}
   25796:	b085      	sub	sp, #20
   25798:	af00      	add	r7, sp, #0
   2579a:	6078      	str	r0, [r7, #4]
   2579c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   2579e:	230f      	movs	r3, #15
   257a0:	18fc      	adds	r4, r7, r3
   257a2:	683a      	ldr	r2, [r7, #0]
   257a4:	687b      	ldr	r3, [r7, #4]
   257a6:	0011      	movs	r1, r2
   257a8:	0018      	movs	r0, r3
   257aa:	4b0d      	ldr	r3, [pc, #52]	; (257e0 <nm_spi_write_reg+0x4c>)
   257ac:	4798      	blx	r3
   257ae:	0003      	movs	r3, r0
   257b0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   257b2:	230f      	movs	r3, #15
   257b4:	18fb      	adds	r3, r7, r3
   257b6:	781b      	ldrb	r3, [r3, #0]
   257b8:	b25b      	sxtb	r3, r3
   257ba:	2b01      	cmp	r3, #1
   257bc:	d104      	bne.n	257c8 <nm_spi_write_reg+0x34>
   257be:	230f      	movs	r3, #15
   257c0:	18fb      	adds	r3, r7, r3
   257c2:	2200      	movs	r2, #0
   257c4:	701a      	strb	r2, [r3, #0]
   257c6:	e003      	b.n	257d0 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   257c8:	230f      	movs	r3, #15
   257ca:	18fb      	adds	r3, r7, r3
   257cc:	22fa      	movs	r2, #250	; 0xfa
   257ce:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   257d0:	230f      	movs	r3, #15
   257d2:	18fb      	adds	r3, r7, r3
   257d4:	781b      	ldrb	r3, [r3, #0]
   257d6:	b25b      	sxtb	r3, r3
}
   257d8:	0018      	movs	r0, r3
   257da:	46bd      	mov	sp, r7
   257dc:	b005      	add	sp, #20
   257de:	bd90      	pop	{r4, r7, pc}
   257e0:	00024fbd 	.word	0x00024fbd

000257e4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   257e4:	b590      	push	{r4, r7, lr}
   257e6:	b087      	sub	sp, #28
   257e8:	af00      	add	r7, sp, #0
   257ea:	60f8      	str	r0, [r7, #12]
   257ec:	60b9      	str	r1, [r7, #8]
   257ee:	1dbb      	adds	r3, r7, #6
   257f0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   257f2:	2317      	movs	r3, #23
   257f4:	18fc      	adds	r4, r7, r3
   257f6:	1dbb      	adds	r3, r7, #6
   257f8:	881a      	ldrh	r2, [r3, #0]
   257fa:	68b9      	ldr	r1, [r7, #8]
   257fc:	68fb      	ldr	r3, [r7, #12]
   257fe:	0018      	movs	r0, r3
   25800:	4b0d      	ldr	r3, [pc, #52]	; (25838 <nm_spi_read_block+0x54>)
   25802:	4798      	blx	r3
   25804:	0003      	movs	r3, r0
   25806:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25808:	2317      	movs	r3, #23
   2580a:	18fb      	adds	r3, r7, r3
   2580c:	781b      	ldrb	r3, [r3, #0]
   2580e:	b25b      	sxtb	r3, r3
   25810:	2b01      	cmp	r3, #1
   25812:	d104      	bne.n	2581e <nm_spi_read_block+0x3a>
   25814:	2317      	movs	r3, #23
   25816:	18fb      	adds	r3, r7, r3
   25818:	2200      	movs	r2, #0
   2581a:	701a      	strb	r2, [r3, #0]
   2581c:	e003      	b.n	25826 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2581e:	2317      	movs	r3, #23
   25820:	18fb      	adds	r3, r7, r3
   25822:	22fa      	movs	r2, #250	; 0xfa
   25824:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25826:	2317      	movs	r3, #23
   25828:	18fb      	adds	r3, r7, r3
   2582a:	781b      	ldrb	r3, [r3, #0]
   2582c:	b25b      	sxtb	r3, r3
}
   2582e:	0018      	movs	r0, r3
   25830:	46bd      	mov	sp, r7
   25832:	b007      	add	sp, #28
   25834:	bd90      	pop	{r4, r7, pc}
   25836:	46c0      	nop			; (mov r8, r8)
   25838:	0002542d 	.word	0x0002542d

0002583c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   2583c:	b590      	push	{r4, r7, lr}
   2583e:	b087      	sub	sp, #28
   25840:	af00      	add	r7, sp, #0
   25842:	60f8      	str	r0, [r7, #12]
   25844:	60b9      	str	r1, [r7, #8]
   25846:	1dbb      	adds	r3, r7, #6
   25848:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   2584a:	2317      	movs	r3, #23
   2584c:	18fc      	adds	r4, r7, r3
   2584e:	1dbb      	adds	r3, r7, #6
   25850:	881a      	ldrh	r2, [r3, #0]
   25852:	68b9      	ldr	r1, [r7, #8]
   25854:	68fb      	ldr	r3, [r7, #12]
   25856:	0018      	movs	r0, r3
   25858:	4b0d      	ldr	r3, [pc, #52]	; (25890 <nm_spi_write_block+0x54>)
   2585a:	4798      	blx	r3
   2585c:	0003      	movs	r3, r0
   2585e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25860:	2317      	movs	r3, #23
   25862:	18fb      	adds	r3, r7, r3
   25864:	781b      	ldrb	r3, [r3, #0]
   25866:	b25b      	sxtb	r3, r3
   25868:	2b01      	cmp	r3, #1
   2586a:	d104      	bne.n	25876 <nm_spi_write_block+0x3a>
   2586c:	2317      	movs	r3, #23
   2586e:	18fb      	adds	r3, r7, r3
   25870:	2200      	movs	r2, #0
   25872:	701a      	strb	r2, [r3, #0]
   25874:	e003      	b.n	2587e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25876:	2317      	movs	r3, #23
   25878:	18fb      	adds	r3, r7, r3
   2587a:	22fa      	movs	r2, #250	; 0xfa
   2587c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2587e:	2317      	movs	r3, #23
   25880:	18fb      	adds	r3, r7, r3
   25882:	781b      	ldrb	r3, [r3, #0]
   25884:	b25b      	sxtb	r3, r3
}
   25886:	0018      	movs	r0, r3
   25888:	46bd      	mov	sp, r7
   2588a:	b007      	add	sp, #28
   2588c:	bd90      	pop	{r4, r7, pc}
   2588e:	46c0      	nop			; (mov r8, r8)
   25890:	00025109 	.word	0x00025109

00025894 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   25894:	b590      	push	{r4, r7, lr}
   25896:	b089      	sub	sp, #36	; 0x24
   25898:	af00      	add	r7, sp, #0
   2589a:	60b9      	str	r1, [r7, #8]
   2589c:	0011      	movs	r1, r2
   2589e:	607b      	str	r3, [r7, #4]
   258a0:	230f      	movs	r3, #15
   258a2:	18fb      	adds	r3, r7, r3
   258a4:	1c02      	adds	r2, r0, #0
   258a6:	701a      	strb	r2, [r3, #0]
   258a8:	230e      	movs	r3, #14
   258aa:	18fb      	adds	r3, r7, r3
   258ac:	1c0a      	adds	r2, r1, #0
   258ae:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   258b0:	2330      	movs	r3, #48	; 0x30
   258b2:	18fb      	adds	r3, r7, r3
   258b4:	881b      	ldrh	r3, [r3, #0]
   258b6:	2b00      	cmp	r3, #0
   258b8:	d100      	bne.n	258bc <Socket_ReadSocketData+0x28>
   258ba:	e0d7      	b.n	25a6c <Socket_ReadSocketData+0x1d8>
   258bc:	230f      	movs	r3, #15
   258be:	18fb      	adds	r3, r7, r3
   258c0:	2200      	movs	r2, #0
   258c2:	569a      	ldrsb	r2, [r3, r2]
   258c4:	4b6b      	ldr	r3, [pc, #428]	; (25a74 <Socket_ReadSocketData+0x1e0>)
   258c6:	0112      	lsls	r2, r2, #4
   258c8:	58d3      	ldr	r3, [r2, r3]
   258ca:	2b00      	cmp	r3, #0
   258cc:	d100      	bne.n	258d0 <Socket_ReadSocketData+0x3c>
   258ce:	e0cd      	b.n	25a6c <Socket_ReadSocketData+0x1d8>
   258d0:	230f      	movs	r3, #15
   258d2:	18fb      	adds	r3, r7, r3
   258d4:	781b      	ldrb	r3, [r3, #0]
   258d6:	b25b      	sxtb	r3, r3
   258d8:	4a66      	ldr	r2, [pc, #408]	; (25a74 <Socket_ReadSocketData+0x1e0>)
   258da:	011b      	lsls	r3, r3, #4
   258dc:	18d3      	adds	r3, r2, r3
   258de:	3304      	adds	r3, #4
   258e0:	881b      	ldrh	r3, [r3, #0]
   258e2:	b29b      	uxth	r3, r3
   258e4:	2b00      	cmp	r3, #0
   258e6:	d100      	bne.n	258ea <Socket_ReadSocketData+0x56>
   258e8:	e0c0      	b.n	25a6c <Socket_ReadSocketData+0x1d8>
   258ea:	230f      	movs	r3, #15
   258ec:	18fb      	adds	r3, r7, r3
   258ee:	781b      	ldrb	r3, [r3, #0]
   258f0:	b25b      	sxtb	r3, r3
   258f2:	4a60      	ldr	r2, [pc, #384]	; (25a74 <Socket_ReadSocketData+0x1e0>)
   258f4:	011b      	lsls	r3, r3, #4
   258f6:	18d3      	adds	r3, r2, r3
   258f8:	330a      	adds	r3, #10
   258fa:	781b      	ldrb	r3, [r3, #0]
   258fc:	b2db      	uxtb	r3, r3
   258fe:	2b01      	cmp	r3, #1
   25900:	d000      	beq.n	25904 <Socket_ReadSocketData+0x70>
   25902:	e0b3      	b.n	25a6c <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   25904:	687b      	ldr	r3, [r7, #4]
   25906:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   25908:	68bb      	ldr	r3, [r7, #8]
   2590a:	2230      	movs	r2, #48	; 0x30
   2590c:	18ba      	adds	r2, r7, r2
   2590e:	8812      	ldrh	r2, [r2, #0]
   25910:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   25912:	2319      	movs	r3, #25
   25914:	18fb      	adds	r3, r7, r3
   25916:	2201      	movs	r2, #1
   25918:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   2591a:	231a      	movs	r3, #26
   2591c:	18fb      	adds	r3, r7, r3
   2591e:	2230      	movs	r2, #48	; 0x30
   25920:	18ba      	adds	r2, r7, r2
   25922:	8812      	ldrh	r2, [r2, #0]
   25924:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   25926:	230f      	movs	r3, #15
   25928:	18fb      	adds	r3, r7, r3
   2592a:	781b      	ldrb	r3, [r3, #0]
   2592c:	b25b      	sxtb	r3, r3
   2592e:	4a51      	ldr	r2, [pc, #324]	; (25a74 <Socket_ReadSocketData+0x1e0>)
   25930:	011b      	lsls	r3, r3, #4
   25932:	18d3      	adds	r3, r2, r3
   25934:	3304      	adds	r3, #4
   25936:	881b      	ldrh	r3, [r3, #0]
   25938:	b29b      	uxth	r3, r3
   2593a:	221a      	movs	r2, #26
   2593c:	18ba      	adds	r2, r7, r2
   2593e:	8812      	ldrh	r2, [r2, #0]
   25940:	1ad3      	subs	r3, r2, r3
   25942:	b29a      	uxth	r2, r3
   25944:	2316      	movs	r3, #22
   25946:	18fb      	adds	r3, r7, r3
   25948:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   2594a:	2316      	movs	r3, #22
   2594c:	18fb      	adds	r3, r7, r3
   2594e:	2200      	movs	r2, #0
   25950:	5e9b      	ldrsh	r3, [r3, r2]
   25952:	2b00      	cmp	r3, #0
   25954:	dd0f      	ble.n	25976 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   25956:	2319      	movs	r3, #25
   25958:	18fb      	adds	r3, r7, r3
   2595a:	2200      	movs	r2, #0
   2595c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   2595e:	230f      	movs	r3, #15
   25960:	18fb      	adds	r3, r7, r3
   25962:	2200      	movs	r2, #0
   25964:	569a      	ldrsb	r2, [r3, r2]
   25966:	231a      	movs	r3, #26
   25968:	18fb      	adds	r3, r7, r3
   2596a:	4942      	ldr	r1, [pc, #264]	; (25a74 <Socket_ReadSocketData+0x1e0>)
   2596c:	0112      	lsls	r2, r2, #4
   2596e:	188a      	adds	r2, r1, r2
   25970:	3204      	adds	r2, #4
   25972:	8812      	ldrh	r2, [r2, #0]
   25974:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   25976:	230f      	movs	r3, #15
   25978:	18fb      	adds	r3, r7, r3
   2597a:	2200      	movs	r2, #0
   2597c:	569a      	ldrsb	r2, [r3, r2]
   2597e:	4b3d      	ldr	r3, [pc, #244]	; (25a74 <Socket_ReadSocketData+0x1e0>)
   25980:	0112      	lsls	r2, r2, #4
   25982:	58d1      	ldr	r1, [r2, r3]
   25984:	2319      	movs	r3, #25
   25986:	18fb      	adds	r3, r7, r3
   25988:	781c      	ldrb	r4, [r3, #0]
   2598a:	231a      	movs	r3, #26
   2598c:	18fb      	adds	r3, r7, r3
   2598e:	881a      	ldrh	r2, [r3, #0]
   25990:	69f8      	ldr	r0, [r7, #28]
   25992:	0023      	movs	r3, r4
   25994:	4c38      	ldr	r4, [pc, #224]	; (25a78 <Socket_ReadSocketData+0x1e4>)
   25996:	47a0      	blx	r4
   25998:	1e03      	subs	r3, r0, #0
   2599a:	d14f      	bne.n	25a3c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   2599c:	230f      	movs	r3, #15
   2599e:	18fb      	adds	r3, r7, r3
   259a0:	2200      	movs	r2, #0
   259a2:	569a      	ldrsb	r2, [r3, r2]
   259a4:	4b33      	ldr	r3, [pc, #204]	; (25a74 <Socket_ReadSocketData+0x1e0>)
   259a6:	0112      	lsls	r2, r2, #4
   259a8:	58d2      	ldr	r2, [r2, r3]
   259aa:	68bb      	ldr	r3, [r7, #8]
   259ac:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   259ae:	231a      	movs	r3, #26
   259b0:	18fb      	adds	r3, r7, r3
   259b2:	2200      	movs	r2, #0
   259b4:	5e9a      	ldrsh	r2, [r3, r2]
   259b6:	68bb      	ldr	r3, [r7, #8]
   259b8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   259ba:	68bb      	ldr	r3, [r7, #8]
   259bc:	88da      	ldrh	r2, [r3, #6]
   259be:	231a      	movs	r3, #26
   259c0:	18fb      	adds	r3, r7, r3
   259c2:	881b      	ldrh	r3, [r3, #0]
   259c4:	1ad3      	subs	r3, r2, r3
   259c6:	b29a      	uxth	r2, r3
   259c8:	68bb      	ldr	r3, [r7, #8]
   259ca:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   259cc:	4b2b      	ldr	r3, [pc, #172]	; (25a7c <Socket_ReadSocketData+0x1e8>)
   259ce:	681b      	ldr	r3, [r3, #0]
   259d0:	2b00      	cmp	r3, #0
   259d2:	d00b      	beq.n	259ec <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   259d4:	4b29      	ldr	r3, [pc, #164]	; (25a7c <Socket_ReadSocketData+0x1e8>)
   259d6:	681b      	ldr	r3, [r3, #0]
   259d8:	68bc      	ldr	r4, [r7, #8]
   259da:	220e      	movs	r2, #14
   259dc:	18ba      	adds	r2, r7, r2
   259de:	7811      	ldrb	r1, [r2, #0]
   259e0:	220f      	movs	r2, #15
   259e2:	18ba      	adds	r2, r7, r2
   259e4:	2000      	movs	r0, #0
   259e6:	5610      	ldrsb	r0, [r2, r0]
   259e8:	0022      	movs	r2, r4
   259ea:	4798      	blx	r3

				u16ReadCount -= u16Read;
   259ec:	2330      	movs	r3, #48	; 0x30
   259ee:	18f9      	adds	r1, r7, r3
   259f0:	2330      	movs	r3, #48	; 0x30
   259f2:	18fa      	adds	r2, r7, r3
   259f4:	231a      	movs	r3, #26
   259f6:	18fb      	adds	r3, r7, r3
   259f8:	8812      	ldrh	r2, [r2, #0]
   259fa:	881b      	ldrh	r3, [r3, #0]
   259fc:	1ad3      	subs	r3, r2, r3
   259fe:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   25a00:	231a      	movs	r3, #26
   25a02:	18fb      	adds	r3, r7, r3
   25a04:	881b      	ldrh	r3, [r3, #0]
   25a06:	69fa      	ldr	r2, [r7, #28]
   25a08:	18d3      	adds	r3, r2, r3
   25a0a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   25a0c:	230f      	movs	r3, #15
   25a0e:	18fb      	adds	r3, r7, r3
   25a10:	781b      	ldrb	r3, [r3, #0]
   25a12:	b25b      	sxtb	r3, r3
   25a14:	4a17      	ldr	r2, [pc, #92]	; (25a74 <Socket_ReadSocketData+0x1e0>)
   25a16:	011b      	lsls	r3, r3, #4
   25a18:	18d3      	adds	r3, r2, r3
   25a1a:	330a      	adds	r3, #10
   25a1c:	781b      	ldrb	r3, [r3, #0]
   25a1e:	b2db      	uxtb	r3, r3
   25a20:	2b00      	cmp	r3, #0
   25a22:	d11c      	bne.n	25a5e <Socket_ReadSocketData+0x1ca>
   25a24:	2330      	movs	r3, #48	; 0x30
   25a26:	18fb      	adds	r3, r7, r3
   25a28:	881b      	ldrh	r3, [r3, #0]
   25a2a:	2b00      	cmp	r3, #0
   25a2c:	d017      	beq.n	25a5e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25a2e:	2301      	movs	r3, #1
   25a30:	2200      	movs	r2, #0
   25a32:	2100      	movs	r1, #0
   25a34:	2000      	movs	r0, #0
   25a36:	4c10      	ldr	r4, [pc, #64]	; (25a78 <Socket_ReadSocketData+0x1e4>)
   25a38:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   25a3a:	e017      	b.n	25a6c <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   25a3c:	4b10      	ldr	r3, [pc, #64]	; (25a80 <Socket_ReadSocketData+0x1ec>)
   25a3e:	0018      	movs	r0, r3
   25a40:	4b10      	ldr	r3, [pc, #64]	; (25a84 <Socket_ReadSocketData+0x1f0>)
   25a42:	4798      	blx	r3
   25a44:	2330      	movs	r3, #48	; 0x30
   25a46:	18fb      	adds	r3, r7, r3
   25a48:	881a      	ldrh	r2, [r3, #0]
   25a4a:	4b0f      	ldr	r3, [pc, #60]	; (25a88 <Socket_ReadSocketData+0x1f4>)
   25a4c:	0011      	movs	r1, r2
   25a4e:	0018      	movs	r0, r3
   25a50:	4b0c      	ldr	r3, [pc, #48]	; (25a84 <Socket_ReadSocketData+0x1f0>)
   25a52:	4798      	blx	r3
   25a54:	4b0d      	ldr	r3, [pc, #52]	; (25a8c <Socket_ReadSocketData+0x1f8>)
   25a56:	0018      	movs	r0, r3
   25a58:	4b0a      	ldr	r3, [pc, #40]	; (25a84 <Socket_ReadSocketData+0x1f0>)
   25a5a:	4798      	blx	r3
				break;
   25a5c:	e006      	b.n	25a6c <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   25a5e:	2330      	movs	r3, #48	; 0x30
   25a60:	18fb      	adds	r3, r7, r3
   25a62:	881b      	ldrh	r3, [r3, #0]
   25a64:	2b00      	cmp	r3, #0
   25a66:	d000      	beq.n	25a6a <Socket_ReadSocketData+0x1d6>
   25a68:	e753      	b.n	25912 <Socket_ReadSocketData+0x7e>
	}
}
   25a6a:	e7ff      	b.n	25a6c <Socket_ReadSocketData+0x1d8>
   25a6c:	46c0      	nop			; (mov r8, r8)
   25a6e:	46bd      	mov	sp, r7
   25a70:	b009      	add	sp, #36	; 0x24
   25a72:	bd90      	pop	{r4, r7, pc}
   25a74:	20005b98 	.word	0x20005b98
   25a78:	0002228d 	.word	0x0002228d
   25a7c:	20005c48 	.word	0x20005c48
   25a80:	0003a388 	.word	0x0003a388
   25a84:	0001e979 	.word	0x0001e979
   25a88:	0003a394 	.word	0x0003a394
   25a8c:	0003a3a8 	.word	0x0003a3a8

00025a90 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   25a90:	b590      	push	{r4, r7, lr}
   25a92:	b0bb      	sub	sp, #236	; 0xec
   25a94:	af02      	add	r7, sp, #8
   25a96:	603a      	str	r2, [r7, #0]
   25a98:	1dfb      	adds	r3, r7, #7
   25a9a:	1c02      	adds	r2, r0, #0
   25a9c:	701a      	strb	r2, [r3, #0]
   25a9e:	1d3b      	adds	r3, r7, #4
   25aa0:	1c0a      	adds	r2, r1, #0
   25aa2:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   25aa4:	1dfb      	adds	r3, r7, #7
   25aa6:	781b      	ldrb	r3, [r3, #0]
   25aa8:	2b41      	cmp	r3, #65	; 0x41
   25aaa:	d003      	beq.n	25ab4 <m2m_ip_cb+0x24>
   25aac:	1dfb      	adds	r3, r7, #7
   25aae:	781b      	ldrb	r3, [r3, #0]
   25ab0:	2b54      	cmp	r3, #84	; 0x54
   25ab2:	d120      	bne.n	25af6 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   25ab4:	23cc      	movs	r3, #204	; 0xcc
   25ab6:	18f9      	adds	r1, r7, r3
   25ab8:	6838      	ldr	r0, [r7, #0]
   25aba:	2300      	movs	r3, #0
   25abc:	2204      	movs	r2, #4
   25abe:	4c98      	ldr	r4, [pc, #608]	; (25d20 <m2m_ip_cb+0x290>)
   25ac0:	47a0      	blx	r4
   25ac2:	1e03      	subs	r3, r0, #0
   25ac4:	d000      	beq.n	25ac8 <m2m_ip_cb+0x38>
   25ac6:	e275      	b.n	25fb4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   25ac8:	23cc      	movs	r3, #204	; 0xcc
   25aca:	18fb      	adds	r3, r7, r3
   25acc:	2201      	movs	r2, #1
   25ace:	569a      	ldrsb	r2, [r3, r2]
   25ad0:	23c8      	movs	r3, #200	; 0xc8
   25ad2:	18fb      	adds	r3, r7, r3
   25ad4:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25ad6:	4b93      	ldr	r3, [pc, #588]	; (25d24 <m2m_ip_cb+0x294>)
   25ad8:	681b      	ldr	r3, [r3, #0]
   25ada:	2b00      	cmp	r3, #0
   25adc:	d100      	bne.n	25ae0 <m2m_ip_cb+0x50>
   25ade:	e269      	b.n	25fb4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   25ae0:	4b90      	ldr	r3, [pc, #576]	; (25d24 <m2m_ip_cb+0x294>)
   25ae2:	681b      	ldr	r3, [r3, #0]
   25ae4:	22cc      	movs	r2, #204	; 0xcc
   25ae6:	18ba      	adds	r2, r7, r2
   25ae8:	2000      	movs	r0, #0
   25aea:	5610      	ldrsb	r0, [r2, r0]
   25aec:	22c8      	movs	r2, #200	; 0xc8
   25aee:	18ba      	adds	r2, r7, r2
   25af0:	2101      	movs	r1, #1
   25af2:	4798      	blx	r3
	{
   25af4:	e25e      	b.n	25fb4 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   25af6:	1dfb      	adds	r3, r7, #7
   25af8:	781b      	ldrb	r3, [r3, #0]
   25afa:	2b42      	cmp	r3, #66	; 0x42
   25afc:	d120      	bne.n	25b40 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   25afe:	23c4      	movs	r3, #196	; 0xc4
   25b00:	18f9      	adds	r1, r7, r3
   25b02:	6838      	ldr	r0, [r7, #0]
   25b04:	2300      	movs	r3, #0
   25b06:	2204      	movs	r2, #4
   25b08:	4c85      	ldr	r4, [pc, #532]	; (25d20 <m2m_ip_cb+0x290>)
   25b0a:	47a0      	blx	r4
   25b0c:	1e03      	subs	r3, r0, #0
   25b0e:	d000      	beq.n	25b12 <m2m_ip_cb+0x82>
   25b10:	e257      	b.n	25fc2 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   25b12:	23c4      	movs	r3, #196	; 0xc4
   25b14:	18fb      	adds	r3, r7, r3
   25b16:	2201      	movs	r2, #1
   25b18:	569a      	ldrsb	r2, [r3, r2]
   25b1a:	23c0      	movs	r3, #192	; 0xc0
   25b1c:	18fb      	adds	r3, r7, r3
   25b1e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25b20:	4b80      	ldr	r3, [pc, #512]	; (25d24 <m2m_ip_cb+0x294>)
   25b22:	681b      	ldr	r3, [r3, #0]
   25b24:	2b00      	cmp	r3, #0
   25b26:	d100      	bne.n	25b2a <m2m_ip_cb+0x9a>
   25b28:	e24b      	b.n	25fc2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   25b2a:	4b7e      	ldr	r3, [pc, #504]	; (25d24 <m2m_ip_cb+0x294>)
   25b2c:	681b      	ldr	r3, [r3, #0]
   25b2e:	22c4      	movs	r2, #196	; 0xc4
   25b30:	18ba      	adds	r2, r7, r2
   25b32:	2000      	movs	r0, #0
   25b34:	5610      	ldrsb	r0, [r2, r0]
   25b36:	22c0      	movs	r2, #192	; 0xc0
   25b38:	18ba      	adds	r2, r7, r2
   25b3a:	2102      	movs	r1, #2
   25b3c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   25b3e:	e240      	b.n	25fc2 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   25b40:	1dfb      	adds	r3, r7, #7
   25b42:	781b      	ldrb	r3, [r3, #0]
   25b44:	2b43      	cmp	r3, #67	; 0x43
   25b46:	d000      	beq.n	25b4a <m2m_ip_cb+0xba>
   25b48:	e086      	b.n	25c58 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   25b4a:	23b4      	movs	r3, #180	; 0xb4
   25b4c:	18f9      	adds	r1, r7, r3
   25b4e:	6838      	ldr	r0, [r7, #0]
   25b50:	2300      	movs	r3, #0
   25b52:	220c      	movs	r2, #12
   25b54:	4c72      	ldr	r4, [pc, #456]	; (25d20 <m2m_ip_cb+0x290>)
   25b56:	47a0      	blx	r4
   25b58:	1e03      	subs	r3, r0, #0
   25b5a:	d000      	beq.n	25b5e <m2m_ip_cb+0xce>
   25b5c:	e231      	b.n	25fc2 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   25b5e:	23b4      	movs	r3, #180	; 0xb4
   25b60:	18fb      	adds	r3, r7, r3
   25b62:	7a5b      	ldrb	r3, [r3, #9]
   25b64:	b25b      	sxtb	r3, r3
   25b66:	2b00      	cmp	r3, #0
   25b68:	db4f      	blt.n	25c0a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   25b6a:	23b4      	movs	r3, #180	; 0xb4
   25b6c:	18fb      	adds	r3, r7, r3
   25b6e:	7a5b      	ldrb	r3, [r3, #9]
   25b70:	b25b      	sxtb	r3, r3
   25b72:	0018      	movs	r0, r3
   25b74:	23b4      	movs	r3, #180	; 0xb4
   25b76:	18fb      	adds	r3, r7, r3
   25b78:	7a1b      	ldrb	r3, [r3, #8]
   25b7a:	b25b      	sxtb	r3, r3
   25b7c:	4a6a      	ldr	r2, [pc, #424]	; (25d28 <m2m_ip_cb+0x298>)
   25b7e:	011b      	lsls	r3, r3, #4
   25b80:	18d3      	adds	r3, r2, r3
   25b82:	330b      	adds	r3, #11
   25b84:	781b      	ldrb	r3, [r3, #0]
   25b86:	b2d9      	uxtb	r1, r3
   25b88:	4a67      	ldr	r2, [pc, #412]	; (25d28 <m2m_ip_cb+0x298>)
   25b8a:	0103      	lsls	r3, r0, #4
   25b8c:	18d3      	adds	r3, r2, r3
   25b8e:	330b      	adds	r3, #11
   25b90:	1c0a      	adds	r2, r1, #0
   25b92:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   25b94:	23b4      	movs	r3, #180	; 0xb4
   25b96:	18fb      	adds	r3, r7, r3
   25b98:	7a5b      	ldrb	r3, [r3, #9]
   25b9a:	b25b      	sxtb	r3, r3
   25b9c:	4a62      	ldr	r2, [pc, #392]	; (25d28 <m2m_ip_cb+0x298>)
   25b9e:	011b      	lsls	r3, r3, #4
   25ba0:	18d3      	adds	r3, r2, r3
   25ba2:	330a      	adds	r3, #10
   25ba4:	2201      	movs	r2, #1
   25ba6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25ba8:	23b4      	movs	r3, #180	; 0xb4
   25baa:	18fb      	adds	r3, r7, r3
   25bac:	7a5b      	ldrb	r3, [r3, #9]
   25bae:	b25b      	sxtb	r3, r3
   25bb0:	0018      	movs	r0, r3
   25bb2:	23b4      	movs	r3, #180	; 0xb4
   25bb4:	18fb      	adds	r3, r7, r3
   25bb6:	895b      	ldrh	r3, [r3, #10]
   25bb8:	3b08      	subs	r3, #8
   25bba:	b299      	uxth	r1, r3
   25bbc:	4a5a      	ldr	r2, [pc, #360]	; (25d28 <m2m_ip_cb+0x298>)
   25bbe:	0103      	lsls	r3, r0, #4
   25bc0:	18d3      	adds	r3, r2, r3
   25bc2:	3308      	adds	r3, #8
   25bc4:	1c0a      	adds	r2, r1, #0
   25bc6:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   25bc8:	4b58      	ldr	r3, [pc, #352]	; (25d2c <m2m_ip_cb+0x29c>)
   25bca:	881b      	ldrh	r3, [r3, #0]
   25bcc:	b29b      	uxth	r3, r3
   25bce:	3301      	adds	r3, #1
   25bd0:	b29a      	uxth	r2, r3
   25bd2:	4b56      	ldr	r3, [pc, #344]	; (25d2c <m2m_ip_cb+0x29c>)
   25bd4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   25bd6:	4b55      	ldr	r3, [pc, #340]	; (25d2c <m2m_ip_cb+0x29c>)
   25bd8:	881b      	ldrh	r3, [r3, #0]
   25bda:	b29b      	uxth	r3, r3
   25bdc:	2b00      	cmp	r3, #0
   25bde:	d106      	bne.n	25bee <m2m_ip_cb+0x15e>
					++gu16SessionID;
   25be0:	4b52      	ldr	r3, [pc, #328]	; (25d2c <m2m_ip_cb+0x29c>)
   25be2:	881b      	ldrh	r3, [r3, #0]
   25be4:	b29b      	uxth	r3, r3
   25be6:	3301      	adds	r3, #1
   25be8:	b29a      	uxth	r2, r3
   25bea:	4b50      	ldr	r3, [pc, #320]	; (25d2c <m2m_ip_cb+0x29c>)
   25bec:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   25bee:	23b4      	movs	r3, #180	; 0xb4
   25bf0:	18fb      	adds	r3, r7, r3
   25bf2:	7a5b      	ldrb	r3, [r3, #9]
   25bf4:	b25b      	sxtb	r3, r3
   25bf6:	0018      	movs	r0, r3
   25bf8:	4b4c      	ldr	r3, [pc, #304]	; (25d2c <m2m_ip_cb+0x29c>)
   25bfa:	881b      	ldrh	r3, [r3, #0]
   25bfc:	b299      	uxth	r1, r3
   25bfe:	4a4a      	ldr	r2, [pc, #296]	; (25d28 <m2m_ip_cb+0x298>)
   25c00:	0103      	lsls	r3, r0, #4
   25c02:	18d3      	adds	r3, r2, r3
   25c04:	3306      	adds	r3, #6
   25c06:	1c0a      	adds	r2, r1, #0
   25c08:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   25c0a:	23b4      	movs	r3, #180	; 0xb4
   25c0c:	18fb      	adds	r3, r7, r3
   25c0e:	2209      	movs	r2, #9
   25c10:	569a      	ldrsb	r2, [r3, r2]
   25c12:	23a0      	movs	r3, #160	; 0xa0
   25c14:	18fb      	adds	r3, r7, r3
   25c16:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   25c18:	23a0      	movs	r3, #160	; 0xa0
   25c1a:	18fb      	adds	r3, r7, r3
   25c1c:	2202      	movs	r2, #2
   25c1e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   25c20:	23b4      	movs	r3, #180	; 0xb4
   25c22:	18fb      	adds	r3, r7, r3
   25c24:	885a      	ldrh	r2, [r3, #2]
   25c26:	23a0      	movs	r3, #160	; 0xa0
   25c28:	18fb      	adds	r3, r7, r3
   25c2a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   25c2c:	23b4      	movs	r3, #180	; 0xb4
   25c2e:	18fb      	adds	r3, r7, r3
   25c30:	685a      	ldr	r2, [r3, #4]
   25c32:	23a0      	movs	r3, #160	; 0xa0
   25c34:	18fb      	adds	r3, r7, r3
   25c36:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   25c38:	4b3a      	ldr	r3, [pc, #232]	; (25d24 <m2m_ip_cb+0x294>)
   25c3a:	681b      	ldr	r3, [r3, #0]
   25c3c:	2b00      	cmp	r3, #0
   25c3e:	d100      	bne.n	25c42 <m2m_ip_cb+0x1b2>
   25c40:	e1bf      	b.n	25fc2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   25c42:	4b38      	ldr	r3, [pc, #224]	; (25d24 <m2m_ip_cb+0x294>)
   25c44:	681b      	ldr	r3, [r3, #0]
   25c46:	22b4      	movs	r2, #180	; 0xb4
   25c48:	18ba      	adds	r2, r7, r2
   25c4a:	2008      	movs	r0, #8
   25c4c:	5610      	ldrsb	r0, [r2, r0]
   25c4e:	22a0      	movs	r2, #160	; 0xa0
   25c50:	18ba      	adds	r2, r7, r2
   25c52:	2104      	movs	r1, #4
   25c54:	4798      	blx	r3
}
   25c56:	e1b4      	b.n	25fc2 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   25c58:	1dfb      	adds	r3, r7, #7
   25c5a:	781b      	ldrb	r3, [r3, #0]
   25c5c:	2b44      	cmp	r3, #68	; 0x44
   25c5e:	d003      	beq.n	25c68 <m2m_ip_cb+0x1d8>
   25c60:	1dfb      	adds	r3, r7, #7
   25c62:	781b      	ldrb	r3, [r3, #0]
   25c64:	2b4b      	cmp	r3, #75	; 0x4b
   25c66:	d13d      	bne.n	25ce4 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   25c68:	239c      	movs	r3, #156	; 0x9c
   25c6a:	18f9      	adds	r1, r7, r3
   25c6c:	6838      	ldr	r0, [r7, #0]
   25c6e:	2300      	movs	r3, #0
   25c70:	2204      	movs	r2, #4
   25c72:	4c2b      	ldr	r4, [pc, #172]	; (25d20 <m2m_ip_cb+0x290>)
   25c74:	47a0      	blx	r4
   25c76:	1e03      	subs	r3, r0, #0
   25c78:	d000      	beq.n	25c7c <m2m_ip_cb+0x1ec>
   25c7a:	e19d      	b.n	25fb8 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   25c7c:	239c      	movs	r3, #156	; 0x9c
   25c7e:	18fb      	adds	r3, r7, r3
   25c80:	2200      	movs	r2, #0
   25c82:	569a      	ldrsb	r2, [r3, r2]
   25c84:	2398      	movs	r3, #152	; 0x98
   25c86:	18fb      	adds	r3, r7, r3
   25c88:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   25c8a:	239c      	movs	r3, #156	; 0x9c
   25c8c:	18fb      	adds	r3, r7, r3
   25c8e:	2201      	movs	r2, #1
   25c90:	569a      	ldrsb	r2, [r3, r2]
   25c92:	2398      	movs	r3, #152	; 0x98
   25c94:	18fb      	adds	r3, r7, r3
   25c96:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   25c98:	239c      	movs	r3, #156	; 0x9c
   25c9a:	18fb      	adds	r3, r7, r3
   25c9c:	785b      	ldrb	r3, [r3, #1]
   25c9e:	b25b      	sxtb	r3, r3
   25ca0:	2b00      	cmp	r3, #0
   25ca2:	d10f      	bne.n	25cc4 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25ca4:	239c      	movs	r3, #156	; 0x9c
   25ca6:	18fb      	adds	r3, r7, r3
   25ca8:	781b      	ldrb	r3, [r3, #0]
   25caa:	b25b      	sxtb	r3, r3
   25cac:	0018      	movs	r0, r3
   25cae:	239c      	movs	r3, #156	; 0x9c
   25cb0:	18fb      	adds	r3, r7, r3
   25cb2:	885b      	ldrh	r3, [r3, #2]
   25cb4:	3b08      	subs	r3, #8
   25cb6:	b299      	uxth	r1, r3
   25cb8:	4a1b      	ldr	r2, [pc, #108]	; (25d28 <m2m_ip_cb+0x298>)
   25cba:	0103      	lsls	r3, r0, #4
   25cbc:	18d3      	adds	r3, r2, r3
   25cbe:	3308      	adds	r3, #8
   25cc0:	1c0a      	adds	r2, r1, #0
   25cc2:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   25cc4:	4b17      	ldr	r3, [pc, #92]	; (25d24 <m2m_ip_cb+0x294>)
   25cc6:	681b      	ldr	r3, [r3, #0]
   25cc8:	2b00      	cmp	r3, #0
   25cca:	d100      	bne.n	25cce <m2m_ip_cb+0x23e>
   25ccc:	e174      	b.n	25fb8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   25cce:	4b15      	ldr	r3, [pc, #84]	; (25d24 <m2m_ip_cb+0x294>)
   25cd0:	681b      	ldr	r3, [r3, #0]
   25cd2:	229c      	movs	r2, #156	; 0x9c
   25cd4:	18ba      	adds	r2, r7, r2
   25cd6:	2000      	movs	r0, #0
   25cd8:	5610      	ldrsb	r0, [r2, r0]
   25cda:	2298      	movs	r2, #152	; 0x98
   25cdc:	18ba      	adds	r2, r7, r2
   25cde:	2105      	movs	r1, #5
   25ce0:	4798      	blx	r3
	{
   25ce2:	e169      	b.n	25fb8 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   25ce4:	1dfb      	adds	r3, r7, #7
   25ce6:	781b      	ldrb	r3, [r3, #0]
   25ce8:	2b4a      	cmp	r3, #74	; 0x4a
   25cea:	d123      	bne.n	25d34 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   25cec:	230c      	movs	r3, #12
   25cee:	18f9      	adds	r1, r7, r3
   25cf0:	6838      	ldr	r0, [r7, #0]
   25cf2:	2300      	movs	r3, #0
   25cf4:	2244      	movs	r2, #68	; 0x44
   25cf6:	4c0a      	ldr	r4, [pc, #40]	; (25d20 <m2m_ip_cb+0x290>)
   25cf8:	47a0      	blx	r4
   25cfa:	1e03      	subs	r3, r0, #0
   25cfc:	d000      	beq.n	25d00 <m2m_ip_cb+0x270>
   25cfe:	e160      	b.n	25fc2 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   25d00:	4b0b      	ldr	r3, [pc, #44]	; (25d30 <m2m_ip_cb+0x2a0>)
   25d02:	681b      	ldr	r3, [r3, #0]
   25d04:	2b00      	cmp	r3, #0
   25d06:	d100      	bne.n	25d0a <m2m_ip_cb+0x27a>
   25d08:	e15b      	b.n	25fc2 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   25d0a:	4b09      	ldr	r3, [pc, #36]	; (25d30 <m2m_ip_cb+0x2a0>)
   25d0c:	681a      	ldr	r2, [r3, #0]
   25d0e:	230c      	movs	r3, #12
   25d10:	18fb      	adds	r3, r7, r3
   25d12:	6c19      	ldr	r1, [r3, #64]	; 0x40
   25d14:	230c      	movs	r3, #12
   25d16:	18fb      	adds	r3, r7, r3
   25d18:	0018      	movs	r0, r3
   25d1a:	4790      	blx	r2
}
   25d1c:	e151      	b.n	25fc2 <m2m_ip_cb+0x532>
   25d1e:	46c0      	nop			; (mov r8, r8)
   25d20:	0002228d 	.word	0x0002228d
   25d24:	20005c48 	.word	0x20005c48
   25d28:	20005b98 	.word	0x20005b98
   25d2c:	200042b2 	.word	0x200042b2
   25d30:	20005c50 	.word	0x20005c50
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   25d34:	1dfb      	adds	r3, r7, #7
   25d36:	781b      	ldrb	r3, [r3, #0]
   25d38:	2b46      	cmp	r3, #70	; 0x46
   25d3a:	d008      	beq.n	25d4e <m2m_ip_cb+0x2be>
   25d3c:	1dfb      	adds	r3, r7, #7
   25d3e:	781b      	ldrb	r3, [r3, #0]
   25d40:	2b48      	cmp	r3, #72	; 0x48
   25d42:	d004      	beq.n	25d4e <m2m_ip_cb+0x2be>
   25d44:	1dfb      	adds	r3, r7, #7
   25d46:	781b      	ldrb	r3, [r3, #0]
   25d48:	2b4d      	cmp	r3, #77	; 0x4d
   25d4a:	d000      	beq.n	25d4e <m2m_ip_cb+0x2be>
   25d4c:	e0b4      	b.n	25eb8 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   25d4e:	23df      	movs	r3, #223	; 0xdf
   25d50:	18fb      	adds	r3, r7, r3
   25d52:	2206      	movs	r2, #6
   25d54:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   25d56:	1dfb      	adds	r3, r7, #7
   25d58:	781b      	ldrb	r3, [r3, #0]
   25d5a:	2b48      	cmp	r3, #72	; 0x48
   25d5c:	d103      	bne.n	25d66 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   25d5e:	23df      	movs	r3, #223	; 0xdf
   25d60:	18fb      	adds	r3, r7, r3
   25d62:	2209      	movs	r2, #9
   25d64:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   25d66:	23d8      	movs	r3, #216	; 0xd8
   25d68:	18fb      	adds	r3, r7, r3
   25d6a:	2210      	movs	r2, #16
   25d6c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   25d6e:	23d8      	movs	r3, #216	; 0xd8
   25d70:	18fb      	adds	r3, r7, r3
   25d72:	881a      	ldrh	r2, [r3, #0]
   25d74:	2388      	movs	r3, #136	; 0x88
   25d76:	18f9      	adds	r1, r7, r3
   25d78:	6838      	ldr	r0, [r7, #0]
   25d7a:	2300      	movs	r3, #0
   25d7c:	4c93      	ldr	r4, [pc, #588]	; (25fcc <m2m_ip_cb+0x53c>)
   25d7e:	47a0      	blx	r4
   25d80:	1e03      	subs	r3, r0, #0
   25d82:	d000      	beq.n	25d86 <m2m_ip_cb+0x2f6>
   25d84:	e11a      	b.n	25fbc <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   25d86:	23d6      	movs	r3, #214	; 0xd6
   25d88:	18fb      	adds	r3, r7, r3
   25d8a:	2200      	movs	r2, #0
   25d8c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   25d8e:	23d5      	movs	r3, #213	; 0xd5
   25d90:	18fb      	adds	r3, r7, r3
   25d92:	2288      	movs	r2, #136	; 0x88
   25d94:	18ba      	adds	r2, r7, r2
   25d96:	7b12      	ldrb	r2, [r2, #12]
   25d98:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   25d9a:	23d6      	movs	r3, #214	; 0xd6
   25d9c:	18fb      	adds	r3, r7, r3
   25d9e:	2288      	movs	r2, #136	; 0x88
   25da0:	18ba      	adds	r2, r7, r2
   25da2:	89d2      	ldrh	r2, [r2, #14]
   25da4:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   25da6:	23d5      	movs	r3, #213	; 0xd5
   25da8:	18fb      	adds	r3, r7, r3
   25daa:	781b      	ldrb	r3, [r3, #0]
   25dac:	b25b      	sxtb	r3, r3
   25dae:	4a88      	ldr	r2, [pc, #544]	; (25fd0 <m2m_ip_cb+0x540>)
   25db0:	011b      	lsls	r3, r3, #4
   25db2:	18d3      	adds	r3, r2, r3
   25db4:	330c      	adds	r3, #12
   25db6:	2200      	movs	r2, #0
   25db8:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   25dba:	23d2      	movs	r3, #210	; 0xd2
   25dbc:	18fb      	adds	r3, r7, r3
   25dbe:	2288      	movs	r2, #136	; 0x88
   25dc0:	18ba      	adds	r2, r7, r2
   25dc2:	8912      	ldrh	r2, [r2, #8]
   25dc4:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   25dc6:	23d0      	movs	r3, #208	; 0xd0
   25dc8:	18fb      	adds	r3, r7, r3
   25dca:	2288      	movs	r2, #136	; 0x88
   25dcc:	18ba      	adds	r2, r7, r2
   25dce:	8952      	ldrh	r2, [r2, #10]
   25dd0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   25dd2:	2388      	movs	r3, #136	; 0x88
   25dd4:	18fb      	adds	r3, r7, r3
   25dd6:	885a      	ldrh	r2, [r3, #2]
   25dd8:	2370      	movs	r3, #112	; 0x70
   25dda:	18fb      	adds	r3, r7, r3
   25ddc:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   25dde:	2388      	movs	r3, #136	; 0x88
   25de0:	18fb      	adds	r3, r7, r3
   25de2:	685a      	ldr	r2, [r3, #4]
   25de4:	2370      	movs	r3, #112	; 0x70
   25de6:	18fb      	adds	r3, r7, r3
   25de8:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   25dea:	23d5      	movs	r3, #213	; 0xd5
   25dec:	18fb      	adds	r3, r7, r3
   25dee:	781b      	ldrb	r3, [r3, #0]
   25df0:	b25b      	sxtb	r3, r3
   25df2:	4a77      	ldr	r2, [pc, #476]	; (25fd0 <m2m_ip_cb+0x540>)
   25df4:	011b      	lsls	r3, r3, #4
   25df6:	18d3      	adds	r3, r2, r3
   25df8:	3306      	adds	r3, #6
   25dfa:	881b      	ldrh	r3, [r3, #0]
   25dfc:	b29b      	uxth	r3, r3
   25dfe:	22d6      	movs	r2, #214	; 0xd6
   25e00:	18ba      	adds	r2, r7, r2
   25e02:	8812      	ldrh	r2, [r2, #0]
   25e04:	429a      	cmp	r2, r3
   25e06:	d148      	bne.n	25e9a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   25e08:	23d2      	movs	r3, #210	; 0xd2
   25e0a:	18fb      	adds	r3, r7, r3
   25e0c:	2200      	movs	r2, #0
   25e0e:	5e9b      	ldrsh	r3, [r3, r2]
   25e10:	2b00      	cmp	r3, #0
   25e12:	dd25      	ble.n	25e60 <m2m_ip_cb+0x3d0>
   25e14:	23d2      	movs	r3, #210	; 0xd2
   25e16:	18fb      	adds	r3, r7, r3
   25e18:	2200      	movs	r2, #0
   25e1a:	5e9a      	ldrsh	r2, [r3, r2]
   25e1c:	1d3b      	adds	r3, r7, #4
   25e1e:	881b      	ldrh	r3, [r3, #0]
   25e20:	429a      	cmp	r2, r3
   25e22:	da1d      	bge.n	25e60 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   25e24:	23d0      	movs	r3, #208	; 0xd0
   25e26:	18fb      	adds	r3, r7, r3
   25e28:	881b      	ldrh	r3, [r3, #0]
   25e2a:	683a      	ldr	r2, [r7, #0]
   25e2c:	18d3      	adds	r3, r2, r3
   25e2e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   25e30:	23d8      	movs	r3, #216	; 0xd8
   25e32:	18fb      	adds	r3, r7, r3
   25e34:	22d2      	movs	r2, #210	; 0xd2
   25e36:	18ba      	adds	r2, r7, r2
   25e38:	8812      	ldrh	r2, [r2, #0]
   25e3a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   25e3c:	683c      	ldr	r4, [r7, #0]
   25e3e:	23df      	movs	r3, #223	; 0xdf
   25e40:	18fb      	adds	r3, r7, r3
   25e42:	781a      	ldrb	r2, [r3, #0]
   25e44:	2370      	movs	r3, #112	; 0x70
   25e46:	18f9      	adds	r1, r7, r3
   25e48:	23d5      	movs	r3, #213	; 0xd5
   25e4a:	18fb      	adds	r3, r7, r3
   25e4c:	2000      	movs	r0, #0
   25e4e:	5618      	ldrsb	r0, [r3, r0]
   25e50:	23d8      	movs	r3, #216	; 0xd8
   25e52:	18fb      	adds	r3, r7, r3
   25e54:	881b      	ldrh	r3, [r3, #0]
   25e56:	9300      	str	r3, [sp, #0]
   25e58:	0023      	movs	r3, r4
   25e5a:	4c5e      	ldr	r4, [pc, #376]	; (25fd4 <m2m_ip_cb+0x544>)
   25e5c:	47a0      	blx	r4
	{
   25e5e:	e0ad      	b.n	25fbc <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   25e60:	2370      	movs	r3, #112	; 0x70
   25e62:	18fb      	adds	r3, r7, r3
   25e64:	22d2      	movs	r2, #210	; 0xd2
   25e66:	18ba      	adds	r2, r7, r2
   25e68:	8812      	ldrh	r2, [r2, #0]
   25e6a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   25e6c:	2370      	movs	r3, #112	; 0x70
   25e6e:	18fb      	adds	r3, r7, r3
   25e70:	2200      	movs	r2, #0
   25e72:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   25e74:	4b58      	ldr	r3, [pc, #352]	; (25fd8 <m2m_ip_cb+0x548>)
   25e76:	681b      	ldr	r3, [r3, #0]
   25e78:	2b00      	cmp	r3, #0
   25e7a:	d100      	bne.n	25e7e <m2m_ip_cb+0x3ee>
   25e7c:	e09e      	b.n	25fbc <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   25e7e:	4b56      	ldr	r3, [pc, #344]	; (25fd8 <m2m_ip_cb+0x548>)
   25e80:	681b      	ldr	r3, [r3, #0]
   25e82:	2270      	movs	r2, #112	; 0x70
   25e84:	18bc      	adds	r4, r7, r2
   25e86:	22df      	movs	r2, #223	; 0xdf
   25e88:	18ba      	adds	r2, r7, r2
   25e8a:	7811      	ldrb	r1, [r2, #0]
   25e8c:	22d5      	movs	r2, #213	; 0xd5
   25e8e:	18ba      	adds	r2, r7, r2
   25e90:	2000      	movs	r0, #0
   25e92:	5610      	ldrsb	r0, [r2, r0]
   25e94:	0022      	movs	r2, r4
   25e96:	4798      	blx	r3
	{
   25e98:	e090      	b.n	25fbc <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   25e9a:	23d8      	movs	r3, #216	; 0xd8
   25e9c:	18fa      	adds	r2, r7, r3
   25e9e:	1d3b      	adds	r3, r7, #4
   25ea0:	8812      	ldrh	r2, [r2, #0]
   25ea2:	881b      	ldrh	r3, [r3, #0]
   25ea4:	429a      	cmp	r2, r3
   25ea6:	d300      	bcc.n	25eaa <m2m_ip_cb+0x41a>
   25ea8:	e088      	b.n	25fbc <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25eaa:	2301      	movs	r3, #1
   25eac:	2200      	movs	r2, #0
   25eae:	2100      	movs	r1, #0
   25eb0:	2000      	movs	r0, #0
   25eb2:	4c46      	ldr	r4, [pc, #280]	; (25fcc <m2m_ip_cb+0x53c>)
   25eb4:	47a0      	blx	r4
	{
   25eb6:	e081      	b.n	25fbc <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   25eb8:	1dfb      	adds	r3, r7, #7
   25eba:	781b      	ldrb	r3, [r3, #0]
   25ebc:	2b45      	cmp	r3, #69	; 0x45
   25ebe:	d007      	beq.n	25ed0 <m2m_ip_cb+0x440>
   25ec0:	1dfb      	adds	r3, r7, #7
   25ec2:	781b      	ldrb	r3, [r3, #0]
   25ec4:	2b47      	cmp	r3, #71	; 0x47
   25ec6:	d003      	beq.n	25ed0 <m2m_ip_cb+0x440>
   25ec8:	1dfb      	adds	r3, r7, #7
   25eca:	781b      	ldrb	r3, [r3, #0]
   25ecc:	2b4c      	cmp	r3, #76	; 0x4c
   25ece:	d14c      	bne.n	25f6a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   25ed0:	23de      	movs	r3, #222	; 0xde
   25ed2:	18fb      	adds	r3, r7, r3
   25ed4:	2207      	movs	r2, #7
   25ed6:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   25ed8:	1dfb      	adds	r3, r7, #7
   25eda:	781b      	ldrb	r3, [r3, #0]
   25edc:	2b47      	cmp	r3, #71	; 0x47
   25ede:	d103      	bne.n	25ee8 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   25ee0:	23de      	movs	r3, #222	; 0xde
   25ee2:	18fb      	adds	r3, r7, r3
   25ee4:	2208      	movs	r2, #8
   25ee6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   25ee8:	2364      	movs	r3, #100	; 0x64
   25eea:	18f9      	adds	r1, r7, r3
   25eec:	6838      	ldr	r0, [r7, #0]
   25eee:	2300      	movs	r3, #0
   25ef0:	2208      	movs	r2, #8
   25ef2:	4c36      	ldr	r4, [pc, #216]	; (25fcc <m2m_ip_cb+0x53c>)
   25ef4:	47a0      	blx	r4
   25ef6:	1e03      	subs	r3, r0, #0
   25ef8:	d162      	bne.n	25fc0 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   25efa:	23dc      	movs	r3, #220	; 0xdc
   25efc:	18fb      	adds	r3, r7, r3
   25efe:	2200      	movs	r2, #0
   25f00:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   25f02:	23db      	movs	r3, #219	; 0xdb
   25f04:	18fb      	adds	r3, r7, r3
   25f06:	2264      	movs	r2, #100	; 0x64
   25f08:	18ba      	adds	r2, r7, r2
   25f0a:	7812      	ldrb	r2, [r2, #0]
   25f0c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   25f0e:	23dc      	movs	r3, #220	; 0xdc
   25f10:	18fb      	adds	r3, r7, r3
   25f12:	2264      	movs	r2, #100	; 0x64
   25f14:	18ba      	adds	r2, r7, r2
   25f16:	8892      	ldrh	r2, [r2, #4]
   25f18:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   25f1a:	2364      	movs	r3, #100	; 0x64
   25f1c:	18fb      	adds	r3, r7, r3
   25f1e:	2202      	movs	r2, #2
   25f20:	5e9a      	ldrsh	r2, [r3, r2]
   25f22:	236e      	movs	r3, #110	; 0x6e
   25f24:	18fb      	adds	r3, r7, r3
   25f26:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   25f28:	23db      	movs	r3, #219	; 0xdb
   25f2a:	18fb      	adds	r3, r7, r3
   25f2c:	781b      	ldrb	r3, [r3, #0]
   25f2e:	b25b      	sxtb	r3, r3
   25f30:	4a27      	ldr	r2, [pc, #156]	; (25fd0 <m2m_ip_cb+0x540>)
   25f32:	011b      	lsls	r3, r3, #4
   25f34:	18d3      	adds	r3, r2, r3
   25f36:	3306      	adds	r3, #6
   25f38:	881b      	ldrh	r3, [r3, #0]
   25f3a:	b29b      	uxth	r3, r3
   25f3c:	22dc      	movs	r2, #220	; 0xdc
   25f3e:	18ba      	adds	r2, r7, r2
   25f40:	8812      	ldrh	r2, [r2, #0]
   25f42:	429a      	cmp	r2, r3
   25f44:	d13c      	bne.n	25fc0 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   25f46:	4b24      	ldr	r3, [pc, #144]	; (25fd8 <m2m_ip_cb+0x548>)
   25f48:	681b      	ldr	r3, [r3, #0]
   25f4a:	2b00      	cmp	r3, #0
   25f4c:	d038      	beq.n	25fc0 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   25f4e:	4b22      	ldr	r3, [pc, #136]	; (25fd8 <m2m_ip_cb+0x548>)
   25f50:	681b      	ldr	r3, [r3, #0]
   25f52:	226e      	movs	r2, #110	; 0x6e
   25f54:	18bc      	adds	r4, r7, r2
   25f56:	22de      	movs	r2, #222	; 0xde
   25f58:	18ba      	adds	r2, r7, r2
   25f5a:	7811      	ldrb	r1, [r2, #0]
   25f5c:	22db      	movs	r2, #219	; 0xdb
   25f5e:	18ba      	adds	r2, r7, r2
   25f60:	2000      	movs	r0, #0
   25f62:	5610      	ldrsb	r0, [r2, r0]
   25f64:	0022      	movs	r2, r4
   25f66:	4798      	blx	r3
	{
   25f68:	e02a      	b.n	25fc0 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   25f6a:	1dfb      	adds	r3, r7, #7
   25f6c:	781b      	ldrb	r3, [r3, #0]
   25f6e:	2b52      	cmp	r3, #82	; 0x52
   25f70:	d127      	bne.n	25fc2 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   25f72:	2350      	movs	r3, #80	; 0x50
   25f74:	18f9      	adds	r1, r7, r3
   25f76:	6838      	ldr	r0, [r7, #0]
   25f78:	2301      	movs	r3, #1
   25f7a:	2214      	movs	r2, #20
   25f7c:	4c13      	ldr	r4, [pc, #76]	; (25fcc <m2m_ip_cb+0x53c>)
   25f7e:	47a0      	blx	r4
   25f80:	1e03      	subs	r3, r0, #0
   25f82:	d11e      	bne.n	25fc2 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   25f84:	2350      	movs	r3, #80	; 0x50
   25f86:	18fb      	adds	r3, r7, r3
   25f88:	685b      	ldr	r3, [r3, #4]
   25f8a:	001a      	movs	r2, r3
   25f8c:	4b13      	ldr	r3, [pc, #76]	; (25fdc <m2m_ip_cb+0x54c>)
   25f8e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   25f90:	4b12      	ldr	r3, [pc, #72]	; (25fdc <m2m_ip_cb+0x54c>)
   25f92:	681b      	ldr	r3, [r3, #0]
   25f94:	2b00      	cmp	r3, #0
   25f96:	d014      	beq.n	25fc2 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   25f98:	4b10      	ldr	r3, [pc, #64]	; (25fdc <m2m_ip_cb+0x54c>)
   25f9a:	681c      	ldr	r4, [r3, #0]
   25f9c:	2350      	movs	r3, #80	; 0x50
   25f9e:	18fb      	adds	r3, r7, r3
   25fa0:	6818      	ldr	r0, [r3, #0]
   25fa2:	2350      	movs	r3, #80	; 0x50
   25fa4:	18fb      	adds	r3, r7, r3
   25fa6:	6899      	ldr	r1, [r3, #8]
   25fa8:	2350      	movs	r3, #80	; 0x50
   25faa:	18fb      	adds	r3, r7, r3
   25fac:	7c1b      	ldrb	r3, [r3, #16]
   25fae:	001a      	movs	r2, r3
   25fb0:	47a0      	blx	r4
}
   25fb2:	e006      	b.n	25fc2 <m2m_ip_cb+0x532>
	{
   25fb4:	46c0      	nop			; (mov r8, r8)
   25fb6:	e004      	b.n	25fc2 <m2m_ip_cb+0x532>
	{
   25fb8:	46c0      	nop			; (mov r8, r8)
   25fba:	e002      	b.n	25fc2 <m2m_ip_cb+0x532>
	{
   25fbc:	46c0      	nop			; (mov r8, r8)
   25fbe:	e000      	b.n	25fc2 <m2m_ip_cb+0x532>
	{
   25fc0:	46c0      	nop			; (mov r8, r8)
}
   25fc2:	46c0      	nop			; (mov r8, r8)
   25fc4:	46bd      	mov	sp, r7
   25fc6:	b039      	add	sp, #228	; 0xe4
   25fc8:	bd90      	pop	{r4, r7, pc}
   25fca:	46c0      	nop			; (mov r8, r8)
   25fcc:	0002228d 	.word	0x0002228d
   25fd0:	20005b98 	.word	0x20005b98
   25fd4:	00025895 	.word	0x00025895
   25fd8:	20005c48 	.word	0x20005c48
   25fdc:	20005c4c 	.word	0x20005c4c

00025fe0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   25fe0:	b580      	push	{r7, lr}
   25fe2:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   25fe4:	4b0c      	ldr	r3, [pc, #48]	; (26018 <socketInit+0x38>)
   25fe6:	781b      	ldrb	r3, [r3, #0]
   25fe8:	b2db      	uxtb	r3, r3
   25fea:	2b00      	cmp	r3, #0
   25fec:	d110      	bne.n	26010 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   25fee:	4b0b      	ldr	r3, [pc, #44]	; (2601c <socketInit+0x3c>)
   25ff0:	22b0      	movs	r2, #176	; 0xb0
   25ff2:	2100      	movs	r1, #0
   25ff4:	0018      	movs	r0, r3
   25ff6:	4b0a      	ldr	r3, [pc, #40]	; (26020 <socketInit+0x40>)
   25ff8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   25ffa:	4b0a      	ldr	r3, [pc, #40]	; (26024 <socketInit+0x44>)
   25ffc:	0019      	movs	r1, r3
   25ffe:	2002      	movs	r0, #2
   26000:	4b09      	ldr	r3, [pc, #36]	; (26028 <socketInit+0x48>)
   26002:	4798      	blx	r3
		gbSocketInit	= 1;
   26004:	4b04      	ldr	r3, [pc, #16]	; (26018 <socketInit+0x38>)
   26006:	2201      	movs	r2, #1
   26008:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   2600a:	4b08      	ldr	r3, [pc, #32]	; (2602c <socketInit+0x4c>)
   2600c:	2200      	movs	r2, #0
   2600e:	801a      	strh	r2, [r3, #0]
	}
}
   26010:	46c0      	nop			; (mov r8, r8)
   26012:	46bd      	mov	sp, r7
   26014:	bd80      	pop	{r7, pc}
   26016:	46c0      	nop			; (mov r8, r8)
   26018:	200042b4 	.word	0x200042b4
   2601c:	20005b98 	.word	0x20005b98
   26020:	00021711 	.word	0x00021711
   26024:	00025a91 	.word	0x00025a91
   26028:	0002240d 	.word	0x0002240d
   2602c:	200042b2 	.word	0x200042b2

00026030 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   26030:	b580      	push	{r7, lr}
   26032:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   26034:	4b0a      	ldr	r3, [pc, #40]	; (26060 <socketDeinit+0x30>)
   26036:	22b0      	movs	r2, #176	; 0xb0
   26038:	2100      	movs	r1, #0
   2603a:	0018      	movs	r0, r3
   2603c:	4b09      	ldr	r3, [pc, #36]	; (26064 <socketDeinit+0x34>)
   2603e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   26040:	2100      	movs	r1, #0
   26042:	2002      	movs	r0, #2
   26044:	4b08      	ldr	r3, [pc, #32]	; (26068 <socketDeinit+0x38>)
   26046:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   26048:	4b08      	ldr	r3, [pc, #32]	; (2606c <socketDeinit+0x3c>)
   2604a:	2200      	movs	r2, #0
   2604c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   2604e:	4b08      	ldr	r3, [pc, #32]	; (26070 <socketDeinit+0x40>)
   26050:	2200      	movs	r2, #0
   26052:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   26054:	4b07      	ldr	r3, [pc, #28]	; (26074 <socketDeinit+0x44>)
   26056:	2200      	movs	r2, #0
   26058:	701a      	strb	r2, [r3, #0]
}
   2605a:	46c0      	nop			; (mov r8, r8)
   2605c:	46bd      	mov	sp, r7
   2605e:	bd80      	pop	{r7, pc}
   26060:	20005b98 	.word	0x20005b98
   26064:	00021711 	.word	0x00021711
   26068:	0002240d 	.word	0x0002240d
   2606c:	20005c48 	.word	0x20005c48
   26070:	20005c50 	.word	0x20005c50
   26074:	200042b4 	.word	0x200042b4

00026078 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   26078:	b580      	push	{r7, lr}
   2607a:	b082      	sub	sp, #8
   2607c:	af00      	add	r7, sp, #0
   2607e:	6078      	str	r0, [r7, #4]
   26080:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   26082:	4b05      	ldr	r3, [pc, #20]	; (26098 <registerSocketCallback+0x20>)
   26084:	687a      	ldr	r2, [r7, #4]
   26086:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   26088:	4b04      	ldr	r3, [pc, #16]	; (2609c <registerSocketCallback+0x24>)
   2608a:	683a      	ldr	r2, [r7, #0]
   2608c:	601a      	str	r2, [r3, #0]
}
   2608e:	46c0      	nop			; (mov r8, r8)
   26090:	46bd      	mov	sp, r7
   26092:	b002      	add	sp, #8
   26094:	bd80      	pop	{r7, pc}
   26096:	46c0      	nop			; (mov r8, r8)
   26098:	20005c48 	.word	0x20005c48
   2609c:	20005c50 	.word	0x20005c50

000260a0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   260a0:	b590      	push	{r4, r7, lr}
   260a2:	b08d      	sub	sp, #52	; 0x34
   260a4:	af04      	add	r7, sp, #16
   260a6:	0004      	movs	r4, r0
   260a8:	0008      	movs	r0, r1
   260aa:	0011      	movs	r1, r2
   260ac:	1dbb      	adds	r3, r7, #6
   260ae:	1c22      	adds	r2, r4, #0
   260b0:	801a      	strh	r2, [r3, #0]
   260b2:	1d7b      	adds	r3, r7, #5
   260b4:	1c02      	adds	r2, r0, #0
   260b6:	701a      	strb	r2, [r3, #0]
   260b8:	1d3b      	adds	r3, r7, #4
   260ba:	1c0a      	adds	r2, r1, #0
   260bc:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   260be:	231f      	movs	r3, #31
   260c0:	18fb      	adds	r3, r7, r3
   260c2:	22ff      	movs	r2, #255	; 0xff
   260c4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   260c6:	1dbb      	adds	r3, r7, #6
   260c8:	881b      	ldrh	r3, [r3, #0]
   260ca:	2b02      	cmp	r3, #2
   260cc:	d000      	beq.n	260d0 <socket+0x30>
   260ce:	e0ce      	b.n	2626e <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   260d0:	1d7b      	adds	r3, r7, #5
   260d2:	781b      	ldrb	r3, [r3, #0]
   260d4:	2b01      	cmp	r3, #1
   260d6:	d135      	bne.n	26144 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   260d8:	231e      	movs	r3, #30
   260da:	18fb      	adds	r3, r7, r3
   260dc:	2200      	movs	r2, #0
   260de:	701a      	strb	r2, [r3, #0]
   260e0:	e02a      	b.n	26138 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   260e2:	2317      	movs	r3, #23
   260e4:	18fb      	adds	r3, r7, r3
   260e6:	4a66      	ldr	r2, [pc, #408]	; (26280 <socket+0x1e0>)
   260e8:	7812      	ldrb	r2, [r2, #0]
   260ea:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   260ec:	4b64      	ldr	r3, [pc, #400]	; (26280 <socket+0x1e0>)
   260ee:	781b      	ldrb	r3, [r3, #0]
   260f0:	b2db      	uxtb	r3, r3
   260f2:	011a      	lsls	r2, r3, #4
   260f4:	4b63      	ldr	r3, [pc, #396]	; (26284 <socket+0x1e4>)
   260f6:	18d3      	adds	r3, r2, r3
   260f8:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   260fa:	4b61      	ldr	r3, [pc, #388]	; (26280 <socket+0x1e0>)
   260fc:	781b      	ldrb	r3, [r3, #0]
   260fe:	b2db      	uxtb	r3, r3
   26100:	1c5a      	adds	r2, r3, #1
   26102:	4b61      	ldr	r3, [pc, #388]	; (26288 <socket+0x1e8>)
   26104:	2107      	movs	r1, #7
   26106:	0010      	movs	r0, r2
   26108:	4798      	blx	r3
   2610a:	000b      	movs	r3, r1
   2610c:	b2da      	uxtb	r2, r3
   2610e:	4b5c      	ldr	r3, [pc, #368]	; (26280 <socket+0x1e0>)
   26110:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   26112:	69bb      	ldr	r3, [r7, #24]
   26114:	7a9b      	ldrb	r3, [r3, #10]
   26116:	b2db      	uxtb	r3, r3
   26118:	2b00      	cmp	r3, #0
   2611a:	d106      	bne.n	2612a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   2611c:	231f      	movs	r3, #31
   2611e:	18fb      	adds	r3, r7, r3
   26120:	2217      	movs	r2, #23
   26122:	18ba      	adds	r2, r7, r2
   26124:	7812      	ldrb	r2, [r2, #0]
   26126:	701a      	strb	r2, [r3, #0]
					break;
   26128:	e04c      	b.n	261c4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2612a:	231e      	movs	r3, #30
   2612c:	18fb      	adds	r3, r7, r3
   2612e:	781a      	ldrb	r2, [r3, #0]
   26130:	231e      	movs	r3, #30
   26132:	18fb      	adds	r3, r7, r3
   26134:	3201      	adds	r2, #1
   26136:	701a      	strb	r2, [r3, #0]
   26138:	231e      	movs	r3, #30
   2613a:	18fb      	adds	r3, r7, r3
   2613c:	781b      	ldrb	r3, [r3, #0]
   2613e:	2b06      	cmp	r3, #6
   26140:	d9cf      	bls.n	260e2 <socket+0x42>
   26142:	e03f      	b.n	261c4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   26144:	1d7b      	adds	r3, r7, #5
   26146:	781b      	ldrb	r3, [r3, #0]
   26148:	2b02      	cmp	r3, #2
   2614a:	d13b      	bne.n	261c4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   2614c:	4b4f      	ldr	r3, [pc, #316]	; (2628c <socket+0x1ec>)
   2614e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   26150:	231e      	movs	r3, #30
   26152:	18fb      	adds	r3, r7, r3
   26154:	2200      	movs	r2, #0
   26156:	701a      	strb	r2, [r3, #0]
   26158:	e02f      	b.n	261ba <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   2615a:	2317      	movs	r3, #23
   2615c:	18fb      	adds	r3, r7, r3
   2615e:	4a4c      	ldr	r2, [pc, #304]	; (26290 <socket+0x1f0>)
   26160:	7812      	ldrb	r2, [r2, #0]
   26162:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   26164:	4b4a      	ldr	r3, [pc, #296]	; (26290 <socket+0x1f0>)
   26166:	781b      	ldrb	r3, [r3, #0]
   26168:	b2db      	uxtb	r3, r3
   2616a:	011b      	lsls	r3, r3, #4
   2616c:	693a      	ldr	r2, [r7, #16]
   2616e:	18d3      	adds	r3, r2, r3
   26170:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   26172:	4b47      	ldr	r3, [pc, #284]	; (26290 <socket+0x1f0>)
   26174:	781b      	ldrb	r3, [r3, #0]
   26176:	b2db      	uxtb	r3, r3
   26178:	3301      	adds	r3, #1
   2617a:	4a46      	ldr	r2, [pc, #280]	; (26294 <socket+0x1f4>)
   2617c:	4013      	ands	r3, r2
   2617e:	d504      	bpl.n	2618a <socket+0xea>
   26180:	3b01      	subs	r3, #1
   26182:	2204      	movs	r2, #4
   26184:	4252      	negs	r2, r2
   26186:	4313      	orrs	r3, r2
   26188:	3301      	adds	r3, #1
   2618a:	b2da      	uxtb	r2, r3
   2618c:	4b40      	ldr	r3, [pc, #256]	; (26290 <socket+0x1f0>)
   2618e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   26190:	69bb      	ldr	r3, [r7, #24]
   26192:	7a9b      	ldrb	r3, [r3, #10]
   26194:	b2db      	uxtb	r3, r3
   26196:	2b00      	cmp	r3, #0
   26198:	d108      	bne.n	261ac <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2619a:	2317      	movs	r3, #23
   2619c:	18fb      	adds	r3, r7, r3
   2619e:	781b      	ldrb	r3, [r3, #0]
   261a0:	3307      	adds	r3, #7
   261a2:	b2da      	uxtb	r2, r3
   261a4:	231f      	movs	r3, #31
   261a6:	18fb      	adds	r3, r7, r3
   261a8:	701a      	strb	r2, [r3, #0]
					break;
   261aa:	e00b      	b.n	261c4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   261ac:	231e      	movs	r3, #30
   261ae:	18fb      	adds	r3, r7, r3
   261b0:	781a      	ldrb	r2, [r3, #0]
   261b2:	231e      	movs	r3, #30
   261b4:	18fb      	adds	r3, r7, r3
   261b6:	3201      	adds	r2, #1
   261b8:	701a      	strb	r2, [r3, #0]
   261ba:	231e      	movs	r3, #30
   261bc:	18fb      	adds	r3, r7, r3
   261be:	781b      	ldrb	r3, [r3, #0]
   261c0:	2b03      	cmp	r3, #3
   261c2:	d9ca      	bls.n	2615a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   261c4:	231f      	movs	r3, #31
   261c6:	18fb      	adds	r3, r7, r3
   261c8:	781b      	ldrb	r3, [r3, #0]
   261ca:	2b7f      	cmp	r3, #127	; 0x7f
   261cc:	d84f      	bhi.n	2626e <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   261ce:	69bb      	ldr	r3, [r7, #24]
   261d0:	2210      	movs	r2, #16
   261d2:	2100      	movs	r1, #0
   261d4:	0018      	movs	r0, r3
   261d6:	4b30      	ldr	r3, [pc, #192]	; (26298 <socket+0x1f8>)
   261d8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   261da:	69bb      	ldr	r3, [r7, #24]
   261dc:	2201      	movs	r2, #1
   261de:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   261e0:	4b2e      	ldr	r3, [pc, #184]	; (2629c <socket+0x1fc>)
   261e2:	881b      	ldrh	r3, [r3, #0]
   261e4:	b29b      	uxth	r3, r3
   261e6:	3301      	adds	r3, #1
   261e8:	b29a      	uxth	r2, r3
   261ea:	4b2c      	ldr	r3, [pc, #176]	; (2629c <socket+0x1fc>)
   261ec:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   261ee:	4b2b      	ldr	r3, [pc, #172]	; (2629c <socket+0x1fc>)
   261f0:	881b      	ldrh	r3, [r3, #0]
   261f2:	b29b      	uxth	r3, r3
   261f4:	2b00      	cmp	r3, #0
   261f6:	d106      	bne.n	26206 <socket+0x166>
				++gu16SessionID;
   261f8:	4b28      	ldr	r3, [pc, #160]	; (2629c <socket+0x1fc>)
   261fa:	881b      	ldrh	r3, [r3, #0]
   261fc:	b29b      	uxth	r3, r3
   261fe:	3301      	adds	r3, #1
   26200:	b29a      	uxth	r2, r3
   26202:	4b26      	ldr	r3, [pc, #152]	; (2629c <socket+0x1fc>)
   26204:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   26206:	4b25      	ldr	r3, [pc, #148]	; (2629c <socket+0x1fc>)
   26208:	881b      	ldrh	r3, [r3, #0]
   2620a:	b29a      	uxth	r2, r3
   2620c:	69bb      	ldr	r3, [r7, #24]
   2620e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   26210:	4b23      	ldr	r3, [pc, #140]	; (262a0 <socket+0x200>)
   26212:	0018      	movs	r0, r3
   26214:	4b23      	ldr	r3, [pc, #140]	; (262a4 <socket+0x204>)
   26216:	4798      	blx	r3
   26218:	231f      	movs	r3, #31
   2621a:	18fb      	adds	r3, r7, r3
   2621c:	2100      	movs	r1, #0
   2621e:	5659      	ldrsb	r1, [r3, r1]
   26220:	4b1e      	ldr	r3, [pc, #120]	; (2629c <socket+0x1fc>)
   26222:	881b      	ldrh	r3, [r3, #0]
   26224:	b29b      	uxth	r3, r3
   26226:	001a      	movs	r2, r3
   26228:	4b1f      	ldr	r3, [pc, #124]	; (262a8 <socket+0x208>)
   2622a:	0018      	movs	r0, r3
   2622c:	4b1d      	ldr	r3, [pc, #116]	; (262a4 <socket+0x204>)
   2622e:	4798      	blx	r3
   26230:	4b1e      	ldr	r3, [pc, #120]	; (262ac <socket+0x20c>)
   26232:	0018      	movs	r0, r3
   26234:	4b1b      	ldr	r3, [pc, #108]	; (262a4 <socket+0x204>)
   26236:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   26238:	1d3b      	adds	r3, r7, #4
   2623a:	781b      	ldrb	r3, [r3, #0]
   2623c:	2201      	movs	r2, #1
   2623e:	4013      	ands	r3, r2
   26240:	d015      	beq.n	2626e <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   26242:	230c      	movs	r3, #12
   26244:	18fb      	adds	r3, r7, r3
   26246:	221f      	movs	r2, #31
   26248:	18ba      	adds	r2, r7, r2
   2624a:	7812      	ldrb	r2, [r2, #0]
   2624c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2624e:	69bb      	ldr	r3, [r7, #24]
   26250:	2221      	movs	r2, #33	; 0x21
   26252:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   26254:	230c      	movs	r3, #12
   26256:	18fa      	adds	r2, r7, r3
   26258:	2300      	movs	r3, #0
   2625a:	9302      	str	r3, [sp, #8]
   2625c:	2300      	movs	r3, #0
   2625e:	9301      	str	r3, [sp, #4]
   26260:	2300      	movs	r3, #0
   26262:	9300      	str	r3, [sp, #0]
   26264:	2304      	movs	r3, #4
   26266:	2150      	movs	r1, #80	; 0x50
   26268:	2002      	movs	r0, #2
   2626a:	4c11      	ldr	r4, [pc, #68]	; (262b0 <socket+0x210>)
   2626c:	47a0      	blx	r4
			}
		}
	}
	return sock;
   2626e:	231f      	movs	r3, #31
   26270:	18fb      	adds	r3, r7, r3
   26272:	781b      	ldrb	r3, [r3, #0]
   26274:	b25b      	sxtb	r3, r3
}
   26276:	0018      	movs	r0, r3
   26278:	46bd      	mov	sp, r7
   2627a:	b009      	add	sp, #36	; 0x24
   2627c:	bd90      	pop	{r4, r7, pc}
   2627e:	46c0      	nop			; (mov r8, r8)
   26280:	200042b5 	.word	0x200042b5
   26284:	20005b98 	.word	0x20005b98
   26288:	00033915 	.word	0x00033915
   2628c:	20005c08 	.word	0x20005c08
   26290:	200042b6 	.word	0x200042b6
   26294:	80000003 	.word	0x80000003
   26298:	00021711 	.word	0x00021711
   2629c:	200042b2 	.word	0x200042b2
   262a0:	0003a388 	.word	0x0003a388
   262a4:	0001e979 	.word	0x0001e979
   262a8:	0003a3ac 	.word	0x0003a3ac
   262ac:	0003a3a8 	.word	0x0003a3a8
   262b0:	00021971 	.word	0x00021971

000262b4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   262b4:	b5b0      	push	{r4, r5, r7, lr}
   262b6:	b08a      	sub	sp, #40	; 0x28
   262b8:	af04      	add	r7, sp, #16
   262ba:	6039      	str	r1, [r7, #0]
   262bc:	0011      	movs	r1, r2
   262be:	1dfb      	adds	r3, r7, #7
   262c0:	1c02      	adds	r2, r0, #0
   262c2:	701a      	strb	r2, [r3, #0]
   262c4:	1dbb      	adds	r3, r7, #6
   262c6:	1c0a      	adds	r2, r1, #0
   262c8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   262ca:	2317      	movs	r3, #23
   262cc:	18fb      	adds	r3, r7, r3
   262ce:	22fa      	movs	r2, #250	; 0xfa
   262d0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   262d2:	1dfb      	adds	r3, r7, #7
   262d4:	781b      	ldrb	r3, [r3, #0]
   262d6:	2b7f      	cmp	r3, #127	; 0x7f
   262d8:	d867      	bhi.n	263aa <connect+0xf6>
   262da:	683b      	ldr	r3, [r7, #0]
   262dc:	2b00      	cmp	r3, #0
   262de:	d064      	beq.n	263aa <connect+0xf6>
   262e0:	1dfb      	adds	r3, r7, #7
   262e2:	781b      	ldrb	r3, [r3, #0]
   262e4:	b25b      	sxtb	r3, r3
   262e6:	4a35      	ldr	r2, [pc, #212]	; (263bc <connect+0x108>)
   262e8:	011b      	lsls	r3, r3, #4
   262ea:	18d3      	adds	r3, r2, r3
   262ec:	330a      	adds	r3, #10
   262ee:	781b      	ldrb	r3, [r3, #0]
   262f0:	b2db      	uxtb	r3, r3
   262f2:	2b01      	cmp	r3, #1
   262f4:	d159      	bne.n	263aa <connect+0xf6>
   262f6:	1dbb      	adds	r3, r7, #6
   262f8:	781b      	ldrb	r3, [r3, #0]
   262fa:	2b00      	cmp	r3, #0
   262fc:	d055      	beq.n	263aa <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   262fe:	2316      	movs	r3, #22
   26300:	18fb      	adds	r3, r7, r3
   26302:	2244      	movs	r2, #68	; 0x44
   26304:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   26306:	1dfb      	adds	r3, r7, #7
   26308:	781b      	ldrb	r3, [r3, #0]
   2630a:	b25b      	sxtb	r3, r3
   2630c:	4a2b      	ldr	r2, [pc, #172]	; (263bc <connect+0x108>)
   2630e:	011b      	lsls	r3, r3, #4
   26310:	18d3      	adds	r3, r2, r3
   26312:	330b      	adds	r3, #11
   26314:	781b      	ldrb	r3, [r3, #0]
   26316:	b2db      	uxtb	r3, r3
   26318:	001a      	movs	r2, r3
   2631a:	2301      	movs	r3, #1
   2631c:	4013      	ands	r3, r2
   2631e:	d00f      	beq.n	26340 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   26320:	2316      	movs	r3, #22
   26322:	18fb      	adds	r3, r7, r3
   26324:	224b      	movs	r2, #75	; 0x4b
   26326:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   26328:	1dfb      	adds	r3, r7, #7
   2632a:	781b      	ldrb	r3, [r3, #0]
   2632c:	b25b      	sxtb	r3, r3
   2632e:	4a23      	ldr	r2, [pc, #140]	; (263bc <connect+0x108>)
   26330:	011b      	lsls	r3, r3, #4
   26332:	18d3      	adds	r3, r2, r3
   26334:	330b      	adds	r3, #11
   26336:	781b      	ldrb	r3, [r3, #0]
   26338:	b2da      	uxtb	r2, r3
   2633a:	2308      	movs	r3, #8
   2633c:	18fb      	adds	r3, r7, r3
   2633e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   26340:	2308      	movs	r3, #8
   26342:	18fb      	adds	r3, r7, r3
   26344:	1dfa      	adds	r2, r7, #7
   26346:	7812      	ldrb	r2, [r2, #0]
   26348:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2634a:	6839      	ldr	r1, [r7, #0]
   2634c:	2308      	movs	r3, #8
   2634e:	18fb      	adds	r3, r7, r3
   26350:	2208      	movs	r2, #8
   26352:	0018      	movs	r0, r3
   26354:	4b1a      	ldr	r3, [pc, #104]	; (263c0 <connect+0x10c>)
   26356:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   26358:	1dfb      	adds	r3, r7, #7
   2635a:	781b      	ldrb	r3, [r3, #0]
   2635c:	b25b      	sxtb	r3, r3
   2635e:	4a17      	ldr	r2, [pc, #92]	; (263bc <connect+0x108>)
   26360:	011b      	lsls	r3, r3, #4
   26362:	18d3      	adds	r3, r2, r3
   26364:	3306      	adds	r3, #6
   26366:	881b      	ldrh	r3, [r3, #0]
   26368:	b29a      	uxth	r2, r3
   2636a:	2308      	movs	r3, #8
   2636c:	18fb      	adds	r3, r7, r3
   2636e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   26370:	2317      	movs	r3, #23
   26372:	18fc      	adds	r4, r7, r3
   26374:	2308      	movs	r3, #8
   26376:	18fa      	adds	r2, r7, r3
   26378:	2316      	movs	r3, #22
   2637a:	18fb      	adds	r3, r7, r3
   2637c:	7819      	ldrb	r1, [r3, #0]
   2637e:	2300      	movs	r3, #0
   26380:	9302      	str	r3, [sp, #8]
   26382:	2300      	movs	r3, #0
   26384:	9301      	str	r3, [sp, #4]
   26386:	2300      	movs	r3, #0
   26388:	9300      	str	r3, [sp, #0]
   2638a:	230c      	movs	r3, #12
   2638c:	2002      	movs	r0, #2
   2638e:	4d0d      	ldr	r5, [pc, #52]	; (263c4 <connect+0x110>)
   26390:	47a8      	blx	r5
   26392:	0003      	movs	r3, r0
   26394:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   26396:	2317      	movs	r3, #23
   26398:	18fb      	adds	r3, r7, r3
   2639a:	781b      	ldrb	r3, [r3, #0]
   2639c:	b25b      	sxtb	r3, r3
   2639e:	2b00      	cmp	r3, #0
   263a0:	d003      	beq.n	263aa <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   263a2:	2317      	movs	r3, #23
   263a4:	18fb      	adds	r3, r7, r3
   263a6:	22f7      	movs	r2, #247	; 0xf7
   263a8:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   263aa:	2317      	movs	r3, #23
   263ac:	18fb      	adds	r3, r7, r3
   263ae:	781b      	ldrb	r3, [r3, #0]
   263b0:	b25b      	sxtb	r3, r3
}
   263b2:	0018      	movs	r0, r3
   263b4:	46bd      	mov	sp, r7
   263b6:	b006      	add	sp, #24
   263b8:	bdb0      	pop	{r4, r5, r7, pc}
   263ba:	46c0      	nop			; (mov r8, r8)
   263bc:	20005b98 	.word	0x20005b98
   263c0:	000216d5 	.word	0x000216d5
   263c4:	00021971 	.word	0x00021971

000263c8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   263c8:	b590      	push	{r4, r7, lr}
   263ca:	b08f      	sub	sp, #60	; 0x3c
   263cc:	af04      	add	r7, sp, #16
   263ce:	0004      	movs	r4, r0
   263d0:	60b9      	str	r1, [r7, #8]
   263d2:	0010      	movs	r0, r2
   263d4:	0019      	movs	r1, r3
   263d6:	230f      	movs	r3, #15
   263d8:	18fb      	adds	r3, r7, r3
   263da:	1c22      	adds	r2, r4, #0
   263dc:	701a      	strb	r2, [r3, #0]
   263de:	230c      	movs	r3, #12
   263e0:	18fb      	adds	r3, r7, r3
   263e2:	1c02      	adds	r2, r0, #0
   263e4:	801a      	strh	r2, [r3, #0]
   263e6:	1dbb      	adds	r3, r7, #6
   263e8:	1c0a      	adds	r2, r1, #0
   263ea:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   263ec:	2326      	movs	r3, #38	; 0x26
   263ee:	18fb      	adds	r3, r7, r3
   263f0:	2206      	movs	r2, #6
   263f2:	4252      	negs	r2, r2
   263f4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   263f6:	230f      	movs	r3, #15
   263f8:	18fb      	adds	r3, r7, r3
   263fa:	781b      	ldrb	r3, [r3, #0]
   263fc:	2b7f      	cmp	r3, #127	; 0x7f
   263fe:	d900      	bls.n	26402 <send+0x3a>
   26400:	e087      	b.n	26512 <send+0x14a>
   26402:	68bb      	ldr	r3, [r7, #8]
   26404:	2b00      	cmp	r3, #0
   26406:	d100      	bne.n	2640a <send+0x42>
   26408:	e083      	b.n	26512 <send+0x14a>
   2640a:	230c      	movs	r3, #12
   2640c:	18fb      	adds	r3, r7, r3
   2640e:	881a      	ldrh	r2, [r3, #0]
   26410:	23af      	movs	r3, #175	; 0xaf
   26412:	00db      	lsls	r3, r3, #3
   26414:	429a      	cmp	r2, r3
   26416:	d900      	bls.n	2641a <send+0x52>
   26418:	e07b      	b.n	26512 <send+0x14a>
   2641a:	230f      	movs	r3, #15
   2641c:	18fb      	adds	r3, r7, r3
   2641e:	781b      	ldrb	r3, [r3, #0]
   26420:	b25b      	sxtb	r3, r3
   26422:	4a40      	ldr	r2, [pc, #256]	; (26524 <send+0x15c>)
   26424:	011b      	lsls	r3, r3, #4
   26426:	18d3      	adds	r3, r2, r3
   26428:	330a      	adds	r3, #10
   2642a:	781b      	ldrb	r3, [r3, #0]
   2642c:	b2db      	uxtb	r3, r3
   2642e:	2b01      	cmp	r3, #1
   26430:	d16f      	bne.n	26512 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   26432:	2323      	movs	r3, #35	; 0x23
   26434:	18fb      	adds	r3, r7, r3
   26436:	2245      	movs	r2, #69	; 0x45
   26438:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   2643a:	2324      	movs	r3, #36	; 0x24
   2643c:	18fb      	adds	r3, r7, r3
   2643e:	2250      	movs	r2, #80	; 0x50
   26440:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   26442:	2310      	movs	r3, #16
   26444:	18fb      	adds	r3, r7, r3
   26446:	220f      	movs	r2, #15
   26448:	18ba      	adds	r2, r7, r2
   2644a:	7812      	ldrb	r2, [r2, #0]
   2644c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2644e:	2310      	movs	r3, #16
   26450:	18fb      	adds	r3, r7, r3
   26452:	220c      	movs	r2, #12
   26454:	18ba      	adds	r2, r7, r2
   26456:	8812      	ldrh	r2, [r2, #0]
   26458:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   2645a:	230f      	movs	r3, #15
   2645c:	18fb      	adds	r3, r7, r3
   2645e:	781b      	ldrb	r3, [r3, #0]
   26460:	b25b      	sxtb	r3, r3
   26462:	4a30      	ldr	r2, [pc, #192]	; (26524 <send+0x15c>)
   26464:	011b      	lsls	r3, r3, #4
   26466:	18d3      	adds	r3, r2, r3
   26468:	3306      	adds	r3, #6
   2646a:	881b      	ldrh	r3, [r3, #0]
   2646c:	b29a      	uxth	r2, r3
   2646e:	2310      	movs	r3, #16
   26470:	18fb      	adds	r3, r7, r3
   26472:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   26474:	230f      	movs	r3, #15
   26476:	18fb      	adds	r3, r7, r3
   26478:	781b      	ldrb	r3, [r3, #0]
   2647a:	b25b      	sxtb	r3, r3
   2647c:	2b06      	cmp	r3, #6
   2647e:	dd03      	ble.n	26488 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   26480:	2324      	movs	r3, #36	; 0x24
   26482:	18fb      	adds	r3, r7, r3
   26484:	2244      	movs	r2, #68	; 0x44
   26486:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26488:	230f      	movs	r3, #15
   2648a:	18fb      	adds	r3, r7, r3
   2648c:	781b      	ldrb	r3, [r3, #0]
   2648e:	b25b      	sxtb	r3, r3
   26490:	4a24      	ldr	r2, [pc, #144]	; (26524 <send+0x15c>)
   26492:	011b      	lsls	r3, r3, #4
   26494:	18d3      	adds	r3, r2, r3
   26496:	330b      	adds	r3, #11
   26498:	781b      	ldrb	r3, [r3, #0]
   2649a:	b2db      	uxtb	r3, r3
   2649c:	001a      	movs	r2, r3
   2649e:	2301      	movs	r3, #1
   264a0:	4013      	ands	r3, r2
   264a2:	d00f      	beq.n	264c4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   264a4:	2323      	movs	r3, #35	; 0x23
   264a6:	18fb      	adds	r3, r7, r3
   264a8:	224c      	movs	r2, #76	; 0x4c
   264aa:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   264ac:	230f      	movs	r3, #15
   264ae:	18fb      	adds	r3, r7, r3
   264b0:	2200      	movs	r2, #0
   264b2:	569a      	ldrsb	r2, [r3, r2]
   264b4:	2324      	movs	r3, #36	; 0x24
   264b6:	18fb      	adds	r3, r7, r3
   264b8:	491a      	ldr	r1, [pc, #104]	; (26524 <send+0x15c>)
   264ba:	0112      	lsls	r2, r2, #4
   264bc:	188a      	adds	r2, r1, r2
   264be:	3208      	adds	r2, #8
   264c0:	8812      	ldrh	r2, [r2, #0]
   264c2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   264c4:	2323      	movs	r3, #35	; 0x23
   264c6:	18fb      	adds	r3, r7, r3
   264c8:	781b      	ldrb	r3, [r3, #0]
   264ca:	2280      	movs	r2, #128	; 0x80
   264cc:	4252      	negs	r2, r2
   264ce:	4313      	orrs	r3, r2
   264d0:	b2d9      	uxtb	r1, r3
   264d2:	2310      	movs	r3, #16
   264d4:	18fa      	adds	r2, r7, r3
   264d6:	2324      	movs	r3, #36	; 0x24
   264d8:	18fb      	adds	r3, r7, r3
   264da:	881b      	ldrh	r3, [r3, #0]
   264dc:	9302      	str	r3, [sp, #8]
   264de:	230c      	movs	r3, #12
   264e0:	18fb      	adds	r3, r7, r3
   264e2:	881b      	ldrh	r3, [r3, #0]
   264e4:	9301      	str	r3, [sp, #4]
   264e6:	68bb      	ldr	r3, [r7, #8]
   264e8:	9300      	str	r3, [sp, #0]
   264ea:	2310      	movs	r3, #16
   264ec:	2002      	movs	r0, #2
   264ee:	4c0e      	ldr	r4, [pc, #56]	; (26528 <send+0x160>)
   264f0:	47a0      	blx	r4
   264f2:	0003      	movs	r3, r0
   264f4:	001a      	movs	r2, r3
   264f6:	2326      	movs	r3, #38	; 0x26
   264f8:	18fb      	adds	r3, r7, r3
   264fa:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   264fc:	2326      	movs	r3, #38	; 0x26
   264fe:	18fb      	adds	r3, r7, r3
   26500:	2200      	movs	r2, #0
   26502:	5e9b      	ldrsh	r3, [r3, r2]
   26504:	2b00      	cmp	r3, #0
   26506:	d004      	beq.n	26512 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   26508:	2326      	movs	r3, #38	; 0x26
   2650a:	18fb      	adds	r3, r7, r3
   2650c:	220e      	movs	r2, #14
   2650e:	4252      	negs	r2, r2
   26510:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   26512:	2326      	movs	r3, #38	; 0x26
   26514:	18fb      	adds	r3, r7, r3
   26516:	2200      	movs	r2, #0
   26518:	5e9b      	ldrsh	r3, [r3, r2]
}
   2651a:	0018      	movs	r0, r3
   2651c:	46bd      	mov	sp, r7
   2651e:	b00b      	add	sp, #44	; 0x2c
   26520:	bd90      	pop	{r4, r7, pc}
   26522:	46c0      	nop			; (mov r8, r8)
   26524:	20005b98 	.word	0x20005b98
   26528:	00021971 	.word	0x00021971

0002652c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   2652c:	b590      	push	{r4, r7, lr}
   2652e:	b08d      	sub	sp, #52	; 0x34
   26530:	af04      	add	r7, sp, #16
   26532:	60b9      	str	r1, [r7, #8]
   26534:	0011      	movs	r1, r2
   26536:	607b      	str	r3, [r7, #4]
   26538:	230f      	movs	r3, #15
   2653a:	18fb      	adds	r3, r7, r3
   2653c:	1c02      	adds	r2, r0, #0
   2653e:	701a      	strb	r2, [r3, #0]
   26540:	230c      	movs	r3, #12
   26542:	18fb      	adds	r3, r7, r3
   26544:	1c0a      	adds	r2, r1, #0
   26546:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   26548:	231e      	movs	r3, #30
   2654a:	18fb      	adds	r3, r7, r3
   2654c:	2206      	movs	r2, #6
   2654e:	4252      	negs	r2, r2
   26550:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   26552:	230f      	movs	r3, #15
   26554:	18fb      	adds	r3, r7, r3
   26556:	781b      	ldrb	r3, [r3, #0]
   26558:	2b7f      	cmp	r3, #127	; 0x7f
   2655a:	d900      	bls.n	2655e <recv+0x32>
   2655c:	e099      	b.n	26692 <recv+0x166>
   2655e:	68bb      	ldr	r3, [r7, #8]
   26560:	2b00      	cmp	r3, #0
   26562:	d100      	bne.n	26566 <recv+0x3a>
   26564:	e095      	b.n	26692 <recv+0x166>
   26566:	230c      	movs	r3, #12
   26568:	18fb      	adds	r3, r7, r3
   2656a:	881b      	ldrh	r3, [r3, #0]
   2656c:	2b00      	cmp	r3, #0
   2656e:	d100      	bne.n	26572 <recv+0x46>
   26570:	e08f      	b.n	26692 <recv+0x166>
   26572:	230f      	movs	r3, #15
   26574:	18fb      	adds	r3, r7, r3
   26576:	781b      	ldrb	r3, [r3, #0]
   26578:	b25b      	sxtb	r3, r3
   2657a:	4a4a      	ldr	r2, [pc, #296]	; (266a4 <recv+0x178>)
   2657c:	011b      	lsls	r3, r3, #4
   2657e:	18d3      	adds	r3, r2, r3
   26580:	330a      	adds	r3, #10
   26582:	781b      	ldrb	r3, [r3, #0]
   26584:	b2db      	uxtb	r3, r3
   26586:	2b01      	cmp	r3, #1
   26588:	d000      	beq.n	2658c <recv+0x60>
   2658a:	e082      	b.n	26692 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   2658c:	231e      	movs	r3, #30
   2658e:	18fb      	adds	r3, r7, r3
   26590:	2200      	movs	r2, #0
   26592:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   26594:	230f      	movs	r3, #15
   26596:	18fb      	adds	r3, r7, r3
   26598:	2200      	movs	r2, #0
   2659a:	569a      	ldrsb	r2, [r3, r2]
   2659c:	4b41      	ldr	r3, [pc, #260]	; (266a4 <recv+0x178>)
   2659e:	0112      	lsls	r2, r2, #4
   265a0:	68b9      	ldr	r1, [r7, #8]
   265a2:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   265a4:	230f      	movs	r3, #15
   265a6:	18fb      	adds	r3, r7, r3
   265a8:	781b      	ldrb	r3, [r3, #0]
   265aa:	b25b      	sxtb	r3, r3
   265ac:	4a3d      	ldr	r2, [pc, #244]	; (266a4 <recv+0x178>)
   265ae:	011b      	lsls	r3, r3, #4
   265b0:	18d3      	adds	r3, r2, r3
   265b2:	3304      	adds	r3, #4
   265b4:	220c      	movs	r2, #12
   265b6:	18ba      	adds	r2, r7, r2
   265b8:	8812      	ldrh	r2, [r2, #0]
   265ba:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   265bc:	230f      	movs	r3, #15
   265be:	18fb      	adds	r3, r7, r3
   265c0:	781b      	ldrb	r3, [r3, #0]
   265c2:	b25b      	sxtb	r3, r3
   265c4:	4a37      	ldr	r2, [pc, #220]	; (266a4 <recv+0x178>)
   265c6:	011b      	lsls	r3, r3, #4
   265c8:	18d3      	adds	r3, r2, r3
   265ca:	330c      	adds	r3, #12
   265cc:	781b      	ldrb	r3, [r3, #0]
   265ce:	b2db      	uxtb	r3, r3
   265d0:	2b00      	cmp	r3, #0
   265d2:	d15e      	bne.n	26692 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   265d4:	231d      	movs	r3, #29
   265d6:	18fb      	adds	r3, r7, r3
   265d8:	2246      	movs	r2, #70	; 0x46
   265da:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   265dc:	230f      	movs	r3, #15
   265de:	18fb      	adds	r3, r7, r3
   265e0:	781b      	ldrb	r3, [r3, #0]
   265e2:	b25b      	sxtb	r3, r3
   265e4:	4a2f      	ldr	r2, [pc, #188]	; (266a4 <recv+0x178>)
   265e6:	011b      	lsls	r3, r3, #4
   265e8:	18d3      	adds	r3, r2, r3
   265ea:	330c      	adds	r3, #12
   265ec:	2201      	movs	r2, #1
   265ee:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   265f0:	230f      	movs	r3, #15
   265f2:	18fb      	adds	r3, r7, r3
   265f4:	781b      	ldrb	r3, [r3, #0]
   265f6:	b25b      	sxtb	r3, r3
   265f8:	4a2a      	ldr	r2, [pc, #168]	; (266a4 <recv+0x178>)
   265fa:	011b      	lsls	r3, r3, #4
   265fc:	18d3      	adds	r3, r2, r3
   265fe:	330b      	adds	r3, #11
   26600:	781b      	ldrb	r3, [r3, #0]
   26602:	b2db      	uxtb	r3, r3
   26604:	001a      	movs	r2, r3
   26606:	2301      	movs	r3, #1
   26608:	4013      	ands	r3, r2
   2660a:	d003      	beq.n	26614 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   2660c:	231d      	movs	r3, #29
   2660e:	18fb      	adds	r3, r7, r3
   26610:	224d      	movs	r2, #77	; 0x4d
   26612:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   26614:	687b      	ldr	r3, [r7, #4]
   26616:	2b00      	cmp	r3, #0
   26618:	d105      	bne.n	26626 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2661a:	2314      	movs	r3, #20
   2661c:	18fb      	adds	r3, r7, r3
   2661e:	2201      	movs	r2, #1
   26620:	4252      	negs	r2, r2
   26622:	601a      	str	r2, [r3, #0]
   26624:	e003      	b.n	2662e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   26626:	2314      	movs	r3, #20
   26628:	18fb      	adds	r3, r7, r3
   2662a:	687a      	ldr	r2, [r7, #4]
   2662c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   2662e:	2314      	movs	r3, #20
   26630:	18fb      	adds	r3, r7, r3
   26632:	220f      	movs	r2, #15
   26634:	18ba      	adds	r2, r7, r2
   26636:	7812      	ldrb	r2, [r2, #0]
   26638:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   2663a:	230f      	movs	r3, #15
   2663c:	18fb      	adds	r3, r7, r3
   2663e:	781b      	ldrb	r3, [r3, #0]
   26640:	b25b      	sxtb	r3, r3
   26642:	4a18      	ldr	r2, [pc, #96]	; (266a4 <recv+0x178>)
   26644:	011b      	lsls	r3, r3, #4
   26646:	18d3      	adds	r3, r2, r3
   26648:	3306      	adds	r3, #6
   2664a:	881b      	ldrh	r3, [r3, #0]
   2664c:	b29a      	uxth	r2, r3
   2664e:	2314      	movs	r3, #20
   26650:	18fb      	adds	r3, r7, r3
   26652:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   26654:	2314      	movs	r3, #20
   26656:	18fa      	adds	r2, r7, r3
   26658:	231d      	movs	r3, #29
   2665a:	18fb      	adds	r3, r7, r3
   2665c:	7819      	ldrb	r1, [r3, #0]
   2665e:	2300      	movs	r3, #0
   26660:	9302      	str	r3, [sp, #8]
   26662:	2300      	movs	r3, #0
   26664:	9301      	str	r3, [sp, #4]
   26666:	2300      	movs	r3, #0
   26668:	9300      	str	r3, [sp, #0]
   2666a:	2308      	movs	r3, #8
   2666c:	2002      	movs	r0, #2
   2666e:	4c0e      	ldr	r4, [pc, #56]	; (266a8 <recv+0x17c>)
   26670:	47a0      	blx	r4
   26672:	0003      	movs	r3, r0
   26674:	001a      	movs	r2, r3
   26676:	231e      	movs	r3, #30
   26678:	18fb      	adds	r3, r7, r3
   2667a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   2667c:	231e      	movs	r3, #30
   2667e:	18fb      	adds	r3, r7, r3
   26680:	2200      	movs	r2, #0
   26682:	5e9b      	ldrsh	r3, [r3, r2]
   26684:	2b00      	cmp	r3, #0
   26686:	d004      	beq.n	26692 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   26688:	231e      	movs	r3, #30
   2668a:	18fb      	adds	r3, r7, r3
   2668c:	220e      	movs	r2, #14
   2668e:	4252      	negs	r2, r2
   26690:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   26692:	231e      	movs	r3, #30
   26694:	18fb      	adds	r3, r7, r3
   26696:	2200      	movs	r2, #0
   26698:	5e9b      	ldrsh	r3, [r3, r2]
}
   2669a:	0018      	movs	r0, r3
   2669c:	46bd      	mov	sp, r7
   2669e:	b009      	add	sp, #36	; 0x24
   266a0:	bd90      	pop	{r4, r7, pc}
   266a2:	46c0      	nop			; (mov r8, r8)
   266a4:	20005b98 	.word	0x20005b98
   266a8:	00021971 	.word	0x00021971

000266ac <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   266ac:	b5b0      	push	{r4, r5, r7, lr}
   266ae:	b088      	sub	sp, #32
   266b0:	af04      	add	r7, sp, #16
   266b2:	0002      	movs	r2, r0
   266b4:	1dfb      	adds	r3, r7, #7
   266b6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   266b8:	230f      	movs	r3, #15
   266ba:	18fb      	adds	r3, r7, r3
   266bc:	22fa      	movs	r2, #250	; 0xfa
   266be:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   266c0:	4b43      	ldr	r3, [pc, #268]	; (267d0 <close+0x124>)
   266c2:	0018      	movs	r0, r3
   266c4:	4b43      	ldr	r3, [pc, #268]	; (267d4 <close+0x128>)
   266c6:	4798      	blx	r3
   266c8:	1dfb      	adds	r3, r7, #7
   266ca:	2200      	movs	r2, #0
   266cc:	569a      	ldrsb	r2, [r3, r2]
   266ce:	4b42      	ldr	r3, [pc, #264]	; (267d8 <close+0x12c>)
   266d0:	0011      	movs	r1, r2
   266d2:	0018      	movs	r0, r3
   266d4:	4b3f      	ldr	r3, [pc, #252]	; (267d4 <close+0x128>)
   266d6:	4798      	blx	r3
   266d8:	4b40      	ldr	r3, [pc, #256]	; (267dc <close+0x130>)
   266da:	0018      	movs	r0, r3
   266dc:	4b3d      	ldr	r3, [pc, #244]	; (267d4 <close+0x128>)
   266de:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   266e0:	1dfb      	adds	r3, r7, #7
   266e2:	781b      	ldrb	r3, [r3, #0]
   266e4:	2b7f      	cmp	r3, #127	; 0x7f
   266e6:	d86a      	bhi.n	267be <close+0x112>
   266e8:	1dfb      	adds	r3, r7, #7
   266ea:	781b      	ldrb	r3, [r3, #0]
   266ec:	b25b      	sxtb	r3, r3
   266ee:	4a3c      	ldr	r2, [pc, #240]	; (267e0 <close+0x134>)
   266f0:	011b      	lsls	r3, r3, #4
   266f2:	18d3      	adds	r3, r2, r3
   266f4:	330a      	adds	r3, #10
   266f6:	781b      	ldrb	r3, [r3, #0]
   266f8:	b2db      	uxtb	r3, r3
   266fa:	2b01      	cmp	r3, #1
   266fc:	d15f      	bne.n	267be <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   266fe:	230e      	movs	r3, #14
   26700:	18fb      	adds	r3, r7, r3
   26702:	2249      	movs	r2, #73	; 0x49
   26704:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   26706:	2308      	movs	r3, #8
   26708:	18fb      	adds	r3, r7, r3
   2670a:	1dfa      	adds	r2, r7, #7
   2670c:	7812      	ldrb	r2, [r2, #0]
   2670e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   26710:	1dfb      	adds	r3, r7, #7
   26712:	781b      	ldrb	r3, [r3, #0]
   26714:	b25b      	sxtb	r3, r3
   26716:	4a32      	ldr	r2, [pc, #200]	; (267e0 <close+0x134>)
   26718:	011b      	lsls	r3, r3, #4
   2671a:	18d3      	adds	r3, r2, r3
   2671c:	3306      	adds	r3, #6
   2671e:	881b      	ldrh	r3, [r3, #0]
   26720:	b29a      	uxth	r2, r3
   26722:	2308      	movs	r3, #8
   26724:	18fb      	adds	r3, r7, r3
   26726:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   26728:	1dfb      	adds	r3, r7, #7
   2672a:	781b      	ldrb	r3, [r3, #0]
   2672c:	b25b      	sxtb	r3, r3
   2672e:	4a2c      	ldr	r2, [pc, #176]	; (267e0 <close+0x134>)
   26730:	011b      	lsls	r3, r3, #4
   26732:	18d3      	adds	r3, r2, r3
   26734:	330a      	adds	r3, #10
   26736:	2200      	movs	r2, #0
   26738:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   2673a:	1dfb      	adds	r3, r7, #7
   2673c:	781b      	ldrb	r3, [r3, #0]
   2673e:	b25b      	sxtb	r3, r3
   26740:	4a27      	ldr	r2, [pc, #156]	; (267e0 <close+0x134>)
   26742:	011b      	lsls	r3, r3, #4
   26744:	18d3      	adds	r3, r2, r3
   26746:	3306      	adds	r3, #6
   26748:	2200      	movs	r2, #0
   2674a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2674c:	1dfb      	adds	r3, r7, #7
   2674e:	781b      	ldrb	r3, [r3, #0]
   26750:	b25b      	sxtb	r3, r3
   26752:	4a23      	ldr	r2, [pc, #140]	; (267e0 <close+0x134>)
   26754:	011b      	lsls	r3, r3, #4
   26756:	18d3      	adds	r3, r2, r3
   26758:	330b      	adds	r3, #11
   2675a:	781b      	ldrb	r3, [r3, #0]
   2675c:	b2db      	uxtb	r3, r3
   2675e:	001a      	movs	r2, r3
   26760:	2301      	movs	r3, #1
   26762:	4013      	ands	r3, r2
   26764:	d003      	beq.n	2676e <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   26766:	230e      	movs	r3, #14
   26768:	18fb      	adds	r3, r7, r3
   2676a:	224e      	movs	r2, #78	; 0x4e
   2676c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   2676e:	230f      	movs	r3, #15
   26770:	18fc      	adds	r4, r7, r3
   26772:	2308      	movs	r3, #8
   26774:	18fa      	adds	r2, r7, r3
   26776:	230e      	movs	r3, #14
   26778:	18fb      	adds	r3, r7, r3
   2677a:	7819      	ldrb	r1, [r3, #0]
   2677c:	2300      	movs	r3, #0
   2677e:	9302      	str	r3, [sp, #8]
   26780:	2300      	movs	r3, #0
   26782:	9301      	str	r3, [sp, #4]
   26784:	2300      	movs	r3, #0
   26786:	9300      	str	r3, [sp, #0]
   26788:	2304      	movs	r3, #4
   2678a:	2002      	movs	r0, #2
   2678c:	4d15      	ldr	r5, [pc, #84]	; (267e4 <close+0x138>)
   2678e:	47a8      	blx	r5
   26790:	0003      	movs	r3, r0
   26792:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   26794:	230f      	movs	r3, #15
   26796:	18fb      	adds	r3, r7, r3
   26798:	781b      	ldrb	r3, [r3, #0]
   2679a:	b25b      	sxtb	r3, r3
   2679c:	2b00      	cmp	r3, #0
   2679e:	d003      	beq.n	267a8 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   267a0:	230f      	movs	r3, #15
   267a2:	18fb      	adds	r3, r7, r3
   267a4:	22f7      	movs	r2, #247	; 0xf7
   267a6:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   267a8:	1dfb      	adds	r3, r7, #7
   267aa:	781b      	ldrb	r3, [r3, #0]
   267ac:	b25b      	sxtb	r3, r3
   267ae:	011a      	lsls	r2, r3, #4
   267b0:	4b0b      	ldr	r3, [pc, #44]	; (267e0 <close+0x134>)
   267b2:	18d3      	adds	r3, r2, r3
   267b4:	2210      	movs	r2, #16
   267b6:	2100      	movs	r1, #0
   267b8:	0018      	movs	r0, r3
   267ba:	4b0b      	ldr	r3, [pc, #44]	; (267e8 <close+0x13c>)
   267bc:	4798      	blx	r3
	}
	return s8Ret;
   267be:	230f      	movs	r3, #15
   267c0:	18fb      	adds	r3, r7, r3
   267c2:	781b      	ldrb	r3, [r3, #0]
   267c4:	b25b      	sxtb	r3, r3
}
   267c6:	0018      	movs	r0, r3
   267c8:	46bd      	mov	sp, r7
   267ca:	b004      	add	sp, #16
   267cc:	bdb0      	pop	{r4, r5, r7, pc}
   267ce:	46c0      	nop			; (mov r8, r8)
   267d0:	0003a388 	.word	0x0003a388
   267d4:	0001e979 	.word	0x0001e979
   267d8:	0003a3c8 	.word	0x0003a3c8
   267dc:	0003a3a8 	.word	0x0003a3a8
   267e0:	20005b98 	.word	0x20005b98
   267e4:	00021971 	.word	0x00021971
   267e8:	00021711 	.word	0x00021711

000267ec <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   267ec:	b580      	push	{r7, lr}
   267ee:	b086      	sub	sp, #24
   267f0:	af00      	add	r7, sp, #0
   267f2:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   267f4:	2300      	movs	r3, #0
   267f6:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   267f8:	2317      	movs	r3, #23
   267fa:	18fb      	adds	r3, r7, r3
   267fc:	2200      	movs	r2, #0
   267fe:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   26800:	2316      	movs	r3, #22
   26802:	18fb      	adds	r3, r7, r3
   26804:	2200      	movs	r2, #0
   26806:	701a      	strb	r2, [r3, #0]
   26808:	e060      	b.n	268cc <nmi_inet_addr+0xe0>
	{
		j = 0;
   2680a:	2315      	movs	r3, #21
   2680c:	18fb      	adds	r3, r7, r3
   2680e:	2200      	movs	r2, #0
   26810:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   26812:	2314      	movs	r3, #20
   26814:	18fb      	adds	r3, r7, r3
   26816:	687a      	ldr	r2, [r7, #4]
   26818:	7812      	ldrb	r2, [r2, #0]
   2681a:	701a      	strb	r2, [r3, #0]
			++j;
   2681c:	2315      	movs	r3, #21
   2681e:	18fb      	adds	r3, r7, r3
   26820:	2215      	movs	r2, #21
   26822:	18ba      	adds	r2, r7, r2
   26824:	7812      	ldrb	r2, [r2, #0]
   26826:	3201      	adds	r2, #1
   26828:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   2682a:	2315      	movs	r3, #21
   2682c:	18fb      	adds	r3, r7, r3
   2682e:	781b      	ldrb	r3, [r3, #0]
   26830:	2b04      	cmp	r3, #4
   26832:	d901      	bls.n	26838 <nmi_inet_addr+0x4c>
			{
				return 0;
   26834:	2300      	movs	r3, #0
   26836:	e057      	b.n	268e8 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   26838:	2314      	movs	r3, #20
   2683a:	18fb      	adds	r3, r7, r3
   2683c:	781b      	ldrb	r3, [r3, #0]
   2683e:	2b2e      	cmp	r3, #46	; 0x2e
   26840:	d004      	beq.n	2684c <nmi_inet_addr+0x60>
   26842:	2314      	movs	r3, #20
   26844:	18fb      	adds	r3, r7, r3
   26846:	781b      	ldrb	r3, [r3, #0]
   26848:	2b00      	cmp	r3, #0
   2684a:	d10d      	bne.n	26868 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   2684c:	2316      	movs	r3, #22
   2684e:	18fb      	adds	r3, r7, r3
   26850:	781b      	ldrb	r3, [r3, #0]
   26852:	220c      	movs	r2, #12
   26854:	18ba      	adds	r2, r7, r2
   26856:	2117      	movs	r1, #23
   26858:	1879      	adds	r1, r7, r1
   2685a:	7809      	ldrb	r1, [r1, #0]
   2685c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   2685e:	2317      	movs	r3, #23
   26860:	18fb      	adds	r3, r7, r3
   26862:	2200      	movs	r2, #0
   26864:	701a      	strb	r2, [r3, #0]
   26866:	e01d      	b.n	268a4 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   26868:	2314      	movs	r3, #20
   2686a:	18fb      	adds	r3, r7, r3
   2686c:	781b      	ldrb	r3, [r3, #0]
   2686e:	2b2f      	cmp	r3, #47	; 0x2f
   26870:	d916      	bls.n	268a0 <nmi_inet_addr+0xb4>
   26872:	2314      	movs	r3, #20
   26874:	18fb      	adds	r3, r7, r3
   26876:	781b      	ldrb	r3, [r3, #0]
   26878:	2b39      	cmp	r3, #57	; 0x39
   2687a:	d811      	bhi.n	268a0 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   2687c:	2317      	movs	r3, #23
   2687e:	18fb      	adds	r3, r7, r3
   26880:	781b      	ldrb	r3, [r3, #0]
   26882:	1c1a      	adds	r2, r3, #0
   26884:	0092      	lsls	r2, r2, #2
   26886:	18d3      	adds	r3, r2, r3
   26888:	18db      	adds	r3, r3, r3
   2688a:	b2da      	uxtb	r2, r3
   2688c:	2314      	movs	r3, #20
   2688e:	18fb      	adds	r3, r7, r3
   26890:	781b      	ldrb	r3, [r3, #0]
   26892:	18d3      	adds	r3, r2, r3
   26894:	b2da      	uxtb	r2, r3
   26896:	2317      	movs	r3, #23
   26898:	18fb      	adds	r3, r7, r3
   2689a:	3a30      	subs	r2, #48	; 0x30
   2689c:	701a      	strb	r2, [r3, #0]
   2689e:	e001      	b.n	268a4 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   268a0:	2300      	movs	r3, #0
   268a2:	e021      	b.n	268e8 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   268a4:	687b      	ldr	r3, [r7, #4]
   268a6:	3301      	adds	r3, #1
   268a8:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   268aa:	2314      	movs	r3, #20
   268ac:	18fb      	adds	r3, r7, r3
   268ae:	781b      	ldrb	r3, [r3, #0]
   268b0:	2b2e      	cmp	r3, #46	; 0x2e
   268b2:	d004      	beq.n	268be <nmi_inet_addr+0xd2>
   268b4:	2314      	movs	r3, #20
   268b6:	18fb      	adds	r3, r7, r3
   268b8:	781b      	ldrb	r3, [r3, #0]
   268ba:	2b00      	cmp	r3, #0
   268bc:	d1a9      	bne.n	26812 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   268be:	2316      	movs	r3, #22
   268c0:	18fb      	adds	r3, r7, r3
   268c2:	2216      	movs	r2, #22
   268c4:	18ba      	adds	r2, r7, r2
   268c6:	7812      	ldrb	r2, [r2, #0]
   268c8:	3201      	adds	r2, #1
   268ca:	701a      	strb	r2, [r3, #0]
   268cc:	2316      	movs	r3, #22
   268ce:	18fb      	adds	r3, r7, r3
   268d0:	781b      	ldrb	r3, [r3, #0]
   268d2:	2b03      	cmp	r3, #3
   268d4:	d999      	bls.n	2680a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   268d6:	230c      	movs	r3, #12
   268d8:	18f9      	adds	r1, r7, r3
   268da:	2310      	movs	r3, #16
   268dc:	18fb      	adds	r3, r7, r3
   268de:	2204      	movs	r2, #4
   268e0:	0018      	movs	r0, r3
   268e2:	4b03      	ldr	r3, [pc, #12]	; (268f0 <nmi_inet_addr+0x104>)
   268e4:	4798      	blx	r3
	return u32IP;
   268e6:	693b      	ldr	r3, [r7, #16]
}
   268e8:	0018      	movs	r0, r3
   268ea:	46bd      	mov	sp, r7
   268ec:	b006      	add	sp, #24
   268ee:	bd80      	pop	{r7, pc}
   268f0:	000216d5 	.word	0x000216d5

000268f4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   268f4:	b5b0      	push	{r4, r5, r7, lr}
   268f6:	b088      	sub	sp, #32
   268f8:	af04      	add	r7, sp, #16
   268fa:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   268fc:	230f      	movs	r3, #15
   268fe:	18fb      	adds	r3, r7, r3
   26900:	22fa      	movs	r2, #250	; 0xfa
   26902:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   26904:	687b      	ldr	r3, [r7, #4]
   26906:	0018      	movs	r0, r3
   26908:	4b14      	ldr	r3, [pc, #80]	; (2695c <gethostbyname+0x68>)
   2690a:	4798      	blx	r3
   2690c:	0003      	movs	r3, r0
   2690e:	001a      	movs	r2, r3
   26910:	230e      	movs	r3, #14
   26912:	18fb      	adds	r3, r7, r3
   26914:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   26916:	230e      	movs	r3, #14
   26918:	18fb      	adds	r3, r7, r3
   2691a:	781b      	ldrb	r3, [r3, #0]
   2691c:	2b40      	cmp	r3, #64	; 0x40
   2691e:	d815      	bhi.n	2694c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   26920:	230e      	movs	r3, #14
   26922:	18fb      	adds	r3, r7, r3
   26924:	781b      	ldrb	r3, [r3, #0]
   26926:	b29b      	uxth	r3, r3
   26928:	3301      	adds	r3, #1
   2692a:	b299      	uxth	r1, r3
   2692c:	230f      	movs	r3, #15
   2692e:	18fc      	adds	r4, r7, r3
   26930:	687a      	ldr	r2, [r7, #4]
   26932:	2300      	movs	r3, #0
   26934:	9302      	str	r3, [sp, #8]
   26936:	2300      	movs	r3, #0
   26938:	9301      	str	r3, [sp, #4]
   2693a:	2300      	movs	r3, #0
   2693c:	9300      	str	r3, [sp, #0]
   2693e:	000b      	movs	r3, r1
   26940:	214a      	movs	r1, #74	; 0x4a
   26942:	2002      	movs	r0, #2
   26944:	4d06      	ldr	r5, [pc, #24]	; (26960 <gethostbyname+0x6c>)
   26946:	47a8      	blx	r5
   26948:	0003      	movs	r3, r0
   2694a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   2694c:	230f      	movs	r3, #15
   2694e:	18fb      	adds	r3, r7, r3
   26950:	781b      	ldrb	r3, [r3, #0]
   26952:	b25b      	sxtb	r3, r3
}
   26954:	0018      	movs	r0, r3
   26956:	46bd      	mov	sp, r7
   26958:	b004      	add	sp, #16
   2695a:	bdb0      	pop	{r4, r5, r7, pc}
   2695c:	0002174f 	.word	0x0002174f
   26960:	00021971 	.word	0x00021971

00026964 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   26964:	b580      	push	{r7, lr}
   26966:	b082      	sub	sp, #8
   26968:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   2696a:	003b      	movs	r3, r7
   2696c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   2696e:	687b      	ldr	r3, [r7, #4]
   26970:	22b9      	movs	r2, #185	; 0xb9
   26972:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26974:	4b13      	ldr	r3, [pc, #76]	; (269c4 <spi_flash_enter_low_power_mode+0x60>)
   26976:	2100      	movs	r1, #0
   26978:	0018      	movs	r0, r3
   2697a:	4b13      	ldr	r3, [pc, #76]	; (269c8 <spi_flash_enter_low_power_mode+0x64>)
   2697c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2697e:	687b      	ldr	r3, [r7, #4]
   26980:	781b      	ldrb	r3, [r3, #0]
   26982:	001a      	movs	r2, r3
   26984:	4b11      	ldr	r3, [pc, #68]	; (269cc <spi_flash_enter_low_power_mode+0x68>)
   26986:	0011      	movs	r1, r2
   26988:	0018      	movs	r0, r3
   2698a:	4b0f      	ldr	r3, [pc, #60]	; (269c8 <spi_flash_enter_low_power_mode+0x64>)
   2698c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2698e:	4b10      	ldr	r3, [pc, #64]	; (269d0 <spi_flash_enter_low_power_mode+0x6c>)
   26990:	2101      	movs	r1, #1
   26992:	0018      	movs	r0, r3
   26994:	4b0c      	ldr	r3, [pc, #48]	; (269c8 <spi_flash_enter_low_power_mode+0x64>)
   26996:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26998:	4b0e      	ldr	r3, [pc, #56]	; (269d4 <spi_flash_enter_low_power_mode+0x70>)
   2699a:	2100      	movs	r1, #0
   2699c:	0018      	movs	r0, r3
   2699e:	4b0a      	ldr	r3, [pc, #40]	; (269c8 <spi_flash_enter_low_power_mode+0x64>)
   269a0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   269a2:	4b0d      	ldr	r3, [pc, #52]	; (269d8 <spi_flash_enter_low_power_mode+0x74>)
   269a4:	2181      	movs	r1, #129	; 0x81
   269a6:	0018      	movs	r0, r3
   269a8:	4b07      	ldr	r3, [pc, #28]	; (269c8 <spi_flash_enter_low_power_mode+0x64>)
   269aa:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   269ac:	46c0      	nop			; (mov r8, r8)
   269ae:	4b0b      	ldr	r3, [pc, #44]	; (269dc <spi_flash_enter_low_power_mode+0x78>)
   269b0:	0018      	movs	r0, r3
   269b2:	4b0b      	ldr	r3, [pc, #44]	; (269e0 <spi_flash_enter_low_power_mode+0x7c>)
   269b4:	4798      	blx	r3
   269b6:	0003      	movs	r3, r0
   269b8:	2b01      	cmp	r3, #1
   269ba:	d1f8      	bne.n	269ae <spi_flash_enter_low_power_mode+0x4a>
}
   269bc:	46c0      	nop			; (mov r8, r8)
   269be:	46bd      	mov	sp, r7
   269c0:	b002      	add	sp, #8
   269c2:	bd80      	pop	{r7, pc}
   269c4:	00010208 	.word	0x00010208
   269c8:	000237c5 	.word	0x000237c5
   269cc:	0001020c 	.word	0x0001020c
   269d0:	00010214 	.word	0x00010214
   269d4:	0001021c 	.word	0x0001021c
   269d8:	00010204 	.word	0x00010204
   269dc:	00010218 	.word	0x00010218
   269e0:	00023781 	.word	0x00023781

000269e4 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   269e4:	b580      	push	{r7, lr}
   269e6:	b082      	sub	sp, #8
   269e8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   269ea:	003b      	movs	r3, r7
   269ec:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   269ee:	687b      	ldr	r3, [r7, #4]
   269f0:	22ab      	movs	r2, #171	; 0xab
   269f2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   269f4:	4b13      	ldr	r3, [pc, #76]	; (26a44 <spi_flash_leave_low_power_mode+0x60>)
   269f6:	2100      	movs	r1, #0
   269f8:	0018      	movs	r0, r3
   269fa:	4b13      	ldr	r3, [pc, #76]	; (26a48 <spi_flash_leave_low_power_mode+0x64>)
   269fc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   269fe:	687b      	ldr	r3, [r7, #4]
   26a00:	781b      	ldrb	r3, [r3, #0]
   26a02:	001a      	movs	r2, r3
   26a04:	4b11      	ldr	r3, [pc, #68]	; (26a4c <spi_flash_leave_low_power_mode+0x68>)
   26a06:	0011      	movs	r1, r2
   26a08:	0018      	movs	r0, r3
   26a0a:	4b0f      	ldr	r3, [pc, #60]	; (26a48 <spi_flash_leave_low_power_mode+0x64>)
   26a0c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26a0e:	4b10      	ldr	r3, [pc, #64]	; (26a50 <spi_flash_leave_low_power_mode+0x6c>)
   26a10:	2101      	movs	r1, #1
   26a12:	0018      	movs	r0, r3
   26a14:	4b0c      	ldr	r3, [pc, #48]	; (26a48 <spi_flash_leave_low_power_mode+0x64>)
   26a16:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26a18:	4b0e      	ldr	r3, [pc, #56]	; (26a54 <spi_flash_leave_low_power_mode+0x70>)
   26a1a:	2100      	movs	r1, #0
   26a1c:	0018      	movs	r0, r3
   26a1e:	4b0a      	ldr	r3, [pc, #40]	; (26a48 <spi_flash_leave_low_power_mode+0x64>)
   26a20:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   26a22:	4b0d      	ldr	r3, [pc, #52]	; (26a58 <spi_flash_leave_low_power_mode+0x74>)
   26a24:	2181      	movs	r1, #129	; 0x81
   26a26:	0018      	movs	r0, r3
   26a28:	4b07      	ldr	r3, [pc, #28]	; (26a48 <spi_flash_leave_low_power_mode+0x64>)
   26a2a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26a2c:	46c0      	nop			; (mov r8, r8)
   26a2e:	4b0b      	ldr	r3, [pc, #44]	; (26a5c <spi_flash_leave_low_power_mode+0x78>)
   26a30:	0018      	movs	r0, r3
   26a32:	4b0b      	ldr	r3, [pc, #44]	; (26a60 <spi_flash_leave_low_power_mode+0x7c>)
   26a34:	4798      	blx	r3
   26a36:	0003      	movs	r3, r0
   26a38:	2b01      	cmp	r3, #1
   26a3a:	d1f8      	bne.n	26a2e <spi_flash_leave_low_power_mode+0x4a>
}
   26a3c:	46c0      	nop			; (mov r8, r8)
   26a3e:	46bd      	mov	sp, r7
   26a40:	b002      	add	sp, #8
   26a42:	bd80      	pop	{r7, pc}
   26a44:	00010208 	.word	0x00010208
   26a48:	000237c5 	.word	0x000237c5
   26a4c:	0001020c 	.word	0x0001020c
   26a50:	00010214 	.word	0x00010214
   26a54:	0001021c 	.word	0x0001021c
   26a58:	00010204 	.word	0x00010204
   26a5c:	00010218 	.word	0x00010218
   26a60:	00023781 	.word	0x00023781

00026a64 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   26a64:	b590      	push	{r4, r7, lr}
   26a66:	b085      	sub	sp, #20
   26a68:	af00      	add	r7, sp, #0
   26a6a:	0002      	movs	r2, r0
   26a6c:	1dfb      	adds	r3, r7, #7
   26a6e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   26a70:	230f      	movs	r3, #15
   26a72:	18fb      	adds	r3, r7, r3
   26a74:	2200      	movs	r2, #0
   26a76:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   26a78:	4b24      	ldr	r3, [pc, #144]	; (26b0c <spi_flash_enable+0xa8>)
   26a7a:	4798      	blx	r3
   26a7c:	0003      	movs	r3, r0
   26a7e:	051b      	lsls	r3, r3, #20
   26a80:	0d1b      	lsrs	r3, r3, #20
   26a82:	4a23      	ldr	r2, [pc, #140]	; (26b10 <spi_flash_enable+0xac>)
   26a84:	4293      	cmp	r3, r2
   26a86:	d938      	bls.n	26afa <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   26a88:	230f      	movs	r3, #15
   26a8a:	18fc      	adds	r4, r7, r3
   26a8c:	2308      	movs	r3, #8
   26a8e:	18fb      	adds	r3, r7, r3
   26a90:	4a20      	ldr	r2, [pc, #128]	; (26b14 <spi_flash_enable+0xb0>)
   26a92:	0019      	movs	r1, r3
   26a94:	0010      	movs	r0, r2
   26a96:	4b20      	ldr	r3, [pc, #128]	; (26b18 <spi_flash_enable+0xb4>)
   26a98:	4798      	blx	r3
   26a9a:	0003      	movs	r3, r0
   26a9c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   26a9e:	230f      	movs	r3, #15
   26aa0:	18fb      	adds	r3, r7, r3
   26aa2:	781b      	ldrb	r3, [r3, #0]
   26aa4:	b25b      	sxtb	r3, r3
   26aa6:	2b00      	cmp	r3, #0
   26aa8:	d126      	bne.n	26af8 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   26aaa:	68bb      	ldr	r3, [r7, #8]
   26aac:	4a1b      	ldr	r2, [pc, #108]	; (26b1c <spi_flash_enable+0xb8>)
   26aae:	4013      	ands	r3, r2
   26ab0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   26ab2:	68bb      	ldr	r3, [r7, #8]
   26ab4:	4a1a      	ldr	r2, [pc, #104]	; (26b20 <spi_flash_enable+0xbc>)
   26ab6:	4313      	orrs	r3, r2
   26ab8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26aba:	68bb      	ldr	r3, [r7, #8]
   26abc:	4a15      	ldr	r2, [pc, #84]	; (26b14 <spi_flash_enable+0xb0>)
   26abe:	0019      	movs	r1, r3
   26ac0:	0010      	movs	r0, r2
   26ac2:	4b18      	ldr	r3, [pc, #96]	; (26b24 <spi_flash_enable+0xc0>)
   26ac4:	4798      	blx	r3
		if(enable) {
   26ac6:	1dfb      	adds	r3, r7, #7
   26ac8:	781b      	ldrb	r3, [r3, #0]
   26aca:	2b00      	cmp	r3, #0
   26acc:	d002      	beq.n	26ad4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   26ace:	4b16      	ldr	r3, [pc, #88]	; (26b28 <spi_flash_enable+0xc4>)
   26ad0:	4798      	blx	r3
   26ad2:	e001      	b.n	26ad8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   26ad4:	4b15      	ldr	r3, [pc, #84]	; (26b2c <spi_flash_enable+0xc8>)
   26ad6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   26ad8:	68bb      	ldr	r3, [r7, #8]
   26ada:	4a10      	ldr	r2, [pc, #64]	; (26b1c <spi_flash_enable+0xb8>)
   26adc:	4013      	ands	r3, r2
   26ade:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   26ae0:	68bb      	ldr	r3, [r7, #8]
   26ae2:	2280      	movs	r2, #128	; 0x80
   26ae4:	0252      	lsls	r2, r2, #9
   26ae6:	4313      	orrs	r3, r2
   26ae8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26aea:	68bb      	ldr	r3, [r7, #8]
   26aec:	4a09      	ldr	r2, [pc, #36]	; (26b14 <spi_flash_enable+0xb0>)
   26aee:	0019      	movs	r1, r3
   26af0:	0010      	movs	r0, r2
   26af2:	4b0c      	ldr	r3, [pc, #48]	; (26b24 <spi_flash_enable+0xc0>)
   26af4:	4798      	blx	r3
   26af6:	e000      	b.n	26afa <spi_flash_enable+0x96>
			goto ERR1;
   26af8:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   26afa:	230f      	movs	r3, #15
   26afc:	18fb      	adds	r3, r7, r3
   26afe:	781b      	ldrb	r3, [r3, #0]
   26b00:	b25b      	sxtb	r3, r3
}
   26b02:	0018      	movs	r0, r3
   26b04:	46bd      	mov	sp, r7
   26b06:	b005      	add	sp, #20
   26b08:	bd90      	pop	{r4, r7, pc}
   26b0a:	46c0      	nop			; (mov r8, r8)
   26b0c:	000230a1 	.word	0x000230a1
   26b10:	0000039f 	.word	0x0000039f
   26b14:	00001410 	.word	0x00001410
   26b18:	000237a1 	.word	0x000237a1
   26b1c:	f8888fff 	.word	0xf8888fff
   26b20:	01111000 	.word	0x01111000
   26b24:	000237c5 	.word	0x000237c5
   26b28:	000269e5 	.word	0x000269e5
   26b2c:	00026965 	.word	0x00026965

00026b30 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   26b30:	b580      	push	{r7, lr}
   26b32:	b084      	sub	sp, #16
   26b34:	af00      	add	r7, sp, #0
   26b36:	0002      	movs	r2, r0
   26b38:	1dfb      	adds	r3, r7, #7
   26b3a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   26b3c:	1dfb      	adds	r3, r7, #7
   26b3e:	781b      	ldrb	r3, [r3, #0]
   26b40:	2b00      	cmp	r3, #0
   26b42:	d108      	bne.n	26b56 <mem_test_unit_ready+0x26>
   26b44:	1dfb      	adds	r3, r7, #7
   26b46:	781a      	ldrb	r2, [r3, #0]
   26b48:	4b08      	ldr	r3, [pc, #32]	; (26b6c <mem_test_unit_ready+0x3c>)
   26b4a:	0152      	lsls	r2, r2, #5
   26b4c:	58d3      	ldr	r3, [r2, r3]
   26b4e:	4798      	blx	r3
   26b50:	0003      	movs	r3, r0
   26b52:	001a      	movs	r2, r3
   26b54:	e000      	b.n	26b58 <mem_test_unit_ready+0x28>
   26b56:	2201      	movs	r2, #1
  status =
   26b58:	230f      	movs	r3, #15
   26b5a:	18fb      	adds	r3, r7, r3
   26b5c:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26b5e:	230f      	movs	r3, #15
   26b60:	18fb      	adds	r3, r7, r3
   26b62:	781b      	ldrb	r3, [r3, #0]
}
   26b64:	0018      	movs	r0, r3
   26b66:	46bd      	mov	sp, r7
   26b68:	b004      	add	sp, #16
   26b6a:	bd80      	pop	{r7, pc}
   26b6c:	0003a454 	.word	0x0003a454

00026b70 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   26b70:	b580      	push	{r7, lr}
   26b72:	b084      	sub	sp, #16
   26b74:	af00      	add	r7, sp, #0
   26b76:	0002      	movs	r2, r0
   26b78:	6039      	str	r1, [r7, #0]
   26b7a:	1dfb      	adds	r3, r7, #7
   26b7c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   26b7e:	1dfb      	adds	r3, r7, #7
   26b80:	781b      	ldrb	r3, [r3, #0]
   26b82:	2b00      	cmp	r3, #0
   26b84:	d10c      	bne.n	26ba0 <mem_read_capacity+0x30>
   26b86:	1dfb      	adds	r3, r7, #7
   26b88:	781b      	ldrb	r3, [r3, #0]
   26b8a:	4a0b      	ldr	r2, [pc, #44]	; (26bb8 <mem_read_capacity+0x48>)
   26b8c:	015b      	lsls	r3, r3, #5
   26b8e:	18d3      	adds	r3, r2, r3
   26b90:	3304      	adds	r3, #4
   26b92:	681b      	ldr	r3, [r3, #0]
   26b94:	683a      	ldr	r2, [r7, #0]
   26b96:	0010      	movs	r0, r2
   26b98:	4798      	blx	r3
   26b9a:	0003      	movs	r3, r0
   26b9c:	001a      	movs	r2, r3
   26b9e:	e000      	b.n	26ba2 <mem_read_capacity+0x32>
   26ba0:	2201      	movs	r2, #1
  status =
   26ba2:	230f      	movs	r3, #15
   26ba4:	18fb      	adds	r3, r7, r3
   26ba6:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26ba8:	230f      	movs	r3, #15
   26baa:	18fb      	adds	r3, r7, r3
   26bac:	781b      	ldrb	r3, [r3, #0]
}
   26bae:	0018      	movs	r0, r3
   26bb0:	46bd      	mov	sp, r7
   26bb2:	b004      	add	sp, #16
   26bb4:	bd80      	pop	{r7, pc}
   26bb6:	46c0      	nop			; (mov r8, r8)
   26bb8:	0003a454 	.word	0x0003a454

00026bbc <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   26bbc:	b580      	push	{r7, lr}
   26bbe:	b084      	sub	sp, #16
   26bc0:	af00      	add	r7, sp, #0
   26bc2:	0002      	movs	r2, r0
   26bc4:	1dfb      	adds	r3, r7, #7
   26bc6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   26bc8:	1dfb      	adds	r3, r7, #7
   26bca:	781b      	ldrb	r3, [r3, #0]
   26bcc:	425a      	negs	r2, r3
   26bce:	4153      	adcs	r3, r2
   26bd0:	b2da      	uxtb	r2, r3
  sector_size =
   26bd2:	230f      	movs	r3, #15
   26bd4:	18fb      	adds	r3, r7, r3
   26bd6:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   26bd8:	230f      	movs	r3, #15
   26bda:	18fb      	adds	r3, r7, r3
   26bdc:	781b      	ldrb	r3, [r3, #0]
}
   26bde:	0018      	movs	r0, r3
   26be0:	46bd      	mov	sp, r7
   26be2:	b004      	add	sp, #16
   26be4:	bd80      	pop	{r7, pc}
	...

00026be8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   26be8:	b580      	push	{r7, lr}
   26bea:	b084      	sub	sp, #16
   26bec:	af00      	add	r7, sp, #0
   26bee:	0002      	movs	r2, r0
   26bf0:	1dfb      	adds	r3, r7, #7
   26bf2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   26bf4:	1dfb      	adds	r3, r7, #7
   26bf6:	781b      	ldrb	r3, [r3, #0]
   26bf8:	2b00      	cmp	r3, #0
   26bfa:	d109      	bne.n	26c10 <mem_wr_protect+0x28>
   26bfc:	1dfb      	adds	r3, r7, #7
   26bfe:	781b      	ldrb	r3, [r3, #0]
   26c00:	4a0a      	ldr	r2, [pc, #40]	; (26c2c <mem_wr_protect+0x44>)
   26c02:	015b      	lsls	r3, r3, #5
   26c04:	18d3      	adds	r3, r2, r3
   26c06:	330c      	adds	r3, #12
   26c08:	681b      	ldr	r3, [r3, #0]
   26c0a:	4798      	blx	r3
   26c0c:	1e03      	subs	r3, r0, #0
   26c0e:	d001      	beq.n	26c14 <mem_wr_protect+0x2c>
   26c10:	2201      	movs	r2, #1
   26c12:	e000      	b.n	26c16 <mem_wr_protect+0x2e>
   26c14:	2200      	movs	r2, #0
  wr_protect =
   26c16:	230f      	movs	r3, #15
   26c18:	18fb      	adds	r3, r7, r3
   26c1a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   26c1c:	230f      	movs	r3, #15
   26c1e:	18fb      	adds	r3, r7, r3
   26c20:	781b      	ldrb	r3, [r3, #0]
}
   26c22:	0018      	movs	r0, r3
   26c24:	46bd      	mov	sp, r7
   26c26:	b004      	add	sp, #16
   26c28:	bd80      	pop	{r7, pc}
   26c2a:	46c0      	nop			; (mov r8, r8)
   26c2c:	0003a454 	.word	0x0003a454

00026c30 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   26c30:	b580      	push	{r7, lr}
   26c32:	b086      	sub	sp, #24
   26c34:	af00      	add	r7, sp, #0
   26c36:	60b9      	str	r1, [r7, #8]
   26c38:	607a      	str	r2, [r7, #4]
   26c3a:	230f      	movs	r3, #15
   26c3c:	18fb      	adds	r3, r7, r3
   26c3e:	1c02      	adds	r2, r0, #0
   26c40:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   26c42:	230f      	movs	r3, #15
   26c44:	18fb      	adds	r3, r7, r3
   26c46:	781b      	ldrb	r3, [r3, #0]
   26c48:	2b00      	cmp	r3, #0
   26c4a:	d10e      	bne.n	26c6a <memory_2_ram+0x3a>
   26c4c:	230f      	movs	r3, #15
   26c4e:	18fb      	adds	r3, r7, r3
   26c50:	781b      	ldrb	r3, [r3, #0]
   26c52:	4a0b      	ldr	r2, [pc, #44]	; (26c80 <memory_2_ram+0x50>)
   26c54:	015b      	lsls	r3, r3, #5
   26c56:	18d3      	adds	r3, r2, r3
   26c58:	3314      	adds	r3, #20
   26c5a:	681b      	ldr	r3, [r3, #0]
   26c5c:	6879      	ldr	r1, [r7, #4]
   26c5e:	68ba      	ldr	r2, [r7, #8]
   26c60:	0010      	movs	r0, r2
   26c62:	4798      	blx	r3
   26c64:	0003      	movs	r3, r0
   26c66:	001a      	movs	r2, r3
   26c68:	e000      	b.n	26c6c <memory_2_ram+0x3c>
   26c6a:	2201      	movs	r2, #1
  status =
   26c6c:	2317      	movs	r3, #23
   26c6e:	18fb      	adds	r3, r7, r3
   26c70:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   26c72:	2317      	movs	r3, #23
   26c74:	18fb      	adds	r3, r7, r3
   26c76:	781b      	ldrb	r3, [r3, #0]
}
   26c78:	0018      	movs	r0, r3
   26c7a:	46bd      	mov	sp, r7
   26c7c:	b006      	add	sp, #24
   26c7e:	bd80      	pop	{r7, pc}
   26c80:	0003a454 	.word	0x0003a454

00026c84 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   26c84:	b580      	push	{r7, lr}
   26c86:	b086      	sub	sp, #24
   26c88:	af00      	add	r7, sp, #0
   26c8a:	60b9      	str	r1, [r7, #8]
   26c8c:	607a      	str	r2, [r7, #4]
   26c8e:	230f      	movs	r3, #15
   26c90:	18fb      	adds	r3, r7, r3
   26c92:	1c02      	adds	r2, r0, #0
   26c94:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   26c96:	230f      	movs	r3, #15
   26c98:	18fb      	adds	r3, r7, r3
   26c9a:	781b      	ldrb	r3, [r3, #0]
   26c9c:	2b00      	cmp	r3, #0
   26c9e:	d10e      	bne.n	26cbe <ram_2_memory+0x3a>
   26ca0:	230f      	movs	r3, #15
   26ca2:	18fb      	adds	r3, r7, r3
   26ca4:	781b      	ldrb	r3, [r3, #0]
   26ca6:	4a0b      	ldr	r2, [pc, #44]	; (26cd4 <ram_2_memory+0x50>)
   26ca8:	015b      	lsls	r3, r3, #5
   26caa:	18d3      	adds	r3, r2, r3
   26cac:	3318      	adds	r3, #24
   26cae:	681b      	ldr	r3, [r3, #0]
   26cb0:	6879      	ldr	r1, [r7, #4]
   26cb2:	68ba      	ldr	r2, [r7, #8]
   26cb4:	0010      	movs	r0, r2
   26cb6:	4798      	blx	r3
   26cb8:	0003      	movs	r3, r0
   26cba:	001a      	movs	r2, r3
   26cbc:	e000      	b.n	26cc0 <ram_2_memory+0x3c>
   26cbe:	2201      	movs	r2, #1
  status =
   26cc0:	2317      	movs	r3, #23
   26cc2:	18fb      	adds	r3, r7, r3
   26cc4:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   26cc6:	2317      	movs	r3, #23
   26cc8:	18fb      	adds	r3, r7, r3
   26cca:	781b      	ldrb	r3, [r3, #0]
}
   26ccc:	0018      	movs	r0, r3
   26cce:	46bd      	mov	sp, r7
   26cd0:	b006      	add	sp, #24
   26cd2:	bd80      	pop	{r7, pc}
   26cd4:	0003a454 	.word	0x0003a454

00026cd8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   26cd8:	b580      	push	{r7, lr}
   26cda:	b082      	sub	sp, #8
   26cdc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   26cde:	4b10      	ldr	r3, [pc, #64]	; (26d20 <cpu_irq_enter_critical+0x48>)
   26ce0:	681b      	ldr	r3, [r3, #0]
   26ce2:	2b00      	cmp	r3, #0
   26ce4:	d112      	bne.n	26d0c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   26ce6:	f3ef 8310 	mrs	r3, PRIMASK
   26cea:	607b      	str	r3, [r7, #4]
  return(result);
   26cec:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   26cee:	2b00      	cmp	r3, #0
   26cf0:	d109      	bne.n	26d06 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   26cf2:	b672      	cpsid	i
   26cf4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   26cf8:	4b0a      	ldr	r3, [pc, #40]	; (26d24 <cpu_irq_enter_critical+0x4c>)
   26cfa:	2200      	movs	r2, #0
   26cfc:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   26cfe:	4b0a      	ldr	r3, [pc, #40]	; (26d28 <cpu_irq_enter_critical+0x50>)
   26d00:	2201      	movs	r2, #1
   26d02:	701a      	strb	r2, [r3, #0]
   26d04:	e002      	b.n	26d0c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   26d06:	4b08      	ldr	r3, [pc, #32]	; (26d28 <cpu_irq_enter_critical+0x50>)
   26d08:	2200      	movs	r2, #0
   26d0a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   26d0c:	4b04      	ldr	r3, [pc, #16]	; (26d20 <cpu_irq_enter_critical+0x48>)
   26d0e:	681b      	ldr	r3, [r3, #0]
   26d10:	1c5a      	adds	r2, r3, #1
   26d12:	4b03      	ldr	r3, [pc, #12]	; (26d20 <cpu_irq_enter_critical+0x48>)
   26d14:	601a      	str	r2, [r3, #0]
}
   26d16:	46c0      	nop			; (mov r8, r8)
   26d18:	46bd      	mov	sp, r7
   26d1a:	b002      	add	sp, #8
   26d1c:	bd80      	pop	{r7, pc}
   26d1e:	46c0      	nop			; (mov r8, r8)
   26d20:	200042b8 	.word	0x200042b8
   26d24:	20000126 	.word	0x20000126
   26d28:	200042bc 	.word	0x200042bc

00026d2c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   26d2c:	b580      	push	{r7, lr}
   26d2e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   26d30:	4b0b      	ldr	r3, [pc, #44]	; (26d60 <cpu_irq_leave_critical+0x34>)
   26d32:	681b      	ldr	r3, [r3, #0]
   26d34:	1e5a      	subs	r2, r3, #1
   26d36:	4b0a      	ldr	r3, [pc, #40]	; (26d60 <cpu_irq_leave_critical+0x34>)
   26d38:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   26d3a:	4b09      	ldr	r3, [pc, #36]	; (26d60 <cpu_irq_leave_critical+0x34>)
   26d3c:	681b      	ldr	r3, [r3, #0]
   26d3e:	2b00      	cmp	r3, #0
   26d40:	d10a      	bne.n	26d58 <cpu_irq_leave_critical+0x2c>
   26d42:	4b08      	ldr	r3, [pc, #32]	; (26d64 <cpu_irq_leave_critical+0x38>)
   26d44:	781b      	ldrb	r3, [r3, #0]
   26d46:	b2db      	uxtb	r3, r3
   26d48:	2b00      	cmp	r3, #0
   26d4a:	d005      	beq.n	26d58 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   26d4c:	4b06      	ldr	r3, [pc, #24]	; (26d68 <cpu_irq_leave_critical+0x3c>)
   26d4e:	2201      	movs	r2, #1
   26d50:	701a      	strb	r2, [r3, #0]
   26d52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   26d56:	b662      	cpsie	i
	}
}
   26d58:	46c0      	nop			; (mov r8, r8)
   26d5a:	46bd      	mov	sp, r7
   26d5c:	bd80      	pop	{r7, pc}
   26d5e:	46c0      	nop			; (mov r8, r8)
   26d60:	200042b8 	.word	0x200042b8
   26d64:	200042bc 	.word	0x200042bc
   26d68:	20000126 	.word	0x20000126

00026d6c <system_pinmux_get_group_from_gpio_pin>:
{
   26d6c:	b580      	push	{r7, lr}
   26d6e:	b084      	sub	sp, #16
   26d70:	af00      	add	r7, sp, #0
   26d72:	0002      	movs	r2, r0
   26d74:	1dfb      	adds	r3, r7, #7
   26d76:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   26d78:	230f      	movs	r3, #15
   26d7a:	18fb      	adds	r3, r7, r3
   26d7c:	1dfa      	adds	r2, r7, #7
   26d7e:	7812      	ldrb	r2, [r2, #0]
   26d80:	09d2      	lsrs	r2, r2, #7
   26d82:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26d84:	230e      	movs	r3, #14
   26d86:	18fb      	adds	r3, r7, r3
   26d88:	1dfa      	adds	r2, r7, #7
   26d8a:	7812      	ldrb	r2, [r2, #0]
   26d8c:	0952      	lsrs	r2, r2, #5
   26d8e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   26d90:	4b0d      	ldr	r3, [pc, #52]	; (26dc8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26d92:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26d94:	230f      	movs	r3, #15
   26d96:	18fb      	adds	r3, r7, r3
   26d98:	781b      	ldrb	r3, [r3, #0]
   26d9a:	2b00      	cmp	r3, #0
   26d9c:	d10f      	bne.n	26dbe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   26d9e:	230f      	movs	r3, #15
   26da0:	18fb      	adds	r3, r7, r3
   26da2:	781b      	ldrb	r3, [r3, #0]
   26da4:	009b      	lsls	r3, r3, #2
   26da6:	2210      	movs	r2, #16
   26da8:	4694      	mov	ip, r2
   26daa:	44bc      	add	ip, r7
   26dac:	4463      	add	r3, ip
   26dae:	3b08      	subs	r3, #8
   26db0:	681a      	ldr	r2, [r3, #0]
   26db2:	230e      	movs	r3, #14
   26db4:	18fb      	adds	r3, r7, r3
   26db6:	781b      	ldrb	r3, [r3, #0]
   26db8:	01db      	lsls	r3, r3, #7
   26dba:	18d3      	adds	r3, r2, r3
   26dbc:	e000      	b.n	26dc0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   26dbe:	2300      	movs	r3, #0
}
   26dc0:	0018      	movs	r0, r3
   26dc2:	46bd      	mov	sp, r7
   26dc4:	b004      	add	sp, #16
   26dc6:	bd80      	pop	{r7, pc}
   26dc8:	41004400 	.word	0x41004400

00026dcc <port_get_group_from_gpio_pin>:
{
   26dcc:	b580      	push	{r7, lr}
   26dce:	b082      	sub	sp, #8
   26dd0:	af00      	add	r7, sp, #0
   26dd2:	0002      	movs	r2, r0
   26dd4:	1dfb      	adds	r3, r7, #7
   26dd6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26dd8:	1dfb      	adds	r3, r7, #7
   26dda:	781b      	ldrb	r3, [r3, #0]
   26ddc:	0018      	movs	r0, r3
   26dde:	4b03      	ldr	r3, [pc, #12]	; (26dec <port_get_group_from_gpio_pin+0x20>)
   26de0:	4798      	blx	r3
   26de2:	0003      	movs	r3, r0
}
   26de4:	0018      	movs	r0, r3
   26de6:	46bd      	mov	sp, r7
   26de8:	b002      	add	sp, #8
   26dea:	bd80      	pop	{r7, pc}
   26dec:	00026d6d 	.word	0x00026d6d

00026df0 <port_get_config_defaults>:
{
   26df0:	b580      	push	{r7, lr}
   26df2:	b082      	sub	sp, #8
   26df4:	af00      	add	r7, sp, #0
   26df6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   26df8:	687b      	ldr	r3, [r7, #4]
   26dfa:	2200      	movs	r2, #0
   26dfc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   26dfe:	687b      	ldr	r3, [r7, #4]
   26e00:	2201      	movs	r2, #1
   26e02:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   26e04:	687b      	ldr	r3, [r7, #4]
   26e06:	2200      	movs	r2, #0
   26e08:	709a      	strb	r2, [r3, #2]
}
   26e0a:	46c0      	nop			; (mov r8, r8)
   26e0c:	46bd      	mov	sp, r7
   26e0e:	b002      	add	sp, #8
   26e10:	bd80      	pop	{r7, pc}
	...

00026e14 <port_pin_set_output_level>:
{
   26e14:	b580      	push	{r7, lr}
   26e16:	b084      	sub	sp, #16
   26e18:	af00      	add	r7, sp, #0
   26e1a:	0002      	movs	r2, r0
   26e1c:	1dfb      	adds	r3, r7, #7
   26e1e:	701a      	strb	r2, [r3, #0]
   26e20:	1dbb      	adds	r3, r7, #6
   26e22:	1c0a      	adds	r2, r1, #0
   26e24:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   26e26:	1dfb      	adds	r3, r7, #7
   26e28:	781b      	ldrb	r3, [r3, #0]
   26e2a:	0018      	movs	r0, r3
   26e2c:	4b0d      	ldr	r3, [pc, #52]	; (26e64 <port_pin_set_output_level+0x50>)
   26e2e:	4798      	blx	r3
   26e30:	0003      	movs	r3, r0
   26e32:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   26e34:	1dfb      	adds	r3, r7, #7
   26e36:	781b      	ldrb	r3, [r3, #0]
   26e38:	221f      	movs	r2, #31
   26e3a:	4013      	ands	r3, r2
   26e3c:	2201      	movs	r2, #1
   26e3e:	409a      	lsls	r2, r3
   26e40:	0013      	movs	r3, r2
   26e42:	60bb      	str	r3, [r7, #8]
	if (level) {
   26e44:	1dbb      	adds	r3, r7, #6
   26e46:	781b      	ldrb	r3, [r3, #0]
   26e48:	2b00      	cmp	r3, #0
   26e4a:	d003      	beq.n	26e54 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   26e4c:	68fb      	ldr	r3, [r7, #12]
   26e4e:	68ba      	ldr	r2, [r7, #8]
   26e50:	619a      	str	r2, [r3, #24]
}
   26e52:	e002      	b.n	26e5a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   26e54:	68fb      	ldr	r3, [r7, #12]
   26e56:	68ba      	ldr	r2, [r7, #8]
   26e58:	615a      	str	r2, [r3, #20]
}
   26e5a:	46c0      	nop			; (mov r8, r8)
   26e5c:	46bd      	mov	sp, r7
   26e5e:	b004      	add	sp, #16
   26e60:	bd80      	pop	{r7, pc}
   26e62:	46c0      	nop			; (mov r8, r8)
   26e64:	00026dcd 	.word	0x00026dcd

00026e68 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   26e68:	b580      	push	{r7, lr}
   26e6a:	b082      	sub	sp, #8
   26e6c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   26e6e:	1d3b      	adds	r3, r7, #4
   26e70:	0018      	movs	r0, r3
   26e72:	4b0e      	ldr	r3, [pc, #56]	; (26eac <system_board_init+0x44>)
   26e74:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   26e76:	1d3b      	adds	r3, r7, #4
   26e78:	2201      	movs	r2, #1
   26e7a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   26e7c:	1d3b      	adds	r3, r7, #4
   26e7e:	0019      	movs	r1, r3
   26e80:	2017      	movs	r0, #23
   26e82:	4b0b      	ldr	r3, [pc, #44]	; (26eb0 <system_board_init+0x48>)
   26e84:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   26e86:	2101      	movs	r1, #1
   26e88:	2017      	movs	r0, #23
   26e8a:	4b0a      	ldr	r3, [pc, #40]	; (26eb4 <system_board_init+0x4c>)
   26e8c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   26e8e:	1d3b      	adds	r3, r7, #4
   26e90:	2200      	movs	r2, #0
   26e92:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   26e94:	1d3b      	adds	r3, r7, #4
   26e96:	2201      	movs	r2, #1
   26e98:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   26e9a:	1d3b      	adds	r3, r7, #4
   26e9c:	0019      	movs	r1, r3
   26e9e:	2037      	movs	r0, #55	; 0x37
   26ea0:	4b03      	ldr	r3, [pc, #12]	; (26eb0 <system_board_init+0x48>)
   26ea2:	4798      	blx	r3
}
   26ea4:	46c0      	nop			; (mov r8, r8)
   26ea6:	46bd      	mov	sp, r7
   26ea8:	b002      	add	sp, #8
   26eaa:	bd80      	pop	{r7, pc}
   26eac:	00026df1 	.word	0x00026df1
   26eb0:	000274dd 	.word	0x000274dd
   26eb4:	00026e15 	.word	0x00026e15

00026eb8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   26eb8:	b580      	push	{r7, lr}
   26eba:	b084      	sub	sp, #16
   26ebc:	af00      	add	r7, sp, #0
   26ebe:	0002      	movs	r2, r0
   26ec0:	1dfb      	adds	r3, r7, #7
   26ec2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26ec4:	230f      	movs	r3, #15
   26ec6:	18fb      	adds	r3, r7, r3
   26ec8:	1dfa      	adds	r2, r7, #7
   26eca:	7812      	ldrb	r2, [r2, #0]
   26ecc:	0952      	lsrs	r2, r2, #5
   26ece:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   26ed0:	230f      	movs	r3, #15
   26ed2:	18fb      	adds	r3, r7, r3
   26ed4:	781b      	ldrb	r3, [r3, #0]
   26ed6:	2b00      	cmp	r3, #0
   26ed8:	d10c      	bne.n	26ef4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26eda:	4b09      	ldr	r3, [pc, #36]	; (26f00 <_extint_get_eic_from_channel+0x48>)
   26edc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   26ede:	230f      	movs	r3, #15
   26ee0:	18fb      	adds	r3, r7, r3
   26ee2:	781b      	ldrb	r3, [r3, #0]
   26ee4:	009b      	lsls	r3, r3, #2
   26ee6:	2210      	movs	r2, #16
   26ee8:	4694      	mov	ip, r2
   26eea:	44bc      	add	ip, r7
   26eec:	4463      	add	r3, ip
   26eee:	3b08      	subs	r3, #8
   26ef0:	681b      	ldr	r3, [r3, #0]
   26ef2:	e000      	b.n	26ef6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   26ef4:	2300      	movs	r3, #0
	}
}
   26ef6:	0018      	movs	r0, r3
   26ef8:	46bd      	mov	sp, r7
   26efa:	b004      	add	sp, #16
   26efc:	bd80      	pop	{r7, pc}
   26efe:	46c0      	nop			; (mov r8, r8)
   26f00:	40001800 	.word	0x40001800

00026f04 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   26f04:	b580      	push	{r7, lr}
   26f06:	b084      	sub	sp, #16
   26f08:	af00      	add	r7, sp, #0
   26f0a:	0002      	movs	r2, r0
   26f0c:	1dfb      	adds	r3, r7, #7
   26f0e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26f10:	1dfb      	adds	r3, r7, #7
   26f12:	781b      	ldrb	r3, [r3, #0]
   26f14:	0018      	movs	r0, r3
   26f16:	4b0b      	ldr	r3, [pc, #44]	; (26f44 <extint_chan_is_detected+0x40>)
   26f18:	4798      	blx	r3
   26f1a:	0003      	movs	r3, r0
   26f1c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   26f1e:	1dfb      	adds	r3, r7, #7
   26f20:	781b      	ldrb	r3, [r3, #0]
   26f22:	221f      	movs	r2, #31
   26f24:	4013      	ands	r3, r2
   26f26:	2201      	movs	r2, #1
   26f28:	409a      	lsls	r2, r3
   26f2a:	0013      	movs	r3, r2
   26f2c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   26f2e:	68fb      	ldr	r3, [r7, #12]
   26f30:	691b      	ldr	r3, [r3, #16]
   26f32:	68ba      	ldr	r2, [r7, #8]
   26f34:	4013      	ands	r3, r2
   26f36:	1e5a      	subs	r2, r3, #1
   26f38:	4193      	sbcs	r3, r2
   26f3a:	b2db      	uxtb	r3, r3
}
   26f3c:	0018      	movs	r0, r3
   26f3e:	46bd      	mov	sp, r7
   26f40:	b004      	add	sp, #16
   26f42:	bd80      	pop	{r7, pc}
   26f44:	00026eb9 	.word	0x00026eb9

00026f48 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   26f48:	b580      	push	{r7, lr}
   26f4a:	b084      	sub	sp, #16
   26f4c:	af00      	add	r7, sp, #0
   26f4e:	0002      	movs	r2, r0
   26f50:	1dfb      	adds	r3, r7, #7
   26f52:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26f54:	1dfb      	adds	r3, r7, #7
   26f56:	781b      	ldrb	r3, [r3, #0]
   26f58:	0018      	movs	r0, r3
   26f5a:	4b09      	ldr	r3, [pc, #36]	; (26f80 <extint_chan_clear_detected+0x38>)
   26f5c:	4798      	blx	r3
   26f5e:	0003      	movs	r3, r0
   26f60:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   26f62:	1dfb      	adds	r3, r7, #7
   26f64:	781b      	ldrb	r3, [r3, #0]
   26f66:	221f      	movs	r2, #31
   26f68:	4013      	ands	r3, r2
   26f6a:	2201      	movs	r2, #1
   26f6c:	409a      	lsls	r2, r3
   26f6e:	0013      	movs	r3, r2
   26f70:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   26f72:	68fb      	ldr	r3, [r7, #12]
   26f74:	68ba      	ldr	r2, [r7, #8]
   26f76:	611a      	str	r2, [r3, #16]
}
   26f78:	46c0      	nop			; (mov r8, r8)
   26f7a:	46bd      	mov	sp, r7
   26f7c:	b004      	add	sp, #16
   26f7e:	bd80      	pop	{r7, pc}
   26f80:	00026eb9 	.word	0x00026eb9

00026f84 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26f84:	b580      	push	{r7, lr}
   26f86:	b082      	sub	sp, #8
   26f88:	af00      	add	r7, sp, #0
   26f8a:	6078      	str	r0, [r7, #4]
   26f8c:	0008      	movs	r0, r1
   26f8e:	0011      	movs	r1, r2
   26f90:	1cfb      	adds	r3, r7, #3
   26f92:	1c02      	adds	r2, r0, #0
   26f94:	701a      	strb	r2, [r3, #0]
   26f96:	1cbb      	adds	r3, r7, #2
   26f98:	1c0a      	adds	r2, r1, #0
   26f9a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   26f9c:	1cbb      	adds	r3, r7, #2
   26f9e:	781b      	ldrb	r3, [r3, #0]
   26fa0:	2b00      	cmp	r3, #0
   26fa2:	d001      	beq.n	26fa8 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   26fa4:	2317      	movs	r3, #23
   26fa6:	e019      	b.n	26fdc <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   26fa8:	1cfb      	adds	r3, r7, #3
   26faa:	781a      	ldrb	r2, [r3, #0]
   26fac:	4b0d      	ldr	r3, [pc, #52]	; (26fe4 <extint_register_callback+0x60>)
   26fae:	0092      	lsls	r2, r2, #2
   26fb0:	58d3      	ldr	r3, [r2, r3]
   26fb2:	2b00      	cmp	r3, #0
   26fb4:	d107      	bne.n	26fc6 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   26fb6:	1cfb      	adds	r3, r7, #3
   26fb8:	781a      	ldrb	r2, [r3, #0]
   26fba:	4b0a      	ldr	r3, [pc, #40]	; (26fe4 <extint_register_callback+0x60>)
   26fbc:	0092      	lsls	r2, r2, #2
   26fbe:	6879      	ldr	r1, [r7, #4]
   26fc0:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   26fc2:	2300      	movs	r3, #0
   26fc4:	e00a      	b.n	26fdc <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   26fc6:	1cfb      	adds	r3, r7, #3
   26fc8:	781a      	ldrb	r2, [r3, #0]
   26fca:	4b06      	ldr	r3, [pc, #24]	; (26fe4 <extint_register_callback+0x60>)
   26fcc:	0092      	lsls	r2, r2, #2
   26fce:	58d2      	ldr	r2, [r2, r3]
   26fd0:	687b      	ldr	r3, [r7, #4]
   26fd2:	429a      	cmp	r2, r3
   26fd4:	d101      	bne.n	26fda <extint_register_callback+0x56>
		return STATUS_OK;
   26fd6:	2300      	movs	r3, #0
   26fd8:	e000      	b.n	26fdc <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   26fda:	231d      	movs	r3, #29
}
   26fdc:	0018      	movs	r0, r3
   26fde:	46bd      	mov	sp, r7
   26fe0:	b002      	add	sp, #8
   26fe2:	bd80      	pop	{r7, pc}
   26fe4:	20005c58 	.word	0x20005c58

00026fe8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26fe8:	b580      	push	{r7, lr}
   26fea:	b084      	sub	sp, #16
   26fec:	af00      	add	r7, sp, #0
   26fee:	0002      	movs	r2, r0
   26ff0:	1dfb      	adds	r3, r7, #7
   26ff2:	701a      	strb	r2, [r3, #0]
   26ff4:	1dbb      	adds	r3, r7, #6
   26ff6:	1c0a      	adds	r2, r1, #0
   26ff8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   26ffa:	1dbb      	adds	r3, r7, #6
   26ffc:	781b      	ldrb	r3, [r3, #0]
   26ffe:	2b00      	cmp	r3, #0
   27000:	d10e      	bne.n	27020 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   27002:	1dfb      	adds	r3, r7, #7
   27004:	781b      	ldrb	r3, [r3, #0]
   27006:	0018      	movs	r0, r3
   27008:	4b08      	ldr	r3, [pc, #32]	; (2702c <extint_chan_enable_callback+0x44>)
   2700a:	4798      	blx	r3
   2700c:	0003      	movs	r3, r0
   2700e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   27010:	1dfb      	adds	r3, r7, #7
   27012:	781b      	ldrb	r3, [r3, #0]
   27014:	2201      	movs	r2, #1
   27016:	409a      	lsls	r2, r3
   27018:	68fb      	ldr	r3, [r7, #12]
   2701a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   2701c:	2300      	movs	r3, #0
   2701e:	e000      	b.n	27022 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   27020:	2317      	movs	r3, #23
}
   27022:	0018      	movs	r0, r3
   27024:	46bd      	mov	sp, r7
   27026:	b004      	add	sp, #16
   27028:	bd80      	pop	{r7, pc}
   2702a:	46c0      	nop			; (mov r8, r8)
   2702c:	00026eb9 	.word	0x00026eb9

00027030 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   27030:	b580      	push	{r7, lr}
   27032:	b084      	sub	sp, #16
   27034:	af00      	add	r7, sp, #0
   27036:	0002      	movs	r2, r0
   27038:	1dfb      	adds	r3, r7, #7
   2703a:	701a      	strb	r2, [r3, #0]
   2703c:	1dbb      	adds	r3, r7, #6
   2703e:	1c0a      	adds	r2, r1, #0
   27040:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   27042:	1dbb      	adds	r3, r7, #6
   27044:	781b      	ldrb	r3, [r3, #0]
   27046:	2b00      	cmp	r3, #0
   27048:	d10e      	bne.n	27068 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2704a:	1dfb      	adds	r3, r7, #7
   2704c:	781b      	ldrb	r3, [r3, #0]
   2704e:	0018      	movs	r0, r3
   27050:	4b08      	ldr	r3, [pc, #32]	; (27074 <extint_chan_disable_callback+0x44>)
   27052:	4798      	blx	r3
   27054:	0003      	movs	r3, r0
   27056:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   27058:	1dfb      	adds	r3, r7, #7
   2705a:	781b      	ldrb	r3, [r3, #0]
   2705c:	2201      	movs	r2, #1
   2705e:	409a      	lsls	r2, r3
   27060:	68fb      	ldr	r3, [r7, #12]
   27062:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   27064:	2300      	movs	r3, #0
   27066:	e000      	b.n	2706a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   27068:	2317      	movs	r3, #23
}
   2706a:	0018      	movs	r0, r3
   2706c:	46bd      	mov	sp, r7
   2706e:	b004      	add	sp, #16
   27070:	bd80      	pop	{r7, pc}
   27072:	46c0      	nop			; (mov r8, r8)
   27074:	00026eb9 	.word	0x00026eb9

00027078 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   27078:	b580      	push	{r7, lr}
   2707a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2707c:	4b15      	ldr	r3, [pc, #84]	; (270d4 <EIC_Handler+0x5c>)
   2707e:	2200      	movs	r2, #0
   27080:	701a      	strb	r2, [r3, #0]
   27082:	e020      	b.n	270c6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   27084:	4b13      	ldr	r3, [pc, #76]	; (270d4 <EIC_Handler+0x5c>)
   27086:	781b      	ldrb	r3, [r3, #0]
   27088:	0018      	movs	r0, r3
   2708a:	4b13      	ldr	r3, [pc, #76]	; (270d8 <EIC_Handler+0x60>)
   2708c:	4798      	blx	r3
   2708e:	1e03      	subs	r3, r0, #0
   27090:	d013      	beq.n	270ba <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   27092:	4b10      	ldr	r3, [pc, #64]	; (270d4 <EIC_Handler+0x5c>)
   27094:	781b      	ldrb	r3, [r3, #0]
   27096:	0018      	movs	r0, r3
   27098:	4b10      	ldr	r3, [pc, #64]	; (270dc <EIC_Handler+0x64>)
   2709a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   2709c:	4b0d      	ldr	r3, [pc, #52]	; (270d4 <EIC_Handler+0x5c>)
   2709e:	781b      	ldrb	r3, [r3, #0]
   270a0:	001a      	movs	r2, r3
   270a2:	4b0f      	ldr	r3, [pc, #60]	; (270e0 <EIC_Handler+0x68>)
   270a4:	0092      	lsls	r2, r2, #2
   270a6:	58d3      	ldr	r3, [r2, r3]
   270a8:	2b00      	cmp	r3, #0
   270aa:	d006      	beq.n	270ba <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   270ac:	4b09      	ldr	r3, [pc, #36]	; (270d4 <EIC_Handler+0x5c>)
   270ae:	781b      	ldrb	r3, [r3, #0]
   270b0:	001a      	movs	r2, r3
   270b2:	4b0b      	ldr	r3, [pc, #44]	; (270e0 <EIC_Handler+0x68>)
   270b4:	0092      	lsls	r2, r2, #2
   270b6:	58d3      	ldr	r3, [r2, r3]
   270b8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   270ba:	4b06      	ldr	r3, [pc, #24]	; (270d4 <EIC_Handler+0x5c>)
   270bc:	781b      	ldrb	r3, [r3, #0]
   270be:	3301      	adds	r3, #1
   270c0:	b2da      	uxtb	r2, r3
   270c2:	4b04      	ldr	r3, [pc, #16]	; (270d4 <EIC_Handler+0x5c>)
   270c4:	701a      	strb	r2, [r3, #0]
   270c6:	4b03      	ldr	r3, [pc, #12]	; (270d4 <EIC_Handler+0x5c>)
   270c8:	781b      	ldrb	r3, [r3, #0]
   270ca:	2b0f      	cmp	r3, #15
   270cc:	d9da      	bls.n	27084 <EIC_Handler+0xc>
			}
		}
	}
}
   270ce:	46c0      	nop			; (mov r8, r8)
   270d0:	46bd      	mov	sp, r7
   270d2:	bd80      	pop	{r7, pc}
   270d4:	20005c54 	.word	0x20005c54
   270d8:	00026f05 	.word	0x00026f05
   270dc:	00026f49 	.word	0x00026f49
   270e0:	20005c58 	.word	0x20005c58

000270e4 <system_gclk_chan_get_config_defaults>:
{
   270e4:	b580      	push	{r7, lr}
   270e6:	b082      	sub	sp, #8
   270e8:	af00      	add	r7, sp, #0
   270ea:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   270ec:	687b      	ldr	r3, [r7, #4]
   270ee:	2200      	movs	r2, #0
   270f0:	701a      	strb	r2, [r3, #0]
}
   270f2:	46c0      	nop			; (mov r8, r8)
   270f4:	46bd      	mov	sp, r7
   270f6:	b002      	add	sp, #8
   270f8:	bd80      	pop	{r7, pc}
	...

000270fc <system_apb_clock_set_mask>:
{
   270fc:	b580      	push	{r7, lr}
   270fe:	b082      	sub	sp, #8
   27100:	af00      	add	r7, sp, #0
   27102:	0002      	movs	r2, r0
   27104:	6039      	str	r1, [r7, #0]
   27106:	1dfb      	adds	r3, r7, #7
   27108:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2710a:	1dfb      	adds	r3, r7, #7
   2710c:	781b      	ldrb	r3, [r3, #0]
   2710e:	2b01      	cmp	r3, #1
   27110:	d00a      	beq.n	27128 <system_apb_clock_set_mask+0x2c>
   27112:	2b02      	cmp	r3, #2
   27114:	d00f      	beq.n	27136 <system_apb_clock_set_mask+0x3a>
   27116:	2b00      	cmp	r3, #0
   27118:	d114      	bne.n	27144 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2711a:	4b0e      	ldr	r3, [pc, #56]	; (27154 <system_apb_clock_set_mask+0x58>)
   2711c:	4a0d      	ldr	r2, [pc, #52]	; (27154 <system_apb_clock_set_mask+0x58>)
   2711e:	6991      	ldr	r1, [r2, #24]
   27120:	683a      	ldr	r2, [r7, #0]
   27122:	430a      	orrs	r2, r1
   27124:	619a      	str	r2, [r3, #24]
			break;
   27126:	e00f      	b.n	27148 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27128:	4b0a      	ldr	r3, [pc, #40]	; (27154 <system_apb_clock_set_mask+0x58>)
   2712a:	4a0a      	ldr	r2, [pc, #40]	; (27154 <system_apb_clock_set_mask+0x58>)
   2712c:	69d1      	ldr	r1, [r2, #28]
   2712e:	683a      	ldr	r2, [r7, #0]
   27130:	430a      	orrs	r2, r1
   27132:	61da      	str	r2, [r3, #28]
			break;
   27134:	e008      	b.n	27148 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27136:	4b07      	ldr	r3, [pc, #28]	; (27154 <system_apb_clock_set_mask+0x58>)
   27138:	4a06      	ldr	r2, [pc, #24]	; (27154 <system_apb_clock_set_mask+0x58>)
   2713a:	6a11      	ldr	r1, [r2, #32]
   2713c:	683a      	ldr	r2, [r7, #0]
   2713e:	430a      	orrs	r2, r1
   27140:	621a      	str	r2, [r3, #32]
			break;
   27142:	e001      	b.n	27148 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27144:	2317      	movs	r3, #23
   27146:	e000      	b.n	2714a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27148:	2300      	movs	r3, #0
}
   2714a:	0018      	movs	r0, r3
   2714c:	46bd      	mov	sp, r7
   2714e:	b002      	add	sp, #8
   27150:	bd80      	pop	{r7, pc}
   27152:	46c0      	nop			; (mov r8, r8)
   27154:	40000400 	.word	0x40000400

00027158 <system_pinmux_get_config_defaults>:
{
   27158:	b580      	push	{r7, lr}
   2715a:	b082      	sub	sp, #8
   2715c:	af00      	add	r7, sp, #0
   2715e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27160:	687b      	ldr	r3, [r7, #4]
   27162:	2280      	movs	r2, #128	; 0x80
   27164:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27166:	687b      	ldr	r3, [r7, #4]
   27168:	2200      	movs	r2, #0
   2716a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2716c:	687b      	ldr	r3, [r7, #4]
   2716e:	2201      	movs	r2, #1
   27170:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27172:	687b      	ldr	r3, [r7, #4]
   27174:	2200      	movs	r2, #0
   27176:	70da      	strb	r2, [r3, #3]
}
   27178:	46c0      	nop			; (mov r8, r8)
   2717a:	46bd      	mov	sp, r7
   2717c:	b002      	add	sp, #8
   2717e:	bd80      	pop	{r7, pc}

00027180 <system_interrupt_enable>:
{
   27180:	b580      	push	{r7, lr}
   27182:	b082      	sub	sp, #8
   27184:	af00      	add	r7, sp, #0
   27186:	0002      	movs	r2, r0
   27188:	1dfb      	adds	r3, r7, #7
   2718a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2718c:	4b06      	ldr	r3, [pc, #24]	; (271a8 <system_interrupt_enable+0x28>)
   2718e:	1dfa      	adds	r2, r7, #7
   27190:	7812      	ldrb	r2, [r2, #0]
   27192:	0011      	movs	r1, r2
   27194:	221f      	movs	r2, #31
   27196:	400a      	ands	r2, r1
   27198:	2101      	movs	r1, #1
   2719a:	4091      	lsls	r1, r2
   2719c:	000a      	movs	r2, r1
   2719e:	601a      	str	r2, [r3, #0]
}
   271a0:	46c0      	nop			; (mov r8, r8)
   271a2:	46bd      	mov	sp, r7
   271a4:	b002      	add	sp, #8
   271a6:	bd80      	pop	{r7, pc}
   271a8:	e000e100 	.word	0xe000e100

000271ac <_extint_get_eic_from_channel>:
{
   271ac:	b580      	push	{r7, lr}
   271ae:	b084      	sub	sp, #16
   271b0:	af00      	add	r7, sp, #0
   271b2:	0002      	movs	r2, r0
   271b4:	1dfb      	adds	r3, r7, #7
   271b6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   271b8:	230f      	movs	r3, #15
   271ba:	18fb      	adds	r3, r7, r3
   271bc:	1dfa      	adds	r2, r7, #7
   271be:	7812      	ldrb	r2, [r2, #0]
   271c0:	0952      	lsrs	r2, r2, #5
   271c2:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   271c4:	230f      	movs	r3, #15
   271c6:	18fb      	adds	r3, r7, r3
   271c8:	781b      	ldrb	r3, [r3, #0]
   271ca:	2b00      	cmp	r3, #0
   271cc:	d10c      	bne.n	271e8 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   271ce:	4b09      	ldr	r3, [pc, #36]	; (271f4 <_extint_get_eic_from_channel+0x48>)
   271d0:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   271d2:	230f      	movs	r3, #15
   271d4:	18fb      	adds	r3, r7, r3
   271d6:	781b      	ldrb	r3, [r3, #0]
   271d8:	009b      	lsls	r3, r3, #2
   271da:	2210      	movs	r2, #16
   271dc:	4694      	mov	ip, r2
   271de:	44bc      	add	ip, r7
   271e0:	4463      	add	r3, ip
   271e2:	3b08      	subs	r3, #8
   271e4:	681b      	ldr	r3, [r3, #0]
   271e6:	e000      	b.n	271ea <_extint_get_eic_from_channel+0x3e>
		return NULL;
   271e8:	2300      	movs	r3, #0
}
   271ea:	0018      	movs	r0, r3
   271ec:	46bd      	mov	sp, r7
   271ee:	b004      	add	sp, #16
   271f0:	bd80      	pop	{r7, pc}
   271f2:	46c0      	nop			; (mov r8, r8)
   271f4:	40001800 	.word	0x40001800

000271f8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   271f8:	b580      	push	{r7, lr}
   271fa:	b082      	sub	sp, #8
   271fc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   271fe:	4b0f      	ldr	r3, [pc, #60]	; (2723c <extint_is_syncing+0x44>)
   27200:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27202:	2300      	movs	r3, #0
   27204:	607b      	str	r3, [r7, #4]
   27206:	e011      	b.n	2722c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   27208:	687b      	ldr	r3, [r7, #4]
   2720a:	009b      	lsls	r3, r3, #2
   2720c:	2208      	movs	r2, #8
   2720e:	4694      	mov	ip, r2
   27210:	44bc      	add	ip, r7
   27212:	4463      	add	r3, ip
   27214:	3b08      	subs	r3, #8
   27216:	681b      	ldr	r3, [r3, #0]
   27218:	785b      	ldrb	r3, [r3, #1]
   2721a:	b2db      	uxtb	r3, r3
   2721c:	b25b      	sxtb	r3, r3
   2721e:	2b00      	cmp	r3, #0
   27220:	da01      	bge.n	27226 <extint_is_syncing+0x2e>
			return true;
   27222:	2301      	movs	r3, #1
   27224:	e006      	b.n	27234 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27226:	687b      	ldr	r3, [r7, #4]
   27228:	3301      	adds	r3, #1
   2722a:	607b      	str	r3, [r7, #4]
   2722c:	687b      	ldr	r3, [r7, #4]
   2722e:	2b00      	cmp	r3, #0
   27230:	d0ea      	beq.n	27208 <extint_is_syncing+0x10>
		}
	}
	return false;
   27232:	2300      	movs	r3, #0
}
   27234:	0018      	movs	r0, r3
   27236:	46bd      	mov	sp, r7
   27238:	b002      	add	sp, #8
   2723a:	bd80      	pop	{r7, pc}
   2723c:	40001800 	.word	0x40001800

00027240 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   27240:	b580      	push	{r7, lr}
   27242:	b084      	sub	sp, #16
   27244:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   27246:	4b2d      	ldr	r3, [pc, #180]	; (272fc <_system_extint_init+0xbc>)
   27248:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   2724a:	2140      	movs	r1, #64	; 0x40
   2724c:	2000      	movs	r0, #0
   2724e:	4b2c      	ldr	r3, [pc, #176]	; (27300 <_system_extint_init+0xc0>)
   27250:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27252:	003b      	movs	r3, r7
   27254:	0018      	movs	r0, r3
   27256:	4b2b      	ldr	r3, [pc, #172]	; (27304 <_system_extint_init+0xc4>)
   27258:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   2725a:	003b      	movs	r3, r7
   2725c:	2200      	movs	r2, #0
   2725e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   27260:	003b      	movs	r3, r7
   27262:	0019      	movs	r1, r3
   27264:	2005      	movs	r0, #5
   27266:	4b28      	ldr	r3, [pc, #160]	; (27308 <_system_extint_init+0xc8>)
   27268:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   2726a:	2005      	movs	r0, #5
   2726c:	4b27      	ldr	r3, [pc, #156]	; (2730c <_system_extint_init+0xcc>)
   2726e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27270:	2300      	movs	r3, #0
   27272:	60fb      	str	r3, [r7, #12]
   27274:	e018      	b.n	272a8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   27276:	68fb      	ldr	r3, [r7, #12]
   27278:	009b      	lsls	r3, r3, #2
   2727a:	2210      	movs	r2, #16
   2727c:	4694      	mov	ip, r2
   2727e:	44bc      	add	ip, r7
   27280:	4463      	add	r3, ip
   27282:	3b0c      	subs	r3, #12
   27284:	681a      	ldr	r2, [r3, #0]
   27286:	68fb      	ldr	r3, [r7, #12]
   27288:	009b      	lsls	r3, r3, #2
   2728a:	2110      	movs	r1, #16
   2728c:	468c      	mov	ip, r1
   2728e:	44bc      	add	ip, r7
   27290:	4463      	add	r3, ip
   27292:	3b0c      	subs	r3, #12
   27294:	681b      	ldr	r3, [r3, #0]
   27296:	781b      	ldrb	r3, [r3, #0]
   27298:	b2db      	uxtb	r3, r3
   2729a:	2101      	movs	r1, #1
   2729c:	430b      	orrs	r3, r1
   2729e:	b2db      	uxtb	r3, r3
   272a0:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   272a2:	68fb      	ldr	r3, [r7, #12]
   272a4:	3301      	adds	r3, #1
   272a6:	60fb      	str	r3, [r7, #12]
   272a8:	68fb      	ldr	r3, [r7, #12]
   272aa:	2b00      	cmp	r3, #0
   272ac:	d0e3      	beq.n	27276 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   272ae:	46c0      	nop			; (mov r8, r8)
   272b0:	4b17      	ldr	r3, [pc, #92]	; (27310 <_system_extint_init+0xd0>)
   272b2:	4798      	blx	r3
   272b4:	1e03      	subs	r3, r0, #0
   272b6:	d1fb      	bne.n	272b0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   272b8:	230b      	movs	r3, #11
   272ba:	18fb      	adds	r3, r7, r3
   272bc:	2200      	movs	r2, #0
   272be:	701a      	strb	r2, [r3, #0]
   272c0:	e00d      	b.n	272de <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   272c2:	230b      	movs	r3, #11
   272c4:	18fb      	adds	r3, r7, r3
   272c6:	781a      	ldrb	r2, [r3, #0]
   272c8:	4b12      	ldr	r3, [pc, #72]	; (27314 <_system_extint_init+0xd4>)
   272ca:	0092      	lsls	r2, r2, #2
   272cc:	2100      	movs	r1, #0
   272ce:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   272d0:	230b      	movs	r3, #11
   272d2:	18fb      	adds	r3, r7, r3
   272d4:	781a      	ldrb	r2, [r3, #0]
   272d6:	230b      	movs	r3, #11
   272d8:	18fb      	adds	r3, r7, r3
   272da:	3201      	adds	r2, #1
   272dc:	701a      	strb	r2, [r3, #0]
   272de:	230b      	movs	r3, #11
   272e0:	18fb      	adds	r3, r7, r3
   272e2:	781b      	ldrb	r3, [r3, #0]
   272e4:	2b0f      	cmp	r3, #15
   272e6:	d9ec      	bls.n	272c2 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   272e8:	2004      	movs	r0, #4
   272ea:	4b0b      	ldr	r3, [pc, #44]	; (27318 <_system_extint_init+0xd8>)
   272ec:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   272ee:	4b0b      	ldr	r3, [pc, #44]	; (2731c <_system_extint_init+0xdc>)
   272f0:	4798      	blx	r3
}
   272f2:	46c0      	nop			; (mov r8, r8)
   272f4:	46bd      	mov	sp, r7
   272f6:	b004      	add	sp, #16
   272f8:	bd80      	pop	{r7, pc}
   272fa:	46c0      	nop			; (mov r8, r8)
   272fc:	40001800 	.word	0x40001800
   27300:	000270fd 	.word	0x000270fd
   27304:	000270e5 	.word	0x000270e5
   27308:	0002a96d 	.word	0x0002a96d
   2730c:	0002a9b1 	.word	0x0002a9b1
   27310:	000271f9 	.word	0x000271f9
   27314:	20005c58 	.word	0x20005c58
   27318:	00027181 	.word	0x00027181
   2731c:	00027321 	.word	0x00027321

00027320 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   27320:	b580      	push	{r7, lr}
   27322:	b082      	sub	sp, #8
   27324:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   27326:	4b15      	ldr	r3, [pc, #84]	; (2737c <_extint_enable+0x5c>)
   27328:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2732a:	2300      	movs	r3, #0
   2732c:	607b      	str	r3, [r7, #4]
   2732e:	e018      	b.n	27362 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   27330:	687b      	ldr	r3, [r7, #4]
   27332:	009b      	lsls	r3, r3, #2
   27334:	2208      	movs	r2, #8
   27336:	4694      	mov	ip, r2
   27338:	44bc      	add	ip, r7
   2733a:	4463      	add	r3, ip
   2733c:	3b08      	subs	r3, #8
   2733e:	681a      	ldr	r2, [r3, #0]
   27340:	687b      	ldr	r3, [r7, #4]
   27342:	009b      	lsls	r3, r3, #2
   27344:	2108      	movs	r1, #8
   27346:	468c      	mov	ip, r1
   27348:	44bc      	add	ip, r7
   2734a:	4463      	add	r3, ip
   2734c:	3b08      	subs	r3, #8
   2734e:	681b      	ldr	r3, [r3, #0]
   27350:	781b      	ldrb	r3, [r3, #0]
   27352:	b2db      	uxtb	r3, r3
   27354:	2102      	movs	r1, #2
   27356:	430b      	orrs	r3, r1
   27358:	b2db      	uxtb	r3, r3
   2735a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2735c:	687b      	ldr	r3, [r7, #4]
   2735e:	3301      	adds	r3, #1
   27360:	607b      	str	r3, [r7, #4]
   27362:	687b      	ldr	r3, [r7, #4]
   27364:	2b00      	cmp	r3, #0
   27366:	d0e3      	beq.n	27330 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   27368:	46c0      	nop			; (mov r8, r8)
   2736a:	4b05      	ldr	r3, [pc, #20]	; (27380 <_extint_enable+0x60>)
   2736c:	4798      	blx	r3
   2736e:	1e03      	subs	r3, r0, #0
   27370:	d1fb      	bne.n	2736a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   27372:	46c0      	nop			; (mov r8, r8)
   27374:	46bd      	mov	sp, r7
   27376:	b002      	add	sp, #8
   27378:	bd80      	pop	{r7, pc}
   2737a:	46c0      	nop			; (mov r8, r8)
   2737c:	40001800 	.word	0x40001800
   27380:	000271f9 	.word	0x000271f9

00027384 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   27384:	b580      	push	{r7, lr}
   27386:	b082      	sub	sp, #8
   27388:	af00      	add	r7, sp, #0
   2738a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   2738c:	687b      	ldr	r3, [r7, #4]
   2738e:	2200      	movs	r2, #0
   27390:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   27392:	687b      	ldr	r3, [r7, #4]
   27394:	2200      	movs	r2, #0
   27396:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   27398:	687b      	ldr	r3, [r7, #4]
   2739a:	2201      	movs	r2, #1
   2739c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   2739e:	687b      	ldr	r3, [r7, #4]
   273a0:	2201      	movs	r2, #1
   273a2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   273a4:	687b      	ldr	r3, [r7, #4]
   273a6:	2200      	movs	r2, #0
   273a8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   273aa:	687b      	ldr	r3, [r7, #4]
   273ac:	2202      	movs	r2, #2
   273ae:	72da      	strb	r2, [r3, #11]
}
   273b0:	46c0      	nop			; (mov r8, r8)
   273b2:	46bd      	mov	sp, r7
   273b4:	b002      	add	sp, #8
   273b6:	bd80      	pop	{r7, pc}

000273b8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   273b8:	b580      	push	{r7, lr}
   273ba:	b086      	sub	sp, #24
   273bc:	af00      	add	r7, sp, #0
   273be:	0002      	movs	r2, r0
   273c0:	6039      	str	r1, [r7, #0]
   273c2:	1dfb      	adds	r3, r7, #7
   273c4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   273c6:	2308      	movs	r3, #8
   273c8:	18fb      	adds	r3, r7, r3
   273ca:	0018      	movs	r0, r3
   273cc:	4b36      	ldr	r3, [pc, #216]	; (274a8 <extint_chan_set_config+0xf0>)
   273ce:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   273d0:	683b      	ldr	r3, [r7, #0]
   273d2:	685b      	ldr	r3, [r3, #4]
   273d4:	b2da      	uxtb	r2, r3
   273d6:	2308      	movs	r3, #8
   273d8:	18fb      	adds	r3, r7, r3
   273da:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   273dc:	2308      	movs	r3, #8
   273de:	18fb      	adds	r3, r7, r3
   273e0:	2200      	movs	r2, #0
   273e2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   273e4:	683b      	ldr	r3, [r7, #0]
   273e6:	7a1a      	ldrb	r2, [r3, #8]
   273e8:	2308      	movs	r3, #8
   273ea:	18fb      	adds	r3, r7, r3
   273ec:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   273ee:	683b      	ldr	r3, [r7, #0]
   273f0:	681b      	ldr	r3, [r3, #0]
   273f2:	b2db      	uxtb	r3, r3
   273f4:	2208      	movs	r2, #8
   273f6:	18ba      	adds	r2, r7, r2
   273f8:	0011      	movs	r1, r2
   273fa:	0018      	movs	r0, r3
   273fc:	4b2b      	ldr	r3, [pc, #172]	; (274ac <extint_chan_set_config+0xf4>)
   273fe:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   27400:	1dfb      	adds	r3, r7, #7
   27402:	781b      	ldrb	r3, [r3, #0]
   27404:	0018      	movs	r0, r3
   27406:	4b2a      	ldr	r3, [pc, #168]	; (274b0 <extint_chan_set_config+0xf8>)
   27408:	4798      	blx	r3
   2740a:	0003      	movs	r3, r0
   2740c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   2740e:	1dfb      	adds	r3, r7, #7
   27410:	781b      	ldrb	r3, [r3, #0]
   27412:	2207      	movs	r2, #7
   27414:	4013      	ands	r3, r2
   27416:	009b      	lsls	r3, r3, #2
   27418:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   2741a:	683b      	ldr	r3, [r7, #0]
   2741c:	7adb      	ldrb	r3, [r3, #11]
   2741e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   27420:	683b      	ldr	r3, [r7, #0]
   27422:	7a9b      	ldrb	r3, [r3, #10]
   27424:	2b00      	cmp	r3, #0
   27426:	d003      	beq.n	27430 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   27428:	697b      	ldr	r3, [r7, #20]
   2742a:	2208      	movs	r2, #8
   2742c:	4313      	orrs	r3, r2
   2742e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   27430:	1dfb      	adds	r3, r7, #7
   27432:	781b      	ldrb	r3, [r3, #0]
   27434:	08db      	lsrs	r3, r3, #3
   27436:	b2db      	uxtb	r3, r3
   27438:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   2743a:	1dfb      	adds	r3, r7, #7
   2743c:	781b      	ldrb	r3, [r3, #0]
   2743e:	08db      	lsrs	r3, r3, #3
   27440:	b2db      	uxtb	r3, r3
   27442:	001a      	movs	r2, r3
   27444:	693b      	ldr	r3, [r7, #16]
   27446:	3206      	adds	r2, #6
   27448:	0092      	lsls	r2, r2, #2
   2744a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   2744c:	210f      	movs	r1, #15
   2744e:	68fa      	ldr	r2, [r7, #12]
   27450:	4091      	lsls	r1, r2
   27452:	000a      	movs	r2, r1
   27454:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   27456:	401a      	ands	r2, r3
			(new_config << config_pos);
   27458:	6979      	ldr	r1, [r7, #20]
   2745a:	68fb      	ldr	r3, [r7, #12]
   2745c:	4099      	lsls	r1, r3
   2745e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   27460:	431a      	orrs	r2, r3
   27462:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   27464:	693b      	ldr	r3, [r7, #16]
   27466:	1d82      	adds	r2, r0, #6
   27468:	0092      	lsls	r2, r2, #2
   2746a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   2746c:	683b      	ldr	r3, [r7, #0]
   2746e:	7a5b      	ldrb	r3, [r3, #9]
   27470:	2b00      	cmp	r3, #0
   27472:	d00a      	beq.n	2748a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   27474:	693b      	ldr	r3, [r7, #16]
   27476:	695a      	ldr	r2, [r3, #20]
   27478:	1dfb      	adds	r3, r7, #7
   2747a:	781b      	ldrb	r3, [r3, #0]
   2747c:	2101      	movs	r1, #1
   2747e:	4099      	lsls	r1, r3
   27480:	000b      	movs	r3, r1
   27482:	431a      	orrs	r2, r3
   27484:	693b      	ldr	r3, [r7, #16]
   27486:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   27488:	e00a      	b.n	274a0 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   2748a:	693b      	ldr	r3, [r7, #16]
   2748c:	695b      	ldr	r3, [r3, #20]
   2748e:	1dfa      	adds	r2, r7, #7
   27490:	7812      	ldrb	r2, [r2, #0]
   27492:	2101      	movs	r1, #1
   27494:	4091      	lsls	r1, r2
   27496:	000a      	movs	r2, r1
   27498:	43d2      	mvns	r2, r2
   2749a:	401a      	ands	r2, r3
   2749c:	693b      	ldr	r3, [r7, #16]
   2749e:	615a      	str	r2, [r3, #20]
}
   274a0:	46c0      	nop			; (mov r8, r8)
   274a2:	46bd      	mov	sp, r7
   274a4:	b006      	add	sp, #24
   274a6:	bd80      	pop	{r7, pc}
   274a8:	00027159 	.word	0x00027159
   274ac:	0002accd 	.word	0x0002accd
   274b0:	000271ad 	.word	0x000271ad

000274b4 <system_pinmux_get_config_defaults>:
{
   274b4:	b580      	push	{r7, lr}
   274b6:	b082      	sub	sp, #8
   274b8:	af00      	add	r7, sp, #0
   274ba:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   274bc:	687b      	ldr	r3, [r7, #4]
   274be:	2280      	movs	r2, #128	; 0x80
   274c0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   274c2:	687b      	ldr	r3, [r7, #4]
   274c4:	2200      	movs	r2, #0
   274c6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   274c8:	687b      	ldr	r3, [r7, #4]
   274ca:	2201      	movs	r2, #1
   274cc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   274ce:	687b      	ldr	r3, [r7, #4]
   274d0:	2200      	movs	r2, #0
   274d2:	70da      	strb	r2, [r3, #3]
}
   274d4:	46c0      	nop			; (mov r8, r8)
   274d6:	46bd      	mov	sp, r7
   274d8:	b002      	add	sp, #8
   274da:	bd80      	pop	{r7, pc}

000274dc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   274dc:	b580      	push	{r7, lr}
   274de:	b084      	sub	sp, #16
   274e0:	af00      	add	r7, sp, #0
   274e2:	0002      	movs	r2, r0
   274e4:	6039      	str	r1, [r7, #0]
   274e6:	1dfb      	adds	r3, r7, #7
   274e8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   274ea:	230c      	movs	r3, #12
   274ec:	18fb      	adds	r3, r7, r3
   274ee:	0018      	movs	r0, r3
   274f0:	4b10      	ldr	r3, [pc, #64]	; (27534 <port_pin_set_config+0x58>)
   274f2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   274f4:	230c      	movs	r3, #12
   274f6:	18fb      	adds	r3, r7, r3
   274f8:	2280      	movs	r2, #128	; 0x80
   274fa:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   274fc:	683b      	ldr	r3, [r7, #0]
   274fe:	781a      	ldrb	r2, [r3, #0]
   27500:	230c      	movs	r3, #12
   27502:	18fb      	adds	r3, r7, r3
   27504:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   27506:	683b      	ldr	r3, [r7, #0]
   27508:	785a      	ldrb	r2, [r3, #1]
   2750a:	230c      	movs	r3, #12
   2750c:	18fb      	adds	r3, r7, r3
   2750e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   27510:	683b      	ldr	r3, [r7, #0]
   27512:	789a      	ldrb	r2, [r3, #2]
   27514:	230c      	movs	r3, #12
   27516:	18fb      	adds	r3, r7, r3
   27518:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2751a:	230c      	movs	r3, #12
   2751c:	18fa      	adds	r2, r7, r3
   2751e:	1dfb      	adds	r3, r7, #7
   27520:	781b      	ldrb	r3, [r3, #0]
   27522:	0011      	movs	r1, r2
   27524:	0018      	movs	r0, r3
   27526:	4b04      	ldr	r3, [pc, #16]	; (27538 <port_pin_set_config+0x5c>)
   27528:	4798      	blx	r3
}
   2752a:	46c0      	nop			; (mov r8, r8)
   2752c:	46bd      	mov	sp, r7
   2752e:	b004      	add	sp, #16
   27530:	bd80      	pop	{r7, pc}
   27532:	46c0      	nop			; (mov r8, r8)
   27534:	000274b5 	.word	0x000274b5
   27538:	0002accd 	.word	0x0002accd

0002753c <system_gclk_chan_get_config_defaults>:
{
   2753c:	b580      	push	{r7, lr}
   2753e:	b082      	sub	sp, #8
   27540:	af00      	add	r7, sp, #0
   27542:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27544:	687b      	ldr	r3, [r7, #4]
   27546:	2200      	movs	r2, #0
   27548:	701a      	strb	r2, [r3, #0]
}
   2754a:	46c0      	nop			; (mov r8, r8)
   2754c:	46bd      	mov	sp, r7
   2754e:	b002      	add	sp, #8
   27550:	bd80      	pop	{r7, pc}
	...

00027554 <system_apb_clock_set_mask>:
{
   27554:	b580      	push	{r7, lr}
   27556:	b082      	sub	sp, #8
   27558:	af00      	add	r7, sp, #0
   2755a:	0002      	movs	r2, r0
   2755c:	6039      	str	r1, [r7, #0]
   2755e:	1dfb      	adds	r3, r7, #7
   27560:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27562:	1dfb      	adds	r3, r7, #7
   27564:	781b      	ldrb	r3, [r3, #0]
   27566:	2b01      	cmp	r3, #1
   27568:	d00a      	beq.n	27580 <system_apb_clock_set_mask+0x2c>
   2756a:	2b02      	cmp	r3, #2
   2756c:	d00f      	beq.n	2758e <system_apb_clock_set_mask+0x3a>
   2756e:	2b00      	cmp	r3, #0
   27570:	d114      	bne.n	2759c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27572:	4b0e      	ldr	r3, [pc, #56]	; (275ac <system_apb_clock_set_mask+0x58>)
   27574:	4a0d      	ldr	r2, [pc, #52]	; (275ac <system_apb_clock_set_mask+0x58>)
   27576:	6991      	ldr	r1, [r2, #24]
   27578:	683a      	ldr	r2, [r7, #0]
   2757a:	430a      	orrs	r2, r1
   2757c:	619a      	str	r2, [r3, #24]
			break;
   2757e:	e00f      	b.n	275a0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27580:	4b0a      	ldr	r3, [pc, #40]	; (275ac <system_apb_clock_set_mask+0x58>)
   27582:	4a0a      	ldr	r2, [pc, #40]	; (275ac <system_apb_clock_set_mask+0x58>)
   27584:	69d1      	ldr	r1, [r2, #28]
   27586:	683a      	ldr	r2, [r7, #0]
   27588:	430a      	orrs	r2, r1
   2758a:	61da      	str	r2, [r3, #28]
			break;
   2758c:	e008      	b.n	275a0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2758e:	4b07      	ldr	r3, [pc, #28]	; (275ac <system_apb_clock_set_mask+0x58>)
   27590:	4a06      	ldr	r2, [pc, #24]	; (275ac <system_apb_clock_set_mask+0x58>)
   27592:	6a11      	ldr	r1, [r2, #32]
   27594:	683a      	ldr	r2, [r7, #0]
   27596:	430a      	orrs	r2, r1
   27598:	621a      	str	r2, [r3, #32]
			break;
   2759a:	e001      	b.n	275a0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2759c:	2317      	movs	r3, #23
   2759e:	e000      	b.n	275a2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   275a0:	2300      	movs	r3, #0
}
   275a2:	0018      	movs	r0, r3
   275a4:	46bd      	mov	sp, r7
   275a6:	b002      	add	sp, #8
   275a8:	bd80      	pop	{r7, pc}
   275aa:	46c0      	nop			; (mov r8, r8)
   275ac:	40000400 	.word	0x40000400

000275b0 <system_interrupt_enable>:
{
   275b0:	b580      	push	{r7, lr}
   275b2:	b082      	sub	sp, #8
   275b4:	af00      	add	r7, sp, #0
   275b6:	0002      	movs	r2, r0
   275b8:	1dfb      	adds	r3, r7, #7
   275ba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   275bc:	4b06      	ldr	r3, [pc, #24]	; (275d8 <system_interrupt_enable+0x28>)
   275be:	1dfa      	adds	r2, r7, #7
   275c0:	7812      	ldrb	r2, [r2, #0]
   275c2:	0011      	movs	r1, r2
   275c4:	221f      	movs	r2, #31
   275c6:	400a      	ands	r2, r1
   275c8:	2101      	movs	r1, #1
   275ca:	4091      	lsls	r1, r2
   275cc:	000a      	movs	r2, r1
   275ce:	601a      	str	r2, [r3, #0]
}
   275d0:	46c0      	nop			; (mov r8, r8)
   275d2:	46bd      	mov	sp, r7
   275d4:	b002      	add	sp, #8
   275d6:	bd80      	pop	{r7, pc}
   275d8:	e000e100 	.word	0xe000e100

000275dc <system_interrupt_disable>:
{
   275dc:	b580      	push	{r7, lr}
   275de:	b082      	sub	sp, #8
   275e0:	af00      	add	r7, sp, #0
   275e2:	0002      	movs	r2, r0
   275e4:	1dfb      	adds	r3, r7, #7
   275e6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   275e8:	4a07      	ldr	r2, [pc, #28]	; (27608 <system_interrupt_disable+0x2c>)
   275ea:	1dfb      	adds	r3, r7, #7
   275ec:	781b      	ldrb	r3, [r3, #0]
   275ee:	0019      	movs	r1, r3
   275f0:	231f      	movs	r3, #31
   275f2:	400b      	ands	r3, r1
   275f4:	2101      	movs	r1, #1
   275f6:	4099      	lsls	r1, r3
   275f8:	000b      	movs	r3, r1
   275fa:	0019      	movs	r1, r3
   275fc:	2380      	movs	r3, #128	; 0x80
   275fe:	50d1      	str	r1, [r2, r3]
}
   27600:	46c0      	nop			; (mov r8, r8)
   27602:	46bd      	mov	sp, r7
   27604:	b002      	add	sp, #8
   27606:	bd80      	pop	{r7, pc}
   27608:	e000e100 	.word	0xe000e100

0002760c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   2760c:	b580      	push	{r7, lr}
   2760e:	b084      	sub	sp, #16
   27610:	af00      	add	r7, sp, #0
   27612:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27614:	687b      	ldr	r3, [r7, #4]
   27616:	681b      	ldr	r3, [r3, #0]
   27618:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   2761a:	68fb      	ldr	r3, [r7, #12]
   2761c:	7a9b      	ldrb	r3, [r3, #10]
   2761e:	b2db      	uxtb	r3, r3
   27620:	b25b      	sxtb	r3, r3
   27622:	2b00      	cmp	r3, #0
   27624:	da01      	bge.n	2762a <rtc_calendar_is_syncing+0x1e>
                return true;
   27626:	2301      	movs	r3, #1
   27628:	e000      	b.n	2762c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   2762a:	2300      	movs	r3, #0
}
   2762c:	0018      	movs	r0, r3
   2762e:	46bd      	mov	sp, r7
   27630:	b004      	add	sp, #16
   27632:	bd80      	pop	{r7, pc}

00027634 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   27634:	b580      	push	{r7, lr}
   27636:	b084      	sub	sp, #16
   27638:	af00      	add	r7, sp, #0
   2763a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2763c:	687b      	ldr	r3, [r7, #4]
   2763e:	681b      	ldr	r3, [r3, #0]
   27640:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   27642:	2003      	movs	r0, #3
   27644:	4b0a      	ldr	r3, [pc, #40]	; (27670 <rtc_calendar_enable+0x3c>)
   27646:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   27648:	46c0      	nop			; (mov r8, r8)
   2764a:	687b      	ldr	r3, [r7, #4]
   2764c:	0018      	movs	r0, r3
   2764e:	4b09      	ldr	r3, [pc, #36]	; (27674 <rtc_calendar_enable+0x40>)
   27650:	4798      	blx	r3
   27652:	1e03      	subs	r3, r0, #0
   27654:	d1f9      	bne.n	2764a <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   27656:	68fb      	ldr	r3, [r7, #12]
   27658:	881b      	ldrh	r3, [r3, #0]
   2765a:	b29b      	uxth	r3, r3
   2765c:	2202      	movs	r2, #2
   2765e:	4313      	orrs	r3, r2
   27660:	b29a      	uxth	r2, r3
   27662:	68fb      	ldr	r3, [r7, #12]
   27664:	801a      	strh	r2, [r3, #0]
}
   27666:	46c0      	nop			; (mov r8, r8)
   27668:	46bd      	mov	sp, r7
   2766a:	b004      	add	sp, #16
   2766c:	bd80      	pop	{r7, pc}
   2766e:	46c0      	nop			; (mov r8, r8)
   27670:	000275b1 	.word	0x000275b1
   27674:	0002760d 	.word	0x0002760d

00027678 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   27678:	b580      	push	{r7, lr}
   2767a:	b084      	sub	sp, #16
   2767c:	af00      	add	r7, sp, #0
   2767e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27680:	687b      	ldr	r3, [r7, #4]
   27682:	681b      	ldr	r3, [r3, #0]
   27684:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   27686:	2003      	movs	r0, #3
   27688:	4b0d      	ldr	r3, [pc, #52]	; (276c0 <rtc_calendar_disable+0x48>)
   2768a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   2768c:	46c0      	nop			; (mov r8, r8)
   2768e:	687b      	ldr	r3, [r7, #4]
   27690:	0018      	movs	r0, r3
   27692:	4b0c      	ldr	r3, [pc, #48]	; (276c4 <rtc_calendar_disable+0x4c>)
   27694:	4798      	blx	r3
   27696:	1e03      	subs	r3, r0, #0
   27698:	d1f9      	bne.n	2768e <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   2769a:	68fb      	ldr	r3, [r7, #12]
   2769c:	22c1      	movs	r2, #193	; 0xc1
   2769e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   276a0:	68fb      	ldr	r3, [r7, #12]
   276a2:	22c1      	movs	r2, #193	; 0xc1
   276a4:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   276a6:	68fb      	ldr	r3, [r7, #12]
   276a8:	881b      	ldrh	r3, [r3, #0]
   276aa:	b29b      	uxth	r3, r3
   276ac:	2202      	movs	r2, #2
   276ae:	4393      	bics	r3, r2
   276b0:	b29a      	uxth	r2, r3
   276b2:	68fb      	ldr	r3, [r7, #12]
   276b4:	801a      	strh	r2, [r3, #0]
}
   276b6:	46c0      	nop			; (mov r8, r8)
   276b8:	46bd      	mov	sp, r7
   276ba:	b004      	add	sp, #16
   276bc:	bd80      	pop	{r7, pc}
   276be:	46c0      	nop			; (mov r8, r8)
   276c0:	000275dd 	.word	0x000275dd
   276c4:	0002760d 	.word	0x0002760d

000276c8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   276c8:	b580      	push	{r7, lr}
   276ca:	b084      	sub	sp, #16
   276cc:	af00      	add	r7, sp, #0
   276ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   276d0:	687b      	ldr	r3, [r7, #4]
   276d2:	681b      	ldr	r3, [r3, #0]
   276d4:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   276d6:	687b      	ldr	r3, [r7, #4]
   276d8:	0018      	movs	r0, r3
   276da:	4b0d      	ldr	r3, [pc, #52]	; (27710 <rtc_calendar_reset+0x48>)
   276dc:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   276de:	687b      	ldr	r3, [r7, #4]
   276e0:	2200      	movs	r2, #0
   276e2:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   276e4:	687b      	ldr	r3, [r7, #4]
   276e6:	2200      	movs	r2, #0
   276e8:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   276ea:	46c0      	nop			; (mov r8, r8)
   276ec:	687b      	ldr	r3, [r7, #4]
   276ee:	0018      	movs	r0, r3
   276f0:	4b08      	ldr	r3, [pc, #32]	; (27714 <rtc_calendar_reset+0x4c>)
   276f2:	4798      	blx	r3
   276f4:	1e03      	subs	r3, r0, #0
   276f6:	d1f9      	bne.n	276ec <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   276f8:	68fb      	ldr	r3, [r7, #12]
   276fa:	881b      	ldrh	r3, [r3, #0]
   276fc:	b29b      	uxth	r3, r3
   276fe:	2201      	movs	r2, #1
   27700:	4313      	orrs	r3, r2
   27702:	b29a      	uxth	r2, r3
   27704:	68fb      	ldr	r3, [r7, #12]
   27706:	801a      	strh	r2, [r3, #0]
}
   27708:	46c0      	nop			; (mov r8, r8)
   2770a:	46bd      	mov	sp, r7
   2770c:	b004      	add	sp, #16
   2770e:	bd80      	pop	{r7, pc}
   27710:	00027679 	.word	0x00027679
   27714:	0002760d 	.word	0x0002760d

00027718 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   27718:	b580      	push	{r7, lr}
   2771a:	b084      	sub	sp, #16
   2771c:	af00      	add	r7, sp, #0
   2771e:	6078      	str	r0, [r7, #4]
   27720:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   27722:	683b      	ldr	r3, [r7, #0]
   27724:	88db      	ldrh	r3, [r3, #6]
   27726:	001a      	movs	r2, r3
   27728:	687b      	ldr	r3, [r7, #4]
   2772a:	88db      	ldrh	r3, [r3, #6]
   2772c:	1ad3      	subs	r3, r2, r3
   2772e:	069b      	lsls	r3, r3, #26
   27730:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   27732:	683b      	ldr	r3, [r7, #0]
   27734:	795b      	ldrb	r3, [r3, #5]
   27736:	059b      	lsls	r3, r3, #22
   27738:	001a      	movs	r2, r3
   2773a:	68fb      	ldr	r3, [r7, #12]
   2773c:	4313      	orrs	r3, r2
   2773e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   27740:	683b      	ldr	r3, [r7, #0]
   27742:	791b      	ldrb	r3, [r3, #4]
   27744:	045b      	lsls	r3, r3, #17
   27746:	001a      	movs	r2, r3
   27748:	68fb      	ldr	r3, [r7, #12]
   2774a:	4313      	orrs	r3, r2
   2774c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   2774e:	683b      	ldr	r3, [r7, #0]
   27750:	789b      	ldrb	r3, [r3, #2]
   27752:	031b      	lsls	r3, r3, #12
   27754:	001a      	movs	r2, r3
   27756:	68fb      	ldr	r3, [r7, #12]
   27758:	4313      	orrs	r3, r2
   2775a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   2775c:	687b      	ldr	r3, [r7, #4]
   2775e:	791b      	ldrb	r3, [r3, #4]
   27760:	2201      	movs	r2, #1
   27762:	4053      	eors	r3, r2
   27764:	b2db      	uxtb	r3, r3
   27766:	2b00      	cmp	r3, #0
   27768:	d008      	beq.n	2777c <rtc_calendar_time_to_register_value+0x64>
   2776a:	683b      	ldr	r3, [r7, #0]
   2776c:	78db      	ldrb	r3, [r3, #3]
   2776e:	2b00      	cmp	r3, #0
   27770:	d004      	beq.n	2777c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   27772:	68fb      	ldr	r3, [r7, #12]
   27774:	2280      	movs	r2, #128	; 0x80
   27776:	0252      	lsls	r2, r2, #9
   27778:	4313      	orrs	r3, r2
   2777a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   2777c:	683b      	ldr	r3, [r7, #0]
   2777e:	785b      	ldrb	r3, [r3, #1]
   27780:	019b      	lsls	r3, r3, #6
   27782:	001a      	movs	r2, r3
   27784:	68fb      	ldr	r3, [r7, #12]
   27786:	4313      	orrs	r3, r2
   27788:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   2778a:	683b      	ldr	r3, [r7, #0]
   2778c:	781b      	ldrb	r3, [r3, #0]
   2778e:	001a      	movs	r2, r3
   27790:	68fb      	ldr	r3, [r7, #12]
   27792:	4313      	orrs	r3, r2
   27794:	60fb      	str	r3, [r7, #12]

	return register_value;
   27796:	68fb      	ldr	r3, [r7, #12]
}
   27798:	0018      	movs	r0, r3
   2779a:	46bd      	mov	sp, r7
   2779c:	b004      	add	sp, #16
   2779e:	bd80      	pop	{r7, pc}

000277a0 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   277a0:	b580      	push	{r7, lr}
   277a2:	b084      	sub	sp, #16
   277a4:	af00      	add	r7, sp, #0
   277a6:	60f8      	str	r0, [r7, #12]
   277a8:	60b9      	str	r1, [r7, #8]
   277aa:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   277ac:	68bb      	ldr	r3, [r7, #8]
   277ae:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   277b0:	b29a      	uxth	r2, r3
   277b2:	68fb      	ldr	r3, [r7, #12]
   277b4:	88db      	ldrh	r3, [r3, #6]
   277b6:	18d3      	adds	r3, r2, r3
   277b8:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   277ba:	687b      	ldr	r3, [r7, #4]
   277bc:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   277be:	68bb      	ldr	r3, [r7, #8]
   277c0:	0d9b      	lsrs	r3, r3, #22
   277c2:	b2db      	uxtb	r3, r3
   277c4:	220f      	movs	r2, #15
   277c6:	4013      	ands	r3, r2
   277c8:	b2da      	uxtb	r2, r3
   277ca:	687b      	ldr	r3, [r7, #4]
   277cc:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   277ce:	68bb      	ldr	r3, [r7, #8]
   277d0:	0c5b      	lsrs	r3, r3, #17
   277d2:	b2db      	uxtb	r3, r3
   277d4:	221f      	movs	r2, #31
   277d6:	4013      	ands	r3, r2
   277d8:	b2da      	uxtb	r2, r3
   277da:	687b      	ldr	r3, [r7, #4]
   277dc:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   277de:	68fb      	ldr	r3, [r7, #12]
   277e0:	791b      	ldrb	r3, [r3, #4]
   277e2:	2b00      	cmp	r3, #0
   277e4:	d008      	beq.n	277f8 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   277e6:	68bb      	ldr	r3, [r7, #8]
   277e8:	0b1b      	lsrs	r3, r3, #12
   277ea:	b2db      	uxtb	r3, r3
   277ec:	221f      	movs	r2, #31
   277ee:	4013      	ands	r3, r2
   277f0:	b2da      	uxtb	r2, r3
   277f2:	687b      	ldr	r3, [r7, #4]
   277f4:	709a      	strb	r2, [r3, #2]
   277f6:	e010      	b.n	2781a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   277f8:	68bb      	ldr	r3, [r7, #8]
   277fa:	0b1b      	lsrs	r3, r3, #12
   277fc:	b2db      	uxtb	r3, r3
   277fe:	220f      	movs	r2, #15
   27800:	4013      	ands	r3, r2
   27802:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   27804:	687b      	ldr	r3, [r7, #4]
   27806:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   27808:	68ba      	ldr	r2, [r7, #8]
   2780a:	2380      	movs	r3, #128	; 0x80
   2780c:	025b      	lsls	r3, r3, #9
   2780e:	4013      	ands	r3, r2
   27810:	1e5a      	subs	r2, r3, #1
   27812:	4193      	sbcs	r3, r2
   27814:	b2da      	uxtb	r2, r3
   27816:	687b      	ldr	r3, [r7, #4]
   27818:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   2781a:	68bb      	ldr	r3, [r7, #8]
   2781c:	099b      	lsrs	r3, r3, #6
   2781e:	b2db      	uxtb	r3, r3
   27820:	223f      	movs	r2, #63	; 0x3f
   27822:	4013      	ands	r3, r2
   27824:	b2da      	uxtb	r2, r3
   27826:	687b      	ldr	r3, [r7, #4]
   27828:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   2782a:	68bb      	ldr	r3, [r7, #8]
   2782c:	b2db      	uxtb	r3, r3
   2782e:	223f      	movs	r2, #63	; 0x3f
   27830:	4013      	ands	r3, r2
   27832:	b2da      	uxtb	r2, r3
   27834:	687b      	ldr	r3, [r7, #4]
   27836:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   27838:	46c0      	nop			; (mov r8, r8)
   2783a:	46bd      	mov	sp, r7
   2783c:	b004      	add	sp, #16
   2783e:	bd80      	pop	{r7, pc}

00027840 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   27840:	b580      	push	{r7, lr}
   27842:	b084      	sub	sp, #16
   27844:	af00      	add	r7, sp, #0
   27846:	6078      	str	r0, [r7, #4]
   27848:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2784a:	687b      	ldr	r3, [r7, #4]
   2784c:	681b      	ldr	r3, [r3, #0]
   2784e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   27850:	683b      	ldr	r3, [r7, #0]
   27852:	881a      	ldrh	r2, [r3, #0]
   27854:	230e      	movs	r3, #14
   27856:	18fb      	adds	r3, r7, r3
   27858:	2108      	movs	r1, #8
   2785a:	430a      	orrs	r2, r1
   2785c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   2785e:	683b      	ldr	r3, [r7, #0]
   27860:	791b      	ldrb	r3, [r3, #4]
   27862:	2201      	movs	r2, #1
   27864:	4053      	eors	r3, r2
   27866:	b2db      	uxtb	r3, r3
   27868:	2b00      	cmp	r3, #0
   2786a:	d007      	beq.n	2787c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   2786c:	230e      	movs	r3, #14
   2786e:	18fb      	adds	r3, r7, r3
   27870:	220e      	movs	r2, #14
   27872:	18ba      	adds	r2, r7, r2
   27874:	8812      	ldrh	r2, [r2, #0]
   27876:	2140      	movs	r1, #64	; 0x40
   27878:	430a      	orrs	r2, r1
   2787a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   2787c:	683b      	ldr	r3, [r7, #0]
   2787e:	789b      	ldrb	r3, [r3, #2]
   27880:	2b00      	cmp	r3, #0
   27882:	d007      	beq.n	27894 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   27884:	230e      	movs	r3, #14
   27886:	18fb      	adds	r3, r7, r3
   27888:	220e      	movs	r2, #14
   2788a:	18ba      	adds	r2, r7, r2
   2788c:	8812      	ldrh	r2, [r2, #0]
   2788e:	2180      	movs	r1, #128	; 0x80
   27890:	430a      	orrs	r2, r1
   27892:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   27894:	68bb      	ldr	r3, [r7, #8]
   27896:	220e      	movs	r2, #14
   27898:	18ba      	adds	r2, r7, r2
   2789a:	8812      	ldrh	r2, [r2, #0]
   2789c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   2789e:	683b      	ldr	r3, [r7, #0]
   278a0:	78db      	ldrb	r3, [r3, #3]
   278a2:	2b00      	cmp	r3, #0
   278a4:	d008      	beq.n	278b8 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   278a6:	68bb      	ldr	r3, [r7, #8]
   278a8:	885b      	ldrh	r3, [r3, #2]
   278aa:	b29b      	uxth	r3, r3
   278ac:	2280      	movs	r2, #128	; 0x80
   278ae:	01d2      	lsls	r2, r2, #7
   278b0:	4313      	orrs	r3, r2
   278b2:	b29a      	uxth	r2, r3
   278b4:	68bb      	ldr	r3, [r7, #8]
   278b6:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   278b8:	230d      	movs	r3, #13
   278ba:	18fb      	adds	r3, r7, r3
   278bc:	2200      	movs	r2, #0
   278be:	701a      	strb	r2, [r3, #0]
   278c0:	e017      	b.n	278f2 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   278c2:	230d      	movs	r3, #13
   278c4:	18fb      	adds	r3, r7, r3
   278c6:	781a      	ldrb	r2, [r3, #0]
   278c8:	0013      	movs	r3, r2
   278ca:	009b      	lsls	r3, r3, #2
   278cc:	189b      	adds	r3, r3, r2
   278ce:	005b      	lsls	r3, r3, #1
   278d0:	3308      	adds	r3, #8
   278d2:	683a      	ldr	r2, [r7, #0]
   278d4:	18d1      	adds	r1, r2, r3
   278d6:	230d      	movs	r3, #13
   278d8:	18fb      	adds	r3, r7, r3
   278da:	781a      	ldrb	r2, [r3, #0]
   278dc:	687b      	ldr	r3, [r7, #4]
   278de:	0018      	movs	r0, r3
   278e0:	4b08      	ldr	r3, [pc, #32]	; (27904 <_rtc_calendar_set_config+0xc4>)
   278e2:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   278e4:	230d      	movs	r3, #13
   278e6:	18fb      	adds	r3, r7, r3
   278e8:	781a      	ldrb	r2, [r3, #0]
   278ea:	230d      	movs	r3, #13
   278ec:	18fb      	adds	r3, r7, r3
   278ee:	3201      	adds	r2, #1
   278f0:	701a      	strb	r2, [r3, #0]
   278f2:	230d      	movs	r3, #13
   278f4:	18fb      	adds	r3, r7, r3
   278f6:	781b      	ldrb	r3, [r3, #0]
   278f8:	2b00      	cmp	r3, #0
   278fa:	d0e2      	beq.n	278c2 <_rtc_calendar_set_config+0x82>
	}
}
   278fc:	46c0      	nop			; (mov r8, r8)
   278fe:	46bd      	mov	sp, r7
   27900:	b004      	add	sp, #16
   27902:	bd80      	pop	{r7, pc}
   27904:	00027a29 	.word	0x00027a29

00027908 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   27908:	b580      	push	{r7, lr}
   2790a:	b086      	sub	sp, #24
   2790c:	af00      	add	r7, sp, #0
   2790e:	60f8      	str	r0, [r7, #12]
   27910:	60b9      	str	r1, [r7, #8]
   27912:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27914:	68fb      	ldr	r3, [r7, #12]
   27916:	68ba      	ldr	r2, [r7, #8]
   27918:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   2791a:	2120      	movs	r1, #32
   2791c:	2000      	movs	r0, #0
   2791e:	4b18      	ldr	r3, [pc, #96]	; (27980 <rtc_calendar_init+0x78>)
   27920:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27922:	2314      	movs	r3, #20
   27924:	18fb      	adds	r3, r7, r3
   27926:	0018      	movs	r0, r3
   27928:	4b16      	ldr	r3, [pc, #88]	; (27984 <rtc_calendar_init+0x7c>)
   2792a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   2792c:	2314      	movs	r3, #20
   2792e:	18fb      	adds	r3, r7, r3
   27930:	2202      	movs	r2, #2
   27932:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   27934:	2314      	movs	r3, #20
   27936:	18fb      	adds	r3, r7, r3
   27938:	0019      	movs	r1, r3
   2793a:	2004      	movs	r0, #4
   2793c:	4b12      	ldr	r3, [pc, #72]	; (27988 <rtc_calendar_init+0x80>)
   2793e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   27940:	2004      	movs	r0, #4
   27942:	4b12      	ldr	r3, [pc, #72]	; (2798c <rtc_calendar_init+0x84>)
   27944:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   27946:	68fb      	ldr	r3, [r7, #12]
   27948:	0018      	movs	r0, r3
   2794a:	4b11      	ldr	r3, [pc, #68]	; (27990 <rtc_calendar_init+0x88>)
   2794c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   2794e:	687b      	ldr	r3, [r7, #4]
   27950:	791a      	ldrb	r2, [r3, #4]
   27952:	68fb      	ldr	r3, [r7, #12]
   27954:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   27956:	687b      	ldr	r3, [r7, #4]
   27958:	78da      	ldrb	r2, [r3, #3]
   2795a:	68fb      	ldr	r3, [r7, #12]
   2795c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   2795e:	687b      	ldr	r3, [r7, #4]
   27960:	88da      	ldrh	r2, [r3, #6]
   27962:	68fb      	ldr	r3, [r7, #12]
   27964:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   27966:	4b0b      	ldr	r3, [pc, #44]	; (27994 <rtc_calendar_init+0x8c>)
   27968:	68fa      	ldr	r2, [r7, #12]
   2796a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   2796c:	687a      	ldr	r2, [r7, #4]
   2796e:	68fb      	ldr	r3, [r7, #12]
   27970:	0011      	movs	r1, r2
   27972:	0018      	movs	r0, r3
   27974:	4b08      	ldr	r3, [pc, #32]	; (27998 <rtc_calendar_init+0x90>)
   27976:	4798      	blx	r3
}
   27978:	46c0      	nop			; (mov r8, r8)
   2797a:	46bd      	mov	sp, r7
   2797c:	b006      	add	sp, #24
   2797e:	bd80      	pop	{r7, pc}
   27980:	00027555 	.word	0x00027555
   27984:	0002753d 	.word	0x0002753d
   27988:	0002a96d 	.word	0x0002a96d
   2798c:	0002a9b1 	.word	0x0002a9b1
   27990:	000276c9 	.word	0x000276c9
   27994:	20005c98 	.word	0x20005c98
   27998:	00027841 	.word	0x00027841

0002799c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   2799c:	b580      	push	{r7, lr}
   2799e:	b084      	sub	sp, #16
   279a0:	af00      	add	r7, sp, #0
   279a2:	6078      	str	r0, [r7, #4]
   279a4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   279a6:	687b      	ldr	r3, [r7, #4]
   279a8:	681b      	ldr	r3, [r3, #0]
   279aa:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   279ac:	687b      	ldr	r3, [r7, #4]
   279ae:	795b      	ldrb	r3, [r3, #5]
   279b0:	2201      	movs	r2, #1
   279b2:	4053      	eors	r3, r2
   279b4:	b2db      	uxtb	r3, r3
   279b6:	2b00      	cmp	r3, #0
   279b8:	d00a      	beq.n	279d0 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   279ba:	68fb      	ldr	r3, [r7, #12]
   279bc:	4a16      	ldr	r2, [pc, #88]	; (27a18 <rtc_calendar_get_time+0x7c>)
   279be:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   279c0:	46c0      	nop			; (mov r8, r8)
   279c2:	687b      	ldr	r3, [r7, #4]
   279c4:	0018      	movs	r0, r3
   279c6:	4b15      	ldr	r3, [pc, #84]	; (27a1c <rtc_calendar_get_time+0x80>)
   279c8:	4798      	blx	r3
   279ca:	1e03      	subs	r3, r0, #0
   279cc:	d1f9      	bne.n	279c2 <rtc_calendar_get_time+0x26>
   279ce:	e016      	b.n	279fe <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   279d0:	68fb      	ldr	r3, [r7, #12]
   279d2:	885b      	ldrh	r3, [r3, #2]
   279d4:	b29b      	uxth	r3, r3
   279d6:	001a      	movs	r2, r3
   279d8:	2380      	movs	r3, #128	; 0x80
   279da:	01db      	lsls	r3, r3, #7
   279dc:	4013      	ands	r3, r2
   279de:	d10e      	bne.n	279fe <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   279e0:	68fb      	ldr	r3, [r7, #12]
   279e2:	885b      	ldrh	r3, [r3, #2]
   279e4:	b29b      	uxth	r3, r3
   279e6:	4a0e      	ldr	r2, [pc, #56]	; (27a20 <rtc_calendar_get_time+0x84>)
   279e8:	4313      	orrs	r3, r2
   279ea:	b29a      	uxth	r2, r3
   279ec:	68fb      	ldr	r3, [r7, #12]
   279ee:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   279f0:	46c0      	nop			; (mov r8, r8)
   279f2:	687b      	ldr	r3, [r7, #4]
   279f4:	0018      	movs	r0, r3
   279f6:	4b09      	ldr	r3, [pc, #36]	; (27a1c <rtc_calendar_get_time+0x80>)
   279f8:	4798      	blx	r3
   279fa:	1e03      	subs	r3, r0, #0
   279fc:	d1f9      	bne.n	279f2 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   279fe:	68fb      	ldr	r3, [r7, #12]
   27a00:	691b      	ldr	r3, [r3, #16]
   27a02:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   27a04:	683a      	ldr	r2, [r7, #0]
   27a06:	68b9      	ldr	r1, [r7, #8]
   27a08:	687b      	ldr	r3, [r7, #4]
   27a0a:	0018      	movs	r0, r3
   27a0c:	4b05      	ldr	r3, [pc, #20]	; (27a24 <rtc_calendar_get_time+0x88>)
   27a0e:	4798      	blx	r3
}
   27a10:	46c0      	nop			; (mov r8, r8)
   27a12:	46bd      	mov	sp, r7
   27a14:	b004      	add	sp, #16
   27a16:	bd80      	pop	{r7, pc}
   27a18:	ffff8000 	.word	0xffff8000
   27a1c:	0002760d 	.word	0x0002760d
   27a20:	ffffc000 	.word	0xffffc000
   27a24:	000277a1 	.word	0x000277a1

00027a28 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   27a28:	b580      	push	{r7, lr}
   27a2a:	b086      	sub	sp, #24
   27a2c:	af00      	add	r7, sp, #0
   27a2e:	60f8      	str	r0, [r7, #12]
   27a30:	60b9      	str	r1, [r7, #8]
   27a32:	1dfb      	adds	r3, r7, #7
   27a34:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27a36:	68fb      	ldr	r3, [r7, #12]
   27a38:	681b      	ldr	r3, [r3, #0]
   27a3a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   27a3c:	1dfb      	adds	r3, r7, #7
   27a3e:	781b      	ldrb	r3, [r3, #0]
   27a40:	2b01      	cmp	r3, #1
   27a42:	d901      	bls.n	27a48 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   27a44:	2317      	movs	r3, #23
   27a46:	e021      	b.n	27a8c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   27a48:	68ba      	ldr	r2, [r7, #8]
   27a4a:	68fb      	ldr	r3, [r7, #12]
   27a4c:	0011      	movs	r1, r2
   27a4e:	0018      	movs	r0, r3
   27a50:	4b10      	ldr	r3, [pc, #64]	; (27a94 <rtc_calendar_set_alarm+0x6c>)
   27a52:	4798      	blx	r3
   27a54:	0003      	movs	r3, r0
   27a56:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   27a58:	46c0      	nop			; (mov r8, r8)
   27a5a:	68fb      	ldr	r3, [r7, #12]
   27a5c:	0018      	movs	r0, r3
   27a5e:	4b0e      	ldr	r3, [pc, #56]	; (27a98 <rtc_calendar_set_alarm+0x70>)
   27a60:	4798      	blx	r3
   27a62:	1e03      	subs	r3, r0, #0
   27a64:	d1f9      	bne.n	27a5a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   27a66:	1dfb      	adds	r3, r7, #7
   27a68:	781a      	ldrb	r2, [r3, #0]
   27a6a:	697b      	ldr	r3, [r7, #20]
   27a6c:	3203      	adds	r2, #3
   27a6e:	00d2      	lsls	r2, r2, #3
   27a70:	6939      	ldr	r1, [r7, #16]
   27a72:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   27a74:	1dfb      	adds	r3, r7, #7
   27a76:	781b      	ldrb	r3, [r3, #0]
   27a78:	68ba      	ldr	r2, [r7, #8]
   27a7a:	7a11      	ldrb	r1, [r2, #8]
   27a7c:	697a      	ldr	r2, [r7, #20]
   27a7e:	3303      	adds	r3, #3
   27a80:	00db      	lsls	r3, r3, #3
   27a82:	18d3      	adds	r3, r2, r3
   27a84:	3304      	adds	r3, #4
   27a86:	1c0a      	adds	r2, r1, #0
   27a88:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   27a8a:	2300      	movs	r3, #0
}
   27a8c:	0018      	movs	r0, r3
   27a8e:	46bd      	mov	sp, r7
   27a90:	b006      	add	sp, #24
   27a92:	bd80      	pop	{r7, pc}
   27a94:	00027719 	.word	0x00027719
   27a98:	0002760d 	.word	0x0002760d

00027a9c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   27a9c:	b580      	push	{r7, lr}
   27a9e:	b086      	sub	sp, #24
   27aa0:	af00      	add	r7, sp, #0
   27aa2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   27aa4:	4b28      	ldr	r3, [pc, #160]	; (27b48 <_rtc_interrupt_handler+0xac>)
   27aa6:	687a      	ldr	r2, [r7, #4]
   27aa8:	0092      	lsls	r2, r2, #2
   27aaa:	58d3      	ldr	r3, [r2, r3]
   27aac:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   27aae:	697b      	ldr	r3, [r7, #20]
   27ab0:	681b      	ldr	r3, [r3, #0]
   27ab2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   27ab4:	230e      	movs	r3, #14
   27ab6:	18fb      	adds	r3, r7, r3
   27ab8:	697a      	ldr	r2, [r7, #20]
   27aba:	8a52      	ldrh	r2, [r2, #18]
   27abc:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   27abe:	697b      	ldr	r3, [r7, #20]
   27ac0:	8a1b      	ldrh	r3, [r3, #16]
   27ac2:	b29a      	uxth	r2, r3
   27ac4:	230e      	movs	r3, #14
   27ac6:	18fb      	adds	r3, r7, r3
   27ac8:	210e      	movs	r1, #14
   27aca:	1879      	adds	r1, r7, r1
   27acc:	8809      	ldrh	r1, [r1, #0]
   27ace:	400a      	ands	r2, r1
   27ad0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   27ad2:	693b      	ldr	r3, [r7, #16]
   27ad4:	7a1b      	ldrb	r3, [r3, #8]
   27ad6:	b2da      	uxtb	r2, r3
   27ad8:	230c      	movs	r3, #12
   27ada:	18fb      	adds	r3, r7, r3
   27adc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   27ade:	693b      	ldr	r3, [r7, #16]
   27ae0:	79db      	ldrb	r3, [r3, #7]
   27ae2:	b2db      	uxtb	r3, r3
   27ae4:	b29a      	uxth	r2, r3
   27ae6:	230c      	movs	r3, #12
   27ae8:	18fb      	adds	r3, r7, r3
   27aea:	210c      	movs	r1, #12
   27aec:	1879      	adds	r1, r7, r1
   27aee:	8809      	ldrh	r1, [r1, #0]
   27af0:	400a      	ands	r2, r1
   27af2:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   27af4:	230c      	movs	r3, #12
   27af6:	18fb      	adds	r3, r7, r3
   27af8:	881b      	ldrh	r3, [r3, #0]
   27afa:	2280      	movs	r2, #128	; 0x80
   27afc:	4013      	ands	r3, r2
   27afe:	d00c      	beq.n	27b1a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   27b00:	230e      	movs	r3, #14
   27b02:	18fb      	adds	r3, r7, r3
   27b04:	881b      	ldrh	r3, [r3, #0]
   27b06:	2202      	movs	r2, #2
   27b08:	4013      	ands	r3, r2
   27b0a:	d002      	beq.n	27b12 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   27b0c:	697b      	ldr	r3, [r7, #20]
   27b0e:	68db      	ldr	r3, [r3, #12]
   27b10:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   27b12:	693b      	ldr	r3, [r7, #16]
   27b14:	2280      	movs	r2, #128	; 0x80
   27b16:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   27b18:	e011      	b.n	27b3e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   27b1a:	230c      	movs	r3, #12
   27b1c:	18fb      	adds	r3, r7, r3
   27b1e:	881b      	ldrh	r3, [r3, #0]
   27b20:	2201      	movs	r2, #1
   27b22:	4013      	ands	r3, r2
   27b24:	d00b      	beq.n	27b3e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   27b26:	230e      	movs	r3, #14
   27b28:	18fb      	adds	r3, r7, r3
   27b2a:	881b      	ldrh	r3, [r3, #0]
   27b2c:	2201      	movs	r2, #1
   27b2e:	4013      	ands	r3, r2
   27b30:	d002      	beq.n	27b38 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   27b32:	697b      	ldr	r3, [r7, #20]
   27b34:	689b      	ldr	r3, [r3, #8]
   27b36:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   27b38:	693b      	ldr	r3, [r7, #16]
   27b3a:	2201      	movs	r2, #1
   27b3c:	721a      	strb	r2, [r3, #8]
}
   27b3e:	46c0      	nop			; (mov r8, r8)
   27b40:	46bd      	mov	sp, r7
   27b42:	b006      	add	sp, #24
   27b44:	bd80      	pop	{r7, pc}
   27b46:	46c0      	nop			; (mov r8, r8)
   27b48:	20005c98 	.word	0x20005c98

00027b4c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   27b4c:	b580      	push	{r7, lr}
   27b4e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   27b50:	2000      	movs	r0, #0
   27b52:	4b02      	ldr	r3, [pc, #8]	; (27b5c <RTC_Handler+0x10>)
   27b54:	4798      	blx	r3
}
   27b56:	46c0      	nop			; (mov r8, r8)
   27b58:	46bd      	mov	sp, r7
   27b5a:	bd80      	pop	{r7, pc}
   27b5c:	00027a9d 	.word	0x00027a9d

00027b60 <system_gclk_chan_get_config_defaults>:
{
   27b60:	b580      	push	{r7, lr}
   27b62:	b082      	sub	sp, #8
   27b64:	af00      	add	r7, sp, #0
   27b66:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27b68:	687b      	ldr	r3, [r7, #4]
   27b6a:	2200      	movs	r2, #0
   27b6c:	701a      	strb	r2, [r3, #0]
}
   27b6e:	46c0      	nop			; (mov r8, r8)
   27b70:	46bd      	mov	sp, r7
   27b72:	b002      	add	sp, #8
   27b74:	bd80      	pop	{r7, pc}

00027b76 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   27b76:	b5f0      	push	{r4, r5, r6, r7, lr}
   27b78:	b08d      	sub	sp, #52	; 0x34
   27b7a:	af00      	add	r7, sp, #0
   27b7c:	60b8      	str	r0, [r7, #8]
   27b7e:	60f9      	str	r1, [r7, #12]
   27b80:	603a      	str	r2, [r7, #0]
   27b82:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   27b84:	2300      	movs	r3, #0
   27b86:	2400      	movs	r4, #0
   27b88:	623b      	str	r3, [r7, #32]
   27b8a:	627c      	str	r4, [r7, #36]	; 0x24
   27b8c:	2300      	movs	r3, #0
   27b8e:	2400      	movs	r4, #0
   27b90:	61bb      	str	r3, [r7, #24]
   27b92:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   27b94:	233f      	movs	r3, #63	; 0x3f
   27b96:	62fb      	str	r3, [r7, #44]	; 0x2c
   27b98:	e053      	b.n	27c42 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   27b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27b9c:	3b20      	subs	r3, #32
   27b9e:	2b00      	cmp	r3, #0
   27ba0:	db04      	blt.n	27bac <long_division+0x36>
   27ba2:	2201      	movs	r2, #1
   27ba4:	409a      	lsls	r2, r3
   27ba6:	0013      	movs	r3, r2
   27ba8:	617b      	str	r3, [r7, #20]
   27baa:	e00b      	b.n	27bc4 <long_division+0x4e>
   27bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27bae:	2220      	movs	r2, #32
   27bb0:	1ad3      	subs	r3, r2, r3
   27bb2:	2201      	movs	r2, #1
   27bb4:	40da      	lsrs	r2, r3
   27bb6:	0013      	movs	r3, r2
   27bb8:	2100      	movs	r1, #0
   27bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   27bbc:	4091      	lsls	r1, r2
   27bbe:	000a      	movs	r2, r1
   27bc0:	4313      	orrs	r3, r2
   27bc2:	617b      	str	r3, [r7, #20]
   27bc4:	2201      	movs	r2, #1
   27bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27bc8:	409a      	lsls	r2, r3
   27bca:	0013      	movs	r3, r2
   27bcc:	613b      	str	r3, [r7, #16]

		r = r << 1;
   27bce:	69bb      	ldr	r3, [r7, #24]
   27bd0:	69fc      	ldr	r4, [r7, #28]
   27bd2:	18db      	adds	r3, r3, r3
   27bd4:	4164      	adcs	r4, r4
   27bd6:	61bb      	str	r3, [r7, #24]
   27bd8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   27bda:	68bb      	ldr	r3, [r7, #8]
   27bdc:	693a      	ldr	r2, [r7, #16]
   27bde:	401a      	ands	r2, r3
   27be0:	0015      	movs	r5, r2
   27be2:	68fb      	ldr	r3, [r7, #12]
   27be4:	697a      	ldr	r2, [r7, #20]
   27be6:	401a      	ands	r2, r3
   27be8:	0016      	movs	r6, r2
   27bea:	002b      	movs	r3, r5
   27bec:	4333      	orrs	r3, r6
   27bee:	d007      	beq.n	27c00 <long_division+0x8a>
			r |= 0x01;
   27bf0:	69bb      	ldr	r3, [r7, #24]
   27bf2:	2201      	movs	r2, #1
   27bf4:	4313      	orrs	r3, r2
   27bf6:	61bb      	str	r3, [r7, #24]
   27bf8:	69fb      	ldr	r3, [r7, #28]
   27bfa:	2200      	movs	r2, #0
   27bfc:	4313      	orrs	r3, r2
   27bfe:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   27c00:	687a      	ldr	r2, [r7, #4]
   27c02:	69fb      	ldr	r3, [r7, #28]
   27c04:	429a      	cmp	r2, r3
   27c06:	d819      	bhi.n	27c3c <long_division+0xc6>
   27c08:	687a      	ldr	r2, [r7, #4]
   27c0a:	69fb      	ldr	r3, [r7, #28]
   27c0c:	429a      	cmp	r2, r3
   27c0e:	d103      	bne.n	27c18 <long_division+0xa2>
   27c10:	683a      	ldr	r2, [r7, #0]
   27c12:	69bb      	ldr	r3, [r7, #24]
   27c14:	429a      	cmp	r2, r3
   27c16:	d811      	bhi.n	27c3c <long_division+0xc6>
			r = r - d;
   27c18:	69b9      	ldr	r1, [r7, #24]
   27c1a:	69fa      	ldr	r2, [r7, #28]
   27c1c:	683b      	ldr	r3, [r7, #0]
   27c1e:	687c      	ldr	r4, [r7, #4]
   27c20:	1ac9      	subs	r1, r1, r3
   27c22:	41a2      	sbcs	r2, r4
   27c24:	000b      	movs	r3, r1
   27c26:	0014      	movs	r4, r2
   27c28:	61bb      	str	r3, [r7, #24]
   27c2a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   27c2c:	6a3a      	ldr	r2, [r7, #32]
   27c2e:	693b      	ldr	r3, [r7, #16]
   27c30:	4313      	orrs	r3, r2
   27c32:	623b      	str	r3, [r7, #32]
   27c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27c36:	697b      	ldr	r3, [r7, #20]
   27c38:	4313      	orrs	r3, r2
   27c3a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   27c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27c3e:	3b01      	subs	r3, #1
   27c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   27c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27c44:	2b00      	cmp	r3, #0
   27c46:	daa8      	bge.n	27b9a <long_division+0x24>
		}
	}

	return q;
   27c48:	6a3b      	ldr	r3, [r7, #32]
   27c4a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   27c4c:	0018      	movs	r0, r3
   27c4e:	0021      	movs	r1, r4
   27c50:	46bd      	mov	sp, r7
   27c52:	b00d      	add	sp, #52	; 0x34
   27c54:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027c56 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   27c56:	b580      	push	{r7, lr}
   27c58:	b086      	sub	sp, #24
   27c5a:	af00      	add	r7, sp, #0
   27c5c:	60f8      	str	r0, [r7, #12]
   27c5e:	60b9      	str	r1, [r7, #8]
   27c60:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   27c62:	2316      	movs	r3, #22
   27c64:	18fb      	adds	r3, r7, r3
   27c66:	2200      	movs	r2, #0
   27c68:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   27c6a:	68bb      	ldr	r3, [r7, #8]
   27c6c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   27c6e:	68bb      	ldr	r3, [r7, #8]
   27c70:	085a      	lsrs	r2, r3, #1
   27c72:	68fb      	ldr	r3, [r7, #12]
   27c74:	429a      	cmp	r2, r3
   27c76:	d201      	bcs.n	27c7c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27c78:	2340      	movs	r3, #64	; 0x40
   27c7a:	e026      	b.n	27cca <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   27c7c:	68bb      	ldr	r3, [r7, #8]
   27c7e:	085b      	lsrs	r3, r3, #1
   27c80:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   27c82:	e00a      	b.n	27c9a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   27c84:	693a      	ldr	r2, [r7, #16]
   27c86:	68fb      	ldr	r3, [r7, #12]
   27c88:	1ad3      	subs	r3, r2, r3
   27c8a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   27c8c:	2316      	movs	r3, #22
   27c8e:	18fb      	adds	r3, r7, r3
   27c90:	881a      	ldrh	r2, [r3, #0]
   27c92:	2316      	movs	r3, #22
   27c94:	18fb      	adds	r3, r7, r3
   27c96:	3201      	adds	r2, #1
   27c98:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   27c9a:	693a      	ldr	r2, [r7, #16]
   27c9c:	68fb      	ldr	r3, [r7, #12]
   27c9e:	429a      	cmp	r2, r3
   27ca0:	d2f0      	bcs.n	27c84 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   27ca2:	2316      	movs	r3, #22
   27ca4:	18fb      	adds	r3, r7, r3
   27ca6:	2216      	movs	r2, #22
   27ca8:	18ba      	adds	r2, r7, r2
   27caa:	8812      	ldrh	r2, [r2, #0]
   27cac:	3a01      	subs	r2, #1
   27cae:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   27cb0:	2316      	movs	r3, #22
   27cb2:	18fb      	adds	r3, r7, r3
   27cb4:	881b      	ldrh	r3, [r3, #0]
   27cb6:	2bff      	cmp	r3, #255	; 0xff
   27cb8:	d901      	bls.n	27cbe <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27cba:	2340      	movs	r3, #64	; 0x40
   27cbc:	e005      	b.n	27cca <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   27cbe:	687b      	ldr	r3, [r7, #4]
   27cc0:	2216      	movs	r2, #22
   27cc2:	18ba      	adds	r2, r7, r2
   27cc4:	8812      	ldrh	r2, [r2, #0]
   27cc6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   27cc8:	2300      	movs	r3, #0
	}
}
   27cca:	0018      	movs	r0, r3
   27ccc:	46bd      	mov	sp, r7
   27cce:	b006      	add	sp, #24
   27cd0:	bd80      	pop	{r7, pc}
	...

00027cd4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   27cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   27cd6:	b0a1      	sub	sp, #132	; 0x84
   27cd8:	af00      	add	r7, sp, #0
   27cda:	64f8      	str	r0, [r7, #76]	; 0x4c
   27cdc:	64b9      	str	r1, [r7, #72]	; 0x48
   27cde:	647a      	str	r2, [r7, #68]	; 0x44
   27ce0:	2243      	movs	r2, #67	; 0x43
   27ce2:	18ba      	adds	r2, r7, r2
   27ce4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   27ce6:	2300      	movs	r3, #0
   27ce8:	2400      	movs	r4, #0
   27cea:	673b      	str	r3, [r7, #112]	; 0x70
   27cec:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   27cee:	2300      	movs	r3, #0
   27cf0:	2400      	movs	r4, #0
   27cf2:	66bb      	str	r3, [r7, #104]	; 0x68
   27cf4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   27cf6:	2300      	movs	r3, #0
   27cf8:	2400      	movs	r4, #0
   27cfa:	67bb      	str	r3, [r7, #120]	; 0x78
   27cfc:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   27cfe:	2300      	movs	r3, #0
   27d00:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   27d02:	2358      	movs	r3, #88	; 0x58
   27d04:	2240      	movs	r2, #64	; 0x40
   27d06:	4694      	mov	ip, r2
   27d08:	44bc      	add	ip, r7
   27d0a:	4463      	add	r3, ip
   27d0c:	781a      	ldrb	r2, [r3, #0]
   27d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27d10:	435a      	muls	r2, r3
   27d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27d14:	429a      	cmp	r2, r3
   27d16:	d901      	bls.n	27d1c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27d18:	2340      	movs	r3, #64	; 0x40
   27d1a:	e0b3      	b.n	27e84 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   27d1c:	2343      	movs	r3, #67	; 0x43
   27d1e:	18fb      	adds	r3, r7, r3
   27d20:	781b      	ldrb	r3, [r3, #0]
   27d22:	2b00      	cmp	r3, #0
   27d24:	d13d      	bne.n	27da2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   27d26:	2358      	movs	r3, #88	; 0x58
   27d28:	2240      	movs	r2, #64	; 0x40
   27d2a:	4694      	mov	ip, r2
   27d2c:	44bc      	add	ip, r7
   27d2e:	4463      	add	r3, ip
   27d30:	781b      	ldrb	r3, [r3, #0]
   27d32:	b2db      	uxtb	r3, r3
   27d34:	613b      	str	r3, [r7, #16]
   27d36:	2300      	movs	r3, #0
   27d38:	617b      	str	r3, [r7, #20]
   27d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27d3c:	60bb      	str	r3, [r7, #8]
   27d3e:	2300      	movs	r3, #0
   27d40:	60fb      	str	r3, [r7, #12]
   27d42:	4c52      	ldr	r4, [pc, #328]	; (27e8c <_sercom_get_async_baud_val+0x1b8>)
   27d44:	68ba      	ldr	r2, [r7, #8]
   27d46:	68fb      	ldr	r3, [r7, #12]
   27d48:	6938      	ldr	r0, [r7, #16]
   27d4a:	6979      	ldr	r1, [r7, #20]
   27d4c:	47a0      	blx	r4
   27d4e:	0003      	movs	r3, r0
   27d50:	000c      	movs	r4, r1
   27d52:	001b      	movs	r3, r3
   27d54:	65fb      	str	r3, [r7, #92]	; 0x5c
   27d56:	2300      	movs	r3, #0
   27d58:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   27d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27d5c:	603b      	str	r3, [r7, #0]
   27d5e:	2300      	movs	r3, #0
   27d60:	607b      	str	r3, [r7, #4]
   27d62:	6db8      	ldr	r0, [r7, #88]	; 0x58
   27d64:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   27d66:	683a      	ldr	r2, [r7, #0]
   27d68:	687b      	ldr	r3, [r7, #4]
   27d6a:	4c49      	ldr	r4, [pc, #292]	; (27e90 <_sercom_get_async_baud_val+0x1bc>)
   27d6c:	47a0      	blx	r4
   27d6e:	0003      	movs	r3, r0
   27d70:	000c      	movs	r4, r1
   27d72:	673b      	str	r3, [r7, #112]	; 0x70
   27d74:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   27d76:	2100      	movs	r1, #0
   27d78:	2201      	movs	r2, #1
   27d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   27d7c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   27d7e:	1ac9      	subs	r1, r1, r3
   27d80:	41a2      	sbcs	r2, r4
   27d82:	000b      	movs	r3, r1
   27d84:	0014      	movs	r4, r2
   27d86:	66bb      	str	r3, [r7, #104]	; 0x68
   27d88:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   27d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27d8c:	0c1b      	lsrs	r3, r3, #16
   27d8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   27d90:	0416      	lsls	r6, r2, #16
   27d92:	431e      	orrs	r6, r3
   27d94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27d96:	041d      	lsls	r5, r3, #16
   27d98:	0033      	movs	r3, r6
   27d9a:	67bb      	str	r3, [r7, #120]	; 0x78
   27d9c:	2300      	movs	r3, #0
   27d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   27da0:	e06a      	b.n	27e78 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   27da2:	2343      	movs	r3, #67	; 0x43
   27da4:	18fb      	adds	r3, r7, r3
   27da6:	781b      	ldrb	r3, [r3, #0]
   27da8:	2b01      	cmp	r3, #1
   27daa:	d165      	bne.n	27e78 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   27dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27dae:	633b      	str	r3, [r7, #48]	; 0x30
   27db0:	2300      	movs	r3, #0
   27db2:	637b      	str	r3, [r7, #52]	; 0x34
   27db4:	2358      	movs	r3, #88	; 0x58
   27db6:	2240      	movs	r2, #64	; 0x40
   27db8:	4694      	mov	ip, r2
   27dba:	44bc      	add	ip, r7
   27dbc:	4463      	add	r3, ip
   27dbe:	781b      	ldrb	r3, [r3, #0]
   27dc0:	b2db      	uxtb	r3, r3
   27dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   27dc4:	2300      	movs	r3, #0
   27dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   27dc8:	4c30      	ldr	r4, [pc, #192]	; (27e8c <_sercom_get_async_baud_val+0x1b8>)
   27dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   27dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27dce:	6b38      	ldr	r0, [r7, #48]	; 0x30
   27dd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   27dd2:	47a0      	blx	r4
   27dd4:	0003      	movs	r3, r0
   27dd6:	000c      	movs	r4, r1
   27dd8:	65bb      	str	r3, [r7, #88]	; 0x58
   27dda:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   27ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27dde:	623b      	str	r3, [r7, #32]
   27de0:	2300      	movs	r3, #0
   27de2:	627b      	str	r3, [r7, #36]	; 0x24
   27de4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27de6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27de8:	001a      	movs	r2, r3
   27dea:	0023      	movs	r3, r4
   27dec:	6a38      	ldr	r0, [r7, #32]
   27dee:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27df0:	4c27      	ldr	r4, [pc, #156]	; (27e90 <_sercom_get_async_baud_val+0x1bc>)
   27df2:	47a0      	blx	r4
   27df4:	0003      	movs	r3, r0
   27df6:	000c      	movs	r4, r1
   27df8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   27dfa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   27dfc:	2380      	movs	r3, #128	; 0x80
   27dfe:	019b      	lsls	r3, r3, #6
   27e00:	429a      	cmp	r2, r3
   27e02:	d901      	bls.n	27e08 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27e04:	2340      	movs	r3, #64	; 0x40
   27e06:	e03d      	b.n	27e84 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   27e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27e0a:	61bb      	str	r3, [r7, #24]
   27e0c:	2300      	movs	r3, #0
   27e0e:	61fb      	str	r3, [r7, #28]
   27e10:	69b9      	ldr	r1, [r7, #24]
   27e12:	69fa      	ldr	r2, [r7, #28]
   27e14:	000b      	movs	r3, r1
   27e16:	0f5b      	lsrs	r3, r3, #29
   27e18:	0010      	movs	r0, r2
   27e1a:	00c0      	lsls	r0, r0, #3
   27e1c:	63f8      	str	r0, [r7, #60]	; 0x3c
   27e1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   27e20:	4318      	orrs	r0, r3
   27e22:	63f8      	str	r0, [r7, #60]	; 0x3c
   27e24:	000b      	movs	r3, r1
   27e26:	00db      	lsls	r3, r3, #3
   27e28:	63bb      	str	r3, [r7, #56]	; 0x38
   27e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27e2c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27e2e:	001a      	movs	r2, r3
   27e30:	0023      	movs	r3, r4
   27e32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   27e34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   27e36:	4c16      	ldr	r4, [pc, #88]	; (27e90 <_sercom_get_async_baud_val+0x1bc>)
   27e38:	47a0      	blx	r4
   27e3a:	0003      	movs	r3, r0
   27e3c:	000c      	movs	r4, r1
   27e3e:	65bb      	str	r3, [r7, #88]	; 0x58
   27e40:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   27e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27e44:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27e46:	b2d9      	uxtb	r1, r3
   27e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   27e4a:	b2db      	uxtb	r3, r3
   27e4c:	00db      	lsls	r3, r3, #3
   27e4e:	b2da      	uxtb	r2, r3
   27e50:	2317      	movs	r3, #23
   27e52:	2040      	movs	r0, #64	; 0x40
   27e54:	4684      	mov	ip, r0
   27e56:	44bc      	add	ip, r7
   27e58:	4463      	add	r3, ip
   27e5a:	1a8a      	subs	r2, r1, r2
   27e5c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   27e5e:	2317      	movs	r3, #23
   27e60:	2240      	movs	r2, #64	; 0x40
   27e62:	4694      	mov	ip, r2
   27e64:	44bc      	add	ip, r7
   27e66:	4463      	add	r3, ip
   27e68:	781b      	ldrb	r3, [r3, #0]
   27e6a:	035b      	lsls	r3, r3, #13
   27e6c:	001a      	movs	r2, r3
   27e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   27e70:	4313      	orrs	r3, r2
   27e72:	67bb      	str	r3, [r7, #120]	; 0x78
   27e74:	2300      	movs	r3, #0
   27e76:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   27e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   27e7a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   27e7c:	b29a      	uxth	r2, r3
   27e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   27e80:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   27e82:	2300      	movs	r3, #0
}
   27e84:	0018      	movs	r0, r3
   27e86:	46bd      	mov	sp, r7
   27e88:	b021      	add	sp, #132	; 0x84
   27e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27e8c:	00033921 	.word	0x00033921
   27e90:	00027b77 	.word	0x00027b77

00027e94 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   27e94:	b580      	push	{r7, lr}
   27e96:	b084      	sub	sp, #16
   27e98:	af00      	add	r7, sp, #0
   27e9a:	0002      	movs	r2, r0
   27e9c:	1dfb      	adds	r3, r7, #7
   27e9e:	701a      	strb	r2, [r3, #0]
   27ea0:	1dbb      	adds	r3, r7, #6
   27ea2:	1c0a      	adds	r2, r1, #0
   27ea4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   27ea6:	4b1a      	ldr	r3, [pc, #104]	; (27f10 <sercom_set_gclk_generator+0x7c>)
   27ea8:	781b      	ldrb	r3, [r3, #0]
   27eaa:	2201      	movs	r2, #1
   27eac:	4053      	eors	r3, r2
   27eae:	b2db      	uxtb	r3, r3
   27eb0:	2b00      	cmp	r3, #0
   27eb2:	d103      	bne.n	27ebc <sercom_set_gclk_generator+0x28>
   27eb4:	1dbb      	adds	r3, r7, #6
   27eb6:	781b      	ldrb	r3, [r3, #0]
   27eb8:	2b00      	cmp	r3, #0
   27eba:	d01b      	beq.n	27ef4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27ebc:	230c      	movs	r3, #12
   27ebe:	18fb      	adds	r3, r7, r3
   27ec0:	0018      	movs	r0, r3
   27ec2:	4b14      	ldr	r3, [pc, #80]	; (27f14 <sercom_set_gclk_generator+0x80>)
   27ec4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   27ec6:	230c      	movs	r3, #12
   27ec8:	18fb      	adds	r3, r7, r3
   27eca:	1dfa      	adds	r2, r7, #7
   27ecc:	7812      	ldrb	r2, [r2, #0]
   27ece:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   27ed0:	230c      	movs	r3, #12
   27ed2:	18fb      	adds	r3, r7, r3
   27ed4:	0019      	movs	r1, r3
   27ed6:	2013      	movs	r0, #19
   27ed8:	4b0f      	ldr	r3, [pc, #60]	; (27f18 <sercom_set_gclk_generator+0x84>)
   27eda:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   27edc:	2013      	movs	r0, #19
   27ede:	4b0f      	ldr	r3, [pc, #60]	; (27f1c <sercom_set_gclk_generator+0x88>)
   27ee0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   27ee2:	4b0b      	ldr	r3, [pc, #44]	; (27f10 <sercom_set_gclk_generator+0x7c>)
   27ee4:	1dfa      	adds	r2, r7, #7
   27ee6:	7812      	ldrb	r2, [r2, #0]
   27ee8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   27eea:	4b09      	ldr	r3, [pc, #36]	; (27f10 <sercom_set_gclk_generator+0x7c>)
   27eec:	2201      	movs	r2, #1
   27eee:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   27ef0:	2300      	movs	r3, #0
   27ef2:	e008      	b.n	27f06 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   27ef4:	4b06      	ldr	r3, [pc, #24]	; (27f10 <sercom_set_gclk_generator+0x7c>)
   27ef6:	785b      	ldrb	r3, [r3, #1]
   27ef8:	1dfa      	adds	r2, r7, #7
   27efa:	7812      	ldrb	r2, [r2, #0]
   27efc:	429a      	cmp	r2, r3
   27efe:	d101      	bne.n	27f04 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   27f00:	2300      	movs	r3, #0
   27f02:	e000      	b.n	27f06 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   27f04:	231d      	movs	r3, #29
}
   27f06:	0018      	movs	r0, r3
   27f08:	46bd      	mov	sp, r7
   27f0a:	b004      	add	sp, #16
   27f0c:	bd80      	pop	{r7, pc}
   27f0e:	46c0      	nop			; (mov r8, r8)
   27f10:	200042c0 	.word	0x200042c0
   27f14:	00027b61 	.word	0x00027b61
   27f18:	0002a96d 	.word	0x0002a96d
   27f1c:	0002a9b1 	.word	0x0002a9b1

00027f20 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   27f20:	b580      	push	{r7, lr}
   27f22:	b082      	sub	sp, #8
   27f24:	af00      	add	r7, sp, #0
   27f26:	6078      	str	r0, [r7, #4]
   27f28:	000a      	movs	r2, r1
   27f2a:	1cfb      	adds	r3, r7, #3
   27f2c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   27f2e:	687b      	ldr	r3, [r7, #4]
   27f30:	4a4d      	ldr	r2, [pc, #308]	; (28068 <_sercom_get_default_pad+0x148>)
   27f32:	4293      	cmp	r3, r2
   27f34:	d03f      	beq.n	27fb6 <_sercom_get_default_pad+0x96>
   27f36:	4a4c      	ldr	r2, [pc, #304]	; (28068 <_sercom_get_default_pad+0x148>)
   27f38:	4293      	cmp	r3, r2
   27f3a:	d806      	bhi.n	27f4a <_sercom_get_default_pad+0x2a>
   27f3c:	4a4b      	ldr	r2, [pc, #300]	; (2806c <_sercom_get_default_pad+0x14c>)
   27f3e:	4293      	cmp	r3, r2
   27f40:	d00f      	beq.n	27f62 <_sercom_get_default_pad+0x42>
   27f42:	4a4b      	ldr	r2, [pc, #300]	; (28070 <_sercom_get_default_pad+0x150>)
   27f44:	4293      	cmp	r3, r2
   27f46:	d021      	beq.n	27f8c <_sercom_get_default_pad+0x6c>
   27f48:	e089      	b.n	2805e <_sercom_get_default_pad+0x13e>
   27f4a:	4a4a      	ldr	r2, [pc, #296]	; (28074 <_sercom_get_default_pad+0x154>)
   27f4c:	4293      	cmp	r3, r2
   27f4e:	d100      	bne.n	27f52 <_sercom_get_default_pad+0x32>
   27f50:	e05b      	b.n	2800a <_sercom_get_default_pad+0xea>
   27f52:	4a49      	ldr	r2, [pc, #292]	; (28078 <_sercom_get_default_pad+0x158>)
   27f54:	4293      	cmp	r3, r2
   27f56:	d100      	bne.n	27f5a <_sercom_get_default_pad+0x3a>
   27f58:	e06c      	b.n	28034 <_sercom_get_default_pad+0x114>
   27f5a:	4a48      	ldr	r2, [pc, #288]	; (2807c <_sercom_get_default_pad+0x15c>)
   27f5c:	4293      	cmp	r3, r2
   27f5e:	d03f      	beq.n	27fe0 <_sercom_get_default_pad+0xc0>
   27f60:	e07d      	b.n	2805e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   27f62:	1cfb      	adds	r3, r7, #3
   27f64:	781b      	ldrb	r3, [r3, #0]
   27f66:	2b01      	cmp	r3, #1
   27f68:	d00a      	beq.n	27f80 <_sercom_get_default_pad+0x60>
   27f6a:	dc02      	bgt.n	27f72 <_sercom_get_default_pad+0x52>
   27f6c:	2b00      	cmp	r3, #0
   27f6e:	d005      	beq.n	27f7c <_sercom_get_default_pad+0x5c>
   27f70:	e075      	b.n	2805e <_sercom_get_default_pad+0x13e>
   27f72:	2b02      	cmp	r3, #2
   27f74:	d006      	beq.n	27f84 <_sercom_get_default_pad+0x64>
   27f76:	2b03      	cmp	r3, #3
   27f78:	d006      	beq.n	27f88 <_sercom_get_default_pad+0x68>
   27f7a:	e070      	b.n	2805e <_sercom_get_default_pad+0x13e>
   27f7c:	4b40      	ldr	r3, [pc, #256]	; (28080 <_sercom_get_default_pad+0x160>)
   27f7e:	e06f      	b.n	28060 <_sercom_get_default_pad+0x140>
   27f80:	4b40      	ldr	r3, [pc, #256]	; (28084 <_sercom_get_default_pad+0x164>)
   27f82:	e06d      	b.n	28060 <_sercom_get_default_pad+0x140>
   27f84:	4b40      	ldr	r3, [pc, #256]	; (28088 <_sercom_get_default_pad+0x168>)
   27f86:	e06b      	b.n	28060 <_sercom_get_default_pad+0x140>
   27f88:	4b40      	ldr	r3, [pc, #256]	; (2808c <_sercom_get_default_pad+0x16c>)
   27f8a:	e069      	b.n	28060 <_sercom_get_default_pad+0x140>
   27f8c:	1cfb      	adds	r3, r7, #3
   27f8e:	781b      	ldrb	r3, [r3, #0]
   27f90:	2b01      	cmp	r3, #1
   27f92:	d00a      	beq.n	27faa <_sercom_get_default_pad+0x8a>
   27f94:	dc02      	bgt.n	27f9c <_sercom_get_default_pad+0x7c>
   27f96:	2b00      	cmp	r3, #0
   27f98:	d005      	beq.n	27fa6 <_sercom_get_default_pad+0x86>
   27f9a:	e060      	b.n	2805e <_sercom_get_default_pad+0x13e>
   27f9c:	2b02      	cmp	r3, #2
   27f9e:	d006      	beq.n	27fae <_sercom_get_default_pad+0x8e>
   27fa0:	2b03      	cmp	r3, #3
   27fa2:	d006      	beq.n	27fb2 <_sercom_get_default_pad+0x92>
   27fa4:	e05b      	b.n	2805e <_sercom_get_default_pad+0x13e>
   27fa6:	2303      	movs	r3, #3
   27fa8:	e05a      	b.n	28060 <_sercom_get_default_pad+0x140>
   27faa:	4b39      	ldr	r3, [pc, #228]	; (28090 <_sercom_get_default_pad+0x170>)
   27fac:	e058      	b.n	28060 <_sercom_get_default_pad+0x140>
   27fae:	4b39      	ldr	r3, [pc, #228]	; (28094 <_sercom_get_default_pad+0x174>)
   27fb0:	e056      	b.n	28060 <_sercom_get_default_pad+0x140>
   27fb2:	4b39      	ldr	r3, [pc, #228]	; (28098 <_sercom_get_default_pad+0x178>)
   27fb4:	e054      	b.n	28060 <_sercom_get_default_pad+0x140>
   27fb6:	1cfb      	adds	r3, r7, #3
   27fb8:	781b      	ldrb	r3, [r3, #0]
   27fba:	2b01      	cmp	r3, #1
   27fbc:	d00a      	beq.n	27fd4 <_sercom_get_default_pad+0xb4>
   27fbe:	dc02      	bgt.n	27fc6 <_sercom_get_default_pad+0xa6>
   27fc0:	2b00      	cmp	r3, #0
   27fc2:	d005      	beq.n	27fd0 <_sercom_get_default_pad+0xb0>
   27fc4:	e04b      	b.n	2805e <_sercom_get_default_pad+0x13e>
   27fc6:	2b02      	cmp	r3, #2
   27fc8:	d006      	beq.n	27fd8 <_sercom_get_default_pad+0xb8>
   27fca:	2b03      	cmp	r3, #3
   27fcc:	d006      	beq.n	27fdc <_sercom_get_default_pad+0xbc>
   27fce:	e046      	b.n	2805e <_sercom_get_default_pad+0x13e>
   27fd0:	4b32      	ldr	r3, [pc, #200]	; (2809c <_sercom_get_default_pad+0x17c>)
   27fd2:	e045      	b.n	28060 <_sercom_get_default_pad+0x140>
   27fd4:	4b32      	ldr	r3, [pc, #200]	; (280a0 <_sercom_get_default_pad+0x180>)
   27fd6:	e043      	b.n	28060 <_sercom_get_default_pad+0x140>
   27fd8:	4b32      	ldr	r3, [pc, #200]	; (280a4 <_sercom_get_default_pad+0x184>)
   27fda:	e041      	b.n	28060 <_sercom_get_default_pad+0x140>
   27fdc:	4b32      	ldr	r3, [pc, #200]	; (280a8 <_sercom_get_default_pad+0x188>)
   27fde:	e03f      	b.n	28060 <_sercom_get_default_pad+0x140>
   27fe0:	1cfb      	adds	r3, r7, #3
   27fe2:	781b      	ldrb	r3, [r3, #0]
   27fe4:	2b01      	cmp	r3, #1
   27fe6:	d00a      	beq.n	27ffe <_sercom_get_default_pad+0xde>
   27fe8:	dc02      	bgt.n	27ff0 <_sercom_get_default_pad+0xd0>
   27fea:	2b00      	cmp	r3, #0
   27fec:	d005      	beq.n	27ffa <_sercom_get_default_pad+0xda>
   27fee:	e036      	b.n	2805e <_sercom_get_default_pad+0x13e>
   27ff0:	2b02      	cmp	r3, #2
   27ff2:	d006      	beq.n	28002 <_sercom_get_default_pad+0xe2>
   27ff4:	2b03      	cmp	r3, #3
   27ff6:	d006      	beq.n	28006 <_sercom_get_default_pad+0xe6>
   27ff8:	e031      	b.n	2805e <_sercom_get_default_pad+0x13e>
   27ffa:	4b2c      	ldr	r3, [pc, #176]	; (280ac <_sercom_get_default_pad+0x18c>)
   27ffc:	e030      	b.n	28060 <_sercom_get_default_pad+0x140>
   27ffe:	4b2c      	ldr	r3, [pc, #176]	; (280b0 <_sercom_get_default_pad+0x190>)
   28000:	e02e      	b.n	28060 <_sercom_get_default_pad+0x140>
   28002:	4b2c      	ldr	r3, [pc, #176]	; (280b4 <_sercom_get_default_pad+0x194>)
   28004:	e02c      	b.n	28060 <_sercom_get_default_pad+0x140>
   28006:	4b2c      	ldr	r3, [pc, #176]	; (280b8 <_sercom_get_default_pad+0x198>)
   28008:	e02a      	b.n	28060 <_sercom_get_default_pad+0x140>
   2800a:	1cfb      	adds	r3, r7, #3
   2800c:	781b      	ldrb	r3, [r3, #0]
   2800e:	2b01      	cmp	r3, #1
   28010:	d00a      	beq.n	28028 <_sercom_get_default_pad+0x108>
   28012:	dc02      	bgt.n	2801a <_sercom_get_default_pad+0xfa>
   28014:	2b00      	cmp	r3, #0
   28016:	d005      	beq.n	28024 <_sercom_get_default_pad+0x104>
   28018:	e021      	b.n	2805e <_sercom_get_default_pad+0x13e>
   2801a:	2b02      	cmp	r3, #2
   2801c:	d006      	beq.n	2802c <_sercom_get_default_pad+0x10c>
   2801e:	2b03      	cmp	r3, #3
   28020:	d006      	beq.n	28030 <_sercom_get_default_pad+0x110>
   28022:	e01c      	b.n	2805e <_sercom_get_default_pad+0x13e>
   28024:	4b25      	ldr	r3, [pc, #148]	; (280bc <_sercom_get_default_pad+0x19c>)
   28026:	e01b      	b.n	28060 <_sercom_get_default_pad+0x140>
   28028:	4b25      	ldr	r3, [pc, #148]	; (280c0 <_sercom_get_default_pad+0x1a0>)
   2802a:	e019      	b.n	28060 <_sercom_get_default_pad+0x140>
   2802c:	4b25      	ldr	r3, [pc, #148]	; (280c4 <_sercom_get_default_pad+0x1a4>)
   2802e:	e017      	b.n	28060 <_sercom_get_default_pad+0x140>
   28030:	4b25      	ldr	r3, [pc, #148]	; (280c8 <_sercom_get_default_pad+0x1a8>)
   28032:	e015      	b.n	28060 <_sercom_get_default_pad+0x140>
   28034:	1cfb      	adds	r3, r7, #3
   28036:	781b      	ldrb	r3, [r3, #0]
   28038:	2b01      	cmp	r3, #1
   2803a:	d00a      	beq.n	28052 <_sercom_get_default_pad+0x132>
   2803c:	dc02      	bgt.n	28044 <_sercom_get_default_pad+0x124>
   2803e:	2b00      	cmp	r3, #0
   28040:	d005      	beq.n	2804e <_sercom_get_default_pad+0x12e>
   28042:	e00c      	b.n	2805e <_sercom_get_default_pad+0x13e>
   28044:	2b02      	cmp	r3, #2
   28046:	d006      	beq.n	28056 <_sercom_get_default_pad+0x136>
   28048:	2b03      	cmp	r3, #3
   2804a:	d006      	beq.n	2805a <_sercom_get_default_pad+0x13a>
   2804c:	e007      	b.n	2805e <_sercom_get_default_pad+0x13e>
   2804e:	4b1f      	ldr	r3, [pc, #124]	; (280cc <_sercom_get_default_pad+0x1ac>)
   28050:	e006      	b.n	28060 <_sercom_get_default_pad+0x140>
   28052:	4b1f      	ldr	r3, [pc, #124]	; (280d0 <_sercom_get_default_pad+0x1b0>)
   28054:	e004      	b.n	28060 <_sercom_get_default_pad+0x140>
   28056:	4b1f      	ldr	r3, [pc, #124]	; (280d4 <_sercom_get_default_pad+0x1b4>)
   28058:	e002      	b.n	28060 <_sercom_get_default_pad+0x140>
   2805a:	4b1f      	ldr	r3, [pc, #124]	; (280d8 <_sercom_get_default_pad+0x1b8>)
   2805c:	e000      	b.n	28060 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   2805e:	2300      	movs	r3, #0
}
   28060:	0018      	movs	r0, r3
   28062:	46bd      	mov	sp, r7
   28064:	b002      	add	sp, #8
   28066:	bd80      	pop	{r7, pc}
   28068:	42001000 	.word	0x42001000
   2806c:	42000800 	.word	0x42000800
   28070:	42000c00 	.word	0x42000c00
   28074:	42001800 	.word	0x42001800
   28078:	42001c00 	.word	0x42001c00
   2807c:	42001400 	.word	0x42001400
   28080:	00040003 	.word	0x00040003
   28084:	00050003 	.word	0x00050003
   28088:	00060003 	.word	0x00060003
   2808c:	00070003 	.word	0x00070003
   28090:	00010003 	.word	0x00010003
   28094:	001e0003 	.word	0x001e0003
   28098:	001f0003 	.word	0x001f0003
   2809c:	00080003 	.word	0x00080003
   280a0:	00090003 	.word	0x00090003
   280a4:	000a0003 	.word	0x000a0003
   280a8:	000b0003 	.word	0x000b0003
   280ac:	00100003 	.word	0x00100003
   280b0:	00110003 	.word	0x00110003
   280b4:	00120003 	.word	0x00120003
   280b8:	00130003 	.word	0x00130003
   280bc:	000c0003 	.word	0x000c0003
   280c0:	000d0003 	.word	0x000d0003
   280c4:	000e0003 	.word	0x000e0003
   280c8:	000f0003 	.word	0x000f0003
   280cc:	00160003 	.word	0x00160003
   280d0:	00170003 	.word	0x00170003
   280d4:	00180003 	.word	0x00180003
   280d8:	00190003 	.word	0x00190003

000280dc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   280dc:	b590      	push	{r4, r7, lr}
   280de:	b08b      	sub	sp, #44	; 0x2c
   280e0:	af00      	add	r7, sp, #0
   280e2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   280e4:	230c      	movs	r3, #12
   280e6:	18fb      	adds	r3, r7, r3
   280e8:	4a0f      	ldr	r2, [pc, #60]	; (28128 <_sercom_get_sercom_inst_index+0x4c>)
   280ea:	ca13      	ldmia	r2!, {r0, r1, r4}
   280ec:	c313      	stmia	r3!, {r0, r1, r4}
   280ee:	ca13      	ldmia	r2!, {r0, r1, r4}
   280f0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   280f2:	2300      	movs	r3, #0
   280f4:	627b      	str	r3, [r7, #36]	; 0x24
   280f6:	e00e      	b.n	28116 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   280f8:	230c      	movs	r3, #12
   280fa:	18fb      	adds	r3, r7, r3
   280fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   280fe:	0092      	lsls	r2, r2, #2
   28100:	58d3      	ldr	r3, [r2, r3]
   28102:	001a      	movs	r2, r3
   28104:	687b      	ldr	r3, [r7, #4]
   28106:	429a      	cmp	r2, r3
   28108:	d102      	bne.n	28110 <_sercom_get_sercom_inst_index+0x34>
			return i;
   2810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2810c:	b2db      	uxtb	r3, r3
   2810e:	e006      	b.n	2811e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   28110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28112:	3301      	adds	r3, #1
   28114:	627b      	str	r3, [r7, #36]	; 0x24
   28116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28118:	2b05      	cmp	r3, #5
   2811a:	d9ed      	bls.n	280f8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   2811c:	2300      	movs	r3, #0
}
   2811e:	0018      	movs	r0, r3
   28120:	46bd      	mov	sp, r7
   28122:	b00b      	add	sp, #44	; 0x2c
   28124:	bd90      	pop	{r4, r7, pc}
   28126:	46c0      	nop			; (mov r8, r8)
   28128:	0003a474 	.word	0x0003a474

0002812c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2812c:	b580      	push	{r7, lr}
   2812e:	b082      	sub	sp, #8
   28130:	af00      	add	r7, sp, #0
   28132:	0002      	movs	r2, r0
   28134:	1dfb      	adds	r3, r7, #7
   28136:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   28138:	46c0      	nop			; (mov r8, r8)
   2813a:	46bd      	mov	sp, r7
   2813c:	b002      	add	sp, #8
   2813e:	bd80      	pop	{r7, pc}

00028140 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   28140:	b580      	push	{r7, lr}
   28142:	b084      	sub	sp, #16
   28144:	af00      	add	r7, sp, #0
   28146:	0002      	movs	r2, r0
   28148:	6039      	str	r1, [r7, #0]
   2814a:	1dfb      	adds	r3, r7, #7
   2814c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2814e:	4b13      	ldr	r3, [pc, #76]	; (2819c <_sercom_set_handler+0x5c>)
   28150:	781b      	ldrb	r3, [r3, #0]
   28152:	2201      	movs	r2, #1
   28154:	4053      	eors	r3, r2
   28156:	b2db      	uxtb	r3, r3
   28158:	2b00      	cmp	r3, #0
   2815a:	d015      	beq.n	28188 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2815c:	2300      	movs	r3, #0
   2815e:	60fb      	str	r3, [r7, #12]
   28160:	e00c      	b.n	2817c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   28162:	4b0f      	ldr	r3, [pc, #60]	; (281a0 <_sercom_set_handler+0x60>)
   28164:	68fa      	ldr	r2, [r7, #12]
   28166:	0092      	lsls	r2, r2, #2
   28168:	490e      	ldr	r1, [pc, #56]	; (281a4 <_sercom_set_handler+0x64>)
   2816a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2816c:	4b0e      	ldr	r3, [pc, #56]	; (281a8 <_sercom_set_handler+0x68>)
   2816e:	68fa      	ldr	r2, [r7, #12]
   28170:	0092      	lsls	r2, r2, #2
   28172:	2100      	movs	r1, #0
   28174:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   28176:	68fb      	ldr	r3, [r7, #12]
   28178:	3301      	adds	r3, #1
   2817a:	60fb      	str	r3, [r7, #12]
   2817c:	68fb      	ldr	r3, [r7, #12]
   2817e:	2b05      	cmp	r3, #5
   28180:	d9ef      	bls.n	28162 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   28182:	4b06      	ldr	r3, [pc, #24]	; (2819c <_sercom_set_handler+0x5c>)
   28184:	2201      	movs	r2, #1
   28186:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   28188:	1dfb      	adds	r3, r7, #7
   2818a:	781a      	ldrb	r2, [r3, #0]
   2818c:	4b04      	ldr	r3, [pc, #16]	; (281a0 <_sercom_set_handler+0x60>)
   2818e:	0092      	lsls	r2, r2, #2
   28190:	6839      	ldr	r1, [r7, #0]
   28192:	50d1      	str	r1, [r2, r3]
}
   28194:	46c0      	nop			; (mov r8, r8)
   28196:	46bd      	mov	sp, r7
   28198:	b004      	add	sp, #16
   2819a:	bd80      	pop	{r7, pc}
   2819c:	200042c2 	.word	0x200042c2
   281a0:	200042c4 	.word	0x200042c4
   281a4:	0002812d 	.word	0x0002812d
   281a8:	20005c9c 	.word	0x20005c9c

000281ac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   281ac:	b590      	push	{r4, r7, lr}
   281ae:	b085      	sub	sp, #20
   281b0:	af00      	add	r7, sp, #0
   281b2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   281b4:	2308      	movs	r3, #8
   281b6:	18fb      	adds	r3, r7, r3
   281b8:	4a0b      	ldr	r2, [pc, #44]	; (281e8 <_sercom_get_interrupt_vector+0x3c>)
   281ba:	6811      	ldr	r1, [r2, #0]
   281bc:	6019      	str	r1, [r3, #0]
   281be:	8892      	ldrh	r2, [r2, #4]
   281c0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   281c2:	230f      	movs	r3, #15
   281c4:	18fc      	adds	r4, r7, r3
   281c6:	687b      	ldr	r3, [r7, #4]
   281c8:	0018      	movs	r0, r3
   281ca:	4b08      	ldr	r3, [pc, #32]	; (281ec <_sercom_get_interrupt_vector+0x40>)
   281cc:	4798      	blx	r3
   281ce:	0003      	movs	r3, r0
   281d0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   281d2:	230f      	movs	r3, #15
   281d4:	18fb      	adds	r3, r7, r3
   281d6:	781b      	ldrb	r3, [r3, #0]
   281d8:	2208      	movs	r2, #8
   281da:	18ba      	adds	r2, r7, r2
   281dc:	5cd3      	ldrb	r3, [r2, r3]
   281de:	b25b      	sxtb	r3, r3
}
   281e0:	0018      	movs	r0, r3
   281e2:	46bd      	mov	sp, r7
   281e4:	b005      	add	sp, #20
   281e6:	bd90      	pop	{r4, r7, pc}
   281e8:	0003a48c 	.word	0x0003a48c
   281ec:	000280dd 	.word	0x000280dd

000281f0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   281f0:	b580      	push	{r7, lr}
   281f2:	af00      	add	r7, sp, #0
   281f4:	4b03      	ldr	r3, [pc, #12]	; (28204 <SERCOM0_Handler+0x14>)
   281f6:	681b      	ldr	r3, [r3, #0]
   281f8:	2000      	movs	r0, #0
   281fa:	4798      	blx	r3
   281fc:	46c0      	nop			; (mov r8, r8)
   281fe:	46bd      	mov	sp, r7
   28200:	bd80      	pop	{r7, pc}
   28202:	46c0      	nop			; (mov r8, r8)
   28204:	200042c4 	.word	0x200042c4

00028208 <SERCOM1_Handler>:
   28208:	b580      	push	{r7, lr}
   2820a:	af00      	add	r7, sp, #0
   2820c:	4b03      	ldr	r3, [pc, #12]	; (2821c <SERCOM1_Handler+0x14>)
   2820e:	685b      	ldr	r3, [r3, #4]
   28210:	2001      	movs	r0, #1
   28212:	4798      	blx	r3
   28214:	46c0      	nop			; (mov r8, r8)
   28216:	46bd      	mov	sp, r7
   28218:	bd80      	pop	{r7, pc}
   2821a:	46c0      	nop			; (mov r8, r8)
   2821c:	200042c4 	.word	0x200042c4

00028220 <SERCOM2_Handler>:
   28220:	b580      	push	{r7, lr}
   28222:	af00      	add	r7, sp, #0
   28224:	4b03      	ldr	r3, [pc, #12]	; (28234 <SERCOM2_Handler+0x14>)
   28226:	689b      	ldr	r3, [r3, #8]
   28228:	2002      	movs	r0, #2
   2822a:	4798      	blx	r3
   2822c:	46c0      	nop			; (mov r8, r8)
   2822e:	46bd      	mov	sp, r7
   28230:	bd80      	pop	{r7, pc}
   28232:	46c0      	nop			; (mov r8, r8)
   28234:	200042c4 	.word	0x200042c4

00028238 <SERCOM3_Handler>:
   28238:	b580      	push	{r7, lr}
   2823a:	af00      	add	r7, sp, #0
   2823c:	4b03      	ldr	r3, [pc, #12]	; (2824c <SERCOM3_Handler+0x14>)
   2823e:	68db      	ldr	r3, [r3, #12]
   28240:	2003      	movs	r0, #3
   28242:	4798      	blx	r3
   28244:	46c0      	nop			; (mov r8, r8)
   28246:	46bd      	mov	sp, r7
   28248:	bd80      	pop	{r7, pc}
   2824a:	46c0      	nop			; (mov r8, r8)
   2824c:	200042c4 	.word	0x200042c4

00028250 <SERCOM4_Handler>:
   28250:	b580      	push	{r7, lr}
   28252:	af00      	add	r7, sp, #0
   28254:	4b03      	ldr	r3, [pc, #12]	; (28264 <SERCOM4_Handler+0x14>)
   28256:	691b      	ldr	r3, [r3, #16]
   28258:	2004      	movs	r0, #4
   2825a:	4798      	blx	r3
   2825c:	46c0      	nop			; (mov r8, r8)
   2825e:	46bd      	mov	sp, r7
   28260:	bd80      	pop	{r7, pc}
   28262:	46c0      	nop			; (mov r8, r8)
   28264:	200042c4 	.word	0x200042c4

00028268 <SERCOM5_Handler>:
   28268:	b580      	push	{r7, lr}
   2826a:	af00      	add	r7, sp, #0
   2826c:	4b03      	ldr	r3, [pc, #12]	; (2827c <SERCOM5_Handler+0x14>)
   2826e:	695b      	ldr	r3, [r3, #20]
   28270:	2005      	movs	r0, #5
   28272:	4798      	blx	r3
   28274:	46c0      	nop			; (mov r8, r8)
   28276:	46bd      	mov	sp, r7
   28278:	bd80      	pop	{r7, pc}
   2827a:	46c0      	nop			; (mov r8, r8)
   2827c:	200042c4 	.word	0x200042c4

00028280 <system_pinmux_get_config_defaults>:
{
   28280:	b580      	push	{r7, lr}
   28282:	b082      	sub	sp, #8
   28284:	af00      	add	r7, sp, #0
   28286:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28288:	687b      	ldr	r3, [r7, #4]
   2828a:	2280      	movs	r2, #128	; 0x80
   2828c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2828e:	687b      	ldr	r3, [r7, #4]
   28290:	2200      	movs	r2, #0
   28292:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28294:	687b      	ldr	r3, [r7, #4]
   28296:	2201      	movs	r2, #1
   28298:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2829a:	687b      	ldr	r3, [r7, #4]
   2829c:	2200      	movs	r2, #0
   2829e:	70da      	strb	r2, [r3, #3]
}
   282a0:	46c0      	nop			; (mov r8, r8)
   282a2:	46bd      	mov	sp, r7
   282a4:	b002      	add	sp, #8
   282a6:	bd80      	pop	{r7, pc}

000282a8 <system_pinmux_get_group_from_gpio_pin>:
{
   282a8:	b580      	push	{r7, lr}
   282aa:	b084      	sub	sp, #16
   282ac:	af00      	add	r7, sp, #0
   282ae:	0002      	movs	r2, r0
   282b0:	1dfb      	adds	r3, r7, #7
   282b2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   282b4:	230f      	movs	r3, #15
   282b6:	18fb      	adds	r3, r7, r3
   282b8:	1dfa      	adds	r2, r7, #7
   282ba:	7812      	ldrb	r2, [r2, #0]
   282bc:	09d2      	lsrs	r2, r2, #7
   282be:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   282c0:	230e      	movs	r3, #14
   282c2:	18fb      	adds	r3, r7, r3
   282c4:	1dfa      	adds	r2, r7, #7
   282c6:	7812      	ldrb	r2, [r2, #0]
   282c8:	0952      	lsrs	r2, r2, #5
   282ca:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   282cc:	4b0d      	ldr	r3, [pc, #52]	; (28304 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   282ce:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   282d0:	230f      	movs	r3, #15
   282d2:	18fb      	adds	r3, r7, r3
   282d4:	781b      	ldrb	r3, [r3, #0]
   282d6:	2b00      	cmp	r3, #0
   282d8:	d10f      	bne.n	282fa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   282da:	230f      	movs	r3, #15
   282dc:	18fb      	adds	r3, r7, r3
   282de:	781b      	ldrb	r3, [r3, #0]
   282e0:	009b      	lsls	r3, r3, #2
   282e2:	2210      	movs	r2, #16
   282e4:	4694      	mov	ip, r2
   282e6:	44bc      	add	ip, r7
   282e8:	4463      	add	r3, ip
   282ea:	3b08      	subs	r3, #8
   282ec:	681a      	ldr	r2, [r3, #0]
   282ee:	230e      	movs	r3, #14
   282f0:	18fb      	adds	r3, r7, r3
   282f2:	781b      	ldrb	r3, [r3, #0]
   282f4:	01db      	lsls	r3, r3, #7
   282f6:	18d3      	adds	r3, r2, r3
   282f8:	e000      	b.n	282fc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   282fa:	2300      	movs	r3, #0
}
   282fc:	0018      	movs	r0, r3
   282fe:	46bd      	mov	sp, r7
   28300:	b004      	add	sp, #16
   28302:	bd80      	pop	{r7, pc}
   28304:	41004400 	.word	0x41004400

00028308 <port_get_group_from_gpio_pin>:
{
   28308:	b580      	push	{r7, lr}
   2830a:	b082      	sub	sp, #8
   2830c:	af00      	add	r7, sp, #0
   2830e:	0002      	movs	r2, r0
   28310:	1dfb      	adds	r3, r7, #7
   28312:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   28314:	1dfb      	adds	r3, r7, #7
   28316:	781b      	ldrb	r3, [r3, #0]
   28318:	0018      	movs	r0, r3
   2831a:	4b03      	ldr	r3, [pc, #12]	; (28328 <port_get_group_from_gpio_pin+0x20>)
   2831c:	4798      	blx	r3
   2831e:	0003      	movs	r3, r0
}
   28320:	0018      	movs	r0, r3
   28322:	46bd      	mov	sp, r7
   28324:	b002      	add	sp, #8
   28326:	bd80      	pop	{r7, pc}
   28328:	000282a9 	.word	0x000282a9

0002832c <port_pin_set_output_level>:
{
   2832c:	b580      	push	{r7, lr}
   2832e:	b084      	sub	sp, #16
   28330:	af00      	add	r7, sp, #0
   28332:	0002      	movs	r2, r0
   28334:	1dfb      	adds	r3, r7, #7
   28336:	701a      	strb	r2, [r3, #0]
   28338:	1dbb      	adds	r3, r7, #6
   2833a:	1c0a      	adds	r2, r1, #0
   2833c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2833e:	1dfb      	adds	r3, r7, #7
   28340:	781b      	ldrb	r3, [r3, #0]
   28342:	0018      	movs	r0, r3
   28344:	4b0d      	ldr	r3, [pc, #52]	; (2837c <port_pin_set_output_level+0x50>)
   28346:	4798      	blx	r3
   28348:	0003      	movs	r3, r0
   2834a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2834c:	1dfb      	adds	r3, r7, #7
   2834e:	781b      	ldrb	r3, [r3, #0]
   28350:	221f      	movs	r2, #31
   28352:	4013      	ands	r3, r2
   28354:	2201      	movs	r2, #1
   28356:	409a      	lsls	r2, r3
   28358:	0013      	movs	r3, r2
   2835a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2835c:	1dbb      	adds	r3, r7, #6
   2835e:	781b      	ldrb	r3, [r3, #0]
   28360:	2b00      	cmp	r3, #0
   28362:	d003      	beq.n	2836c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   28364:	68fb      	ldr	r3, [r7, #12]
   28366:	68ba      	ldr	r2, [r7, #8]
   28368:	619a      	str	r2, [r3, #24]
}
   2836a:	e002      	b.n	28372 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2836c:	68fb      	ldr	r3, [r7, #12]
   2836e:	68ba      	ldr	r2, [r7, #8]
   28370:	615a      	str	r2, [r3, #20]
}
   28372:	46c0      	nop			; (mov r8, r8)
   28374:	46bd      	mov	sp, r7
   28376:	b004      	add	sp, #16
   28378:	bd80      	pop	{r7, pc}
   2837a:	46c0      	nop			; (mov r8, r8)
   2837c:	00028309 	.word	0x00028309

00028380 <system_gclk_chan_get_config_defaults>:
{
   28380:	b580      	push	{r7, lr}
   28382:	b082      	sub	sp, #8
   28384:	af00      	add	r7, sp, #0
   28386:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28388:	687b      	ldr	r3, [r7, #4]
   2838a:	2200      	movs	r2, #0
   2838c:	701a      	strb	r2, [r3, #0]
}
   2838e:	46c0      	nop			; (mov r8, r8)
   28390:	46bd      	mov	sp, r7
   28392:	b002      	add	sp, #8
   28394:	bd80      	pop	{r7, pc}
	...

00028398 <system_apb_clock_set_mask>:
{
   28398:	b580      	push	{r7, lr}
   2839a:	b082      	sub	sp, #8
   2839c:	af00      	add	r7, sp, #0
   2839e:	0002      	movs	r2, r0
   283a0:	6039      	str	r1, [r7, #0]
   283a2:	1dfb      	adds	r3, r7, #7
   283a4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   283a6:	1dfb      	adds	r3, r7, #7
   283a8:	781b      	ldrb	r3, [r3, #0]
   283aa:	2b01      	cmp	r3, #1
   283ac:	d00a      	beq.n	283c4 <system_apb_clock_set_mask+0x2c>
   283ae:	2b02      	cmp	r3, #2
   283b0:	d00f      	beq.n	283d2 <system_apb_clock_set_mask+0x3a>
   283b2:	2b00      	cmp	r3, #0
   283b4:	d114      	bne.n	283e0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   283b6:	4b0e      	ldr	r3, [pc, #56]	; (283f0 <system_apb_clock_set_mask+0x58>)
   283b8:	4a0d      	ldr	r2, [pc, #52]	; (283f0 <system_apb_clock_set_mask+0x58>)
   283ba:	6991      	ldr	r1, [r2, #24]
   283bc:	683a      	ldr	r2, [r7, #0]
   283be:	430a      	orrs	r2, r1
   283c0:	619a      	str	r2, [r3, #24]
			break;
   283c2:	e00f      	b.n	283e4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   283c4:	4b0a      	ldr	r3, [pc, #40]	; (283f0 <system_apb_clock_set_mask+0x58>)
   283c6:	4a0a      	ldr	r2, [pc, #40]	; (283f0 <system_apb_clock_set_mask+0x58>)
   283c8:	69d1      	ldr	r1, [r2, #28]
   283ca:	683a      	ldr	r2, [r7, #0]
   283cc:	430a      	orrs	r2, r1
   283ce:	61da      	str	r2, [r3, #28]
			break;
   283d0:	e008      	b.n	283e4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   283d2:	4b07      	ldr	r3, [pc, #28]	; (283f0 <system_apb_clock_set_mask+0x58>)
   283d4:	4a06      	ldr	r2, [pc, #24]	; (283f0 <system_apb_clock_set_mask+0x58>)
   283d6:	6a11      	ldr	r1, [r2, #32]
   283d8:	683a      	ldr	r2, [r7, #0]
   283da:	430a      	orrs	r2, r1
   283dc:	621a      	str	r2, [r3, #32]
			break;
   283de:	e001      	b.n	283e4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   283e0:	2317      	movs	r3, #23
   283e2:	e000      	b.n	283e6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   283e4:	2300      	movs	r3, #0
}
   283e6:	0018      	movs	r0, r3
   283e8:	46bd      	mov	sp, r7
   283ea:	b002      	add	sp, #8
   283ec:	bd80      	pop	{r7, pc}
   283ee:	46c0      	nop			; (mov r8, r8)
   283f0:	40000400 	.word	0x40000400

000283f4 <system_is_debugger_present>:
{
   283f4:	b580      	push	{r7, lr}
   283f6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   283f8:	4b05      	ldr	r3, [pc, #20]	; (28410 <system_is_debugger_present+0x1c>)
   283fa:	789b      	ldrb	r3, [r3, #2]
   283fc:	b2db      	uxtb	r3, r3
   283fe:	001a      	movs	r2, r3
   28400:	2302      	movs	r3, #2
   28402:	4013      	ands	r3, r2
   28404:	1e5a      	subs	r2, r3, #1
   28406:	4193      	sbcs	r3, r2
   28408:	b2db      	uxtb	r3, r3
}
   2840a:	0018      	movs	r0, r3
   2840c:	46bd      	mov	sp, r7
   2840e:	bd80      	pop	{r7, pc}
   28410:	41002000 	.word	0x41002000

00028414 <system_interrupt_enable>:
{
   28414:	b580      	push	{r7, lr}
   28416:	b082      	sub	sp, #8
   28418:	af00      	add	r7, sp, #0
   2841a:	0002      	movs	r2, r0
   2841c:	1dfb      	adds	r3, r7, #7
   2841e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28420:	4b06      	ldr	r3, [pc, #24]	; (2843c <system_interrupt_enable+0x28>)
   28422:	1dfa      	adds	r2, r7, #7
   28424:	7812      	ldrb	r2, [r2, #0]
   28426:	0011      	movs	r1, r2
   28428:	221f      	movs	r2, #31
   2842a:	400a      	ands	r2, r1
   2842c:	2101      	movs	r1, #1
   2842e:	4091      	lsls	r1, r2
   28430:	000a      	movs	r2, r1
   28432:	601a      	str	r2, [r3, #0]
}
   28434:	46c0      	nop			; (mov r8, r8)
   28436:	46bd      	mov	sp, r7
   28438:	b002      	add	sp, #8
   2843a:	bd80      	pop	{r7, pc}
   2843c:	e000e100 	.word	0xe000e100

00028440 <system_interrupt_disable>:
{
   28440:	b580      	push	{r7, lr}
   28442:	b082      	sub	sp, #8
   28444:	af00      	add	r7, sp, #0
   28446:	0002      	movs	r2, r0
   28448:	1dfb      	adds	r3, r7, #7
   2844a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2844c:	4a07      	ldr	r2, [pc, #28]	; (2846c <system_interrupt_disable+0x2c>)
   2844e:	1dfb      	adds	r3, r7, #7
   28450:	781b      	ldrb	r3, [r3, #0]
   28452:	0019      	movs	r1, r3
   28454:	231f      	movs	r3, #31
   28456:	400b      	ands	r3, r1
   28458:	2101      	movs	r1, #1
   2845a:	4099      	lsls	r1, r3
   2845c:	000b      	movs	r3, r1
   2845e:	0019      	movs	r1, r3
   28460:	2380      	movs	r3, #128	; 0x80
   28462:	50d1      	str	r1, [r2, r3]
}
   28464:	46c0      	nop			; (mov r8, r8)
   28466:	46bd      	mov	sp, r7
   28468:	b002      	add	sp, #8
   2846a:	bd80      	pop	{r7, pc}
   2846c:	e000e100 	.word	0xe000e100

00028470 <spi_is_syncing>:
{
   28470:	b580      	push	{r7, lr}
   28472:	b084      	sub	sp, #16
   28474:	af00      	add	r7, sp, #0
   28476:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28478:	687b      	ldr	r3, [r7, #4]
   2847a:	681b      	ldr	r3, [r3, #0]
   2847c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2847e:	68fb      	ldr	r3, [r7, #12]
   28480:	69db      	ldr	r3, [r3, #28]
   28482:	1e5a      	subs	r2, r3, #1
   28484:	4193      	sbcs	r3, r2
   28486:	b2db      	uxtb	r3, r3
}
   28488:	0018      	movs	r0, r3
   2848a:	46bd      	mov	sp, r7
   2848c:	b004      	add	sp, #16
   2848e:	bd80      	pop	{r7, pc}

00028490 <spi_enable>:
{
   28490:	b580      	push	{r7, lr}
   28492:	b084      	sub	sp, #16
   28494:	af00      	add	r7, sp, #0
   28496:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28498:	687b      	ldr	r3, [r7, #4]
   2849a:	681b      	ldr	r3, [r3, #0]
   2849c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2849e:	687b      	ldr	r3, [r7, #4]
   284a0:	681b      	ldr	r3, [r3, #0]
   284a2:	0018      	movs	r0, r3
   284a4:	4b0b      	ldr	r3, [pc, #44]	; (284d4 <spi_enable+0x44>)
   284a6:	4798      	blx	r3
   284a8:	0003      	movs	r3, r0
   284aa:	0018      	movs	r0, r3
   284ac:	4b0a      	ldr	r3, [pc, #40]	; (284d8 <spi_enable+0x48>)
   284ae:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   284b0:	46c0      	nop			; (mov r8, r8)
   284b2:	687b      	ldr	r3, [r7, #4]
   284b4:	0018      	movs	r0, r3
   284b6:	4b09      	ldr	r3, [pc, #36]	; (284dc <spi_enable+0x4c>)
   284b8:	4798      	blx	r3
   284ba:	1e03      	subs	r3, r0, #0
   284bc:	d1f9      	bne.n	284b2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   284be:	68fb      	ldr	r3, [r7, #12]
   284c0:	681b      	ldr	r3, [r3, #0]
   284c2:	2202      	movs	r2, #2
   284c4:	431a      	orrs	r2, r3
   284c6:	68fb      	ldr	r3, [r7, #12]
   284c8:	601a      	str	r2, [r3, #0]
}
   284ca:	46c0      	nop			; (mov r8, r8)
   284cc:	46bd      	mov	sp, r7
   284ce:	b004      	add	sp, #16
   284d0:	bd80      	pop	{r7, pc}
   284d2:	46c0      	nop			; (mov r8, r8)
   284d4:	000281ad 	.word	0x000281ad
   284d8:	00028415 	.word	0x00028415
   284dc:	00028471 	.word	0x00028471

000284e0 <spi_disable>:
{
   284e0:	b580      	push	{r7, lr}
   284e2:	b084      	sub	sp, #16
   284e4:	af00      	add	r7, sp, #0
   284e6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   284e8:	687b      	ldr	r3, [r7, #4]
   284ea:	681b      	ldr	r3, [r3, #0]
   284ec:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   284ee:	687b      	ldr	r3, [r7, #4]
   284f0:	681b      	ldr	r3, [r3, #0]
   284f2:	0018      	movs	r0, r3
   284f4:	4b0e      	ldr	r3, [pc, #56]	; (28530 <spi_disable+0x50>)
   284f6:	4798      	blx	r3
   284f8:	0003      	movs	r3, r0
   284fa:	0018      	movs	r0, r3
   284fc:	4b0d      	ldr	r3, [pc, #52]	; (28534 <spi_disable+0x54>)
   284fe:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   28500:	46c0      	nop			; (mov r8, r8)
   28502:	687b      	ldr	r3, [r7, #4]
   28504:	0018      	movs	r0, r3
   28506:	4b0c      	ldr	r3, [pc, #48]	; (28538 <spi_disable+0x58>)
   28508:	4798      	blx	r3
   2850a:	1e03      	subs	r3, r0, #0
   2850c:	d1f9      	bne.n	28502 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2850e:	68fb      	ldr	r3, [r7, #12]
   28510:	228f      	movs	r2, #143	; 0x8f
   28512:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   28514:	68fb      	ldr	r3, [r7, #12]
   28516:	228f      	movs	r2, #143	; 0x8f
   28518:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2851a:	68fb      	ldr	r3, [r7, #12]
   2851c:	681b      	ldr	r3, [r3, #0]
   2851e:	2202      	movs	r2, #2
   28520:	4393      	bics	r3, r2
   28522:	001a      	movs	r2, r3
   28524:	68fb      	ldr	r3, [r7, #12]
   28526:	601a      	str	r2, [r3, #0]
}
   28528:	46c0      	nop			; (mov r8, r8)
   2852a:	46bd      	mov	sp, r7
   2852c:	b004      	add	sp, #16
   2852e:	bd80      	pop	{r7, pc}
   28530:	000281ad 	.word	0x000281ad
   28534:	00028441 	.word	0x00028441
   28538:	00028471 	.word	0x00028471

0002853c <spi_is_write_complete>:
{
   2853c:	b580      	push	{r7, lr}
   2853e:	b084      	sub	sp, #16
   28540:	af00      	add	r7, sp, #0
   28542:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28544:	687b      	ldr	r3, [r7, #4]
   28546:	681b      	ldr	r3, [r3, #0]
   28548:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2854a:	68fb      	ldr	r3, [r7, #12]
   2854c:	7e1b      	ldrb	r3, [r3, #24]
   2854e:	b2db      	uxtb	r3, r3
   28550:	001a      	movs	r2, r3
   28552:	2302      	movs	r3, #2
   28554:	4013      	ands	r3, r2
   28556:	1e5a      	subs	r2, r3, #1
   28558:	4193      	sbcs	r3, r2
   2855a:	b2db      	uxtb	r3, r3
}
   2855c:	0018      	movs	r0, r3
   2855e:	46bd      	mov	sp, r7
   28560:	b004      	add	sp, #16
   28562:	bd80      	pop	{r7, pc}

00028564 <spi_is_ready_to_write>:
{
   28564:	b580      	push	{r7, lr}
   28566:	b084      	sub	sp, #16
   28568:	af00      	add	r7, sp, #0
   2856a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2856c:	687b      	ldr	r3, [r7, #4]
   2856e:	681b      	ldr	r3, [r3, #0]
   28570:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   28572:	68fb      	ldr	r3, [r7, #12]
   28574:	7e1b      	ldrb	r3, [r3, #24]
   28576:	b2db      	uxtb	r3, r3
   28578:	001a      	movs	r2, r3
   2857a:	2301      	movs	r3, #1
   2857c:	4013      	ands	r3, r2
   2857e:	1e5a      	subs	r2, r3, #1
   28580:	4193      	sbcs	r3, r2
   28582:	b2db      	uxtb	r3, r3
}
   28584:	0018      	movs	r0, r3
   28586:	46bd      	mov	sp, r7
   28588:	b004      	add	sp, #16
   2858a:	bd80      	pop	{r7, pc}

0002858c <spi_is_ready_to_read>:
{
   2858c:	b580      	push	{r7, lr}
   2858e:	b084      	sub	sp, #16
   28590:	af00      	add	r7, sp, #0
   28592:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28594:	687b      	ldr	r3, [r7, #4]
   28596:	681b      	ldr	r3, [r3, #0]
   28598:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2859a:	68fb      	ldr	r3, [r7, #12]
   2859c:	7e1b      	ldrb	r3, [r3, #24]
   2859e:	b2db      	uxtb	r3, r3
   285a0:	001a      	movs	r2, r3
   285a2:	2304      	movs	r3, #4
   285a4:	4013      	ands	r3, r2
   285a6:	1e5a      	subs	r2, r3, #1
   285a8:	4193      	sbcs	r3, r2
   285aa:	b2db      	uxtb	r3, r3
}
   285ac:	0018      	movs	r0, r3
   285ae:	46bd      	mov	sp, r7
   285b0:	b004      	add	sp, #16
   285b2:	bd80      	pop	{r7, pc}

000285b4 <spi_write>:
{
   285b4:	b580      	push	{r7, lr}
   285b6:	b084      	sub	sp, #16
   285b8:	af00      	add	r7, sp, #0
   285ba:	6078      	str	r0, [r7, #4]
   285bc:	000a      	movs	r2, r1
   285be:	1cbb      	adds	r3, r7, #2
   285c0:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   285c2:	687b      	ldr	r3, [r7, #4]
   285c4:	681b      	ldr	r3, [r3, #0]
   285c6:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   285c8:	687b      	ldr	r3, [r7, #4]
   285ca:	0018      	movs	r0, r3
   285cc:	4b0a      	ldr	r3, [pc, #40]	; (285f8 <spi_write+0x44>)
   285ce:	4798      	blx	r3
   285d0:	0003      	movs	r3, r0
   285d2:	001a      	movs	r2, r3
   285d4:	2301      	movs	r3, #1
   285d6:	4053      	eors	r3, r2
   285d8:	b2db      	uxtb	r3, r3
   285da:	2b00      	cmp	r3, #0
   285dc:	d001      	beq.n	285e2 <spi_write+0x2e>
		return STATUS_BUSY;
   285de:	2305      	movs	r3, #5
   285e0:	e006      	b.n	285f0 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   285e2:	1cbb      	adds	r3, r7, #2
   285e4:	881b      	ldrh	r3, [r3, #0]
   285e6:	05db      	lsls	r3, r3, #23
   285e8:	0dda      	lsrs	r2, r3, #23
   285ea:	68fb      	ldr	r3, [r7, #12]
   285ec:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   285ee:	2300      	movs	r3, #0
}
   285f0:	0018      	movs	r0, r3
   285f2:	46bd      	mov	sp, r7
   285f4:	b004      	add	sp, #16
   285f6:	bd80      	pop	{r7, pc}
   285f8:	00028565 	.word	0x00028565

000285fc <spi_read>:
{
   285fc:	b580      	push	{r7, lr}
   285fe:	b084      	sub	sp, #16
   28600:	af00      	add	r7, sp, #0
   28602:	6078      	str	r0, [r7, #4]
   28604:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28606:	687b      	ldr	r3, [r7, #4]
   28608:	681b      	ldr	r3, [r3, #0]
   2860a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   2860c:	687b      	ldr	r3, [r7, #4]
   2860e:	0018      	movs	r0, r3
   28610:	4b1b      	ldr	r3, [pc, #108]	; (28680 <spi_read+0x84>)
   28612:	4798      	blx	r3
   28614:	0003      	movs	r3, r0
   28616:	001a      	movs	r2, r3
   28618:	2301      	movs	r3, #1
   2861a:	4053      	eors	r3, r2
   2861c:	b2db      	uxtb	r3, r3
   2861e:	2b00      	cmp	r3, #0
   28620:	d001      	beq.n	28626 <spi_read+0x2a>
		return STATUS_ERR_IO;
   28622:	2310      	movs	r3, #16
   28624:	e027      	b.n	28676 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   28626:	230f      	movs	r3, #15
   28628:	18fb      	adds	r3, r7, r3
   2862a:	2200      	movs	r2, #0
   2862c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2862e:	68bb      	ldr	r3, [r7, #8]
   28630:	8b5b      	ldrh	r3, [r3, #26]
   28632:	b29b      	uxth	r3, r3
   28634:	001a      	movs	r2, r3
   28636:	2304      	movs	r3, #4
   28638:	4013      	ands	r3, r2
   2863a:	d006      	beq.n	2864a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2863c:	230f      	movs	r3, #15
   2863e:	18fb      	adds	r3, r7, r3
   28640:	221e      	movs	r2, #30
   28642:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   28644:	68bb      	ldr	r3, [r7, #8]
   28646:	2204      	movs	r2, #4
   28648:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2864a:	687b      	ldr	r3, [r7, #4]
   2864c:	799b      	ldrb	r3, [r3, #6]
   2864e:	2b01      	cmp	r3, #1
   28650:	d108      	bne.n	28664 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   28652:	68bb      	ldr	r3, [r7, #8]
   28654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28656:	b29b      	uxth	r3, r3
   28658:	05db      	lsls	r3, r3, #23
   2865a:	0ddb      	lsrs	r3, r3, #23
   2865c:	b29a      	uxth	r2, r3
   2865e:	683b      	ldr	r3, [r7, #0]
   28660:	801a      	strh	r2, [r3, #0]
   28662:	e005      	b.n	28670 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   28664:	68bb      	ldr	r3, [r7, #8]
   28666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28668:	b2db      	uxtb	r3, r3
   2866a:	b29a      	uxth	r2, r3
   2866c:	683b      	ldr	r3, [r7, #0]
   2866e:	801a      	strh	r2, [r3, #0]
	return retval;
   28670:	230f      	movs	r3, #15
   28672:	18fb      	adds	r3, r7, r3
   28674:	781b      	ldrb	r3, [r3, #0]
}
   28676:	0018      	movs	r0, r3
   28678:	46bd      	mov	sp, r7
   2867a:	b004      	add	sp, #16
   2867c:	bd80      	pop	{r7, pc}
   2867e:	46c0      	nop			; (mov r8, r8)
   28680:	0002858d 	.word	0x0002858d

00028684 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   28684:	b590      	push	{r4, r7, lr}
   28686:	b089      	sub	sp, #36	; 0x24
   28688:	af00      	add	r7, sp, #0
   2868a:	6078      	str	r0, [r7, #4]
   2868c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2868e:	230c      	movs	r3, #12
   28690:	18fb      	adds	r3, r7, r3
   28692:	2200      	movs	r2, #0
   28694:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   28696:	687b      	ldr	r3, [r7, #4]
   28698:	681b      	ldr	r3, [r3, #0]
   2869a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   2869c:	687b      	ldr	r3, [r7, #4]
   2869e:	0018      	movs	r0, r3
   286a0:	4b24      	ldr	r3, [pc, #144]	; (28734 <spi_set_baudrate+0xb0>)
   286a2:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   286a4:	46c0      	nop			; (mov r8, r8)
   286a6:	687b      	ldr	r3, [r7, #4]
   286a8:	0018      	movs	r0, r3
   286aa:	4b23      	ldr	r3, [pc, #140]	; (28738 <spi_set_baudrate+0xb4>)
   286ac:	4798      	blx	r3
   286ae:	1e03      	subs	r3, r0, #0
   286b0:	d1f9      	bne.n	286a6 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   286b2:	687b      	ldr	r3, [r7, #4]
   286b4:	681b      	ldr	r3, [r3, #0]
   286b6:	0018      	movs	r0, r3
   286b8:	4b20      	ldr	r3, [pc, #128]	; (2873c <spi_set_baudrate+0xb8>)
   286ba:	4798      	blx	r3
   286bc:	0003      	movs	r3, r0
   286be:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   286c0:	69bb      	ldr	r3, [r7, #24]
   286c2:	3314      	adds	r3, #20
   286c4:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   286c6:	697b      	ldr	r3, [r7, #20]
   286c8:	b2db      	uxtb	r3, r3
   286ca:	0018      	movs	r0, r3
   286cc:	4b1c      	ldr	r3, [pc, #112]	; (28740 <spi_set_baudrate+0xbc>)
   286ce:	4798      	blx	r3
   286d0:	0003      	movs	r3, r0
   286d2:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   286d4:	230f      	movs	r3, #15
   286d6:	18fc      	adds	r4, r7, r3
   286d8:	230c      	movs	r3, #12
   286da:	18fa      	adds	r2, r7, r3
   286dc:	6939      	ldr	r1, [r7, #16]
   286de:	683b      	ldr	r3, [r7, #0]
   286e0:	0018      	movs	r0, r3
   286e2:	4b18      	ldr	r3, [pc, #96]	; (28744 <spi_set_baudrate+0xc0>)
   286e4:	4798      	blx	r3
   286e6:	0003      	movs	r3, r0
   286e8:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   286ea:	230f      	movs	r3, #15
   286ec:	18fb      	adds	r3, r7, r3
   286ee:	781b      	ldrb	r3, [r3, #0]
   286f0:	2b00      	cmp	r3, #0
   286f2:	d001      	beq.n	286f8 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   286f4:	2317      	movs	r3, #23
   286f6:	e018      	b.n	2872a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   286f8:	230c      	movs	r3, #12
   286fa:	18fb      	adds	r3, r7, r3
   286fc:	881b      	ldrh	r3, [r3, #0]
   286fe:	b2da      	uxtb	r2, r3
   28700:	69fb      	ldr	r3, [r7, #28]
   28702:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   28704:	46c0      	nop			; (mov r8, r8)
   28706:	687b      	ldr	r3, [r7, #4]
   28708:	0018      	movs	r0, r3
   2870a:	4b0b      	ldr	r3, [pc, #44]	; (28738 <spi_set_baudrate+0xb4>)
   2870c:	4798      	blx	r3
   2870e:	1e03      	subs	r3, r0, #0
   28710:	d1f9      	bne.n	28706 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   28712:	687b      	ldr	r3, [r7, #4]
   28714:	0018      	movs	r0, r3
   28716:	4b0c      	ldr	r3, [pc, #48]	; (28748 <spi_set_baudrate+0xc4>)
   28718:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2871a:	46c0      	nop			; (mov r8, r8)
   2871c:	687b      	ldr	r3, [r7, #4]
   2871e:	0018      	movs	r0, r3
   28720:	4b05      	ldr	r3, [pc, #20]	; (28738 <spi_set_baudrate+0xb4>)
   28722:	4798      	blx	r3
   28724:	1e03      	subs	r3, r0, #0
   28726:	d1f9      	bne.n	2871c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   28728:	2300      	movs	r3, #0
}
   2872a:	0018      	movs	r0, r3
   2872c:	46bd      	mov	sp, r7
   2872e:	b009      	add	sp, #36	; 0x24
   28730:	bd90      	pop	{r4, r7, pc}
   28732:	46c0      	nop			; (mov r8, r8)
   28734:	000284e1 	.word	0x000284e1
   28738:	00028471 	.word	0x00028471
   2873c:	000280dd 	.word	0x000280dd
   28740:	0002aa91 	.word	0x0002aa91
   28744:	00027c57 	.word	0x00027c57
   28748:	00028491 	.word	0x00028491

0002874c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   2874c:	b590      	push	{r4, r7, lr}
   2874e:	b093      	sub	sp, #76	; 0x4c
   28750:	af00      	add	r7, sp, #0
   28752:	6078      	str	r0, [r7, #4]
   28754:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   28756:	687b      	ldr	r3, [r7, #4]
   28758:	681b      	ldr	r3, [r3, #0]
   2875a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   2875c:	687b      	ldr	r3, [r7, #4]
   2875e:	681b      	ldr	r3, [r3, #0]
   28760:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28762:	231c      	movs	r3, #28
   28764:	18fb      	adds	r3, r7, r3
   28766:	0018      	movs	r0, r3
   28768:	4b75      	ldr	r3, [pc, #468]	; (28940 <_spi_set_config+0x1f4>)
   2876a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2876c:	231c      	movs	r3, #28
   2876e:	18fb      	adds	r3, r7, r3
   28770:	2200      	movs	r2, #0
   28772:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   28774:	683b      	ldr	r3, [r7, #0]
   28776:	781b      	ldrb	r3, [r3, #0]
   28778:	2b00      	cmp	r3, #0
   2877a:	d103      	bne.n	28784 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2877c:	231c      	movs	r3, #28
   2877e:	18fb      	adds	r3, r7, r3
   28780:	2200      	movs	r2, #0
   28782:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28784:	683b      	ldr	r3, [r7, #0]
   28786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   28788:	230c      	movs	r3, #12
   2878a:	18fb      	adds	r3, r7, r3
   2878c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2878e:	683b      	ldr	r3, [r7, #0]
   28790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   28792:	230c      	movs	r3, #12
   28794:	18fb      	adds	r3, r7, r3
   28796:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28798:	683b      	ldr	r3, [r7, #0]
   2879a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2879c:	230c      	movs	r3, #12
   2879e:	18fb      	adds	r3, r7, r3
   287a0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   287a2:	683b      	ldr	r3, [r7, #0]
   287a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   287a6:	230c      	movs	r3, #12
   287a8:	18fb      	adds	r3, r7, r3
   287aa:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   287ac:	2347      	movs	r3, #71	; 0x47
   287ae:	18fb      	adds	r3, r7, r3
   287b0:	2200      	movs	r2, #0
   287b2:	701a      	strb	r2, [r3, #0]
   287b4:	e02c      	b.n	28810 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   287b6:	2347      	movs	r3, #71	; 0x47
   287b8:	18fb      	adds	r3, r7, r3
   287ba:	781a      	ldrb	r2, [r3, #0]
   287bc:	230c      	movs	r3, #12
   287be:	18fb      	adds	r3, r7, r3
   287c0:	0092      	lsls	r2, r2, #2
   287c2:	58d3      	ldr	r3, [r2, r3]
   287c4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   287c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   287c8:	2b00      	cmp	r3, #0
   287ca:	d109      	bne.n	287e0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   287cc:	2347      	movs	r3, #71	; 0x47
   287ce:	18fb      	adds	r3, r7, r3
   287d0:	781a      	ldrb	r2, [r3, #0]
   287d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   287d4:	0011      	movs	r1, r2
   287d6:	0018      	movs	r0, r3
   287d8:	4b5a      	ldr	r3, [pc, #360]	; (28944 <_spi_set_config+0x1f8>)
   287da:	4798      	blx	r3
   287dc:	0003      	movs	r3, r0
   287de:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   287e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   287e2:	3301      	adds	r3, #1
   287e4:	d00d      	beq.n	28802 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   287e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   287e8:	b2da      	uxtb	r2, r3
   287ea:	231c      	movs	r3, #28
   287ec:	18fb      	adds	r3, r7, r3
   287ee:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   287f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   287f2:	0c1b      	lsrs	r3, r3, #16
   287f4:	b2db      	uxtb	r3, r3
   287f6:	221c      	movs	r2, #28
   287f8:	18ba      	adds	r2, r7, r2
   287fa:	0011      	movs	r1, r2
   287fc:	0018      	movs	r0, r3
   287fe:	4b52      	ldr	r3, [pc, #328]	; (28948 <_spi_set_config+0x1fc>)
   28800:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   28802:	2347      	movs	r3, #71	; 0x47
   28804:	18fb      	adds	r3, r7, r3
   28806:	781a      	ldrb	r2, [r3, #0]
   28808:	2347      	movs	r3, #71	; 0x47
   2880a:	18fb      	adds	r3, r7, r3
   2880c:	3201      	adds	r2, #1
   2880e:	701a      	strb	r2, [r3, #0]
   28810:	2347      	movs	r3, #71	; 0x47
   28812:	18fb      	adds	r3, r7, r3
   28814:	781b      	ldrb	r3, [r3, #0]
   28816:	2b03      	cmp	r3, #3
   28818:	d9cd      	bls.n	287b6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2881a:	683b      	ldr	r3, [r7, #0]
   2881c:	781a      	ldrb	r2, [r3, #0]
   2881e:	687b      	ldr	r3, [r7, #4]
   28820:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   28822:	683b      	ldr	r3, [r7, #0]
   28824:	7c1a      	ldrb	r2, [r3, #16]
   28826:	687b      	ldr	r3, [r7, #4]
   28828:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2882a:	683b      	ldr	r3, [r7, #0]
   2882c:	7c9a      	ldrb	r2, [r3, #18]
   2882e:	687b      	ldr	r3, [r7, #4]
   28830:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   28832:	683b      	ldr	r3, [r7, #0]
   28834:	7d1a      	ldrb	r2, [r3, #20]
   28836:	687b      	ldr	r3, [r7, #4]
   28838:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2883a:	230a      	movs	r3, #10
   2883c:	18fb      	adds	r3, r7, r3
   2883e:	2200      	movs	r2, #0
   28840:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   28842:	2300      	movs	r3, #0
   28844:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   28846:	2300      	movs	r3, #0
   28848:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   2884a:	683b      	ldr	r3, [r7, #0]
   2884c:	781b      	ldrb	r3, [r3, #0]
   2884e:	2b01      	cmp	r3, #1
   28850:	d129      	bne.n	288a6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28852:	687b      	ldr	r3, [r7, #4]
   28854:	681b      	ldr	r3, [r3, #0]
   28856:	0018      	movs	r0, r3
   28858:	4b3c      	ldr	r3, [pc, #240]	; (2894c <_spi_set_config+0x200>)
   2885a:	4798      	blx	r3
   2885c:	0003      	movs	r3, r0
   2885e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28862:	3314      	adds	r3, #20
   28864:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   28866:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28868:	b2db      	uxtb	r3, r3
   2886a:	0018      	movs	r0, r3
   2886c:	4b38      	ldr	r3, [pc, #224]	; (28950 <_spi_set_config+0x204>)
   2886e:	4798      	blx	r3
   28870:	0003      	movs	r3, r0
   28872:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   28874:	683b      	ldr	r3, [r7, #0]
   28876:	699b      	ldr	r3, [r3, #24]
   28878:	2223      	movs	r2, #35	; 0x23
   2887a:	18bc      	adds	r4, r7, r2
   2887c:	220a      	movs	r2, #10
   2887e:	18ba      	adds	r2, r7, r2
   28880:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28882:	0018      	movs	r0, r3
   28884:	4b33      	ldr	r3, [pc, #204]	; (28954 <_spi_set_config+0x208>)
   28886:	4798      	blx	r3
   28888:	0003      	movs	r3, r0
   2888a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   2888c:	2323      	movs	r3, #35	; 0x23
   2888e:	18fb      	adds	r3, r7, r3
   28890:	781b      	ldrb	r3, [r3, #0]
   28892:	2b00      	cmp	r3, #0
   28894:	d001      	beq.n	2889a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   28896:	2317      	movs	r3, #23
   28898:	e04e      	b.n	28938 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   2889a:	230a      	movs	r3, #10
   2889c:	18fb      	adds	r3, r7, r3
   2889e:	881b      	ldrh	r3, [r3, #0]
   288a0:	b2da      	uxtb	r2, r3
   288a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   288a4:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   288a6:	683b      	ldr	r3, [r7, #0]
   288a8:	685b      	ldr	r3, [r3, #4]
   288aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   288ac:	4313      	orrs	r3, r2
   288ae:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   288b0:	683b      	ldr	r3, [r7, #0]
   288b2:	689b      	ldr	r3, [r3, #8]
   288b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   288b6:	4313      	orrs	r3, r2
   288b8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   288ba:	683b      	ldr	r3, [r7, #0]
   288bc:	68db      	ldr	r3, [r3, #12]
   288be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   288c0:	4313      	orrs	r3, r2
   288c2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   288c4:	683b      	ldr	r3, [r7, #0]
   288c6:	7c1b      	ldrb	r3, [r3, #16]
   288c8:	001a      	movs	r2, r3
   288ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   288cc:	4313      	orrs	r3, r2
   288ce:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   288d0:	683b      	ldr	r3, [r7, #0]
   288d2:	7c5b      	ldrb	r3, [r3, #17]
   288d4:	2b00      	cmp	r3, #0
   288d6:	d103      	bne.n	288e0 <_spi_set_config+0x194>
   288d8:	4b1f      	ldr	r3, [pc, #124]	; (28958 <_spi_set_config+0x20c>)
   288da:	4798      	blx	r3
   288dc:	1e03      	subs	r3, r0, #0
   288de:	d003      	beq.n	288e8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   288e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   288e2:	2280      	movs	r2, #128	; 0x80
   288e4:	4313      	orrs	r3, r2
   288e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   288e8:	683b      	ldr	r3, [r7, #0]
   288ea:	7c9b      	ldrb	r3, [r3, #18]
   288ec:	2b00      	cmp	r3, #0
   288ee:	d004      	beq.n	288fa <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   288f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   288f2:	2280      	movs	r2, #128	; 0x80
   288f4:	0292      	lsls	r2, r2, #10
   288f6:	4313      	orrs	r3, r2
   288f8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   288fa:	683b      	ldr	r3, [r7, #0]
   288fc:	7cdb      	ldrb	r3, [r3, #19]
   288fe:	2b00      	cmp	r3, #0
   28900:	d004      	beq.n	2890c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   28902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28904:	2280      	movs	r2, #128	; 0x80
   28906:	0092      	lsls	r2, r2, #2
   28908:	4313      	orrs	r3, r2
   2890a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2890c:	683b      	ldr	r3, [r7, #0]
   2890e:	7d1b      	ldrb	r3, [r3, #20]
   28910:	2b00      	cmp	r3, #0
   28912:	d004      	beq.n	2891e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   28914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28916:	2280      	movs	r2, #128	; 0x80
   28918:	0192      	lsls	r2, r2, #6
   2891a:	4313      	orrs	r3, r2
   2891c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   2891e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28920:	681a      	ldr	r2, [r3, #0]
   28922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28924:	431a      	orrs	r2, r3
   28926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28928:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   2892a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2892c:	685a      	ldr	r2, [r3, #4]
   2892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28930:	431a      	orrs	r2, r3
   28932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28934:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   28936:	2300      	movs	r3, #0
}
   28938:	0018      	movs	r0, r3
   2893a:	46bd      	mov	sp, r7
   2893c:	b013      	add	sp, #76	; 0x4c
   2893e:	bd90      	pop	{r4, r7, pc}
   28940:	00028281 	.word	0x00028281
   28944:	00027f21 	.word	0x00027f21
   28948:	0002accd 	.word	0x0002accd
   2894c:	000280dd 	.word	0x000280dd
   28950:	0002aa91 	.word	0x0002aa91
   28954:	00027c57 	.word	0x00027c57
   28958:	000283f5 	.word	0x000283f5

0002895c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   2895c:	b590      	push	{r4, r7, lr}
   2895e:	b08b      	sub	sp, #44	; 0x2c
   28960:	af00      	add	r7, sp, #0
   28962:	60f8      	str	r0, [r7, #12]
   28964:	60b9      	str	r1, [r7, #8]
   28966:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   28968:	68fb      	ldr	r3, [r7, #12]
   2896a:	68ba      	ldr	r2, [r7, #8]
   2896c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2896e:	68fb      	ldr	r3, [r7, #12]
   28970:	681b      	ldr	r3, [r3, #0]
   28972:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   28974:	6a3b      	ldr	r3, [r7, #32]
   28976:	681b      	ldr	r3, [r3, #0]
   28978:	2202      	movs	r2, #2
   2897a:	4013      	ands	r3, r2
   2897c:	d001      	beq.n	28982 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   2897e:	231c      	movs	r3, #28
   28980:	e09c      	b.n	28abc <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   28982:	6a3b      	ldr	r3, [r7, #32]
   28984:	681b      	ldr	r3, [r3, #0]
   28986:	2201      	movs	r2, #1
   28988:	4013      	ands	r3, r2
   2898a:	d001      	beq.n	28990 <spi_init+0x34>
		return STATUS_BUSY;
   2898c:	2305      	movs	r3, #5
   2898e:	e095      	b.n	28abc <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28990:	68fb      	ldr	r3, [r7, #12]
   28992:	681b      	ldr	r3, [r3, #0]
   28994:	0018      	movs	r0, r3
   28996:	4b4b      	ldr	r3, [pc, #300]	; (28ac4 <spi_init+0x168>)
   28998:	4798      	blx	r3
   2899a:	0003      	movs	r3, r0
   2899c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2899e:	69fb      	ldr	r3, [r7, #28]
   289a0:	3302      	adds	r3, #2
   289a2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   289a4:	69fb      	ldr	r3, [r7, #28]
   289a6:	3314      	adds	r3, #20
   289a8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   289aa:	2201      	movs	r2, #1
   289ac:	69bb      	ldr	r3, [r7, #24]
   289ae:	409a      	lsls	r2, r3
   289b0:	0013      	movs	r3, r2
   289b2:	0019      	movs	r1, r3
   289b4:	2002      	movs	r0, #2
   289b6:	4b44      	ldr	r3, [pc, #272]	; (28ac8 <spi_init+0x16c>)
   289b8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   289ba:	2310      	movs	r3, #16
   289bc:	18fb      	adds	r3, r7, r3
   289be:	0018      	movs	r0, r3
   289c0:	4b42      	ldr	r3, [pc, #264]	; (28acc <spi_init+0x170>)
   289c2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   289c4:	687b      	ldr	r3, [r7, #4]
   289c6:	2224      	movs	r2, #36	; 0x24
   289c8:	5c9a      	ldrb	r2, [r3, r2]
   289ca:	2310      	movs	r3, #16
   289cc:	18fb      	adds	r3, r7, r3
   289ce:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   289d0:	697b      	ldr	r3, [r7, #20]
   289d2:	b2db      	uxtb	r3, r3
   289d4:	2210      	movs	r2, #16
   289d6:	18ba      	adds	r2, r7, r2
   289d8:	0011      	movs	r1, r2
   289da:	0018      	movs	r0, r3
   289dc:	4b3c      	ldr	r3, [pc, #240]	; (28ad0 <spi_init+0x174>)
   289de:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   289e0:	697b      	ldr	r3, [r7, #20]
   289e2:	b2db      	uxtb	r3, r3
   289e4:	0018      	movs	r0, r3
   289e6:	4b3b      	ldr	r3, [pc, #236]	; (28ad4 <spi_init+0x178>)
   289e8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   289ea:	687b      	ldr	r3, [r7, #4]
   289ec:	2224      	movs	r2, #36	; 0x24
   289ee:	5c9b      	ldrb	r3, [r3, r2]
   289f0:	2100      	movs	r1, #0
   289f2:	0018      	movs	r0, r3
   289f4:	4b38      	ldr	r3, [pc, #224]	; (28ad8 <spi_init+0x17c>)
   289f6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   289f8:	687b      	ldr	r3, [r7, #4]
   289fa:	781b      	ldrb	r3, [r3, #0]
   289fc:	2b01      	cmp	r3, #1
   289fe:	d105      	bne.n	28a0c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   28a00:	6a3b      	ldr	r3, [r7, #32]
   28a02:	681b      	ldr	r3, [r3, #0]
   28a04:	220c      	movs	r2, #12
   28a06:	431a      	orrs	r2, r3
   28a08:	6a3b      	ldr	r3, [r7, #32]
   28a0a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28a0c:	2327      	movs	r3, #39	; 0x27
   28a0e:	18fb      	adds	r3, r7, r3
   28a10:	2200      	movs	r2, #0
   28a12:	701a      	strb	r2, [r3, #0]
   28a14:	e010      	b.n	28a38 <spi_init+0xdc>
		module->callback[i]        = NULL;
   28a16:	2327      	movs	r3, #39	; 0x27
   28a18:	18fb      	adds	r3, r7, r3
   28a1a:	781b      	ldrb	r3, [r3, #0]
   28a1c:	68fa      	ldr	r2, [r7, #12]
   28a1e:	3302      	adds	r3, #2
   28a20:	009b      	lsls	r3, r3, #2
   28a22:	18d3      	adds	r3, r2, r3
   28a24:	3304      	adds	r3, #4
   28a26:	2200      	movs	r2, #0
   28a28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28a2a:	2327      	movs	r3, #39	; 0x27
   28a2c:	18fb      	adds	r3, r7, r3
   28a2e:	781a      	ldrb	r2, [r3, #0]
   28a30:	2327      	movs	r3, #39	; 0x27
   28a32:	18fb      	adds	r3, r7, r3
   28a34:	3201      	adds	r2, #1
   28a36:	701a      	strb	r2, [r3, #0]
   28a38:	2327      	movs	r3, #39	; 0x27
   28a3a:	18fb      	adds	r3, r7, r3
   28a3c:	781b      	ldrb	r3, [r3, #0]
   28a3e:	2b06      	cmp	r3, #6
   28a40:	d9e9      	bls.n	28a16 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   28a42:	68fb      	ldr	r3, [r7, #12]
   28a44:	2200      	movs	r2, #0
   28a46:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   28a48:	68fb      	ldr	r3, [r7, #12]
   28a4a:	2200      	movs	r2, #0
   28a4c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   28a4e:	68fb      	ldr	r3, [r7, #12]
   28a50:	2200      	movs	r2, #0
   28a52:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   28a54:	68fb      	ldr	r3, [r7, #12]
   28a56:	2200      	movs	r2, #0
   28a58:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   28a5a:	68fb      	ldr	r3, [r7, #12]
   28a5c:	2236      	movs	r2, #54	; 0x36
   28a5e:	2100      	movs	r1, #0
   28a60:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   28a62:	68fb      	ldr	r3, [r7, #12]
   28a64:	2237      	movs	r2, #55	; 0x37
   28a66:	2100      	movs	r1, #0
   28a68:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   28a6a:	68fb      	ldr	r3, [r7, #12]
   28a6c:	2238      	movs	r2, #56	; 0x38
   28a6e:	2100      	movs	r1, #0
   28a70:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   28a72:	68fb      	ldr	r3, [r7, #12]
   28a74:	2203      	movs	r2, #3
   28a76:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   28a78:	68fb      	ldr	r3, [r7, #12]
   28a7a:	2200      	movs	r2, #0
   28a7c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   28a7e:	68fb      	ldr	r3, [r7, #12]
   28a80:	681b      	ldr	r3, [r3, #0]
   28a82:	2213      	movs	r2, #19
   28a84:	18bc      	adds	r4, r7, r2
   28a86:	0018      	movs	r0, r3
   28a88:	4b0e      	ldr	r3, [pc, #56]	; (28ac4 <spi_init+0x168>)
   28a8a:	4798      	blx	r3
   28a8c:	0003      	movs	r3, r0
   28a8e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   28a90:	4a12      	ldr	r2, [pc, #72]	; (28adc <spi_init+0x180>)
   28a92:	2313      	movs	r3, #19
   28a94:	18fb      	adds	r3, r7, r3
   28a96:	781b      	ldrb	r3, [r3, #0]
   28a98:	0011      	movs	r1, r2
   28a9a:	0018      	movs	r0, r3
   28a9c:	4b10      	ldr	r3, [pc, #64]	; (28ae0 <spi_init+0x184>)
   28a9e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28aa0:	2313      	movs	r3, #19
   28aa2:	18fb      	adds	r3, r7, r3
   28aa4:	781a      	ldrb	r2, [r3, #0]
   28aa6:	4b0f      	ldr	r3, [pc, #60]	; (28ae4 <spi_init+0x188>)
   28aa8:	0092      	lsls	r2, r2, #2
   28aaa:	68f9      	ldr	r1, [r7, #12]
   28aac:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   28aae:	687a      	ldr	r2, [r7, #4]
   28ab0:	68fb      	ldr	r3, [r7, #12]
   28ab2:	0011      	movs	r1, r2
   28ab4:	0018      	movs	r0, r3
   28ab6:	4b0c      	ldr	r3, [pc, #48]	; (28ae8 <spi_init+0x18c>)
   28ab8:	4798      	blx	r3
   28aba:	0003      	movs	r3, r0
}
   28abc:	0018      	movs	r0, r3
   28abe:	46bd      	mov	sp, r7
   28ac0:	b00b      	add	sp, #44	; 0x2c
   28ac2:	bd90      	pop	{r4, r7, pc}
   28ac4:	000280dd 	.word	0x000280dd
   28ac8:	00028399 	.word	0x00028399
   28acc:	00028381 	.word	0x00028381
   28ad0:	0002a96d 	.word	0x0002a96d
   28ad4:	0002a9b1 	.word	0x0002a9b1
   28ad8:	00027e95 	.word	0x00027e95
   28adc:	00028fb5 	.word	0x00028fb5
   28ae0:	00028141 	.word	0x00028141
   28ae4:	20005c9c 	.word	0x20005c9c
   28ae8:	0002874d 	.word	0x0002874d

00028aec <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   28aec:	b590      	push	{r4, r7, lr}
   28aee:	b087      	sub	sp, #28
   28af0:	af00      	add	r7, sp, #0
   28af2:	60f8      	str	r0, [r7, #12]
   28af4:	60b9      	str	r1, [r7, #8]
   28af6:	0019      	movs	r1, r3
   28af8:	1dbb      	adds	r3, r7, #6
   28afa:	801a      	strh	r2, [r3, #0]
   28afc:	1d3b      	adds	r3, r7, #4
   28afe:	1c0a      	adds	r2, r1, #0
   28b00:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28b02:	68fb      	ldr	r3, [r7, #12]
   28b04:	2238      	movs	r2, #56	; 0x38
   28b06:	5c9b      	ldrb	r3, [r3, r2]
   28b08:	b2db      	uxtb	r3, r3
   28b0a:	2b05      	cmp	r3, #5
   28b0c:	d101      	bne.n	28b12 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28b0e:	2305      	movs	r3, #5
   28b10:	e07a      	b.n	28c08 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   28b12:	1dbb      	adds	r3, r7, #6
   28b14:	881b      	ldrh	r3, [r3, #0]
   28b16:	2b00      	cmp	r3, #0
   28b18:	d101      	bne.n	28b1e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   28b1a:	2317      	movs	r3, #23
   28b1c:	e074      	b.n	28c08 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   28b1e:	68fb      	ldr	r3, [r7, #12]
   28b20:	79db      	ldrb	r3, [r3, #7]
   28b22:	2201      	movs	r2, #1
   28b24:	4053      	eors	r3, r2
   28b26:	b2db      	uxtb	r3, r3
   28b28:	2b00      	cmp	r3, #0
   28b2a:	d001      	beq.n	28b30 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   28b2c:	231c      	movs	r3, #28
   28b2e:	e06b      	b.n	28c08 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   28b30:	2316      	movs	r3, #22
   28b32:	18fb      	adds	r3, r7, r3
   28b34:	2200      	movs	r2, #0
   28b36:	801a      	strh	r2, [r3, #0]

	while (length--) {
   28b38:	e05e      	b.n	28bf8 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   28b3a:	68fb      	ldr	r3, [r7, #12]
   28b3c:	795b      	ldrb	r3, [r3, #5]
   28b3e:	2b01      	cmp	r3, #1
   28b40:	d112      	bne.n	28b68 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   28b42:	46c0      	nop			; (mov r8, r8)
   28b44:	68fb      	ldr	r3, [r7, #12]
   28b46:	0018      	movs	r0, r3
   28b48:	4b31      	ldr	r3, [pc, #196]	; (28c10 <spi_read_buffer_wait+0x124>)
   28b4a:	4798      	blx	r3
   28b4c:	0003      	movs	r3, r0
   28b4e:	001a      	movs	r2, r3
   28b50:	2301      	movs	r3, #1
   28b52:	4053      	eors	r3, r2
   28b54:	b2db      	uxtb	r3, r3
   28b56:	2b00      	cmp	r3, #0
   28b58:	d1f4      	bne.n	28b44 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   28b5a:	1d3b      	adds	r3, r7, #4
   28b5c:	881a      	ldrh	r2, [r3, #0]
   28b5e:	68fb      	ldr	r3, [r7, #12]
   28b60:	0011      	movs	r1, r2
   28b62:	0018      	movs	r0, r3
   28b64:	4b2b      	ldr	r3, [pc, #172]	; (28c14 <spi_read_buffer_wait+0x128>)
   28b66:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   28b68:	46c0      	nop			; (mov r8, r8)
   28b6a:	68fb      	ldr	r3, [r7, #12]
   28b6c:	0018      	movs	r0, r3
   28b6e:	4b2a      	ldr	r3, [pc, #168]	; (28c18 <spi_read_buffer_wait+0x12c>)
   28b70:	4798      	blx	r3
   28b72:	0003      	movs	r3, r0
   28b74:	001a      	movs	r2, r3
   28b76:	2301      	movs	r3, #1
   28b78:	4053      	eors	r3, r2
   28b7a:	b2db      	uxtb	r3, r3
   28b7c:	2b00      	cmp	r3, #0
   28b7e:	d1f4      	bne.n	28b6a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   28b80:	2312      	movs	r3, #18
   28b82:	18fb      	adds	r3, r7, r3
   28b84:	2200      	movs	r2, #0
   28b86:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   28b88:	2315      	movs	r3, #21
   28b8a:	18fc      	adds	r4, r7, r3
   28b8c:	2312      	movs	r3, #18
   28b8e:	18fa      	adds	r2, r7, r3
   28b90:	68fb      	ldr	r3, [r7, #12]
   28b92:	0011      	movs	r1, r2
   28b94:	0018      	movs	r0, r3
   28b96:	4b21      	ldr	r3, [pc, #132]	; (28c1c <spi_read_buffer_wait+0x130>)
   28b98:	4798      	blx	r3
   28b9a:	0003      	movs	r3, r0
   28b9c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   28b9e:	2315      	movs	r3, #21
   28ba0:	18fb      	adds	r3, r7, r3
   28ba2:	781b      	ldrb	r3, [r3, #0]
   28ba4:	2b00      	cmp	r3, #0
   28ba6:	d003      	beq.n	28bb0 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   28ba8:	2315      	movs	r3, #21
   28baa:	18fb      	adds	r3, r7, r3
   28bac:	781b      	ldrb	r3, [r3, #0]
   28bae:	e02b      	b.n	28c08 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   28bb0:	2316      	movs	r3, #22
   28bb2:	18fb      	adds	r3, r7, r3
   28bb4:	881b      	ldrh	r3, [r3, #0]
   28bb6:	2216      	movs	r2, #22
   28bb8:	18ba      	adds	r2, r7, r2
   28bba:	1c59      	adds	r1, r3, #1
   28bbc:	8011      	strh	r1, [r2, #0]
   28bbe:	001a      	movs	r2, r3
   28bc0:	68bb      	ldr	r3, [r7, #8]
   28bc2:	189b      	adds	r3, r3, r2
   28bc4:	2212      	movs	r2, #18
   28bc6:	18ba      	adds	r2, r7, r2
   28bc8:	8812      	ldrh	r2, [r2, #0]
   28bca:	b2d2      	uxtb	r2, r2
   28bcc:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28bce:	68fb      	ldr	r3, [r7, #12]
   28bd0:	799b      	ldrb	r3, [r3, #6]
   28bd2:	2b01      	cmp	r3, #1
   28bd4:	d110      	bne.n	28bf8 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   28bd6:	2316      	movs	r3, #22
   28bd8:	18fb      	adds	r3, r7, r3
   28bda:	881b      	ldrh	r3, [r3, #0]
   28bdc:	2216      	movs	r2, #22
   28bde:	18ba      	adds	r2, r7, r2
   28be0:	1c59      	adds	r1, r3, #1
   28be2:	8011      	strh	r1, [r2, #0]
   28be4:	001a      	movs	r2, r3
   28be6:	68bb      	ldr	r3, [r7, #8]
   28be8:	189b      	adds	r3, r3, r2
   28bea:	2212      	movs	r2, #18
   28bec:	18ba      	adds	r2, r7, r2
   28bee:	8812      	ldrh	r2, [r2, #0]
   28bf0:	0a12      	lsrs	r2, r2, #8
   28bf2:	b292      	uxth	r2, r2
   28bf4:	b2d2      	uxtb	r2, r2
   28bf6:	701a      	strb	r2, [r3, #0]
	while (length--) {
   28bf8:	1dbb      	adds	r3, r7, #6
   28bfa:	881b      	ldrh	r3, [r3, #0]
   28bfc:	1dba      	adds	r2, r7, #6
   28bfe:	1e59      	subs	r1, r3, #1
   28c00:	8011      	strh	r1, [r2, #0]
   28c02:	2b00      	cmp	r3, #0
   28c04:	d199      	bne.n	28b3a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   28c06:	2300      	movs	r3, #0
}
   28c08:	0018      	movs	r0, r3
   28c0a:	46bd      	mov	sp, r7
   28c0c:	b007      	add	sp, #28
   28c0e:	bd90      	pop	{r4, r7, pc}
   28c10:	00028565 	.word	0x00028565
   28c14:	000285b5 	.word	0x000285b5
   28c18:	0002858d 	.word	0x0002858d
   28c1c:	000285fd 	.word	0x000285fd

00028c20 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   28c20:	b580      	push	{r7, lr}
   28c22:	b086      	sub	sp, #24
   28c24:	af00      	add	r7, sp, #0
   28c26:	60f8      	str	r0, [r7, #12]
   28c28:	60b9      	str	r1, [r7, #8]
   28c2a:	1dfb      	adds	r3, r7, #7
   28c2c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   28c2e:	68fb      	ldr	r3, [r7, #12]
   28c30:	795b      	ldrb	r3, [r3, #5]
   28c32:	2b01      	cmp	r3, #1
   28c34:	d001      	beq.n	28c3a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   28c36:	2315      	movs	r3, #21
   28c38:	e05c      	b.n	28cf4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   28c3a:	68fb      	ldr	r3, [r7, #12]
   28c3c:	7a1b      	ldrb	r3, [r3, #8]
   28c3e:	2201      	movs	r2, #1
   28c40:	4053      	eors	r3, r2
   28c42:	b2db      	uxtb	r3, r3
   28c44:	2b00      	cmp	r3, #0
   28c46:	d054      	beq.n	28cf2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   28c48:	1dfb      	adds	r3, r7, #7
   28c4a:	781b      	ldrb	r3, [r3, #0]
   28c4c:	2b00      	cmp	r3, #0
   28c4e:	d04a      	beq.n	28ce6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   28c50:	68bb      	ldr	r3, [r7, #8]
   28c52:	785b      	ldrb	r3, [r3, #1]
   28c54:	2b00      	cmp	r3, #0
   28c56:	d03f      	beq.n	28cd8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   28c58:	68fb      	ldr	r3, [r7, #12]
   28c5a:	0018      	movs	r0, r3
   28c5c:	4b27      	ldr	r3, [pc, #156]	; (28cfc <spi_select_slave+0xdc>)
   28c5e:	4798      	blx	r3
   28c60:	0003      	movs	r3, r0
   28c62:	001a      	movs	r2, r3
   28c64:	2301      	movs	r3, #1
   28c66:	4053      	eors	r3, r2
   28c68:	b2db      	uxtb	r3, r3
   28c6a:	2b00      	cmp	r3, #0
   28c6c:	d007      	beq.n	28c7e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   28c6e:	68bb      	ldr	r3, [r7, #8]
   28c70:	781b      	ldrb	r3, [r3, #0]
   28c72:	2101      	movs	r1, #1
   28c74:	0018      	movs	r0, r3
   28c76:	4b22      	ldr	r3, [pc, #136]	; (28d00 <spi_select_slave+0xe0>)
   28c78:	4798      	blx	r3
					return STATUS_BUSY;
   28c7a:	2305      	movs	r3, #5
   28c7c:	e03a      	b.n	28cf4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28c7e:	68bb      	ldr	r3, [r7, #8]
   28c80:	781b      	ldrb	r3, [r3, #0]
   28c82:	2100      	movs	r1, #0
   28c84:	0018      	movs	r0, r3
   28c86:	4b1e      	ldr	r3, [pc, #120]	; (28d00 <spi_select_slave+0xe0>)
   28c88:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   28c8a:	68bb      	ldr	r3, [r7, #8]
   28c8c:	789b      	ldrb	r3, [r3, #2]
   28c8e:	b29a      	uxth	r2, r3
   28c90:	68fb      	ldr	r3, [r7, #12]
   28c92:	0011      	movs	r1, r2
   28c94:	0018      	movs	r0, r3
   28c96:	4b1b      	ldr	r3, [pc, #108]	; (28d04 <spi_select_slave+0xe4>)
   28c98:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   28c9a:	68fb      	ldr	r3, [r7, #12]
   28c9c:	79db      	ldrb	r3, [r3, #7]
   28c9e:	2201      	movs	r2, #1
   28ca0:	4053      	eors	r3, r2
   28ca2:	b2db      	uxtb	r3, r3
   28ca4:	2b00      	cmp	r3, #0
   28ca6:	d024      	beq.n	28cf2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   28ca8:	46c0      	nop			; (mov r8, r8)
   28caa:	68fb      	ldr	r3, [r7, #12]
   28cac:	0018      	movs	r0, r3
   28cae:	4b16      	ldr	r3, [pc, #88]	; (28d08 <spi_select_slave+0xe8>)
   28cb0:	4798      	blx	r3
   28cb2:	0003      	movs	r3, r0
   28cb4:	001a      	movs	r2, r3
   28cb6:	2301      	movs	r3, #1
   28cb8:	4053      	eors	r3, r2
   28cba:	b2db      	uxtb	r3, r3
   28cbc:	2b00      	cmp	r3, #0
   28cbe:	d1f4      	bne.n	28caa <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   28cc0:	2316      	movs	r3, #22
   28cc2:	18fb      	adds	r3, r7, r3
   28cc4:	2200      	movs	r2, #0
   28cc6:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   28cc8:	2316      	movs	r3, #22
   28cca:	18fa      	adds	r2, r7, r3
   28ccc:	68fb      	ldr	r3, [r7, #12]
   28cce:	0011      	movs	r1, r2
   28cd0:	0018      	movs	r0, r3
   28cd2:	4b0e      	ldr	r3, [pc, #56]	; (28d0c <spi_select_slave+0xec>)
   28cd4:	4798      	blx	r3
   28cd6:	e00c      	b.n	28cf2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28cd8:	68bb      	ldr	r3, [r7, #8]
   28cda:	781b      	ldrb	r3, [r3, #0]
   28cdc:	2100      	movs	r1, #0
   28cde:	0018      	movs	r0, r3
   28ce0:	4b07      	ldr	r3, [pc, #28]	; (28d00 <spi_select_slave+0xe0>)
   28ce2:	4798      	blx	r3
   28ce4:	e005      	b.n	28cf2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   28ce6:	68bb      	ldr	r3, [r7, #8]
   28ce8:	781b      	ldrb	r3, [r3, #0]
   28cea:	2101      	movs	r1, #1
   28cec:	0018      	movs	r0, r3
   28cee:	4b04      	ldr	r3, [pc, #16]	; (28d00 <spi_select_slave+0xe0>)
   28cf0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   28cf2:	2300      	movs	r3, #0
}
   28cf4:	0018      	movs	r0, r3
   28cf6:	46bd      	mov	sp, r7
   28cf8:	b006      	add	sp, #24
   28cfa:	bd80      	pop	{r7, pc}
   28cfc:	00028565 	.word	0x00028565
   28d00:	0002832d 	.word	0x0002832d
   28d04:	000285b5 	.word	0x000285b5
   28d08:	0002858d 	.word	0x0002858d
   28d0c:	000285fd 	.word	0x000285fd

00028d10 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   28d10:	b580      	push	{r7, lr}
   28d12:	b086      	sub	sp, #24
   28d14:	af00      	add	r7, sp, #0
   28d16:	60f8      	str	r0, [r7, #12]
   28d18:	60b9      	str	r1, [r7, #8]
   28d1a:	1dbb      	adds	r3, r7, #6
   28d1c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28d1e:	68fb      	ldr	r3, [r7, #12]
   28d20:	2238      	movs	r2, #56	; 0x38
   28d22:	5c9b      	ldrb	r3, [r3, r2]
   28d24:	b2db      	uxtb	r3, r3
   28d26:	2b05      	cmp	r3, #5
   28d28:	d101      	bne.n	28d2e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28d2a:	2305      	movs	r3, #5
   28d2c:	e087      	b.n	28e3e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   28d2e:	1dbb      	adds	r3, r7, #6
   28d30:	881b      	ldrh	r3, [r3, #0]
   28d32:	2b00      	cmp	r3, #0
   28d34:	d101      	bne.n	28d3a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   28d36:	2317      	movs	r3, #23
   28d38:	e081      	b.n	28e3e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   28d3a:	2316      	movs	r3, #22
   28d3c:	18fb      	adds	r3, r7, r3
   28d3e:	2200      	movs	r2, #0
   28d40:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   28d42:	2314      	movs	r3, #20
   28d44:	18fb      	adds	r3, r7, r3
   28d46:	1dba      	adds	r2, r7, #6
   28d48:	8812      	ldrh	r2, [r2, #0]
   28d4a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   28d4c:	e05f      	b.n	28e0e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   28d4e:	46c0      	nop			; (mov r8, r8)
   28d50:	68fb      	ldr	r3, [r7, #12]
   28d52:	0018      	movs	r0, r3
   28d54:	4b3c      	ldr	r3, [pc, #240]	; (28e48 <spi_write_buffer_wait+0x138>)
   28d56:	4798      	blx	r3
   28d58:	0003      	movs	r3, r0
   28d5a:	001a      	movs	r2, r3
   28d5c:	2301      	movs	r3, #1
   28d5e:	4053      	eors	r3, r2
   28d60:	b2db      	uxtb	r3, r3
   28d62:	2b00      	cmp	r3, #0
   28d64:	d1f4      	bne.n	28d50 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   28d66:	2316      	movs	r3, #22
   28d68:	18fb      	adds	r3, r7, r3
   28d6a:	881b      	ldrh	r3, [r3, #0]
   28d6c:	2216      	movs	r2, #22
   28d6e:	18ba      	adds	r2, r7, r2
   28d70:	1c59      	adds	r1, r3, #1
   28d72:	8011      	strh	r1, [r2, #0]
   28d74:	001a      	movs	r2, r3
   28d76:	68bb      	ldr	r3, [r7, #8]
   28d78:	189b      	adds	r3, r3, r2
   28d7a:	781a      	ldrb	r2, [r3, #0]
   28d7c:	2312      	movs	r3, #18
   28d7e:	18fb      	adds	r3, r7, r3
   28d80:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28d82:	68fb      	ldr	r3, [r7, #12]
   28d84:	799b      	ldrb	r3, [r3, #6]
   28d86:	2b01      	cmp	r3, #1
   28d88:	d115      	bne.n	28db6 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   28d8a:	2316      	movs	r3, #22
   28d8c:	18fb      	adds	r3, r7, r3
   28d8e:	881b      	ldrh	r3, [r3, #0]
   28d90:	2216      	movs	r2, #22
   28d92:	18ba      	adds	r2, r7, r2
   28d94:	1c59      	adds	r1, r3, #1
   28d96:	8011      	strh	r1, [r2, #0]
   28d98:	001a      	movs	r2, r3
   28d9a:	68bb      	ldr	r3, [r7, #8]
   28d9c:	189b      	adds	r3, r3, r2
   28d9e:	781b      	ldrb	r3, [r3, #0]
   28da0:	021b      	lsls	r3, r3, #8
   28da2:	b21a      	sxth	r2, r3
   28da4:	2312      	movs	r3, #18
   28da6:	18fb      	adds	r3, r7, r3
   28da8:	2100      	movs	r1, #0
   28daa:	5e5b      	ldrsh	r3, [r3, r1]
   28dac:	4313      	orrs	r3, r2
   28dae:	b21a      	sxth	r2, r3
   28db0:	2312      	movs	r3, #18
   28db2:	18fb      	adds	r3, r7, r3
   28db4:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   28db6:	2312      	movs	r3, #18
   28db8:	18fb      	adds	r3, r7, r3
   28dba:	881a      	ldrh	r2, [r3, #0]
   28dbc:	68fb      	ldr	r3, [r7, #12]
   28dbe:	0011      	movs	r1, r2
   28dc0:	0018      	movs	r0, r3
   28dc2:	4b22      	ldr	r3, [pc, #136]	; (28e4c <spi_write_buffer_wait+0x13c>)
   28dc4:	4798      	blx	r3

		if (module->receiver_enabled) {
   28dc6:	68fb      	ldr	r3, [r7, #12]
   28dc8:	79db      	ldrb	r3, [r3, #7]
   28dca:	2214      	movs	r2, #20
   28dcc:	18ba      	adds	r2, r7, r2
   28dce:	2114      	movs	r1, #20
   28dd0:	1879      	adds	r1, r7, r1
   28dd2:	8809      	ldrh	r1, [r1, #0]
   28dd4:	8011      	strh	r1, [r2, #0]
   28dd6:	2b00      	cmp	r3, #0
   28dd8:	d019      	beq.n	28e0e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   28dda:	46c0      	nop			; (mov r8, r8)
   28ddc:	68fb      	ldr	r3, [r7, #12]
   28dde:	0018      	movs	r0, r3
   28de0:	4b1b      	ldr	r3, [pc, #108]	; (28e50 <spi_write_buffer_wait+0x140>)
   28de2:	4798      	blx	r3
   28de4:	0003      	movs	r3, r0
   28de6:	001a      	movs	r2, r3
   28de8:	2301      	movs	r3, #1
   28dea:	4053      	eors	r3, r2
   28dec:	b2db      	uxtb	r3, r3
   28dee:	2b00      	cmp	r3, #0
   28df0:	d1f4      	bne.n	28ddc <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   28df2:	2310      	movs	r3, #16
   28df4:	18fa      	adds	r2, r7, r3
   28df6:	68fb      	ldr	r3, [r7, #12]
   28df8:	0011      	movs	r1, r2
   28dfa:	0018      	movs	r0, r3
   28dfc:	4b15      	ldr	r3, [pc, #84]	; (28e54 <spi_write_buffer_wait+0x144>)
   28dfe:	4798      	blx	r3
			flush_length--;
   28e00:	2314      	movs	r3, #20
   28e02:	18fb      	adds	r3, r7, r3
   28e04:	881a      	ldrh	r2, [r3, #0]
   28e06:	2314      	movs	r3, #20
   28e08:	18fb      	adds	r3, r7, r3
   28e0a:	3a01      	subs	r2, #1
   28e0c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   28e0e:	1dbb      	adds	r3, r7, #6
   28e10:	881b      	ldrh	r3, [r3, #0]
   28e12:	1dba      	adds	r2, r7, #6
   28e14:	1e59      	subs	r1, r3, #1
   28e16:	8011      	strh	r1, [r2, #0]
   28e18:	2b00      	cmp	r3, #0
   28e1a:	d198      	bne.n	28d4e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   28e1c:	68fb      	ldr	r3, [r7, #12]
   28e1e:	795b      	ldrb	r3, [r3, #5]
   28e20:	2b01      	cmp	r3, #1
   28e22:	d10b      	bne.n	28e3c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   28e24:	46c0      	nop			; (mov r8, r8)
   28e26:	68fb      	ldr	r3, [r7, #12]
   28e28:	0018      	movs	r0, r3
   28e2a:	4b0b      	ldr	r3, [pc, #44]	; (28e58 <spi_write_buffer_wait+0x148>)
   28e2c:	4798      	blx	r3
   28e2e:	0003      	movs	r3, r0
   28e30:	001a      	movs	r2, r3
   28e32:	2301      	movs	r3, #1
   28e34:	4053      	eors	r3, r2
   28e36:	b2db      	uxtb	r3, r3
   28e38:	2b00      	cmp	r3, #0
   28e3a:	d1f4      	bne.n	28e26 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   28e3c:	2300      	movs	r3, #0
}
   28e3e:	0018      	movs	r0, r3
   28e40:	46bd      	mov	sp, r7
   28e42:	b006      	add	sp, #24
   28e44:	bd80      	pop	{r7, pc}
   28e46:	46c0      	nop			; (mov r8, r8)
   28e48:	00028565 	.word	0x00028565
   28e4c:	000285b5 	.word	0x000285b5
   28e50:	0002858d 	.word	0x0002858d
   28e54:	000285fd 	.word	0x000285fd
   28e58:	0002853d 	.word	0x0002853d

00028e5c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   28e5c:	b580      	push	{r7, lr}
   28e5e:	b084      	sub	sp, #16
   28e60:	af00      	add	r7, sp, #0
   28e62:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28e64:	687b      	ldr	r3, [r7, #4]
   28e66:	681b      	ldr	r3, [r3, #0]
   28e68:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   28e6a:	687b      	ldr	r3, [r7, #4]
   28e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28e6e:	781b      	ldrb	r3, [r3, #0]
   28e70:	b2da      	uxtb	r2, r3
   28e72:	230e      	movs	r3, #14
   28e74:	18fb      	adds	r3, r7, r3
   28e76:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   28e78:	687b      	ldr	r3, [r7, #4]
   28e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28e7c:	1c5a      	adds	r2, r3, #1
   28e7e:	687b      	ldr	r3, [r7, #4]
   28e80:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28e82:	687b      	ldr	r3, [r7, #4]
   28e84:	799b      	ldrb	r3, [r3, #6]
   28e86:	2b01      	cmp	r3, #1
   28e88:	d113      	bne.n	28eb2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   28e8a:	687b      	ldr	r3, [r7, #4]
   28e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28e8e:	781b      	ldrb	r3, [r3, #0]
   28e90:	b2db      	uxtb	r3, r3
   28e92:	021b      	lsls	r3, r3, #8
   28e94:	b21a      	sxth	r2, r3
   28e96:	230e      	movs	r3, #14
   28e98:	18fb      	adds	r3, r7, r3
   28e9a:	2100      	movs	r1, #0
   28e9c:	5e5b      	ldrsh	r3, [r3, r1]
   28e9e:	4313      	orrs	r3, r2
   28ea0:	b21a      	sxth	r2, r3
   28ea2:	230e      	movs	r3, #14
   28ea4:	18fb      	adds	r3, r7, r3
   28ea6:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   28ea8:	687b      	ldr	r3, [r7, #4]
   28eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28eac:	1c5a      	adds	r2, r3, #1
   28eae:	687b      	ldr	r3, [r7, #4]
   28eb0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   28eb2:	230e      	movs	r3, #14
   28eb4:	18fb      	adds	r3, r7, r3
   28eb6:	881b      	ldrh	r3, [r3, #0]
   28eb8:	05db      	lsls	r3, r3, #23
   28eba:	0dda      	lsrs	r2, r3, #23
   28ebc:	68bb      	ldr	r3, [r7, #8]
   28ebe:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   28ec0:	687b      	ldr	r3, [r7, #4]
   28ec2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28ec4:	b29b      	uxth	r3, r3
   28ec6:	3b01      	subs	r3, #1
   28ec8:	b29a      	uxth	r2, r3
   28eca:	687b      	ldr	r3, [r7, #4]
   28ecc:	869a      	strh	r2, [r3, #52]	; 0x34
}
   28ece:	46c0      	nop			; (mov r8, r8)
   28ed0:	46bd      	mov	sp, r7
   28ed2:	b004      	add	sp, #16
   28ed4:	bd80      	pop	{r7, pc}
	...

00028ed8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   28ed8:	b580      	push	{r7, lr}
   28eda:	b084      	sub	sp, #16
   28edc:	af00      	add	r7, sp, #0
   28ede:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28ee0:	687b      	ldr	r3, [r7, #4]
   28ee2:	681b      	ldr	r3, [r3, #0]
   28ee4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   28ee6:	4b08      	ldr	r3, [pc, #32]	; (28f08 <_spi_write_dummy+0x30>)
   28ee8:	881b      	ldrh	r3, [r3, #0]
   28eea:	001a      	movs	r2, r3
   28eec:	68fb      	ldr	r3, [r7, #12]
   28eee:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28ef0:	687b      	ldr	r3, [r7, #4]
   28ef2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28ef4:	b29b      	uxth	r3, r3
   28ef6:	3b01      	subs	r3, #1
   28ef8:	b29a      	uxth	r2, r3
   28efa:	687b      	ldr	r3, [r7, #4]
   28efc:	865a      	strh	r2, [r3, #50]	; 0x32
}
   28efe:	46c0      	nop			; (mov r8, r8)
   28f00:	46bd      	mov	sp, r7
   28f02:	b004      	add	sp, #16
   28f04:	bd80      	pop	{r7, pc}
   28f06:	46c0      	nop			; (mov r8, r8)
   28f08:	20005cb4 	.word	0x20005cb4

00028f0c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   28f0c:	b580      	push	{r7, lr}
   28f0e:	b084      	sub	sp, #16
   28f10:	af00      	add	r7, sp, #0
   28f12:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28f14:	687b      	ldr	r3, [r7, #4]
   28f16:	681b      	ldr	r3, [r3, #0]
   28f18:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   28f1a:	230a      	movs	r3, #10
   28f1c:	18fb      	adds	r3, r7, r3
   28f1e:	2200      	movs	r2, #0
   28f20:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   28f22:	68fb      	ldr	r3, [r7, #12]
   28f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   28f26:	230a      	movs	r3, #10
   28f28:	18fb      	adds	r3, r7, r3
   28f2a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28f2c:	687b      	ldr	r3, [r7, #4]
   28f2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28f30:	b29b      	uxth	r3, r3
   28f32:	3b01      	subs	r3, #1
   28f34:	b29a      	uxth	r2, r3
   28f36:	687b      	ldr	r3, [r7, #4]
   28f38:	865a      	strh	r2, [r3, #50]	; 0x32
}
   28f3a:	46c0      	nop			; (mov r8, r8)
   28f3c:	46bd      	mov	sp, r7
   28f3e:	b004      	add	sp, #16
   28f40:	bd80      	pop	{r7, pc}

00028f42 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   28f42:	b580      	push	{r7, lr}
   28f44:	b084      	sub	sp, #16
   28f46:	af00      	add	r7, sp, #0
   28f48:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28f4a:	687b      	ldr	r3, [r7, #4]
   28f4c:	681b      	ldr	r3, [r3, #0]
   28f4e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   28f50:	68fb      	ldr	r3, [r7, #12]
   28f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f54:	b29a      	uxth	r2, r3
   28f56:	230a      	movs	r3, #10
   28f58:	18fb      	adds	r3, r7, r3
   28f5a:	05d2      	lsls	r2, r2, #23
   28f5c:	0dd2      	lsrs	r2, r2, #23
   28f5e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   28f60:	687b      	ldr	r3, [r7, #4]
   28f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f64:	220a      	movs	r2, #10
   28f66:	18ba      	adds	r2, r7, r2
   28f68:	8812      	ldrh	r2, [r2, #0]
   28f6a:	b2d2      	uxtb	r2, r2
   28f6c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   28f6e:	687b      	ldr	r3, [r7, #4]
   28f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f72:	1c5a      	adds	r2, r3, #1
   28f74:	687b      	ldr	r3, [r7, #4]
   28f76:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28f78:	687b      	ldr	r3, [r7, #4]
   28f7a:	799b      	ldrb	r3, [r3, #6]
   28f7c:	2b01      	cmp	r3, #1
   28f7e:	d10d      	bne.n	28f9c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   28f80:	687b      	ldr	r3, [r7, #4]
   28f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f84:	220a      	movs	r2, #10
   28f86:	18ba      	adds	r2, r7, r2
   28f88:	8812      	ldrh	r2, [r2, #0]
   28f8a:	0a12      	lsrs	r2, r2, #8
   28f8c:	b292      	uxth	r2, r2
   28f8e:	b2d2      	uxtb	r2, r2
   28f90:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   28f92:	687b      	ldr	r3, [r7, #4]
   28f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f96:	1c5a      	adds	r2, r3, #1
   28f98:	687b      	ldr	r3, [r7, #4]
   28f9a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   28f9c:	687b      	ldr	r3, [r7, #4]
   28f9e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   28fa0:	b29b      	uxth	r3, r3
   28fa2:	3b01      	subs	r3, #1
   28fa4:	b29a      	uxth	r2, r3
   28fa6:	687b      	ldr	r3, [r7, #4]
   28fa8:	861a      	strh	r2, [r3, #48]	; 0x30
}
   28faa:	46c0      	nop			; (mov r8, r8)
   28fac:	46bd      	mov	sp, r7
   28fae:	b004      	add	sp, #16
   28fb0:	bd80      	pop	{r7, pc}
	...

00028fb4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   28fb4:	b580      	push	{r7, lr}
   28fb6:	b086      	sub	sp, #24
   28fb8:	af00      	add	r7, sp, #0
   28fba:	0002      	movs	r2, r0
   28fbc:	1dfb      	adds	r3, r7, #7
   28fbe:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   28fc0:	1dfb      	adds	r3, r7, #7
   28fc2:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   28fc4:	4b96      	ldr	r3, [pc, #600]	; (29220 <_spi_interrupt_handler+0x26c>)
   28fc6:	0092      	lsls	r2, r2, #2
   28fc8:	58d3      	ldr	r3, [r2, r3]
   28fca:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28fcc:	697b      	ldr	r3, [r7, #20]
   28fce:	681b      	ldr	r3, [r3, #0]
   28fd0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   28fd2:	697b      	ldr	r3, [r7, #20]
   28fd4:	2237      	movs	r2, #55	; 0x37
   28fd6:	5c9a      	ldrb	r2, [r3, r2]
   28fd8:	697b      	ldr	r3, [r7, #20]
   28fda:	2136      	movs	r1, #54	; 0x36
   28fdc:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   28fde:	230f      	movs	r3, #15
   28fe0:	18fb      	adds	r3, r7, r3
   28fe2:	400a      	ands	r2, r1
   28fe4:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   28fe6:	693b      	ldr	r3, [r7, #16]
   28fe8:	7e1b      	ldrb	r3, [r3, #24]
   28fea:	b2da      	uxtb	r2, r3
   28fec:	230c      	movs	r3, #12
   28fee:	18fb      	adds	r3, r7, r3
   28ff0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   28ff2:	693b      	ldr	r3, [r7, #16]
   28ff4:	7d9b      	ldrb	r3, [r3, #22]
   28ff6:	b2db      	uxtb	r3, r3
   28ff8:	b29a      	uxth	r2, r3
   28ffa:	230c      	movs	r3, #12
   28ffc:	18fb      	adds	r3, r7, r3
   28ffe:	210c      	movs	r1, #12
   29000:	1879      	adds	r1, r7, r1
   29002:	8809      	ldrh	r1, [r1, #0]
   29004:	400a      	ands	r2, r1
   29006:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   29008:	230c      	movs	r3, #12
   2900a:	18fb      	adds	r3, r7, r3
   2900c:	881b      	ldrh	r3, [r3, #0]
   2900e:	2201      	movs	r2, #1
   29010:	4013      	ands	r3, r2
   29012:	d038      	beq.n	29086 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   29014:	697b      	ldr	r3, [r7, #20]
   29016:	795b      	ldrb	r3, [r3, #5]
   29018:	2b01      	cmp	r3, #1
   2901a:	d110      	bne.n	2903e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   2901c:	697b      	ldr	r3, [r7, #20]
   2901e:	7a5b      	ldrb	r3, [r3, #9]
   29020:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   29022:	2b00      	cmp	r3, #0
   29024:	d10b      	bne.n	2903e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   29026:	697b      	ldr	r3, [r7, #20]
   29028:	0018      	movs	r0, r3
   2902a:	4b7e      	ldr	r3, [pc, #504]	; (29224 <_spi_interrupt_handler+0x270>)
   2902c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   2902e:	697b      	ldr	r3, [r7, #20]
   29030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   29032:	b29b      	uxth	r3, r3
   29034:	2b00      	cmp	r3, #0
   29036:	d102      	bne.n	2903e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   29038:	693b      	ldr	r3, [r7, #16]
   2903a:	2201      	movs	r2, #1
   2903c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   2903e:	697b      	ldr	r3, [r7, #20]
   29040:	795b      	ldrb	r3, [r3, #5]
		if (0
   29042:	2b01      	cmp	r3, #1
   29044:	d11f      	bne.n	29086 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   29046:	697b      	ldr	r3, [r7, #20]
   29048:	7a5b      	ldrb	r3, [r3, #9]
   2904a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   2904c:	2b00      	cmp	r3, #0
   2904e:	d01a      	beq.n	29086 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   29050:	697b      	ldr	r3, [r7, #20]
   29052:	0018      	movs	r0, r3
   29054:	4b74      	ldr	r3, [pc, #464]	; (29228 <_spi_interrupt_handler+0x274>)
   29056:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   29058:	697b      	ldr	r3, [r7, #20]
   2905a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2905c:	b29b      	uxth	r3, r3
   2905e:	2b00      	cmp	r3, #0
   29060:	d111      	bne.n	29086 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   29062:	693b      	ldr	r3, [r7, #16]
   29064:	2201      	movs	r2, #1
   29066:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   29068:	697b      	ldr	r3, [r7, #20]
   2906a:	7a5b      	ldrb	r3, [r3, #9]
   2906c:	b2db      	uxtb	r3, r3
   2906e:	2b01      	cmp	r3, #1
   29070:	d109      	bne.n	29086 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   29072:	697b      	ldr	r3, [r7, #20]
   29074:	79db      	ldrb	r3, [r3, #7]
   29076:	2201      	movs	r2, #1
   29078:	4053      	eors	r3, r2
   2907a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   2907c:	2b00      	cmp	r3, #0
   2907e:	d002      	beq.n	29086 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   29080:	693b      	ldr	r3, [r7, #16]
   29082:	2202      	movs	r2, #2
   29084:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   29086:	230c      	movs	r3, #12
   29088:	18fb      	adds	r3, r7, r3
   2908a:	881b      	ldrh	r3, [r3, #0]
   2908c:	2204      	movs	r2, #4
   2908e:	4013      	ands	r3, r2
   29090:	d100      	bne.n	29094 <_spi_interrupt_handler+0xe0>
   29092:	e07e      	b.n	29192 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   29094:	693b      	ldr	r3, [r7, #16]
   29096:	8b5b      	ldrh	r3, [r3, #26]
   29098:	b29b      	uxth	r3, r3
   2909a:	001a      	movs	r2, r3
   2909c:	2304      	movs	r3, #4
   2909e:	4013      	ands	r3, r2
   290a0:	d022      	beq.n	290e8 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   290a2:	697b      	ldr	r3, [r7, #20]
   290a4:	7a5b      	ldrb	r3, [r3, #9]
   290a6:	b2db      	uxtb	r3, r3
   290a8:	2b01      	cmp	r3, #1
   290aa:	d014      	beq.n	290d6 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   290ac:	697b      	ldr	r3, [r7, #20]
   290ae:	2238      	movs	r2, #56	; 0x38
   290b0:	211e      	movs	r1, #30
   290b2:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   290b4:	697b      	ldr	r3, [r7, #20]
   290b6:	2203      	movs	r2, #3
   290b8:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   290ba:	693b      	ldr	r3, [r7, #16]
   290bc:	2205      	movs	r2, #5
   290be:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   290c0:	230f      	movs	r3, #15
   290c2:	18fb      	adds	r3, r7, r3
   290c4:	781b      	ldrb	r3, [r3, #0]
   290c6:	2208      	movs	r2, #8
   290c8:	4013      	ands	r3, r2
   290ca:	d004      	beq.n	290d6 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   290cc:	697b      	ldr	r3, [r7, #20]
   290ce:	699b      	ldr	r3, [r3, #24]
   290d0:	697a      	ldr	r2, [r7, #20]
   290d2:	0010      	movs	r0, r2
   290d4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   290d6:	693b      	ldr	r3, [r7, #16]
   290d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   290da:	230a      	movs	r3, #10
   290dc:	18fb      	adds	r3, r7, r3
   290de:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   290e0:	693b      	ldr	r3, [r7, #16]
   290e2:	2204      	movs	r2, #4
   290e4:	835a      	strh	r2, [r3, #26]
   290e6:	e054      	b.n	29192 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   290e8:	697b      	ldr	r3, [r7, #20]
   290ea:	7a5b      	ldrb	r3, [r3, #9]
   290ec:	b2db      	uxtb	r3, r3
   290ee:	2b01      	cmp	r3, #1
   290f0:	d11e      	bne.n	29130 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   290f2:	697b      	ldr	r3, [r7, #20]
   290f4:	0018      	movs	r0, r3
   290f6:	4b4d      	ldr	r3, [pc, #308]	; (2922c <_spi_interrupt_handler+0x278>)
   290f8:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   290fa:	697b      	ldr	r3, [r7, #20]
   290fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   290fe:	b29b      	uxth	r3, r3
   29100:	2b00      	cmp	r3, #0
   29102:	d146      	bne.n	29192 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   29104:	693b      	ldr	r3, [r7, #16]
   29106:	2204      	movs	r2, #4
   29108:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   2910a:	697b      	ldr	r3, [r7, #20]
   2910c:	2238      	movs	r2, #56	; 0x38
   2910e:	2100      	movs	r1, #0
   29110:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   29112:	697b      	ldr	r3, [r7, #20]
   29114:	2203      	movs	r2, #3
   29116:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   29118:	230f      	movs	r3, #15
   2911a:	18fb      	adds	r3, r7, r3
   2911c:	781b      	ldrb	r3, [r3, #0]
   2911e:	2201      	movs	r2, #1
   29120:	4013      	ands	r3, r2
   29122:	d036      	beq.n	29192 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   29124:	697b      	ldr	r3, [r7, #20]
   29126:	68db      	ldr	r3, [r3, #12]
   29128:	697a      	ldr	r2, [r7, #20]
   2912a:	0010      	movs	r0, r2
   2912c:	4798      	blx	r3
   2912e:	e030      	b.n	29192 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   29130:	697b      	ldr	r3, [r7, #20]
   29132:	0018      	movs	r0, r3
   29134:	4b3e      	ldr	r3, [pc, #248]	; (29230 <_spi_interrupt_handler+0x27c>)
   29136:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   29138:	697b      	ldr	r3, [r7, #20]
   2913a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2913c:	b29b      	uxth	r3, r3
   2913e:	2b00      	cmp	r3, #0
   29140:	d127      	bne.n	29192 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   29142:	697b      	ldr	r3, [r7, #20]
   29144:	2238      	movs	r2, #56	; 0x38
   29146:	2100      	movs	r1, #0
   29148:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   2914a:	693b      	ldr	r3, [r7, #16]
   2914c:	2204      	movs	r2, #4
   2914e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   29150:	697b      	ldr	r3, [r7, #20]
   29152:	7a5b      	ldrb	r3, [r3, #9]
   29154:	b2db      	uxtb	r3, r3
   29156:	2b02      	cmp	r3, #2
   29158:	d10b      	bne.n	29172 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   2915a:	230f      	movs	r3, #15
   2915c:	18fb      	adds	r3, r7, r3
   2915e:	781b      	ldrb	r3, [r3, #0]
   29160:	2204      	movs	r2, #4
   29162:	4013      	ands	r3, r2
   29164:	d015      	beq.n	29192 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   29166:	697b      	ldr	r3, [r7, #20]
   29168:	695b      	ldr	r3, [r3, #20]
   2916a:	697a      	ldr	r2, [r7, #20]
   2916c:	0010      	movs	r0, r2
   2916e:	4798      	blx	r3
   29170:	e00f      	b.n	29192 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   29172:	697b      	ldr	r3, [r7, #20]
   29174:	7a5b      	ldrb	r3, [r3, #9]
   29176:	b2db      	uxtb	r3, r3
   29178:	2b00      	cmp	r3, #0
   2917a:	d10a      	bne.n	29192 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   2917c:	230f      	movs	r3, #15
   2917e:	18fb      	adds	r3, r7, r3
   29180:	781b      	ldrb	r3, [r3, #0]
   29182:	2202      	movs	r2, #2
   29184:	4013      	ands	r3, r2
   29186:	d004      	beq.n	29192 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   29188:	697b      	ldr	r3, [r7, #20]
   2918a:	691b      	ldr	r3, [r3, #16]
   2918c:	697a      	ldr	r2, [r7, #20]
   2918e:	0010      	movs	r0, r2
   29190:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   29192:	230c      	movs	r3, #12
   29194:	18fb      	adds	r3, r7, r3
   29196:	881b      	ldrh	r3, [r3, #0]
   29198:	2202      	movs	r2, #2
   2919a:	4013      	ands	r3, r2
   2919c:	d024      	beq.n	291e8 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2919e:	697b      	ldr	r3, [r7, #20]
   291a0:	795b      	ldrb	r3, [r3, #5]
   291a2:	2b01      	cmp	r3, #1
   291a4:	d120      	bne.n	291e8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   291a6:	697b      	ldr	r3, [r7, #20]
   291a8:	7a5b      	ldrb	r3, [r3, #9]
   291aa:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   291ac:	2b01      	cmp	r3, #1
   291ae:	d11b      	bne.n	291e8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   291b0:	697b      	ldr	r3, [r7, #20]
   291b2:	79db      	ldrb	r3, [r3, #7]
   291b4:	2201      	movs	r2, #1
   291b6:	4053      	eors	r3, r2
   291b8:	b2db      	uxtb	r3, r3
   291ba:	2b00      	cmp	r3, #0
   291bc:	d014      	beq.n	291e8 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   291be:	693b      	ldr	r3, [r7, #16]
   291c0:	2202      	movs	r2, #2
   291c2:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   291c4:	697b      	ldr	r3, [r7, #20]
   291c6:	2203      	movs	r2, #3
   291c8:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   291ca:	697b      	ldr	r3, [r7, #20]
   291cc:	2238      	movs	r2, #56	; 0x38
   291ce:	2100      	movs	r1, #0
   291d0:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   291d2:	230f      	movs	r3, #15
   291d4:	18fb      	adds	r3, r7, r3
   291d6:	781b      	ldrb	r3, [r3, #0]
   291d8:	2201      	movs	r2, #1
   291da:	4013      	ands	r3, r2
   291dc:	d004      	beq.n	291e8 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   291de:	697b      	ldr	r3, [r7, #20]
   291e0:	68db      	ldr	r3, [r3, #12]
   291e2:	697a      	ldr	r2, [r7, #20]
   291e4:	0010      	movs	r0, r2
   291e6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   291e8:	230c      	movs	r3, #12
   291ea:	18fb      	adds	r3, r7, r3
   291ec:	881b      	ldrh	r3, [r3, #0]
   291ee:	2280      	movs	r2, #128	; 0x80
   291f0:	4013      	ands	r3, r2
   291f2:	d010      	beq.n	29216 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   291f4:	693b      	ldr	r3, [r7, #16]
   291f6:	2280      	movs	r2, #128	; 0x80
   291f8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   291fa:	693b      	ldr	r3, [r7, #16]
   291fc:	2280      	movs	r2, #128	; 0x80
   291fe:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   29200:	230f      	movs	r3, #15
   29202:	18fb      	adds	r3, r7, r3
   29204:	781b      	ldrb	r3, [r3, #0]
   29206:	2240      	movs	r2, #64	; 0x40
   29208:	4013      	ands	r3, r2
   2920a:	d004      	beq.n	29216 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   2920c:	697b      	ldr	r3, [r7, #20]
   2920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29210:	697a      	ldr	r2, [r7, #20]
   29212:	0010      	movs	r0, r2
   29214:	4798      	blx	r3
		}
	}
#  endif
}
   29216:	46c0      	nop			; (mov r8, r8)
   29218:	46bd      	mov	sp, r7
   2921a:	b006      	add	sp, #24
   2921c:	bd80      	pop	{r7, pc}
   2921e:	46c0      	nop			; (mov r8, r8)
   29220:	20005c9c 	.word	0x20005c9c
   29224:	00028ed9 	.word	0x00028ed9
   29228:	00028e5d 	.word	0x00028e5d
   2922c:	00028f0d 	.word	0x00028f0d
   29230:	00028f43 	.word	0x00028f43

00029234 <system_gclk_chan_get_config_defaults>:
{
   29234:	b580      	push	{r7, lr}
   29236:	b082      	sub	sp, #8
   29238:	af00      	add	r7, sp, #0
   2923a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2923c:	687b      	ldr	r3, [r7, #4]
   2923e:	2200      	movs	r2, #0
   29240:	701a      	strb	r2, [r3, #0]
}
   29242:	46c0      	nop			; (mov r8, r8)
   29244:	46bd      	mov	sp, r7
   29246:	b002      	add	sp, #8
   29248:	bd80      	pop	{r7, pc}
	...

0002924c <system_apb_clock_set_mask>:
{
   2924c:	b580      	push	{r7, lr}
   2924e:	b082      	sub	sp, #8
   29250:	af00      	add	r7, sp, #0
   29252:	0002      	movs	r2, r0
   29254:	6039      	str	r1, [r7, #0]
   29256:	1dfb      	adds	r3, r7, #7
   29258:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2925a:	1dfb      	adds	r3, r7, #7
   2925c:	781b      	ldrb	r3, [r3, #0]
   2925e:	2b01      	cmp	r3, #1
   29260:	d00a      	beq.n	29278 <system_apb_clock_set_mask+0x2c>
   29262:	2b02      	cmp	r3, #2
   29264:	d00f      	beq.n	29286 <system_apb_clock_set_mask+0x3a>
   29266:	2b00      	cmp	r3, #0
   29268:	d114      	bne.n	29294 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2926a:	4b0e      	ldr	r3, [pc, #56]	; (292a4 <system_apb_clock_set_mask+0x58>)
   2926c:	4a0d      	ldr	r2, [pc, #52]	; (292a4 <system_apb_clock_set_mask+0x58>)
   2926e:	6991      	ldr	r1, [r2, #24]
   29270:	683a      	ldr	r2, [r7, #0]
   29272:	430a      	orrs	r2, r1
   29274:	619a      	str	r2, [r3, #24]
			break;
   29276:	e00f      	b.n	29298 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29278:	4b0a      	ldr	r3, [pc, #40]	; (292a4 <system_apb_clock_set_mask+0x58>)
   2927a:	4a0a      	ldr	r2, [pc, #40]	; (292a4 <system_apb_clock_set_mask+0x58>)
   2927c:	69d1      	ldr	r1, [r2, #28]
   2927e:	683a      	ldr	r2, [r7, #0]
   29280:	430a      	orrs	r2, r1
   29282:	61da      	str	r2, [r3, #28]
			break;
   29284:	e008      	b.n	29298 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29286:	4b07      	ldr	r3, [pc, #28]	; (292a4 <system_apb_clock_set_mask+0x58>)
   29288:	4a06      	ldr	r2, [pc, #24]	; (292a4 <system_apb_clock_set_mask+0x58>)
   2928a:	6a11      	ldr	r1, [r2, #32]
   2928c:	683a      	ldr	r2, [r7, #0]
   2928e:	430a      	orrs	r2, r1
   29290:	621a      	str	r2, [r3, #32]
			break;
   29292:	e001      	b.n	29298 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29294:	2317      	movs	r3, #23
   29296:	e000      	b.n	2929a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29298:	2300      	movs	r3, #0
}
   2929a:	0018      	movs	r0, r3
   2929c:	46bd      	mov	sp, r7
   2929e:	b002      	add	sp, #8
   292a0:	bd80      	pop	{r7, pc}
   292a2:	46c0      	nop			; (mov r8, r8)
   292a4:	40000400 	.word	0x40000400

000292a8 <system_pinmux_get_config_defaults>:
{
   292a8:	b580      	push	{r7, lr}
   292aa:	b082      	sub	sp, #8
   292ac:	af00      	add	r7, sp, #0
   292ae:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   292b0:	687b      	ldr	r3, [r7, #4]
   292b2:	2280      	movs	r2, #128	; 0x80
   292b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   292b6:	687b      	ldr	r3, [r7, #4]
   292b8:	2200      	movs	r2, #0
   292ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   292bc:	687b      	ldr	r3, [r7, #4]
   292be:	2201      	movs	r2, #1
   292c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   292c2:	687b      	ldr	r3, [r7, #4]
   292c4:	2200      	movs	r2, #0
   292c6:	70da      	strb	r2, [r3, #3]
}
   292c8:	46c0      	nop			; (mov r8, r8)
   292ca:	46bd      	mov	sp, r7
   292cc:	b002      	add	sp, #8
   292ce:	bd80      	pop	{r7, pc}

000292d0 <system_is_debugger_present>:
{
   292d0:	b580      	push	{r7, lr}
   292d2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   292d4:	4b05      	ldr	r3, [pc, #20]	; (292ec <system_is_debugger_present+0x1c>)
   292d6:	789b      	ldrb	r3, [r3, #2]
   292d8:	b2db      	uxtb	r3, r3
   292da:	001a      	movs	r2, r3
   292dc:	2302      	movs	r3, #2
   292de:	4013      	ands	r3, r2
   292e0:	1e5a      	subs	r2, r3, #1
   292e2:	4193      	sbcs	r3, r2
   292e4:	b2db      	uxtb	r3, r3
}
   292e6:	0018      	movs	r0, r3
   292e8:	46bd      	mov	sp, r7
   292ea:	bd80      	pop	{r7, pc}
   292ec:	41002000 	.word	0x41002000

000292f0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   292f0:	b580      	push	{r7, lr}
   292f2:	b084      	sub	sp, #16
   292f4:	af00      	add	r7, sp, #0
   292f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   292f8:	687b      	ldr	r3, [r7, #4]
   292fa:	681b      	ldr	r3, [r3, #0]
   292fc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   292fe:	68fb      	ldr	r3, [r7, #12]
   29300:	69db      	ldr	r3, [r3, #28]
   29302:	1e5a      	subs	r2, r3, #1
   29304:	4193      	sbcs	r3, r2
   29306:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   29308:	0018      	movs	r0, r3
   2930a:	46bd      	mov	sp, r7
   2930c:	b004      	add	sp, #16
   2930e:	bd80      	pop	{r7, pc}

00029310 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   29310:	b580      	push	{r7, lr}
   29312:	b082      	sub	sp, #8
   29314:	af00      	add	r7, sp, #0
   29316:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   29318:	46c0      	nop			; (mov r8, r8)
   2931a:	687b      	ldr	r3, [r7, #4]
   2931c:	0018      	movs	r0, r3
   2931e:	4b04      	ldr	r3, [pc, #16]	; (29330 <_usart_wait_for_sync+0x20>)
   29320:	4798      	blx	r3
   29322:	1e03      	subs	r3, r0, #0
   29324:	d1f9      	bne.n	2931a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   29326:	46c0      	nop			; (mov r8, r8)
   29328:	46bd      	mov	sp, r7
   2932a:	b002      	add	sp, #8
   2932c:	bd80      	pop	{r7, pc}
   2932e:	46c0      	nop			; (mov r8, r8)
   29330:	000292f1 	.word	0x000292f1

00029334 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   29334:	b5b0      	push	{r4, r5, r7, lr}
   29336:	b08c      	sub	sp, #48	; 0x30
   29338:	af02      	add	r7, sp, #8
   2933a:	6078      	str	r0, [r7, #4]
   2933c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2933e:	687b      	ldr	r3, [r7, #4]
   29340:	681b      	ldr	r3, [r3, #0]
   29342:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29344:	687b      	ldr	r3, [r7, #4]
   29346:	681b      	ldr	r3, [r3, #0]
   29348:	0018      	movs	r0, r3
   2934a:	4bab      	ldr	r3, [pc, #684]	; (295f8 <_usart_set_config+0x2c4>)
   2934c:	4798      	blx	r3
   2934e:	0003      	movs	r3, r0
   29350:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29352:	697b      	ldr	r3, [r7, #20]
   29354:	3314      	adds	r3, #20
   29356:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   29358:	2300      	movs	r3, #0
   2935a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2935c:	2300      	movs	r3, #0
   2935e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   29360:	230a      	movs	r3, #10
   29362:	18fb      	adds	r3, r7, r3
   29364:	2200      	movs	r2, #0
   29366:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   29368:	231f      	movs	r3, #31
   2936a:	18fb      	adds	r3, r7, r3
   2936c:	2200      	movs	r2, #0
   2936e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   29370:	231e      	movs	r3, #30
   29372:	18fb      	adds	r3, r7, r3
   29374:	2210      	movs	r2, #16
   29376:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   29378:	683b      	ldr	r3, [r7, #0]
   2937a:	8a1b      	ldrh	r3, [r3, #16]
   2937c:	2280      	movs	r2, #128	; 0x80
   2937e:	01d2      	lsls	r2, r2, #7
   29380:	4293      	cmp	r3, r2
   29382:	d01c      	beq.n	293be <_usart_set_config+0x8a>
   29384:	2280      	movs	r2, #128	; 0x80
   29386:	01d2      	lsls	r2, r2, #7
   29388:	4293      	cmp	r3, r2
   2938a:	dc06      	bgt.n	2939a <_usart_set_config+0x66>
   2938c:	2b00      	cmp	r3, #0
   2938e:	d00d      	beq.n	293ac <_usart_set_config+0x78>
   29390:	2280      	movs	r2, #128	; 0x80
   29392:	0192      	lsls	r2, r2, #6
   29394:	4293      	cmp	r3, r2
   29396:	d024      	beq.n	293e2 <_usart_set_config+0xae>
   29398:	e035      	b.n	29406 <_usart_set_config+0xd2>
   2939a:	22c0      	movs	r2, #192	; 0xc0
   2939c:	01d2      	lsls	r2, r2, #7
   2939e:	4293      	cmp	r3, r2
   293a0:	d028      	beq.n	293f4 <_usart_set_config+0xc0>
   293a2:	2280      	movs	r2, #128	; 0x80
   293a4:	0212      	lsls	r2, r2, #8
   293a6:	4293      	cmp	r3, r2
   293a8:	d012      	beq.n	293d0 <_usart_set_config+0x9c>
   293aa:	e02c      	b.n	29406 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   293ac:	231f      	movs	r3, #31
   293ae:	18fb      	adds	r3, r7, r3
   293b0:	2200      	movs	r2, #0
   293b2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   293b4:	231e      	movs	r3, #30
   293b6:	18fb      	adds	r3, r7, r3
   293b8:	2210      	movs	r2, #16
   293ba:	701a      	strb	r2, [r3, #0]
			break;
   293bc:	e023      	b.n	29406 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   293be:	231f      	movs	r3, #31
   293c0:	18fb      	adds	r3, r7, r3
   293c2:	2200      	movs	r2, #0
   293c4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   293c6:	231e      	movs	r3, #30
   293c8:	18fb      	adds	r3, r7, r3
   293ca:	2208      	movs	r2, #8
   293cc:	701a      	strb	r2, [r3, #0]
			break;
   293ce:	e01a      	b.n	29406 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   293d0:	231f      	movs	r3, #31
   293d2:	18fb      	adds	r3, r7, r3
   293d4:	2200      	movs	r2, #0
   293d6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   293d8:	231e      	movs	r3, #30
   293da:	18fb      	adds	r3, r7, r3
   293dc:	2203      	movs	r2, #3
   293de:	701a      	strb	r2, [r3, #0]
			break;
   293e0:	e011      	b.n	29406 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   293e2:	231f      	movs	r3, #31
   293e4:	18fb      	adds	r3, r7, r3
   293e6:	2201      	movs	r2, #1
   293e8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   293ea:	231e      	movs	r3, #30
   293ec:	18fb      	adds	r3, r7, r3
   293ee:	2210      	movs	r2, #16
   293f0:	701a      	strb	r2, [r3, #0]
			break;
   293f2:	e008      	b.n	29406 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   293f4:	231f      	movs	r3, #31
   293f6:	18fb      	adds	r3, r7, r3
   293f8:	2201      	movs	r2, #1
   293fa:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   293fc:	231e      	movs	r3, #30
   293fe:	18fb      	adds	r3, r7, r3
   29400:	2208      	movs	r2, #8
   29402:	701a      	strb	r2, [r3, #0]
			break;
   29404:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   29406:	683b      	ldr	r3, [r7, #0]
   29408:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2940a:	683b      	ldr	r3, [r7, #0]
   2940c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2940e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   29410:	683b      	ldr	r3, [r7, #0]
   29412:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   29414:	4313      	orrs	r3, r2
		config->sample_rate |
   29416:	683a      	ldr	r2, [r7, #0]
   29418:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2941a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2941c:	683a      	ldr	r2, [r7, #0]
   2941e:	7e12      	ldrb	r2, [r2, #24]
   29420:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   29422:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   29424:	683a      	ldr	r2, [r7, #0]
   29426:	2126      	movs	r1, #38	; 0x26
   29428:	5c52      	ldrb	r2, [r2, r1]
   2942a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2942c:	4313      	orrs	r3, r2
   2942e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   29430:	231d      	movs	r3, #29
   29432:	18fb      	adds	r3, r7, r3
   29434:	2200      	movs	r2, #0
   29436:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   29438:	683b      	ldr	r3, [r7, #0]
   2943a:	685b      	ldr	r3, [r3, #4]
   2943c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2943e:	68fb      	ldr	r3, [r7, #12]
   29440:	2b00      	cmp	r3, #0
   29442:	d01e      	beq.n	29482 <_usart_set_config+0x14e>
   29444:	2280      	movs	r2, #128	; 0x80
   29446:	0552      	lsls	r2, r2, #21
   29448:	4293      	cmp	r3, r2
   2944a:	d14f      	bne.n	294ec <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   2944c:	683b      	ldr	r3, [r7, #0]
   2944e:	2227      	movs	r2, #39	; 0x27
   29450:	5c9b      	ldrb	r3, [r3, r2]
   29452:	2201      	movs	r2, #1
   29454:	4053      	eors	r3, r2
   29456:	b2db      	uxtb	r3, r3
   29458:	2b00      	cmp	r3, #0
   2945a:	d046      	beq.n	294ea <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   2945c:	683b      	ldr	r3, [r7, #0]
   2945e:	6a1d      	ldr	r5, [r3, #32]
   29460:	693b      	ldr	r3, [r7, #16]
   29462:	b2db      	uxtb	r3, r3
   29464:	0018      	movs	r0, r3
   29466:	4b65      	ldr	r3, [pc, #404]	; (295fc <_usart_set_config+0x2c8>)
   29468:	4798      	blx	r3
   2946a:	0001      	movs	r1, r0
   2946c:	231d      	movs	r3, #29
   2946e:	18fc      	adds	r4, r7, r3
   29470:	230a      	movs	r3, #10
   29472:	18fb      	adds	r3, r7, r3
   29474:	001a      	movs	r2, r3
   29476:	0028      	movs	r0, r5
   29478:	4b61      	ldr	r3, [pc, #388]	; (29600 <_usart_set_config+0x2cc>)
   2947a:	4798      	blx	r3
   2947c:	0003      	movs	r3, r0
   2947e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   29480:	e033      	b.n	294ea <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   29482:	683b      	ldr	r3, [r7, #0]
   29484:	2227      	movs	r2, #39	; 0x27
   29486:	5c9b      	ldrb	r3, [r3, r2]
   29488:	2b00      	cmp	r3, #0
   2948a:	d014      	beq.n	294b6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   2948c:	683b      	ldr	r3, [r7, #0]
   2948e:	6a18      	ldr	r0, [r3, #32]
   29490:	683b      	ldr	r3, [r7, #0]
   29492:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   29494:	231d      	movs	r3, #29
   29496:	18fc      	adds	r4, r7, r3
   29498:	231f      	movs	r3, #31
   2949a:	18fb      	adds	r3, r7, r3
   2949c:	781d      	ldrb	r5, [r3, #0]
   2949e:	230a      	movs	r3, #10
   294a0:	18fa      	adds	r2, r7, r3
   294a2:	231e      	movs	r3, #30
   294a4:	18fb      	adds	r3, r7, r3
   294a6:	781b      	ldrb	r3, [r3, #0]
   294a8:	9300      	str	r3, [sp, #0]
   294aa:	002b      	movs	r3, r5
   294ac:	4d55      	ldr	r5, [pc, #340]	; (29604 <_usart_set_config+0x2d0>)
   294ae:	47a8      	blx	r5
   294b0:	0003      	movs	r3, r0
   294b2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   294b4:	e01a      	b.n	294ec <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   294b6:	683b      	ldr	r3, [r7, #0]
   294b8:	6a1d      	ldr	r5, [r3, #32]
   294ba:	693b      	ldr	r3, [r7, #16]
   294bc:	b2db      	uxtb	r3, r3
   294be:	0018      	movs	r0, r3
   294c0:	4b4e      	ldr	r3, [pc, #312]	; (295fc <_usart_set_config+0x2c8>)
   294c2:	4798      	blx	r3
				status_code =
   294c4:	231d      	movs	r3, #29
   294c6:	18fc      	adds	r4, r7, r3
   294c8:	231f      	movs	r3, #31
   294ca:	18fb      	adds	r3, r7, r3
   294cc:	7819      	ldrb	r1, [r3, #0]
   294ce:	230a      	movs	r3, #10
   294d0:	18fa      	adds	r2, r7, r3
   294d2:	231e      	movs	r3, #30
   294d4:	18fb      	adds	r3, r7, r3
   294d6:	781b      	ldrb	r3, [r3, #0]
   294d8:	9300      	str	r3, [sp, #0]
   294da:	000b      	movs	r3, r1
   294dc:	0001      	movs	r1, r0
   294de:	0028      	movs	r0, r5
   294e0:	4d48      	ldr	r5, [pc, #288]	; (29604 <_usart_set_config+0x2d0>)
   294e2:	47a8      	blx	r5
   294e4:	0003      	movs	r3, r0
   294e6:	7023      	strb	r3, [r4, #0]
			break;
   294e8:	e000      	b.n	294ec <_usart_set_config+0x1b8>
			break;
   294ea:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   294ec:	231d      	movs	r3, #29
   294ee:	18fb      	adds	r3, r7, r3
   294f0:	781b      	ldrb	r3, [r3, #0]
   294f2:	2b00      	cmp	r3, #0
   294f4:	d003      	beq.n	294fe <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   294f6:	231d      	movs	r3, #29
   294f8:	18fb      	adds	r3, r7, r3
   294fa:	781b      	ldrb	r3, [r3, #0]
   294fc:	e077      	b.n	295ee <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   294fe:	683b      	ldr	r3, [r7, #0]
   29500:	7e5b      	ldrb	r3, [r3, #25]
   29502:	2b00      	cmp	r3, #0
   29504:	d003      	beq.n	2950e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   29506:	683b      	ldr	r3, [r7, #0]
   29508:	7e9a      	ldrb	r2, [r3, #26]
   2950a:	69bb      	ldr	r3, [r7, #24]
   2950c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2950e:	687b      	ldr	r3, [r7, #4]
   29510:	0018      	movs	r0, r3
   29512:	4b3d      	ldr	r3, [pc, #244]	; (29608 <_usart_set_config+0x2d4>)
   29514:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   29516:	230a      	movs	r3, #10
   29518:	18fb      	adds	r3, r7, r3
   2951a:	881a      	ldrh	r2, [r3, #0]
   2951c:	69bb      	ldr	r3, [r7, #24]
   2951e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   29520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   29522:	68fb      	ldr	r3, [r7, #12]
   29524:	4313      	orrs	r3, r2
   29526:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   29528:	683b      	ldr	r3, [r7, #0]
   2952a:	2227      	movs	r2, #39	; 0x27
   2952c:	5c9b      	ldrb	r3, [r3, r2]
   2952e:	2201      	movs	r2, #1
   29530:	4053      	eors	r3, r2
   29532:	b2db      	uxtb	r3, r3
   29534:	2b00      	cmp	r3, #0
   29536:	d003      	beq.n	29540 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   29538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2953a:	2204      	movs	r2, #4
   2953c:	4313      	orrs	r3, r2
   2953e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   29540:	683b      	ldr	r3, [r7, #0]
   29542:	7e5b      	ldrb	r3, [r3, #25]
   29544:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   29546:	683b      	ldr	r3, [r7, #0]
   29548:	7f1b      	ldrb	r3, [r3, #28]
   2954a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2954c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2954e:	683b      	ldr	r3, [r7, #0]
   29550:	7f5b      	ldrb	r3, [r3, #29]
   29552:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   29554:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   29556:	683b      	ldr	r3, [r7, #0]
   29558:	2124      	movs	r1, #36	; 0x24
   2955a:	5c5b      	ldrb	r3, [r3, r1]
   2955c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2955e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   29560:	683b      	ldr	r3, [r7, #0]
   29562:	2125      	movs	r1, #37	; 0x25
   29564:	5c5b      	ldrb	r3, [r3, r1]
   29566:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   29568:	4313      	orrs	r3, r2
	ctrlb =  
   2956a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   2956c:	683b      	ldr	r3, [r7, #0]
   2956e:	7a9b      	ldrb	r3, [r3, #10]
   29570:	001a      	movs	r2, r3
   29572:	6a3b      	ldr	r3, [r7, #32]
   29574:	4313      	orrs	r3, r2
   29576:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   29578:	683b      	ldr	r3, [r7, #0]
   2957a:	7adb      	ldrb	r3, [r3, #11]
   2957c:	001a      	movs	r2, r3
   2957e:	6a3b      	ldr	r3, [r7, #32]
   29580:	4313      	orrs	r3, r2
   29582:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   29584:	683b      	ldr	r3, [r7, #0]
   29586:	891b      	ldrh	r3, [r3, #8]
   29588:	2bff      	cmp	r3, #255	; 0xff
   2958a:	d00b      	beq.n	295a4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   2958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2958e:	2280      	movs	r2, #128	; 0x80
   29590:	0452      	lsls	r2, r2, #17
   29592:	4313      	orrs	r3, r2
   29594:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   29596:	683b      	ldr	r3, [r7, #0]
   29598:	891b      	ldrh	r3, [r3, #8]
   2959a:	001a      	movs	r2, r3
   2959c:	6a3b      	ldr	r3, [r7, #32]
   2959e:	4313      	orrs	r3, r2
   295a0:	623b      	str	r3, [r7, #32]
   295a2:	e008      	b.n	295b6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   295a4:	683b      	ldr	r3, [r7, #0]
   295a6:	7edb      	ldrb	r3, [r3, #27]
   295a8:	2b00      	cmp	r3, #0
   295aa:	d004      	beq.n	295b6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   295ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   295ae:	2280      	movs	r2, #128	; 0x80
   295b0:	04d2      	lsls	r2, r2, #19
   295b2:	4313      	orrs	r3, r2
   295b4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   295b6:	683b      	ldr	r3, [r7, #0]
   295b8:	222c      	movs	r2, #44	; 0x2c
   295ba:	5c9b      	ldrb	r3, [r3, r2]
   295bc:	2b00      	cmp	r3, #0
   295be:	d103      	bne.n	295c8 <_usart_set_config+0x294>
   295c0:	4b12      	ldr	r3, [pc, #72]	; (2960c <_usart_set_config+0x2d8>)
   295c2:	4798      	blx	r3
   295c4:	1e03      	subs	r3, r0, #0
   295c6:	d003      	beq.n	295d0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   295c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   295ca:	2280      	movs	r2, #128	; 0x80
   295cc:	4313      	orrs	r3, r2
   295ce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   295d0:	687b      	ldr	r3, [r7, #4]
   295d2:	0018      	movs	r0, r3
   295d4:	4b0c      	ldr	r3, [pc, #48]	; (29608 <_usart_set_config+0x2d4>)
   295d6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   295d8:	69bb      	ldr	r3, [r7, #24]
   295da:	6a3a      	ldr	r2, [r7, #32]
   295dc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   295de:	687b      	ldr	r3, [r7, #4]
   295e0:	0018      	movs	r0, r3
   295e2:	4b09      	ldr	r3, [pc, #36]	; (29608 <_usart_set_config+0x2d4>)
   295e4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   295e6:	69bb      	ldr	r3, [r7, #24]
   295e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   295ea:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   295ec:	2300      	movs	r3, #0
}
   295ee:	0018      	movs	r0, r3
   295f0:	46bd      	mov	sp, r7
   295f2:	b00a      	add	sp, #40	; 0x28
   295f4:	bdb0      	pop	{r4, r5, r7, pc}
   295f6:	46c0      	nop			; (mov r8, r8)
   295f8:	000280dd 	.word	0x000280dd
   295fc:	0002aa91 	.word	0x0002aa91
   29600:	00027c57 	.word	0x00027c57
   29604:	00027cd5 	.word	0x00027cd5
   29608:	00029311 	.word	0x00029311
   2960c:	000292d1 	.word	0x000292d1

00029610 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   29610:	b590      	push	{r4, r7, lr}
   29612:	b093      	sub	sp, #76	; 0x4c
   29614:	af00      	add	r7, sp, #0
   29616:	60f8      	str	r0, [r7, #12]
   29618:	60b9      	str	r1, [r7, #8]
   2961a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   2961c:	233b      	movs	r3, #59	; 0x3b
   2961e:	18fb      	adds	r3, r7, r3
   29620:	2200      	movs	r2, #0
   29622:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   29624:	68fb      	ldr	r3, [r7, #12]
   29626:	68ba      	ldr	r2, [r7, #8]
   29628:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2962a:	68fb      	ldr	r3, [r7, #12]
   2962c:	681b      	ldr	r3, [r3, #0]
   2962e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29630:	68fb      	ldr	r3, [r7, #12]
   29632:	681b      	ldr	r3, [r3, #0]
   29634:	0018      	movs	r0, r3
   29636:	4b86      	ldr	r3, [pc, #536]	; (29850 <usart_init+0x240>)
   29638:	4798      	blx	r3
   2963a:	0003      	movs	r3, r0
   2963c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2963e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29640:	3302      	adds	r3, #2
   29642:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29646:	3314      	adds	r3, #20
   29648:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2964a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2964c:	681b      	ldr	r3, [r3, #0]
   2964e:	2201      	movs	r2, #1
   29650:	4013      	ands	r3, r2
   29652:	d001      	beq.n	29658 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   29654:	2305      	movs	r3, #5
   29656:	e0f6      	b.n	29846 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   29658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2965a:	681b      	ldr	r3, [r3, #0]
   2965c:	2202      	movs	r2, #2
   2965e:	4013      	ands	r3, r2
   29660:	d001      	beq.n	29666 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   29662:	231c      	movs	r3, #28
   29664:	e0ef      	b.n	29846 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   29666:	2201      	movs	r2, #1
   29668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2966a:	409a      	lsls	r2, r3
   2966c:	0013      	movs	r3, r2
   2966e:	0019      	movs	r1, r3
   29670:	2002      	movs	r0, #2
   29672:	4b78      	ldr	r3, [pc, #480]	; (29854 <usart_init+0x244>)
   29674:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   29676:	2324      	movs	r3, #36	; 0x24
   29678:	18fb      	adds	r3, r7, r3
   2967a:	0018      	movs	r0, r3
   2967c:	4b76      	ldr	r3, [pc, #472]	; (29858 <usart_init+0x248>)
   2967e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   29680:	687b      	ldr	r3, [r7, #4]
   29682:	222d      	movs	r2, #45	; 0x2d
   29684:	5c9a      	ldrb	r2, [r3, r2]
   29686:	2324      	movs	r3, #36	; 0x24
   29688:	18fb      	adds	r3, r7, r3
   2968a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2968e:	b2db      	uxtb	r3, r3
   29690:	2224      	movs	r2, #36	; 0x24
   29692:	18ba      	adds	r2, r7, r2
   29694:	0011      	movs	r1, r2
   29696:	0018      	movs	r0, r3
   29698:	4b70      	ldr	r3, [pc, #448]	; (2985c <usart_init+0x24c>)
   2969a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2969e:	b2db      	uxtb	r3, r3
   296a0:	0018      	movs	r0, r3
   296a2:	4b6f      	ldr	r3, [pc, #444]	; (29860 <usart_init+0x250>)
   296a4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   296a6:	687b      	ldr	r3, [r7, #4]
   296a8:	222d      	movs	r2, #45	; 0x2d
   296aa:	5c9b      	ldrb	r3, [r3, r2]
   296ac:	2100      	movs	r1, #0
   296ae:	0018      	movs	r0, r3
   296b0:	4b6c      	ldr	r3, [pc, #432]	; (29864 <usart_init+0x254>)
   296b2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   296b4:	687b      	ldr	r3, [r7, #4]
   296b6:	7ada      	ldrb	r2, [r3, #11]
   296b8:	68fb      	ldr	r3, [r7, #12]
   296ba:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   296bc:	687b      	ldr	r3, [r7, #4]
   296be:	2224      	movs	r2, #36	; 0x24
   296c0:	5c9a      	ldrb	r2, [r3, r2]
   296c2:	68fb      	ldr	r3, [r7, #12]
   296c4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   296c6:	687b      	ldr	r3, [r7, #4]
   296c8:	2225      	movs	r2, #37	; 0x25
   296ca:	5c9a      	ldrb	r2, [r3, r2]
   296cc:	68fb      	ldr	r3, [r7, #12]
   296ce:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   296d0:	687b      	ldr	r3, [r7, #4]
   296d2:	7eda      	ldrb	r2, [r3, #27]
   296d4:	68fb      	ldr	r3, [r7, #12]
   296d6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   296d8:	687b      	ldr	r3, [r7, #4]
   296da:	7f1a      	ldrb	r2, [r3, #28]
   296dc:	68fb      	ldr	r3, [r7, #12]
   296de:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   296e0:	233b      	movs	r3, #59	; 0x3b
   296e2:	18fc      	adds	r4, r7, r3
   296e4:	687a      	ldr	r2, [r7, #4]
   296e6:	68fb      	ldr	r3, [r7, #12]
   296e8:	0011      	movs	r1, r2
   296ea:	0018      	movs	r0, r3
   296ec:	4b5e      	ldr	r3, [pc, #376]	; (29868 <usart_init+0x258>)
   296ee:	4798      	blx	r3
   296f0:	0003      	movs	r3, r0
   296f2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   296f4:	233b      	movs	r3, #59	; 0x3b
   296f6:	18fb      	adds	r3, r7, r3
   296f8:	781b      	ldrb	r3, [r3, #0]
   296fa:	2b00      	cmp	r3, #0
   296fc:	d003      	beq.n	29706 <usart_init+0xf6>
		return status_code;
   296fe:	233b      	movs	r3, #59	; 0x3b
   29700:	18fb      	adds	r3, r7, r3
   29702:	781b      	ldrb	r3, [r3, #0]
   29704:	e09f      	b.n	29846 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   29706:	2320      	movs	r3, #32
   29708:	18fb      	adds	r3, r7, r3
   2970a:	0018      	movs	r0, r3
   2970c:	4b57      	ldr	r3, [pc, #348]	; (2986c <usart_init+0x25c>)
   2970e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29710:	2320      	movs	r3, #32
   29712:	18fb      	adds	r3, r7, r3
   29714:	2200      	movs	r2, #0
   29716:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   29718:	2320      	movs	r3, #32
   2971a:	18fb      	adds	r3, r7, r3
   2971c:	2200      	movs	r2, #0
   2971e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   29720:	687b      	ldr	r3, [r7, #4]
   29722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   29724:	2310      	movs	r3, #16
   29726:	18fb      	adds	r3, r7, r3
   29728:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2972a:	687b      	ldr	r3, [r7, #4]
   2972c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2972e:	2310      	movs	r3, #16
   29730:	18fb      	adds	r3, r7, r3
   29732:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   29734:	687b      	ldr	r3, [r7, #4]
   29736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   29738:	2310      	movs	r3, #16
   2973a:	18fb      	adds	r3, r7, r3
   2973c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2973e:	687b      	ldr	r3, [r7, #4]
   29740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   29742:	2310      	movs	r3, #16
   29744:	18fb      	adds	r3, r7, r3
   29746:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   29748:	2347      	movs	r3, #71	; 0x47
   2974a:	18fb      	adds	r3, r7, r3
   2974c:	2200      	movs	r2, #0
   2974e:	701a      	strb	r2, [r3, #0]
   29750:	e02c      	b.n	297ac <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   29752:	2347      	movs	r3, #71	; 0x47
   29754:	18fb      	adds	r3, r7, r3
   29756:	781a      	ldrb	r2, [r3, #0]
   29758:	2310      	movs	r3, #16
   2975a:	18fb      	adds	r3, r7, r3
   2975c:	0092      	lsls	r2, r2, #2
   2975e:	58d3      	ldr	r3, [r2, r3]
   29760:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   29762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29764:	2b00      	cmp	r3, #0
   29766:	d109      	bne.n	2977c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   29768:	2347      	movs	r3, #71	; 0x47
   2976a:	18fb      	adds	r3, r7, r3
   2976c:	781a      	ldrb	r2, [r3, #0]
   2976e:	68bb      	ldr	r3, [r7, #8]
   29770:	0011      	movs	r1, r2
   29772:	0018      	movs	r0, r3
   29774:	4b3e      	ldr	r3, [pc, #248]	; (29870 <usart_init+0x260>)
   29776:	4798      	blx	r3
   29778:	0003      	movs	r3, r0
   2977a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2977c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2977e:	3301      	adds	r3, #1
   29780:	d00d      	beq.n	2979e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   29782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29784:	b2da      	uxtb	r2, r3
   29786:	2320      	movs	r3, #32
   29788:	18fb      	adds	r3, r7, r3
   2978a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2978c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2978e:	0c1b      	lsrs	r3, r3, #16
   29790:	b2db      	uxtb	r3, r3
   29792:	2220      	movs	r2, #32
   29794:	18ba      	adds	r2, r7, r2
   29796:	0011      	movs	r1, r2
   29798:	0018      	movs	r0, r3
   2979a:	4b36      	ldr	r3, [pc, #216]	; (29874 <usart_init+0x264>)
   2979c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2979e:	2347      	movs	r3, #71	; 0x47
   297a0:	18fb      	adds	r3, r7, r3
   297a2:	781a      	ldrb	r2, [r3, #0]
   297a4:	2347      	movs	r3, #71	; 0x47
   297a6:	18fb      	adds	r3, r7, r3
   297a8:	3201      	adds	r2, #1
   297aa:	701a      	strb	r2, [r3, #0]
   297ac:	2347      	movs	r3, #71	; 0x47
   297ae:	18fb      	adds	r3, r7, r3
   297b0:	781b      	ldrb	r3, [r3, #0]
   297b2:	2b03      	cmp	r3, #3
   297b4:	d9cd      	bls.n	29752 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   297b6:	2300      	movs	r3, #0
   297b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   297ba:	e00a      	b.n	297d2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   297bc:	68fa      	ldr	r2, [r7, #12]
   297be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   297c0:	3302      	adds	r3, #2
   297c2:	009b      	lsls	r3, r3, #2
   297c4:	18d3      	adds	r3, r2, r3
   297c6:	3304      	adds	r3, #4
   297c8:	2200      	movs	r2, #0
   297ca:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   297cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   297ce:	3301      	adds	r3, #1
   297d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   297d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   297d4:	2b05      	cmp	r3, #5
   297d6:	d9f1      	bls.n	297bc <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   297d8:	68fb      	ldr	r3, [r7, #12]
   297da:	2200      	movs	r2, #0
   297dc:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   297de:	68fb      	ldr	r3, [r7, #12]
   297e0:	2200      	movs	r2, #0
   297e2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   297e4:	68fb      	ldr	r3, [r7, #12]
   297e6:	2200      	movs	r2, #0
   297e8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   297ea:	68fb      	ldr	r3, [r7, #12]
   297ec:	2200      	movs	r2, #0
   297ee:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   297f0:	68fb      	ldr	r3, [r7, #12]
   297f2:	2230      	movs	r2, #48	; 0x30
   297f4:	2100      	movs	r1, #0
   297f6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   297f8:	68fb      	ldr	r3, [r7, #12]
   297fa:	2231      	movs	r2, #49	; 0x31
   297fc:	2100      	movs	r1, #0
   297fe:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   29800:	68fb      	ldr	r3, [r7, #12]
   29802:	2232      	movs	r2, #50	; 0x32
   29804:	2100      	movs	r1, #0
   29806:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   29808:	68fb      	ldr	r3, [r7, #12]
   2980a:	2233      	movs	r2, #51	; 0x33
   2980c:	2100      	movs	r1, #0
   2980e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   29810:	68fb      	ldr	r3, [r7, #12]
   29812:	681b      	ldr	r3, [r3, #0]
   29814:	2227      	movs	r2, #39	; 0x27
   29816:	18bc      	adds	r4, r7, r2
   29818:	0018      	movs	r0, r3
   2981a:	4b0d      	ldr	r3, [pc, #52]	; (29850 <usart_init+0x240>)
   2981c:	4798      	blx	r3
   2981e:	0003      	movs	r3, r0
   29820:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   29822:	4a15      	ldr	r2, [pc, #84]	; (29878 <usart_init+0x268>)
   29824:	2327      	movs	r3, #39	; 0x27
   29826:	18fb      	adds	r3, r7, r3
   29828:	781b      	ldrb	r3, [r3, #0]
   2982a:	0011      	movs	r1, r2
   2982c:	0018      	movs	r0, r3
   2982e:	4b13      	ldr	r3, [pc, #76]	; (2987c <usart_init+0x26c>)
   29830:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   29832:	2327      	movs	r3, #39	; 0x27
   29834:	18fb      	adds	r3, r7, r3
   29836:	781a      	ldrb	r2, [r3, #0]
   29838:	4b11      	ldr	r3, [pc, #68]	; (29880 <usart_init+0x270>)
   2983a:	0092      	lsls	r2, r2, #2
   2983c:	68f9      	ldr	r1, [r7, #12]
   2983e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   29840:	233b      	movs	r3, #59	; 0x3b
   29842:	18fb      	adds	r3, r7, r3
   29844:	781b      	ldrb	r3, [r3, #0]
}
   29846:	0018      	movs	r0, r3
   29848:	46bd      	mov	sp, r7
   2984a:	b013      	add	sp, #76	; 0x4c
   2984c:	bd90      	pop	{r4, r7, pc}
   2984e:	46c0      	nop			; (mov r8, r8)
   29850:	000280dd 	.word	0x000280dd
   29854:	0002924d 	.word	0x0002924d
   29858:	00029235 	.word	0x00029235
   2985c:	0002a96d 	.word	0x0002a96d
   29860:	0002a9b1 	.word	0x0002a9b1
   29864:	00027e95 	.word	0x00027e95
   29868:	00029335 	.word	0x00029335
   2986c:	000292a9 	.word	0x000292a9
   29870:	00027f21 	.word	0x00027f21
   29874:	0002accd 	.word	0x0002accd
   29878:	00029aed 	.word	0x00029aed
   2987c:	00028141 	.word	0x00028141
   29880:	20005c9c 	.word	0x20005c9c

00029884 <system_interrupt_enter_critical_section>:
{
   29884:	b580      	push	{r7, lr}
   29886:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   29888:	4b02      	ldr	r3, [pc, #8]	; (29894 <system_interrupt_enter_critical_section+0x10>)
   2988a:	4798      	blx	r3
}
   2988c:	46c0      	nop			; (mov r8, r8)
   2988e:	46bd      	mov	sp, r7
   29890:	bd80      	pop	{r7, pc}
   29892:	46c0      	nop			; (mov r8, r8)
   29894:	00026cd9 	.word	0x00026cd9

00029898 <system_interrupt_leave_critical_section>:
{
   29898:	b580      	push	{r7, lr}
   2989a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2989c:	4b02      	ldr	r3, [pc, #8]	; (298a8 <system_interrupt_leave_critical_section+0x10>)
   2989e:	4798      	blx	r3
}
   298a0:	46c0      	nop			; (mov r8, r8)
   298a2:	46bd      	mov	sp, r7
   298a4:	bd80      	pop	{r7, pc}
   298a6:	46c0      	nop			; (mov r8, r8)
   298a8:	00026d2d 	.word	0x00026d2d

000298ac <usart_is_syncing>:
{
   298ac:	b580      	push	{r7, lr}
   298ae:	b084      	sub	sp, #16
   298b0:	af00      	add	r7, sp, #0
   298b2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   298b4:	687b      	ldr	r3, [r7, #4]
   298b6:	681b      	ldr	r3, [r3, #0]
   298b8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   298ba:	68fb      	ldr	r3, [r7, #12]
   298bc:	69db      	ldr	r3, [r3, #28]
   298be:	1e5a      	subs	r2, r3, #1
   298c0:	4193      	sbcs	r3, r2
   298c2:	b2db      	uxtb	r3, r3
}
   298c4:	0018      	movs	r0, r3
   298c6:	46bd      	mov	sp, r7
   298c8:	b004      	add	sp, #16
   298ca:	bd80      	pop	{r7, pc}

000298cc <_usart_wait_for_sync>:
{
   298cc:	b580      	push	{r7, lr}
   298ce:	b082      	sub	sp, #8
   298d0:	af00      	add	r7, sp, #0
   298d2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   298d4:	46c0      	nop			; (mov r8, r8)
   298d6:	687b      	ldr	r3, [r7, #4]
   298d8:	0018      	movs	r0, r3
   298da:	4b04      	ldr	r3, [pc, #16]	; (298ec <_usart_wait_for_sync+0x20>)
   298dc:	4798      	blx	r3
   298de:	1e03      	subs	r3, r0, #0
   298e0:	d1f9      	bne.n	298d6 <_usart_wait_for_sync+0xa>
}
   298e2:	46c0      	nop			; (mov r8, r8)
   298e4:	46bd      	mov	sp, r7
   298e6:	b002      	add	sp, #8
   298e8:	bd80      	pop	{r7, pc}
   298ea:	46c0      	nop			; (mov r8, r8)
   298ec:	000298ad 	.word	0x000298ad

000298f0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   298f0:	b580      	push	{r7, lr}
   298f2:	b086      	sub	sp, #24
   298f4:	af00      	add	r7, sp, #0
   298f6:	60f8      	str	r0, [r7, #12]
   298f8:	60b9      	str	r1, [r7, #8]
   298fa:	1dbb      	adds	r3, r7, #6
   298fc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   298fe:	68fb      	ldr	r3, [r7, #12]
   29900:	681b      	ldr	r3, [r3, #0]
   29902:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29904:	4b0f      	ldr	r3, [pc, #60]	; (29944 <_usart_write_buffer+0x54>)
   29906:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   29908:	68fb      	ldr	r3, [r7, #12]
   2990a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2990c:	b29b      	uxth	r3, r3
   2990e:	2b00      	cmp	r3, #0
   29910:	d003      	beq.n	2991a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29912:	4b0d      	ldr	r3, [pc, #52]	; (29948 <_usart_write_buffer+0x58>)
   29914:	4798      	blx	r3
		return STATUS_BUSY;
   29916:	2305      	movs	r3, #5
   29918:	e010      	b.n	2993c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2991a:	68fb      	ldr	r3, [r7, #12]
   2991c:	1dba      	adds	r2, r7, #6
   2991e:	8812      	ldrh	r2, [r2, #0]
   29920:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   29922:	4b09      	ldr	r3, [pc, #36]	; (29948 <_usart_write_buffer+0x58>)
   29924:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   29926:	68fb      	ldr	r3, [r7, #12]
   29928:	68ba      	ldr	r2, [r7, #8]
   2992a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   2992c:	68fb      	ldr	r3, [r7, #12]
   2992e:	2233      	movs	r2, #51	; 0x33
   29930:	2105      	movs	r1, #5
   29932:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   29934:	697b      	ldr	r3, [r7, #20]
   29936:	2201      	movs	r2, #1
   29938:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   2993a:	2300      	movs	r3, #0
}
   2993c:	0018      	movs	r0, r3
   2993e:	46bd      	mov	sp, r7
   29940:	b006      	add	sp, #24
   29942:	bd80      	pop	{r7, pc}
   29944:	00029885 	.word	0x00029885
   29948:	00029899 	.word	0x00029899

0002994c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2994c:	b580      	push	{r7, lr}
   2994e:	b086      	sub	sp, #24
   29950:	af00      	add	r7, sp, #0
   29952:	60f8      	str	r0, [r7, #12]
   29954:	60b9      	str	r1, [r7, #8]
   29956:	1dbb      	adds	r3, r7, #6
   29958:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2995a:	68fb      	ldr	r3, [r7, #12]
   2995c:	681b      	ldr	r3, [r3, #0]
   2995e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29960:	4b16      	ldr	r3, [pc, #88]	; (299bc <_usart_read_buffer+0x70>)
   29962:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   29964:	68fb      	ldr	r3, [r7, #12]
   29966:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29968:	b29b      	uxth	r3, r3
   2996a:	2b00      	cmp	r3, #0
   2996c:	d003      	beq.n	29976 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2996e:	4b14      	ldr	r3, [pc, #80]	; (299c0 <_usart_read_buffer+0x74>)
   29970:	4798      	blx	r3
		return STATUS_BUSY;
   29972:	2305      	movs	r3, #5
   29974:	e01e      	b.n	299b4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   29976:	68fb      	ldr	r3, [r7, #12]
   29978:	1dba      	adds	r2, r7, #6
   2997a:	8812      	ldrh	r2, [r2, #0]
   2997c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   2997e:	4b10      	ldr	r3, [pc, #64]	; (299c0 <_usart_read_buffer+0x74>)
   29980:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   29982:	68fb      	ldr	r3, [r7, #12]
   29984:	68ba      	ldr	r2, [r7, #8]
   29986:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   29988:	68fb      	ldr	r3, [r7, #12]
   2998a:	2232      	movs	r2, #50	; 0x32
   2998c:	2105      	movs	r1, #5
   2998e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   29990:	697b      	ldr	r3, [r7, #20]
   29992:	2204      	movs	r2, #4
   29994:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   29996:	68fb      	ldr	r3, [r7, #12]
   29998:	7a1b      	ldrb	r3, [r3, #8]
   2999a:	2b00      	cmp	r3, #0
   2999c:	d002      	beq.n	299a4 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   2999e:	697b      	ldr	r3, [r7, #20]
   299a0:	2220      	movs	r2, #32
   299a2:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   299a4:	68fb      	ldr	r3, [r7, #12]
   299a6:	7a5b      	ldrb	r3, [r3, #9]
   299a8:	2b00      	cmp	r3, #0
   299aa:	d002      	beq.n	299b2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   299ac:	697b      	ldr	r3, [r7, #20]
   299ae:	2208      	movs	r2, #8
   299b0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   299b2:	2300      	movs	r3, #0
}
   299b4:	0018      	movs	r0, r3
   299b6:	46bd      	mov	sp, r7
   299b8:	b006      	add	sp, #24
   299ba:	bd80      	pop	{r7, pc}
   299bc:	00029885 	.word	0x00029885
   299c0:	00029899 	.word	0x00029899

000299c4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   299c4:	b580      	push	{r7, lr}
   299c6:	b084      	sub	sp, #16
   299c8:	af00      	add	r7, sp, #0
   299ca:	60f8      	str	r0, [r7, #12]
   299cc:	60b9      	str	r1, [r7, #8]
   299ce:	1dfb      	adds	r3, r7, #7
   299d0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   299d2:	1dfb      	adds	r3, r7, #7
   299d4:	781b      	ldrb	r3, [r3, #0]
   299d6:	68fa      	ldr	r2, [r7, #12]
   299d8:	3302      	adds	r3, #2
   299da:	009b      	lsls	r3, r3, #2
   299dc:	18d3      	adds	r3, r2, r3
   299de:	3304      	adds	r3, #4
   299e0:	68ba      	ldr	r2, [r7, #8]
   299e2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   299e4:	68fb      	ldr	r3, [r7, #12]
   299e6:	2230      	movs	r2, #48	; 0x30
   299e8:	5c9b      	ldrb	r3, [r3, r2]
   299ea:	b25a      	sxtb	r2, r3
   299ec:	1dfb      	adds	r3, r7, #7
   299ee:	781b      	ldrb	r3, [r3, #0]
   299f0:	2101      	movs	r1, #1
   299f2:	4099      	lsls	r1, r3
   299f4:	000b      	movs	r3, r1
   299f6:	b25b      	sxtb	r3, r3
   299f8:	4313      	orrs	r3, r2
   299fa:	b25b      	sxtb	r3, r3
   299fc:	b2d9      	uxtb	r1, r3
   299fe:	68fb      	ldr	r3, [r7, #12]
   29a00:	2230      	movs	r2, #48	; 0x30
   29a02:	5499      	strb	r1, [r3, r2]
}
   29a04:	46c0      	nop			; (mov r8, r8)
   29a06:	46bd      	mov	sp, r7
   29a08:	b004      	add	sp, #16
   29a0a:	bd80      	pop	{r7, pc}

00029a0c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29a0c:	b580      	push	{r7, lr}
   29a0e:	b084      	sub	sp, #16
   29a10:	af00      	add	r7, sp, #0
   29a12:	60f8      	str	r0, [r7, #12]
   29a14:	60b9      	str	r1, [r7, #8]
   29a16:	1dbb      	adds	r3, r7, #6
   29a18:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   29a1a:	1dbb      	adds	r3, r7, #6
   29a1c:	881b      	ldrh	r3, [r3, #0]
   29a1e:	2b00      	cmp	r3, #0
   29a20:	d101      	bne.n	29a26 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29a22:	2317      	movs	r3, #23
   29a24:	e010      	b.n	29a48 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   29a26:	68fb      	ldr	r3, [r7, #12]
   29a28:	79db      	ldrb	r3, [r3, #7]
   29a2a:	2201      	movs	r2, #1
   29a2c:	4053      	eors	r3, r2
   29a2e:	b2db      	uxtb	r3, r3
   29a30:	2b00      	cmp	r3, #0
   29a32:	d001      	beq.n	29a38 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29a34:	231c      	movs	r3, #28
   29a36:	e007      	b.n	29a48 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   29a38:	1dbb      	adds	r3, r7, #6
   29a3a:	881a      	ldrh	r2, [r3, #0]
   29a3c:	68b9      	ldr	r1, [r7, #8]
   29a3e:	68fb      	ldr	r3, [r7, #12]
   29a40:	0018      	movs	r0, r3
   29a42:	4b03      	ldr	r3, [pc, #12]	; (29a50 <usart_write_buffer_job+0x44>)
   29a44:	4798      	blx	r3
   29a46:	0003      	movs	r3, r0
}
   29a48:	0018      	movs	r0, r3
   29a4a:	46bd      	mov	sp, r7
   29a4c:	b004      	add	sp, #16
   29a4e:	bd80      	pop	{r7, pc}
   29a50:	000298f1 	.word	0x000298f1

00029a54 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29a54:	b580      	push	{r7, lr}
   29a56:	b084      	sub	sp, #16
   29a58:	af00      	add	r7, sp, #0
   29a5a:	60f8      	str	r0, [r7, #12]
   29a5c:	60b9      	str	r1, [r7, #8]
   29a5e:	1dbb      	adds	r3, r7, #6
   29a60:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   29a62:	1dbb      	adds	r3, r7, #6
   29a64:	881b      	ldrh	r3, [r3, #0]
   29a66:	2b00      	cmp	r3, #0
   29a68:	d101      	bne.n	29a6e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29a6a:	2317      	movs	r3, #23
   29a6c:	e010      	b.n	29a90 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   29a6e:	68fb      	ldr	r3, [r7, #12]
   29a70:	799b      	ldrb	r3, [r3, #6]
   29a72:	2201      	movs	r2, #1
   29a74:	4053      	eors	r3, r2
   29a76:	b2db      	uxtb	r3, r3
   29a78:	2b00      	cmp	r3, #0
   29a7a:	d001      	beq.n	29a80 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29a7c:	231c      	movs	r3, #28
   29a7e:	e007      	b.n	29a90 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   29a80:	1dbb      	adds	r3, r7, #6
   29a82:	881a      	ldrh	r2, [r3, #0]
   29a84:	68b9      	ldr	r1, [r7, #8]
   29a86:	68fb      	ldr	r3, [r7, #12]
   29a88:	0018      	movs	r0, r3
   29a8a:	4b03      	ldr	r3, [pc, #12]	; (29a98 <usart_read_buffer_job+0x44>)
   29a8c:	4798      	blx	r3
   29a8e:	0003      	movs	r3, r0
}
   29a90:	0018      	movs	r0, r3
   29a92:	46bd      	mov	sp, r7
   29a94:	b004      	add	sp, #16
   29a96:	bd80      	pop	{r7, pc}
   29a98:	0002994d 	.word	0x0002994d

00029a9c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   29a9c:	b580      	push	{r7, lr}
   29a9e:	b084      	sub	sp, #16
   29aa0:	af00      	add	r7, sp, #0
   29aa2:	6078      	str	r0, [r7, #4]
   29aa4:	000a      	movs	r2, r1
   29aa6:	1cfb      	adds	r3, r7, #3
   29aa8:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   29aaa:	1cfb      	adds	r3, r7, #3
   29aac:	781b      	ldrb	r3, [r3, #0]
   29aae:	2b00      	cmp	r3, #0
   29ab0:	d002      	beq.n	29ab8 <usart_get_job_status+0x1c>
   29ab2:	2b01      	cmp	r3, #1
   29ab4:	d007      	beq.n	29ac6 <usart_get_job_status+0x2a>
   29ab6:	e00d      	b.n	29ad4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   29ab8:	230f      	movs	r3, #15
   29aba:	18fb      	adds	r3, r7, r3
   29abc:	687a      	ldr	r2, [r7, #4]
   29abe:	2132      	movs	r1, #50	; 0x32
   29ac0:	5c52      	ldrb	r2, [r2, r1]
   29ac2:	701a      	strb	r2, [r3, #0]
			break;
   29ac4:	e00b      	b.n	29ade <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   29ac6:	230f      	movs	r3, #15
   29ac8:	18fb      	adds	r3, r7, r3
   29aca:	687a      	ldr	r2, [r7, #4]
   29acc:	2133      	movs	r1, #51	; 0x33
   29ace:	5c52      	ldrb	r2, [r2, r1]
   29ad0:	701a      	strb	r2, [r3, #0]
			break;
   29ad2:	e004      	b.n	29ade <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   29ad4:	230f      	movs	r3, #15
   29ad6:	18fb      	adds	r3, r7, r3
   29ad8:	2217      	movs	r2, #23
   29ada:	701a      	strb	r2, [r3, #0]
			break;
   29adc:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   29ade:	230f      	movs	r3, #15
   29ae0:	18fb      	adds	r3, r7, r3
   29ae2:	781b      	ldrb	r3, [r3, #0]
}
   29ae4:	0018      	movs	r0, r3
   29ae6:	46bd      	mov	sp, r7
   29ae8:	b004      	add	sp, #16
   29aea:	bd80      	pop	{r7, pc}

00029aec <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   29aec:	b580      	push	{r7, lr}
   29aee:	b088      	sub	sp, #32
   29af0:	af00      	add	r7, sp, #0
   29af2:	0002      	movs	r2, r0
   29af4:	1dfb      	adds	r3, r7, #7
   29af6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   29af8:	1dfb      	adds	r3, r7, #7
   29afa:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   29afc:	4ba3      	ldr	r3, [pc, #652]	; (29d8c <_usart_interrupt_handler+0x2a0>)
   29afe:	0092      	lsls	r2, r2, #2
   29b00:	58d3      	ldr	r3, [r2, r3]
   29b02:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   29b04:	69bb      	ldr	r3, [r7, #24]
   29b06:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   29b08:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   29b0a:	69bb      	ldr	r3, [r7, #24]
   29b0c:	0018      	movs	r0, r3
   29b0e:	4ba0      	ldr	r3, [pc, #640]	; (29d90 <_usart_interrupt_handler+0x2a4>)
   29b10:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   29b12:	697b      	ldr	r3, [r7, #20]
   29b14:	7e1b      	ldrb	r3, [r3, #24]
   29b16:	b2da      	uxtb	r2, r3
   29b18:	2312      	movs	r3, #18
   29b1a:	18fb      	adds	r3, r7, r3
   29b1c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   29b1e:	697b      	ldr	r3, [r7, #20]
   29b20:	7d9b      	ldrb	r3, [r3, #22]
   29b22:	b2db      	uxtb	r3, r3
   29b24:	b29a      	uxth	r2, r3
   29b26:	2312      	movs	r3, #18
   29b28:	18fb      	adds	r3, r7, r3
   29b2a:	2112      	movs	r1, #18
   29b2c:	1879      	adds	r1, r7, r1
   29b2e:	8809      	ldrh	r1, [r1, #0]
   29b30:	400a      	ands	r2, r1
   29b32:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   29b34:	69bb      	ldr	r3, [r7, #24]
   29b36:	2230      	movs	r2, #48	; 0x30
   29b38:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   29b3a:	69ba      	ldr	r2, [r7, #24]
   29b3c:	2131      	movs	r1, #49	; 0x31
   29b3e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   29b40:	4013      	ands	r3, r2
   29b42:	b2da      	uxtb	r2, r3
   29b44:	2310      	movs	r3, #16
   29b46:	18fb      	adds	r3, r7, r3
   29b48:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   29b4a:	2312      	movs	r3, #18
   29b4c:	18fb      	adds	r3, r7, r3
   29b4e:	881b      	ldrh	r3, [r3, #0]
   29b50:	2201      	movs	r2, #1
   29b52:	4013      	ands	r3, r2
   29b54:	d044      	beq.n	29be0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   29b56:	69bb      	ldr	r3, [r7, #24]
   29b58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29b5a:	b29b      	uxth	r3, r3
   29b5c:	2b00      	cmp	r3, #0
   29b5e:	d03c      	beq.n	29bda <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   29b60:	69bb      	ldr	r3, [r7, #24]
   29b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29b64:	781b      	ldrb	r3, [r3, #0]
   29b66:	b2da      	uxtb	r2, r3
   29b68:	231c      	movs	r3, #28
   29b6a:	18fb      	adds	r3, r7, r3
   29b6c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   29b6e:	69bb      	ldr	r3, [r7, #24]
   29b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29b72:	1c5a      	adds	r2, r3, #1
   29b74:	69bb      	ldr	r3, [r7, #24]
   29b76:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29b78:	69bb      	ldr	r3, [r7, #24]
   29b7a:	795b      	ldrb	r3, [r3, #5]
   29b7c:	2b01      	cmp	r3, #1
   29b7e:	d113      	bne.n	29ba8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   29b80:	69bb      	ldr	r3, [r7, #24]
   29b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29b84:	781b      	ldrb	r3, [r3, #0]
   29b86:	b2db      	uxtb	r3, r3
   29b88:	021b      	lsls	r3, r3, #8
   29b8a:	b21a      	sxth	r2, r3
   29b8c:	231c      	movs	r3, #28
   29b8e:	18fb      	adds	r3, r7, r3
   29b90:	2100      	movs	r1, #0
   29b92:	5e5b      	ldrsh	r3, [r3, r1]
   29b94:	4313      	orrs	r3, r2
   29b96:	b21a      	sxth	r2, r3
   29b98:	231c      	movs	r3, #28
   29b9a:	18fb      	adds	r3, r7, r3
   29b9c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   29b9e:	69bb      	ldr	r3, [r7, #24]
   29ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29ba2:	1c5a      	adds	r2, r3, #1
   29ba4:	69bb      	ldr	r3, [r7, #24]
   29ba6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   29ba8:	231c      	movs	r3, #28
   29baa:	18fb      	adds	r3, r7, r3
   29bac:	881b      	ldrh	r3, [r3, #0]
   29bae:	05db      	lsls	r3, r3, #23
   29bb0:	0ddb      	lsrs	r3, r3, #23
   29bb2:	b29a      	uxth	r2, r3
   29bb4:	697b      	ldr	r3, [r7, #20]
   29bb6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   29bb8:	69bb      	ldr	r3, [r7, #24]
   29bba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29bbc:	b29b      	uxth	r3, r3
   29bbe:	3b01      	subs	r3, #1
   29bc0:	b29b      	uxth	r3, r3
   29bc2:	69ba      	ldr	r2, [r7, #24]
   29bc4:	1c19      	adds	r1, r3, #0
   29bc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   29bc8:	2b00      	cmp	r3, #0
   29bca:	d109      	bne.n	29be0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29bcc:	697b      	ldr	r3, [r7, #20]
   29bce:	2201      	movs	r2, #1
   29bd0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   29bd2:	697b      	ldr	r3, [r7, #20]
   29bd4:	2202      	movs	r2, #2
   29bd6:	759a      	strb	r2, [r3, #22]
   29bd8:	e002      	b.n	29be0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29bda:	697b      	ldr	r3, [r7, #20]
   29bdc:	2201      	movs	r2, #1
   29bde:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   29be0:	2312      	movs	r3, #18
   29be2:	18fb      	adds	r3, r7, r3
   29be4:	881b      	ldrh	r3, [r3, #0]
   29be6:	2202      	movs	r2, #2
   29be8:	4013      	ands	r3, r2
   29bea:	d011      	beq.n	29c10 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   29bec:	697b      	ldr	r3, [r7, #20]
   29bee:	2202      	movs	r2, #2
   29bf0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   29bf2:	69bb      	ldr	r3, [r7, #24]
   29bf4:	2233      	movs	r2, #51	; 0x33
   29bf6:	2100      	movs	r1, #0
   29bf8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   29bfa:	2310      	movs	r3, #16
   29bfc:	18fb      	adds	r3, r7, r3
   29bfe:	881b      	ldrh	r3, [r3, #0]
   29c00:	2201      	movs	r2, #1
   29c02:	4013      	ands	r3, r2
   29c04:	d004      	beq.n	29c10 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   29c06:	69bb      	ldr	r3, [r7, #24]
   29c08:	68db      	ldr	r3, [r3, #12]
   29c0a:	69ba      	ldr	r2, [r7, #24]
   29c0c:	0010      	movs	r0, r2
   29c0e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   29c10:	2312      	movs	r3, #18
   29c12:	18fb      	adds	r3, r7, r3
   29c14:	881b      	ldrh	r3, [r3, #0]
   29c16:	2204      	movs	r2, #4
   29c18:	4013      	ands	r3, r2
   29c1a:	d100      	bne.n	29c1e <_usart_interrupt_handler+0x132>
   29c1c:	e0bd      	b.n	29d9a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   29c1e:	69bb      	ldr	r3, [r7, #24]
   29c20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29c22:	b29b      	uxth	r3, r3
   29c24:	2b00      	cmp	r3, #0
   29c26:	d100      	bne.n	29c2a <_usart_interrupt_handler+0x13e>
   29c28:	e0b4      	b.n	29d94 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   29c2a:	697b      	ldr	r3, [r7, #20]
   29c2c:	8b5b      	ldrh	r3, [r3, #26]
   29c2e:	b29b      	uxth	r3, r3
   29c30:	b2da      	uxtb	r2, r3
   29c32:	231f      	movs	r3, #31
   29c34:	18fb      	adds	r3, r7, r3
   29c36:	213f      	movs	r1, #63	; 0x3f
   29c38:	400a      	ands	r2, r1
   29c3a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   29c3c:	231f      	movs	r3, #31
   29c3e:	18fb      	adds	r3, r7, r3
   29c40:	781b      	ldrb	r3, [r3, #0]
   29c42:	2208      	movs	r2, #8
   29c44:	4013      	ands	r3, r2
   29c46:	d007      	beq.n	29c58 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   29c48:	231f      	movs	r3, #31
   29c4a:	18fb      	adds	r3, r7, r3
   29c4c:	221f      	movs	r2, #31
   29c4e:	18ba      	adds	r2, r7, r2
   29c50:	7812      	ldrb	r2, [r2, #0]
   29c52:	2108      	movs	r1, #8
   29c54:	438a      	bics	r2, r1
   29c56:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   29c58:	231f      	movs	r3, #31
   29c5a:	18fb      	adds	r3, r7, r3
   29c5c:	781b      	ldrb	r3, [r3, #0]
   29c5e:	2b00      	cmp	r3, #0
   29c60:	d050      	beq.n	29d04 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   29c62:	231f      	movs	r3, #31
   29c64:	18fb      	adds	r3, r7, r3
   29c66:	781b      	ldrb	r3, [r3, #0]
   29c68:	2202      	movs	r2, #2
   29c6a:	4013      	ands	r3, r2
   29c6c:	d007      	beq.n	29c7e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   29c6e:	69bb      	ldr	r3, [r7, #24]
   29c70:	2232      	movs	r2, #50	; 0x32
   29c72:	211a      	movs	r1, #26
   29c74:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   29c76:	697b      	ldr	r3, [r7, #20]
   29c78:	2202      	movs	r2, #2
   29c7a:	835a      	strh	r2, [r3, #26]
   29c7c:	e036      	b.n	29cec <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   29c7e:	231f      	movs	r3, #31
   29c80:	18fb      	adds	r3, r7, r3
   29c82:	781b      	ldrb	r3, [r3, #0]
   29c84:	2204      	movs	r2, #4
   29c86:	4013      	ands	r3, r2
   29c88:	d007      	beq.n	29c9a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   29c8a:	69bb      	ldr	r3, [r7, #24]
   29c8c:	2232      	movs	r2, #50	; 0x32
   29c8e:	211e      	movs	r1, #30
   29c90:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   29c92:	697b      	ldr	r3, [r7, #20]
   29c94:	2204      	movs	r2, #4
   29c96:	835a      	strh	r2, [r3, #26]
   29c98:	e028      	b.n	29cec <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   29c9a:	231f      	movs	r3, #31
   29c9c:	18fb      	adds	r3, r7, r3
   29c9e:	781b      	ldrb	r3, [r3, #0]
   29ca0:	2201      	movs	r2, #1
   29ca2:	4013      	ands	r3, r2
   29ca4:	d007      	beq.n	29cb6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   29ca6:	69bb      	ldr	r3, [r7, #24]
   29ca8:	2232      	movs	r2, #50	; 0x32
   29caa:	2113      	movs	r1, #19
   29cac:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   29cae:	697b      	ldr	r3, [r7, #20]
   29cb0:	2201      	movs	r2, #1
   29cb2:	835a      	strh	r2, [r3, #26]
   29cb4:	e01a      	b.n	29cec <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   29cb6:	231f      	movs	r3, #31
   29cb8:	18fb      	adds	r3, r7, r3
   29cba:	781b      	ldrb	r3, [r3, #0]
   29cbc:	2210      	movs	r2, #16
   29cbe:	4013      	ands	r3, r2
   29cc0:	d007      	beq.n	29cd2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   29cc2:	69bb      	ldr	r3, [r7, #24]
   29cc4:	2232      	movs	r2, #50	; 0x32
   29cc6:	2142      	movs	r1, #66	; 0x42
   29cc8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   29cca:	697b      	ldr	r3, [r7, #20]
   29ccc:	2210      	movs	r2, #16
   29cce:	835a      	strh	r2, [r3, #26]
   29cd0:	e00c      	b.n	29cec <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   29cd2:	231f      	movs	r3, #31
   29cd4:	18fb      	adds	r3, r7, r3
   29cd6:	781b      	ldrb	r3, [r3, #0]
   29cd8:	2220      	movs	r2, #32
   29cda:	4013      	ands	r3, r2
   29cdc:	d006      	beq.n	29cec <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   29cde:	69bb      	ldr	r3, [r7, #24]
   29ce0:	2232      	movs	r2, #50	; 0x32
   29ce2:	2141      	movs	r1, #65	; 0x41
   29ce4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   29ce6:	697b      	ldr	r3, [r7, #20]
   29ce8:	2220      	movs	r2, #32
   29cea:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   29cec:	2310      	movs	r3, #16
   29cee:	18fb      	adds	r3, r7, r3
   29cf0:	881b      	ldrh	r3, [r3, #0]
   29cf2:	2204      	movs	r2, #4
   29cf4:	4013      	ands	r3, r2
				if (callback_status
   29cf6:	d050      	beq.n	29d9a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   29cf8:	69bb      	ldr	r3, [r7, #24]
   29cfa:	695b      	ldr	r3, [r3, #20]
   29cfc:	69ba      	ldr	r2, [r7, #24]
   29cfe:	0010      	movs	r0, r2
   29d00:	4798      	blx	r3
   29d02:	e04a      	b.n	29d9a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   29d04:	697b      	ldr	r3, [r7, #20]
   29d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   29d08:	b29a      	uxth	r2, r3
   29d0a:	230e      	movs	r3, #14
   29d0c:	18fb      	adds	r3, r7, r3
   29d0e:	05d2      	lsls	r2, r2, #23
   29d10:	0dd2      	lsrs	r2, r2, #23
   29d12:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   29d14:	69bb      	ldr	r3, [r7, #24]
   29d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29d18:	220e      	movs	r2, #14
   29d1a:	18ba      	adds	r2, r7, r2
   29d1c:	8812      	ldrh	r2, [r2, #0]
   29d1e:	b2d2      	uxtb	r2, r2
   29d20:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   29d22:	69bb      	ldr	r3, [r7, #24]
   29d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29d26:	1c5a      	adds	r2, r3, #1
   29d28:	69bb      	ldr	r3, [r7, #24]
   29d2a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29d2c:	69bb      	ldr	r3, [r7, #24]
   29d2e:	795b      	ldrb	r3, [r3, #5]
   29d30:	2b01      	cmp	r3, #1
   29d32:	d10d      	bne.n	29d50 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   29d34:	69bb      	ldr	r3, [r7, #24]
   29d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29d38:	220e      	movs	r2, #14
   29d3a:	18ba      	adds	r2, r7, r2
   29d3c:	8812      	ldrh	r2, [r2, #0]
   29d3e:	0a12      	lsrs	r2, r2, #8
   29d40:	b292      	uxth	r2, r2
   29d42:	b2d2      	uxtb	r2, r2
   29d44:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   29d46:	69bb      	ldr	r3, [r7, #24]
   29d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29d4a:	1c5a      	adds	r2, r3, #1
   29d4c:	69bb      	ldr	r3, [r7, #24]
   29d4e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   29d50:	69bb      	ldr	r3, [r7, #24]
   29d52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29d54:	b29b      	uxth	r3, r3
   29d56:	3b01      	subs	r3, #1
   29d58:	b29b      	uxth	r3, r3
   29d5a:	69ba      	ldr	r2, [r7, #24]
   29d5c:	1c19      	adds	r1, r3, #0
   29d5e:	8591      	strh	r1, [r2, #44]	; 0x2c
   29d60:	2b00      	cmp	r3, #0
   29d62:	d11a      	bne.n	29d9a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29d64:	697b      	ldr	r3, [r7, #20]
   29d66:	2204      	movs	r2, #4
   29d68:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   29d6a:	69bb      	ldr	r3, [r7, #24]
   29d6c:	2232      	movs	r2, #50	; 0x32
   29d6e:	2100      	movs	r1, #0
   29d70:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   29d72:	2310      	movs	r3, #16
   29d74:	18fb      	adds	r3, r7, r3
   29d76:	881b      	ldrh	r3, [r3, #0]
   29d78:	2202      	movs	r2, #2
   29d7a:	4013      	ands	r3, r2
					if (callback_status
   29d7c:	d00d      	beq.n	29d9a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   29d7e:	69bb      	ldr	r3, [r7, #24]
   29d80:	691b      	ldr	r3, [r3, #16]
   29d82:	69ba      	ldr	r2, [r7, #24]
   29d84:	0010      	movs	r0, r2
   29d86:	4798      	blx	r3
   29d88:	e007      	b.n	29d9a <_usart_interrupt_handler+0x2ae>
   29d8a:	46c0      	nop			; (mov r8, r8)
   29d8c:	20005c9c 	.word	0x20005c9c
   29d90:	000298cd 	.word	0x000298cd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29d94:	697b      	ldr	r3, [r7, #20]
   29d96:	2204      	movs	r2, #4
   29d98:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   29d9a:	2312      	movs	r3, #18
   29d9c:	18fb      	adds	r3, r7, r3
   29d9e:	881b      	ldrh	r3, [r3, #0]
   29da0:	2210      	movs	r2, #16
   29da2:	4013      	ands	r3, r2
   29da4:	d010      	beq.n	29dc8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   29da6:	697b      	ldr	r3, [r7, #20]
   29da8:	2210      	movs	r2, #16
   29daa:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   29dac:	697b      	ldr	r3, [r7, #20]
   29dae:	2210      	movs	r2, #16
   29db0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   29db2:	2310      	movs	r3, #16
   29db4:	18fb      	adds	r3, r7, r3
   29db6:	881b      	ldrh	r3, [r3, #0]
   29db8:	2210      	movs	r2, #16
   29dba:	4013      	ands	r3, r2
   29dbc:	d004      	beq.n	29dc8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   29dbe:	69bb      	ldr	r3, [r7, #24]
   29dc0:	69db      	ldr	r3, [r3, #28]
   29dc2:	69ba      	ldr	r2, [r7, #24]
   29dc4:	0010      	movs	r0, r2
   29dc6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   29dc8:	2312      	movs	r3, #18
   29dca:	18fb      	adds	r3, r7, r3
   29dcc:	881b      	ldrh	r3, [r3, #0]
   29dce:	2220      	movs	r2, #32
   29dd0:	4013      	ands	r3, r2
   29dd2:	d010      	beq.n	29df6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   29dd4:	697b      	ldr	r3, [r7, #20]
   29dd6:	2220      	movs	r2, #32
   29dd8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   29dda:	697b      	ldr	r3, [r7, #20]
   29ddc:	2220      	movs	r2, #32
   29dde:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   29de0:	2310      	movs	r3, #16
   29de2:	18fb      	adds	r3, r7, r3
   29de4:	881b      	ldrh	r3, [r3, #0]
   29de6:	2208      	movs	r2, #8
   29de8:	4013      	ands	r3, r2
   29dea:	d004      	beq.n	29df6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   29dec:	69bb      	ldr	r3, [r7, #24]
   29dee:	699b      	ldr	r3, [r3, #24]
   29df0:	69ba      	ldr	r2, [r7, #24]
   29df2:	0010      	movs	r0, r2
   29df4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   29df6:	2312      	movs	r3, #18
   29df8:	18fb      	adds	r3, r7, r3
   29dfa:	881b      	ldrh	r3, [r3, #0]
   29dfc:	2208      	movs	r2, #8
   29dfe:	4013      	ands	r3, r2
   29e00:	d010      	beq.n	29e24 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   29e02:	697b      	ldr	r3, [r7, #20]
   29e04:	2208      	movs	r2, #8
   29e06:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   29e08:	697b      	ldr	r3, [r7, #20]
   29e0a:	2208      	movs	r2, #8
   29e0c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   29e0e:	2310      	movs	r3, #16
   29e10:	18fb      	adds	r3, r7, r3
   29e12:	881b      	ldrh	r3, [r3, #0]
   29e14:	2220      	movs	r2, #32
   29e16:	4013      	ands	r3, r2
   29e18:	d004      	beq.n	29e24 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   29e1a:	69bb      	ldr	r3, [r7, #24]
   29e1c:	6a1b      	ldr	r3, [r3, #32]
   29e1e:	69ba      	ldr	r2, [r7, #24]
   29e20:	0010      	movs	r0, r2
   29e22:	4798      	blx	r3
		}
	}
#endif
}
   29e24:	46c0      	nop			; (mov r8, r8)
   29e26:	46bd      	mov	sp, r7
   29e28:	b008      	add	sp, #32
   29e2a:	bd80      	pop	{r7, pc}

00029e2c <system_gclk_gen_get_config_defaults>:
{
   29e2c:	b580      	push	{r7, lr}
   29e2e:	b082      	sub	sp, #8
   29e30:	af00      	add	r7, sp, #0
   29e32:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   29e34:	687b      	ldr	r3, [r7, #4]
   29e36:	2201      	movs	r2, #1
   29e38:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   29e3a:	687b      	ldr	r3, [r7, #4]
   29e3c:	2200      	movs	r2, #0
   29e3e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   29e40:	687b      	ldr	r3, [r7, #4]
   29e42:	2206      	movs	r2, #6
   29e44:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   29e46:	687b      	ldr	r3, [r7, #4]
   29e48:	2200      	movs	r2, #0
   29e4a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   29e4c:	687b      	ldr	r3, [r7, #4]
   29e4e:	2200      	movs	r2, #0
   29e50:	725a      	strb	r2, [r3, #9]
}
   29e52:	46c0      	nop			; (mov r8, r8)
   29e54:	46bd      	mov	sp, r7
   29e56:	b002      	add	sp, #8
   29e58:	bd80      	pop	{r7, pc}

00029e5a <system_gclk_chan_get_config_defaults>:
{
   29e5a:	b580      	push	{r7, lr}
   29e5c:	b082      	sub	sp, #8
   29e5e:	af00      	add	r7, sp, #0
   29e60:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29e62:	687b      	ldr	r3, [r7, #4]
   29e64:	2200      	movs	r2, #0
   29e66:	701a      	strb	r2, [r3, #0]
}
   29e68:	46c0      	nop			; (mov r8, r8)
   29e6a:	46bd      	mov	sp, r7
   29e6c:	b002      	add	sp, #8
   29e6e:	bd80      	pop	{r7, pc}

00029e70 <system_clock_source_osc8m_get_config_defaults>:
{
   29e70:	b580      	push	{r7, lr}
   29e72:	b082      	sub	sp, #8
   29e74:	af00      	add	r7, sp, #0
   29e76:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   29e78:	687b      	ldr	r3, [r7, #4]
   29e7a:	2203      	movs	r2, #3
   29e7c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   29e7e:	687b      	ldr	r3, [r7, #4]
   29e80:	2200      	movs	r2, #0
   29e82:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   29e84:	687b      	ldr	r3, [r7, #4]
   29e86:	2201      	movs	r2, #1
   29e88:	709a      	strb	r2, [r3, #2]
}
   29e8a:	46c0      	nop			; (mov r8, r8)
   29e8c:	46bd      	mov	sp, r7
   29e8e:	b002      	add	sp, #8
   29e90:	bd80      	pop	{r7, pc}
	...

00029e94 <system_cpu_clock_set_divider>:
{
   29e94:	b580      	push	{r7, lr}
   29e96:	b082      	sub	sp, #8
   29e98:	af00      	add	r7, sp, #0
   29e9a:	0002      	movs	r2, r0
   29e9c:	1dfb      	adds	r3, r7, #7
   29e9e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   29ea0:	4a03      	ldr	r2, [pc, #12]	; (29eb0 <system_cpu_clock_set_divider+0x1c>)
   29ea2:	1dfb      	adds	r3, r7, #7
   29ea4:	781b      	ldrb	r3, [r3, #0]
   29ea6:	7213      	strb	r3, [r2, #8]
}
   29ea8:	46c0      	nop			; (mov r8, r8)
   29eaa:	46bd      	mov	sp, r7
   29eac:	b002      	add	sp, #8
   29eae:	bd80      	pop	{r7, pc}
   29eb0:	40000400 	.word	0x40000400

00029eb4 <system_apb_clock_set_divider>:
{
   29eb4:	b580      	push	{r7, lr}
   29eb6:	b082      	sub	sp, #8
   29eb8:	af00      	add	r7, sp, #0
   29eba:	0002      	movs	r2, r0
   29ebc:	1dfb      	adds	r3, r7, #7
   29ebe:	701a      	strb	r2, [r3, #0]
   29ec0:	1dbb      	adds	r3, r7, #6
   29ec2:	1c0a      	adds	r2, r1, #0
   29ec4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29ec6:	1dfb      	adds	r3, r7, #7
   29ec8:	781b      	ldrb	r3, [r3, #0]
   29eca:	2b01      	cmp	r3, #1
   29ecc:	d008      	beq.n	29ee0 <system_apb_clock_set_divider+0x2c>
   29ece:	2b02      	cmp	r3, #2
   29ed0:	d00b      	beq.n	29eea <system_apb_clock_set_divider+0x36>
   29ed2:	2b00      	cmp	r3, #0
   29ed4:	d10e      	bne.n	29ef4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   29ed6:	4a0b      	ldr	r2, [pc, #44]	; (29f04 <system_apb_clock_set_divider+0x50>)
   29ed8:	1dbb      	adds	r3, r7, #6
   29eda:	781b      	ldrb	r3, [r3, #0]
   29edc:	7253      	strb	r3, [r2, #9]
			break;
   29ede:	e00b      	b.n	29ef8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   29ee0:	4a08      	ldr	r2, [pc, #32]	; (29f04 <system_apb_clock_set_divider+0x50>)
   29ee2:	1dbb      	adds	r3, r7, #6
   29ee4:	781b      	ldrb	r3, [r3, #0]
   29ee6:	7293      	strb	r3, [r2, #10]
			break;
   29ee8:	e006      	b.n	29ef8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   29eea:	4a06      	ldr	r2, [pc, #24]	; (29f04 <system_apb_clock_set_divider+0x50>)
   29eec:	1dbb      	adds	r3, r7, #6
   29eee:	781b      	ldrb	r3, [r3, #0]
   29ef0:	72d3      	strb	r3, [r2, #11]
			break;
   29ef2:	e001      	b.n	29ef8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   29ef4:	2317      	movs	r3, #23
   29ef6:	e000      	b.n	29efa <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   29ef8:	2300      	movs	r3, #0
}
   29efa:	0018      	movs	r0, r3
   29efc:	46bd      	mov	sp, r7
   29efe:	b002      	add	sp, #8
   29f00:	bd80      	pop	{r7, pc}
   29f02:	46c0      	nop			; (mov r8, r8)
   29f04:	40000400 	.word	0x40000400

00029f08 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   29f08:	b580      	push	{r7, lr}
   29f0a:	b082      	sub	sp, #8
   29f0c:	af00      	add	r7, sp, #0
   29f0e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   29f10:	687b      	ldr	r3, [r7, #4]
   29f12:	2201      	movs	r2, #1
   29f14:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   29f16:	687b      	ldr	r3, [r7, #4]
   29f18:	2200      	movs	r2, #0
   29f1a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   29f1c:	687b      	ldr	r3, [r7, #4]
   29f1e:	2200      	movs	r2, #0
   29f20:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   29f22:	687b      	ldr	r3, [r7, #4]
   29f24:	2200      	movs	r2, #0
   29f26:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   29f28:	687b      	ldr	r3, [r7, #4]
   29f2a:	2200      	movs	r2, #0
   29f2c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   29f2e:	687b      	ldr	r3, [r7, #4]
   29f30:	4a0a      	ldr	r2, [pc, #40]	; (29f5c <system_clock_source_dpll_get_config_defaults+0x54>)
   29f32:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   29f34:	687b      	ldr	r3, [r7, #4]
   29f36:	2280      	movs	r2, #128	; 0x80
   29f38:	0212      	lsls	r2, r2, #8
   29f3a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   29f3c:	687b      	ldr	r3, [r7, #4]
   29f3e:	2201      	movs	r2, #1
   29f40:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   29f42:	687b      	ldr	r3, [r7, #4]
   29f44:	2200      	movs	r2, #0
   29f46:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   29f48:	687b      	ldr	r3, [r7, #4]
   29f4a:	2200      	movs	r2, #0
   29f4c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   29f4e:	687b      	ldr	r3, [r7, #4]
   29f50:	2200      	movs	r2, #0
   29f52:	749a      	strb	r2, [r3, #18]
};
   29f54:	46c0      	nop			; (mov r8, r8)
   29f56:	46bd      	mov	sp, r7
   29f58:	b002      	add	sp, #8
   29f5a:	bd80      	pop	{r7, pc}
   29f5c:	02dc6c00 	.word	0x02dc6c00

00029f60 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   29f60:	b580      	push	{r7, lr}
   29f62:	b082      	sub	sp, #8
   29f64:	af00      	add	r7, sp, #0
   29f66:	0002      	movs	r2, r0
   29f68:	1dfb      	adds	r3, r7, #7
   29f6a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   29f6c:	4a08      	ldr	r2, [pc, #32]	; (29f90 <system_flash_set_waitstates+0x30>)
   29f6e:	1dfb      	adds	r3, r7, #7
   29f70:	781b      	ldrb	r3, [r3, #0]
   29f72:	210f      	movs	r1, #15
   29f74:	400b      	ands	r3, r1
   29f76:	b2d9      	uxtb	r1, r3
   29f78:	6853      	ldr	r3, [r2, #4]
   29f7a:	200f      	movs	r0, #15
   29f7c:	4001      	ands	r1, r0
   29f7e:	0049      	lsls	r1, r1, #1
   29f80:	201e      	movs	r0, #30
   29f82:	4383      	bics	r3, r0
   29f84:	430b      	orrs	r3, r1
   29f86:	6053      	str	r3, [r2, #4]
}
   29f88:	46c0      	nop			; (mov r8, r8)
   29f8a:	46bd      	mov	sp, r7
   29f8c:	b002      	add	sp, #8
   29f8e:	bd80      	pop	{r7, pc}
   29f90:	41004000 	.word	0x41004000

00029f94 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   29f94:	b580      	push	{r7, lr}
   29f96:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   29f98:	46c0      	nop			; (mov r8, r8)
   29f9a:	4b04      	ldr	r3, [pc, #16]	; (29fac <_system_dfll_wait_for_sync+0x18>)
   29f9c:	68db      	ldr	r3, [r3, #12]
   29f9e:	2210      	movs	r2, #16
   29fa0:	4013      	ands	r3, r2
   29fa2:	d0fa      	beq.n	29f9a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   29fa4:	46c0      	nop			; (mov r8, r8)
   29fa6:	46bd      	mov	sp, r7
   29fa8:	bd80      	pop	{r7, pc}
   29faa:	46c0      	nop			; (mov r8, r8)
   29fac:	40000800 	.word	0x40000800

00029fb0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   29fb0:	b580      	push	{r7, lr}
   29fb2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   29fb4:	4b0c      	ldr	r3, [pc, #48]	; (29fe8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29fb6:	2202      	movs	r2, #2
   29fb8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   29fba:	4b0c      	ldr	r3, [pc, #48]	; (29fec <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   29fbc:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   29fbe:	4a0a      	ldr	r2, [pc, #40]	; (29fe8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29fc0:	4b0b      	ldr	r3, [pc, #44]	; (29ff0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29fc2:	689b      	ldr	r3, [r3, #8]
   29fc4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   29fc6:	4a08      	ldr	r2, [pc, #32]	; (29fe8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29fc8:	4b09      	ldr	r3, [pc, #36]	; (29ff0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29fca:	685b      	ldr	r3, [r3, #4]
   29fcc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   29fce:	4b06      	ldr	r3, [pc, #24]	; (29fe8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29fd0:	2200      	movs	r2, #0
   29fd2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   29fd4:	4b05      	ldr	r3, [pc, #20]	; (29fec <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   29fd6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   29fd8:	4a03      	ldr	r2, [pc, #12]	; (29fe8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29fda:	4b05      	ldr	r3, [pc, #20]	; (29ff0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29fdc:	681b      	ldr	r3, [r3, #0]
   29fde:	b29b      	uxth	r3, r3
   29fe0:	8493      	strh	r3, [r2, #36]	; 0x24
}
   29fe2:	46c0      	nop			; (mov r8, r8)
   29fe4:	46bd      	mov	sp, r7
   29fe6:	bd80      	pop	{r7, pc}
   29fe8:	40000800 	.word	0x40000800
   29fec:	00029f95 	.word	0x00029f95
   29ff0:	200042dc 	.word	0x200042dc

00029ff4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   29ff4:	b580      	push	{r7, lr}
   29ff6:	b082      	sub	sp, #8
   29ff8:	af00      	add	r7, sp, #0
   29ffa:	0002      	movs	r2, r0
   29ffc:	1dfb      	adds	r3, r7, #7
   29ffe:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a000:	1dfb      	adds	r3, r7, #7
   2a002:	781b      	ldrb	r3, [r3, #0]
   2a004:	2b08      	cmp	r3, #8
   2a006:	d841      	bhi.n	2a08c <system_clock_source_get_hz+0x98>
   2a008:	009a      	lsls	r2, r3, #2
   2a00a:	4b23      	ldr	r3, [pc, #140]	; (2a098 <system_clock_source_get_hz+0xa4>)
   2a00c:	18d3      	adds	r3, r2, r3
   2a00e:	681b      	ldr	r3, [r3, #0]
   2a010:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2a012:	4b22      	ldr	r3, [pc, #136]	; (2a09c <system_clock_source_get_hz+0xa8>)
   2a014:	691b      	ldr	r3, [r3, #16]
   2a016:	e03a      	b.n	2a08e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2a018:	4b21      	ldr	r3, [pc, #132]	; (2a0a0 <system_clock_source_get_hz+0xac>)
   2a01a:	6a1b      	ldr	r3, [r3, #32]
   2a01c:	059b      	lsls	r3, r3, #22
   2a01e:	0f9b      	lsrs	r3, r3, #30
   2a020:	b2db      	uxtb	r3, r3
   2a022:	001a      	movs	r2, r3
   2a024:	4b1f      	ldr	r3, [pc, #124]	; (2a0a4 <system_clock_source_get_hz+0xb0>)
   2a026:	40d3      	lsrs	r3, r2
   2a028:	e031      	b.n	2a08e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2a02a:	2380      	movs	r3, #128	; 0x80
   2a02c:	021b      	lsls	r3, r3, #8
   2a02e:	e02e      	b.n	2a08e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2a030:	2380      	movs	r3, #128	; 0x80
   2a032:	021b      	lsls	r3, r3, #8
   2a034:	e02b      	b.n	2a08e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2a036:	4b19      	ldr	r3, [pc, #100]	; (2a09c <system_clock_source_get_hz+0xa8>)
   2a038:	695b      	ldr	r3, [r3, #20]
   2a03a:	e028      	b.n	2a08e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2a03c:	4b17      	ldr	r3, [pc, #92]	; (2a09c <system_clock_source_get_hz+0xa8>)
   2a03e:	681b      	ldr	r3, [r3, #0]
   2a040:	2202      	movs	r2, #2
   2a042:	4013      	ands	r3, r2
   2a044:	d101      	bne.n	2a04a <system_clock_source_get_hz+0x56>
			return 0;
   2a046:	2300      	movs	r3, #0
   2a048:	e021      	b.n	2a08e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2a04a:	4b17      	ldr	r3, [pc, #92]	; (2a0a8 <system_clock_source_get_hz+0xb4>)
   2a04c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2a04e:	4b13      	ldr	r3, [pc, #76]	; (2a09c <system_clock_source_get_hz+0xa8>)
   2a050:	681b      	ldr	r3, [r3, #0]
   2a052:	2224      	movs	r2, #36	; 0x24
   2a054:	4013      	ands	r3, r2
   2a056:	2b04      	cmp	r3, #4
   2a058:	d109      	bne.n	2a06e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a05a:	2000      	movs	r0, #0
   2a05c:	4b13      	ldr	r3, [pc, #76]	; (2a0ac <system_clock_source_get_hz+0xb8>)
   2a05e:	4798      	blx	r3
   2a060:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2a062:	4b0e      	ldr	r3, [pc, #56]	; (2a09c <system_clock_source_get_hz+0xa8>)
   2a064:	689b      	ldr	r3, [r3, #8]
   2a066:	041b      	lsls	r3, r3, #16
   2a068:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a06a:	4353      	muls	r3, r2
   2a06c:	e00f      	b.n	2a08e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2a06e:	4b10      	ldr	r3, [pc, #64]	; (2a0b0 <system_clock_source_get_hz+0xbc>)
   2a070:	e00d      	b.n	2a08e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2a072:	4a0b      	ldr	r2, [pc, #44]	; (2a0a0 <system_clock_source_get_hz+0xac>)
   2a074:	2350      	movs	r3, #80	; 0x50
   2a076:	5cd3      	ldrb	r3, [r2, r3]
   2a078:	b2db      	uxtb	r3, r3
   2a07a:	001a      	movs	r2, r3
   2a07c:	2304      	movs	r3, #4
   2a07e:	4013      	ands	r3, r2
   2a080:	d101      	bne.n	2a086 <system_clock_source_get_hz+0x92>
			return 0;
   2a082:	2300      	movs	r3, #0
   2a084:	e003      	b.n	2a08e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2a086:	4b05      	ldr	r3, [pc, #20]	; (2a09c <system_clock_source_get_hz+0xa8>)
   2a088:	68db      	ldr	r3, [r3, #12]
   2a08a:	e000      	b.n	2a08e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2a08c:	2300      	movs	r3, #0
	}
}
   2a08e:	0018      	movs	r0, r3
   2a090:	46bd      	mov	sp, r7
   2a092:	b002      	add	sp, #8
   2a094:	bd80      	pop	{r7, pc}
   2a096:	46c0      	nop			; (mov r8, r8)
   2a098:	0003a494 	.word	0x0003a494
   2a09c:	200042dc 	.word	0x200042dc
   2a0a0:	40000800 	.word	0x40000800
   2a0a4:	007a1200 	.word	0x007a1200
   2a0a8:	00029f95 	.word	0x00029f95
   2a0ac:	0002aa91 	.word	0x0002aa91
   2a0b0:	02dc6c00 	.word	0x02dc6c00

0002a0b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2a0b4:	b580      	push	{r7, lr}
   2a0b6:	b084      	sub	sp, #16
   2a0b8:	af00      	add	r7, sp, #0
   2a0ba:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2a0bc:	4b1a      	ldr	r3, [pc, #104]	; (2a128 <system_clock_source_osc8m_set_config+0x74>)
   2a0be:	6a1b      	ldr	r3, [r3, #32]
   2a0c0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2a0c2:	687b      	ldr	r3, [r7, #4]
   2a0c4:	781b      	ldrb	r3, [r3, #0]
   2a0c6:	1c1a      	adds	r2, r3, #0
   2a0c8:	2303      	movs	r3, #3
   2a0ca:	4013      	ands	r3, r2
   2a0cc:	b2da      	uxtb	r2, r3
   2a0ce:	230d      	movs	r3, #13
   2a0d0:	18fb      	adds	r3, r7, r3
   2a0d2:	2103      	movs	r1, #3
   2a0d4:	400a      	ands	r2, r1
   2a0d6:	0010      	movs	r0, r2
   2a0d8:	781a      	ldrb	r2, [r3, #0]
   2a0da:	2103      	movs	r1, #3
   2a0dc:	438a      	bics	r2, r1
   2a0de:	1c11      	adds	r1, r2, #0
   2a0e0:	1c02      	adds	r2, r0, #0
   2a0e2:	430a      	orrs	r2, r1
   2a0e4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2a0e6:	687b      	ldr	r3, [r7, #4]
   2a0e8:	789a      	ldrb	r2, [r3, #2]
   2a0ea:	230c      	movs	r3, #12
   2a0ec:	18fb      	adds	r3, r7, r3
   2a0ee:	01d0      	lsls	r0, r2, #7
   2a0f0:	781a      	ldrb	r2, [r3, #0]
   2a0f2:	217f      	movs	r1, #127	; 0x7f
   2a0f4:	400a      	ands	r2, r1
   2a0f6:	1c11      	adds	r1, r2, #0
   2a0f8:	1c02      	adds	r2, r0, #0
   2a0fa:	430a      	orrs	r2, r1
   2a0fc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2a0fe:	687b      	ldr	r3, [r7, #4]
   2a100:	785a      	ldrb	r2, [r3, #1]
   2a102:	230c      	movs	r3, #12
   2a104:	18fb      	adds	r3, r7, r3
   2a106:	2101      	movs	r1, #1
   2a108:	400a      	ands	r2, r1
   2a10a:	0190      	lsls	r0, r2, #6
   2a10c:	781a      	ldrb	r2, [r3, #0]
   2a10e:	2140      	movs	r1, #64	; 0x40
   2a110:	438a      	bics	r2, r1
   2a112:	1c11      	adds	r1, r2, #0
   2a114:	1c02      	adds	r2, r0, #0
   2a116:	430a      	orrs	r2, r1
   2a118:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2a11a:	4b03      	ldr	r3, [pc, #12]	; (2a128 <system_clock_source_osc8m_set_config+0x74>)
   2a11c:	68fa      	ldr	r2, [r7, #12]
   2a11e:	621a      	str	r2, [r3, #32]
}
   2a120:	46c0      	nop			; (mov r8, r8)
   2a122:	46bd      	mov	sp, r7
   2a124:	b004      	add	sp, #16
   2a126:	bd80      	pop	{r7, pc}
   2a128:	40000800 	.word	0x40000800

0002a12c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2a12c:	b580      	push	{r7, lr}
   2a12e:	b086      	sub	sp, #24
   2a130:	af00      	add	r7, sp, #0
   2a132:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   2a134:	687b      	ldr	r3, [r7, #4]
   2a136:	68db      	ldr	r3, [r3, #12]
   2a138:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2a13a:	687b      	ldr	r3, [r7, #4]
   2a13c:	7d1b      	ldrb	r3, [r3, #20]
   2a13e:	2b01      	cmp	r3, #1
   2a140:	d10a      	bne.n	2a158 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2a142:	687b      	ldr	r3, [r7, #4]
   2a144:	8a1b      	ldrh	r3, [r3, #16]
   2a146:	3301      	adds	r3, #1
   2a148:	005b      	lsls	r3, r3, #1
   2a14a:	001a      	movs	r2, r3
   2a14c:	4b36      	ldr	r3, [pc, #216]	; (2a228 <system_clock_source_dpll_set_config+0xfc>)
   2a14e:	0011      	movs	r1, r2
   2a150:	6978      	ldr	r0, [r7, #20]
   2a152:	4798      	blx	r3
   2a154:	0003      	movs	r3, r0
   2a156:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   2a158:	687b      	ldr	r3, [r7, #4]
   2a15a:	689b      	ldr	r3, [r3, #8]
   2a15c:	011a      	lsls	r2, r3, #4
   2a15e:	4b32      	ldr	r3, [pc, #200]	; (2a228 <system_clock_source_dpll_set_config+0xfc>)
   2a160:	6979      	ldr	r1, [r7, #20]
   2a162:	0010      	movs	r0, r2
   2a164:	4798      	blx	r3
   2a166:	0003      	movs	r3, r0
   2a168:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2a16a:	693b      	ldr	r3, [r7, #16]
   2a16c:	b2da      	uxtb	r2, r3
   2a16e:	230f      	movs	r3, #15
   2a170:	18fb      	adds	r3, r7, r3
   2a172:	210f      	movs	r1, #15
   2a174:	400a      	ands	r2, r1
   2a176:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   2a178:	693b      	ldr	r3, [r7, #16]
   2a17a:	091b      	lsrs	r3, r3, #4
   2a17c:	3b01      	subs	r3, #1
   2a17e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2a180:	492a      	ldr	r1, [pc, #168]	; (2a22c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a182:	687b      	ldr	r3, [r7, #4]
   2a184:	781b      	ldrb	r3, [r3, #0]
   2a186:	01db      	lsls	r3, r3, #7
   2a188:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2a18a:	687b      	ldr	r3, [r7, #4]
   2a18c:	785b      	ldrb	r3, [r3, #1]
   2a18e:	019b      	lsls	r3, r3, #6
   2a190:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a192:	4313      	orrs	r3, r2
   2a194:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2a196:	2344      	movs	r3, #68	; 0x44
   2a198:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2a19a:	4b24      	ldr	r3, [pc, #144]	; (2a22c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a19c:	220f      	movs	r2, #15
   2a19e:	18ba      	adds	r2, r7, r2
   2a1a0:	7812      	ldrb	r2, [r2, #0]
   2a1a2:	0412      	lsls	r2, r2, #16
   2a1a4:	0011      	movs	r1, r2
   2a1a6:	22f0      	movs	r2, #240	; 0xf0
   2a1a8:	0312      	lsls	r2, r2, #12
   2a1aa:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2a1ac:	693a      	ldr	r2, [r7, #16]
   2a1ae:	0512      	lsls	r2, r2, #20
   2a1b0:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a1b2:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   2a1b4:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2a1b6:	4b1d      	ldr	r3, [pc, #116]	; (2a22c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a1b8:	687a      	ldr	r2, [r7, #4]
   2a1ba:	8a12      	ldrh	r2, [r2, #16]
   2a1bc:	0412      	lsls	r2, r2, #16
   2a1be:	0011      	movs	r1, r2
   2a1c0:	4a1b      	ldr	r2, [pc, #108]	; (2a230 <system_clock_source_dpll_set_config+0x104>)
   2a1c2:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a1c4:	687a      	ldr	r2, [r7, #4]
   2a1c6:	7892      	ldrb	r2, [r2, #2]
   2a1c8:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a1ca:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a1cc:	687a      	ldr	r2, [r7, #4]
   2a1ce:	7cd2      	ldrb	r2, [r2, #19]
   2a1d0:	0212      	lsls	r2, r2, #8
   2a1d2:	0010      	movs	r0, r2
   2a1d4:	22e0      	movs	r2, #224	; 0xe0
   2a1d6:	00d2      	lsls	r2, r2, #3
   2a1d8:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a1da:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a1dc:	687a      	ldr	r2, [r7, #4]
   2a1de:	7d12      	ldrb	r2, [r2, #20]
   2a1e0:	0112      	lsls	r2, r2, #4
   2a1e2:	0010      	movs	r0, r2
   2a1e4:	2230      	movs	r2, #48	; 0x30
   2a1e6:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a1e8:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a1ea:	687a      	ldr	r2, [r7, #4]
   2a1ec:	78d2      	ldrb	r2, [r2, #3]
   2a1ee:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a1f0:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a1f2:	687a      	ldr	r2, [r7, #4]
   2a1f4:	7912      	ldrb	r2, [r2, #4]
   2a1f6:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a1f8:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2a1fa:	687a      	ldr	r2, [r7, #4]
   2a1fc:	7c92      	ldrb	r2, [r2, #18]
   2a1fe:	0010      	movs	r0, r2
   2a200:	2203      	movs	r2, #3
   2a202:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a204:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2a206:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2a208:	693b      	ldr	r3, [r7, #16]
   2a20a:	3301      	adds	r3, #1
   2a20c:	011a      	lsls	r2, r3, #4
   2a20e:	230f      	movs	r3, #15
   2a210:	18fb      	adds	r3, r7, r3
   2a212:	781b      	ldrb	r3, [r3, #0]
   2a214:	18d3      	adds	r3, r2, r3
   2a216:	697a      	ldr	r2, [r7, #20]
   2a218:	4353      	muls	r3, r2
   2a21a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2a21c:	4b05      	ldr	r3, [pc, #20]	; (2a234 <system_clock_source_dpll_set_config+0x108>)
   2a21e:	60da      	str	r2, [r3, #12]
}
   2a220:	46c0      	nop			; (mov r8, r8)
   2a222:	46bd      	mov	sp, r7
   2a224:	b006      	add	sp, #24
   2a226:	bd80      	pop	{r7, pc}
   2a228:	00033635 	.word	0x00033635
   2a22c:	40000800 	.word	0x40000800
   2a230:	07ff0000 	.word	0x07ff0000
   2a234:	200042dc 	.word	0x200042dc

0002a238 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   2a238:	b580      	push	{r7, lr}
   2a23a:	b082      	sub	sp, #8
   2a23c:	af00      	add	r7, sp, #0
   2a23e:	0002      	movs	r2, r0
   2a240:	1dfb      	adds	r3, r7, #7
   2a242:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a244:	1dfb      	adds	r3, r7, #7
   2a246:	781b      	ldrb	r3, [r3, #0]
   2a248:	2b08      	cmp	r3, #8
   2a24a:	d83b      	bhi.n	2a2c4 <system_clock_source_enable+0x8c>
   2a24c:	009a      	lsls	r2, r3, #2
   2a24e:	4b21      	ldr	r3, [pc, #132]	; (2a2d4 <system_clock_source_enable+0x9c>)
   2a250:	18d3      	adds	r3, r2, r3
   2a252:	681b      	ldr	r3, [r3, #0]
   2a254:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2a256:	4b20      	ldr	r3, [pc, #128]	; (2a2d8 <system_clock_source_enable+0xa0>)
   2a258:	4a1f      	ldr	r2, [pc, #124]	; (2a2d8 <system_clock_source_enable+0xa0>)
   2a25a:	6a12      	ldr	r2, [r2, #32]
   2a25c:	2102      	movs	r1, #2
   2a25e:	430a      	orrs	r2, r1
   2a260:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2a262:	2300      	movs	r3, #0
   2a264:	e031      	b.n	2a2ca <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2a266:	4b1c      	ldr	r3, [pc, #112]	; (2a2d8 <system_clock_source_enable+0xa0>)
   2a268:	4a1b      	ldr	r2, [pc, #108]	; (2a2d8 <system_clock_source_enable+0xa0>)
   2a26a:	6992      	ldr	r2, [r2, #24]
   2a26c:	2102      	movs	r1, #2
   2a26e:	430a      	orrs	r2, r1
   2a270:	619a      	str	r2, [r3, #24]
		break;
   2a272:	e029      	b.n	2a2c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2a274:	4a18      	ldr	r2, [pc, #96]	; (2a2d8 <system_clock_source_enable+0xa0>)
   2a276:	4b18      	ldr	r3, [pc, #96]	; (2a2d8 <system_clock_source_enable+0xa0>)
   2a278:	8a1b      	ldrh	r3, [r3, #16]
   2a27a:	b29b      	uxth	r3, r3
   2a27c:	2102      	movs	r1, #2
   2a27e:	430b      	orrs	r3, r1
   2a280:	b29b      	uxth	r3, r3
   2a282:	8213      	strh	r3, [r2, #16]
		break;
   2a284:	e020      	b.n	2a2c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2a286:	4a14      	ldr	r2, [pc, #80]	; (2a2d8 <system_clock_source_enable+0xa0>)
   2a288:	4b13      	ldr	r3, [pc, #76]	; (2a2d8 <system_clock_source_enable+0xa0>)
   2a28a:	8a9b      	ldrh	r3, [r3, #20]
   2a28c:	b29b      	uxth	r3, r3
   2a28e:	2102      	movs	r1, #2
   2a290:	430b      	orrs	r3, r1
   2a292:	b29b      	uxth	r3, r3
   2a294:	8293      	strh	r3, [r2, #20]
		break;
   2a296:	e017      	b.n	2a2c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2a298:	4b10      	ldr	r3, [pc, #64]	; (2a2dc <system_clock_source_enable+0xa4>)
   2a29a:	681b      	ldr	r3, [r3, #0]
   2a29c:	2202      	movs	r2, #2
   2a29e:	431a      	orrs	r2, r3
   2a2a0:	4b0e      	ldr	r3, [pc, #56]	; (2a2dc <system_clock_source_enable+0xa4>)
   2a2a2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2a2a4:	4b0e      	ldr	r3, [pc, #56]	; (2a2e0 <system_clock_source_enable+0xa8>)
   2a2a6:	4798      	blx	r3
		break;
   2a2a8:	e00e      	b.n	2a2c8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2a2aa:	4a0b      	ldr	r2, [pc, #44]	; (2a2d8 <system_clock_source_enable+0xa0>)
   2a2ac:	490a      	ldr	r1, [pc, #40]	; (2a2d8 <system_clock_source_enable+0xa0>)
   2a2ae:	2344      	movs	r3, #68	; 0x44
   2a2b0:	5ccb      	ldrb	r3, [r1, r3]
   2a2b2:	b2db      	uxtb	r3, r3
   2a2b4:	2102      	movs	r1, #2
   2a2b6:	430b      	orrs	r3, r1
   2a2b8:	b2d9      	uxtb	r1, r3
   2a2ba:	2344      	movs	r3, #68	; 0x44
   2a2bc:	54d1      	strb	r1, [r2, r3]
		break;
   2a2be:	e003      	b.n	2a2c8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2a2c0:	2300      	movs	r3, #0
   2a2c2:	e002      	b.n	2a2ca <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2a2c4:	2317      	movs	r3, #23
   2a2c6:	e000      	b.n	2a2ca <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2a2c8:	2300      	movs	r3, #0
}
   2a2ca:	0018      	movs	r0, r3
   2a2cc:	46bd      	mov	sp, r7
   2a2ce:	b002      	add	sp, #8
   2a2d0:	bd80      	pop	{r7, pc}
   2a2d2:	46c0      	nop			; (mov r8, r8)
   2a2d4:	0003a4b8 	.word	0x0003a4b8
   2a2d8:	40000800 	.word	0x40000800
   2a2dc:	200042dc 	.word	0x200042dc
   2a2e0:	00029fb1 	.word	0x00029fb1

0002a2e4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2a2e4:	b580      	push	{r7, lr}
   2a2e6:	b084      	sub	sp, #16
   2a2e8:	af00      	add	r7, sp, #0
   2a2ea:	0002      	movs	r2, r0
   2a2ec:	1dfb      	adds	r3, r7, #7
   2a2ee:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2a2f0:	2300      	movs	r3, #0
   2a2f2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2a2f4:	1dfb      	adds	r3, r7, #7
   2a2f6:	781b      	ldrb	r3, [r3, #0]
   2a2f8:	2b08      	cmp	r3, #8
   2a2fa:	d821      	bhi.n	2a340 <system_clock_source_is_ready+0x5c>
   2a2fc:	009a      	lsls	r2, r3, #2
   2a2fe:	4b18      	ldr	r3, [pc, #96]	; (2a360 <system_clock_source_is_ready+0x7c>)
   2a300:	18d3      	adds	r3, r2, r3
   2a302:	681b      	ldr	r3, [r3, #0]
   2a304:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2a306:	2308      	movs	r3, #8
   2a308:	60fb      	str	r3, [r7, #12]
		break;
   2a30a:	e01b      	b.n	2a344 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2a30c:	2304      	movs	r3, #4
   2a30e:	60fb      	str	r3, [r7, #12]
		break;
   2a310:	e018      	b.n	2a344 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2a312:	2301      	movs	r3, #1
   2a314:	60fb      	str	r3, [r7, #12]
		break;
   2a316:	e015      	b.n	2a344 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2a318:	2302      	movs	r3, #2
   2a31a:	60fb      	str	r3, [r7, #12]
		break;
   2a31c:	e012      	b.n	2a344 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2a31e:	2310      	movs	r3, #16
   2a320:	60fb      	str	r3, [r7, #12]
		}
		break;
   2a322:	e00f      	b.n	2a344 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2a324:	4a0f      	ldr	r2, [pc, #60]	; (2a364 <system_clock_source_is_ready+0x80>)
   2a326:	2350      	movs	r3, #80	; 0x50
   2a328:	5cd3      	ldrb	r3, [r2, r3]
   2a32a:	b2db      	uxtb	r3, r3
   2a32c:	001a      	movs	r2, r3
   2a32e:	2303      	movs	r3, #3
   2a330:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2a332:	3b03      	subs	r3, #3
   2a334:	425a      	negs	r2, r3
   2a336:	4153      	adcs	r3, r2
   2a338:	b2db      	uxtb	r3, r3
   2a33a:	e00c      	b.n	2a356 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2a33c:	2301      	movs	r3, #1
   2a33e:	e00a      	b.n	2a356 <system_clock_source_is_ready+0x72>

	default:
		return false;
   2a340:	2300      	movs	r3, #0
   2a342:	e008      	b.n	2a356 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2a344:	4b07      	ldr	r3, [pc, #28]	; (2a364 <system_clock_source_is_ready+0x80>)
   2a346:	68db      	ldr	r3, [r3, #12]
   2a348:	68fa      	ldr	r2, [r7, #12]
   2a34a:	401a      	ands	r2, r3
   2a34c:	68fb      	ldr	r3, [r7, #12]
   2a34e:	1ad3      	subs	r3, r2, r3
   2a350:	425a      	negs	r2, r3
   2a352:	4153      	adcs	r3, r2
   2a354:	b2db      	uxtb	r3, r3
}
   2a356:	0018      	movs	r0, r3
   2a358:	46bd      	mov	sp, r7
   2a35a:	b004      	add	sp, #16
   2a35c:	bd80      	pop	{r7, pc}
   2a35e:	46c0      	nop			; (mov r8, r8)
   2a360:	0003a4dc 	.word	0x0003a4dc
   2a364:	40000800 	.word	0x40000800

0002a368 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2a368:	b580      	push	{r7, lr}
   2a36a:	b082      	sub	sp, #8
   2a36c:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2a36e:	003b      	movs	r3, r7
   2a370:	2203      	movs	r2, #3
   2a372:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a374:	2300      	movs	r3, #0
   2a376:	607b      	str	r3, [r7, #4]
   2a378:	e009      	b.n	2a38e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2a37a:	687b      	ldr	r3, [r7, #4]
   2a37c:	b2db      	uxtb	r3, r3
   2a37e:	003a      	movs	r2, r7
   2a380:	0011      	movs	r1, r2
   2a382:	0018      	movs	r0, r3
   2a384:	4b05      	ldr	r3, [pc, #20]	; (2a39c <_switch_peripheral_gclk+0x34>)
   2a386:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a388:	687b      	ldr	r3, [r7, #4]
   2a38a:	3301      	adds	r3, #1
   2a38c:	607b      	str	r3, [r7, #4]
   2a38e:	687b      	ldr	r3, [r7, #4]
   2a390:	2b24      	cmp	r3, #36	; 0x24
   2a392:	d9f2      	bls.n	2a37a <_switch_peripheral_gclk+0x12>
	}
}
   2a394:	46c0      	nop			; (mov r8, r8)
   2a396:	46bd      	mov	sp, r7
   2a398:	b002      	add	sp, #8
   2a39a:	bd80      	pop	{r7, pc}
   2a39c:	0002a96d 	.word	0x0002a96d

0002a3a0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2a3a0:	b580      	push	{r7, lr}
   2a3a2:	b0a6      	sub	sp, #152	; 0x98
   2a3a4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2a3a6:	4b92      	ldr	r3, [pc, #584]	; (2a5f0 <system_clock_init+0x250>)
   2a3a8:	22c2      	movs	r2, #194	; 0xc2
   2a3aa:	00d2      	lsls	r2, r2, #3
   2a3ac:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2a3ae:	2003      	movs	r0, #3
   2a3b0:	4b90      	ldr	r3, [pc, #576]	; (2a5f4 <system_clock_init+0x254>)
   2a3b2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2a3b4:	4b90      	ldr	r3, [pc, #576]	; (2a5f8 <system_clock_init+0x258>)
   2a3b6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2a3b8:	2394      	movs	r3, #148	; 0x94
   2a3ba:	18fb      	adds	r3, r7, r3
   2a3bc:	0018      	movs	r0, r3
   2a3be:	4b8f      	ldr	r3, [pc, #572]	; (2a5fc <system_clock_init+0x25c>)
   2a3c0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2a3c2:	2394      	movs	r3, #148	; 0x94
   2a3c4:	18fb      	adds	r3, r7, r3
   2a3c6:	2200      	movs	r2, #0
   2a3c8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2a3ca:	2394      	movs	r3, #148	; 0x94
   2a3cc:	18fb      	adds	r3, r7, r3
   2a3ce:	2201      	movs	r2, #1
   2a3d0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2a3d2:	2394      	movs	r3, #148	; 0x94
   2a3d4:	18fb      	adds	r3, r7, r3
   2a3d6:	2200      	movs	r2, #0
   2a3d8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2a3da:	2394      	movs	r3, #148	; 0x94
   2a3dc:	18fb      	adds	r3, r7, r3
   2a3de:	0018      	movs	r0, r3
   2a3e0:	4b87      	ldr	r3, [pc, #540]	; (2a600 <system_clock_init+0x260>)
   2a3e2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   2a3e4:	2006      	movs	r0, #6
   2a3e6:	4b87      	ldr	r3, [pc, #540]	; (2a604 <system_clock_init+0x264>)
   2a3e8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2a3ea:	4b87      	ldr	r3, [pc, #540]	; (2a608 <system_clock_init+0x268>)
   2a3ec:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2a3ee:	2360      	movs	r3, #96	; 0x60
   2a3f0:	18fb      	adds	r3, r7, r3
   2a3f2:	0018      	movs	r0, r3
   2a3f4:	4b85      	ldr	r3, [pc, #532]	; (2a60c <system_clock_init+0x26c>)
   2a3f6:	4798      	blx	r3
   2a3f8:	2360      	movs	r3, #96	; 0x60
   2a3fa:	18fb      	adds	r3, r7, r3
   2a3fc:	2206      	movs	r2, #6
   2a3fe:	701a      	strb	r2, [r3, #0]
   2a400:	2360      	movs	r3, #96	; 0x60
   2a402:	18fb      	adds	r3, r7, r3
   2a404:	2208      	movs	r2, #8
   2a406:	605a      	str	r2, [r3, #4]
   2a408:	2360      	movs	r3, #96	; 0x60
   2a40a:	18fb      	adds	r3, r7, r3
   2a40c:	2200      	movs	r2, #0
   2a40e:	721a      	strb	r2, [r3, #8]
   2a410:	2360      	movs	r3, #96	; 0x60
   2a412:	18fb      	adds	r3, r7, r3
   2a414:	2200      	movs	r2, #0
   2a416:	725a      	strb	r2, [r3, #9]
   2a418:	2360      	movs	r3, #96	; 0x60
   2a41a:	18fb      	adds	r3, r7, r3
   2a41c:	0019      	movs	r1, r3
   2a41e:	2001      	movs	r0, #1
   2a420:	4b7b      	ldr	r3, [pc, #492]	; (2a610 <system_clock_init+0x270>)
   2a422:	4798      	blx	r3
   2a424:	2001      	movs	r0, #1
   2a426:	4b7b      	ldr	r3, [pc, #492]	; (2a614 <system_clock_init+0x274>)
   2a428:	4798      	blx	r3
   2a42a:	2354      	movs	r3, #84	; 0x54
   2a42c:	18fb      	adds	r3, r7, r3
   2a42e:	0018      	movs	r0, r3
   2a430:	4b76      	ldr	r3, [pc, #472]	; (2a60c <system_clock_init+0x26c>)
   2a432:	4798      	blx	r3
   2a434:	2354      	movs	r3, #84	; 0x54
   2a436:	18fb      	adds	r3, r7, r3
   2a438:	2203      	movs	r2, #3
   2a43a:	701a      	strb	r2, [r3, #0]
   2a43c:	2354      	movs	r3, #84	; 0x54
   2a43e:	18fb      	adds	r3, r7, r3
   2a440:	2201      	movs	r2, #1
   2a442:	605a      	str	r2, [r3, #4]
   2a444:	2354      	movs	r3, #84	; 0x54
   2a446:	18fb      	adds	r3, r7, r3
   2a448:	2201      	movs	r2, #1
   2a44a:	721a      	strb	r2, [r3, #8]
   2a44c:	2354      	movs	r3, #84	; 0x54
   2a44e:	18fb      	adds	r3, r7, r3
   2a450:	2200      	movs	r2, #0
   2a452:	725a      	strb	r2, [r3, #9]
   2a454:	2354      	movs	r3, #84	; 0x54
   2a456:	18fb      	adds	r3, r7, r3
   2a458:	0019      	movs	r1, r3
   2a45a:	2002      	movs	r0, #2
   2a45c:	4b6c      	ldr	r3, [pc, #432]	; (2a610 <system_clock_init+0x270>)
   2a45e:	4798      	blx	r3
   2a460:	2002      	movs	r0, #2
   2a462:	4b6c      	ldr	r3, [pc, #432]	; (2a614 <system_clock_init+0x274>)
   2a464:	4798      	blx	r3
   2a466:	233c      	movs	r3, #60	; 0x3c
   2a468:	18fb      	adds	r3, r7, r3
   2a46a:	0018      	movs	r0, r3
   2a46c:	4b67      	ldr	r3, [pc, #412]	; (2a60c <system_clock_init+0x26c>)
   2a46e:	4798      	blx	r3
   2a470:	233c      	movs	r3, #60	; 0x3c
   2a472:	18fb      	adds	r3, r7, r3
   2a474:	2203      	movs	r2, #3
   2a476:	701a      	strb	r2, [r3, #0]
   2a478:	233c      	movs	r3, #60	; 0x3c
   2a47a:	18fb      	adds	r3, r7, r3
   2a47c:	2220      	movs	r2, #32
   2a47e:	605a      	str	r2, [r3, #4]
   2a480:	233c      	movs	r3, #60	; 0x3c
   2a482:	18fb      	adds	r3, r7, r3
   2a484:	2200      	movs	r2, #0
   2a486:	721a      	strb	r2, [r3, #8]
   2a488:	233c      	movs	r3, #60	; 0x3c
   2a48a:	18fb      	adds	r3, r7, r3
   2a48c:	2200      	movs	r2, #0
   2a48e:	725a      	strb	r2, [r3, #9]
   2a490:	233c      	movs	r3, #60	; 0x3c
   2a492:	18fb      	adds	r3, r7, r3
   2a494:	0019      	movs	r1, r3
   2a496:	2004      	movs	r0, #4
   2a498:	4b5d      	ldr	r3, [pc, #372]	; (2a610 <system_clock_init+0x270>)
   2a49a:	4798      	blx	r3
   2a49c:	2004      	movs	r0, #4
   2a49e:	4b5d      	ldr	r3, [pc, #372]	; (2a614 <system_clock_init+0x274>)
   2a4a0:	4798      	blx	r3
   2a4a2:	2330      	movs	r3, #48	; 0x30
   2a4a4:	18fb      	adds	r3, r7, r3
   2a4a6:	0018      	movs	r0, r3
   2a4a8:	4b58      	ldr	r3, [pc, #352]	; (2a60c <system_clock_init+0x26c>)
   2a4aa:	4798      	blx	r3
   2a4ac:	2330      	movs	r3, #48	; 0x30
   2a4ae:	18fb      	adds	r3, r7, r3
   2a4b0:	2206      	movs	r2, #6
   2a4b2:	701a      	strb	r2, [r3, #0]
   2a4b4:	2330      	movs	r3, #48	; 0x30
   2a4b6:	18fb      	adds	r3, r7, r3
   2a4b8:	2201      	movs	r2, #1
   2a4ba:	605a      	str	r2, [r3, #4]
   2a4bc:	2330      	movs	r3, #48	; 0x30
   2a4be:	18fb      	adds	r3, r7, r3
   2a4c0:	2200      	movs	r2, #0
   2a4c2:	721a      	strb	r2, [r3, #8]
   2a4c4:	2330      	movs	r3, #48	; 0x30
   2a4c6:	18fb      	adds	r3, r7, r3
   2a4c8:	2200      	movs	r2, #0
   2a4ca:	725a      	strb	r2, [r3, #9]
   2a4cc:	2330      	movs	r3, #48	; 0x30
   2a4ce:	18fb      	adds	r3, r7, r3
   2a4d0:	0019      	movs	r1, r3
   2a4d2:	2005      	movs	r0, #5
   2a4d4:	4b4e      	ldr	r3, [pc, #312]	; (2a610 <system_clock_init+0x270>)
   2a4d6:	4798      	blx	r3
   2a4d8:	2005      	movs	r0, #5
   2a4da:	4b4e      	ldr	r3, [pc, #312]	; (2a614 <system_clock_init+0x274>)
   2a4dc:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2a4de:	2390      	movs	r3, #144	; 0x90
   2a4e0:	18fb      	adds	r3, r7, r3
   2a4e2:	0018      	movs	r0, r3
   2a4e4:	4b4c      	ldr	r3, [pc, #304]	; (2a618 <system_clock_init+0x278>)
   2a4e6:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2a4e8:	2390      	movs	r3, #144	; 0x90
   2a4ea:	18fb      	adds	r3, r7, r3
   2a4ec:	2201      	movs	r2, #1
   2a4ee:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2a4f0:	2390      	movs	r3, #144	; 0x90
   2a4f2:	18fb      	adds	r3, r7, r3
   2a4f4:	0019      	movs	r1, r3
   2a4f6:	2001      	movs	r0, #1
   2a4f8:	4b48      	ldr	r3, [pc, #288]	; (2a61c <system_clock_init+0x27c>)
   2a4fa:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2a4fc:	2001      	movs	r0, #1
   2a4fe:	4b48      	ldr	r3, [pc, #288]	; (2a620 <system_clock_init+0x280>)
   2a500:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2a502:	2378      	movs	r3, #120	; 0x78
   2a504:	18fb      	adds	r3, r7, r3
   2a506:	0018      	movs	r0, r3
   2a508:	4b46      	ldr	r3, [pc, #280]	; (2a624 <system_clock_init+0x284>)
   2a50a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2a50c:	2378      	movs	r3, #120	; 0x78
   2a50e:	18fb      	adds	r3, r7, r3
   2a510:	2200      	movs	r2, #0
   2a512:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2a514:	2378      	movs	r3, #120	; 0x78
   2a516:	18fb      	adds	r3, r7, r3
   2a518:	2200      	movs	r2, #0
   2a51a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2a51c:	2378      	movs	r3, #120	; 0x78
   2a51e:	18fb      	adds	r3, r7, r3
   2a520:	2200      	movs	r2, #0
   2a522:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2a524:	2378      	movs	r3, #120	; 0x78
   2a526:	18fb      	adds	r3, r7, r3
   2a528:	2200      	movs	r2, #0
   2a52a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2a52c:	2378      	movs	r3, #120	; 0x78
   2a52e:	18fb      	adds	r3, r7, r3
   2a530:	2200      	movs	r2, #0
   2a532:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2a534:	2378      	movs	r3, #120	; 0x78
   2a536:	18fb      	adds	r3, r7, r3
   2a538:	2200      	movs	r2, #0
   2a53a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2a53c:	2378      	movs	r3, #120	; 0x78
   2a53e:	18fb      	adds	r3, r7, r3
   2a540:	2200      	movs	r2, #0
   2a542:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2a544:	2378      	movs	r3, #120	; 0x78
   2a546:	18fb      	adds	r3, r7, r3
   2a548:	2202      	movs	r2, #2
   2a54a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2a54c:	2378      	movs	r3, #120	; 0x78
   2a54e:	18fb      	adds	r3, r7, r3
   2a550:	4a35      	ldr	r2, [pc, #212]	; (2a628 <system_clock_init+0x288>)
   2a552:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2a554:	2378      	movs	r3, #120	; 0x78
   2a556:	18fb      	adds	r3, r7, r3
   2a558:	2201      	movs	r2, #1
   2a55a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2a55c:	2378      	movs	r3, #120	; 0x78
   2a55e:	18fb      	adds	r3, r7, r3
   2a560:	4a32      	ldr	r2, [pc, #200]	; (2a62c <system_clock_init+0x28c>)
   2a562:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2a564:	2378      	movs	r3, #120	; 0x78
   2a566:	18fb      	adds	r3, r7, r3
   2a568:	0018      	movs	r0, r3
   2a56a:	4b31      	ldr	r3, [pc, #196]	; (2a630 <system_clock_init+0x290>)
   2a56c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2a56e:	2008      	movs	r0, #8
   2a570:	4b24      	ldr	r3, [pc, #144]	; (2a604 <system_clock_init+0x264>)
   2a572:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2a574:	46c0      	nop			; (mov r8, r8)
   2a576:	2008      	movs	r0, #8
   2a578:	4b2e      	ldr	r3, [pc, #184]	; (2a634 <system_clock_init+0x294>)
   2a57a:	4798      	blx	r3
   2a57c:	0003      	movs	r3, r0
   2a57e:	001a      	movs	r2, r3
   2a580:	2301      	movs	r3, #1
   2a582:	4053      	eors	r3, r2
   2a584:	b2db      	uxtb	r3, r3
   2a586:	2b00      	cmp	r3, #0
   2a588:	d1f5      	bne.n	2a576 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2a58a:	4919      	ldr	r1, [pc, #100]	; (2a5f0 <system_clock_init+0x250>)
   2a58c:	2244      	movs	r2, #68	; 0x44
   2a58e:	5c8b      	ldrb	r3, [r1, r2]
   2a590:	2080      	movs	r0, #128	; 0x80
   2a592:	4240      	negs	r0, r0
   2a594:	4303      	orrs	r3, r0
   2a596:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2a598:	2000      	movs	r0, #0
   2a59a:	4b27      	ldr	r3, [pc, #156]	; (2a638 <system_clock_init+0x298>)
   2a59c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2a59e:	2100      	movs	r1, #0
   2a5a0:	2000      	movs	r0, #0
   2a5a2:	4b26      	ldr	r3, [pc, #152]	; (2a63c <system_clock_init+0x29c>)
   2a5a4:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2a5a6:	2100      	movs	r1, #0
   2a5a8:	2001      	movs	r0, #1
   2a5aa:	4b24      	ldr	r3, [pc, #144]	; (2a63c <system_clock_init+0x29c>)
   2a5ac:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2a5ae:	2100      	movs	r1, #0
   2a5b0:	2002      	movs	r0, #2
   2a5b2:	4b22      	ldr	r3, [pc, #136]	; (2a63c <system_clock_init+0x29c>)
   2a5b4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2a5b6:	003b      	movs	r3, r7
   2a5b8:	0018      	movs	r0, r3
   2a5ba:	4b14      	ldr	r3, [pc, #80]	; (2a60c <system_clock_init+0x26c>)
   2a5bc:	4798      	blx	r3
   2a5be:	003b      	movs	r3, r7
   2a5c0:	2208      	movs	r2, #8
   2a5c2:	701a      	strb	r2, [r3, #0]
   2a5c4:	003b      	movs	r3, r7
   2a5c6:	2201      	movs	r2, #1
   2a5c8:	605a      	str	r2, [r3, #4]
   2a5ca:	003b      	movs	r3, r7
   2a5cc:	2200      	movs	r2, #0
   2a5ce:	721a      	strb	r2, [r3, #8]
   2a5d0:	003b      	movs	r3, r7
   2a5d2:	2201      	movs	r2, #1
   2a5d4:	725a      	strb	r2, [r3, #9]
   2a5d6:	003b      	movs	r3, r7
   2a5d8:	0019      	movs	r1, r3
   2a5da:	2000      	movs	r0, #0
   2a5dc:	4b0c      	ldr	r3, [pc, #48]	; (2a610 <system_clock_init+0x270>)
   2a5de:	4798      	blx	r3
   2a5e0:	2000      	movs	r0, #0
   2a5e2:	4b0c      	ldr	r3, [pc, #48]	; (2a614 <system_clock_init+0x274>)
   2a5e4:	4798      	blx	r3
#endif
}
   2a5e6:	46c0      	nop			; (mov r8, r8)
   2a5e8:	46bd      	mov	sp, r7
   2a5ea:	b026      	add	sp, #152	; 0x98
   2a5ec:	bd80      	pop	{r7, pc}
   2a5ee:	46c0      	nop			; (mov r8, r8)
   2a5f0:	40000800 	.word	0x40000800
   2a5f4:	00029f61 	.word	0x00029f61
   2a5f8:	0002a369 	.word	0x0002a369
   2a5fc:	00029e71 	.word	0x00029e71
   2a600:	0002a0b5 	.word	0x0002a0b5
   2a604:	0002a239 	.word	0x0002a239
   2a608:	0002a6e5 	.word	0x0002a6e5
   2a60c:	00029e2d 	.word	0x00029e2d
   2a610:	0002a715 	.word	0x0002a715
   2a614:	0002a839 	.word	0x0002a839
   2a618:	00029e5b 	.word	0x00029e5b
   2a61c:	0002a96d 	.word	0x0002a96d
   2a620:	0002a9b1 	.word	0x0002a9b1
   2a624:	00029f09 	.word	0x00029f09
   2a628:	000f4240 	.word	0x000f4240
   2a62c:	02dc6c00 	.word	0x02dc6c00
   2a630:	0002a12d 	.word	0x0002a12d
   2a634:	0002a2e5 	.word	0x0002a2e5
   2a638:	00029e95 	.word	0x00029e95
   2a63c:	00029eb5 	.word	0x00029eb5

0002a640 <system_apb_clock_set_mask>:
{
   2a640:	b580      	push	{r7, lr}
   2a642:	b082      	sub	sp, #8
   2a644:	af00      	add	r7, sp, #0
   2a646:	0002      	movs	r2, r0
   2a648:	6039      	str	r1, [r7, #0]
   2a64a:	1dfb      	adds	r3, r7, #7
   2a64c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a64e:	1dfb      	adds	r3, r7, #7
   2a650:	781b      	ldrb	r3, [r3, #0]
   2a652:	2b01      	cmp	r3, #1
   2a654:	d00a      	beq.n	2a66c <system_apb_clock_set_mask+0x2c>
   2a656:	2b02      	cmp	r3, #2
   2a658:	d00f      	beq.n	2a67a <system_apb_clock_set_mask+0x3a>
   2a65a:	2b00      	cmp	r3, #0
   2a65c:	d114      	bne.n	2a688 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a65e:	4b0e      	ldr	r3, [pc, #56]	; (2a698 <system_apb_clock_set_mask+0x58>)
   2a660:	4a0d      	ldr	r2, [pc, #52]	; (2a698 <system_apb_clock_set_mask+0x58>)
   2a662:	6991      	ldr	r1, [r2, #24]
   2a664:	683a      	ldr	r2, [r7, #0]
   2a666:	430a      	orrs	r2, r1
   2a668:	619a      	str	r2, [r3, #24]
			break;
   2a66a:	e00f      	b.n	2a68c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a66c:	4b0a      	ldr	r3, [pc, #40]	; (2a698 <system_apb_clock_set_mask+0x58>)
   2a66e:	4a0a      	ldr	r2, [pc, #40]	; (2a698 <system_apb_clock_set_mask+0x58>)
   2a670:	69d1      	ldr	r1, [r2, #28]
   2a672:	683a      	ldr	r2, [r7, #0]
   2a674:	430a      	orrs	r2, r1
   2a676:	61da      	str	r2, [r3, #28]
			break;
   2a678:	e008      	b.n	2a68c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a67a:	4b07      	ldr	r3, [pc, #28]	; (2a698 <system_apb_clock_set_mask+0x58>)
   2a67c:	4a06      	ldr	r2, [pc, #24]	; (2a698 <system_apb_clock_set_mask+0x58>)
   2a67e:	6a11      	ldr	r1, [r2, #32]
   2a680:	683a      	ldr	r2, [r7, #0]
   2a682:	430a      	orrs	r2, r1
   2a684:	621a      	str	r2, [r3, #32]
			break;
   2a686:	e001      	b.n	2a68c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a688:	2317      	movs	r3, #23
   2a68a:	e000      	b.n	2a68e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a68c:	2300      	movs	r3, #0
}
   2a68e:	0018      	movs	r0, r3
   2a690:	46bd      	mov	sp, r7
   2a692:	b002      	add	sp, #8
   2a694:	bd80      	pop	{r7, pc}
   2a696:	46c0      	nop			; (mov r8, r8)
   2a698:	40000400 	.word	0x40000400

0002a69c <system_interrupt_enter_critical_section>:
{
   2a69c:	b580      	push	{r7, lr}
   2a69e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2a6a0:	4b02      	ldr	r3, [pc, #8]	; (2a6ac <system_interrupt_enter_critical_section+0x10>)
   2a6a2:	4798      	blx	r3
}
   2a6a4:	46c0      	nop			; (mov r8, r8)
   2a6a6:	46bd      	mov	sp, r7
   2a6a8:	bd80      	pop	{r7, pc}
   2a6aa:	46c0      	nop			; (mov r8, r8)
   2a6ac:	00026cd9 	.word	0x00026cd9

0002a6b0 <system_interrupt_leave_critical_section>:
{
   2a6b0:	b580      	push	{r7, lr}
   2a6b2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2a6b4:	4b02      	ldr	r3, [pc, #8]	; (2a6c0 <system_interrupt_leave_critical_section+0x10>)
   2a6b6:	4798      	blx	r3
}
   2a6b8:	46c0      	nop			; (mov r8, r8)
   2a6ba:	46bd      	mov	sp, r7
   2a6bc:	bd80      	pop	{r7, pc}
   2a6be:	46c0      	nop			; (mov r8, r8)
   2a6c0:	00026d2d 	.word	0x00026d2d

0002a6c4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2a6c4:	b580      	push	{r7, lr}
   2a6c6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2a6c8:	4b05      	ldr	r3, [pc, #20]	; (2a6e0 <system_gclk_is_syncing+0x1c>)
   2a6ca:	785b      	ldrb	r3, [r3, #1]
   2a6cc:	b2db      	uxtb	r3, r3
   2a6ce:	b25b      	sxtb	r3, r3
   2a6d0:	2b00      	cmp	r3, #0
   2a6d2:	da01      	bge.n	2a6d8 <system_gclk_is_syncing+0x14>
		return true;
   2a6d4:	2301      	movs	r3, #1
   2a6d6:	e000      	b.n	2a6da <system_gclk_is_syncing+0x16>
	}

	return false;
   2a6d8:	2300      	movs	r3, #0
}
   2a6da:	0018      	movs	r0, r3
   2a6dc:	46bd      	mov	sp, r7
   2a6de:	bd80      	pop	{r7, pc}
   2a6e0:	40000c00 	.word	0x40000c00

0002a6e4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2a6e4:	b580      	push	{r7, lr}
   2a6e6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2a6e8:	2108      	movs	r1, #8
   2a6ea:	2000      	movs	r0, #0
   2a6ec:	4b07      	ldr	r3, [pc, #28]	; (2a70c <system_gclk_init+0x28>)
   2a6ee:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2a6f0:	4b07      	ldr	r3, [pc, #28]	; (2a710 <system_gclk_init+0x2c>)
   2a6f2:	2201      	movs	r2, #1
   2a6f4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2a6f6:	46c0      	nop			; (mov r8, r8)
   2a6f8:	4b05      	ldr	r3, [pc, #20]	; (2a710 <system_gclk_init+0x2c>)
   2a6fa:	781b      	ldrb	r3, [r3, #0]
   2a6fc:	b2db      	uxtb	r3, r3
   2a6fe:	001a      	movs	r2, r3
   2a700:	2301      	movs	r3, #1
   2a702:	4013      	ands	r3, r2
   2a704:	d1f8      	bne.n	2a6f8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2a706:	46c0      	nop			; (mov r8, r8)
   2a708:	46bd      	mov	sp, r7
   2a70a:	bd80      	pop	{r7, pc}
   2a70c:	0002a641 	.word	0x0002a641
   2a710:	40000c00 	.word	0x40000c00

0002a714 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2a714:	b580      	push	{r7, lr}
   2a716:	b086      	sub	sp, #24
   2a718:	af00      	add	r7, sp, #0
   2a71a:	0002      	movs	r2, r0
   2a71c:	6039      	str	r1, [r7, #0]
   2a71e:	1dfb      	adds	r3, r7, #7
   2a720:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2a722:	1dfb      	adds	r3, r7, #7
   2a724:	781b      	ldrb	r3, [r3, #0]
   2a726:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2a728:	1dfb      	adds	r3, r7, #7
   2a72a:	781b      	ldrb	r3, [r3, #0]
   2a72c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2a72e:	683b      	ldr	r3, [r7, #0]
   2a730:	781b      	ldrb	r3, [r3, #0]
   2a732:	021b      	lsls	r3, r3, #8
   2a734:	001a      	movs	r2, r3
   2a736:	697b      	ldr	r3, [r7, #20]
   2a738:	4313      	orrs	r3, r2
   2a73a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2a73c:	683b      	ldr	r3, [r7, #0]
   2a73e:	785b      	ldrb	r3, [r3, #1]
   2a740:	2b00      	cmp	r3, #0
   2a742:	d004      	beq.n	2a74e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2a744:	697b      	ldr	r3, [r7, #20]
   2a746:	2280      	movs	r2, #128	; 0x80
   2a748:	02d2      	lsls	r2, r2, #11
   2a74a:	4313      	orrs	r3, r2
   2a74c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2a74e:	683b      	ldr	r3, [r7, #0]
   2a750:	7a5b      	ldrb	r3, [r3, #9]
   2a752:	2b00      	cmp	r3, #0
   2a754:	d004      	beq.n	2a760 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2a756:	697b      	ldr	r3, [r7, #20]
   2a758:	2280      	movs	r2, #128	; 0x80
   2a75a:	0312      	lsls	r2, r2, #12
   2a75c:	4313      	orrs	r3, r2
   2a75e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2a760:	683b      	ldr	r3, [r7, #0]
   2a762:	685b      	ldr	r3, [r3, #4]
   2a764:	2b01      	cmp	r3, #1
   2a766:	d92c      	bls.n	2a7c2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2a768:	683b      	ldr	r3, [r7, #0]
   2a76a:	685a      	ldr	r2, [r3, #4]
   2a76c:	683b      	ldr	r3, [r7, #0]
   2a76e:	685b      	ldr	r3, [r3, #4]
   2a770:	3b01      	subs	r3, #1
   2a772:	4013      	ands	r3, r2
   2a774:	d11a      	bne.n	2a7ac <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2a776:	2300      	movs	r3, #0
   2a778:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2a77a:	2302      	movs	r3, #2
   2a77c:	60bb      	str	r3, [r7, #8]
   2a77e:	e005      	b.n	2a78c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2a780:	68fb      	ldr	r3, [r7, #12]
   2a782:	3301      	adds	r3, #1
   2a784:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2a786:	68bb      	ldr	r3, [r7, #8]
   2a788:	005b      	lsls	r3, r3, #1
   2a78a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2a78c:	683b      	ldr	r3, [r7, #0]
   2a78e:	685a      	ldr	r2, [r3, #4]
   2a790:	68bb      	ldr	r3, [r7, #8]
   2a792:	429a      	cmp	r2, r3
   2a794:	d8f4      	bhi.n	2a780 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2a796:	68fb      	ldr	r3, [r7, #12]
   2a798:	021b      	lsls	r3, r3, #8
   2a79a:	693a      	ldr	r2, [r7, #16]
   2a79c:	4313      	orrs	r3, r2
   2a79e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2a7a0:	697b      	ldr	r3, [r7, #20]
   2a7a2:	2280      	movs	r2, #128	; 0x80
   2a7a4:	0352      	lsls	r2, r2, #13
   2a7a6:	4313      	orrs	r3, r2
   2a7a8:	617b      	str	r3, [r7, #20]
   2a7aa:	e00a      	b.n	2a7c2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2a7ac:	683b      	ldr	r3, [r7, #0]
   2a7ae:	685b      	ldr	r3, [r3, #4]
   2a7b0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2a7b2:	693a      	ldr	r2, [r7, #16]
   2a7b4:	4313      	orrs	r3, r2
   2a7b6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2a7b8:	697b      	ldr	r3, [r7, #20]
   2a7ba:	2280      	movs	r2, #128	; 0x80
   2a7bc:	0292      	lsls	r2, r2, #10
   2a7be:	4313      	orrs	r3, r2
   2a7c0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2a7c2:	683b      	ldr	r3, [r7, #0]
   2a7c4:	7a1b      	ldrb	r3, [r3, #8]
   2a7c6:	2b00      	cmp	r3, #0
   2a7c8:	d004      	beq.n	2a7d4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2a7ca:	697b      	ldr	r3, [r7, #20]
   2a7cc:	2280      	movs	r2, #128	; 0x80
   2a7ce:	0392      	lsls	r2, r2, #14
   2a7d0:	4313      	orrs	r3, r2
   2a7d2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2a7d4:	46c0      	nop			; (mov r8, r8)
   2a7d6:	4b13      	ldr	r3, [pc, #76]	; (2a824 <system_gclk_gen_set_config+0x110>)
   2a7d8:	4798      	blx	r3
   2a7da:	1e03      	subs	r3, r0, #0
   2a7dc:	d1fb      	bne.n	2a7d6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a7de:	4b12      	ldr	r3, [pc, #72]	; (2a828 <system_gclk_gen_set_config+0x114>)
   2a7e0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a7e2:	4a12      	ldr	r2, [pc, #72]	; (2a82c <system_gclk_gen_set_config+0x118>)
   2a7e4:	1dfb      	adds	r3, r7, #7
   2a7e6:	781b      	ldrb	r3, [r3, #0]
   2a7e8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2a7ea:	46c0      	nop			; (mov r8, r8)
   2a7ec:	4b0d      	ldr	r3, [pc, #52]	; (2a824 <system_gclk_gen_set_config+0x110>)
   2a7ee:	4798      	blx	r3
   2a7f0:	1e03      	subs	r3, r0, #0
   2a7f2:	d1fb      	bne.n	2a7ec <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2a7f4:	4b0e      	ldr	r3, [pc, #56]	; (2a830 <system_gclk_gen_set_config+0x11c>)
   2a7f6:	693a      	ldr	r2, [r7, #16]
   2a7f8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2a7fa:	46c0      	nop			; (mov r8, r8)
   2a7fc:	4b09      	ldr	r3, [pc, #36]	; (2a824 <system_gclk_gen_set_config+0x110>)
   2a7fe:	4798      	blx	r3
   2a800:	1e03      	subs	r3, r0, #0
   2a802:	d1fb      	bne.n	2a7fc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2a804:	4b0a      	ldr	r3, [pc, #40]	; (2a830 <system_gclk_gen_set_config+0x11c>)
   2a806:	4a0a      	ldr	r2, [pc, #40]	; (2a830 <system_gclk_gen_set_config+0x11c>)
   2a808:	6851      	ldr	r1, [r2, #4]
   2a80a:	2280      	movs	r2, #128	; 0x80
   2a80c:	0252      	lsls	r2, r2, #9
   2a80e:	4011      	ands	r1, r2
   2a810:	697a      	ldr	r2, [r7, #20]
   2a812:	430a      	orrs	r2, r1
   2a814:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a816:	4b07      	ldr	r3, [pc, #28]	; (2a834 <system_gclk_gen_set_config+0x120>)
   2a818:	4798      	blx	r3
}
   2a81a:	46c0      	nop			; (mov r8, r8)
   2a81c:	46bd      	mov	sp, r7
   2a81e:	b006      	add	sp, #24
   2a820:	bd80      	pop	{r7, pc}
   2a822:	46c0      	nop			; (mov r8, r8)
   2a824:	0002a6c5 	.word	0x0002a6c5
   2a828:	0002a69d 	.word	0x0002a69d
   2a82c:	40000c08 	.word	0x40000c08
   2a830:	40000c00 	.word	0x40000c00
   2a834:	0002a6b1 	.word	0x0002a6b1

0002a838 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2a838:	b580      	push	{r7, lr}
   2a83a:	b082      	sub	sp, #8
   2a83c:	af00      	add	r7, sp, #0
   2a83e:	0002      	movs	r2, r0
   2a840:	1dfb      	adds	r3, r7, #7
   2a842:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a844:	46c0      	nop			; (mov r8, r8)
   2a846:	4b0e      	ldr	r3, [pc, #56]	; (2a880 <system_gclk_gen_enable+0x48>)
   2a848:	4798      	blx	r3
   2a84a:	1e03      	subs	r3, r0, #0
   2a84c:	d1fb      	bne.n	2a846 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a84e:	4b0d      	ldr	r3, [pc, #52]	; (2a884 <system_gclk_gen_enable+0x4c>)
   2a850:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a852:	4a0d      	ldr	r2, [pc, #52]	; (2a888 <system_gclk_gen_enable+0x50>)
   2a854:	1dfb      	adds	r3, r7, #7
   2a856:	781b      	ldrb	r3, [r3, #0]
   2a858:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a85a:	46c0      	nop			; (mov r8, r8)
   2a85c:	4b08      	ldr	r3, [pc, #32]	; (2a880 <system_gclk_gen_enable+0x48>)
   2a85e:	4798      	blx	r3
   2a860:	1e03      	subs	r3, r0, #0
   2a862:	d1fb      	bne.n	2a85c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2a864:	4b09      	ldr	r3, [pc, #36]	; (2a88c <system_gclk_gen_enable+0x54>)
   2a866:	4a09      	ldr	r2, [pc, #36]	; (2a88c <system_gclk_gen_enable+0x54>)
   2a868:	6852      	ldr	r2, [r2, #4]
   2a86a:	2180      	movs	r1, #128	; 0x80
   2a86c:	0249      	lsls	r1, r1, #9
   2a86e:	430a      	orrs	r2, r1
   2a870:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a872:	4b07      	ldr	r3, [pc, #28]	; (2a890 <system_gclk_gen_enable+0x58>)
   2a874:	4798      	blx	r3
}
   2a876:	46c0      	nop			; (mov r8, r8)
   2a878:	46bd      	mov	sp, r7
   2a87a:	b002      	add	sp, #8
   2a87c:	bd80      	pop	{r7, pc}
   2a87e:	46c0      	nop			; (mov r8, r8)
   2a880:	0002a6c5 	.word	0x0002a6c5
   2a884:	0002a69d 	.word	0x0002a69d
   2a888:	40000c04 	.word	0x40000c04
   2a88c:	40000c00 	.word	0x40000c00
   2a890:	0002a6b1 	.word	0x0002a6b1

0002a894 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2a894:	b580      	push	{r7, lr}
   2a896:	b086      	sub	sp, #24
   2a898:	af00      	add	r7, sp, #0
   2a89a:	0002      	movs	r2, r0
   2a89c:	1dfb      	adds	r3, r7, #7
   2a89e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a8a0:	46c0      	nop			; (mov r8, r8)
   2a8a2:	4b2a      	ldr	r3, [pc, #168]	; (2a94c <system_gclk_gen_get_hz+0xb8>)
   2a8a4:	4798      	blx	r3
   2a8a6:	1e03      	subs	r3, r0, #0
   2a8a8:	d1fb      	bne.n	2a8a2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a8aa:	4b29      	ldr	r3, [pc, #164]	; (2a950 <system_gclk_gen_get_hz+0xbc>)
   2a8ac:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a8ae:	4a29      	ldr	r2, [pc, #164]	; (2a954 <system_gclk_gen_get_hz+0xc0>)
   2a8b0:	1dfb      	adds	r3, r7, #7
   2a8b2:	781b      	ldrb	r3, [r3, #0]
   2a8b4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a8b6:	46c0      	nop			; (mov r8, r8)
   2a8b8:	4b24      	ldr	r3, [pc, #144]	; (2a94c <system_gclk_gen_get_hz+0xb8>)
   2a8ba:	4798      	blx	r3
   2a8bc:	1e03      	subs	r3, r0, #0
   2a8be:	d1fb      	bne.n	2a8b8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2a8c0:	4b25      	ldr	r3, [pc, #148]	; (2a958 <system_gclk_gen_get_hz+0xc4>)
   2a8c2:	685b      	ldr	r3, [r3, #4]
   2a8c4:	04db      	lsls	r3, r3, #19
   2a8c6:	0edb      	lsrs	r3, r3, #27
   2a8c8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2a8ca:	0018      	movs	r0, r3
   2a8cc:	4b23      	ldr	r3, [pc, #140]	; (2a95c <system_gclk_gen_get_hz+0xc8>)
   2a8ce:	4798      	blx	r3
   2a8d0:	0003      	movs	r3, r0
   2a8d2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a8d4:	4a1f      	ldr	r2, [pc, #124]	; (2a954 <system_gclk_gen_get_hz+0xc0>)
   2a8d6:	1dfb      	adds	r3, r7, #7
   2a8d8:	781b      	ldrb	r3, [r3, #0]
   2a8da:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2a8dc:	4b1e      	ldr	r3, [pc, #120]	; (2a958 <system_gclk_gen_get_hz+0xc4>)
   2a8de:	685b      	ldr	r3, [r3, #4]
   2a8e0:	02db      	lsls	r3, r3, #11
   2a8e2:	0fdb      	lsrs	r3, r3, #31
   2a8e4:	b2da      	uxtb	r2, r3
   2a8e6:	2313      	movs	r3, #19
   2a8e8:	18fb      	adds	r3, r7, r3
   2a8ea:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a8ec:	4a1c      	ldr	r2, [pc, #112]	; (2a960 <system_gclk_gen_get_hz+0xcc>)
   2a8ee:	1dfb      	adds	r3, r7, #7
   2a8f0:	781b      	ldrb	r3, [r3, #0]
   2a8f2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a8f4:	46c0      	nop			; (mov r8, r8)
   2a8f6:	4b15      	ldr	r3, [pc, #84]	; (2a94c <system_gclk_gen_get_hz+0xb8>)
   2a8f8:	4798      	blx	r3
   2a8fa:	1e03      	subs	r3, r0, #0
   2a8fc:	d1fb      	bne.n	2a8f6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2a8fe:	4b16      	ldr	r3, [pc, #88]	; (2a958 <system_gclk_gen_get_hz+0xc4>)
   2a900:	689b      	ldr	r3, [r3, #8]
   2a902:	021b      	lsls	r3, r3, #8
   2a904:	0c1b      	lsrs	r3, r3, #16
   2a906:	b29b      	uxth	r3, r3
   2a908:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2a90a:	4b16      	ldr	r3, [pc, #88]	; (2a964 <system_gclk_gen_get_hz+0xd0>)
   2a90c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2a90e:	2313      	movs	r3, #19
   2a910:	18fb      	adds	r3, r7, r3
   2a912:	781b      	ldrb	r3, [r3, #0]
   2a914:	2b00      	cmp	r3, #0
   2a916:	d109      	bne.n	2a92c <system_gclk_gen_get_hz+0x98>
   2a918:	68fb      	ldr	r3, [r7, #12]
   2a91a:	2b01      	cmp	r3, #1
   2a91c:	d906      	bls.n	2a92c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2a91e:	4b12      	ldr	r3, [pc, #72]	; (2a968 <system_gclk_gen_get_hz+0xd4>)
   2a920:	68f9      	ldr	r1, [r7, #12]
   2a922:	6978      	ldr	r0, [r7, #20]
   2a924:	4798      	blx	r3
   2a926:	0003      	movs	r3, r0
   2a928:	617b      	str	r3, [r7, #20]
   2a92a:	e00a      	b.n	2a942 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2a92c:	2313      	movs	r3, #19
   2a92e:	18fb      	adds	r3, r7, r3
   2a930:	781b      	ldrb	r3, [r3, #0]
   2a932:	2b00      	cmp	r3, #0
   2a934:	d005      	beq.n	2a942 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2a936:	68fb      	ldr	r3, [r7, #12]
   2a938:	3301      	adds	r3, #1
   2a93a:	697a      	ldr	r2, [r7, #20]
   2a93c:	40da      	lsrs	r2, r3
   2a93e:	0013      	movs	r3, r2
   2a940:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2a942:	697b      	ldr	r3, [r7, #20]
}
   2a944:	0018      	movs	r0, r3
   2a946:	46bd      	mov	sp, r7
   2a948:	b006      	add	sp, #24
   2a94a:	bd80      	pop	{r7, pc}
   2a94c:	0002a6c5 	.word	0x0002a6c5
   2a950:	0002a69d 	.word	0x0002a69d
   2a954:	40000c04 	.word	0x40000c04
   2a958:	40000c00 	.word	0x40000c00
   2a95c:	00029ff5 	.word	0x00029ff5
   2a960:	40000c08 	.word	0x40000c08
   2a964:	0002a6b1 	.word	0x0002a6b1
   2a968:	00033635 	.word	0x00033635

0002a96c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2a96c:	b580      	push	{r7, lr}
   2a96e:	b084      	sub	sp, #16
   2a970:	af00      	add	r7, sp, #0
   2a972:	0002      	movs	r2, r0
   2a974:	6039      	str	r1, [r7, #0]
   2a976:	1dfb      	adds	r3, r7, #7
   2a978:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2a97a:	1dfb      	adds	r3, r7, #7
   2a97c:	781b      	ldrb	r3, [r3, #0]
   2a97e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2a980:	683b      	ldr	r3, [r7, #0]
   2a982:	781b      	ldrb	r3, [r3, #0]
   2a984:	021b      	lsls	r3, r3, #8
   2a986:	001a      	movs	r2, r3
   2a988:	68fb      	ldr	r3, [r7, #12]
   2a98a:	4313      	orrs	r3, r2
   2a98c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2a98e:	1dfb      	adds	r3, r7, #7
   2a990:	781b      	ldrb	r3, [r3, #0]
   2a992:	0018      	movs	r0, r3
   2a994:	4b04      	ldr	r3, [pc, #16]	; (2a9a8 <system_gclk_chan_set_config+0x3c>)
   2a996:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2a998:	4b04      	ldr	r3, [pc, #16]	; (2a9ac <system_gclk_chan_set_config+0x40>)
   2a99a:	68fa      	ldr	r2, [r7, #12]
   2a99c:	b292      	uxth	r2, r2
   2a99e:	805a      	strh	r2, [r3, #2]
}
   2a9a0:	46c0      	nop			; (mov r8, r8)
   2a9a2:	46bd      	mov	sp, r7
   2a9a4:	b004      	add	sp, #16
   2a9a6:	bd80      	pop	{r7, pc}
   2a9a8:	0002a9f9 	.word	0x0002a9f9
   2a9ac:	40000c00 	.word	0x40000c00

0002a9b0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2a9b0:	b580      	push	{r7, lr}
   2a9b2:	b082      	sub	sp, #8
   2a9b4:	af00      	add	r7, sp, #0
   2a9b6:	0002      	movs	r2, r0
   2a9b8:	1dfb      	adds	r3, r7, #7
   2a9ba:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2a9bc:	4b0a      	ldr	r3, [pc, #40]	; (2a9e8 <system_gclk_chan_enable+0x38>)
   2a9be:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2a9c0:	4a0a      	ldr	r2, [pc, #40]	; (2a9ec <system_gclk_chan_enable+0x3c>)
   2a9c2:	1dfb      	adds	r3, r7, #7
   2a9c4:	781b      	ldrb	r3, [r3, #0]
   2a9c6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2a9c8:	4909      	ldr	r1, [pc, #36]	; (2a9f0 <system_gclk_chan_enable+0x40>)
   2a9ca:	4b09      	ldr	r3, [pc, #36]	; (2a9f0 <system_gclk_chan_enable+0x40>)
   2a9cc:	885b      	ldrh	r3, [r3, #2]
   2a9ce:	b29b      	uxth	r3, r3
   2a9d0:	2280      	movs	r2, #128	; 0x80
   2a9d2:	01d2      	lsls	r2, r2, #7
   2a9d4:	4313      	orrs	r3, r2
   2a9d6:	b29b      	uxth	r3, r3
   2a9d8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2a9da:	4b06      	ldr	r3, [pc, #24]	; (2a9f4 <system_gclk_chan_enable+0x44>)
   2a9dc:	4798      	blx	r3
}
   2a9de:	46c0      	nop			; (mov r8, r8)
   2a9e0:	46bd      	mov	sp, r7
   2a9e2:	b002      	add	sp, #8
   2a9e4:	bd80      	pop	{r7, pc}
   2a9e6:	46c0      	nop			; (mov r8, r8)
   2a9e8:	0002a69d 	.word	0x0002a69d
   2a9ec:	40000c02 	.word	0x40000c02
   2a9f0:	40000c00 	.word	0x40000c00
   2a9f4:	0002a6b1 	.word	0x0002a6b1

0002a9f8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2a9f8:	b580      	push	{r7, lr}
   2a9fa:	b084      	sub	sp, #16
   2a9fc:	af00      	add	r7, sp, #0
   2a9fe:	0002      	movs	r2, r0
   2aa00:	1dfb      	adds	r3, r7, #7
   2aa02:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2aa04:	4b1c      	ldr	r3, [pc, #112]	; (2aa78 <system_gclk_chan_disable+0x80>)
   2aa06:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2aa08:	4a1c      	ldr	r2, [pc, #112]	; (2aa7c <system_gclk_chan_disable+0x84>)
   2aa0a:	1dfb      	adds	r3, r7, #7
   2aa0c:	781b      	ldrb	r3, [r3, #0]
   2aa0e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2aa10:	4b1b      	ldr	r3, [pc, #108]	; (2aa80 <system_gclk_chan_disable+0x88>)
   2aa12:	885b      	ldrh	r3, [r3, #2]
   2aa14:	051b      	lsls	r3, r3, #20
   2aa16:	0f1b      	lsrs	r3, r3, #28
   2aa18:	b2db      	uxtb	r3, r3
   2aa1a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2aa1c:	4a18      	ldr	r2, [pc, #96]	; (2aa80 <system_gclk_chan_disable+0x88>)
   2aa1e:	8853      	ldrh	r3, [r2, #2]
   2aa20:	4918      	ldr	r1, [pc, #96]	; (2aa84 <system_gclk_chan_disable+0x8c>)
   2aa22:	400b      	ands	r3, r1
   2aa24:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2aa26:	4a16      	ldr	r2, [pc, #88]	; (2aa80 <system_gclk_chan_disable+0x88>)
   2aa28:	4b15      	ldr	r3, [pc, #84]	; (2aa80 <system_gclk_chan_disable+0x88>)
   2aa2a:	885b      	ldrh	r3, [r3, #2]
   2aa2c:	b29b      	uxth	r3, r3
   2aa2e:	4916      	ldr	r1, [pc, #88]	; (2aa88 <system_gclk_chan_disable+0x90>)
   2aa30:	400b      	ands	r3, r1
   2aa32:	b29b      	uxth	r3, r3
   2aa34:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2aa36:	46c0      	nop			; (mov r8, r8)
   2aa38:	4b11      	ldr	r3, [pc, #68]	; (2aa80 <system_gclk_chan_disable+0x88>)
   2aa3a:	885b      	ldrh	r3, [r3, #2]
   2aa3c:	b29b      	uxth	r3, r3
   2aa3e:	001a      	movs	r2, r3
   2aa40:	2380      	movs	r3, #128	; 0x80
   2aa42:	01db      	lsls	r3, r3, #7
   2aa44:	4013      	ands	r3, r2
   2aa46:	d1f7      	bne.n	2aa38 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2aa48:	4a0d      	ldr	r2, [pc, #52]	; (2aa80 <system_gclk_chan_disable+0x88>)
   2aa4a:	68fb      	ldr	r3, [r7, #12]
   2aa4c:	b2db      	uxtb	r3, r3
   2aa4e:	1c19      	adds	r1, r3, #0
   2aa50:	230f      	movs	r3, #15
   2aa52:	400b      	ands	r3, r1
   2aa54:	b2d9      	uxtb	r1, r3
   2aa56:	8853      	ldrh	r3, [r2, #2]
   2aa58:	1c08      	adds	r0, r1, #0
   2aa5a:	210f      	movs	r1, #15
   2aa5c:	4001      	ands	r1, r0
   2aa5e:	0208      	lsls	r0, r1, #8
   2aa60:	4908      	ldr	r1, [pc, #32]	; (2aa84 <system_gclk_chan_disable+0x8c>)
   2aa62:	400b      	ands	r3, r1
   2aa64:	1c19      	adds	r1, r3, #0
   2aa66:	1c03      	adds	r3, r0, #0
   2aa68:	430b      	orrs	r3, r1
   2aa6a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2aa6c:	4b07      	ldr	r3, [pc, #28]	; (2aa8c <system_gclk_chan_disable+0x94>)
   2aa6e:	4798      	blx	r3
}
   2aa70:	46c0      	nop			; (mov r8, r8)
   2aa72:	46bd      	mov	sp, r7
   2aa74:	b004      	add	sp, #16
   2aa76:	bd80      	pop	{r7, pc}
   2aa78:	0002a69d 	.word	0x0002a69d
   2aa7c:	40000c02 	.word	0x40000c02
   2aa80:	40000c00 	.word	0x40000c00
   2aa84:	fffff0ff 	.word	0xfffff0ff
   2aa88:	ffffbfff 	.word	0xffffbfff
   2aa8c:	0002a6b1 	.word	0x0002a6b1

0002aa90 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2aa90:	b580      	push	{r7, lr}
   2aa92:	b084      	sub	sp, #16
   2aa94:	af00      	add	r7, sp, #0
   2aa96:	0002      	movs	r2, r0
   2aa98:	1dfb      	adds	r3, r7, #7
   2aa9a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2aa9c:	4b0d      	ldr	r3, [pc, #52]	; (2aad4 <system_gclk_chan_get_hz+0x44>)
   2aa9e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2aaa0:	4a0d      	ldr	r2, [pc, #52]	; (2aad8 <system_gclk_chan_get_hz+0x48>)
   2aaa2:	1dfb      	adds	r3, r7, #7
   2aaa4:	781b      	ldrb	r3, [r3, #0]
   2aaa6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2aaa8:	4b0c      	ldr	r3, [pc, #48]	; (2aadc <system_gclk_chan_get_hz+0x4c>)
   2aaaa:	885b      	ldrh	r3, [r3, #2]
   2aaac:	051b      	lsls	r3, r3, #20
   2aaae:	0f1b      	lsrs	r3, r3, #28
   2aab0:	b2da      	uxtb	r2, r3
   2aab2:	230f      	movs	r3, #15
   2aab4:	18fb      	adds	r3, r7, r3
   2aab6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2aab8:	4b09      	ldr	r3, [pc, #36]	; (2aae0 <system_gclk_chan_get_hz+0x50>)
   2aaba:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2aabc:	230f      	movs	r3, #15
   2aabe:	18fb      	adds	r3, r7, r3
   2aac0:	781b      	ldrb	r3, [r3, #0]
   2aac2:	0018      	movs	r0, r3
   2aac4:	4b07      	ldr	r3, [pc, #28]	; (2aae4 <system_gclk_chan_get_hz+0x54>)
   2aac6:	4798      	blx	r3
   2aac8:	0003      	movs	r3, r0
}
   2aaca:	0018      	movs	r0, r3
   2aacc:	46bd      	mov	sp, r7
   2aace:	b004      	add	sp, #16
   2aad0:	bd80      	pop	{r7, pc}
   2aad2:	46c0      	nop			; (mov r8, r8)
   2aad4:	0002a69d 	.word	0x0002a69d
   2aad8:	40000c02 	.word	0x40000c02
   2aadc:	40000c00 	.word	0x40000c00
   2aae0:	0002a6b1 	.word	0x0002a6b1
   2aae4:	0002a895 	.word	0x0002a895

0002aae8 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2aae8:	b580      	push	{r7, lr}
   2aaea:	b084      	sub	sp, #16
   2aaec:	af00      	add	r7, sp, #0
   2aaee:	0002      	movs	r2, r0
   2aaf0:	1dfb      	adds	r3, r7, #7
   2aaf2:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2aaf4:	230f      	movs	r3, #15
   2aaf6:	18fb      	adds	r3, r7, r3
   2aaf8:	2200      	movs	r2, #0
   2aafa:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2aafc:	1dfb      	adds	r3, r7, #7
   2aafe:	781b      	ldrb	r3, [r3, #0]
   2ab00:	2b7f      	cmp	r3, #127	; 0x7f
   2ab02:	d80b      	bhi.n	2ab1c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2ab04:	4a13      	ldr	r2, [pc, #76]	; (2ab54 <system_interrupt_clear_pending+0x6c>)
   2ab06:	1dfb      	adds	r3, r7, #7
   2ab08:	781b      	ldrb	r3, [r3, #0]
   2ab0a:	b25b      	sxtb	r3, r3
   2ab0c:	2101      	movs	r1, #1
   2ab0e:	4099      	lsls	r1, r3
   2ab10:	000b      	movs	r3, r1
   2ab12:	0019      	movs	r1, r3
   2ab14:	23c0      	movs	r3, #192	; 0xc0
   2ab16:	005b      	lsls	r3, r3, #1
   2ab18:	50d1      	str	r1, [r2, r3]
   2ab1a:	e014      	b.n	2ab46 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2ab1c:	1dfb      	adds	r3, r7, #7
   2ab1e:	781b      	ldrb	r3, [r3, #0]
   2ab20:	b25b      	sxtb	r3, r3
   2ab22:	330e      	adds	r3, #14
   2ab24:	d101      	bne.n	2ab2a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2ab26:	2317      	movs	r3, #23
   2ab28:	e010      	b.n	2ab4c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2ab2a:	1dfb      	adds	r3, r7, #7
   2ab2c:	781b      	ldrb	r3, [r3, #0]
   2ab2e:	b25b      	sxtb	r3, r3
   2ab30:	3301      	adds	r3, #1
   2ab32:	d104      	bne.n	2ab3e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2ab34:	4b08      	ldr	r3, [pc, #32]	; (2ab58 <system_interrupt_clear_pending+0x70>)
   2ab36:	2280      	movs	r2, #128	; 0x80
   2ab38:	0492      	lsls	r2, r2, #18
   2ab3a:	605a      	str	r2, [r3, #4]
   2ab3c:	e003      	b.n	2ab46 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2ab3e:	230f      	movs	r3, #15
   2ab40:	18fb      	adds	r3, r7, r3
   2ab42:	2217      	movs	r2, #23
   2ab44:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2ab46:	230f      	movs	r3, #15
   2ab48:	18fb      	adds	r3, r7, r3
   2ab4a:	781b      	ldrb	r3, [r3, #0]
}
   2ab4c:	0018      	movs	r0, r3
   2ab4e:	46bd      	mov	sp, r7
   2ab50:	b004      	add	sp, #16
   2ab52:	bd80      	pop	{r7, pc}
   2ab54:	e000e100 	.word	0xe000e100
   2ab58:	e000ed00 	.word	0xe000ed00

0002ab5c <system_pinmux_get_group_from_gpio_pin>:
{
   2ab5c:	b580      	push	{r7, lr}
   2ab5e:	b084      	sub	sp, #16
   2ab60:	af00      	add	r7, sp, #0
   2ab62:	0002      	movs	r2, r0
   2ab64:	1dfb      	adds	r3, r7, #7
   2ab66:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2ab68:	230f      	movs	r3, #15
   2ab6a:	18fb      	adds	r3, r7, r3
   2ab6c:	1dfa      	adds	r2, r7, #7
   2ab6e:	7812      	ldrb	r2, [r2, #0]
   2ab70:	09d2      	lsrs	r2, r2, #7
   2ab72:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2ab74:	230e      	movs	r3, #14
   2ab76:	18fb      	adds	r3, r7, r3
   2ab78:	1dfa      	adds	r2, r7, #7
   2ab7a:	7812      	ldrb	r2, [r2, #0]
   2ab7c:	0952      	lsrs	r2, r2, #5
   2ab7e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2ab80:	4b0d      	ldr	r3, [pc, #52]	; (2abb8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2ab82:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2ab84:	230f      	movs	r3, #15
   2ab86:	18fb      	adds	r3, r7, r3
   2ab88:	781b      	ldrb	r3, [r3, #0]
   2ab8a:	2b00      	cmp	r3, #0
   2ab8c:	d10f      	bne.n	2abae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2ab8e:	230f      	movs	r3, #15
   2ab90:	18fb      	adds	r3, r7, r3
   2ab92:	781b      	ldrb	r3, [r3, #0]
   2ab94:	009b      	lsls	r3, r3, #2
   2ab96:	2210      	movs	r2, #16
   2ab98:	4694      	mov	ip, r2
   2ab9a:	44bc      	add	ip, r7
   2ab9c:	4463      	add	r3, ip
   2ab9e:	3b08      	subs	r3, #8
   2aba0:	681a      	ldr	r2, [r3, #0]
   2aba2:	230e      	movs	r3, #14
   2aba4:	18fb      	adds	r3, r7, r3
   2aba6:	781b      	ldrb	r3, [r3, #0]
   2aba8:	01db      	lsls	r3, r3, #7
   2abaa:	18d3      	adds	r3, r2, r3
   2abac:	e000      	b.n	2abb0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2abae:	2300      	movs	r3, #0
}
   2abb0:	0018      	movs	r0, r3
   2abb2:	46bd      	mov	sp, r7
   2abb4:	b004      	add	sp, #16
   2abb6:	bd80      	pop	{r7, pc}
   2abb8:	41004400 	.word	0x41004400

0002abbc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2abbc:	b580      	push	{r7, lr}
   2abbe:	b088      	sub	sp, #32
   2abc0:	af00      	add	r7, sp, #0
   2abc2:	60f8      	str	r0, [r7, #12]
   2abc4:	60b9      	str	r1, [r7, #8]
   2abc6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2abc8:	2300      	movs	r3, #0
   2abca:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2abcc:	687b      	ldr	r3, [r7, #4]
   2abce:	78db      	ldrb	r3, [r3, #3]
   2abd0:	2201      	movs	r2, #1
   2abd2:	4053      	eors	r3, r2
   2abd4:	b2db      	uxtb	r3, r3
   2abd6:	2b00      	cmp	r3, #0
   2abd8:	d035      	beq.n	2ac46 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2abda:	687b      	ldr	r3, [r7, #4]
   2abdc:	781b      	ldrb	r3, [r3, #0]
   2abde:	2b80      	cmp	r3, #128	; 0x80
   2abe0:	d00b      	beq.n	2abfa <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2abe2:	69fb      	ldr	r3, [r7, #28]
   2abe4:	2280      	movs	r2, #128	; 0x80
   2abe6:	0252      	lsls	r2, r2, #9
   2abe8:	4313      	orrs	r3, r2
   2abea:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2abec:	687b      	ldr	r3, [r7, #4]
   2abee:	781b      	ldrb	r3, [r3, #0]
   2abf0:	061b      	lsls	r3, r3, #24
   2abf2:	001a      	movs	r2, r3
   2abf4:	69fb      	ldr	r3, [r7, #28]
   2abf6:	4313      	orrs	r3, r2
   2abf8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2abfa:	687b      	ldr	r3, [r7, #4]
   2abfc:	785b      	ldrb	r3, [r3, #1]
   2abfe:	2b00      	cmp	r3, #0
   2ac00:	d003      	beq.n	2ac0a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2ac02:	687b      	ldr	r3, [r7, #4]
   2ac04:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2ac06:	2b02      	cmp	r3, #2
   2ac08:	d110      	bne.n	2ac2c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2ac0a:	69fb      	ldr	r3, [r7, #28]
   2ac0c:	2280      	movs	r2, #128	; 0x80
   2ac0e:	0292      	lsls	r2, r2, #10
   2ac10:	4313      	orrs	r3, r2
   2ac12:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2ac14:	687b      	ldr	r3, [r7, #4]
   2ac16:	789b      	ldrb	r3, [r3, #2]
   2ac18:	2b00      	cmp	r3, #0
   2ac1a:	d004      	beq.n	2ac26 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2ac1c:	69fb      	ldr	r3, [r7, #28]
   2ac1e:	2280      	movs	r2, #128	; 0x80
   2ac20:	02d2      	lsls	r2, r2, #11
   2ac22:	4313      	orrs	r3, r2
   2ac24:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2ac26:	68fb      	ldr	r3, [r7, #12]
   2ac28:	68ba      	ldr	r2, [r7, #8]
   2ac2a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2ac2c:	687b      	ldr	r3, [r7, #4]
   2ac2e:	785b      	ldrb	r3, [r3, #1]
   2ac30:	2b01      	cmp	r3, #1
   2ac32:	d003      	beq.n	2ac3c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2ac34:	687b      	ldr	r3, [r7, #4]
   2ac36:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2ac38:	2b02      	cmp	r3, #2
   2ac3a:	d107      	bne.n	2ac4c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2ac3c:	69fb      	ldr	r3, [r7, #28]
   2ac3e:	4a22      	ldr	r2, [pc, #136]	; (2acc8 <_system_pinmux_config+0x10c>)
   2ac40:	4013      	ands	r3, r2
   2ac42:	61fb      	str	r3, [r7, #28]
   2ac44:	e002      	b.n	2ac4c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2ac46:	68fb      	ldr	r3, [r7, #12]
   2ac48:	68ba      	ldr	r2, [r7, #8]
   2ac4a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2ac4c:	68bb      	ldr	r3, [r7, #8]
   2ac4e:	041b      	lsls	r3, r3, #16
   2ac50:	0c1b      	lsrs	r3, r3, #16
   2ac52:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2ac54:	68bb      	ldr	r3, [r7, #8]
   2ac56:	0c1b      	lsrs	r3, r3, #16
   2ac58:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2ac5a:	69ba      	ldr	r2, [r7, #24]
   2ac5c:	69fb      	ldr	r3, [r7, #28]
   2ac5e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2ac60:	22a0      	movs	r2, #160	; 0xa0
   2ac62:	05d2      	lsls	r2, r2, #23
   2ac64:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2ac66:	68fb      	ldr	r3, [r7, #12]
   2ac68:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2ac6a:	697a      	ldr	r2, [r7, #20]
   2ac6c:	69fb      	ldr	r3, [r7, #28]
   2ac6e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2ac70:	22d0      	movs	r2, #208	; 0xd0
   2ac72:	0612      	lsls	r2, r2, #24
   2ac74:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2ac76:	68fb      	ldr	r3, [r7, #12]
   2ac78:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2ac7a:	687b      	ldr	r3, [r7, #4]
   2ac7c:	78db      	ldrb	r3, [r3, #3]
   2ac7e:	2201      	movs	r2, #1
   2ac80:	4053      	eors	r3, r2
   2ac82:	b2db      	uxtb	r3, r3
   2ac84:	2b00      	cmp	r3, #0
   2ac86:	d01a      	beq.n	2acbe <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2ac88:	69fa      	ldr	r2, [r7, #28]
   2ac8a:	2380      	movs	r3, #128	; 0x80
   2ac8c:	02db      	lsls	r3, r3, #11
   2ac8e:	4013      	ands	r3, r2
   2ac90:	d00a      	beq.n	2aca8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2ac92:	687b      	ldr	r3, [r7, #4]
   2ac94:	789b      	ldrb	r3, [r3, #2]
   2ac96:	2b01      	cmp	r3, #1
   2ac98:	d103      	bne.n	2aca2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2ac9a:	68fb      	ldr	r3, [r7, #12]
   2ac9c:	68ba      	ldr	r2, [r7, #8]
   2ac9e:	619a      	str	r2, [r3, #24]
   2aca0:	e002      	b.n	2aca8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2aca2:	68fb      	ldr	r3, [r7, #12]
   2aca4:	68ba      	ldr	r2, [r7, #8]
   2aca6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2aca8:	687b      	ldr	r3, [r7, #4]
   2acaa:	785b      	ldrb	r3, [r3, #1]
   2acac:	2b01      	cmp	r3, #1
   2acae:	d003      	beq.n	2acb8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2acb0:	687b      	ldr	r3, [r7, #4]
   2acb2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2acb4:	2b02      	cmp	r3, #2
   2acb6:	d102      	bne.n	2acbe <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2acb8:	68fb      	ldr	r3, [r7, #12]
   2acba:	68ba      	ldr	r2, [r7, #8]
   2acbc:	609a      	str	r2, [r3, #8]
		}
	}
}
   2acbe:	46c0      	nop			; (mov r8, r8)
   2acc0:	46bd      	mov	sp, r7
   2acc2:	b008      	add	sp, #32
   2acc4:	bd80      	pop	{r7, pc}
   2acc6:	46c0      	nop			; (mov r8, r8)
   2acc8:	fffbffff 	.word	0xfffbffff

0002accc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2accc:	b580      	push	{r7, lr}
   2acce:	b084      	sub	sp, #16
   2acd0:	af00      	add	r7, sp, #0
   2acd2:	0002      	movs	r2, r0
   2acd4:	6039      	str	r1, [r7, #0]
   2acd6:	1dfb      	adds	r3, r7, #7
   2acd8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2acda:	1dfb      	adds	r3, r7, #7
   2acdc:	781b      	ldrb	r3, [r3, #0]
   2acde:	0018      	movs	r0, r3
   2ace0:	4b0a      	ldr	r3, [pc, #40]	; (2ad0c <system_pinmux_pin_set_config+0x40>)
   2ace2:	4798      	blx	r3
   2ace4:	0003      	movs	r3, r0
   2ace6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2ace8:	1dfb      	adds	r3, r7, #7
   2acea:	781b      	ldrb	r3, [r3, #0]
   2acec:	221f      	movs	r2, #31
   2acee:	4013      	ands	r3, r2
   2acf0:	2201      	movs	r2, #1
   2acf2:	409a      	lsls	r2, r3
   2acf4:	0013      	movs	r3, r2
   2acf6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2acf8:	683a      	ldr	r2, [r7, #0]
   2acfa:	68b9      	ldr	r1, [r7, #8]
   2acfc:	68fb      	ldr	r3, [r7, #12]
   2acfe:	0018      	movs	r0, r3
   2ad00:	4b03      	ldr	r3, [pc, #12]	; (2ad10 <system_pinmux_pin_set_config+0x44>)
   2ad02:	4798      	blx	r3
}
   2ad04:	46c0      	nop			; (mov r8, r8)
   2ad06:	46bd      	mov	sp, r7
   2ad08:	b004      	add	sp, #16
   2ad0a:	bd80      	pop	{r7, pc}
   2ad0c:	0002ab5d 	.word	0x0002ab5d
   2ad10:	0002abbd 	.word	0x0002abbd

0002ad14 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2ad14:	b580      	push	{r7, lr}
   2ad16:	af00      	add	r7, sp, #0
	return;
   2ad18:	46c0      	nop			; (mov r8, r8)
}
   2ad1a:	46bd      	mov	sp, r7
   2ad1c:	bd80      	pop	{r7, pc}
	...

0002ad20 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2ad20:	b580      	push	{r7, lr}
   2ad22:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2ad24:	4b06      	ldr	r3, [pc, #24]	; (2ad40 <system_init+0x20>)
   2ad26:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2ad28:	4b06      	ldr	r3, [pc, #24]	; (2ad44 <system_init+0x24>)
   2ad2a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2ad2c:	4b06      	ldr	r3, [pc, #24]	; (2ad48 <system_init+0x28>)
   2ad2e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2ad30:	4b06      	ldr	r3, [pc, #24]	; (2ad4c <system_init+0x2c>)
   2ad32:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2ad34:	4b06      	ldr	r3, [pc, #24]	; (2ad50 <system_init+0x30>)
   2ad36:	4798      	blx	r3
}
   2ad38:	46c0      	nop			; (mov r8, r8)
   2ad3a:	46bd      	mov	sp, r7
   2ad3c:	bd80      	pop	{r7, pc}
   2ad3e:	46c0      	nop			; (mov r8, r8)
   2ad40:	0002a3a1 	.word	0x0002a3a1
   2ad44:	00026e69 	.word	0x00026e69
   2ad48:	00013011 	.word	0x00013011
   2ad4c:	00027241 	.word	0x00027241
   2ad50:	0002ad15 	.word	0x0002ad15

0002ad54 <system_gclk_chan_get_config_defaults>:
{
   2ad54:	b580      	push	{r7, lr}
   2ad56:	b082      	sub	sp, #8
   2ad58:	af00      	add	r7, sp, #0
   2ad5a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2ad5c:	687b      	ldr	r3, [r7, #4]
   2ad5e:	2200      	movs	r2, #0
   2ad60:	701a      	strb	r2, [r3, #0]
}
   2ad62:	46c0      	nop			; (mov r8, r8)
   2ad64:	46bd      	mov	sp, r7
   2ad66:	b002      	add	sp, #8
   2ad68:	bd80      	pop	{r7, pc}
	...

0002ad6c <system_apb_clock_set_mask>:
{
   2ad6c:	b580      	push	{r7, lr}
   2ad6e:	b082      	sub	sp, #8
   2ad70:	af00      	add	r7, sp, #0
   2ad72:	0002      	movs	r2, r0
   2ad74:	6039      	str	r1, [r7, #0]
   2ad76:	1dfb      	adds	r3, r7, #7
   2ad78:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2ad7a:	1dfb      	adds	r3, r7, #7
   2ad7c:	781b      	ldrb	r3, [r3, #0]
   2ad7e:	2b01      	cmp	r3, #1
   2ad80:	d00a      	beq.n	2ad98 <system_apb_clock_set_mask+0x2c>
   2ad82:	2b02      	cmp	r3, #2
   2ad84:	d00f      	beq.n	2ada6 <system_apb_clock_set_mask+0x3a>
   2ad86:	2b00      	cmp	r3, #0
   2ad88:	d114      	bne.n	2adb4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2ad8a:	4b0e      	ldr	r3, [pc, #56]	; (2adc4 <system_apb_clock_set_mask+0x58>)
   2ad8c:	4a0d      	ldr	r2, [pc, #52]	; (2adc4 <system_apb_clock_set_mask+0x58>)
   2ad8e:	6991      	ldr	r1, [r2, #24]
   2ad90:	683a      	ldr	r2, [r7, #0]
   2ad92:	430a      	orrs	r2, r1
   2ad94:	619a      	str	r2, [r3, #24]
			break;
   2ad96:	e00f      	b.n	2adb8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2ad98:	4b0a      	ldr	r3, [pc, #40]	; (2adc4 <system_apb_clock_set_mask+0x58>)
   2ad9a:	4a0a      	ldr	r2, [pc, #40]	; (2adc4 <system_apb_clock_set_mask+0x58>)
   2ad9c:	69d1      	ldr	r1, [r2, #28]
   2ad9e:	683a      	ldr	r2, [r7, #0]
   2ada0:	430a      	orrs	r2, r1
   2ada2:	61da      	str	r2, [r3, #28]
			break;
   2ada4:	e008      	b.n	2adb8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2ada6:	4b07      	ldr	r3, [pc, #28]	; (2adc4 <system_apb_clock_set_mask+0x58>)
   2ada8:	4a06      	ldr	r2, [pc, #24]	; (2adc4 <system_apb_clock_set_mask+0x58>)
   2adaa:	6a11      	ldr	r1, [r2, #32]
   2adac:	683a      	ldr	r2, [r7, #0]
   2adae:	430a      	orrs	r2, r1
   2adb0:	621a      	str	r2, [r3, #32]
			break;
   2adb2:	e001      	b.n	2adb8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2adb4:	2317      	movs	r3, #23
   2adb6:	e000      	b.n	2adba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2adb8:	2300      	movs	r3, #0
}
   2adba:	0018      	movs	r0, r3
   2adbc:	46bd      	mov	sp, r7
   2adbe:	b002      	add	sp, #8
   2adc0:	bd80      	pop	{r7, pc}
   2adc2:	46c0      	nop			; (mov r8, r8)
   2adc4:	40000400 	.word	0x40000400

0002adc8 <system_pinmux_get_config_defaults>:
{
   2adc8:	b580      	push	{r7, lr}
   2adca:	b082      	sub	sp, #8
   2adcc:	af00      	add	r7, sp, #0
   2adce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2add0:	687b      	ldr	r3, [r7, #4]
   2add2:	2280      	movs	r2, #128	; 0x80
   2add4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2add6:	687b      	ldr	r3, [r7, #4]
   2add8:	2200      	movs	r2, #0
   2adda:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2addc:	687b      	ldr	r3, [r7, #4]
   2adde:	2201      	movs	r2, #1
   2ade0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2ade2:	687b      	ldr	r3, [r7, #4]
   2ade4:	2200      	movs	r2, #0
   2ade6:	70da      	strb	r2, [r3, #3]
}
   2ade8:	46c0      	nop			; (mov r8, r8)
   2adea:	46bd      	mov	sp, r7
   2adec:	b002      	add	sp, #8
   2adee:	bd80      	pop	{r7, pc}

0002adf0 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2adf0:	b580      	push	{r7, lr}
   2adf2:	b084      	sub	sp, #16
   2adf4:	af00      	add	r7, sp, #0
   2adf6:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2adf8:	2300      	movs	r3, #0
   2adfa:	60fb      	str	r3, [r7, #12]
   2adfc:	e00c      	b.n	2ae18 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2adfe:	4b0a      	ldr	r3, [pc, #40]	; (2ae28 <_tcc_get_inst_index+0x38>)
   2ae00:	68fa      	ldr	r2, [r7, #12]
   2ae02:	0092      	lsls	r2, r2, #2
   2ae04:	58d2      	ldr	r2, [r2, r3]
   2ae06:	687b      	ldr	r3, [r7, #4]
   2ae08:	429a      	cmp	r2, r3
   2ae0a:	d102      	bne.n	2ae12 <_tcc_get_inst_index+0x22>
			return i;
   2ae0c:	68fb      	ldr	r3, [r7, #12]
   2ae0e:	b2db      	uxtb	r3, r3
   2ae10:	e006      	b.n	2ae20 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2ae12:	68fb      	ldr	r3, [r7, #12]
   2ae14:	3301      	adds	r3, #1
   2ae16:	60fb      	str	r3, [r7, #12]
   2ae18:	68fb      	ldr	r3, [r7, #12]
   2ae1a:	2b02      	cmp	r3, #2
   2ae1c:	d9ef      	bls.n	2adfe <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2ae1e:	2300      	movs	r3, #0
}
   2ae20:	0018      	movs	r0, r3
   2ae22:	46bd      	mov	sp, r7
   2ae24:	b004      	add	sp, #16
   2ae26:	bd80      	pop	{r7, pc}
   2ae28:	0003a500 	.word	0x0003a500

0002ae2c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2ae2c:	b590      	push	{r4, r7, lr}
   2ae2e:	b085      	sub	sp, #20
   2ae30:	af00      	add	r7, sp, #0
   2ae32:	6078      	str	r0, [r7, #4]
   2ae34:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2ae36:	230f      	movs	r3, #15
   2ae38:	18fc      	adds	r4, r7, r3
   2ae3a:	683b      	ldr	r3, [r7, #0]
   2ae3c:	0018      	movs	r0, r3
   2ae3e:	4bad      	ldr	r3, [pc, #692]	; (2b0f4 <tcc_get_config_defaults+0x2c8>)
   2ae40:	4798      	blx	r3
   2ae42:	0003      	movs	r3, r0
   2ae44:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2ae46:	687b      	ldr	r3, [r7, #4]
   2ae48:	2200      	movs	r2, #0
   2ae4a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2ae4c:	230f      	movs	r3, #15
   2ae4e:	18fb      	adds	r3, r7, r3
   2ae50:	781a      	ldrb	r2, [r3, #0]
   2ae52:	4ba9      	ldr	r3, [pc, #676]	; (2b0f8 <tcc_get_config_defaults+0x2cc>)
   2ae54:	0092      	lsls	r2, r2, #2
   2ae56:	58d2      	ldr	r2, [r2, r3]
   2ae58:	687b      	ldr	r3, [r7, #4]
   2ae5a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2ae5c:	687b      	ldr	r3, [r7, #4]
   2ae5e:	2200      	movs	r2, #0
   2ae60:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2ae62:	687b      	ldr	r3, [r7, #4]
   2ae64:	2200      	movs	r2, #0
   2ae66:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2ae68:	687b      	ldr	r3, [r7, #4]
   2ae6a:	2200      	movs	r2, #0
   2ae6c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2ae6e:	687b      	ldr	r3, [r7, #4]
   2ae70:	2200      	movs	r2, #0
   2ae72:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2ae74:	687b      	ldr	r3, [r7, #4]
   2ae76:	2200      	movs	r2, #0
   2ae78:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2ae7a:	687b      	ldr	r3, [r7, #4]
   2ae7c:	2200      	movs	r2, #0
   2ae7e:	61da      	str	r2, [r3, #28]
   2ae80:	687b      	ldr	r3, [r7, #4]
   2ae82:	2200      	movs	r2, #0
   2ae84:	621a      	str	r2, [r3, #32]
   2ae86:	687b      	ldr	r3, [r7, #4]
   2ae88:	2200      	movs	r2, #0
   2ae8a:	625a      	str	r2, [r3, #36]	; 0x24
   2ae8c:	687b      	ldr	r3, [r7, #4]
   2ae8e:	2200      	movs	r2, #0
   2ae90:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2ae92:	687b      	ldr	r3, [r7, #4]
   2ae94:	2200      	movs	r2, #0
   2ae96:	751a      	strb	r2, [r3, #20]
   2ae98:	687b      	ldr	r3, [r7, #4]
   2ae9a:	2200      	movs	r2, #0
   2ae9c:	755a      	strb	r2, [r3, #21]
   2ae9e:	687b      	ldr	r3, [r7, #4]
   2aea0:	2200      	movs	r2, #0
   2aea2:	759a      	strb	r2, [r3, #22]
   2aea4:	687b      	ldr	r3, [r7, #4]
   2aea6:	2200      	movs	r2, #0
   2aea8:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2aeaa:	687b      	ldr	r3, [r7, #4]
   2aeac:	2200      	movs	r2, #0
   2aeae:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2aeb0:	687b      	ldr	r3, [r7, #4]
   2aeb2:	2200      	movs	r2, #0
   2aeb4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2aeb6:	687b      	ldr	r3, [r7, #4]
   2aeb8:	2200      	movs	r2, #0
   2aeba:	741a      	strb	r2, [r3, #16]
   2aebc:	687b      	ldr	r3, [r7, #4]
   2aebe:	2200      	movs	r2, #0
   2aec0:	745a      	strb	r2, [r3, #17]
   2aec2:	687b      	ldr	r3, [r7, #4]
   2aec4:	2200      	movs	r2, #0
   2aec6:	749a      	strb	r2, [r3, #18]
   2aec8:	687b      	ldr	r3, [r7, #4]
   2aeca:	2200      	movs	r2, #0
   2aecc:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2aece:	687b      	ldr	r3, [r7, #4]
   2aed0:	222c      	movs	r2, #44	; 0x2c
   2aed2:	2100      	movs	r1, #0
   2aed4:	5499      	strb	r1, [r3, r2]
   2aed6:	687b      	ldr	r3, [r7, #4]
   2aed8:	222d      	movs	r2, #45	; 0x2d
   2aeda:	2100      	movs	r1, #0
   2aedc:	5499      	strb	r1, [r3, r2]
   2aede:	687b      	ldr	r3, [r7, #4]
   2aee0:	222e      	movs	r2, #46	; 0x2e
   2aee2:	2100      	movs	r1, #0
   2aee4:	5499      	strb	r1, [r3, r2]
   2aee6:	687b      	ldr	r3, [r7, #4]
   2aee8:	222f      	movs	r2, #47	; 0x2f
   2aeea:	2100      	movs	r1, #0
   2aeec:	5499      	strb	r1, [r3, r2]
   2aeee:	687b      	ldr	r3, [r7, #4]
   2aef0:	2230      	movs	r2, #48	; 0x30
   2aef2:	2100      	movs	r1, #0
   2aef4:	5499      	strb	r1, [r3, r2]
   2aef6:	687b      	ldr	r3, [r7, #4]
   2aef8:	2231      	movs	r2, #49	; 0x31
   2aefa:	2100      	movs	r1, #0
   2aefc:	5499      	strb	r1, [r3, r2]
   2aefe:	687b      	ldr	r3, [r7, #4]
   2af00:	2232      	movs	r2, #50	; 0x32
   2af02:	2100      	movs	r1, #0
   2af04:	5499      	strb	r1, [r3, r2]
   2af06:	687b      	ldr	r3, [r7, #4]
   2af08:	2233      	movs	r2, #51	; 0x33
   2af0a:	2100      	movs	r1, #0
   2af0c:	5499      	strb	r1, [r3, r2]
   2af0e:	687b      	ldr	r3, [r7, #4]
   2af10:	2234      	movs	r2, #52	; 0x34
   2af12:	2100      	movs	r1, #0
   2af14:	5499      	strb	r1, [r3, r2]
   2af16:	687b      	ldr	r3, [r7, #4]
   2af18:	2235      	movs	r2, #53	; 0x35
   2af1a:	2100      	movs	r1, #0
   2af1c:	5499      	strb	r1, [r3, r2]
   2af1e:	687b      	ldr	r3, [r7, #4]
   2af20:	2236      	movs	r2, #54	; 0x36
   2af22:	2100      	movs	r1, #0
   2af24:	5499      	strb	r1, [r3, r2]
   2af26:	687b      	ldr	r3, [r7, #4]
   2af28:	2237      	movs	r2, #55	; 0x37
   2af2a:	2100      	movs	r1, #0
   2af2c:	5499      	strb	r1, [r3, r2]
   2af2e:	687b      	ldr	r3, [r7, #4]
   2af30:	2238      	movs	r2, #56	; 0x38
   2af32:	2100      	movs	r1, #0
   2af34:	5499      	strb	r1, [r3, r2]
   2af36:	687b      	ldr	r3, [r7, #4]
   2af38:	2239      	movs	r2, #57	; 0x39
   2af3a:	2100      	movs	r1, #0
   2af3c:	5499      	strb	r1, [r3, r2]
   2af3e:	687b      	ldr	r3, [r7, #4]
   2af40:	223a      	movs	r2, #58	; 0x3a
   2af42:	2100      	movs	r1, #0
   2af44:	5499      	strb	r1, [r3, r2]
   2af46:	687b      	ldr	r3, [r7, #4]
   2af48:	223b      	movs	r2, #59	; 0x3b
   2af4a:	2100      	movs	r1, #0
   2af4c:	5499      	strb	r1, [r3, r2]
   2af4e:	687b      	ldr	r3, [r7, #4]
   2af50:	223c      	movs	r2, #60	; 0x3c
   2af52:	2100      	movs	r1, #0
   2af54:	5499      	strb	r1, [r3, r2]
   2af56:	687b      	ldr	r3, [r7, #4]
   2af58:	223d      	movs	r2, #61	; 0x3d
   2af5a:	2100      	movs	r1, #0
   2af5c:	5499      	strb	r1, [r3, r2]
   2af5e:	687b      	ldr	r3, [r7, #4]
   2af60:	223e      	movs	r2, #62	; 0x3e
   2af62:	2100      	movs	r1, #0
   2af64:	5499      	strb	r1, [r3, r2]
   2af66:	687b      	ldr	r3, [r7, #4]
   2af68:	223f      	movs	r2, #63	; 0x3f
   2af6a:	2100      	movs	r1, #0
   2af6c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2af6e:	687b      	ldr	r3, [r7, #4]
   2af70:	2240      	movs	r2, #64	; 0x40
   2af72:	2100      	movs	r1, #0
   2af74:	5499      	strb	r1, [r3, r2]
   2af76:	687b      	ldr	r3, [r7, #4]
   2af78:	2241      	movs	r2, #65	; 0x41
   2af7a:	2100      	movs	r1, #0
   2af7c:	5499      	strb	r1, [r3, r2]
   2af7e:	687b      	ldr	r3, [r7, #4]
   2af80:	2242      	movs	r2, #66	; 0x42
   2af82:	2100      	movs	r1, #0
   2af84:	5499      	strb	r1, [r3, r2]
   2af86:	687b      	ldr	r3, [r7, #4]
   2af88:	2243      	movs	r2, #67	; 0x43
   2af8a:	2100      	movs	r1, #0
   2af8c:	5499      	strb	r1, [r3, r2]
   2af8e:	687b      	ldr	r3, [r7, #4]
   2af90:	2244      	movs	r2, #68	; 0x44
   2af92:	2100      	movs	r1, #0
   2af94:	5499      	strb	r1, [r3, r2]
   2af96:	687b      	ldr	r3, [r7, #4]
   2af98:	2245      	movs	r2, #69	; 0x45
   2af9a:	2100      	movs	r1, #0
   2af9c:	5499      	strb	r1, [r3, r2]
   2af9e:	687b      	ldr	r3, [r7, #4]
   2afa0:	2246      	movs	r2, #70	; 0x46
   2afa2:	2100      	movs	r1, #0
   2afa4:	5499      	strb	r1, [r3, r2]
   2afa6:	687b      	ldr	r3, [r7, #4]
   2afa8:	2247      	movs	r2, #71	; 0x47
   2afaa:	2100      	movs	r1, #0
   2afac:	5499      	strb	r1, [r3, r2]
   2afae:	687b      	ldr	r3, [r7, #4]
   2afb0:	2248      	movs	r2, #72	; 0x48
   2afb2:	2100      	movs	r1, #0
   2afb4:	5499      	strb	r1, [r3, r2]
   2afb6:	687b      	ldr	r3, [r7, #4]
   2afb8:	2249      	movs	r2, #73	; 0x49
   2afba:	2100      	movs	r1, #0
   2afbc:	5499      	strb	r1, [r3, r2]
   2afbe:	687b      	ldr	r3, [r7, #4]
   2afc0:	224a      	movs	r2, #74	; 0x4a
   2afc2:	2100      	movs	r1, #0
   2afc4:	5499      	strb	r1, [r3, r2]
   2afc6:	687b      	ldr	r3, [r7, #4]
   2afc8:	224b      	movs	r2, #75	; 0x4b
   2afca:	2100      	movs	r1, #0
   2afcc:	5499      	strb	r1, [r3, r2]
   2afce:	687b      	ldr	r3, [r7, #4]
   2afd0:	224c      	movs	r2, #76	; 0x4c
   2afd2:	2100      	movs	r1, #0
   2afd4:	5499      	strb	r1, [r3, r2]
   2afd6:	687b      	ldr	r3, [r7, #4]
   2afd8:	224d      	movs	r2, #77	; 0x4d
   2afda:	2100      	movs	r1, #0
   2afdc:	5499      	strb	r1, [r3, r2]
   2afde:	687b      	ldr	r3, [r7, #4]
   2afe0:	224e      	movs	r2, #78	; 0x4e
   2afe2:	2100      	movs	r1, #0
   2afe4:	5499      	strb	r1, [r3, r2]
   2afe6:	687b      	ldr	r3, [r7, #4]
   2afe8:	224f      	movs	r2, #79	; 0x4f
   2afea:	2100      	movs	r1, #0
   2afec:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2afee:	687b      	ldr	r3, [r7, #4]
   2aff0:	2250      	movs	r2, #80	; 0x50
   2aff2:	2100      	movs	r1, #0
   2aff4:	5499      	strb	r1, [r3, r2]
   2aff6:	687b      	ldr	r3, [r7, #4]
   2aff8:	2251      	movs	r2, #81	; 0x51
   2affa:	2100      	movs	r1, #0
   2affc:	5499      	strb	r1, [r3, r2]
   2affe:	687b      	ldr	r3, [r7, #4]
   2b000:	2252      	movs	r2, #82	; 0x52
   2b002:	2100      	movs	r1, #0
   2b004:	5499      	strb	r1, [r3, r2]
   2b006:	687b      	ldr	r3, [r7, #4]
   2b008:	2253      	movs	r2, #83	; 0x53
   2b00a:	2100      	movs	r1, #0
   2b00c:	5499      	strb	r1, [r3, r2]
   2b00e:	687b      	ldr	r3, [r7, #4]
   2b010:	2254      	movs	r2, #84	; 0x54
   2b012:	2100      	movs	r1, #0
   2b014:	5499      	strb	r1, [r3, r2]
   2b016:	687b      	ldr	r3, [r7, #4]
   2b018:	2255      	movs	r2, #85	; 0x55
   2b01a:	2100      	movs	r1, #0
   2b01c:	5499      	strb	r1, [r3, r2]
   2b01e:	687b      	ldr	r3, [r7, #4]
   2b020:	2256      	movs	r2, #86	; 0x56
   2b022:	2100      	movs	r1, #0
   2b024:	5499      	strb	r1, [r3, r2]
   2b026:	687b      	ldr	r3, [r7, #4]
   2b028:	2257      	movs	r2, #87	; 0x57
   2b02a:	2100      	movs	r1, #0
   2b02c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2b02e:	687b      	ldr	r3, [r7, #4]
   2b030:	2298      	movs	r2, #152	; 0x98
   2b032:	2100      	movs	r1, #0
   2b034:	5499      	strb	r1, [r3, r2]
   2b036:	687b      	ldr	r3, [r7, #4]
   2b038:	2200      	movs	r2, #0
   2b03a:	659a      	str	r2, [r3, #88]	; 0x58
   2b03c:	687b      	ldr	r3, [r7, #4]
   2b03e:	2200      	movs	r2, #0
   2b040:	679a      	str	r2, [r3, #120]	; 0x78
   2b042:	687b      	ldr	r3, [r7, #4]
   2b044:	2299      	movs	r2, #153	; 0x99
   2b046:	2100      	movs	r1, #0
   2b048:	5499      	strb	r1, [r3, r2]
   2b04a:	687b      	ldr	r3, [r7, #4]
   2b04c:	2200      	movs	r2, #0
   2b04e:	65da      	str	r2, [r3, #92]	; 0x5c
   2b050:	687b      	ldr	r3, [r7, #4]
   2b052:	2200      	movs	r2, #0
   2b054:	67da      	str	r2, [r3, #124]	; 0x7c
   2b056:	687b      	ldr	r3, [r7, #4]
   2b058:	229a      	movs	r2, #154	; 0x9a
   2b05a:	2100      	movs	r1, #0
   2b05c:	5499      	strb	r1, [r3, r2]
   2b05e:	687b      	ldr	r3, [r7, #4]
   2b060:	2200      	movs	r2, #0
   2b062:	661a      	str	r2, [r3, #96]	; 0x60
   2b064:	687b      	ldr	r3, [r7, #4]
   2b066:	2280      	movs	r2, #128	; 0x80
   2b068:	2100      	movs	r1, #0
   2b06a:	5099      	str	r1, [r3, r2]
   2b06c:	687b      	ldr	r3, [r7, #4]
   2b06e:	229b      	movs	r2, #155	; 0x9b
   2b070:	2100      	movs	r1, #0
   2b072:	5499      	strb	r1, [r3, r2]
   2b074:	687b      	ldr	r3, [r7, #4]
   2b076:	2200      	movs	r2, #0
   2b078:	665a      	str	r2, [r3, #100]	; 0x64
   2b07a:	687b      	ldr	r3, [r7, #4]
   2b07c:	2284      	movs	r2, #132	; 0x84
   2b07e:	2100      	movs	r1, #0
   2b080:	5099      	str	r1, [r3, r2]
   2b082:	687b      	ldr	r3, [r7, #4]
   2b084:	229c      	movs	r2, #156	; 0x9c
   2b086:	2100      	movs	r1, #0
   2b088:	5499      	strb	r1, [r3, r2]
   2b08a:	687b      	ldr	r3, [r7, #4]
   2b08c:	2200      	movs	r2, #0
   2b08e:	669a      	str	r2, [r3, #104]	; 0x68
   2b090:	687b      	ldr	r3, [r7, #4]
   2b092:	2288      	movs	r2, #136	; 0x88
   2b094:	2100      	movs	r1, #0
   2b096:	5099      	str	r1, [r3, r2]
   2b098:	687b      	ldr	r3, [r7, #4]
   2b09a:	229d      	movs	r2, #157	; 0x9d
   2b09c:	2100      	movs	r1, #0
   2b09e:	5499      	strb	r1, [r3, r2]
   2b0a0:	687b      	ldr	r3, [r7, #4]
   2b0a2:	2200      	movs	r2, #0
   2b0a4:	66da      	str	r2, [r3, #108]	; 0x6c
   2b0a6:	687b      	ldr	r3, [r7, #4]
   2b0a8:	228c      	movs	r2, #140	; 0x8c
   2b0aa:	2100      	movs	r1, #0
   2b0ac:	5099      	str	r1, [r3, r2]
   2b0ae:	687b      	ldr	r3, [r7, #4]
   2b0b0:	229e      	movs	r2, #158	; 0x9e
   2b0b2:	2100      	movs	r1, #0
   2b0b4:	5499      	strb	r1, [r3, r2]
   2b0b6:	687b      	ldr	r3, [r7, #4]
   2b0b8:	2200      	movs	r2, #0
   2b0ba:	671a      	str	r2, [r3, #112]	; 0x70
   2b0bc:	687b      	ldr	r3, [r7, #4]
   2b0be:	2290      	movs	r2, #144	; 0x90
   2b0c0:	2100      	movs	r1, #0
   2b0c2:	5099      	str	r1, [r3, r2]
   2b0c4:	687b      	ldr	r3, [r7, #4]
   2b0c6:	229f      	movs	r2, #159	; 0x9f
   2b0c8:	2100      	movs	r1, #0
   2b0ca:	5499      	strb	r1, [r3, r2]
   2b0cc:	687b      	ldr	r3, [r7, #4]
   2b0ce:	2200      	movs	r2, #0
   2b0d0:	675a      	str	r2, [r3, #116]	; 0x74
   2b0d2:	687b      	ldr	r3, [r7, #4]
   2b0d4:	2294      	movs	r2, #148	; 0x94
   2b0d6:	2100      	movs	r1, #0
   2b0d8:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2b0da:	687b      	ldr	r3, [r7, #4]
   2b0dc:	22a0      	movs	r2, #160	; 0xa0
   2b0de:	2101      	movs	r1, #1
   2b0e0:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2b0e2:	687b      	ldr	r3, [r7, #4]
   2b0e4:	22a1      	movs	r2, #161	; 0xa1
   2b0e6:	2100      	movs	r1, #0
   2b0e8:	5499      	strb	r1, [r3, r2]
}
   2b0ea:	46c0      	nop			; (mov r8, r8)
   2b0ec:	46bd      	mov	sp, r7
   2b0ee:	b005      	add	sp, #20
   2b0f0:	bd90      	pop	{r4, r7, pc}
   2b0f2:	46c0      	nop			; (mov r8, r8)
   2b0f4:	0002adf1 	.word	0x0002adf1
   2b0f8:	0003a51c 	.word	0x0003a51c

0002b0fc <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b0fc:	b580      	push	{r7, lr}
   2b0fe:	b086      	sub	sp, #24
   2b100:	af00      	add	r7, sp, #0
   2b102:	60b9      	str	r1, [r7, #8]
   2b104:	607a      	str	r2, [r7, #4]
   2b106:	230f      	movs	r3, #15
   2b108:	18fb      	adds	r3, r7, r3
   2b10a:	1c02      	adds	r2, r0, #0
   2b10c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2b10e:	2300      	movs	r3, #0
   2b110:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b112:	2300      	movs	r3, #0
   2b114:	613b      	str	r3, [r7, #16]
   2b116:	e01d      	b.n	2b154 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2b118:	68ba      	ldr	r2, [r7, #8]
   2b11a:	693b      	ldr	r3, [r7, #16]
   2b11c:	18d3      	adds	r3, r2, r3
   2b11e:	3310      	adds	r3, #16
   2b120:	781b      	ldrb	r3, [r3, #0]
   2b122:	2b01      	cmp	r3, #1
   2b124:	d113      	bne.n	2b14e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2b126:	230f      	movs	r3, #15
   2b128:	18fb      	adds	r3, r7, r3
   2b12a:	781b      	ldrb	r3, [r3, #0]
   2b12c:	4a1b      	ldr	r2, [pc, #108]	; (2b19c <_tcc_build_ctrla+0xa0>)
   2b12e:	5cd3      	ldrb	r3, [r2, r3]
   2b130:	001a      	movs	r2, r3
   2b132:	693b      	ldr	r3, [r7, #16]
   2b134:	429a      	cmp	r2, r3
   2b136:	da01      	bge.n	2b13c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2b138:	2317      	movs	r3, #23
   2b13a:	e02a      	b.n	2b192 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2b13c:	2380      	movs	r3, #128	; 0x80
   2b13e:	045a      	lsls	r2, r3, #17
   2b140:	693b      	ldr	r3, [r7, #16]
   2b142:	409a      	lsls	r2, r3
   2b144:	0013      	movs	r3, r2
   2b146:	001a      	movs	r2, r3
   2b148:	697b      	ldr	r3, [r7, #20]
   2b14a:	4313      	orrs	r3, r2
   2b14c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b14e:	693b      	ldr	r3, [r7, #16]
   2b150:	3301      	adds	r3, #1
   2b152:	613b      	str	r3, [r7, #16]
   2b154:	693b      	ldr	r3, [r7, #16]
   2b156:	2b03      	cmp	r3, #3
   2b158:	ddde      	ble.n	2b118 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2b15a:	68bb      	ldr	r3, [r7, #8]
   2b15c:	22a1      	movs	r2, #161	; 0xa1
   2b15e:	5c9b      	ldrb	r3, [r3, r2]
   2b160:	2b00      	cmp	r3, #0
   2b162:	d004      	beq.n	2b16e <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2b164:	697b      	ldr	r3, [r7, #20]
   2b166:	2280      	movs	r2, #128	; 0x80
   2b168:	0112      	lsls	r2, r2, #4
   2b16a:	4313      	orrs	r3, r2
   2b16c:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2b16e:	68bb      	ldr	r3, [r7, #8]
   2b170:	7b1b      	ldrb	r3, [r3, #12]
   2b172:	031b      	lsls	r3, r3, #12
   2b174:	001a      	movs	r2, r3
   2b176:	697b      	ldr	r3, [r7, #20]
   2b178:	4313      	orrs	r3, r2
   2b17a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2b17c:	68bb      	ldr	r3, [r7, #8]
   2b17e:	7adb      	ldrb	r3, [r3, #11]
   2b180:	021b      	lsls	r3, r3, #8
   2b182:	001a      	movs	r2, r3
   2b184:	697b      	ldr	r3, [r7, #20]
   2b186:	4313      	orrs	r3, r2
   2b188:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2b18a:	687b      	ldr	r3, [r7, #4]
   2b18c:	697a      	ldr	r2, [r7, #20]
   2b18e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b190:	2300      	movs	r3, #0
}
   2b192:	0018      	movs	r0, r3
   2b194:	46bd      	mov	sp, r7
   2b196:	b006      	add	sp, #24
   2b198:	bd80      	pop	{r7, pc}
   2b19a:	46c0      	nop			; (mov r8, r8)
   2b19c:	0003a528 	.word	0x0003a528

0002b1a0 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2b1a0:	b580      	push	{r7, lr}
   2b1a2:	b086      	sub	sp, #24
   2b1a4:	af00      	add	r7, sp, #0
   2b1a6:	60b9      	str	r1, [r7, #8]
   2b1a8:	607a      	str	r2, [r7, #4]
   2b1aa:	230f      	movs	r3, #15
   2b1ac:	18fb      	adds	r3, r7, r3
   2b1ae:	1c02      	adds	r2, r0, #0
   2b1b0:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2b1b2:	2317      	movs	r3, #23
   2b1b4:	18fb      	adds	r3, r7, r3
   2b1b6:	2200      	movs	r2, #0
   2b1b8:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2b1ba:	68bb      	ldr	r3, [r7, #8]
   2b1bc:	7a1b      	ldrb	r3, [r3, #8]
   2b1be:	2b00      	cmp	r3, #0
   2b1c0:	d007      	beq.n	2b1d2 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2b1c2:	2317      	movs	r3, #23
   2b1c4:	18fb      	adds	r3, r7, r3
   2b1c6:	2217      	movs	r2, #23
   2b1c8:	18ba      	adds	r2, r7, r2
   2b1ca:	7812      	ldrb	r2, [r2, #0]
   2b1cc:	2104      	movs	r1, #4
   2b1ce:	430a      	orrs	r2, r1
   2b1d0:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2b1d2:	68bb      	ldr	r3, [r7, #8]
   2b1d4:	7a5b      	ldrb	r3, [r3, #9]
   2b1d6:	2b01      	cmp	r3, #1
   2b1d8:	d107      	bne.n	2b1ea <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2b1da:	2317      	movs	r3, #23
   2b1dc:	18fb      	adds	r3, r7, r3
   2b1de:	2217      	movs	r2, #23
   2b1e0:	18ba      	adds	r2, r7, r2
   2b1e2:	7812      	ldrb	r2, [r2, #0]
   2b1e4:	2101      	movs	r1, #1
   2b1e6:	430a      	orrs	r2, r1
   2b1e8:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2b1ea:	687b      	ldr	r3, [r7, #4]
   2b1ec:	2217      	movs	r2, #23
   2b1ee:	18ba      	adds	r2, r7, r2
   2b1f0:	7812      	ldrb	r2, [r2, #0]
   2b1f2:	701a      	strb	r2, [r3, #0]
}
   2b1f4:	46c0      	nop			; (mov r8, r8)
   2b1f6:	46bd      	mov	sp, r7
   2b1f8:	b006      	add	sp, #24
   2b1fa:	bd80      	pop	{r7, pc}

0002b1fc <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b1fc:	b580      	push	{r7, lr}
   2b1fe:	b088      	sub	sp, #32
   2b200:	af00      	add	r7, sp, #0
   2b202:	60b9      	str	r1, [r7, #8]
   2b204:	607a      	str	r2, [r7, #4]
   2b206:	230f      	movs	r3, #15
   2b208:	18fb      	adds	r3, r7, r3
   2b20a:	1c02      	adds	r2, r0, #0
   2b20c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b20e:	230f      	movs	r3, #15
   2b210:	18fb      	adds	r3, r7, r3
   2b212:	781a      	ldrb	r2, [r3, #0]
   2b214:	231b      	movs	r3, #27
   2b216:	18fb      	adds	r3, r7, r3
   2b218:	493e      	ldr	r1, [pc, #248]	; (2b314 <_tcc_build_faults+0x118>)
   2b21a:	5c8a      	ldrb	r2, [r1, r2]
   2b21c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b21e:	2300      	movs	r3, #0
   2b220:	61fb      	str	r3, [r7, #28]
   2b222:	e06e      	b.n	2b302 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2b224:	69fa      	ldr	r2, [r7, #28]
   2b226:	0013      	movs	r3, r2
   2b228:	009b      	lsls	r3, r3, #2
   2b22a:	189b      	adds	r3, r3, r2
   2b22c:	005b      	lsls	r3, r3, #1
   2b22e:	3328      	adds	r3, #40	; 0x28
   2b230:	68ba      	ldr	r2, [r7, #8]
   2b232:	18d3      	adds	r3, r2, r3
   2b234:	3304      	adds	r3, #4
   2b236:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2b238:	697b      	ldr	r3, [r7, #20]
   2b23a:	7a5b      	ldrb	r3, [r3, #9]
   2b23c:	221b      	movs	r2, #27
   2b23e:	18ba      	adds	r2, r7, r2
   2b240:	7812      	ldrb	r2, [r2, #0]
   2b242:	429a      	cmp	r2, r3
   2b244:	d801      	bhi.n	2b24a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2b246:	2317      	movs	r3, #23
   2b248:	e05f      	b.n	2b30a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2b24a:	697b      	ldr	r3, [r7, #20]
   2b24c:	781b      	ldrb	r3, [r3, #0]
   2b24e:	2b0f      	cmp	r3, #15
   2b250:	d901      	bls.n	2b256 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2b252:	2317      	movs	r3, #23
   2b254:	e059      	b.n	2b30a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b256:	697b      	ldr	r3, [r7, #20]
   2b258:	781b      	ldrb	r3, [r3, #0]
   2b25a:	061b      	lsls	r3, r3, #24
   2b25c:	001a      	movs	r2, r3
   2b25e:	23f0      	movs	r3, #240	; 0xf0
   2b260:	051b      	lsls	r3, r3, #20
   2b262:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2b264:	697b      	ldr	r3, [r7, #20]
   2b266:	785b      	ldrb	r3, [r3, #1]
   2b268:	041b      	lsls	r3, r3, #16
   2b26a:	0019      	movs	r1, r3
   2b26c:	23ff      	movs	r3, #255	; 0xff
   2b26e:	041b      	lsls	r3, r3, #16
   2b270:	400b      	ands	r3, r1
   2b272:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2b274:	697b      	ldr	r3, [r7, #20]
   2b276:	789b      	ldrb	r3, [r3, #2]
   2b278:	2b00      	cmp	r3, #0
   2b27a:	d001      	beq.n	2b280 <_tcc_build_faults+0x84>
   2b27c:	2380      	movs	r3, #128	; 0x80
   2b27e:	e000      	b.n	2b282 <_tcc_build_faults+0x86>
   2b280:	2300      	movs	r3, #0
   2b282:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2b284:	697b      	ldr	r3, [r7, #20]
   2b286:	78db      	ldrb	r3, [r3, #3]
   2b288:	2b00      	cmp	r3, #0
   2b28a:	d001      	beq.n	2b290 <_tcc_build_faults+0x94>
   2b28c:	2308      	movs	r3, #8
   2b28e:	e000      	b.n	2b292 <_tcc_build_faults+0x96>
   2b290:	2300      	movs	r3, #0
   2b292:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2b294:	697b      	ldr	r3, [r7, #20]
   2b296:	791b      	ldrb	r3, [r3, #4]
   2b298:	2b00      	cmp	r3, #0
   2b29a:	d001      	beq.n	2b2a0 <_tcc_build_faults+0xa4>
   2b29c:	2310      	movs	r3, #16
   2b29e:	e000      	b.n	2b2a2 <_tcc_build_faults+0xa6>
   2b2a0:	2300      	movs	r3, #0
   2b2a2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2b2a4:	697b      	ldr	r3, [r7, #20]
   2b2a6:	795b      	ldrb	r3, [r3, #5]
   2b2a8:	0019      	movs	r1, r3
   2b2aa:	2303      	movs	r3, #3
   2b2ac:	400b      	ands	r3, r1
   2b2ae:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2b2b0:	697b      	ldr	r3, [r7, #20]
   2b2b2:	799b      	ldrb	r3, [r3, #6]
   2b2b4:	015b      	lsls	r3, r3, #5
   2b2b6:	0019      	movs	r1, r3
   2b2b8:	2360      	movs	r3, #96	; 0x60
   2b2ba:	400b      	ands	r3, r1
   2b2bc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2b2be:	697b      	ldr	r3, [r7, #20]
   2b2c0:	79db      	ldrb	r3, [r3, #7]
   2b2c2:	021b      	lsls	r3, r3, #8
   2b2c4:	0019      	movs	r1, r3
   2b2c6:	23c0      	movs	r3, #192	; 0xc0
   2b2c8:	009b      	lsls	r3, r3, #2
   2b2ca:	400b      	ands	r3, r1
   2b2cc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2b2ce:	697b      	ldr	r3, [r7, #20]
   2b2d0:	7a1b      	ldrb	r3, [r3, #8]
   2b2d2:	031b      	lsls	r3, r3, #12
   2b2d4:	0019      	movs	r1, r3
   2b2d6:	23e0      	movs	r3, #224	; 0xe0
   2b2d8:	01db      	lsls	r3, r3, #7
   2b2da:	400b      	ands	r3, r1
   2b2dc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2b2de:	697b      	ldr	r3, [r7, #20]
   2b2e0:	7a5b      	ldrb	r3, [r3, #9]
   2b2e2:	029b      	lsls	r3, r3, #10
   2b2e4:	0019      	movs	r1, r3
   2b2e6:	23c0      	movs	r3, #192	; 0xc0
   2b2e8:	011b      	lsls	r3, r3, #4
   2b2ea:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b2ec:	4313      	orrs	r3, r2
   2b2ee:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2b2f0:	69fb      	ldr	r3, [r7, #28]
   2b2f2:	009b      	lsls	r3, r3, #2
   2b2f4:	687a      	ldr	r2, [r7, #4]
   2b2f6:	18d3      	adds	r3, r2, r3
   2b2f8:	693a      	ldr	r2, [r7, #16]
   2b2fa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b2fc:	69fb      	ldr	r3, [r7, #28]
   2b2fe:	3301      	adds	r3, #1
   2b300:	61fb      	str	r3, [r7, #28]
   2b302:	69fb      	ldr	r3, [r7, #28]
   2b304:	2b01      	cmp	r3, #1
   2b306:	dd8d      	ble.n	2b224 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2b308:	2300      	movs	r3, #0
}
   2b30a:	0018      	movs	r0, r3
   2b30c:	46bd      	mov	sp, r7
   2b30e:	b008      	add	sp, #32
   2b310:	bd80      	pop	{r7, pc}
   2b312:	46c0      	nop			; (mov r8, r8)
   2b314:	0003a528 	.word	0x0003a528

0002b318 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b318:	b580      	push	{r7, lr}
   2b31a:	b088      	sub	sp, #32
   2b31c:	af00      	add	r7, sp, #0
   2b31e:	60b9      	str	r1, [r7, #8]
   2b320:	607a      	str	r2, [r7, #4]
   2b322:	230f      	movs	r3, #15
   2b324:	18fb      	adds	r3, r7, r3
   2b326:	1c02      	adds	r2, r0, #0
   2b328:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2b32a:	230f      	movs	r3, #15
   2b32c:	18fb      	adds	r3, r7, r3
   2b32e:	781a      	ldrb	r2, [r3, #0]
   2b330:	2317      	movs	r3, #23
   2b332:	18fb      	adds	r3, r7, r3
   2b334:	492d      	ldr	r1, [pc, #180]	; (2b3ec <_tcc_build_drvctrl+0xd4>)
   2b336:	5c8a      	ldrb	r2, [r1, r2]
   2b338:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2b33a:	2300      	movs	r3, #0
   2b33c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b33e:	2300      	movs	r3, #0
   2b340:	61fb      	str	r3, [r7, #28]
   2b342:	e048      	b.n	2b3d6 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2b344:	68ba      	ldr	r2, [r7, #8]
   2b346:	2150      	movs	r1, #80	; 0x50
   2b348:	69fb      	ldr	r3, [r7, #28]
   2b34a:	18d3      	adds	r3, r2, r3
   2b34c:	185b      	adds	r3, r3, r1
   2b34e:	781b      	ldrb	r3, [r3, #0]
   2b350:	2b00      	cmp	r3, #0
   2b352:	d010      	beq.n	2b376 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2b354:	2317      	movs	r3, #23
   2b356:	18fb      	adds	r3, r7, r3
   2b358:	781a      	ldrb	r2, [r3, #0]
   2b35a:	69fb      	ldr	r3, [r7, #28]
   2b35c:	429a      	cmp	r2, r3
   2b35e:	d801      	bhi.n	2b364 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2b360:	2317      	movs	r3, #23
   2b362:	e03f      	b.n	2b3e4 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2b364:	2380      	movs	r3, #128	; 0x80
   2b366:	025a      	lsls	r2, r3, #9
   2b368:	69fb      	ldr	r3, [r7, #28]
   2b36a:	409a      	lsls	r2, r3
   2b36c:	0013      	movs	r3, r2
   2b36e:	001a      	movs	r2, r3
   2b370:	69bb      	ldr	r3, [r7, #24]
   2b372:	4313      	orrs	r3, r2
   2b374:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2b376:	68ba      	ldr	r2, [r7, #8]
   2b378:	69fb      	ldr	r3, [r7, #28]
   2b37a:	331c      	adds	r3, #28
   2b37c:	005b      	lsls	r3, r3, #1
   2b37e:	18d3      	adds	r3, r2, r3
   2b380:	3309      	adds	r3, #9
   2b382:	781b      	ldrb	r3, [r3, #0]
   2b384:	2b00      	cmp	r3, #0
   2b386:	d023      	beq.n	2b3d0 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2b388:	2317      	movs	r3, #23
   2b38a:	18fb      	adds	r3, r7, r3
   2b38c:	781a      	ldrb	r2, [r3, #0]
   2b38e:	69fb      	ldr	r3, [r7, #28]
   2b390:	429a      	cmp	r2, r3
   2b392:	d801      	bhi.n	2b398 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2b394:	2317      	movs	r3, #23
   2b396:	e025      	b.n	2b3e4 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2b398:	68ba      	ldr	r2, [r7, #8]
   2b39a:	69fb      	ldr	r3, [r7, #28]
   2b39c:	331c      	adds	r3, #28
   2b39e:	005b      	lsls	r3, r3, #1
   2b3a0:	18d3      	adds	r3, r2, r3
   2b3a2:	3309      	adds	r3, #9
   2b3a4:	781b      	ldrb	r3, [r3, #0]
   2b3a6:	2b02      	cmp	r3, #2
   2b3a8:	d10a      	bne.n	2b3c0 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2b3aa:	2302      	movs	r3, #2
   2b3ac:	33ff      	adds	r3, #255	; 0xff
   2b3ae:	001a      	movs	r2, r3
   2b3b0:	69fb      	ldr	r3, [r7, #28]
   2b3b2:	409a      	lsls	r2, r3
   2b3b4:	0013      	movs	r3, r2
   2b3b6:	001a      	movs	r2, r3
   2b3b8:	69bb      	ldr	r3, [r7, #24]
   2b3ba:	4313      	orrs	r3, r2
   2b3bc:	61bb      	str	r3, [r7, #24]
   2b3be:	e007      	b.n	2b3d0 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2b3c0:	2201      	movs	r2, #1
   2b3c2:	69fb      	ldr	r3, [r7, #28]
   2b3c4:	409a      	lsls	r2, r3
   2b3c6:	0013      	movs	r3, r2
   2b3c8:	001a      	movs	r2, r3
   2b3ca:	69bb      	ldr	r3, [r7, #24]
   2b3cc:	4313      	orrs	r3, r2
   2b3ce:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b3d0:	69fb      	ldr	r3, [r7, #28]
   2b3d2:	3301      	adds	r3, #1
   2b3d4:	61fb      	str	r3, [r7, #28]
   2b3d6:	69fb      	ldr	r3, [r7, #28]
   2b3d8:	2b07      	cmp	r3, #7
   2b3da:	d9b3      	bls.n	2b344 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2b3dc:	687b      	ldr	r3, [r7, #4]
   2b3de:	69ba      	ldr	r2, [r7, #24]
   2b3e0:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b3e2:	2300      	movs	r3, #0
}
   2b3e4:	0018      	movs	r0, r3
   2b3e6:	46bd      	mov	sp, r7
   2b3e8:	b008      	add	sp, #32
   2b3ea:	bd80      	pop	{r7, pc}
   2b3ec:	0003a52c 	.word	0x0003a52c

0002b3f0 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b3f0:	b580      	push	{r7, lr}
   2b3f2:	b088      	sub	sp, #32
   2b3f4:	af00      	add	r7, sp, #0
   2b3f6:	60b9      	str	r1, [r7, #8]
   2b3f8:	607a      	str	r2, [r7, #4]
   2b3fa:	230f      	movs	r3, #15
   2b3fc:	18fb      	adds	r3, r7, r3
   2b3fe:	1c02      	adds	r2, r0, #0
   2b400:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b402:	230f      	movs	r3, #15
   2b404:	18fb      	adds	r3, r7, r3
   2b406:	781a      	ldrb	r2, [r3, #0]
   2b408:	2317      	movs	r3, #23
   2b40a:	18fb      	adds	r3, r7, r3
   2b40c:	491d      	ldr	r1, [pc, #116]	; (2b484 <_tcc_build_waves+0x94>)
   2b40e:	5c8a      	ldrb	r2, [r1, r2]
   2b410:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2b412:	68bb      	ldr	r3, [r7, #8]
   2b414:	3310      	adds	r3, #16
   2b416:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b418:	693b      	ldr	r3, [r7, #16]
   2b41a:	7a5b      	ldrb	r3, [r3, #9]
   2b41c:	011b      	lsls	r3, r3, #4
   2b41e:	001a      	movs	r2, r3
   2b420:	2330      	movs	r3, #48	; 0x30
   2b422:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2b424:	693b      	ldr	r3, [r7, #16]
   2b426:	7a1b      	ldrb	r3, [r3, #8]
   2b428:	0019      	movs	r1, r3
   2b42a:	2307      	movs	r3, #7
   2b42c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b42e:	4313      	orrs	r3, r2
   2b430:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b432:	2300      	movs	r3, #0
   2b434:	61fb      	str	r3, [r7, #28]
   2b436:	e01a      	b.n	2b46e <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2b438:	693a      	ldr	r2, [r7, #16]
   2b43a:	69fb      	ldr	r3, [r7, #28]
   2b43c:	18d3      	adds	r3, r2, r3
   2b43e:	3304      	adds	r3, #4
   2b440:	781b      	ldrb	r3, [r3, #0]
   2b442:	2b00      	cmp	r3, #0
   2b444:	d010      	beq.n	2b468 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2b446:	2317      	movs	r3, #23
   2b448:	18fb      	adds	r3, r7, r3
   2b44a:	781a      	ldrb	r2, [r3, #0]
   2b44c:	69fb      	ldr	r3, [r7, #28]
   2b44e:	429a      	cmp	r2, r3
   2b450:	dc01      	bgt.n	2b456 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2b452:	2317      	movs	r3, #23
   2b454:	e012      	b.n	2b47c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2b456:	2380      	movs	r3, #128	; 0x80
   2b458:	025a      	lsls	r2, r3, #9
   2b45a:	69fb      	ldr	r3, [r7, #28]
   2b45c:	409a      	lsls	r2, r3
   2b45e:	0013      	movs	r3, r2
   2b460:	001a      	movs	r2, r3
   2b462:	69bb      	ldr	r3, [r7, #24]
   2b464:	4313      	orrs	r3, r2
   2b466:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b468:	69fb      	ldr	r3, [r7, #28]
   2b46a:	3301      	adds	r3, #1
   2b46c:	61fb      	str	r3, [r7, #28]
   2b46e:	69fb      	ldr	r3, [r7, #28]
   2b470:	2b03      	cmp	r3, #3
   2b472:	dde1      	ble.n	2b438 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2b474:	687b      	ldr	r3, [r7, #4]
   2b476:	69ba      	ldr	r2, [r7, #24]
   2b478:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2b47a:	2300      	movs	r3, #0
}
   2b47c:	0018      	movs	r0, r3
   2b47e:	46bd      	mov	sp, r7
   2b480:	b008      	add	sp, #32
   2b482:	bd80      	pop	{r7, pc}
   2b484:	0003a528 	.word	0x0003a528

0002b488 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2b488:	b590      	push	{r4, r7, lr}
   2b48a:	b091      	sub	sp, #68	; 0x44
   2b48c:	af00      	add	r7, sp, #0
   2b48e:	60f8      	str	r0, [r7, #12]
   2b490:	60b9      	str	r1, [r7, #8]
   2b492:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2b494:	233b      	movs	r3, #59	; 0x3b
   2b496:	18fc      	adds	r4, r7, r3
   2b498:	68bb      	ldr	r3, [r7, #8]
   2b49a:	0018      	movs	r0, r3
   2b49c:	4bc4      	ldr	r3, [pc, #784]	; (2b7b0 <tcc_init+0x328>)
   2b49e:	4798      	blx	r3
   2b4a0:	0003      	movs	r3, r0
   2b4a2:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2b4a4:	233b      	movs	r3, #59	; 0x3b
   2b4a6:	18fb      	adds	r3, r7, r3
   2b4a8:	781a      	ldrb	r2, [r3, #0]
   2b4aa:	4bc2      	ldr	r3, [pc, #776]	; (2b7b4 <tcc_init+0x32c>)
   2b4ac:	0092      	lsls	r2, r2, #2
   2b4ae:	58d3      	ldr	r3, [r2, r3]
   2b4b0:	0019      	movs	r1, r3
   2b4b2:	2002      	movs	r0, #2
   2b4b4:	4bc0      	ldr	r3, [pc, #768]	; (2b7b8 <tcc_init+0x330>)
   2b4b6:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2b4b8:	68bb      	ldr	r3, [r7, #8]
   2b4ba:	681b      	ldr	r3, [r3, #0]
   2b4bc:	2202      	movs	r2, #2
   2b4be:	4013      	ands	r3, r2
   2b4c0:	d001      	beq.n	2b4c6 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2b4c2:	231c      	movs	r3, #28
   2b4c4:	e1be      	b.n	2b844 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2b4c6:	68bb      	ldr	r3, [r7, #8]
   2b4c8:	681b      	ldr	r3, [r3, #0]
   2b4ca:	2201      	movs	r2, #1
   2b4cc:	4013      	ands	r3, r2
   2b4ce:	d001      	beq.n	2b4d4 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2b4d0:	231c      	movs	r3, #28
   2b4d2:	e1b7      	b.n	2b844 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2b4d4:	233b      	movs	r3, #59	; 0x3b
   2b4d6:	18fb      	adds	r3, r7, r3
   2b4d8:	781a      	ldrb	r2, [r3, #0]
   2b4da:	4bb8      	ldr	r3, [pc, #736]	; (2b7bc <tcc_init+0x334>)
   2b4dc:	0092      	lsls	r2, r2, #2
   2b4de:	58d3      	ldr	r3, [r2, r3]
   2b4e0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2b4e2:	687b      	ldr	r3, [r7, #4]
   2b4e4:	681a      	ldr	r2, [r3, #0]
   2b4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b4e8:	429a      	cmp	r2, r3
   2b4ea:	d804      	bhi.n	2b4f6 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2b4ec:	687b      	ldr	r3, [r7, #4]
   2b4ee:	685a      	ldr	r2, [r3, #4]
   2b4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b4f2:	429a      	cmp	r2, r3
   2b4f4:	d901      	bls.n	2b4fa <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2b4f6:	2317      	movs	r3, #23
   2b4f8:	e1a4      	b.n	2b844 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b4fa:	2300      	movs	r3, #0
   2b4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b4fe:	e00e      	b.n	2b51e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2b500:	687a      	ldr	r2, [r7, #4]
   2b502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b504:	3306      	adds	r3, #6
   2b506:	009b      	lsls	r3, r3, #2
   2b508:	18d3      	adds	r3, r2, r3
   2b50a:	3304      	adds	r3, #4
   2b50c:	681a      	ldr	r2, [r3, #0]
   2b50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b510:	429a      	cmp	r2, r3
   2b512:	d901      	bls.n	2b518 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2b514:	2317      	movs	r3, #23
   2b516:	e195      	b.n	2b844 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b51a:	3301      	adds	r3, #1
   2b51c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b520:	2b03      	cmp	r3, #3
   2b522:	dded      	ble.n	2b500 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b524:	2300      	movs	r3, #0
   2b526:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b528:	e019      	b.n	2b55e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b52a:	687a      	ldr	r2, [r7, #4]
   2b52c:	2198      	movs	r1, #152	; 0x98
   2b52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b530:	18d3      	adds	r3, r2, r3
   2b532:	185b      	adds	r3, r3, r1
   2b534:	781b      	ldrb	r3, [r3, #0]
   2b536:	2201      	movs	r2, #1
   2b538:	4053      	eors	r3, r2
   2b53a:	b2db      	uxtb	r3, r3
   2b53c:	2b00      	cmp	r3, #0
   2b53e:	d10a      	bne.n	2b556 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2b540:	233b      	movs	r3, #59	; 0x3b
   2b542:	18fb      	adds	r3, r7, r3
   2b544:	781b      	ldrb	r3, [r3, #0]
   2b546:	4a9e      	ldr	r2, [pc, #632]	; (2b7c0 <tcc_init+0x338>)
   2b548:	5cd3      	ldrb	r3, [r2, r3]
   2b54a:	001a      	movs	r2, r3
   2b54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b54e:	429a      	cmp	r2, r3
   2b550:	dc02      	bgt.n	2b558 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2b552:	2317      	movs	r3, #23
   2b554:	e176      	b.n	2b844 <tcc_init+0x3bc>
			continue;
   2b556:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b55a:	3301      	adds	r3, #1
   2b55c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b560:	2b07      	cmp	r3, #7
   2b562:	dde2      	ble.n	2b52a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2b564:	2300      	movs	r3, #0
   2b566:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2b568:	2333      	movs	r3, #51	; 0x33
   2b56a:	18fc      	adds	r4, r7, r3
   2b56c:	232c      	movs	r3, #44	; 0x2c
   2b56e:	18fa      	adds	r2, r7, r3
   2b570:	6879      	ldr	r1, [r7, #4]
   2b572:	233b      	movs	r3, #59	; 0x3b
   2b574:	18fb      	adds	r3, r7, r3
   2b576:	781b      	ldrb	r3, [r3, #0]
   2b578:	0018      	movs	r0, r3
   2b57a:	4b92      	ldr	r3, [pc, #584]	; (2b7c4 <tcc_init+0x33c>)
   2b57c:	4798      	blx	r3
   2b57e:	0003      	movs	r3, r0
   2b580:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b582:	2333      	movs	r3, #51	; 0x33
   2b584:	18fb      	adds	r3, r7, r3
   2b586:	781b      	ldrb	r3, [r3, #0]
   2b588:	2b00      	cmp	r3, #0
   2b58a:	d003      	beq.n	2b594 <tcc_init+0x10c>
		return status;
   2b58c:	2333      	movs	r3, #51	; 0x33
   2b58e:	18fb      	adds	r3, r7, r3
   2b590:	781b      	ldrb	r3, [r3, #0]
   2b592:	e157      	b.n	2b844 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2b594:	232b      	movs	r3, #43	; 0x2b
   2b596:	18fa      	adds	r2, r7, r3
   2b598:	6879      	ldr	r1, [r7, #4]
   2b59a:	233b      	movs	r3, #59	; 0x3b
   2b59c:	18fb      	adds	r3, r7, r3
   2b59e:	781b      	ldrb	r3, [r3, #0]
   2b5a0:	0018      	movs	r0, r3
   2b5a2:	4b89      	ldr	r3, [pc, #548]	; (2b7c8 <tcc_init+0x340>)
   2b5a4:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2b5a6:	2333      	movs	r3, #51	; 0x33
   2b5a8:	18fc      	adds	r4, r7, r3
   2b5aa:	2320      	movs	r3, #32
   2b5ac:	18fa      	adds	r2, r7, r3
   2b5ae:	6879      	ldr	r1, [r7, #4]
   2b5b0:	233b      	movs	r3, #59	; 0x3b
   2b5b2:	18fb      	adds	r3, r7, r3
   2b5b4:	781b      	ldrb	r3, [r3, #0]
   2b5b6:	0018      	movs	r0, r3
   2b5b8:	4b84      	ldr	r3, [pc, #528]	; (2b7cc <tcc_init+0x344>)
   2b5ba:	4798      	blx	r3
   2b5bc:	0003      	movs	r3, r0
   2b5be:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b5c0:	2333      	movs	r3, #51	; 0x33
   2b5c2:	18fb      	adds	r3, r7, r3
   2b5c4:	781b      	ldrb	r3, [r3, #0]
   2b5c6:	2b00      	cmp	r3, #0
   2b5c8:	d003      	beq.n	2b5d2 <tcc_init+0x14a>
		return status;
   2b5ca:	2333      	movs	r3, #51	; 0x33
   2b5cc:	18fb      	adds	r3, r7, r3
   2b5ce:	781b      	ldrb	r3, [r3, #0]
   2b5d0:	e138      	b.n	2b844 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2b5d2:	2300      	movs	r3, #0
   2b5d4:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2b5d6:	2333      	movs	r3, #51	; 0x33
   2b5d8:	18fc      	adds	r4, r7, r3
   2b5da:	231c      	movs	r3, #28
   2b5dc:	18fa      	adds	r2, r7, r3
   2b5de:	6879      	ldr	r1, [r7, #4]
   2b5e0:	233b      	movs	r3, #59	; 0x3b
   2b5e2:	18fb      	adds	r3, r7, r3
   2b5e4:	781b      	ldrb	r3, [r3, #0]
   2b5e6:	0018      	movs	r0, r3
   2b5e8:	4b79      	ldr	r3, [pc, #484]	; (2b7d0 <tcc_init+0x348>)
   2b5ea:	4798      	blx	r3
   2b5ec:	0003      	movs	r3, r0
   2b5ee:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b5f0:	2333      	movs	r3, #51	; 0x33
   2b5f2:	18fb      	adds	r3, r7, r3
   2b5f4:	781b      	ldrb	r3, [r3, #0]
   2b5f6:	2b00      	cmp	r3, #0
   2b5f8:	d003      	beq.n	2b602 <tcc_init+0x17a>
		return status;
   2b5fa:	2333      	movs	r3, #51	; 0x33
   2b5fc:	18fb      	adds	r3, r7, r3
   2b5fe:	781b      	ldrb	r3, [r3, #0]
   2b600:	e120      	b.n	2b844 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2b602:	2333      	movs	r3, #51	; 0x33
   2b604:	18fc      	adds	r4, r7, r3
   2b606:	2318      	movs	r3, #24
   2b608:	18fa      	adds	r2, r7, r3
   2b60a:	6879      	ldr	r1, [r7, #4]
   2b60c:	233b      	movs	r3, #59	; 0x3b
   2b60e:	18fb      	adds	r3, r7, r3
   2b610:	781b      	ldrb	r3, [r3, #0]
   2b612:	0018      	movs	r0, r3
   2b614:	4b6f      	ldr	r3, [pc, #444]	; (2b7d4 <tcc_init+0x34c>)
   2b616:	4798      	blx	r3
   2b618:	0003      	movs	r3, r0
   2b61a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b61c:	2333      	movs	r3, #51	; 0x33
   2b61e:	18fb      	adds	r3, r7, r3
   2b620:	781b      	ldrb	r3, [r3, #0]
   2b622:	2b00      	cmp	r3, #0
   2b624:	d003      	beq.n	2b62e <tcc_init+0x1a6>
		return status;
   2b626:	2333      	movs	r3, #51	; 0x33
   2b628:	18fb      	adds	r3, r7, r3
   2b62a:	781b      	ldrb	r3, [r3, #0]
   2b62c:	e10a      	b.n	2b844 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b62e:	2300      	movs	r3, #0
   2b630:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b632:	e009      	b.n	2b648 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2b634:	68fa      	ldr	r2, [r7, #12]
   2b636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b638:	009b      	lsls	r3, r3, #2
   2b63a:	18d3      	adds	r3, r2, r3
   2b63c:	3304      	adds	r3, #4
   2b63e:	2200      	movs	r2, #0
   2b640:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b644:	3301      	adds	r3, #1
   2b646:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b64a:	2b0b      	cmp	r3, #11
   2b64c:	ddf2      	ble.n	2b634 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2b64e:	68fb      	ldr	r3, [r7, #12]
   2b650:	2200      	movs	r2, #0
   2b652:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2b654:	68fb      	ldr	r3, [r7, #12]
   2b656:	2200      	movs	r2, #0
   2b658:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2b65a:	233b      	movs	r3, #59	; 0x3b
   2b65c:	18fb      	adds	r3, r7, r3
   2b65e:	781a      	ldrb	r2, [r3, #0]
   2b660:	4b5d      	ldr	r3, [pc, #372]	; (2b7d8 <tcc_init+0x350>)
   2b662:	0092      	lsls	r2, r2, #2
   2b664:	68f9      	ldr	r1, [r7, #12]
   2b666:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2b668:	68fb      	ldr	r3, [r7, #12]
   2b66a:	68ba      	ldr	r2, [r7, #8]
   2b66c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2b66e:	687b      	ldr	r3, [r7, #4]
   2b670:	22a0      	movs	r2, #160	; 0xa0
   2b672:	5c99      	ldrb	r1, [r3, r2]
   2b674:	68fb      	ldr	r3, [r7, #12]
   2b676:	223c      	movs	r2, #60	; 0x3c
   2b678:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2b67a:	2314      	movs	r3, #20
   2b67c:	18fb      	adds	r3, r7, r3
   2b67e:	0018      	movs	r0, r3
   2b680:	4b56      	ldr	r3, [pc, #344]	; (2b7dc <tcc_init+0x354>)
   2b682:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2b684:	687b      	ldr	r3, [r7, #4]
   2b686:	7a9a      	ldrb	r2, [r3, #10]
   2b688:	2314      	movs	r3, #20
   2b68a:	18fb      	adds	r3, r7, r3
   2b68c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2b68e:	233b      	movs	r3, #59	; 0x3b
   2b690:	18fb      	adds	r3, r7, r3
   2b692:	781b      	ldrb	r3, [r3, #0]
   2b694:	4a52      	ldr	r2, [pc, #328]	; (2b7e0 <tcc_init+0x358>)
   2b696:	5cd3      	ldrb	r3, [r2, r3]
   2b698:	2214      	movs	r2, #20
   2b69a:	18ba      	adds	r2, r7, r2
   2b69c:	0011      	movs	r1, r2
   2b69e:	0018      	movs	r0, r3
   2b6a0:	4b50      	ldr	r3, [pc, #320]	; (2b7e4 <tcc_init+0x35c>)
   2b6a2:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2b6a4:	233b      	movs	r3, #59	; 0x3b
   2b6a6:	18fb      	adds	r3, r7, r3
   2b6a8:	781b      	ldrb	r3, [r3, #0]
   2b6aa:	4a4d      	ldr	r2, [pc, #308]	; (2b7e0 <tcc_init+0x358>)
   2b6ac:	5cd3      	ldrb	r3, [r2, r3]
   2b6ae:	0018      	movs	r0, r3
   2b6b0:	4b4d      	ldr	r3, [pc, #308]	; (2b7e8 <tcc_init+0x360>)
   2b6b2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b6b4:	2300      	movs	r3, #0
   2b6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b6b8:	e02d      	b.n	2b716 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b6ba:	687a      	ldr	r2, [r7, #4]
   2b6bc:	2198      	movs	r1, #152	; 0x98
   2b6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b6c0:	18d3      	adds	r3, r2, r3
   2b6c2:	185b      	adds	r3, r3, r1
   2b6c4:	781b      	ldrb	r3, [r3, #0]
   2b6c6:	2201      	movs	r2, #1
   2b6c8:	4053      	eors	r3, r2
   2b6ca:	b2db      	uxtb	r3, r3
   2b6cc:	2b00      	cmp	r3, #0
   2b6ce:	d11e      	bne.n	2b70e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2b6d0:	2310      	movs	r3, #16
   2b6d2:	18fb      	adds	r3, r7, r3
   2b6d4:	0018      	movs	r0, r3
   2b6d6:	4b45      	ldr	r3, [pc, #276]	; (2b7ec <tcc_init+0x364>)
   2b6d8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2b6da:	687b      	ldr	r3, [r7, #4]
   2b6dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b6de:	321e      	adds	r2, #30
   2b6e0:	0092      	lsls	r2, r2, #2
   2b6e2:	58d3      	ldr	r3, [r2, r3]
   2b6e4:	b2da      	uxtb	r2, r3
   2b6e6:	2310      	movs	r3, #16
   2b6e8:	18fb      	adds	r3, r7, r3
   2b6ea:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2b6ec:	2310      	movs	r3, #16
   2b6ee:	18fb      	adds	r3, r7, r3
   2b6f0:	2201      	movs	r2, #1
   2b6f2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2b6f4:	687b      	ldr	r3, [r7, #4]
   2b6f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b6f8:	3216      	adds	r2, #22
   2b6fa:	0092      	lsls	r2, r2, #2
   2b6fc:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2b6fe:	b2db      	uxtb	r3, r3
   2b700:	2210      	movs	r2, #16
   2b702:	18ba      	adds	r2, r7, r2
   2b704:	0011      	movs	r1, r2
   2b706:	0018      	movs	r0, r3
   2b708:	4b39      	ldr	r3, [pc, #228]	; (2b7f0 <tcc_init+0x368>)
   2b70a:	4798      	blx	r3
   2b70c:	e000      	b.n	2b710 <tcc_init+0x288>
			continue;
   2b70e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b712:	3301      	adds	r3, #1
   2b714:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b716:	233b      	movs	r3, #59	; 0x3b
   2b718:	18fb      	adds	r3, r7, r3
   2b71a:	781b      	ldrb	r3, [r3, #0]
   2b71c:	4a28      	ldr	r2, [pc, #160]	; (2b7c0 <tcc_init+0x338>)
   2b71e:	5cd3      	ldrb	r3, [r2, r3]
   2b720:	001a      	movs	r2, r3
   2b722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b724:	429a      	cmp	r2, r3
   2b726:	dcc8      	bgt.n	2b6ba <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2b728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2b72a:	68bb      	ldr	r3, [r7, #8]
   2b72c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b72e:	46c0      	nop			; (mov r8, r8)
   2b730:	68bb      	ldr	r3, [r7, #8]
   2b732:	689b      	ldr	r3, [r3, #8]
   2b734:	2204      	movs	r2, #4
   2b736:	4013      	ands	r3, r2
   2b738:	d1fa      	bne.n	2b730 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2b73a:	68bb      	ldr	r3, [r7, #8]
   2b73c:	22ff      	movs	r2, #255	; 0xff
   2b73e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b740:	46c0      	nop			; (mov r8, r8)
   2b742:	68bb      	ldr	r3, [r7, #8]
   2b744:	689b      	ldr	r3, [r3, #8]
   2b746:	2204      	movs	r2, #4
   2b748:	4013      	ands	r3, r2
   2b74a:	d1fa      	bne.n	2b742 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2b74c:	232b      	movs	r3, #43	; 0x2b
   2b74e:	18fb      	adds	r3, r7, r3
   2b750:	781a      	ldrb	r2, [r3, #0]
   2b752:	68bb      	ldr	r3, [r7, #8]
   2b754:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2b756:	2320      	movs	r3, #32
   2b758:	18fb      	adds	r3, r7, r3
   2b75a:	681a      	ldr	r2, [r3, #0]
   2b75c:	68bb      	ldr	r3, [r7, #8]
   2b75e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2b760:	2320      	movs	r3, #32
   2b762:	18fb      	adds	r3, r7, r3
   2b764:	685a      	ldr	r2, [r3, #4]
   2b766:	68bb      	ldr	r3, [r7, #8]
   2b768:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2b76a:	69fa      	ldr	r2, [r7, #28]
   2b76c:	68bb      	ldr	r3, [r7, #8]
   2b76e:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2b770:	46c0      	nop			; (mov r8, r8)
   2b772:	68bb      	ldr	r3, [r7, #8]
   2b774:	689b      	ldr	r3, [r3, #8]
   2b776:	4a1f      	ldr	r2, [pc, #124]	; (2b7f4 <tcc_init+0x36c>)
   2b778:	4013      	ands	r3, r2
   2b77a:	d1fa      	bne.n	2b772 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2b77c:	69ba      	ldr	r2, [r7, #24]
   2b77e:	68bb      	ldr	r3, [r7, #8]
   2b780:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2b782:	46c0      	nop			; (mov r8, r8)
   2b784:	68bb      	ldr	r3, [r7, #8]
   2b786:	689b      	ldr	r3, [r3, #8]
   2b788:	2210      	movs	r2, #16
   2b78a:	4013      	ands	r3, r2
   2b78c:	d1fa      	bne.n	2b784 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2b78e:	687b      	ldr	r3, [r7, #4]
   2b790:	681a      	ldr	r2, [r3, #0]
   2b792:	68bb      	ldr	r3, [r7, #8]
   2b794:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2b796:	46c0      	nop			; (mov r8, r8)
   2b798:	68bb      	ldr	r3, [r7, #8]
   2b79a:	689b      	ldr	r3, [r3, #8]
   2b79c:	4a16      	ldr	r2, [pc, #88]	; (2b7f8 <tcc_init+0x370>)
   2b79e:	4013      	ands	r3, r2
   2b7a0:	d1fa      	bne.n	2b798 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2b7a2:	687b      	ldr	r3, [r7, #4]
   2b7a4:	685a      	ldr	r2, [r3, #4]
   2b7a6:	68bb      	ldr	r3, [r7, #8]
   2b7a8:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b7aa:	2300      	movs	r3, #0
   2b7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b7ae:	e03f      	b.n	2b830 <tcc_init+0x3a8>
   2b7b0:	0002adf1 	.word	0x0002adf1
   2b7b4:	0003a510 	.word	0x0003a510
   2b7b8:	0002ad6d 	.word	0x0002ad6d
   2b7bc:	0003a51c 	.word	0x0003a51c
   2b7c0:	0003a52c 	.word	0x0003a52c
   2b7c4:	0002b0fd 	.word	0x0002b0fd
   2b7c8:	0002b1a1 	.word	0x0002b1a1
   2b7cc:	0002b1fd 	.word	0x0002b1fd
   2b7d0:	0002b319 	.word	0x0002b319
   2b7d4:	0002b3f1 	.word	0x0002b3f1
   2b7d8:	20005cb8 	.word	0x20005cb8
   2b7dc:	0002ad55 	.word	0x0002ad55
   2b7e0:	0003a50c 	.word	0x0003a50c
   2b7e4:	0002a96d 	.word	0x0002a96d
   2b7e8:	0002a9b1 	.word	0x0002a9b1
   2b7ec:	0002adc9 	.word	0x0002adc9
   2b7f0:	0002accd 	.word	0x0002accd
   2b7f4:	00020040 	.word	0x00020040
   2b7f8:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2b7fc:	46c0      	nop			; (mov r8, r8)
   2b7fe:	68bb      	ldr	r3, [r7, #8]
   2b800:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2b802:	4912      	ldr	r1, [pc, #72]	; (2b84c <tcc_init+0x3c4>)
   2b804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b806:	4091      	lsls	r1, r2
   2b808:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2b80a:	4013      	ands	r3, r2
   2b80c:	d1f7      	bne.n	2b7fe <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2b80e:	687a      	ldr	r2, [r7, #4]
   2b810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b812:	3306      	adds	r3, #6
   2b814:	009b      	lsls	r3, r3, #2
   2b816:	18d3      	adds	r3, r2, r3
   2b818:	3304      	adds	r3, #4
   2b81a:	681a      	ldr	r2, [r3, #0]
   2b81c:	68b9      	ldr	r1, [r7, #8]
   2b81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b820:	3310      	adds	r3, #16
   2b822:	009b      	lsls	r3, r3, #2
   2b824:	18cb      	adds	r3, r1, r3
   2b826:	3304      	adds	r3, #4
   2b828:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b82c:	3301      	adds	r3, #1
   2b82e:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b830:	233b      	movs	r3, #59	; 0x3b
   2b832:	18fb      	adds	r3, r7, r3
   2b834:	781b      	ldrb	r3, [r3, #0]
   2b836:	4a06      	ldr	r2, [pc, #24]	; (2b850 <tcc_init+0x3c8>)
   2b838:	5cd3      	ldrb	r3, [r2, r3]
   2b83a:	001a      	movs	r2, r3
   2b83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b83e:	429a      	cmp	r2, r3
   2b840:	dcdc      	bgt.n	2b7fc <tcc_init+0x374>
	}

	return STATUS_OK;
   2b842:	2300      	movs	r3, #0
}
   2b844:	0018      	movs	r0, r3
   2b846:	46bd      	mov	sp, r7
   2b848:	b011      	add	sp, #68	; 0x44
   2b84a:	bd90      	pop	{r4, r7, pc}
   2b84c:	00080100 	.word	0x00080100
   2b850:	0003a528 	.word	0x0003a528

0002b854 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
   2b854:	b590      	push	{r4, r7, lr}
   2b856:	b089      	sub	sp, #36	; 0x24
   2b858:	af00      	add	r7, sp, #0
   2b85a:	60f8      	str	r0, [r7, #12]
   2b85c:	0008      	movs	r0, r1
   2b85e:	607a      	str	r2, [r7, #4]
   2b860:	0019      	movs	r1, r3
   2b862:	230b      	movs	r3, #11
   2b864:	18fb      	adds	r3, r7, r3
   2b866:	1c02      	adds	r2, r0, #0
   2b868:	701a      	strb	r2, [r3, #0]
   2b86a:	230a      	movs	r3, #10
   2b86c:	18fb      	adds	r3, r7, r3
   2b86e:	1c0a      	adds	r2, r1, #0
   2b870:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   2b872:	68fb      	ldr	r3, [r7, #12]
   2b874:	681b      	ldr	r3, [r3, #0]
   2b876:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
   2b878:	231b      	movs	r3, #27
   2b87a:	18fc      	adds	r4, r7, r3
   2b87c:	69fb      	ldr	r3, [r7, #28]
   2b87e:	0018      	movs	r0, r3
   2b880:	4b2e      	ldr	r3, [pc, #184]	; (2b93c <_tcc_set_compare_value+0xe8>)
   2b882:	4798      	blx	r3
   2b884:	0003      	movs	r3, r0
   2b886:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
   2b888:	231b      	movs	r3, #27
   2b88a:	18fb      	adds	r3, r7, r3
   2b88c:	781b      	ldrb	r3, [r3, #0]
   2b88e:	4a2c      	ldr	r2, [pc, #176]	; (2b940 <_tcc_set_compare_value+0xec>)
   2b890:	5cd3      	ldrb	r3, [r2, r3]
   2b892:	220b      	movs	r2, #11
   2b894:	18ba      	adds	r2, r7, r2
   2b896:	7812      	ldrb	r2, [r2, #0]
   2b898:	429a      	cmp	r2, r3
   2b89a:	d301      	bcc.n	2b8a0 <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
   2b89c:	2317      	movs	r3, #23
   2b89e:	e049      	b.n	2b934 <_tcc_set_compare_value+0xe0>
	}

	uint32_t max_count = _tcc_maxs[module_index];
   2b8a0:	231b      	movs	r3, #27
   2b8a2:	18fb      	adds	r3, r7, r3
   2b8a4:	781a      	ldrb	r2, [r3, #0]
   2b8a6:	4b27      	ldr	r3, [pc, #156]	; (2b944 <_tcc_set_compare_value+0xf0>)
   2b8a8:	0092      	lsls	r2, r2, #2
   2b8aa:	58d3      	ldr	r3, [r2, r3]
   2b8ac:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
   2b8ae:	687a      	ldr	r2, [r7, #4]
   2b8b0:	697b      	ldr	r3, [r7, #20]
   2b8b2:	429a      	cmp	r2, r3
   2b8b4:	d901      	bls.n	2b8ba <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
   2b8b6:	2317      	movs	r3, #23
   2b8b8:	e03c      	b.n	2b934 <_tcc_set_compare_value+0xe0>
	}

	if (double_buffering_enabled) {
   2b8ba:	230a      	movs	r3, #10
   2b8bc:	18fb      	adds	r3, r7, r3
   2b8be:	781b      	ldrb	r3, [r3, #0]
   2b8c0:	2b00      	cmp	r3, #0
   2b8c2:	d020      	beq.n	2b906 <_tcc_set_compare_value+0xb2>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
   2b8c4:	46c0      	nop			; (mov r8, r8)
   2b8c6:	69fb      	ldr	r3, [r7, #28]
   2b8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				(TCC_STATUS_CCBV0 << channel_index)) {
   2b8ca:	220b      	movs	r2, #11
   2b8cc:	18ba      	adds	r2, r7, r2
   2b8ce:	7812      	ldrb	r2, [r2, #0]
   2b8d0:	2180      	movs	r1, #128	; 0x80
   2b8d2:	0249      	lsls	r1, r1, #9
   2b8d4:	4091      	lsls	r1, r2
   2b8d6:	000a      	movs	r2, r1
		while(tcc_module->STATUS.reg  &
   2b8d8:	4013      	ands	r3, r2
   2b8da:	d1f4      	bne.n	2b8c6 <_tcc_set_compare_value+0x72>
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
   2b8dc:	46c0      	nop			; (mov r8, r8)
   2b8de:	69fb      	ldr	r3, [r7, #28]
   2b8e0:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
   2b8e2:	220b      	movs	r2, #11
   2b8e4:	18ba      	adds	r2, r7, r2
   2b8e6:	7812      	ldrb	r2, [r2, #0]
   2b8e8:	2180      	movs	r1, #128	; 0x80
   2b8ea:	0309      	lsls	r1, r1, #12
   2b8ec:	4091      	lsls	r1, r2
   2b8ee:	000a      	movs	r2, r1
		while(tcc_module->SYNCBUSY.reg  &
   2b8f0:	4013      	ands	r3, r2
   2b8f2:	d1f4      	bne.n	2b8de <_tcc_set_compare_value+0x8a>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
   2b8f4:	230b      	movs	r3, #11
   2b8f6:	18fb      	adds	r3, r7, r3
   2b8f8:	781a      	ldrb	r2, [r3, #0]
   2b8fa:	69fb      	ldr	r3, [r7, #28]
   2b8fc:	321c      	adds	r2, #28
   2b8fe:	0092      	lsls	r2, r2, #2
   2b900:	6879      	ldr	r1, [r7, #4]
   2b902:	50d1      	str	r1, [r2, r3]
   2b904:	e015      	b.n	2b932 <_tcc_set_compare_value+0xde>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
   2b906:	46c0      	nop			; (mov r8, r8)
   2b908:	69fb      	ldr	r3, [r7, #28]
   2b90a:	689b      	ldr	r3, [r3, #8]
   2b90c:	220b      	movs	r2, #11
   2b90e:	18ba      	adds	r2, r7, r2
   2b910:	7812      	ldrb	r2, [r2, #0]
   2b912:	2180      	movs	r1, #128	; 0x80
   2b914:	0049      	lsls	r1, r1, #1
   2b916:	4091      	lsls	r1, r2
   2b918:	000a      	movs	r2, r1
   2b91a:	4013      	ands	r3, r2
   2b91c:	d1f4      	bne.n	2b908 <_tcc_set_compare_value+0xb4>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
   2b91e:	230b      	movs	r3, #11
   2b920:	18fb      	adds	r3, r7, r3
   2b922:	781b      	ldrb	r3, [r3, #0]
   2b924:	69fa      	ldr	r2, [r7, #28]
   2b926:	3310      	adds	r3, #16
   2b928:	009b      	lsls	r3, r3, #2
   2b92a:	18d3      	adds	r3, r2, r3
   2b92c:	3304      	adds	r3, #4
   2b92e:	687a      	ldr	r2, [r7, #4]
   2b930:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
   2b932:	2300      	movs	r3, #0
}
   2b934:	0018      	movs	r0, r3
   2b936:	46bd      	mov	sp, r7
   2b938:	b009      	add	sp, #36	; 0x24
   2b93a:	bd90      	pop	{r4, r7, pc}
   2b93c:	0002adf1 	.word	0x0002adf1
   2b940:	0003a528 	.word	0x0003a528
   2b944:	0003a51c 	.word	0x0003a51c

0002b948 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
   2b948:	b590      	push	{r4, r7, lr}
   2b94a:	b085      	sub	sp, #20
   2b94c:	af00      	add	r7, sp, #0
   2b94e:	60f8      	str	r0, [r7, #12]
   2b950:	607a      	str	r2, [r7, #4]
   2b952:	230b      	movs	r3, #11
   2b954:	18fb      	adds	r3, r7, r3
   2b956:	1c0a      	adds	r2, r1, #0
   2b958:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
   2b95a:	68fb      	ldr	r3, [r7, #12]
   2b95c:	223c      	movs	r2, #60	; 0x3c
   2b95e:	5c9c      	ldrb	r4, [r3, r2]
   2b960:	687a      	ldr	r2, [r7, #4]
   2b962:	230b      	movs	r3, #11
   2b964:	18fb      	adds	r3, r7, r3
   2b966:	7819      	ldrb	r1, [r3, #0]
   2b968:	68f8      	ldr	r0, [r7, #12]
   2b96a:	0023      	movs	r3, r4
   2b96c:	4c03      	ldr	r4, [pc, #12]	; (2b97c <tcc_set_compare_value+0x34>)
   2b96e:	47a0      	blx	r4
   2b970:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
   2b972:	0018      	movs	r0, r3
   2b974:	46bd      	mov	sp, r7
   2b976:	b005      	add	sp, #20
   2b978:	bd90      	pop	{r4, r7, pc}
   2b97a:	46c0      	nop			; (mov r8, r8)
   2b97c:	0002b855 	.word	0x0002b855

0002b980 <system_interrupt_enable>:
{
   2b980:	b580      	push	{r7, lr}
   2b982:	b082      	sub	sp, #8
   2b984:	af00      	add	r7, sp, #0
   2b986:	0002      	movs	r2, r0
   2b988:	1dfb      	adds	r3, r7, #7
   2b98a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2b98c:	4b06      	ldr	r3, [pc, #24]	; (2b9a8 <system_interrupt_enable+0x28>)
   2b98e:	1dfa      	adds	r2, r7, #7
   2b990:	7812      	ldrb	r2, [r2, #0]
   2b992:	0011      	movs	r1, r2
   2b994:	221f      	movs	r2, #31
   2b996:	400a      	ands	r2, r1
   2b998:	2101      	movs	r1, #1
   2b99a:	4091      	lsls	r1, r2
   2b99c:	000a      	movs	r2, r1
   2b99e:	601a      	str	r2, [r3, #0]
}
   2b9a0:	46c0      	nop			; (mov r8, r8)
   2b9a2:	46bd      	mov	sp, r7
   2b9a4:	b002      	add	sp, #8
   2b9a6:	bd80      	pop	{r7, pc}
   2b9a8:	e000e100 	.word	0xe000e100

0002b9ac <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2b9ac:	b580      	push	{r7, lr}
   2b9ae:	b082      	sub	sp, #8
   2b9b0:	af00      	add	r7, sp, #0
   2b9b2:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2b9b4:	4a04      	ldr	r2, [pc, #16]	; (2b9c8 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2b9b6:	687b      	ldr	r3, [r7, #4]
   2b9b8:	18d3      	adds	r3, r2, r3
   2b9ba:	781b      	ldrb	r3, [r3, #0]
   2b9bc:	b25b      	sxtb	r3, r3
}
   2b9be:	0018      	movs	r0, r3
   2b9c0:	46bd      	mov	sp, r7
   2b9c2:	b002      	add	sp, #8
   2b9c4:	bd80      	pop	{r7, pc}
   2b9c6:	46c0      	nop			; (mov r8, r8)
   2b9c8:	20000128 	.word	0x20000128

0002b9cc <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2b9cc:	b580      	push	{r7, lr}
   2b9ce:	b084      	sub	sp, #16
   2b9d0:	af00      	add	r7, sp, #0
   2b9d2:	60f8      	str	r0, [r7, #12]
   2b9d4:	60b9      	str	r1, [r7, #8]
   2b9d6:	1dfb      	adds	r3, r7, #7
   2b9d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2b9da:	1dfb      	adds	r3, r7, #7
   2b9dc:	781b      	ldrb	r3, [r3, #0]
   2b9de:	68fa      	ldr	r2, [r7, #12]
   2b9e0:	009b      	lsls	r3, r3, #2
   2b9e2:	18d3      	adds	r3, r2, r3
   2b9e4:	3304      	adds	r3, #4
   2b9e6:	68ba      	ldr	r2, [r7, #8]
   2b9e8:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2b9ea:	68fb      	ldr	r3, [r7, #12]
   2b9ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2b9ee:	1dfb      	adds	r3, r7, #7
   2b9f0:	7819      	ldrb	r1, [r3, #0]
   2b9f2:	4b05      	ldr	r3, [pc, #20]	; (2ba08 <tcc_register_callback+0x3c>)
   2b9f4:	0089      	lsls	r1, r1, #2
   2b9f6:	58cb      	ldr	r3, [r1, r3]
   2b9f8:	431a      	orrs	r2, r3
   2b9fa:	68fb      	ldr	r3, [r7, #12]
   2b9fc:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2b9fe:	2300      	movs	r3, #0
}
   2ba00:	0018      	movs	r0, r3
   2ba02:	46bd      	mov	sp, r7
   2ba04:	b004      	add	sp, #16
   2ba06:	bd80      	pop	{r7, pc}
   2ba08:	0003a530 	.word	0x0003a530

0002ba0c <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2ba0c:	b580      	push	{r7, lr}
   2ba0e:	b082      	sub	sp, #8
   2ba10:	af00      	add	r7, sp, #0
   2ba12:	6078      	str	r0, [r7, #4]
   2ba14:	000a      	movs	r2, r1
   2ba16:	1cfb      	adds	r3, r7, #3
   2ba18:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2ba1a:	687b      	ldr	r3, [r7, #4]
   2ba1c:	681b      	ldr	r3, [r3, #0]
   2ba1e:	0018      	movs	r0, r3
   2ba20:	4b0f      	ldr	r3, [pc, #60]	; (2ba60 <tcc_enable_callback+0x54>)
   2ba22:	4798      	blx	r3
   2ba24:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2ba26:	0018      	movs	r0, r3
   2ba28:	4b0e      	ldr	r3, [pc, #56]	; (2ba64 <tcc_enable_callback+0x58>)
   2ba2a:	4798      	blx	r3
   2ba2c:	0003      	movs	r3, r0
   2ba2e:	0018      	movs	r0, r3
   2ba30:	4b0d      	ldr	r3, [pc, #52]	; (2ba68 <tcc_enable_callback+0x5c>)
   2ba32:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2ba34:	687b      	ldr	r3, [r7, #4]
   2ba36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2ba38:	1cfb      	adds	r3, r7, #3
   2ba3a:	7819      	ldrb	r1, [r3, #0]
   2ba3c:	4b0b      	ldr	r3, [pc, #44]	; (2ba6c <tcc_enable_callback+0x60>)
   2ba3e:	0089      	lsls	r1, r1, #2
   2ba40:	58cb      	ldr	r3, [r1, r3]
   2ba42:	431a      	orrs	r2, r3
   2ba44:	687b      	ldr	r3, [r7, #4]
   2ba46:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2ba48:	687b      	ldr	r3, [r7, #4]
   2ba4a:	681b      	ldr	r3, [r3, #0]
   2ba4c:	1cfa      	adds	r2, r7, #3
   2ba4e:	7811      	ldrb	r1, [r2, #0]
   2ba50:	4a06      	ldr	r2, [pc, #24]	; (2ba6c <tcc_enable_callback+0x60>)
   2ba52:	0089      	lsls	r1, r1, #2
   2ba54:	588a      	ldr	r2, [r1, r2]
   2ba56:	629a      	str	r2, [r3, #40]	; 0x28
}
   2ba58:	46c0      	nop			; (mov r8, r8)
   2ba5a:	46bd      	mov	sp, r7
   2ba5c:	b002      	add	sp, #8
   2ba5e:	bd80      	pop	{r7, pc}
   2ba60:	0002adf1 	.word	0x0002adf1
   2ba64:	0002b9ad 	.word	0x0002b9ad
   2ba68:	0002b981 	.word	0x0002b981
   2ba6c:	0003a530 	.word	0x0003a530

0002ba70 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2ba70:	b580      	push	{r7, lr}
   2ba72:	af00      	add	r7, sp, #0
   2ba74:	2000      	movs	r0, #0
   2ba76:	4b02      	ldr	r3, [pc, #8]	; (2ba80 <TCC0_Handler+0x10>)
   2ba78:	4798      	blx	r3
   2ba7a:	46c0      	nop			; (mov r8, r8)
   2ba7c:	46bd      	mov	sp, r7
   2ba7e:	bd80      	pop	{r7, pc}
   2ba80:	0002baad 	.word	0x0002baad

0002ba84 <TCC1_Handler>:
   2ba84:	b580      	push	{r7, lr}
   2ba86:	af00      	add	r7, sp, #0
   2ba88:	2001      	movs	r0, #1
   2ba8a:	4b02      	ldr	r3, [pc, #8]	; (2ba94 <TCC1_Handler+0x10>)
   2ba8c:	4798      	blx	r3
   2ba8e:	46c0      	nop			; (mov r8, r8)
   2ba90:	46bd      	mov	sp, r7
   2ba92:	bd80      	pop	{r7, pc}
   2ba94:	0002baad 	.word	0x0002baad

0002ba98 <TCC2_Handler>:
   2ba98:	b580      	push	{r7, lr}
   2ba9a:	af00      	add	r7, sp, #0
   2ba9c:	2002      	movs	r0, #2
   2ba9e:	4b02      	ldr	r3, [pc, #8]	; (2baa8 <TCC2_Handler+0x10>)
   2baa0:	4798      	blx	r3
   2baa2:	46c0      	nop			; (mov r8, r8)
   2baa4:	46bd      	mov	sp, r7
   2baa6:	bd80      	pop	{r7, pc}
   2baa8:	0002baad 	.word	0x0002baad

0002baac <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2baac:	b580      	push	{r7, lr}
   2baae:	b086      	sub	sp, #24
   2bab0:	af00      	add	r7, sp, #0
   2bab2:	0002      	movs	r2, r0
   2bab4:	1dfb      	adds	r3, r7, #7
   2bab6:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2bab8:	1dfb      	adds	r3, r7, #7
   2baba:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2babc:	4b18      	ldr	r3, [pc, #96]	; (2bb20 <_tcc_interrupt_handler+0x74>)
   2babe:	0092      	lsls	r2, r2, #2
   2bac0:	58d3      	ldr	r3, [r2, r3]
   2bac2:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bac4:	693b      	ldr	r3, [r7, #16]
   2bac6:	681b      	ldr	r3, [r3, #0]
   2bac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2baca:	693b      	ldr	r3, [r7, #16]
   2bacc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bace:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2bad0:	693b      	ldr	r3, [r7, #16]
   2bad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bad4:	4013      	ands	r3, r2
   2bad6:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bad8:	2300      	movs	r3, #0
   2bada:	617b      	str	r3, [r7, #20]
   2badc:	e019      	b.n	2bb12 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2bade:	4b11      	ldr	r3, [pc, #68]	; (2bb24 <_tcc_interrupt_handler+0x78>)
   2bae0:	697a      	ldr	r2, [r7, #20]
   2bae2:	0092      	lsls	r2, r2, #2
   2bae4:	58d3      	ldr	r3, [r2, r3]
   2bae6:	68fa      	ldr	r2, [r7, #12]
   2bae8:	4013      	ands	r3, r2
   2baea:	d00f      	beq.n	2bb0c <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2baec:	693a      	ldr	r2, [r7, #16]
   2baee:	697b      	ldr	r3, [r7, #20]
   2baf0:	009b      	lsls	r3, r3, #2
   2baf2:	18d3      	adds	r3, r2, r3
   2baf4:	3304      	adds	r3, #4
   2baf6:	681b      	ldr	r3, [r3, #0]
   2baf8:	693a      	ldr	r2, [r7, #16]
   2bafa:	0010      	movs	r0, r2
   2bafc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2bafe:	693b      	ldr	r3, [r7, #16]
   2bb00:	681b      	ldr	r3, [r3, #0]
   2bb02:	4a08      	ldr	r2, [pc, #32]	; (2bb24 <_tcc_interrupt_handler+0x78>)
   2bb04:	6979      	ldr	r1, [r7, #20]
   2bb06:	0089      	lsls	r1, r1, #2
   2bb08:	588a      	ldr	r2, [r1, r2]
   2bb0a:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bb0c:	697b      	ldr	r3, [r7, #20]
   2bb0e:	3301      	adds	r3, #1
   2bb10:	617b      	str	r3, [r7, #20]
   2bb12:	697b      	ldr	r3, [r7, #20]
   2bb14:	2b0b      	cmp	r3, #11
   2bb16:	dde2      	ble.n	2bade <_tcc_interrupt_handler+0x32>
		}
	}
}
   2bb18:	46c0      	nop			; (mov r8, r8)
   2bb1a:	46bd      	mov	sp, r7
   2bb1c:	b006      	add	sp, #24
   2bb1e:	bd80      	pop	{r7, pc}
   2bb20:	20005cb8 	.word	0x20005cb8
   2bb24:	0003a530 	.word	0x0003a530

0002bb28 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2bb28:	b580      	push	{r7, lr}
   2bb2a:	b082      	sub	sp, #8
   2bb2c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2bb2e:	4b2f      	ldr	r3, [pc, #188]	; (2bbec <Reset_Handler+0xc4>)
   2bb30:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2bb32:	4b2f      	ldr	r3, [pc, #188]	; (2bbf0 <Reset_Handler+0xc8>)
   2bb34:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2bb36:	687a      	ldr	r2, [r7, #4]
   2bb38:	683b      	ldr	r3, [r7, #0]
   2bb3a:	429a      	cmp	r2, r3
   2bb3c:	d00c      	beq.n	2bb58 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2bb3e:	e007      	b.n	2bb50 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2bb40:	683b      	ldr	r3, [r7, #0]
   2bb42:	1d1a      	adds	r2, r3, #4
   2bb44:	603a      	str	r2, [r7, #0]
   2bb46:	687a      	ldr	r2, [r7, #4]
   2bb48:	1d11      	adds	r1, r2, #4
   2bb4a:	6079      	str	r1, [r7, #4]
   2bb4c:	6812      	ldr	r2, [r2, #0]
   2bb4e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2bb50:	683a      	ldr	r2, [r7, #0]
   2bb52:	4b28      	ldr	r3, [pc, #160]	; (2bbf4 <Reset_Handler+0xcc>)
   2bb54:	429a      	cmp	r2, r3
   2bb56:	d3f3      	bcc.n	2bb40 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2bb58:	4b27      	ldr	r3, [pc, #156]	; (2bbf8 <Reset_Handler+0xd0>)
   2bb5a:	603b      	str	r3, [r7, #0]
   2bb5c:	e004      	b.n	2bb68 <Reset_Handler+0x40>
                *pDest++ = 0;
   2bb5e:	683b      	ldr	r3, [r7, #0]
   2bb60:	1d1a      	adds	r2, r3, #4
   2bb62:	603a      	str	r2, [r7, #0]
   2bb64:	2200      	movs	r2, #0
   2bb66:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2bb68:	683a      	ldr	r2, [r7, #0]
   2bb6a:	4b24      	ldr	r3, [pc, #144]	; (2bbfc <Reset_Handler+0xd4>)
   2bb6c:	429a      	cmp	r2, r3
   2bb6e:	d3f6      	bcc.n	2bb5e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2bb70:	4b23      	ldr	r3, [pc, #140]	; (2bc00 <Reset_Handler+0xd8>)
   2bb72:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2bb74:	4b23      	ldr	r3, [pc, #140]	; (2bc04 <Reset_Handler+0xdc>)
   2bb76:	687a      	ldr	r2, [r7, #4]
   2bb78:	21ff      	movs	r1, #255	; 0xff
   2bb7a:	438a      	bics	r2, r1
   2bb7c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2bb7e:	4a22      	ldr	r2, [pc, #136]	; (2bc08 <Reset_Handler+0xe0>)
   2bb80:	2390      	movs	r3, #144	; 0x90
   2bb82:	005b      	lsls	r3, r3, #1
   2bb84:	2102      	movs	r1, #2
   2bb86:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2bb88:	4a20      	ldr	r2, [pc, #128]	; (2bc0c <Reset_Handler+0xe4>)
   2bb8a:	78d3      	ldrb	r3, [r2, #3]
   2bb8c:	2103      	movs	r1, #3
   2bb8e:	438b      	bics	r3, r1
   2bb90:	1c19      	adds	r1, r3, #0
   2bb92:	2302      	movs	r3, #2
   2bb94:	430b      	orrs	r3, r1
   2bb96:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2bb98:	4a1c      	ldr	r2, [pc, #112]	; (2bc0c <Reset_Handler+0xe4>)
   2bb9a:	78d3      	ldrb	r3, [r2, #3]
   2bb9c:	210c      	movs	r1, #12
   2bb9e:	438b      	bics	r3, r1
   2bba0:	1c19      	adds	r1, r3, #0
   2bba2:	2308      	movs	r3, #8
   2bba4:	430b      	orrs	r3, r1
   2bba6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2bba8:	4a19      	ldr	r2, [pc, #100]	; (2bc10 <Reset_Handler+0xe8>)
   2bbaa:	7b93      	ldrb	r3, [r2, #14]
   2bbac:	2130      	movs	r1, #48	; 0x30
   2bbae:	438b      	bics	r3, r1
   2bbb0:	1c19      	adds	r1, r3, #0
   2bbb2:	2320      	movs	r3, #32
   2bbb4:	430b      	orrs	r3, r1
   2bbb6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2bbb8:	4a15      	ldr	r2, [pc, #84]	; (2bc10 <Reset_Handler+0xe8>)
   2bbba:	7b93      	ldrb	r3, [r2, #14]
   2bbbc:	210c      	movs	r1, #12
   2bbbe:	438b      	bics	r3, r1
   2bbc0:	1c19      	adds	r1, r3, #0
   2bbc2:	2308      	movs	r3, #8
   2bbc4:	430b      	orrs	r3, r1
   2bbc6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2bbc8:	4a11      	ldr	r2, [pc, #68]	; (2bc10 <Reset_Handler+0xe8>)
   2bbca:	7b93      	ldrb	r3, [r2, #14]
   2bbcc:	2103      	movs	r1, #3
   2bbce:	438b      	bics	r3, r1
   2bbd0:	1c19      	adds	r1, r3, #0
   2bbd2:	2302      	movs	r3, #2
   2bbd4:	430b      	orrs	r3, r1
   2bbd6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2bbd8:	4a0e      	ldr	r2, [pc, #56]	; (2bc14 <Reset_Handler+0xec>)
   2bbda:	6853      	ldr	r3, [r2, #4]
   2bbdc:	2180      	movs	r1, #128	; 0x80
   2bbde:	430b      	orrs	r3, r1
   2bbe0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2bbe2:	4b0d      	ldr	r3, [pc, #52]	; (2bc18 <Reset_Handler+0xf0>)
   2bbe4:	4798      	blx	r3

        /* Branch to main function */
        main();
   2bbe6:	4b0d      	ldr	r3, [pc, #52]	; (2bc1c <Reset_Handler+0xf4>)
   2bbe8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2bbea:	e7fe      	b.n	2bbea <Reset_Handler+0xc2>
   2bbec:	0003b2e8 	.word	0x0003b2e8
   2bbf0:	20000000 	.word	0x20000000
   2bbf4:	20000300 	.word	0x20000300
   2bbf8:	20000300 	.word	0x20000300
   2bbfc:	20005d28 	.word	0x20005d28
   2bc00:	00012000 	.word	0x00012000
   2bc04:	e000ed00 	.word	0xe000ed00
   2bc08:	41007000 	.word	0x41007000
   2bc0c:	41005000 	.word	0x41005000
   2bc10:	41004800 	.word	0x41004800
   2bc14:	41004000 	.word	0x41004000
   2bc18:	00035569 	.word	0x00035569
   2bc1c:	0003335d 	.word	0x0003335d

0002bc20 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2bc20:	b580      	push	{r7, lr}
   2bc22:	af00      	add	r7, sp, #0
  __asm volatile (
   2bc24:	2004      	movs	r0, #4
   2bc26:	4671      	mov	r1, lr
   2bc28:	4208      	tst	r0, r1
   2bc2a:	d002      	beq.n	2bc32 <_MSP>
   2bc2c:	f3ef 8009 	mrs	r0, PSP
   2bc30:	e001      	b.n	2bc36 <_HALT>

0002bc32 <_MSP>:
   2bc32:	f3ef 8008 	mrs	r0, MSP

0002bc36 <_HALT>:
   2bc36:	6941      	ldr	r1, [r0, #20]
   2bc38:	e004      	b.n	2bc44 <HardFault_HandlerC>
   2bc3a:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2bc3c:	46c0      	nop			; (mov r8, r8)
   2bc3e:	46bd      	mov	sp, r7
   2bc40:	bd80      	pop	{r7, pc}
	...

0002bc44 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2bc44:	b580      	push	{r7, lr}
   2bc46:	b090      	sub	sp, #64	; 0x40
   2bc48:	af00      	add	r7, sp, #0
   2bc4a:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2bc4c:	687b      	ldr	r3, [r7, #4]
   2bc4e:	681b      	ldr	r3, [r3, #0]
   2bc50:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2bc52:	687b      	ldr	r3, [r7, #4]
   2bc54:	685b      	ldr	r3, [r3, #4]
   2bc56:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2bc58:	687b      	ldr	r3, [r7, #4]
   2bc5a:	689b      	ldr	r3, [r3, #8]
   2bc5c:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2bc5e:	687b      	ldr	r3, [r7, #4]
   2bc60:	68db      	ldr	r3, [r3, #12]
   2bc62:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2bc64:	687b      	ldr	r3, [r7, #4]
   2bc66:	691b      	ldr	r3, [r3, #16]
   2bc68:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2bc6a:	687b      	ldr	r3, [r7, #4]
   2bc6c:	695b      	ldr	r3, [r3, #20]
   2bc6e:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2bc70:	687b      	ldr	r3, [r7, #4]
   2bc72:	699b      	ldr	r3, [r3, #24]
   2bc74:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2bc76:	687b      	ldr	r3, [r7, #4]
   2bc78:	69db      	ldr	r3, [r3, #28]
   2bc7a:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2bc7c:	4b0b      	ldr	r3, [pc, #44]	; (2bcac <HardFault_HandlerC+0x68>)
   2bc7e:	681b      	ldr	r3, [r3, #0]
   2bc80:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2bc82:	4b0b      	ldr	r3, [pc, #44]	; (2bcb0 <HardFault_HandlerC+0x6c>)
   2bc84:	681b      	ldr	r3, [r3, #0]
   2bc86:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2bc88:	4b0a      	ldr	r3, [pc, #40]	; (2bcb4 <HardFault_HandlerC+0x70>)
   2bc8a:	681b      	ldr	r3, [r3, #0]
   2bc8c:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2bc8e:	4b0a      	ldr	r3, [pc, #40]	; (2bcb8 <HardFault_HandlerC+0x74>)
   2bc90:	681b      	ldr	r3, [r3, #0]
   2bc92:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2bc94:	4b09      	ldr	r3, [pc, #36]	; (2bcbc <HardFault_HandlerC+0x78>)
   2bc96:	681b      	ldr	r3, [r3, #0]
   2bc98:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2bc9a:	4b09      	ldr	r3, [pc, #36]	; (2bcc0 <HardFault_HandlerC+0x7c>)
   2bc9c:	681b      	ldr	r3, [r3, #0]
   2bc9e:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2bca0:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2bca2:	46c0      	nop			; (mov r8, r8)
   2bca4:	46bd      	mov	sp, r7
   2bca6:	b010      	add	sp, #64	; 0x40
   2bca8:	bd80      	pop	{r7, pc}
   2bcaa:	46c0      	nop			; (mov r8, r8)
   2bcac:	e000ed28 	.word	0xe000ed28
   2bcb0:	e000ed2c 	.word	0xe000ed2c
   2bcb4:	e000ed30 	.word	0xe000ed30
   2bcb8:	e000ed3c 	.word	0xe000ed3c
   2bcbc:	e000ed34 	.word	0xe000ed34
   2bcc0:	e000ed38 	.word	0xe000ed38

0002bcc4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2bcc4:	b580      	push	{r7, lr}
   2bcc6:	b086      	sub	sp, #24
   2bcc8:	af00      	add	r7, sp, #0
   2bcca:	60f8      	str	r0, [r7, #12]
   2bccc:	60b9      	str	r1, [r7, #8]
   2bcce:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2bcd0:	2300      	movs	r3, #0
   2bcd2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2bcd4:	68fb      	ldr	r3, [r7, #12]
   2bcd6:	2b00      	cmp	r3, #0
   2bcd8:	d012      	beq.n	2bd00 <_read+0x3c>
		return -1;
   2bcda:	2301      	movs	r3, #1
   2bcdc:	425b      	negs	r3, r3
   2bcde:	e013      	b.n	2bd08 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2bce0:	4b0b      	ldr	r3, [pc, #44]	; (2bd10 <_read+0x4c>)
   2bce2:	681a      	ldr	r2, [r3, #0]
   2bce4:	4b0b      	ldr	r3, [pc, #44]	; (2bd14 <_read+0x50>)
   2bce6:	681b      	ldr	r3, [r3, #0]
   2bce8:	68b9      	ldr	r1, [r7, #8]
   2bcea:	0018      	movs	r0, r3
   2bcec:	4790      	blx	r2
		ptr++;
   2bcee:	68bb      	ldr	r3, [r7, #8]
   2bcf0:	3301      	adds	r3, #1
   2bcf2:	60bb      	str	r3, [r7, #8]
		nChars++;
   2bcf4:	697b      	ldr	r3, [r7, #20]
   2bcf6:	3301      	adds	r3, #1
   2bcf8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2bcfa:	687b      	ldr	r3, [r7, #4]
   2bcfc:	3b01      	subs	r3, #1
   2bcfe:	607b      	str	r3, [r7, #4]
   2bd00:	687b      	ldr	r3, [r7, #4]
   2bd02:	2b00      	cmp	r3, #0
   2bd04:	dcec      	bgt.n	2bce0 <_read+0x1c>
	}
	return nChars;
   2bd06:	697b      	ldr	r3, [r7, #20]
}
   2bd08:	0018      	movs	r0, r3
   2bd0a:	46bd      	mov	sp, r7
   2bd0c:	b006      	add	sp, #24
   2bd0e:	bd80      	pop	{r7, pc}
   2bd10:	20005cc4 	.word	0x20005cc4
   2bd14:	20005ccc 	.word	0x20005ccc

0002bd18 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2bd18:	b580      	push	{r7, lr}
   2bd1a:	b086      	sub	sp, #24
   2bd1c:	af00      	add	r7, sp, #0
   2bd1e:	60f8      	str	r0, [r7, #12]
   2bd20:	60b9      	str	r1, [r7, #8]
   2bd22:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2bd24:	2300      	movs	r3, #0
   2bd26:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2bd28:	68fb      	ldr	r3, [r7, #12]
   2bd2a:	2b01      	cmp	r3, #1
   2bd2c:	d01d      	beq.n	2bd6a <_write+0x52>
   2bd2e:	68fb      	ldr	r3, [r7, #12]
   2bd30:	2b02      	cmp	r3, #2
   2bd32:	d01a      	beq.n	2bd6a <_write+0x52>
   2bd34:	68fb      	ldr	r3, [r7, #12]
   2bd36:	2b03      	cmp	r3, #3
   2bd38:	d017      	beq.n	2bd6a <_write+0x52>
		return -1;
   2bd3a:	2301      	movs	r3, #1
   2bd3c:	425b      	negs	r3, r3
   2bd3e:	e018      	b.n	2bd72 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2bd40:	4b0e      	ldr	r3, [pc, #56]	; (2bd7c <_write+0x64>)
   2bd42:	681a      	ldr	r2, [r3, #0]
   2bd44:	4b0e      	ldr	r3, [pc, #56]	; (2bd80 <_write+0x68>)
   2bd46:	6818      	ldr	r0, [r3, #0]
   2bd48:	68bb      	ldr	r3, [r7, #8]
   2bd4a:	1c59      	adds	r1, r3, #1
   2bd4c:	60b9      	str	r1, [r7, #8]
   2bd4e:	781b      	ldrb	r3, [r3, #0]
   2bd50:	0019      	movs	r1, r3
   2bd52:	4790      	blx	r2
   2bd54:	1e03      	subs	r3, r0, #0
   2bd56:	da02      	bge.n	2bd5e <_write+0x46>
			return -1;
   2bd58:	2301      	movs	r3, #1
   2bd5a:	425b      	negs	r3, r3
   2bd5c:	e009      	b.n	2bd72 <_write+0x5a>
		}
		++nChars;
   2bd5e:	697b      	ldr	r3, [r7, #20]
   2bd60:	3301      	adds	r3, #1
   2bd62:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2bd64:	687b      	ldr	r3, [r7, #4]
   2bd66:	3b01      	subs	r3, #1
   2bd68:	607b      	str	r3, [r7, #4]
   2bd6a:	687b      	ldr	r3, [r7, #4]
   2bd6c:	2b00      	cmp	r3, #0
   2bd6e:	d1e7      	bne.n	2bd40 <_write+0x28>
	}
	return nChars;
   2bd70:	697b      	ldr	r3, [r7, #20]
}
   2bd72:	0018      	movs	r0, r3
   2bd74:	46bd      	mov	sp, r7
   2bd76:	b006      	add	sp, #24
   2bd78:	bd80      	pop	{r7, pc}
   2bd7a:	46c0      	nop			; (mov r8, r8)
   2bd7c:	20005cc8 	.word	0x20005cc8
   2bd80:	20005ccc 	.word	0x20005ccc

0002bd84 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2bd84:	b580      	push	{r7, lr}
   2bd86:	b084      	sub	sp, #16
   2bd88:	af00      	add	r7, sp, #0
   2bd8a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2bd8c:	4b0a      	ldr	r3, [pc, #40]	; (2bdb8 <_sbrk+0x34>)
   2bd8e:	681b      	ldr	r3, [r3, #0]
   2bd90:	2b00      	cmp	r3, #0
   2bd92:	d102      	bne.n	2bd9a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2bd94:	4b08      	ldr	r3, [pc, #32]	; (2bdb8 <_sbrk+0x34>)
   2bd96:	4a09      	ldr	r2, [pc, #36]	; (2bdbc <_sbrk+0x38>)
   2bd98:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2bd9a:	4b07      	ldr	r3, [pc, #28]	; (2bdb8 <_sbrk+0x34>)
   2bd9c:	681b      	ldr	r3, [r3, #0]
   2bd9e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2bda0:	4b05      	ldr	r3, [pc, #20]	; (2bdb8 <_sbrk+0x34>)
   2bda2:	681a      	ldr	r2, [r3, #0]
   2bda4:	687b      	ldr	r3, [r7, #4]
   2bda6:	18d2      	adds	r2, r2, r3
   2bda8:	4b03      	ldr	r3, [pc, #12]	; (2bdb8 <_sbrk+0x34>)
   2bdaa:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2bdac:	68fb      	ldr	r3, [r7, #12]
}
   2bdae:	0018      	movs	r0, r3
   2bdb0:	46bd      	mov	sp, r7
   2bdb2:	b004      	add	sp, #16
   2bdb4:	bd80      	pop	{r7, pc}
   2bdb6:	46c0      	nop			; (mov r8, r8)
   2bdb8:	200042f4 	.word	0x200042f4
   2bdbc:	20007d28 	.word	0x20007d28

0002bdc0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2bdc0:	b580      	push	{r7, lr}
   2bdc2:	b082      	sub	sp, #8
   2bdc4:	af00      	add	r7, sp, #0
   2bdc6:	6078      	str	r0, [r7, #4]
	return -1;
   2bdc8:	2301      	movs	r3, #1
   2bdca:	425b      	negs	r3, r3
}
   2bdcc:	0018      	movs	r0, r3
   2bdce:	46bd      	mov	sp, r7
   2bdd0:	b002      	add	sp, #8
   2bdd2:	bd80      	pop	{r7, pc}

0002bdd4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2bdd4:	b580      	push	{r7, lr}
   2bdd6:	b082      	sub	sp, #8
   2bdd8:	af00      	add	r7, sp, #0
   2bdda:	6078      	str	r0, [r7, #4]
   2bddc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2bdde:	683b      	ldr	r3, [r7, #0]
   2bde0:	2280      	movs	r2, #128	; 0x80
   2bde2:	0192      	lsls	r2, r2, #6
   2bde4:	605a      	str	r2, [r3, #4]

	return 0;
   2bde6:	2300      	movs	r3, #0
}
   2bde8:	0018      	movs	r0, r3
   2bdea:	46bd      	mov	sp, r7
   2bdec:	b002      	add	sp, #8
   2bdee:	bd80      	pop	{r7, pc}

0002bdf0 <_isatty>:

extern int _isatty(int file)
{
   2bdf0:	b580      	push	{r7, lr}
   2bdf2:	b082      	sub	sp, #8
   2bdf4:	af00      	add	r7, sp, #0
   2bdf6:	6078      	str	r0, [r7, #4]
	return 1;
   2bdf8:	2301      	movs	r3, #1
}
   2bdfa:	0018      	movs	r0, r3
   2bdfc:	46bd      	mov	sp, r7
   2bdfe:	b002      	add	sp, #8
   2be00:	bd80      	pop	{r7, pc}

0002be02 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2be02:	b580      	push	{r7, lr}
   2be04:	b084      	sub	sp, #16
   2be06:	af00      	add	r7, sp, #0
   2be08:	60f8      	str	r0, [r7, #12]
   2be0a:	60b9      	str	r1, [r7, #8]
   2be0c:	607a      	str	r2, [r7, #4]
	return 0;
   2be0e:	2300      	movs	r3, #0
}
   2be10:	0018      	movs	r0, r3
   2be12:	46bd      	mov	sp, r7
   2be14:	b004      	add	sp, #16
   2be16:	bd80      	pop	{r7, pc}

0002be18 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2be18:	b580      	push	{r7, lr}
   2be1a:	b082      	sub	sp, #8
   2be1c:	af00      	add	r7, sp, #0
   2be1e:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2be20:	687b      	ldr	r3, [r7, #4]
   2be22:	2200      	movs	r2, #0
   2be24:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2be26:	687b      	ldr	r3, [r7, #4]
   2be28:	2200      	movs	r2, #0
   2be2a:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2be2c:	687b      	ldr	r3, [r7, #4]
   2be2e:	2200      	movs	r2, #0
   2be30:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2be32:	687b      	ldr	r3, [r7, #4]
   2be34:	2200      	movs	r2, #0
   2be36:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2be38:	687b      	ldr	r3, [r7, #4]
   2be3a:	2201      	movs	r2, #1
   2be3c:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2be3e:	687b      	ldr	r3, [r7, #4]
   2be40:	2201      	movs	r2, #1
   2be42:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2be44:	687b      	ldr	r3, [r7, #4]
   2be46:	22fa      	movs	r2, #250	; 0xfa
   2be48:	00d2      	lsls	r2, r2, #3
   2be4a:	80da      	strh	r2, [r3, #6]
}
   2be4c:	46c0      	nop			; (mov r8, r8)
   2be4e:	46bd      	mov	sp, r7
   2be50:	b002      	add	sp, #8
   2be52:	bd80      	pop	{r7, pc}

0002be54 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2be54:	b580      	push	{r7, lr}
   2be56:	b086      	sub	sp, #24
   2be58:	af00      	add	r7, sp, #0
   2be5a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2be5c:	230c      	movs	r3, #12
   2be5e:	18fb      	adds	r3, r7, r3
   2be60:	0018      	movs	r0, r3
   2be62:	4b23      	ldr	r3, [pc, #140]	; (2bef0 <rtc_calendar_get_config_defaults+0x9c>)
   2be64:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2be66:	687b      	ldr	r3, [r7, #4]
   2be68:	22a0      	movs	r2, #160	; 0xa0
   2be6a:	0112      	lsls	r2, r2, #4
   2be6c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2be6e:	687b      	ldr	r3, [r7, #4]
   2be70:	2200      	movs	r2, #0
   2be72:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2be74:	687b      	ldr	r3, [r7, #4]
   2be76:	2200      	movs	r2, #0
   2be78:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2be7a:	687b      	ldr	r3, [r7, #4]
   2be7c:	2200      	movs	r2, #0
   2be7e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2be80:	687b      	ldr	r3, [r7, #4]
   2be82:	22fa      	movs	r2, #250	; 0xfa
   2be84:	00d2      	lsls	r2, r2, #3
   2be86:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2be88:	2317      	movs	r3, #23
   2be8a:	18fb      	adds	r3, r7, r3
   2be8c:	2200      	movs	r2, #0
   2be8e:	701a      	strb	r2, [r3, #0]
   2be90:	e025      	b.n	2bede <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2be92:	2317      	movs	r3, #23
   2be94:	18fb      	adds	r3, r7, r3
   2be96:	781a      	ldrb	r2, [r3, #0]
   2be98:	6879      	ldr	r1, [r7, #4]
   2be9a:	2008      	movs	r0, #8
   2be9c:	0013      	movs	r3, r2
   2be9e:	009b      	lsls	r3, r3, #2
   2bea0:	189b      	adds	r3, r3, r2
   2bea2:	005b      	lsls	r3, r3, #1
   2bea4:	18cb      	adds	r3, r1, r3
   2bea6:	181a      	adds	r2, r3, r0
   2bea8:	230c      	movs	r3, #12
   2beaa:	18fb      	adds	r3, r7, r3
   2beac:	0010      	movs	r0, r2
   2beae:	0019      	movs	r1, r3
   2beb0:	2308      	movs	r3, #8
   2beb2:	001a      	movs	r2, r3
   2beb4:	4b0f      	ldr	r3, [pc, #60]	; (2bef4 <rtc_calendar_get_config_defaults+0xa0>)
   2beb6:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2beb8:	2317      	movs	r3, #23
   2beba:	18fb      	adds	r3, r7, r3
   2bebc:	781a      	ldrb	r2, [r3, #0]
   2bebe:	6879      	ldr	r1, [r7, #4]
   2bec0:	0013      	movs	r3, r2
   2bec2:	009b      	lsls	r3, r3, #2
   2bec4:	189b      	adds	r3, r3, r2
   2bec6:	005b      	lsls	r3, r3, #1
   2bec8:	18cb      	adds	r3, r1, r3
   2beca:	3310      	adds	r3, #16
   2becc:	2206      	movs	r2, #6
   2bece:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2bed0:	2317      	movs	r3, #23
   2bed2:	18fb      	adds	r3, r7, r3
   2bed4:	781a      	ldrb	r2, [r3, #0]
   2bed6:	2317      	movs	r3, #23
   2bed8:	18fb      	adds	r3, r7, r3
   2beda:	3201      	adds	r2, #1
   2bedc:	701a      	strb	r2, [r3, #0]
   2bede:	2317      	movs	r3, #23
   2bee0:	18fb      	adds	r3, r7, r3
   2bee2:	781b      	ldrb	r3, [r3, #0]
   2bee4:	2b00      	cmp	r3, #0
   2bee6:	d0d4      	beq.n	2be92 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2bee8:	46c0      	nop			; (mov r8, r8)
   2beea:	46bd      	mov	sp, r7
   2beec:	b006      	add	sp, #24
   2beee:	bd80      	pop	{r7, pc}
   2bef0:	0002be19 	.word	0x0002be19
   2bef4:	000355d9 	.word	0x000355d9

0002bef8 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2bef8:	b580      	push	{r7, lr}
   2befa:	b088      	sub	sp, #32
   2befc:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2befe:	230c      	movs	r3, #12
   2bf00:	18fb      	adds	r3, r7, r3
   2bf02:	0018      	movs	r0, r3
   2bf04:	4b1a      	ldr	r3, [pc, #104]	; (2bf70 <configure_rtc_calendar+0x78>)
   2bf06:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2bf08:	1d3b      	adds	r3, r7, #4
   2bf0a:	0018      	movs	r0, r3
   2bf0c:	4b19      	ldr	r3, [pc, #100]	; (2bf74 <configure_rtc_calendar+0x7c>)
   2bf0e:	4798      	blx	r3
	init_time.year   = 2014;
   2bf10:	1d3b      	adds	r3, r7, #4
   2bf12:	4a19      	ldr	r2, [pc, #100]	; (2bf78 <configure_rtc_calendar+0x80>)
   2bf14:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2bf16:	1d3b      	adds	r3, r7, #4
   2bf18:	2201      	movs	r2, #1
   2bf1a:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2bf1c:	1d3b      	adds	r3, r7, #4
   2bf1e:	2201      	movs	r2, #1
   2bf20:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2bf22:	1d3b      	adds	r3, r7, #4
   2bf24:	2200      	movs	r2, #0
   2bf26:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2bf28:	1d3b      	adds	r3, r7, #4
   2bf2a:	2200      	movs	r2, #0
   2bf2c:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2bf2e:	1d3b      	adds	r3, r7, #4
   2bf30:	2204      	movs	r2, #4
   2bf32:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2bf34:	230c      	movs	r3, #12
   2bf36:	18fb      	adds	r3, r7, r3
   2bf38:	2201      	movs	r2, #1
   2bf3a:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2bf3c:	230c      	movs	r3, #12
   2bf3e:	18fb      	adds	r3, r7, r3
   2bf40:	1d3a      	adds	r2, r7, #4
   2bf42:	3308      	adds	r3, #8
   2bf44:	ca03      	ldmia	r2!, {r0, r1}
   2bf46:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2bf48:	230c      	movs	r3, #12
   2bf4a:	18fb      	adds	r3, r7, r3
   2bf4c:	2206      	movs	r2, #6
   2bf4e:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2bf50:	230c      	movs	r3, #12
   2bf52:	18fa      	adds	r2, r7, r3
   2bf54:	4909      	ldr	r1, [pc, #36]	; (2bf7c <configure_rtc_calendar+0x84>)
   2bf56:	4b0a      	ldr	r3, [pc, #40]	; (2bf80 <configure_rtc_calendar+0x88>)
   2bf58:	0018      	movs	r0, r3
   2bf5a:	4b0a      	ldr	r3, [pc, #40]	; (2bf84 <configure_rtc_calendar+0x8c>)
   2bf5c:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2bf5e:	4b08      	ldr	r3, [pc, #32]	; (2bf80 <configure_rtc_calendar+0x88>)
   2bf60:	0018      	movs	r0, r3
   2bf62:	4b09      	ldr	r3, [pc, #36]	; (2bf88 <configure_rtc_calendar+0x90>)
   2bf64:	4798      	blx	r3
}
   2bf66:	46c0      	nop			; (mov r8, r8)
   2bf68:	46bd      	mov	sp, r7
   2bf6a:	b008      	add	sp, #32
   2bf6c:	bd80      	pop	{r7, pc}
   2bf6e:	46c0      	nop			; (mov r8, r8)
   2bf70:	0002be55 	.word	0x0002be55
   2bf74:	0002be19 	.word	0x0002be19
   2bf78:	000007de 	.word	0x000007de
   2bf7c:	40001400 	.word	0x40001400
   2bf80:	20005cd0 	.word	0x20005cd0
   2bf84:	00027909 	.word	0x00027909
   2bf88:	00027635 	.word	0x00027635

0002bf8c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2bf8c:	b590      	push	{r4, r7, lr}
   2bf8e:	b085      	sub	sp, #20
   2bf90:	af00      	add	r7, sp, #0
   2bf92:	0002      	movs	r2, r0
   2bf94:	1dfb      	adds	r3, r7, #7
   2bf96:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2bf98:	4b1a      	ldr	r3, [pc, #104]	; (2c004 <disk_initialize+0x78>)
   2bf9a:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2bf9c:	1dfb      	adds	r3, r7, #7
   2bf9e:	781b      	ldrb	r3, [r3, #0]
   2bfa0:	2b01      	cmp	r3, #1
   2bfa2:	d901      	bls.n	2bfa8 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2bfa4:	2301      	movs	r3, #1
   2bfa6:	e029      	b.n	2bffc <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2bfa8:	2300      	movs	r3, #0
   2bfaa:	60fb      	str	r3, [r7, #12]
   2bfac:	e010      	b.n	2bfd0 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2bfae:	230b      	movs	r3, #11
   2bfb0:	18fc      	adds	r4, r7, r3
   2bfb2:	1dfb      	adds	r3, r7, #7
   2bfb4:	781b      	ldrb	r3, [r3, #0]
   2bfb6:	0018      	movs	r0, r3
   2bfb8:	4b13      	ldr	r3, [pc, #76]	; (2c008 <disk_initialize+0x7c>)
   2bfba:	4798      	blx	r3
   2bfbc:	0003      	movs	r3, r0
   2bfbe:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2bfc0:	230b      	movs	r3, #11
   2bfc2:	18fb      	adds	r3, r7, r3
   2bfc4:	781b      	ldrb	r3, [r3, #0]
   2bfc6:	2b03      	cmp	r3, #3
   2bfc8:	d106      	bne.n	2bfd8 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2bfca:	68fb      	ldr	r3, [r7, #12]
   2bfcc:	3301      	adds	r3, #1
   2bfce:	60fb      	str	r3, [r7, #12]
   2bfd0:	68fb      	ldr	r3, [r7, #12]
   2bfd2:	2b01      	cmp	r3, #1
   2bfd4:	ddeb      	ble.n	2bfae <disk_initialize+0x22>
   2bfd6:	e000      	b.n	2bfda <disk_initialize+0x4e>
			break;
   2bfd8:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2bfda:	230b      	movs	r3, #11
   2bfdc:	18fb      	adds	r3, r7, r3
   2bfde:	781b      	ldrb	r3, [r3, #0]
   2bfe0:	2b00      	cmp	r3, #0
   2bfe2:	d001      	beq.n	2bfe8 <disk_initialize+0x5c>
		return STA_NOINIT;
   2bfe4:	2301      	movs	r3, #1
   2bfe6:	e009      	b.n	2bffc <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2bfe8:	1dfb      	adds	r3, r7, #7
   2bfea:	781b      	ldrb	r3, [r3, #0]
   2bfec:	0018      	movs	r0, r3
   2bfee:	4b07      	ldr	r3, [pc, #28]	; (2c00c <disk_initialize+0x80>)
   2bff0:	4798      	blx	r3
   2bff2:	1e03      	subs	r3, r0, #0
   2bff4:	d001      	beq.n	2bffa <disk_initialize+0x6e>
		return STA_PROTECT;
   2bff6:	2304      	movs	r3, #4
   2bff8:	e000      	b.n	2bffc <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2bffa:	2300      	movs	r3, #0
}
   2bffc:	0018      	movs	r0, r3
   2bffe:	46bd      	mov	sp, r7
   2c000:	b005      	add	sp, #20
   2c002:	bd90      	pop	{r4, r7, pc}
   2c004:	0002bef9 	.word	0x0002bef9
   2c008:	00026b31 	.word	0x00026b31
   2c00c:	00026be9 	.word	0x00026be9

0002c010 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2c010:	b580      	push	{r7, lr}
   2c012:	b082      	sub	sp, #8
   2c014:	af00      	add	r7, sp, #0
   2c016:	0002      	movs	r2, r0
   2c018:	1dfb      	adds	r3, r7, #7
   2c01a:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2c01c:	1dfb      	adds	r3, r7, #7
   2c01e:	781b      	ldrb	r3, [r3, #0]
   2c020:	0018      	movs	r0, r3
   2c022:	4b08      	ldr	r3, [pc, #32]	; (2c044 <disk_status+0x34>)
   2c024:	4798      	blx	r3
   2c026:	1e03      	subs	r3, r0, #0
   2c028:	d002      	beq.n	2c030 <disk_status+0x20>
   2c02a:	2b02      	cmp	r3, #2
   2c02c:	d002      	beq.n	2c034 <disk_status+0x24>
   2c02e:	e003      	b.n	2c038 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2c030:	2300      	movs	r3, #0
   2c032:	e002      	b.n	2c03a <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2c034:	2303      	movs	r3, #3
   2c036:	e000      	b.n	2c03a <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2c038:	2301      	movs	r3, #1
	}
}
   2c03a:	0018      	movs	r0, r3
   2c03c:	46bd      	mov	sp, r7
   2c03e:	b002      	add	sp, #8
   2c040:	bd80      	pop	{r7, pc}
   2c042:	46c0      	nop			; (mov r8, r8)
   2c044:	00026b31 	.word	0x00026b31

0002c048 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2c048:	b590      	push	{r4, r7, lr}
   2c04a:	b089      	sub	sp, #36	; 0x24
   2c04c:	af00      	add	r7, sp, #0
   2c04e:	60b9      	str	r1, [r7, #8]
   2c050:	607a      	str	r2, [r7, #4]
   2c052:	0019      	movs	r1, r3
   2c054:	230f      	movs	r3, #15
   2c056:	18fb      	adds	r3, r7, r3
   2c058:	1c02      	adds	r2, r0, #0
   2c05a:	701a      	strb	r2, [r3, #0]
   2c05c:	230e      	movs	r3, #14
   2c05e:	18fb      	adds	r3, r7, r3
   2c060:	1c0a      	adds	r2, r1, #0
   2c062:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c064:	231b      	movs	r3, #27
   2c066:	18fc      	adds	r4, r7, r3
   2c068:	230f      	movs	r3, #15
   2c06a:	18fb      	adds	r3, r7, r3
   2c06c:	781b      	ldrb	r3, [r3, #0]
   2c06e:	0018      	movs	r0, r3
   2c070:	4b28      	ldr	r3, [pc, #160]	; (2c114 <disk_read+0xcc>)
   2c072:	4798      	blx	r3
   2c074:	0003      	movs	r3, r0
   2c076:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c078:	231b      	movs	r3, #27
   2c07a:	18fb      	adds	r3, r7, r3
   2c07c:	781b      	ldrb	r3, [r3, #0]
   2c07e:	2b00      	cmp	r3, #0
   2c080:	d101      	bne.n	2c086 <disk_read+0x3e>
		return RES_ERROR;
   2c082:	2301      	movs	r3, #1
   2c084:	e042      	b.n	2c10c <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c086:	2314      	movs	r3, #20
   2c088:	18fa      	adds	r2, r7, r3
   2c08a:	230f      	movs	r3, #15
   2c08c:	18fb      	adds	r3, r7, r3
   2c08e:	781b      	ldrb	r3, [r3, #0]
   2c090:	0011      	movs	r1, r2
   2c092:	0018      	movs	r0, r3
   2c094:	4b20      	ldr	r3, [pc, #128]	; (2c118 <disk_read+0xd0>)
   2c096:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c098:	230e      	movs	r3, #14
   2c09a:	18fb      	adds	r3, r7, r3
   2c09c:	781b      	ldrb	r3, [r3, #0]
   2c09e:	221b      	movs	r2, #27
   2c0a0:	18ba      	adds	r2, r7, r2
   2c0a2:	7812      	ldrb	r2, [r2, #0]
   2c0a4:	4353      	muls	r3, r2
   2c0a6:	001a      	movs	r2, r3
   2c0a8:	687b      	ldr	r3, [r7, #4]
   2c0aa:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c0ac:	697b      	ldr	r3, [r7, #20]
   2c0ae:	3301      	adds	r3, #1
   2c0b0:	211b      	movs	r1, #27
   2c0b2:	1879      	adds	r1, r7, r1
   2c0b4:	7809      	ldrb	r1, [r1, #0]
   2c0b6:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c0b8:	429a      	cmp	r2, r3
   2c0ba:	d901      	bls.n	2c0c0 <disk_read+0x78>
		return RES_PARERR;
   2c0bc:	2304      	movs	r3, #4
   2c0be:	e025      	b.n	2c10c <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2c0c0:	2300      	movs	r3, #0
   2c0c2:	61fb      	str	r3, [r7, #28]
   2c0c4:	e01b      	b.n	2c0fe <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2c0c6:	231b      	movs	r3, #27
   2c0c8:	18fb      	adds	r3, r7, r3
   2c0ca:	781b      	ldrb	r3, [r3, #0]
   2c0cc:	69fa      	ldr	r2, [r7, #28]
   2c0ce:	435a      	muls	r2, r3
   2c0d0:	687b      	ldr	r3, [r7, #4]
   2c0d2:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c0d4:	231b      	movs	r3, #27
   2c0d6:	18fb      	adds	r3, r7, r3
   2c0d8:	781b      	ldrb	r3, [r3, #0]
   2c0da:	69fa      	ldr	r2, [r7, #28]
   2c0dc:	4353      	muls	r3, r2
   2c0de:	025b      	lsls	r3, r3, #9
   2c0e0:	68ba      	ldr	r2, [r7, #8]
   2c0e2:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2c0e4:	230f      	movs	r3, #15
   2c0e6:	18fb      	adds	r3, r7, r3
   2c0e8:	781b      	ldrb	r3, [r3, #0]
   2c0ea:	0018      	movs	r0, r3
   2c0ec:	4b0b      	ldr	r3, [pc, #44]	; (2c11c <disk_read+0xd4>)
   2c0ee:	4798      	blx	r3
   2c0f0:	1e03      	subs	r3, r0, #0
   2c0f2:	d001      	beq.n	2c0f8 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c0f4:	2301      	movs	r3, #1
   2c0f6:	e009      	b.n	2c10c <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2c0f8:	69fb      	ldr	r3, [r7, #28]
   2c0fa:	3301      	adds	r3, #1
   2c0fc:	61fb      	str	r3, [r7, #28]
   2c0fe:	230e      	movs	r3, #14
   2c100:	18fb      	adds	r3, r7, r3
   2c102:	781a      	ldrb	r2, [r3, #0]
   2c104:	69fb      	ldr	r3, [r7, #28]
   2c106:	429a      	cmp	r2, r3
   2c108:	d8dd      	bhi.n	2c0c6 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2c10a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c10c:	0018      	movs	r0, r3
   2c10e:	46bd      	mov	sp, r7
   2c110:	b009      	add	sp, #36	; 0x24
   2c112:	bd90      	pop	{r4, r7, pc}
   2c114:	00026bbd 	.word	0x00026bbd
   2c118:	00026b71 	.word	0x00026b71
   2c11c:	00026c31 	.word	0x00026c31

0002c120 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2c120:	b590      	push	{r4, r7, lr}
   2c122:	b089      	sub	sp, #36	; 0x24
   2c124:	af00      	add	r7, sp, #0
   2c126:	60b9      	str	r1, [r7, #8]
   2c128:	607a      	str	r2, [r7, #4]
   2c12a:	0019      	movs	r1, r3
   2c12c:	230f      	movs	r3, #15
   2c12e:	18fb      	adds	r3, r7, r3
   2c130:	1c02      	adds	r2, r0, #0
   2c132:	701a      	strb	r2, [r3, #0]
   2c134:	230e      	movs	r3, #14
   2c136:	18fb      	adds	r3, r7, r3
   2c138:	1c0a      	adds	r2, r1, #0
   2c13a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c13c:	231b      	movs	r3, #27
   2c13e:	18fc      	adds	r4, r7, r3
   2c140:	230f      	movs	r3, #15
   2c142:	18fb      	adds	r3, r7, r3
   2c144:	781b      	ldrb	r3, [r3, #0]
   2c146:	0018      	movs	r0, r3
   2c148:	4b28      	ldr	r3, [pc, #160]	; (2c1ec <disk_write+0xcc>)
   2c14a:	4798      	blx	r3
   2c14c:	0003      	movs	r3, r0
   2c14e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c150:	231b      	movs	r3, #27
   2c152:	18fb      	adds	r3, r7, r3
   2c154:	781b      	ldrb	r3, [r3, #0]
   2c156:	2b00      	cmp	r3, #0
   2c158:	d101      	bne.n	2c15e <disk_write+0x3e>
		return RES_ERROR;
   2c15a:	2301      	movs	r3, #1
   2c15c:	e042      	b.n	2c1e4 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c15e:	2314      	movs	r3, #20
   2c160:	18fa      	adds	r2, r7, r3
   2c162:	230f      	movs	r3, #15
   2c164:	18fb      	adds	r3, r7, r3
   2c166:	781b      	ldrb	r3, [r3, #0]
   2c168:	0011      	movs	r1, r2
   2c16a:	0018      	movs	r0, r3
   2c16c:	4b20      	ldr	r3, [pc, #128]	; (2c1f0 <disk_write+0xd0>)
   2c16e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c170:	230e      	movs	r3, #14
   2c172:	18fb      	adds	r3, r7, r3
   2c174:	781b      	ldrb	r3, [r3, #0]
   2c176:	221b      	movs	r2, #27
   2c178:	18ba      	adds	r2, r7, r2
   2c17a:	7812      	ldrb	r2, [r2, #0]
   2c17c:	4353      	muls	r3, r2
   2c17e:	001a      	movs	r2, r3
   2c180:	687b      	ldr	r3, [r7, #4]
   2c182:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c184:	697b      	ldr	r3, [r7, #20]
   2c186:	3301      	adds	r3, #1
   2c188:	211b      	movs	r1, #27
   2c18a:	1879      	adds	r1, r7, r1
   2c18c:	7809      	ldrb	r1, [r1, #0]
   2c18e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c190:	429a      	cmp	r2, r3
   2c192:	d901      	bls.n	2c198 <disk_write+0x78>
		return RES_PARERR;
   2c194:	2304      	movs	r3, #4
   2c196:	e025      	b.n	2c1e4 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2c198:	2300      	movs	r3, #0
   2c19a:	61fb      	str	r3, [r7, #28]
   2c19c:	e01b      	b.n	2c1d6 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c19e:	231b      	movs	r3, #27
   2c1a0:	18fb      	adds	r3, r7, r3
   2c1a2:	781b      	ldrb	r3, [r3, #0]
   2c1a4:	69fa      	ldr	r2, [r7, #28]
   2c1a6:	435a      	muls	r2, r3
   2c1a8:	687b      	ldr	r3, [r7, #4]
   2c1aa:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c1ac:	231b      	movs	r3, #27
   2c1ae:	18fb      	adds	r3, r7, r3
   2c1b0:	781b      	ldrb	r3, [r3, #0]
   2c1b2:	69fa      	ldr	r2, [r7, #28]
   2c1b4:	4353      	muls	r3, r2
   2c1b6:	025b      	lsls	r3, r3, #9
   2c1b8:	68ba      	ldr	r2, [r7, #8]
   2c1ba:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c1bc:	230f      	movs	r3, #15
   2c1be:	18fb      	adds	r3, r7, r3
   2c1c0:	781b      	ldrb	r3, [r3, #0]
   2c1c2:	0018      	movs	r0, r3
   2c1c4:	4b0b      	ldr	r3, [pc, #44]	; (2c1f4 <disk_write+0xd4>)
   2c1c6:	4798      	blx	r3
   2c1c8:	1e03      	subs	r3, r0, #0
   2c1ca:	d001      	beq.n	2c1d0 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c1cc:	2301      	movs	r3, #1
   2c1ce:	e009      	b.n	2c1e4 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2c1d0:	69fb      	ldr	r3, [r7, #28]
   2c1d2:	3301      	adds	r3, #1
   2c1d4:	61fb      	str	r3, [r7, #28]
   2c1d6:	230e      	movs	r3, #14
   2c1d8:	18fb      	adds	r3, r7, r3
   2c1da:	781a      	ldrb	r2, [r3, #0]
   2c1dc:	69fb      	ldr	r3, [r7, #28]
   2c1de:	429a      	cmp	r2, r3
   2c1e0:	d8dd      	bhi.n	2c19e <disk_write+0x7e>
		}
	}

	return RES_OK;
   2c1e2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c1e4:	0018      	movs	r0, r3
   2c1e6:	46bd      	mov	sp, r7
   2c1e8:	b009      	add	sp, #36	; 0x24
   2c1ea:	bd90      	pop	{r4, r7, pc}
   2c1ec:	00026bbd 	.word	0x00026bbd
   2c1f0:	00026b71 	.word	0x00026b71
   2c1f4:	00026c85 	.word	0x00026c85

0002c1f8 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2c1f8:	b590      	push	{r4, r7, lr}
   2c1fa:	b085      	sub	sp, #20
   2c1fc:	af00      	add	r7, sp, #0
   2c1fe:	603a      	str	r2, [r7, #0]
   2c200:	1dfb      	adds	r3, r7, #7
   2c202:	1c02      	adds	r2, r0, #0
   2c204:	701a      	strb	r2, [r3, #0]
   2c206:	1dbb      	adds	r3, r7, #6
   2c208:	1c0a      	adds	r2, r1, #0
   2c20a:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2c20c:	230f      	movs	r3, #15
   2c20e:	18fb      	adds	r3, r7, r3
   2c210:	2204      	movs	r2, #4
   2c212:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2c214:	1dbb      	adds	r3, r7, #6
   2c216:	781b      	ldrb	r3, [r3, #0]
   2c218:	2b01      	cmp	r3, #1
   2c21a:	d00f      	beq.n	2c23c <disk_ioctl+0x44>
   2c21c:	dc02      	bgt.n	2c224 <disk_ioctl+0x2c>
   2c21e:	2b00      	cmp	r3, #0
   2c220:	d044      	beq.n	2c2ac <disk_ioctl+0xb4>
   2c222:	e054      	b.n	2c2ce <disk_ioctl+0xd6>
   2c224:	2b02      	cmp	r3, #2
   2c226:	d01a      	beq.n	2c25e <disk_ioctl+0x66>
   2c228:	2b03      	cmp	r3, #3
   2c22a:	d150      	bne.n	2c2ce <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2c22c:	683b      	ldr	r3, [r7, #0]
   2c22e:	2201      	movs	r2, #1
   2c230:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2c232:	230f      	movs	r3, #15
   2c234:	18fb      	adds	r3, r7, r3
   2c236:	2200      	movs	r2, #0
   2c238:	701a      	strb	r2, [r3, #0]
		break;
   2c23a:	e04c      	b.n	2c2d6 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2c23c:	2308      	movs	r3, #8
   2c23e:	18fa      	adds	r2, r7, r3
   2c240:	1dfb      	adds	r3, r7, #7
   2c242:	781b      	ldrb	r3, [r3, #0]
   2c244:	0011      	movs	r1, r2
   2c246:	0018      	movs	r0, r3
   2c248:	4b26      	ldr	r3, [pc, #152]	; (2c2e4 <disk_ioctl+0xec>)
   2c24a:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2c24c:	68bb      	ldr	r3, [r7, #8]
   2c24e:	1c5a      	adds	r2, r3, #1
   2c250:	683b      	ldr	r3, [r7, #0]
   2c252:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2c254:	230f      	movs	r3, #15
   2c256:	18fb      	adds	r3, r7, r3
   2c258:	2200      	movs	r2, #0
   2c25a:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c25c:	e03b      	b.n	2c2d6 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2c25e:	230e      	movs	r3, #14
   2c260:	18fc      	adds	r4, r7, r3
   2c262:	1dfb      	adds	r3, r7, #7
   2c264:	781b      	ldrb	r3, [r3, #0]
   2c266:	0018      	movs	r0, r3
   2c268:	4b1f      	ldr	r3, [pc, #124]	; (2c2e8 <disk_ioctl+0xf0>)
   2c26a:	4798      	blx	r3
   2c26c:	0003      	movs	r3, r0
   2c26e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2c270:	230e      	movs	r3, #14
   2c272:	18fb      	adds	r3, r7, r3
   2c274:	781b      	ldrb	r3, [r3, #0]
   2c276:	2b01      	cmp	r3, #1
   2c278:	d010      	beq.n	2c29c <disk_ioctl+0xa4>
   2c27a:	230e      	movs	r3, #14
   2c27c:	18fb      	adds	r3, r7, r3
   2c27e:	781b      	ldrb	r3, [r3, #0]
   2c280:	2b02      	cmp	r3, #2
   2c282:	d00b      	beq.n	2c29c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2c284:	230e      	movs	r3, #14
   2c286:	18fb      	adds	r3, r7, r3
   2c288:	781b      	ldrb	r3, [r3, #0]
   2c28a:	2b04      	cmp	r3, #4
   2c28c:	d006      	beq.n	2c29c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2c28e:	230e      	movs	r3, #14
   2c290:	18fb      	adds	r3, r7, r3
   2c292:	781b      	ldrb	r3, [r3, #0]
   2c294:	2b08      	cmp	r3, #8
   2c296:	d001      	beq.n	2c29c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2c298:	2301      	movs	r3, #1
   2c29a:	e01f      	b.n	2c2dc <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2c29c:	683b      	ldr	r3, [r7, #0]
   2c29e:	2200      	movs	r2, #0
   2c2a0:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2c2a2:	230f      	movs	r3, #15
   2c2a4:	18fb      	adds	r3, r7, r3
   2c2a6:	2200      	movs	r2, #0
   2c2a8:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c2aa:	e014      	b.n	2c2d6 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2c2ac:	1dfb      	adds	r3, r7, #7
   2c2ae:	781b      	ldrb	r3, [r3, #0]
   2c2b0:	0018      	movs	r0, r3
   2c2b2:	4b0e      	ldr	r3, [pc, #56]	; (2c2ec <disk_ioctl+0xf4>)
   2c2b4:	4798      	blx	r3
   2c2b6:	1e03      	subs	r3, r0, #0
   2c2b8:	d104      	bne.n	2c2c4 <disk_ioctl+0xcc>
			res = RES_OK;
   2c2ba:	230f      	movs	r3, #15
   2c2bc:	18fb      	adds	r3, r7, r3
   2c2be:	2200      	movs	r2, #0
   2c2c0:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2c2c2:	e008      	b.n	2c2d6 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2c2c4:	230f      	movs	r3, #15
   2c2c6:	18fb      	adds	r3, r7, r3
   2c2c8:	2203      	movs	r2, #3
   2c2ca:	701a      	strb	r2, [r3, #0]
		break;
   2c2cc:	e003      	b.n	2c2d6 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2c2ce:	230f      	movs	r3, #15
   2c2d0:	18fb      	adds	r3, r7, r3
   2c2d2:	2204      	movs	r2, #4
   2c2d4:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c2d6:	230f      	movs	r3, #15
   2c2d8:	18fb      	adds	r3, r7, r3
   2c2da:	781b      	ldrb	r3, [r3, #0]
}
   2c2dc:	0018      	movs	r0, r3
   2c2de:	46bd      	mov	sp, r7
   2c2e0:	b005      	add	sp, #20
   2c2e2:	bd90      	pop	{r4, r7, pc}
   2c2e4:	00026b71 	.word	0x00026b71
   2c2e8:	00026bbd 	.word	0x00026bbd
   2c2ec:	00026b31 	.word	0x00026b31

0002c2f0 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2c2f0:	b580      	push	{r7, lr}
   2c2f2:	b084      	sub	sp, #16
   2c2f4:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2c2f6:	1d3a      	adds	r2, r7, #4
   2c2f8:	4b12      	ldr	r3, [pc, #72]	; (2c344 <get_fattime+0x54>)
   2c2fa:	0011      	movs	r1, r2
   2c2fc:	0018      	movs	r0, r3
   2c2fe:	4b12      	ldr	r3, [pc, #72]	; (2c348 <get_fattime+0x58>)
   2c300:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2c302:	1d3b      	adds	r3, r7, #4
   2c304:	88db      	ldrh	r3, [r3, #6]
   2c306:	4a11      	ldr	r2, [pc, #68]	; (2c34c <get_fattime+0x5c>)
   2c308:	4694      	mov	ip, r2
   2c30a:	4463      	add	r3, ip
   2c30c:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2c30e:	1d3b      	adds	r3, r7, #4
   2c310:	795b      	ldrb	r3, [r3, #5]
   2c312:	055b      	lsls	r3, r3, #21
   2c314:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2c316:	1d3b      	adds	r3, r7, #4
   2c318:	791b      	ldrb	r3, [r3, #4]
   2c31a:	041b      	lsls	r3, r3, #16
   2c31c:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2c31e:	1d3b      	adds	r3, r7, #4
   2c320:	789b      	ldrb	r3, [r3, #2]
   2c322:	02db      	lsls	r3, r3, #11
   2c324:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2c326:	1d3b      	adds	r3, r7, #4
   2c328:	785b      	ldrb	r3, [r3, #1]
   2c32a:	015b      	lsls	r3, r3, #5
   2c32c:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2c32e:	1d3a      	adds	r2, r7, #4
   2c330:	7812      	ldrb	r2, [r2, #0]
   2c332:	0852      	lsrs	r2, r2, #1
   2c334:	b2d2      	uxtb	r2, r2
   2c336:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2c338:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2c33a:	68fb      	ldr	r3, [r7, #12]
}
   2c33c:	0018      	movs	r0, r3
   2c33e:	46bd      	mov	sp, r7
   2c340:	b004      	add	sp, #16
   2c342:	bd80      	pop	{r7, pc}
   2c344:	20005cd0 	.word	0x20005cd0
   2c348:	0002799d 	.word	0x0002799d
   2c34c:	fffff844 	.word	0xfffff844

0002c350 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2c350:	b580      	push	{r7, lr}
   2c352:	b086      	sub	sp, #24
   2c354:	af00      	add	r7, sp, #0
   2c356:	60f8      	str	r0, [r7, #12]
   2c358:	60b9      	str	r1, [r7, #8]
   2c35a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c35c:	68fb      	ldr	r3, [r7, #12]
   2c35e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2c360:	68bb      	ldr	r3, [r7, #8]
   2c362:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2c364:	e007      	b.n	2c376 <mem_cpy+0x26>
		*d++ = *s++;
   2c366:	697b      	ldr	r3, [r7, #20]
   2c368:	1c5a      	adds	r2, r3, #1
   2c36a:	617a      	str	r2, [r7, #20]
   2c36c:	693a      	ldr	r2, [r7, #16]
   2c36e:	1c51      	adds	r1, r2, #1
   2c370:	6139      	str	r1, [r7, #16]
   2c372:	7812      	ldrb	r2, [r2, #0]
   2c374:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c376:	687b      	ldr	r3, [r7, #4]
   2c378:	1e5a      	subs	r2, r3, #1
   2c37a:	607a      	str	r2, [r7, #4]
   2c37c:	2b00      	cmp	r3, #0
   2c37e:	d1f2      	bne.n	2c366 <mem_cpy+0x16>
}
   2c380:	46c0      	nop			; (mov r8, r8)
   2c382:	46bd      	mov	sp, r7
   2c384:	b006      	add	sp, #24
   2c386:	bd80      	pop	{r7, pc}

0002c388 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2c388:	b580      	push	{r7, lr}
   2c38a:	b086      	sub	sp, #24
   2c38c:	af00      	add	r7, sp, #0
   2c38e:	60f8      	str	r0, [r7, #12]
   2c390:	60b9      	str	r1, [r7, #8]
   2c392:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c394:	68fb      	ldr	r3, [r7, #12]
   2c396:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2c398:	e005      	b.n	2c3a6 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2c39a:	697b      	ldr	r3, [r7, #20]
   2c39c:	1c5a      	adds	r2, r3, #1
   2c39e:	617a      	str	r2, [r7, #20]
   2c3a0:	68ba      	ldr	r2, [r7, #8]
   2c3a2:	b2d2      	uxtb	r2, r2
   2c3a4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c3a6:	687b      	ldr	r3, [r7, #4]
   2c3a8:	1e5a      	subs	r2, r3, #1
   2c3aa:	607a      	str	r2, [r7, #4]
   2c3ac:	2b00      	cmp	r3, #0
   2c3ae:	d1f4      	bne.n	2c39a <mem_set+0x12>
}
   2c3b0:	46c0      	nop			; (mov r8, r8)
   2c3b2:	46bd      	mov	sp, r7
   2c3b4:	b006      	add	sp, #24
   2c3b6:	bd80      	pop	{r7, pc}

0002c3b8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2c3b8:	b580      	push	{r7, lr}
   2c3ba:	b088      	sub	sp, #32
   2c3bc:	af00      	add	r7, sp, #0
   2c3be:	60f8      	str	r0, [r7, #12]
   2c3c0:	60b9      	str	r1, [r7, #8]
   2c3c2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2c3c4:	68fb      	ldr	r3, [r7, #12]
   2c3c6:	61fb      	str	r3, [r7, #28]
   2c3c8:	68bb      	ldr	r3, [r7, #8]
   2c3ca:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2c3cc:	2300      	movs	r3, #0
   2c3ce:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2c3d0:	46c0      	nop			; (mov r8, r8)
   2c3d2:	687b      	ldr	r3, [r7, #4]
   2c3d4:	1e5a      	subs	r2, r3, #1
   2c3d6:	607a      	str	r2, [r7, #4]
   2c3d8:	2b00      	cmp	r3, #0
   2c3da:	d00d      	beq.n	2c3f8 <mem_cmp+0x40>
   2c3dc:	69fb      	ldr	r3, [r7, #28]
   2c3de:	1c5a      	adds	r2, r3, #1
   2c3e0:	61fa      	str	r2, [r7, #28]
   2c3e2:	781b      	ldrb	r3, [r3, #0]
   2c3e4:	0019      	movs	r1, r3
   2c3e6:	69bb      	ldr	r3, [r7, #24]
   2c3e8:	1c5a      	adds	r2, r3, #1
   2c3ea:	61ba      	str	r2, [r7, #24]
   2c3ec:	781b      	ldrb	r3, [r3, #0]
   2c3ee:	1acb      	subs	r3, r1, r3
   2c3f0:	617b      	str	r3, [r7, #20]
   2c3f2:	697b      	ldr	r3, [r7, #20]
   2c3f4:	2b00      	cmp	r3, #0
   2c3f6:	d0ec      	beq.n	2c3d2 <mem_cmp+0x1a>
	return r;
   2c3f8:	697b      	ldr	r3, [r7, #20]
}
   2c3fa:	0018      	movs	r0, r3
   2c3fc:	46bd      	mov	sp, r7
   2c3fe:	b008      	add	sp, #32
   2c400:	bd80      	pop	{r7, pc}

0002c402 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2c402:	b580      	push	{r7, lr}
   2c404:	b082      	sub	sp, #8
   2c406:	af00      	add	r7, sp, #0
   2c408:	6078      	str	r0, [r7, #4]
   2c40a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2c40c:	e002      	b.n	2c414 <chk_chr+0x12>
   2c40e:	687b      	ldr	r3, [r7, #4]
   2c410:	3301      	adds	r3, #1
   2c412:	607b      	str	r3, [r7, #4]
   2c414:	687b      	ldr	r3, [r7, #4]
   2c416:	781b      	ldrb	r3, [r3, #0]
   2c418:	2b00      	cmp	r3, #0
   2c41a:	d005      	beq.n	2c428 <chk_chr+0x26>
   2c41c:	687b      	ldr	r3, [r7, #4]
   2c41e:	781b      	ldrb	r3, [r3, #0]
   2c420:	001a      	movs	r2, r3
   2c422:	683b      	ldr	r3, [r7, #0]
   2c424:	429a      	cmp	r2, r3
   2c426:	d1f2      	bne.n	2c40e <chk_chr+0xc>
	return *str;
   2c428:	687b      	ldr	r3, [r7, #4]
   2c42a:	781b      	ldrb	r3, [r3, #0]
}
   2c42c:	0018      	movs	r0, r3
   2c42e:	46bd      	mov	sp, r7
   2c430:	b002      	add	sp, #8
   2c432:	bd80      	pop	{r7, pc}

0002c434 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2c434:	b590      	push	{r4, r7, lr}
   2c436:	b085      	sub	sp, #20
   2c438:	af00      	add	r7, sp, #0
   2c43a:	6078      	str	r0, [r7, #4]
   2c43c:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2c43e:	687b      	ldr	r3, [r7, #4]
   2c440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2c442:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2c444:	68fa      	ldr	r2, [r7, #12]
   2c446:	683b      	ldr	r3, [r7, #0]
   2c448:	429a      	cmp	r2, r3
   2c44a:	d04e      	beq.n	2c4ea <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2c44c:	687b      	ldr	r3, [r7, #4]
   2c44e:	791b      	ldrb	r3, [r3, #4]
   2c450:	2b00      	cmp	r3, #0
   2c452:	d037      	beq.n	2c4c4 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2c454:	687b      	ldr	r3, [r7, #4]
   2c456:	7858      	ldrb	r0, [r3, #1]
   2c458:	687b      	ldr	r3, [r7, #4]
   2c45a:	3330      	adds	r3, #48	; 0x30
   2c45c:	0019      	movs	r1, r3
   2c45e:	68fa      	ldr	r2, [r7, #12]
   2c460:	2301      	movs	r3, #1
   2c462:	4c24      	ldr	r4, [pc, #144]	; (2c4f4 <move_window+0xc0>)
   2c464:	47a0      	blx	r4
   2c466:	1e03      	subs	r3, r0, #0
   2c468:	d001      	beq.n	2c46e <move_window+0x3a>
				return FR_DISK_ERR;
   2c46a:	2301      	movs	r3, #1
   2c46c:	e03e      	b.n	2c4ec <move_window+0xb8>
			fs->wflag = 0;
   2c46e:	687b      	ldr	r3, [r7, #4]
   2c470:	2200      	movs	r2, #0
   2c472:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2c474:	687b      	ldr	r3, [r7, #4]
   2c476:	6a1a      	ldr	r2, [r3, #32]
   2c478:	687b      	ldr	r3, [r7, #4]
   2c47a:	69db      	ldr	r3, [r3, #28]
   2c47c:	18d2      	adds	r2, r2, r3
   2c47e:	68fb      	ldr	r3, [r7, #12]
   2c480:	429a      	cmp	r2, r3
   2c482:	d91f      	bls.n	2c4c4 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c484:	230b      	movs	r3, #11
   2c486:	18fb      	adds	r3, r7, r3
   2c488:	687a      	ldr	r2, [r7, #4]
   2c48a:	78d2      	ldrb	r2, [r2, #3]
   2c48c:	701a      	strb	r2, [r3, #0]
   2c48e:	e014      	b.n	2c4ba <move_window+0x86>
					wsect += fs->fsize;
   2c490:	687b      	ldr	r3, [r7, #4]
   2c492:	69db      	ldr	r3, [r3, #28]
   2c494:	68fa      	ldr	r2, [r7, #12]
   2c496:	18d3      	adds	r3, r2, r3
   2c498:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2c49a:	687b      	ldr	r3, [r7, #4]
   2c49c:	7858      	ldrb	r0, [r3, #1]
   2c49e:	687b      	ldr	r3, [r7, #4]
   2c4a0:	3330      	adds	r3, #48	; 0x30
   2c4a2:	0019      	movs	r1, r3
   2c4a4:	68fa      	ldr	r2, [r7, #12]
   2c4a6:	2301      	movs	r3, #1
   2c4a8:	4c12      	ldr	r4, [pc, #72]	; (2c4f4 <move_window+0xc0>)
   2c4aa:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c4ac:	230b      	movs	r3, #11
   2c4ae:	18fb      	adds	r3, r7, r3
   2c4b0:	781a      	ldrb	r2, [r3, #0]
   2c4b2:	230b      	movs	r3, #11
   2c4b4:	18fb      	adds	r3, r7, r3
   2c4b6:	3a01      	subs	r2, #1
   2c4b8:	701a      	strb	r2, [r3, #0]
   2c4ba:	230b      	movs	r3, #11
   2c4bc:	18fb      	adds	r3, r7, r3
   2c4be:	781b      	ldrb	r3, [r3, #0]
   2c4c0:	2b01      	cmp	r3, #1
   2c4c2:	d8e5      	bhi.n	2c490 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2c4c4:	683b      	ldr	r3, [r7, #0]
   2c4c6:	2b00      	cmp	r3, #0
   2c4c8:	d00f      	beq.n	2c4ea <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2c4ca:	687b      	ldr	r3, [r7, #4]
   2c4cc:	7858      	ldrb	r0, [r3, #1]
   2c4ce:	687b      	ldr	r3, [r7, #4]
   2c4d0:	3330      	adds	r3, #48	; 0x30
   2c4d2:	0019      	movs	r1, r3
   2c4d4:	683a      	ldr	r2, [r7, #0]
   2c4d6:	2301      	movs	r3, #1
   2c4d8:	4c07      	ldr	r4, [pc, #28]	; (2c4f8 <move_window+0xc4>)
   2c4da:	47a0      	blx	r4
   2c4dc:	1e03      	subs	r3, r0, #0
   2c4de:	d001      	beq.n	2c4e4 <move_window+0xb0>
				return FR_DISK_ERR;
   2c4e0:	2301      	movs	r3, #1
   2c4e2:	e003      	b.n	2c4ec <move_window+0xb8>
			fs->winsect = sector;
   2c4e4:	687b      	ldr	r3, [r7, #4]
   2c4e6:	683a      	ldr	r2, [r7, #0]
   2c4e8:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2c4ea:	2300      	movs	r3, #0
}
   2c4ec:	0018      	movs	r0, r3
   2c4ee:	46bd      	mov	sp, r7
   2c4f0:	b005      	add	sp, #20
   2c4f2:	bd90      	pop	{r4, r7, pc}
   2c4f4:	0002c121 	.word	0x0002c121
   2c4f8:	0002c049 	.word	0x0002c049

0002c4fc <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2c4fc:	b590      	push	{r4, r7, lr}
   2c4fe:	b085      	sub	sp, #20
   2c500:	af00      	add	r7, sp, #0
   2c502:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2c504:	230f      	movs	r3, #15
   2c506:	18fc      	adds	r4, r7, r3
   2c508:	687b      	ldr	r3, [r7, #4]
   2c50a:	2100      	movs	r1, #0
   2c50c:	0018      	movs	r0, r3
   2c50e:	4b52      	ldr	r3, [pc, #328]	; (2c658 <sync+0x15c>)
   2c510:	4798      	blx	r3
   2c512:	0003      	movs	r3, r0
   2c514:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2c516:	230f      	movs	r3, #15
   2c518:	18fb      	adds	r3, r7, r3
   2c51a:	781b      	ldrb	r3, [r3, #0]
   2c51c:	2b00      	cmp	r3, #0
   2c51e:	d000      	beq.n	2c522 <sync+0x26>
   2c520:	e093      	b.n	2c64a <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2c522:	687b      	ldr	r3, [r7, #4]
   2c524:	781b      	ldrb	r3, [r3, #0]
   2c526:	2b03      	cmp	r3, #3
   2c528:	d000      	beq.n	2c52c <sync+0x30>
   2c52a:	e081      	b.n	2c630 <sync+0x134>
   2c52c:	687b      	ldr	r3, [r7, #4]
   2c52e:	795b      	ldrb	r3, [r3, #5]
   2c530:	2b00      	cmp	r3, #0
   2c532:	d07d      	beq.n	2c630 <sync+0x134>
			fs->winsect = 0;
   2c534:	687b      	ldr	r3, [r7, #4]
   2c536:	2200      	movs	r2, #0
   2c538:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2c53a:	687b      	ldr	r3, [r7, #4]
   2c53c:	3330      	adds	r3, #48	; 0x30
   2c53e:	0018      	movs	r0, r3
   2c540:	2380      	movs	r3, #128	; 0x80
   2c542:	009b      	lsls	r3, r3, #2
   2c544:	001a      	movs	r2, r3
   2c546:	2100      	movs	r1, #0
   2c548:	4b44      	ldr	r3, [pc, #272]	; (2c65c <sync+0x160>)
   2c54a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2c54c:	687b      	ldr	r3, [r7, #4]
   2c54e:	4a44      	ldr	r2, [pc, #272]	; (2c660 <sync+0x164>)
   2c550:	2155      	movs	r1, #85	; 0x55
   2c552:	5499      	strb	r1, [r3, r2]
   2c554:	687b      	ldr	r3, [r7, #4]
   2c556:	4a43      	ldr	r2, [pc, #268]	; (2c664 <sync+0x168>)
   2c558:	21aa      	movs	r1, #170	; 0xaa
   2c55a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2c55c:	687b      	ldr	r3, [r7, #4]
   2c55e:	2230      	movs	r2, #48	; 0x30
   2c560:	2152      	movs	r1, #82	; 0x52
   2c562:	5499      	strb	r1, [r3, r2]
   2c564:	687b      	ldr	r3, [r7, #4]
   2c566:	2231      	movs	r2, #49	; 0x31
   2c568:	2152      	movs	r1, #82	; 0x52
   2c56a:	5499      	strb	r1, [r3, r2]
   2c56c:	687b      	ldr	r3, [r7, #4]
   2c56e:	2232      	movs	r2, #50	; 0x32
   2c570:	2161      	movs	r1, #97	; 0x61
   2c572:	5499      	strb	r1, [r3, r2]
   2c574:	687b      	ldr	r3, [r7, #4]
   2c576:	2233      	movs	r2, #51	; 0x33
   2c578:	2141      	movs	r1, #65	; 0x41
   2c57a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2c57c:	687a      	ldr	r2, [r7, #4]
   2c57e:	2385      	movs	r3, #133	; 0x85
   2c580:	009b      	lsls	r3, r3, #2
   2c582:	2172      	movs	r1, #114	; 0x72
   2c584:	54d1      	strb	r1, [r2, r3]
   2c586:	687b      	ldr	r3, [r7, #4]
   2c588:	4a37      	ldr	r2, [pc, #220]	; (2c668 <sync+0x16c>)
   2c58a:	2172      	movs	r1, #114	; 0x72
   2c58c:	5499      	strb	r1, [r3, r2]
   2c58e:	687b      	ldr	r3, [r7, #4]
   2c590:	4a36      	ldr	r2, [pc, #216]	; (2c66c <sync+0x170>)
   2c592:	2141      	movs	r1, #65	; 0x41
   2c594:	5499      	strb	r1, [r3, r2]
   2c596:	687b      	ldr	r3, [r7, #4]
   2c598:	4a35      	ldr	r2, [pc, #212]	; (2c670 <sync+0x174>)
   2c59a:	2161      	movs	r1, #97	; 0x61
   2c59c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2c59e:	687b      	ldr	r3, [r7, #4]
   2c5a0:	691b      	ldr	r3, [r3, #16]
   2c5a2:	b2d9      	uxtb	r1, r3
   2c5a4:	687a      	ldr	r2, [r7, #4]
   2c5a6:	2386      	movs	r3, #134	; 0x86
   2c5a8:	009b      	lsls	r3, r3, #2
   2c5aa:	54d1      	strb	r1, [r2, r3]
   2c5ac:	687b      	ldr	r3, [r7, #4]
   2c5ae:	691b      	ldr	r3, [r3, #16]
   2c5b0:	b29b      	uxth	r3, r3
   2c5b2:	0a1b      	lsrs	r3, r3, #8
   2c5b4:	b29b      	uxth	r3, r3
   2c5b6:	b2d9      	uxtb	r1, r3
   2c5b8:	687b      	ldr	r3, [r7, #4]
   2c5ba:	4a2e      	ldr	r2, [pc, #184]	; (2c674 <sync+0x178>)
   2c5bc:	5499      	strb	r1, [r3, r2]
   2c5be:	687b      	ldr	r3, [r7, #4]
   2c5c0:	691b      	ldr	r3, [r3, #16]
   2c5c2:	0c1b      	lsrs	r3, r3, #16
   2c5c4:	b2d9      	uxtb	r1, r3
   2c5c6:	687b      	ldr	r3, [r7, #4]
   2c5c8:	4a2b      	ldr	r2, [pc, #172]	; (2c678 <sync+0x17c>)
   2c5ca:	5499      	strb	r1, [r3, r2]
   2c5cc:	687b      	ldr	r3, [r7, #4]
   2c5ce:	691b      	ldr	r3, [r3, #16]
   2c5d0:	0e1b      	lsrs	r3, r3, #24
   2c5d2:	b2d9      	uxtb	r1, r3
   2c5d4:	687b      	ldr	r3, [r7, #4]
   2c5d6:	4a29      	ldr	r2, [pc, #164]	; (2c67c <sync+0x180>)
   2c5d8:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2c5da:	687b      	ldr	r3, [r7, #4]
   2c5dc:	68db      	ldr	r3, [r3, #12]
   2c5de:	b2d9      	uxtb	r1, r3
   2c5e0:	687a      	ldr	r2, [r7, #4]
   2c5e2:	2387      	movs	r3, #135	; 0x87
   2c5e4:	009b      	lsls	r3, r3, #2
   2c5e6:	54d1      	strb	r1, [r2, r3]
   2c5e8:	687b      	ldr	r3, [r7, #4]
   2c5ea:	68db      	ldr	r3, [r3, #12]
   2c5ec:	b29b      	uxth	r3, r3
   2c5ee:	0a1b      	lsrs	r3, r3, #8
   2c5f0:	b29b      	uxth	r3, r3
   2c5f2:	b2d9      	uxtb	r1, r3
   2c5f4:	687b      	ldr	r3, [r7, #4]
   2c5f6:	4a22      	ldr	r2, [pc, #136]	; (2c680 <sync+0x184>)
   2c5f8:	5499      	strb	r1, [r3, r2]
   2c5fa:	687b      	ldr	r3, [r7, #4]
   2c5fc:	68db      	ldr	r3, [r3, #12]
   2c5fe:	0c1b      	lsrs	r3, r3, #16
   2c600:	b2d9      	uxtb	r1, r3
   2c602:	687b      	ldr	r3, [r7, #4]
   2c604:	4a1f      	ldr	r2, [pc, #124]	; (2c684 <sync+0x188>)
   2c606:	5499      	strb	r1, [r3, r2]
   2c608:	687b      	ldr	r3, [r7, #4]
   2c60a:	68db      	ldr	r3, [r3, #12]
   2c60c:	0e1b      	lsrs	r3, r3, #24
   2c60e:	b2d9      	uxtb	r1, r3
   2c610:	687b      	ldr	r3, [r7, #4]
   2c612:	4a1d      	ldr	r2, [pc, #116]	; (2c688 <sync+0x18c>)
   2c614:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2c616:	687b      	ldr	r3, [r7, #4]
   2c618:	7858      	ldrb	r0, [r3, #1]
   2c61a:	687b      	ldr	r3, [r7, #4]
   2c61c:	3330      	adds	r3, #48	; 0x30
   2c61e:	0019      	movs	r1, r3
   2c620:	687b      	ldr	r3, [r7, #4]
   2c622:	695a      	ldr	r2, [r3, #20]
   2c624:	2301      	movs	r3, #1
   2c626:	4c19      	ldr	r4, [pc, #100]	; (2c68c <sync+0x190>)
   2c628:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2c62a:	687b      	ldr	r3, [r7, #4]
   2c62c:	2200      	movs	r2, #0
   2c62e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2c630:	687b      	ldr	r3, [r7, #4]
   2c632:	785b      	ldrb	r3, [r3, #1]
   2c634:	2200      	movs	r2, #0
   2c636:	2100      	movs	r1, #0
   2c638:	0018      	movs	r0, r3
   2c63a:	4b15      	ldr	r3, [pc, #84]	; (2c690 <sync+0x194>)
   2c63c:	4798      	blx	r3
   2c63e:	1e03      	subs	r3, r0, #0
   2c640:	d003      	beq.n	2c64a <sync+0x14e>
			res = FR_DISK_ERR;
   2c642:	230f      	movs	r3, #15
   2c644:	18fb      	adds	r3, r7, r3
   2c646:	2201      	movs	r2, #1
   2c648:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c64a:	230f      	movs	r3, #15
   2c64c:	18fb      	adds	r3, r7, r3
   2c64e:	781b      	ldrb	r3, [r3, #0]
}
   2c650:	0018      	movs	r0, r3
   2c652:	46bd      	mov	sp, r7
   2c654:	b005      	add	sp, #20
   2c656:	bd90      	pop	{r4, r7, pc}
   2c658:	0002c435 	.word	0x0002c435
   2c65c:	0002c389 	.word	0x0002c389
   2c660:	0000022e 	.word	0x0000022e
   2c664:	0000022f 	.word	0x0000022f
   2c668:	00000215 	.word	0x00000215
   2c66c:	00000216 	.word	0x00000216
   2c670:	00000217 	.word	0x00000217
   2c674:	00000219 	.word	0x00000219
   2c678:	0000021a 	.word	0x0000021a
   2c67c:	0000021b 	.word	0x0000021b
   2c680:	0000021d 	.word	0x0000021d
   2c684:	0000021e 	.word	0x0000021e
   2c688:	0000021f 	.word	0x0000021f
   2c68c:	0002c121 	.word	0x0002c121
   2c690:	0002c1f9 	.word	0x0002c1f9

0002c694 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2c694:	b580      	push	{r7, lr}
   2c696:	b082      	sub	sp, #8
   2c698:	af00      	add	r7, sp, #0
   2c69a:	6078      	str	r0, [r7, #4]
   2c69c:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2c69e:	683b      	ldr	r3, [r7, #0]
   2c6a0:	3b02      	subs	r3, #2
   2c6a2:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2c6a4:	687b      	ldr	r3, [r7, #4]
   2c6a6:	699b      	ldr	r3, [r3, #24]
   2c6a8:	1e9a      	subs	r2, r3, #2
   2c6aa:	683b      	ldr	r3, [r7, #0]
   2c6ac:	429a      	cmp	r2, r3
   2c6ae:	d801      	bhi.n	2c6b4 <clust2sect+0x20>
   2c6b0:	2300      	movs	r3, #0
   2c6b2:	e007      	b.n	2c6c4 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2c6b4:	687b      	ldr	r3, [r7, #4]
   2c6b6:	789b      	ldrb	r3, [r3, #2]
   2c6b8:	001a      	movs	r2, r3
   2c6ba:	683b      	ldr	r3, [r7, #0]
   2c6bc:	435a      	muls	r2, r3
   2c6be:	687b      	ldr	r3, [r7, #4]
   2c6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c6c2:	18d3      	adds	r3, r2, r3
}
   2c6c4:	0018      	movs	r0, r3
   2c6c6:	46bd      	mov	sp, r7
   2c6c8:	b002      	add	sp, #8
   2c6ca:	bd80      	pop	{r7, pc}

0002c6cc <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2c6cc:	b580      	push	{r7, lr}
   2c6ce:	b086      	sub	sp, #24
   2c6d0:	af00      	add	r7, sp, #0
   2c6d2:	6078      	str	r0, [r7, #4]
   2c6d4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2c6d6:	683b      	ldr	r3, [r7, #0]
   2c6d8:	2b01      	cmp	r3, #1
   2c6da:	d904      	bls.n	2c6e6 <get_fat+0x1a>
   2c6dc:	687b      	ldr	r3, [r7, #4]
   2c6de:	699a      	ldr	r2, [r3, #24]
   2c6e0:	683b      	ldr	r3, [r7, #0]
   2c6e2:	429a      	cmp	r2, r3
   2c6e4:	d801      	bhi.n	2c6ea <get_fat+0x1e>
		return 1;
   2c6e6:	2301      	movs	r3, #1
   2c6e8:	e09f      	b.n	2c82a <get_fat+0x15e>

	switch (fs->fs_type) {
   2c6ea:	687b      	ldr	r3, [r7, #4]
   2c6ec:	781b      	ldrb	r3, [r3, #0]
   2c6ee:	2b02      	cmp	r3, #2
   2c6f0:	d048      	beq.n	2c784 <get_fat+0xb8>
   2c6f2:	2b03      	cmp	r3, #3
   2c6f4:	d067      	beq.n	2c7c6 <get_fat+0xfa>
   2c6f6:	2b01      	cmp	r3, #1
   2c6f8:	d000      	beq.n	2c6fc <get_fat+0x30>
   2c6fa:	e094      	b.n	2c826 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2c6fc:	683b      	ldr	r3, [r7, #0]
   2c6fe:	617b      	str	r3, [r7, #20]
   2c700:	697b      	ldr	r3, [r7, #20]
   2c702:	085b      	lsrs	r3, r3, #1
   2c704:	697a      	ldr	r2, [r7, #20]
   2c706:	18d3      	adds	r3, r2, r3
   2c708:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c70a:	687b      	ldr	r3, [r7, #4]
   2c70c:	6a1a      	ldr	r2, [r3, #32]
   2c70e:	697b      	ldr	r3, [r7, #20]
   2c710:	0a5b      	lsrs	r3, r3, #9
   2c712:	18d2      	adds	r2, r2, r3
   2c714:	687b      	ldr	r3, [r7, #4]
   2c716:	0011      	movs	r1, r2
   2c718:	0018      	movs	r0, r3
   2c71a:	4b46      	ldr	r3, [pc, #280]	; (2c834 <get_fat+0x168>)
   2c71c:	4798      	blx	r3
   2c71e:	1e03      	subs	r3, r0, #0
   2c720:	d000      	beq.n	2c724 <get_fat+0x58>
   2c722:	e079      	b.n	2c818 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2c724:	697b      	ldr	r3, [r7, #20]
   2c726:	05db      	lsls	r3, r3, #23
   2c728:	0ddb      	lsrs	r3, r3, #23
   2c72a:	687a      	ldr	r2, [r7, #4]
   2c72c:	2130      	movs	r1, #48	; 0x30
   2c72e:	18d3      	adds	r3, r2, r3
   2c730:	185b      	adds	r3, r3, r1
   2c732:	781b      	ldrb	r3, [r3, #0]
   2c734:	613b      	str	r3, [r7, #16]
   2c736:	697b      	ldr	r3, [r7, #20]
   2c738:	3301      	adds	r3, #1
   2c73a:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c73c:	687b      	ldr	r3, [r7, #4]
   2c73e:	6a1a      	ldr	r2, [r3, #32]
   2c740:	697b      	ldr	r3, [r7, #20]
   2c742:	0a5b      	lsrs	r3, r3, #9
   2c744:	18d2      	adds	r2, r2, r3
   2c746:	687b      	ldr	r3, [r7, #4]
   2c748:	0011      	movs	r1, r2
   2c74a:	0018      	movs	r0, r3
   2c74c:	4b39      	ldr	r3, [pc, #228]	; (2c834 <get_fat+0x168>)
   2c74e:	4798      	blx	r3
   2c750:	1e03      	subs	r3, r0, #0
   2c752:	d163      	bne.n	2c81c <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2c754:	697b      	ldr	r3, [r7, #20]
   2c756:	05db      	lsls	r3, r3, #23
   2c758:	0ddb      	lsrs	r3, r3, #23
   2c75a:	687a      	ldr	r2, [r7, #4]
   2c75c:	2130      	movs	r1, #48	; 0x30
   2c75e:	18d3      	adds	r3, r2, r3
   2c760:	185b      	adds	r3, r3, r1
   2c762:	781b      	ldrb	r3, [r3, #0]
   2c764:	021b      	lsls	r3, r3, #8
   2c766:	001a      	movs	r2, r3
   2c768:	693b      	ldr	r3, [r7, #16]
   2c76a:	4313      	orrs	r3, r2
   2c76c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2c76e:	683b      	ldr	r3, [r7, #0]
   2c770:	2201      	movs	r2, #1
   2c772:	4013      	ands	r3, r2
   2c774:	d002      	beq.n	2c77c <get_fat+0xb0>
   2c776:	693b      	ldr	r3, [r7, #16]
   2c778:	091b      	lsrs	r3, r3, #4
   2c77a:	e056      	b.n	2c82a <get_fat+0x15e>
   2c77c:	693b      	ldr	r3, [r7, #16]
   2c77e:	051b      	lsls	r3, r3, #20
   2c780:	0d1b      	lsrs	r3, r3, #20
   2c782:	e052      	b.n	2c82a <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c784:	687b      	ldr	r3, [r7, #4]
   2c786:	6a1a      	ldr	r2, [r3, #32]
   2c788:	683b      	ldr	r3, [r7, #0]
   2c78a:	0a1b      	lsrs	r3, r3, #8
   2c78c:	18d2      	adds	r2, r2, r3
   2c78e:	687b      	ldr	r3, [r7, #4]
   2c790:	0011      	movs	r1, r2
   2c792:	0018      	movs	r0, r3
   2c794:	4b27      	ldr	r3, [pc, #156]	; (2c834 <get_fat+0x168>)
   2c796:	4798      	blx	r3
   2c798:	1e03      	subs	r3, r0, #0
   2c79a:	d141      	bne.n	2c820 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2c79c:	683b      	ldr	r3, [r7, #0]
   2c79e:	005a      	lsls	r2, r3, #1
   2c7a0:	23ff      	movs	r3, #255	; 0xff
   2c7a2:	005b      	lsls	r3, r3, #1
   2c7a4:	4013      	ands	r3, r2
   2c7a6:	3330      	adds	r3, #48	; 0x30
   2c7a8:	687a      	ldr	r2, [r7, #4]
   2c7aa:	18d3      	adds	r3, r2, r3
   2c7ac:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2c7ae:	68fb      	ldr	r3, [r7, #12]
   2c7b0:	3301      	adds	r3, #1
   2c7b2:	781b      	ldrb	r3, [r3, #0]
   2c7b4:	021b      	lsls	r3, r3, #8
   2c7b6:	b21a      	sxth	r2, r3
   2c7b8:	68fb      	ldr	r3, [r7, #12]
   2c7ba:	781b      	ldrb	r3, [r3, #0]
   2c7bc:	b21b      	sxth	r3, r3
   2c7be:	4313      	orrs	r3, r2
   2c7c0:	b21b      	sxth	r3, r3
   2c7c2:	b29b      	uxth	r3, r3
   2c7c4:	e031      	b.n	2c82a <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c7c6:	687b      	ldr	r3, [r7, #4]
   2c7c8:	6a1a      	ldr	r2, [r3, #32]
   2c7ca:	683b      	ldr	r3, [r7, #0]
   2c7cc:	09db      	lsrs	r3, r3, #7
   2c7ce:	18d2      	adds	r2, r2, r3
   2c7d0:	687b      	ldr	r3, [r7, #4]
   2c7d2:	0011      	movs	r1, r2
   2c7d4:	0018      	movs	r0, r3
   2c7d6:	4b17      	ldr	r3, [pc, #92]	; (2c834 <get_fat+0x168>)
   2c7d8:	4798      	blx	r3
   2c7da:	1e03      	subs	r3, r0, #0
   2c7dc:	d122      	bne.n	2c824 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2c7de:	683b      	ldr	r3, [r7, #0]
   2c7e0:	009a      	lsls	r2, r3, #2
   2c7e2:	23fe      	movs	r3, #254	; 0xfe
   2c7e4:	005b      	lsls	r3, r3, #1
   2c7e6:	4013      	ands	r3, r2
   2c7e8:	3330      	adds	r3, #48	; 0x30
   2c7ea:	687a      	ldr	r2, [r7, #4]
   2c7ec:	18d3      	adds	r3, r2, r3
   2c7ee:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2c7f0:	68fb      	ldr	r3, [r7, #12]
   2c7f2:	3303      	adds	r3, #3
   2c7f4:	781b      	ldrb	r3, [r3, #0]
   2c7f6:	061a      	lsls	r2, r3, #24
   2c7f8:	68fb      	ldr	r3, [r7, #12]
   2c7fa:	3302      	adds	r3, #2
   2c7fc:	781b      	ldrb	r3, [r3, #0]
   2c7fe:	041b      	lsls	r3, r3, #16
   2c800:	4313      	orrs	r3, r2
   2c802:	68fa      	ldr	r2, [r7, #12]
   2c804:	3201      	adds	r2, #1
   2c806:	7812      	ldrb	r2, [r2, #0]
   2c808:	0212      	lsls	r2, r2, #8
   2c80a:	4313      	orrs	r3, r2
   2c80c:	68fa      	ldr	r2, [r7, #12]
   2c80e:	7812      	ldrb	r2, [r2, #0]
   2c810:	4313      	orrs	r3, r2
   2c812:	011b      	lsls	r3, r3, #4
   2c814:	091b      	lsrs	r3, r3, #4
   2c816:	e008      	b.n	2c82a <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c818:	46c0      	nop			; (mov r8, r8)
   2c81a:	e004      	b.n	2c826 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c81c:	46c0      	nop			; (mov r8, r8)
   2c81e:	e002      	b.n	2c826 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c820:	46c0      	nop			; (mov r8, r8)
   2c822:	e000      	b.n	2c826 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c824:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2c826:	2301      	movs	r3, #1
   2c828:	425b      	negs	r3, r3
}
   2c82a:	0018      	movs	r0, r3
   2c82c:	46bd      	mov	sp, r7
   2c82e:	b006      	add	sp, #24
   2c830:	bd80      	pop	{r7, pc}
   2c832:	46c0      	nop			; (mov r8, r8)
   2c834:	0002c435 	.word	0x0002c435

0002c838 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2c838:	b590      	push	{r4, r7, lr}
   2c83a:	b089      	sub	sp, #36	; 0x24
   2c83c:	af00      	add	r7, sp, #0
   2c83e:	60f8      	str	r0, [r7, #12]
   2c840:	60b9      	str	r1, [r7, #8]
   2c842:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2c844:	68bb      	ldr	r3, [r7, #8]
   2c846:	2b01      	cmp	r3, #1
   2c848:	d904      	bls.n	2c854 <put_fat+0x1c>
   2c84a:	68fb      	ldr	r3, [r7, #12]
   2c84c:	699a      	ldr	r2, [r3, #24]
   2c84e:	68bb      	ldr	r3, [r7, #8]
   2c850:	429a      	cmp	r2, r3
   2c852:	d804      	bhi.n	2c85e <put_fat+0x26>
		res = FR_INT_ERR;
   2c854:	231f      	movs	r3, #31
   2c856:	18fb      	adds	r3, r7, r3
   2c858:	2202      	movs	r2, #2
   2c85a:	701a      	strb	r2, [r3, #0]
   2c85c:	e100      	b.n	2ca60 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2c85e:	68fb      	ldr	r3, [r7, #12]
   2c860:	781b      	ldrb	r3, [r3, #0]
   2c862:	2b02      	cmp	r3, #2
   2c864:	d100      	bne.n	2c868 <put_fat+0x30>
   2c866:	e078      	b.n	2c95a <put_fat+0x122>
   2c868:	2b03      	cmp	r3, #3
   2c86a:	d100      	bne.n	2c86e <put_fat+0x36>
   2c86c:	e09e      	b.n	2c9ac <put_fat+0x174>
   2c86e:	2b01      	cmp	r3, #1
   2c870:	d000      	beq.n	2c874 <put_fat+0x3c>
   2c872:	e0e6      	b.n	2ca42 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2c874:	68bb      	ldr	r3, [r7, #8]
   2c876:	61bb      	str	r3, [r7, #24]
   2c878:	69bb      	ldr	r3, [r7, #24]
   2c87a:	085b      	lsrs	r3, r3, #1
   2c87c:	69ba      	ldr	r2, [r7, #24]
   2c87e:	18d3      	adds	r3, r2, r3
   2c880:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c882:	68fb      	ldr	r3, [r7, #12]
   2c884:	6a1a      	ldr	r2, [r3, #32]
   2c886:	69bb      	ldr	r3, [r7, #24]
   2c888:	0a5b      	lsrs	r3, r3, #9
   2c88a:	18d2      	adds	r2, r2, r3
   2c88c:	231f      	movs	r3, #31
   2c88e:	18fc      	adds	r4, r7, r3
   2c890:	68fb      	ldr	r3, [r7, #12]
   2c892:	0011      	movs	r1, r2
   2c894:	0018      	movs	r0, r3
   2c896:	4b76      	ldr	r3, [pc, #472]	; (2ca70 <put_fat+0x238>)
   2c898:	4798      	blx	r3
   2c89a:	0003      	movs	r3, r0
   2c89c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c89e:	231f      	movs	r3, #31
   2c8a0:	18fb      	adds	r3, r7, r3
   2c8a2:	781b      	ldrb	r3, [r3, #0]
   2c8a4:	2b00      	cmp	r3, #0
   2c8a6:	d000      	beq.n	2c8aa <put_fat+0x72>
   2c8a8:	e0d0      	b.n	2ca4c <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2c8aa:	69bb      	ldr	r3, [r7, #24]
   2c8ac:	05db      	lsls	r3, r3, #23
   2c8ae:	0ddb      	lsrs	r3, r3, #23
   2c8b0:	3330      	adds	r3, #48	; 0x30
   2c8b2:	68fa      	ldr	r2, [r7, #12]
   2c8b4:	18d3      	adds	r3, r2, r3
   2c8b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2c8b8:	68bb      	ldr	r3, [r7, #8]
   2c8ba:	2201      	movs	r2, #1
   2c8bc:	4013      	ands	r3, r2
   2c8be:	d00d      	beq.n	2c8dc <put_fat+0xa4>
   2c8c0:	697b      	ldr	r3, [r7, #20]
   2c8c2:	781b      	ldrb	r3, [r3, #0]
   2c8c4:	b25b      	sxtb	r3, r3
   2c8c6:	220f      	movs	r2, #15
   2c8c8:	4013      	ands	r3, r2
   2c8ca:	b25a      	sxtb	r2, r3
   2c8cc:	687b      	ldr	r3, [r7, #4]
   2c8ce:	b2db      	uxtb	r3, r3
   2c8d0:	011b      	lsls	r3, r3, #4
   2c8d2:	b25b      	sxtb	r3, r3
   2c8d4:	4313      	orrs	r3, r2
   2c8d6:	b25b      	sxtb	r3, r3
   2c8d8:	b2db      	uxtb	r3, r3
   2c8da:	e001      	b.n	2c8e0 <put_fat+0xa8>
   2c8dc:	687b      	ldr	r3, [r7, #4]
   2c8de:	b2db      	uxtb	r3, r3
   2c8e0:	697a      	ldr	r2, [r7, #20]
   2c8e2:	7013      	strb	r3, [r2, #0]
			bc++;
   2c8e4:	69bb      	ldr	r3, [r7, #24]
   2c8e6:	3301      	adds	r3, #1
   2c8e8:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2c8ea:	68fb      	ldr	r3, [r7, #12]
   2c8ec:	2201      	movs	r2, #1
   2c8ee:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c8f0:	68fb      	ldr	r3, [r7, #12]
   2c8f2:	6a1a      	ldr	r2, [r3, #32]
   2c8f4:	69bb      	ldr	r3, [r7, #24]
   2c8f6:	0a5b      	lsrs	r3, r3, #9
   2c8f8:	18d2      	adds	r2, r2, r3
   2c8fa:	231f      	movs	r3, #31
   2c8fc:	18fc      	adds	r4, r7, r3
   2c8fe:	68fb      	ldr	r3, [r7, #12]
   2c900:	0011      	movs	r1, r2
   2c902:	0018      	movs	r0, r3
   2c904:	4b5a      	ldr	r3, [pc, #360]	; (2ca70 <put_fat+0x238>)
   2c906:	4798      	blx	r3
   2c908:	0003      	movs	r3, r0
   2c90a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c90c:	231f      	movs	r3, #31
   2c90e:	18fb      	adds	r3, r7, r3
   2c910:	781b      	ldrb	r3, [r3, #0]
   2c912:	2b00      	cmp	r3, #0
   2c914:	d000      	beq.n	2c918 <put_fat+0xe0>
   2c916:	e09b      	b.n	2ca50 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2c918:	69bb      	ldr	r3, [r7, #24]
   2c91a:	05db      	lsls	r3, r3, #23
   2c91c:	0ddb      	lsrs	r3, r3, #23
   2c91e:	3330      	adds	r3, #48	; 0x30
   2c920:	68fa      	ldr	r2, [r7, #12]
   2c922:	18d3      	adds	r3, r2, r3
   2c924:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2c926:	68bb      	ldr	r3, [r7, #8]
   2c928:	2201      	movs	r2, #1
   2c92a:	4013      	ands	r3, r2
   2c92c:	d003      	beq.n	2c936 <put_fat+0xfe>
   2c92e:	687b      	ldr	r3, [r7, #4]
   2c930:	091b      	lsrs	r3, r3, #4
   2c932:	b2db      	uxtb	r3, r3
   2c934:	e00e      	b.n	2c954 <put_fat+0x11c>
   2c936:	697b      	ldr	r3, [r7, #20]
   2c938:	781b      	ldrb	r3, [r3, #0]
   2c93a:	b25b      	sxtb	r3, r3
   2c93c:	220f      	movs	r2, #15
   2c93e:	4393      	bics	r3, r2
   2c940:	b25a      	sxtb	r2, r3
   2c942:	687b      	ldr	r3, [r7, #4]
   2c944:	0a1b      	lsrs	r3, r3, #8
   2c946:	b25b      	sxtb	r3, r3
   2c948:	210f      	movs	r1, #15
   2c94a:	400b      	ands	r3, r1
   2c94c:	b25b      	sxtb	r3, r3
   2c94e:	4313      	orrs	r3, r2
   2c950:	b25b      	sxtb	r3, r3
   2c952:	b2db      	uxtb	r3, r3
   2c954:	697a      	ldr	r2, [r7, #20]
   2c956:	7013      	strb	r3, [r2, #0]
			break;
   2c958:	e07f      	b.n	2ca5a <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2c95a:	68fb      	ldr	r3, [r7, #12]
   2c95c:	6a1a      	ldr	r2, [r3, #32]
   2c95e:	68bb      	ldr	r3, [r7, #8]
   2c960:	0a1b      	lsrs	r3, r3, #8
   2c962:	18d2      	adds	r2, r2, r3
   2c964:	231f      	movs	r3, #31
   2c966:	18fc      	adds	r4, r7, r3
   2c968:	68fb      	ldr	r3, [r7, #12]
   2c96a:	0011      	movs	r1, r2
   2c96c:	0018      	movs	r0, r3
   2c96e:	4b40      	ldr	r3, [pc, #256]	; (2ca70 <put_fat+0x238>)
   2c970:	4798      	blx	r3
   2c972:	0003      	movs	r3, r0
   2c974:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c976:	231f      	movs	r3, #31
   2c978:	18fb      	adds	r3, r7, r3
   2c97a:	781b      	ldrb	r3, [r3, #0]
   2c97c:	2b00      	cmp	r3, #0
   2c97e:	d169      	bne.n	2ca54 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2c980:	68bb      	ldr	r3, [r7, #8]
   2c982:	005a      	lsls	r2, r3, #1
   2c984:	23ff      	movs	r3, #255	; 0xff
   2c986:	005b      	lsls	r3, r3, #1
   2c988:	4013      	ands	r3, r2
   2c98a:	3330      	adds	r3, #48	; 0x30
   2c98c:	68fa      	ldr	r2, [r7, #12]
   2c98e:	18d3      	adds	r3, r2, r3
   2c990:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2c992:	687b      	ldr	r3, [r7, #4]
   2c994:	b2da      	uxtb	r2, r3
   2c996:	697b      	ldr	r3, [r7, #20]
   2c998:	701a      	strb	r2, [r3, #0]
   2c99a:	697b      	ldr	r3, [r7, #20]
   2c99c:	3301      	adds	r3, #1
   2c99e:	687a      	ldr	r2, [r7, #4]
   2c9a0:	b292      	uxth	r2, r2
   2c9a2:	0a12      	lsrs	r2, r2, #8
   2c9a4:	b292      	uxth	r2, r2
   2c9a6:	b2d2      	uxtb	r2, r2
   2c9a8:	701a      	strb	r2, [r3, #0]
			break;
   2c9aa:	e056      	b.n	2ca5a <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2c9ac:	68fb      	ldr	r3, [r7, #12]
   2c9ae:	6a1a      	ldr	r2, [r3, #32]
   2c9b0:	68bb      	ldr	r3, [r7, #8]
   2c9b2:	09db      	lsrs	r3, r3, #7
   2c9b4:	18d2      	adds	r2, r2, r3
   2c9b6:	231f      	movs	r3, #31
   2c9b8:	18fc      	adds	r4, r7, r3
   2c9ba:	68fb      	ldr	r3, [r7, #12]
   2c9bc:	0011      	movs	r1, r2
   2c9be:	0018      	movs	r0, r3
   2c9c0:	4b2b      	ldr	r3, [pc, #172]	; (2ca70 <put_fat+0x238>)
   2c9c2:	4798      	blx	r3
   2c9c4:	0003      	movs	r3, r0
   2c9c6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c9c8:	231f      	movs	r3, #31
   2c9ca:	18fb      	adds	r3, r7, r3
   2c9cc:	781b      	ldrb	r3, [r3, #0]
   2c9ce:	2b00      	cmp	r3, #0
   2c9d0:	d142      	bne.n	2ca58 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2c9d2:	68bb      	ldr	r3, [r7, #8]
   2c9d4:	009a      	lsls	r2, r3, #2
   2c9d6:	23fe      	movs	r3, #254	; 0xfe
   2c9d8:	005b      	lsls	r3, r3, #1
   2c9da:	4013      	ands	r3, r2
   2c9dc:	3330      	adds	r3, #48	; 0x30
   2c9de:	68fa      	ldr	r2, [r7, #12]
   2c9e0:	18d3      	adds	r3, r2, r3
   2c9e2:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2c9e4:	697b      	ldr	r3, [r7, #20]
   2c9e6:	3303      	adds	r3, #3
   2c9e8:	781b      	ldrb	r3, [r3, #0]
   2c9ea:	061a      	lsls	r2, r3, #24
   2c9ec:	697b      	ldr	r3, [r7, #20]
   2c9ee:	3302      	adds	r3, #2
   2c9f0:	781b      	ldrb	r3, [r3, #0]
   2c9f2:	041b      	lsls	r3, r3, #16
   2c9f4:	4313      	orrs	r3, r2
   2c9f6:	697a      	ldr	r2, [r7, #20]
   2c9f8:	3201      	adds	r2, #1
   2c9fa:	7812      	ldrb	r2, [r2, #0]
   2c9fc:	0212      	lsls	r2, r2, #8
   2c9fe:	4313      	orrs	r3, r2
   2ca00:	697a      	ldr	r2, [r7, #20]
   2ca02:	7812      	ldrb	r2, [r2, #0]
   2ca04:	4313      	orrs	r3, r2
   2ca06:	0f1b      	lsrs	r3, r3, #28
   2ca08:	071b      	lsls	r3, r3, #28
   2ca0a:	687a      	ldr	r2, [r7, #4]
   2ca0c:	4313      	orrs	r3, r2
   2ca0e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2ca10:	687b      	ldr	r3, [r7, #4]
   2ca12:	b2da      	uxtb	r2, r3
   2ca14:	697b      	ldr	r3, [r7, #20]
   2ca16:	701a      	strb	r2, [r3, #0]
   2ca18:	697b      	ldr	r3, [r7, #20]
   2ca1a:	3301      	adds	r3, #1
   2ca1c:	687a      	ldr	r2, [r7, #4]
   2ca1e:	b292      	uxth	r2, r2
   2ca20:	0a12      	lsrs	r2, r2, #8
   2ca22:	b292      	uxth	r2, r2
   2ca24:	b2d2      	uxtb	r2, r2
   2ca26:	701a      	strb	r2, [r3, #0]
   2ca28:	697b      	ldr	r3, [r7, #20]
   2ca2a:	3302      	adds	r3, #2
   2ca2c:	687a      	ldr	r2, [r7, #4]
   2ca2e:	0c12      	lsrs	r2, r2, #16
   2ca30:	b2d2      	uxtb	r2, r2
   2ca32:	701a      	strb	r2, [r3, #0]
   2ca34:	697b      	ldr	r3, [r7, #20]
   2ca36:	3303      	adds	r3, #3
   2ca38:	687a      	ldr	r2, [r7, #4]
   2ca3a:	0e12      	lsrs	r2, r2, #24
   2ca3c:	b2d2      	uxtb	r2, r2
   2ca3e:	701a      	strb	r2, [r3, #0]
			break;
   2ca40:	e00b      	b.n	2ca5a <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2ca42:	231f      	movs	r3, #31
   2ca44:	18fb      	adds	r3, r7, r3
   2ca46:	2202      	movs	r2, #2
   2ca48:	701a      	strb	r2, [r3, #0]
   2ca4a:	e006      	b.n	2ca5a <put_fat+0x222>
			if (res != FR_OK) break;
   2ca4c:	46c0      	nop			; (mov r8, r8)
   2ca4e:	e004      	b.n	2ca5a <put_fat+0x222>
			if (res != FR_OK) break;
   2ca50:	46c0      	nop			; (mov r8, r8)
   2ca52:	e002      	b.n	2ca5a <put_fat+0x222>
			if (res != FR_OK) break;
   2ca54:	46c0      	nop			; (mov r8, r8)
   2ca56:	e000      	b.n	2ca5a <put_fat+0x222>
			if (res != FR_OK) break;
   2ca58:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2ca5a:	68fb      	ldr	r3, [r7, #12]
   2ca5c:	2201      	movs	r2, #1
   2ca5e:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2ca60:	231f      	movs	r3, #31
   2ca62:	18fb      	adds	r3, r7, r3
   2ca64:	781b      	ldrb	r3, [r3, #0]
}
   2ca66:	0018      	movs	r0, r3
   2ca68:	46bd      	mov	sp, r7
   2ca6a:	b009      	add	sp, #36	; 0x24
   2ca6c:	bd90      	pop	{r4, r7, pc}
   2ca6e:	46c0      	nop			; (mov r8, r8)
   2ca70:	0002c435 	.word	0x0002c435

0002ca74 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2ca74:	b590      	push	{r4, r7, lr}
   2ca76:	b085      	sub	sp, #20
   2ca78:	af00      	add	r7, sp, #0
   2ca7a:	6078      	str	r0, [r7, #4]
   2ca7c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2ca7e:	683b      	ldr	r3, [r7, #0]
   2ca80:	2b01      	cmp	r3, #1
   2ca82:	d904      	bls.n	2ca8e <remove_chain+0x1a>
   2ca84:	687b      	ldr	r3, [r7, #4]
   2ca86:	699a      	ldr	r2, [r3, #24]
   2ca88:	683b      	ldr	r3, [r7, #0]
   2ca8a:	429a      	cmp	r2, r3
   2ca8c:	d804      	bhi.n	2ca98 <remove_chain+0x24>
		res = FR_INT_ERR;
   2ca8e:	230f      	movs	r3, #15
   2ca90:	18fb      	adds	r3, r7, r3
   2ca92:	2202      	movs	r2, #2
   2ca94:	701a      	strb	r2, [r3, #0]
   2ca96:	e045      	b.n	2cb24 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2ca98:	230f      	movs	r3, #15
   2ca9a:	18fb      	adds	r3, r7, r3
   2ca9c:	2200      	movs	r2, #0
   2ca9e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2caa0:	e037      	b.n	2cb12 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2caa2:	683a      	ldr	r2, [r7, #0]
   2caa4:	687b      	ldr	r3, [r7, #4]
   2caa6:	0011      	movs	r1, r2
   2caa8:	0018      	movs	r0, r3
   2caaa:	4b22      	ldr	r3, [pc, #136]	; (2cb34 <remove_chain+0xc0>)
   2caac:	4798      	blx	r3
   2caae:	0003      	movs	r3, r0
   2cab0:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2cab2:	68bb      	ldr	r3, [r7, #8]
   2cab4:	2b00      	cmp	r3, #0
   2cab6:	d032      	beq.n	2cb1e <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2cab8:	68bb      	ldr	r3, [r7, #8]
   2caba:	2b01      	cmp	r3, #1
   2cabc:	d104      	bne.n	2cac8 <remove_chain+0x54>
   2cabe:	230f      	movs	r3, #15
   2cac0:	18fb      	adds	r3, r7, r3
   2cac2:	2202      	movs	r2, #2
   2cac4:	701a      	strb	r2, [r3, #0]
   2cac6:	e02d      	b.n	2cb24 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2cac8:	68bb      	ldr	r3, [r7, #8]
   2caca:	3301      	adds	r3, #1
   2cacc:	d104      	bne.n	2cad8 <remove_chain+0x64>
   2cace:	230f      	movs	r3, #15
   2cad0:	18fb      	adds	r3, r7, r3
   2cad2:	2201      	movs	r2, #1
   2cad4:	701a      	strb	r2, [r3, #0]
   2cad6:	e025      	b.n	2cb24 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2cad8:	230f      	movs	r3, #15
   2cada:	18fc      	adds	r4, r7, r3
   2cadc:	6839      	ldr	r1, [r7, #0]
   2cade:	687b      	ldr	r3, [r7, #4]
   2cae0:	2200      	movs	r2, #0
   2cae2:	0018      	movs	r0, r3
   2cae4:	4b14      	ldr	r3, [pc, #80]	; (2cb38 <remove_chain+0xc4>)
   2cae6:	4798      	blx	r3
   2cae8:	0003      	movs	r3, r0
   2caea:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2caec:	230f      	movs	r3, #15
   2caee:	18fb      	adds	r3, r7, r3
   2caf0:	781b      	ldrb	r3, [r3, #0]
   2caf2:	2b00      	cmp	r3, #0
   2caf4:	d115      	bne.n	2cb22 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2caf6:	687b      	ldr	r3, [r7, #4]
   2caf8:	691b      	ldr	r3, [r3, #16]
   2cafa:	3301      	adds	r3, #1
   2cafc:	d007      	beq.n	2cb0e <remove_chain+0x9a>
				fs->free_clust++;
   2cafe:	687b      	ldr	r3, [r7, #4]
   2cb00:	691b      	ldr	r3, [r3, #16]
   2cb02:	1c5a      	adds	r2, r3, #1
   2cb04:	687b      	ldr	r3, [r7, #4]
   2cb06:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2cb08:	687b      	ldr	r3, [r7, #4]
   2cb0a:	2201      	movs	r2, #1
   2cb0c:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2cb0e:	68bb      	ldr	r3, [r7, #8]
   2cb10:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2cb12:	687b      	ldr	r3, [r7, #4]
   2cb14:	699a      	ldr	r2, [r3, #24]
   2cb16:	683b      	ldr	r3, [r7, #0]
   2cb18:	429a      	cmp	r2, r3
   2cb1a:	d8c2      	bhi.n	2caa2 <remove_chain+0x2e>
   2cb1c:	e002      	b.n	2cb24 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2cb1e:	46c0      	nop			; (mov r8, r8)
   2cb20:	e000      	b.n	2cb24 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2cb22:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2cb24:	230f      	movs	r3, #15
   2cb26:	18fb      	adds	r3, r7, r3
   2cb28:	781b      	ldrb	r3, [r3, #0]
}
   2cb2a:	0018      	movs	r0, r3
   2cb2c:	46bd      	mov	sp, r7
   2cb2e:	b005      	add	sp, #20
   2cb30:	bd90      	pop	{r4, r7, pc}
   2cb32:	46c0      	nop			; (mov r8, r8)
   2cb34:	0002c6cd 	.word	0x0002c6cd
   2cb38:	0002c839 	.word	0x0002c839

0002cb3c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2cb3c:	b590      	push	{r4, r7, lr}
   2cb3e:	b087      	sub	sp, #28
   2cb40:	af00      	add	r7, sp, #0
   2cb42:	6078      	str	r0, [r7, #4]
   2cb44:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2cb46:	683b      	ldr	r3, [r7, #0]
   2cb48:	2b00      	cmp	r3, #0
   2cb4a:	d10d      	bne.n	2cb68 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2cb4c:	687b      	ldr	r3, [r7, #4]
   2cb4e:	68db      	ldr	r3, [r3, #12]
   2cb50:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2cb52:	693b      	ldr	r3, [r7, #16]
   2cb54:	2b00      	cmp	r3, #0
   2cb56:	d004      	beq.n	2cb62 <create_chain+0x26>
   2cb58:	687b      	ldr	r3, [r7, #4]
   2cb5a:	699a      	ldr	r2, [r3, #24]
   2cb5c:	693b      	ldr	r3, [r7, #16]
   2cb5e:	429a      	cmp	r2, r3
   2cb60:	d818      	bhi.n	2cb94 <create_chain+0x58>
   2cb62:	2301      	movs	r3, #1
   2cb64:	613b      	str	r3, [r7, #16]
   2cb66:	e015      	b.n	2cb94 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2cb68:	683a      	ldr	r2, [r7, #0]
   2cb6a:	687b      	ldr	r3, [r7, #4]
   2cb6c:	0011      	movs	r1, r2
   2cb6e:	0018      	movs	r0, r3
   2cb70:	4b3e      	ldr	r3, [pc, #248]	; (2cc6c <create_chain+0x130>)
   2cb72:	4798      	blx	r3
   2cb74:	0003      	movs	r3, r0
   2cb76:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2cb78:	68bb      	ldr	r3, [r7, #8]
   2cb7a:	2b01      	cmp	r3, #1
   2cb7c:	d801      	bhi.n	2cb82 <create_chain+0x46>
   2cb7e:	2301      	movs	r3, #1
   2cb80:	e070      	b.n	2cc64 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2cb82:	687b      	ldr	r3, [r7, #4]
   2cb84:	699a      	ldr	r2, [r3, #24]
   2cb86:	68bb      	ldr	r3, [r7, #8]
   2cb88:	429a      	cmp	r2, r3
   2cb8a:	d901      	bls.n	2cb90 <create_chain+0x54>
   2cb8c:	68bb      	ldr	r3, [r7, #8]
   2cb8e:	e069      	b.n	2cc64 <create_chain+0x128>
		scl = clst;
   2cb90:	683b      	ldr	r3, [r7, #0]
   2cb92:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2cb94:	693b      	ldr	r3, [r7, #16]
   2cb96:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2cb98:	697b      	ldr	r3, [r7, #20]
   2cb9a:	3301      	adds	r3, #1
   2cb9c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2cb9e:	687b      	ldr	r3, [r7, #4]
   2cba0:	699a      	ldr	r2, [r3, #24]
   2cba2:	697b      	ldr	r3, [r7, #20]
   2cba4:	429a      	cmp	r2, r3
   2cba6:	d807      	bhi.n	2cbb8 <create_chain+0x7c>
			ncl = 2;
   2cba8:	2302      	movs	r3, #2
   2cbaa:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2cbac:	697a      	ldr	r2, [r7, #20]
   2cbae:	693b      	ldr	r3, [r7, #16]
   2cbb0:	429a      	cmp	r2, r3
   2cbb2:	d901      	bls.n	2cbb8 <create_chain+0x7c>
   2cbb4:	2300      	movs	r3, #0
   2cbb6:	e055      	b.n	2cc64 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2cbb8:	697a      	ldr	r2, [r7, #20]
   2cbba:	687b      	ldr	r3, [r7, #4]
   2cbbc:	0011      	movs	r1, r2
   2cbbe:	0018      	movs	r0, r3
   2cbc0:	4b2a      	ldr	r3, [pc, #168]	; (2cc6c <create_chain+0x130>)
   2cbc2:	4798      	blx	r3
   2cbc4:	0003      	movs	r3, r0
   2cbc6:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2cbc8:	68bb      	ldr	r3, [r7, #8]
   2cbca:	2b00      	cmp	r3, #0
   2cbcc:	d00d      	beq.n	2cbea <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2cbce:	68bb      	ldr	r3, [r7, #8]
   2cbd0:	3301      	adds	r3, #1
   2cbd2:	d002      	beq.n	2cbda <create_chain+0x9e>
   2cbd4:	68bb      	ldr	r3, [r7, #8]
   2cbd6:	2b01      	cmp	r3, #1
   2cbd8:	d101      	bne.n	2cbde <create_chain+0xa2>
			return cs;
   2cbda:	68bb      	ldr	r3, [r7, #8]
   2cbdc:	e042      	b.n	2cc64 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2cbde:	697a      	ldr	r2, [r7, #20]
   2cbe0:	693b      	ldr	r3, [r7, #16]
   2cbe2:	429a      	cmp	r2, r3
   2cbe4:	d1d8      	bne.n	2cb98 <create_chain+0x5c>
   2cbe6:	2300      	movs	r3, #0
   2cbe8:	e03c      	b.n	2cc64 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2cbea:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2cbec:	230f      	movs	r3, #15
   2cbee:	18fc      	adds	r4, r7, r3
   2cbf0:	4a1f      	ldr	r2, [pc, #124]	; (2cc70 <create_chain+0x134>)
   2cbf2:	6979      	ldr	r1, [r7, #20]
   2cbf4:	687b      	ldr	r3, [r7, #4]
   2cbf6:	0018      	movs	r0, r3
   2cbf8:	4b1e      	ldr	r3, [pc, #120]	; (2cc74 <create_chain+0x138>)
   2cbfa:	4798      	blx	r3
   2cbfc:	0003      	movs	r3, r0
   2cbfe:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2cc00:	230f      	movs	r3, #15
   2cc02:	18fb      	adds	r3, r7, r3
   2cc04:	781b      	ldrb	r3, [r3, #0]
   2cc06:	2b00      	cmp	r3, #0
   2cc08:	d10c      	bne.n	2cc24 <create_chain+0xe8>
   2cc0a:	683b      	ldr	r3, [r7, #0]
   2cc0c:	2b00      	cmp	r3, #0
   2cc0e:	d009      	beq.n	2cc24 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2cc10:	230f      	movs	r3, #15
   2cc12:	18fc      	adds	r4, r7, r3
   2cc14:	697a      	ldr	r2, [r7, #20]
   2cc16:	6839      	ldr	r1, [r7, #0]
   2cc18:	687b      	ldr	r3, [r7, #4]
   2cc1a:	0018      	movs	r0, r3
   2cc1c:	4b15      	ldr	r3, [pc, #84]	; (2cc74 <create_chain+0x138>)
   2cc1e:	4798      	blx	r3
   2cc20:	0003      	movs	r3, r0
   2cc22:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2cc24:	230f      	movs	r3, #15
   2cc26:	18fb      	adds	r3, r7, r3
   2cc28:	781b      	ldrb	r3, [r3, #0]
   2cc2a:	2b00      	cmp	r3, #0
   2cc2c:	d10f      	bne.n	2cc4e <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2cc2e:	687b      	ldr	r3, [r7, #4]
   2cc30:	697a      	ldr	r2, [r7, #20]
   2cc32:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2cc34:	687b      	ldr	r3, [r7, #4]
   2cc36:	691b      	ldr	r3, [r3, #16]
   2cc38:	3301      	adds	r3, #1
   2cc3a:	d012      	beq.n	2cc62 <create_chain+0x126>
			fs->free_clust--;
   2cc3c:	687b      	ldr	r3, [r7, #4]
   2cc3e:	691b      	ldr	r3, [r3, #16]
   2cc40:	1e5a      	subs	r2, r3, #1
   2cc42:	687b      	ldr	r3, [r7, #4]
   2cc44:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2cc46:	687b      	ldr	r3, [r7, #4]
   2cc48:	2201      	movs	r2, #1
   2cc4a:	715a      	strb	r2, [r3, #5]
   2cc4c:	e009      	b.n	2cc62 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2cc4e:	230f      	movs	r3, #15
   2cc50:	18fb      	adds	r3, r7, r3
   2cc52:	781b      	ldrb	r3, [r3, #0]
   2cc54:	2b01      	cmp	r3, #1
   2cc56:	d102      	bne.n	2cc5e <create_chain+0x122>
   2cc58:	2301      	movs	r3, #1
   2cc5a:	425b      	negs	r3, r3
   2cc5c:	e000      	b.n	2cc60 <create_chain+0x124>
   2cc5e:	2301      	movs	r3, #1
   2cc60:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2cc62:	697b      	ldr	r3, [r7, #20]
}
   2cc64:	0018      	movs	r0, r3
   2cc66:	46bd      	mov	sp, r7
   2cc68:	b007      	add	sp, #28
   2cc6a:	bd90      	pop	{r4, r7, pc}
   2cc6c:	0002c6cd 	.word	0x0002c6cd
   2cc70:	0fffffff 	.word	0x0fffffff
   2cc74:	0002c839 	.word	0x0002c839

0002cc78 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2cc78:	b580      	push	{r7, lr}
   2cc7a:	b084      	sub	sp, #16
   2cc7c:	af00      	add	r7, sp, #0
   2cc7e:	6078      	str	r0, [r7, #4]
   2cc80:	000a      	movs	r2, r1
   2cc82:	1cbb      	adds	r3, r7, #2
   2cc84:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2cc86:	687b      	ldr	r3, [r7, #4]
   2cc88:	1cba      	adds	r2, r7, #2
   2cc8a:	8812      	ldrh	r2, [r2, #0]
   2cc8c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2cc8e:	687b      	ldr	r3, [r7, #4]
   2cc90:	689b      	ldr	r3, [r3, #8]
   2cc92:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2cc94:	68fb      	ldr	r3, [r7, #12]
   2cc96:	2b01      	cmp	r3, #1
   2cc98:	d005      	beq.n	2cca6 <dir_sdi+0x2e>
   2cc9a:	687b      	ldr	r3, [r7, #4]
   2cc9c:	681b      	ldr	r3, [r3, #0]
   2cc9e:	699a      	ldr	r2, [r3, #24]
   2cca0:	68fb      	ldr	r3, [r7, #12]
   2cca2:	429a      	cmp	r2, r3
   2cca4:	d801      	bhi.n	2ccaa <dir_sdi+0x32>
		return FR_INT_ERR;
   2cca6:	2302      	movs	r3, #2
   2cca8:	e075      	b.n	2cd96 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2ccaa:	68fb      	ldr	r3, [r7, #12]
   2ccac:	2b00      	cmp	r3, #0
   2ccae:	d108      	bne.n	2ccc2 <dir_sdi+0x4a>
   2ccb0:	687b      	ldr	r3, [r7, #4]
   2ccb2:	681b      	ldr	r3, [r3, #0]
   2ccb4:	781b      	ldrb	r3, [r3, #0]
   2ccb6:	2b03      	cmp	r3, #3
   2ccb8:	d103      	bne.n	2ccc2 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2ccba:	687b      	ldr	r3, [r7, #4]
   2ccbc:	681b      	ldr	r3, [r3, #0]
   2ccbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2ccc0:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2ccc2:	68fb      	ldr	r3, [r7, #12]
   2ccc4:	2b00      	cmp	r3, #0
   2ccc6:	d116      	bne.n	2ccf6 <dir_sdi+0x7e>
		dj->clust = clst;
   2ccc8:	687b      	ldr	r3, [r7, #4]
   2ccca:	68fa      	ldr	r2, [r7, #12]
   2cccc:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2ccce:	687b      	ldr	r3, [r7, #4]
   2ccd0:	681b      	ldr	r3, [r3, #0]
   2ccd2:	891b      	ldrh	r3, [r3, #8]
   2ccd4:	1cba      	adds	r2, r7, #2
   2ccd6:	8812      	ldrh	r2, [r2, #0]
   2ccd8:	429a      	cmp	r2, r3
   2ccda:	d301      	bcc.n	2cce0 <dir_sdi+0x68>
			return FR_INT_ERR;
   2ccdc:	2302      	movs	r3, #2
   2ccde:	e05a      	b.n	2cd96 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2cce0:	687b      	ldr	r3, [r7, #4]
   2cce2:	681b      	ldr	r3, [r3, #0]
   2cce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cce6:	1cba      	adds	r2, r7, #2
   2cce8:	8812      	ldrh	r2, [r2, #0]
   2ccea:	0912      	lsrs	r2, r2, #4
   2ccec:	b292      	uxth	r2, r2
   2ccee:	189a      	adds	r2, r3, r2
   2ccf0:	687b      	ldr	r3, [r7, #4]
   2ccf2:	611a      	str	r2, [r3, #16]
   2ccf4:	e042      	b.n	2cd7c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2ccf6:	687b      	ldr	r3, [r7, #4]
   2ccf8:	681b      	ldr	r3, [r3, #0]
   2ccfa:	789b      	ldrb	r3, [r3, #2]
   2ccfc:	b29a      	uxth	r2, r3
   2ccfe:	230a      	movs	r3, #10
   2cd00:	18fb      	adds	r3, r7, r3
   2cd02:	0112      	lsls	r2, r2, #4
   2cd04:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2cd06:	e020      	b.n	2cd4a <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2cd08:	687b      	ldr	r3, [r7, #4]
   2cd0a:	681b      	ldr	r3, [r3, #0]
   2cd0c:	68fa      	ldr	r2, [r7, #12]
   2cd0e:	0011      	movs	r1, r2
   2cd10:	0018      	movs	r0, r3
   2cd12:	4b23      	ldr	r3, [pc, #140]	; (2cda0 <dir_sdi+0x128>)
   2cd14:	4798      	blx	r3
   2cd16:	0003      	movs	r3, r0
   2cd18:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2cd1a:	68fb      	ldr	r3, [r7, #12]
   2cd1c:	3301      	adds	r3, #1
   2cd1e:	d101      	bne.n	2cd24 <dir_sdi+0xac>
   2cd20:	2301      	movs	r3, #1
   2cd22:	e038      	b.n	2cd96 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2cd24:	68fb      	ldr	r3, [r7, #12]
   2cd26:	2b01      	cmp	r3, #1
   2cd28:	d905      	bls.n	2cd36 <dir_sdi+0xbe>
   2cd2a:	687b      	ldr	r3, [r7, #4]
   2cd2c:	681b      	ldr	r3, [r3, #0]
   2cd2e:	699a      	ldr	r2, [r3, #24]
   2cd30:	68fb      	ldr	r3, [r7, #12]
   2cd32:	429a      	cmp	r2, r3
   2cd34:	d801      	bhi.n	2cd3a <dir_sdi+0xc2>
				return FR_INT_ERR;
   2cd36:	2302      	movs	r3, #2
   2cd38:	e02d      	b.n	2cd96 <dir_sdi+0x11e>
			idx -= ic;
   2cd3a:	1cbb      	adds	r3, r7, #2
   2cd3c:	1cb9      	adds	r1, r7, #2
   2cd3e:	220a      	movs	r2, #10
   2cd40:	18ba      	adds	r2, r7, r2
   2cd42:	8809      	ldrh	r1, [r1, #0]
   2cd44:	8812      	ldrh	r2, [r2, #0]
   2cd46:	1a8a      	subs	r2, r1, r2
   2cd48:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2cd4a:	1cba      	adds	r2, r7, #2
   2cd4c:	230a      	movs	r3, #10
   2cd4e:	18fb      	adds	r3, r7, r3
   2cd50:	8812      	ldrh	r2, [r2, #0]
   2cd52:	881b      	ldrh	r3, [r3, #0]
   2cd54:	429a      	cmp	r2, r3
   2cd56:	d2d7      	bcs.n	2cd08 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2cd58:	687b      	ldr	r3, [r7, #4]
   2cd5a:	68fa      	ldr	r2, [r7, #12]
   2cd5c:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2cd5e:	687b      	ldr	r3, [r7, #4]
   2cd60:	681b      	ldr	r3, [r3, #0]
   2cd62:	68fa      	ldr	r2, [r7, #12]
   2cd64:	0011      	movs	r1, r2
   2cd66:	0018      	movs	r0, r3
   2cd68:	4b0e      	ldr	r3, [pc, #56]	; (2cda4 <dir_sdi+0x12c>)
   2cd6a:	4798      	blx	r3
   2cd6c:	0002      	movs	r2, r0
   2cd6e:	1cbb      	adds	r3, r7, #2
   2cd70:	881b      	ldrh	r3, [r3, #0]
   2cd72:	091b      	lsrs	r3, r3, #4
   2cd74:	b29b      	uxth	r3, r3
   2cd76:	18d2      	adds	r2, r2, r3
   2cd78:	687b      	ldr	r3, [r7, #4]
   2cd7a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2cd7c:	687b      	ldr	r3, [r7, #4]
   2cd7e:	681b      	ldr	r3, [r3, #0]
   2cd80:	3330      	adds	r3, #48	; 0x30
   2cd82:	001a      	movs	r2, r3
   2cd84:	1cbb      	adds	r3, r7, #2
   2cd86:	881b      	ldrh	r3, [r3, #0]
   2cd88:	210f      	movs	r1, #15
   2cd8a:	400b      	ands	r3, r1
   2cd8c:	015b      	lsls	r3, r3, #5
   2cd8e:	18d2      	adds	r2, r2, r3
   2cd90:	687b      	ldr	r3, [r7, #4]
   2cd92:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2cd94:	2300      	movs	r3, #0
}
   2cd96:	0018      	movs	r0, r3
   2cd98:	46bd      	mov	sp, r7
   2cd9a:	b004      	add	sp, #16
   2cd9c:	bd80      	pop	{r7, pc}
   2cd9e:	46c0      	nop			; (mov r8, r8)
   2cda0:	0002c6cd 	.word	0x0002c6cd
   2cda4:	0002c695 	.word	0x0002c695

0002cda8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2cda8:	b590      	push	{r4, r7, lr}
   2cdaa:	b085      	sub	sp, #20
   2cdac:	af00      	add	r7, sp, #0
   2cdae:	6078      	str	r0, [r7, #4]
   2cdb0:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2cdb2:	687b      	ldr	r3, [r7, #4]
   2cdb4:	88da      	ldrh	r2, [r3, #6]
   2cdb6:	2308      	movs	r3, #8
   2cdb8:	18fb      	adds	r3, r7, r3
   2cdba:	3201      	adds	r2, #1
   2cdbc:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2cdbe:	2308      	movs	r3, #8
   2cdc0:	18fb      	adds	r3, r7, r3
   2cdc2:	881b      	ldrh	r3, [r3, #0]
   2cdc4:	2b00      	cmp	r3, #0
   2cdc6:	d003      	beq.n	2cdd0 <dir_next+0x28>
   2cdc8:	687b      	ldr	r3, [r7, #4]
   2cdca:	691b      	ldr	r3, [r3, #16]
   2cdcc:	2b00      	cmp	r3, #0
   2cdce:	d101      	bne.n	2cdd4 <dir_next+0x2c>
		return FR_NO_FILE;
   2cdd0:	2304      	movs	r3, #4
   2cdd2:	e0d2      	b.n	2cf7a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2cdd4:	2308      	movs	r3, #8
   2cdd6:	18fb      	adds	r3, r7, r3
   2cdd8:	881b      	ldrh	r3, [r3, #0]
   2cdda:	220f      	movs	r2, #15
   2cddc:	4013      	ands	r3, r2
   2cdde:	b29b      	uxth	r3, r3
   2cde0:	2b00      	cmp	r3, #0
   2cde2:	d000      	beq.n	2cde6 <dir_next+0x3e>
   2cde4:	e0b6      	b.n	2cf54 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2cde6:	687b      	ldr	r3, [r7, #4]
   2cde8:	691b      	ldr	r3, [r3, #16]
   2cdea:	1c5a      	adds	r2, r3, #1
   2cdec:	687b      	ldr	r3, [r7, #4]
   2cdee:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2cdf0:	687b      	ldr	r3, [r7, #4]
   2cdf2:	68db      	ldr	r3, [r3, #12]
   2cdf4:	2b00      	cmp	r3, #0
   2cdf6:	d10a      	bne.n	2ce0e <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2cdf8:	687b      	ldr	r3, [r7, #4]
   2cdfa:	681b      	ldr	r3, [r3, #0]
   2cdfc:	891b      	ldrh	r3, [r3, #8]
   2cdfe:	2208      	movs	r2, #8
   2ce00:	18ba      	adds	r2, r7, r2
   2ce02:	8812      	ldrh	r2, [r2, #0]
   2ce04:	429a      	cmp	r2, r3
   2ce06:	d200      	bcs.n	2ce0a <dir_next+0x62>
   2ce08:	e0a4      	b.n	2cf54 <dir_next+0x1ac>
				return FR_NO_FILE;
   2ce0a:	2304      	movs	r3, #4
   2ce0c:	e0b5      	b.n	2cf7a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2ce0e:	2308      	movs	r3, #8
   2ce10:	18fb      	adds	r3, r7, r3
   2ce12:	881b      	ldrh	r3, [r3, #0]
   2ce14:	091b      	lsrs	r3, r3, #4
   2ce16:	b29b      	uxth	r3, r3
   2ce18:	001a      	movs	r2, r3
   2ce1a:	687b      	ldr	r3, [r7, #4]
   2ce1c:	681b      	ldr	r3, [r3, #0]
   2ce1e:	789b      	ldrb	r3, [r3, #2]
   2ce20:	3b01      	subs	r3, #1
   2ce22:	4013      	ands	r3, r2
   2ce24:	d000      	beq.n	2ce28 <dir_next+0x80>
   2ce26:	e095      	b.n	2cf54 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2ce28:	687b      	ldr	r3, [r7, #4]
   2ce2a:	681a      	ldr	r2, [r3, #0]
   2ce2c:	687b      	ldr	r3, [r7, #4]
   2ce2e:	68db      	ldr	r3, [r3, #12]
   2ce30:	0019      	movs	r1, r3
   2ce32:	0010      	movs	r0, r2
   2ce34:	4b53      	ldr	r3, [pc, #332]	; (2cf84 <dir_next+0x1dc>)
   2ce36:	4798      	blx	r3
   2ce38:	0003      	movs	r3, r0
   2ce3a:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2ce3c:	68fb      	ldr	r3, [r7, #12]
   2ce3e:	2b01      	cmp	r3, #1
   2ce40:	d801      	bhi.n	2ce46 <dir_next+0x9e>
   2ce42:	2302      	movs	r3, #2
   2ce44:	e099      	b.n	2cf7a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2ce46:	68fb      	ldr	r3, [r7, #12]
   2ce48:	3301      	adds	r3, #1
   2ce4a:	d101      	bne.n	2ce50 <dir_next+0xa8>
   2ce4c:	2301      	movs	r3, #1
   2ce4e:	e094      	b.n	2cf7a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2ce50:	687b      	ldr	r3, [r7, #4]
   2ce52:	681b      	ldr	r3, [r3, #0]
   2ce54:	699a      	ldr	r2, [r3, #24]
   2ce56:	68fb      	ldr	r3, [r7, #12]
   2ce58:	429a      	cmp	r2, r3
   2ce5a:	d900      	bls.n	2ce5e <dir_next+0xb6>
   2ce5c:	e06d      	b.n	2cf3a <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2ce5e:	683b      	ldr	r3, [r7, #0]
   2ce60:	2b00      	cmp	r3, #0
   2ce62:	d101      	bne.n	2ce68 <dir_next+0xc0>
   2ce64:	2304      	movs	r3, #4
   2ce66:	e088      	b.n	2cf7a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2ce68:	687b      	ldr	r3, [r7, #4]
   2ce6a:	681a      	ldr	r2, [r3, #0]
   2ce6c:	687b      	ldr	r3, [r7, #4]
   2ce6e:	68db      	ldr	r3, [r3, #12]
   2ce70:	0019      	movs	r1, r3
   2ce72:	0010      	movs	r0, r2
   2ce74:	4b44      	ldr	r3, [pc, #272]	; (2cf88 <dir_next+0x1e0>)
   2ce76:	4798      	blx	r3
   2ce78:	0003      	movs	r3, r0
   2ce7a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2ce7c:	68fb      	ldr	r3, [r7, #12]
   2ce7e:	2b00      	cmp	r3, #0
   2ce80:	d101      	bne.n	2ce86 <dir_next+0xde>
   2ce82:	2307      	movs	r3, #7
   2ce84:	e079      	b.n	2cf7a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2ce86:	68fb      	ldr	r3, [r7, #12]
   2ce88:	2b01      	cmp	r3, #1
   2ce8a:	d101      	bne.n	2ce90 <dir_next+0xe8>
   2ce8c:	2302      	movs	r3, #2
   2ce8e:	e074      	b.n	2cf7a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2ce90:	68fb      	ldr	r3, [r7, #12]
   2ce92:	3301      	adds	r3, #1
   2ce94:	d101      	bne.n	2ce9a <dir_next+0xf2>
   2ce96:	2301      	movs	r3, #1
   2ce98:	e06f      	b.n	2cf7a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2ce9a:	687b      	ldr	r3, [r7, #4]
   2ce9c:	681b      	ldr	r3, [r3, #0]
   2ce9e:	2100      	movs	r1, #0
   2cea0:	0018      	movs	r0, r3
   2cea2:	4b3a      	ldr	r3, [pc, #232]	; (2cf8c <dir_next+0x1e4>)
   2cea4:	4798      	blx	r3
   2cea6:	1e03      	subs	r3, r0, #0
   2cea8:	d001      	beq.n	2ceae <dir_next+0x106>
   2ceaa:	2301      	movs	r3, #1
   2ceac:	e065      	b.n	2cf7a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2ceae:	687b      	ldr	r3, [r7, #4]
   2ceb0:	681b      	ldr	r3, [r3, #0]
   2ceb2:	3330      	adds	r3, #48	; 0x30
   2ceb4:	0018      	movs	r0, r3
   2ceb6:	2380      	movs	r3, #128	; 0x80
   2ceb8:	009b      	lsls	r3, r3, #2
   2ceba:	001a      	movs	r2, r3
   2cebc:	2100      	movs	r1, #0
   2cebe:	4b34      	ldr	r3, [pc, #208]	; (2cf90 <dir_next+0x1e8>)
   2cec0:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2cec2:	687b      	ldr	r3, [r7, #4]
   2cec4:	681c      	ldr	r4, [r3, #0]
   2cec6:	687b      	ldr	r3, [r7, #4]
   2cec8:	681b      	ldr	r3, [r3, #0]
   2ceca:	68fa      	ldr	r2, [r7, #12]
   2cecc:	0011      	movs	r1, r2
   2cece:	0018      	movs	r0, r3
   2ced0:	4b30      	ldr	r3, [pc, #192]	; (2cf94 <dir_next+0x1ec>)
   2ced2:	4798      	blx	r3
   2ced4:	0003      	movs	r3, r0
   2ced6:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2ced8:	230b      	movs	r3, #11
   2ceda:	18fb      	adds	r3, r7, r3
   2cedc:	2200      	movs	r2, #0
   2cede:	701a      	strb	r2, [r3, #0]
   2cee0:	e019      	b.n	2cf16 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2cee2:	687b      	ldr	r3, [r7, #4]
   2cee4:	681b      	ldr	r3, [r3, #0]
   2cee6:	2201      	movs	r2, #1
   2cee8:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2ceea:	687b      	ldr	r3, [r7, #4]
   2ceec:	681b      	ldr	r3, [r3, #0]
   2ceee:	2100      	movs	r1, #0
   2cef0:	0018      	movs	r0, r3
   2cef2:	4b26      	ldr	r3, [pc, #152]	; (2cf8c <dir_next+0x1e4>)
   2cef4:	4798      	blx	r3
   2cef6:	1e03      	subs	r3, r0, #0
   2cef8:	d001      	beq.n	2cefe <dir_next+0x156>
   2cefa:	2301      	movs	r3, #1
   2cefc:	e03d      	b.n	2cf7a <dir_next+0x1d2>
						dj->fs->winsect++;
   2cefe:	687b      	ldr	r3, [r7, #4]
   2cf00:	681b      	ldr	r3, [r3, #0]
   2cf02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2cf04:	3201      	adds	r2, #1
   2cf06:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2cf08:	230b      	movs	r3, #11
   2cf0a:	18fb      	adds	r3, r7, r3
   2cf0c:	781a      	ldrb	r2, [r3, #0]
   2cf0e:	230b      	movs	r3, #11
   2cf10:	18fb      	adds	r3, r7, r3
   2cf12:	3201      	adds	r2, #1
   2cf14:	701a      	strb	r2, [r3, #0]
   2cf16:	687b      	ldr	r3, [r7, #4]
   2cf18:	681b      	ldr	r3, [r3, #0]
   2cf1a:	789b      	ldrb	r3, [r3, #2]
   2cf1c:	220b      	movs	r2, #11
   2cf1e:	18ba      	adds	r2, r7, r2
   2cf20:	7812      	ldrb	r2, [r2, #0]
   2cf22:	429a      	cmp	r2, r3
   2cf24:	d3dd      	bcc.n	2cee2 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2cf26:	687b      	ldr	r3, [r7, #4]
   2cf28:	681b      	ldr	r3, [r3, #0]
   2cf2a:	687a      	ldr	r2, [r7, #4]
   2cf2c:	6812      	ldr	r2, [r2, #0]
   2cf2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2cf30:	220b      	movs	r2, #11
   2cf32:	18ba      	adds	r2, r7, r2
   2cf34:	7812      	ldrb	r2, [r2, #0]
   2cf36:	1a8a      	subs	r2, r1, r2
   2cf38:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2cf3a:	687b      	ldr	r3, [r7, #4]
   2cf3c:	68fa      	ldr	r2, [r7, #12]
   2cf3e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2cf40:	687b      	ldr	r3, [r7, #4]
   2cf42:	681b      	ldr	r3, [r3, #0]
   2cf44:	68fa      	ldr	r2, [r7, #12]
   2cf46:	0011      	movs	r1, r2
   2cf48:	0018      	movs	r0, r3
   2cf4a:	4b12      	ldr	r3, [pc, #72]	; (2cf94 <dir_next+0x1ec>)
   2cf4c:	4798      	blx	r3
   2cf4e:	0002      	movs	r2, r0
   2cf50:	687b      	ldr	r3, [r7, #4]
   2cf52:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2cf54:	687b      	ldr	r3, [r7, #4]
   2cf56:	2208      	movs	r2, #8
   2cf58:	18ba      	adds	r2, r7, r2
   2cf5a:	8812      	ldrh	r2, [r2, #0]
   2cf5c:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2cf5e:	687b      	ldr	r3, [r7, #4]
   2cf60:	681b      	ldr	r3, [r3, #0]
   2cf62:	3330      	adds	r3, #48	; 0x30
   2cf64:	001a      	movs	r2, r3
   2cf66:	2308      	movs	r3, #8
   2cf68:	18fb      	adds	r3, r7, r3
   2cf6a:	881b      	ldrh	r3, [r3, #0]
   2cf6c:	210f      	movs	r1, #15
   2cf6e:	400b      	ands	r3, r1
   2cf70:	015b      	lsls	r3, r3, #5
   2cf72:	18d2      	adds	r2, r2, r3
   2cf74:	687b      	ldr	r3, [r7, #4]
   2cf76:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2cf78:	2300      	movs	r3, #0
}
   2cf7a:	0018      	movs	r0, r3
   2cf7c:	46bd      	mov	sp, r7
   2cf7e:	b005      	add	sp, #20
   2cf80:	bd90      	pop	{r4, r7, pc}
   2cf82:	46c0      	nop			; (mov r8, r8)
   2cf84:	0002c6cd 	.word	0x0002c6cd
   2cf88:	0002cb3d 	.word	0x0002cb3d
   2cf8c:	0002c435 	.word	0x0002c435
   2cf90:	0002c389 	.word	0x0002c389
   2cf94:	0002c695 	.word	0x0002c695

0002cf98 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2cf98:	b590      	push	{r4, r7, lr}
   2cf9a:	b087      	sub	sp, #28
   2cf9c:	af00      	add	r7, sp, #0
   2cf9e:	6078      	str	r0, [r7, #4]
   2cfa0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2cfa2:	683b      	ldr	r3, [r7, #0]
   2cfa4:	781b      	ldrb	r3, [r3, #0]
   2cfa6:	001a      	movs	r2, r3
   2cfa8:	2340      	movs	r3, #64	; 0x40
   2cfaa:	439a      	bics	r2, r3
   2cfac:	0013      	movs	r3, r2
   2cfae:	1e5a      	subs	r2, r3, #1
   2cfb0:	0013      	movs	r3, r2
   2cfb2:	005b      	lsls	r3, r3, #1
   2cfb4:	189b      	adds	r3, r3, r2
   2cfb6:	009b      	lsls	r3, r3, #2
   2cfb8:	189b      	adds	r3, r3, r2
   2cfba:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2cfbc:	2300      	movs	r3, #0
   2cfbe:	613b      	str	r3, [r7, #16]
   2cfc0:	230e      	movs	r3, #14
   2cfc2:	18fb      	adds	r3, r7, r3
   2cfc4:	2201      	movs	r2, #1
   2cfc6:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2cfc8:	4a31      	ldr	r2, [pc, #196]	; (2d090 <cmp_lfn+0xf8>)
   2cfca:	693b      	ldr	r3, [r7, #16]
   2cfcc:	18d3      	adds	r3, r2, r3
   2cfce:	781b      	ldrb	r3, [r3, #0]
   2cfd0:	3301      	adds	r3, #1
   2cfd2:	683a      	ldr	r2, [r7, #0]
   2cfd4:	18d3      	adds	r3, r2, r3
   2cfd6:	781b      	ldrb	r3, [r3, #0]
   2cfd8:	021b      	lsls	r3, r3, #8
   2cfda:	b21a      	sxth	r2, r3
   2cfdc:	492c      	ldr	r1, [pc, #176]	; (2d090 <cmp_lfn+0xf8>)
   2cfde:	693b      	ldr	r3, [r7, #16]
   2cfe0:	18cb      	adds	r3, r1, r3
   2cfe2:	781b      	ldrb	r3, [r3, #0]
   2cfe4:	0019      	movs	r1, r3
   2cfe6:	683b      	ldr	r3, [r7, #0]
   2cfe8:	185b      	adds	r3, r3, r1
   2cfea:	781b      	ldrb	r3, [r3, #0]
   2cfec:	b21b      	sxth	r3, r3
   2cfee:	4313      	orrs	r3, r2
   2cff0:	b21a      	sxth	r2, r3
   2cff2:	230c      	movs	r3, #12
   2cff4:	18fb      	adds	r3, r7, r3
   2cff6:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2cff8:	230e      	movs	r3, #14
   2cffa:	18fb      	adds	r3, r7, r3
   2cffc:	881b      	ldrh	r3, [r3, #0]
   2cffe:	2b00      	cmp	r3, #0
   2d000:	d01f      	beq.n	2d042 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2d002:	230e      	movs	r3, #14
   2d004:	18fc      	adds	r4, r7, r3
   2d006:	230c      	movs	r3, #12
   2d008:	18fb      	adds	r3, r7, r3
   2d00a:	881b      	ldrh	r3, [r3, #0]
   2d00c:	0018      	movs	r0, r3
   2d00e:	4b21      	ldr	r3, [pc, #132]	; (2d094 <cmp_lfn+0xfc>)
   2d010:	4798      	blx	r3
   2d012:	0003      	movs	r3, r0
   2d014:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2d016:	697b      	ldr	r3, [r7, #20]
   2d018:	2bfe      	cmp	r3, #254	; 0xfe
   2d01a:	d810      	bhi.n	2d03e <cmp_lfn+0xa6>
   2d01c:	697b      	ldr	r3, [r7, #20]
   2d01e:	1c5a      	adds	r2, r3, #1
   2d020:	617a      	str	r2, [r7, #20]
   2d022:	005b      	lsls	r3, r3, #1
   2d024:	687a      	ldr	r2, [r7, #4]
   2d026:	18d3      	adds	r3, r2, r3
   2d028:	881b      	ldrh	r3, [r3, #0]
   2d02a:	0018      	movs	r0, r3
   2d02c:	4b19      	ldr	r3, [pc, #100]	; (2d094 <cmp_lfn+0xfc>)
   2d02e:	4798      	blx	r3
   2d030:	0003      	movs	r3, r0
   2d032:	001a      	movs	r2, r3
   2d034:	230e      	movs	r3, #14
   2d036:	18fb      	adds	r3, r7, r3
   2d038:	881b      	ldrh	r3, [r3, #0]
   2d03a:	4293      	cmp	r3, r2
   2d03c:	d009      	beq.n	2d052 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2d03e:	2300      	movs	r3, #0
   2d040:	e022      	b.n	2d088 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2d042:	230c      	movs	r3, #12
   2d044:	18fb      	adds	r3, r7, r3
   2d046:	881b      	ldrh	r3, [r3, #0]
   2d048:	4a13      	ldr	r2, [pc, #76]	; (2d098 <cmp_lfn+0x100>)
   2d04a:	4293      	cmp	r3, r2
   2d04c:	d001      	beq.n	2d052 <cmp_lfn+0xba>
   2d04e:	2300      	movs	r3, #0
   2d050:	e01a      	b.n	2d088 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2d052:	693b      	ldr	r3, [r7, #16]
   2d054:	3301      	adds	r3, #1
   2d056:	613b      	str	r3, [r7, #16]
   2d058:	693b      	ldr	r3, [r7, #16]
   2d05a:	2b0c      	cmp	r3, #12
   2d05c:	d9b4      	bls.n	2cfc8 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2d05e:	683b      	ldr	r3, [r7, #0]
   2d060:	781b      	ldrb	r3, [r3, #0]
   2d062:	001a      	movs	r2, r3
   2d064:	2340      	movs	r3, #64	; 0x40
   2d066:	4013      	ands	r3, r2
   2d068:	d00d      	beq.n	2d086 <cmp_lfn+0xee>
   2d06a:	230e      	movs	r3, #14
   2d06c:	18fb      	adds	r3, r7, r3
   2d06e:	881b      	ldrh	r3, [r3, #0]
   2d070:	2b00      	cmp	r3, #0
   2d072:	d008      	beq.n	2d086 <cmp_lfn+0xee>
   2d074:	697b      	ldr	r3, [r7, #20]
   2d076:	005b      	lsls	r3, r3, #1
   2d078:	687a      	ldr	r2, [r7, #4]
   2d07a:	18d3      	adds	r3, r2, r3
   2d07c:	881b      	ldrh	r3, [r3, #0]
   2d07e:	2b00      	cmp	r3, #0
   2d080:	d001      	beq.n	2d086 <cmp_lfn+0xee>
		return 0;
   2d082:	2300      	movs	r3, #0
   2d084:	e000      	b.n	2d088 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2d086:	2301      	movs	r3, #1
}
   2d088:	0018      	movs	r0, r3
   2d08a:	46bd      	mov	sp, r7
   2d08c:	b007      	add	sp, #28
   2d08e:	bd90      	pop	{r4, r7, pc}
   2d090:	0003a560 	.word	0x0003a560
   2d094:	0002f045 	.word	0x0002f045
   2d098:	0000ffff 	.word	0x0000ffff

0002d09c <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2d09c:	b580      	push	{r7, lr}
   2d09e:	b088      	sub	sp, #32
   2d0a0:	af00      	add	r7, sp, #0
   2d0a2:	60f8      	str	r0, [r7, #12]
   2d0a4:	60b9      	str	r1, [r7, #8]
   2d0a6:	0019      	movs	r1, r3
   2d0a8:	1dfb      	adds	r3, r7, #7
   2d0aa:	701a      	strb	r2, [r3, #0]
   2d0ac:	1dbb      	adds	r3, r7, #6
   2d0ae:	1c0a      	adds	r2, r1, #0
   2d0b0:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2d0b2:	68bb      	ldr	r3, [r7, #8]
   2d0b4:	330d      	adds	r3, #13
   2d0b6:	1dba      	adds	r2, r7, #6
   2d0b8:	7812      	ldrb	r2, [r2, #0]
   2d0ba:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2d0bc:	68bb      	ldr	r3, [r7, #8]
   2d0be:	330b      	adds	r3, #11
   2d0c0:	220f      	movs	r2, #15
   2d0c2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2d0c4:	68bb      	ldr	r3, [r7, #8]
   2d0c6:	330c      	adds	r3, #12
   2d0c8:	2200      	movs	r2, #0
   2d0ca:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2d0cc:	68bb      	ldr	r3, [r7, #8]
   2d0ce:	331a      	adds	r3, #26
   2d0d0:	2200      	movs	r2, #0
   2d0d2:	701a      	strb	r2, [r3, #0]
   2d0d4:	68bb      	ldr	r3, [r7, #8]
   2d0d6:	331b      	adds	r3, #27
   2d0d8:	2200      	movs	r2, #0
   2d0da:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2d0dc:	1dfb      	adds	r3, r7, #7
   2d0de:	781b      	ldrb	r3, [r3, #0]
   2d0e0:	1e5a      	subs	r2, r3, #1
   2d0e2:	0013      	movs	r3, r2
   2d0e4:	005b      	lsls	r3, r3, #1
   2d0e6:	189b      	adds	r3, r3, r2
   2d0e8:	009b      	lsls	r3, r3, #2
   2d0ea:	189b      	adds	r3, r3, r2
   2d0ec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2d0ee:	2316      	movs	r3, #22
   2d0f0:	18fb      	adds	r3, r7, r3
   2d0f2:	2200      	movs	r2, #0
   2d0f4:	801a      	strh	r2, [r3, #0]
   2d0f6:	2300      	movs	r3, #0
   2d0f8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2d0fa:	2316      	movs	r3, #22
   2d0fc:	18fb      	adds	r3, r7, r3
   2d0fe:	881b      	ldrh	r3, [r3, #0]
   2d100:	4a28      	ldr	r2, [pc, #160]	; (2d1a4 <fit_lfn+0x108>)
   2d102:	4293      	cmp	r3, r2
   2d104:	d009      	beq.n	2d11a <fit_lfn+0x7e>
   2d106:	69fb      	ldr	r3, [r7, #28]
   2d108:	1c5a      	adds	r2, r3, #1
   2d10a:	61fa      	str	r2, [r7, #28]
   2d10c:	005b      	lsls	r3, r3, #1
   2d10e:	68fa      	ldr	r2, [r7, #12]
   2d110:	18d2      	adds	r2, r2, r3
   2d112:	2316      	movs	r3, #22
   2d114:	18fb      	adds	r3, r7, r3
   2d116:	8812      	ldrh	r2, [r2, #0]
   2d118:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2d11a:	4a23      	ldr	r2, [pc, #140]	; (2d1a8 <fit_lfn+0x10c>)
   2d11c:	69bb      	ldr	r3, [r7, #24]
   2d11e:	18d3      	adds	r3, r2, r3
   2d120:	781b      	ldrb	r3, [r3, #0]
   2d122:	001a      	movs	r2, r3
   2d124:	68bb      	ldr	r3, [r7, #8]
   2d126:	189b      	adds	r3, r3, r2
   2d128:	2216      	movs	r2, #22
   2d12a:	18ba      	adds	r2, r7, r2
   2d12c:	8812      	ldrh	r2, [r2, #0]
   2d12e:	b2d2      	uxtb	r2, r2
   2d130:	701a      	strb	r2, [r3, #0]
   2d132:	4a1d      	ldr	r2, [pc, #116]	; (2d1a8 <fit_lfn+0x10c>)
   2d134:	69bb      	ldr	r3, [r7, #24]
   2d136:	18d3      	adds	r3, r2, r3
   2d138:	781b      	ldrb	r3, [r3, #0]
   2d13a:	3301      	adds	r3, #1
   2d13c:	68ba      	ldr	r2, [r7, #8]
   2d13e:	18d3      	adds	r3, r2, r3
   2d140:	2216      	movs	r2, #22
   2d142:	18ba      	adds	r2, r7, r2
   2d144:	8812      	ldrh	r2, [r2, #0]
   2d146:	0a12      	lsrs	r2, r2, #8
   2d148:	b292      	uxth	r2, r2
   2d14a:	b2d2      	uxtb	r2, r2
   2d14c:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2d14e:	2316      	movs	r3, #22
   2d150:	18fb      	adds	r3, r7, r3
   2d152:	881b      	ldrh	r3, [r3, #0]
   2d154:	2b00      	cmp	r3, #0
   2d156:	d104      	bne.n	2d162 <fit_lfn+0xc6>
   2d158:	2316      	movs	r3, #22
   2d15a:	18fb      	adds	r3, r7, r3
   2d15c:	2201      	movs	r2, #1
   2d15e:	4252      	negs	r2, r2
   2d160:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2d162:	69bb      	ldr	r3, [r7, #24]
   2d164:	3301      	adds	r3, #1
   2d166:	61bb      	str	r3, [r7, #24]
   2d168:	69bb      	ldr	r3, [r7, #24]
   2d16a:	2b0c      	cmp	r3, #12
   2d16c:	d9c5      	bls.n	2d0fa <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2d16e:	2316      	movs	r3, #22
   2d170:	18fb      	adds	r3, r7, r3
   2d172:	881b      	ldrh	r3, [r3, #0]
   2d174:	4a0b      	ldr	r2, [pc, #44]	; (2d1a4 <fit_lfn+0x108>)
   2d176:	4293      	cmp	r3, r2
   2d178:	d006      	beq.n	2d188 <fit_lfn+0xec>
   2d17a:	69fb      	ldr	r3, [r7, #28]
   2d17c:	005b      	lsls	r3, r3, #1
   2d17e:	68fa      	ldr	r2, [r7, #12]
   2d180:	18d3      	adds	r3, r2, r3
   2d182:	881b      	ldrh	r3, [r3, #0]
   2d184:	2b00      	cmp	r3, #0
   2d186:	d105      	bne.n	2d194 <fit_lfn+0xf8>
   2d188:	1dfb      	adds	r3, r7, #7
   2d18a:	1dfa      	adds	r2, r7, #7
   2d18c:	7812      	ldrb	r2, [r2, #0]
   2d18e:	2140      	movs	r1, #64	; 0x40
   2d190:	430a      	orrs	r2, r1
   2d192:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2d194:	68bb      	ldr	r3, [r7, #8]
   2d196:	1dfa      	adds	r2, r7, #7
   2d198:	7812      	ldrb	r2, [r2, #0]
   2d19a:	701a      	strb	r2, [r3, #0]
}
   2d19c:	46c0      	nop			; (mov r8, r8)
   2d19e:	46bd      	mov	sp, r7
   2d1a0:	b008      	add	sp, #32
   2d1a2:	bd80      	pop	{r7, pc}
   2d1a4:	0000ffff 	.word	0x0000ffff
   2d1a8:	0003a560 	.word	0x0003a560

0002d1ac <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2d1ac:	b580      	push	{r7, lr}
   2d1ae:	b08a      	sub	sp, #40	; 0x28
   2d1b0:	af00      	add	r7, sp, #0
   2d1b2:	60f8      	str	r0, [r7, #12]
   2d1b4:	60b9      	str	r1, [r7, #8]
   2d1b6:	607a      	str	r2, [r7, #4]
   2d1b8:	001a      	movs	r2, r3
   2d1ba:	1cbb      	adds	r3, r7, #2
   2d1bc:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2d1be:	68b9      	ldr	r1, [r7, #8]
   2d1c0:	68fb      	ldr	r3, [r7, #12]
   2d1c2:	220b      	movs	r2, #11
   2d1c4:	0018      	movs	r0, r3
   2d1c6:	4b38      	ldr	r3, [pc, #224]	; (2d2a8 <gen_numname+0xfc>)
   2d1c8:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2d1ca:	1cbb      	adds	r3, r7, #2
   2d1cc:	881b      	ldrh	r3, [r3, #0]
   2d1ce:	2b05      	cmp	r3, #5
   2d1d0:	d911      	bls.n	2d1f6 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2d1d2:	1cbb      	adds	r3, r7, #2
   2d1d4:	881b      	ldrh	r3, [r3, #0]
   2d1d6:	b29a      	uxth	r2, r3
   2d1d8:	0852      	lsrs	r2, r2, #1
   2d1da:	03db      	lsls	r3, r3, #15
   2d1dc:	4313      	orrs	r3, r2
   2d1de:	b299      	uxth	r1, r3
   2d1e0:	687b      	ldr	r3, [r7, #4]
   2d1e2:	1c9a      	adds	r2, r3, #2
   2d1e4:	607a      	str	r2, [r7, #4]
   2d1e6:	881a      	ldrh	r2, [r3, #0]
   2d1e8:	1cbb      	adds	r3, r7, #2
   2d1ea:	188a      	adds	r2, r1, r2
   2d1ec:	801a      	strh	r2, [r3, #0]
   2d1ee:	687b      	ldr	r3, [r7, #4]
   2d1f0:	881b      	ldrh	r3, [r3, #0]
   2d1f2:	2b00      	cmp	r3, #0
   2d1f4:	d1ed      	bne.n	2d1d2 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2d1f6:	2307      	movs	r3, #7
   2d1f8:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2d1fa:	1cbb      	adds	r3, r7, #2
   2d1fc:	881b      	ldrh	r3, [r3, #0]
   2d1fe:	b2db      	uxtb	r3, r3
   2d200:	220f      	movs	r2, #15
   2d202:	4013      	ands	r3, r2
   2d204:	b2da      	uxtb	r2, r3
   2d206:	2327      	movs	r3, #39	; 0x27
   2d208:	18fb      	adds	r3, r7, r3
   2d20a:	3230      	adds	r2, #48	; 0x30
   2d20c:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2d20e:	2327      	movs	r3, #39	; 0x27
   2d210:	18fb      	adds	r3, r7, r3
   2d212:	781b      	ldrb	r3, [r3, #0]
   2d214:	2b39      	cmp	r3, #57	; 0x39
   2d216:	d906      	bls.n	2d226 <gen_numname+0x7a>
   2d218:	2327      	movs	r3, #39	; 0x27
   2d21a:	18fb      	adds	r3, r7, r3
   2d21c:	2227      	movs	r2, #39	; 0x27
   2d21e:	18ba      	adds	r2, r7, r2
   2d220:	7812      	ldrb	r2, [r2, #0]
   2d222:	3207      	adds	r2, #7
   2d224:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2d226:	6a3b      	ldr	r3, [r7, #32]
   2d228:	1e5a      	subs	r2, r3, #1
   2d22a:	623a      	str	r2, [r7, #32]
   2d22c:	2214      	movs	r2, #20
   2d22e:	18ba      	adds	r2, r7, r2
   2d230:	2127      	movs	r1, #39	; 0x27
   2d232:	1879      	adds	r1, r7, r1
   2d234:	7809      	ldrb	r1, [r1, #0]
   2d236:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2d238:	1cbb      	adds	r3, r7, #2
   2d23a:	1cba      	adds	r2, r7, #2
   2d23c:	8812      	ldrh	r2, [r2, #0]
   2d23e:	0912      	lsrs	r2, r2, #4
   2d240:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2d242:	1cbb      	adds	r3, r7, #2
   2d244:	881b      	ldrh	r3, [r3, #0]
   2d246:	2b00      	cmp	r3, #0
   2d248:	d1d7      	bne.n	2d1fa <gen_numname+0x4e>
	ns[i] = '~';
   2d24a:	2314      	movs	r3, #20
   2d24c:	18fa      	adds	r2, r7, r3
   2d24e:	6a3b      	ldr	r3, [r7, #32]
   2d250:	18d3      	adds	r3, r2, r3
   2d252:	227e      	movs	r2, #126	; 0x7e
   2d254:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2d256:	2300      	movs	r3, #0
   2d258:	61fb      	str	r3, [r7, #28]
   2d25a:	e002      	b.n	2d262 <gen_numname+0xb6>
   2d25c:	69fb      	ldr	r3, [r7, #28]
   2d25e:	3301      	adds	r3, #1
   2d260:	61fb      	str	r3, [r7, #28]
   2d262:	69fa      	ldr	r2, [r7, #28]
   2d264:	6a3b      	ldr	r3, [r7, #32]
   2d266:	429a      	cmp	r2, r3
   2d268:	d205      	bcs.n	2d276 <gen_numname+0xca>
   2d26a:	68fa      	ldr	r2, [r7, #12]
   2d26c:	69fb      	ldr	r3, [r7, #28]
   2d26e:	18d3      	adds	r3, r2, r3
   2d270:	781b      	ldrb	r3, [r3, #0]
   2d272:	2b20      	cmp	r3, #32
   2d274:	d1f2      	bne.n	2d25c <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2d276:	69fb      	ldr	r3, [r7, #28]
   2d278:	1c5a      	adds	r2, r3, #1
   2d27a:	61fa      	str	r2, [r7, #28]
   2d27c:	68fa      	ldr	r2, [r7, #12]
   2d27e:	18d2      	adds	r2, r2, r3
   2d280:	6a3b      	ldr	r3, [r7, #32]
   2d282:	2b07      	cmp	r3, #7
   2d284:	d806      	bhi.n	2d294 <gen_numname+0xe8>
   2d286:	6a3b      	ldr	r3, [r7, #32]
   2d288:	1c59      	adds	r1, r3, #1
   2d28a:	6239      	str	r1, [r7, #32]
   2d28c:	2114      	movs	r1, #20
   2d28e:	1879      	adds	r1, r7, r1
   2d290:	5ccb      	ldrb	r3, [r1, r3]
   2d292:	e000      	b.n	2d296 <gen_numname+0xea>
   2d294:	2320      	movs	r3, #32
   2d296:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2d298:	69fb      	ldr	r3, [r7, #28]
   2d29a:	2b07      	cmp	r3, #7
   2d29c:	d9eb      	bls.n	2d276 <gen_numname+0xca>
}
   2d29e:	46c0      	nop			; (mov r8, r8)
   2d2a0:	46bd      	mov	sp, r7
   2d2a2:	b00a      	add	sp, #40	; 0x28
   2d2a4:	bd80      	pop	{r7, pc}
   2d2a6:	46c0      	nop			; (mov r8, r8)
   2d2a8:	0002c351 	.word	0x0002c351

0002d2ac <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2d2ac:	b580      	push	{r7, lr}
   2d2ae:	b084      	sub	sp, #16
   2d2b0:	af00      	add	r7, sp, #0
   2d2b2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2d2b4:	230f      	movs	r3, #15
   2d2b6:	18fb      	adds	r3, r7, r3
   2d2b8:	2200      	movs	r2, #0
   2d2ba:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2d2bc:	230b      	movs	r3, #11
   2d2be:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2d2c0:	230f      	movs	r3, #15
   2d2c2:	18fb      	adds	r3, r7, r3
   2d2c4:	781b      	ldrb	r3, [r3, #0]
   2d2c6:	b2da      	uxtb	r2, r3
   2d2c8:	0852      	lsrs	r2, r2, #1
   2d2ca:	01db      	lsls	r3, r3, #7
   2d2cc:	4313      	orrs	r3, r2
   2d2ce:	b2d9      	uxtb	r1, r3
   2d2d0:	687b      	ldr	r3, [r7, #4]
   2d2d2:	1c5a      	adds	r2, r3, #1
   2d2d4:	607a      	str	r2, [r7, #4]
   2d2d6:	781a      	ldrb	r2, [r3, #0]
   2d2d8:	230f      	movs	r3, #15
   2d2da:	18fb      	adds	r3, r7, r3
   2d2dc:	188a      	adds	r2, r1, r2
   2d2de:	701a      	strb	r2, [r3, #0]
   2d2e0:	68bb      	ldr	r3, [r7, #8]
   2d2e2:	3b01      	subs	r3, #1
   2d2e4:	60bb      	str	r3, [r7, #8]
   2d2e6:	68bb      	ldr	r3, [r7, #8]
   2d2e8:	2b00      	cmp	r3, #0
   2d2ea:	d1e9      	bne.n	2d2c0 <sum_sfn+0x14>
	return sum;
   2d2ec:	230f      	movs	r3, #15
   2d2ee:	18fb      	adds	r3, r7, r3
   2d2f0:	781b      	ldrb	r3, [r3, #0]
}
   2d2f2:	0018      	movs	r0, r3
   2d2f4:	46bd      	mov	sp, r7
   2d2f6:	b004      	add	sp, #16
   2d2f8:	bd80      	pop	{r7, pc}
	...

0002d2fc <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2d2fc:	b590      	push	{r4, r7, lr}
   2d2fe:	b087      	sub	sp, #28
   2d300:	af00      	add	r7, sp, #0
   2d302:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2d304:	2317      	movs	r3, #23
   2d306:	18fc      	adds	r4, r7, r3
   2d308:	687b      	ldr	r3, [r7, #4]
   2d30a:	2100      	movs	r1, #0
   2d30c:	0018      	movs	r0, r3
   2d30e:	4b74      	ldr	r3, [pc, #464]	; (2d4e0 <dir_find+0x1e4>)
   2d310:	4798      	blx	r3
   2d312:	0003      	movs	r3, r0
   2d314:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d316:	2317      	movs	r3, #23
   2d318:	18fb      	adds	r3, r7, r3
   2d31a:	781b      	ldrb	r3, [r3, #0]
   2d31c:	2b00      	cmp	r3, #0
   2d31e:	d003      	beq.n	2d328 <dir_find+0x2c>
   2d320:	2317      	movs	r3, #23
   2d322:	18fb      	adds	r3, r7, r3
   2d324:	781b      	ldrb	r3, [r3, #0]
   2d326:	e0d6      	b.n	2d4d6 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2d328:	2314      	movs	r3, #20
   2d32a:	18fb      	adds	r3, r7, r3
   2d32c:	22ff      	movs	r2, #255	; 0xff
   2d32e:	701a      	strb	r2, [r3, #0]
   2d330:	2315      	movs	r3, #21
   2d332:	18fb      	adds	r3, r7, r3
   2d334:	2214      	movs	r2, #20
   2d336:	18ba      	adds	r2, r7, r2
   2d338:	7812      	ldrb	r2, [r2, #0]
   2d33a:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2d33c:	687b      	ldr	r3, [r7, #4]
   2d33e:	681a      	ldr	r2, [r3, #0]
   2d340:	687b      	ldr	r3, [r7, #4]
   2d342:	691b      	ldr	r3, [r3, #16]
   2d344:	2117      	movs	r1, #23
   2d346:	187c      	adds	r4, r7, r1
   2d348:	0019      	movs	r1, r3
   2d34a:	0010      	movs	r0, r2
   2d34c:	4b65      	ldr	r3, [pc, #404]	; (2d4e4 <dir_find+0x1e8>)
   2d34e:	4798      	blx	r3
   2d350:	0003      	movs	r3, r0
   2d352:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d354:	2317      	movs	r3, #23
   2d356:	18fb      	adds	r3, r7, r3
   2d358:	781b      	ldrb	r3, [r3, #0]
   2d35a:	2b00      	cmp	r3, #0
   2d35c:	d000      	beq.n	2d360 <dir_find+0x64>
   2d35e:	e0b2      	b.n	2d4c6 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2d360:	687b      	ldr	r3, [r7, #4]
   2d362:	695b      	ldr	r3, [r3, #20]
   2d364:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2d366:	2316      	movs	r3, #22
   2d368:	18fb      	adds	r3, r7, r3
   2d36a:	693a      	ldr	r2, [r7, #16]
   2d36c:	7812      	ldrb	r2, [r2, #0]
   2d36e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2d370:	2316      	movs	r3, #22
   2d372:	18fb      	adds	r3, r7, r3
   2d374:	781b      	ldrb	r3, [r3, #0]
   2d376:	2b00      	cmp	r3, #0
   2d378:	d104      	bne.n	2d384 <dir_find+0x88>
   2d37a:	2317      	movs	r3, #23
   2d37c:	18fb      	adds	r3, r7, r3
   2d37e:	2204      	movs	r2, #4
   2d380:	701a      	strb	r2, [r3, #0]
   2d382:	e0a5      	b.n	2d4d0 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2d384:	693b      	ldr	r3, [r7, #16]
   2d386:	330b      	adds	r3, #11
   2d388:	781a      	ldrb	r2, [r3, #0]
   2d38a:	230f      	movs	r3, #15
   2d38c:	18fb      	adds	r3, r7, r3
   2d38e:	213f      	movs	r1, #63	; 0x3f
   2d390:	400a      	ands	r2, r1
   2d392:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2d394:	2316      	movs	r3, #22
   2d396:	18fb      	adds	r3, r7, r3
   2d398:	781b      	ldrb	r3, [r3, #0]
   2d39a:	2be5      	cmp	r3, #229	; 0xe5
   2d39c:	d00a      	beq.n	2d3b4 <dir_find+0xb8>
   2d39e:	230f      	movs	r3, #15
   2d3a0:	18fb      	adds	r3, r7, r3
   2d3a2:	781b      	ldrb	r3, [r3, #0]
   2d3a4:	2208      	movs	r2, #8
   2d3a6:	4013      	ands	r3, r2
   2d3a8:	d009      	beq.n	2d3be <dir_find+0xc2>
   2d3aa:	230f      	movs	r3, #15
   2d3ac:	18fb      	adds	r3, r7, r3
   2d3ae:	781b      	ldrb	r3, [r3, #0]
   2d3b0:	2b0f      	cmp	r3, #15
   2d3b2:	d004      	beq.n	2d3be <dir_find+0xc2>
			ord = 0xFF;
   2d3b4:	2315      	movs	r3, #21
   2d3b6:	18fb      	adds	r3, r7, r3
   2d3b8:	22ff      	movs	r2, #255	; 0xff
   2d3ba:	701a      	strb	r2, [r3, #0]
   2d3bc:	e073      	b.n	2d4a6 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2d3be:	230f      	movs	r3, #15
   2d3c0:	18fb      	adds	r3, r7, r3
   2d3c2:	781b      	ldrb	r3, [r3, #0]
   2d3c4:	2b0f      	cmp	r3, #15
   2d3c6:	d145      	bne.n	2d454 <dir_find+0x158>
				if (dj->lfn) {
   2d3c8:	687b      	ldr	r3, [r7, #4]
   2d3ca:	69db      	ldr	r3, [r3, #28]
   2d3cc:	2b00      	cmp	r3, #0
   2d3ce:	d100      	bne.n	2d3d2 <dir_find+0xd6>
   2d3d0:	e069      	b.n	2d4a6 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2d3d2:	2316      	movs	r3, #22
   2d3d4:	18fb      	adds	r3, r7, r3
   2d3d6:	781b      	ldrb	r3, [r3, #0]
   2d3d8:	2240      	movs	r2, #64	; 0x40
   2d3da:	4013      	ands	r3, r2
   2d3dc:	d016      	beq.n	2d40c <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2d3de:	2314      	movs	r3, #20
   2d3e0:	18fb      	adds	r3, r7, r3
   2d3e2:	693a      	ldr	r2, [r7, #16]
   2d3e4:	7b52      	ldrb	r2, [r2, #13]
   2d3e6:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2d3e8:	2316      	movs	r3, #22
   2d3ea:	18fb      	adds	r3, r7, r3
   2d3ec:	2216      	movs	r2, #22
   2d3ee:	18ba      	adds	r2, r7, r2
   2d3f0:	7812      	ldrb	r2, [r2, #0]
   2d3f2:	2140      	movs	r1, #64	; 0x40
   2d3f4:	438a      	bics	r2, r1
   2d3f6:	701a      	strb	r2, [r3, #0]
   2d3f8:	2315      	movs	r3, #21
   2d3fa:	18fb      	adds	r3, r7, r3
   2d3fc:	2216      	movs	r2, #22
   2d3fe:	18ba      	adds	r2, r7, r2
   2d400:	7812      	ldrb	r2, [r2, #0]
   2d402:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2d404:	687b      	ldr	r3, [r7, #4]
   2d406:	88da      	ldrh	r2, [r3, #6]
   2d408:	687b      	ldr	r3, [r7, #4]
   2d40a:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2d40c:	2316      	movs	r3, #22
   2d40e:	18fa      	adds	r2, r7, r3
   2d410:	2315      	movs	r3, #21
   2d412:	18fb      	adds	r3, r7, r3
   2d414:	7812      	ldrb	r2, [r2, #0]
   2d416:	781b      	ldrb	r3, [r3, #0]
   2d418:	429a      	cmp	r2, r3
   2d41a:	d116      	bne.n	2d44a <dir_find+0x14e>
   2d41c:	693b      	ldr	r3, [r7, #16]
   2d41e:	330d      	adds	r3, #13
   2d420:	781b      	ldrb	r3, [r3, #0]
   2d422:	2214      	movs	r2, #20
   2d424:	18ba      	adds	r2, r7, r2
   2d426:	7812      	ldrb	r2, [r2, #0]
   2d428:	429a      	cmp	r2, r3
   2d42a:	d10e      	bne.n	2d44a <dir_find+0x14e>
   2d42c:	687b      	ldr	r3, [r7, #4]
   2d42e:	69db      	ldr	r3, [r3, #28]
   2d430:	693a      	ldr	r2, [r7, #16]
   2d432:	0011      	movs	r1, r2
   2d434:	0018      	movs	r0, r3
   2d436:	4b2c      	ldr	r3, [pc, #176]	; (2d4e8 <dir_find+0x1ec>)
   2d438:	4798      	blx	r3
   2d43a:	1e03      	subs	r3, r0, #0
   2d43c:	d005      	beq.n	2d44a <dir_find+0x14e>
   2d43e:	2315      	movs	r3, #21
   2d440:	18fb      	adds	r3, r7, r3
   2d442:	781b      	ldrb	r3, [r3, #0]
   2d444:	3b01      	subs	r3, #1
   2d446:	b2da      	uxtb	r2, r3
   2d448:	e000      	b.n	2d44c <dir_find+0x150>
   2d44a:	22ff      	movs	r2, #255	; 0xff
   2d44c:	2315      	movs	r3, #21
   2d44e:	18fb      	adds	r3, r7, r3
   2d450:	701a      	strb	r2, [r3, #0]
   2d452:	e028      	b.n	2d4a6 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d454:	2315      	movs	r3, #21
   2d456:	18fb      	adds	r3, r7, r3
   2d458:	781b      	ldrb	r3, [r3, #0]
   2d45a:	2b00      	cmp	r3, #0
   2d45c:	d10a      	bne.n	2d474 <dir_find+0x178>
   2d45e:	693b      	ldr	r3, [r7, #16]
   2d460:	0018      	movs	r0, r3
   2d462:	4b22      	ldr	r3, [pc, #136]	; (2d4ec <dir_find+0x1f0>)
   2d464:	4798      	blx	r3
   2d466:	0003      	movs	r3, r0
   2d468:	001a      	movs	r2, r3
   2d46a:	2314      	movs	r3, #20
   2d46c:	18fb      	adds	r3, r7, r3
   2d46e:	781b      	ldrb	r3, [r3, #0]
   2d470:	4293      	cmp	r3, r2
   2d472:	d02a      	beq.n	2d4ca <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2d474:	2315      	movs	r3, #21
   2d476:	18fb      	adds	r3, r7, r3
   2d478:	22ff      	movs	r2, #255	; 0xff
   2d47a:	701a      	strb	r2, [r3, #0]
   2d47c:	687b      	ldr	r3, [r7, #4]
   2d47e:	2201      	movs	r2, #1
   2d480:	4252      	negs	r2, r2
   2d482:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d484:	687b      	ldr	r3, [r7, #4]
   2d486:	699b      	ldr	r3, [r3, #24]
   2d488:	330b      	adds	r3, #11
   2d48a:	781b      	ldrb	r3, [r3, #0]
   2d48c:	001a      	movs	r2, r3
   2d48e:	2301      	movs	r3, #1
   2d490:	4013      	ands	r3, r2
   2d492:	d108      	bne.n	2d4a6 <dir_find+0x1aa>
   2d494:	687b      	ldr	r3, [r7, #4]
   2d496:	6999      	ldr	r1, [r3, #24]
   2d498:	693b      	ldr	r3, [r7, #16]
   2d49a:	220b      	movs	r2, #11
   2d49c:	0018      	movs	r0, r3
   2d49e:	4b14      	ldr	r3, [pc, #80]	; (2d4f0 <dir_find+0x1f4>)
   2d4a0:	4798      	blx	r3
   2d4a2:	1e03      	subs	r3, r0, #0
   2d4a4:	d013      	beq.n	2d4ce <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2d4a6:	2317      	movs	r3, #23
   2d4a8:	18fc      	adds	r4, r7, r3
   2d4aa:	687b      	ldr	r3, [r7, #4]
   2d4ac:	2100      	movs	r1, #0
   2d4ae:	0018      	movs	r0, r3
   2d4b0:	4b10      	ldr	r3, [pc, #64]	; (2d4f4 <dir_find+0x1f8>)
   2d4b2:	4798      	blx	r3
   2d4b4:	0003      	movs	r3, r0
   2d4b6:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d4b8:	2317      	movs	r3, #23
   2d4ba:	18fb      	adds	r3, r7, r3
   2d4bc:	781b      	ldrb	r3, [r3, #0]
   2d4be:	2b00      	cmp	r3, #0
   2d4c0:	d100      	bne.n	2d4c4 <dir_find+0x1c8>
   2d4c2:	e73b      	b.n	2d33c <dir_find+0x40>
   2d4c4:	e004      	b.n	2d4d0 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2d4c6:	46c0      	nop			; (mov r8, r8)
   2d4c8:	e002      	b.n	2d4d0 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d4ca:	46c0      	nop			; (mov r8, r8)
   2d4cc:	e000      	b.n	2d4d0 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d4ce:	46c0      	nop			; (mov r8, r8)

	return res;
   2d4d0:	2317      	movs	r3, #23
   2d4d2:	18fb      	adds	r3, r7, r3
   2d4d4:	781b      	ldrb	r3, [r3, #0]
}
   2d4d6:	0018      	movs	r0, r3
   2d4d8:	46bd      	mov	sp, r7
   2d4da:	b007      	add	sp, #28
   2d4dc:	bd90      	pop	{r4, r7, pc}
   2d4de:	46c0      	nop			; (mov r8, r8)
   2d4e0:	0002cc79 	.word	0x0002cc79
   2d4e4:	0002c435 	.word	0x0002c435
   2d4e8:	0002cf99 	.word	0x0002cf99
   2d4ec:	0002d2ad 	.word	0x0002d2ad
   2d4f0:	0002c3b9 	.word	0x0002c3b9
   2d4f4:	0002cda9 	.word	0x0002cda9

0002d4f8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2d4f8:	b590      	push	{r4, r7, lr}
   2d4fa:	b08d      	sub	sp, #52	; 0x34
   2d4fc:	af00      	add	r7, sp, #0
   2d4fe:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2d500:	687b      	ldr	r3, [r7, #4]
   2d502:	699b      	ldr	r3, [r3, #24]
   2d504:	627b      	str	r3, [r7, #36]	; 0x24
   2d506:	687b      	ldr	r3, [r7, #4]
   2d508:	69db      	ldr	r3, [r3, #28]
   2d50a:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2d50c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2d50e:	230c      	movs	r3, #12
   2d510:	18fb      	adds	r3, r7, r3
   2d512:	220c      	movs	r2, #12
   2d514:	0018      	movs	r0, r3
   2d516:	4bc8      	ldr	r3, [pc, #800]	; (2d838 <dir_register+0x340>)
   2d518:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2d51a:	230c      	movs	r3, #12
   2d51c:	18fb      	adds	r3, r7, r3
   2d51e:	7adb      	ldrb	r3, [r3, #11]
   2d520:	001a      	movs	r2, r3
   2d522:	2301      	movs	r3, #1
   2d524:	4013      	ands	r3, r2
   2d526:	d048      	beq.n	2d5ba <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2d528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d52a:	330b      	adds	r3, #11
   2d52c:	2200      	movs	r2, #0
   2d52e:	701a      	strb	r2, [r3, #0]
   2d530:	687b      	ldr	r3, [r7, #4]
   2d532:	2200      	movs	r2, #0
   2d534:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2d536:	232c      	movs	r3, #44	; 0x2c
   2d538:	18fb      	adds	r3, r7, r3
   2d53a:	2201      	movs	r2, #1
   2d53c:	801a      	strh	r2, [r3, #0]
   2d53e:	e01c      	b.n	2d57a <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2d540:	232c      	movs	r3, #44	; 0x2c
   2d542:	18fb      	adds	r3, r7, r3
   2d544:	881b      	ldrh	r3, [r3, #0]
   2d546:	6a3a      	ldr	r2, [r7, #32]
   2d548:	210c      	movs	r1, #12
   2d54a:	1879      	adds	r1, r7, r1
   2d54c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2d54e:	4cbb      	ldr	r4, [pc, #748]	; (2d83c <dir_register+0x344>)
   2d550:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2d552:	232f      	movs	r3, #47	; 0x2f
   2d554:	18fc      	adds	r4, r7, r3
   2d556:	687b      	ldr	r3, [r7, #4]
   2d558:	0018      	movs	r0, r3
   2d55a:	4bb9      	ldr	r3, [pc, #740]	; (2d840 <dir_register+0x348>)
   2d55c:	4798      	blx	r3
   2d55e:	0003      	movs	r3, r0
   2d560:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2d562:	232f      	movs	r3, #47	; 0x2f
   2d564:	18fb      	adds	r3, r7, r3
   2d566:	781b      	ldrb	r3, [r3, #0]
   2d568:	2b00      	cmp	r3, #0
   2d56a:	d10c      	bne.n	2d586 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2d56c:	232c      	movs	r3, #44	; 0x2c
   2d56e:	18fb      	adds	r3, r7, r3
   2d570:	881a      	ldrh	r2, [r3, #0]
   2d572:	232c      	movs	r3, #44	; 0x2c
   2d574:	18fb      	adds	r3, r7, r3
   2d576:	3201      	adds	r2, #1
   2d578:	801a      	strh	r2, [r3, #0]
   2d57a:	232c      	movs	r3, #44	; 0x2c
   2d57c:	18fb      	adds	r3, r7, r3
   2d57e:	881b      	ldrh	r3, [r3, #0]
   2d580:	2b63      	cmp	r3, #99	; 0x63
   2d582:	d9dd      	bls.n	2d540 <dir_register+0x48>
   2d584:	e000      	b.n	2d588 <dir_register+0x90>
			if (res != FR_OK) break;
   2d586:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2d588:	232c      	movs	r3, #44	; 0x2c
   2d58a:	18fb      	adds	r3, r7, r3
   2d58c:	881b      	ldrh	r3, [r3, #0]
   2d58e:	2b64      	cmp	r3, #100	; 0x64
   2d590:	d101      	bne.n	2d596 <dir_register+0x9e>
   2d592:	2307      	movs	r3, #7
   2d594:	e14c      	b.n	2d830 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2d596:	232f      	movs	r3, #47	; 0x2f
   2d598:	18fb      	adds	r3, r7, r3
   2d59a:	781b      	ldrb	r3, [r3, #0]
   2d59c:	2b04      	cmp	r3, #4
   2d59e:	d003      	beq.n	2d5a8 <dir_register+0xb0>
   2d5a0:	232f      	movs	r3, #47	; 0x2f
   2d5a2:	18fb      	adds	r3, r7, r3
   2d5a4:	781b      	ldrb	r3, [r3, #0]
   2d5a6:	e143      	b.n	2d830 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2d5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d5aa:	330b      	adds	r3, #11
   2d5ac:	220c      	movs	r2, #12
   2d5ae:	18ba      	adds	r2, r7, r2
   2d5b0:	7ad2      	ldrb	r2, [r2, #11]
   2d5b2:	701a      	strb	r2, [r3, #0]
   2d5b4:	687b      	ldr	r3, [r7, #4]
   2d5b6:	6a3a      	ldr	r2, [r7, #32]
   2d5b8:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2d5ba:	230c      	movs	r3, #12
   2d5bc:	18fb      	adds	r3, r7, r3
   2d5be:	7adb      	ldrb	r3, [r3, #11]
   2d5c0:	001a      	movs	r2, r3
   2d5c2:	2302      	movs	r3, #2
   2d5c4:	4013      	ands	r3, r2
   2d5c6:	d023      	beq.n	2d610 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2d5c8:	232a      	movs	r3, #42	; 0x2a
   2d5ca:	18fb      	adds	r3, r7, r3
   2d5cc:	2200      	movs	r2, #0
   2d5ce:	801a      	strh	r2, [r3, #0]
   2d5d0:	e006      	b.n	2d5e0 <dir_register+0xe8>
   2d5d2:	232a      	movs	r3, #42	; 0x2a
   2d5d4:	18fb      	adds	r3, r7, r3
   2d5d6:	881a      	ldrh	r2, [r3, #0]
   2d5d8:	232a      	movs	r3, #42	; 0x2a
   2d5da:	18fb      	adds	r3, r7, r3
   2d5dc:	3201      	adds	r2, #1
   2d5de:	801a      	strh	r2, [r3, #0]
   2d5e0:	232a      	movs	r3, #42	; 0x2a
   2d5e2:	18fb      	adds	r3, r7, r3
   2d5e4:	881b      	ldrh	r3, [r3, #0]
   2d5e6:	005b      	lsls	r3, r3, #1
   2d5e8:	6a3a      	ldr	r2, [r7, #32]
   2d5ea:	18d3      	adds	r3, r2, r3
   2d5ec:	881b      	ldrh	r3, [r3, #0]
   2d5ee:	2b00      	cmp	r3, #0
   2d5f0:	d1ef      	bne.n	2d5d2 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2d5f2:	232a      	movs	r3, #42	; 0x2a
   2d5f4:	18fb      	adds	r3, r7, r3
   2d5f6:	881b      	ldrh	r3, [r3, #0]
   2d5f8:	3319      	adds	r3, #25
   2d5fa:	001a      	movs	r2, r3
   2d5fc:	4b91      	ldr	r3, [pc, #580]	; (2d844 <dir_register+0x34c>)
   2d5fe:	210d      	movs	r1, #13
   2d600:	0010      	movs	r0, r2
   2d602:	4798      	blx	r3
   2d604:	0003      	movs	r3, r0
   2d606:	001a      	movs	r2, r3
   2d608:	232a      	movs	r3, #42	; 0x2a
   2d60a:	18fb      	adds	r3, r7, r3
   2d60c:	801a      	strh	r2, [r3, #0]
   2d60e:	e003      	b.n	2d618 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2d610:	232a      	movs	r3, #42	; 0x2a
   2d612:	18fb      	adds	r3, r7, r3
   2d614:	2201      	movs	r2, #1
   2d616:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2d618:	232f      	movs	r3, #47	; 0x2f
   2d61a:	18fc      	adds	r4, r7, r3
   2d61c:	687b      	ldr	r3, [r7, #4]
   2d61e:	2100      	movs	r1, #0
   2d620:	0018      	movs	r0, r3
   2d622:	4b89      	ldr	r3, [pc, #548]	; (2d848 <dir_register+0x350>)
   2d624:	4798      	blx	r3
   2d626:	0003      	movs	r3, r0
   2d628:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d62a:	232f      	movs	r3, #47	; 0x2f
   2d62c:	18fb      	adds	r3, r7, r3
   2d62e:	781b      	ldrb	r3, [r3, #0]
   2d630:	2b00      	cmp	r3, #0
   2d632:	d003      	beq.n	2d63c <dir_register+0x144>
   2d634:	232f      	movs	r3, #47	; 0x2f
   2d636:	18fb      	adds	r3, r7, r3
   2d638:	781b      	ldrb	r3, [r3, #0]
   2d63a:	e0f9      	b.n	2d830 <dir_register+0x338>
	n = is = 0;
   2d63c:	2328      	movs	r3, #40	; 0x28
   2d63e:	18fb      	adds	r3, r7, r3
   2d640:	2200      	movs	r2, #0
   2d642:	801a      	strh	r2, [r3, #0]
   2d644:	232c      	movs	r3, #44	; 0x2c
   2d646:	18fb      	adds	r3, r7, r3
   2d648:	2228      	movs	r2, #40	; 0x28
   2d64a:	18ba      	adds	r2, r7, r2
   2d64c:	8812      	ldrh	r2, [r2, #0]
   2d64e:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2d650:	687b      	ldr	r3, [r7, #4]
   2d652:	681a      	ldr	r2, [r3, #0]
   2d654:	687b      	ldr	r3, [r7, #4]
   2d656:	691b      	ldr	r3, [r3, #16]
   2d658:	212f      	movs	r1, #47	; 0x2f
   2d65a:	187c      	adds	r4, r7, r1
   2d65c:	0019      	movs	r1, r3
   2d65e:	0010      	movs	r0, r2
   2d660:	4b7a      	ldr	r3, [pc, #488]	; (2d84c <dir_register+0x354>)
   2d662:	4798      	blx	r3
   2d664:	0003      	movs	r3, r0
   2d666:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d668:	232f      	movs	r3, #47	; 0x2f
   2d66a:	18fb      	adds	r3, r7, r3
   2d66c:	781b      	ldrb	r3, [r3, #0]
   2d66e:	2b00      	cmp	r3, #0
   2d670:	d13c      	bne.n	2d6ec <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2d672:	687b      	ldr	r3, [r7, #4]
   2d674:	695a      	ldr	r2, [r3, #20]
   2d676:	231f      	movs	r3, #31
   2d678:	18fb      	adds	r3, r7, r3
   2d67a:	7812      	ldrb	r2, [r2, #0]
   2d67c:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2d67e:	231f      	movs	r3, #31
   2d680:	18fb      	adds	r3, r7, r3
   2d682:	781b      	ldrb	r3, [r3, #0]
   2d684:	2be5      	cmp	r3, #229	; 0xe5
   2d686:	d004      	beq.n	2d692 <dir_register+0x19a>
   2d688:	231f      	movs	r3, #31
   2d68a:	18fb      	adds	r3, r7, r3
   2d68c:	781b      	ldrb	r3, [r3, #0]
   2d68e:	2b00      	cmp	r3, #0
   2d690:	d119      	bne.n	2d6c6 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2d692:	232c      	movs	r3, #44	; 0x2c
   2d694:	18fb      	adds	r3, r7, r3
   2d696:	881b      	ldrh	r3, [r3, #0]
   2d698:	2b00      	cmp	r3, #0
   2d69a:	d104      	bne.n	2d6a6 <dir_register+0x1ae>
   2d69c:	2328      	movs	r3, #40	; 0x28
   2d69e:	18fb      	adds	r3, r7, r3
   2d6a0:	687a      	ldr	r2, [r7, #4]
   2d6a2:	88d2      	ldrh	r2, [r2, #6]
   2d6a4:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2d6a6:	232c      	movs	r3, #44	; 0x2c
   2d6a8:	18fb      	adds	r3, r7, r3
   2d6aa:	222c      	movs	r2, #44	; 0x2c
   2d6ac:	18ba      	adds	r2, r7, r2
   2d6ae:	8812      	ldrh	r2, [r2, #0]
   2d6b0:	3201      	adds	r2, #1
   2d6b2:	801a      	strh	r2, [r3, #0]
   2d6b4:	232c      	movs	r3, #44	; 0x2c
   2d6b6:	18fa      	adds	r2, r7, r3
   2d6b8:	232a      	movs	r3, #42	; 0x2a
   2d6ba:	18fb      	adds	r3, r7, r3
   2d6bc:	8812      	ldrh	r2, [r2, #0]
   2d6be:	881b      	ldrh	r3, [r3, #0]
   2d6c0:	429a      	cmp	r2, r3
   2d6c2:	d104      	bne.n	2d6ce <dir_register+0x1d6>
   2d6c4:	e013      	b.n	2d6ee <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2d6c6:	232c      	movs	r3, #44	; 0x2c
   2d6c8:	18fb      	adds	r3, r7, r3
   2d6ca:	2200      	movs	r2, #0
   2d6cc:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2d6ce:	232f      	movs	r3, #47	; 0x2f
   2d6d0:	18fc      	adds	r4, r7, r3
   2d6d2:	687b      	ldr	r3, [r7, #4]
   2d6d4:	2101      	movs	r1, #1
   2d6d6:	0018      	movs	r0, r3
   2d6d8:	4b5d      	ldr	r3, [pc, #372]	; (2d850 <dir_register+0x358>)
   2d6da:	4798      	blx	r3
   2d6dc:	0003      	movs	r3, r0
   2d6de:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d6e0:	232f      	movs	r3, #47	; 0x2f
   2d6e2:	18fb      	adds	r3, r7, r3
   2d6e4:	781b      	ldrb	r3, [r3, #0]
   2d6e6:	2b00      	cmp	r3, #0
   2d6e8:	d0b2      	beq.n	2d650 <dir_register+0x158>
   2d6ea:	e000      	b.n	2d6ee <dir_register+0x1f6>
		if (res != FR_OK) break;
   2d6ec:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2d6ee:	232f      	movs	r3, #47	; 0x2f
   2d6f0:	18fb      	adds	r3, r7, r3
   2d6f2:	781b      	ldrb	r3, [r3, #0]
   2d6f4:	2b00      	cmp	r3, #0
   2d6f6:	d163      	bne.n	2d7c0 <dir_register+0x2c8>
   2d6f8:	232a      	movs	r3, #42	; 0x2a
   2d6fa:	18fb      	adds	r3, r7, r3
   2d6fc:	881b      	ldrh	r3, [r3, #0]
   2d6fe:	2b01      	cmp	r3, #1
   2d700:	d95e      	bls.n	2d7c0 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2d702:	232f      	movs	r3, #47	; 0x2f
   2d704:	18fc      	adds	r4, r7, r3
   2d706:	2328      	movs	r3, #40	; 0x28
   2d708:	18fb      	adds	r3, r7, r3
   2d70a:	881a      	ldrh	r2, [r3, #0]
   2d70c:	687b      	ldr	r3, [r7, #4]
   2d70e:	0011      	movs	r1, r2
   2d710:	0018      	movs	r0, r3
   2d712:	4b4d      	ldr	r3, [pc, #308]	; (2d848 <dir_register+0x350>)
   2d714:	4798      	blx	r3
   2d716:	0003      	movs	r3, r0
   2d718:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d71a:	232f      	movs	r3, #47	; 0x2f
   2d71c:	18fb      	adds	r3, r7, r3
   2d71e:	781b      	ldrb	r3, [r3, #0]
   2d720:	2b00      	cmp	r3, #0
   2d722:	d14d      	bne.n	2d7c0 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2d724:	687b      	ldr	r3, [r7, #4]
   2d726:	699b      	ldr	r3, [r3, #24]
   2d728:	221e      	movs	r2, #30
   2d72a:	18bc      	adds	r4, r7, r2
   2d72c:	0018      	movs	r0, r3
   2d72e:	4b49      	ldr	r3, [pc, #292]	; (2d854 <dir_register+0x35c>)
   2d730:	4798      	blx	r3
   2d732:	0003      	movs	r3, r0
   2d734:	7023      	strb	r3, [r4, #0]
			ne--;
   2d736:	232a      	movs	r3, #42	; 0x2a
   2d738:	18fb      	adds	r3, r7, r3
   2d73a:	881a      	ldrh	r2, [r3, #0]
   2d73c:	232a      	movs	r3, #42	; 0x2a
   2d73e:	18fb      	adds	r3, r7, r3
   2d740:	3a01      	subs	r2, #1
   2d742:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2d744:	687b      	ldr	r3, [r7, #4]
   2d746:	681a      	ldr	r2, [r3, #0]
   2d748:	687b      	ldr	r3, [r7, #4]
   2d74a:	691b      	ldr	r3, [r3, #16]
   2d74c:	212f      	movs	r1, #47	; 0x2f
   2d74e:	187c      	adds	r4, r7, r1
   2d750:	0019      	movs	r1, r3
   2d752:	0010      	movs	r0, r2
   2d754:	4b3d      	ldr	r3, [pc, #244]	; (2d84c <dir_register+0x354>)
   2d756:	4798      	blx	r3
   2d758:	0003      	movs	r3, r0
   2d75a:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2d75c:	232f      	movs	r3, #47	; 0x2f
   2d75e:	18fb      	adds	r3, r7, r3
   2d760:	781b      	ldrb	r3, [r3, #0]
   2d762:	2b00      	cmp	r3, #0
   2d764:	d12b      	bne.n	2d7be <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2d766:	687b      	ldr	r3, [r7, #4]
   2d768:	69d8      	ldr	r0, [r3, #28]
   2d76a:	687b      	ldr	r3, [r7, #4]
   2d76c:	6959      	ldr	r1, [r3, #20]
   2d76e:	232a      	movs	r3, #42	; 0x2a
   2d770:	18fb      	adds	r3, r7, r3
   2d772:	881b      	ldrh	r3, [r3, #0]
   2d774:	b2da      	uxtb	r2, r3
   2d776:	231e      	movs	r3, #30
   2d778:	18fb      	adds	r3, r7, r3
   2d77a:	781b      	ldrb	r3, [r3, #0]
   2d77c:	4c36      	ldr	r4, [pc, #216]	; (2d858 <dir_register+0x360>)
   2d77e:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2d780:	687b      	ldr	r3, [r7, #4]
   2d782:	681b      	ldr	r3, [r3, #0]
   2d784:	2201      	movs	r2, #1
   2d786:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2d788:	232f      	movs	r3, #47	; 0x2f
   2d78a:	18fc      	adds	r4, r7, r3
   2d78c:	687b      	ldr	r3, [r7, #4]
   2d78e:	2100      	movs	r1, #0
   2d790:	0018      	movs	r0, r3
   2d792:	4b2f      	ldr	r3, [pc, #188]	; (2d850 <dir_register+0x358>)
   2d794:	4798      	blx	r3
   2d796:	0003      	movs	r3, r0
   2d798:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2d79a:	232f      	movs	r3, #47	; 0x2f
   2d79c:	18fb      	adds	r3, r7, r3
   2d79e:	781b      	ldrb	r3, [r3, #0]
   2d7a0:	2b00      	cmp	r3, #0
   2d7a2:	d10d      	bne.n	2d7c0 <dir_register+0x2c8>
   2d7a4:	232a      	movs	r3, #42	; 0x2a
   2d7a6:	18fb      	adds	r3, r7, r3
   2d7a8:	222a      	movs	r2, #42	; 0x2a
   2d7aa:	18ba      	adds	r2, r7, r2
   2d7ac:	8812      	ldrh	r2, [r2, #0]
   2d7ae:	3a01      	subs	r2, #1
   2d7b0:	801a      	strh	r2, [r3, #0]
   2d7b2:	232a      	movs	r3, #42	; 0x2a
   2d7b4:	18fb      	adds	r3, r7, r3
   2d7b6:	881b      	ldrh	r3, [r3, #0]
   2d7b8:	2b00      	cmp	r3, #0
   2d7ba:	d1c3      	bne.n	2d744 <dir_register+0x24c>
   2d7bc:	e000      	b.n	2d7c0 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2d7be:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2d7c0:	232f      	movs	r3, #47	; 0x2f
   2d7c2:	18fb      	adds	r3, r7, r3
   2d7c4:	781b      	ldrb	r3, [r3, #0]
   2d7c6:	2b00      	cmp	r3, #0
   2d7c8:	d12f      	bne.n	2d82a <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2d7ca:	687b      	ldr	r3, [r7, #4]
   2d7cc:	681a      	ldr	r2, [r3, #0]
   2d7ce:	687b      	ldr	r3, [r7, #4]
   2d7d0:	691b      	ldr	r3, [r3, #16]
   2d7d2:	212f      	movs	r1, #47	; 0x2f
   2d7d4:	187c      	adds	r4, r7, r1
   2d7d6:	0019      	movs	r1, r3
   2d7d8:	0010      	movs	r0, r2
   2d7da:	4b1c      	ldr	r3, [pc, #112]	; (2d84c <dir_register+0x354>)
   2d7dc:	4798      	blx	r3
   2d7de:	0003      	movs	r3, r0
   2d7e0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d7e2:	232f      	movs	r3, #47	; 0x2f
   2d7e4:	18fb      	adds	r3, r7, r3
   2d7e6:	781b      	ldrb	r3, [r3, #0]
   2d7e8:	2b00      	cmp	r3, #0
   2d7ea:	d11e      	bne.n	2d82a <dir_register+0x332>
			dir = dj->dir;
   2d7ec:	687b      	ldr	r3, [r7, #4]
   2d7ee:	695b      	ldr	r3, [r3, #20]
   2d7f0:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2d7f2:	69bb      	ldr	r3, [r7, #24]
   2d7f4:	2220      	movs	r2, #32
   2d7f6:	2100      	movs	r1, #0
   2d7f8:	0018      	movs	r0, r3
   2d7fa:	4b18      	ldr	r3, [pc, #96]	; (2d85c <dir_register+0x364>)
   2d7fc:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2d7fe:	687b      	ldr	r3, [r7, #4]
   2d800:	6999      	ldr	r1, [r3, #24]
   2d802:	69bb      	ldr	r3, [r7, #24]
   2d804:	220b      	movs	r2, #11
   2d806:	0018      	movs	r0, r3
   2d808:	4b0b      	ldr	r3, [pc, #44]	; (2d838 <dir_register+0x340>)
   2d80a:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2d80c:	69bb      	ldr	r3, [r7, #24]
   2d80e:	330c      	adds	r3, #12
   2d810:	001a      	movs	r2, r3
   2d812:	687b      	ldr	r3, [r7, #4]
   2d814:	699b      	ldr	r3, [r3, #24]
   2d816:	330b      	adds	r3, #11
   2d818:	781b      	ldrb	r3, [r3, #0]
   2d81a:	2118      	movs	r1, #24
   2d81c:	400b      	ands	r3, r1
   2d81e:	b2db      	uxtb	r3, r3
   2d820:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2d822:	687b      	ldr	r3, [r7, #4]
   2d824:	681b      	ldr	r3, [r3, #0]
   2d826:	2201      	movs	r2, #1
   2d828:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2d82a:	232f      	movs	r3, #47	; 0x2f
   2d82c:	18fb      	adds	r3, r7, r3
   2d82e:	781b      	ldrb	r3, [r3, #0]
}
   2d830:	0018      	movs	r0, r3
   2d832:	46bd      	mov	sp, r7
   2d834:	b00d      	add	sp, #52	; 0x34
   2d836:	bd90      	pop	{r4, r7, pc}
   2d838:	0002c351 	.word	0x0002c351
   2d83c:	0002d1ad 	.word	0x0002d1ad
   2d840:	0002d2fd 	.word	0x0002d2fd
   2d844:	00033749 	.word	0x00033749
   2d848:	0002cc79 	.word	0x0002cc79
   2d84c:	0002c435 	.word	0x0002c435
   2d850:	0002cda9 	.word	0x0002cda9
   2d854:	0002d2ad 	.word	0x0002d2ad
   2d858:	0002d09d 	.word	0x0002d09d
   2d85c:	0002c389 	.word	0x0002c389

0002d860 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2d860:	b590      	push	{r4, r7, lr}
   2d862:	b08b      	sub	sp, #44	; 0x2c
   2d864:	af00      	add	r7, sp, #0
   2d866:	6078      	str	r0, [r7, #4]
   2d868:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2d86a:	683b      	ldr	r3, [r7, #0]
   2d86c:	681b      	ldr	r3, [r3, #0]
   2d86e:	613b      	str	r3, [r7, #16]
   2d870:	e002      	b.n	2d878 <create_name+0x18>
   2d872:	693b      	ldr	r3, [r7, #16]
   2d874:	3301      	adds	r3, #1
   2d876:	613b      	str	r3, [r7, #16]
   2d878:	693b      	ldr	r3, [r7, #16]
   2d87a:	781b      	ldrb	r3, [r3, #0]
   2d87c:	2b2f      	cmp	r3, #47	; 0x2f
   2d87e:	d0f8      	beq.n	2d872 <create_name+0x12>
   2d880:	693b      	ldr	r3, [r7, #16]
   2d882:	781b      	ldrb	r3, [r3, #0]
   2d884:	2b5c      	cmp	r3, #92	; 0x5c
   2d886:	d0f4      	beq.n	2d872 <create_name+0x12>
	lfn = dj->lfn;
   2d888:	687b      	ldr	r3, [r7, #4]
   2d88a:	69db      	ldr	r3, [r3, #28]
   2d88c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2d88e:	2300      	movs	r3, #0
   2d890:	617b      	str	r3, [r7, #20]
   2d892:	697b      	ldr	r3, [r7, #20]
   2d894:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2d896:	69bb      	ldr	r3, [r7, #24]
   2d898:	1c5a      	adds	r2, r3, #1
   2d89a:	61ba      	str	r2, [r7, #24]
   2d89c:	693a      	ldr	r2, [r7, #16]
   2d89e:	18d3      	adds	r3, r2, r3
   2d8a0:	781a      	ldrb	r2, [r3, #0]
   2d8a2:	2324      	movs	r3, #36	; 0x24
   2d8a4:	18fb      	adds	r3, r7, r3
   2d8a6:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2d8a8:	2324      	movs	r3, #36	; 0x24
   2d8aa:	18fb      	adds	r3, r7, r3
   2d8ac:	881b      	ldrh	r3, [r3, #0]
   2d8ae:	2b1f      	cmp	r3, #31
   2d8b0:	d944      	bls.n	2d93c <create_name+0xdc>
   2d8b2:	2324      	movs	r3, #36	; 0x24
   2d8b4:	18fb      	adds	r3, r7, r3
   2d8b6:	881b      	ldrh	r3, [r3, #0]
   2d8b8:	2b2f      	cmp	r3, #47	; 0x2f
   2d8ba:	d03f      	beq.n	2d93c <create_name+0xdc>
   2d8bc:	2324      	movs	r3, #36	; 0x24
   2d8be:	18fb      	adds	r3, r7, r3
   2d8c0:	881b      	ldrh	r3, [r3, #0]
   2d8c2:	2b5c      	cmp	r3, #92	; 0x5c
   2d8c4:	d03a      	beq.n	2d93c <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2d8c6:	697b      	ldr	r3, [r7, #20]
   2d8c8:	2bfe      	cmp	r3, #254	; 0xfe
   2d8ca:	d901      	bls.n	2d8d0 <create_name+0x70>
			return FR_INVALID_NAME;
   2d8cc:	2306      	movs	r3, #6
   2d8ce:	e1e7      	b.n	2dca0 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2d8d0:	2324      	movs	r3, #36	; 0x24
   2d8d2:	18fb      	adds	r3, r7, r3
   2d8d4:	2224      	movs	r2, #36	; 0x24
   2d8d6:	18ba      	adds	r2, r7, r2
   2d8d8:	8812      	ldrh	r2, [r2, #0]
   2d8da:	21ff      	movs	r1, #255	; 0xff
   2d8dc:	400a      	ands	r2, r1
   2d8de:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2d8e0:	2324      	movs	r3, #36	; 0x24
   2d8e2:	18fc      	adds	r4, r7, r3
   2d8e4:	2324      	movs	r3, #36	; 0x24
   2d8e6:	18fb      	adds	r3, r7, r3
   2d8e8:	881b      	ldrh	r3, [r3, #0]
   2d8ea:	2101      	movs	r1, #1
   2d8ec:	0018      	movs	r0, r3
   2d8ee:	4bba      	ldr	r3, [pc, #744]	; (2dbd8 <create_name+0x378>)
   2d8f0:	4798      	blx	r3
   2d8f2:	0003      	movs	r3, r0
   2d8f4:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2d8f6:	2324      	movs	r3, #36	; 0x24
   2d8f8:	18fb      	adds	r3, r7, r3
   2d8fa:	881b      	ldrh	r3, [r3, #0]
   2d8fc:	2b00      	cmp	r3, #0
   2d8fe:	d101      	bne.n	2d904 <create_name+0xa4>
   2d900:	2306      	movs	r3, #6
   2d902:	e1cd      	b.n	2dca0 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2d904:	2324      	movs	r3, #36	; 0x24
   2d906:	18fb      	adds	r3, r7, r3
   2d908:	881b      	ldrh	r3, [r3, #0]
   2d90a:	2b7f      	cmp	r3, #127	; 0x7f
   2d90c:	d80b      	bhi.n	2d926 <create_name+0xc6>
   2d90e:	2324      	movs	r3, #36	; 0x24
   2d910:	18fb      	adds	r3, r7, r3
   2d912:	881a      	ldrh	r2, [r3, #0]
   2d914:	4bb1      	ldr	r3, [pc, #708]	; (2dbdc <create_name+0x37c>)
   2d916:	0011      	movs	r1, r2
   2d918:	0018      	movs	r0, r3
   2d91a:	4bb1      	ldr	r3, [pc, #708]	; (2dbe0 <create_name+0x380>)
   2d91c:	4798      	blx	r3
   2d91e:	1e03      	subs	r3, r0, #0
   2d920:	d001      	beq.n	2d926 <create_name+0xc6>
			return FR_INVALID_NAME;
   2d922:	2306      	movs	r3, #6
   2d924:	e1bc      	b.n	2dca0 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2d926:	697b      	ldr	r3, [r7, #20]
   2d928:	1c5a      	adds	r2, r3, #1
   2d92a:	617a      	str	r2, [r7, #20]
   2d92c:	005b      	lsls	r3, r3, #1
   2d92e:	68fa      	ldr	r2, [r7, #12]
   2d930:	18d3      	adds	r3, r2, r3
   2d932:	2224      	movs	r2, #36	; 0x24
   2d934:	18ba      	adds	r2, r7, r2
   2d936:	8812      	ldrh	r2, [r2, #0]
   2d938:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2d93a:	e7ac      	b.n	2d896 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2d93c:	693a      	ldr	r2, [r7, #16]
   2d93e:	69bb      	ldr	r3, [r7, #24]
   2d940:	18d2      	adds	r2, r2, r3
   2d942:	683b      	ldr	r3, [r7, #0]
   2d944:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2d946:	2324      	movs	r3, #36	; 0x24
   2d948:	18fb      	adds	r3, r7, r3
   2d94a:	881b      	ldrh	r3, [r3, #0]
   2d94c:	2b1f      	cmp	r3, #31
   2d94e:	d801      	bhi.n	2d954 <create_name+0xf4>
   2d950:	2204      	movs	r2, #4
   2d952:	e000      	b.n	2d956 <create_name+0xf6>
   2d954:	2200      	movs	r2, #0
   2d956:	2326      	movs	r3, #38	; 0x26
   2d958:	18fb      	adds	r3, r7, r3
   2d95a:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2d95c:	e017      	b.n	2d98e <create_name+0x12e>
		w = lfn[di-1];
   2d95e:	697b      	ldr	r3, [r7, #20]
   2d960:	4aa0      	ldr	r2, [pc, #640]	; (2dbe4 <create_name+0x384>)
   2d962:	4694      	mov	ip, r2
   2d964:	4463      	add	r3, ip
   2d966:	005b      	lsls	r3, r3, #1
   2d968:	68fa      	ldr	r2, [r7, #12]
   2d96a:	18d2      	adds	r2, r2, r3
   2d96c:	2324      	movs	r3, #36	; 0x24
   2d96e:	18fb      	adds	r3, r7, r3
   2d970:	8812      	ldrh	r2, [r2, #0]
   2d972:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2d974:	2324      	movs	r3, #36	; 0x24
   2d976:	18fb      	adds	r3, r7, r3
   2d978:	881b      	ldrh	r3, [r3, #0]
   2d97a:	2b20      	cmp	r3, #32
   2d97c:	d004      	beq.n	2d988 <create_name+0x128>
   2d97e:	2324      	movs	r3, #36	; 0x24
   2d980:	18fb      	adds	r3, r7, r3
   2d982:	881b      	ldrh	r3, [r3, #0]
   2d984:	2b2e      	cmp	r3, #46	; 0x2e
   2d986:	d106      	bne.n	2d996 <create_name+0x136>
		di--;
   2d988:	697b      	ldr	r3, [r7, #20]
   2d98a:	3b01      	subs	r3, #1
   2d98c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2d98e:	697b      	ldr	r3, [r7, #20]
   2d990:	2b00      	cmp	r3, #0
   2d992:	d1e4      	bne.n	2d95e <create_name+0xfe>
   2d994:	e000      	b.n	2d998 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2d996:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2d998:	697b      	ldr	r3, [r7, #20]
   2d99a:	2b00      	cmp	r3, #0
   2d99c:	d101      	bne.n	2d9a2 <create_name+0x142>
   2d99e:	2306      	movs	r3, #6
   2d9a0:	e17e      	b.n	2dca0 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2d9a2:	697b      	ldr	r3, [r7, #20]
   2d9a4:	005b      	lsls	r3, r3, #1
   2d9a6:	68fa      	ldr	r2, [r7, #12]
   2d9a8:	18d3      	adds	r3, r2, r3
   2d9aa:	2200      	movs	r2, #0
   2d9ac:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2d9ae:	687b      	ldr	r3, [r7, #4]
   2d9b0:	699b      	ldr	r3, [r3, #24]
   2d9b2:	220b      	movs	r2, #11
   2d9b4:	2120      	movs	r1, #32
   2d9b6:	0018      	movs	r0, r3
   2d9b8:	4b8b      	ldr	r3, [pc, #556]	; (2dbe8 <create_name+0x388>)
   2d9ba:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2d9bc:	2300      	movs	r3, #0
   2d9be:	61bb      	str	r3, [r7, #24]
   2d9c0:	e002      	b.n	2d9c8 <create_name+0x168>
   2d9c2:	69bb      	ldr	r3, [r7, #24]
   2d9c4:	3301      	adds	r3, #1
   2d9c6:	61bb      	str	r3, [r7, #24]
   2d9c8:	69bb      	ldr	r3, [r7, #24]
   2d9ca:	005b      	lsls	r3, r3, #1
   2d9cc:	68fa      	ldr	r2, [r7, #12]
   2d9ce:	18d3      	adds	r3, r2, r3
   2d9d0:	881b      	ldrh	r3, [r3, #0]
   2d9d2:	2b20      	cmp	r3, #32
   2d9d4:	d0f5      	beq.n	2d9c2 <create_name+0x162>
   2d9d6:	69bb      	ldr	r3, [r7, #24]
   2d9d8:	005b      	lsls	r3, r3, #1
   2d9da:	68fa      	ldr	r2, [r7, #12]
   2d9dc:	18d3      	adds	r3, r2, r3
   2d9de:	881b      	ldrh	r3, [r3, #0]
   2d9e0:	2b2e      	cmp	r3, #46	; 0x2e
   2d9e2:	d0ee      	beq.n	2d9c2 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2d9e4:	69bb      	ldr	r3, [r7, #24]
   2d9e6:	2b00      	cmp	r3, #0
   2d9e8:	d00b      	beq.n	2da02 <create_name+0x1a2>
   2d9ea:	2326      	movs	r3, #38	; 0x26
   2d9ec:	18fb      	adds	r3, r7, r3
   2d9ee:	2226      	movs	r2, #38	; 0x26
   2d9f0:	18ba      	adds	r2, r7, r2
   2d9f2:	7812      	ldrb	r2, [r2, #0]
   2d9f4:	2103      	movs	r1, #3
   2d9f6:	430a      	orrs	r2, r1
   2d9f8:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2d9fa:	e002      	b.n	2da02 <create_name+0x1a2>
   2d9fc:	697b      	ldr	r3, [r7, #20]
   2d9fe:	3b01      	subs	r3, #1
   2da00:	617b      	str	r3, [r7, #20]
   2da02:	697b      	ldr	r3, [r7, #20]
   2da04:	2b00      	cmp	r3, #0
   2da06:	d009      	beq.n	2da1c <create_name+0x1bc>
   2da08:	697b      	ldr	r3, [r7, #20]
   2da0a:	4a76      	ldr	r2, [pc, #472]	; (2dbe4 <create_name+0x384>)
   2da0c:	4694      	mov	ip, r2
   2da0e:	4463      	add	r3, ip
   2da10:	005b      	lsls	r3, r3, #1
   2da12:	68fa      	ldr	r2, [r7, #12]
   2da14:	18d3      	adds	r3, r2, r3
   2da16:	881b      	ldrh	r3, [r3, #0]
   2da18:	2b2e      	cmp	r3, #46	; 0x2e
   2da1a:	d1ef      	bne.n	2d9fc <create_name+0x19c>

	b = i = 0; ni = 8;
   2da1c:	2300      	movs	r3, #0
   2da1e:	623b      	str	r3, [r7, #32]
   2da20:	2327      	movs	r3, #39	; 0x27
   2da22:	18fb      	adds	r3, r7, r3
   2da24:	2200      	movs	r2, #0
   2da26:	701a      	strb	r2, [r3, #0]
   2da28:	2308      	movs	r3, #8
   2da2a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2da2c:	69bb      	ldr	r3, [r7, #24]
   2da2e:	1c5a      	adds	r2, r3, #1
   2da30:	61ba      	str	r2, [r7, #24]
   2da32:	005b      	lsls	r3, r3, #1
   2da34:	68fa      	ldr	r2, [r7, #12]
   2da36:	18d2      	adds	r2, r2, r3
   2da38:	2324      	movs	r3, #36	; 0x24
   2da3a:	18fb      	adds	r3, r7, r3
   2da3c:	8812      	ldrh	r2, [r2, #0]
   2da3e:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2da40:	2324      	movs	r3, #36	; 0x24
   2da42:	18fb      	adds	r3, r7, r3
   2da44:	881b      	ldrh	r3, [r3, #0]
   2da46:	2b00      	cmp	r3, #0
   2da48:	d100      	bne.n	2da4c <create_name+0x1ec>
   2da4a:	e0c3      	b.n	2dbd4 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2da4c:	2324      	movs	r3, #36	; 0x24
   2da4e:	18fb      	adds	r3, r7, r3
   2da50:	881b      	ldrh	r3, [r3, #0]
   2da52:	2b20      	cmp	r3, #32
   2da54:	d008      	beq.n	2da68 <create_name+0x208>
   2da56:	2324      	movs	r3, #36	; 0x24
   2da58:	18fb      	adds	r3, r7, r3
   2da5a:	881b      	ldrh	r3, [r3, #0]
   2da5c:	2b2e      	cmp	r3, #46	; 0x2e
   2da5e:	d10c      	bne.n	2da7a <create_name+0x21a>
   2da60:	69ba      	ldr	r2, [r7, #24]
   2da62:	697b      	ldr	r3, [r7, #20]
   2da64:	429a      	cmp	r2, r3
   2da66:	d008      	beq.n	2da7a <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2da68:	2326      	movs	r3, #38	; 0x26
   2da6a:	18fb      	adds	r3, r7, r3
   2da6c:	2226      	movs	r2, #38	; 0x26
   2da6e:	18ba      	adds	r2, r7, r2
   2da70:	7812      	ldrb	r2, [r2, #0]
   2da72:	2103      	movs	r1, #3
   2da74:	430a      	orrs	r2, r1
   2da76:	701a      	strb	r2, [r3, #0]
   2da78:	e0ab      	b.n	2dbd2 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2da7a:	6a3a      	ldr	r2, [r7, #32]
   2da7c:	69fb      	ldr	r3, [r7, #28]
   2da7e:	429a      	cmp	r2, r3
   2da80:	d203      	bcs.n	2da8a <create_name+0x22a>
   2da82:	69ba      	ldr	r2, [r7, #24]
   2da84:	697b      	ldr	r3, [r7, #20]
   2da86:	429a      	cmp	r2, r3
   2da88:	d12a      	bne.n	2dae0 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2da8a:	69fb      	ldr	r3, [r7, #28]
   2da8c:	2b0b      	cmp	r3, #11
   2da8e:	d108      	bne.n	2daa2 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2da90:	2326      	movs	r3, #38	; 0x26
   2da92:	18fb      	adds	r3, r7, r3
   2da94:	2226      	movs	r2, #38	; 0x26
   2da96:	18ba      	adds	r2, r7, r2
   2da98:	7812      	ldrb	r2, [r2, #0]
   2da9a:	2103      	movs	r1, #3
   2da9c:	430a      	orrs	r2, r1
   2da9e:	701a      	strb	r2, [r3, #0]
   2daa0:	e0a9      	b.n	2dbf6 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2daa2:	69ba      	ldr	r2, [r7, #24]
   2daa4:	697b      	ldr	r3, [r7, #20]
   2daa6:	429a      	cmp	r2, r3
   2daa8:	d007      	beq.n	2daba <create_name+0x25a>
   2daaa:	2326      	movs	r3, #38	; 0x26
   2daac:	18fb      	adds	r3, r7, r3
   2daae:	2226      	movs	r2, #38	; 0x26
   2dab0:	18ba      	adds	r2, r7, r2
   2dab2:	7812      	ldrb	r2, [r2, #0]
   2dab4:	2103      	movs	r1, #3
   2dab6:	430a      	orrs	r2, r1
   2dab8:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2daba:	69ba      	ldr	r2, [r7, #24]
   2dabc:	697b      	ldr	r3, [r7, #20]
   2dabe:	429a      	cmp	r2, r3
   2dac0:	d900      	bls.n	2dac4 <create_name+0x264>
   2dac2:	e097      	b.n	2dbf4 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2dac4:	697b      	ldr	r3, [r7, #20]
   2dac6:	61bb      	str	r3, [r7, #24]
   2dac8:	2308      	movs	r3, #8
   2daca:	623b      	str	r3, [r7, #32]
   2dacc:	230b      	movs	r3, #11
   2dace:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2dad0:	2327      	movs	r3, #39	; 0x27
   2dad2:	18fb      	adds	r3, r7, r3
   2dad4:	2227      	movs	r2, #39	; 0x27
   2dad6:	18ba      	adds	r2, r7, r2
   2dad8:	7812      	ldrb	r2, [r2, #0]
   2dada:	0092      	lsls	r2, r2, #2
   2dadc:	701a      	strb	r2, [r3, #0]
   2dade:	e078      	b.n	2dbd2 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2dae0:	2324      	movs	r3, #36	; 0x24
   2dae2:	18fb      	adds	r3, r7, r3
   2dae4:	881b      	ldrh	r3, [r3, #0]
   2dae6:	2b7f      	cmp	r3, #127	; 0x7f
   2dae8:	d920      	bls.n	2db2c <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2daea:	2324      	movs	r3, #36	; 0x24
   2daec:	18fc      	adds	r4, r7, r3
   2daee:	2324      	movs	r3, #36	; 0x24
   2daf0:	18fb      	adds	r3, r7, r3
   2daf2:	881b      	ldrh	r3, [r3, #0]
   2daf4:	2100      	movs	r1, #0
   2daf6:	0018      	movs	r0, r3
   2daf8:	4b37      	ldr	r3, [pc, #220]	; (2dbd8 <create_name+0x378>)
   2dafa:	4798      	blx	r3
   2dafc:	0003      	movs	r3, r0
   2dafe:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2db00:	2324      	movs	r3, #36	; 0x24
   2db02:	18fb      	adds	r3, r7, r3
   2db04:	881b      	ldrh	r3, [r3, #0]
   2db06:	2b00      	cmp	r3, #0
   2db08:	d008      	beq.n	2db1c <create_name+0x2bc>
   2db0a:	2324      	movs	r3, #36	; 0x24
   2db0c:	18fb      	adds	r3, r7, r3
   2db0e:	881b      	ldrh	r3, [r3, #0]
   2db10:	3b80      	subs	r3, #128	; 0x80
   2db12:	4a36      	ldr	r2, [pc, #216]	; (2dbec <create_name+0x38c>)
   2db14:	5cd2      	ldrb	r2, [r2, r3]
   2db16:	2324      	movs	r3, #36	; 0x24
   2db18:	18fb      	adds	r3, r7, r3
   2db1a:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2db1c:	2326      	movs	r3, #38	; 0x26
   2db1e:	18fb      	adds	r3, r7, r3
   2db20:	2226      	movs	r2, #38	; 0x26
   2db22:	18ba      	adds	r2, r7, r2
   2db24:	7812      	ldrb	r2, [r2, #0]
   2db26:	2102      	movs	r1, #2
   2db28:	430a      	orrs	r2, r1
   2db2a:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2db2c:	2324      	movs	r3, #36	; 0x24
   2db2e:	18fb      	adds	r3, r7, r3
   2db30:	881b      	ldrh	r3, [r3, #0]
   2db32:	2b00      	cmp	r3, #0
   2db34:	d009      	beq.n	2db4a <create_name+0x2ea>
   2db36:	2324      	movs	r3, #36	; 0x24
   2db38:	18fb      	adds	r3, r7, r3
   2db3a:	881a      	ldrh	r2, [r3, #0]
   2db3c:	4b2c      	ldr	r3, [pc, #176]	; (2dbf0 <create_name+0x390>)
   2db3e:	0011      	movs	r1, r2
   2db40:	0018      	movs	r0, r3
   2db42:	4b27      	ldr	r3, [pc, #156]	; (2dbe0 <create_name+0x380>)
   2db44:	4798      	blx	r3
   2db46:	1e03      	subs	r3, r0, #0
   2db48:	d00c      	beq.n	2db64 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2db4a:	2324      	movs	r3, #36	; 0x24
   2db4c:	18fb      	adds	r3, r7, r3
   2db4e:	225f      	movs	r2, #95	; 0x5f
   2db50:	801a      	strh	r2, [r3, #0]
   2db52:	2326      	movs	r3, #38	; 0x26
   2db54:	18fb      	adds	r3, r7, r3
   2db56:	2226      	movs	r2, #38	; 0x26
   2db58:	18ba      	adds	r2, r7, r2
   2db5a:	7812      	ldrb	r2, [r2, #0]
   2db5c:	2103      	movs	r1, #3
   2db5e:	430a      	orrs	r2, r1
   2db60:	701a      	strb	r2, [r3, #0]
   2db62:	e02b      	b.n	2dbbc <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2db64:	2324      	movs	r3, #36	; 0x24
   2db66:	18fb      	adds	r3, r7, r3
   2db68:	881b      	ldrh	r3, [r3, #0]
   2db6a:	2b40      	cmp	r3, #64	; 0x40
   2db6c:	d90d      	bls.n	2db8a <create_name+0x32a>
   2db6e:	2324      	movs	r3, #36	; 0x24
   2db70:	18fb      	adds	r3, r7, r3
   2db72:	881b      	ldrh	r3, [r3, #0]
   2db74:	2b5a      	cmp	r3, #90	; 0x5a
   2db76:	d808      	bhi.n	2db8a <create_name+0x32a>
					b |= 2;
   2db78:	2327      	movs	r3, #39	; 0x27
   2db7a:	18fb      	adds	r3, r7, r3
   2db7c:	2227      	movs	r2, #39	; 0x27
   2db7e:	18ba      	adds	r2, r7, r2
   2db80:	7812      	ldrb	r2, [r2, #0]
   2db82:	2102      	movs	r1, #2
   2db84:	430a      	orrs	r2, r1
   2db86:	701a      	strb	r2, [r3, #0]
   2db88:	e018      	b.n	2dbbc <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2db8a:	2324      	movs	r3, #36	; 0x24
   2db8c:	18fb      	adds	r3, r7, r3
   2db8e:	881b      	ldrh	r3, [r3, #0]
   2db90:	2b60      	cmp	r3, #96	; 0x60
   2db92:	d913      	bls.n	2dbbc <create_name+0x35c>
   2db94:	2324      	movs	r3, #36	; 0x24
   2db96:	18fb      	adds	r3, r7, r3
   2db98:	881b      	ldrh	r3, [r3, #0]
   2db9a:	2b7a      	cmp	r3, #122	; 0x7a
   2db9c:	d80e      	bhi.n	2dbbc <create_name+0x35c>
						b |= 1; w -= 0x20;
   2db9e:	2327      	movs	r3, #39	; 0x27
   2dba0:	18fb      	adds	r3, r7, r3
   2dba2:	2227      	movs	r2, #39	; 0x27
   2dba4:	18ba      	adds	r2, r7, r2
   2dba6:	7812      	ldrb	r2, [r2, #0]
   2dba8:	2101      	movs	r1, #1
   2dbaa:	430a      	orrs	r2, r1
   2dbac:	701a      	strb	r2, [r3, #0]
   2dbae:	2324      	movs	r3, #36	; 0x24
   2dbb0:	18fb      	adds	r3, r7, r3
   2dbb2:	2224      	movs	r2, #36	; 0x24
   2dbb4:	18ba      	adds	r2, r7, r2
   2dbb6:	8812      	ldrh	r2, [r2, #0]
   2dbb8:	3a20      	subs	r2, #32
   2dbba:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2dbbc:	687b      	ldr	r3, [r7, #4]
   2dbbe:	699a      	ldr	r2, [r3, #24]
   2dbc0:	6a3b      	ldr	r3, [r7, #32]
   2dbc2:	1c59      	adds	r1, r3, #1
   2dbc4:	6239      	str	r1, [r7, #32]
   2dbc6:	18d3      	adds	r3, r2, r3
   2dbc8:	2224      	movs	r2, #36	; 0x24
   2dbca:	18ba      	adds	r2, r7, r2
   2dbcc:	8812      	ldrh	r2, [r2, #0]
   2dbce:	b2d2      	uxtb	r2, r2
   2dbd0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2dbd2:	e72b      	b.n	2da2c <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2dbd4:	46c0      	nop			; (mov r8, r8)
   2dbd6:	e00e      	b.n	2dbf6 <create_name+0x396>
   2dbd8:	0002ef99 	.word	0x0002ef99
   2dbdc:	0003a570 	.word	0x0003a570
   2dbe0:	0002c403 	.word	0x0002c403
   2dbe4:	7fffffff 	.word	0x7fffffff
   2dbe8:	0002c389 	.word	0x0002c389
   2dbec:	0003a5b8 	.word	0x0003a5b8
   2dbf0:	0003a57c 	.word	0x0003a57c
			if (si > di) break;			/* No extension */
   2dbf4:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2dbf6:	687b      	ldr	r3, [r7, #4]
   2dbf8:	699b      	ldr	r3, [r3, #24]
   2dbfa:	781b      	ldrb	r3, [r3, #0]
   2dbfc:	2be5      	cmp	r3, #229	; 0xe5
   2dbfe:	d103      	bne.n	2dc08 <create_name+0x3a8>
   2dc00:	687b      	ldr	r3, [r7, #4]
   2dc02:	699b      	ldr	r3, [r3, #24]
   2dc04:	2205      	movs	r2, #5
   2dc06:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2dc08:	69fb      	ldr	r3, [r7, #28]
   2dc0a:	2b08      	cmp	r3, #8
   2dc0c:	d106      	bne.n	2dc1c <create_name+0x3bc>
   2dc0e:	2327      	movs	r3, #39	; 0x27
   2dc10:	18fb      	adds	r3, r7, r3
   2dc12:	2227      	movs	r2, #39	; 0x27
   2dc14:	18ba      	adds	r2, r7, r2
   2dc16:	7812      	ldrb	r2, [r2, #0]
   2dc18:	0092      	lsls	r2, r2, #2
   2dc1a:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2dc1c:	2327      	movs	r3, #39	; 0x27
   2dc1e:	18fb      	adds	r3, r7, r3
   2dc20:	781b      	ldrb	r3, [r3, #0]
   2dc22:	220c      	movs	r2, #12
   2dc24:	4013      	ands	r3, r2
   2dc26:	2b0c      	cmp	r3, #12
   2dc28:	d006      	beq.n	2dc38 <create_name+0x3d8>
   2dc2a:	2327      	movs	r3, #39	; 0x27
   2dc2c:	18fb      	adds	r3, r7, r3
   2dc2e:	781b      	ldrb	r3, [r3, #0]
   2dc30:	2203      	movs	r2, #3
   2dc32:	4013      	ands	r3, r2
   2dc34:	2b03      	cmp	r3, #3
   2dc36:	d107      	bne.n	2dc48 <create_name+0x3e8>
		cf |= NS_LFN;
   2dc38:	2326      	movs	r3, #38	; 0x26
   2dc3a:	18fb      	adds	r3, r7, r3
   2dc3c:	2226      	movs	r2, #38	; 0x26
   2dc3e:	18ba      	adds	r2, r7, r2
   2dc40:	7812      	ldrb	r2, [r2, #0]
   2dc42:	2102      	movs	r1, #2
   2dc44:	430a      	orrs	r2, r1
   2dc46:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2dc48:	2326      	movs	r3, #38	; 0x26
   2dc4a:	18fb      	adds	r3, r7, r3
   2dc4c:	781b      	ldrb	r3, [r3, #0]
   2dc4e:	2202      	movs	r2, #2
   2dc50:	4013      	ands	r3, r2
   2dc52:	d11d      	bne.n	2dc90 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2dc54:	2327      	movs	r3, #39	; 0x27
   2dc56:	18fb      	adds	r3, r7, r3
   2dc58:	781b      	ldrb	r3, [r3, #0]
   2dc5a:	2203      	movs	r2, #3
   2dc5c:	4013      	ands	r3, r2
   2dc5e:	2b01      	cmp	r3, #1
   2dc60:	d107      	bne.n	2dc72 <create_name+0x412>
   2dc62:	2326      	movs	r3, #38	; 0x26
   2dc64:	18fb      	adds	r3, r7, r3
   2dc66:	2226      	movs	r2, #38	; 0x26
   2dc68:	18ba      	adds	r2, r7, r2
   2dc6a:	7812      	ldrb	r2, [r2, #0]
   2dc6c:	2110      	movs	r1, #16
   2dc6e:	430a      	orrs	r2, r1
   2dc70:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2dc72:	2327      	movs	r3, #39	; 0x27
   2dc74:	18fb      	adds	r3, r7, r3
   2dc76:	781b      	ldrb	r3, [r3, #0]
   2dc78:	220c      	movs	r2, #12
   2dc7a:	4013      	ands	r3, r2
   2dc7c:	2b04      	cmp	r3, #4
   2dc7e:	d107      	bne.n	2dc90 <create_name+0x430>
   2dc80:	2326      	movs	r3, #38	; 0x26
   2dc82:	18fb      	adds	r3, r7, r3
   2dc84:	2226      	movs	r2, #38	; 0x26
   2dc86:	18ba      	adds	r2, r7, r2
   2dc88:	7812      	ldrb	r2, [r2, #0]
   2dc8a:	2108      	movs	r1, #8
   2dc8c:	430a      	orrs	r2, r1
   2dc8e:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2dc90:	687b      	ldr	r3, [r7, #4]
   2dc92:	699b      	ldr	r3, [r3, #24]
   2dc94:	330b      	adds	r3, #11
   2dc96:	2226      	movs	r2, #38	; 0x26
   2dc98:	18ba      	adds	r2, r7, r2
   2dc9a:	7812      	ldrb	r2, [r2, #0]
   2dc9c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2dc9e:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2dca0:	0018      	movs	r0, r3
   2dca2:	46bd      	mov	sp, r7
   2dca4:	b00b      	add	sp, #44	; 0x2c
   2dca6:	bd90      	pop	{r4, r7, pc}

0002dca8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2dca8:	b590      	push	{r4, r7, lr}
   2dcaa:	b085      	sub	sp, #20
   2dcac:	af00      	add	r7, sp, #0
   2dcae:	6078      	str	r0, [r7, #4]
   2dcb0:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2dcb2:	683b      	ldr	r3, [r7, #0]
   2dcb4:	781b      	ldrb	r3, [r3, #0]
   2dcb6:	2b2f      	cmp	r3, #47	; 0x2f
   2dcb8:	d003      	beq.n	2dcc2 <follow_path+0x1a>
   2dcba:	683b      	ldr	r3, [r7, #0]
   2dcbc:	781b      	ldrb	r3, [r3, #0]
   2dcbe:	2b5c      	cmp	r3, #92	; 0x5c
   2dcc0:	d102      	bne.n	2dcc8 <follow_path+0x20>
		path++;
   2dcc2:	683b      	ldr	r3, [r7, #0]
   2dcc4:	3301      	adds	r3, #1
   2dcc6:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2dcc8:	687b      	ldr	r3, [r7, #4]
   2dcca:	2200      	movs	r2, #0
   2dccc:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2dcce:	683b      	ldr	r3, [r7, #0]
   2dcd0:	781b      	ldrb	r3, [r3, #0]
   2dcd2:	2b1f      	cmp	r3, #31
   2dcd4:	d80c      	bhi.n	2dcf0 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2dcd6:	230f      	movs	r3, #15
   2dcd8:	18fc      	adds	r4, r7, r3
   2dcda:	687b      	ldr	r3, [r7, #4]
   2dcdc:	2100      	movs	r1, #0
   2dcde:	0018      	movs	r0, r3
   2dce0:	4b3c      	ldr	r3, [pc, #240]	; (2ddd4 <follow_path+0x12c>)
   2dce2:	4798      	blx	r3
   2dce4:	0003      	movs	r3, r0
   2dce6:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2dce8:	687b      	ldr	r3, [r7, #4]
   2dcea:	2200      	movs	r2, #0
   2dcec:	615a      	str	r2, [r3, #20]
   2dcee:	e06a      	b.n	2ddc6 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2dcf0:	230f      	movs	r3, #15
   2dcf2:	18fc      	adds	r4, r7, r3
   2dcf4:	003a      	movs	r2, r7
   2dcf6:	687b      	ldr	r3, [r7, #4]
   2dcf8:	0011      	movs	r1, r2
   2dcfa:	0018      	movs	r0, r3
   2dcfc:	4b36      	ldr	r3, [pc, #216]	; (2ddd8 <follow_path+0x130>)
   2dcfe:	4798      	blx	r3
   2dd00:	0003      	movs	r3, r0
   2dd02:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2dd04:	230f      	movs	r3, #15
   2dd06:	18fb      	adds	r3, r7, r3
   2dd08:	781b      	ldrb	r3, [r3, #0]
   2dd0a:	2b00      	cmp	r3, #0
   2dd0c:	d154      	bne.n	2ddb8 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2dd0e:	230f      	movs	r3, #15
   2dd10:	18fc      	adds	r4, r7, r3
   2dd12:	687b      	ldr	r3, [r7, #4]
   2dd14:	0018      	movs	r0, r3
   2dd16:	4b31      	ldr	r3, [pc, #196]	; (2dddc <follow_path+0x134>)
   2dd18:	4798      	blx	r3
   2dd1a:	0003      	movs	r3, r0
   2dd1c:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2dd1e:	687b      	ldr	r3, [r7, #4]
   2dd20:	699a      	ldr	r2, [r3, #24]
   2dd22:	230e      	movs	r3, #14
   2dd24:	18fb      	adds	r3, r7, r3
   2dd26:	7ad2      	ldrb	r2, [r2, #11]
   2dd28:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2dd2a:	230f      	movs	r3, #15
   2dd2c:	18fb      	adds	r3, r7, r3
   2dd2e:	781b      	ldrb	r3, [r3, #0]
   2dd30:	2b00      	cmp	r3, #0
   2dd32:	d00f      	beq.n	2dd54 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2dd34:	230f      	movs	r3, #15
   2dd36:	18fb      	adds	r3, r7, r3
   2dd38:	781b      	ldrb	r3, [r3, #0]
   2dd3a:	2b04      	cmp	r3, #4
   2dd3c:	d13e      	bne.n	2ddbc <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2dd3e:	230e      	movs	r3, #14
   2dd40:	18fb      	adds	r3, r7, r3
   2dd42:	781b      	ldrb	r3, [r3, #0]
   2dd44:	2204      	movs	r2, #4
   2dd46:	4013      	ands	r3, r2
   2dd48:	d13a      	bne.n	2ddc0 <follow_path+0x118>
   2dd4a:	230f      	movs	r3, #15
   2dd4c:	18fb      	adds	r3, r7, r3
   2dd4e:	2205      	movs	r2, #5
   2dd50:	701a      	strb	r2, [r3, #0]
				}
				break;
   2dd52:	e035      	b.n	2ddc0 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2dd54:	230e      	movs	r3, #14
   2dd56:	18fb      	adds	r3, r7, r3
   2dd58:	781b      	ldrb	r3, [r3, #0]
   2dd5a:	2204      	movs	r2, #4
   2dd5c:	4013      	ands	r3, r2
   2dd5e:	d131      	bne.n	2ddc4 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2dd60:	687b      	ldr	r3, [r7, #4]
   2dd62:	695b      	ldr	r3, [r3, #20]
   2dd64:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2dd66:	68bb      	ldr	r3, [r7, #8]
   2dd68:	330b      	adds	r3, #11
   2dd6a:	781b      	ldrb	r3, [r3, #0]
   2dd6c:	001a      	movs	r2, r3
   2dd6e:	2310      	movs	r3, #16
   2dd70:	4013      	ands	r3, r2
   2dd72:	d104      	bne.n	2dd7e <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2dd74:	230f      	movs	r3, #15
   2dd76:	18fb      	adds	r3, r7, r3
   2dd78:	2205      	movs	r2, #5
   2dd7a:	701a      	strb	r2, [r3, #0]
   2dd7c:	e023      	b.n	2ddc6 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2dd7e:	68bb      	ldr	r3, [r7, #8]
   2dd80:	3315      	adds	r3, #21
   2dd82:	781b      	ldrb	r3, [r3, #0]
   2dd84:	021b      	lsls	r3, r3, #8
   2dd86:	b21a      	sxth	r2, r3
   2dd88:	68bb      	ldr	r3, [r7, #8]
   2dd8a:	3314      	adds	r3, #20
   2dd8c:	781b      	ldrb	r3, [r3, #0]
   2dd8e:	b21b      	sxth	r3, r3
   2dd90:	4313      	orrs	r3, r2
   2dd92:	b21b      	sxth	r3, r3
   2dd94:	b29b      	uxth	r3, r3
   2dd96:	041b      	lsls	r3, r3, #16
   2dd98:	68ba      	ldr	r2, [r7, #8]
   2dd9a:	321b      	adds	r2, #27
   2dd9c:	7812      	ldrb	r2, [r2, #0]
   2dd9e:	0212      	lsls	r2, r2, #8
   2dda0:	b211      	sxth	r1, r2
   2dda2:	68ba      	ldr	r2, [r7, #8]
   2dda4:	321a      	adds	r2, #26
   2dda6:	7812      	ldrb	r2, [r2, #0]
   2dda8:	b212      	sxth	r2, r2
   2ddaa:	430a      	orrs	r2, r1
   2ddac:	b212      	sxth	r2, r2
   2ddae:	b292      	uxth	r2, r2
   2ddb0:	431a      	orrs	r2, r3
   2ddb2:	687b      	ldr	r3, [r7, #4]
   2ddb4:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2ddb6:	e79b      	b.n	2dcf0 <follow_path+0x48>
			if (res != FR_OK) break;
   2ddb8:	46c0      	nop			; (mov r8, r8)
   2ddba:	e004      	b.n	2ddc6 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2ddbc:	46c0      	nop			; (mov r8, r8)
   2ddbe:	e002      	b.n	2ddc6 <follow_path+0x11e>
				break;
   2ddc0:	46c0      	nop			; (mov r8, r8)
   2ddc2:	e000      	b.n	2ddc6 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2ddc4:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2ddc6:	230f      	movs	r3, #15
   2ddc8:	18fb      	adds	r3, r7, r3
   2ddca:	781b      	ldrb	r3, [r3, #0]
}
   2ddcc:	0018      	movs	r0, r3
   2ddce:	46bd      	mov	sp, r7
   2ddd0:	b005      	add	sp, #20
   2ddd2:	bd90      	pop	{r4, r7, pc}
   2ddd4:	0002cc79 	.word	0x0002cc79
   2ddd8:	0002d861 	.word	0x0002d861
   2dddc:	0002d2fd 	.word	0x0002d2fd

0002dde0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2dde0:	b590      	push	{r4, r7, lr}
   2dde2:	b083      	sub	sp, #12
   2dde4:	af00      	add	r7, sp, #0
   2dde6:	6078      	str	r0, [r7, #4]
   2dde8:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2ddea:	687b      	ldr	r3, [r7, #4]
   2ddec:	7858      	ldrb	r0, [r3, #1]
   2ddee:	687b      	ldr	r3, [r7, #4]
   2ddf0:	3330      	adds	r3, #48	; 0x30
   2ddf2:	0019      	movs	r1, r3
   2ddf4:	683a      	ldr	r2, [r7, #0]
   2ddf6:	2301      	movs	r3, #1
   2ddf8:	4c2a      	ldr	r4, [pc, #168]	; (2dea4 <check_fs+0xc4>)
   2ddfa:	47a0      	blx	r4
   2ddfc:	1e03      	subs	r3, r0, #0
   2ddfe:	d001      	beq.n	2de04 <check_fs+0x24>
		return 3;
   2de00:	2303      	movs	r3, #3
   2de02:	e04b      	b.n	2de9c <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2de04:	687b      	ldr	r3, [r7, #4]
   2de06:	4a28      	ldr	r2, [pc, #160]	; (2dea8 <check_fs+0xc8>)
   2de08:	4694      	mov	ip, r2
   2de0a:	4463      	add	r3, ip
   2de0c:	3301      	adds	r3, #1
   2de0e:	781b      	ldrb	r3, [r3, #0]
   2de10:	021b      	lsls	r3, r3, #8
   2de12:	b21a      	sxth	r2, r3
   2de14:	687b      	ldr	r3, [r7, #4]
   2de16:	4924      	ldr	r1, [pc, #144]	; (2dea8 <check_fs+0xc8>)
   2de18:	5c5b      	ldrb	r3, [r3, r1]
   2de1a:	b21b      	sxth	r3, r3
   2de1c:	4313      	orrs	r3, r2
   2de1e:	b21b      	sxth	r3, r3
   2de20:	4a22      	ldr	r2, [pc, #136]	; (2deac <check_fs+0xcc>)
   2de22:	4293      	cmp	r3, r2
   2de24:	d001      	beq.n	2de2a <check_fs+0x4a>
		return 2;
   2de26:	2302      	movs	r3, #2
   2de28:	e038      	b.n	2de9c <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2de2a:	687b      	ldr	r3, [r7, #4]
   2de2c:	3366      	adds	r3, #102	; 0x66
   2de2e:	3303      	adds	r3, #3
   2de30:	781b      	ldrb	r3, [r3, #0]
   2de32:	061a      	lsls	r2, r3, #24
   2de34:	687b      	ldr	r3, [r7, #4]
   2de36:	3366      	adds	r3, #102	; 0x66
   2de38:	3302      	adds	r3, #2
   2de3a:	781b      	ldrb	r3, [r3, #0]
   2de3c:	041b      	lsls	r3, r3, #16
   2de3e:	4313      	orrs	r3, r2
   2de40:	687a      	ldr	r2, [r7, #4]
   2de42:	3266      	adds	r2, #102	; 0x66
   2de44:	3201      	adds	r2, #1
   2de46:	7812      	ldrb	r2, [r2, #0]
   2de48:	0212      	lsls	r2, r2, #8
   2de4a:	4313      	orrs	r3, r2
   2de4c:	687a      	ldr	r2, [r7, #4]
   2de4e:	2166      	movs	r1, #102	; 0x66
   2de50:	5c52      	ldrb	r2, [r2, r1]
   2de52:	4313      	orrs	r3, r2
   2de54:	021b      	lsls	r3, r3, #8
   2de56:	0a1b      	lsrs	r3, r3, #8
   2de58:	4a15      	ldr	r2, [pc, #84]	; (2deb0 <check_fs+0xd0>)
   2de5a:	4293      	cmp	r3, r2
   2de5c:	d101      	bne.n	2de62 <check_fs+0x82>
		return 0;
   2de5e:	2300      	movs	r3, #0
   2de60:	e01c      	b.n	2de9c <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2de62:	687b      	ldr	r3, [r7, #4]
   2de64:	3382      	adds	r3, #130	; 0x82
   2de66:	3303      	adds	r3, #3
   2de68:	781b      	ldrb	r3, [r3, #0]
   2de6a:	061a      	lsls	r2, r3, #24
   2de6c:	687b      	ldr	r3, [r7, #4]
   2de6e:	3382      	adds	r3, #130	; 0x82
   2de70:	3302      	adds	r3, #2
   2de72:	781b      	ldrb	r3, [r3, #0]
   2de74:	041b      	lsls	r3, r3, #16
   2de76:	4313      	orrs	r3, r2
   2de78:	687a      	ldr	r2, [r7, #4]
   2de7a:	3282      	adds	r2, #130	; 0x82
   2de7c:	3201      	adds	r2, #1
   2de7e:	7812      	ldrb	r2, [r2, #0]
   2de80:	0212      	lsls	r2, r2, #8
   2de82:	4313      	orrs	r3, r2
   2de84:	687a      	ldr	r2, [r7, #4]
   2de86:	2182      	movs	r1, #130	; 0x82
   2de88:	5c52      	ldrb	r2, [r2, r1]
   2de8a:	4313      	orrs	r3, r2
   2de8c:	021b      	lsls	r3, r3, #8
   2de8e:	0a1b      	lsrs	r3, r3, #8
   2de90:	4a07      	ldr	r2, [pc, #28]	; (2deb0 <check_fs+0xd0>)
   2de92:	4293      	cmp	r3, r2
   2de94:	d101      	bne.n	2de9a <check_fs+0xba>
		return 0;
   2de96:	2300      	movs	r3, #0
   2de98:	e000      	b.n	2de9c <check_fs+0xbc>

	return 1;
   2de9a:	2301      	movs	r3, #1
}
   2de9c:	0018      	movs	r0, r3
   2de9e:	46bd      	mov	sp, r7
   2dea0:	b003      	add	sp, #12
   2dea2:	bd90      	pop	{r4, r7, pc}
   2dea4:	0002c049 	.word	0x0002c049
   2dea8:	0000022e 	.word	0x0000022e
   2deac:	ffffaa55 	.word	0xffffaa55
   2deb0:	00544146 	.word	0x00544146

0002deb4 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2deb4:	b590      	push	{r4, r7, lr}
   2deb6:	b093      	sub	sp, #76	; 0x4c
   2deb8:	af00      	add	r7, sp, #0
   2deba:	60f8      	str	r0, [r7, #12]
   2debc:	60b9      	str	r1, [r7, #8]
   2debe:	1dfb      	adds	r3, r7, #7
   2dec0:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2dec2:	68fb      	ldr	r3, [r7, #12]
   2dec4:	681b      	ldr	r3, [r3, #0]
   2dec6:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2deca:	781b      	ldrb	r3, [r3, #0]
   2decc:	3b30      	subs	r3, #48	; 0x30
   2dece:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2ded0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ded2:	2b09      	cmp	r3, #9
   2ded4:	d80b      	bhi.n	2deee <chk_mounted+0x3a>
   2ded6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ded8:	3301      	adds	r3, #1
   2deda:	781b      	ldrb	r3, [r3, #0]
   2dedc:	2b3a      	cmp	r3, #58	; 0x3a
   2dede:	d106      	bne.n	2deee <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2dee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2dee2:	3302      	adds	r3, #2
   2dee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   2dee6:	68fb      	ldr	r3, [r7, #12]
   2dee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2deea:	601a      	str	r2, [r3, #0]
   2deec:	e001      	b.n	2def2 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2deee:	2300      	movs	r3, #0
   2def0:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2def2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2def4:	2b07      	cmp	r3, #7
   2def6:	d901      	bls.n	2defc <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2def8:	230b      	movs	r3, #11
   2defa:	e2af      	b.n	2e45c <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2defc:	4bc5      	ldr	r3, [pc, #788]	; (2e214 <chk_mounted+0x360>)
   2defe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2df00:	0092      	lsls	r2, r2, #2
   2df02:	58d3      	ldr	r3, [r2, r3]
   2df04:	62bb      	str	r3, [r7, #40]	; 0x28
   2df06:	68bb      	ldr	r3, [r7, #8]
   2df08:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2df0a:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2df0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df0e:	2b00      	cmp	r3, #0
   2df10:	d101      	bne.n	2df16 <chk_mounted+0x62>
   2df12:	230c      	movs	r3, #12
   2df14:	e2a2      	b.n	2e45c <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2df16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df18:	781b      	ldrb	r3, [r3, #0]
   2df1a:	2b00      	cmp	r3, #0
   2df1c:	d01c      	beq.n	2df58 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2df1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df20:	785b      	ldrb	r3, [r3, #1]
   2df22:	2227      	movs	r2, #39	; 0x27
   2df24:	18bc      	adds	r4, r7, r2
   2df26:	0018      	movs	r0, r3
   2df28:	4bbb      	ldr	r3, [pc, #748]	; (2e218 <chk_mounted+0x364>)
   2df2a:	4798      	blx	r3
   2df2c:	0003      	movs	r3, r0
   2df2e:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2df30:	2327      	movs	r3, #39	; 0x27
   2df32:	18fb      	adds	r3, r7, r3
   2df34:	781b      	ldrb	r3, [r3, #0]
   2df36:	2201      	movs	r2, #1
   2df38:	4013      	ands	r3, r2
   2df3a:	d10d      	bne.n	2df58 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2df3c:	1dfb      	adds	r3, r7, #7
   2df3e:	781b      	ldrb	r3, [r3, #0]
   2df40:	2b00      	cmp	r3, #0
   2df42:	d007      	beq.n	2df54 <chk_mounted+0xa0>
   2df44:	2327      	movs	r3, #39	; 0x27
   2df46:	18fb      	adds	r3, r7, r3
   2df48:	781b      	ldrb	r3, [r3, #0]
   2df4a:	2204      	movs	r2, #4
   2df4c:	4013      	ands	r3, r2
   2df4e:	d001      	beq.n	2df54 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2df50:	230a      	movs	r3, #10
   2df52:	e283      	b.n	2e45c <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2df54:	2300      	movs	r3, #0
   2df56:	e281      	b.n	2e45c <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2df58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df5a:	2200      	movs	r2, #0
   2df5c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2df5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2df60:	b2da      	uxtb	r2, r3
   2df62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df64:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2df66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df68:	785b      	ldrb	r3, [r3, #1]
   2df6a:	2227      	movs	r2, #39	; 0x27
   2df6c:	18bc      	adds	r4, r7, r2
   2df6e:	0018      	movs	r0, r3
   2df70:	4baa      	ldr	r3, [pc, #680]	; (2e21c <chk_mounted+0x368>)
   2df72:	4798      	blx	r3
   2df74:	0003      	movs	r3, r0
   2df76:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2df78:	2327      	movs	r3, #39	; 0x27
   2df7a:	18fb      	adds	r3, r7, r3
   2df7c:	781b      	ldrb	r3, [r3, #0]
   2df7e:	2201      	movs	r2, #1
   2df80:	4013      	ands	r3, r2
   2df82:	d001      	beq.n	2df88 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2df84:	2303      	movs	r3, #3
   2df86:	e269      	b.n	2e45c <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2df88:	1dfb      	adds	r3, r7, #7
   2df8a:	781b      	ldrb	r3, [r3, #0]
   2df8c:	2b00      	cmp	r3, #0
   2df8e:	d007      	beq.n	2dfa0 <chk_mounted+0xec>
   2df90:	2327      	movs	r3, #39	; 0x27
   2df92:	18fb      	adds	r3, r7, r3
   2df94:	781b      	ldrb	r3, [r3, #0]
   2df96:	2204      	movs	r2, #4
   2df98:	4013      	ands	r3, r2
   2df9a:	d001      	beq.n	2dfa0 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2df9c:	230a      	movs	r3, #10
   2df9e:	e25d      	b.n	2e45c <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2dfa0:	2300      	movs	r3, #0
   2dfa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   2dfa4:	2347      	movs	r3, #71	; 0x47
   2dfa6:	18fc      	adds	r4, r7, r3
   2dfa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2dfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dfac:	0011      	movs	r1, r2
   2dfae:	0018      	movs	r0, r3
   2dfb0:	4b9b      	ldr	r3, [pc, #620]	; (2e220 <chk_mounted+0x36c>)
   2dfb2:	4798      	blx	r3
   2dfb4:	0003      	movs	r3, r0
   2dfb6:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2dfb8:	2347      	movs	r3, #71	; 0x47
   2dfba:	18fb      	adds	r3, r7, r3
   2dfbc:	781b      	ldrb	r3, [r3, #0]
   2dfbe:	2b01      	cmp	r3, #1
   2dfc0:	d13b      	bne.n	2e03a <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2dfc2:	2346      	movs	r3, #70	; 0x46
   2dfc4:	18fb      	adds	r3, r7, r3
   2dfc6:	2200      	movs	r2, #0
   2dfc8:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2dfca:	2346      	movs	r3, #70	; 0x46
   2dfcc:	18fb      	adds	r3, r7, r3
   2dfce:	781b      	ldrb	r3, [r3, #0]
   2dfd0:	2b00      	cmp	r3, #0
   2dfd2:	d006      	beq.n	2dfe2 <chk_mounted+0x12e>
   2dfd4:	2346      	movs	r3, #70	; 0x46
   2dfd6:	18fb      	adds	r3, r7, r3
   2dfd8:	781a      	ldrb	r2, [r3, #0]
   2dfda:	2346      	movs	r3, #70	; 0x46
   2dfdc:	18fb      	adds	r3, r7, r3
   2dfde:	3a01      	subs	r2, #1
   2dfe0:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2dfe2:	2346      	movs	r3, #70	; 0x46
   2dfe4:	18fb      	adds	r3, r7, r3
   2dfe6:	781b      	ldrb	r3, [r3, #0]
   2dfe8:	011b      	lsls	r3, r3, #4
   2dfea:	33bf      	adds	r3, #191	; 0xbf
   2dfec:	33ff      	adds	r3, #255	; 0xff
   2dfee:	3330      	adds	r3, #48	; 0x30
   2dff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dff2:	18d3      	adds	r3, r2, r3
   2dff4:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2dff6:	6a3b      	ldr	r3, [r7, #32]
   2dff8:	3304      	adds	r3, #4
   2dffa:	781b      	ldrb	r3, [r3, #0]
   2dffc:	2b00      	cmp	r3, #0
   2dffe:	d01c      	beq.n	2e03a <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2e000:	6a3b      	ldr	r3, [r7, #32]
   2e002:	330b      	adds	r3, #11
   2e004:	781b      	ldrb	r3, [r3, #0]
   2e006:	061a      	lsls	r2, r3, #24
   2e008:	6a3b      	ldr	r3, [r7, #32]
   2e00a:	330a      	adds	r3, #10
   2e00c:	781b      	ldrb	r3, [r3, #0]
   2e00e:	041b      	lsls	r3, r3, #16
   2e010:	4313      	orrs	r3, r2
   2e012:	6a3a      	ldr	r2, [r7, #32]
   2e014:	3209      	adds	r2, #9
   2e016:	7812      	ldrb	r2, [r2, #0]
   2e018:	0212      	lsls	r2, r2, #8
   2e01a:	4313      	orrs	r3, r2
   2e01c:	6a3a      	ldr	r2, [r7, #32]
   2e01e:	3208      	adds	r2, #8
   2e020:	7812      	ldrb	r2, [r2, #0]
   2e022:	4313      	orrs	r3, r2
   2e024:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2e026:	2347      	movs	r3, #71	; 0x47
   2e028:	18fc      	adds	r4, r7, r3
   2e02a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e02e:	0011      	movs	r1, r2
   2e030:	0018      	movs	r0, r3
   2e032:	4b7b      	ldr	r3, [pc, #492]	; (2e220 <chk_mounted+0x36c>)
   2e034:	4798      	blx	r3
   2e036:	0003      	movs	r3, r0
   2e038:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2e03a:	2347      	movs	r3, #71	; 0x47
   2e03c:	18fb      	adds	r3, r7, r3
   2e03e:	781b      	ldrb	r3, [r3, #0]
   2e040:	2b03      	cmp	r3, #3
   2e042:	d101      	bne.n	2e048 <chk_mounted+0x194>
   2e044:	2301      	movs	r3, #1
   2e046:	e209      	b.n	2e45c <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2e048:	2347      	movs	r3, #71	; 0x47
   2e04a:	18fb      	adds	r3, r7, r3
   2e04c:	781b      	ldrb	r3, [r3, #0]
   2e04e:	2b00      	cmp	r3, #0
   2e050:	d001      	beq.n	2e056 <chk_mounted+0x1a2>
   2e052:	230d      	movs	r3, #13
   2e054:	e202      	b.n	2e45c <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2e056:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e058:	223c      	movs	r2, #60	; 0x3c
   2e05a:	5c9b      	ldrb	r3, [r3, r2]
   2e05c:	021b      	lsls	r3, r3, #8
   2e05e:	b21a      	sxth	r2, r3
   2e060:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e062:	213b      	movs	r1, #59	; 0x3b
   2e064:	5c5b      	ldrb	r3, [r3, r1]
   2e066:	b21b      	sxth	r3, r3
   2e068:	4313      	orrs	r3, r2
   2e06a:	b21a      	sxth	r2, r3
   2e06c:	2380      	movs	r3, #128	; 0x80
   2e06e:	009b      	lsls	r3, r3, #2
   2e070:	429a      	cmp	r2, r3
   2e072:	d001      	beq.n	2e078 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2e074:	230d      	movs	r3, #13
   2e076:	e1f1      	b.n	2e45c <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2e078:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e07a:	2247      	movs	r2, #71	; 0x47
   2e07c:	5c9b      	ldrb	r3, [r3, r2]
   2e07e:	021b      	lsls	r3, r3, #8
   2e080:	b21a      	sxth	r2, r3
   2e082:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e084:	2146      	movs	r1, #70	; 0x46
   2e086:	5c5b      	ldrb	r3, [r3, r1]
   2e088:	b21b      	sxth	r3, r3
   2e08a:	4313      	orrs	r3, r2
   2e08c:	b21b      	sxth	r3, r3
   2e08e:	b29b      	uxth	r3, r3
   2e090:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2e092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e094:	2b00      	cmp	r3, #0
   2e096:	d112      	bne.n	2e0be <chk_mounted+0x20a>
   2e098:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e09a:	2257      	movs	r2, #87	; 0x57
   2e09c:	5c9b      	ldrb	r3, [r3, r2]
   2e09e:	061a      	lsls	r2, r3, #24
   2e0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0a2:	2156      	movs	r1, #86	; 0x56
   2e0a4:	5c5b      	ldrb	r3, [r3, r1]
   2e0a6:	041b      	lsls	r3, r3, #16
   2e0a8:	4313      	orrs	r3, r2
   2e0aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e0ac:	2155      	movs	r1, #85	; 0x55
   2e0ae:	5c52      	ldrb	r2, [r2, r1]
   2e0b0:	0212      	lsls	r2, r2, #8
   2e0b2:	4313      	orrs	r3, r2
   2e0b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e0b6:	2154      	movs	r1, #84	; 0x54
   2e0b8:	5c52      	ldrb	r2, [r2, r1]
   2e0ba:	4313      	orrs	r3, r2
   2e0bc:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2e0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2e0c2:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2e0c4:	231f      	movs	r3, #31
   2e0c6:	18fb      	adds	r3, r7, r3
   2e0c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e0ca:	2140      	movs	r1, #64	; 0x40
   2e0cc:	5c52      	ldrb	r2, [r2, r1]
   2e0ce:	701a      	strb	r2, [r3, #0]
   2e0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0d2:	221f      	movs	r2, #31
   2e0d4:	18ba      	adds	r2, r7, r2
   2e0d6:	7812      	ldrb	r2, [r2, #0]
   2e0d8:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2e0da:	231f      	movs	r3, #31
   2e0dc:	18fb      	adds	r3, r7, r3
   2e0de:	781b      	ldrb	r3, [r3, #0]
   2e0e0:	2b01      	cmp	r3, #1
   2e0e2:	d006      	beq.n	2e0f2 <chk_mounted+0x23e>
   2e0e4:	231f      	movs	r3, #31
   2e0e6:	18fb      	adds	r3, r7, r3
   2e0e8:	781b      	ldrb	r3, [r3, #0]
   2e0ea:	2b02      	cmp	r3, #2
   2e0ec:	d001      	beq.n	2e0f2 <chk_mounted+0x23e>
   2e0ee:	230d      	movs	r3, #13
   2e0f0:	e1b4      	b.n	2e45c <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2e0f2:	231f      	movs	r3, #31
   2e0f4:	18fb      	adds	r3, r7, r3
   2e0f6:	781a      	ldrb	r2, [r3, #0]
   2e0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e0fa:	4353      	muls	r3, r2
   2e0fc:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2e0fe:	231f      	movs	r3, #31
   2e100:	18fb      	adds	r3, r7, r3
   2e102:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e104:	213d      	movs	r1, #61	; 0x3d
   2e106:	5c52      	ldrb	r2, [r2, r1]
   2e108:	701a      	strb	r2, [r3, #0]
   2e10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e10c:	221f      	movs	r2, #31
   2e10e:	18ba      	adds	r2, r7, r2
   2e110:	7812      	ldrb	r2, [r2, #0]
   2e112:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2e114:	231f      	movs	r3, #31
   2e116:	18fb      	adds	r3, r7, r3
   2e118:	781b      	ldrb	r3, [r3, #0]
   2e11a:	2b00      	cmp	r3, #0
   2e11c:	d008      	beq.n	2e130 <chk_mounted+0x27c>
   2e11e:	231f      	movs	r3, #31
   2e120:	18fb      	adds	r3, r7, r3
   2e122:	781b      	ldrb	r3, [r3, #0]
   2e124:	221f      	movs	r2, #31
   2e126:	18ba      	adds	r2, r7, r2
   2e128:	7812      	ldrb	r2, [r2, #0]
   2e12a:	3a01      	subs	r2, #1
   2e12c:	4013      	ands	r3, r2
   2e12e:	d001      	beq.n	2e134 <chk_mounted+0x280>
   2e130:	230d      	movs	r3, #13
   2e132:	e193      	b.n	2e45c <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2e134:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e136:	2242      	movs	r2, #66	; 0x42
   2e138:	5c9b      	ldrb	r3, [r3, r2]
   2e13a:	021b      	lsls	r3, r3, #8
   2e13c:	b21a      	sxth	r2, r3
   2e13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e140:	2141      	movs	r1, #65	; 0x41
   2e142:	5c5b      	ldrb	r3, [r3, r1]
   2e144:	b21b      	sxth	r3, r3
   2e146:	4313      	orrs	r3, r2
   2e148:	b21b      	sxth	r3, r3
   2e14a:	b29a      	uxth	r2, r3
   2e14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e14e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2e150:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e152:	891b      	ldrh	r3, [r3, #8]
   2e154:	220f      	movs	r2, #15
   2e156:	4013      	ands	r3, r2
   2e158:	b29b      	uxth	r3, r3
   2e15a:	2b00      	cmp	r3, #0
   2e15c:	d001      	beq.n	2e162 <chk_mounted+0x2ae>
   2e15e:	230d      	movs	r3, #13
   2e160:	e17c      	b.n	2e45c <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2e162:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e164:	2244      	movs	r2, #68	; 0x44
   2e166:	5c9b      	ldrb	r3, [r3, r2]
   2e168:	021b      	lsls	r3, r3, #8
   2e16a:	b21a      	sxth	r2, r3
   2e16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e16e:	2143      	movs	r1, #67	; 0x43
   2e170:	5c5b      	ldrb	r3, [r3, r1]
   2e172:	b21b      	sxth	r3, r3
   2e174:	4313      	orrs	r3, r2
   2e176:	b21b      	sxth	r3, r3
   2e178:	b29b      	uxth	r3, r3
   2e17a:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2e17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e17e:	2b00      	cmp	r3, #0
   2e180:	d112      	bne.n	2e1a8 <chk_mounted+0x2f4>
   2e182:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e184:	2253      	movs	r2, #83	; 0x53
   2e186:	5c9b      	ldrb	r3, [r3, r2]
   2e188:	061a      	lsls	r2, r3, #24
   2e18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e18c:	2152      	movs	r1, #82	; 0x52
   2e18e:	5c5b      	ldrb	r3, [r3, r1]
   2e190:	041b      	lsls	r3, r3, #16
   2e192:	4313      	orrs	r3, r2
   2e194:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e196:	2151      	movs	r1, #81	; 0x51
   2e198:	5c52      	ldrb	r2, [r2, r1]
   2e19a:	0212      	lsls	r2, r2, #8
   2e19c:	4313      	orrs	r3, r2
   2e19e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e1a0:	2150      	movs	r1, #80	; 0x50
   2e1a2:	5c52      	ldrb	r2, [r2, r1]
   2e1a4:	4313      	orrs	r3, r2
   2e1a6:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2e1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1aa:	223f      	movs	r2, #63	; 0x3f
   2e1ac:	5c9b      	ldrb	r3, [r3, r2]
   2e1ae:	021b      	lsls	r3, r3, #8
   2e1b0:	b21a      	sxth	r2, r3
   2e1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1b4:	213e      	movs	r1, #62	; 0x3e
   2e1b6:	5c5b      	ldrb	r3, [r3, r1]
   2e1b8:	b21b      	sxth	r3, r3
   2e1ba:	4313      	orrs	r3, r2
   2e1bc:	b21a      	sxth	r2, r3
   2e1be:	231c      	movs	r3, #28
   2e1c0:	18fb      	adds	r3, r7, r3
   2e1c2:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2e1c4:	231c      	movs	r3, #28
   2e1c6:	18fb      	adds	r3, r7, r3
   2e1c8:	881b      	ldrh	r3, [r3, #0]
   2e1ca:	2b00      	cmp	r3, #0
   2e1cc:	d101      	bne.n	2e1d2 <chk_mounted+0x31e>
   2e1ce:	230d      	movs	r3, #13
   2e1d0:	e144      	b.n	2e45c <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2e1d2:	231c      	movs	r3, #28
   2e1d4:	18fb      	adds	r3, r7, r3
   2e1d6:	881a      	ldrh	r2, [r3, #0]
   2e1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e1da:	18d3      	adds	r3, r2, r3
   2e1dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e1de:	8912      	ldrh	r2, [r2, #8]
   2e1e0:	0912      	lsrs	r2, r2, #4
   2e1e2:	b292      	uxth	r2, r2
   2e1e4:	189b      	adds	r3, r3, r2
   2e1e6:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2e1e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e1ea:	69bb      	ldr	r3, [r7, #24]
   2e1ec:	429a      	cmp	r2, r3
   2e1ee:	d201      	bcs.n	2e1f4 <chk_mounted+0x340>
   2e1f0:	230d      	movs	r3, #13
   2e1f2:	e133      	b.n	2e45c <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2e1f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e1f6:	69bb      	ldr	r3, [r7, #24]
   2e1f8:	1ad2      	subs	r2, r2, r3
   2e1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1fc:	789b      	ldrb	r3, [r3, #2]
   2e1fe:	0019      	movs	r1, r3
   2e200:	4b08      	ldr	r3, [pc, #32]	; (2e224 <chk_mounted+0x370>)
   2e202:	0010      	movs	r0, r2
   2e204:	4798      	blx	r3
   2e206:	0003      	movs	r3, r0
   2e208:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2e20a:	697b      	ldr	r3, [r7, #20]
   2e20c:	2b00      	cmp	r3, #0
   2e20e:	d10b      	bne.n	2e228 <chk_mounted+0x374>
   2e210:	230d      	movs	r3, #13
   2e212:	e123      	b.n	2e45c <chk_mounted+0x5a8>
   2e214:	200042f8 	.word	0x200042f8
   2e218:	0002c011 	.word	0x0002c011
   2e21c:	0002bf8d 	.word	0x0002bf8d
   2e220:	0002dde1 	.word	0x0002dde1
   2e224:	00033635 	.word	0x00033635
	fmt = FS_FAT12;
   2e228:	2347      	movs	r3, #71	; 0x47
   2e22a:	18fb      	adds	r3, r7, r3
   2e22c:	2201      	movs	r2, #1
   2e22e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2e230:	697b      	ldr	r3, [r7, #20]
   2e232:	4a8c      	ldr	r2, [pc, #560]	; (2e464 <chk_mounted+0x5b0>)
   2e234:	4293      	cmp	r3, r2
   2e236:	d903      	bls.n	2e240 <chk_mounted+0x38c>
   2e238:	2347      	movs	r3, #71	; 0x47
   2e23a:	18fb      	adds	r3, r7, r3
   2e23c:	2202      	movs	r2, #2
   2e23e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2e240:	697b      	ldr	r3, [r7, #20]
   2e242:	4a89      	ldr	r2, [pc, #548]	; (2e468 <chk_mounted+0x5b4>)
   2e244:	4293      	cmp	r3, r2
   2e246:	d903      	bls.n	2e250 <chk_mounted+0x39c>
   2e248:	2347      	movs	r3, #71	; 0x47
   2e24a:	18fb      	adds	r3, r7, r3
   2e24c:	2203      	movs	r2, #3
   2e24e:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2e250:	697b      	ldr	r3, [r7, #20]
   2e252:	1c9a      	adds	r2, r3, #2
   2e254:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e256:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2e258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e25a:	69bb      	ldr	r3, [r7, #24]
   2e25c:	18d2      	adds	r2, r2, r3
   2e25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e260:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2e262:	231c      	movs	r3, #28
   2e264:	18fb      	adds	r3, r7, r3
   2e266:	881a      	ldrh	r2, [r3, #0]
   2e268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e26a:	18d2      	adds	r2, r2, r3
   2e26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e26e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2e270:	2347      	movs	r3, #71	; 0x47
   2e272:	18fb      	adds	r3, r7, r3
   2e274:	781b      	ldrb	r3, [r3, #0]
   2e276:	2b03      	cmp	r3, #3
   2e278:	d11e      	bne.n	2e2b8 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2e27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e27c:	891b      	ldrh	r3, [r3, #8]
   2e27e:	2b00      	cmp	r3, #0
   2e280:	d001      	beq.n	2e286 <chk_mounted+0x3d2>
   2e282:	230d      	movs	r3, #13
   2e284:	e0ea      	b.n	2e45c <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2e286:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e288:	225f      	movs	r2, #95	; 0x5f
   2e28a:	5c9b      	ldrb	r3, [r3, r2]
   2e28c:	061a      	lsls	r2, r3, #24
   2e28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e290:	215e      	movs	r1, #94	; 0x5e
   2e292:	5c5b      	ldrb	r3, [r3, r1]
   2e294:	041b      	lsls	r3, r3, #16
   2e296:	4313      	orrs	r3, r2
   2e298:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e29a:	215d      	movs	r1, #93	; 0x5d
   2e29c:	5c52      	ldrb	r2, [r2, r1]
   2e29e:	0212      	lsls	r2, r2, #8
   2e2a0:	4313      	orrs	r3, r2
   2e2a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e2a4:	215c      	movs	r1, #92	; 0x5c
   2e2a6:	5c52      	ldrb	r2, [r2, r1]
   2e2a8:	431a      	orrs	r2, r3
   2e2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2ac:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2e2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2b0:	699b      	ldr	r3, [r3, #24]
   2e2b2:	009b      	lsls	r3, r3, #2
   2e2b4:	633b      	str	r3, [r7, #48]	; 0x30
   2e2b6:	e020      	b.n	2e2fa <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2e2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2ba:	891b      	ldrh	r3, [r3, #8]
   2e2bc:	2b00      	cmp	r3, #0
   2e2be:	d101      	bne.n	2e2c4 <chk_mounted+0x410>
   2e2c0:	230d      	movs	r3, #13
   2e2c2:	e0cb      	b.n	2e45c <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2e2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2c6:	6a1a      	ldr	r2, [r3, #32]
   2e2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e2ca:	18d2      	adds	r2, r2, r3
   2e2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2ce:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2e2d0:	2347      	movs	r3, #71	; 0x47
   2e2d2:	18fb      	adds	r3, r7, r3
   2e2d4:	781b      	ldrb	r3, [r3, #0]
   2e2d6:	2b02      	cmp	r3, #2
   2e2d8:	d103      	bne.n	2e2e2 <chk_mounted+0x42e>
   2e2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2dc:	699b      	ldr	r3, [r3, #24]
   2e2de:	005b      	lsls	r3, r3, #1
   2e2e0:	e00a      	b.n	2e2f8 <chk_mounted+0x444>
   2e2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2e4:	699a      	ldr	r2, [r3, #24]
   2e2e6:	0013      	movs	r3, r2
   2e2e8:	005b      	lsls	r3, r3, #1
   2e2ea:	189b      	adds	r3, r3, r2
   2e2ec:	085a      	lsrs	r2, r3, #1
   2e2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2f0:	699b      	ldr	r3, [r3, #24]
   2e2f2:	2101      	movs	r1, #1
   2e2f4:	400b      	ands	r3, r1
   2e2f6:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2e2f8:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2e2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2fc:	69da      	ldr	r2, [r3, #28]
   2e2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e300:	495a      	ldr	r1, [pc, #360]	; (2e46c <chk_mounted+0x5b8>)
   2e302:	468c      	mov	ip, r1
   2e304:	4463      	add	r3, ip
   2e306:	0a5b      	lsrs	r3, r3, #9
   2e308:	429a      	cmp	r2, r3
   2e30a:	d201      	bcs.n	2e310 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2e30c:	230d      	movs	r3, #13
   2e30e:	e0a5      	b.n	2e45c <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2e310:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e312:	2201      	movs	r2, #1
   2e314:	4252      	negs	r2, r2
   2e316:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2e318:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e31a:	2200      	movs	r2, #0
   2e31c:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2e31e:	2347      	movs	r3, #71	; 0x47
   2e320:	18fb      	adds	r3, r7, r3
   2e322:	781b      	ldrb	r3, [r3, #0]
   2e324:	2b03      	cmp	r3, #3
   2e326:	d000      	beq.n	2e32a <chk_mounted+0x476>
   2e328:	e082      	b.n	2e430 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2e32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e32c:	2200      	movs	r2, #0
   2e32e:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2e330:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e332:	2261      	movs	r2, #97	; 0x61
   2e334:	5c9b      	ldrb	r3, [r3, r2]
   2e336:	021b      	lsls	r3, r3, #8
   2e338:	b21a      	sxth	r2, r3
   2e33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e33c:	2160      	movs	r1, #96	; 0x60
   2e33e:	5c5b      	ldrb	r3, [r3, r1]
   2e340:	b21b      	sxth	r3, r3
   2e342:	4313      	orrs	r3, r2
   2e344:	b21b      	sxth	r3, r3
   2e346:	b29b      	uxth	r3, r3
   2e348:	001a      	movs	r2, r3
   2e34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e34c:	18d2      	adds	r2, r2, r3
   2e34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e350:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e352:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e354:	7858      	ldrb	r0, [r3, #1]
   2e356:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e358:	3330      	adds	r3, #48	; 0x30
   2e35a:	0019      	movs	r1, r3
   2e35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e35e:	695a      	ldr	r2, [r3, #20]
   2e360:	2301      	movs	r3, #1
   2e362:	4c43      	ldr	r4, [pc, #268]	; (2e470 <chk_mounted+0x5bc>)
   2e364:	47a0      	blx	r4
   2e366:	1e03      	subs	r3, r0, #0
   2e368:	d162      	bne.n	2e430 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e36c:	4a41      	ldr	r2, [pc, #260]	; (2e474 <chk_mounted+0x5c0>)
   2e36e:	5c9b      	ldrb	r3, [r3, r2]
   2e370:	021b      	lsls	r3, r3, #8
   2e372:	b21a      	sxth	r2, r3
   2e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e376:	4940      	ldr	r1, [pc, #256]	; (2e478 <chk_mounted+0x5c4>)
   2e378:	5c5b      	ldrb	r3, [r3, r1]
   2e37a:	b21b      	sxth	r3, r3
   2e37c:	4313      	orrs	r3, r2
   2e37e:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e380:	4a3e      	ldr	r2, [pc, #248]	; (2e47c <chk_mounted+0x5c8>)
   2e382:	4293      	cmp	r3, r2
   2e384:	d154      	bne.n	2e430 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e386:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e388:	2233      	movs	r2, #51	; 0x33
   2e38a:	5c9b      	ldrb	r3, [r3, r2]
   2e38c:	061a      	lsls	r2, r3, #24
   2e38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e390:	2132      	movs	r1, #50	; 0x32
   2e392:	5c5b      	ldrb	r3, [r3, r1]
   2e394:	041b      	lsls	r3, r3, #16
   2e396:	4313      	orrs	r3, r2
   2e398:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e39a:	2131      	movs	r1, #49	; 0x31
   2e39c:	5c52      	ldrb	r2, [r2, r1]
   2e39e:	0212      	lsls	r2, r2, #8
   2e3a0:	4313      	orrs	r3, r2
   2e3a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e3a4:	2130      	movs	r1, #48	; 0x30
   2e3a6:	5c52      	ldrb	r2, [r2, r1]
   2e3a8:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e3aa:	4a35      	ldr	r2, [pc, #212]	; (2e480 <chk_mounted+0x5cc>)
   2e3ac:	4293      	cmp	r3, r2
   2e3ae:	d13f      	bne.n	2e430 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2e3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3b2:	4a34      	ldr	r2, [pc, #208]	; (2e484 <chk_mounted+0x5d0>)
   2e3b4:	5c9b      	ldrb	r3, [r3, r2]
   2e3b6:	061a      	lsls	r2, r3, #24
   2e3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3ba:	4933      	ldr	r1, [pc, #204]	; (2e488 <chk_mounted+0x5d4>)
   2e3bc:	5c5b      	ldrb	r3, [r3, r1]
   2e3be:	041b      	lsls	r3, r3, #16
   2e3c0:	4313      	orrs	r3, r2
   2e3c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e3c4:	4931      	ldr	r1, [pc, #196]	; (2e48c <chk_mounted+0x5d8>)
   2e3c6:	5c52      	ldrb	r2, [r2, r1]
   2e3c8:	0212      	lsls	r2, r2, #8
   2e3ca:	4313      	orrs	r3, r2
   2e3cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e3ce:	2285      	movs	r2, #133	; 0x85
   2e3d0:	0092      	lsls	r2, r2, #2
   2e3d2:	5c8a      	ldrb	r2, [r1, r2]
   2e3d4:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e3d6:	4a2e      	ldr	r2, [pc, #184]	; (2e490 <chk_mounted+0x5dc>)
   2e3d8:	4293      	cmp	r3, r2
   2e3da:	d129      	bne.n	2e430 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2e3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3de:	4a2d      	ldr	r2, [pc, #180]	; (2e494 <chk_mounted+0x5e0>)
   2e3e0:	5c9b      	ldrb	r3, [r3, r2]
   2e3e2:	061a      	lsls	r2, r3, #24
   2e3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3e6:	492c      	ldr	r1, [pc, #176]	; (2e498 <chk_mounted+0x5e4>)
   2e3e8:	5c5b      	ldrb	r3, [r3, r1]
   2e3ea:	041b      	lsls	r3, r3, #16
   2e3ec:	4313      	orrs	r3, r2
   2e3ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e3f0:	492a      	ldr	r1, [pc, #168]	; (2e49c <chk_mounted+0x5e8>)
   2e3f2:	5c52      	ldrb	r2, [r2, r1]
   2e3f4:	0212      	lsls	r2, r2, #8
   2e3f6:	4313      	orrs	r3, r2
   2e3f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e3fa:	2287      	movs	r2, #135	; 0x87
   2e3fc:	0092      	lsls	r2, r2, #2
   2e3fe:	5c8a      	ldrb	r2, [r1, r2]
   2e400:	431a      	orrs	r2, r3
   2e402:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e404:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2e406:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e408:	4a25      	ldr	r2, [pc, #148]	; (2e4a0 <chk_mounted+0x5ec>)
   2e40a:	5c9b      	ldrb	r3, [r3, r2]
   2e40c:	061a      	lsls	r2, r3, #24
   2e40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e410:	4924      	ldr	r1, [pc, #144]	; (2e4a4 <chk_mounted+0x5f0>)
   2e412:	5c5b      	ldrb	r3, [r3, r1]
   2e414:	041b      	lsls	r3, r3, #16
   2e416:	4313      	orrs	r3, r2
   2e418:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e41a:	4923      	ldr	r1, [pc, #140]	; (2e4a8 <chk_mounted+0x5f4>)
   2e41c:	5c52      	ldrb	r2, [r2, r1]
   2e41e:	0212      	lsls	r2, r2, #8
   2e420:	4313      	orrs	r3, r2
   2e422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e424:	2286      	movs	r2, #134	; 0x86
   2e426:	0092      	lsls	r2, r2, #2
   2e428:	5c8a      	ldrb	r2, [r1, r2]
   2e42a:	431a      	orrs	r2, r3
   2e42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e42e:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2e430:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e432:	2247      	movs	r2, #71	; 0x47
   2e434:	18ba      	adds	r2, r7, r2
   2e436:	7812      	ldrb	r2, [r2, #0]
   2e438:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2e43a:	4b1c      	ldr	r3, [pc, #112]	; (2e4ac <chk_mounted+0x5f8>)
   2e43c:	881b      	ldrh	r3, [r3, #0]
   2e43e:	3301      	adds	r3, #1
   2e440:	b29a      	uxth	r2, r3
   2e442:	4b1a      	ldr	r3, [pc, #104]	; (2e4ac <chk_mounted+0x5f8>)
   2e444:	801a      	strh	r2, [r3, #0]
   2e446:	4b19      	ldr	r3, [pc, #100]	; (2e4ac <chk_mounted+0x5f8>)
   2e448:	881a      	ldrh	r2, [r3, #0]
   2e44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e44c:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2e44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e450:	2200      	movs	r2, #0
   2e452:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2e454:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e456:	2200      	movs	r2, #0
   2e458:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2e45a:	2300      	movs	r3, #0
}
   2e45c:	0018      	movs	r0, r3
   2e45e:	46bd      	mov	sp, r7
   2e460:	b013      	add	sp, #76	; 0x4c
   2e462:	bd90      	pop	{r4, r7, pc}
   2e464:	00000ff5 	.word	0x00000ff5
   2e468:	0000fff5 	.word	0x0000fff5
   2e46c:	000001ff 	.word	0x000001ff
   2e470:	0002c049 	.word	0x0002c049
   2e474:	0000022f 	.word	0x0000022f
   2e478:	0000022e 	.word	0x0000022e
   2e47c:	ffffaa55 	.word	0xffffaa55
   2e480:	41615252 	.word	0x41615252
   2e484:	00000217 	.word	0x00000217
   2e488:	00000216 	.word	0x00000216
   2e48c:	00000215 	.word	0x00000215
   2e490:	61417272 	.word	0x61417272
   2e494:	0000021f 	.word	0x0000021f
   2e498:	0000021e 	.word	0x0000021e
   2e49c:	0000021d 	.word	0x0000021d
   2e4a0:	0000021b 	.word	0x0000021b
   2e4a4:	0000021a 	.word	0x0000021a
   2e4a8:	00000219 	.word	0x00000219
   2e4ac:	20004318 	.word	0x20004318

0002e4b0 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2e4b0:	b580      	push	{r7, lr}
   2e4b2:	b082      	sub	sp, #8
   2e4b4:	af00      	add	r7, sp, #0
   2e4b6:	6078      	str	r0, [r7, #4]
   2e4b8:	000a      	movs	r2, r1
   2e4ba:	1cbb      	adds	r3, r7, #2
   2e4bc:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2e4be:	687b      	ldr	r3, [r7, #4]
   2e4c0:	2b00      	cmp	r3, #0
   2e4c2:	d009      	beq.n	2e4d8 <validate+0x28>
   2e4c4:	687b      	ldr	r3, [r7, #4]
   2e4c6:	781b      	ldrb	r3, [r3, #0]
   2e4c8:	2b00      	cmp	r3, #0
   2e4ca:	d005      	beq.n	2e4d8 <validate+0x28>
   2e4cc:	687b      	ldr	r3, [r7, #4]
   2e4ce:	88db      	ldrh	r3, [r3, #6]
   2e4d0:	1cba      	adds	r2, r7, #2
   2e4d2:	8812      	ldrh	r2, [r2, #0]
   2e4d4:	429a      	cmp	r2, r3
   2e4d6:	d001      	beq.n	2e4dc <validate+0x2c>
		return FR_INVALID_OBJECT;
   2e4d8:	2309      	movs	r3, #9
   2e4da:	e00c      	b.n	2e4f6 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2e4dc:	687b      	ldr	r3, [r7, #4]
   2e4de:	785b      	ldrb	r3, [r3, #1]
   2e4e0:	0018      	movs	r0, r3
   2e4e2:	4b07      	ldr	r3, [pc, #28]	; (2e500 <validate+0x50>)
   2e4e4:	4798      	blx	r3
   2e4e6:	0003      	movs	r3, r0
   2e4e8:	001a      	movs	r2, r3
   2e4ea:	2301      	movs	r3, #1
   2e4ec:	4013      	ands	r3, r2
   2e4ee:	d001      	beq.n	2e4f4 <validate+0x44>
		return FR_NOT_READY;
   2e4f0:	2303      	movs	r3, #3
   2e4f2:	e000      	b.n	2e4f6 <validate+0x46>

	return FR_OK;
   2e4f4:	2300      	movs	r3, #0
}
   2e4f6:	0018      	movs	r0, r3
   2e4f8:	46bd      	mov	sp, r7
   2e4fa:	b002      	add	sp, #8
   2e4fc:	bd80      	pop	{r7, pc}
   2e4fe:	46c0      	nop			; (mov r8, r8)
   2e500:	0002c011 	.word	0x0002c011

0002e504 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2e504:	b580      	push	{r7, lr}
   2e506:	b084      	sub	sp, #16
   2e508:	af00      	add	r7, sp, #0
   2e50a:	0002      	movs	r2, r0
   2e50c:	6039      	str	r1, [r7, #0]
   2e50e:	1dfb      	adds	r3, r7, #7
   2e510:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2e512:	1dfb      	adds	r3, r7, #7
   2e514:	781b      	ldrb	r3, [r3, #0]
   2e516:	2b07      	cmp	r3, #7
   2e518:	d901      	bls.n	2e51e <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2e51a:	230b      	movs	r3, #11
   2e51c:	e018      	b.n	2e550 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2e51e:	1dfb      	adds	r3, r7, #7
   2e520:	781a      	ldrb	r2, [r3, #0]
   2e522:	4b0d      	ldr	r3, [pc, #52]	; (2e558 <f_mount+0x54>)
   2e524:	0092      	lsls	r2, r2, #2
   2e526:	58d3      	ldr	r3, [r2, r3]
   2e528:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2e52a:	68fb      	ldr	r3, [r7, #12]
   2e52c:	2b00      	cmp	r3, #0
   2e52e:	d002      	beq.n	2e536 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2e530:	68fb      	ldr	r3, [r7, #12]
   2e532:	2200      	movs	r2, #0
   2e534:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2e536:	683b      	ldr	r3, [r7, #0]
   2e538:	2b00      	cmp	r3, #0
   2e53a:	d002      	beq.n	2e542 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2e53c:	683b      	ldr	r3, [r7, #0]
   2e53e:	2200      	movs	r2, #0
   2e540:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2e542:	1dfb      	adds	r3, r7, #7
   2e544:	781a      	ldrb	r2, [r3, #0]
   2e546:	4b04      	ldr	r3, [pc, #16]	; (2e558 <f_mount+0x54>)
   2e548:	0092      	lsls	r2, r2, #2
   2e54a:	6839      	ldr	r1, [r7, #0]
   2e54c:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2e54e:	2300      	movs	r3, #0
}
   2e550:	0018      	movs	r0, r3
   2e552:	46bd      	mov	sp, r7
   2e554:	b004      	add	sp, #16
   2e556:	bd80      	pop	{r7, pc}
   2e558:	200042f8 	.word	0x200042f8

0002e55c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2e55c:	b590      	push	{r4, r7, lr}
   2e55e:	4ce5      	ldr	r4, [pc, #916]	; (2e8f4 <f_open+0x398>)
   2e560:	44a5      	add	sp, r4
   2e562:	af00      	add	r7, sp, #0
   2e564:	60f8      	str	r0, [r7, #12]
   2e566:	60b9      	str	r1, [r7, #8]
   2e568:	4be3      	ldr	r3, [pc, #908]	; (2e8f8 <f_open+0x39c>)
   2e56a:	2194      	movs	r1, #148	; 0x94
   2e56c:	0089      	lsls	r1, r1, #2
   2e56e:	468c      	mov	ip, r1
   2e570:	44bc      	add	ip, r7
   2e572:	4463      	add	r3, ip
   2e574:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2e576:	68fb      	ldr	r3, [r7, #12]
   2e578:	2200      	movs	r2, #0
   2e57a:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2e57c:	4bde      	ldr	r3, [pc, #888]	; (2e8f8 <f_open+0x39c>)
   2e57e:	2294      	movs	r2, #148	; 0x94
   2e580:	0092      	lsls	r2, r2, #2
   2e582:	4694      	mov	ip, r2
   2e584:	44bc      	add	ip, r7
   2e586:	4463      	add	r3, ip
   2e588:	4adb      	ldr	r2, [pc, #876]	; (2e8f8 <f_open+0x39c>)
   2e58a:	2194      	movs	r1, #148	; 0x94
   2e58c:	0089      	lsls	r1, r1, #2
   2e58e:	468c      	mov	ip, r1
   2e590:	44bc      	add	ip, r7
   2e592:	4462      	add	r2, ip
   2e594:	7812      	ldrb	r2, [r2, #0]
   2e596:	211f      	movs	r1, #31
   2e598:	400a      	ands	r2, r1
   2e59a:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2e59c:	4bd6      	ldr	r3, [pc, #856]	; (2e8f8 <f_open+0x39c>)
   2e59e:	2294      	movs	r2, #148	; 0x94
   2e5a0:	0092      	lsls	r2, r2, #2
   2e5a2:	4694      	mov	ip, r2
   2e5a4:	44bc      	add	ip, r7
   2e5a6:	4463      	add	r3, ip
   2e5a8:	781b      	ldrb	r3, [r3, #0]
   2e5aa:	2201      	movs	r2, #1
   2e5ac:	4393      	bics	r3, r2
   2e5ae:	b2da      	uxtb	r2, r3
   2e5b0:	4bd2      	ldr	r3, [pc, #840]	; (2e8fc <f_open+0x3a0>)
   2e5b2:	18fc      	adds	r4, r7, r3
   2e5b4:	2387      	movs	r3, #135	; 0x87
   2e5b6:	009b      	lsls	r3, r3, #2
   2e5b8:	18f9      	adds	r1, r7, r3
   2e5ba:	2308      	movs	r3, #8
   2e5bc:	18fb      	adds	r3, r7, r3
   2e5be:	0018      	movs	r0, r3
   2e5c0:	4bcf      	ldr	r3, [pc, #828]	; (2e900 <f_open+0x3a4>)
   2e5c2:	4798      	blx	r3
   2e5c4:	0003      	movs	r3, r0
   2e5c6:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2e5c8:	2387      	movs	r3, #135	; 0x87
   2e5ca:	009b      	lsls	r3, r3, #2
   2e5cc:	18fb      	adds	r3, r7, r3
   2e5ce:	2284      	movs	r2, #132	; 0x84
   2e5d0:	0092      	lsls	r2, r2, #2
   2e5d2:	18ba      	adds	r2, r7, r2
   2e5d4:	619a      	str	r2, [r3, #24]
   2e5d6:	2387      	movs	r3, #135	; 0x87
   2e5d8:	009b      	lsls	r3, r3, #2
   2e5da:	18fb      	adds	r3, r7, r3
   2e5dc:	2210      	movs	r2, #16
   2e5de:	18ba      	adds	r2, r7, r2
   2e5e0:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2e5e2:	4bc6      	ldr	r3, [pc, #792]	; (2e8fc <f_open+0x3a0>)
   2e5e4:	18fb      	adds	r3, r7, r3
   2e5e6:	781b      	ldrb	r3, [r3, #0]
   2e5e8:	2b00      	cmp	r3, #0
   2e5ea:	d10b      	bne.n	2e604 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2e5ec:	68ba      	ldr	r2, [r7, #8]
   2e5ee:	4bc3      	ldr	r3, [pc, #780]	; (2e8fc <f_open+0x3a0>)
   2e5f0:	18fc      	adds	r4, r7, r3
   2e5f2:	2387      	movs	r3, #135	; 0x87
   2e5f4:	009b      	lsls	r3, r3, #2
   2e5f6:	18fb      	adds	r3, r7, r3
   2e5f8:	0011      	movs	r1, r2
   2e5fa:	0018      	movs	r0, r3
   2e5fc:	4bc1      	ldr	r3, [pc, #772]	; (2e904 <f_open+0x3a8>)
   2e5fe:	4798      	blx	r3
   2e600:	0003      	movs	r3, r0
   2e602:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2e604:	2387      	movs	r3, #135	; 0x87
   2e606:	009b      	lsls	r3, r3, #2
   2e608:	18fb      	adds	r3, r7, r3
   2e60a:	695b      	ldr	r3, [r3, #20]
   2e60c:	2292      	movs	r2, #146	; 0x92
   2e60e:	0092      	lsls	r2, r2, #2
   2e610:	18ba      	adds	r2, r7, r2
   2e612:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2e614:	4bb9      	ldr	r3, [pc, #740]	; (2e8fc <f_open+0x3a0>)
   2e616:	18fb      	adds	r3, r7, r3
   2e618:	781b      	ldrb	r3, [r3, #0]
   2e61a:	2b00      	cmp	r3, #0
   2e61c:	d109      	bne.n	2e632 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2e61e:	2392      	movs	r3, #146	; 0x92
   2e620:	009b      	lsls	r3, r3, #2
   2e622:	18fb      	adds	r3, r7, r3
   2e624:	681b      	ldr	r3, [r3, #0]
   2e626:	2b00      	cmp	r3, #0
   2e628:	d103      	bne.n	2e632 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2e62a:	4bb4      	ldr	r3, [pc, #720]	; (2e8fc <f_open+0x3a0>)
   2e62c:	18fb      	adds	r3, r7, r3
   2e62e:	2206      	movs	r2, #6
   2e630:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2e632:	4bb1      	ldr	r3, [pc, #708]	; (2e8f8 <f_open+0x39c>)
   2e634:	2294      	movs	r2, #148	; 0x94
   2e636:	0092      	lsls	r2, r2, #2
   2e638:	4694      	mov	ip, r2
   2e63a:	44bc      	add	ip, r7
   2e63c:	4463      	add	r3, ip
   2e63e:	781b      	ldrb	r3, [r3, #0]
   2e640:	221c      	movs	r2, #28
   2e642:	4013      	ands	r3, r2
   2e644:	d100      	bne.n	2e648 <f_open+0xec>
   2e646:	e141      	b.n	2e8cc <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2e648:	4bac      	ldr	r3, [pc, #688]	; (2e8fc <f_open+0x3a0>)
   2e64a:	18fb      	adds	r3, r7, r3
   2e64c:	781b      	ldrb	r3, [r3, #0]
   2e64e:	2b00      	cmp	r3, #0
   2e650:	d027      	beq.n	2e6a2 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2e652:	4baa      	ldr	r3, [pc, #680]	; (2e8fc <f_open+0x3a0>)
   2e654:	18fb      	adds	r3, r7, r3
   2e656:	781b      	ldrb	r3, [r3, #0]
   2e658:	2b04      	cmp	r3, #4
   2e65a:	d109      	bne.n	2e670 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2e65c:	4ba7      	ldr	r3, [pc, #668]	; (2e8fc <f_open+0x3a0>)
   2e65e:	18fc      	adds	r4, r7, r3
   2e660:	2387      	movs	r3, #135	; 0x87
   2e662:	009b      	lsls	r3, r3, #2
   2e664:	18fb      	adds	r3, r7, r3
   2e666:	0018      	movs	r0, r3
   2e668:	4ba7      	ldr	r3, [pc, #668]	; (2e908 <f_open+0x3ac>)
   2e66a:	4798      	blx	r3
   2e66c:	0003      	movs	r3, r0
   2e66e:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2e670:	4ba1      	ldr	r3, [pc, #644]	; (2e8f8 <f_open+0x39c>)
   2e672:	2294      	movs	r2, #148	; 0x94
   2e674:	0092      	lsls	r2, r2, #2
   2e676:	4694      	mov	ip, r2
   2e678:	44bc      	add	ip, r7
   2e67a:	4463      	add	r3, ip
   2e67c:	4a9e      	ldr	r2, [pc, #632]	; (2e8f8 <f_open+0x39c>)
   2e67e:	2194      	movs	r1, #148	; 0x94
   2e680:	0089      	lsls	r1, r1, #2
   2e682:	468c      	mov	ip, r1
   2e684:	44bc      	add	ip, r7
   2e686:	4462      	add	r2, ip
   2e688:	7812      	ldrb	r2, [r2, #0]
   2e68a:	2108      	movs	r1, #8
   2e68c:	430a      	orrs	r2, r1
   2e68e:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2e690:	2387      	movs	r3, #135	; 0x87
   2e692:	009b      	lsls	r3, r3, #2
   2e694:	18fb      	adds	r3, r7, r3
   2e696:	695b      	ldr	r3, [r3, #20]
   2e698:	2292      	movs	r2, #146	; 0x92
   2e69a:	0092      	lsls	r2, r2, #2
   2e69c:	18ba      	adds	r2, r7, r2
   2e69e:	6013      	str	r3, [r2, #0]
   2e6a0:	e01c      	b.n	2e6dc <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2e6a2:	2392      	movs	r3, #146	; 0x92
   2e6a4:	009b      	lsls	r3, r3, #2
   2e6a6:	18fb      	adds	r3, r7, r3
   2e6a8:	681b      	ldr	r3, [r3, #0]
   2e6aa:	330b      	adds	r3, #11
   2e6ac:	781b      	ldrb	r3, [r3, #0]
   2e6ae:	001a      	movs	r2, r3
   2e6b0:	2311      	movs	r3, #17
   2e6b2:	4013      	ands	r3, r2
   2e6b4:	d004      	beq.n	2e6c0 <f_open+0x164>
				res = FR_DENIED;
   2e6b6:	4b91      	ldr	r3, [pc, #580]	; (2e8fc <f_open+0x3a0>)
   2e6b8:	18fb      	adds	r3, r7, r3
   2e6ba:	2207      	movs	r2, #7
   2e6bc:	701a      	strb	r2, [r3, #0]
   2e6be:	e00d      	b.n	2e6dc <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2e6c0:	4b8d      	ldr	r3, [pc, #564]	; (2e8f8 <f_open+0x39c>)
   2e6c2:	2294      	movs	r2, #148	; 0x94
   2e6c4:	0092      	lsls	r2, r2, #2
   2e6c6:	4694      	mov	ip, r2
   2e6c8:	44bc      	add	ip, r7
   2e6ca:	4463      	add	r3, ip
   2e6cc:	781b      	ldrb	r3, [r3, #0]
   2e6ce:	2204      	movs	r2, #4
   2e6d0:	4013      	ands	r3, r2
   2e6d2:	d003      	beq.n	2e6dc <f_open+0x180>
					res = FR_EXIST;
   2e6d4:	4b89      	ldr	r3, [pc, #548]	; (2e8fc <f_open+0x3a0>)
   2e6d6:	18fb      	adds	r3, r7, r3
   2e6d8:	2208      	movs	r2, #8
   2e6da:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2e6dc:	4b87      	ldr	r3, [pc, #540]	; (2e8fc <f_open+0x3a0>)
   2e6de:	18fb      	adds	r3, r7, r3
   2e6e0:	781b      	ldrb	r3, [r3, #0]
   2e6e2:	2b00      	cmp	r3, #0
   2e6e4:	d000      	beq.n	2e6e8 <f_open+0x18c>
   2e6e6:	e12f      	b.n	2e948 <f_open+0x3ec>
   2e6e8:	4b83      	ldr	r3, [pc, #524]	; (2e8f8 <f_open+0x39c>)
   2e6ea:	2294      	movs	r2, #148	; 0x94
   2e6ec:	0092      	lsls	r2, r2, #2
   2e6ee:	4694      	mov	ip, r2
   2e6f0:	44bc      	add	ip, r7
   2e6f2:	4463      	add	r3, ip
   2e6f4:	781b      	ldrb	r3, [r3, #0]
   2e6f6:	2208      	movs	r2, #8
   2e6f8:	4013      	ands	r3, r2
   2e6fa:	d100      	bne.n	2e6fe <f_open+0x1a2>
   2e6fc:	e124      	b.n	2e948 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2e6fe:	4b83      	ldr	r3, [pc, #524]	; (2e90c <f_open+0x3b0>)
   2e700:	4798      	blx	r3
   2e702:	0003      	movs	r3, r0
   2e704:	2291      	movs	r2, #145	; 0x91
   2e706:	0092      	lsls	r2, r2, #2
   2e708:	18ba      	adds	r2, r7, r2
   2e70a:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2e70c:	2392      	movs	r3, #146	; 0x92
   2e70e:	009b      	lsls	r3, r3, #2
   2e710:	18fb      	adds	r3, r7, r3
   2e712:	681b      	ldr	r3, [r3, #0]
   2e714:	330e      	adds	r3, #14
   2e716:	2291      	movs	r2, #145	; 0x91
   2e718:	0092      	lsls	r2, r2, #2
   2e71a:	18ba      	adds	r2, r7, r2
   2e71c:	6812      	ldr	r2, [r2, #0]
   2e71e:	b2d2      	uxtb	r2, r2
   2e720:	701a      	strb	r2, [r3, #0]
   2e722:	2392      	movs	r3, #146	; 0x92
   2e724:	009b      	lsls	r3, r3, #2
   2e726:	18fb      	adds	r3, r7, r3
   2e728:	681b      	ldr	r3, [r3, #0]
   2e72a:	330f      	adds	r3, #15
   2e72c:	2291      	movs	r2, #145	; 0x91
   2e72e:	0092      	lsls	r2, r2, #2
   2e730:	18ba      	adds	r2, r7, r2
   2e732:	6812      	ldr	r2, [r2, #0]
   2e734:	b292      	uxth	r2, r2
   2e736:	0a12      	lsrs	r2, r2, #8
   2e738:	b292      	uxth	r2, r2
   2e73a:	b2d2      	uxtb	r2, r2
   2e73c:	701a      	strb	r2, [r3, #0]
   2e73e:	2392      	movs	r3, #146	; 0x92
   2e740:	009b      	lsls	r3, r3, #2
   2e742:	18fb      	adds	r3, r7, r3
   2e744:	681b      	ldr	r3, [r3, #0]
   2e746:	3310      	adds	r3, #16
   2e748:	2291      	movs	r2, #145	; 0x91
   2e74a:	0092      	lsls	r2, r2, #2
   2e74c:	18ba      	adds	r2, r7, r2
   2e74e:	6812      	ldr	r2, [r2, #0]
   2e750:	0c12      	lsrs	r2, r2, #16
   2e752:	b2d2      	uxtb	r2, r2
   2e754:	701a      	strb	r2, [r3, #0]
   2e756:	2392      	movs	r3, #146	; 0x92
   2e758:	009b      	lsls	r3, r3, #2
   2e75a:	18fb      	adds	r3, r7, r3
   2e75c:	681b      	ldr	r3, [r3, #0]
   2e75e:	3311      	adds	r3, #17
   2e760:	2291      	movs	r2, #145	; 0x91
   2e762:	0092      	lsls	r2, r2, #2
   2e764:	18ba      	adds	r2, r7, r2
   2e766:	6812      	ldr	r2, [r2, #0]
   2e768:	0e12      	lsrs	r2, r2, #24
   2e76a:	b2d2      	uxtb	r2, r2
   2e76c:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2e76e:	2392      	movs	r3, #146	; 0x92
   2e770:	009b      	lsls	r3, r3, #2
   2e772:	18fb      	adds	r3, r7, r3
   2e774:	681b      	ldr	r3, [r3, #0]
   2e776:	330b      	adds	r3, #11
   2e778:	2200      	movs	r2, #0
   2e77a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2e77c:	2392      	movs	r3, #146	; 0x92
   2e77e:	009b      	lsls	r3, r3, #2
   2e780:	18fb      	adds	r3, r7, r3
   2e782:	681b      	ldr	r3, [r3, #0]
   2e784:	331c      	adds	r3, #28
   2e786:	2200      	movs	r2, #0
   2e788:	701a      	strb	r2, [r3, #0]
   2e78a:	2392      	movs	r3, #146	; 0x92
   2e78c:	009b      	lsls	r3, r3, #2
   2e78e:	18fb      	adds	r3, r7, r3
   2e790:	681b      	ldr	r3, [r3, #0]
   2e792:	331d      	adds	r3, #29
   2e794:	2200      	movs	r2, #0
   2e796:	701a      	strb	r2, [r3, #0]
   2e798:	2392      	movs	r3, #146	; 0x92
   2e79a:	009b      	lsls	r3, r3, #2
   2e79c:	18fb      	adds	r3, r7, r3
   2e79e:	681b      	ldr	r3, [r3, #0]
   2e7a0:	331e      	adds	r3, #30
   2e7a2:	2200      	movs	r2, #0
   2e7a4:	701a      	strb	r2, [r3, #0]
   2e7a6:	2392      	movs	r3, #146	; 0x92
   2e7a8:	009b      	lsls	r3, r3, #2
   2e7aa:	18fb      	adds	r3, r7, r3
   2e7ac:	681b      	ldr	r3, [r3, #0]
   2e7ae:	331f      	adds	r3, #31
   2e7b0:	2200      	movs	r2, #0
   2e7b2:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2e7b4:	2392      	movs	r3, #146	; 0x92
   2e7b6:	009b      	lsls	r3, r3, #2
   2e7b8:	18fb      	adds	r3, r7, r3
   2e7ba:	681b      	ldr	r3, [r3, #0]
   2e7bc:	3315      	adds	r3, #21
   2e7be:	781b      	ldrb	r3, [r3, #0]
   2e7c0:	021b      	lsls	r3, r3, #8
   2e7c2:	b21a      	sxth	r2, r3
   2e7c4:	2392      	movs	r3, #146	; 0x92
   2e7c6:	009b      	lsls	r3, r3, #2
   2e7c8:	18fb      	adds	r3, r7, r3
   2e7ca:	681b      	ldr	r3, [r3, #0]
   2e7cc:	3314      	adds	r3, #20
   2e7ce:	781b      	ldrb	r3, [r3, #0]
   2e7d0:	b21b      	sxth	r3, r3
   2e7d2:	4313      	orrs	r3, r2
   2e7d4:	b21b      	sxth	r3, r3
   2e7d6:	b29b      	uxth	r3, r3
   2e7d8:	041b      	lsls	r3, r3, #16
   2e7da:	2292      	movs	r2, #146	; 0x92
   2e7dc:	0092      	lsls	r2, r2, #2
   2e7de:	18ba      	adds	r2, r7, r2
   2e7e0:	6812      	ldr	r2, [r2, #0]
   2e7e2:	321b      	adds	r2, #27
   2e7e4:	7812      	ldrb	r2, [r2, #0]
   2e7e6:	0212      	lsls	r2, r2, #8
   2e7e8:	b211      	sxth	r1, r2
   2e7ea:	2292      	movs	r2, #146	; 0x92
   2e7ec:	0092      	lsls	r2, r2, #2
   2e7ee:	18ba      	adds	r2, r7, r2
   2e7f0:	6812      	ldr	r2, [r2, #0]
   2e7f2:	321a      	adds	r2, #26
   2e7f4:	7812      	ldrb	r2, [r2, #0]
   2e7f6:	b212      	sxth	r2, r2
   2e7f8:	430a      	orrs	r2, r1
   2e7fa:	b212      	sxth	r2, r2
   2e7fc:	b292      	uxth	r2, r2
   2e7fe:	4313      	orrs	r3, r2
   2e800:	2290      	movs	r2, #144	; 0x90
   2e802:	0092      	lsls	r2, r2, #2
   2e804:	18ba      	adds	r2, r7, r2
   2e806:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2e808:	2392      	movs	r3, #146	; 0x92
   2e80a:	009b      	lsls	r3, r3, #2
   2e80c:	18fb      	adds	r3, r7, r3
   2e80e:	681b      	ldr	r3, [r3, #0]
   2e810:	331a      	adds	r3, #26
   2e812:	2200      	movs	r2, #0
   2e814:	701a      	strb	r2, [r3, #0]
   2e816:	2392      	movs	r3, #146	; 0x92
   2e818:	009b      	lsls	r3, r3, #2
   2e81a:	18fb      	adds	r3, r7, r3
   2e81c:	681b      	ldr	r3, [r3, #0]
   2e81e:	331b      	adds	r3, #27
   2e820:	2200      	movs	r2, #0
   2e822:	701a      	strb	r2, [r3, #0]
   2e824:	2392      	movs	r3, #146	; 0x92
   2e826:	009b      	lsls	r3, r3, #2
   2e828:	18fb      	adds	r3, r7, r3
   2e82a:	681b      	ldr	r3, [r3, #0]
   2e82c:	3314      	adds	r3, #20
   2e82e:	2200      	movs	r2, #0
   2e830:	701a      	strb	r2, [r3, #0]
   2e832:	2392      	movs	r3, #146	; 0x92
   2e834:	009b      	lsls	r3, r3, #2
   2e836:	18fb      	adds	r3, r7, r3
   2e838:	681b      	ldr	r3, [r3, #0]
   2e83a:	3315      	adds	r3, #21
   2e83c:	2200      	movs	r2, #0
   2e83e:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2e840:	2387      	movs	r3, #135	; 0x87
   2e842:	009b      	lsls	r3, r3, #2
   2e844:	18fb      	adds	r3, r7, r3
   2e846:	681b      	ldr	r3, [r3, #0]
   2e848:	2201      	movs	r2, #1
   2e84a:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2e84c:	2390      	movs	r3, #144	; 0x90
   2e84e:	009b      	lsls	r3, r3, #2
   2e850:	18fb      	adds	r3, r7, r3
   2e852:	681b      	ldr	r3, [r3, #0]
   2e854:	2b00      	cmp	r3, #0
   2e856:	d100      	bne.n	2e85a <f_open+0x2fe>
   2e858:	e076      	b.n	2e948 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2e85a:	2387      	movs	r3, #135	; 0x87
   2e85c:	009b      	lsls	r3, r3, #2
   2e85e:	18fb      	adds	r3, r7, r3
   2e860:	681b      	ldr	r3, [r3, #0]
   2e862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e864:	2291      	movs	r2, #145	; 0x91
   2e866:	0092      	lsls	r2, r2, #2
   2e868:	18ba      	adds	r2, r7, r2
   2e86a:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2e86c:	2387      	movs	r3, #135	; 0x87
   2e86e:	009b      	lsls	r3, r3, #2
   2e870:	18fb      	adds	r3, r7, r3
   2e872:	681b      	ldr	r3, [r3, #0]
   2e874:	4a21      	ldr	r2, [pc, #132]	; (2e8fc <f_open+0x3a0>)
   2e876:	18bc      	adds	r4, r7, r2
   2e878:	2290      	movs	r2, #144	; 0x90
   2e87a:	0092      	lsls	r2, r2, #2
   2e87c:	18ba      	adds	r2, r7, r2
   2e87e:	6812      	ldr	r2, [r2, #0]
   2e880:	0011      	movs	r1, r2
   2e882:	0018      	movs	r0, r3
   2e884:	4b22      	ldr	r3, [pc, #136]	; (2e910 <f_open+0x3b4>)
   2e886:	4798      	blx	r3
   2e888:	0003      	movs	r3, r0
   2e88a:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2e88c:	4b1b      	ldr	r3, [pc, #108]	; (2e8fc <f_open+0x3a0>)
   2e88e:	18fb      	adds	r3, r7, r3
   2e890:	781b      	ldrb	r3, [r3, #0]
   2e892:	2b00      	cmp	r3, #0
   2e894:	d158      	bne.n	2e948 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2e896:	2387      	movs	r3, #135	; 0x87
   2e898:	009b      	lsls	r3, r3, #2
   2e89a:	18fb      	adds	r3, r7, r3
   2e89c:	681b      	ldr	r3, [r3, #0]
   2e89e:	2290      	movs	r2, #144	; 0x90
   2e8a0:	0092      	lsls	r2, r2, #2
   2e8a2:	18ba      	adds	r2, r7, r2
   2e8a4:	6812      	ldr	r2, [r2, #0]
   2e8a6:	3a01      	subs	r2, #1
   2e8a8:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2e8aa:	2387      	movs	r3, #135	; 0x87
   2e8ac:	009b      	lsls	r3, r3, #2
   2e8ae:	18fb      	adds	r3, r7, r3
   2e8b0:	681b      	ldr	r3, [r3, #0]
   2e8b2:	4a12      	ldr	r2, [pc, #72]	; (2e8fc <f_open+0x3a0>)
   2e8b4:	18bc      	adds	r4, r7, r2
   2e8b6:	2291      	movs	r2, #145	; 0x91
   2e8b8:	0092      	lsls	r2, r2, #2
   2e8ba:	18ba      	adds	r2, r7, r2
   2e8bc:	6812      	ldr	r2, [r2, #0]
   2e8be:	0011      	movs	r1, r2
   2e8c0:	0018      	movs	r0, r3
   2e8c2:	4b14      	ldr	r3, [pc, #80]	; (2e914 <f_open+0x3b8>)
   2e8c4:	4798      	blx	r3
   2e8c6:	0003      	movs	r3, r0
   2e8c8:	7023      	strb	r3, [r4, #0]
   2e8ca:	e03d      	b.n	2e948 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2e8cc:	4b0b      	ldr	r3, [pc, #44]	; (2e8fc <f_open+0x3a0>)
   2e8ce:	18fb      	adds	r3, r7, r3
   2e8d0:	781b      	ldrb	r3, [r3, #0]
   2e8d2:	2b00      	cmp	r3, #0
   2e8d4:	d138      	bne.n	2e948 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2e8d6:	2392      	movs	r3, #146	; 0x92
   2e8d8:	009b      	lsls	r3, r3, #2
   2e8da:	18fb      	adds	r3, r7, r3
   2e8dc:	681b      	ldr	r3, [r3, #0]
   2e8de:	330b      	adds	r3, #11
   2e8e0:	781b      	ldrb	r3, [r3, #0]
   2e8e2:	001a      	movs	r2, r3
   2e8e4:	2310      	movs	r3, #16
   2e8e6:	4013      	ands	r3, r2
   2e8e8:	d016      	beq.n	2e918 <f_open+0x3bc>
				res = FR_NO_FILE;
   2e8ea:	4b04      	ldr	r3, [pc, #16]	; (2e8fc <f_open+0x3a0>)
   2e8ec:	18fb      	adds	r3, r7, r3
   2e8ee:	2204      	movs	r2, #4
   2e8f0:	701a      	strb	r2, [r3, #0]
   2e8f2:	e029      	b.n	2e948 <f_open+0x3ec>
   2e8f4:	fffffdac 	.word	0xfffffdac
   2e8f8:	fffffdb7 	.word	0xfffffdb7
   2e8fc:	0000024f 	.word	0x0000024f
   2e900:	0002deb5 	.word	0x0002deb5
   2e904:	0002dca9 	.word	0x0002dca9
   2e908:	0002d4f9 	.word	0x0002d4f9
   2e90c:	0002c2f1 	.word	0x0002c2f1
   2e910:	0002ca75 	.word	0x0002ca75
   2e914:	0002c435 	.word	0x0002c435
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2e918:	4b5a      	ldr	r3, [pc, #360]	; (2ea84 <f_open+0x528>)
   2e91a:	2294      	movs	r2, #148	; 0x94
   2e91c:	0092      	lsls	r2, r2, #2
   2e91e:	4694      	mov	ip, r2
   2e920:	44bc      	add	ip, r7
   2e922:	4463      	add	r3, ip
   2e924:	781b      	ldrb	r3, [r3, #0]
   2e926:	2202      	movs	r2, #2
   2e928:	4013      	ands	r3, r2
   2e92a:	d00d      	beq.n	2e948 <f_open+0x3ec>
   2e92c:	2392      	movs	r3, #146	; 0x92
   2e92e:	009b      	lsls	r3, r3, #2
   2e930:	18fb      	adds	r3, r7, r3
   2e932:	681b      	ldr	r3, [r3, #0]
   2e934:	330b      	adds	r3, #11
   2e936:	781b      	ldrb	r3, [r3, #0]
   2e938:	001a      	movs	r2, r3
   2e93a:	2301      	movs	r3, #1
   2e93c:	4013      	ands	r3, r2
   2e93e:	d003      	beq.n	2e948 <f_open+0x3ec>
					res = FR_DENIED;
   2e940:	4b51      	ldr	r3, [pc, #324]	; (2ea88 <f_open+0x52c>)
   2e942:	18fb      	adds	r3, r7, r3
   2e944:	2207      	movs	r2, #7
   2e946:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2e948:	4b4f      	ldr	r3, [pc, #316]	; (2ea88 <f_open+0x52c>)
   2e94a:	18fb      	adds	r3, r7, r3
   2e94c:	781b      	ldrb	r3, [r3, #0]
   2e94e:	2b00      	cmp	r3, #0
   2e950:	d126      	bne.n	2e9a0 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2e952:	4b4c      	ldr	r3, [pc, #304]	; (2ea84 <f_open+0x528>)
   2e954:	2294      	movs	r2, #148	; 0x94
   2e956:	0092      	lsls	r2, r2, #2
   2e958:	4694      	mov	ip, r2
   2e95a:	44bc      	add	ip, r7
   2e95c:	4463      	add	r3, ip
   2e95e:	781b      	ldrb	r3, [r3, #0]
   2e960:	2208      	movs	r2, #8
   2e962:	4013      	ands	r3, r2
   2e964:	d00f      	beq.n	2e986 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2e966:	4b47      	ldr	r3, [pc, #284]	; (2ea84 <f_open+0x528>)
   2e968:	2294      	movs	r2, #148	; 0x94
   2e96a:	0092      	lsls	r2, r2, #2
   2e96c:	4694      	mov	ip, r2
   2e96e:	44bc      	add	ip, r7
   2e970:	4463      	add	r3, ip
   2e972:	4a44      	ldr	r2, [pc, #272]	; (2ea84 <f_open+0x528>)
   2e974:	2194      	movs	r1, #148	; 0x94
   2e976:	0089      	lsls	r1, r1, #2
   2e978:	468c      	mov	ip, r1
   2e97a:	44bc      	add	ip, r7
   2e97c:	4462      	add	r2, ip
   2e97e:	7812      	ldrb	r2, [r2, #0]
   2e980:	2120      	movs	r1, #32
   2e982:	430a      	orrs	r2, r1
   2e984:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2e986:	2387      	movs	r3, #135	; 0x87
   2e988:	009b      	lsls	r3, r3, #2
   2e98a:	18fb      	adds	r3, r7, r3
   2e98c:	681b      	ldr	r3, [r3, #0]
   2e98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e990:	68fb      	ldr	r3, [r7, #12]
   2e992:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2e994:	68fb      	ldr	r3, [r7, #12]
   2e996:	2292      	movs	r2, #146	; 0x92
   2e998:	0092      	lsls	r2, r2, #2
   2e99a:	18ba      	adds	r2, r7, r2
   2e99c:	6812      	ldr	r2, [r2, #0]
   2e99e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2e9a0:	4b39      	ldr	r3, [pc, #228]	; (2ea88 <f_open+0x52c>)
   2e9a2:	18fb      	adds	r3, r7, r3
   2e9a4:	781b      	ldrb	r3, [r3, #0]
   2e9a6:	2b00      	cmp	r3, #0
   2e9a8:	d163      	bne.n	2ea72 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2e9aa:	68fb      	ldr	r3, [r7, #12]
   2e9ac:	4a35      	ldr	r2, [pc, #212]	; (2ea84 <f_open+0x528>)
   2e9ae:	2194      	movs	r1, #148	; 0x94
   2e9b0:	0089      	lsls	r1, r1, #2
   2e9b2:	468c      	mov	ip, r1
   2e9b4:	44bc      	add	ip, r7
   2e9b6:	4462      	add	r2, ip
   2e9b8:	7812      	ldrb	r2, [r2, #0]
   2e9ba:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2e9bc:	2392      	movs	r3, #146	; 0x92
   2e9be:	009b      	lsls	r3, r3, #2
   2e9c0:	18fb      	adds	r3, r7, r3
   2e9c2:	681b      	ldr	r3, [r3, #0]
   2e9c4:	3315      	adds	r3, #21
   2e9c6:	781b      	ldrb	r3, [r3, #0]
   2e9c8:	021b      	lsls	r3, r3, #8
   2e9ca:	b21a      	sxth	r2, r3
   2e9cc:	2392      	movs	r3, #146	; 0x92
   2e9ce:	009b      	lsls	r3, r3, #2
   2e9d0:	18fb      	adds	r3, r7, r3
   2e9d2:	681b      	ldr	r3, [r3, #0]
   2e9d4:	3314      	adds	r3, #20
   2e9d6:	781b      	ldrb	r3, [r3, #0]
   2e9d8:	b21b      	sxth	r3, r3
   2e9da:	4313      	orrs	r3, r2
   2e9dc:	b21b      	sxth	r3, r3
   2e9de:	b29b      	uxth	r3, r3
   2e9e0:	041b      	lsls	r3, r3, #16
   2e9e2:	2292      	movs	r2, #146	; 0x92
   2e9e4:	0092      	lsls	r2, r2, #2
   2e9e6:	18ba      	adds	r2, r7, r2
   2e9e8:	6812      	ldr	r2, [r2, #0]
   2e9ea:	321b      	adds	r2, #27
   2e9ec:	7812      	ldrb	r2, [r2, #0]
   2e9ee:	0212      	lsls	r2, r2, #8
   2e9f0:	b211      	sxth	r1, r2
   2e9f2:	2292      	movs	r2, #146	; 0x92
   2e9f4:	0092      	lsls	r2, r2, #2
   2e9f6:	18ba      	adds	r2, r7, r2
   2e9f8:	6812      	ldr	r2, [r2, #0]
   2e9fa:	321a      	adds	r2, #26
   2e9fc:	7812      	ldrb	r2, [r2, #0]
   2e9fe:	b212      	sxth	r2, r2
   2ea00:	430a      	orrs	r2, r1
   2ea02:	b212      	sxth	r2, r2
   2ea04:	b292      	uxth	r2, r2
   2ea06:	431a      	orrs	r2, r3
   2ea08:	68fb      	ldr	r3, [r7, #12]
   2ea0a:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2ea0c:	2392      	movs	r3, #146	; 0x92
   2ea0e:	009b      	lsls	r3, r3, #2
   2ea10:	18fb      	adds	r3, r7, r3
   2ea12:	681b      	ldr	r3, [r3, #0]
   2ea14:	331f      	adds	r3, #31
   2ea16:	781b      	ldrb	r3, [r3, #0]
   2ea18:	061a      	lsls	r2, r3, #24
   2ea1a:	2392      	movs	r3, #146	; 0x92
   2ea1c:	009b      	lsls	r3, r3, #2
   2ea1e:	18fb      	adds	r3, r7, r3
   2ea20:	681b      	ldr	r3, [r3, #0]
   2ea22:	331e      	adds	r3, #30
   2ea24:	781b      	ldrb	r3, [r3, #0]
   2ea26:	041b      	lsls	r3, r3, #16
   2ea28:	4313      	orrs	r3, r2
   2ea2a:	2292      	movs	r2, #146	; 0x92
   2ea2c:	0092      	lsls	r2, r2, #2
   2ea2e:	18ba      	adds	r2, r7, r2
   2ea30:	6812      	ldr	r2, [r2, #0]
   2ea32:	321d      	adds	r2, #29
   2ea34:	7812      	ldrb	r2, [r2, #0]
   2ea36:	0212      	lsls	r2, r2, #8
   2ea38:	4313      	orrs	r3, r2
   2ea3a:	2292      	movs	r2, #146	; 0x92
   2ea3c:	0092      	lsls	r2, r2, #2
   2ea3e:	18ba      	adds	r2, r7, r2
   2ea40:	6812      	ldr	r2, [r2, #0]
   2ea42:	321c      	adds	r2, #28
   2ea44:	7812      	ldrb	r2, [r2, #0]
   2ea46:	431a      	orrs	r2, r3
   2ea48:	68fb      	ldr	r3, [r7, #12]
   2ea4a:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2ea4c:	68fb      	ldr	r3, [r7, #12]
   2ea4e:	2200      	movs	r2, #0
   2ea50:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2ea52:	68fb      	ldr	r3, [r7, #12]
   2ea54:	2200      	movs	r2, #0
   2ea56:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2ea58:	2387      	movs	r3, #135	; 0x87
   2ea5a:	009b      	lsls	r3, r3, #2
   2ea5c:	18fb      	adds	r3, r7, r3
   2ea5e:	681a      	ldr	r2, [r3, #0]
   2ea60:	68fb      	ldr	r3, [r7, #12]
   2ea62:	601a      	str	r2, [r3, #0]
   2ea64:	2387      	movs	r3, #135	; 0x87
   2ea66:	009b      	lsls	r3, r3, #2
   2ea68:	18fb      	adds	r3, r7, r3
   2ea6a:	681b      	ldr	r3, [r3, #0]
   2ea6c:	88da      	ldrh	r2, [r3, #6]
   2ea6e:	68fb      	ldr	r3, [r7, #12]
   2ea70:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2ea72:	4b05      	ldr	r3, [pc, #20]	; (2ea88 <f_open+0x52c>)
   2ea74:	18fb      	adds	r3, r7, r3
   2ea76:	781b      	ldrb	r3, [r3, #0]
}
   2ea78:	0018      	movs	r0, r3
   2ea7a:	46bd      	mov	sp, r7
   2ea7c:	2395      	movs	r3, #149	; 0x95
   2ea7e:	009b      	lsls	r3, r3, #2
   2ea80:	449d      	add	sp, r3
   2ea82:	bd90      	pop	{r4, r7, pc}
   2ea84:	fffffdb7 	.word	0xfffffdb7
   2ea88:	0000024f 	.word	0x0000024f

0002ea8c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2ea8c:	b590      	push	{r4, r7, lr}
   2ea8e:	b08b      	sub	sp, #44	; 0x2c
   2ea90:	af00      	add	r7, sp, #0
   2ea92:	60f8      	str	r0, [r7, #12]
   2ea94:	60b9      	str	r1, [r7, #8]
   2ea96:	607a      	str	r2, [r7, #4]
   2ea98:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2ea9a:	68bb      	ldr	r3, [r7, #8]
   2ea9c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2ea9e:	683b      	ldr	r3, [r7, #0]
   2eaa0:	2200      	movs	r2, #0
   2eaa2:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2eaa4:	68fb      	ldr	r3, [r7, #12]
   2eaa6:	681a      	ldr	r2, [r3, #0]
   2eaa8:	68fb      	ldr	r3, [r7, #12]
   2eaaa:	889b      	ldrh	r3, [r3, #4]
   2eaac:	2117      	movs	r1, #23
   2eaae:	187c      	adds	r4, r7, r1
   2eab0:	0019      	movs	r1, r3
   2eab2:	0010      	movs	r0, r2
   2eab4:	4bc3      	ldr	r3, [pc, #780]	; (2edc4 <f_write+0x338>)
   2eab6:	4798      	blx	r3
   2eab8:	0003      	movs	r3, r0
   2eaba:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2eabc:	2317      	movs	r3, #23
   2eabe:	18fb      	adds	r3, r7, r3
   2eac0:	781b      	ldrb	r3, [r3, #0]
   2eac2:	2b00      	cmp	r3, #0
   2eac4:	d003      	beq.n	2eace <f_write+0x42>
   2eac6:	2317      	movs	r3, #23
   2eac8:	18fb      	adds	r3, r7, r3
   2eaca:	781b      	ldrb	r3, [r3, #0]
   2eacc:	e176      	b.n	2edbc <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2eace:	68fb      	ldr	r3, [r7, #12]
   2ead0:	799b      	ldrb	r3, [r3, #6]
   2ead2:	b25b      	sxtb	r3, r3
   2ead4:	2b00      	cmp	r3, #0
   2ead6:	da01      	bge.n	2eadc <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2ead8:	2302      	movs	r3, #2
   2eada:	e16f      	b.n	2edbc <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2eadc:	68fb      	ldr	r3, [r7, #12]
   2eade:	799b      	ldrb	r3, [r3, #6]
   2eae0:	001a      	movs	r2, r3
   2eae2:	2302      	movs	r3, #2
   2eae4:	4013      	ands	r3, r2
   2eae6:	d101      	bne.n	2eaec <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2eae8:	2307      	movs	r3, #7
   2eaea:	e167      	b.n	2edbc <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2eaec:	68fb      	ldr	r3, [r7, #12]
   2eaee:	68da      	ldr	r2, [r3, #12]
   2eaf0:	687b      	ldr	r3, [r7, #4]
   2eaf2:	18d2      	adds	r2, r2, r3
   2eaf4:	68fb      	ldr	r3, [r7, #12]
   2eaf6:	68db      	ldr	r3, [r3, #12]
   2eaf8:	429a      	cmp	r2, r3
   2eafa:	d300      	bcc.n	2eafe <f_write+0x72>
   2eafc:	e146      	b.n	2ed8c <f_write+0x300>
   2eafe:	2300      	movs	r3, #0
   2eb00:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2eb02:	e143      	b.n	2ed8c <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2eb04:	68fb      	ldr	r3, [r7, #12]
   2eb06:	689b      	ldr	r3, [r3, #8]
   2eb08:	05db      	lsls	r3, r3, #23
   2eb0a:	0ddb      	lsrs	r3, r3, #23
   2eb0c:	d000      	beq.n	2eb10 <f_write+0x84>
   2eb0e:	e0f6      	b.n	2ecfe <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2eb10:	68fb      	ldr	r3, [r7, #12]
   2eb12:	689b      	ldr	r3, [r3, #8]
   2eb14:	0a5b      	lsrs	r3, r3, #9
   2eb16:	b2da      	uxtb	r2, r3
   2eb18:	68fb      	ldr	r3, [r7, #12]
   2eb1a:	681b      	ldr	r3, [r3, #0]
   2eb1c:	789b      	ldrb	r3, [r3, #2]
   2eb1e:	3b01      	subs	r3, #1
   2eb20:	b2d9      	uxtb	r1, r3
   2eb22:	2316      	movs	r3, #22
   2eb24:	18fb      	adds	r3, r7, r3
   2eb26:	400a      	ands	r2, r1
   2eb28:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2eb2a:	2316      	movs	r3, #22
   2eb2c:	18fb      	adds	r3, r7, r3
   2eb2e:	781b      	ldrb	r3, [r3, #0]
   2eb30:	2b00      	cmp	r3, #0
   2eb32:	d140      	bne.n	2ebb6 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2eb34:	68fb      	ldr	r3, [r7, #12]
   2eb36:	689b      	ldr	r3, [r3, #8]
   2eb38:	2b00      	cmp	r3, #0
   2eb3a:	d111      	bne.n	2eb60 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2eb3c:	68fb      	ldr	r3, [r7, #12]
   2eb3e:	691b      	ldr	r3, [r3, #16]
   2eb40:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2eb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eb44:	2b00      	cmp	r3, #0
   2eb46:	d115      	bne.n	2eb74 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2eb48:	68fb      	ldr	r3, [r7, #12]
   2eb4a:	681b      	ldr	r3, [r3, #0]
   2eb4c:	2100      	movs	r1, #0
   2eb4e:	0018      	movs	r0, r3
   2eb50:	4b9d      	ldr	r3, [pc, #628]	; (2edc8 <f_write+0x33c>)
   2eb52:	4798      	blx	r3
   2eb54:	0003      	movs	r3, r0
   2eb56:	627b      	str	r3, [r7, #36]	; 0x24
   2eb58:	68fb      	ldr	r3, [r7, #12]
   2eb5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2eb5c:	611a      	str	r2, [r3, #16]
   2eb5e:	e009      	b.n	2eb74 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2eb60:	68fb      	ldr	r3, [r7, #12]
   2eb62:	681a      	ldr	r2, [r3, #0]
   2eb64:	68fb      	ldr	r3, [r7, #12]
   2eb66:	695b      	ldr	r3, [r3, #20]
   2eb68:	0019      	movs	r1, r3
   2eb6a:	0010      	movs	r0, r2
   2eb6c:	4b96      	ldr	r3, [pc, #600]	; (2edc8 <f_write+0x33c>)
   2eb6e:	4798      	blx	r3
   2eb70:	0003      	movs	r3, r0
   2eb72:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2eb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eb76:	2b00      	cmp	r3, #0
   2eb78:	d100      	bne.n	2eb7c <f_write+0xf0>
   2eb7a:	e10c      	b.n	2ed96 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2eb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eb7e:	2b01      	cmp	r3, #1
   2eb80:	d109      	bne.n	2eb96 <f_write+0x10a>
   2eb82:	68fb      	ldr	r3, [r7, #12]
   2eb84:	799b      	ldrb	r3, [r3, #6]
   2eb86:	2280      	movs	r2, #128	; 0x80
   2eb88:	4252      	negs	r2, r2
   2eb8a:	4313      	orrs	r3, r2
   2eb8c:	b2da      	uxtb	r2, r3
   2eb8e:	68fb      	ldr	r3, [r7, #12]
   2eb90:	719a      	strb	r2, [r3, #6]
   2eb92:	2302      	movs	r3, #2
   2eb94:	e112      	b.n	2edbc <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2eb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eb98:	3301      	adds	r3, #1
   2eb9a:	d109      	bne.n	2ebb0 <f_write+0x124>
   2eb9c:	68fb      	ldr	r3, [r7, #12]
   2eb9e:	799b      	ldrb	r3, [r3, #6]
   2eba0:	2280      	movs	r2, #128	; 0x80
   2eba2:	4252      	negs	r2, r2
   2eba4:	4313      	orrs	r3, r2
   2eba6:	b2da      	uxtb	r2, r3
   2eba8:	68fb      	ldr	r3, [r7, #12]
   2ebaa:	719a      	strb	r2, [r3, #6]
   2ebac:	2301      	movs	r3, #1
   2ebae:	e105      	b.n	2edbc <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2ebb0:	68fb      	ldr	r3, [r7, #12]
   2ebb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ebb4:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2ebb6:	68fb      	ldr	r3, [r7, #12]
   2ebb8:	681b      	ldr	r3, [r3, #0]
   2ebba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ebbc:	68fb      	ldr	r3, [r7, #12]
   2ebbe:	699b      	ldr	r3, [r3, #24]
   2ebc0:	429a      	cmp	r2, r3
   2ebc2:	d111      	bne.n	2ebe8 <f_write+0x15c>
   2ebc4:	68fb      	ldr	r3, [r7, #12]
   2ebc6:	681b      	ldr	r3, [r3, #0]
   2ebc8:	2100      	movs	r1, #0
   2ebca:	0018      	movs	r0, r3
   2ebcc:	4b7f      	ldr	r3, [pc, #508]	; (2edcc <f_write+0x340>)
   2ebce:	4798      	blx	r3
   2ebd0:	1e03      	subs	r3, r0, #0
   2ebd2:	d009      	beq.n	2ebe8 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2ebd4:	68fb      	ldr	r3, [r7, #12]
   2ebd6:	799b      	ldrb	r3, [r3, #6]
   2ebd8:	2280      	movs	r2, #128	; 0x80
   2ebda:	4252      	negs	r2, r2
   2ebdc:	4313      	orrs	r3, r2
   2ebde:	b2da      	uxtb	r2, r3
   2ebe0:	68fb      	ldr	r3, [r7, #12]
   2ebe2:	719a      	strb	r2, [r3, #6]
   2ebe4:	2301      	movs	r3, #1
   2ebe6:	e0e9      	b.n	2edbc <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2ebe8:	68fb      	ldr	r3, [r7, #12]
   2ebea:	681a      	ldr	r2, [r3, #0]
   2ebec:	68fb      	ldr	r3, [r7, #12]
   2ebee:	695b      	ldr	r3, [r3, #20]
   2ebf0:	0019      	movs	r1, r3
   2ebf2:	0010      	movs	r0, r2
   2ebf4:	4b76      	ldr	r3, [pc, #472]	; (2edd0 <f_write+0x344>)
   2ebf6:	4798      	blx	r3
   2ebf8:	0003      	movs	r3, r0
   2ebfa:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2ebfc:	693b      	ldr	r3, [r7, #16]
   2ebfe:	2b00      	cmp	r3, #0
   2ec00:	d109      	bne.n	2ec16 <f_write+0x18a>
   2ec02:	68fb      	ldr	r3, [r7, #12]
   2ec04:	799b      	ldrb	r3, [r3, #6]
   2ec06:	2280      	movs	r2, #128	; 0x80
   2ec08:	4252      	negs	r2, r2
   2ec0a:	4313      	orrs	r3, r2
   2ec0c:	b2da      	uxtb	r2, r3
   2ec0e:	68fb      	ldr	r3, [r7, #12]
   2ec10:	719a      	strb	r2, [r3, #6]
   2ec12:	2302      	movs	r3, #2
   2ec14:	e0d2      	b.n	2edbc <f_write+0x330>
			sect += csect;
   2ec16:	2316      	movs	r3, #22
   2ec18:	18fb      	adds	r3, r7, r3
   2ec1a:	781b      	ldrb	r3, [r3, #0]
   2ec1c:	693a      	ldr	r2, [r7, #16]
   2ec1e:	18d3      	adds	r3, r2, r3
   2ec20:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2ec22:	687b      	ldr	r3, [r7, #4]
   2ec24:	0a5b      	lsrs	r3, r3, #9
   2ec26:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2ec28:	69fb      	ldr	r3, [r7, #28]
   2ec2a:	2b00      	cmp	r3, #0
   2ec2c:	d048      	beq.n	2ecc0 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2ec2e:	2316      	movs	r3, #22
   2ec30:	18fb      	adds	r3, r7, r3
   2ec32:	781a      	ldrb	r2, [r3, #0]
   2ec34:	69fb      	ldr	r3, [r7, #28]
   2ec36:	18d2      	adds	r2, r2, r3
   2ec38:	68fb      	ldr	r3, [r7, #12]
   2ec3a:	681b      	ldr	r3, [r3, #0]
   2ec3c:	789b      	ldrb	r3, [r3, #2]
   2ec3e:	429a      	cmp	r2, r3
   2ec40:	d908      	bls.n	2ec54 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2ec42:	68fb      	ldr	r3, [r7, #12]
   2ec44:	681b      	ldr	r3, [r3, #0]
   2ec46:	789b      	ldrb	r3, [r3, #2]
   2ec48:	001a      	movs	r2, r3
   2ec4a:	2316      	movs	r3, #22
   2ec4c:	18fb      	adds	r3, r7, r3
   2ec4e:	781b      	ldrb	r3, [r3, #0]
   2ec50:	1ad3      	subs	r3, r2, r3
   2ec52:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2ec54:	68fb      	ldr	r3, [r7, #12]
   2ec56:	681b      	ldr	r3, [r3, #0]
   2ec58:	7858      	ldrb	r0, [r3, #1]
   2ec5a:	69fb      	ldr	r3, [r7, #28]
   2ec5c:	b2db      	uxtb	r3, r3
   2ec5e:	693a      	ldr	r2, [r7, #16]
   2ec60:	69b9      	ldr	r1, [r7, #24]
   2ec62:	4c5c      	ldr	r4, [pc, #368]	; (2edd4 <f_write+0x348>)
   2ec64:	47a0      	blx	r4
   2ec66:	1e03      	subs	r3, r0, #0
   2ec68:	d009      	beq.n	2ec7e <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2ec6a:	68fb      	ldr	r3, [r7, #12]
   2ec6c:	799b      	ldrb	r3, [r3, #6]
   2ec6e:	2280      	movs	r2, #128	; 0x80
   2ec70:	4252      	negs	r2, r2
   2ec72:	4313      	orrs	r3, r2
   2ec74:	b2da      	uxtb	r2, r3
   2ec76:	68fb      	ldr	r3, [r7, #12]
   2ec78:	719a      	strb	r2, [r3, #6]
   2ec7a:	2301      	movs	r3, #1
   2ec7c:	e09e      	b.n	2edbc <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2ec7e:	68fb      	ldr	r3, [r7, #12]
   2ec80:	681b      	ldr	r3, [r3, #0]
   2ec82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ec84:	693b      	ldr	r3, [r7, #16]
   2ec86:	1ad2      	subs	r2, r2, r3
   2ec88:	69fb      	ldr	r3, [r7, #28]
   2ec8a:	429a      	cmp	r2, r3
   2ec8c:	d214      	bcs.n	2ecb8 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2ec8e:	68fb      	ldr	r3, [r7, #12]
   2ec90:	681b      	ldr	r3, [r3, #0]
   2ec92:	3330      	adds	r3, #48	; 0x30
   2ec94:	0018      	movs	r0, r3
   2ec96:	68fb      	ldr	r3, [r7, #12]
   2ec98:	681b      	ldr	r3, [r3, #0]
   2ec9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ec9c:	693b      	ldr	r3, [r7, #16]
   2ec9e:	1ad3      	subs	r3, r2, r3
   2eca0:	025b      	lsls	r3, r3, #9
   2eca2:	69ba      	ldr	r2, [r7, #24]
   2eca4:	18d1      	adds	r1, r2, r3
   2eca6:	2380      	movs	r3, #128	; 0x80
   2eca8:	009b      	lsls	r3, r3, #2
   2ecaa:	001a      	movs	r2, r3
   2ecac:	4b4a      	ldr	r3, [pc, #296]	; (2edd8 <f_write+0x34c>)
   2ecae:	4798      	blx	r3
					fp->fs->wflag = 0;
   2ecb0:	68fb      	ldr	r3, [r7, #12]
   2ecb2:	681b      	ldr	r3, [r3, #0]
   2ecb4:	2200      	movs	r2, #0
   2ecb6:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2ecb8:	69fb      	ldr	r3, [r7, #28]
   2ecba:	025b      	lsls	r3, r3, #9
   2ecbc:	623b      	str	r3, [r7, #32]
				continue;
   2ecbe:	e051      	b.n	2ed64 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2ecc0:	68fb      	ldr	r3, [r7, #12]
   2ecc2:	689a      	ldr	r2, [r3, #8]
   2ecc4:	68fb      	ldr	r3, [r7, #12]
   2ecc6:	68db      	ldr	r3, [r3, #12]
   2ecc8:	429a      	cmp	r2, r3
   2ecca:	d315      	bcc.n	2ecf8 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2eccc:	68fb      	ldr	r3, [r7, #12]
   2ecce:	681b      	ldr	r3, [r3, #0]
   2ecd0:	2100      	movs	r1, #0
   2ecd2:	0018      	movs	r0, r3
   2ecd4:	4b3d      	ldr	r3, [pc, #244]	; (2edcc <f_write+0x340>)
   2ecd6:	4798      	blx	r3
   2ecd8:	1e03      	subs	r3, r0, #0
   2ecda:	d009      	beq.n	2ecf0 <f_write+0x264>
   2ecdc:	68fb      	ldr	r3, [r7, #12]
   2ecde:	799b      	ldrb	r3, [r3, #6]
   2ece0:	2280      	movs	r2, #128	; 0x80
   2ece2:	4252      	negs	r2, r2
   2ece4:	4313      	orrs	r3, r2
   2ece6:	b2da      	uxtb	r2, r3
   2ece8:	68fb      	ldr	r3, [r7, #12]
   2ecea:	719a      	strb	r2, [r3, #6]
   2ecec:	2301      	movs	r3, #1
   2ecee:	e065      	b.n	2edbc <f_write+0x330>
				fp->fs->winsect = sect;
   2ecf0:	68fb      	ldr	r3, [r7, #12]
   2ecf2:	681b      	ldr	r3, [r3, #0]
   2ecf4:	693a      	ldr	r2, [r7, #16]
   2ecf6:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2ecf8:	68fb      	ldr	r3, [r7, #12]
   2ecfa:	693a      	ldr	r2, [r7, #16]
   2ecfc:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2ecfe:	68fb      	ldr	r3, [r7, #12]
   2ed00:	689b      	ldr	r3, [r3, #8]
   2ed02:	05db      	lsls	r3, r3, #23
   2ed04:	0ddb      	lsrs	r3, r3, #23
   2ed06:	2280      	movs	r2, #128	; 0x80
   2ed08:	0092      	lsls	r2, r2, #2
   2ed0a:	1ad3      	subs	r3, r2, r3
   2ed0c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2ed0e:	6a3a      	ldr	r2, [r7, #32]
   2ed10:	687b      	ldr	r3, [r7, #4]
   2ed12:	429a      	cmp	r2, r3
   2ed14:	d901      	bls.n	2ed1a <f_write+0x28e>
   2ed16:	687b      	ldr	r3, [r7, #4]
   2ed18:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2ed1a:	68fb      	ldr	r3, [r7, #12]
   2ed1c:	681a      	ldr	r2, [r3, #0]
   2ed1e:	68fb      	ldr	r3, [r7, #12]
   2ed20:	699b      	ldr	r3, [r3, #24]
   2ed22:	0019      	movs	r1, r3
   2ed24:	0010      	movs	r0, r2
   2ed26:	4b29      	ldr	r3, [pc, #164]	; (2edcc <f_write+0x340>)
   2ed28:	4798      	blx	r3
   2ed2a:	1e03      	subs	r3, r0, #0
   2ed2c:	d009      	beq.n	2ed42 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2ed2e:	68fb      	ldr	r3, [r7, #12]
   2ed30:	799b      	ldrb	r3, [r3, #6]
   2ed32:	2280      	movs	r2, #128	; 0x80
   2ed34:	4252      	negs	r2, r2
   2ed36:	4313      	orrs	r3, r2
   2ed38:	b2da      	uxtb	r2, r3
   2ed3a:	68fb      	ldr	r3, [r7, #12]
   2ed3c:	719a      	strb	r2, [r3, #6]
   2ed3e:	2301      	movs	r3, #1
   2ed40:	e03c      	b.n	2edbc <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2ed42:	68fb      	ldr	r3, [r7, #12]
   2ed44:	681a      	ldr	r2, [r3, #0]
   2ed46:	68fb      	ldr	r3, [r7, #12]
   2ed48:	689b      	ldr	r3, [r3, #8]
   2ed4a:	05db      	lsls	r3, r3, #23
   2ed4c:	0ddb      	lsrs	r3, r3, #23
   2ed4e:	3330      	adds	r3, #48	; 0x30
   2ed50:	18d3      	adds	r3, r2, r3
   2ed52:	6a3a      	ldr	r2, [r7, #32]
   2ed54:	69b9      	ldr	r1, [r7, #24]
   2ed56:	0018      	movs	r0, r3
   2ed58:	4b1f      	ldr	r3, [pc, #124]	; (2edd8 <f_write+0x34c>)
   2ed5a:	4798      	blx	r3
		fp->fs->wflag = 1;
   2ed5c:	68fb      	ldr	r3, [r7, #12]
   2ed5e:	681b      	ldr	r3, [r3, #0]
   2ed60:	2201      	movs	r2, #1
   2ed62:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2ed64:	69ba      	ldr	r2, [r7, #24]
   2ed66:	6a3b      	ldr	r3, [r7, #32]
   2ed68:	18d3      	adds	r3, r2, r3
   2ed6a:	61bb      	str	r3, [r7, #24]
   2ed6c:	68fb      	ldr	r3, [r7, #12]
   2ed6e:	689a      	ldr	r2, [r3, #8]
   2ed70:	6a3b      	ldr	r3, [r7, #32]
   2ed72:	18d2      	adds	r2, r2, r3
   2ed74:	68fb      	ldr	r3, [r7, #12]
   2ed76:	609a      	str	r2, [r3, #8]
   2ed78:	683b      	ldr	r3, [r7, #0]
   2ed7a:	681a      	ldr	r2, [r3, #0]
   2ed7c:	6a3b      	ldr	r3, [r7, #32]
   2ed7e:	18d2      	adds	r2, r2, r3
   2ed80:	683b      	ldr	r3, [r7, #0]
   2ed82:	601a      	str	r2, [r3, #0]
   2ed84:	687a      	ldr	r2, [r7, #4]
   2ed86:	6a3b      	ldr	r3, [r7, #32]
   2ed88:	1ad3      	subs	r3, r2, r3
   2ed8a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2ed8c:	687b      	ldr	r3, [r7, #4]
   2ed8e:	2b00      	cmp	r3, #0
   2ed90:	d000      	beq.n	2ed94 <f_write+0x308>
   2ed92:	e6b7      	b.n	2eb04 <f_write+0x78>
   2ed94:	e000      	b.n	2ed98 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2ed96:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2ed98:	68fb      	ldr	r3, [r7, #12]
   2ed9a:	689a      	ldr	r2, [r3, #8]
   2ed9c:	68fb      	ldr	r3, [r7, #12]
   2ed9e:	68db      	ldr	r3, [r3, #12]
   2eda0:	429a      	cmp	r2, r3
   2eda2:	d903      	bls.n	2edac <f_write+0x320>
   2eda4:	68fb      	ldr	r3, [r7, #12]
   2eda6:	689a      	ldr	r2, [r3, #8]
   2eda8:	68fb      	ldr	r3, [r7, #12]
   2edaa:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2edac:	68fb      	ldr	r3, [r7, #12]
   2edae:	799b      	ldrb	r3, [r3, #6]
   2edb0:	2220      	movs	r2, #32
   2edb2:	4313      	orrs	r3, r2
   2edb4:	b2da      	uxtb	r2, r3
   2edb6:	68fb      	ldr	r3, [r7, #12]
   2edb8:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2edba:	2300      	movs	r3, #0
}
   2edbc:	0018      	movs	r0, r3
   2edbe:	46bd      	mov	sp, r7
   2edc0:	b00b      	add	sp, #44	; 0x2c
   2edc2:	bd90      	pop	{r4, r7, pc}
   2edc4:	0002e4b1 	.word	0x0002e4b1
   2edc8:	0002cb3d 	.word	0x0002cb3d
   2edcc:	0002c435 	.word	0x0002c435
   2edd0:	0002c695 	.word	0x0002c695
   2edd4:	0002c121 	.word	0x0002c121
   2edd8:	0002c351 	.word	0x0002c351

0002eddc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2eddc:	b590      	push	{r4, r7, lr}
   2edde:	b087      	sub	sp, #28
   2ede0:	af00      	add	r7, sp, #0
   2ede2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2ede4:	687b      	ldr	r3, [r7, #4]
   2ede6:	681a      	ldr	r2, [r3, #0]
   2ede8:	687b      	ldr	r3, [r7, #4]
   2edea:	889b      	ldrh	r3, [r3, #4]
   2edec:	2117      	movs	r1, #23
   2edee:	187c      	adds	r4, r7, r1
   2edf0:	0019      	movs	r1, r3
   2edf2:	0010      	movs	r0, r2
   2edf4:	4b55      	ldr	r3, [pc, #340]	; (2ef4c <f_sync+0x170>)
   2edf6:	4798      	blx	r3
   2edf8:	0003      	movs	r3, r0
   2edfa:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2edfc:	2317      	movs	r3, #23
   2edfe:	18fb      	adds	r3, r7, r3
   2ee00:	781b      	ldrb	r3, [r3, #0]
   2ee02:	2b00      	cmp	r3, #0
   2ee04:	d000      	beq.n	2ee08 <f_sync+0x2c>
   2ee06:	e09a      	b.n	2ef3e <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2ee08:	687b      	ldr	r3, [r7, #4]
   2ee0a:	799b      	ldrb	r3, [r3, #6]
   2ee0c:	001a      	movs	r2, r3
   2ee0e:	2320      	movs	r3, #32
   2ee10:	4013      	ands	r3, r2
   2ee12:	d100      	bne.n	2ee16 <f_sync+0x3a>
   2ee14:	e093      	b.n	2ef3e <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2ee16:	687b      	ldr	r3, [r7, #4]
   2ee18:	681a      	ldr	r2, [r3, #0]
   2ee1a:	687b      	ldr	r3, [r7, #4]
   2ee1c:	69db      	ldr	r3, [r3, #28]
   2ee1e:	2117      	movs	r1, #23
   2ee20:	187c      	adds	r4, r7, r1
   2ee22:	0019      	movs	r1, r3
   2ee24:	0010      	movs	r0, r2
   2ee26:	4b4a      	ldr	r3, [pc, #296]	; (2ef50 <f_sync+0x174>)
   2ee28:	4798      	blx	r3
   2ee2a:	0003      	movs	r3, r0
   2ee2c:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2ee2e:	2317      	movs	r3, #23
   2ee30:	18fb      	adds	r3, r7, r3
   2ee32:	781b      	ldrb	r3, [r3, #0]
   2ee34:	2b00      	cmp	r3, #0
   2ee36:	d000      	beq.n	2ee3a <f_sync+0x5e>
   2ee38:	e081      	b.n	2ef3e <f_sync+0x162>
				dir = fp->dir_ptr;
   2ee3a:	687b      	ldr	r3, [r7, #4]
   2ee3c:	6a1b      	ldr	r3, [r3, #32]
   2ee3e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2ee40:	693b      	ldr	r3, [r7, #16]
   2ee42:	330b      	adds	r3, #11
   2ee44:	693a      	ldr	r2, [r7, #16]
   2ee46:	320b      	adds	r2, #11
   2ee48:	7812      	ldrb	r2, [r2, #0]
   2ee4a:	2120      	movs	r1, #32
   2ee4c:	430a      	orrs	r2, r1
   2ee4e:	b2d2      	uxtb	r2, r2
   2ee50:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2ee52:	693b      	ldr	r3, [r7, #16]
   2ee54:	331c      	adds	r3, #28
   2ee56:	001a      	movs	r2, r3
   2ee58:	687b      	ldr	r3, [r7, #4]
   2ee5a:	68db      	ldr	r3, [r3, #12]
   2ee5c:	b2db      	uxtb	r3, r3
   2ee5e:	7013      	strb	r3, [r2, #0]
   2ee60:	693b      	ldr	r3, [r7, #16]
   2ee62:	331d      	adds	r3, #29
   2ee64:	001a      	movs	r2, r3
   2ee66:	687b      	ldr	r3, [r7, #4]
   2ee68:	68db      	ldr	r3, [r3, #12]
   2ee6a:	b29b      	uxth	r3, r3
   2ee6c:	0a1b      	lsrs	r3, r3, #8
   2ee6e:	b29b      	uxth	r3, r3
   2ee70:	b2db      	uxtb	r3, r3
   2ee72:	7013      	strb	r3, [r2, #0]
   2ee74:	693b      	ldr	r3, [r7, #16]
   2ee76:	331e      	adds	r3, #30
   2ee78:	001a      	movs	r2, r3
   2ee7a:	687b      	ldr	r3, [r7, #4]
   2ee7c:	68db      	ldr	r3, [r3, #12]
   2ee7e:	0c1b      	lsrs	r3, r3, #16
   2ee80:	b2db      	uxtb	r3, r3
   2ee82:	7013      	strb	r3, [r2, #0]
   2ee84:	693b      	ldr	r3, [r7, #16]
   2ee86:	331f      	adds	r3, #31
   2ee88:	001a      	movs	r2, r3
   2ee8a:	687b      	ldr	r3, [r7, #4]
   2ee8c:	68db      	ldr	r3, [r3, #12]
   2ee8e:	0e1b      	lsrs	r3, r3, #24
   2ee90:	b2db      	uxtb	r3, r3
   2ee92:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2ee94:	693b      	ldr	r3, [r7, #16]
   2ee96:	331a      	adds	r3, #26
   2ee98:	001a      	movs	r2, r3
   2ee9a:	687b      	ldr	r3, [r7, #4]
   2ee9c:	691b      	ldr	r3, [r3, #16]
   2ee9e:	b2db      	uxtb	r3, r3
   2eea0:	7013      	strb	r3, [r2, #0]
   2eea2:	693b      	ldr	r3, [r7, #16]
   2eea4:	331b      	adds	r3, #27
   2eea6:	001a      	movs	r2, r3
   2eea8:	687b      	ldr	r3, [r7, #4]
   2eeaa:	691b      	ldr	r3, [r3, #16]
   2eeac:	b29b      	uxth	r3, r3
   2eeae:	0a1b      	lsrs	r3, r3, #8
   2eeb0:	b29b      	uxth	r3, r3
   2eeb2:	b2db      	uxtb	r3, r3
   2eeb4:	7013      	strb	r3, [r2, #0]
   2eeb6:	693b      	ldr	r3, [r7, #16]
   2eeb8:	3314      	adds	r3, #20
   2eeba:	001a      	movs	r2, r3
   2eebc:	687b      	ldr	r3, [r7, #4]
   2eebe:	691b      	ldr	r3, [r3, #16]
   2eec0:	0c1b      	lsrs	r3, r3, #16
   2eec2:	b2db      	uxtb	r3, r3
   2eec4:	7013      	strb	r3, [r2, #0]
   2eec6:	693b      	ldr	r3, [r7, #16]
   2eec8:	3315      	adds	r3, #21
   2eeca:	001a      	movs	r2, r3
   2eecc:	687b      	ldr	r3, [r7, #4]
   2eece:	691b      	ldr	r3, [r3, #16]
   2eed0:	0c1b      	lsrs	r3, r3, #16
   2eed2:	b29b      	uxth	r3, r3
   2eed4:	0a1b      	lsrs	r3, r3, #8
   2eed6:	b29b      	uxth	r3, r3
   2eed8:	b2db      	uxtb	r3, r3
   2eeda:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2eedc:	4b1d      	ldr	r3, [pc, #116]	; (2ef54 <f_sync+0x178>)
   2eede:	4798      	blx	r3
   2eee0:	0003      	movs	r3, r0
   2eee2:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2eee4:	693b      	ldr	r3, [r7, #16]
   2eee6:	3316      	adds	r3, #22
   2eee8:	68fa      	ldr	r2, [r7, #12]
   2eeea:	b2d2      	uxtb	r2, r2
   2eeec:	701a      	strb	r2, [r3, #0]
   2eeee:	693b      	ldr	r3, [r7, #16]
   2eef0:	3317      	adds	r3, #23
   2eef2:	68fa      	ldr	r2, [r7, #12]
   2eef4:	b292      	uxth	r2, r2
   2eef6:	0a12      	lsrs	r2, r2, #8
   2eef8:	b292      	uxth	r2, r2
   2eefa:	b2d2      	uxtb	r2, r2
   2eefc:	701a      	strb	r2, [r3, #0]
   2eefe:	693b      	ldr	r3, [r7, #16]
   2ef00:	3318      	adds	r3, #24
   2ef02:	68fa      	ldr	r2, [r7, #12]
   2ef04:	0c12      	lsrs	r2, r2, #16
   2ef06:	b2d2      	uxtb	r2, r2
   2ef08:	701a      	strb	r2, [r3, #0]
   2ef0a:	693b      	ldr	r3, [r7, #16]
   2ef0c:	3319      	adds	r3, #25
   2ef0e:	68fa      	ldr	r2, [r7, #12]
   2ef10:	0e12      	lsrs	r2, r2, #24
   2ef12:	b2d2      	uxtb	r2, r2
   2ef14:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2ef16:	687b      	ldr	r3, [r7, #4]
   2ef18:	799b      	ldrb	r3, [r3, #6]
   2ef1a:	2220      	movs	r2, #32
   2ef1c:	4393      	bics	r3, r2
   2ef1e:	b2da      	uxtb	r2, r3
   2ef20:	687b      	ldr	r3, [r7, #4]
   2ef22:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2ef24:	687b      	ldr	r3, [r7, #4]
   2ef26:	681b      	ldr	r3, [r3, #0]
   2ef28:	2201      	movs	r2, #1
   2ef2a:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2ef2c:	687b      	ldr	r3, [r7, #4]
   2ef2e:	681b      	ldr	r3, [r3, #0]
   2ef30:	2217      	movs	r2, #23
   2ef32:	18bc      	adds	r4, r7, r2
   2ef34:	0018      	movs	r0, r3
   2ef36:	4b08      	ldr	r3, [pc, #32]	; (2ef58 <f_sync+0x17c>)
   2ef38:	4798      	blx	r3
   2ef3a:	0003      	movs	r3, r0
   2ef3c:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2ef3e:	2317      	movs	r3, #23
   2ef40:	18fb      	adds	r3, r7, r3
   2ef42:	781b      	ldrb	r3, [r3, #0]
}
   2ef44:	0018      	movs	r0, r3
   2ef46:	46bd      	mov	sp, r7
   2ef48:	b007      	add	sp, #28
   2ef4a:	bd90      	pop	{r4, r7, pc}
   2ef4c:	0002e4b1 	.word	0x0002e4b1
   2ef50:	0002c435 	.word	0x0002c435
   2ef54:	0002c2f1 	.word	0x0002c2f1
   2ef58:	0002c4fd 	.word	0x0002c4fd

0002ef5c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2ef5c:	b590      	push	{r4, r7, lr}
   2ef5e:	b085      	sub	sp, #20
   2ef60:	af00      	add	r7, sp, #0
   2ef62:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2ef64:	230f      	movs	r3, #15
   2ef66:	18fc      	adds	r4, r7, r3
   2ef68:	687b      	ldr	r3, [r7, #4]
   2ef6a:	0018      	movs	r0, r3
   2ef6c:	4b09      	ldr	r3, [pc, #36]	; (2ef94 <f_close+0x38>)
   2ef6e:	4798      	blx	r3
   2ef70:	0003      	movs	r3, r0
   2ef72:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2ef74:	230f      	movs	r3, #15
   2ef76:	18fb      	adds	r3, r7, r3
   2ef78:	781b      	ldrb	r3, [r3, #0]
   2ef7a:	2b00      	cmp	r3, #0
   2ef7c:	d102      	bne.n	2ef84 <f_close+0x28>
   2ef7e:	687b      	ldr	r3, [r7, #4]
   2ef80:	2200      	movs	r2, #0
   2ef82:	601a      	str	r2, [r3, #0]
	return res;
   2ef84:	230f      	movs	r3, #15
   2ef86:	18fb      	adds	r3, r7, r3
   2ef88:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2ef8a:	0018      	movs	r0, r3
   2ef8c:	46bd      	mov	sp, r7
   2ef8e:	b005      	add	sp, #20
   2ef90:	bd90      	pop	{r4, r7, pc}
   2ef92:	46c0      	nop			; (mov r8, r8)
   2ef94:	0002eddd 	.word	0x0002eddd

0002ef98 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2ef98:	b580      	push	{r7, lr}
   2ef9a:	b084      	sub	sp, #16
   2ef9c:	af00      	add	r7, sp, #0
   2ef9e:	0002      	movs	r2, r0
   2efa0:	6039      	str	r1, [r7, #0]
   2efa2:	1dbb      	adds	r3, r7, #6
   2efa4:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2efa6:	1dbb      	adds	r3, r7, #6
   2efa8:	881b      	ldrh	r3, [r3, #0]
   2efaa:	2b7f      	cmp	r3, #127	; 0x7f
   2efac:	d805      	bhi.n	2efba <ff_convert+0x22>
		c = src;
   2efae:	230e      	movs	r3, #14
   2efb0:	18fb      	adds	r3, r7, r3
   2efb2:	1dba      	adds	r2, r7, #6
   2efb4:	8812      	ldrh	r2, [r2, #0]
   2efb6:	801a      	strh	r2, [r3, #0]
   2efb8:	e03a      	b.n	2f030 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2efba:	683b      	ldr	r3, [r7, #0]
   2efbc:	2b00      	cmp	r3, #0
   2efbe:	d010      	beq.n	2efe2 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2efc0:	1dbb      	adds	r3, r7, #6
   2efc2:	881b      	ldrh	r3, [r3, #0]
   2efc4:	2bff      	cmp	r3, #255	; 0xff
   2efc6:	d807      	bhi.n	2efd8 <ff_convert+0x40>
   2efc8:	1dbb      	adds	r3, r7, #6
   2efca:	881b      	ldrh	r3, [r3, #0]
   2efcc:	3b80      	subs	r3, #128	; 0x80
   2efce:	001a      	movs	r2, r3
   2efd0:	4b1b      	ldr	r3, [pc, #108]	; (2f040 <ff_convert+0xa8>)
   2efd2:	0052      	lsls	r2, r2, #1
   2efd4:	5ad2      	ldrh	r2, [r2, r3]
   2efd6:	e000      	b.n	2efda <ff_convert+0x42>
   2efd8:	2200      	movs	r2, #0
   2efda:	230e      	movs	r3, #14
   2efdc:	18fb      	adds	r3, r7, r3
   2efde:	801a      	strh	r2, [r3, #0]
   2efe0:	e026      	b.n	2f030 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2efe2:	230e      	movs	r3, #14
   2efe4:	18fb      	adds	r3, r7, r3
   2efe6:	2200      	movs	r2, #0
   2efe8:	801a      	strh	r2, [r3, #0]
   2efea:	e010      	b.n	2f00e <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2efec:	230e      	movs	r3, #14
   2efee:	18fb      	adds	r3, r7, r3
   2eff0:	881a      	ldrh	r2, [r3, #0]
   2eff2:	4b13      	ldr	r3, [pc, #76]	; (2f040 <ff_convert+0xa8>)
   2eff4:	0052      	lsls	r2, r2, #1
   2eff6:	5ad3      	ldrh	r3, [r2, r3]
   2eff8:	1dba      	adds	r2, r7, #6
   2effa:	8812      	ldrh	r2, [r2, #0]
   2effc:	429a      	cmp	r2, r3
   2effe:	d00c      	beq.n	2f01a <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2f000:	230e      	movs	r3, #14
   2f002:	18fb      	adds	r3, r7, r3
   2f004:	881a      	ldrh	r2, [r3, #0]
   2f006:	230e      	movs	r3, #14
   2f008:	18fb      	adds	r3, r7, r3
   2f00a:	3201      	adds	r2, #1
   2f00c:	801a      	strh	r2, [r3, #0]
   2f00e:	230e      	movs	r3, #14
   2f010:	18fb      	adds	r3, r7, r3
   2f012:	881b      	ldrh	r3, [r3, #0]
   2f014:	2b7f      	cmp	r3, #127	; 0x7f
   2f016:	d9e9      	bls.n	2efec <ff_convert+0x54>
   2f018:	e000      	b.n	2f01c <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2f01a:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2f01c:	230e      	movs	r3, #14
   2f01e:	18fb      	adds	r3, r7, r3
   2f020:	881b      	ldrh	r3, [r3, #0]
   2f022:	3380      	adds	r3, #128	; 0x80
   2f024:	b29a      	uxth	r2, r3
   2f026:	230e      	movs	r3, #14
   2f028:	18fb      	adds	r3, r7, r3
   2f02a:	21ff      	movs	r1, #255	; 0xff
   2f02c:	400a      	ands	r2, r1
   2f02e:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2f030:	230e      	movs	r3, #14
   2f032:	18fb      	adds	r3, r7, r3
   2f034:	881b      	ldrh	r3, [r3, #0]
}
   2f036:	0018      	movs	r0, r3
   2f038:	46bd      	mov	sp, r7
   2f03a:	b004      	add	sp, #16
   2f03c:	bd80      	pop	{r7, pc}
   2f03e:	46c0      	nop			; (mov r8, r8)
   2f040:	0003a638 	.word	0x0003a638

0002f044 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2f044:	b580      	push	{r7, lr}
   2f046:	b084      	sub	sp, #16
   2f048:	af00      	add	r7, sp, #0
   2f04a:	0002      	movs	r2, r0
   2f04c:	1dbb      	adds	r3, r7, #6
   2f04e:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2f050:	2300      	movs	r3, #0
   2f052:	60fb      	str	r3, [r7, #12]
   2f054:	e002      	b.n	2f05c <ff_wtoupper+0x18>
   2f056:	68fb      	ldr	r3, [r7, #12]
   2f058:	3301      	adds	r3, #1
   2f05a:	60fb      	str	r3, [r7, #12]
   2f05c:	4b0f      	ldr	r3, [pc, #60]	; (2f09c <ff_wtoupper+0x58>)
   2f05e:	68fa      	ldr	r2, [r7, #12]
   2f060:	0052      	lsls	r2, r2, #1
   2f062:	5ad3      	ldrh	r3, [r2, r3]
   2f064:	2b00      	cmp	r3, #0
   2f066:	d007      	beq.n	2f078 <ff_wtoupper+0x34>
   2f068:	4b0c      	ldr	r3, [pc, #48]	; (2f09c <ff_wtoupper+0x58>)
   2f06a:	68fa      	ldr	r2, [r7, #12]
   2f06c:	0052      	lsls	r2, r2, #1
   2f06e:	5ad3      	ldrh	r3, [r2, r3]
   2f070:	1dba      	adds	r2, r7, #6
   2f072:	8812      	ldrh	r2, [r2, #0]
   2f074:	429a      	cmp	r2, r3
   2f076:	d1ee      	bne.n	2f056 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2f078:	4b08      	ldr	r3, [pc, #32]	; (2f09c <ff_wtoupper+0x58>)
   2f07a:	68fa      	ldr	r2, [r7, #12]
   2f07c:	0052      	lsls	r2, r2, #1
   2f07e:	5ad3      	ldrh	r3, [r2, r3]
   2f080:	2b00      	cmp	r3, #0
   2f082:	d004      	beq.n	2f08e <ff_wtoupper+0x4a>
   2f084:	4b06      	ldr	r3, [pc, #24]	; (2f0a0 <ff_wtoupper+0x5c>)
   2f086:	68fa      	ldr	r2, [r7, #12]
   2f088:	0052      	lsls	r2, r2, #1
   2f08a:	5ad3      	ldrh	r3, [r2, r3]
   2f08c:	e001      	b.n	2f092 <ff_wtoupper+0x4e>
   2f08e:	1dbb      	adds	r3, r7, #6
   2f090:	881b      	ldrh	r3, [r3, #0]
}
   2f092:	0018      	movs	r0, r3
   2f094:	46bd      	mov	sp, r7
   2f096:	b004      	add	sp, #16
   2f098:	bd80      	pop	{r7, pc}
   2f09a:	46c0      	nop			; (mov r8, r8)
   2f09c:	0003a738 	.word	0x0003a738
   2f0a0:	0003a918 	.word	0x0003a918

0002f0a4 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2f0a4:	b580      	push	{r7, lr}
   2f0a6:	b084      	sub	sp, #16
   2f0a8:	af00      	add	r7, sp, #0
   2f0aa:	60f8      	str	r0, [r7, #12]
   2f0ac:	60b9      	str	r1, [r7, #8]
   2f0ae:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2f0b0:	68fb      	ldr	r3, [r7, #12]
   2f0b2:	68ba      	ldr	r2, [r7, #8]
   2f0b4:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2f0b6:	68fb      	ldr	r3, [r7, #12]
   2f0b8:	687a      	ldr	r2, [r7, #4]
   2f0ba:	601a      	str	r2, [r3, #0]
}
   2f0bc:	46c0      	nop			; (mov r8, r8)
   2f0be:	46bd      	mov	sp, r7
   2f0c0:	b004      	add	sp, #16
   2f0c2:	bd80      	pop	{r7, pc}

0002f0c4 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2f0c4:	b580      	push	{r7, lr}
   2f0c6:	b082      	sub	sp, #8
   2f0c8:	af00      	add	r7, sp, #0
   2f0ca:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2f0cc:	687b      	ldr	r3, [r7, #4]
   2f0ce:	681b      	ldr	r3, [r3, #0]
   2f0d0:	4a07      	ldr	r2, [pc, #28]	; (2f0f0 <getNextPacketId+0x2c>)
   2f0d2:	4293      	cmp	r3, r2
   2f0d4:	d003      	beq.n	2f0de <getNextPacketId+0x1a>
   2f0d6:	687b      	ldr	r3, [r7, #4]
   2f0d8:	681b      	ldr	r3, [r3, #0]
   2f0da:	1c5a      	adds	r2, r3, #1
   2f0dc:	e000      	b.n	2f0e0 <getNextPacketId+0x1c>
   2f0de:	2201      	movs	r2, #1
   2f0e0:	687b      	ldr	r3, [r7, #4]
   2f0e2:	601a      	str	r2, [r3, #0]
   2f0e4:	687b      	ldr	r3, [r7, #4]
   2f0e6:	681b      	ldr	r3, [r3, #0]
}
   2f0e8:	0018      	movs	r0, r3
   2f0ea:	46bd      	mov	sp, r7
   2f0ec:	b002      	add	sp, #8
   2f0ee:	bd80      	pop	{r7, pc}
   2f0f0:	0000ffff 	.word	0x0000ffff

0002f0f4 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2f0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f0f6:	b087      	sub	sp, #28
   2f0f8:	af00      	add	r7, sp, #0
   2f0fa:	60f8      	str	r0, [r7, #12]
   2f0fc:	60b9      	str	r1, [r7, #8]
   2f0fe:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2f100:	2301      	movs	r3, #1
   2f102:	425b      	negs	r3, r3
   2f104:	617b      	str	r3, [r7, #20]
        sent = 0;
   2f106:	2300      	movs	r3, #0
   2f108:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2f10a:	e01a      	b.n	2f142 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2f10c:	68fb      	ldr	r3, [r7, #12]
   2f10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f110:	68dc      	ldr	r4, [r3, #12]
   2f112:	68fb      	ldr	r3, [r7, #12]
   2f114:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f116:	68fb      	ldr	r3, [r7, #12]
   2f118:	691a      	ldr	r2, [r3, #16]
   2f11a:	693b      	ldr	r3, [r7, #16]
   2f11c:	18d6      	adds	r6, r2, r3
   2f11e:	687b      	ldr	r3, [r7, #4]
   2f120:	0018      	movs	r0, r3
   2f122:	4b1a      	ldr	r3, [pc, #104]	; (2f18c <sendPacket+0x98>)
   2f124:	4798      	blx	r3
   2f126:	0003      	movs	r3, r0
   2f128:	68ba      	ldr	r2, [r7, #8]
   2f12a:	0031      	movs	r1, r6
   2f12c:	0028      	movs	r0, r5
   2f12e:	47a0      	blx	r4
   2f130:	0003      	movs	r3, r0
   2f132:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2f134:	697b      	ldr	r3, [r7, #20]
   2f136:	2b00      	cmp	r3, #0
   2f138:	db0e      	blt.n	2f158 <sendPacket+0x64>
            break;
        sent += rc;
   2f13a:	693a      	ldr	r2, [r7, #16]
   2f13c:	697b      	ldr	r3, [r7, #20]
   2f13e:	18d3      	adds	r3, r2, r3
   2f140:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2f142:	693a      	ldr	r2, [r7, #16]
   2f144:	68bb      	ldr	r3, [r7, #8]
   2f146:	429a      	cmp	r2, r3
   2f148:	da07      	bge.n	2f15a <sendPacket+0x66>
   2f14a:	687b      	ldr	r3, [r7, #4]
   2f14c:	0018      	movs	r0, r3
   2f14e:	4b10      	ldr	r3, [pc, #64]	; (2f190 <sendPacket+0x9c>)
   2f150:	4798      	blx	r3
   2f152:	1e03      	subs	r3, r0, #0
   2f154:	d0da      	beq.n	2f10c <sendPacket+0x18>
   2f156:	e000      	b.n	2f15a <sendPacket+0x66>
            break;
   2f158:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2f15a:	693a      	ldr	r2, [r7, #16]
   2f15c:	68bb      	ldr	r3, [r7, #8]
   2f15e:	429a      	cmp	r2, r3
   2f160:	d10b      	bne.n	2f17a <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2f162:	68fb      	ldr	r3, [r7, #12]
   2f164:	3354      	adds	r3, #84	; 0x54
   2f166:	001a      	movs	r2, r3
   2f168:	68fb      	ldr	r3, [r7, #12]
   2f16a:	699b      	ldr	r3, [r3, #24]
   2f16c:	0019      	movs	r1, r3
   2f16e:	0010      	movs	r0, r2
   2f170:	4b08      	ldr	r3, [pc, #32]	; (2f194 <sendPacket+0xa0>)
   2f172:	4798      	blx	r3
        rc = SUCCESS;
   2f174:	2300      	movs	r3, #0
   2f176:	617b      	str	r3, [r7, #20]
   2f178:	e002      	b.n	2f180 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2f17a:	2301      	movs	r3, #1
   2f17c:	425b      	negs	r3, r3
   2f17e:	617b      	str	r3, [r7, #20]
    return rc;
   2f180:	697b      	ldr	r3, [r7, #20]
}
   2f182:	0018      	movs	r0, r3
   2f184:	46bd      	mov	sp, r7
   2f186:	b007      	add	sp, #28
   2f188:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f18a:	46c0      	nop			; (mov r8, r8)
   2f18c:	0002ff55 	.word	0x0002ff55
   2f190:	0002fed9 	.word	0x0002fed9
   2f194:	0002ff2d 	.word	0x0002ff2d

0002f198 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2f198:	b580      	push	{r7, lr}
   2f19a:	b086      	sub	sp, #24
   2f19c:	af00      	add	r7, sp, #0
   2f19e:	60f8      	str	r0, [r7, #12]
   2f1a0:	60b9      	str	r1, [r7, #8]
   2f1a2:	607a      	str	r2, [r7, #4]
   2f1a4:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2f1a6:	68fb      	ldr	r3, [r7, #12]
   2f1a8:	68ba      	ldr	r2, [r7, #8]
   2f1aa:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f1ac:	2300      	movs	r3, #0
   2f1ae:	617b      	str	r3, [r7, #20]
   2f1b0:	e00a      	b.n	2f1c8 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2f1b2:	68fa      	ldr	r2, [r7, #12]
   2f1b4:	697b      	ldr	r3, [r7, #20]
   2f1b6:	3304      	adds	r3, #4
   2f1b8:	00db      	lsls	r3, r3, #3
   2f1ba:	18d3      	adds	r3, r2, r3
   2f1bc:	3304      	adds	r3, #4
   2f1be:	2200      	movs	r2, #0
   2f1c0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f1c2:	697b      	ldr	r3, [r7, #20]
   2f1c4:	3301      	adds	r3, #1
   2f1c6:	617b      	str	r3, [r7, #20]
   2f1c8:	697b      	ldr	r3, [r7, #20]
   2f1ca:	2b04      	cmp	r3, #4
   2f1cc:	ddf1      	ble.n	2f1b2 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2f1ce:	68fb      	ldr	r3, [r7, #12]
   2f1d0:	687a      	ldr	r2, [r7, #4]
   2f1d2:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2f1d4:	68fb      	ldr	r3, [r7, #12]
   2f1d6:	683a      	ldr	r2, [r7, #0]
   2f1d8:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2f1da:	68fb      	ldr	r3, [r7, #12]
   2f1dc:	6a3a      	ldr	r2, [r7, #32]
   2f1de:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2f1e0:	68fb      	ldr	r3, [r7, #12]
   2f1e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f1e4:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2f1e6:	68fb      	ldr	r3, [r7, #12]
   2f1e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f1ea:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2f1ec:	68fb      	ldr	r3, [r7, #12]
   2f1ee:	2200      	movs	r2, #0
   2f1f0:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2f1f2:	68fb      	ldr	r3, [r7, #12]
   2f1f4:	2200      	movs	r2, #0
   2f1f6:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2f1f8:	68fb      	ldr	r3, [r7, #12]
   2f1fa:	2200      	movs	r2, #0
   2f1fc:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2f1fe:	68fb      	ldr	r3, [r7, #12]
   2f200:	2201      	movs	r2, #1
   2f202:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2f204:	68fb      	ldr	r3, [r7, #12]
   2f206:	3354      	adds	r3, #84	; 0x54
   2f208:	0018      	movs	r0, r3
   2f20a:	4b03      	ldr	r3, [pc, #12]	; (2f218 <MQTTClientInit+0x80>)
   2f20c:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2f20e:	46c0      	nop			; (mov r8, r8)
   2f210:	46bd      	mov	sp, r7
   2f212:	b006      	add	sp, #24
   2f214:	bd80      	pop	{r7, pc}
   2f216:	46c0      	nop			; (mov r8, r8)
   2f218:	0002ff7d 	.word	0x0002ff7d

0002f21c <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2f21c:	b590      	push	{r4, r7, lr}
   2f21e:	b08b      	sub	sp, #44	; 0x2c
   2f220:	af00      	add	r7, sp, #0
   2f222:	60f8      	str	r0, [r7, #12]
   2f224:	60b9      	str	r1, [r7, #8]
   2f226:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2f228:	2301      	movs	r3, #1
   2f22a:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2f22c:	2300      	movs	r3, #0
   2f22e:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2f230:	2304      	movs	r3, #4
   2f232:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2f234:	68bb      	ldr	r3, [r7, #8]
   2f236:	2200      	movs	r2, #0
   2f238:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2f23a:	2301      	movs	r3, #1
   2f23c:	425b      	negs	r3, r3
   2f23e:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2f240:	6a3b      	ldr	r3, [r7, #32]
   2f242:	3301      	adds	r3, #1
   2f244:	623b      	str	r3, [r7, #32]
   2f246:	6a3a      	ldr	r2, [r7, #32]
   2f248:	69fb      	ldr	r3, [r7, #28]
   2f24a:	429a      	cmp	r2, r3
   2f24c:	dd03      	ble.n	2f256 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2f24e:	2301      	movs	r3, #1
   2f250:	425b      	negs	r3, r3
   2f252:	61bb      	str	r3, [r7, #24]
            goto exit;
   2f254:	e026      	b.n	2f2a4 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2f256:	68fb      	ldr	r3, [r7, #12]
   2f258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f25a:	689c      	ldr	r4, [r3, #8]
   2f25c:	68fb      	ldr	r3, [r7, #12]
   2f25e:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2f260:	687b      	ldr	r3, [r7, #4]
   2f262:	2217      	movs	r2, #23
   2f264:	18b9      	adds	r1, r7, r2
   2f266:	2201      	movs	r2, #1
   2f268:	47a0      	blx	r4
   2f26a:	0003      	movs	r3, r0
   2f26c:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2f26e:	69bb      	ldr	r3, [r7, #24]
   2f270:	2b01      	cmp	r3, #1
   2f272:	d116      	bne.n	2f2a2 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2f274:	68bb      	ldr	r3, [r7, #8]
   2f276:	681a      	ldr	r2, [r3, #0]
   2f278:	2317      	movs	r3, #23
   2f27a:	18fb      	adds	r3, r7, r3
   2f27c:	781b      	ldrb	r3, [r3, #0]
   2f27e:	0019      	movs	r1, r3
   2f280:	237f      	movs	r3, #127	; 0x7f
   2f282:	400b      	ands	r3, r1
   2f284:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2f286:	434b      	muls	r3, r1
   2f288:	18d2      	adds	r2, r2, r3
   2f28a:	68bb      	ldr	r3, [r7, #8]
   2f28c:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2f28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f290:	01db      	lsls	r3, r3, #7
   2f292:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2f294:	2317      	movs	r3, #23
   2f296:	18fb      	adds	r3, r7, r3
   2f298:	781b      	ldrb	r3, [r3, #0]
   2f29a:	b25b      	sxtb	r3, r3
   2f29c:	2b00      	cmp	r3, #0
   2f29e:	dbcc      	blt.n	2f23a <decodePacket+0x1e>
   2f2a0:	e000      	b.n	2f2a4 <decodePacket+0x88>
            goto exit;
   2f2a2:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2f2a4:	6a3b      	ldr	r3, [r7, #32]
}
   2f2a6:	0018      	movs	r0, r3
   2f2a8:	46bd      	mov	sp, r7
   2f2aa:	b00b      	add	sp, #44	; 0x2c
   2f2ac:	bd90      	pop	{r4, r7, pc}
	...

0002f2b0 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2f2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f2b2:	46c6      	mov	lr, r8
   2f2b4:	b500      	push	{lr}
   2f2b6:	b086      	sub	sp, #24
   2f2b8:	af00      	add	r7, sp, #0
   2f2ba:	6078      	str	r0, [r7, #4]
   2f2bc:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2f2be:	2301      	movs	r3, #1
   2f2c0:	425b      	negs	r3, r3
   2f2c2:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2f2c4:	2300      	movs	r3, #0
   2f2c6:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2f2c8:	2300      	movs	r3, #0
   2f2ca:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2f2cc:	2300      	movs	r3, #0
   2f2ce:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2f2d0:	687b      	ldr	r3, [r7, #4]
   2f2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f2d4:	689c      	ldr	r4, [r3, #8]
   2f2d6:	687b      	ldr	r3, [r7, #4]
   2f2d8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f2da:	687b      	ldr	r3, [r7, #4]
   2f2dc:	695e      	ldr	r6, [r3, #20]
   2f2de:	683b      	ldr	r3, [r7, #0]
   2f2e0:	0018      	movs	r0, r3
   2f2e2:	4b2b      	ldr	r3, [pc, #172]	; (2f390 <readPacket+0xe0>)
   2f2e4:	4798      	blx	r3
   2f2e6:	0003      	movs	r3, r0
   2f2e8:	2201      	movs	r2, #1
   2f2ea:	0031      	movs	r1, r6
   2f2ec:	0028      	movs	r0, r5
   2f2ee:	47a0      	blx	r4
   2f2f0:	0003      	movs	r3, r0
   2f2f2:	2b01      	cmp	r3, #1
   2f2f4:	d141      	bne.n	2f37a <readPacket+0xca>
        goto exit;

    len = 1;
   2f2f6:	2301      	movs	r3, #1
   2f2f8:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2f2fa:	683b      	ldr	r3, [r7, #0]
   2f2fc:	0018      	movs	r0, r3
   2f2fe:	4b24      	ldr	r3, [pc, #144]	; (2f390 <readPacket+0xe0>)
   2f300:	4798      	blx	r3
   2f302:	0002      	movs	r2, r0
   2f304:	2308      	movs	r3, #8
   2f306:	18f9      	adds	r1, r7, r3
   2f308:	687b      	ldr	r3, [r7, #4]
   2f30a:	0018      	movs	r0, r3
   2f30c:	4b21      	ldr	r3, [pc, #132]	; (2f394 <readPacket+0xe4>)
   2f30e:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2f310:	687b      	ldr	r3, [r7, #4]
   2f312:	695b      	ldr	r3, [r3, #20]
   2f314:	3301      	adds	r3, #1
   2f316:	68ba      	ldr	r2, [r7, #8]
   2f318:	0011      	movs	r1, r2
   2f31a:	0018      	movs	r0, r3
   2f31c:	4b1e      	ldr	r3, [pc, #120]	; (2f398 <readPacket+0xe8>)
   2f31e:	4798      	blx	r3
   2f320:	0002      	movs	r2, r0
   2f322:	693b      	ldr	r3, [r7, #16]
   2f324:	189b      	adds	r3, r3, r2
   2f326:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2f328:	68bb      	ldr	r3, [r7, #8]
   2f32a:	2b00      	cmp	r3, #0
   2f32c:	dd17      	ble.n	2f35e <readPacket+0xae>
   2f32e:	687b      	ldr	r3, [r7, #4]
   2f330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f332:	689c      	ldr	r4, [r3, #8]
   2f334:	687b      	ldr	r3, [r7, #4]
   2f336:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f338:	687b      	ldr	r3, [r7, #4]
   2f33a:	695a      	ldr	r2, [r3, #20]
   2f33c:	693b      	ldr	r3, [r7, #16]
   2f33e:	18d6      	adds	r6, r2, r3
   2f340:	68bb      	ldr	r3, [r7, #8]
   2f342:	4698      	mov	r8, r3
   2f344:	683b      	ldr	r3, [r7, #0]
   2f346:	0018      	movs	r0, r3
   2f348:	4b11      	ldr	r3, [pc, #68]	; (2f390 <readPacket+0xe0>)
   2f34a:	4798      	blx	r3
   2f34c:	0003      	movs	r3, r0
   2f34e:	4642      	mov	r2, r8
   2f350:	0031      	movs	r1, r6
   2f352:	0028      	movs	r0, r5
   2f354:	47a0      	blx	r4
   2f356:	0002      	movs	r2, r0
   2f358:	68bb      	ldr	r3, [r7, #8]
   2f35a:	429a      	cmp	r2, r3
   2f35c:	d10f      	bne.n	2f37e <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2f35e:	687b      	ldr	r3, [r7, #4]
   2f360:	695b      	ldr	r3, [r3, #20]
   2f362:	781a      	ldrb	r2, [r3, #0]
   2f364:	230c      	movs	r3, #12
   2f366:	18fb      	adds	r3, r7, r3
   2f368:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2f36a:	230c      	movs	r3, #12
   2f36c:	18fb      	adds	r3, r7, r3
   2f36e:	781b      	ldrb	r3, [r3, #0]
   2f370:	061b      	lsls	r3, r3, #24
   2f372:	0f1b      	lsrs	r3, r3, #28
   2f374:	b2db      	uxtb	r3, r3
   2f376:	617b      	str	r3, [r7, #20]
   2f378:	e002      	b.n	2f380 <readPacket+0xd0>
        goto exit;
   2f37a:	46c0      	nop			; (mov r8, r8)
   2f37c:	e000      	b.n	2f380 <readPacket+0xd0>
        goto exit;
   2f37e:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2f380:	697b      	ldr	r3, [r7, #20]
}
   2f382:	0018      	movs	r0, r3
   2f384:	46bd      	mov	sp, r7
   2f386:	b006      	add	sp, #24
   2f388:	bc04      	pop	{r2}
   2f38a:	4690      	mov	r8, r2
   2f38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f38e:	46c0      	nop			; (mov r8, r8)
   2f390:	0002ff55 	.word	0x0002ff55
   2f394:	0002f21d 	.word	0x0002f21d
   2f398:	00030d2d 	.word	0x00030d2d

0002f39c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2f39c:	b580      	push	{r7, lr}
   2f39e:	b086      	sub	sp, #24
   2f3a0:	af00      	add	r7, sp, #0
   2f3a2:	6078      	str	r0, [r7, #4]
   2f3a4:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2f3a6:	687b      	ldr	r3, [r7, #4]
   2f3a8:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2f3aa:	683b      	ldr	r3, [r7, #0]
   2f3ac:	689b      	ldr	r3, [r3, #8]
   2f3ae:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2f3b0:	683b      	ldr	r3, [r7, #0]
   2f3b2:	685b      	ldr	r3, [r3, #4]
   2f3b4:	001a      	movs	r2, r3
   2f3b6:	693b      	ldr	r3, [r7, #16]
   2f3b8:	189b      	adds	r3, r3, r2
   2f3ba:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2f3bc:	e039      	b.n	2f432 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2f3be:	693b      	ldr	r3, [r7, #16]
   2f3c0:	781b      	ldrb	r3, [r3, #0]
   2f3c2:	2b2f      	cmp	r3, #47	; 0x2f
   2f3c4:	d103      	bne.n	2f3ce <isTopicMatched+0x32>
   2f3c6:	697b      	ldr	r3, [r7, #20]
   2f3c8:	781b      	ldrb	r3, [r3, #0]
   2f3ca:	2b2f      	cmp	r3, #47	; 0x2f
   2f3cc:	d13a      	bne.n	2f444 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2f3ce:	697b      	ldr	r3, [r7, #20]
   2f3d0:	781b      	ldrb	r3, [r3, #0]
   2f3d2:	2b2b      	cmp	r3, #43	; 0x2b
   2f3d4:	d009      	beq.n	2f3ea <isTopicMatched+0x4e>
   2f3d6:	697b      	ldr	r3, [r7, #20]
   2f3d8:	781b      	ldrb	r3, [r3, #0]
   2f3da:	2b23      	cmp	r3, #35	; 0x23
   2f3dc:	d005      	beq.n	2f3ea <isTopicMatched+0x4e>
   2f3de:	697b      	ldr	r3, [r7, #20]
   2f3e0:	781a      	ldrb	r2, [r3, #0]
   2f3e2:	693b      	ldr	r3, [r7, #16]
   2f3e4:	781b      	ldrb	r3, [r3, #0]
   2f3e6:	429a      	cmp	r2, r3
   2f3e8:	d12e      	bne.n	2f448 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2f3ea:	697b      	ldr	r3, [r7, #20]
   2f3ec:	781b      	ldrb	r3, [r3, #0]
   2f3ee:	2b2b      	cmp	r3, #43	; 0x2b
   2f3f0:	d112      	bne.n	2f418 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2f3f2:	693b      	ldr	r3, [r7, #16]
   2f3f4:	3301      	adds	r3, #1
   2f3f6:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f3f8:	e005      	b.n	2f406 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2f3fa:	693b      	ldr	r3, [r7, #16]
   2f3fc:	3301      	adds	r3, #1
   2f3fe:	613b      	str	r3, [r7, #16]
   2f400:	693b      	ldr	r3, [r7, #16]
   2f402:	3301      	adds	r3, #1
   2f404:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f406:	68fa      	ldr	r2, [r7, #12]
   2f408:	68bb      	ldr	r3, [r7, #8]
   2f40a:	429a      	cmp	r2, r3
   2f40c:	d20b      	bcs.n	2f426 <isTopicMatched+0x8a>
   2f40e:	68fb      	ldr	r3, [r7, #12]
   2f410:	781b      	ldrb	r3, [r3, #0]
   2f412:	2b2f      	cmp	r3, #47	; 0x2f
   2f414:	d1f1      	bne.n	2f3fa <isTopicMatched+0x5e>
   2f416:	e006      	b.n	2f426 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2f418:	697b      	ldr	r3, [r7, #20]
   2f41a:	781b      	ldrb	r3, [r3, #0]
   2f41c:	2b23      	cmp	r3, #35	; 0x23
   2f41e:	d102      	bne.n	2f426 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2f420:	68bb      	ldr	r3, [r7, #8]
   2f422:	3b01      	subs	r3, #1
   2f424:	613b      	str	r3, [r7, #16]
        curf++;
   2f426:	697b      	ldr	r3, [r7, #20]
   2f428:	3301      	adds	r3, #1
   2f42a:	617b      	str	r3, [r7, #20]
        curn++;
   2f42c:	693b      	ldr	r3, [r7, #16]
   2f42e:	3301      	adds	r3, #1
   2f430:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2f432:	697b      	ldr	r3, [r7, #20]
   2f434:	781b      	ldrb	r3, [r3, #0]
   2f436:	2b00      	cmp	r3, #0
   2f438:	d007      	beq.n	2f44a <isTopicMatched+0xae>
   2f43a:	693a      	ldr	r2, [r7, #16]
   2f43c:	68bb      	ldr	r3, [r7, #8]
   2f43e:	429a      	cmp	r2, r3
   2f440:	d3bd      	bcc.n	2f3be <isTopicMatched+0x22>
   2f442:	e002      	b.n	2f44a <isTopicMatched+0xae>
            break;
   2f444:	46c0      	nop			; (mov r8, r8)
   2f446:	e000      	b.n	2f44a <isTopicMatched+0xae>
            break;
   2f448:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2f44a:	693a      	ldr	r2, [r7, #16]
   2f44c:	68bb      	ldr	r3, [r7, #8]
   2f44e:	429a      	cmp	r2, r3
   2f450:	d105      	bne.n	2f45e <isTopicMatched+0xc2>
   2f452:	697b      	ldr	r3, [r7, #20]
   2f454:	781b      	ldrb	r3, [r3, #0]
   2f456:	2b00      	cmp	r3, #0
   2f458:	d101      	bne.n	2f45e <isTopicMatched+0xc2>
   2f45a:	2301      	movs	r3, #1
   2f45c:	e000      	b.n	2f460 <isTopicMatched+0xc4>
   2f45e:	2300      	movs	r3, #0
   2f460:	b2db      	uxtb	r3, r3
}
   2f462:	0018      	movs	r0, r3
   2f464:	46bd      	mov	sp, r7
   2f466:	b006      	add	sp, #24
   2f468:	bd80      	pop	{r7, pc}
	...

0002f46c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2f46c:	b580      	push	{r7, lr}
   2f46e:	b08a      	sub	sp, #40	; 0x28
   2f470:	af00      	add	r7, sp, #0
   2f472:	60f8      	str	r0, [r7, #12]
   2f474:	60b9      	str	r1, [r7, #8]
   2f476:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2f478:	2301      	movs	r3, #1
   2f47a:	425b      	negs	r3, r3
   2f47c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f47e:	2300      	movs	r3, #0
   2f480:	627b      	str	r3, [r7, #36]	; 0x24
   2f482:	e044      	b.n	2f50e <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f484:	68fa      	ldr	r2, [r7, #12]
   2f486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f488:	3304      	adds	r3, #4
   2f48a:	00db      	lsls	r3, r3, #3
   2f48c:	18d3      	adds	r3, r2, r3
   2f48e:	3304      	adds	r3, #4
   2f490:	681b      	ldr	r3, [r3, #0]
   2f492:	2b00      	cmp	r3, #0
   2f494:	d038      	beq.n	2f508 <deliverMessage+0x9c>
   2f496:	68fa      	ldr	r2, [r7, #12]
   2f498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f49a:	3304      	adds	r3, #4
   2f49c:	00db      	lsls	r3, r3, #3
   2f49e:	18d3      	adds	r3, r2, r3
   2f4a0:	3304      	adds	r3, #4
   2f4a2:	681a      	ldr	r2, [r3, #0]
   2f4a4:	68bb      	ldr	r3, [r7, #8]
   2f4a6:	0011      	movs	r1, r2
   2f4a8:	0018      	movs	r0, r3
   2f4aa:	4b28      	ldr	r3, [pc, #160]	; (2f54c <deliverMessage+0xe0>)
   2f4ac:	4798      	blx	r3
   2f4ae:	1e03      	subs	r3, r0, #0
   2f4b0:	d10d      	bne.n	2f4ce <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2f4b2:	68fa      	ldr	r2, [r7, #12]
   2f4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f4b6:	3304      	adds	r3, #4
   2f4b8:	00db      	lsls	r3, r3, #3
   2f4ba:	18d3      	adds	r3, r2, r3
   2f4bc:	3304      	adds	r3, #4
   2f4be:	681b      	ldr	r3, [r3, #0]
   2f4c0:	68ba      	ldr	r2, [r7, #8]
   2f4c2:	0011      	movs	r1, r2
   2f4c4:	0018      	movs	r0, r3
   2f4c6:	4b22      	ldr	r3, [pc, #136]	; (2f550 <deliverMessage+0xe4>)
   2f4c8:	4798      	blx	r3
   2f4ca:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f4cc:	d01c      	beq.n	2f508 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2f4ce:	68fa      	ldr	r2, [r7, #12]
   2f4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f4d2:	3304      	adds	r3, #4
   2f4d4:	00db      	lsls	r3, r3, #3
   2f4d6:	18d3      	adds	r3, r2, r3
   2f4d8:	3308      	adds	r3, #8
   2f4da:	681b      	ldr	r3, [r3, #0]
   2f4dc:	2b00      	cmp	r3, #0
   2f4de:	d013      	beq.n	2f508 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2f4e0:	687a      	ldr	r2, [r7, #4]
   2f4e2:	68b9      	ldr	r1, [r7, #8]
   2f4e4:	2318      	movs	r3, #24
   2f4e6:	18fb      	adds	r3, r7, r3
   2f4e8:	0018      	movs	r0, r3
   2f4ea:	4b1a      	ldr	r3, [pc, #104]	; (2f554 <deliverMessage+0xe8>)
   2f4ec:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2f4ee:	68fa      	ldr	r2, [r7, #12]
   2f4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f4f2:	3304      	adds	r3, #4
   2f4f4:	00db      	lsls	r3, r3, #3
   2f4f6:	18d3      	adds	r3, r2, r3
   2f4f8:	3308      	adds	r3, #8
   2f4fa:	681b      	ldr	r3, [r3, #0]
   2f4fc:	2218      	movs	r2, #24
   2f4fe:	18ba      	adds	r2, r7, r2
   2f500:	0010      	movs	r0, r2
   2f502:	4798      	blx	r3
                rc = SUCCESS;
   2f504:	2300      	movs	r3, #0
   2f506:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f50a:	3301      	adds	r3, #1
   2f50c:	627b      	str	r3, [r7, #36]	; 0x24
   2f50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f510:	2b04      	cmp	r3, #4
   2f512:	ddb7      	ble.n	2f484 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2f514:	6a3b      	ldr	r3, [r7, #32]
   2f516:	3301      	adds	r3, #1
   2f518:	d112      	bne.n	2f540 <deliverMessage+0xd4>
   2f51a:	68fb      	ldr	r3, [r7, #12]
   2f51c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f51e:	2b00      	cmp	r3, #0
   2f520:	d00e      	beq.n	2f540 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2f522:	687a      	ldr	r2, [r7, #4]
   2f524:	68b9      	ldr	r1, [r7, #8]
   2f526:	2310      	movs	r3, #16
   2f528:	18fb      	adds	r3, r7, r3
   2f52a:	0018      	movs	r0, r3
   2f52c:	4b09      	ldr	r3, [pc, #36]	; (2f554 <deliverMessage+0xe8>)
   2f52e:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2f530:	68fb      	ldr	r3, [r7, #12]
   2f532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f534:	2210      	movs	r2, #16
   2f536:	18ba      	adds	r2, r7, r2
   2f538:	0010      	movs	r0, r2
   2f53a:	4798      	blx	r3
        rc = SUCCESS;
   2f53c:	2300      	movs	r3, #0
   2f53e:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2f540:	6a3b      	ldr	r3, [r7, #32]
}
   2f542:	0018      	movs	r0, r3
   2f544:	46bd      	mov	sp, r7
   2f546:	b00a      	add	sp, #40	; 0x28
   2f548:	bd80      	pop	{r7, pc}
   2f54a:	46c0      	nop			; (mov r8, r8)
   2f54c:	00031141 	.word	0x00031141
   2f550:	0002f39d 	.word	0x0002f39d
   2f554:	0002f0a5 	.word	0x0002f0a5

0002f558 <keepalive>:


int keepalive(MQTTClient* c)
{
   2f558:	b580      	push	{r7, lr}
   2f55a:	b088      	sub	sp, #32
   2f55c:	af00      	add	r7, sp, #0
   2f55e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2f560:	2301      	movs	r3, #1
   2f562:	425b      	negs	r3, r3
   2f564:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2f566:	687b      	ldr	r3, [r7, #4]
   2f568:	699b      	ldr	r3, [r3, #24]
   2f56a:	2b00      	cmp	r3, #0
   2f56c:	d102      	bne.n	2f574 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2f56e:	2300      	movs	r3, #0
   2f570:	61fb      	str	r3, [r7, #28]
        goto exit;
   2f572:	e033      	b.n	2f5dc <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2f574:	687b      	ldr	r3, [r7, #4]
   2f576:	3354      	adds	r3, #84	; 0x54
   2f578:	0018      	movs	r0, r3
   2f57a:	4b1b      	ldr	r3, [pc, #108]	; (2f5e8 <keepalive+0x90>)
   2f57c:	4798      	blx	r3
   2f57e:	1e03      	subs	r3, r0, #0
   2f580:	d02c      	beq.n	2f5dc <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2f582:	687b      	ldr	r3, [r7, #4]
   2f584:	7f1b      	ldrb	r3, [r3, #28]
   2f586:	2b00      	cmp	r3, #0
   2f588:	d128      	bne.n	2f5dc <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2f58a:	230c      	movs	r3, #12
   2f58c:	18fb      	adds	r3, r7, r3
   2f58e:	0018      	movs	r0, r3
   2f590:	4b16      	ldr	r3, [pc, #88]	; (2f5ec <keepalive+0x94>)
   2f592:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2f594:	23fa      	movs	r3, #250	; 0xfa
   2f596:	009a      	lsls	r2, r3, #2
   2f598:	230c      	movs	r3, #12
   2f59a:	18fb      	adds	r3, r7, r3
   2f59c:	0011      	movs	r1, r2
   2f59e:	0018      	movs	r0, r3
   2f5a0:	4b13      	ldr	r3, [pc, #76]	; (2f5f0 <keepalive+0x98>)
   2f5a2:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2f5a4:	687b      	ldr	r3, [r7, #4]
   2f5a6:	691a      	ldr	r2, [r3, #16]
   2f5a8:	687b      	ldr	r3, [r7, #4]
   2f5aa:	689b      	ldr	r3, [r3, #8]
   2f5ac:	0019      	movs	r1, r3
   2f5ae:	0010      	movs	r0, r2
   2f5b0:	4b10      	ldr	r3, [pc, #64]	; (2f5f4 <keepalive+0x9c>)
   2f5b2:	4798      	blx	r3
   2f5b4:	0003      	movs	r3, r0
   2f5b6:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2f5b8:	69bb      	ldr	r3, [r7, #24]
   2f5ba:	2b00      	cmp	r3, #0
   2f5bc:	dd0e      	ble.n	2f5dc <keepalive+0x84>
   2f5be:	230c      	movs	r3, #12
   2f5c0:	18fa      	adds	r2, r7, r3
   2f5c2:	69b9      	ldr	r1, [r7, #24]
   2f5c4:	687b      	ldr	r3, [r7, #4]
   2f5c6:	0018      	movs	r0, r3
   2f5c8:	4b0b      	ldr	r3, [pc, #44]	; (2f5f8 <keepalive+0xa0>)
   2f5ca:	4798      	blx	r3
   2f5cc:	0003      	movs	r3, r0
   2f5ce:	61fb      	str	r3, [r7, #28]
   2f5d0:	69fb      	ldr	r3, [r7, #28]
   2f5d2:	2b00      	cmp	r3, #0
   2f5d4:	d102      	bne.n	2f5dc <keepalive+0x84>
                c->ping_outstanding = 1;
   2f5d6:	687b      	ldr	r3, [r7, #4]
   2f5d8:	2201      	movs	r2, #1
   2f5da:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2f5dc:	69fb      	ldr	r3, [r7, #28]
}
   2f5de:	0018      	movs	r0, r3
   2f5e0:	46bd      	mov	sp, r7
   2f5e2:	b008      	add	sp, #32
   2f5e4:	bd80      	pop	{r7, pc}
   2f5e6:	46c0      	nop			; (mov r8, r8)
   2f5e8:	0002fed9 	.word	0x0002fed9
   2f5ec:	0002ff7d 	.word	0x0002ff7d
   2f5f0:	0002ff05 	.word	0x0002ff05
   2f5f4:	00030b51 	.word	0x00030b51
   2f5f8:	0002f0f5 	.word	0x0002f0f5

0002f5fc <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2f5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f5fe:	b095      	sub	sp, #84	; 0x54
   2f600:	af06      	add	r7, sp, #24
   2f602:	6078      	str	r0, [r7, #4]
   2f604:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2f606:	683a      	ldr	r2, [r7, #0]
   2f608:	687b      	ldr	r3, [r7, #4]
   2f60a:	0011      	movs	r1, r2
   2f60c:	0018      	movs	r0, r3
   2f60e:	4b70      	ldr	r3, [pc, #448]	; (2f7d0 <cycle+0x1d4>)
   2f610:	4798      	blx	r3
   2f612:	0002      	movs	r2, r0
   2f614:	232e      	movs	r3, #46	; 0x2e
   2f616:	18fb      	adds	r3, r7, r3
   2f618:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2f61a:	2300      	movs	r3, #0
   2f61c:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2f61e:	2300      	movs	r3, #0
   2f620:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2f622:	232e      	movs	r3, #46	; 0x2e
   2f624:	18fb      	adds	r3, r7, r3
   2f626:	881b      	ldrh	r3, [r3, #0]
   2f628:	2b0d      	cmp	r3, #13
   2f62a:	d900      	bls.n	2f62e <cycle+0x32>
   2f62c:	e0bd      	b.n	2f7aa <cycle+0x1ae>
   2f62e:	009a      	lsls	r2, r3, #2
   2f630:	4b68      	ldr	r3, [pc, #416]	; (2f7d4 <cycle+0x1d8>)
   2f632:	18d3      	adds	r3, r2, r3
   2f634:	681b      	ldr	r3, [r3, #0]
   2f636:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f638:	687b      	ldr	r3, [r7, #4]
   2f63a:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2f63c:	687b      	ldr	r3, [r7, #4]
   2f63e:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f640:	001e      	movs	r6, r3
   2f642:	2310      	movs	r3, #16
   2f644:	18fb      	adds	r3, r7, r3
   2f646:	1d1d      	adds	r5, r3, #4
   2f648:	2310      	movs	r3, #16
   2f64a:	18fb      	adds	r3, r7, r3
   2f64c:	1c5c      	adds	r4, r3, #1
   2f64e:	230c      	movs	r3, #12
   2f650:	18f9      	adds	r1, r7, r3
   2f652:	2310      	movs	r3, #16
   2f654:	18fb      	adds	r3, r7, r3
   2f656:	1c98      	adds	r0, r3, #2
   2f658:	9604      	str	r6, [sp, #16]
   2f65a:	9203      	str	r2, [sp, #12]
   2f65c:	2310      	movs	r3, #16
   2f65e:	18fb      	adds	r3, r7, r3
   2f660:	330c      	adds	r3, #12
   2f662:	9302      	str	r3, [sp, #8]
   2f664:	2310      	movs	r3, #16
   2f666:	18fb      	adds	r3, r7, r3
   2f668:	3308      	adds	r3, #8
   2f66a:	9301      	str	r3, [sp, #4]
   2f66c:	2320      	movs	r3, #32
   2f66e:	18fb      	adds	r3, r7, r3
   2f670:	9300      	str	r3, [sp, #0]
   2f672:	002b      	movs	r3, r5
   2f674:	0022      	movs	r2, r4
   2f676:	4c58      	ldr	r4, [pc, #352]	; (2f7d8 <cycle+0x1dc>)
   2f678:	47a0      	blx	r4
   2f67a:	0003      	movs	r3, r0
   2f67c:	2b01      	cmp	r3, #1
   2f67e:	d000      	beq.n	2f682 <cycle+0x86>
   2f680:	e098      	b.n	2f7b4 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2f682:	68fb      	ldr	r3, [r7, #12]
   2f684:	b2da      	uxtb	r2, r3
   2f686:	2310      	movs	r3, #16
   2f688:	18fb      	adds	r3, r7, r3
   2f68a:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2f68c:	2310      	movs	r3, #16
   2f68e:	18fa      	adds	r2, r7, r3
   2f690:	2320      	movs	r3, #32
   2f692:	18f9      	adds	r1, r7, r3
   2f694:	687b      	ldr	r3, [r7, #4]
   2f696:	0018      	movs	r0, r3
   2f698:	4b50      	ldr	r3, [pc, #320]	; (2f7dc <cycle+0x1e0>)
   2f69a:	4798      	blx	r3
            if (msg.qos != QOS0)
   2f69c:	2310      	movs	r3, #16
   2f69e:	18fb      	adds	r3, r7, r3
   2f6a0:	781b      	ldrb	r3, [r3, #0]
   2f6a2:	2b00      	cmp	r3, #0
   2f6a4:	d100      	bne.n	2f6a8 <cycle+0xac>
   2f6a6:	e07d      	b.n	2f7a4 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2f6a8:	2310      	movs	r3, #16
   2f6aa:	18fb      	adds	r3, r7, r3
   2f6ac:	781b      	ldrb	r3, [r3, #0]
   2f6ae:	2b01      	cmp	r3, #1
   2f6b0:	d10f      	bne.n	2f6d2 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2f6b2:	687b      	ldr	r3, [r7, #4]
   2f6b4:	6918      	ldr	r0, [r3, #16]
   2f6b6:	687b      	ldr	r3, [r7, #4]
   2f6b8:	689b      	ldr	r3, [r3, #8]
   2f6ba:	0019      	movs	r1, r3
   2f6bc:	2310      	movs	r3, #16
   2f6be:	18fb      	adds	r3, r7, r3
   2f6c0:	889b      	ldrh	r3, [r3, #4]
   2f6c2:	9300      	str	r3, [sp, #0]
   2f6c4:	2300      	movs	r3, #0
   2f6c6:	2204      	movs	r2, #4
   2f6c8:	4c45      	ldr	r4, [pc, #276]	; (2f7e0 <cycle+0x1e4>)
   2f6ca:	47a0      	blx	r4
   2f6cc:	0003      	movs	r3, r0
   2f6ce:	637b      	str	r3, [r7, #52]	; 0x34
   2f6d0:	e013      	b.n	2f6fa <cycle+0xfe>
                else if (msg.qos == QOS2)
   2f6d2:	2310      	movs	r3, #16
   2f6d4:	18fb      	adds	r3, r7, r3
   2f6d6:	781b      	ldrb	r3, [r3, #0]
   2f6d8:	2b02      	cmp	r3, #2
   2f6da:	d10e      	bne.n	2f6fa <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2f6dc:	687b      	ldr	r3, [r7, #4]
   2f6de:	6918      	ldr	r0, [r3, #16]
   2f6e0:	687b      	ldr	r3, [r7, #4]
   2f6e2:	689b      	ldr	r3, [r3, #8]
   2f6e4:	0019      	movs	r1, r3
   2f6e6:	2310      	movs	r3, #16
   2f6e8:	18fb      	adds	r3, r7, r3
   2f6ea:	889b      	ldrh	r3, [r3, #4]
   2f6ec:	9300      	str	r3, [sp, #0]
   2f6ee:	2300      	movs	r3, #0
   2f6f0:	2205      	movs	r2, #5
   2f6f2:	4c3b      	ldr	r4, [pc, #236]	; (2f7e0 <cycle+0x1e4>)
   2f6f4:	47a0      	blx	r4
   2f6f6:	0003      	movs	r3, r0
   2f6f8:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2f6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f6fc:	2b00      	cmp	r3, #0
   2f6fe:	dc03      	bgt.n	2f708 <cycle+0x10c>
                    rc = FAILURE;
   2f700:	2301      	movs	r3, #1
   2f702:	425b      	negs	r3, r3
   2f704:	633b      	str	r3, [r7, #48]	; 0x30
   2f706:	e007      	b.n	2f718 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2f708:	683a      	ldr	r2, [r7, #0]
   2f70a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f70c:	687b      	ldr	r3, [r7, #4]
   2f70e:	0018      	movs	r0, r3
   2f710:	4b34      	ldr	r3, [pc, #208]	; (2f7e4 <cycle+0x1e8>)
   2f712:	4798      	blx	r3
   2f714:	0003      	movs	r3, r0
   2f716:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2f718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f71a:	3301      	adds	r3, #1
   2f71c:	d142      	bne.n	2f7a4 <cycle+0x1a8>
                    goto exit; // there was a problem
   2f71e:	46c0      	nop			; (mov r8, r8)
   2f720:	e049      	b.n	2f7b6 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f722:	687b      	ldr	r3, [r7, #4]
   2f724:	695c      	ldr	r4, [r3, #20]
   2f726:	687b      	ldr	r3, [r7, #4]
   2f728:	68db      	ldr	r3, [r3, #12]
   2f72a:	220a      	movs	r2, #10
   2f72c:	18ba      	adds	r2, r7, r2
   2f72e:	2109      	movs	r1, #9
   2f730:	1879      	adds	r1, r7, r1
   2f732:	2008      	movs	r0, #8
   2f734:	1838      	adds	r0, r7, r0
   2f736:	9300      	str	r3, [sp, #0]
   2f738:	0023      	movs	r3, r4
   2f73a:	4c2b      	ldr	r4, [pc, #172]	; (2f7e8 <cycle+0x1ec>)
   2f73c:	47a0      	blx	r4
   2f73e:	0003      	movs	r3, r0
   2f740:	2b01      	cmp	r3, #1
   2f742:	d003      	beq.n	2f74c <cycle+0x150>
                rc = FAILURE;
   2f744:	2301      	movs	r3, #1
   2f746:	425b      	negs	r3, r3
   2f748:	633b      	str	r3, [r7, #48]	; 0x30
   2f74a:	e023      	b.n	2f794 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2f74c:	687b      	ldr	r3, [r7, #4]
   2f74e:	6918      	ldr	r0, [r3, #16]
   2f750:	687b      	ldr	r3, [r7, #4]
   2f752:	689b      	ldr	r3, [r3, #8]
   2f754:	0019      	movs	r1, r3
   2f756:	230a      	movs	r3, #10
   2f758:	18fb      	adds	r3, r7, r3
   2f75a:	881b      	ldrh	r3, [r3, #0]
   2f75c:	9300      	str	r3, [sp, #0]
   2f75e:	2300      	movs	r3, #0
   2f760:	2206      	movs	r2, #6
   2f762:	4c1f      	ldr	r4, [pc, #124]	; (2f7e0 <cycle+0x1e4>)
   2f764:	47a0      	blx	r4
   2f766:	0003      	movs	r3, r0
   2f768:	637b      	str	r3, [r7, #52]	; 0x34
   2f76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f76c:	2b00      	cmp	r3, #0
   2f76e:	dc03      	bgt.n	2f778 <cycle+0x17c>
                rc = FAILURE;
   2f770:	2301      	movs	r3, #1
   2f772:	425b      	negs	r3, r3
   2f774:	633b      	str	r3, [r7, #48]	; 0x30
   2f776:	e00d      	b.n	2f794 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2f778:	683a      	ldr	r2, [r7, #0]
   2f77a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f77c:	687b      	ldr	r3, [r7, #4]
   2f77e:	0018      	movs	r0, r3
   2f780:	4b18      	ldr	r3, [pc, #96]	; (2f7e4 <cycle+0x1e8>)
   2f782:	4798      	blx	r3
   2f784:	0003      	movs	r3, r0
   2f786:	633b      	str	r3, [r7, #48]	; 0x30
   2f788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f78a:	2b00      	cmp	r3, #0
   2f78c:	d002      	beq.n	2f794 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2f78e:	2301      	movs	r3, #1
   2f790:	425b      	negs	r3, r3
   2f792:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2f794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f796:	3301      	adds	r3, #1
   2f798:	d106      	bne.n	2f7a8 <cycle+0x1ac>
                goto exit; // there was a problem
   2f79a:	e00c      	b.n	2f7b6 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2f79c:	687b      	ldr	r3, [r7, #4]
   2f79e:	2200      	movs	r2, #0
   2f7a0:	771a      	strb	r2, [r3, #28]
            break;
   2f7a2:	e002      	b.n	2f7aa <cycle+0x1ae>
            break;
   2f7a4:	46c0      	nop			; (mov r8, r8)
   2f7a6:	e000      	b.n	2f7aa <cycle+0x1ae>
            break;
   2f7a8:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2f7aa:	687b      	ldr	r3, [r7, #4]
   2f7ac:	0018      	movs	r0, r3
   2f7ae:	4b0f      	ldr	r3, [pc, #60]	; (2f7ec <cycle+0x1f0>)
   2f7b0:	4798      	blx	r3
   2f7b2:	e000      	b.n	2f7b6 <cycle+0x1ba>
                goto exit;
   2f7b4:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2f7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f7b8:	2b00      	cmp	r3, #0
   2f7ba:	d103      	bne.n	2f7c4 <cycle+0x1c8>
        rc = packet_type;
   2f7bc:	232e      	movs	r3, #46	; 0x2e
   2f7be:	18fb      	adds	r3, r7, r3
   2f7c0:	881b      	ldrh	r3, [r3, #0]
   2f7c2:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2f7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2f7c6:	0018      	movs	r0, r3
   2f7c8:	46bd      	mov	sp, r7
   2f7ca:	b00f      	add	sp, #60	; 0x3c
   2f7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f7ce:	46c0      	nop			; (mov r8, r8)
   2f7d0:	0002f2b1 	.word	0x0002f2b1
   2f7d4:	0003aaf8 	.word	0x0003aaf8
   2f7d8:	00030b75 	.word	0x00030b75
   2f7dc:	0002f46d 	.word	0x0002f46d
   2f7e0:	0003136d 	.word	0x0003136d
   2f7e4:	0002f0f5 	.word	0x0002f0f5
   2f7e8:	00030c79 	.word	0x00030c79
   2f7ec:	0002f559 	.word	0x0002f559

0002f7f0 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2f7f0:	b580      	push	{r7, lr}
   2f7f2:	b086      	sub	sp, #24
   2f7f4:	af00      	add	r7, sp, #0
   2f7f6:	6078      	str	r0, [r7, #4]
   2f7f8:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2f7fa:	2300      	movs	r3, #0
   2f7fc:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2f7fe:	2308      	movs	r3, #8
   2f800:	18fb      	adds	r3, r7, r3
   2f802:	0018      	movs	r0, r3
   2f804:	4b11      	ldr	r3, [pc, #68]	; (2f84c <MQTTYield+0x5c>)
   2f806:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2f808:	683a      	ldr	r2, [r7, #0]
   2f80a:	2308      	movs	r3, #8
   2f80c:	18fb      	adds	r3, r7, r3
   2f80e:	0011      	movs	r1, r2
   2f810:	0018      	movs	r0, r3
   2f812:	4b0f      	ldr	r3, [pc, #60]	; (2f850 <MQTTYield+0x60>)
   2f814:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2f816:	2308      	movs	r3, #8
   2f818:	18fa      	adds	r2, r7, r3
   2f81a:	687b      	ldr	r3, [r7, #4]
   2f81c:	0011      	movs	r1, r2
   2f81e:	0018      	movs	r0, r3
   2f820:	4b0c      	ldr	r3, [pc, #48]	; (2f854 <MQTTYield+0x64>)
   2f822:	4798      	blx	r3
   2f824:	0003      	movs	r3, r0
   2f826:	3301      	adds	r3, #1
   2f828:	d103      	bne.n	2f832 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2f82a:	2301      	movs	r3, #1
   2f82c:	425b      	negs	r3, r3
   2f82e:	617b      	str	r3, [r7, #20]
            break;
   2f830:	e006      	b.n	2f840 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2f832:	2308      	movs	r3, #8
   2f834:	18fb      	adds	r3, r7, r3
   2f836:	0018      	movs	r0, r3
   2f838:	4b07      	ldr	r3, [pc, #28]	; (2f858 <MQTTYield+0x68>)
   2f83a:	4798      	blx	r3
   2f83c:	1e03      	subs	r3, r0, #0
   2f83e:	d0ea      	beq.n	2f816 <MQTTYield+0x26>
        
    return rc;
   2f840:	697b      	ldr	r3, [r7, #20]
}
   2f842:	0018      	movs	r0, r3
   2f844:	46bd      	mov	sp, r7
   2f846:	b006      	add	sp, #24
   2f848:	bd80      	pop	{r7, pc}
   2f84a:	46c0      	nop			; (mov r8, r8)
   2f84c:	0002ff7d 	.word	0x0002ff7d
   2f850:	0002ff05 	.word	0x0002ff05
   2f854:	0002f5fd 	.word	0x0002f5fd
   2f858:	0002fed9 	.word	0x0002fed9

0002f85c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2f85c:	b580      	push	{r7, lr}
   2f85e:	b086      	sub	sp, #24
   2f860:	af00      	add	r7, sp, #0
   2f862:	60f8      	str	r0, [r7, #12]
   2f864:	60b9      	str	r1, [r7, #8]
   2f866:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2f868:	2301      	movs	r3, #1
   2f86a:	425b      	negs	r3, r3
   2f86c:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2f86e:	687b      	ldr	r3, [r7, #4]
   2f870:	0018      	movs	r0, r3
   2f872:	4b0b      	ldr	r3, [pc, #44]	; (2f8a0 <waitfor+0x44>)
   2f874:	4798      	blx	r3
   2f876:	1e03      	subs	r3, r0, #0
   2f878:	d10c      	bne.n	2f894 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2f87a:	687a      	ldr	r2, [r7, #4]
   2f87c:	68fb      	ldr	r3, [r7, #12]
   2f87e:	0011      	movs	r1, r2
   2f880:	0018      	movs	r0, r3
   2f882:	4b08      	ldr	r3, [pc, #32]	; (2f8a4 <waitfor+0x48>)
   2f884:	4798      	blx	r3
   2f886:	0003      	movs	r3, r0
   2f888:	617b      	str	r3, [r7, #20]
   2f88a:	697a      	ldr	r2, [r7, #20]
   2f88c:	68bb      	ldr	r3, [r7, #8]
   2f88e:	429a      	cmp	r2, r3
   2f890:	d1ed      	bne.n	2f86e <waitfor+0x12>
   2f892:	e000      	b.n	2f896 <waitfor+0x3a>
            break; // we timed out
   2f894:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2f896:	697b      	ldr	r3, [r7, #20]
}
   2f898:	0018      	movs	r0, r3
   2f89a:	46bd      	mov	sp, r7
   2f89c:	b006      	add	sp, #24
   2f89e:	bd80      	pop	{r7, pc}
   2f8a0:	0002fed9 	.word	0x0002fed9
   2f8a4:	0002f5fd 	.word	0x0002f5fd

0002f8a8 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2f8a8:	b590      	push	{r4, r7, lr}
   2f8aa:	b09f      	sub	sp, #124	; 0x7c
   2f8ac:	af00      	add	r7, sp, #0
   2f8ae:	6078      	str	r0, [r7, #4]
   2f8b0:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2f8b2:	2301      	movs	r3, #1
   2f8b4:	425b      	negs	r3, r3
   2f8b6:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2f8b8:	230c      	movs	r3, #12
   2f8ba:	18fa      	adds	r2, r7, r3
   2f8bc:	4b41      	ldr	r3, [pc, #260]	; (2f9c4 <MQTTConnect+0x11c>)
   2f8be:	0010      	movs	r0, r2
   2f8c0:	0019      	movs	r1, r3
   2f8c2:	2358      	movs	r3, #88	; 0x58
   2f8c4:	001a      	movs	r2, r3
   2f8c6:	4b40      	ldr	r3, [pc, #256]	; (2f9c8 <MQTTConnect+0x120>)
   2f8c8:	4798      	blx	r3
    int len = 0;
   2f8ca:	2300      	movs	r3, #0
   2f8cc:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2f8ce:	687b      	ldr	r3, [r7, #4]
   2f8d0:	6a1b      	ldr	r3, [r3, #32]
   2f8d2:	2b00      	cmp	r3, #0
   2f8d4:	d166      	bne.n	2f9a4 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2f8d6:	2364      	movs	r3, #100	; 0x64
   2f8d8:	18fb      	adds	r3, r7, r3
   2f8da:	0018      	movs	r0, r3
   2f8dc:	4b3b      	ldr	r3, [pc, #236]	; (2f9cc <MQTTConnect+0x124>)
   2f8de:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2f8e0:	687b      	ldr	r3, [r7, #4]
   2f8e2:	685a      	ldr	r2, [r3, #4]
   2f8e4:	2364      	movs	r3, #100	; 0x64
   2f8e6:	18fb      	adds	r3, r7, r3
   2f8e8:	0011      	movs	r1, r2
   2f8ea:	0018      	movs	r0, r3
   2f8ec:	4b38      	ldr	r3, [pc, #224]	; (2f9d0 <MQTTConnect+0x128>)
   2f8ee:	4798      	blx	r3

    if (options == 0)
   2f8f0:	683b      	ldr	r3, [r7, #0]
   2f8f2:	2b00      	cmp	r3, #0
   2f8f4:	d102      	bne.n	2f8fc <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2f8f6:	230c      	movs	r3, #12
   2f8f8:	18fb      	adds	r3, r7, r3
   2f8fa:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2f8fc:	683b      	ldr	r3, [r7, #0]
   2f8fe:	8b1b      	ldrh	r3, [r3, #24]
   2f900:	001a      	movs	r2, r3
   2f902:	687b      	ldr	r3, [r7, #4]
   2f904:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2f906:	687b      	ldr	r3, [r7, #4]
   2f908:	3354      	adds	r3, #84	; 0x54
   2f90a:	001a      	movs	r2, r3
   2f90c:	687b      	ldr	r3, [r7, #4]
   2f90e:	699b      	ldr	r3, [r3, #24]
   2f910:	0019      	movs	r1, r3
   2f912:	0010      	movs	r0, r2
   2f914:	4b2f      	ldr	r3, [pc, #188]	; (2f9d4 <MQTTConnect+0x12c>)
   2f916:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2f918:	687b      	ldr	r3, [r7, #4]
   2f91a:	6918      	ldr	r0, [r3, #16]
   2f91c:	687b      	ldr	r3, [r7, #4]
   2f91e:	689b      	ldr	r3, [r3, #8]
   2f920:	0019      	movs	r1, r3
   2f922:	683b      	ldr	r3, [r7, #0]
   2f924:	001a      	movs	r2, r3
   2f926:	4b2c      	ldr	r3, [pc, #176]	; (2f9d8 <MQTTConnect+0x130>)
   2f928:	4798      	blx	r3
   2f92a:	0003      	movs	r3, r0
   2f92c:	673b      	str	r3, [r7, #112]	; 0x70
   2f92e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f930:	2b00      	cmp	r3, #0
   2f932:	dd39      	ble.n	2f9a8 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2f934:	2364      	movs	r3, #100	; 0x64
   2f936:	18fa      	adds	r2, r7, r3
   2f938:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2f93a:	687b      	ldr	r3, [r7, #4]
   2f93c:	0018      	movs	r0, r3
   2f93e:	4b27      	ldr	r3, [pc, #156]	; (2f9dc <MQTTConnect+0x134>)
   2f940:	4798      	blx	r3
   2f942:	0003      	movs	r3, r0
   2f944:	677b      	str	r3, [r7, #116]	; 0x74
   2f946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f948:	2b00      	cmp	r3, #0
   2f94a:	d12f      	bne.n	2f9ac <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2f94c:	2364      	movs	r3, #100	; 0x64
   2f94e:	18fa      	adds	r2, r7, r3
   2f950:	687b      	ldr	r3, [r7, #4]
   2f952:	2102      	movs	r1, #2
   2f954:	0018      	movs	r0, r3
   2f956:	4b22      	ldr	r3, [pc, #136]	; (2f9e0 <MQTTConnect+0x138>)
   2f958:	4798      	blx	r3
   2f95a:	0003      	movs	r3, r0
   2f95c:	2b02      	cmp	r3, #2
   2f95e:	d11d      	bne.n	2f99c <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2f960:	230b      	movs	r3, #11
   2f962:	18fb      	adds	r3, r7, r3
   2f964:	22ff      	movs	r2, #255	; 0xff
   2f966:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2f968:	230a      	movs	r3, #10
   2f96a:	18fb      	adds	r3, r7, r3
   2f96c:	2200      	movs	r2, #0
   2f96e:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2f970:	687b      	ldr	r3, [r7, #4]
   2f972:	695a      	ldr	r2, [r3, #20]
   2f974:	687b      	ldr	r3, [r7, #4]
   2f976:	68db      	ldr	r3, [r3, #12]
   2f978:	210b      	movs	r1, #11
   2f97a:	1879      	adds	r1, r7, r1
   2f97c:	200a      	movs	r0, #10
   2f97e:	1838      	adds	r0, r7, r0
   2f980:	4c18      	ldr	r4, [pc, #96]	; (2f9e4 <MQTTConnect+0x13c>)
   2f982:	47a0      	blx	r4
   2f984:	0003      	movs	r3, r0
   2f986:	2b01      	cmp	r3, #1
   2f988:	d104      	bne.n	2f994 <MQTTConnect+0xec>
            rc = connack_rc;
   2f98a:	230b      	movs	r3, #11
   2f98c:	18fb      	adds	r3, r7, r3
   2f98e:	781b      	ldrb	r3, [r3, #0]
   2f990:	677b      	str	r3, [r7, #116]	; 0x74
   2f992:	e00c      	b.n	2f9ae <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2f994:	2301      	movs	r3, #1
   2f996:	425b      	negs	r3, r3
   2f998:	677b      	str	r3, [r7, #116]	; 0x74
   2f99a:	e008      	b.n	2f9ae <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2f99c:	2301      	movs	r3, #1
   2f99e:	425b      	negs	r3, r3
   2f9a0:	677b      	str	r3, [r7, #116]	; 0x74
   2f9a2:	e004      	b.n	2f9ae <MQTTConnect+0x106>
		goto exit;
   2f9a4:	46c0      	nop			; (mov r8, r8)
   2f9a6:	e002      	b.n	2f9ae <MQTTConnect+0x106>
        goto exit;
   2f9a8:	46c0      	nop			; (mov r8, r8)
   2f9aa:	e000      	b.n	2f9ae <MQTTConnect+0x106>
        goto exit; // there was a problem
   2f9ac:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2f9ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f9b0:	2b00      	cmp	r3, #0
   2f9b2:	d102      	bne.n	2f9ba <MQTTConnect+0x112>
        c->isconnected = 1;
   2f9b4:	687b      	ldr	r3, [r7, #4]
   2f9b6:	2201      	movs	r2, #1
   2f9b8:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2f9ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2f9bc:	0018      	movs	r0, r3
   2f9be:	46bd      	mov	sp, r7
   2f9c0:	b01f      	add	sp, #124	; 0x7c
   2f9c2:	bd90      	pop	{r4, r7, pc}
   2f9c4:	0003ab30 	.word	0x0003ab30
   2f9c8:	000355d9 	.word	0x000355d9
   2f9cc:	0002ff7d 	.word	0x0002ff7d
   2f9d0:	0002ff05 	.word	0x0002ff05
   2f9d4:	0002ff2d 	.word	0x0002ff2d
   2f9d8:	00030759 	.word	0x00030759
   2f9dc:	0002f0f5 	.word	0x0002f0f5
   2f9e0:	0002f85d 	.word	0x0002f85d
   2f9e4:	000309d5 	.word	0x000309d5

0002f9e8 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2f9e8:	b5b0      	push	{r4, r5, r7, lr}
   2f9ea:	b096      	sub	sp, #88	; 0x58
   2f9ec:	af04      	add	r7, sp, #16
   2f9ee:	60f8      	str	r0, [r7, #12]
   2f9f0:	60b9      	str	r1, [r7, #8]
   2f9f2:	603b      	str	r3, [r7, #0]
   2f9f4:	1dfb      	adds	r3, r7, #7
   2f9f6:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2f9f8:	2301      	movs	r3, #1
   2f9fa:	425b      	negs	r3, r3
   2f9fc:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2f9fe:	2300      	movs	r3, #0
   2fa00:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2fa02:	2324      	movs	r3, #36	; 0x24
   2fa04:	18fb      	adds	r3, r7, r3
   2fa06:	2200      	movs	r2, #0
   2fa08:	601a      	str	r2, [r3, #0]
   2fa0a:	2324      	movs	r3, #36	; 0x24
   2fa0c:	18fb      	adds	r3, r7, r3
   2fa0e:	2200      	movs	r2, #0
   2fa10:	605a      	str	r2, [r3, #4]
   2fa12:	2324      	movs	r3, #36	; 0x24
   2fa14:	18fb      	adds	r3, r7, r3
   2fa16:	2200      	movs	r2, #0
   2fa18:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2fa1a:	1dfb      	adds	r3, r7, #7
   2fa1c:	781b      	ldrb	r3, [r3, #0]
   2fa1e:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2fa20:	2324      	movs	r3, #36	; 0x24
   2fa22:	18fb      	adds	r3, r7, r3
   2fa24:	68ba      	ldr	r2, [r7, #8]
   2fa26:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fa28:	68fb      	ldr	r3, [r7, #12]
   2fa2a:	6a1b      	ldr	r3, [r3, #32]
   2fa2c:	2b00      	cmp	r3, #0
   2fa2e:	d100      	bne.n	2fa32 <MQTTSubscribe+0x4a>
   2fa30:	e088      	b.n	2fb44 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2fa32:	2330      	movs	r3, #48	; 0x30
   2fa34:	18fb      	adds	r3, r7, r3
   2fa36:	0018      	movs	r0, r3
   2fa38:	4b47      	ldr	r3, [pc, #284]	; (2fb58 <MQTTSubscribe+0x170>)
   2fa3a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fa3c:	68fb      	ldr	r3, [r7, #12]
   2fa3e:	685a      	ldr	r2, [r3, #4]
   2fa40:	2330      	movs	r3, #48	; 0x30
   2fa42:	18fb      	adds	r3, r7, r3
   2fa44:	0011      	movs	r1, r2
   2fa46:	0018      	movs	r0, r3
   2fa48:	4b44      	ldr	r3, [pc, #272]	; (2fb5c <MQTTSubscribe+0x174>)
   2fa4a:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2fa4c:	68fb      	ldr	r3, [r7, #12]
   2fa4e:	691c      	ldr	r4, [r3, #16]
   2fa50:	68fb      	ldr	r3, [r7, #12]
   2fa52:	689b      	ldr	r3, [r3, #8]
   2fa54:	001d      	movs	r5, r3
   2fa56:	68fb      	ldr	r3, [r7, #12]
   2fa58:	0018      	movs	r0, r3
   2fa5a:	4b41      	ldr	r3, [pc, #260]	; (2fb60 <MQTTSubscribe+0x178>)
   2fa5c:	4798      	blx	r3
   2fa5e:	0003      	movs	r3, r0
   2fa60:	b29a      	uxth	r2, r3
   2fa62:	2320      	movs	r3, #32
   2fa64:	18fb      	adds	r3, r7, r3
   2fa66:	9302      	str	r3, [sp, #8]
   2fa68:	2324      	movs	r3, #36	; 0x24
   2fa6a:	18fb      	adds	r3, r7, r3
   2fa6c:	9301      	str	r3, [sp, #4]
   2fa6e:	2301      	movs	r3, #1
   2fa70:	9300      	str	r3, [sp, #0]
   2fa72:	0013      	movs	r3, r2
   2fa74:	2200      	movs	r2, #0
   2fa76:	0029      	movs	r1, r5
   2fa78:	0020      	movs	r0, r4
   2fa7a:	4c3a      	ldr	r4, [pc, #232]	; (2fb64 <MQTTSubscribe+0x17c>)
   2fa7c:	47a0      	blx	r4
   2fa7e:	0003      	movs	r3, r0
   2fa80:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2fa82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fa84:	2b00      	cmp	r3, #0
   2fa86:	dd5f      	ble.n	2fb48 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2fa88:	2330      	movs	r3, #48	; 0x30
   2fa8a:	18fa      	adds	r2, r7, r3
   2fa8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2fa8e:	68fb      	ldr	r3, [r7, #12]
   2fa90:	0018      	movs	r0, r3
   2fa92:	4b35      	ldr	r3, [pc, #212]	; (2fb68 <MQTTSubscribe+0x180>)
   2fa94:	4798      	blx	r3
   2fa96:	0003      	movs	r3, r0
   2fa98:	647b      	str	r3, [r7, #68]	; 0x44
   2fa9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2fa9c:	2b00      	cmp	r3, #0
   2fa9e:	d155      	bne.n	2fb4c <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2faa0:	2330      	movs	r3, #48	; 0x30
   2faa2:	18fa      	adds	r2, r7, r3
   2faa4:	68fb      	ldr	r3, [r7, #12]
   2faa6:	2109      	movs	r1, #9
   2faa8:	0018      	movs	r0, r3
   2faaa:	4b30      	ldr	r3, [pc, #192]	; (2fb6c <MQTTSubscribe+0x184>)
   2faac:	4798      	blx	r3
   2faae:	0003      	movs	r3, r0
   2fab0:	2b09      	cmp	r3, #9
   2fab2:	d143      	bne.n	2fb3c <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2fab4:	2300      	movs	r3, #0
   2fab6:	61fb      	str	r3, [r7, #28]
   2fab8:	2301      	movs	r3, #1
   2faba:	425b      	negs	r3, r3
   2fabc:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2fabe:	68fb      	ldr	r3, [r7, #12]
   2fac0:	695a      	ldr	r2, [r3, #20]
   2fac2:	68fb      	ldr	r3, [r7, #12]
   2fac4:	68db      	ldr	r3, [r3, #12]
   2fac6:	001c      	movs	r4, r3
   2fac8:	2318      	movs	r3, #24
   2faca:	18fb      	adds	r3, r7, r3
   2facc:	211c      	movs	r1, #28
   2face:	1879      	adds	r1, r7, r1
   2fad0:	2016      	movs	r0, #22
   2fad2:	1838      	adds	r0, r7, r0
   2fad4:	9401      	str	r4, [sp, #4]
   2fad6:	9200      	str	r2, [sp, #0]
   2fad8:	000a      	movs	r2, r1
   2fada:	2101      	movs	r1, #1
   2fadc:	4c24      	ldr	r4, [pc, #144]	; (2fb70 <MQTTSubscribe+0x188>)
   2fade:	47a0      	blx	r4
   2fae0:	0003      	movs	r3, r0
   2fae2:	2b01      	cmp	r3, #1
   2fae4:	d101      	bne.n	2faea <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2fae6:	69bb      	ldr	r3, [r7, #24]
   2fae8:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2faea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2faec:	2b80      	cmp	r3, #128	; 0x80
   2faee:	d02e      	beq.n	2fb4e <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2faf0:	2300      	movs	r3, #0
   2faf2:	643b      	str	r3, [r7, #64]	; 0x40
   2faf4:	e01e      	b.n	2fb34 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2faf6:	68fa      	ldr	r2, [r7, #12]
   2faf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fafa:	3304      	adds	r3, #4
   2fafc:	00db      	lsls	r3, r3, #3
   2fafe:	18d3      	adds	r3, r2, r3
   2fb00:	3304      	adds	r3, #4
   2fb02:	681b      	ldr	r3, [r3, #0]
   2fb04:	2b00      	cmp	r3, #0
   2fb06:	d112      	bne.n	2fb2e <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2fb08:	68fa      	ldr	r2, [r7, #12]
   2fb0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fb0c:	3304      	adds	r3, #4
   2fb0e:	00db      	lsls	r3, r3, #3
   2fb10:	18d3      	adds	r3, r2, r3
   2fb12:	3304      	adds	r3, #4
   2fb14:	68ba      	ldr	r2, [r7, #8]
   2fb16:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2fb18:	68fa      	ldr	r2, [r7, #12]
   2fb1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fb1c:	3304      	adds	r3, #4
   2fb1e:	00db      	lsls	r3, r3, #3
   2fb20:	18d3      	adds	r3, r2, r3
   2fb22:	3308      	adds	r3, #8
   2fb24:	683a      	ldr	r2, [r7, #0]
   2fb26:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2fb28:	2300      	movs	r3, #0
   2fb2a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2fb2c:	e00f      	b.n	2fb4e <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fb2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fb30:	3301      	adds	r3, #1
   2fb32:	643b      	str	r3, [r7, #64]	; 0x40
   2fb34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fb36:	2b04      	cmp	r3, #4
   2fb38:	dddd      	ble.n	2faf6 <MQTTSubscribe+0x10e>
   2fb3a:	e008      	b.n	2fb4e <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2fb3c:	2301      	movs	r3, #1
   2fb3e:	425b      	negs	r3, r3
   2fb40:	647b      	str	r3, [r7, #68]	; 0x44
   2fb42:	e004      	b.n	2fb4e <MQTTSubscribe+0x166>
		goto exit;
   2fb44:	46c0      	nop			; (mov r8, r8)
   2fb46:	e002      	b.n	2fb4e <MQTTSubscribe+0x166>
        goto exit;
   2fb48:	46c0      	nop			; (mov r8, r8)
   2fb4a:	e000      	b.n	2fb4e <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2fb4c:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fb4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2fb50:	0018      	movs	r0, r3
   2fb52:	46bd      	mov	sp, r7
   2fb54:	b012      	add	sp, #72	; 0x48
   2fb56:	bdb0      	pop	{r4, r5, r7, pc}
   2fb58:	0002ff7d 	.word	0x0002ff7d
   2fb5c:	0002ff05 	.word	0x0002ff05
   2fb60:	0002f0c5 	.word	0x0002f0c5
   2fb64:	000314b5 	.word	0x000314b5
   2fb68:	0002f0f5 	.word	0x0002f0f5
   2fb6c:	0002f85d 	.word	0x0002f85d
   2fb70:	00031605 	.word	0x00031605

0002fb74 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2fb74:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fb76:	46ce      	mov	lr, r9
   2fb78:	4647      	mov	r7, r8
   2fb7a:	b580      	push	{r7, lr}
   2fb7c:	b097      	sub	sp, #92	; 0x5c
   2fb7e:	af08      	add	r7, sp, #32
   2fb80:	60f8      	str	r0, [r7, #12]
   2fb82:	60b9      	str	r1, [r7, #8]
   2fb84:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2fb86:	2301      	movs	r3, #1
   2fb88:	425b      	negs	r3, r3
   2fb8a:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2fb8c:	2318      	movs	r3, #24
   2fb8e:	18fb      	adds	r3, r7, r3
   2fb90:	2200      	movs	r2, #0
   2fb92:	601a      	str	r2, [r3, #0]
   2fb94:	2318      	movs	r3, #24
   2fb96:	18fb      	adds	r3, r7, r3
   2fb98:	2200      	movs	r2, #0
   2fb9a:	605a      	str	r2, [r3, #4]
   2fb9c:	2318      	movs	r3, #24
   2fb9e:	18fb      	adds	r3, r7, r3
   2fba0:	2200      	movs	r2, #0
   2fba2:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2fba4:	2318      	movs	r3, #24
   2fba6:	18fb      	adds	r3, r7, r3
   2fba8:	68ba      	ldr	r2, [r7, #8]
   2fbaa:	601a      	str	r2, [r3, #0]
    int len = 0;
   2fbac:	2300      	movs	r3, #0
   2fbae:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fbb0:	68fb      	ldr	r3, [r7, #12]
   2fbb2:	6a1b      	ldr	r3, [r3, #32]
   2fbb4:	2b00      	cmp	r3, #0
   2fbb6:	d100      	bne.n	2fbba <MQTTPublish+0x46>
   2fbb8:	e0a0      	b.n	2fcfc <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2fbba:	2324      	movs	r3, #36	; 0x24
   2fbbc:	18fb      	adds	r3, r7, r3
   2fbbe:	0018      	movs	r0, r3
   2fbc0:	4b55      	ldr	r3, [pc, #340]	; (2fd18 <MQTTPublish+0x1a4>)
   2fbc2:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fbc4:	68fb      	ldr	r3, [r7, #12]
   2fbc6:	685a      	ldr	r2, [r3, #4]
   2fbc8:	2324      	movs	r3, #36	; 0x24
   2fbca:	18fb      	adds	r3, r7, r3
   2fbcc:	0011      	movs	r1, r2
   2fbce:	0018      	movs	r0, r3
   2fbd0:	4b52      	ldr	r3, [pc, #328]	; (2fd1c <MQTTPublish+0x1a8>)
   2fbd2:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2fbd4:	687b      	ldr	r3, [r7, #4]
   2fbd6:	781b      	ldrb	r3, [r3, #0]
   2fbd8:	2b01      	cmp	r3, #1
   2fbda:	d003      	beq.n	2fbe4 <MQTTPublish+0x70>
   2fbdc:	687b      	ldr	r3, [r7, #4]
   2fbde:	781b      	ldrb	r3, [r3, #0]
   2fbe0:	2b02      	cmp	r3, #2
   2fbe2:	d107      	bne.n	2fbf4 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2fbe4:	68fb      	ldr	r3, [r7, #12]
   2fbe6:	0018      	movs	r0, r3
   2fbe8:	4b4d      	ldr	r3, [pc, #308]	; (2fd20 <MQTTPublish+0x1ac>)
   2fbea:	4798      	blx	r3
   2fbec:	0003      	movs	r3, r0
   2fbee:	b29a      	uxth	r2, r3
   2fbf0:	687b      	ldr	r3, [r7, #4]
   2fbf2:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fbf4:	68fb      	ldr	r3, [r7, #12]
   2fbf6:	691b      	ldr	r3, [r3, #16]
   2fbf8:	469c      	mov	ip, r3
   2fbfa:	68fb      	ldr	r3, [r7, #12]
   2fbfc:	689b      	ldr	r3, [r3, #8]
   2fbfe:	001d      	movs	r5, r3
   2fc00:	687b      	ldr	r3, [r7, #4]
   2fc02:	781b      	ldrb	r3, [r3, #0]
   2fc04:	001e      	movs	r6, r3
   2fc06:	687b      	ldr	r3, [r7, #4]
   2fc08:	785b      	ldrb	r3, [r3, #1]
   2fc0a:	4698      	mov	r8, r3
   2fc0c:	687b      	ldr	r3, [r7, #4]
   2fc0e:	889b      	ldrh	r3, [r3, #4]
   2fc10:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2fc12:	687b      	ldr	r3, [r7, #4]
   2fc14:	689a      	ldr	r2, [r3, #8]
   2fc16:	687b      	ldr	r3, [r7, #4]
   2fc18:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fc1a:	9306      	str	r3, [sp, #24]
   2fc1c:	9205      	str	r2, [sp, #20]
   2fc1e:	2318      	movs	r3, #24
   2fc20:	18fa      	adds	r2, r7, r3
   2fc22:	2308      	movs	r3, #8
   2fc24:	446b      	add	r3, sp
   2fc26:	ca13      	ldmia	r2!, {r0, r1, r4}
   2fc28:	c313      	stmia	r3!, {r0, r1, r4}
   2fc2a:	464b      	mov	r3, r9
   2fc2c:	9301      	str	r3, [sp, #4]
   2fc2e:	4643      	mov	r3, r8
   2fc30:	9300      	str	r3, [sp, #0]
   2fc32:	0033      	movs	r3, r6
   2fc34:	2200      	movs	r2, #0
   2fc36:	0029      	movs	r1, r5
   2fc38:	4660      	mov	r0, ip
   2fc3a:	4c3a      	ldr	r4, [pc, #232]	; (2fd24 <MQTTPublish+0x1b0>)
   2fc3c:	47a0      	blx	r4
   2fc3e:	0003      	movs	r3, r0
   2fc40:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2fc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fc44:	2b00      	cmp	r3, #0
   2fc46:	dd5b      	ble.n	2fd00 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2fc48:	2324      	movs	r3, #36	; 0x24
   2fc4a:	18fa      	adds	r2, r7, r3
   2fc4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2fc4e:	68fb      	ldr	r3, [r7, #12]
   2fc50:	0018      	movs	r0, r3
   2fc52:	4b35      	ldr	r3, [pc, #212]	; (2fd28 <MQTTPublish+0x1b4>)
   2fc54:	4798      	blx	r3
   2fc56:	0003      	movs	r3, r0
   2fc58:	637b      	str	r3, [r7, #52]	; 0x34
   2fc5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2fc5c:	2b00      	cmp	r3, #0
   2fc5e:	d151      	bne.n	2fd04 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2fc60:	687b      	ldr	r3, [r7, #4]
   2fc62:	781b      	ldrb	r3, [r3, #0]
   2fc64:	2b01      	cmp	r3, #1
   2fc66:	d122      	bne.n	2fcae <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2fc68:	2324      	movs	r3, #36	; 0x24
   2fc6a:	18fa      	adds	r2, r7, r3
   2fc6c:	68fb      	ldr	r3, [r7, #12]
   2fc6e:	2104      	movs	r1, #4
   2fc70:	0018      	movs	r0, r3
   2fc72:	4b2e      	ldr	r3, [pc, #184]	; (2fd2c <MQTTPublish+0x1b8>)
   2fc74:	4798      	blx	r3
   2fc76:	0003      	movs	r3, r0
   2fc78:	2b04      	cmp	r3, #4
   2fc7a:	d114      	bne.n	2fca6 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fc7c:	68fb      	ldr	r3, [r7, #12]
   2fc7e:	695c      	ldr	r4, [r3, #20]
   2fc80:	68fb      	ldr	r3, [r7, #12]
   2fc82:	68db      	ldr	r3, [r3, #12]
   2fc84:	2216      	movs	r2, #22
   2fc86:	18ba      	adds	r2, r7, r2
   2fc88:	2115      	movs	r1, #21
   2fc8a:	1879      	adds	r1, r7, r1
   2fc8c:	2014      	movs	r0, #20
   2fc8e:	1838      	adds	r0, r7, r0
   2fc90:	9300      	str	r3, [sp, #0]
   2fc92:	0023      	movs	r3, r4
   2fc94:	4c26      	ldr	r4, [pc, #152]	; (2fd30 <MQTTPublish+0x1bc>)
   2fc96:	47a0      	blx	r4
   2fc98:	0003      	movs	r3, r0
   2fc9a:	2b01      	cmp	r3, #1
   2fc9c:	d033      	beq.n	2fd06 <MQTTPublish+0x192>
                rc = FAILURE;
   2fc9e:	2301      	movs	r3, #1
   2fca0:	425b      	negs	r3, r3
   2fca2:	637b      	str	r3, [r7, #52]	; 0x34
   2fca4:	e02f      	b.n	2fd06 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fca6:	2301      	movs	r3, #1
   2fca8:	425b      	negs	r3, r3
   2fcaa:	637b      	str	r3, [r7, #52]	; 0x34
   2fcac:	e02b      	b.n	2fd06 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2fcae:	687b      	ldr	r3, [r7, #4]
   2fcb0:	781b      	ldrb	r3, [r3, #0]
   2fcb2:	2b02      	cmp	r3, #2
   2fcb4:	d127      	bne.n	2fd06 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2fcb6:	2324      	movs	r3, #36	; 0x24
   2fcb8:	18fa      	adds	r2, r7, r3
   2fcba:	68fb      	ldr	r3, [r7, #12]
   2fcbc:	2107      	movs	r1, #7
   2fcbe:	0018      	movs	r0, r3
   2fcc0:	4b1a      	ldr	r3, [pc, #104]	; (2fd2c <MQTTPublish+0x1b8>)
   2fcc2:	4798      	blx	r3
   2fcc4:	0003      	movs	r3, r0
   2fcc6:	2b07      	cmp	r3, #7
   2fcc8:	d114      	bne.n	2fcf4 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fcca:	68fb      	ldr	r3, [r7, #12]
   2fccc:	695c      	ldr	r4, [r3, #20]
   2fcce:	68fb      	ldr	r3, [r7, #12]
   2fcd0:	68db      	ldr	r3, [r3, #12]
   2fcd2:	2212      	movs	r2, #18
   2fcd4:	18ba      	adds	r2, r7, r2
   2fcd6:	2111      	movs	r1, #17
   2fcd8:	1879      	adds	r1, r7, r1
   2fcda:	2010      	movs	r0, #16
   2fcdc:	1838      	adds	r0, r7, r0
   2fcde:	9300      	str	r3, [sp, #0]
   2fce0:	0023      	movs	r3, r4
   2fce2:	4c13      	ldr	r4, [pc, #76]	; (2fd30 <MQTTPublish+0x1bc>)
   2fce4:	47a0      	blx	r4
   2fce6:	0003      	movs	r3, r0
   2fce8:	2b01      	cmp	r3, #1
   2fcea:	d00c      	beq.n	2fd06 <MQTTPublish+0x192>
                rc = FAILURE;
   2fcec:	2301      	movs	r3, #1
   2fcee:	425b      	negs	r3, r3
   2fcf0:	637b      	str	r3, [r7, #52]	; 0x34
   2fcf2:	e008      	b.n	2fd06 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fcf4:	2301      	movs	r3, #1
   2fcf6:	425b      	negs	r3, r3
   2fcf8:	637b      	str	r3, [r7, #52]	; 0x34
   2fcfa:	e004      	b.n	2fd06 <MQTTPublish+0x192>
		goto exit;
   2fcfc:	46c0      	nop			; (mov r8, r8)
   2fcfe:	e002      	b.n	2fd06 <MQTTPublish+0x192>
        goto exit;
   2fd00:	46c0      	nop			; (mov r8, r8)
   2fd02:	e000      	b.n	2fd06 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2fd04:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fd06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2fd08:	0018      	movs	r0, r3
   2fd0a:	46bd      	mov	sp, r7
   2fd0c:	b00f      	add	sp, #60	; 0x3c
   2fd0e:	bc0c      	pop	{r2, r3}
   2fd10:	4690      	mov	r8, r2
   2fd12:	4699      	mov	r9, r3
   2fd14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fd16:	46c0      	nop			; (mov r8, r8)
   2fd18:	0002ff7d 	.word	0x0002ff7d
   2fd1c:	0002ff05 	.word	0x0002ff05
   2fd20:	0002f0c5 	.word	0x0002f0c5
   2fd24:	00031201 	.word	0x00031201
   2fd28:	0002f0f5 	.word	0x0002f0f5
   2fd2c:	0002f85d 	.word	0x0002f85d
   2fd30:	00030c79 	.word	0x00030c79

0002fd34 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2fd34:	b580      	push	{r7, lr}
   2fd36:	b088      	sub	sp, #32
   2fd38:	af00      	add	r7, sp, #0
   2fd3a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2fd3c:	2301      	movs	r3, #1
   2fd3e:	425b      	negs	r3, r3
   2fd40:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2fd42:	2300      	movs	r3, #0
   2fd44:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2fd46:	230c      	movs	r3, #12
   2fd48:	18fb      	adds	r3, r7, r3
   2fd4a:	0018      	movs	r0, r3
   2fd4c:	4b13      	ldr	r3, [pc, #76]	; (2fd9c <MQTTDisconnect+0x68>)
   2fd4e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fd50:	687b      	ldr	r3, [r7, #4]
   2fd52:	685a      	ldr	r2, [r3, #4]
   2fd54:	230c      	movs	r3, #12
   2fd56:	18fb      	adds	r3, r7, r3
   2fd58:	0011      	movs	r1, r2
   2fd5a:	0018      	movs	r0, r3
   2fd5c:	4b10      	ldr	r3, [pc, #64]	; (2fda0 <MQTTDisconnect+0x6c>)
   2fd5e:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2fd60:	687b      	ldr	r3, [r7, #4]
   2fd62:	691a      	ldr	r2, [r3, #16]
   2fd64:	687b      	ldr	r3, [r7, #4]
   2fd66:	689b      	ldr	r3, [r3, #8]
   2fd68:	0019      	movs	r1, r3
   2fd6a:	0010      	movs	r0, r2
   2fd6c:	4b0d      	ldr	r3, [pc, #52]	; (2fda4 <MQTTDisconnect+0x70>)
   2fd6e:	4798      	blx	r3
   2fd70:	0003      	movs	r3, r0
   2fd72:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2fd74:	69bb      	ldr	r3, [r7, #24]
   2fd76:	2b00      	cmp	r3, #0
   2fd78:	dd08      	ble.n	2fd8c <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2fd7a:	230c      	movs	r3, #12
   2fd7c:	18fa      	adds	r2, r7, r3
   2fd7e:	69b9      	ldr	r1, [r7, #24]
   2fd80:	687b      	ldr	r3, [r7, #4]
   2fd82:	0018      	movs	r0, r3
   2fd84:	4b08      	ldr	r3, [pc, #32]	; (2fda8 <MQTTDisconnect+0x74>)
   2fd86:	4798      	blx	r3
   2fd88:	0003      	movs	r3, r0
   2fd8a:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2fd8c:	687b      	ldr	r3, [r7, #4]
   2fd8e:	2200      	movs	r2, #0
   2fd90:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fd92:	69fb      	ldr	r3, [r7, #28]
}
   2fd94:	0018      	movs	r0, r3
   2fd96:	46bd      	mov	sp, r7
   2fd98:	b008      	add	sp, #32
   2fd9a:	bd80      	pop	{r7, pc}
   2fd9c:	0002ff7d 	.word	0x0002ff7d
   2fda0:	0002ff05 	.word	0x0002ff05
   2fda4:	00030b2d 	.word	0x00030b2d
   2fda8:	0002f0f5 	.word	0x0002f0f5

0002fdac <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2fdac:	b580      	push	{r7, lr}
   2fdae:	b084      	sub	sp, #16
   2fdb0:	af00      	add	r7, sp, #0
   2fdb2:	0002      	movs	r2, r0
   2fdb4:	1dfb      	adds	r3, r7, #7
   2fdb6:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fdb8:	2300      	movs	r3, #0
   2fdba:	60fb      	str	r3, [r7, #12]
   2fdbc:	e01c      	b.n	2fdf8 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2fdbe:	4a12      	ldr	r2, [pc, #72]	; (2fe08 <isMQTTSocket+0x5c>)
   2fdc0:	68fb      	ldr	r3, [r7, #12]
   2fdc2:	2164      	movs	r1, #100	; 0x64
   2fdc4:	434b      	muls	r3, r1
   2fdc6:	18d3      	adds	r3, r2, r3
   2fdc8:	3360      	adds	r3, #96	; 0x60
   2fdca:	681b      	ldr	r3, [r3, #0]
   2fdcc:	2b00      	cmp	r3, #0
   2fdce:	d010      	beq.n	2fdf2 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2fdd0:	4a0d      	ldr	r2, [pc, #52]	; (2fe08 <isMQTTSocket+0x5c>)
   2fdd2:	68fb      	ldr	r3, [r7, #12]
   2fdd4:	2164      	movs	r1, #100	; 0x64
   2fdd6:	434b      	muls	r3, r1
   2fdd8:	18d3      	adds	r3, r2, r3
   2fdda:	3360      	adds	r3, #96	; 0x60
   2fddc:	681b      	ldr	r3, [r3, #0]
   2fdde:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2fde0:	68bb      	ldr	r3, [r7, #8]
   2fde2:	6a1a      	ldr	r2, [r3, #32]
   2fde4:	1dfb      	adds	r3, r7, #7
   2fde6:	781b      	ldrb	r3, [r3, #0]
   2fde8:	b25b      	sxtb	r3, r3
   2fdea:	429a      	cmp	r2, r3
   2fdec:	d101      	bne.n	2fdf2 <isMQTTSocket+0x46>
				return true;
   2fdee:	2301      	movs	r3, #1
   2fdf0:	e006      	b.n	2fe00 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fdf2:	68fb      	ldr	r3, [r7, #12]
   2fdf4:	3301      	adds	r3, #1
   2fdf6:	60fb      	str	r3, [r7, #12]
   2fdf8:	68fb      	ldr	r3, [r7, #12]
   2fdfa:	2b06      	cmp	r3, #6
   2fdfc:	d9df      	bls.n	2fdbe <isMQTTSocket+0x12>
		}
	}
	return false;
   2fdfe:	2300      	movs	r3, #0
}
   2fe00:	0018      	movs	r0, r3
   2fe02:	46bd      	mov	sp, r7
   2fe04:	b004      	add	sp, #16
   2fe06:	bd80      	pop	{r7, pc}
   2fe08:	20004434 	.word	0x20004434

0002fe0c <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2fe0c:	b580      	push	{r7, lr}
   2fe0e:	b082      	sub	sp, #8
   2fe10:	af00      	add	r7, sp, #0
   2fe12:	6078      	str	r0, [r7, #4]
   2fe14:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2fe16:	4b0d      	ldr	r3, [pc, #52]	; (2fe4c <dnsResolveCallback+0x40>)
   2fe18:	781b      	ldrb	r3, [r3, #0]
   2fe1a:	2201      	movs	r2, #1
   2fe1c:	4053      	eors	r3, r2
   2fe1e:	b2db      	uxtb	r3, r3
   2fe20:	2b00      	cmp	r3, #0
   2fe22:	d00e      	beq.n	2fe42 <dnsResolveCallback+0x36>
   2fe24:	4b0a      	ldr	r3, [pc, #40]	; (2fe50 <dnsResolveCallback+0x44>)
   2fe26:	681b      	ldr	r3, [r3, #0]
   2fe28:	687a      	ldr	r2, [r7, #4]
   2fe2a:	0011      	movs	r1, r2
   2fe2c:	0018      	movs	r0, r3
   2fe2e:	4b09      	ldr	r3, [pc, #36]	; (2fe54 <dnsResolveCallback+0x48>)
   2fe30:	4798      	blx	r3
   2fe32:	1e03      	subs	r3, r0, #0
   2fe34:	d105      	bne.n	2fe42 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2fe36:	683a      	ldr	r2, [r7, #0]
   2fe38:	4b07      	ldr	r3, [pc, #28]	; (2fe58 <dnsResolveCallback+0x4c>)
   2fe3a:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2fe3c:	4b03      	ldr	r3, [pc, #12]	; (2fe4c <dnsResolveCallback+0x40>)
   2fe3e:	2201      	movs	r2, #1
   2fe40:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2fe42:	46c0      	nop			; (mov r8, r8)
   2fe44:	46bd      	mov	sp, r7
   2fe46:	b002      	add	sp, #8
   2fe48:	bd80      	pop	{r7, pc}
   2fe4a:	46c0      	nop			; (mov r8, r8)
   2fe4c:	20004324 	.word	0x20004324
   2fe50:	20004430 	.word	0x20004430
   2fe54:	00035967 	.word	0x00035967
   2fe58:	2000431c 	.word	0x2000431c

0002fe5c <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2fe5c:	b580      	push	{r7, lr}
   2fe5e:	b084      	sub	sp, #16
   2fe60:	af00      	add	r7, sp, #0
   2fe62:	603a      	str	r2, [r7, #0]
   2fe64:	1dfb      	adds	r3, r7, #7
   2fe66:	1c02      	adds	r2, r0, #0
   2fe68:	701a      	strb	r2, [r3, #0]
   2fe6a:	1dbb      	adds	r3, r7, #6
   2fe6c:	1c0a      	adds	r2, r1, #0
   2fe6e:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2fe70:	1dfb      	adds	r3, r7, #7
   2fe72:	781b      	ldrb	r3, [r3, #0]
   2fe74:	b25b      	sxtb	r3, r3
   2fe76:	0018      	movs	r0, r3
   2fe78:	4b12      	ldr	r3, [pc, #72]	; (2fec4 <tcpClientSocketEventHandler+0x68>)
   2fe7a:	4798      	blx	r3
   2fe7c:	1e03      	subs	r3, r0, #0
   2fe7e:	d01c      	beq.n	2feba <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2fe80:	1dbb      	adds	r3, r7, #6
   2fe82:	781b      	ldrb	r3, [r3, #0]
   2fe84:	2b06      	cmp	r3, #6
   2fe86:	d00c      	beq.n	2fea2 <tcpClientSocketEventHandler+0x46>
   2fe88:	2b07      	cmp	r3, #7
   2fe8a:	d006      	beq.n	2fe9a <tcpClientSocketEventHandler+0x3e>
   2fe8c:	2b05      	cmp	r3, #5
   2fe8e:	d000      	beq.n	2fe92 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2fe90:	e013      	b.n	2feba <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2fe92:	4b0d      	ldr	r3, [pc, #52]	; (2fec8 <tcpClientSocketEventHandler+0x6c>)
   2fe94:	2201      	movs	r2, #1
   2fe96:	701a      	strb	r2, [r3, #0]
			break;
   2fe98:	e00f      	b.n	2feba <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2fe9a:	4b0c      	ldr	r3, [pc, #48]	; (2fecc <tcpClientSocketEventHandler+0x70>)
   2fe9c:	2201      	movs	r2, #1
   2fe9e:	701a      	strb	r2, [r3, #0]
			break;
   2fea0:	e00b      	b.n	2feba <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2fea2:	683b      	ldr	r3, [r7, #0]
   2fea4:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2fea6:	68fb      	ldr	r3, [r7, #12]
   2fea8:	2204      	movs	r2, #4
   2feaa:	5e9b      	ldrsh	r3, [r3, r2]
   2feac:	001a      	movs	r2, r3
   2feae:	4b08      	ldr	r3, [pc, #32]	; (2fed0 <tcpClientSocketEventHandler+0x74>)
   2feb0:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2feb2:	4b08      	ldr	r3, [pc, #32]	; (2fed4 <tcpClientSocketEventHandler+0x78>)
   2feb4:	2201      	movs	r2, #1
   2feb6:	701a      	strb	r2, [r3, #0]
			break;
   2feb8:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2feba:	46c0      	nop			; (mov r8, r8)
   2febc:	46bd      	mov	sp, r7
   2febe:	b004      	add	sp, #16
   2fec0:	bd80      	pop	{r7, pc}
   2fec2:	46c0      	nop			; (mov r8, r8)
   2fec4:	0002fdad 	.word	0x0002fdad
   2fec8:	20004325 	.word	0x20004325
   2fecc:	20004326 	.word	0x20004326
   2fed0:	20004320 	.word	0x20004320
   2fed4:	20004327 	.word	0x20004327

0002fed8 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2fed8:	b580      	push	{r7, lr}
   2feda:	b082      	sub	sp, #8
   2fedc:	af00      	add	r7, sp, #0
   2fede:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2fee0:	687b      	ldr	r3, [r7, #4]
   2fee2:	3304      	adds	r3, #4
   2fee4:	687a      	ldr	r2, [r7, #4]
   2fee6:	0011      	movs	r1, r2
   2fee8:	0018      	movs	r0, r3
   2feea:	4b05      	ldr	r3, [pc, #20]	; (2ff00 <TimerIsExpired+0x28>)
   2feec:	4798      	blx	r3
   2feee:	0003      	movs	r3, r0
   2fef0:	3b01      	subs	r3, #1
   2fef2:	425a      	negs	r2, r3
   2fef4:	4153      	adcs	r3, r2
   2fef6:	b2db      	uxtb	r3, r3
}
   2fef8:	0018      	movs	r0, r3
   2fefa:	46bd      	mov	sp, r7
   2fefc:	b002      	add	sp, #8
   2fefe:	bd80      	pop	{r7, pc}
   2ff00:	0001d5e1 	.word	0x0001d5e1

0002ff04 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2ff04:	b580      	push	{r7, lr}
   2ff06:	b082      	sub	sp, #8
   2ff08:	af00      	add	r7, sp, #0
   2ff0a:	6078      	str	r0, [r7, #4]
   2ff0c:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2ff0e:	687b      	ldr	r3, [r7, #4]
   2ff10:	683a      	ldr	r2, [r7, #0]
   2ff12:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2ff14:	687b      	ldr	r3, [r7, #4]
   2ff16:	3304      	adds	r3, #4
   2ff18:	0018      	movs	r0, r3
   2ff1a:	4b03      	ldr	r3, [pc, #12]	; (2ff28 <TimerCountdownMS+0x24>)
   2ff1c:	4798      	blx	r3
}
   2ff1e:	46c0      	nop			; (mov r8, r8)
   2ff20:	46bd      	mov	sp, r7
   2ff22:	b002      	add	sp, #8
   2ff24:	bd80      	pop	{r7, pc}
   2ff26:	46c0      	nop			; (mov r8, r8)
   2ff28:	0001d575 	.word	0x0001d575

0002ff2c <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2ff2c:	b580      	push	{r7, lr}
   2ff2e:	b082      	sub	sp, #8
   2ff30:	af00      	add	r7, sp, #0
   2ff32:	6078      	str	r0, [r7, #4]
   2ff34:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2ff36:	683b      	ldr	r3, [r7, #0]
   2ff38:	22fa      	movs	r2, #250	; 0xfa
   2ff3a:	0092      	lsls	r2, r2, #2
   2ff3c:	435a      	muls	r2, r3
   2ff3e:	687b      	ldr	r3, [r7, #4]
   2ff40:	0011      	movs	r1, r2
   2ff42:	0018      	movs	r0, r3
   2ff44:	4b02      	ldr	r3, [pc, #8]	; (2ff50 <TimerCountdown+0x24>)
   2ff46:	4798      	blx	r3
}
   2ff48:	46c0      	nop			; (mov r8, r8)
   2ff4a:	46bd      	mov	sp, r7
   2ff4c:	b002      	add	sp, #8
   2ff4e:	bd80      	pop	{r7, pc}
   2ff50:	0002ff05 	.word	0x0002ff05

0002ff54 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2ff54:	b580      	push	{r7, lr}
   2ff56:	b082      	sub	sp, #8
   2ff58:	af00      	add	r7, sp, #0
   2ff5a:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2ff5c:	687b      	ldr	r3, [r7, #4]
   2ff5e:	3304      	adds	r3, #4
   2ff60:	687a      	ldr	r2, [r7, #4]
   2ff62:	0011      	movs	r1, r2
   2ff64:	0018      	movs	r0, r3
   2ff66:	4b04      	ldr	r3, [pc, #16]	; (2ff78 <TimerLeftMS+0x24>)
   2ff68:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2ff6a:	687b      	ldr	r3, [r7, #4]
   2ff6c:	681b      	ldr	r3, [r3, #0]
}
   2ff6e:	0018      	movs	r0, r3
   2ff70:	46bd      	mov	sp, r7
   2ff72:	b002      	add	sp, #8
   2ff74:	bd80      	pop	{r7, pc}
   2ff76:	46c0      	nop			; (mov r8, r8)
   2ff78:	0001d5e1 	.word	0x0001d5e1

0002ff7c <TimerInit>:


void TimerInit(Timer* timer) {
   2ff7c:	b580      	push	{r7, lr}
   2ff7e:	b082      	sub	sp, #8
   2ff80:	af00      	add	r7, sp, #0
   2ff82:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2ff84:	687b      	ldr	r3, [r7, #4]
   2ff86:	2200      	movs	r2, #0
   2ff88:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2ff8a:	687b      	ldr	r3, [r7, #4]
   2ff8c:	3304      	adds	r3, #4
   2ff8e:	2208      	movs	r2, #8
   2ff90:	2100      	movs	r1, #0
   2ff92:	0018      	movs	r0, r3
   2ff94:	4b02      	ldr	r3, [pc, #8]	; (2ffa0 <TimerInit+0x24>)
   2ff96:	4798      	blx	r3
}
   2ff98:	46c0      	nop			; (mov r8, r8)
   2ff9a:	46bd      	mov	sp, r7
   2ff9c:	b002      	add	sp, #8
   2ff9e:	bd80      	pop	{r7, pc}
   2ffa0:	0003560f 	.word	0x0003560f

0002ffa4 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2ffa4:	b590      	push	{r4, r7, lr}
   2ffa6:	b085      	sub	sp, #20
   2ffa8:	af00      	add	r7, sp, #0
   2ffaa:	60f8      	str	r0, [r7, #12]
   2ffac:	60b9      	str	r1, [r7, #8]
   2ffae:	607a      	str	r2, [r7, #4]
   2ffb0:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2ffb2:	683b      	ldr	r3, [r7, #0]
   2ffb4:	2b00      	cmp	r3, #0
   2ffb6:	d101      	bne.n	2ffbc <WINC1500_read+0x18>
   2ffb8:	230a      	movs	r3, #10
   2ffba:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2ffbc:	4b2c      	ldr	r3, [pc, #176]	; (30070 <WINC1500_read+0xcc>)
   2ffbe:	681b      	ldr	r3, [r3, #0]
   2ffc0:	2b00      	cmp	r3, #0
   2ffc2:	d131      	bne.n	30028 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2ffc4:	4b2b      	ldr	r3, [pc, #172]	; (30074 <WINC1500_read+0xd0>)
   2ffc6:	2200      	movs	r2, #0
   2ffc8:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2ffca:	68fb      	ldr	r3, [r7, #12]
   2ffcc:	681b      	ldr	r3, [r3, #0]
   2ffce:	b258      	sxtb	r0, r3
   2ffd0:	683c      	ldr	r4, [r7, #0]
   2ffd2:	2380      	movs	r3, #128	; 0x80
   2ffd4:	005a      	lsls	r2, r3, #1
   2ffd6:	4928      	ldr	r1, [pc, #160]	; (30078 <WINC1500_read+0xd4>)
   2ffd8:	0023      	movs	r3, r4
   2ffda:	4c28      	ldr	r4, [pc, #160]	; (3007c <WINC1500_read+0xd8>)
   2ffdc:	47a0      	blx	r4
   2ffde:	1e03      	subs	r3, r0, #0
   2ffe0:	d005      	beq.n	2ffee <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2ffe2:	2301      	movs	r3, #1
   2ffe4:	425b      	negs	r3, r3
   2ffe6:	e03e      	b.n	30066 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2ffe8:	2000      	movs	r0, #0
   2ffea:	4b25      	ldr	r3, [pc, #148]	; (30080 <WINC1500_read+0xdc>)
   2ffec:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2ffee:	4b21      	ldr	r3, [pc, #132]	; (30074 <WINC1500_read+0xd0>)
   2fff0:	781b      	ldrb	r3, [r3, #0]
   2fff2:	2201      	movs	r2, #1
   2fff4:	4053      	eors	r3, r2
   2fff6:	b2db      	uxtb	r3, r3
   2fff8:	2b00      	cmp	r3, #0
   2fffa:	d1f5      	bne.n	2ffe8 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2fffc:	4b21      	ldr	r3, [pc, #132]	; (30084 <WINC1500_read+0xe0>)
   2fffe:	681b      	ldr	r3, [r3, #0]
   30000:	2b00      	cmp	r3, #0
   30002:	dd08      	ble.n	30016 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   30004:	4b1f      	ldr	r3, [pc, #124]	; (30084 <WINC1500_read+0xe0>)
   30006:	681b      	ldr	r3, [r3, #0]
   30008:	001a      	movs	r2, r3
   3000a:	4b19      	ldr	r3, [pc, #100]	; (30070 <WINC1500_read+0xcc>)
   3000c:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   3000e:	4b1e      	ldr	r3, [pc, #120]	; (30088 <WINC1500_read+0xe4>)
   30010:	2200      	movs	r2, #0
   30012:	601a      	str	r2, [r3, #0]
   30014:	e008      	b.n	30028 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   30016:	4b16      	ldr	r3, [pc, #88]	; (30070 <WINC1500_read+0xcc>)
   30018:	2200      	movs	r2, #0
   3001a:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   3001c:	4b1a      	ldr	r3, [pc, #104]	; (30088 <WINC1500_read+0xe4>)
   3001e:	2200      	movs	r2, #0
   30020:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   30022:	4b18      	ldr	r3, [pc, #96]	; (30084 <WINC1500_read+0xe0>)
   30024:	681b      	ldr	r3, [r3, #0]
   30026:	e01e      	b.n	30066 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   30028:	4b11      	ldr	r3, [pc, #68]	; (30070 <WINC1500_read+0xcc>)
   3002a:	681b      	ldr	r3, [r3, #0]
   3002c:	001a      	movs	r2, r3
   3002e:	687b      	ldr	r3, [r7, #4]
   30030:	4293      	cmp	r3, r2
   30032:	dd02      	ble.n	3003a <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   30034:	2301      	movs	r3, #1
   30036:	425b      	negs	r3, r3
   30038:	e015      	b.n	30066 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   3003a:	4b13      	ldr	r3, [pc, #76]	; (30088 <WINC1500_read+0xe4>)
   3003c:	681a      	ldr	r2, [r3, #0]
   3003e:	4b0e      	ldr	r3, [pc, #56]	; (30078 <WINC1500_read+0xd4>)
   30040:	18d1      	adds	r1, r2, r3
   30042:	687a      	ldr	r2, [r7, #4]
   30044:	68bb      	ldr	r3, [r7, #8]
   30046:	0018      	movs	r0, r3
   30048:	4b10      	ldr	r3, [pc, #64]	; (3008c <WINC1500_read+0xe8>)
   3004a:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   3004c:	4b08      	ldr	r3, [pc, #32]	; (30070 <WINC1500_read+0xcc>)
   3004e:	681a      	ldr	r2, [r3, #0]
   30050:	687b      	ldr	r3, [r7, #4]
   30052:	1ad2      	subs	r2, r2, r3
   30054:	4b06      	ldr	r3, [pc, #24]	; (30070 <WINC1500_read+0xcc>)
   30056:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   30058:	4b0b      	ldr	r3, [pc, #44]	; (30088 <WINC1500_read+0xe4>)
   3005a:	681a      	ldr	r2, [r3, #0]
   3005c:	687b      	ldr	r3, [r7, #4]
   3005e:	18d2      	adds	r2, r2, r3
   30060:	4b09      	ldr	r3, [pc, #36]	; (30088 <WINC1500_read+0xe4>)
   30062:	601a      	str	r2, [r3, #0]
  
  return len;
   30064:	687b      	ldr	r3, [r7, #4]
}
   30066:	0018      	movs	r0, r3
   30068:	46bd      	mov	sp, r7
   3006a:	b005      	add	sp, #20
   3006c:	bd90      	pop	{r4, r7, pc}
   3006e:	46c0      	nop			; (mov r8, r8)
   30070:	2000442c 	.word	0x2000442c
   30074:	20004327 	.word	0x20004327
   30078:	20004328 	.word	0x20004328
   3007c:	0002652d 	.word	0x0002652d
   30080:	00022a75 	.word	0x00022a75
   30084:	20004320 	.word	0x20004320
   30088:	20004428 	.word	0x20004428
   3008c:	000355d9 	.word	0x000355d9

00030090 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   30090:	b590      	push	{r4, r7, lr}
   30092:	b085      	sub	sp, #20
   30094:	af00      	add	r7, sp, #0
   30096:	60f8      	str	r0, [r7, #12]
   30098:	60b9      	str	r1, [r7, #8]
   3009a:	607a      	str	r2, [r7, #4]
   3009c:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   3009e:	4b10      	ldr	r3, [pc, #64]	; (300e0 <WINC1500_write+0x50>)
   300a0:	2200      	movs	r2, #0
   300a2:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   300a4:	68fb      	ldr	r3, [r7, #12]
   300a6:	681b      	ldr	r3, [r3, #0]
   300a8:	b258      	sxtb	r0, r3
   300aa:	687b      	ldr	r3, [r7, #4]
   300ac:	b29a      	uxth	r2, r3
   300ae:	68b9      	ldr	r1, [r7, #8]
   300b0:	2300      	movs	r3, #0
   300b2:	4c0c      	ldr	r4, [pc, #48]	; (300e4 <WINC1500_write+0x54>)
   300b4:	47a0      	blx	r4
   300b6:	1e03      	subs	r3, r0, #0
   300b8:	d005      	beq.n	300c6 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   300ba:	2301      	movs	r3, #1
   300bc:	425b      	negs	r3, r3
   300be:	e00a      	b.n	300d6 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   300c0:	2000      	movs	r0, #0
   300c2:	4b09      	ldr	r3, [pc, #36]	; (300e8 <WINC1500_write+0x58>)
   300c4:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   300c6:	4b06      	ldr	r3, [pc, #24]	; (300e0 <WINC1500_write+0x50>)
   300c8:	781b      	ldrb	r3, [r3, #0]
   300ca:	2201      	movs	r2, #1
   300cc:	4053      	eors	r3, r2
   300ce:	b2db      	uxtb	r3, r3
   300d0:	2b00      	cmp	r3, #0
   300d2:	d1f5      	bne.n	300c0 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   300d4:	687b      	ldr	r3, [r7, #4]
}
   300d6:	0018      	movs	r0, r3
   300d8:	46bd      	mov	sp, r7
   300da:	b005      	add	sp, #20
   300dc:	bd90      	pop	{r4, r7, pc}
   300de:	46c0      	nop			; (mov r8, r8)
   300e0:	20004326 	.word	0x20004326
   300e4:	000263c9 	.word	0x000263c9
   300e8:	00022a75 	.word	0x00022a75

000300ec <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   300ec:	b580      	push	{r7, lr}
   300ee:	b082      	sub	sp, #8
   300f0:	af00      	add	r7, sp, #0
   300f2:	6078      	str	r0, [r7, #4]
	close(n->socket);
   300f4:	687b      	ldr	r3, [r7, #4]
   300f6:	681b      	ldr	r3, [r3, #0]
   300f8:	b25b      	sxtb	r3, r3
   300fa:	0018      	movs	r0, r3
   300fc:	4b06      	ldr	r3, [pc, #24]	; (30118 <WINC1500_disconnect+0x2c>)
   300fe:	4798      	blx	r3
	n->socket=-1;
   30100:	687b      	ldr	r3, [r7, #4]
   30102:	2201      	movs	r2, #1
   30104:	4252      	negs	r2, r2
   30106:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   30108:	4b04      	ldr	r3, [pc, #16]	; (3011c <WINC1500_disconnect+0x30>)
   3010a:	2200      	movs	r2, #0
   3010c:	701a      	strb	r2, [r3, #0]
}
   3010e:	46c0      	nop			; (mov r8, r8)
   30110:	46bd      	mov	sp, r7
   30112:	b002      	add	sp, #8
   30114:	bd80      	pop	{r7, pc}
   30116:	46c0      	nop			; (mov r8, r8)
   30118:	000266ad 	.word	0x000266ad
   3011c:	20004325 	.word	0x20004325

00030120 <NetworkInit>:


void NetworkInit(Network* n) {
   30120:	b580      	push	{r7, lr}
   30122:	b082      	sub	sp, #8
   30124:	af00      	add	r7, sp, #0
   30126:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   30128:	687b      	ldr	r3, [r7, #4]
   3012a:	2201      	movs	r2, #1
   3012c:	4252      	negs	r2, r2
   3012e:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   30130:	687b      	ldr	r3, [r7, #4]
   30132:	4a06      	ldr	r2, [pc, #24]	; (3014c <NetworkInit+0x2c>)
   30134:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   30136:	687b      	ldr	r3, [r7, #4]
   30138:	4a05      	ldr	r2, [pc, #20]	; (30150 <NetworkInit+0x30>)
   3013a:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   3013c:	687b      	ldr	r3, [r7, #4]
   3013e:	4a05      	ldr	r2, [pc, #20]	; (30154 <NetworkInit+0x34>)
   30140:	611a      	str	r2, [r3, #16]
}
   30142:	46c0      	nop			; (mov r8, r8)
   30144:	46bd      	mov	sp, r7
   30146:	b002      	add	sp, #8
   30148:	bd80      	pop	{r7, pc}
   3014a:	46c0      	nop			; (mov r8, r8)
   3014c:	0002ffa5 	.word	0x0002ffa5
   30150:	00030091 	.word	0x00030091
   30154:	000300ed 	.word	0x000300ed

00030158 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   30158:	b580      	push	{r7, lr}
   3015a:	b088      	sub	sp, #32
   3015c:	af00      	add	r7, sp, #0
   3015e:	60f8      	str	r0, [r7, #12]
   30160:	60b9      	str	r1, [r7, #8]
   30162:	607a      	str	r2, [r7, #4]
   30164:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   30166:	4b37      	ldr	r3, [pc, #220]	; (30244 <ConnectNetwork+0xec>)
   30168:	2200      	movs	r2, #0
   3016a:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   3016c:	4b36      	ldr	r3, [pc, #216]	; (30248 <ConnectNetwork+0xf0>)
   3016e:	68ba      	ldr	r2, [r7, #8]
   30170:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   30172:	68bb      	ldr	r3, [r7, #8]
   30174:	0018      	movs	r0, r3
   30176:	4b35      	ldr	r3, [pc, #212]	; (3024c <ConnectNetwork+0xf4>)
   30178:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   3017a:	e002      	b.n	30182 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   3017c:	2000      	movs	r0, #0
   3017e:	4b34      	ldr	r3, [pc, #208]	; (30250 <ConnectNetwork+0xf8>)
   30180:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   30182:	4b30      	ldr	r3, [pc, #192]	; (30244 <ConnectNetwork+0xec>)
   30184:	781b      	ldrb	r3, [r3, #0]
   30186:	2201      	movs	r2, #1
   30188:	4053      	eors	r3, r2
   3018a:	b2db      	uxtb	r3, r3
   3018c:	2b00      	cmp	r3, #0
   3018e:	d1f5      	bne.n	3017c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   30190:	4b30      	ldr	r3, [pc, #192]	; (30254 <ConnectNetwork+0xfc>)
   30192:	681a      	ldr	r2, [r3, #0]
   30194:	68fb      	ldr	r3, [r7, #12]
   30196:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   30198:	2310      	movs	r3, #16
   3019a:	18fb      	adds	r3, r7, r3
   3019c:	2202      	movs	r2, #2
   3019e:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   301a0:	687b      	ldr	r3, [r7, #4]
   301a2:	b29b      	uxth	r3, r3
   301a4:	021b      	lsls	r3, r3, #8
   301a6:	b21a      	sxth	r2, r3
   301a8:	687b      	ldr	r3, [r7, #4]
   301aa:	b29b      	uxth	r3, r3
   301ac:	0a1b      	lsrs	r3, r3, #8
   301ae:	b29b      	uxth	r3, r3
   301b0:	b21b      	sxth	r3, r3
   301b2:	4313      	orrs	r3, r2
   301b4:	b21b      	sxth	r3, r3
   301b6:	b29a      	uxth	r2, r3
   301b8:	2310      	movs	r3, #16
   301ba:	18fb      	adds	r3, r7, r3
   301bc:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   301be:	4b25      	ldr	r3, [pc, #148]	; (30254 <ConnectNetwork+0xfc>)
   301c0:	681b      	ldr	r3, [r3, #0]
   301c2:	001a      	movs	r2, r3
   301c4:	2310      	movs	r3, #16
   301c6:	18fb      	adds	r3, r7, r3
   301c8:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   301ca:	68fb      	ldr	r3, [r7, #12]
   301cc:	681b      	ldr	r3, [r3, #0]
   301ce:	2b00      	cmp	r3, #0
   301d0:	da0a      	bge.n	301e8 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   301d2:	683b      	ldr	r3, [r7, #0]
   301d4:	b2db      	uxtb	r3, r3
   301d6:	001a      	movs	r2, r3
   301d8:	2101      	movs	r1, #1
   301da:	2002      	movs	r0, #2
   301dc:	4b1e      	ldr	r3, [pc, #120]	; (30258 <ConnectNetwork+0x100>)
   301de:	4798      	blx	r3
   301e0:	0003      	movs	r3, r0
   301e2:	001a      	movs	r2, r3
   301e4:	68fb      	ldr	r3, [r7, #12]
   301e6:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   301e8:	68fb      	ldr	r3, [r7, #12]
   301ea:	681b      	ldr	r3, [r3, #0]
   301ec:	3301      	adds	r3, #1
   301ee:	d108      	bne.n	30202 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   301f0:	68fb      	ldr	r3, [r7, #12]
   301f2:	681b      	ldr	r3, [r3, #0]
   301f4:	b25b      	sxtb	r3, r3
   301f6:	0018      	movs	r0, r3
   301f8:	4b18      	ldr	r3, [pc, #96]	; (3025c <ConnectNetwork+0x104>)
   301fa:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   301fc:	2309      	movs	r3, #9
   301fe:	425b      	negs	r3, r3
   30200:	e01c      	b.n	3023c <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   30202:	68fb      	ldr	r3, [r7, #12]
   30204:	681b      	ldr	r3, [r3, #0]
   30206:	b25b      	sxtb	r3, r3
   30208:	2210      	movs	r2, #16
   3020a:	18b9      	adds	r1, r7, r2
   3020c:	2210      	movs	r2, #16
   3020e:	0018      	movs	r0, r3
   30210:	4b13      	ldr	r3, [pc, #76]	; (30260 <ConnectNetwork+0x108>)
   30212:	4798      	blx	r3
   30214:	1e03      	subs	r3, r0, #0
   30216:	d002      	beq.n	3021e <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   30218:	2309      	movs	r3, #9
   3021a:	425b      	negs	r3, r3
   3021c:	e00e      	b.n	3023c <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   3021e:	4b11      	ldr	r3, [pc, #68]	; (30264 <ConnectNetwork+0x10c>)
   30220:	2200      	movs	r2, #0
   30222:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   30224:	e002      	b.n	3022c <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   30226:	2000      	movs	r0, #0
   30228:	4b09      	ldr	r3, [pc, #36]	; (30250 <ConnectNetwork+0xf8>)
   3022a:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   3022c:	4b0d      	ldr	r3, [pc, #52]	; (30264 <ConnectNetwork+0x10c>)
   3022e:	781b      	ldrb	r3, [r3, #0]
   30230:	2201      	movs	r2, #1
   30232:	4053      	eors	r3, r2
   30234:	b2db      	uxtb	r3, r3
   30236:	2b00      	cmp	r3, #0
   30238:	d1f5      	bne.n	30226 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   3023a:	2300      	movs	r3, #0
   3023c:	0018      	movs	r0, r3
   3023e:	46bd      	mov	sp, r7
   30240:	b008      	add	sp, #32
   30242:	bd80      	pop	{r7, pc}
   30244:	20004324 	.word	0x20004324
   30248:	20004430 	.word	0x20004430
   3024c:	000268f5 	.word	0x000268f5
   30250:	00022a75 	.word	0x00022a75
   30254:	2000431c 	.word	0x2000431c
   30258:	000260a1 	.word	0x000260a1
   3025c:	000266ad 	.word	0x000266ad
   30260:	000262b5 	.word	0x000262b5
   30264:	20004325 	.word	0x20004325

00030268 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   30268:	b580      	push	{r7, lr}
   3026a:	b084      	sub	sp, #16
   3026c:	af00      	add	r7, sp, #0
   3026e:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   30270:	687b      	ldr	r3, [r7, #4]
   30272:	2b00      	cmp	r3, #0
   30274:	d022      	beq.n	302bc <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   30276:	2300      	movs	r3, #0
   30278:	60fb      	str	r3, [r7, #12]
   3027a:	e01b      	b.n	302b4 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   3027c:	4a11      	ldr	r2, [pc, #68]	; (302c4 <allocateClient+0x5c>)
   3027e:	68fb      	ldr	r3, [r7, #12]
   30280:	2164      	movs	r1, #100	; 0x64
   30282:	434b      	muls	r3, r1
   30284:	18d3      	adds	r3, r2, r3
   30286:	3360      	adds	r3, #96	; 0x60
   30288:	681b      	ldr	r3, [r3, #0]
   3028a:	2b00      	cmp	r3, #0
   3028c:	d10f      	bne.n	302ae <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   3028e:	4a0d      	ldr	r2, [pc, #52]	; (302c4 <allocateClient+0x5c>)
   30290:	68fb      	ldr	r3, [r7, #12]
   30292:	2164      	movs	r1, #100	; 0x64
   30294:	434b      	muls	r3, r1
   30296:	18d3      	adds	r3, r2, r3
   30298:	3360      	adds	r3, #96	; 0x60
   3029a:	687a      	ldr	r2, [r7, #4]
   3029c:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   3029e:	68fb      	ldr	r3, [r7, #12]
   302a0:	2264      	movs	r2, #100	; 0x64
   302a2:	435a      	muls	r2, r3
   302a4:	4b07      	ldr	r3, [pc, #28]	; (302c4 <allocateClient+0x5c>)
   302a6:	18d2      	adds	r2, r2, r3
   302a8:	687b      	ldr	r3, [r7, #4]
   302aa:	61da      	str	r2, [r3, #28]
			return;
   302ac:	e007      	b.n	302be <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   302ae:	68fb      	ldr	r3, [r7, #12]
   302b0:	3301      	adds	r3, #1
   302b2:	60fb      	str	r3, [r7, #12]
   302b4:	68fb      	ldr	r3, [r7, #12]
   302b6:	2b06      	cmp	r3, #6
   302b8:	d9e0      	bls.n	3027c <allocateClient+0x14>
   302ba:	e000      	b.n	302be <allocateClient+0x56>
		return;
   302bc:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   302be:	46bd      	mov	sp, r7
   302c0:	b004      	add	sp, #16
   302c2:	bd80      	pop	{r7, pc}
   302c4:	20004434 	.word	0x20004434

000302c8 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   302c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   302ca:	b089      	sub	sp, #36	; 0x24
   302cc:	af04      	add	r7, sp, #16
   302ce:	6078      	str	r0, [r7, #4]
   302d0:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   302d2:	687b      	ldr	r3, [r7, #4]
   302d4:	2b00      	cmp	r3, #0
   302d6:	d00a      	beq.n	302ee <mqtt_init+0x26>
   302d8:	683b      	ldr	r3, [r7, #0]
   302da:	2b00      	cmp	r3, #0
   302dc:	d007      	beq.n	302ee <mqtt_init+0x26>
   302de:	683b      	ldr	r3, [r7, #0]
   302e0:	691b      	ldr	r3, [r3, #16]
   302e2:	2b00      	cmp	r3, #0
   302e4:	d003      	beq.n	302ee <mqtt_init+0x26>
   302e6:	683b      	ldr	r3, [r7, #0]
   302e8:	689b      	ldr	r3, [r3, #8]
   302ea:	2b00      	cmp	r3, #0
   302ec:	d102      	bne.n	302f4 <mqtt_init+0x2c>
		return FAILURE;
   302ee:	2301      	movs	r3, #1
   302f0:	425b      	negs	r3, r3
   302f2:	e034      	b.n	3035e <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   302f4:	683b      	ldr	r3, [r7, #0]
   302f6:	889b      	ldrh	r3, [r3, #4]
   302f8:	001a      	movs	r2, r3
   302fa:	23fa      	movs	r3, #250	; 0xfa
   302fc:	009b      	lsls	r3, r3, #2
   302fe:	4353      	muls	r3, r2
   30300:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   30302:	687b      	ldr	r3, [r7, #4]
   30304:	3320      	adds	r3, #32
   30306:	0018      	movs	r0, r3
   30308:	4b17      	ldr	r3, [pc, #92]	; (30368 <mqtt_init+0xa0>)
   3030a:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   3030c:	687b      	ldr	r3, [r7, #4]
   3030e:	3304      	adds	r3, #4
   30310:	6839      	ldr	r1, [r7, #0]
   30312:	2218      	movs	r2, #24
   30314:	0018      	movs	r0, r3
   30316:	4b15      	ldr	r3, [pc, #84]	; (3036c <mqtt_init+0xa4>)
   30318:	4798      	blx	r3
	allocateClient(module);
   3031a:	687b      	ldr	r3, [r7, #4]
   3031c:	0018      	movs	r0, r3
   3031e:	4b14      	ldr	r3, [pc, #80]	; (30370 <mqtt_init+0xa8>)
   30320:	4798      	blx	r3
	
	if(module->client)
   30322:	687b      	ldr	r3, [r7, #4]
   30324:	69db      	ldr	r3, [r3, #28]
   30326:	2b00      	cmp	r3, #0
   30328:	d017      	beq.n	3035a <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   3032a:	687b      	ldr	r3, [r7, #4]
   3032c:	69d8      	ldr	r0, [r3, #28]
   3032e:	687b      	ldr	r3, [r7, #4]
   30330:	3320      	adds	r3, #32
   30332:	001c      	movs	r4, r3
   30334:	683b      	ldr	r3, [r7, #0]
   30336:	691e      	ldr	r6, [r3, #16]
   30338:	683b      	ldr	r3, [r7, #0]
   3033a:	695a      	ldr	r2, [r3, #20]
   3033c:	683b      	ldr	r3, [r7, #0]
   3033e:	6899      	ldr	r1, [r3, #8]
   30340:	683b      	ldr	r3, [r7, #0]
   30342:	68db      	ldr	r3, [r3, #12]
   30344:	68fd      	ldr	r5, [r7, #12]
   30346:	9302      	str	r3, [sp, #8]
   30348:	9101      	str	r1, [sp, #4]
   3034a:	9200      	str	r2, [sp, #0]
   3034c:	0033      	movs	r3, r6
   3034e:	002a      	movs	r2, r5
   30350:	0021      	movs	r1, r4
   30352:	4c08      	ldr	r4, [pc, #32]	; (30374 <mqtt_init+0xac>)
   30354:	47a0      	blx	r4
		return SUCCESS;
   30356:	2300      	movs	r3, #0
   30358:	e001      	b.n	3035e <mqtt_init+0x96>
	}
	else
		return FAILURE;
   3035a:	2301      	movs	r3, #1
   3035c:	425b      	negs	r3, r3
}
   3035e:	0018      	movs	r0, r3
   30360:	46bd      	mov	sp, r7
   30362:	b005      	add	sp, #20
   30364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30366:	46c0      	nop			; (mov r8, r8)
   30368:	00030121 	.word	0x00030121
   3036c:	000355d9 	.word	0x000355d9
   30370:	00030269 	.word	0x00030269
   30374:	0002f199 	.word	0x0002f199

00030378 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   30378:	b580      	push	{r7, lr}
   3037a:	b082      	sub	sp, #8
   3037c:	af00      	add	r7, sp, #0
   3037e:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   30380:	687b      	ldr	r3, [r7, #4]
   30382:	4a0c      	ldr	r2, [pc, #48]	; (303b4 <mqtt_get_config_defaults+0x3c>)
   30384:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   30386:	687b      	ldr	r3, [r7, #4]
   30388:	2200      	movs	r2, #0
   3038a:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   3038c:	687b      	ldr	r3, [r7, #4]
   3038e:	223c      	movs	r2, #60	; 0x3c
   30390:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   30392:	687b      	ldr	r3, [r7, #4]
   30394:	2200      	movs	r2, #0
   30396:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   30398:	687b      	ldr	r3, [r7, #4]
   3039a:	2200      	movs	r2, #0
   3039c:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   3039e:	687b      	ldr	r3, [r7, #4]
   303a0:	2200      	movs	r2, #0
   303a2:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   303a4:	687b      	ldr	r3, [r7, #4]
   303a6:	2200      	movs	r2, #0
   303a8:	615a      	str	r2, [r3, #20]
}
   303aa:	46c0      	nop			; (mov r8, r8)
   303ac:	46bd      	mov	sp, r7
   303ae:	b002      	add	sp, #8
   303b0:	bd80      	pop	{r7, pc}
   303b2:	46c0      	nop			; (mov r8, r8)
   303b4:	0000075b 	.word	0x0000075b

000303b8 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   303b8:	b580      	push	{r7, lr}
   303ba:	b082      	sub	sp, #8
   303bc:	af00      	add	r7, sp, #0
   303be:	6078      	str	r0, [r7, #4]
   303c0:	6039      	str	r1, [r7, #0]
	if(module)
   303c2:	687b      	ldr	r3, [r7, #4]
   303c4:	2b00      	cmp	r3, #0
   303c6:	d004      	beq.n	303d2 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   303c8:	687b      	ldr	r3, [r7, #4]
   303ca:	683a      	ldr	r2, [r7, #0]
   303cc:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   303ce:	2300      	movs	r3, #0
   303d0:	e001      	b.n	303d6 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   303d2:	2301      	movs	r3, #1
   303d4:	425b      	negs	r3, r3
}
   303d6:	0018      	movs	r0, r3
   303d8:	46bd      	mov	sp, r7
   303da:	b002      	add	sp, #8
   303dc:	bd80      	pop	{r7, pc}
	...

000303e0 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   303e0:	b580      	push	{r7, lr}
   303e2:	b082      	sub	sp, #8
   303e4:	af00      	add	r7, sp, #0
   303e6:	603a      	str	r2, [r7, #0]
   303e8:	1dfb      	adds	r3, r7, #7
   303ea:	1c02      	adds	r2, r0, #0
   303ec:	701a      	strb	r2, [r3, #0]
   303ee:	1dbb      	adds	r3, r7, #6
   303f0:	1c0a      	adds	r2, r1, #0
   303f2:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   303f4:	683a      	ldr	r2, [r7, #0]
   303f6:	1dbb      	adds	r3, r7, #6
   303f8:	7819      	ldrb	r1, [r3, #0]
   303fa:	1dfb      	adds	r3, r7, #7
   303fc:	781b      	ldrb	r3, [r3, #0]
   303fe:	b25b      	sxtb	r3, r3
   30400:	0018      	movs	r0, r3
   30402:	4b03      	ldr	r3, [pc, #12]	; (30410 <mqtt_socket_event_handler+0x30>)
   30404:	4798      	blx	r3
}
   30406:	46c0      	nop			; (mov r8, r8)
   30408:	46bd      	mov	sp, r7
   3040a:	b002      	add	sp, #8
   3040c:	bd80      	pop	{r7, pc}
   3040e:	46c0      	nop			; (mov r8, r8)
   30410:	0002fe5d 	.word	0x0002fe5d

00030414 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   30414:	b580      	push	{r7, lr}
   30416:	b082      	sub	sp, #8
   30418:	af00      	add	r7, sp, #0
   3041a:	6078      	str	r0, [r7, #4]
   3041c:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   3041e:	683a      	ldr	r2, [r7, #0]
   30420:	687b      	ldr	r3, [r7, #4]
   30422:	0011      	movs	r1, r2
   30424:	0018      	movs	r0, r3
   30426:	4b03      	ldr	r3, [pc, #12]	; (30434 <mqtt_socket_resolve_handler+0x20>)
   30428:	4798      	blx	r3
}
   3042a:	46c0      	nop			; (mov r8, r8)
   3042c:	46bd      	mov	sp, r7
   3042e:	b002      	add	sp, #8
   30430:	bd80      	pop	{r7, pc}
   30432:	46c0      	nop			; (mov r8, r8)
   30434:	0002fe0d 	.word	0x0002fe0d

00030438 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   30438:	b590      	push	{r4, r7, lr}
   3043a:	b085      	sub	sp, #20
   3043c:	af00      	add	r7, sp, #0
   3043e:	6078      	str	r0, [r7, #4]
   30440:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   30442:	687b      	ldr	r3, [r7, #4]
   30444:	3320      	adds	r3, #32
   30446:	0018      	movs	r0, r3
   30448:	687b      	ldr	r3, [r7, #4]
   3044a:	889b      	ldrh	r3, [r3, #4]
   3044c:	001a      	movs	r2, r3
   3044e:	687b      	ldr	r3, [r7, #4]
   30450:	799b      	ldrb	r3, [r3, #6]
   30452:	6839      	ldr	r1, [r7, #0]
   30454:	4c09      	ldr	r4, [pc, #36]	; (3047c <mqtt_connect+0x44>)
   30456:	47a0      	blx	r4
   30458:	0003      	movs	r3, r0
   3045a:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   3045c:	687b      	ldr	r3, [r7, #4]
   3045e:	681b      	ldr	r3, [r3, #0]
   30460:	2b00      	cmp	r3, #0
   30462:	d006      	beq.n	30472 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   30464:	687b      	ldr	r3, [r7, #4]
   30466:	681b      	ldr	r3, [r3, #0]
   30468:	220c      	movs	r2, #12
   3046a:	18ba      	adds	r2, r7, r2
   3046c:	6878      	ldr	r0, [r7, #4]
   3046e:	2100      	movs	r1, #0
   30470:	4798      	blx	r3
	return connResult.sock_connected.result;
   30472:	68fb      	ldr	r3, [r7, #12]
}
   30474:	0018      	movs	r0, r3
   30476:	46bd      	mov	sp, r7
   30478:	b005      	add	sp, #20
   3047a:	bd90      	pop	{r4, r7, pc}
   3047c:	00030159 	.word	0x00030159

00030480 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   30480:	b580      	push	{r7, lr}
   30482:	b09c      	sub	sp, #112	; 0x70
   30484:	af00      	add	r7, sp, #0
   30486:	60f8      	str	r0, [r7, #12]
   30488:	607a      	str	r2, [r7, #4]
   3048a:	603b      	str	r3, [r7, #0]
   3048c:	230b      	movs	r3, #11
   3048e:	18fb      	adds	r3, r7, r3
   30490:	1c0a      	adds	r2, r1, #0
   30492:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   30494:	2310      	movs	r3, #16
   30496:	18fa      	adds	r2, r7, r3
   30498:	4b31      	ldr	r3, [pc, #196]	; (30560 <mqtt_connect_broker+0xe0>)
   3049a:	0010      	movs	r0, r2
   3049c:	0019      	movs	r1, r3
   3049e:	2358      	movs	r3, #88	; 0x58
   304a0:	001a      	movs	r2, r3
   304a2:	4b30      	ldr	r3, [pc, #192]	; (30564 <mqtt_connect_broker+0xe4>)
   304a4:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   304a6:	2310      	movs	r3, #16
   304a8:	18fb      	adds	r3, r7, r3
   304aa:	2204      	movs	r2, #4
   304ac:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   304ae:	2310      	movs	r3, #16
   304b0:	18fb      	adds	r3, r7, r3
   304b2:	6fba      	ldr	r2, [r7, #120]	; 0x78
   304b4:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   304b6:	2310      	movs	r3, #16
   304b8:	18fb      	adds	r3, r7, r3
   304ba:	687a      	ldr	r2, [r7, #4]
   304bc:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   304be:	2310      	movs	r3, #16
   304c0:	18fb      	adds	r3, r7, r3
   304c2:	683a      	ldr	r2, [r7, #0]
   304c4:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   304c6:	2310      	movs	r3, #16
   304c8:	18fb      	adds	r3, r7, r3
   304ca:	220b      	movs	r2, #11
   304cc:	18ba      	adds	r2, r7, r2
   304ce:	7812      	ldrb	r2, [r2, #0]
   304d0:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   304d2:	2310      	movs	r3, #16
   304d4:	18fb      	adds	r3, r7, r3
   304d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   304d8:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   304da:	2310      	movs	r3, #16
   304dc:	18fb      	adds	r3, r7, r3
   304de:	2280      	movs	r2, #128	; 0x80
   304e0:	18ba      	adds	r2, r7, r2
   304e2:	6812      	ldr	r2, [r2, #0]
   304e4:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   304e6:	2310      	movs	r3, #16
   304e8:	18fb      	adds	r3, r7, r3
   304ea:	228c      	movs	r2, #140	; 0x8c
   304ec:	18ba      	adds	r2, r7, r2
   304ee:	213c      	movs	r1, #60	; 0x3c
   304f0:	7812      	ldrb	r2, [r2, #0]
   304f2:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   304f4:	2310      	movs	r3, #16
   304f6:	18fb      	adds	r3, r7, r3
   304f8:	2288      	movs	r2, #136	; 0x88
   304fa:	18ba      	adds	r2, r7, r2
   304fc:	213d      	movs	r1, #61	; 0x3d
   304fe:	7812      	ldrb	r2, [r2, #0]
   30500:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   30502:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   30504:	2b00      	cmp	r3, #0
   30506:	d008      	beq.n	3051a <mqtt_connect_broker+0x9a>
   30508:	2380      	movs	r3, #128	; 0x80
   3050a:	18fb      	adds	r3, r7, r3
   3050c:	681b      	ldr	r3, [r3, #0]
   3050e:	2b00      	cmp	r3, #0
   30510:	d003      	beq.n	3051a <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   30512:	2310      	movs	r3, #16
   30514:	18fb      	adds	r3, r7, r3
   30516:	2201      	movs	r2, #1
   30518:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   3051a:	68fb      	ldr	r3, [r7, #12]
   3051c:	69db      	ldr	r3, [r3, #28]
   3051e:	2210      	movs	r2, #16
   30520:	18ba      	adds	r2, r7, r2
   30522:	0011      	movs	r1, r2
   30524:	0018      	movs	r0, r3
   30526:	4b10      	ldr	r3, [pc, #64]	; (30568 <mqtt_connect_broker+0xe8>)
   30528:	4798      	blx	r3
   3052a:	0003      	movs	r3, r0
   3052c:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   3052e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   30530:	b2da      	uxtb	r2, r3
   30532:	2368      	movs	r3, #104	; 0x68
   30534:	18fb      	adds	r3, r7, r3
   30536:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   30538:	68fb      	ldr	r3, [r7, #12]
   3053a:	681b      	ldr	r3, [r3, #0]
   3053c:	2b00      	cmp	r3, #0
   3053e:	d006      	beq.n	3054e <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   30540:	68fb      	ldr	r3, [r7, #12]
   30542:	681b      	ldr	r3, [r3, #0]
   30544:	2268      	movs	r2, #104	; 0x68
   30546:	18ba      	adds	r2, r7, r2
   30548:	68f8      	ldr	r0, [r7, #12]
   3054a:	2101      	movs	r1, #1
   3054c:	4798      	blx	r3
	
	module->isConnected = true;
   3054e:	68fb      	ldr	r3, [r7, #12]
   30550:	2234      	movs	r2, #52	; 0x34
   30552:	2101      	movs	r1, #1
   30554:	5499      	strb	r1, [r3, r2]
	return rc;
   30556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   30558:	0018      	movs	r0, r3
   3055a:	46bd      	mov	sp, r7
   3055c:	b01c      	add	sp, #112	; 0x70
   3055e:	bd80      	pop	{r7, pc}
   30560:	0003ab88 	.word	0x0003ab88
   30564:	000355d9 	.word	0x000355d9
   30568:	0002f8a9 	.word	0x0002f8a9

0003056c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   3056c:	b580      	push	{r7, lr}
   3056e:	b084      	sub	sp, #16
   30570:	af00      	add	r7, sp, #0
   30572:	6078      	str	r0, [r7, #4]
   30574:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   30576:	687b      	ldr	r3, [r7, #4]
   30578:	69db      	ldr	r3, [r3, #28]
   3057a:	0018      	movs	r0, r3
   3057c:	4b0c      	ldr	r3, [pc, #48]	; (305b0 <mqtt_disconnect+0x44>)
   3057e:	4798      	blx	r3
   30580:	0003      	movs	r3, r0
   30582:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   30584:	68fb      	ldr	r3, [r7, #12]
   30586:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   30588:	687b      	ldr	r3, [r7, #4]
   3058a:	681b      	ldr	r3, [r3, #0]
   3058c:	2b00      	cmp	r3, #0
   3058e:	d006      	beq.n	3059e <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   30590:	687b      	ldr	r3, [r7, #4]
   30592:	681b      	ldr	r3, [r3, #0]
   30594:	2208      	movs	r2, #8
   30596:	18ba      	adds	r2, r7, r2
   30598:	6878      	ldr	r0, [r7, #4]
   3059a:	2105      	movs	r1, #5
   3059c:	4798      	blx	r3
	
	module->isConnected = false;
   3059e:	687b      	ldr	r3, [r7, #4]
   305a0:	2234      	movs	r2, #52	; 0x34
   305a2:	2100      	movs	r1, #0
   305a4:	5499      	strb	r1, [r3, r2]
	return rc;
   305a6:	68fb      	ldr	r3, [r7, #12]
}
   305a8:	0018      	movs	r0, r3
   305aa:	46bd      	mov	sp, r7
   305ac:	b004      	add	sp, #16
   305ae:	bd80      	pop	{r7, pc}
   305b0:	0002fd35 	.word	0x0002fd35

000305b4 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   305b4:	b580      	push	{r7, lr}
   305b6:	b08a      	sub	sp, #40	; 0x28
   305b8:	af00      	add	r7, sp, #0
   305ba:	60f8      	str	r0, [r7, #12]
   305bc:	60b9      	str	r1, [r7, #8]
   305be:	607a      	str	r2, [r7, #4]
   305c0:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   305c2:	2314      	movs	r3, #20
   305c4:	18fb      	adds	r3, r7, r3
   305c6:	2230      	movs	r2, #48	; 0x30
   305c8:	18ba      	adds	r2, r7, r2
   305ca:	7812      	ldrb	r2, [r2, #0]
   305cc:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   305ce:	2314      	movs	r3, #20
   305d0:	18fb      	adds	r3, r7, r3
   305d2:	687a      	ldr	r2, [r7, #4]
   305d4:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   305d6:	2314      	movs	r3, #20
   305d8:	18fb      	adds	r3, r7, r3
   305da:	683a      	ldr	r2, [r7, #0]
   305dc:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   305de:	2314      	movs	r3, #20
   305e0:	18fb      	adds	r3, r7, r3
   305e2:	2234      	movs	r2, #52	; 0x34
   305e4:	18ba      	adds	r2, r7, r2
   305e6:	7812      	ldrb	r2, [r2, #0]
   305e8:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   305ea:	68fb      	ldr	r3, [r7, #12]
   305ec:	69db      	ldr	r3, [r3, #28]
   305ee:	2214      	movs	r2, #20
   305f0:	18ba      	adds	r2, r7, r2
   305f2:	68b9      	ldr	r1, [r7, #8]
   305f4:	0018      	movs	r0, r3
   305f6:	4b09      	ldr	r3, [pc, #36]	; (3061c <mqtt_publish+0x68>)
   305f8:	4798      	blx	r3
   305fa:	0003      	movs	r3, r0
   305fc:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   305fe:	68fb      	ldr	r3, [r7, #12]
   30600:	681b      	ldr	r3, [r3, #0]
   30602:	2b00      	cmp	r3, #0
   30604:	d005      	beq.n	30612 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   30606:	68fb      	ldr	r3, [r7, #12]
   30608:	681b      	ldr	r3, [r3, #0]
   3060a:	68f8      	ldr	r0, [r7, #12]
   3060c:	2200      	movs	r2, #0
   3060e:	2102      	movs	r1, #2
   30610:	4798      	blx	r3
	
	return rc;
   30612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30614:	0018      	movs	r0, r3
   30616:	46bd      	mov	sp, r7
   30618:	b00a      	add	sp, #40	; 0x28
   3061a:	bd80      	pop	{r7, pc}
   3061c:	0002fb75 	.word	0x0002fb75

00030620 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   30620:	b590      	push	{r4, r7, lr}
   30622:	b087      	sub	sp, #28
   30624:	af00      	add	r7, sp, #0
   30626:	60f8      	str	r0, [r7, #12]
   30628:	60b9      	str	r1, [r7, #8]
   3062a:	603b      	str	r3, [r7, #0]
   3062c:	1dfb      	adds	r3, r7, #7
   3062e:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   30630:	68fb      	ldr	r3, [r7, #12]
   30632:	69d8      	ldr	r0, [r3, #28]
   30634:	683c      	ldr	r4, [r7, #0]
   30636:	1dfb      	adds	r3, r7, #7
   30638:	781a      	ldrb	r2, [r3, #0]
   3063a:	68b9      	ldr	r1, [r7, #8]
   3063c:	0023      	movs	r3, r4
   3063e:	4c09      	ldr	r4, [pc, #36]	; (30664 <mqtt_subscribe+0x44>)
   30640:	47a0      	blx	r4
   30642:	0003      	movs	r3, r0
   30644:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   30646:	68fb      	ldr	r3, [r7, #12]
   30648:	681b      	ldr	r3, [r3, #0]
   3064a:	2b00      	cmp	r3, #0
   3064c:	d005      	beq.n	3065a <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   3064e:	68fb      	ldr	r3, [r7, #12]
   30650:	681b      	ldr	r3, [r3, #0]
   30652:	68f8      	ldr	r0, [r7, #12]
   30654:	2200      	movs	r2, #0
   30656:	2103      	movs	r1, #3
   30658:	4798      	blx	r3
	
	return rc;
   3065a:	697b      	ldr	r3, [r7, #20]
}
   3065c:	0018      	movs	r0, r3
   3065e:	46bd      	mov	sp, r7
   30660:	b007      	add	sp, #28
   30662:	bd90      	pop	{r4, r7, pc}
   30664:	0002f9e9 	.word	0x0002f9e9

00030668 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   30668:	b580      	push	{r7, lr}
   3066a:	b082      	sub	sp, #8
   3066c:	af00      	add	r7, sp, #0
   3066e:	6078      	str	r0, [r7, #4]
   30670:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   30672:	687b      	ldr	r3, [r7, #4]
   30674:	69db      	ldr	r3, [r3, #28]
   30676:	683a      	ldr	r2, [r7, #0]
   30678:	0011      	movs	r1, r2
   3067a:	0018      	movs	r0, r3
   3067c:	4b03      	ldr	r3, [pc, #12]	; (3068c <mqtt_yield+0x24>)
   3067e:	4798      	blx	r3
   30680:	0003      	movs	r3, r0
   30682:	0018      	movs	r0, r3
   30684:	46bd      	mov	sp, r7
   30686:	b002      	add	sp, #8
   30688:	bd80      	pop	{r7, pc}
   3068a:	46c0      	nop			; (mov r8, r8)
   3068c:	0002f7f1 	.word	0x0002f7f1

00030690 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   30690:	b590      	push	{r4, r7, lr}
   30692:	b085      	sub	sp, #20
   30694:	af00      	add	r7, sp, #0
   30696:	6078      	str	r0, [r7, #4]
	int len = 0;
   30698:	2300      	movs	r3, #0
   3069a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   3069c:	687b      	ldr	r3, [r7, #4]
   3069e:	7a1b      	ldrb	r3, [r3, #8]
   306a0:	2b03      	cmp	r3, #3
   306a2:	d102      	bne.n	306aa <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   306a4:	230c      	movs	r3, #12
   306a6:	60fb      	str	r3, [r7, #12]
   306a8:	e005      	b.n	306b6 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   306aa:	687b      	ldr	r3, [r7, #4]
   306ac:	7a1b      	ldrb	r3, [r3, #8]
   306ae:	2b04      	cmp	r3, #4
   306b0:	d101      	bne.n	306b6 <MQTTSerialize_connectLength+0x26>
		len = 10;
   306b2:	230a      	movs	r3, #10
   306b4:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   306b6:	687b      	ldr	r3, [r7, #4]
   306b8:	68d8      	ldr	r0, [r3, #12]
   306ba:	6919      	ldr	r1, [r3, #16]
   306bc:	695a      	ldr	r2, [r3, #20]
   306be:	4b25      	ldr	r3, [pc, #148]	; (30754 <MQTTSerialize_connectLength+0xc4>)
   306c0:	4798      	blx	r3
   306c2:	0003      	movs	r3, r0
   306c4:	3302      	adds	r3, #2
   306c6:	68fa      	ldr	r2, [r7, #12]
   306c8:	18d3      	adds	r3, r2, r3
   306ca:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   306cc:	687b      	ldr	r3, [r7, #4]
   306ce:	7edb      	ldrb	r3, [r3, #27]
   306d0:	2b00      	cmp	r3, #0
   306d2:	d013      	beq.n	306fc <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   306d4:	687b      	ldr	r3, [r7, #4]
   306d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   306d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   306da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   306dc:	4b1d      	ldr	r3, [pc, #116]	; (30754 <MQTTSerialize_connectLength+0xc4>)
   306de:	4798      	blx	r3
   306e0:	0003      	movs	r3, r0
   306e2:	1c9c      	adds	r4, r3, #2
   306e4:	687b      	ldr	r3, [r7, #4]
   306e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
   306e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   306ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   306ec:	4b19      	ldr	r3, [pc, #100]	; (30754 <MQTTSerialize_connectLength+0xc4>)
   306ee:	4798      	blx	r3
   306f0:	0003      	movs	r3, r0
   306f2:	18e3      	adds	r3, r4, r3
   306f4:	3302      	adds	r3, #2
   306f6:	68fa      	ldr	r2, [r7, #12]
   306f8:	18d3      	adds	r3, r2, r3
   306fa:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   306fc:	687b      	ldr	r3, [r7, #4]
   306fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30700:	2b00      	cmp	r3, #0
   30702:	d103      	bne.n	3070c <MQTTSerialize_connectLength+0x7c>
   30704:	687b      	ldr	r3, [r7, #4]
   30706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30708:	2b00      	cmp	r3, #0
   3070a:	d00a      	beq.n	30722 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   3070c:	687b      	ldr	r3, [r7, #4]
   3070e:	6c18      	ldr	r0, [r3, #64]	; 0x40
   30710:	6c59      	ldr	r1, [r3, #68]	; 0x44
   30712:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   30714:	4b0f      	ldr	r3, [pc, #60]	; (30754 <MQTTSerialize_connectLength+0xc4>)
   30716:	4798      	blx	r3
   30718:	0003      	movs	r3, r0
   3071a:	3302      	adds	r3, #2
   3071c:	68fa      	ldr	r2, [r7, #12]
   3071e:	18d3      	adds	r3, r2, r3
   30720:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   30722:	687b      	ldr	r3, [r7, #4]
   30724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30726:	2b00      	cmp	r3, #0
   30728:	d103      	bne.n	30732 <MQTTSerialize_connectLength+0xa2>
   3072a:	687b      	ldr	r3, [r7, #4]
   3072c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   3072e:	2b00      	cmp	r3, #0
   30730:	d00a      	beq.n	30748 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   30732:	687b      	ldr	r3, [r7, #4]
   30734:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   30736:	6d19      	ldr	r1, [r3, #80]	; 0x50
   30738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3073a:	4b06      	ldr	r3, [pc, #24]	; (30754 <MQTTSerialize_connectLength+0xc4>)
   3073c:	4798      	blx	r3
   3073e:	0003      	movs	r3, r0
   30740:	3302      	adds	r3, #2
   30742:	68fa      	ldr	r2, [r7, #12]
   30744:	18d3      	adds	r3, r2, r3
   30746:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   30748:	68fb      	ldr	r3, [r7, #12]
}
   3074a:	0018      	movs	r0, r3
   3074c:	46bd      	mov	sp, r7
   3074e:	b005      	add	sp, #20
   30750:	bd90      	pop	{r4, r7, pc}
   30752:	46c0      	nop			; (mov r8, r8)
   30754:	00031101 	.word	0x00031101

00030758 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   30758:	b590      	push	{r4, r7, lr}
   3075a:	b08b      	sub	sp, #44	; 0x2c
   3075c:	af00      	add	r7, sp, #0
   3075e:	60f8      	str	r0, [r7, #12]
   30760:	60b9      	str	r1, [r7, #8]
   30762:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   30764:	68fb      	ldr	r3, [r7, #12]
   30766:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   30768:	2300      	movs	r3, #0
   3076a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   3076c:	2300      	movs	r3, #0
   3076e:	617b      	str	r3, [r7, #20]
	int len = 0;
   30770:	2300      	movs	r3, #0
   30772:	623b      	str	r3, [r7, #32]
	int rc = -1;
   30774:	2301      	movs	r3, #1
   30776:	425b      	negs	r3, r3
   30778:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   3077a:	687b      	ldr	r3, [r7, #4]
   3077c:	0018      	movs	r0, r3
   3077e:	4b8c      	ldr	r3, [pc, #560]	; (309b0 <MQTTSerialize_connect+0x258>)
   30780:	4798      	blx	r3
   30782:	0003      	movs	r3, r0
   30784:	623b      	str	r3, [r7, #32]
   30786:	6a3b      	ldr	r3, [r7, #32]
   30788:	0018      	movs	r0, r3
   3078a:	4b8a      	ldr	r3, [pc, #552]	; (309b4 <MQTTSerialize_connect+0x25c>)
   3078c:	4798      	blx	r3
   3078e:	0002      	movs	r2, r0
   30790:	68bb      	ldr	r3, [r7, #8]
   30792:	429a      	cmp	r2, r3
   30794:	dd03      	ble.n	3079e <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30796:	2302      	movs	r3, #2
   30798:	425b      	negs	r3, r3
   3079a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   3079c:	e103      	b.n	309a6 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   3079e:	2318      	movs	r3, #24
   307a0:	18fb      	adds	r3, r7, r3
   307a2:	2200      	movs	r2, #0
   307a4:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   307a6:	2318      	movs	r3, #24
   307a8:	18fb      	adds	r3, r7, r3
   307aa:	781a      	ldrb	r2, [r3, #0]
   307ac:	210f      	movs	r1, #15
   307ae:	400a      	ands	r2, r1
   307b0:	1c11      	adds	r1, r2, #0
   307b2:	2210      	movs	r2, #16
   307b4:	430a      	orrs	r2, r1
   307b6:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   307b8:	2318      	movs	r3, #24
   307ba:	18fb      	adds	r3, r7, r3
   307bc:	781a      	ldrb	r2, [r3, #0]
   307be:	231c      	movs	r3, #28
   307c0:	18fb      	adds	r3, r7, r3
   307c2:	0011      	movs	r1, r2
   307c4:	0018      	movs	r0, r3
   307c6:	4b7c      	ldr	r3, [pc, #496]	; (309b8 <MQTTSerialize_connect+0x260>)
   307c8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   307ca:	69fb      	ldr	r3, [r7, #28]
   307cc:	6a3a      	ldr	r2, [r7, #32]
   307ce:	0011      	movs	r1, r2
   307d0:	0018      	movs	r0, r3
   307d2:	4b7a      	ldr	r3, [pc, #488]	; (309bc <MQTTSerialize_connect+0x264>)
   307d4:	4798      	blx	r3
   307d6:	0002      	movs	r2, r0
   307d8:	69fb      	ldr	r3, [r7, #28]
   307da:	189b      	adds	r3, r3, r2
   307dc:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   307de:	687b      	ldr	r3, [r7, #4]
   307e0:	7a1b      	ldrb	r3, [r3, #8]
   307e2:	2b04      	cmp	r3, #4
   307e4:	d10d      	bne.n	30802 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   307e6:	4a76      	ldr	r2, [pc, #472]	; (309c0 <MQTTSerialize_connect+0x268>)
   307e8:	231c      	movs	r3, #28
   307ea:	18fb      	adds	r3, r7, r3
   307ec:	0011      	movs	r1, r2
   307ee:	0018      	movs	r0, r3
   307f0:	4b74      	ldr	r3, [pc, #464]	; (309c4 <MQTTSerialize_connect+0x26c>)
   307f2:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   307f4:	231c      	movs	r3, #28
   307f6:	18fb      	adds	r3, r7, r3
   307f8:	2104      	movs	r1, #4
   307fa:	0018      	movs	r0, r3
   307fc:	4b6e      	ldr	r3, [pc, #440]	; (309b8 <MQTTSerialize_connect+0x260>)
   307fe:	4798      	blx	r3
   30800:	e00c      	b.n	3081c <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   30802:	4a71      	ldr	r2, [pc, #452]	; (309c8 <MQTTSerialize_connect+0x270>)
   30804:	231c      	movs	r3, #28
   30806:	18fb      	adds	r3, r7, r3
   30808:	0011      	movs	r1, r2
   3080a:	0018      	movs	r0, r3
   3080c:	4b6d      	ldr	r3, [pc, #436]	; (309c4 <MQTTSerialize_connect+0x26c>)
   3080e:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   30810:	231c      	movs	r3, #28
   30812:	18fb      	adds	r3, r7, r3
   30814:	2103      	movs	r1, #3
   30816:	0018      	movs	r0, r3
   30818:	4b67      	ldr	r3, [pc, #412]	; (309b8 <MQTTSerialize_connect+0x260>)
   3081a:	4798      	blx	r3
	}

	flags.all = 0;
   3081c:	2314      	movs	r3, #20
   3081e:	18fb      	adds	r3, r7, r3
   30820:	2200      	movs	r2, #0
   30822:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   30824:	687b      	ldr	r3, [r7, #4]
   30826:	7e9b      	ldrb	r3, [r3, #26]
   30828:	1c1a      	adds	r2, r3, #0
   3082a:	2301      	movs	r3, #1
   3082c:	4013      	ands	r3, r2
   3082e:	b2da      	uxtb	r2, r3
   30830:	2314      	movs	r3, #20
   30832:	18fb      	adds	r3, r7, r3
   30834:	2101      	movs	r1, #1
   30836:	400a      	ands	r2, r1
   30838:	1890      	adds	r0, r2, r2
   3083a:	781a      	ldrb	r2, [r3, #0]
   3083c:	2102      	movs	r1, #2
   3083e:	438a      	bics	r2, r1
   30840:	1c11      	adds	r1, r2, #0
   30842:	1c02      	adds	r2, r0, #0
   30844:	430a      	orrs	r2, r1
   30846:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   30848:	687b      	ldr	r3, [r7, #4]
   3084a:	7edb      	ldrb	r3, [r3, #27]
   3084c:	1e5a      	subs	r2, r3, #1
   3084e:	4193      	sbcs	r3, r2
   30850:	b2da      	uxtb	r2, r3
   30852:	2314      	movs	r3, #20
   30854:	18fb      	adds	r3, r7, r3
   30856:	2101      	movs	r1, #1
   30858:	400a      	ands	r2, r1
   3085a:	0090      	lsls	r0, r2, #2
   3085c:	781a      	ldrb	r2, [r3, #0]
   3085e:	2104      	movs	r1, #4
   30860:	438a      	bics	r2, r1
   30862:	1c11      	adds	r1, r2, #0
   30864:	1c02      	adds	r2, r0, #0
   30866:	430a      	orrs	r2, r1
   30868:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   3086a:	2314      	movs	r3, #20
   3086c:	18fb      	adds	r3, r7, r3
   3086e:	781b      	ldrb	r3, [r3, #0]
   30870:	2204      	movs	r2, #4
   30872:	4013      	ands	r3, r2
   30874:	b2db      	uxtb	r3, r3
   30876:	2b00      	cmp	r3, #0
   30878:	d025      	beq.n	308c6 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   3087a:	687b      	ldr	r3, [r7, #4]
   3087c:	223d      	movs	r2, #61	; 0x3d
   3087e:	5c9b      	ldrb	r3, [r3, r2]
   30880:	1c1a      	adds	r2, r3, #0
   30882:	2303      	movs	r3, #3
   30884:	4013      	ands	r3, r2
   30886:	b2da      	uxtb	r2, r3
   30888:	2314      	movs	r3, #20
   3088a:	18fb      	adds	r3, r7, r3
   3088c:	2103      	movs	r1, #3
   3088e:	400a      	ands	r2, r1
   30890:	00d0      	lsls	r0, r2, #3
   30892:	781a      	ldrb	r2, [r3, #0]
   30894:	2118      	movs	r1, #24
   30896:	438a      	bics	r2, r1
   30898:	1c11      	adds	r1, r2, #0
   3089a:	1c02      	adds	r2, r0, #0
   3089c:	430a      	orrs	r2, r1
   3089e:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   308a0:	687b      	ldr	r3, [r7, #4]
   308a2:	223c      	movs	r2, #60	; 0x3c
   308a4:	5c9b      	ldrb	r3, [r3, r2]
   308a6:	1c1a      	adds	r2, r3, #0
   308a8:	2301      	movs	r3, #1
   308aa:	4013      	ands	r3, r2
   308ac:	b2da      	uxtb	r2, r3
   308ae:	2314      	movs	r3, #20
   308b0:	18fb      	adds	r3, r7, r3
   308b2:	2101      	movs	r1, #1
   308b4:	400a      	ands	r2, r1
   308b6:	0150      	lsls	r0, r2, #5
   308b8:	781a      	ldrb	r2, [r3, #0]
   308ba:	2120      	movs	r1, #32
   308bc:	438a      	bics	r2, r1
   308be:	1c11      	adds	r1, r2, #0
   308c0:	1c02      	adds	r2, r0, #0
   308c2:	430a      	orrs	r2, r1
   308c4:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   308c6:	687b      	ldr	r3, [r7, #4]
   308c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   308ca:	2b00      	cmp	r3, #0
   308cc:	d103      	bne.n	308d6 <MQTTSerialize_connect+0x17e>
   308ce:	687b      	ldr	r3, [r7, #4]
   308d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   308d2:	2b00      	cmp	r3, #0
   308d4:	d006      	beq.n	308e4 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   308d6:	2314      	movs	r3, #20
   308d8:	18fb      	adds	r3, r7, r3
   308da:	781a      	ldrb	r2, [r3, #0]
   308dc:	2180      	movs	r1, #128	; 0x80
   308de:	4249      	negs	r1, r1
   308e0:	430a      	orrs	r2, r1
   308e2:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   308e4:	687b      	ldr	r3, [r7, #4]
   308e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   308e8:	2b00      	cmp	r3, #0
   308ea:	d103      	bne.n	308f4 <MQTTSerialize_connect+0x19c>
   308ec:	687b      	ldr	r3, [r7, #4]
   308ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   308f0:	2b00      	cmp	r3, #0
   308f2:	d005      	beq.n	30900 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   308f4:	2314      	movs	r3, #20
   308f6:	18fb      	adds	r3, r7, r3
   308f8:	781a      	ldrb	r2, [r3, #0]
   308fa:	2140      	movs	r1, #64	; 0x40
   308fc:	430a      	orrs	r2, r1
   308fe:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   30900:	2314      	movs	r3, #20
   30902:	18fb      	adds	r3, r7, r3
   30904:	781a      	ldrb	r2, [r3, #0]
   30906:	231c      	movs	r3, #28
   30908:	18fb      	adds	r3, r7, r3
   3090a:	0011      	movs	r1, r2
   3090c:	0018      	movs	r0, r3
   3090e:	4b2a      	ldr	r3, [pc, #168]	; (309b8 <MQTTSerialize_connect+0x260>)
   30910:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   30912:	687b      	ldr	r3, [r7, #4]
   30914:	8b1b      	ldrh	r3, [r3, #24]
   30916:	001a      	movs	r2, r3
   30918:	231c      	movs	r3, #28
   3091a:	18fb      	adds	r3, r7, r3
   3091c:	0011      	movs	r1, r2
   3091e:	0018      	movs	r0, r3
   30920:	4b2a      	ldr	r3, [pc, #168]	; (309cc <MQTTSerialize_connect+0x274>)
   30922:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   30924:	687b      	ldr	r3, [r7, #4]
   30926:	221c      	movs	r2, #28
   30928:	18b8      	adds	r0, r7, r2
   3092a:	68d9      	ldr	r1, [r3, #12]
   3092c:	691a      	ldr	r2, [r3, #16]
   3092e:	695b      	ldr	r3, [r3, #20]
   30930:	4c27      	ldr	r4, [pc, #156]	; (309d0 <MQTTSerialize_connect+0x278>)
   30932:	47a0      	blx	r4
	if (options->willFlag)
   30934:	687b      	ldr	r3, [r7, #4]
   30936:	7edb      	ldrb	r3, [r3, #27]
   30938:	2b00      	cmp	r3, #0
   3093a:	d00f      	beq.n	3095c <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   3093c:	687b      	ldr	r3, [r7, #4]
   3093e:	221c      	movs	r2, #28
   30940:	18b8      	adds	r0, r7, r2
   30942:	6a59      	ldr	r1, [r3, #36]	; 0x24
   30944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   30946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   30948:	4c21      	ldr	r4, [pc, #132]	; (309d0 <MQTTSerialize_connect+0x278>)
   3094a:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   3094c:	687b      	ldr	r3, [r7, #4]
   3094e:	221c      	movs	r2, #28
   30950:	18b8      	adds	r0, r7, r2
   30952:	6b19      	ldr	r1, [r3, #48]	; 0x30
   30954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   30956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   30958:	4c1d      	ldr	r4, [pc, #116]	; (309d0 <MQTTSerialize_connect+0x278>)
   3095a:	47a0      	blx	r4
	}
	if (flags.bits.username)
   3095c:	2314      	movs	r3, #20
   3095e:	18fb      	adds	r3, r7, r3
   30960:	781b      	ldrb	r3, [r3, #0]
   30962:	227f      	movs	r2, #127	; 0x7f
   30964:	4393      	bics	r3, r2
   30966:	b2db      	uxtb	r3, r3
   30968:	2b00      	cmp	r3, #0
   3096a:	d007      	beq.n	3097c <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   3096c:	687b      	ldr	r3, [r7, #4]
   3096e:	221c      	movs	r2, #28
   30970:	18b8      	adds	r0, r7, r2
   30972:	6c19      	ldr	r1, [r3, #64]	; 0x40
   30974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30978:	4c15      	ldr	r4, [pc, #84]	; (309d0 <MQTTSerialize_connect+0x278>)
   3097a:	47a0      	blx	r4
	if (flags.bits.password)
   3097c:	2314      	movs	r3, #20
   3097e:	18fb      	adds	r3, r7, r3
   30980:	781b      	ldrb	r3, [r3, #0]
   30982:	2240      	movs	r2, #64	; 0x40
   30984:	4013      	ands	r3, r2
   30986:	b2db      	uxtb	r3, r3
   30988:	2b00      	cmp	r3, #0
   3098a:	d007      	beq.n	3099c <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   3098c:	687b      	ldr	r3, [r7, #4]
   3098e:	221c      	movs	r2, #28
   30990:	18b8      	adds	r0, r7, r2
   30992:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   30994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   30996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30998:	4c0d      	ldr	r4, [pc, #52]	; (309d0 <MQTTSerialize_connect+0x278>)
   3099a:	47a0      	blx	r4

	rc = ptr - buf;
   3099c:	69fb      	ldr	r3, [r7, #28]
   3099e:	001a      	movs	r2, r3
   309a0:	68fb      	ldr	r3, [r7, #12]
   309a2:	1ad3      	subs	r3, r2, r3
   309a4:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   309a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   309a8:	0018      	movs	r0, r3
   309aa:	46bd      	mov	sp, r7
   309ac:	b00b      	add	sp, #44	; 0x2c
   309ae:	bd90      	pop	{r4, r7, pc}
   309b0:	00030691 	.word	0x00030691
   309b4:	00030e25 	.word	0x00030e25
   309b8:	00030f47 	.word	0x00030f47
   309bc:	00030d2d 	.word	0x00030d2d
   309c0:	0003abe0 	.word	0x0003abe0
   309c4:	00030fc9 	.word	0x00030fc9
   309c8:	0003abe8 	.word	0x0003abe8
   309cc:	00030f71 	.word	0x00030f71
   309d0:	00031019 	.word	0x00031019

000309d4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   309d4:	b580      	push	{r7, lr}
   309d6:	b08a      	sub	sp, #40	; 0x28
   309d8:	af00      	add	r7, sp, #0
   309da:	60f8      	str	r0, [r7, #12]
   309dc:	60b9      	str	r1, [r7, #8]
   309de:	607a      	str	r2, [r7, #4]
   309e0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   309e2:	2300      	movs	r3, #0
   309e4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   309e6:	687b      	ldr	r3, [r7, #4]
   309e8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   309ea:	2300      	movs	r3, #0
   309ec:	623b      	str	r3, [r7, #32]
	int rc = 0;
   309ee:	2300      	movs	r3, #0
   309f0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   309f2:	2300      	movs	r3, #0
   309f4:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   309f6:	2318      	movs	r3, #24
   309f8:	18fb      	adds	r3, r7, r3
   309fa:	0018      	movs	r0, r3
   309fc:	4b25      	ldr	r3, [pc, #148]	; (30a94 <MQTTDeserialize_connack+0xc0>)
   309fe:	4798      	blx	r3
   30a00:	0003      	movs	r3, r0
   30a02:	001a      	movs	r2, r3
   30a04:	231c      	movs	r3, #28
   30a06:	18fb      	adds	r3, r7, r3
   30a08:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   30a0a:	231c      	movs	r3, #28
   30a0c:	18fb      	adds	r3, r7, r3
   30a0e:	781b      	ldrb	r3, [r3, #0]
   30a10:	220f      	movs	r2, #15
   30a12:	4393      	bics	r3, r2
   30a14:	b2db      	uxtb	r3, r3
   30a16:	2b20      	cmp	r3, #32
   30a18:	d134      	bne.n	30a84 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30a1a:	69bb      	ldr	r3, [r7, #24]
   30a1c:	2214      	movs	r2, #20
   30a1e:	18ba      	adds	r2, r7, r2
   30a20:	0011      	movs	r1, r2
   30a22:	0018      	movs	r0, r3
   30a24:	4b1c      	ldr	r3, [pc, #112]	; (30a98 <MQTTDeserialize_connack+0xc4>)
   30a26:	4798      	blx	r3
   30a28:	0003      	movs	r3, r0
   30a2a:	627b      	str	r3, [r7, #36]	; 0x24
   30a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30a2e:	69bb      	ldr	r3, [r7, #24]
   30a30:	189b      	adds	r3, r3, r2
   30a32:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30a34:	69bb      	ldr	r3, [r7, #24]
   30a36:	697a      	ldr	r2, [r7, #20]
   30a38:	189b      	adds	r3, r3, r2
   30a3a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30a3c:	6a3b      	ldr	r3, [r7, #32]
   30a3e:	69ba      	ldr	r2, [r7, #24]
   30a40:	1a9b      	subs	r3, r3, r2
   30a42:	2b01      	cmp	r3, #1
   30a44:	dd20      	ble.n	30a88 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   30a46:	2318      	movs	r3, #24
   30a48:	18fb      	adds	r3, r7, r3
   30a4a:	0018      	movs	r0, r3
   30a4c:	4b11      	ldr	r3, [pc, #68]	; (30a94 <MQTTDeserialize_connack+0xc0>)
   30a4e:	4798      	blx	r3
   30a50:	0003      	movs	r3, r0
   30a52:	001a      	movs	r2, r3
   30a54:	2310      	movs	r3, #16
   30a56:	18fb      	adds	r3, r7, r3
   30a58:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   30a5a:	2310      	movs	r3, #16
   30a5c:	18fb      	adds	r3, r7, r3
   30a5e:	781b      	ldrb	r3, [r3, #0]
   30a60:	061b      	lsls	r3, r3, #24
   30a62:	0fdb      	lsrs	r3, r3, #31
   30a64:	b2db      	uxtb	r3, r3
   30a66:	001a      	movs	r2, r3
   30a68:	68fb      	ldr	r3, [r7, #12]
   30a6a:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   30a6c:	2318      	movs	r3, #24
   30a6e:	18fb      	adds	r3, r7, r3
   30a70:	0018      	movs	r0, r3
   30a72:	4b08      	ldr	r3, [pc, #32]	; (30a94 <MQTTDeserialize_connack+0xc0>)
   30a74:	4798      	blx	r3
   30a76:	0003      	movs	r3, r0
   30a78:	001a      	movs	r2, r3
   30a7a:	68bb      	ldr	r3, [r7, #8]
   30a7c:	701a      	strb	r2, [r3, #0]

	rc = 1;
   30a7e:	2301      	movs	r3, #1
   30a80:	627b      	str	r3, [r7, #36]	; 0x24
   30a82:	e002      	b.n	30a8a <MQTTDeserialize_connack+0xb6>
		goto exit;
   30a84:	46c0      	nop			; (mov r8, r8)
   30a86:	e000      	b.n	30a8a <MQTTDeserialize_connack+0xb6>
		goto exit;
   30a88:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30a8c:	0018      	movs	r0, r3
   30a8e:	46bd      	mov	sp, r7
   30a90:	b00a      	add	sp, #40	; 0x28
   30a92:	bd80      	pop	{r7, pc}
   30a94:	00030f1b 	.word	0x00030f1b
   30a98:	00030eb5 	.word	0x00030eb5

00030a9c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   30a9c:	b580      	push	{r7, lr}
   30a9e:	b088      	sub	sp, #32
   30aa0:	af00      	add	r7, sp, #0
   30aa2:	60f8      	str	r0, [r7, #12]
   30aa4:	60b9      	str	r1, [r7, #8]
   30aa6:	1dfb      	adds	r3, r7, #7
   30aa8:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30aaa:	2300      	movs	r3, #0
   30aac:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   30aae:	2301      	movs	r3, #1
   30ab0:	425b      	negs	r3, r3
   30ab2:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   30ab4:	68fb      	ldr	r3, [r7, #12]
   30ab6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   30ab8:	68bb      	ldr	r3, [r7, #8]
   30aba:	2b01      	cmp	r3, #1
   30abc:	dc03      	bgt.n	30ac6 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30abe:	2302      	movs	r3, #2
   30ac0:	425b      	negs	r3, r3
   30ac2:	61fb      	str	r3, [r7, #28]
		goto exit;
   30ac4:	e029      	b.n	30b1a <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   30ac6:	2318      	movs	r3, #24
   30ac8:	18fb      	adds	r3, r7, r3
   30aca:	2200      	movs	r2, #0
   30acc:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   30ace:	1dfb      	adds	r3, r7, #7
   30ad0:	781b      	ldrb	r3, [r3, #0]
   30ad2:	220f      	movs	r2, #15
   30ad4:	4013      	ands	r3, r2
   30ad6:	b2da      	uxtb	r2, r3
   30ad8:	2318      	movs	r3, #24
   30ada:	18fb      	adds	r3, r7, r3
   30adc:	0110      	lsls	r0, r2, #4
   30ade:	781a      	ldrb	r2, [r3, #0]
   30ae0:	210f      	movs	r1, #15
   30ae2:	400a      	ands	r2, r1
   30ae4:	1c11      	adds	r1, r2, #0
   30ae6:	1c02      	adds	r2, r0, #0
   30ae8:	430a      	orrs	r2, r1
   30aea:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30aec:	2318      	movs	r3, #24
   30aee:	18fb      	adds	r3, r7, r3
   30af0:	781a      	ldrb	r2, [r3, #0]
   30af2:	2314      	movs	r3, #20
   30af4:	18fb      	adds	r3, r7, r3
   30af6:	0011      	movs	r1, r2
   30af8:	0018      	movs	r0, r3
   30afa:	4b0a      	ldr	r3, [pc, #40]	; (30b24 <MQTTSerialize_zero+0x88>)
   30afc:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   30afe:	697b      	ldr	r3, [r7, #20]
   30b00:	2100      	movs	r1, #0
   30b02:	0018      	movs	r0, r3
   30b04:	4b08      	ldr	r3, [pc, #32]	; (30b28 <MQTTSerialize_zero+0x8c>)
   30b06:	4798      	blx	r3
   30b08:	0002      	movs	r2, r0
   30b0a:	697b      	ldr	r3, [r7, #20]
   30b0c:	189b      	adds	r3, r3, r2
   30b0e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   30b10:	697b      	ldr	r3, [r7, #20]
   30b12:	001a      	movs	r2, r3
   30b14:	68fb      	ldr	r3, [r7, #12]
   30b16:	1ad3      	subs	r3, r2, r3
   30b18:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30b1a:	69fb      	ldr	r3, [r7, #28]
}
   30b1c:	0018      	movs	r0, r3
   30b1e:	46bd      	mov	sp, r7
   30b20:	b008      	add	sp, #32
   30b22:	bd80      	pop	{r7, pc}
   30b24:	00030f47 	.word	0x00030f47
   30b28:	00030d2d 	.word	0x00030d2d

00030b2c <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   30b2c:	b580      	push	{r7, lr}
   30b2e:	b082      	sub	sp, #8
   30b30:	af00      	add	r7, sp, #0
   30b32:	6078      	str	r0, [r7, #4]
   30b34:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   30b36:	6839      	ldr	r1, [r7, #0]
   30b38:	687b      	ldr	r3, [r7, #4]
   30b3a:	220e      	movs	r2, #14
   30b3c:	0018      	movs	r0, r3
   30b3e:	4b03      	ldr	r3, [pc, #12]	; (30b4c <MQTTSerialize_disconnect+0x20>)
   30b40:	4798      	blx	r3
   30b42:	0003      	movs	r3, r0
}
   30b44:	0018      	movs	r0, r3
   30b46:	46bd      	mov	sp, r7
   30b48:	b002      	add	sp, #8
   30b4a:	bd80      	pop	{r7, pc}
   30b4c:	00030a9d 	.word	0x00030a9d

00030b50 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   30b50:	b580      	push	{r7, lr}
   30b52:	b082      	sub	sp, #8
   30b54:	af00      	add	r7, sp, #0
   30b56:	6078      	str	r0, [r7, #4]
   30b58:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   30b5a:	6839      	ldr	r1, [r7, #0]
   30b5c:	687b      	ldr	r3, [r7, #4]
   30b5e:	220c      	movs	r2, #12
   30b60:	0018      	movs	r0, r3
   30b62:	4b03      	ldr	r3, [pc, #12]	; (30b70 <MQTTSerialize_pingreq+0x20>)
   30b64:	4798      	blx	r3
   30b66:	0003      	movs	r3, r0
}
   30b68:	0018      	movs	r0, r3
   30b6a:	46bd      	mov	sp, r7
   30b6c:	b002      	add	sp, #8
   30b6e:	bd80      	pop	{r7, pc}
   30b70:	00030a9d 	.word	0x00030a9d

00030b74 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   30b74:	b580      	push	{r7, lr}
   30b76:	b08a      	sub	sp, #40	; 0x28
   30b78:	af00      	add	r7, sp, #0
   30b7a:	60f8      	str	r0, [r7, #12]
   30b7c:	60b9      	str	r1, [r7, #8]
   30b7e:	607a      	str	r2, [r7, #4]
   30b80:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30b82:	2300      	movs	r3, #0
   30b84:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30b88:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30b8a:	2300      	movs	r3, #0
   30b8c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30b8e:	2300      	movs	r3, #0
   30b90:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   30b92:	2300      	movs	r3, #0
   30b94:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30b96:	2318      	movs	r3, #24
   30b98:	18fb      	adds	r3, r7, r3
   30b9a:	0018      	movs	r0, r3
   30b9c:	4b32      	ldr	r3, [pc, #200]	; (30c68 <MQTTDeserialize_publish+0xf4>)
   30b9e:	4798      	blx	r3
   30ba0:	0003      	movs	r3, r0
   30ba2:	001a      	movs	r2, r3
   30ba4:	231c      	movs	r3, #28
   30ba6:	18fb      	adds	r3, r7, r3
   30ba8:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   30baa:	231c      	movs	r3, #28
   30bac:	18fb      	adds	r3, r7, r3
   30bae:	781b      	ldrb	r3, [r3, #0]
   30bb0:	220f      	movs	r2, #15
   30bb2:	4393      	bics	r3, r2
   30bb4:	b2db      	uxtb	r3, r3
   30bb6:	2b30      	cmp	r3, #48	; 0x30
   30bb8:	d150      	bne.n	30c5c <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   30bba:	231c      	movs	r3, #28
   30bbc:	18fb      	adds	r3, r7, r3
   30bbe:	781b      	ldrb	r3, [r3, #0]
   30bc0:	071b      	lsls	r3, r3, #28
   30bc2:	0fdb      	lsrs	r3, r3, #31
   30bc4:	b2db      	uxtb	r3, r3
   30bc6:	001a      	movs	r2, r3
   30bc8:	68fb      	ldr	r3, [r7, #12]
   30bca:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   30bcc:	231c      	movs	r3, #28
   30bce:	18fb      	adds	r3, r7, r3
   30bd0:	781b      	ldrb	r3, [r3, #0]
   30bd2:	075b      	lsls	r3, r3, #29
   30bd4:	0f9b      	lsrs	r3, r3, #30
   30bd6:	b2db      	uxtb	r3, r3
   30bd8:	001a      	movs	r2, r3
   30bda:	68bb      	ldr	r3, [r7, #8]
   30bdc:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   30bde:	231c      	movs	r3, #28
   30be0:	18fb      	adds	r3, r7, r3
   30be2:	781b      	ldrb	r3, [r3, #0]
   30be4:	07db      	lsls	r3, r3, #31
   30be6:	0fdb      	lsrs	r3, r3, #31
   30be8:	b2db      	uxtb	r3, r3
   30bea:	001a      	movs	r2, r3
   30bec:	687b      	ldr	r3, [r7, #4]
   30bee:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30bf0:	69bb      	ldr	r3, [r7, #24]
   30bf2:	2214      	movs	r2, #20
   30bf4:	18ba      	adds	r2, r7, r2
   30bf6:	0011      	movs	r1, r2
   30bf8:	0018      	movs	r0, r3
   30bfa:	4b1c      	ldr	r3, [pc, #112]	; (30c6c <MQTTDeserialize_publish+0xf8>)
   30bfc:	4798      	blx	r3
   30bfe:	0003      	movs	r3, r0
   30c00:	627b      	str	r3, [r7, #36]	; 0x24
   30c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30c04:	69bb      	ldr	r3, [r7, #24]
   30c06:	189b      	adds	r3, r3, r2
   30c08:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30c0a:	69bb      	ldr	r3, [r7, #24]
   30c0c:	697a      	ldr	r2, [r7, #20]
   30c0e:	189b      	adds	r3, r3, r2
   30c10:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30c12:	6a3a      	ldr	r2, [r7, #32]
   30c14:	2318      	movs	r3, #24
   30c16:	18f9      	adds	r1, r7, r3
   30c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30c1a:	0018      	movs	r0, r3
   30c1c:	4b14      	ldr	r3, [pc, #80]	; (30c70 <MQTTDeserialize_publish+0xfc>)
   30c1e:	4798      	blx	r3
   30c20:	1e03      	subs	r3, r0, #0
   30c22:	d01c      	beq.n	30c5e <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   30c24:	6a3b      	ldr	r3, [r7, #32]
   30c26:	69ba      	ldr	r2, [r7, #24]
   30c28:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30c2a:	d418      	bmi.n	30c5e <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   30c2c:	68bb      	ldr	r3, [r7, #8]
   30c2e:	681b      	ldr	r3, [r3, #0]
   30c30:	2b00      	cmp	r3, #0
   30c32:	dd08      	ble.n	30c46 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   30c34:	2318      	movs	r3, #24
   30c36:	18fb      	adds	r3, r7, r3
   30c38:	0018      	movs	r0, r3
   30c3a:	4b0e      	ldr	r3, [pc, #56]	; (30c74 <MQTTDeserialize_publish+0x100>)
   30c3c:	4798      	blx	r3
   30c3e:	0003      	movs	r3, r0
   30c40:	b29a      	uxth	r2, r3
   30c42:	683b      	ldr	r3, [r7, #0]
   30c44:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   30c46:	6a3b      	ldr	r3, [r7, #32]
   30c48:	69ba      	ldr	r2, [r7, #24]
   30c4a:	1a9a      	subs	r2, r3, r2
   30c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30c4e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   30c50:	69ba      	ldr	r2, [r7, #24]
   30c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30c54:	601a      	str	r2, [r3, #0]
	rc = 1;
   30c56:	2301      	movs	r3, #1
   30c58:	627b      	str	r3, [r7, #36]	; 0x24
   30c5a:	e000      	b.n	30c5e <MQTTDeserialize_publish+0xea>
		goto exit;
   30c5c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30c60:	0018      	movs	r0, r3
   30c62:	46bd      	mov	sp, r7
   30c64:	b00a      	add	sp, #40	; 0x28
   30c66:	bd80      	pop	{r7, pc}
   30c68:	00030f1b 	.word	0x00030f1b
   30c6c:	00030eb5 	.word	0x00030eb5
   30c70:	00031099 	.word	0x00031099
   30c74:	00030ee9 	.word	0x00030ee9

00030c78 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   30c78:	b580      	push	{r7, lr}
   30c7a:	b08a      	sub	sp, #40	; 0x28
   30c7c:	af00      	add	r7, sp, #0
   30c7e:	60f8      	str	r0, [r7, #12]
   30c80:	60b9      	str	r1, [r7, #8]
   30c82:	607a      	str	r2, [r7, #4]
   30c84:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30c86:	2300      	movs	r3, #0
   30c88:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30c8a:	683b      	ldr	r3, [r7, #0]
   30c8c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30c8e:	2300      	movs	r3, #0
   30c90:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30c92:	2300      	movs	r3, #0
   30c94:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30c96:	2318      	movs	r3, #24
   30c98:	18fb      	adds	r3, r7, r3
   30c9a:	0018      	movs	r0, r3
   30c9c:	4b20      	ldr	r3, [pc, #128]	; (30d20 <MQTTDeserialize_ack+0xa8>)
   30c9e:	4798      	blx	r3
   30ca0:	0003      	movs	r3, r0
   30ca2:	001a      	movs	r2, r3
   30ca4:	231c      	movs	r3, #28
   30ca6:	18fb      	adds	r3, r7, r3
   30ca8:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   30caa:	231c      	movs	r3, #28
   30cac:	18fb      	adds	r3, r7, r3
   30cae:	781b      	ldrb	r3, [r3, #0]
   30cb0:	071b      	lsls	r3, r3, #28
   30cb2:	0fdb      	lsrs	r3, r3, #31
   30cb4:	b2db      	uxtb	r3, r3
   30cb6:	001a      	movs	r2, r3
   30cb8:	68bb      	ldr	r3, [r7, #8]
   30cba:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   30cbc:	231c      	movs	r3, #28
   30cbe:	18fb      	adds	r3, r7, r3
   30cc0:	781b      	ldrb	r3, [r3, #0]
   30cc2:	061b      	lsls	r3, r3, #24
   30cc4:	0f1b      	lsrs	r3, r3, #28
   30cc6:	b2db      	uxtb	r3, r3
   30cc8:	001a      	movs	r2, r3
   30cca:	68fb      	ldr	r3, [r7, #12]
   30ccc:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30cce:	69bb      	ldr	r3, [r7, #24]
   30cd0:	2214      	movs	r2, #20
   30cd2:	18ba      	adds	r2, r7, r2
   30cd4:	0011      	movs	r1, r2
   30cd6:	0018      	movs	r0, r3
   30cd8:	4b12      	ldr	r3, [pc, #72]	; (30d24 <MQTTDeserialize_ack+0xac>)
   30cda:	4798      	blx	r3
   30cdc:	0003      	movs	r3, r0
   30cde:	627b      	str	r3, [r7, #36]	; 0x24
   30ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30ce2:	69bb      	ldr	r3, [r7, #24]
   30ce4:	189b      	adds	r3, r3, r2
   30ce6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30ce8:	69bb      	ldr	r3, [r7, #24]
   30cea:	697a      	ldr	r2, [r7, #20]
   30cec:	189b      	adds	r3, r3, r2
   30cee:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   30cf0:	6a3b      	ldr	r3, [r7, #32]
   30cf2:	69ba      	ldr	r2, [r7, #24]
   30cf4:	1a9b      	subs	r3, r3, r2
   30cf6:	2b01      	cmp	r3, #1
   30cf8:	dd0b      	ble.n	30d12 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   30cfa:	2318      	movs	r3, #24
   30cfc:	18fb      	adds	r3, r7, r3
   30cfe:	0018      	movs	r0, r3
   30d00:	4b09      	ldr	r3, [pc, #36]	; (30d28 <MQTTDeserialize_ack+0xb0>)
   30d02:	4798      	blx	r3
   30d04:	0003      	movs	r3, r0
   30d06:	b29a      	uxth	r2, r3
   30d08:	687b      	ldr	r3, [r7, #4]
   30d0a:	801a      	strh	r2, [r3, #0]

	rc = 1;
   30d0c:	2301      	movs	r3, #1
   30d0e:	627b      	str	r3, [r7, #36]	; 0x24
   30d10:	e000      	b.n	30d14 <MQTTDeserialize_ack+0x9c>
		goto exit;
   30d12:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30d16:	0018      	movs	r0, r3
   30d18:	46bd      	mov	sp, r7
   30d1a:	b00a      	add	sp, #40	; 0x28
   30d1c:	bd80      	pop	{r7, pc}
   30d1e:	46c0      	nop			; (mov r8, r8)
   30d20:	00030f1b 	.word	0x00030f1b
   30d24:	00030eb5 	.word	0x00030eb5
   30d28:	00030ee9 	.word	0x00030ee9

00030d2c <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   30d2c:	b580      	push	{r7, lr}
   30d2e:	b084      	sub	sp, #16
   30d30:	af00      	add	r7, sp, #0
   30d32:	6078      	str	r0, [r7, #4]
   30d34:	6039      	str	r1, [r7, #0]
	int rc = 0;
   30d36:	2300      	movs	r3, #0
   30d38:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   30d3a:	683b      	ldr	r3, [r7, #0]
   30d3c:	4a17      	ldr	r2, [pc, #92]	; (30d9c <MQTTPacket_encode+0x70>)
   30d3e:	4013      	ands	r3, r2
   30d40:	d504      	bpl.n	30d4c <MQTTPacket_encode+0x20>
   30d42:	3b01      	subs	r3, #1
   30d44:	2280      	movs	r2, #128	; 0x80
   30d46:	4252      	negs	r2, r2
   30d48:	4313      	orrs	r3, r2
   30d4a:	3301      	adds	r3, #1
   30d4c:	001a      	movs	r2, r3
   30d4e:	230b      	movs	r3, #11
   30d50:	18fb      	adds	r3, r7, r3
   30d52:	701a      	strb	r2, [r3, #0]
		length /= 128;
   30d54:	683b      	ldr	r3, [r7, #0]
   30d56:	2b00      	cmp	r3, #0
   30d58:	da00      	bge.n	30d5c <MQTTPacket_encode+0x30>
   30d5a:	337f      	adds	r3, #127	; 0x7f
   30d5c:	11db      	asrs	r3, r3, #7
   30d5e:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   30d60:	683b      	ldr	r3, [r7, #0]
   30d62:	2b00      	cmp	r3, #0
   30d64:	dd08      	ble.n	30d78 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   30d66:	230b      	movs	r3, #11
   30d68:	18fb      	adds	r3, r7, r3
   30d6a:	220b      	movs	r2, #11
   30d6c:	18ba      	adds	r2, r7, r2
   30d6e:	7812      	ldrb	r2, [r2, #0]
   30d70:	2180      	movs	r1, #128	; 0x80
   30d72:	4249      	negs	r1, r1
   30d74:	430a      	orrs	r2, r1
   30d76:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   30d78:	68fb      	ldr	r3, [r7, #12]
   30d7a:	1c5a      	adds	r2, r3, #1
   30d7c:	60fa      	str	r2, [r7, #12]
   30d7e:	001a      	movs	r2, r3
   30d80:	687b      	ldr	r3, [r7, #4]
   30d82:	189b      	adds	r3, r3, r2
   30d84:	220b      	movs	r2, #11
   30d86:	18ba      	adds	r2, r7, r2
   30d88:	7812      	ldrb	r2, [r2, #0]
   30d8a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   30d8c:	683b      	ldr	r3, [r7, #0]
   30d8e:	2b00      	cmp	r3, #0
   30d90:	dcd3      	bgt.n	30d3a <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   30d92:	68fb      	ldr	r3, [r7, #12]
}
   30d94:	0018      	movs	r0, r3
   30d96:	46bd      	mov	sp, r7
   30d98:	b004      	add	sp, #16
   30d9a:	bd80      	pop	{r7, pc}
   30d9c:	8000007f 	.word	0x8000007f

00030da0 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   30da0:	b580      	push	{r7, lr}
   30da2:	b086      	sub	sp, #24
   30da4:	af00      	add	r7, sp, #0
   30da6:	6078      	str	r0, [r7, #4]
   30da8:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   30daa:	2301      	movs	r3, #1
   30dac:	617b      	str	r3, [r7, #20]
	int len = 0;
   30dae:	2300      	movs	r3, #0
   30db0:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   30db2:	683b      	ldr	r3, [r7, #0]
   30db4:	2200      	movs	r2, #0
   30db6:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   30db8:	2301      	movs	r3, #1
   30dba:	425b      	negs	r3, r3
   30dbc:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   30dbe:	693b      	ldr	r3, [r7, #16]
   30dc0:	3301      	adds	r3, #1
   30dc2:	613b      	str	r3, [r7, #16]
   30dc4:	693b      	ldr	r3, [r7, #16]
   30dc6:	2b04      	cmp	r3, #4
   30dc8:	dd03      	ble.n	30dd2 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   30dca:	2301      	movs	r3, #1
   30dcc:	425b      	negs	r3, r3
   30dce:	60fb      	str	r3, [r7, #12]
			goto exit;
   30dd0:	e022      	b.n	30e18 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   30dd2:	230b      	movs	r3, #11
   30dd4:	18fa      	adds	r2, r7, r3
   30dd6:	687b      	ldr	r3, [r7, #4]
   30dd8:	2101      	movs	r1, #1
   30dda:	0010      	movs	r0, r2
   30ddc:	4798      	blx	r3
   30dde:	0003      	movs	r3, r0
   30de0:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   30de2:	68fb      	ldr	r3, [r7, #12]
   30de4:	2b01      	cmp	r3, #1
   30de6:	d116      	bne.n	30e16 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   30de8:	683b      	ldr	r3, [r7, #0]
   30dea:	681a      	ldr	r2, [r3, #0]
   30dec:	230b      	movs	r3, #11
   30dee:	18fb      	adds	r3, r7, r3
   30df0:	781b      	ldrb	r3, [r3, #0]
   30df2:	0019      	movs	r1, r3
   30df4:	237f      	movs	r3, #127	; 0x7f
   30df6:	400b      	ands	r3, r1
   30df8:	6979      	ldr	r1, [r7, #20]
   30dfa:	434b      	muls	r3, r1
   30dfc:	18d2      	adds	r2, r2, r3
   30dfe:	683b      	ldr	r3, [r7, #0]
   30e00:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   30e02:	697b      	ldr	r3, [r7, #20]
   30e04:	01db      	lsls	r3, r3, #7
   30e06:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   30e08:	230b      	movs	r3, #11
   30e0a:	18fb      	adds	r3, r7, r3
   30e0c:	781b      	ldrb	r3, [r3, #0]
   30e0e:	b25b      	sxtb	r3, r3
   30e10:	2b00      	cmp	r3, #0
   30e12:	dbd1      	blt.n	30db8 <MQTTPacket_decode+0x18>
   30e14:	e000      	b.n	30e18 <MQTTPacket_decode+0x78>
			goto exit;
   30e16:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   30e18:	693b      	ldr	r3, [r7, #16]
}
   30e1a:	0018      	movs	r0, r3
   30e1c:	46bd      	mov	sp, r7
   30e1e:	b006      	add	sp, #24
   30e20:	bd80      	pop	{r7, pc}
	...

00030e24 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   30e24:	b580      	push	{r7, lr}
   30e26:	b082      	sub	sp, #8
   30e28:	af00      	add	r7, sp, #0
   30e2a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   30e2c:	687b      	ldr	r3, [r7, #4]
   30e2e:	3301      	adds	r3, #1
   30e30:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   30e32:	687b      	ldr	r3, [r7, #4]
   30e34:	2b7f      	cmp	r3, #127	; 0x7f
   30e36:	dc03      	bgt.n	30e40 <MQTTPacket_len+0x1c>
		rem_len += 1;
   30e38:	687b      	ldr	r3, [r7, #4]
   30e3a:	3301      	adds	r3, #1
   30e3c:	607b      	str	r3, [r7, #4]
   30e3e:	e012      	b.n	30e66 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   30e40:	687b      	ldr	r3, [r7, #4]
   30e42:	4a0b      	ldr	r2, [pc, #44]	; (30e70 <MQTTPacket_len+0x4c>)
   30e44:	4293      	cmp	r3, r2
   30e46:	dc03      	bgt.n	30e50 <MQTTPacket_len+0x2c>
		rem_len += 2;
   30e48:	687b      	ldr	r3, [r7, #4]
   30e4a:	3302      	adds	r3, #2
   30e4c:	607b      	str	r3, [r7, #4]
   30e4e:	e00a      	b.n	30e66 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   30e50:	687b      	ldr	r3, [r7, #4]
   30e52:	4a08      	ldr	r2, [pc, #32]	; (30e74 <MQTTPacket_len+0x50>)
   30e54:	4293      	cmp	r3, r2
   30e56:	dc03      	bgt.n	30e60 <MQTTPacket_len+0x3c>
		rem_len += 3;
   30e58:	687b      	ldr	r3, [r7, #4]
   30e5a:	3303      	adds	r3, #3
   30e5c:	607b      	str	r3, [r7, #4]
   30e5e:	e002      	b.n	30e66 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   30e60:	687b      	ldr	r3, [r7, #4]
   30e62:	3304      	adds	r3, #4
   30e64:	607b      	str	r3, [r7, #4]
	return rem_len;
   30e66:	687b      	ldr	r3, [r7, #4]
}
   30e68:	0018      	movs	r0, r3
   30e6a:	46bd      	mov	sp, r7
   30e6c:	b002      	add	sp, #8
   30e6e:	bd80      	pop	{r7, pc}
   30e70:	00003fff 	.word	0x00003fff
   30e74:	001ffffe 	.word	0x001ffffe

00030e78 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   30e78:	b580      	push	{r7, lr}
   30e7a:	b084      	sub	sp, #16
   30e7c:	af00      	add	r7, sp, #0
   30e7e:	6078      	str	r0, [r7, #4]
   30e80:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   30e82:	2300      	movs	r3, #0
   30e84:	60fb      	str	r3, [r7, #12]
   30e86:	e00a      	b.n	30e9e <bufchar+0x26>
		*c = *bufptr++;
   30e88:	4b09      	ldr	r3, [pc, #36]	; (30eb0 <bufchar+0x38>)
   30e8a:	681b      	ldr	r3, [r3, #0]
   30e8c:	1c59      	adds	r1, r3, #1
   30e8e:	4a08      	ldr	r2, [pc, #32]	; (30eb0 <bufchar+0x38>)
   30e90:	6011      	str	r1, [r2, #0]
   30e92:	781a      	ldrb	r2, [r3, #0]
   30e94:	687b      	ldr	r3, [r7, #4]
   30e96:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   30e98:	68fb      	ldr	r3, [r7, #12]
   30e9a:	3301      	adds	r3, #1
   30e9c:	60fb      	str	r3, [r7, #12]
   30e9e:	68fa      	ldr	r2, [r7, #12]
   30ea0:	683b      	ldr	r3, [r7, #0]
   30ea2:	429a      	cmp	r2, r3
   30ea4:	dbf0      	blt.n	30e88 <bufchar+0x10>
	return count;
   30ea6:	683b      	ldr	r3, [r7, #0]
}
   30ea8:	0018      	movs	r0, r3
   30eaa:	46bd      	mov	sp, r7
   30eac:	b004      	add	sp, #16
   30eae:	bd80      	pop	{r7, pc}
   30eb0:	200046f0 	.word	0x200046f0

00030eb4 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   30eb4:	b580      	push	{r7, lr}
   30eb6:	b082      	sub	sp, #8
   30eb8:	af00      	add	r7, sp, #0
   30eba:	6078      	str	r0, [r7, #4]
   30ebc:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   30ebe:	4b07      	ldr	r3, [pc, #28]	; (30edc <MQTTPacket_decodeBuf+0x28>)
   30ec0:	687a      	ldr	r2, [r7, #4]
   30ec2:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   30ec4:	683a      	ldr	r2, [r7, #0]
   30ec6:	4b06      	ldr	r3, [pc, #24]	; (30ee0 <MQTTPacket_decodeBuf+0x2c>)
   30ec8:	0011      	movs	r1, r2
   30eca:	0018      	movs	r0, r3
   30ecc:	4b05      	ldr	r3, [pc, #20]	; (30ee4 <MQTTPacket_decodeBuf+0x30>)
   30ece:	4798      	blx	r3
   30ed0:	0003      	movs	r3, r0
}
   30ed2:	0018      	movs	r0, r3
   30ed4:	46bd      	mov	sp, r7
   30ed6:	b002      	add	sp, #8
   30ed8:	bd80      	pop	{r7, pc}
   30eda:	46c0      	nop			; (mov r8, r8)
   30edc:	200046f0 	.word	0x200046f0
   30ee0:	00030e79 	.word	0x00030e79
   30ee4:	00030da1 	.word	0x00030da1

00030ee8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   30ee8:	b580      	push	{r7, lr}
   30eea:	b084      	sub	sp, #16
   30eec:	af00      	add	r7, sp, #0
   30eee:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   30ef0:	687b      	ldr	r3, [r7, #4]
   30ef2:	681b      	ldr	r3, [r3, #0]
   30ef4:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   30ef6:	68fb      	ldr	r3, [r7, #12]
   30ef8:	781b      	ldrb	r3, [r3, #0]
   30efa:	021b      	lsls	r3, r3, #8
   30efc:	68fa      	ldr	r2, [r7, #12]
   30efe:	3201      	adds	r2, #1
   30f00:	7812      	ldrb	r2, [r2, #0]
   30f02:	189b      	adds	r3, r3, r2
   30f04:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   30f06:	687b      	ldr	r3, [r7, #4]
   30f08:	681b      	ldr	r3, [r3, #0]
   30f0a:	1c9a      	adds	r2, r3, #2
   30f0c:	687b      	ldr	r3, [r7, #4]
   30f0e:	601a      	str	r2, [r3, #0]
	return len;
   30f10:	68bb      	ldr	r3, [r7, #8]
}
   30f12:	0018      	movs	r0, r3
   30f14:	46bd      	mov	sp, r7
   30f16:	b004      	add	sp, #16
   30f18:	bd80      	pop	{r7, pc}

00030f1a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   30f1a:	b580      	push	{r7, lr}
   30f1c:	b084      	sub	sp, #16
   30f1e:	af00      	add	r7, sp, #0
   30f20:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   30f22:	687b      	ldr	r3, [r7, #4]
   30f24:	681a      	ldr	r2, [r3, #0]
   30f26:	230f      	movs	r3, #15
   30f28:	18fb      	adds	r3, r7, r3
   30f2a:	7812      	ldrb	r2, [r2, #0]
   30f2c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   30f2e:	687b      	ldr	r3, [r7, #4]
   30f30:	681b      	ldr	r3, [r3, #0]
   30f32:	1c5a      	adds	r2, r3, #1
   30f34:	687b      	ldr	r3, [r7, #4]
   30f36:	601a      	str	r2, [r3, #0]
	return c;
   30f38:	230f      	movs	r3, #15
   30f3a:	18fb      	adds	r3, r7, r3
   30f3c:	781b      	ldrb	r3, [r3, #0]
}
   30f3e:	0018      	movs	r0, r3
   30f40:	46bd      	mov	sp, r7
   30f42:	b004      	add	sp, #16
   30f44:	bd80      	pop	{r7, pc}

00030f46 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   30f46:	b580      	push	{r7, lr}
   30f48:	b082      	sub	sp, #8
   30f4a:	af00      	add	r7, sp, #0
   30f4c:	6078      	str	r0, [r7, #4]
   30f4e:	000a      	movs	r2, r1
   30f50:	1cfb      	adds	r3, r7, #3
   30f52:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   30f54:	687b      	ldr	r3, [r7, #4]
   30f56:	681b      	ldr	r3, [r3, #0]
   30f58:	1cfa      	adds	r2, r7, #3
   30f5a:	7812      	ldrb	r2, [r2, #0]
   30f5c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   30f5e:	687b      	ldr	r3, [r7, #4]
   30f60:	681b      	ldr	r3, [r3, #0]
   30f62:	1c5a      	adds	r2, r3, #1
   30f64:	687b      	ldr	r3, [r7, #4]
   30f66:	601a      	str	r2, [r3, #0]
}
   30f68:	46c0      	nop			; (mov r8, r8)
   30f6a:	46bd      	mov	sp, r7
   30f6c:	b002      	add	sp, #8
   30f6e:	bd80      	pop	{r7, pc}

00030f70 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   30f70:	b580      	push	{r7, lr}
   30f72:	b082      	sub	sp, #8
   30f74:	af00      	add	r7, sp, #0
   30f76:	6078      	str	r0, [r7, #4]
   30f78:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   30f7a:	687b      	ldr	r3, [r7, #4]
   30f7c:	681a      	ldr	r2, [r3, #0]
   30f7e:	683b      	ldr	r3, [r7, #0]
   30f80:	2b00      	cmp	r3, #0
   30f82:	da00      	bge.n	30f86 <writeInt+0x16>
   30f84:	33ff      	adds	r3, #255	; 0xff
   30f86:	121b      	asrs	r3, r3, #8
   30f88:	b2db      	uxtb	r3, r3
   30f8a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   30f8c:	687b      	ldr	r3, [r7, #4]
   30f8e:	681b      	ldr	r3, [r3, #0]
   30f90:	1c5a      	adds	r2, r3, #1
   30f92:	687b      	ldr	r3, [r7, #4]
   30f94:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   30f96:	687b      	ldr	r3, [r7, #4]
   30f98:	681a      	ldr	r2, [r3, #0]
   30f9a:	683b      	ldr	r3, [r7, #0]
   30f9c:	4908      	ldr	r1, [pc, #32]	; (30fc0 <writeInt+0x50>)
   30f9e:	400b      	ands	r3, r1
   30fa0:	d503      	bpl.n	30faa <writeInt+0x3a>
   30fa2:	3b01      	subs	r3, #1
   30fa4:	4907      	ldr	r1, [pc, #28]	; (30fc4 <writeInt+0x54>)
   30fa6:	430b      	orrs	r3, r1
   30fa8:	3301      	adds	r3, #1
   30faa:	b2db      	uxtb	r3, r3
   30fac:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   30fae:	687b      	ldr	r3, [r7, #4]
   30fb0:	681b      	ldr	r3, [r3, #0]
   30fb2:	1c5a      	adds	r2, r3, #1
   30fb4:	687b      	ldr	r3, [r7, #4]
   30fb6:	601a      	str	r2, [r3, #0]
}
   30fb8:	46c0      	nop			; (mov r8, r8)
   30fba:	46bd      	mov	sp, r7
   30fbc:	b002      	add	sp, #8
   30fbe:	bd80      	pop	{r7, pc}
   30fc0:	800000ff 	.word	0x800000ff
   30fc4:	ffffff00 	.word	0xffffff00

00030fc8 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   30fc8:	b580      	push	{r7, lr}
   30fca:	b084      	sub	sp, #16
   30fcc:	af00      	add	r7, sp, #0
   30fce:	6078      	str	r0, [r7, #4]
   30fd0:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   30fd2:	683b      	ldr	r3, [r7, #0]
   30fd4:	0018      	movs	r0, r3
   30fd6:	4b0d      	ldr	r3, [pc, #52]	; (3100c <writeCString+0x44>)
   30fd8:	4798      	blx	r3
   30fda:	0003      	movs	r3, r0
   30fdc:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   30fde:	68fa      	ldr	r2, [r7, #12]
   30fe0:	687b      	ldr	r3, [r7, #4]
   30fe2:	0011      	movs	r1, r2
   30fe4:	0018      	movs	r0, r3
   30fe6:	4b0a      	ldr	r3, [pc, #40]	; (31010 <writeCString+0x48>)
   30fe8:	4798      	blx	r3
	memcpy(*pptr, string, len);
   30fea:	687b      	ldr	r3, [r7, #4]
   30fec:	681b      	ldr	r3, [r3, #0]
   30fee:	68fa      	ldr	r2, [r7, #12]
   30ff0:	6839      	ldr	r1, [r7, #0]
   30ff2:	0018      	movs	r0, r3
   30ff4:	4b07      	ldr	r3, [pc, #28]	; (31014 <writeCString+0x4c>)
   30ff6:	4798      	blx	r3
	*pptr += len;
   30ff8:	687b      	ldr	r3, [r7, #4]
   30ffa:	681a      	ldr	r2, [r3, #0]
   30ffc:	68fb      	ldr	r3, [r7, #12]
   30ffe:	18d2      	adds	r2, r2, r3
   31000:	687b      	ldr	r3, [r7, #4]
   31002:	601a      	str	r2, [r3, #0]
}
   31004:	46c0      	nop			; (mov r8, r8)
   31006:	46bd      	mov	sp, r7
   31008:	b004      	add	sp, #16
   3100a:	bd80      	pop	{r7, pc}
   3100c:	000359c7 	.word	0x000359c7
   31010:	00030f71 	.word	0x00030f71
   31014:	000355d9 	.word	0x000355d9

00031018 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   31018:	b580      	push	{r7, lr}
   3101a:	b084      	sub	sp, #16
   3101c:	af00      	add	r7, sp, #0
   3101e:	60f8      	str	r0, [r7, #12]
   31020:	0038      	movs	r0, r7
   31022:	6001      	str	r1, [r0, #0]
   31024:	6042      	str	r2, [r0, #4]
   31026:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   31028:	003b      	movs	r3, r7
   3102a:	685b      	ldr	r3, [r3, #4]
   3102c:	2b00      	cmp	r3, #0
   3102e:	dd17      	ble.n	31060 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   31030:	003b      	movs	r3, r7
   31032:	685a      	ldr	r2, [r3, #4]
   31034:	68fb      	ldr	r3, [r7, #12]
   31036:	0011      	movs	r1, r2
   31038:	0018      	movs	r0, r3
   3103a:	4b14      	ldr	r3, [pc, #80]	; (3108c <writeMQTTString+0x74>)
   3103c:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   3103e:	68fb      	ldr	r3, [r7, #12]
   31040:	6818      	ldr	r0, [r3, #0]
   31042:	003b      	movs	r3, r7
   31044:	6899      	ldr	r1, [r3, #8]
   31046:	003b      	movs	r3, r7
   31048:	685b      	ldr	r3, [r3, #4]
   3104a:	001a      	movs	r2, r3
   3104c:	4b10      	ldr	r3, [pc, #64]	; (31090 <writeMQTTString+0x78>)
   3104e:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   31050:	68fb      	ldr	r3, [r7, #12]
   31052:	681a      	ldr	r2, [r3, #0]
   31054:	003b      	movs	r3, r7
   31056:	685b      	ldr	r3, [r3, #4]
   31058:	18d2      	adds	r2, r2, r3
   3105a:	68fb      	ldr	r3, [r7, #12]
   3105c:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   3105e:	e010      	b.n	31082 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   31060:	003b      	movs	r3, r7
   31062:	681b      	ldr	r3, [r3, #0]
   31064:	2b00      	cmp	r3, #0
   31066:	d007      	beq.n	31078 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   31068:	003b      	movs	r3, r7
   3106a:	681a      	ldr	r2, [r3, #0]
   3106c:	68fb      	ldr	r3, [r7, #12]
   3106e:	0011      	movs	r1, r2
   31070:	0018      	movs	r0, r3
   31072:	4b08      	ldr	r3, [pc, #32]	; (31094 <writeMQTTString+0x7c>)
   31074:	4798      	blx	r3
}
   31076:	e004      	b.n	31082 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   31078:	68fb      	ldr	r3, [r7, #12]
   3107a:	2100      	movs	r1, #0
   3107c:	0018      	movs	r0, r3
   3107e:	4b03      	ldr	r3, [pc, #12]	; (3108c <writeMQTTString+0x74>)
   31080:	4798      	blx	r3
}
   31082:	46c0      	nop			; (mov r8, r8)
   31084:	46bd      	mov	sp, r7
   31086:	b004      	add	sp, #16
   31088:	bd80      	pop	{r7, pc}
   3108a:	46c0      	nop			; (mov r8, r8)
   3108c:	00030f71 	.word	0x00030f71
   31090:	000355d9 	.word	0x000355d9
   31094:	00030fc9 	.word	0x00030fc9

00031098 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   31098:	b580      	push	{r7, lr}
   3109a:	b086      	sub	sp, #24
   3109c:	af00      	add	r7, sp, #0
   3109e:	60f8      	str	r0, [r7, #12]
   310a0:	60b9      	str	r1, [r7, #8]
   310a2:	607a      	str	r2, [r7, #4]
	int rc = 0;
   310a4:	2300      	movs	r3, #0
   310a6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   310a8:	687a      	ldr	r2, [r7, #4]
   310aa:	68bb      	ldr	r3, [r7, #8]
   310ac:	681b      	ldr	r3, [r3, #0]
   310ae:	1ad3      	subs	r3, r2, r3
   310b0:	2b01      	cmp	r3, #1
   310b2:	dd1b      	ble.n	310ec <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   310b4:	68bb      	ldr	r3, [r7, #8]
   310b6:	0018      	movs	r0, r3
   310b8:	4b10      	ldr	r3, [pc, #64]	; (310fc <readMQTTLenString+0x64>)
   310ba:	4798      	blx	r3
   310bc:	0002      	movs	r2, r0
   310be:	68fb      	ldr	r3, [r7, #12]
   310c0:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   310c2:	68bb      	ldr	r3, [r7, #8]
   310c4:	681a      	ldr	r2, [r3, #0]
   310c6:	68fb      	ldr	r3, [r7, #12]
   310c8:	685b      	ldr	r3, [r3, #4]
   310ca:	18d2      	adds	r2, r2, r3
   310cc:	687b      	ldr	r3, [r7, #4]
   310ce:	429a      	cmp	r2, r3
   310d0:	d80c      	bhi.n	310ec <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   310d2:	68bb      	ldr	r3, [r7, #8]
   310d4:	681a      	ldr	r2, [r3, #0]
   310d6:	68fb      	ldr	r3, [r7, #12]
   310d8:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   310da:	68bb      	ldr	r3, [r7, #8]
   310dc:	681a      	ldr	r2, [r3, #0]
   310de:	68fb      	ldr	r3, [r7, #12]
   310e0:	685b      	ldr	r3, [r3, #4]
   310e2:	18d2      	adds	r2, r2, r3
   310e4:	68bb      	ldr	r3, [r7, #8]
   310e6:	601a      	str	r2, [r3, #0]
			rc = 1;
   310e8:	2301      	movs	r3, #1
   310ea:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   310ec:	68fb      	ldr	r3, [r7, #12]
   310ee:	2200      	movs	r2, #0
   310f0:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   310f2:	697b      	ldr	r3, [r7, #20]
}
   310f4:	0018      	movs	r0, r3
   310f6:	46bd      	mov	sp, r7
   310f8:	b006      	add	sp, #24
   310fa:	bd80      	pop	{r7, pc}
   310fc:	00030ee9 	.word	0x00030ee9

00031100 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   31100:	b580      	push	{r7, lr}
   31102:	b086      	sub	sp, #24
   31104:	af00      	add	r7, sp, #0
   31106:	1d3b      	adds	r3, r7, #4
   31108:	6018      	str	r0, [r3, #0]
   3110a:	6059      	str	r1, [r3, #4]
   3110c:	609a      	str	r2, [r3, #8]
	int rc = 0;
   3110e:	2300      	movs	r3, #0
   31110:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   31112:	1d3b      	adds	r3, r7, #4
   31114:	681b      	ldr	r3, [r3, #0]
   31116:	2b00      	cmp	r3, #0
   31118:	d007      	beq.n	3112a <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   3111a:	1d3b      	adds	r3, r7, #4
   3111c:	681b      	ldr	r3, [r3, #0]
   3111e:	0018      	movs	r0, r3
   31120:	4b06      	ldr	r3, [pc, #24]	; (3113c <MQTTstrlen+0x3c>)
   31122:	4798      	blx	r3
   31124:	0003      	movs	r3, r0
   31126:	617b      	str	r3, [r7, #20]
   31128:	e002      	b.n	31130 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   3112a:	1d3b      	adds	r3, r7, #4
   3112c:	685b      	ldr	r3, [r3, #4]
   3112e:	617b      	str	r3, [r7, #20]
	return rc;
   31130:	697b      	ldr	r3, [r7, #20]
}
   31132:	0018      	movs	r0, r3
   31134:	46bd      	mov	sp, r7
   31136:	b006      	add	sp, #24
   31138:	bd80      	pop	{r7, pc}
   3113a:	46c0      	nop			; (mov r8, r8)
   3113c:	000359c7 	.word	0x000359c7

00031140 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   31140:	b580      	push	{r7, lr}
   31142:	b086      	sub	sp, #24
   31144:	af00      	add	r7, sp, #0
   31146:	6078      	str	r0, [r7, #4]
   31148:	6039      	str	r1, [r7, #0]
	int alen = 0,
   3114a:	2300      	movs	r3, #0
   3114c:	617b      	str	r3, [r7, #20]
		blen = 0;
   3114e:	2300      	movs	r3, #0
   31150:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   31152:	687b      	ldr	r3, [r7, #4]
   31154:	681b      	ldr	r3, [r3, #0]
   31156:	2b00      	cmp	r3, #0
   31158:	d00a      	beq.n	31170 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   3115a:	687b      	ldr	r3, [r7, #4]
   3115c:	681b      	ldr	r3, [r3, #0]
   3115e:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   31160:	687b      	ldr	r3, [r7, #4]
   31162:	681b      	ldr	r3, [r3, #0]
   31164:	0018      	movs	r0, r3
   31166:	4b12      	ldr	r3, [pc, #72]	; (311b0 <MQTTPacket_equals+0x70>)
   31168:	4798      	blx	r3
   3116a:	0003      	movs	r3, r0
   3116c:	617b      	str	r3, [r7, #20]
   3116e:	e005      	b.n	3117c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   31170:	687b      	ldr	r3, [r7, #4]
   31172:	689b      	ldr	r3, [r3, #8]
   31174:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   31176:	687b      	ldr	r3, [r7, #4]
   31178:	685b      	ldr	r3, [r3, #4]
   3117a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   3117c:	683b      	ldr	r3, [r7, #0]
   3117e:	0018      	movs	r0, r3
   31180:	4b0b      	ldr	r3, [pc, #44]	; (311b0 <MQTTPacket_equals+0x70>)
   31182:	4798      	blx	r3
   31184:	0003      	movs	r3, r0
   31186:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   31188:	697a      	ldr	r2, [r7, #20]
   3118a:	68fb      	ldr	r3, [r7, #12]
   3118c:	429a      	cmp	r2, r3
   3118e:	d109      	bne.n	311a4 <MQTTPacket_equals+0x64>
   31190:	697a      	ldr	r2, [r7, #20]
   31192:	6839      	ldr	r1, [r7, #0]
   31194:	693b      	ldr	r3, [r7, #16]
   31196:	0018      	movs	r0, r3
   31198:	4b06      	ldr	r3, [pc, #24]	; (311b4 <MQTTPacket_equals+0x74>)
   3119a:	4798      	blx	r3
   3119c:	1e03      	subs	r3, r0, #0
   3119e:	d101      	bne.n	311a4 <MQTTPacket_equals+0x64>
   311a0:	2301      	movs	r3, #1
   311a2:	e000      	b.n	311a6 <MQTTPacket_equals+0x66>
   311a4:	2300      	movs	r3, #0
}
   311a6:	0018      	movs	r0, r3
   311a8:	46bd      	mov	sp, r7
   311aa:	b006      	add	sp, #24
   311ac:	bd80      	pop	{r7, pc}
   311ae:	46c0      	nop			; (mov r8, r8)
   311b0:	000359c7 	.word	0x000359c7
   311b4:	000359d5 	.word	0x000359d5

000311b8 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   311b8:	b580      	push	{r7, lr}
   311ba:	b086      	sub	sp, #24
   311bc:	af00      	add	r7, sp, #0
   311be:	60f8      	str	r0, [r7, #12]
   311c0:	0038      	movs	r0, r7
   311c2:	6001      	str	r1, [r0, #0]
   311c4:	6042      	str	r2, [r0, #4]
   311c6:	6083      	str	r3, [r0, #8]
	int len = 0;
   311c8:	2300      	movs	r3, #0
   311ca:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   311cc:	003b      	movs	r3, r7
   311ce:	6818      	ldr	r0, [r3, #0]
   311d0:	6859      	ldr	r1, [r3, #4]
   311d2:	689a      	ldr	r2, [r3, #8]
   311d4:	4b09      	ldr	r3, [pc, #36]	; (311fc <MQTTSerialize_publishLength+0x44>)
   311d6:	4798      	blx	r3
   311d8:	0003      	movs	r3, r0
   311da:	1c9a      	adds	r2, r3, #2
   311dc:	6a3b      	ldr	r3, [r7, #32]
   311de:	18d3      	adds	r3, r2, r3
   311e0:	697a      	ldr	r2, [r7, #20]
   311e2:	18d3      	adds	r3, r2, r3
   311e4:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   311e6:	68fb      	ldr	r3, [r7, #12]
   311e8:	2b00      	cmp	r3, #0
   311ea:	dd02      	ble.n	311f2 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   311ec:	697b      	ldr	r3, [r7, #20]
   311ee:	3302      	adds	r3, #2
   311f0:	617b      	str	r3, [r7, #20]
	return len;
   311f2:	697b      	ldr	r3, [r7, #20]
}
   311f4:	0018      	movs	r0, r3
   311f6:	46bd      	mov	sp, r7
   311f8:	b006      	add	sp, #24
   311fa:	bd80      	pop	{r7, pc}
   311fc:	00031101 	.word	0x00031101

00031200 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   31200:	b590      	push	{r4, r7, lr}
   31202:	b08b      	sub	sp, #44	; 0x2c
   31204:	af02      	add	r7, sp, #8
   31206:	60f8      	str	r0, [r7, #12]
   31208:	60b9      	str	r1, [r7, #8]
   3120a:	603b      	str	r3, [r7, #0]
   3120c:	1dfb      	adds	r3, r7, #7
   3120e:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   31210:	68fb      	ldr	r3, [r7, #12]
   31212:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   31214:	2300      	movs	r3, #0
   31216:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   31218:	2300      	movs	r3, #0
   3121a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   3121c:	2300      	movs	r3, #0
   3121e:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   31220:	2308      	movs	r3, #8
   31222:	2230      	movs	r2, #48	; 0x30
   31224:	4694      	mov	ip, r2
   31226:	44bc      	add	ip, r7
   31228:	4463      	add	r3, ip
   3122a:	6838      	ldr	r0, [r7, #0]
   3122c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3122e:	9200      	str	r2, [sp, #0]
   31230:	6819      	ldr	r1, [r3, #0]
   31232:	685a      	ldr	r2, [r3, #4]
   31234:	689b      	ldr	r3, [r3, #8]
   31236:	4c46      	ldr	r4, [pc, #280]	; (31350 <MQTTSerialize_publish+0x150>)
   31238:	47a0      	blx	r4
   3123a:	0003      	movs	r3, r0
   3123c:	61bb      	str	r3, [r7, #24]
   3123e:	69bb      	ldr	r3, [r7, #24]
   31240:	0018      	movs	r0, r3
   31242:	4b44      	ldr	r3, [pc, #272]	; (31354 <MQTTSerialize_publish+0x154>)
   31244:	4798      	blx	r3
   31246:	0002      	movs	r2, r0
   31248:	68bb      	ldr	r3, [r7, #8]
   3124a:	429a      	cmp	r2, r3
   3124c:	dd03      	ble.n	31256 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3124e:	2302      	movs	r3, #2
   31250:	425b      	negs	r3, r3
   31252:	61fb      	str	r3, [r7, #28]
		goto exit;
   31254:	e077      	b.n	31346 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   31256:	2310      	movs	r3, #16
   31258:	18fb      	adds	r3, r7, r3
   3125a:	781a      	ldrb	r2, [r3, #0]
   3125c:	210f      	movs	r1, #15
   3125e:	400a      	ands	r2, r1
   31260:	1c11      	adds	r1, r2, #0
   31262:	2230      	movs	r2, #48	; 0x30
   31264:	430a      	orrs	r2, r1
   31266:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   31268:	1dfb      	adds	r3, r7, #7
   3126a:	781b      	ldrb	r3, [r3, #0]
   3126c:	2201      	movs	r2, #1
   3126e:	4013      	ands	r3, r2
   31270:	b2da      	uxtb	r2, r3
   31272:	2310      	movs	r3, #16
   31274:	18fb      	adds	r3, r7, r3
   31276:	2101      	movs	r1, #1
   31278:	400a      	ands	r2, r1
   3127a:	00d0      	lsls	r0, r2, #3
   3127c:	781a      	ldrb	r2, [r3, #0]
   3127e:	2108      	movs	r1, #8
   31280:	438a      	bics	r2, r1
   31282:	1c11      	adds	r1, r2, #0
   31284:	1c02      	adds	r2, r0, #0
   31286:	430a      	orrs	r2, r1
   31288:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   3128a:	683b      	ldr	r3, [r7, #0]
   3128c:	b2db      	uxtb	r3, r3
   3128e:	1c1a      	adds	r2, r3, #0
   31290:	2303      	movs	r3, #3
   31292:	4013      	ands	r3, r2
   31294:	b2da      	uxtb	r2, r3
   31296:	2310      	movs	r3, #16
   31298:	18fb      	adds	r3, r7, r3
   3129a:	2103      	movs	r1, #3
   3129c:	400a      	ands	r2, r1
   3129e:	1890      	adds	r0, r2, r2
   312a0:	781a      	ldrb	r2, [r3, #0]
   312a2:	2106      	movs	r1, #6
   312a4:	438a      	bics	r2, r1
   312a6:	1c11      	adds	r1, r2, #0
   312a8:	1c02      	adds	r2, r0, #0
   312aa:	430a      	orrs	r2, r1
   312ac:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   312ae:	2330      	movs	r3, #48	; 0x30
   312b0:	18fb      	adds	r3, r7, r3
   312b2:	781b      	ldrb	r3, [r3, #0]
   312b4:	2201      	movs	r2, #1
   312b6:	4013      	ands	r3, r2
   312b8:	b2da      	uxtb	r2, r3
   312ba:	2310      	movs	r3, #16
   312bc:	18fb      	adds	r3, r7, r3
   312be:	2101      	movs	r1, #1
   312c0:	400a      	ands	r2, r1
   312c2:	0010      	movs	r0, r2
   312c4:	781a      	ldrb	r2, [r3, #0]
   312c6:	2101      	movs	r1, #1
   312c8:	438a      	bics	r2, r1
   312ca:	1c11      	adds	r1, r2, #0
   312cc:	1c02      	adds	r2, r0, #0
   312ce:	430a      	orrs	r2, r1
   312d0:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   312d2:	2310      	movs	r3, #16
   312d4:	18fb      	adds	r3, r7, r3
   312d6:	781a      	ldrb	r2, [r3, #0]
   312d8:	2314      	movs	r3, #20
   312da:	18fb      	adds	r3, r7, r3
   312dc:	0011      	movs	r1, r2
   312de:	0018      	movs	r0, r3
   312e0:	4b1d      	ldr	r3, [pc, #116]	; (31358 <MQTTSerialize_publish+0x158>)
   312e2:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   312e4:	697b      	ldr	r3, [r7, #20]
   312e6:	69ba      	ldr	r2, [r7, #24]
   312e8:	0011      	movs	r1, r2
   312ea:	0018      	movs	r0, r3
   312ec:	4b1b      	ldr	r3, [pc, #108]	; (3135c <MQTTSerialize_publish+0x15c>)
   312ee:	4798      	blx	r3
   312f0:	0002      	movs	r2, r0
   312f2:	697b      	ldr	r3, [r7, #20]
   312f4:	189b      	adds	r3, r3, r2
   312f6:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   312f8:	2308      	movs	r3, #8
   312fa:	2230      	movs	r2, #48	; 0x30
   312fc:	4694      	mov	ip, r2
   312fe:	44bc      	add	ip, r7
   31300:	4463      	add	r3, ip
   31302:	2214      	movs	r2, #20
   31304:	18b8      	adds	r0, r7, r2
   31306:	6819      	ldr	r1, [r3, #0]
   31308:	685a      	ldr	r2, [r3, #4]
   3130a:	689b      	ldr	r3, [r3, #8]
   3130c:	4c14      	ldr	r4, [pc, #80]	; (31360 <MQTTSerialize_publish+0x160>)
   3130e:	47a0      	blx	r4

	if (qos > 0)
   31310:	683b      	ldr	r3, [r7, #0]
   31312:	2b00      	cmp	r3, #0
   31314:	dd08      	ble.n	31328 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   31316:	2334      	movs	r3, #52	; 0x34
   31318:	18fb      	adds	r3, r7, r3
   3131a:	881a      	ldrh	r2, [r3, #0]
   3131c:	2314      	movs	r3, #20
   3131e:	18fb      	adds	r3, r7, r3
   31320:	0011      	movs	r1, r2
   31322:	0018      	movs	r0, r3
   31324:	4b0f      	ldr	r3, [pc, #60]	; (31364 <MQTTSerialize_publish+0x164>)
   31326:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   31328:	697b      	ldr	r3, [r7, #20]
   3132a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3132c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   3132e:	0018      	movs	r0, r3
   31330:	4b0d      	ldr	r3, [pc, #52]	; (31368 <MQTTSerialize_publish+0x168>)
   31332:	4798      	blx	r3
	ptr += payloadlen;
   31334:	697a      	ldr	r2, [r7, #20]
   31336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31338:	18d3      	adds	r3, r2, r3
   3133a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   3133c:	697b      	ldr	r3, [r7, #20]
   3133e:	001a      	movs	r2, r3
   31340:	68fb      	ldr	r3, [r7, #12]
   31342:	1ad3      	subs	r3, r2, r3
   31344:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31346:	69fb      	ldr	r3, [r7, #28]
}
   31348:	0018      	movs	r0, r3
   3134a:	46bd      	mov	sp, r7
   3134c:	b009      	add	sp, #36	; 0x24
   3134e:	bd90      	pop	{r4, r7, pc}
   31350:	000311b9 	.word	0x000311b9
   31354:	00030e25 	.word	0x00030e25
   31358:	00030f47 	.word	0x00030f47
   3135c:	00030d2d 	.word	0x00030d2d
   31360:	00031019 	.word	0x00031019
   31364:	00030f71 	.word	0x00030f71
   31368:	000355d9 	.word	0x000355d9

0003136c <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   3136c:	b580      	push	{r7, lr}
   3136e:	b088      	sub	sp, #32
   31370:	af00      	add	r7, sp, #0
   31372:	60f8      	str	r0, [r7, #12]
   31374:	60b9      	str	r1, [r7, #8]
   31376:	0019      	movs	r1, r3
   31378:	1dfb      	adds	r3, r7, #7
   3137a:	701a      	strb	r2, [r3, #0]
   3137c:	1dbb      	adds	r3, r7, #6
   3137e:	1c0a      	adds	r2, r1, #0
   31380:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   31382:	2300      	movs	r3, #0
   31384:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   31386:	2300      	movs	r3, #0
   31388:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   3138a:	68fb      	ldr	r3, [r7, #12]
   3138c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   3138e:	68bb      	ldr	r3, [r7, #8]
   31390:	2b03      	cmp	r3, #3
   31392:	dc03      	bgt.n	3139c <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   31394:	2302      	movs	r3, #2
   31396:	425b      	negs	r3, r3
   31398:	61fb      	str	r3, [r7, #28]
		goto exit;
   3139a:	e055      	b.n	31448 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   3139c:	1dfb      	adds	r3, r7, #7
   3139e:	781b      	ldrb	r3, [r3, #0]
   313a0:	220f      	movs	r2, #15
   313a2:	4013      	ands	r3, r2
   313a4:	b2da      	uxtb	r2, r3
   313a6:	2318      	movs	r3, #24
   313a8:	18fb      	adds	r3, r7, r3
   313aa:	0110      	lsls	r0, r2, #4
   313ac:	781a      	ldrb	r2, [r3, #0]
   313ae:	210f      	movs	r1, #15
   313b0:	400a      	ands	r2, r1
   313b2:	1c11      	adds	r1, r2, #0
   313b4:	1c02      	adds	r2, r0, #0
   313b6:	430a      	orrs	r2, r1
   313b8:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   313ba:	1dbb      	adds	r3, r7, #6
   313bc:	781b      	ldrb	r3, [r3, #0]
   313be:	2201      	movs	r2, #1
   313c0:	4013      	ands	r3, r2
   313c2:	b2da      	uxtb	r2, r3
   313c4:	2318      	movs	r3, #24
   313c6:	18fb      	adds	r3, r7, r3
   313c8:	2101      	movs	r1, #1
   313ca:	400a      	ands	r2, r1
   313cc:	00d0      	lsls	r0, r2, #3
   313ce:	781a      	ldrb	r2, [r3, #0]
   313d0:	2108      	movs	r1, #8
   313d2:	438a      	bics	r2, r1
   313d4:	1c11      	adds	r1, r2, #0
   313d6:	1c02      	adds	r2, r0, #0
   313d8:	430a      	orrs	r2, r1
   313da:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   313dc:	1dfb      	adds	r3, r7, #7
   313de:	781b      	ldrb	r3, [r3, #0]
   313e0:	3b06      	subs	r3, #6
   313e2:	425a      	negs	r2, r3
   313e4:	4153      	adcs	r3, r2
   313e6:	b2db      	uxtb	r3, r3
   313e8:	1c1a      	adds	r2, r3, #0
   313ea:	2303      	movs	r3, #3
   313ec:	4013      	ands	r3, r2
   313ee:	b2da      	uxtb	r2, r3
   313f0:	2318      	movs	r3, #24
   313f2:	18fb      	adds	r3, r7, r3
   313f4:	2103      	movs	r1, #3
   313f6:	400a      	ands	r2, r1
   313f8:	1890      	adds	r0, r2, r2
   313fa:	781a      	ldrb	r2, [r3, #0]
   313fc:	2106      	movs	r1, #6
   313fe:	438a      	bics	r2, r1
   31400:	1c11      	adds	r1, r2, #0
   31402:	1c02      	adds	r2, r0, #0
   31404:	430a      	orrs	r2, r1
   31406:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   31408:	2318      	movs	r3, #24
   3140a:	18fb      	adds	r3, r7, r3
   3140c:	781a      	ldrb	r2, [r3, #0]
   3140e:	2314      	movs	r3, #20
   31410:	18fb      	adds	r3, r7, r3
   31412:	0011      	movs	r1, r2
   31414:	0018      	movs	r0, r3
   31416:	4b0f      	ldr	r3, [pc, #60]	; (31454 <MQTTSerialize_ack+0xe8>)
   31418:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   3141a:	697b      	ldr	r3, [r7, #20]
   3141c:	2102      	movs	r1, #2
   3141e:	0018      	movs	r0, r3
   31420:	4b0d      	ldr	r3, [pc, #52]	; (31458 <MQTTSerialize_ack+0xec>)
   31422:	4798      	blx	r3
   31424:	0002      	movs	r2, r0
   31426:	697b      	ldr	r3, [r7, #20]
   31428:	189b      	adds	r3, r3, r2
   3142a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   3142c:	2328      	movs	r3, #40	; 0x28
   3142e:	18fb      	adds	r3, r7, r3
   31430:	881a      	ldrh	r2, [r3, #0]
   31432:	2314      	movs	r3, #20
   31434:	18fb      	adds	r3, r7, r3
   31436:	0011      	movs	r1, r2
   31438:	0018      	movs	r0, r3
   3143a:	4b08      	ldr	r3, [pc, #32]	; (3145c <MQTTSerialize_ack+0xf0>)
   3143c:	4798      	blx	r3
	rc = ptr - buf;
   3143e:	697b      	ldr	r3, [r7, #20]
   31440:	001a      	movs	r2, r3
   31442:	68fb      	ldr	r3, [r7, #12]
   31444:	1ad3      	subs	r3, r2, r3
   31446:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31448:	69fb      	ldr	r3, [r7, #28]
}
   3144a:	0018      	movs	r0, r3
   3144c:	46bd      	mov	sp, r7
   3144e:	b008      	add	sp, #32
   31450:	bd80      	pop	{r7, pc}
   31452:	46c0      	nop			; (mov r8, r8)
   31454:	00030f47 	.word	0x00030f47
   31458:	00030d2d 	.word	0x00030d2d
   3145c:	00030f71 	.word	0x00030f71

00031460 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   31460:	b580      	push	{r7, lr}
   31462:	b084      	sub	sp, #16
   31464:	af00      	add	r7, sp, #0
   31466:	6078      	str	r0, [r7, #4]
   31468:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   3146a:	2302      	movs	r3, #2
   3146c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   3146e:	2300      	movs	r3, #0
   31470:	60fb      	str	r3, [r7, #12]
   31472:	e014      	b.n	3149e <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   31474:	68fa      	ldr	r2, [r7, #12]
   31476:	0013      	movs	r3, r2
   31478:	005b      	lsls	r3, r3, #1
   3147a:	189b      	adds	r3, r3, r2
   3147c:	009b      	lsls	r3, r3, #2
   3147e:	001a      	movs	r2, r3
   31480:	683b      	ldr	r3, [r7, #0]
   31482:	189b      	adds	r3, r3, r2
   31484:	6818      	ldr	r0, [r3, #0]
   31486:	6859      	ldr	r1, [r3, #4]
   31488:	689a      	ldr	r2, [r3, #8]
   3148a:	4b09      	ldr	r3, [pc, #36]	; (314b0 <MQTTSerialize_subscribeLength+0x50>)
   3148c:	4798      	blx	r3
   3148e:	0003      	movs	r3, r0
   31490:	3303      	adds	r3, #3
   31492:	68ba      	ldr	r2, [r7, #8]
   31494:	18d3      	adds	r3, r2, r3
   31496:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   31498:	68fb      	ldr	r3, [r7, #12]
   3149a:	3301      	adds	r3, #1
   3149c:	60fb      	str	r3, [r7, #12]
   3149e:	68fa      	ldr	r2, [r7, #12]
   314a0:	687b      	ldr	r3, [r7, #4]
   314a2:	429a      	cmp	r2, r3
   314a4:	dbe6      	blt.n	31474 <MQTTSerialize_subscribeLength+0x14>
	return len;
   314a6:	68bb      	ldr	r3, [r7, #8]
}
   314a8:	0018      	movs	r0, r3
   314aa:	46bd      	mov	sp, r7
   314ac:	b004      	add	sp, #16
   314ae:	bd80      	pop	{r7, pc}
   314b0:	00031101 	.word	0x00031101

000314b4 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   314b4:	b590      	push	{r4, r7, lr}
   314b6:	b08b      	sub	sp, #44	; 0x2c
   314b8:	af00      	add	r7, sp, #0
   314ba:	60f8      	str	r0, [r7, #12]
   314bc:	60b9      	str	r1, [r7, #8]
   314be:	0019      	movs	r1, r3
   314c0:	1dfb      	adds	r3, r7, #7
   314c2:	701a      	strb	r2, [r3, #0]
   314c4:	1d3b      	adds	r3, r7, #4
   314c6:	1c0a      	adds	r2, r1, #0
   314c8:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   314ca:	68fb      	ldr	r3, [r7, #12]
   314cc:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   314ce:	2300      	movs	r3, #0
   314d0:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   314d2:	2300      	movs	r3, #0
   314d4:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   314d6:	2300      	movs	r3, #0
   314d8:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   314da:	2300      	movs	r3, #0
   314dc:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   314de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   314e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   314e2:	0011      	movs	r1, r2
   314e4:	0018      	movs	r0, r3
   314e6:	4b41      	ldr	r3, [pc, #260]	; (315ec <MQTTSerialize_subscribe+0x138>)
   314e8:	4798      	blx	r3
   314ea:	0003      	movs	r3, r0
   314ec:	61fb      	str	r3, [r7, #28]
   314ee:	69fb      	ldr	r3, [r7, #28]
   314f0:	0018      	movs	r0, r3
   314f2:	4b3f      	ldr	r3, [pc, #252]	; (315f0 <MQTTSerialize_subscribe+0x13c>)
   314f4:	4798      	blx	r3
   314f6:	0002      	movs	r2, r0
   314f8:	68bb      	ldr	r3, [r7, #8]
   314fa:	429a      	cmp	r2, r3
   314fc:	dd03      	ble.n	31506 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   314fe:	2302      	movs	r3, #2
   31500:	425b      	negs	r3, r3
   31502:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   31504:	e06c      	b.n	315e0 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   31506:	2314      	movs	r3, #20
   31508:	18fb      	adds	r3, r7, r3
   3150a:	2200      	movs	r2, #0
   3150c:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   3150e:	2314      	movs	r3, #20
   31510:	18fb      	adds	r3, r7, r3
   31512:	781a      	ldrb	r2, [r3, #0]
   31514:	210f      	movs	r1, #15
   31516:	400a      	ands	r2, r1
   31518:	1c11      	adds	r1, r2, #0
   3151a:	2280      	movs	r2, #128	; 0x80
   3151c:	4252      	negs	r2, r2
   3151e:	430a      	orrs	r2, r1
   31520:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   31522:	1dfb      	adds	r3, r7, #7
   31524:	781b      	ldrb	r3, [r3, #0]
   31526:	2201      	movs	r2, #1
   31528:	4013      	ands	r3, r2
   3152a:	b2da      	uxtb	r2, r3
   3152c:	2314      	movs	r3, #20
   3152e:	18fb      	adds	r3, r7, r3
   31530:	2101      	movs	r1, #1
   31532:	400a      	ands	r2, r1
   31534:	00d0      	lsls	r0, r2, #3
   31536:	781a      	ldrb	r2, [r3, #0]
   31538:	2108      	movs	r1, #8
   3153a:	438a      	bics	r2, r1
   3153c:	1c11      	adds	r1, r2, #0
   3153e:	1c02      	adds	r2, r0, #0
   31540:	430a      	orrs	r2, r1
   31542:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   31544:	2314      	movs	r3, #20
   31546:	18fb      	adds	r3, r7, r3
   31548:	781a      	ldrb	r2, [r3, #0]
   3154a:	2106      	movs	r1, #6
   3154c:	438a      	bics	r2, r1
   3154e:	1c11      	adds	r1, r2, #0
   31550:	2202      	movs	r2, #2
   31552:	430a      	orrs	r2, r1
   31554:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   31556:	2314      	movs	r3, #20
   31558:	18fb      	adds	r3, r7, r3
   3155a:	781a      	ldrb	r2, [r3, #0]
   3155c:	2318      	movs	r3, #24
   3155e:	18fb      	adds	r3, r7, r3
   31560:	0011      	movs	r1, r2
   31562:	0018      	movs	r0, r3
   31564:	4b23      	ldr	r3, [pc, #140]	; (315f4 <MQTTSerialize_subscribe+0x140>)
   31566:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   31568:	69bb      	ldr	r3, [r7, #24]
   3156a:	69fa      	ldr	r2, [r7, #28]
   3156c:	0011      	movs	r1, r2
   3156e:	0018      	movs	r0, r3
   31570:	4b21      	ldr	r3, [pc, #132]	; (315f8 <MQTTSerialize_subscribe+0x144>)
   31572:	4798      	blx	r3
   31574:	0002      	movs	r2, r0
   31576:	69bb      	ldr	r3, [r7, #24]
   31578:	189b      	adds	r3, r3, r2
   3157a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   3157c:	1d3b      	adds	r3, r7, #4
   3157e:	881a      	ldrh	r2, [r3, #0]
   31580:	2318      	movs	r3, #24
   31582:	18fb      	adds	r3, r7, r3
   31584:	0011      	movs	r1, r2
   31586:	0018      	movs	r0, r3
   31588:	4b1c      	ldr	r3, [pc, #112]	; (315fc <MQTTSerialize_subscribe+0x148>)
   3158a:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   3158c:	2300      	movs	r3, #0
   3158e:	623b      	str	r3, [r7, #32]
   31590:	e01d      	b.n	315ce <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   31592:	6a3a      	ldr	r2, [r7, #32]
   31594:	0013      	movs	r3, r2
   31596:	005b      	lsls	r3, r3, #1
   31598:	189b      	adds	r3, r3, r2
   3159a:	009b      	lsls	r3, r3, #2
   3159c:	001a      	movs	r2, r3
   3159e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   315a0:	189b      	adds	r3, r3, r2
   315a2:	2218      	movs	r2, #24
   315a4:	18b8      	adds	r0, r7, r2
   315a6:	6819      	ldr	r1, [r3, #0]
   315a8:	685a      	ldr	r2, [r3, #4]
   315aa:	689b      	ldr	r3, [r3, #8]
   315ac:	4c14      	ldr	r4, [pc, #80]	; (31600 <MQTTSerialize_subscribe+0x14c>)
   315ae:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   315b0:	6a3b      	ldr	r3, [r7, #32]
   315b2:	009b      	lsls	r3, r3, #2
   315b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   315b6:	18d3      	adds	r3, r2, r3
   315b8:	681b      	ldr	r3, [r3, #0]
   315ba:	b2da      	uxtb	r2, r3
   315bc:	2318      	movs	r3, #24
   315be:	18fb      	adds	r3, r7, r3
   315c0:	0011      	movs	r1, r2
   315c2:	0018      	movs	r0, r3
   315c4:	4b0b      	ldr	r3, [pc, #44]	; (315f4 <MQTTSerialize_subscribe+0x140>)
   315c6:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   315c8:	6a3b      	ldr	r3, [r7, #32]
   315ca:	3301      	adds	r3, #1
   315cc:	623b      	str	r3, [r7, #32]
   315ce:	6a3a      	ldr	r2, [r7, #32]
   315d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   315d2:	429a      	cmp	r2, r3
   315d4:	dbdd      	blt.n	31592 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   315d6:	69bb      	ldr	r3, [r7, #24]
   315d8:	001a      	movs	r2, r3
   315da:	68fb      	ldr	r3, [r7, #12]
   315dc:	1ad3      	subs	r3, r2, r3
   315de:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   315e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   315e2:	0018      	movs	r0, r3
   315e4:	46bd      	mov	sp, r7
   315e6:	b00b      	add	sp, #44	; 0x2c
   315e8:	bd90      	pop	{r4, r7, pc}
   315ea:	46c0      	nop			; (mov r8, r8)
   315ec:	00031461 	.word	0x00031461
   315f0:	00030e25 	.word	0x00030e25
   315f4:	00030f47 	.word	0x00030f47
   315f8:	00030d2d 	.word	0x00030d2d
   315fc:	00030f71 	.word	0x00030f71
   31600:	00031019 	.word	0x00031019

00031604 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   31604:	b590      	push	{r4, r7, lr}
   31606:	b08b      	sub	sp, #44	; 0x2c
   31608:	af00      	add	r7, sp, #0
   3160a:	60f8      	str	r0, [r7, #12]
   3160c:	60b9      	str	r1, [r7, #8]
   3160e:	607a      	str	r2, [r7, #4]
   31610:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   31612:	2300      	movs	r3, #0
   31614:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   31616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   31618:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   3161a:	2300      	movs	r3, #0
   3161c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   3161e:	2300      	movs	r3, #0
   31620:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   31622:	2318      	movs	r3, #24
   31624:	18fb      	adds	r3, r7, r3
   31626:	0018      	movs	r0, r3
   31628:	4b2c      	ldr	r3, [pc, #176]	; (316dc <MQTTDeserialize_suback+0xd8>)
   3162a:	4798      	blx	r3
   3162c:	0003      	movs	r3, r0
   3162e:	001a      	movs	r2, r3
   31630:	231c      	movs	r3, #28
   31632:	18fb      	adds	r3, r7, r3
   31634:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   31636:	231c      	movs	r3, #28
   31638:	18fb      	adds	r3, r7, r3
   3163a:	781b      	ldrb	r3, [r3, #0]
   3163c:	220f      	movs	r2, #15
   3163e:	4393      	bics	r3, r2
   31640:	b2db      	uxtb	r3, r3
   31642:	2b90      	cmp	r3, #144	; 0x90
   31644:	d142      	bne.n	316cc <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   31646:	69bb      	ldr	r3, [r7, #24]
   31648:	2214      	movs	r2, #20
   3164a:	18ba      	adds	r2, r7, r2
   3164c:	0011      	movs	r1, r2
   3164e:	0018      	movs	r0, r3
   31650:	4b23      	ldr	r3, [pc, #140]	; (316e0 <MQTTDeserialize_suback+0xdc>)
   31652:	4798      	blx	r3
   31654:	0003      	movs	r3, r0
   31656:	627b      	str	r3, [r7, #36]	; 0x24
   31658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3165a:	69bb      	ldr	r3, [r7, #24]
   3165c:	189b      	adds	r3, r3, r2
   3165e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   31660:	69bb      	ldr	r3, [r7, #24]
   31662:	697a      	ldr	r2, [r7, #20]
   31664:	189b      	adds	r3, r3, r2
   31666:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   31668:	6a3b      	ldr	r3, [r7, #32]
   3166a:	69ba      	ldr	r2, [r7, #24]
   3166c:	1a9b      	subs	r3, r3, r2
   3166e:	2b01      	cmp	r3, #1
   31670:	dd2e      	ble.n	316d0 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   31672:	2318      	movs	r3, #24
   31674:	18fb      	adds	r3, r7, r3
   31676:	0018      	movs	r0, r3
   31678:	4b1a      	ldr	r3, [pc, #104]	; (316e4 <MQTTDeserialize_suback+0xe0>)
   3167a:	4798      	blx	r3
   3167c:	0003      	movs	r3, r0
   3167e:	b29a      	uxth	r2, r3
   31680:	68fb      	ldr	r3, [r7, #12]
   31682:	801a      	strh	r2, [r3, #0]

	*count = 0;
   31684:	687b      	ldr	r3, [r7, #4]
   31686:	2200      	movs	r2, #0
   31688:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   3168a:	e018      	b.n	316be <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   3168c:	687b      	ldr	r3, [r7, #4]
   3168e:	681a      	ldr	r2, [r3, #0]
   31690:	68bb      	ldr	r3, [r7, #8]
   31692:	429a      	cmp	r2, r3
   31694:	dd03      	ble.n	3169e <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   31696:	2301      	movs	r3, #1
   31698:	425b      	negs	r3, r3
   3169a:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   3169c:	e019      	b.n	316d2 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   3169e:	687b      	ldr	r3, [r7, #4]
   316a0:	681a      	ldr	r2, [r3, #0]
   316a2:	1c51      	adds	r1, r2, #1
   316a4:	687b      	ldr	r3, [r7, #4]
   316a6:	6019      	str	r1, [r3, #0]
   316a8:	0013      	movs	r3, r2
   316aa:	009b      	lsls	r3, r3, #2
   316ac:	683a      	ldr	r2, [r7, #0]
   316ae:	18d4      	adds	r4, r2, r3
   316b0:	2318      	movs	r3, #24
   316b2:	18fb      	adds	r3, r7, r3
   316b4:	0018      	movs	r0, r3
   316b6:	4b09      	ldr	r3, [pc, #36]	; (316dc <MQTTDeserialize_suback+0xd8>)
   316b8:	4798      	blx	r3
   316ba:	0003      	movs	r3, r0
   316bc:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   316be:	69ba      	ldr	r2, [r7, #24]
   316c0:	6a3b      	ldr	r3, [r7, #32]
   316c2:	429a      	cmp	r2, r3
   316c4:	d3e2      	bcc.n	3168c <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   316c6:	2301      	movs	r3, #1
   316c8:	627b      	str	r3, [r7, #36]	; 0x24
   316ca:	e002      	b.n	316d2 <MQTTDeserialize_suback+0xce>
		goto exit;
   316cc:	46c0      	nop			; (mov r8, r8)
   316ce:	e000      	b.n	316d2 <MQTTDeserialize_suback+0xce>
		goto exit;
   316d0:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   316d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   316d4:	0018      	movs	r0, r3
   316d6:	46bd      	mov	sp, r7
   316d8:	b00b      	add	sp, #44	; 0x2c
   316da:	bd90      	pop	{r4, r7, pc}
   316dc:	00030f1b 	.word	0x00030f1b
   316e0:	00030eb5 	.word	0x00030eb5
   316e4:	00030ee9 	.word	0x00030ee9

000316e8 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   316e8:	b580      	push	{r7, lr}
   316ea:	b082      	sub	sp, #8
   316ec:	af00      	add	r7, sp, #0
   316ee:	6078      	str	r0, [r7, #4]
	config->port = 80;
   316f0:	687b      	ldr	r3, [r7, #4]
   316f2:	2250      	movs	r2, #80	; 0x50
   316f4:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   316f6:	687b      	ldr	r3, [r7, #4]
   316f8:	2200      	movs	r2, #0
   316fa:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   316fc:	687b      	ldr	r3, [r7, #4]
   316fe:	4a0b      	ldr	r2, [pc, #44]	; (3172c <http_client_get_config_defaults+0x44>)
   31700:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   31702:	687b      	ldr	r3, [r7, #4]
   31704:	2200      	movs	r2, #0
   31706:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   31708:	687b      	ldr	r3, [r7, #4]
   3170a:	2200      	movs	r2, #0
   3170c:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   3170e:	687b      	ldr	r3, [r7, #4]
   31710:	2280      	movs	r2, #128	; 0x80
   31712:	0052      	lsls	r2, r2, #1
   31714:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   31716:	687b      	ldr	r3, [r7, #4]
   31718:	2252      	movs	r2, #82	; 0x52
   3171a:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   3171c:	687b      	ldr	r3, [r7, #4]
   3171e:	4a04      	ldr	r2, [pc, #16]	; (31730 <http_client_get_config_defaults+0x48>)
   31720:	619a      	str	r2, [r3, #24]
}
   31722:	46c0      	nop			; (mov r8, r8)
   31724:	46bd      	mov	sp, r7
   31726:	b002      	add	sp, #8
   31728:	bd80      	pop	{r7, pc}
   3172a:	46c0      	nop			; (mov r8, r8)
   3172c:	00004e20 	.word	0x00004e20
   31730:	0003abf0 	.word	0x0003abf0

00031734 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   31734:	b590      	push	{r4, r7, lr}
   31736:	b083      	sub	sp, #12
   31738:	af00      	add	r7, sp, #0
   3173a:	6078      	str	r0, [r7, #4]
   3173c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   3173e:	687b      	ldr	r3, [r7, #4]
   31740:	2b00      	cmp	r3, #0
   31742:	d002      	beq.n	3174a <http_client_init+0x16>
   31744:	683b      	ldr	r3, [r7, #0]
   31746:	2b00      	cmp	r3, #0
   31748:	d102      	bne.n	31750 <http_client_init+0x1c>
		return -EINVAL;
   3174a:	2316      	movs	r3, #22
   3174c:	425b      	negs	r3, r3
   3174e:	e058      	b.n	31802 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   31750:	683b      	ldr	r3, [r7, #0]
   31752:	691b      	ldr	r3, [r3, #16]
   31754:	2b00      	cmp	r3, #0
   31756:	d102      	bne.n	3175e <http_client_init+0x2a>
		return -EINVAL;
   31758:	2316      	movs	r3, #22
   3175a:	425b      	negs	r3, r3
   3175c:	e051      	b.n	31802 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   3175e:	683b      	ldr	r3, [r7, #0]
   31760:	685b      	ldr	r3, [r3, #4]
   31762:	2b00      	cmp	r3, #0
   31764:	d102      	bne.n	3176c <http_client_init+0x38>
		return -EINVAL;
   31766:	2316      	movs	r3, #22
   31768:	425b      	negs	r3, r3
   3176a:	e04a      	b.n	31802 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   3176c:	683b      	ldr	r3, [r7, #0]
   3176e:	695b      	ldr	r3, [r3, #20]
   31770:	2b51      	cmp	r3, #81	; 0x51
   31772:	d802      	bhi.n	3177a <http_client_init+0x46>
		return -EINVAL;
   31774:	2316      	movs	r3, #22
   31776:	425b      	negs	r3, r3
   31778:	e043      	b.n	31802 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   3177a:	687b      	ldr	r3, [r7, #4]
   3177c:	22e8      	movs	r2, #232	; 0xe8
   3177e:	2100      	movs	r1, #0
   31780:	0018      	movs	r0, r3
   31782:	4b22      	ldr	r3, [pc, #136]	; (3180c <http_client_init+0xd8>)
   31784:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   31786:	687b      	ldr	r3, [r7, #4]
   31788:	3350      	adds	r3, #80	; 0x50
   3178a:	6839      	ldr	r1, [r7, #0]
   3178c:	221c      	movs	r2, #28
   3178e:	0018      	movs	r0, r3
   31790:	4b1f      	ldr	r3, [pc, #124]	; (31810 <http_client_init+0xdc>)
   31792:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   31794:	687b      	ldr	r3, [r7, #4]
   31796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31798:	2b00      	cmp	r3, #0
   3179a:	d115      	bne.n	317c8 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   3179c:	683b      	ldr	r3, [r7, #0]
   3179e:	691b      	ldr	r3, [r3, #16]
   317a0:	0018      	movs	r0, r3
   317a2:	4b1c      	ldr	r3, [pc, #112]	; (31814 <http_client_init+0xe0>)
   317a4:	4798      	blx	r3
   317a6:	0003      	movs	r3, r0
   317a8:	001a      	movs	r2, r3
   317aa:	687b      	ldr	r3, [r7, #4]
   317ac:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   317ae:	687b      	ldr	r3, [r7, #4]
   317b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   317b2:	2b00      	cmp	r3, #0
   317b4:	d102      	bne.n	317bc <http_client_init+0x88>
			return -ENOMEM;
   317b6:	230c      	movs	r3, #12
   317b8:	425b      	negs	r3, r3
   317ba:	e022      	b.n	31802 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   317bc:	687b      	ldr	r3, [r7, #4]
   317be:	2241      	movs	r2, #65	; 0x41
   317c0:	5c99      	ldrb	r1, [r3, r2]
   317c2:	2004      	movs	r0, #4
   317c4:	4301      	orrs	r1, r0
   317c6:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   317c8:	683b      	ldr	r3, [r7, #0]
   317ca:	891b      	ldrh	r3, [r3, #8]
   317cc:	2b00      	cmp	r3, #0
   317ce:	d010      	beq.n	317f2 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   317d0:	683b      	ldr	r3, [r7, #0]
   317d2:	6858      	ldr	r0, [r3, #4]
   317d4:	687a      	ldr	r2, [r7, #4]
   317d6:	4910      	ldr	r1, [pc, #64]	; (31818 <http_client_init+0xe4>)
   317d8:	2300      	movs	r3, #0
   317da:	4c10      	ldr	r4, [pc, #64]	; (3181c <http_client_init+0xe8>)
   317dc:	47a0      	blx	r4
   317de:	0002      	movs	r2, r0
   317e0:	687b      	ldr	r3, [r7, #4]
   317e2:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   317e4:	687b      	ldr	r3, [r7, #4]
   317e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   317e8:	2b00      	cmp	r3, #0
   317ea:	da02      	bge.n	317f2 <http_client_init+0xbe>
			return -ENOSPC;
   317ec:	231c      	movs	r3, #28
   317ee:	425b      	negs	r3, r3
   317f0:	e007      	b.n	31802 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   317f2:	687b      	ldr	r3, [r7, #4]
   317f4:	2200      	movs	r2, #0
   317f6:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   317f8:	687b      	ldr	r3, [r7, #4]
   317fa:	22d8      	movs	r2, #216	; 0xd8
   317fc:	2100      	movs	r1, #0
   317fe:	5099      	str	r1, [r3, r2]

	return 0;
   31800:	2300      	movs	r3, #0
}
   31802:	0018      	movs	r0, r3
   31804:	46bd      	mov	sp, r7
   31806:	b003      	add	sp, #12
   31808:	bd90      	pop	{r4, r7, pc}
   3180a:	46c0      	nop			; (mov r8, r8)
   3180c:	0003560f 	.word	0x0003560f
   31810:	000355d9 	.word	0x000355d9
   31814:	000355b1 	.word	0x000355b1
   31818:	00031ae5 	.word	0x00031ae5
   3181c:	00033189 	.word	0x00033189

00031820 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   31820:	b580      	push	{r7, lr}
   31822:	b082      	sub	sp, #8
   31824:	af00      	add	r7, sp, #0
   31826:	6078      	str	r0, [r7, #4]
   31828:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   3182a:	687b      	ldr	r3, [r7, #4]
   3182c:	2b00      	cmp	r3, #0
   3182e:	d102      	bne.n	31836 <http_client_register_callback+0x16>
		return -EINVAL;
   31830:	2316      	movs	r3, #22
   31832:	425b      	negs	r3, r3
   31834:	e003      	b.n	3183e <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   31836:	687b      	ldr	r3, [r7, #4]
   31838:	683a      	ldr	r2, [r7, #0]
   3183a:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   3183c:	2300      	movs	r3, #0
}
   3183e:	0018      	movs	r0, r3
   31840:	46bd      	mov	sp, r7
   31842:	b002      	add	sp, #8
   31844:	bd80      	pop	{r7, pc}
	...

00031848 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   31848:	b580      	push	{r7, lr}
   3184a:	b082      	sub	sp, #8
   3184c:	af00      	add	r7, sp, #0
   3184e:	6078      	str	r0, [r7, #4]
	switch (err) {
   31850:	687b      	ldr	r3, [r7, #4]
   31852:	330e      	adds	r3, #14
   31854:	2b0e      	cmp	r3, #14
   31856:	d825      	bhi.n	318a4 <_hwerr_to_stderr+0x5c>
   31858:	009a      	lsls	r2, r3, #2
   3185a:	4b18      	ldr	r3, [pc, #96]	; (318bc <_hwerr_to_stderr+0x74>)
   3185c:	18d3      	adds	r3, r2, r3
   3185e:	681b      	ldr	r3, [r3, #0]
   31860:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   31862:	2305      	movs	r3, #5
   31864:	425b      	negs	r3, r3
   31866:	e024      	b.n	318b2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   31868:	2302      	movs	r3, #2
   3186a:	425b      	negs	r3, r3
   3186c:	e021      	b.n	318b2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   3186e:	2370      	movs	r3, #112	; 0x70
   31870:	425b      	negs	r3, r3
   31872:	e01e      	b.n	318b2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   31874:	230c      	movs	r3, #12
   31876:	425b      	negs	r3, r3
   31878:	e01b      	b.n	318b2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   3187a:	2316      	movs	r3, #22
   3187c:	425b      	negs	r3, r3
   3187e:	e018      	b.n	318b2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   31880:	230c      	movs	r3, #12
   31882:	425b      	negs	r3, r3
   31884:	e015      	b.n	318b2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   31886:	2305      	movs	r3, #5
   31888:	425b      	negs	r3, r3
   3188a:	e012      	b.n	318b2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   3188c:	2379      	movs	r3, #121	; 0x79
   3188e:	425b      	negs	r3, r3
   31890:	e00f      	b.n	318b2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   31892:	2368      	movs	r3, #104	; 0x68
   31894:	425b      	negs	r3, r3
   31896:	e00c      	b.n	318b2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   31898:	230b      	movs	r3, #11
   3189a:	425b      	negs	r3, r3
   3189c:	e009      	b.n	318b2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   3189e:	2310      	movs	r3, #16
   318a0:	425b      	negs	r3, r3
   318a2:	e006      	b.n	318b2 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   318a4:	687b      	ldr	r3, [r7, #4]
   318a6:	2b00      	cmp	r3, #0
   318a8:	da02      	bge.n	318b0 <_hwerr_to_stderr+0x68>
				return -EIO;
   318aa:	2305      	movs	r3, #5
   318ac:	425b      	negs	r3, r3
   318ae:	e000      	b.n	318b2 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   318b0:	2300      	movs	r3, #0
	}
}
   318b2:	0018      	movs	r0, r3
   318b4:	46bd      	mov	sp, r7
   318b6:	b002      	add	sp, #8
   318b8:	bd80      	pop	{r7, pc}
   318ba:	46c0      	nop			; (mov r8, r8)
   318bc:	0003ad2c 	.word	0x0003ad2c

000318c0 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   318c0:	b580      	push	{r7, lr}
   318c2:	b08a      	sub	sp, #40	; 0x28
   318c4:	af00      	add	r7, sp, #0
   318c6:	603a      	str	r2, [r7, #0]
   318c8:	1dfb      	adds	r3, r7, #7
   318ca:	1c02      	adds	r2, r0, #0
   318cc:	701a      	strb	r2, [r3, #0]
   318ce:	1dbb      	adds	r3, r7, #6
   318d0:	1c0a      	adds	r2, r1, #0
   318d2:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   318d4:	1dfb      	adds	r3, r7, #7
   318d6:	2200      	movs	r2, #0
   318d8:	569a      	ldrsb	r2, [r3, r2]
   318da:	4b4b      	ldr	r3, [pc, #300]	; (31a08 <http_client_socket_event_handler+0x148>)
   318dc:	0092      	lsls	r2, r2, #2
   318de:	58d3      	ldr	r3, [r2, r3]
   318e0:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   318e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   318e4:	2b00      	cmp	r3, #0
   318e6:	d100      	bne.n	318ea <http_client_socket_event_handler+0x2a>
   318e8:	e08a      	b.n	31a00 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   318ea:	1dbb      	adds	r3, r7, #6
   318ec:	781b      	ldrb	r3, [r3, #0]
   318ee:	2b06      	cmp	r3, #6
   318f0:	d040      	beq.n	31974 <http_client_socket_event_handler+0xb4>
   318f2:	2b07      	cmp	r3, #7
   318f4:	d060      	beq.n	319b8 <http_client_socket_event_handler+0xf8>
   318f6:	2b05      	cmp	r3, #5
   318f8:	d000      	beq.n	318fc <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   318fa:	e082      	b.n	31a02 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   318fc:	683b      	ldr	r3, [r7, #0]
   318fe:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   31900:	6a3b      	ldr	r3, [r7, #32]
   31902:	785b      	ldrb	r3, [r3, #1]
   31904:	b25b      	sxtb	r3, r3
   31906:	001a      	movs	r2, r3
   31908:	230c      	movs	r3, #12
   3190a:	18fb      	adds	r3, r7, r3
   3190c:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   3190e:	6a3b      	ldr	r3, [r7, #32]
   31910:	785b      	ldrb	r3, [r3, #1]
   31912:	b25b      	sxtb	r3, r3
   31914:	2b00      	cmp	r3, #0
   31916:	da0c      	bge.n	31932 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   31918:	6a3b      	ldr	r3, [r7, #32]
   3191a:	785b      	ldrb	r3, [r3, #1]
   3191c:	b25b      	sxtb	r3, r3
   3191e:	0018      	movs	r0, r3
   31920:	4b3a      	ldr	r3, [pc, #232]	; (31a0c <http_client_socket_event_handler+0x14c>)
   31922:	4798      	blx	r3
   31924:	0002      	movs	r2, r0
   31926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31928:	0011      	movs	r1, r2
   3192a:	0018      	movs	r0, r3
   3192c:	4b38      	ldr	r3, [pc, #224]	; (31a10 <http_client_socket_event_handler+0x150>)
   3192e:	4798      	blx	r3
    	break;
   31930:	e067      	b.n	31a02 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   31932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31936:	2b00      	cmp	r3, #0
   31938:	d006      	beq.n	31948 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   3193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3193e:	220c      	movs	r2, #12
   31940:	18ba      	adds	r2, r7, r2
   31942:	6a78      	ldr	r0, [r7, #36]	; 0x24
   31944:	2100      	movs	r1, #0
   31946:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   31948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3194a:	2203      	movs	r2, #3
   3194c:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   3194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31950:	6d58      	ldr	r0, [r3, #84]	; 0x54
   31952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31954:	6c99      	ldr	r1, [r3, #72]	; 0x48
   31956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31958:	2258      	movs	r2, #88	; 0x58
   3195a:	5a9b      	ldrh	r3, [r3, r2]
   3195c:	001a      	movs	r2, r3
   3195e:	4b2d      	ldr	r3, [pc, #180]	; (31a14 <http_client_socket_event_handler+0x154>)
   31960:	4798      	blx	r3
    		_http_client_recv_packet(module);
   31962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31964:	0018      	movs	r0, r3
   31966:	4b2c      	ldr	r3, [pc, #176]	; (31a18 <http_client_socket_event_handler+0x158>)
   31968:	4798      	blx	r3
			_http_client_request(module);
   3196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3196c:	0018      	movs	r0, r3
   3196e:	4b2b      	ldr	r3, [pc, #172]	; (31a1c <http_client_socket_event_handler+0x15c>)
   31970:	4798      	blx	r3
    	break;
   31972:	e046      	b.n	31a02 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   31974:	683b      	ldr	r3, [r7, #0]
   31976:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   31978:	69fb      	ldr	r3, [r7, #28]
   3197a:	2204      	movs	r2, #4
   3197c:	5e9b      	ldrsh	r3, [r3, r2]
   3197e:	2b00      	cmp	r3, #0
   31980:	dd09      	ble.n	31996 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   31982:	69fb      	ldr	r3, [r7, #28]
   31984:	2204      	movs	r2, #4
   31986:	5e9b      	ldrsh	r3, [r3, r2]
   31988:	001a      	movs	r2, r3
   3198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3198c:	0011      	movs	r1, r2
   3198e:	0018      	movs	r0, r3
   31990:	4b23      	ldr	r3, [pc, #140]	; (31a20 <http_client_socket_event_handler+0x160>)
   31992:	4798      	blx	r3
   31994:	e00b      	b.n	319ae <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   31996:	69fb      	ldr	r3, [r7, #28]
   31998:	2204      	movs	r2, #4
   3199a:	5e9b      	ldrsh	r3, [r3, r2]
   3199c:	0018      	movs	r0, r3
   3199e:	4b1b      	ldr	r3, [pc, #108]	; (31a0c <http_client_socket_event_handler+0x14c>)
   319a0:	4798      	blx	r3
   319a2:	0002      	movs	r2, r0
   319a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319a6:	0011      	movs	r1, r2
   319a8:	0018      	movs	r0, r3
   319aa:	4b19      	ldr	r3, [pc, #100]	; (31a10 <http_client_socket_event_handler+0x150>)
   319ac:	4798      	blx	r3
		_http_client_recv_packet(module);
   319ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319b0:	0018      	movs	r0, r3
   319b2:	4b19      	ldr	r3, [pc, #100]	; (31a18 <http_client_socket_event_handler+0x158>)
   319b4:	4798      	blx	r3
		break;
   319b6:	e024      	b.n	31a02 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   319b8:	231a      	movs	r3, #26
   319ba:	18fb      	adds	r3, r7, r3
   319bc:	683a      	ldr	r2, [r7, #0]
   319be:	8812      	ldrh	r2, [r2, #0]
   319c0:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   319c2:	231a      	movs	r3, #26
   319c4:	18fb      	adds	r3, r7, r3
   319c6:	2200      	movs	r2, #0
   319c8:	5e9b      	ldrsh	r3, [r3, r2]
   319ca:	2b00      	cmp	r3, #0
   319cc:	da0d      	bge.n	319ea <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   319ce:	231a      	movs	r3, #26
   319d0:	18fb      	adds	r3, r7, r3
   319d2:	2200      	movs	r2, #0
   319d4:	5e9b      	ldrsh	r3, [r3, r2]
   319d6:	0018      	movs	r0, r3
   319d8:	4b0c      	ldr	r3, [pc, #48]	; (31a0c <http_client_socket_event_handler+0x14c>)
   319da:	4798      	blx	r3
   319dc:	0002      	movs	r2, r0
   319de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319e0:	0011      	movs	r1, r2
   319e2:	0018      	movs	r0, r3
   319e4:	4b0a      	ldr	r3, [pc, #40]	; (31a10 <http_client_socket_event_handler+0x150>)
   319e6:	4798      	blx	r3
   319e8:	e003      	b.n	319f2 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   319ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319ec:	0018      	movs	r0, r3
   319ee:	4b0b      	ldr	r3, [pc, #44]	; (31a1c <http_client_socket_event_handler+0x15c>)
   319f0:	4798      	blx	r3
		module->sending = 0;
   319f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319f4:	2241      	movs	r2, #65	; 0x41
   319f6:	5c99      	ldrb	r1, [r3, r2]
   319f8:	2001      	movs	r0, #1
   319fa:	4381      	bics	r1, r0
   319fc:	5499      	strb	r1, [r3, r2]
    	break;
   319fe:	e000      	b.n	31a02 <http_client_socket_event_handler+0x142>
		return;
   31a00:	46c0      	nop			; (mov r8, r8)
	}

}
   31a02:	46bd      	mov	sp, r7
   31a04:	b00a      	add	sp, #40	; 0x28
   31a06:	bd80      	pop	{r7, pc}
   31a08:	200046f4 	.word	0x200046f4
   31a0c:	00031849 	.word	0x00031849
   31a10:	00031ebd 	.word	0x00031ebd
   31a14:	00033219 	.word	0x00033219
   31a18:	00032749 	.word	0x00032749
   31a1c:	00032011 	.word	0x00032011
   31a20:	000327ad 	.word	0x000327ad

00031a24 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   31a24:	b580      	push	{r7, lr}
   31a26:	b088      	sub	sp, #32
   31a28:	af00      	add	r7, sp, #0
   31a2a:	6078      	str	r0, [r7, #4]
   31a2c:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31a2e:	2300      	movs	r3, #0
   31a30:	61fb      	str	r3, [r7, #28]
   31a32:	e048      	b.n	31ac6 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   31a34:	4b27      	ldr	r3, [pc, #156]	; (31ad4 <http_client_socket_resolve_handler+0xb0>)
   31a36:	69fa      	ldr	r2, [r7, #28]
   31a38:	0092      	lsls	r2, r2, #2
   31a3a:	58d3      	ldr	r3, [r2, r3]
   31a3c:	2b00      	cmp	r3, #0
   31a3e:	d03f      	beq.n	31ac0 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   31a40:	4b24      	ldr	r3, [pc, #144]	; (31ad4 <http_client_socket_resolve_handler+0xb0>)
   31a42:	69fa      	ldr	r2, [r7, #28]
   31a44:	0092      	lsls	r2, r2, #2
   31a46:	58d3      	ldr	r3, [r2, r3]
   31a48:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   31a4a:	69bb      	ldr	r3, [r7, #24]
   31a4c:	1c5a      	adds	r2, r3, #1
   31a4e:	687b      	ldr	r3, [r7, #4]
   31a50:	0011      	movs	r1, r2
   31a52:	0018      	movs	r0, r3
   31a54:	4b20      	ldr	r3, [pc, #128]	; (31ad8 <http_client_socket_resolve_handler+0xb4>)
   31a56:	4798      	blx	r3
   31a58:	1e03      	subs	r3, r0, #0
   31a5a:	d131      	bne.n	31ac0 <http_client_socket_resolve_handler+0x9c>
   31a5c:	69bb      	ldr	r3, [r7, #24]
   31a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31a60:	2b01      	cmp	r3, #1
   31a62:	d12d      	bne.n	31ac0 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   31a64:	683b      	ldr	r3, [r7, #0]
   31a66:	2b00      	cmp	r3, #0
   31a68:	d107      	bne.n	31a7a <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   31a6a:	2376      	movs	r3, #118	; 0x76
   31a6c:	425a      	negs	r2, r3
   31a6e:	69bb      	ldr	r3, [r7, #24]
   31a70:	0011      	movs	r1, r2
   31a72:	0018      	movs	r0, r3
   31a74:	4b19      	ldr	r3, [pc, #100]	; (31adc <http_client_socket_resolve_handler+0xb8>)
   31a76:	4798      	blx	r3
					return;
   31a78:	e028      	b.n	31acc <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   31a7a:	2308      	movs	r3, #8
   31a7c:	18fb      	adds	r3, r7, r3
   31a7e:	2202      	movs	r2, #2
   31a80:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31a82:	69bb      	ldr	r3, [r7, #24]
   31a84:	2250      	movs	r2, #80	; 0x50
   31a86:	5a9b      	ldrh	r3, [r3, r2]
   31a88:	021b      	lsls	r3, r3, #8
   31a8a:	b21a      	sxth	r2, r3
   31a8c:	69bb      	ldr	r3, [r7, #24]
   31a8e:	2150      	movs	r1, #80	; 0x50
   31a90:	5a5b      	ldrh	r3, [r3, r1]
   31a92:	0a1b      	lsrs	r3, r3, #8
   31a94:	b29b      	uxth	r3, r3
   31a96:	b21b      	sxth	r3, r3
   31a98:	4313      	orrs	r3, r2
   31a9a:	b21b      	sxth	r3, r3
   31a9c:	b29a      	uxth	r2, r3
   31a9e:	2308      	movs	r3, #8
   31aa0:	18fb      	adds	r3, r7, r3
   31aa2:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   31aa4:	2308      	movs	r3, #8
   31aa6:	18fb      	adds	r3, r7, r3
   31aa8:	683a      	ldr	r2, [r7, #0]
   31aaa:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31aac:	69bb      	ldr	r3, [r7, #24]
   31aae:	781b      	ldrb	r3, [r3, #0]
   31ab0:	b25b      	sxtb	r3, r3
   31ab2:	2208      	movs	r2, #8
   31ab4:	18b9      	adds	r1, r7, r2
   31ab6:	2210      	movs	r2, #16
   31ab8:	0018      	movs	r0, r3
   31aba:	4b09      	ldr	r3, [pc, #36]	; (31ae0 <http_client_socket_resolve_handler+0xbc>)
   31abc:	4798      	blx	r3
				return;
   31abe:	e005      	b.n	31acc <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31ac0:	69fb      	ldr	r3, [r7, #28]
   31ac2:	3301      	adds	r3, #1
   31ac4:	61fb      	str	r3, [r7, #28]
   31ac6:	69fb      	ldr	r3, [r7, #28]
   31ac8:	2b06      	cmp	r3, #6
   31aca:	ddb3      	ble.n	31a34 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   31acc:	46bd      	mov	sp, r7
   31ace:	b008      	add	sp, #32
   31ad0:	bd80      	pop	{r7, pc}
   31ad2:	46c0      	nop			; (mov r8, r8)
   31ad4:	200046f4 	.word	0x200046f4
   31ad8:	00035967 	.word	0x00035967
   31adc:	00031ebd 	.word	0x00031ebd
   31ae0:	000262b5 	.word	0x000262b5

00031ae4 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   31ae4:	b580      	push	{r7, lr}
   31ae6:	b086      	sub	sp, #24
   31ae8:	af00      	add	r7, sp, #0
   31aea:	60f8      	str	r0, [r7, #12]
   31aec:	60b9      	str	r1, [r7, #8]
   31aee:	607a      	str	r2, [r7, #4]
   31af0:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   31af2:	687b      	ldr	r3, [r7, #4]
   31af4:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   31af6:	697b      	ldr	r3, [r7, #20]
   31af8:	2b00      	cmp	r3, #0
   31afa:	d007      	beq.n	31b0c <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   31afc:	233e      	movs	r3, #62	; 0x3e
   31afe:	425a      	negs	r2, r3
   31b00:	697b      	ldr	r3, [r7, #20]
   31b02:	0011      	movs	r1, r2
   31b04:	0018      	movs	r0, r3
   31b06:	4b03      	ldr	r3, [pc, #12]	; (31b14 <http_client_timer_callback+0x30>)
   31b08:	4798      	blx	r3
   31b0a:	e000      	b.n	31b0e <http_client_timer_callback+0x2a>
		return;
   31b0c:	46c0      	nop			; (mov r8, r8)
}
   31b0e:	46bd      	mov	sp, r7
   31b10:	b006      	add	sp, #24
   31b12:	bd80      	pop	{r7, pc}
   31b14:	00031ebd 	.word	0x00031ebd

00031b18 <_is_ip>:

static int _is_ip(const char *host)
{
   31b18:	b580      	push	{r7, lr}
   31b1a:	b084      	sub	sp, #16
   31b1c:	af00      	add	r7, sp, #0
   31b1e:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   31b20:	2300      	movs	r3, #0
   31b22:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   31b24:	e03a      	b.n	31b9c <_is_ip+0x84>
		ch = *host++;
   31b26:	687b      	ldr	r3, [r7, #4]
   31b28:	1c5a      	adds	r2, r3, #1
   31b2a:	607a      	str	r2, [r7, #4]
   31b2c:	220b      	movs	r2, #11
   31b2e:	18ba      	adds	r2, r7, r2
   31b30:	781b      	ldrb	r3, [r3, #0]
   31b32:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   31b34:	230b      	movs	r3, #11
   31b36:	18fb      	adds	r3, r7, r3
   31b38:	781b      	ldrb	r3, [r3, #0]
   31b3a:	2b60      	cmp	r3, #96	; 0x60
   31b3c:	d904      	bls.n	31b48 <_is_ip+0x30>
   31b3e:	230b      	movs	r3, #11
   31b40:	18fb      	adds	r3, r7, r3
   31b42:	781b      	ldrb	r3, [r3, #0]
   31b44:	2b66      	cmp	r3, #102	; 0x66
   31b46:	d913      	bls.n	31b70 <_is_ip+0x58>
   31b48:	230b      	movs	r3, #11
   31b4a:	18fb      	adds	r3, r7, r3
   31b4c:	781b      	ldrb	r3, [r3, #0]
   31b4e:	2b40      	cmp	r3, #64	; 0x40
   31b50:	d904      	bls.n	31b5c <_is_ip+0x44>
   31b52:	230b      	movs	r3, #11
   31b54:	18fb      	adds	r3, r7, r3
   31b56:	781b      	ldrb	r3, [r3, #0]
   31b58:	2b46      	cmp	r3, #70	; 0x46
   31b5a:	d909      	bls.n	31b70 <_is_ip+0x58>
   31b5c:	230b      	movs	r3, #11
   31b5e:	18fb      	adds	r3, r7, r3
   31b60:	781b      	ldrb	r3, [r3, #0]
   31b62:	2b3a      	cmp	r3, #58	; 0x3a
   31b64:	d004      	beq.n	31b70 <_is_ip+0x58>
   31b66:	230b      	movs	r3, #11
   31b68:	18fb      	adds	r3, r7, r3
   31b6a:	781b      	ldrb	r3, [r3, #0]
   31b6c:	2b2f      	cmp	r3, #47	; 0x2f
   31b6e:	d102      	bne.n	31b76 <_is_ip+0x5e>
			isv6 = 1;
   31b70:	2301      	movs	r3, #1
   31b72:	60fb      	str	r3, [r7, #12]
   31b74:	e012      	b.n	31b9c <_is_ip+0x84>
		} else if (ch == '.') {
   31b76:	230b      	movs	r3, #11
   31b78:	18fb      	adds	r3, r7, r3
   31b7a:	781b      	ldrb	r3, [r3, #0]
   31b7c:	2b2e      	cmp	r3, #46	; 0x2e
   31b7e:	d104      	bne.n	31b8a <_is_ip+0x72>
			if (isv6) {
   31b80:	68fb      	ldr	r3, [r7, #12]
   31b82:	2b00      	cmp	r3, #0
   31b84:	d00a      	beq.n	31b9c <_is_ip+0x84>
				return 0;
   31b86:	2300      	movs	r3, #0
   31b88:	e00d      	b.n	31ba6 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   31b8a:	230b      	movs	r3, #11
   31b8c:	18fb      	adds	r3, r7, r3
   31b8e:	781b      	ldrb	r3, [r3, #0]
   31b90:	2230      	movs	r2, #48	; 0x30
   31b92:	4013      	ands	r3, r2
   31b94:	2b30      	cmp	r3, #48	; 0x30
   31b96:	d001      	beq.n	31b9c <_is_ip+0x84>
			return 0;
   31b98:	2300      	movs	r3, #0
   31b9a:	e004      	b.n	31ba6 <_is_ip+0x8e>
	while (*host != '\0') {
   31b9c:	687b      	ldr	r3, [r7, #4]
   31b9e:	781b      	ldrb	r3, [r3, #0]
   31ba0:	2b00      	cmp	r3, #0
   31ba2:	d1c0      	bne.n	31b26 <_is_ip+0xe>
		}
	}
	return 1;
   31ba4:	2301      	movs	r3, #1
}
   31ba6:	0018      	movs	r0, r3
   31ba8:	46bd      	mov	sp, r7
   31baa:	b004      	add	sp, #16
   31bac:	bd80      	pop	{r7, pc}
	...

00031bb0 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   31bb0:	b5b0      	push	{r4, r5, r7, lr}
   31bb2:	b08e      	sub	sp, #56	; 0x38
   31bb4:	af00      	add	r7, sp, #0
   31bb6:	60f8      	str	r0, [r7, #12]
   31bb8:	60b9      	str	r1, [r7, #8]
   31bba:	603b      	str	r3, [r7, #0]
   31bbc:	1dfb      	adds	r3, r7, #7
   31bbe:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   31bc0:	2337      	movs	r3, #55	; 0x37
   31bc2:	18fb      	adds	r3, r7, r3
   31bc4:	2200      	movs	r2, #0
   31bc6:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   31bc8:	2300      	movs	r3, #0
   31bca:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   31bcc:	2300      	movs	r3, #0
   31bce:	633b      	str	r3, [r7, #48]	; 0x30
   31bd0:	2300      	movs	r3, #0
   31bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   31bd4:	2300      	movs	r3, #0
   31bd6:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   31bd8:	68fb      	ldr	r3, [r7, #12]
   31bda:	2b00      	cmp	r3, #0
   31bdc:	d102      	bne.n	31be4 <http_client_send_request+0x34>
		return -EINVAL;
   31bde:	2316      	movs	r3, #22
   31be0:	425b      	negs	r3, r3
   31be2:	e145      	b.n	31e70 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   31be4:	68fb      	ldr	r3, [r7, #12]
   31be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31be8:	2b02      	cmp	r3, #2
   31bea:	d902      	bls.n	31bf2 <http_client_send_request+0x42>
		return -EBUSY;
   31bec:	2310      	movs	r3, #16
   31bee:	425b      	negs	r3, r3
   31bf0:	e13e      	b.n	31e70 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   31bf2:	49a1      	ldr	r1, [pc, #644]	; (31e78 <http_client_send_request+0x2c8>)
   31bf4:	68bb      	ldr	r3, [r7, #8]
   31bf6:	2207      	movs	r2, #7
   31bf8:	0018      	movs	r0, r3
   31bfa:	4ba0      	ldr	r3, [pc, #640]	; (31e7c <http_client_send_request+0x2cc>)
   31bfc:	4798      	blx	r3
   31bfe:	1e03      	subs	r3, r0, #0
   31c00:	d102      	bne.n	31c08 <http_client_send_request+0x58>
		i = 7;
   31c02:	2307      	movs	r3, #7
   31c04:	633b      	str	r3, [r7, #48]	; 0x30
   31c06:	e009      	b.n	31c1c <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   31c08:	499d      	ldr	r1, [pc, #628]	; (31e80 <http_client_send_request+0x2d0>)
   31c0a:	68bb      	ldr	r3, [r7, #8]
   31c0c:	2208      	movs	r2, #8
   31c0e:	0018      	movs	r0, r3
   31c10:	4b9a      	ldr	r3, [pc, #616]	; (31e7c <http_client_send_request+0x2cc>)
   31c12:	4798      	blx	r3
   31c14:	1e03      	subs	r3, r0, #0
   31c16:	d101      	bne.n	31c1c <http_client_send_request+0x6c>
		i = 8;
   31c18:	2308      	movs	r3, #8
   31c1a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   31c1c:	68fb      	ldr	r3, [r7, #12]
   31c1e:	1c5c      	adds	r4, r3, #1
   31c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31c22:	68ba      	ldr	r2, [r7, #8]
   31c24:	18d5      	adds	r5, r2, r3
   31c26:	68fb      	ldr	r3, [r7, #12]
   31c28:	3301      	adds	r3, #1
   31c2a:	0018      	movs	r0, r3
   31c2c:	4b95      	ldr	r3, [pc, #596]	; (31e84 <http_client_send_request+0x2d4>)
   31c2e:	4798      	blx	r3
   31c30:	0003      	movs	r3, r0
   31c32:	001a      	movs	r2, r3
   31c34:	0029      	movs	r1, r5
   31c36:	0020      	movs	r0, r4
   31c38:	4b90      	ldr	r3, [pc, #576]	; (31e7c <http_client_send_request+0x2cc>)
   31c3a:	4798      	blx	r3
   31c3c:	0003      	movs	r3, r0
   31c3e:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31c40:	e00d      	b.n	31c5e <http_client_send_request+0xae>
		module->host[j++] = url[i];
   31c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31c44:	1c5a      	adds	r2, r3, #1
   31c46:	62fa      	str	r2, [r7, #44]	; 0x2c
   31c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   31c4a:	68b9      	ldr	r1, [r7, #8]
   31c4c:	188a      	adds	r2, r1, r2
   31c4e:	7811      	ldrb	r1, [r2, #0]
   31c50:	68fa      	ldr	r2, [r7, #12]
   31c52:	18d3      	adds	r3, r2, r3
   31c54:	1c0a      	adds	r2, r1, #0
   31c56:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31c5a:	3301      	adds	r3, #1
   31c5c:	633b      	str	r3, [r7, #48]	; 0x30
   31c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31c60:	68ba      	ldr	r2, [r7, #8]
   31c62:	18d3      	adds	r3, r2, r3
   31c64:	781b      	ldrb	r3, [r3, #0]
   31c66:	2b00      	cmp	r3, #0
   31c68:	d005      	beq.n	31c76 <http_client_send_request+0xc6>
   31c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31c6c:	68ba      	ldr	r2, [r7, #8]
   31c6e:	18d3      	adds	r3, r2, r3
   31c70:	781b      	ldrb	r3, [r3, #0]
   31c72:	2b2f      	cmp	r3, #47	; 0x2f
   31c74:	d1e5      	bne.n	31c42 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   31c76:	68fa      	ldr	r2, [r7, #12]
   31c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31c7a:	18d3      	adds	r3, r2, r3
   31c7c:	3301      	adds	r3, #1
   31c7e:	2200      	movs	r2, #0
   31c80:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   31c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31c84:	68ba      	ldr	r2, [r7, #8]
   31c86:	18d3      	adds	r3, r2, r3
   31c88:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   31c8a:	68fb      	ldr	r3, [r7, #12]
   31c8c:	3301      	adds	r3, #1
   31c8e:	781b      	ldrb	r3, [r3, #0]
   31c90:	2b00      	cmp	r3, #0
   31c92:	d102      	bne.n	31c9a <http_client_send_request+0xea>
		return -EINVAL;
   31c94:	2316      	movs	r3, #22
   31c96:	425b      	negs	r3, r3
   31c98:	e0ea      	b.n	31e70 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   31c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31c9c:	0018      	movs	r0, r3
   31c9e:	4b79      	ldr	r3, [pc, #484]	; (31e84 <http_client_send_request+0x2d4>)
   31ca0:	4798      	blx	r3
   31ca2:	0003      	movs	r3, r0
   31ca4:	2b3f      	cmp	r3, #63	; 0x3f
   31ca6:	d902      	bls.n	31cae <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   31ca8:	235b      	movs	r3, #91	; 0x5b
   31caa:	425b      	negs	r3, r3
   31cac:	e0e0      	b.n	31e70 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   31cae:	68fb      	ldr	r3, [r7, #12]
   31cb0:	22d4      	movs	r2, #212	; 0xd4
   31cb2:	589b      	ldr	r3, [r3, r2]
   31cb4:	2b00      	cmp	r3, #0
   31cb6:	d005      	beq.n	31cc4 <http_client_send_request+0x114>
		free(module->req.ext_header);
   31cb8:	68fb      	ldr	r3, [r7, #12]
   31cba:	22d4      	movs	r2, #212	; 0xd4
   31cbc:	589b      	ldr	r3, [r3, r2]
   31cbe:	0018      	movs	r0, r3
   31cc0:	4b71      	ldr	r3, [pc, #452]	; (31e88 <http_client_send_request+0x2d8>)
   31cc2:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   31cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31cc6:	2b00      	cmp	r3, #0
   31cc8:	d010      	beq.n	31cec <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   31cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31ccc:	0018      	movs	r0, r3
   31cce:	4b6f      	ldr	r3, [pc, #444]	; (31e8c <http_client_send_request+0x2dc>)
   31cd0:	4798      	blx	r3
   31cd2:	0003      	movs	r3, r0
   31cd4:	0019      	movs	r1, r3
   31cd6:	68fb      	ldr	r3, [r7, #12]
   31cd8:	22d4      	movs	r2, #212	; 0xd4
   31cda:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   31cdc:	68fb      	ldr	r3, [r7, #12]
   31cde:	22d4      	movs	r2, #212	; 0xd4
   31ce0:	589b      	ldr	r3, [r3, r2]
   31ce2:	2b00      	cmp	r3, #0
   31ce4:	d106      	bne.n	31cf4 <http_client_send_request+0x144>
			return -ENOMEM;
   31ce6:	230c      	movs	r3, #12
   31ce8:	425b      	negs	r3, r3
   31cea:	e0c1      	b.n	31e70 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   31cec:	68fb      	ldr	r3, [r7, #12]
   31cee:	22d4      	movs	r2, #212	; 0xd4
   31cf0:	2100      	movs	r1, #0
   31cf2:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   31cf4:	68fb      	ldr	r3, [r7, #12]
   31cf6:	2241      	movs	r2, #65	; 0x41
   31cf8:	5c99      	ldrb	r1, [r3, r2]
   31cfa:	2001      	movs	r0, #1
   31cfc:	4381      	bics	r1, r0
   31cfe:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   31d00:	68fb      	ldr	r3, [r7, #12]
   31d02:	2200      	movs	r2, #0
   31d04:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   31d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31d08:	781b      	ldrb	r3, [r3, #0]
   31d0a:	2b2f      	cmp	r3, #47	; 0x2f
   31d0c:	d107      	bne.n	31d1e <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   31d0e:	68fb      	ldr	r3, [r7, #12]
   31d10:	3370      	adds	r3, #112	; 0x70
   31d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31d14:	0011      	movs	r1, r2
   31d16:	0018      	movs	r0, r3
   31d18:	4b5d      	ldr	r3, [pc, #372]	; (31e90 <http_client_send_request+0x2e0>)
   31d1a:	4798      	blx	r3
   31d1c:	e00f      	b.n	31d3e <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   31d1e:	68fb      	ldr	r3, [r7, #12]
   31d20:	2270      	movs	r2, #112	; 0x70
   31d22:	212f      	movs	r1, #47	; 0x2f
   31d24:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   31d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31d28:	781b      	ldrb	r3, [r3, #0]
   31d2a:	2b00      	cmp	r3, #0
   31d2c:	d007      	beq.n	31d3e <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   31d2e:	68fb      	ldr	r3, [r7, #12]
   31d30:	3370      	adds	r3, #112	; 0x70
   31d32:	3301      	adds	r3, #1
   31d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31d36:	0011      	movs	r1, r2
   31d38:	0018      	movs	r0, r3
   31d3a:	4b55      	ldr	r3, [pc, #340]	; (31e90 <http_client_send_request+0x2e0>)
   31d3c:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   31d3e:	683b      	ldr	r3, [r7, #0]
   31d40:	2b00      	cmp	r3, #0
   31d42:	d007      	beq.n	31d54 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   31d44:	68fb      	ldr	r3, [r7, #12]
   31d46:	33b0      	adds	r3, #176	; 0xb0
   31d48:	6839      	ldr	r1, [r7, #0]
   31d4a:	2218      	movs	r2, #24
   31d4c:	0018      	movs	r0, r3
   31d4e:	4b51      	ldr	r3, [pc, #324]	; (31e94 <http_client_send_request+0x2e4>)
   31d50:	4798      	blx	r3
   31d52:	e006      	b.n	31d62 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   31d54:	68fb      	ldr	r3, [r7, #12]
   31d56:	33b0      	adds	r3, #176	; 0xb0
   31d58:	2218      	movs	r2, #24
   31d5a:	2100      	movs	r1, #0
   31d5c:	0018      	movs	r0, r3
   31d5e:	4b4e      	ldr	r3, [pc, #312]	; (31e98 <http_client_send_request+0x2e8>)
   31d60:	4798      	blx	r3
	}

	module->req.method = method;
   31d62:	68fb      	ldr	r3, [r7, #12]
   31d64:	1dfa      	adds	r2, r7, #7
   31d66:	21c8      	movs	r1, #200	; 0xc8
   31d68:	7812      	ldrb	r2, [r2, #0]
   31d6a:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   31d6c:	68fb      	ldr	r3, [r7, #12]
   31d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31d70:	2b01      	cmp	r3, #1
   31d72:	d003      	beq.n	31d7c <http_client_send_request+0x1cc>
   31d74:	d316      	bcc.n	31da4 <http_client_send_request+0x1f4>
   31d76:	2b02      	cmp	r3, #2
   31d78:	d004      	beq.n	31d84 <http_client_send_request+0x1d4>
   31d7a:	e074      	b.n	31e66 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   31d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31d7e:	2b00      	cmp	r3, #0
   31d80:	d100      	bne.n	31d84 <http_client_send_request+0x1d4>
   31d82:	e073      	b.n	31e6c <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   31d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31d86:	2b00      	cmp	r3, #0
   31d88:	d107      	bne.n	31d9a <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   31d8a:	68fb      	ldr	r3, [r7, #12]
   31d8c:	2203      	movs	r2, #3
   31d8e:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   31d90:	68fb      	ldr	r3, [r7, #12]
   31d92:	0018      	movs	r0, r3
   31d94:	4b41      	ldr	r3, [pc, #260]	; (31e9c <http_client_send_request+0x2ec>)
   31d96:	4798      	blx	r3
			break;
   31d98:	e069      	b.n	31e6e <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   31d9a:	68fb      	ldr	r3, [r7, #12]
   31d9c:	2100      	movs	r1, #0
   31d9e:	0018      	movs	r0, r3
   31da0:	4b3f      	ldr	r3, [pc, #252]	; (31ea0 <http_client_send_request+0x2f0>)
   31da2:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   31da4:	68fb      	ldr	r3, [r7, #12]
   31da6:	2252      	movs	r2, #82	; 0x52
   31da8:	5c9b      	ldrb	r3, [r3, r2]
   31daa:	2b00      	cmp	r3, #0
   31dac:	d007      	beq.n	31dbe <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   31dae:	2337      	movs	r3, #55	; 0x37
   31db0:	18fb      	adds	r3, r7, r3
   31db2:	2237      	movs	r2, #55	; 0x37
   31db4:	18ba      	adds	r2, r7, r2
   31db6:	7812      	ldrb	r2, [r2, #0]
   31db8:	2101      	movs	r1, #1
   31dba:	430a      	orrs	r2, r1
   31dbc:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   31dbe:	2337      	movs	r3, #55	; 0x37
   31dc0:	18fb      	adds	r3, r7, r3
   31dc2:	781b      	ldrb	r3, [r3, #0]
   31dc4:	001a      	movs	r2, r3
   31dc6:	2101      	movs	r1, #1
   31dc8:	2002      	movs	r0, #2
   31dca:	4b36      	ldr	r3, [pc, #216]	; (31ea4 <http_client_send_request+0x2f4>)
   31dcc:	4798      	blx	r3
   31dce:	0003      	movs	r3, r0
   31dd0:	001a      	movs	r2, r3
   31dd2:	68fb      	ldr	r3, [r7, #12]
   31dd4:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   31dd6:	68fb      	ldr	r3, [r7, #12]
   31dd8:	781b      	ldrb	r3, [r3, #0]
   31dda:	b25b      	sxtb	r3, r3
   31ddc:	2b00      	cmp	r3, #0
   31dde:	db3f      	blt.n	31e60 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   31de0:	68fb      	ldr	r3, [r7, #12]
   31de2:	781b      	ldrb	r3, [r3, #0]
   31de4:	b25b      	sxtb	r3, r3
   31de6:	001a      	movs	r2, r3
   31de8:	4b2f      	ldr	r3, [pc, #188]	; (31ea8 <http_client_send_request+0x2f8>)
   31dea:	0092      	lsls	r2, r2, #2
   31dec:	68f9      	ldr	r1, [r7, #12]
   31dee:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   31df0:	68fb      	ldr	r3, [r7, #12]
   31df2:	3301      	adds	r3, #1
   31df4:	0018      	movs	r0, r3
   31df6:	4b2d      	ldr	r3, [pc, #180]	; (31eac <http_client_send_request+0x2fc>)
   31df8:	4798      	blx	r3
   31dfa:	1e03      	subs	r3, r0, #0
   31dfc:	d027      	beq.n	31e4e <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   31dfe:	2314      	movs	r3, #20
   31e00:	18fb      	adds	r3, r7, r3
   31e02:	2202      	movs	r2, #2
   31e04:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31e06:	68fb      	ldr	r3, [r7, #12]
   31e08:	2250      	movs	r2, #80	; 0x50
   31e0a:	5a9b      	ldrh	r3, [r3, r2]
   31e0c:	021b      	lsls	r3, r3, #8
   31e0e:	b21a      	sxth	r2, r3
   31e10:	68fb      	ldr	r3, [r7, #12]
   31e12:	2150      	movs	r1, #80	; 0x50
   31e14:	5a5b      	ldrh	r3, [r3, r1]
   31e16:	0a1b      	lsrs	r3, r3, #8
   31e18:	b29b      	uxth	r3, r3
   31e1a:	b21b      	sxth	r3, r3
   31e1c:	4313      	orrs	r3, r2
   31e1e:	b21b      	sxth	r3, r3
   31e20:	b29a      	uxth	r2, r3
   31e22:	2314      	movs	r3, #20
   31e24:	18fb      	adds	r3, r7, r3
   31e26:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   31e28:	68fb      	ldr	r3, [r7, #12]
   31e2a:	3301      	adds	r3, #1
   31e2c:	0018      	movs	r0, r3
   31e2e:	4b20      	ldr	r3, [pc, #128]	; (31eb0 <http_client_send_request+0x300>)
   31e30:	4798      	blx	r3
   31e32:	0002      	movs	r2, r0
   31e34:	2314      	movs	r3, #20
   31e36:	18fb      	adds	r3, r7, r3
   31e38:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31e3a:	68fb      	ldr	r3, [r7, #12]
   31e3c:	781b      	ldrb	r3, [r3, #0]
   31e3e:	b25b      	sxtb	r3, r3
   31e40:	2214      	movs	r2, #20
   31e42:	18b9      	adds	r1, r7, r2
   31e44:	2210      	movs	r2, #16
   31e46:	0018      	movs	r0, r3
   31e48:	4b1a      	ldr	r3, [pc, #104]	; (31eb4 <http_client_send_request+0x304>)
   31e4a:	4798      	blx	r3
   31e4c:	e004      	b.n	31e58 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   31e4e:	68fb      	ldr	r3, [r7, #12]
   31e50:	3301      	adds	r3, #1
   31e52:	0018      	movs	r0, r3
   31e54:	4b18      	ldr	r3, [pc, #96]	; (31eb8 <http_client_send_request+0x308>)
   31e56:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   31e58:	68fb      	ldr	r3, [r7, #12]
   31e5a:	2201      	movs	r2, #1
   31e5c:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   31e5e:	e006      	b.n	31e6e <http_client_send_request+0x2be>
			return -ENOSPC;
   31e60:	231c      	movs	r3, #28
   31e62:	425b      	negs	r3, r3
   31e64:	e004      	b.n	31e70 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   31e66:	230b      	movs	r3, #11
   31e68:	425b      	negs	r3, r3
   31e6a:	e001      	b.n	31e70 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   31e6c:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   31e6e:	2300      	movs	r3, #0
}
   31e70:	0018      	movs	r0, r3
   31e72:	46bd      	mov	sp, r7
   31e74:	b00e      	add	sp, #56	; 0x38
   31e76:	bdb0      	pop	{r4, r5, r7, pc}
   31e78:	0003abfc 	.word	0x0003abfc
   31e7c:	000359d5 	.word	0x000359d5
   31e80:	0003ac04 	.word	0x0003ac04
   31e84:	000359c7 	.word	0x000359c7
   31e88:	000355c5 	.word	0x000355c5
   31e8c:	0003598d 	.word	0x0003598d
   31e90:	0003597b 	.word	0x0003597b
   31e94:	000355d9 	.word	0x000355d9
   31e98:	0003560f 	.word	0x0003560f
   31e9c:	00032011 	.word	0x00032011
   31ea0:	00031ebd 	.word	0x00031ebd
   31ea4:	000260a1 	.word	0x000260a1
   31ea8:	200046f4 	.word	0x200046f4
   31eac:	00031b19 	.word	0x00031b19
   31eb0:	000267ed 	.word	0x000267ed
   31eb4:	000262b5 	.word	0x000262b5
   31eb8:	000268f5 	.word	0x000268f5

00031ebc <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   31ebc:	b580      	push	{r7, lr}
   31ebe:	b086      	sub	sp, #24
   31ec0:	af00      	add	r7, sp, #0
   31ec2:	6078      	str	r0, [r7, #4]
   31ec4:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   31ec6:	687b      	ldr	r3, [r7, #4]
   31ec8:	22c0      	movs	r2, #192	; 0xc0
   31eca:	589b      	ldr	r3, [r3, r2]
   31ecc:	2b00      	cmp	r3, #0
   31ece:	d007      	beq.n	31ee0 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   31ed0:	687b      	ldr	r3, [r7, #4]
   31ed2:	22c0      	movs	r2, #192	; 0xc0
   31ed4:	589b      	ldr	r3, [r3, r2]
   31ed6:	687a      	ldr	r2, [r7, #4]
   31ed8:	21c4      	movs	r1, #196	; 0xc4
   31eda:	5852      	ldr	r2, [r2, r1]
   31edc:	0010      	movs	r0, r2
   31ede:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   31ee0:	687b      	ldr	r3, [r7, #4]
   31ee2:	33b0      	adds	r3, #176	; 0xb0
   31ee4:	2218      	movs	r2, #24
   31ee6:	2100      	movs	r1, #0
   31ee8:	0018      	movs	r0, r3
   31eea:	4b24      	ldr	r3, [pc, #144]	; (31f7c <_http_client_clear_conn+0xc0>)
   31eec:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   31eee:	687b      	ldr	r3, [r7, #4]
   31ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31ef2:	2b00      	cmp	r3, #0
   31ef4:	d005      	beq.n	31f02 <_http_client_clear_conn+0x46>
		close(module->sock);
   31ef6:	687b      	ldr	r3, [r7, #4]
   31ef8:	781b      	ldrb	r3, [r3, #0]
   31efa:	b25b      	sxtb	r3, r3
   31efc:	0018      	movs	r0, r3
   31efe:	4b20      	ldr	r3, [pc, #128]	; (31f80 <_http_client_clear_conn+0xc4>)
   31f00:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   31f02:	687b      	ldr	r3, [r7, #4]
   31f04:	781b      	ldrb	r3, [r3, #0]
   31f06:	b25b      	sxtb	r3, r3
   31f08:	001a      	movs	r2, r3
   31f0a:	4b1e      	ldr	r3, [pc, #120]	; (31f84 <_http_client_clear_conn+0xc8>)
   31f0c:	0092      	lsls	r2, r2, #2
   31f0e:	2100      	movs	r1, #0
   31f10:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   31f12:	687b      	ldr	r3, [r7, #4]
   31f14:	336c      	adds	r3, #108	; 0x6c
   31f16:	226c      	movs	r2, #108	; 0x6c
   31f18:	2100      	movs	r1, #0
   31f1a:	0018      	movs	r0, r3
   31f1c:	4b17      	ldr	r3, [pc, #92]	; (31f7c <_http_client_clear_conn+0xc0>)
   31f1e:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   31f20:	687b      	ldr	r3, [r7, #4]
   31f22:	33d8      	adds	r3, #216	; 0xd8
   31f24:	2210      	movs	r2, #16
   31f26:	2100      	movs	r1, #0
   31f28:	0018      	movs	r0, r3
   31f2a:	4b14      	ldr	r3, [pc, #80]	; (31f7c <_http_client_clear_conn+0xc0>)
   31f2c:	4798      	blx	r3
	module->req.state = STATE_INIT;
   31f2e:	687b      	ldr	r3, [r7, #4]
   31f30:	2200      	movs	r2, #0
   31f32:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   31f34:	687b      	ldr	r3, [r7, #4]
   31f36:	22d8      	movs	r2, #216	; 0xd8
   31f38:	2100      	movs	r1, #0
   31f3a:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   31f3c:	687b      	ldr	r3, [r7, #4]
   31f3e:	2241      	movs	r2, #65	; 0x41
   31f40:	5c99      	ldrb	r1, [r3, r2]
   31f42:	2001      	movs	r0, #1
   31f44:	4381      	bics	r1, r0
   31f46:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   31f48:	687b      	ldr	r3, [r7, #4]
   31f4a:	2241      	movs	r2, #65	; 0x41
   31f4c:	5c99      	ldrb	r1, [r3, r2]
   31f4e:	2002      	movs	r0, #2
   31f50:	4381      	bics	r1, r0
   31f52:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   31f54:	230c      	movs	r3, #12
   31f56:	18fb      	adds	r3, r7, r3
   31f58:	683a      	ldr	r2, [r7, #0]
   31f5a:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   31f5c:	687b      	ldr	r3, [r7, #4]
   31f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f60:	2b00      	cmp	r3, #0
   31f62:	d006      	beq.n	31f72 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   31f64:	687b      	ldr	r3, [r7, #4]
   31f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f68:	220c      	movs	r2, #12
   31f6a:	18ba      	adds	r2, r7, r2
   31f6c:	6878      	ldr	r0, [r7, #4]
   31f6e:	2104      	movs	r1, #4
   31f70:	4798      	blx	r3
	}
}
   31f72:	46c0      	nop			; (mov r8, r8)
   31f74:	46bd      	mov	sp, r7
   31f76:	b006      	add	sp, #24
   31f78:	bd80      	pop	{r7, pc}
   31f7a:	46c0      	nop			; (mov r8, r8)
   31f7c:	0003560f 	.word	0x0003560f
   31f80:	000266ad 	.word	0x000266ad
   31f84:	200046f4 	.word	0x200046f4

00031f88 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   31f88:	b590      	push	{r4, r7, lr}
   31f8a:	b087      	sub	sp, #28
   31f8c:	af00      	add	r7, sp, #0
   31f8e:	60f8      	str	r0, [r7, #12]
   31f90:	60b9      	str	r1, [r7, #8]
   31f92:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   31f94:	68fb      	ldr	r3, [r7, #12]
   31f96:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   31f98:	697b      	ldr	r3, [r7, #20]
   31f9a:	2241      	movs	r2, #65	; 0x41
   31f9c:	5c99      	ldrb	r1, [r3, r2]
   31f9e:	2001      	movs	r0, #1
   31fa0:	4301      	orrs	r1, r0
   31fa2:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   31fa4:	697b      	ldr	r3, [r7, #20]
   31fa6:	2000      	movs	r0, #0
   31fa8:	5618      	ldrsb	r0, [r3, r0]
   31faa:	687b      	ldr	r3, [r7, #4]
   31fac:	b29a      	uxth	r2, r3
   31fae:	68b9      	ldr	r1, [r7, #8]
   31fb0:	2300      	movs	r3, #0
   31fb2:	4c14      	ldr	r4, [pc, #80]	; (32004 <_http_client_send_wait+0x7c>)
   31fb4:	47a0      	blx	r4
   31fb6:	0003      	movs	r3, r0
   31fb8:	613b      	str	r3, [r7, #16]
   31fba:	693b      	ldr	r3, [r7, #16]
   31fbc:	2b00      	cmp	r3, #0
   31fbe:	da0f      	bge.n	31fe0 <_http_client_send_wait+0x58>
		module->sending = 0;
   31fc0:	697b      	ldr	r3, [r7, #20]
   31fc2:	2241      	movs	r2, #65	; 0x41
   31fc4:	5c99      	ldrb	r1, [r3, r2]
   31fc6:	2001      	movs	r0, #1
   31fc8:	4381      	bics	r1, r0
   31fca:	5499      	strb	r1, [r3, r2]
		return result;
   31fcc:	693b      	ldr	r3, [r7, #16]
   31fce:	e014      	b.n	31ffa <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   31fd0:	2000      	movs	r0, #0
   31fd2:	4b0d      	ldr	r3, [pc, #52]	; (32008 <_http_client_send_wait+0x80>)
   31fd4:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   31fd6:	697b      	ldr	r3, [r7, #20]
   31fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   31fda:	0018      	movs	r0, r3
   31fdc:	4b0b      	ldr	r3, [pc, #44]	; (3200c <_http_client_send_wait+0x84>)
   31fde:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   31fe0:	697b      	ldr	r3, [r7, #20]
   31fe2:	2241      	movs	r2, #65	; 0x41
   31fe4:	5c9b      	ldrb	r3, [r3, r2]
   31fe6:	2201      	movs	r2, #1
   31fe8:	4013      	ands	r3, r2
   31fea:	b2db      	uxtb	r3, r3
   31fec:	2b00      	cmp	r3, #0
   31fee:	d003      	beq.n	31ff8 <_http_client_send_wait+0x70>
   31ff0:	697b      	ldr	r3, [r7, #20]
   31ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31ff4:	2b02      	cmp	r3, #2
   31ff6:	d8eb      	bhi.n	31fd0 <_http_client_send_wait+0x48>
	}

	return 0;
   31ff8:	2300      	movs	r3, #0
}
   31ffa:	0018      	movs	r0, r3
   31ffc:	46bd      	mov	sp, r7
   31ffe:	b007      	add	sp, #28
   32000:	bd90      	pop	{r4, r7, pc}
   32002:	46c0      	nop			; (mov r8, r8)
   32004:	000263c9 	.word	0x000263c9
   32008:	00022a75 	.word	0x00022a75
   3200c:	00033295 	.word	0x00033295

00032010 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   32010:	b5f0      	push	{r4, r5, r6, r7, lr}
   32012:	46c6      	mov	lr, r8
   32014:	b500      	push	{lr}
   32016:	b0a0      	sub	sp, #128	; 0x80
   32018:	af02      	add	r7, sp, #8
   3201a:	61f8      	str	r0, [r7, #28]
   3201c:	4668      	mov	r0, sp
   3201e:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   32020:	2318      	movs	r3, #24
   32022:	2218      	movs	r2, #24
   32024:	18ba      	adds	r2, r7, r2
   32026:	18d0      	adds	r0, r2, r3
   32028:	4bbd      	ldr	r3, [pc, #756]	; (32320 <_http_client_request+0x310>)
   3202a:	469c      	mov	ip, r3
   3202c:	4663      	mov	r3, ip
   3202e:	cb16      	ldmia	r3!, {r1, r2, r4}
   32030:	c016      	stmia	r0!, {r1, r2, r4}
   32032:	469c      	mov	ip, r3
   32034:	4663      	mov	r3, ip
   32036:	681b      	ldr	r3, [r3, #0]
   32038:	469c      	mov	ip, r3
   3203a:	4663      	mov	r3, ip
   3203c:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   3203e:	69f8      	ldr	r0, [r7, #28]
   32040:	6e40      	ldr	r0, [r0, #100]	; 0x64
   32042:	4684      	mov	ip, r0
   32044:	2301      	movs	r3, #1
   32046:	425b      	negs	r3, r3
   32048:	4698      	mov	r8, r3
   3204a:	44c4      	add	ip, r8
   3204c:	4663      	mov	r3, ip
   3204e:	66fb      	str	r3, [r7, #108]	; 0x6c
   32050:	6038      	str	r0, [r7, #0]
   32052:	2300      	movs	r3, #0
   32054:	607b      	str	r3, [r7, #4]
   32056:	6839      	ldr	r1, [r7, #0]
   32058:	687a      	ldr	r2, [r7, #4]
   3205a:	000b      	movs	r3, r1
   3205c:	0f5b      	lsrs	r3, r3, #29
   3205e:	469c      	mov	ip, r3
   32060:	0013      	movs	r3, r2
   32062:	00db      	lsls	r3, r3, #3
   32064:	617b      	str	r3, [r7, #20]
   32066:	4663      	mov	r3, ip
   32068:	697c      	ldr	r4, [r7, #20]
   3206a:	431c      	orrs	r4, r3
   3206c:	617c      	str	r4, [r7, #20]
   3206e:	000b      	movs	r3, r1
   32070:	00db      	lsls	r3, r3, #3
   32072:	613b      	str	r3, [r7, #16]
   32074:	0005      	movs	r5, r0
   32076:	2200      	movs	r2, #0
   32078:	0016      	movs	r6, r2
   3207a:	0f6a      	lsrs	r2, r5, #29
   3207c:	00f3      	lsls	r3, r6, #3
   3207e:	60fb      	str	r3, [r7, #12]
   32080:	68fb      	ldr	r3, [r7, #12]
   32082:	4313      	orrs	r3, r2
   32084:	60fb      	str	r3, [r7, #12]
   32086:	00eb      	lsls	r3, r5, #3
   32088:	60bb      	str	r3, [r7, #8]
   3208a:	1dc3      	adds	r3, r0, #7
   3208c:	08db      	lsrs	r3, r3, #3
   3208e:	00db      	lsls	r3, r3, #3
   32090:	466a      	mov	r2, sp
   32092:	1ad3      	subs	r3, r2, r3
   32094:	469d      	mov	sp, r3
   32096:	ab02      	add	r3, sp, #8
   32098:	3300      	adds	r3, #0
   3209a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   3209c:	69fb      	ldr	r3, [r7, #28]
   3209e:	2b00      	cmp	r3, #0
   320a0:	d100      	bne.n	320a4 <_http_client_request+0x94>
   320a2:	e346      	b.n	32732 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   320a4:	69fb      	ldr	r3, [r7, #28]
   320a6:	2241      	movs	r2, #65	; 0x41
   320a8:	5c9b      	ldrb	r3, [r3, r2]
   320aa:	2201      	movs	r2, #1
   320ac:	4013      	ands	r3, r2
   320ae:	b2db      	uxtb	r3, r3
   320b0:	2b00      	cmp	r3, #0
   320b2:	d000      	beq.n	320b6 <_http_client_request+0xa6>
   320b4:	e33f      	b.n	32736 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   320b6:	69fb      	ldr	r3, [r7, #28]
   320b8:	33b0      	adds	r3, #176	; 0xb0
   320ba:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   320bc:	69fb      	ldr	r3, [r7, #28]
   320be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   320c0:	2b03      	cmp	r3, #3
   320c2:	d003      	beq.n	320cc <_http_client_request+0xbc>
   320c4:	2b04      	cmp	r3, #4
   320c6:	d100      	bne.n	320ca <_http_client_request+0xba>
   320c8:	e1b3      	b.n	32432 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   320ca:	e32f      	b.n	3272c <_http_client_request+0x71c>
		module->req.content_length = 0;
   320cc:	69fb      	ldr	r3, [r7, #28]
   320ce:	22cc      	movs	r2, #204	; 0xcc
   320d0:	2100      	movs	r1, #0
   320d2:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   320d4:	69fb      	ldr	r3, [r7, #28]
   320d6:	22d0      	movs	r2, #208	; 0xd0
   320d8:	2100      	movs	r1, #0
   320da:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   320dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   320de:	69fb      	ldr	r3, [r7, #28]
   320e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   320e2:	4c90      	ldr	r4, [pc, #576]	; (32324 <_http_client_request+0x314>)
   320e4:	2334      	movs	r3, #52	; 0x34
   320e6:	2018      	movs	r0, #24
   320e8:	1838      	adds	r0, r7, r0
   320ea:	18c0      	adds	r0, r0, r3
   320ec:	69fb      	ldr	r3, [r7, #28]
   320ee:	9300      	str	r3, [sp, #0]
   320f0:	0023      	movs	r3, r4
   320f2:	4c8d      	ldr	r4, [pc, #564]	; (32328 <_http_client_request+0x318>)
   320f4:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   320f6:	69fb      	ldr	r3, [r7, #28]
   320f8:	22c8      	movs	r2, #200	; 0xc8
   320fa:	5c9b      	ldrb	r3, [r3, r2]
   320fc:	2b01      	cmp	r3, #1
   320fe:	d10a      	bne.n	32116 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   32100:	498a      	ldr	r1, [pc, #552]	; (3232c <_http_client_request+0x31c>)
   32102:	2334      	movs	r3, #52	; 0x34
   32104:	2218      	movs	r2, #24
   32106:	4694      	mov	ip, r2
   32108:	44bc      	add	ip, r7
   3210a:	4463      	add	r3, ip
   3210c:	2204      	movs	r2, #4
   3210e:	0018      	movs	r0, r3
   32110:	4b87      	ldr	r3, [pc, #540]	; (32330 <_http_client_request+0x320>)
   32112:	4798      	blx	r3
   32114:	e04e      	b.n	321b4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   32116:	69fb      	ldr	r3, [r7, #28]
   32118:	22c8      	movs	r2, #200	; 0xc8
   3211a:	5c9b      	ldrb	r3, [r3, r2]
   3211c:	2b02      	cmp	r3, #2
   3211e:	d10a      	bne.n	32136 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   32120:	4984      	ldr	r1, [pc, #528]	; (32334 <_http_client_request+0x324>)
   32122:	2334      	movs	r3, #52	; 0x34
   32124:	2218      	movs	r2, #24
   32126:	4694      	mov	ip, r2
   32128:	44bc      	add	ip, r7
   3212a:	4463      	add	r3, ip
   3212c:	2205      	movs	r2, #5
   3212e:	0018      	movs	r0, r3
   32130:	4b7f      	ldr	r3, [pc, #508]	; (32330 <_http_client_request+0x320>)
   32132:	4798      	blx	r3
   32134:	e03e      	b.n	321b4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   32136:	69fb      	ldr	r3, [r7, #28]
   32138:	22c8      	movs	r2, #200	; 0xc8
   3213a:	5c9b      	ldrb	r3, [r3, r2]
   3213c:	2b03      	cmp	r3, #3
   3213e:	d10a      	bne.n	32156 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   32140:	497d      	ldr	r1, [pc, #500]	; (32338 <_http_client_request+0x328>)
   32142:	2334      	movs	r3, #52	; 0x34
   32144:	2218      	movs	r2, #24
   32146:	4694      	mov	ip, r2
   32148:	44bc      	add	ip, r7
   3214a:	4463      	add	r3, ip
   3214c:	2207      	movs	r2, #7
   3214e:	0018      	movs	r0, r3
   32150:	4b77      	ldr	r3, [pc, #476]	; (32330 <_http_client_request+0x320>)
   32152:	4798      	blx	r3
   32154:	e02e      	b.n	321b4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   32156:	69fb      	ldr	r3, [r7, #28]
   32158:	22c8      	movs	r2, #200	; 0xc8
   3215a:	5c9b      	ldrb	r3, [r3, r2]
   3215c:	2b04      	cmp	r3, #4
   3215e:	d10a      	bne.n	32176 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   32160:	4976      	ldr	r1, [pc, #472]	; (3233c <_http_client_request+0x32c>)
   32162:	2334      	movs	r3, #52	; 0x34
   32164:	2218      	movs	r2, #24
   32166:	4694      	mov	ip, r2
   32168:	44bc      	add	ip, r7
   3216a:	4463      	add	r3, ip
   3216c:	2204      	movs	r2, #4
   3216e:	0018      	movs	r0, r3
   32170:	4b6f      	ldr	r3, [pc, #444]	; (32330 <_http_client_request+0x320>)
   32172:	4798      	blx	r3
   32174:	e01e      	b.n	321b4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   32176:	69fb      	ldr	r3, [r7, #28]
   32178:	22c8      	movs	r2, #200	; 0xc8
   3217a:	5c9b      	ldrb	r3, [r3, r2]
   3217c:	2b05      	cmp	r3, #5
   3217e:	d10a      	bne.n	32196 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   32180:	496f      	ldr	r1, [pc, #444]	; (32340 <_http_client_request+0x330>)
   32182:	2334      	movs	r3, #52	; 0x34
   32184:	2218      	movs	r2, #24
   32186:	4694      	mov	ip, r2
   32188:	44bc      	add	ip, r7
   3218a:	4463      	add	r3, ip
   3218c:	2208      	movs	r2, #8
   3218e:	0018      	movs	r0, r3
   32190:	4b67      	ldr	r3, [pc, #412]	; (32330 <_http_client_request+0x320>)
   32192:	4798      	blx	r3
   32194:	e00e      	b.n	321b4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   32196:	69fb      	ldr	r3, [r7, #28]
   32198:	22c8      	movs	r2, #200	; 0xc8
   3219a:	5c9b      	ldrb	r3, [r3, r2]
   3219c:	2b06      	cmp	r3, #6
   3219e:	d109      	bne.n	321b4 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   321a0:	4968      	ldr	r1, [pc, #416]	; (32344 <_http_client_request+0x334>)
   321a2:	2334      	movs	r3, #52	; 0x34
   321a4:	2218      	movs	r2, #24
   321a6:	4694      	mov	ip, r2
   321a8:	44bc      	add	ip, r7
   321aa:	4463      	add	r3, ip
   321ac:	2205      	movs	r2, #5
   321ae:	0018      	movs	r0, r3
   321b0:	4b5f      	ldr	r3, [pc, #380]	; (32330 <_http_client_request+0x320>)
   321b2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   321b4:	69fb      	ldr	r3, [r7, #28]
   321b6:	3370      	adds	r3, #112	; 0x70
   321b8:	001c      	movs	r4, r3
   321ba:	69fb      	ldr	r3, [r7, #28]
   321bc:	3370      	adds	r3, #112	; 0x70
   321be:	0018      	movs	r0, r3
   321c0:	4b61      	ldr	r3, [pc, #388]	; (32348 <_http_client_request+0x338>)
   321c2:	4798      	blx	r3
   321c4:	0002      	movs	r2, r0
   321c6:	2334      	movs	r3, #52	; 0x34
   321c8:	2118      	movs	r1, #24
   321ca:	468c      	mov	ip, r1
   321cc:	44bc      	add	ip, r7
   321ce:	4463      	add	r3, ip
   321d0:	0021      	movs	r1, r4
   321d2:	0018      	movs	r0, r3
   321d4:	4b56      	ldr	r3, [pc, #344]	; (32330 <_http_client_request+0x320>)
   321d6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   321d8:	495c      	ldr	r1, [pc, #368]	; (3234c <_http_client_request+0x33c>)
   321da:	2334      	movs	r3, #52	; 0x34
   321dc:	2218      	movs	r2, #24
   321de:	4694      	mov	ip, r2
   321e0:	44bc      	add	ip, r7
   321e2:	4463      	add	r3, ip
   321e4:	220b      	movs	r2, #11
   321e6:	0018      	movs	r0, r3
   321e8:	4b51      	ldr	r3, [pc, #324]	; (32330 <_http_client_request+0x320>)
   321ea:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   321ec:	4958      	ldr	r1, [pc, #352]	; (32350 <_http_client_request+0x340>)
   321ee:	2334      	movs	r3, #52	; 0x34
   321f0:	2218      	movs	r2, #24
   321f2:	4694      	mov	ip, r2
   321f4:	44bc      	add	ip, r7
   321f6:	4463      	add	r3, ip
   321f8:	220c      	movs	r2, #12
   321fa:	0018      	movs	r0, r3
   321fc:	4b4c      	ldr	r3, [pc, #304]	; (32330 <_http_client_request+0x320>)
   321fe:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   32200:	69fb      	ldr	r3, [r7, #28]
   32202:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   32204:	69fb      	ldr	r3, [r7, #28]
   32206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   32208:	0018      	movs	r0, r3
   3220a:	4b4f      	ldr	r3, [pc, #316]	; (32348 <_http_client_request+0x338>)
   3220c:	4798      	blx	r3
   3220e:	0002      	movs	r2, r0
   32210:	2334      	movs	r3, #52	; 0x34
   32212:	2118      	movs	r1, #24
   32214:	468c      	mov	ip, r1
   32216:	44bc      	add	ip, r7
   32218:	4463      	add	r3, ip
   3221a:	0021      	movs	r1, r4
   3221c:	0018      	movs	r0, r3
   3221e:	4b44      	ldr	r3, [pc, #272]	; (32330 <_http_client_request+0x320>)
   32220:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   32222:	494c      	ldr	r1, [pc, #304]	; (32354 <_http_client_request+0x344>)
   32224:	2334      	movs	r3, #52	; 0x34
   32226:	2218      	movs	r2, #24
   32228:	4694      	mov	ip, r2
   3222a:	44bc      	add	ip, r7
   3222c:	4463      	add	r3, ip
   3222e:	2202      	movs	r2, #2
   32230:	0018      	movs	r0, r3
   32232:	4b3f      	ldr	r3, [pc, #252]	; (32330 <_http_client_request+0x320>)
   32234:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   32236:	4948      	ldr	r1, [pc, #288]	; (32358 <_http_client_request+0x348>)
   32238:	2334      	movs	r3, #52	; 0x34
   3223a:	2218      	movs	r2, #24
   3223c:	4694      	mov	ip, r2
   3223e:	44bc      	add	ip, r7
   32240:	4463      	add	r3, ip
   32242:	2206      	movs	r2, #6
   32244:	0018      	movs	r0, r3
   32246:	4b3a      	ldr	r3, [pc, #232]	; (32330 <_http_client_request+0x320>)
   32248:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   3224a:	69fb      	ldr	r3, [r7, #28]
   3224c:	1c5c      	adds	r4, r3, #1
   3224e:	69fb      	ldr	r3, [r7, #28]
   32250:	3301      	adds	r3, #1
   32252:	0018      	movs	r0, r3
   32254:	4b3c      	ldr	r3, [pc, #240]	; (32348 <_http_client_request+0x338>)
   32256:	4798      	blx	r3
   32258:	0002      	movs	r2, r0
   3225a:	2334      	movs	r3, #52	; 0x34
   3225c:	2118      	movs	r1, #24
   3225e:	468c      	mov	ip, r1
   32260:	44bc      	add	ip, r7
   32262:	4463      	add	r3, ip
   32264:	0021      	movs	r1, r4
   32266:	0018      	movs	r0, r3
   32268:	4b31      	ldr	r3, [pc, #196]	; (32330 <_http_client_request+0x320>)
   3226a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3226c:	4939      	ldr	r1, [pc, #228]	; (32354 <_http_client_request+0x344>)
   3226e:	2334      	movs	r3, #52	; 0x34
   32270:	2218      	movs	r2, #24
   32272:	4694      	mov	ip, r2
   32274:	44bc      	add	ip, r7
   32276:	4463      	add	r3, ip
   32278:	2202      	movs	r2, #2
   3227a:	0018      	movs	r0, r3
   3227c:	4b2c      	ldr	r3, [pc, #176]	; (32330 <_http_client_request+0x320>)
   3227e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   32280:	4936      	ldr	r1, [pc, #216]	; (3235c <_http_client_request+0x34c>)
   32282:	2334      	movs	r3, #52	; 0x34
   32284:	2218      	movs	r2, #24
   32286:	4694      	mov	ip, r2
   32288:	44bc      	add	ip, r7
   3228a:	4463      	add	r3, ip
   3228c:	2218      	movs	r2, #24
   3228e:	0018      	movs	r0, r3
   32290:	4b27      	ldr	r3, [pc, #156]	; (32330 <_http_client_request+0x320>)
   32292:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   32294:	4932      	ldr	r1, [pc, #200]	; (32360 <_http_client_request+0x350>)
   32296:	2334      	movs	r3, #52	; 0x34
   32298:	2218      	movs	r2, #24
   3229a:	4694      	mov	ip, r2
   3229c:	44bc      	add	ip, r7
   3229e:	4463      	add	r3, ip
   322a0:	2213      	movs	r2, #19
   322a2:	0018      	movs	r0, r3
   322a4:	4b22      	ldr	r3, [pc, #136]	; (32330 <_http_client_request+0x320>)
   322a6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   322a8:	492e      	ldr	r1, [pc, #184]	; (32364 <_http_client_request+0x354>)
   322aa:	2334      	movs	r3, #52	; 0x34
   322ac:	2218      	movs	r2, #24
   322ae:	4694      	mov	ip, r2
   322b0:	44bc      	add	ip, r7
   322b2:	4463      	add	r3, ip
   322b4:	2217      	movs	r2, #23
   322b6:	0018      	movs	r0, r3
   322b8:	4b1d      	ldr	r3, [pc, #116]	; (32330 <_http_client_request+0x320>)
   322ba:	4798      	blx	r3
		if (entity->read != NULL) {
   322bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   322be:	68db      	ldr	r3, [r3, #12]
   322c0:	2b00      	cmp	r3, #0
   322c2:	d100      	bne.n	322c6 <_http_client_request+0x2b6>
   322c4:	e088      	b.n	323d8 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   322c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   322c8:	781b      	ldrb	r3, [r3, #0]
   322ca:	2b00      	cmp	r3, #0
   322cc:	d00f      	beq.n	322ee <_http_client_request+0x2de>
				module->req.content_length = -1;
   322ce:	69fb      	ldr	r3, [r7, #28]
   322d0:	21cc      	movs	r1, #204	; 0xcc
   322d2:	2201      	movs	r2, #1
   322d4:	4252      	negs	r2, r2
   322d6:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   322d8:	4923      	ldr	r1, [pc, #140]	; (32368 <_http_client_request+0x358>)
   322da:	2334      	movs	r3, #52	; 0x34
   322dc:	2218      	movs	r2, #24
   322de:	4694      	mov	ip, r2
   322e0:	44bc      	add	ip, r7
   322e2:	4463      	add	r3, ip
   322e4:	221c      	movs	r2, #28
   322e6:	0018      	movs	r0, r3
   322e8:	4b11      	ldr	r3, [pc, #68]	; (32330 <_http_client_request+0x320>)
   322ea:	4798      	blx	r3
   322ec:	e074      	b.n	323d8 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   322ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   322f0:	689b      	ldr	r3, [r3, #8]
   322f2:	2b00      	cmp	r3, #0
   322f4:	d070      	beq.n	323d8 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   322f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   322f8:	689a      	ldr	r2, [r3, #8]
   322fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   322fc:	695b      	ldr	r3, [r3, #20]
   322fe:	0018      	movs	r0, r3
   32300:	4790      	blx	r2
   32302:	0001      	movs	r1, r0
   32304:	69fb      	ldr	r3, [r7, #28]
   32306:	22cc      	movs	r2, #204	; 0xcc
   32308:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   3230a:	69fb      	ldr	r3, [r7, #28]
   3230c:	22cc      	movs	r2, #204	; 0xcc
   3230e:	589b      	ldr	r3, [r3, r2]
   32310:	2b00      	cmp	r3, #0
   32312:	da2b      	bge.n	3236c <_http_client_request+0x35c>
					module->req.content_length = 0;
   32314:	69fb      	ldr	r3, [r7, #28]
   32316:	22cc      	movs	r2, #204	; 0xcc
   32318:	2100      	movs	r1, #0
   3231a:	5099      	str	r1, [r3, r2]
   3231c:	e05c      	b.n	323d8 <_http_client_request+0x3c8>
   3231e:	46c0      	nop			; (mov r8, r8)
   32320:	0003acec 	.word	0x0003acec
   32324:	00031f89 	.word	0x00031f89
   32328:	00032ef1 	.word	0x00032ef1
   3232c:	0003ac10 	.word	0x0003ac10
   32330:	00032f71 	.word	0x00032f71
   32334:	0003ac18 	.word	0x0003ac18
   32338:	0003ac20 	.word	0x0003ac20
   3233c:	0003ac28 	.word	0x0003ac28
   32340:	0003ac30 	.word	0x0003ac30
   32344:	0003ac3c 	.word	0x0003ac3c
   32348:	000359c7 	.word	0x000359c7
   3234c:	0003ac44 	.word	0x0003ac44
   32350:	0003ac50 	.word	0x0003ac50
   32354:	0003ac60 	.word	0x0003ac60
   32358:	0003ac64 	.word	0x0003ac64
   3235c:	0003ac6c 	.word	0x0003ac6c
   32360:	0003ac88 	.word	0x0003ac88
   32364:	0003ac9c 	.word	0x0003ac9c
   32368:	0003acb4 	.word	0x0003acb4
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   3236c:	69fb      	ldr	r3, [r7, #28]
   3236e:	22cc      	movs	r2, #204	; 0xcc
   32370:	589b      	ldr	r3, [r3, r2]
   32372:	001a      	movs	r2, r3
   32374:	49e0      	ldr	r1, [pc, #896]	; (326f8 <_http_client_request+0x6e8>)
   32376:	2328      	movs	r3, #40	; 0x28
   32378:	2018      	movs	r0, #24
   3237a:	4684      	mov	ip, r0
   3237c:	44bc      	add	ip, r7
   3237e:	4463      	add	r3, ip
   32380:	0018      	movs	r0, r3
   32382:	4bde      	ldr	r3, [pc, #888]	; (326fc <_http_client_request+0x6ec>)
   32384:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   32386:	49de      	ldr	r1, [pc, #888]	; (32700 <_http_client_request+0x6f0>)
   32388:	2334      	movs	r3, #52	; 0x34
   3238a:	2218      	movs	r2, #24
   3238c:	4694      	mov	ip, r2
   3238e:	44bc      	add	ip, r7
   32390:	4463      	add	r3, ip
   32392:	2210      	movs	r2, #16
   32394:	0018      	movs	r0, r3
   32396:	4bdb      	ldr	r3, [pc, #876]	; (32704 <_http_client_request+0x6f4>)
   32398:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   3239a:	2328      	movs	r3, #40	; 0x28
   3239c:	2218      	movs	r2, #24
   3239e:	4694      	mov	ip, r2
   323a0:	44bc      	add	ip, r7
   323a2:	4463      	add	r3, ip
   323a4:	0018      	movs	r0, r3
   323a6:	4bd8      	ldr	r3, [pc, #864]	; (32708 <_http_client_request+0x6f8>)
   323a8:	4798      	blx	r3
   323aa:	0002      	movs	r2, r0
   323ac:	2328      	movs	r3, #40	; 0x28
   323ae:	2118      	movs	r1, #24
   323b0:	1879      	adds	r1, r7, r1
   323b2:	18c9      	adds	r1, r1, r3
   323b4:	2334      	movs	r3, #52	; 0x34
   323b6:	2018      	movs	r0, #24
   323b8:	4684      	mov	ip, r0
   323ba:	44bc      	add	ip, r7
   323bc:	4463      	add	r3, ip
   323be:	0018      	movs	r0, r3
   323c0:	4bd0      	ldr	r3, [pc, #832]	; (32704 <_http_client_request+0x6f4>)
   323c2:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   323c4:	49d1      	ldr	r1, [pc, #836]	; (3270c <_http_client_request+0x6fc>)
   323c6:	2334      	movs	r3, #52	; 0x34
   323c8:	2218      	movs	r2, #24
   323ca:	4694      	mov	ip, r2
   323cc:	44bc      	add	ip, r7
   323ce:	4463      	add	r3, ip
   323d0:	2202      	movs	r2, #2
   323d2:	0018      	movs	r0, r3
   323d4:	4bcb      	ldr	r3, [pc, #812]	; (32704 <_http_client_request+0x6f4>)
   323d6:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   323d8:	69fb      	ldr	r3, [r7, #28]
   323da:	22d4      	movs	r2, #212	; 0xd4
   323dc:	589b      	ldr	r3, [r3, r2]
   323de:	2b00      	cmp	r3, #0
   323e0:	d012      	beq.n	32408 <_http_client_request+0x3f8>
				module->req.ext_header,
   323e2:	69fb      	ldr	r3, [r7, #28]
   323e4:	22d4      	movs	r2, #212	; 0xd4
   323e6:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   323e8:	69fb      	ldr	r3, [r7, #28]
   323ea:	22d4      	movs	r2, #212	; 0xd4
   323ec:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   323ee:	0018      	movs	r0, r3
   323f0:	4bc5      	ldr	r3, [pc, #788]	; (32708 <_http_client_request+0x6f8>)
   323f2:	4798      	blx	r3
   323f4:	0002      	movs	r2, r0
   323f6:	2334      	movs	r3, #52	; 0x34
   323f8:	2118      	movs	r1, #24
   323fa:	468c      	mov	ip, r1
   323fc:	44bc      	add	ip, r7
   323fe:	4463      	add	r3, ip
   32400:	0021      	movs	r1, r4
   32402:	0018      	movs	r0, r3
   32404:	4bbf      	ldr	r3, [pc, #764]	; (32704 <_http_client_request+0x6f4>)
   32406:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   32408:	49c0      	ldr	r1, [pc, #768]	; (3270c <_http_client_request+0x6fc>)
   3240a:	2334      	movs	r3, #52	; 0x34
   3240c:	2218      	movs	r2, #24
   3240e:	4694      	mov	ip, r2
   32410:	44bc      	add	ip, r7
   32412:	4463      	add	r3, ip
   32414:	2202      	movs	r2, #2
   32416:	0018      	movs	r0, r3
   32418:	4bba      	ldr	r3, [pc, #744]	; (32704 <_http_client_request+0x6f4>)
   3241a:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   3241c:	2334      	movs	r3, #52	; 0x34
   3241e:	2218      	movs	r2, #24
   32420:	4694      	mov	ip, r2
   32422:	44bc      	add	ip, r7
   32424:	4463      	add	r3, ip
   32426:	0018      	movs	r0, r3
   32428:	4bb9      	ldr	r3, [pc, #740]	; (32710 <_http_client_request+0x700>)
   3242a:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   3242c:	69fb      	ldr	r3, [r7, #28]
   3242e:	2204      	movs	r2, #4
   32430:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   32432:	69fb      	ldr	r3, [r7, #28]
   32434:	22cc      	movs	r2, #204	; 0xcc
   32436:	589b      	ldr	r3, [r3, r2]
   32438:	2b00      	cmp	r3, #0
   3243a:	db00      	blt.n	3243e <_http_client_request+0x42e>
   3243c:	e0c6      	b.n	325cc <_http_client_request+0x5bc>
   3243e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32440:	68db      	ldr	r3, [r3, #12]
   32442:	2b00      	cmp	r3, #0
   32444:	d100      	bne.n	32448 <_http_client_request+0x438>
   32446:	e0c1      	b.n	325cc <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3244a:	68dc      	ldr	r4, [r3, #12]
   3244c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3244e:	6958      	ldr	r0, [r3, #20]
   32450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32452:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   32454:	69fb      	ldr	r3, [r7, #28]
   32456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32458:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   3245a:	69fb      	ldr	r3, [r7, #28]
   3245c:	22d0      	movs	r2, #208	; 0xd0
   3245e:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32460:	002a      	movs	r2, r5
   32462:	47a0      	blx	r4
   32464:	0003      	movs	r3, r0
   32466:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   32468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3246a:	2b00      	cmp	r3, #0
   3246c:	da01      	bge.n	32472 <_http_client_request+0x462>
				size = 0;
   3246e:	2300      	movs	r3, #0
   32470:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   32472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32474:	220a      	movs	r2, #10
   32476:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   32478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3247a:	220d      	movs	r2, #13
   3247c:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   3247e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32480:	3305      	adds	r3, #5
   32482:	6eba      	ldr	r2, [r7, #104]	; 0x68
   32484:	210d      	movs	r1, #13
   32486:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   32488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3248a:	3306      	adds	r3, #6
   3248c:	6eba      	ldr	r2, [r7, #104]	; 0x68
   3248e:	210a      	movs	r1, #10
   32490:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   32492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32494:	2b00      	cmp	r3, #0
   32496:	db14      	blt.n	324c2 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   32498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3249a:	3302      	adds	r3, #2
   3249c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   3249e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   324a0:	4a9c      	ldr	r2, [pc, #624]	; (32714 <_http_client_request+0x704>)
   324a2:	4013      	ands	r3, r2
   324a4:	d504      	bpl.n	324b0 <_http_client_request+0x4a0>
   324a6:	3b01      	subs	r3, #1
   324a8:	2210      	movs	r2, #16
   324aa:	4252      	negs	r2, r2
   324ac:	4313      	orrs	r3, r2
   324ae:	3301      	adds	r3, #1
   324b0:	001a      	movs	r2, r3
   324b2:	2318      	movs	r3, #24
   324b4:	2118      	movs	r1, #24
   324b6:	468c      	mov	ip, r1
   324b8:	44bc      	add	ip, r7
   324ba:	4463      	add	r3, ip
   324bc:	5c9a      	ldrb	r2, [r3, r2]
   324be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   324c0:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   324c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   324c4:	2b0f      	cmp	r3, #15
   324c6:	dd19      	ble.n	324fc <_http_client_request+0x4ec>
				ptr = buffer + 1;
   324c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   324ca:	3301      	adds	r3, #1
   324cc:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   324ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   324d0:	2b00      	cmp	r3, #0
   324d2:	da00      	bge.n	324d6 <_http_client_request+0x4c6>
   324d4:	330f      	adds	r3, #15
   324d6:	111b      	asrs	r3, r3, #4
   324d8:	001a      	movs	r2, r3
   324da:	4b8e      	ldr	r3, [pc, #568]	; (32714 <_http_client_request+0x704>)
   324dc:	4013      	ands	r3, r2
   324de:	d504      	bpl.n	324ea <_http_client_request+0x4da>
   324e0:	3b01      	subs	r3, #1
   324e2:	2210      	movs	r2, #16
   324e4:	4252      	negs	r2, r2
   324e6:	4313      	orrs	r3, r2
   324e8:	3301      	adds	r3, #1
   324ea:	001a      	movs	r2, r3
   324ec:	2318      	movs	r3, #24
   324ee:	2118      	movs	r1, #24
   324f0:	468c      	mov	ip, r1
   324f2:	44bc      	add	ip, r7
   324f4:	4463      	add	r3, ip
   324f6:	5c9a      	ldrb	r2, [r3, r2]
   324f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   324fa:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   324fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   324fe:	2bff      	cmp	r3, #255	; 0xff
   32500:	dd18      	ble.n	32534 <_http_client_request+0x524>
				ptr = buffer;
   32502:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32504:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   32506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32508:	2b00      	cmp	r3, #0
   3250a:	da00      	bge.n	3250e <_http_client_request+0x4fe>
   3250c:	33ff      	adds	r3, #255	; 0xff
   3250e:	121b      	asrs	r3, r3, #8
   32510:	001a      	movs	r2, r3
   32512:	4b80      	ldr	r3, [pc, #512]	; (32714 <_http_client_request+0x704>)
   32514:	4013      	ands	r3, r2
   32516:	d504      	bpl.n	32522 <_http_client_request+0x512>
   32518:	3b01      	subs	r3, #1
   3251a:	2210      	movs	r2, #16
   3251c:	4252      	negs	r2, r2
   3251e:	4313      	orrs	r3, r2
   32520:	3301      	adds	r3, #1
   32522:	001a      	movs	r2, r3
   32524:	2318      	movs	r3, #24
   32526:	2118      	movs	r1, #24
   32528:	468c      	mov	ip, r1
   3252a:	44bc      	add	ip, r7
   3252c:	4463      	add	r3, ip
   3252e:	5c9a      	ldrb	r2, [r3, r2]
   32530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32532:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   32534:	69fb      	ldr	r3, [r7, #28]
   32536:	2000      	movs	r0, #0
   32538:	5618      	ldrsb	r0, [r3, r0]
   3253a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3253c:	3303      	adds	r3, #3
   3253e:	001a      	movs	r2, r3
   32540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32542:	1ad3      	subs	r3, r2, r3
   32544:	b29a      	uxth	r2, r3
   32546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32548:	b29b      	uxth	r3, r3
   3254a:	18d3      	adds	r3, r2, r3
   3254c:	b29b      	uxth	r3, r3
   3254e:	3304      	adds	r3, #4
   32550:	b29a      	uxth	r2, r3
   32552:	6f39      	ldr	r1, [r7, #112]	; 0x70
   32554:	2300      	movs	r3, #0
   32556:	4c70      	ldr	r4, [pc, #448]	; (32718 <_http_client_request+0x708>)
   32558:	47a0      	blx	r4
   3255a:	0003      	movs	r3, r0
   3255c:	663b      	str	r3, [r7, #96]	; 0x60
   3255e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   32560:	2b00      	cmp	r3, #0
   32562:	da07      	bge.n	32574 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   32564:	2305      	movs	r3, #5
   32566:	425a      	negs	r2, r3
   32568:	69fb      	ldr	r3, [r7, #28]
   3256a:	0011      	movs	r1, r2
   3256c:	0018      	movs	r0, r3
   3256e:	4b6b      	ldr	r3, [pc, #428]	; (3271c <_http_client_request+0x70c>)
   32570:	4798      	blx	r3
				return;
   32572:	e0e1      	b.n	32738 <_http_client_request+0x728>
			module->req.sent_length += size;
   32574:	69fb      	ldr	r3, [r7, #28]
   32576:	22d0      	movs	r2, #208	; 0xd0
   32578:	589a      	ldr	r2, [r3, r2]
   3257a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3257c:	18d2      	adds	r2, r2, r3
   3257e:	69fb      	ldr	r3, [r7, #28]
   32580:	21d0      	movs	r1, #208	; 0xd0
   32582:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   32584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32586:	2b00      	cmp	r3, #0
   32588:	d000      	beq.n	3258c <_http_client_request+0x57c>
   3258a:	e0c9      	b.n	32720 <_http_client_request+0x710>
				if (module->req.entity.close) {
   3258c:	69fb      	ldr	r3, [r7, #28]
   3258e:	22c0      	movs	r2, #192	; 0xc0
   32590:	589b      	ldr	r3, [r3, r2]
   32592:	2b00      	cmp	r3, #0
   32594:	d007      	beq.n	325a6 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   32596:	69fb      	ldr	r3, [r7, #28]
   32598:	22c0      	movs	r2, #192	; 0xc0
   3259a:	589b      	ldr	r3, [r3, r2]
   3259c:	69fa      	ldr	r2, [r7, #28]
   3259e:	21c4      	movs	r1, #196	; 0xc4
   325a0:	5852      	ldr	r2, [r2, r1]
   325a2:	0010      	movs	r0, r2
   325a4:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   325a6:	69fb      	ldr	r3, [r7, #28]
   325a8:	2202      	movs	r2, #2
   325aa:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   325ac:	69fb      	ldr	r3, [r7, #28]
   325ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   325b0:	2b00      	cmp	r3, #0
   325b2:	d100      	bne.n	325b6 <_http_client_request+0x5a6>
   325b4:	e0b5      	b.n	32722 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   325b6:	69fb      	ldr	r3, [r7, #28]
   325b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   325ba:	220c      	movs	r2, #12
   325bc:	2118      	movs	r1, #24
   325be:	468c      	mov	ip, r1
   325c0:	44bc      	add	ip, r7
   325c2:	4462      	add	r2, ip
   325c4:	69f8      	ldr	r0, [r7, #28]
   325c6:	2101      	movs	r1, #1
   325c8:	4798      	blx	r3
				break;
   325ca:	e0aa      	b.n	32722 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   325cc:	69fb      	ldr	r3, [r7, #28]
   325ce:	22cc      	movs	r2, #204	; 0xcc
   325d0:	589b      	ldr	r3, [r3, r2]
   325d2:	2b00      	cmp	r3, #0
   325d4:	dc00      	bgt.n	325d8 <_http_client_request+0x5c8>
   325d6:	e07c      	b.n	326d2 <_http_client_request+0x6c2>
   325d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   325da:	68db      	ldr	r3, [r3, #12]
   325dc:	2b00      	cmp	r3, #0
   325de:	d100      	bne.n	325e2 <_http_client_request+0x5d2>
   325e0:	e077      	b.n	326d2 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   325e2:	69fb      	ldr	r3, [r7, #28]
   325e4:	22d0      	movs	r2, #208	; 0xd0
   325e6:	589a      	ldr	r2, [r3, r2]
   325e8:	69fb      	ldr	r3, [r7, #28]
   325ea:	21cc      	movs	r1, #204	; 0xcc
   325ec:	585b      	ldr	r3, [r3, r1]
   325ee:	429a      	cmp	r2, r3
   325f0:	db1f      	blt.n	32632 <_http_client_request+0x622>
				if (module->req.entity.close) {
   325f2:	69fb      	ldr	r3, [r7, #28]
   325f4:	22c0      	movs	r2, #192	; 0xc0
   325f6:	589b      	ldr	r3, [r3, r2]
   325f8:	2b00      	cmp	r3, #0
   325fa:	d007      	beq.n	3260c <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   325fc:	69fb      	ldr	r3, [r7, #28]
   325fe:	22c0      	movs	r2, #192	; 0xc0
   32600:	589b      	ldr	r3, [r3, r2]
   32602:	69fa      	ldr	r2, [r7, #28]
   32604:	21c4      	movs	r1, #196	; 0xc4
   32606:	5852      	ldr	r2, [r2, r1]
   32608:	0010      	movs	r0, r2
   3260a:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   3260c:	69fb      	ldr	r3, [r7, #28]
   3260e:	2202      	movs	r2, #2
   32610:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   32612:	69fb      	ldr	r3, [r7, #28]
   32614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32616:	2b00      	cmp	r3, #0
   32618:	d100      	bne.n	3261c <_http_client_request+0x60c>
   3261a:	e084      	b.n	32726 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   3261c:	69fb      	ldr	r3, [r7, #28]
   3261e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32620:	220c      	movs	r2, #12
   32622:	2118      	movs	r1, #24
   32624:	468c      	mov	ip, r1
   32626:	44bc      	add	ip, r7
   32628:	4462      	add	r2, ip
   3262a:	69f8      	ldr	r0, [r7, #28]
   3262c:	2101      	movs	r1, #1
   3262e:	4798      	blx	r3
				break;
   32630:	e079      	b.n	32726 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   32632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32634:	68dc      	ldr	r4, [r3, #12]
   32636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32638:	6958      	ldr	r0, [r3, #20]
   3263a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3263c:	69fb      	ldr	r3, [r7, #28]
   3263e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   32640:	69fb      	ldr	r3, [r7, #28]
   32642:	22d0      	movs	r2, #208	; 0xd0
   32644:	589b      	ldr	r3, [r3, r2]
   32646:	002a      	movs	r2, r5
   32648:	47a0      	blx	r4
   3264a:	0003      	movs	r3, r0
   3264c:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   3264e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32650:	2b00      	cmp	r3, #0
   32652:	da0d      	bge.n	32670 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   32654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32656:	2b00      	cmp	r3, #0
   32658:	d102      	bne.n	32660 <_http_client_request+0x650>
   3265a:	234d      	movs	r3, #77	; 0x4d
   3265c:	425b      	negs	r3, r3
   3265e:	e001      	b.n	32664 <_http_client_request+0x654>
   32660:	2305      	movs	r3, #5
   32662:	425b      	negs	r3, r3
   32664:	69fa      	ldr	r2, [r7, #28]
   32666:	0019      	movs	r1, r3
   32668:	0010      	movs	r0, r2
   3266a:	4b2c      	ldr	r3, [pc, #176]	; (3271c <_http_client_request+0x70c>)
   3266c:	4798      	blx	r3
			if (size < 0) {
   3266e:	e057      	b.n	32720 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   32670:	69fb      	ldr	r3, [r7, #28]
   32672:	22cc      	movs	r2, #204	; 0xcc
   32674:	589a      	ldr	r2, [r3, r2]
   32676:	69fb      	ldr	r3, [r7, #28]
   32678:	21d0      	movs	r1, #208	; 0xd0
   3267a:	585b      	ldr	r3, [r3, r1]
   3267c:	1ad2      	subs	r2, r2, r3
   3267e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32680:	429a      	cmp	r2, r3
   32682:	da07      	bge.n	32694 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   32684:	69fb      	ldr	r3, [r7, #28]
   32686:	22cc      	movs	r2, #204	; 0xcc
   32688:	589a      	ldr	r2, [r3, r2]
   3268a:	69fb      	ldr	r3, [r7, #28]
   3268c:	21d0      	movs	r1, #208	; 0xd0
   3268e:	585b      	ldr	r3, [r3, r1]
   32690:	1ad3      	subs	r3, r2, r3
   32692:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   32694:	69fb      	ldr	r3, [r7, #28]
   32696:	2000      	movs	r0, #0
   32698:	5618      	ldrsb	r0, [r3, r0]
   3269a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3269c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3269e:	b29a      	uxth	r2, r3
   326a0:	2300      	movs	r3, #0
   326a2:	4c1d      	ldr	r4, [pc, #116]	; (32718 <_http_client_request+0x708>)
   326a4:	47a0      	blx	r4
   326a6:	0003      	movs	r3, r0
   326a8:	663b      	str	r3, [r7, #96]	; 0x60
   326aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   326ac:	2b00      	cmp	r3, #0
   326ae:	da07      	bge.n	326c0 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   326b0:	2305      	movs	r3, #5
   326b2:	425a      	negs	r2, r3
   326b4:	69fb      	ldr	r3, [r7, #28]
   326b6:	0011      	movs	r1, r2
   326b8:	0018      	movs	r0, r3
   326ba:	4b18      	ldr	r3, [pc, #96]	; (3271c <_http_client_request+0x70c>)
   326bc:	4798      	blx	r3
					return;
   326be:	e03b      	b.n	32738 <_http_client_request+0x728>
				module->req.sent_length += size;
   326c0:	69fb      	ldr	r3, [r7, #28]
   326c2:	22d0      	movs	r2, #208	; 0xd0
   326c4:	589a      	ldr	r2, [r3, r2]
   326c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   326c8:	18d2      	adds	r2, r2, r3
   326ca:	69fb      	ldr	r3, [r7, #28]
   326cc:	21d0      	movs	r1, #208	; 0xd0
   326ce:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   326d0:	e026      	b.n	32720 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   326d2:	69fb      	ldr	r3, [r7, #28]
   326d4:	2202      	movs	r2, #2
   326d6:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   326d8:	69fb      	ldr	r3, [r7, #28]
   326da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   326dc:	2b00      	cmp	r3, #0
   326de:	d024      	beq.n	3272a <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   326e0:	69fb      	ldr	r3, [r7, #28]
   326e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   326e4:	220c      	movs	r2, #12
   326e6:	2118      	movs	r1, #24
   326e8:	468c      	mov	ip, r1
   326ea:	44bc      	add	ip, r7
   326ec:	4462      	add	r2, ip
   326ee:	69f8      	ldr	r0, [r7, #28]
   326f0:	2101      	movs	r1, #1
   326f2:	4798      	blx	r3
			break;
   326f4:	e019      	b.n	3272a <_http_client_request+0x71a>
   326f6:	46c0      	nop			; (mov r8, r8)
   326f8:	0003acd4 	.word	0x0003acd4
   326fc:	000358cd 	.word	0x000358cd
   32700:	0003acd8 	.word	0x0003acd8
   32704:	00032f71 	.word	0x00032f71
   32708:	000359c7 	.word	0x000359c7
   3270c:	0003ac60 	.word	0x0003ac60
   32710:	00032fad 	.word	0x00032fad
   32714:	8000000f 	.word	0x8000000f
   32718:	000263c9 	.word	0x000263c9
   3271c:	00031ebd 	.word	0x00031ebd
		break;
   32720:	e004      	b.n	3272c <_http_client_request+0x71c>
				break;
   32722:	46c0      	nop			; (mov r8, r8)
   32724:	e002      	b.n	3272c <_http_client_request+0x71c>
				break;
   32726:	46c0      	nop			; (mov r8, r8)
   32728:	e000      	b.n	3272c <_http_client_request+0x71c>
			break;
   3272a:	46c0      	nop			; (mov r8, r8)
   3272c:	69bb      	ldr	r3, [r7, #24]
   3272e:	469d      	mov	sp, r3
   32730:	e004      	b.n	3273c <_http_client_request+0x72c>
		return;
   32732:	46c0      	nop			; (mov r8, r8)
   32734:	e000      	b.n	32738 <_http_client_request+0x728>
		return;
   32736:	46c0      	nop			; (mov r8, r8)
   32738:	69bb      	ldr	r3, [r7, #24]
   3273a:	469d      	mov	sp, r3
	}
}
   3273c:	46bd      	mov	sp, r7
   3273e:	b01e      	add	sp, #120	; 0x78
   32740:	bc04      	pop	{r2}
   32742:	4690      	mov	r8, r2
   32744:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32746:	46c0      	nop			; (mov r8, r8)

00032748 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   32748:	b590      	push	{r4, r7, lr}
   3274a:	b083      	sub	sp, #12
   3274c:	af00      	add	r7, sp, #0
   3274e:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   32750:	687b      	ldr	r3, [r7, #4]
   32752:	2b00      	cmp	r3, #0
   32754:	d021      	beq.n	3279a <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   32756:	687b      	ldr	r3, [r7, #4]
   32758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3275a:	687b      	ldr	r3, [r7, #4]
   3275c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3275e:	429a      	cmp	r2, r3
   32760:	d307      	bcc.n	32772 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   32762:	238b      	movs	r3, #139	; 0x8b
   32764:	425a      	negs	r2, r3
   32766:	687b      	ldr	r3, [r7, #4]
   32768:	0011      	movs	r1, r2
   3276a:	0018      	movs	r0, r3
   3276c:	4b0d      	ldr	r3, [pc, #52]	; (327a4 <_http_client_recv_packet+0x5c>)
   3276e:	4798      	blx	r3
		return;
   32770:	e014      	b.n	3279c <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   32772:	687b      	ldr	r3, [r7, #4]
   32774:	2000      	movs	r0, #0
   32776:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   32778:	687b      	ldr	r3, [r7, #4]
   3277a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3277c:	687b      	ldr	r3, [r7, #4]
   3277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32780:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   32782:	687b      	ldr	r3, [r7, #4]
   32784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   32786:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   32788:	687b      	ldr	r3, [r7, #4]
   3278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   3278c:	b29b      	uxth	r3, r3
   3278e:	1ad3      	subs	r3, r2, r3
   32790:	b29a      	uxth	r2, r3
   32792:	2300      	movs	r3, #0
   32794:	4c04      	ldr	r4, [pc, #16]	; (327a8 <_http_client_recv_packet+0x60>)
   32796:	47a0      	blx	r4
   32798:	e000      	b.n	3279c <_http_client_recv_packet+0x54>
		return;
   3279a:	46c0      	nop			; (mov r8, r8)
}
   3279c:	46bd      	mov	sp, r7
   3279e:	b003      	add	sp, #12
   327a0:	bd90      	pop	{r4, r7, pc}
   327a2:	46c0      	nop			; (mov r8, r8)
   327a4:	00031ebd 	.word	0x00031ebd
   327a8:	0002652d 	.word	0x0002652d

000327ac <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   327ac:	b580      	push	{r7, lr}
   327ae:	b082      	sub	sp, #8
   327b0:	af00      	add	r7, sp, #0
   327b2:	6078      	str	r0, [r7, #4]
   327b4:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   327b6:	687b      	ldr	r3, [r7, #4]
   327b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   327ba:	683b      	ldr	r3, [r7, #0]
   327bc:	18d2      	adds	r2, r2, r3
   327be:	687b      	ldr	r3, [r7, #4]
   327c0:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   327c2:	687b      	ldr	r3, [r7, #4]
   327c4:	2258      	movs	r2, #88	; 0x58
   327c6:	5a9b      	ldrh	r3, [r3, r2]
   327c8:	2b00      	cmp	r3, #0
   327ca:	d007      	beq.n	327dc <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   327cc:	687b      	ldr	r3, [r7, #4]
   327ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   327d0:	687b      	ldr	r3, [r7, #4]
   327d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   327d4:	0019      	movs	r1, r3
   327d6:	0010      	movs	r0, r2
   327d8:	4b06      	ldr	r3, [pc, #24]	; (327f4 <_http_client_recved_packet+0x48>)
   327da:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   327dc:	46c0      	nop			; (mov r8, r8)
   327de:	687b      	ldr	r3, [r7, #4]
   327e0:	0018      	movs	r0, r3
   327e2:	4b05      	ldr	r3, [pc, #20]	; (327f8 <_http_client_recved_packet+0x4c>)
   327e4:	4798      	blx	r3
   327e6:	1e03      	subs	r3, r0, #0
   327e8:	d1f9      	bne.n	327de <_http_client_recved_packet+0x32>
}
   327ea:	46c0      	nop			; (mov r8, r8)
   327ec:	46bd      	mov	sp, r7
   327ee:	b002      	add	sp, #8
   327f0:	bd80      	pop	{r7, pc}
   327f2:	46c0      	nop			; (mov r8, r8)
   327f4:	00033269 	.word	0x00033269
   327f8:	000327fd 	.word	0x000327fd

000327fc <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   327fc:	b580      	push	{r7, lr}
   327fe:	b082      	sub	sp, #8
   32800:	af00      	add	r7, sp, #0
   32802:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   32804:	687b      	ldr	r3, [r7, #4]
   32806:	22d8      	movs	r2, #216	; 0xd8
   32808:	589b      	ldr	r3, [r3, r2]
   3280a:	2b00      	cmp	r3, #0
   3280c:	d002      	beq.n	32814 <_http_client_handle_response+0x18>
   3280e:	2b01      	cmp	r3, #1
   32810:	d006      	beq.n	32820 <_http_client_handle_response+0x24>
   32812:	e00b      	b.n	3282c <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   32814:	687b      	ldr	r3, [r7, #4]
   32816:	0018      	movs	r0, r3
   32818:	4b07      	ldr	r3, [pc, #28]	; (32838 <_http_client_handle_response+0x3c>)
   3281a:	4798      	blx	r3
   3281c:	0003      	movs	r3, r0
   3281e:	e006      	b.n	3282e <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   32820:	687b      	ldr	r3, [r7, #4]
   32822:	0018      	movs	r0, r3
   32824:	4b05      	ldr	r3, [pc, #20]	; (3283c <_http_client_handle_response+0x40>)
   32826:	4798      	blx	r3
   32828:	0003      	movs	r3, r0
   3282a:	e000      	b.n	3282e <_http_client_handle_response+0x32>
	}
	return 0;
   3282c:	2300      	movs	r3, #0
}
   3282e:	0018      	movs	r0, r3
   32830:	46bd      	mov	sp, r7
   32832:	b002      	add	sp, #8
   32834:	bd80      	pop	{r7, pc}
   32836:	46c0      	nop			; (mov r8, r8)
   32838:	00032841 	.word	0x00032841
   3283c:	00032cf9 	.word	0x00032cf9

00032840 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   32840:	b590      	push	{r4, r7, lr}
   32842:	b08b      	sub	sp, #44	; 0x2c
   32844:	af00      	add	r7, sp, #0
   32846:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   32848:	687b      	ldr	r3, [r7, #4]
   3284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3284c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   3284e:	4b9a      	ldr	r3, [pc, #616]	; (32ab8 <_http_client_handle_header+0x278>)
   32850:	681a      	ldr	r2, [r3, #0]
   32852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32854:	0011      	movs	r1, r2
   32856:	0018      	movs	r0, r3
   32858:	4b98      	ldr	r3, [pc, #608]	; (32abc <_http_client_handle_header+0x27c>)
   3285a:	4798      	blx	r3
   3285c:	0003      	movs	r3, r0
   3285e:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   32860:	69bb      	ldr	r3, [r7, #24]
   32862:	2b00      	cmp	r3, #0
   32864:	d007      	beq.n	32876 <_http_client_handle_header+0x36>
   32866:	687b      	ldr	r3, [r7, #4]
   32868:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3286a:	687b      	ldr	r3, [r7, #4]
   3286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3286e:	18d2      	adds	r2, r2, r3
   32870:	69bb      	ldr	r3, [r7, #24]
   32872:	429a      	cmp	r2, r3
   32874:	d807      	bhi.n	32886 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   32876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32878:	687b      	ldr	r3, [r7, #4]
   3287a:	0011      	movs	r1, r2
   3287c:	0018      	movs	r0, r3
   3287e:	4b90      	ldr	r3, [pc, #576]	; (32ac0 <_http_client_handle_header+0x280>)
   32880:	4798      	blx	r3
			return 0;
   32882:	2300      	movs	r3, #0
   32884:	e114      	b.n	32ab0 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   32886:	4b8c      	ldr	r3, [pc, #560]	; (32ab8 <_http_client_handle_header+0x278>)
   32888:	681c      	ldr	r4, [r3, #0]
   3288a:	4b8b      	ldr	r3, [pc, #556]	; (32ab8 <_http_client_handle_header+0x278>)
   3288c:	681b      	ldr	r3, [r3, #0]
   3288e:	0018      	movs	r0, r3
   32890:	4b8c      	ldr	r3, [pc, #560]	; (32ac4 <_http_client_handle_header+0x284>)
   32892:	4798      	blx	r3
   32894:	0002      	movs	r2, r0
   32896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32898:	0021      	movs	r1, r4
   3289a:	0018      	movs	r0, r3
   3289c:	4b8a      	ldr	r3, [pc, #552]	; (32ac8 <_http_client_handle_header+0x288>)
   3289e:	4798      	blx	r3
   328a0:	1e03      	subs	r3, r0, #0
   328a2:	d15d      	bne.n	32960 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   328a4:	4b84      	ldr	r3, [pc, #528]	; (32ab8 <_http_client_handle_header+0x278>)
   328a6:	681b      	ldr	r3, [r3, #0]
   328a8:	0018      	movs	r0, r3
   328aa:	4b86      	ldr	r3, [pc, #536]	; (32ac4 <_http_client_handle_header+0x284>)
   328ac:	4798      	blx	r3
   328ae:	0002      	movs	r2, r0
   328b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   328b2:	189a      	adds	r2, r3, r2
   328b4:	687b      	ldr	r3, [r7, #4]
   328b6:	0011      	movs	r1, r2
   328b8:	0018      	movs	r0, r3
   328ba:	4b81      	ldr	r3, [pc, #516]	; (32ac0 <_http_client_handle_header+0x280>)
   328bc:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   328be:	687b      	ldr	r3, [r7, #4]
   328c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   328c2:	2b00      	cmp	r3, #0
   328c4:	d046      	beq.n	32954 <_http_client_handle_header+0x114>
   328c6:	687b      	ldr	r3, [r7, #4]
   328c8:	22e4      	movs	r2, #228	; 0xe4
   328ca:	5a9b      	ldrh	r3, [r3, r2]
   328cc:	2b00      	cmp	r3, #0
   328ce:	d041      	beq.n	32954 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   328d0:	687b      	ldr	r3, [r7, #4]
   328d2:	22dc      	movs	r2, #220	; 0xdc
   328d4:	589b      	ldr	r3, [r3, r2]
   328d6:	2b00      	cmp	r3, #0
   328d8:	da19      	bge.n	3290e <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   328da:	687b      	ldr	r3, [r7, #4]
   328dc:	22e4      	movs	r2, #228	; 0xe4
   328de:	5a9a      	ldrh	r2, [r3, r2]
   328e0:	230c      	movs	r3, #12
   328e2:	18fb      	adds	r3, r7, r3
   328e4:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   328e6:	230c      	movs	r3, #12
   328e8:	18fb      	adds	r3, r7, r3
   328ea:	2201      	movs	r2, #1
   328ec:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   328ee:	687b      	ldr	r3, [r7, #4]
   328f0:	22e0      	movs	r2, #224	; 0xe0
   328f2:	2100      	movs	r1, #0
   328f4:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   328f6:	230c      	movs	r3, #12
   328f8:	18fb      	adds	r3, r7, r3
   328fa:	2200      	movs	r2, #0
   328fc:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   328fe:	687b      	ldr	r3, [r7, #4]
   32900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32902:	220c      	movs	r2, #12
   32904:	18ba      	adds	r2, r7, r2
   32906:	6878      	ldr	r0, [r7, #4]
   32908:	2102      	movs	r1, #2
   3290a:	4798      	blx	r3
   3290c:	e022      	b.n	32954 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   3290e:	687b      	ldr	r3, [r7, #4]
   32910:	22dc      	movs	r2, #220	; 0xdc
   32912:	589a      	ldr	r2, [r3, r2]
   32914:	687b      	ldr	r3, [r7, #4]
   32916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32918:	429a      	cmp	r2, r3
   3291a:	dd1b      	ble.n	32954 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   3291c:	687b      	ldr	r3, [r7, #4]
   3291e:	22e4      	movs	r2, #228	; 0xe4
   32920:	5a9a      	ldrh	r2, [r3, r2]
   32922:	230c      	movs	r3, #12
   32924:	18fb      	adds	r3, r7, r3
   32926:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   32928:	687b      	ldr	r3, [r7, #4]
   3292a:	22dc      	movs	r2, #220	; 0xdc
   3292c:	589b      	ldr	r3, [r3, r2]
   3292e:	001a      	movs	r2, r3
   32930:	230c      	movs	r3, #12
   32932:	18fb      	adds	r3, r7, r3
   32934:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   32936:	230c      	movs	r3, #12
   32938:	18fb      	adds	r3, r7, r3
   3293a:	2200      	movs	r2, #0
   3293c:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   3293e:	687b      	ldr	r3, [r7, #4]
   32940:	22e0      	movs	r2, #224	; 0xe0
   32942:	2100      	movs	r1, #0
   32944:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32946:	687b      	ldr	r3, [r7, #4]
   32948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3294a:	220c      	movs	r2, #12
   3294c:	18ba      	adds	r2, r7, r2
   3294e:	6878      	ldr	r0, [r7, #4]
   32950:	2102      	movs	r1, #2
   32952:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   32954:	687b      	ldr	r3, [r7, #4]
   32956:	22d8      	movs	r2, #216	; 0xd8
   32958:	2101      	movs	r1, #1
   3295a:	5099      	str	r1, [r3, r2]
			return 1;
   3295c:	2301      	movs	r3, #1
   3295e:	e0a7      	b.n	32ab0 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   32960:	495a      	ldr	r1, [pc, #360]	; (32acc <_http_client_handle_header+0x28c>)
   32962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32964:	2210      	movs	r2, #16
   32966:	0018      	movs	r0, r3
   32968:	4b57      	ldr	r3, [pc, #348]	; (32ac8 <_http_client_handle_header+0x288>)
   3296a:	4798      	blx	r3
   3296c:	1e03      	subs	r3, r0, #0
   3296e:	d109      	bne.n	32984 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   32970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32972:	3310      	adds	r3, #16
   32974:	0018      	movs	r0, r3
   32976:	4b56      	ldr	r3, [pc, #344]	; (32ad0 <_http_client_handle_header+0x290>)
   32978:	4798      	blx	r3
   3297a:	0001      	movs	r1, r0
   3297c:	687b      	ldr	r3, [r7, #4]
   3297e:	22dc      	movs	r2, #220	; 0xdc
   32980:	5099      	str	r1, [r3, r2]
   32982:	e08b      	b.n	32a9c <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   32984:	4953      	ldr	r1, [pc, #332]	; (32ad4 <_http_client_handle_header+0x294>)
   32986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32988:	2213      	movs	r2, #19
   3298a:	0018      	movs	r0, r3
   3298c:	4b4e      	ldr	r3, [pc, #312]	; (32ac8 <_http_client_handle_header+0x288>)
   3298e:	4798      	blx	r3
   32990:	1e03      	subs	r3, r0, #0
   32992:	d127      	bne.n	329e4 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   32994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32996:	3313      	adds	r3, #19
   32998:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3299a:	e01e      	b.n	329da <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   3299c:	6a3b      	ldr	r3, [r7, #32]
   3299e:	781b      	ldrb	r3, [r3, #0]
   329a0:	2b20      	cmp	r3, #32
   329a2:	d103      	bne.n	329ac <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   329a4:	6a3b      	ldr	r3, [r7, #32]
   329a6:	3301      	adds	r3, #1
   329a8:	623b      	str	r3, [r7, #32]
   329aa:	e016      	b.n	329da <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   329ac:	6a3b      	ldr	r3, [r7, #32]
   329ae:	781b      	ldrb	r3, [r3, #0]
   329b0:	2b43      	cmp	r3, #67	; 0x43
   329b2:	d003      	beq.n	329bc <_http_client_handle_header+0x17c>
   329b4:	6a3b      	ldr	r3, [r7, #32]
   329b6:	781b      	ldrb	r3, [r3, #0]
   329b8:	2b63      	cmp	r3, #99	; 0x63
   329ba:	d105      	bne.n	329c8 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   329bc:	687b      	ldr	r3, [r7, #4]
   329be:	21cc      	movs	r1, #204	; 0xcc
   329c0:	2201      	movs	r2, #1
   329c2:	4252      	negs	r2, r2
   329c4:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   329c6:	e069      	b.n	32a9c <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   329c8:	2386      	movs	r3, #134	; 0x86
   329ca:	425a      	negs	r2, r3
   329cc:	687b      	ldr	r3, [r7, #4]
   329ce:	0011      	movs	r1, r2
   329d0:	0018      	movs	r0, r3
   329d2:	4b41      	ldr	r3, [pc, #260]	; (32ad8 <_http_client_handle_header+0x298>)
   329d4:	4798      	blx	r3
					return 0;
   329d6:	2300      	movs	r3, #0
   329d8:	e06a      	b.n	32ab0 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   329da:	69ba      	ldr	r2, [r7, #24]
   329dc:	6a3b      	ldr	r3, [r7, #32]
   329de:	429a      	cmp	r2, r3
   329e0:	d8dc      	bhi.n	3299c <_http_client_handle_header+0x15c>
   329e2:	e05b      	b.n	32a9c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   329e4:	493d      	ldr	r1, [pc, #244]	; (32adc <_http_client_handle_header+0x29c>)
   329e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   329e8:	220c      	movs	r2, #12
   329ea:	0018      	movs	r0, r3
   329ec:	4b36      	ldr	r3, [pc, #216]	; (32ac8 <_http_client_handle_header+0x288>)
   329ee:	4798      	blx	r3
   329f0:	1e03      	subs	r3, r0, #0
   329f2:	d126      	bne.n	32a42 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   329f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   329f6:	330c      	adds	r3, #12
   329f8:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   329fa:	e01d      	b.n	32a38 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   329fc:	69fb      	ldr	r3, [r7, #28]
   329fe:	781b      	ldrb	r3, [r3, #0]
   32a00:	2b20      	cmp	r3, #32
   32a02:	d103      	bne.n	32a0c <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32a04:	69fb      	ldr	r3, [r7, #28]
   32a06:	3301      	adds	r3, #1
   32a08:	61fb      	str	r3, [r7, #28]
   32a0a:	e015      	b.n	32a38 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   32a0c:	69fb      	ldr	r3, [r7, #28]
   32a0e:	781b      	ldrb	r3, [r3, #0]
   32a10:	2b4b      	cmp	r3, #75	; 0x4b
   32a12:	d003      	beq.n	32a1c <_http_client_handle_header+0x1dc>
   32a14:	69fb      	ldr	r3, [r7, #28]
   32a16:	781b      	ldrb	r3, [r3, #0]
   32a18:	2b6b      	cmp	r3, #107	; 0x6b
   32a1a:	d106      	bne.n	32a2a <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   32a1c:	687b      	ldr	r3, [r7, #4]
   32a1e:	2241      	movs	r2, #65	; 0x41
   32a20:	5c99      	ldrb	r1, [r3, r2]
   32a22:	2002      	movs	r0, #2
   32a24:	4301      	orrs	r1, r0
   32a26:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   32a28:	e038      	b.n	32a9c <_http_client_handle_header+0x25c>
					module->permanent = 0;
   32a2a:	687b      	ldr	r3, [r7, #4]
   32a2c:	2241      	movs	r2, #65	; 0x41
   32a2e:	5c99      	ldrb	r1, [r3, r2]
   32a30:	2002      	movs	r0, #2
   32a32:	4381      	bics	r1, r0
   32a34:	5499      	strb	r1, [r3, r2]
				break;
   32a36:	e031      	b.n	32a9c <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32a38:	69ba      	ldr	r2, [r7, #24]
   32a3a:	69fb      	ldr	r3, [r7, #28]
   32a3c:	429a      	cmp	r2, r3
   32a3e:	d8dd      	bhi.n	329fc <_http_client_handle_header+0x1bc>
   32a40:	e02c      	b.n	32a9c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   32a42:	4927      	ldr	r1, [pc, #156]	; (32ae0 <_http_client_handle_header+0x2a0>)
   32a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a46:	2205      	movs	r2, #5
   32a48:	0018      	movs	r0, r3
   32a4a:	4b1f      	ldr	r3, [pc, #124]	; (32ac8 <_http_client_handle_header+0x288>)
   32a4c:	4798      	blx	r3
   32a4e:	1e03      	subs	r3, r0, #0
   32a50:	d124      	bne.n	32a9c <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   32a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a54:	3309      	adds	r3, #9
   32a56:	0018      	movs	r0, r3
   32a58:	4b1d      	ldr	r3, [pc, #116]	; (32ad0 <_http_client_handle_header+0x290>)
   32a5a:	4798      	blx	r3
   32a5c:	0003      	movs	r3, r0
   32a5e:	b299      	uxth	r1, r3
   32a60:	687b      	ldr	r3, [r7, #4]
   32a62:	22e4      	movs	r2, #228	; 0xe4
   32a64:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   32a66:	687b      	ldr	r3, [r7, #4]
   32a68:	22dc      	movs	r2, #220	; 0xdc
   32a6a:	2100      	movs	r1, #0
   32a6c:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   32a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a70:	3305      	adds	r3, #5
   32a72:	781b      	ldrb	r3, [r3, #0]
   32a74:	2b31      	cmp	r3, #49	; 0x31
   32a76:	d804      	bhi.n	32a82 <_http_client_handle_header+0x242>
   32a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a7a:	3307      	adds	r3, #7
   32a7c:	781b      	ldrb	r3, [r3, #0]
   32a7e:	2b30      	cmp	r3, #48	; 0x30
   32a80:	d906      	bls.n	32a90 <_http_client_handle_header+0x250>
				module->permanent = 1;
   32a82:	687b      	ldr	r3, [r7, #4]
   32a84:	2241      	movs	r2, #65	; 0x41
   32a86:	5c99      	ldrb	r1, [r3, r2]
   32a88:	2002      	movs	r0, #2
   32a8a:	4301      	orrs	r1, r0
   32a8c:	5499      	strb	r1, [r3, r2]
   32a8e:	e005      	b.n	32a9c <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   32a90:	687b      	ldr	r3, [r7, #4]
   32a92:	2241      	movs	r2, #65	; 0x41
   32a94:	5c99      	ldrb	r1, [r3, r2]
   32a96:	2002      	movs	r0, #2
   32a98:	4381      	bics	r1, r0
   32a9a:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   32a9c:	4b06      	ldr	r3, [pc, #24]	; (32ab8 <_http_client_handle_header+0x278>)
   32a9e:	681b      	ldr	r3, [r3, #0]
   32aa0:	0018      	movs	r0, r3
   32aa2:	4b08      	ldr	r3, [pc, #32]	; (32ac4 <_http_client_handle_header+0x284>)
   32aa4:	4798      	blx	r3
   32aa6:	0002      	movs	r2, r0
   32aa8:	69bb      	ldr	r3, [r7, #24]
   32aaa:	189b      	adds	r3, r3, r2
   32aac:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32aae:	e6ce      	b.n	3284e <_http_client_handle_header+0xe>
	}
}
   32ab0:	0018      	movs	r0, r3
   32ab2:	46bd      	mov	sp, r7
   32ab4:	b00b      	add	sp, #44	; 0x2c
   32ab6:	bd90      	pop	{r4, r7, pc}
   32ab8:	2000012c 	.word	0x2000012c
   32abc:	00035a45 	.word	0x00035a45
   32ac0:	00032ea5 	.word	0x00032ea5
   32ac4:	000359c7 	.word	0x000359c7
   32ac8:	000359d5 	.word	0x000359d5
   32acc:	0003acd8 	.word	0x0003acd8
   32ad0:	0003555d 	.word	0x0003555d
   32ad4:	0003acfc 	.word	0x0003acfc
   32ad8:	00031ebd 	.word	0x00031ebd
   32adc:	0003ad10 	.word	0x0003ad10
   32ae0:	0003ad20 	.word	0x0003ad20

00032ae4 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   32ae4:	b580      	push	{r7, lr}
   32ae6:	b088      	sub	sp, #32
   32ae8:	af00      	add	r7, sp, #0
   32aea:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   32aec:	687b      	ldr	r3, [r7, #4]
   32aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32af0:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   32af2:	2300      	movs	r3, #0
   32af4:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   32af6:	687b      	ldr	r3, [r7, #4]
   32af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32afa:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   32afc:	687b      	ldr	r3, [r7, #4]
   32afe:	22e0      	movs	r2, #224	; 0xe0
   32b00:	589b      	ldr	r3, [r3, r2]
   32b02:	2b00      	cmp	r3, #0
   32b04:	db71      	blt.n	32bea <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   32b06:	687b      	ldr	r3, [r7, #4]
   32b08:	22e0      	movs	r2, #224	; 0xe0
   32b0a:	589b      	ldr	r3, [r3, r2]
   32b0c:	2b00      	cmp	r3, #0
   32b0e:	d134      	bne.n	32b7a <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32b10:	687b      	ldr	r3, [r7, #4]
   32b12:	22d8      	movs	r2, #216	; 0xd8
   32b14:	2100      	movs	r1, #0
   32b16:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32b18:	687b      	ldr	r3, [r7, #4]
   32b1a:	22e4      	movs	r2, #228	; 0xe4
   32b1c:	2100      	movs	r1, #0
   32b1e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32b20:	2308      	movs	r3, #8
   32b22:	18fb      	adds	r3, r7, r3
   32b24:	2201      	movs	r2, #1
   32b26:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   32b28:	2308      	movs	r3, #8
   32b2a:	18fb      	adds	r3, r7, r3
   32b2c:	2200      	movs	r2, #0
   32b2e:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   32b30:	2308      	movs	r3, #8
   32b32:	18fb      	adds	r3, r7, r3
   32b34:	2200      	movs	r2, #0
   32b36:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   32b38:	687b      	ldr	r3, [r7, #4]
   32b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32b3c:	2b00      	cmp	r3, #0
   32b3e:	d006      	beq.n	32b4e <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32b40:	687b      	ldr	r3, [r7, #4]
   32b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32b44:	2208      	movs	r2, #8
   32b46:	18ba      	adds	r2, r7, r2
   32b48:	6878      	ldr	r0, [r7, #4]
   32b4a:	2103      	movs	r1, #3
   32b4c:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   32b4e:	687b      	ldr	r3, [r7, #4]
   32b50:	2241      	movs	r2, #65	; 0x41
   32b52:	5c9b      	ldrb	r3, [r3, r2]
   32b54:	2202      	movs	r2, #2
   32b56:	4013      	ands	r3, r2
   32b58:	b2db      	uxtb	r3, r3
   32b5a:	2b00      	cmp	r3, #0
   32b5c:	d105      	bne.n	32b6a <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   32b5e:	687b      	ldr	r3, [r7, #4]
   32b60:	2100      	movs	r1, #0
   32b62:	0018      	movs	r0, r3
   32b64:	4b62      	ldr	r3, [pc, #392]	; (32cf0 <_http_client_read_chuked_entity+0x20c>)
   32b66:	4798      	blx	r3
					return;
   32b68:	e0bf      	b.n	32cea <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   32b6a:	697b      	ldr	r3, [r7, #20]
   32b6c:	1c9a      	adds	r2, r3, #2
   32b6e:	687b      	ldr	r3, [r7, #4]
   32b70:	0011      	movs	r1, r2
   32b72:	0018      	movs	r0, r3
   32b74:	4b5f      	ldr	r3, [pc, #380]	; (32cf4 <_http_client_read_chuked_entity+0x210>)
   32b76:	4798      	blx	r3
   32b78:	e0b2      	b.n	32ce0 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   32b7a:	687b      	ldr	r3, [r7, #4]
   32b7c:	22e0      	movs	r2, #224	; 0xe0
   32b7e:	589a      	ldr	r2, [r3, r2]
   32b80:	69fb      	ldr	r3, [r7, #28]
   32b82:	429a      	cmp	r2, r3
   32b84:	dd00      	ble.n	32b88 <_http_client_read_chuked_entity+0xa4>
   32b86:	e0ab      	b.n	32ce0 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   32b88:	687b      	ldr	r3, [r7, #4]
   32b8a:	22e0      	movs	r2, #224	; 0xe0
   32b8c:	589b      	ldr	r3, [r3, r2]
   32b8e:	001a      	movs	r2, r3
   32b90:	2308      	movs	r3, #8
   32b92:	18fb      	adds	r3, r7, r3
   32b94:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   32b96:	2308      	movs	r3, #8
   32b98:	18fb      	adds	r3, r7, r3
   32b9a:	697a      	ldr	r2, [r7, #20]
   32b9c:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   32b9e:	2308      	movs	r3, #8
   32ba0:	18fb      	adds	r3, r7, r3
   32ba2:	2200      	movs	r2, #0
   32ba4:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   32ba6:	687b      	ldr	r3, [r7, #4]
   32ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32baa:	2b00      	cmp	r3, #0
   32bac:	d006      	beq.n	32bbc <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32bae:	687b      	ldr	r3, [r7, #4]
   32bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32bb2:	2208      	movs	r2, #8
   32bb4:	18ba      	adds	r2, r7, r2
   32bb6:	6878      	ldr	r0, [r7, #4]
   32bb8:	2103      	movs	r1, #3
   32bba:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   32bbc:	687b      	ldr	r3, [r7, #4]
   32bbe:	22e0      	movs	r2, #224	; 0xe0
   32bc0:	589b      	ldr	r3, [r3, r2]
   32bc2:	3302      	adds	r3, #2
   32bc4:	697a      	ldr	r2, [r7, #20]
   32bc6:	18d2      	adds	r2, r2, r3
   32bc8:	687b      	ldr	r3, [r7, #4]
   32bca:	0011      	movs	r1, r2
   32bcc:	0018      	movs	r0, r3
   32bce:	4b49      	ldr	r3, [pc, #292]	; (32cf4 <_http_client_read_chuked_entity+0x210>)
   32bd0:	4798      	blx	r3
				length = (int)module->recved_size;
   32bd2:	687b      	ldr	r3, [r7, #4]
   32bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32bd6:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   32bd8:	687b      	ldr	r3, [r7, #4]
   32bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32bdc:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   32bde:	687b      	ldr	r3, [r7, #4]
   32be0:	21e0      	movs	r1, #224	; 0xe0
   32be2:	2201      	movs	r2, #1
   32be4:	4252      	negs	r2, r2
   32be6:	505a      	str	r2, [r3, r1]
   32be8:	e07a      	b.n	32ce0 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   32bea:	687b      	ldr	r3, [r7, #4]
   32bec:	22e0      	movs	r2, #224	; 0xe0
   32bee:	2100      	movs	r1, #0
   32bf0:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   32bf2:	e05a      	b.n	32caa <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   32bf4:	697b      	ldr	r3, [r7, #20]
   32bf6:	781b      	ldrb	r3, [r3, #0]
   32bf8:	2b0a      	cmp	r3, #10
   32bfa:	d106      	bne.n	32c0a <_http_client_read_chuked_entity+0x126>
					buffer++;
   32bfc:	697b      	ldr	r3, [r7, #20]
   32bfe:	3301      	adds	r3, #1
   32c00:	617b      	str	r3, [r7, #20]
					length--;
   32c02:	69fb      	ldr	r3, [r7, #28]
   32c04:	3b01      	subs	r3, #1
   32c06:	61fb      	str	r3, [r7, #28]
					break;
   32c08:	e052      	b.n	32cb0 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   32c0a:	69bb      	ldr	r3, [r7, #24]
   32c0c:	2b00      	cmp	r3, #0
   32c0e:	d145      	bne.n	32c9c <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   32c10:	697b      	ldr	r3, [r7, #20]
   32c12:	781b      	ldrb	r3, [r3, #0]
   32c14:	2b2f      	cmp	r3, #47	; 0x2f
   32c16:	d910      	bls.n	32c3a <_http_client_read_chuked_entity+0x156>
   32c18:	697b      	ldr	r3, [r7, #20]
   32c1a:	781b      	ldrb	r3, [r3, #0]
   32c1c:	2b39      	cmp	r3, #57	; 0x39
   32c1e:	d80c      	bhi.n	32c3a <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   32c20:	687b      	ldr	r3, [r7, #4]
   32c22:	22e0      	movs	r2, #224	; 0xe0
   32c24:	589b      	ldr	r3, [r3, r2]
   32c26:	011b      	lsls	r3, r3, #4
   32c28:	697a      	ldr	r2, [r7, #20]
   32c2a:	7812      	ldrb	r2, [r2, #0]
   32c2c:	189b      	adds	r3, r3, r2
   32c2e:	3b30      	subs	r3, #48	; 0x30
   32c30:	001a      	movs	r2, r3
   32c32:	687b      	ldr	r3, [r7, #4]
   32c34:	21e0      	movs	r1, #224	; 0xe0
   32c36:	505a      	str	r2, [r3, r1]
   32c38:	e031      	b.n	32c9e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   32c3a:	697b      	ldr	r3, [r7, #20]
   32c3c:	781b      	ldrb	r3, [r3, #0]
   32c3e:	2b60      	cmp	r3, #96	; 0x60
   32c40:	d910      	bls.n	32c64 <_http_client_read_chuked_entity+0x180>
   32c42:	697b      	ldr	r3, [r7, #20]
   32c44:	781b      	ldrb	r3, [r3, #0]
   32c46:	2b66      	cmp	r3, #102	; 0x66
   32c48:	d80c      	bhi.n	32c64 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   32c4a:	687b      	ldr	r3, [r7, #4]
   32c4c:	22e0      	movs	r2, #224	; 0xe0
   32c4e:	589b      	ldr	r3, [r3, r2]
   32c50:	011b      	lsls	r3, r3, #4
   32c52:	697a      	ldr	r2, [r7, #20]
   32c54:	7812      	ldrb	r2, [r2, #0]
   32c56:	189b      	adds	r3, r3, r2
   32c58:	3b61      	subs	r3, #97	; 0x61
   32c5a:	001a      	movs	r2, r3
   32c5c:	687b      	ldr	r3, [r7, #4]
   32c5e:	21e0      	movs	r1, #224	; 0xe0
   32c60:	505a      	str	r2, [r3, r1]
   32c62:	e01c      	b.n	32c9e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   32c64:	697b      	ldr	r3, [r7, #20]
   32c66:	781b      	ldrb	r3, [r3, #0]
   32c68:	2b40      	cmp	r3, #64	; 0x40
   32c6a:	d910      	bls.n	32c8e <_http_client_read_chuked_entity+0x1aa>
   32c6c:	697b      	ldr	r3, [r7, #20]
   32c6e:	781b      	ldrb	r3, [r3, #0]
   32c70:	2b46      	cmp	r3, #70	; 0x46
   32c72:	d80c      	bhi.n	32c8e <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   32c74:	687b      	ldr	r3, [r7, #4]
   32c76:	22e0      	movs	r2, #224	; 0xe0
   32c78:	589b      	ldr	r3, [r3, r2]
   32c7a:	011b      	lsls	r3, r3, #4
   32c7c:	697a      	ldr	r2, [r7, #20]
   32c7e:	7812      	ldrb	r2, [r2, #0]
   32c80:	189b      	adds	r3, r3, r2
   32c82:	3b41      	subs	r3, #65	; 0x41
   32c84:	001a      	movs	r2, r3
   32c86:	687b      	ldr	r3, [r7, #4]
   32c88:	21e0      	movs	r1, #224	; 0xe0
   32c8a:	505a      	str	r2, [r3, r1]
   32c8c:	e007      	b.n	32c9e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   32c8e:	697b      	ldr	r3, [r7, #20]
   32c90:	781b      	ldrb	r3, [r3, #0]
   32c92:	2b3b      	cmp	r3, #59	; 0x3b
   32c94:	d103      	bne.n	32c9e <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   32c96:	2301      	movs	r3, #1
   32c98:	61bb      	str	r3, [r7, #24]
   32c9a:	e000      	b.n	32c9e <_http_client_read_chuked_entity+0x1ba>
					continue;
   32c9c:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   32c9e:	697b      	ldr	r3, [r7, #20]
   32ca0:	3301      	adds	r3, #1
   32ca2:	617b      	str	r3, [r7, #20]
   32ca4:	69fb      	ldr	r3, [r7, #28]
   32ca6:	3b01      	subs	r3, #1
   32ca8:	61fb      	str	r3, [r7, #28]
   32caa:	69fb      	ldr	r3, [r7, #28]
   32cac:	2b00      	cmp	r3, #0
   32cae:	dca1      	bgt.n	32bf4 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   32cb0:	687b      	ldr	r3, [r7, #4]
   32cb2:	22e0      	movs	r2, #224	; 0xe0
   32cb4:	589a      	ldr	r2, [r3, r2]
   32cb6:	687b      	ldr	r3, [r7, #4]
   32cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32cba:	429a      	cmp	r2, r3
   32cbc:	dd07      	ble.n	32cce <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   32cbe:	238b      	movs	r3, #139	; 0x8b
   32cc0:	425a      	negs	r2, r3
   32cc2:	687b      	ldr	r3, [r7, #4]
   32cc4:	0011      	movs	r1, r2
   32cc6:	0018      	movs	r0, r3
   32cc8:	4b09      	ldr	r3, [pc, #36]	; (32cf0 <_http_client_read_chuked_entity+0x20c>)
   32cca:	4798      	blx	r3
				return;
   32ccc:	e00d      	b.n	32cea <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   32cce:	69fb      	ldr	r3, [r7, #28]
   32cd0:	2b00      	cmp	r3, #0
   32cd2:	d105      	bne.n	32ce0 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   32cd4:	687b      	ldr	r3, [r7, #4]
   32cd6:	21e0      	movs	r1, #224	; 0xe0
   32cd8:	2201      	movs	r2, #1
   32cda:	4252      	negs	r2, r2
   32cdc:	505a      	str	r2, [r3, r1]
				return;
   32cde:	e004      	b.n	32cea <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   32ce0:	687b      	ldr	r3, [r7, #4]
   32ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32ce4:	2b00      	cmp	r3, #0
   32ce6:	d000      	beq.n	32cea <_http_client_read_chuked_entity+0x206>
   32ce8:	e708      	b.n	32afc <_http_client_read_chuked_entity+0x18>
}
   32cea:	46bd      	mov	sp, r7
   32cec:	b008      	add	sp, #32
   32cee:	bd80      	pop	{r7, pc}
   32cf0:	00031ebd 	.word	0x00031ebd
   32cf4:	00032ea5 	.word	0x00032ea5

00032cf8 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   32cf8:	b580      	push	{r7, lr}
   32cfa:	b086      	sub	sp, #24
   32cfc:	af00      	add	r7, sp, #0
   32cfe:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   32d00:	687b      	ldr	r3, [r7, #4]
   32d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32d04:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   32d06:	687b      	ldr	r3, [r7, #4]
   32d08:	22dc      	movs	r2, #220	; 0xdc
   32d0a:	589b      	ldr	r3, [r3, r2]
   32d0c:	2b00      	cmp	r3, #0
   32d0e:	db58      	blt.n	32dc2 <_http_client_handle_entity+0xca>
   32d10:	687b      	ldr	r3, [r7, #4]
   32d12:	22dc      	movs	r2, #220	; 0xdc
   32d14:	589a      	ldr	r2, [r3, r2]
   32d16:	687b      	ldr	r3, [r7, #4]
   32d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32d1a:	429a      	cmp	r2, r3
   32d1c:	dc51      	bgt.n	32dc2 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   32d1e:	687b      	ldr	r3, [r7, #4]
   32d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32d22:	0019      	movs	r1, r3
   32d24:	687b      	ldr	r3, [r7, #4]
   32d26:	22dc      	movs	r2, #220	; 0xdc
   32d28:	589b      	ldr	r3, [r3, r2]
   32d2a:	4299      	cmp	r1, r3
   32d2c:	da00      	bge.n	32d30 <_http_client_handle_entity+0x38>
   32d2e:	e0a9      	b.n	32e84 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   32d30:	687b      	ldr	r3, [r7, #4]
   32d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32d34:	2b00      	cmp	r3, #0
   32d36:	d020      	beq.n	32d7a <_http_client_handle_entity+0x82>
   32d38:	687b      	ldr	r3, [r7, #4]
   32d3a:	22e4      	movs	r2, #228	; 0xe4
   32d3c:	5a9b      	ldrh	r3, [r3, r2]
   32d3e:	2b00      	cmp	r3, #0
   32d40:	d01b      	beq.n	32d7a <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   32d42:	687b      	ldr	r3, [r7, #4]
   32d44:	22e4      	movs	r2, #228	; 0xe4
   32d46:	5a9a      	ldrh	r2, [r3, r2]
   32d48:	2308      	movs	r3, #8
   32d4a:	18fb      	adds	r3, r7, r3
   32d4c:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   32d4e:	2308      	movs	r3, #8
   32d50:	18fb      	adds	r3, r7, r3
   32d52:	2200      	movs	r2, #0
   32d54:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   32d56:	687b      	ldr	r3, [r7, #4]
   32d58:	22dc      	movs	r2, #220	; 0xdc
   32d5a:	589b      	ldr	r3, [r3, r2]
   32d5c:	001a      	movs	r2, r3
   32d5e:	2308      	movs	r3, #8
   32d60:	18fb      	adds	r3, r7, r3
   32d62:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   32d64:	2308      	movs	r3, #8
   32d66:	18fb      	adds	r3, r7, r3
   32d68:	697a      	ldr	r2, [r7, #20]
   32d6a:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32d6c:	687b      	ldr	r3, [r7, #4]
   32d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32d70:	2208      	movs	r2, #8
   32d72:	18ba      	adds	r2, r7, r2
   32d74:	6878      	ldr	r0, [r7, #4]
   32d76:	2102      	movs	r1, #2
   32d78:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   32d7a:	687b      	ldr	r3, [r7, #4]
   32d7c:	22d8      	movs	r2, #216	; 0xd8
   32d7e:	2100      	movs	r1, #0
   32d80:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   32d82:	687b      	ldr	r3, [r7, #4]
   32d84:	22e4      	movs	r2, #228	; 0xe4
   32d86:	2100      	movs	r1, #0
   32d88:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   32d8a:	687b      	ldr	r3, [r7, #4]
   32d8c:	2241      	movs	r2, #65	; 0x41
   32d8e:	5c9b      	ldrb	r3, [r3, r2]
   32d90:	2202      	movs	r2, #2
   32d92:	4013      	ands	r3, r2
   32d94:	b2db      	uxtb	r3, r3
   32d96:	2b00      	cmp	r3, #0
   32d98:	d105      	bne.n	32da6 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   32d9a:	687b      	ldr	r3, [r7, #4]
   32d9c:	2100      	movs	r1, #0
   32d9e:	0018      	movs	r0, r3
   32da0:	4b3b      	ldr	r3, [pc, #236]	; (32e90 <_http_client_handle_entity+0x198>)
   32da2:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   32da4:	e06e      	b.n	32e84 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   32da6:	687b      	ldr	r3, [r7, #4]
   32da8:	22dc      	movs	r2, #220	; 0xdc
   32daa:	589b      	ldr	r3, [r3, r2]
   32dac:	001a      	movs	r2, r3
   32dae:	697b      	ldr	r3, [r7, #20]
   32db0:	189a      	adds	r2, r3, r2
   32db2:	687b      	ldr	r3, [r7, #4]
   32db4:	0011      	movs	r1, r2
   32db6:	0018      	movs	r0, r3
   32db8:	4b36      	ldr	r3, [pc, #216]	; (32e94 <_http_client_handle_entity+0x19c>)
   32dba:	4798      	blx	r3
				return module->recved_size;
   32dbc:	687b      	ldr	r3, [r7, #4]
   32dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32dc0:	e061      	b.n	32e86 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   32dc2:	687b      	ldr	r3, [r7, #4]
   32dc4:	22dc      	movs	r2, #220	; 0xdc
   32dc6:	589b      	ldr	r3, [r3, r2]
   32dc8:	2b00      	cmp	r3, #0
   32dca:	db57      	blt.n	32e7c <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   32dcc:	687b      	ldr	r3, [r7, #4]
   32dce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32dd0:	2308      	movs	r3, #8
   32dd2:	18fb      	adds	r3, r7, r3
   32dd4:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   32dd6:	2308      	movs	r3, #8
   32dd8:	18fb      	adds	r3, r7, r3
   32dda:	697a      	ldr	r2, [r7, #20]
   32ddc:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   32dde:	687b      	ldr	r3, [r7, #4]
   32de0:	22e0      	movs	r2, #224	; 0xe0
   32de2:	589a      	ldr	r2, [r3, r2]
   32de4:	687b      	ldr	r3, [r7, #4]
   32de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32de8:	18d2      	adds	r2, r2, r3
   32dea:	687b      	ldr	r3, [r7, #4]
   32dec:	21e0      	movs	r1, #224	; 0xe0
   32dee:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   32df0:	687b      	ldr	r3, [r7, #4]
   32df2:	22dc      	movs	r2, #220	; 0xdc
   32df4:	589a      	ldr	r2, [r3, r2]
   32df6:	687b      	ldr	r3, [r7, #4]
   32df8:	21e0      	movs	r1, #224	; 0xe0
   32dfa:	585b      	ldr	r3, [r3, r1]
   32dfc:	429a      	cmp	r2, r3
   32dfe:	dc0c      	bgt.n	32e1a <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32e00:	687b      	ldr	r3, [r7, #4]
   32e02:	22d8      	movs	r2, #216	; 0xd8
   32e04:	2100      	movs	r1, #0
   32e06:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32e08:	687b      	ldr	r3, [r7, #4]
   32e0a:	22e4      	movs	r2, #228	; 0xe4
   32e0c:	2100      	movs	r1, #0
   32e0e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32e10:	2308      	movs	r3, #8
   32e12:	18fb      	adds	r3, r7, r3
   32e14:	2201      	movs	r2, #1
   32e16:	721a      	strb	r2, [r3, #8]
   32e18:	e003      	b.n	32e22 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   32e1a:	2308      	movs	r3, #8
   32e1c:	18fb      	adds	r3, r7, r3
   32e1e:	2200      	movs	r2, #0
   32e20:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   32e22:	687b      	ldr	r3, [r7, #4]
   32e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32e26:	2b00      	cmp	r3, #0
   32e28:	d006      	beq.n	32e38 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32e2a:	687b      	ldr	r3, [r7, #4]
   32e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32e2e:	2208      	movs	r2, #8
   32e30:	18ba      	adds	r2, r7, r2
   32e32:	6878      	ldr	r0, [r7, #4]
   32e34:	2103      	movs	r1, #3
   32e36:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   32e38:	2308      	movs	r3, #8
   32e3a:	18fb      	adds	r3, r7, r3
   32e3c:	7a1b      	ldrb	r3, [r3, #8]
   32e3e:	2b01      	cmp	r3, #1
   32e40:	d112      	bne.n	32e68 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   32e42:	687b      	ldr	r3, [r7, #4]
   32e44:	2241      	movs	r2, #65	; 0x41
   32e46:	5c9b      	ldrb	r3, [r3, r2]
   32e48:	2202      	movs	r2, #2
   32e4a:	4013      	ands	r3, r2
   32e4c:	b2db      	uxtb	r3, r3
   32e4e:	2b00      	cmp	r3, #0
   32e50:	d10a      	bne.n	32e68 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   32e52:	4b11      	ldr	r3, [pc, #68]	; (32e98 <_http_client_handle_entity+0x1a0>)
   32e54:	0018      	movs	r0, r3
   32e56:	4b11      	ldr	r3, [pc, #68]	; (32e9c <_http_client_handle_entity+0x1a4>)
   32e58:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   32e5a:	687b      	ldr	r3, [r7, #4]
   32e5c:	2100      	movs	r1, #0
   32e5e:	0018      	movs	r0, r3
   32e60:	4b0b      	ldr	r3, [pc, #44]	; (32e90 <_http_client_handle_entity+0x198>)
   32e62:	4798      	blx	r3
					return 0;
   32e64:	2300      	movs	r3, #0
   32e66:	e00e      	b.n	32e86 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   32e68:	687b      	ldr	r3, [r7, #4]
   32e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32e6c:	697a      	ldr	r2, [r7, #20]
   32e6e:	18d2      	adds	r2, r2, r3
   32e70:	687b      	ldr	r3, [r7, #4]
   32e72:	0011      	movs	r1, r2
   32e74:	0018      	movs	r0, r3
   32e76:	4b07      	ldr	r3, [pc, #28]	; (32e94 <_http_client_handle_entity+0x19c>)
   32e78:	4798      	blx	r3
   32e7a:	e003      	b.n	32e84 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   32e7c:	687b      	ldr	r3, [r7, #4]
   32e7e:	0018      	movs	r0, r3
   32e80:	4b07      	ldr	r3, [pc, #28]	; (32ea0 <_http_client_handle_entity+0x1a8>)
   32e82:	4798      	blx	r3
		}
	}

	return 0;
   32e84:	2300      	movs	r3, #0
}
   32e86:	0018      	movs	r0, r3
   32e88:	46bd      	mov	sp, r7
   32e8a:	b006      	add	sp, #24
   32e8c:	bd80      	pop	{r7, pc}
   32e8e:	46c0      	nop			; (mov r8, r8)
   32e90:	00031ebd 	.word	0x00031ebd
   32e94:	00032ea5 	.word	0x00032ea5
   32e98:	0003ad28 	.word	0x0003ad28
   32e9c:	00035831 	.word	0x00035831
   32ea0:	00032ae5 	.word	0x00032ae5

00032ea4 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   32ea4:	b580      	push	{r7, lr}
   32ea6:	b084      	sub	sp, #16
   32ea8:	af00      	add	r7, sp, #0
   32eaa:	6078      	str	r0, [r7, #4]
   32eac:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   32eae:	687b      	ldr	r3, [r7, #4]
   32eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32eb2:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   32eb4:	687b      	ldr	r3, [r7, #4]
   32eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32eb8:	001a      	movs	r2, r3
   32eba:	683b      	ldr	r3, [r7, #0]
   32ebc:	1ad2      	subs	r2, r2, r3
   32ebe:	68fb      	ldr	r3, [r7, #12]
   32ec0:	18d3      	adds	r3, r2, r3
   32ec2:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   32ec4:	68bb      	ldr	r3, [r7, #8]
   32ec6:	2b00      	cmp	r3, #0
   32ec8:	dd09      	ble.n	32ede <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   32eca:	68ba      	ldr	r2, [r7, #8]
   32ecc:	6839      	ldr	r1, [r7, #0]
   32ece:	68fb      	ldr	r3, [r7, #12]
   32ed0:	0018      	movs	r0, r3
   32ed2:	4b06      	ldr	r3, [pc, #24]	; (32eec <_http_client_move_buffer+0x48>)
   32ed4:	4798      	blx	r3
		module->recved_size = remain;
   32ed6:	68ba      	ldr	r2, [r7, #8]
   32ed8:	687b      	ldr	r3, [r7, #4]
   32eda:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   32edc:	e002      	b.n	32ee4 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   32ede:	687b      	ldr	r3, [r7, #4]
   32ee0:	2200      	movs	r2, #0
   32ee2:	645a      	str	r2, [r3, #68]	; 0x44
}
   32ee4:	46c0      	nop			; (mov r8, r8)
   32ee6:	46bd      	mov	sp, r7
   32ee8:	b004      	add	sp, #16
   32eea:	bd80      	pop	{r7, pc}
   32eec:	000355eb 	.word	0x000355eb

00032ef0 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   32ef0:	b580      	push	{r7, lr}
   32ef2:	b084      	sub	sp, #16
   32ef4:	af00      	add	r7, sp, #0
   32ef6:	60f8      	str	r0, [r7, #12]
   32ef8:	60b9      	str	r1, [r7, #8]
   32efa:	607a      	str	r2, [r7, #4]
   32efc:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   32efe:	68fb      	ldr	r3, [r7, #12]
   32f00:	687a      	ldr	r2, [r7, #4]
   32f02:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   32f04:	68fb      	ldr	r3, [r7, #12]
   32f06:	68ba      	ldr	r2, [r7, #8]
   32f08:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   32f0a:	68fb      	ldr	r3, [r7, #12]
   32f0c:	2200      	movs	r2, #0
   32f0e:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   32f10:	68fb      	ldr	r3, [r7, #12]
   32f12:	683a      	ldr	r2, [r7, #0]
   32f14:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   32f16:	68fb      	ldr	r3, [r7, #12]
   32f18:	69ba      	ldr	r2, [r7, #24]
   32f1a:	60da      	str	r2, [r3, #12]
}
   32f1c:	46c0      	nop			; (mov r8, r8)
   32f1e:	46bd      	mov	sp, r7
   32f20:	b004      	add	sp, #16
   32f22:	bd80      	pop	{r7, pc}

00032f24 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   32f24:	b580      	push	{r7, lr}
   32f26:	b084      	sub	sp, #16
   32f28:	af00      	add	r7, sp, #0
   32f2a:	6078      	str	r0, [r7, #4]
   32f2c:	000a      	movs	r2, r1
   32f2e:	1cfb      	adds	r3, r7, #3
   32f30:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   32f32:	687b      	ldr	r3, [r7, #4]
   32f34:	681a      	ldr	r2, [r3, #0]
   32f36:	687b      	ldr	r3, [r7, #4]
   32f38:	685b      	ldr	r3, [r3, #4]
   32f3a:	1ad3      	subs	r3, r2, r3
   32f3c:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   32f3e:	68fb      	ldr	r3, [r7, #12]
   32f40:	2b00      	cmp	r3, #0
   32f42:	dc03      	bgt.n	32f4c <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   32f44:	687b      	ldr	r3, [r7, #4]
   32f46:	0018      	movs	r0, r3
   32f48:	4b08      	ldr	r3, [pc, #32]	; (32f6c <stream_writer_send_8+0x48>)
   32f4a:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   32f4c:	687b      	ldr	r3, [r7, #4]
   32f4e:	6919      	ldr	r1, [r3, #16]
   32f50:	687b      	ldr	r3, [r7, #4]
   32f52:	685b      	ldr	r3, [r3, #4]
   32f54:	1c58      	adds	r0, r3, #1
   32f56:	687a      	ldr	r2, [r7, #4]
   32f58:	6050      	str	r0, [r2, #4]
   32f5a:	18cb      	adds	r3, r1, r3
   32f5c:	1cfa      	adds	r2, r7, #3
   32f5e:	7812      	ldrb	r2, [r2, #0]
   32f60:	701a      	strb	r2, [r3, #0]
}
   32f62:	46c0      	nop			; (mov r8, r8)
   32f64:	46bd      	mov	sp, r7
   32f66:	b004      	add	sp, #16
   32f68:	bd80      	pop	{r7, pc}
   32f6a:	46c0      	nop			; (mov r8, r8)
   32f6c:	00032fad 	.word	0x00032fad

00032f70 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   32f70:	b580      	push	{r7, lr}
   32f72:	b084      	sub	sp, #16
   32f74:	af00      	add	r7, sp, #0
   32f76:	60f8      	str	r0, [r7, #12]
   32f78:	60b9      	str	r1, [r7, #8]
   32f7a:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   32f7c:	e00d      	b.n	32f9a <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   32f7e:	68bb      	ldr	r3, [r7, #8]
   32f80:	781b      	ldrb	r3, [r3, #0]
   32f82:	b25a      	sxtb	r2, r3
   32f84:	68fb      	ldr	r3, [r7, #12]
   32f86:	0011      	movs	r1, r2
   32f88:	0018      	movs	r0, r3
   32f8a:	4b07      	ldr	r3, [pc, #28]	; (32fa8 <stream_writer_send_buffer+0x38>)
   32f8c:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   32f8e:	687b      	ldr	r3, [r7, #4]
   32f90:	3b01      	subs	r3, #1
   32f92:	607b      	str	r3, [r7, #4]
   32f94:	68bb      	ldr	r3, [r7, #8]
   32f96:	3301      	adds	r3, #1
   32f98:	60bb      	str	r3, [r7, #8]
   32f9a:	687b      	ldr	r3, [r7, #4]
   32f9c:	2b00      	cmp	r3, #0
   32f9e:	d1ee      	bne.n	32f7e <stream_writer_send_buffer+0xe>
	}
}
   32fa0:	46c0      	nop			; (mov r8, r8)
   32fa2:	46bd      	mov	sp, r7
   32fa4:	b004      	add	sp, #16
   32fa6:	bd80      	pop	{r7, pc}
   32fa8:	00032f25 	.word	0x00032f25

00032fac <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   32fac:	b590      	push	{r4, r7, lr}
   32fae:	b083      	sub	sp, #12
   32fb0:	af00      	add	r7, sp, #0
   32fb2:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   32fb4:	687b      	ldr	r3, [r7, #4]
   32fb6:	685b      	ldr	r3, [r3, #4]
   32fb8:	2b00      	cmp	r3, #0
   32fba:	d00c      	beq.n	32fd6 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   32fbc:	687b      	ldr	r3, [r7, #4]
   32fbe:	689c      	ldr	r4, [r3, #8]
   32fc0:	687b      	ldr	r3, [r7, #4]
   32fc2:	68d8      	ldr	r0, [r3, #12]
   32fc4:	687b      	ldr	r3, [r7, #4]
   32fc6:	6919      	ldr	r1, [r3, #16]
   32fc8:	687b      	ldr	r3, [r7, #4]
   32fca:	685b      	ldr	r3, [r3, #4]
   32fcc:	001a      	movs	r2, r3
   32fce:	47a0      	blx	r4
		writer->written = 0;
   32fd0:	687b      	ldr	r3, [r7, #4]
   32fd2:	2200      	movs	r2, #0
   32fd4:	605a      	str	r2, [r3, #4]
	}
}
   32fd6:	46c0      	nop			; (mov r8, r8)
   32fd8:	46bd      	mov	sp, r7
   32fda:	b003      	add	sp, #12
   32fdc:	bd90      	pop	{r4, r7, pc}
	...

00032fe0 <system_cpu_clock_get_hz>:
{
   32fe0:	b580      	push	{r7, lr}
   32fe2:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   32fe4:	2000      	movs	r0, #0
   32fe6:	4b05      	ldr	r3, [pc, #20]	; (32ffc <system_cpu_clock_get_hz+0x1c>)
   32fe8:	4798      	blx	r3
   32fea:	0002      	movs	r2, r0
   32fec:	4b04      	ldr	r3, [pc, #16]	; (33000 <system_cpu_clock_get_hz+0x20>)
   32fee:	7a1b      	ldrb	r3, [r3, #8]
   32ff0:	b2db      	uxtb	r3, r3
   32ff2:	40da      	lsrs	r2, r3
   32ff4:	0013      	movs	r3, r2
}
   32ff6:	0018      	movs	r0, r3
   32ff8:	46bd      	mov	sp, r7
   32ffa:	bd80      	pop	{r7, pc}
   32ffc:	0002a895 	.word	0x0002a895
   33000:	40000400 	.word	0x40000400

00033004 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   33004:	b580      	push	{r7, lr}
   33006:	b084      	sub	sp, #16
   33008:	af00      	add	r7, sp, #0
   3300a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   3300c:	687b      	ldr	r3, [r7, #4]
   3300e:	681b      	ldr	r3, [r3, #0]
   33010:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   33012:	46c0      	nop			; (mov r8, r8)
   33014:	68fb      	ldr	r3, [r7, #12]
   33016:	689b      	ldr	r3, [r3, #8]
   33018:	2202      	movs	r2, #2
   3301a:	4013      	ands	r3, r2
   3301c:	d1fa      	bne.n	33014 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   3301e:	68fb      	ldr	r3, [r7, #12]
   33020:	681b      	ldr	r3, [r3, #0]
   33022:	2202      	movs	r2, #2
   33024:	431a      	orrs	r2, r3
   33026:	68fb      	ldr	r3, [r7, #12]
   33028:	601a      	str	r2, [r3, #0]
}
   3302a:	46c0      	nop			; (mov r8, r8)
   3302c:	46bd      	mov	sp, r7
   3302e:	b004      	add	sp, #16
   33030:	bd80      	pop	{r7, pc}
	...

00033034 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   33034:	b580      	push	{r7, lr}
   33036:	b082      	sub	sp, #8
   33038:	af00      	add	r7, sp, #0
   3303a:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   3303c:	4b04      	ldr	r3, [pc, #16]	; (33050 <sw_timer_tcc_callback+0x1c>)
   3303e:	681b      	ldr	r3, [r3, #0]
   33040:	1c5a      	adds	r2, r3, #1
   33042:	4b03      	ldr	r3, [pc, #12]	; (33050 <sw_timer_tcc_callback+0x1c>)
   33044:	601a      	str	r2, [r3, #0]
}
   33046:	46c0      	nop			; (mov r8, r8)
   33048:	46bd      	mov	sp, r7
   3304a:	b002      	add	sp, #8
   3304c:	bd80      	pop	{r7, pc}
   3304e:	46c0      	nop			; (mov r8, r8)
   33050:	20004710 	.word	0x20004710

00033054 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   33054:	b580      	push	{r7, lr}
   33056:	b082      	sub	sp, #8
   33058:	af00      	add	r7, sp, #0
   3305a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   3305c:	687b      	ldr	r3, [r7, #4]
   3305e:	2264      	movs	r2, #100	; 0x64
   33060:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   33062:	687b      	ldr	r3, [r7, #4]
   33064:	2200      	movs	r2, #0
   33066:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   33068:	687b      	ldr	r3, [r7, #4]
   3306a:	2200      	movs	r2, #0
   3306c:	705a      	strb	r2, [r3, #1]
}
   3306e:	46c0      	nop			; (mov r8, r8)
   33070:	46bd      	mov	sp, r7
   33072:	b002      	add	sp, #8
   33074:	bd80      	pop	{r7, pc}
	...

00033078 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   33078:	b590      	push	{r4, r7, lr}
   3307a:	b0b1      	sub	sp, #196	; 0xc4
   3307c:	af00      	add	r7, sp, #0
   3307e:	6078      	str	r0, [r7, #4]
   33080:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   33082:	230c      	movs	r3, #12
   33084:	18fb      	adds	r3, r7, r3
   33086:	4a2e      	ldr	r2, [pc, #184]	; (33140 <sw_timer_init+0xc8>)
   33088:	ca13      	ldmia	r2!, {r0, r1, r4}
   3308a:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   3308c:	683b      	ldr	r3, [r7, #0]
   3308e:	885b      	ldrh	r3, [r3, #2]
   33090:	001a      	movs	r2, r3
   33092:	687b      	ldr	r3, [r7, #4]
   33094:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   33096:	687b      	ldr	r3, [r7, #4]
   33098:	3314      	adds	r3, #20
   3309a:	22bc      	movs	r2, #188	; 0xbc
   3309c:	18ba      	adds	r2, r7, r2
   3309e:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   330a0:	683b      	ldr	r3, [r7, #0]
   330a2:	781b      	ldrb	r3, [r3, #0]
   330a4:	001a      	movs	r2, r3
   330a6:	230c      	movs	r3, #12
   330a8:	18fb      	adds	r3, r7, r3
   330aa:	0092      	lsls	r2, r2, #2
   330ac:	58d2      	ldr	r2, [r2, r3]
   330ae:	2318      	movs	r3, #24
   330b0:	18fb      	adds	r3, r7, r3
   330b2:	0011      	movs	r1, r2
   330b4:	0018      	movs	r0, r3
   330b6:	4b23      	ldr	r3, [pc, #140]	; (33144 <sw_timer_init+0xcc>)
   330b8:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   330ba:	4b23      	ldr	r3, [pc, #140]	; (33148 <sw_timer_init+0xd0>)
   330bc:	4798      	blx	r3
   330be:	0004      	movs	r4, r0
   330c0:	683b      	ldr	r3, [r7, #0]
   330c2:	885b      	ldrh	r3, [r3, #2]
   330c4:	001a      	movs	r2, r3
   330c6:	4b21      	ldr	r3, [pc, #132]	; (3314c <sw_timer_init+0xd4>)
   330c8:	0011      	movs	r1, r2
   330ca:	22fa      	movs	r2, #250	; 0xfa
   330cc:	0210      	lsls	r0, r2, #8
   330ce:	4798      	blx	r3
   330d0:	0003      	movs	r3, r0
   330d2:	001a      	movs	r2, r3
   330d4:	4b1e      	ldr	r3, [pc, #120]	; (33150 <sw_timer_init+0xd8>)
   330d6:	0011      	movs	r1, r2
   330d8:	0020      	movs	r0, r4
   330da:	4798      	blx	r3
   330dc:	0003      	movs	r3, r0
   330de:	001a      	movs	r2, r3
   330e0:	2318      	movs	r3, #24
   330e2:	18fb      	adds	r3, r7, r3
   330e4:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   330e6:	2318      	movs	r3, #24
   330e8:	18fb      	adds	r3, r7, r3
   330ea:	2205      	movs	r2, #5
   330ec:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   330ee:	683b      	ldr	r3, [r7, #0]
   330f0:	781b      	ldrb	r3, [r3, #0]
   330f2:	001a      	movs	r2, r3
   330f4:	230c      	movs	r3, #12
   330f6:	18fb      	adds	r3, r7, r3
   330f8:	0092      	lsls	r2, r2, #2
   330fa:	58d1      	ldr	r1, [r2, r3]
   330fc:	2318      	movs	r3, #24
   330fe:	18fa      	adds	r2, r7, r3
   33100:	23bc      	movs	r3, #188	; 0xbc
   33102:	18fb      	adds	r3, r7, r3
   33104:	681b      	ldr	r3, [r3, #0]
   33106:	0018      	movs	r0, r3
   33108:	4b12      	ldr	r3, [pc, #72]	; (33154 <sw_timer_init+0xdc>)
   3310a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3310c:	683b      	ldr	r3, [r7, #0]
   3310e:	785b      	ldrb	r3, [r3, #1]
   33110:	3308      	adds	r3, #8
   33112:	b2da      	uxtb	r2, r3
   33114:	4910      	ldr	r1, [pc, #64]	; (33158 <sw_timer_init+0xe0>)
   33116:	23bc      	movs	r3, #188	; 0xbc
   33118:	18fb      	adds	r3, r7, r3
   3311a:	681b      	ldr	r3, [r3, #0]
   3311c:	0018      	movs	r0, r3
   3311e:	4b0f      	ldr	r3, [pc, #60]	; (3315c <sw_timer_init+0xe4>)
   33120:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   33122:	683b      	ldr	r3, [r7, #0]
   33124:	785b      	ldrb	r3, [r3, #1]
   33126:	3308      	adds	r3, #8
   33128:	b2da      	uxtb	r2, r3
   3312a:	23bc      	movs	r3, #188	; 0xbc
   3312c:	18fb      	adds	r3, r7, r3
   3312e:	681b      	ldr	r3, [r3, #0]
   33130:	0011      	movs	r1, r2
   33132:	0018      	movs	r0, r3
   33134:	4b0a      	ldr	r3, [pc, #40]	; (33160 <sw_timer_init+0xe8>)
   33136:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   33138:	46c0      	nop			; (mov r8, r8)
   3313a:	46bd      	mov	sp, r7
   3313c:	b031      	add	sp, #196	; 0xc4
   3313e:	bd90      	pop	{r4, r7, pc}
   33140:	0003ad68 	.word	0x0003ad68
   33144:	0002ae2d 	.word	0x0002ae2d
   33148:	00032fe1 	.word	0x00032fe1
   3314c:	00033749 	.word	0x00033749
   33150:	00033635 	.word	0x00033635
   33154:	0002b489 	.word	0x0002b489
   33158:	00033035 	.word	0x00033035
   3315c:	0002b9cd 	.word	0x0002b9cd
   33160:	0002ba0d 	.word	0x0002ba0d

00033164 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   33164:	b580      	push	{r7, lr}
   33166:	b084      	sub	sp, #16
   33168:	af00      	add	r7, sp, #0
   3316a:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   3316c:	687b      	ldr	r3, [r7, #4]
   3316e:	3314      	adds	r3, #20
   33170:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   33172:	68fb      	ldr	r3, [r7, #12]
   33174:	0018      	movs	r0, r3
   33176:	4b03      	ldr	r3, [pc, #12]	; (33184 <sw_timer_enable+0x20>)
   33178:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   3317a:	46c0      	nop			; (mov r8, r8)
   3317c:	46bd      	mov	sp, r7
   3317e:	b004      	add	sp, #16
   33180:	bd80      	pop	{r7, pc}
   33182:	46c0      	nop			; (mov r8, r8)
   33184:	00033005 	.word	0x00033005

00033188 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   33188:	b580      	push	{r7, lr}
   3318a:	b086      	sub	sp, #24
   3318c:	af00      	add	r7, sp, #0
   3318e:	60f8      	str	r0, [r7, #12]
   33190:	60b9      	str	r1, [r7, #8]
   33192:	607a      	str	r2, [r7, #4]
   33194:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   33196:	2300      	movs	r3, #0
   33198:	617b      	str	r3, [r7, #20]
   3319a:	e032      	b.n	33202 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   3319c:	68f9      	ldr	r1, [r7, #12]
   3319e:	697a      	ldr	r2, [r7, #20]
   331a0:	0013      	movs	r3, r2
   331a2:	009b      	lsls	r3, r3, #2
   331a4:	189b      	adds	r3, r3, r2
   331a6:	009b      	lsls	r3, r3, #2
   331a8:	5c5b      	ldrb	r3, [r3, r1]
   331aa:	07db      	lsls	r3, r3, #31
   331ac:	0fdb      	lsrs	r3, r3, #31
   331ae:	b2db      	uxtb	r3, r3
   331b0:	2b00      	cmp	r3, #0
   331b2:	d123      	bne.n	331fc <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   331b4:	697a      	ldr	r2, [r7, #20]
   331b6:	0013      	movs	r3, r2
   331b8:	009b      	lsls	r3, r3, #2
   331ba:	189b      	adds	r3, r3, r2
   331bc:	009b      	lsls	r3, r3, #2
   331be:	68fa      	ldr	r2, [r7, #12]
   331c0:	18d3      	adds	r3, r2, r3
   331c2:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   331c4:	693b      	ldr	r3, [r7, #16]
   331c6:	68ba      	ldr	r2, [r7, #8]
   331c8:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   331ca:	693b      	ldr	r3, [r7, #16]
   331cc:	781a      	ldrb	r2, [r3, #0]
   331ce:	2102      	movs	r1, #2
   331d0:	438a      	bics	r2, r1
   331d2:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   331d4:	693b      	ldr	r3, [r7, #16]
   331d6:	687a      	ldr	r2, [r7, #4]
   331d8:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   331da:	68fb      	ldr	r3, [r7, #12]
   331dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   331de:	4b0d      	ldr	r3, [pc, #52]	; (33214 <sw_timer_register_callback+0x8c>)
   331e0:	0011      	movs	r1, r2
   331e2:	6838      	ldr	r0, [r7, #0]
   331e4:	4798      	blx	r3
   331e6:	0003      	movs	r3, r0
   331e8:	001a      	movs	r2, r3
   331ea:	693b      	ldr	r3, [r7, #16]
   331ec:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   331ee:	693b      	ldr	r3, [r7, #16]
   331f0:	781a      	ldrb	r2, [r3, #0]
   331f2:	2101      	movs	r1, #1
   331f4:	430a      	orrs	r2, r1
   331f6:	701a      	strb	r2, [r3, #0]
			return index;
   331f8:	697b      	ldr	r3, [r7, #20]
   331fa:	e007      	b.n	3320c <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   331fc:	697b      	ldr	r3, [r7, #20]
   331fe:	3301      	adds	r3, #1
   33200:	617b      	str	r3, [r7, #20]
   33202:	697b      	ldr	r3, [r7, #20]
   33204:	2b00      	cmp	r3, #0
   33206:	ddc9      	ble.n	3319c <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   33208:	2301      	movs	r3, #1
   3320a:	425b      	negs	r3, r3
}
   3320c:	0018      	movs	r0, r3
   3320e:	46bd      	mov	sp, r7
   33210:	b006      	add	sp, #24
   33212:	bd80      	pop	{r7, pc}
   33214:	00033635 	.word	0x00033635

00033218 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   33218:	b580      	push	{r7, lr}
   3321a:	b086      	sub	sp, #24
   3321c:	af00      	add	r7, sp, #0
   3321e:	60f8      	str	r0, [r7, #12]
   33220:	60b9      	str	r1, [r7, #8]
   33222:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   33224:	68ba      	ldr	r2, [r7, #8]
   33226:	0013      	movs	r3, r2
   33228:	009b      	lsls	r3, r3, #2
   3322a:	189b      	adds	r3, r3, r2
   3322c:	009b      	lsls	r3, r3, #2
   3322e:	68fa      	ldr	r2, [r7, #12]
   33230:	18d3      	adds	r3, r2, r3
   33232:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   33234:	697b      	ldr	r3, [r7, #20]
   33236:	781a      	ldrb	r2, [r3, #0]
   33238:	2102      	movs	r1, #2
   3323a:	430a      	orrs	r2, r1
   3323c:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   3323e:	68fb      	ldr	r3, [r7, #12]
   33240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   33242:	4b07      	ldr	r3, [pc, #28]	; (33260 <sw_timer_enable_callback+0x48>)
   33244:	0011      	movs	r1, r2
   33246:	6878      	ldr	r0, [r7, #4]
   33248:	4798      	blx	r3
   3324a:	0003      	movs	r3, r0
   3324c:	001a      	movs	r2, r3
   3324e:	4b05      	ldr	r3, [pc, #20]	; (33264 <sw_timer_enable_callback+0x4c>)
   33250:	681b      	ldr	r3, [r3, #0]
   33252:	18d2      	adds	r2, r2, r3
   33254:	697b      	ldr	r3, [r7, #20]
   33256:	611a      	str	r2, [r3, #16]
}
   33258:	46c0      	nop			; (mov r8, r8)
   3325a:	46bd      	mov	sp, r7
   3325c:	b006      	add	sp, #24
   3325e:	bd80      	pop	{r7, pc}
   33260:	00033635 	.word	0x00033635
   33264:	20004710 	.word	0x20004710

00033268 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   33268:	b580      	push	{r7, lr}
   3326a:	b084      	sub	sp, #16
   3326c:	af00      	add	r7, sp, #0
   3326e:	6078      	str	r0, [r7, #4]
   33270:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   33272:	683a      	ldr	r2, [r7, #0]
   33274:	0013      	movs	r3, r2
   33276:	009b      	lsls	r3, r3, #2
   33278:	189b      	adds	r3, r3, r2
   3327a:	009b      	lsls	r3, r3, #2
   3327c:	687a      	ldr	r2, [r7, #4]
   3327e:	18d3      	adds	r3, r2, r3
   33280:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   33282:	68fb      	ldr	r3, [r7, #12]
   33284:	781a      	ldrb	r2, [r3, #0]
   33286:	2102      	movs	r1, #2
   33288:	438a      	bics	r2, r1
   3328a:	701a      	strb	r2, [r3, #0]
}
   3328c:	46c0      	nop			; (mov r8, r8)
   3328e:	46bd      	mov	sp, r7
   33290:	b004      	add	sp, #16
   33292:	bd80      	pop	{r7, pc}

00033294 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   33294:	b590      	push	{r4, r7, lr}
   33296:	b085      	sub	sp, #20
   33298:	af00      	add	r7, sp, #0
   3329a:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3329c:	2300      	movs	r3, #0
   3329e:	60fb      	str	r3, [r7, #12]
   332a0:	e053      	b.n	3334a <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   332a2:	6879      	ldr	r1, [r7, #4]
   332a4:	68fa      	ldr	r2, [r7, #12]
   332a6:	0013      	movs	r3, r2
   332a8:	009b      	lsls	r3, r3, #2
   332aa:	189b      	adds	r3, r3, r2
   332ac:	009b      	lsls	r3, r3, #2
   332ae:	5c5b      	ldrb	r3, [r3, r1]
   332b0:	07db      	lsls	r3, r3, #31
   332b2:	0fdb      	lsrs	r3, r3, #31
   332b4:	b2db      	uxtb	r3, r3
   332b6:	2b00      	cmp	r3, #0
   332b8:	d044      	beq.n	33344 <sw_timer_task+0xb0>
   332ba:	6879      	ldr	r1, [r7, #4]
   332bc:	68fa      	ldr	r2, [r7, #12]
   332be:	0013      	movs	r3, r2
   332c0:	009b      	lsls	r3, r3, #2
   332c2:	189b      	adds	r3, r3, r2
   332c4:	009b      	lsls	r3, r3, #2
   332c6:	5c5b      	ldrb	r3, [r3, r1]
   332c8:	079b      	lsls	r3, r3, #30
   332ca:	0fdb      	lsrs	r3, r3, #31
   332cc:	b2db      	uxtb	r3, r3
   332ce:	2b00      	cmp	r3, #0
   332d0:	d038      	beq.n	33344 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   332d2:	68fa      	ldr	r2, [r7, #12]
   332d4:	0013      	movs	r3, r2
   332d6:	009b      	lsls	r3, r3, #2
   332d8:	189b      	adds	r3, r3, r2
   332da:	009b      	lsls	r3, r3, #2
   332dc:	687a      	ldr	r2, [r7, #4]
   332de:	18d3      	adds	r3, r2, r3
   332e0:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   332e2:	68bb      	ldr	r3, [r7, #8]
   332e4:	691a      	ldr	r2, [r3, #16]
   332e6:	4b1c      	ldr	r3, [pc, #112]	; (33358 <sw_timer_task+0xc4>)
   332e8:	681b      	ldr	r3, [r3, #0]
   332ea:	1ad3      	subs	r3, r2, r3
   332ec:	d52a      	bpl.n	33344 <sw_timer_task+0xb0>
   332ee:	68bb      	ldr	r3, [r7, #8]
   332f0:	781b      	ldrb	r3, [r3, #0]
   332f2:	2204      	movs	r2, #4
   332f4:	4013      	ands	r3, r2
   332f6:	b2db      	uxtb	r3, r3
   332f8:	2b00      	cmp	r3, #0
   332fa:	d123      	bne.n	33344 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   332fc:	68bb      	ldr	r3, [r7, #8]
   332fe:	781a      	ldrb	r2, [r3, #0]
   33300:	2104      	movs	r1, #4
   33302:	430a      	orrs	r2, r1
   33304:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   33306:	68bb      	ldr	r3, [r7, #8]
   33308:	68db      	ldr	r3, [r3, #12]
   3330a:	2b00      	cmp	r3, #0
   3330c:	d007      	beq.n	3331e <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   3330e:	68bb      	ldr	r3, [r7, #8]
   33310:	68da      	ldr	r2, [r3, #12]
   33312:	4b11      	ldr	r3, [pc, #68]	; (33358 <sw_timer_task+0xc4>)
   33314:	681b      	ldr	r3, [r3, #0]
   33316:	18d2      	adds	r2, r2, r3
   33318:	68bb      	ldr	r3, [r7, #8]
   3331a:	611a      	str	r2, [r3, #16]
   3331c:	e004      	b.n	33328 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   3331e:	68bb      	ldr	r3, [r7, #8]
   33320:	781a      	ldrb	r2, [r3, #0]
   33322:	2102      	movs	r1, #2
   33324:	438a      	bics	r2, r1
   33326:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   33328:	68bb      	ldr	r3, [r7, #8]
   3332a:	685c      	ldr	r4, [r3, #4]
   3332c:	68bb      	ldr	r3, [r7, #8]
   3332e:	689a      	ldr	r2, [r3, #8]
   33330:	68bb      	ldr	r3, [r7, #8]
   33332:	68db      	ldr	r3, [r3, #12]
   33334:	68f9      	ldr	r1, [r7, #12]
   33336:	6878      	ldr	r0, [r7, #4]
   33338:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   3333a:	68bb      	ldr	r3, [r7, #8]
   3333c:	781a      	ldrb	r2, [r3, #0]
   3333e:	2104      	movs	r1, #4
   33340:	438a      	bics	r2, r1
   33342:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   33344:	68fb      	ldr	r3, [r7, #12]
   33346:	3301      	adds	r3, #1
   33348:	60fb      	str	r3, [r7, #12]
   3334a:	68fb      	ldr	r3, [r7, #12]
   3334c:	2b00      	cmp	r3, #0
   3334e:	dda8      	ble.n	332a2 <sw_timer_task+0xe>
			}
		}
	}
}
   33350:	46c0      	nop			; (mov r8, r8)
   33352:	46bd      	mov	sp, r7
   33354:	b005      	add	sp, #20
   33356:	bd90      	pop	{r4, r7, pc}
   33358:	20004710 	.word	0x20004710

0003335c <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   3335c:	b580      	push	{r7, lr}
   3335e:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   33360:	4b06      	ldr	r3, [pc, #24]	; (3337c <main+0x20>)
   33362:	4798      	blx	r3
		//delay_ms(2000);
		//servo_setDuty(3);
		//delay_ms(2000);
	//}
    /* Initialize the UART console. */
    InitializeSerialConsole();
   33364:	4b06      	ldr	r3, [pc, #24]	; (33380 <main+0x24>)
   33366:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   33368:	2001      	movs	r0, #1
   3336a:	4b06      	ldr	r3, [pc, #24]	; (33384 <main+0x28>)
   3336c:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   3336e:	4b06      	ldr	r3, [pc, #24]	; (33388 <main+0x2c>)
   33370:	4798      	blx	r3

    return 0;  // Will not get here
   33372:	2300      	movs	r3, #0
}
   33374:	0018      	movs	r0, r3
   33376:	46bd      	mov	sp, r7
   33378:	bd80      	pop	{r7, pc}
   3337a:	46c0      	nop			; (mov r8, r8)
   3337c:	0002ad21 	.word	0x0002ad21
   33380:	0001e7c5 	.word	0x0001e7c5
   33384:	00018e8d 	.word	0x00018e8d
   33388:	0001ce1d 	.word	0x0001ce1d

0003338c <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   3338c:	b580      	push	{r7, lr}
   3338e:	b082      	sub	sp, #8
   33390:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   33392:	4b29      	ldr	r3, [pc, #164]	; (33438 <vApplicationDaemonTaskStartupHook+0xac>)
   33394:	0018      	movs	r0, r3
   33396:	4b29      	ldr	r3, [pc, #164]	; (3343c <vApplicationDaemonTaskStartupHook+0xb0>)
   33398:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   3339a:	4b29      	ldr	r3, [pc, #164]	; (33440 <vApplicationDaemonTaskStartupHook+0xb4>)
   3339c:	0018      	movs	r0, r3
   3339e:	4b27      	ldr	r3, [pc, #156]	; (3343c <vApplicationDaemonTaskStartupHook+0xb0>)
   333a0:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   333a2:	4b28      	ldr	r3, [pc, #160]	; (33444 <vApplicationDaemonTaskStartupHook+0xb8>)
   333a4:	4798      	blx	r3
   333a6:	1e03      	subs	r3, r0, #0
   333a8:	d004      	beq.n	333b4 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   333aa:	4b27      	ldr	r3, [pc, #156]	; (33448 <vApplicationDaemonTaskStartupHook+0xbc>)
   333ac:	0018      	movs	r0, r3
   333ae:	4b23      	ldr	r3, [pc, #140]	; (3343c <vApplicationDaemonTaskStartupHook+0xb0>)
   333b0:	4798      	blx	r3
   333b2:	e003      	b.n	333bc <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   333b4:	4b25      	ldr	r3, [pc, #148]	; (3344c <vApplicationDaemonTaskStartupHook+0xc0>)
   333b6:	0018      	movs	r0, r3
   333b8:	4b20      	ldr	r3, [pc, #128]	; (3343c <vApplicationDaemonTaskStartupHook+0xb0>)
   333ba:	4798      	blx	r3
    }

    if (0 != InitializeSeesaw()) {
   333bc:	4b24      	ldr	r3, [pc, #144]	; (33450 <vApplicationDaemonTaskStartupHook+0xc4>)
   333be:	4798      	blx	r3
   333c0:	1e03      	subs	r3, r0, #0
   333c2:	d004      	beq.n	333ce <vApplicationDaemonTaskStartupHook+0x42>
        SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   333c4:	4b23      	ldr	r3, [pc, #140]	; (33454 <vApplicationDaemonTaskStartupHook+0xc8>)
   333c6:	0018      	movs	r0, r3
   333c8:	4b1c      	ldr	r3, [pc, #112]	; (3343c <vApplicationDaemonTaskStartupHook+0xb0>)
   333ca:	4798      	blx	r3
   333cc:	e003      	b.n	333d6 <vApplicationDaemonTaskStartupHook+0x4a>
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
   333ce:	4b22      	ldr	r3, [pc, #136]	; (33458 <vApplicationDaemonTaskStartupHook+0xcc>)
   333d0:	0018      	movs	r0, r3
   333d2:	4b1a      	ldr	r3, [pc, #104]	; (3343c <vApplicationDaemonTaskStartupHook+0xb0>)
   333d4:	4798      	blx	r3
    }

    uint8_t whoamI = 0;
   333d6:	1dfb      	adds	r3, r7, #7
   333d8:	2200      	movs	r2, #0
   333da:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   333dc:	4b1f      	ldr	r3, [pc, #124]	; (3345c <vApplicationDaemonTaskStartupHook+0xd0>)
   333de:	4798      	blx	r3
   333e0:	0002      	movs	r2, r0
   333e2:	1dfb      	adds	r3, r7, #7
   333e4:	0019      	movs	r1, r3
   333e6:	0010      	movs	r0, r2
   333e8:	4b1d      	ldr	r3, [pc, #116]	; (33460 <vApplicationDaemonTaskStartupHook+0xd4>)
   333ea:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   333ec:	1dfb      	adds	r3, r7, #7
   333ee:	781b      	ldrb	r3, [r3, #0]
   333f0:	2b6c      	cmp	r3, #108	; 0x6c
   333f2:	d004      	beq.n	333fe <vApplicationDaemonTaskStartupHook+0x72>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   333f4:	4b1b      	ldr	r3, [pc, #108]	; (33464 <vApplicationDaemonTaskStartupHook+0xd8>)
   333f6:	0018      	movs	r0, r3
   333f8:	4b10      	ldr	r3, [pc, #64]	; (3343c <vApplicationDaemonTaskStartupHook+0xb0>)
   333fa:	4798      	blx	r3
   333fc:	e010      	b.n	33420 <vApplicationDaemonTaskStartupHook+0x94>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   333fe:	4b1a      	ldr	r3, [pc, #104]	; (33468 <vApplicationDaemonTaskStartupHook+0xdc>)
   33400:	0018      	movs	r0, r3
   33402:	4b0e      	ldr	r3, [pc, #56]	; (3343c <vApplicationDaemonTaskStartupHook+0xb0>)
   33404:	4798      	blx	r3
        if (InitImu() == 0) {
   33406:	4b19      	ldr	r3, [pc, #100]	; (3346c <vApplicationDaemonTaskStartupHook+0xe0>)
   33408:	4798      	blx	r3
   3340a:	1e03      	subs	r3, r0, #0
   3340c:	d104      	bne.n	33418 <vApplicationDaemonTaskStartupHook+0x8c>
            SerialConsoleWriteString("IMU initialized!\r\n");
   3340e:	4b18      	ldr	r3, [pc, #96]	; (33470 <vApplicationDaemonTaskStartupHook+0xe4>)
   33410:	0018      	movs	r0, r3
   33412:	4b0a      	ldr	r3, [pc, #40]	; (3343c <vApplicationDaemonTaskStartupHook+0xb0>)
   33414:	4798      	blx	r3
   33416:	e003      	b.n	33420 <vApplicationDaemonTaskStartupHook+0x94>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   33418:	4b16      	ldr	r3, [pc, #88]	; (33474 <vApplicationDaemonTaskStartupHook+0xe8>)
   3341a:	0018      	movs	r0, r3
   3341c:	4b07      	ldr	r3, [pc, #28]	; (3343c <vApplicationDaemonTaskStartupHook+0xb0>)
   3341e:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   33420:	4b15      	ldr	r3, [pc, #84]	; (33478 <vApplicationDaemonTaskStartupHook+0xec>)
   33422:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   33424:	4b15      	ldr	r3, [pc, #84]	; (3347c <vApplicationDaemonTaskStartupHook+0xf0>)
   33426:	681b      	ldr	r3, [r3, #0]
   33428:	0018      	movs	r0, r3
   3342a:	4b15      	ldr	r3, [pc, #84]	; (33480 <vApplicationDaemonTaskStartupHook+0xf4>)
   3342c:	4798      	blx	r3
}
   3342e:	46c0      	nop			; (mov r8, r8)
   33430:	46bd      	mov	sp, r7
   33432:	b002      	add	sp, #8
   33434:	bd80      	pop	{r7, pc}
   33436:	46c0      	nop			; (mov r8, r8)
   33438:	0003ad74 	.word	0x0003ad74
   3343c:	0001e835 	.word	0x0001e835
   33440:	0003ad98 	.word	0x0003ad98
   33444:	00014855 	.word	0x00014855
   33448:	0003adb0 	.word	0x0003adb0
   3344c:	0003add4 	.word	0x0003add4
   33450:	00015e39 	.word	0x00015e39
   33454:	0003adf0 	.word	0x0003adf0
   33458:	0003ae10 	.word	0x0003ae10
   3345c:	000159bd 	.word	0x000159bd
   33460:	000155c1 	.word	0x000155c1
   33464:	0003ae28 	.word	0x0003ae28
   33468:	0003ae3c 	.word	0x0003ae3c
   3346c:	000159cd 	.word	0x000159cd
   33470:	0003ae4c 	.word	0x0003ae4c
   33474:	0003ae60 	.word	0x0003ae60
   33478:	00033485 	.word	0x00033485
   3347c:	20004718 	.word	0x20004718
   33480:	0001ccc1 	.word	0x0001ccc1

00033484 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   33484:	b590      	push	{r4, r7, lr}
   33486:	b083      	sub	sp, #12
   33488:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   3348a:	4b44      	ldr	r3, [pc, #272]	; (3359c <StartTasks+0x118>)
   3348c:	4798      	blx	r3
   3348e:	0003      	movs	r3, r0
   33490:	4a43      	ldr	r2, [pc, #268]	; (335a0 <StartTasks+0x11c>)
   33492:	4844      	ldr	r0, [pc, #272]	; (335a4 <StartTasks+0x120>)
   33494:	2140      	movs	r1, #64	; 0x40
   33496:	4c44      	ldr	r4, [pc, #272]	; (335a8 <StartTasks+0x124>)
   33498:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3349a:	4b42      	ldr	r3, [pc, #264]	; (335a4 <StartTasks+0x120>)
   3349c:	0018      	movs	r0, r3
   3349e:	4b43      	ldr	r3, [pc, #268]	; (335ac <StartTasks+0x128>)
   334a0:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   334a2:	23c8      	movs	r3, #200	; 0xc8
   334a4:	005a      	lsls	r2, r3, #1
   334a6:	4942      	ldr	r1, [pc, #264]	; (335b0 <StartTasks+0x12c>)
   334a8:	4842      	ldr	r0, [pc, #264]	; (335b4 <StartTasks+0x130>)
   334aa:	4b43      	ldr	r3, [pc, #268]	; (335b8 <StartTasks+0x134>)
   334ac:	9301      	str	r3, [sp, #4]
   334ae:	2304      	movs	r3, #4
   334b0:	9300      	str	r3, [sp, #0]
   334b2:	2300      	movs	r3, #0
   334b4:	4c41      	ldr	r4, [pc, #260]	; (335bc <StartTasks+0x138>)
   334b6:	47a0      	blx	r4
   334b8:	0003      	movs	r3, r0
   334ba:	2b01      	cmp	r3, #1
   334bc:	d003      	beq.n	334c6 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   334be:	4b40      	ldr	r3, [pc, #256]	; (335c0 <StartTasks+0x13c>)
   334c0:	0018      	movs	r0, r3
   334c2:	4b3a      	ldr	r3, [pc, #232]	; (335ac <StartTasks+0x128>)
   334c4:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   334c6:	4b35      	ldr	r3, [pc, #212]	; (3359c <StartTasks+0x118>)
   334c8:	4798      	blx	r3
   334ca:	0003      	movs	r3, r0
   334cc:	4a3d      	ldr	r2, [pc, #244]	; (335c4 <StartTasks+0x140>)
   334ce:	4835      	ldr	r0, [pc, #212]	; (335a4 <StartTasks+0x120>)
   334d0:	2140      	movs	r1, #64	; 0x40
   334d2:	4c35      	ldr	r4, [pc, #212]	; (335a8 <StartTasks+0x124>)
   334d4:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   334d6:	4b33      	ldr	r3, [pc, #204]	; (335a4 <StartTasks+0x120>)
   334d8:	0018      	movs	r0, r3
   334da:	4b34      	ldr	r3, [pc, #208]	; (335ac <StartTasks+0x128>)
   334dc:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   334de:	23fa      	movs	r3, #250	; 0xfa
   334e0:	009a      	lsls	r2, r3, #2
   334e2:	4939      	ldr	r1, [pc, #228]	; (335c8 <StartTasks+0x144>)
   334e4:	4839      	ldr	r0, [pc, #228]	; (335cc <StartTasks+0x148>)
   334e6:	4b3a      	ldr	r3, [pc, #232]	; (335d0 <StartTasks+0x14c>)
   334e8:	9301      	str	r3, [sp, #4]
   334ea:	2303      	movs	r3, #3
   334ec:	9300      	str	r3, [sp, #0]
   334ee:	2300      	movs	r3, #0
   334f0:	4c32      	ldr	r4, [pc, #200]	; (335bc <StartTasks+0x138>)
   334f2:	47a0      	blx	r4
   334f4:	0003      	movs	r3, r0
   334f6:	2b01      	cmp	r3, #1
   334f8:	d003      	beq.n	33502 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   334fa:	4b36      	ldr	r3, [pc, #216]	; (335d4 <StartTasks+0x150>)
   334fc:	0018      	movs	r0, r3
   334fe:	4b2b      	ldr	r3, [pc, #172]	; (335ac <StartTasks+0x128>)
   33500:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   33502:	4b26      	ldr	r3, [pc, #152]	; (3359c <StartTasks+0x118>)
   33504:	4798      	blx	r3
   33506:	0003      	movs	r3, r0
   33508:	4a33      	ldr	r2, [pc, #204]	; (335d8 <StartTasks+0x154>)
   3350a:	4826      	ldr	r0, [pc, #152]	; (335a4 <StartTasks+0x120>)
   3350c:	2140      	movs	r1, #64	; 0x40
   3350e:	4c26      	ldr	r4, [pc, #152]	; (335a8 <StartTasks+0x124>)
   33510:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   33512:	4b24      	ldr	r3, [pc, #144]	; (335a4 <StartTasks+0x120>)
   33514:	0018      	movs	r0, r3
   33516:	4b25      	ldr	r3, [pc, #148]	; (335ac <StartTasks+0x128>)
   33518:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   3351a:	23c8      	movs	r3, #200	; 0xc8
   3351c:	005a      	lsls	r2, r3, #1
   3351e:	492f      	ldr	r1, [pc, #188]	; (335dc <StartTasks+0x158>)
   33520:	482f      	ldr	r0, [pc, #188]	; (335e0 <StartTasks+0x15c>)
   33522:	4b30      	ldr	r3, [pc, #192]	; (335e4 <StartTasks+0x160>)
   33524:	9301      	str	r3, [sp, #4]
   33526:	2304      	movs	r3, #4
   33528:	9300      	str	r3, [sp, #0]
   3352a:	2300      	movs	r3, #0
   3352c:	4c23      	ldr	r4, [pc, #140]	; (335bc <StartTasks+0x138>)
   3352e:	47a0      	blx	r4
   33530:	0003      	movs	r3, r0
   33532:	2b01      	cmp	r3, #1
   33534:	d003      	beq.n	3353e <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   33536:	4b2c      	ldr	r3, [pc, #176]	; (335e8 <StartTasks+0x164>)
   33538:	0018      	movs	r0, r3
   3353a:	4b1c      	ldr	r3, [pc, #112]	; (335ac <StartTasks+0x128>)
   3353c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   3353e:	4b17      	ldr	r3, [pc, #92]	; (3359c <StartTasks+0x118>)
   33540:	4798      	blx	r3
   33542:	0003      	movs	r3, r0
   33544:	4a29      	ldr	r2, [pc, #164]	; (335ec <StartTasks+0x168>)
   33546:	4817      	ldr	r0, [pc, #92]	; (335a4 <StartTasks+0x120>)
   33548:	2140      	movs	r1, #64	; 0x40
   3354a:	4c17      	ldr	r4, [pc, #92]	; (335a8 <StartTasks+0x124>)
   3354c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3354e:	4b15      	ldr	r3, [pc, #84]	; (335a4 <StartTasks+0x120>)
   33550:	0018      	movs	r0, r3
   33552:	4b16      	ldr	r3, [pc, #88]	; (335ac <StartTasks+0x128>)
   33554:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   33556:	2380      	movs	r3, #128	; 0x80
   33558:	005a      	lsls	r2, r3, #1
   3355a:	4925      	ldr	r1, [pc, #148]	; (335f0 <StartTasks+0x16c>)
   3355c:	4825      	ldr	r0, [pc, #148]	; (335f4 <StartTasks+0x170>)
   3355e:	4b26      	ldr	r3, [pc, #152]	; (335f8 <StartTasks+0x174>)
   33560:	9301      	str	r3, [sp, #4]
   33562:	2304      	movs	r3, #4
   33564:	9300      	str	r3, [sp, #0]
   33566:	2300      	movs	r3, #0
   33568:	4c14      	ldr	r4, [pc, #80]	; (335bc <StartTasks+0x138>)
   3356a:	47a0      	blx	r4
   3356c:	0003      	movs	r3, r0
   3356e:	2b01      	cmp	r3, #1
   33570:	d003      	beq.n	3357a <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   33572:	4b22      	ldr	r3, [pc, #136]	; (335fc <StartTasks+0x178>)
   33574:	0018      	movs	r0, r3
   33576:	4b0d      	ldr	r3, [pc, #52]	; (335ac <StartTasks+0x128>)
   33578:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   3357a:	4b08      	ldr	r3, [pc, #32]	; (3359c <StartTasks+0x118>)
   3357c:	4798      	blx	r3
   3357e:	0003      	movs	r3, r0
   33580:	4a1f      	ldr	r2, [pc, #124]	; (33600 <StartTasks+0x17c>)
   33582:	4808      	ldr	r0, [pc, #32]	; (335a4 <StartTasks+0x120>)
   33584:	2140      	movs	r1, #64	; 0x40
   33586:	4c08      	ldr	r4, [pc, #32]	; (335a8 <StartTasks+0x124>)
   33588:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3358a:	4b06      	ldr	r3, [pc, #24]	; (335a4 <StartTasks+0x120>)
   3358c:	0018      	movs	r0, r3
   3358e:	4b07      	ldr	r3, [pc, #28]	; (335ac <StartTasks+0x128>)
   33590:	4798      	blx	r3
}
   33592:	46c0      	nop			; (mov r8, r8)
   33594:	46bd      	mov	sp, r7
   33596:	b001      	add	sp, #4
   33598:	bd90      	pop	{r4, r7, pc}
   3359a:	46c0      	nop			; (mov r8, r8)
   3359c:	0001ae01 	.word	0x0001ae01
   335a0:	0003ae7c 	.word	0x0003ae7c
   335a4:	20005ce4 	.word	0x20005ce4
   335a8:	00035869 	.word	0x00035869
   335ac:	0001e835 	.word	0x0001e835
   335b0:	0003aea0 	.word	0x0003aea0
   335b4:	00013819 	.word	0x00013819
   335b8:	20004714 	.word	0x20004714
   335bc:	0001c845 	.word	0x0001c845
   335c0:	0003aeac 	.word	0x0003aeac
   335c4:	0003aed8 	.word	0x0003aed8
   335c8:	0003aef8 	.word	0x0003aef8
   335cc:	00017c25 	.word	0x00017c25
   335d0:	2000471c 	.word	0x2000471c
   335d4:	0003af04 	.word	0x0003af04
   335d8:	0003af30 	.word	0x0003af30
   335dc:	0003af50 	.word	0x0003af50
   335e0:	0001642d 	.word	0x0001642d
   335e4:	20004720 	.word	0x20004720
   335e8:	0003af58 	.word	0x0003af58
   335ec:	0003af84 	.word	0x0003af84
   335f0:	0003afa8 	.word	0x0003afa8
   335f4:	00014209 	.word	0x00014209
   335f8:	20004724 	.word	0x20004724
   335fc:	0003afb8 	.word	0x0003afb8
   33600:	0003afe8 	.word	0x0003afe8

00033604 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   33604:	b580      	push	{r7, lr}
   33606:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   33608:	4b02      	ldr	r3, [pc, #8]	; (33614 <vApplicationMallocFailedHook+0x10>)
   3360a:	0018      	movs	r0, r3
   3360c:	4b02      	ldr	r3, [pc, #8]	; (33618 <vApplicationMallocFailedHook+0x14>)
   3360e:	4798      	blx	r3
    while (1)
   33610:	e7fe      	b.n	33610 <vApplicationMallocFailedHook+0xc>
   33612:	46c0      	nop			; (mov r8, r8)
   33614:	0003b010 	.word	0x0003b010
   33618:	0001e835 	.word	0x0001e835

0003361c <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   3361c:	b580      	push	{r7, lr}
   3361e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   33620:	4b02      	ldr	r3, [pc, #8]	; (3362c <vApplicationStackOverflowHook+0x10>)
   33622:	0018      	movs	r0, r3
   33624:	4b02      	ldr	r3, [pc, #8]	; (33630 <vApplicationStackOverflowHook+0x14>)
   33626:	4798      	blx	r3
    while (1)
   33628:	e7fe      	b.n	33628 <vApplicationStackOverflowHook+0xc>
   3362a:	46c0      	nop			; (mov r8, r8)
   3362c:	0003b03c 	.word	0x0003b03c
   33630:	0001e835 	.word	0x0001e835

00033634 <__udivsi3>:
   33634:	2200      	movs	r2, #0
   33636:	0843      	lsrs	r3, r0, #1
   33638:	428b      	cmp	r3, r1
   3363a:	d374      	bcc.n	33726 <__udivsi3+0xf2>
   3363c:	0903      	lsrs	r3, r0, #4
   3363e:	428b      	cmp	r3, r1
   33640:	d35f      	bcc.n	33702 <__udivsi3+0xce>
   33642:	0a03      	lsrs	r3, r0, #8
   33644:	428b      	cmp	r3, r1
   33646:	d344      	bcc.n	336d2 <__udivsi3+0x9e>
   33648:	0b03      	lsrs	r3, r0, #12
   3364a:	428b      	cmp	r3, r1
   3364c:	d328      	bcc.n	336a0 <__udivsi3+0x6c>
   3364e:	0c03      	lsrs	r3, r0, #16
   33650:	428b      	cmp	r3, r1
   33652:	d30d      	bcc.n	33670 <__udivsi3+0x3c>
   33654:	22ff      	movs	r2, #255	; 0xff
   33656:	0209      	lsls	r1, r1, #8
   33658:	ba12      	rev	r2, r2
   3365a:	0c03      	lsrs	r3, r0, #16
   3365c:	428b      	cmp	r3, r1
   3365e:	d302      	bcc.n	33666 <__udivsi3+0x32>
   33660:	1212      	asrs	r2, r2, #8
   33662:	0209      	lsls	r1, r1, #8
   33664:	d065      	beq.n	33732 <__udivsi3+0xfe>
   33666:	0b03      	lsrs	r3, r0, #12
   33668:	428b      	cmp	r3, r1
   3366a:	d319      	bcc.n	336a0 <__udivsi3+0x6c>
   3366c:	e000      	b.n	33670 <__udivsi3+0x3c>
   3366e:	0a09      	lsrs	r1, r1, #8
   33670:	0bc3      	lsrs	r3, r0, #15
   33672:	428b      	cmp	r3, r1
   33674:	d301      	bcc.n	3367a <__udivsi3+0x46>
   33676:	03cb      	lsls	r3, r1, #15
   33678:	1ac0      	subs	r0, r0, r3
   3367a:	4152      	adcs	r2, r2
   3367c:	0b83      	lsrs	r3, r0, #14
   3367e:	428b      	cmp	r3, r1
   33680:	d301      	bcc.n	33686 <__udivsi3+0x52>
   33682:	038b      	lsls	r3, r1, #14
   33684:	1ac0      	subs	r0, r0, r3
   33686:	4152      	adcs	r2, r2
   33688:	0b43      	lsrs	r3, r0, #13
   3368a:	428b      	cmp	r3, r1
   3368c:	d301      	bcc.n	33692 <__udivsi3+0x5e>
   3368e:	034b      	lsls	r3, r1, #13
   33690:	1ac0      	subs	r0, r0, r3
   33692:	4152      	adcs	r2, r2
   33694:	0b03      	lsrs	r3, r0, #12
   33696:	428b      	cmp	r3, r1
   33698:	d301      	bcc.n	3369e <__udivsi3+0x6a>
   3369a:	030b      	lsls	r3, r1, #12
   3369c:	1ac0      	subs	r0, r0, r3
   3369e:	4152      	adcs	r2, r2
   336a0:	0ac3      	lsrs	r3, r0, #11
   336a2:	428b      	cmp	r3, r1
   336a4:	d301      	bcc.n	336aa <__udivsi3+0x76>
   336a6:	02cb      	lsls	r3, r1, #11
   336a8:	1ac0      	subs	r0, r0, r3
   336aa:	4152      	adcs	r2, r2
   336ac:	0a83      	lsrs	r3, r0, #10
   336ae:	428b      	cmp	r3, r1
   336b0:	d301      	bcc.n	336b6 <__udivsi3+0x82>
   336b2:	028b      	lsls	r3, r1, #10
   336b4:	1ac0      	subs	r0, r0, r3
   336b6:	4152      	adcs	r2, r2
   336b8:	0a43      	lsrs	r3, r0, #9
   336ba:	428b      	cmp	r3, r1
   336bc:	d301      	bcc.n	336c2 <__udivsi3+0x8e>
   336be:	024b      	lsls	r3, r1, #9
   336c0:	1ac0      	subs	r0, r0, r3
   336c2:	4152      	adcs	r2, r2
   336c4:	0a03      	lsrs	r3, r0, #8
   336c6:	428b      	cmp	r3, r1
   336c8:	d301      	bcc.n	336ce <__udivsi3+0x9a>
   336ca:	020b      	lsls	r3, r1, #8
   336cc:	1ac0      	subs	r0, r0, r3
   336ce:	4152      	adcs	r2, r2
   336d0:	d2cd      	bcs.n	3366e <__udivsi3+0x3a>
   336d2:	09c3      	lsrs	r3, r0, #7
   336d4:	428b      	cmp	r3, r1
   336d6:	d301      	bcc.n	336dc <__udivsi3+0xa8>
   336d8:	01cb      	lsls	r3, r1, #7
   336da:	1ac0      	subs	r0, r0, r3
   336dc:	4152      	adcs	r2, r2
   336de:	0983      	lsrs	r3, r0, #6
   336e0:	428b      	cmp	r3, r1
   336e2:	d301      	bcc.n	336e8 <__udivsi3+0xb4>
   336e4:	018b      	lsls	r3, r1, #6
   336e6:	1ac0      	subs	r0, r0, r3
   336e8:	4152      	adcs	r2, r2
   336ea:	0943      	lsrs	r3, r0, #5
   336ec:	428b      	cmp	r3, r1
   336ee:	d301      	bcc.n	336f4 <__udivsi3+0xc0>
   336f0:	014b      	lsls	r3, r1, #5
   336f2:	1ac0      	subs	r0, r0, r3
   336f4:	4152      	adcs	r2, r2
   336f6:	0903      	lsrs	r3, r0, #4
   336f8:	428b      	cmp	r3, r1
   336fa:	d301      	bcc.n	33700 <__udivsi3+0xcc>
   336fc:	010b      	lsls	r3, r1, #4
   336fe:	1ac0      	subs	r0, r0, r3
   33700:	4152      	adcs	r2, r2
   33702:	08c3      	lsrs	r3, r0, #3
   33704:	428b      	cmp	r3, r1
   33706:	d301      	bcc.n	3370c <__udivsi3+0xd8>
   33708:	00cb      	lsls	r3, r1, #3
   3370a:	1ac0      	subs	r0, r0, r3
   3370c:	4152      	adcs	r2, r2
   3370e:	0883      	lsrs	r3, r0, #2
   33710:	428b      	cmp	r3, r1
   33712:	d301      	bcc.n	33718 <__udivsi3+0xe4>
   33714:	008b      	lsls	r3, r1, #2
   33716:	1ac0      	subs	r0, r0, r3
   33718:	4152      	adcs	r2, r2
   3371a:	0843      	lsrs	r3, r0, #1
   3371c:	428b      	cmp	r3, r1
   3371e:	d301      	bcc.n	33724 <__udivsi3+0xf0>
   33720:	004b      	lsls	r3, r1, #1
   33722:	1ac0      	subs	r0, r0, r3
   33724:	4152      	adcs	r2, r2
   33726:	1a41      	subs	r1, r0, r1
   33728:	d200      	bcs.n	3372c <__udivsi3+0xf8>
   3372a:	4601      	mov	r1, r0
   3372c:	4152      	adcs	r2, r2
   3372e:	4610      	mov	r0, r2
   33730:	4770      	bx	lr
   33732:	e7ff      	b.n	33734 <__udivsi3+0x100>
   33734:	b501      	push	{r0, lr}
   33736:	2000      	movs	r0, #0
   33738:	f000 f8f0 	bl	3391c <__aeabi_idiv0>
   3373c:	bd02      	pop	{r1, pc}
   3373e:	46c0      	nop			; (mov r8, r8)

00033740 <__aeabi_uidivmod>:
   33740:	2900      	cmp	r1, #0
   33742:	d0f7      	beq.n	33734 <__udivsi3+0x100>
   33744:	e776      	b.n	33634 <__udivsi3>
   33746:	4770      	bx	lr

00033748 <__divsi3>:
   33748:	4603      	mov	r3, r0
   3374a:	430b      	orrs	r3, r1
   3374c:	d47f      	bmi.n	3384e <__divsi3+0x106>
   3374e:	2200      	movs	r2, #0
   33750:	0843      	lsrs	r3, r0, #1
   33752:	428b      	cmp	r3, r1
   33754:	d374      	bcc.n	33840 <__divsi3+0xf8>
   33756:	0903      	lsrs	r3, r0, #4
   33758:	428b      	cmp	r3, r1
   3375a:	d35f      	bcc.n	3381c <__divsi3+0xd4>
   3375c:	0a03      	lsrs	r3, r0, #8
   3375e:	428b      	cmp	r3, r1
   33760:	d344      	bcc.n	337ec <__divsi3+0xa4>
   33762:	0b03      	lsrs	r3, r0, #12
   33764:	428b      	cmp	r3, r1
   33766:	d328      	bcc.n	337ba <__divsi3+0x72>
   33768:	0c03      	lsrs	r3, r0, #16
   3376a:	428b      	cmp	r3, r1
   3376c:	d30d      	bcc.n	3378a <__divsi3+0x42>
   3376e:	22ff      	movs	r2, #255	; 0xff
   33770:	0209      	lsls	r1, r1, #8
   33772:	ba12      	rev	r2, r2
   33774:	0c03      	lsrs	r3, r0, #16
   33776:	428b      	cmp	r3, r1
   33778:	d302      	bcc.n	33780 <__divsi3+0x38>
   3377a:	1212      	asrs	r2, r2, #8
   3377c:	0209      	lsls	r1, r1, #8
   3377e:	d065      	beq.n	3384c <__divsi3+0x104>
   33780:	0b03      	lsrs	r3, r0, #12
   33782:	428b      	cmp	r3, r1
   33784:	d319      	bcc.n	337ba <__divsi3+0x72>
   33786:	e000      	b.n	3378a <__divsi3+0x42>
   33788:	0a09      	lsrs	r1, r1, #8
   3378a:	0bc3      	lsrs	r3, r0, #15
   3378c:	428b      	cmp	r3, r1
   3378e:	d301      	bcc.n	33794 <__divsi3+0x4c>
   33790:	03cb      	lsls	r3, r1, #15
   33792:	1ac0      	subs	r0, r0, r3
   33794:	4152      	adcs	r2, r2
   33796:	0b83      	lsrs	r3, r0, #14
   33798:	428b      	cmp	r3, r1
   3379a:	d301      	bcc.n	337a0 <__divsi3+0x58>
   3379c:	038b      	lsls	r3, r1, #14
   3379e:	1ac0      	subs	r0, r0, r3
   337a0:	4152      	adcs	r2, r2
   337a2:	0b43      	lsrs	r3, r0, #13
   337a4:	428b      	cmp	r3, r1
   337a6:	d301      	bcc.n	337ac <__divsi3+0x64>
   337a8:	034b      	lsls	r3, r1, #13
   337aa:	1ac0      	subs	r0, r0, r3
   337ac:	4152      	adcs	r2, r2
   337ae:	0b03      	lsrs	r3, r0, #12
   337b0:	428b      	cmp	r3, r1
   337b2:	d301      	bcc.n	337b8 <__divsi3+0x70>
   337b4:	030b      	lsls	r3, r1, #12
   337b6:	1ac0      	subs	r0, r0, r3
   337b8:	4152      	adcs	r2, r2
   337ba:	0ac3      	lsrs	r3, r0, #11
   337bc:	428b      	cmp	r3, r1
   337be:	d301      	bcc.n	337c4 <__divsi3+0x7c>
   337c0:	02cb      	lsls	r3, r1, #11
   337c2:	1ac0      	subs	r0, r0, r3
   337c4:	4152      	adcs	r2, r2
   337c6:	0a83      	lsrs	r3, r0, #10
   337c8:	428b      	cmp	r3, r1
   337ca:	d301      	bcc.n	337d0 <__divsi3+0x88>
   337cc:	028b      	lsls	r3, r1, #10
   337ce:	1ac0      	subs	r0, r0, r3
   337d0:	4152      	adcs	r2, r2
   337d2:	0a43      	lsrs	r3, r0, #9
   337d4:	428b      	cmp	r3, r1
   337d6:	d301      	bcc.n	337dc <__divsi3+0x94>
   337d8:	024b      	lsls	r3, r1, #9
   337da:	1ac0      	subs	r0, r0, r3
   337dc:	4152      	adcs	r2, r2
   337de:	0a03      	lsrs	r3, r0, #8
   337e0:	428b      	cmp	r3, r1
   337e2:	d301      	bcc.n	337e8 <__divsi3+0xa0>
   337e4:	020b      	lsls	r3, r1, #8
   337e6:	1ac0      	subs	r0, r0, r3
   337e8:	4152      	adcs	r2, r2
   337ea:	d2cd      	bcs.n	33788 <__divsi3+0x40>
   337ec:	09c3      	lsrs	r3, r0, #7
   337ee:	428b      	cmp	r3, r1
   337f0:	d301      	bcc.n	337f6 <__divsi3+0xae>
   337f2:	01cb      	lsls	r3, r1, #7
   337f4:	1ac0      	subs	r0, r0, r3
   337f6:	4152      	adcs	r2, r2
   337f8:	0983      	lsrs	r3, r0, #6
   337fa:	428b      	cmp	r3, r1
   337fc:	d301      	bcc.n	33802 <__divsi3+0xba>
   337fe:	018b      	lsls	r3, r1, #6
   33800:	1ac0      	subs	r0, r0, r3
   33802:	4152      	adcs	r2, r2
   33804:	0943      	lsrs	r3, r0, #5
   33806:	428b      	cmp	r3, r1
   33808:	d301      	bcc.n	3380e <__divsi3+0xc6>
   3380a:	014b      	lsls	r3, r1, #5
   3380c:	1ac0      	subs	r0, r0, r3
   3380e:	4152      	adcs	r2, r2
   33810:	0903      	lsrs	r3, r0, #4
   33812:	428b      	cmp	r3, r1
   33814:	d301      	bcc.n	3381a <__divsi3+0xd2>
   33816:	010b      	lsls	r3, r1, #4
   33818:	1ac0      	subs	r0, r0, r3
   3381a:	4152      	adcs	r2, r2
   3381c:	08c3      	lsrs	r3, r0, #3
   3381e:	428b      	cmp	r3, r1
   33820:	d301      	bcc.n	33826 <__divsi3+0xde>
   33822:	00cb      	lsls	r3, r1, #3
   33824:	1ac0      	subs	r0, r0, r3
   33826:	4152      	adcs	r2, r2
   33828:	0883      	lsrs	r3, r0, #2
   3382a:	428b      	cmp	r3, r1
   3382c:	d301      	bcc.n	33832 <__divsi3+0xea>
   3382e:	008b      	lsls	r3, r1, #2
   33830:	1ac0      	subs	r0, r0, r3
   33832:	4152      	adcs	r2, r2
   33834:	0843      	lsrs	r3, r0, #1
   33836:	428b      	cmp	r3, r1
   33838:	d301      	bcc.n	3383e <__divsi3+0xf6>
   3383a:	004b      	lsls	r3, r1, #1
   3383c:	1ac0      	subs	r0, r0, r3
   3383e:	4152      	adcs	r2, r2
   33840:	1a41      	subs	r1, r0, r1
   33842:	d200      	bcs.n	33846 <__divsi3+0xfe>
   33844:	4601      	mov	r1, r0
   33846:	4152      	adcs	r2, r2
   33848:	4610      	mov	r0, r2
   3384a:	4770      	bx	lr
   3384c:	e05d      	b.n	3390a <__divsi3+0x1c2>
   3384e:	0fca      	lsrs	r2, r1, #31
   33850:	d000      	beq.n	33854 <__divsi3+0x10c>
   33852:	4249      	negs	r1, r1
   33854:	1003      	asrs	r3, r0, #32
   33856:	d300      	bcc.n	3385a <__divsi3+0x112>
   33858:	4240      	negs	r0, r0
   3385a:	4053      	eors	r3, r2
   3385c:	2200      	movs	r2, #0
   3385e:	469c      	mov	ip, r3
   33860:	0903      	lsrs	r3, r0, #4
   33862:	428b      	cmp	r3, r1
   33864:	d32d      	bcc.n	338c2 <__divsi3+0x17a>
   33866:	0a03      	lsrs	r3, r0, #8
   33868:	428b      	cmp	r3, r1
   3386a:	d312      	bcc.n	33892 <__divsi3+0x14a>
   3386c:	22fc      	movs	r2, #252	; 0xfc
   3386e:	0189      	lsls	r1, r1, #6
   33870:	ba12      	rev	r2, r2
   33872:	0a03      	lsrs	r3, r0, #8
   33874:	428b      	cmp	r3, r1
   33876:	d30c      	bcc.n	33892 <__divsi3+0x14a>
   33878:	0189      	lsls	r1, r1, #6
   3387a:	1192      	asrs	r2, r2, #6
   3387c:	428b      	cmp	r3, r1
   3387e:	d308      	bcc.n	33892 <__divsi3+0x14a>
   33880:	0189      	lsls	r1, r1, #6
   33882:	1192      	asrs	r2, r2, #6
   33884:	428b      	cmp	r3, r1
   33886:	d304      	bcc.n	33892 <__divsi3+0x14a>
   33888:	0189      	lsls	r1, r1, #6
   3388a:	d03a      	beq.n	33902 <__divsi3+0x1ba>
   3388c:	1192      	asrs	r2, r2, #6
   3388e:	e000      	b.n	33892 <__divsi3+0x14a>
   33890:	0989      	lsrs	r1, r1, #6
   33892:	09c3      	lsrs	r3, r0, #7
   33894:	428b      	cmp	r3, r1
   33896:	d301      	bcc.n	3389c <__divsi3+0x154>
   33898:	01cb      	lsls	r3, r1, #7
   3389a:	1ac0      	subs	r0, r0, r3
   3389c:	4152      	adcs	r2, r2
   3389e:	0983      	lsrs	r3, r0, #6
   338a0:	428b      	cmp	r3, r1
   338a2:	d301      	bcc.n	338a8 <__divsi3+0x160>
   338a4:	018b      	lsls	r3, r1, #6
   338a6:	1ac0      	subs	r0, r0, r3
   338a8:	4152      	adcs	r2, r2
   338aa:	0943      	lsrs	r3, r0, #5
   338ac:	428b      	cmp	r3, r1
   338ae:	d301      	bcc.n	338b4 <__divsi3+0x16c>
   338b0:	014b      	lsls	r3, r1, #5
   338b2:	1ac0      	subs	r0, r0, r3
   338b4:	4152      	adcs	r2, r2
   338b6:	0903      	lsrs	r3, r0, #4
   338b8:	428b      	cmp	r3, r1
   338ba:	d301      	bcc.n	338c0 <__divsi3+0x178>
   338bc:	010b      	lsls	r3, r1, #4
   338be:	1ac0      	subs	r0, r0, r3
   338c0:	4152      	adcs	r2, r2
   338c2:	08c3      	lsrs	r3, r0, #3
   338c4:	428b      	cmp	r3, r1
   338c6:	d301      	bcc.n	338cc <__divsi3+0x184>
   338c8:	00cb      	lsls	r3, r1, #3
   338ca:	1ac0      	subs	r0, r0, r3
   338cc:	4152      	adcs	r2, r2
   338ce:	0883      	lsrs	r3, r0, #2
   338d0:	428b      	cmp	r3, r1
   338d2:	d301      	bcc.n	338d8 <__divsi3+0x190>
   338d4:	008b      	lsls	r3, r1, #2
   338d6:	1ac0      	subs	r0, r0, r3
   338d8:	4152      	adcs	r2, r2
   338da:	d2d9      	bcs.n	33890 <__divsi3+0x148>
   338dc:	0843      	lsrs	r3, r0, #1
   338de:	428b      	cmp	r3, r1
   338e0:	d301      	bcc.n	338e6 <__divsi3+0x19e>
   338e2:	004b      	lsls	r3, r1, #1
   338e4:	1ac0      	subs	r0, r0, r3
   338e6:	4152      	adcs	r2, r2
   338e8:	1a41      	subs	r1, r0, r1
   338ea:	d200      	bcs.n	338ee <__divsi3+0x1a6>
   338ec:	4601      	mov	r1, r0
   338ee:	4663      	mov	r3, ip
   338f0:	4152      	adcs	r2, r2
   338f2:	105b      	asrs	r3, r3, #1
   338f4:	4610      	mov	r0, r2
   338f6:	d301      	bcc.n	338fc <__divsi3+0x1b4>
   338f8:	4240      	negs	r0, r0
   338fa:	2b00      	cmp	r3, #0
   338fc:	d500      	bpl.n	33900 <__divsi3+0x1b8>
   338fe:	4249      	negs	r1, r1
   33900:	4770      	bx	lr
   33902:	4663      	mov	r3, ip
   33904:	105b      	asrs	r3, r3, #1
   33906:	d300      	bcc.n	3390a <__divsi3+0x1c2>
   33908:	4240      	negs	r0, r0
   3390a:	b501      	push	{r0, lr}
   3390c:	2000      	movs	r0, #0
   3390e:	f000 f805 	bl	3391c <__aeabi_idiv0>
   33912:	bd02      	pop	{r1, pc}

00033914 <__aeabi_idivmod>:
   33914:	2900      	cmp	r1, #0
   33916:	d0f8      	beq.n	3390a <__divsi3+0x1c2>
   33918:	e716      	b.n	33748 <__divsi3>
   3391a:	4770      	bx	lr

0003391c <__aeabi_idiv0>:
   3391c:	4770      	bx	lr
   3391e:	46c0      	nop			; (mov r8, r8)

00033920 <__aeabi_lmul>:
   33920:	b5f0      	push	{r4, r5, r6, r7, lr}
   33922:	46ce      	mov	lr, r9
   33924:	4647      	mov	r7, r8
   33926:	0415      	lsls	r5, r2, #16
   33928:	0c2d      	lsrs	r5, r5, #16
   3392a:	002e      	movs	r6, r5
   3392c:	b580      	push	{r7, lr}
   3392e:	0407      	lsls	r7, r0, #16
   33930:	0c14      	lsrs	r4, r2, #16
   33932:	0c3f      	lsrs	r7, r7, #16
   33934:	4699      	mov	r9, r3
   33936:	0c03      	lsrs	r3, r0, #16
   33938:	437e      	muls	r6, r7
   3393a:	435d      	muls	r5, r3
   3393c:	4367      	muls	r7, r4
   3393e:	4363      	muls	r3, r4
   33940:	197f      	adds	r7, r7, r5
   33942:	0c34      	lsrs	r4, r6, #16
   33944:	19e4      	adds	r4, r4, r7
   33946:	469c      	mov	ip, r3
   33948:	42a5      	cmp	r5, r4
   3394a:	d903      	bls.n	33954 <__aeabi_lmul+0x34>
   3394c:	2380      	movs	r3, #128	; 0x80
   3394e:	025b      	lsls	r3, r3, #9
   33950:	4698      	mov	r8, r3
   33952:	44c4      	add	ip, r8
   33954:	464b      	mov	r3, r9
   33956:	4351      	muls	r1, r2
   33958:	4343      	muls	r3, r0
   3395a:	0436      	lsls	r6, r6, #16
   3395c:	0c36      	lsrs	r6, r6, #16
   3395e:	0c25      	lsrs	r5, r4, #16
   33960:	0424      	lsls	r4, r4, #16
   33962:	4465      	add	r5, ip
   33964:	19a4      	adds	r4, r4, r6
   33966:	1859      	adds	r1, r3, r1
   33968:	1949      	adds	r1, r1, r5
   3396a:	0020      	movs	r0, r4
   3396c:	bc0c      	pop	{r2, r3}
   3396e:	4690      	mov	r8, r2
   33970:	4699      	mov	r9, r3
   33972:	bdf0      	pop	{r4, r5, r6, r7, pc}

00033974 <__aeabi_fmul>:
   33974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33976:	4657      	mov	r7, sl
   33978:	464e      	mov	r6, r9
   3397a:	4645      	mov	r5, r8
   3397c:	46de      	mov	lr, fp
   3397e:	b5e0      	push	{r5, r6, r7, lr}
   33980:	0247      	lsls	r7, r0, #9
   33982:	0046      	lsls	r6, r0, #1
   33984:	4688      	mov	r8, r1
   33986:	0a7f      	lsrs	r7, r7, #9
   33988:	0e36      	lsrs	r6, r6, #24
   3398a:	0fc4      	lsrs	r4, r0, #31
   3398c:	2e00      	cmp	r6, #0
   3398e:	d047      	beq.n	33a20 <__aeabi_fmul+0xac>
   33990:	2eff      	cmp	r6, #255	; 0xff
   33992:	d024      	beq.n	339de <__aeabi_fmul+0x6a>
   33994:	00fb      	lsls	r3, r7, #3
   33996:	2780      	movs	r7, #128	; 0x80
   33998:	04ff      	lsls	r7, r7, #19
   3399a:	431f      	orrs	r7, r3
   3399c:	2300      	movs	r3, #0
   3399e:	4699      	mov	r9, r3
   339a0:	469a      	mov	sl, r3
   339a2:	3e7f      	subs	r6, #127	; 0x7f
   339a4:	4643      	mov	r3, r8
   339a6:	025d      	lsls	r5, r3, #9
   339a8:	0058      	lsls	r0, r3, #1
   339aa:	0fdb      	lsrs	r3, r3, #31
   339ac:	0a6d      	lsrs	r5, r5, #9
   339ae:	0e00      	lsrs	r0, r0, #24
   339b0:	4698      	mov	r8, r3
   339b2:	d043      	beq.n	33a3c <__aeabi_fmul+0xc8>
   339b4:	28ff      	cmp	r0, #255	; 0xff
   339b6:	d03b      	beq.n	33a30 <__aeabi_fmul+0xbc>
   339b8:	00eb      	lsls	r3, r5, #3
   339ba:	2580      	movs	r5, #128	; 0x80
   339bc:	2200      	movs	r2, #0
   339be:	04ed      	lsls	r5, r5, #19
   339c0:	431d      	orrs	r5, r3
   339c2:	387f      	subs	r0, #127	; 0x7f
   339c4:	1836      	adds	r6, r6, r0
   339c6:	1c73      	adds	r3, r6, #1
   339c8:	4641      	mov	r1, r8
   339ca:	469b      	mov	fp, r3
   339cc:	464b      	mov	r3, r9
   339ce:	4061      	eors	r1, r4
   339d0:	4313      	orrs	r3, r2
   339d2:	2b0f      	cmp	r3, #15
   339d4:	d864      	bhi.n	33aa0 <__aeabi_fmul+0x12c>
   339d6:	4875      	ldr	r0, [pc, #468]	; (33bac <__aeabi_fmul+0x238>)
   339d8:	009b      	lsls	r3, r3, #2
   339da:	58c3      	ldr	r3, [r0, r3]
   339dc:	469f      	mov	pc, r3
   339de:	2f00      	cmp	r7, #0
   339e0:	d142      	bne.n	33a68 <__aeabi_fmul+0xf4>
   339e2:	2308      	movs	r3, #8
   339e4:	4699      	mov	r9, r3
   339e6:	3b06      	subs	r3, #6
   339e8:	26ff      	movs	r6, #255	; 0xff
   339ea:	469a      	mov	sl, r3
   339ec:	e7da      	b.n	339a4 <__aeabi_fmul+0x30>
   339ee:	4641      	mov	r1, r8
   339f0:	2a02      	cmp	r2, #2
   339f2:	d028      	beq.n	33a46 <__aeabi_fmul+0xd2>
   339f4:	2a03      	cmp	r2, #3
   339f6:	d100      	bne.n	339fa <__aeabi_fmul+0x86>
   339f8:	e0ce      	b.n	33b98 <__aeabi_fmul+0x224>
   339fa:	2a01      	cmp	r2, #1
   339fc:	d000      	beq.n	33a00 <__aeabi_fmul+0x8c>
   339fe:	e0ac      	b.n	33b5a <__aeabi_fmul+0x1e6>
   33a00:	4011      	ands	r1, r2
   33a02:	2000      	movs	r0, #0
   33a04:	2200      	movs	r2, #0
   33a06:	b2cc      	uxtb	r4, r1
   33a08:	0240      	lsls	r0, r0, #9
   33a0a:	05d2      	lsls	r2, r2, #23
   33a0c:	0a40      	lsrs	r0, r0, #9
   33a0e:	07e4      	lsls	r4, r4, #31
   33a10:	4310      	orrs	r0, r2
   33a12:	4320      	orrs	r0, r4
   33a14:	bc3c      	pop	{r2, r3, r4, r5}
   33a16:	4690      	mov	r8, r2
   33a18:	4699      	mov	r9, r3
   33a1a:	46a2      	mov	sl, r4
   33a1c:	46ab      	mov	fp, r5
   33a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33a20:	2f00      	cmp	r7, #0
   33a22:	d115      	bne.n	33a50 <__aeabi_fmul+0xdc>
   33a24:	2304      	movs	r3, #4
   33a26:	4699      	mov	r9, r3
   33a28:	3b03      	subs	r3, #3
   33a2a:	2600      	movs	r6, #0
   33a2c:	469a      	mov	sl, r3
   33a2e:	e7b9      	b.n	339a4 <__aeabi_fmul+0x30>
   33a30:	20ff      	movs	r0, #255	; 0xff
   33a32:	2202      	movs	r2, #2
   33a34:	2d00      	cmp	r5, #0
   33a36:	d0c5      	beq.n	339c4 <__aeabi_fmul+0x50>
   33a38:	2203      	movs	r2, #3
   33a3a:	e7c3      	b.n	339c4 <__aeabi_fmul+0x50>
   33a3c:	2d00      	cmp	r5, #0
   33a3e:	d119      	bne.n	33a74 <__aeabi_fmul+0x100>
   33a40:	2000      	movs	r0, #0
   33a42:	2201      	movs	r2, #1
   33a44:	e7be      	b.n	339c4 <__aeabi_fmul+0x50>
   33a46:	2401      	movs	r4, #1
   33a48:	22ff      	movs	r2, #255	; 0xff
   33a4a:	400c      	ands	r4, r1
   33a4c:	2000      	movs	r0, #0
   33a4e:	e7db      	b.n	33a08 <__aeabi_fmul+0x94>
   33a50:	0038      	movs	r0, r7
   33a52:	f001 fd65 	bl	35520 <__clzsi2>
   33a56:	2676      	movs	r6, #118	; 0x76
   33a58:	1f43      	subs	r3, r0, #5
   33a5a:	409f      	lsls	r7, r3
   33a5c:	2300      	movs	r3, #0
   33a5e:	4276      	negs	r6, r6
   33a60:	1a36      	subs	r6, r6, r0
   33a62:	4699      	mov	r9, r3
   33a64:	469a      	mov	sl, r3
   33a66:	e79d      	b.n	339a4 <__aeabi_fmul+0x30>
   33a68:	230c      	movs	r3, #12
   33a6a:	4699      	mov	r9, r3
   33a6c:	3b09      	subs	r3, #9
   33a6e:	26ff      	movs	r6, #255	; 0xff
   33a70:	469a      	mov	sl, r3
   33a72:	e797      	b.n	339a4 <__aeabi_fmul+0x30>
   33a74:	0028      	movs	r0, r5
   33a76:	f001 fd53 	bl	35520 <__clzsi2>
   33a7a:	1f43      	subs	r3, r0, #5
   33a7c:	409d      	lsls	r5, r3
   33a7e:	2376      	movs	r3, #118	; 0x76
   33a80:	425b      	negs	r3, r3
   33a82:	1a18      	subs	r0, r3, r0
   33a84:	2200      	movs	r2, #0
   33a86:	e79d      	b.n	339c4 <__aeabi_fmul+0x50>
   33a88:	2080      	movs	r0, #128	; 0x80
   33a8a:	2400      	movs	r4, #0
   33a8c:	03c0      	lsls	r0, r0, #15
   33a8e:	22ff      	movs	r2, #255	; 0xff
   33a90:	e7ba      	b.n	33a08 <__aeabi_fmul+0x94>
   33a92:	003d      	movs	r5, r7
   33a94:	4652      	mov	r2, sl
   33a96:	e7ab      	b.n	339f0 <__aeabi_fmul+0x7c>
   33a98:	003d      	movs	r5, r7
   33a9a:	0021      	movs	r1, r4
   33a9c:	4652      	mov	r2, sl
   33a9e:	e7a7      	b.n	339f0 <__aeabi_fmul+0x7c>
   33aa0:	0c3b      	lsrs	r3, r7, #16
   33aa2:	469c      	mov	ip, r3
   33aa4:	042a      	lsls	r2, r5, #16
   33aa6:	0c12      	lsrs	r2, r2, #16
   33aa8:	0c2b      	lsrs	r3, r5, #16
   33aaa:	0014      	movs	r4, r2
   33aac:	4660      	mov	r0, ip
   33aae:	4665      	mov	r5, ip
   33ab0:	043f      	lsls	r7, r7, #16
   33ab2:	0c3f      	lsrs	r7, r7, #16
   33ab4:	437c      	muls	r4, r7
   33ab6:	4342      	muls	r2, r0
   33ab8:	435d      	muls	r5, r3
   33aba:	437b      	muls	r3, r7
   33abc:	0c27      	lsrs	r7, r4, #16
   33abe:	189b      	adds	r3, r3, r2
   33ac0:	18ff      	adds	r7, r7, r3
   33ac2:	42ba      	cmp	r2, r7
   33ac4:	d903      	bls.n	33ace <__aeabi_fmul+0x15a>
   33ac6:	2380      	movs	r3, #128	; 0x80
   33ac8:	025b      	lsls	r3, r3, #9
   33aca:	469c      	mov	ip, r3
   33acc:	4465      	add	r5, ip
   33ace:	0424      	lsls	r4, r4, #16
   33ad0:	043a      	lsls	r2, r7, #16
   33ad2:	0c24      	lsrs	r4, r4, #16
   33ad4:	1912      	adds	r2, r2, r4
   33ad6:	0193      	lsls	r3, r2, #6
   33ad8:	1e5c      	subs	r4, r3, #1
   33ada:	41a3      	sbcs	r3, r4
   33adc:	0c3f      	lsrs	r7, r7, #16
   33ade:	0e92      	lsrs	r2, r2, #26
   33ae0:	197d      	adds	r5, r7, r5
   33ae2:	431a      	orrs	r2, r3
   33ae4:	01ad      	lsls	r5, r5, #6
   33ae6:	4315      	orrs	r5, r2
   33ae8:	012b      	lsls	r3, r5, #4
   33aea:	d504      	bpl.n	33af6 <__aeabi_fmul+0x182>
   33aec:	2301      	movs	r3, #1
   33aee:	465e      	mov	r6, fp
   33af0:	086a      	lsrs	r2, r5, #1
   33af2:	401d      	ands	r5, r3
   33af4:	4315      	orrs	r5, r2
   33af6:	0032      	movs	r2, r6
   33af8:	327f      	adds	r2, #127	; 0x7f
   33afa:	2a00      	cmp	r2, #0
   33afc:	dd25      	ble.n	33b4a <__aeabi_fmul+0x1d6>
   33afe:	076b      	lsls	r3, r5, #29
   33b00:	d004      	beq.n	33b0c <__aeabi_fmul+0x198>
   33b02:	230f      	movs	r3, #15
   33b04:	402b      	ands	r3, r5
   33b06:	2b04      	cmp	r3, #4
   33b08:	d000      	beq.n	33b0c <__aeabi_fmul+0x198>
   33b0a:	3504      	adds	r5, #4
   33b0c:	012b      	lsls	r3, r5, #4
   33b0e:	d503      	bpl.n	33b18 <__aeabi_fmul+0x1a4>
   33b10:	0032      	movs	r2, r6
   33b12:	4b27      	ldr	r3, [pc, #156]	; (33bb0 <__aeabi_fmul+0x23c>)
   33b14:	3280      	adds	r2, #128	; 0x80
   33b16:	401d      	ands	r5, r3
   33b18:	2afe      	cmp	r2, #254	; 0xfe
   33b1a:	dc94      	bgt.n	33a46 <__aeabi_fmul+0xd2>
   33b1c:	2401      	movs	r4, #1
   33b1e:	01a8      	lsls	r0, r5, #6
   33b20:	0a40      	lsrs	r0, r0, #9
   33b22:	b2d2      	uxtb	r2, r2
   33b24:	400c      	ands	r4, r1
   33b26:	e76f      	b.n	33a08 <__aeabi_fmul+0x94>
   33b28:	2080      	movs	r0, #128	; 0x80
   33b2a:	03c0      	lsls	r0, r0, #15
   33b2c:	4207      	tst	r7, r0
   33b2e:	d007      	beq.n	33b40 <__aeabi_fmul+0x1cc>
   33b30:	4205      	tst	r5, r0
   33b32:	d105      	bne.n	33b40 <__aeabi_fmul+0x1cc>
   33b34:	4328      	orrs	r0, r5
   33b36:	0240      	lsls	r0, r0, #9
   33b38:	0a40      	lsrs	r0, r0, #9
   33b3a:	4644      	mov	r4, r8
   33b3c:	22ff      	movs	r2, #255	; 0xff
   33b3e:	e763      	b.n	33a08 <__aeabi_fmul+0x94>
   33b40:	4338      	orrs	r0, r7
   33b42:	0240      	lsls	r0, r0, #9
   33b44:	0a40      	lsrs	r0, r0, #9
   33b46:	22ff      	movs	r2, #255	; 0xff
   33b48:	e75e      	b.n	33a08 <__aeabi_fmul+0x94>
   33b4a:	2401      	movs	r4, #1
   33b4c:	1aa3      	subs	r3, r4, r2
   33b4e:	2b1b      	cmp	r3, #27
   33b50:	dd05      	ble.n	33b5e <__aeabi_fmul+0x1ea>
   33b52:	400c      	ands	r4, r1
   33b54:	2200      	movs	r2, #0
   33b56:	2000      	movs	r0, #0
   33b58:	e756      	b.n	33a08 <__aeabi_fmul+0x94>
   33b5a:	465e      	mov	r6, fp
   33b5c:	e7cb      	b.n	33af6 <__aeabi_fmul+0x182>
   33b5e:	002a      	movs	r2, r5
   33b60:	2020      	movs	r0, #32
   33b62:	40da      	lsrs	r2, r3
   33b64:	1ac3      	subs	r3, r0, r3
   33b66:	409d      	lsls	r5, r3
   33b68:	002b      	movs	r3, r5
   33b6a:	1e5d      	subs	r5, r3, #1
   33b6c:	41ab      	sbcs	r3, r5
   33b6e:	4313      	orrs	r3, r2
   33b70:	075a      	lsls	r2, r3, #29
   33b72:	d004      	beq.n	33b7e <__aeabi_fmul+0x20a>
   33b74:	220f      	movs	r2, #15
   33b76:	401a      	ands	r2, r3
   33b78:	2a04      	cmp	r2, #4
   33b7a:	d000      	beq.n	33b7e <__aeabi_fmul+0x20a>
   33b7c:	3304      	adds	r3, #4
   33b7e:	015a      	lsls	r2, r3, #5
   33b80:	d504      	bpl.n	33b8c <__aeabi_fmul+0x218>
   33b82:	2401      	movs	r4, #1
   33b84:	2201      	movs	r2, #1
   33b86:	400c      	ands	r4, r1
   33b88:	2000      	movs	r0, #0
   33b8a:	e73d      	b.n	33a08 <__aeabi_fmul+0x94>
   33b8c:	2401      	movs	r4, #1
   33b8e:	019b      	lsls	r3, r3, #6
   33b90:	0a58      	lsrs	r0, r3, #9
   33b92:	400c      	ands	r4, r1
   33b94:	2200      	movs	r2, #0
   33b96:	e737      	b.n	33a08 <__aeabi_fmul+0x94>
   33b98:	2080      	movs	r0, #128	; 0x80
   33b9a:	2401      	movs	r4, #1
   33b9c:	03c0      	lsls	r0, r0, #15
   33b9e:	4328      	orrs	r0, r5
   33ba0:	0240      	lsls	r0, r0, #9
   33ba2:	0a40      	lsrs	r0, r0, #9
   33ba4:	400c      	ands	r4, r1
   33ba6:	22ff      	movs	r2, #255	; 0xff
   33ba8:	e72e      	b.n	33a08 <__aeabi_fmul+0x94>
   33baa:	46c0      	nop			; (mov r8, r8)
   33bac:	0003b064 	.word	0x0003b064
   33bb0:	f7ffffff 	.word	0xf7ffffff

00033bb4 <__aeabi_f2iz>:
   33bb4:	0241      	lsls	r1, r0, #9
   33bb6:	0043      	lsls	r3, r0, #1
   33bb8:	0fc2      	lsrs	r2, r0, #31
   33bba:	0a49      	lsrs	r1, r1, #9
   33bbc:	0e1b      	lsrs	r3, r3, #24
   33bbe:	2000      	movs	r0, #0
   33bc0:	2b7e      	cmp	r3, #126	; 0x7e
   33bc2:	dd0d      	ble.n	33be0 <__aeabi_f2iz+0x2c>
   33bc4:	2b9d      	cmp	r3, #157	; 0x9d
   33bc6:	dc0c      	bgt.n	33be2 <__aeabi_f2iz+0x2e>
   33bc8:	2080      	movs	r0, #128	; 0x80
   33bca:	0400      	lsls	r0, r0, #16
   33bcc:	4301      	orrs	r1, r0
   33bce:	2b95      	cmp	r3, #149	; 0x95
   33bd0:	dc0a      	bgt.n	33be8 <__aeabi_f2iz+0x34>
   33bd2:	2096      	movs	r0, #150	; 0x96
   33bd4:	1ac3      	subs	r3, r0, r3
   33bd6:	40d9      	lsrs	r1, r3
   33bd8:	4248      	negs	r0, r1
   33bda:	2a00      	cmp	r2, #0
   33bdc:	d100      	bne.n	33be0 <__aeabi_f2iz+0x2c>
   33bde:	0008      	movs	r0, r1
   33be0:	4770      	bx	lr
   33be2:	4b03      	ldr	r3, [pc, #12]	; (33bf0 <__aeabi_f2iz+0x3c>)
   33be4:	18d0      	adds	r0, r2, r3
   33be6:	e7fb      	b.n	33be0 <__aeabi_f2iz+0x2c>
   33be8:	3b96      	subs	r3, #150	; 0x96
   33bea:	4099      	lsls	r1, r3
   33bec:	e7f4      	b.n	33bd8 <__aeabi_f2iz+0x24>
   33bee:	46c0      	nop			; (mov r8, r8)
   33bf0:	7fffffff 	.word	0x7fffffff

00033bf4 <__aeabi_i2f>:
   33bf4:	b570      	push	{r4, r5, r6, lr}
   33bf6:	2800      	cmp	r0, #0
   33bf8:	d030      	beq.n	33c5c <__aeabi_i2f+0x68>
   33bfa:	17c3      	asrs	r3, r0, #31
   33bfc:	18c4      	adds	r4, r0, r3
   33bfe:	405c      	eors	r4, r3
   33c00:	0fc5      	lsrs	r5, r0, #31
   33c02:	0020      	movs	r0, r4
   33c04:	f001 fc8c 	bl	35520 <__clzsi2>
   33c08:	239e      	movs	r3, #158	; 0x9e
   33c0a:	1a1b      	subs	r3, r3, r0
   33c0c:	2b96      	cmp	r3, #150	; 0x96
   33c0e:	dc0d      	bgt.n	33c2c <__aeabi_i2f+0x38>
   33c10:	2296      	movs	r2, #150	; 0x96
   33c12:	1ad2      	subs	r2, r2, r3
   33c14:	4094      	lsls	r4, r2
   33c16:	002a      	movs	r2, r5
   33c18:	0264      	lsls	r4, r4, #9
   33c1a:	0a64      	lsrs	r4, r4, #9
   33c1c:	b2db      	uxtb	r3, r3
   33c1e:	0264      	lsls	r4, r4, #9
   33c20:	05db      	lsls	r3, r3, #23
   33c22:	0a60      	lsrs	r0, r4, #9
   33c24:	07d2      	lsls	r2, r2, #31
   33c26:	4318      	orrs	r0, r3
   33c28:	4310      	orrs	r0, r2
   33c2a:	bd70      	pop	{r4, r5, r6, pc}
   33c2c:	2b99      	cmp	r3, #153	; 0x99
   33c2e:	dc19      	bgt.n	33c64 <__aeabi_i2f+0x70>
   33c30:	2299      	movs	r2, #153	; 0x99
   33c32:	1ad2      	subs	r2, r2, r3
   33c34:	2a00      	cmp	r2, #0
   33c36:	dd29      	ble.n	33c8c <__aeabi_i2f+0x98>
   33c38:	4094      	lsls	r4, r2
   33c3a:	0022      	movs	r2, r4
   33c3c:	4c14      	ldr	r4, [pc, #80]	; (33c90 <__aeabi_i2f+0x9c>)
   33c3e:	4014      	ands	r4, r2
   33c40:	0751      	lsls	r1, r2, #29
   33c42:	d004      	beq.n	33c4e <__aeabi_i2f+0x5a>
   33c44:	210f      	movs	r1, #15
   33c46:	400a      	ands	r2, r1
   33c48:	2a04      	cmp	r2, #4
   33c4a:	d000      	beq.n	33c4e <__aeabi_i2f+0x5a>
   33c4c:	3404      	adds	r4, #4
   33c4e:	0162      	lsls	r2, r4, #5
   33c50:	d413      	bmi.n	33c7a <__aeabi_i2f+0x86>
   33c52:	01a4      	lsls	r4, r4, #6
   33c54:	0a64      	lsrs	r4, r4, #9
   33c56:	b2db      	uxtb	r3, r3
   33c58:	002a      	movs	r2, r5
   33c5a:	e7e0      	b.n	33c1e <__aeabi_i2f+0x2a>
   33c5c:	2200      	movs	r2, #0
   33c5e:	2300      	movs	r3, #0
   33c60:	2400      	movs	r4, #0
   33c62:	e7dc      	b.n	33c1e <__aeabi_i2f+0x2a>
   33c64:	2205      	movs	r2, #5
   33c66:	0021      	movs	r1, r4
   33c68:	1a12      	subs	r2, r2, r0
   33c6a:	40d1      	lsrs	r1, r2
   33c6c:	22b9      	movs	r2, #185	; 0xb9
   33c6e:	1ad2      	subs	r2, r2, r3
   33c70:	4094      	lsls	r4, r2
   33c72:	1e62      	subs	r2, r4, #1
   33c74:	4194      	sbcs	r4, r2
   33c76:	430c      	orrs	r4, r1
   33c78:	e7da      	b.n	33c30 <__aeabi_i2f+0x3c>
   33c7a:	4b05      	ldr	r3, [pc, #20]	; (33c90 <__aeabi_i2f+0x9c>)
   33c7c:	002a      	movs	r2, r5
   33c7e:	401c      	ands	r4, r3
   33c80:	239f      	movs	r3, #159	; 0x9f
   33c82:	01a4      	lsls	r4, r4, #6
   33c84:	1a1b      	subs	r3, r3, r0
   33c86:	0a64      	lsrs	r4, r4, #9
   33c88:	b2db      	uxtb	r3, r3
   33c8a:	e7c8      	b.n	33c1e <__aeabi_i2f+0x2a>
   33c8c:	0022      	movs	r2, r4
   33c8e:	e7d5      	b.n	33c3c <__aeabi_i2f+0x48>
   33c90:	fbffffff 	.word	0xfbffffff

00033c94 <__aeabi_dadd>:
   33c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33c96:	4645      	mov	r5, r8
   33c98:	46de      	mov	lr, fp
   33c9a:	4657      	mov	r7, sl
   33c9c:	464e      	mov	r6, r9
   33c9e:	030c      	lsls	r4, r1, #12
   33ca0:	b5e0      	push	{r5, r6, r7, lr}
   33ca2:	004e      	lsls	r6, r1, #1
   33ca4:	0fc9      	lsrs	r1, r1, #31
   33ca6:	4688      	mov	r8, r1
   33ca8:	000d      	movs	r5, r1
   33caa:	0a61      	lsrs	r1, r4, #9
   33cac:	0f44      	lsrs	r4, r0, #29
   33cae:	430c      	orrs	r4, r1
   33cb0:	00c7      	lsls	r7, r0, #3
   33cb2:	0319      	lsls	r1, r3, #12
   33cb4:	0058      	lsls	r0, r3, #1
   33cb6:	0fdb      	lsrs	r3, r3, #31
   33cb8:	469b      	mov	fp, r3
   33cba:	0a4b      	lsrs	r3, r1, #9
   33cbc:	0f51      	lsrs	r1, r2, #29
   33cbe:	430b      	orrs	r3, r1
   33cc0:	0d76      	lsrs	r6, r6, #21
   33cc2:	0d40      	lsrs	r0, r0, #21
   33cc4:	0019      	movs	r1, r3
   33cc6:	00d2      	lsls	r2, r2, #3
   33cc8:	45d8      	cmp	r8, fp
   33cca:	d100      	bne.n	33cce <__aeabi_dadd+0x3a>
   33ccc:	e0ae      	b.n	33e2c <__aeabi_dadd+0x198>
   33cce:	1a35      	subs	r5, r6, r0
   33cd0:	2d00      	cmp	r5, #0
   33cd2:	dc00      	bgt.n	33cd6 <__aeabi_dadd+0x42>
   33cd4:	e0f6      	b.n	33ec4 <__aeabi_dadd+0x230>
   33cd6:	2800      	cmp	r0, #0
   33cd8:	d10f      	bne.n	33cfa <__aeabi_dadd+0x66>
   33cda:	4313      	orrs	r3, r2
   33cdc:	d100      	bne.n	33ce0 <__aeabi_dadd+0x4c>
   33cde:	e0db      	b.n	33e98 <__aeabi_dadd+0x204>
   33ce0:	1e6b      	subs	r3, r5, #1
   33ce2:	2b00      	cmp	r3, #0
   33ce4:	d000      	beq.n	33ce8 <__aeabi_dadd+0x54>
   33ce6:	e137      	b.n	33f58 <__aeabi_dadd+0x2c4>
   33ce8:	1aba      	subs	r2, r7, r2
   33cea:	4297      	cmp	r7, r2
   33cec:	41bf      	sbcs	r7, r7
   33cee:	1a64      	subs	r4, r4, r1
   33cf0:	427f      	negs	r7, r7
   33cf2:	1be4      	subs	r4, r4, r7
   33cf4:	2601      	movs	r6, #1
   33cf6:	0017      	movs	r7, r2
   33cf8:	e024      	b.n	33d44 <__aeabi_dadd+0xb0>
   33cfa:	4bc6      	ldr	r3, [pc, #792]	; (34014 <__aeabi_dadd+0x380>)
   33cfc:	429e      	cmp	r6, r3
   33cfe:	d04d      	beq.n	33d9c <__aeabi_dadd+0x108>
   33d00:	2380      	movs	r3, #128	; 0x80
   33d02:	041b      	lsls	r3, r3, #16
   33d04:	4319      	orrs	r1, r3
   33d06:	2d38      	cmp	r5, #56	; 0x38
   33d08:	dd00      	ble.n	33d0c <__aeabi_dadd+0x78>
   33d0a:	e107      	b.n	33f1c <__aeabi_dadd+0x288>
   33d0c:	2d1f      	cmp	r5, #31
   33d0e:	dd00      	ble.n	33d12 <__aeabi_dadd+0x7e>
   33d10:	e138      	b.n	33f84 <__aeabi_dadd+0x2f0>
   33d12:	2020      	movs	r0, #32
   33d14:	1b43      	subs	r3, r0, r5
   33d16:	469a      	mov	sl, r3
   33d18:	000b      	movs	r3, r1
   33d1a:	4650      	mov	r0, sl
   33d1c:	4083      	lsls	r3, r0
   33d1e:	4699      	mov	r9, r3
   33d20:	0013      	movs	r3, r2
   33d22:	4648      	mov	r0, r9
   33d24:	40eb      	lsrs	r3, r5
   33d26:	4318      	orrs	r0, r3
   33d28:	0003      	movs	r3, r0
   33d2a:	4650      	mov	r0, sl
   33d2c:	4082      	lsls	r2, r0
   33d2e:	1e50      	subs	r0, r2, #1
   33d30:	4182      	sbcs	r2, r0
   33d32:	40e9      	lsrs	r1, r5
   33d34:	431a      	orrs	r2, r3
   33d36:	1aba      	subs	r2, r7, r2
   33d38:	1a61      	subs	r1, r4, r1
   33d3a:	4297      	cmp	r7, r2
   33d3c:	41a4      	sbcs	r4, r4
   33d3e:	0017      	movs	r7, r2
   33d40:	4264      	negs	r4, r4
   33d42:	1b0c      	subs	r4, r1, r4
   33d44:	0223      	lsls	r3, r4, #8
   33d46:	d562      	bpl.n	33e0e <__aeabi_dadd+0x17a>
   33d48:	0264      	lsls	r4, r4, #9
   33d4a:	0a65      	lsrs	r5, r4, #9
   33d4c:	2d00      	cmp	r5, #0
   33d4e:	d100      	bne.n	33d52 <__aeabi_dadd+0xbe>
   33d50:	e0df      	b.n	33f12 <__aeabi_dadd+0x27e>
   33d52:	0028      	movs	r0, r5
   33d54:	f001 fbe4 	bl	35520 <__clzsi2>
   33d58:	0003      	movs	r3, r0
   33d5a:	3b08      	subs	r3, #8
   33d5c:	2b1f      	cmp	r3, #31
   33d5e:	dd00      	ble.n	33d62 <__aeabi_dadd+0xce>
   33d60:	e0d2      	b.n	33f08 <__aeabi_dadd+0x274>
   33d62:	2220      	movs	r2, #32
   33d64:	003c      	movs	r4, r7
   33d66:	1ad2      	subs	r2, r2, r3
   33d68:	409d      	lsls	r5, r3
   33d6a:	40d4      	lsrs	r4, r2
   33d6c:	409f      	lsls	r7, r3
   33d6e:	4325      	orrs	r5, r4
   33d70:	429e      	cmp	r6, r3
   33d72:	dd00      	ble.n	33d76 <__aeabi_dadd+0xe2>
   33d74:	e0c4      	b.n	33f00 <__aeabi_dadd+0x26c>
   33d76:	1b9e      	subs	r6, r3, r6
   33d78:	1c73      	adds	r3, r6, #1
   33d7a:	2b1f      	cmp	r3, #31
   33d7c:	dd00      	ble.n	33d80 <__aeabi_dadd+0xec>
   33d7e:	e0f1      	b.n	33f64 <__aeabi_dadd+0x2d0>
   33d80:	2220      	movs	r2, #32
   33d82:	0038      	movs	r0, r7
   33d84:	0029      	movs	r1, r5
   33d86:	1ad2      	subs	r2, r2, r3
   33d88:	40d8      	lsrs	r0, r3
   33d8a:	4091      	lsls	r1, r2
   33d8c:	4097      	lsls	r7, r2
   33d8e:	002c      	movs	r4, r5
   33d90:	4301      	orrs	r1, r0
   33d92:	1e78      	subs	r0, r7, #1
   33d94:	4187      	sbcs	r7, r0
   33d96:	40dc      	lsrs	r4, r3
   33d98:	2600      	movs	r6, #0
   33d9a:	430f      	orrs	r7, r1
   33d9c:	077b      	lsls	r3, r7, #29
   33d9e:	d009      	beq.n	33db4 <__aeabi_dadd+0x120>
   33da0:	230f      	movs	r3, #15
   33da2:	403b      	ands	r3, r7
   33da4:	2b04      	cmp	r3, #4
   33da6:	d005      	beq.n	33db4 <__aeabi_dadd+0x120>
   33da8:	1d3b      	adds	r3, r7, #4
   33daa:	42bb      	cmp	r3, r7
   33dac:	41bf      	sbcs	r7, r7
   33dae:	427f      	negs	r7, r7
   33db0:	19e4      	adds	r4, r4, r7
   33db2:	001f      	movs	r7, r3
   33db4:	0223      	lsls	r3, r4, #8
   33db6:	d52c      	bpl.n	33e12 <__aeabi_dadd+0x17e>
   33db8:	4b96      	ldr	r3, [pc, #600]	; (34014 <__aeabi_dadd+0x380>)
   33dba:	3601      	adds	r6, #1
   33dbc:	429e      	cmp	r6, r3
   33dbe:	d100      	bne.n	33dc2 <__aeabi_dadd+0x12e>
   33dc0:	e09a      	b.n	33ef8 <__aeabi_dadd+0x264>
   33dc2:	4645      	mov	r5, r8
   33dc4:	4b94      	ldr	r3, [pc, #592]	; (34018 <__aeabi_dadd+0x384>)
   33dc6:	08ff      	lsrs	r7, r7, #3
   33dc8:	401c      	ands	r4, r3
   33dca:	0760      	lsls	r0, r4, #29
   33dcc:	0576      	lsls	r6, r6, #21
   33dce:	0264      	lsls	r4, r4, #9
   33dd0:	4307      	orrs	r7, r0
   33dd2:	0b24      	lsrs	r4, r4, #12
   33dd4:	0d76      	lsrs	r6, r6, #21
   33dd6:	2100      	movs	r1, #0
   33dd8:	0324      	lsls	r4, r4, #12
   33dda:	0b23      	lsrs	r3, r4, #12
   33ddc:	0d0c      	lsrs	r4, r1, #20
   33dde:	4a8f      	ldr	r2, [pc, #572]	; (3401c <__aeabi_dadd+0x388>)
   33de0:	0524      	lsls	r4, r4, #20
   33de2:	431c      	orrs	r4, r3
   33de4:	4014      	ands	r4, r2
   33de6:	0533      	lsls	r3, r6, #20
   33de8:	4323      	orrs	r3, r4
   33dea:	005b      	lsls	r3, r3, #1
   33dec:	07ed      	lsls	r5, r5, #31
   33dee:	085b      	lsrs	r3, r3, #1
   33df0:	432b      	orrs	r3, r5
   33df2:	0038      	movs	r0, r7
   33df4:	0019      	movs	r1, r3
   33df6:	bc3c      	pop	{r2, r3, r4, r5}
   33df8:	4690      	mov	r8, r2
   33dfa:	4699      	mov	r9, r3
   33dfc:	46a2      	mov	sl, r4
   33dfe:	46ab      	mov	fp, r5
   33e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33e02:	4664      	mov	r4, ip
   33e04:	4304      	orrs	r4, r0
   33e06:	d100      	bne.n	33e0a <__aeabi_dadd+0x176>
   33e08:	e211      	b.n	3422e <__aeabi_dadd+0x59a>
   33e0a:	0004      	movs	r4, r0
   33e0c:	4667      	mov	r7, ip
   33e0e:	077b      	lsls	r3, r7, #29
   33e10:	d1c6      	bne.n	33da0 <__aeabi_dadd+0x10c>
   33e12:	4645      	mov	r5, r8
   33e14:	0760      	lsls	r0, r4, #29
   33e16:	08ff      	lsrs	r7, r7, #3
   33e18:	4307      	orrs	r7, r0
   33e1a:	08e4      	lsrs	r4, r4, #3
   33e1c:	4b7d      	ldr	r3, [pc, #500]	; (34014 <__aeabi_dadd+0x380>)
   33e1e:	429e      	cmp	r6, r3
   33e20:	d030      	beq.n	33e84 <__aeabi_dadd+0x1f0>
   33e22:	0324      	lsls	r4, r4, #12
   33e24:	0576      	lsls	r6, r6, #21
   33e26:	0b24      	lsrs	r4, r4, #12
   33e28:	0d76      	lsrs	r6, r6, #21
   33e2a:	e7d4      	b.n	33dd6 <__aeabi_dadd+0x142>
   33e2c:	1a33      	subs	r3, r6, r0
   33e2e:	469a      	mov	sl, r3
   33e30:	2b00      	cmp	r3, #0
   33e32:	dd78      	ble.n	33f26 <__aeabi_dadd+0x292>
   33e34:	2800      	cmp	r0, #0
   33e36:	d031      	beq.n	33e9c <__aeabi_dadd+0x208>
   33e38:	4876      	ldr	r0, [pc, #472]	; (34014 <__aeabi_dadd+0x380>)
   33e3a:	4286      	cmp	r6, r0
   33e3c:	d0ae      	beq.n	33d9c <__aeabi_dadd+0x108>
   33e3e:	2080      	movs	r0, #128	; 0x80
   33e40:	0400      	lsls	r0, r0, #16
   33e42:	4301      	orrs	r1, r0
   33e44:	4653      	mov	r3, sl
   33e46:	2b38      	cmp	r3, #56	; 0x38
   33e48:	dc00      	bgt.n	33e4c <__aeabi_dadd+0x1b8>
   33e4a:	e0e9      	b.n	34020 <__aeabi_dadd+0x38c>
   33e4c:	430a      	orrs	r2, r1
   33e4e:	1e51      	subs	r1, r2, #1
   33e50:	418a      	sbcs	r2, r1
   33e52:	2100      	movs	r1, #0
   33e54:	19d2      	adds	r2, r2, r7
   33e56:	42ba      	cmp	r2, r7
   33e58:	41bf      	sbcs	r7, r7
   33e5a:	1909      	adds	r1, r1, r4
   33e5c:	427c      	negs	r4, r7
   33e5e:	0017      	movs	r7, r2
   33e60:	190c      	adds	r4, r1, r4
   33e62:	0223      	lsls	r3, r4, #8
   33e64:	d5d3      	bpl.n	33e0e <__aeabi_dadd+0x17a>
   33e66:	4b6b      	ldr	r3, [pc, #428]	; (34014 <__aeabi_dadd+0x380>)
   33e68:	3601      	adds	r6, #1
   33e6a:	429e      	cmp	r6, r3
   33e6c:	d100      	bne.n	33e70 <__aeabi_dadd+0x1dc>
   33e6e:	e13a      	b.n	340e6 <__aeabi_dadd+0x452>
   33e70:	2001      	movs	r0, #1
   33e72:	4b69      	ldr	r3, [pc, #420]	; (34018 <__aeabi_dadd+0x384>)
   33e74:	401c      	ands	r4, r3
   33e76:	087b      	lsrs	r3, r7, #1
   33e78:	4007      	ands	r7, r0
   33e7a:	431f      	orrs	r7, r3
   33e7c:	07e0      	lsls	r0, r4, #31
   33e7e:	4307      	orrs	r7, r0
   33e80:	0864      	lsrs	r4, r4, #1
   33e82:	e78b      	b.n	33d9c <__aeabi_dadd+0x108>
   33e84:	0023      	movs	r3, r4
   33e86:	433b      	orrs	r3, r7
   33e88:	d100      	bne.n	33e8c <__aeabi_dadd+0x1f8>
   33e8a:	e1cb      	b.n	34224 <__aeabi_dadd+0x590>
   33e8c:	2280      	movs	r2, #128	; 0x80
   33e8e:	0312      	lsls	r2, r2, #12
   33e90:	4314      	orrs	r4, r2
   33e92:	0324      	lsls	r4, r4, #12
   33e94:	0b24      	lsrs	r4, r4, #12
   33e96:	e79e      	b.n	33dd6 <__aeabi_dadd+0x142>
   33e98:	002e      	movs	r6, r5
   33e9a:	e77f      	b.n	33d9c <__aeabi_dadd+0x108>
   33e9c:	0008      	movs	r0, r1
   33e9e:	4310      	orrs	r0, r2
   33ea0:	d100      	bne.n	33ea4 <__aeabi_dadd+0x210>
   33ea2:	e0b4      	b.n	3400e <__aeabi_dadd+0x37a>
   33ea4:	1e58      	subs	r0, r3, #1
   33ea6:	2800      	cmp	r0, #0
   33ea8:	d000      	beq.n	33eac <__aeabi_dadd+0x218>
   33eaa:	e0de      	b.n	3406a <__aeabi_dadd+0x3d6>
   33eac:	18ba      	adds	r2, r7, r2
   33eae:	42ba      	cmp	r2, r7
   33eb0:	419b      	sbcs	r3, r3
   33eb2:	1864      	adds	r4, r4, r1
   33eb4:	425b      	negs	r3, r3
   33eb6:	18e4      	adds	r4, r4, r3
   33eb8:	0017      	movs	r7, r2
   33eba:	2601      	movs	r6, #1
   33ebc:	0223      	lsls	r3, r4, #8
   33ebe:	d5a6      	bpl.n	33e0e <__aeabi_dadd+0x17a>
   33ec0:	2602      	movs	r6, #2
   33ec2:	e7d5      	b.n	33e70 <__aeabi_dadd+0x1dc>
   33ec4:	2d00      	cmp	r5, #0
   33ec6:	d16e      	bne.n	33fa6 <__aeabi_dadd+0x312>
   33ec8:	1c70      	adds	r0, r6, #1
   33eca:	0540      	lsls	r0, r0, #21
   33ecc:	0d40      	lsrs	r0, r0, #21
   33ece:	2801      	cmp	r0, #1
   33ed0:	dc00      	bgt.n	33ed4 <__aeabi_dadd+0x240>
   33ed2:	e0f9      	b.n	340c8 <__aeabi_dadd+0x434>
   33ed4:	1ab8      	subs	r0, r7, r2
   33ed6:	4684      	mov	ip, r0
   33ed8:	4287      	cmp	r7, r0
   33eda:	4180      	sbcs	r0, r0
   33edc:	1ae5      	subs	r5, r4, r3
   33ede:	4240      	negs	r0, r0
   33ee0:	1a2d      	subs	r5, r5, r0
   33ee2:	0228      	lsls	r0, r5, #8
   33ee4:	d400      	bmi.n	33ee8 <__aeabi_dadd+0x254>
   33ee6:	e089      	b.n	33ffc <__aeabi_dadd+0x368>
   33ee8:	1bd7      	subs	r7, r2, r7
   33eea:	42ba      	cmp	r2, r7
   33eec:	4192      	sbcs	r2, r2
   33eee:	1b1c      	subs	r4, r3, r4
   33ef0:	4252      	negs	r2, r2
   33ef2:	1aa5      	subs	r5, r4, r2
   33ef4:	46d8      	mov	r8, fp
   33ef6:	e729      	b.n	33d4c <__aeabi_dadd+0xb8>
   33ef8:	4645      	mov	r5, r8
   33efa:	2400      	movs	r4, #0
   33efc:	2700      	movs	r7, #0
   33efe:	e76a      	b.n	33dd6 <__aeabi_dadd+0x142>
   33f00:	4c45      	ldr	r4, [pc, #276]	; (34018 <__aeabi_dadd+0x384>)
   33f02:	1af6      	subs	r6, r6, r3
   33f04:	402c      	ands	r4, r5
   33f06:	e749      	b.n	33d9c <__aeabi_dadd+0x108>
   33f08:	003d      	movs	r5, r7
   33f0a:	3828      	subs	r0, #40	; 0x28
   33f0c:	4085      	lsls	r5, r0
   33f0e:	2700      	movs	r7, #0
   33f10:	e72e      	b.n	33d70 <__aeabi_dadd+0xdc>
   33f12:	0038      	movs	r0, r7
   33f14:	f001 fb04 	bl	35520 <__clzsi2>
   33f18:	3020      	adds	r0, #32
   33f1a:	e71d      	b.n	33d58 <__aeabi_dadd+0xc4>
   33f1c:	430a      	orrs	r2, r1
   33f1e:	1e51      	subs	r1, r2, #1
   33f20:	418a      	sbcs	r2, r1
   33f22:	2100      	movs	r1, #0
   33f24:	e707      	b.n	33d36 <__aeabi_dadd+0xa2>
   33f26:	2b00      	cmp	r3, #0
   33f28:	d000      	beq.n	33f2c <__aeabi_dadd+0x298>
   33f2a:	e0f3      	b.n	34114 <__aeabi_dadd+0x480>
   33f2c:	1c70      	adds	r0, r6, #1
   33f2e:	0543      	lsls	r3, r0, #21
   33f30:	0d5b      	lsrs	r3, r3, #21
   33f32:	2b01      	cmp	r3, #1
   33f34:	dc00      	bgt.n	33f38 <__aeabi_dadd+0x2a4>
   33f36:	e0ad      	b.n	34094 <__aeabi_dadd+0x400>
   33f38:	4b36      	ldr	r3, [pc, #216]	; (34014 <__aeabi_dadd+0x380>)
   33f3a:	4298      	cmp	r0, r3
   33f3c:	d100      	bne.n	33f40 <__aeabi_dadd+0x2ac>
   33f3e:	e0d1      	b.n	340e4 <__aeabi_dadd+0x450>
   33f40:	18ba      	adds	r2, r7, r2
   33f42:	42ba      	cmp	r2, r7
   33f44:	41bf      	sbcs	r7, r7
   33f46:	1864      	adds	r4, r4, r1
   33f48:	427f      	negs	r7, r7
   33f4a:	19e4      	adds	r4, r4, r7
   33f4c:	07e7      	lsls	r7, r4, #31
   33f4e:	0852      	lsrs	r2, r2, #1
   33f50:	4317      	orrs	r7, r2
   33f52:	0864      	lsrs	r4, r4, #1
   33f54:	0006      	movs	r6, r0
   33f56:	e721      	b.n	33d9c <__aeabi_dadd+0x108>
   33f58:	482e      	ldr	r0, [pc, #184]	; (34014 <__aeabi_dadd+0x380>)
   33f5a:	4285      	cmp	r5, r0
   33f5c:	d100      	bne.n	33f60 <__aeabi_dadd+0x2cc>
   33f5e:	e093      	b.n	34088 <__aeabi_dadd+0x3f4>
   33f60:	001d      	movs	r5, r3
   33f62:	e6d0      	b.n	33d06 <__aeabi_dadd+0x72>
   33f64:	0029      	movs	r1, r5
   33f66:	3e1f      	subs	r6, #31
   33f68:	40f1      	lsrs	r1, r6
   33f6a:	2b20      	cmp	r3, #32
   33f6c:	d100      	bne.n	33f70 <__aeabi_dadd+0x2dc>
   33f6e:	e08d      	b.n	3408c <__aeabi_dadd+0x3f8>
   33f70:	2240      	movs	r2, #64	; 0x40
   33f72:	1ad3      	subs	r3, r2, r3
   33f74:	409d      	lsls	r5, r3
   33f76:	432f      	orrs	r7, r5
   33f78:	1e7d      	subs	r5, r7, #1
   33f7a:	41af      	sbcs	r7, r5
   33f7c:	2400      	movs	r4, #0
   33f7e:	430f      	orrs	r7, r1
   33f80:	2600      	movs	r6, #0
   33f82:	e744      	b.n	33e0e <__aeabi_dadd+0x17a>
   33f84:	002b      	movs	r3, r5
   33f86:	0008      	movs	r0, r1
   33f88:	3b20      	subs	r3, #32
   33f8a:	40d8      	lsrs	r0, r3
   33f8c:	0003      	movs	r3, r0
   33f8e:	2d20      	cmp	r5, #32
   33f90:	d100      	bne.n	33f94 <__aeabi_dadd+0x300>
   33f92:	e07d      	b.n	34090 <__aeabi_dadd+0x3fc>
   33f94:	2040      	movs	r0, #64	; 0x40
   33f96:	1b45      	subs	r5, r0, r5
   33f98:	40a9      	lsls	r1, r5
   33f9a:	430a      	orrs	r2, r1
   33f9c:	1e51      	subs	r1, r2, #1
   33f9e:	418a      	sbcs	r2, r1
   33fa0:	2100      	movs	r1, #0
   33fa2:	431a      	orrs	r2, r3
   33fa4:	e6c7      	b.n	33d36 <__aeabi_dadd+0xa2>
   33fa6:	2e00      	cmp	r6, #0
   33fa8:	d050      	beq.n	3404c <__aeabi_dadd+0x3b8>
   33faa:	4e1a      	ldr	r6, [pc, #104]	; (34014 <__aeabi_dadd+0x380>)
   33fac:	42b0      	cmp	r0, r6
   33fae:	d057      	beq.n	34060 <__aeabi_dadd+0x3cc>
   33fb0:	2680      	movs	r6, #128	; 0x80
   33fb2:	426b      	negs	r3, r5
   33fb4:	4699      	mov	r9, r3
   33fb6:	0436      	lsls	r6, r6, #16
   33fb8:	4334      	orrs	r4, r6
   33fba:	464b      	mov	r3, r9
   33fbc:	2b38      	cmp	r3, #56	; 0x38
   33fbe:	dd00      	ble.n	33fc2 <__aeabi_dadd+0x32e>
   33fc0:	e0d6      	b.n	34170 <__aeabi_dadd+0x4dc>
   33fc2:	2b1f      	cmp	r3, #31
   33fc4:	dd00      	ble.n	33fc8 <__aeabi_dadd+0x334>
   33fc6:	e135      	b.n	34234 <__aeabi_dadd+0x5a0>
   33fc8:	2620      	movs	r6, #32
   33fca:	1af5      	subs	r5, r6, r3
   33fcc:	0026      	movs	r6, r4
   33fce:	40ae      	lsls	r6, r5
   33fd0:	46b2      	mov	sl, r6
   33fd2:	003e      	movs	r6, r7
   33fd4:	40de      	lsrs	r6, r3
   33fd6:	46ac      	mov	ip, r5
   33fd8:	0035      	movs	r5, r6
   33fda:	4656      	mov	r6, sl
   33fdc:	432e      	orrs	r6, r5
   33fde:	4665      	mov	r5, ip
   33fe0:	40af      	lsls	r7, r5
   33fe2:	1e7d      	subs	r5, r7, #1
   33fe4:	41af      	sbcs	r7, r5
   33fe6:	40dc      	lsrs	r4, r3
   33fe8:	4337      	orrs	r7, r6
   33fea:	1bd7      	subs	r7, r2, r7
   33fec:	42ba      	cmp	r2, r7
   33fee:	4192      	sbcs	r2, r2
   33ff0:	1b0c      	subs	r4, r1, r4
   33ff2:	4252      	negs	r2, r2
   33ff4:	1aa4      	subs	r4, r4, r2
   33ff6:	0006      	movs	r6, r0
   33ff8:	46d8      	mov	r8, fp
   33ffa:	e6a3      	b.n	33d44 <__aeabi_dadd+0xb0>
   33ffc:	4664      	mov	r4, ip
   33ffe:	4667      	mov	r7, ip
   34000:	432c      	orrs	r4, r5
   34002:	d000      	beq.n	34006 <__aeabi_dadd+0x372>
   34004:	e6a2      	b.n	33d4c <__aeabi_dadd+0xb8>
   34006:	2500      	movs	r5, #0
   34008:	2600      	movs	r6, #0
   3400a:	2700      	movs	r7, #0
   3400c:	e706      	b.n	33e1c <__aeabi_dadd+0x188>
   3400e:	001e      	movs	r6, r3
   34010:	e6c4      	b.n	33d9c <__aeabi_dadd+0x108>
   34012:	46c0      	nop			; (mov r8, r8)
   34014:	000007ff 	.word	0x000007ff
   34018:	ff7fffff 	.word	0xff7fffff
   3401c:	800fffff 	.word	0x800fffff
   34020:	2b1f      	cmp	r3, #31
   34022:	dc63      	bgt.n	340ec <__aeabi_dadd+0x458>
   34024:	2020      	movs	r0, #32
   34026:	1ac3      	subs	r3, r0, r3
   34028:	0008      	movs	r0, r1
   3402a:	4098      	lsls	r0, r3
   3402c:	469c      	mov	ip, r3
   3402e:	4683      	mov	fp, r0
   34030:	4653      	mov	r3, sl
   34032:	0010      	movs	r0, r2
   34034:	40d8      	lsrs	r0, r3
   34036:	0003      	movs	r3, r0
   34038:	4658      	mov	r0, fp
   3403a:	4318      	orrs	r0, r3
   3403c:	4663      	mov	r3, ip
   3403e:	409a      	lsls	r2, r3
   34040:	1e53      	subs	r3, r2, #1
   34042:	419a      	sbcs	r2, r3
   34044:	4653      	mov	r3, sl
   34046:	4302      	orrs	r2, r0
   34048:	40d9      	lsrs	r1, r3
   3404a:	e703      	b.n	33e54 <__aeabi_dadd+0x1c0>
   3404c:	0026      	movs	r6, r4
   3404e:	433e      	orrs	r6, r7
   34050:	d006      	beq.n	34060 <__aeabi_dadd+0x3cc>
   34052:	43eb      	mvns	r3, r5
   34054:	4699      	mov	r9, r3
   34056:	2b00      	cmp	r3, #0
   34058:	d0c7      	beq.n	33fea <__aeabi_dadd+0x356>
   3405a:	4e94      	ldr	r6, [pc, #592]	; (342ac <__aeabi_dadd+0x618>)
   3405c:	42b0      	cmp	r0, r6
   3405e:	d1ac      	bne.n	33fba <__aeabi_dadd+0x326>
   34060:	000c      	movs	r4, r1
   34062:	0017      	movs	r7, r2
   34064:	0006      	movs	r6, r0
   34066:	46d8      	mov	r8, fp
   34068:	e698      	b.n	33d9c <__aeabi_dadd+0x108>
   3406a:	4b90      	ldr	r3, [pc, #576]	; (342ac <__aeabi_dadd+0x618>)
   3406c:	459a      	cmp	sl, r3
   3406e:	d00b      	beq.n	34088 <__aeabi_dadd+0x3f4>
   34070:	4682      	mov	sl, r0
   34072:	e6e7      	b.n	33e44 <__aeabi_dadd+0x1b0>
   34074:	2800      	cmp	r0, #0
   34076:	d000      	beq.n	3407a <__aeabi_dadd+0x3e6>
   34078:	e09e      	b.n	341b8 <__aeabi_dadd+0x524>
   3407a:	0018      	movs	r0, r3
   3407c:	4310      	orrs	r0, r2
   3407e:	d100      	bne.n	34082 <__aeabi_dadd+0x3ee>
   34080:	e0e9      	b.n	34256 <__aeabi_dadd+0x5c2>
   34082:	001c      	movs	r4, r3
   34084:	0017      	movs	r7, r2
   34086:	46d8      	mov	r8, fp
   34088:	4e88      	ldr	r6, [pc, #544]	; (342ac <__aeabi_dadd+0x618>)
   3408a:	e687      	b.n	33d9c <__aeabi_dadd+0x108>
   3408c:	2500      	movs	r5, #0
   3408e:	e772      	b.n	33f76 <__aeabi_dadd+0x2e2>
   34090:	2100      	movs	r1, #0
   34092:	e782      	b.n	33f9a <__aeabi_dadd+0x306>
   34094:	0023      	movs	r3, r4
   34096:	433b      	orrs	r3, r7
   34098:	2e00      	cmp	r6, #0
   3409a:	d000      	beq.n	3409e <__aeabi_dadd+0x40a>
   3409c:	e0ab      	b.n	341f6 <__aeabi_dadd+0x562>
   3409e:	2b00      	cmp	r3, #0
   340a0:	d100      	bne.n	340a4 <__aeabi_dadd+0x410>
   340a2:	e0e7      	b.n	34274 <__aeabi_dadd+0x5e0>
   340a4:	000b      	movs	r3, r1
   340a6:	4313      	orrs	r3, r2
   340a8:	d100      	bne.n	340ac <__aeabi_dadd+0x418>
   340aa:	e677      	b.n	33d9c <__aeabi_dadd+0x108>
   340ac:	18ba      	adds	r2, r7, r2
   340ae:	42ba      	cmp	r2, r7
   340b0:	41bf      	sbcs	r7, r7
   340b2:	1864      	adds	r4, r4, r1
   340b4:	427f      	negs	r7, r7
   340b6:	19e4      	adds	r4, r4, r7
   340b8:	0223      	lsls	r3, r4, #8
   340ba:	d400      	bmi.n	340be <__aeabi_dadd+0x42a>
   340bc:	e0f2      	b.n	342a4 <__aeabi_dadd+0x610>
   340be:	4b7c      	ldr	r3, [pc, #496]	; (342b0 <__aeabi_dadd+0x61c>)
   340c0:	0017      	movs	r7, r2
   340c2:	401c      	ands	r4, r3
   340c4:	0006      	movs	r6, r0
   340c6:	e669      	b.n	33d9c <__aeabi_dadd+0x108>
   340c8:	0020      	movs	r0, r4
   340ca:	4338      	orrs	r0, r7
   340cc:	2e00      	cmp	r6, #0
   340ce:	d1d1      	bne.n	34074 <__aeabi_dadd+0x3e0>
   340d0:	2800      	cmp	r0, #0
   340d2:	d15b      	bne.n	3418c <__aeabi_dadd+0x4f8>
   340d4:	001c      	movs	r4, r3
   340d6:	4314      	orrs	r4, r2
   340d8:	d100      	bne.n	340dc <__aeabi_dadd+0x448>
   340da:	e0a8      	b.n	3422e <__aeabi_dadd+0x59a>
   340dc:	001c      	movs	r4, r3
   340de:	0017      	movs	r7, r2
   340e0:	46d8      	mov	r8, fp
   340e2:	e65b      	b.n	33d9c <__aeabi_dadd+0x108>
   340e4:	0006      	movs	r6, r0
   340e6:	2400      	movs	r4, #0
   340e8:	2700      	movs	r7, #0
   340ea:	e697      	b.n	33e1c <__aeabi_dadd+0x188>
   340ec:	4650      	mov	r0, sl
   340ee:	000b      	movs	r3, r1
   340f0:	3820      	subs	r0, #32
   340f2:	40c3      	lsrs	r3, r0
   340f4:	4699      	mov	r9, r3
   340f6:	4653      	mov	r3, sl
   340f8:	2b20      	cmp	r3, #32
   340fa:	d100      	bne.n	340fe <__aeabi_dadd+0x46a>
   340fc:	e095      	b.n	3422a <__aeabi_dadd+0x596>
   340fe:	2340      	movs	r3, #64	; 0x40
   34100:	4650      	mov	r0, sl
   34102:	1a1b      	subs	r3, r3, r0
   34104:	4099      	lsls	r1, r3
   34106:	430a      	orrs	r2, r1
   34108:	1e51      	subs	r1, r2, #1
   3410a:	418a      	sbcs	r2, r1
   3410c:	464b      	mov	r3, r9
   3410e:	2100      	movs	r1, #0
   34110:	431a      	orrs	r2, r3
   34112:	e69f      	b.n	33e54 <__aeabi_dadd+0x1c0>
   34114:	2e00      	cmp	r6, #0
   34116:	d130      	bne.n	3417a <__aeabi_dadd+0x4e6>
   34118:	0026      	movs	r6, r4
   3411a:	433e      	orrs	r6, r7
   3411c:	d067      	beq.n	341ee <__aeabi_dadd+0x55a>
   3411e:	43db      	mvns	r3, r3
   34120:	469a      	mov	sl, r3
   34122:	2b00      	cmp	r3, #0
   34124:	d01c      	beq.n	34160 <__aeabi_dadd+0x4cc>
   34126:	4e61      	ldr	r6, [pc, #388]	; (342ac <__aeabi_dadd+0x618>)
   34128:	42b0      	cmp	r0, r6
   3412a:	d060      	beq.n	341ee <__aeabi_dadd+0x55a>
   3412c:	4653      	mov	r3, sl
   3412e:	2b38      	cmp	r3, #56	; 0x38
   34130:	dd00      	ble.n	34134 <__aeabi_dadd+0x4a0>
   34132:	e096      	b.n	34262 <__aeabi_dadd+0x5ce>
   34134:	2b1f      	cmp	r3, #31
   34136:	dd00      	ble.n	3413a <__aeabi_dadd+0x4a6>
   34138:	e09f      	b.n	3427a <__aeabi_dadd+0x5e6>
   3413a:	2620      	movs	r6, #32
   3413c:	1af3      	subs	r3, r6, r3
   3413e:	0026      	movs	r6, r4
   34140:	409e      	lsls	r6, r3
   34142:	469c      	mov	ip, r3
   34144:	46b3      	mov	fp, r6
   34146:	4653      	mov	r3, sl
   34148:	003e      	movs	r6, r7
   3414a:	40de      	lsrs	r6, r3
   3414c:	0033      	movs	r3, r6
   3414e:	465e      	mov	r6, fp
   34150:	431e      	orrs	r6, r3
   34152:	4663      	mov	r3, ip
   34154:	409f      	lsls	r7, r3
   34156:	1e7b      	subs	r3, r7, #1
   34158:	419f      	sbcs	r7, r3
   3415a:	4653      	mov	r3, sl
   3415c:	40dc      	lsrs	r4, r3
   3415e:	4337      	orrs	r7, r6
   34160:	18bf      	adds	r7, r7, r2
   34162:	4297      	cmp	r7, r2
   34164:	4192      	sbcs	r2, r2
   34166:	1864      	adds	r4, r4, r1
   34168:	4252      	negs	r2, r2
   3416a:	18a4      	adds	r4, r4, r2
   3416c:	0006      	movs	r6, r0
   3416e:	e678      	b.n	33e62 <__aeabi_dadd+0x1ce>
   34170:	4327      	orrs	r7, r4
   34172:	1e7c      	subs	r4, r7, #1
   34174:	41a7      	sbcs	r7, r4
   34176:	2400      	movs	r4, #0
   34178:	e737      	b.n	33fea <__aeabi_dadd+0x356>
   3417a:	4e4c      	ldr	r6, [pc, #304]	; (342ac <__aeabi_dadd+0x618>)
   3417c:	42b0      	cmp	r0, r6
   3417e:	d036      	beq.n	341ee <__aeabi_dadd+0x55a>
   34180:	2680      	movs	r6, #128	; 0x80
   34182:	425b      	negs	r3, r3
   34184:	0436      	lsls	r6, r6, #16
   34186:	469a      	mov	sl, r3
   34188:	4334      	orrs	r4, r6
   3418a:	e7cf      	b.n	3412c <__aeabi_dadd+0x498>
   3418c:	0018      	movs	r0, r3
   3418e:	4310      	orrs	r0, r2
   34190:	d100      	bne.n	34194 <__aeabi_dadd+0x500>
   34192:	e603      	b.n	33d9c <__aeabi_dadd+0x108>
   34194:	1ab8      	subs	r0, r7, r2
   34196:	4684      	mov	ip, r0
   34198:	4567      	cmp	r7, ip
   3419a:	41ad      	sbcs	r5, r5
   3419c:	1ae0      	subs	r0, r4, r3
   3419e:	426d      	negs	r5, r5
   341a0:	1b40      	subs	r0, r0, r5
   341a2:	0205      	lsls	r5, r0, #8
   341a4:	d400      	bmi.n	341a8 <__aeabi_dadd+0x514>
   341a6:	e62c      	b.n	33e02 <__aeabi_dadd+0x16e>
   341a8:	1bd7      	subs	r7, r2, r7
   341aa:	42ba      	cmp	r2, r7
   341ac:	4192      	sbcs	r2, r2
   341ae:	1b1c      	subs	r4, r3, r4
   341b0:	4252      	negs	r2, r2
   341b2:	1aa4      	subs	r4, r4, r2
   341b4:	46d8      	mov	r8, fp
   341b6:	e5f1      	b.n	33d9c <__aeabi_dadd+0x108>
   341b8:	0018      	movs	r0, r3
   341ba:	4310      	orrs	r0, r2
   341bc:	d100      	bne.n	341c0 <__aeabi_dadd+0x52c>
   341be:	e763      	b.n	34088 <__aeabi_dadd+0x3f4>
   341c0:	08f8      	lsrs	r0, r7, #3
   341c2:	0767      	lsls	r7, r4, #29
   341c4:	4307      	orrs	r7, r0
   341c6:	2080      	movs	r0, #128	; 0x80
   341c8:	08e4      	lsrs	r4, r4, #3
   341ca:	0300      	lsls	r0, r0, #12
   341cc:	4204      	tst	r4, r0
   341ce:	d008      	beq.n	341e2 <__aeabi_dadd+0x54e>
   341d0:	08dd      	lsrs	r5, r3, #3
   341d2:	4205      	tst	r5, r0
   341d4:	d105      	bne.n	341e2 <__aeabi_dadd+0x54e>
   341d6:	08d2      	lsrs	r2, r2, #3
   341d8:	0759      	lsls	r1, r3, #29
   341da:	4311      	orrs	r1, r2
   341dc:	000f      	movs	r7, r1
   341de:	002c      	movs	r4, r5
   341e0:	46d8      	mov	r8, fp
   341e2:	0f7b      	lsrs	r3, r7, #29
   341e4:	00e4      	lsls	r4, r4, #3
   341e6:	431c      	orrs	r4, r3
   341e8:	00ff      	lsls	r7, r7, #3
   341ea:	4e30      	ldr	r6, [pc, #192]	; (342ac <__aeabi_dadd+0x618>)
   341ec:	e5d6      	b.n	33d9c <__aeabi_dadd+0x108>
   341ee:	000c      	movs	r4, r1
   341f0:	0017      	movs	r7, r2
   341f2:	0006      	movs	r6, r0
   341f4:	e5d2      	b.n	33d9c <__aeabi_dadd+0x108>
   341f6:	2b00      	cmp	r3, #0
   341f8:	d038      	beq.n	3426c <__aeabi_dadd+0x5d8>
   341fa:	000b      	movs	r3, r1
   341fc:	4313      	orrs	r3, r2
   341fe:	d100      	bne.n	34202 <__aeabi_dadd+0x56e>
   34200:	e742      	b.n	34088 <__aeabi_dadd+0x3f4>
   34202:	08f8      	lsrs	r0, r7, #3
   34204:	0767      	lsls	r7, r4, #29
   34206:	4307      	orrs	r7, r0
   34208:	2080      	movs	r0, #128	; 0x80
   3420a:	08e4      	lsrs	r4, r4, #3
   3420c:	0300      	lsls	r0, r0, #12
   3420e:	4204      	tst	r4, r0
   34210:	d0e7      	beq.n	341e2 <__aeabi_dadd+0x54e>
   34212:	08cb      	lsrs	r3, r1, #3
   34214:	4203      	tst	r3, r0
   34216:	d1e4      	bne.n	341e2 <__aeabi_dadd+0x54e>
   34218:	08d2      	lsrs	r2, r2, #3
   3421a:	0749      	lsls	r1, r1, #29
   3421c:	4311      	orrs	r1, r2
   3421e:	000f      	movs	r7, r1
   34220:	001c      	movs	r4, r3
   34222:	e7de      	b.n	341e2 <__aeabi_dadd+0x54e>
   34224:	2700      	movs	r7, #0
   34226:	2400      	movs	r4, #0
   34228:	e5d5      	b.n	33dd6 <__aeabi_dadd+0x142>
   3422a:	2100      	movs	r1, #0
   3422c:	e76b      	b.n	34106 <__aeabi_dadd+0x472>
   3422e:	2500      	movs	r5, #0
   34230:	2700      	movs	r7, #0
   34232:	e5f3      	b.n	33e1c <__aeabi_dadd+0x188>
   34234:	464e      	mov	r6, r9
   34236:	0025      	movs	r5, r4
   34238:	3e20      	subs	r6, #32
   3423a:	40f5      	lsrs	r5, r6
   3423c:	464b      	mov	r3, r9
   3423e:	002e      	movs	r6, r5
   34240:	2b20      	cmp	r3, #32
   34242:	d02d      	beq.n	342a0 <__aeabi_dadd+0x60c>
   34244:	2540      	movs	r5, #64	; 0x40
   34246:	1aed      	subs	r5, r5, r3
   34248:	40ac      	lsls	r4, r5
   3424a:	4327      	orrs	r7, r4
   3424c:	1e7c      	subs	r4, r7, #1
   3424e:	41a7      	sbcs	r7, r4
   34250:	2400      	movs	r4, #0
   34252:	4337      	orrs	r7, r6
   34254:	e6c9      	b.n	33fea <__aeabi_dadd+0x356>
   34256:	2480      	movs	r4, #128	; 0x80
   34258:	2500      	movs	r5, #0
   3425a:	0324      	lsls	r4, r4, #12
   3425c:	4e13      	ldr	r6, [pc, #76]	; (342ac <__aeabi_dadd+0x618>)
   3425e:	2700      	movs	r7, #0
   34260:	e5dc      	b.n	33e1c <__aeabi_dadd+0x188>
   34262:	4327      	orrs	r7, r4
   34264:	1e7c      	subs	r4, r7, #1
   34266:	41a7      	sbcs	r7, r4
   34268:	2400      	movs	r4, #0
   3426a:	e779      	b.n	34160 <__aeabi_dadd+0x4cc>
   3426c:	000c      	movs	r4, r1
   3426e:	0017      	movs	r7, r2
   34270:	4e0e      	ldr	r6, [pc, #56]	; (342ac <__aeabi_dadd+0x618>)
   34272:	e593      	b.n	33d9c <__aeabi_dadd+0x108>
   34274:	000c      	movs	r4, r1
   34276:	0017      	movs	r7, r2
   34278:	e590      	b.n	33d9c <__aeabi_dadd+0x108>
   3427a:	4656      	mov	r6, sl
   3427c:	0023      	movs	r3, r4
   3427e:	3e20      	subs	r6, #32
   34280:	40f3      	lsrs	r3, r6
   34282:	4699      	mov	r9, r3
   34284:	4653      	mov	r3, sl
   34286:	2b20      	cmp	r3, #32
   34288:	d00e      	beq.n	342a8 <__aeabi_dadd+0x614>
   3428a:	2340      	movs	r3, #64	; 0x40
   3428c:	4656      	mov	r6, sl
   3428e:	1b9b      	subs	r3, r3, r6
   34290:	409c      	lsls	r4, r3
   34292:	4327      	orrs	r7, r4
   34294:	1e7c      	subs	r4, r7, #1
   34296:	41a7      	sbcs	r7, r4
   34298:	464b      	mov	r3, r9
   3429a:	2400      	movs	r4, #0
   3429c:	431f      	orrs	r7, r3
   3429e:	e75f      	b.n	34160 <__aeabi_dadd+0x4cc>
   342a0:	2400      	movs	r4, #0
   342a2:	e7d2      	b.n	3424a <__aeabi_dadd+0x5b6>
   342a4:	0017      	movs	r7, r2
   342a6:	e5b2      	b.n	33e0e <__aeabi_dadd+0x17a>
   342a8:	2400      	movs	r4, #0
   342aa:	e7f2      	b.n	34292 <__aeabi_dadd+0x5fe>
   342ac:	000007ff 	.word	0x000007ff
   342b0:	ff7fffff 	.word	0xff7fffff

000342b4 <__aeabi_ddiv>:
   342b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   342b6:	4657      	mov	r7, sl
   342b8:	4645      	mov	r5, r8
   342ba:	46de      	mov	lr, fp
   342bc:	464e      	mov	r6, r9
   342be:	b5e0      	push	{r5, r6, r7, lr}
   342c0:	004c      	lsls	r4, r1, #1
   342c2:	030e      	lsls	r6, r1, #12
   342c4:	b087      	sub	sp, #28
   342c6:	4683      	mov	fp, r0
   342c8:	4692      	mov	sl, r2
   342ca:	001d      	movs	r5, r3
   342cc:	4680      	mov	r8, r0
   342ce:	0b36      	lsrs	r6, r6, #12
   342d0:	0d64      	lsrs	r4, r4, #21
   342d2:	0fcf      	lsrs	r7, r1, #31
   342d4:	2c00      	cmp	r4, #0
   342d6:	d04f      	beq.n	34378 <__aeabi_ddiv+0xc4>
   342d8:	4b6f      	ldr	r3, [pc, #444]	; (34498 <__aeabi_ddiv+0x1e4>)
   342da:	429c      	cmp	r4, r3
   342dc:	d035      	beq.n	3434a <__aeabi_ddiv+0x96>
   342de:	2380      	movs	r3, #128	; 0x80
   342e0:	0f42      	lsrs	r2, r0, #29
   342e2:	041b      	lsls	r3, r3, #16
   342e4:	00f6      	lsls	r6, r6, #3
   342e6:	4313      	orrs	r3, r2
   342e8:	4333      	orrs	r3, r6
   342ea:	4699      	mov	r9, r3
   342ec:	00c3      	lsls	r3, r0, #3
   342ee:	4698      	mov	r8, r3
   342f0:	4b6a      	ldr	r3, [pc, #424]	; (3449c <__aeabi_ddiv+0x1e8>)
   342f2:	2600      	movs	r6, #0
   342f4:	469c      	mov	ip, r3
   342f6:	2300      	movs	r3, #0
   342f8:	4464      	add	r4, ip
   342fa:	9303      	str	r3, [sp, #12]
   342fc:	032b      	lsls	r3, r5, #12
   342fe:	0b1b      	lsrs	r3, r3, #12
   34300:	469b      	mov	fp, r3
   34302:	006b      	lsls	r3, r5, #1
   34304:	0fed      	lsrs	r5, r5, #31
   34306:	4650      	mov	r0, sl
   34308:	0d5b      	lsrs	r3, r3, #21
   3430a:	9501      	str	r5, [sp, #4]
   3430c:	d05e      	beq.n	343cc <__aeabi_ddiv+0x118>
   3430e:	4a62      	ldr	r2, [pc, #392]	; (34498 <__aeabi_ddiv+0x1e4>)
   34310:	4293      	cmp	r3, r2
   34312:	d053      	beq.n	343bc <__aeabi_ddiv+0x108>
   34314:	465a      	mov	r2, fp
   34316:	00d1      	lsls	r1, r2, #3
   34318:	2280      	movs	r2, #128	; 0x80
   3431a:	0f40      	lsrs	r0, r0, #29
   3431c:	0412      	lsls	r2, r2, #16
   3431e:	4302      	orrs	r2, r0
   34320:	430a      	orrs	r2, r1
   34322:	4693      	mov	fp, r2
   34324:	4652      	mov	r2, sl
   34326:	00d1      	lsls	r1, r2, #3
   34328:	4a5c      	ldr	r2, [pc, #368]	; (3449c <__aeabi_ddiv+0x1e8>)
   3432a:	4694      	mov	ip, r2
   3432c:	2200      	movs	r2, #0
   3432e:	4463      	add	r3, ip
   34330:	0038      	movs	r0, r7
   34332:	4068      	eors	r0, r5
   34334:	4684      	mov	ip, r0
   34336:	9002      	str	r0, [sp, #8]
   34338:	1ae4      	subs	r4, r4, r3
   3433a:	4316      	orrs	r6, r2
   3433c:	2e0f      	cmp	r6, #15
   3433e:	d900      	bls.n	34342 <__aeabi_ddiv+0x8e>
   34340:	e0b4      	b.n	344ac <__aeabi_ddiv+0x1f8>
   34342:	4b57      	ldr	r3, [pc, #348]	; (344a0 <__aeabi_ddiv+0x1ec>)
   34344:	00b6      	lsls	r6, r6, #2
   34346:	599b      	ldr	r3, [r3, r6]
   34348:	469f      	mov	pc, r3
   3434a:	0003      	movs	r3, r0
   3434c:	4333      	orrs	r3, r6
   3434e:	4699      	mov	r9, r3
   34350:	d16c      	bne.n	3442c <__aeabi_ddiv+0x178>
   34352:	2300      	movs	r3, #0
   34354:	4698      	mov	r8, r3
   34356:	3302      	adds	r3, #2
   34358:	2608      	movs	r6, #8
   3435a:	9303      	str	r3, [sp, #12]
   3435c:	e7ce      	b.n	342fc <__aeabi_ddiv+0x48>
   3435e:	46cb      	mov	fp, r9
   34360:	4641      	mov	r1, r8
   34362:	9a03      	ldr	r2, [sp, #12]
   34364:	9701      	str	r7, [sp, #4]
   34366:	2a02      	cmp	r2, #2
   34368:	d165      	bne.n	34436 <__aeabi_ddiv+0x182>
   3436a:	9b01      	ldr	r3, [sp, #4]
   3436c:	4c4a      	ldr	r4, [pc, #296]	; (34498 <__aeabi_ddiv+0x1e4>)
   3436e:	469c      	mov	ip, r3
   34370:	2300      	movs	r3, #0
   34372:	2200      	movs	r2, #0
   34374:	4698      	mov	r8, r3
   34376:	e06b      	b.n	34450 <__aeabi_ddiv+0x19c>
   34378:	0003      	movs	r3, r0
   3437a:	4333      	orrs	r3, r6
   3437c:	4699      	mov	r9, r3
   3437e:	d04e      	beq.n	3441e <__aeabi_ddiv+0x16a>
   34380:	2e00      	cmp	r6, #0
   34382:	d100      	bne.n	34386 <__aeabi_ddiv+0xd2>
   34384:	e1bc      	b.n	34700 <__aeabi_ddiv+0x44c>
   34386:	0030      	movs	r0, r6
   34388:	f001 f8ca 	bl	35520 <__clzsi2>
   3438c:	0003      	movs	r3, r0
   3438e:	3b0b      	subs	r3, #11
   34390:	2b1c      	cmp	r3, #28
   34392:	dd00      	ble.n	34396 <__aeabi_ddiv+0xe2>
   34394:	e1ac      	b.n	346f0 <__aeabi_ddiv+0x43c>
   34396:	221d      	movs	r2, #29
   34398:	1ad3      	subs	r3, r2, r3
   3439a:	465a      	mov	r2, fp
   3439c:	0001      	movs	r1, r0
   3439e:	40da      	lsrs	r2, r3
   343a0:	3908      	subs	r1, #8
   343a2:	408e      	lsls	r6, r1
   343a4:	0013      	movs	r3, r2
   343a6:	4333      	orrs	r3, r6
   343a8:	4699      	mov	r9, r3
   343aa:	465b      	mov	r3, fp
   343ac:	408b      	lsls	r3, r1
   343ae:	4698      	mov	r8, r3
   343b0:	2300      	movs	r3, #0
   343b2:	4c3c      	ldr	r4, [pc, #240]	; (344a4 <__aeabi_ddiv+0x1f0>)
   343b4:	2600      	movs	r6, #0
   343b6:	1a24      	subs	r4, r4, r0
   343b8:	9303      	str	r3, [sp, #12]
   343ba:	e79f      	b.n	342fc <__aeabi_ddiv+0x48>
   343bc:	4651      	mov	r1, sl
   343be:	465a      	mov	r2, fp
   343c0:	4311      	orrs	r1, r2
   343c2:	d129      	bne.n	34418 <__aeabi_ddiv+0x164>
   343c4:	2200      	movs	r2, #0
   343c6:	4693      	mov	fp, r2
   343c8:	3202      	adds	r2, #2
   343ca:	e7b1      	b.n	34330 <__aeabi_ddiv+0x7c>
   343cc:	4659      	mov	r1, fp
   343ce:	4301      	orrs	r1, r0
   343d0:	d01e      	beq.n	34410 <__aeabi_ddiv+0x15c>
   343d2:	465b      	mov	r3, fp
   343d4:	2b00      	cmp	r3, #0
   343d6:	d100      	bne.n	343da <__aeabi_ddiv+0x126>
   343d8:	e19e      	b.n	34718 <__aeabi_ddiv+0x464>
   343da:	4658      	mov	r0, fp
   343dc:	f001 f8a0 	bl	35520 <__clzsi2>
   343e0:	0003      	movs	r3, r0
   343e2:	3b0b      	subs	r3, #11
   343e4:	2b1c      	cmp	r3, #28
   343e6:	dd00      	ble.n	343ea <__aeabi_ddiv+0x136>
   343e8:	e18f      	b.n	3470a <__aeabi_ddiv+0x456>
   343ea:	0002      	movs	r2, r0
   343ec:	4659      	mov	r1, fp
   343ee:	3a08      	subs	r2, #8
   343f0:	4091      	lsls	r1, r2
   343f2:	468b      	mov	fp, r1
   343f4:	211d      	movs	r1, #29
   343f6:	1acb      	subs	r3, r1, r3
   343f8:	4651      	mov	r1, sl
   343fa:	40d9      	lsrs	r1, r3
   343fc:	000b      	movs	r3, r1
   343fe:	4659      	mov	r1, fp
   34400:	430b      	orrs	r3, r1
   34402:	4651      	mov	r1, sl
   34404:	469b      	mov	fp, r3
   34406:	4091      	lsls	r1, r2
   34408:	4b26      	ldr	r3, [pc, #152]	; (344a4 <__aeabi_ddiv+0x1f0>)
   3440a:	2200      	movs	r2, #0
   3440c:	1a1b      	subs	r3, r3, r0
   3440e:	e78f      	b.n	34330 <__aeabi_ddiv+0x7c>
   34410:	2300      	movs	r3, #0
   34412:	2201      	movs	r2, #1
   34414:	469b      	mov	fp, r3
   34416:	e78b      	b.n	34330 <__aeabi_ddiv+0x7c>
   34418:	4651      	mov	r1, sl
   3441a:	2203      	movs	r2, #3
   3441c:	e788      	b.n	34330 <__aeabi_ddiv+0x7c>
   3441e:	2300      	movs	r3, #0
   34420:	4698      	mov	r8, r3
   34422:	3301      	adds	r3, #1
   34424:	2604      	movs	r6, #4
   34426:	2400      	movs	r4, #0
   34428:	9303      	str	r3, [sp, #12]
   3442a:	e767      	b.n	342fc <__aeabi_ddiv+0x48>
   3442c:	2303      	movs	r3, #3
   3442e:	46b1      	mov	r9, r6
   34430:	9303      	str	r3, [sp, #12]
   34432:	260c      	movs	r6, #12
   34434:	e762      	b.n	342fc <__aeabi_ddiv+0x48>
   34436:	2a03      	cmp	r2, #3
   34438:	d100      	bne.n	3443c <__aeabi_ddiv+0x188>
   3443a:	e25c      	b.n	348f6 <__aeabi_ddiv+0x642>
   3443c:	9b01      	ldr	r3, [sp, #4]
   3443e:	2a01      	cmp	r2, #1
   34440:	d000      	beq.n	34444 <__aeabi_ddiv+0x190>
   34442:	e1e4      	b.n	3480e <__aeabi_ddiv+0x55a>
   34444:	4013      	ands	r3, r2
   34446:	469c      	mov	ip, r3
   34448:	2300      	movs	r3, #0
   3444a:	2400      	movs	r4, #0
   3444c:	2200      	movs	r2, #0
   3444e:	4698      	mov	r8, r3
   34450:	2100      	movs	r1, #0
   34452:	0312      	lsls	r2, r2, #12
   34454:	0b13      	lsrs	r3, r2, #12
   34456:	0d0a      	lsrs	r2, r1, #20
   34458:	0512      	lsls	r2, r2, #20
   3445a:	431a      	orrs	r2, r3
   3445c:	0523      	lsls	r3, r4, #20
   3445e:	4c12      	ldr	r4, [pc, #72]	; (344a8 <__aeabi_ddiv+0x1f4>)
   34460:	4640      	mov	r0, r8
   34462:	4022      	ands	r2, r4
   34464:	4313      	orrs	r3, r2
   34466:	4662      	mov	r2, ip
   34468:	005b      	lsls	r3, r3, #1
   3446a:	07d2      	lsls	r2, r2, #31
   3446c:	085b      	lsrs	r3, r3, #1
   3446e:	4313      	orrs	r3, r2
   34470:	0019      	movs	r1, r3
   34472:	b007      	add	sp, #28
   34474:	bc3c      	pop	{r2, r3, r4, r5}
   34476:	4690      	mov	r8, r2
   34478:	4699      	mov	r9, r3
   3447a:	46a2      	mov	sl, r4
   3447c:	46ab      	mov	fp, r5
   3447e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34480:	2300      	movs	r3, #0
   34482:	2280      	movs	r2, #128	; 0x80
   34484:	469c      	mov	ip, r3
   34486:	0312      	lsls	r2, r2, #12
   34488:	4698      	mov	r8, r3
   3448a:	4c03      	ldr	r4, [pc, #12]	; (34498 <__aeabi_ddiv+0x1e4>)
   3448c:	e7e0      	b.n	34450 <__aeabi_ddiv+0x19c>
   3448e:	2300      	movs	r3, #0
   34490:	4c01      	ldr	r4, [pc, #4]	; (34498 <__aeabi_ddiv+0x1e4>)
   34492:	2200      	movs	r2, #0
   34494:	4698      	mov	r8, r3
   34496:	e7db      	b.n	34450 <__aeabi_ddiv+0x19c>
   34498:	000007ff 	.word	0x000007ff
   3449c:	fffffc01 	.word	0xfffffc01
   344a0:	0003b0a4 	.word	0x0003b0a4
   344a4:	fffffc0d 	.word	0xfffffc0d
   344a8:	800fffff 	.word	0x800fffff
   344ac:	45d9      	cmp	r9, fp
   344ae:	d900      	bls.n	344b2 <__aeabi_ddiv+0x1fe>
   344b0:	e139      	b.n	34726 <__aeabi_ddiv+0x472>
   344b2:	d100      	bne.n	344b6 <__aeabi_ddiv+0x202>
   344b4:	e134      	b.n	34720 <__aeabi_ddiv+0x46c>
   344b6:	2300      	movs	r3, #0
   344b8:	4646      	mov	r6, r8
   344ba:	464d      	mov	r5, r9
   344bc:	469a      	mov	sl, r3
   344be:	3c01      	subs	r4, #1
   344c0:	465b      	mov	r3, fp
   344c2:	0e0a      	lsrs	r2, r1, #24
   344c4:	021b      	lsls	r3, r3, #8
   344c6:	431a      	orrs	r2, r3
   344c8:	020b      	lsls	r3, r1, #8
   344ca:	0c17      	lsrs	r7, r2, #16
   344cc:	9303      	str	r3, [sp, #12]
   344ce:	0413      	lsls	r3, r2, #16
   344d0:	0c1b      	lsrs	r3, r3, #16
   344d2:	0039      	movs	r1, r7
   344d4:	0028      	movs	r0, r5
   344d6:	4690      	mov	r8, r2
   344d8:	9301      	str	r3, [sp, #4]
   344da:	f7ff f8ab 	bl	33634 <__udivsi3>
   344de:	0002      	movs	r2, r0
   344e0:	9b01      	ldr	r3, [sp, #4]
   344e2:	4683      	mov	fp, r0
   344e4:	435a      	muls	r2, r3
   344e6:	0028      	movs	r0, r5
   344e8:	0039      	movs	r1, r7
   344ea:	4691      	mov	r9, r2
   344ec:	f7ff f928 	bl	33740 <__aeabi_uidivmod>
   344f0:	0c35      	lsrs	r5, r6, #16
   344f2:	0409      	lsls	r1, r1, #16
   344f4:	430d      	orrs	r5, r1
   344f6:	45a9      	cmp	r9, r5
   344f8:	d90d      	bls.n	34516 <__aeabi_ddiv+0x262>
   344fa:	465b      	mov	r3, fp
   344fc:	4445      	add	r5, r8
   344fe:	3b01      	subs	r3, #1
   34500:	45a8      	cmp	r8, r5
   34502:	d900      	bls.n	34506 <__aeabi_ddiv+0x252>
   34504:	e13a      	b.n	3477c <__aeabi_ddiv+0x4c8>
   34506:	45a9      	cmp	r9, r5
   34508:	d800      	bhi.n	3450c <__aeabi_ddiv+0x258>
   3450a:	e137      	b.n	3477c <__aeabi_ddiv+0x4c8>
   3450c:	2302      	movs	r3, #2
   3450e:	425b      	negs	r3, r3
   34510:	469c      	mov	ip, r3
   34512:	4445      	add	r5, r8
   34514:	44e3      	add	fp, ip
   34516:	464b      	mov	r3, r9
   34518:	1aeb      	subs	r3, r5, r3
   3451a:	0039      	movs	r1, r7
   3451c:	0018      	movs	r0, r3
   3451e:	9304      	str	r3, [sp, #16]
   34520:	f7ff f888 	bl	33634 <__udivsi3>
   34524:	9b01      	ldr	r3, [sp, #4]
   34526:	0005      	movs	r5, r0
   34528:	4343      	muls	r3, r0
   3452a:	0039      	movs	r1, r7
   3452c:	9804      	ldr	r0, [sp, #16]
   3452e:	4699      	mov	r9, r3
   34530:	f7ff f906 	bl	33740 <__aeabi_uidivmod>
   34534:	0433      	lsls	r3, r6, #16
   34536:	0409      	lsls	r1, r1, #16
   34538:	0c1b      	lsrs	r3, r3, #16
   3453a:	430b      	orrs	r3, r1
   3453c:	4599      	cmp	r9, r3
   3453e:	d909      	bls.n	34554 <__aeabi_ddiv+0x2a0>
   34540:	4443      	add	r3, r8
   34542:	1e6a      	subs	r2, r5, #1
   34544:	4598      	cmp	r8, r3
   34546:	d900      	bls.n	3454a <__aeabi_ddiv+0x296>
   34548:	e11a      	b.n	34780 <__aeabi_ddiv+0x4cc>
   3454a:	4599      	cmp	r9, r3
   3454c:	d800      	bhi.n	34550 <__aeabi_ddiv+0x29c>
   3454e:	e117      	b.n	34780 <__aeabi_ddiv+0x4cc>
   34550:	3d02      	subs	r5, #2
   34552:	4443      	add	r3, r8
   34554:	464a      	mov	r2, r9
   34556:	1a9b      	subs	r3, r3, r2
   34558:	465a      	mov	r2, fp
   3455a:	0412      	lsls	r2, r2, #16
   3455c:	432a      	orrs	r2, r5
   3455e:	9903      	ldr	r1, [sp, #12]
   34560:	4693      	mov	fp, r2
   34562:	0c10      	lsrs	r0, r2, #16
   34564:	0c0a      	lsrs	r2, r1, #16
   34566:	4691      	mov	r9, r2
   34568:	0409      	lsls	r1, r1, #16
   3456a:	465a      	mov	r2, fp
   3456c:	0c09      	lsrs	r1, r1, #16
   3456e:	464e      	mov	r6, r9
   34570:	000d      	movs	r5, r1
   34572:	0412      	lsls	r2, r2, #16
   34574:	0c12      	lsrs	r2, r2, #16
   34576:	4345      	muls	r5, r0
   34578:	9105      	str	r1, [sp, #20]
   3457a:	4351      	muls	r1, r2
   3457c:	4372      	muls	r2, r6
   3457e:	4370      	muls	r0, r6
   34580:	1952      	adds	r2, r2, r5
   34582:	0c0e      	lsrs	r6, r1, #16
   34584:	18b2      	adds	r2, r6, r2
   34586:	4295      	cmp	r5, r2
   34588:	d903      	bls.n	34592 <__aeabi_ddiv+0x2de>
   3458a:	2580      	movs	r5, #128	; 0x80
   3458c:	026d      	lsls	r5, r5, #9
   3458e:	46ac      	mov	ip, r5
   34590:	4460      	add	r0, ip
   34592:	0c15      	lsrs	r5, r2, #16
   34594:	0409      	lsls	r1, r1, #16
   34596:	0412      	lsls	r2, r2, #16
   34598:	0c09      	lsrs	r1, r1, #16
   3459a:	1828      	adds	r0, r5, r0
   3459c:	1852      	adds	r2, r2, r1
   3459e:	4283      	cmp	r3, r0
   345a0:	d200      	bcs.n	345a4 <__aeabi_ddiv+0x2f0>
   345a2:	e0ce      	b.n	34742 <__aeabi_ddiv+0x48e>
   345a4:	d100      	bne.n	345a8 <__aeabi_ddiv+0x2f4>
   345a6:	e0c8      	b.n	3473a <__aeabi_ddiv+0x486>
   345a8:	1a1d      	subs	r5, r3, r0
   345aa:	4653      	mov	r3, sl
   345ac:	1a9e      	subs	r6, r3, r2
   345ae:	45b2      	cmp	sl, r6
   345b0:	4192      	sbcs	r2, r2
   345b2:	4252      	negs	r2, r2
   345b4:	1aab      	subs	r3, r5, r2
   345b6:	469a      	mov	sl, r3
   345b8:	4598      	cmp	r8, r3
   345ba:	d100      	bne.n	345be <__aeabi_ddiv+0x30a>
   345bc:	e117      	b.n	347ee <__aeabi_ddiv+0x53a>
   345be:	0039      	movs	r1, r7
   345c0:	0018      	movs	r0, r3
   345c2:	f7ff f837 	bl	33634 <__udivsi3>
   345c6:	9b01      	ldr	r3, [sp, #4]
   345c8:	0005      	movs	r5, r0
   345ca:	4343      	muls	r3, r0
   345cc:	0039      	movs	r1, r7
   345ce:	4650      	mov	r0, sl
   345d0:	9304      	str	r3, [sp, #16]
   345d2:	f7ff f8b5 	bl	33740 <__aeabi_uidivmod>
   345d6:	9804      	ldr	r0, [sp, #16]
   345d8:	040b      	lsls	r3, r1, #16
   345da:	0c31      	lsrs	r1, r6, #16
   345dc:	4319      	orrs	r1, r3
   345de:	4288      	cmp	r0, r1
   345e0:	d909      	bls.n	345f6 <__aeabi_ddiv+0x342>
   345e2:	4441      	add	r1, r8
   345e4:	1e6b      	subs	r3, r5, #1
   345e6:	4588      	cmp	r8, r1
   345e8:	d900      	bls.n	345ec <__aeabi_ddiv+0x338>
   345ea:	e107      	b.n	347fc <__aeabi_ddiv+0x548>
   345ec:	4288      	cmp	r0, r1
   345ee:	d800      	bhi.n	345f2 <__aeabi_ddiv+0x33e>
   345f0:	e104      	b.n	347fc <__aeabi_ddiv+0x548>
   345f2:	3d02      	subs	r5, #2
   345f4:	4441      	add	r1, r8
   345f6:	9b04      	ldr	r3, [sp, #16]
   345f8:	1acb      	subs	r3, r1, r3
   345fa:	0018      	movs	r0, r3
   345fc:	0039      	movs	r1, r7
   345fe:	9304      	str	r3, [sp, #16]
   34600:	f7ff f818 	bl	33634 <__udivsi3>
   34604:	9b01      	ldr	r3, [sp, #4]
   34606:	4682      	mov	sl, r0
   34608:	4343      	muls	r3, r0
   3460a:	0039      	movs	r1, r7
   3460c:	9804      	ldr	r0, [sp, #16]
   3460e:	9301      	str	r3, [sp, #4]
   34610:	f7ff f896 	bl	33740 <__aeabi_uidivmod>
   34614:	9801      	ldr	r0, [sp, #4]
   34616:	040b      	lsls	r3, r1, #16
   34618:	0431      	lsls	r1, r6, #16
   3461a:	0c09      	lsrs	r1, r1, #16
   3461c:	4319      	orrs	r1, r3
   3461e:	4288      	cmp	r0, r1
   34620:	d90d      	bls.n	3463e <__aeabi_ddiv+0x38a>
   34622:	4653      	mov	r3, sl
   34624:	4441      	add	r1, r8
   34626:	3b01      	subs	r3, #1
   34628:	4588      	cmp	r8, r1
   3462a:	d900      	bls.n	3462e <__aeabi_ddiv+0x37a>
   3462c:	e0e8      	b.n	34800 <__aeabi_ddiv+0x54c>
   3462e:	4288      	cmp	r0, r1
   34630:	d800      	bhi.n	34634 <__aeabi_ddiv+0x380>
   34632:	e0e5      	b.n	34800 <__aeabi_ddiv+0x54c>
   34634:	2302      	movs	r3, #2
   34636:	425b      	negs	r3, r3
   34638:	469c      	mov	ip, r3
   3463a:	4441      	add	r1, r8
   3463c:	44e2      	add	sl, ip
   3463e:	9b01      	ldr	r3, [sp, #4]
   34640:	042d      	lsls	r5, r5, #16
   34642:	1ace      	subs	r6, r1, r3
   34644:	4651      	mov	r1, sl
   34646:	4329      	orrs	r1, r5
   34648:	9d05      	ldr	r5, [sp, #20]
   3464a:	464f      	mov	r7, r9
   3464c:	002a      	movs	r2, r5
   3464e:	040b      	lsls	r3, r1, #16
   34650:	0c08      	lsrs	r0, r1, #16
   34652:	0c1b      	lsrs	r3, r3, #16
   34654:	435a      	muls	r2, r3
   34656:	4345      	muls	r5, r0
   34658:	437b      	muls	r3, r7
   3465a:	4378      	muls	r0, r7
   3465c:	195b      	adds	r3, r3, r5
   3465e:	0c17      	lsrs	r7, r2, #16
   34660:	18fb      	adds	r3, r7, r3
   34662:	429d      	cmp	r5, r3
   34664:	d903      	bls.n	3466e <__aeabi_ddiv+0x3ba>
   34666:	2580      	movs	r5, #128	; 0x80
   34668:	026d      	lsls	r5, r5, #9
   3466a:	46ac      	mov	ip, r5
   3466c:	4460      	add	r0, ip
   3466e:	0c1d      	lsrs	r5, r3, #16
   34670:	0412      	lsls	r2, r2, #16
   34672:	041b      	lsls	r3, r3, #16
   34674:	0c12      	lsrs	r2, r2, #16
   34676:	1828      	adds	r0, r5, r0
   34678:	189b      	adds	r3, r3, r2
   3467a:	4286      	cmp	r6, r0
   3467c:	d200      	bcs.n	34680 <__aeabi_ddiv+0x3cc>
   3467e:	e093      	b.n	347a8 <__aeabi_ddiv+0x4f4>
   34680:	d100      	bne.n	34684 <__aeabi_ddiv+0x3d0>
   34682:	e08e      	b.n	347a2 <__aeabi_ddiv+0x4ee>
   34684:	2301      	movs	r3, #1
   34686:	4319      	orrs	r1, r3
   34688:	4ba0      	ldr	r3, [pc, #640]	; (3490c <__aeabi_ddiv+0x658>)
   3468a:	18e3      	adds	r3, r4, r3
   3468c:	2b00      	cmp	r3, #0
   3468e:	dc00      	bgt.n	34692 <__aeabi_ddiv+0x3de>
   34690:	e099      	b.n	347c6 <__aeabi_ddiv+0x512>
   34692:	074a      	lsls	r2, r1, #29
   34694:	d000      	beq.n	34698 <__aeabi_ddiv+0x3e4>
   34696:	e09e      	b.n	347d6 <__aeabi_ddiv+0x522>
   34698:	465a      	mov	r2, fp
   3469a:	01d2      	lsls	r2, r2, #7
   3469c:	d506      	bpl.n	346ac <__aeabi_ddiv+0x3f8>
   3469e:	465a      	mov	r2, fp
   346a0:	4b9b      	ldr	r3, [pc, #620]	; (34910 <__aeabi_ddiv+0x65c>)
   346a2:	401a      	ands	r2, r3
   346a4:	2380      	movs	r3, #128	; 0x80
   346a6:	4693      	mov	fp, r2
   346a8:	00db      	lsls	r3, r3, #3
   346aa:	18e3      	adds	r3, r4, r3
   346ac:	4a99      	ldr	r2, [pc, #612]	; (34914 <__aeabi_ddiv+0x660>)
   346ae:	4293      	cmp	r3, r2
   346b0:	dd68      	ble.n	34784 <__aeabi_ddiv+0x4d0>
   346b2:	2301      	movs	r3, #1
   346b4:	9a02      	ldr	r2, [sp, #8]
   346b6:	4c98      	ldr	r4, [pc, #608]	; (34918 <__aeabi_ddiv+0x664>)
   346b8:	401a      	ands	r2, r3
   346ba:	2300      	movs	r3, #0
   346bc:	4694      	mov	ip, r2
   346be:	4698      	mov	r8, r3
   346c0:	2200      	movs	r2, #0
   346c2:	e6c5      	b.n	34450 <__aeabi_ddiv+0x19c>
   346c4:	2280      	movs	r2, #128	; 0x80
   346c6:	464b      	mov	r3, r9
   346c8:	0312      	lsls	r2, r2, #12
   346ca:	4213      	tst	r3, r2
   346cc:	d00a      	beq.n	346e4 <__aeabi_ddiv+0x430>
   346ce:	465b      	mov	r3, fp
   346d0:	4213      	tst	r3, r2
   346d2:	d106      	bne.n	346e2 <__aeabi_ddiv+0x42e>
   346d4:	431a      	orrs	r2, r3
   346d6:	0312      	lsls	r2, r2, #12
   346d8:	0b12      	lsrs	r2, r2, #12
   346da:	46ac      	mov	ip, r5
   346dc:	4688      	mov	r8, r1
   346de:	4c8e      	ldr	r4, [pc, #568]	; (34918 <__aeabi_ddiv+0x664>)
   346e0:	e6b6      	b.n	34450 <__aeabi_ddiv+0x19c>
   346e2:	464b      	mov	r3, r9
   346e4:	431a      	orrs	r2, r3
   346e6:	0312      	lsls	r2, r2, #12
   346e8:	0b12      	lsrs	r2, r2, #12
   346ea:	46bc      	mov	ip, r7
   346ec:	4c8a      	ldr	r4, [pc, #552]	; (34918 <__aeabi_ddiv+0x664>)
   346ee:	e6af      	b.n	34450 <__aeabi_ddiv+0x19c>
   346f0:	0003      	movs	r3, r0
   346f2:	465a      	mov	r2, fp
   346f4:	3b28      	subs	r3, #40	; 0x28
   346f6:	409a      	lsls	r2, r3
   346f8:	2300      	movs	r3, #0
   346fa:	4691      	mov	r9, r2
   346fc:	4698      	mov	r8, r3
   346fe:	e657      	b.n	343b0 <__aeabi_ddiv+0xfc>
   34700:	4658      	mov	r0, fp
   34702:	f000 ff0d 	bl	35520 <__clzsi2>
   34706:	3020      	adds	r0, #32
   34708:	e640      	b.n	3438c <__aeabi_ddiv+0xd8>
   3470a:	0003      	movs	r3, r0
   3470c:	4652      	mov	r2, sl
   3470e:	3b28      	subs	r3, #40	; 0x28
   34710:	409a      	lsls	r2, r3
   34712:	2100      	movs	r1, #0
   34714:	4693      	mov	fp, r2
   34716:	e677      	b.n	34408 <__aeabi_ddiv+0x154>
   34718:	f000 ff02 	bl	35520 <__clzsi2>
   3471c:	3020      	adds	r0, #32
   3471e:	e65f      	b.n	343e0 <__aeabi_ddiv+0x12c>
   34720:	4588      	cmp	r8, r1
   34722:	d200      	bcs.n	34726 <__aeabi_ddiv+0x472>
   34724:	e6c7      	b.n	344b6 <__aeabi_ddiv+0x202>
   34726:	464b      	mov	r3, r9
   34728:	07de      	lsls	r6, r3, #31
   3472a:	085d      	lsrs	r5, r3, #1
   3472c:	4643      	mov	r3, r8
   3472e:	085b      	lsrs	r3, r3, #1
   34730:	431e      	orrs	r6, r3
   34732:	4643      	mov	r3, r8
   34734:	07db      	lsls	r3, r3, #31
   34736:	469a      	mov	sl, r3
   34738:	e6c2      	b.n	344c0 <__aeabi_ddiv+0x20c>
   3473a:	2500      	movs	r5, #0
   3473c:	4592      	cmp	sl, r2
   3473e:	d300      	bcc.n	34742 <__aeabi_ddiv+0x48e>
   34740:	e733      	b.n	345aa <__aeabi_ddiv+0x2f6>
   34742:	9e03      	ldr	r6, [sp, #12]
   34744:	4659      	mov	r1, fp
   34746:	46b4      	mov	ip, r6
   34748:	44e2      	add	sl, ip
   3474a:	45b2      	cmp	sl, r6
   3474c:	41ad      	sbcs	r5, r5
   3474e:	426d      	negs	r5, r5
   34750:	4445      	add	r5, r8
   34752:	18eb      	adds	r3, r5, r3
   34754:	3901      	subs	r1, #1
   34756:	4598      	cmp	r8, r3
   34758:	d207      	bcs.n	3476a <__aeabi_ddiv+0x4b6>
   3475a:	4298      	cmp	r0, r3
   3475c:	d900      	bls.n	34760 <__aeabi_ddiv+0x4ac>
   3475e:	e07f      	b.n	34860 <__aeabi_ddiv+0x5ac>
   34760:	d100      	bne.n	34764 <__aeabi_ddiv+0x4b0>
   34762:	e0bc      	b.n	348de <__aeabi_ddiv+0x62a>
   34764:	1a1d      	subs	r5, r3, r0
   34766:	468b      	mov	fp, r1
   34768:	e71f      	b.n	345aa <__aeabi_ddiv+0x2f6>
   3476a:	4598      	cmp	r8, r3
   3476c:	d1fa      	bne.n	34764 <__aeabi_ddiv+0x4b0>
   3476e:	9d03      	ldr	r5, [sp, #12]
   34770:	4555      	cmp	r5, sl
   34772:	d9f2      	bls.n	3475a <__aeabi_ddiv+0x4a6>
   34774:	4643      	mov	r3, r8
   34776:	468b      	mov	fp, r1
   34778:	1a1d      	subs	r5, r3, r0
   3477a:	e716      	b.n	345aa <__aeabi_ddiv+0x2f6>
   3477c:	469b      	mov	fp, r3
   3477e:	e6ca      	b.n	34516 <__aeabi_ddiv+0x262>
   34780:	0015      	movs	r5, r2
   34782:	e6e7      	b.n	34554 <__aeabi_ddiv+0x2a0>
   34784:	465a      	mov	r2, fp
   34786:	08c9      	lsrs	r1, r1, #3
   34788:	0752      	lsls	r2, r2, #29
   3478a:	430a      	orrs	r2, r1
   3478c:	055b      	lsls	r3, r3, #21
   3478e:	4690      	mov	r8, r2
   34790:	0d5c      	lsrs	r4, r3, #21
   34792:	465a      	mov	r2, fp
   34794:	2301      	movs	r3, #1
   34796:	9902      	ldr	r1, [sp, #8]
   34798:	0252      	lsls	r2, r2, #9
   3479a:	4019      	ands	r1, r3
   3479c:	0b12      	lsrs	r2, r2, #12
   3479e:	468c      	mov	ip, r1
   347a0:	e656      	b.n	34450 <__aeabi_ddiv+0x19c>
   347a2:	2b00      	cmp	r3, #0
   347a4:	d100      	bne.n	347a8 <__aeabi_ddiv+0x4f4>
   347a6:	e76f      	b.n	34688 <__aeabi_ddiv+0x3d4>
   347a8:	4446      	add	r6, r8
   347aa:	1e4a      	subs	r2, r1, #1
   347ac:	45b0      	cmp	r8, r6
   347ae:	d929      	bls.n	34804 <__aeabi_ddiv+0x550>
   347b0:	0011      	movs	r1, r2
   347b2:	4286      	cmp	r6, r0
   347b4:	d000      	beq.n	347b8 <__aeabi_ddiv+0x504>
   347b6:	e765      	b.n	34684 <__aeabi_ddiv+0x3d0>
   347b8:	9a03      	ldr	r2, [sp, #12]
   347ba:	4293      	cmp	r3, r2
   347bc:	d000      	beq.n	347c0 <__aeabi_ddiv+0x50c>
   347be:	e761      	b.n	34684 <__aeabi_ddiv+0x3d0>
   347c0:	e762      	b.n	34688 <__aeabi_ddiv+0x3d4>
   347c2:	2101      	movs	r1, #1
   347c4:	4249      	negs	r1, r1
   347c6:	2001      	movs	r0, #1
   347c8:	1ac2      	subs	r2, r0, r3
   347ca:	2a38      	cmp	r2, #56	; 0x38
   347cc:	dd21      	ble.n	34812 <__aeabi_ddiv+0x55e>
   347ce:	9b02      	ldr	r3, [sp, #8]
   347d0:	4003      	ands	r3, r0
   347d2:	469c      	mov	ip, r3
   347d4:	e638      	b.n	34448 <__aeabi_ddiv+0x194>
   347d6:	220f      	movs	r2, #15
   347d8:	400a      	ands	r2, r1
   347da:	2a04      	cmp	r2, #4
   347dc:	d100      	bne.n	347e0 <__aeabi_ddiv+0x52c>
   347de:	e75b      	b.n	34698 <__aeabi_ddiv+0x3e4>
   347e0:	000a      	movs	r2, r1
   347e2:	1d11      	adds	r1, r2, #4
   347e4:	4291      	cmp	r1, r2
   347e6:	4192      	sbcs	r2, r2
   347e8:	4252      	negs	r2, r2
   347ea:	4493      	add	fp, r2
   347ec:	e754      	b.n	34698 <__aeabi_ddiv+0x3e4>
   347ee:	4b47      	ldr	r3, [pc, #284]	; (3490c <__aeabi_ddiv+0x658>)
   347f0:	18e3      	adds	r3, r4, r3
   347f2:	2b00      	cmp	r3, #0
   347f4:	dde5      	ble.n	347c2 <__aeabi_ddiv+0x50e>
   347f6:	2201      	movs	r2, #1
   347f8:	4252      	negs	r2, r2
   347fa:	e7f2      	b.n	347e2 <__aeabi_ddiv+0x52e>
   347fc:	001d      	movs	r5, r3
   347fe:	e6fa      	b.n	345f6 <__aeabi_ddiv+0x342>
   34800:	469a      	mov	sl, r3
   34802:	e71c      	b.n	3463e <__aeabi_ddiv+0x38a>
   34804:	42b0      	cmp	r0, r6
   34806:	d839      	bhi.n	3487c <__aeabi_ddiv+0x5c8>
   34808:	d06e      	beq.n	348e8 <__aeabi_ddiv+0x634>
   3480a:	0011      	movs	r1, r2
   3480c:	e73a      	b.n	34684 <__aeabi_ddiv+0x3d0>
   3480e:	9302      	str	r3, [sp, #8]
   34810:	e73a      	b.n	34688 <__aeabi_ddiv+0x3d4>
   34812:	2a1f      	cmp	r2, #31
   34814:	dc3c      	bgt.n	34890 <__aeabi_ddiv+0x5dc>
   34816:	2320      	movs	r3, #32
   34818:	1a9b      	subs	r3, r3, r2
   3481a:	000c      	movs	r4, r1
   3481c:	4658      	mov	r0, fp
   3481e:	4099      	lsls	r1, r3
   34820:	4098      	lsls	r0, r3
   34822:	1e4b      	subs	r3, r1, #1
   34824:	4199      	sbcs	r1, r3
   34826:	465b      	mov	r3, fp
   34828:	40d4      	lsrs	r4, r2
   3482a:	40d3      	lsrs	r3, r2
   3482c:	4320      	orrs	r0, r4
   3482e:	4308      	orrs	r0, r1
   34830:	001a      	movs	r2, r3
   34832:	0743      	lsls	r3, r0, #29
   34834:	d009      	beq.n	3484a <__aeabi_ddiv+0x596>
   34836:	230f      	movs	r3, #15
   34838:	4003      	ands	r3, r0
   3483a:	2b04      	cmp	r3, #4
   3483c:	d005      	beq.n	3484a <__aeabi_ddiv+0x596>
   3483e:	0001      	movs	r1, r0
   34840:	1d08      	adds	r0, r1, #4
   34842:	4288      	cmp	r0, r1
   34844:	419b      	sbcs	r3, r3
   34846:	425b      	negs	r3, r3
   34848:	18d2      	adds	r2, r2, r3
   3484a:	0213      	lsls	r3, r2, #8
   3484c:	d53a      	bpl.n	348c4 <__aeabi_ddiv+0x610>
   3484e:	2301      	movs	r3, #1
   34850:	9a02      	ldr	r2, [sp, #8]
   34852:	2401      	movs	r4, #1
   34854:	401a      	ands	r2, r3
   34856:	2300      	movs	r3, #0
   34858:	4694      	mov	ip, r2
   3485a:	4698      	mov	r8, r3
   3485c:	2200      	movs	r2, #0
   3485e:	e5f7      	b.n	34450 <__aeabi_ddiv+0x19c>
   34860:	2102      	movs	r1, #2
   34862:	4249      	negs	r1, r1
   34864:	468c      	mov	ip, r1
   34866:	9d03      	ldr	r5, [sp, #12]
   34868:	44e3      	add	fp, ip
   3486a:	46ac      	mov	ip, r5
   3486c:	44e2      	add	sl, ip
   3486e:	45aa      	cmp	sl, r5
   34870:	41ad      	sbcs	r5, r5
   34872:	426d      	negs	r5, r5
   34874:	4445      	add	r5, r8
   34876:	18ed      	adds	r5, r5, r3
   34878:	1a2d      	subs	r5, r5, r0
   3487a:	e696      	b.n	345aa <__aeabi_ddiv+0x2f6>
   3487c:	1e8a      	subs	r2, r1, #2
   3487e:	9903      	ldr	r1, [sp, #12]
   34880:	004d      	lsls	r5, r1, #1
   34882:	428d      	cmp	r5, r1
   34884:	4189      	sbcs	r1, r1
   34886:	4249      	negs	r1, r1
   34888:	4441      	add	r1, r8
   3488a:	1876      	adds	r6, r6, r1
   3488c:	9503      	str	r5, [sp, #12]
   3488e:	e78f      	b.n	347b0 <__aeabi_ddiv+0x4fc>
   34890:	201f      	movs	r0, #31
   34892:	4240      	negs	r0, r0
   34894:	1ac3      	subs	r3, r0, r3
   34896:	4658      	mov	r0, fp
   34898:	40d8      	lsrs	r0, r3
   3489a:	0003      	movs	r3, r0
   3489c:	2a20      	cmp	r2, #32
   3489e:	d028      	beq.n	348f2 <__aeabi_ddiv+0x63e>
   348a0:	2040      	movs	r0, #64	; 0x40
   348a2:	465d      	mov	r5, fp
   348a4:	1a82      	subs	r2, r0, r2
   348a6:	4095      	lsls	r5, r2
   348a8:	4329      	orrs	r1, r5
   348aa:	1e4a      	subs	r2, r1, #1
   348ac:	4191      	sbcs	r1, r2
   348ae:	4319      	orrs	r1, r3
   348b0:	2307      	movs	r3, #7
   348b2:	2200      	movs	r2, #0
   348b4:	400b      	ands	r3, r1
   348b6:	d009      	beq.n	348cc <__aeabi_ddiv+0x618>
   348b8:	230f      	movs	r3, #15
   348ba:	2200      	movs	r2, #0
   348bc:	400b      	ands	r3, r1
   348be:	0008      	movs	r0, r1
   348c0:	2b04      	cmp	r3, #4
   348c2:	d1bd      	bne.n	34840 <__aeabi_ddiv+0x58c>
   348c4:	0001      	movs	r1, r0
   348c6:	0753      	lsls	r3, r2, #29
   348c8:	0252      	lsls	r2, r2, #9
   348ca:	0b12      	lsrs	r2, r2, #12
   348cc:	08c9      	lsrs	r1, r1, #3
   348ce:	4319      	orrs	r1, r3
   348d0:	2301      	movs	r3, #1
   348d2:	4688      	mov	r8, r1
   348d4:	9902      	ldr	r1, [sp, #8]
   348d6:	2400      	movs	r4, #0
   348d8:	4019      	ands	r1, r3
   348da:	468c      	mov	ip, r1
   348dc:	e5b8      	b.n	34450 <__aeabi_ddiv+0x19c>
   348de:	4552      	cmp	r2, sl
   348e0:	d8be      	bhi.n	34860 <__aeabi_ddiv+0x5ac>
   348e2:	468b      	mov	fp, r1
   348e4:	2500      	movs	r5, #0
   348e6:	e660      	b.n	345aa <__aeabi_ddiv+0x2f6>
   348e8:	9d03      	ldr	r5, [sp, #12]
   348ea:	429d      	cmp	r5, r3
   348ec:	d3c6      	bcc.n	3487c <__aeabi_ddiv+0x5c8>
   348ee:	0011      	movs	r1, r2
   348f0:	e762      	b.n	347b8 <__aeabi_ddiv+0x504>
   348f2:	2500      	movs	r5, #0
   348f4:	e7d8      	b.n	348a8 <__aeabi_ddiv+0x5f4>
   348f6:	2280      	movs	r2, #128	; 0x80
   348f8:	465b      	mov	r3, fp
   348fa:	0312      	lsls	r2, r2, #12
   348fc:	431a      	orrs	r2, r3
   348fe:	9b01      	ldr	r3, [sp, #4]
   34900:	0312      	lsls	r2, r2, #12
   34902:	0b12      	lsrs	r2, r2, #12
   34904:	469c      	mov	ip, r3
   34906:	4688      	mov	r8, r1
   34908:	4c03      	ldr	r4, [pc, #12]	; (34918 <__aeabi_ddiv+0x664>)
   3490a:	e5a1      	b.n	34450 <__aeabi_ddiv+0x19c>
   3490c:	000003ff 	.word	0x000003ff
   34910:	feffffff 	.word	0xfeffffff
   34914:	000007fe 	.word	0x000007fe
   34918:	000007ff 	.word	0x000007ff

0003491c <__aeabi_dmul>:
   3491c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3491e:	4657      	mov	r7, sl
   34920:	4645      	mov	r5, r8
   34922:	46de      	mov	lr, fp
   34924:	464e      	mov	r6, r9
   34926:	b5e0      	push	{r5, r6, r7, lr}
   34928:	030c      	lsls	r4, r1, #12
   3492a:	4698      	mov	r8, r3
   3492c:	004e      	lsls	r6, r1, #1
   3492e:	0b23      	lsrs	r3, r4, #12
   34930:	b087      	sub	sp, #28
   34932:	0007      	movs	r7, r0
   34934:	4692      	mov	sl, r2
   34936:	469b      	mov	fp, r3
   34938:	0d76      	lsrs	r6, r6, #21
   3493a:	0fcd      	lsrs	r5, r1, #31
   3493c:	2e00      	cmp	r6, #0
   3493e:	d06b      	beq.n	34a18 <__aeabi_dmul+0xfc>
   34940:	4b6d      	ldr	r3, [pc, #436]	; (34af8 <__aeabi_dmul+0x1dc>)
   34942:	429e      	cmp	r6, r3
   34944:	d035      	beq.n	349b2 <__aeabi_dmul+0x96>
   34946:	2480      	movs	r4, #128	; 0x80
   34948:	465b      	mov	r3, fp
   3494a:	0f42      	lsrs	r2, r0, #29
   3494c:	0424      	lsls	r4, r4, #16
   3494e:	00db      	lsls	r3, r3, #3
   34950:	4314      	orrs	r4, r2
   34952:	431c      	orrs	r4, r3
   34954:	00c3      	lsls	r3, r0, #3
   34956:	4699      	mov	r9, r3
   34958:	4b68      	ldr	r3, [pc, #416]	; (34afc <__aeabi_dmul+0x1e0>)
   3495a:	46a3      	mov	fp, r4
   3495c:	469c      	mov	ip, r3
   3495e:	2300      	movs	r3, #0
   34960:	2700      	movs	r7, #0
   34962:	4466      	add	r6, ip
   34964:	9302      	str	r3, [sp, #8]
   34966:	4643      	mov	r3, r8
   34968:	031c      	lsls	r4, r3, #12
   3496a:	005a      	lsls	r2, r3, #1
   3496c:	0fdb      	lsrs	r3, r3, #31
   3496e:	4650      	mov	r0, sl
   34970:	0b24      	lsrs	r4, r4, #12
   34972:	0d52      	lsrs	r2, r2, #21
   34974:	4698      	mov	r8, r3
   34976:	d100      	bne.n	3497a <__aeabi_dmul+0x5e>
   34978:	e076      	b.n	34a68 <__aeabi_dmul+0x14c>
   3497a:	4b5f      	ldr	r3, [pc, #380]	; (34af8 <__aeabi_dmul+0x1dc>)
   3497c:	429a      	cmp	r2, r3
   3497e:	d06d      	beq.n	34a5c <__aeabi_dmul+0x140>
   34980:	2380      	movs	r3, #128	; 0x80
   34982:	0f41      	lsrs	r1, r0, #29
   34984:	041b      	lsls	r3, r3, #16
   34986:	430b      	orrs	r3, r1
   34988:	495c      	ldr	r1, [pc, #368]	; (34afc <__aeabi_dmul+0x1e0>)
   3498a:	00e4      	lsls	r4, r4, #3
   3498c:	468c      	mov	ip, r1
   3498e:	431c      	orrs	r4, r3
   34990:	00c3      	lsls	r3, r0, #3
   34992:	2000      	movs	r0, #0
   34994:	4462      	add	r2, ip
   34996:	4641      	mov	r1, r8
   34998:	18b6      	adds	r6, r6, r2
   3499a:	4069      	eors	r1, r5
   3499c:	1c72      	adds	r2, r6, #1
   3499e:	9101      	str	r1, [sp, #4]
   349a0:	4694      	mov	ip, r2
   349a2:	4307      	orrs	r7, r0
   349a4:	2f0f      	cmp	r7, #15
   349a6:	d900      	bls.n	349aa <__aeabi_dmul+0x8e>
   349a8:	e0b0      	b.n	34b0c <__aeabi_dmul+0x1f0>
   349aa:	4a55      	ldr	r2, [pc, #340]	; (34b00 <__aeabi_dmul+0x1e4>)
   349ac:	00bf      	lsls	r7, r7, #2
   349ae:	59d2      	ldr	r2, [r2, r7]
   349b0:	4697      	mov	pc, r2
   349b2:	465b      	mov	r3, fp
   349b4:	4303      	orrs	r3, r0
   349b6:	4699      	mov	r9, r3
   349b8:	d000      	beq.n	349bc <__aeabi_dmul+0xa0>
   349ba:	e087      	b.n	34acc <__aeabi_dmul+0x1b0>
   349bc:	2300      	movs	r3, #0
   349be:	469b      	mov	fp, r3
   349c0:	3302      	adds	r3, #2
   349c2:	2708      	movs	r7, #8
   349c4:	9302      	str	r3, [sp, #8]
   349c6:	e7ce      	b.n	34966 <__aeabi_dmul+0x4a>
   349c8:	4642      	mov	r2, r8
   349ca:	9201      	str	r2, [sp, #4]
   349cc:	2802      	cmp	r0, #2
   349ce:	d067      	beq.n	34aa0 <__aeabi_dmul+0x184>
   349d0:	2803      	cmp	r0, #3
   349d2:	d100      	bne.n	349d6 <__aeabi_dmul+0xba>
   349d4:	e20e      	b.n	34df4 <__aeabi_dmul+0x4d8>
   349d6:	2801      	cmp	r0, #1
   349d8:	d000      	beq.n	349dc <__aeabi_dmul+0xc0>
   349da:	e162      	b.n	34ca2 <__aeabi_dmul+0x386>
   349dc:	2300      	movs	r3, #0
   349de:	2400      	movs	r4, #0
   349e0:	2200      	movs	r2, #0
   349e2:	4699      	mov	r9, r3
   349e4:	9901      	ldr	r1, [sp, #4]
   349e6:	4001      	ands	r1, r0
   349e8:	b2cd      	uxtb	r5, r1
   349ea:	2100      	movs	r1, #0
   349ec:	0312      	lsls	r2, r2, #12
   349ee:	0d0b      	lsrs	r3, r1, #20
   349f0:	0b12      	lsrs	r2, r2, #12
   349f2:	051b      	lsls	r3, r3, #20
   349f4:	4313      	orrs	r3, r2
   349f6:	4a43      	ldr	r2, [pc, #268]	; (34b04 <__aeabi_dmul+0x1e8>)
   349f8:	0524      	lsls	r4, r4, #20
   349fa:	4013      	ands	r3, r2
   349fc:	431c      	orrs	r4, r3
   349fe:	0064      	lsls	r4, r4, #1
   34a00:	07ed      	lsls	r5, r5, #31
   34a02:	0864      	lsrs	r4, r4, #1
   34a04:	432c      	orrs	r4, r5
   34a06:	4648      	mov	r0, r9
   34a08:	0021      	movs	r1, r4
   34a0a:	b007      	add	sp, #28
   34a0c:	bc3c      	pop	{r2, r3, r4, r5}
   34a0e:	4690      	mov	r8, r2
   34a10:	4699      	mov	r9, r3
   34a12:	46a2      	mov	sl, r4
   34a14:	46ab      	mov	fp, r5
   34a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34a18:	4303      	orrs	r3, r0
   34a1a:	4699      	mov	r9, r3
   34a1c:	d04f      	beq.n	34abe <__aeabi_dmul+0x1a2>
   34a1e:	465b      	mov	r3, fp
   34a20:	2b00      	cmp	r3, #0
   34a22:	d100      	bne.n	34a26 <__aeabi_dmul+0x10a>
   34a24:	e189      	b.n	34d3a <__aeabi_dmul+0x41e>
   34a26:	4658      	mov	r0, fp
   34a28:	f000 fd7a 	bl	35520 <__clzsi2>
   34a2c:	0003      	movs	r3, r0
   34a2e:	3b0b      	subs	r3, #11
   34a30:	2b1c      	cmp	r3, #28
   34a32:	dd00      	ble.n	34a36 <__aeabi_dmul+0x11a>
   34a34:	e17a      	b.n	34d2c <__aeabi_dmul+0x410>
   34a36:	221d      	movs	r2, #29
   34a38:	1ad3      	subs	r3, r2, r3
   34a3a:	003a      	movs	r2, r7
   34a3c:	0001      	movs	r1, r0
   34a3e:	465c      	mov	r4, fp
   34a40:	40da      	lsrs	r2, r3
   34a42:	3908      	subs	r1, #8
   34a44:	408c      	lsls	r4, r1
   34a46:	0013      	movs	r3, r2
   34a48:	408f      	lsls	r7, r1
   34a4a:	4323      	orrs	r3, r4
   34a4c:	469b      	mov	fp, r3
   34a4e:	46b9      	mov	r9, r7
   34a50:	2300      	movs	r3, #0
   34a52:	4e2d      	ldr	r6, [pc, #180]	; (34b08 <__aeabi_dmul+0x1ec>)
   34a54:	2700      	movs	r7, #0
   34a56:	1a36      	subs	r6, r6, r0
   34a58:	9302      	str	r3, [sp, #8]
   34a5a:	e784      	b.n	34966 <__aeabi_dmul+0x4a>
   34a5c:	4653      	mov	r3, sl
   34a5e:	4323      	orrs	r3, r4
   34a60:	d12a      	bne.n	34ab8 <__aeabi_dmul+0x19c>
   34a62:	2400      	movs	r4, #0
   34a64:	2002      	movs	r0, #2
   34a66:	e796      	b.n	34996 <__aeabi_dmul+0x7a>
   34a68:	4653      	mov	r3, sl
   34a6a:	4323      	orrs	r3, r4
   34a6c:	d020      	beq.n	34ab0 <__aeabi_dmul+0x194>
   34a6e:	2c00      	cmp	r4, #0
   34a70:	d100      	bne.n	34a74 <__aeabi_dmul+0x158>
   34a72:	e157      	b.n	34d24 <__aeabi_dmul+0x408>
   34a74:	0020      	movs	r0, r4
   34a76:	f000 fd53 	bl	35520 <__clzsi2>
   34a7a:	0003      	movs	r3, r0
   34a7c:	3b0b      	subs	r3, #11
   34a7e:	2b1c      	cmp	r3, #28
   34a80:	dd00      	ble.n	34a84 <__aeabi_dmul+0x168>
   34a82:	e149      	b.n	34d18 <__aeabi_dmul+0x3fc>
   34a84:	211d      	movs	r1, #29
   34a86:	1acb      	subs	r3, r1, r3
   34a88:	4651      	mov	r1, sl
   34a8a:	0002      	movs	r2, r0
   34a8c:	40d9      	lsrs	r1, r3
   34a8e:	4653      	mov	r3, sl
   34a90:	3a08      	subs	r2, #8
   34a92:	4094      	lsls	r4, r2
   34a94:	4093      	lsls	r3, r2
   34a96:	430c      	orrs	r4, r1
   34a98:	4a1b      	ldr	r2, [pc, #108]	; (34b08 <__aeabi_dmul+0x1ec>)
   34a9a:	1a12      	subs	r2, r2, r0
   34a9c:	2000      	movs	r0, #0
   34a9e:	e77a      	b.n	34996 <__aeabi_dmul+0x7a>
   34aa0:	2501      	movs	r5, #1
   34aa2:	9b01      	ldr	r3, [sp, #4]
   34aa4:	4c14      	ldr	r4, [pc, #80]	; (34af8 <__aeabi_dmul+0x1dc>)
   34aa6:	401d      	ands	r5, r3
   34aa8:	2300      	movs	r3, #0
   34aaa:	2200      	movs	r2, #0
   34aac:	4699      	mov	r9, r3
   34aae:	e79c      	b.n	349ea <__aeabi_dmul+0xce>
   34ab0:	2400      	movs	r4, #0
   34ab2:	2200      	movs	r2, #0
   34ab4:	2001      	movs	r0, #1
   34ab6:	e76e      	b.n	34996 <__aeabi_dmul+0x7a>
   34ab8:	4653      	mov	r3, sl
   34aba:	2003      	movs	r0, #3
   34abc:	e76b      	b.n	34996 <__aeabi_dmul+0x7a>
   34abe:	2300      	movs	r3, #0
   34ac0:	469b      	mov	fp, r3
   34ac2:	3301      	adds	r3, #1
   34ac4:	2704      	movs	r7, #4
   34ac6:	2600      	movs	r6, #0
   34ac8:	9302      	str	r3, [sp, #8]
   34aca:	e74c      	b.n	34966 <__aeabi_dmul+0x4a>
   34acc:	2303      	movs	r3, #3
   34ace:	4681      	mov	r9, r0
   34ad0:	270c      	movs	r7, #12
   34ad2:	9302      	str	r3, [sp, #8]
   34ad4:	e747      	b.n	34966 <__aeabi_dmul+0x4a>
   34ad6:	2280      	movs	r2, #128	; 0x80
   34ad8:	2300      	movs	r3, #0
   34ada:	2500      	movs	r5, #0
   34adc:	0312      	lsls	r2, r2, #12
   34ade:	4699      	mov	r9, r3
   34ae0:	4c05      	ldr	r4, [pc, #20]	; (34af8 <__aeabi_dmul+0x1dc>)
   34ae2:	e782      	b.n	349ea <__aeabi_dmul+0xce>
   34ae4:	465c      	mov	r4, fp
   34ae6:	464b      	mov	r3, r9
   34ae8:	9802      	ldr	r0, [sp, #8]
   34aea:	e76f      	b.n	349cc <__aeabi_dmul+0xb0>
   34aec:	465c      	mov	r4, fp
   34aee:	464b      	mov	r3, r9
   34af0:	9501      	str	r5, [sp, #4]
   34af2:	9802      	ldr	r0, [sp, #8]
   34af4:	e76a      	b.n	349cc <__aeabi_dmul+0xb0>
   34af6:	46c0      	nop			; (mov r8, r8)
   34af8:	000007ff 	.word	0x000007ff
   34afc:	fffffc01 	.word	0xfffffc01
   34b00:	0003b0e4 	.word	0x0003b0e4
   34b04:	800fffff 	.word	0x800fffff
   34b08:	fffffc0d 	.word	0xfffffc0d
   34b0c:	464a      	mov	r2, r9
   34b0e:	4649      	mov	r1, r9
   34b10:	0c17      	lsrs	r7, r2, #16
   34b12:	0c1a      	lsrs	r2, r3, #16
   34b14:	041b      	lsls	r3, r3, #16
   34b16:	0c1b      	lsrs	r3, r3, #16
   34b18:	0408      	lsls	r0, r1, #16
   34b1a:	0019      	movs	r1, r3
   34b1c:	0c00      	lsrs	r0, r0, #16
   34b1e:	4341      	muls	r1, r0
   34b20:	0015      	movs	r5, r2
   34b22:	4688      	mov	r8, r1
   34b24:	0019      	movs	r1, r3
   34b26:	437d      	muls	r5, r7
   34b28:	4379      	muls	r1, r7
   34b2a:	9503      	str	r5, [sp, #12]
   34b2c:	4689      	mov	r9, r1
   34b2e:	0029      	movs	r1, r5
   34b30:	0015      	movs	r5, r2
   34b32:	4345      	muls	r5, r0
   34b34:	444d      	add	r5, r9
   34b36:	9502      	str	r5, [sp, #8]
   34b38:	4645      	mov	r5, r8
   34b3a:	0c2d      	lsrs	r5, r5, #16
   34b3c:	46aa      	mov	sl, r5
   34b3e:	9d02      	ldr	r5, [sp, #8]
   34b40:	4455      	add	r5, sl
   34b42:	45a9      	cmp	r9, r5
   34b44:	d906      	bls.n	34b54 <__aeabi_dmul+0x238>
   34b46:	468a      	mov	sl, r1
   34b48:	2180      	movs	r1, #128	; 0x80
   34b4a:	0249      	lsls	r1, r1, #9
   34b4c:	4689      	mov	r9, r1
   34b4e:	44ca      	add	sl, r9
   34b50:	4651      	mov	r1, sl
   34b52:	9103      	str	r1, [sp, #12]
   34b54:	0c29      	lsrs	r1, r5, #16
   34b56:	9104      	str	r1, [sp, #16]
   34b58:	4641      	mov	r1, r8
   34b5a:	0409      	lsls	r1, r1, #16
   34b5c:	042d      	lsls	r5, r5, #16
   34b5e:	0c09      	lsrs	r1, r1, #16
   34b60:	4688      	mov	r8, r1
   34b62:	0029      	movs	r1, r5
   34b64:	0c25      	lsrs	r5, r4, #16
   34b66:	0424      	lsls	r4, r4, #16
   34b68:	4441      	add	r1, r8
   34b6a:	0c24      	lsrs	r4, r4, #16
   34b6c:	9105      	str	r1, [sp, #20]
   34b6e:	0021      	movs	r1, r4
   34b70:	4341      	muls	r1, r0
   34b72:	4688      	mov	r8, r1
   34b74:	0021      	movs	r1, r4
   34b76:	4379      	muls	r1, r7
   34b78:	468a      	mov	sl, r1
   34b7a:	4368      	muls	r0, r5
   34b7c:	4641      	mov	r1, r8
   34b7e:	4450      	add	r0, sl
   34b80:	4681      	mov	r9, r0
   34b82:	0c08      	lsrs	r0, r1, #16
   34b84:	4448      	add	r0, r9
   34b86:	436f      	muls	r7, r5
   34b88:	4582      	cmp	sl, r0
   34b8a:	d903      	bls.n	34b94 <__aeabi_dmul+0x278>
   34b8c:	2180      	movs	r1, #128	; 0x80
   34b8e:	0249      	lsls	r1, r1, #9
   34b90:	4689      	mov	r9, r1
   34b92:	444f      	add	r7, r9
   34b94:	0c01      	lsrs	r1, r0, #16
   34b96:	4689      	mov	r9, r1
   34b98:	0039      	movs	r1, r7
   34b9a:	4449      	add	r1, r9
   34b9c:	9102      	str	r1, [sp, #8]
   34b9e:	4641      	mov	r1, r8
   34ba0:	040f      	lsls	r7, r1, #16
   34ba2:	9904      	ldr	r1, [sp, #16]
   34ba4:	0c3f      	lsrs	r7, r7, #16
   34ba6:	4688      	mov	r8, r1
   34ba8:	0400      	lsls	r0, r0, #16
   34baa:	19c0      	adds	r0, r0, r7
   34bac:	4480      	add	r8, r0
   34bae:	4641      	mov	r1, r8
   34bb0:	9104      	str	r1, [sp, #16]
   34bb2:	4659      	mov	r1, fp
   34bb4:	0c0f      	lsrs	r7, r1, #16
   34bb6:	0409      	lsls	r1, r1, #16
   34bb8:	0c09      	lsrs	r1, r1, #16
   34bba:	4688      	mov	r8, r1
   34bbc:	4359      	muls	r1, r3
   34bbe:	468a      	mov	sl, r1
   34bc0:	0039      	movs	r1, r7
   34bc2:	4351      	muls	r1, r2
   34bc4:	4689      	mov	r9, r1
   34bc6:	4641      	mov	r1, r8
   34bc8:	434a      	muls	r2, r1
   34bca:	4651      	mov	r1, sl
   34bcc:	0c09      	lsrs	r1, r1, #16
   34bce:	468b      	mov	fp, r1
   34bd0:	437b      	muls	r3, r7
   34bd2:	18d2      	adds	r2, r2, r3
   34bd4:	445a      	add	r2, fp
   34bd6:	4293      	cmp	r3, r2
   34bd8:	d903      	bls.n	34be2 <__aeabi_dmul+0x2c6>
   34bda:	2380      	movs	r3, #128	; 0x80
   34bdc:	025b      	lsls	r3, r3, #9
   34bde:	469b      	mov	fp, r3
   34be0:	44d9      	add	r9, fp
   34be2:	4651      	mov	r1, sl
   34be4:	0409      	lsls	r1, r1, #16
   34be6:	0c09      	lsrs	r1, r1, #16
   34be8:	468a      	mov	sl, r1
   34bea:	4641      	mov	r1, r8
   34bec:	4361      	muls	r1, r4
   34bee:	437c      	muls	r4, r7
   34bf0:	0c13      	lsrs	r3, r2, #16
   34bf2:	0412      	lsls	r2, r2, #16
   34bf4:	444b      	add	r3, r9
   34bf6:	4452      	add	r2, sl
   34bf8:	46a1      	mov	r9, r4
   34bfa:	468a      	mov	sl, r1
   34bfc:	003c      	movs	r4, r7
   34bfe:	4641      	mov	r1, r8
   34c00:	436c      	muls	r4, r5
   34c02:	434d      	muls	r5, r1
   34c04:	4651      	mov	r1, sl
   34c06:	444d      	add	r5, r9
   34c08:	0c0f      	lsrs	r7, r1, #16
   34c0a:	197d      	adds	r5, r7, r5
   34c0c:	45a9      	cmp	r9, r5
   34c0e:	d903      	bls.n	34c18 <__aeabi_dmul+0x2fc>
   34c10:	2180      	movs	r1, #128	; 0x80
   34c12:	0249      	lsls	r1, r1, #9
   34c14:	4688      	mov	r8, r1
   34c16:	4444      	add	r4, r8
   34c18:	9f04      	ldr	r7, [sp, #16]
   34c1a:	9903      	ldr	r1, [sp, #12]
   34c1c:	46b8      	mov	r8, r7
   34c1e:	4441      	add	r1, r8
   34c20:	468b      	mov	fp, r1
   34c22:	4583      	cmp	fp, r0
   34c24:	4180      	sbcs	r0, r0
   34c26:	4241      	negs	r1, r0
   34c28:	4688      	mov	r8, r1
   34c2a:	4651      	mov	r1, sl
   34c2c:	0408      	lsls	r0, r1, #16
   34c2e:	042f      	lsls	r7, r5, #16
   34c30:	0c00      	lsrs	r0, r0, #16
   34c32:	183f      	adds	r7, r7, r0
   34c34:	4658      	mov	r0, fp
   34c36:	9902      	ldr	r1, [sp, #8]
   34c38:	1810      	adds	r0, r2, r0
   34c3a:	4689      	mov	r9, r1
   34c3c:	4290      	cmp	r0, r2
   34c3e:	4192      	sbcs	r2, r2
   34c40:	444f      	add	r7, r9
   34c42:	46ba      	mov	sl, r7
   34c44:	4252      	negs	r2, r2
   34c46:	4699      	mov	r9, r3
   34c48:	4693      	mov	fp, r2
   34c4a:	44c2      	add	sl, r8
   34c4c:	44d1      	add	r9, sl
   34c4e:	44cb      	add	fp, r9
   34c50:	428f      	cmp	r7, r1
   34c52:	41bf      	sbcs	r7, r7
   34c54:	45c2      	cmp	sl, r8
   34c56:	4189      	sbcs	r1, r1
   34c58:	4599      	cmp	r9, r3
   34c5a:	419b      	sbcs	r3, r3
   34c5c:	4593      	cmp	fp, r2
   34c5e:	4192      	sbcs	r2, r2
   34c60:	427f      	negs	r7, r7
   34c62:	4249      	negs	r1, r1
   34c64:	0c2d      	lsrs	r5, r5, #16
   34c66:	4252      	negs	r2, r2
   34c68:	430f      	orrs	r7, r1
   34c6a:	425b      	negs	r3, r3
   34c6c:	4313      	orrs	r3, r2
   34c6e:	197f      	adds	r7, r7, r5
   34c70:	18ff      	adds	r7, r7, r3
   34c72:	465b      	mov	r3, fp
   34c74:	193c      	adds	r4, r7, r4
   34c76:	0ddb      	lsrs	r3, r3, #23
   34c78:	9a05      	ldr	r2, [sp, #20]
   34c7a:	0264      	lsls	r4, r4, #9
   34c7c:	431c      	orrs	r4, r3
   34c7e:	0243      	lsls	r3, r0, #9
   34c80:	4313      	orrs	r3, r2
   34c82:	1e5d      	subs	r5, r3, #1
   34c84:	41ab      	sbcs	r3, r5
   34c86:	465a      	mov	r2, fp
   34c88:	0dc0      	lsrs	r0, r0, #23
   34c8a:	4303      	orrs	r3, r0
   34c8c:	0252      	lsls	r2, r2, #9
   34c8e:	4313      	orrs	r3, r2
   34c90:	01e2      	lsls	r2, r4, #7
   34c92:	d556      	bpl.n	34d42 <__aeabi_dmul+0x426>
   34c94:	2001      	movs	r0, #1
   34c96:	085a      	lsrs	r2, r3, #1
   34c98:	4003      	ands	r3, r0
   34c9a:	4313      	orrs	r3, r2
   34c9c:	07e2      	lsls	r2, r4, #31
   34c9e:	4313      	orrs	r3, r2
   34ca0:	0864      	lsrs	r4, r4, #1
   34ca2:	485a      	ldr	r0, [pc, #360]	; (34e0c <__aeabi_dmul+0x4f0>)
   34ca4:	4460      	add	r0, ip
   34ca6:	2800      	cmp	r0, #0
   34ca8:	dd4d      	ble.n	34d46 <__aeabi_dmul+0x42a>
   34caa:	075a      	lsls	r2, r3, #29
   34cac:	d009      	beq.n	34cc2 <__aeabi_dmul+0x3a6>
   34cae:	220f      	movs	r2, #15
   34cb0:	401a      	ands	r2, r3
   34cb2:	2a04      	cmp	r2, #4
   34cb4:	d005      	beq.n	34cc2 <__aeabi_dmul+0x3a6>
   34cb6:	1d1a      	adds	r2, r3, #4
   34cb8:	429a      	cmp	r2, r3
   34cba:	419b      	sbcs	r3, r3
   34cbc:	425b      	negs	r3, r3
   34cbe:	18e4      	adds	r4, r4, r3
   34cc0:	0013      	movs	r3, r2
   34cc2:	01e2      	lsls	r2, r4, #7
   34cc4:	d504      	bpl.n	34cd0 <__aeabi_dmul+0x3b4>
   34cc6:	2080      	movs	r0, #128	; 0x80
   34cc8:	4a51      	ldr	r2, [pc, #324]	; (34e10 <__aeabi_dmul+0x4f4>)
   34cca:	00c0      	lsls	r0, r0, #3
   34ccc:	4014      	ands	r4, r2
   34cce:	4460      	add	r0, ip
   34cd0:	4a50      	ldr	r2, [pc, #320]	; (34e14 <__aeabi_dmul+0x4f8>)
   34cd2:	4290      	cmp	r0, r2
   34cd4:	dd00      	ble.n	34cd8 <__aeabi_dmul+0x3bc>
   34cd6:	e6e3      	b.n	34aa0 <__aeabi_dmul+0x184>
   34cd8:	2501      	movs	r5, #1
   34cda:	08db      	lsrs	r3, r3, #3
   34cdc:	0762      	lsls	r2, r4, #29
   34cde:	431a      	orrs	r2, r3
   34ce0:	0264      	lsls	r4, r4, #9
   34ce2:	9b01      	ldr	r3, [sp, #4]
   34ce4:	4691      	mov	r9, r2
   34ce6:	0b22      	lsrs	r2, r4, #12
   34ce8:	0544      	lsls	r4, r0, #21
   34cea:	0d64      	lsrs	r4, r4, #21
   34cec:	401d      	ands	r5, r3
   34cee:	e67c      	b.n	349ea <__aeabi_dmul+0xce>
   34cf0:	2280      	movs	r2, #128	; 0x80
   34cf2:	4659      	mov	r1, fp
   34cf4:	0312      	lsls	r2, r2, #12
   34cf6:	4211      	tst	r1, r2
   34cf8:	d008      	beq.n	34d0c <__aeabi_dmul+0x3f0>
   34cfa:	4214      	tst	r4, r2
   34cfc:	d106      	bne.n	34d0c <__aeabi_dmul+0x3f0>
   34cfe:	4322      	orrs	r2, r4
   34d00:	0312      	lsls	r2, r2, #12
   34d02:	0b12      	lsrs	r2, r2, #12
   34d04:	4645      	mov	r5, r8
   34d06:	4699      	mov	r9, r3
   34d08:	4c43      	ldr	r4, [pc, #268]	; (34e18 <__aeabi_dmul+0x4fc>)
   34d0a:	e66e      	b.n	349ea <__aeabi_dmul+0xce>
   34d0c:	465b      	mov	r3, fp
   34d0e:	431a      	orrs	r2, r3
   34d10:	0312      	lsls	r2, r2, #12
   34d12:	0b12      	lsrs	r2, r2, #12
   34d14:	4c40      	ldr	r4, [pc, #256]	; (34e18 <__aeabi_dmul+0x4fc>)
   34d16:	e668      	b.n	349ea <__aeabi_dmul+0xce>
   34d18:	0003      	movs	r3, r0
   34d1a:	4654      	mov	r4, sl
   34d1c:	3b28      	subs	r3, #40	; 0x28
   34d1e:	409c      	lsls	r4, r3
   34d20:	2300      	movs	r3, #0
   34d22:	e6b9      	b.n	34a98 <__aeabi_dmul+0x17c>
   34d24:	f000 fbfc 	bl	35520 <__clzsi2>
   34d28:	3020      	adds	r0, #32
   34d2a:	e6a6      	b.n	34a7a <__aeabi_dmul+0x15e>
   34d2c:	0003      	movs	r3, r0
   34d2e:	3b28      	subs	r3, #40	; 0x28
   34d30:	409f      	lsls	r7, r3
   34d32:	2300      	movs	r3, #0
   34d34:	46bb      	mov	fp, r7
   34d36:	4699      	mov	r9, r3
   34d38:	e68a      	b.n	34a50 <__aeabi_dmul+0x134>
   34d3a:	f000 fbf1 	bl	35520 <__clzsi2>
   34d3e:	3020      	adds	r0, #32
   34d40:	e674      	b.n	34a2c <__aeabi_dmul+0x110>
   34d42:	46b4      	mov	ip, r6
   34d44:	e7ad      	b.n	34ca2 <__aeabi_dmul+0x386>
   34d46:	2501      	movs	r5, #1
   34d48:	1a2a      	subs	r2, r5, r0
   34d4a:	2a38      	cmp	r2, #56	; 0x38
   34d4c:	dd06      	ble.n	34d5c <__aeabi_dmul+0x440>
   34d4e:	9b01      	ldr	r3, [sp, #4]
   34d50:	2400      	movs	r4, #0
   34d52:	401d      	ands	r5, r3
   34d54:	2300      	movs	r3, #0
   34d56:	2200      	movs	r2, #0
   34d58:	4699      	mov	r9, r3
   34d5a:	e646      	b.n	349ea <__aeabi_dmul+0xce>
   34d5c:	2a1f      	cmp	r2, #31
   34d5e:	dc21      	bgt.n	34da4 <__aeabi_dmul+0x488>
   34d60:	2520      	movs	r5, #32
   34d62:	0020      	movs	r0, r4
   34d64:	1aad      	subs	r5, r5, r2
   34d66:	001e      	movs	r6, r3
   34d68:	40ab      	lsls	r3, r5
   34d6a:	40a8      	lsls	r0, r5
   34d6c:	40d6      	lsrs	r6, r2
   34d6e:	1e5d      	subs	r5, r3, #1
   34d70:	41ab      	sbcs	r3, r5
   34d72:	4330      	orrs	r0, r6
   34d74:	4318      	orrs	r0, r3
   34d76:	40d4      	lsrs	r4, r2
   34d78:	0743      	lsls	r3, r0, #29
   34d7a:	d009      	beq.n	34d90 <__aeabi_dmul+0x474>
   34d7c:	230f      	movs	r3, #15
   34d7e:	4003      	ands	r3, r0
   34d80:	2b04      	cmp	r3, #4
   34d82:	d005      	beq.n	34d90 <__aeabi_dmul+0x474>
   34d84:	0003      	movs	r3, r0
   34d86:	1d18      	adds	r0, r3, #4
   34d88:	4298      	cmp	r0, r3
   34d8a:	419b      	sbcs	r3, r3
   34d8c:	425b      	negs	r3, r3
   34d8e:	18e4      	adds	r4, r4, r3
   34d90:	0223      	lsls	r3, r4, #8
   34d92:	d521      	bpl.n	34dd8 <__aeabi_dmul+0x4bc>
   34d94:	2501      	movs	r5, #1
   34d96:	9b01      	ldr	r3, [sp, #4]
   34d98:	2401      	movs	r4, #1
   34d9a:	401d      	ands	r5, r3
   34d9c:	2300      	movs	r3, #0
   34d9e:	2200      	movs	r2, #0
   34da0:	4699      	mov	r9, r3
   34da2:	e622      	b.n	349ea <__aeabi_dmul+0xce>
   34da4:	251f      	movs	r5, #31
   34da6:	0021      	movs	r1, r4
   34da8:	426d      	negs	r5, r5
   34daa:	1a28      	subs	r0, r5, r0
   34dac:	40c1      	lsrs	r1, r0
   34dae:	0008      	movs	r0, r1
   34db0:	2a20      	cmp	r2, #32
   34db2:	d01d      	beq.n	34df0 <__aeabi_dmul+0x4d4>
   34db4:	355f      	adds	r5, #95	; 0x5f
   34db6:	1aaa      	subs	r2, r5, r2
   34db8:	4094      	lsls	r4, r2
   34dba:	4323      	orrs	r3, r4
   34dbc:	1e5c      	subs	r4, r3, #1
   34dbe:	41a3      	sbcs	r3, r4
   34dc0:	2507      	movs	r5, #7
   34dc2:	4303      	orrs	r3, r0
   34dc4:	401d      	ands	r5, r3
   34dc6:	2200      	movs	r2, #0
   34dc8:	2d00      	cmp	r5, #0
   34dca:	d009      	beq.n	34de0 <__aeabi_dmul+0x4c4>
   34dcc:	220f      	movs	r2, #15
   34dce:	2400      	movs	r4, #0
   34dd0:	401a      	ands	r2, r3
   34dd2:	0018      	movs	r0, r3
   34dd4:	2a04      	cmp	r2, #4
   34dd6:	d1d6      	bne.n	34d86 <__aeabi_dmul+0x46a>
   34dd8:	0003      	movs	r3, r0
   34dda:	0765      	lsls	r5, r4, #29
   34ddc:	0264      	lsls	r4, r4, #9
   34dde:	0b22      	lsrs	r2, r4, #12
   34de0:	08db      	lsrs	r3, r3, #3
   34de2:	432b      	orrs	r3, r5
   34de4:	2501      	movs	r5, #1
   34de6:	4699      	mov	r9, r3
   34de8:	9b01      	ldr	r3, [sp, #4]
   34dea:	2400      	movs	r4, #0
   34dec:	401d      	ands	r5, r3
   34dee:	e5fc      	b.n	349ea <__aeabi_dmul+0xce>
   34df0:	2400      	movs	r4, #0
   34df2:	e7e2      	b.n	34dba <__aeabi_dmul+0x49e>
   34df4:	2280      	movs	r2, #128	; 0x80
   34df6:	2501      	movs	r5, #1
   34df8:	0312      	lsls	r2, r2, #12
   34dfa:	4322      	orrs	r2, r4
   34dfc:	9901      	ldr	r1, [sp, #4]
   34dfe:	0312      	lsls	r2, r2, #12
   34e00:	0b12      	lsrs	r2, r2, #12
   34e02:	400d      	ands	r5, r1
   34e04:	4699      	mov	r9, r3
   34e06:	4c04      	ldr	r4, [pc, #16]	; (34e18 <__aeabi_dmul+0x4fc>)
   34e08:	e5ef      	b.n	349ea <__aeabi_dmul+0xce>
   34e0a:	46c0      	nop			; (mov r8, r8)
   34e0c:	000003ff 	.word	0x000003ff
   34e10:	feffffff 	.word	0xfeffffff
   34e14:	000007fe 	.word	0x000007fe
   34e18:	000007ff 	.word	0x000007ff

00034e1c <__aeabi_dsub>:
   34e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   34e1e:	4646      	mov	r6, r8
   34e20:	46d6      	mov	lr, sl
   34e22:	464f      	mov	r7, r9
   34e24:	030c      	lsls	r4, r1, #12
   34e26:	b5c0      	push	{r6, r7, lr}
   34e28:	0fcd      	lsrs	r5, r1, #31
   34e2a:	004e      	lsls	r6, r1, #1
   34e2c:	0a61      	lsrs	r1, r4, #9
   34e2e:	0f44      	lsrs	r4, r0, #29
   34e30:	430c      	orrs	r4, r1
   34e32:	00c1      	lsls	r1, r0, #3
   34e34:	0058      	lsls	r0, r3, #1
   34e36:	0d40      	lsrs	r0, r0, #21
   34e38:	4684      	mov	ip, r0
   34e3a:	468a      	mov	sl, r1
   34e3c:	000f      	movs	r7, r1
   34e3e:	0319      	lsls	r1, r3, #12
   34e40:	0f50      	lsrs	r0, r2, #29
   34e42:	0a49      	lsrs	r1, r1, #9
   34e44:	4301      	orrs	r1, r0
   34e46:	48c6      	ldr	r0, [pc, #792]	; (35160 <__aeabi_dsub+0x344>)
   34e48:	0d76      	lsrs	r6, r6, #21
   34e4a:	46a8      	mov	r8, r5
   34e4c:	0fdb      	lsrs	r3, r3, #31
   34e4e:	00d2      	lsls	r2, r2, #3
   34e50:	4584      	cmp	ip, r0
   34e52:	d100      	bne.n	34e56 <__aeabi_dsub+0x3a>
   34e54:	e0d8      	b.n	35008 <__aeabi_dsub+0x1ec>
   34e56:	2001      	movs	r0, #1
   34e58:	4043      	eors	r3, r0
   34e5a:	42ab      	cmp	r3, r5
   34e5c:	d100      	bne.n	34e60 <__aeabi_dsub+0x44>
   34e5e:	e0a6      	b.n	34fae <__aeabi_dsub+0x192>
   34e60:	4660      	mov	r0, ip
   34e62:	1a35      	subs	r5, r6, r0
   34e64:	2d00      	cmp	r5, #0
   34e66:	dc00      	bgt.n	34e6a <__aeabi_dsub+0x4e>
   34e68:	e105      	b.n	35076 <__aeabi_dsub+0x25a>
   34e6a:	2800      	cmp	r0, #0
   34e6c:	d110      	bne.n	34e90 <__aeabi_dsub+0x74>
   34e6e:	000b      	movs	r3, r1
   34e70:	4313      	orrs	r3, r2
   34e72:	d100      	bne.n	34e76 <__aeabi_dsub+0x5a>
   34e74:	e0d7      	b.n	35026 <__aeabi_dsub+0x20a>
   34e76:	1e6b      	subs	r3, r5, #1
   34e78:	2b00      	cmp	r3, #0
   34e7a:	d000      	beq.n	34e7e <__aeabi_dsub+0x62>
   34e7c:	e14b      	b.n	35116 <__aeabi_dsub+0x2fa>
   34e7e:	4653      	mov	r3, sl
   34e80:	1a9f      	subs	r7, r3, r2
   34e82:	45ba      	cmp	sl, r7
   34e84:	4180      	sbcs	r0, r0
   34e86:	1a64      	subs	r4, r4, r1
   34e88:	4240      	negs	r0, r0
   34e8a:	1a24      	subs	r4, r4, r0
   34e8c:	2601      	movs	r6, #1
   34e8e:	e01e      	b.n	34ece <__aeabi_dsub+0xb2>
   34e90:	4bb3      	ldr	r3, [pc, #716]	; (35160 <__aeabi_dsub+0x344>)
   34e92:	429e      	cmp	r6, r3
   34e94:	d048      	beq.n	34f28 <__aeabi_dsub+0x10c>
   34e96:	2380      	movs	r3, #128	; 0x80
   34e98:	041b      	lsls	r3, r3, #16
   34e9a:	4319      	orrs	r1, r3
   34e9c:	2d38      	cmp	r5, #56	; 0x38
   34e9e:	dd00      	ble.n	34ea2 <__aeabi_dsub+0x86>
   34ea0:	e119      	b.n	350d6 <__aeabi_dsub+0x2ba>
   34ea2:	2d1f      	cmp	r5, #31
   34ea4:	dd00      	ble.n	34ea8 <__aeabi_dsub+0x8c>
   34ea6:	e14c      	b.n	35142 <__aeabi_dsub+0x326>
   34ea8:	2320      	movs	r3, #32
   34eaa:	000f      	movs	r7, r1
   34eac:	1b5b      	subs	r3, r3, r5
   34eae:	0010      	movs	r0, r2
   34eb0:	409a      	lsls	r2, r3
   34eb2:	409f      	lsls	r7, r3
   34eb4:	40e8      	lsrs	r0, r5
   34eb6:	1e53      	subs	r3, r2, #1
   34eb8:	419a      	sbcs	r2, r3
   34eba:	40e9      	lsrs	r1, r5
   34ebc:	4307      	orrs	r7, r0
   34ebe:	4317      	orrs	r7, r2
   34ec0:	4653      	mov	r3, sl
   34ec2:	1bdf      	subs	r7, r3, r7
   34ec4:	1a61      	subs	r1, r4, r1
   34ec6:	45ba      	cmp	sl, r7
   34ec8:	41a4      	sbcs	r4, r4
   34eca:	4264      	negs	r4, r4
   34ecc:	1b0c      	subs	r4, r1, r4
   34ece:	0223      	lsls	r3, r4, #8
   34ed0:	d400      	bmi.n	34ed4 <__aeabi_dsub+0xb8>
   34ed2:	e0c5      	b.n	35060 <__aeabi_dsub+0x244>
   34ed4:	0264      	lsls	r4, r4, #9
   34ed6:	0a65      	lsrs	r5, r4, #9
   34ed8:	2d00      	cmp	r5, #0
   34eda:	d100      	bne.n	34ede <__aeabi_dsub+0xc2>
   34edc:	e0f6      	b.n	350cc <__aeabi_dsub+0x2b0>
   34ede:	0028      	movs	r0, r5
   34ee0:	f000 fb1e 	bl	35520 <__clzsi2>
   34ee4:	0003      	movs	r3, r0
   34ee6:	3b08      	subs	r3, #8
   34ee8:	2b1f      	cmp	r3, #31
   34eea:	dd00      	ble.n	34eee <__aeabi_dsub+0xd2>
   34eec:	e0e9      	b.n	350c2 <__aeabi_dsub+0x2a6>
   34eee:	2220      	movs	r2, #32
   34ef0:	003c      	movs	r4, r7
   34ef2:	1ad2      	subs	r2, r2, r3
   34ef4:	409d      	lsls	r5, r3
   34ef6:	40d4      	lsrs	r4, r2
   34ef8:	409f      	lsls	r7, r3
   34efa:	4325      	orrs	r5, r4
   34efc:	429e      	cmp	r6, r3
   34efe:	dd00      	ble.n	34f02 <__aeabi_dsub+0xe6>
   34f00:	e0db      	b.n	350ba <__aeabi_dsub+0x29e>
   34f02:	1b9e      	subs	r6, r3, r6
   34f04:	1c73      	adds	r3, r6, #1
   34f06:	2b1f      	cmp	r3, #31
   34f08:	dd00      	ble.n	34f0c <__aeabi_dsub+0xf0>
   34f0a:	e10a      	b.n	35122 <__aeabi_dsub+0x306>
   34f0c:	2220      	movs	r2, #32
   34f0e:	0038      	movs	r0, r7
   34f10:	1ad2      	subs	r2, r2, r3
   34f12:	0029      	movs	r1, r5
   34f14:	4097      	lsls	r7, r2
   34f16:	002c      	movs	r4, r5
   34f18:	4091      	lsls	r1, r2
   34f1a:	40d8      	lsrs	r0, r3
   34f1c:	1e7a      	subs	r2, r7, #1
   34f1e:	4197      	sbcs	r7, r2
   34f20:	40dc      	lsrs	r4, r3
   34f22:	2600      	movs	r6, #0
   34f24:	4301      	orrs	r1, r0
   34f26:	430f      	orrs	r7, r1
   34f28:	077b      	lsls	r3, r7, #29
   34f2a:	d009      	beq.n	34f40 <__aeabi_dsub+0x124>
   34f2c:	230f      	movs	r3, #15
   34f2e:	403b      	ands	r3, r7
   34f30:	2b04      	cmp	r3, #4
   34f32:	d005      	beq.n	34f40 <__aeabi_dsub+0x124>
   34f34:	1d3b      	adds	r3, r7, #4
   34f36:	42bb      	cmp	r3, r7
   34f38:	41bf      	sbcs	r7, r7
   34f3a:	427f      	negs	r7, r7
   34f3c:	19e4      	adds	r4, r4, r7
   34f3e:	001f      	movs	r7, r3
   34f40:	0223      	lsls	r3, r4, #8
   34f42:	d525      	bpl.n	34f90 <__aeabi_dsub+0x174>
   34f44:	4b86      	ldr	r3, [pc, #536]	; (35160 <__aeabi_dsub+0x344>)
   34f46:	3601      	adds	r6, #1
   34f48:	429e      	cmp	r6, r3
   34f4a:	d100      	bne.n	34f4e <__aeabi_dsub+0x132>
   34f4c:	e0af      	b.n	350ae <__aeabi_dsub+0x292>
   34f4e:	4b85      	ldr	r3, [pc, #532]	; (35164 <__aeabi_dsub+0x348>)
   34f50:	2501      	movs	r5, #1
   34f52:	401c      	ands	r4, r3
   34f54:	4643      	mov	r3, r8
   34f56:	0762      	lsls	r2, r4, #29
   34f58:	08ff      	lsrs	r7, r7, #3
   34f5a:	0264      	lsls	r4, r4, #9
   34f5c:	0576      	lsls	r6, r6, #21
   34f5e:	4317      	orrs	r7, r2
   34f60:	0b24      	lsrs	r4, r4, #12
   34f62:	0d76      	lsrs	r6, r6, #21
   34f64:	401d      	ands	r5, r3
   34f66:	2100      	movs	r1, #0
   34f68:	0324      	lsls	r4, r4, #12
   34f6a:	0b23      	lsrs	r3, r4, #12
   34f6c:	0d0c      	lsrs	r4, r1, #20
   34f6e:	4a7e      	ldr	r2, [pc, #504]	; (35168 <__aeabi_dsub+0x34c>)
   34f70:	0524      	lsls	r4, r4, #20
   34f72:	431c      	orrs	r4, r3
   34f74:	4014      	ands	r4, r2
   34f76:	0533      	lsls	r3, r6, #20
   34f78:	4323      	orrs	r3, r4
   34f7a:	005b      	lsls	r3, r3, #1
   34f7c:	07ed      	lsls	r5, r5, #31
   34f7e:	085b      	lsrs	r3, r3, #1
   34f80:	432b      	orrs	r3, r5
   34f82:	0038      	movs	r0, r7
   34f84:	0019      	movs	r1, r3
   34f86:	bc1c      	pop	{r2, r3, r4}
   34f88:	4690      	mov	r8, r2
   34f8a:	4699      	mov	r9, r3
   34f8c:	46a2      	mov	sl, r4
   34f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34f90:	2501      	movs	r5, #1
   34f92:	4643      	mov	r3, r8
   34f94:	0762      	lsls	r2, r4, #29
   34f96:	08ff      	lsrs	r7, r7, #3
   34f98:	4317      	orrs	r7, r2
   34f9a:	08e4      	lsrs	r4, r4, #3
   34f9c:	401d      	ands	r5, r3
   34f9e:	4b70      	ldr	r3, [pc, #448]	; (35160 <__aeabi_dsub+0x344>)
   34fa0:	429e      	cmp	r6, r3
   34fa2:	d036      	beq.n	35012 <__aeabi_dsub+0x1f6>
   34fa4:	0324      	lsls	r4, r4, #12
   34fa6:	0576      	lsls	r6, r6, #21
   34fa8:	0b24      	lsrs	r4, r4, #12
   34faa:	0d76      	lsrs	r6, r6, #21
   34fac:	e7db      	b.n	34f66 <__aeabi_dsub+0x14a>
   34fae:	4663      	mov	r3, ip
   34fb0:	1af3      	subs	r3, r6, r3
   34fb2:	2b00      	cmp	r3, #0
   34fb4:	dc00      	bgt.n	34fb8 <__aeabi_dsub+0x19c>
   34fb6:	e094      	b.n	350e2 <__aeabi_dsub+0x2c6>
   34fb8:	4660      	mov	r0, ip
   34fba:	2800      	cmp	r0, #0
   34fbc:	d035      	beq.n	3502a <__aeabi_dsub+0x20e>
   34fbe:	4868      	ldr	r0, [pc, #416]	; (35160 <__aeabi_dsub+0x344>)
   34fc0:	4286      	cmp	r6, r0
   34fc2:	d0b1      	beq.n	34f28 <__aeabi_dsub+0x10c>
   34fc4:	2780      	movs	r7, #128	; 0x80
   34fc6:	043f      	lsls	r7, r7, #16
   34fc8:	4339      	orrs	r1, r7
   34fca:	2b38      	cmp	r3, #56	; 0x38
   34fcc:	dc00      	bgt.n	34fd0 <__aeabi_dsub+0x1b4>
   34fce:	e0fd      	b.n	351cc <__aeabi_dsub+0x3b0>
   34fd0:	430a      	orrs	r2, r1
   34fd2:	0017      	movs	r7, r2
   34fd4:	2100      	movs	r1, #0
   34fd6:	1e7a      	subs	r2, r7, #1
   34fd8:	4197      	sbcs	r7, r2
   34fda:	4457      	add	r7, sl
   34fdc:	4557      	cmp	r7, sl
   34fde:	4180      	sbcs	r0, r0
   34fe0:	1909      	adds	r1, r1, r4
   34fe2:	4244      	negs	r4, r0
   34fe4:	190c      	adds	r4, r1, r4
   34fe6:	0223      	lsls	r3, r4, #8
   34fe8:	d53a      	bpl.n	35060 <__aeabi_dsub+0x244>
   34fea:	4b5d      	ldr	r3, [pc, #372]	; (35160 <__aeabi_dsub+0x344>)
   34fec:	3601      	adds	r6, #1
   34fee:	429e      	cmp	r6, r3
   34ff0:	d100      	bne.n	34ff4 <__aeabi_dsub+0x1d8>
   34ff2:	e14b      	b.n	3528c <__aeabi_dsub+0x470>
   34ff4:	2201      	movs	r2, #1
   34ff6:	4b5b      	ldr	r3, [pc, #364]	; (35164 <__aeabi_dsub+0x348>)
   34ff8:	401c      	ands	r4, r3
   34ffa:	087b      	lsrs	r3, r7, #1
   34ffc:	4017      	ands	r7, r2
   34ffe:	431f      	orrs	r7, r3
   35000:	07e2      	lsls	r2, r4, #31
   35002:	4317      	orrs	r7, r2
   35004:	0864      	lsrs	r4, r4, #1
   35006:	e78f      	b.n	34f28 <__aeabi_dsub+0x10c>
   35008:	0008      	movs	r0, r1
   3500a:	4310      	orrs	r0, r2
   3500c:	d000      	beq.n	35010 <__aeabi_dsub+0x1f4>
   3500e:	e724      	b.n	34e5a <__aeabi_dsub+0x3e>
   35010:	e721      	b.n	34e56 <__aeabi_dsub+0x3a>
   35012:	0023      	movs	r3, r4
   35014:	433b      	orrs	r3, r7
   35016:	d100      	bne.n	3501a <__aeabi_dsub+0x1fe>
   35018:	e1b9      	b.n	3538e <__aeabi_dsub+0x572>
   3501a:	2280      	movs	r2, #128	; 0x80
   3501c:	0312      	lsls	r2, r2, #12
   3501e:	4314      	orrs	r4, r2
   35020:	0324      	lsls	r4, r4, #12
   35022:	0b24      	lsrs	r4, r4, #12
   35024:	e79f      	b.n	34f66 <__aeabi_dsub+0x14a>
   35026:	002e      	movs	r6, r5
   35028:	e77e      	b.n	34f28 <__aeabi_dsub+0x10c>
   3502a:	0008      	movs	r0, r1
   3502c:	4310      	orrs	r0, r2
   3502e:	d100      	bne.n	35032 <__aeabi_dsub+0x216>
   35030:	e0ca      	b.n	351c8 <__aeabi_dsub+0x3ac>
   35032:	1e58      	subs	r0, r3, #1
   35034:	4684      	mov	ip, r0
   35036:	2800      	cmp	r0, #0
   35038:	d000      	beq.n	3503c <__aeabi_dsub+0x220>
   3503a:	e0e7      	b.n	3520c <__aeabi_dsub+0x3f0>
   3503c:	4452      	add	r2, sl
   3503e:	4552      	cmp	r2, sl
   35040:	4180      	sbcs	r0, r0
   35042:	1864      	adds	r4, r4, r1
   35044:	4240      	negs	r0, r0
   35046:	1824      	adds	r4, r4, r0
   35048:	0017      	movs	r7, r2
   3504a:	2601      	movs	r6, #1
   3504c:	0223      	lsls	r3, r4, #8
   3504e:	d507      	bpl.n	35060 <__aeabi_dsub+0x244>
   35050:	2602      	movs	r6, #2
   35052:	e7cf      	b.n	34ff4 <__aeabi_dsub+0x1d8>
   35054:	4664      	mov	r4, ip
   35056:	432c      	orrs	r4, r5
   35058:	d100      	bne.n	3505c <__aeabi_dsub+0x240>
   3505a:	e1b3      	b.n	353c4 <__aeabi_dsub+0x5a8>
   3505c:	002c      	movs	r4, r5
   3505e:	4667      	mov	r7, ip
   35060:	077b      	lsls	r3, r7, #29
   35062:	d000      	beq.n	35066 <__aeabi_dsub+0x24a>
   35064:	e762      	b.n	34f2c <__aeabi_dsub+0x110>
   35066:	0763      	lsls	r3, r4, #29
   35068:	08ff      	lsrs	r7, r7, #3
   3506a:	431f      	orrs	r7, r3
   3506c:	2501      	movs	r5, #1
   3506e:	4643      	mov	r3, r8
   35070:	08e4      	lsrs	r4, r4, #3
   35072:	401d      	ands	r5, r3
   35074:	e793      	b.n	34f9e <__aeabi_dsub+0x182>
   35076:	2d00      	cmp	r5, #0
   35078:	d178      	bne.n	3516c <__aeabi_dsub+0x350>
   3507a:	1c75      	adds	r5, r6, #1
   3507c:	056d      	lsls	r5, r5, #21
   3507e:	0d6d      	lsrs	r5, r5, #21
   35080:	2d01      	cmp	r5, #1
   35082:	dc00      	bgt.n	35086 <__aeabi_dsub+0x26a>
   35084:	e0f2      	b.n	3526c <__aeabi_dsub+0x450>
   35086:	4650      	mov	r0, sl
   35088:	1a80      	subs	r0, r0, r2
   3508a:	4582      	cmp	sl, r0
   3508c:	41bf      	sbcs	r7, r7
   3508e:	1a65      	subs	r5, r4, r1
   35090:	427f      	negs	r7, r7
   35092:	1bed      	subs	r5, r5, r7
   35094:	4684      	mov	ip, r0
   35096:	0228      	lsls	r0, r5, #8
   35098:	d400      	bmi.n	3509c <__aeabi_dsub+0x280>
   3509a:	e08c      	b.n	351b6 <__aeabi_dsub+0x39a>
   3509c:	4650      	mov	r0, sl
   3509e:	1a17      	subs	r7, r2, r0
   350a0:	42ba      	cmp	r2, r7
   350a2:	4192      	sbcs	r2, r2
   350a4:	1b0c      	subs	r4, r1, r4
   350a6:	4255      	negs	r5, r2
   350a8:	1b65      	subs	r5, r4, r5
   350aa:	4698      	mov	r8, r3
   350ac:	e714      	b.n	34ed8 <__aeabi_dsub+0xbc>
   350ae:	2501      	movs	r5, #1
   350b0:	4643      	mov	r3, r8
   350b2:	2400      	movs	r4, #0
   350b4:	401d      	ands	r5, r3
   350b6:	2700      	movs	r7, #0
   350b8:	e755      	b.n	34f66 <__aeabi_dsub+0x14a>
   350ba:	4c2a      	ldr	r4, [pc, #168]	; (35164 <__aeabi_dsub+0x348>)
   350bc:	1af6      	subs	r6, r6, r3
   350be:	402c      	ands	r4, r5
   350c0:	e732      	b.n	34f28 <__aeabi_dsub+0x10c>
   350c2:	003d      	movs	r5, r7
   350c4:	3828      	subs	r0, #40	; 0x28
   350c6:	4085      	lsls	r5, r0
   350c8:	2700      	movs	r7, #0
   350ca:	e717      	b.n	34efc <__aeabi_dsub+0xe0>
   350cc:	0038      	movs	r0, r7
   350ce:	f000 fa27 	bl	35520 <__clzsi2>
   350d2:	3020      	adds	r0, #32
   350d4:	e706      	b.n	34ee4 <__aeabi_dsub+0xc8>
   350d6:	430a      	orrs	r2, r1
   350d8:	0017      	movs	r7, r2
   350da:	2100      	movs	r1, #0
   350dc:	1e7a      	subs	r2, r7, #1
   350de:	4197      	sbcs	r7, r2
   350e0:	e6ee      	b.n	34ec0 <__aeabi_dsub+0xa4>
   350e2:	2b00      	cmp	r3, #0
   350e4:	d000      	beq.n	350e8 <__aeabi_dsub+0x2cc>
   350e6:	e0e5      	b.n	352b4 <__aeabi_dsub+0x498>
   350e8:	1c73      	adds	r3, r6, #1
   350ea:	469c      	mov	ip, r3
   350ec:	055b      	lsls	r3, r3, #21
   350ee:	0d5b      	lsrs	r3, r3, #21
   350f0:	2b01      	cmp	r3, #1
   350f2:	dc00      	bgt.n	350f6 <__aeabi_dsub+0x2da>
   350f4:	e09f      	b.n	35236 <__aeabi_dsub+0x41a>
   350f6:	4b1a      	ldr	r3, [pc, #104]	; (35160 <__aeabi_dsub+0x344>)
   350f8:	459c      	cmp	ip, r3
   350fa:	d100      	bne.n	350fe <__aeabi_dsub+0x2e2>
   350fc:	e0c5      	b.n	3528a <__aeabi_dsub+0x46e>
   350fe:	4452      	add	r2, sl
   35100:	4552      	cmp	r2, sl
   35102:	4180      	sbcs	r0, r0
   35104:	1864      	adds	r4, r4, r1
   35106:	4240      	negs	r0, r0
   35108:	1824      	adds	r4, r4, r0
   3510a:	07e7      	lsls	r7, r4, #31
   3510c:	0852      	lsrs	r2, r2, #1
   3510e:	4317      	orrs	r7, r2
   35110:	0864      	lsrs	r4, r4, #1
   35112:	4666      	mov	r6, ip
   35114:	e708      	b.n	34f28 <__aeabi_dsub+0x10c>
   35116:	4812      	ldr	r0, [pc, #72]	; (35160 <__aeabi_dsub+0x344>)
   35118:	4285      	cmp	r5, r0
   3511a:	d100      	bne.n	3511e <__aeabi_dsub+0x302>
   3511c:	e085      	b.n	3522a <__aeabi_dsub+0x40e>
   3511e:	001d      	movs	r5, r3
   35120:	e6bc      	b.n	34e9c <__aeabi_dsub+0x80>
   35122:	0029      	movs	r1, r5
   35124:	3e1f      	subs	r6, #31
   35126:	40f1      	lsrs	r1, r6
   35128:	2b20      	cmp	r3, #32
   3512a:	d100      	bne.n	3512e <__aeabi_dsub+0x312>
   3512c:	e07f      	b.n	3522e <__aeabi_dsub+0x412>
   3512e:	2240      	movs	r2, #64	; 0x40
   35130:	1ad3      	subs	r3, r2, r3
   35132:	409d      	lsls	r5, r3
   35134:	432f      	orrs	r7, r5
   35136:	1e7d      	subs	r5, r7, #1
   35138:	41af      	sbcs	r7, r5
   3513a:	2400      	movs	r4, #0
   3513c:	430f      	orrs	r7, r1
   3513e:	2600      	movs	r6, #0
   35140:	e78e      	b.n	35060 <__aeabi_dsub+0x244>
   35142:	002b      	movs	r3, r5
   35144:	000f      	movs	r7, r1
   35146:	3b20      	subs	r3, #32
   35148:	40df      	lsrs	r7, r3
   3514a:	2d20      	cmp	r5, #32
   3514c:	d071      	beq.n	35232 <__aeabi_dsub+0x416>
   3514e:	2340      	movs	r3, #64	; 0x40
   35150:	1b5d      	subs	r5, r3, r5
   35152:	40a9      	lsls	r1, r5
   35154:	430a      	orrs	r2, r1
   35156:	1e51      	subs	r1, r2, #1
   35158:	418a      	sbcs	r2, r1
   3515a:	2100      	movs	r1, #0
   3515c:	4317      	orrs	r7, r2
   3515e:	e6af      	b.n	34ec0 <__aeabi_dsub+0xa4>
   35160:	000007ff 	.word	0x000007ff
   35164:	ff7fffff 	.word	0xff7fffff
   35168:	800fffff 	.word	0x800fffff
   3516c:	2e00      	cmp	r6, #0
   3516e:	d03e      	beq.n	351ee <__aeabi_dsub+0x3d2>
   35170:	4eb3      	ldr	r6, [pc, #716]	; (35440 <__aeabi_dsub+0x624>)
   35172:	45b4      	cmp	ip, r6
   35174:	d045      	beq.n	35202 <__aeabi_dsub+0x3e6>
   35176:	2680      	movs	r6, #128	; 0x80
   35178:	0436      	lsls	r6, r6, #16
   3517a:	426d      	negs	r5, r5
   3517c:	4334      	orrs	r4, r6
   3517e:	2d38      	cmp	r5, #56	; 0x38
   35180:	dd00      	ble.n	35184 <__aeabi_dsub+0x368>
   35182:	e0a8      	b.n	352d6 <__aeabi_dsub+0x4ba>
   35184:	2d1f      	cmp	r5, #31
   35186:	dd00      	ble.n	3518a <__aeabi_dsub+0x36e>
   35188:	e11f      	b.n	353ca <__aeabi_dsub+0x5ae>
   3518a:	2620      	movs	r6, #32
   3518c:	0027      	movs	r7, r4
   3518e:	4650      	mov	r0, sl
   35190:	1b76      	subs	r6, r6, r5
   35192:	40b7      	lsls	r7, r6
   35194:	40e8      	lsrs	r0, r5
   35196:	4307      	orrs	r7, r0
   35198:	4650      	mov	r0, sl
   3519a:	40b0      	lsls	r0, r6
   3519c:	1e46      	subs	r6, r0, #1
   3519e:	41b0      	sbcs	r0, r6
   351a0:	40ec      	lsrs	r4, r5
   351a2:	4338      	orrs	r0, r7
   351a4:	1a17      	subs	r7, r2, r0
   351a6:	42ba      	cmp	r2, r7
   351a8:	4192      	sbcs	r2, r2
   351aa:	1b0c      	subs	r4, r1, r4
   351ac:	4252      	negs	r2, r2
   351ae:	1aa4      	subs	r4, r4, r2
   351b0:	4666      	mov	r6, ip
   351b2:	4698      	mov	r8, r3
   351b4:	e68b      	b.n	34ece <__aeabi_dsub+0xb2>
   351b6:	4664      	mov	r4, ip
   351b8:	4667      	mov	r7, ip
   351ba:	432c      	orrs	r4, r5
   351bc:	d000      	beq.n	351c0 <__aeabi_dsub+0x3a4>
   351be:	e68b      	b.n	34ed8 <__aeabi_dsub+0xbc>
   351c0:	2500      	movs	r5, #0
   351c2:	2600      	movs	r6, #0
   351c4:	2700      	movs	r7, #0
   351c6:	e6ea      	b.n	34f9e <__aeabi_dsub+0x182>
   351c8:	001e      	movs	r6, r3
   351ca:	e6ad      	b.n	34f28 <__aeabi_dsub+0x10c>
   351cc:	2b1f      	cmp	r3, #31
   351ce:	dc60      	bgt.n	35292 <__aeabi_dsub+0x476>
   351d0:	2720      	movs	r7, #32
   351d2:	1af8      	subs	r0, r7, r3
   351d4:	000f      	movs	r7, r1
   351d6:	4684      	mov	ip, r0
   351d8:	4087      	lsls	r7, r0
   351da:	0010      	movs	r0, r2
   351dc:	40d8      	lsrs	r0, r3
   351de:	4307      	orrs	r7, r0
   351e0:	4660      	mov	r0, ip
   351e2:	4082      	lsls	r2, r0
   351e4:	1e50      	subs	r0, r2, #1
   351e6:	4182      	sbcs	r2, r0
   351e8:	40d9      	lsrs	r1, r3
   351ea:	4317      	orrs	r7, r2
   351ec:	e6f5      	b.n	34fda <__aeabi_dsub+0x1be>
   351ee:	0026      	movs	r6, r4
   351f0:	4650      	mov	r0, sl
   351f2:	4306      	orrs	r6, r0
   351f4:	d005      	beq.n	35202 <__aeabi_dsub+0x3e6>
   351f6:	43ed      	mvns	r5, r5
   351f8:	2d00      	cmp	r5, #0
   351fa:	d0d3      	beq.n	351a4 <__aeabi_dsub+0x388>
   351fc:	4e90      	ldr	r6, [pc, #576]	; (35440 <__aeabi_dsub+0x624>)
   351fe:	45b4      	cmp	ip, r6
   35200:	d1bd      	bne.n	3517e <__aeabi_dsub+0x362>
   35202:	000c      	movs	r4, r1
   35204:	0017      	movs	r7, r2
   35206:	4666      	mov	r6, ip
   35208:	4698      	mov	r8, r3
   3520a:	e68d      	b.n	34f28 <__aeabi_dsub+0x10c>
   3520c:	488c      	ldr	r0, [pc, #560]	; (35440 <__aeabi_dsub+0x624>)
   3520e:	4283      	cmp	r3, r0
   35210:	d00b      	beq.n	3522a <__aeabi_dsub+0x40e>
   35212:	4663      	mov	r3, ip
   35214:	e6d9      	b.n	34fca <__aeabi_dsub+0x1ae>
   35216:	2d00      	cmp	r5, #0
   35218:	d000      	beq.n	3521c <__aeabi_dsub+0x400>
   3521a:	e096      	b.n	3534a <__aeabi_dsub+0x52e>
   3521c:	0008      	movs	r0, r1
   3521e:	4310      	orrs	r0, r2
   35220:	d100      	bne.n	35224 <__aeabi_dsub+0x408>
   35222:	e0e2      	b.n	353ea <__aeabi_dsub+0x5ce>
   35224:	000c      	movs	r4, r1
   35226:	0017      	movs	r7, r2
   35228:	4698      	mov	r8, r3
   3522a:	4e85      	ldr	r6, [pc, #532]	; (35440 <__aeabi_dsub+0x624>)
   3522c:	e67c      	b.n	34f28 <__aeabi_dsub+0x10c>
   3522e:	2500      	movs	r5, #0
   35230:	e780      	b.n	35134 <__aeabi_dsub+0x318>
   35232:	2100      	movs	r1, #0
   35234:	e78e      	b.n	35154 <__aeabi_dsub+0x338>
   35236:	0023      	movs	r3, r4
   35238:	4650      	mov	r0, sl
   3523a:	4303      	orrs	r3, r0
   3523c:	2e00      	cmp	r6, #0
   3523e:	d000      	beq.n	35242 <__aeabi_dsub+0x426>
   35240:	e0a8      	b.n	35394 <__aeabi_dsub+0x578>
   35242:	2b00      	cmp	r3, #0
   35244:	d100      	bne.n	35248 <__aeabi_dsub+0x42c>
   35246:	e0de      	b.n	35406 <__aeabi_dsub+0x5ea>
   35248:	000b      	movs	r3, r1
   3524a:	4313      	orrs	r3, r2
   3524c:	d100      	bne.n	35250 <__aeabi_dsub+0x434>
   3524e:	e66b      	b.n	34f28 <__aeabi_dsub+0x10c>
   35250:	4452      	add	r2, sl
   35252:	4552      	cmp	r2, sl
   35254:	4180      	sbcs	r0, r0
   35256:	1864      	adds	r4, r4, r1
   35258:	4240      	negs	r0, r0
   3525a:	1824      	adds	r4, r4, r0
   3525c:	0017      	movs	r7, r2
   3525e:	0223      	lsls	r3, r4, #8
   35260:	d400      	bmi.n	35264 <__aeabi_dsub+0x448>
   35262:	e6fd      	b.n	35060 <__aeabi_dsub+0x244>
   35264:	4b77      	ldr	r3, [pc, #476]	; (35444 <__aeabi_dsub+0x628>)
   35266:	4666      	mov	r6, ip
   35268:	401c      	ands	r4, r3
   3526a:	e65d      	b.n	34f28 <__aeabi_dsub+0x10c>
   3526c:	0025      	movs	r5, r4
   3526e:	4650      	mov	r0, sl
   35270:	4305      	orrs	r5, r0
   35272:	2e00      	cmp	r6, #0
   35274:	d1cf      	bne.n	35216 <__aeabi_dsub+0x3fa>
   35276:	2d00      	cmp	r5, #0
   35278:	d14f      	bne.n	3531a <__aeabi_dsub+0x4fe>
   3527a:	000c      	movs	r4, r1
   3527c:	4314      	orrs	r4, r2
   3527e:	d100      	bne.n	35282 <__aeabi_dsub+0x466>
   35280:	e0a0      	b.n	353c4 <__aeabi_dsub+0x5a8>
   35282:	000c      	movs	r4, r1
   35284:	0017      	movs	r7, r2
   35286:	4698      	mov	r8, r3
   35288:	e64e      	b.n	34f28 <__aeabi_dsub+0x10c>
   3528a:	4666      	mov	r6, ip
   3528c:	2400      	movs	r4, #0
   3528e:	2700      	movs	r7, #0
   35290:	e685      	b.n	34f9e <__aeabi_dsub+0x182>
   35292:	001f      	movs	r7, r3
   35294:	0008      	movs	r0, r1
   35296:	3f20      	subs	r7, #32
   35298:	40f8      	lsrs	r0, r7
   3529a:	0007      	movs	r7, r0
   3529c:	2b20      	cmp	r3, #32
   3529e:	d100      	bne.n	352a2 <__aeabi_dsub+0x486>
   352a0:	e08e      	b.n	353c0 <__aeabi_dsub+0x5a4>
   352a2:	2040      	movs	r0, #64	; 0x40
   352a4:	1ac3      	subs	r3, r0, r3
   352a6:	4099      	lsls	r1, r3
   352a8:	430a      	orrs	r2, r1
   352aa:	1e51      	subs	r1, r2, #1
   352ac:	418a      	sbcs	r2, r1
   352ae:	2100      	movs	r1, #0
   352b0:	4317      	orrs	r7, r2
   352b2:	e692      	b.n	34fda <__aeabi_dsub+0x1be>
   352b4:	2e00      	cmp	r6, #0
   352b6:	d114      	bne.n	352e2 <__aeabi_dsub+0x4c6>
   352b8:	0026      	movs	r6, r4
   352ba:	4650      	mov	r0, sl
   352bc:	4306      	orrs	r6, r0
   352be:	d062      	beq.n	35386 <__aeabi_dsub+0x56a>
   352c0:	43db      	mvns	r3, r3
   352c2:	2b00      	cmp	r3, #0
   352c4:	d15c      	bne.n	35380 <__aeabi_dsub+0x564>
   352c6:	1887      	adds	r7, r0, r2
   352c8:	4297      	cmp	r7, r2
   352ca:	4192      	sbcs	r2, r2
   352cc:	1864      	adds	r4, r4, r1
   352ce:	4252      	negs	r2, r2
   352d0:	18a4      	adds	r4, r4, r2
   352d2:	4666      	mov	r6, ip
   352d4:	e687      	b.n	34fe6 <__aeabi_dsub+0x1ca>
   352d6:	4650      	mov	r0, sl
   352d8:	4320      	orrs	r0, r4
   352da:	1e44      	subs	r4, r0, #1
   352dc:	41a0      	sbcs	r0, r4
   352de:	2400      	movs	r4, #0
   352e0:	e760      	b.n	351a4 <__aeabi_dsub+0x388>
   352e2:	4e57      	ldr	r6, [pc, #348]	; (35440 <__aeabi_dsub+0x624>)
   352e4:	45b4      	cmp	ip, r6
   352e6:	d04e      	beq.n	35386 <__aeabi_dsub+0x56a>
   352e8:	2680      	movs	r6, #128	; 0x80
   352ea:	0436      	lsls	r6, r6, #16
   352ec:	425b      	negs	r3, r3
   352ee:	4334      	orrs	r4, r6
   352f0:	2b38      	cmp	r3, #56	; 0x38
   352f2:	dd00      	ble.n	352f6 <__aeabi_dsub+0x4da>
   352f4:	e07f      	b.n	353f6 <__aeabi_dsub+0x5da>
   352f6:	2b1f      	cmp	r3, #31
   352f8:	dd00      	ble.n	352fc <__aeabi_dsub+0x4e0>
   352fa:	e08b      	b.n	35414 <__aeabi_dsub+0x5f8>
   352fc:	2620      	movs	r6, #32
   352fe:	0027      	movs	r7, r4
   35300:	4650      	mov	r0, sl
   35302:	1af6      	subs	r6, r6, r3
   35304:	40b7      	lsls	r7, r6
   35306:	40d8      	lsrs	r0, r3
   35308:	4307      	orrs	r7, r0
   3530a:	4650      	mov	r0, sl
   3530c:	40b0      	lsls	r0, r6
   3530e:	1e46      	subs	r6, r0, #1
   35310:	41b0      	sbcs	r0, r6
   35312:	4307      	orrs	r7, r0
   35314:	40dc      	lsrs	r4, r3
   35316:	18bf      	adds	r7, r7, r2
   35318:	e7d6      	b.n	352c8 <__aeabi_dsub+0x4ac>
   3531a:	000d      	movs	r5, r1
   3531c:	4315      	orrs	r5, r2
   3531e:	d100      	bne.n	35322 <__aeabi_dsub+0x506>
   35320:	e602      	b.n	34f28 <__aeabi_dsub+0x10c>
   35322:	4650      	mov	r0, sl
   35324:	1a80      	subs	r0, r0, r2
   35326:	4582      	cmp	sl, r0
   35328:	41bf      	sbcs	r7, r7
   3532a:	1a65      	subs	r5, r4, r1
   3532c:	427f      	negs	r7, r7
   3532e:	1bed      	subs	r5, r5, r7
   35330:	4684      	mov	ip, r0
   35332:	0228      	lsls	r0, r5, #8
   35334:	d400      	bmi.n	35338 <__aeabi_dsub+0x51c>
   35336:	e68d      	b.n	35054 <__aeabi_dsub+0x238>
   35338:	4650      	mov	r0, sl
   3533a:	1a17      	subs	r7, r2, r0
   3533c:	42ba      	cmp	r2, r7
   3533e:	4192      	sbcs	r2, r2
   35340:	1b0c      	subs	r4, r1, r4
   35342:	4252      	negs	r2, r2
   35344:	1aa4      	subs	r4, r4, r2
   35346:	4698      	mov	r8, r3
   35348:	e5ee      	b.n	34f28 <__aeabi_dsub+0x10c>
   3534a:	000d      	movs	r5, r1
   3534c:	4315      	orrs	r5, r2
   3534e:	d100      	bne.n	35352 <__aeabi_dsub+0x536>
   35350:	e76b      	b.n	3522a <__aeabi_dsub+0x40e>
   35352:	4650      	mov	r0, sl
   35354:	0767      	lsls	r7, r4, #29
   35356:	08c0      	lsrs	r0, r0, #3
   35358:	4307      	orrs	r7, r0
   3535a:	2080      	movs	r0, #128	; 0x80
   3535c:	08e4      	lsrs	r4, r4, #3
   3535e:	0300      	lsls	r0, r0, #12
   35360:	4204      	tst	r4, r0
   35362:	d007      	beq.n	35374 <__aeabi_dsub+0x558>
   35364:	08cd      	lsrs	r5, r1, #3
   35366:	4205      	tst	r5, r0
   35368:	d104      	bne.n	35374 <__aeabi_dsub+0x558>
   3536a:	002c      	movs	r4, r5
   3536c:	4698      	mov	r8, r3
   3536e:	08d7      	lsrs	r7, r2, #3
   35370:	0749      	lsls	r1, r1, #29
   35372:	430f      	orrs	r7, r1
   35374:	0f7b      	lsrs	r3, r7, #29
   35376:	00e4      	lsls	r4, r4, #3
   35378:	431c      	orrs	r4, r3
   3537a:	00ff      	lsls	r7, r7, #3
   3537c:	4e30      	ldr	r6, [pc, #192]	; (35440 <__aeabi_dsub+0x624>)
   3537e:	e5d3      	b.n	34f28 <__aeabi_dsub+0x10c>
   35380:	4e2f      	ldr	r6, [pc, #188]	; (35440 <__aeabi_dsub+0x624>)
   35382:	45b4      	cmp	ip, r6
   35384:	d1b4      	bne.n	352f0 <__aeabi_dsub+0x4d4>
   35386:	000c      	movs	r4, r1
   35388:	0017      	movs	r7, r2
   3538a:	4666      	mov	r6, ip
   3538c:	e5cc      	b.n	34f28 <__aeabi_dsub+0x10c>
   3538e:	2700      	movs	r7, #0
   35390:	2400      	movs	r4, #0
   35392:	e5e8      	b.n	34f66 <__aeabi_dsub+0x14a>
   35394:	2b00      	cmp	r3, #0
   35396:	d039      	beq.n	3540c <__aeabi_dsub+0x5f0>
   35398:	000b      	movs	r3, r1
   3539a:	4313      	orrs	r3, r2
   3539c:	d100      	bne.n	353a0 <__aeabi_dsub+0x584>
   3539e:	e744      	b.n	3522a <__aeabi_dsub+0x40e>
   353a0:	08c0      	lsrs	r0, r0, #3
   353a2:	0767      	lsls	r7, r4, #29
   353a4:	4307      	orrs	r7, r0
   353a6:	2080      	movs	r0, #128	; 0x80
   353a8:	08e4      	lsrs	r4, r4, #3
   353aa:	0300      	lsls	r0, r0, #12
   353ac:	4204      	tst	r4, r0
   353ae:	d0e1      	beq.n	35374 <__aeabi_dsub+0x558>
   353b0:	08cb      	lsrs	r3, r1, #3
   353b2:	4203      	tst	r3, r0
   353b4:	d1de      	bne.n	35374 <__aeabi_dsub+0x558>
   353b6:	08d7      	lsrs	r7, r2, #3
   353b8:	0749      	lsls	r1, r1, #29
   353ba:	430f      	orrs	r7, r1
   353bc:	001c      	movs	r4, r3
   353be:	e7d9      	b.n	35374 <__aeabi_dsub+0x558>
   353c0:	2100      	movs	r1, #0
   353c2:	e771      	b.n	352a8 <__aeabi_dsub+0x48c>
   353c4:	2500      	movs	r5, #0
   353c6:	2700      	movs	r7, #0
   353c8:	e5e9      	b.n	34f9e <__aeabi_dsub+0x182>
   353ca:	002e      	movs	r6, r5
   353cc:	0027      	movs	r7, r4
   353ce:	3e20      	subs	r6, #32
   353d0:	40f7      	lsrs	r7, r6
   353d2:	2d20      	cmp	r5, #32
   353d4:	d02f      	beq.n	35436 <__aeabi_dsub+0x61a>
   353d6:	2640      	movs	r6, #64	; 0x40
   353d8:	1b75      	subs	r5, r6, r5
   353da:	40ac      	lsls	r4, r5
   353dc:	4650      	mov	r0, sl
   353de:	4320      	orrs	r0, r4
   353e0:	1e44      	subs	r4, r0, #1
   353e2:	41a0      	sbcs	r0, r4
   353e4:	2400      	movs	r4, #0
   353e6:	4338      	orrs	r0, r7
   353e8:	e6dc      	b.n	351a4 <__aeabi_dsub+0x388>
   353ea:	2480      	movs	r4, #128	; 0x80
   353ec:	2500      	movs	r5, #0
   353ee:	0324      	lsls	r4, r4, #12
   353f0:	4e13      	ldr	r6, [pc, #76]	; (35440 <__aeabi_dsub+0x624>)
   353f2:	2700      	movs	r7, #0
   353f4:	e5d3      	b.n	34f9e <__aeabi_dsub+0x182>
   353f6:	4650      	mov	r0, sl
   353f8:	4320      	orrs	r0, r4
   353fa:	0007      	movs	r7, r0
   353fc:	1e78      	subs	r0, r7, #1
   353fe:	4187      	sbcs	r7, r0
   35400:	2400      	movs	r4, #0
   35402:	18bf      	adds	r7, r7, r2
   35404:	e760      	b.n	352c8 <__aeabi_dsub+0x4ac>
   35406:	000c      	movs	r4, r1
   35408:	0017      	movs	r7, r2
   3540a:	e58d      	b.n	34f28 <__aeabi_dsub+0x10c>
   3540c:	000c      	movs	r4, r1
   3540e:	0017      	movs	r7, r2
   35410:	4e0b      	ldr	r6, [pc, #44]	; (35440 <__aeabi_dsub+0x624>)
   35412:	e589      	b.n	34f28 <__aeabi_dsub+0x10c>
   35414:	001e      	movs	r6, r3
   35416:	0027      	movs	r7, r4
   35418:	3e20      	subs	r6, #32
   3541a:	40f7      	lsrs	r7, r6
   3541c:	2b20      	cmp	r3, #32
   3541e:	d00c      	beq.n	3543a <__aeabi_dsub+0x61e>
   35420:	2640      	movs	r6, #64	; 0x40
   35422:	1af3      	subs	r3, r6, r3
   35424:	409c      	lsls	r4, r3
   35426:	4650      	mov	r0, sl
   35428:	4320      	orrs	r0, r4
   3542a:	1e44      	subs	r4, r0, #1
   3542c:	41a0      	sbcs	r0, r4
   3542e:	4307      	orrs	r7, r0
   35430:	2400      	movs	r4, #0
   35432:	18bf      	adds	r7, r7, r2
   35434:	e748      	b.n	352c8 <__aeabi_dsub+0x4ac>
   35436:	2400      	movs	r4, #0
   35438:	e7d0      	b.n	353dc <__aeabi_dsub+0x5c0>
   3543a:	2400      	movs	r4, #0
   3543c:	e7f3      	b.n	35426 <__aeabi_dsub+0x60a>
   3543e:	46c0      	nop			; (mov r8, r8)
   35440:	000007ff 	.word	0x000007ff
   35444:	ff7fffff 	.word	0xff7fffff

00035448 <__aeabi_d2iz>:
   35448:	b530      	push	{r4, r5, lr}
   3544a:	4d13      	ldr	r5, [pc, #76]	; (35498 <__aeabi_d2iz+0x50>)
   3544c:	030a      	lsls	r2, r1, #12
   3544e:	004b      	lsls	r3, r1, #1
   35450:	0b12      	lsrs	r2, r2, #12
   35452:	0d5b      	lsrs	r3, r3, #21
   35454:	0fc9      	lsrs	r1, r1, #31
   35456:	2400      	movs	r4, #0
   35458:	42ab      	cmp	r3, r5
   3545a:	dd10      	ble.n	3547e <__aeabi_d2iz+0x36>
   3545c:	4c0f      	ldr	r4, [pc, #60]	; (3549c <__aeabi_d2iz+0x54>)
   3545e:	42a3      	cmp	r3, r4
   35460:	dc0f      	bgt.n	35482 <__aeabi_d2iz+0x3a>
   35462:	2480      	movs	r4, #128	; 0x80
   35464:	4d0e      	ldr	r5, [pc, #56]	; (354a0 <__aeabi_d2iz+0x58>)
   35466:	0364      	lsls	r4, r4, #13
   35468:	4322      	orrs	r2, r4
   3546a:	1aed      	subs	r5, r5, r3
   3546c:	2d1f      	cmp	r5, #31
   3546e:	dd0b      	ble.n	35488 <__aeabi_d2iz+0x40>
   35470:	480c      	ldr	r0, [pc, #48]	; (354a4 <__aeabi_d2iz+0x5c>)
   35472:	1ac3      	subs	r3, r0, r3
   35474:	40da      	lsrs	r2, r3
   35476:	4254      	negs	r4, r2
   35478:	2900      	cmp	r1, #0
   3547a:	d100      	bne.n	3547e <__aeabi_d2iz+0x36>
   3547c:	0014      	movs	r4, r2
   3547e:	0020      	movs	r0, r4
   35480:	bd30      	pop	{r4, r5, pc}
   35482:	4b09      	ldr	r3, [pc, #36]	; (354a8 <__aeabi_d2iz+0x60>)
   35484:	18cc      	adds	r4, r1, r3
   35486:	e7fa      	b.n	3547e <__aeabi_d2iz+0x36>
   35488:	4c08      	ldr	r4, [pc, #32]	; (354ac <__aeabi_d2iz+0x64>)
   3548a:	40e8      	lsrs	r0, r5
   3548c:	46a4      	mov	ip, r4
   3548e:	4463      	add	r3, ip
   35490:	409a      	lsls	r2, r3
   35492:	4302      	orrs	r2, r0
   35494:	e7ef      	b.n	35476 <__aeabi_d2iz+0x2e>
   35496:	46c0      	nop			; (mov r8, r8)
   35498:	000003fe 	.word	0x000003fe
   3549c:	0000041d 	.word	0x0000041d
   354a0:	00000433 	.word	0x00000433
   354a4:	00000413 	.word	0x00000413
   354a8:	7fffffff 	.word	0x7fffffff
   354ac:	fffffbed 	.word	0xfffffbed

000354b0 <__aeabi_ui2d>:
   354b0:	b510      	push	{r4, lr}
   354b2:	1e04      	subs	r4, r0, #0
   354b4:	d028      	beq.n	35508 <__aeabi_ui2d+0x58>
   354b6:	f000 f833 	bl	35520 <__clzsi2>
   354ba:	4b15      	ldr	r3, [pc, #84]	; (35510 <__aeabi_ui2d+0x60>)
   354bc:	4a15      	ldr	r2, [pc, #84]	; (35514 <__aeabi_ui2d+0x64>)
   354be:	1a1b      	subs	r3, r3, r0
   354c0:	1ad2      	subs	r2, r2, r3
   354c2:	2a1f      	cmp	r2, #31
   354c4:	dd15      	ble.n	354f2 <__aeabi_ui2d+0x42>
   354c6:	4a14      	ldr	r2, [pc, #80]	; (35518 <__aeabi_ui2d+0x68>)
   354c8:	1ad2      	subs	r2, r2, r3
   354ca:	4094      	lsls	r4, r2
   354cc:	2200      	movs	r2, #0
   354ce:	0324      	lsls	r4, r4, #12
   354d0:	055b      	lsls	r3, r3, #21
   354d2:	0b24      	lsrs	r4, r4, #12
   354d4:	0d5b      	lsrs	r3, r3, #21
   354d6:	2100      	movs	r1, #0
   354d8:	0010      	movs	r0, r2
   354da:	0324      	lsls	r4, r4, #12
   354dc:	0d0a      	lsrs	r2, r1, #20
   354de:	0b24      	lsrs	r4, r4, #12
   354e0:	0512      	lsls	r2, r2, #20
   354e2:	4322      	orrs	r2, r4
   354e4:	4c0d      	ldr	r4, [pc, #52]	; (3551c <__aeabi_ui2d+0x6c>)
   354e6:	051b      	lsls	r3, r3, #20
   354e8:	4022      	ands	r2, r4
   354ea:	4313      	orrs	r3, r2
   354ec:	005b      	lsls	r3, r3, #1
   354ee:	0859      	lsrs	r1, r3, #1
   354f0:	bd10      	pop	{r4, pc}
   354f2:	0021      	movs	r1, r4
   354f4:	4091      	lsls	r1, r2
   354f6:	000a      	movs	r2, r1
   354f8:	210b      	movs	r1, #11
   354fa:	1a08      	subs	r0, r1, r0
   354fc:	40c4      	lsrs	r4, r0
   354fe:	055b      	lsls	r3, r3, #21
   35500:	0324      	lsls	r4, r4, #12
   35502:	0b24      	lsrs	r4, r4, #12
   35504:	0d5b      	lsrs	r3, r3, #21
   35506:	e7e6      	b.n	354d6 <__aeabi_ui2d+0x26>
   35508:	2300      	movs	r3, #0
   3550a:	2400      	movs	r4, #0
   3550c:	2200      	movs	r2, #0
   3550e:	e7e2      	b.n	354d6 <__aeabi_ui2d+0x26>
   35510:	0000041e 	.word	0x0000041e
   35514:	00000433 	.word	0x00000433
   35518:	00000413 	.word	0x00000413
   3551c:	800fffff 	.word	0x800fffff

00035520 <__clzsi2>:
   35520:	211c      	movs	r1, #28
   35522:	2301      	movs	r3, #1
   35524:	041b      	lsls	r3, r3, #16
   35526:	4298      	cmp	r0, r3
   35528:	d301      	bcc.n	3552e <__clzsi2+0xe>
   3552a:	0c00      	lsrs	r0, r0, #16
   3552c:	3910      	subs	r1, #16
   3552e:	0a1b      	lsrs	r3, r3, #8
   35530:	4298      	cmp	r0, r3
   35532:	d301      	bcc.n	35538 <__clzsi2+0x18>
   35534:	0a00      	lsrs	r0, r0, #8
   35536:	3908      	subs	r1, #8
   35538:	091b      	lsrs	r3, r3, #4
   3553a:	4298      	cmp	r0, r3
   3553c:	d301      	bcc.n	35542 <__clzsi2+0x22>
   3553e:	0900      	lsrs	r0, r0, #4
   35540:	3904      	subs	r1, #4
   35542:	a202      	add	r2, pc, #8	; (adr r2, 3554c <__clzsi2+0x2c>)
   35544:	5c10      	ldrb	r0, [r2, r0]
   35546:	1840      	adds	r0, r0, r1
   35548:	4770      	bx	lr
   3554a:	46c0      	nop			; (mov r8, r8)
   3554c:	02020304 	.word	0x02020304
   35550:	01010101 	.word	0x01010101
	...

0003555c <atoi>:
   3555c:	b510      	push	{r4, lr}
   3555e:	220a      	movs	r2, #10
   35560:	2100      	movs	r1, #0
   35562:	f000 fb0d 	bl	35b80 <strtol>
   35566:	bd10      	pop	{r4, pc}

00035568 <__libc_init_array>:
   35568:	b570      	push	{r4, r5, r6, lr}
   3556a:	2600      	movs	r6, #0
   3556c:	4d0c      	ldr	r5, [pc, #48]	; (355a0 <__libc_init_array+0x38>)
   3556e:	4c0d      	ldr	r4, [pc, #52]	; (355a4 <__libc_init_array+0x3c>)
   35570:	1b64      	subs	r4, r4, r5
   35572:	10a4      	asrs	r4, r4, #2
   35574:	42a6      	cmp	r6, r4
   35576:	d109      	bne.n	3558c <__libc_init_array+0x24>
   35578:	2600      	movs	r6, #0
   3557a:	f005 fea5 	bl	3b2c8 <_init>
   3557e:	4d0a      	ldr	r5, [pc, #40]	; (355a8 <__libc_init_array+0x40>)
   35580:	4c0a      	ldr	r4, [pc, #40]	; (355ac <__libc_init_array+0x44>)
   35582:	1b64      	subs	r4, r4, r5
   35584:	10a4      	asrs	r4, r4, #2
   35586:	42a6      	cmp	r6, r4
   35588:	d105      	bne.n	35596 <__libc_init_array+0x2e>
   3558a:	bd70      	pop	{r4, r5, r6, pc}
   3558c:	00b3      	lsls	r3, r6, #2
   3558e:	58eb      	ldr	r3, [r5, r3]
   35590:	4798      	blx	r3
   35592:	3601      	adds	r6, #1
   35594:	e7ee      	b.n	35574 <__libc_init_array+0xc>
   35596:	00b3      	lsls	r3, r6, #2
   35598:	58eb      	ldr	r3, [r5, r3]
   3559a:	4798      	blx	r3
   3559c:	3601      	adds	r6, #1
   3559e:	e7f2      	b.n	35586 <__libc_init_array+0x1e>
   355a0:	0003b2d4 	.word	0x0003b2d4
   355a4:	0003b2d4 	.word	0x0003b2d4
   355a8:	0003b2d4 	.word	0x0003b2d4
   355ac:	0003b2d8 	.word	0x0003b2d8

000355b0 <malloc>:
   355b0:	b510      	push	{r4, lr}
   355b2:	4b03      	ldr	r3, [pc, #12]	; (355c0 <malloc+0x10>)
   355b4:	0001      	movs	r1, r0
   355b6:	6818      	ldr	r0, [r3, #0]
   355b8:	f000 f87c 	bl	356b4 <_malloc_r>
   355bc:	bd10      	pop	{r4, pc}
   355be:	46c0      	nop			; (mov r8, r8)
   355c0:	20000130 	.word	0x20000130

000355c4 <free>:
   355c4:	b510      	push	{r4, lr}
   355c6:	4b03      	ldr	r3, [pc, #12]	; (355d4 <free+0x10>)
   355c8:	0001      	movs	r1, r0
   355ca:	6818      	ldr	r0, [r3, #0]
   355cc:	f000 f828 	bl	35620 <_free_r>
   355d0:	bd10      	pop	{r4, pc}
   355d2:	46c0      	nop			; (mov r8, r8)
   355d4:	20000130 	.word	0x20000130

000355d8 <memcpy>:
   355d8:	2300      	movs	r3, #0
   355da:	b510      	push	{r4, lr}
   355dc:	429a      	cmp	r2, r3
   355de:	d100      	bne.n	355e2 <memcpy+0xa>
   355e0:	bd10      	pop	{r4, pc}
   355e2:	5ccc      	ldrb	r4, [r1, r3]
   355e4:	54c4      	strb	r4, [r0, r3]
   355e6:	3301      	adds	r3, #1
   355e8:	e7f8      	b.n	355dc <memcpy+0x4>

000355ea <memmove>:
   355ea:	b510      	push	{r4, lr}
   355ec:	4288      	cmp	r0, r1
   355ee:	d902      	bls.n	355f6 <memmove+0xc>
   355f0:	188b      	adds	r3, r1, r2
   355f2:	4298      	cmp	r0, r3
   355f4:	d308      	bcc.n	35608 <memmove+0x1e>
   355f6:	2300      	movs	r3, #0
   355f8:	429a      	cmp	r2, r3
   355fa:	d007      	beq.n	3560c <memmove+0x22>
   355fc:	5ccc      	ldrb	r4, [r1, r3]
   355fe:	54c4      	strb	r4, [r0, r3]
   35600:	3301      	adds	r3, #1
   35602:	e7f9      	b.n	355f8 <memmove+0xe>
   35604:	5c8b      	ldrb	r3, [r1, r2]
   35606:	5483      	strb	r3, [r0, r2]
   35608:	3a01      	subs	r2, #1
   3560a:	d2fb      	bcs.n	35604 <memmove+0x1a>
   3560c:	bd10      	pop	{r4, pc}

0003560e <memset>:
   3560e:	0003      	movs	r3, r0
   35610:	1882      	adds	r2, r0, r2
   35612:	4293      	cmp	r3, r2
   35614:	d100      	bne.n	35618 <memset+0xa>
   35616:	4770      	bx	lr
   35618:	7019      	strb	r1, [r3, #0]
   3561a:	3301      	adds	r3, #1
   3561c:	e7f9      	b.n	35612 <memset+0x4>
	...

00035620 <_free_r>:
   35620:	b570      	push	{r4, r5, r6, lr}
   35622:	0005      	movs	r5, r0
   35624:	2900      	cmp	r1, #0
   35626:	d010      	beq.n	3564a <_free_r+0x2a>
   35628:	1f0c      	subs	r4, r1, #4
   3562a:	6823      	ldr	r3, [r4, #0]
   3562c:	2b00      	cmp	r3, #0
   3562e:	da00      	bge.n	35632 <_free_r+0x12>
   35630:	18e4      	adds	r4, r4, r3
   35632:	0028      	movs	r0, r5
   35634:	f000 fdd8 	bl	361e8 <__malloc_lock>
   35638:	4a1d      	ldr	r2, [pc, #116]	; (356b0 <_free_r+0x90>)
   3563a:	6813      	ldr	r3, [r2, #0]
   3563c:	2b00      	cmp	r3, #0
   3563e:	d105      	bne.n	3564c <_free_r+0x2c>
   35640:	6063      	str	r3, [r4, #4]
   35642:	6014      	str	r4, [r2, #0]
   35644:	0028      	movs	r0, r5
   35646:	f000 fdd0 	bl	361ea <__malloc_unlock>
   3564a:	bd70      	pop	{r4, r5, r6, pc}
   3564c:	42a3      	cmp	r3, r4
   3564e:	d909      	bls.n	35664 <_free_r+0x44>
   35650:	6821      	ldr	r1, [r4, #0]
   35652:	1860      	adds	r0, r4, r1
   35654:	4283      	cmp	r3, r0
   35656:	d1f3      	bne.n	35640 <_free_r+0x20>
   35658:	6818      	ldr	r0, [r3, #0]
   3565a:	685b      	ldr	r3, [r3, #4]
   3565c:	1841      	adds	r1, r0, r1
   3565e:	6021      	str	r1, [r4, #0]
   35660:	e7ee      	b.n	35640 <_free_r+0x20>
   35662:	0013      	movs	r3, r2
   35664:	685a      	ldr	r2, [r3, #4]
   35666:	2a00      	cmp	r2, #0
   35668:	d001      	beq.n	3566e <_free_r+0x4e>
   3566a:	42a2      	cmp	r2, r4
   3566c:	d9f9      	bls.n	35662 <_free_r+0x42>
   3566e:	6819      	ldr	r1, [r3, #0]
   35670:	1858      	adds	r0, r3, r1
   35672:	42a0      	cmp	r0, r4
   35674:	d10b      	bne.n	3568e <_free_r+0x6e>
   35676:	6820      	ldr	r0, [r4, #0]
   35678:	1809      	adds	r1, r1, r0
   3567a:	1858      	adds	r0, r3, r1
   3567c:	6019      	str	r1, [r3, #0]
   3567e:	4282      	cmp	r2, r0
   35680:	d1e0      	bne.n	35644 <_free_r+0x24>
   35682:	6810      	ldr	r0, [r2, #0]
   35684:	6852      	ldr	r2, [r2, #4]
   35686:	1841      	adds	r1, r0, r1
   35688:	6019      	str	r1, [r3, #0]
   3568a:	605a      	str	r2, [r3, #4]
   3568c:	e7da      	b.n	35644 <_free_r+0x24>
   3568e:	42a0      	cmp	r0, r4
   35690:	d902      	bls.n	35698 <_free_r+0x78>
   35692:	230c      	movs	r3, #12
   35694:	602b      	str	r3, [r5, #0]
   35696:	e7d5      	b.n	35644 <_free_r+0x24>
   35698:	6821      	ldr	r1, [r4, #0]
   3569a:	1860      	adds	r0, r4, r1
   3569c:	4282      	cmp	r2, r0
   3569e:	d103      	bne.n	356a8 <_free_r+0x88>
   356a0:	6810      	ldr	r0, [r2, #0]
   356a2:	6852      	ldr	r2, [r2, #4]
   356a4:	1841      	adds	r1, r0, r1
   356a6:	6021      	str	r1, [r4, #0]
   356a8:	6062      	str	r2, [r4, #4]
   356aa:	605c      	str	r4, [r3, #4]
   356ac:	e7ca      	b.n	35644 <_free_r+0x24>
   356ae:	46c0      	nop			; (mov r8, r8)
   356b0:	20004728 	.word	0x20004728

000356b4 <_malloc_r>:
   356b4:	2303      	movs	r3, #3
   356b6:	b570      	push	{r4, r5, r6, lr}
   356b8:	1ccd      	adds	r5, r1, #3
   356ba:	439d      	bics	r5, r3
   356bc:	3508      	adds	r5, #8
   356be:	0006      	movs	r6, r0
   356c0:	2d0c      	cmp	r5, #12
   356c2:	d21e      	bcs.n	35702 <_malloc_r+0x4e>
   356c4:	250c      	movs	r5, #12
   356c6:	42a9      	cmp	r1, r5
   356c8:	d81d      	bhi.n	35706 <_malloc_r+0x52>
   356ca:	0030      	movs	r0, r6
   356cc:	f000 fd8c 	bl	361e8 <__malloc_lock>
   356d0:	4a25      	ldr	r2, [pc, #148]	; (35768 <_malloc_r+0xb4>)
   356d2:	6814      	ldr	r4, [r2, #0]
   356d4:	0021      	movs	r1, r4
   356d6:	2900      	cmp	r1, #0
   356d8:	d119      	bne.n	3570e <_malloc_r+0x5a>
   356da:	4c24      	ldr	r4, [pc, #144]	; (3576c <_malloc_r+0xb8>)
   356dc:	6823      	ldr	r3, [r4, #0]
   356de:	2b00      	cmp	r3, #0
   356e0:	d103      	bne.n	356ea <_malloc_r+0x36>
   356e2:	0030      	movs	r0, r6
   356e4:	f000 f8ae 	bl	35844 <_sbrk_r>
   356e8:	6020      	str	r0, [r4, #0]
   356ea:	0029      	movs	r1, r5
   356ec:	0030      	movs	r0, r6
   356ee:	f000 f8a9 	bl	35844 <_sbrk_r>
   356f2:	1c43      	adds	r3, r0, #1
   356f4:	d12c      	bne.n	35750 <_malloc_r+0x9c>
   356f6:	230c      	movs	r3, #12
   356f8:	0030      	movs	r0, r6
   356fa:	6033      	str	r3, [r6, #0]
   356fc:	f000 fd75 	bl	361ea <__malloc_unlock>
   35700:	e003      	b.n	3570a <_malloc_r+0x56>
   35702:	2d00      	cmp	r5, #0
   35704:	dadf      	bge.n	356c6 <_malloc_r+0x12>
   35706:	230c      	movs	r3, #12
   35708:	6033      	str	r3, [r6, #0]
   3570a:	2000      	movs	r0, #0
   3570c:	bd70      	pop	{r4, r5, r6, pc}
   3570e:	680b      	ldr	r3, [r1, #0]
   35710:	1b5b      	subs	r3, r3, r5
   35712:	d41a      	bmi.n	3574a <_malloc_r+0x96>
   35714:	2b0b      	cmp	r3, #11
   35716:	d903      	bls.n	35720 <_malloc_r+0x6c>
   35718:	600b      	str	r3, [r1, #0]
   3571a:	18cc      	adds	r4, r1, r3
   3571c:	6025      	str	r5, [r4, #0]
   3571e:	e003      	b.n	35728 <_malloc_r+0x74>
   35720:	428c      	cmp	r4, r1
   35722:	d10e      	bne.n	35742 <_malloc_r+0x8e>
   35724:	6863      	ldr	r3, [r4, #4]
   35726:	6013      	str	r3, [r2, #0]
   35728:	0030      	movs	r0, r6
   3572a:	f000 fd5e 	bl	361ea <__malloc_unlock>
   3572e:	0020      	movs	r0, r4
   35730:	2207      	movs	r2, #7
   35732:	300b      	adds	r0, #11
   35734:	1d23      	adds	r3, r4, #4
   35736:	4390      	bics	r0, r2
   35738:	1ac3      	subs	r3, r0, r3
   3573a:	d0e7      	beq.n	3570c <_malloc_r+0x58>
   3573c:	425a      	negs	r2, r3
   3573e:	50e2      	str	r2, [r4, r3]
   35740:	e7e4      	b.n	3570c <_malloc_r+0x58>
   35742:	684b      	ldr	r3, [r1, #4]
   35744:	6063      	str	r3, [r4, #4]
   35746:	000c      	movs	r4, r1
   35748:	e7ee      	b.n	35728 <_malloc_r+0x74>
   3574a:	000c      	movs	r4, r1
   3574c:	6849      	ldr	r1, [r1, #4]
   3574e:	e7c2      	b.n	356d6 <_malloc_r+0x22>
   35750:	2303      	movs	r3, #3
   35752:	1cc4      	adds	r4, r0, #3
   35754:	439c      	bics	r4, r3
   35756:	42a0      	cmp	r0, r4
   35758:	d0e0      	beq.n	3571c <_malloc_r+0x68>
   3575a:	1a21      	subs	r1, r4, r0
   3575c:	0030      	movs	r0, r6
   3575e:	f000 f871 	bl	35844 <_sbrk_r>
   35762:	1c43      	adds	r3, r0, #1
   35764:	d1da      	bne.n	3571c <_malloc_r+0x68>
   35766:	e7c6      	b.n	356f6 <_malloc_r+0x42>
   35768:	20004728 	.word	0x20004728
   3576c:	2000472c 	.word	0x2000472c

00035770 <_puts_r>:
   35770:	b570      	push	{r4, r5, r6, lr}
   35772:	0005      	movs	r5, r0
   35774:	000e      	movs	r6, r1
   35776:	2800      	cmp	r0, #0
   35778:	d004      	beq.n	35784 <_puts_r+0x14>
   3577a:	6983      	ldr	r3, [r0, #24]
   3577c:	2b00      	cmp	r3, #0
   3577e:	d101      	bne.n	35784 <_puts_r+0x14>
   35780:	f000 fc0e 	bl	35fa0 <__sinit>
   35784:	69ab      	ldr	r3, [r5, #24]
   35786:	68ac      	ldr	r4, [r5, #8]
   35788:	2b00      	cmp	r3, #0
   3578a:	d102      	bne.n	35792 <_puts_r+0x22>
   3578c:	0028      	movs	r0, r5
   3578e:	f000 fc07 	bl	35fa0 <__sinit>
   35792:	4b24      	ldr	r3, [pc, #144]	; (35824 <_puts_r+0xb4>)
   35794:	429c      	cmp	r4, r3
   35796:	d10f      	bne.n	357b8 <_puts_r+0x48>
   35798:	686c      	ldr	r4, [r5, #4]
   3579a:	89a3      	ldrh	r3, [r4, #12]
   3579c:	071b      	lsls	r3, r3, #28
   3579e:	d502      	bpl.n	357a6 <_puts_r+0x36>
   357a0:	6923      	ldr	r3, [r4, #16]
   357a2:	2b00      	cmp	r3, #0
   357a4:	d120      	bne.n	357e8 <_puts_r+0x78>
   357a6:	0021      	movs	r1, r4
   357a8:	0028      	movs	r0, r5
   357aa:	f000 fa8b 	bl	35cc4 <__swsetup_r>
   357ae:	2800      	cmp	r0, #0
   357b0:	d01a      	beq.n	357e8 <_puts_r+0x78>
   357b2:	2001      	movs	r0, #1
   357b4:	4240      	negs	r0, r0
   357b6:	bd70      	pop	{r4, r5, r6, pc}
   357b8:	4b1b      	ldr	r3, [pc, #108]	; (35828 <_puts_r+0xb8>)
   357ba:	429c      	cmp	r4, r3
   357bc:	d101      	bne.n	357c2 <_puts_r+0x52>
   357be:	68ac      	ldr	r4, [r5, #8]
   357c0:	e7eb      	b.n	3579a <_puts_r+0x2a>
   357c2:	4b1a      	ldr	r3, [pc, #104]	; (3582c <_puts_r+0xbc>)
   357c4:	429c      	cmp	r4, r3
   357c6:	d1e8      	bne.n	3579a <_puts_r+0x2a>
   357c8:	68ec      	ldr	r4, [r5, #12]
   357ca:	e7e6      	b.n	3579a <_puts_r+0x2a>
   357cc:	3b01      	subs	r3, #1
   357ce:	3601      	adds	r6, #1
   357d0:	60a3      	str	r3, [r4, #8]
   357d2:	2b00      	cmp	r3, #0
   357d4:	da04      	bge.n	357e0 <_puts_r+0x70>
   357d6:	69a2      	ldr	r2, [r4, #24]
   357d8:	4293      	cmp	r3, r2
   357da:	db16      	blt.n	3580a <_puts_r+0x9a>
   357dc:	290a      	cmp	r1, #10
   357de:	d014      	beq.n	3580a <_puts_r+0x9a>
   357e0:	6823      	ldr	r3, [r4, #0]
   357e2:	1c5a      	adds	r2, r3, #1
   357e4:	6022      	str	r2, [r4, #0]
   357e6:	7019      	strb	r1, [r3, #0]
   357e8:	7831      	ldrb	r1, [r6, #0]
   357ea:	68a3      	ldr	r3, [r4, #8]
   357ec:	2900      	cmp	r1, #0
   357ee:	d1ed      	bne.n	357cc <_puts_r+0x5c>
   357f0:	3b01      	subs	r3, #1
   357f2:	60a3      	str	r3, [r4, #8]
   357f4:	2b00      	cmp	r3, #0
   357f6:	da0f      	bge.n	35818 <_puts_r+0xa8>
   357f8:	0022      	movs	r2, r4
   357fa:	310a      	adds	r1, #10
   357fc:	0028      	movs	r0, r5
   357fe:	f000 fa0b 	bl	35c18 <__swbuf_r>
   35802:	1c43      	adds	r3, r0, #1
   35804:	d0d5      	beq.n	357b2 <_puts_r+0x42>
   35806:	200a      	movs	r0, #10
   35808:	e7d5      	b.n	357b6 <_puts_r+0x46>
   3580a:	0022      	movs	r2, r4
   3580c:	0028      	movs	r0, r5
   3580e:	f000 fa03 	bl	35c18 <__swbuf_r>
   35812:	1c43      	adds	r3, r0, #1
   35814:	d1e8      	bne.n	357e8 <_puts_r+0x78>
   35816:	e7cc      	b.n	357b2 <_puts_r+0x42>
   35818:	200a      	movs	r0, #10
   3581a:	6823      	ldr	r3, [r4, #0]
   3581c:	1c5a      	adds	r2, r3, #1
   3581e:	6022      	str	r2, [r4, #0]
   35820:	7018      	strb	r0, [r3, #0]
   35822:	e7c8      	b.n	357b6 <_puts_r+0x46>
   35824:	0003b148 	.word	0x0003b148
   35828:	0003b168 	.word	0x0003b168
   3582c:	0003b128 	.word	0x0003b128

00035830 <puts>:
   35830:	b510      	push	{r4, lr}
   35832:	4b03      	ldr	r3, [pc, #12]	; (35840 <puts+0x10>)
   35834:	0001      	movs	r1, r0
   35836:	6818      	ldr	r0, [r3, #0]
   35838:	f7ff ff9a 	bl	35770 <_puts_r>
   3583c:	bd10      	pop	{r4, pc}
   3583e:	46c0      	nop			; (mov r8, r8)
   35840:	20000130 	.word	0x20000130

00035844 <_sbrk_r>:
   35844:	2300      	movs	r3, #0
   35846:	b570      	push	{r4, r5, r6, lr}
   35848:	4c06      	ldr	r4, [pc, #24]	; (35864 <_sbrk_r+0x20>)
   3584a:	0005      	movs	r5, r0
   3584c:	0008      	movs	r0, r1
   3584e:	6023      	str	r3, [r4, #0]
   35850:	f7f6 fa98 	bl	2bd84 <_sbrk>
   35854:	1c43      	adds	r3, r0, #1
   35856:	d103      	bne.n	35860 <_sbrk_r+0x1c>
   35858:	6823      	ldr	r3, [r4, #0]
   3585a:	2b00      	cmp	r3, #0
   3585c:	d000      	beq.n	35860 <_sbrk_r+0x1c>
   3585e:	602b      	str	r3, [r5, #0]
   35860:	bd70      	pop	{r4, r5, r6, pc}
   35862:	46c0      	nop			; (mov r8, r8)
   35864:	20005d24 	.word	0x20005d24

00035868 <sniprintf>:
   35868:	b40c      	push	{r2, r3}
   3586a:	b530      	push	{r4, r5, lr}
   3586c:	4b16      	ldr	r3, [pc, #88]	; (358c8 <sniprintf+0x60>)
   3586e:	b09d      	sub	sp, #116	; 0x74
   35870:	1e0c      	subs	r4, r1, #0
   35872:	681d      	ldr	r5, [r3, #0]
   35874:	da08      	bge.n	35888 <sniprintf+0x20>
   35876:	238b      	movs	r3, #139	; 0x8b
   35878:	2001      	movs	r0, #1
   3587a:	602b      	str	r3, [r5, #0]
   3587c:	4240      	negs	r0, r0
   3587e:	b01d      	add	sp, #116	; 0x74
   35880:	bc30      	pop	{r4, r5}
   35882:	bc08      	pop	{r3}
   35884:	b002      	add	sp, #8
   35886:	4718      	bx	r3
   35888:	2382      	movs	r3, #130	; 0x82
   3588a:	a902      	add	r1, sp, #8
   3588c:	009b      	lsls	r3, r3, #2
   3588e:	818b      	strh	r3, [r1, #12]
   35890:	2300      	movs	r3, #0
   35892:	9002      	str	r0, [sp, #8]
   35894:	6108      	str	r0, [r1, #16]
   35896:	429c      	cmp	r4, r3
   35898:	d000      	beq.n	3589c <sniprintf+0x34>
   3589a:	1e63      	subs	r3, r4, #1
   3589c:	608b      	str	r3, [r1, #8]
   3589e:	614b      	str	r3, [r1, #20]
   358a0:	2301      	movs	r3, #1
   358a2:	425b      	negs	r3, r3
   358a4:	81cb      	strh	r3, [r1, #14]
   358a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   358a8:	ab21      	add	r3, sp, #132	; 0x84
   358aa:	0028      	movs	r0, r5
   358ac:	9301      	str	r3, [sp, #4]
   358ae:	f000 fcff 	bl	362b0 <_svfiprintf_r>
   358b2:	1c43      	adds	r3, r0, #1
   358b4:	da01      	bge.n	358ba <sniprintf+0x52>
   358b6:	238b      	movs	r3, #139	; 0x8b
   358b8:	602b      	str	r3, [r5, #0]
   358ba:	2c00      	cmp	r4, #0
   358bc:	d0df      	beq.n	3587e <sniprintf+0x16>
   358be:	2300      	movs	r3, #0
   358c0:	9a02      	ldr	r2, [sp, #8]
   358c2:	7013      	strb	r3, [r2, #0]
   358c4:	e7db      	b.n	3587e <sniprintf+0x16>
   358c6:	46c0      	nop			; (mov r8, r8)
   358c8:	20000130 	.word	0x20000130

000358cc <siprintf>:
   358cc:	b40e      	push	{r1, r2, r3}
   358ce:	b510      	push	{r4, lr}
   358d0:	b09d      	sub	sp, #116	; 0x74
   358d2:	a902      	add	r1, sp, #8
   358d4:	9002      	str	r0, [sp, #8]
   358d6:	6108      	str	r0, [r1, #16]
   358d8:	480b      	ldr	r0, [pc, #44]	; (35908 <siprintf+0x3c>)
   358da:	2482      	movs	r4, #130	; 0x82
   358dc:	6088      	str	r0, [r1, #8]
   358de:	6148      	str	r0, [r1, #20]
   358e0:	2001      	movs	r0, #1
   358e2:	4240      	negs	r0, r0
   358e4:	ab1f      	add	r3, sp, #124	; 0x7c
   358e6:	81c8      	strh	r0, [r1, #14]
   358e8:	4808      	ldr	r0, [pc, #32]	; (3590c <siprintf+0x40>)
   358ea:	cb04      	ldmia	r3!, {r2}
   358ec:	00a4      	lsls	r4, r4, #2
   358ee:	6800      	ldr	r0, [r0, #0]
   358f0:	9301      	str	r3, [sp, #4]
   358f2:	818c      	strh	r4, [r1, #12]
   358f4:	f000 fcdc 	bl	362b0 <_svfiprintf_r>
   358f8:	2300      	movs	r3, #0
   358fa:	9a02      	ldr	r2, [sp, #8]
   358fc:	7013      	strb	r3, [r2, #0]
   358fe:	b01d      	add	sp, #116	; 0x74
   35900:	bc10      	pop	{r4}
   35902:	bc08      	pop	{r3}
   35904:	b003      	add	sp, #12
   35906:	4718      	bx	r3
   35908:	7fffffff 	.word	0x7fffffff
   3590c:	20000130 	.word	0x20000130

00035910 <strcasecmp>:
   35910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35912:	0007      	movs	r7, r0
   35914:	000e      	movs	r6, r1
   35916:	783c      	ldrb	r4, [r7, #0]
   35918:	f000 fbda 	bl	360d0 <__locale_ctype_ptr>
   3591c:	2203      	movs	r2, #3
   3591e:	1900      	adds	r0, r0, r4
   35920:	7843      	ldrb	r3, [r0, #1]
   35922:	4013      	ands	r3, r2
   35924:	2b01      	cmp	r3, #1
   35926:	d100      	bne.n	3592a <strcasecmp+0x1a>
   35928:	3420      	adds	r4, #32
   3592a:	7835      	ldrb	r5, [r6, #0]
   3592c:	f000 fbd0 	bl	360d0 <__locale_ctype_ptr>
   35930:	2203      	movs	r2, #3
   35932:	1940      	adds	r0, r0, r5
   35934:	7843      	ldrb	r3, [r0, #1]
   35936:	4013      	ands	r3, r2
   35938:	2b01      	cmp	r3, #1
   3593a:	d100      	bne.n	3593e <strcasecmp+0x2e>
   3593c:	3520      	adds	r5, #32
   3593e:	1b60      	subs	r0, r4, r5
   35940:	d103      	bne.n	3594a <strcasecmp+0x3a>
   35942:	3701      	adds	r7, #1
   35944:	3601      	adds	r6, #1
   35946:	2d00      	cmp	r5, #0
   35948:	d1e5      	bne.n	35916 <strcasecmp+0x6>
   3594a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003594c <strcat>:
   3594c:	0002      	movs	r2, r0
   3594e:	b510      	push	{r4, lr}
   35950:	7813      	ldrb	r3, [r2, #0]
   35952:	2b00      	cmp	r3, #0
   35954:	d105      	bne.n	35962 <strcat+0x16>
   35956:	5ccc      	ldrb	r4, [r1, r3]
   35958:	54d4      	strb	r4, [r2, r3]
   3595a:	3301      	adds	r3, #1
   3595c:	2c00      	cmp	r4, #0
   3595e:	d1fa      	bne.n	35956 <strcat+0xa>
   35960:	bd10      	pop	{r4, pc}
   35962:	3201      	adds	r2, #1
   35964:	e7f4      	b.n	35950 <strcat+0x4>

00035966 <strcmp>:
   35966:	7802      	ldrb	r2, [r0, #0]
   35968:	780b      	ldrb	r3, [r1, #0]
   3596a:	2a00      	cmp	r2, #0
   3596c:	d003      	beq.n	35976 <strcmp+0x10>
   3596e:	3001      	adds	r0, #1
   35970:	3101      	adds	r1, #1
   35972:	429a      	cmp	r2, r3
   35974:	d0f7      	beq.n	35966 <strcmp>
   35976:	1ad0      	subs	r0, r2, r3
   35978:	4770      	bx	lr

0003597a <strcpy>:
   3597a:	1c03      	adds	r3, r0, #0
   3597c:	780a      	ldrb	r2, [r1, #0]
   3597e:	3101      	adds	r1, #1
   35980:	701a      	strb	r2, [r3, #0]
   35982:	3301      	adds	r3, #1
   35984:	2a00      	cmp	r2, #0
   35986:	d1f9      	bne.n	3597c <strcpy+0x2>
   35988:	4770      	bx	lr
	...

0003598c <strdup>:
   3598c:	b510      	push	{r4, lr}
   3598e:	4b03      	ldr	r3, [pc, #12]	; (3599c <strdup+0x10>)
   35990:	0001      	movs	r1, r0
   35992:	6818      	ldr	r0, [r3, #0]
   35994:	f000 f804 	bl	359a0 <_strdup_r>
   35998:	bd10      	pop	{r4, pc}
   3599a:	46c0      	nop			; (mov r8, r8)
   3599c:	20000130 	.word	0x20000130

000359a0 <_strdup_r>:
   359a0:	b570      	push	{r4, r5, r6, lr}
   359a2:	0005      	movs	r5, r0
   359a4:	0008      	movs	r0, r1
   359a6:	000e      	movs	r6, r1
   359a8:	f000 f80d 	bl	359c6 <strlen>
   359ac:	1c44      	adds	r4, r0, #1
   359ae:	0021      	movs	r1, r4
   359b0:	0028      	movs	r0, r5
   359b2:	f7ff fe7f 	bl	356b4 <_malloc_r>
   359b6:	1e05      	subs	r5, r0, #0
   359b8:	d003      	beq.n	359c2 <_strdup_r+0x22>
   359ba:	0022      	movs	r2, r4
   359bc:	0031      	movs	r1, r6
   359be:	f7ff fe0b 	bl	355d8 <memcpy>
   359c2:	0028      	movs	r0, r5
   359c4:	bd70      	pop	{r4, r5, r6, pc}

000359c6 <strlen>:
   359c6:	2300      	movs	r3, #0
   359c8:	5cc2      	ldrb	r2, [r0, r3]
   359ca:	3301      	adds	r3, #1
   359cc:	2a00      	cmp	r2, #0
   359ce:	d1fb      	bne.n	359c8 <strlen+0x2>
   359d0:	1e58      	subs	r0, r3, #1
   359d2:	4770      	bx	lr

000359d4 <strncmp>:
   359d4:	2300      	movs	r3, #0
   359d6:	b530      	push	{r4, r5, lr}
   359d8:	429a      	cmp	r2, r3
   359da:	d00a      	beq.n	359f2 <strncmp+0x1e>
   359dc:	3a01      	subs	r2, #1
   359de:	5cc4      	ldrb	r4, [r0, r3]
   359e0:	5ccd      	ldrb	r5, [r1, r3]
   359e2:	42ac      	cmp	r4, r5
   359e4:	d104      	bne.n	359f0 <strncmp+0x1c>
   359e6:	429a      	cmp	r2, r3
   359e8:	d002      	beq.n	359f0 <strncmp+0x1c>
   359ea:	3301      	adds	r3, #1
   359ec:	2c00      	cmp	r4, #0
   359ee:	d1f6      	bne.n	359de <strncmp+0xa>
   359f0:	1b63      	subs	r3, r4, r5
   359f2:	0018      	movs	r0, r3
   359f4:	bd30      	pop	{r4, r5, pc}

000359f6 <strncpy>:
   359f6:	b570      	push	{r4, r5, r6, lr}
   359f8:	0004      	movs	r4, r0
   359fa:	2a00      	cmp	r2, #0
   359fc:	d100      	bne.n	35a00 <strncpy+0xa>
   359fe:	bd70      	pop	{r4, r5, r6, pc}
   35a00:	780d      	ldrb	r5, [r1, #0]
   35a02:	1e56      	subs	r6, r2, #1
   35a04:	1c63      	adds	r3, r4, #1
   35a06:	7025      	strb	r5, [r4, #0]
   35a08:	3101      	adds	r1, #1
   35a0a:	2d00      	cmp	r5, #0
   35a0c:	d105      	bne.n	35a1a <strncpy+0x24>
   35a0e:	18a4      	adds	r4, r4, r2
   35a10:	429c      	cmp	r4, r3
   35a12:	d0f4      	beq.n	359fe <strncpy+0x8>
   35a14:	701d      	strb	r5, [r3, #0]
   35a16:	3301      	adds	r3, #1
   35a18:	e7fa      	b.n	35a10 <strncpy+0x1a>
   35a1a:	001c      	movs	r4, r3
   35a1c:	0032      	movs	r2, r6
   35a1e:	e7ec      	b.n	359fa <strncpy+0x4>

00035a20 <strrchr>:
   35a20:	b570      	push	{r4, r5, r6, lr}
   35a22:	000d      	movs	r5, r1
   35a24:	2400      	movs	r4, #0
   35a26:	2900      	cmp	r1, #0
   35a28:	d105      	bne.n	35a36 <strrchr+0x16>
   35a2a:	f000 ff19 	bl	36860 <strchr>
   35a2e:	0004      	movs	r4, r0
   35a30:	e006      	b.n	35a40 <strrchr+0x20>
   35a32:	001c      	movs	r4, r3
   35a34:	1c58      	adds	r0, r3, #1
   35a36:	0029      	movs	r1, r5
   35a38:	f000 ff12 	bl	36860 <strchr>
   35a3c:	1e03      	subs	r3, r0, #0
   35a3e:	d1f8      	bne.n	35a32 <strrchr+0x12>
   35a40:	0020      	movs	r0, r4
   35a42:	bd70      	pop	{r4, r5, r6, pc}

00035a44 <strstr>:
   35a44:	b510      	push	{r4, lr}
   35a46:	0002      	movs	r2, r0
   35a48:	7800      	ldrb	r0, [r0, #0]
   35a4a:	2800      	cmp	r0, #0
   35a4c:	d104      	bne.n	35a58 <strstr+0x14>
   35a4e:	7809      	ldrb	r1, [r1, #0]
   35a50:	2900      	cmp	r1, #0
   35a52:	d00d      	beq.n	35a70 <strstr+0x2c>
   35a54:	bd10      	pop	{r4, pc}
   35a56:	3201      	adds	r2, #1
   35a58:	7810      	ldrb	r0, [r2, #0]
   35a5a:	2800      	cmp	r0, #0
   35a5c:	d0fa      	beq.n	35a54 <strstr+0x10>
   35a5e:	2300      	movs	r3, #0
   35a60:	5cc8      	ldrb	r0, [r1, r3]
   35a62:	2800      	cmp	r0, #0
   35a64:	d004      	beq.n	35a70 <strstr+0x2c>
   35a66:	5cd4      	ldrb	r4, [r2, r3]
   35a68:	4284      	cmp	r4, r0
   35a6a:	d1f4      	bne.n	35a56 <strstr+0x12>
   35a6c:	3301      	adds	r3, #1
   35a6e:	e7f7      	b.n	35a60 <strstr+0x1c>
   35a70:	0010      	movs	r0, r2
   35a72:	e7ef      	b.n	35a54 <strstr+0x10>

00035a74 <_strtol_l.isra.0>:
   35a74:	b5f0      	push	{r4, r5, r6, r7, lr}
   35a76:	001f      	movs	r7, r3
   35a78:	000e      	movs	r6, r1
   35a7a:	b087      	sub	sp, #28
   35a7c:	9005      	str	r0, [sp, #20]
   35a7e:	9103      	str	r1, [sp, #12]
   35a80:	9202      	str	r2, [sp, #8]
   35a82:	980c      	ldr	r0, [sp, #48]	; 0x30
   35a84:	7834      	ldrb	r4, [r6, #0]
   35a86:	f000 fb20 	bl	360ca <__locale_ctype_ptr_l>
   35a8a:	2208      	movs	r2, #8
   35a8c:	1900      	adds	r0, r0, r4
   35a8e:	7843      	ldrb	r3, [r0, #1]
   35a90:	1c75      	adds	r5, r6, #1
   35a92:	4013      	ands	r3, r2
   35a94:	d10c      	bne.n	35ab0 <_strtol_l.isra.0+0x3c>
   35a96:	2c2d      	cmp	r4, #45	; 0x2d
   35a98:	d10c      	bne.n	35ab4 <_strtol_l.isra.0+0x40>
   35a9a:	3301      	adds	r3, #1
   35a9c:	782c      	ldrb	r4, [r5, #0]
   35a9e:	9301      	str	r3, [sp, #4]
   35aa0:	1cb5      	adds	r5, r6, #2
   35aa2:	2f00      	cmp	r7, #0
   35aa4:	d00c      	beq.n	35ac0 <_strtol_l.isra.0+0x4c>
   35aa6:	2f10      	cmp	r7, #16
   35aa8:	d114      	bne.n	35ad4 <_strtol_l.isra.0+0x60>
   35aaa:	2c30      	cmp	r4, #48	; 0x30
   35aac:	d00a      	beq.n	35ac4 <_strtol_l.isra.0+0x50>
   35aae:	e011      	b.n	35ad4 <_strtol_l.isra.0+0x60>
   35ab0:	002e      	movs	r6, r5
   35ab2:	e7e6      	b.n	35a82 <_strtol_l.isra.0+0xe>
   35ab4:	9301      	str	r3, [sp, #4]
   35ab6:	2c2b      	cmp	r4, #43	; 0x2b
   35ab8:	d1f3      	bne.n	35aa2 <_strtol_l.isra.0+0x2e>
   35aba:	782c      	ldrb	r4, [r5, #0]
   35abc:	1cb5      	adds	r5, r6, #2
   35abe:	e7f0      	b.n	35aa2 <_strtol_l.isra.0+0x2e>
   35ac0:	2c30      	cmp	r4, #48	; 0x30
   35ac2:	d12f      	bne.n	35b24 <_strtol_l.isra.0+0xb0>
   35ac4:	2220      	movs	r2, #32
   35ac6:	782b      	ldrb	r3, [r5, #0]
   35ac8:	4393      	bics	r3, r2
   35aca:	2b58      	cmp	r3, #88	; 0x58
   35acc:	d151      	bne.n	35b72 <_strtol_l.isra.0+0xfe>
   35ace:	2710      	movs	r7, #16
   35ad0:	786c      	ldrb	r4, [r5, #1]
   35ad2:	3502      	adds	r5, #2
   35ad4:	9b01      	ldr	r3, [sp, #4]
   35ad6:	4a29      	ldr	r2, [pc, #164]	; (35b7c <_strtol_l.isra.0+0x108>)
   35ad8:	0039      	movs	r1, r7
   35ada:	189e      	adds	r6, r3, r2
   35adc:	0030      	movs	r0, r6
   35ade:	f7fd fe2f 	bl	33740 <__aeabi_uidivmod>
   35ae2:	0030      	movs	r0, r6
   35ae4:	9104      	str	r1, [sp, #16]
   35ae6:	0039      	movs	r1, r7
   35ae8:	f7fd fda4 	bl	33634 <__udivsi3>
   35aec:	2101      	movs	r1, #1
   35aee:	2300      	movs	r3, #0
   35af0:	4249      	negs	r1, r1
   35af2:	0002      	movs	r2, r0
   35af4:	468c      	mov	ip, r1
   35af6:	0018      	movs	r0, r3
   35af8:	0021      	movs	r1, r4
   35afa:	3930      	subs	r1, #48	; 0x30
   35afc:	2909      	cmp	r1, #9
   35afe:	d813      	bhi.n	35b28 <_strtol_l.isra.0+0xb4>
   35b00:	000c      	movs	r4, r1
   35b02:	42a7      	cmp	r7, r4
   35b04:	dd1c      	ble.n	35b40 <_strtol_l.isra.0+0xcc>
   35b06:	1c59      	adds	r1, r3, #1
   35b08:	d009      	beq.n	35b1e <_strtol_l.isra.0+0xaa>
   35b0a:	4663      	mov	r3, ip
   35b0c:	4282      	cmp	r2, r0
   35b0e:	d306      	bcc.n	35b1e <_strtol_l.isra.0+0xaa>
   35b10:	d102      	bne.n	35b18 <_strtol_l.isra.0+0xa4>
   35b12:	9904      	ldr	r1, [sp, #16]
   35b14:	42a1      	cmp	r1, r4
   35b16:	db02      	blt.n	35b1e <_strtol_l.isra.0+0xaa>
   35b18:	2301      	movs	r3, #1
   35b1a:	4378      	muls	r0, r7
   35b1c:	1820      	adds	r0, r4, r0
   35b1e:	782c      	ldrb	r4, [r5, #0]
   35b20:	3501      	adds	r5, #1
   35b22:	e7e9      	b.n	35af8 <_strtol_l.isra.0+0x84>
   35b24:	270a      	movs	r7, #10
   35b26:	e7d5      	b.n	35ad4 <_strtol_l.isra.0+0x60>
   35b28:	0021      	movs	r1, r4
   35b2a:	3941      	subs	r1, #65	; 0x41
   35b2c:	2919      	cmp	r1, #25
   35b2e:	d801      	bhi.n	35b34 <_strtol_l.isra.0+0xc0>
   35b30:	3c37      	subs	r4, #55	; 0x37
   35b32:	e7e6      	b.n	35b02 <_strtol_l.isra.0+0x8e>
   35b34:	0021      	movs	r1, r4
   35b36:	3961      	subs	r1, #97	; 0x61
   35b38:	2919      	cmp	r1, #25
   35b3a:	d801      	bhi.n	35b40 <_strtol_l.isra.0+0xcc>
   35b3c:	3c57      	subs	r4, #87	; 0x57
   35b3e:	e7e0      	b.n	35b02 <_strtol_l.isra.0+0x8e>
   35b40:	1c5a      	adds	r2, r3, #1
   35b42:	d108      	bne.n	35b56 <_strtol_l.isra.0+0xe2>
   35b44:	9a05      	ldr	r2, [sp, #20]
   35b46:	3323      	adds	r3, #35	; 0x23
   35b48:	6013      	str	r3, [r2, #0]
   35b4a:	9b02      	ldr	r3, [sp, #8]
   35b4c:	0030      	movs	r0, r6
   35b4e:	2b00      	cmp	r3, #0
   35b50:	d10b      	bne.n	35b6a <_strtol_l.isra.0+0xf6>
   35b52:	b007      	add	sp, #28
   35b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35b56:	9a01      	ldr	r2, [sp, #4]
   35b58:	2a00      	cmp	r2, #0
   35b5a:	d000      	beq.n	35b5e <_strtol_l.isra.0+0xea>
   35b5c:	4240      	negs	r0, r0
   35b5e:	9a02      	ldr	r2, [sp, #8]
   35b60:	2a00      	cmp	r2, #0
   35b62:	d0f6      	beq.n	35b52 <_strtol_l.isra.0+0xde>
   35b64:	9a03      	ldr	r2, [sp, #12]
   35b66:	2b00      	cmp	r3, #0
   35b68:	d000      	beq.n	35b6c <_strtol_l.isra.0+0xf8>
   35b6a:	1e6a      	subs	r2, r5, #1
   35b6c:	9b02      	ldr	r3, [sp, #8]
   35b6e:	601a      	str	r2, [r3, #0]
   35b70:	e7ef      	b.n	35b52 <_strtol_l.isra.0+0xde>
   35b72:	2430      	movs	r4, #48	; 0x30
   35b74:	2f00      	cmp	r7, #0
   35b76:	d1ad      	bne.n	35ad4 <_strtol_l.isra.0+0x60>
   35b78:	3708      	adds	r7, #8
   35b7a:	e7ab      	b.n	35ad4 <_strtol_l.isra.0+0x60>
   35b7c:	7fffffff 	.word	0x7fffffff

00035b80 <strtol>:
   35b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35b82:	0013      	movs	r3, r2
   35b84:	4a06      	ldr	r2, [pc, #24]	; (35ba0 <strtol+0x20>)
   35b86:	0005      	movs	r5, r0
   35b88:	6810      	ldr	r0, [r2, #0]
   35b8a:	6a04      	ldr	r4, [r0, #32]
   35b8c:	2c00      	cmp	r4, #0
   35b8e:	d100      	bne.n	35b92 <strtol+0x12>
   35b90:	4c04      	ldr	r4, [pc, #16]	; (35ba4 <strtol+0x24>)
   35b92:	000a      	movs	r2, r1
   35b94:	9400      	str	r4, [sp, #0]
   35b96:	0029      	movs	r1, r5
   35b98:	f7ff ff6c 	bl	35a74 <_strtol_l.isra.0>
   35b9c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   35b9e:	46c0      	nop			; (mov r8, r8)
   35ba0:	20000130 	.word	0x20000130
   35ba4:	20000194 	.word	0x20000194

00035ba8 <_vsniprintf_r>:
   35ba8:	b530      	push	{r4, r5, lr}
   35baa:	0014      	movs	r4, r2
   35bac:	b09b      	sub	sp, #108	; 0x6c
   35bae:	0005      	movs	r5, r0
   35bb0:	001a      	movs	r2, r3
   35bb2:	2c00      	cmp	r4, #0
   35bb4:	da05      	bge.n	35bc2 <_vsniprintf_r+0x1a>
   35bb6:	238b      	movs	r3, #139	; 0x8b
   35bb8:	6003      	str	r3, [r0, #0]
   35bba:	2001      	movs	r0, #1
   35bbc:	4240      	negs	r0, r0
   35bbe:	b01b      	add	sp, #108	; 0x6c
   35bc0:	bd30      	pop	{r4, r5, pc}
   35bc2:	2382      	movs	r3, #130	; 0x82
   35bc4:	4668      	mov	r0, sp
   35bc6:	009b      	lsls	r3, r3, #2
   35bc8:	8183      	strh	r3, [r0, #12]
   35bca:	2300      	movs	r3, #0
   35bcc:	9100      	str	r1, [sp, #0]
   35bce:	9104      	str	r1, [sp, #16]
   35bd0:	429c      	cmp	r4, r3
   35bd2:	d000      	beq.n	35bd6 <_vsniprintf_r+0x2e>
   35bd4:	1e63      	subs	r3, r4, #1
   35bd6:	9302      	str	r3, [sp, #8]
   35bd8:	9305      	str	r3, [sp, #20]
   35bda:	2301      	movs	r3, #1
   35bdc:	4669      	mov	r1, sp
   35bde:	425b      	negs	r3, r3
   35be0:	81cb      	strh	r3, [r1, #14]
   35be2:	0028      	movs	r0, r5
   35be4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   35be6:	f000 fb63 	bl	362b0 <_svfiprintf_r>
   35bea:	1c43      	adds	r3, r0, #1
   35bec:	da01      	bge.n	35bf2 <_vsniprintf_r+0x4a>
   35bee:	238b      	movs	r3, #139	; 0x8b
   35bf0:	602b      	str	r3, [r5, #0]
   35bf2:	2c00      	cmp	r4, #0
   35bf4:	d0e3      	beq.n	35bbe <_vsniprintf_r+0x16>
   35bf6:	2300      	movs	r3, #0
   35bf8:	9a00      	ldr	r2, [sp, #0]
   35bfa:	7013      	strb	r3, [r2, #0]
   35bfc:	e7df      	b.n	35bbe <_vsniprintf_r+0x16>
	...

00035c00 <vsniprintf>:
   35c00:	b507      	push	{r0, r1, r2, lr}
   35c02:	9300      	str	r3, [sp, #0]
   35c04:	0013      	movs	r3, r2
   35c06:	000a      	movs	r2, r1
   35c08:	0001      	movs	r1, r0
   35c0a:	4802      	ldr	r0, [pc, #8]	; (35c14 <vsniprintf+0x14>)
   35c0c:	6800      	ldr	r0, [r0, #0]
   35c0e:	f7ff ffcb 	bl	35ba8 <_vsniprintf_r>
   35c12:	bd0e      	pop	{r1, r2, r3, pc}
   35c14:	20000130 	.word	0x20000130

00035c18 <__swbuf_r>:
   35c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35c1a:	0005      	movs	r5, r0
   35c1c:	000e      	movs	r6, r1
   35c1e:	0014      	movs	r4, r2
   35c20:	2800      	cmp	r0, #0
   35c22:	d004      	beq.n	35c2e <__swbuf_r+0x16>
   35c24:	6983      	ldr	r3, [r0, #24]
   35c26:	2b00      	cmp	r3, #0
   35c28:	d101      	bne.n	35c2e <__swbuf_r+0x16>
   35c2a:	f000 f9b9 	bl	35fa0 <__sinit>
   35c2e:	4b22      	ldr	r3, [pc, #136]	; (35cb8 <__swbuf_r+0xa0>)
   35c30:	429c      	cmp	r4, r3
   35c32:	d12d      	bne.n	35c90 <__swbuf_r+0x78>
   35c34:	686c      	ldr	r4, [r5, #4]
   35c36:	69a3      	ldr	r3, [r4, #24]
   35c38:	60a3      	str	r3, [r4, #8]
   35c3a:	89a3      	ldrh	r3, [r4, #12]
   35c3c:	071b      	lsls	r3, r3, #28
   35c3e:	d531      	bpl.n	35ca4 <__swbuf_r+0x8c>
   35c40:	6923      	ldr	r3, [r4, #16]
   35c42:	2b00      	cmp	r3, #0
   35c44:	d02e      	beq.n	35ca4 <__swbuf_r+0x8c>
   35c46:	6823      	ldr	r3, [r4, #0]
   35c48:	6922      	ldr	r2, [r4, #16]
   35c4a:	b2f7      	uxtb	r7, r6
   35c4c:	1a98      	subs	r0, r3, r2
   35c4e:	6963      	ldr	r3, [r4, #20]
   35c50:	b2f6      	uxtb	r6, r6
   35c52:	4298      	cmp	r0, r3
   35c54:	db05      	blt.n	35c62 <__swbuf_r+0x4a>
   35c56:	0021      	movs	r1, r4
   35c58:	0028      	movs	r0, r5
   35c5a:	f000 f933 	bl	35ec4 <_fflush_r>
   35c5e:	2800      	cmp	r0, #0
   35c60:	d126      	bne.n	35cb0 <__swbuf_r+0x98>
   35c62:	68a3      	ldr	r3, [r4, #8]
   35c64:	3001      	adds	r0, #1
   35c66:	3b01      	subs	r3, #1
   35c68:	60a3      	str	r3, [r4, #8]
   35c6a:	6823      	ldr	r3, [r4, #0]
   35c6c:	1c5a      	adds	r2, r3, #1
   35c6e:	6022      	str	r2, [r4, #0]
   35c70:	701f      	strb	r7, [r3, #0]
   35c72:	6963      	ldr	r3, [r4, #20]
   35c74:	4298      	cmp	r0, r3
   35c76:	d004      	beq.n	35c82 <__swbuf_r+0x6a>
   35c78:	89a3      	ldrh	r3, [r4, #12]
   35c7a:	07db      	lsls	r3, r3, #31
   35c7c:	d51a      	bpl.n	35cb4 <__swbuf_r+0x9c>
   35c7e:	2e0a      	cmp	r6, #10
   35c80:	d118      	bne.n	35cb4 <__swbuf_r+0x9c>
   35c82:	0021      	movs	r1, r4
   35c84:	0028      	movs	r0, r5
   35c86:	f000 f91d 	bl	35ec4 <_fflush_r>
   35c8a:	2800      	cmp	r0, #0
   35c8c:	d012      	beq.n	35cb4 <__swbuf_r+0x9c>
   35c8e:	e00f      	b.n	35cb0 <__swbuf_r+0x98>
   35c90:	4b0a      	ldr	r3, [pc, #40]	; (35cbc <__swbuf_r+0xa4>)
   35c92:	429c      	cmp	r4, r3
   35c94:	d101      	bne.n	35c9a <__swbuf_r+0x82>
   35c96:	68ac      	ldr	r4, [r5, #8]
   35c98:	e7cd      	b.n	35c36 <__swbuf_r+0x1e>
   35c9a:	4b09      	ldr	r3, [pc, #36]	; (35cc0 <__swbuf_r+0xa8>)
   35c9c:	429c      	cmp	r4, r3
   35c9e:	d1ca      	bne.n	35c36 <__swbuf_r+0x1e>
   35ca0:	68ec      	ldr	r4, [r5, #12]
   35ca2:	e7c8      	b.n	35c36 <__swbuf_r+0x1e>
   35ca4:	0021      	movs	r1, r4
   35ca6:	0028      	movs	r0, r5
   35ca8:	f000 f80c 	bl	35cc4 <__swsetup_r>
   35cac:	2800      	cmp	r0, #0
   35cae:	d0ca      	beq.n	35c46 <__swbuf_r+0x2e>
   35cb0:	2601      	movs	r6, #1
   35cb2:	4276      	negs	r6, r6
   35cb4:	0030      	movs	r0, r6
   35cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35cb8:	0003b148 	.word	0x0003b148
   35cbc:	0003b168 	.word	0x0003b168
   35cc0:	0003b128 	.word	0x0003b128

00035cc4 <__swsetup_r>:
   35cc4:	4b36      	ldr	r3, [pc, #216]	; (35da0 <__swsetup_r+0xdc>)
   35cc6:	b570      	push	{r4, r5, r6, lr}
   35cc8:	681d      	ldr	r5, [r3, #0]
   35cca:	0006      	movs	r6, r0
   35ccc:	000c      	movs	r4, r1
   35cce:	2d00      	cmp	r5, #0
   35cd0:	d005      	beq.n	35cde <__swsetup_r+0x1a>
   35cd2:	69ab      	ldr	r3, [r5, #24]
   35cd4:	2b00      	cmp	r3, #0
   35cd6:	d102      	bne.n	35cde <__swsetup_r+0x1a>
   35cd8:	0028      	movs	r0, r5
   35cda:	f000 f961 	bl	35fa0 <__sinit>
   35cde:	4b31      	ldr	r3, [pc, #196]	; (35da4 <__swsetup_r+0xe0>)
   35ce0:	429c      	cmp	r4, r3
   35ce2:	d10f      	bne.n	35d04 <__swsetup_r+0x40>
   35ce4:	686c      	ldr	r4, [r5, #4]
   35ce6:	230c      	movs	r3, #12
   35ce8:	5ee2      	ldrsh	r2, [r4, r3]
   35cea:	b293      	uxth	r3, r2
   35cec:	0719      	lsls	r1, r3, #28
   35cee:	d42d      	bmi.n	35d4c <__swsetup_r+0x88>
   35cf0:	06d9      	lsls	r1, r3, #27
   35cf2:	d411      	bmi.n	35d18 <__swsetup_r+0x54>
   35cf4:	2309      	movs	r3, #9
   35cf6:	2001      	movs	r0, #1
   35cf8:	6033      	str	r3, [r6, #0]
   35cfa:	3337      	adds	r3, #55	; 0x37
   35cfc:	4313      	orrs	r3, r2
   35cfe:	81a3      	strh	r3, [r4, #12]
   35d00:	4240      	negs	r0, r0
   35d02:	bd70      	pop	{r4, r5, r6, pc}
   35d04:	4b28      	ldr	r3, [pc, #160]	; (35da8 <__swsetup_r+0xe4>)
   35d06:	429c      	cmp	r4, r3
   35d08:	d101      	bne.n	35d0e <__swsetup_r+0x4a>
   35d0a:	68ac      	ldr	r4, [r5, #8]
   35d0c:	e7eb      	b.n	35ce6 <__swsetup_r+0x22>
   35d0e:	4b27      	ldr	r3, [pc, #156]	; (35dac <__swsetup_r+0xe8>)
   35d10:	429c      	cmp	r4, r3
   35d12:	d1e8      	bne.n	35ce6 <__swsetup_r+0x22>
   35d14:	68ec      	ldr	r4, [r5, #12]
   35d16:	e7e6      	b.n	35ce6 <__swsetup_r+0x22>
   35d18:	075b      	lsls	r3, r3, #29
   35d1a:	d513      	bpl.n	35d44 <__swsetup_r+0x80>
   35d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35d1e:	2900      	cmp	r1, #0
   35d20:	d008      	beq.n	35d34 <__swsetup_r+0x70>
   35d22:	0023      	movs	r3, r4
   35d24:	3344      	adds	r3, #68	; 0x44
   35d26:	4299      	cmp	r1, r3
   35d28:	d002      	beq.n	35d30 <__swsetup_r+0x6c>
   35d2a:	0030      	movs	r0, r6
   35d2c:	f7ff fc78 	bl	35620 <_free_r>
   35d30:	2300      	movs	r3, #0
   35d32:	6363      	str	r3, [r4, #52]	; 0x34
   35d34:	2224      	movs	r2, #36	; 0x24
   35d36:	89a3      	ldrh	r3, [r4, #12]
   35d38:	4393      	bics	r3, r2
   35d3a:	81a3      	strh	r3, [r4, #12]
   35d3c:	2300      	movs	r3, #0
   35d3e:	6063      	str	r3, [r4, #4]
   35d40:	6923      	ldr	r3, [r4, #16]
   35d42:	6023      	str	r3, [r4, #0]
   35d44:	2308      	movs	r3, #8
   35d46:	89a2      	ldrh	r2, [r4, #12]
   35d48:	4313      	orrs	r3, r2
   35d4a:	81a3      	strh	r3, [r4, #12]
   35d4c:	6923      	ldr	r3, [r4, #16]
   35d4e:	2b00      	cmp	r3, #0
   35d50:	d10b      	bne.n	35d6a <__swsetup_r+0xa6>
   35d52:	21a0      	movs	r1, #160	; 0xa0
   35d54:	2280      	movs	r2, #128	; 0x80
   35d56:	89a3      	ldrh	r3, [r4, #12]
   35d58:	0089      	lsls	r1, r1, #2
   35d5a:	0092      	lsls	r2, r2, #2
   35d5c:	400b      	ands	r3, r1
   35d5e:	4293      	cmp	r3, r2
   35d60:	d003      	beq.n	35d6a <__swsetup_r+0xa6>
   35d62:	0021      	movs	r1, r4
   35d64:	0030      	movs	r0, r6
   35d66:	f000 f9e9 	bl	3613c <__smakebuf_r>
   35d6a:	2301      	movs	r3, #1
   35d6c:	89a2      	ldrh	r2, [r4, #12]
   35d6e:	4013      	ands	r3, r2
   35d70:	d011      	beq.n	35d96 <__swsetup_r+0xd2>
   35d72:	2300      	movs	r3, #0
   35d74:	60a3      	str	r3, [r4, #8]
   35d76:	6963      	ldr	r3, [r4, #20]
   35d78:	425b      	negs	r3, r3
   35d7a:	61a3      	str	r3, [r4, #24]
   35d7c:	2000      	movs	r0, #0
   35d7e:	6923      	ldr	r3, [r4, #16]
   35d80:	4283      	cmp	r3, r0
   35d82:	d1be      	bne.n	35d02 <__swsetup_r+0x3e>
   35d84:	230c      	movs	r3, #12
   35d86:	5ee2      	ldrsh	r2, [r4, r3]
   35d88:	0613      	lsls	r3, r2, #24
   35d8a:	d5ba      	bpl.n	35d02 <__swsetup_r+0x3e>
   35d8c:	2340      	movs	r3, #64	; 0x40
   35d8e:	4313      	orrs	r3, r2
   35d90:	81a3      	strh	r3, [r4, #12]
   35d92:	3801      	subs	r0, #1
   35d94:	e7b5      	b.n	35d02 <__swsetup_r+0x3e>
   35d96:	0792      	lsls	r2, r2, #30
   35d98:	d400      	bmi.n	35d9c <__swsetup_r+0xd8>
   35d9a:	6963      	ldr	r3, [r4, #20]
   35d9c:	60a3      	str	r3, [r4, #8]
   35d9e:	e7ed      	b.n	35d7c <__swsetup_r+0xb8>
   35da0:	20000130 	.word	0x20000130
   35da4:	0003b148 	.word	0x0003b148
   35da8:	0003b168 	.word	0x0003b168
   35dac:	0003b128 	.word	0x0003b128

00035db0 <__sflush_r>:
   35db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35db2:	898a      	ldrh	r2, [r1, #12]
   35db4:	0005      	movs	r5, r0
   35db6:	000c      	movs	r4, r1
   35db8:	0713      	lsls	r3, r2, #28
   35dba:	d460      	bmi.n	35e7e <__sflush_r+0xce>
   35dbc:	684b      	ldr	r3, [r1, #4]
   35dbe:	2b00      	cmp	r3, #0
   35dc0:	dc04      	bgt.n	35dcc <__sflush_r+0x1c>
   35dc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   35dc4:	2b00      	cmp	r3, #0
   35dc6:	dc01      	bgt.n	35dcc <__sflush_r+0x1c>
   35dc8:	2000      	movs	r0, #0
   35dca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35dcc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35dce:	2f00      	cmp	r7, #0
   35dd0:	d0fa      	beq.n	35dc8 <__sflush_r+0x18>
   35dd2:	2300      	movs	r3, #0
   35dd4:	682e      	ldr	r6, [r5, #0]
   35dd6:	602b      	str	r3, [r5, #0]
   35dd8:	2380      	movs	r3, #128	; 0x80
   35dda:	015b      	lsls	r3, r3, #5
   35ddc:	401a      	ands	r2, r3
   35dde:	d034      	beq.n	35e4a <__sflush_r+0x9a>
   35de0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   35de2:	89a3      	ldrh	r3, [r4, #12]
   35de4:	075b      	lsls	r3, r3, #29
   35de6:	d506      	bpl.n	35df6 <__sflush_r+0x46>
   35de8:	6863      	ldr	r3, [r4, #4]
   35dea:	1ac0      	subs	r0, r0, r3
   35dec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   35dee:	2b00      	cmp	r3, #0
   35df0:	d001      	beq.n	35df6 <__sflush_r+0x46>
   35df2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   35df4:	1ac0      	subs	r0, r0, r3
   35df6:	0002      	movs	r2, r0
   35df8:	6a21      	ldr	r1, [r4, #32]
   35dfa:	2300      	movs	r3, #0
   35dfc:	0028      	movs	r0, r5
   35dfe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35e00:	47b8      	blx	r7
   35e02:	89a1      	ldrh	r1, [r4, #12]
   35e04:	1c43      	adds	r3, r0, #1
   35e06:	d106      	bne.n	35e16 <__sflush_r+0x66>
   35e08:	682b      	ldr	r3, [r5, #0]
   35e0a:	2b1d      	cmp	r3, #29
   35e0c:	d831      	bhi.n	35e72 <__sflush_r+0xc2>
   35e0e:	4a2c      	ldr	r2, [pc, #176]	; (35ec0 <__sflush_r+0x110>)
   35e10:	40da      	lsrs	r2, r3
   35e12:	07d3      	lsls	r3, r2, #31
   35e14:	d52d      	bpl.n	35e72 <__sflush_r+0xc2>
   35e16:	2300      	movs	r3, #0
   35e18:	6063      	str	r3, [r4, #4]
   35e1a:	6923      	ldr	r3, [r4, #16]
   35e1c:	6023      	str	r3, [r4, #0]
   35e1e:	04cb      	lsls	r3, r1, #19
   35e20:	d505      	bpl.n	35e2e <__sflush_r+0x7e>
   35e22:	1c43      	adds	r3, r0, #1
   35e24:	d102      	bne.n	35e2c <__sflush_r+0x7c>
   35e26:	682b      	ldr	r3, [r5, #0]
   35e28:	2b00      	cmp	r3, #0
   35e2a:	d100      	bne.n	35e2e <__sflush_r+0x7e>
   35e2c:	6560      	str	r0, [r4, #84]	; 0x54
   35e2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35e30:	602e      	str	r6, [r5, #0]
   35e32:	2900      	cmp	r1, #0
   35e34:	d0c8      	beq.n	35dc8 <__sflush_r+0x18>
   35e36:	0023      	movs	r3, r4
   35e38:	3344      	adds	r3, #68	; 0x44
   35e3a:	4299      	cmp	r1, r3
   35e3c:	d002      	beq.n	35e44 <__sflush_r+0x94>
   35e3e:	0028      	movs	r0, r5
   35e40:	f7ff fbee 	bl	35620 <_free_r>
   35e44:	2000      	movs	r0, #0
   35e46:	6360      	str	r0, [r4, #52]	; 0x34
   35e48:	e7bf      	b.n	35dca <__sflush_r+0x1a>
   35e4a:	2301      	movs	r3, #1
   35e4c:	6a21      	ldr	r1, [r4, #32]
   35e4e:	0028      	movs	r0, r5
   35e50:	47b8      	blx	r7
   35e52:	1c43      	adds	r3, r0, #1
   35e54:	d1c5      	bne.n	35de2 <__sflush_r+0x32>
   35e56:	682b      	ldr	r3, [r5, #0]
   35e58:	2b00      	cmp	r3, #0
   35e5a:	d0c2      	beq.n	35de2 <__sflush_r+0x32>
   35e5c:	2b1d      	cmp	r3, #29
   35e5e:	d001      	beq.n	35e64 <__sflush_r+0xb4>
   35e60:	2b16      	cmp	r3, #22
   35e62:	d101      	bne.n	35e68 <__sflush_r+0xb8>
   35e64:	602e      	str	r6, [r5, #0]
   35e66:	e7af      	b.n	35dc8 <__sflush_r+0x18>
   35e68:	2340      	movs	r3, #64	; 0x40
   35e6a:	89a2      	ldrh	r2, [r4, #12]
   35e6c:	4313      	orrs	r3, r2
   35e6e:	81a3      	strh	r3, [r4, #12]
   35e70:	e7ab      	b.n	35dca <__sflush_r+0x1a>
   35e72:	2340      	movs	r3, #64	; 0x40
   35e74:	430b      	orrs	r3, r1
   35e76:	2001      	movs	r0, #1
   35e78:	81a3      	strh	r3, [r4, #12]
   35e7a:	4240      	negs	r0, r0
   35e7c:	e7a5      	b.n	35dca <__sflush_r+0x1a>
   35e7e:	690f      	ldr	r7, [r1, #16]
   35e80:	2f00      	cmp	r7, #0
   35e82:	d0a1      	beq.n	35dc8 <__sflush_r+0x18>
   35e84:	680b      	ldr	r3, [r1, #0]
   35e86:	600f      	str	r7, [r1, #0]
   35e88:	1bdb      	subs	r3, r3, r7
   35e8a:	9301      	str	r3, [sp, #4]
   35e8c:	2300      	movs	r3, #0
   35e8e:	0792      	lsls	r2, r2, #30
   35e90:	d100      	bne.n	35e94 <__sflush_r+0xe4>
   35e92:	694b      	ldr	r3, [r1, #20]
   35e94:	60a3      	str	r3, [r4, #8]
   35e96:	9b01      	ldr	r3, [sp, #4]
   35e98:	2b00      	cmp	r3, #0
   35e9a:	dc00      	bgt.n	35e9e <__sflush_r+0xee>
   35e9c:	e794      	b.n	35dc8 <__sflush_r+0x18>
   35e9e:	9b01      	ldr	r3, [sp, #4]
   35ea0:	003a      	movs	r2, r7
   35ea2:	6a21      	ldr	r1, [r4, #32]
   35ea4:	0028      	movs	r0, r5
   35ea6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   35ea8:	47b0      	blx	r6
   35eaa:	2800      	cmp	r0, #0
   35eac:	dc03      	bgt.n	35eb6 <__sflush_r+0x106>
   35eae:	2340      	movs	r3, #64	; 0x40
   35eb0:	89a2      	ldrh	r2, [r4, #12]
   35eb2:	4313      	orrs	r3, r2
   35eb4:	e7df      	b.n	35e76 <__sflush_r+0xc6>
   35eb6:	9b01      	ldr	r3, [sp, #4]
   35eb8:	183f      	adds	r7, r7, r0
   35eba:	1a1b      	subs	r3, r3, r0
   35ebc:	9301      	str	r3, [sp, #4]
   35ebe:	e7ea      	b.n	35e96 <__sflush_r+0xe6>
   35ec0:	20400001 	.word	0x20400001

00035ec4 <_fflush_r>:
   35ec4:	690b      	ldr	r3, [r1, #16]
   35ec6:	b570      	push	{r4, r5, r6, lr}
   35ec8:	0005      	movs	r5, r0
   35eca:	000c      	movs	r4, r1
   35ecc:	2b00      	cmp	r3, #0
   35ece:	d101      	bne.n	35ed4 <_fflush_r+0x10>
   35ed0:	2000      	movs	r0, #0
   35ed2:	bd70      	pop	{r4, r5, r6, pc}
   35ed4:	2800      	cmp	r0, #0
   35ed6:	d004      	beq.n	35ee2 <_fflush_r+0x1e>
   35ed8:	6983      	ldr	r3, [r0, #24]
   35eda:	2b00      	cmp	r3, #0
   35edc:	d101      	bne.n	35ee2 <_fflush_r+0x1e>
   35ede:	f000 f85f 	bl	35fa0 <__sinit>
   35ee2:	4b0b      	ldr	r3, [pc, #44]	; (35f10 <_fflush_r+0x4c>)
   35ee4:	429c      	cmp	r4, r3
   35ee6:	d109      	bne.n	35efc <_fflush_r+0x38>
   35ee8:	686c      	ldr	r4, [r5, #4]
   35eea:	220c      	movs	r2, #12
   35eec:	5ea3      	ldrsh	r3, [r4, r2]
   35eee:	2b00      	cmp	r3, #0
   35ef0:	d0ee      	beq.n	35ed0 <_fflush_r+0xc>
   35ef2:	0021      	movs	r1, r4
   35ef4:	0028      	movs	r0, r5
   35ef6:	f7ff ff5b 	bl	35db0 <__sflush_r>
   35efa:	e7ea      	b.n	35ed2 <_fflush_r+0xe>
   35efc:	4b05      	ldr	r3, [pc, #20]	; (35f14 <_fflush_r+0x50>)
   35efe:	429c      	cmp	r4, r3
   35f00:	d101      	bne.n	35f06 <_fflush_r+0x42>
   35f02:	68ac      	ldr	r4, [r5, #8]
   35f04:	e7f1      	b.n	35eea <_fflush_r+0x26>
   35f06:	4b04      	ldr	r3, [pc, #16]	; (35f18 <_fflush_r+0x54>)
   35f08:	429c      	cmp	r4, r3
   35f0a:	d1ee      	bne.n	35eea <_fflush_r+0x26>
   35f0c:	68ec      	ldr	r4, [r5, #12]
   35f0e:	e7ec      	b.n	35eea <_fflush_r+0x26>
   35f10:	0003b148 	.word	0x0003b148
   35f14:	0003b168 	.word	0x0003b168
   35f18:	0003b128 	.word	0x0003b128

00035f1c <_cleanup_r>:
   35f1c:	b510      	push	{r4, lr}
   35f1e:	4902      	ldr	r1, [pc, #8]	; (35f28 <_cleanup_r+0xc>)
   35f20:	f000 f8b2 	bl	36088 <_fwalk_reent>
   35f24:	bd10      	pop	{r4, pc}
   35f26:	46c0      	nop			; (mov r8, r8)
   35f28:	00035ec5 	.word	0x00035ec5

00035f2c <std.isra.0>:
   35f2c:	2300      	movs	r3, #0
   35f2e:	b510      	push	{r4, lr}
   35f30:	0004      	movs	r4, r0
   35f32:	6003      	str	r3, [r0, #0]
   35f34:	6043      	str	r3, [r0, #4]
   35f36:	6083      	str	r3, [r0, #8]
   35f38:	8181      	strh	r1, [r0, #12]
   35f3a:	6643      	str	r3, [r0, #100]	; 0x64
   35f3c:	81c2      	strh	r2, [r0, #14]
   35f3e:	6103      	str	r3, [r0, #16]
   35f40:	6143      	str	r3, [r0, #20]
   35f42:	6183      	str	r3, [r0, #24]
   35f44:	0019      	movs	r1, r3
   35f46:	2208      	movs	r2, #8
   35f48:	305c      	adds	r0, #92	; 0x5c
   35f4a:	f7ff fb60 	bl	3560e <memset>
   35f4e:	4b05      	ldr	r3, [pc, #20]	; (35f64 <std.isra.0+0x38>)
   35f50:	6224      	str	r4, [r4, #32]
   35f52:	6263      	str	r3, [r4, #36]	; 0x24
   35f54:	4b04      	ldr	r3, [pc, #16]	; (35f68 <std.isra.0+0x3c>)
   35f56:	62a3      	str	r3, [r4, #40]	; 0x28
   35f58:	4b04      	ldr	r3, [pc, #16]	; (35f6c <std.isra.0+0x40>)
   35f5a:	62e3      	str	r3, [r4, #44]	; 0x2c
   35f5c:	4b04      	ldr	r3, [pc, #16]	; (35f70 <std.isra.0+0x44>)
   35f5e:	6323      	str	r3, [r4, #48]	; 0x30
   35f60:	bd10      	pop	{r4, pc}
   35f62:	46c0      	nop			; (mov r8, r8)
   35f64:	000367c9 	.word	0x000367c9
   35f68:	000367f1 	.word	0x000367f1
   35f6c:	00036829 	.word	0x00036829
   35f70:	00036855 	.word	0x00036855

00035f74 <__sfmoreglue>:
   35f74:	b570      	push	{r4, r5, r6, lr}
   35f76:	2568      	movs	r5, #104	; 0x68
   35f78:	1e4a      	subs	r2, r1, #1
   35f7a:	4355      	muls	r5, r2
   35f7c:	000e      	movs	r6, r1
   35f7e:	0029      	movs	r1, r5
   35f80:	3174      	adds	r1, #116	; 0x74
   35f82:	f7ff fb97 	bl	356b4 <_malloc_r>
   35f86:	1e04      	subs	r4, r0, #0
   35f88:	d008      	beq.n	35f9c <__sfmoreglue+0x28>
   35f8a:	2100      	movs	r1, #0
   35f8c:	002a      	movs	r2, r5
   35f8e:	6001      	str	r1, [r0, #0]
   35f90:	6046      	str	r6, [r0, #4]
   35f92:	300c      	adds	r0, #12
   35f94:	60a0      	str	r0, [r4, #8]
   35f96:	3268      	adds	r2, #104	; 0x68
   35f98:	f7ff fb39 	bl	3560e <memset>
   35f9c:	0020      	movs	r0, r4
   35f9e:	bd70      	pop	{r4, r5, r6, pc}

00035fa0 <__sinit>:
   35fa0:	6983      	ldr	r3, [r0, #24]
   35fa2:	b513      	push	{r0, r1, r4, lr}
   35fa4:	0004      	movs	r4, r0
   35fa6:	2b00      	cmp	r3, #0
   35fa8:	d128      	bne.n	35ffc <__sinit+0x5c>
   35faa:	6483      	str	r3, [r0, #72]	; 0x48
   35fac:	64c3      	str	r3, [r0, #76]	; 0x4c
   35fae:	6503      	str	r3, [r0, #80]	; 0x50
   35fb0:	4b13      	ldr	r3, [pc, #76]	; (36000 <__sinit+0x60>)
   35fb2:	4a14      	ldr	r2, [pc, #80]	; (36004 <__sinit+0x64>)
   35fb4:	681b      	ldr	r3, [r3, #0]
   35fb6:	6282      	str	r2, [r0, #40]	; 0x28
   35fb8:	9301      	str	r3, [sp, #4]
   35fba:	4298      	cmp	r0, r3
   35fbc:	d101      	bne.n	35fc2 <__sinit+0x22>
   35fbe:	2301      	movs	r3, #1
   35fc0:	6183      	str	r3, [r0, #24]
   35fc2:	0020      	movs	r0, r4
   35fc4:	f000 f820 	bl	36008 <__sfp>
   35fc8:	6060      	str	r0, [r4, #4]
   35fca:	0020      	movs	r0, r4
   35fcc:	f000 f81c 	bl	36008 <__sfp>
   35fd0:	60a0      	str	r0, [r4, #8]
   35fd2:	0020      	movs	r0, r4
   35fd4:	f000 f818 	bl	36008 <__sfp>
   35fd8:	2200      	movs	r2, #0
   35fda:	60e0      	str	r0, [r4, #12]
   35fdc:	2104      	movs	r1, #4
   35fde:	6860      	ldr	r0, [r4, #4]
   35fe0:	f7ff ffa4 	bl	35f2c <std.isra.0>
   35fe4:	2201      	movs	r2, #1
   35fe6:	2109      	movs	r1, #9
   35fe8:	68a0      	ldr	r0, [r4, #8]
   35fea:	f7ff ff9f 	bl	35f2c <std.isra.0>
   35fee:	2202      	movs	r2, #2
   35ff0:	2112      	movs	r1, #18
   35ff2:	68e0      	ldr	r0, [r4, #12]
   35ff4:	f7ff ff9a 	bl	35f2c <std.isra.0>
   35ff8:	2301      	movs	r3, #1
   35ffa:	61a3      	str	r3, [r4, #24]
   35ffc:	bd13      	pop	{r0, r1, r4, pc}
   35ffe:	46c0      	nop			; (mov r8, r8)
   36000:	0003b124 	.word	0x0003b124
   36004:	00035f1d 	.word	0x00035f1d

00036008 <__sfp>:
   36008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3600a:	4b1e      	ldr	r3, [pc, #120]	; (36084 <__sfp+0x7c>)
   3600c:	0007      	movs	r7, r0
   3600e:	681e      	ldr	r6, [r3, #0]
   36010:	69b3      	ldr	r3, [r6, #24]
   36012:	2b00      	cmp	r3, #0
   36014:	d102      	bne.n	3601c <__sfp+0x14>
   36016:	0030      	movs	r0, r6
   36018:	f7ff ffc2 	bl	35fa0 <__sinit>
   3601c:	3648      	adds	r6, #72	; 0x48
   3601e:	68b4      	ldr	r4, [r6, #8]
   36020:	6873      	ldr	r3, [r6, #4]
   36022:	3b01      	subs	r3, #1
   36024:	d504      	bpl.n	36030 <__sfp+0x28>
   36026:	6833      	ldr	r3, [r6, #0]
   36028:	2b00      	cmp	r3, #0
   3602a:	d007      	beq.n	3603c <__sfp+0x34>
   3602c:	6836      	ldr	r6, [r6, #0]
   3602e:	e7f6      	b.n	3601e <__sfp+0x16>
   36030:	220c      	movs	r2, #12
   36032:	5ea5      	ldrsh	r5, [r4, r2]
   36034:	2d00      	cmp	r5, #0
   36036:	d00d      	beq.n	36054 <__sfp+0x4c>
   36038:	3468      	adds	r4, #104	; 0x68
   3603a:	e7f2      	b.n	36022 <__sfp+0x1a>
   3603c:	2104      	movs	r1, #4
   3603e:	0038      	movs	r0, r7
   36040:	f7ff ff98 	bl	35f74 <__sfmoreglue>
   36044:	6030      	str	r0, [r6, #0]
   36046:	2800      	cmp	r0, #0
   36048:	d1f0      	bne.n	3602c <__sfp+0x24>
   3604a:	230c      	movs	r3, #12
   3604c:	0004      	movs	r4, r0
   3604e:	603b      	str	r3, [r7, #0]
   36050:	0020      	movs	r0, r4
   36052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36054:	2301      	movs	r3, #1
   36056:	0020      	movs	r0, r4
   36058:	425b      	negs	r3, r3
   3605a:	81e3      	strh	r3, [r4, #14]
   3605c:	3302      	adds	r3, #2
   3605e:	81a3      	strh	r3, [r4, #12]
   36060:	6665      	str	r5, [r4, #100]	; 0x64
   36062:	6025      	str	r5, [r4, #0]
   36064:	60a5      	str	r5, [r4, #8]
   36066:	6065      	str	r5, [r4, #4]
   36068:	6125      	str	r5, [r4, #16]
   3606a:	6165      	str	r5, [r4, #20]
   3606c:	61a5      	str	r5, [r4, #24]
   3606e:	2208      	movs	r2, #8
   36070:	0029      	movs	r1, r5
   36072:	305c      	adds	r0, #92	; 0x5c
   36074:	f7ff facb 	bl	3560e <memset>
   36078:	6365      	str	r5, [r4, #52]	; 0x34
   3607a:	63a5      	str	r5, [r4, #56]	; 0x38
   3607c:	64a5      	str	r5, [r4, #72]	; 0x48
   3607e:	64e5      	str	r5, [r4, #76]	; 0x4c
   36080:	e7e6      	b.n	36050 <__sfp+0x48>
   36082:	46c0      	nop			; (mov r8, r8)
   36084:	0003b124 	.word	0x0003b124

00036088 <_fwalk_reent>:
   36088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3608a:	0004      	movs	r4, r0
   3608c:	0007      	movs	r7, r0
   3608e:	2600      	movs	r6, #0
   36090:	9101      	str	r1, [sp, #4]
   36092:	3448      	adds	r4, #72	; 0x48
   36094:	2c00      	cmp	r4, #0
   36096:	d101      	bne.n	3609c <_fwalk_reent+0x14>
   36098:	0030      	movs	r0, r6
   3609a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3609c:	6863      	ldr	r3, [r4, #4]
   3609e:	68a5      	ldr	r5, [r4, #8]
   360a0:	9300      	str	r3, [sp, #0]
   360a2:	9b00      	ldr	r3, [sp, #0]
   360a4:	3b01      	subs	r3, #1
   360a6:	9300      	str	r3, [sp, #0]
   360a8:	d501      	bpl.n	360ae <_fwalk_reent+0x26>
   360aa:	6824      	ldr	r4, [r4, #0]
   360ac:	e7f2      	b.n	36094 <_fwalk_reent+0xc>
   360ae:	89ab      	ldrh	r3, [r5, #12]
   360b0:	2b01      	cmp	r3, #1
   360b2:	d908      	bls.n	360c6 <_fwalk_reent+0x3e>
   360b4:	220e      	movs	r2, #14
   360b6:	5eab      	ldrsh	r3, [r5, r2]
   360b8:	3301      	adds	r3, #1
   360ba:	d004      	beq.n	360c6 <_fwalk_reent+0x3e>
   360bc:	0029      	movs	r1, r5
   360be:	0038      	movs	r0, r7
   360c0:	9b01      	ldr	r3, [sp, #4]
   360c2:	4798      	blx	r3
   360c4:	4306      	orrs	r6, r0
   360c6:	3568      	adds	r5, #104	; 0x68
   360c8:	e7eb      	b.n	360a2 <_fwalk_reent+0x1a>

000360ca <__locale_ctype_ptr_l>:
   360ca:	30ec      	adds	r0, #236	; 0xec
   360cc:	6800      	ldr	r0, [r0, #0]
   360ce:	4770      	bx	lr

000360d0 <__locale_ctype_ptr>:
   360d0:	4b04      	ldr	r3, [pc, #16]	; (360e4 <__locale_ctype_ptr+0x14>)
   360d2:	681b      	ldr	r3, [r3, #0]
   360d4:	6a1b      	ldr	r3, [r3, #32]
   360d6:	2b00      	cmp	r3, #0
   360d8:	d100      	bne.n	360dc <__locale_ctype_ptr+0xc>
   360da:	4b03      	ldr	r3, [pc, #12]	; (360e8 <__locale_ctype_ptr+0x18>)
   360dc:	33ec      	adds	r3, #236	; 0xec
   360de:	6818      	ldr	r0, [r3, #0]
   360e0:	4770      	bx	lr
   360e2:	46c0      	nop			; (mov r8, r8)
   360e4:	20000130 	.word	0x20000130
   360e8:	20000194 	.word	0x20000194

000360ec <__swhatbuf_r>:
   360ec:	b570      	push	{r4, r5, r6, lr}
   360ee:	000e      	movs	r6, r1
   360f0:	001d      	movs	r5, r3
   360f2:	230e      	movs	r3, #14
   360f4:	5ec9      	ldrsh	r1, [r1, r3]
   360f6:	b090      	sub	sp, #64	; 0x40
   360f8:	0014      	movs	r4, r2
   360fa:	2900      	cmp	r1, #0
   360fc:	da07      	bge.n	3610e <__swhatbuf_r+0x22>
   360fe:	2300      	movs	r3, #0
   36100:	602b      	str	r3, [r5, #0]
   36102:	89b3      	ldrh	r3, [r6, #12]
   36104:	061b      	lsls	r3, r3, #24
   36106:	d411      	bmi.n	3612c <__swhatbuf_r+0x40>
   36108:	2380      	movs	r3, #128	; 0x80
   3610a:	00db      	lsls	r3, r3, #3
   3610c:	e00f      	b.n	3612e <__swhatbuf_r+0x42>
   3610e:	aa01      	add	r2, sp, #4
   36110:	f000 fbe6 	bl	368e0 <_fstat_r>
   36114:	2800      	cmp	r0, #0
   36116:	dbf2      	blt.n	360fe <__swhatbuf_r+0x12>
   36118:	22f0      	movs	r2, #240	; 0xf0
   3611a:	9b02      	ldr	r3, [sp, #8]
   3611c:	0212      	lsls	r2, r2, #8
   3611e:	4013      	ands	r3, r2
   36120:	4a05      	ldr	r2, [pc, #20]	; (36138 <__swhatbuf_r+0x4c>)
   36122:	189b      	adds	r3, r3, r2
   36124:	425a      	negs	r2, r3
   36126:	4153      	adcs	r3, r2
   36128:	602b      	str	r3, [r5, #0]
   3612a:	e7ed      	b.n	36108 <__swhatbuf_r+0x1c>
   3612c:	2340      	movs	r3, #64	; 0x40
   3612e:	2000      	movs	r0, #0
   36130:	6023      	str	r3, [r4, #0]
   36132:	b010      	add	sp, #64	; 0x40
   36134:	bd70      	pop	{r4, r5, r6, pc}
   36136:	46c0      	nop			; (mov r8, r8)
   36138:	ffffe000 	.word	0xffffe000

0003613c <__smakebuf_r>:
   3613c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3613e:	2602      	movs	r6, #2
   36140:	898b      	ldrh	r3, [r1, #12]
   36142:	0005      	movs	r5, r0
   36144:	000c      	movs	r4, r1
   36146:	4233      	tst	r3, r6
   36148:	d006      	beq.n	36158 <__smakebuf_r+0x1c>
   3614a:	0023      	movs	r3, r4
   3614c:	3347      	adds	r3, #71	; 0x47
   3614e:	6023      	str	r3, [r4, #0]
   36150:	6123      	str	r3, [r4, #16]
   36152:	2301      	movs	r3, #1
   36154:	6163      	str	r3, [r4, #20]
   36156:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   36158:	ab01      	add	r3, sp, #4
   3615a:	466a      	mov	r2, sp
   3615c:	f7ff ffc6 	bl	360ec <__swhatbuf_r>
   36160:	9900      	ldr	r1, [sp, #0]
   36162:	0007      	movs	r7, r0
   36164:	0028      	movs	r0, r5
   36166:	f7ff faa5 	bl	356b4 <_malloc_r>
   3616a:	2800      	cmp	r0, #0
   3616c:	d108      	bne.n	36180 <__smakebuf_r+0x44>
   3616e:	220c      	movs	r2, #12
   36170:	5ea3      	ldrsh	r3, [r4, r2]
   36172:	059a      	lsls	r2, r3, #22
   36174:	d4ef      	bmi.n	36156 <__smakebuf_r+0x1a>
   36176:	2203      	movs	r2, #3
   36178:	4393      	bics	r3, r2
   3617a:	431e      	orrs	r6, r3
   3617c:	81a6      	strh	r6, [r4, #12]
   3617e:	e7e4      	b.n	3614a <__smakebuf_r+0xe>
   36180:	4b0f      	ldr	r3, [pc, #60]	; (361c0 <__smakebuf_r+0x84>)
   36182:	62ab      	str	r3, [r5, #40]	; 0x28
   36184:	2380      	movs	r3, #128	; 0x80
   36186:	89a2      	ldrh	r2, [r4, #12]
   36188:	6020      	str	r0, [r4, #0]
   3618a:	4313      	orrs	r3, r2
   3618c:	81a3      	strh	r3, [r4, #12]
   3618e:	9b00      	ldr	r3, [sp, #0]
   36190:	6120      	str	r0, [r4, #16]
   36192:	6163      	str	r3, [r4, #20]
   36194:	9b01      	ldr	r3, [sp, #4]
   36196:	2b00      	cmp	r3, #0
   36198:	d00d      	beq.n	361b6 <__smakebuf_r+0x7a>
   3619a:	230e      	movs	r3, #14
   3619c:	5ee1      	ldrsh	r1, [r4, r3]
   3619e:	0028      	movs	r0, r5
   361a0:	f000 fbb0 	bl	36904 <_isatty_r>
   361a4:	2800      	cmp	r0, #0
   361a6:	d006      	beq.n	361b6 <__smakebuf_r+0x7a>
   361a8:	2203      	movs	r2, #3
   361aa:	89a3      	ldrh	r3, [r4, #12]
   361ac:	4393      	bics	r3, r2
   361ae:	001a      	movs	r2, r3
   361b0:	2301      	movs	r3, #1
   361b2:	4313      	orrs	r3, r2
   361b4:	81a3      	strh	r3, [r4, #12]
   361b6:	89a0      	ldrh	r0, [r4, #12]
   361b8:	4338      	orrs	r0, r7
   361ba:	81a0      	strh	r0, [r4, #12]
   361bc:	e7cb      	b.n	36156 <__smakebuf_r+0x1a>
   361be:	46c0      	nop			; (mov r8, r8)
   361c0:	00035f1d 	.word	0x00035f1d

000361c4 <__ascii_mbtowc>:
   361c4:	b082      	sub	sp, #8
   361c6:	2900      	cmp	r1, #0
   361c8:	d100      	bne.n	361cc <__ascii_mbtowc+0x8>
   361ca:	a901      	add	r1, sp, #4
   361cc:	1e10      	subs	r0, r2, #0
   361ce:	d006      	beq.n	361de <__ascii_mbtowc+0x1a>
   361d0:	2b00      	cmp	r3, #0
   361d2:	d006      	beq.n	361e2 <__ascii_mbtowc+0x1e>
   361d4:	7813      	ldrb	r3, [r2, #0]
   361d6:	600b      	str	r3, [r1, #0]
   361d8:	7810      	ldrb	r0, [r2, #0]
   361da:	1e43      	subs	r3, r0, #1
   361dc:	4198      	sbcs	r0, r3
   361de:	b002      	add	sp, #8
   361e0:	4770      	bx	lr
   361e2:	2002      	movs	r0, #2
   361e4:	4240      	negs	r0, r0
   361e6:	e7fa      	b.n	361de <__ascii_mbtowc+0x1a>

000361e8 <__malloc_lock>:
   361e8:	4770      	bx	lr

000361ea <__malloc_unlock>:
   361ea:	4770      	bx	lr

000361ec <__ssputs_r>:
   361ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   361ee:	688e      	ldr	r6, [r1, #8]
   361f0:	b085      	sub	sp, #20
   361f2:	0007      	movs	r7, r0
   361f4:	000c      	movs	r4, r1
   361f6:	9203      	str	r2, [sp, #12]
   361f8:	9301      	str	r3, [sp, #4]
   361fa:	429e      	cmp	r6, r3
   361fc:	d839      	bhi.n	36272 <__ssputs_r+0x86>
   361fe:	2390      	movs	r3, #144	; 0x90
   36200:	898a      	ldrh	r2, [r1, #12]
   36202:	00db      	lsls	r3, r3, #3
   36204:	421a      	tst	r2, r3
   36206:	d034      	beq.n	36272 <__ssputs_r+0x86>
   36208:	2503      	movs	r5, #3
   3620a:	6909      	ldr	r1, [r1, #16]
   3620c:	6823      	ldr	r3, [r4, #0]
   3620e:	1a5b      	subs	r3, r3, r1
   36210:	9302      	str	r3, [sp, #8]
   36212:	6963      	ldr	r3, [r4, #20]
   36214:	9802      	ldr	r0, [sp, #8]
   36216:	435d      	muls	r5, r3
   36218:	0feb      	lsrs	r3, r5, #31
   3621a:	195d      	adds	r5, r3, r5
   3621c:	9b01      	ldr	r3, [sp, #4]
   3621e:	106d      	asrs	r5, r5, #1
   36220:	3301      	adds	r3, #1
   36222:	181b      	adds	r3, r3, r0
   36224:	42ab      	cmp	r3, r5
   36226:	d900      	bls.n	3622a <__ssputs_r+0x3e>
   36228:	001d      	movs	r5, r3
   3622a:	0553      	lsls	r3, r2, #21
   3622c:	d532      	bpl.n	36294 <__ssputs_r+0xa8>
   3622e:	0029      	movs	r1, r5
   36230:	0038      	movs	r0, r7
   36232:	f7ff fa3f 	bl	356b4 <_malloc_r>
   36236:	1e06      	subs	r6, r0, #0
   36238:	d109      	bne.n	3624e <__ssputs_r+0x62>
   3623a:	230c      	movs	r3, #12
   3623c:	603b      	str	r3, [r7, #0]
   3623e:	2340      	movs	r3, #64	; 0x40
   36240:	2001      	movs	r0, #1
   36242:	89a2      	ldrh	r2, [r4, #12]
   36244:	4240      	negs	r0, r0
   36246:	4313      	orrs	r3, r2
   36248:	81a3      	strh	r3, [r4, #12]
   3624a:	b005      	add	sp, #20
   3624c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3624e:	9a02      	ldr	r2, [sp, #8]
   36250:	6921      	ldr	r1, [r4, #16]
   36252:	f7ff f9c1 	bl	355d8 <memcpy>
   36256:	89a3      	ldrh	r3, [r4, #12]
   36258:	4a14      	ldr	r2, [pc, #80]	; (362ac <__ssputs_r+0xc0>)
   3625a:	401a      	ands	r2, r3
   3625c:	2380      	movs	r3, #128	; 0x80
   3625e:	4313      	orrs	r3, r2
   36260:	81a3      	strh	r3, [r4, #12]
   36262:	9b02      	ldr	r3, [sp, #8]
   36264:	6126      	str	r6, [r4, #16]
   36266:	18f6      	adds	r6, r6, r3
   36268:	6026      	str	r6, [r4, #0]
   3626a:	6165      	str	r5, [r4, #20]
   3626c:	9e01      	ldr	r6, [sp, #4]
   3626e:	1aed      	subs	r5, r5, r3
   36270:	60a5      	str	r5, [r4, #8]
   36272:	9b01      	ldr	r3, [sp, #4]
   36274:	42b3      	cmp	r3, r6
   36276:	d200      	bcs.n	3627a <__ssputs_r+0x8e>
   36278:	001e      	movs	r6, r3
   3627a:	0032      	movs	r2, r6
   3627c:	9903      	ldr	r1, [sp, #12]
   3627e:	6820      	ldr	r0, [r4, #0]
   36280:	f7ff f9b3 	bl	355ea <memmove>
   36284:	68a3      	ldr	r3, [r4, #8]
   36286:	2000      	movs	r0, #0
   36288:	1b9b      	subs	r3, r3, r6
   3628a:	60a3      	str	r3, [r4, #8]
   3628c:	6823      	ldr	r3, [r4, #0]
   3628e:	199e      	adds	r6, r3, r6
   36290:	6026      	str	r6, [r4, #0]
   36292:	e7da      	b.n	3624a <__ssputs_r+0x5e>
   36294:	002a      	movs	r2, r5
   36296:	0038      	movs	r0, r7
   36298:	f000 fb65 	bl	36966 <_realloc_r>
   3629c:	1e06      	subs	r6, r0, #0
   3629e:	d1e0      	bne.n	36262 <__ssputs_r+0x76>
   362a0:	6921      	ldr	r1, [r4, #16]
   362a2:	0038      	movs	r0, r7
   362a4:	f7ff f9bc 	bl	35620 <_free_r>
   362a8:	e7c7      	b.n	3623a <__ssputs_r+0x4e>
   362aa:	46c0      	nop			; (mov r8, r8)
   362ac:	fffffb7f 	.word	0xfffffb7f

000362b0 <_svfiprintf_r>:
   362b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   362b2:	b09f      	sub	sp, #124	; 0x7c
   362b4:	9002      	str	r0, [sp, #8]
   362b6:	9305      	str	r3, [sp, #20]
   362b8:	898b      	ldrh	r3, [r1, #12]
   362ba:	000f      	movs	r7, r1
   362bc:	0016      	movs	r6, r2
   362be:	061b      	lsls	r3, r3, #24
   362c0:	d511      	bpl.n	362e6 <_svfiprintf_r+0x36>
   362c2:	690b      	ldr	r3, [r1, #16]
   362c4:	2b00      	cmp	r3, #0
   362c6:	d10e      	bne.n	362e6 <_svfiprintf_r+0x36>
   362c8:	2140      	movs	r1, #64	; 0x40
   362ca:	f7ff f9f3 	bl	356b4 <_malloc_r>
   362ce:	6038      	str	r0, [r7, #0]
   362d0:	6138      	str	r0, [r7, #16]
   362d2:	2800      	cmp	r0, #0
   362d4:	d105      	bne.n	362e2 <_svfiprintf_r+0x32>
   362d6:	230c      	movs	r3, #12
   362d8:	9a02      	ldr	r2, [sp, #8]
   362da:	3801      	subs	r0, #1
   362dc:	6013      	str	r3, [r2, #0]
   362de:	b01f      	add	sp, #124	; 0x7c
   362e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   362e2:	2340      	movs	r3, #64	; 0x40
   362e4:	617b      	str	r3, [r7, #20]
   362e6:	2300      	movs	r3, #0
   362e8:	ad06      	add	r5, sp, #24
   362ea:	616b      	str	r3, [r5, #20]
   362ec:	3320      	adds	r3, #32
   362ee:	766b      	strb	r3, [r5, #25]
   362f0:	3310      	adds	r3, #16
   362f2:	76ab      	strb	r3, [r5, #26]
   362f4:	0034      	movs	r4, r6
   362f6:	7823      	ldrb	r3, [r4, #0]
   362f8:	2b00      	cmp	r3, #0
   362fa:	d147      	bne.n	3638c <_svfiprintf_r+0xdc>
   362fc:	1ba3      	subs	r3, r4, r6
   362fe:	9304      	str	r3, [sp, #16]
   36300:	d00d      	beq.n	3631e <_svfiprintf_r+0x6e>
   36302:	1ba3      	subs	r3, r4, r6
   36304:	0032      	movs	r2, r6
   36306:	0039      	movs	r1, r7
   36308:	9802      	ldr	r0, [sp, #8]
   3630a:	f7ff ff6f 	bl	361ec <__ssputs_r>
   3630e:	1c43      	adds	r3, r0, #1
   36310:	d100      	bne.n	36314 <_svfiprintf_r+0x64>
   36312:	e0b5      	b.n	36480 <_svfiprintf_r+0x1d0>
   36314:	696a      	ldr	r2, [r5, #20]
   36316:	9b04      	ldr	r3, [sp, #16]
   36318:	4694      	mov	ip, r2
   3631a:	4463      	add	r3, ip
   3631c:	616b      	str	r3, [r5, #20]
   3631e:	7823      	ldrb	r3, [r4, #0]
   36320:	2b00      	cmp	r3, #0
   36322:	d100      	bne.n	36326 <_svfiprintf_r+0x76>
   36324:	e0ac      	b.n	36480 <_svfiprintf_r+0x1d0>
   36326:	2201      	movs	r2, #1
   36328:	2300      	movs	r3, #0
   3632a:	4252      	negs	r2, r2
   3632c:	606a      	str	r2, [r5, #4]
   3632e:	a902      	add	r1, sp, #8
   36330:	3254      	adds	r2, #84	; 0x54
   36332:	1852      	adds	r2, r2, r1
   36334:	3401      	adds	r4, #1
   36336:	602b      	str	r3, [r5, #0]
   36338:	60eb      	str	r3, [r5, #12]
   3633a:	60ab      	str	r3, [r5, #8]
   3633c:	7013      	strb	r3, [r2, #0]
   3633e:	65ab      	str	r3, [r5, #88]	; 0x58
   36340:	4e58      	ldr	r6, [pc, #352]	; (364a4 <_svfiprintf_r+0x1f4>)
   36342:	2205      	movs	r2, #5
   36344:	7821      	ldrb	r1, [r4, #0]
   36346:	0030      	movs	r0, r6
   36348:	f000 fb02 	bl	36950 <memchr>
   3634c:	1c62      	adds	r2, r4, #1
   3634e:	2800      	cmp	r0, #0
   36350:	d120      	bne.n	36394 <_svfiprintf_r+0xe4>
   36352:	6829      	ldr	r1, [r5, #0]
   36354:	06cb      	lsls	r3, r1, #27
   36356:	d504      	bpl.n	36362 <_svfiprintf_r+0xb2>
   36358:	2353      	movs	r3, #83	; 0x53
   3635a:	ae02      	add	r6, sp, #8
   3635c:	3020      	adds	r0, #32
   3635e:	199b      	adds	r3, r3, r6
   36360:	7018      	strb	r0, [r3, #0]
   36362:	070b      	lsls	r3, r1, #28
   36364:	d504      	bpl.n	36370 <_svfiprintf_r+0xc0>
   36366:	2353      	movs	r3, #83	; 0x53
   36368:	202b      	movs	r0, #43	; 0x2b
   3636a:	ae02      	add	r6, sp, #8
   3636c:	199b      	adds	r3, r3, r6
   3636e:	7018      	strb	r0, [r3, #0]
   36370:	7823      	ldrb	r3, [r4, #0]
   36372:	2b2a      	cmp	r3, #42	; 0x2a
   36374:	d016      	beq.n	363a4 <_svfiprintf_r+0xf4>
   36376:	2000      	movs	r0, #0
   36378:	210a      	movs	r1, #10
   3637a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3637c:	7822      	ldrb	r2, [r4, #0]
   3637e:	3a30      	subs	r2, #48	; 0x30
   36380:	2a09      	cmp	r2, #9
   36382:	d955      	bls.n	36430 <_svfiprintf_r+0x180>
   36384:	2800      	cmp	r0, #0
   36386:	d015      	beq.n	363b4 <_svfiprintf_r+0x104>
   36388:	9309      	str	r3, [sp, #36]	; 0x24
   3638a:	e013      	b.n	363b4 <_svfiprintf_r+0x104>
   3638c:	2b25      	cmp	r3, #37	; 0x25
   3638e:	d0b5      	beq.n	362fc <_svfiprintf_r+0x4c>
   36390:	3401      	adds	r4, #1
   36392:	e7b0      	b.n	362f6 <_svfiprintf_r+0x46>
   36394:	2301      	movs	r3, #1
   36396:	1b80      	subs	r0, r0, r6
   36398:	4083      	lsls	r3, r0
   3639a:	6829      	ldr	r1, [r5, #0]
   3639c:	0014      	movs	r4, r2
   3639e:	430b      	orrs	r3, r1
   363a0:	602b      	str	r3, [r5, #0]
   363a2:	e7cd      	b.n	36340 <_svfiprintf_r+0x90>
   363a4:	9b05      	ldr	r3, [sp, #20]
   363a6:	1d18      	adds	r0, r3, #4
   363a8:	681b      	ldr	r3, [r3, #0]
   363aa:	9005      	str	r0, [sp, #20]
   363ac:	2b00      	cmp	r3, #0
   363ae:	db39      	blt.n	36424 <_svfiprintf_r+0x174>
   363b0:	9309      	str	r3, [sp, #36]	; 0x24
   363b2:	0014      	movs	r4, r2
   363b4:	7823      	ldrb	r3, [r4, #0]
   363b6:	2b2e      	cmp	r3, #46	; 0x2e
   363b8:	d10b      	bne.n	363d2 <_svfiprintf_r+0x122>
   363ba:	7863      	ldrb	r3, [r4, #1]
   363bc:	1c62      	adds	r2, r4, #1
   363be:	2b2a      	cmp	r3, #42	; 0x2a
   363c0:	d13e      	bne.n	36440 <_svfiprintf_r+0x190>
   363c2:	9b05      	ldr	r3, [sp, #20]
   363c4:	3402      	adds	r4, #2
   363c6:	1d1a      	adds	r2, r3, #4
   363c8:	681b      	ldr	r3, [r3, #0]
   363ca:	9205      	str	r2, [sp, #20]
   363cc:	2b00      	cmp	r3, #0
   363ce:	db34      	blt.n	3643a <_svfiprintf_r+0x18a>
   363d0:	9307      	str	r3, [sp, #28]
   363d2:	4e35      	ldr	r6, [pc, #212]	; (364a8 <_svfiprintf_r+0x1f8>)
   363d4:	7821      	ldrb	r1, [r4, #0]
   363d6:	2203      	movs	r2, #3
   363d8:	0030      	movs	r0, r6
   363da:	f000 fab9 	bl	36950 <memchr>
   363de:	2800      	cmp	r0, #0
   363e0:	d006      	beq.n	363f0 <_svfiprintf_r+0x140>
   363e2:	2340      	movs	r3, #64	; 0x40
   363e4:	1b80      	subs	r0, r0, r6
   363e6:	4083      	lsls	r3, r0
   363e8:	682a      	ldr	r2, [r5, #0]
   363ea:	3401      	adds	r4, #1
   363ec:	4313      	orrs	r3, r2
   363ee:	602b      	str	r3, [r5, #0]
   363f0:	7821      	ldrb	r1, [r4, #0]
   363f2:	2206      	movs	r2, #6
   363f4:	482d      	ldr	r0, [pc, #180]	; (364ac <_svfiprintf_r+0x1fc>)
   363f6:	1c66      	adds	r6, r4, #1
   363f8:	7629      	strb	r1, [r5, #24]
   363fa:	f000 faa9 	bl	36950 <memchr>
   363fe:	2800      	cmp	r0, #0
   36400:	d046      	beq.n	36490 <_svfiprintf_r+0x1e0>
   36402:	4b2b      	ldr	r3, [pc, #172]	; (364b0 <_svfiprintf_r+0x200>)
   36404:	2b00      	cmp	r3, #0
   36406:	d12f      	bne.n	36468 <_svfiprintf_r+0x1b8>
   36408:	6829      	ldr	r1, [r5, #0]
   3640a:	9b05      	ldr	r3, [sp, #20]
   3640c:	2207      	movs	r2, #7
   3640e:	05c9      	lsls	r1, r1, #23
   36410:	d528      	bpl.n	36464 <_svfiprintf_r+0x1b4>
   36412:	189b      	adds	r3, r3, r2
   36414:	4393      	bics	r3, r2
   36416:	3308      	adds	r3, #8
   36418:	9305      	str	r3, [sp, #20]
   3641a:	696b      	ldr	r3, [r5, #20]
   3641c:	9a03      	ldr	r2, [sp, #12]
   3641e:	189b      	adds	r3, r3, r2
   36420:	616b      	str	r3, [r5, #20]
   36422:	e767      	b.n	362f4 <_svfiprintf_r+0x44>
   36424:	425b      	negs	r3, r3
   36426:	60eb      	str	r3, [r5, #12]
   36428:	2302      	movs	r3, #2
   3642a:	430b      	orrs	r3, r1
   3642c:	602b      	str	r3, [r5, #0]
   3642e:	e7c0      	b.n	363b2 <_svfiprintf_r+0x102>
   36430:	434b      	muls	r3, r1
   36432:	3401      	adds	r4, #1
   36434:	189b      	adds	r3, r3, r2
   36436:	2001      	movs	r0, #1
   36438:	e7a0      	b.n	3637c <_svfiprintf_r+0xcc>
   3643a:	2301      	movs	r3, #1
   3643c:	425b      	negs	r3, r3
   3643e:	e7c7      	b.n	363d0 <_svfiprintf_r+0x120>
   36440:	2300      	movs	r3, #0
   36442:	0014      	movs	r4, r2
   36444:	200a      	movs	r0, #10
   36446:	001a      	movs	r2, r3
   36448:	606b      	str	r3, [r5, #4]
   3644a:	7821      	ldrb	r1, [r4, #0]
   3644c:	3930      	subs	r1, #48	; 0x30
   3644e:	2909      	cmp	r1, #9
   36450:	d903      	bls.n	3645a <_svfiprintf_r+0x1aa>
   36452:	2b00      	cmp	r3, #0
   36454:	d0bd      	beq.n	363d2 <_svfiprintf_r+0x122>
   36456:	9207      	str	r2, [sp, #28]
   36458:	e7bb      	b.n	363d2 <_svfiprintf_r+0x122>
   3645a:	4342      	muls	r2, r0
   3645c:	3401      	adds	r4, #1
   3645e:	1852      	adds	r2, r2, r1
   36460:	2301      	movs	r3, #1
   36462:	e7f2      	b.n	3644a <_svfiprintf_r+0x19a>
   36464:	3307      	adds	r3, #7
   36466:	e7d5      	b.n	36414 <_svfiprintf_r+0x164>
   36468:	ab05      	add	r3, sp, #20
   3646a:	9300      	str	r3, [sp, #0]
   3646c:	003a      	movs	r2, r7
   3646e:	4b11      	ldr	r3, [pc, #68]	; (364b4 <_svfiprintf_r+0x204>)
   36470:	0029      	movs	r1, r5
   36472:	9802      	ldr	r0, [sp, #8]
   36474:	e000      	b.n	36478 <_svfiprintf_r+0x1c8>
   36476:	bf00      	nop
   36478:	9003      	str	r0, [sp, #12]
   3647a:	9b03      	ldr	r3, [sp, #12]
   3647c:	3301      	adds	r3, #1
   3647e:	d1cc      	bne.n	3641a <_svfiprintf_r+0x16a>
   36480:	89bb      	ldrh	r3, [r7, #12]
   36482:	980b      	ldr	r0, [sp, #44]	; 0x2c
   36484:	065b      	lsls	r3, r3, #25
   36486:	d400      	bmi.n	3648a <_svfiprintf_r+0x1da>
   36488:	e729      	b.n	362de <_svfiprintf_r+0x2e>
   3648a:	2001      	movs	r0, #1
   3648c:	4240      	negs	r0, r0
   3648e:	e726      	b.n	362de <_svfiprintf_r+0x2e>
   36490:	ab05      	add	r3, sp, #20
   36492:	9300      	str	r3, [sp, #0]
   36494:	003a      	movs	r2, r7
   36496:	4b07      	ldr	r3, [pc, #28]	; (364b4 <_svfiprintf_r+0x204>)
   36498:	0029      	movs	r1, r5
   3649a:	9802      	ldr	r0, [sp, #8]
   3649c:	f000 f87a 	bl	36594 <_printf_i>
   364a0:	e7ea      	b.n	36478 <_svfiprintf_r+0x1c8>
   364a2:	46c0      	nop			; (mov r8, r8)
   364a4:	0003b192 	.word	0x0003b192
   364a8:	0003b198 	.word	0x0003b198
   364ac:	0003b19c 	.word	0x0003b19c
   364b0:	00000000 	.word	0x00000000
   364b4:	000361ed 	.word	0x000361ed

000364b8 <_printf_common>:
   364b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   364ba:	0015      	movs	r5, r2
   364bc:	9301      	str	r3, [sp, #4]
   364be:	688a      	ldr	r2, [r1, #8]
   364c0:	690b      	ldr	r3, [r1, #16]
   364c2:	9000      	str	r0, [sp, #0]
   364c4:	000c      	movs	r4, r1
   364c6:	4293      	cmp	r3, r2
   364c8:	da00      	bge.n	364cc <_printf_common+0x14>
   364ca:	0013      	movs	r3, r2
   364cc:	0022      	movs	r2, r4
   364ce:	602b      	str	r3, [r5, #0]
   364d0:	3243      	adds	r2, #67	; 0x43
   364d2:	7812      	ldrb	r2, [r2, #0]
   364d4:	2a00      	cmp	r2, #0
   364d6:	d001      	beq.n	364dc <_printf_common+0x24>
   364d8:	3301      	adds	r3, #1
   364da:	602b      	str	r3, [r5, #0]
   364dc:	6823      	ldr	r3, [r4, #0]
   364de:	069b      	lsls	r3, r3, #26
   364e0:	d502      	bpl.n	364e8 <_printf_common+0x30>
   364e2:	682b      	ldr	r3, [r5, #0]
   364e4:	3302      	adds	r3, #2
   364e6:	602b      	str	r3, [r5, #0]
   364e8:	2706      	movs	r7, #6
   364ea:	6823      	ldr	r3, [r4, #0]
   364ec:	401f      	ands	r7, r3
   364ee:	d027      	beq.n	36540 <_printf_common+0x88>
   364f0:	0023      	movs	r3, r4
   364f2:	3343      	adds	r3, #67	; 0x43
   364f4:	781b      	ldrb	r3, [r3, #0]
   364f6:	1e5a      	subs	r2, r3, #1
   364f8:	4193      	sbcs	r3, r2
   364fa:	6822      	ldr	r2, [r4, #0]
   364fc:	0692      	lsls	r2, r2, #26
   364fe:	d430      	bmi.n	36562 <_printf_common+0xaa>
   36500:	0022      	movs	r2, r4
   36502:	9901      	ldr	r1, [sp, #4]
   36504:	3243      	adds	r2, #67	; 0x43
   36506:	9800      	ldr	r0, [sp, #0]
   36508:	9e08      	ldr	r6, [sp, #32]
   3650a:	47b0      	blx	r6
   3650c:	1c43      	adds	r3, r0, #1
   3650e:	d025      	beq.n	3655c <_printf_common+0xa4>
   36510:	2306      	movs	r3, #6
   36512:	6820      	ldr	r0, [r4, #0]
   36514:	682a      	ldr	r2, [r5, #0]
   36516:	68e1      	ldr	r1, [r4, #12]
   36518:	4003      	ands	r3, r0
   3651a:	2500      	movs	r5, #0
   3651c:	2b04      	cmp	r3, #4
   3651e:	d103      	bne.n	36528 <_printf_common+0x70>
   36520:	1a8d      	subs	r5, r1, r2
   36522:	43eb      	mvns	r3, r5
   36524:	17db      	asrs	r3, r3, #31
   36526:	401d      	ands	r5, r3
   36528:	68a3      	ldr	r3, [r4, #8]
   3652a:	6922      	ldr	r2, [r4, #16]
   3652c:	4293      	cmp	r3, r2
   3652e:	dd01      	ble.n	36534 <_printf_common+0x7c>
   36530:	1a9b      	subs	r3, r3, r2
   36532:	18ed      	adds	r5, r5, r3
   36534:	2700      	movs	r7, #0
   36536:	42bd      	cmp	r5, r7
   36538:	d120      	bne.n	3657c <_printf_common+0xc4>
   3653a:	2000      	movs	r0, #0
   3653c:	e010      	b.n	36560 <_printf_common+0xa8>
   3653e:	3701      	adds	r7, #1
   36540:	68e3      	ldr	r3, [r4, #12]
   36542:	682a      	ldr	r2, [r5, #0]
   36544:	1a9b      	subs	r3, r3, r2
   36546:	429f      	cmp	r7, r3
   36548:	dad2      	bge.n	364f0 <_printf_common+0x38>
   3654a:	0022      	movs	r2, r4
   3654c:	2301      	movs	r3, #1
   3654e:	3219      	adds	r2, #25
   36550:	9901      	ldr	r1, [sp, #4]
   36552:	9800      	ldr	r0, [sp, #0]
   36554:	9e08      	ldr	r6, [sp, #32]
   36556:	47b0      	blx	r6
   36558:	1c43      	adds	r3, r0, #1
   3655a:	d1f0      	bne.n	3653e <_printf_common+0x86>
   3655c:	2001      	movs	r0, #1
   3655e:	4240      	negs	r0, r0
   36560:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   36562:	2030      	movs	r0, #48	; 0x30
   36564:	18e1      	adds	r1, r4, r3
   36566:	3143      	adds	r1, #67	; 0x43
   36568:	7008      	strb	r0, [r1, #0]
   3656a:	0021      	movs	r1, r4
   3656c:	1c5a      	adds	r2, r3, #1
   3656e:	3145      	adds	r1, #69	; 0x45
   36570:	7809      	ldrb	r1, [r1, #0]
   36572:	18a2      	adds	r2, r4, r2
   36574:	3243      	adds	r2, #67	; 0x43
   36576:	3302      	adds	r3, #2
   36578:	7011      	strb	r1, [r2, #0]
   3657a:	e7c1      	b.n	36500 <_printf_common+0x48>
   3657c:	0022      	movs	r2, r4
   3657e:	2301      	movs	r3, #1
   36580:	321a      	adds	r2, #26
   36582:	9901      	ldr	r1, [sp, #4]
   36584:	9800      	ldr	r0, [sp, #0]
   36586:	9e08      	ldr	r6, [sp, #32]
   36588:	47b0      	blx	r6
   3658a:	1c43      	adds	r3, r0, #1
   3658c:	d0e6      	beq.n	3655c <_printf_common+0xa4>
   3658e:	3701      	adds	r7, #1
   36590:	e7d1      	b.n	36536 <_printf_common+0x7e>
	...

00036594 <_printf_i>:
   36594:	b5f0      	push	{r4, r5, r6, r7, lr}
   36596:	b08b      	sub	sp, #44	; 0x2c
   36598:	9206      	str	r2, [sp, #24]
   3659a:	000a      	movs	r2, r1
   3659c:	3243      	adds	r2, #67	; 0x43
   3659e:	9307      	str	r3, [sp, #28]
   365a0:	9005      	str	r0, [sp, #20]
   365a2:	9204      	str	r2, [sp, #16]
   365a4:	7e0a      	ldrb	r2, [r1, #24]
   365a6:	000c      	movs	r4, r1
   365a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   365aa:	2a6e      	cmp	r2, #110	; 0x6e
   365ac:	d100      	bne.n	365b0 <_printf_i+0x1c>
   365ae:	e08f      	b.n	366d0 <_printf_i+0x13c>
   365b0:	d817      	bhi.n	365e2 <_printf_i+0x4e>
   365b2:	2a63      	cmp	r2, #99	; 0x63
   365b4:	d02c      	beq.n	36610 <_printf_i+0x7c>
   365b6:	d808      	bhi.n	365ca <_printf_i+0x36>
   365b8:	2a00      	cmp	r2, #0
   365ba:	d100      	bne.n	365be <_printf_i+0x2a>
   365bc:	e099      	b.n	366f2 <_printf_i+0x15e>
   365be:	2a58      	cmp	r2, #88	; 0x58
   365c0:	d054      	beq.n	3666c <_printf_i+0xd8>
   365c2:	0026      	movs	r6, r4
   365c4:	3642      	adds	r6, #66	; 0x42
   365c6:	7032      	strb	r2, [r6, #0]
   365c8:	e029      	b.n	3661e <_printf_i+0x8a>
   365ca:	2a64      	cmp	r2, #100	; 0x64
   365cc:	d001      	beq.n	365d2 <_printf_i+0x3e>
   365ce:	2a69      	cmp	r2, #105	; 0x69
   365d0:	d1f7      	bne.n	365c2 <_printf_i+0x2e>
   365d2:	6821      	ldr	r1, [r4, #0]
   365d4:	681a      	ldr	r2, [r3, #0]
   365d6:	0608      	lsls	r0, r1, #24
   365d8:	d523      	bpl.n	36622 <_printf_i+0x8e>
   365da:	1d11      	adds	r1, r2, #4
   365dc:	6019      	str	r1, [r3, #0]
   365de:	6815      	ldr	r5, [r2, #0]
   365e0:	e025      	b.n	3662e <_printf_i+0x9a>
   365e2:	2a73      	cmp	r2, #115	; 0x73
   365e4:	d100      	bne.n	365e8 <_printf_i+0x54>
   365e6:	e088      	b.n	366fa <_printf_i+0x166>
   365e8:	d808      	bhi.n	365fc <_printf_i+0x68>
   365ea:	2a6f      	cmp	r2, #111	; 0x6f
   365ec:	d029      	beq.n	36642 <_printf_i+0xae>
   365ee:	2a70      	cmp	r2, #112	; 0x70
   365f0:	d1e7      	bne.n	365c2 <_printf_i+0x2e>
   365f2:	2220      	movs	r2, #32
   365f4:	6809      	ldr	r1, [r1, #0]
   365f6:	430a      	orrs	r2, r1
   365f8:	6022      	str	r2, [r4, #0]
   365fa:	e003      	b.n	36604 <_printf_i+0x70>
   365fc:	2a75      	cmp	r2, #117	; 0x75
   365fe:	d020      	beq.n	36642 <_printf_i+0xae>
   36600:	2a78      	cmp	r2, #120	; 0x78
   36602:	d1de      	bne.n	365c2 <_printf_i+0x2e>
   36604:	0022      	movs	r2, r4
   36606:	2178      	movs	r1, #120	; 0x78
   36608:	3245      	adds	r2, #69	; 0x45
   3660a:	7011      	strb	r1, [r2, #0]
   3660c:	4a6c      	ldr	r2, [pc, #432]	; (367c0 <_printf_i+0x22c>)
   3660e:	e030      	b.n	36672 <_printf_i+0xde>
   36610:	000e      	movs	r6, r1
   36612:	681a      	ldr	r2, [r3, #0]
   36614:	3642      	adds	r6, #66	; 0x42
   36616:	1d11      	adds	r1, r2, #4
   36618:	6019      	str	r1, [r3, #0]
   3661a:	6813      	ldr	r3, [r2, #0]
   3661c:	7033      	strb	r3, [r6, #0]
   3661e:	2301      	movs	r3, #1
   36620:	e079      	b.n	36716 <_printf_i+0x182>
   36622:	0649      	lsls	r1, r1, #25
   36624:	d5d9      	bpl.n	365da <_printf_i+0x46>
   36626:	1d11      	adds	r1, r2, #4
   36628:	6019      	str	r1, [r3, #0]
   3662a:	2300      	movs	r3, #0
   3662c:	5ed5      	ldrsh	r5, [r2, r3]
   3662e:	2d00      	cmp	r5, #0
   36630:	da03      	bge.n	3663a <_printf_i+0xa6>
   36632:	232d      	movs	r3, #45	; 0x2d
   36634:	9a04      	ldr	r2, [sp, #16]
   36636:	426d      	negs	r5, r5
   36638:	7013      	strb	r3, [r2, #0]
   3663a:	4b62      	ldr	r3, [pc, #392]	; (367c4 <_printf_i+0x230>)
   3663c:	270a      	movs	r7, #10
   3663e:	9303      	str	r3, [sp, #12]
   36640:	e02f      	b.n	366a2 <_printf_i+0x10e>
   36642:	6820      	ldr	r0, [r4, #0]
   36644:	6819      	ldr	r1, [r3, #0]
   36646:	0605      	lsls	r5, r0, #24
   36648:	d503      	bpl.n	36652 <_printf_i+0xbe>
   3664a:	1d08      	adds	r0, r1, #4
   3664c:	6018      	str	r0, [r3, #0]
   3664e:	680d      	ldr	r5, [r1, #0]
   36650:	e005      	b.n	3665e <_printf_i+0xca>
   36652:	0640      	lsls	r0, r0, #25
   36654:	d5f9      	bpl.n	3664a <_printf_i+0xb6>
   36656:	680d      	ldr	r5, [r1, #0]
   36658:	1d08      	adds	r0, r1, #4
   3665a:	6018      	str	r0, [r3, #0]
   3665c:	b2ad      	uxth	r5, r5
   3665e:	4b59      	ldr	r3, [pc, #356]	; (367c4 <_printf_i+0x230>)
   36660:	2708      	movs	r7, #8
   36662:	9303      	str	r3, [sp, #12]
   36664:	2a6f      	cmp	r2, #111	; 0x6f
   36666:	d018      	beq.n	3669a <_printf_i+0x106>
   36668:	270a      	movs	r7, #10
   3666a:	e016      	b.n	3669a <_printf_i+0x106>
   3666c:	3145      	adds	r1, #69	; 0x45
   3666e:	700a      	strb	r2, [r1, #0]
   36670:	4a54      	ldr	r2, [pc, #336]	; (367c4 <_printf_i+0x230>)
   36672:	9203      	str	r2, [sp, #12]
   36674:	681a      	ldr	r2, [r3, #0]
   36676:	6821      	ldr	r1, [r4, #0]
   36678:	1d10      	adds	r0, r2, #4
   3667a:	6018      	str	r0, [r3, #0]
   3667c:	6815      	ldr	r5, [r2, #0]
   3667e:	0608      	lsls	r0, r1, #24
   36680:	d522      	bpl.n	366c8 <_printf_i+0x134>
   36682:	07cb      	lsls	r3, r1, #31
   36684:	d502      	bpl.n	3668c <_printf_i+0xf8>
   36686:	2320      	movs	r3, #32
   36688:	4319      	orrs	r1, r3
   3668a:	6021      	str	r1, [r4, #0]
   3668c:	2710      	movs	r7, #16
   3668e:	2d00      	cmp	r5, #0
   36690:	d103      	bne.n	3669a <_printf_i+0x106>
   36692:	2320      	movs	r3, #32
   36694:	6822      	ldr	r2, [r4, #0]
   36696:	439a      	bics	r2, r3
   36698:	6022      	str	r2, [r4, #0]
   3669a:	0023      	movs	r3, r4
   3669c:	2200      	movs	r2, #0
   3669e:	3343      	adds	r3, #67	; 0x43
   366a0:	701a      	strb	r2, [r3, #0]
   366a2:	6863      	ldr	r3, [r4, #4]
   366a4:	60a3      	str	r3, [r4, #8]
   366a6:	2b00      	cmp	r3, #0
   366a8:	db5c      	blt.n	36764 <_printf_i+0x1d0>
   366aa:	2204      	movs	r2, #4
   366ac:	6821      	ldr	r1, [r4, #0]
   366ae:	4391      	bics	r1, r2
   366b0:	6021      	str	r1, [r4, #0]
   366b2:	2d00      	cmp	r5, #0
   366b4:	d158      	bne.n	36768 <_printf_i+0x1d4>
   366b6:	9e04      	ldr	r6, [sp, #16]
   366b8:	2b00      	cmp	r3, #0
   366ba:	d064      	beq.n	36786 <_printf_i+0x1f2>
   366bc:	0026      	movs	r6, r4
   366be:	9b03      	ldr	r3, [sp, #12]
   366c0:	3642      	adds	r6, #66	; 0x42
   366c2:	781b      	ldrb	r3, [r3, #0]
   366c4:	7033      	strb	r3, [r6, #0]
   366c6:	e05e      	b.n	36786 <_printf_i+0x1f2>
   366c8:	0648      	lsls	r0, r1, #25
   366ca:	d5da      	bpl.n	36682 <_printf_i+0xee>
   366cc:	b2ad      	uxth	r5, r5
   366ce:	e7d8      	b.n	36682 <_printf_i+0xee>
   366d0:	6809      	ldr	r1, [r1, #0]
   366d2:	681a      	ldr	r2, [r3, #0]
   366d4:	0608      	lsls	r0, r1, #24
   366d6:	d505      	bpl.n	366e4 <_printf_i+0x150>
   366d8:	1d11      	adds	r1, r2, #4
   366da:	6019      	str	r1, [r3, #0]
   366dc:	6813      	ldr	r3, [r2, #0]
   366de:	6962      	ldr	r2, [r4, #20]
   366e0:	601a      	str	r2, [r3, #0]
   366e2:	e006      	b.n	366f2 <_printf_i+0x15e>
   366e4:	0649      	lsls	r1, r1, #25
   366e6:	d5f7      	bpl.n	366d8 <_printf_i+0x144>
   366e8:	1d11      	adds	r1, r2, #4
   366ea:	6019      	str	r1, [r3, #0]
   366ec:	6813      	ldr	r3, [r2, #0]
   366ee:	8aa2      	ldrh	r2, [r4, #20]
   366f0:	801a      	strh	r2, [r3, #0]
   366f2:	2300      	movs	r3, #0
   366f4:	9e04      	ldr	r6, [sp, #16]
   366f6:	6123      	str	r3, [r4, #16]
   366f8:	e054      	b.n	367a4 <_printf_i+0x210>
   366fa:	681a      	ldr	r2, [r3, #0]
   366fc:	1d11      	adds	r1, r2, #4
   366fe:	6019      	str	r1, [r3, #0]
   36700:	6816      	ldr	r6, [r2, #0]
   36702:	2100      	movs	r1, #0
   36704:	6862      	ldr	r2, [r4, #4]
   36706:	0030      	movs	r0, r6
   36708:	f000 f922 	bl	36950 <memchr>
   3670c:	2800      	cmp	r0, #0
   3670e:	d001      	beq.n	36714 <_printf_i+0x180>
   36710:	1b80      	subs	r0, r0, r6
   36712:	6060      	str	r0, [r4, #4]
   36714:	6863      	ldr	r3, [r4, #4]
   36716:	6123      	str	r3, [r4, #16]
   36718:	2300      	movs	r3, #0
   3671a:	9a04      	ldr	r2, [sp, #16]
   3671c:	7013      	strb	r3, [r2, #0]
   3671e:	e041      	b.n	367a4 <_printf_i+0x210>
   36720:	6923      	ldr	r3, [r4, #16]
   36722:	0032      	movs	r2, r6
   36724:	9906      	ldr	r1, [sp, #24]
   36726:	9805      	ldr	r0, [sp, #20]
   36728:	9d07      	ldr	r5, [sp, #28]
   3672a:	47a8      	blx	r5
   3672c:	1c43      	adds	r3, r0, #1
   3672e:	d043      	beq.n	367b8 <_printf_i+0x224>
   36730:	6823      	ldr	r3, [r4, #0]
   36732:	2500      	movs	r5, #0
   36734:	079b      	lsls	r3, r3, #30
   36736:	d40f      	bmi.n	36758 <_printf_i+0x1c4>
   36738:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3673a:	68e0      	ldr	r0, [r4, #12]
   3673c:	4298      	cmp	r0, r3
   3673e:	da3d      	bge.n	367bc <_printf_i+0x228>
   36740:	0018      	movs	r0, r3
   36742:	e03b      	b.n	367bc <_printf_i+0x228>
   36744:	0022      	movs	r2, r4
   36746:	2301      	movs	r3, #1
   36748:	3219      	adds	r2, #25
   3674a:	9906      	ldr	r1, [sp, #24]
   3674c:	9805      	ldr	r0, [sp, #20]
   3674e:	9e07      	ldr	r6, [sp, #28]
   36750:	47b0      	blx	r6
   36752:	1c43      	adds	r3, r0, #1
   36754:	d030      	beq.n	367b8 <_printf_i+0x224>
   36756:	3501      	adds	r5, #1
   36758:	68e3      	ldr	r3, [r4, #12]
   3675a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3675c:	1a9b      	subs	r3, r3, r2
   3675e:	429d      	cmp	r5, r3
   36760:	dbf0      	blt.n	36744 <_printf_i+0x1b0>
   36762:	e7e9      	b.n	36738 <_printf_i+0x1a4>
   36764:	2d00      	cmp	r5, #0
   36766:	d0a9      	beq.n	366bc <_printf_i+0x128>
   36768:	9e04      	ldr	r6, [sp, #16]
   3676a:	0028      	movs	r0, r5
   3676c:	0039      	movs	r1, r7
   3676e:	f7fc ffe7 	bl	33740 <__aeabi_uidivmod>
   36772:	9b03      	ldr	r3, [sp, #12]
   36774:	3e01      	subs	r6, #1
   36776:	5c5b      	ldrb	r3, [r3, r1]
   36778:	0028      	movs	r0, r5
   3677a:	7033      	strb	r3, [r6, #0]
   3677c:	0039      	movs	r1, r7
   3677e:	f7fc ff59 	bl	33634 <__udivsi3>
   36782:	1e05      	subs	r5, r0, #0
   36784:	d1f1      	bne.n	3676a <_printf_i+0x1d6>
   36786:	2f08      	cmp	r7, #8
   36788:	d109      	bne.n	3679e <_printf_i+0x20a>
   3678a:	6823      	ldr	r3, [r4, #0]
   3678c:	07db      	lsls	r3, r3, #31
   3678e:	d506      	bpl.n	3679e <_printf_i+0x20a>
   36790:	6863      	ldr	r3, [r4, #4]
   36792:	6922      	ldr	r2, [r4, #16]
   36794:	4293      	cmp	r3, r2
   36796:	dc02      	bgt.n	3679e <_printf_i+0x20a>
   36798:	2330      	movs	r3, #48	; 0x30
   3679a:	3e01      	subs	r6, #1
   3679c:	7033      	strb	r3, [r6, #0]
   3679e:	9b04      	ldr	r3, [sp, #16]
   367a0:	1b9b      	subs	r3, r3, r6
   367a2:	6123      	str	r3, [r4, #16]
   367a4:	9b07      	ldr	r3, [sp, #28]
   367a6:	aa09      	add	r2, sp, #36	; 0x24
   367a8:	9300      	str	r3, [sp, #0]
   367aa:	0021      	movs	r1, r4
   367ac:	9b06      	ldr	r3, [sp, #24]
   367ae:	9805      	ldr	r0, [sp, #20]
   367b0:	f7ff fe82 	bl	364b8 <_printf_common>
   367b4:	1c43      	adds	r3, r0, #1
   367b6:	d1b3      	bne.n	36720 <_printf_i+0x18c>
   367b8:	2001      	movs	r0, #1
   367ba:	4240      	negs	r0, r0
   367bc:	b00b      	add	sp, #44	; 0x2c
   367be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   367c0:	0003b1b4 	.word	0x0003b1b4
   367c4:	0003b1a3 	.word	0x0003b1a3

000367c8 <__sread>:
   367c8:	b570      	push	{r4, r5, r6, lr}
   367ca:	000c      	movs	r4, r1
   367cc:	250e      	movs	r5, #14
   367ce:	5f49      	ldrsh	r1, [r1, r5]
   367d0:	f000 f8f0 	bl	369b4 <_read_r>
   367d4:	2800      	cmp	r0, #0
   367d6:	db03      	blt.n	367e0 <__sread+0x18>
   367d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   367da:	181b      	adds	r3, r3, r0
   367dc:	6563      	str	r3, [r4, #84]	; 0x54
   367de:	bd70      	pop	{r4, r5, r6, pc}
   367e0:	89a3      	ldrh	r3, [r4, #12]
   367e2:	4a02      	ldr	r2, [pc, #8]	; (367ec <__sread+0x24>)
   367e4:	4013      	ands	r3, r2
   367e6:	81a3      	strh	r3, [r4, #12]
   367e8:	e7f9      	b.n	367de <__sread+0x16>
   367ea:	46c0      	nop			; (mov r8, r8)
   367ec:	ffffefff 	.word	0xffffefff

000367f0 <__swrite>:
   367f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   367f2:	001f      	movs	r7, r3
   367f4:	898b      	ldrh	r3, [r1, #12]
   367f6:	0005      	movs	r5, r0
   367f8:	000c      	movs	r4, r1
   367fa:	0016      	movs	r6, r2
   367fc:	05db      	lsls	r3, r3, #23
   367fe:	d505      	bpl.n	3680c <__swrite+0x1c>
   36800:	230e      	movs	r3, #14
   36802:	5ec9      	ldrsh	r1, [r1, r3]
   36804:	2200      	movs	r2, #0
   36806:	2302      	movs	r3, #2
   36808:	f000 f88e 	bl	36928 <_lseek_r>
   3680c:	89a3      	ldrh	r3, [r4, #12]
   3680e:	4a05      	ldr	r2, [pc, #20]	; (36824 <__swrite+0x34>)
   36810:	0028      	movs	r0, r5
   36812:	4013      	ands	r3, r2
   36814:	81a3      	strh	r3, [r4, #12]
   36816:	0032      	movs	r2, r6
   36818:	230e      	movs	r3, #14
   3681a:	5ee1      	ldrsh	r1, [r4, r3]
   3681c:	003b      	movs	r3, r7
   3681e:	f000 f839 	bl	36894 <_write_r>
   36822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36824:	ffffefff 	.word	0xffffefff

00036828 <__sseek>:
   36828:	b570      	push	{r4, r5, r6, lr}
   3682a:	000c      	movs	r4, r1
   3682c:	250e      	movs	r5, #14
   3682e:	5f49      	ldrsh	r1, [r1, r5]
   36830:	f000 f87a 	bl	36928 <_lseek_r>
   36834:	89a3      	ldrh	r3, [r4, #12]
   36836:	1c42      	adds	r2, r0, #1
   36838:	d103      	bne.n	36842 <__sseek+0x1a>
   3683a:	4a05      	ldr	r2, [pc, #20]	; (36850 <__sseek+0x28>)
   3683c:	4013      	ands	r3, r2
   3683e:	81a3      	strh	r3, [r4, #12]
   36840:	bd70      	pop	{r4, r5, r6, pc}
   36842:	2280      	movs	r2, #128	; 0x80
   36844:	0152      	lsls	r2, r2, #5
   36846:	4313      	orrs	r3, r2
   36848:	81a3      	strh	r3, [r4, #12]
   3684a:	6560      	str	r0, [r4, #84]	; 0x54
   3684c:	e7f8      	b.n	36840 <__sseek+0x18>
   3684e:	46c0      	nop			; (mov r8, r8)
   36850:	ffffefff 	.word	0xffffefff

00036854 <__sclose>:
   36854:	b510      	push	{r4, lr}
   36856:	230e      	movs	r3, #14
   36858:	5ec9      	ldrsh	r1, [r1, r3]
   3685a:	f000 f82f 	bl	368bc <_close_r>
   3685e:	bd10      	pop	{r4, pc}

00036860 <strchr>:
   36860:	b2c9      	uxtb	r1, r1
   36862:	7803      	ldrb	r3, [r0, #0]
   36864:	2b00      	cmp	r3, #0
   36866:	d004      	beq.n	36872 <strchr+0x12>
   36868:	4299      	cmp	r1, r3
   3686a:	d100      	bne.n	3686e <strchr+0xe>
   3686c:	4770      	bx	lr
   3686e:	3001      	adds	r0, #1
   36870:	e7f7      	b.n	36862 <strchr+0x2>
   36872:	424b      	negs	r3, r1
   36874:	4159      	adcs	r1, r3
   36876:	4249      	negs	r1, r1
   36878:	4008      	ands	r0, r1
   3687a:	e7f7      	b.n	3686c <strchr+0xc>

0003687c <__ascii_wctomb>:
   3687c:	1e0b      	subs	r3, r1, #0
   3687e:	d004      	beq.n	3688a <__ascii_wctomb+0xe>
   36880:	2aff      	cmp	r2, #255	; 0xff
   36882:	d904      	bls.n	3688e <__ascii_wctomb+0x12>
   36884:	238a      	movs	r3, #138	; 0x8a
   36886:	6003      	str	r3, [r0, #0]
   36888:	3b8b      	subs	r3, #139	; 0x8b
   3688a:	0018      	movs	r0, r3
   3688c:	4770      	bx	lr
   3688e:	700a      	strb	r2, [r1, #0]
   36890:	2301      	movs	r3, #1
   36892:	e7fa      	b.n	3688a <__ascii_wctomb+0xe>

00036894 <_write_r>:
   36894:	b570      	push	{r4, r5, r6, lr}
   36896:	0005      	movs	r5, r0
   36898:	0008      	movs	r0, r1
   3689a:	0011      	movs	r1, r2
   3689c:	2200      	movs	r2, #0
   3689e:	4c06      	ldr	r4, [pc, #24]	; (368b8 <_write_r+0x24>)
   368a0:	6022      	str	r2, [r4, #0]
   368a2:	001a      	movs	r2, r3
   368a4:	f7f5 fa38 	bl	2bd18 <_write>
   368a8:	1c43      	adds	r3, r0, #1
   368aa:	d103      	bne.n	368b4 <_write_r+0x20>
   368ac:	6823      	ldr	r3, [r4, #0]
   368ae:	2b00      	cmp	r3, #0
   368b0:	d000      	beq.n	368b4 <_write_r+0x20>
   368b2:	602b      	str	r3, [r5, #0]
   368b4:	bd70      	pop	{r4, r5, r6, pc}
   368b6:	46c0      	nop			; (mov r8, r8)
   368b8:	20005d24 	.word	0x20005d24

000368bc <_close_r>:
   368bc:	2300      	movs	r3, #0
   368be:	b570      	push	{r4, r5, r6, lr}
   368c0:	4c06      	ldr	r4, [pc, #24]	; (368dc <_close_r+0x20>)
   368c2:	0005      	movs	r5, r0
   368c4:	0008      	movs	r0, r1
   368c6:	6023      	str	r3, [r4, #0]
   368c8:	f7f5 fa7a 	bl	2bdc0 <_close>
   368cc:	1c43      	adds	r3, r0, #1
   368ce:	d103      	bne.n	368d8 <_close_r+0x1c>
   368d0:	6823      	ldr	r3, [r4, #0]
   368d2:	2b00      	cmp	r3, #0
   368d4:	d000      	beq.n	368d8 <_close_r+0x1c>
   368d6:	602b      	str	r3, [r5, #0]
   368d8:	bd70      	pop	{r4, r5, r6, pc}
   368da:	46c0      	nop			; (mov r8, r8)
   368dc:	20005d24 	.word	0x20005d24

000368e0 <_fstat_r>:
   368e0:	2300      	movs	r3, #0
   368e2:	b570      	push	{r4, r5, r6, lr}
   368e4:	4c06      	ldr	r4, [pc, #24]	; (36900 <_fstat_r+0x20>)
   368e6:	0005      	movs	r5, r0
   368e8:	0008      	movs	r0, r1
   368ea:	0011      	movs	r1, r2
   368ec:	6023      	str	r3, [r4, #0]
   368ee:	f7f5 fa71 	bl	2bdd4 <_fstat>
   368f2:	1c43      	adds	r3, r0, #1
   368f4:	d103      	bne.n	368fe <_fstat_r+0x1e>
   368f6:	6823      	ldr	r3, [r4, #0]
   368f8:	2b00      	cmp	r3, #0
   368fa:	d000      	beq.n	368fe <_fstat_r+0x1e>
   368fc:	602b      	str	r3, [r5, #0]
   368fe:	bd70      	pop	{r4, r5, r6, pc}
   36900:	20005d24 	.word	0x20005d24

00036904 <_isatty_r>:
   36904:	2300      	movs	r3, #0
   36906:	b570      	push	{r4, r5, r6, lr}
   36908:	4c06      	ldr	r4, [pc, #24]	; (36924 <_isatty_r+0x20>)
   3690a:	0005      	movs	r5, r0
   3690c:	0008      	movs	r0, r1
   3690e:	6023      	str	r3, [r4, #0]
   36910:	f7f5 fa6e 	bl	2bdf0 <_isatty>
   36914:	1c43      	adds	r3, r0, #1
   36916:	d103      	bne.n	36920 <_isatty_r+0x1c>
   36918:	6823      	ldr	r3, [r4, #0]
   3691a:	2b00      	cmp	r3, #0
   3691c:	d000      	beq.n	36920 <_isatty_r+0x1c>
   3691e:	602b      	str	r3, [r5, #0]
   36920:	bd70      	pop	{r4, r5, r6, pc}
   36922:	46c0      	nop			; (mov r8, r8)
   36924:	20005d24 	.word	0x20005d24

00036928 <_lseek_r>:
   36928:	b570      	push	{r4, r5, r6, lr}
   3692a:	0005      	movs	r5, r0
   3692c:	0008      	movs	r0, r1
   3692e:	0011      	movs	r1, r2
   36930:	2200      	movs	r2, #0
   36932:	4c06      	ldr	r4, [pc, #24]	; (3694c <_lseek_r+0x24>)
   36934:	6022      	str	r2, [r4, #0]
   36936:	001a      	movs	r2, r3
   36938:	f7f5 fa63 	bl	2be02 <_lseek>
   3693c:	1c43      	adds	r3, r0, #1
   3693e:	d103      	bne.n	36948 <_lseek_r+0x20>
   36940:	6823      	ldr	r3, [r4, #0]
   36942:	2b00      	cmp	r3, #0
   36944:	d000      	beq.n	36948 <_lseek_r+0x20>
   36946:	602b      	str	r3, [r5, #0]
   36948:	bd70      	pop	{r4, r5, r6, pc}
   3694a:	46c0      	nop			; (mov r8, r8)
   3694c:	20005d24 	.word	0x20005d24

00036950 <memchr>:
   36950:	b2c9      	uxtb	r1, r1
   36952:	1882      	adds	r2, r0, r2
   36954:	4290      	cmp	r0, r2
   36956:	d101      	bne.n	3695c <memchr+0xc>
   36958:	2000      	movs	r0, #0
   3695a:	4770      	bx	lr
   3695c:	7803      	ldrb	r3, [r0, #0]
   3695e:	428b      	cmp	r3, r1
   36960:	d0fb      	beq.n	3695a <memchr+0xa>
   36962:	3001      	adds	r0, #1
   36964:	e7f6      	b.n	36954 <memchr+0x4>

00036966 <_realloc_r>:
   36966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36968:	0007      	movs	r7, r0
   3696a:	000d      	movs	r5, r1
   3696c:	0016      	movs	r6, r2
   3696e:	2900      	cmp	r1, #0
   36970:	d105      	bne.n	3697e <_realloc_r+0x18>
   36972:	0011      	movs	r1, r2
   36974:	f7fe fe9e 	bl	356b4 <_malloc_r>
   36978:	0004      	movs	r4, r0
   3697a:	0020      	movs	r0, r4
   3697c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3697e:	2a00      	cmp	r2, #0
   36980:	d103      	bne.n	3698a <_realloc_r+0x24>
   36982:	f7fe fe4d 	bl	35620 <_free_r>
   36986:	0034      	movs	r4, r6
   36988:	e7f7      	b.n	3697a <_realloc_r+0x14>
   3698a:	f000 f827 	bl	369dc <_malloc_usable_size_r>
   3698e:	002c      	movs	r4, r5
   36990:	4286      	cmp	r6, r0
   36992:	d9f2      	bls.n	3697a <_realloc_r+0x14>
   36994:	0031      	movs	r1, r6
   36996:	0038      	movs	r0, r7
   36998:	f7fe fe8c 	bl	356b4 <_malloc_r>
   3699c:	1e04      	subs	r4, r0, #0
   3699e:	d0ec      	beq.n	3697a <_realloc_r+0x14>
   369a0:	0029      	movs	r1, r5
   369a2:	0032      	movs	r2, r6
   369a4:	f7fe fe18 	bl	355d8 <memcpy>
   369a8:	0029      	movs	r1, r5
   369aa:	0038      	movs	r0, r7
   369ac:	f7fe fe38 	bl	35620 <_free_r>
   369b0:	e7e3      	b.n	3697a <_realloc_r+0x14>
	...

000369b4 <_read_r>:
   369b4:	b570      	push	{r4, r5, r6, lr}
   369b6:	0005      	movs	r5, r0
   369b8:	0008      	movs	r0, r1
   369ba:	0011      	movs	r1, r2
   369bc:	2200      	movs	r2, #0
   369be:	4c06      	ldr	r4, [pc, #24]	; (369d8 <_read_r+0x24>)
   369c0:	6022      	str	r2, [r4, #0]
   369c2:	001a      	movs	r2, r3
   369c4:	f7f5 f97e 	bl	2bcc4 <_read>
   369c8:	1c43      	adds	r3, r0, #1
   369ca:	d103      	bne.n	369d4 <_read_r+0x20>
   369cc:	6823      	ldr	r3, [r4, #0]
   369ce:	2b00      	cmp	r3, #0
   369d0:	d000      	beq.n	369d4 <_read_r+0x20>
   369d2:	602b      	str	r3, [r5, #0]
   369d4:	bd70      	pop	{r4, r5, r6, pc}
   369d6:	46c0      	nop			; (mov r8, r8)
   369d8:	20005d24 	.word	0x20005d24

000369dc <_malloc_usable_size_r>:
   369dc:	1f0b      	subs	r3, r1, #4
   369de:	681b      	ldr	r3, [r3, #0]
   369e0:	1f18      	subs	r0, r3, #4
   369e2:	2b00      	cmp	r3, #0
   369e4:	da01      	bge.n	369ea <_malloc_usable_size_r+0xe>
   369e6:	580b      	ldr	r3, [r1, r0]
   369e8:	18c0      	adds	r0, r0, r3
   369ea:	4770      	bx	lr

000369ec <sysfont_glyphs>:
   369ec:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
   369fc:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
   36a0c:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
   36a1c:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
   36a2c:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
   36a3c:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
   36a4c:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
   36a5c:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
   36a6c:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
   36a7c:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
   36a8c:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
   36a9c:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
   36aac:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
   36abc:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
   36acc:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
   36adc:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
   36aec:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
   36afc:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
   36b0c:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
   36b1c:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
   36b2c:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
   36b3c:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
   36b4c:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
   36b5c:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
   36b6c:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
   36b7c:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
   36b8c:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
   36b9c:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
   36bac:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
   36bbc:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
   36bcc:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
   36bdc:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
   36bec:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
   36bfc:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
   36c0c:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
   36c1c:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
   36c2c:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
   36c3c:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
   36c4c:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
   36c5c:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
   36c6c:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
   36c7c:	4020 0000                                    @..

00036c80 <pcWelcomeMessage>:
   36c80:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   36c90:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   36ca0:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   36cb0:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   36cc0:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   36cd0:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   36ce0:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   36cf0:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   36d00:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   36d10:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   36d20:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   36d30:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   36d40:	0a0d 0000 656c 0064 656c 2064 6b5b 7965     ....led.led [key
   36d50:	756e 5d6d 525b 5b5d 5d47 425b 3a5d 5320     num][R][G][B]: S
   36d60:	7465 2073 6874 2065 6967 6576 206e 454c     ets the given LE
   36d70:	2044 6f74 7420 6568 6720 7669 6e65 5220     D to the given R
   36d80:	472c 422c 7620 6c61 6575 2e73 0a0d 0000     ,G,B values.....
   36d90:	6567 6274 7475 6f74 006e 0000 6567 6274     getbutton...getb
   36da0:	7475 6f74 3a6e 5020 6f72 6563 7373 7365     utton: Processes
   36db0:	6120 646e 7020 6972 746e 2073 6874 2065      and prints the 
   36dc0:	4946 4f46 6220 7475 6f74 206e 7562 6666     FIFO button buff
   36dd0:	7265 6620 6f72 206d 6874 2065 6573 7365     er from the sees
   36de0:	7761 0d2e 000a 0000 6567 6474 7369 6174     aw......getdista
   36df0:	636e 0065 6567 6474 7369 6174 636e 3a65     nce.getdistance:
   36e00:	5220 7465 7275 736e 7420 6568 6420 7369      Returns the dis
   36e10:	6174 636e 2065 7266 6d6f 7420 6568 5520     tance from the U
   36e20:	2d53 3031 2030 6553 736e 726f 0d2e 000a     S-100 Sensor....
   36e30:	6167 656d 0000 0000 6167 656d 203a 6553     game....game: Se
   36e40:	646e 2073 7564 6d6d 2079 6167 656d 6420     nds dummy game d
   36e50:	7461 0d61 000a 0000 3269 0063 3269 3a63     ata.....i2c.i2c:
   36e60:	5320 6163 736e 4920 4332 6220 7375 0a0d      Scans I2C bus..
   36e70:	0000 0000 6574 7473 0000 0000 6574 7473     ....test....test
   36e80:	203a 6553 646e 2073 6574 7473 6420 7461     : Sends test dat
   36e90:	0d61 000a 616e 0075 616e 3a75 5320 6e65     a...nau.nau: Sen
   36ea0:	7364 7720 6965 6867 2074 6164 6174 0a0d     ds weight data..
   36eb0:	0000 0000 706f 6e65 0000 0000 6573 7672     ....open....serv
   36ec0:	3a6f 4f20 6570 0d6e 000a 0000 6c63 736f     o: Open.....clos
   36ed0:	0065 0000 6573 7672 3a6f 4320 6f6c 6573     e...servo: Close
   36ee0:	0a0d 0000 6c63 0073 6c63 3a73 4320 656c     ....cls.cls: Cle
   36ef0:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   36f00:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   36f10:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   36f20:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   36f30:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   36f40:	6341 6563 656c 6172 6974 6e6f 5b20 676d     Acceleration [mg
   36f50:	3a5d 2058 6425 5909 2520 0964 205a 6425     ]:X %d.Y %d.Z %d
   36f60:	0a0d 0000 6f4e 6420 7461 2061 6572 6461     ....No data read
   36f70:	2179 0d20 000a 0000 6325 325b 004a 0000     y! .....%c[2J...
   36f80:	7453 6475 6e65 7374 7420 206f 6966 6c6c     Students to fill
   36f90:	6f20 7475 0021 0000 7542 7474 6e6f 2320      out!...Button #
   36fa0:	6425 6920 2073 6572 656c 7361 6465 0a0d     %d is released..
   36fb0:	0000 0000 7542 7474 6e6f 2320 6425 6920     ....Button #%d i
   36fc0:	2073 7270 7365 6573 0d64 000a 6553 736e     s pressed...Sens
   36fd0:	726f 4520 7272 726f 2520 2164 0a0d 0000     or Error %d!....
   36fe0:	6944 7473 6e61 6563 203a 6425 6d20 0d6d     Distance: %d mm.
   36ff0:	000a 0000 6944 7473 6e61 6563 4420 7461     ....Distance Dat
   37000:	2061 514d 5454 5020 736f 0d74 000a 0000     a MQTT Post.....
   37010:	7544 6d6d 2079 6147 656d 4420 7461 2061     Dummy Game Data 
   37020:	514d 5454 5020 736f 0d74 000a 6554 7473     MQTT Post...Test
   37030:	4420 7461 2061 514d 5454 5020 736f 0d74      Data MQTT Post.
   37040:	000a 0000 6e69 7570 2074 6f76 206c 203d     ....input vol = 
   37050:	4956 314e 2050 202d 4956 314e 204e 203d     VIN1P - VIN1N = 
   37060:	6425 0a0d 0000 0000 2030 3120 2020 2032     %d......0  1  2 
   37070:	3320 2020 2034 3520 2020 2036 3720 2020      3  4  5  6  7  
   37080:	2038 3920 2020 2061 6220 2020 2063 6420     8  9  a  b  c  d
   37090:	2020 2065 6620 0a0d 0000 0000 3025 7832       e  f......%02x
   370a0:	203a 0000 2058 0000                         : ..X ..

000370a8 <xImuGetCommand>:
   370a8:	6cc4 0003 6cc8 0003 3be1 0001 0000 0000     .l...l...;......

000370b8 <xOTAUCommand>:
   370b8:	6cec 0003 6cf0 0003 3d1d 0001 0000 0000     .l...l...=......

000370c8 <xResetCommand>:
   370c8:	6d20 0003 6d28 0003 3d3d 0001 0000 0000      m..(m..==......

000370d8 <xNeotrellisTurnLEDCommand>:
   370d8:	6d44 0003 6d48 0003 3d5d 0001 0004 0000     Dm..Hm..]=......

000370e8 <xNeotrellisProcessButtonCommand>:
   370e8:	6d90 0003 6d9c 0003 3d89 0001 0000 0000     .m...m...=......

000370f8 <xDistanceSensorGetDistance>:
   370f8:	6de8 0003 6df4 0003 3e8d 0001 0000 0000     .m...m...>......

00037108 <xSendDummyGameData>:
   37108:	6e30 0003 6e38 0003 3f31 0001 0000 0000     0n..8n..1?......

00037118 <xI2cScan>:
   37118:	6e58 0003 6e5c 0003 40dd 0001 0000 0000     Xn..\n...@......

00037128 <xSendTestData>:
   37128:	6e74 0003 6e7c 0003 3fcd 0001 0000 0000     tn..|n...?......

00037138 <xSendWeightData>:
   37138:	6e94 0003 6e98 0003 4059 0001 0000 0000     .n...n..Y@......

00037148 <xServoOpen>:
   37148:	6eb4 0003 6ebc 0003 4019 0001 0000 0000     .n...n...@......

00037158 <xServoClose>:
   37158:	6ecc 0003 6ed4 0003 4039 0001 0000 0000     .n...n..9@......

00037168 <xClearScreen>:
   37168:	6ee4 0003 6ee8 0003 3cd5 0001 0000 0000     .n...n...<......
   37178:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   37188:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   37198:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   371a8:	676e 4320 6e6f 7274 6c6f 4420 7461 2061     ng Control Data 
   371b8:	7571 7565 7365 0d21 000a 0000 6f43 746e     queues!.....Cont
   371c8:	6f72 206c 6854 6572 6461 203a 6f43 736e     rol Thread: Cons
   371d8:	6d75 6465 6720 6d61 2065 6170 6b63 7465     umed game packet
   371e8:	0d21 000a 6f43 746e 6f72 206c 6854 6572     !...Control Thre
   371f8:	6461 203a 6f43 6c75 2064 6f6e 2074 6573     ad: Could not se
   37208:	646e 6720 6d61 2065 6170 6b63 7465 0d21     nd game packet!.
   37218:	000a 0000                                   ....

0003721c <msgBaseGetHWID>:
   3721c:	0100 0000                                   ....

00037220 <msgNeopixelPin>:
   37220:	010e 0003                                   ....

00037224 <msgNeopixelSpeed>:
   37224:	020e 0001                                   ....

00037228 <msgNeopixelBufLength>:
   37228:	030e 3000                                   ...0

0003722c <msgKeypadEnableInt>:
   3722c:	0210 0001                                   ....

00037230 <msgKeypadGetCount>:
   37230:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   37240:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   37250:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   37260:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   37270:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   37280:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   37290:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   372a0:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   372b0:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   372c0:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   372d0:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   372e0:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   372f0:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   37300:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   37310:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   37320:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   37330:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   37340:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   37350:	6574 2164 0000 0000 5345 3545 3631 0000     ted!....ESE516..
   37360:	4948 4847 4157 0059                         HIGHWAY.

00037368 <main_mqtt_broker>:
   37368:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   37378:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   37388:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   37398:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   373a8:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   373b8:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   373c8:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   373d8:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   373e8:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   373f8:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   37408:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   37418:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   37428:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   37438:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   37448:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   37458:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   37468:	3437 322e 3533 312e 3537 342e 2f31 6554     74.235.175.41/Te
   37478:	7473 2e42 6962 006e 7473 726f 5f65 6966     stB.bin.store_fi
   37488:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   37498:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   374a8:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   374b8:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   374c8:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   374d8:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   374e8:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   374f8:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   37508:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   37518:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   37528:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   37538:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   37548:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   37558:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   37568:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   37578:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   37588:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   37598:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   375a8:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   375b8:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   375c8:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   375d8:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   375e8:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   375f8:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   37608:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   37618:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   37628:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   37638:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   37648:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   37658:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   37668:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   37678:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   37688:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   37698:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   376a8:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   376b8:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   376c8:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   376d8:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   376e8:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   376f8:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   37708:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   37718:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   37728:	5761 3174 3332 3534 3736 0000 0061 0000     aWt1234567..a...
   37738:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   37748:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   37758:	7525 0a0d 0000 0000 7245 6f72 2072 6f63     %u......Error co
   37768:	6e6e 6365 6974 676e 7420 206f 514d 5454     nnecting to MQTT
   37778:	4220 6f72 656b 2172 0a0d 0000 6e69 7469      Broker!....init
   37788:	735f 6f74 6172 6567 203a 6c70 6165 6573     _storage: please
   37798:	7020 756c 2067 6e61 5320 2f44 4d4d 2043      plug an SD/MMC 
   377a8:	6163 6472 6920 206e 6c73 746f 2e2e 0d2e     card in slot....
   377b8:	000a 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   377c8:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   377d8:	206c 6166 6c69 6465 0d2e 000a 6e69 7469     l failed....init
   377e8:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   377f8:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   37808:	7420 6568 6320 7261 2e64 0a0d 0000 0000      the card.......
   37818:	6e69 7469 735f 6f74 6172 6567 203a 6f6d     init_storage: mo
   37828:	6e75 6974 676e 5320 2044 6163 6472 2e2e     unting SD card..
   37838:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   37848:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   37858:	6166 6c69 6465 2021 7228 7365 2520 2964     failed! (res %d)
   37868:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   37878:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   37888:	4b4f 0d2e 000a 0000 6f63 666e 6769 7275     OK......configur
   37898:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   378a8:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   378b8:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   378c8:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   378d8:	0a0d 2520 2a2e 0073 6772 2862 0000 0000     .. %.*s.rgb(....
   378e8:	0a0d 4752 2042 6425 2520 2064 6425 0a0d     ..RGB %d %d %d..
   378f8:	0000 0000 227b 6167 656d 3a22 005b 0000     ....{"game":[...
   37908:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   37918:	6365 6965 6576 2164 0a0d 0000 2e25 732a     eceived!....%.*s
   37928:	0000 0000 0a0d 6150 7372 6465 4320 6d6f     ......Parsed Com
   37938:	616d 646e 203a 0000 6425 002c 0a0d 6553     mand: ..%d,...Se
   37948:	746e 7020 616c 2079 6f74 6320 6e6f 7274     nt play to contr
   37958:	6c6f 0d21 000a 0000 0a0d 6147 656d 6d20     ol!.......Game m
   37968:	7365 6173 6567 7220 6365 6965 6576 2064     essage received 
   37978:	7562 2074 6f6e 2074 6e75 6564 7372 6f74     but not understo
   37988:	646f 0d21 000a 0000 3e20 203e 0000 0000     od!..... >> ....
   37998:	3150 4c5f 4445 455f 4553 3135 5f36 3954     P1_LED_ESE516_T9
   379a8:	0000 0000 6166 736c 0065 0000 7274 6575     ....false...true
   379b8:	0000 0000 0a0d 6f43 6e6e 6365 6974 676e     ......Connecting
   379c8:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
   379d8:	7242 4a73 4e42 6f56 4251 376c 0000 0000     BrsJBNVoQBl7....
   379e8:	7472 7974 626f 6a65 0000 0000 514d 5454     rttyobej....MQTT
   379f8:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
   37a08:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
   37a18:	0d72 000a 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
   37a28:	6465 7420 206f 7262 6b6f 7265 0a0d 0000     ed to broker....
   37a38:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   37a48:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   37a58:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   37a68:	796c 0d2e 000a 0000 3150 475f 4d41 5f45     ly......P1_GAME_
   37a78:	5345 3545 3631 545f 0039 0000 514d 5454     ESE516_T9...MQTT
   37a88:	4320 6e6f 656e 7463 6465 0a0d 0000 0000      Connected......
   37a98:	514d 5454 6220 6f72 656b 2072 6564 6c63     MQTT broker decl
   37aa8:	6e69 2065 6f79 7275 6120 6363 7365 2173     ine your access!
   37ab8:	6520 7272 726f 6320 646f 2065 6425 0a0d      error code %d..
   37ac8:	0000 0000 514d 5454 6420 7369 6f63 6e6e     ....MQTT disconn
   37ad8:	6365 6574 0d64 000a 514d 5454 6920 696e     ected...MQTT ini
   37ae8:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
   37af8:	6465 202e 7245 6f72 2072 6f63 6564 6920     ed. Error code i
   37b08:	2073 2528 2964 0a0d 0000 0000 514d 5454     s (%d)......MQTT
   37b18:	7220 6765 7369 6574 2072 6163 6c6c 6162      register callba
   37b28:	6b63 6620 6961 656c 2e64 4520 7272 726f     ck failed. Error
   37b38:	6320 646f 2065 7369 2820 6425 0d29 000a      code is (%d)...
   37b48:	227b 2264 7b3a 7422 6d65 2270 253a 7d64     {"d":{"temp":%d}
   37b58:	007d 0000 465b 4941 5d4c 7220 7365 2520     }...[FAIL] res %
   37b68:	0d64 000a 6c46 6761 2e41 7874 2074 6461     d...FlagA.txt ad
   37b78:	6564 2164 0a0d 0000 3a30 6c46 6761 2e41     ded!....0:FlagA.
   37b88:	7874 0074 6f43 6e6e 6365 6574 2064 6f74     txt.Connected to
   37b98:	4d20 5451 2054 7242 6b6f 7265 0d21 000a      MQTT Broker!...
   37ba8:	227b 6d69 7875 3a22 6425 202c 6922 756d     {"imux":%d, "imu
   37bb8:	2279 203a 6425 202c 6922 756d 227a 203a     y": %d, "imuz": 
   37bc8:	6425 007d 3150 495f 554d 455f 4553 3135     %d}.P1_IMU_ESE51
   37bd8:	5f36 3954 0000 0000 227b 6574 7473 3a22     6_T9....{"test":
   37be8:	6425 7d20 0000 0000 4554 5453 545f 504f     %d }....TEST_TOP
   37bf8:	4349 355f 3631 545f 0039 0000 6425 0000     IC_516_T9...%d..
   37c08:	7d5d 0000 0a0d 0000 3250 475f 4d41 5f45     ]}......P2_GAME_
   37c18:	5345 3545 3631 545f 0039 0000 5245 4f52     ESE516_T9...ERRO
   37c28:	2052 6e49 7469 6169 696c 697a 676e 5720     R Initializing W
   37c38:	6669 2069 6144 6174 7120 6575 6575 2173     ifi Data queues!
   37c48:	0a0d 0000 5345 3545 3631 2d20 5720 6669     ....ESE516 - Wif
   37c58:	2069 6e49 7469 4320 646f 0d65 000a 0000     i Init Code.....
   37c68:	616d 6e69 203a 326d 5f6d 6977 6966 695f     main: m2m_wifi_i
   37c78:	696e 2074 6163 6c6c 6520 7272 726f 2021     nit call error! 
   37c88:	7228 7365 2520 2964 0a0d 0000 616d 6e69     (res %d)....main
   37c98:	203a 6f63 6e6e 6365 6974 676e 7420 206f     : connecting to 
   37ca8:	6957 6946 4120 2050 7325 2e2e 0d2e 000a     WiFi AP %s......
   37cb8:	3150 545f 4d45 4550 4152 5554 4552 455f     P1_TEMPERATURE_E
   37cc8:	4553 3135 5f36 3954 0000 0000 514d 5454     SE516_T9....MQTT
   37cd8:	7320 6e65 2064 7325 0a0d 0000 6ca8 0001      send %s.....l..
   37ce8:	6cb4 0001 6cc6 0001 6d1c 0001 6d3c 0001     .l...l...m..<m..
   37cf8:	6568 706c 0000 0000 0a0d 6568 706c 0d3a     help......help:.
   37d08:	200a 694c 7473 2073 6c61 206c 6874 2065     . Lists all the 
   37d18:	6572 6967 7473 7265 6465 6320 6d6f 616d     registered comma
   37d28:	646e 0d73 0d0a 000a 6e49 6f63 7272 6365     nds.....Incorrec
   37d38:	2074 6f63 6d6d 6e61 2064 6170 6172 656d     t command parame
   37d48:	6574 2872 2973 202e 4520 746e 7265 2220     ter(s).  Enter "
   37d58:	6568 706c 2022 6f74 7620 6569 2077 2061     help" to view a 
   37d68:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   37d78:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......
   37d88:	6f43 6d6d 6e61 2064 6f6e 2074 6572 6f63     Command not reco
   37d98:	6e67 7369 6465 202e 4520 746e 7265 2720     gnised.  Enter '
   37da8:	6568 706c 2027 6f74 7620 6569 2077 2061     help' to view a 
   37db8:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   37dc8:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......

00037dd8 <xHelpCommand>:
   37dd8:	7cf8 0003 7d00 0003 8aa1 0001 0000 0000     .|...}..........
   37de8:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   37df8:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   37e08:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   37e18:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   37e28:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   37e38:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   37e48:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   37e58:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   37e68:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   37e78:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   37e88:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   37e98:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   37ea8:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   37eb8:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   37ec8:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   37ed8:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   37ee8:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37ef8:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   37f08:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37f18:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   37f28:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   37f38:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   37f48:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   37f58:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37f68:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   37f78:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   37f88:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37f98:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   37fa8:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   37fb8:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   37fc8:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   37fd8:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   37fe8:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   37ff8:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   38008:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   38018:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   38028:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   38038:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   38048:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   38058:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   38068:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   38078:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   38088:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   38098:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   380a8:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   380b8:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   380c8:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   380d8:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   380e8:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   380f8:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   38108:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   38118:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   38128:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   38138:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   38148:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   38158:	6365 6374 616c 7373 0021 0000 91c6 0001     ectclass!.......
   38168:	91be 0001 91c2 0001 91b6 0001 91ba 0001     ................
   38178:	91ca 0001 91ce 0001 91d2 0001 91d6 0001     ................
   38188:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   38198:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   381a8:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   381b8:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   381c8:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   381d8:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   381e8:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   381f8:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   38208:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   38218:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   38228:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   38238:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   38248:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   38258:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   38268:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   38278:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   38288:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   38298:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   382a8:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   382b8:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   382c8:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   382d8:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   382e8:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   382f8:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   38308:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   38318:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   38328:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   38338:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   38348:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   38358:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   38368:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   38378:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   38388:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   38398:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   383a8:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   383b8:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   383c8:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   383d8:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   383e8:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   383f8:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   38408:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   38418:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   38428:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   38438:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   38448:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   38458:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   38468:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   38478:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   38488:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   38498:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   384a8:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   384b8:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   384c8:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   384d8:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   384e8:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   384f8:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   38508:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   38518:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   38528:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   38538:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38548:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   38558:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   38568:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   38578:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   38588:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   38598:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   385a8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   385b8:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   385c8:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   385d8:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   385e8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   385f8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38608:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   38618:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38628:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   38638:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   38648:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   38658:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38668:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38678:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38688:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   38698:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   386a8:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   386b8:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   386c8:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   386d8:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   386e8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   386f8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38708:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   38718:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   38728:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38738:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38748:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   38758:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   38768:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   38778:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38788:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38798:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   387a8:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   387b8:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   387c8:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   387d8:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   387e8:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   387f8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38808:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   38818:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   38828:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   38838:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38848:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   38858:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   38868:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   38878:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   38888:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   38898:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   388a8:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   388b8:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   388c8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   388d8:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   388e8:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   388f8:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   38908:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   38918:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   38928:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   38938:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   38948:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   38958:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38968:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38978:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   38988:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   38998:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   389a8:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   389b8:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   389c8:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   389d8:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   389e8:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   389f8:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   38a08:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38a18:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   38a28:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   38a38:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   38a48:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   38a58:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   38a68:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   38a78:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   38a88:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   38a98:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   38aa8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38ab8:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   38ac8:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   38ad8:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   38ae8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38af8:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   38b08:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   38b18:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   38b28:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38b38:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38b48:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   38b58:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   38b68:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   38b78:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38b88:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   38b98:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38ba8:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38bb8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38bc8:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   38bd8:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   38be8:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   38bf8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38c08:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   38c18:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38c28:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38c38:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38c48:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   38c58:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   38c68:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   38c78:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38c88:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   38c98:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   38ca8:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   38cb8:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   38cc8:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   38cd8:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   38ce8:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   38cf8:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38d08:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38d18:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38d28:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   38d38:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38d48:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38d58:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38d68:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   38d78:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   38d88:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   38d98:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   38da8:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   38db8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38dc8:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   38dd8:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   38de8:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   38df8:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   38e08:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   38e18:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   38e28:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   38e38:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   38e48:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38e58:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   38e68:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   38e78:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   38e88:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   38e98:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   38ea8:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   38eb8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38ec8:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   38ed8:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   38ee8:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   38ef8:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   38f08:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   38f18:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   38f28:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   38f38:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   38f48:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   38f58:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   38f68:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   38f78:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   38f88:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   38f98:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   38fa8:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   38fb8:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   38fc8:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   38fd8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38fe8:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   38ff8:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   39008:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   39018:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   39028:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   39038:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   39048:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   39058:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   39068:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   39078:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39088:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   39098:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   390a8:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   390b8:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   390c8:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   390d8:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   390e8:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   390f8:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   39108:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   39118:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   39128:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   39138:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   39148:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   39158:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   39168:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   39178:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   39188:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   39198:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   391a8:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   391b8:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   391c8:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   391d8:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   391e8:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   391f8:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   39208:	0000 0000 6d54 2072 7653 0063 e268 0001     ....Tmr Svc.h...
   39218:	e268 0001 e268 0001 e2f6 0001 e2c0 0001     h...h...........
   39228:	e2ea 0001 e268 0001 e268 0001 e2f6 0001     ....h...h.......
   39238:	e2c0 0001                                   ....

0003923c <sd_mmc_trans_units>:
   3923c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00039258 <sd_trans_multipliers>:
   39258:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   39268:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   39278:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   39288:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00039298 <mmc_trans_multipliers>:
   39298:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   392a8:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   392b8:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   392c8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   392d8:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   392e8:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   392f8:	746c 6320 646d 000a 000d 0000               lt cmd......

00039304 <__FUNCTION__.17099>:
   39304:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   39314:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   39324:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   39334:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   39344:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   39354:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   39364:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   39374:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   39384:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   39394:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   393a4:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   393b4:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   393c4:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   393d4:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   393e4:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   393f4:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   39404:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   39414:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   39424:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   39434:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   39444:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   39454:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   39464:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   39474:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   39484:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   39494:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   394a4:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   394b4:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   394c4:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   394d4:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   394e4:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   394f4:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   39504:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   39514:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   39524:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   39534:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   39544:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   39554:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   39564:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   39574:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   39584:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   39594:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   395a4:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   395b4:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   395c4:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   395d4:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   395e4:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   395f4:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   39604:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   39614:	203f 6425 000a 0000 246c 0002 243c 0002     ? %d....l$..<$..
   39624:	2434 0002 244c 0002 2444 0002 2464 0002     4$..L$..D$..d$..
   39634:	2454 0002 245c 0002                         T$..\$..

0003963c <__FUNCTION__.17967>:
   3963c:	6968 5f66 6573 646e 0000 0000               hif_send....

00039648 <__FUNCTION__.17977>:
   39648:	6968 5f66 7369 0072                         hif_isr.

00039650 <__FUNCTION__.17986>:
   39650:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00039660 <__FUNCTION__.17998>:
   39660:	6968 5f66 6572 6563 7669 0065               hif_receive.

0003966c <__FUNCTION__.18014>:
   3966c:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   3967c:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   3968c:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   3969c:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   396ac:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   396bc:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   396cc:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   396dc:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   396ec:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   396fc:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   3970c:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   3971c:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   3972c:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   3973c:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   3974c:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   3975c:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   3976c:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   3977c:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   3978c:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   3979c:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   397ac:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   397bc:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   397cc:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   397dc:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   397ec:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   397fc:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   3980c:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   3981c:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   3982c:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   3983c:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   3984c:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   3985c:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   3986c:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   3987c:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   3988c:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   3989c:	000a 0000 3332 303a 3a32 3130 0000 0000     ....23:02:01....
   398ac:	7041 2072 3931 3220 3230 0033 7244 7669     Apr 19 2023.Driv
   398bc:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   398cc:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   398dc:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   398ec:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   398fc:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   3990c:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   3991c:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   3992c:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   3993c:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   3994c:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   3995c:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   3996c:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   3997c:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   3998c:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   3999c:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   399ac:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   399bc:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   399cc:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   399dc:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   399ec:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   399fc:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   39a0c:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   39a1c:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   39a2c:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   39a3c:	4220 6675 6566 0a72 0000 0000                Buffer.....

00039a48 <__FUNCTION__.17949>:
   39a48:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00039a54 <__FUNCTION__.17978>:
   39a54:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00039a64 <__FUNCTION__.18009>:
   39a64:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   39a74:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   39a84:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   39a94:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   39aa4:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   39ab4:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   39ac4:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   39ad4:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   39ae4:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   39af4:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00039b04 <__FUNCTION__.17806>:
   39b04:	6863 7069 775f 6b61 0065 0000               chip_wake...

00039b10 <__FUNCTION__.17855>:
   39b10:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   39b20:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   39b30:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   39b40:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   39b50:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   39b60:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   39b70:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   39b80:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   39b90:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   39ba0:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   39bb0:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   39bc0:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   39bd0:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   39be0:	6920 696e 2074 7562 0a73 0000                init bus...

00039bec <__FUNCTION__.17853>:
   39bec:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00039bf8 <__FUNCTION__.17860>:
   39bf8:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00039c08 <crc7_syndrome_table>:
   39c08:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   39c18:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   39c28:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   39c38:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   39c48:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   39c58:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   39c68:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   39c78:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   39c88:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   39c98:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   39ca8:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   39cb8:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   39cc8:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   39cd8:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   39ce8:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   39cf8:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   39d08:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   39d18:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   39d28:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   39d38:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   39d48:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39d58:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   39d68:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39d78:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39d88:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   39d98:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   39da8:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   39db8:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   39dc8:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   39dd8:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   39de8:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   39df8:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   39e08:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   39e18:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   39e28:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   39e38:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39e48:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   39e58:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   39e68:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39e78:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   39e88:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   39e98:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   39ea8:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39eb8:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   39ec8:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   39ed8:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39ee8:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   39ef8:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   39f08:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   39f18:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   39f28:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   39f38:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   39f48:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   39f58:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   39f68:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39f78:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39f88:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   39f98:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   39fa8:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   39fb8:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   39fc8:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39fd8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   39fe8:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   39ff8:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   3a008:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   3a018:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   3a028:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   3a038:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3a048:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   3a058:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   3a068:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   3a078:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3a088:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   3a098:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   3a0a8:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   3a0b8:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   3a0c8:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   3a0d8:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   3a0e8:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3a0f8:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   3a108:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   3a118:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   3a128:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   3a138:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   3a148:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   3a158:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   3a168:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   3a178:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3a188:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   3a198:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   3a1a8:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a1b8:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3a1c8:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   3a1d8:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   3a1e8:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   3a1f8:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a208:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3a218:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   3a228:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a238:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   3a248:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3a258:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3a268:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   3a278:	2e2e 0a2e 0000 0000 4094 0002 4094 0002     .........@...@..
   3a288:	4124 0002 3fe8 0002 402e 0002 4050 0002     $A...?...@..P@..
   3a298:	40d6 0002 40d6 0002 4190 0002 3fbc 0002     .@...@...A...?..
   3a2a8:	41ea 0002 41ea 0002 41ea 0002 41ea 0002     .A...A...A...A..
   3a2b8:	4072 0002 45f4 0002 45f4 0002 467c 0002     r@...E...E..|F..
   3a2c8:	4558 0002 459a 0002 45b8 0002 4632 0002     XE...E...E..2F..
   3a2d8:	4632 0002 46de 0002 4530 0002 472e 0002     2F...F..0E...G..
   3a2e8:	472e 0002 472e 0002 472e 0002 45d6 0002     .G...G...G...E..

0003a2f8 <__FUNCTION__.17128>:
   3a2f8:	7073 5f69 6d63 0064                         spi_cmd.

0003a300 <__FUNCTION__.17135>:
   3a300:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0003a310 <__FUNCTION__.17144>:
   3a310:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0003a31c <__FUNCTION__.17177>:
   3a31c:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   3a32c:	0000 0000                                   ....

0003a330 <__FUNCTION__.17223>:
   3a330:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0003a340 <__FUNCTION__.17235>:
   3a340:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0003a350 <__FUNCTION__.17246>:
   3a350:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0003a360 <__FUNCTION__.17258>:
   3a360:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0003a370 <__FUNCTION__.17269>:
   3a370:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0003a37c <__FUNCTION__.17290>:
   3a37c:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   3a38c:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   3a39c:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   3a3ac:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   3a3bc:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   3a3cc:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   3a3dc:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   3a3ec:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   3a3fc:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   3a40c:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   3a41c:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   3a42c:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   3a43c:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   3a44c:	2074 2230 0000 0000                         t 0"....

0003a454 <lun_desc>:
   3a454:	fc8d 0001 fce5 0001 fd31 0001 fd7d 0001     ........1...}...
   3a464:	fdad 0001 fe31 0001 fec1 0001 a43c 0003     ....1.......<...
   3a474:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   3a484:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   3a494:	a012 0002 a08c 0002 a08c 0002 a030 0002     ............0...
   3a4a4:	a02a 0002 a036 0002 a018 0002 a03c 0002     *...6.......<...
   3a4b4:	a072 0002 a274 0002 a2c4 0002 a2c4 0002     r...t...........
   3a4c4:	a2c0 0002 a266 0002 a286 0002 a256 0002     ....f.......V...
   3a4d4:	a298 0002 a2aa 0002 a312 0002 a340 0002     ............@...
   3a4e4:	a340 0002 a33c 0002 a30c 0002 a318 0002     @...<...........
   3a4f4:	a306 0002 a31e 0002 a324 0002               ........$...

0003a500 <tcc_modules>:
   3a500:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0003a50c <_tcc_gclk_ids>:
   3a50c:	1a1a 001b                                   ....

0003a510 <_tcc_apbcmasks>:
   3a510:	0100 0000 0200 0000 0400 0000               ............

0003a51c <_tcc_maxs>:
   3a51c:	ffff 00ff ffff 00ff ffff 0000               ............

0003a528 <_tcc_cc_nums>:
   3a528:	0204 0002                                   ....

0003a52c <_tcc_ow_nums>:
   3a52c:	0408 0002                                   ....

0003a530 <_tcc_intflag>:
   3a530:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   3a540:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   3a550:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0003a560 <LfnOfs>:
   3a560:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   3a570:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   3a580:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   3a590:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   3a5a0:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   3a5b0:	5441 2020 2020 0020                         AT     .

0003a5b8 <excvt.4558>:
   3a5b8:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   3a5c8:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   3a5d8:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   3a5e8:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   3a5f8:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   3a608:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   3a618:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   3a628:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0003a638 <Tbl>:
   3a638:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   3a648:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   3a658:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   3a668:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   3a678:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   3a688:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   3a698:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   3a6a8:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   3a6b8:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   3a6c8:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   3a6d8:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   3a6e8:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   3a6f8:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   3a708:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   3a718:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   3a728:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0003a738 <tbl_lower.4308>:
   3a738:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   3a748:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   3a758:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   3a768:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   3a778:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   3a788:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   3a798:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   3a7a8:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   3a7b8:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   3a7c8:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   3a7d8:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   3a7e8:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   3a7f8:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   3a808:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   3a818:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   3a828:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   3a838:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   3a848:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   3a858:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   3a868:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   3a878:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   3a888:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   3a898:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   3a8a8:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   3a8b8:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   3a8c8:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   3a8d8:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   3a8e8:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   3a8f8:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   3a908:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0003a918 <tbl_upper.4309>:
   3a918:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   3a928:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   3a938:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   3a948:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   3a958:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   3a968:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   3a978:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   3a988:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   3a998:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   3a9a8:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   3a9b8:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   3a9c8:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   3a9d8:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   3a9e8:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   3a9f8:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   3aa08:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   3aa18:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   3aa28:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   3aa38:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   3aa48:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   3aa58:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   3aa68:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   3aa78:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   3aa88:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   3aa98:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   3aaa8:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   3aab8:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   3aac8:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   3aad8:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   3aae8:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   3aaf8:	f7aa 0002 f7aa 0002 f7aa 0002 f638 0002     ............8...
   3ab08:	f7aa 0002 f722 0002 f7aa 0002 f7aa 0002     ...."...........
   3ab18:	f7aa 0002 f7aa 0002 f7aa 0002 f7aa 0002     ................
   3ab28:	f7aa 0002 f79c 0002 514d 4354 0000 0000     ........MQTC....
   3ab38:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3ab48:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3ab88:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3aba0:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3abe0:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   3abf0:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   3ac00:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   3ac10:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   3ac20:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   3ac30:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   3ac40:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   3ac50:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   3ac60:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   3ac70:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   3ac80:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   3ac90:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   3aca0:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   3acb0:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   3acc0:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   3acd0:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   3ace0:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   3acf0:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   3ad00:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   3ad10:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   3ad20:	5448 5054 002f 0000 0d31 0000 189e 0003     HTTP/...1.......
   3ad30:	1898 0003 1892 0003 188c 0003 18a4 0003     ................
   3ad40:	1886 0003 18a4 0003 1880 0003 187a 0003     ............z...
   3ad50:	18a4 0003 1874 0003 1874 0003 186e 0003     ....t...t...n...
   3ad60:	1868 0003 1862 0003 2000 4200 2400 4200     h...b.... .B.$.B
   3ad70:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   3ad80:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   3ad90:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   3ada0:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   3adb0:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3adc0:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   3add0:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   3ade0:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   3adf0:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3ae00:	676e 5320 6565 6173 2177 0a0d 0000 0000     ng Seesaw!......
   3ae10:	6e49 7469 6169 696c 657a 2064 6553 7365     Initialized Sees
   3ae20:	7761 0d21 000a 0000 6143 6e6e 746f 6620     aw!.....Cannot f
   3ae30:	6e69 2064 4d49 2155 0a0d 0000 4d49 2055     ind IMU!....IMU 
   3ae40:	6f66 6e75 2164 0a0d 0000 0000 4d49 2055     found!......IMU 
   3ae50:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3ae60:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   3ae70:	696c 657a 4920 554d 0a0d 0000 6548 7061     lize IMU....Heap
   3ae80:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   3ae90:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   3aea0:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   3aeb0:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   3aec0:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3aed0:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3aee0:	7265 7320 6174 7472 6e69 2067 4c43 3a49     er starting CLI:
   3aef0:	2520 0d64 000a 0000 4957 4946 545f 5341      %d.....WIFI_TAS
   3af00:	004b 0000 5245 3a52 5720 4649 2049 6174     K...ERR: WIFI ta
   3af10:	6b73 6320 756f 646c 6e20 746f 6220 2065     sk could not be 
   3af20:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3af30:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   3af40:	6e69 2067 4957 4946 203a 6425 0a0d 0000     ing WIFI: %d....
   3af50:	4955 5420 7361 006b 5245 3a52 5520 2049     UI Task.ERR: UI 
   3af60:	6174 6b73 6320 756f 646c 6e20 746f 6220     task could not b
   3af70:	2065 6e69 7469 6169 696c 657a 2164 0a0d     e initialized!..
   3af80:	0000 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   3af90:	6174 7472 6e69 2067 4955 5420 7361 3a6b     tarting UI Task:
   3afa0:	2520 0d64 000a 0000 6f43 746e 6f72 206c      %d.....Control 
   3afb0:	6154 6b73 0000 0000 5245 3a52 4320 6e6f     Task....ERR: Con
   3afc0:	7274 6c6f 7420 7361 206b 6f63 6c75 2064     trol task could 
   3afd0:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3afe0:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3aff0:	7265 7320 6174 7472 6e69 2067 6f43 746e     er starting Cont
   3b000:	6f72 206c 6154 6b73 203a 6425 0a0d 0000     rol Task: %d....
   3b010:	7245 6f72 2072 6e6f 6d20 6d65 726f 2079     Error on memory 
   3b020:	6c61 6f6c 6163 6974 6e6f 6f20 206e 5246     allocation on FR
   3b030:	4545 5452 534f 0d21 000a 0000 7245 6f72     EERTOS!.....Erro
   3b040:	2072 6e6f 7320 6174 6b63 6f20 6576 6672     r on stack overf
   3b050:	6f6c 2077 6e6f 4620 4552 5245 4f54 2153     low on FREERTOS!
   3b060:	0a0d 0000 3aa0 0003 39f0 0003 39f0 0003     .....:...9...9..
   3b070:	39ee 0003 3a92 0003 3a92 0003 3a88 0003     .9...:...:...:..
   3b080:	39ee 0003 3a92 0003 3a88 0003 3a92 0003     .9...:...:...:..
   3b090:	39ee 0003 3a98 0003 3a98 0003 3a98 0003     .9...:...:...:..
   3b0a0:	3b28 0003 44ac 0003 448e 0003 4448 0003     (;...D...D..HD..
   3b0b0:	4366 0003 4448 0003 4480 0003 4448 0003     fC..HD...D..HD..
   3b0c0:	4366 0003 448e 0003 448e 0003 4480 0003     fC...D...D...D..
   3b0d0:	4366 0003 435e 0003 435e 0003 435e 0003     fC..^C..^C..^C..
   3b0e0:	46c4 0003 4b0c 0003 49cc 0003 49cc 0003     .F...K...I...I..
   3b0f0:	49c8 0003 4ae4 0003 4ae4 0003 4ad6 0003     .I...J...J...J..
   3b100:	49c8 0003 4ae4 0003 4ad6 0003 4ae4 0003     .I...J...J...J..
   3b110:	49c8 0003 4aec 0003 4aec 0003 4aec 0003     .I...J...J...J..
   3b120:	4cf0 0003                                   .L..

0003b124 <_global_impure_ptr>:
   3b124:	0134 2000                                   4.. 

0003b128 <__sf_fake_stderr>:
	...

0003b148 <__sf_fake_stdin>:
	...

0003b168 <__sf_fake_stdout>:
	...
   3b188:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3b198:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3b1a8:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3b1b8:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003b1c5 <_ctype_>:
   3b1c5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3b1d5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3b1e5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3b1f5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3b205:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3b215:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3b225:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3b235:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3b245:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003b2c8 <_init>:
   3b2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b2ca:	46c0      	nop			; (mov r8, r8)
   3b2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3b2ce:	bc08      	pop	{r3}
   3b2d0:	469e      	mov	lr, r3
   3b2d2:	4770      	bx	lr

0003b2d4 <__init_array_start>:
   3b2d4:	000120dd 	.word	0x000120dd

0003b2d8 <_fini>:
   3b2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b2da:	46c0      	nop			; (mov r8, r8)
   3b2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3b2de:	bc08      	pop	{r3}
   3b2e0:	469e      	mov	lr, r3
   3b2e2:	4770      	bx	lr

0003b2e4 <__fini_array_start>:
   3b2e4:	000120b5 	.word	0x000120b5
